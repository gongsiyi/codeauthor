1:71bf817: /*
1:71bf817:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:71bf817:  * contributor license agreements.  See the NOTICE file distributed with
1:71bf817:  * this work for additional information regarding copyright ownership.
1:71bf817:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:71bf817:  * (the "License"); you may not use this file except in compliance with
1:71bf817:  * the License.  You may obtain a copy of the License at
1:71bf817:  *
1:71bf817:  *     http://www.apache.org/licenses/LICENSE-2.0
1:71bf817:  *
1:71bf817:  * Unless required by applicable law or agreed to in writing, software
1:71bf817:  * distributed under the License is distributed on an "AS IS" BASIS,
1:71bf817:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:71bf817:  * See the License for the specific language governing permissions and
1:71bf817:  * limitations under the License.
1:71bf817:  */
1:71bf817: 
1:71bf817: package org.apache.mahout.cf.taste.eval;
1:71bf817: 
1:71bf817: import org.apache.mahout.cf.taste.common.TasteException;
1:71bf817: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:71bf817: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:71bf817: import org.apache.mahout.cf.taste.model.DataModel;
1:71bf817: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:71bf817: 
1:71bf817: /**
1:71bf817:  * Implementations of this interface determine the items that are considered relevant,
1:71bf817:  * and splits data into a training and test subset, for purposes of precision/recall
1:71bf817:  * tests as implemented by implementations of {@link RecommenderIRStatsEvaluator}.
1:71bf817:  */
1:71bf817: public interface RelevantItemsDataSplitter {
1:71bf817: 
1:71bf817:   /**
1:71bf817:    * During testing, relevant items are removed from a particular users' preferences,
1:71bf817:    * and a model is build using this user's other preferences and all other users.
1:71bf817:    *
1:71bf817:    * @param at                 Maximum number of items to be removed
1:71bf817:    * @param relevanceThreshold Minimum strength of preference for an item to be considered
1:71bf817:    *                           relevant
1:71bf817:    * @return IDs of relevant items
1:71bf817:    */
1:71bf817:   FastIDSet getRelevantItemsIDs(long userID,
1:71bf817:                                 int at,
1:71bf817:                                 double relevanceThreshold,
1:71bf817:                                 DataModel dataModel) throws TasteException;
1:71bf817: 
1:71bf817:   /**
1:71bf817:    * Adds a single user and all their preferences to the training model.
1:71bf817:    *
1:71bf817:    * @param userID          ID of user whose preferences we are trying to predict
1:71bf817:    * @param relevantItemIDs IDs of items considered relevant to that user
1:71bf817:    * @param trainingUsers   the database of training preferences to which we will
1:71bf817:    *                        append the ones for otherUserID.
1:34795fc:    * @param otherUserID     for whom we are adding preferences to the training model
1:71bf817:    */
1:71bf817:   void processOtherUser(long userID,
1:71bf817:                         FastIDSet relevantItemIDs,
1:71bf817:                         FastByIDMap<PreferenceArray> trainingUsers,
1:71bf817:                         long otherUserID,
1:71bf817:                         DataModel dataModel) throws TasteException;
1:71bf817: 
1:71bf817: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:34795fc
/////////////////////////////////////////////////////////////////////////
1:    * @param otherUserID     for whom we are adding preferences to the training model
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:71bf817
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.eval;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: 
1: /**
1:  * Implementations of this interface determine the items that are considered relevant,
1:  * and splits data into a training and test subset, for purposes of precision/recall
1:  * tests as implemented by implementations of {@link RecommenderIRStatsEvaluator}.
1:  */
1: public interface RelevantItemsDataSplitter {
1: 
1:   /**
1:    * During testing, relevant items are removed from a particular users' preferences,
1:    * and a model is build using this user's other preferences and all other users.
1:    *
1:    * @param at                 Maximum number of items to be removed
1:    * @param relevanceThreshold Minimum strength of preference for an item to be considered
1:    *                           relevant
1:    * @return IDs of relevant items
1:    */
1:   FastIDSet getRelevantItemsIDs(long userID,
1:                                 int at,
1:                                 double relevanceThreshold,
1:                                 DataModel dataModel) throws TasteException;
1: 
1:   /**
1:    * Adds a single user and all their preferences to the training model.
1:    *
1:    * @param userID          ID of user whose preferences we are trying to predict
1:    * @param relevantItemIDs IDs of items considered relevant to that user
1:    * @param trainingUsers   the database of training preferences to which we will
1:    *                        append the ones for otherUserID.
0:    * @param otherUserID     for whom we are adding preferences to the trianing model
1:    */
1:   void processOtherUser(long userID,
1:                         FastIDSet relevantItemIDs,
1:                         FastByIDMap<PreferenceArray> trainingUsers,
1:                         long otherUserID,
1:                         DataModel dataModel) throws TasteException;
1: 
1: }
============================================================================