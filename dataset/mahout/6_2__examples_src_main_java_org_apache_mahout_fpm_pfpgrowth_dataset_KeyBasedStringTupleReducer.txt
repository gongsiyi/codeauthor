1:7002241: /**
1:7002241:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7002241:  * contributor license agreements.  See the NOTICE file distributed with
1:7002241:  * this work for additional information regarding copyright ownership.
1:7002241:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7002241:  * (the "License"); you may not use this file except in compliance with
1:7002241:  * the License.  You may obtain a copy of the License at
1:7002241:  *
1:7002241:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7002241:  *
1:7002241:  * Unless required by applicable law or agreed to in writing, software
1:7002241:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7002241:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7002241:  * See the License for the specific language governing permissions and
1:7002241:  * limitations under the License.
1:7002241:  */
1:7002241: 
1:7002241: package org.apache.mahout.fpm.pfpgrowth.dataset;
1:7002241: 
1:7002241: import java.io.IOException;
1:7002241: import java.util.Collection;
1:4ef9d31: import java.util.HashSet;
1:7002241: 
1:7002241: import org.apache.hadoop.io.Text;
1:7002241: import org.apache.hadoop.mapreduce.Reducer;
1:7002241: import org.apache.mahout.common.Parameters;
1:7002241: import org.apache.mahout.common.StringTuple;
1:7002241: 
1:7002241: public class KeyBasedStringTupleReducer extends Reducer<Text,StringTuple,Text,Text> {
1:7002241:   
1:7002241:   private int maxTransactionLength = 100;
1:7002241:   
1:7002241:   @Override
1:7002241:   protected void reduce(Text key, Iterable<StringTuple> values, Context context)
1:7002241:     throws IOException, InterruptedException {
1:4ef9d31:     Collection<String> items = new HashSet<>();
1:7002241:     
1:7002241:     for (StringTuple value : values) {
1:7002241:       for (String field : value.getEntries()) {
1:7002241:         items.add(field);
1:7002241:       }
1:7002241:     }
1:7002241:     if (items.size() > 1) {
1:7002241:       int i = 0;
1:7002241:       StringBuilder sb = new StringBuilder();
1:7002241:       String sep = "";
1:7002241:       for (String field : items) {
1:7002241:         if (i % maxTransactionLength == 0) {
1:7002241:           if (i != 0) {
1:7002241:             context.write(null, new Text(sb.toString()));
1:7002241:           }
1:7002241:           sb.replace(0, sb.length(), "");
1:7002241:           sep = "";
1:7002241:         }
1:7002241:         
1:7002241:         sb.append(sep).append(field);
1:7002241:         sep = "\t";
1:7002241:         
1:7002241:         i++;
1:7002241:         
1:7002241:       }
1:7002241:       if (sb.length() > 0) {
1:7002241:         context.write(null, new Text(sb.toString()));
1:7002241:       }
1:7002241:     }
1:7002241:   }
1:7002241:   
1:7002241:   @Override
1:7002241:   protected void setup(Context context) throws IOException, InterruptedException {
1:7002241:     super.setup(context);
1:7002241:     Parameters params = new Parameters(context.getConfiguration().get("job.parameters", ""));
1:7002241:     maxTransactionLength = Integer.valueOf(params.get("maxTransactionLength", "100"));
1:7002241:   }
1:7002241: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1:     Collection<String> items = new HashSet<>();
author:smarthi
-------------------------------------------------------------------------------
commit:7002241
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.fpm.pfpgrowth.dataset;
1: 
1: import java.io.IOException;
1: import java.util.Collection;
1: 
0: import com.google.common.collect.Sets;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Reducer;
1: import org.apache.mahout.common.Parameters;
1: import org.apache.mahout.common.StringTuple;
1: 
1: public class KeyBasedStringTupleReducer extends Reducer<Text,StringTuple,Text,Text> {
1:   
1:   private int maxTransactionLength = 100;
1:   
1:   @Override
1:   protected void reduce(Text key, Iterable<StringTuple> values, Context context)
1:     throws IOException, InterruptedException {
0:     Collection<String> items = Sets.newHashSet();
1:     
1:     for (StringTuple value : values) {
1:       for (String field : value.getEntries()) {
1:         items.add(field);
1:       }
1:     }
1:     if (items.size() > 1) {
1:       int i = 0;
1:       StringBuilder sb = new StringBuilder();
1:       String sep = "";
1:       for (String field : items) {
1:         if (i % maxTransactionLength == 0) {
1:           if (i != 0) {
1:             context.write(null, new Text(sb.toString()));
1:           }
1:           sb.replace(0, sb.length(), "");
1:           sep = "";
1:         }
1:         
1:         sb.append(sep).append(field);
1:         sep = "\t";
1:         
1:         i++;
1:         
1:       }
1:       if (sb.length() > 0) {
1:         context.write(null, new Text(sb.toString()));
1:       }
1:     }
1:   }
1:   
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     super.setup(context);
1:     Parameters params = new Parameters(context.getConfiguration().get("job.parameters", ""));
1:     maxTransactionLength = Integer.valueOf(params.get("maxTransactionLength", "100"));
1:   }
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
0:     Collection<String> items = Sets.newHashSet();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:c0f3d94
/////////////////////////////////////////////////////////////////////////
0:   protected void reduce(Text key, Iterable<StringTuple> values, Context context)
0:     throws IOException, InterruptedException {
/////////////////////////////////////////////////////////////////////////
0:     Parameters params = new Parameters(context.getConfiguration().get("job.parameters", ""));
commit:024261a
commit:5a677d4
/////////////////////////////////////////////////////////////////////////
0:   @Override
/////////////////////////////////////////////////////////////////////////
0:   }
0:   @Override
author:Robin Anil
-------------------------------------------------------------------------------
commit:42ae840
/////////////////////////////////////////////////////////////////////////
0: public class KeyBasedStringTupleReducer extends Reducer<Text,StringTuple,Text,Text> {
0:   protected void reduce(Text key, Iterable<StringTuple> values, Context context) throws IOException,
0:                                                                                 InterruptedException {
/////////////////////////////////////////////////////////////////////////
0:   protected void setup(Context context) throws IOException, InterruptedException {
0:     Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
0:     maxTransactionLength = Integer.valueOf(params.get("maxTransactionLength", "100"));
commit:6980b95
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.fpm.pfpgrowth.dataset;
commit:1be812e
/////////////////////////////////////////////////////////////////////////
0: public class KeyBasedStringTupleReducer extends
0:     Reducer<Text,StringTuple,Text,Text> {
0:   
0:   
0:   protected void reduce(Text key,
0:                         Iterable<StringTuple> values,
0:                         Context context) throws IOException,
0:                                         InterruptedException {
0:     
/////////////////////////////////////////////////////////////////////////
0:         
0:         
0:         
0:   
0:   protected void setup(Context context) throws IOException,
0:                                        InterruptedException {
0:     Parameters params = Parameters.fromString(context.getConfiguration().get(
0:       "job.parameters", ""));
0:     maxTransactionLength = Integer.valueOf(params.get("maxTransactionLength",
0:       "100"));
commit:65ea79f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.mahout.fpm.pfpgrowth.example.dataset;
0: 
0: import java.io.IOException;
0: import java.util.HashSet;
0: import java.util.Set;
0: 
0: import org.apache.hadoop.io.Text;
0: import org.apache.hadoop.mapreduce.Reducer;
0: import org.apache.mahout.common.Parameters;
0: import org.apache.mahout.common.StringTuple;
0: 
0: public class KeyBasedStringTupleReducer extends Reducer<Text, StringTuple, Text, Text> {
0: 
0:   private int maxTransactionLength = 100;
0: 
0:   protected void reduce(Text key, Iterable<StringTuple> values, Context context) throws IOException,
0:       InterruptedException {
0:     Set<String> items = new HashSet<String>();
0: 
0:     for (StringTuple value : values) {
0:       for (String field : value.getEntries()) {
0:         items.add(field);
0:       }
0:     }
0:     if (items.size() > 1) {
0:       int i = 0;
0:       StringBuilder sb = new StringBuilder();
0:       String sep = "";
0:       for (String field : items) {
0:         if (i % maxTransactionLength == 0) {
0:           if (i != 0) {
0:             context.write(null, new Text(sb.toString()));
0:           }
0:           sb.replace(0, sb.length(), "");
0:           sep = "";
0:         }
0: 
0:         sb.append(sep).append(field);
0:         sep = "\t";
0: 
0:         i++;
0: 
0:       }
0:       if (sb.length() > 0) {
0:         context.write(null, new Text(sb.toString()));
0:       }
0:     }
0:   };
0: 
0:   protected void setup(Context context) throws IOException, InterruptedException {
0:     super.setup(context);
0:     Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
0:     maxTransactionLength = Integer.valueOf(params.get("maxTransactionLength", "100"));
0:   }
0: }
============================================================================