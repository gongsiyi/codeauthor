2:7a9e99e: /**
1:7a9e99e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9e99e:  * contributor license agreements.  See the NOTICE file distributed with
1:7a9e99e:  * this work for additional information regarding copyright ownership.
1:7a9e99e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a9e99e:  * (the "License"); you may not use this file except in compliance with
1:7a9e99e:  * the License.  You may obtain a copy of the License at
1:7a9e99e:  *
1:7a9e99e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7a9e99e:  *
1:7a9e99e:  * Unless required by applicable law or agreed to in writing, software
1:7a9e99e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a9e99e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9e99e:  * See the License for the specific language governing permissions and
1:7a9e99e:  * limitations under the License.
2:7a9e99e:  */
3:7a9e99e: 
1:7a9e99e: package org.apache.mahout.cf.taste.example.kddcup;
1:7a9e99e: 
1:7a9e99e: import java.io.Closeable;
1:7a9e99e: import java.io.File;
1:7a9e99e: import java.io.IOException;
1:7a9e99e: import java.util.regex.Pattern;
1:7a9e99e: 
1:80366ee: import com.google.common.collect.AbstractIterator;
1:d608a88: import com.google.common.io.Closeables;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.common.SkippingIterator;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1:7a9e99e: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:a13b4b7: import org.apache.mahout.common.iterator.FileLineIterator;
1:7a9e99e: import org.apache.mahout.common.Pair;
1:58cc1ae: import org.slf4j.Logger;
1:58cc1ae: import org.slf4j.LoggerFactory;
1:7a9e99e: 
1:7a9e99e: /**
1:7a9e99e:  * <p>An {@link java.util.Iterator} which iterates over any of the KDD Cup's rating files. These include the files
1:7a9e99e:  * {train,test,validation}Idx{1,2}}.txt. See http://kddcup.yahoo.com/. Each element in the iteration corresponds
1:39fe224:  * to one user's ratings as a {@link PreferenceArray} and corresponding timestamps as a parallel {@code long}
1:7a9e99e:  * array.</p>
1:7a9e99e:  *
1:7a9e99e:  * <p>Timestamps in the data set are relative to some unknown point in time, for anonymity. They are assumed
1:7a9e99e:  * to be relative to the epoch, time 0, or January 1 1970, for purposes here.</p>
1:7a9e99e:  */
1:80366ee: public final class DataFileIterator
1:80366ee:     extends AbstractIterator<Pair<PreferenceArray,long[]>>
1:80366ee:     implements SkippingIterator<Pair<PreferenceArray,long[]>>, Closeable {
1:7a9e99e: 
1:7a9e99e:   private static final Pattern COLON_PATTERN = Pattern.compile(":");
1:7a9e99e:   private static final Pattern PIPE_PATTERN = Pattern.compile("\\|");
1:7a9e99e:   private static final Pattern TAB_PATTERN = Pattern.compile("\t");
1:7a9e99e: 
1:7a9e99e:   private final FileLineIterator lineIterator;
1:7a9e99e: 
1:58cc1ae:   private static final Logger log = LoggerFactory.getLogger(DataFileIterator.class);
1:58cc1ae: 
1:7a9e99e:   public DataFileIterator(File dataFile) throws IOException {
1:7a9e99e:     if (dataFile == null || dataFile.isDirectory() || !dataFile.exists()) {
1:7a9e99e:       throw new IllegalArgumentException("Bad data file: " + dataFile);
3:7a9e99e:     }
1:7a9e99e:     lineIterator = new FileLineIterator(dataFile);
1:7a9e99e:   }
1:7a9e99e: 
3:7a9e99e:   @Override
1:80366ee:   protected Pair<PreferenceArray, long[]> computeNext() {
1:7a9e99e: 
1:80366ee:     if (!lineIterator.hasNext()) {
1:80366ee:       return endOfData();
1:7a9e99e:     }
1:7a9e99e: 
1:7a9e99e:     String line = lineIterator.next();
1:7a9e99e:     // First a userID|ratingsCount line
1:7a9e99e:     String[] tokens = PIPE_PATTERN.split(line);
1:7a9e99e: 
1:7a9e99e:     long userID = Long.parseLong(tokens[0]);
1:7a9e99e:     int ratingsLeftToRead = Integer.parseInt(tokens[1]);
1:7a9e99e:     int ratingsRead = 0;
1:7a9e99e: 
1:7a9e99e:     PreferenceArray currentUserPrefs = new GenericUserPreferenceArray(ratingsLeftToRead);
1:7a9e99e:     long[] timestamps = new long[ratingsLeftToRead];
1:7a9e99e: 
1:7a9e99e:     while (ratingsLeftToRead > 0) {
1:7a9e99e: 
1:7a9e99e:       line = lineIterator.next();
1:7a9e99e: 
1:7a9e99e:       // Then a data line. May be 1-4 tokens depending on whether preference info is included (it's not in test data)
1:7a9e99e:       // or whether date info is included (not inluded in track 2). Item ID is always first, and date is the last
1:7a9e99e:       // two fields if it exists.
1:7a9e99e:       tokens = TAB_PATTERN.split(line);
1:7a9e99e:       boolean hasPref = tokens.length == 2 || tokens.length == 4;
1:7a9e99e:       boolean hasDate = tokens.length > 2;
1:7a9e99e: 
1:7a9e99e:       long itemID = Long.parseLong(tokens[0]);
1:7a9e99e: 
1:7a9e99e:       currentUserPrefs.setUserID(0, userID);
1:7a9e99e:       currentUserPrefs.setItemID(ratingsRead, itemID);
1:7a9e99e:       if (hasPref) {
1:7a9e99e:         float preference = Float.parseFloat(tokens[1]);
1:7a9e99e:         currentUserPrefs.setValue(ratingsRead, preference);
1:7a9e99e:       }
1:7a9e99e: 
1:7a9e99e:       if (hasDate) {
1:7a9e99e:         long timestamp;
1:7a9e99e:         if (hasPref) {
1:7a9e99e:           timestamp = parseFakeTimestamp(tokens[2], tokens[3]);
1:7a9e99e:         } else {
1:7a9e99e:           timestamp = parseFakeTimestamp(tokens[1], tokens[2]);
1:7a9e99e:         }
1:7a9e99e:         timestamps[ratingsRead] = timestamp;
1:7a9e99e:       }
1:7a9e99e: 
1:7a9e99e:       ratingsRead++;
1:7a9e99e:       ratingsLeftToRead--;
1:7a9e99e:     }
1:7a9e99e: 
1:87c15be:     return new Pair<>(currentUserPrefs, timestamps);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public void skip(int n) {
1:7a9e99e:     for (int i = 0; i < n; i++) {
1:7a9e99e:       if (lineIterator.hasNext()) {
1:7a9e99e:         String line = lineIterator.next();
1:7a9e99e:         // First a userID|ratingsCount line
1:7a9e99e:         String[] tokens = PIPE_PATTERN.split(line);
1:7a9e99e:         int linesToSKip = Integer.parseInt(tokens[1]);
1:7a9e99e:         lineIterator.skip(linesToSKip);
1:7a9e99e:       } else {
1:7a9e99e:         break;
1:7a9e99e:       }
1:7a9e99e:     }
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public void close() {
1:80366ee:     endOfData();
1:31cb292:     try {
1:31cb292:       Closeables.close(lineIterator, true);
1:31cb292:     } catch (IOException e) {
1:58cc1ae:       log.error(e.getMessage(), e);
1:31cb292:     }
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   /**
1:7a9e99e:    * @param dateString "date" in days since some undisclosed date, which we will arbitrarily assume to be the
1:7a9e99e:    *  epoch, January 1 1970.
1:7a9e99e:    * @param timeString time of day in HH:mm:ss format
1:7a9e99e:    * @return the UNIX timestamp for this moment in time
1:7a9e99e:    */
1:7a9e99e:   private static long parseFakeTimestamp(String dateString, CharSequence timeString) {
1:7a9e99e:     int days = Integer.parseInt(dateString);
1:7a9e99e:     String[] timeTokens = COLON_PATTERN.split(timeString);
1:7a9e99e:     int hours = Integer.parseInt(timeTokens[0]);
1:7a9e99e:     int minutes = Integer.parseInt(timeTokens[1]);
1:7a9e99e:     int seconds = Integer.parseInt(timeTokens[2]);
1:7a9e99e:     return 86400L * days + 3600L + hours + 60L * minutes + seconds;
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     return new Pair<>(currentUserPrefs, timestamps);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(DataFileIterator.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:       log.error(e.getMessage(), e);
commit:d608a88
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     Closeables.closeQuietly(lineIterator);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       Closeables.close(lineIterator, true);
1:     } catch (IOException e) {
0:       //nothing
1:     }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:  * to one user's ratings as a {@link PreferenceArray} and corresponding timestamps as a parallel {@code long}
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.AbstractIterator;
/////////////////////////////////////////////////////////////////////////
1: public final class DataFileIterator
1:     extends AbstractIterator<Pair<PreferenceArray,long[]>>
1:     implements SkippingIterator<Pair<PreferenceArray,long[]>>, Closeable {
/////////////////////////////////////////////////////////////////////////
1:   protected Pair<PreferenceArray, long[]> computeNext() {
1:     if (!lineIterator.hasNext()) {
1:       return endOfData();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     endOfData();
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.iterator.FileLineIterator;
commit:7a9e99e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup;
1: 
1: import java.io.Closeable;
1: import java.io.File;
1: import java.io.IOException;
0: import java.util.NoSuchElementException;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.mahout.cf.taste.impl.common.SkippingIterator;
1: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
0: import org.apache.mahout.common.FileLineIterator;
1: import org.apache.mahout.common.Pair;
1: 
1: /**
1:  * <p>An {@link java.util.Iterator} which iterates over any of the KDD Cup's rating files. These include the files
1:  * {train,test,validation}Idx{1,2}}.txt. See http://kddcup.yahoo.com/. Each element in the iteration corresponds
0:  * to one user's ratings as a {@link PreferenceArray} and corresponding timestamps as a parallel {@link long[]}
1:  * array.</p>
1:  *
1:  * <p>Timestamps in the data set are relative to some unknown point in time, for anonymity. They are assumed
1:  * to be relative to the epoch, time 0, or January 1 1970, for purposes here.</p>
1:  */
0: public final class DataFileIterator implements SkippingIterator<Pair<PreferenceArray,long[]>>, Closeable {
1: 
1:   private static final Pattern COLON_PATTERN = Pattern.compile(":");
1:   private static final Pattern PIPE_PATTERN = Pattern.compile("\\|");
1:   private static final Pattern TAB_PATTERN = Pattern.compile("\t");
1: 
1:   private final FileLineIterator lineIterator;
1: 
1:   public DataFileIterator(File dataFile) throws IOException {
1:     if (dataFile == null || dataFile.isDirectory() || !dataFile.exists()) {
1:       throw new IllegalArgumentException("Bad data file: " + dataFile);
1:     }
1:     lineIterator = new FileLineIterator(dataFile);
1:   }
1: 
1:   @Override
0:   public boolean hasNext() {
0:     return lineIterator.hasNext();
1:   }
1: 
1:   @Override
0:   public Pair<PreferenceArray,long[]> next() {
1: 
0:     if (!hasNext()) {
0:       throw new NoSuchElementException();
1:     }
1: 
1:     String line = lineIterator.next();
1:     // First a userID|ratingsCount line
1:     String[] tokens = PIPE_PATTERN.split(line);
1: 
1:     long userID = Long.parseLong(tokens[0]);
1:     int ratingsLeftToRead = Integer.parseInt(tokens[1]);
1:     int ratingsRead = 0;
1: 
1:     PreferenceArray currentUserPrefs = new GenericUserPreferenceArray(ratingsLeftToRead);
1:     long[] timestamps = new long[ratingsLeftToRead];
1: 
1:     while (ratingsLeftToRead > 0) {
1: 
1:       line = lineIterator.next();
1: 
1:       // Then a data line. May be 1-4 tokens depending on whether preference info is included (it's not in test data)
1:       // or whether date info is included (not inluded in track 2). Item ID is always first, and date is the last
1:       // two fields if it exists.
1:       tokens = TAB_PATTERN.split(line);
1:       boolean hasPref = tokens.length == 2 || tokens.length == 4;
1:       boolean hasDate = tokens.length > 2;
1: 
1:       long itemID = Long.parseLong(tokens[0]);
1: 
1:       currentUserPrefs.setUserID(0, userID);
1:       currentUserPrefs.setItemID(ratingsRead, itemID);
1:       if (hasPref) {
1:         float preference = Float.parseFloat(tokens[1]);
1:         currentUserPrefs.setValue(ratingsRead, preference);
1:       }
1: 
1:       if (hasDate) {
1:         long timestamp;
1:         if (hasPref) {
1:           timestamp = parseFakeTimestamp(tokens[2], tokens[3]);
1:         } else {
1:           timestamp = parseFakeTimestamp(tokens[1], tokens[2]);
1:         }
1:         timestamps[ratingsRead] = timestamp;
1:       }
1: 
1:       ratingsRead++;
1:       ratingsLeftToRead--;
1:     }
1: 
0:     return new Pair<PreferenceArray,long[]>(currentUserPrefs, timestamps);
1:   }
1: 
1:   /**
0:    * @throws UnsupportedOperationException
1:    */
1:   @Override
0:   public void remove() {
0:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public void skip(int n) {
1:     for (int i = 0; i < n; i++) {
1:       if (lineIterator.hasNext()) {
1:         String line = lineIterator.next();
1:         // First a userID|ratingsCount line
1:         String[] tokens = PIPE_PATTERN.split(line);
1:         int linesToSKip = Integer.parseInt(tokens[1]);
1:         lineIterator.skip(linesToSKip);
1:       } else {
1:         break;
1:       }
1:     }
1:   }
1: 
1:   @Override
1:   public void close() {
0:     lineIterator.close();
1:   }
1: 
1:   /**
1:    * @param dateString "date" in days since some undisclosed date, which we will arbitrarily assume to be the
1:    *  epoch, January 1 1970.
1:    * @param timeString time of day in HH:mm:ss format
1:    * @return the UNIX timestamp for this moment in time
1:    */
1:   private static long parseFakeTimestamp(String dateString, CharSequence timeString) {
1:     int days = Integer.parseInt(dateString);
1:     String[] timeTokens = COLON_PATTERN.split(timeString);
1:     int hours = Integer.parseInt(timeTokens[0]);
1:     int minutes = Integer.parseInt(timeTokens[1]);
1:     int seconds = Integer.parseInt(timeTokens[2]);
1:     return 86400L * days + 3600L + hours + 60L * minutes + seconds;
1:   }
1: 
1: }
============================================================================