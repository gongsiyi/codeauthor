1:faa82ce: /**
1:faa82ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:faa82ce:  * contributor license agreements.  See the NOTICE file distributed with
1:faa82ce:  * this work for additional information regarding copyright ownership.
1:faa82ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:faa82ce:  * (the "License"); you may not use this file except in compliance with
1:faa82ce:  * the License.  You may obtain a copy of the License at
1:faa82ce:  *
1:faa82ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:faa82ce:  *
1:faa82ce:  * Unless required by applicable law or agreed to in writing, software
1:faa82ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:faa82ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:faa82ce:  * See the License for the specific language governing permissions and
1:faa82ce:  * limitations under the License.
1:faa82ce:  */
1:faa82ce: 
1:faa82ce: package org.apache.mahout.vectorizer;
1:faa82ce: 
1:87d4b2e: import java.util.List;
1:87d4b2e: 
1:58cc1ae: import com.google.common.collect.Lists;
1:faa82ce: import com.google.common.io.Closeables;
1:faa82ce: import org.apache.hadoop.conf.Configuration;
1:faa82ce: import org.apache.hadoop.fs.FileSystem;
1:faa82ce: import org.apache.hadoop.fs.Path;
1:faa82ce: import org.apache.hadoop.io.SequenceFile;
1:faa82ce: import org.apache.hadoop.io.Text;
1:faa82ce: import org.apache.hadoop.util.ToolRunner;
1:faa82ce: import org.apache.mahout.common.MahoutTestCase;
1:faa82ce: import org.apache.mahout.common.Pair;
1:faa82ce: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1:faa82ce: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:faa82ce: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;
1:faa82ce: import org.apache.mahout.math.NamedVector;
1:faa82ce: import org.apache.mahout.math.SequentialAccessSparseVector;
1:faa82ce: import org.apache.mahout.math.VectorWritable;
1:faa82ce: import org.junit.Before;
1:faa82ce: import org.junit.Test;
1:faa82ce: 
1:faa82ce: public class EncodedVectorsFromSequenceFilesTest extends MahoutTestCase {
1:faa82ce: 
1:faa82ce:   private static final int NUM_DOCS = 100;
1:faa82ce:   
1:faa82ce:   private Configuration conf;
1:faa82ce:   private Path inputPath;
1:faa82ce:   
1:faa82ce:   @Override
1:faa82ce:   @Before
1:faa82ce:   public void setUp() throws Exception {
1:faa82ce:     super.setUp();
1:e3ec9d8:     conf = getConfiguration();
1:faa82ce: 
1:faa82ce:     inputPath = getTestTempFilePath("documents/docs.file");
1:1de8cec:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1:faa82ce: 
1:faa82ce:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, inputPath, Text.class, Text.class);
1:faa82ce: 
1:faa82ce:     RandomDocumentGenerator gen = new RandomDocumentGenerator();
1:faa82ce: 
1:faa82ce:     try {
1:faa82ce:       for (int i = 0; i < NUM_DOCS; i++) {
1:faa82ce:         writer.append(new Text("Document::ID::" + i), new Text(gen.getRandomDocument()));
1:faa82ce:       }
1:faa82ce:     } finally {
1:87d4b2e:       Closeables.close(writer, false);
1:faa82ce:     }
1:faa82ce:   }
1:faa82ce:   
1:faa82ce:   
1:faa82ce:   @Test
1:faa82ce:   public void testCreate() throws Exception {
1:faa82ce:     runTest(false, false);
1:faa82ce:   }
1:faa82ce: 
1:faa82ce:   @Test
1:faa82ce:   public void testCreateNamed() throws Exception {
1:faa82ce:     runTest(false, true);
1:faa82ce:   }
1:faa82ce:   
1:faa82ce:   @Test
1:faa82ce:   public void testCreateSeq() throws Exception {
1:faa82ce:     runTest(true, false);
1:faa82ce:   }
1:faa82ce:   
1:faa82ce:   @Test
1:faa82ce:   public void testCreateSeqNamed() throws Exception {
1:faa82ce:     runTest(true, true);
1:faa82ce:   }
1:faa82ce:   
1:faa82ce:   private void runTest(boolean sequential, boolean named) throws Exception {
1:faa82ce:     Path tmpPath = getTestTempDirPath();
1:faa82ce:     Path outputPath = new Path(tmpPath, "output");
1:faa82ce:     
1:58cc1ae:     List<String> argList = Lists.newLinkedList();;
1:faa82ce:     argList.add("-i");
1:faa82ce:     argList.add(inputPath.toString());
1:faa82ce:     argList.add("-o");
1:faa82ce:     argList.add(outputPath.toString());
1:faa82ce:     
1:faa82ce:     if (sequential) {
1:faa82ce:       argList.add("-seq");
1:faa82ce:     }
1:faa82ce:     
1:faa82ce:     if (named) {
1:faa82ce:       argList.add("-nv");
1:faa82ce:     }
1:faa82ce:     
1:faa82ce:     String[] args = argList.toArray(new String[argList.size()]);
1:faa82ce: 
1:e3ec9d8:     ToolRunner.run(getConfiguration(), new EncodedVectorsFromSequenceFiles(), args);
1:faa82ce: 
1:02ff22f:     SequenceFileDirIterator<Text, VectorWritable> iter = new SequenceFileDirIterator<>(outputPath, PathType.LIST, PathFilters.partFilter(), null, true, conf);
1:faa82ce:     int seen = 0;
1:faa82ce:     while (iter.hasNext()) {
1:faa82ce:       Pair<Text, VectorWritable> next = iter.next();
1:e64dd36:       if (sequential && !named) {
1:faa82ce:         assertTrue(next.getSecond().get() instanceof SequentialAccessSparseVector);
1:e64dd36:       } else if (named) {
1:faa82ce:         assertTrue(next.getSecond().get() instanceof NamedVector);
1:faa82ce:       }
1:faa82ce:       seen++;
1:faa82ce:     }
1:faa82ce:     assertEquals("Missed some vectors", NUM_DOCS, seen);
1:faa82ce:   }  
1:faa82ce: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     SequenceFileDirIterator<Text, VectorWritable> iter = new SequenceFileDirIterator<>(outputPath, PathType.LIST, PathFilters.partFilter(), null, true, conf);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:     List<String> argList = Lists.newLinkedList();;
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0: import java.util.LinkedList;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
commit:faa82ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.vectorizer;
1: 
1: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.util.ToolRunner;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;
0: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterator;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import java.util.LinkedList;
0: import java.util.List;
1: 
1: public class EncodedVectorsFromSequenceFilesTest extends MahoutTestCase {
1: 
1:   private static final int NUM_DOCS = 100;
1:   
1:   private Configuration conf;
1:   private Path inputPath;
1:   
1:   @Override
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
0:     conf = new Configuration();
0:     FileSystem fs = FileSystem.get(conf);
1: 
1:     inputPath = getTestTempFilePath("documents/docs.file");
1:     SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, inputPath, Text.class, Text.class);
1: 
1:     RandomDocumentGenerator gen = new RandomDocumentGenerator();
1: 
1:     try {
1:       for (int i = 0; i < NUM_DOCS; i++) {
1:         writer.append(new Text("Document::ID::" + i), new Text(gen.getRandomDocument()));
1:       }
1:     } finally {
0:       Closeables.closeQuietly(writer);
1:     }
1:   }
1:   
1:   
1:   @Test
1:   public void testCreate() throws Exception {
1:     runTest(false, false);
1:   }
1: 
1:   @Test
1:   public void testCreateNamed() throws Exception {
1:     runTest(false, true);
1:   }
1:   
1:   @Test
1:   public void testCreateSeq() throws Exception {
1:     runTest(true, false);
1:   }
1:   
1:   @Test
1:   public void testCreateSeqNamed() throws Exception {
1:     runTest(true, true);
1:   }
1:   
1:   private void runTest(boolean sequential, boolean named) throws Exception {
1:     Path tmpPath = getTestTempDirPath();
1:     Path outputPath = new Path(tmpPath, "output");
1:     
0:     List<String> argList = new LinkedList<String>();
1:     argList.add("-i");
1:     argList.add(inputPath.toString());
1:     argList.add("-o");
1:     argList.add(outputPath.toString());
1:     
1:     if (sequential) {
1:       argList.add("-seq");
1:     }
1:     
1:     if (named) {
1:       argList.add("-nv");
1:     }
1:     
1:     String[] args = argList.toArray(new String[argList.size()]);
1: 
0:     EncodedVectorsFromSequenceFiles.main(args);
1: 
0:     SequenceFileDirIterator<Text, VectorWritable> iter = new SequenceFileDirIterator<Text, VectorWritable>(outputPath, PathType.LIST, PathFilters.partFilter(), null, true, conf);
1:     int seen = 0;
1:     while (iter.hasNext()) {
1:       Pair<Text, VectorWritable> next = iter.next();
0:       if (sequential && !named){
1:         assertTrue(next.getSecond().get() instanceof SequentialAccessSparseVector);
0:       } else if (named){
1:         assertTrue(next.getSecond().get() instanceof NamedVector);
1:       }
1:       seen++;
1:     }
1:     assertEquals("Missed some vectors", NUM_DOCS, seen);
1:   }  
1: }
author:Isabel Drost
-------------------------------------------------------------------------------
commit:e3ec9d8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.hadoop.util.ToolRunner;
/////////////////////////////////////////////////////////////////////////
1:     conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(getConfiguration(), new EncodedVectorsFromSequenceFiles(), args);
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:       if (sequential && !named) {
1:       } else if (named) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1de8cec
/////////////////////////////////////////////////////////////////////////
1:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
0: 
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
============================================================================