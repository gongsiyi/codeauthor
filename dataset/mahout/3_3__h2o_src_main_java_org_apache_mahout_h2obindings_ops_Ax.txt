1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
2:f870a63:  */
2:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import org.apache.mahout.math.Vector;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2OBCast;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: import water.fvec.NewChunk;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * Calculate Ax (where x is an in-core Vector)
1:2d1b0bf:  */
1:f870a63: public class Ax {
1:2d1b0bf:   /**
1:2d1b0bf:    * Perform Ax operation with a DRM and an in-core Vector to create a new DRM.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA DRM representing matrix A.
1:2d1b0bf:    * @param x in-core Mahout Vector.
1:2d1b0bf:    * @return new DRM containing Ax.
1:2d1b0bf:    */
1:03a5bb6:   public static H2ODrm exec(H2ODrm drmA, Vector x) {
1:f870a63:     Frame A = drmA.frame;
1:f870a63:     Vec keys = drmA.keys;
1:02ff22f:     final H2OBCast<Vector> bx = new H2OBCast<>(x);
1:f870a63: 
1:2d1b0bf:     // Ax is written into nc (single element, not array) with an MRTask on A,
1:2d1b0bf:     // and therefore will be similarly partitioned as A.
1:2d1b0bf:     //
1:2d1b0bf:     // x.size() == A.numCols() == chks.length
1:f870a63:     Frame Ax = new MRTask() {
1:f870a63:         public void map(Chunk chks[], NewChunk nc) {
1:2d1b0bf:           int chunkSize = chks[0].len();
1:f870a63:           Vector x = bx.value();
1:f870a63: 
1:2d1b0bf:           for (int r = 0; r < chunkSize; r++) {
1:f870a63:             double v = 0;
1:f870a63:             for (int c = 0; c < chks.length; c++) {
1:f5f54a1:               v += (chks[c].atd(r) * x.getQuick(c));
1:f870a63:             }
1:f870a63:             nc.addNum(v);
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }.doAll(1, A).outputFrame(null, null);
1:f870a63: 
1:2d1b0bf:     // Carry forward labels of A blindly into ABt
1:f870a63:     return new H2ODrm(Ax, keys);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     final H2OBCast<Vector> bx = new H2OBCast<>(x);
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:               v += (chks[c].atd(r) * x.getQuick(c));
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Calculate Ax (where x is an in-core Vector)
1:  */
1:   /**
1:    * Perform Ax operation with a DRM and an in-core Vector to create a new DRM.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param x in-core Mahout Vector.
1:    * @return new DRM containing Ax.
1:    */
1:     // Ax is written into nc (single element, not array) with an MRTask on A,
1:     // and therefore will be similarly partitioned as A.
1:     //
1:     // x.size() == A.numCols() == chks.length
1:           int chunkSize = chks[0].len();
1:           for (int r = 0; r < chunkSize; r++) {
/////////////////////////////////////////////////////////////////////////
1:     // Carry forward labels of A blindly into ABt
commit:03a5bb6
/////////////////////////////////////////////////////////////////////////
1:   public static H2ODrm exec(H2ODrm drmA, Vector x) {
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.h2obindings.H2OHelper;
1: import org.apache.mahout.h2obindings.drm.H2OBCast;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
1: import water.fvec.NewChunk;
1: 
1: public class Ax {
0:   /* Calculate Ax (where x is an in-core Vector) */
0:   public static H2ODrm Ax(H2ODrm drmA, Vector x) {
1:     Frame A = drmA.frame;
1:     Vec keys = drmA.keys;
0:     final H2OBCast<Vector> bx = new H2OBCast<Vector>(x);
1: 
0:     /* Ax is written into nc (single element, not array) with an MRTask on A,
0:        and therefore will be similarly partitioned as A.
1: 
0:        x.size() == A.numCols() == chks.length
1:     */
1:     Frame Ax = new MRTask() {
1:         public void map(Chunk chks[], NewChunk nc) {
0:           int chunk_size = chks[0].len();
1:           Vector x = bx.value();
1: 
0:           for (int r = 0; r < chunk_size; r++) {
1:             double v = 0;
1:             for (int c = 0; c < chks.length; c++) {
0:               v += (chks[c].at0(r) * x.getQuick(c));
1:             }
1:             nc.addNum(v);
1:           }
1:         }
1:       }.doAll(1, A).outputFrame(null, null);
1: 
0:     /* Carry forward labels of A blindly into ABt */
1:     return new H2ODrm(Ax, keys);
1:   }
1: }
============================================================================