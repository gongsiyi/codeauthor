1:1499411: /*
1:1499411:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1499411:  * contributor license agreements.  See the NOTICE file distributed with
1:1499411:  * this work for additional information regarding copyright ownership.
1:1499411:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1499411:  * (the "License"); you may not use this file except in compliance with
1:1499411:  * the License.  You may obtain a copy of the License at
1:1499411:  *
1:1499411:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1499411:  *
1:1499411:  * Unless required by applicable law or agreed to in writing, software
1:1499411:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1499411:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1499411:  * See the License for the specific language governing permissions and
1:1499411:  * limitations under the License.
1:1499411:  */
1:1499411: 
1:e3fb0c4: package org.apache.mahout.classifier.naivebayes;
1:1526c5b: 
1:87d4b2e: import java.io.File;
1:87d4b2e: 
1:864ba1a: import com.google.common.io.Closeables;
1:e3fb0c4: import org.apache.hadoop.conf.Configuration;
1:e3fb0c4: import org.apache.hadoop.fs.FileSystem;
1:e3fb0c4: import org.apache.hadoop.fs.Path;
1:e3fb0c4: import org.apache.hadoop.io.SequenceFile;
1:d8d721a: import org.apache.hadoop.io.Text;
1:e3fb0c4: import org.apache.mahout.classifier.AbstractVectorClassifier;
1:e3fb0c4: import org.apache.mahout.classifier.naivebayes.training.TrainNaiveBayesJob;
1:e3fb0c4: import org.apache.mahout.common.MahoutTestCase;
1:e3fb0c4: import org.apache.mahout.math.DenseVector;
1:e3fb0c4: import org.apache.mahout.math.Vector;
1:d8d721a: import org.apache.mahout.math.VectorWritable;
1:e3fb0c4: import org.apache.mahout.math.hadoop.MathHelper;
1:e3fb0c4: import org.junit.Before;
1:e3fb0c4: import org.junit.Test;
4:e3fb0c4: 
1:e3fb0c4: public class NaiveBayesTest extends MahoutTestCase {
1:e3fb0c4: 
1:4194a28:   private Configuration conf;
1:4194a28:   private File inputFile;
1:4194a28:   private File outputDir;
1:4194a28:   private File tempDir;
1:e3fb0c4: 
1:d94eb39:   static final Text LABEL_STOLEN = new Text("/stolen/");
1:d94eb39:   static final Text LABEL_NOT_STOLEN = new Text("/not_stolen/");
1:e3fb0c4: 
1:e3fb0c4:   static final Vector.Element COLOR_RED = MathHelper.elem(0, 1);
1:e3fb0c4:   static final Vector.Element COLOR_YELLOW = MathHelper.elem(1, 1);
1:e3fb0c4:   static final Vector.Element TYPE_SPORTS = MathHelper.elem(2, 1);
1:e3fb0c4:   static final Vector.Element TYPE_SUV = MathHelper.elem(3, 1);
1:e3fb0c4:   static final Vector.Element ORIGIN_DOMESTIC = MathHelper.elem(4, 1);
1:e3fb0c4:   static final Vector.Element ORIGIN_IMPORTED = MathHelper.elem(5, 1);
1:e3fb0c4: 
1:e3fb0c4: 
1:1499411:   @Override
1:e3fb0c4:   @Before
1:1499411:   public void setUp() throws Exception {
1:e3fb0c4:     super.setUp();
1:e3fb0c4: 
1:e3ec9d8:     conf = getConfiguration();
1:e3fb0c4: 
1:e3fb0c4:     inputFile = getTestTempFile("trainingInstances.seq");
1:e3fb0c4:     outputDir = getTestTempDir("output");
1:e3fb0c4:     outputDir.delete();
1:e3fb0c4:     tempDir = getTestTempDir("tmp");
1:e3fb0c4: 
1:864ba1a:     SequenceFile.Writer writer = new SequenceFile.Writer(FileSystem.get(conf), conf,
1:864ba1a:         new Path(inputFile.getAbsolutePath()), Text.class, VectorWritable.class);
1:864ba1a: 
1:864ba1a:     try {
1:d94eb39:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
1:d8d721a:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
1:d94eb39:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
1:d8d721a:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SPORTS, ORIGIN_DOMESTIC));
1:d94eb39:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SPORTS, ORIGIN_IMPORTED));
1:d8d721a:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
1:d94eb39:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
1:d8d721a:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_DOMESTIC));
1:d8d721a:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_IMPORTED));
1:d94eb39:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_IMPORTED));
1:864ba1a:     } finally {
1:864ba1a:       Closeables.close(writer, false);
1:e3fb0c4:     }
1:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4:   @Test
1:e3fb0c4:   public void toyData() throws Exception {
1:e3fb0c4:     TrainNaiveBayesJob trainNaiveBayes = new TrainNaiveBayesJob();
1:e3fb0c4:     trainNaiveBayes.setConf(conf);
1:864ba1a:     trainNaiveBayes.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:864ba1a:         "--tempDir", tempDir.getAbsolutePath() });
1:e3fb0c4: 
1:e3fb0c4:     NaiveBayesModel naiveBayesModel = NaiveBayesModel.materialize(new Path(outputDir.getAbsolutePath()), conf);
1:e3fb0c4: 
1:e3fb0c4:     AbstractVectorClassifier classifier = new StandardNaiveBayesClassifier(naiveBayesModel);
1:e3fb0c4: 
1:e3fb0c4:     assertEquals(2, classifier.numCategories());
1:e3fb0c4: 
1:d8d721a:     Vector prediction = classifier.classifyFull(trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_DOMESTIC).get());
1:e3fb0c4: 
1:e3fb0c4:     // should be classified as not stolen
1:e3fb0c4:     assertTrue(prediction.get(0) < prediction.get(1));
1:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4:   @Test
1:e3fb0c4:   public void toyDataComplementary() throws Exception {
1:e3fb0c4:     TrainNaiveBayesJob trainNaiveBayes = new TrainNaiveBayesJob();
1:e3fb0c4:     trainNaiveBayes.setConf(conf);
1:864ba1a:     trainNaiveBayes.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:88520fb:         "--trainComplementary",
1:864ba1a:         "--tempDir", tempDir.getAbsolutePath() });
1:e3fb0c4: 
1:e3fb0c4:     NaiveBayesModel naiveBayesModel = NaiveBayesModel.materialize(new Path(outputDir.getAbsolutePath()), conf);
1:e3fb0c4: 
1:e3fb0c4:     AbstractVectorClassifier classifier = new ComplementaryNaiveBayesClassifier(naiveBayesModel);
1:e3fb0c4: 
1:e3fb0c4:     assertEquals(2, classifier.numCategories());
1:e3fb0c4: 
1:d8d721a:     Vector prediction = classifier.classifyFull(trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_DOMESTIC).get());
1:e3fb0c4: 
1:e3fb0c4:     // should be classified as not stolen
1:e3fb0c4:     assertTrue(prediction.get(0) < prediction.get(1));
1:e3fb0c4:   }
1:e3fb0c4: 
1:d8d721a:   static VectorWritable trainingInstance(Vector.Element... elems) {
1:e3fb0c4:     DenseVector trainingInstance = new DenseVector(6);
1:e3fb0c4:     for (Vector.Element elem : elems) {
1:e3fb0c4:       trainingInstance.set(elem.index(), elem.get());
1:e3fb0c4:     }
1:d8d721a:     return new VectorWritable(trainingInstance);
1:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4: 
1:e3fb0c4: }
============================================================================
author:Andrew Musselman
-------------------------------------------------------------------------------
commit:864ba1a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
1:     SequenceFile.Writer writer = new SequenceFile.Writer(FileSystem.get(conf), conf,
1:         new Path(inputFile.getAbsolutePath()), Text.class, VectorWritable.class);
1: 
1:     try {
/////////////////////////////////////////////////////////////////////////
1:     } finally {
1:       Closeables.close(writer, false);
/////////////////////////////////////////////////////////////////////////
1:     trainNaiveBayes.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:         "--tempDir", tempDir.getAbsolutePath() });
/////////////////////////////////////////////////////////////////////////
1:     trainNaiveBayes.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:         "--tempDir", tempDir.getAbsolutePath() });
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:670a7d2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     try (SequenceFile.Writer writer = new SequenceFile.Writer(FileSystem.get(conf), conf,
0:         new Path(inputFile.getAbsolutePath()), Text.class, VectorWritable.class)) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     trainNaiveBayes.run(new String[]{"--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
0:         "--tempDir", tempDir.getAbsolutePath()});
/////////////////////////////////////////////////////////////////////////
0:     trainNaiveBayes.run(new String[]{"--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
0:         "--tempDir", tempDir.getAbsolutePath()});
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:88520fb
/////////////////////////////////////////////////////////////////////////
0:         "--tempDir", tempDir.getAbsolutePath() });
/////////////////////////////////////////////////////////////////////////
1:         "--trainComplementary",
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0:         "--labels", "stolen,not_stolen", "--trainComplementary",
author:Isabel Drost
-------------------------------------------------------------------------------
commit:e3ec9d8
/////////////////////////////////////////////////////////////////////////
1:     conf = getConfiguration();
author:Robin Anil
-------------------------------------------------------------------------------
commit:d94eb39
/////////////////////////////////////////////////////////////////////////
1:   static final Text LABEL_STOLEN = new Text("/stolen/");
1:   static final Text LABEL_NOT_STOLEN = new Text("/not_stolen/");
/////////////////////////////////////////////////////////////////////////
1:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
1:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
1:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SPORTS, ORIGIN_IMPORTED));
1:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
1:       writer.append(LABEL_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_IMPORTED));
/////////////////////////////////////////////////////////////////////////
0:         "-el", "--tempDir", tempDir.getAbsolutePath() });
/////////////////////////////////////////////////////////////////////////
0:         "-el", "--trainComplementary",
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
1: import org.apache.hadoop.io.Text;
1: import org.apache.mahout.math.VectorWritable;
0: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0:   static final Text LABEL_STOLEN = new Text("stolen");
0:   static final Text LABEL_NOT_STOLEN = new Text("not_stolen");
/////////////////////////////////////////////////////////////////////////
0:         new Path(inputFile.getAbsolutePath()), Text.class, VectorWritable.class);
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
1:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
1:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_YELLOW, TYPE_SPORTS, ORIGIN_IMPORTED));
1:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
1:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_DOMESTIC));
1:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_IMPORTED));
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_IMPORTED));
/////////////////////////////////////////////////////////////////////////
0:         "--labels", "stolen,not_stolen", "--tempDir", tempDir.getAbsolutePath() });
/////////////////////////////////////////////////////////////////////////
1:     Vector prediction = classifier.classifyFull(trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_DOMESTIC).get());
/////////////////////////////////////////////////////////////////////////
0:         "--labels", "stolen,not_stolen", "--trainComplementary",
/////////////////////////////////////////////////////////////////////////
1:     Vector prediction = classifier.classifyFull(trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_DOMESTIC).get());
1:   static VectorWritable trainingInstance(Vector.Element... elems) {
1:     return new VectorWritable(trainingInstance);
commit:1526c5b
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
1: 
0: import org.apache.hadoop.io.IntWritable;
0: import org.apache.mahout.math.MultiLabelVectorWritable;
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:   static final String LABEL_STOLEN = "stolen";
0:   static final String LABEL_NOT_STOLEN = "not_stolen";
/////////////////////////////////////////////////////////////////////////
0:         new Path(inputFile.getAbsolutePath()), IntWritable.class, MultiLabelVectorWritable.class);
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_STOLEN, COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_NOT_STOLEN, COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_STOLEN, COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_NOT_STOLEN, COLOR_YELLOW, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_STOLEN, COLOR_YELLOW, TYPE_SPORTS, ORIGIN_IMPORTED));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_NOT_STOLEN, COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_STOLEN, COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_NOT_STOLEN, COLOR_YELLOW, TYPE_SUV, ORIGIN_DOMESTIC));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_NOT_STOLEN, COLOR_RED, TYPE_SUV, ORIGIN_IMPORTED));
0:       writer.append(new IntWritable(0), trainingInstance(LABEL_STOLEN, COLOR_RED, TYPE_SPORTS, ORIGIN_IMPORTED));
/////////////////////////////////////////////////////////////////////////
0:         "--labelSize", "2", "--tempDir", tempDir.getAbsolutePath() });
/////////////////////////////////////////////////////////////////////////
0:     Vector prediction = classifier.classify(trainingInstance("", COLOR_RED, TYPE_SUV, ORIGIN_DOMESTIC).getVector());
/////////////////////////////////////////////////////////////////////////
0:         "--labelSize", "2", "--trainComplementary",
/////////////////////////////////////////////////////////////////////////
0:     Vector prediction = classifier.classify(trainingInstance("", COLOR_RED, TYPE_SUV, ORIGIN_DOMESTIC).getVector());
0:   static MultiLabelVectorWritable trainingInstance(String label, Vector.Element... elems) {
0:     return new MultiLabelVectorWritable(trainingInstance, new int[] {label.equals("stolen") ? 0 : 1});
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:   private Configuration conf;
1:   private File inputFile;
1:   private File outputDir;
1:   private File tempDir;
commit:1499411
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:   static VectorWritable trainingInstance(Vector.Element... elems) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.naivebayes;
1: 
0: import com.google.common.io.Closeables;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.SequenceFile;
0: import org.apache.hadoop.io.Text;
1: import org.apache.mahout.classifier.AbstractVectorClassifier;
1: import org.apache.mahout.classifier.naivebayes.training.TrainNaiveBayesJob;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.hadoop.MathHelper;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import java.io.File;
1: 
1: public class NaiveBayesTest extends MahoutTestCase {
1: 
0:   Configuration conf;
0:   File inputFile;
0:   File outputDir;
0:   File tempDir;
1: 
0:   static final Text LABEL_STOLEN = new Text("stolen");
0:   static final Text LABEL_NOT_STOLEN = new Text("not_stolen");
1: 
1:   static final Vector.Element COLOR_RED = MathHelper.elem(0, 1);
1:   static final Vector.Element COLOR_YELLOW = MathHelper.elem(1, 1);
1:   static final Vector.Element TYPE_SPORTS = MathHelper.elem(2, 1);
1:   static final Vector.Element TYPE_SUV = MathHelper.elem(3, 1);
1:   static final Vector.Element ORIGIN_DOMESTIC = MathHelper.elem(4, 1);
1:   static final Vector.Element ORIGIN_IMPORTED = MathHelper.elem(5, 1);
1: 
1: 
1:   @Before
0:   public void setup() throws Exception {
1:     super.setUp();
1: 
0:     conf = new Configuration();
1: 
1:     inputFile = getTestTempFile("trainingInstances.seq");
1:     outputDir = getTestTempDir("output");
1:     outputDir.delete();
1:     tempDir = getTestTempDir("tmp");
1: 
0:     SequenceFile.Writer writer = new SequenceFile.Writer(FileSystem.get(conf), conf,
0:         new Path(inputFile.getAbsolutePath()), Text.class, VectorWritable.class);
1: 
0:     try {
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SPORTS, ORIGIN_DOMESTIC));
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_YELLOW, TYPE_SPORTS, ORIGIN_IMPORTED));
0:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_IMPORTED));
0:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_YELLOW, TYPE_SUV, ORIGIN_DOMESTIC));
0:       writer.append(LABEL_NOT_STOLEN, trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_IMPORTED));
0:       writer.append(LABEL_STOLEN,      trainingInstance(COLOR_RED, TYPE_SPORTS, ORIGIN_IMPORTED));
0:     } finally {
0:       Closeables.closeQuietly(writer);
1:     }
1:   }
1: 
1:   @Test
1:   public void toyData() throws Exception {
1:     TrainNaiveBayesJob trainNaiveBayes = new TrainNaiveBayesJob();
1:     trainNaiveBayes.setConf(conf);
0:     trainNaiveBayes.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
0:         "--labels", "stolen,not_stolen", "--tempDir", tempDir.getAbsolutePath() });
1: 
1:     NaiveBayesModel naiveBayesModel = NaiveBayesModel.materialize(new Path(outputDir.getAbsolutePath()), conf);
1: 
1:     AbstractVectorClassifier classifier = new StandardNaiveBayesClassifier(naiveBayesModel);
1: 
1:     assertEquals(2, classifier.numCategories());
1: 
0:     Vector prediction = classifier.classify(trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_DOMESTIC).get());
1: 
1:     // should be classified as not stolen
1:     assertTrue(prediction.get(0) < prediction.get(1));
1:   }
1: 
1:   @Test
1:   public void toyDataComplementary() throws Exception {
1:     TrainNaiveBayesJob trainNaiveBayes = new TrainNaiveBayesJob();
1:     trainNaiveBayes.setConf(conf);
0:     trainNaiveBayes.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
0:         "--labels", "stolen,not_stolen", "--trainComplementary", String.valueOf(true),
0:         "--tempDir", tempDir.getAbsolutePath() });
1: 
1:     NaiveBayesModel naiveBayesModel = NaiveBayesModel.materialize(new Path(outputDir.getAbsolutePath()), conf);
1: 
1:     AbstractVectorClassifier classifier = new ComplementaryNaiveBayesClassifier(naiveBayesModel);
1: 
1:     assertEquals(2, classifier.numCategories());
1: 
0:     Vector prediction = classifier.classify(trainingInstance(COLOR_RED, TYPE_SUV, ORIGIN_DOMESTIC).get());
1: 
1:     // should be classified as not stolen
1:     assertTrue(prediction.get(0) < prediction.get(1));
1:   }
1: 
0:   VectorWritable trainingInstance(Vector.Element... elems) {
1:     DenseVector trainingInstance = new DenseVector(6);
1:     for (Vector.Element elem : elems) {
1:       trainingInstance.set(elem.index(), elem.get());
1:     }
0:     return new VectorWritable(trainingInstance);
1:   }
1: 
1: 
1: }
============================================================================