1:89607ff: /**
1:89607ff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:89607ff:  * contributor license agreements.  See the NOTICE file distributed with
1:89607ff:  * this work for additional information regarding copyright ownership.
1:89607ff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:89607ff:  * (the "License"); you may not use this file except in compliance with
1:89607ff:  * the License.  You may obtain a copy of the License at
1:89607ff:  *
1:89607ff:  *     http://www.apache.org/licenses/LICENSE-2.0
1:89607ff:  *
1:89607ff:  * Unless required by applicable law or agreed to in writing, software
1:89607ff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:89607ff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89607ff:  * See the License for the specific language governing permissions and
1:89607ff:  * limitations under the License.
1:89607ff:  */
1:89607ff: 
1:9125a01: package org.apache.mahout.common;
3:b82d989: 
1:9125a01: import java.io.IOException;
1:9125a01: import java.util.Map;
1:b82d989: 
1:74f849b: import com.google.common.collect.Maps;
1:9125a01: import org.apache.hadoop.conf.Configuration;
1:9125a01: import org.apache.hadoop.io.DefaultStringifier;
1:9125a01: import org.apache.hadoop.util.GenericsUtil;
1:9125a01: import org.slf4j.Logger;
1:9125a01: import org.slf4j.LoggerFactory;
1:b82d989: 
1:9125a01: public class Parameters {
1:b82d989:   
1:9125a01:   private static final Logger log = LoggerFactory.getLogger(Parameters.class);
1:c0f3d94:   
1:74f849b:   private Map<String,String> params = Maps.newHashMap();
1:b82d989: 
1:9125a01:   public Parameters() {
1:b82d989: 
1:9125a01:   }
1:c0f3d94: 
1:c0f3d94:   public Parameters(String serializedString) throws IOException {
1:c0f3d94:     this(parseParams(serializedString));
1:c0f3d94:   }
1:c0f3d94: 
1:c0f3d94:   protected Parameters(Map<String,String> params) {
1:9125a01:     this.params = params;
1:9125a01:   }
1:c0f3d94: 
1:9125a01:   public String get(String key) {
1:9125a01:     return params.get(key);
1:9125a01:   }
1:b82d989:   
1:9125a01:   public String get(String key, String defaultValue) {
1:9125a01:     String ret = params.get(key);
1:89607ff:     return ret == null ? defaultValue : ret;
1:9125a01:   }
1:b82d989:   
1:9125a01:   public void set(String key, String value) {
1:9125a01:     params.put(key, value);
1:9125a01:   }
1:2f7f0dc: 
1:2f7f0dc:   public int getInt(String key, int defaultValue) {
1:2f7f0dc:     String ret = params.get(key);
1:2f7f0dc:     return ret == null ? defaultValue : Integer.parseInt(ret);
1:2f7f0dc:   }
1:2f7f0dc: 
1:9125a01:   @Override
1:9125a01:   public String toString() {
1:9125a01:     Configuration conf = new Configuration();
1:c0f3d94:     conf.set("io.serializations",
1:c0f3d94:              "org.apache.hadoop.io.serializer.JavaSerialization,"
1:c0f3d94:              + "org.apache.hadoop.io.serializer.WritableSerialization");
1:87c15be:     DefaultStringifier<Map<String,String>> mapStringifier = new DefaultStringifier<>(conf,
1:9125a01:         GenericsUtil.getClass(params));
1:9125a01:     try {
1:9125a01:       return mapStringifier.toString(params);
1:9125a01:     } catch (IOException e) {
1:297bef5:       log.info("Encountered IOException while deserializing returning empty string", e);
1:9125a01:       return "";
1:9125a01:     }
1:b82d989:     
1:9125a01:   }
1:b82d989:   
1:9125a01:   public String print() {
1:9125a01:     return params.toString();
1:9125a01:   }
1:c0f3d94: 
1:c0f3d94:   public static Map<String,String> parseParams(String serializedString) throws IOException {
1:9125a01:     Configuration conf = new Configuration();
1:c0f3d94:     conf.set("io.serializations",
1:c0f3d94:              "org.apache.hadoop.io.serializer.JavaSerialization,"
1:c0f3d94:              + "org.apache.hadoop.io.serializer.WritableSerialization");
1:74f849b:     Map<String,String> params = Maps.newHashMap();
1:87c15be:     DefaultStringifier<Map<String,String>> mapStringifier = new DefaultStringifier<>(conf,
1:9125a01:         GenericsUtil.getClass(params));
1:c0f3d94:     return mapStringifier.fromString(serializedString);
1:9125a01:   }
1:c0f3d94: 
1:9125a01: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     DefaultStringifier<Map<String,String>> mapStringifier = new DefaultStringifier<>(conf,
/////////////////////////////////////////////////////////////////////////
1:     DefaultStringifier<Map<String,String>> mapStringifier = new DefaultStringifier<>(conf,
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2f7f0dc
/////////////////////////////////////////////////////////////////////////
1: 
1:   public int getInt(String key, int defaultValue) {
1:     String ret = params.get(key);
1:     return ret == null ? defaultValue : Integer.parseInt(ret);
1:   }
1: 
commit:c0f3d94
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:   public Parameters(String serializedString) throws IOException {
1:     this(parseParams(serializedString));
1:   }
1: 
1:   protected Parameters(Map<String,String> params) {
1: 
/////////////////////////////////////////////////////////////////////////
1:     conf.set("io.serializations",
1:              "org.apache.hadoop.io.serializer.JavaSerialization,"
1:              + "org.apache.hadoop.io.serializer.WritableSerialization");
/////////////////////////////////////////////////////////////////////////
1: 
1:   public static Map<String,String> parseParams(String serializedString) throws IOException {
1:     conf.set("io.serializations",
1:              "org.apache.hadoop.io.serializer.JavaSerialization,"
1:              + "org.apache.hadoop.io.serializer.WritableSerialization");
1:     return mapStringifier.fromString(serializedString);
1: 
commit:89607ff
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:     return ret == null ? defaultValue : ret;
commit:af58850
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   //private Configuration conf = new Configuration();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Maps;
/////////////////////////////////////////////////////////////////////////
1:   private Map<String,String> params = Maps.newHashMap();
/////////////////////////////////////////////////////////////////////////
1:     Map<String,String> params = Maps.newHashMap();
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
1:       log.info("Encountered IOException while deserializing returning empty string", e);
commit:b82d989
/////////////////////////////////////////////////////////////////////////
1:   
1:   
0:   private Map<String,String> params = new HashMap<String,String>();
1:   
0:   // private Configuration conf = new Configuration();
1:   
1:   
0:   private Parameters(Map<String,String> params) {
1:   
1:   
1:   
1:   
0:     conf
0:         .set("io.serializations",
0:           "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");
0:     DefaultStringifier<Map<String,String>> mapStringifier = new DefaultStringifier<Map<String,String>>(conf,
0:       Parameters.log.info("Encountered IOException while deserializing returning empty string", e);
1:     
1:   
1:   
0:     conf
0:         .set("io.serializations",
0:           "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");
0:     Map<String,String> params = new HashMap<String,String>();
0:     DefaultStringifier<Map<String,String>> mapStringifier = new DefaultStringifier<Map<String,String>>(conf,
commit:9125a01
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.common;
0: 
1: import java.io.IOException;
0: import java.util.HashMap;
1: import java.util.Map;
0: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.DefaultStringifier;
1: import org.apache.hadoop.util.GenericsUtil;
0: import org.apache.mahout.classifier.bayes.datastore.HBaseBayesDatastore;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
1: public class Parameters {
0: 
1:   private static final Logger log = LoggerFactory.getLogger(Parameters.class);
0: 
0:   private Map<String, String> params = new HashMap<String, String>();
0: 
0:   private Configuration conf = new Configuration();
0: 
1:   public Parameters() {
0: 
1:   }
0: 
0:   private Parameters(Map<String, String> params) {
1:     this.params = params;
1:   }
0: 
1:   public String get(String key) {
1:     return params.get(key);
1:   }
0: 
1:   public String get(String key, String defaultValue) {
1:     String ret = params.get(key);
0:     if (ret == null)
0:       return defaultValue;
0:     return ret;
1:   }
0: 
1:   public void set(String key, String value) {
1:     params.put(key, value);
1:   }
0: 
1:   @Override
1:   public String toString() {
1:     Configuration conf = new Configuration();
0:     conf.set("io.serializations",
0:         "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");
0:     DefaultStringifier<Map<String, String>> mapStringifier = new DefaultStringifier<Map<String, String>>(conf,
1:         GenericsUtil.getClass(params));
1:     try {
1:       return mapStringifier.toString(params);
1:     } catch (IOException e) {
0:       log.info("Encountered IOException while deserializing returning empty string", e);
1:       return "";
1:     }
0: 
1:   }
0: 
1:   public String print() {
1:     return params.toString();
1:   }
0: 
0:   public static Parameters fromString(String serializedString) throws IOException {
1:     Configuration conf = new Configuration();
0:     conf.set("io.serializations",
0:         "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");
0:     Map<String, String> params = new HashMap<String, String>();
0:     DefaultStringifier<Map<String, String>> mapStringifier = new DefaultStringifier<Map<String, String>>(conf,
1:         GenericsUtil.getClass(params));
0:     params = mapStringifier.fromString(serializedString);
0:     return new Parameters(params);
1:   }
1: }
============================================================================