1:049e7dc: /**
1:049e7dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:049e7dc:  * contributor license agreements.  See the NOTICE file distributed with
1:049e7dc:  * this work for additional information regarding copyright ownership.
1:049e7dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:049e7dc:  * (the "License"); you may not use this file except in compliance with
1:049e7dc:  * the License.  You may obtain a copy of the License at
1:049e7dc:  *
1:049e7dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:049e7dc:  *
1:049e7dc:  * Unless required by applicable law or agreed to in writing, software
1:049e7dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:049e7dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:049e7dc:  * See the License for the specific language governing permissions and
1:049e7dc:  * limitations under the License.
1:049e7dc:  */
1:049e7dc: 
1:3c9538a: package org.apache.mahout.clustering;
1:3c9538a: 
1:3c9538a: import org.apache.mahout.math.Vector;
1:3c9538a: 
1:3c9538a: public interface GaussianAccumulator {
1:3c9538a: 
1:3c9538a:   /**
1:3c9538a:    * @return the number of observations
1:3c9538a:    */
1:049e7dc:   double getN();
1:3c9538a: 
1:3c9538a:   /**
1:3c9538a:    * @return the mean of the observations
1:3c9538a:    */
1:049e7dc:   Vector getMean();
1:3c9538a: 
1:3c9538a:   /**
1:3c9538a:    * @return the std of the observations
1:3c9538a:    */
1:049e7dc:   Vector getStd();
1:3c9538a:   
1:3c9538a:   /**
1:3c9538a:    * @return the average of the vector std elements
1:3c9538a:    */
1:049e7dc:   double getAverageStd();
1:3c9538a:   
1:3c9538a:   /**
1:3c9538a:    * @return the variance of the observations
1:3c9538a:    */
1:049e7dc:   Vector getVariance();
1:3c9538a: 
1:3c9538a:   /**
1:237bcbd:    * Observe the vector 
1:3c9538a:    * 
1:3c9538a:    * @param x a Vector
1:b588af3:    * @param weight the double observation weight (usually 1.0)
1:3c9538a:    */
1:b588af3:   void observe(Vector x, double weight);
1:3c9538a: 
1:3c9538a:   /**
1:237bcbd:    * Compute the mean, variance and standard deviation
1:3c9538a:    */
1:049e7dc:   void compute();
1:3c9538a: 
1:3c9538a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:b588af3
/////////////////////////////////////////////////////////////////////////
1:    * @param weight the double observation weight (usually 1.0)
1:   void observe(Vector x, double weight);
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:   double getN();
1:   Vector getMean();
1:   Vector getStd();
1:   double getAverageStd();
1:   Vector getVariance();
0:   void observe(Vector x);
1:   void compute();
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:237bcbd
/////////////////////////////////////////////////////////////////////////
1:    * Observe the vector 
0:   public abstract void observe(Vector x);
1:    * Compute the mean, variance and standard deviation
commit:3c9538a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering;
1: 
1: import org.apache.mahout.math.Vector;
1: 
1: public interface GaussianAccumulator {
1: 
1:   /**
1:    * @return the number of observations
1:    */
0:   public abstract double getN();
1: 
1:   /**
1:    * @return the mean of the observations
1:    */
0:   public abstract Vector getMean();
1: 
1:   /**
1:    * @return the std of the observations
1:    */
0:   public abstract Vector getStd();
1:   
1:   /**
1:    * @return the average of the vector std elements
1:    */
0:   public abstract double getAverageStd();
1:   
1:   /**
1:    * @return the variance of the observations
1:    */
0:   public abstract Vector getVariance();
1: 
1:   /**
0:    * Observe the vector with the given weight
1:    * 
1:    * @param x a Vector
0:    * @param weight a double
1:    */
0:   public abstract void observe(Vector x, double weight);
1: 
1:   /**
0:    * Compute the mean and standard deviation
1:    */
0:   public abstract void compute();
1: 
1: }
============================================================================