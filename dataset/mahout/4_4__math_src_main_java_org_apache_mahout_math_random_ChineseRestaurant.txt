1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
2:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
6:a07bfc3:  */
3:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import com.google.common.base.Preconditions;
1:8b6a26a: import org.apache.mahout.common.RandomUtils;
1:a07bfc3: import org.apache.mahout.math.list.DoubleArrayList;
1:a07bfc3: 
1:a07bfc3: import java.util.Random;
1:a07bfc3: 
6:a07bfc3: /**
1:8b6a26a:  *
1:a07bfc3:  * Generates samples from a generalized Chinese restaurant process (or Pittman-Yor process).
1:a07bfc3:  *
1:a07bfc3:  * The number of values drawn exactly once will asymptotically be equal to the discount parameter
1:a07bfc3:  * as the total number of draws T increases without bound.  The number of unique values sampled will
1:a07bfc3:  * increase as O(alpha * log T) if discount = 0 or O(alpha * T^discount) for discount > 0.
1:a07bfc3:  */
1:8b6a26a: public final class ChineseRestaurant implements Sampler<Integer> {
1:8b6a26a: 
1:6d16230:   private final double alpha;
1:6d16230:   private double weight = 0;
1:6d16230:   private double discount = 0;
1:6d16230:   private final DoubleArrayList weights = new DoubleArrayList();
1:6d16230:   private final Random rand = RandomUtils.getRandom();
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Constructs a Dirichlet process sampler.  This is done by setting discount = 0.
1:6d16230:    * @param alpha  The strength parameter for the Dirichlet process.
1:6d16230:    */
1:6d16230:   public ChineseRestaurant(double alpha) {
1:6d16230:     this(alpha, 0);
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * Constructs a Pitman-Yor sampler.
1:6d16230:    *
1:6d16230:    * @param alpha     The strength parameter that drives the number of unique values as a function of draws.
1:6d16230:    * @param discount  The discount parameter that drives the percentage of values that occur once in a large sample.
1:6d16230:    */
1:6d16230:   public ChineseRestaurant(double alpha, double discount) {
1:cd167f9:     Preconditions.checkArgument(alpha > 0, "Strength Parameter, alpha must be greater then 0!");
1:cd167f9:     Preconditions.checkArgument(discount >= 0 && discount <= 1, "Must be: 0 <= discount <= 1");
1:6d16230:     this.alpha = alpha;
1:6d16230:     this.discount = discount;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   @Override
1:6d16230:   public Integer sample() {
1:6d16230:     double u = rand.nextDouble() * (alpha + weight);
1:6d16230:     for (int j = 0; j < weights.size(); j++) {
1:6d16230:       // select existing options with probability (w_j - d) / (alpha + w)
1:6d16230:       if (u < weights.get(j) - discount) {
1:6d16230:         weights.set(j, weights.get(j) + 1);
2:a07bfc3:         weight++;
1:6d16230:         return j;
1:6d16230:       } else {
1:6d16230:         u -= weights.get(j) - discount;
1:6d16230:       }
8:a07bfc3:     }
1:a07bfc3: 
1:6d16230:     // if no existing item selected, pick new item with probability (alpha - d*t) / (alpha + w)
1:6d16230:     // where t is number of pre-existing cases
1:6d16230:     weights.add(1);
1:6d16230:     weight++;
1:6d16230:     return weights.size() - 1;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * @return the number of unique values that have been returned.
1:6d16230:    */
1:6d16230:   public int size() {
1:6d16230:     return weights.size();
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * @return the number draws so far.
1:6d16230:    */
1:6d16230:   public int count() {
1:6d16230:     return (int) weight;
1:6d16230:   }
1:a07bfc3: 
1:6d16230:   /**
1:6d16230:    * @param j Which value to test.
1:6d16230:    * @return  The number of times that j has been returned so far.
1:6d16230:    */
1:6d16230:   public int count(int j) {
1:6d16230:     Preconditions.checkArgument(j >= 0);
1:6d16230: 
1:6d16230:     if (j < weights.size()) {
1:6d16230:       return (int) weights.get(j);
1:6d16230:     } else {
1:6d16230:       return 0;
1:6d16230:     }
1:a07bfc3:   }
1:a07bfc3: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(alpha > 0, "Strength Parameter, alpha must be greater then 0!");
1:     Preconditions.checkArgument(discount >= 0 && discount <= 1, "Must be: 0 <= discount <= 1");
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   private final double alpha;
1:   private double weight = 0;
1:   private double discount = 0;
1:   private final DoubleArrayList weights = new DoubleArrayList();
1:   private final Random rand = RandomUtils.getRandom();
1:   /**
1:    * Constructs a Dirichlet process sampler.  This is done by setting discount = 0.
1:    * @param alpha  The strength parameter for the Dirichlet process.
1:    */
1:   public ChineseRestaurant(double alpha) {
1:     this(alpha, 0);
1:   }
1:   /**
1:    * Constructs a Pitman-Yor sampler.
1:    *
1:    * @param alpha     The strength parameter that drives the number of unique values as a function of draws.
1:    * @param discount  The discount parameter that drives the percentage of values that occur once in a large sample.
1:    */
1:   public ChineseRestaurant(double alpha, double discount) {
0:     Preconditions.checkArgument(alpha > 0);
0:     Preconditions.checkArgument(discount >= 0 && discount <= 1);
1:     this.alpha = alpha;
1:     this.discount = discount;
1:   }
1:   @Override
1:   public Integer sample() {
1:     double u = rand.nextDouble() * (alpha + weight);
1:     for (int j = 0; j < weights.size(); j++) {
1:       // select existing options with probability (w_j - d) / (alpha + w)
1:       if (u < weights.get(j) - discount) {
1:         weights.set(j, weights.get(j) + 1);
1:         return j;
1:       } else {
1:         u -= weights.get(j) - discount;
1:       }
1:     // if no existing item selected, pick new item with probability (alpha - d*t) / (alpha + w)
1:     // where t is number of pre-existing cases
1:     weights.add(1);
1:     weight++;
1:     return weights.size() - 1;
1:   }
1:   /**
1:    * @return the number of unique values that have been returned.
1:    */
1:   public int size() {
1:     return weights.size();
1:   }
1:   /**
1:    * @return the number draws so far.
1:    */
1:   public int count() {
1:     return (int) weight;
1:   }
1:   /**
1:    * @param j Which value to test.
1:    * @return  The number of times that j has been returned so far.
1:    */
1:   public int count(int j) {
1:     Preconditions.checkArgument(j >= 0);
1: 
1:     if (j < weights.size()) {
1:       return (int) weights.get(j);
1:     } else {
1:       return 0;
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1:  *
1: public final class ChineseRestaurant implements Sampler<Integer> {
1: 
0:     private final double alpha;
0:     private final DoubleArrayList weights = new DoubleArrayList();
0:     private final Random rand = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
0:     @Override
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.math.list.DoubleArrayList;
1: 
1: import java.util.Random;
1: 
1: /**
0:  * /**
1:  * Generates samples from a generalized Chinese restaurant process (or Pittman-Yor process).
1:  *
1:  * The number of values drawn exactly once will asymptotically be equal to the discount parameter
1:  * as the total number of draws T increases without bound.  The number of unique values sampled will
1:  * increase as O(alpha * log T) if discount = 0 or O(alpha * T^discount) for discount > 0.
1:  */
0: public class ChineseRestaurant implements Sampler<Integer> {
0:     private double alpha;
0:     private double weight = 0;
0:     private double discount = 0;
0:     private DoubleArrayList weights = new DoubleArrayList();
1: 
0:     private Random rand = new Random();
1: 
1:     /**
0:      * Constructs a Dirichlet process sampler.  This is done by setting discount = 0.
0:      * @param alpha  The strength parameter for the Dirichlet process.
1:      */
0:     public ChineseRestaurant(double alpha) {
0:         this(alpha, 0);
1:     }
1: 
1:     /**
0:      * Constructs a Pitman-Yor sampler.
1:      *
0:      * @param alpha     The strength parameter that drives the number of unique values as a function of draws.
0:      * @param discount  The discount parameter that drives the percentage of values that occur once in a large sample.
1:      */
0:     public ChineseRestaurant(double alpha, double discount) {
0:         Preconditions.checkArgument(alpha > 0);
0:         Preconditions.checkArgument(discount >= 0 && discount <= 1);
0:         this.alpha = alpha;
0:         this.discount = discount;
1:     }
1: 
0:     public Integer sample() {
0:         double u = rand.nextDouble() * (alpha + weight);
0:         for (int j = 0; j < weights.size(); j++) {
0:             // select existing options with probability (w_j - d) / (alpha + w)
0:             if (u < weights.get(j) - discount) {
0:                 weights.set(j, weights.get(j) + 1);
1:                 weight++;
0:                 return j;
0:             } else {
0:                 u -= weights.get(j) - discount;
1:             }
1:         }
1: 
0:         // if no existing item selected, pick new item with probability (alpha - d*t) / (alpha + w)
0:         // where t is number of pre-existing cases
0:         weights.add(1);
1:         weight++;
0:         return weights.size() - 1;
1:     }
1: 
1:     /**
0:      * @return the number of unique values that have been returned.
1:      */
0:     public int size() {
0:         return weights.size();
1:     }
1: 
1:     /**
0:      * @return the number draws so far.
1:      */
0:     public int count() {
0:         return (int) weight;
1:     }
1: 
1:     /**
0:      * @param j Which value to test.
0:      * @return  The number of times that j has been returned so far.
1:      */
0:     public int count(int j) {
0:         Preconditions.checkArgument(j >= 0);
1: 
0:         if (j < weights.size()) {
0:             return (int) weights.get(j);
0:         } else {
0:             return 0;
1:         }
1:     }
1: }
============================================================================