1:7550a10: /*
1:7550a10: Copyright ï¿? 1999 CERN - European Organization for Nuclear Research.
1:7550a10: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1:7550a10: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1:7550a10: that both that copyright notice and this permission notice appear in supporting documentation. 
1:7550a10: CERN makes no representations about the suitability of this software for any purpose. 
1:7550a10: It is provided "as is" without expressed or implied warranty.
1:1bc1c14: */
1:a435efb: package org.apache.mahout.math.jet.random;
3:7926fcb: 
1:1bc1c14: import java.util.Locale;
1:22726e8: import java.util.Random;
1:7926fcb: 
1:7926fcb: public class Exponential extends AbstractContinousDistribution {
1:1bc1c14:   // rate parameter for the distribution.  Mean is 1/lambda.
1:7627de6:   private double lambda;
1:7926fcb: 
1:1bc1c14:   /**
1:1bc1c14:    * Provides a negative exponential distribution given a rate parameter lambda and an underlying
1:1bc1c14:    * random number generator.  The mean of this distribution will be equal to 1/lambda.
1:7926fcb:    *
1:1bc1c14:    * @param lambda          The rate parameter of the distribution.
1:1bc1c14:    * @param randomGenerator The PRNG that is used to generate values.
1:1bc1c14:    */
1:22726e8:   public Exponential(double lambda, Random randomGenerator) {
1:7926fcb:     setRandomGenerator(randomGenerator);
1:6430188:     this.lambda = lambda;
3:7926fcb:   }
1:7926fcb: 
1:1bc1c14:   /**
1:1bc1c14:    * Returns the cumulative distribution function.
1:1bc1c14:    * @param x  The point at which the cumulative distribution function is to be evaluated.
1:1bc1c14:    * @return Returns the integral from -infinity to x of the PDF, also known as the cumulative distribution
1:1bc1c14:    * function.
1:1bc1c14:    */
1:6430188:   @Override
1:7926fcb:   public double cdf(double x) {
1:7926fcb:     if (x <= 0.0) {
1:7926fcb:       return 0.0;
1:7926fcb:     }
1:7926fcb:     return 1.0 - Math.exp(-x * lambda);
1:7926fcb:   }
1:7926fcb: 
1:1bc1c14:   /**
1:1bc1c14:    * Returns a random number from the distribution.
1:1bc1c14:    */
1:7926fcb:   @Override
1:7926fcb:   public double nextDouble() {
1:4194a28:     return -Math.log1p(-randomDouble()) / lambda;
1:7926fcb:   }
1:7926fcb: 
1:1bc1c14:   /**
1:1bc1c14:    * Returns the value of the probability density function at a particular point.
1:1bc1c14:    * @param x   The point at which the probability density function is to be evaluated.
1:1bc1c14:    * @return  The value of the probability density function at the specified point.
1:1bc1c14:    */
1:6430188:   @Override
1:7926fcb:   public double pdf(double x) {
1:7926fcb:     if (x < 0.0) {
1:7926fcb:       return 0.0;
1:7926fcb:     }
1:7926fcb:     return lambda * Math.exp(-x * lambda);
1:7926fcb:   }
1:7926fcb: 
2:1bc1c14:   /**
1:1bc1c14:    * Sets the rate parameter.
1:1bc1c14:    * @param lambda  The new value of the rate parameter.
1:1bc1c14:    */
1:7926fcb:   public void setState(double lambda) {
1:7926fcb:     this.lambda = lambda;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:1bc1c14:    * Returns a String representation of the receiver.
1:7926fcb:    */
1:1499411:   @Override
1:7926fcb:   public String toString() {
1:1bc1c14:     return String.format(Locale.ENGLISH, "%s(%.4f)", this.getClass().getName(), lambda);
1:7926fcb:   }
1:7926fcb: 
1:7926fcb: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:     return -Math.log1p(-randomDouble()) / lambda;
commit:971a56d
/////////////////////////////////////////////////////////////////////////
0:     return -Math.log1p(-randomGenerator.nextDouble()) / lambda;
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   @Override
commit:6430188
/////////////////////////////////////////////////////////////////////////
1:     this.lambda = lambda;
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
commit:8a99d75
/////////////////////////////////////////////////////////////////////////
commit:7627de6
/////////////////////////////////////////////////////////////////////////
1:   private double lambda;
0:   private static final Exponential shared = new Exponential(1.0, makeDefaultGenerator());
/////////////////////////////////////////////////////////////////////////
commit:e50fbd5
/////////////////////////////////////////////////////////////////////////
0:     return this.getClass().getName() + '(' + lambda + ')';
commit:7926fcb
/////////////////////////////////////////////////////////////////////////
1: 
0: /** @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
1: public class Exponential extends AbstractContinousDistribution {
1: 
0:   // The uniform random number generated shared by all <b>static</b> methods.
0:   protected static Exponential shared = new Exponential(1.0, makeDefaultGenerator());
1: 
0:   /** Constructs a Negative Exponential distribution. */
0:   public Exponential(double lambda, RandomEngine randomGenerator) {
1:     setRandomGenerator(randomGenerator);
0:     setState(lambda);
1: 
0:   /** Returns the cumulative distribution function. */
1:   public double cdf(double x) {
1:     if (x <= 0.0) {
1:       return 0.0;
1:     }
1:     return 1.0 - Math.exp(-x * lambda);
1: 
0:   /** Returns a random number from the distribution. */
1:   @Override
1:   public double nextDouble() {
0:     return nextDouble(lambda);
1:   }
1: 
0:   /** Returns a random number from the distribution; bypasses the internal state. */
0:   public double nextDouble(double lambda) {
0:     return -Math.log(randomGenerator.raw()) / lambda;
1:   }
1: 
0:   /** Returns the probability distribution function. */
1:   public double pdf(double x) {
1:     if (x < 0.0) {
1:       return 0.0;
1:     }
1:     return lambda * Math.exp(-x * lambda);
1:   }
1: 
0:   /** Sets the mean. */
1:   public void setState(double lambda) {
1:     this.lambda = lambda;
1:   }
1: 
0:   /** Returns a random number from the distribution with the given lambda. */
0:   public static double staticNextDouble(double lambda) {
0:     synchronized (shared) {
0:       return shared.nextDouble(lambda);
1:     }
1:   }
1: 
0:   /** Returns a String representation of the receiver. */
1:   public String toString() {
0:     return this.getClass().getName() + "(" + lambda + ")";
1:   }
1: 
1:   /**
0:    * Sets the uniform random number generated shared by all <b>static</b> methods.
1:    *
0:    * @param randomGenerator the new uniform random number generator to be shared.
1:    */
0:   private static void xstaticSetRandomGenerator(RandomEngine randomGenerator) {
0:     synchronized (shared) {
0:       shared.setRandomGenerator(randomGenerator);
1:     }
1:   }
commit:7a9ecf4
/////////////////////////////////////////////////////////////////////////
0:   protected double lambda;
0:    // The uniform random number generated shared by all <b>static</b> methods.
0:   protected static Exponential shared = new Exponential(1.0,makeDefaultGenerator());
0:   setRandomGenerator(randomGenerator);
0:   setState(lambda);
0:   if (x <= 0.0) return 0.0;
0:   return 1.0 - Math.exp(-x * lambda);
0:   return nextDouble(lambda);
0:   return - Math.log(randomGenerator.raw()) / lambda;
0:   if (x < 0.0) return 0.0;
0:   return lambda*Math.exp(-x*lambda);
0:   this.lambda = lambda;
0:   synchronized (shared) {
0:     return shared.nextDouble(lambda);
0:   }
0:   return this.getClass().getName()+"("+lambda+")";
0:   synchronized (shared) {
0:     shared.setRandomGenerator(randomGenerator);
0:   }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:22726e8
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
1:   public Exponential(double lambda, Random randomGenerator) {
/////////////////////////////////////////////////////////////////////////
0:     return -Math.log(1 - randomGenerator.nextDouble()) / lambda;
commit:1bc1c14
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
0: public class Exponential extends AbstractContinousDistribution {
1:   // rate parameter for the distribution.  Mean is 1/lambda.
1:   /**
1:    * Provides a negative exponential distribution given a rate parameter lambda and an underlying
1:    * random number generator.  The mean of this distribution will be equal to 1/lambda.
0:    *
1:    * @param lambda          The rate parameter of the distribution.
1:    * @param randomGenerator The PRNG that is used to generate values.
1:    */
1:   /**
1:    * Returns the cumulative distribution function.
1:    * @param x  The point at which the cumulative distribution function is to be evaluated.
1:    * @return Returns the integral from -infinity to x of the PDF, also known as the cumulative distribution
1:    * function.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Returns a random number from the distribution.
1:    */
0:     return -Math.log(1 - randomGenerator.raw()) / lambda;
1:   /**
1:    * Returns the value of the probability density function at a particular point.
1:    * @param x   The point at which the probability density function is to be evaluated.
1:    * @return  The value of the probability density function at the specified point.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets the rate parameter.
1:    * @param lambda  The new value of the rate parameter.
1:    */
1:   /**
1:    * Returns a String representation of the receiver.
1:    */
1:     return String.format(Locale.ENGLISH, "%s(%.4f)", this.getClass().getName(), lambda);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a435efb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.jet.random;
0: import org.apache.mahout.math.jet.random.engine.RandomEngine;
commit:7550a10
/////////////////////////////////////////////////////////////////////////
1: /*
1: Copyright ï¿? 1999 CERN - European Organization for Nuclear Research.
1: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1: that both that copyright notice and this permission notice appear in supporting documentation. 
1: CERN makes no representations about the suitability of this software for any purpose. 
1: It is provided "as is" without expressed or implied warranty.
0: */
0: package org.apache.mahout.jet.random;
0: 
0: import org.apache.mahout.jet.random.engine.RandomEngine;
0: /**
0:  * Exponential Distribution (aka Negative Exponential Distribution); See the <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node78.html#SECTION000780000000000000000"> math definition</A>
0:  * <A HREF="http://www.statsoft.com/textbook/glose.html#Exponential Distribution"> animated definition</A>.
0:  * <p>
0:  * <tt>p(x) = lambda*exp(-x*lambda)</tt> for <tt>x &gt;= 0</tt>, <tt>lambda &gt; 0</tt>.
0:  * <p>
0:  * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
0:  * <dt>
0:  * Static methods operate on a default uniform random number generator; they are synchronized.
0:  * <p>
0:  *
0:  * @author wolfgang.hoschek@cern.ch
0:  * @version 1.0, 09/24/99
0:  */
0: /** 
0:  * @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported.
0:  */
0: @Deprecated
0: public class Exponential extends AbstractContinousDistribution { 
0: 	protected double lambda;
0: 
0:  	// The uniform random number generated shared by all <b>static</b> methods.
0: 	protected static Exponential shared = new Exponential(1.0,makeDefaultGenerator());
0: /**
0:  * Constructs a Negative Exponential distribution.
0:  */
0: public Exponential(double lambda, RandomEngine randomGenerator) {
0: 	setRandomGenerator(randomGenerator);
0: 	setState(lambda);
0: }
0: /**
0:  * Returns the cumulative distribution function.
0:  */
0: public double cdf(double x) {
0: 	if (x <= 0.0) return 0.0;
0: 	return 1.0 - Math.exp(-x * lambda);
0: }
0: /**
0:  * Returns a random number from the distribution.
0:  */
0: public double nextDouble() {
0: 	return nextDouble(lambda);
0: }
0: /**
0:  * Returns a random number from the distribution; bypasses the internal state.
0:  */
0: public double nextDouble(double lambda) {
0: 	return - Math.log(randomGenerator.raw()) / lambda;
0: }
0: /**
0:  * Returns the probability distribution function.
0:  */
0: public double pdf(double x) {
0: 	if (x < 0.0) return 0.0;
0: 	return lambda*Math.exp(-x*lambda);
0: }
0: /**
0:  * Sets the mean.
0:  */
0: public void setState(double lambda) {
0: 	this.lambda = lambda;
0: }
0: /**
0:  * Returns a random number from the distribution with the given lambda.
0:  */
0: public static double staticNextDouble(double lambda) {
0: 	synchronized (shared) {
0: 		return shared.nextDouble(lambda);
0: 	}
0: }
0: /**
0:  * Returns a String representation of the receiver.
0:  */
0: public String toString() {
0: 	return this.getClass().getName()+"("+lambda+")";
0: }
0: /**
0:  * Sets the uniform random number generated shared by all <b>static</b> methods.
0:  * @param randomGenerator the new uniform random number generator to be shared.
0:  */
0: private static void xstaticSetRandomGenerator(RandomEngine randomGenerator) {
0: 	synchronized (shared) {
0: 		shared.setRandomGenerator(randomGenerator);
0: 	}
0: }
0: }
============================================================================