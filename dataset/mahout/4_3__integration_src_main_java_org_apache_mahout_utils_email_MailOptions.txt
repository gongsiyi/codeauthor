2:29a7f38: /**
1:29a7f38:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29a7f38:  * contributor license agreements.  See the NOTICE file distributed with
1:29a7f38:  * this work for additional information regarding copyright ownership.
1:29a7f38:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29a7f38:  * (the "License"); you may not use this file except in compliance with
1:29a7f38:  * the License.  You may obtain a copy of the License at
4:29a7f38:  *
1:29a7f38:  *     http://www.apache.org/licenses/LICENSE-2.0
1:69f324d:  *
1:29a7f38:  * Unless required by applicable law or agreed to in writing, software
1:29a7f38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29a7f38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29a7f38:  * See the License for the specific language governing permissions and
1:29a7f38:  * limitations under the License.
1:29a7f38:  */
1:29a7f38: 
1:29a7f38: package org.apache.mahout.utils.email;
1:29a7f38: 
1:29a7f38: import java.io.File;
1:29a7f38: import java.nio.charset.Charset;
1:3b9f635: import java.util.Map;
1:29a7f38: import java.util.regex.Pattern;
1:29a7f38: 
1:d54c59b: /**
1:d54c59b:  * Configuration options to be used by {@link MailProcessor}. Includes options controlling the exact output format 
1:d54c59b:  * and which mail fields are included (body, to, from, subject, etc.)
1:d54c59b:  */
1:29a7f38: public class MailOptions {
1:29a7f38: 
1:3b9f635:   public static final String FROM = "FROM";
1:3b9f635:   public static final String TO = "TO";
1:3b9f635:   public static final String REFS = "REFS";
1:3b9f635:   public static final String SUBJECT = "SUBJECT";
1:69f324d:   public static final Pattern DEFAULT_QUOTED_TEXT = Pattern.compile("^(\\||>)");
1:29a7f38: 
1:69f324d:   private boolean stripQuotedText;
1:4194a28:   private File input;
1:4194a28:   private String outputDir;
1:4194a28:   private String prefix;
1:4194a28:   private int chunkSize;
1:4194a28:   private Charset charset;
1:4194a28:   private String separator;
1:4194a28:   private String bodySeparator = "\n";
1:4194a28:   private boolean includeBody;
1:4194a28:   private Pattern[] patternsToMatch;
1:3b9f635:   //maps FROM, TO, REFS, SUBJECT, etc. to the order they appear in patternsToMatch.  See MailToRecMapper
1:4194a28:   private Map<String, Integer> patternOrder;
1:29a7f38: 
1:69f324d:   //the regular expression to use for identifying quoted text.
1:69f324d:   private Pattern quotedTextPattern = DEFAULT_QUOTED_TEXT;
1:69f324d: 
1:4194a28:   public File getInput() {
1:4194a28:     return input;
1:29a7f38:   }
1:29a7f38: 
1:4194a28:   public void setInput(File input) {
1:4194a28:     this.input = input;
1:4194a28:   }
5:4194a28: 
1:4194a28:   public String getOutputDir() {
1:4194a28:     return outputDir;
1:4194a28:   }
1:4194a28: 
1:d54c59b:   /**
1:d54c59b:    * Sets the output directory where sequence files will be written.
1:d54c59b:    */
1:4194a28:   public void setOutputDir(String outputDir) {
1:4194a28:     this.outputDir = outputDir;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public String getPrefix() {
1:4194a28:     return prefix;
1:4194a28:   }
1:4194a28: 
1:d54c59b:   /**
1:d54c59b:    * Sets the prefix that is combined with the archive name and with message ids to create {@code SequenceFile} keys. 
1:d54c59b:    * @param prefix The name of the directory containing the mail archive is commonly used.
1:d54c59b:    */
1:4194a28:   public void setPrefix(String prefix) {
1:4194a28:     this.prefix = prefix;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public int getChunkSize() {
1:4194a28:     return chunkSize;
1:4194a28:   }
1:4194a28: 
1:d54c59b:   /**
1:d54c59b:    * Sets the size of each generated sequence file, in Megabytes.
1:d54c59b:    */
1:4194a28:   public void setChunkSize(int chunkSize) {
1:4194a28:     this.chunkSize = chunkSize;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public Charset getCharset() {
1:4194a28:     return charset;
1:4194a28:   }
1:4194a28: 
1:d54c59b:   /**
1:d54c59b:    * Sets the encoding of the input
1:d54c59b:    */
1:4194a28:   public void setCharset(Charset charset) {
1:4194a28:     this.charset = charset;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public String getSeparator() {
1:4194a28:     return separator;
1:4194a28:   }
1:4194a28: 
1:d54c59b:   /**
1:d54c59b:    * Sets the separator to use in the output between metadata items (to, from, etc.).
1:d54c59b:    */
1:4194a28:   public void setSeparator(String separator) {
1:4194a28:     this.separator = separator;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public String getBodySeparator() {
1:4194a28:     return bodySeparator;
1:4194a28:   }
1:4194a28: 
1:d54c59b:   /**
1:d54c59b:    * Sets the separator to use in the output between lines in the body, the default is "\n".
1:d54c59b:    */
1:4194a28:   public void setBodySeparator(String bodySeparator) {
1:4194a28:     this.bodySeparator = bodySeparator;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public boolean isIncludeBody() {
1:4194a28:     return includeBody;
1:4194a28:   }
1:4194a28: 
1:d54c59b:   /**
1:d54c59b:    * Sets whether mail bodies are included in the output
1:d54c59b:    */
1:4194a28:   public void setIncludeBody(boolean includeBody) {
1:4194a28:     this.includeBody = includeBody;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public Pattern[] getPatternsToMatch() {
1:4194a28:     return patternsToMatch;
1:4194a28:   }
1:4194a28: 
1:d54c59b:   /**
1:d54c59b:    * Sets the list of patterns to be applied in the given order to extract metadata fields (to, from, subject, etc.)
1:d54c59b:    *  from the input 
1:d54c59b:    */
1:4194a28:   public void setPatternsToMatch(Pattern[] patternsToMatch) {
1:4194a28:     this.patternsToMatch = patternsToMatch;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public Map<String, Integer> getPatternOrder() {
1:4194a28:     return patternOrder;
1:4194a28:   }
1:4194a28: 
1:4194a28:   public void setPatternOrder(Map<String, Integer> patternOrder) {
1:4194a28:     this.patternOrder = patternOrder;
1:4194a28:   }
1:4194a28: 
1:69f324d:   /**
1:69f324d:    *
1:69f324d:    * @return true if we should strip out quoted email text
1:69f324d:    */
1:69f324d:   public boolean isStripQuotedText() {
1:69f324d:     return stripQuotedText;
1:69f324d:   }
1:69f324d: 
1:69f324d:   /**
1:69f324d:    *
1:d54c59b:    * Sets whether quoted text such as lines starting with | or > is striped off.
1:69f324d:    */
1:69f324d:   public void setStripQuotedText(boolean stripQuotedText) {
1:69f324d:     this.stripQuotedText = stripQuotedText;
1:69f324d:   }
1:69f324d: 
1:69f324d:   public Pattern getQuotedTextPattern() {
1:69f324d:     return quotedTextPattern;
1:69f324d:   }
1:69f324d: 
1:69f324d:   /**
1:d54c59b:    * Sets the {@link java.util.regex.Pattern} to use to identify lines that are quoted text. Default is | and >
1:69f324d:    * @see #setStripQuotedText(boolean)
1:69f324d:    */
1:69f324d:   public void setQuotedTextPattern(Pattern quotedTextPattern) {
1:69f324d:     this.quotedTextPattern = quotedTextPattern;
1:69f324d:   }
1:4194a28: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:d54c59b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Configuration options to be used by {@link MailProcessor}. Includes options controlling the exact output format 
1:  * and which mail fields are included (body, to, from, subject, etc.)
1:  */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets the output directory where sequence files will be written.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets the prefix that is combined with the archive name and with message ids to create {@code SequenceFile} keys. 
1:    * @param prefix The name of the directory containing the mail archive is commonly used.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets the size of each generated sequence file, in Megabytes.
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets the encoding of the input
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets the separator to use in the output between metadata items (to, from, etc.).
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets the separator to use in the output between lines in the body, the default is "\n".
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets whether mail bodies are included in the output
1:    */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Sets the list of patterns to be applied in the given order to extract metadata fields (to, from, subject, etc.)
1:    *  from the input 
1:    */
/////////////////////////////////////////////////////////////////////////
1:    * Sets whether quoted text such as lines starting with | or > is striped off.
/////////////////////////////////////////////////////////////////////////
1:    * Sets the {@link java.util.regex.Pattern} to use to identify lines that are quoted text. Default is | and >
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
0:    * @param quotedTextPattern The {@link java.util.regex.Pattern} to use to identify lines that are quoted text.
0:    *                          Default is | and >
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:69f324d
/////////////////////////////////////////////////////////////////////////
1:   public static final Pattern DEFAULT_QUOTED_TEXT = Pattern.compile("^(\\||>)");
1:   private boolean stripQuotedText;
/////////////////////////////////////////////////////////////////////////
1:   //the regular expression to use for identifying quoted text.
1:   private Pattern quotedTextPattern = DEFAULT_QUOTED_TEXT;
1: 
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    *
1:    * @return true if we should strip out quoted email text
1:    */
1:   public boolean isStripQuotedText() {
1:     return stripQuotedText;
1:   }
1: 
1:   /**
1:    *
0:    * @param stripQuotedText if true, then strip off quoted text, such as lines starting with | or >
1:    */
1:   public void setStripQuotedText(boolean stripQuotedText) {
1:     this.stripQuotedText = stripQuotedText;
1:   }
1: 
1:   public Pattern getQuotedTextPattern() {
1:     return quotedTextPattern;
1:   }
1: 
1:   /**
1:    * @see #setStripQuotedText(boolean)
1:    *
0:    * @param quotedTextPattern The {@link java.util.regex.Pattern} to use to identify lines that are quoted text.  Default is | and >
1:    */
1:   public void setQuotedTextPattern(Pattern quotedTextPattern) {
1:     this.quotedTextPattern = quotedTextPattern;
1:   }
commit:3b9f635
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:   public static final String FROM = "FROM";
1:   public static final String TO = "TO";
1:   public static final String REFS = "REFS";
1:   public static final String SUBJECT = "SUBJECT";
/////////////////////////////////////////////////////////////////////////
1:   //maps FROM, TO, REFS, SUBJECT, etc. to the order they appear in patternsToMatch.  See MailToRecMapper
0:   public Map<String, Integer> patternOrder;
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.email;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: 
1: 
1: import java.io.File;
1: import java.nio.charset.Charset;
1: import java.util.regex.Pattern;
1: 
1: /**
1: *
1: *
0: **/
1: public class MailOptions {
1: 
0:   public File input;
0:   public String outputDir;
0:   public String prefix;
0:   public int chunkSize;
0:   public Charset charset;
0:   public String separator;
0:   public String bodySeparator = "\n";
0:   public boolean includeBody;
0:   public Pattern[] patternsToMatch;
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.email;
1: 
1: 
1:   private File input;
1:   private String outputDir;
1:   private String prefix;
1:   private int chunkSize;
1:   private Charset charset;
1:   private String separator;
1:   private String bodySeparator = "\n";
1:   private boolean includeBody;
1:   private Pattern[] patternsToMatch;
1:   private Map<String, Integer> patternOrder;
1: 
1:   public File getInput() {
1:     return input;
1:   }
1: 
1:   public void setInput(File input) {
1:     this.input = input;
1:   }
1: 
1:   public String getOutputDir() {
1:     return outputDir;
1:   }
1: 
1:   public void setOutputDir(String outputDir) {
1:     this.outputDir = outputDir;
1:   }
1: 
1:   public String getPrefix() {
1:     return prefix;
1:   }
1: 
1:   public void setPrefix(String prefix) {
1:     this.prefix = prefix;
1:   }
1: 
1:   public int getChunkSize() {
1:     return chunkSize;
1:   }
1: 
1:   public void setChunkSize(int chunkSize) {
1:     this.chunkSize = chunkSize;
1:   }
1: 
1:   public Charset getCharset() {
1:     return charset;
1:   }
1: 
1:   public void setCharset(Charset charset) {
1:     this.charset = charset;
1:   }
1: 
1:   public String getSeparator() {
1:     return separator;
1:   }
1: 
1:   public void setSeparator(String separator) {
1:     this.separator = separator;
1:   }
1: 
1:   public String getBodySeparator() {
1:     return bodySeparator;
1:   }
1: 
1:   public void setBodySeparator(String bodySeparator) {
1:     this.bodySeparator = bodySeparator;
1:   }
1: 
1:   public boolean isIncludeBody() {
1:     return includeBody;
1:   }
1: 
1:   public void setIncludeBody(boolean includeBody) {
1:     this.includeBody = includeBody;
1:   }
1: 
1:   public Pattern[] getPatternsToMatch() {
1:     return patternsToMatch;
1:   }
1: 
1:   public void setPatternsToMatch(Pattern[] patternsToMatch) {
1:     this.patternsToMatch = patternsToMatch;
1:   }
1: 
1:   public Map<String, Integer> getPatternOrder() {
1:     return patternOrder;
1:   }
1: 
1:   public void setPatternOrder(Map<String, Integer> patternOrder) {
1:     this.patternOrder = patternOrder;
1:   }
1: 
============================================================================