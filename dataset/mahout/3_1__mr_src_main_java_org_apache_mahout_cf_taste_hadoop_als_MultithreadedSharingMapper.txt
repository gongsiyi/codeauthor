1:63c81f1: /**
1:63c81f1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:63c81f1:  * contributor license agreements.  See the NOTICE file distributed with
1:63c81f1:  * this work for additional information regarding copyright ownership.
1:63c81f1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:63c81f1:  * (the "License"); you may not use this file except in compliance with
1:63c81f1:  * the License.  You may obtain a copy of the License at
1:63c81f1:  *
1:63c81f1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:63c81f1:  *
1:63c81f1:  * Unless required by applicable law or agreed to in writing, software
1:63c81f1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:63c81f1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:63c81f1:  * See the License for the specific language governing permissions and
1:63c81f1:  * limitations under the License.
1:63c81f1:  */
3:63c81f1: 
1:63c81f1: package org.apache.mahout.cf.taste.hadoop.als;
1:63c81f1: 
1:82bbf15: import com.google.common.base.Preconditions;
1:63c81f1: import org.apache.hadoop.conf.Configuration;
1:82bbf15: import org.apache.hadoop.mapreduce.JobContext;
1:82bbf15: import org.apache.hadoop.mapreduce.Mapper;
1:63c81f1: import org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper;
1:63c81f1: import org.apache.hadoop.util.ReflectionUtils;
1:63c81f1: 
1:63c81f1: import java.io.IOException;
1:63c81f1: 
1:63c81f1: /**
1:df39ce4:  * Multithreaded Mapper for {@link SharingMapper}s. Will call setupSharedInstance() once in the controlling thread
1:df39ce4:  * before executing the mappers using a thread pool.
1:63c81f1:  *
1:63c81f1:  * @param <K1>
1:63c81f1:  * @param <V1>
1:63c81f1:  * @param <K2>
1:63c81f1:  * @param <V2>
1:63c81f1:  */
1:63c81f1: public class MultithreadedSharingMapper<K1, V1, K2, V2> extends MultithreadedMapper<K1, V1, K2, V2> {
1:63c81f1: 
1:63c81f1:   @Override
1:63c81f1:   public void run(Context ctx) throws IOException, InterruptedException {
1:82bbf15:     Class<Mapper<K1, V1, K2, V2>> mapperClass =
1:82bbf15:         MultithreadedSharingMapper.getMapperClass((JobContext) ctx);
1:82bbf15:     Preconditions.checkNotNull(mapperClass, "Could not find Multithreaded Mapper class.");
1:63c81f1: 
1:63c81f1:     Configuration conf = ctx.getConfiguration();
1:63c81f1:     // instantiate the mapper
1:82bbf15:     Mapper<K1, V1, K2, V2> mapper1 = ReflectionUtils.newInstance(mapperClass, conf);
1:82bbf15:     SharingMapper<K1, V1, K2, V2, ?> mapper = null;
1:82bbf15:     if (mapper1 instanceof SharingMapper) {
1:82bbf15:       mapper = (SharingMapper<K1, V1, K2, V2, ?>) mapper1;
1:82bbf15:     }
1:82bbf15:     Preconditions.checkNotNull(mapper, "Could not instantiate SharingMapper. Class was: %s",
1:82bbf15:                                mapper1.getClass().getName());
1:63c81f1: 
1:63c81f1:     // single threaded call to setup the sharing mapper
1:63c81f1:     mapper.setupSharedInstance(ctx);
1:63c81f1: 
1:63c81f1:     // multithreaded execution
1:63c81f1:     super.run(ctx);
1:63c81f1:   }
1:63c81f1: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:82bbf15
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: import org.apache.hadoop.mapreduce.JobContext;
1: import org.apache.hadoop.mapreduce.Mapper;
/////////////////////////////////////////////////////////////////////////
1:     Class<Mapper<K1, V1, K2, V2>> mapperClass =
1:         MultithreadedSharingMapper.getMapperClass((JobContext) ctx);
1:     Preconditions.checkNotNull(mapperClass, "Could not find Multithreaded Mapper class.");
1:     Mapper<K1, V1, K2, V2> mapper1 = ReflectionUtils.newInstance(mapperClass, conf);
1:     SharingMapper<K1, V1, K2, V2, ?> mapper = null;
1:     if (mapper1 instanceof SharingMapper) {
1:       mapper = (SharingMapper<K1, V1, K2, V2, ?>) mapper1;
1:     }
1:     Preconditions.checkNotNull(mapper, "Could not instantiate SharingMapper. Class was: %s",
1:                                mapper1.getClass().getName());
commit:df39ce4
/////////////////////////////////////////////////////////////////////////
1:  * Multithreaded Mapper for {@link SharingMapper}s. Will call setupSharedInstance() once in the controlling thread
1:  * before executing the mappers using a thread pool.
commit:63c81f1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.als;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.mapreduce.lib.map.MultithreadedMapper;
1: import org.apache.hadoop.util.ReflectionUtils;
1: 
1: import java.io.IOException;
1: 
1: /**
0:  * Multithreaded Mapper for {@link SharingMapper}s. Will call before() and after() once in the controlling thread
0:  * before and after executing the mappers using a thread pool.
1:  *
1:  * @param <K1>
1:  * @param <V1>
1:  * @param <K2>
1:  * @param <V2>
1:  */
1: public class MultithreadedSharingMapper<K1, V1, K2, V2> extends MultithreadedMapper<K1, V1, K2, V2> {
1: 
0:   private static final String MAPPER_CLASS = "mapred.map.multithreadedrunner.class";
1: 
1:   @Override
1:   public void run(Context ctx) throws IOException, InterruptedException {
1: 
1:     Configuration conf = ctx.getConfiguration();
1: 
0:     Class<? extends SharingMapper<K1,V1,K2,V2, ?>> mapperClass =
0:         (Class<SharingMapper<K1,V1,K2,V2, ?>>) conf.getClass(MAPPER_CLASS, SharingMapper.class);
1:     // instantiate the mapper
0:     SharingMapper<K1,V1,K2,V2, ?> mapper = ReflectionUtils.newInstance(mapperClass, conf);
1: 
1:     // single threaded call to setup the sharing mapper
1:     mapper.setupSharedInstance(ctx);
1: 
1:     // multithreaded execution
1:     super.run(ctx);
1:   }
1: }
============================================================================