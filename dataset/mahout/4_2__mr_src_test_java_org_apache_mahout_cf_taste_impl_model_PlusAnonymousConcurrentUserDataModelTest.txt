1:dd2b198: /*
1:dd2b198:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dd2b198:  * contributor license agreements.  See the NOTICE file distributed with
1:dd2b198:  * this work for additional information regarding copyright ownership.
1:dd2b198:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dd2b198:  * (the "License"); you may not use this file except in compliance with
1:dd2b198:  * the License.  You may obtain a copy of the License at
1:dd2b198:  *
1:dd2b198:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dd2b198:  *
1:dd2b198:  * Unless required by applicable law or agreed to in writing, software
1:dd2b198:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dd2b198:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dd2b198:  * See the License for the specific language governing permissions and
1:dd2b198:  * limitations under the License.
1:dd2b198:  */
1:dd2b198: 
1:dd2b198: package org.apache.mahout.cf.taste.impl.model;
1:dd2b198: 
1:dd2b198: import java.util.Iterator;
1:dd2b198: import org.apache.mahout.cf.taste.common.NoSuchUserException;
1:dd2b198: import org.apache.mahout.cf.taste.common.TasteException;
1:dd2b198: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:dd2b198: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:dd2b198: import org.apache.mahout.common.MahoutTestCase;
1:dd2b198: import org.junit.Test;
1:dd2b198: 
1:dd2b198: public final class PlusAnonymousConcurrentUserDataModelTest extends MahoutTestCase {
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Prepares a testable object without delegate data
1:dd2b198: 	 */
1:dd2b198: 	private static PlusAnonymousConcurrentUserDataModel getTestableWithoutDelegateData(int maxConcurrentUsers) {
1:02ff22f: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
1:dd2b198: 		return new PlusAnonymousConcurrentUserDataModel(new GenericDataModel(delegatePreferences), maxConcurrentUsers);
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Prepares a testable object with delegate data
1:dd2b198: 	 */
1:dd2b198:   private static PlusAnonymousConcurrentUserDataModel getTestableWithDelegateData(
1:dd2b198:         int maxConcurrentUsers, FastByIDMap<PreferenceArray> delegatePreferences) {
1:dd2b198: 		return new PlusAnonymousConcurrentUserDataModel(new GenericDataModel(delegatePreferences), maxConcurrentUsers);
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test taking the first available user
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testTakeFirstAvailableUser() {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 		Long expResult = PlusAnonymousUserDataModel.TEMP_USER_ID;
1:dd2b198: 		Long result = instance.takeAvailableUser();
1:dd2b198: 		assertEquals(expResult, result);
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test taking the next available user
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testTakeNextAvailableUser() {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198:     // Skip first user
1:dd2b198:     instance.takeAvailableUser();
1:dd2b198: 		Long result = instance.takeAvailableUser();
1:dd2b198:     Long expResult = PlusAnonymousUserDataModel.TEMP_USER_ID + 1;
1:dd2b198:     assertEquals(expResult, result);
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test taking an unavailable user
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testTakeUnavailableUser() {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(1);
1:dd2b198: 		// Take the only available user
1:dd2b198: 		instance.takeAvailableUser();
1:dd2b198: 		// There are no more users available
1:dd2b198: 		assertNull(instance.takeAvailableUser());
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test releasing a valid previously taken user
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testReleaseValidUser() {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 		Long takenUserID = instance.takeAvailableUser();
1:dd2b198: 		assertTrue(instance.releaseUser(takenUserID));
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test releasing an invalid user
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testReleaseInvalidUser() {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 		assertFalse(instance.releaseUser(Long.MAX_VALUE));
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test releasing a user which had been released earlier
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testReleasePreviouslyReleasedUser() {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 		Long takenUserID = instance.takeAvailableUser();
1:dd2b198: 		assertTrue(instance.releaseUser(takenUserID));
1:dd2b198: 		assertFalse(instance.releaseUser(takenUserID));
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test setting anonymous user preferences
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testSetAndGetTempPreferences() throws TasteException {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 		Long anonymousUserID = instance.takeAvailableUser();
1:dd2b198: 		PreferenceArray tempPrefs = new GenericUserPreferenceArray(1);
1:dd2b198: 		tempPrefs.setUserID(0, anonymousUserID);
1:dd2b198: 		tempPrefs.setItemID(0, 1);
1:dd2b198: 		instance.setTempPrefs(tempPrefs, anonymousUserID);
1:dd2b198: 		assertEquals(tempPrefs, instance.getPreferencesFromUser(anonymousUserID));
1:dd2b198: 		instance.releaseUser(anonymousUserID);
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test setting and getting preferences from several concurrent anonymous users
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testSetMultipleTempPreferences() throws TasteException {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 
1:dd2b198: 		Long anonymousUserID1 = instance.takeAvailableUser();
1:dd2b198: 		Long anonymousUserID2 = instance.takeAvailableUser();
1:dd2b198: 
1:dd2b198: 		PreferenceArray tempPrefs1 = new GenericUserPreferenceArray(1);
1:dd2b198: 		tempPrefs1.setUserID(0, anonymousUserID1);
1:dd2b198: 		tempPrefs1.setItemID(0, 1);
1:dd2b198: 
1:dd2b198: 		PreferenceArray tempPrefs2 = new GenericUserPreferenceArray(2);
1:dd2b198: 		tempPrefs2.setUserID(0, anonymousUserID2);
1:dd2b198: 		tempPrefs2.setItemID(0, 2);
1:dd2b198: 		tempPrefs2.setUserID(1, anonymousUserID2);
1:dd2b198: 		tempPrefs2.setItemID(1, 3);
1:dd2b198: 
1:dd2b198: 		instance.setTempPrefs(tempPrefs1, anonymousUserID1);
1:dd2b198: 		instance.setTempPrefs(tempPrefs2, anonymousUserID2);
1:dd2b198: 
1:dd2b198: 		assertEquals(tempPrefs1, instance.getPreferencesFromUser(anonymousUserID1));
1:dd2b198: 		assertEquals(tempPrefs2, instance.getPreferencesFromUser(anonymousUserID2));
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test counting the number of delegate users
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testGetNumUsersWithDelegateUsersOnly() throws TasteException {
1:dd2b198:     PreferenceArray prefs = new GenericUserPreferenceArray(1);
1:dd2b198:     long sampleUserID = 1;
1:dd2b198: 		prefs.setUserID(0, sampleUserID);
1:dd2b198:     long sampleItemID = 11;
1:dd2b198:     prefs.setItemID(0, sampleItemID);
1:dd2b198: 
1:02ff22f: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
1:dd2b198: 		delegatePreferences.put(sampleUserID, prefs);
1:dd2b198: 
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithDelegateData(10, delegatePreferences);
1:dd2b198: 
1:dd2b198: 		assertEquals(1, instance.getNumUsers());
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test counting the number of anonymous users
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testGetNumAnonymousUsers() throws TasteException {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 
1:dd2b198: 		Long anonymousUserID1 = instance.takeAvailableUser();
1:dd2b198: 
1:dd2b198: 		PreferenceArray tempPrefs1 = new GenericUserPreferenceArray(1);
1:dd2b198: 		tempPrefs1.setUserID(0, anonymousUserID1);
1:dd2b198: 		tempPrefs1.setItemID(0, 1);
1:dd2b198: 
1:dd2b198: 		instance.setTempPrefs(tempPrefs1, anonymousUserID1);
1:dd2b198: 
1:dd2b198: 		// Anonymous users should not be included into the universe.
1:dd2b198: 		assertEquals(0, instance.getNumUsers());
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test retrieve a single preference value of an anonymous user
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testGetPreferenceValue() throws TasteException {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 
1:dd2b198: 		Long anonymousUserID = instance.takeAvailableUser();
1:dd2b198: 
1:dd2b198: 		PreferenceArray tempPrefs = new GenericUserPreferenceArray(1);
1:dd2b198:     tempPrefs.setUserID(0, anonymousUserID);
1:dd2b198:     long sampleItemID = 1;
1:dd2b198:     tempPrefs.setItemID(0, sampleItemID);
1:dd2b198:     tempPrefs.setValue(0, Float.MAX_VALUE);
1:dd2b198: 
1:dd2b198: 		instance.setTempPrefs(tempPrefs, anonymousUserID);
1:dd2b198: 
1:dd2b198: 		assertEquals(Float.MAX_VALUE, instance.getPreferenceValue(anonymousUserID, sampleItemID), EPSILON);
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test retrieve preferences for existing non-anonymous user
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testGetPreferencesForNonAnonymousUser() throws TasteException {
1:dd2b198:     PreferenceArray prefs = new GenericUserPreferenceArray(1);
1:dd2b198:     long sampleUserID = 1;
1:dd2b198: 		prefs.setUserID(0, sampleUserID);
1:dd2b198:     long sampleItemID = 11;
1:dd2b198:     prefs.setItemID(0, sampleItemID);
1:dd2b198: 
1:02ff22f: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
1:dd2b198: 		delegatePreferences.put(sampleUserID, prefs);
1:dd2b198: 
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithDelegateData(10, delegatePreferences);
1:dd2b198: 
1:dd2b198: 		assertEquals(prefs, instance.getPreferencesFromUser(sampleUserID));
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test retrieve preferences for non-anonymous and non-existing user
1:dd2b198: 	 */
1:dd2b198: 	@Test(expected=NoSuchUserException.class)
1:dd2b198: 	public void testGetPreferencesForNonExistingUser() throws TasteException {
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:dd2b198: 		// Exception is expected since such user does not exist
1:dd2b198: 		instance.getPreferencesFromUser(1);
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test retrieving the user IDs and verifying that anonymous ones are not included
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testGetUserIDs() throws TasteException {
1:dd2b198:     PreferenceArray prefs = new GenericUserPreferenceArray(1);
1:dd2b198:     long sampleUserID = 1;
1:dd2b198: 		prefs.setUserID(0, sampleUserID);
1:dd2b198:     long sampleItemID = 11;
1:dd2b198:     prefs.setItemID(0, sampleItemID);
1:dd2b198: 
1:02ff22f: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
1:dd2b198: 		delegatePreferences.put(sampleUserID, prefs);
1:dd2b198: 
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithDelegateData(10, delegatePreferences);
1:dd2b198: 
1:dd2b198: 		Long anonymousUserID = instance.takeAvailableUser();
1:dd2b198: 
1:dd2b198: 		PreferenceArray tempPrefs = new GenericUserPreferenceArray(1);
1:dd2b198: 		tempPrefs.setUserID(0, anonymousUserID);
1:dd2b198: 		tempPrefs.setItemID(0, 22);
1:dd2b198: 
1:dd2b198: 		instance.setTempPrefs(tempPrefs, anonymousUserID);
1:dd2b198: 
1:dd2b198: 		Iterator<Long> userIDs = instance.getUserIDs();
1:dd2b198: 
1:dd2b198: 		assertSame(sampleUserID, userIDs.next());
1:dd2b198: 		assertFalse(userIDs.hasNext());
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: 	/**
1:dd2b198: 	 * Test getting preferences for an item.
1:dd2b198: 	 *
1:dd2b198: 	 * @throws TasteException
1:dd2b198: 	 */
1:dd2b198: 	@Test
1:dd2b198: 	public void testGetPreferencesForItem() throws TasteException {
1:dd2b198:     PreferenceArray prefs = new GenericUserPreferenceArray(2);
1:dd2b198:     long sampleUserID = 4;
1:dd2b198: 		prefs.setUserID(0, sampleUserID);
1:dd2b198:     long sampleItemID = 11;
1:dd2b198:     prefs.setItemID(0, sampleItemID);
1:dd2b198: 		prefs.setUserID(1, sampleUserID);
1:dd2b198:     long sampleItemID2 = 22;
1:dd2b198:     prefs.setItemID(1, sampleItemID2);
1:dd2b198: 
1:02ff22f: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
1:dd2b198: 		delegatePreferences.put(sampleUserID, prefs);
1:dd2b198: 
1:dd2b198: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithDelegateData(10, delegatePreferences);
1:dd2b198: 
1:dd2b198: 		Long anonymousUserID = instance.takeAvailableUser();
1:dd2b198: 
1:dd2b198: 		PreferenceArray tempPrefs = new GenericUserPreferenceArray(2);
1:dd2b198: 		tempPrefs.setUserID(0, anonymousUserID);
1:dd2b198: 		tempPrefs.setItemID(0, sampleItemID);
1:dd2b198: 		tempPrefs.setUserID(1, anonymousUserID);
1:dd2b198:     long sampleItemID3 = 33;
1:dd2b198:     tempPrefs.setItemID(1, sampleItemID3);
1:dd2b198: 
1:dd2b198: 		instance.setTempPrefs(tempPrefs, anonymousUserID);
1:dd2b198: 
1:dd2b198: 		assertEquals(sampleUserID, instance.getPreferencesForItem(sampleItemID).get(0).getUserID());
1:dd2b198: 		assertEquals(2, instance.getPreferencesForItem(sampleItemID).length());
1:dd2b198: 		assertEquals(1, instance.getPreferencesForItem(sampleItemID2).length());
1:dd2b198: 		assertEquals(1, instance.getPreferencesForItem(sampleItemID3).length());
1:dd2b198: 
1:dd2b198: 		assertEquals(2, instance.getNumUsersWithPreferenceFor(sampleItemID));
1:dd2b198: 		assertEquals(1, instance.getNumUsersWithPreferenceFor(sampleItemID, sampleItemID2));
1:dd2b198: 		assertEquals(1, instance.getNumUsersWithPreferenceFor(sampleItemID, sampleItemID3));
1:dd2b198: 	}
1:dd2b198: 
1:dd2b198: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:dd2b198
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.model;
1: 
1: import java.util.Iterator;
1: import org.apache.mahout.cf.taste.common.NoSuchUserException;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.junit.Test;
1: 
1: public final class PlusAnonymousConcurrentUserDataModelTest extends MahoutTestCase {
1: 
1: 	/**
1: 	 * Prepares a testable object without delegate data
1: 	 */
1: 	private static PlusAnonymousConcurrentUserDataModel getTestableWithoutDelegateData(int maxConcurrentUsers) {
0: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<PreferenceArray>();
1: 		return new PlusAnonymousConcurrentUserDataModel(new GenericDataModel(delegatePreferences), maxConcurrentUsers);
1: 	}
1: 
1: 	/**
1: 	 * Prepares a testable object with delegate data
1: 	 */
1:   private static PlusAnonymousConcurrentUserDataModel getTestableWithDelegateData(
1:         int maxConcurrentUsers, FastByIDMap<PreferenceArray> delegatePreferences) {
1: 		return new PlusAnonymousConcurrentUserDataModel(new GenericDataModel(delegatePreferences), maxConcurrentUsers);
1: 	}
1: 
1: 	/**
1: 	 * Test taking the first available user
1: 	 */
1: 	@Test
1: 	public void testTakeFirstAvailableUser() {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 		Long expResult = PlusAnonymousUserDataModel.TEMP_USER_ID;
1: 		Long result = instance.takeAvailableUser();
1: 		assertEquals(expResult, result);
1: 	}
1: 
1: 	/**
1: 	 * Test taking the next available user
1: 	 */
1: 	@Test
1: 	public void testTakeNextAvailableUser() {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1:     // Skip first user
1:     instance.takeAvailableUser();
1: 		Long result = instance.takeAvailableUser();
1:     Long expResult = PlusAnonymousUserDataModel.TEMP_USER_ID + 1;
1:     assertEquals(expResult, result);
1: 	}
1: 
1: 	/**
1: 	 * Test taking an unavailable user
1: 	 */
1: 	@Test
1: 	public void testTakeUnavailableUser() {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(1);
1: 		// Take the only available user
1: 		instance.takeAvailableUser();
1: 		// There are no more users available
1: 		assertNull(instance.takeAvailableUser());
1: 	}
1: 
1: 	/**
1: 	 * Test releasing a valid previously taken user
1: 	 */
1: 	@Test
1: 	public void testReleaseValidUser() {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 		Long takenUserID = instance.takeAvailableUser();
1: 		assertTrue(instance.releaseUser(takenUserID));
1: 	}
1: 
1: 	/**
1: 	 * Test releasing an invalid user
1: 	 */
1: 	@Test
1: 	public void testReleaseInvalidUser() {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 		assertFalse(instance.releaseUser(Long.MAX_VALUE));
1: 	}
1: 
1: 	/**
1: 	 * Test releasing a user which had been released earlier
1: 	 */
1: 	@Test
1: 	public void testReleasePreviouslyReleasedUser() {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 		Long takenUserID = instance.takeAvailableUser();
1: 		assertTrue(instance.releaseUser(takenUserID));
1: 		assertFalse(instance.releaseUser(takenUserID));
1: 	}
1: 
1: 	/**
1: 	 * Test setting anonymous user preferences
1: 	 */
1: 	@Test
1: 	public void testSetAndGetTempPreferences() throws TasteException {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 		Long anonymousUserID = instance.takeAvailableUser();
1: 		PreferenceArray tempPrefs = new GenericUserPreferenceArray(1);
1: 		tempPrefs.setUserID(0, anonymousUserID);
1: 		tempPrefs.setItemID(0, 1);
1: 		instance.setTempPrefs(tempPrefs, anonymousUserID);
1: 		assertEquals(tempPrefs, instance.getPreferencesFromUser(anonymousUserID));
1: 		instance.releaseUser(anonymousUserID);
1: 	}
1: 
1: 	/**
1: 	 * Test setting and getting preferences from several concurrent anonymous users
1: 	 */
1: 	@Test
1: 	public void testSetMultipleTempPreferences() throws TasteException {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 
1: 		Long anonymousUserID1 = instance.takeAvailableUser();
1: 		Long anonymousUserID2 = instance.takeAvailableUser();
1: 
1: 		PreferenceArray tempPrefs1 = new GenericUserPreferenceArray(1);
1: 		tempPrefs1.setUserID(0, anonymousUserID1);
1: 		tempPrefs1.setItemID(0, 1);
1: 
1: 		PreferenceArray tempPrefs2 = new GenericUserPreferenceArray(2);
1: 		tempPrefs2.setUserID(0, anonymousUserID2);
1: 		tempPrefs2.setItemID(0, 2);
1: 		tempPrefs2.setUserID(1, anonymousUserID2);
1: 		tempPrefs2.setItemID(1, 3);
1: 
1: 		instance.setTempPrefs(tempPrefs1, anonymousUserID1);
1: 		instance.setTempPrefs(tempPrefs2, anonymousUserID2);
1: 
1: 		assertEquals(tempPrefs1, instance.getPreferencesFromUser(anonymousUserID1));
1: 		assertEquals(tempPrefs2, instance.getPreferencesFromUser(anonymousUserID2));
1: 	}
1: 
1: 	/**
1: 	 * Test counting the number of delegate users
1: 	 */
1: 	@Test
1: 	public void testGetNumUsersWithDelegateUsersOnly() throws TasteException {
1:     PreferenceArray prefs = new GenericUserPreferenceArray(1);
1:     long sampleUserID = 1;
1: 		prefs.setUserID(0, sampleUserID);
1:     long sampleItemID = 11;
1:     prefs.setItemID(0, sampleItemID);
1: 
0: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<PreferenceArray>();
1: 		delegatePreferences.put(sampleUserID, prefs);
1: 
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithDelegateData(10, delegatePreferences);
1: 
1: 		assertEquals(1, instance.getNumUsers());
1: 	}
1: 
1: 	/**
1: 	 * Test counting the number of anonymous users
1: 	 */
1: 	@Test
1: 	public void testGetNumAnonymousUsers() throws TasteException {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 
1: 		Long anonymousUserID1 = instance.takeAvailableUser();
1: 
1: 		PreferenceArray tempPrefs1 = new GenericUserPreferenceArray(1);
1: 		tempPrefs1.setUserID(0, anonymousUserID1);
1: 		tempPrefs1.setItemID(0, 1);
1: 
1: 		instance.setTempPrefs(tempPrefs1, anonymousUserID1);
1: 
1: 		// Anonymous users should not be included into the universe.
1: 		assertEquals(0, instance.getNumUsers());
1: 	}
1: 
1: 	/**
1: 	 * Test retrieve a single preference value of an anonymous user
1: 	 */
1: 	@Test
1: 	public void testGetPreferenceValue() throws TasteException {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 
1: 		Long anonymousUserID = instance.takeAvailableUser();
1: 
1: 		PreferenceArray tempPrefs = new GenericUserPreferenceArray(1);
1:     tempPrefs.setUserID(0, anonymousUserID);
1:     long sampleItemID = 1;
1:     tempPrefs.setItemID(0, sampleItemID);
1:     tempPrefs.setValue(0, Float.MAX_VALUE);
1: 
1: 		instance.setTempPrefs(tempPrefs, anonymousUserID);
1: 
1: 		assertEquals(Float.MAX_VALUE, instance.getPreferenceValue(anonymousUserID, sampleItemID), EPSILON);
1: 	}
1: 
1: 	/**
1: 	 * Test retrieve preferences for existing non-anonymous user
1: 	 */
1: 	@Test
1: 	public void testGetPreferencesForNonAnonymousUser() throws TasteException {
1:     PreferenceArray prefs = new GenericUserPreferenceArray(1);
1:     long sampleUserID = 1;
1: 		prefs.setUserID(0, sampleUserID);
1:     long sampleItemID = 11;
1:     prefs.setItemID(0, sampleItemID);
1: 
0: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<PreferenceArray>();
1: 		delegatePreferences.put(sampleUserID, prefs);
1: 
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithDelegateData(10, delegatePreferences);
1: 
1: 		assertEquals(prefs, instance.getPreferencesFromUser(sampleUserID));
1: 	}
1: 
1: 	/**
1: 	 * Test retrieve preferences for non-anonymous and non-existing user
1: 	 */
1: 	@Test(expected=NoSuchUserException.class)
1: 	public void testGetPreferencesForNonExistingUser() throws TasteException {
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithoutDelegateData(10);
1: 		// Exception is expected since such user does not exist
1: 		instance.getPreferencesFromUser(1);
1: 	}
1: 
1: 	/**
1: 	 * Test retrieving the user IDs and verifying that anonymous ones are not included
1: 	 */
1: 	@Test
1: 	public void testGetUserIDs() throws TasteException {
1:     PreferenceArray prefs = new GenericUserPreferenceArray(1);
1:     long sampleUserID = 1;
1: 		prefs.setUserID(0, sampleUserID);
1:     long sampleItemID = 11;
1:     prefs.setItemID(0, sampleItemID);
1: 
0: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<PreferenceArray>();
1: 		delegatePreferences.put(sampleUserID, prefs);
1: 
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithDelegateData(10, delegatePreferences);
1: 
1: 		Long anonymousUserID = instance.takeAvailableUser();
1: 
1: 		PreferenceArray tempPrefs = new GenericUserPreferenceArray(1);
1: 		tempPrefs.setUserID(0, anonymousUserID);
1: 		tempPrefs.setItemID(0, 22);
1: 
1: 		instance.setTempPrefs(tempPrefs, anonymousUserID);
1: 
1: 		Iterator<Long> userIDs = instance.getUserIDs();
1: 
1: 		assertSame(sampleUserID, userIDs.next());
1: 		assertFalse(userIDs.hasNext());
1: 	}
1: 
1: 	/**
1: 	 * Test getting preferences for an item.
1: 	 *
1: 	 * @throws TasteException
1: 	 */
1: 	@Test
1: 	public void testGetPreferencesForItem() throws TasteException {
1:     PreferenceArray prefs = new GenericUserPreferenceArray(2);
1:     long sampleUserID = 4;
1: 		prefs.setUserID(0, sampleUserID);
1:     long sampleItemID = 11;
1:     prefs.setItemID(0, sampleItemID);
1: 		prefs.setUserID(1, sampleUserID);
1:     long sampleItemID2 = 22;
1:     prefs.setItemID(1, sampleItemID2);
1: 
0: 		FastByIDMap<PreferenceArray> delegatePreferences = new FastByIDMap<PreferenceArray>();
1: 		delegatePreferences.put(sampleUserID, prefs);
1: 
1: 		PlusAnonymousConcurrentUserDataModel instance = getTestableWithDelegateData(10, delegatePreferences);
1: 
1: 		Long anonymousUserID = instance.takeAvailableUser();
1: 
1: 		PreferenceArray tempPrefs = new GenericUserPreferenceArray(2);
1: 		tempPrefs.setUserID(0, anonymousUserID);
1: 		tempPrefs.setItemID(0, sampleItemID);
1: 		tempPrefs.setUserID(1, anonymousUserID);
1:     long sampleItemID3 = 33;
1:     tempPrefs.setItemID(1, sampleItemID3);
1: 
1: 		instance.setTempPrefs(tempPrefs, anonymousUserID);
1: 
1: 		assertEquals(sampleUserID, instance.getPreferencesForItem(sampleItemID).get(0).getUserID());
1: 		assertEquals(2, instance.getPreferencesForItem(sampleItemID).length());
1: 		assertEquals(1, instance.getPreferencesForItem(sampleItemID2).length());
1: 		assertEquals(1, instance.getPreferencesForItem(sampleItemID3).length());
1: 
1: 		assertEquals(2, instance.getNumUsersWithPreferenceFor(sampleItemID));
1: 		assertEquals(1, instance.getNumUsersWithPreferenceFor(sampleItemID, sampleItemID2));
1: 		assertEquals(1, instance.getNumUsersWithPreferenceFor(sampleItemID, sampleItemID3));
1: 	}
1: 
1: }
============================================================================