1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:f7d1c10: package org.apache.mahout.math.set;
1:ca9b6d0: 
1:ca9b6d0: import com.google.common.collect.HashMultiset;
1:ca9b6d0: import com.google.common.collect.Lists;
1:ca9b6d0: import com.google.common.collect.Multiset;
1:ca9b6d0: import junit.framework.TestCase;
1:ca9b6d0: import org.apache.mahout.common.RandomUtils;
1:ca9b6d0: 
1:ca9b6d0: import java.util.Collection;
1:ca9b6d0: import java.util.List;
1:ca9b6d0: import java.util.Random;
1:ca9b6d0: 
1:ca9b6d0: public class HashUtilsTest extends TestCase {
1:ca9b6d0:   public void testHashFloat() {
1:ca9b6d0:     Multiset<Integer> violations = HashMultiset.create();
1:ca9b6d0:     for (int k = 0; k < 1000; k++) {
1:ca9b6d0:       List<Float> original = Lists.newArrayList();
1:ca9b6d0: 
1:ca9b6d0:       Random gen = RandomUtils.getRandom();
1:ca9b6d0:       for (int i = 0; i < 10000; i++) {
1:ca9b6d0:         float x = (float) gen.nextDouble();
1:ca9b6d0:         original.add(x);
1:ca9b6d0:       }
1:ca9b6d0: 
1:ca9b6d0:       violations.add(checkCounts(original) <= 12 ? 0 : 1);
1:ca9b6d0:     }
1:ca9b6d0:     // the hashes for floats don't really have 32 bits of entropy so the test
1:ca9b6d0:     // only succeeds at better than about 99% rate.
1:ca9b6d0:     assertTrue(violations.count(0) >= 985);
1:ca9b6d0:   }
1:ca9b6d0: 
1:ca9b6d0:   public void testHashDouble() {
1:ca9b6d0:     List<Double> original = Lists.newArrayList();
1:ca9b6d0: 
1:ca9b6d0:     for (int k = 0; k < 10; k++) {
1:ca9b6d0:       Random gen = RandomUtils.getRandom();
1:ca9b6d0:       for (int i = 0; i < 10000; i++) {
1:ca9b6d0:         double x = gen.nextDouble();
1:ca9b6d0:         original.add(x);
1:ca9b6d0:       }
1:ca9b6d0: 
1:ca9b6d0:       checkCounts(original);
1:ca9b6d0:     }
1:ca9b6d0:   }
1:ca9b6d0: 
1:ca9b6d0:   public void testHashLong() {
1:ca9b6d0:     List<Long> original = Lists.newArrayList();
1:ca9b6d0: 
1:ca9b6d0:     for (int k = 0; k < 10; k++) {
1:ca9b6d0:       Random gen = RandomUtils.getRandom();
1:ca9b6d0:       for (int i = 0; i < 10000; i++) {
1:ca9b6d0:         long x = gen.nextLong();
1:ca9b6d0:         original.add(x);
1:ca9b6d0:       }
1:ca9b6d0: 
1:ca9b6d0:       checkCounts(original);
1:ca9b6d0:     }
1:ca9b6d0:   }
1:ca9b6d0: 
1:10c535c:   private static <T> int checkCounts(Collection<T> original) {
1:ca9b6d0:     Multiset<T> hashCounts = HashMultiset.create();
1:ca9b6d0:     for (T v : original) {
1:ca9b6d0:       hashCounts.add(v);
1:ca9b6d0:     }
1:ca9b6d0: 
1:ca9b6d0:     Multiset<Integer> countCounts = HashMultiset.create();
1:ca9b6d0:     for (T hash : hashCounts) {
1:ca9b6d0:       countCounts.add(hashCounts.count(hash));
1:ca9b6d0:     }
1:ca9b6d0: 
1:ca9b6d0:     return original.size() - countCounts.count(1);
1:ca9b6d0:   }
1:ca9b6d0: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:f7d1c10
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.set;
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: Vpackage org.apache.mahout.math.set;
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1:   private static <T> int checkCounts(Collection<T> original) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:ca9b6d0
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.set;
1: 
1: import com.google.common.collect.HashMultiset;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Multiset;
1: import junit.framework.TestCase;
1: import org.apache.mahout.common.RandomUtils;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Random;
1: 
1: public class HashUtilsTest extends TestCase {
1:   public void testHashFloat() {
1:     Multiset<Integer> violations = HashMultiset.create();
1:     for (int k = 0; k < 1000; k++) {
1:       List<Float> original = Lists.newArrayList();
1: 
1:       Random gen = RandomUtils.getRandom();
1:       for (int i = 0; i < 10000; i++) {
1:         float x = (float) gen.nextDouble();
1:         original.add(x);
1:       }
1: 
1:       violations.add(checkCounts(original) <= 12 ? 0 : 1);
1:     }
1:     // the hashes for floats don't really have 32 bits of entropy so the test
1:     // only succeeds at better than about 99% rate.
1:     assertTrue(violations.count(0) >= 985);
1:   }
1: 
1:   public void testHashDouble() {
1:     List<Double> original = Lists.newArrayList();
1: 
1:     for (int k = 0; k < 10; k++) {
1:       Random gen = RandomUtils.getRandom();
1:       for (int i = 0; i < 10000; i++) {
1:         double x = gen.nextDouble();
1:         original.add(x);
1:       }
1: 
1:       checkCounts(original);
1:     }
1:   }
1: 
1:   public void testHashLong() {
1:     List<Long> original = Lists.newArrayList();
1: 
1:     for (int k = 0; k < 10; k++) {
1:       Random gen = RandomUtils.getRandom();
1:       for (int i = 0; i < 10000; i++) {
1:         long x = gen.nextLong();
1:         original.add(x);
1:       }
1: 
1:       checkCounts(original);
1:     }
1:   }
1: 
0:   private <T> int checkCounts(Collection<T> original) {
1:     Multiset<T> hashCounts = HashMultiset.create();
1:     for (T v : original) {
1:       hashCounts.add(v);
1:     }
1: 
1:     Multiset<Integer> countCounts = HashMultiset.create();
1:     for (T hash : hashCounts) {
1:       countCounts.add(hashCounts.count(hash));
1:     }
1: 
1:     return original.size() - countCounts.count(1);
1:   }
1: }
============================================================================