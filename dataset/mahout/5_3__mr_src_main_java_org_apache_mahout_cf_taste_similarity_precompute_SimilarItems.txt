1:1e898e7: /**
1:1e898e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1e898e7:  * contributor license agreements.  See the NOTICE file distributed with
1:1e898e7:  * this work for additional information regarding copyright ownership.
1:1e898e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1e898e7:  * (the "License"); you may not use this file except in compliance with
1:1e898e7:  * the License.  You may obtain a copy of the License at
1:1e898e7:  *
1:1e898e7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1e898e7:  *
1:1e898e7:  * Unless required by applicable law or agreed to in writing, software
1:1e898e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1e898e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1e898e7:  * See the License for the specific language governing permissions and
1:1e898e7:  * limitations under the License.
1:1e898e7:  */
1:1e898e7: 
1:1e898e7: package org.apache.mahout.cf.taste.similarity.precompute;
1:1e898e7: 
1:1e898e7: import com.google.common.collect.UnmodifiableIterator;
1:1e898e7: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:1e898e7: 
1:1e898e7: import java.util.Iterator;
1:1e898e7: import java.util.List;
1:4ca6b86: import java.util.NoSuchElementException;
1:1e898e7: 
1:1e898e7: /**
1:1e898e7:  * Compact representation of all similar items for an item
1:1e898e7:  */
1:1e898e7: public class SimilarItems {
1:1e898e7: 
1:1e898e7:   private final long itemID;
1:1e898e7:   private final long[] similarItemIDs;
1:1e898e7:   private final double[] similarities;
1:1e898e7: 
1:1e898e7:   public SimilarItems(long itemID, List<RecommendedItem> similarItems) {
1:1e898e7:     this.itemID = itemID;
1:1e898e7: 
1:1e898e7:     int numSimilarItems = similarItems.size();
1:1e898e7:     similarItemIDs = new long[numSimilarItems];
1:1e898e7:     similarities = new double[numSimilarItems];
1:1e898e7: 
1:1e898e7:     for (int n = 0; n < numSimilarItems; n++) {
1:1e898e7:       similarItemIDs[n] = similarItems.get(n).getItemID();
1:1e898e7:       similarities[n] = similarItems.get(n).getValue();
2:1e898e7:     }
1:1e898e7:   }
1:1e898e7: 
1:1e898e7:   public long getItemID() {
1:1e898e7:     return itemID;
1:1e898e7:   }
1:1e898e7: 
1:1e898e7:   public int numSimilarItems() {
1:1e898e7:     return similarItemIDs.length;
1:1e898e7:   }
1:1e898e7: 
1:1e898e7:   public Iterable<SimilarItem> getSimilarItems() {
1:1e898e7:     return new Iterable<SimilarItem>() {
1:1e898e7:       @Override
1:1e898e7:       public Iterator<SimilarItem> iterator() {
1:1e898e7:         return new SimilarItemsIterator();
1:1e898e7:       }
1:1e898e7:     };
1:1e898e7:   }
1:1e898e7: 
1:1e898e7:   private class SimilarItemsIterator extends UnmodifiableIterator<SimilarItem> {
1:1e898e7: 
1:7856689:     private int index = -1;
1:1e898e7: 
1:1e898e7:     @Override
1:1e898e7:     public boolean hasNext() {
1:1e898e7:       return index < (similarItemIDs.length - 1);
1:1e898e7:     }
1:1e898e7: 
1:1e898e7:     @Override
1:1e898e7:     public SimilarItem next() {
1:4ca6b86:       if (!hasNext()) {
1:4ca6b86:         throw new NoSuchElementException();
1:4ca6b86:       }
1:1e898e7:       index++;
1:1e898e7:       return new SimilarItem(similarItemIDs[index], similarities[index]);
1:4841efb:     }
1:1e898e7:   }
1:1e898e7: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:7856689
/////////////////////////////////////////////////////////////////////////
1:     private int index = -1;
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
1:       if (!hasNext()) {
1:         throw new NoSuchElementException();
1:       }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
commit:1e898e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.similarity.precompute;
1: 
1: import com.google.common.collect.UnmodifiableIterator;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
1:  * Compact representation of all similar items for an item
1:  */
1: public class SimilarItems {
1: 
1:   private final long itemID;
1:   private final long[] similarItemIDs;
1:   private final double[] similarities;
1: 
1:   public SimilarItems(long itemID, List<RecommendedItem> similarItems) {
1:     this.itemID = itemID;
1: 
1:     int numSimilarItems = similarItems.size();
1:     similarItemIDs = new long[numSimilarItems];
1:     similarities = new double[numSimilarItems];
1: 
1:     for (int n = 0; n < numSimilarItems; n++) {
1:       similarItemIDs[n] = similarItems.get(n).getItemID();
1:       similarities[n] = similarItems.get(n).getValue();
1:     }
1:   }
1: 
1:   public long getItemID() {
1:     return itemID;
1:   }
1: 
1:   public int numSimilarItems() {
1:     return similarItemIDs.length;
1:   }
1: 
1:   public Iterable<SimilarItem> getSimilarItems() {
1:     return new Iterable<SimilarItem>() {
1:       @Override
1:       public Iterator<SimilarItem> iterator() {
1:         return new SimilarItemsIterator();
1:       }
1:     };
1:   }
1: 
1:   private class SimilarItemsIterator extends UnmodifiableIterator<SimilarItem> {
1: 
0:     private int index = 0;
1: 
1:     @Override
1:     public boolean hasNext() {
1:       return index < (similarItemIDs.length - 1);
1:     }
1: 
1:     @Override
1:     public SimilarItem next() {
1:       index++;
1:       return new SimilarItem(similarItemIDs[index], similarities[index]);
1:     }
1:   }
1: }
============================================================================