1:0b564c7: /*
1:0b564c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0b564c7:  * contributor license agreements.  See the NOTICE file distributed with
1:0b564c7:  * this work for additional information regarding copyright ownership.
1:0b564c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0b564c7:  * (the "License"); you may not use this file except in compliance with
1:0b564c7:  * the License.  You may obtain a copy of the License at
1:0b564c7:  *
1:0b564c7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0b564c7:  *
1:0b564c7:  * Unless required by applicable law or agreed to in writing, software
1:0b564c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0b564c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0b564c7:  * See the License for the specific language governing permissions and
1:0b564c7:  * limitations under the License.
1:0b564c7:  */
1:0b564c7: 
1:0b564c7: package org.apache.mahout.math.flavor;
1:0b564c7: 
1:0b564c7: /** A set of matrix structure properties that I denote as "flavor" (by analogy to quarks) */
1:0b564c7: public interface MatrixFlavor {
1:0b564c7: 
1:0b564c7:   /**
1:0b564c7:    * Whether matrix is backed by a native system -- such as java memory, lapack/atlas, Magma etc.
1:0b564c7:    */
1:0b564c7:   BackEnum getBacking();
1:0b564c7: 
1:0b564c7:   /**
1:0b564c7:    * Structure flavors
1:0b564c7:    */
1:0b564c7:   TraversingStructureEnum getStructure() ;
1:0b564c7: 
1:0b564c7:   boolean isDense();
1:0b564c7: 
1:0b564c7:   /**
1:0b564c7:    * This default for {@link org.apache.mahout.math.DenseMatrix}-like structures
1:0b564c7:    */
1:79a70df:   MatrixFlavor DENSELIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.ROWWISE, true);
1:0b564c7:   /**
1:0b564c7:    * This is default flavor for {@link org.apache.mahout.math.SparseRowMatrix}-like.
1:0b564c7:    */
1:79a70df:   MatrixFlavor SPARSELIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.ROWWISE, false);
1:0b564c7: 
1:0b564c7:   /**
1:0b564c7:    * This is default flavor for {@link org.apache.mahout.math.SparseMatrix}-like structures, i.e. sparse matrix blocks,
1:0b564c7:    * where few, perhaps most, rows may be missing entirely.
1:0b564c7:    */
1:79a70df:   MatrixFlavor SPARSEROWLIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.SPARSEROWWISE, false);
1:0b564c7: 
1:0b564c7:   /**
1:0b564c7:    * This is default flavor for {@link org.apache.mahout.math.DiagonalMatrix} and the likes.
1:0b564c7:    */
1:79a70df:   MatrixFlavor DIAGONALLIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.VECTORBACKED, false);
1:0b564c7: 
1:79a70df:   final class FlavorImpl implements MatrixFlavor {
1:0b564c7:     private BackEnum pBacking;
1:0b564c7:     private TraversingStructureEnum pStructure;
1:0b564c7:     private boolean pDense;
1:0b564c7: 
1:0b564c7:     public FlavorImpl(BackEnum backing, TraversingStructureEnum structure, boolean dense) {
1:0b564c7:       pBacking = backing;
1:0b564c7:       pStructure = structure;
1:0b564c7:       pDense = dense;
1:0b564c7:     }
1:0b564c7: 
1:0b564c7:     @Override
1:0b564c7:     public BackEnum getBacking() {
1:0b564c7:       return pBacking;
1:0b564c7:     }
1:0b564c7: 
1:0b564c7:     @Override
1:0b564c7:     public TraversingStructureEnum getStructure() {
1:0b564c7:       return pStructure;
1:0b564c7:     }
1:0b564c7: 
1:0b564c7:     @Override
1:0b564c7:     public boolean isDense() {
1:0b564c7:       return pDense;
1:0b564c7:     }
1:0b564c7:   }
1:0b564c7: 
1:0b564c7: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:79a70df
/////////////////////////////////////////////////////////////////////////
1:   MatrixFlavor DENSELIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.ROWWISE, true);
1:   MatrixFlavor SPARSELIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.ROWWISE, false);
1:   MatrixFlavor SPARSEROWLIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.SPARSEROWWISE, false);
1:   MatrixFlavor DIAGONALLIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.VECTORBACKED, false);
1:   final class FlavorImpl implements MatrixFlavor {
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.flavor;
1: 
1: /** A set of matrix structure properties that I denote as "flavor" (by analogy to quarks) */
1: public interface MatrixFlavor {
1: 
1:   /**
1:    * Whether matrix is backed by a native system -- such as java memory, lapack/atlas, Magma etc.
1:    */
1:   BackEnum getBacking();
1: 
1:   /**
1:    * Structure flavors
1:    */
1:   TraversingStructureEnum getStructure() ;
1: 
1:   boolean isDense();
1: 
1:   /**
1:    * This default for {@link org.apache.mahout.math.DenseMatrix}-like structures
1:    */
0:   static final MatrixFlavor DENSELIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.ROWWISE, true);
1:   /**
1:    * This is default flavor for {@link org.apache.mahout.math.SparseRowMatrix}-like.
1:    */
0:   static final MatrixFlavor SPARSELIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.ROWWISE, false);
1: 
1:   /**
1:    * This is default flavor for {@link org.apache.mahout.math.SparseMatrix}-like structures, i.e. sparse matrix blocks,
1:    * where few, perhaps most, rows may be missing entirely.
1:    */
0:   static final MatrixFlavor SPARSEROWLIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.SPARSEROWWISE, false);
1: 
1:   /**
1:    * This is default flavor for {@link org.apache.mahout.math.DiagonalMatrix} and the likes.
1:    */
0:   static final MatrixFlavor DIAGONALLIKE = new FlavorImpl(BackEnum.JVMMEM, TraversingStructureEnum.VECTORBACKED, false);
1: 
0:   static final class FlavorImpl implements MatrixFlavor {
1:     private BackEnum pBacking;
1:     private TraversingStructureEnum pStructure;
1:     private boolean pDense;
1: 
1:     public FlavorImpl(BackEnum backing, TraversingStructureEnum structure, boolean dense) {
1:       pBacking = backing;
1:       pStructure = structure;
1:       pDense = dense;
1:     }
1: 
1:     @Override
1:     public BackEnum getBacking() {
1:       return pBacking;
1:     }
1: 
1:     @Override
1:     public TraversingStructureEnum getStructure() {
1:       return pStructure;
1:     }
1: 
1:     @Override
1:     public boolean isDense() {
1:       return pDense;
1:     }
1:   }
1: 
1: }
============================================================================