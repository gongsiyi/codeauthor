1:0ac8636: /**
1:0ac8636:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0ac8636:  * contributor license agreements.  See the NOTICE file distributed with
1:0ac8636:  * this work for additional information regarding copyright ownership.
1:0ac8636:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0ac8636:  * (the "License"); you may not use this file except in compliance with
1:0ac8636:  * the License.  You may obtain a copy of the License at
1:0ac8636:  *
1:0ac8636:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0ac8636:  *
1:0ac8636:  * Unless required by applicable law or agreed to in writing, software
1:0ac8636:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0ac8636:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0ac8636:  * See the License for the specific language governing permissions and
1:0ac8636:  * limitations under the License.
1:0ac8636:  */
4:0ac8636: 
1:0ac8636: package org.apache.mahout.cf.taste.impl.recommender;
1:62eeeae: 
1:62eeeae: import org.apache.mahout.cf.taste.common.Refreshable;
1:0ac8636: import org.apache.mahout.cf.taste.common.TasteException;
1:0ac8636: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:0ac8636: import org.apache.mahout.cf.taste.model.DataModel;
1:e23728d: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:0ac8636: import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
1:0ac8636: import org.apache.mahout.cf.taste.recommender.MostSimilarItemsCandidateItemsStrategy;
1:0ac8636: 
1:62eeeae: import java.util.Collection;
1:62eeeae: 
1:0ac8636: /**
1:0ac8636:  * Abstract base implementation for retrieving candidate items to recommend
1:0ac8636:  */
1:0ac8636: public abstract class AbstractCandidateItemsStrategy implements CandidateItemsStrategy,
1:0ac8636:     MostSimilarItemsCandidateItemsStrategy {
1:0ac8636: 
1:d141c8e:   protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException{
1:d141c8e:       return doGetCandidateItems(preferredItemIDs, dataModel, false);
1:d141c8e:   }
1:d141c8e:   
1:62eeeae:   @Override
1:d141c8e:   public FastIDSet getCandidateItems(long userID, PreferenceArray preferencesFromUser, DataModel dataModel,
1:d141c8e:       boolean includeKnownItems) throws TasteException {
1:d141c8e:     return doGetCandidateItems(preferencesFromUser.getIDs(), dataModel, includeKnownItems);
1:d141c8e:   }
1:d141c8e:   
1:d141c8e:   @Override
1:d141c8e:   public FastIDSet getCandidateItems(long[] itemIDs, DataModel dataModel)
1:e23728d:     throws TasteException {
1:d141c8e:     return doGetCandidateItems(itemIDs, dataModel, false);
1:62eeeae:   }
1:d141c8e:      
1:d141c8e:   protected abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel,
1:d141c8e:       boolean includeKnownItems) throws TasteException;
1:d141c8e:   
2:0ac8636:   @Override
1:d141c8e:   public void refresh(Collection<Refreshable> alreadyRefreshed) {}
3:0ac8636: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d141c8e
/////////////////////////////////////////////////////////////////////////
1:   protected FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException{
1:       return doGetCandidateItems(preferredItemIDs, dataModel, false);
1:   }
1:   
1:   public FastIDSet getCandidateItems(long userID, PreferenceArray preferencesFromUser, DataModel dataModel,
1:       boolean includeKnownItems) throws TasteException {
1:     return doGetCandidateItems(preferencesFromUser.getIDs(), dataModel, includeKnownItems);
1:   }
1:   
1:   @Override
1:   public FastIDSet getCandidateItems(long[] itemIDs, DataModel dataModel)
1:     return doGetCandidateItems(itemIDs, dataModel, false);
1:      
1:   protected abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel,
1:       boolean includeKnownItems) throws TasteException;
1:   
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {}
commit:62eeeae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.common.Refreshable;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
0:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:   }
commit:e23728d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
/////////////////////////////////////////////////////////////////////////
0:   public FastIDSet getCandidateItems(long userID, PreferenceArray preferencesFromUser, DataModel dataModel)
1:       throws TasteException {
0:     return doGetCandidateItems(preferencesFromUser.getIDs(), dataModel);
0:     return doGetCandidateItems(itemIDs, dataModel);
0:   abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException;
commit:0ac8636
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
1: import org.apache.mahout.cf.taste.recommender.MostSimilarItemsCandidateItemsStrategy;
1: 
1: /**
1:  * Abstract base implementation for retrieving candidate items to recommend
1:  */
1: public abstract class AbstractCandidateItemsStrategy implements CandidateItemsStrategy,
1:     MostSimilarItemsCandidateItemsStrategy {
1: 
1:   @Override
0:   public FastIDSet getCandidateItems(long userID, DataModel dataModel) throws TasteException {
0:     return doGetCandidateItems(dataModel.getItemIDsFromUser(userID), dataModel);
1:   }
1: 
1:   @Override
0:   public FastIDSet getCandidateItems(long[] itemIDs, DataModel dataModel) throws TasteException {
0:     FastIDSet preferredItemIDs = new FastIDSet(itemIDs.length);
0:     preferredItemIDs.addAll(itemIDs);
0:     return doGetCandidateItems(preferredItemIDs, dataModel);
1:   }
1: 
0:   abstract FastIDSet doGetCandidateItems(FastIDSet preferredItemIDs, DataModel dataModel) throws TasteException;
1: }
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:682feb4
/////////////////////////////////////////////////////////////////////////
0:   protected abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3218e95
/////////////////////////////////////////////////////////////////////////
0:     throws TasteException {
============================================================================