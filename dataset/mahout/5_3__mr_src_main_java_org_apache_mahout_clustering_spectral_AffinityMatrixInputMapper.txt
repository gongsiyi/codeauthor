1:049e7dc: /**
1:049e7dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:049e7dc:  * contributor license agreements.  See the NOTICE file distributed with
1:049e7dc:  * this work for additional information regarding copyright ownership.
1:049e7dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:049e7dc:  * (the "License"); you may not use this file except in compliance with
1:049e7dc:  * the License.  You may obtain a copy of the License at
1:049e7dc:  *
1:049e7dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:049e7dc:  *
1:049e7dc:  * Unless required by applicable law or agreed to in writing, software
1:049e7dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:049e7dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:049e7dc:  * See the License for the specific language governing permissions and
1:049e7dc:  * limitations under the License.
1:049e7dc:  */
1:049e7dc: 
1:b60c909: package org.apache.mahout.clustering.spectral;
4:48d069f: 
1:48d069f: import java.io.IOException;
1:049e7dc: import java.util.regex.Pattern;
1:48d069f: 
1:48d069f: import org.apache.hadoop.io.IntWritable;
1:48d069f: import org.apache.hadoop.io.LongWritable;
1:48d069f: import org.apache.hadoop.io.Text;
1:48d069f: import org.apache.hadoop.mapreduce.Mapper;
1:48d069f: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1:049e7dc: import org.slf4j.Logger;
1:049e7dc: import org.slf4j.LoggerFactory;
1:48d069f: 
1:48d069f: /**
1:48d069f:  * <p>Handles reading the files representing the affinity matrix. Since the affinity
1:48d069f:  * matrix is representative of a graph, each line in all the files should
1:48d069f:  * take the form:</p>
1:39fe224:  *
1:39fe224:  * {@code i,j,value}
1:39fe224:  *
1:39fe224:  * <p>where {@code i} and {@code j} are the {@code i}th and
1:39fe224:  * {@code j} data points in the entire set, and {@code value}
1:48d069f:  * represents some measurement of their relative absolute magnitudes. This
1:48d069f:  * is, simply, a method for representing a graph textually.
1:48d069f:  */
1:049e7dc: public class AffinityMatrixInputMapper
1:049e7dc:     extends Mapper<LongWritable, Text, IntWritable, DistributedRowMatrix.MatrixEntryWritable> {
1:48d069f: 
1:049e7dc:   private static final Logger log = LoggerFactory.getLogger(AffinityMatrixInputMapper.class);
1:049e7dc: 
1:049e7dc:   private static final Pattern COMMA_PATTERN = Pattern.compile(",");
1:049e7dc: 
1:049e7dc:   @Override
1:049e7dc:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1:049e7dc: 
1:049e7dc:     String[] elements = COMMA_PATTERN.split(value.toString());
1:049e7dc:     log.debug("(DEBUG - MAP) Key[{}], Value[{}]", key.get(), value);
1:049e7dc: 
1:049e7dc:     // enforce well-formed textual representation of the graph
1:049e7dc:     if (elements.length != 3) {
1:d61a0ee:       throw new IOException("Expected input of length 3, received "
1:4194a28:                             + elements.length + ". Please make sure you adhere to "
1:4194a28:                             + "the structure of (i,j,value) for representing a graph in text. "
1:4194a28:                             + "Input line was: '" + value + "'.");
1:4194a28:     }
1:e0ec7c1:     if (elements[0].isEmpty() || elements[1].isEmpty() || elements[2].isEmpty()) {
1:d61a0ee:       throw new IOException("Found an element of 0 length. Please be sure you adhere to the structure of "
1:d61a0ee:           + "(i,j,value) for  representing a graph in text.");
1:049e7dc:     }
1:049e7dc: 
1:049e7dc:     // parse the line of text into a DistributedRowMatrix entry,
1:049e7dc:     // making the row (elements[0]) the key to the Reducer, and
1:049e7dc:     // setting the column (elements[1]) in the entry itself
1:d61a0ee:     DistributedRowMatrix.MatrixEntryWritable toAdd = new DistributedRowMatrix.MatrixEntryWritable();
1:049e7dc:     IntWritable row = new IntWritable(Integer.valueOf(elements[0]));
1:049e7dc:     toAdd.setRow(-1); // already set as the Reducer's key
1:049e7dc:     toAdd.setCol(Integer.valueOf(elements[1]));
1:049e7dc:     toAdd.setVal(Double.valueOf(elements[2]));
1:049e7dc:     context.write(row, toAdd);
1:049e7dc:   }
4:48d069f: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.spectral;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1:     if (elements[0].isEmpty() || elements[1].isEmpty() || elements[2].isEmpty()) {
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:                             + elements.length + ". Please make sure you adhere to "
1:                             + "the structure of (i,j,value) for representing a graph in text. "
1:                             + "Input line was: '" + value + "'.");
1:     }
0:     if (elements[0].length() == 0 || elements[1].length() == 0 || elements[2].length() == 0) {
commit:765834c
/////////////////////////////////////////////////////////////////////////
0:           + "the structure of (i,j,value) for representing a graph in text. Input line was: '"+value+"'.");
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * {@code i,j,value}
1:  *
1:  * <p>where {@code i} and {@code j} are the {@code i}th and
1:  * {@code j} data points in the entire set, and {@code value}
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1:       throw new IOException("Expected input of length 3, received "
0:           + elements.length + ". Please make sure you adhere to "
0:           + "the structure of (i,j,value) for representing a graph in text.");
1:       throw new IOException("Found an element of 0 length. Please be sure you adhere to the structure of "
1:           + "(i,j,value) for  representing a graph in text.");
1:     DistributedRowMatrix.MatrixEntryWritable toAdd = new DistributedRowMatrix.MatrixEntryWritable();
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import java.util.regex.Pattern;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1: public class AffinityMatrixInputMapper
1:     extends Mapper<LongWritable, Text, IntWritable, DistributedRowMatrix.MatrixEntryWritable> {
1:   private static final Logger log = LoggerFactory.getLogger(AffinityMatrixInputMapper.class);
1: 
1:   private static final Pattern COMMA_PATTERN = Pattern.compile(",");
1: 
1:   @Override
1:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1: 
1:     String[] elements = COMMA_PATTERN.split(value.toString());
1:     log.debug("(DEBUG - MAP) Key[{}], Value[{}]", key.get(), value);
1: 
1:     // enforce well-formed textual representation of the graph
1:     if (elements.length != 3) {
0:       throw new IOException("Expected input of length 3, received " +
0:           elements.length + ". Please make sure you adhere to " +
0:           "the structure of (i,j,value) for representing a graph " +
0:           "in text.");
0:     } else if (elements[0].length() == 0 || elements[1].length() == 0 || elements[2].length() == 0) {
0:       throw new IOException("Found an element of 0 length. Please " +
0:           "be sure you adhere to the structure of (i,j,value) for " +
0:           "representing a graph in text.");
1:     }
1: 
1:     // parse the line of text into a DistributedRowMatrix entry,
1:     // making the row (elements[0]) the key to the Reducer, and
1:     // setting the column (elements[1]) in the entry itself
0:     DistributedRowMatrix.MatrixEntryWritable toAdd =
0:       new DistributedRowMatrix.MatrixEntryWritable();
1:     IntWritable row = new IntWritable(Integer.valueOf(elements[0]));
1:     toAdd.setRow(-1); // already set as the Reducer's key
1:     toAdd.setCol(Integer.valueOf(elements[1]));
1:     toAdd.setVal(Double.valueOf(elements[2]));
1:     context.write(row, toAdd);
1:   }
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:48d069f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.clustering.spectral.common;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
0: import org.apache.mahout.clustering.spectral.kmeans.SpectralKMeansDriver;
1: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1: 
1: /**
1:  * <p>Handles reading the files representing the affinity matrix. Since the affinity
1:  * matrix is representative of a graph, each line in all the files should
1:  * take the form:</p>
0:  * 
0:  * <code>i,j,value</code>
0:  * 
0:  * <p>where <code>i</code> and <code>j</code> are the <code>i</code>th and
0:  * <code>j</code> data points in the entire set, and <code>value</code> 
1:  * represents some measurement of their relative absolute magnitudes. This
1:  * is, simply, a method for representing a graph textually.
1:  */
0: public class AffinityMatrixInputMapper extends Mapper<LongWritable, Text, IntWritable, DistributedRowMatrix.MatrixEntryWritable> {
1: 
0: 	@Override
0: 	protected void map(LongWritable key, Text value, Context context) 
0: 						throws IOException, InterruptedException {
1: 		
0: 		String [] elements = value.toString().split(",");
0: 		if (SpectralKMeansDriver.DEBUG) {
0: 			System.out.println("(DEBUG - MAP) Key[" + key.get() + "], " + 
0: 						"Value[" + value.toString() + "]");
1: 		}
1: 		
0: 		// enforce well-formed textual representation of the graph
0: 		if (elements.length != 3) {
0: 			throw new IOException("Expected input of length 3, received " + 
0: 					elements.length + ". Please make sure you adhere to " + 
0: 					"the structure of (i,j,value) for representing a graph " +
0: 					"in text.");
0: 		} else if (elements[0].length() == 0 || elements[1].length() == 0 || 
0: 				elements[2].length() == 0) {
0: 			throw new IOException("Found an element of 0 length. Please " +
0: 					"be sure you adhere to the structure of (i,j,value) for " +
0: 					"representing a graph in text.");
1: 		}
1: 			
0: 		// parse the line of text into a DistributedRowMatrix entry,
0: 		// making the row (elements[0]) the key to the Reducer, and
0: 		// setting the column (elements[1]) in the entry itself
0: 		DistributedRowMatrix.MatrixEntryWritable toAdd = 
0: 			new DistributedRowMatrix.MatrixEntryWritable();
0: 		IntWritable row = new IntWritable(Integer.valueOf(elements[0]));
0: 		toAdd.setRow(-1); // already set as the Reducer's key 
0: 		toAdd.setCol(Integer.valueOf(elements[1]));
0: 		toAdd.setVal(Double.valueOf(elements[2]));
0: 		context.write(row, toAdd);
1: 	}
1: }
============================================================================