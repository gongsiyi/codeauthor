1:a13b4b7: /**
1:a13b4b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a13b4b7:  * contributor license agreements.  See the NOTICE file distributed with
1:a13b4b7:  * this work for additional information regarding copyright ownership.
1:a13b4b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a13b4b7:  * (the "License"); you may not use this file except in compliance with
1:a13b4b7:  * the License.  You may obtain a copy of the License at
1:a13b4b7:  *
1:a13b4b7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a13b4b7:  *
1:a13b4b7:  * Unless required by applicable law or agreed to in writing, software
1:a13b4b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a13b4b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a13b4b7:  * See the License for the specific language governing permissions and
1:a13b4b7:  * limitations under the License.
1:a13b4b7:  */
2:a13b4b7: 
1:a13b4b7: package org.apache.mahout.common.iterator.sequencefile;
1:a13b4b7: 
1:12659e1: import java.io.Closeable;
1:a13b4b7: import java.io.IOException;
1:12659e1: import java.util.Collections;
1:a13b4b7: import java.util.Comparator;
1:a13b4b7: import java.util.Iterator;
1:12659e1: import java.util.List;
1:a13b4b7: 
1:80366ee: import com.google.common.base.Function;
1:80366ee: import com.google.common.collect.ForwardingIterator;
1:80366ee: import com.google.common.collect.Iterators;
1:12659e1: import com.google.common.collect.Lists;
1:a13b4b7: import org.apache.hadoop.conf.Configuration;
1:a13b4b7: import org.apache.hadoop.fs.FileStatus;
1:a13b4b7: import org.apache.hadoop.fs.FileSystem;
1:a13b4b7: import org.apache.hadoop.fs.Path;
1:a13b4b7: import org.apache.hadoop.fs.PathFilter;
1:a13b4b7: import org.apache.hadoop.io.Writable;
1:29a7f38: import org.apache.mahout.common.HadoopUtil;
1:12659e1: import org.apache.mahout.common.IOUtils;
1:a13b4b7: import org.apache.mahout.common.Pair;
1:a13b4b7: 
1:a13b4b7: /**
1:a13b4b7:  * Like {@link SequenceFileIterator}, but iterates not just over one sequence file, but many. The input path
1:a13b4b7:  * may be specified as a directory of files to read, or as a glob pattern. The set of files may be optionally
1:a13b4b7:  * restricted with a {@link PathFilter}.
1:a13b4b7:  */
1:a13b4b7: public final class SequenceFileDirIterator<K extends Writable,V extends Writable>
1:12659e1:     extends ForwardingIterator<Pair<K,V>> implements Closeable {
1:80366ee: 
1:564c3e1:   private static final FileStatus[] NO_STATUSES = new FileStatus[0];
1:564c3e1: 
1:8bac914:   private Iterator<Pair<K,V>> delegate;
1:12659e1:   private final List<SequenceFileIterator<K,V>> iterators;
1:a13b4b7: 
1:8bac914:   /**
1:8bac914:    * Multifile sequence file iterator where files are specified explicitly by
1:8bac914:    * path parameters.
1:8bac914:    */
1:8bac914:   public SequenceFileDirIterator(Path[] path,
1:564c3e1:                                  boolean reuseKeyValueInstances,
1:564c3e1:                                  Configuration conf) throws IOException {
1:a13b4b7: 
1:8bac914:     iterators = Lists.newArrayList();
1:564c3e1:     // we assume all files should exist, otherwise we will bail out.
1:1de8cec:     FileSystem fs = FileSystem.get(path[0].toUri(), conf);
1:8bac914:     FileStatus[] statuses = new FileStatus[path.length];
1:564c3e1:     for (int i = 0; i < statuses.length; i++) {
1:8bac914:       statuses[i] = fs.getFileStatus(path[i]);
1:564c3e1:     }
1:564c3e1:     init(statuses, reuseKeyValueInstances, conf);
7:a13b4b7:   }
1:12659e1: 
1:8bac914:   /**
1:8bac914:    * Constructor that uses either {@link FileSystem#listStatus(Path)} or
1:8bac914:    * {@link FileSystem#globStatus(Path)} to obtain list of files to iterate over
1:8bac914:    * (depending on pathType parameter).
1:8bac914:    */
1:a13b4b7:   public SequenceFileDirIterator(Path path,
2:a13b4b7:                                  PathType pathType,
2:a13b4b7:                                  PathFilter filter,
2:a13b4b7:                                  Comparator<FileStatus> ordering,
1:564c3e1:                                  boolean reuseKeyValueInstances,
1:564c3e1:                                  Configuration conf) throws IOException {
1:a13b4b7: 
1:564c3e1:     FileStatus[] statuses = HadoopUtil.getFileStatus(path, pathType, filter, ordering, conf);
1:12659e1:     iterators = Lists.newArrayList();
1:564c3e1:     init(statuses, reuseKeyValueInstances, conf);
1:a13b4b7:   }
1:a13b4b7: 
1:8bac914:   private void init(FileStatus[] statuses,
1:80366ee:                     final boolean reuseKeyValueInstances,
1:e64dd36:                     final Configuration conf) {
1:a13b4b7: 
1:8bac914:     /*
1:8bac914:      * prevent NPEs. Unfortunately, Hadoop would return null for list if nothing
1:8bac914:      * was qualified. In this case, which is a corner case, we should assume an
1:8bac914:      * empty iterator, not an NPE.
1:8bac914:      */
1:564c3e1:     if (statuses == null) {
1:564c3e1:       statuses = NO_STATUSES;
1:564c3e1:     }
1:a13b4b7: 
1:564c3e1:     Iterator<FileStatus> fileStatusIterator = Iterators.forArray(statuses);
1:12659e1: 
1:8bac914:     Iterator<Iterator<Pair<K, V>>> fsIterators =
1:80366ee:       Iterators.transform(fileStatusIterator,
1:6d16230:         new Function<FileStatus, Iterator<Pair<K, V>>>() {
1:6d16230:           @Override
1:6d16230:           public Iterator<Pair<K, V>> apply(FileStatus from) {
1:6d16230:             try {
1:87c15be:               SequenceFileIterator<K, V> iterator = new SequenceFileIterator<>(from.getPath(),
1:6d16230:                   reuseKeyValueInstances, conf);
1:6d16230:               iterators.add(iterator);
1:6d16230:               return iterator;
1:6d16230:             } catch (IOException ioe) {
1:6d16230:               throw new IllegalStateException(from.getPath().toString(), ioe);
1:6d16230:             }
1:6d16230:           }
1:6d16230:         });
1:12659e1: 
1:12659e1:     Collections.reverse(iterators); // close later in reverse order
1:12659e1: 
1:80366ee:     delegate = Iterators.concat(fsIterators);
1:80366ee:   }
1:a13b4b7: 
2:80366ee:   @Override
1:80366ee:   protected Iterator<Pair<K,V>> delegate() {
1:80366ee:     return delegate;
1:80366ee:   }
1:a13b4b7: 
1:12659e1:   @Override
1:12659e1:   public void close() throws IOException {
1:12659e1:     IOUtils.close(iterators);
1:12659e1:     iterators.clear();
1:12659e1:   }
1:12659e1: 
1:a13b4b7: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:               SequenceFileIterator<K, V> iterator = new SequenceFileIterator<>(from.getPath(),
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:         new Function<FileStatus, Iterator<Pair<K, V>>>() {
1:           @Override
1:           public Iterator<Pair<K, V>> apply(FileStatus from) {
1:             try {
0:               SequenceFileIterator<K, V> iterator = new SequenceFileIterator<K, V>(from.getPath(),
1:                   reuseKeyValueInstances, conf);
1:               iterators.add(iterator);
1:               return iterator;
1:             } catch (IOException ioe) {
1:               throw new IllegalStateException(from.getPath().toString(), ioe);
1:             }
1:           }
1:         });
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:                     final Configuration conf) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1de8cec
/////////////////////////////////////////////////////////////////////////
1:     FileSystem fs = FileSystem.get(path[0].toUri(), conf);
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:   private static final FileStatus[] NO_STATUSES = new FileStatus[0];
1: 
1:                                  boolean reuseKeyValueInstances,
1:                                  Configuration conf) throws IOException {
1:     // we assume all files should exist, otherwise we will bail out.
1:     for (int i = 0; i < statuses.length; i++) {
1:     }
1:     init(statuses, reuseKeyValueInstances, conf);
1:                                  boolean reuseKeyValueInstances,
1:                                  Configuration conf) throws IOException {
1:     FileStatus[] statuses = HadoopUtil.getFileStatus(path, pathType, filter, ordering, conf);
1:     init(statuses, reuseKeyValueInstances, conf);
0:                     final Configuration conf){
1:     if (statuses == null) {
1:       statuses = NO_STATUSES;
1:     }
1:     Iterator<FileStatus> fileStatusIterator = Iterators.forArray(statuses);
commit:12659e1
/////////////////////////////////////////////////////////////////////////
1: import java.io.Closeable;
1: import java.util.Collections;
1: import java.util.List;
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.common.IOUtils;
/////////////////////////////////////////////////////////////////////////
1:     extends ForwardingIterator<Pair<K,V>> implements Closeable {
1:   private final List<SequenceFileIterator<K,V>> iterators;
/////////////////////////////////////////////////////////////////////////
1: 
1:     iterators = Lists.newArrayList();
1: 
0:                                   SequenceFileIterator<K,V> iterator =
0:                                       new SequenceFileIterator<K,V>(from.getPath(), reuseKeyValueInstances, conf);
0:                                   iterators.add(iterator);
0:                                   return iterator;
1: 
1:     Collections.reverse(iterators); // close later in reverse order
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void close() throws IOException {
1:     IOUtils.close(iterators);
1:     iterators.clear();
1:   }
1: 
commit:9101588
/////////////////////////////////////////////////////////////////////////
0:                                   throw new IllegalStateException(from.getPath().toString(), ioe);
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
1: import com.google.common.collect.ForwardingIterator;
1: import com.google.common.collect.Iterators;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     extends ForwardingIterator<Pair<K,V>> {
1: 
0:   private final Iterator<Pair<K,V>> delegate;
1:                                  final boolean reuseKeyValueInstances,
0:                                  final Configuration conf) throws IOException {
0:     FileSystem fs = path.getFileSystem(conf);
/////////////////////////////////////////////////////////////////////////
0:     Iterator<FileStatus> fileStatusIterator = Iterators.forArray(statuses);
0:     Iterator<Iterator<Pair<K,V>>> fsIterators =
1:         Iterators.transform(fileStatusIterator,
0:                             new Function<FileStatus, Iterator<Pair<K, V>>>() {
1:                               @Override
0:                               public Iterator<Pair<K, V>> apply(FileStatus from) {
0:                                 try {
0:                                   return new SequenceFileIterator<K,V>(from.getPath(), reuseKeyValueInstances, conf);
0:                                 } catch (IOException ioe) {
0:                                   throw new IllegalStateException(ioe);
1:                                 }
1:                               }
0:                             });
1:     delegate = Iterators.concat(fsIterators);
1:   @Override
1:   protected Iterator<Pair<K,V>> delegate() {
1:     return delegate;
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator.sequencefile;
1: 
1: import java.io.IOException;
0: import java.util.Arrays;
1: import java.util.Comparator;
1: import java.util.Iterator;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileStatus;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.fs.PathFilter;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.common.Pair;
0: import org.apache.mahout.common.iterator.ArrayIterator;
0: import org.apache.mahout.common.iterator.DelegatingIterator;
0: import org.apache.mahout.common.iterator.IteratorsIterator;
0: import org.apache.mahout.common.iterator.TransformingIterator;
1: 
1: /**
1:  * Like {@link SequenceFileIterator}, but iterates not just over one sequence file, but many. The input path
1:  * may be specified as a directory of files to read, or as a glob pattern. The set of files may be optionally
1:  * restricted with a {@link PathFilter}.
1:  */
1: public final class SequenceFileDirIterator<K extends Writable,V extends Writable>
0:     extends DelegatingIterator<Pair<K,V>> {
1: 
1:   public SequenceFileDirIterator(Path path,
1:                                  PathType pathType,
1:                                  PathFilter filter,
1:                                  Comparator<FileStatus> ordering,
0:                                  boolean reuseKeyValueInstances,
0:                                  Configuration conf)
0:     throws IOException {
0:     super(SequenceFileDirIterator.<K,V>buildDelegate(path,
0:                                                      pathType,
0:                                                      filter,
0:                                                      ordering,
0:                                                      reuseKeyValueInstances,
0:                                                      conf));
1:   }
1: 
0:   private static <K extends Writable,V extends Writable> Iterator<Pair<K,V>> buildDelegate(
0:       Path path,
1:       PathType pathType,
1:       PathFilter filter,
1:       Comparator<FileStatus> ordering,
0:       boolean reuseKeyValueInstances,
0:       Configuration conf) throws IOException {
1: 
0:     FileSystem fs = path.getFileSystem(conf);
0:     path = path.makeQualified(fs);
0:     FileStatus[] statuses;
0:     if (filter == null) {
0:       statuses = pathType == PathType.GLOB ? fs.globStatus(path) : fs.listStatus(path);
0:     } else {
0:       statuses = pathType == PathType.GLOB ? fs.globStatus(path, filter) : fs.listStatus(path, filter);
1:     }
0:     if (ordering != null) {
0:       Arrays.sort(statuses, ordering);
1:     }
0:     Iterator<FileStatus> fileStatusIterator = new ArrayIterator<FileStatus>(statuses);
0:     return new IteratorsIterator<Pair<K,V>>(
0:         new FileStatusToSFIterator<K,V>(fileStatusIterator, reuseKeyValueInstances, conf));
1:   }
1: 
1: 
0:   private static class FileStatusToSFIterator<K extends Writable, V extends Writable>
0:     extends TransformingIterator<FileStatus,Iterator<Pair<K,V>>> {
1: 
0:     private final Configuration conf;
0:     private final boolean reuseKeyValueInstances;
1: 
0:     private FileStatusToSFIterator(Iterator<FileStatus> fileStatusIterator,
0:                                    boolean reuseKeyValueInstances,
0:                                    Configuration conf) {
0:       super(fileStatusIterator);
0:       this.reuseKeyValueInstances = reuseKeyValueInstances;
0:       this.conf = conf;
1:     }
1: 
0:     @Override
0:     protected Iterator<Pair<K,V>> transform(FileStatus in) {
0:       try {
0:         return new SequenceFileIterator<K,V>(in.getPath(), reuseKeyValueInstances, conf);
0:       } catch (IOException ioe) {
0:         throw new IllegalStateException(ioe);
1:       }
1:     }
1:   }
1: 
1: }
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:8bac914
/////////////////////////////////////////////////////////////////////////
0: import org.apache.hadoop.fs.FileSystem;
/////////////////////////////////////////////////////////////////////////
1:   private Iterator<Pair<K,V>> delegate;
1:   /**
1:    * Multifile sequence file iterator where files are specified explicitly by
1:    * path parameters.
0:    * 
0:    * @param path
0:    * @param ordering
0:    * @param reuseKeyValueInstances
0:    * @param conf
0:    * @throws IOException
1:    */
1:   public SequenceFileDirIterator(Path[] path,
0:                                       Comparator<FileStatus> ordering,
0:                                       final boolean reuseKeyValueInstances,
0:                                       final Configuration conf) throws IOException {
0: 
1:     iterators = Lists.newArrayList();
1:     /*
0:      * we assume all files should exist, otherwise we will bail out.
1:      */
0:     FileSystem fs = FileSystem.get(conf);
1:     FileStatus[] statuses = new FileStatus[path.length];
0:     for (int i = 0; i < statuses.length; i++)
1:       statuses[i] = fs.getFileStatus(path[i]);
0:     init(statuses, ordering, reuseKeyValueInstances, conf);
0:   }
0: 
1:   /**
1:    * Constructor that uses either {@link FileSystem#listStatus(Path)} or
1:    * {@link FileSystem#globStatus(Path)} to obtain list of files to iterate over
1:    * (depending on pathType parameter).
0:    * <P>
0:    * 
0:    * @param path
0:    * @param pathType
0:    * @param filter
0:    * @param ordering
0:    * @param reuseKeyValueInstances
0:    * @param conf
0:    * @throws IOException
1:    */
/////////////////////////////////////////////////////////////////////////
0:     FileStatus[] statuses =
0:       HadoopUtil.getFileStatus(path, pathType, filter, ordering, conf);
0:     init(statuses, ordering, reuseKeyValueInstances, conf);
0:   }
1:   private void init(FileStatus[] statuses,
0:                     Comparator<FileStatus> ordering,
0:                     final boolean reuseKeyValueInstances,
0:                     final Configuration conf) throws IOException {
0: 
0:     /*
1:      * prevent NPEs. Unfortunately, Hadoop would return null for list if nothing
1:      * was qualified. In this case, which is a corner case, we should assume an
1:      * empty iterator, not an NPE.
0:      */
0:     if (statuses == null)
0:       statuses = new FileStatus[0];
0: 
0:     Iterator<FileStatus> fileStatusIterator =
0:       Iterators.forArray(statuses == null ? new FileStatus[0] : statuses);
0: 
1:     Iterator<Iterator<Pair<K, V>>> fsIterators =
0:       Iterators.transform(fileStatusIterator,
0:                           new Function<FileStatus, Iterator<Pair<K, V>>>() {
0:                             @Override
0:                             public Iterator<Pair<K, V>> apply(FileStatus from) {
0:                               try {
0:                                 SequenceFileIterator<K, V> iterator =
0:                                   new SequenceFileIterator<K, V>(from.getPath(),
0:                                                                  reuseKeyValueInstances,
0:                                                                  conf);
0:                                 iterators.add(iterator);
0:                                 return iterator;
0:                               } catch (IOException ioe) {
0:                                 throw new IllegalStateException(from.getPath()
0:                                                                     .toString(),
0:                                                                 ioe);
0:                             }
0:                           });
commit:ebeade9
/////////////////////////////////////////////////////////////////////////
0:     Iterator<FileStatus> fileStatusIterator = Iterators.forArray(statuses);
commit:5214b1d
/////////////////////////////////////////////////////////////////////////
0:     Iterator<FileStatus> fileStatusIterator =
0:       Iterators.forArray(statuses == null ? new FileStatus[0] : statuses);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.HadoopUtil;
/////////////////////////////////////////////////////////////////////////
0:     FileStatus[] statuses = HadoopUtil.getFileStatus(path, pathType, filter, ordering, conf);
============================================================================