2:369c86f: /**
1:369c86f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:369c86f:  * contributor license agreements.  See the NOTICE file distributed with
1:369c86f:  * this work for additional information regarding copyright ownership.
1:369c86f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:369c86f:  * (the "License"); you may not use this file except in compliance with
1:369c86f:  * the License.  You may obtain a copy of the License at
1:369c86f:  *
1:369c86f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:369c86f:  *
1:369c86f:  * Unless required by applicable law or agreed to in writing, software
1:369c86f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:369c86f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:369c86f:  * See the License for the specific language governing permissions and
1:369c86f:  * limitations under the License.
2:369c86f:  */
7:369c86f: 
1:5a58194: package org.apache.mahout.common.iterator;
1:da03b23: 
1:369c86f: import java.util.Iterator;
1:369c86f: 
1:04c3374: import com.google.common.base.Preconditions;
1:80366ee: import com.google.common.collect.AbstractIterator;
1:127d450: import org.apache.commons.math3.distribution.PascalDistribution;
1:5a58194: import org.apache.mahout.cf.taste.impl.common.SkippingIterator;
1:2deba36: import org.apache.mahout.common.RandomUtils;
1:2deba36: import org.apache.mahout.common.RandomWrapper;
1:369c86f: 
1:369c86f: /**
1:b82d989:  * Wraps an {@link Iterator} and returns only some subset of the elements that it would, as determined by a
1:b82d989:  * iterator rate parameter.
1:369c86f:  */
1:80366ee: public final class SamplingIterator<T> extends AbstractIterator<T> {
1:369c86f:   
1:127d450:   private final PascalDistribution geometricDistribution;
1:369c86f:   private final Iterator<? extends T> delegate;
1:4884cc4: 
1:369c86f:   public SamplingIterator(Iterator<? extends T> delegate, double samplingRate) {
1:2deba36:     this(RandomUtils.getRandom(), delegate, samplingRate);
1:2deba36:   }
1:2deba36: 
1:2deba36:   public SamplingIterator(RandomWrapper random, Iterator<? extends T> delegate, double samplingRate) {
1:04c3374:     Preconditions.checkNotNull(delegate);
1:cd167f9:     Preconditions.checkArgument(samplingRate > 0.0 && samplingRate <= 1.0,
1:cd167f9:         "Must be: 0.0 < samplingRate <= 1.0. But samplingRate = " + samplingRate);
1:4884cc4:     // Geometric distribution is special case of negative binomial (aka Pascal) with r=1:
1:2deba36:     geometricDistribution = new PascalDistribution(random.getRandomGenerator(), 1, samplingRate);
1:369c86f:     this.delegate = delegate;
1:4884cc4:   }
1:80366ee: 
3:369c86f:   @Override
1:80366ee:   protected T computeNext() {
1:127d450:     int toSkip = geometricDistribution.sample();
1:b82d989:     if (delegate instanceof SkippingIterator<?>) {
1:aa1bf8f:       SkippingIterator<? extends T> skippingDelegate = (SkippingIterator<? extends T>) delegate;
1:4884cc4:       skippingDelegate.skip(toSkip);
1:aa1bf8f:       if (skippingDelegate.hasNext()) {
1:80366ee:         return skippingDelegate.next();
1:aa1bf8f:       }
1:aa1bf8f:     } else {
1:4884cc4:       for (int i = 0; i < toSkip && delegate.hasNext(); i++) {
1:4884cc4:         delegate.next();
1:4884cc4:       }
1:4884cc4:       if (delegate.hasNext()) {
1:4884cc4:         return delegate.next();
1:aa1bf8f:       }
1:aa1bf8f:     }
1:80366ee:     return endOfData();
1:aa1bf8f:   }
1:80366ee: 
1:80366ee: 
1:369c86f:   
10:369c86f: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(samplingRate > 0.0 && samplingRate <= 1.0,
1:         "Must be: 0.0 < samplingRate <= 1.0. But samplingRate = " + samplingRate);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2deba36
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.common.RandomWrapper;
/////////////////////////////////////////////////////////////////////////
1:     this(RandomUtils.getRandom(), delegate, samplingRate);
1:   }
1: 
1:   public SamplingIterator(RandomWrapper random, Iterator<? extends T> delegate, double samplingRate) {
1:     geometricDistribution = new PascalDistribution(random.getRandomGenerator(), 1, samplingRate);
commit:127d450
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.math3.distribution.PascalDistribution;
/////////////////////////////////////////////////////////////////////////
1:   private final PascalDistribution geometricDistribution;
0:     geometricDistribution = new PascalDistribution(1, samplingRate);
1:     int toSkip = geometricDistribution.sample();
commit:04c3374
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkNotNull(delegate);
0:     Preconditions.checkArgument(samplingRate > 0.0 && samplingRate <= 1.0);
commit:4884cc4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.math.MathException;
0: import org.apache.commons.math.distribution.PascalDistributionImpl;
/////////////////////////////////////////////////////////////////////////
0:   private final PascalDistributionImpl geometricDistribution;
1: 
1:     // Geometric distribution is special case of negative binomial (aka Pascal) with r=1:
0:     geometricDistribution = new PascalDistributionImpl(1, samplingRate);
0:     int toSkip;
0:     try {
0:       toSkip = geometricDistribution.sample();
0:     } catch (MathException e) {
0:       throw new IllegalStateException(e);
1:     }
1:       skippingDelegate.skip(toSkip);
1:       for (int i = 0; i < toSkip && delegate.hasNext(); i++) {
1:         delegate.next();
1:       }
1:       if (delegate.hasNext()) {
1:         return delegate.next();
commit:a26d3b1
/////////////////////////////////////////////////////////////////////////
0:   private final Random random;
0:     random = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
0:       while (random.nextDouble() >= samplingRate) {
/////////////////////////////////////////////////////////////////////////
0:         if (random.nextDouble() < samplingRate) {
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.AbstractIterator;
/////////////////////////////////////////////////////////////////////////
1: public final class SamplingIterator<T> extends AbstractIterator<T> {
1: 
1:   protected T computeNext() {
0:       while (RANDOM.nextDouble() >= samplingRate) {
/////////////////////////////////////////////////////////////////////////
1:         return skippingDelegate.next();
0:         if (RANDOM.nextDouble() < samplingRate) {
0:           return delegateNext;
1:     return endOfData();
1: 
1: 
commit:f824f90
commit:5a58194
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.common.iterator;
1: import org.apache.mahout.cf.taste.impl.common.SkippingIterator;
/////////////////////////////////////////////////////////////////////////
0:  * Wraps an {@link Iterator} and returns only some subset of the elements that it would, as determined by a iterator
commit:da03b23
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.RandomUtils;
1: 
commit:b25ad9d
/////////////////////////////////////////////////////////////////////////
0: import java.util.Random;
0:  * Wraps an {@link Iterator} and returns only some subset of the elements that it would, as determined by a sampling
0:  * rate parameter.
commit:aa1bf8f
/////////////////////////////////////////////////////////////////////////
0:     if (delegate instanceof SkippingIterator) {
1:       SkippingIterator<? extends T> skippingDelegate = (SkippingIterator<? extends T>) delegate;
0:       int toSkip = 0;
0:       while (r.nextDouble() >= samplingRate) {
0:         toSkip++;
1:       }
0:       // Really, would be nicer to select value from geometric distribution, for small values of samplingRate
0:       if (toSkip > 0) {
0:         skippingDelegate.skip(toSkip);
1:       }
1:       if (skippingDelegate.hasNext()) {
0:         next = skippingDelegate.next();
1:       }
1:     } else {
0:       while (delegate.hasNext()) {
0:         T delegateNext = delegate.next();
0:         if (r.nextDouble() < samplingRate) {
0:           next = delegateNext;
0:           found = true;
0:           break;
1:         }
commit:369c86f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.cf.taste.impl.common;
1: 
1: import java.util.Iterator;
0: import java.util.Random;
0: import java.util.NoSuchElementException;
1: 
1: /**
0:  * Wraps an {@link Iterator} and returns only some subset of the elements
0:  * that it would, as determined by a sampling rate parameter.
1:  */
0: public final class SamplingIterator<T> implements Iterator<T> {
1: 
0:   private static final Random r = RandomUtils.getRandom();
1: 
1:   private final Iterator<? extends T> delegate;
0:   private final double samplingRate;
0:   private T next;
0:   private boolean hasNext;
1: 
1:   public SamplingIterator(Iterator<? extends T> delegate, double samplingRate) {
1:     this.delegate = delegate;
0:     this.samplingRate = samplingRate;
0:     this.hasNext = true;
0:     doNext();
1:   }
1: 
1:   @Override
0:   public boolean hasNext() {
0:     return hasNext;
1:   }
1: 
1:   @Override
0:   public T next() {
0:     if (hasNext) {
0:       T result = next;
0:       doNext();
0:       return result;
1:     }
0:     throw new NoSuchElementException();
1:   }
1: 
0:   private void doNext() {
0:     boolean found = false;
0:     while (delegate.hasNext()) {
0:       T delegateNext = delegate.next();
0:       if (r.nextDouble() < samplingRate) {
0:         next = delegateNext;
0:         found = true;
0:         break;
1:       }
1:     }
0:     if (!found) {
0:       hasNext = false;
0:       next = null;
1:     }
1:   }
1: 
1:   /**
0:    * @throws UnsupportedOperationException
1:    */
1:   @Override
0:   public void remove() {
0:     throw new UnsupportedOperationException();
1:   }
1: 
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:b82d989
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.impl.common.SkippingIterator;
0: import org.apache.mahout.common.RandomUtils;
0: 
1:  * Wraps an {@link Iterator} and returns only some subset of the elements that it would, as determined by a
1:  * iterator rate parameter.
0:   
0:   
0:   
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:   
1:     if (delegate instanceof SkippingIterator<?>) {
0:       while (SamplingIterator.r.nextDouble() >= samplingRate) {
/////////////////////////////////////////////////////////////////////////
0:         if (SamplingIterator.r.nextDouble() < samplingRate) {
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
0:   
============================================================================