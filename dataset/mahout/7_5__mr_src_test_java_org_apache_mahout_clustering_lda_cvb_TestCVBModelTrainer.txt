1:131eb4a: /**
1:131eb4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:131eb4a:  * contributor license agreements.  See the NOTICE file distributed with
1:131eb4a:  * this work for additional information regarding copyright ownership.
1:131eb4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:131eb4a:  * (the "License"); you may not use this file except in compliance with
1:131eb4a:  * the License.  You may obtain a copy of the License at
1:131eb4a:  *
1:131eb4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:131eb4a:  *
1:131eb4a:  * Unless required by applicable law or agreed to in writing, software
1:131eb4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:131eb4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:131eb4a:  * See the License for the specific language governing permissions and
1:131eb4a:  * limitations under the License.
1:131eb4a:  */
1:131eb4a: package org.apache.mahout.clustering.lda.cvb;
2:131eb4a: 
1:131eb4a: import com.google.common.base.Joiner;
1:131eb4a: import com.google.common.collect.Lists;
1:131eb4a: import org.apache.hadoop.conf.Configuration;
1:131eb4a: import org.apache.hadoop.fs.Path;
1:4fbfbc6: import org.apache.mahout.clustering.ClusteringTestUtils;
1:131eb4a: import org.apache.mahout.common.MahoutTestCase;
1:4fbfbc6: import org.apache.mahout.common.RandomUtils;
1:131eb4a: import org.apache.mahout.math.Matrix;
1:131eb4a: import org.apache.mahout.math.MatrixUtils;
1:131eb4a: import org.apache.mahout.math.function.DoubleFunction;
1:131eb4a: import org.junit.Test;
1:131eb4a: 
1:131eb4a: import java.io.IOException;
1:131eb4a: import java.util.Arrays;
1:131eb4a: import java.util.List;
1:4fbfbc6: 
1:2deba36: public final class TestCVBModelTrainer extends MahoutTestCase {
1:131eb4a: 
1:4fbfbc6:   private static final double ETA = 0.1;
1:4fbfbc6:   private static final double ALPHA = 0.1;
1:131eb4a: 
1:131eb4a:   @Test
1:131eb4a:   public void testInMemoryCVB0() throws Exception {
1:131eb4a:     String[] terms = new String[26];
1:e64dd36:     for (int i=0; i<terms.length; i++) {
1:4fbfbc6:       terms[i] = String.valueOf((char) (i + 'a'));
1:131eb4a:     }
1:4fbfbc6:     int numGeneratingTopics = 3;
1:4fbfbc6:     int numTerms = 26;
1:4fbfbc6:     Matrix matrix = ClusteringTestUtils.randomStructuredModel(numGeneratingTopics, numTerms, new DoubleFunction() {
2:131eb4a:       @Override public double apply(double d) {
1:4fbfbc6:         return 1.0 / Math.pow(d + 1.0, 2);
1:131eb4a:       }
1:131eb4a:     });
1:131eb4a: 
1:131eb4a:     int numDocs = 100;
1:131eb4a:     int numSamples = 20;
1:131eb4a:     int numTopicsPerDoc = 1;
1:131eb4a: 
1:4fbfbc6:     Matrix sampledCorpus = ClusteringTestUtils.sampledCorpus(matrix, RandomUtils.getRandom(),
1:4fbfbc6:                                                              numDocs, numSamples, numTopicsPerDoc);
1:131eb4a: 
1:131eb4a:     List<Double> perplexities = Lists.newArrayList();
1:4fbfbc6:     int numTrials = 1;
1:4fbfbc6:     for (int numTestTopics = 1; numTestTopics < 2 * numGeneratingTopics; numTestTopics++) {
1:131eb4a:       double[] perps = new double[numTrials];
1:e64dd36:       for (int trial = 0; trial < numTrials; trial++) {
1:131eb4a:         InMemoryCollapsedVariationalBayes0 cvb =
1:229aeff:           new InMemoryCollapsedVariationalBayes0(sampledCorpus, terms, numTestTopics, ALPHA, ETA, 2, 1, 0);
1:131eb4a:         cvb.setVerbose(true);
1:4fbfbc6:         perps[trial] = cvb.iterateUntilConvergence(0, 5, 0, 0.2);
1:131eb4a:         System.out.println(perps[trial]);
1:131eb4a:       }
1:131eb4a:       Arrays.sort(perps);
1:131eb4a:       System.out.println(Arrays.toString(perps));
1:131eb4a:       perplexities.add(perps[0]);
1:131eb4a:     }
1:131eb4a:     System.out.println(Joiner.on(",").join(perplexities));
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   @Test
1:131eb4a:   public void testRandomStructuredModelViaMR() throws Exception {
1:131eb4a:     int numGeneratingTopics = 3;
1:131eb4a:     int numTerms = 9;
1:4fbfbc6:     Matrix matrix = ClusteringTestUtils.randomStructuredModel(numGeneratingTopics, numTerms, new DoubleFunction() {
1:4fbfbc6:       @Override
1:4fbfbc6:       public double apply(double d) {
1:4fbfbc6:         return 1.0 / Math.pow(d + 1.0, 3);
1:131eb4a:       }
1:131eb4a:     });
1:131eb4a: 
1:131eb4a:     int numDocs = 500;
1:131eb4a:     int numSamples = 10;
1:131eb4a:     int numTopicsPerDoc = 1;
1:131eb4a: 
1:4fbfbc6:     Matrix sampledCorpus = ClusteringTestUtils.sampledCorpus(matrix, RandomUtils.getRandom(1234),
1:4fbfbc6:                                                              numDocs, numSamples, numTopicsPerDoc);
1:131eb4a: 
1:131eb4a:     Path sampleCorpusPath = getTestTempDirPath("corpus");
1:e3ec9d8:     Configuration configuration = getConfiguration();
1:e3ec9d8:     MatrixUtils.write(sampleCorpusPath, configuration, sampledCorpus);
1:131eb4a:     int numIterations = 5;
1:131eb4a:     List<Double> perplexities = Lists.newArrayList();
1:131eb4a:     int startTopic = numGeneratingTopics - 1;
1:131eb4a:     int numTestTopics = startTopic;
1:e64dd36:     while (numTestTopics < numGeneratingTopics + 2) {
1:131eb4a:       Path topicModelStateTempPath = getTestTempDirPath("topicTemp" + numTestTopics);
1:e3ec9d8:       Configuration conf = getConfiguration();
1:4aed7cc:       CVB0Driver cvb0Driver = new CVB0Driver();
1:4aed7cc:       cvb0Driver.run(conf, sampleCorpusPath, null, numTestTopics, numTerms,
1:4aed7cc:           ALPHA, ETA, numIterations, 1, 0, null, null, topicModelStateTempPath, 1234, 0.2f, 2,
1:4aed7cc:           1, 3, 1, false);
1:131eb4a:       perplexities.add(lowestPerplexity(conf, topicModelStateTempPath));
1:131eb4a:       numTestTopics++;
1:131eb4a:     }
1:131eb4a:     int bestTopic = -1;
1:131eb4a:     double lowestPerplexity = Double.MAX_VALUE;
1:e64dd36:     for (int t = 0; t < perplexities.size(); t++) {
1:e64dd36:       if (perplexities.get(t) < lowestPerplexity) {
1:131eb4a:         lowestPerplexity = perplexities.get(t);
1:131eb4a:         bestTopic = t + startTopic;
1:131eb4a:       }
1:131eb4a:     }
1:2deba36:     assertEquals("The optimal number of topics is not that of the generating distribution", 4, bestTopic);
1:131eb4a:     System.out.println("Perplexities: " + Joiner.on(", ").join(perplexities));
1:131eb4a:   }
1:131eb4a: 
1:131eb4a:   private static double lowestPerplexity(Configuration conf, Path topicModelTemp)
1:131eb4a:       throws IOException {
1:131eb4a:     double lowest = Double.MAX_VALUE;
1:131eb4a:     double current;
1:131eb4a:     int iteration = 2;
1:e64dd36:     while (!Double.isNaN(current = CVB0Driver.readPerplexity(conf, topicModelTemp, iteration))) {
1:131eb4a:       lowest = Math.min(current, lowest);
1:131eb4a:       iteration++;
1:131eb4a:     }
1:131eb4a:     return lowest;
1:131eb4a:   }
1:131eb4a: 
1:131eb4a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4aed7cc
/////////////////////////////////////////////////////////////////////////
1:       CVB0Driver cvb0Driver = new CVB0Driver();
1:       cvb0Driver.run(conf, sampleCorpusPath, null, numTestTopics, numTerms,
1:           ALPHA, ETA, numIterations, 1, 0, null, null, topicModelStateTempPath, 1234, 0.2f, 2,
1:           1, 3, 1, false);
author:Isabel Drost
-------------------------------------------------------------------------------
commit:e3ec9d8
/////////////////////////////////////////////////////////////////////////
1:     Configuration configuration = getConfiguration();
1:     MatrixUtils.write(sampleCorpusPath, configuration, sampledCorpus);
1:       Configuration conf = getConfiguration();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2deba36
/////////////////////////////////////////////////////////////////////////
1: public final class TestCVBModelTrainer extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("The optimal number of topics is not that of the generating distribution", 4, bestTopic);
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:           new InMemoryCollapsedVariationalBayes0(sampledCorpus, terms, numTestTopics, ALPHA, ETA, 2, 1, 0);
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.ClusteringTestUtils;
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1: 
1:   private static final double ETA = 0.1;
1:   private static final double ALPHA = 0.1;
1:       terms[i] = String.valueOf((char) (i + 'a'));
1:     int numGeneratingTopics = 3;
1:     int numTerms = 26;
1:     Matrix matrix = ClusteringTestUtils.randomStructuredModel(numGeneratingTopics, numTerms, new DoubleFunction() {
1:         return 1.0 / Math.pow(d + 1.0, 2);
/////////////////////////////////////////////////////////////////////////
1:     Matrix sampledCorpus = ClusteringTestUtils.sampledCorpus(matrix, RandomUtils.getRandom(),
1:                                                              numDocs, numSamples, numTopicsPerDoc);
1:     int numTrials = 1;
1:     for (int numTestTopics = 1; numTestTopics < 2 * numGeneratingTopics; numTestTopics++) {
0:           new InMemoryCollapsedVariationalBayes0(sampledCorpus, terms, numTestTopics, ALPHA, ETA,
0:                                                  2, 1, 0, (trial+1) * 123456L);
1:         perps[trial] = cvb.iterateUntilConvergence(0, 5, 0, 0.2);
/////////////////////////////////////////////////////////////////////////
1:     Matrix matrix = ClusteringTestUtils.randomStructuredModel(numGeneratingTopics, numTerms, new DoubleFunction() {
1:       @Override
1:       public double apply(double d) {
1:         return 1.0 / Math.pow(d + 1.0, 3);
/////////////////////////////////////////////////////////////////////////
1:     Matrix sampledCorpus = ClusteringTestUtils.sampledCorpus(matrix, RandomUtils.getRandom(1234),
1:                                                              numDocs, numSamples, numTopicsPerDoc);
/////////////////////////////////////////////////////////////////////////
0:       CVB0Driver.run(conf, sampleCorpusPath, null, numTestTopics, numTerms,
0:                      ALPHA, ETA, numIterations, 1, 0, null, null, topicModelStateTempPath, 1234, 0.2f, 2,
0:                      1, 3, 1, false);
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     for (int i=0; i<terms.length; i++) {
/////////////////////////////////////////////////////////////////////////
1:       for (int trial = 0; trial < numTrials; trial++) {
/////////////////////////////////////////////////////////////////////////
1:     while (numTestTopics < numGeneratingTopics + 2) {
/////////////////////////////////////////////////////////////////////////
1:     for (int t = 0; t < perplexities.size(); t++) {
1:       if (perplexities.get(t) < lowestPerplexity) {
/////////////////////////////////////////////////////////////////////////
1:     while (!Double.isNaN(current = CVB0Driver.readPerplexity(conf, topicModelTemp, iteration))) {
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:131eb4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.clustering.lda.cvb;
1: 
1: import com.google.common.base.Joiner;
1: import com.google.common.collect.Lists;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixUtils;
1: import org.apache.mahout.math.function.DoubleFunction;
1: import org.junit.Test;
1: 
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.List;
0: import java.util.Random;
1: 
0: import static org.apache.mahout.clustering.ClusteringTestUtils.randomStructuredModel;
0: import static org.apache.mahout.clustering.ClusteringTestUtils.sampledCorpus;
1: 
0: public class TestCVBModelTrainer extends MahoutTestCase {
0:   private double eta = 0.1;
0:   private double alpha = 0.1;
1: 
1:   @Test
1:   public void testInMemoryCVB0() throws Exception {
0:     int numGeneratingTopics = 5;
0:     int numTerms = 26;
1:     String[] terms = new String[26];
0:     for(int i=0; i<terms.length; i++) {
0:       terms[i] = "" + ((char)(i + 97));
1:     }
0:     Matrix matrix = randomStructuredModel(numGeneratingTopics, numTerms, new DoubleFunction() {
1:       @Override public double apply(double d) {
0:         return 1d / Math.pow(d+1, 2);
1:       }
1:     });
1: 
1:     int numDocs = 100;
1:     int numSamples = 20;
1:     int numTopicsPerDoc = 1;
1: 
0:     Matrix sampledCorpus = sampledCorpus(matrix, new Random(12345),
0:         numDocs, numSamples, numTopicsPerDoc);
1: 
1:     List<Double> perplexities = Lists.newArrayList();
0:     int numTrials = 2;
0:     for(int numTestTopics = 1; numTestTopics < 2 * numGeneratingTopics; numTestTopics++) {
1:       double[] perps = new double[numTrials];
0:       for(int trial = 0; trial < numTrials; trial++) {
1:         InMemoryCollapsedVariationalBayes0 cvb =
0:           new InMemoryCollapsedVariationalBayes0(sampledCorpus, terms, numTestTopics, alpha, eta,
0:               2, 1, 0, (trial+1) * 123456L);
1:         cvb.setVerbose(true);
0:         perps[trial] = cvb.iterateUntilConvergence(0, 20, 0, 0.2);
1:         System.out.println(perps[trial]);
1:       }
1:       Arrays.sort(perps);
1:       System.out.println(Arrays.toString(perps));
1:       perplexities.add(perps[0]);
1:     }
1:     System.out.println(Joiner.on(",").join(perplexities));
1:   }
1: 
1:   @Test
1:   public void testRandomStructuredModelViaMR() throws Exception {
1:     int numGeneratingTopics = 3;
1:     int numTerms = 9;
0:     Matrix matrix = randomStructuredModel(numGeneratingTopics, numTerms, new DoubleFunction() {
1:       @Override public double apply(double d) {
0:         return 1d / Math.pow(d+1, 3);
1:       }
1:     });
1: 
1:     int numDocs = 500;
1:     int numSamples = 10;
1:     int numTopicsPerDoc = 1;
1: 
0:     Matrix sampledCorpus = sampledCorpus(matrix, new Random(1234),
0:         numDocs, numSamples, numTopicsPerDoc);
1: 
1:     Path sampleCorpusPath = getTestTempDirPath("corpus");
0:     MatrixUtils.write(sampleCorpusPath, new Configuration(), sampledCorpus);
1:     int numIterations = 5;
1:     List<Double> perplexities = Lists.newArrayList();
1:     int startTopic = numGeneratingTopics - 1;
1:     int numTestTopics = startTopic;
0:     while(numTestTopics < numGeneratingTopics + 2) {
0:       CVB0Driver driver = new CVB0Driver();
1:       Path topicModelStateTempPath = getTestTempDirPath("topicTemp" + numTestTopics);
0:       Configuration conf = new Configuration();
0:       driver.run(conf, sampleCorpusPath, null, numTestTopics, numTerms,
0:           alpha, eta, numIterations, 1, 0, null, null, topicModelStateTempPath, 1234, 0.2f, 2,
0:           1, 10, 1, false);
1:       perplexities.add(lowestPerplexity(conf, topicModelStateTempPath));
1:       numTestTopics++;
1:     }
1:     int bestTopic = -1;
1:     double lowestPerplexity = Double.MAX_VALUE;
0:     for(int t = 0; t < perplexities.size(); t++) {
0:       if(perplexities.get(t) < lowestPerplexity) {
1:         lowestPerplexity = perplexities.get(t);
1:         bestTopic = t + startTopic;
1:       }
1:     }
0:     assertEquals("The optimal number of topics is not that of the generating distribution",
0:         bestTopic, numGeneratingTopics);
1:     System.out.println("Perplexities: " + Joiner.on(", ").join(perplexities));
1:   }
1: 
1:   private static double lowestPerplexity(Configuration conf, Path topicModelTemp)
1:       throws IOException {
1:     double lowest = Double.MAX_VALUE;
1:     double current;
1:     int iteration = 2;
0:     while(!Double.isNaN(current = CVB0Driver.readPerplexity(conf, topicModelTemp, iteration))) {
1:       lowest = Math.min(current, lowest);
1:       iteration++;
1:     }
1:     return lowest;
1:   }
1: 
1: }
============================================================================