1:88848ae: /*
1:88848ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88848ae:  * contributor license agreements.  See the NOTICE file distributed with
1:88848ae:  * this work for additional information regarding copyright ownership.
1:88848ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88848ae:  * (the "License"); you may not use this file except in compliance with
1:88848ae:  * the License.  You may obtain a copy of the License at
1:88848ae:  *
1:88848ae:  *     http://www.apache.org/licenses/LICENSE-2.0
1:88848ae:  *
1:88848ae:  * Unless required by applicable law or agreed to in writing, software
1:88848ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88848ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88848ae:  * See the License for the specific language governing permissions and
1:88848ae:  * limitations under the License.
1:88848ae:  */
1:88848ae: 
1:88848ae: package org.apache.mahout.classifier.evaluation;
1:88848ae: 
1:88848ae: import org.apache.mahout.common.MahoutTestCase;
1:88848ae: import org.apache.mahout.common.RandomUtils;
1:88848ae: import org.apache.mahout.math.Matrix;
1:88848ae: import org.apache.mahout.math.jet.random.Normal;
1:88848ae: import org.junit.Test;
1:88848ae: 
1:88848ae: import java.util.Random;
1:88848ae: 
1:2deba36: public final class AucTest extends MahoutTestCase {
1:2deba36: 
1:88848ae:   @Test
1:88848ae:   public void testAuc() {
1:88848ae:     Auc auc = new Auc();
1:88848ae:     Random gen = RandomUtils.getRandom();
1:88848ae:     auc.setProbabilityScore(false);
1:e64dd36:     for (int i=0; i<100000; i++) {
1:88848ae:       auc.add(0, gen.nextGaussian());
1:88848ae:       auc.add(1, gen.nextGaussian() + 1);
1:88848ae:     }
1:88848ae:     assertEquals(0.76, auc.auc(), 0.01);
1:88848ae:   }
1:88848ae: 
1:88848ae:   @Test
1:c31a625:   public void testTies() {
1:c31a625:     Auc auc = new Auc();
1:c31a625:     Random gen = RandomUtils.getRandom();
1:c31a625:     auc.setProbabilityScore(false);
1:e64dd36:     for (int i=0; i<100000; i++) {
1:c31a625:       auc.add(0, gen.nextGaussian());
1:c31a625:       auc.add(1, gen.nextGaussian() + 1);
1:c31a625:     }
1:c31a625: 
1:c31a625:     // ties outside the normal range could cause index out of range
1:c31a625:     auc.add(0, 5.0);
1:c31a625:     auc.add(0, 5.0);
1:c31a625:     auc.add(0, 5.0);
1:c31a625:     auc.add(0, 5.0);
1:c31a625: 
1:c31a625:     auc.add(1, 5.0);
1:c31a625:     auc.add(1, 5.0);
1:c31a625:     auc.add(1, 5.0);
1:c31a625: 
1:c31a625:     assertEquals(0.76, auc.auc(), 0.05);
1:c31a625:   }
1:c31a625: 
1:c31a625:   @Test
1:88848ae:   public void testEntropy() {
1:88848ae:     Auc auc = new Auc();
1:88848ae:     Random gen = RandomUtils.getRandom();
1:88848ae:     Normal n0 = new Normal(-1, 1, gen);
1:88848ae:     Normal n1 = new Normal(1, 1, gen);
1:e64dd36:     for (int i=0; i<100000; i++) {
1:88848ae:       double score = n0.nextDouble();
1:88848ae:       double p = n1.pdf(score) / (n0.pdf(score) + n1.pdf(score));
1:88848ae:       auc.add(0, p);
1:88848ae: 
1:88848ae:       score = n1.nextDouble();
1:88848ae:       p = n1.pdf(score) / (n0.pdf(score) + n1.pdf(score));
1:88848ae:       auc.add(1, p);
1:88848ae:     }
1:88848ae:     Matrix m = auc.entropy();
1:88848ae:     assertEquals(-0.35, m.get(0, 0), 0.02);
1:2deba36:     assertEquals(-2.36, m.get(0, 1), 0.02);
1:2deba36:     assertEquals(-2.36, m.get(1, 0), 0.02);
1:88848ae:     assertEquals(-0.35, m.get(1, 1), 0.02);
1:88848ae:   }
1:88848ae: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2deba36
/////////////////////////////////////////////////////////////////////////
1: public final class AucTest extends MahoutTestCase {
1: 
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(-2.36, m.get(0, 1), 0.02);
1:     assertEquals(-2.36, m.get(1, 0), 0.02);
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     for (int i=0; i<100000; i++) {
/////////////////////////////////////////////////////////////////////////
1:     for (int i=0; i<100000; i++) {
/////////////////////////////////////////////////////////////////////////
1:     for (int i=0; i<100000; i++) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:c31a625
/////////////////////////////////////////////////////////////////////////
1:   public void testTies() {
1:     Auc auc = new Auc();
1:     Random gen = RandomUtils.getRandom();
1:     auc.setProbabilityScore(false);
0:     for (int i=0;i<100000;i++) {
1:       auc.add(0, gen.nextGaussian());
1:       auc.add(1, gen.nextGaussian() + 1);
1:     }
1: 
1:     // ties outside the normal range could cause index out of range
1:     auc.add(0, 5.0);
1:     auc.add(0, 5.0);
1:     auc.add(0, 5.0);
1:     auc.add(0, 5.0);
1: 
1:     auc.add(1, 5.0);
1:     auc.add(1, 5.0);
1:     auc.add(1, 5.0);
1: 
1:     assertEquals(0.76, auc.auc(), 0.05);
1:   }
1: 
1:   @Test
commit:88848ae
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.evaluation;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.jet.random.Normal;
1: import org.junit.Test;
1: 
1: import java.util.Random;
1: 
0: public class AucTest extends MahoutTestCase{
1:   @Test
1:   public void testAuc() {
1:     Auc auc = new Auc();
1:     Random gen = RandomUtils.getRandom();
1:     auc.setProbabilityScore(false);
0:     for (int i=0;i<100000;i++) {
1:       auc.add(0, gen.nextGaussian());
1:       auc.add(1, gen.nextGaussian() + 1);
1:     }
1:     assertEquals(0.76, auc.auc(), 0.01);
1:   }
1: 
1:   @Test
1:   public void testEntropy() {
1:     Auc auc = new Auc();
1:     Random gen = RandomUtils.getRandom();
1:     Normal n0 = new Normal(-1, 1, gen);
1:     Normal n1 = new Normal(1, 1, gen);
0:     for (int i=0;i<100000;i++) {
1:       double score = n0.nextDouble();
1:       double p = n1.pdf(score) / (n0.pdf(score) + n1.pdf(score));
1:       auc.add(0, p);
1: 
1:       score = n1.nextDouble();
1:       p = n1.pdf(score) / (n0.pdf(score) + n1.pdf(score));
1:       auc.add(1, p);
1:     }
1:     Matrix m = auc.entropy();
1:     assertEquals(-0.35, m.get(0, 0), 0.02);
0:     assertEquals(-2.34, m.get(0, 1), 0.02);
0:     assertEquals(-2.34, m.get(1, 0), 0.02);
1:     assertEquals(-0.35, m.get(1, 1), 0.02);
1:   }
1: }
commit:f4c8f73
commit:91456bb
============================================================================