1:1e898e7: /**
1:1e898e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1e898e7:  * contributor license agreements.  See the NOTICE file distributed with
1:1e898e7:  * this work for additional information regarding copyright ownership.
1:1e898e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1e898e7:  * (the "License"); you may not use this file except in compliance with
1:1e898e7:  * the License.  You may obtain a copy of the License at
1:1e898e7:  *
1:1e898e7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1e898e7:  *
1:1e898e7:  * Unless required by applicable law or agreed to in writing, software
1:1e898e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1e898e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1e898e7:  * See the License for the specific language governing permissions and
1:1e898e7:  * limitations under the License.
1:1e898e7:  */
4:1e898e7: 
1:1e898e7: package org.apache.mahout.cf.taste.impl.similarity.precompute;
1:1e898e7: 
1:9b6b236: import com.google.common.io.Closeables;
1:1e898e7: import org.apache.mahout.cf.taste.common.TasteException;
1:1e898e7: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:1e898e7: import org.apache.mahout.cf.taste.model.DataModel;
1:1e898e7: import org.apache.mahout.cf.taste.recommender.ItemBasedRecommender;
1:1e898e7: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:1e898e7: import org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities;
1:1e898e7: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItems;
1:1e898e7: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItemsWriter;
1:1e898e7: import org.slf4j.Logger;
1:1e898e7: import org.slf4j.LoggerFactory;
1:1e898e7: 
1:9b6b236: import java.io.IOException;
1:9b6b236: import java.util.ArrayList;
1:9b6b236: import java.util.List;
1:9b6b236: import java.util.concurrent.BlockingQueue;
1:9b6b236: import java.util.concurrent.ExecutorService;
1:9b6b236: import java.util.concurrent.Executors;
1:9b6b236: import java.util.concurrent.LinkedBlockingQueue;
1:9b6b236: import java.util.concurrent.TimeUnit;
1:9b6b236: import java.util.concurrent.atomic.AtomicInteger;
1:9b6b236: 
1:1e898e7: /**
1:1e898e7:  * Precompute item similarities in parallel on a single machine. The recommender given to this class must use a
1:1e898e7:  * DataModel that holds the interactions in memory (such as
1:1e898e7:  * {@link org.apache.mahout.cf.taste.impl.model.GenericDataModel} or
1:1e898e7:  * {@link org.apache.mahout.cf.taste.impl.model.file.FileDataModel}) as fast random access to the data is required
1:1e898e7:  */
1:1e898e7: public class MultithreadedBatchItemSimilarities extends BatchItemSimilarities {
1:87d4b2e: 
1:1e898e7:   private int batchSize;
1:1e898e7: 
1:1e898e7:   private static final int DEFAULT_BATCH_SIZE = 100;
1:1e898e7: 
1:1e898e7:   private static final Logger log = LoggerFactory.getLogger(MultithreadedBatchItemSimilarities.class);
1:1e898e7: 
1:1e898e7:   /**
1:1e898e7:    * @param recommender recommender to use
1:1e898e7:    * @param similarItemsPerItem number of similar items to compute per item
1:1e898e7:    */
1:1e898e7:   public MultithreadedBatchItemSimilarities(ItemBasedRecommender recommender, int similarItemsPerItem) {
1:1e898e7:     this(recommender, similarItemsPerItem, DEFAULT_BATCH_SIZE);
1:1e898e7:   }
1:1e898e7: 
1:1e898e7:   /**
1:1e898e7:    * @param recommender recommender to use
1:1e898e7:    * @param similarItemsPerItem number of similar items to compute per item
1:1e898e7:    * @param batchSize size of item batches sent to worker threads
1:1e898e7:    */
1:1e898e7:   public MultithreadedBatchItemSimilarities(ItemBasedRecommender recommender, int similarItemsPerItem, int batchSize) {
1:1e898e7:     super(recommender, similarItemsPerItem);
1:1e898e7:     this.batchSize = batchSize;
1:1e898e7:   }
1:1e898e7: 
1:1e898e7:   @Override
1:1e898e7:   public int computeItemSimilarities(int degreeOfParallelism, int maxDurationInHours, SimilarItemsWriter writer)
1:6d16230:     throws IOException {
1:1e898e7: 
1:1e898e7:     ExecutorService executorService = Executors.newFixedThreadPool(degreeOfParallelism + 1);
1:1e898e7: 
1:1e898e7:     Output output = null;
1:1e898e7:     try {
1:1e898e7:       writer.open();
1:1e898e7: 
1:1e898e7:       DataModel dataModel = getRecommender().getDataModel();
1:1e898e7: 
1:84a4bce:       BlockingQueue<long[]> itemsIDsInBatches = queueItemIDsInBatches(dataModel, batchSize, degreeOfParallelism);
1:87c15be:       BlockingQueue<List<SimilarItems>> results = new LinkedBlockingQueue<>();
1:1e898e7: 
1:1e898e7:       AtomicInteger numActiveWorkers = new AtomicInteger(degreeOfParallelism);
1:1e898e7:       for (int n = 0; n < degreeOfParallelism; n++) {
1:1e898e7:         executorService.execute(new SimilarItemsWorker(n, itemsIDsInBatches, results, numActiveWorkers));
1:1e898e7:       }
1:1e898e7: 
1:1e898e7:       output = new Output(results, writer, numActiveWorkers);
1:1e898e7:       executorService.execute(output);
1:1e898e7: 
1:1e898e7:     } catch (Exception e) {
1:1e898e7:       throw new IOException(e);
1:1e898e7:     } finally {
1:1e898e7:       executorService.shutdown();
1:1e898e7:       try {
1:1e898e7:         boolean succeeded = executorService.awaitTermination(maxDurationInHours, TimeUnit.HOURS);
1:1e898e7:         if (!succeeded) {
1:1e898e7:           throw new RuntimeException("Unable to complete the computation in " + maxDurationInHours + " hours!");
1:1e898e7:         }
1:1e898e7:       } catch (InterruptedException e) {
1:1e898e7:         throw new RuntimeException(e);
1:1e898e7:       }
1:9b6b236:       Closeables.close(writer, false);
1:1e898e7:     }
1:1e898e7: 
1:1e898e7:     return output.getNumSimilaritiesProcessed();
1:1e898e7:   }
1:1e898e7: 
1:84a4bce:   private static BlockingQueue<long[]> queueItemIDsInBatches(DataModel dataModel, int batchSize,
1:9b6b236:                                                              int degreeOfParallelism)
1:9b6b236:       throws TasteException {
1:1e898e7: 
1:1e898e7:     LongPrimitiveIterator itemIDs = dataModel.getItemIDs();
1:1e898e7:     int numItems = dataModel.getNumItems();
1:1e898e7: 
1:87c15be:     BlockingQueue<long[]> itemIDBatches = new LinkedBlockingQueue<>((numItems / batchSize) + 1);
1:1e898e7: 
1:1e898e7:     long[] batch = new long[batchSize];
1:1e898e7:     int pos = 0;
1:1e898e7:     while (itemIDs.hasNext()) {
1:84a4bce:       batch[pos] = itemIDs.nextLong();
1:84a4bce:       pos++;
1:1e898e7:       if (pos == batchSize) {
1:1e898e7:         itemIDBatches.add(batch.clone());
1:1e898e7:         pos = 0;
1:1e898e7:       }
1:1e898e7:     }
1:84a4bce: 
1:84a4bce:     if (pos > 0) {
1:84a4bce:       long[] lastBatch = new long[pos];
1:84a4bce:       System.arraycopy(batch, 0, lastBatch, 0, pos);
1:1e898e7:       itemIDBatches.add(lastBatch);
1:1e898e7:     }
1:1e898e7: 
1:84a4bce:     if (itemIDBatches.size() < degreeOfParallelism) {
1:84a4bce:       throw new IllegalStateException("Degree of parallelism [" + degreeOfParallelism + "] " +
1:84a4bce:           " is larger than number of batches [" + itemIDBatches.size() +"].");
1:84a4bce:     }
1:84a4bce: 
1:1e898e7:     log.info("Queued {} items in {} batches", numItems, itemIDBatches.size());
1:1e898e7: 
1:1e898e7:     return itemIDBatches;
1:1e898e7:   }
1:1e898e7: 
1:1e898e7: 
1:bdb1c48:   private static class Output implements Runnable {
1:1e898e7: 
1:1e898e7:     private final BlockingQueue<List<SimilarItems>> results;
1:1e898e7:     private final SimilarItemsWriter writer;
1:1e898e7:     private final AtomicInteger numActiveWorkers;
1:1e898e7:     private int numSimilaritiesProcessed = 0;
1:1e898e7: 
1:1e898e7:     Output(BlockingQueue<List<SimilarItems>> results, SimilarItemsWriter writer, AtomicInteger numActiveWorkers) {
1:1e898e7:       this.results = results;
1:1e898e7:       this.writer = writer;
1:1e898e7:       this.numActiveWorkers = numActiveWorkers;
1:1e898e7:     }
1:1e898e7: 
1:1e898e7:     private int getNumSimilaritiesProcessed() {
1:1e898e7:       return numSimilaritiesProcessed;
1:1e898e7:     }
1:1e898e7: 
1:1e898e7:     @Override
1:1e898e7:     public void run() {
1:cd366d1:       while (numActiveWorkers.get() != 0 || !results.isEmpty()) {
1:1e898e7:         try {
1:1e898e7:           List<SimilarItems> similarItemsOfABatch = results.poll(10, TimeUnit.MILLISECONDS);
1:1e898e7:           if (similarItemsOfABatch != null) {
1:1e898e7:             for (SimilarItems similarItems : similarItemsOfABatch) {
1:1e898e7:               writer.add(similarItems);
1:1e898e7:               numSimilaritiesProcessed += similarItems.numSimilarItems();
1:1e898e7:             }
1:1e898e7:           }
1:1e898e7:         } catch (Exception e) {
1:1e898e7:           throw new RuntimeException(e);
1:1e898e7:         }
1:1e898e7:       }
1:1e898e7:     }
1:1e898e7:   }
1:1e898e7: 
1:1e898e7:   private class SimilarItemsWorker implements Runnable {
1:1e898e7: 
1:1e898e7:     private final int number;
1:1e898e7:     private final BlockingQueue<long[]> itemIDBatches;
1:1e898e7:     private final BlockingQueue<List<SimilarItems>> results;
1:1e898e7:     private final AtomicInteger numActiveWorkers;
1:1e898e7: 
1:1e898e7:     SimilarItemsWorker(int number, BlockingQueue<long[]> itemIDBatches, BlockingQueue<List<SimilarItems>> results,
1:1e898e7:         AtomicInteger numActiveWorkers) {
1:1e898e7:       this.number = number;
1:1e898e7:       this.itemIDBatches = itemIDBatches;
1:1e898e7:       this.results = results;
1:1e898e7:       this.numActiveWorkers = numActiveWorkers;
1:1e898e7:     }
1:1e898e7: 
1:1e898e7:     @Override
1:1e898e7:     public void run() {
1:1e898e7: 
1:1e898e7:       int numBatchesProcessed = 0;
1:1e898e7:       while (!itemIDBatches.isEmpty()) {
1:1e898e7:         try {
1:1e898e7:           long[] itemIDBatch = itemIDBatches.take();
1:1e898e7: 
1:cd366d1:           List<SimilarItems> similarItemsOfBatch = new ArrayList<>(itemIDBatch.length);
1:1e898e7:           for (long itemID : itemIDBatch) {
1:1e898e7:             List<RecommendedItem> similarItems = getRecommender().mostSimilarItems(itemID, getSimilarItemsPerItem());
1:1e898e7:             similarItemsOfBatch.add(new SimilarItems(itemID, similarItems));
1:1e898e7:           }
1:1e898e7: 
1:1e898e7:           results.offer(similarItemsOfBatch);
1:1e898e7: 
1:1e898e7:           if (++numBatchesProcessed % 5 == 0) {
1:1e898e7:             log.info("worker {} processed {} batches", number, numBatchesProcessed);
1:1e898e7:           }
1:1e898e7: 
1:1e898e7:         } catch (Exception e) {
1:1e898e7:           throw new RuntimeException(e);
1:1e898e7:         }
1:1e898e7:       }
1:1e898e7:       log.info("worker {} processed {} batches. done.", number, numBatchesProcessed);
1:1e898e7:       numActiveWorkers.decrementAndGet();
1:1e898e7:     }
1:1e898e7:   }
1:1e898e7: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:9b6b236
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(writer, false);
1:                                                              int degreeOfParallelism)
1:       throws TasteException {
/////////////////////////////////////////////////////////////////////////
commit:cd366d1
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
0:       writer.close();
/////////////////////////////////////////////////////////////////////////
1:       while (numActiveWorkers.get() != 0 || !results.isEmpty()) {
/////////////////////////////////////////////////////////////////////////
1:           List<SimilarItems> similarItemsOfBatch = new ArrayList<>(itemIDBatch.length);
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       BlockingQueue<List<SimilarItems>> results = new LinkedBlockingQueue<>();
/////////////////////////////////////////////////////////////////////////
1:     BlockingQueue<long[]> itemIDBatches = new LinkedBlockingQueue<>((numItems / batchSize) + 1);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:ssc
-------------------------------------------------------------------------------
commit:84a4bce
/////////////////////////////////////////////////////////////////////////
1:       BlockingQueue<long[]> itemsIDsInBatches = queueItemIDsInBatches(dataModel, batchSize, degreeOfParallelism);
/////////////////////////////////////////////////////////////////////////
1:   private static BlockingQueue<long[]> queueItemIDsInBatches(DataModel dataModel, int batchSize,
0:       int degreeOfParallelism) throws TasteException {
/////////////////////////////////////////////////////////////////////////
1:       batch[pos] = itemIDs.nextLong();
1:       pos++;
1: 
1:     if (pos > 0) {
1:       long[] lastBatch = new long[pos];
1:       System.arraycopy(batch, 0, lastBatch, 0, pos);
1:     if (itemIDBatches.size() < degreeOfParallelism) {
1:       throw new IllegalStateException("Degree of parallelism [" + degreeOfParallelism + "] " +
1:           " is larger than number of batches [" + itemIDBatches.size() +"].");
1:     }
1: 
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.List;
0: import java.util.concurrent.BlockingQueue;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.LinkedBlockingQueue;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicInteger;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
0:   private static BlockingQueue<long[]> queueItemIDsInBatches(DataModel dataModel, int batchSize) throws TasteException {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:   private static class Output implements Runnable {
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     throws IOException {
commit:1e898e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.similarity.precompute;
1: 
0: import com.google.common.collect.Lists;
0: import com.google.common.io.Closeables;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.recommender.ItemBasedRecommender;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: import org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities;
1: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItems;
1: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItemsWriter;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.io.IOException;
0: import java.util.List;
0: import java.util.concurrent.BlockingQueue;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.LinkedBlockingQueue;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
1:  * Precompute item similarities in parallel on a single machine. The recommender given to this class must use a
1:  * DataModel that holds the interactions in memory (such as
1:  * {@link org.apache.mahout.cf.taste.impl.model.GenericDataModel} or
1:  * {@link org.apache.mahout.cf.taste.impl.model.file.FileDataModel}) as fast random access to the data is required
1:  */
1: public class MultithreadedBatchItemSimilarities extends BatchItemSimilarities {
1: 
1:   private int batchSize;
1: 
1:   private static final int DEFAULT_BATCH_SIZE = 100;
1: 
1:   private static final Logger log = LoggerFactory.getLogger(MultithreadedBatchItemSimilarities.class);
1: 
1:   /**
1:    * @param recommender recommender to use
1:    * @param similarItemsPerItem number of similar items to compute per item
1:    */
1:   public MultithreadedBatchItemSimilarities(ItemBasedRecommender recommender, int similarItemsPerItem) {
1:     this(recommender, similarItemsPerItem, DEFAULT_BATCH_SIZE);
1:   }
1: 
1:   /**
1:    * @param recommender recommender to use
1:    * @param similarItemsPerItem number of similar items to compute per item
1:    * @param batchSize size of item batches sent to worker threads
1:    */
1:   public MultithreadedBatchItemSimilarities(ItemBasedRecommender recommender, int similarItemsPerItem, int batchSize) {
1:     super(recommender, similarItemsPerItem);
1:     this.batchSize = batchSize;
1:   }
1: 
1:   @Override
1:   public int computeItemSimilarities(int degreeOfParallelism, int maxDurationInHours, SimilarItemsWriter writer)
0:       throws IOException {
1: 
1:     ExecutorService executorService = Executors.newFixedThreadPool(degreeOfParallelism + 1);
1: 
1:     Output output = null;
1:     try {
1:       writer.open();
1: 
1:       DataModel dataModel = getRecommender().getDataModel();
1: 
0:       BlockingQueue<long[]> itemsIDsInBatches = queueItemIDsInBatches(dataModel, batchSize);
0:       BlockingQueue<List<SimilarItems>> results = new LinkedBlockingQueue<List<SimilarItems>>();
1: 
1:       AtomicInteger numActiveWorkers = new AtomicInteger(degreeOfParallelism);
1:       for (int n = 0; n < degreeOfParallelism; n++) {
1:         executorService.execute(new SimilarItemsWorker(n, itemsIDsInBatches, results, numActiveWorkers));
1:       }
1: 
1:       output = new Output(results, writer, numActiveWorkers);
1:       executorService.execute(output);
1: 
1:     } catch (Exception e) {
1:       throw new IOException(e);
1:     } finally {
1:       executorService.shutdown();
1:       try {
1:         boolean succeeded = executorService.awaitTermination(maxDurationInHours, TimeUnit.HOURS);
1:         if (!succeeded) {
1:           throw new RuntimeException("Unable to complete the computation in " + maxDurationInHours + " hours!");
1:         }
1:       } catch (InterruptedException e) {
1:         throw new RuntimeException(e);
1:       }
0:       Closeables.closeQuietly(writer);
1:     }
1: 
1:     return output.getNumSimilaritiesProcessed();
1:   }
1: 
0:   private BlockingQueue<long[]> queueItemIDsInBatches(DataModel dataModel, int batchSize) throws TasteException {
1: 
1:     LongPrimitiveIterator itemIDs = dataModel.getItemIDs();
1:     int numItems = dataModel.getNumItems();
1: 
0:     BlockingQueue<long[]> itemIDBatches = new LinkedBlockingQueue<long[]>((numItems / batchSize) + 1);
1: 
1:     long[] batch = new long[batchSize];
1:     int pos = 0;
1:     while (itemIDs.hasNext()) {
1:       if (pos == batchSize) {
1:         itemIDBatches.add(batch.clone());
1:         pos = 0;
1:       }
0:       batch[pos] = itemIDs.nextLong();
0:       pos++;
1:     }
0:     int nonQueuedItemIDs = batchSize - pos;
0:     if (nonQueuedItemIDs > 0) {
0:       long[] lastBatch = new long[nonQueuedItemIDs];
0:       System.arraycopy(batch, 0, lastBatch, 0, nonQueuedItemIDs);
1:       itemIDBatches.add(lastBatch);
1:     }
1: 
1:     log.info("Queued {} items in {} batches", numItems, itemIDBatches.size());
1: 
1:     return itemIDBatches;
1:   }
1: 
1: 
0:   private class Output implements Runnable {
1: 
1:     private final BlockingQueue<List<SimilarItems>> results;
1:     private final SimilarItemsWriter writer;
1:     private final AtomicInteger numActiveWorkers;
1:     private int numSimilaritiesProcessed = 0;
1: 
1:     Output(BlockingQueue<List<SimilarItems>> results, SimilarItemsWriter writer, AtomicInteger numActiveWorkers) {
1:       this.results = results;
1:       this.writer = writer;
1:       this.numActiveWorkers = numActiveWorkers;
1:     }
1: 
1:     private int getNumSimilaritiesProcessed() {
1:       return numSimilaritiesProcessed;
1:     }
1: 
1:     @Override
1:     public void run() {
0:       while (numActiveWorkers.get() != 0) {
1:         try {
1:           List<SimilarItems> similarItemsOfABatch = results.poll(10, TimeUnit.MILLISECONDS);
1:           if (similarItemsOfABatch != null) {
1:             for (SimilarItems similarItems : similarItemsOfABatch) {
1:               writer.add(similarItems);
1:               numSimilaritiesProcessed += similarItems.numSimilarItems();
1:             }
1:           }
1:         } catch (Exception e) {
1:           throw new RuntimeException(e);
1:         }
1:       }
1:     }
1:   }
1: 
1:   private class SimilarItemsWorker implements Runnable {
1: 
1:     private final int number;
1:     private final BlockingQueue<long[]> itemIDBatches;
1:     private final BlockingQueue<List<SimilarItems>> results;
1:     private final AtomicInteger numActiveWorkers;
1: 
1:     SimilarItemsWorker(int number, BlockingQueue<long[]> itemIDBatches, BlockingQueue<List<SimilarItems>> results,
1:         AtomicInteger numActiveWorkers) {
1:       this.number = number;
1:       this.itemIDBatches = itemIDBatches;
1:       this.results = results;
1:       this.numActiveWorkers = numActiveWorkers;
1:     }
1: 
1:     @Override
1:     public void run() {
1: 
1:       int numBatchesProcessed = 0;
1:       while (!itemIDBatches.isEmpty()) {
1:         try {
1:           long[] itemIDBatch = itemIDBatches.take();
1: 
0:           List<SimilarItems> similarItemsOfBatch = Lists.newArrayListWithCapacity(itemIDBatch.length);
1:           for (long itemID : itemIDBatch) {
1:             List<RecommendedItem> similarItems = getRecommender().mostSimilarItems(itemID, getSimilarItemsPerItem());
1: 
1:             similarItemsOfBatch.add(new SimilarItems(itemID, similarItems));
1:           }
1: 
1:           results.offer(similarItemsOfBatch);
1: 
1:           if (++numBatchesProcessed % 5 == 0) {
1:             log.info("worker {} processed {} batches", number, numBatchesProcessed);
1:           }
1: 
1:         } catch (Exception e) {
1:           throw new RuntimeException(e);
1:         }
1:       }
1:       log.info("worker {} processed {} batches. done.", number, numBatchesProcessed);
1:       numActiveWorkers.decrementAndGet();
1:     }
1:   }
1: }
============================================================================