1:763433c: /*
1:763433c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:763433c:  * contributor license agreements.  See the NOTICE file distributed with
1:763433c:  * this work for additional information regarding copyright ownership.
1:763433c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:763433c:  * (the "License"); you may not use this file except in compliance with
1:763433c:  * the License.  You may obtain a copy of the License at
1:763433c:  *
1:763433c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:763433c:  *
1:763433c:  * Unless required by applicable law or agreed to in writing, software
1:763433c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:763433c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:763433c:  * See the License for the specific language governing permissions and
1:763433c:  * limitations under the License.
1:763433c:  */
1:763433c: 
1:763433c: package org.apache.mahout.math.stats;
1:763433c: 
1:763433c: /**
1:763433c:  * Computes an online average that is exponentially weighted toward recent time-embedded samples.
1:763433c:  */
1:763433c: public class OnlineExponentialAverage {
1:39fe224: 
1:b16c260:   private final double alpha;
1:39fe224:   private double lastT;
1:39fe224:   private double s;
1:39fe224:   private double w;
1:39fe224:   private double t;
1:763433c: 
1:763433c:   /**
1:763433c:    * Creates an averager that has a specified time constant for discounting old data. The time
1:763433c:    * constant, alpha, is the time at which an older sample is discounted to 1/e relative to current
1:763433c:    * data.  Roughly speaking, data that is more than 3*alpha old doesn't matter any more and data
1:763433c:    * that is more recent than alpha/3 is about as important as current data.
1:763433c:    *
1:763433c:    * See http://tdunning.blogspot.com/2011/03/exponential-weighted-averages-with.html for a
1:763433c:    * derivation.  See http://tdunning.blogspot.com/2011/03/exponentially-weighted-averaging-for.html
1:763433c:    * for the rate method.
1:763433c:    *
1:763433c:    * @param alpha The time constant for discounting old data and state.
1:763433c:    */
1:763433c:   public OnlineExponentialAverage(double alpha) {
1:763433c:     this.alpha = alpha;
1:763433c:   }
1:763433c: 
1:763433c:   public void add(double t, double x) {
1:763433c:     double pi = Math.exp(-(t - lastT) / alpha);
1:763433c:     s = x + pi * s;
1:39fe224:     w = 1.0 + pi * w;
1:39fe224:     this.t = t - lastT + pi * this.t;
1:763433c:     lastT = t;
1:763433c:   }
1:763433c: 
1:763433c:   public double mean() {
1:763433c:     return s / w;
1:763433c:   }
1:763433c: 
1:763433c:   public double meanRate() {
1:39fe224:     return s / t;
1:763433c:   }
1:763433c: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1: 
1:   private double lastT;
1:   private double s;
1:   private double w;
1:   private double t;
/////////////////////////////////////////////////////////////////////////
1:     w = 1.0 + pi * w;
1:     this.t = t - lastT + pi * this.t;
/////////////////////////////////////////////////////////////////////////
1:     return s / t;
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:   private final double alpha;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:763433c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.stats;
1: 
1: /**
1:  * Computes an online average that is exponentially weighted toward recent time-embedded samples.
1:  */
1: public class OnlineExponentialAverage {
0:   private double alpha;
0:   private double lastT = 0;
0:   private double s = 0;
0:   private double w = 0;
0:   private double T = 0;
1: 
1:   /**
1:    * Creates an averager that has a specified time constant for discounting old data. The time
1:    * constant, alpha, is the time at which an older sample is discounted to 1/e relative to current
1:    * data.  Roughly speaking, data that is more than 3*alpha old doesn't matter any more and data
1:    * that is more recent than alpha/3 is about as important as current data.
1:    *
1:    * See http://tdunning.blogspot.com/2011/03/exponential-weighted-averages-with.html for a
1:    * derivation.  See http://tdunning.blogspot.com/2011/03/exponentially-weighted-averaging-for.html
1:    * for the rate method.
1:    *
1:    * @param alpha The time constant for discounting old data and state.
1:    */
1:   public OnlineExponentialAverage(double alpha) {
1:     this.alpha = alpha;
1:   }
1: 
1:   public void add(double t, double x) {
1:     double pi = Math.exp(-(t - lastT) / alpha);
1:     s = x + pi * s;
0:     w = 1 + pi * w;
0:     T = (t - lastT) + pi * T;
1:     lastT = t;
1:   }
1: 
1:   public double mean() {
1:     return s / w;
1:   }
1: 
1:   public double meanRate() {
0:     return s / T;
1:   }
1: }
============================================================================