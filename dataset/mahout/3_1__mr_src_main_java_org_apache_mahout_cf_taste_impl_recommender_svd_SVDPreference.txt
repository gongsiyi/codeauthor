1:2f4ac68: /**
1:2f4ac68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2f4ac68:  * contributor license agreements.  See the NOTICE file distributed with
1:2f4ac68:  * this work for additional information regarding copyright ownership.
1:2f4ac68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2f4ac68:  * (the "License"); you may not use this file except in compliance with
1:2f4ac68:  * the License.  You may obtain a copy of the License at
1:2f4ac68:  *
1:2f4ac68:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2f4ac68:  *
1:2f4ac68:  * Unless required by applicable law or agreed to in writing, software
1:2f4ac68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f4ac68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f4ac68:  * See the License for the specific language governing permissions and
1:2f4ac68:  * limitations under the License.
1:2f4ac68:  */
1:2f4ac68: 
1:2f4ac68: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:2f4ac68: 
1:2f4ac68: import com.google.common.base.Preconditions;
1:2f4ac68: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1:2f4ac68: 
1:2f4ac68: final class SVDPreference extends GenericPreference {
1:2f4ac68: 
1:2f4ac68:   private double cache;
1:2f4ac68: 
1:2f4ac68:   SVDPreference(long userID, long itemID, float value, double cache) {
1:2f4ac68:     super(userID, itemID, value);
1:9ceb097:     setCache(cache);
1:2f4ac68:   }
1:2f4ac68: 
1:2f4ac68:   public double getCache() {
1:2f4ac68:     return cache;
1:2f4ac68:   }
1:2f4ac68: 
1:2f4ac68:   public void setCache(double value) {
1:9ceb097:     Preconditions.checkArgument(!Double.isNaN(value), "NaN cache value");
1:2f4ac68:     this.cache = value;
1:2f4ac68:   }
1:2f4ac68: 
1:2f4ac68: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:9ceb097
/////////////////////////////////////////////////////////////////////////
1:     setCache(cache);
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(!Double.isNaN(value), "NaN cache value");
commit:2f4ac68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1: 
1: final class SVDPreference extends GenericPreference {
1: 
1:   private double cache;
1: 
1:   SVDPreference(long userID, long itemID, float value, double cache) {
1:     super(userID, itemID, value);
0:     Preconditions.checkArgument(!Double.isNaN(cache), "Invalid cache value: " + cache);
0:     this.cache = cache;
1:   }
1: 
1:   public double getCache() {
1:     return cache;
1:   }
1: 
1:   public void setCache(double value) {
0:     Preconditions.checkArgument(!Double.isNaN(value), "Invalid cache value: " + value);
1:     this.cache = value;
1:   }
1: 
1: }
============================================================================