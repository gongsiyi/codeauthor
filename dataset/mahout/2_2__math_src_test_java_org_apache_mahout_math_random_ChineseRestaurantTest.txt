1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
2:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
2:a07bfc3:  */
5:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import com.google.common.collect.HashMultiset;
1:a07bfc3: import com.google.common.collect.ImmutableSet;
1:a07bfc3: import com.google.common.collect.Lists;
1:a07bfc3: import com.google.common.collect.Multiset;
1:a07bfc3: import org.apache.mahout.math.DenseMatrix;
1:a07bfc3: import org.apache.mahout.math.DenseVector;
1:8b6a26a: import org.apache.mahout.math.MahoutTestCase;
1:a07bfc3: import org.apache.mahout.math.Matrix;
1:a07bfc3: import org.apache.mahout.math.QRDecomposition;
1:a07bfc3: import org.junit.Test;
1:a07bfc3: 
1:a07bfc3: import java.util.Collections;
1:a07bfc3: import java.util.List;
1:a07bfc3: import java.util.Set;
1:a07bfc3: 
1:2deba36: public final class ChineseRestaurantTest extends MahoutTestCase {
1:a07bfc3: 
1:2deba36:   @Test
1:2deba36:   public void testDepth() {
1:2deba36:     List<Integer> totals = Lists.newArrayList();
1:2deba36:     for (int i = 0; i < 1000; i++) {
1:2deba36:       ChineseRestaurant x = new ChineseRestaurant(10);
1:2deba36:       Multiset<Integer> counts = HashMultiset.create();
1:2deba36:       for (int j = 0; j < 100; j++) {
1:2deba36:         counts.add(x.sample());
1:2deba36:       }
1:2deba36:       List<Integer> tmp = Lists.newArrayList();
1:2deba36:       for (Integer k : counts.elementSet()) {
1:2deba36:         tmp.add(counts.count(k));
1:2deba36:       }
1:2deba36:       Collections.sort(tmp, Collections.reverseOrder());
1:2deba36:       while (totals.size() < tmp.size()) {
1:2deba36:         totals.add(0);
1:2deba36:       }
1:2deba36:       int j = 0;
1:2deba36:       for (Integer k : tmp) {
1:2deba36:         totals.set(j, totals.get(j) + k);
1:2deba36:         j++;
1:2deba36:       }
14:a07bfc3:     }
1:a07bfc3: 
1:2deba36:     // these are empirically derived values, not principled ones
1:2deba36:     assertEquals(25000.0, (double) totals.get(0), 1000);
1:2deba36:     assertEquals(24000.0, (double) totals.get(1), 1000);
1:2deba36:     assertEquals(8000.0, (double) totals.get(2), 200);
1:2deba36:     assertEquals(1000.0, (double) totals.get(15), 50);
1:2deba36:     assertEquals(1000.0, (double) totals.get(20), 40);
1:2deba36:   }
1:2deba36: 
1:2deba36:   @Test
1:2deba36:   public void testExtremeDiscount() {
1:2deba36:     ChineseRestaurant x = new ChineseRestaurant(100, 1);
1:2deba36:     Multiset<Integer> counts = HashMultiset.create();
1:2deba36:     for (int i = 0; i < 10000; i++) {
1:2deba36:       counts.add(x.sample());
1:a07bfc3:     }
1:2deba36:     assertEquals(10000, x.size());
1:2deba36:     for (int i = 0; i < 10000; i++) {
1:2deba36:       assertEquals(1, x.count(i));
1:2deba36:     }
1:2deba36:   }
1:a07bfc3: 
1:2deba36:   @Test
1:2deba36:   public void testGrowth() {
1:2deba36:     ChineseRestaurant s0 = new ChineseRestaurant(10, 0.0);
1:2deba36:     ChineseRestaurant s5 = new ChineseRestaurant(10, 0.5);
1:2deba36:     ChineseRestaurant s9 = new ChineseRestaurant(10, 0.9);
1:2deba36:     Set<Double> splits = ImmutableSet.of(1.0, 1.5, 2.0, 3.0, 5.0, 8.0);
1:a07bfc3: 
1:2deba36:     double offset0 = 0;
1:2deba36:     int k = 0;
1:2deba36:     int i = 0;
1:2deba36:     Matrix m5 = new DenseMatrix(20, 3);
1:2deba36:     Matrix m9 = new DenseMatrix(20, 3);
1:2deba36:     while (i <= 200000) {
1:2deba36:       double n = i / Math.pow(10, Math.floor(Math.log10(i)));
1:2deba36:       if (splits.contains(n)) {
1:2deba36:         //System.out.printf("%d\t%d\t%d\t%d\n", i, s0.size(), s5.size(), s9.size());
1:2deba36:         if (i > 900) {
1:2deba36:           double predict5 = predictSize(m5.viewPart(0, k, 0, 3), i, 0.5);
1:2deba36:           assertEquals(predict5, Math.log(s5.size()), 1);
1:a07bfc3: 
1:2deba36:           double predict9 = predictSize(m9.viewPart(0, k, 0, 3), i, 0.9);
1:2deba36:           assertEquals(predict9, Math.log(s9.size()), 1);
1:a07bfc3: 
1:2deba36:           //assertEquals(10.5 * Math.log(i) - offset0, s0.size(), 10);
1:2deba36:         } else if (i > 50) {
1:2deba36:           double x = 10.5 * Math.log(i) - s0.size();
1:2deba36:           m5.viewRow(k).assign(new double[]{Math.log(s5.size()), Math.log(i), 1});
1:2deba36:           m9.viewRow(k).assign(new double[]{Math.log(s9.size()), Math.log(i), 1});
1:a07bfc3: 
1:2deba36:           k++;
1:2deba36:           offset0 += (x - offset0) / k;
1:a07bfc3:         }
1:2deba36:         if (i > 10000) {
1:2deba36:           assertEquals(0.0, (double) hapaxCount(s0) / s0.size(), 0.25);
1:2deba36:           assertEquals(0.5, (double) hapaxCount(s5) / s5.size(), 0.1);
1:2deba36:           assertEquals(0.9, (double) hapaxCount(s9) / s9.size(), 0.05);
1:2deba36:         }
1:a07bfc3:       }
1:2deba36:       s0.sample();
1:2deba36:       s5.sample();
1:2deba36:       s9.sample();
1:2deba36:       i++;
1:2deba36:     }
1:a07bfc3:   }
1:2deba36: 
1:2deba36:   /**
1:2deba36:    * Predict the power law growth in number of unique samples from the first few data points.
1:2deba36:    * Also check that the fitted growth coefficient is about right.
1:2deba36:    *
1:2deba36:    * @param m
1:2deba36:    * @param currentIndex        Total data points seen so far.  Unique values should be log(currentIndex)*expectedCoefficient + offset.
1:2deba36:    * @param expectedCoefficient What slope do we expect.
1:2deba36:    * @return The predicted value for log(currentIndex)
1:2deba36:    */
1:2deba36:   private static double predictSize(Matrix m, int currentIndex, double expectedCoefficient) {
1:2deba36:     int rows = m.rowSize();
1:2deba36:     Matrix a = m.viewPart(0, rows, 1, 2);
1:2deba36:     Matrix b = m.viewPart(0, rows, 0, 1);
1:2deba36: 
1:2deba36:     Matrix ata = a.transpose().times(a);
1:2deba36:     Matrix atb = a.transpose().times(b);
1:2deba36:     QRDecomposition s = new QRDecomposition(ata);
1:2deba36:     Matrix r = s.solve(atb).transpose();
1:2deba36:     assertEquals(expectedCoefficient, r.get(0, 0), 0.2);
1:2deba36:     return r.times(new DenseVector(new double[]{Math.log(currentIndex), 1})).get(0);
1:2deba36:   }
1:2deba36: 
1:2deba36:   private static int hapaxCount(ChineseRestaurant s) {
1:2deba36:     int r = 0;
1:2deba36:     for (int i = 0; i < s.size(); i++) {
1:2deba36:       if (s.count(i) == 1) {
1:2deba36:         r++;
1:2deba36:       }
1:2deba36:     }
1:2deba36:     return r;
1:2deba36:   }
1:a07bfc3: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2deba36
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class ChineseRestaurantTest extends MahoutTestCase {
1:   @Test
1:   public void testDepth() {
1:     List<Integer> totals = Lists.newArrayList();
1:     for (int i = 0; i < 1000; i++) {
1:       ChineseRestaurant x = new ChineseRestaurant(10);
1:       Multiset<Integer> counts = HashMultiset.create();
1:       for (int j = 0; j < 100; j++) {
1:         counts.add(x.sample());
1:       }
1:       List<Integer> tmp = Lists.newArrayList();
1:       for (Integer k : counts.elementSet()) {
1:         tmp.add(counts.count(k));
1:       }
1:       Collections.sort(tmp, Collections.reverseOrder());
1:       while (totals.size() < tmp.size()) {
1:         totals.add(0);
1:       }
1:       int j = 0;
1:       for (Integer k : tmp) {
1:         totals.set(j, totals.get(j) + k);
1:         j++;
1:       }
1:     // these are empirically derived values, not principled ones
1:     assertEquals(25000.0, (double) totals.get(0), 1000);
1:     assertEquals(24000.0, (double) totals.get(1), 1000);
1:     assertEquals(8000.0, (double) totals.get(2), 200);
1:     assertEquals(1000.0, (double) totals.get(15), 50);
1:     assertEquals(1000.0, (double) totals.get(20), 40);
1:   }
1: 
1:   @Test
1:   public void testExtremeDiscount() {
1:     ChineseRestaurant x = new ChineseRestaurant(100, 1);
1:     Multiset<Integer> counts = HashMultiset.create();
1:     for (int i = 0; i < 10000; i++) {
1:       counts.add(x.sample());
1:     assertEquals(10000, x.size());
1:     for (int i = 0; i < 10000; i++) {
1:       assertEquals(1, x.count(i));
1:     }
1:   }
1:   @Test
1:   public void testGrowth() {
1:     ChineseRestaurant s0 = new ChineseRestaurant(10, 0.0);
1:     ChineseRestaurant s5 = new ChineseRestaurant(10, 0.5);
1:     ChineseRestaurant s9 = new ChineseRestaurant(10, 0.9);
1:     Set<Double> splits = ImmutableSet.of(1.0, 1.5, 2.0, 3.0, 5.0, 8.0);
1:     double offset0 = 0;
1:     int k = 0;
1:     int i = 0;
1:     Matrix m5 = new DenseMatrix(20, 3);
1:     Matrix m9 = new DenseMatrix(20, 3);
1:     while (i <= 200000) {
1:       double n = i / Math.pow(10, Math.floor(Math.log10(i)));
1:       if (splits.contains(n)) {
1:         //System.out.printf("%d\t%d\t%d\t%d\n", i, s0.size(), s5.size(), s9.size());
1:         if (i > 900) {
1:           double predict5 = predictSize(m5.viewPart(0, k, 0, 3), i, 0.5);
1:           assertEquals(predict5, Math.log(s5.size()), 1);
1:           double predict9 = predictSize(m9.viewPart(0, k, 0, 3), i, 0.9);
1:           assertEquals(predict9, Math.log(s9.size()), 1);
1:           //assertEquals(10.5 * Math.log(i) - offset0, s0.size(), 10);
1:         } else if (i > 50) {
1:           double x = 10.5 * Math.log(i) - s0.size();
1:           m5.viewRow(k).assign(new double[]{Math.log(s5.size()), Math.log(i), 1});
1:           m9.viewRow(k).assign(new double[]{Math.log(s9.size()), Math.log(i), 1});
1:           k++;
1:           offset0 += (x - offset0) / k;
1:         if (i > 10000) {
1:           assertEquals(0.0, (double) hapaxCount(s0) / s0.size(), 0.25);
1:           assertEquals(0.5, (double) hapaxCount(s5) / s5.size(), 0.1);
1:           assertEquals(0.9, (double) hapaxCount(s9) / s9.size(), 0.05);
1:       }
1:       s0.sample();
1:       s5.sample();
1:       s9.sample();
1:       i++;
1:   }
1: 
1:   /**
1:    * Predict the power law growth in number of unique samples from the first few data points.
1:    * Also check that the fitted growth coefficient is about right.
1:    *
1:    * @param m
1:    * @param currentIndex        Total data points seen so far.  Unique values should be log(currentIndex)*expectedCoefficient + offset.
1:    * @param expectedCoefficient What slope do we expect.
1:    * @return The predicted value for log(currentIndex)
1:    */
1:   private static double predictSize(Matrix m, int currentIndex, double expectedCoefficient) {
1:     int rows = m.rowSize();
1:     Matrix a = m.viewPart(0, rows, 1, 2);
1:     Matrix b = m.viewPart(0, rows, 0, 1);
1: 
1:     Matrix ata = a.transpose().times(a);
1:     Matrix atb = a.transpose().times(b);
1:     QRDecomposition s = new QRDecomposition(ata);
1:     Matrix r = s.solve(atb).transpose();
1:     assertEquals(expectedCoefficient, r.get(0, 0), 0.2);
1:     return r.times(new DenseVector(new double[]{Math.log(currentIndex), 1})).get(0);
1:   }
1: 
1:   private static int hapaxCount(ChineseRestaurant s) {
1:     int r = 0;
1:     for (int i = 0; i < s.size(); i++) {
1:       if (s.count(i) == 1) {
1:         r++;
1:       }
1:     }
1:     return r;
1:   }
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
0: public class ChineseRestaurantTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(25000.0, (double) totals.get(0), 1000);
0:         assertEquals(16000.0, (double) totals.get(1), 1000);
0:         assertEquals(11000.0, (double) totals.get(2), 200);
0:         assertEquals(1000.0, (double) totals.get(15), 50);
0:         assertEquals(1000.0, (double) totals.get(20), 40);
/////////////////////////////////////////////////////////////////////////
0:             double n = i / Math.pow(10, Math.floor(Math.log10(i)));
0:                     double predict5 = predictSize(m5.viewPart(0, k, 0, 3), i, 0.5);
0:                     double predict9 = predictSize(m9.viewPart(0, k, 0, 3), i, 0.9);
/////////////////////////////////////////////////////////////////////////
0:     private static double predictSize(Matrix m, int currentIndex, double expectedCoefficient) {
0:         int rows = m.rowSize();
0:         Matrix a = m.viewPart(0, rows, 1, 2);
0:         Matrix b = m.viewPart(0, rows, 0, 1);
0:         Matrix ata = a.transpose().times(a);
0:         Matrix atb = a.transpose().times(b);
0:         assertEquals(expectedCoefficient, r.get(0, 0), 0.2);
0:     private static int hapaxCount(ChineseRestaurant s) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import com.google.common.collect.HashMultiset;
1: import com.google.common.collect.ImmutableSet;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Multiset;
0: import com.google.common.collect.Ordering;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.QRDecomposition;
1: import org.junit.Test;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Set;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: public class ChineseRestaurantTest {
0:     @Test
0:     public void testDepth() {
0:         List<Integer> totals = Lists.newArrayList();
0:         for (int i = 0; i < 1000; i++) {
0:             ChineseRestaurant x = new ChineseRestaurant(10);
0:             Multiset<Integer> counts = HashMultiset.create();
0:             for (int j = 0; j < 100; j++) {
0:                 counts.add(x.sample());
1:             }
0:             List<Integer> tmp = Lists.newArrayList();
0:             for (Integer k : counts.elementSet()) {
0:                 tmp.add(counts.count(k));
1:             }
0:             Collections.sort(tmp, Ordering.natural().reverse());
0:             while (totals.size() < tmp.size()) {
0:                 totals.add(0);
1:             }
0:             int j = 0;
0:             for (Integer k : tmp) {
0:                 totals.set(j, totals.get(j) + k);
0:                 j++;
1:             }
1:         }
1: 
0:         // these are empirically derived values, not principled ones
0:         assertEquals(20600.0, (double) totals.get(0), 1000);
0:         assertEquals(13200.0, (double) totals.get(1), 1000);
0:         assertEquals(9875.0, (double) totals.get(2), 200);
0:         assertEquals(1475.0, (double) totals.get(15), 50);
0:         assertEquals(880.0, (double) totals.get(20), 40);
1:     }
1: 
0:     @Test
0:     public void testExtremeDiscount() {
0:         ChineseRestaurant x = new ChineseRestaurant(100, 1);
0:         Multiset<Integer> counts = HashMultiset.create();
0:         for (int i = 0; i < 10000; i++) {
0:             counts.add(x.sample());
1:         }
0:         assertEquals(10000, x.size());
0:         for (int i = 0; i < 10000; i++) {
0:             assertEquals(1, x.count(i));
1:         }
1:     }
1: 
0:     @Test
0:     public void testGrowth() {
0:         ChineseRestaurant s0 = new ChineseRestaurant(10, 0.0);
0:         ChineseRestaurant s5 = new ChineseRestaurant(10, 0.5);
0:         ChineseRestaurant s9 = new ChineseRestaurant(10, 0.9);
0:         Set<Double> splits = ImmutableSet.of(1.0, 1.5, 2.0, 3.0, 5.0, 8.0);
1: 
0:         double offset0 = 0;
0:         int k = 0;
0:         int i = 0;
0:         Matrix m5 = new DenseMatrix(20, 3);
0:         Matrix m9 = new DenseMatrix(20, 3);
0:         while (i <= 200000) {
0:             final double n = i / Math.pow(10, Math.floor(Math.log10(i)));
0:             if (splits.contains(n)) {
0:                 System.out.printf("%d\t%d\t%d\t%d\n", i, s0.size(), s5.size(), s9.size());
0:                 if (i > 900) {
0:                     final double predict5 = predictSize(m5.viewPart(0, k, 0, 3), i, 0.5);
0:                     assertEquals(predict5, Math.log(s5.size()), 1);
1: 
0:                     final double predict9 = predictSize(m9.viewPart(0, k, 0, 3), i, 0.9);
0:                     assertEquals(predict9, Math.log(s9.size()), 1);
1: 
0: //                    assertEquals(10.5 * Math.log(i) - offset0, s0.size(), 10);
0:                 } else if (i > 50) {
0:                     double x = 10.5 * Math.log(i) - s0.size();
0:                     m5.viewRow(k).assign(new double[]{Math.log(s5.size()), Math.log(i), 1});
0:                     m9.viewRow(k).assign(new double[]{Math.log(s9.size()), Math.log(i), 1});
1: 
0:                     k++;
0:                     offset0 += (x - offset0) / k;
1:                 }
0:                 if (i > 10000) {
0:                     assertEquals(0.0, (double) hapaxCount(s0) / s0.size(), 0.25);
0:                     assertEquals(0.5, (double) hapaxCount(s5) / s5.size(), 0.1);
0:                     assertEquals(0.9, (double) hapaxCount(s9) / s9.size(), 0.05);
1:                 }
1:             }
0:             s0.sample();
0:             s5.sample();
0:             s9.sample();
0:             i++;
1:         }
1:     }
1: 
0:     /**
0:      * Predict the power law growth in number of unique samples from the first few data points.
0:      * Also check that the fitted growth coefficient is about right.
1:      *
0:      * @param m
0:      * @param currentIndex         Total data points seen so far.  Unique values should be log(currentIndex)*expectedCoefficient + offset.
0:      * @param expectedCoefficient  What slope do we expect.
0:      * @return The predicted value for log(currentIndex)
1:      */
0:     private double predictSize(Matrix m, int currentIndex, double expectedCoefficient) {
0:         final int rows = m.rowSize();
0:         final Matrix a = m.viewPart(0, rows, 1, 2);
0:         final Matrix b = m.viewPart(0, rows, 0, 1);
1: 
0:         final Matrix ata = a.transpose().times(a);
0:         final Matrix atb = a.transpose().times(b);
0:         QRDecomposition s = new QRDecomposition(ata);
0:         Matrix r = s.solve(atb).transpose();
0:         assertEquals(expectedCoefficient, r.get(0, 0), 0.15);
0:         return r.times(new DenseVector(new double[]{Math.log(currentIndex), 1})).get(0);
1:     }
1: 
0:     private int hapaxCount(ChineseRestaurant s) {
0:         int r = 0;
0:         for (int i = 0; i < s.size(); i++) {
0:             if (s.count(i) == 1) {
0:                 r++;
1:             }
1:         }
0:         return r;
1:     }
1: }
============================================================================