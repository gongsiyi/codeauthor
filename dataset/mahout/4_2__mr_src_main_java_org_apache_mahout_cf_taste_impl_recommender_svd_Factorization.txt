1:7892be3: /**
1:7892be3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7892be3:  * contributor license agreements.  See the NOTICE file distributed with
1:7892be3:  * this work for additional information regarding copyright ownership.
1:7892be3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7892be3:  * (the "License"); you may not use this file except in compliance with
1:7892be3:  * the License.  You may obtain a copy of the License at
1:7892be3:  *
1:7892be3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7892be3:  *
1:7892be3:  * Unless required by applicable law or agreed to in writing, software
1:7892be3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7892be3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7892be3:  * See the License for the specific language governing permissions and
1:7892be3:  * limitations under the License.
1:7892be3:  */
1:7892be3: 
1:7892be3: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:7892be3: 
1:84f17ae: import java.util.Arrays;
1:84f17ae: import java.util.Map;
1:84f17ae: 
1:84f17ae: import com.google.common.base.Preconditions;
1:7892be3: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1:7892be3: import org.apache.mahout.cf.taste.common.NoSuchUserException;
1:7892be3: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:62b94a5: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:7892be3: 
1:7892be3: /**
1:7892be3:  * a factorization of the rating matrix
1:7892be3:  */
1:7892be3: public class Factorization {
1:7892be3: 
1:7892be3:   /** used to find the rows in the user features matrix by userID */
1:7892be3:   private final FastByIDMap<Integer> userIDMapping;
1:7892be3:   /** used to find the rows in the item features matrix by itemID */
1:7892be3:   private final FastByIDMap<Integer> itemIDMapping;
1:7892be3: 
1:7892be3:   /** user features matrix */
1:7892be3:   private final double[][] userFeatures;
1:7892be3:   /** item features matrix */
1:7892be3:   private final double[][] itemFeatures;
1:7892be3: 
1:7892be3:   public Factorization(FastByIDMap<Integer> userIDMapping, FastByIDMap<Integer> itemIDMapping, double[][] userFeatures,
1:7892be3:       double[][] itemFeatures) {
1:84f17ae:     this.userIDMapping = Preconditions.checkNotNull(userIDMapping);
1:84f17ae:     this.itemIDMapping = Preconditions.checkNotNull(itemIDMapping);
1:7892be3:     this.userFeatures = userFeatures;
1:7892be3:     this.itemFeatures = itemFeatures;
1:7892be3:   }
1:7892be3: 
1:0e291d4:   public double[][] allUserFeatures() {
1:0e291d4:     return userFeatures;
1:0e291d4:   }
1:0e291d4: 
1:7892be3:   public double[] getUserFeatures(long userID) throws NoSuchUserException {
1:7892be3:     Integer index = userIDMapping.get(userID);
1:7892be3:     if (index == null) {
1:7a9e99e:       throw new NoSuchUserException(userID);
1:7892be3:     }
1:7892be3:     return userFeatures[index];
1:7892be3:   }
1:7892be3: 
1:0e291d4:   public double[][] allItemFeatures() {
1:0e291d4:     return itemFeatures;
1:0e291d4:   }
1:0e291d4: 
1:7892be3:   public double[] getItemFeatures(long itemID) throws NoSuchItemException {
1:7892be3:     Integer index = itemIDMapping.get(itemID);
1:7892be3:     if (index == null) {
1:7a9e99e:       throw new NoSuchItemException(itemID);
1:7892be3:     }
1:7892be3:     return itemFeatures[index];
1:7892be3:   }
1:7892be3: 
1:0e291d4:   public int userIndex(long userID) throws NoSuchUserException {
1:0e291d4:     Integer index = userIDMapping.get(userID);
1:0e291d4:     if (index == null) {
1:0e291d4:       throw new NoSuchUserException(userID);
1:0e291d4:     }
1:0e291d4:     return index;
1:0e291d4:   }
1:0e291d4: 
1:84f17ae:   public Iterable<Map.Entry<Long,Integer>> getUserIDMappings() {
1:84f17ae:     return userIDMapping.entrySet();
1:84f17ae:   }
1:62b94a5:   
1:62b94a5:   public LongPrimitiveIterator getUserIDMappingKeys() {
1:62b94a5:     return userIDMapping.keySetIterator();
1:62b94a5:   }
1:84f17ae: 
1:0e291d4:   public int itemIndex(long itemID) throws NoSuchItemException {
1:0e291d4:     Integer index = itemIDMapping.get(itemID);
1:0e291d4:     if (index == null) {
1:0e291d4:       throw new NoSuchItemException(itemID);
1:0e291d4:     }
1:0e291d4:     return index;
1:0e291d4:   }
1:0e291d4: 
1:84f17ae:   public Iterable<Map.Entry<Long,Integer>> getItemIDMappings() {
1:84f17ae:     return itemIDMapping.entrySet();
1:84f17ae:   }
1:62b94a5:   
1:62b94a5:   public LongPrimitiveIterator getItemIDMappingKeys() {
1:62b94a5:     return itemIDMapping.keySetIterator();
1:62b94a5:   }
1:84f17ae: 
1:84f17ae:   public int numFeatures() {
1:e73d67f:     return userFeatures.length > 0 ? userFeatures[0].length : 0;
1:84f17ae:   }
1:84f17ae: 
1:84f17ae:   public int numUsers() {
1:84f17ae:     return userIDMapping.size();
1:84f17ae:   }
1:84f17ae: 
1:84f17ae:   public int numItems() {
1:84f17ae:     return itemIDMapping.size();
1:84f17ae:   }
1:84f17ae: 
1:84f17ae:   @Override
1:84f17ae:   public boolean equals(Object o) {
1:84f17ae:     if (o instanceof Factorization) {
1:84f17ae:       Factorization other = (Factorization) o;
1:6d16230:       return userIDMapping.equals(other.userIDMapping) && itemIDMapping.equals(other.itemIDMapping)
1:6d16230:           && Arrays.deepEquals(userFeatures, other.userFeatures) && Arrays.deepEquals(itemFeatures, other.itemFeatures);
1:84f17ae:     }
1:84f17ae:     return false;
1:84f17ae:   }
1:84f17ae: 
1:84f17ae:   @Override
1:84f17ae:   public int hashCode() {
1:84f17ae:     int hashCode = 31 * userIDMapping.hashCode() + itemIDMapping.hashCode();
1:84f17ae:     hashCode = 31 * hashCode + Arrays.deepHashCode(userFeatures);
1:84f17ae:     hashCode = 31 * hashCode + Arrays.deepHashCode(itemFeatures);
1:84f17ae:     return hashCode;
1:84f17ae:   }
1:7892be3: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:62b94a5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
/////////////////////////////////////////////////////////////////////////
1:   
1:   public LongPrimitiveIterator getUserIDMappingKeys() {
1:     return userIDMapping.keySetIterator();
1:   }
/////////////////////////////////////////////////////////////////////////
1:   
1:   public LongPrimitiveIterator getItemIDMappingKeys() {
1:     return itemIDMapping.keySetIterator();
1:   }
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:       return userIDMapping.equals(other.userIDMapping) && itemIDMapping.equals(other.itemIDMapping)
1:           && Arrays.deepEquals(userFeatures, other.userFeatures) && Arrays.deepEquals(itemFeatures, other.itemFeatures);
commit:0e291d4
/////////////////////////////////////////////////////////////////////////
1:   public double[][] allUserFeatures() {
1:     return userFeatures;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public double[][] allItemFeatures() {
1:     return itemFeatures;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public int userIndex(long userID) throws NoSuchUserException {
1:     Integer index = userIDMapping.get(userID);
1:     if (index == null) {
1:       throw new NoSuchUserException(userID);
1:     }
1:     return index;
1:   }
1: 
1:   public int itemIndex(long itemID) throws NoSuchItemException {
1:     Integer index = itemIDMapping.get(itemID);
1:     if (index == null) {
1:       throw new NoSuchItemException(itemID);
1:     }
1:     return index;
1:   }
1: 
commit:e73d67f
/////////////////////////////////////////////////////////////////////////
1:     return userFeatures.length > 0 ? userFeatures[0].length : 0;
commit:84f17ae
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Map;
1: 
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
1:     this.userIDMapping = Preconditions.checkNotNull(userIDMapping);
1:     this.itemIDMapping = Preconditions.checkNotNull(itemIDMapping);
/////////////////////////////////////////////////////////////////////////
1:   public Iterable<Map.Entry<Long,Integer>> getUserIDMappings() {
1:     return userIDMapping.entrySet();
1:   }
1: 
1:   public Iterable<Map.Entry<Long,Integer>> getItemIDMappings() {
1:     return itemIDMapping.entrySet();
1:   }
1: 
1:   public int numFeatures() {
0:     return userFeatures[0].length;
1:   }
1: 
1:   public int numUsers() {
1:     return userIDMapping.size();
1:   }
1: 
1:   public int numItems() {
1:     return itemIDMapping.size();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object o) {
1:     if (o instanceof Factorization) {
1:       Factorization other = (Factorization) o;
0:       return userIDMapping.equals(other.userIDMapping) && itemIDMapping.equals(other.itemIDMapping) &&
0:           Arrays.deepEquals(userFeatures, other.userFeatures) && Arrays.deepEquals(itemFeatures, other.itemFeatures);
1:     }
1:     return false;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     int hashCode = 31 * userIDMapping.hashCode() + itemIDMapping.hashCode();
1:     hashCode = 31 * hashCode + Arrays.deepHashCode(userFeatures);
1:     hashCode = 31 * hashCode + Arrays.deepHashCode(itemFeatures);
1:     return hashCode;
1:   }
commit:7892be3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1: import org.apache.mahout.cf.taste.common.NoSuchUserException;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: 
1: /**
1:  * a factorization of the rating matrix
1:  */
1: public class Factorization {
1: 
1:   /** used to find the rows in the user features matrix by userID */
1:   private final FastByIDMap<Integer> userIDMapping;
1:   /** used to find the rows in the item features matrix by itemID */
1:   private final FastByIDMap<Integer> itemIDMapping;
1: 
1:   /** user features matrix */
1:   private final double[][] userFeatures;
1:   /** item features matrix */
1:   private final double[][] itemFeatures;
1: 
1:   public Factorization(FastByIDMap<Integer> userIDMapping, FastByIDMap<Integer> itemIDMapping, double[][] userFeatures,
1:       double[][] itemFeatures) {
0:     this.userIDMapping = userIDMapping;
0:     this.itemIDMapping = itemIDMapping;
1:     this.userFeatures = userFeatures;
1:     this.itemFeatures = itemFeatures;
1:   }
1: 
1:   public double[] getUserFeatures(long userID) throws NoSuchUserException {
1:     Integer index = userIDMapping.get(userID);
1:     if (index == null) {
0:       throw new NoSuchUserException();
1:     }
1:     return userFeatures[index];
1:   }
1: 
1:   public double[] getItemFeatures(long itemID) throws NoSuchItemException {
1:     Integer index = itemIDMapping.get(itemID);
1:     if (index == null) {
0:       throw new NoSuchItemException();
1:     }
1:     return itemFeatures[index];
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:7a9e99e
/////////////////////////////////////////////////////////////////////////
1:       throw new NoSuchUserException(userID);
/////////////////////////////////////////////////////////////////////////
1:       throw new NoSuchItemException(itemID);
============================================================================