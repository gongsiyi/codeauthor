1:9c7a9e7: /*
1:9c7a9e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9c7a9e7:  * contributor license agreements.  See the NOTICE file distributed with
1:9c7a9e7:  * this work for additional information regarding copyright ownership.
1:9c7a9e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9c7a9e7:  * (the "License"); you may not use this file except in compliance with
1:9c7a9e7:  * the License.  You may obtain a copy of the License at
1:9c7a9e7:  *
1:9c7a9e7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9c7a9e7:  *
1:9c7a9e7:  * Unless required by applicable law or agreed to in writing, software
1:9c7a9e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9c7a9e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9c7a9e7:  * See the License for the specific language governing permissions and
1:9c7a9e7:  * limitations under the License.
1:9c7a9e7:  */
3:9c7a9e7: 
1:9c7a9e7: package org.apache.mahout.math.solver;
1:9c7a9e7: 
1:9c7a9e7: import org.apache.mahout.common.RandomUtils;
1:9c7a9e7: import org.apache.mahout.math.DenseMatrix;
1:9c7a9e7: import org.apache.mahout.math.Matrix;
1:9c7a9e7: import org.apache.mahout.math.MatrixSlice;
1:9c7a9e7: import org.apache.mahout.math.Vector;
1:9c7a9e7: import org.apache.mahout.math.function.DoubleFunction;
1:9c7a9e7: import org.apache.mahout.math.function.Functions;
1:229aeff: import org.junit.Assert;
1:9c7a9e7: import org.junit.Test;
1:9c7a9e7: 
1:9c7a9e7: import java.util.Random;
1:9c7a9e7: 
1:9c7a9e7: public class EigenDecompositionTest {
1:9c7a9e7:   @Test
1:2fd2aed:   public void testDegenerateMatrix() {
1:229aeff:     double[][] m = {
1:2fd2aed:       new double[]{0.641284, 0.767303, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
1:2fd2aed:       new double[]{0.767303, 3.050159, 2.561342, 0.000000, 0.000000, 0.000000, 0.000000},
1:2fd2aed:       new double[]{0.000000, 2.561342, 5.000609, 0.810507, 0.000000, 0.000000, 0.000000},
1:2fd2aed:       new double[]{0.000000, 0.000000, 0.810507, 0.550477, 0.142853, 0.000000, 0.000000},
1:2fd2aed:       new double[]{0.000000, 0.000000, 0.000000, 0.142853, 0.254566, 0.000000, 0.000000},
1:2fd2aed:       new double[]{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.256073, 0.000000},
1:2fd2aed:       new double[]{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}};
1:2fd2aed:     Matrix x = new DenseMatrix(m);
1:2fd2aed:     EigenDecomposition eig = new EigenDecomposition(x, true);
1:2fd2aed:     Matrix d = eig.getD();
1:2fd2aed:     Matrix v = eig.getV();
1:2fd2aed:     check("EigenvalueDecomposition (evil)...", x.times(v), v.times(d));
1:2fd2aed:   }
1:2fd2aed: 
1:2fd2aed:   @Test
1:9c7a9e7:   public void testDeficientRank() {
1:9c7a9e7:     Matrix a = new DenseMatrix(10, 3).assign(new DoubleFunction() {
1:229aeff:       private final Random gen = RandomUtils.getRandom();
1:9c7a9e7:       @Override
1:9c7a9e7:       public double apply(double arg1) {
1:9c7a9e7:         return gen.nextGaussian();
1:9c7a9e7:       }
1:9c7a9e7:     });
1:9c7a9e7: 
1:9c7a9e7:     a = a.transpose().times(a);
1:9c7a9e7: 
1:9c7a9e7:     EigenDecomposition eig = new EigenDecomposition(a);
1:9c7a9e7:     Matrix d = eig.getD();
1:9c7a9e7:     Matrix v = eig.getV();
1:9c7a9e7:     check("EigenvalueDecomposition (rank deficient)...", a.times(v), v.times(d));
1:9c7a9e7: 
1:229aeff:     Assert.assertEquals(0, eig.getImagEigenvalues().norm(1), 1.0e-10);
1:229aeff:     Assert.assertEquals(3, eig.getRealEigenvalues().norm(0), 1.0e-10);
1:9c7a9e7:   }
1:9c7a9e7: 
1:9c7a9e7:   @Test
1:9c7a9e7:   public void testEigen() {
1:9c7a9e7:     double[] evals =
1:229aeff:       {0.0, 1.0, 0.0, 0.0,
1:229aeff:           1.0, 0.0, 2.0e-7, 0.0,
1:229aeff:           0.0, -2.0e-7, 0.0, 1.0,
1:229aeff:           0.0, 0.0, 1.0, 0.0};
1:9c7a9e7:     int i = 0;
1:9c7a9e7:     Matrix a = new DenseMatrix(4, 4);
1:9c7a9e7:     for (MatrixSlice row : a) {
1:dc62944:       for (Vector.Element element : row.vector().all()) {
1:9c7a9e7:         element.set(evals[i++]);
1:9c7a9e7:       }
1:9c7a9e7:     }
1:9c7a9e7:     EigenDecomposition eig = new EigenDecomposition(a);
1:9c7a9e7:     Matrix d = eig.getD();
1:9c7a9e7:     Matrix v = eig.getV();
1:9c7a9e7:     check("EigenvalueDecomposition (nonsymmetric)...", a.times(v), v.times(d));
1:9c7a9e7:   }
1:9c7a9e7: 
1:9c7a9e7:   @Test
1:9c7a9e7:   public void testSequential() {
1:9c7a9e7:     int validld = 3;
1:9c7a9e7:     Matrix A = new DenseMatrix(validld, validld);
1:229aeff:     double[] columnwise = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0};
1:9c7a9e7:     int i = 0;
1:9c7a9e7:     for (MatrixSlice row : A) {
1:dc62944:       for (Vector.Element element : row.vector().all()) {
1:9c7a9e7:         element.set(columnwise[i++]);
1:9c7a9e7:       }
1:9c7a9e7:     }
1:9c7a9e7: 
1:9c7a9e7:     EigenDecomposition Eig = new EigenDecomposition(A);
1:9c7a9e7:     Matrix D = Eig.getD();
1:9c7a9e7:     Matrix V = Eig.getV();
1:9c7a9e7:     check("EigenvalueDecomposition (nonsymmetric)...", A.times(V), V.times(D));
1:9c7a9e7: 
1:9c7a9e7:     A = A.transpose().times(A);
1:9c7a9e7:     Eig = new EigenDecomposition(A);
1:9c7a9e7:     D = Eig.getD();
1:9c7a9e7:     V = Eig.getV();
1:9c7a9e7:     check("EigenvalueDecomposition (symmetric)...", A.times(V), V.times(D));
1:9c7a9e7: 
1:9c7a9e7:   }
1:9c7a9e7: 
1:229aeff:   private static void check(String msg, Matrix a, Matrix b) {
1:229aeff:     Assert.assertEquals(msg, 0, a.minus(b).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:9c7a9e7:   }
1:9c7a9e7: 
1:9c7a9e7: }
============================================================================
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:       for (Vector.Element element : row.vector().all()) {
/////////////////////////////////////////////////////////////////////////
1:       for (Vector.Element element : row.vector().all()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
1:     double[][] m = {
/////////////////////////////////////////////////////////////////////////
1:       private final Random gen = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
1:     Assert.assertEquals(0, eig.getImagEigenvalues().norm(1), 1.0e-10);
1:     Assert.assertEquals(3, eig.getRealEigenvalues().norm(0), 1.0e-10);
1:       {0.0, 1.0, 0.0, 0.0,
1:           1.0, 0.0, 2.0e-7, 0.0,
1:           0.0, -2.0e-7, 0.0, 1.0,
1:           0.0, 0.0, 1.0, 0.0};
/////////////////////////////////////////////////////////////////////////
1:     double[] columnwise = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0};
/////////////////////////////////////////////////////////////////////////
1:   private static void check(String msg, Matrix a, Matrix b) {
1:     Assert.assertEquals(msg, 0, a.minus(b).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:2fd2aed
/////////////////////////////////////////////////////////////////////////
1:   public void testDegenerateMatrix() {
0:     double[][] m = new double[][]{
1:       new double[]{0.641284, 0.767303, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
1:       new double[]{0.767303, 3.050159, 2.561342, 0.000000, 0.000000, 0.000000, 0.000000},
1:       new double[]{0.000000, 2.561342, 5.000609, 0.810507, 0.000000, 0.000000, 0.000000},
1:       new double[]{0.000000, 0.000000, 0.810507, 0.550477, 0.142853, 0.000000, 0.000000},
1:       new double[]{0.000000, 0.000000, 0.000000, 0.142853, 0.254566, 0.000000, 0.000000},
1:       new double[]{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.256073, 0.000000},
1:       new double[]{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}};
1:     Matrix x = new DenseMatrix(m);
1:     EigenDecomposition eig = new EigenDecomposition(x, true);
1:     Matrix d = eig.getD();
1:     Matrix v = eig.getV();
1:     check("EigenvalueDecomposition (evil)...", x.times(v), v.times(d));
1:   }
1: 
1:   @Test
commit:9c7a9e7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.solver;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixSlice;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.DoubleFunction;
1: import org.apache.mahout.math.function.Functions;
1: import org.junit.Test;
1: 
1: import java.util.Random;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: public class EigenDecompositionTest {
1:   @Test
1:   public void testDeficientRank() {
1:     Matrix a = new DenseMatrix(10, 3).assign(new DoubleFunction() {
0:       Random gen = RandomUtils.getRandom();
1: 
1:       @Override
1:       public double apply(double arg1) {
1:         return gen.nextGaussian();
1:       }
1:     });
1: 
1:     a = a.transpose().times(a);
1: 
1:     EigenDecomposition eig = new EigenDecomposition(a);
1:     Matrix d = eig.getD();
1:     Matrix v = eig.getV();
1:     check("EigenvalueDecomposition (rank deficient)...", a.times(v), v.times(d));
1: 
0:     assertEquals(0, eig.getImagEigenvalues().norm(1), 1e-10);
0:     assertEquals(3, eig.getRealEigenvalues().norm(0), 1e-10);
1:   }
1: 
1:   @Test
1:   public void testEigen() {
1:     double[] evals =
0:       {0., 1., 0., 0.,
0:         1., 0., 2.e-7, 0.,
0:         0., -2.e-7, 0., 1.,
0:         0., 0., 1., 0.};
1:     int i = 0;
1:     Matrix a = new DenseMatrix(4, 4);
1:     for (MatrixSlice row : a) {
0:       for (Vector.Element element : row.vector()) {
1:         element.set(evals[i++]);
1:       }
1:     }
1:     EigenDecomposition eig = new EigenDecomposition(a);
1:     Matrix d = eig.getD();
1:     Matrix v = eig.getV();
1:     check("EigenvalueDecomposition (nonsymmetric)...", a.times(v), v.times(d));
1:   }
1: 
1:   @Test
1:   public void testSequential() {
1:     int validld = 3;
1:     Matrix A = new DenseMatrix(validld, validld);
0:     double[] columnwise = {1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.};
1:     int i = 0;
1:     for (MatrixSlice row : A) {
0:       for (Vector.Element element : row.vector()) {
1:         element.set(columnwise[i++]);
1:       }
1:     }
1: 
1:     EigenDecomposition Eig = new EigenDecomposition(A);
1:     Matrix D = Eig.getD();
1:     Matrix V = Eig.getV();
1:     check("EigenvalueDecomposition (nonsymmetric)...", A.times(V), V.times(D));
1: 
1:     A = A.transpose().times(A);
1:     Eig = new EigenDecomposition(A);
1:     D = Eig.getD();
1:     V = Eig.getV();
1:     check("EigenvalueDecomposition (symmetric)...", A.times(V), V.times(D));
1: 
1:   }
1: 
0:   private void check(String msg, Matrix a, Matrix b) {
0:     assertEquals(msg, 0, a.minus(b).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:   }
1: 
1: }
============================================================================