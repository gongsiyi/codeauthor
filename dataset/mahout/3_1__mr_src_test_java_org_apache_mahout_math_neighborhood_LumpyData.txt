1:8649ac2: /*
1:8649ac2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8649ac2:  * contributor license agreements.  See the NOTICE file distributed with
1:8649ac2:  * this work for additional information regarding copyright ownership.
1:8649ac2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8649ac2:  * (the "License"); you may not use this file except in compliance with
1:8649ac2:  * the License.  You may obtain a copy of the License at
1:8649ac2:  *
1:8649ac2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8649ac2:  *
1:8649ac2:  * Unless required by applicable law or agreed to in writing, software
1:8649ac2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8649ac2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8649ac2:  * See the License for the specific language governing permissions and
1:8649ac2:  * limitations under the License.
1:8649ac2:  */
1:8649ac2: 
1:8649ac2: package org.apache.mahout.math.neighborhood;
1:8649ac2: 
1:8649ac2: import java.util.List;
1:8649ac2: 
1:8649ac2: import com.google.common.collect.Lists;
1:8649ac2: import org.apache.mahout.math.DenseMatrix;
1:8649ac2: import org.apache.mahout.math.Matrix;
1:8649ac2: import org.apache.mahout.math.MatrixSlice;
1:8649ac2: import org.apache.mahout.math.Vector;
1:8649ac2: import org.apache.mahout.math.random.ChineseRestaurant;
1:8649ac2: import org.apache.mahout.math.random.MultiNormal;
1:8649ac2: import org.apache.mahout.math.random.Sampler;
1:8649ac2: 
1:8649ac2: /**
1:8649ac2:  * Samples from clusters that have varying frequencies but constant radius.
1:8649ac2:  */
1:8649ac2: public class LumpyData implements Sampler<Vector> {
1:8649ac2:   // size of the clusters
1:8649ac2:   private final double radius;
1:8649ac2: 
1:8649ac2:   // figures out which cluster to look at
1:8649ac2:   private final Sampler<Integer> cluster;
1:8649ac2: 
1:8649ac2:   // remembers centroids of clusters
1:8649ac2:   private final List<Sampler<Vector>> centroids = Lists.newArrayList();
1:8649ac2: 
1:8649ac2:   // how the centroids are generated
1:8649ac2:   private final MultiNormal centers;
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Samples from a lumpy distribution that acts a bit more like real data than just sampling from a normal distribution.
1:8649ac2:    * @param dimension   The dimension of the vectors to return.
1:8649ac2:    * @param radius      The size of the clusters we sample from.
1:8649ac2:    * @param alpha       Controls the growth of the number of clusters.  The number of clusters will be about alpha * log(samples)
1:8649ac2:    */
1:8649ac2:   public LumpyData(int dimension, double radius, double alpha) {
1:8649ac2:     this.centers = new MultiNormal(dimension);
1:8649ac2:     this.radius = radius;
1:8649ac2:     cluster = new ChineseRestaurant(alpha);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public static Matrix lumpyRandomData(int numDataPoints, int numDimensions) {
1:8649ac2:     final Matrix data = new DenseMatrix(numDataPoints, numDimensions);
1:8649ac2:     final LumpyData clusters = new LumpyData(numDimensions, 0.05, 10);
1:8649ac2:     for (MatrixSlice row : data) {
1:8649ac2:       row.vector().assign(clusters.sample());
1:8649ac2:     }
1:8649ac2:     return data;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public Vector sample() {
1:8649ac2:     int id = cluster.sample();
1:8649ac2:     if (id >= centroids.size()) {
1:8649ac2:       // need to invent a new cluster
1:8649ac2:       centroids.add(new MultiNormal(radius, centers.sample()));
1:8649ac2:     }
1:8649ac2:     return centroids.get(id).sample();
1:8649ac2:   }
1:8649ac2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.neighborhood;
1: 
1: import java.util.List;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixSlice;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.random.ChineseRestaurant;
1: import org.apache.mahout.math.random.MultiNormal;
1: import org.apache.mahout.math.random.Sampler;
1: 
1: /**
1:  * Samples from clusters that have varying frequencies but constant radius.
1:  */
1: public class LumpyData implements Sampler<Vector> {
1:   // size of the clusters
1:   private final double radius;
1: 
1:   // figures out which cluster to look at
1:   private final Sampler<Integer> cluster;
1: 
1:   // remembers centroids of clusters
1:   private final List<Sampler<Vector>> centroids = Lists.newArrayList();
1: 
1:   // how the centroids are generated
1:   private final MultiNormal centers;
1: 
1:   /**
1:    * Samples from a lumpy distribution that acts a bit more like real data than just sampling from a normal distribution.
1:    * @param dimension   The dimension of the vectors to return.
1:    * @param radius      The size of the clusters we sample from.
1:    * @param alpha       Controls the growth of the number of clusters.  The number of clusters will be about alpha * log(samples)
1:    */
1:   public LumpyData(int dimension, double radius, double alpha) {
1:     this.centers = new MultiNormal(dimension);
1:     this.radius = radius;
1:     cluster = new ChineseRestaurant(alpha);
1:   }
1: 
1:   public static Matrix lumpyRandomData(int numDataPoints, int numDimensions) {
1:     final Matrix data = new DenseMatrix(numDataPoints, numDimensions);
1:     final LumpyData clusters = new LumpyData(numDimensions, 0.05, 10);
1:     for (MatrixSlice row : data) {
1:       row.vector().assign(clusters.sample());
1:     }
1:     return data;
1:   }
1: 
1:   @Override
1:   public Vector sample() {
1:     int id = cluster.sample();
1:     if (id >= centroids.size()) {
1:       // need to invent a new cluster
1:       centroids.add(new MultiNormal(radius, centers.sample()));
1:     }
1:     return centroids.get(id).sample();
1:   }
1: }
============================================================================