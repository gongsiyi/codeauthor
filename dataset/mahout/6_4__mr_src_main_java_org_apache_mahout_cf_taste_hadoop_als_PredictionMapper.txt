1:df39ce4: /**
1:df39ce4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:df39ce4:  * contributor license agreements.  See the NOTICE file distributed with
1:df39ce4:  * this work for additional information regarding copyright ownership.
1:df39ce4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:df39ce4:  * (the "License"); you may not use this file except in compliance with
1:df39ce4:  * the License.  You may obtain a copy of the License at
1:df39ce4:  *
1:df39ce4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:df39ce4:  *
1:df39ce4:  * Unless required by applicable law or agreed to in writing, software
1:df39ce4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:df39ce4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df39ce4:  * See the License for the specific language governing permissions and
1:df39ce4:  * limitations under the License.
1:df39ce4:  */
1:df39ce4: 
1:df39ce4: package org.apache.mahout.cf.taste.hadoop.als;
1:df39ce4: 
1:bbd2b7e: import org.apache.hadoop.conf.Configuration;
1:df39ce4: import org.apache.hadoop.fs.Path;
1:df39ce4: import org.apache.hadoop.io.IntWritable;
1:bbd2b7e: import org.apache.hadoop.io.LongWritable;
1:d95bdda: import org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem;
1:df39ce4: import org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable;
1:bbd2b7e: import org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils;
1:d95bdda: import org.apache.mahout.cf.taste.hadoop.TopItemsQueue;
1:df39ce4: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:df39ce4: import org.apache.mahout.common.Pair;
1:df39ce4: import org.apache.mahout.math.Vector;
1:df39ce4: import org.apache.mahout.math.VectorWritable;
1:df39ce4: import org.apache.mahout.math.function.IntObjectProcedure;
1:bbd2b7e: import org.apache.mahout.math.map.OpenIntLongHashMap;
1:df39ce4: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1:df39ce4: import org.apache.mahout.math.set.OpenIntHashSet;
1:df39ce4: 
1:df39ce4: import java.io.IOException;
1:df39ce4: import java.util.List;
1:df39ce4: 
1:df39ce4: /**
1:df39ce4:  * a multithreaded mapper that loads the feature matrices U and M into memory. Afterwards it computes recommendations
1:df39ce4:  * from these. Can be executed by a {@link MultithreadedSharingMapper}.
1:df39ce4:  */
1:bbd2b7e: public class PredictionMapper extends SharingMapper<IntWritable,VectorWritable,LongWritable,RecommendedItemsWritable,
1:df39ce4:     Pair<OpenIntObjectHashMap<Vector>,OpenIntObjectHashMap<Vector>>> {
1:df39ce4: 
1:df39ce4:   private int recommendationsPerUser;
1:df39ce4:   private float maxRating;
1:df39ce4: 
1:bbd2b7e:   private boolean usesLongIDs;
1:bbd2b7e:   private OpenIntLongHashMap userIDIndex;
1:bbd2b7e:   private OpenIntLongHashMap itemIDIndex;
1:bbd2b7e: 
1:bbd2b7e:   private final LongWritable userIDWritable = new LongWritable();
1:df39ce4:   private final RecommendedItemsWritable recommendations = new RecommendedItemsWritable();
1:df39ce4: 
1:df39ce4:   @Override
1:df39ce4:   Pair<OpenIntObjectHashMap<Vector>, OpenIntObjectHashMap<Vector>> createSharedInstance(Context ctx) {
1:bbd2b7e:     Configuration conf = ctx.getConfiguration();
1:bbd2b7e:     Path pathToU = new Path(conf.get(RecommenderJob.USER_FEATURES_PATH));
1:bbd2b7e:     Path pathToM = new Path(conf.get(RecommenderJob.ITEM_FEATURES_PATH));
1:df39ce4: 
1:bbd2b7e:     OpenIntObjectHashMap<Vector> U = ALS.readMatrixByRows(pathToU, conf);
1:bbd2b7e:     OpenIntObjectHashMap<Vector> M = ALS.readMatrixByRows(pathToM, conf);
1:df39ce4: 
1:87c15be:     return new Pair<>(U, M);
1:df39ce4:   }
1:df39ce4: 
1:df39ce4:   @Override
1:df39ce4:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:bbd2b7e:     Configuration conf = ctx.getConfiguration();
1:bbd2b7e:     recommendationsPerUser = conf.getInt(RecommenderJob.NUM_RECOMMENDATIONS,
1:bbd2b7e:         RecommenderJob.DEFAULT_NUM_RECOMMENDATIONS);
1:bbd2b7e:     maxRating = Float.parseFloat(conf.get(RecommenderJob.MAX_RATING));
1:bbd2b7e: 
1:bbd2b7e:     usesLongIDs = conf.getBoolean(ParallelALSFactorizationJob.USES_LONG_IDS, false);
1:bbd2b7e:     if (usesLongIDs) {
1:bbd2b7e:       userIDIndex = TasteHadoopUtils.readIDIndexMap(conf.get(RecommenderJob.USER_INDEX_PATH), conf);
1:bbd2b7e:       itemIDIndex = TasteHadoopUtils.readIDIndexMap(conf.get(RecommenderJob.ITEM_INDEX_PATH), conf);
1:bbd2b7e:     }
1:df39ce4:   }
1:df39ce4: 
1:df39ce4:   @Override
1:bbd2b7e:   protected void map(IntWritable userIndexWritable, VectorWritable ratingsWritable, Context ctx)
1:6d16230:     throws IOException, InterruptedException {
1:df39ce4: 
1:df39ce4:     Pair<OpenIntObjectHashMap<Vector>, OpenIntObjectHashMap<Vector>> uAndM = getSharedInstance();
1:df39ce4:     OpenIntObjectHashMap<Vector> U = uAndM.getFirst();
1:df39ce4:     OpenIntObjectHashMap<Vector> M = uAndM.getSecond();
1:df39ce4: 
1:df39ce4:     Vector ratings = ratingsWritable.get();
1:335a993:     int userIndex = userIndexWritable.get();
1:df39ce4:     final OpenIntHashSet alreadyRatedItems = new OpenIntHashSet(ratings.getNumNondefaultElements());
1:df39ce4: 
1:dc62944:     for (Vector.Element e : ratings.nonZeroes()) {
1:dc62944:       alreadyRatedItems.add(e.index());
1:df39ce4:     }
1:df39ce4: 
1:d95bdda:     final TopItemsQueue topItemsQueue = new TopItemsQueue(recommendationsPerUser);
1:bbd2b7e:     final Vector userFeatures = U.get(userIndex);
1:df39ce4: 
1:df39ce4:     M.forEachPair(new IntObjectProcedure<Vector>() {
1:df39ce4:       @Override
1:df39ce4:       public boolean apply(int itemID, Vector itemFeatures) {
1:df39ce4:         if (!alreadyRatedItems.contains(itemID)) {
1:df39ce4:           double predictedRating = userFeatures.dot(itemFeatures);
1:df39ce4: 
1:d95bdda:           MutableRecommendedItem top = topItemsQueue.top();
1:df39ce4:           if (predictedRating > top.getValue()) {
1:df39ce4:             top.set(itemID, (float) predictedRating);
1:d95bdda:             topItemsQueue.updateTop();
1:df39ce4:           }
1:df39ce4:         }
1:df39ce4:         return true;
1:df39ce4:       }
1:df39ce4:     });
1:df39ce4: 
1:d95bdda:     List<RecommendedItem> recommendedItems = topItemsQueue.getTopItems();
1:df39ce4: 
1:df39ce4:     if (!recommendedItems.isEmpty()) {
1:df39ce4: 
1:df39ce4:       // cap predictions to maxRating
1:df39ce4:       for (RecommendedItem topItem : recommendedItems) {
1:df39ce4:         ((MutableRecommendedItem) topItem).capToMaxValue(maxRating);
1:df39ce4:       }
1:df39ce4: 
1:bbd2b7e:       if (usesLongIDs) {
1:bbd2b7e:         long userID = userIDIndex.get(userIndex);
1:bbd2b7e:         userIDWritable.set(userID);
1:bbd2b7e: 
1:bbd2b7e:         for (RecommendedItem topItem : recommendedItems) {
1:bbd2b7e:           // remap item IDs
1:bbd2b7e:           long itemID = itemIDIndex.get((int) topItem.getItemID());
1:bbd2b7e:           ((MutableRecommendedItem) topItem).setItemID(itemID);
1:bbd2b7e:         }
1:bbd2b7e: 
1:bbd2b7e:       } else {
1:bbd2b7e:         userIDWritable.set(userIndex);
1:bbd2b7e:       }
1:bbd2b7e: 
1:df39ce4:       recommendations.set(recommendedItems);
1:df39ce4:       ctx.write(userIDWritable, recommendations);
1:df39ce4:     }
1:df39ce4:   }
1:df39ce4: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     return new Pair<>(U, M);
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1:     int userIndex = userIndexWritable.get();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bbd2b7e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils;
1: import org.apache.mahout.math.map.OpenIntLongHashMap;
/////////////////////////////////////////////////////////////////////////
1: public class PredictionMapper extends SharingMapper<IntWritable,VectorWritable,LongWritable,RecommendedItemsWritable,
1:   private boolean usesLongIDs;
1:   private OpenIntLongHashMap userIDIndex;
1:   private OpenIntLongHashMap itemIDIndex;
1: 
1:   private final LongWritable userIDWritable = new LongWritable();
1:     Configuration conf = ctx.getConfiguration();
1:     Path pathToU = new Path(conf.get(RecommenderJob.USER_FEATURES_PATH));
1:     Path pathToM = new Path(conf.get(RecommenderJob.ITEM_FEATURES_PATH));
1:     OpenIntObjectHashMap<Vector> U = ALS.readMatrixByRows(pathToU, conf);
1:     OpenIntObjectHashMap<Vector> M = ALS.readMatrixByRows(pathToM, conf);
1:     Configuration conf = ctx.getConfiguration();
1:     recommendationsPerUser = conf.getInt(RecommenderJob.NUM_RECOMMENDATIONS,
1:         RecommenderJob.DEFAULT_NUM_RECOMMENDATIONS);
1:     maxRating = Float.parseFloat(conf.get(RecommenderJob.MAX_RATING));
1: 
1:     usesLongIDs = conf.getBoolean(ParallelALSFactorizationJob.USES_LONG_IDS, false);
1:     if (usesLongIDs) {
1:       userIDIndex = TasteHadoopUtils.readIDIndexMap(conf.get(RecommenderJob.USER_INDEX_PATH), conf);
1:       itemIDIndex = TasteHadoopUtils.readIDIndexMap(conf.get(RecommenderJob.ITEM_INDEX_PATH), conf);
1:     }
1:   protected void map(IntWritable userIndexWritable, VectorWritable ratingsWritable, Context ctx)
/////////////////////////////////////////////////////////////////////////
0:     final int userIndex = userIndexWritable.get();
/////////////////////////////////////////////////////////////////////////
1:     final Vector userFeatures = U.get(userIndex);
/////////////////////////////////////////////////////////////////////////
1:       if (usesLongIDs) {
1:         long userID = userIDIndex.get(userIndex);
1:         userIDWritable.set(userID);
1: 
1:         for (RecommendedItem topItem : recommendedItems) {
1:           // remap item IDs
1:           long itemID = itemIDIndex.get((int) topItem.getItemID());
1:           ((MutableRecommendedItem) topItem).setItemID(itemID);
1:         }
1: 
1:       } else {
1:         userIDWritable.set(userIndex);
1:       }
1: 
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     throws IOException, InterruptedException {
commit:d95bdda
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.hadoop.MutableRecommendedItem;
1: import org.apache.mahout.cf.taste.hadoop.TopItemsQueue;
/////////////////////////////////////////////////////////////////////////
1:     final TopItemsQueue topItemsQueue = new TopItemsQueue(recommendationsPerUser);
/////////////////////////////////////////////////////////////////////////
1:           MutableRecommendedItem top = topItemsQueue.top();
1:             topItemsQueue.updateTop();
1:     List<RecommendedItem> recommendedItems = topItemsQueue.getTopItems();
commit:5d66758
/////////////////////////////////////////////////////////////////////////
0: public class PredictionMapper extends SharingMapper<IntWritable,VectorWritable,IntWritable,RecommendedItemsWritable,
commit:df39ce4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.als;
1: 
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.mahout.cf.taste.hadoop.RecommendedItemsWritable;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.function.IntObjectProcedure;
1: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1: import org.apache.mahout.math.set.OpenIntHashSet;
1: 
1: import java.io.IOException;
0: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
1:  * a multithreaded mapper that loads the feature matrices U and M into memory. Afterwards it computes recommendations
1:  * from these. Can be executed by a {@link MultithreadedSharingMapper}.
1:  */
0: class SharingPredictionMapper extends SharingMapper<IntWritable,VectorWritable,IntWritable,RecommendedItemsWritable,
1:     Pair<OpenIntObjectHashMap<Vector>,OpenIntObjectHashMap<Vector>>> {
1: 
1:   private int recommendationsPerUser;
1:   private float maxRating;
1: 
1:   private final RecommendedItemsWritable recommendations = new RecommendedItemsWritable();
1: 
1:   @Override
1:   Pair<OpenIntObjectHashMap<Vector>, OpenIntObjectHashMap<Vector>> createSharedInstance(Context ctx) {
0:     Path pathToU = new Path(ctx.getConfiguration().get(RecommenderJob.USER_FEATURES_PATH));
0:     Path pathToM = new Path(ctx.getConfiguration().get(RecommenderJob.ITEM_FEATURES_PATH));
1: 
0:     OpenIntObjectHashMap<Vector> U = ALS.readMatrixByRows(pathToU, ctx.getConfiguration());
0:     OpenIntObjectHashMap<Vector> M = ALS.readMatrixByRows(pathToM, ctx.getConfiguration());
1: 
0:     return new Pair<OpenIntObjectHashMap<Vector>, OpenIntObjectHashMap<Vector>>(U, M);
1:   }
1: 
1:   @Override
1:   protected void setup(Context ctx) throws IOException, InterruptedException {
0:     recommendationsPerUser = ctx.getConfiguration().getInt(RecommenderJob.NUM_RECOMMENDATIONS,
0:       RecommenderJob.DEFAULT_NUM_RECOMMENDATIONS);
0:     maxRating = Float.parseFloat(ctx.getConfiguration().get(RecommenderJob.MAX_RATING));
1:   }
1: 
1:   @Override
0:   protected void map(IntWritable userIDWritable, VectorWritable ratingsWritable, Context ctx)
0:       throws IOException, InterruptedException {
1: 
1:     Pair<OpenIntObjectHashMap<Vector>, OpenIntObjectHashMap<Vector>> uAndM = getSharedInstance();
1:     OpenIntObjectHashMap<Vector> U = uAndM.getFirst();
1:     OpenIntObjectHashMap<Vector> M = uAndM.getSecond();
1: 
1:     Vector ratings = ratingsWritable.get();
0:     final int userID = userIDWritable.get();
1:     final OpenIntHashSet alreadyRatedItems = new OpenIntHashSet(ratings.getNumNondefaultElements());
1: 
0:     Iterator<Vector.Element> ratingsIterator = ratings.iterateNonZero();
0:     while (ratingsIterator.hasNext()) {
0:       alreadyRatedItems.add(ratingsIterator.next().index());
1:     }
1: 
0:     final TopItemQueue topItemQueue = new TopItemQueue(recommendationsPerUser);
0:     final Vector userFeatures = U.get(userID);
1: 
1:     M.forEachPair(new IntObjectProcedure<Vector>() {
1:       @Override
1:       public boolean apply(int itemID, Vector itemFeatures) {
1:         if (!alreadyRatedItems.contains(itemID)) {
1:           double predictedRating = userFeatures.dot(itemFeatures);
1: 
0:           MutableRecommendedItem top = topItemQueue.top();
1:           if (predictedRating > top.getValue()) {
1:             top.set(itemID, (float) predictedRating);
0:             topItemQueue.updateTop();
1:           }
1:         }
1:         return true;
1:       }
1:     });
1: 
0:     List<RecommendedItem> recommendedItems = topItemQueue.getTopItems();
1: 
1:     if (!recommendedItems.isEmpty()) {
1: 
1:       // cap predictions to maxRating
1:       for (RecommendedItem topItem : recommendedItems) {
1:         ((MutableRecommendedItem) topItem).capToMaxValue(maxRating);
1:       }
1: 
1:       recommendations.set(recommendedItems);
1:       ctx.write(userIDWritable, recommendations);
1:     }
1:   }
1: }
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element e : ratings.nonZeroes()) {
1:       alreadyRatedItems.add(e.index());
============================================================================