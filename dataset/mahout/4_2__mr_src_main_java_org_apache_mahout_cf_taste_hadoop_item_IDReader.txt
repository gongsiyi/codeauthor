1:76d3f74: /**
1:76d3f74:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:76d3f74:  * contributor license agreements.  See the NOTICE file distributed with
1:76d3f74:  * this work for additional information regarding copyright ownership.
1:76d3f74:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:76d3f74:  * (the "License"); you may not use this file except in compliance with
1:76d3f74:  * the License.  You may obtain a copy of the License at
1:76d3f74:  *
1:76d3f74:  *     http://www.apache.org/licenses/LICENSE-2.0
1:76d3f74:  *
1:76d3f74:  * Unless required by applicable law or agreed to in writing, software
1:76d3f74:  * distributed under the License is distributed on an "AS IS" BASIS,
1:76d3f74:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:76d3f74:  * See the License for the specific language governing permissions and
1:76d3f74:  * limitations under the License.
1:76d3f74:  */
3:76d3f74: 
1:76d3f74: package org.apache.mahout.cf.taste.hadoop.item;
1:76d3f74: 
1:76d3f74: import java.io.IOException;
1:76d3f74: import java.io.InputStream;
1:85f9ece: import java.util.HashMap;
1:76d3f74: import java.util.Map;
1:76d3f74: import java.util.regex.Pattern;
1:85f9ece: 
1:76d3f74: import org.apache.hadoop.conf.Configuration;
1:76d3f74: import org.apache.hadoop.fs.Path;
1:76d3f74: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:76d3f74: import org.apache.mahout.common.HadoopUtil;
1:76d3f74: import org.apache.mahout.common.iterator.FileLineIterable;
1:76d3f74: import org.slf4j.Logger;
1:76d3f74: import org.slf4j.LoggerFactory;
1:76d3f74: 
1:76d3f74: /**
1:76d3f74:  * Reads user ids and item ids from files specified in usersFile, itemsFile or userItemFile options in item-based
1:76d3f74:  *  recommender. Composes a list of users and a list of items which can be used by
1:76d3f74:  * {@link org.apache.mahout.cf.taste.hadoop.item.UserVectorSplitterMapper} and
1:76d3f74:  * {@link org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer}.
1:76d3f74:  */
1:76d3f74: public class IDReader {
1:76d3f74: 
1:76d3f74:   static final String USER_ITEM_FILE = "userItemFile";
1:76d3f74: 
1:76d3f74:   private static final Logger log = LoggerFactory.getLogger(IDReader.class);
1:76d3f74:   private static final Pattern SEPARATOR = Pattern.compile("[\t,]");
1:76d3f74: 
1:76d3f74:   private Configuration conf;
1:76d3f74: 
1:76d3f74:   private String usersFile;
1:76d3f74:   private String itemsFile;
1:76d3f74:   private String userItemFile;
1:76d3f74: 
1:76d3f74:   private FastIDSet userIds;
1:76d3f74:   private FastIDSet itemIds;
1:76d3f74: 
1:76d3f74:   private FastIDSet emptySet;
1:76d3f74: 
1:76d3f74:   /* Key - user id, value - a set of item ids to include into recommendations for this user */
1:76d3f74:   private Map<Long, FastIDSet> userItemFilter;
1:76d3f74: 
1:76d3f74:   /**
1:76d3f74:    * Creates a new IDReader
1:76d3f74:    * 
1:76d3f74:    * @param conf Job configuration
1:76d3f74:    */
1:76d3f74:   public IDReader(Configuration conf) {
1:76d3f74:     this.conf = conf;
1:76d3f74:     emptySet = new FastIDSet();
1:76d3f74: 
1:76d3f74:     usersFile = conf.get(UserVectorSplitterMapper.USERS_FILE);
1:76d3f74:     itemsFile = conf.get(AggregateAndRecommendReducer.ITEMS_FILE);
1:76d3f74:     userItemFile = conf.get(USER_ITEM_FILE);
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   /**
1:76d3f74:    * Reads user ids and item ids from files specified in a job configuration
1:76d3f74:    * 
1:76d3f74:    * @throws IOException if an error occurs during file read operation
1:76d3f74:    * 
1:76d3f74:    * @throws IllegalStateException if userItemFile option is specified together with usersFile or itemsFile
1:76d3f74:    */
1:76d3f74:   public void readIDs() throws IOException, IllegalStateException {
1:76d3f74:     if (isUserItemFileSpecified()) {
1:76d3f74:       readUserItemFilterIfNeeded();
1:76d3f74:     }
1:76d3f74: 
1:76d3f74:     if (isUsersFileSpecified() || isUserItemFilterSpecified()) {
1:76d3f74:       readUserIds();
1:76d3f74:     }
1:76d3f74: 
1:76d3f74:     if (isItemsFileSpecified() || isUserItemFilterSpecified()) {
1:76d3f74:       readItemIds();
1:76d3f74:     }
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   /**
1:76d3f74:    * Gets a collection of items which should be recommended for a user
1:76d3f74:    * 
1:76d3f74:    * @param userId ID of a user we are interested in
1:76d3f74:    * @return if a userItemFile option is specified, and that file contains at least one item ID for the user,
1:76d3f74:    *         then this method returns a {@link FastIDSet} object populated with item IDs. Otherwise, this
1:76d3f74:    *         method returns an empty set.
1:76d3f74:    */
1:76d3f74:   public FastIDSet getItemsToRecommendForUser(Long userId) {
1:76d3f74:     if (isUserItemFilterSpecified() && userItemFilter.containsKey(userId)) {
1:76d3f74:       return userItemFilter.get(userId);
1:76d3f74:     } else {
1:76d3f74:       return emptySet;
1:76d3f74:     }
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   private void readUserIds() throws IOException, IllegalStateException {
1:76d3f74:     if (isUsersFileSpecified() && !isUserItemFileSpecified()) {
1:76d3f74:       userIds = readIDList(usersFile);
1:76d3f74:     } else if (isUserItemFileSpecified() && !isUsersFileSpecified()) {
1:76d3f74:       readUserItemFilterIfNeeded();
1:76d3f74:       userIds = extractAllUserIdsFromUserItemFilter(userItemFilter);
1:87c15be:     } else if (!isUsersFileSpecified()) {
1:76d3f74:       throw new IllegalStateException("Neither usersFile nor userItemFile options are specified");
1:76d3f74:     } else {
1:76d3f74:       throw new IllegalStateException("usersFile and userItemFile options cannot be used simultaneously");
1:76d3f74:     }
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   private void readItemIds() throws IOException, IllegalStateException {
1:76d3f74:     if (isItemsFileSpecified() && !isUserItemFileSpecified()) {
1:76d3f74:       itemIds = readIDList(itemsFile);
1:76d3f74:     } else if (isUserItemFileSpecified() && !isItemsFileSpecified()) {
1:76d3f74:       readUserItemFilterIfNeeded();
1:76d3f74:       itemIds = extractAllItemIdsFromUserItemFilter(userItemFilter);
1:87c15be:     } else if (!isItemsFileSpecified()) {
1:76d3f74:       throw new IllegalStateException("Neither itemsFile nor userItemFile options are specified");
1:76d3f74:     } else {
1:76d3f74:       throw new IllegalStateException("itemsFile and userItemFile options cannot be specified simultaneously");
1:76d3f74:     }
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   private void readUserItemFilterIfNeeded() throws IOException {
1:76d3f74:     if (!isUserItemFilterSpecified() && isUserItemFileSpecified()) {
1:76d3f74:       userItemFilter = readUserItemFilter(userItemFile);
1:76d3f74:     }
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   private Map<Long, FastIDSet> readUserItemFilter(String pathString) throws IOException {
1:85f9ece:     Map<Long, FastIDSet> result = new HashMap<>();
1:76d3f74: 
1:85f9ece:     try (InputStream in = openFile(pathString)) {
1:76d3f74:       for (String line : new FileLineIterable(in)) {
3:76d3f74:         try {
1:87c15be:           String[] tokens = SEPARATOR.split(line);
1:76d3f74:           Long userId = Long.parseLong(tokens[0]);
1:76d3f74:           Long itemId = Long.parseLong(tokens[1]);
1:76d3f74: 
1:76d3f74:           addUserAndItemIdToUserItemFilter(result, userId, itemId);
1:76d3f74:         } catch (NumberFormatException nfe) {
1:76d3f74:           log.warn("userItemFile line ignored: {}", line);
1:76d3f74:         }
1:76d3f74:       }
1:76d3f74:     }
1:76d3f74: 
1:76d3f74:     return result;
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   void addUserAndItemIdToUserItemFilter(Map<Long, FastIDSet> filter, Long userId, Long itemId) {
1:76d3f74:     FastIDSet itemIds;
1:76d3f74: 
1:76d3f74:     if (filter.containsKey(userId)) {
1:76d3f74:       itemIds = filter.get(userId);
1:76d3f74:     } else {
1:76d3f74:       itemIds = new FastIDSet();
1:76d3f74:       filter.put(userId, itemIds);
1:76d3f74:     }
1:76d3f74: 
1:76d3f74:     itemIds.add(itemId);
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   static FastIDSet extractAllUserIdsFromUserItemFilter(Map<Long, FastIDSet> filter) {
1:76d3f74:     FastIDSet result = new FastIDSet();
1:76d3f74: 
1:76d3f74:     for (Long userId : filter.keySet()) {
1:76d3f74:       result.add(userId);
1:76d3f74:     }
1:76d3f74: 
1:76d3f74:     return result;
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   private FastIDSet extractAllItemIdsFromUserItemFilter(Map<Long, FastIDSet> filter) {
1:76d3f74:     FastIDSet result = new FastIDSet();
1:76d3f74: 
1:76d3f74:     for (FastIDSet itemIds : filter.values()) {
1:76d3f74:       result.addAll(itemIds);
1:76d3f74:     }
1:76d3f74: 
1:76d3f74:     return result;
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   private FastIDSet readIDList(String pathString) throws IOException {
1:76d3f74:     FastIDSet result = null;
1:76d3f74: 
1:76d3f74:     if (pathString != null) {
1:76d3f74:       result = new FastIDSet();
1:76d3f74: 
1:85f9ece:       try (InputStream in = openFile(pathString)){
1:76d3f74:         for (String line : new FileLineIterable(in)) {
1:76d3f74:           try {
1:76d3f74:             result.add(Long.parseLong(line));
1:76d3f74:           } catch (NumberFormatException nfe) {
1:76d3f74:             log.warn("line ignored: {}", line);
1:76d3f74:           }
1:76d3f74:         }
1:76d3f74:       }
1:76d3f74:     }
1:76d3f74: 
1:76d3f74:     return result;
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   private InputStream openFile(String pathString) throws IOException {
1:76d3f74:     return HadoopUtil.openStream(new Path(pathString), conf);
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   public boolean isUsersFileSpecified () {
1:76d3f74:     return usersFile != null;
1:76d3f74:   }
1:76d3f74:   
1:76d3f74:   public boolean isItemsFileSpecified () {
1:76d3f74:     return itemsFile != null;
1:76d3f74:   }
1:76d3f74:   
1:76d3f74:   public boolean isUserItemFileSpecified () {
1:76d3f74:     return userItemFile != null;
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   public boolean isUserItemFilterSpecified() {
1:76d3f74:     return userItemFilter != null;
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   public FastIDSet getUserIds() {
1:76d3f74:     return userIds;
1:76d3f74:   }
1:76d3f74: 
1:76d3f74:   public FastIDSet getItemIds() {
1:76d3f74:     return itemIds;
1:76d3f74:   }
1:76d3f74: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: 
/////////////////////////////////////////////////////////////////////////
1:     Map<Long, FastIDSet> result = new HashMap<>();
1:     try (InputStream in = openFile(pathString)) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       try (InputStream in = openFile(pathString)){
/////////////////////////////////////////////////////////////////////////
commit:87c15be
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Maps;
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     } else if (!isUsersFileSpecified()) {
/////////////////////////////////////////////////////////////////////////
1:     } else if (!isItemsFileSpecified()) {
/////////////////////////////////////////////////////////////////////////
1:           String[] tokens = SEPARATOR.split(line);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:76d3f74
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.item;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.regex.Pattern;
1: 
0: import com.google.common.collect.Maps;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.common.HadoopUtil;
1: import org.apache.mahout.common.iterator.FileLineIterable;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import com.google.common.io.Closeables;
1: 
1: /**
1:  * Reads user ids and item ids from files specified in usersFile, itemsFile or userItemFile options in item-based
1:  *  recommender. Composes a list of users and a list of items which can be used by
1:  * {@link org.apache.mahout.cf.taste.hadoop.item.UserVectorSplitterMapper} and
1:  * {@link org.apache.mahout.cf.taste.hadoop.item.AggregateAndRecommendReducer}.
1:  */
1: public class IDReader {
1: 
1:   static final String USER_ITEM_FILE = "userItemFile";
1: 
1:   private static final Logger log = LoggerFactory.getLogger(IDReader.class);
1:   private static final Pattern SEPARATOR = Pattern.compile("[\t,]");
1: 
1:   private Configuration conf;
1: 
1:   private String usersFile;
1:   private String itemsFile;
1:   private String userItemFile;
1: 
1:   private FastIDSet userIds;
1:   private FastIDSet itemIds;
1: 
1:   private FastIDSet emptySet;
1: 
1:   /* Key - user id, value - a set of item ids to include into recommendations for this user */
1:   private Map<Long, FastIDSet> userItemFilter;
1: 
1:   /**
1:    * Creates a new IDReader
1:    * 
1:    * @param conf Job configuration
1:    */
1:   public IDReader(Configuration conf) {
1:     this.conf = conf;
1:     emptySet = new FastIDSet();
1: 
1:     usersFile = conf.get(UserVectorSplitterMapper.USERS_FILE);
1:     itemsFile = conf.get(AggregateAndRecommendReducer.ITEMS_FILE);
1:     userItemFile = conf.get(USER_ITEM_FILE);
1:   }
1: 
1:   /**
1:    * Reads user ids and item ids from files specified in a job configuration
1:    * 
1:    * @throws IOException if an error occurs during file read operation
1:    * 
1:    * @throws IllegalStateException if userItemFile option is specified together with usersFile or itemsFile
1:    */
1:   public void readIDs() throws IOException, IllegalStateException {
1:     if (isUserItemFileSpecified()) {
1:       readUserItemFilterIfNeeded();
1:     }
1: 
1:     if (isUsersFileSpecified() || isUserItemFilterSpecified()) {
1:       readUserIds();
1:     }
1: 
1:     if (isItemsFileSpecified() || isUserItemFilterSpecified()) {
1:       readItemIds();
1:     }
1:   }
1: 
1:   /**
1:    * Gets a collection of items which should be recommended for a user
1:    * 
1:    * @param userId ID of a user we are interested in
1:    * @return if a userItemFile option is specified, and that file contains at least one item ID for the user,
1:    *         then this method returns a {@link FastIDSet} object populated with item IDs. Otherwise, this
1:    *         method returns an empty set.
1:    */
1:   public FastIDSet getItemsToRecommendForUser(Long userId) {
1:     if (isUserItemFilterSpecified() && userItemFilter.containsKey(userId)) {
1:       return userItemFilter.get(userId);
1:     } else {
1:       return emptySet;
1:     }
1:   }
1: 
1:   private void readUserIds() throws IOException, IllegalStateException {
1:     if (isUsersFileSpecified() && !isUserItemFileSpecified()) {
1:       userIds = readIDList(usersFile);
1:     } else if (isUserItemFileSpecified() && !isUsersFileSpecified()) {
1:       readUserItemFilterIfNeeded();
1:       userIds = extractAllUserIdsFromUserItemFilter(userItemFilter);
0:     } else if (!isUsersFileSpecified() && !isUserItemFileSpecified()) {
1:       throw new IllegalStateException("Neither usersFile nor userItemFile options are specified");
1:     } else {
1:       throw new IllegalStateException("usersFile and userItemFile options cannot be used simultaneously");
1:     }
1:   }
1: 
1:   private void readItemIds() throws IOException, IllegalStateException {
1:     if (isItemsFileSpecified() && !isUserItemFileSpecified()) {
1:       itemIds = readIDList(itemsFile);
1:     } else if (isUserItemFileSpecified() && !isItemsFileSpecified()) {
1:       readUserItemFilterIfNeeded();
1:       itemIds = extractAllItemIdsFromUserItemFilter(userItemFilter);
0:     } else if (!isItemsFileSpecified() && !isUserItemFileSpecified()) {
1:       throw new IllegalStateException("Neither itemsFile nor userItemFile options are specified");
1:     } else {
1:       throw new IllegalStateException("itemsFile and userItemFile options cannot be specified simultaneously");
1:     }
1:   }
1: 
1:   private void readUserItemFilterIfNeeded() throws IOException {
1:     if (!isUserItemFilterSpecified() && isUserItemFileSpecified()) {
1:       userItemFilter = readUserItemFilter(userItemFile);
1:     }
1:   }
1: 
1:   private Map<Long, FastIDSet> readUserItemFilter(String pathString) throws IOException {
0:     Map<Long, FastIDSet> result = Maps.newHashMap();
0:     InputStream in = openFile(pathString);
1: 
1:     try {
1:       for (String line : new FileLineIterable(in)) {
1:         try {
0:           String[] tokens = SEPARATOR.split(line.toString());
1:           Long userId = Long.parseLong(tokens[0]);
1:           Long itemId = Long.parseLong(tokens[1]);
1: 
1:           addUserAndItemIdToUserItemFilter(result, userId, itemId);
1:         } catch (NumberFormatException nfe) {
1:           log.warn("userItemFile line ignored: {}", line);
1:         }
1:       }
0:     } finally {
0:       Closeables.close(in, true);
1:     }
1: 
1:     return result;
1:   }
1: 
1:   void addUserAndItemIdToUserItemFilter(Map<Long, FastIDSet> filter, Long userId, Long itemId) {
1:     FastIDSet itemIds;
1: 
1:     if (filter.containsKey(userId)) {
1:       itemIds = filter.get(userId);
1:     } else {
1:       itemIds = new FastIDSet();
1:       filter.put(userId, itemIds);
1:     }
1: 
1:     itemIds.add(itemId);
1:   }
1: 
1:   static FastIDSet extractAllUserIdsFromUserItemFilter(Map<Long, FastIDSet> filter) {
1:     FastIDSet result = new FastIDSet();
1: 
1:     for (Long userId : filter.keySet()) {
1:       result.add(userId);
1:     }
1: 
1:     return result;
1:   }
1: 
1:   private FastIDSet extractAllItemIdsFromUserItemFilter(Map<Long, FastIDSet> filter) {
1:     FastIDSet result = new FastIDSet();
1: 
1:     for (FastIDSet itemIds : filter.values()) {
1:       result.addAll(itemIds);
1:     }
1: 
1:     return result;
1:   }
1: 
1:   private FastIDSet readIDList(String pathString) throws IOException {
1:     FastIDSet result = null;
1: 
1:     if (pathString != null) {
1:       result = new FastIDSet();
0:       InputStream in = openFile(pathString);
1: 
1:       try {
1:         for (String line : new FileLineIterable(in)) {
1:           try {
1:             result.add(Long.parseLong(line));
1:           } catch (NumberFormatException nfe) {
1:             log.warn("line ignored: {}", line);
1:           }
1:         }
0:       } finally {
0:         Closeables.close(in, true);
1:       }
1:     }
1: 
1:     return result;
1:   }
1: 
1:   private InputStream openFile(String pathString) throws IOException {
1:     return HadoopUtil.openStream(new Path(pathString), conf);
1:   }
1: 
1:   public boolean isUsersFileSpecified () {
1:     return usersFile != null;
1:   }
1:   
1:   public boolean isItemsFileSpecified () {
1:     return itemsFile != null;
1:   }
1:   
1:   public boolean isUserItemFileSpecified () {
1:     return userItemFile != null;
1:   }
1: 
1:   public boolean isUserItemFilterSpecified() {
1:     return userItemFilter != null;
1:   }
1: 
1:   public FastIDSet getUserIds() {
1:     return userIds;
1:   }
1: 
1:   public FastIDSet getItemIds() {
1:     return itemIds;
1:   }
1: }
============================================================================