1:9a15cb8: /*
1:9a15cb8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9a15cb8:  * contributor license agreements.  See the NOTICE file distributed with
1:9a15cb8:  * this work for additional information regarding copyright ownership.
1:9a15cb8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9a15cb8:  * (the "License"); you may not use this file except in compliance with
1:9a15cb8:  * the License.  You may obtain a copy of the License at
1:9a15cb8:  *
1:9a15cb8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9a15cb8:  *
1:9a15cb8:  * Unless required by applicable law or agreed to in writing, software
1:9a15cb8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9a15cb8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9a15cb8:  * See the License for the specific language governing permissions and
1:9a15cb8:  * limitations under the License.
1:9a15cb8:  */
3:9a15cb8: 
1:9a15cb8: package org.apache.mahout.text.wikipedia;
1:9a15cb8: 
1:6a4942c: import com.google.common.io.Closeables;
1:67a531e: import org.apache.commons.lang3.StringEscapeUtils;
1:9a15cb8: import org.apache.hadoop.conf.Configuration;
1:9a15cb8: import org.apache.hadoop.io.DefaultStringifier;
1:9a15cb8: import org.apache.hadoop.io.LongWritable;
1:9a15cb8: import org.apache.hadoop.io.Text;
1:9a15cb8: import org.apache.hadoop.mapreduce.Mapper;
1:9a15cb8: import org.apache.hadoop.util.GenericsUtil;
1:9a15cb8: import org.apache.lucene.analysis.Analyzer;
1:9a15cb8: import org.apache.lucene.analysis.TokenStream;
1:9a15cb8: import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
1:9a15cb8: import org.apache.mahout.common.ClassUtils;
1:9a15cb8: import org.slf4j.Logger;
1:9a15cb8: import org.slf4j.LoggerFactory;
1:39b8c2d: 
1:85f9ece: import java.io.IOException;
1:85f9ece: import java.io.StringReader;
1:85f9ece: import java.util.ArrayList;
1:85f9ece: import java.util.HashSet;
1:85f9ece: import java.util.List;
1:85f9ece: import java.util.Locale;
1:85f9ece: import java.util.Set;
1:85f9ece: import java.util.regex.Pattern;
1:9a15cb8: 
1:9a15cb8: /**
1:9a15cb8:  * Maps over Wikipedia xml format and output all document having the category listed in the input category
1:9a15cb8:  * file
1:9a15cb8:  * 
1:9a15cb8:  */
1:9a15cb8: public class WikipediaDatasetCreatorMapper extends Mapper<LongWritable, Text, Text, Text> {
1:9a15cb8: 
1:9a15cb8:   private static final Logger log = LoggerFactory.getLogger(WikipediaDatasetCreatorMapper.class);
1:9a15cb8: 
1:9a15cb8:   private static final Pattern SPACE_NON_ALPHA_PATTERN = Pattern.compile("[\\s\\W]");
1:9a15cb8:   private static final Pattern OPEN_TEXT_TAG_PATTERN = Pattern.compile("<text xml:space=\"preserve\">");
1:9a15cb8:   private static final Pattern CLOSE_TEXT_TAG_PATTERN = Pattern.compile("</text>");
1:9a15cb8: 
1:9a15cb8:   private List<String> inputCategories;
1:9a15cb8:   private List<Pattern> inputCategoryPatterns;
1:9a15cb8:   private boolean exactMatchOnly;
1:9a15cb8:   private Analyzer analyzer;
1:9a15cb8: 
1:9a15cb8:   @Override
1:9a15cb8:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1:9a15cb8:     String document = value.toString();
1:67a531e:     document = StringEscapeUtils.unescapeHtml4(CLOSE_TEXT_TAG_PATTERN.matcher(
1:9a15cb8:         OPEN_TEXT_TAG_PATTERN.matcher(document).replaceFirst("")).replaceAll(""));
1:9a15cb8:     String catMatch = findMatchingCategory(document);
1:9a15cb8:     if (!"Unknown".equals(catMatch)) {
1:9a15cb8:       StringBuilder contents = new StringBuilder(1000);
1:6a4942c:       TokenStream stream = analyzer.tokenStream(catMatch, new StringReader(document));
1:9a15cb8:       CharTermAttribute termAtt = stream.addAttribute(CharTermAttribute.class);
1:9a15cb8:       stream.reset();
1:9a15cb8:       while (stream.incrementToken()) {
1:9a15cb8:         contents.append(termAtt.buffer(), 0, termAtt.length()).append(' ');
1:9a15cb8:       }
1:9a15cb8:       context.write(
1:9a15cb8:           new Text(SPACE_NON_ALPHA_PATTERN.matcher(catMatch).replaceAll("_")),
1:9a15cb8:           new Text(contents.toString()));
1:6a4942c:       stream.end();
1:31cb292:       Closeables.close(stream, true);
1:9a15cb8:     }
1:9a15cb8:   }
1:9a15cb8: 
1:9a15cb8:   @Override
1:9a15cb8:   protected void setup(Context context) throws IOException, InterruptedException {
1:9a15cb8:     super.setup(context);
1:9a15cb8: 
1:9a15cb8:     Configuration conf = context.getConfiguration();
1:9a15cb8: 
1:9a15cb8:     if (inputCategories == null) {
1:85f9ece:       Set<String> newCategories = new HashSet<>();
1:9a15cb8:       DefaultStringifier<Set<String>> setStringifier =
1:85f9ece:           new DefaultStringifier<>(conf, GenericsUtil.getClass(newCategories));
1:9a15cb8:       String categoriesStr = conf.get("wikipedia.categories", setStringifier.toString(newCategories));
1:9a15cb8:       Set<String> inputCategoriesSet = setStringifier.fromString(categoriesStr);
1:85f9ece:       inputCategories = new ArrayList<>(inputCategoriesSet);
1:85f9ece:       inputCategoryPatterns = new ArrayList<>(inputCategories.size());
1:9a15cb8:       for (String inputCategory : inputCategories) {
1:9a15cb8:         inputCategoryPatterns.add(Pattern.compile(".*\\b" + inputCategory + "\\b.*"));
1:9a15cb8:       }
1:9a15cb8: 
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     exactMatchOnly = conf.getBoolean("exact.match.only", false);
1:9a15cb8: 
1:9a15cb8:     if (analyzer == null) {
1:9a15cb8:       String analyzerStr = conf.get("analyzer.class", WikipediaAnalyzer.class.getName());
1:9a15cb8:       analyzer = ClassUtils.instantiateAs(analyzerStr, Analyzer.class);
1:9a15cb8:     }
1:9a15cb8: 
1:9a15cb8:     log.info("Configure: Input Categories size: {} Exact Match: {} Analyzer: {}",
1:8396a27:              inputCategories.size(), exactMatchOnly, analyzer.getClass().getName());
1:9a15cb8:   }
1:9a15cb8: 
1:9a15cb8:   private String findMatchingCategory(String document) {
1:9a15cb8:     int startIndex = 0;
1:9a15cb8:     int categoryIndex;
1:9a15cb8:     while ((categoryIndex = document.indexOf("[[Category:", startIndex)) != -1) {
1:9a15cb8:       categoryIndex += 11;
1:9a15cb8:       int endIndex = document.indexOf("]]", categoryIndex);
1:9a15cb8:       if (endIndex >= document.length() || endIndex < 0) {
1:9a15cb8:         break;
1:9a15cb8:       }
1:9a15cb8:       String category = document.substring(categoryIndex, endIndex).toLowerCase(Locale.ENGLISH).trim();
1:9a15cb8:       // categories.add(category.toLowerCase());
1:9a15cb8:       if (exactMatchOnly && inputCategories.contains(category)) {
1:9a15cb8:         return category;
1:9a15cb8:       }
1:9a15cb8:       if (!exactMatchOnly) {
1:9a15cb8:         for (int i = 0; i < inputCategories.size(); i++) {
1:9a15cb8:           String inputCategory = inputCategories.get(i);
1:9a15cb8:           Pattern inputCategoryPattern = inputCategoryPatterns.get(i);
1:9a15cb8:           if (inputCategoryPattern.matcher(category).matches()) { // inexact match with word boundary.
1:9a15cb8:             return inputCategory;
1:9a15cb8:           }
1:9a15cb8:         }
1:9a15cb8:       }
1:9a15cb8:       startIndex = endIndex;
1:9a15cb8:     }
1:9a15cb8:     return "Unknown";
1:9a15cb8:   }
1:9a15cb8: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.StringReader;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Locale;
1: import java.util.Set;
1: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
1:       Set<String> newCategories = new HashSet<>();
1:           new DefaultStringifier<>(conf, GenericsUtil.getClass(newCategories));
1:       inputCategories = new ArrayList<>(inputCategoriesSet);
1:       inputCategoryPatterns = new ArrayList<>(inputCategories.size());
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(stream, true);
commit:6a4942c
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
1:       TokenStream stream = analyzer.tokenStream(catMatch, new StringReader(document));
/////////////////////////////////////////////////////////////////////////
1:       stream.end();
0:       Closeables.closeQuietly(stream);
author:smarthi
-------------------------------------------------------------------------------
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringEscapeUtils;
/////////////////////////////////////////////////////////////////////////
1:     document = StringEscapeUtils.unescapeHtml4(CLOSE_TEXT_TAG_PATTERN.matcher(
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
0:       Set<String> newCategories = Sets.newHashSet();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:              inputCategories.size(), exactMatchOnly, analyzer.getClass().getName());
author:Robin Anil
-------------------------------------------------------------------------------
commit:39b8c2d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
1: 
commit:9a15cb8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.text.wikipedia;
1: 
0: import java.io.IOException;
0: import java.io.StringReader;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Locale;
0: import java.util.Set;
0: import java.util.regex.Pattern;
1: 
0: import com.google.common.collect.Lists;
0: import org.apache.commons.lang.StringEscapeUtils;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.DefaultStringifier;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.hadoop.util.GenericsUtil;
1: import org.apache.lucene.analysis.Analyzer;
1: import org.apache.lucene.analysis.TokenStream;
1: 
1: import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
0: import org.apache.mahout.analysis.WikipediaAnalyzer;
1: import org.apache.mahout.common.ClassUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Maps over Wikipedia xml format and output all document having the category listed in the input category
1:  * file
1:  * 
1:  */
1: public class WikipediaDatasetCreatorMapper extends Mapper<LongWritable, Text, Text, Text> {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(WikipediaDatasetCreatorMapper.class);
1: 
1:   private static final Pattern SPACE_NON_ALPHA_PATTERN = Pattern.compile("[\\s\\W]");
1:   private static final Pattern OPEN_TEXT_TAG_PATTERN = Pattern.compile("<text xml:space=\"preserve\">");
1:   private static final Pattern CLOSE_TEXT_TAG_PATTERN = Pattern.compile("</text>");
1: 
1:   private List<String> inputCategories;
1:   private List<Pattern> inputCategoryPatterns;
1:   private boolean exactMatchOnly;
1:   private Analyzer analyzer;
1: 
1:   @Override
1:   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
1:     String document = value.toString();
0:     document = StringEscapeUtils.unescapeHtml(CLOSE_TEXT_TAG_PATTERN.matcher(
1:         OPEN_TEXT_TAG_PATTERN.matcher(document).replaceFirst("")).replaceAll(""));
1:     String catMatch = findMatchingCategory(document);
1:     if (!"Unknown".equals(catMatch)) {
1:       StringBuilder contents = new StringBuilder(1000);
0:       TokenStream stream = analyzer.reusableTokenStream(catMatch, new StringReader(document));
1:       CharTermAttribute termAtt = stream.addAttribute(CharTermAttribute.class);
1:       stream.reset();
1:       while (stream.incrementToken()) {
1:         contents.append(termAtt.buffer(), 0, termAtt.length()).append(' ');
1:       }
1:       context.write(
1:           new Text(SPACE_NON_ALPHA_PATTERN.matcher(catMatch).replaceAll("_")),
1:           new Text(contents.toString()));
1:     }
1:   }
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     super.setup(context);
1: 
1:     Configuration conf = context.getConfiguration();
1: 
1:     if (inputCategories == null) {
0:       Set<String> newCategories = new HashSet<String>();
1:       DefaultStringifier<Set<String>> setStringifier =
0:           new DefaultStringifier<Set<String>>(conf, GenericsUtil.getClass(newCategories));
1:       String categoriesStr = conf.get("wikipedia.categories", setStringifier.toString(newCategories));
1:       Set<String> inputCategoriesSet = setStringifier.fromString(categoriesStr);
0:       inputCategories = Lists.newArrayList(inputCategoriesSet);
0:       inputCategoryPatterns = Lists.newArrayListWithCapacity(inputCategories.size());
1:       for (String inputCategory : inputCategories) {
1:         inputCategoryPatterns.add(Pattern.compile(".*\\b" + inputCategory + "\\b.*"));
1:       }
1: 
1:     }
1: 
1:     exactMatchOnly = conf.getBoolean("exact.match.only", false);
1: 
1:     if (analyzer == null) {
1:       String analyzerStr = conf.get("analyzer.class", WikipediaAnalyzer.class.getName());
1:       analyzer = ClassUtils.instantiateAs(analyzerStr, Analyzer.class);
1:     }
1: 
1:     log.info("Configure: Input Categories size: {} Exact Match: {} Analyzer: {}",
0:              new Object[] {inputCategories.size(), exactMatchOnly, analyzer.getClass().getName()});
1:   }
1: 
1:   private String findMatchingCategory(String document) {
1:     int startIndex = 0;
1:     int categoryIndex;
1:     while ((categoryIndex = document.indexOf("[[Category:", startIndex)) != -1) {
1:       categoryIndex += 11;
1:       int endIndex = document.indexOf("]]", categoryIndex);
1:       if (endIndex >= document.length() || endIndex < 0) {
1:         break;
1:       }
1:       String category = document.substring(categoryIndex, endIndex).toLowerCase(Locale.ENGLISH).trim();
1:       // categories.add(category.toLowerCase());
1:       if (exactMatchOnly && inputCategories.contains(category)) {
1:         return category;
1:       }
1:       if (!exactMatchOnly) {
1:         for (int i = 0; i < inputCategories.size(); i++) {
1:           String inputCategory = inputCategories.get(i);
1:           Pattern inputCategoryPattern = inputCategoryPatterns.get(i);
1:           if (inputCategoryPattern.matcher(category).matches()) { // inexact match with word boundary.
1:             return inputCategory;
1:           }
1:         }
1:       }
1:       startIndex = endIndex;
1:     }
1:     return "Unknown";
1:   }
1: }
============================================================================