1:d95bdda: /**
1:d95bdda:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d95bdda:  * contributor license agreements.  See the NOTICE file distributed with
1:d95bdda:  * this work for additional information regarding copyright ownership.
1:d95bdda:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d95bdda:  * (the "License"); you may not use this file except in compliance with
1:d95bdda:  * the License.  You may obtain a copy of the License at
1:d95bdda:  *
1:d95bdda:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d95bdda:  *
1:d95bdda:  * Unless required by applicable law or agreed to in writing, software
1:d95bdda:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d95bdda:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d95bdda:  * See the License for the specific language governing permissions and
1:d95bdda:  * limitations under the License.
1:d95bdda:  */
2:d95bdda: 
1:d95bdda: package org.apache.mahout.cf.taste.hadoop.similarity.item;
1:d95bdda: 
1:85f9ece: import java.util.ArrayList;
1:d95bdda: import java.util.Collections;
1:d95bdda: import java.util.List;
1:d95bdda: 
1:85f9ece: import org.apache.lucene.util.PriorityQueue;
1:85f9ece: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItem;
1:85f9ece: 
1:d95bdda: public class TopSimilarItemsQueue extends PriorityQueue<SimilarItem> {
1:d95bdda: 
1:d95bdda:   private static final long SENTINEL_ID = Long.MIN_VALUE;
1:d95bdda: 
1:d95bdda:   private final int maxSize;
1:d95bdda: 
1:6d16230:   public TopSimilarItemsQueue(int maxSize) {
1:6d16230:     super(maxSize);
1:6d16230:     this.maxSize = maxSize;
1:6d16230:   }
1:d95bdda: 
1:6d16230:   public List<SimilarItem> getTopItems() {
1:85f9ece:     List<SimilarItem> items = new ArrayList<>(maxSize);
1:6d16230:     while (size() > 0) {
1:6d16230:       SimilarItem topItem = pop();
1:6d16230:       // filter out "sentinel" objects necessary for maintaining an efficient priority queue
1:6d16230:       if (topItem.getItemID() != SENTINEL_ID) {
1:6d16230:         items.add(topItem);
5:d95bdda:       }
1:d95bdda:     }
1:6d16230:     Collections.reverse(items);
1:6d16230:     return items;
1:6d16230:   }
1:d95bdda: 
1:6d16230:   @Override
1:6d16230:   protected boolean lessThan(SimilarItem one, SimilarItem two) {
1:6d16230:     return one.getSimilarity() < two.getSimilarity();
1:6d16230:   }
1:d95bdda: 
1:6d16230:   @Override
1:6d16230:   protected SimilarItem getSentinelObject() {
1:6d16230:     return new SimilarItem(SENTINEL_ID, Double.MIN_VALUE);
1:6d16230:   }
1:d95bdda: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import org.apache.lucene.util.PriorityQueue;
1: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItem;
1: 
/////////////////////////////////////////////////////////////////////////
1:     List<SimilarItem> items = new ArrayList<>(maxSize);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   public TopSimilarItemsQueue(int maxSize) {
1:     super(maxSize);
1:     this.maxSize = maxSize;
1:   }
1:   public List<SimilarItem> getTopItems() {
0:     List<SimilarItem> items = Lists.newArrayListWithCapacity(maxSize);
1:     while (size() > 0) {
1:       SimilarItem topItem = pop();
1:       // filter out "sentinel" objects necessary for maintaining an efficient priority queue
1:       if (topItem.getItemID() != SENTINEL_ID) {
1:         items.add(topItem);
1:     Collections.reverse(items);
1:     return items;
1:   }
1:   @Override
1:   protected boolean lessThan(SimilarItem one, SimilarItem two) {
1:     return one.getSimilarity() < two.getSimilarity();
1:   }
1:   @Override
1:   protected SimilarItem getSentinelObject() {
1:     return new SimilarItem(SENTINEL_ID, Double.MIN_VALUE);
1:   }
commit:d95bdda
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.similarity.item;
1: 
0: import com.google.common.collect.Lists;
0: import org.apache.lucene.util.PriorityQueue;
0: import org.apache.mahout.cf.taste.similarity.precompute.SimilarItem;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: 
1: public class TopSimilarItemsQueue extends PriorityQueue<SimilarItem> {
1: 
1:   private static final long SENTINEL_ID = Long.MIN_VALUE;
1: 
1:   private final int maxSize;
1: 
0:     public TopSimilarItemsQueue(int maxSize) {
0:       super(maxSize);
0:       this.maxSize = maxSize;
1:     }
1: 
0:     public List<SimilarItem> getTopItems() {
0:       List<SimilarItem> items = Lists.newArrayListWithCapacity(maxSize);
0:       while (size() > 0) {
0:         SimilarItem topItem = pop();
0:         // filter out "sentinel" objects necessary for maintaining an efficient priority queue
0:         if (topItem.getItemID() != SENTINEL_ID) {
0:           items.add(topItem);
1:         }
1:       }
0:       Collections.reverse(items);
0:       return items;
1:     }
1: 
0:     @Override
0:     protected boolean lessThan(SimilarItem one, SimilarItem two) {
0:       return one.getSimilarity() < two.getSimilarity();
1:     }
1: 
0:     @Override
0:     protected SimilarItem getSentinelObject() {
0:       return new SimilarItem(SENTINEL_ID, Double.MIN_VALUE);
1:     }
1: }
============================================================================