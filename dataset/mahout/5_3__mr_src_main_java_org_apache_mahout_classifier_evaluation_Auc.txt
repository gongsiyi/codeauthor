1:7aa6232: /*
1:7aa6232:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7aa6232:  * contributor license agreements.  See the NOTICE file distributed with
1:7aa6232:  * this work for additional information regarding copyright ownership.
1:7aa6232:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7aa6232:  * (the "License"); you may not use this file except in compliance with
1:7aa6232:  * the License.  You may obtain a copy of the License at
1:7aa6232:  *
1:7aa6232:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7aa6232:  *
1:7aa6232:  * Unless required by applicable law or agreed to in writing, software
1:7aa6232:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7aa6232:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7aa6232:  * See the License for the specific language governing permissions and
1:7aa6232:  * limitations under the License.
1:7aa6232:  */
10:7aa6232: 
1:7aa6232: package org.apache.mahout.classifier.evaluation;
1:88848ae: 
1:c0c8d9f: import org.apache.mahout.common.RandomUtils;
1:7aa6232: import org.apache.mahout.math.DenseMatrix;
1:7aa6232: import org.apache.mahout.math.Matrix;
1:7aa6232: import org.apache.mahout.math.list.DoubleArrayList;
1:7aa6232: 
1:69ba194: import com.google.common.base.Preconditions;
1:69ba194: 
1:7aa6232: import java.util.Random;
1:7aa6232: 
1:7aa6232: /**
1:7aa6232:  * Computes AUC and a few other accuracy statistics without storing huge amounts of data.  This is
1:7aa6232:  * done by keeping uniform samples of the positive and negative scores.  Then, when AUC is to be
1:7aa6232:  * computed, the remaining scores are sorted and a rank-sum statistic is used to compute the AUC.
1:7aa6232:  * Since AUC is invariant with respect to down-sampling of either positives or negatives, this is
1:7aa6232:  * close to correct and is exactly correct if maxBufferSize or fewer positive and negative scores
1:7aa6232:  * are examined.
1:7aa6232:  */
1:7aa6232: public class Auc {
1:74f849b: 
1:7aa6232:   private int maxBufferSize = 10000;
1:229aeff:   private final DoubleArrayList[] scores = {new DoubleArrayList(), new DoubleArrayList()};
1:8a99d75:   private final Random rand;
1:8a99d75:   private int samples;
1:049e7dc:   private final double threshold;
1:8a99d75:   private final Matrix confusion;
1:8a99d75:   private final DenseMatrix entropy;
1:7aa6232: 
1:7aa6232:   private boolean probabilityScore = true;
1:7aa6232: 
1:c0c8d9f:   private boolean hasScore;
1:7aa6232: 
1:7aa6232:   /**
1:7aa6232:    * Allocates a new data-structure for accumulating information about AUC and a few other accuracy
1:7aa6232:    * measures.
1:7aa6232:    * @param threshold The threshold to use in computing the confusion matrix.
1:7aa6232:    */
1:7aa6232:   public Auc(double threshold) {
1:ffc9d6a:     confusion = new DenseMatrix(2, 2);
1:ffc9d6a:     entropy = new DenseMatrix(2, 2);
1:ffc9d6a:     this.rand = RandomUtils.getRandom();
1:7aa6232:     this.threshold = threshold;
5:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public Auc() {
1:7aa6232:     this(0.5);
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:7aa6232:    * Adds a score to the AUC buffers.
1:7aa6232:    *
1:7aa6232:    * @param trueValue Whether this score is for a true-positive or a true-negative example.
1:7aa6232:    * @param score     The score for this example.
1:7aa6232:    */
1:7aa6232:   public void add(int trueValue, double score) {
1:d61a0ee:     Preconditions.checkArgument(trueValue == 0 || trueValue == 1, "True value must be 0 or 1");
1:7aa6232:     hasScore = true;
1:d61a0ee: 
1:39fe224:     int predictedClass = score > threshold ? 1 : 0;
1:7aa6232:     confusion.set(trueValue, predictedClass, confusion.get(trueValue, predictedClass) + 1);
1:69ba194: 
1:88848ae:     samples++;
1:7aa6232:     if (isProbabilityScore()) {
1:c0c8d9f:       double limited = Math.max(1.0e-20, Math.min(score, 1 - 1.0e-20));
1:88848ae:       double v0 = entropy.get(trueValue, 0);
1:971a56d:       entropy.set(trueValue, 0, (Math.log1p(-limited) - v0) / samples + v0);
1:88848ae: 
1:88848ae:       double v1 = entropy.get(trueValue, 1);
1:88848ae:       entropy.set(trueValue, 1, (Math.log(limited) - v1) / samples + v1);
1:7aa6232:     }
1:7aa6232: 
1:7aa6232:     // add to buffers
1:7aa6232:     DoubleArrayList buf = scores[trueValue];
1:7aa6232:     if (buf.size() >= maxBufferSize) {
1:7aa6232:       // but if too many points are seen, we insert into a random
1:7aa6232:       // place and discard the predecessor.  The random place could
1:7aa6232:       // be anywhere, possibly not even in the buffer.
1:7aa6232:       // this is a special case of Knuth's permutation algorithm
1:7aa6232:       // but since we don't ever shuffle the first maxBufferSize
1:7aa6232:       // samples, the result isn't just a fair sample of the prefixes
1:7aa6232:       // of all permutations.  The CONTENTs of the result, however,
1:7aa6232:       // will be a fair and uniform sample of maxBufferSize elements
1:7aa6232:       // chosen from all elements without replacement
1:7aa6232:       int index = rand.nextInt(samples);
1:7aa6232:       if (index < buf.size()) {
1:7aa6232:         buf.set(index, score);
1:7aa6232:       }
1:7aa6232:     } else {
1:7aa6232:       // for small buffers, we collect all points without permuting
1:7aa6232:       // since we sort the data later, permuting now would just be
1:7aa6232:       // pedantic
1:7aa6232:       buf.add(score);
1:7aa6232:     }
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public void add(int trueValue, int predictedClass) {
1:7aa6232:     hasScore = false;
1:69ba194:     Preconditions.checkArgument(trueValue == 0 || trueValue == 1, "True value must be 0 or 1");
1:7aa6232:     confusion.set(trueValue, predictedClass, confusion.get(trueValue, predictedClass) + 1);
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:7aa6232:    * Computes the AUC of points seen so far.  This can be moderately expensive since it requires
1:7aa6232:    * that all points that have been retained be sorted.
1:7aa6232:    *
1:7aa6232:    * @return The value of the Area Under the receiver operating Curve.
1:7aa6232:    */
1:7aa6232:   public double auc() {
1:69ba194:     Preconditions.checkArgument(hasScore, "Can't compute AUC for classifier without a score");
1:7aa6232:     scores[0].sort();
1:7aa6232:     scores[1].sort();
1:7aa6232: 
1:7aa6232:     double n0 = scores[0].size();
1:7aa6232:     double n1 = scores[1].size();
1:7aa6232: 
1:7aa6232:     if (n0 == 0 || n1 == 0) {
1:7aa6232:       return 0.5;
1:7aa6232:     }
1:7aa6232: 
1:7aa6232:     // scan the data
1:7aa6232:     int i0 = 0;
1:7aa6232:     int i1 = 0;
1:7aa6232:     int rank = 1;
1:7aa6232:     double rankSum = 0;
1:7aa6232:     while (i0 < n0 && i1 < n1) {
1:7aa6232: 
1:7aa6232:       double v0 = scores[0].get(i0);
1:7aa6232:       double v1 = scores[1].get(i1);
1:7aa6232: 
1:7aa6232:       if (v0 < v1) {
1:7aa6232:         i0++;
1:7aa6232:         rank++;
1:7aa6232:       } else if (v1 < v0) {
1:7aa6232:         i1++;
1:7aa6232:         rankSum += rank;
1:7aa6232:         rank++;
1:7aa6232:       } else {
1:7aa6232:         // ties have to be handled delicately
1:7aa6232:         double tieScore = v0;
1:7aa6232: 
1:7aa6232:         // how many negatives are tied?
1:7aa6232:         int k0 = 0;
1:c31a625:         while (i0 < n0 && scores[0].get(i0) == tieScore) {
1:7aa6232:           k0++;
1:7aa6232:           i0++;
1:7aa6232:         }
1:7aa6232: 
1:7aa6232:         // and how many positives
1:7aa6232:         int k1 = 0;
1:c31a625:         while (i1 < n1 && scores[1].get(i1) == tieScore) {
1:7aa6232:           k1++;
1:7aa6232:           i1++;
1:7aa6232:         }
1:7aa6232: 
1:7aa6232:         // we found k0 + k1 tied values which have
1:7aa6232:         // ranks in the half open interval [rank, rank + k0 + k1)
1:7aa6232:         // the average rank is assigned to all
1:7aa6232:         rankSum += (rank + (k0 + k1 - 1) / 2.0) * k1;
1:7aa6232:         rank += k0 + k1;
1:7aa6232:       }
1:7aa6232:     }
1:7aa6232: 
1:7aa6232:     if (i1 < n1) {
1:7aa6232:       rankSum += (rank + (n1 - i1 - 1) / 2.0) * (n1 - i1);
1:e0ec7c1:       rank += (int) (n1 - i1);
1:7aa6232:     }
1:7aa6232: 
1:7aa6232:     return (rankSum / n1 - (n1 + 1) / 2) / n0;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:7aa6232:    * Returns the confusion matrix for the classifier supposing that we were to use a particular
1:7aa6232:    * threshold.
1:7aa6232:    * @return The confusion matrix.
1:7aa6232:    */
1:7aa6232:   public Matrix confusion() {
1:7aa6232:     return confusion;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   /**
1:7aa6232:    * Returns a matrix related to the confusion matrix and to the log-likelihood.  For a
1:7aa6232:    * pretty accurate classifier, N + entropy is nearly the same as the confusion matrix
1:7aa6232:    * because log(1-eps) \approx -eps if eps is small.
1:7aa6232:    *
1:7aa6232:    * For lower accuracy classifiers, this measure will give us a better picture of how
1:7aa6232:    * things work our.
1:7aa6232:    *
1:7aa6232:    * Also, by definition, log-likelihood = sum(diag(entropy))
1:7aa6232:    * @return Returns a cell by cell break-down of the log-likelihood
1:7aa6232:    */
1:7aa6232:   public Matrix entropy() {
2:7aa6232:     if (!hasScore) {
1:7aa6232:       // find a constant score that would optimize log-likelihood, but use a dash of Bayesian
1:7aa6232:       // conservatism to avoid dividing by zero or taking log(0)
1:39fe224:       double p = (0.5 + confusion.get(1, 1)) / (1 + confusion.get(0, 0) + confusion.get(1, 1));
1:971a56d:       entropy.set(0, 0, confusion.get(0, 0) * Math.log1p(-p));
1:7aa6232:       entropy.set(0, 1, confusion.get(0, 1) * Math.log(p));
1:971a56d:       entropy.set(1, 0, confusion.get(1, 0) * Math.log1p(-p));
1:7aa6232:       entropy.set(1, 1, confusion.get(1, 1) * Math.log(p));
1:7aa6232:     }
1:7aa6232:     return entropy;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public void setMaxBufferSize(int maxBufferSize) {
1:7aa6232:     this.maxBufferSize = maxBufferSize;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public boolean isProbabilityScore() {
1:7aa6232:     return probabilityScore;
1:7aa6232:   }
1:7aa6232: 
1:7aa6232:   public void setProbabilityScore(boolean probabilityScore) {
1:7aa6232:     this.probabilityScore = probabilityScore;
1:7aa6232:   }
1:7aa6232: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:   private final DoubleArrayList[] scores = {new DoubleArrayList(), new DoubleArrayList()};
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1:       rank += (int) (n1 - i1);
commit:971a56d
/////////////////////////////////////////////////////////////////////////
1:       entropy.set(trueValue, 0, (Math.log1p(-limited) - v0) / samples + v0);
/////////////////////////////////////////////////////////////////////////
1:       entropy.set(0, 0, confusion.get(0, 0) * Math.log1p(-p));
1:       entropy.set(1, 0, confusion.get(1, 0) * Math.log1p(-p));
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:     int predictedClass = score > threshold ? 1 : 0;
/////////////////////////////////////////////////////////////////////////
1:       double p = (0.5 + confusion.get(1, 1)) / (1 + confusion.get(0, 0) + confusion.get(1, 1));
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(trueValue == 0 || trueValue == 1, "True value must be 0 or 1");
1: 
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: 
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkArgument(trueValue == 0 || trueValue == 1, "True value must be 0 or 1" );
1:     
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(trueValue == 0 || trueValue == 1, "True value must be 0 or 1");
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(hasScore, "Can't compute AUC for classifier without a score");
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1:   private final double threshold;
commit:8a99d75
/////////////////////////////////////////////////////////////////////////
1:   private final Random rand;
1:   private int samples;
1:   private final Matrix confusion;
1:   private final DenseMatrix entropy;
commit:c0c8d9f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
0:   private final DoubleArrayList[] scores = {new DoubleArrayList(), new DoubleArrayList()};
/////////////////////////////////////////////////////////////////////////
1:   private boolean hasScore;
/////////////////////////////////////////////////////////////////////////
0:     this(RandomUtils.getRandom());
/////////////////////////////////////////////////////////////////////////
1:       double limited = Math.max(1.0e-20, Math.min(score, 1 - 1.0e-20));
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: 
0:   private final DoubleArrayList[] scores = { new DoubleArrayList(), new DoubleArrayList() };
author:Ted Dunning
-------------------------------------------------------------------------------
commit:c31a625
/////////////////////////////////////////////////////////////////////////
1:         while (i0 < n0 && scores[0].get(i0) == tieScore) {
1:         while (i1 < n1 && scores[1].get(i1) == tieScore) {
commit:ffc9d6a
/////////////////////////////////////////////////////////////////////////
1:     confusion = new DenseMatrix(2, 2);
1:     entropy = new DenseMatrix(2, 2);
1:     this.rand = RandomUtils.getRandom();
commit:88848ae
/////////////////////////////////////////////////////////////////////////
1: 
1:     samples++;
1:       double v0 = entropy.get(trueValue, 0);
0:       entropy.set(trueValue, 0, (Math.log(1 - limited) - v0) / samples + v0);
1: 
1:       double v1 = entropy.get(trueValue, 1);
1:       entropy.set(trueValue, 1, (Math.log(limited) - v1) / samples + v1);
/////////////////////////////////////////////////////////////////////////
commit:7aa6232
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.evaluation;
1: 
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.list.DoubleArrayList;
1: 
1: import java.util.Random;
1: 
1: /**
1:  * Computes AUC and a few other accuracy statistics without storing huge amounts of data.  This is
1:  * done by keeping uniform samples of the positive and negative scores.  Then, when AUC is to be
1:  * computed, the remaining scores are sorted and a rank-sum statistic is used to compute the AUC.
1:  * Since AUC is invariant with respect to down-sampling of either positives or negatives, this is
1:  * close to correct and is exactly correct if maxBufferSize or fewer positive and negative scores
1:  * are examined.
1:  */
1: public class Auc {
1:   private int maxBufferSize = 10000;
0:   private DoubleArrayList[] scores = new DoubleArrayList[]{
0:           new DoubleArrayList(), new DoubleArrayList()
0:   };
0:   private Random rand;
0:   private int samples = 0;
0:   private double threshold;
0:   private Matrix confusion;
0:   private DenseMatrix entropy;
1: 
1:   private boolean probabilityScore = true;
1: 
0:   private boolean hasScore = false;
1: 
0:   // exposed for testing only
1: 
0:   public Auc(Random rand) {
0:     confusion = new DenseMatrix(2, 2);
0:     entropy = new DenseMatrix(2, 2);
1: 
0:     this.rand = rand;
1:   }
1: 
1:   /**
1:    * Allocates a new data-structure for accumulating information about AUC and a few other accuracy
1:    * measures.
1:    * @param threshold The threshold to use in computing the confusion matrix.
1:    */
1:   public Auc(double threshold) {
0:     this(new Random());
1:     this.threshold = threshold;
1:   }
1: 
1:   public Auc() {
1:     this(0.5);
1:   }
1: 
1:   /**
1:    * Adds a score to the AUC buffers.
1:    *
1:    * @param trueValue Whether this score is for a true-positive or a true-negative example.
1:    * @param score     The score for this example.
1:    */
1:   public void add(int trueValue, double score) {
1:     hasScore = true;
1: 
0:     if (trueValue != 0 && trueValue != 1) {
0:       throw new IllegalArgumentException("True value must be 0 or 1");
1:     }
1: 
0:     int predictedClass = (score > threshold) ? 1 : 0;
1:     confusion.set(trueValue, predictedClass, confusion.get(trueValue, predictedClass) + 1);
1:     if (isProbabilityScore()) {
0:       double limited = Math.max(1e-20, Math.min(score, 1 - 1e-20));
0:       entropy.set(trueValue, 0, Math.log(1 - limited));
0:       entropy.set(trueValue, 1, Math.log(limited));
1:     }
1: 
1:     // add to buffers
1:     DoubleArrayList buf = scores[trueValue];
1:     if (buf.size() >= maxBufferSize) {
1:       // but if too many points are seen, we insert into a random
1:       // place and discard the predecessor.  The random place could
1:       // be anywhere, possibly not even in the buffer.
0:       samples++;
1:       // this is a special case of Knuth's permutation algorithm
1:       // but since we don't ever shuffle the first maxBufferSize
1:       // samples, the result isn't just a fair sample of the prefixes
1:       // of all permutations.  The CONTENTs of the result, however,
1:       // will be a fair and uniform sample of maxBufferSize elements
1:       // chosen from all elements without replacement
1:       int index = rand.nextInt(samples);
1:       if (index < buf.size()) {
1:         buf.set(index, score);
1:       }
1:     } else {
1:       // for small buffers, we collect all points without permuting
1:       // since we sort the data later, permuting now would just be
1:       // pedantic
1:       buf.add(score);
1:     }
1:   }
1: 
1:   public void add(int trueValue, int predictedClass) {
1:     hasScore = false;
1: 
0:     if (trueValue != 0 && trueValue != 1) {
0:       throw new IllegalArgumentException("True value must be 0 or 1");
1:     }
1: 
1:     confusion.set(trueValue, predictedClass, confusion.get(trueValue, predictedClass) + 1);
1:   }
1: 
1:   /**
1:    * Computes the AUC of points seen so far.  This can be moderately expensive since it requires
1:    * that all points that have been retained be sorted.
1:    *
1:    * @return The value of the Area Under the receiver operating Curve.
1:    */
1:   public double auc() {
1:     if (!hasScore) {
0:       throw new IllegalArgumentException("Can't compute AUC for classifier without a score");
1:     }
1: 
1:     scores[0].sort();
1:     scores[1].sort();
1: 
1:     double n0 = scores[0].size();
1:     double n1 = scores[1].size();
1: 
1:     if (n0 == 0 || n1 == 0) {
1:       return 0.5;
1:     }
1: 
1:     // scan the data
1:     int i0 = 0;
1:     int i1 = 0;
1:     int rank = 1;
1:     double rankSum = 0;
1:     while (i0 < n0 && i1 < n1) {
1: 
1:       double v0 = scores[0].get(i0);
1:       double v1 = scores[1].get(i1);
1: 
1:       if (v0 < v1) {
1:         i0++;
1:         rank++;
1:       } else if (v1 < v0) {
1:         i1++;
1:         rankSum += rank;
1:         rank++;
1:       } else {
1:         // ties have to be handled delicately
1:         double tieScore = v0;
1: 
1:         // how many negatives are tied?
1:         int k0 = 0;
0:         while (i0 < n0 && v0 == tieScore) {
1:           k0++;
1:           i0++;
0:           v0 = scores[0].get(i0);
1:         }
1: 
1:         // and how many positives
1:         int k1 = 0;
0:         while (i1 < n1 && v1 == tieScore) {
1:           k1++;
1:           i1++;
0:           v1 = scores[1].get(i1);
1:         }
1: 
1:         // we found k0 + k1 tied values which have
1:         // ranks in the half open interval [rank, rank + k0 + k1)
1:         // the average rank is assigned to all
1:         rankSum += (rank + (k0 + k1 - 1) / 2.0) * k1;
1:         rank += k0 + k1;
1:       }
1:     }
1: 
1:     if (i1 < n1) {
1:       rankSum += (rank + (n1 - i1 - 1) / 2.0) * (n1 - i1);
0:       rank += n1 - i1;
1:     }
1: 
1:     return (rankSum / n1 - (n1 + 1) / 2) / n0;
1:   }
1: 
1:   /**
1:    * Returns the confusion matrix for the classifier supposing that we were to use a particular
1:    * threshold.
1:    * @return The confusion matrix.
1:    */
1:   public Matrix confusion() {
1:     return confusion;
1:   }
1: 
1:   /**
1:    * Returns a matrix related to the confusion matrix and to the log-likelihood.  For a
1:    * pretty accurate classifier, N + entropy is nearly the same as the confusion matrix
1:    * because log(1-eps) \approx -eps if eps is small.
1:    *
1:    * For lower accuracy classifiers, this measure will give us a better picture of how
1:    * things work our.
1:    *
1:    * Also, by definition, log-likelihood = sum(diag(entropy))
1:    * @return Returns a cell by cell break-down of the log-likelihood
1:    */
1:   public Matrix entropy() {
1:     if (!hasScore) {
1:       // find a constant score that would optimize log-likelihood, but use a dash of Bayesian
1:       // conservatism to avoid dividing by zero or taking log(0)
0:       double p = (0.5 + confusion.get(1, 1)) / (1 + (confusion.get(0, 0) + confusion.get(1, 1)));
0:       entropy.set(0, 0, confusion.get(0, 0) * Math.log(1 - p));
1:       entropy.set(0, 1, confusion.get(0, 1) * Math.log(p));
0:       entropy.set(1, 0, confusion.get(1, 0) * Math.log(1 - p));
1:       entropy.set(1, 1, confusion.get(1, 1) * Math.log(p));
1:     }
1:     return entropy;
1:   }
1: 
1:   public void setMaxBufferSize(int maxBufferSize) {
1:     this.maxBufferSize = maxBufferSize;
1:   }
1: 
1:   public boolean isProbabilityScore() {
1:     return probabilityScore;
1:   }
1: 
1:   public void setProbabilityScore(boolean probabilityScore) {
1:     this.probabilityScore = probabilityScore;
1:   }
1: }
commit:f4c8f73
commit:91456bb
============================================================================