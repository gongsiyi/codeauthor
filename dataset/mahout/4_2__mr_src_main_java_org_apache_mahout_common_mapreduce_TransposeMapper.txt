1:81d64c0: /**
1:81d64c0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:81d64c0:  * contributor license agreements.  See the NOTICE file distributed with
1:81d64c0:  * this work for additional information regarding copyright ownership.
1:81d64c0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:81d64c0:  * (the "License"); you may not use this file except in compliance with
1:81d64c0:  * the License.  You may obtain a copy of the License at
1:81d64c0:  *
1:81d64c0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:81d64c0:  *
1:81d64c0:  * Unless required by applicable law or agreed to in writing, software
1:81d64c0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:81d64c0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:81d64c0:  * See the License for the specific language governing permissions and
1:81d64c0:  * limitations under the License.
1:81d64c0:  */
1:81d64c0: 
1:81d64c0: package org.apache.mahout.common.mapreduce;
1:81d64c0: 
1:81d64c0: import org.apache.hadoop.io.IntWritable;
1:81d64c0: import org.apache.hadoop.mapreduce.Mapper;
1:81d64c0: import org.apache.mahout.math.RandomAccessSparseVector;
1:81d64c0: import org.apache.mahout.math.Vector;
1:81d64c0: import org.apache.mahout.math.VectorWritable;
1:81d64c0: 
1:81d64c0: import java.io.IOException;
1:81d64c0: 
1:81d64c0: public class TransposeMapper extends Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable> {
1:81d64c0: 
1:7afd9f4:   public static final String NEW_NUM_COLS_PARAM = TransposeMapper.class.getName() + ".newNumCols";
1:7afd9f4: 
1:7afd9f4:   private int newNumCols;
1:7afd9f4: 
1:7afd9f4:   @Override
1:7afd9f4:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:7afd9f4:     newNumCols = ctx.getConfiguration().getInt(NEW_NUM_COLS_PARAM, Integer.MAX_VALUE);
1:7afd9f4:   }
1:7afd9f4: 
1:81d64c0:   @Override
1:81d64c0:   protected void map(IntWritable r, VectorWritable v, Context ctx) throws IOException, InterruptedException {
1:81d64c0:     int row = r.get();
1:dc62944:     for (Vector.Element e : v.get().nonZeroes()) {
1:7afd9f4:       RandomAccessSparseVector tmp = new RandomAccessSparseVector(newNumCols, 1);
1:81d64c0:       tmp.setQuick(row, e.get());
1:81d64c0:       r.set(e.index());
1:81d64c0:       ctx.write(r, new VectorWritable(tmp));
1:4841efb:     }
2:81d64c0:   }
1:81d64c0: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:7afd9f4
/////////////////////////////////////////////////////////////////////////
1:   public static final String NEW_NUM_COLS_PARAM = TransposeMapper.class.getName() + ".newNumCols";
1: 
1:   private int newNumCols;
1: 
1:   @Override
1:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:     newNumCols = ctx.getConfiguration().getInt(NEW_NUM_COLS_PARAM, Integer.MAX_VALUE);
1:   }
1: 
1:       RandomAccessSparseVector tmp = new RandomAccessSparseVector(newNumCols, 1);
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
commit:81d64c0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.mapreduce;
1: 
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: 
1: import java.io.IOException;
0: import java.util.Iterator;
1: 
1: public class TransposeMapper extends Mapper<IntWritable,VectorWritable,IntWritable,VectorWritable> {
1: 
1:   @Override
1:   protected void map(IntWritable r, VectorWritable v, Context ctx) throws IOException, InterruptedException {
1:     int row = r.get();
0:     Iterator<Vector.Element> it = v.get().iterateNonZero();
0:     while (it.hasNext()) {
0:       Vector.Element e = it.next();
0:       RandomAccessSparseVector tmp = new RandomAccessSparseVector(Integer.MAX_VALUE, 1);
1:       tmp.setQuick(row, e.get());
1:       r.set(e.index());
1:       ctx.write(r, new VectorWritable(tmp));
1:     }
1:   }
1: }
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element e : v.get().nonZeroes()) {
============================================================================