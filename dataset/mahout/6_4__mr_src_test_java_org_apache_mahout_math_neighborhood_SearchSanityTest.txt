1:8649ac2: /*
1:8649ac2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8649ac2:  * contributor license agreements.  See the NOTICE file distributed with
1:8649ac2:  * this work for additional information regarding copyright ownership.
1:8649ac2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8649ac2:  * (the "License"); you may not use this file except in compliance with
1:8649ac2:  * the License.  You may obtain a copy of the License at
1:8649ac2:  *
1:8649ac2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8649ac2:  *
1:8649ac2:  * Unless required by applicable law or agreed to in writing, software
1:8649ac2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8649ac2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8649ac2:  * See the License for the specific language governing permissions and
1:8649ac2:  * limitations under the License.
1:8649ac2:  */
1:8649ac2: 
1:8649ac2: package org.apache.mahout.math.neighborhood;
1:25efc43: 
1:8649ac2: 
1:8649ac2: import java.util.Arrays;
1:8649ac2: import java.util.List;
1:8649ac2: 
1:8649ac2: import com.google.common.collect.Iterables;
1:8649ac2: import com.google.common.collect.Lists;
1:b3d2554: 
1:8649ac2: import org.apache.mahout.common.MahoutTestCase;
1:b3d2554: import org.apache.mahout.common.RandomUtils;
1:8649ac2: import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
1:8649ac2: import org.apache.mahout.math.DenseMatrix;
1:8649ac2: import org.apache.mahout.math.DenseVector;
1:8649ac2: import org.apache.mahout.math.Matrix;
1:8649ac2: import org.apache.mahout.math.MatrixSlice;
1:8649ac2: import org.apache.mahout.math.Vector;
1:4edc814: import org.apache.mahout.math.jet.math.Constants;
1:8649ac2: import org.apache.mahout.math.random.MultiNormal;
1:8649ac2: import org.apache.mahout.math.random.WeightedThing;
1:8649ac2: import org.junit.Test;
1:8649ac2: import org.junit.runner.RunWith;
1:8649ac2: import org.junit.runners.Parameterized;
1:8649ac2: 
1:6276605: import static org.hamcrest.Matchers.is;
1:6276605: import static org.hamcrest.Matchers.lessThanOrEqualTo;
1:6276605: 
1:4ca6b86: @RunWith(Parameterized.class)
1:8649ac2: public class SearchSanityTest extends MahoutTestCase {
1:8649ac2:   private static final int NUM_DATA_POINTS = 1 << 13;
1:8649ac2:   private static final int NUM_DIMENSIONS = 20;
1:8649ac2:   private static final int NUM_PROJECTIONS = 3;
1:8649ac2:   private static final int SEARCH_SIZE = 30;
1:8649ac2: 
1:8649ac2:   private UpdatableSearcher searcher;
1:8649ac2:   private Matrix dataPoints;
1:8649ac2: 
1:8649ac2:   protected static Matrix multiNormalRandomData(int numDataPoints, int numDimensions) {
1:8649ac2:     Matrix data = new DenseMatrix(numDataPoints, numDimensions);
1:8649ac2:     MultiNormal gen = new MultiNormal(20);
1:8649ac2:     for (MatrixSlice slice : data) {
1:8649ac2:       slice.vector().assign(gen.sample());
1:8649ac2:     }
1:8649ac2:     return data;
1:8649ac2:   }
1:ec9035c: 
1:8649ac2:   @Parameterized.Parameters
1:8649ac2:   public static List<Object[]> generateData() {
1:b3d2554:     RandomUtils.useTestSeed();
1:8649ac2:     Matrix dataPoints = multiNormalRandomData(NUM_DATA_POINTS, NUM_DIMENSIONS);
1:8649ac2:     return Arrays.asList(new Object[][]{
1:8649ac2:         {new ProjectionSearch(new EuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE), dataPoints},
1:8649ac2:         {new FastProjectionSearch(new EuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE),
1:8649ac2:             dataPoints},
1:ec9035c:         {new LocalitySensitiveHashSearch(new EuclideanDistanceMeasure(), SEARCH_SIZE), dataPoints},
1:8649ac2:     });
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public SearchSanityTest(UpdatableSearcher searcher, Matrix dataPoints) {
1:8649ac2:     this.searcher = searcher;
1:8649ac2:     this.dataPoints = dataPoints;
1:8649ac2:   }
1:8649ac2: 
1:ec9035c:   @Test
1:8649ac2:   public void testExactMatch() {
1:8649ac2:     searcher.clear();
1:8649ac2:     Iterable<MatrixSlice> data = dataPoints;
1:8649ac2: 
1:8649ac2:     final Iterable<MatrixSlice> batch1 = Iterables.limit(data, 300);
1:8649ac2:     List<MatrixSlice> queries = Lists.newArrayList(Iterables.limit(batch1, 100));
1:8649ac2: 
1:8649ac2:     // adding the data in multiple batches triggers special code in some searchers
1:8649ac2:     searcher.addAllMatrixSlices(batch1);
1:8649ac2:     assertEquals(300, searcher.size());
1:8649ac2: 
1:8649ac2:     Vector q = Iterables.get(data, 0).vector();
1:8649ac2:     List<WeightedThing<Vector>> r = searcher.search(q, 2);
1:4ca6b86:     assertEquals(0, r.get(0).getValue().minus(q).norm(1), 1.0e-8);
1:8649ac2: 
1:8649ac2:     final Iterable<MatrixSlice> batch2 = Iterables.limit(Iterables.skip(data, 300), 10);
1:8649ac2:     searcher.addAllMatrixSlices(batch2);
1:8649ac2:     assertEquals(310, searcher.size());
1:8649ac2: 
1:8649ac2:     q = Iterables.get(data, 302).vector();
1:8649ac2:     r = searcher.search(q, 2);
1:4ca6b86:     assertEquals(0, r.get(0).getValue().minus(q).norm(1), 1.0e-8);
1:8649ac2: 
1:8649ac2:     searcher.addAllMatrixSlices(Iterables.skip(data, 310));
1:8649ac2:     assertEquals(dataPoints.numRows(), searcher.size());
1:8649ac2: 
1:8649ac2:     for (MatrixSlice query : queries) {
1:8649ac2:       r = searcher.search(query.vector(), 2);
1:4ca6b86:       assertEquals("Distance has to be about zero", 0, r.get(0).getWeight(), 1.0e-6);
1:8649ac2:       assertEquals("Answer must be substantially the same as query", 0,
1:4ca6b86:           r.get(0).getValue().minus(query.vector()).norm(1), 1.0e-8);
1:8649ac2:       assertTrue("Wrong answer must have non-zero distance",
1:8649ac2:           r.get(1).getWeight() > r.get(0).getWeight());
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Test
1:8649ac2:   public void testNearMatch() {
1:8649ac2:     searcher.clear();
1:8649ac2:     List<MatrixSlice> queries = Lists.newArrayList(Iterables.limit(dataPoints, 100));
1:8649ac2:     searcher.addAllMatrixSlicesAsWeightedVectors(dataPoints);
1:8649ac2: 
1:8649ac2:     MultiNormal noise = new MultiNormal(0.01, new DenseVector(20));
1:8649ac2:     for (MatrixSlice slice : queries) {
1:8649ac2:       Vector query = slice.vector();
1:8649ac2:       final Vector epsilon = noise.sample();
1:8649ac2:       List<WeightedThing<Vector>> r = searcher.search(query, 2);
1:8649ac2:       query = query.plus(epsilon);
1:4ca6b86:       assertEquals("Distance has to be small", epsilon.norm(2), r.get(0).getWeight(), 1.0e-1);
1:8649ac2:       assertEquals("Answer must be substantially the same as query", epsilon.norm(2),
1:4ca6b86:           r.get(0).getValue().minus(query).norm(2), 1.0e-1);
1:8649ac2:       assertTrue("Wrong answer must be further away", r.get(1).getWeight() > r.get(0).getWeight());
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Test
1:8649ac2:   public void testOrdering() {
1:8649ac2:     searcher.clear();
1:8649ac2:     Matrix queries = new DenseMatrix(100, 20);
1:8649ac2:     MultiNormal gen = new MultiNormal(20);
1:8649ac2:     for (int i = 0; i < 100; i++) {
1:8649ac2:       queries.viewRow(i).assign(gen.sample());
1:8649ac2:     }
1:8649ac2:     searcher.addAllMatrixSlices(dataPoints);
1:8649ac2: 
1:8649ac2:     for (MatrixSlice query : queries) {
1:8649ac2:       List<WeightedThing<Vector>> r = searcher.search(query.vector(), 200);
1:8649ac2:       double x = 0;
1:8649ac2:       for (WeightedThing<Vector> thing : r) {
1:8649ac2:         assertTrue("Scores must be monotonic increasing", thing.getWeight() >= x);
1:8649ac2:         x = thing.getWeight();
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Test
1:8649ac2:   public void testRemoval() {
1:8649ac2:     searcher.clear();
1:8649ac2:     searcher.addAllMatrixSlices(dataPoints);
1:8649ac2:     //noinspection ConstantConditions
1:8649ac2:     if (searcher instanceof UpdatableSearcher) {
1:8649ac2:       List<Vector> x = Lists.newArrayList(Iterables.limit(searcher, 2));
1:8649ac2:       int size0 = searcher.size();
1:8649ac2: 
1:8649ac2:       List<WeightedThing<Vector>> r0 = searcher.search(x.get(0), 2);
1:8649ac2: 
1:4ca6b86:       searcher.remove(x.get(0), 1.0e-7);
1:8649ac2:       assertEquals(size0 - 1, searcher.size());
1:8649ac2: 
1:8649ac2:       List<WeightedThing<Vector>> r = searcher.search(x.get(0), 1);
1:8649ac2:       assertTrue("Vector should be gone", r.get(0).getWeight() > 0);
1:8649ac2:       assertEquals("Previous second neighbor should be first", 0,
1:4ca6b86:           r.get(0).getValue().minus(r0.get(1).getValue()).norm (1), 1.0e-8);
1:8649ac2: 
1:4ca6b86:       searcher.remove(x.get(1), 1.0e-7);
1:8649ac2:       assertEquals(size0 - 2, searcher.size());
1:8649ac2: 
1:8649ac2:       r = searcher.search(x.get(1), 1);
1:8649ac2:       assertTrue("Vector should be gone", r.get(0).getWeight() > 0);
1:8649ac2: 
1:8649ac2:       // Vectors don't show up in iterator.
1:8649ac2:       for (Vector v : searcher) {
1:4ca6b86:         assertTrue(x.get(0).minus(v).norm(1) > 1.0e-6);
1:4ca6b86:         assertTrue(x.get(1).minus(v).norm(1) > 1.0e-6);
1:8649ac2:       }
1:8649ac2:     } else {
1:8649ac2:       try {
1:8649ac2:         List<Vector> x = Lists.newArrayList(Iterables.limit(searcher, 2));
1:4ca6b86:         searcher.remove(x.get(0), 1.0e-7);
1:8649ac2:         fail("Shouldn't be able to delete from " + searcher.getClass().getName());
1:8649ac2:       } catch (UnsupportedOperationException e) {
1:8649ac2:         // good enough that UOE is thrown
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Test
1:ec9035c:   public void testSearchFirst() {
1:ec9035c:     searcher.clear();
1:ec9035c:     searcher.addAll(dataPoints);
1:ec9035c:     for (Vector datapoint : dataPoints) {
1:ec9035c:       WeightedThing<Vector> first = searcher.searchFirst(datapoint, false);
1:ec9035c:       WeightedThing<Vector> second = searcher.searchFirst(datapoint, true);
1:ec9035c:       List<WeightedThing<Vector>> firstTwo = searcher.search(datapoint, 2);
1:ec9035c: 
1:ec9035c:       assertEquals("First isn't self", 0, first.getWeight(), 0);
1:ec9035c:       assertEquals("First isn't self", datapoint, first.getValue());
1:ec9035c:       assertEquals("First doesn't match", first, firstTwo.get(0));
1:4edc814:       assertEquals("Second doesn't match", second, firstTwo.get(1));
1:4edc814:     }
1:4edc814:   }
1:4edc814: 
1:4edc814:   @Test
1:25efc43:   public void testSearchLimiting() {
1:25efc43:     searcher.clear();
1:25efc43:     searcher.addAll(dataPoints);
1:25efc43:     for (Vector datapoint : dataPoints) {
1:25efc43:       List<WeightedThing<Vector>> firstTwo = searcher.search(datapoint, 2);
1:25efc43: 
1:25efc43:       assertThat("Search limit isn't respected", firstTwo.size(), is(lessThanOrEqualTo(2)));
1:25efc43:     }
1:25efc43:   }
1:25efc43: 
1:25efc43:   @Test
1:4edc814:   public void testRemove() {
1:4edc814:     searcher.clear();
1:4edc814:     for (int i = 0; i < dataPoints.rowSize(); ++i) {
1:4edc814:       Vector datapoint = dataPoints.viewRow(i);
1:4edc814:       searcher.add(datapoint);
1:4edc814:       // As long as points are not searched for right after being added, in FastProjectionSearch, points are not
1:4edc814:       // merged with the main list right away, so if a search for a point occurs before it's merged the pendingAdditions
1:4edc814:       // list also needs to be looked at.
1:4edc814:       // This used to not be the case for searchFirst(), thereby causing removal failures.
1:4edc814:       if (i % 2 == 0) {
1:4edc814:         assertTrue("Failed to find self [search]",
1:4edc814:             searcher.search(datapoint, 1).get(0).getWeight() < Constants.EPSILON);
1:4edc814:         assertTrue("Failed to find self [searchFirst]",
1:4edc814:             searcher.searchFirst(datapoint, false).getWeight() < Constants.EPSILON);
1:4edc814:         assertTrue("Failed to remove self", searcher.remove(datapoint, Constants.EPSILON));
1:4edc814:       }
1:ec9035c:     }
1:ec9035c:   }
1:8649ac2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:6276605
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import static org.hamcrest.Matchers.is;
1: import static org.hamcrest.Matchers.lessThanOrEqualTo;
1: 
author:sslavic
-------------------------------------------------------------------------------
commit:25efc43
/////////////////////////////////////////////////////////////////////////
0: import static org.hamcrest.Matchers.*;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void testSearchLimiting() {
1:     searcher.clear();
1:     searcher.addAll(dataPoints);
1:     for (Vector datapoint : dataPoints) {
1:       List<WeightedThing<Vector>> firstTwo = searcher.search(datapoint, 2);
1: 
1:       assertThat("Search limit isn't respected", firstTwo.size(), is(lessThanOrEqualTo(2)));
1:     }
1:   }
1: 
1:   @Test
commit:b3d2554
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
1:     RandomUtils.useTestSeed();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1: @RunWith(Parameterized.class)
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, r.get(0).getValue().minus(q).norm(1), 1.0e-8);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, r.get(0).getValue().minus(q).norm(1), 1.0e-8);
1:       assertEquals("Distance has to be about zero", 0, r.get(0).getWeight(), 1.0e-6);
1:           r.get(0).getValue().minus(query.vector()).norm(1), 1.0e-8);
/////////////////////////////////////////////////////////////////////////
1:       assertEquals("Distance has to be small", epsilon.norm(2), r.get(0).getWeight(), 1.0e-1);
1:           r.get(0).getValue().minus(query).norm(2), 1.0e-1);
/////////////////////////////////////////////////////////////////////////
1:       searcher.remove(x.get(0), 1.0e-7);
1:           r.get(0).getValue().minus(r0.get(1).getValue()).norm (1), 1.0e-8);
1:       searcher.remove(x.get(1), 1.0e-7);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(x.get(0).minus(v).norm(1) > 1.0e-6);
1:         assertTrue(x.get(1).minus(v).norm(1) > 1.0e-6);
1:         searcher.remove(x.get(0), 1.0e-7);
author:dfilimon
-------------------------------------------------------------------------------
commit:4edc814
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.jet.math.Constants;
/////////////////////////////////////////////////////////////////////////
1:       assertEquals("Second doesn't match", second, firstTwo.get(1));
1:     }
1:   }
1: 
1:   @Test
1:   public void testRemove() {
1:     searcher.clear();
1:     for (int i = 0; i < dataPoints.rowSize(); ++i) {
1:       Vector datapoint = dataPoints.viewRow(i);
1:       searcher.add(datapoint);
1:       // As long as points are not searched for right after being added, in FastProjectionSearch, points are not
1:       // merged with the main list right away, so if a search for a point occurs before it's merged the pendingAdditions
1:       // list also needs to be looked at.
1:       // This used to not be the case for searchFirst(), thereby causing removal failures.
1:       if (i % 2 == 0) {
1:         assertTrue("Failed to find self [search]",
1:             searcher.search(datapoint, 1).get(0).getWeight() < Constants.EPSILON);
1:         assertTrue("Failed to find self [searchFirst]",
1:             searcher.searchFirst(datapoint, false).getWeight() < Constants.EPSILON);
1:         assertTrue("Failed to remove self", searcher.remove(datapoint, Constants.EPSILON));
1:       }
commit:ec9035c
/////////////////////////////////////////////////////////////////////////
1:         {new LocalitySensitiveHashSearch(new EuclideanDistanceMeasure(), SEARCH_SIZE), dataPoints},
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
1:   public void testSearchFirst() {
1:     searcher.clear();
1:     searcher.addAll(dataPoints);
1:     for (Vector datapoint : dataPoints) {
1:       WeightedThing<Vector> first = searcher.searchFirst(datapoint, false);
1:       WeightedThing<Vector> second = searcher.searchFirst(datapoint, true);
1:       List<WeightedThing<Vector>> firstTwo = searcher.search(datapoint, 2);
1: 
1:       assertEquals("First isn't self", 0, first.getWeight(), 0);
1:       assertEquals("First isn't self", datapoint, first.getValue());
1:       assertEquals("First doesn't match", first, firstTwo.get(0));
0:       assertEquals(String.format("Second doesn't match got %f expected %f", second.getWeight(), firstTwo.get(1).getWeight()),
0:           second, firstTwo.get(1));
1:     }
1:   }
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.neighborhood;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixSlice;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.random.MultiNormal;
1: import org.apache.mahout.math.random.WeightedThing;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: 
0: @RunWith(value = Parameterized.class)
1: public class SearchSanityTest extends MahoutTestCase {
1:   private static final int NUM_DATA_POINTS = 1 << 13;
1:   private static final int NUM_DIMENSIONS = 20;
1:   private static final int NUM_PROJECTIONS = 3;
1:   private static final int SEARCH_SIZE = 30;
1: 
1:   private UpdatableSearcher searcher;
1:   private Matrix dataPoints;
1: 
1:   protected static Matrix multiNormalRandomData(int numDataPoints, int numDimensions) {
1:     Matrix data = new DenseMatrix(numDataPoints, numDimensions);
1:     MultiNormal gen = new MultiNormal(20);
1:     for (MatrixSlice slice : data) {
1:       slice.vector().assign(gen.sample());
1:     }
1:     return data;
1:   }
1: 
1:   @Parameterized.Parameters
1:   public static List<Object[]> generateData() {
1:     Matrix dataPoints = multiNormalRandomData(NUM_DATA_POINTS, NUM_DIMENSIONS);
1:     return Arrays.asList(new Object[][]{
1:         {new ProjectionSearch(new EuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE), dataPoints},
1:         {new FastProjectionSearch(new EuclideanDistanceMeasure(), NUM_PROJECTIONS, SEARCH_SIZE),
1:             dataPoints},
1:     });
1:   }
1: 
1:   public SearchSanityTest(UpdatableSearcher searcher, Matrix dataPoints) {
1:     this.searcher = searcher;
1:     this.dataPoints = dataPoints;
1:   }
1: 
1:   @Test
1:   public void testExactMatch() {
1:     searcher.clear();
1:     Iterable<MatrixSlice> data = dataPoints;
1: 
1:     final Iterable<MatrixSlice> batch1 = Iterables.limit(data, 300);
1:     List<MatrixSlice> queries = Lists.newArrayList(Iterables.limit(batch1, 100));
1: 
1:     // adding the data in multiple batches triggers special code in some searchers
1:     searcher.addAllMatrixSlices(batch1);
1:     assertEquals(300, searcher.size());
1: 
1:     Vector q = Iterables.get(data, 0).vector();
1:     List<WeightedThing<Vector>> r = searcher.search(q, 2);
0:     assertEquals(0, r.get(0).getValue().minus(q).norm(1), 1e-8);
1: 
1:     final Iterable<MatrixSlice> batch2 = Iterables.limit(Iterables.skip(data, 300), 10);
1:     searcher.addAllMatrixSlices(batch2);
1:     assertEquals(310, searcher.size());
1: 
1:     q = Iterables.get(data, 302).vector();
1:     r = searcher.search(q, 2);
0:     assertEquals(0, r.get(0).getValue().minus(q).norm(1), 1e-8);
1: 
1:     searcher.addAllMatrixSlices(Iterables.skip(data, 310));
1:     assertEquals(dataPoints.numRows(), searcher.size());
1: 
1:     for (MatrixSlice query : queries) {
1:       r = searcher.search(query.vector(), 2);
0:       assertEquals("Distance has to be about zero", 0, r.get(0).getWeight(), 1e-6);
1:       assertEquals("Answer must be substantially the same as query", 0,
0:           r.get(0).getValue().minus(query.vector()).norm(1), 1e-8);
1:       assertTrue("Wrong answer must have non-zero distance",
1:           r.get(1).getWeight() > r.get(0).getWeight());
1:     }
1:   }
1: 
1:   @Test
1:   public void testNearMatch() {
1:     searcher.clear();
1:     List<MatrixSlice> queries = Lists.newArrayList(Iterables.limit(dataPoints, 100));
1:     searcher.addAllMatrixSlicesAsWeightedVectors(dataPoints);
1: 
1:     MultiNormal noise = new MultiNormal(0.01, new DenseVector(20));
1:     for (MatrixSlice slice : queries) {
1:       Vector query = slice.vector();
1:       final Vector epsilon = noise.sample();
1:       List<WeightedThing<Vector>> r = searcher.search(query, 2);
1:       query = query.plus(epsilon);
0:       assertEquals("Distance has to be small", epsilon.norm(2), r.get(0).getWeight(), 1e-1);
1:       assertEquals("Answer must be substantially the same as query", epsilon.norm(2),
0:           r.get(0).getValue().minus(query).norm(2), 1e-1);
1:       assertTrue("Wrong answer must be further away", r.get(1).getWeight() > r.get(0).getWeight());
1:     }
1:   }
1: 
1:   @Test
1:   public void testOrdering() {
1:     searcher.clear();
1:     Matrix queries = new DenseMatrix(100, 20);
1:     MultiNormal gen = new MultiNormal(20);
1:     for (int i = 0; i < 100; i++) {
1:       queries.viewRow(i).assign(gen.sample());
1:     }
1:     searcher.addAllMatrixSlices(dataPoints);
1: 
1:     for (MatrixSlice query : queries) {
1:       List<WeightedThing<Vector>> r = searcher.search(query.vector(), 200);
1:       double x = 0;
1:       for (WeightedThing<Vector> thing : r) {
1:         assertTrue("Scores must be monotonic increasing", thing.getWeight() >= x);
1:         x = thing.getWeight();
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testRemoval() {
1:     searcher.clear();
1:     searcher.addAllMatrixSlices(dataPoints);
1:     //noinspection ConstantConditions
1:     if (searcher instanceof UpdatableSearcher) {
1:       List<Vector> x = Lists.newArrayList(Iterables.limit(searcher, 2));
1:       int size0 = searcher.size();
1: 
1:       List<WeightedThing<Vector>> r0 = searcher.search(x.get(0), 2);
1: 
0:       searcher.remove(x.get(0), 1e-7);
1:       assertEquals(size0 - 1, searcher.size());
1: 
1:       List<WeightedThing<Vector>> r = searcher.search(x.get(0), 1);
1:       assertTrue("Vector should be gone", r.get(0).getWeight() > 0);
1:       assertEquals("Previous second neighbor should be first", 0,
0:           r.get(0).getValue().minus(r0.get(1).getValue()).norm (1), 1e-8);
1: 
0:       searcher.remove(x.get(1), 1e-7);
1:       assertEquals(size0 - 2, searcher.size());
1: 
1:       r = searcher.search(x.get(1), 1);
1:       assertTrue("Vector should be gone", r.get(0).getWeight() > 0);
1: 
1:       // Vectors don't show up in iterator.
1:       for (Vector v : searcher) {
0:         assertTrue(x.get(0).minus(v).norm(1) > 1e-6);
0:         assertTrue(x.get(1).minus(v).norm(1) > 1e-6);
1:       }
1:     } else {
1:       try {
1:         List<Vector> x = Lists.newArrayList(Iterables.limit(searcher, 2));
0:         searcher.remove(x.get(0), 1e-7);
1:         fail("Shouldn't be able to delete from " + searcher.getClass().getName());
1:       } catch (UnsupportedOperationException e) {
1:         // good enough that UOE is thrown
1:       }
1:     }
1:   }
1: }
============================================================================