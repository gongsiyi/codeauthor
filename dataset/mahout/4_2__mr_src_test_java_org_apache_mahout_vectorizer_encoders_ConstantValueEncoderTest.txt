1:697a8d7: /*
1:697a8d7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:697a8d7:  * contributor license agreements.  See the NOTICE file distributed with
1:697a8d7:  * this work for additional information regarding copyright ownership.
1:697a8d7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:697a8d7:  * (the "License"); you may not use this file except in compliance with
1:697a8d7:  * the License.  You may obtain a copy of the License at
1:697a8d7:  *
1:697a8d7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:697a8d7:  *
1:697a8d7:  * Unless required by applicable law or agreed to in writing, software
1:697a8d7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:697a8d7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:697a8d7:  * See the License for the specific language governing permissions and
1:697a8d7:  * limitations under the License.
1:697a8d7:  */
1:697a8d7: 
1:697a8d7: package org.apache.mahout.vectorizer.encoders;
1:697a8d7: 
1:697a8d7: import org.apache.mahout.common.MahoutTestCase;
1:697a8d7: import org.apache.mahout.math.DenseVector;
1:697a8d7: import org.apache.mahout.math.Vector;
1:697a8d7: import org.junit.Test;
1:697a8d7: 
1:697a8d7: public final class ConstantValueEncoderTest extends MahoutTestCase {
1:697a8d7: 
1:697a8d7:   @Test
1:697a8d7:   public void testAddToVector() {
1:697a8d7:     FeatureVectorEncoder enc = new ConstantValueEncoder("foo");
1:697a8d7:     Vector v1 = new DenseVector(20);
1:697a8d7:     enc.addToVector((byte[]) null, -123, v1);
1:697a8d7:     assertEquals(-123, v1.minValue(), 0);
1:697a8d7:     assertEquals(0, v1.maxValue(), 0);
1:697a8d7:     assertEquals(123, v1.norm(1), 0);
1:697a8d7: 
1:697a8d7:     v1 = new DenseVector(20);
1:697a8d7:     enc.addToVector((byte[]) null, 123, v1);
1:697a8d7:     assertEquals(123, v1.maxValue(), 0);
1:697a8d7:     assertEquals(0, v1.minValue(), 0);
1:697a8d7:     assertEquals(123, v1.norm(1), 0);
1:697a8d7: 
1:697a8d7:     Vector v2 = new DenseVector(20);
1:697a8d7:     enc.setProbes(2);
1:697a8d7:     enc.addToVector((byte[]) null, 123, v2);
1:697a8d7:     assertEquals(123, v2.maxValue(), 0);
1:697a8d7:     assertEquals(2 * 123, v2.norm(1), 0);
1:697a8d7: 
1:697a8d7:     // v1 has one probe, v2 has two.  The first probe in v2 should be in the same
1:697a8d7:     // place as the only probe in v1
1:697a8d7:     v1 = v2.minus(v1);
1:697a8d7:     assertEquals(123, v1.maxValue(), 0);
1:697a8d7:     assertEquals(123, v1.norm(1), 0);
1:697a8d7: 
1:697a8d7:     Vector v3 = new DenseVector(20);
1:697a8d7:     enc.setProbes(2);
1:697a8d7:     enc.addToVector((byte[]) null, 100, v3);
1:697a8d7:     v1 = v2.minus(v3);
1:697a8d7:     assertEquals(23, v1.maxValue(), 0);
1:697a8d7:     assertEquals(2 * 23, v1.norm(1), 0);
1:697a8d7: 
1:697a8d7:     enc.addToVector((byte[]) null, 7, v1);
1:697a8d7:     assertEquals(30, v1.maxValue(), 0);
1:697a8d7:     assertEquals(2 * 30, v1.norm(1), 0);
1:697a8d7:     assertEquals(30, v1.get(9), 0);
1:697a8d7:     assertEquals(30, v1.get(10), 0);
1:697a8d7:   }
1:697a8d7: 
1:697a8d7:   @Test
1:697a8d7:   public void testAsString() {
1:e0ec7c1:     FeatureVectorEncoder enc = new ConstantValueEncoder("foo");
1:697a8d7:     assertEquals("foo", enc.asString("123"));
1:697a8d7:   }
1:697a8d7: 
1:697a8d7: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1:     FeatureVectorEncoder enc = new ConstantValueEncoder("foo");
author:Ted Dunning
-------------------------------------------------------------------------------
commit:697a8d7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.vectorizer.encoders;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.junit.Test;
1: 
1: public final class ConstantValueEncoderTest extends MahoutTestCase {
1: 
1:   @Test
1:   public void testAddToVector() {
1:     FeatureVectorEncoder enc = new ConstantValueEncoder("foo");
1:     Vector v1 = new DenseVector(20);
1:     enc.addToVector((byte[]) null, -123, v1);
1:     assertEquals(-123, v1.minValue(), 0);
1:     assertEquals(0, v1.maxValue(), 0);
1:     assertEquals(123, v1.norm(1), 0);
1: 
1:     v1 = new DenseVector(20);
1:     enc.addToVector((byte[]) null, 123, v1);
1:     assertEquals(123, v1.maxValue(), 0);
1:     assertEquals(0, v1.minValue(), 0);
1:     assertEquals(123, v1.norm(1), 0);
1: 
1:     Vector v2 = new DenseVector(20);
1:     enc.setProbes(2);
1:     enc.addToVector((byte[]) null, 123, v2);
1:     assertEquals(123, v2.maxValue(), 0);
1:     assertEquals(2 * 123, v2.norm(1), 0);
1: 
1:     // v1 has one probe, v2 has two.  The first probe in v2 should be in the same
1:     // place as the only probe in v1
1:     v1 = v2.minus(v1);
1:     assertEquals(123, v1.maxValue(), 0);
1:     assertEquals(123, v1.norm(1), 0);
1: 
1:     Vector v3 = new DenseVector(20);
1:     enc.setProbes(2);
1:     enc.addToVector((byte[]) null, 100, v3);
1:     v1 = v2.minus(v3);
1:     assertEquals(23, v1.maxValue(), 0);
1:     assertEquals(2 * 23, v1.norm(1), 0);
1: 
1:     enc.addToVector((byte[]) null, 7, v1);
1:     assertEquals(30, v1.maxValue(), 0);
1:     assertEquals(2 * 30, v1.norm(1), 0);
1:     assertEquals(30, v1.get(9), 0);
1:     assertEquals(30, v1.get(10), 0);
1:   }
1: 
1:   @Test
1:   public void testAsString() {
0:     ConstantValueEncoder enc = new ConstantValueEncoder("foo");
1:     assertEquals("foo", enc.asString("123"));
1:   }
1: 
1: }
============================================================================