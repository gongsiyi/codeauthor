1:d61a0ee: /**
1:d61a0ee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d61a0ee:  * contributor license agreements.  See the NOTICE file distributed with
1:d61a0ee:  * this work for additional information regarding copyright ownership.
1:d61a0ee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d61a0ee:  * (the "License"); you may not use this file except in compliance with
1:d61a0ee:  * the License.  You may obtain a copy of the License at
1:d61a0ee:  *
1:d61a0ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d61a0ee:  *
1:d61a0ee:  * Unless required by applicable law or agreed to in writing, software
1:d61a0ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d61a0ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d61a0ee:  * See the License for the specific language governing permissions and
1:d61a0ee:  * limitations under the License.
1:d61a0ee:  */
1:d61a0ee: 
1:d61a0ee: package org.apache.mahout.utils.vectors.lucene;
1:d61a0ee: 
1:d61a0ee: import org.apache.mahout.common.RandomUtils;
1:d61a0ee: 
1:d61a0ee: class TermInfoClusterInOut implements Comparable<TermInfoClusterInOut> {
1:d61a0ee: 
1:d61a0ee:   private final String term;
1:d61a0ee:   private final int inClusterDF;
1:d61a0ee:   private final int outClusterDF;
1:d61a0ee:   private final double logLikelihoodRatio;
1:d61a0ee: 
1:d61a0ee:   TermInfoClusterInOut(String term, int inClusterDF, int outClusterDF, double logLikelihoodRatio) {
1:d61a0ee:     this.term = term;
1:d61a0ee:     this.inClusterDF = inClusterDF;
1:d61a0ee:     this.outClusterDF = outClusterDF;
1:d61a0ee:     this.logLikelihoodRatio = logLikelihoodRatio;
1:d61a0ee:   }
1:d61a0ee: 
1:d61a0ee:   @Override
1:d61a0ee:   public int hashCode() {
1:d61a0ee:     return term.hashCode() ^ inClusterDF ^ outClusterDF ^ RandomUtils.hashDouble(logLikelihoodRatio);
1:d61a0ee:   }
1:d61a0ee: 
1:d61a0ee:   @Override
1:d61a0ee:   public boolean equals(Object o) {
1:d61a0ee:     if (!(o instanceof TermInfoClusterInOut)) {
1:d61a0ee:       return false;
1:d61a0ee:     }
1:d61a0ee:     TermInfoClusterInOut other = (TermInfoClusterInOut) o;
1:d61a0ee:     return term.equals(other.getTerm())
1:d61a0ee:         && inClusterDF == other.getInClusterDF()
1:d61a0ee:         && outClusterDF == other.getOutClusterDF()
1:d61a0ee:         && logLikelihoodRatio == other.getLogLikelihoodRatio();
1:d61a0ee:   }
1:d61a0ee: 
1:d61a0ee:   @Override
1:d61a0ee:   public int compareTo(TermInfoClusterInOut that) {
1:bdb1c48:     int res = Double.compare(that.logLikelihoodRatio, logLikelihoodRatio);
1:d61a0ee:     if (res == 0) {
1:d61a0ee:       res = term.compareTo(that.term);
1:d61a0ee:     }
1:d61a0ee:     return res;
1:d61a0ee:   }
1:d61a0ee: 
1:d61a0ee:   public int getInClusterDiff() {
1:d61a0ee:     return this.inClusterDF - this.outClusterDF;
1:d61a0ee:   }
1:d61a0ee: 
1:d61a0ee:   String getTerm() {
1:d61a0ee:     return term;
1:d61a0ee:   }
1:d61a0ee: 
1:d61a0ee:   int getInClusterDF() {
1:d61a0ee:     return inClusterDF;
1:d61a0ee:   }
1:d61a0ee: 
1:d61a0ee:   int getOutClusterDF() {
1:d61a0ee:     return outClusterDF;
1:d61a0ee:   }
1:d61a0ee: 
1:d61a0ee:   double getLogLikelihoodRatio() {
1:d61a0ee:     return logLikelihoodRatio;
1:d61a0ee:   }
1:d61a0ee: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:     int res = Double.compare(that.logLikelihoodRatio, logLikelihoodRatio);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.utils.vectors.lucene;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: 
1: class TermInfoClusterInOut implements Comparable<TermInfoClusterInOut> {
1: 
1:   private final String term;
1:   private final int inClusterDF;
1:   private final int outClusterDF;
1:   private final double logLikelihoodRatio;
1: 
1:   TermInfoClusterInOut(String term, int inClusterDF, int outClusterDF, double logLikelihoodRatio) {
1:     this.term = term;
1:     this.inClusterDF = inClusterDF;
1:     this.outClusterDF = outClusterDF;
1:     this.logLikelihoodRatio = logLikelihoodRatio;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return term.hashCode() ^ inClusterDF ^ outClusterDF ^ RandomUtils.hashDouble(logLikelihoodRatio);
1:   }
1: 
1:   @Override
1:   public boolean equals(Object o) {
1:     if (!(o instanceof TermInfoClusterInOut)) {
1:       return false;
1:     }
1:     TermInfoClusterInOut other = (TermInfoClusterInOut) o;
1:     return term.equals(other.getTerm())
1:         && inClusterDF == other.getInClusterDF()
1:         && outClusterDF == other.getOutClusterDF()
1:         && logLikelihoodRatio == other.getLogLikelihoodRatio();
1:   }
1: 
1:   @Override
1:   public int compareTo(TermInfoClusterInOut that) {
0:     int res = -Double.compare(logLikelihoodRatio, that.logLikelihoodRatio);
1:     if (res == 0) {
1:       res = term.compareTo(that.term);
1:     }
1:     return res;
1:   }
1: 
1:   public int getInClusterDiff() {
1:     return this.inClusterDF - this.outClusterDF;
1:   }
1: 
1:   String getTerm() {
1:     return term;
1:   }
1: 
1:   int getInClusterDF() {
1:     return inClusterDF;
1:   }
1: 
1:   int getOutClusterDF() {
1:     return outClusterDF;
1:   }
1: 
1:   double getLogLikelihoodRatio() {
1:     return logLikelihoodRatio;
1:   }
1: }
============================================================================