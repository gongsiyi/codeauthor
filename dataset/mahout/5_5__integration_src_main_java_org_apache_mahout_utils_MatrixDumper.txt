1:f23eb85: /*
1:f23eb85:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f23eb85:  * contributor license agreements.  See the NOTICE file distributed with
1:f23eb85:  * this work for additional information regarding copyright ownership.
1:f23eb85:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f23eb85:  * (the "License"); you may not use this file except in compliance with
1:f23eb85:  * the License.  You may obtain a copy of the License at
1:f23eb85:  *
1:f23eb85:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f23eb85:  *
1:f23eb85:  * Unless required by applicable law or agreed to in writing, software
1:f23eb85:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f23eb85:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f23eb85:  * See the License for the specific language governing permissions and
1:f23eb85:  * limitations under the License.
1:f23eb85:  */
2:f23eb85: 
1:f23eb85: package org.apache.mahout.utils;
1:f23eb85: 
1:f23eb85: import java.io.File;
1:f23eb85: import java.io.FileOutputStream;
1:f23eb85: import java.io.IOException;
1:f23eb85: import java.io.OutputStream;
1:f23eb85: import java.io.PrintStream;
1:03a9492: import java.util.List;
1:f23eb85: import java.util.Map;
1:f23eb85: 
1:85f9ece: import org.apache.commons.io.Charsets;
1:f23eb85: import org.apache.hadoop.conf.Configuration;
1:f23eb85: import org.apache.hadoop.fs.Path;
1:f23eb85: import org.apache.hadoop.util.ToolRunner;
1:f23eb85: import org.apache.mahout.common.AbstractJob;
1:051cbcf: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
1:f23eb85: import org.apache.mahout.math.Matrix;
1:f23eb85: import org.apache.mahout.math.MatrixWritable;
1:f23eb85: 
1:f23eb85: /**
1:f23eb85:  * Export a Matrix in various text formats:
1:f23eb85:  *    * CSV file
1:f23eb85:  * 
1:f23eb85:  * Input format: Hadoop SequenceFile with Text key and MatrixWritable value, 1 pair
1:f23eb85:  * TODO:
1:f23eb85:  *     Needs class for key value- should not hard-code to Text.
1:f23eb85:  *     Options for row and column headers- stats software can be picky.
1:f23eb85:  * Assumes only one matrix in a file.
1:f23eb85:  */
1:f23eb85: public final class MatrixDumper extends AbstractJob {
1:f23eb85:   
1:f23eb85:   private MatrixDumper() { }
1:f23eb85:   
1:f23eb85:   public static void main(String[] args) throws Exception {
1:f23eb85:     ToolRunner.run(new MatrixDumper(), args);
4:f23eb85:   }
1:f23eb85:   
1:f23eb85:   @Override
1:f23eb85:   public int run(String[] args) throws Exception {
1:f23eb85:     
1:f23eb85:     addInputOption();
1:f23eb85:     addOption("output", "o", "Output path", null); // AbstractJob output feature requires param
1:03a9492:     Map<String, List<String>> parsedArgs = parseArguments(args);
1:f23eb85:     if (parsedArgs == null) {
1:f23eb85:       return -1;
1:f23eb85:     }
1:03a9492:     String outputFile = hasOption("output") ? getOption("output") : null;
1:f23eb85:     exportCSV(getInputPath(), outputFile, false);
1:f23eb85:     return 0;
1:f23eb85:   }
1:f23eb85:   
1:f23eb85:   private static void exportCSV(Path inputPath, String outputFile, boolean doLabels) throws IOException {
1:051cbcf:     SequenceFileValueIterator<MatrixWritable> it =
1:87c15be:         new SequenceFileValueIterator<>(inputPath, true, new Configuration());
1:051cbcf:     Matrix m = it.next().get();
1:051cbcf:     it.close();
1:f23eb85:     PrintStream ps = getPrintStream(outputFile);
1:f23eb85:     String[] columnLabels = getLabels(m.numCols(), m.getColumnLabelBindings(), "col");
1:f23eb85:     String[] rowLabels = getLabels(m.numRows(), m.getRowLabelBindings(), "row");
1:f23eb85:     if (doLabels) {
1:f23eb85:       ps.print("rowid,");
1:f23eb85:       ps.print(columnLabels[0]);
1:e64dd36:       for (int c = 1; c < m.numCols(); c++) {
1:f23eb85:         ps.print(',' + columnLabels[c]);
1:f23eb85:       }
1:f23eb85:       ps.println();
1:f23eb85:     }
1:e64dd36:     for (int r = 0; r < m.numRows(); r++) {
1:f23eb85:       if (doLabels) {
1:f23eb85:         ps.print(rowLabels[0] + ',');
1:f23eb85:       }
1:f23eb85:       ps.print(Double.toString(m.getQuick(r,0)));
1:e64dd36:       for (int c = 1; c < m.numCols(); c++) {
1:f23eb85:         ps.print(",");
1:f23eb85:         ps.print(Double.toString(m.getQuick(r,c)));
1:f23eb85:       }
1:f23eb85:       ps.println();
1:f23eb85:     }
1:f23eb85:     if (ps != System.out) {
1:f23eb85:       ps.close();
1:f23eb85:     }
1:f23eb85:   }
1:f23eb85:   
1:f23eb85:   private static PrintStream getPrintStream(String outputPath) throws IOException {
1:229aeff:     if (outputPath == null) {
1:f23eb85:       return System.out;
1:f23eb85:     }
1:229aeff:     File outputFile = new File(outputPath);
1:229aeff:     if (outputFile.exists()) {
1:229aeff:       outputFile.delete();
1:229aeff:     }
1:229aeff:     outputFile.createNewFile();
1:229aeff:     OutputStream os = new FileOutputStream(outputFile);
1:bdb1c48:     return new PrintStream(os, false, Charsets.UTF_8.displayName());
1:f23eb85:   }
1:f23eb85:   
1:f23eb85:   /**
1:f23eb85:    * return the label set, sorted by matrix order
1:f23eb85:    * if there are no labels, fabricate them using the starter string
1:f23eb85:    * @param length 
1:f23eb85:    */
1:f23eb85:   private static String[] getLabels(int length, Map<String,Integer> labels, String start) {
1:f23eb85:     if (labels != null) {
1:f23eb85:       return sortLabels(labels);
1:f23eb85:     }
1:051cbcf:     String[] sorted = new String[length];
1:e64dd36:     for (int i = 1; i <= length; i++) {
1:051cbcf:       sorted[i] = start + i;
1:051cbcf:     }
1:051cbcf:     return sorted;
1:f23eb85:   }
1:f23eb85:   
1:f23eb85:   private static String[] sortLabels(Map<String,Integer> labels) {
1:229aeff:     String[] sorted = new String[labels.size()];
1:229aeff:     for (Map.Entry<String,Integer> entry : labels.entrySet()) {
1:229aeff:       sorted[entry.getValue()] = entry.getKey();
1:f23eb85:     }
2:f23eb85:     return sorted;
1:f23eb85:   }
1:f23eb85:   
1:f23eb85: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:         new SequenceFileValueIterator<>(inputPath, true, new Configuration());
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
1:     return new PrintStream(os, false, Charsets.UTF_8.displayName());
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     if (outputPath == null) {
1:     File outputFile = new File(outputPath);
1:     if (outputFile.exists()) {
1:       outputFile.delete();
1:     }
1:     outputFile.createNewFile();
1:     OutputStream os = new FileOutputStream(outputFile);
0:     return new PrintStream(os);
/////////////////////////////////////////////////////////////////////////
1:     String[] sorted = new String[labels.size()];
1:     for (Map.Entry<String,Integer> entry : labels.entrySet()) {
1:       sorted[entry.getValue()] = entry.getKey();
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
/////////////////////////////////////////////////////////////////////////
1:     SequenceFileValueIterator<MatrixWritable> it =
0:         new SequenceFileValueIterator<MatrixWritable>(inputPath, true, new Configuration());
1:     Matrix m = it.next().get();
1:     it.close();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     String[] sorted = new String[length];
0:     for(int i = 1; i <= length; i++) {
1:       sorted[i] = start + i;
1:     }
1:     return sorted;
commit:f23eb85
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.utils;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.PrintStream;
1: import java.util.Map;
1: 
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.io.SequenceFile;
0: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.util.ToolRunner;
1: import org.apache.mahout.common.AbstractJob;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixWritable;
1: 
1: /**
1:  * Export a Matrix in various text formats:
1:  *    * CSV file
1:  * 
1:  * Input format: Hadoop SequenceFile with Text key and MatrixWritable value, 1 pair
1:  * TODO:
1:  *     Needs class for key value- should not hard-code to Text.
1:  *     Options for row and column headers- stats software can be picky.
1:  * Assumes only one matrix in a file.
1:  */
1: public final class MatrixDumper extends AbstractJob {
1:   
1:   private MatrixDumper() { }
1:   
1:   public static void main(String[] args) throws Exception {
1:     ToolRunner.run(new MatrixDumper(), args);
1:   }
1:   
1:   @Override
1:   public int run(String[] args) throws Exception {
1:     
1:     addInputOption();
1:     addOption("output", "o", "Output path", null); // AbstractJob output feature requires param
0:     Map<String, String> parsedArgs = parseArguments(args);
1:     if (parsedArgs == null) {
1:       return -1;
1:     }
0:     String outputFile = parsedArgs.containsKey("--output") ? parsedArgs.get("--output") : null;
1:     exportCSV(getInputPath(), outputFile, false);
1:     return 0;
1:   }
1:   
1:   private static void exportCSV(Path inputPath, String outputFile, boolean doLabels) throws IOException {
0:     MatrixWritable mw = new MatrixWritable();
0:     Text key = new Text();
0:     readSeqFile(inputPath, key, mw);
1:     PrintStream ps = getPrintStream(outputFile);
0:     Matrix m = mw.get();
1:     String[] columnLabels = getLabels(m.numCols(), m.getColumnLabelBindings(), "col");
1:     String[] rowLabels = getLabels(m.numRows(), m.getRowLabelBindings(), "row");
1:     if (doLabels) {
1:       ps.print("rowid,");
1:       ps.print(columnLabels[0]);
0:       for(int c = 1; c < m.numCols(); c++) {
1:         ps.print(',' + columnLabels[c]);
1:       }
1:       ps.println();
1:     }
0:     for(int r = 0; r < m.numRows(); r++) {
1:       if (doLabels) {
1:         ps.print(rowLabels[0] + ',');
1:       }
1:       ps.print(Double.toString(m.getQuick(r,0)));
0:       for(int c = 1; c < m.numCols(); c++) {
1:         ps.print(",");
1:         ps.print(Double.toString(m.getQuick(r,c)));
1:       }
1:       ps.println();
1:     }
1:     if (ps != System.out) {
1:       ps.close();
1:     }
1:   }
1:   
0:   private static void readSeqFile(Path inputPath, Text key, MatrixWritable m) throws IOException {
0:     Configuration conf = new Configuration();
0:     FileSystem fs = FileSystem.get(conf);
0:     SequenceFile.Reader reader = new SequenceFile.Reader(fs, inputPath, conf);
0:     reader.getMetadata();
0:     reader.next(key, m);
1:   }
1:   
1:   private static PrintStream getPrintStream(String outputPath) throws IOException {
0:     if (outputPath != null) {
0:       File outputFile = new File(outputPath);
0:       if (outputFile.exists()) {
0:         outputFile.delete();
1:       }
0:       outputFile.createNewFile();
0:       OutputStream os = new FileOutputStream(outputFile);
0:       return new PrintStream(os);
0:     } else {
1:       return System.out;
1:     }
1:   }
1:   
1:   /**
1:    * return the label set, sorted by matrix order
1:    * if there are no labels, fabricate them using the starter string
1:    * @param length 
1:    */
1:   private static String[] getLabels(int length, Map<String,Integer> labels, String start) {
1:     if (labels != null) {
1:       return sortLabels(labels);
0:     } else {
0:       String[] sorted = new String[length];
0:       for(int i = 1; i <= length; i++) {
0:         sorted[i] = start + i;
1:       }
1:       return sorted;
1:     }
1:   }
1:   
1:   private static String[] sortLabels(Map<String,Integer> labels) {
0:     String[] sorted = new String[labels.keySet().size()];
0:     for(String label: labels.keySet()) {
0:       Integer index = labels.get(label);
0:       sorted[index] = label;
1:     }
1:     return sorted;
1:   }
1:   
1: }
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:       for (int c = 1; c < m.numCols(); c++) {
1:     for (int r = 0; r < m.numRows(); r++) {
1:       for (int c = 1; c < m.numCols(); c++) {
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 1; i <= length; i++) {
/////////////////////////////////////////////////////////////////////////
0:     for (String label: labels.keySet()) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:03a9492
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     Map<String, List<String>> parsedArgs = parseArguments(args);
1:     String outputFile = hasOption("output") ? getOption("output") : null;
============================================================================