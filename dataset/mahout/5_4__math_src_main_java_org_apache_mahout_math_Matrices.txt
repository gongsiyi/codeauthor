2:3032e7b: /**
1:3032e7b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3032e7b:  * contributor license agreements.  See the NOTICE file distributed with
1:3032e7b:  * this work for additional information regarding copyright ownership.
1:3032e7b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3032e7b:  * (the "License"); you may not use this file except in compliance with
1:3032e7b:  * the License.  You may obtain a copy of the License at
1:3032e7b:  *
1:3032e7b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3032e7b:  *
1:3032e7b:  * Unless required by applicable law or agreed to in writing, software
1:3032e7b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3032e7b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3032e7b:  * See the License for the specific language governing permissions and
1:3032e7b:  * limitations under the License.
2:3032e7b:  */
1:3032e7b: 
1:3032e7b: package org.apache.mahout.math;
1:3032e7b: 
1:0b564c7: import com.google.common.base.Preconditions;
1:3032e7b: import org.apache.mahout.common.RandomUtils;
1:3032e7b: import org.apache.mahout.math.function.DoubleFunction;
1:3032e7b: import org.apache.mahout.math.function.Functions;
1:3032e7b: import org.apache.mahout.math.function.IntIntFunction;
1:3032e7b: 
1:3032e7b: import java.util.Random;
1:3032e7b: 
1:3032e7b: public final class Matrices {
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * Create a matrix view based on a function generator.
1:b5c2879:    * <p>
1:3032e7b:    * The generator needs to be idempotent, i.e. returning same value
1:3032e7b:    * for each combination of (row, column) argument sent to generator's
1:3032e7b:    * {@link IntIntFunction#apply(int, int)} call.
1:3032e7b:    *
1:3032e7b:    * @param rows      Number of rows in a view
1:3032e7b:    * @param columns   Number of columns in a view.
1:3032e7b:    * @param gf        view generator
1:3032e7b:    * @param denseLike type of matrix returne dby {@link org.apache.mahout.math.Matrix#like()}.
1:3032e7b:    * @return new matrix view.
1:3032e7b:    */
1:aa32771:   public static Matrix functionalMatrixView(final int rows,
1:3032e7b:                                                   final int columns,
1:3032e7b:                                                   final IntIntFunction gf,
1:3032e7b:                                                   final boolean denseLike) {
1:3032e7b:     return new FunctionalMatrixView(rows, columns, gf, denseLike);
2:3032e7b:   }
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * Shorter form of {@link Matrices#functionalMatrixView(int, int,
1:3032e7b:    * org.apache.mahout.math.function.IntIntFunction, boolean)}.
1:3032e7b:    */
1:aa32771:   public static Matrix functionalMatrixView(final int rows,
1:3032e7b:                                                   final int columns,
1:3032e7b:                                                   final IntIntFunction gf) {
1:3032e7b:     return new FunctionalMatrixView(rows, columns, gf);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * A read-only transposed view of a matrix argument.
1:3032e7b:    *
1:3032e7b:    * @param m original matrix
1:3032e7b:    * @return transposed view of original matrix
1:3032e7b:    */
1:aa32771:   public static Matrix transposedView(final Matrix m) {
1:3032e7b: 
1:0b564c7:     Preconditions.checkArgument(!(m instanceof SparseColumnMatrix));
1:0b564c7: 
1:0b564c7:     if (m instanceof TransposedMatrixView) {
1:0b564c7:       return ((TransposedMatrixView) m).getDelegate();
1:0b564c7:     } else {
1:0b564c7:       return new TransposedMatrixView(m);
1:0b564c7:     }
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * Random Gaussian matrix view.
1:3032e7b:    *
1:3032e7b:    * @param seed generator seed
1:3032e7b:    */
1:aa32771:   public static Matrix gaussianView(final int rows,
1:3032e7b:                                           final int columns,
1:3032e7b:                                           long seed) {
1:3032e7b:     return functionalMatrixView(rows, columns, gaussianGenerator(seed), true);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * Matrix view based on uniform [-1,1) distribution.
1:3032e7b:    *
1:3032e7b:    * @param seed generator seed
1:3032e7b:    */
1:aa32771:   public static Matrix symmetricUniformView(final int rows,
1:3032e7b:                                                   final int columns,
1:3032e7b:                                                   int seed) {
1:3032e7b:     return functionalMatrixView(rows, columns, uniformSymmetricGenerator(seed), true);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * Matrix view based on uniform [0,1) distribution.
1:3032e7b:    *
1:3032e7b:    * @param seed generator seed
1:3032e7b:    */
1:aa32771:   public static Matrix uniformView(final int rows,
1:3032e7b:                                          final int columns,
1:3032e7b:                                          int seed) {
1:3032e7b:     return functionalMatrixView(rows, columns, uniformGenerator(seed), true);
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * Generator for a matrix populated by random Gauissian values (Gaussian matrix view)
1:3032e7b:    *
1:3032e7b:    * @param seed The seed for the matrix.
1:3032e7b:    * @return Gaussian {@link IntIntFunction} generating matrix view with normal values
1:3032e7b:    */
1:aa32771:   public static IntIntFunction gaussianGenerator(final long seed) {
1:3032e7b:     final Random rnd = RandomUtils.getRandom(seed);
1:aa32771:     return new IntIntFunction() {
2:3032e7b:       @Override
1:3032e7b:       public double apply(int first, int second) {
1:aa32771:         rnd.setSeed(seed ^ (((long) first << 32) | (second & 0xffffffffL)));
1:3032e7b:         return rnd.nextGaussian();
1:3032e7b:       }
2:3032e7b:     };
1:3032e7b:   }
1:3032e7b: 
1:0d6c4e0:   private static final double UNIFORM_DIVISOR = Math.pow(2.0, 64);
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * Uniform [-1,1) matrix generator function.
1:b5c2879:    * <p>
1:3032e7b:    * WARNING: to keep things performant, it is stateful and so not thread-safe.
1:3032e7b:    * You'd need to create a copy per thread (with same seed) if shared between threads.
1:3032e7b:    *
1:aa32771:    * @param seed - random seed initializer
1:3032e7b:    * @return Uniform {@link IntIntFunction} generator
1:3032e7b:    */
1:aa32771:   public static IntIntFunction uniformSymmetricGenerator(final int seed) {
1:1127661:     return new IntIntFunction() {
1:3032e7b:       private byte[] data = new byte[8];
1:3032e7b: 
1:3032e7b:       @Override
1:3032e7b:       public double apply(int row, int column) {
1:aa32771:         long d = ((long) row << Integer.SIZE) | (column & 0xffffffffL);
1:0d6c4e0:         for (int i = 0; i < 8; i++, d >>>= 8) data[i] = (byte) d;
1:3032e7b:         long hash = MurmurHash.hash64A(data, seed);
1:3032e7b:         return hash / UNIFORM_DIVISOR;
1:3032e7b:       }
1:3032e7b:     };
1:3032e7b:   }
1:3032e7b: 
1:3032e7b:   /**
1:3032e7b:    * Uniform [0,1) matrix generator function
1:3032e7b:    *
1:3032e7b:    * @param seed generator seed
1:3032e7b:    */
1:aa32771:   public static IntIntFunction uniformGenerator(final int seed) {
1:3032e7b:     return Functions.chain(new DoubleFunction() {
1:3032e7b:       @Override
1:3032e7b:       public double apply(double x) {
1:3032e7b:         return (x + 1.0) / 2.0;
1:3032e7b:       }
1:3032e7b:     }, uniformSymmetricGenerator(seed));
1:3032e7b:   }
1:3032e7b: 
1:3032e7b: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:b5c2879
/////////////////////////////////////////////////////////////////////////
1:    * <p>
/////////////////////////////////////////////////////////////////////////
1:    * <p>
author:smarthi
-------------------------------------------------------------------------------
commit:aa32771
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public static Matrix functionalMatrixView(final int rows,
/////////////////////////////////////////////////////////////////////////
1:   public static Matrix functionalMatrixView(final int rows,
/////////////////////////////////////////////////////////////////////////
1:   public static Matrix transposedView(final Matrix m) {
/////////////////////////////////////////////////////////////////////////
1:   public static Matrix gaussianView(final int rows,
/////////////////////////////////////////////////////////////////////////
1:   public static Matrix symmetricUniformView(final int rows,
/////////////////////////////////////////////////////////////////////////
1:   public static Matrix uniformView(final int rows,
/////////////////////////////////////////////////////////////////////////
1:   public static IntIntFunction gaussianGenerator(final long seed) {
1:     return new IntIntFunction() {
1:         rnd.setSeed(seed ^ (((long) first << 32) | (second & 0xffffffffL)));
/////////////////////////////////////////////////////////////////////////
1:    * @param seed - random seed initializer
1:   public static IntIntFunction uniformSymmetricGenerator(final int seed) {
1:         long d = ((long) row << Integer.SIZE) | (column & 0xffffffffL);
/////////////////////////////////////////////////////////////////////////
1:   public static IntIntFunction uniformGenerator(final int seed) {
commit:1127661
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public static Matrix functionalMatrixView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static Matrix functionalMatrixView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static Matrix transposedView(final Matrix m) {
/////////////////////////////////////////////////////////////////////////
0:   public static Matrix gaussianView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static Matrix symmetricUniformView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static Matrix uniformView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static IntIntFunction gaussianGenerator(final long seed) {
1:     return new IntIntFunction() {
0:         rnd.setSeed(seed ^ (((long) first << 32) | (second & 0xffffffffL)));
0:   private static final double UNIFORM_DIVISOR = Math.pow(2.0, 63);
/////////////////////////////////////////////////////////////////////////
0:   public static IntIntFunction uniformSymmetricGenerator(final int seed) {
0:         long d = ((long) row << Integer.SIZE) | (column & 0xffffffffL);
0:         for (int i = 0; i < 8; i++, d >>>= 4) data[i] = (byte) d;
/////////////////////////////////////////////////////////////////////////
0:   public static IntIntFunction uniformGenerator(final int seed) {
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:0d6c4e0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.flavor.TraversingStructureEnum;
/////////////////////////////////////////////////////////////////////////
0:   public static final Matrix functionalMatrixView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static final Matrix functionalMatrixView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static final Matrix transposedView(final Matrix m) {
/////////////////////////////////////////////////////////////////////////
0:   public static final Matrix gaussianView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static final Matrix symmetricUniformView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static final Matrix uniformView(final int rows,
/////////////////////////////////////////////////////////////////////////
0:   public static final IntIntFunction gaussianGenerator(final long seed) {
0:     IntIntFunction gaussianGF = new IntIntFunction() {
0:         rnd.setSeed(seed ^ (((long) first << 32) | (second & 0xffffffffl)));
0:     return gaussianGF;
1:   private static final double UNIFORM_DIVISOR = Math.pow(2.0, 64);
/////////////////////////////////////////////////////////////////////////
0:   public static final IntIntFunction uniformSymmetricGenerator(final int seed) {
0:         long d = ((long) row << Integer.SIZE) | (column & 0xffffffffl);
1:         for (int i = 0; i < 8; i++, d >>>= 8) data[i] = (byte) d;
/////////////////////////////////////////////////////////////////////////
0:   public static final IntIntFunction uniformGenerator(final int seed) {
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
0: import org.apache.mahout.math.flavor.TraversingStructureEnum;
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(!(m instanceof SparseColumnMatrix));
1: 
1:     if (m instanceof TransposedMatrixView) {
1:       return ((TransposedMatrixView) m).getDelegate();
1:     } else {
1:       return new TransposedMatrixView(m);
1:     }
commit:3032e7b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.function.DoubleFunction;
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.math.function.IntIntFunction;
1: 
1: import java.util.Random;
1: 
1: /**
0:  * @author dmitriy
1:  */
1: public final class Matrices {
1: 
1:   /**
1:    * Create a matrix view based on a function generator.
0:    * <p/>
1:    * The generator needs to be idempotent, i.e. returning same value
1:    * for each combination of (row, column) argument sent to generator's
1:    * {@link IntIntFunction#apply(int, int)} call.
1:    *
1:    * @param rows      Number of rows in a view
1:    * @param columns   Number of columns in a view.
1:    * @param gf        view generator
1:    * @param denseLike type of matrix returne dby {@link org.apache.mahout.math.Matrix#like()}.
1:    * @return new matrix view.
1:    */
0:   public static final Matrix functionalMatrixView(final int rows,
1:                                                   final int columns,
1:                                                   final IntIntFunction gf,
1:                                                   final boolean denseLike) {
1:     return new FunctionalMatrixView(rows, columns, gf, denseLike);
1:   }
1: 
1:   /**
1:    * Shorter form of {@link Matrices#functionalMatrixView(int, int,
1:    * org.apache.mahout.math.function.IntIntFunction, boolean)}.
1:    */
0:   public static final Matrix functionalMatrixView(final int rows,
1:                                                   final int columns,
1:                                                   final IntIntFunction gf) {
1:     return new FunctionalMatrixView(rows, columns, gf);
1:   }
1: 
1:   /**
1:    * A read-only transposed view of a matrix argument.
1:    *
1:    * @param m original matrix
1:    * @return transposed view of original matrix
1:    */
0:   public static final Matrix transposedView(final Matrix m) {
0:     IntIntFunction tf = new IntIntFunction() {
1:       @Override
0:       public double apply(int row, int col) {
0:         return m.getQuick(col, row);
1:       }
1:     };
1: 
0:     // TODO: Matrix api does not support denseLike() interrogation.
0:     // so our guess has to be rough here.
0:     return functionalMatrixView(m.numCols(), m.numRows(), tf, m instanceof DenseMatrix);
1:   }
1: 
1:   /**
1:    * Random Gaussian matrix view.
1:    *
1:    * @param seed generator seed
1:    */
0:   public static final Matrix gaussianView(final int rows,
1:                                           final int columns,
1:                                           long seed) {
1:     return functionalMatrixView(rows, columns, gaussianGenerator(seed), true);
1:   }
1: 
1: 
1:   /**
1:    * Matrix view based on uniform [-1,1) distribution.
1:    *
1:    * @param seed generator seed
1:    */
0:   public static final Matrix symmetricUniformView(final int rows,
1:                                                   final int columns,
1:                                                   int seed) {
1:     return functionalMatrixView(rows, columns, uniformSymmetricGenerator(seed), true);
1:   }
1: 
1:   /**
1:    * Matrix view based on uniform [0,1) distribution.
1:    *
1:    * @param seed generator seed
1:    */
0:   public static final Matrix uniformView(final int rows,
1:                                          final int columns,
1:                                          int seed) {
1:     return functionalMatrixView(rows, columns, uniformGenerator(seed), true);
1:   }
1: 
1:   /**
1:    * Generator for a matrix populated by random Gauissian values (Gaussian matrix view)
1:    *
1:    * @param seed The seed for the matrix.
1:    * @return Gaussian {@link IntIntFunction} generating matrix view with normal values
1:    */
0:   public static final IntIntFunction gaussianGenerator(final long seed) {
1:     final Random rnd = RandomUtils.getRandom(seed);
0:     IntIntFunction gaussianGF = new IntIntFunction() {
1:       @Override
1:       public double apply(int first, int second) {
0:         rnd.setSeed(seed ^ (((long) first << 32) | (second & 0xffffffffl)));
1:         return rnd.nextGaussian();
1:       }
1:     };
0:     return gaussianGF;
1:   }
1: 
0:   private static final double UNIFORM_DIVISOR = Math.pow(2.0, 64);
1: 
1:   /**
1:    * Uniform [-1,1) matrix generator function.
0:    * <p/>
1:    * WARNING: to keep things performant, it is stateful and so not thread-safe.
1:    * You'd need to create a copy per thread (with same seed) if shared between threads.
1:    *
0:    * @param seed
1:    * @return Uniform {@link IntIntFunction} generator
1:    */
0:   public static final IntIntFunction uniformSymmetricGenerator(final int seed) {
0:     return new IntIntFunction() {
1:       private byte[] data = new byte[8];
1: 
1:       @Override
1:       public double apply(int row, int column) {
0:         long d = ((long) row << Integer.SIZE) | (column & 0xffffffffl);
0:         for (int i = 0; i < 8; i++, d >>>= 8) data[i] = (byte) d;
1:         long hash = MurmurHash.hash64A(data, seed);
1:         return hash / UNIFORM_DIVISOR;
1:       }
1:     };
1:   }
1: 
1:   /**
1:    * Uniform [0,1) matrix generator function
1:    *
1:    * @param seed generator seed
1:    */
0:   public static final IntIntFunction uniformGenerator(final int seed) {
1:     return Functions.chain(new DoubleFunction() {
1:       @Override
1:       public double apply(double x) {
1:         return (x + 1.0) / 2.0;
1:       }
1:     }, uniformSymmetricGenerator(seed));
1:   }
1: 
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:92fbb71
/////////////////////////////////////////////////////////////////////////
============================================================================