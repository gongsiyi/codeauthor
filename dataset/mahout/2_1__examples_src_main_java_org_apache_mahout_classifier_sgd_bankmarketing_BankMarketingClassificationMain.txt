1:a64100d: /*
1:a64100d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a64100d:  * contributor license agreements.  See the NOTICE file distributed with
1:a64100d:  * this work for additional information regarding copyright ownership.
1:a64100d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a64100d:  * (the "License"); you may not use this file except in compliance with
1:a64100d:  * the License.  You may obtain a copy of the License at
1:a64100d:  *
1:a64100d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a64100d:  *
1:a64100d:  * Unless required by applicable law or agreed to in writing, software
1:a64100d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a64100d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a64100d:  * See the License for the specific language governing permissions and
1:a64100d:  * limitations under the License.
1:a64100d:  */
2:a64100d: 
1:a64100d: package org.apache.mahout.classifier.sgd.bankmarketing;
1:a64100d: 
1:a64100d: import com.google.common.collect.Lists;
1:a64100d: import org.apache.mahout.classifier.evaluation.Auc;
1:a64100d: import org.apache.mahout.classifier.sgd.L1;
1:a64100d: import org.apache.mahout.classifier.sgd.OnlineLogisticRegression;
1:a64100d: 
1:a64100d: import java.util.Collections;
1:a64100d: import java.util.List;
1:a64100d: 
1:a64100d: /**
1:a64100d:  * Uses the SGD classifier on the 'Bank marketing' dataset from UCI.
1:a64100d:  *
1:a64100d:  * See http://archive.ics.uci.edu/ml/datasets/Bank+Marketing
1:a64100d:  *
1:a64100d:  * Learn when people accept or reject an offer from the bank via telephone based on income, age, education and more.
1:a64100d:  */
1:a64100d: public class BankMarketingClassificationMain {
1:a64100d: 
1:a64100d:   public static final int NUM_CATEGORIES = 2;
1:a64100d: 
1:a64100d:   public static void main(String[] args) throws Exception {
1:a64100d:     List<TelephoneCall> calls = Lists.newArrayList(new TelephoneCallParser("bank-full.csv"));
1:a64100d: 
1:a64100d:     double heldOutPercentage = 0.10;
1:a64100d: 
1:a64100d:     for (int run = 0; run < 20; run++) {
1:a64100d:       Collections.shuffle(calls);
1:a64100d:       int cutoff = (int) (heldOutPercentage * calls.size());
1:a64100d:       List<TelephoneCall> test = calls.subList(0, cutoff);
1:a64100d:       List<TelephoneCall> train = calls.subList(cutoff, calls.size());
1:a64100d: 
1:a64100d:       OnlineLogisticRegression lr = new OnlineLogisticRegression(NUM_CATEGORIES, TelephoneCall.FEATURES, new L1())
1:a64100d:         .learningRate(1)
1:a64100d:         .alpha(1)
1:a64100d:         .lambda(0.000001)
1:a64100d:         .stepOffset(10000)
1:a64100d:         .decayExponent(0.2);
1:a64100d:       for (int pass = 0; pass < 20; pass++) {
1:a64100d:         for (TelephoneCall observation : train) {
1:a64100d:           lr.train(observation.getTarget(), observation.asVector());
1:a64100d:         }
1:a64100d:         if (pass % 5 == 0) {
1:a64100d:           Auc eval = new Auc(0.5);
1:a64100d:           for (TelephoneCall testCall : test) {
1:a64100d:             eval.add(testCall.getTarget(), lr.classifyScalar(testCall.asVector()));
1:a64100d:           }
1:a64100d:           System.out.printf("%d, %.4f, %.4f\n", pass, lr.currentLearningRate(), eval.auc());
1:a64100d:         }
1:a64100d:       }
1:a64100d:     }
1:a64100d:   }
1:a64100d: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
author:frankscholten
-------------------------------------------------------------------------------
commit:a64100d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd.bankmarketing;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.classifier.evaluation.Auc;
1: import org.apache.mahout.classifier.sgd.L1;
1: import org.apache.mahout.classifier.sgd.OnlineLogisticRegression;
1: 
1: import java.util.Collections;
1: import java.util.List;
1: 
1: /**
1:  * Uses the SGD classifier on the 'Bank marketing' dataset from UCI.
1:  *
1:  * See http://archive.ics.uci.edu/ml/datasets/Bank+Marketing
1:  *
1:  * Learn when people accept or reject an offer from the bank via telephone based on income, age, education and more.
1:  */
1: public class BankMarketingClassificationMain {
1: 
1:   public static final int NUM_CATEGORIES = 2;
1: 
1:   public static void main(String[] args) throws Exception {
1:     List<TelephoneCall> calls = Lists.newArrayList(new TelephoneCallParser("bank-full.csv"));
1: 
1:     double heldOutPercentage = 0.10;
1: 
1:     for (int run = 0; run < 20; run++) {
1:       Collections.shuffle(calls);
1:       int cutoff = (int) (heldOutPercentage * calls.size());
1:       List<TelephoneCall> test = calls.subList(0, cutoff);
1:       List<TelephoneCall> train = calls.subList(cutoff, calls.size());
1: 
1:       OnlineLogisticRegression lr = new OnlineLogisticRegression(NUM_CATEGORIES, TelephoneCall.FEATURES, new L1())
1:         .learningRate(1)
1:         .alpha(1)
1:         .lambda(0.000001)
1:         .stepOffset(10000)
1:         .decayExponent(0.2);
1:       for (int pass = 0; pass < 20; pass++) {
1:         for (TelephoneCall observation : train) {
1:           lr.train(observation.getTarget(), observation.asVector());
1:         }
1:         if (pass % 5 == 0) {
1:           Auc eval = new Auc(0.5);
1:           for (TelephoneCall testCall : test) {
1:             eval.add(testCall.getTarget(), lr.classifyScalar(testCall.asVector()));
1:           }
1:           System.out.printf("%d, %.4f, %.4f\n", pass, lr.currentLearningRate(), eval.auc());
1:         }
1:       }
1: 
1:     }
1:   }
1: }
============================================================================