1:5b0b559: /**
1:5b0b559:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5b0b559:  * contributor license agreements.  See the NOTICE file distributed with
1:5b0b559:  * this work for additional information regarding copyright ownership.
1:5b0b559:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5b0b559:  * (the "License"); you may not use this file except in compliance with
1:5b0b559:  * the License.  You may obtain a copy of the License at
1:5b0b559:  *
1:5b0b559:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5b0b559:  *
1:5b0b559:  * Unless required by applicable law or agreed to in writing, software
1:5b0b559:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5b0b559:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5b0b559:  * See the License for the specific language governing permissions and
1:5b0b559:  * limitations under the License.
1:5b0b559:  */
1:5b0b559: 
1:5b0b559: package org.apache.mahout.common;
1:5b0b559: 
1:5b0b559: import org.apache.hadoop.fs.Path;
1:5b0b559: import org.junit.Test;
1:5b0b559: 
1:5b0b559: import java.io.File;
1:5b0b559: import java.net.URI;
1:5b0b559: 
1:5b0b559: 
1:5b0b559: public class DistributedCacheFileLocationTest extends MahoutTestCase {
1:5b0b559: 
1:5b0b559:   static final File FILE_I_WANT_TO_FIND = new File("file/i_want_to_find.txt");
1:5b0b559:   static final URI[] DISTRIBUTED_CACHE_FILES = new URI[] {
1:5b0b559:       new File("/first/file").toURI(), new File("/second/file").toURI(), FILE_I_WANT_TO_FIND.toURI() };
1:5b0b559: 
1:5b0b559:   @Test
1:5b0b559:   public void nonExistingFile() {
1:5b0b559:     Path path = HadoopUtil.findInCacheByPartOfFilename("no such file", DISTRIBUTED_CACHE_FILES);
1:5b0b559:     assertNull(path);
1:5b0b559:   }
1:5b0b559: 
1:5b0b559:   @Test
1:5b0b559:   public void existingFile() {
1:5b0b559:     Path path = HadoopUtil.findInCacheByPartOfFilename("want_to_find", DISTRIBUTED_CACHE_FILES);
1:5b0b559:     assertNotNull(path);
1:5b0b559:     assertEquals(FILE_I_WANT_TO_FIND.getName(), path.getName());
1:5b0b559:   }
1:5b0b559: 
1:5b0b559: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:5b0b559
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common;
1: 
1: import org.apache.hadoop.fs.Path;
1: import org.junit.Test;
1: 
1: import java.io.File;
1: import java.net.URI;
1: 
1: 
1: public class DistributedCacheFileLocationTest extends MahoutTestCase {
1: 
1:   static final File FILE_I_WANT_TO_FIND = new File("file/i_want_to_find.txt");
1:   static final URI[] DISTRIBUTED_CACHE_FILES = new URI[] {
1:       new File("/first/file").toURI(), new File("/second/file").toURI(), FILE_I_WANT_TO_FIND.toURI() };
1: 
1:   @Test
1:   public void nonExistingFile() {
1:     Path path = HadoopUtil.findInCacheByPartOfFilename("no such file", DISTRIBUTED_CACHE_FILES);
1:     assertNull(path);
1:   }
1: 
1:   @Test
1:   public void existingFile() {
1:     Path path = HadoopUtil.findInCacheByPartOfFilename("want_to_find", DISTRIBUTED_CACHE_FILES);
1:     assertNotNull(path);
1:     assertEquals(FILE_I_WANT_TO_FIND.getName(), path.getName());
1:   }
1: 
1: }
============================================================================