1:27d33a2: /**
1:27d33a2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27d33a2:  * contributor license agreements.  See the NOTICE file distributed with
1:27d33a2:  * this work for additional information regarding copyright ownership.
1:27d33a2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27d33a2:  * (the "License"); you may not use this file except in compliance with
1:27d33a2:  * the License.  You may obtain a copy of the License at
1:27d33a2:  *
1:27d33a2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:27d33a2:  *
1:27d33a2:  * Unless required by applicable law or agreed to in writing, software
1:27d33a2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27d33a2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27d33a2:  * See the License for the specific language governing permissions and
1:27d33a2:  * limitations under the License.
1:27d33a2:  */
2:27d33a2: 
1:27d33a2: package org.apache.mahout.classifier.sequencelearning.hmm;
1:27d33a2: 
1:27d33a2: import org.apache.mahout.math.Matrix;
1:27d33a2: import org.apache.mahout.math.Vector;
1:27d33a2: import org.junit.Test;
1:27d33a2: 
1:27d33a2: public class HMMTrainerTest extends HMMTestBase {
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testViterbiTraining() {
1:27d33a2:     // initialize the expected model parameters (from R)
1:27d33a2:     // expected transition matrix
1:d53cf4a:     double[][] transitionE = {{0.3125, 0.0625, 0.3125, 0.3125},
1:27d33a2:         {0.25, 0.25, 0.25, 0.25}, {0.5, 0.071429, 0.357143, 0.071429},
1:27d33a2:         {0.5, 0.1, 0.1, 0.3}};
1:27d33a2:     // initialize the emission matrix
1:d53cf4a:     double[][] emissionE = {{0.882353, 0.058824, 0.058824},
1:27d33a2:         {0.333333, 0.333333, 0.3333333}, {0.076923, 0.846154, 0.076923},
1:27d33a2:         {0.111111, 0.111111, 0.777778}};
1:27d33a2: 
1:27d33a2:     // train the given network to the following output sequence
1:27d33a2:     int[] observed = {1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0};
1:27d33a2: 
1:d53cf4a:     HmmModel trained = HmmTrainer.trainViterbi(getModel(), observed, 0.5, 0.1, 10, false);
1:27d33a2: 
1:27d33a2:     // now check whether the model matches our expectations
1:27d33a2:     Matrix emissionMatrix = trained.getEmissionMatrix();
1:27d33a2:     Matrix transitionMatrix = trained.getTransitionMatrix();
1:27d33a2: 
1:27d33a2:     for (int i = 0; i < trained.getNrOfHiddenStates(); ++i) {
1:d53cf4a:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j) {
1:d53cf4a:         assertEquals(transitionMatrix.getQuick(i, j), transitionE[i][j], EPSILON);
1:d53cf4a:       }
1:27d33a2: 
1:d53cf4a:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j) {
1:d53cf4a:         assertEquals(emissionMatrix.getQuick(i, j), emissionE[i][j], EPSILON);
1:d53cf4a:       }
1:27d33a2:     }
1:27d33a2: 
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testScaledViterbiTraining() {
1:27d33a2:     // initialize the expected model parameters (from R)
1:27d33a2:     // expected transition matrix
1:d53cf4a:     double[][] transitionE = {{0.3125, 0.0625, 0.3125, 0.3125},
1:27d33a2:         {0.25, 0.25, 0.25, 0.25}, {0.5, 0.071429, 0.357143, 0.071429},
1:27d33a2:         {0.5, 0.1, 0.1, 0.3}};
1:27d33a2:     // initialize the emission matrix
1:d53cf4a:     double[][] emissionE = {{0.882353, 0.058824, 0.058824},
1:27d33a2:         {0.333333, 0.333333, 0.3333333}, {0.076923, 0.846154, 0.076923},
1:27d33a2:         {0.111111, 0.111111, 0.777778}};
1:27d33a2: 
1:27d33a2:     // train the given network to the following output sequence
1:27d33a2:     int[] observed = {1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0};
1:27d33a2: 
1:d53cf4a:     HmmModel trained = HmmTrainer.trainViterbi(getModel(), observed, 0.5, 0.1, 10,
1:27d33a2:         true);
1:27d33a2: 
1:27d33a2:     // now check whether the model matches our expectations
1:27d33a2:     Matrix emissionMatrix = trained.getEmissionMatrix();
1:27d33a2:     Matrix transitionMatrix = trained.getTransitionMatrix();
1:27d33a2: 
1:27d33a2:     for (int i = 0; i < trained.getNrOfHiddenStates(); ++i) {
1:d53cf4a:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j) {
1:d53cf4a:         assertEquals(transitionMatrix.getQuick(i, j), transitionE[i][j],
1:d53cf4a:             EPSILON);
1:d53cf4a:       }
1:27d33a2: 
1:d53cf4a:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j) {
1:d53cf4a:         assertEquals(emissionMatrix.getQuick(i, j), emissionE[i][j],
1:d53cf4a:             EPSILON);
1:d53cf4a:       }
1:27d33a2:     }
1:27d33a2: 
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testBaumWelchTraining() {
1:27d33a2:     // train the given network to the following output sequence
1:27d33a2:     int[] observed = {1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0};
1:27d33a2: 
1:27d33a2:     // expected values from Matlab HMM package / R HMM package
1:27d33a2:     double[] initialExpected = {0, 0, 1.0, 0};
1:27d33a2:     double[][] transitionExpected = {{0.2319, 0.0993, 0.0005, 0.6683},
1:27d33a2:         {0.0001, 0.3345, 0.6654, 0}, {0.5975, 0, 0.4025, 0},
1:27d33a2:         {0.0024, 0.6657, 0, 0.3319}};
1:27d33a2:     double[][] emissionExpected = {{0.9995, 0.0004, 0.0001},
1:27d33a2:         {0.9943, 0.0036, 0.0021}, {0.0059, 0.9941, 0}, {0, 0, 1}};
1:27d33a2: 
1:d53cf4a:     HmmModel trained = HmmTrainer.trainBaumWelch(getModel(), observed, 0.1, 10,
2:27d33a2:         false);
1:27d33a2: 
1:27d33a2:     Vector initialProbabilities = trained.getInitialProbabilities();
1:27d33a2:     Matrix emissionMatrix = trained.getEmissionMatrix();
1:27d33a2:     Matrix transitionMatrix = trained.getTransitionMatrix();
1:27d33a2: 
1:27d33a2:     for (int i = 0; i < trained.getNrOfHiddenStates(); ++i) {
1:d53cf4a:       assertEquals(initialProbabilities.get(i), initialExpected[i],
1:27d33a2:           0.0001);
1:d53cf4a:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j) {
1:d53cf4a:         assertEquals(transitionMatrix.getQuick(i, j),
1:27d33a2:             transitionExpected[i][j], 0.0001);
1:d53cf4a:       }
1:d53cf4a:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j) {
1:d53cf4a:         assertEquals(emissionMatrix.getQuick(i, j),
1:27d33a2:             emissionExpected[i][j], 0.0001);
1:d53cf4a:       }
1:27d33a2:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2:   @Test
1:27d33a2:   public void testScaledBaumWelchTraining() {
1:27d33a2:     // train the given network to the following output sequence
1:27d33a2:     int[] observed = {1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0};
1:27d33a2: 
1:27d33a2:     // expected values from Matlab HMM package / R HMM package
1:27d33a2:     double[] initialExpected = {0, 0, 1.0, 0};
1:27d33a2:     double[][] transitionExpected = {{0.2319, 0.0993, 0.0005, 0.6683},
1:27d33a2:         {0.0001, 0.3345, 0.6654, 0}, {0.5975, 0, 0.4025, 0},
1:27d33a2:         {0.0024, 0.6657, 0, 0.3319}};
1:27d33a2:     double[][] emissionExpected = {{0.9995, 0.0004, 0.0001},
1:27d33a2:         {0.9943, 0.0036, 0.0021}, {0.0059, 0.9941, 0}, {0, 0, 1}};
1:27d33a2: 
1:27d33a2:     HmmModel trained = HmmTrainer
1:d53cf4a:         .trainBaumWelch(getModel(), observed, 0.1, 10, true);
1:27d33a2: 
1:27d33a2:     Vector initialProbabilities = trained.getInitialProbabilities();
1:27d33a2:     Matrix emissionMatrix = trained.getEmissionMatrix();
1:27d33a2:     Matrix transitionMatrix = trained.getTransitionMatrix();
1:27d33a2: 
1:27d33a2:     for (int i = 0; i < trained.getNrOfHiddenStates(); ++i) {
1:d53cf4a:       assertEquals(initialProbabilities.get(i), initialExpected[i],
1:27d33a2:           0.0001);
1:d53cf4a:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j) {
1:d53cf4a:         assertEquals(transitionMatrix.getQuick(i, j),
1:27d33a2:             transitionExpected[i][j], 0.0001);
1:d53cf4a:       }
1:d53cf4a:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j) {
1:d53cf4a:         assertEquals(emissionMatrix.getQuick(i, j),
1:27d33a2:             emissionExpected[i][j], 0.0001);
1:d53cf4a:       }
1:27d33a2:     }
1:27d33a2:   }
1:27d33a2: 
1:27d33a2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d53cf4a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     double[][] transitionE = {{0.3125, 0.0625, 0.3125, 0.3125},
1:     double[][] emissionE = {{0.882353, 0.058824, 0.058824},
1:     HmmModel trained = HmmTrainer.trainViterbi(getModel(), observed, 0.5, 0.1, 10, false);
1:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j) {
1:         assertEquals(transitionMatrix.getQuick(i, j), transitionE[i][j], EPSILON);
1:       }
1:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j) {
1:         assertEquals(emissionMatrix.getQuick(i, j), emissionE[i][j], EPSILON);
1:       }
/////////////////////////////////////////////////////////////////////////
1:     double[][] transitionE = {{0.3125, 0.0625, 0.3125, 0.3125},
1:     double[][] emissionE = {{0.882353, 0.058824, 0.058824},
1:     HmmModel trained = HmmTrainer.trainViterbi(getModel(), observed, 0.5, 0.1, 10,
/////////////////////////////////////////////////////////////////////////
1:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j) {
1:         assertEquals(transitionMatrix.getQuick(i, j), transitionE[i][j],
1:             EPSILON);
1:       }
1:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j) {
1:         assertEquals(emissionMatrix.getQuick(i, j), emissionE[i][j],
1:             EPSILON);
1:       }
/////////////////////////////////////////////////////////////////////////
1:     HmmModel trained = HmmTrainer.trainBaumWelch(getModel(), observed, 0.1, 10,
/////////////////////////////////////////////////////////////////////////
1:       assertEquals(initialProbabilities.get(i), initialExpected[i],
1:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j) {
1:         assertEquals(transitionMatrix.getQuick(i, j),
1:       }
1:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j) {
1:         assertEquals(emissionMatrix.getQuick(i, j),
1:       }
/////////////////////////////////////////////////////////////////////////
1:         .trainBaumWelch(getModel(), observed, 0.1, 10, true);
1:       assertEquals(initialProbabilities.get(i), initialExpected[i],
1:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j) {
1:         assertEquals(transitionMatrix.getQuick(i, j),
1:       }
1:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j) {
1:         assertEquals(emissionMatrix.getQuick(i, j),
1:       }
author:Isabel Drost
-------------------------------------------------------------------------------
commit:27d33a2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sequencelearning.hmm;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.junit.Test;
1: 
1: public class HMMTrainerTest extends HMMTestBase {
1: 
1:   @Test
1:   public void testViterbiTraining() {
1:     // initialize the expected model parameters (from R)
1:     // expected transition matrix
0:     double transitionE[][] = {{0.3125, 0.0625, 0.3125, 0.3125},
1:         {0.25, 0.25, 0.25, 0.25}, {0.5, 0.071429, 0.357143, 0.071429},
1:         {0.5, 0.1, 0.1, 0.3}};
1:     // initialize the emission matrix
0:     double emissionE[][] = {{0.882353, 0.058824, 0.058824},
1:         {0.333333, 0.333333, 0.3333333}, {0.076923, 0.846154, 0.076923},
1:         {0.111111, 0.111111, 0.777778}};
1: 
1:     // train the given network to the following output sequence
1:     int[] observed = {1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0};
1: 
0:     HmmModel trained = HmmTrainer.trainViterbi(model, observed, 0.5, 0.1, 10,
1:         false);
1: 
1:     // now check whether the model matches our expectations
1:     Matrix emissionMatrix = trained.getEmissionMatrix();
1:     Matrix transitionMatrix = trained.getTransitionMatrix();
1: 
1:     for (int i = 0; i < trained.getNrOfHiddenStates(); ++i) {
0:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j)
0:         Assert.assertEquals(transitionMatrix.getQuick(i, j), transitionE[i][j],
0:             0.00001);
1: 
0:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j)
0:         Assert.assertEquals(emissionMatrix.getQuick(i, j), emissionE[i][j],
0:             0.00001);
1:     }
1: 
1:   }
1: 
1:   @Test
1:   public void testScaledViterbiTraining() {
1:     // initialize the expected model parameters (from R)
1:     // expected transition matrix
0:     double transitionE[][] = {{0.3125, 0.0625, 0.3125, 0.3125},
1:         {0.25, 0.25, 0.25, 0.25}, {0.5, 0.071429, 0.357143, 0.071429},
1:         {0.5, 0.1, 0.1, 0.3}};
1:     // initialize the emission matrix
0:     double emissionE[][] = {{0.882353, 0.058824, 0.058824},
1:         {0.333333, 0.333333, 0.3333333}, {0.076923, 0.846154, 0.076923},
1:         {0.111111, 0.111111, 0.777778}};
1: 
1:     // train the given network to the following output sequence
1:     int[] observed = {1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0};
1: 
0:     HmmModel trained = HmmTrainer.trainViterbi(model, observed, 0.5, 0.1, 10,
1:         true);
1: 
1:     // now check whether the model matches our expectations
1:     Matrix emissionMatrix = trained.getEmissionMatrix();
1:     Matrix transitionMatrix = trained.getTransitionMatrix();
1: 
1:     for (int i = 0; i < trained.getNrOfHiddenStates(); ++i) {
0:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j)
0:         Assert.assertEquals(transitionMatrix.getQuick(i, j), transitionE[i][j],
0:             0.00001);
1: 
0:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j)
0:         Assert.assertEquals(emissionMatrix.getQuick(i, j), emissionE[i][j],
0:             0.00001);
1:     }
1: 
1:   }
1: 
1:   @Test
1:   public void testBaumWelchTraining() {
1:     // train the given network to the following output sequence
1:     int[] observed = {1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0};
1: 
1:     // expected values from Matlab HMM package / R HMM package
1:     double[] initialExpected = {0, 0, 1.0, 0};
1:     double[][] transitionExpected = {{0.2319, 0.0993, 0.0005, 0.6683},
1:         {0.0001, 0.3345, 0.6654, 0}, {0.5975, 0, 0.4025, 0},
1:         {0.0024, 0.6657, 0, 0.3319}};
1:     double[][] emissionExpected = {{0.9995, 0.0004, 0.0001},
1:         {0.9943, 0.0036, 0.0021}, {0.0059, 0.9941, 0}, {0, 0, 1}};
1: 
0:     HmmModel trained = HmmTrainer.trainBaumWelch(model, observed, 0.1, 10,
1:         false);
1: 
1:     Vector initialProbabilities = trained.getInitialProbabilities();
1:     Matrix emissionMatrix = trained.getEmissionMatrix();
1:     Matrix transitionMatrix = trained.getTransitionMatrix();
1: 
1:     for (int i = 0; i < trained.getNrOfHiddenStates(); ++i) {
0:       Assert.assertEquals(initialProbabilities.get(i), initialExpected[i],
1:           0.0001);
0:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j)
0:         Assert.assertEquals(transitionMatrix.getQuick(i, j),
1:             transitionExpected[i][j], 0.0001);
0:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j)
0:         Assert.assertEquals(emissionMatrix.getQuick(i, j),
1:             emissionExpected[i][j], 0.0001);
1:     }
1:   }
1: 
1:   @Test
1:   public void testScaledBaumWelchTraining() {
1:     // train the given network to the following output sequence
1:     int[] observed = {1, 0, 2, 2, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0};
1: 
1:     // expected values from Matlab HMM package / R HMM package
1:     double[] initialExpected = {0, 0, 1.0, 0};
1:     double[][] transitionExpected = {{0.2319, 0.0993, 0.0005, 0.6683},
1:         {0.0001, 0.3345, 0.6654, 0}, {0.5975, 0, 0.4025, 0},
1:         {0.0024, 0.6657, 0, 0.3319}};
1:     double[][] emissionExpected = {{0.9995, 0.0004, 0.0001},
1:         {0.9943, 0.0036, 0.0021}, {0.0059, 0.9941, 0}, {0, 0, 1}};
1: 
1:     HmmModel trained = HmmTrainer
0:         .trainBaumWelch(model, observed, 0.1, 10, true);
1: 
1:     Vector initialProbabilities = trained.getInitialProbabilities();
1:     Matrix emissionMatrix = trained.getEmissionMatrix();
1:     Matrix transitionMatrix = trained.getTransitionMatrix();
1: 
1:     for (int i = 0; i < trained.getNrOfHiddenStates(); ++i) {
0:       Assert.assertEquals(initialProbabilities.get(i), initialExpected[i],
1:           0.0001);
0:       for (int j = 0; j < trained.getNrOfHiddenStates(); ++j)
0:         Assert.assertEquals(transitionMatrix.getQuick(i, j),
1:             transitionExpected[i][j], 0.0001);
0:       for (int j = 0; j < trained.getNrOfOutputStates(); ++j)
0:         Assert.assertEquals(emissionMatrix.getQuick(i, j),
1:             emissionExpected[i][j], 0.0001);
1:     }
1:   }
1: 
1: }
============================================================================