1:76d3f74: /**
1:76d3f74:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:76d3f74:  * contributor license agreements.  See the NOTICE file distributed with
1:76d3f74:  * this work for additional information regarding copyright ownership.
1:76d3f74:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:76d3f74:  * (the "License"); you may not use this file except in compliance with
1:76d3f74:  * the License.  You may obtain a copy of the License at
1:76d3f74:  *
1:76d3f74:  *     http://www.apache.org/licenses/LICENSE-2.0
1:76d3f74:  *
1:76d3f74:  * Unless required by applicable law or agreed to in writing, software
1:76d3f74:  * distributed under the License is distributed on an "AS IS" BASIS,
1:76d3f74:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:76d3f74:  * See the License for the specific language governing permissions and
1:76d3f74:  * limitations under the License.
1:76d3f74:  */
1:76d3f74: 
1:76d3f74: package org.apache.mahout.cf.taste.hadoop.item;
1:76d3f74: 
1:76d3f74: import java.util.Map;
1:76d3f74: 
1:76d3f74: import com.google.common.collect.Maps;
1:76d3f74: import org.apache.hadoop.conf.Configuration;
1:76d3f74: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:76d3f74: import org.junit.Test;
1:76d3f74: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:76d3f74: 
1:76d3f74: public class IDReaderTest extends TasteTestCase {
1:76d3f74: 
1:76d3f74:   static final String USER_ITEM_FILTER_FIELD = "userItemFilter";
1:76d3f74: 
1:76d3f74:   @Test
1:76d3f74:   public void testUserItemFilter() throws Exception {
1:76d3f74:     Configuration conf = getConfiguration();
1:76d3f74:     IDReader idReader = new IDReader(conf);
1:76d3f74:     Map<Long, FastIDSet> userItemFilter = Maps.newHashMap();
1:76d3f74: 
1:76d3f74:     long user1 = 1;
1:76d3f74:     long user2 = 2;
1:76d3f74: 
1:76d3f74:     idReader.addUserAndItemIdToUserItemFilter(userItemFilter, user1, 100L);
1:76d3f74:     idReader.addUserAndItemIdToUserItemFilter(userItemFilter, user1, 200L);
1:76d3f74:     idReader.addUserAndItemIdToUserItemFilter(userItemFilter, user2, 300L);
1:76d3f74: 
1:76d3f74:     FastIDSet userIds = IDReader.extractAllUserIdsFromUserItemFilter(userItemFilter);
1:76d3f74: 
1:76d3f74:     assertEquals(2, userIds.size());
1:76d3f74:     assertTrue(userIds.contains(user1));
1:76d3f74:     assertTrue(userIds.contains(user1));
1:76d3f74: 
1:76d3f74:     setField(idReader, USER_ITEM_FILTER_FIELD, userItemFilter);
1:76d3f74: 
1:76d3f74:     FastIDSet itemsForUser1 = idReader.getItemsToRecommendForUser(user1);
1:76d3f74:     assertEquals(2, itemsForUser1.size());
1:76d3f74:     assertTrue(itemsForUser1.contains(100L));
1:76d3f74:     assertTrue(itemsForUser1.contains(200L));
1:76d3f74: 
1:76d3f74:     FastIDSet itemsForUser2 = idReader.getItemsToRecommendForUser(user2);
1:76d3f74:     assertEquals(1, itemsForUser2.size());
1:76d3f74:     assertTrue(itemsForUser2.contains(300L));
1:76d3f74: 
1:76d3f74:     FastIDSet itemsForNonExistingUser = idReader.getItemsToRecommendForUser(3L);
1:76d3f74:     assertTrue(itemsForNonExistingUser.isEmpty());
1:76d3f74:   }
1:76d3f74: 
1:76d3f74: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:76d3f74
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.item;
1: 
1: import java.util.Map;
1: 
1: import com.google.common.collect.Maps;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.junit.Test;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: 
1: public class IDReaderTest extends TasteTestCase {
1: 
1:   static final String USER_ITEM_FILTER_FIELD = "userItemFilter";
1: 
1:   @Test
1:   public void testUserItemFilter() throws Exception {
1:     Configuration conf = getConfiguration();
1:     IDReader idReader = new IDReader(conf);
1:     Map<Long, FastIDSet> userItemFilter = Maps.newHashMap();
1: 
1:     long user1 = 1;
1:     long user2 = 2;
1: 
1:     idReader.addUserAndItemIdToUserItemFilter(userItemFilter, user1, 100L);
1:     idReader.addUserAndItemIdToUserItemFilter(userItemFilter, user1, 200L);
1:     idReader.addUserAndItemIdToUserItemFilter(userItemFilter, user2, 300L);
1: 
1:     FastIDSet userIds = IDReader.extractAllUserIdsFromUserItemFilter(userItemFilter);
1: 
1:     assertEquals(2, userIds.size());
1:     assertTrue(userIds.contains(user1));
1:     assertTrue(userIds.contains(user1));
1: 
1:     setField(idReader, USER_ITEM_FILTER_FIELD, userItemFilter);
1: 
1:     FastIDSet itemsForUser1 = idReader.getItemsToRecommendForUser(user1);
1:     assertEquals(2, itemsForUser1.size());
1:     assertTrue(itemsForUser1.contains(100L));
1:     assertTrue(itemsForUser1.contains(200L));
1: 
1:     FastIDSet itemsForUser2 = idReader.getItemsToRecommendForUser(user2);
1:     assertEquals(1, itemsForUser2.size());
1:     assertTrue(itemsForUser2.contains(300L));
1: 
1:     FastIDSet itemsForNonExistingUser = idReader.getItemsToRecommendForUser(3L);
1:     assertTrue(itemsForNonExistingUser.isEmpty());
1:   }
1: 
1: }
============================================================================