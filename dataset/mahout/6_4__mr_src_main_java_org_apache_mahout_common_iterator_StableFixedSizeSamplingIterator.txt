1:5a58194: /**
1:5a58194:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a58194:  * contributor license agreements.  See the NOTICE file distributed with
1:5a58194:  * this work for additional information regarding copyright ownership.
1:5a58194:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a58194:  * (the "License"); you may not use this file except in compliance with
1:5a58194:  * the License.  You may obtain a copy of the License at
1:5a58194:  *
1:5a58194:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a58194:  *
1:5a58194:  * Unless required by applicable law or agreed to in writing, software
1:5a58194:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a58194:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a58194:  * See the License for the specific language governing permissions and
1:5a58194:  * limitations under the License.
1:5a58194:  */
15:5a58194: 
1:5a58194: package org.apache.mahout.common.iterator;
1:5a58194: 
1:5a58194: import java.util.Collections;
1:5a58194: import java.util.Iterator;
1:5a58194: import java.util.List;
1:5a58194: import java.util.Random;
1:5a58194: 
1:80366ee: import com.google.common.base.Function;
1:80366ee: import com.google.common.collect.ForwardingIterator;
1:80366ee: import com.google.common.collect.Iterators;
1:74f849b: import com.google.common.collect.Lists;
1:a13b4b7: import org.apache.mahout.common.Pair;
1:5a58194: import org.apache.mahout.common.RandomUtils;
1:5a58194: 
1:5a58194: /**
1:b82d989:  * Sample a fixed number of elements from an Iterator. The results will appear in the original order at some
1:5a58194:  * cost in time and memory relative to a FixedSizeSampler.
1:5a58194:  */
1:80366ee: public class StableFixedSizeSamplingIterator<T> extends ForwardingIterator<T> {
1:80366ee: 
1:80366ee:   private final Iterator<T> delegate;
1:5a58194:   
1:5a58194:   public StableFixedSizeSamplingIterator(int size, Iterator<T> source) {
1:74f849b:     List<Pair<Integer,T>> buf = Lists.newArrayListWithCapacity(size);
1:5a58194:     int sofar = 0;
1:80366ee:     Random random = RandomUtils.getRandom();
1:5a58194:     while (source.hasNext()) {
1:5a58194:       T v = source.next();
1:5a58194:       sofar++;
1:5a58194:       if (buf.size() < size) {
1:87c15be:         buf.add(new Pair<>(sofar, v));
2:5a58194:       } else {
1:80366ee:         int position = random.nextInt(sofar);
1:5a58194:         if (position < buf.size()) {
1:87c15be:           buf.set(position, new Pair<>(sofar, v));
16:5a58194:         }
1:80366ee:       }
1:a13b4b7:     }
1:80366ee: 
1:f3a9cc1:     Collections.sort(buf);
1:80366ee:     delegate = Iterators.transform(buf.iterator(),
1:6d16230:       new Function<Pair<Integer,T>,T>() {
1:6d16230:         @Override
1:6d16230:         public T apply(Pair<Integer,T> from) {
1:6d16230:           return from.getSecond();
1:6d16230:         }
1:6d16230:       });
1:f3a9cc1:   }
1:80366ee: 
1:f3a9cc1:   @Override
1:80366ee:   protected Iterator<T> delegate() {
1:80366ee:     return delegate;
1:80366ee:   }
1:a13b4b7: 
1:5a58194: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:         buf.add(new Pair<>(sofar, v));
1:           buf.set(position, new Pair<>(sofar, v));
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:       new Function<Pair<Integer,T>,T>() {
1:         @Override
1:         public T apply(Pair<Integer,T> from) {
1:           return from.getSecond();
1:         }
1:       });
commit:74f849b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:     List<Pair<Integer,T>> buf = Lists.newArrayListWithCapacity(size);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Collections.sort(buf);
0:                                    new Function<Pair<Integer,T>,T>() {
1:                                      @Override
0:                                      public T apply(Pair<Integer,T> from) {
0:                                        return from.getSecond();
1:                                      }
0:                                    });
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
1: import com.google.common.collect.ForwardingIterator;
1: import com.google.common.collect.Iterators;
/////////////////////////////////////////////////////////////////////////
1: public class StableFixedSizeSamplingIterator<T> extends ForwardingIterator<T> {
1: 
1:   private final Iterator<T> delegate;
1:     Random random = RandomUtils.getRandom();
1:         int position = random.nextInt(sofar);
1: 
1:     delegate = Iterators.transform(buf.iterator(),
0:                                new Function<Pair<Integer,T>,T>() {
0:                                  @Override
0:                                  public T apply(Pair<Integer,T> from) {
0:                                    return from.getSecond();
1:                                  }
0:                                });
1:   }
1: 
0:   @Override
1:   protected Iterator<T> delegate() {
1:     return delegate;
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Comparator;
1: import org.apache.mahout.common.Pair;
/////////////////////////////////////////////////////////////////////////
0:     List<Pair<Integer,T>> buf = new ArrayList<Pair<Integer,T>>(size);
0:         buf.add(new Pair<Integer,T>(sofar, v));
0:           buf.set(position, new Pair<Integer,T>(sofar, v));
0:     Collections.sort(buf, new Comparator<Pair<Integer,T>>() {
0:       @Override
0:       public int compare(Pair<Integer,T> pair1, Pair<Integer,T> pair2) {
0:         return pair1.getFirst().compareTo(pair2.getFirst());
0:     });
0:     return new TransformingIterator<Pair<Integer,T>,T>(buf.iterator()) {
0:       @Override
0:       protected T transform(Pair<Integer,T> in) {
0:         return in.getSecond();
1:       }
0:     };
1: 
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
0:     return new DelegateIterator<T>(buf);
commit:d9b6358
commit:4ef4dc7
commit:210fac3
commit:5a58194
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: 
0: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Random;
1: 
1: /**
0:  * Sample a fixed number of elements from an Iterator.  The results will appear in the original order at some
1:  * cost in time and memory relative to a FixedSizeSampler.
1:  */
0: public class StableFixedSizeSamplingIterator<T> extends DelegatingIterator<T> {
1: 
1:   public StableFixedSizeSamplingIterator(int size, Iterator<T> source) {
0:     super(buildDelegate(size, source));
1:   }
1: 
0:   private static <T> Iterator<T> buildDelegate(int size, Iterator<T> source) {
0:     List<Entry<T>> buf = new ArrayList<Entry<T>>(size);
1:     int sofar = 0;
1:     while (source.hasNext()) {
1:       T v = source.next();
1:       sofar++;
1:       if (buf.size() < size) {
0:         buf.add(new Entry<T>(sofar, v));
1:       } else {
0:         Random generator = RandomUtils.getRandom();
0:         int position = generator.nextInt(sofar);
1:         if (position < buf.size()) {
0:           buf.get(position).value = v;
1:         }
1:       }
1:     }
1: 
0:     Collections.sort(buf);
0:     return new DelegateIterator(buf);
1:   }
1: 
0:   private static class Entry<T> implements Comparable<Entry<T>> {
1:     
0:     private final int originalIndex;
0:     private T value;
1: 
0:     private Entry(int originalIndex, T value) {
0:       this.originalIndex = originalIndex;
0:       this.value = value;
1:     }
1: 
0:     @Override
0:     public boolean equals(Object other) {
0:       return other instanceof Entry && originalIndex == ((Entry<T>) other).originalIndex;
1:     }
1: 
0:     public int hashCode() {
0:       return originalIndex;
1:     }
1: 
0:     @Override
0:     public int compareTo(Entry<T> other) {
0:       if (originalIndex < other.originalIndex) {
0:         return -1;
0:       } else if (originalIndex > other.originalIndex) {
0:         return 1;
1:       } else {
0:         return 0;
1:       }
1:     }
1:   }
1: 
0:   private static class DelegateIterator<T> implements Iterator<T> {
1: 
0:     private final Iterator<Entry<T>> iterator;
1: 
0:     private DelegateIterator(List<Entry<T>> buf) {
0:       iterator = buf.iterator();
1:     }
1: 
0:     @Override
0:     public boolean hasNext() {
0:       return iterator.hasNext();
1:     }
1: 
0:     @Override
0:     public T next() {
0:       return iterator.next().value;
1:     }
1: 
0:     @Override
0:     public void remove() {
0:       throw new UnsupportedOperationException("Can't change sampler contents");
1:     }
1:   }
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:b82d989
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.RandomUtils;
0: 
1:  * Sample a fixed number of elements from an Iterator. The results will appear in the original order at some
0:   
0:     super(StableFixedSizeSamplingIterator.buildDelegate(size, source));
0:   
/////////////////////////////////////////////////////////////////////////
0:     
0:   
0:     
0:     
0:       return other instanceof Entry<?> && originalIndex == ((Entry<T>) other).originalIndex;
0:     
0:     @Override
0:     
/////////////////////////////////////////////////////////////////////////
0:   
0:     
0:     
0:     
0:     
0:     
============================================================================