1:1cdd095: /*
1:1cdd095:  *  This code is public domain.
1:1cdd095:  *
1:1cdd095:  *  The MurmurHash3 algorithm was created by Austin Appleby and put into the public domain.
1:1cdd095:  *  See http://code.google.com/p/smhasher/
1:1cdd095:  *
1:1cdd095:  *  This java port was authored by
1:1cdd095:  *  Yonik Seeley and was placed into the public domain per
1:1cdd095:  *  https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java.
1:b2e119a:  */
1:b2e119a: 
1:4fbfbc6: package org.apache.mahout.math;
1:b2e119a: 
1:4fbfbc6: import org.junit.Test;
1:b2e119a: 
1:4fbfbc6: public final class MurmurHash3Test extends MahoutTestCase {
1:b2e119a: 
1:4fbfbc6:   private static final int[] ANSWERS =
1:4fbfbc6:       {0x0,0xcf9ce026,0x7b1ebceb,0x8a59e474,0xcf337f94,0x8b678f66,0x813ff5a2,0x1c2f4b2b,0xa6fcba77,0xe658f908,
1:4fbfbc6:           0x9f2656af,0x826b85ca,0xebb6ceca,0x24c4112c,0x66eff5b0,0xa9aca7d5,0xf7f04d03,0x9d781105,0x6dcde4f3,
1:4fbfbc6:           0x69edd8a8,0x5cdcd417,0x18d67f6,0xea040c90,0xdf70ea4a,0x8fb349e6,0x79a89b03,0x7ef9fc34,0x6017f692,
1:4fbfbc6:           0x5be02058,0x9e3986f9,0x8fa6dd28,0x6733b993,0x26230d32,0x92051d69,0x8d6f37f7,0xa1653103,0x8491c23f,
1:4fbfbc6:           0x2e8f59ce,0x5ae9461e,0xfe286e6,0x844e6959,0x87e9065d,0xe302e21c,0x1b3b3296,0xd29849c9,0x4e625f26,
1:4fbfbc6:           0xa8c35ac0,0x71335a06,0xfd256d8f,0x4e5eb258,0x4e2320d1,0xba2e9832,0xb00df8eb,0xbd87594d,0x83b6dce3,
1:4fbfbc6:           0xcf8646d0,0x7e79f2e2,0xd41fcd97,0x556a93,0x4419437b,0x39aa0e4e,0x43a57251,0x9430922f,0xd784b08f,
1:4fbfbc6:           0xa2772512,0xa2a6ee4b,0x9cb1abae,0xebd2bef0};
1:b2e119a: 
1:4fbfbc6:   @Test
1:b2e119a:   public void testCorrectValues() throws Exception {
1:b2e119a:     byte[] bytes = "Now is the time for all good men to come to the aid of their country".getBytes("UTF-8");
1:4fbfbc6:     int hash = 0;
1:4fbfbc6:     for (int i = 0; i < bytes.length; i++) {
1:4fbfbc6:       hash = hash * 31 + (bytes[i] & 0xff);
1:4fbfbc6:       bytes[i] = (byte) hash;
1:b2e119a:     }
1:b2e119a: 
1:b2e119a:     // test different offsets.
1:4fbfbc6:     for (int offset = 0; offset < 10; offset++) {
1:b2e119a:       byte[] arr = new byte[bytes.length + offset];
1:b2e119a:       System.arraycopy(bytes, 0, arr, offset, bytes.length);
1:4fbfbc6:       for (int len = 0; len < bytes.length; len++) {
1:6d16230:         int h = MurmurHash3.murmurhash3x8632(arr, offset, len, len);
1:4fbfbc6:         assertEquals(ANSWERS[len], h);
1:b2e119a:       }
1:b2e119a:     }
1:b2e119a:   }
1:b2e119a: 
1:b2e119a: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  This code is public domain.
1:  *
1:  *  The MurmurHash3 algorithm was created by Austin Appleby and put into the public domain.
1:  *  See http://code.google.com/p/smhasher/
1:  *
1:  *  This java port was authored by
1:  *  Yonik Seeley and was placed into the public domain per
1:  *  https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java.
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: import org.junit.Test;
1: public final class MurmurHash3Test extends MahoutTestCase {
1:   private static final int[] ANSWERS =
1:       {0x0,0xcf9ce026,0x7b1ebceb,0x8a59e474,0xcf337f94,0x8b678f66,0x813ff5a2,0x1c2f4b2b,0xa6fcba77,0xe658f908,
1:           0x9f2656af,0x826b85ca,0xebb6ceca,0x24c4112c,0x66eff5b0,0xa9aca7d5,0xf7f04d03,0x9d781105,0x6dcde4f3,
1:           0x69edd8a8,0x5cdcd417,0x18d67f6,0xea040c90,0xdf70ea4a,0x8fb349e6,0x79a89b03,0x7ef9fc34,0x6017f692,
1:           0x5be02058,0x9e3986f9,0x8fa6dd28,0x6733b993,0x26230d32,0x92051d69,0x8d6f37f7,0xa1653103,0x8491c23f,
1:           0x2e8f59ce,0x5ae9461e,0xfe286e6,0x844e6959,0x87e9065d,0xe302e21c,0x1b3b3296,0xd29849c9,0x4e625f26,
1:           0xa8c35ac0,0x71335a06,0xfd256d8f,0x4e5eb258,0x4e2320d1,0xba2e9832,0xb00df8eb,0xbd87594d,0x83b6dce3,
1:           0xcf8646d0,0x7e79f2e2,0xd41fcd97,0x556a93,0x4419437b,0x39aa0e4e,0x43a57251,0x9430922f,0xd784b08f,
1:           0xa2772512,0xa2a6ee4b,0x9cb1abae,0xebd2bef0};
1:   @Test
1:     int hash = 0;
1:     for (int i = 0; i < bytes.length; i++) {
1:       hash = hash * 31 + (bytes[i] & 0xff);
1:       bytes[i] = (byte) hash;
1:     for (int offset = 0; offset < 10; offset++) {
1:       for (int len = 0; len < bytes.length; len++) {
1:         assertEquals(ANSWERS[len], h);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:         int h = MurmurHash3.murmurhash3x8632(arr, offset, len, len);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:b2e119a
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math;
0: /**
0:  * Public domain, just like the MurmurHash3 code.
1:  */
1: 
0: import junit.framework.TestCase;
1: 
1: 
1: 
0: public class MurmurHash3Test extends TestCase {
1: 
1:   public void testCorrectValues() throws Exception {
1:     byte[] bytes = "Now is the time for all good men to come to the aid of their country".getBytes("UTF-8");
0:     int hash=0;
0:     for (int i=0; i<bytes.length; i++) {
0:       hash = hash*31+(bytes[i]&0xff);
0:       bytes[i] = (byte)hash;
1:     }
1: 
1:     // test different offsets.
0:     for (int offset = 0; offset<10; offset++) {
1:       byte[] arr = new byte[bytes.length + offset];
1:       System.arraycopy(bytes, 0, arr, offset, bytes.length);
0:       for (int len=0; len<bytes.length; len++) {
0:         int h = MurmurHash3.murmurhash3_x86_32(arr, offset, len, len);
0:         assertEquals(answers[len], h);
1:       }
1:     }
1:   }
1: 
0:   static int[] answers = new int[] {0x0,0xcf9ce026,0x7b1ebceb,0x8a59e474,0xcf337f94,0x8b678f66,0x813ff5a2,0x1c2f4b2b,0xa6fcba77,0xe658f908,0x9f2656af,0x826b85ca,0xebb6ceca,0x24c4112c,0x66eff5b0,0xa9aca7d5,0xf7f04d03,0x9d781105,0x6dcde4f3,0x69edd8a8,0x5cdcd417,0x18d67f6,0xea040c90,0xdf70ea4a,0x8fb349e6,0x79a89b03,0x7ef9fc34,0x6017f692,0x5be02058,0x9e3986f9,0x8fa6dd28,0x6733b993,0x26230d32,0x92051d69,0x8d6f37f7,0xa1653103,0x8491c23f,0x2e8f59ce,0x5ae9461e,0xfe286e6,0x844e6959,0x87e9065d,0xe302e21c,0x1b3b3296,0xd29849c9,0x4e625f26,0xa8c35ac0,0x71335a06,0xfd256d8f,0x4e5eb258,0x4e2320d1,0xba2e9832,0xb00df8eb,0xbd87594d,0x83b6dce3,0xcf8646d0,0x7e79f2e2,0xd41fcd97,0x556a93,0x4419437b,0x39aa0e4e,0x43a57251,0x9430922f,0xd784b08f,0xa2772512,0xa2a6ee4b,0x9cb1abae,0xebd2bef0};
1: }
============================================================================