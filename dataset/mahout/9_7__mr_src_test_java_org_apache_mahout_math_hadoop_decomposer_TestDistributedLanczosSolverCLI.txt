1:6510938: /**
1:6510938:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6510938:  * contributor license agreements.  See the NOTICE file distributed with
1:6510938:  * this work for additional information regarding copyright ownership.
1:6510938:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6510938:  * (the "License"); you may not use this file except in compliance with
1:6510938:  * the License.  You may obtain a copy of the License at
1:6510938:  *
1:6510938:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6510938:  *
1:6510938:  * Unless required by applicable law or agreed to in writing, software
1:6510938:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6510938:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6510938:  * See the License for the specific language governing permissions and
1:6510938:  * limitations under the License.
1:6510938:  */
1:a13b4b7: 
1:6510938: package org.apache.mahout.math.hadoop.decomposer;
3:6510938: 
1:74f849b: import com.google.common.collect.Lists;
1:6510938: import org.apache.hadoop.conf.Configuration;
1:6510938: import org.apache.hadoop.fs.Path;
1:e3ec9d8: import org.apache.hadoop.util.ToolRunner;
1:6510938: import org.apache.mahout.common.MahoutTestCase;
1:a13b4b7: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterable;
1:6510938: import org.apache.mahout.math.DenseMatrix;
1:6510938: import org.apache.mahout.math.Matrix;
1:522ee0b: import org.apache.mahout.math.NamedVector;
1:6510938: import org.apache.mahout.math.Vector;
1:6510938: import org.apache.mahout.math.VectorWritable;
1:6510938: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1:6510938: import org.apache.mahout.math.hadoop.TestDistributedRowMatrix;
1:6510938: import org.junit.Test;
1:522ee0b: import org.slf4j.Logger;
1:522ee0b: import org.slf4j.LoggerFactory;
1:522ee0b: 
1:a6bdcbb: import java.util.Collection;
1:f360973: import java.util.Arrays;
1:6510938: 
1:17f6362: @Deprecated
1:6510938: public final class TestDistributedLanczosSolverCLI extends MahoutTestCase {
1:522ee0b:   private static final Logger log = LoggerFactory.getLogger(TestDistributedLanczosSolverCLI.class);
1:6510938: 
1:6510938:   @Test
1:6510938:   public void testDistributedLanczosSolverCLI() throws Exception {
1:6510938:     Path testData = getTestTempDirPath("testdata");
1:c69893b:     DistributedRowMatrix corpus =
1:6634dc9:         new TestDistributedRowMatrix().randomDenseHierarchicalDistributedMatrix(10, 9, false,
1:522ee0b:             testData.toString());
1:e3ec9d8:     corpus.setConf(getConfiguration());
1:6510938:     Path output = getTestTempDirPath("output");
1:6510938:     Path tmp = getTestTempDirPath("tmp");
1:522ee0b:     Path workingDir = getTestTempDirPath("working");
1:c69893b:     String[] args = {
1:c69893b:         "-i", new Path(testData, "distMatrix").toString(),
1:c69893b:         "-o", output.toString(),
1:522ee0b:         "--tempDir", tmp.toString(),
1:6634dc9:         "--numRows", "10",
1:6634dc9:         "--numCols", "9",
1:6634dc9:         "--rank", "6",
1:522ee0b:         "--symmetric", "false",
1:522ee0b:         "--workingDir", workingDir.toString()
1:c69893b:     };
1:e3ec9d8:     ToolRunner.run(getConfiguration(), new DistributedLanczosSolver().new DistributedLanczosSolverJob(), args);
1:522ee0b: 
1:522ee0b:     output = getTestTempDirPath("output2");
1:522ee0b:     tmp = getTestTempDirPath("tmp2");
1:522ee0b:     args = new String[] {
1:522ee0b:         "-i", new Path(testData, "distMatrix").toString(),
1:522ee0b:         "-o", output.toString(),
1:522ee0b:         "--tempDir", tmp.toString(),
1:6634dc9:         "--numRows", "10",
1:6634dc9:         "--numCols", "9",
1:6634dc9:         "--rank", "7",
1:522ee0b:         "--symmetric", "false",
1:522ee0b:         "--workingDir", workingDir.toString()
1:522ee0b:     };
1:e3ec9d8:     ToolRunner.run(getConfiguration(), new DistributedLanczosSolver().new DistributedLanczosSolverJob(), args);
1:6510938: 
1:6510938:     Path rawEigenvectors = new Path(output, DistributedLanczosSolver.RAW_EIGENVECTORS);
1:6634dc9:     Matrix eigenVectors = new DenseMatrix(7, corpus.numCols());
1:e3ec9d8:     Configuration conf = getConfiguration();
1:6510938: 
1:a13b4b7:     int i = 0;
1:a13b4b7:     for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(rawEigenvectors, conf)) {
1:a13b4b7:       Vector v = value.get();
1:a13b4b7:       eigenVectors.assignRow(i, v);
1:a13b4b7:       i++;
4:6510938:     }
1:6634dc9:     assertEquals("number of eigenvectors", 7, i);
1:6510938:   }
1:6510938: 
1:6510938:   @Test
1:6510938:   public void testDistributedLanczosSolverEVJCLI() throws Exception {
1:6510938:     Path testData = getTestTempDirPath("testdata");
1:522ee0b:     DistributedRowMatrix corpus = new TestDistributedRowMatrix()
1:6634dc9:         .randomDenseHierarchicalDistributedMatrix(10, 9, false, testData.toString());
1:e3ec9d8:     corpus.setConf(getConfiguration());
1:6510938:     Path output = getTestTempDirPath("output");
1:6510938:     Path tmp = getTestTempDirPath("tmp");
1:c69893b:     String[] args = {
1:c69893b:         "-i", new Path(testData, "distMatrix").toString(),
1:c69893b:         "-o", output.toString(),
1:c69893b:         "--tempDir", tmp.toString(),
1:6634dc9:         "--numRows", "10",
1:6634dc9:         "--numCols", "9",
1:6634dc9:         "--rank", "6",
1:522ee0b:         "--symmetric", "false",
1:c69893b:         "--cleansvd", "true"
1:c69893b:     };
1:e3ec9d8:     ToolRunner.run(getConfiguration(), new DistributedLanczosSolver().new DistributedLanczosSolverJob(), args);
1:6510938:   
1:6510938:     Path cleanEigenvectors = new Path(output, EigenVerificationJob.CLEAN_EIGENVECTORS);
1:6634dc9:     Matrix eigenVectors = new DenseMatrix(6, corpus.numCols());
1:74f849b:     Collection<Double> eigenvalues = Lists.newArrayList();
1:522ee0b: 
1:522ee0b:     output = getTestTempDirPath("output2");
1:522ee0b:     tmp = getTestTempDirPath("tmp2");
1:522ee0b:     args = new String[] {
1:522ee0b:         "-i", new Path(testData, "distMatrix").toString(),
1:522ee0b:         "-o", output.toString(),
1:522ee0b:         "--tempDir", tmp.toString(),
1:6634dc9:         "--numRows", "10",
1:6634dc9:         "--numCols", "9",
1:6634dc9:         "--rank", "7",
1:522ee0b:         "--symmetric", "false",
1:522ee0b:         "--cleansvd", "true"
1:522ee0b:     };
1:e3ec9d8:     ToolRunner.run(getConfiguration(), new DistributedLanczosSolver().new DistributedLanczosSolverJob(), args);
1:522ee0b:     Path cleanEigenvectors2 = new Path(output, EigenVerificationJob.CLEAN_EIGENVECTORS);
1:6634dc9:     Matrix eigenVectors2 = new DenseMatrix(7, corpus.numCols());
1:e3ec9d8:     Configuration conf = getConfiguration();
1:74f849b:     Collection<Double> newEigenValues = Lists.newArrayList();
1:6510938: 
1:a13b4b7:     int i = 0;
1:a13b4b7:     for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(cleanEigenvectors, conf)) {
1:522ee0b:       NamedVector v = (NamedVector) value.get();
1:a13b4b7:       eigenVectors.assignRow(i, v);
1:522ee0b:       log.info(v.getName());
1:e64dd36:       if (EigenVector.getCosAngleError(v.getName()) < 1.0e-3) {
1:522ee0b:         eigenvalues.add(EigenVector.getEigenValue(v.getName()));
1:522ee0b:       }
1:a13b4b7:       i++;
1:6510938:     }
1:6634dc9:     assertEquals("number of clean eigenvectors", 3, i);
1:522ee0b: 
1:522ee0b:     i = 0;
1:522ee0b:     for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(cleanEigenvectors2, conf)) {
1:522ee0b:       NamedVector v = (NamedVector) value.get();
1:522ee0b:       log.info(v.getName());
1:522ee0b:       eigenVectors2.assignRow(i, v);
1:522ee0b:       newEigenValues.add(EigenVector.getEigenValue(v.getName()));
1:522ee0b:       i++;
1:522ee0b:     }
1:522ee0b: 
1:74f849b:     Collection<Integer> oldEigensFound = Lists.newArrayList();
1:e64dd36:     for (int row = 0; row < eigenVectors.numRows(); row++) {
1:528ffcd:       Vector oldEigen = eigenVectors.viewRow(row);
1:e64dd36:       if (oldEigen == null) {
2:522ee0b:         break;
1:522ee0b:       }
1:e64dd36:       for (int newRow = 0; newRow < eigenVectors2.numRows(); newRow++) {
1:528ffcd:         Vector newEigen = eigenVectors2.viewRow(newRow);
1:229aeff:         if (newEigen != null && oldEigen.dot(newEigen) > 0.9) {
1:229aeff:           oldEigensFound.add(row);
1:229aeff:           break;
1:522ee0b:         }
1:522ee0b:       }
1:522ee0b:     }
1:6634dc9:     assertEquals("the number of new eigenvectors", 5, i);
1:522ee0b: 
1:74f849b:     Collection<Double> oldEigenValuesNotFound = Lists.newArrayList();
1:e64dd36:     for (double d : eigenvalues) {
1:522ee0b:       boolean found = false;
1:e64dd36:       for (double newD : newEigenValues) {
1:e64dd36:         if (Math.abs((d - newD)/d) < 0.1) {
1:522ee0b:           found = true;
1:522ee0b:         }
1:522ee0b:       }
1:e64dd36:       if (!found) {
1:522ee0b:         oldEigenValuesNotFound.add(d);
1:522ee0b:       }
1:522ee0b:     }
1:522ee0b:     assertEquals("number of old eigenvalues not found: "
1:a6bdcbb:                  + Arrays.toString(oldEigenValuesNotFound.toArray(new Double[oldEigenValuesNotFound.size()])),
1:522ee0b:                 0, oldEigenValuesNotFound.size());
1:6634dc9:     assertEquals("did not find enough old eigenvectors", 3, oldEigensFound.size());
1:522ee0b:   }
1:6510938: 
1:6510938: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:17f6362
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Collection<Double> eigenvalues = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     Collection<Double> newEigenValues = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     Collection<Integer> oldEigensFound = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:     Collection<Double> oldEigenValuesNotFound = Lists.newArrayList();
author:Isabel Drost
-------------------------------------------------------------------------------
commit:e3ec9d8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.util.ToolRunner;
/////////////////////////////////////////////////////////////////////////
1:     corpus.setConf(getConfiguration());
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(getConfiguration(), new DistributedLanczosSolver().new DistributedLanczosSolverJob(), args);
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(getConfiguration(), new DistributedLanczosSolver().new DistributedLanczosSolverJob(), args);
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     corpus.setConf(getConfiguration());
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(getConfiguration(), new DistributedLanczosSolver().new DistributedLanczosSolverJob(), args);
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(getConfiguration(), new DistributedLanczosSolver().new DistributedLanczosSolverJob(), args);
1:     Configuration conf = getConfiguration();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:         if (newEigen != null && oldEigen.dot(newEigen) > 0.9) {
1:           oldEigensFound.add(row);
1:           break;
commit:6634dc9
/////////////////////////////////////////////////////////////////////////
1:         new TestDistributedRowMatrix().randomDenseHierarchicalDistributedMatrix(10, 9, false,
/////////////////////////////////////////////////////////////////////////
1:         "--numRows", "10",
1:         "--numCols", "9",
1:         "--rank", "6",
/////////////////////////////////////////////////////////////////////////
1:         "--numRows", "10",
1:         "--numCols", "9",
1:         "--rank", "7",
1:     Matrix eigenVectors = new DenseMatrix(7, corpus.numCols());
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("number of eigenvectors", 7, i);
1:         .randomDenseHierarchicalDistributedMatrix(10, 9, false, testData.toString());
/////////////////////////////////////////////////////////////////////////
1:         "--numRows", "10",
1:         "--numCols", "9",
1:         "--rank", "6",
1:     Matrix eigenVectors = new DenseMatrix(6, corpus.numCols());
/////////////////////////////////////////////////////////////////////////
1:         "--numRows", "10",
1:         "--numCols", "9",
1:         "--rank", "7",
1:     Matrix eigenVectors2 = new DenseMatrix(7, corpus.numCols());
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("number of clean eigenvectors", 3, i);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("the number of new eigenvectors", 5, i);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("did not find enough old eigenvectors", 3, oldEigensFound.size());
commit:96117d3
/////////////////////////////////////////////////////////////////////////
0:       if(EigenVector.getCosAngleError(v.getName()) < 1.0e-3) {
commit:a6bdcbb
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
0:     Collection<Double> eigenvalues = new ArrayList<Double>();
/////////////////////////////////////////////////////////////////////////
0:     Configuration conf = new Configuration();
0:     Collection<Double> newEigenValues = new ArrayList<Double>();
/////////////////////////////////////////////////////////////////////////
0:     Collection<Integer> oldEigensFound = new ArrayList<Integer>();
/////////////////////////////////////////////////////////////////////////
0:     Collection<Double> oldEigenValuesNotFound = new ArrayList<Double>();
/////////////////////////////////////////////////////////////////////////
1:                  + Arrays.toString(oldEigenValuesNotFound.toArray(new Double[oldEigenValuesNotFound.size()])),
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterable;
/////////////////////////////////////////////////////////////////////////
1:     int i = 0;
1:     for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(rawEigenvectors, conf)) {
1:       Vector v = value.get();
1:       eigenVectors.assignRow(i, v);
1:       i++;
0:     assertEquals("number of eigenvectors", 9, i);
/////////////////////////////////////////////////////////////////////////
1: 
1:     int i = 0;
1:     for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(cleanEigenvectors, conf)) {
0:       Vector v = value.get();
1:       eigenVectors.assignRow(i, v);
1:       i++;
0:     assertEquals("number of clean eigenvectors", 4, i);
commit:04a0324
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     corpus.setConf(new Configuration());
/////////////////////////////////////////////////////////////////////////
0:     corpus.setConf(new Configuration());
commit:c69893b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     DistributedRowMatrix corpus =
0:         new TestDistributedRowMatrix().randomDistributedMatrix(500, 450, 500, 10, 10.0, true, testData.toString());
1:     String[] args = {
1:         "-i", new Path(testData, "distMatrix").toString(),
1:         "-o", output.toString(),
0:         "--tempDir", tmp.toString(), "--numRows", "500",
0:         "--numCols", "500",
0:         "--rank", "10",
0:         "--symmetric", "true"
1:     };
/////////////////////////////////////////////////////////////////////////
0:     DistributedRowMatrix corpus =
0:         new TestDistributedRowMatrix().randomDistributedMatrix(500, 450, 500, 10, 10.0, true, testData.toString());
1:     String[] args = {
1:         "-i", new Path(testData, "distMatrix").toString(),
1:         "-o", output.toString(),
1:         "--tempDir", tmp.toString(),
0:         "--numRows", "500",
0:         "--numCols", "500",
0:         "--rank", "10",
0:         "--symmetric", "true",
1:         "--cleansvd", "true"
1:     };
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:       if (EigenVector.getCosAngleError(v.getName()) < 1.0e-3) {
/////////////////////////////////////////////////////////////////////////
1:     for (int row = 0; row < eigenVectors.numRows(); row++) {
1:       if (oldEigen == null) {
1:       for (int newRow = 0; newRow < eigenVectors2.numRows(); newRow++) {
0:         if (newEigen != null) {
0:           if (oldEigen.dot(newEigen) > 0.9) {
/////////////////////////////////////////////////////////////////////////
1:     for (double d : eigenvalues) {
1:       for (double newD : newEigenValues) {
1:         if (Math.abs((d - newD)/d) < 0.1) {
1:       if (!found) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:528ffcd
/////////////////////////////////////////////////////////////////////////
1:       Vector oldEigen = eigenVectors.viewRow(row);
1:         Vector newEigen = eigenVectors2.viewRow(newRow);
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:f360973
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
commit:522ee0b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.NamedVector;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.List;
1:   private static final Logger log = LoggerFactory.getLogger(TestDistributedLanczosSolverCLI.class);
0:         new TestDistributedRowMatrix().randomDenseHierarchicalDistributedMatrix(50, 45, false,
1:             testData.toString());
1:     Path workingDir = getTestTempDirPath("working");
1:         "--tempDir", tmp.toString(),
0:         "--numRows", "50",
0:         "--numCols", "45",
0:         "--rank", "30",
1:         "--symmetric", "false",
1:         "--workingDir", workingDir.toString()
1:     };
0:     new DistributedLanczosSolver().new DistributedLanczosSolverJob().run(args);
1: 
1:     output = getTestTempDirPath("output2");
1:     tmp = getTestTempDirPath("tmp2");
1:     args = new String[] {
1:         "-i", new Path(testData, "distMatrix").toString(),
1:         "-o", output.toString(),
1:         "--tempDir", tmp.toString(),
0:         "--numRows", "50",
0:         "--numCols", "45",
0:         "--rank", "35",
1:         "--symmetric", "false",
1:         "--workingDir", workingDir.toString()
0:     Matrix eigenVectors = new DenseMatrix(35, corpus.numCols());
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("number of eigenvectors", 35, i);
1:     DistributedRowMatrix corpus = new TestDistributedRowMatrix()
0:         .randomDenseHierarchicalDistributedMatrix(50, 45, false, testData.toString());
/////////////////////////////////////////////////////////////////////////
0:         "--numRows", "50",
0:         "--numCols", "45",
0:         "--rank", "30",
1:         "--symmetric", "false",
0:     Matrix eigenVectors = new DenseMatrix(30, corpus.numCols());
0:     List<Double> eigenvalues = new ArrayList<Double>();
1: 
1:     output = getTestTempDirPath("output2");
1:     tmp = getTestTempDirPath("tmp2");
1:     args = new String[] {
1:         "-i", new Path(testData, "distMatrix").toString(),
1:         "-o", output.toString(),
1:         "--tempDir", tmp.toString(),
0:         "--numRows", "50",
0:         "--numCols", "45",
0:         "--rank", "35",
1:         "--symmetric", "false",
1:         "--cleansvd", "true"
1:     };
0:     new DistributedLanczosSolver().new DistributedLanczosSolverJob().run(args);
1:     Path cleanEigenvectors2 = new Path(output, EigenVerificationJob.CLEAN_EIGENVECTORS);
0:     Matrix eigenVectors2 = new DenseMatrix(35, corpus.numCols());
0:     conf = new Configuration();
0:     List<Double> newEigenValues = new ArrayList<Double>();
1:       NamedVector v = (NamedVector) value.get();
1:       log.info(v.getName());
0:       if(EigenVector.getCosAngleError(v.getName()) < 1e-3) {
1:         eigenvalues.add(EigenVector.getEigenValue(v.getName()));
1:       }
0:     assertEquals("number of clean eigenvectors", 23, i);
1: 
1:     i = 0;
1:     for (VectorWritable value : new SequenceFileValueIterable<VectorWritable>(cleanEigenvectors2, conf)) {
1:       NamedVector v = (NamedVector) value.get();
1:       log.info(v.getName());
1:       eigenVectors2.assignRow(i, v);
1:       newEigenValues.add(EigenVector.getEigenValue(v.getName()));
1:       i++;
1:     }
1: 
0:     List<Integer> oldEigensFound = new ArrayList<Integer>();
0:     for(int row = 0; row < eigenVectors.numRows(); row++) {
0:       Vector oldEigen = eigenVectors.getRow(row);
0:       if(oldEigen == null) {
1:         break;
1:       }
0:       for(int newRow = 0; newRow < eigenVectors2.numRows(); newRow++) {
0:         Vector newEigen = eigenVectors2.getRow(newRow);
0:         if(newEigen != null) {
0:           if(oldEigen.dot(newEigen) > 0.9) {
0:             oldEigensFound.add(row);
1:             break;
1:           }
1:         }
1:       }
1:     }
0:     assertEquals("the number of new eigenvectors", 30, i);
1: 
0:     List<Double> oldEigenValuesNotFound = new ArrayList<Double>();
0:     for(double d : eigenvalues) {
1:       boolean found = false;
0:       for(double newD : newEigenValues) {
0:         if(Math.abs((d - newD)/d) < 0.1) {
1:           found = true;
1:         }
1:       }
0:       if(!found) {
1:         oldEigenValuesNotFound.add(d);
1:       }
1:     }
1:     assertEquals("number of old eigenvalues not found: "
0:                  + Arrays.toString(oldEigenValuesNotFound.toArray(new Double[0])),
1:                 0, oldEigenValuesNotFound.size());
0:     assertEquals("did not find enough old eigenvectors", 16, oldEigensFound.size());
commit:3d4e6f2
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("number of eigenvectors", 10, i);
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:6510938
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.decomposer;
1: 
0: import java.io.File;
0: import java.util.ArrayList;
0: import java.util.List;
1: 
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.io.SequenceFile;
0: import org.apache.hadoop.io.Writable;
0: import org.apache.hadoop.mapred.JobConf;
0: import org.apache.mahout.clustering.AbstractCluster;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1: import org.apache.mahout.math.hadoop.TestDistributedRowMatrix;
0: import org.apache.mahout.math.hadoop.decomposer.DistributedLanczosSolver.DistributedLanczosSolverJob;
1: import org.junit.Test;
1: 
1: public final class TestDistributedLanczosSolverCLI extends MahoutTestCase {
1: 
1:   @Test
1:   public void testDistributedLanczosSolverCLI() throws Exception {
1:     Path testData = getTestTempDirPath("testdata");
0:     DistributedRowMatrix corpus = new TestDistributedRowMatrix().randomDistributedMatrix(500, 450, 500, 10, 10.0, true, testData
0:         .toString());
0:     corpus.configure(new JobConf());
1:     Path output = getTestTempDirPath("output");
1:     Path tmp = getTestTempDirPath("tmp");
0:     String[] args = { "-i", new Path(testData, "distMatrix").toString(), "-o", output.toString(), "--tempDir", tmp.toString(), "--numRows", "500",
0:         "--numCols", "500", "--rank", "10", "--symmetric", "true" };
0:     new DistributedLanczosSolver().new DistributedLanczosSolverJob().run(args);
1: 
1:     Path rawEigenvectors = new Path(output, DistributedLanczosSolver.RAW_EIGENVECTORS);
0:     Matrix eigenVectors = new DenseMatrix(10, corpus.numCols());
0:     Configuration conf = new Configuration();
1: 
0:     FileSystem fs = FileSystem.get(rawEigenvectors.toUri(), conf);
0:     SequenceFile.Reader reader = new SequenceFile.Reader(fs, rawEigenvectors, conf);
0:     try {
0:       Writable key = reader.getKeyClass().asSubclass(Writable.class).newInstance();
0:       Writable value = reader.getValueClass().asSubclass(Writable.class).newInstance();
0:       int i = 0;
0:       while (reader.next(key, value)) {
0:         Vector v = ((VectorWritable) value).get();
0:         eigenVectors.assignRow(i, v);
0:         System.out.println("k=" + key.toString() + " V=" + AbstractCluster.formatVector(v, null));
0:         value = reader.getValueClass().asSubclass(Writable.class).newInstance();
0:         i++;
1:       }
0:       assertEquals("number of eigenvectors", 9, i);
0:     } finally {
0:       reader.close();
1:     }
1:   }
1: 
1:   @Test
1:   public void testDistributedLanczosSolverEVJCLI() throws Exception {
1:     Path testData = getTestTempDirPath("testdata");
0:     DistributedRowMatrix corpus = new TestDistributedRowMatrix().randomDistributedMatrix(500, 450, 500, 10, 10.0, true, testData
0:         .toString());
0:     corpus.configure(new JobConf());
1:     Path output = getTestTempDirPath("output");
1:     Path tmp = getTestTempDirPath("tmp");
0:     String[] args = { "-i", new Path(testData, "distMatrix").toString(), "-o", output.toString(), "--tempDir", tmp.toString(), "--numRows", "500",
0:         "--numCols", "500", "--rank", "10", "--symmetric", "true", "--cleansvd", "true" };
0:     new DistributedLanczosSolver().new DistributedLanczosSolverJob().run(args);
1:   
1:     Path cleanEigenvectors = new Path(output, EigenVerificationJob.CLEAN_EIGENVECTORS);
0:     Matrix eigenVectors = new DenseMatrix(10, corpus.numCols());
0:     Configuration conf = new Configuration();
1:   
0:     FileSystem fs = FileSystem.get(cleanEigenvectors.toUri(), conf);
0:     SequenceFile.Reader reader = new SequenceFile.Reader(fs, cleanEigenvectors, conf);
0:     try {
0:       Writable key = reader.getKeyClass().asSubclass(Writable.class).newInstance();
0:       Writable value = reader.getValueClass().asSubclass(Writable.class).newInstance();
0:       int i = 0;
0:       while (reader.next(key, value)) {
0:         Vector v = ((VectorWritable) value).get();
0:         eigenVectors.assignRow(i, v);
0:         System.out.println("k=" + key.toString() + " V=" + AbstractCluster.formatVector(v, null));
0:         value = reader.getValueClass().asSubclass(Writable.class).newInstance();
0:         i++;
1:       }
0:       assertEquals("number of clean eigenvectors", 4, i);
0:     } finally {
0:       reader.close();
1:     }
1:   }
1: 
1: }
============================================================================