1:4f668db: /*
1:4f668db:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4f668db:  * contributor license agreements.  See the NOTICE file distributed with
1:4f668db:  * this work for additional information regarding copyright ownership.
1:4f668db:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4f668db:  * (the "License"); you may not use this file except in compliance with
1:4f668db:  * the License.  You may obtain a copy of the License at
1:4f668db:  *
1:4f668db:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4f668db:  *
1:4f668db:  * Unless required by applicable law or agreed to in writing, software
1:4f668db:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4f668db:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f668db:  * See the License for the specific language governing permissions and
1:4f668db:  * limitations under the License.
1:4f668db:  */
1:4f668db: 
1:4f668db: package org.apache.mahout.vectorizer.encoders;
1:4f668db: 
1:4f668db: import org.apache.mahout.common.MahoutTestCase;
1:4f668db: import org.apache.mahout.math.DenseVector;
1:4f668db: import org.apache.mahout.math.Vector;
1:4f668db: import org.junit.Test;
1:4f668db: 
1:4f668db: public class CachingEncoderTest extends MahoutTestCase {
1:4f668db: 
1:4f668db:   private static final int CARDINALITY = 10;
1:4f668db:   private static final String NAME = "name";
1:4f668db:   private static final String WORD = "word";
1:4f668db:   private static final String CONTINUOUSVAL = "123";
1:4f668db: 
1:4f668db:   @Test
1:4f668db:   public void testCacheAreUsedStaticWord() {
1:4f668db:     CachingStaticWordValueEncoder encoder = new CachingStaticWordValueEncoder(NAME, CARDINALITY);
1:4f668db:     Vector v = new DenseVector(CARDINALITY);
1:4f668db:     encoder.addToVector(WORD, v);
1:4f668db:     assertFalse("testCacheAreUsedStaticWord: cache should have values", encoder.getCaches()[0].isEmpty());
1:4f668db:   }
1:4f668db: 
1:4f668db:   @Test
1:4f668db:   public void testCacheAreUsedContinuous() {
1:4f668db:     CachingContinuousValueEncoder encoder = new CachingContinuousValueEncoder(NAME, CARDINALITY);
1:4f668db:     Vector v = new DenseVector(CARDINALITY);
1:4f668db:     encoder.addToVector(CONTINUOUSVAL, 1.0, v);
1:4f668db:     assertFalse("testCacheAreUsedContinuous: cache should have values", encoder.getCaches()[0].isEmpty());
1:4f668db:   }
1:4f668db: 
1:4f668db: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4f668db
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.vectorizer.encoders;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.junit.Test;
1: 
1: public class CachingEncoderTest extends MahoutTestCase {
1: 
1:   private static final int CARDINALITY = 10;
1:   private static final String NAME = "name";
1:   private static final String WORD = "word";
1:   private static final String CONTINUOUSVAL = "123";
1: 
1:   @Test
1:   public void testCacheAreUsedStaticWord() {
1:     CachingStaticWordValueEncoder encoder = new CachingStaticWordValueEncoder(NAME, CARDINALITY);
1:     Vector v = new DenseVector(CARDINALITY);
1:     encoder.addToVector(WORD, v);
1:     assertFalse("testCacheAreUsedStaticWord: cache should have values", encoder.getCaches()[0].isEmpty());
1:   }
1: 
1:   @Test
1:   public void testCacheAreUsedContinuous() {
1:     CachingContinuousValueEncoder encoder = new CachingContinuousValueEncoder(NAME, CARDINALITY);
1:     Vector v = new DenseVector(CARDINALITY);
1:     encoder.addToVector(CONTINUOUSVAL, 1.0, v);
1:     assertFalse("testCacheAreUsedContinuous: cache should have values", encoder.getCaches()[0].isEmpty());
1:   }
1: 
1: }
============================================================================