1:cd829a2: /*
1:cd829a2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cd829a2:  * contributor license agreements.  See the NOTICE file distributed with
1:cd829a2:  * this work for additional information regarding copyright ownership.
1:cd829a2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cd829a2:  * (the "License"); you may not use this file except in compliance with
1:cd829a2:  * the License.  You may obtain a copy of the License at
1:cd829a2:  *
1:cd829a2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:cd829a2:  *
1:cd829a2:  * Unless required by applicable law or agreed to in writing, software
1:cd829a2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cd829a2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd829a2:  * See the License for the specific language governing permissions and
1:cd829a2:  * limitations under the License.
1:cd829a2:  */
1:cd829a2: 
1:cd829a2: package org.apache.mahout.math;
1:cd829a2: 
1:cd829a2: import org.apache.mahout.math.function.Functions;
1:dd78ed9: import org.junit.Assert;
1:cd829a2: import org.junit.Test;
1:cd829a2: 
1:dd78ed9: import java.util.Iterator;
1:dd78ed9: 
1:cd829a2: public class DiagonalMatrixTest extends MahoutTestCase {
1:cd829a2:   @Test
1:cd829a2:   public void testBasics() {
1:cd829a2:     DiagonalMatrix a = new DiagonalMatrix(new double[]{1, 2, 3, 4});
1:cd829a2: 
1:cd829a2:     assertEquals(0, a.viewDiagonal().minus(new DenseVector(new double[]{1, 2, 3, 4})).norm(1), 1.0e-10);
1:cd829a2:     assertEquals(0, a.viewPart(0, 3, 0, 3).viewDiagonal().minus(
1:cd829a2:       new DenseVector(new double[]{1, 2, 3})).norm(1), 1.0e-10);
1:cd829a2: 
1:cd829a2:     assertEquals(4, a.get(3, 3), 1.0e-10);
1:cd829a2: 
1:cd829a2:     Matrix m = new DenseMatrix(4, 4);
1:cd829a2:     m.assign(a);
1:cd829a2: 
1:cd829a2:     assertEquals(0, m.minus(a).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:cd829a2: 
1:cd829a2:     assertEquals(0, m.transpose().times(m).minus(a.transpose().times(a)).aggregate(
1:cd829a2:       Functions.PLUS, Functions.ABS), 1.0e-10);
1:cd829a2:     assertEquals(0, m.plus(m).minus(a.plus(a)).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:cd829a2: 
1:cd829a2:     m = new DenseMatrix(new double[][]{{1, 2, 3, 4}, {5, 6, 7, 8}});
1:cd829a2: 
1:cd829a2:     assertEquals(100, a.timesLeft(m).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:cd829a2:     assertEquals(100, a.times(m.transpose()).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:cd829a2:   }
1:cd829a2: 
1:dd78ed9:   @Test
1:dd78ed9:   public void testSparsity() {
1:dd78ed9:     Vector d = new DenseVector(10);
1:dd78ed9:     for (int i = 0; i < 10; i++) {
1:dd78ed9:       d.set(i, i * i);
1:dd78ed9:     }
1:dd78ed9:     DiagonalMatrix m = new DiagonalMatrix(d);
1:dd78ed9: 
1:dd78ed9:     Assert.assertFalse(m.viewRow(0).isDense());
1:dd78ed9:     Assert.assertFalse(m.viewColumn(0).isDense());
1:dd78ed9: 
1:dd78ed9:     for (int i = 0; i < 10; i++) {
1:dd78ed9:       assertEquals(i * i, m.viewRow(i).zSum(), 0);
1:dd78ed9:       assertEquals(i * i, m.viewRow(i).get(i), 0);
1:dd78ed9: 
1:dd78ed9:       assertEquals(i * i, m.viewColumn(i).zSum(), 0);
1:dd78ed9:       assertEquals(i * i, m.viewColumn(i).get(i), 0);
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     Iterator<Vector.Element> ix = m.viewRow(7).nonZeroes().iterator();
1:dd78ed9:     assertTrue(ix.hasNext());
1:dd78ed9:     Vector.Element r = ix.next();
1:dd78ed9:     assertEquals(7, r.index());
1:dd78ed9:     assertEquals(49, r.get(), 0);
1:dd78ed9:     assertFalse(ix.hasNext());
1:dd78ed9: 
1:dd78ed9:     assertEquals(0, m.viewRow(5).get(3), 0);
1:dd78ed9:     assertEquals(0, m.viewColumn(8).get(3), 0);
1:dd78ed9: 
1:dd78ed9:     m.viewRow(3).set(3, 1);
1:dd78ed9:     assertEquals(1, m.get(3, 3), 0);
1:dd78ed9: 
1:dd78ed9:     for (Vector.Element element : m.viewRow(6).all()) {
1:dd78ed9:       if (element.index() == 6) {
1:dd78ed9:         assertEquals(36, element.get(), 0);
1:dd78ed9:       }                                    else {
1:dd78ed9:         assertEquals(0, element.get(), 0);
1:dd78ed9:       }
1:dd78ed9:     }
1:dd78ed9:   }
1:cd829a2: }
============================================================================
author:Ted Dunning
-------------------------------------------------------------------------------
commit:dd78ed9
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
1: import java.util.Iterator;
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testSparsity() {
1:     Vector d = new DenseVector(10);
1:     for (int i = 0; i < 10; i++) {
1:       d.set(i, i * i);
1:     }
1:     DiagonalMatrix m = new DiagonalMatrix(d);
1: 
1:     Assert.assertFalse(m.viewRow(0).isDense());
1:     Assert.assertFalse(m.viewColumn(0).isDense());
1: 
1:     for (int i = 0; i < 10; i++) {
1:       assertEquals(i * i, m.viewRow(i).zSum(), 0);
1:       assertEquals(i * i, m.viewRow(i).get(i), 0);
1: 
1:       assertEquals(i * i, m.viewColumn(i).zSum(), 0);
1:       assertEquals(i * i, m.viewColumn(i).get(i), 0);
1:     }
1: 
1:     Iterator<Vector.Element> ix = m.viewRow(7).nonZeroes().iterator();
1:     assertTrue(ix.hasNext());
1:     Vector.Element r = ix.next();
1:     assertEquals(7, r.index());
1:     assertEquals(49, r.get(), 0);
1:     assertFalse(ix.hasNext());
1: 
1:     assertEquals(0, m.viewRow(5).get(3), 0);
1:     assertEquals(0, m.viewColumn(8).get(3), 0);
1: 
1:     m.viewRow(3).set(3, 1);
1:     assertEquals(1, m.get(3, 3), 0);
1: 
1:     for (Vector.Element element : m.viewRow(6).all()) {
1:       if (element.index() == 6) {
1:         assertEquals(36, element.get(), 0);
1:       }                                    else {
1:         assertEquals(0, element.get(), 0);
1:       }
1:     }
1:   }
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:cd829a2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.Functions;
1: import org.junit.Test;
1: 
1: public class DiagonalMatrixTest extends MahoutTestCase {
1:   @Test
1:   public void testBasics() {
1:     DiagonalMatrix a = new DiagonalMatrix(new double[]{1, 2, 3, 4});
1: 
1:     assertEquals(0, a.viewDiagonal().minus(new DenseVector(new double[]{1, 2, 3, 4})).norm(1), 1.0e-10);
1:     assertEquals(0, a.viewPart(0, 3, 0, 3).viewDiagonal().minus(
1:       new DenseVector(new double[]{1, 2, 3})).norm(1), 1.0e-10);
1: 
1:     assertEquals(4, a.get(3, 3), 1.0e-10);
1: 
1:     Matrix m = new DenseMatrix(4, 4);
1:     m.assign(a);
1: 
1:     assertEquals(0, m.minus(a).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1: 
1:     assertEquals(0, m.transpose().times(m).minus(a.transpose().times(a)).aggregate(
1:       Functions.PLUS, Functions.ABS), 1.0e-10);
1:     assertEquals(0, m.plus(m).minus(a.plus(a)).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1: 
1:     m = new DenseMatrix(new double[][]{{1, 2, 3, 4}, {5, 6, 7, 8}});
1: 
1:     assertEquals(100, a.timesLeft(m).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:     assertEquals(100, a.times(m.transpose()).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:   }
1: 
1: }
============================================================================