1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:6a4942c: package org.apache.mahout.utils.vectors.lucene;
2:6a4942c: 
1:6a4942c: 
1:87d4b2e: import java.io.IOException;
1:87d4b2e: 
1:6a4942c: import com.google.common.io.Closeables;
1:b381afd: 
1:6a4942c: import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
1:6a4942c: import org.apache.lucene.document.Document;
1:6a4942c: import org.apache.lucene.document.Field;
1:211edf2: import org.apache.lucene.document.FieldType;
1:6a4942c: import org.apache.lucene.document.StringField;
1:6a4942c: import org.apache.lucene.index.DirectoryReader;
1:4d0cd66: import org.apache.lucene.index.IndexOptions;
1:6a4942c: import org.apache.lucene.index.IndexReader;
1:6a4942c: import org.apache.lucene.index.IndexWriter;
1:6a4942c: import org.apache.lucene.index.IndexWriterConfig;
1:6a4942c: import org.apache.lucene.store.RAMDirectory;
1:b381afd: import org.apache.mahout.common.MahoutTestCase;
1:211edf2: import org.junit.Before;
1:6a4942c: import org.junit.Test;
1:6a4942c: 
1:6a4942c: public class CachedTermInfoTest extends MahoutTestCase {
1:6a4942c:   private RAMDirectory directory;
1:6a4942c:   private static final String[] DOCS = {
1:6a4942c:           "a a b b c c",
1:6a4942c:           "a b a b a b a b",
1:6a4942c:           "a b a",
1:6a4942c:           "a",
1:6a4942c:           "b",
1:6a4942c:           "a",
1:6a4942c:           "a"
1:6a4942c:   };
1:6a4942c: 
1:6a4942c:   private static final String[] DOCS2 = {
1:6a4942c:           "d d d d",
1:6a4942c:           "e e e e",
1:6a4942c:           "d e d e",
1:6a4942c:           "d",
1:6a4942c:           "e",
1:6a4942c:           "d",
1:6a4942c:           "e"
1:6a4942c:   };
1:6a4942c: 
1:211edf2:   @Before
1:211edf2:   public void before() throws IOException {
1:6a4942c:     directory = new RAMDirectory();
1:211edf2: 
1:211edf2:     FieldType fieldType = new FieldType();
1:211edf2:     fieldType.setStored(false);
1:4d0cd66:     fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
1:211edf2:     fieldType.setTokenized(true);
1:211edf2:     fieldType.setStoreTermVectors(false);
1:211edf2:     fieldType.setStoreTermVectorPositions(false);
1:211edf2:     fieldType.setStoreTermVectorOffsets(false);
1:211edf2:     fieldType.freeze();
1:211edf2: 
1:211edf2:     directory = createTestIndex(fieldType, directory, 0);
1:6a4942c:   }
1:6a4942c: 
1:6a4942c:   @Test
1:6a4942c:   public void test() throws Exception {
1:6a4942c:     IndexReader reader = DirectoryReader.open(directory);
1:6a4942c:     CachedTermInfo cti = new CachedTermInfo(reader, "content", 0, 100);
1:6a4942c:     assertEquals(3, cti.totalTerms("content"));
1:6a4942c:     assertNotNull(cti.getTermEntry("content", "a"));
1:6a4942c:     assertNull(cti.getTermEntry("content", "e"));
1:6a4942c:     //minDf
1:6a4942c:     cti = new CachedTermInfo(reader, "content", 3, 100);
1:6a4942c:     assertEquals(2, cti.totalTerms("content"));
1:6a4942c:     assertNotNull(cti.getTermEntry("content", "a"));
1:6a4942c:     assertNull(cti.getTermEntry("content", "c"));
1:6a4942c:     //maxDFPercent, a is in 6 of 7 docs: numDocs * maxDfPercent / 100 < 6 to exclude, 85% should suffice to exclude a
1:6a4942c:     cti = new CachedTermInfo(reader, "content", 0, 85);
1:6a4942c:     assertEquals(2, cti.totalTerms("content"));
1:6a4942c:     assertNotNull(cti.getTermEntry("content", "b"));
1:6a4942c:     assertNotNull(cti.getTermEntry("content", "c"));
1:6a4942c:     assertNull(cti.getTermEntry("content", "a"));
1:6a4942c: 
1:6a4942c: 
1:6a4942c:   }
1:6a4942c: 
1:211edf2:   static RAMDirectory createTestIndex(FieldType fieldType,
1:6a4942c:                                       RAMDirectory directory,
1:6a4942c:                                       int startingId) throws IOException {
1:4d0cd66:     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(new WhitespaceAnalyzer()));
1:6a4942c: 
1:6a4942c:     try {
1:6a4942c:       for (int i = 0; i < DOCS.length; i++) {
1:6a4942c:         Document doc = new Document();
1:6a4942c:         Field id = new StringField("id", "doc_" + (i + startingId), Field.Store.YES);
1:6a4942c:         doc.add(id);
1:211edf2:         Field text = new Field("content", DOCS[i], fieldType);
1:6a4942c:         doc.add(text);
1:211edf2:         Field text2 = new Field("content2", DOCS2[i], fieldType);
1:6a4942c:         doc.add(text2);
1:6a4942c:         writer.addDocument(doc);
1:6a4942c:       }
1:6a4942c:     } finally {
1:87d4b2e:       Closeables.close(writer, false);
1:6a4942c:     }
1:6a4942c:     return directory;
1:6a4942c:   }
1:6a4942c: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:4d0cd66
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.index.IndexOptions;
/////////////////////////////////////////////////////////////////////////
1:     fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
/////////////////////////////////////////////////////////////////////////
1:     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(new WhitespaceAnalyzer()));
commit:c88c240
/////////////////////////////////////////////////////////////////////////
0:     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Version.LUCENE_45, new WhitespaceAnalyzer(Version.LUCENE_45)));
commit:211edf2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.document.FieldType;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1:   @Before
1:   public void before() throws IOException {
1: 
1:     FieldType fieldType = new FieldType();
1:     fieldType.setStored(false);
0:     fieldType.setIndexed(true);
1:     fieldType.setTokenized(true);
1:     fieldType.setStoreTermVectors(false);
1:     fieldType.setStoreTermVectorPositions(false);
1:     fieldType.setStoreTermVectorOffsets(false);
1:     fieldType.freeze();
1: 
1:     directory = createTestIndex(fieldType, directory, 0);
/////////////////////////////////////////////////////////////////////////
1:   static RAMDirectory createTestIndex(FieldType fieldType,
/////////////////////////////////////////////////////////////////////////
1:         Field text = new Field("content", DOCS[i], fieldType);
1:         Field text2 = new Field("content2", DOCS2[i], fieldType);
commit:c36dc71
/////////////////////////////////////////////////////////////////////////
0:     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Version.LUCENE_42, new WhitespaceAnalyzer(Version.LUCENE_42)));
author:frankscholten
-------------------------------------------------------------------------------
commit:2e5449f
/////////////////////////////////////////////////////////////////////////
0:     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Version.LUCENE_46, new WhitespaceAnalyzer(Version.LUCENE_46)));
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
author:sslavic
-------------------------------------------------------------------------------
commit:b381afd
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
commit:e48eb4c
/////////////////////////////////////////////////////////////////////////
0:     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Version.LUCENE_43, new WhitespaceAnalyzer(Version.LUCENE_43)));
commit:fc6c6f3
/////////////////////////////////////////////////////////////////////////
commit:6a4942c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors.lucene;
1: 
1: 
1: import com.google.common.io.Closeables;
1: import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
1: import org.apache.lucene.document.Document;
1: import org.apache.lucene.document.Field;
1: import org.apache.lucene.document.StringField;
1: import org.apache.lucene.index.DirectoryReader;
1: import org.apache.lucene.index.IndexReader;
1: import org.apache.lucene.index.IndexWriter;
1: import org.apache.lucene.index.IndexWriterConfig;
1: import org.apache.lucene.store.RAMDirectory;
0: import org.apache.lucene.util.Version;
0: import org.apache.mahout.utils.MahoutTestCase;
0: import org.apache.mahout.utils.vectors.TermEntry;
1: import org.junit.Test;
1: 
0: import java.io.IOException;
0: import java.util.Iterator;
1: 
0: /**
0:  *
0:  *
0:  **/
1: public class CachedTermInfoTest extends MahoutTestCase {
1:   private RAMDirectory directory;
1:   private static final String[] DOCS = {
1:           "a a b b c c",
1:           "a b a b a b a b",
1:           "a b a",
1:           "a",
1:           "b",
1:           "a",
1:           "a"
1:   };
1: 
1:   private static final String[] DOCS2 = {
1:           "d d d d",
1:           "e e e e",
1:           "d e d e",
1:           "d",
1:           "e",
1:           "d",
1:           "e"
1:   };
1: 
0:   @Override
0:   public void setUp() throws Exception {
0:     super.setUp();
1:     directory = new RAMDirectory();
0:     directory = createTestIndex(Field.TermVector.NO, directory, true, 0);
1:   }
1: 
1:   @Test
1:   public void test() throws Exception {
1:     IndexReader reader = DirectoryReader.open(directory);
1:     CachedTermInfo cti = new CachedTermInfo(reader, "content", 0, 100);
1:     assertEquals(3, cti.totalTerms("content"));
1:     assertNotNull(cti.getTermEntry("content", "a"));
1:     assertNull(cti.getTermEntry("content", "e"));
1:     //minDf
1:     cti = new CachedTermInfo(reader, "content", 3, 100);
1:     assertEquals(2, cti.totalTerms("content"));
1:     assertNotNull(cti.getTermEntry("content", "a"));
1:     assertNull(cti.getTermEntry("content", "c"));
1:     //maxDFPercent, a is in 6 of 7 docs: numDocs * maxDfPercent / 100 < 6 to exclude, 85% should suffice to exclude a
1:     cti = new CachedTermInfo(reader, "content", 0, 85);
1:     assertEquals(2, cti.totalTerms("content"));
1:     assertNotNull(cti.getTermEntry("content", "b"));
1:     assertNotNull(cti.getTermEntry("content", "c"));
1:     assertNull(cti.getTermEntry("content", "a"));
1: 
1: 
1:   }
1: 
0:   static RAMDirectory createTestIndex(Field.TermVector termVector,
1:                                       RAMDirectory directory,
0:                                       boolean createNew,
1:                                       int startingId) throws IOException {
0:     IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Version.LUCENE_41, new WhitespaceAnalyzer(Version.LUCENE_41)));
1: 
1:     try {
1:       for (int i = 0; i < DOCS.length; i++) {
1:         Document doc = new Document();
1:         Field id = new StringField("id", "doc_" + (i + startingId), Field.Store.YES);
1:         doc.add(id);
0:         //Store both position and offset information
0:         //Says it is deprecated, but doesn't seem to offer an alternative that supports term vectors...
0:         Field text = new Field("content", DOCS[i], Field.Store.NO, Field.Index.ANALYZED, termVector);
1:         doc.add(text);
0:         Field text2 = new Field("content2", DOCS2[i], Field.Store.NO, Field.Index.ANALYZED, termVector);
1:         doc.add(text2);
1:         writer.addDocument(doc);
1:       }
1:     } finally {
0:       Closeables.closeQuietly(writer);
1:     }
1:     return directory;
1:   }
1: }
============================================================================