1:94f64e6: /**
1:94f64e6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:94f64e6:  * contributor license agreements.  See the NOTICE file distributed with
1:94f64e6:  * this work for additional information regarding copyright ownership.
1:94f64e6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:94f64e6:  * (the "License"); you may not use this file except in compliance with
1:94f64e6:  * the License.  You may obtain a copy of the License at
1:94f64e6:  *
1:94f64e6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:94f64e6:  *
1:94f64e6:  * Unless required by applicable law or agreed to in writing, software
1:94f64e6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:94f64e6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:94f64e6:  * See the License for the specific language governing permissions and
1:94f64e6:  * limitations under the License.
1:94f64e6:  */
3:94f64e6: 
1:94f64e6: package org.apache.mahout.classifier;
1:94f64e6: 
1:94f64e6: import java.util.Arrays;
1:94f64e6: import java.util.Collection;
1:94f64e6: import java.util.Map;
1:94f64e6: 
1:864ba1a: import com.google.common.collect.Lists;
1:94f64e6: import org.apache.mahout.common.MahoutTestCase;
1:94f64e6: import org.apache.mahout.math.Matrix;
1:94f64e6: import org.junit.Test;
1:94f64e6: 
1:94f64e6: public final class ConfusionMatrixTest extends MahoutTestCase {
1:94f64e6: 
1:94f64e6:   private static final int[][] VALUES = {{2, 3}, {10, 20}};
1:94f64e6:   private static final String[] LABELS = {"Label1", "Label2"};
1:740a9c9:   private static final int[] OTHER = {3, 6};
1:94f64e6:   private static final String DEFAULT_LABEL = "other";
1:94f64e6:   
1:94f64e6:   @Test
1:94f64e6:   public void testBuild() {
1:299fe6c:     ConfusionMatrix confusionMatrix = fillConfusionMatrix(VALUES, LABELS, DEFAULT_LABEL);
1:299fe6c:     checkValues(confusionMatrix);
1:299fe6c:     checkAccuracy(confusionMatrix);
1:94f64e6:   }
1:94f64e6: 
1:94f64e6:   @Test
1:94f64e6:   public void testGetMatrix() {
1:299fe6c:     ConfusionMatrix confusionMatrix = fillConfusionMatrix(VALUES, LABELS, DEFAULT_LABEL);
1:299fe6c:     Matrix m = confusionMatrix.getMatrix();
1:299fe6c:     Map<String, Integer> rowLabels = m.getRowLabelBindings();
1:299fe6c: 
1:299fe6c:     assertEquals(confusionMatrix.getLabels().size(), m.numCols());
1:299fe6c:     assertTrue(rowLabels.keySet().contains(LABELS[0]));
1:299fe6c:     assertTrue(rowLabels.keySet().contains(LABELS[1]));
1:299fe6c:     assertTrue(rowLabels.keySet().contains(DEFAULT_LABEL));
1:299fe6c:     assertEquals(2, confusionMatrix.getCorrect(LABELS[0]));
1:299fe6c:     assertEquals(20, confusionMatrix.getCorrect(LABELS[1]));
1:299fe6c:     assertEquals(0, confusionMatrix.getCorrect(DEFAULT_LABEL));
1:94f64e6:   }
1:94f64e6: 
1:299fe6c:     /**
1:299fe6c:      * Example taken from
1:299fe6c:      * http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_fscore_support.html
1:299fe6c:      */
1:299fe6c:     @Test
1:299fe6c:     public void testPrecisionRecallAndF1ScoreAsScikitLearn() {
1:299fe6c:       Collection<String> labelList = Arrays.asList("0", "1", "2");
1:299fe6c: 
1:299fe6c:       ConfusionMatrix confusionMatrix = new ConfusionMatrix(labelList, "DEFAULT");
1:299fe6c:       confusionMatrix.putCount("0", "0", 2);
1:299fe6c:       confusionMatrix.putCount("1", "0", 1);
1:299fe6c:       confusionMatrix.putCount("1", "2", 1);
1:299fe6c:       confusionMatrix.putCount("2", "1", 2);
1:299fe6c: 
1:299fe6c:       double delta = 0.001;
1:299fe6c:       assertEquals(0.222, confusionMatrix.getWeightedPrecision(), delta);
1:299fe6c:       assertEquals(0.333, confusionMatrix.getWeightedRecall(), delta);
1:299fe6c:       assertEquals(0.266, confusionMatrix.getWeightedF1score(), delta);
1:299fe6c:     }
1:299fe6c: 
1:94f64e6:   private static void checkValues(ConfusionMatrix cm) {
1:94f64e6:     int[][] counts = cm.getConfusionMatrix();
1:94f64e6:     cm.toString();
1:94f64e6:     assertEquals(counts.length, counts[0].length);
1:94f64e6:     assertEquals(3, counts.length);
1:94f64e6:     assertEquals(VALUES[0][0], counts[0][0]);
1:94f64e6:     assertEquals(VALUES[0][1], counts[0][1]);
1:94f64e6:     assertEquals(VALUES[1][0], counts[1][0]);
1:94f64e6:     assertEquals(VALUES[1][1], counts[1][1]);
1:94f64e6:     assertTrue(Arrays.equals(new int[3], counts[2])); // zeros
1:740a9c9:     assertEquals(OTHER[0], counts[0][2]);
1:740a9c9:     assertEquals(OTHER[1], counts[1][2]);
1:94f64e6:     assertEquals(3, cm.getLabels().size());
1:94f64e6:     assertTrue(cm.getLabels().contains(LABELS[0]));
1:94f64e6:     assertTrue(cm.getLabels().contains(LABELS[1]));
1:94f64e6:     assertTrue(cm.getLabels().contains(DEFAULT_LABEL));
1:94f64e6:   }
1:94f64e6: 
1:94f64e6:   private static void checkAccuracy(ConfusionMatrix cm) {
1:94f64e6:     Collection<String> labelstrs = cm.getLabels();
1:94f64e6:     assertEquals(3, labelstrs.size());
1:740a9c9:     assertEquals(25.0, cm.getAccuracy("Label1"), EPSILON);
1:740a9c9:     assertEquals(55.5555555, cm.getAccuracy("Label2"), EPSILON);
1:94f64e6:     assertTrue(Double.isNaN(cm.getAccuracy("other")));
1:94f64e6:   }
1:94f64e6:   
1:299fe6c:   private static ConfusionMatrix fillConfusionMatrix(int[][] values, String[] labels, String defaultLabel) {
1:864ba1a:     Collection<String> labelList = Lists.newArrayList();
1:94f64e6:     labelList.add(labels[0]);
1:94f64e6:     labelList.add(labels[1]);
1:299fe6c:     ConfusionMatrix confusionMatrix = new ConfusionMatrix(labelList, defaultLabel);
1:299fe6c: 
1:299fe6c:     confusionMatrix.putCount("Label1", "Label1", values[0][0]);
1:299fe6c:     confusionMatrix.putCount("Label1", "Label2", values[0][1]);
1:299fe6c:     confusionMatrix.putCount("Label2", "Label1", values[1][0]);
1:299fe6c:     confusionMatrix.putCount("Label2", "Label2", values[1][1]);
1:299fe6c:     confusionMatrix.putCount("Label1", DEFAULT_LABEL, OTHER[0]);
1:299fe6c:     confusionMatrix.putCount("Label2", DEFAULT_LABEL, OTHER[1]);
1:299fe6c:     return confusionMatrix;
1:94f64e6:   }
1:3105343: 
1:94f64e6: }
============================================================================
author:Andrew Musselman
-------------------------------------------------------------------------------
commit:864ba1a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:     Collection<String> labelList = Lists.newArrayList();
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:670a7d2
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
0:     Collection<String> labelList = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:3105343
/////////////////////////////////////////////////////////////////////////
1: 
author:ssc
-------------------------------------------------------------------------------
commit:299fe6c
/////////////////////////////////////////////////////////////////////////
1:     ConfusionMatrix confusionMatrix = fillConfusionMatrix(VALUES, LABELS, DEFAULT_LABEL);
1:     checkValues(confusionMatrix);
1:     checkAccuracy(confusionMatrix);
1:     ConfusionMatrix confusionMatrix = fillConfusionMatrix(VALUES, LABELS, DEFAULT_LABEL);
1:     Matrix m = confusionMatrix.getMatrix();
1:     Map<String, Integer> rowLabels = m.getRowLabelBindings();
1: 
1:     assertEquals(confusionMatrix.getLabels().size(), m.numCols());
1:     assertTrue(rowLabels.keySet().contains(LABELS[0]));
1:     assertTrue(rowLabels.keySet().contains(LABELS[1]));
1:     assertTrue(rowLabels.keySet().contains(DEFAULT_LABEL));
1:     assertEquals(2, confusionMatrix.getCorrect(LABELS[0]));
1:     assertEquals(20, confusionMatrix.getCorrect(LABELS[1]));
1:     assertEquals(0, confusionMatrix.getCorrect(DEFAULT_LABEL));
1:     /**
1:      * Example taken from
1:      * http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_fscore_support.html
1:      */
1:     @Test
1:     public void testPrecisionRecallAndF1ScoreAsScikitLearn() {
1:       Collection<String> labelList = Arrays.asList("0", "1", "2");
1: 
1:       ConfusionMatrix confusionMatrix = new ConfusionMatrix(labelList, "DEFAULT");
1:       confusionMatrix.putCount("0", "0", 2);
1:       confusionMatrix.putCount("1", "0", 1);
1:       confusionMatrix.putCount("1", "2", 1);
1:       confusionMatrix.putCount("2", "1", 2);
1: 
1:       double delta = 0.001;
1:       assertEquals(0.222, confusionMatrix.getWeightedPrecision(), delta);
1:       assertEquals(0.333, confusionMatrix.getWeightedRecall(), delta);
1:       assertEquals(0.266, confusionMatrix.getWeightedF1score(), delta);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private static ConfusionMatrix fillConfusionMatrix(int[][] values, String[] labels, String defaultLabel) {
1:     ConfusionMatrix confusionMatrix = new ConfusionMatrix(labelList, defaultLabel);
1: 
1:     confusionMatrix.putCount("Label1", "Label1", values[0][0]);
1:     confusionMatrix.putCount("Label1", "Label2", values[0][1]);
1:     confusionMatrix.putCount("Label2", "Label1", values[1][0]);
1:     confusionMatrix.putCount("Label2", "Label2", values[1][1]);
1:     confusionMatrix.putCount("Label1", DEFAULT_LABEL, OTHER[0]);
1:     confusionMatrix.putCount("Label2", DEFAULT_LABEL, OTHER[1]);
1:     return confusionMatrix;
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
0:     //int[][] v = cm.getConfusionMatrix();
commit:94f64e6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier;
1: 
0: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Map;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.Matrix;
1: import org.junit.Test;
1: 
1: public final class ConfusionMatrixTest extends MahoutTestCase {
1: 
1:   private static final int[][] VALUES = {{2, 3}, {10, 20}};
1:   private static final String[] LABELS = {"Label1", "Label2"};
1:   private static final String DEFAULT_LABEL = "other";
1:   
1:   @Test
1:   public void testBuild() {
0:     ConfusionMatrix cm = fillCM(VALUES, LABELS, DEFAULT_LABEL);
0:     checkValues(cm);
0:     checkAccuracy(cm);
1:   }
1: 
1:   @Test
1:   public void testGetMatrix() {
0: 	    ConfusionMatrix cm = fillCM(VALUES, LABELS, DEFAULT_LABEL);
0: 	    Matrix m = cm.getMatrix();
0: 	    Map<String, Integer> rowLabels = m.getRowLabelBindings();
0: 	    assertEquals(cm.getLabels().size(), m.numCols());
0: 	    assertTrue(rowLabels.keySet().contains(LABELS[0]));
0: 	    assertTrue(rowLabels.keySet().contains(LABELS[1]));
0: 	    assertTrue(rowLabels.keySet().contains(DEFAULT_LABEL));
0: 	    assertEquals(2, cm.getCorrect(LABELS[0]));
0: 	    assertEquals(20, cm.getCorrect(LABELS[1]));
0: 	    assertEquals(0, cm.getCorrect(DEFAULT_LABEL));
1:   }
1: 
1:   private static void checkValues(ConfusionMatrix cm) {
1:     int[][] counts = cm.getConfusionMatrix();
1:     cm.toString();
1:     assertEquals(counts.length, counts[0].length);
1:     assertEquals(3, counts.length);
1:     assertEquals(VALUES[0][0], counts[0][0]);
1:     assertEquals(VALUES[0][1], counts[0][1]);
1:     assertEquals(VALUES[1][0], counts[1][0]);
1:     assertEquals(VALUES[1][1], counts[1][1]);
1:     assertTrue(Arrays.equals(new int[3], counts[2])); // zeros
0:     assertEquals(0, counts[0][2]);
0:     assertEquals(0, counts[1][2]);
1:     assertEquals(3, cm.getLabels().size());
1:     assertTrue(cm.getLabels().contains(LABELS[0]));
1:     assertTrue(cm.getLabels().contains(LABELS[1]));
1:     assertTrue(cm.getLabels().contains(DEFAULT_LABEL));
1: 
1:   }
1: 
1:   private static void checkAccuracy(ConfusionMatrix cm) {
1:     Collection<String> labelstrs = cm.getLabels();
1:     assertEquals(3, labelstrs.size());
0:     assertEquals(40.0, cm.getAccuracy("Label1"), EPSILON);
0:     assertEquals(66.666666667, cm.getAccuracy("Label2"), EPSILON);
1:     assertTrue(Double.isNaN(cm.getAccuracy("other")));
1:   }
1:   
0:   private static ConfusionMatrix fillCM(int[][] values, String[] labels, String defaultLabel) {
0:     Collection<String> labelList = new ArrayList<String>();
1:     labelList.add(labels[0]);
1:     labelList.add(labels[1]);
0:     ConfusionMatrix cm = new ConfusionMatrix(labelList, defaultLabel);
0:     int[][] v = cm.getConfusionMatrix();
0:     v[0][0] = values[0][0];
0:     v[0][1] = values[0][1];
0:     v[1][0] = values[1][0];
0:     v[1][1] = values[1][1];
0:     return cm;
1:   }
1:   
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:740a9c9
/////////////////////////////////////////////////////////////////////////
1:   private static final int[] OTHER = {3, 6};
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(OTHER[0], counts[0][2]);
1:     assertEquals(OTHER[1], counts[1][2]);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(25.0, cm.getAccuracy("Label1"), EPSILON);
1:     assertEquals(55.5555555, cm.getAccuracy("Label2"), EPSILON);
/////////////////////////////////////////////////////////////////////////
0:     cm.putCount("Label1", "Label1", values[0][0]);
0:     cm.putCount("Label1", "Label2", values[0][1]);
0:     cm.putCount("Label2", "Label1", values[1][0]);
0:     cm.putCount("Label2", "Label2", values[1][1]);
0:     cm.putCount("Label1", DEFAULT_LABEL, OTHER[0]);
0:     cm.putCount("Label2", DEFAULT_LABEL, OTHER[1]);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     Collection<String> labelList = Lists.newArrayList();
============================================================================