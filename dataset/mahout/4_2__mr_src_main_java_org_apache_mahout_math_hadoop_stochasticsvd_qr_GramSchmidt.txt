1:ffc7fab: /**
1:ffc7fab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ffc7fab:  * contributor license agreements.  See the NOTICE file distributed with
1:ffc7fab:  * this work for additional information regarding copyright ownership.
1:ffc7fab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ffc7fab:  * (the "License"); you may not use this file except in compliance with
1:ffc7fab:  * the License.  You may obtain a copy of the License at
3:ffc7fab:  *
1:ffc7fab:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ffc7fab:  *
1:ffc7fab:  * Unless required by applicable law or agreed to in writing, software
1:ffc7fab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ffc7fab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ffc7fab:  * See the License for the specific language governing permissions and
1:ffc7fab:  * limitations under the License.
1:ffc7fab:  */
1:ffc7fab: package org.apache.mahout.math.hadoop.stochasticsvd.qr;
1:ffc7fab: 
1:ffc7fab: import org.apache.mahout.math.Matrix;
1:ffc7fab: import org.apache.mahout.math.Vector;
1:ffc7fab: import org.apache.mahout.math.function.DoubleFunction;
1:ffc7fab: 
1:ffc7fab: /**
1:5a2250c:  * Gram Schmidt quick helper.
1:ffc7fab:  */
1:229aeff: public final class GramSchmidt {
1:ffc7fab: 
1:5a2250c:   private GramSchmidt() {
1:1499411:   }
1:1499411: 
1:ffc7fab:   public static void orthonormalizeColumns(Matrix mx) {
1:ffc7fab: 
1:ffc7fab:     int n = mx.numCols();
1:ffc7fab: 
1:ffc7fab:     for (int c = 0; c < n; c++) {
1:ffc7fab:       Vector col = mx.viewColumn(c);
1:ffc7fab:       for (int c1 = 0; c1 < c; c1++) {
1:ffc7fab:         Vector viewC1 = mx.viewColumn(c1);
1:ffc7fab:         col.assign(col.minus(viewC1.times(viewC1.dot(col))));
1:ffc7fab: 
1:ffc7fab:       }
1:ffc7fab:       final double norm2 = col.norm(2);
1:ffc7fab:       col.assign(new DoubleFunction() {
1:ffc7fab:         @Override
1:ffc7fab:         public double apply(double x) {
1:ffc7fab:           return x / norm2;
1:ffc7fab:         }
1:ffc7fab:       });
1:ffc7fab:     }
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: public final class GramSchmidt {
commit:1499411
/////////////////////////////////////////////////////////////////////////
0:   private GrammSchmidt() {
1:   }
1: 
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:5a2250c
/////////////////////////////////////////////////////////////////////////
1:  * Gram Schmidt quick helper.
0: public class GramSchmidt {
1:   private GramSchmidt() {
commit:ffc7fab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.math.hadoop.stochasticsvd.qr;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.DoubleFunction;
1: 
1: /**
0:  * Gramm Schmidt quick helper.
1:  * 
1:  * 
1:  */
0: public class GrammSchmidt {
1: 
1:   public static void orthonormalizeColumns(Matrix mx) {
1: 
1:     int n = mx.numCols();
1: 
1:     for (int c = 0; c < n; c++) {
1:       Vector col = mx.viewColumn(c);
1:       for (int c1 = 0; c1 < c; c1++) {
1:         Vector viewC1 = mx.viewColumn(c1);
1:         col.assign(col.minus(viewC1.times(viewC1.dot(col))));
1: 
1:       }
1:       final double norm2 = col.norm(2);
1:       col.assign(new DoubleFunction() {
1:         @Override
1:         public double apply(double x) {
1:           return x / norm2;
1:         }
1:       });
1:     }
1:   }
1: 
1: }
============================================================================