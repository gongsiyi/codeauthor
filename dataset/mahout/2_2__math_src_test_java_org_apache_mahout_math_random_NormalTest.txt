1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
5:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:127d450: import org.apache.commons.math3.distribution.NormalDistribution;
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:8b6a26a: import org.apache.mahout.math.MahoutTestCase;
1:a07bfc3: import org.apache.mahout.math.stats.OnlineSummarizer;
1:a07bfc3: import org.junit.Before;
1:a07bfc3: import org.junit.Test;
1:a07bfc3: 
1:a07bfc3: import java.util.Arrays;
1:127d450: 
1:2deba36: public final class NormalTest extends MahoutTestCase {
1:a07bfc3: 
1:127d450:   @Override
1:127d450:   @Before
1:127d450:   public void setUp() {
1:127d450:     RandomUtils.useTestSeed();
1:127d450:   }
1:127d450: 
1:127d450:   @Test
1:127d450:   public void testOffset() {
1:127d450:     OnlineSummarizer s = new OnlineSummarizer();
1:127d450:     Sampler<Double> sampler = new Normal(2, 5);
1:127d450:     for (int i = 0; i < 10001; i++) {
1:127d450:       s.add(sampler.sample());
4:a07bfc3:     }
1:127d450:     assertEquals(String.format("m = %.3f, sd = %.3f", s.getMean(), s.getSD()), 2, s.getMean(), 0.04 * s.getSD());
1:127d450:     assertEquals(5, s.getSD(), 0.12);
1:127d450:   }
1:a07bfc3: 
1:127d450:   @Test
1:127d450:   public void testSample() throws Exception {
1:127d450:     double[] data = new double[10001];
1:127d450:     Sampler<Double> sampler = new Normal();
1:127d450:     for (int i = 0; i < data.length; i++) {
1:127d450:       data[i] = sampler.sample();
1:a07bfc3:     }
1:127d450:     Arrays.sort(data);
1:a07bfc3: 
1:2deba36:     NormalDistribution reference = new NormalDistribution(RandomUtils.getRandom().getRandomGenerator(),
1:2deba36:                                                           0, 1,
1:2deba36:                                                           NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
1:127d450:     assertEquals("Median", reference.inverseCumulativeProbability(0.5), data[5000], 0.04);
1:127d450:   }
1:a07bfc3: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2deba36
/////////////////////////////////////////////////////////////////////////
1: public final class NormalTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     NormalDistribution reference = new NormalDistribution(RandomUtils.getRandom().getRandomGenerator(),
1:                                                           0, 1,
1:                                                           NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
commit:127d450
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.math3.distribution.NormalDistribution;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   @Before
1:   public void setUp() {
1:     RandomUtils.useTestSeed();
1:   }
1: 
1:   @Test
1:   public void testOffset() {
1:     OnlineSummarizer s = new OnlineSummarizer();
1:     Sampler<Double> sampler = new Normal(2, 5);
1:     for (int i = 0; i < 10001; i++) {
1:       s.add(sampler.sample());
1:     assertEquals(String.format("m = %.3f, sd = %.3f", s.getMean(), s.getSD()), 2, s.getMean(), 0.04 * s.getSD());
1:     assertEquals(5, s.getSD(), 0.12);
1:   }
1:   @Test
1:   public void testSample() throws Exception {
1:     double[] data = new double[10001];
1:     Sampler<Double> sampler = new Normal();
1:     for (int i = 0; i < data.length; i++) {
1:       data[i] = sampler.sample();
1:     Arrays.sort(data);
0:     NormalDistribution reference = new NormalDistribution();
1:     assertEquals("Median", reference.inverseCumulativeProbability(0.5), data[5000], 0.04);
1:   }
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MahoutTestCase;
0: public class NormalTest extends MahoutTestCase {
0:     @Override
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
0: import org.apache.commons.math.MathException;
0: import org.apache.commons.math.distribution.NormalDistribution;
0: import org.apache.commons.math.distribution.NormalDistributionImpl;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.stats.OnlineSummarizer;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.util.Arrays;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: public class NormalTest {
0:     @Before
0:     public void setUp() {
0:         RandomUtils.useTestSeed();
1:     }
1: 
0:     @Test
0:     public void testOffset() {
0:         OnlineSummarizer s = new OnlineSummarizer();
0:         Sampler<Double> sampler = new Normal(2, 5);
0:         for (int i = 0; i < 10001; i++) {
0:             s.add(sampler.sample());
1:         }
1: 
0:         assertEquals(String.format("m = %.3f, sd = %.3f", s.getMean(), s.getSD()), 2, s.getMean(), 0.04 * s.getSD());
0:         assertEquals(5, s.getSD(), 0.12);
1:     }
1: 
0:     @Test
0:     public void testSample() throws MathException {
0:         double[] data = new double[10001];
0:         Sampler<Double> sampler = new Normal();
0:         for (int i = 0; i < 10001; i++) {
0:             data[i] = sampler.sample();
1:         }
0:         Arrays.sort(data);
1: 
0:         NormalDistribution reference = new NormalDistributionImpl();
1: 
0:         assertEquals("Median", reference.inverseCumulativeProbability(0.5), data[5000], 0.04);
1:     }
1: }
============================================================================