1:e6b4e35: /*
1:e6b4e35:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6b4e35:  * contributor license agreements.  See the NOTICE file distributed with
1:e6b4e35:  * this work for additional information regarding copyright ownership.
1:e6b4e35:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6b4e35:  * (the "License"); you may not use this file except in compliance with
1:e6b4e35:  * the License.  You may obtain a copy of the License at
1:e6b4e35:  *
1:e6b4e35:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e6b4e35:  *
1:e6b4e35:  * Unless required by applicable law or agreed to in writing, software
1:e6b4e35:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6b4e35:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6b4e35:  * See the License for the specific language governing permissions and
1:e6b4e35:  * limitations under the License.
1:e6b4e35:  */
1:e6b4e35: 
1:e6b4e35: package org.apache.mahout.math.stats;
1:e6b4e35: 
1:e6b4e35: import com.google.common.collect.Maps;
1:02f8694: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
1:e6b4e35: 
1:02f8694: import java.io.DataInput;
1:02f8694: import java.io.DataOutput;
1:02f8694: import java.io.IOException;
1:e6b4e35: import java.util.Map;
1:e6b4e35: 
1:e6b4e35: /**
1:e6b4e35:  * Implements a variant on AUC where the result returned is an average of several AUC measurements
1:e6b4e35:  * made on sub-groups of the overall data.  Controlling for the grouping factor allows the effects
1:e6b4e35:  * of the grouping factor on the model to be ignored.  This is useful, for instance, when using a
1:e6b4e35:  * classifier as a click prediction engine.  In that case you want AUC to refer only to the ranking
1:e6b4e35:  * of items for a particular user, not to the discrimination of users from each other.  Grouping by
1:e6b4e35:  * user (or user cluster) helps avoid optimizing for the wrong quality.
1:e6b4e35:  */
1:e6b4e35: public class GroupedOnlineAuc implements OnlineAuc {
1:049e7dc:   private final Map<String, OnlineAuc> map = Maps.newHashMap();
1:e6b4e35:   private GlobalOnlineAuc.ReplacementPolicy policy;
1:e6b4e35:   private int windowSize;
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public double addSample(int category, String groupKey, double score) {
1:e6b4e35:     if (groupKey == null) {
1:e6b4e35:       addSample(category, score);
1:e6b4e35:     }
1:e6b4e35:     
1:e6b4e35:     OnlineAuc group = map.get(groupKey);
1:e6b4e35:     if (group == null) {
1:e6b4e35:       group = new GlobalOnlineAuc();
1:e6b4e35:       if (policy != null) {
1:e6b4e35:         group.setPolicy(policy);
1:e6b4e35:       }
1:e6b4e35:       if (windowSize > 0) {
1:e6b4e35:         group.setWindowSize(windowSize);
1:e6b4e35:       }
1:e6b4e35:       map.put(groupKey, group);
1:e6b4e35:     }
1:e6b4e35:     return group.addSample(category, score);
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public double addSample(int category, double score) {
1:e6b4e35:     throw new UnsupportedOperationException("Can't add to " + this.getClass() + " without group key");
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public double auc() {
1:e6b4e35:     double sum = 0;
1:e6b4e35:     for (OnlineAuc auc : map.values()) {
1:e6b4e35:       sum += auc.auc();
1:e6b4e35:     }
1:e6b4e35:     return sum / map.size();
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public void setPolicy(GlobalOnlineAuc.ReplacementPolicy policy) {
1:e6b4e35:     this.policy = policy;
1:e6b4e35:     for (OnlineAuc auc : map.values()) {
1:e6b4e35:       auc.setPolicy(policy);
1:e6b4e35:     }
1:e6b4e35:   }
1:e6b4e35: 
1:e6b4e35:   @Override
1:e6b4e35:   public void setWindowSize(int windowSize) {
1:e6b4e35:     this.windowSize = windowSize;
1:e6b4e35:     for (OnlineAuc auc : map.values()) {
1:e6b4e35:       auc.setWindowSize(windowSize);
1:e6b4e35:     }
1:e6b4e35:   }
1:02f8694: 
1:02f8694:   @Override
1:02f8694:   public void write(DataOutput out) throws IOException {
1:02f8694:     out.writeInt(map.size());
1:b16c260:     for (Map.Entry<String,OnlineAuc> entry : map.entrySet()) {
1:b16c260:       out.writeUTF(entry.getKey());
1:b16c260:       PolymorphicWritable.write(out, entry.getValue());
1:02f8694:     }
1:02f8694:     out.writeInt(policy.ordinal());
1:02f8694:     out.writeInt(windowSize);
1:02f8694:   }
1:02f8694: 
1:02f8694:   @Override
1:02f8694:   public void readFields(DataInput in) throws IOException {
1:02f8694:     int n = in.readInt();
1:02f8694:     map.clear();
1:02f8694:     for (int i = 0; i < n; i++) {
1:02f8694:       String key = in.readUTF();
1:02f8694:       map.put(key, PolymorphicWritable.read(in, OnlineAuc.class));
1:02f8694:     }
1:02f8694:     policy = GlobalOnlineAuc.ReplacementPolicy.values()[in.readInt()];
1:02f8694:     windowSize = in.readInt();
1:02f8694:   }
1:e6b4e35: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:     for (Map.Entry<String,OnlineAuc> entry : map.entrySet()) {
1:       out.writeUTF(entry.getKey());
1:       PolymorphicWritable.write(out, entry.getValue());
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1:   private final Map<String, OnlineAuc> map = Maps.newHashMap();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:02f8694
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeInt(map.size());
0:     for (String key : map.keySet()) {
0:       out.writeUTF(key);
0:       PolymorphicWritable.write(out, map.get(key));
1:     }
1:     out.writeInt(policy.ordinal());
1:     out.writeInt(windowSize);
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     int n = in.readInt();
1:     map.clear();
1:     for (int i = 0; i < n; i++) {
1:       String key = in.readUTF();
1:       map.put(key, PolymorphicWritable.read(in, OnlineAuc.class));
1:     }
1:     policy = GlobalOnlineAuc.ReplacementPolicy.values()[in.readInt()];
1:     windowSize = in.readInt();
1:   }
commit:e6b4e35
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.stats;
1: 
1: import com.google.common.collect.Maps;
1: 
1: import java.util.Map;
1: 
1: /**
1:  * Implements a variant on AUC where the result returned is an average of several AUC measurements
1:  * made on sub-groups of the overall data.  Controlling for the grouping factor allows the effects
1:  * of the grouping factor on the model to be ignored.  This is useful, for instance, when using a
1:  * classifier as a click prediction engine.  In that case you want AUC to refer only to the ranking
1:  * of items for a particular user, not to the discrimination of users from each other.  Grouping by
1:  * user (or user cluster) helps avoid optimizing for the wrong quality.
1:  */
1: public class GroupedOnlineAuc implements OnlineAuc {
0:   private Map<String, OnlineAuc> map = Maps.newHashMap();
1:   private GlobalOnlineAuc.ReplacementPolicy policy;
1:   private int windowSize;
1: 
1:   @Override
1:   public double addSample(int category, String groupKey, double score) {
1:     if (groupKey == null) {
1:       addSample(category, score);
1:     }
1:     
1:     OnlineAuc group = map.get(groupKey);
1:     if (group == null) {
1:       group = new GlobalOnlineAuc();
1:       if (policy != null) {
1:         group.setPolicy(policy);
1:       }
1:       if (windowSize > 0) {
1:         group.setWindowSize(windowSize);
1:       }
1:       map.put(groupKey, group);
1:     }
1:     return group.addSample(category, score);
1:   }
1: 
1:   @Override
1:   public double addSample(int category, double score) {
1:     throw new UnsupportedOperationException("Can't add to " + this.getClass() + " without group key");
1:   }
1: 
1:   @Override
1:   public double auc() {
1:     double sum = 0;
1:     for (OnlineAuc auc : map.values()) {
1:       sum += auc.auc();
1:     }
1:     return sum / map.size();
1:   }
1: 
1:   @Override
1:   public void setPolicy(GlobalOnlineAuc.ReplacementPolicy policy) {
1:     this.policy = policy;
1:     for (OnlineAuc auc : map.values()) {
1:       auc.setPolicy(policy);
1:     }
1:   }
1: 
1:   @Override
1:   public void setWindowSize(int windowSize) {
1:     this.windowSize = windowSize;
1:     for (OnlineAuc auc : map.values()) {
1:       auc.setWindowSize(windowSize);
1:     }
1:   }
1: }
============================================================================