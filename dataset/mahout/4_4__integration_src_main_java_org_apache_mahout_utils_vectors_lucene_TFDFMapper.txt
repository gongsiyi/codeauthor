1:db362c2: /**
1:db362c2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:db362c2:  * contributor license agreements.  See the NOTICE file distributed with
1:db362c2:  * this work for additional information regarding copyright ownership.
1:db362c2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:db362c2:  * (the "License"); you may not use this file except in compliance with
1:db362c2:  * the License.  You may obtain a copy of the License at
1:db362c2:  *
1:db362c2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:db362c2:  *
1:db362c2:  * Unless required by applicable law or agreed to in writing, software
1:db362c2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:db362c2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db362c2:  * See the License for the specific language governing permissions and
1:db362c2:  * limitations under the License.
1:db362c2:  */
3:db362c2: 
1:db362c2: package org.apache.mahout.utils.vectors.lucene;
1:db362c2: 
1:6a4942c: import org.apache.lucene.util.BytesRef;
1:b3f6857: import org.apache.mahout.math.RandomAccessSparseVector;
1:a435efb: import org.apache.mahout.math.Vector;
1:db362c2: import org.apache.mahout.utils.vectors.TermEntry;
1:db362c2: import org.apache.mahout.utils.vectors.TermInfo;
1:10d6663: import org.apache.mahout.vectorizer.Weight;
1:db362c2: 
1:db362c2: 
1:db362c2: /**
1:db362c2:  * Not thread-safe
1:db362c2:  */
1:6a4942c: public class TFDFMapper  {
1:db362c2: 
1:758cc1b:   private Vector vector;
1:db362c2:   
1:758cc1b:   private final Weight weight;
1:6a4942c:   private long numTerms;
1:758cc1b:   private final TermInfo termInfo;
1:db362c2:   private String field;
1:758cc1b:   private final int numDocs;
1:db362c2:   
1:6a4942c:   public TFDFMapper(int numDocs, Weight weight, TermInfo termInfo) {
1:db362c2:     this.weight = weight;
1:db362c2:     this.termInfo = termInfo;
1:6a4942c:     this.numDocs = numDocs;
2:db362c2:   }
1:6a4942c: 
1:6a4942c:   public void setExpectations(String field, long numTerms) {
1:db362c2:     this.field = field;
1:b3f6857:     vector = new RandomAccessSparseVector(termInfo.totalTerms(field));
1:db362c2:     this.numTerms = numTerms;
1:db362c2:   }
1:db362c2:   
1:6a4942c:   public void map(BytesRef term, int frequency) {
1:6d16230:     TermEntry entry = termInfo.getTermEntry(field, term.utf8ToString());
1:758cc1b:     if (entry != null) {
1:6a4942c:       vector.setQuick(entry.getTermIdx(), weight.calculate(frequency, entry.getDocFreq(), (int)numTerms, numDocs));
1:db362c2:     }
1:db362c2:   }
1:db362c2:   
1:6a4942c:   public Vector getVector() {
1:6d16230:     return this.vector;
1:db362c2:   }
1:db362c2:   
1:db362c2: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     TermEntry entry = termInfo.getTermEntry(field, term.utf8ToString());
1:     return this.vector;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:6a4942c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.util.BytesRef;
/////////////////////////////////////////////////////////////////////////
1: public class TFDFMapper  {
1:   private long numTerms;
1:   public TFDFMapper(int numDocs, Weight weight, TermInfo termInfo) {
1:     this.numDocs = numDocs;
1: 
1:   public void setExpectations(String field, long numTerms) {
1:   public void map(BytesRef term, int frequency) {
0:     TermEntry entry = termInfo.getTermEntry(field, term.utf8ToString() );
1:       vector.setQuick(entry.getTermIdx(), weight.calculate(frequency, entry.getDocFreq(), (int)numTerms, numDocs));
1:   public Vector getVector() {
0:       return this.vector;
commit:a435efb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.SparseVector;
1: import org.apache.mahout.math.Vector;
commit:4319ae3
/////////////////////////////////////////////////////////////////////////
0:     if(entry != null)
0:       vector.setQuick(entry.termIdx, weight.calculate(frequency, entry.docFreq, numTerms, numDocs));
commit:db362c2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors.lucene;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: import org.apache.lucene.index.IndexReader;
0: import org.apache.lucene.index.TermVectorOffsetInfo;
0: import org.apache.mahout.matrix.SparseVector;
0: import org.apache.mahout.matrix.Vector;
0: import org.apache.mahout.utils.vectors.Weight;
1: import org.apache.mahout.utils.vectors.TermEntry;
1: import org.apache.mahout.utils.vectors.TermInfo;
1: 
1: 
1: /**
1:  * Not thread-safe
1:  */
0: public class TFDFMapper extends VectorMapper {
1: 
0:   public static final int DEFAULT_CACHE_SIZE = 256;
1: 
0:   protected IndexReader reader;
0:   protected Vector vector;
1: 
0:   protected Weight weight;
0:   protected int numTerms;
0:   protected TermInfo termInfo;
1:   private String field;
0:   private int numDocs;
1: 
0:   public TFDFMapper(IndexReader reader, Weight weight, TermInfo termInfo) {
0:     this.reader = reader;
1:     this.weight = weight;
1:     this.termInfo = termInfo;
0:     this.numDocs = reader.numDocs();
1:   }
1: 
0:   public Vector getVector() {
0:     return vector;
1:   }
1: 
0:   @Override
0:   public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {
1:     this.field = field;
0:     vector = new SparseVector(termInfo.totalTerms(field));
1:     this.numTerms = numTerms;
1:   }
1: 
0:   @Override
0:   public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {
0:     TermEntry entry = termInfo.getTermEntry(field, term);
0:     vector.setQuick(entry.termIdx, weight.calculate(frequency, entry.docFreq, numTerms, numDocs));
1:   }
1: 
0:   @Override
0:   public boolean isIgnoringPositions() {
0:     return true;
1:   }
1: 
0:   @Override
0:   public boolean isIgnoringOffsets() {
0:     return true;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:d023fad
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
0:       vector.setQuick(entry.getTermIdx(), weight.calculate(frequency, entry.getDocFreq(), numTerms, numDocs));
commit:b3f6857
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.RandomAccessSparseVector;
/////////////////////////////////////////////////////////////////////////
1:     vector = new RandomAccessSparseVector(termInfo.totalTerms(field));
commit:26bca69
/////////////////////////////////////////////////////////////////////////
commit:cb030aa
/////////////////////////////////////////////////////////////////////////
0:   //private final IndexReader reader; // TODO never used?
/////////////////////////////////////////////////////////////////////////
0:     //this.reader = reader;
/////////////////////////////////////////////////////////////////////////
0: 
0:   @Override
0:   public void setDocumentNumber(int documentNumber) {
0:     this.vector = null;
0:     super.setDocumentNumber(documentNumber);
0:   }
0: 
0:   
commit:254af09
/////////////////////////////////////////////////////////////////////////
0:   //public static final int DEFAULT_CACHE_SIZE = 256;
commit:758cc1b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.lucene;
0: 
/////////////////////////////////////////////////////////////////////////
0:   private final IndexReader reader; // TODO never used?
1:   private Vector vector;
1:   private final Weight weight;
0:   private int numTerms;
1:   private final TermInfo termInfo;
1:   private final int numDocs;
/////////////////////////////////////////////////////////////////////////
0:   @Override
/////////////////////////////////////////////////////////////////////////
1:     if (entry != null) {
0:     }
author:Robin Anil
-------------------------------------------------------------------------------
commit:10d6663
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.vectorizer.Weight;
commit:233d93d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.utils.vectors.Weight;
0:   
0:   
0:   
0:   
0:   
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:   
============================================================================