1:7a9e99e: /*
1:7a9e99e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9e99e:  * contributor license agreements.  See the NOTICE file distributed with
1:7a9e99e:  * this work for additional information regarding copyright ownership.
1:7a9e99e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a9e99e:  * (the "License"); you may not use this file except in compliance with
1:7a9e99e:  * the License.  You may obtain a copy of the License at
1:7a9e99e:  *
1:7a9e99e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7a9e99e:  *
1:7a9e99e:  * Unless required by applicable law or agreed to in writing, software
1:7a9e99e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a9e99e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9e99e:  * See the License for the specific language governing permissions and
1:7a9e99e:  * limitations under the License.
1:7a9e99e:  */
2:7a9e99e: 
1:d25dd20: package org.apache.mahout.cf.taste.example.kddcup.track1;
1:7a9e99e: 
1:7a9e99e: import java.util.Collection;
1:7a9e99e: import java.util.List;
1:7a9e99e: 
1:7a9e99e: import org.apache.mahout.cf.taste.common.Refreshable;
1:7a9e99e: import org.apache.mahout.cf.taste.common.TasteException;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
1:17988ce: import org.apache.mahout.cf.taste.impl.similarity.UncenteredCosineSimilarity;
1:7a9e99e: import org.apache.mahout.cf.taste.model.DataModel;
1:7a9e99e: import org.apache.mahout.cf.taste.recommender.IDRescorer;
1:7a9e99e: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:7a9e99e: import org.apache.mahout.cf.taste.recommender.Recommender;
1:7a9e99e: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1:7a9e99e: 
1:d25dd20: public final class Track1Recommender implements Recommender {
1:7a9e99e: 
1:7a9e99e:   private final Recommender recommender;
1:7a9e99e: 
1:d25dd20:   public Track1Recommender(DataModel dataModel) throws TasteException {
1:7a9e99e:     // Change this to whatever you like!
1:17988ce:     ItemSimilarity similarity = new UncenteredCosineSimilarity(dataModel);
1:7a9e99e:     recommender = new GenericItemBasedRecommender(dataModel, similarity);
2:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e:   @Override
1:7a9e99e:   public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
1:7a9e99e:     return recommender.recommend(userID, howMany);
1:7a9e99e:   }
1:d141c8e: 
1:d141c8e:   @Override
1:d141c8e:   public List<RecommendedItem> recommend(long userID, int howMany, boolean includeKnownItems) throws TasteException {
1:d141c8e:     return recommend(userID, howMany, null, includeKnownItems);
1:d141c8e:   }
1:d141c8e: 
1:7a9e99e:   @Override
1:7a9e99e:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
1:d141c8e:     return recommender.recommend(userID, howMany, rescorer, false);
1:d141c8e:   }
1:d141c8e:   
1:d141c8e:   @Override
1:d141c8e:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
1:d141c8e:     throws TasteException {
1:d141c8e:     return recommender.recommend(userID, howMany, rescorer, includeKnownItems);
1:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e:   @Override
1:7a9e99e:   public float estimatePreference(long userID, long itemID) throws TasteException {
1:7a9e99e:     return recommender.estimatePreference(userID, itemID);
1:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e:   @Override
1:7a9e99e:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:7a9e99e:     recommender.setPreference(userID, itemID, value);
1:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e:   @Override
1:7a9e99e:   public void removePreference(long userID, long itemID) throws TasteException {
1:7a9e99e:     recommender.removePreference(userID, itemID);
1:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e:   @Override
1:7a9e99e:   public DataModel getDataModel() {
1:7a9e99e:     return recommender.getDataModel();
1:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e:   @Override
1:7a9e99e:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:7a9e99e:     recommender.refresh(alreadyRefreshed);
1:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e:   @Override
1:7a9e99e:   public String toString() {
1:7a9e99e:     return "Track1Recommender[recommender:" + recommender + ']';
1:3c22856:   }
1:7a9e99e:   
1:7a9e99e: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d141c8e
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public List<RecommendedItem> recommend(long userID, int howMany, boolean includeKnownItems) throws TasteException {
1:     return recommend(userID, howMany, null, includeKnownItems);
1:   }
1: 
1:     return recommender.recommend(userID, howMany, rescorer, false);
1:   }
1:   
1:   @Override
1:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
1:     throws TasteException {
1:     return recommender.recommend(userID, howMany, rescorer, includeKnownItems);
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:b16c260
/////////////////////////////////////////////////////////////////////////
commit:17988ce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.similarity.UncenteredCosineSimilarity;
/////////////////////////////////////////////////////////////////////////
1:     ItemSimilarity similarity = new UncenteredCosineSimilarity(dataModel);
commit:d25dd20
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.example.kddcup.track1;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity;
1: public final class Track1Recommender implements Recommender {
1:   public Track1Recommender(DataModel dataModel) throws TasteException {
0:     ItemSimilarity similarity = new CachingItemSimilarity(new LogLikelihoodSimilarity(dataModel), dataModel);
commit:7a9e99e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.cf.taste.example.kddcup;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
0: import org.apache.mahout.cf.taste.impl.similarity.CachingItemSimilarity;
0: import org.apache.mahout.cf.taste.impl.similarity.UncenteredCosineSimilarity;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.recommender.IDRescorer;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: import org.apache.mahout.cf.taste.recommender.Recommender;
1: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1: 
0: public final class KDDCupRecommender implements Recommender {
1: 
1:   private final Recommender recommender;
1: 
0:   public KDDCupRecommender(DataModel dataModel) throws TasteException {
1:     // Change this to whatever you like!
0:     ItemSimilarity similarity = new CachingItemSimilarity(new UncenteredCosineSimilarity(dataModel), dataModel);
1:     recommender = new GenericItemBasedRecommender(dataModel, similarity);
1:   }
1:   
1:   @Override
1:   public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
1:     return recommender.recommend(userID, howMany);
1:   }
1:   
1:   @Override
1:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
0:     return recommender.recommend(userID, howMany, rescorer);
1:   }
1:   
1:   @Override
1:   public float estimatePreference(long userID, long itemID) throws TasteException {
1:     return recommender.estimatePreference(userID, itemID);
1:   }
1:   
1:   @Override
1:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:     recommender.setPreference(userID, itemID, value);
1:   }
1:   
1:   @Override
1:   public void removePreference(long userID, long itemID) throws TasteException {
1:     recommender.removePreference(userID, itemID);
1:   }
1:   
1:   @Override
1:   public DataModel getDataModel() {
1:     return recommender.getDataModel();
1:   }
1:   
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     recommender.refresh(alreadyRefreshed);
1:   }
1:   
1:   @Override
1:   public String toString() {
1:     return "Track1Recommender[recommender:" + recommender + ']';
1:   }
1:   
1: }
============================================================================