1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
1:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
1:8c37a84:  */
6:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.node;
1:8c37a84: 
1:67a531e: import org.apache.commons.lang3.ArrayUtils;
1:d6aba1a: import org.apache.mahout.classifier.df.DFUtils;
1:d6aba1a: import org.apache.mahout.classifier.df.data.Instance;
1:d6aba1a: 
1:8c37a84: import java.io.DataInput;
1:8c37a84: import java.io.DataOutput;
1:8c37a84: import java.io.IOException;
1:8c37a84: import java.util.Arrays;
1:1ffa3a4: @Deprecated
1:8c37a84: public class CategoricalNode extends Node {
1:1608f61: 
1:8c37a84:   private int attr;
1:8c37a84:   private double[] values;
1:8c37a84:   private Node[] childs;
1:8c37a84:   
1:1608f61:   public CategoricalNode() {
1:1608f61:   }
1:8c37a84:   
1:8c37a84:   public CategoricalNode(int attr, double[] values, Node[] childs) {
1:8c37a84:     this.attr = attr;
1:8c37a84:     this.values = values;
1:8c37a84:     this.childs = childs;
1:8c37a84:   }
1:8c37a84:   
1:8547de7:   @Override
1:e9cc323:   public double classify(Instance instance) {
1:8547de7:     int index = ArrayUtils.indexOf(values, instance.get(attr));
1:8c37a84:     if (index == -1) {
1:8c37a84:       // value not available, we cannot predict
1:1608f61:       return Double.NaN;
1:8c37a84:     }
1:8c37a84:     return childs[index].classify(instance);
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public long maxDepth() {
1:8c37a84:     long max = 0;
1:8c37a84:     
1:8c37a84:     for (Node child : childs) {
1:8c37a84:       long depth = child.maxDepth();
1:ad11134:       if (depth > max) {
1:8c37a84:         max = depth;
1:8c37a84:       }
1:8c37a84:     }
1:8c37a84:     
1:8c37a84:     return 1 + max;
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public long nbNodes() {
1:8c37a84:     long nbNodes = 1;
1:8c37a84:     
1:8c37a84:     for (Node child : childs) {
1:8c37a84:       nbNodes += child.nbNodes();
1:8c37a84:     }
1:8c37a84:     
1:8c37a84:     return nbNodes;
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:2bc819e:   protected Type getType() {
1:2bc819e:     return Type.CATEGORICAL;
1:2bc819e:   }
1:2bc819e:   
1:2bc819e:   @Override
1:8c37a84:   public boolean equals(Object obj) {
1:ad11134:     if (this == obj) {
1:8c37a84:       return true;
2:ad11134:     }
1:4194a28:     if (!(obj instanceof CategoricalNode)) {
1:8c37a84:       return false;
1:ad11134:     }
1:8c37a84:     
1:8c37a84:     CategoricalNode node = (CategoricalNode) obj;
1:8c37a84:     
1:39fe224:     return attr == node.attr && Arrays.equals(values, node.values) && Arrays.equals(childs, node.childs);
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8547de7:   public int hashCode() {
1:8547de7:     int hashCode = attr;
1:8547de7:     for (double value : values) {
1:8547de7:       hashCode = 31 * hashCode + (int) Double.doubleToLongBits(value);
1:8547de7:     }
1:8547de7:     for (Node node : childs) {
1:8547de7:       hashCode = 31 * hashCode + node.hashCode();
1:8547de7:     }
1:8547de7:     return hashCode;
1:8547de7:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   protected String getString() {
1:8547de7:     StringBuilder buffer = new StringBuilder();
1:8c37a84:     
1:ad11134:     for (Node child : childs) {
1:8c37a84:       buffer.append(child).append(',');
1:8c37a84:     }
1:8c37a84:     
1:8c37a84:     return buffer.toString();
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public void readFields(DataInput in) throws IOException {
1:8c37a84:     attr = in.readInt();
1:8c37a84:     values = DFUtils.readDoubleArray(in);
1:8c37a84:     childs = DFUtils.readNodeArray(in);
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   protected void writeNode(DataOutput out) throws IOException {
1:8c37a84:     out.writeInt(attr);
1:8c37a84:     DFUtils.writeArray(out, values);
1:8c37a84:     DFUtils.writeArray(out, childs);
1:8c37a84:   }
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.ArrayUtils;
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1608f61
/////////////////////////////////////////////////////////////////////////
1: 
1:   public CategoricalNode() {
1:   }
/////////////////////////////////////////////////////////////////////////
1:       return Double.NaN;
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:     if (!(obj instanceof CategoricalNode)) {
commit:39fe224
/////////////////////////////////////////////////////////////////////////
0:     if (obj == null || !(obj instanceof CategoricalNode)) {
1:     return attr == node.attr && Arrays.equals(values, node.values) && Arrays.equals(childs, node.childs);
commit:2bc819e
/////////////////////////////////////////////////////////////////////////
1:   protected Type getType() {
1:     return Type.CATEGORICAL;
1:   }
1: 
1:   @Override
commit:8547de7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.ArrayUtils;
/////////////////////////////////////////////////////////////////////////
1:     int index = ArrayUtils.indexOf(values, instance.get(attr));
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public int hashCode() {
1:     int hashCode = attr;
1:     for (double value : values) {
1:       hashCode = 31 * hashCode + (int) Double.doubleToLongBits(value);
1:     }
1:     for (Node node : childs) {
1:       hashCode = 31 * hashCode + node.hashCode();
1:     }
1:     return hashCode;
1:   }
1:     StringBuilder buffer = new StringBuilder();
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.ArrayUtils;
1: import org.apache.mahout.classifier.df.DFUtils;
1: import org.apache.mahout.classifier.df.data.Instance;
1: 
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
1:   public double classify(Instance instance) {
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.node;
1: 
0: import static org.apache.commons.lang.ArrayUtils.indexOf;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.Arrays;
1: 
0: import org.apache.mahout.df.DFUtils;
0: import org.apache.mahout.df.data.Instance;
1: 
1: public class CategoricalNode extends Node {
1:   private int attr;
1: 
1:   private double[] values;
1: 
1:   private Node[] childs;
1: 
0:   public CategoricalNode() {
1:   }
1:   
1:   public CategoricalNode(int attr, double[] values, Node[] childs) {
1:     this.attr = attr;
1:     this.values = values;
1:     this.childs = childs;
1:   }
1: 
1:   @Override
0:   public int classify(Instance instance) {
0:     int index = indexOf(values, instance.get(attr));
1:     if (index == -1) {
1:       // value not available, we cannot predict
0:       return -1;
1:     }
1:     return childs[index].classify(instance);
1:   }
1: 
1:   @Override
1:   public long maxDepth() {
1:     long max = 0;
1: 
1:     for (Node child : childs) {
1:       long depth = child.maxDepth();
0:       if (depth > max)
1:         max = depth;
1:     }
1: 
1:     return 1 + max;
1:   }
1: 
1:   @Override
1:   public long nbNodes() {
1:     long nbNodes = 1;
1: 
1:     for (Node child : childs) {
1:       nbNodes += child.nbNodes();
1:     }
1: 
1:     return nbNodes;
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
0:     if (this == obj)
1:       return true;
0:     if (obj == null || !(obj instanceof CategoricalNode))
1:       return false;
1: 
1:     CategoricalNode node = (CategoricalNode) obj;
1: 
0:     return attr == node.attr && Arrays.equals(values, node.values)
0:         && Arrays.equals(childs, node.childs);
1:   }
1: 
1:   
1:   @Override
1:   protected String getString() {
0:     StringBuffer buffer = new StringBuffer();
1:     
0:     for (Node child:childs) {
1:       buffer.append(child).append(',');
1:     }
1:     
1:     return buffer.toString();
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     attr = in.readInt();
1:     values = DFUtils.readDoubleArray(in);
1:     childs = DFUtils.readNodeArray(in);
1:   }
1: 
1:   @Override
1:   protected void writeNode(DataOutput out) throws IOException {
1:     out.writeInt(attr);
1:     DFUtils.writeArray(out, values);
1:     DFUtils.writeArray(out, childs);
1:   }
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.node;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.classifier.df.DFUtils;
0: import org.apache.mahout.classifier.df.data.Instance;
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
0:   public CategoricalNode() { }
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   public CategoricalNode() {}
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:     
1:       if (depth > max) {
1:       }
0:     
0:   
0:     
0:     
0:   
0:   
1:     if (this == obj) {
1:     }
0:     if ((obj == null) || !(obj instanceof CategoricalNode)) {
1:     }
0:     
0:     
0:     return (attr == node.attr) && Arrays.equals(values, node.values) && Arrays.equals(childs, node.childs);
0:   
/////////////////////////////////////////////////////////////////////////
1:     for (Node child : childs) {
0:   
0:   
============================================================================