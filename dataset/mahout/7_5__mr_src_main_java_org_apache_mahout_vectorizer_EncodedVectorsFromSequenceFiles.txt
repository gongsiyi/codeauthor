1:faa82ce: /**
1:faa82ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:faa82ce:  * contributor license agreements.  See the NOTICE file distributed with
1:faa82ce:  * this work for additional information regarding copyright ownership.
1:faa82ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:faa82ce:  * (the "License"); you may not use this file except in compliance with
1:faa82ce:  * the License.  You may obtain a copy of the License at
1:faa82ce:  *
1:faa82ce:  *     http://www.apache.org/licenses/LICENSE-2.0
1:faa82ce:  *
1:faa82ce:  * Unless required by applicable law or agreed to in writing, software
1:faa82ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:faa82ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:faa82ce:  * See the License for the specific language governing permissions and
1:faa82ce:  * limitations under the License.
1:faa82ce:  */
4:faa82ce: 
1:faa82ce: package org.apache.mahout.vectorizer;
1:faa82ce: 
1:faa82ce: import org.apache.hadoop.conf.Configuration;
1:faa82ce: import org.apache.hadoop.fs.Path;
1:faa82ce: import org.apache.hadoop.util.ToolRunner;
1:faa82ce: import org.apache.lucene.analysis.Analyzer;
1:faa82ce: import org.apache.mahout.common.AbstractJob;
1:faa82ce: import org.apache.mahout.common.ClassUtils;
1:faa82ce: import org.apache.mahout.common.HadoopUtil;
1:faa82ce: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1:faa82ce: import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
1:faa82ce: import org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder;
1:faa82ce: 
1:faa82ce: /**
1:faa82ce:  * Converts a given set of sequence files into SparseVectors
1:faa82ce:  */
1:faa82ce: public final class EncodedVectorsFromSequenceFiles extends AbstractJob {
1:faa82ce: 
1:faa82ce:   public static void main(String[] args) throws Exception {
1:86b1196:     ToolRunner.run(new Configuration(), new EncodedVectorsFromSequenceFiles(), args);
2:faa82ce:   }
1:faa82ce: 
1:faa82ce:   @Override
1:faa82ce:   public int run(String[] args) throws Exception {
1:faa82ce:     addInputOption();
1:faa82ce:     addOutputOption();
1:2e4d306:     addOption(DefaultOptionCreator.analyzerOption().create());
1:229aeff:     addOption(buildOption("sequentialAccessVector", "seq",
1:6d16230:                           "(Optional) Whether output vectors should be SequentialAccessVectors. "
1:6d16230:                               + "If set true else false",
1:229aeff:                           false, false, null));
1:229aeff:     addOption(buildOption("namedVector", "nv",
1:229aeff:                           "Create named vectors using the key.  False by default", false, false, null));
1:229aeff:     addOption("cardinality", "c",
1:229aeff:               "The cardinality to use for creating the vectors.  Default is 5000", "5000");
1:229aeff:     addOption("encoderFieldName", "en",
1:6d16230:               "The name of the encoder to be passed to the FeatureVectorEncoder constructor. Default is text. "
1:6d16230:                   + "Note this is not the class name of a FeatureValueEncoder, but is instead the construction "
1:6d16230:                   + "argument.",
1:229aeff:               "text");
1:229aeff:     addOption("encoderClass", "ec",
1:229aeff:               "The class name of the encoder to be used. Default is " + LuceneTextValueEncoder.class.getName(),
1:229aeff:               LuceneTextValueEncoder.class.getName());
1:faa82ce:     addOption(DefaultOptionCreator.overwriteOption().create());
1:faa82ce:     if (parseArguments(args) == null) {
1:faa82ce:       return -1;
1:faa82ce:     }
1:faa82ce: 
1:faa82ce:     Path input = getInputPath();
1:faa82ce:     Path output = getOutputPath();
1:faa82ce: 
1:faa82ce:     if (hasOption(DefaultOptionCreator.OVERWRITE_OPTION)) {
1:faa82ce:       HadoopUtil.delete(getConf(), output);
1:faa82ce:     }
1:faa82ce: 
1:2e4d306:     Class<? extends Analyzer> analyzerClass = getAnalyzerClassFromOption();
1:faa82ce: 
1:faa82ce:     Configuration conf = getConf();
1:faa82ce: 
1:faa82ce:     boolean sequentialAccessOutput = hasOption("sequentialAccessVector");
1:faa82ce: 
1:faa82ce:     boolean namedVectors = hasOption("namedVector");
1:faa82ce:     int cardinality = 5000;
1:e64dd36:     if (hasOption("cardinality")) {
1:faa82ce:       cardinality = Integer.parseInt(getOption("cardinality"));
1:faa82ce:     }
1:faa82ce:     String encoderName = "text";
1:e64dd36:     if (hasOption("encoderFieldName")) {
1:faa82ce:       encoderName = getOption("encoderFieldName");
1:faa82ce:     }
1:faa82ce:     String encoderClass = LuceneTextValueEncoder.class.getName();
1:e64dd36:     if (hasOption("encoderClass")) {
1:faa82ce:       encoderClass = getOption("encoderClass");
1:4841efb:       ClassUtils.instantiateAs(encoderClass, FeatureVectorEncoder.class, new Class[] { String.class },
1:4841efb:           new Object[] { encoderName }); //try instantiating it
1:faa82ce:     }
1:faa82ce: 
1:faa82ce:     SimpleTextEncodingVectorizer vectorizer = new SimpleTextEncodingVectorizer();
1:4841efb:     VectorizerConfig config = new VectorizerConfig(conf, analyzerClass.getName(), encoderClass, encoderName,
1:4841efb:         sequentialAccessOutput, namedVectors, cardinality);
1:faa82ce: 
1:faa82ce:     vectorizer.createVectors(input, output, config);
1:faa82ce: 
1:faa82ce:     return 0;
1:faa82ce:   }
1:faa82ce: 
1:faa82ce: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:                           "(Optional) Whether output vectors should be SequentialAccessVectors. "
1:                               + "If set true else false",
1:               "The name of the encoder to be passed to the FeatureVectorEncoder constructor. Default is text. "
1:                   + "Note this is not the class name of a FeatureValueEncoder, but is instead the construction "
1:                   + "argument.",
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1:       ClassUtils.instantiateAs(encoderClass, FeatureVectorEncoder.class, new Class[] { String.class },
1:           new Object[] { encoderName }); //try instantiating it
1:     VectorizerConfig config = new VectorizerConfig(conf, analyzerClass.getName(), encoderClass, encoderName,
1:         sequentialAccessOutput, namedVectors, cardinality);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     addOption(buildOption("sequentialAccessVector", "seq",
0:                           "(Optional) Whether output vectors should be SequentialAccessVectors. " +
0:                               "If set true else false",
1:                           false, false, null));
1:     addOption(buildOption("namedVector", "nv",
1:                           "Create named vectors using the key.  False by default", false, false, null));
1:     addOption("cardinality", "c",
1:               "The cardinality to use for creating the vectors.  Default is 5000", "5000");
1:     addOption("encoderFieldName", "en",
0:               "The name of the encoder to be passed to the FeatureVectorEncoder constructor. Default is text. " +
0:                   "Note this is not the class name of a FeatureValueEncoder, but is instead the construction argument.",
1:               "text");
1:     addOption("encoderClass", "ec",
1:               "The class name of the encoder to be used. Default is " + LuceneTextValueEncoder.class.getName(),
1:               LuceneTextValueEncoder.class.getName());
/////////////////////////////////////////////////////////////////////////
author:Robin Anil
-------------------------------------------------------------------------------
commit:86b1196
/////////////////////////////////////////////////////////////////////////
1:     ToolRunner.run(new Configuration(), new EncodedVectorsFromSequenceFiles(), args);
commit:3beecc0
/////////////////////////////////////////////////////////////////////////
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
0:       ClassUtils.instantiateAs(encoderClass, FeatureVectorEncoder.class, new Class[]{String.class}, new Object[]{encoderName}); //try instantiating it
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     if (hasOption("cardinality")) {
1:     if (hasOption("encoderFieldName")) {
1:     if (hasOption("encoderClass")) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:2e4d306
/////////////////////////////////////////////////////////////////////////
1:     addOption(DefaultOptionCreator.analyzerOption().create());
/////////////////////////////////////////////////////////////////////////
1:     Class<? extends Analyzer> analyzerClass = getAnalyzerClassFromOption();
commit:faa82ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.vectorizer;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.util.ToolRunner;
1: import org.apache.lucene.analysis.Analyzer;
1: import org.apache.mahout.common.AbstractJob;
1: import org.apache.mahout.common.ClassUtils;
1: import org.apache.mahout.common.HadoopUtil;
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1: import org.apache.mahout.vectorizer.encoders.FeatureVectorEncoder;
1: import org.apache.mahout.vectorizer.encoders.LuceneTextValueEncoder;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Converts a given set of sequence files into SparseVectors
1:  */
1: public final class EncodedVectorsFromSequenceFiles extends AbstractJob {
1: 
0:   private static final Logger log = LoggerFactory.getLogger(EncodedVectorsFromSequenceFiles.class);
1: 
1:   public static void main(String[] args) throws Exception {
0:     ToolRunner.run(new EncodedVectorsFromSequenceFiles(), args);
1:   }
1: 
1:   @Override
1:   public int run(String[] args) throws Exception {
1:     addInputOption();
1:     addOutputOption();
0:     addOption("analyzerName", "an", "The class name of the analyzer", DefaultAnalyzer.class.getName());
0:     addOption(buildOption("sequentialAccessVector", "seq", "(Optional) Whether output vectors should be SequentialAccessVectors. If set true else false", false, false, null));
0:     addOption(buildOption("namedVector", "nv", "Create named vectors using the key.  False by default", false, false, null));
0:     addOption("cardinality", "c", "The cardinality to use for creating the vectors.  Default is 5000", String.valueOf(5000));
0:     addOption("encoderFieldName", "en", "The name of the encoder to be passed to the FeatureVectorEncoder constructor.  Default is text.  Note this is not the class name of a FeatureValueEncoder, but is instead the construction argument.", "text");
0:     addOption("encoderClass", "ec", "The class name of the encoder to be used. Default is " + LuceneTextValueEncoder.class.getName(), LuceneTextValueEncoder.class.getName());
1:     addOption(DefaultOptionCreator.overwriteOption().create());
1:     if (parseArguments(args) == null) {
1:       return -1;
1:     }
1: 
1:     Path input = getInputPath();
1:     Path output = getOutputPath();
1: 
1:     if (hasOption(DefaultOptionCreator.OVERWRITE_OPTION)) {
1:       HadoopUtil.delete(getConf(), output);
1:     }
1: 
0:     Class<? extends Analyzer> analyzerClass = DefaultAnalyzer.class;
0:     if (hasOption("analyzerName")) {
0:       String className = getOption("analyzerName").toString();
0:       analyzerClass = Class.forName(className).asSubclass(Analyzer.class);
0:       // try instantiating it, b/c there isn't any point in setting it if
0:       // you can't instantiate it
0:       ClassUtils.instantiateAs(analyzerClass, Analyzer.class);
1:     }
1: 
1: 
1:     Configuration conf = getConf();
1: 
1:     boolean sequentialAccessOutput = hasOption("sequentialAccessVector");
1: 
1: 
1:     boolean namedVectors = hasOption("namedVector");
1:     int cardinality = 5000;
0:     if (hasOption("cardinality")){
1:       cardinality = Integer.parseInt(getOption("cardinality"));
1:     }
1:     String encoderName = "text";
0:     if (hasOption("encoderFieldName")){
1:       encoderName = getOption("encoderFieldName");
1:     }
1:     String encoderClass = LuceneTextValueEncoder.class.getName();
0:     if (hasOption("encoderClass")){
1:       encoderClass = getOption("encoderClass");
0:       ClassUtils.instantiateAs(encoderClass, FeatureVectorEncoder.class, new Class[]{String.class}, new Object[]{encoderName});//try instantiating it
1:     }
1: 
1:     SimpleTextEncodingVectorizer vectorizer = new SimpleTextEncodingVectorizer();
0:     VectorizerConfig config = new VectorizerConfig(conf, analyzerClass.getName(), encoderClass, encoderName, sequentialAccessOutput,
0:             namedVectors, cardinality);
1: 
1:     vectorizer.createVectors(input, output, config);
1: 
1:     return 0;
1:   }
1: 
1: }
============================================================================