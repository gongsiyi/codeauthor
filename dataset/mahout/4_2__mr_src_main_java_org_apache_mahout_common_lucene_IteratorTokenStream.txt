1:a4778a4: /**
1:a4778a4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a4778a4:  * contributor license agreements.  See the NOTICE file distributed with
1:a4778a4:  * this work for additional information regarding copyright ownership.
1:a4778a4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a4778a4:  * (the "License"); you may not use this file except in compliance with
1:a4778a4:  * the License.  You may obtain a copy of the License at
1:a4778a4:  *
1:a4778a4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a4778a4:  *
1:a4778a4:  * Unless required by applicable law or agreed to in writing, software
1:a4778a4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a4778a4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a4778a4:  * See the License for the specific language governing permissions and
1:a4778a4:  * limitations under the License.
1:a4778a4:  */
2:a4778a4: 
1:1499411: package org.apache.mahout.common.lucene;
1:a4778a4: 
1:a4778a4: import org.apache.lucene.analysis.TokenStream;
1:a4778a4: import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
1:a4778a4: 
1:a4778a4: import java.util.Iterator;
1:a4778a4: 
1:a4778a4: /** Used to emit tokens from an input string array in the style of TokenStream */
1:a4778a4: public final class IteratorTokenStream extends TokenStream {
1:a4778a4:   private final CharTermAttribute termAtt;
1:a4778a4:   private final Iterator<String> iterator;
1:a4778a4: 
1:a4778a4:   public IteratorTokenStream(Iterator<String> iterator) {
1:a4778a4:     this.iterator = iterator;
1:a4778a4:     this.termAtt = addAttribute(CharTermAttribute.class);
1:a4778a4:   }
1:a4778a4: 
1:a4778a4:   @Override
1:3d44c1e:   public boolean incrementToken() {
1:a4778a4:     if (iterator.hasNext()) {
1:a4778a4:       clearAttributes();
1:a4778a4:       termAtt.append(iterator.next());
1:a4778a4:       return true;
1:a4778a4:     } else {
1:a4778a4:       return false;
1:a4778a4:     }
1:a4778a4:   }
1:a4778a4: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.common.lucene;
commit:3d44c1e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public boolean incrementToken() {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a4778a4
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.common.lucene;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.lucene.analysis.TokenStream;
1: import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
1: 
1: 
0: import java.io.IOException;
1: import java.util.Iterator;
1: 
1: /** Used to emit tokens from an input string array in the style of TokenStream */
1: public final class IteratorTokenStream extends TokenStream {
1:   private final CharTermAttribute termAtt;
1:   private final Iterator<String> iterator;
1: 
1:   public IteratorTokenStream(Iterator<String> iterator) {
1:     this.iterator = iterator;
1:     this.termAtt = addAttribute(CharTermAttribute.class);
1:   }
1: 
1:   @Override
0:   public boolean incrementToken() throws IOException {
1:     if (iterator.hasNext()) {
1:       clearAttributes();
1:       termAtt.append(iterator.next());
1:       return true;
1:     } else {
1:       return false;
1:     }
1:   }
1: }
============================================================================