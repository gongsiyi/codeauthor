1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:fab9d37: package org.apache.mahout.clustering.streaming.tools;
1:fab9d37: 
1:fab9d37: import java.io.IOException;
1:fab9d37: import java.io.OutputStreamWriter;
1:fab9d37: import java.io.PrintWriter;
1:fab9d37: import java.util.Iterator;
1:fab9d37: 
1:fab9d37: import com.google.common.collect.Iterables;
1:fab9d37: import org.apache.commons.cli2.CommandLine;
1:fab9d37: import org.apache.commons.cli2.Group;
1:fab9d37: import org.apache.commons.cli2.Option;
1:fab9d37: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:fab9d37: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:fab9d37: import org.apache.commons.cli2.builder.GroupBuilder;
1:fab9d37: import org.apache.commons.cli2.commandline.Parser;
1:fab9d37: import org.apache.commons.cli2.util.HelpFormatter;
1:85f9ece: import org.apache.commons.io.Charsets;
1:fab9d37: import org.apache.hadoop.conf.Configuration;
1:fab9d37: import org.apache.hadoop.fs.FileSystem;
1:fab9d37: import org.apache.hadoop.fs.Path;
1:fab9d37: import org.apache.hadoop.io.SequenceFile;
1:fab9d37: import org.apache.hadoop.io.Writable;
1:fab9d37: import org.apache.mahout.common.Pair;
1:fab9d37: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:fab9d37: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
1:fab9d37: 
1:fab9d37: public class ResplitSequenceFiles {
1:58cc1ae: 
1:fab9d37:   private String inputFile;
1:fab9d37:   private String outputFileBase;
1:fab9d37:   private int numSplits;
1:fab9d37: 
1:fab9d37:   private Configuration conf;
1:fab9d37:   private FileSystem fs;
1:fab9d37: 
1:58cc1ae:   private ResplitSequenceFiles() {}
1:58cc1ae: 
1:fab9d37:   private void writeSplit(Iterator<Pair<Writable, Writable>> inputIterator,
1:fab9d37:                           int numSplit, int numEntriesPerSplit) throws IOException {
1:fab9d37:     SequenceFile.Writer splitWriter = null;
1:fab9d37:     for (int j = 0; j < numEntriesPerSplit; ++j) {
1:fab9d37:       Pair<Writable, Writable> item = inputIterator.next();
1:fab9d37:       if (splitWriter == null) {
1:fab9d37:         splitWriter = SequenceFile.createWriter(fs, conf,
1:fab9d37:             new Path(outputFileBase + "-" + numSplit), item.getFirst().getClass(), item.getSecond().getClass());
1:fab9d37:       }
1:fab9d37:       splitWriter.append(item.getFirst(), item.getSecond());
1:fab9d37:     }
1:fab9d37:     if (splitWriter != null) {
1:fab9d37:       splitWriter.close();
1:fab9d37:     }
1:fab9d37:   }
1:fab9d37: 
1:fab9d37:   private void run(PrintWriter printWriter) throws IOException {
1:fab9d37:     conf = new Configuration();
1:fab9d37:     SequenceFileDirIterable<Writable, Writable> inputIterable = new
1:85f9ece:         SequenceFileDirIterable<>(new Path(inputFile), PathType.LIST, conf);
1:fab9d37:     fs = FileSystem.get(conf);
1:fab9d37: 
1:fab9d37:     int numEntries = Iterables.size(inputIterable);
1:fab9d37:     int numEntriesPerSplit = numEntries / numSplits;
1:fab9d37:     int numEntriesLastSplit = numEntriesPerSplit + numEntries - numEntriesPerSplit * numSplits;
1:fab9d37:     Iterator<Pair<Writable, Writable>> inputIterator = inputIterable.iterator();
1:fab9d37: 
1:fab9d37:     printWriter.printf("Writing %d splits\n", numSplits);
1:fab9d37:     for (int i = 0; i < numSplits - 1; ++i) {
1:fab9d37:       printWriter.printf("Writing split %d\n", i);
1:fab9d37:       writeSplit(inputIterator, i, numEntriesPerSplit);
1:fab9d37:     }
1:fab9d37:     printWriter.printf("Writing split %d\n", numSplits - 1);
1:fab9d37:     writeSplit(inputIterator, numSplits - 1, numEntriesLastSplit);
1:fab9d37:   }
1:fab9d37: 
1:fab9d37:   private boolean parseArgs(String[] args) {
1:fab9d37:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1:fab9d37: 
1:fab9d37:     Option help = builder.withLongName("help").withDescription("print this list").create();
1:fab9d37: 
1:fab9d37:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:fab9d37:     Option inputFileOption = builder.withLongName("input")
1:fab9d37:         .withShortName("i")
1:fab9d37:         .withRequired(true)
1:fab9d37:         .withArgument(argumentBuilder.withName("input").withMaximum(1).create())
1:fab9d37:         .withDescription("what the base folder for sequence files is (they all must have the same key/value type")
1:fab9d37:         .create();
1:fab9d37: 
1:fab9d37:     Option outputFileOption = builder.withLongName("output")
1:fab9d37:         .withShortName("o")
1:fab9d37:         .withRequired(true)
1:fab9d37:         .withArgument(argumentBuilder.withName("output").withMaximum(1).create())
1:58cc1ae:         .withDescription("the base name of the file split that the files will be split it; the i'th split has the "
1:58cc1ae:             + "suffix -i")
1:fab9d37:         .create();
1:fab9d37: 
1:fab9d37:     Option numSplitsOption = builder.withLongName("numSplits")
1:fab9d37:         .withShortName("ns")
1:fab9d37:         .withRequired(true)
1:fab9d37:         .withArgument(argumentBuilder.withName("numSplits").withMaximum(1).create())
1:fab9d37:         .withDescription("how many splits to use for the given files")
1:fab9d37:         .create();
1:fab9d37: 
1:fab9d37:     Group normalArgs = new GroupBuilder()
1:fab9d37:         .withOption(help)
1:fab9d37:         .withOption(inputFileOption)
1:fab9d37:         .withOption(outputFileOption)
1:fab9d37:         .withOption(numSplitsOption)
1:fab9d37:         .create();
1:fab9d37: 
1:fab9d37:     Parser parser = new Parser();
1:fab9d37:     parser.setHelpOption(help);
1:fab9d37:     parser.setHelpTrigger("--help");
1:fab9d37:     parser.setGroup(normalArgs);
1:fab9d37:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:fab9d37:     CommandLine cmdLine = parser.parseAndHelp(args);
1:fab9d37: 
1:fab9d37:     if (cmdLine == null) {
1:fab9d37:       return false;
1:fab9d37:     }
1:fab9d37: 
1:fab9d37:     inputFile = (String) cmdLine.getValue(inputFileOption);
1:fab9d37:     outputFileBase = (String) cmdLine.getValue(outputFileOption);
1:fab9d37:     numSplits = Integer.parseInt((String) cmdLine.getValue(numSplitsOption));
1:fab9d37:     return true;
1:fab9d37:   }
1:fab9d37: 
1:fab9d37:   public static void main(String[] args) throws IOException {
1:fab9d37:     ResplitSequenceFiles runner = new ResplitSequenceFiles();
1:fab9d37:     if (runner.parseArgs(args)) {
1:fab9d37:       runner.run(new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
1:fab9d37:     }
1:fab9d37:   }
1:fab9d37: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
/////////////////////////////////////////////////////////////////////////
1:         SequenceFileDirIterable<>(new Path(inputFile), PathType.LIST, conf);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:37f28bd
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:   private ResplitSequenceFiles() {}
1: 
/////////////////////////////////////////////////////////////////////////
1:         .withDescription("the base name of the file split that the files will be split it; the i'th split has the "
1:             + "suffix -i")
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:8269b08
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
author:dfilimon
-------------------------------------------------------------------------------
commit:fab9d37
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.streaming.tools;
1: 
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: import java.io.PrintWriter;
1: import java.util.Iterator;
1: 
1: import com.google.common.collect.Iterables;
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.commons.cli2.util.HelpFormatter;
0: import org.apache.commons.io.Charsets;
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterable;
1: 
1: public class ResplitSequenceFiles {
1:   private String inputFile;
1:   private String outputFileBase;
1:   private int numSplits;
1: 
1:   private Configuration conf;
1:   private FileSystem fs;
1: 
1:   private void writeSplit(Iterator<Pair<Writable, Writable>> inputIterator,
1:                           int numSplit, int numEntriesPerSplit) throws IOException {
1:     SequenceFile.Writer splitWriter = null;
1:     for (int j = 0; j < numEntriesPerSplit; ++j) {
1:       Pair<Writable, Writable> item = inputIterator.next();
1:       if (splitWriter == null) {
1:         splitWriter = SequenceFile.createWriter(fs, conf,
1:             new Path(outputFileBase + "-" + numSplit), item.getFirst().getClass(), item.getSecond().getClass());
1:       }
1:       splitWriter.append(item.getFirst(), item.getSecond());
1:     }
1:     if (splitWriter != null) {
1:       splitWriter.close();
1:     }
1:   }
1: 
1:   private void run(PrintWriter printWriter) throws IOException {
1:     conf = new Configuration();
1:     SequenceFileDirIterable<Writable, Writable> inputIterable = new
0:         SequenceFileDirIterable<Writable, Writable>(new Path(inputFile), PathType.LIST, conf);
1:     fs = FileSystem.get(conf);
1: 
1:     int numEntries = Iterables.size(inputIterable);
1:     int numEntriesPerSplit = numEntries / numSplits;
1:     int numEntriesLastSplit = numEntriesPerSplit + numEntries - numEntriesPerSplit * numSplits;
1:     Iterator<Pair<Writable, Writable>> inputIterator = inputIterable.iterator();
1: 
1:     printWriter.printf("Writing %d splits\n", numSplits);
1:     for (int i = 0; i < numSplits - 1; ++i) {
1:       printWriter.printf("Writing split %d\n", i);
1:       writeSplit(inputIterator, i, numEntriesPerSplit);
1:     }
1:     printWriter.printf("Writing split %d\n", numSplits - 1);
1:     writeSplit(inputIterator, numSplits - 1, numEntriesLastSplit);
1:   }
1: 
1:   private boolean parseArgs(String[] args) {
1:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1: 
1:     Option help = builder.withLongName("help").withDescription("print this list").create();
1: 
1:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:     Option inputFileOption = builder.withLongName("input")
1:         .withShortName("i")
1:         .withRequired(true)
1:         .withArgument(argumentBuilder.withName("input").withMaximum(1).create())
1:         .withDescription("what the base folder for sequence files is (they all must have the same key/value type")
1:         .create();
1: 
1:     Option outputFileOption = builder.withLongName("output")
1:         .withShortName("o")
1:         .withRequired(true)
1:         .withArgument(argumentBuilder.withName("output").withMaximum(1).create())
0:         .withDescription("the base name of the file split that the files will be split it; the i'th split has the " +
0:             "suffix -i")
1:         .create();
1: 
1:     Option numSplitsOption = builder.withLongName("numSplits")
1:         .withShortName("ns")
1:         .withRequired(true)
1:         .withArgument(argumentBuilder.withName("numSplits").withMaximum(1).create())
1:         .withDescription("how many splits to use for the given files")
1:         .create();
1: 
1:     Group normalArgs = new GroupBuilder()
1:         .withOption(help)
1:         .withOption(inputFileOption)
1:         .withOption(outputFileOption)
1:         .withOption(numSplitsOption)
1:         .create();
1: 
1:     Parser parser = new Parser();
1:     parser.setHelpOption(help);
1:     parser.setHelpTrigger("--help");
1:     parser.setGroup(normalArgs);
1:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:     CommandLine cmdLine = parser.parseAndHelp(args);
1: 
1:     if (cmdLine == null) {
1:       return false;
1:     }
1: 
1:     inputFile = (String) cmdLine.getValue(inputFileOption);
1:     outputFileBase = (String) cmdLine.getValue(outputFileOption);
1:     numSplits = Integer.parseInt((String) cmdLine.getValue(numSplitsOption));
1:     return true;
1:   }
1: 
1:   public static void main(String[] args) throws IOException {
1:     ResplitSequenceFiles runner = new ResplitSequenceFiles();
1:     if (runner.parseArgs(args)) {
1:       runner.run(new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
1:     }
1:   }
1: }
============================================================================