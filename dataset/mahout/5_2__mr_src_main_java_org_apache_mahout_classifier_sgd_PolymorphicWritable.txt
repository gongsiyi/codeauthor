1:02f8694: /*
1:02f8694:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:02f8694:  * contributor license agreements.  See the NOTICE file distributed with
1:02f8694:  * this work for additional information regarding copyright ownership.
1:02f8694:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:02f8694:  * (the "License"); you may not use this file except in compliance with
1:02f8694:  * the License.  You may obtain a copy of the License at
1:02f8694:  *
1:02f8694:  *     http://www.apache.org/licenses/LICENSE-2.0
1:02f8694:  *
1:02f8694:  * Unless required by applicable law or agreed to in writing, software
1:02f8694:  * distributed under the License is distributed on an "AS IS" BASIS,
1:02f8694:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:02f8694:  * See the License for the specific language governing permissions and
1:02f8694:  * limitations under the License.
1:02f8694:  */
1:02f8694: 
1:02f8694: package org.apache.mahout.classifier.sgd;
1:02f8694: 
1:02f8694: import org.apache.hadoop.io.Writable;
1:e0ec7c1: import org.apache.mahout.common.ClassUtils;
1:02f8694: 
1:02f8694: import java.io.DataInput;
1:02f8694: import java.io.DataOutput;
1:02f8694: import java.io.IOException;
1:02f8694: 
1:02f8694: /**
1:02f8694:  * Utilities that write a class name and then serialize using writables.
1:02f8694:  */
1:e0ec7c1: public final class PolymorphicWritable {
1:d61a0ee: 
1:d61a0ee:   private PolymorphicWritable() {
1:d61a0ee:   }
1:d61a0ee: 
1:02f8694:   public static <T extends Writable> void write(DataOutput dataOutput, T value) throws IOException {
1:02f8694:     dataOutput.writeUTF(value.getClass().getName());
1:02f8694:     value.write(dataOutput);
2:02f8694:   }
1:02f8694: 
1:02f8694:   public static <T extends Writable> T read(DataInput dataInput, Class<? extends T> clazz) throws IOException {
1:02f8694:     String className = dataInput.readUTF();
1:e0ec7c1:     T r = ClassUtils.instantiateAs(className, clazz);
1:02f8694:     r.readFields(dataInput);
1:02f8694:     return r;
1:02f8694:   }
1:02f8694: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.ClassUtils;
/////////////////////////////////////////////////////////////////////////
1: public final class PolymorphicWritable {
/////////////////////////////////////////////////////////////////////////
1:     T r = ClassUtils.instantiateAs(className, clazz);
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
0: public final class PolymorphicWritable<T> {
1: 
1:   private PolymorphicWritable() {
1:   }
1: 
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:96024a7
/////////////////////////////////////////////////////////////////////////
0:     T r;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:02f8694
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import org.apache.hadoop.io.Writable;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: /**
1:  * Utilities that write a class name and then serialize using writables.
1:  */
0: public class PolymorphicWritable<T> {
1:   public static <T extends Writable> void write(DataOutput dataOutput, T value) throws IOException {
1:     dataOutput.writeUTF(value.getClass().getName());
1:     value.write(dataOutput);
1:   }
1: 
1:   public static <T extends Writable> T read(DataInput dataInput, Class<? extends T> clazz) throws IOException {
1:     String className = dataInput.readUTF();
0:     T r = null;
0:     try {
0:       r = Class.forName(className).asSubclass(clazz).newInstance();
0:     } catch (InstantiationException e) {
0:       throw new IOException("Can't create object", e);
0:     } catch (IllegalAccessException e) {
0:       throw new IOException("Can't access constructor", e);
0:     } catch (ClassNotFoundException e) {
0:       throw new IOException("No such class", e);
1:     }
1:     r.readFields(dataInput);
1:     return r;
1:   }
1: }
============================================================================