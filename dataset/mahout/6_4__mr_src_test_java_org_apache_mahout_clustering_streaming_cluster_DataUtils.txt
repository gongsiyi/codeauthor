1:fd24254: /*
1:fd24254:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fd24254:  * contributor license agreements.  See the NOTICE file distributed with
1:fd24254:  * this work for additional information regarding copyright ownership.
1:fd24254:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fd24254:  * (the "License"); you may not use this file except in compliance with
1:fd24254:  * the License.  You may obtain a copy of the License at
1:fd24254:  *
1:fd24254:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fd24254:  *
1:fd24254:  * Unless required by applicable law or agreed to in writing, software
1:fd24254:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd24254:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd24254:  * See the License for the specific language governing permissions and
1:fd24254:  * limitations under the License.
1:fd24254:  */
1:fd24254: 
1:fd24254: package org.apache.mahout.clustering.streaming.cluster;
1:fd24254: 
1:fd24254: import java.util.List;
1:fd24254: 
1:fd24254: import com.google.common.collect.Lists;
1:fd24254: import org.apache.mahout.common.Pair;
1:fd24254: import org.apache.mahout.math.Centroid;
1:fd24254: import org.apache.mahout.math.DenseVector;
1:fd24254: import org.apache.mahout.math.Vector;
1:fd24254: import org.apache.mahout.math.random.MultiNormal;
1:fd24254: 
1:fd24254: /**
1:fd24254:  * A collection of miscellaneous utility functions for working with data to be clustered.
1:fd24254:  * Includes methods for generating synthetic data and estimating distance cutoff.
1:fd24254:  */
1:4ca6b86: public final class DataUtils {
1:4ca6b86:   private DataUtils() {
1:4ca6b86:   }
1:4ca6b86: 
1:fd24254:   /**
1:fd24254:    * Samples numDatapoints vectors of numDimensions cardinality centered around the vertices of a
1:fd24254:    * numDimensions order hypercube. The distribution of points around these vertices is
1:fd24254:    * multinormal with a radius of distributionRadius.
1:fd24254:    * A hypercube of numDimensions has 2^numDimensions vertices. Keep this in mind when clustering
1:fd24254:    * the data.
1:fd24254:    *
1:9abf755:    * Note that it is almost always the case that you want to call RandomUtils.useTestSeed() before
1:9abf755:    * generating test data.  This means that you can't generate data in the declaration of a static
1:9abf755:    * variable because such initializations happen before any @BeforeClass or @Before setup methods
1:9abf755:    * are called.
1:9abf755:    *
1:fd24254:    *
1:fd24254:    * @param numDimensions number of dimensions of the vectors to be generated.
1:fd24254:    * @param numDatapoints number of data points to be generated.
1:fd24254:    * @param distributionRadius radius of the distribution around the hypercube vertices.
1:fd24254:    * @return a pair of lists, whose first element is the sampled points and whose second element
1:fd24254:    * is the list of hypercube vertices that are the means of each distribution.
1:fd24254:    */
1:fd24254:   public static Pair<List<Centroid>, List<Centroid>> sampleMultiNormalHypercube(
1:fd24254:       int numDimensions, int numDatapoints, double distributionRadius) {
1:fd24254:     int pow2N = 1 << numDimensions;
1:fd24254:     // Construct data samplers centered on the corners of a unit hypercube.
1:fd24254:     // Additionally, keep the means of the distributions that will be generated so we can compare
1:fd24254:     // these to the ideal cluster centers.
1:fd24254:     List<Centroid> mean = Lists.newArrayListWithCapacity(pow2N);
1:fd24254:     List<MultiNormal> rowSamplers = Lists.newArrayList();
1:fd24254:     for (int i = 0; i < pow2N; i++) {
1:fd24254:       Vector v = new DenseVector(numDimensions);
1:fd24254:       // Select each of the num
1:fd24254:       int pow2J = 1 << (numDimensions - 1);
1:fd24254:       for (int j = 0; j < numDimensions; ++j) {
1:fd24254:         v.set(j, 1.0 / pow2J * (i & pow2J));
1:fd24254:         pow2J >>= 1;
1:fd24254:       }
1:fd24254:       mean.add(new Centroid(i, v, 1));
1:fd24254:       rowSamplers.add(new MultiNormal(distributionRadius, v));
1:fd24254:     }
1:fd24254: 
1:fd24254:     // Sample the requested number of data points.
1:fd24254:     List<Centroid> data = Lists.newArrayListWithCapacity(numDatapoints);
1:fd24254:     for (int i = 0; i < numDatapoints; ++i) {
1:fd24254:       data.add(new Centroid(i, rowSamplers.get(i % pow2N).sample(), 1));
1:fd24254:     }
1:02ff22f:     return new Pair<>(data, mean);
1:fd24254:   }
1:fd24254: 
1:fd24254:   /**
1:fd24254:    * Calls sampleMultinormalHypercube(numDimension, numDataPoints, 0.01).
1:fd24254:    * @see DataUtils#sampleMultiNormalHypercube(int, int, double)
1:fd24254:    */
1:fd24254:   public static Pair<List<Centroid>, List<Centroid>> sampleMultiNormalHypercube(int numDimensions,
1:fd24254:                                                                                 int numDatapoints) {
1:fd24254:     return sampleMultiNormalHypercube(numDimensions, numDatapoints, 0.01);
1:fd24254:   }
1:fd24254: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     return new Pair<>(data, mean);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:9abf755
/////////////////////////////////////////////////////////////////////////
1:    * Note that it is almost always the case that you want to call RandomUtils.useTestSeed() before
1:    * generating test data.  This means that you can't generate data in the declaration of a static
1:    * variable because such initializations happen before any @BeforeClass or @Before setup methods
1:    * are called.
1:    *
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1: public final class DataUtils {
1:   private DataUtils() {
1:   }
1: 
author:dfilimon
-------------------------------------------------------------------------------
commit:fd24254
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.streaming.cluster;
1: 
1: import java.util.List;
1: 
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.math.Centroid;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.random.MultiNormal;
1: 
1: /**
1:  * A collection of miscellaneous utility functions for working with data to be clustered.
1:  * Includes methods for generating synthetic data and estimating distance cutoff.
1:  */
0: public class DataUtils {
1:   /**
1:    * Samples numDatapoints vectors of numDimensions cardinality centered around the vertices of a
1:    * numDimensions order hypercube. The distribution of points around these vertices is
1:    * multinormal with a radius of distributionRadius.
1:    * A hypercube of numDimensions has 2^numDimensions vertices. Keep this in mind when clustering
1:    * the data.
1:    *
1:    *
1:    * @param numDimensions number of dimensions of the vectors to be generated.
1:    * @param numDatapoints number of data points to be generated.
1:    * @param distributionRadius radius of the distribution around the hypercube vertices.
1:    * @return a pair of lists, whose first element is the sampled points and whose second element
1:    * is the list of hypercube vertices that are the means of each distribution.
1:    */
1:   public static Pair<List<Centroid>, List<Centroid>> sampleMultiNormalHypercube(
1:       int numDimensions, int numDatapoints, double distributionRadius) {
1:     int pow2N = 1 << numDimensions;
1:     // Construct data samplers centered on the corners of a unit hypercube.
1:     // Additionally, keep the means of the distributions that will be generated so we can compare
1:     // these to the ideal cluster centers.
1:     List<Centroid> mean = Lists.newArrayListWithCapacity(pow2N);
1:     List<MultiNormal> rowSamplers = Lists.newArrayList();
1:     for (int i = 0; i < pow2N; i++) {
1:       Vector v = new DenseVector(numDimensions);
1:       // Select each of the num
1:       int pow2J = 1 << (numDimensions - 1);
1:       for (int j = 0; j < numDimensions; ++j) {
1:         v.set(j, 1.0 / pow2J * (i & pow2J));
1:         pow2J >>= 1;
1:       }
1:       mean.add(new Centroid(i, v, 1));
1:       rowSamplers.add(new MultiNormal(distributionRadius, v));
1:     }
1: 
1:     // Sample the requested number of data points.
1:     List<Centroid> data = Lists.newArrayListWithCapacity(numDatapoints);
1:     for (int i = 0; i < numDatapoints; ++i) {
1:       data.add(new Centroid(i, rowSamplers.get(i % pow2N).sample(), 1));
1:     }
0:     return new Pair<List<Centroid>, List<Centroid>>(data, mean);
1:   }
1: 
1:   /**
1:    * Calls sampleMultinormalHypercube(numDimension, numDataPoints, 0.01).
1:    * @see DataUtils#sampleMultiNormalHypercube(int, int, double)
1:    */
1:   public static Pair<List<Centroid>, List<Centroid>> sampleMultiNormalHypercube(int numDimensions,
1:                                                                                 int numDatapoints) {
1:     return sampleMultiNormalHypercube(numDimensions, numDatapoints, 0.01);
1:   }
1: }
============================================================================