2:0d94cc3: /**
1:0d94cc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0d94cc3:  * contributor license agreements.  See the NOTICE file distributed with
1:0d94cc3:  * this work for additional information regarding copyright ownership.
1:0d94cc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0d94cc3:  * (the "License"); you may not use this file except in compliance with
1:0d94cc3:  * the License.  You may obtain a copy of the License at
1:0d94cc3:  *
1:0d94cc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d94cc3:  *
1:0d94cc3:  * Unless required by applicable law or agreed to in writing, software
1:0d94cc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0d94cc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d94cc3:  * See the License for the specific language governing permissions and
1:0d94cc3:  * limitations under the License.
2:0d94cc3:  */
7:0d94cc3: 
1:0d94cc3: package org.apache.mahout.cf.taste.impl.similarity;
1:0d94cc3: 
1:0d94cc3: import java.util.Collection;
1:0d94cc3: import java.util.Iterator;
1:0d94cc3: 
1:80366ee: import com.google.common.collect.AbstractIterator;
1:0d94cc3: import org.apache.mahout.cf.taste.common.Refreshable;
1:0d94cc3: import org.apache.mahout.cf.taste.common.TasteException;
1:a66f1a8: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:80366ee: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:0d94cc3: import org.apache.mahout.cf.taste.impl.recommender.TopItems;
1:0d94cc3: import org.apache.mahout.cf.taste.model.DataModel;
1:b25ad9d: import org.apache.mahout.cf.taste.similarity.PreferenceInferrer;
1:b25ad9d: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
1:da03b23: import org.apache.mahout.common.RandomUtils;
1:0d94cc3: 
1:69ba194: import com.google.common.base.Preconditions;
1:69ba194: 
1:0d94cc3: public final class GenericUserSimilarity implements UserSimilarity {
1:0d94cc3:   
1:87c15be:   private final FastByIDMap<FastByIDMap<Double>> similarityMaps = new FastByIDMap<>();
1:0d94cc3:   
1:0d94cc3:   public GenericUserSimilarity(Iterable<UserUserSimilarity> similarities) {
1:80366ee:     initSimilarityMaps(similarities.iterator());
8:0d94cc3:   }
1:0d94cc3:   
1:0d94cc3:   public GenericUserSimilarity(Iterable<UserUserSimilarity> similarities, int maxToKeep) {
1:80366ee:     Iterable<UserUserSimilarity> keptSimilarities =
1:80366ee:         TopItems.getTopUserUserSimilarities(maxToKeep, similarities.iterator());
1:80366ee:     initSimilarityMaps(keptSimilarities.iterator());
1:69ba194:   }
1:0d94cc3:   
1:0d94cc3:   public GenericUserSimilarity(UserSimilarity otherSimilarity, DataModel dataModel) throws TasteException {
1:80366ee:     long[] userIDs = longIteratorToList(dataModel.getUserIDs());
1:80366ee:     initSimilarityMaps(new DataModelSimilaritiesIterator(otherSimilarity, userIDs));
1:0d94cc3:   }
1:0d94cc3:   
1:297bef5:   public GenericUserSimilarity(UserSimilarity otherSimilarity,
1:80366ee:                                DataModel dataModel,
1:80366ee:                                int maxToKeep) throws TasteException {
1:80366ee:     long[] userIDs = longIteratorToList(dataModel.getUserIDs());
2:d86c967:     Iterator<UserUserSimilarity> it = new DataModelSimilaritiesIterator(otherSimilarity, userIDs);
1:80366ee:     Iterable<UserUserSimilarity> keptSimilarities = TopItems.getTopUserUserSimilarities(maxToKeep, it);
1:80366ee:     initSimilarityMaps(keptSimilarities.iterator());
1:80366ee:   }
1:80366ee: 
1:80366ee:   static long[] longIteratorToList(LongPrimitiveIterator iterator) {
1:80366ee:     long[] result = new long[5];
1:80366ee:     int size = 0;
1:80366ee:     while (iterator.hasNext()) {
1:80366ee:       if (size == result.length) {
1:80366ee:         long[] newResult = new long[result.length << 1];
1:80366ee:         System.arraycopy(result, 0, newResult, 0, result.length);
1:80366ee:         result = newResult;
1:80366ee:       }
1:80366ee:       result[size++] = iterator.next();
1:80366ee:     }
1:80366ee:     if (size != result.length) {
1:80366ee:       long[] newResult = new long[size];
1:80366ee:       System.arraycopy(result, 0, newResult, 0, size);
1:80366ee:       result = newResult;
1:80366ee:     }
1:80366ee:     return result;
1:0d94cc3:   }
1:0d94cc3:   
1:80366ee:   private void initSimilarityMaps(Iterator<UserUserSimilarity> similarities) {
1:80366ee:     while (similarities.hasNext()) {
1:80366ee:       UserUserSimilarity uuc = similarities.next();
1:a66f1a8:       long similarityUser1 = uuc.getUserID1();
1:a66f1a8:       long similarityUser2 = uuc.getUserID2();
1:a66f1a8:       if (similarityUser1 != similarityUser2) {
1:0d94cc3:         // Order them -- first key should be the "smaller" one
1:a66f1a8:         long user1;
1:a66f1a8:         long user2;
1:a66f1a8:         if (similarityUser1 < similarityUser2) {
1:0d94cc3:           user1 = similarityUser1;
1:0d94cc3:           user2 = similarityUser2;
1:0d94cc3:         } else {
1:0d94cc3:           user1 = similarityUser2;
1:0d94cc3:           user2 = similarityUser1;
1:0d94cc3:         }
1:a66f1a8:         FastByIDMap<Double> map = similarityMaps.get(user1);
1:0d94cc3:         if (map == null) {
1:87c15be:           map = new FastByIDMap<>();
1:0d94cc3:           similarityMaps.put(user1, map);
1:0d94cc3:         }
1:0d94cc3:         map.put(user2, uuc.getValue());
1:0d94cc3:       }
1:0d94cc3:       // else similarity between user and itself already assumed to be 1.0
1:0d94cc3:     }
1:0d94cc3:   }
1:0d94cc3:   
3:0d94cc3:   @Override
1:a66f1a8:   public double userSimilarity(long userID1, long userID2) {
1:a66f1a8:     if (userID1 == userID2) {
1:0d94cc3:       return 1.0;
1:0d94cc3:     }
1:a66f1a8:     long first;
1:a66f1a8:     long second;
1:a66f1a8:     if (userID1 < userID2) {
1:d86c967:       first = userID1;
1:d86c967:       second = userID2;
1:0d94cc3:     } else {
1:d86c967:       first = userID2;
1:d86c967:       second = userID1;
1:0d94cc3:     }
1:a66f1a8:     FastByIDMap<Double> nextMap = similarityMaps.get(first);
1:0d94cc3:     if (nextMap == null) {
1:0d94cc3:       return Double.NaN;
1:0d94cc3:     }
1:0d94cc3:     Double similarity = nextMap.get(second);
1:0d94cc3:     return similarity == null ? Double.NaN : similarity;
1:0d94cc3:   }
1:0d94cc3:   
1:0d94cc3:   @Override
1:0d94cc3:   public void setPreferenceInferrer(PreferenceInferrer inferrer) {
2:0d94cc3:     throw new UnsupportedOperationException();
1:0d94cc3:   }
1:0d94cc3:   
1:0d94cc3:   @Override
1:0d94cc3:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:0d94cc3:   // Do nothing
1:0d94cc3:   }
1:0d94cc3:   
1:0d94cc3:   public static final class UserUserSimilarity implements Comparable<UserUserSimilarity> {
1:69ba194: 
1:a66f1a8:     private final long userID1;
1:a66f1a8:     private final long userID2;
1:0d94cc3:     private final double value;
1:0d94cc3:     
1:a66f1a8:     public UserUserSimilarity(long userID1, long userID2, double value) {
1:cd167f9:       Preconditions.checkArgument(value >= -1.0 && value <= 1.0, "Illegal value: " + value + ". Must be: -1.0 <= value <= 1.0");
1:d86c967:       this.userID1 = userID1;
1:d86c967:       this.userID2 = userID2;
1:0d94cc3:       this.value = value;
1:0d94cc3:     }
1:0d94cc3:     
1:a66f1a8:     public long getUserID1() {
1:d86c967:       return userID1;
1:0d94cc3:     }
1:0d94cc3:     
1:a66f1a8:     public long getUserID2() {
1:d86c967:       return userID2;
1:0d94cc3:     }
1:0d94cc3:     
1:0d94cc3:     public double getValue() {
1:0d94cc3:       return value;
1:0d94cc3:     }
1:0d94cc3:     
1:0d94cc3:     @Override
1:0d94cc3:     public String toString() {
1:d86c967:       return "UserUserSimilarity[" + userID1 + ',' + userID2 + ':' + value + ']';
1:0d94cc3:     }
1:0d94cc3:     
1:b25ad9d:     /** Defines an ordering from highest similarity to lowest. */
1:0d94cc3:     @Override
1:0d94cc3:     public int compareTo(UserUserSimilarity other) {
1:fc74924:       double otherValue = other.getValue();
1:0d94cc3:       return value > otherValue ? -1 : value < otherValue ? 1 : 0;
1:0d94cc3:     }
1:0d94cc3:     
1:0d94cc3:     @Override
1:0d94cc3:     public boolean equals(Object other) {
1:0d94cc3:       if (!(other instanceof UserUserSimilarity)) {
1:0d94cc3:         return false;
1:0d94cc3:       }
1:0d94cc3:       UserUserSimilarity otherSimilarity = (UserUserSimilarity) other;
1:39fe224:       return otherSimilarity.getUserID1() == userID1
1:39fe224:           && otherSimilarity.getUserID2() == userID2
1:39fe224:           && otherSimilarity.getValue() == value;
1:0d94cc3:     }
1:0d94cc3:     
1:0d94cc3:     @Override
1:0d94cc3:     public int hashCode() {
1:a66f1a8:       return (int) userID1 ^ (int) userID2 ^ RandomUtils.hashDouble(value);
1:0d94cc3:     }
1:0d94cc3:     
1:0d94cc3:   }
1:0d94cc3:   
1:80366ee:   private static final class DataModelSimilaritiesIterator extends AbstractIterator<UserUserSimilarity> {
1:80366ee: 
1:0d94cc3:     private final UserSimilarity otherSimilarity;
1:80366ee:     private final long[] itemIDs;
1:0d94cc3:     private int i;
1:80366ee:     private long itemID1;
1:0d94cc3:     private int j;
1:80366ee: 
1:80366ee:     private DataModelSimilaritiesIterator(UserSimilarity otherSimilarity, long[] itemIDs) {
1:0d94cc3:       this.otherSimilarity = otherSimilarity;
1:80366ee:       this.itemIDs = itemIDs;
1:0d94cc3:       i = 0;
1:80366ee:       itemID1 = itemIDs[0];
1:0d94cc3:       j = 1;
1:0d94cc3:     }
1:80366ee: 
1:0d94cc3:     @Override
1:80366ee:     protected UserUserSimilarity computeNext() {
1:80366ee:       int size = itemIDs.length;
1:80366ee:       while (i < size - 1) {
1:80366ee:         long itemID2 = itemIDs[j];
1:80366ee:         double similarity;
1:80366ee:         try {
1:80366ee:           similarity = otherSimilarity.userSimilarity(itemID1, itemID2);
1:80366ee:         } catch (TasteException te) {
1:80366ee:           // ugly:
1:80366ee:           throw new IllegalStateException(te);
1:80366ee:         }
1:80366ee:         if (!Double.isNaN(similarity)) {
1:80366ee:           return new UserUserSimilarity(itemID1, itemID2, similarity);
1:80366ee:         }
1:80366ee:         if (++j == size) {
1:80366ee:           itemID1 = itemIDs[++i];
1:80366ee:           j = i + 1;
1:80366ee:         }
1:0d94cc3:       }
1:80366ee:       return endOfData();
1:0d94cc3:     }
1:0d94cc3:     
1:0d94cc3:   }
1:0d94cc3:   
1:0d94cc3: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:   private final FastByIDMap<FastByIDMap<Double>> similarityMaps = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:           map = new FastByIDMap<>();
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:       Preconditions.checkArgument(value >= -1.0 && value <= 1.0, "Illegal value: " + value + ". Must be: -1.0 <= value <= 1.0");
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:39fe224
/////////////////////////////////////////////////////////////////////////
1:       return otherSimilarity.getUserID1() == userID1
1:           && otherSimilarity.getUserID2() == userID2
1:           && otherSimilarity.getValue() == value;
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.AbstractIterator;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
/////////////////////////////////////////////////////////////////////////
1:     initSimilarityMaps(similarities.iterator());
1:     Iterable<UserUserSimilarity> keptSimilarities =
1:         TopItems.getTopUserUserSimilarities(maxToKeep, similarities.iterator());
1:     initSimilarityMaps(keptSimilarities.iterator());
1:     long[] userIDs = longIteratorToList(dataModel.getUserIDs());
1:     initSimilarityMaps(new DataModelSimilaritiesIterator(otherSimilarity, userIDs));
1:                                DataModel dataModel,
1:                                int maxToKeep) throws TasteException {
1:     long[] userIDs = longIteratorToList(dataModel.getUserIDs());
1:     Iterable<UserUserSimilarity> keptSimilarities = TopItems.getTopUserUserSimilarities(maxToKeep, it);
1:     initSimilarityMaps(keptSimilarities.iterator());
1:   }
1: 
1:   static long[] longIteratorToList(LongPrimitiveIterator iterator) {
1:     long[] result = new long[5];
1:     int size = 0;
1:     while (iterator.hasNext()) {
1:       if (size == result.length) {
1:         long[] newResult = new long[result.length << 1];
1:         System.arraycopy(result, 0, newResult, 0, result.length);
1:         result = newResult;
1:       }
1:       result[size++] = iterator.next();
1:     }
1:     if (size != result.length) {
1:       long[] newResult = new long[size];
1:       System.arraycopy(result, 0, newResult, 0, size);
1:       result = newResult;
1:     }
1:     return result;
1:   private void initSimilarityMaps(Iterator<UserUserSimilarity> similarities) {
1:     while (similarities.hasNext()) {
1:       UserUserSimilarity uuc = similarities.next();
/////////////////////////////////////////////////////////////////////////
1:   private static final class DataModelSimilaritiesIterator extends AbstractIterator<UserUserSimilarity> {
1: 
1:     private final long[] itemIDs;
1:     private long itemID1;
1: 
1:     private DataModelSimilaritiesIterator(UserSimilarity otherSimilarity, long[] itemIDs) {
1:       this.itemIDs = itemIDs;
1:       itemID1 = itemIDs[0];
1: 
1:     protected UserUserSimilarity computeNext() {
1:       int size = itemIDs.length;
1:       while (i < size - 1) {
1:         long itemID2 = itemIDs[j];
1:         double similarity;
1:         try {
1:           similarity = otherSimilarity.userSimilarity(itemID1, itemID2);
1:         } catch (TasteException te) {
1:           // ugly:
1:           throw new IllegalStateException(te);
1:         }
1:         if (!Double.isNaN(similarity)) {
1:           return new UserUserSimilarity(itemID1, itemID2, similarity);
1:         }
1:         if (++j == size) {
1:           itemID1 = itemIDs[++i];
1:           j = i + 1;
1:         }
1:       return endOfData();
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:       Preconditions.checkArgument(value >= -1.0 && value <= 1.0, "Illegal value: %s", value);
/////////////////////////////////////////////////////////////////////////
1: }
commit:5a58194
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.iterator.IteratorIterable;
0: import org.apache.mahout.common.iterator.IteratorUtils;
commit:fc74924
/////////////////////////////////////////////////////////////////////////
1:       double otherValue = other.getValue();
/////////////////////////////////////////////////////////////////////////
0:       return otherSimilarity.getUserID1() == userID1 &&
0:           otherSimilarity.getUserID2() == userID2 &&
0:           otherSimilarity.getValue() == value;
commit:acafdc0
/////////////////////////////////////////////////////////////////////////
0:         throw new IllegalStateException(te);
commit:da03b23
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
commit:66764ad
/////////////////////////////////////////////////////////////////////////
commit:accdbdb
/////////////////////////////////////////////////////////////////////////
0:     long[] userIDs = IteratorUtils.longIteratorToList(dataModel.getUserIDs());
0:     long[] userIDs = IteratorUtils.longIteratorToList(dataModel.getUserIDs());
/////////////////////////////////////////////////////////////////////////
0:     private final long[] userIDs;
0:     private DataModelSimilaritiesIterator(UserSimilarity otherSimilarity, long[] userIDs) {
0:       this.size = userIDs.length;
0:       userID1 = userIDs[0];
/////////////////////////////////////////////////////////////////////////
0:       long userID2 = userIDs[j];
/////////////////////////////////////////////////////////////////////////
0:         userID1 = userIDs[i];
commit:a66f1a8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
/////////////////////////////////////////////////////////////////////////
0:   private final FastByIDMap<FastByIDMap<Double>> similarityMaps = new FastByIDMap<FastByIDMap<Double>>();
/////////////////////////////////////////////////////////////////////////
0:     List<Long> userIDs = IteratorUtils.iterableToList(dataModel.getUserIDs());
0:     List<Long> userIDs = IteratorUtils.iterableToList(dataModel.getUserIDs());
/////////////////////////////////////////////////////////////////////////
1:       long similarityUser1 = uuc.getUserID1();
1:       long similarityUser2 = uuc.getUserID2();
1:       if (similarityUser1 != similarityUser2) {
1:         long user1;
1:         long user2;
1:         if (similarityUser1 < similarityUser2) {
1:         FastByIDMap<Double> map = similarityMaps.get(user1);
0:           map = new FastByIDMap<Double>();
/////////////////////////////////////////////////////////////////////////
1:   public double userSimilarity(long userID1, long userID2) {
1:     if (userID1 == userID2) {
1:     long first;
1:     long second;
1:     if (userID1 < userID2) {
1:     FastByIDMap<Double> nextMap = similarityMaps.get(first);
/////////////////////////////////////////////////////////////////////////
1:     private final long userID1;
1:     private final long userID2;
1:     public UserUserSimilarity(long userID1, long userID2, double value) {
/////////////////////////////////////////////////////////////////////////
1:     public long getUserID1() {
1:     public long getUserID2() {
/////////////////////////////////////////////////////////////////////////
0:       return otherSimilarity.userID1 == userID1 && otherSimilarity.userID2 == userID2 && otherSimilarity.value == value;
1:       return (int) userID1 ^ (int) userID2 ^ RandomUtils.hashDouble(value);
/////////////////////////////////////////////////////////////////////////
0:     private final List<Long> userIDs;
0:     private long userID1;
0:     private DataModelSimilaritiesIterator(UserSimilarity otherSimilarity, List<Long> userIDs) {
/////////////////////////////////////////////////////////////////////////
0:       long userID2 = userIDs.get(j);
commit:d86c967
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private final Map<Comparable<?>, Map<Comparable<?>, Double>> similarityMaps =
0:           new FastMap<Comparable<?>, Map<Comparable<?>, Double>>();
/////////////////////////////////////////////////////////////////////////
0:     List<? extends Comparable<?>> userIDs = IteratorUtils.iterableToList(dataModel.getUserIDs());
1:     Iterator<UserUserSimilarity> it = new DataModelSimilaritiesIterator(otherSimilarity, userIDs);
0:     List<? extends Comparable<?>> userIDs = IteratorUtils.iterableToList(dataModel.getUserIDs());
1:     Iterator<UserUserSimilarity> it = new DataModelSimilaritiesIterator(otherSimilarity, userIDs);
/////////////////////////////////////////////////////////////////////////
0:       Comparable<?> similarityUser1 = uuc.getUserID1();
0:       Comparable<?> similarityUser2 = uuc.getUserID2();
0:       int compare = ((Comparable<Object>) similarityUser1).compareTo(similarityUser2);
0:         Comparable<?> user1;
0:         Comparable<?> user2;
/////////////////////////////////////////////////////////////////////////
0:         Map<Comparable<?>, Double> map = similarityMaps.get(user1);
0:           map = new FastMap<Comparable<?>, Double>();
/////////////////////////////////////////////////////////////////////////
0:   public double userSimilarity(Comparable<?> userID1, Comparable<?> userID2) {
0:     int compare = ((Comparable<Object>) userID1).compareTo(userID2);
0:     Comparable<?> first;
0:     Comparable<?> second;
1:       first = userID1;
1:       second = userID2;
1:       first = userID2;
1:       second = userID1;
0:     Map<Comparable<?>, Double> nextMap = similarityMaps.get(first);
/////////////////////////////////////////////////////////////////////////
0:     private final Comparable<?> userID1;
0:     private final Comparable<?> userID2;
0:     public UserUserSimilarity(Comparable<?> userID1, Comparable<?> userID2, double value) {
0:       if (userID1 == null || userID2 == null) {
1:       this.userID1 = userID1;
1:       this.userID2 = userID2;
0:     public Comparable<?> getUserID1() {
1:       return userID1;
0:     public Comparable<?> getUserID2() {
1:       return userID2;
/////////////////////////////////////////////////////////////////////////
1:       return "UserUserSimilarity[" + userID1 + ',' + userID2 + ':' + value + ']';
/////////////////////////////////////////////////////////////////////////
0:       return otherSimilarity.userID1.equals(userID1) && otherSimilarity.userID2.equals(userID2) && otherSimilarity.value == value;
0:       return userID1.hashCode() ^ userID2.hashCode() ^ RandomUtils.hashDouble(value);
/////////////////////////////////////////////////////////////////////////
0:     private final List<? extends Comparable<?>> userIDs;
0:     private Comparable<?> userID1;
0:     private DataModelSimilaritiesIterator(UserSimilarity otherSimilarity, List<? extends Comparable<?>> userIDs) {
0:       this.userIDs = userIDs;
0:       this.size = userIDs.size();
0:       userID1 = userIDs.get(0);
/////////////////////////////////////////////////////////////////////////
0:       Comparable<?> userID2 = userIDs.get(j);
0:         similarity = otherSimilarity.userSimilarity(userID1, userID2);
0:       UserUserSimilarity result = new UserUserSimilarity(userID1, userID2, similarity);
0:         userID1 = userIDs.get(i);
commit:b25ad9d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.similarity.PreferenceInferrer;
1: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
/////////////////////////////////////////////////////////////////////////
0:       throws TasteException {
0:         TopItems.getTopUserUserSimilarities(maxToKeep, new IteratorIterable<UserUserSimilarity>(it));
/////////////////////////////////////////////////////////////////////////
1:     /** Defines an ordering from highest similarity to lowest. */
commit:0d94cc3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.similarity;
1: 
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
0: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
0: import org.apache.mahout.cf.taste.similarity.PreferenceInferrer;
0: import org.apache.mahout.cf.taste.impl.common.FastMap;
0: import org.apache.mahout.cf.taste.impl.common.IteratorIterable;
0: import org.apache.mahout.cf.taste.impl.common.IteratorUtils;
0: import org.apache.mahout.cf.taste.impl.common.RandomUtils;
1: import org.apache.mahout.cf.taste.impl.recommender.TopItems;
1: import org.apache.mahout.cf.taste.model.DataModel;
0: import org.apache.mahout.cf.taste.model.User;
1: 
1: import java.util.Collection;
1: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.NoSuchElementException;
1: 
1: public final class GenericUserSimilarity implements UserSimilarity {
1: 
0:   private final Map<User, Map<User, Double>> similarityMaps = new FastMap<User, Map<User, Double>>();
1: 
1:   public GenericUserSimilarity(Iterable<UserUserSimilarity> similarities) {
0:     initSimilarityMaps(similarities);
1:   }
1: 
1:   public GenericUserSimilarity(Iterable<UserUserSimilarity> similarities, int maxToKeep) {
0:     Iterable<UserUserSimilarity> keptSimilarities = TopItems.getTopUserUserSimilarities(maxToKeep, similarities);
0:     initSimilarityMaps(keptSimilarities);
1:   }
1: 
1:   public GenericUserSimilarity(UserSimilarity otherSimilarity, DataModel dataModel) throws TasteException {
0:     List<? extends User> users = IteratorUtils.iterableToList(dataModel.getUsers());
0:     Iterator<UserUserSimilarity> it = new DataModelSimilaritiesIterator(otherSimilarity, users);
0:     initSimilarityMaps(new IteratorIterable<UserUserSimilarity>(it));
1:   }
1: 
0:   public GenericUserSimilarity(UserSimilarity otherSimilarity, DataModel dataModel, int maxToKeep)
0:           throws TasteException {
0:     List<? extends User> users = IteratorUtils.iterableToList(dataModel.getUsers());
0:     Iterator<UserUserSimilarity> it = new DataModelSimilaritiesIterator(otherSimilarity, users);
0:     Iterable<UserUserSimilarity> keptSimilarities =
0:             TopItems.getTopUserUserSimilarities(maxToKeep, new IteratorIterable<UserUserSimilarity>(it));
0:     initSimilarityMaps(keptSimilarities);
1:   }
1: 
0:   private void initSimilarityMaps(Iterable<UserUserSimilarity> similarities) {
0:     for (UserUserSimilarity uuc : similarities) {
0:       User similarityUser1 = uuc.getUser1();
0:       User similarityUser2 = uuc.getUser2();
0:       int compare = similarityUser1.compareTo(similarityUser2);
0:       if (compare != 0) {
1:         // Order them -- first key should be the "smaller" one
0:         User user1;
0:         User user2;
0:         if (compare < 0) {
1:           user1 = similarityUser1;
1:           user2 = similarityUser2;
1:         } else {
1:           user1 = similarityUser2;
1:           user2 = similarityUser1;
1:         }
0:         Map<User, Double> map = similarityMaps.get(user1);
1:         if (map == null) {
0:           map = new FastMap<User, Double>();
1:           similarityMaps.put(user1, map);
1:         }
1:         map.put(user2, uuc.getValue());
1:       }
1:       // else similarity between user and itself already assumed to be 1.0
1:     }
1:   }
1: 
1:   @Override
0:   public double userSimilarity(User user1, User user2) {
0:     int compare = user1.compareTo(user2);
0:     if (compare == 0) {
1:       return 1.0;
1:     }
0:     User first;
0:     User second;
0:     if (compare < 0) {
0:       first = user1;
0:       second = user2;
1:     } else {
0:       first = user2;
0:       second = user1;
1:     }
0:     Map<User, Double> nextMap = similarityMaps.get(first);
1:     if (nextMap == null) {
1:       return Double.NaN;
1:     }
1:     Double similarity = nextMap.get(second);
1:     return similarity == null ? Double.NaN : similarity;
1:   }
1: 
1:   @Override
1:   public void setPreferenceInferrer(PreferenceInferrer inferrer) {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     // Do nothing
1:   }
1: 
1:   public static final class UserUserSimilarity implements Comparable<UserUserSimilarity> {
1: 
0:     private final User user1;
0:     private final User user2;
1:     private final double value;
1: 
0:     public UserUserSimilarity(User user1, User user2, double value) {
0:       if (user1 == null || user2 == null) {
0:         throw new IllegalArgumentException("A user is null");
1:       }
0:       if (Double.isNaN(value) || value < -1.0 || value > 1.0) {
0:         throw new IllegalArgumentException("Illegal value: " + value);
1:       }
0:       this.user1 = user1;
0:       this.user2 = user2;
1:       this.value = value;
1:     }
1: 
0:     public User getUser1() {
0:       return user1;
1:     }
1: 
0:     public User getUser2() {
0:       return user2;
1:     }
1: 
1:     public double getValue() {
1:       return value;
1:     }
1: 
1:     @Override
1:     public String toString() {
0:       return "UserUserSimilarity[" + user1 + ',' + user2 + ':' + value + ']';
1:     }
1: 
1:     /**
0:      * Defines an ordering from highest similarity to lowest.
1:      */
1:     @Override
1:     public int compareTo(UserUserSimilarity other) {
0:       double otherValue = other.value;
1:       return value > otherValue ? -1 : value < otherValue ? 1 : 0;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object other) {
1:       if (!(other instanceof UserUserSimilarity)) {
1:         return false;
1:       }
1:       UserUserSimilarity otherSimilarity = (UserUserSimilarity) other;
0:       return otherSimilarity.user1.equals(user1) && otherSimilarity.user2.equals(user2) && otherSimilarity.value == value;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
0:       return user1.hashCode() ^ user2.hashCode() ^ RandomUtils.hashDouble(value);
1:     }
1: 
1:   }
1: 
0:   private static final class DataModelSimilaritiesIterator implements Iterator<UserUserSimilarity> {
1: 
1:     private final UserSimilarity otherSimilarity;
0:     private final List<? extends User> users;
0:     private final int size;
1:     private int i;
0:     private User user1;
1:     private int j;
1: 
0:     private DataModelSimilaritiesIterator(UserSimilarity otherSimilarity, List<? extends User> users) {
1:       this.otherSimilarity = otherSimilarity;
0:       this.users = users;
0:       this.size = users.size();
1:       i = 0;
0:       user1 = users.get(0);
1:       j = 1;
1:     }
1: 
1:     @Override
0:     public boolean hasNext() {
0:       return i < size - 1;
1:     }
1: 
1:     @Override
0:     public UserUserSimilarity next() {
0:       if (!hasNext()) {
0:         throw new NoSuchElementException();
1:       }
0:       User user2 = users.get(j);
0:       double similarity;
0:       try {
0:         similarity = otherSimilarity.userSimilarity(user1, user2);
0:       } catch (TasteException te) {
0:         // ugly:
0:         throw new RuntimeException(te);
1:       }
0:       UserUserSimilarity result = new UserUserSimilarity(user1, user2, similarity);
0:       j++;
0:       if (j == size) {
0:         i++;
0:         user1 = users.get(i);
0:         j = i + 1;
1:       }
0:       return result;
1:     }
1: 
1:     @Override
0:     public void remove() {
1:       throw new UnsupportedOperationException();
1:     }
1: 
1:   }
1: 
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
1:   public GenericUserSimilarity(UserSimilarity otherSimilarity,
0:                                DataModel dataModel, int maxToKeep) throws TasteException {
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.common.Refreshable;
0: import org.apache.mahout.cf.taste.common.TasteException;
0: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
0: import org.apache.mahout.cf.taste.impl.recommender.TopItems;
0: import org.apache.mahout.cf.taste.model.DataModel;
0: import org.apache.mahout.cf.taste.similarity.PreferenceInferrer;
0: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
0: import org.apache.mahout.common.RandomUtils;
0: import org.apache.mahout.common.iterator.IteratorIterable;
0: import org.apache.mahout.common.iterator.IteratorUtils;
0: 
0:   
0:   
0:   
0:     Iterable<UserUserSimilarity> keptSimilarities = TopItems.getTopUserUserSimilarities(maxToKeep,
0:       similarities);
0:   
0:   
0:   public GenericUserSimilarity(UserSimilarity otherSimilarity, DataModel dataModel, int maxToKeep) throws TasteException {
0:     Iterable<UserUserSimilarity> keptSimilarities = TopItems.getTopUserUserSimilarities(maxToKeep,
0:       new IteratorIterable<UserUserSimilarity>(it));
0:   
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   // Do nothing
0:   
0:     
0:     
0:       if (Double.isNaN(value) || (value < -1.0) || (value > 1.0)) {
0:     
0:     
0:     
0:     
0:     
0:     
0:       return (otherSimilarity.getUserID1() == userID1) && (otherSimilarity.getUserID2() == userID2)
0:              && (otherSimilarity.getValue() == value);
0:     
0:     
0:   
0:     
0:     
/////////////////////////////////////////////////////////////////////////
0:     
0:     
/////////////////////////////////////////////////////////////////////////
0:     
0:     
0:   
============================================================================