1:ffc7fab: /**
1:ffc7fab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ffc7fab:  * contributor license agreements.  See the NOTICE file distributed with
1:ffc7fab:  * this work for additional information regarding copyright ownership.
1:ffc7fab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ffc7fab:  * (the "License"); you may not use this file except in compliance with
1:ffc7fab:  * the License.  You may obtain a copy of the License at
1:ffc7fab:  *
1:ffc7fab:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ffc7fab:  *
1:ffc7fab:  * Unless required by applicable law or agreed to in writing, software
1:ffc7fab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ffc7fab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ffc7fab:  * See the License for the specific language governing permissions and
1:ffc7fab:  * limitations under the License.
1:ffc7fab:  */
5:ffc7fab: 
1:ffc7fab: package org.apache.mahout.math.hadoop.stochasticsvd.qr;
1:ffc7fab: 
1:ffc7fab: import java.io.Closeable;
1:ffc7fab: import java.io.IOException;
1:ffc7fab: import java.util.Iterator;
1:ffc7fab: import java.util.List;
1:4194a28: import java.util.NoSuchElementException;
1:ffc7fab: 
1:67a531e: import org.apache.commons.lang3.Validate;
1:ffc7fab: import org.apache.mahout.common.iterator.CopyConstructorIterator;
1:ffc7fab: import org.apache.mahout.math.DenseVector;
1:ffc7fab: import org.apache.mahout.math.Vector;
1:ffc7fab: import org.apache.mahout.math.VectorWritable;
1:ffc7fab: import org.apache.mahout.math.hadoop.stochasticsvd.DenseBlockWritable;
1:f43adfe: import org.apache.mahout.math.UpperTriangular;
1:ffc7fab: 
1:ffc7fab: import com.google.common.collect.Lists;
1:ffc7fab: 
1:ffc7fab: /**
1:ffc7fab:  * Second/last step of QR iterations. Takes input of qtHats and rHats and
1:ffc7fab:  * provides iterator to pull ready rows of final Q.
1:ffc7fab:  * 
1:ffc7fab:  */
1:ffc7fab: public class QRLastStep implements Closeable, Iterator<Vector> {
1:ffc7fab: 
1:1499411:   private final Iterator<DenseBlockWritable> qHatInput;
1:ffc7fab: 
1:ffc7fab:   private final List<UpperTriangular> mRs = Lists.newArrayList();
1:ffc7fab:   private final int blockNum;
1:ffc7fab:   private double[][] mQt;
1:ffc7fab:   private int cnt;
1:ffc7fab:   private int r;
1:ffc7fab:   private int kp;
1:ffc7fab:   private Vector qRow;
1:ffc7fab: 
1:ffc7fab:   /**
1:ffc7fab:    * 
1:ffc7fab:    * @param qHatInput
1:ffc7fab:    *          the Q-Hat input that was output in the first step
1:ffc7fab:    * @param rHatInput
1:ffc7fab:    *          all RHat outputs int the group in order of groups
1:ffc7fab:    * @param blockNum
1:ffc7fab:    *          our RHat number in the group
1:ffc7fab:    */
1:ffc7fab:   public QRLastStep(Iterator<DenseBlockWritable> qHatInput,
1:ffc7fab:                     Iterator<VectorWritable> rHatInput,
1:1499411:                     int blockNum) {
1:ffc7fab:     this.blockNum = blockNum;
1:ffc7fab:     this.qHatInput = qHatInput;
1:5a2250c:     /*
1:5a2250c:      * in this implementation we actually preload all Rs into memory to make R
1:5a2250c:      * sequence modifications more efficient.
1:5a2250c:      */
1:ffc7fab:     int block = 0;
1:ffc7fab:     while (rHatInput.hasNext()) {
1:ffc7fab:       Vector value = rHatInput.next().get();
1:ffc7fab:       if (block < blockNum && block > 0) {
1:ffc7fab:         GivensThinSolver.mergeR(mRs.get(0), new UpperTriangular(value));
1:ffc7fab:       } else {
1:ffc7fab:         mRs.add(new UpperTriangular(value));
1:ffc7fab:       }
1:ffc7fab:       block++;
1:ffc7fab:     }
1:ffc7fab: 
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   private boolean loadNextQt() {
1:ffc7fab:     boolean more = qHatInput.hasNext();
1:1499411:     if (!more) {
1:ffc7fab:       return false;
1:1499411:     }
1:1499411:     DenseBlockWritable v = qHatInput.next();
1:ffc7fab:     mQt =
1:ffc7fab:       GivensThinSolver
1:ffc7fab:         .computeQtHat(v.getBlock(),
1:ffc7fab:                       blockNum == 0 ? 0 : 1,
1:87c15be:                       new CopyConstructorIterator<>(mRs.iterator()));
1:ffc7fab:     r = mQt[0].length;
1:ffc7fab:     kp = mQt.length;
1:ffc7fab:     if (qRow == null) {
1:ffc7fab:       qRow = new DenseVector(kp);
1:ffc7fab:     }
1:ffc7fab:     return true;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public boolean hasNext() {
1:ffc7fab:     if (mQt != null && cnt == r) {
1:ffc7fab:       mQt = null;
1:ffc7fab:     }
1:ffc7fab:     boolean result = true;
1:ffc7fab:     if (mQt == null) {
1:ffc7fab:       result = loadNextQt();
1:ffc7fab:       cnt = 0;
1:ffc7fab:     }
1:ffc7fab:     return result;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public Vector next() {
1:4194a28:     if (!hasNext()) {
1:4194a28:       throw new NoSuchElementException();
1:4194a28:     }
1:ffc7fab:     Validate.isTrue(hasNext(), "Q input overrun");
1:5a2250c:     /*
1:5a2250c:      * because Q blocks are initially stored in inverse order
1:5a2250c:      */
1:5a2250c:     int qRowIndex = r - cnt - 1; 
1:1499411:     for (int j = 0; j < kp; j++) {
1:ffc7fab:       qRow.setQuick(j, mQt[j][qRowIndex]);
1:1499411:     }
1:ffc7fab:     cnt++;
1:ffc7fab:     return qRow;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public void remove() {
1:ffc7fab:     throw new UnsupportedOperationException();
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public void close() throws IOException {
1:ffc7fab:     mQt = null;
1:ffc7fab:     mRs.clear();
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                       new CopyConstructorIterator<>(mRs.iterator()));
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:f43adfe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.UpperTriangular;
commit:5a2250c
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * in this implementation we actually preload all Rs into memory to make R
1:      * sequence modifications more efficient.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * because Q blocks are initially stored in inverse order
1:      */
1:     int qRowIndex = r - cnt - 1; 
/////////////////////////////////////////////////////////////////////////
commit:ffc7fab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.stochasticsvd.qr;
1: 
1: import java.io.Closeable;
1: import java.io.IOException;
1: import java.util.Iterator;
1: import java.util.List;
1: 
0: import org.apache.commons.lang.Validate;
1: import org.apache.mahout.common.iterator.CopyConstructorIterator;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.hadoop.stochasticsvd.DenseBlockWritable;
0: import org.apache.mahout.math.hadoop.stochasticsvd.UpperTriangular;
1: 
1: import com.google.common.collect.Lists;
1: 
1: /**
1:  * Second/last step of QR iterations. Takes input of qtHats and rHats and
1:  * provides iterator to pull ready rows of final Q.
1:  * 
1:  */
1: public class QRLastStep implements Closeable, Iterator<Vector> {
1: 
0:   private Iterator<DenseBlockWritable> qHatInput;
1: 
1:   private final List<UpperTriangular> mRs = Lists.newArrayList();
1:   private final int blockNum;
1:   private double[][] mQt;
1:   private int cnt;
1:   private int r;
1:   private int kp;
1:   private Vector qRow;
1: 
1:   /**
1:    * 
1:    * @param qHatInput
1:    *          the Q-Hat input that was output in the first step
1:    * @param rHatInput
1:    *          all RHat outputs int the group in order of groups
1:    * @param blockNum
1:    *          our RHat number in the group
0:    * @throws IOException
1:    */
1:   public QRLastStep(Iterator<DenseBlockWritable> qHatInput,
1:                     Iterator<VectorWritable> rHatInput,
0:                     int blockNum) throws IOException {
0:     super();
1:     this.blockNum = blockNum;
1:     this.qHatInput = qHatInput;
0:     // in this implementation we actually preload all Rs into memory to make R
0:     // sequence modifications more efficient.
1:     int block = 0;
1:     while (rHatInput.hasNext()) {
1:       Vector value = rHatInput.next().get();
1:       if (block < blockNum && block > 0) {
1:         GivensThinSolver.mergeR(mRs.get(0), new UpperTriangular(value));
1:       } else {
1:         mRs.add(new UpperTriangular(value));
1:       }
1:       block++;
1:     }
1: 
1:   }
1: 
1:   private boolean loadNextQt() {
0:     DenseBlockWritable v = new DenseBlockWritable();
1: 
1:     boolean more = qHatInput.hasNext();
0:     if (!more)
1:       return false;
1: 
0:     v = qHatInput.next();
1: 
1:     mQt =
1:       GivensThinSolver
1:         .computeQtHat(v.getBlock(),
1:                       blockNum == 0 ? 0 : 1,
0:                       new CopyConstructorIterator<UpperTriangular>(mRs
0:                         .iterator()));
1:     r = mQt[0].length;
1:     kp = mQt.length;
1:     if (qRow == null) {
1:       qRow = new DenseVector(kp);
1:     }
1:     return true;
1:   }
1: 
1:   @Override
1:   public boolean hasNext() {
1:     boolean result = true;
1:     if (mQt != null && cnt == r) {
1:       mQt = null;
1:     }
1:     if (mQt == null) {
1:       result = loadNextQt();
1:       cnt = 0;
1:     }
1:     return result;
1:   }
1: 
1:   @Override
1:   public Vector next() {
1:     Validate.isTrue(hasNext(), "Q input overrun");
0:     int qRowIndex = r - cnt - 1; // because QHats are initially stored in
0:     for (int j = 0; j < kp; j++)
1:       qRow.setQuick(j, mQt[j][qRowIndex]);
1:     cnt++;
1:     return qRow;
1:   }
1: 
1:   @Override
1:   public void remove() {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public void close() throws IOException {
1:     mQt = null;
1: 
1:     mRs.clear();
1:   }
1: 
1: }
author:smarthi
-------------------------------------------------------------------------------
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.Validate;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
1:     if (!hasNext()) {
1:       throw new NoSuchElementException();
1:     }
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   private final Iterator<DenseBlockWritable> qHatInput;
/////////////////////////////////////////////////////////////////////////
1:                     int blockNum) {
/////////////////////////////////////////////////////////////////////////
1:     if (!more) {
1:     }
1:     DenseBlockWritable v = qHatInput.next();
/////////////////////////////////////////////////////////////////////////
0:     boolean result = true;
/////////////////////////////////////////////////////////////////////////
1:     for (int j = 0; j < kp; j++) {
1:     }
============================================================================