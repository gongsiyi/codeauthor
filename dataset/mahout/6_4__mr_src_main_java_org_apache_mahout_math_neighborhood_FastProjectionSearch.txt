1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:8649ac2: package org.apache.mahout.math.neighborhood;
3:8649ac2: 
1:8649ac2: import java.util.Collections;
1:8649ac2: import java.util.Iterator;
1:8649ac2: import java.util.List;
1:8649ac2: import java.util.Set;
1:8649ac2: 
1:8649ac2: import com.google.common.base.Preconditions;
1:8649ac2: import com.google.common.collect.AbstractIterator;
1:8649ac2: import com.google.common.collect.Iterables;
1:8649ac2: import com.google.common.collect.Lists;
1:8649ac2: import com.google.common.collect.Sets;
1:8649ac2: import org.apache.mahout.common.distance.DistanceMeasure;
1:8649ac2: import org.apache.mahout.math.Matrix;
1:8649ac2: import org.apache.mahout.math.Vector;
1:4edc814: import org.apache.mahout.math.random.RandomProjector;
1:8649ac2: import org.apache.mahout.math.random.WeightedThing;
1:8649ac2: 
2:8649ac2: /**
1:8649ac2:  * Does approximate nearest neighbor search by projecting the vectors similar to ProjectionSearch.
1:8649ac2:  * The main difference between this class and the ProjectionSearch is the use of sorted arrays
1:8649ac2:  * instead of binary search trees to implement the sets of scalar projections.
1:8649ac2:  *
1:8649ac2:  * Instead of taking log n time to add a vector to each of the vectors, * the pending additions are
1:8649ac2:  * kept separate and are searched using a brute search. When there are "enough" pending additions,
1:8649ac2:  * they're committed into the main pool of vectors.
2:8649ac2:  */
1:8649ac2: public class FastProjectionSearch extends UpdatableSearcher {
1:8649ac2:   // The list of vectors that have not yet been projected (that are pending).
1:4ca6b86:   private final List<Vector> pendingAdditions = Lists.newArrayList();
1:8649ac2: 
1:8649ac2:   // The list of basis vectors. Populated when the first vector's dimension is know by calling
1:8649ac2:   // initialize once.
1:8649ac2:   private Matrix basisMatrix = null;
1:8649ac2: 
1:8649ac2:   // The list of sorted lists of scalar projections. The outer list has one entry for each basis
1:8649ac2:   // vector that all the other vectors will be projected on.
1:8649ac2:   // For each basis vector, the inner list has an entry for each vector that has been projected.
1:8649ac2:   // These entries are WeightedThing<Vector> where the weight is the value of the scalar
1:8649ac2:   // projection and the value is the vector begin referred to.
1:8649ac2:   private List<List<WeightedThing<Vector>>> scalarProjections;
1:8649ac2: 
1:8649ac2:   // The number of projection used for approximating the distance.
1:4ca6b86:   private final int numProjections;
1:8649ac2: 
1:8649ac2:   // The number of elements to keep on both sides of the closest estimated distance as possible
1:8649ac2:   // candidates for the best actual distance.
1:4ca6b86:   private final int searchSize;
1:8649ac2: 
1:8649ac2:   // Initially, the dimension of the vectors searched by this searcher is unknown. After adding
1:8649ac2:   // the first vector, the basis will be initialized. This marks whether initialization has
1:8649ac2:   // happened or not so we only do it once.
1:8649ac2:   private boolean initialized = false;
1:8649ac2: 
1:8649ac2:   // Removing vectors from the searcher is done lazily to avoid the linear time cost of removing
1:8649ac2:   // elements from an array. This member keeps track of the number of removed vectors (marked as
1:8649ac2:   // "impossible" values in the array) so they can be removed when updating the structure.
1:8649ac2:   private int numPendingRemovals = 0;
1:8649ac2: 
1:4ca6b86:   private static final double ADDITION_THRESHOLD = 0.05;
1:4ca6b86:   private static final double REMOVAL_THRESHOLD = 0.02;
1:8649ac2: 
1:8649ac2:   public FastProjectionSearch(DistanceMeasure distanceMeasure, int numProjections, int searchSize) {
1:8649ac2:     super(distanceMeasure);
1:8649ac2:     Preconditions.checkArgument(numProjections > 0 && numProjections < 100,
1:cd167f9:         "Unreasonable value for number of projections. Must be: 0 < numProjections < 100");
1:8649ac2:     this.numProjections = numProjections;
1:8649ac2:     this.searchSize = searchSize;
1:8649ac2:     scalarProjections = Lists.newArrayListWithCapacity(numProjections);
1:8649ac2:     for (int i = 0; i < numProjections; ++i) {
1:8649ac2:       scalarProjections.add(Lists.<WeightedThing<Vector>>newArrayList());
4:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   private void initialize(int numDimensions) {
1:8649ac2:     if (initialized) {
1:8649ac2:       return;
1:8649ac2:     }
1:8649ac2:     basisMatrix = RandomProjector.generateBasisNormal(numProjections, numDimensions);
1:8649ac2:     initialized = true;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Add a new Vector to the Searcher that will be checked when getting
1:8649ac2:    * the nearest neighbors.
1:8649ac2:    * <p/>
1:8649ac2:    * The vector IS NOT CLONED. Do not modify the vector externally otherwise the internal
1:8649ac2:    * Searcher data structures could be invalidated.
1:8649ac2:    */
2:8649ac2:   @Override
1:8649ac2:   public void add(Vector vector) {
1:8649ac2:     initialize(vector.size());
1:8649ac2:     pendingAdditions.add(vector);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Returns the number of WeightedVectors being searched for nearest neighbors.
1:8649ac2:    */
1:8649ac2:   @Override
1:8649ac2:   public int size() {
1:8649ac2:     return pendingAdditions.size() + scalarProjections.get(0).size() - numPendingRemovals;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * When querying the Searcher for the closest vectors, a list of WeightedThing<Vector>s is
1:8649ac2:    * returned. The value of the WeightedThing is the neighbor and the weight is the
1:8649ac2:    * the distance (calculated by some metric - see a concrete implementation) between the query
1:8649ac2:    * and neighbor.
1:8649ac2:    * The actual type of vector in the pair is the same as the vector added to the Searcher.
1:8649ac2:    */
1:8649ac2:   @Override
1:8649ac2:   public List<WeightedThing<Vector>> search(Vector query, int limit) {
1:8649ac2:     reindex(false);
1:8649ac2: 
1:8649ac2:     Set<Vector> candidates = Sets.newHashSet();
1:8649ac2:     Vector projection = basisMatrix.times(query);
1:8649ac2:     for (int i = 0; i < basisMatrix.numRows(); ++i) {
1:8649ac2:       List<WeightedThing<Vector>> currProjections = scalarProjections.get(i);
2:8649ac2:       int middle = Collections.binarySearch(currProjections,
2:8649ac2:           new WeightedThing<Vector>(projection.get(i)));
1:8649ac2:       if (middle < 0) {
1:8649ac2:         middle = -(middle + 1);
1:8649ac2:       }
1:8649ac2:       for (int j = Math.max(0, middle - searchSize);
1:8649ac2:            j < Math.min(currProjections.size(), middle + searchSize + 1); ++j) {
1:8649ac2:         if (currProjections.get(j).getValue() == null) {
1:8649ac2:           continue;
1:8649ac2:         }
1:8649ac2:         candidates.add(currProjections.get(j).getValue());
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2: 
1:8649ac2:     List<WeightedThing<Vector>> top =
1:8649ac2:         Lists.newArrayListWithCapacity(candidates.size() + pendingAdditions.size());
1:8649ac2:     for (Vector candidate : Iterables.concat(candidates, pendingAdditions)) {
1:87c15be:       top.add(new WeightedThing<>(candidate, distanceMeasure.distance(candidate, query)));
1:8649ac2:     }
1:8649ac2:     Collections.sort(top);
1:8649ac2: 
1:8649ac2:     return top.subList(0, Math.min(top.size(), limit));
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Returns the closest vector to the query.
1:8649ac2:    * When only one the nearest vector is needed, use this method, NOT search(query, limit) because
1:8649ac2:    * it's faster (less overhead).
1:8649ac2:    *
1:8649ac2:    * @param query the vector to search for
1:8649ac2:    * @param differentThanQuery if true, returns the closest vector different than the query (this
1:8649ac2:    *                           only matters if the query is among the searched vectors), otherwise,
1:8649ac2:    *                           returns the closest vector to the query (even the same vector).
1:8649ac2:    * @return the weighted vector closest to the query
1:8649ac2:    */
1:8649ac2:   @Override
1:8649ac2:   public WeightedThing<Vector> searchFirst(Vector query, boolean differentThanQuery) {
1:8649ac2:     reindex(false);
1:8649ac2: 
1:8649ac2:     double bestDistance = Double.POSITIVE_INFINITY;
1:8649ac2:     Vector bestVector = null;
1:8649ac2: 
1:8649ac2:     Vector projection = basisMatrix.times(query);
1:8649ac2:     for (int i = 0; i < basisMatrix.numRows(); ++i) {
1:8649ac2:       List<WeightedThing<Vector>> currProjections = scalarProjections.get(i);
1:8649ac2:       int middle = Collections.binarySearch(currProjections,
1:8649ac2:           new WeightedThing<Vector>(projection.get(i)));
1:8649ac2:       if (middle < 0) {
1:8649ac2:         middle = -(middle + 1);
1:8649ac2:       }
1:8649ac2:       for (int j = Math.max(0, middle - searchSize);
1:8649ac2:            j < Math.min(currProjections.size(), middle + searchSize + 1); ++j) {
1:8649ac2:         if (currProjections.get(j).getValue() == null) {
1:8649ac2:           continue;
1:8649ac2:         }
1:8649ac2:         Vector vector = currProjections.get(j).getValue();
1:8649ac2:         double distance = distanceMeasure.distance(vector, query);
1:8649ac2:         if (distance < bestDistance && (!differentThanQuery || !vector.equals(query))) {
1:8649ac2:           bestDistance = distance;
1:8649ac2:           bestVector = vector;
1:8649ac2:         }
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2: 
1:4edc814:     for (Vector vector : pendingAdditions) {
1:4edc814:       double distance = distanceMeasure.distance(vector, query);
1:4edc814:       if (distance < bestDistance && (!differentThanQuery || !vector.equals(query))) {
1:4edc814:         bestDistance = distance;
1:4edc814:         bestVector = vector;
1:4edc814:       }
1:4edc814:     }
1:4edc814: 
1:87c15be:     return new WeightedThing<>(bestVector, bestDistance);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:9899396:   public boolean remove(Vector vector, double epsilon) {
1:9899396:     WeightedThing<Vector> closestPair = searchFirst(vector, false);
1:9899396:     if (distanceMeasure.distance(closestPair.getValue(), vector) > epsilon) {
1:8649ac2:       return false;
1:8649ac2:     }
1:8649ac2: 
1:8649ac2:     boolean isProjected = true;
1:4ca6b86:     Vector projection = basisMatrix.times(vector);
1:8649ac2:     for (int i = 0; i < basisMatrix.numRows(); ++i) {
1:8649ac2:       List<WeightedThing<Vector>> currProjections = scalarProjections.get(i);
1:87c15be:       WeightedThing<Vector> searchedThing = new WeightedThing<>(projection.get(i));
1:9899396:       int middle = Collections.binarySearch(currProjections, searchedThing);
1:8649ac2:       if (middle < 0) {
1:8649ac2:         isProjected = false;
1:8649ac2:         break;
1:8649ac2:       }
1:4edc814:       // Elements to be removed are kept in the sorted array until the next reindex, but their inner vector
1:4edc814:       // is set to null.
1:9899396:       scalarProjections.get(i).set(middle, searchedThing);
1:8649ac2:     }
1:8649ac2:     if (isProjected) {
1:8649ac2:       ++numPendingRemovals;
1:8649ac2:       return true;
1:8649ac2:     }
1:8649ac2: 
1:8649ac2:     for (int i = 0; i < pendingAdditions.size(); ++i) {
1:9899396:       if (pendingAdditions.get(i).equals(vector)) {
1:8649ac2:         pendingAdditions.remove(i);
1:8649ac2:         break;
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2:     return true;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   private void reindex(boolean force) {
1:8649ac2:     int numProjected = scalarProjections.get(0).size();
1:9899396:     if (force || pendingAdditions.size() > ADDITION_THRESHOLD * numProjected
1:9899396:         || numPendingRemovals > REMOVAL_THRESHOLD * numProjected) {
1:8649ac2: 
1:8649ac2:       // We only need to copy the first list because when iterating we use only that list for the Vector
1:8649ac2:       // references.
1:8649ac2:       // see public Iterator<Vector> iterator()
1:8649ac2:       List<List<WeightedThing<Vector>>> scalarProjections = Lists.newArrayListWithCapacity(numProjections);
1:8649ac2:       for (int i = 0; i < numProjections; ++i) {
1:8649ac2:         if (i == 0) {
1:8649ac2:           scalarProjections.add(Lists.newArrayList(this.scalarProjections.get(i)));
1:8649ac2:         } else {
1:8649ac2:           scalarProjections.add(this.scalarProjections.get(i));
1:8649ac2:         }
1:8649ac2:       }
1:8649ac2: 
1:8649ac2:       // Project every pending vector onto every basis vector.
1:8649ac2:       for (Vector pending : pendingAdditions) {
1:8649ac2:         Vector projection = basisMatrix.times(pending);
1:8649ac2:         for (int i = 0; i < numProjections; ++i) {
1:87c15be:           scalarProjections.get(i).add(new WeightedThing<>(pending, projection.get(i)));
1:8649ac2:         }
1:8649ac2:       }
1:8649ac2:       pendingAdditions.clear();
1:8649ac2:       // For each basis vector, sort the resulting list (for binary search) and remove the number
1:8649ac2:       // of pending removals (it's the same for every basis vector) at the end (the weights are
1:8649ac2:       // set to Double.POSITIVE_INFINITY when removing).
1:8649ac2:       for (int i = 0; i < numProjections; ++i) {
1:8649ac2:         List<WeightedThing<Vector>> currProjections = scalarProjections.get(i);
1:8649ac2:         for (WeightedThing<Vector> v : currProjections) {
1:8649ac2:           if (v.getValue() == null) {
1:8649ac2:             v.setWeight(Double.POSITIVE_INFINITY);
1:8649ac2:           }
1:8649ac2:         }
1:8649ac2:         Collections.sort(currProjections);
1:8649ac2:         for (int j = 0; j < numPendingRemovals; ++j) {
1:8649ac2:           currProjections.remove(currProjections.size() - 1);
1:8649ac2:         }
1:8649ac2:       }
1:8649ac2:       numPendingRemovals = 0;
1:8649ac2: 
1:8649ac2:       this.scalarProjections = scalarProjections;
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Override
1:8649ac2:   public void clear() {
1:8649ac2:     pendingAdditions.clear();
1:8649ac2:     for (int i = 0; i < numProjections; ++i) {
1:8649ac2:       scalarProjections.get(i).clear();
1:8649ac2:     }
1:8649ac2:     numPendingRemovals = 0;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * This iterates on the snapshot of the contents first instantiated regardless of any future modifications.
1:8649ac2:    * Changes done after the iterator is created will not be visible to the iterator but will be visible
1:8649ac2:    * when searching.
1:8649ac2:    * @return iterator through the vectors in this searcher.
1:8649ac2:    */
1:8649ac2:   @Override
1:8649ac2:   public Iterator<Vector> iterator() {
1:8649ac2:     reindex(true);
1:8649ac2:     return new AbstractIterator<Vector>() {
1:335a993:       private final Iterator<WeightedThing<Vector>> data = scalarProjections.get(0).iterator();
1:9899396:       @Override
1:9899396:       protected Vector computeNext() {
1:9899396:         do {
1:9899396:           if (!data.hasNext()) {
1:9899396:             return endOfData();
1:8649ac2:           }
1:4ca6b86:           WeightedThing<Vector> next = data.next();
1:9899396:           if (next.getValue() != null) {
1:9899396:             return next.getValue();
1:9899396:           }
1:9899396:         } while (true);
1:9899396:       }
1:9899396:     };
1:8649ac2:   }
1:8649ac2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       top.add(new WeightedThing<>(candidate, distanceMeasure.distance(candidate, query)));
/////////////////////////////////////////////////////////////////////////
1:     return new WeightedThing<>(bestVector, bestDistance);
/////////////////////////////////////////////////////////////////////////
1:       WeightedThing<Vector> searchedThing = new WeightedThing<>(projection.get(i));
/////////////////////////////////////////////////////////////////////////
1:           scalarProjections.get(i).add(new WeightedThing<>(pending, projection.get(i)));
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:         "Unreasonable value for number of projections. Must be: 0 < numProjections < 100");
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:335a993
/////////////////////////////////////////////////////////////////////////
1:       private final Iterator<WeightedThing<Vector>> data = scalarProjections.get(0).iterator();
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:   private final List<Vector> pendingAdditions = Lists.newArrayList();
/////////////////////////////////////////////////////////////////////////
1:   private final int numProjections;
1:   private final int searchSize;
/////////////////////////////////////////////////////////////////////////
1:   private static final double ADDITION_THRESHOLD = 0.05;
1:   private static final double REMOVAL_THRESHOLD = 0.02;
/////////////////////////////////////////////////////////////////////////
1:     Vector projection = basisMatrix.times(vector);
/////////////////////////////////////////////////////////////////////////
1:           WeightedThing<Vector> next = data.next();
author:dfilimon
-------------------------------------------------------------------------------
commit:9899396
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public boolean remove(Vector vector, double epsilon) {
1:     WeightedThing<Vector> closestPair = searchFirst(vector, false);
1:     if (distanceMeasure.distance(closestPair.getValue(), vector) > epsilon) {
0:     final Vector projection = basisMatrix.times(vector);
0:       WeightedThing<Vector> searchedThing = new WeightedThing<Vector>(projection.get(i));
1:       int middle = Collections.binarySearch(currProjections, searchedThing);
1:       scalarProjections.get(i).set(middle, searchedThing);
/////////////////////////////////////////////////////////////////////////
1:       if (pendingAdditions.get(i).equals(vector)) {
/////////////////////////////////////////////////////////////////////////
1:     if (force || pendingAdditions.size() > ADDITION_THRESHOLD * numProjected
1:         || numPendingRemovals > REMOVAL_THRESHOLD * numProjected) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       Iterator<WeightedThing<Vector>> data = scalarProjections.get(0).iterator();
1:       @Override
1:       protected Vector computeNext() {
0:         WeightedThing<Vector> next;
1:         do {
1:           if (!data.hasNext()) {
1:             return endOfData();
0:           next = data.next();
1:           if (next.getValue() != null) {
1:             return next.getValue();
1:           }
1:         } while (true);
1:       }
1:     };
commit:4edc814
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.random.RandomProjector;
/////////////////////////////////////////////////////////////////////////
1:     for (Vector vector : pendingAdditions) {
1:       double distance = distanceMeasure.distance(vector, query);
1:       if (distance < bestDistance && (!differentThanQuery || !vector.equals(query))) {
1:         bestDistance = distance;
1:         bestVector = vector;
1:       }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:       // Elements to be removed are kept in the sorted array until the next reindex, but their inner vector
1:       // is set to null.
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.neighborhood;
1: 
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.AbstractIterator;
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Sets;
0: import org.apache.mahout.math.random.RandomProjector;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.random.WeightedThing;
1: 
1: /**
1:  * Does approximate nearest neighbor search by projecting the vectors similar to ProjectionSearch.
1:  * The main difference between this class and the ProjectionSearch is the use of sorted arrays
1:  * instead of binary search trees to implement the sets of scalar projections.
1:  *
1:  * Instead of taking log n time to add a vector to each of the vectors, * the pending additions are
1:  * kept separate and are searched using a brute search. When there are "enough" pending additions,
1:  * they're committed into the main pool of vectors.
1:  */
1: public class FastProjectionSearch extends UpdatableSearcher {
1:   // The list of vectors that have not yet been projected (that are pending).
0:   private List<Vector> pendingAdditions = Lists.newArrayList();
1: 
1:   // The list of basis vectors. Populated when the first vector's dimension is know by calling
1:   // initialize once.
1:   private Matrix basisMatrix = null;
1: 
1:   // The list of sorted lists of scalar projections. The outer list has one entry for each basis
1:   // vector that all the other vectors will be projected on.
1:   // For each basis vector, the inner list has an entry for each vector that has been projected.
1:   // These entries are WeightedThing<Vector> where the weight is the value of the scalar
1:   // projection and the value is the vector begin referred to.
1:   private List<List<WeightedThing<Vector>>> scalarProjections;
1: 
1:   // The number of projection used for approximating the distance.
0:   private int numProjections;
1: 
1:   // The number of elements to keep on both sides of the closest estimated distance as possible
1:   // candidates for the best actual distance.
0:   private int searchSize;
1: 
1:   // Initially, the dimension of the vectors searched by this searcher is unknown. After adding
1:   // the first vector, the basis will be initialized. This marks whether initialization has
1:   // happened or not so we only do it once.
1:   private boolean initialized = false;
1: 
0:   // Whether the iterator returned from the searcher was used to modify any of the vectors. This
0:   // flag must be set manually by calling setDirty after said modification so the internal
0:   // structures can be updated.
0:   private boolean dirty = false;
1: 
1:   // Removing vectors from the searcher is done lazily to avoid the linear time cost of removing
1:   // elements from an array. This member keeps track of the number of removed vectors (marked as
1:   // "impossible" values in the array) so they can be removed when updating the structure.
1:   private int numPendingRemovals = 0;
1: 
0:   private final static double ADDITION_THRESHOLD = 0.05;
0:   private final static double REMOVAL_THRESHOLD = 0.02;
1: 
1:   public FastProjectionSearch(DistanceMeasure distanceMeasure, int numProjections, int searchSize) {
1:     super(distanceMeasure);
1:     Preconditions.checkArgument(numProjections > 0 && numProjections < 100,
0:         "Unreasonable value for number of projections");
1:     this.numProjections = numProjections;
1:     this.searchSize = searchSize;
1:     scalarProjections = Lists.newArrayListWithCapacity(numProjections);
1:     for (int i = 0; i < numProjections; ++i) {
1:       scalarProjections.add(Lists.<WeightedThing<Vector>>newArrayList());
1:     }
1:   }
1: 
1:   private void initialize(int numDimensions) {
1:     if (initialized) {
1:       return;
1:     }
1:     basisMatrix = RandomProjector.generateBasisNormal(numProjections, numDimensions);
1:     initialized = true;
1:   }
1: 
1:   /**
1:    * Add a new Vector to the Searcher that will be checked when getting
1:    * the nearest neighbors.
1:    * <p/>
1:    * The vector IS NOT CLONED. Do not modify the vector externally otherwise the internal
1:    * Searcher data structures could be invalidated.
1:    */
1:   @Override
1:   public void add(Vector vector) {
1:     initialize(vector.size());
1:     pendingAdditions.add(vector);
1:   }
1: 
1:   /**
1:    * Returns the number of WeightedVectors being searched for nearest neighbors.
1:    */
1:   @Override
1:   public int size() {
1:     return pendingAdditions.size() + scalarProjections.get(0).size() - numPendingRemovals;
1:   }
1: 
1:   /**
1:    * When querying the Searcher for the closest vectors, a list of WeightedThing<Vector>s is
1:    * returned. The value of the WeightedThing is the neighbor and the weight is the
1:    * the distance (calculated by some metric - see a concrete implementation) between the query
1:    * and neighbor.
1:    * The actual type of vector in the pair is the same as the vector added to the Searcher.
1:    */
1:   @Override
1:   public List<WeightedThing<Vector>> search(Vector query, int limit) {
1:     reindex(false);
1: 
1:     Set<Vector> candidates = Sets.newHashSet();
1:     Vector projection = basisMatrix.times(query);
1:     for (int i = 0; i < basisMatrix.numRows(); ++i) {
1:       List<WeightedThing<Vector>> currProjections = scalarProjections.get(i);
1:       int middle = Collections.binarySearch(currProjections,
1:           new WeightedThing<Vector>(projection.get(i)));
1:       if (middle < 0) {
1:         middle = -(middle + 1);
1:       }
1:       for (int j = Math.max(0, middle - searchSize);
1:            j < Math.min(currProjections.size(), middle + searchSize + 1); ++j) {
1:         if (currProjections.get(j).getValue() == null) {
1:           continue;
1:         }
1:         candidates.add(currProjections.get(j).getValue());
1:       }
1:     }
1: 
1:     List<WeightedThing<Vector>> top =
1:         Lists.newArrayListWithCapacity(candidates.size() + pendingAdditions.size());
1:     for (Vector candidate : Iterables.concat(candidates, pendingAdditions)) {
0:       top.add(new WeightedThing<Vector>(candidate, distanceMeasure.distance(candidate, query)));
1:     }
1:     Collections.sort(top);
1: 
1:     return top.subList(0, Math.min(top.size(), limit));
1:   }
1: 
1:   /**
1:    * Returns the closest vector to the query.
1:    * When only one the nearest vector is needed, use this method, NOT search(query, limit) because
1:    * it's faster (less overhead).
1:    *
1:    * @param query the vector to search for
1:    * @param differentThanQuery if true, returns the closest vector different than the query (this
1:    *                           only matters if the query is among the searched vectors), otherwise,
1:    *                           returns the closest vector to the query (even the same vector).
1:    * @return the weighted vector closest to the query
1:    */
1:   @Override
1:   public WeightedThing<Vector> searchFirst(Vector query, boolean differentThanQuery) {
1:     reindex(false);
1: 
1:     double bestDistance = Double.POSITIVE_INFINITY;
1:     Vector bestVector = null;
1: 
1:     Vector projection = basisMatrix.times(query);
1:     for (int i = 0; i < basisMatrix.numRows(); ++i) {
1:       List<WeightedThing<Vector>> currProjections = scalarProjections.get(i);
1:       int middle = Collections.binarySearch(currProjections,
1:           new WeightedThing<Vector>(projection.get(i)));
1:       if (middle < 0) {
1:         middle = -(middle + 1);
1:       }
1:       for (int j = Math.max(0, middle - searchSize);
1:            j < Math.min(currProjections.size(), middle + searchSize + 1); ++j) {
1:         if (currProjections.get(j).getValue() == null) {
1:           continue;
1:         }
1:         Vector vector = currProjections.get(j).getValue();
1:         double distance = distanceMeasure.distance(vector, query);
1:         if (distance < bestDistance && (!differentThanQuery || !vector.equals(query))) {
1:           bestDistance = distance;
1:           bestVector = vector;
1:         }
1:       }
1:     }
1: 
0:     return new WeightedThing<Vector>(bestVector, bestDistance);
1:   }
1: 
1:   @Override
0:   public boolean remove(Vector v, double epsilon) {
0:     WeightedThing<Vector> closestPair = searchFirst(v, false);
0:     if (distanceMeasure.distance(closestPair.getValue(), v) > epsilon) {
1:       return false;
1:     }
1: 
1:     boolean isProjected = true;
0:     final Vector projection = basisMatrix.times(v);
1:     for (int i = 0; i < basisMatrix.numRows(); ++i) {
1:       List<WeightedThing<Vector>> currProjections = scalarProjections.get(i);
1:       int middle = Collections.binarySearch(currProjections,
1:           new WeightedThing<Vector>(projection.get(i)));
1:       if (middle < 0) {
1:         isProjected = false;
1:         break;
1:       }
0:       double oldWeight = currProjections.get(middle).getWeight();
0:       scalarProjections.get(i).set(middle, new WeightedThing<Vector>(oldWeight));
1:     }
1:     if (isProjected) {
1:       ++numPendingRemovals;
1:       return true;
1:     }
1: 
1:     for (int i = 0; i < pendingAdditions.size(); ++i) {
0:       if (distanceMeasure.distance(v, pendingAdditions.get(i)) < epsilon) {
1:         pendingAdditions.remove(i);
1:         break;
1:       }
1:     }
1:     return true;
1:   }
1: 
1:   private void reindex(boolean force) {
1:     int numProjected = scalarProjections.get(0).size();
0:     if (force || dirty || pendingAdditions.size() > ADDITION_THRESHOLD * numProjected ||
0:         numPendingRemovals > REMOVAL_THRESHOLD * numProjected) {
1: 
1:       // We only need to copy the first list because when iterating we use only that list for the Vector
1:       // references.
1:       // see public Iterator<Vector> iterator()
1:       List<List<WeightedThing<Vector>>> scalarProjections = Lists.newArrayListWithCapacity(numProjections);
1:       for (int i = 0; i < numProjections; ++i) {
1:         if (i == 0) {
1:           scalarProjections.add(Lists.newArrayList(this.scalarProjections.get(i)));
1:         } else {
1:           scalarProjections.add(this.scalarProjections.get(i));
1:         }
1:       }
1: 
1:       // Project every pending vector onto every basis vector.
1:       for (Vector pending : pendingAdditions) {
1:         Vector projection = basisMatrix.times(pending);
1:         for (int i = 0; i < numProjections; ++i) {
0:           scalarProjections.get(i).add(new WeightedThing<Vector>(pending, projection.get(i)));
1:         }
1:       }
1:       pendingAdditions.clear();
1:       // For each basis vector, sort the resulting list (for binary search) and remove the number
1:       // of pending removals (it's the same for every basis vector) at the end (the weights are
1:       // set to Double.POSITIVE_INFINITY when removing).
1:       for (int i = 0; i < numProjections; ++i) {
1:         List<WeightedThing<Vector>> currProjections = scalarProjections.get(i);
1:         for (WeightedThing<Vector> v : currProjections) {
1:           if (v.getValue() == null) {
1:             v.setWeight(Double.POSITIVE_INFINITY);
1:           }
1:         }
1:         Collections.sort(currProjections);
1:         for (int j = 0; j < numPendingRemovals; ++j) {
1:           currProjections.remove(currProjections.size() - 1);
1:         }
1:       }
1:       numPendingRemovals = 0;
1: 
1:       this.scalarProjections = scalarProjections;
1:     }
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     pendingAdditions.clear();
1:     for (int i = 0; i < numProjections; ++i) {
1:       scalarProjections.get(i).clear();
1:     }
1:     numPendingRemovals = 0;
0:     dirty = false;
1:   }
1: 
1:   /**
1:    * This iterates on the snapshot of the contents first instantiated regardless of any future modifications.
1:    * Changes done after the iterator is created will not be visible to the iterator but will be visible
1:    * when searching.
1:    * @return iterator through the vectors in this searcher.
1:    */
1:   @Override
1:   public Iterator<Vector> iterator() {
1:     reindex(true);
1:     return new AbstractIterator<Vector>() {
0:           Iterator<WeightedThing<Vector>> data = scalarProjections.get(0).iterator();
1:           @Override
0:           protected Vector computeNext() {
0:             WeightedThing<Vector> next;
0:             do {
0:               if (!data.hasNext()) {
0:                 return endOfData();
1:               }
0:               next = data.next();
0:               if (next.getValue() != null) {
0:                 return next.getValue();
1:               }
0:             } while (true);
1:           }
0:         };
1:   }
1: 
1:   /**
0:    * When modifying an element of the searcher through the iterator,
0:    * the user MUST CALL setDirty() to update the internal data structures. Otherwise,
0:    * the internal order of the vectors will change and future results might be wrong.
1:    */
0:   @SuppressWarnings("unused")
0:   public void setDirty() {
0:     dirty = true;
1:   }
1: }
============================================================================