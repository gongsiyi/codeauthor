1:95736dd: /**
1:95736dd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:95736dd:  * contributor license agreements.  See the NOTICE file distributed with
1:95736dd:  * this work for additional information regarding copyright ownership.
1:95736dd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:95736dd:  * (the "License"); you may not use this file except in compliance with
1:95736dd:  * the License.  You may obtain a copy of the License at
1:95736dd:  *
1:95736dd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:95736dd:  *
1:95736dd:  * Unless required by applicable law or agreed to in writing, software
1:95736dd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:95736dd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:95736dd:  * See the License for the specific language governing permissions and
1:95736dd:  * limitations under the License.
1:95736dd:  */
6:95736dd: 
1:e0ec7c1: package org.apache.mahout.classifier.sgd;
1:95736dd: 
1:4ef9d31: import com.google.common.collect.HashMultiset;
1:4ef9d31: import com.google.common.collect.Multiset;
1:95736dd: import org.apache.commons.cli2.CommandLine;
1:95736dd: import org.apache.commons.cli2.Group;
1:95736dd: import org.apache.commons.cli2.Option;
1:95736dd: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:95736dd: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:95736dd: import org.apache.commons.cli2.builder.GroupBuilder;
1:95736dd: import org.apache.commons.cli2.commandline.Parser;
1:95736dd: import org.apache.commons.cli2.util.HelpFormatter;
1:4ef9d31: import org.apache.commons.io.Charsets;
1:95736dd: import org.apache.mahout.classifier.ClassifierResult;
1:5257bc9: import org.apache.mahout.classifier.NewsgroupHelper;
1:95736dd: import org.apache.mahout.classifier.ResultAnalyzer;
1:95736dd: import org.apache.mahout.math.Vector;
1:95736dd: import org.apache.mahout.vectorizer.encoders.Dictionary;
1:95736dd: 
1:4ef9d31: import java.io.File;
1:4ef9d31: import java.io.FileInputStream;
1:4ef9d31: import java.io.IOException;
1:4ef9d31: import java.io.OutputStreamWriter;
1:4ef9d31: import java.io.PrintWriter;
1:4ef9d31: import java.util.ArrayList;
1:4ef9d31: import java.util.Arrays;
1:4ef9d31: import java.util.List;
1:5257bc9: 
1:95736dd: /**
1:95736dd:  * Run the 20 news groups test data through SGD, as trained by {@link org.apache.mahout.classifier.sgd.TrainNewsGroups}.
1:95736dd:  */
1:e0ec7c1: public final class TestNewsGroups {
1:95736dd: 
1:e0ec7c1:   private String inputFile;
1:e0ec7c1:   private String modelFile;
1:95736dd: 
1:95736dd:   private TestNewsGroups() {
3:95736dd:   }
1:95736dd: 
1:95736dd:   public static void main(String[] args) throws IOException {
1:95736dd:     TestNewsGroups runner = new TestNewsGroups();
1:95736dd:     if (runner.parseArgs(args)) {
1:229aeff:       runner.run(new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
1:95736dd:     }
1:95736dd:   }
1:95736dd: 
1:95736dd:   public void run(PrintWriter output) throws IOException {
1:95736dd: 
1:95736dd:     File base = new File(inputFile);
1:95736dd:     //contains the best model
1:229aeff:     OnlineLogisticRegression classifier =
1:229aeff:         ModelSerializer.readBinary(new FileInputStream(modelFile), OnlineLogisticRegression.class);
1:95736dd: 
1:95736dd:     Dictionary newsGroups = new Dictionary();
1:95736dd:     Multiset<String> overallCounts = HashMultiset.create();
1:95736dd: 
1:4ef9d31:     List<File> files = new ArrayList<>();
1:95736dd:     for (File newsgroup : base.listFiles()) {
1:95736dd:       if (newsgroup.isDirectory()) {
1:95736dd:         newsGroups.intern(newsgroup.getName());
1:95736dd:         files.addAll(Arrays.asList(newsgroup.listFiles()));
1:95736dd:       }
1:95736dd:     }
1:229aeff:     System.out.println(files.size() + " test files");
1:95736dd:     ResultAnalyzer ra = new ResultAnalyzer(newsGroups.values(), "DEFAULT");
1:95736dd:     for (File file : files) {
1:95736dd:       String ng = file.getParentFile().getName();
1:95736dd: 
1:95736dd:       int actual = newsGroups.intern(ng);
1:e0ec7c1:       NewsgroupHelper helper = new NewsgroupHelper();
1:3c22856:       //no leak type ensures this is a normal vector
1:3c22856:       Vector input = helper.encodeFeatureVector(file, actual, 0, overallCounts);
1:95736dd:       Vector result = classifier.classifyFull(input);
1:95736dd:       int cat = result.maxValueIndex();
1:95736dd:       double score = result.maxValue();
1:6c86257:       double ll = classifier.logLikelihood(actual, input);
1:6c86257:       ClassifierResult cr = new ClassifierResult(newsGroups.values().get(cat), score, ll);
1:95736dd:       ra.addInstance(newsGroups.values().get(actual), cr);
1:95736dd: 
1:95736dd:     }
1:229aeff:     output.println(ra);
1:95736dd:   }
1:95736dd: 
1:4fbfbc6:   boolean parseArgs(String[] args) {
1:95736dd:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1:95736dd: 
1:95736dd:     Option help = builder.withLongName("help").withDescription("print this list").create();
1:95736dd: 
1:95736dd:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:95736dd:     Option inputFileOption = builder.withLongName("input")
1:95736dd:             .withRequired(true)
1:95736dd:             .withArgument(argumentBuilder.withName("input").withMaximum(1).create())
1:95736dd:             .withDescription("where to get training data")
1:95736dd:             .create();
1:95736dd: 
1:95736dd:     Option modelFileOption = builder.withLongName("model")
1:95736dd:             .withRequired(true)
1:95736dd:             .withArgument(argumentBuilder.withName("model").withMaximum(1).create())
1:95736dd:             .withDescription("where to get a model")
1:95736dd:             .create();
1:95736dd: 
1:95736dd:     Group normalArgs = new GroupBuilder()
1:95736dd:             .withOption(help)
1:95736dd:             .withOption(inputFileOption)
1:95736dd:             .withOption(modelFileOption)
1:95736dd:             .create();
1:95736dd: 
1:95736dd:     Parser parser = new Parser();
1:95736dd:     parser.setHelpOption(help);
1:95736dd:     parser.setHelpTrigger("--help");
1:95736dd:     parser.setGroup(normalArgs);
1:95736dd:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:95736dd:     CommandLine cmdLine = parser.parseAndHelp(args);
1:95736dd: 
1:95736dd:     if (cmdLine == null) {
1:95736dd:       return false;
1:95736dd:     }
1:95736dd: 
1:e0ec7c1:     inputFile = (String) cmdLine.getValue(inputFileOption);
1:e0ec7c1:     modelFile = (String) cmdLine.getValue(modelFileOption);
1:95736dd:     return true;
1:95736dd:   }
1:95736dd: 
1:95736dd: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.HashMultiset;
1: import com.google.common.collect.Multiset;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     List<File> files = new ArrayList<>();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:       //no leak type ensures this is a normal vector
1:       Vector input = helper.encodeFeatureVector(file, actual, 0, overallCounts);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0: import java.io.OutputStreamWriter;
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
1:       runner.run(new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
/////////////////////////////////////////////////////////////////////////
1:     OnlineLogisticRegression classifier =
1:         ModelSerializer.readBinary(new FileInputStream(modelFile), OnlineLogisticRegression.class);
/////////////////////////////////////////////////////////////////////////
1:     System.out.println(files.size() + " test files");
/////////////////////////////////////////////////////////////////////////
1:     output.println(ra);
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:   boolean parseArgs(String[] args) {
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.sgd;
/////////////////////////////////////////////////////////////////////////
1: public final class TestNewsGroups {
1:   private String inputFile;
1:   private String modelFile;
/////////////////////////////////////////////////////////////////////////
1:       NewsgroupHelper helper = new NewsgroupHelper();
0:       Vector input = helper.encodeFeatureVector(file, actual, 0, overallCounts);//no leak type ensures this is a normal vector
/////////////////////////////////////////////////////////////////////////
1:     inputFile = (String) cmdLine.getValue(inputFileOption);
1:     modelFile = (String) cmdLine.getValue(modelFileOption);
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
0:       Vector input = helper.encodeFeatureVector(file, actual, 0, overallCounts); //no leak type ensures this is a normal vector
author:Robin Anil
-------------------------------------------------------------------------------
commit:5257bc9
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: import java.io.PrintWriter;
0: import java.util.Arrays;
0: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.classifier.NewsgroupHelper;
0: import com.google.common.collect.HashMultiset;
0: import com.google.common.collect.Lists;
0: import com.google.common.collect.Multiset;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:6c86257
/////////////////////////////////////////////////////////////////////////
1:       double ll = classifier.logLikelihood(actual, input);
1:       ClassifierResult cr = new ClassifierResult(newsGroups.values().get(cat), score, ll);
commit:f533aef
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:95736dd
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.classifier.sgd;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
0: import com.google.common.collect.HashMultiset;
0: import com.google.common.collect.Lists;
0: import com.google.common.collect.Multiset;
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.commons.cli2.util.HelpFormatter;
1: import org.apache.mahout.classifier.ClassifierResult;
0: import org.apache.mahout.classifier.ConfusionMatrix;
1: import org.apache.mahout.classifier.ResultAnalyzer;
0: import org.apache.mahout.classifier.evaluation.Auc;
0: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.vectorizer.encoders.Dictionary;
1: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: import java.io.PrintWriter;
0: import java.util.Arrays;
0: import java.util.List;
0: import java.util.Locale;
1: 
1: /**
1:  * Run the 20 news groups test data through SGD, as trained by {@link org.apache.mahout.classifier.sgd.TrainNewsGroups}.
1:  */
0: public class TestNewsGroups {
0:   protected String inputFile;
0:   protected String modelFile;
1: 
1: 
1: 
1:   private TestNewsGroups() {
1: 
1:   }
1: 
1:   public static void main(String[] args) throws IOException {
1:     TestNewsGroups runner = new TestNewsGroups();
1:     if (runner.parseArgs(args)) {
0:       runner.run(new PrintWriter(System.out, true));
1:     }
1:   }
1: 
1:   public void run(PrintWriter output) throws IOException {
1: 
1:     File base = new File(inputFile);
1:     //contains the best model
0:     OnlineLogisticRegression classifier = ModelSerializer.readBinary(new FileInputStream(modelFile), OnlineLogisticRegression.class);
1: 
1: 
1:     Dictionary newsGroups = new Dictionary();
1:     Multiset<String> overallCounts = HashMultiset.create();
1: 
0:     List<File> files = Lists.newArrayList();
1:     for (File newsgroup : base.listFiles()) {
1:       if (newsgroup.isDirectory()) {
1:         newsGroups.intern(newsgroup.getName());
1:         files.addAll(Arrays.asList(newsgroup.listFiles()));
1:       }
1:     }
0:     System.out.printf("%d test files\n", files.size());
1:     ResultAnalyzer ra = new ResultAnalyzer(newsGroups.values(), "DEFAULT");
1:     for (File file : files) {
1:       String ng = file.getParentFile().getName();
1: 
1:       int actual = newsGroups.intern(ng);
0:       Vector input = NewsgroupHelper.encodeFeatureVector(file, actual, 0, overallCounts);//no leak type ensures this is a normal vector
1:       Vector result = classifier.classifyFull(input);
1:       int cat = result.maxValueIndex();
1:       double score = result.maxValue();
0:       ClassifierResult cr = new ClassifierResult(newsGroups.values().get(cat), score);
1:       ra.addInstance(newsGroups.values().get(actual), cr);
1: 
1:     }
0:     output.printf("%s\n\n", ra.toString());
1:   }
1: 
0:   protected boolean parseArgs(String[] args) {
1:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1: 
1:     Option help = builder.withLongName("help").withDescription("print this list").create();
1: 
1:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:     Option inputFileOption = builder.withLongName("input")
1:             .withRequired(true)
1:             .withArgument(argumentBuilder.withName("input").withMaximum(1).create())
1:             .withDescription("where to get training data")
1:             .create();
1: 
1:     Option modelFileOption = builder.withLongName("model")
1:             .withRequired(true)
1:             .withArgument(argumentBuilder.withName("model").withMaximum(1).create())
1:             .withDescription("where to get a model")
1:             .create();
1: 
1:     Group normalArgs = new GroupBuilder()
1:             .withOption(help)
1:             .withOption(inputFileOption)
1:             .withOption(modelFileOption)
1:             .create();
1: 
1:     Parser parser = new Parser();
1:     parser.setHelpOption(help);
1:     parser.setHelpTrigger("--help");
1:     parser.setGroup(normalArgs);
1:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:     CommandLine cmdLine = parser.parseAndHelp(args);
1: 
1:     if (cmdLine == null) {
1:       return false;
1:     }
1: 
0:     inputFile = getStringArgument(cmdLine, inputFileOption);
0:     modelFile = getStringArgument(cmdLine, modelFileOption);
1:     return true;
1:   }
1: 
0:   protected boolean getBooleanArgument(CommandLine cmdLine, Option option) {
0:     return cmdLine.hasOption(option);
1:   }
1: 
0:   protected String getStringArgument(CommandLine cmdLine, Option inputFile) {
0:     return (String) cmdLine.getValue(inputFile);
1:   }
1: }
============================================================================