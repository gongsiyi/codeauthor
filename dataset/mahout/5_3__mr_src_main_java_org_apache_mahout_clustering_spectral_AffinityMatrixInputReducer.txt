1:049e7dc: /**
1:049e7dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:049e7dc:  * contributor license agreements.  See the NOTICE file distributed with
1:049e7dc:  * this work for additional information regarding copyright ownership.
1:049e7dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:049e7dc:  * (the "License"); you may not use this file except in compliance with
1:049e7dc:  * the License.  You may obtain a copy of the License at
1:049e7dc:  *
1:049e7dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:049e7dc:  *
1:049e7dc:  * Unless required by applicable law or agreed to in writing, software
1:049e7dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:049e7dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:049e7dc:  * See the License for the specific language governing permissions and
1:049e7dc:  * limitations under the License.
1:049e7dc:  */
1:049e7dc: 
1:b60c909: package org.apache.mahout.clustering.spectral;
2:48d069f: 
1:48d069f: import java.io.IOException;
1:48d069f: 
1:48d069f: import org.apache.hadoop.io.IntWritable;
1:48d069f: import org.apache.hadoop.mapreduce.Reducer;
1:48d069f: import org.apache.mahout.math.RandomAccessSparseVector;
1:48d069f: import org.apache.mahout.math.SequentialAccessSparseVector;
1:48d069f: import org.apache.mahout.math.VectorWritable;
1:48d069f: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1:049e7dc: import org.slf4j.Logger;
1:049e7dc: import org.slf4j.LoggerFactory;
1:48d069f: 
1:48d069f: /**
1:48d069f:  * Tasked with taking each DistributedRowMatrix entry and collecting them
1:48d069f:  * into vectors corresponding to rows. The input and output keys are the same,
1:48d069f:  * corresponding to the row in the ensuing matrix. The matrix entries are
1:48d069f:  * entered into a vector according to the column to which they belong, and
1:48d069f:  * the vector is then given the key corresponding to its row.
1:48d069f:  */
1:049e7dc: public class AffinityMatrixInputReducer
1:049e7dc:     extends Reducer<IntWritable, DistributedRowMatrix.MatrixEntryWritable, IntWritable, VectorWritable> {
1:48d069f: 
1:049e7dc:   private static final Logger log = LoggerFactory.getLogger(AffinityMatrixInputReducer.class);
1:049e7dc: 
1:049e7dc:   @Override
1:049e7dc:   protected void reduce(IntWritable row, Iterable<DistributedRowMatrix.MatrixEntryWritable> values, Context context)
1:049e7dc:     throws IOException, InterruptedException {
1:b60c909:     int size = context.getConfiguration().getInt(Keys.AFFINITY_DIMENSIONS, Integer.MAX_VALUE);
1:049e7dc:     RandomAccessSparseVector out = new RandomAccessSparseVector(size, 100);
1:049e7dc: 
1:049e7dc:     for (DistributedRowMatrix.MatrixEntryWritable element : values) {
1:049e7dc:       out.setQuick(element.getCol(), element.getVal());
1:049e7dc:       if (log.isDebugEnabled()) {
1:049e7dc:         log.debug("(DEBUG - REDUCE) Row[{}], Column[{}], Value[{}]",
1:8396a27:                   row.get(), element.getCol(), element.getVal());
1:049e7dc:       }
1:049e7dc:     }
1:049e7dc:     SequentialAccessSparseVector output = new SequentialAccessSparseVector(out);
1:049e7dc:     context.write(row, new VectorWritable(output));
1:049e7dc:   }
4:48d069f: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.spectral;
/////////////////////////////////////////////////////////////////////////
1:     int size = context.getConfiguration().getInt(Keys.AFFINITY_DIMENSIONS, Integer.MAX_VALUE);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:                   row.get(), element.getCol(), element.getVal());
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1: public class AffinityMatrixInputReducer
1:     extends Reducer<IntWritable, DistributedRowMatrix.MatrixEntryWritable, IntWritable, VectorWritable> {
1:   private static final Logger log = LoggerFactory.getLogger(AffinityMatrixInputReducer.class);
1: 
1:   @Override
1:   protected void reduce(IntWritable row, Iterable<DistributedRowMatrix.MatrixEntryWritable> values, Context context)
1:     throws IOException, InterruptedException {
0:     int size = context.getConfiguration().getInt(EigencutsKeys.AFFINITY_DIMENSIONS, Integer.MAX_VALUE);
1:     RandomAccessSparseVector out = new RandomAccessSparseVector(size, 100);
1: 
1:     for (DistributedRowMatrix.MatrixEntryWritable element : values) {
1:       out.setQuick(element.getCol(), element.getVal());
1:       if (log.isDebugEnabled()) {
1:         log.debug("(DEBUG - REDUCE) Row[{}], Column[{}], Value[{}]",
0:                   new Object[] {row.get(), element.getCol(), element.getVal()});
1:       }
1:     }
1:     SequentialAccessSparseVector output = new SequentialAccessSparseVector(out);
1:     context.write(row, new VectorWritable(output));
1:   }
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:48d069f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.clustering.spectral.common;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Reducer;
0: import org.apache.mahout.clustering.spectral.eigencuts.EigencutsKeys;
0: import org.apache.mahout.clustering.spectral.kmeans.SpectralKMeansDriver;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.hadoop.DistributedRowMatrix;
1: 
1: /**
1:  * Tasked with taking each DistributedRowMatrix entry and collecting them
1:  * into vectors corresponding to rows. The input and output keys are the same,
1:  * corresponding to the row in the ensuing matrix. The matrix entries are
1:  * entered into a vector according to the column to which they belong, and
1:  * the vector is then given the key corresponding to its row.
1:  */
0: public class AffinityMatrixInputReducer extends
0: 		Reducer<IntWritable, DistributedRowMatrix.MatrixEntryWritable, 
0: 				IntWritable, VectorWritable> {
1: 	
0: 	@Override
0: 	protected void reduce(IntWritable row, 
0: 							Iterable<DistributedRowMatrix.MatrixEntryWritable> values,
0: 							Context context) 
0: 							throws IOException, InterruptedException {
0: 		RandomAccessSparseVector out = new RandomAccessSparseVector(
0: 							context.getConfiguration()
0: 							.getInt(EigencutsKeys.AFFINITY_DIMENSIONS, Integer.MAX_VALUE), 100);
1: 
0: 		for (DistributedRowMatrix.MatrixEntryWritable element : values) {
0: 			out.setQuick(element.getCol(), element.getVal());
0: 			if (SpectralKMeansDriver.DEBUG) {
0: 				System.out.println("(DEBUG - REDUCE) Row[" + row.get() + "], " + 
0: 						"Column[" + element.getCol() + "], Value[" + 
0: 						element.getVal() + "]");
1: 			}
1: 		}
0: 		SequentialAccessSparseVector output = new SequentialAccessSparseVector(out);
0: 		context.write(row, new VectorWritable(output));
1: 	}
1: }
============================================================================