2:c8270dc: /**
1:c8270dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c8270dc:  * contributor license agreements.  See the NOTICE file distributed with
1:c8270dc:  * this work for additional information regarding copyright ownership.
1:c8270dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c8270dc:  * (the "License"); you may not use this file except in compliance with
1:c8270dc:  * the License.  You may obtain a copy of the License at
2:c8270dc:  *
1:c8270dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c8270dc:  *
1:c8270dc:  * Unless required by applicable law or agreed to in writing, software
1:c8270dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c8270dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8270dc:  * See the License for the specific language governing permissions and
1:c8270dc:  * limitations under the License.
2:c8270dc:  */
15:c8270dc: 
1:c8270dc: package org.apache.mahout.clustering.evaluation;
1:c8270dc: 
1:c8270dc: import org.apache.hadoop.conf.Configuration;
1:c8270dc: import org.apache.hadoop.fs.Path;
1:c8270dc: import org.apache.mahout.clustering.Cluster;
1:51f58b8: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:e0ec7c1: import org.apache.mahout.common.ClassUtils;
1:c8270dc: import org.apache.mahout.common.distance.DistanceMeasure;
1:a13b4b7: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1:a13b4b7: import org.apache.mahout.common.iterator.sequencefile.PathType;
1:a13b4b7: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable;
1:22b0c3d: import org.apache.mahout.math.RandomAccessSparseVector;
1:c8270dc: import org.apache.mahout.math.Vector;
1:22b0c3d: import org.apache.mahout.math.Vector.Element;
1:c8270dc: import org.apache.mahout.math.VectorWritable;
1:c8270dc: import org.slf4j.Logger;
1:c8270dc: import org.slf4j.LoggerFactory;
1:22b0c3d: 
1:85f9ece: import java.util.ArrayList;
1:85f9ece: import java.util.List;
1:85f9ece: import java.util.Map;
1:85f9ece: import java.util.TreeMap;
1:c8270dc: 
1:c8270dc: public class ClusterEvaluator {
1:22b0c3d:   
1:c8270dc:   private static final Logger log = LoggerFactory.getLogger(ClusterEvaluator.class);
1:22b0c3d:   
1:22b0c3d:   private final Map<Integer,List<VectorWritable>> representativePoints;
1:22b0c3d:   
1:c8270dc:   private final List<Cluster> clusters;
1:22b0c3d:   
1:c8270dc:   private final DistanceMeasure measure;
1:22b0c3d:   
1:c8270dc:   /**
1:c8270dc:    * For testing only
1:c8270dc:    * 
1:c8270dc:    * @param representativePoints
1:22b0c3d:    *          a Map<Integer,List<VectorWritable>> of representative points keyed by clusterId
1:c8270dc:    * @param clusters
1:22b0c3d:    *          a Map<Integer,Cluster> of the clusters keyed by clusterId
1:c8270dc:    * @param measure
1:22b0c3d:    *          an appropriate DistanceMeasure
1:c8270dc:    */
1:22b0c3d:   public ClusterEvaluator(Map<Integer,List<VectorWritable>> representativePoints, List<Cluster> clusters,
1:22b0c3d:       DistanceMeasure measure) {
1:c8270dc:     this.representativePoints = representativePoints;
1:c8270dc:     this.clusters = clusters;
1:c8270dc:     this.measure = measure;
11:c8270dc:   }
1:22b0c3d:   
1:c8270dc:   /**
1:c8270dc:    * Initialize a new instance from job information
1:c8270dc:    * 
1:c8270dc:    * @param conf
1:22b0c3d:    *          a Configuration with appropriate parameters
2:c8270dc:    * @param clustersIn
1:22b0c3d:    *          a String path to the input clusters directory
1:c8270dc:    */
1:e0ec7c1:   public ClusterEvaluator(Configuration conf, Path clustersIn) {
1:22b0c3d:     measure = ClassUtils
1:22b0c3d:         .instantiateAs(conf.get(RepresentativePointsDriver.DISTANCE_MEASURE_KEY), DistanceMeasure.class);
1:c8270dc:     representativePoints = RepresentativePointsMapper.getRepresentativePoints(conf);
1:c8270dc:     clusters = loadClusters(conf, clustersIn);
1:c8270dc:   }
1:22b0c3d:   
1:c8270dc:   /**
1:c8270dc:    * Load the clusters from their sequence files
1:c8270dc:    * 
1:22b0c3d:    * @param clustersIn
1:22b0c3d:    *          a String pathname to the directory containing input cluster files
1:c8270dc:    * @return a List<Cluster> of the clusters
1:c8270dc:    */
1:a13b4b7:   private static List<Cluster> loadClusters(Configuration conf, Path clustersIn) {
1:85f9ece:     List<Cluster> clusters = new ArrayList<>();
1:22b0c3d:     for (ClusterWritable clusterWritable : new SequenceFileDirValueIterable<ClusterWritable>(clustersIn, PathType.LIST,
1:22b0c3d:         PathFilters.logsCRCFilter(), conf)) {
1:51f58b8:       Cluster cluster = clusterWritable.getValue();
1:22b0c3d:       clusters.add(cluster);
1:c8270dc:     }
1:c8270dc:     return clusters;
1:c8270dc:   }
1:22b0c3d:   
1:c8270dc:   /**
1:c8270dc:    * Computes the inter-cluster density as defined in "Mahout In Action"
1:c8270dc:    * 
1:c8270dc:    * @return the interClusterDensity
1:c8270dc:    */
1:c8270dc:   public double interClusterDensity() {
1:22b0c3d:     double max = Double.NEGATIVE_INFINITY;
1:22b0c3d:     double min = Double.POSITIVE_INFINITY;
1:c8270dc:     double sum = 0;
1:c8270dc:     int count = 0;
1:22b0c3d:     Map<Integer,Vector> distances = interClusterDistances();
1:22b0c3d:     for (Vector row : distances.values()) {
1:dc62944:       for (Element element : row.nonZeroes()) {
1:22b0c3d:         double d = element.get();
1:c8270dc:         min = Math.min(d, min);
1:c8270dc:         max = Math.max(d, max);
1:c8270dc:         sum += d;
1:c8270dc:         count++;
1:c8270dc:       }
1:c8270dc:     }
1:c8270dc:     double density = (sum / count - min) / (max - min);
1:22b0c3d:     log.info("Scaled Inter-Cluster Density = {}", density);
1:c8270dc:     return density;
1:c8270dc:   }
1:22b0c3d:   
1:c8270dc:   /**
1:22b0c3d:    * Computes the inter-cluster distances
1:c8270dc:    * 
1:22b0c3d:    * @return a Map<Integer, Vector>
1:22b0c3d:    */
1:22b0c3d:   public Map<Integer,Vector> interClusterDistances() {
1:87c15be:     Map<Integer,Vector> distances = new TreeMap<>();
1:22b0c3d:     for (int i = 0; i < clusters.size(); i++) {
1:22b0c3d:       Cluster clusterI = clusters.get(i);
1:22b0c3d:       RandomAccessSparseVector row = new RandomAccessSparseVector(Integer.MAX_VALUE);
1:22b0c3d:       distances.put(clusterI.getId(), row);
1:22b0c3d:       for (int j = i + 1; j < clusters.size(); j++) {
1:22b0c3d:         Cluster clusterJ = clusters.get(j);
1:22b0c3d:         double d = measure.distance(clusterI.getCenter(), clusterJ.getCenter());
1:22b0c3d:         row.set(clusterJ.getId(), d);
1:22b0c3d:       }
1:22b0c3d:     }
1:22b0c3d:     return distances;
1:22b0c3d:   }
1:22b0c3d:   
1:22b0c3d:   /**
1:22b0c3d:    * Computes the average intra-cluster density as the average of each cluster's intra-cluster density
1:22b0c3d:    * 
1:22b0c3d:    * @return the average intraClusterDensity
1:c8270dc:    */
1:c8270dc:   public double intraClusterDensity() {
1:c8270dc:     double avgDensity = 0;
1:22b0c3d:     int count = 0;
1:dc62944:     for (Element elem : intraClusterDensities().nonZeroes()) {
1:22b0c3d:       double value = elem.get();
1:22b0c3d:       if (!Double.isNaN(value)) {
1:22b0c3d:         avgDensity += value;
1:22b0c3d:         count++;
1:22b0c3d:       }
1:22b0c3d:     }
1:22b0c3d:     avgDensity = clusters.isEmpty() ? 0 : avgDensity / count;
1:22b0c3d:     log.info("Average Intra-Cluster Density = {}", avgDensity);
1:22b0c3d:     return avgDensity;
1:22b0c3d:   }
1:22b0c3d:   
1:22b0c3d:   /**
1:22b0c3d:    * Computes the intra-cluster densities for all clusters as the average distance of the representative points from
1:22b0c3d:    * each other
1:22b0c3d:    * 
1:22b0c3d:    * @return a Vector of the intraClusterDensity of the representativePoints by clusterId
1:22b0c3d:    */
1:22b0c3d:   public Vector intraClusterDensities() {
1:22b0c3d:     Vector densities = new RandomAccessSparseVector(Integer.MAX_VALUE);
1:c8270dc:     for (Cluster cluster : clusters) {
1:c8270dc:       int count = 0;
1:22b0c3d:       double max = Double.NEGATIVE_INFINITY;
1:22b0c3d:       double min = Double.POSITIVE_INFINITY;
1:c8270dc:       double sum = 0;
1:c8270dc:       List<VectorWritable> repPoints = representativePoints.get(cluster.getId());
1:c8270dc:       for (int i = 0; i < repPoints.size(); i++) {
1:c8270dc:         for (int j = i + 1; j < repPoints.size(); j++) {
1:22b0c3d:           Vector v1 = repPoints.get(i).get();
1:22b0c3d:           Vector v2 = repPoints.get(j).get();
1:22b0c3d:           double d = measure.distance(v1, v2);
1:c8270dc:           min = Math.min(d, min);
1:c8270dc:           max = Math.max(d, max);
1:c8270dc:           sum += d;
1:c8270dc:           count++;
1:c8270dc:         }
1:c8270dc:       }
1:c8270dc:       double density = (sum / count - min) / (max - min);
1:22b0c3d:       densities.set(cluster.getId(), density);
1:4194a28:       log.info("Intra-Cluster Density[{}] = {}", cluster.getId(), density);
1:c8270dc:     }
1:22b0c3d:     return densities;
1:c8270dc:   }
1:c8270dc: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.TreeMap;
/////////////////////////////////////////////////////////////////////////
1:     List<Cluster> clusters = new ArrayList<>();
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     Map<Integer,Vector> distances = new TreeMap<>();
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       for (Element element : row.nonZeroes()) {
/////////////////////////////////////////////////////////////////////////
1:     for (Element elem : intraClusterDensities().nonZeroes()) {
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:22b0c3d
/////////////////////////////////////////////////////////////////////////
0: import java.util.TreeMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector.Element;
0: import com.google.common.collect.Lists;
1: 
1:   
1:   
1:   private final Map<Integer,List<VectorWritable>> representativePoints;
1:   
1:   
1:   
1:    *          a Map<Integer,List<VectorWritable>> of representative points keyed by clusterId
1:    *          a Map<Integer,Cluster> of the clusters keyed by clusterId
1:    *          an appropriate DistanceMeasure
1:   public ClusterEvaluator(Map<Integer,List<VectorWritable>> representativePoints, List<Cluster> clusters,
1:       DistanceMeasure measure) {
1:   
1:    *          a Configuration with appropriate parameters
1:    *          a String path to the input clusters directory
1:     measure = ClassUtils
1:         .instantiateAs(conf.get(RepresentativePointsDriver.DISTANCE_MEASURE_KEY), DistanceMeasure.class);
1:   
1:    * @param clustersIn
1:    *          a String pathname to the directory containing input cluster files
1:     for (ClusterWritable clusterWritable : new SequenceFileDirValueIterable<ClusterWritable>(clustersIn, PathType.LIST,
1:         PathFilters.logsCRCFilter(), conf)) {
1:       clusters.add(cluster);
1:   
1:     double max = Double.NEGATIVE_INFINITY;
1:     double min = Double.POSITIVE_INFINITY;
1:     Map<Integer,Vector> distances = interClusterDistances();
1:     for (Vector row : distances.values()) {
0:       Iterator<Element> elements = row.iterateNonZero();
0:       while (elements.hasNext()) {
0:         Element element = elements.next();
1:         double d = element.get();
/////////////////////////////////////////////////////////////////////////
1:     log.info("Scaled Inter-Cluster Density = {}", density);
1:   
1:    * Computes the inter-cluster distances
1:    * @return a Map<Integer, Vector>
1:    */
1:   public Map<Integer,Vector> interClusterDistances() {
0:     Map<Integer,Vector> distances = new TreeMap<Integer,Vector>();
1:     for (int i = 0; i < clusters.size(); i++) {
1:       Cluster clusterI = clusters.get(i);
1:       RandomAccessSparseVector row = new RandomAccessSparseVector(Integer.MAX_VALUE);
1:       distances.put(clusterI.getId(), row);
1:       for (int j = i + 1; j < clusters.size(); j++) {
1:         Cluster clusterJ = clusters.get(j);
1:         double d = measure.distance(clusterI.getCenter(), clusterJ.getCenter());
1:         row.set(clusterJ.getId(), d);
1:       }
1:     }
1:     return distances;
1:   }
1:   
1:   /**
1:    * Computes the average intra-cluster density as the average of each cluster's intra-cluster density
1:    * 
1:    * @return the average intraClusterDensity
1:     int count = 0;
0:     Iterator<Element> iter = intraClusterDensities().iterateNonZero();
0:     while (iter.hasNext()) {
0:       Element elem = iter.next();
1:       double value = elem.get();
1:       if (!Double.isNaN(value)) {
1:         avgDensity += value;
1:         count++;
1:       }
1:     }
1:     avgDensity = clusters.isEmpty() ? 0 : avgDensity / count;
1:     log.info("Average Intra-Cluster Density = {}", avgDensity);
1:     return avgDensity;
1:   }
1:   
1:   /**
1:    * Computes the intra-cluster densities for all clusters as the average distance of the representative points from
1:    * each other
1:    * 
1:    * @return a Vector of the intraClusterDensity of the representativePoints by clusterId
1:    */
1:   public Vector intraClusterDensities() {
1:     Vector densities = new RandomAccessSparseVector(Integer.MAX_VALUE);
1:       double max = Double.NEGATIVE_INFINITY;
1:       double min = Double.POSITIVE_INFINITY;
1:           Vector v1 = repPoints.get(i).get();
1:           Vector v2 = repPoints.get(j).get();
1:           double d = measure.distance(v1, v2);
/////////////////////////////////////////////////////////////////////////
1:       densities.set(cluster.getId(), density);
1:     return densities;
commit:c8270dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.evaluation;
1: 
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
1: 
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.fs.FileStatus;
0: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
0: import org.apache.hadoop.io.SequenceFile;
0: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.clustering.Cluster;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ClusterEvaluator {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(ClusterEvaluator.class);
1: 
0:   private final Map<Integer, List<VectorWritable>> representativePoints;
1: 
1:   private final List<Cluster> clusters;
1: 
1:   private final DistanceMeasure measure;
1: 
0:   private boolean pruned = false;
1: 
1:   /**
1:    * For testing only
1:    * 
1:    * @param representativePoints
0:    *            a Map<Integer,List<VectorWritable>> of representative points keyed by clusterId
1:    * @param clusters
0:    *            a Map<Integer,Cluster> of the clusters keyed by clusterId
1:    * @param measure
0:    *            an appropriate DistanceMeasure
1:    */
0:   public ClusterEvaluator(Map<Integer, List<VectorWritable>> representativePoints, List<Cluster> clusters, DistanceMeasure measure) {
1:     this.representativePoints = representativePoints;
1:     this.clusters = clusters;
1:     this.measure = measure;
1:   }
1: 
1:   /**
1:    * Initialize a new instance from job information
1:    * 
1:    * @param conf
0:    *            a JobConf with appropriate parameters
1:    * @param clustersIn
0:    *            a String path to the input clusters directory
1:    */
0:   public ClusterEvaluator(Configuration conf, Path clustersIn) throws ClassNotFoundException, InstantiationException,
0:       IllegalAccessException, IOException {
0:     ClassLoader ccl = Thread.currentThread().getContextClassLoader();
0:     measure = ccl.loadClass(conf.get(RepresentativePointsDriver.DISTANCE_MEASURE_KEY)).asSubclass(DistanceMeasure.class)
0:         .newInstance();
1:     representativePoints = RepresentativePointsMapper.getRepresentativePoints(conf);
1:     clusters = loadClusters(conf, clustersIn);
1:   }
1: 
1:   /**
1:    * Load the clusters from their sequence files
1:    * 
1:    * @param clustersIn 
0:    *            a String pathname to the directory containing input cluster files
1:    * @return a List<Cluster> of the clusters
1:    */
0:   private static List<Cluster> loadClusters(Configuration conf, Path clustersIn) throws InstantiationException,
0:       IllegalAccessException, IOException {
0:     List<Cluster> clusters = new ArrayList<Cluster>();
0:     FileSystem fs = clustersIn.getFileSystem(conf);
0:     for (FileStatus part : fs.listStatus(clustersIn)) {
0:       if (!part.getPath().getName().startsWith(".")) {
0:         Path inPart = part.getPath();
0:         SequenceFile.Reader reader = new SequenceFile.Reader(fs, inPart, conf);
0:         Writable key = reader.getKeyClass().asSubclass(Writable.class).newInstance();
0:         Writable value = reader.getValueClass().asSubclass(Writable.class).newInstance();
0:         while (reader.next(key, value)) {
0:           Cluster cluster = (Cluster) value;
0:           clusters.add(cluster);
0:           value = reader.getValueClass().asSubclass(Writable.class).newInstance();
1:         }
0:         reader.close();
1:       }
1:     }
1:     return clusters;
1:   }
1: 
1:   /**
0:    * Return if the cluster is valid. Valid clusters must have more than 2 representative points,
0:    * and at least one of them must be different than the cluster center. This is because the
0:    * representative points extraction will duplicate the cluster center if it is empty.
1:    * 
0:    * @param clusterI a Cluster
0:    * @return a boolean
1:    */
0:   private boolean invalidCluster(Cluster clusterI) {
0:     List<VectorWritable> repPts = representativePoints.get(clusterI.getId());
0:     if (repPts.size() < 2) {
0:       return true;
1:     }
0:     for (VectorWritable vw : repPts) {
0:       Vector vector = vw.get();
0:       if (!vector.equals(clusterI.getCenter())) {
0:         return false;
1:       }
1:     }
0:     return true;
1:   }
1: 
0:   private void pruneInvalidClusters() {
0:     if (pruned) {
0:       return;
1:     }
0:     for (Iterator<Cluster> it = clusters.iterator(); it.hasNext();) {
0:       Cluster cluster = it.next();
0:       if (invalidCluster(cluster)) {
0:         log.info("Pruning cluster Id=" + cluster.getId());
0:         it.remove();
0:         representativePoints.remove(cluster.getId());
1:       }
1:     }
0:     pruned = true;
1:   }
1: 
1:   /**
1:    * Computes the inter-cluster density as defined in "Mahout In Action"
1:    * 
1:    * @return the interClusterDensity
1:    */
1:   public double interClusterDensity() {
0:     pruneInvalidClusters();
0:     double max = 0;
0:     double min = Double.MAX_VALUE;
1:     double sum = 0;
1:     int count = 0;
0:     for (int i = 0; i < clusters.size(); i++) {
0:       Cluster clusterI = clusters.get(i);
0:       for (int j = i + 1; j < clusters.size(); j++) {
0:         Cluster clusterJ = clusters.get(j);
0:         double d = measure.distance(clusterI.getCenter(), clusterJ.getCenter());
1:         min = Math.min(d, min);
1:         max = Math.max(d, max);
1:         sum += d;
1:         count++;
1:       }
1:     }
1:     double density = (sum / count - min) / (max - min);
0:     log.info("Inter-Cluster Density = " + density);
1:     return density;
1:   }
1: 
1:   /**
0:    * Computes the intra-cluster density as the average distance of the representative points
0:    * from each other
1:    * 
0:    * @return the intraClusterDensity of the representativePoints
1:    */
1:   public double intraClusterDensity() {
0:     pruneInvalidClusters();
1:     double avgDensity = 0;
1:     for (Cluster cluster : clusters) {
1:       int count = 0;
0:       double max = 0;
0:       double min = Double.MAX_VALUE;
1:       double sum = 0;
1:       List<VectorWritable> repPoints = representativePoints.get(cluster.getId());
1:       for (int i = 0; i < repPoints.size(); i++) {
1:         for (int j = i + 1; j < repPoints.size(); j++) {
0:           double d = measure.distance(repPoints.get(i).get(), repPoints.get(j).get());
1:           min = Math.min(d, min);
1:           max = Math.max(d, max);
1:           sum += d;
1:           count++;
1:         }
1:       }
1:       double density = (sum / count - min) / (max - min);
0:       avgDensity += density;
0:       log.info("Intra-Cluster Density[" + cluster.getId() + "] = " + density);
1:     }
0:     avgDensity = clusters.size() == 0 ? 0 : avgDensity / clusters.size();
0:     log.info("Intra-Cluster Density = " + avgDensity);
0:     return avgDensity;
1: 
1:   }
1: }
author:pranjan
-------------------------------------------------------------------------------
commit:51f58b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
/////////////////////////////////////////////////////////////////////////
0:     for (ClusterWritable clusterWritable :
0:          new SequenceFileDirValueIterable<ClusterWritable>(clustersIn, PathType.LIST, PathFilters.logsCRCFilter(), conf)) {
1:       Cluster cluster = clusterWritable.getValue();
0: 	  clusters.add(cluster);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.ClassUtils;
/////////////////////////////////////////////////////////////////////////
1:   public ClusterEvaluator(Configuration conf, Path clustersIn) {
0:     measure = ClassUtils.instantiateAs(conf.get(RepresentativePointsDriver.DISTANCE_MEASURE_KEY), DistanceMeasure.class);
commit:4194a28
/////////////////////////////////////////////////////////////////////////
0:         log.info("Pruning cluster Id={}", cluster.getId());
/////////////////////////////////////////////////////////////////////////
0:     log.info("Inter-Cluster Density = {}", density);
/////////////////////////////////////////////////////////////////////////
1:       log.info("Intra-Cluster Density[{}] = {}", cluster.getId(), density);
0:     log.info("Intra-Cluster Density = {}", avgDensity);
commit:50fd693
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.iterator.sequencefile.PathFilters;
1: import org.apache.mahout.common.iterator.sequencefile.PathType;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirValueIterable;
/////////////////////////////////////////////////////////////////////////
0:     throws ClassNotFoundException, InstantiationException, IllegalAccessException {
/////////////////////////////////////////////////////////////////////////
1:   private static List<Cluster> loadClusters(Configuration conf, Path clustersIn) {
0:     for (Cluster value :
0:          new SequenceFileDirValueIterable<Cluster>(clustersIn, PathType.LIST, PathFilters.logsCRCFilter(), conf)) {
0:       clusters.add(value);
commit:d61a0ee
/////////////////////////////////////////////////////////////////////////
0:   private boolean pruned;
/////////////////////////////////////////////////////////////////////////
0:   public ClusterEvaluator(Map<Integer, List<VectorWritable>> representativePoints,
0:                           List<Cluster> clusters, DistanceMeasure measure) {
/////////////////////////////////////////////////////////////////////////
0:   public ClusterEvaluator(Configuration conf, Path clustersIn)
0:     throws ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
/////////////////////////////////////////////////////////////////////////
0:   private static List<Cluster> loadClusters(Configuration conf, Path clustersIn)
0:     throws InstantiationException, IllegalAccessException, IOException {
commit:04a0324
/////////////////////////////////////////////////////////////////////////
0:    *            a Configuration with appropriate parameters
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
0:     avgDensity = clusters.isEmpty() ? 0 : avgDensity / clusters.size();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     List<Cluster> clusters = Lists.newArrayList();
============================================================================