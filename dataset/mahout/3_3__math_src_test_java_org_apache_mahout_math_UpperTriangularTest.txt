1:33414e6: /*
1:33414e6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:33414e6:  * contributor license agreements.  See the NOTICE file distributed with
1:33414e6:  * this work for additional information regarding copyright ownership.
1:33414e6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:33414e6:  * (the "License"); you may not use this file except in compliance with
1:33414e6:  * the License.  You may obtain a copy of the License at
1:33414e6:  *
1:33414e6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:33414e6:  *
1:33414e6:  * Unless required by applicable law or agreed to in writing, software
1:33414e6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:33414e6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:33414e6:  * See the License for the specific language governing permissions and
1:33414e6:  * limitations under the License.
1:33414e6:  */
1:33414e6: 
1:f43adfe: package org.apache.mahout.math;
1:33414e6: 
1:33414e6: import org.apache.mahout.math.function.Functions;
1:33414e6: import org.junit.Test;
1:33414e6: 
1:33414e6: public class UpperTriangularTest extends MahoutTestCase {
1:33414e6:   @Test
1:33414e6:   public void testBasics() {
1:33414e6:     Matrix a = new UpperTriangular(new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, false);
1:1499411:     assertEquals(0, a.viewDiagonal().minus(new DenseVector(new double[]{1, 5, 8, 10})).norm(1), 1.0e-10);
1:1499411:     assertEquals(0, a.viewPart(0, 3, 1, 3).viewDiagonal().minus(
1:1499411:         new DenseVector(new double[]{2, 6, 9})).norm(1), 1.0e-10);
1:1499411:     assertEquals(4, a.get(0, 3), 1.0e-10);
1:33414e6:     print(a);
1:33414e6:     Matrix m = new DenseMatrix(4, 4).assign(a);
1:1499411:     assertEquals(0, m.minus(a).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:33414e6:     print(m);
1:33414e6: 
1:1499411:     assertEquals(0, m.transpose().times(m).minus(a.transpose().times(a)).aggregate(
1:1499411:         Functions.PLUS, Functions.ABS), 1.0e-10);
1:1499411:     assertEquals(0, m.plus(m).minus(a.plus(a)).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:33414e6:   }
1:33414e6: 
1:1499411:   private static void print(Matrix m) {
1:33414e6:     for (int i = 0; i < m.rowSize(); i++) {
1:33414e6:       for (int j = 0; j < m.columnSize(); j++) {
1:1499411:         if (Math.abs(m.get(i, j)) > 1.0e-10) {
1:33414e6:           System.out.printf("%10.3f ", m.get(i, j));
1:33414e6:         } else {
1:33414e6:           System.out.printf("%10s ", (i + j) % 3 == 0 ? "." : "");
1:33414e6:         }
1:33414e6:       }
1:33414e6:       System.out.printf("\n");
1:33414e6:     }
1:33414e6:     System.out.printf("\n");
1:33414e6:   }
1:33414e6: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:f43adfe
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, a.viewDiagonal().minus(new DenseVector(new double[]{1, 5, 8, 10})).norm(1), 1.0e-10);
1:     assertEquals(0, a.viewPart(0, 3, 1, 3).viewDiagonal().minus(
1:         new DenseVector(new double[]{2, 6, 9})).norm(1), 1.0e-10);
1:     assertEquals(4, a.get(0, 3), 1.0e-10);
1:     assertEquals(0, m.minus(a).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:     assertEquals(0, m.transpose().times(m).minus(a.transpose().times(a)).aggregate(
1:         Functions.PLUS, Functions.ABS), 1.0e-10);
1:     assertEquals(0, m.plus(m).minus(a.plus(a)).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:   private static void print(Matrix m) {
1:         if (Math.abs(m.get(i, j)) > 1.0e-10) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:33414e6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
0: import org.apache.mahout.common.MahoutTestCase;
0: import org.apache.mahout.math.DenseMatrix;
0: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.function.Functions;
1: import org.junit.Test;
1: 
1: public class UpperTriangularTest extends MahoutTestCase {
1:   @Test
1:   public void testBasics() {
1:     Matrix a = new UpperTriangular(new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, false);
0:     assertEquals(0, a.viewDiagonal().minus(new DenseVector(new double[]{1, 5, 8, 10})).norm(1), 1e-10);
0:     assertEquals(0, a.viewPart(0, 3, 1, 3).viewDiagonal().minus(new DenseVector(new double[]{2, 6, 9})).norm(1), 1e-10);
0:     assertEquals(4, a.get(0, 3), 1e-10);
1:     print(a);
1:     Matrix m = new DenseMatrix(4, 4).assign(a);
0:     assertEquals(0, m.minus(a).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:     print(m);
1: 
0:     assertEquals(0, m.transpose().times(m).minus(a.transpose().times(a)).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
0:     assertEquals(0, m.plus(m).minus(a.plus(a)).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:   }
1: 
0:   private void print(Matrix m) {
1:     for (int i = 0; i < m.rowSize(); i++) {
1:       for (int j = 0; j < m.columnSize(); j++) {
0:         if (Math.abs(m.get(i, j)) > 1e-10) {
1:           System.out.printf("%10.3f ", m.get(i, j));
1:         } else {
1:           System.out.printf("%10s ", (i + j) % 3 == 0 ? "." : "");
1:         }
1:       }
1:       System.out.printf("\n");
1:     }
1:     System.out.printf("\n");
1:   }
1: }
============================================================================