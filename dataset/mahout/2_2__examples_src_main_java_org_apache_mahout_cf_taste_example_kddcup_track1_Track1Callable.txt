1:d25dd20: /**
1:d25dd20:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d25dd20:  * contributor license agreements.  See the NOTICE file distributed with
1:d25dd20:  * this work for additional information regarding copyright ownership.
1:d25dd20:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d25dd20:  * (the "License"); you may not use this file except in compliance with
1:d25dd20:  * the License.  You may obtain a copy of the License at
1:d25dd20:  *
1:d25dd20:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d25dd20:  *
1:d25dd20:  * Unless required by applicable law or agreed to in writing, software
1:d25dd20:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d25dd20:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d25dd20:  * See the License for the specific language governing permissions and
1:d25dd20:  * limitations under the License.
1:d25dd20:  */
3:d25dd20: 
1:d25dd20: package org.apache.mahout.cf.taste.example.kddcup.track1;
1:d25dd20: 
1:d25dd20: import java.util.concurrent.Callable;
1:17988ce: import java.util.concurrent.atomic.AtomicInteger;
1:d25dd20: 
1:d25dd20: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1:d25dd20: import org.apache.mahout.cf.taste.common.TasteException;
1:d25dd20: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:d25dd20: import org.apache.mahout.cf.taste.recommender.Recommender;
1:d25dd20: import org.slf4j.Logger;
1:d25dd20: import org.slf4j.LoggerFactory;
1:d25dd20: 
1:d25dd20: final class Track1Callable implements Callable<byte[]> {
1:d25dd20: 
1:d25dd20:   private static final Logger log = LoggerFactory.getLogger(Track1Callable.class);
1:17988ce:   private static final AtomicInteger COUNT = new AtomicInteger();
1:d25dd20: 
1:d25dd20:   private final Recommender recommender;
1:d25dd20:   private final PreferenceArray userTest;
1:d25dd20: 
1:d25dd20:   Track1Callable(Recommender recommender, PreferenceArray userTest) {
1:d25dd20:     this.recommender = recommender;
1:d25dd20:     this.userTest = userTest;
3:d25dd20:   }
1:d25dd20: 
1:d25dd20:   @Override
1:d25dd20:   public byte[] call() throws TasteException {
1:d25dd20:     long userID = userTest.get(0).getUserID();
1:d25dd20:     byte[] result = new byte[userTest.length()];
1:d25dd20:     for (int i = 0; i < userTest.length(); i++) {
1:d25dd20:       long itemID = userTest.getItemID(i);
1:d25dd20:       double estimate;
1:d25dd20:       try {
1:d25dd20:         estimate = recommender.estimatePreference(userID, itemID);
1:d25dd20:       } catch (NoSuchItemException nsie) {
1:d25dd20:         // OK in the sample data provided before the contest, should never happen otherwise
1:d25dd20:         log.warn("Unknown item {}; OK unless this is the real contest data", itemID);
1:d25dd20:         continue;
1:17988ce:       }
1:c439f53:       result[i] = EstimateConverter.convert(estimate, userID, itemID);
1:d25dd20:     }
1:17988ce: 
1:17988ce:     if (COUNT.incrementAndGet() % 10000 == 0) {
1:17988ce:       log.info("Completed {} users", COUNT.get());
1:17988ce:     }
1:17988ce: 
1:d25dd20:     return result;
1:d25dd20:   }
1:d25dd20: 
1:d25dd20: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:c439f53
/////////////////////////////////////////////////////////////////////////
1:       result[i] = EstimateConverter.convert(estimate, userID, itemID);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:17988ce
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:   private static final AtomicInteger COUNT = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
0:       if (Double.isNaN(estimate)) {
0:         log.warn("Unable to compute estimate for user {}, item {}", userID, itemID);
0:         result[i] = 0x7F;
0:       } else {
0:         int scaledEstimate = (int) (estimate * 2.55);
0:         if (scaledEstimate > 255) {
0:           scaledEstimate = 255;
0:         } else if (scaledEstimate < 0) {
0:           scaledEstimate = 0;
1:         }
0:         result[i] = (byte) scaledEstimate;
1: 
1:     if (COUNT.incrementAndGet() % 10000 == 0) {
1:       log.info("Completed {} users", COUNT.get());
1:     }
1: 
commit:d25dd20
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track1;
1: 
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.cf.taste.recommender.Recommender;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: final class Track1Callable implements Callable<byte[]> {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(Track1Callable.class);
1: 
1:   private final Recommender recommender;
1:   private final PreferenceArray userTest;
1: 
1:   Track1Callable(Recommender recommender, PreferenceArray userTest) {
1:     this.recommender = recommender;
1:     this.userTest = userTest;
1:   }
1: 
1:   @Override
1:   public byte[] call() throws TasteException {
1:     long userID = userTest.get(0).getUserID();
1:     byte[] result = new byte[userTest.length()];
1:     for (int i = 0; i < userTest.length(); i++) {
1:       long itemID = userTest.getItemID(i);
1:       double estimate;
1:       try {
1:         estimate = recommender.estimatePreference(userID, itemID);
1:       } catch (NoSuchItemException nsie) {
1:         // OK in the sample data provided before the contest, should never happen otherwise
1:         log.warn("Unknown item {}; OK unless this is the real contest data", itemID);
1:         continue;
1:       }
1: 
0:       int scaledEstimate = (int) (estimate * 2.55);
0:       if (scaledEstimate > 255) {
0:         scaledEstimate = 255;
0:       } else if (scaledEstimate < 0) {
0:         scaledEstimate = 0;
1:       }
1: 
0:       result[i] = (byte) scaledEstimate;
1:     }
1:     return result;
1:   }
1: 
1: }
============================================================================