1:c439f53: /**
1:c439f53:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c439f53:  * contributor license agreements.  See the NOTICE file distributed with
1:c439f53:  * this work for additional information regarding copyright ownership.
1:c439f53:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c439f53:  * (the "License"); you may not use this file except in compliance with
1:c439f53:  * the License.  You may obtain a copy of the License at
1:c439f53:  *
1:c439f53:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c439f53:  *
1:c439f53:  * Unless required by applicable law or agreed to in writing, software
1:c439f53:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c439f53:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c439f53:  * See the License for the specific language governing permissions and
1:c439f53:  * limitations under the License.
1:c439f53:  */
1:c439f53: 
1:c439f53: package org.apache.mahout.cf.taste.example.kddcup.track1.svd;
1:c439f53: 
1:3d44c1e: import org.apache.mahout.cf.taste.common.TasteException;
1:c439f53: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:c439f53: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:c439f53: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1:c439f53: import org.apache.mahout.cf.taste.model.DataModel;
1:c439f53: import org.apache.mahout.cf.taste.model.Preference;
1:c439f53: 
1:4ef9d31: import java.util.ArrayList;
1:c439f53: import java.util.List;
1:c439f53: 
1:c439f53: /**
1:c439f53:  * can be used to drop {@link DataModel}s into {@link ParallelArraysSGDFactorizer}
1:c439f53:  */
1:c439f53: public class DataModelFactorizablePreferences implements FactorizablePreferences {
1:c439f53: 
1:c439f53:   private final FastIDSet userIDs;
1:c439f53:   private final FastIDSet itemIDs;
1:c439f53: 
1:c439f53:   private final List<Preference> preferences;
1:c439f53: 
1:c439f53:   private final float minPreference;
1:c439f53:   private final float maxPreference;
1:c439f53: 
1:c439f53:   public DataModelFactorizablePreferences(DataModel dataModel) {
1:c439f53: 
1:c439f53:     minPreference = dataModel.getMinPreference();
1:c439f53:     maxPreference = dataModel.getMaxPreference();
1:c439f53: 
1:c439f53:     try {
1:c439f53:       userIDs = new FastIDSet(dataModel.getNumUsers());
1:c439f53:       itemIDs = new FastIDSet(dataModel.getNumItems());
1:4ef9d31:       preferences = new ArrayList<>();
1:c439f53: 
1:c439f53:       LongPrimitiveIterator userIDsIterator = dataModel.getUserIDs();
1:c439f53:       while (userIDsIterator.hasNext()) {
1:c439f53:         long userID = userIDsIterator.nextLong();
1:c439f53:         userIDs.add(userID);
1:c439f53:         for (Preference preference : dataModel.getPreferencesFromUser(userID)) {
1:c439f53:           itemIDs.add(preference.getItemID());
1:c439f53:           preferences.add(new GenericPreference(userID, preference.getItemID(), preference.getValue()));
1:c439f53:         }
1:c439f53:       }
1:3d44c1e:     } catch (TasteException te) {
1:3d44c1e:       throw new IllegalStateException("Unable to create factorizable preferences!", te);
1:c439f53:     }
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public LongPrimitiveIterator getUserIDs() {
1:c439f53:     return userIDs.iterator();
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public LongPrimitiveIterator getItemIDs() {
1:c439f53:     return itemIDs.iterator();
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public Iterable<Preference> getPreferences() {
1:c439f53:     return preferences;
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public float getMinPreference() {
1:c439f53:     return minPreference;
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public float getMaxPreference() {
1:c439f53:     return maxPreference;
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public int numUsers() {
1:c439f53:     return userIDs.size();
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public int numItems() {
1:c439f53:     return itemIDs.size();
1:c439f53:   }
1:c439f53: 
1:c439f53:   @Override
1:c439f53:   public int numPreferences() {
1:c439f53:     return preferences.size();
1:c439f53:   }
1:c439f53: }
1:c439f53: 
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:       preferences = new ArrayList<>();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3d44c1e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.common.TasteException;
/////////////////////////////////////////////////////////////////////////
1:     } catch (TasteException te) {
1:       throw new IllegalStateException("Unable to create factorizable preferences!", te);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:       preferences = Lists.newArrayList();
commit:c439f53
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track1.svd;
1: 
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.model.GenericPreference;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.Preference;
1: 
0: import java.util.ArrayList;
1: import java.util.List;
1: 
1: /**
1:  * can be used to drop {@link DataModel}s into {@link ParallelArraysSGDFactorizer}
1:  */
1: public class DataModelFactorizablePreferences implements FactorizablePreferences {
1: 
1:   private final FastIDSet userIDs;
1:   private final FastIDSet itemIDs;
1: 
1:   private final List<Preference> preferences;
1: 
1:   private final float minPreference;
1:   private final float maxPreference;
1: 
1:   public DataModelFactorizablePreferences(DataModel dataModel) {
1: 
1:     minPreference = dataModel.getMinPreference();
1:     maxPreference = dataModel.getMaxPreference();
1: 
1:     try {
1:       userIDs = new FastIDSet(dataModel.getNumUsers());
1:       itemIDs = new FastIDSet(dataModel.getNumItems());
0:       preferences = new ArrayList<Preference>();
1: 
1:       LongPrimitiveIterator userIDsIterator = dataModel.getUserIDs();
1:       while (userIDsIterator.hasNext()) {
1:         long userID = userIDsIterator.nextLong();
1:         userIDs.add(userID);
1:         for (Preference preference : dataModel.getPreferencesFromUser(userID)) {
1:           itemIDs.add(preference.getItemID());
1:           preferences.add(new GenericPreference(userID, preference.getItemID(), preference.getValue()));
1:         }
1:       }
0:     } catch (Exception e) {
0:       throw new IllegalStateException("Unable to create factorizable preferences!", e);
1:     }
1:   }
1: 
1:   @Override
1:   public LongPrimitiveIterator getUserIDs() {
1:     return userIDs.iterator();
1:   }
1: 
1:   @Override
1:   public LongPrimitiveIterator getItemIDs() {
1:     return itemIDs.iterator();
1:   }
1: 
1:   @Override
1:   public Iterable<Preference> getPreferences() {
1:     return preferences;
1:   }
1: 
1:   @Override
1:   public float getMinPreference() {
1:     return minPreference;
1:   }
1: 
1:   @Override
1:   public float getMaxPreference() {
1:     return maxPreference;
1:   }
1: 
1:   @Override
1:   public int numUsers() {
1:     return userIDs.size();
1:   }
1: 
1:   @Override
1:   public int numItems() {
1:     return itemIDs.size();
1:   }
1: 
1:   @Override
1:   public int numPreferences() {
1:     return preferences.size();
1:   }
1: }
1: 
============================================================================