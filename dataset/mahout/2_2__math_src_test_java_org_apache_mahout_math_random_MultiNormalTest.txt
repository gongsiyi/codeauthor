1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
2:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:a07bfc3: import org.apache.mahout.math.DenseVector;
1:8b6a26a: import org.apache.mahout.math.MahoutTestCase;
1:a07bfc3: import org.apache.mahout.math.Vector;
1:a07bfc3: import org.apache.mahout.math.stats.OnlineSummarizer;
1:a07bfc3: import org.junit.Before;
1:a07bfc3: import org.junit.Test;
1:a07bfc3: 
1:8b6a26a: public class MultiNormalTest extends MahoutTestCase {
1:8b6a26a:     @Override
1:a07bfc3:     @Before
1:a07bfc3:     public void setUp() {
1:a07bfc3:         RandomUtils.useTestSeed();
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3:     @Test
1:a07bfc3:     public void testDiagonal() {
1:8b6a26a:         DenseVector offset = new DenseVector(new double[]{6, 3, 0});
1:a07bfc3:         MultiNormal n = new MultiNormal(
1:a07bfc3:                 new DenseVector(new double[]{1, 2, 5}), offset);
1:a07bfc3: 
1:a07bfc3:         OnlineSummarizer[] s = {
1:a07bfc3:                 new OnlineSummarizer(),
1:a07bfc3:                 new OnlineSummarizer(),
1:a07bfc3:                 new OnlineSummarizer()
1:a07bfc3:         };
1:a07bfc3: 
1:a07bfc3:         OnlineSummarizer[] cross = {
1:a07bfc3:                 new OnlineSummarizer(),
1:a07bfc3:                 new OnlineSummarizer(),
1:a07bfc3:                 new OnlineSummarizer()
1:a07bfc3:         };
1:a07bfc3: 
1:a07bfc3:         for (int i = 0; i < 10000; i++) {
1:a07bfc3:             Vector v = n.sample();
1:a07bfc3:             for (int j = 0; j < 3; j++) {
1:a07bfc3:                 s[j].add(v.get(j) - offset.get(j));
1:a07bfc3:                 int k1 = j % 2;
1:a07bfc3:                 int k2 = (j + 1) / 2 + 1;
1:a07bfc3:                 cross[j].add((v.get(k1) - offset.get(k1)) * (v.get(k2) - offset.get(k2)));
1:a07bfc3:             }
1:a07bfc3:         }
1:a07bfc3: 
1:a07bfc3:         for (int j = 0; j < 3; j++) {
1:a07bfc3:             assertEquals(0, s[j].getMean() / s[j].getSD(), 0.04);
1:a07bfc3:             assertEquals(0, cross[j].getMean() / cross[j].getSD(), 0.04);
1:a07bfc3:         }
1:a07bfc3:     }
1:a07bfc3: 
1:a07bfc3: 
1:a07bfc3:     @Test
1:a07bfc3:     public void testRadius() {
1:a07bfc3:         MultiNormal gen = new MultiNormal(0.1, new DenseVector(10));
1:a07bfc3:         OnlineSummarizer s = new OnlineSummarizer();
1:a07bfc3:         for (int i = 0; i < 10000; i++) {
1:a07bfc3:             double x = gen.sample().norm(2) / Math.sqrt(10);
1:a07bfc3:             s.add(x);
1:a07bfc3:         }
1:a07bfc3:         assertEquals(0.1, s.getMean(), 0.01);
1:a07bfc3: 
1:a07bfc3:     }
1:a07bfc3: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MahoutTestCase;
1: public class MultiNormalTest extends MahoutTestCase {
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         DenseVector offset = new DenseVector(new double[]{6, 3, 0});
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.stats.OnlineSummarizer;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: public class MultiNormalTest {
1:     @Before
1:     public void setUp() {
1:         RandomUtils.useTestSeed();
1:     }
1: 
1:     @Test
1:     public void testDiagonal() {
0:         final DenseVector offset = new DenseVector(new double[]{6, 3, 0});
1:         MultiNormal n = new MultiNormal(
1:                 new DenseVector(new double[]{1, 2, 5}), offset);
1: 
1:         OnlineSummarizer[] s = {
1:                 new OnlineSummarizer(),
1:                 new OnlineSummarizer(),
1:                 new OnlineSummarizer()
1:         };
1: 
1:         OnlineSummarizer[] cross = {
1:                 new OnlineSummarizer(),
1:                 new OnlineSummarizer(),
1:                 new OnlineSummarizer()
1:         };
1: 
1:         for (int i = 0; i < 10000; i++) {
1:             Vector v = n.sample();
1:             for (int j = 0; j < 3; j++) {
1:                 s[j].add(v.get(j) - offset.get(j));
1:                 int k1 = j % 2;
1:                 int k2 = (j + 1) / 2 + 1;
1:                 cross[j].add((v.get(k1) - offset.get(k1)) * (v.get(k2) - offset.get(k2)));
1:             }
1:         }
1: 
1:         for (int j = 0; j < 3; j++) {
1:             assertEquals(0, s[j].getMean() / s[j].getSD(), 0.04);
1:             assertEquals(0, cross[j].getMean() / cross[j].getSD(), 0.04);
1:         }
1:     }
1: 
1: 
1:     @Test
1:     public void testRadius() {
1:         MultiNormal gen = new MultiNormal(0.1, new DenseVector(10));
1:         OnlineSummarizer s = new OnlineSummarizer();
1:         for (int i = 0; i < 10000; i++) {
1:             double x = gen.sample().norm(2) / Math.sqrt(10);
1:             s.add(x);
1:         }
1:         assertEquals(0.1, s.getMean(), 0.01);
1: 
1:     }
1: }
============================================================================