4:a13b4b7: /**
1:a13b4b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a13b4b7:  * contributor license agreements.  See the NOTICE file distributed with
1:a13b4b7:  * this work for additional information regarding copyright ownership.
1:a13b4b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a13b4b7:  * (the "License"); you may not use this file except in compliance with
1:a13b4b7:  * the License.  You may obtain a copy of the License at
1:a13b4b7:  *
1:a13b4b7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a13b4b7:  *
1:a13b4b7:  * Unless required by applicable law or agreed to in writing, software
1:a13b4b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a13b4b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a13b4b7:  * See the License for the specific language governing permissions and
1:a13b4b7:  * limitations under the License.
4:a13b4b7:  */
3:a13b4b7: 
1:a13b4b7: package org.apache.mahout.common.iterator.sequencefile;
1:a13b4b7: 
1:a13b4b7: import java.io.Closeable;
1:a13b4b7: import java.io.IOException;
1:a13b4b7: 
1:80366ee: import com.google.common.collect.AbstractIterator;
1:d608a88: import com.google.common.io.Closeables;
1:a13b4b7: import org.apache.hadoop.conf.Configuration;
1:a13b4b7: import org.apache.hadoop.fs.FileSystem;
1:a13b4b7: import org.apache.hadoop.fs.Path;
1:a13b4b7: import org.apache.hadoop.io.NullWritable;
1:a13b4b7: import org.apache.hadoop.io.SequenceFile;
1:a13b4b7: import org.apache.hadoop.io.Writable;
1:a13b4b7: import org.apache.hadoop.util.ReflectionUtils;
1:a13b4b7: import org.apache.mahout.common.Pair;
1:58cc1ae: import org.slf4j.Logger;
1:58cc1ae: import org.slf4j.LoggerFactory;
1:a13b4b7: 
1:a13b4b7: /**
1:3218e95:  * <p>{@link java.util.Iterator} over a {@link SequenceFile}'s keys and values, as a {@link Pair}
1:a13b4b7:  * containing key and value.</p>
1:a13b4b7:  */
1:a13b4b7: public final class SequenceFileIterator<K extends Writable,V extends Writable>
1:80366ee:   extends AbstractIterator<Pair<K,V>> implements Closeable {
1:a13b4b7: 
1:a13b4b7:   private final SequenceFile.Reader reader;
1:a13b4b7:   private final Configuration conf;
1:a13b4b7:   private final Class<K> keyClass;
1:a13b4b7:   private final Class<V> valueClass;
1:a13b4b7:   private final boolean noValue;
1:a13b4b7:   private K key;
1:a13b4b7:   private V value;
1:a13b4b7:   private final boolean reuseKeyValueInstances;
1:a13b4b7: 
1:58cc1ae:   private static final Logger log = LoggerFactory.getLogger(SequenceFileIterator.class);
1:58cc1ae: 
1:58cc1ae:       /**
1:58cc1ae:        * @throws IOException if path can't be read, or its key or value class can't be instantiated
1:58cc1ae:        */
1:58cc1ae: 
1:a13b4b7:   public SequenceFileIterator(Path path, boolean reuseKeyValueInstances, Configuration conf) throws IOException {
1:a13b4b7:     key = null;
1:a13b4b7:     value = null;
1:a13b4b7:     FileSystem fs = path.getFileSystem(conf);
1:a13b4b7:     path = path.makeQualified(fs);
1:a13b4b7:     reader = new SequenceFile.Reader(fs, path, conf);
1:a13b4b7:     this.conf = conf;
1:a13b4b7:     keyClass = (Class<K>) reader.getKeyClass();
1:a13b4b7:     valueClass = (Class<V>) reader.getValueClass();
1:a13b4b7:     noValue = NullWritable.class.equals(valueClass);
1:a13b4b7:     this.reuseKeyValueInstances = reuseKeyValueInstances;
9:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7:   public Class<K> getKeyClass() {
1:a13b4b7:     return keyClass;
1:4841efb:   }
1:a13b4b7: 
1:a13b4b7:   public Class<V> getValueClass() {
1:a13b4b7:     return valueClass;
1:a13b4b7:   }
1:a13b4b7: 
3:a13b4b7:   @Override
1:31cb292:   public void close() throws IOException {
1:a13b4b7:     key = null;
1:a13b4b7:     value = null;
1:31cb292:     Closeables.close(reader, true);
1:31cb292: 
1:80366ee:     endOfData();
1:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7:   @Override
1:80366ee:   protected Pair<K,V> computeNext() {
1:80366ee:     if (!reuseKeyValueInstances || value == null) {
1:80366ee:       key = ReflectionUtils.newInstance(keyClass, conf);
1:80366ee:       if (!noValue) {
1:80366ee:         value = ReflectionUtils.newInstance(valueClass, conf);
1:a13b4b7:       }
1:a13b4b7:     }
1:80366ee:     try {
1:80366ee:       boolean available;
1:80366ee:       if (noValue) {
1:80366ee:         available = reader.next(key);
1:80366ee:       } else {
1:80366ee:         available = reader.next(key, value);
1:80366ee:       }
1:80366ee:       if (!available) {
2:80366ee:         close();
1:80366ee:         return null;
1:80366ee:       }
1:87c15be:       return new Pair<>(key, value);
1:80366ee:     } catch (IOException ioe) {
1:31cb292:       try {
1:31cb292:         close();
1:31cb292:       } catch (IOException e) {
1:58cc1ae:         log.error(e.getMessage(), e);
1:31cb292:       }
1:80366ee:       throw new IllegalStateException(ioe);
1:a13b4b7:     }
1:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       return new Pair<>(key, value);
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(SequenceFileIterator.class);
1: 
1:       /**
1:        * @throws IOException if path can't be read, or its key or value class can't be instantiated
1:        */
1: 
/////////////////////////////////////////////////////////////////////////
1:         log.error(e.getMessage(), e);
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
commit:d608a88
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     Closeables.closeQuietly(reader);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
1:   public void close() throws IOException {
1:     Closeables.close(reader, true);
1: 
/////////////////////////////////////////////////////////////////////////
1:       try {
1:         close();
1:       } catch (IOException e) {
0:         //throwing next anyway
1:       }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:96117d3
/////////////////////////////////////////////////////////////////////////
commit:3218e95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * <p>{@link java.util.Iterator} over a {@link SequenceFile}'s keys and values, as a {@link Pair}
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.AbstractIterator;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.IOUtils;
/////////////////////////////////////////////////////////////////////////
1:   extends AbstractIterator<Pair<K,V>> implements Closeable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public void close() {
0:     IOUtils.quietClose(reader);
1:     endOfData();
1:   protected Pair<K,V> computeNext() {
1:     if (!reuseKeyValueInstances || value == null) {
1:       key = ReflectionUtils.newInstance(keyClass, conf);
1:       if (!noValue) {
1:         value = ReflectionUtils.newInstance(valueClass, conf);
1:     try {
1:       boolean available;
1:       if (noValue) {
1:         available = reader.next(key);
1:       } else {
1:         available = reader.next(key, value);
1:       }
1:       if (!available) {
1:         close();
1:         return null;
1:       }
0:       return new Pair<K,V>(key, value);
1:     } catch (IOException ioe) {
1:       close();
1:       throw new IllegalStateException(ioe);
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator.sequencefile;
1: 
1: import java.io.Closeable;
1: import java.io.IOException;
0: import java.util.Iterator;
0: import java.util.NoSuchElementException;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.NullWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.hadoop.util.ReflectionUtils;
1: import org.apache.mahout.common.Pair;
1: 
1: /**
0:  * <p>{@link Iterator} over a {@link SequenceFile}'s keys and values, as a {@link Pair}
1:  * containing key and value.</p>
1:  */
1: public final class SequenceFileIterator<K extends Writable,V extends Writable>
0:   implements Iterator<Pair<K,V>>, Closeable {
1: 
1:   private final SequenceFile.Reader reader;
1:   private final Configuration conf;
1:   private final Class<K> keyClass;
1:   private final Class<V> valueClass;
1:   private final boolean noValue;
1:   private K key;
1:   private V value;
0:   private boolean available;
1:   private final boolean reuseKeyValueInstances;
1: 
1:   /**
0:    * @throws IOException if path can't be read, or its key or value class can't be instantiated
1:    */
1:   public SequenceFileIterator(Path path, boolean reuseKeyValueInstances, Configuration conf) throws IOException {
1:     key = null;
1:     value = null;
1:     FileSystem fs = path.getFileSystem(conf);
1:     path = path.makeQualified(fs);
1:     reader = new SequenceFile.Reader(fs, path, conf);
1:     this.conf = conf;
1:     keyClass = (Class<K>) reader.getKeyClass();
1:     valueClass = (Class<V>) reader.getValueClass();
0:     available = false;
1:     noValue = NullWritable.class.equals(valueClass);
1:     this.reuseKeyValueInstances = reuseKeyValueInstances;
1:   }
1: 
1:   public Class<K> getKeyClass() {
1:     return keyClass;
1:   }
1: 
1:   public Class<V> getValueClass() {
1:     return valueClass;
1:   }
1: 
1:   @Override
0:   public void close() throws IOException {
0:     available = false;
1:     key = null;
1:     value = null;
0:     reader.close();
1:   }
1: 
1:   @Override
0:   public boolean hasNext() {
0:     if (!available) {
0:       if (!reuseKeyValueInstances || value == null) {
0:         key = ReflectionUtils.newInstance(keyClass, conf);
0:         if (!noValue) {
0:           value = ReflectionUtils.newInstance(valueClass, conf);
1:         }
1:       }
0:       try {
0:         if (noValue) {
0:           available = reader.next(key);
0:         } else {
0:           available = reader.next(key, value);
1:         }
0:         if (!available) {
0:           close();
1:         }
0:         return available;
0:       } catch (IOException ioe) {
0:         try {
0:           close();
0:         } catch (IOException ioe2) {
0:           throw new IllegalStateException(ioe2);
1:         }
0:         throw new IllegalStateException(ioe);
1:       }
1:     }
0:     return available;
1:   }
1: 
1:   /**
0:    * @throws IllegalStateException if path can't be read, or its key or value class can't be instantiated
1:    */
1:   @Override
0:   public Pair<K,V> next() {
0:     if (!hasNext()) {
0:       throw new NoSuchElementException();
1:     }
0:     available = false;
0:     return new Pair<K,V>(key, value);
1:   }
1: 
1:   /**
0:    * @throws UnsupportedOperationException
1:    */
1:   @Override
0:   public void remove() {
0:     throw new UnsupportedOperationException();
1:   }
1: 
1: }
============================================================================