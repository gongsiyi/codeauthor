1:4fbab15: /*
1:4fbab15:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4fbab15:  * contributor license agreements.  See the NOTICE file distributed with
1:4fbab15:  * this work for additional information regarding copyright ownership.
1:4fbab15:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4fbab15:  * (the "License"); you may not use this file except in compliance with
1:4fbab15:  * the License.  You may obtain a copy of the License at
1:4fbab15:  *
1:4fbab15:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4fbab15:  *
1:4fbab15:  * Unless required by applicable law or agreed to in writing, software
1:4fbab15:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4fbab15:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4fbab15:  * See the License for the specific language governing permissions and
1:4fbab15:  * limitations under the License.
1:4fbab15:  */
1:c814339: 
1:4fbab15: package org.apache.mahout.cf.taste.impl.eval;
1:c814339: 
1:c814339: import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
1:c814339: import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
1:c814339: import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
1:c814339: import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
1:c814339: import org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarity;
1:c814339: import org.apache.mahout.cf.taste.model.DataModel;
1:c814339: import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
1:c814339: import org.apache.mahout.cf.taste.recommender.Recommender;
1:c814339: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1:c814339: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
1:c814339: 
1:c814339: import java.io.File;
1:c814339: 
1:4fbab15: public final class LoadEvaluationRunner {
1:4fbab15: 
1:4fbab15:   private static final int LOOPS = 10;
1:4fbab15: 
1:4fbab15:   private LoadEvaluationRunner() {
1:4fbab15:   }
1:c814339: 
1:c814339:   public static void main(String[] args) throws Exception {
1:4fbab15: 
1:c814339:     DataModel model = new FileDataModel(new File(args[0]));
1:4fbab15: 
1:4fbab15:     int howMany = 10;
1:4fbab15:     if (args.length > 1) {
1:4fbab15:       howMany = Integer.parseInt(args[1]);
1:c814339:     }
1:4fbab15: 
1:4fbab15:     System.out.println("Run Items");
1:4fbab15:     ItemSimilarity similarity = new EuclideanDistanceSimilarity(model);
1:4fbab15:     Recommender recommender = new GenericItemBasedRecommender(model, similarity); // Use an item-item recommender
1:e64dd36:     for (int i = 0; i < LOOPS; i++) {
1:4fbab15:       LoadStatistics loadStats = LoadEvaluator.runLoad(recommender, howMany);
1:4fbab15:       System.out.println(loadStats);
1:4fbab15:     }
1:4fbab15: 
1:c814339:     System.out.println("Run Users");
1:c814339:     UserSimilarity userSim = new EuclideanDistanceSimilarity(model);
1:c814339:     UserNeighborhood neighborhood = new NearestNUserNeighborhood(10, userSim, model);
1:c814339:     recommender = new GenericUserBasedRecommender(model, neighborhood, userSim);
1:e64dd36:     for (int i = 0; i < LOOPS; i++) {
1:4fbab15:       LoadStatistics loadStats = LoadEvaluator.runLoad(recommender, howMany);
1:4fbab15:       System.out.println(loadStats);
1:c814339:     }
1:c814339: 
1:c814339:   }
1:c814339: 
1:c814339: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < LOOPS; i++) {
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < LOOPS; i++) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbab15
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.cf.taste.impl.eval;
/////////////////////////////////////////////////////////////////////////
1: public final class LoadEvaluationRunner {
1: 
1:   private static final int LOOPS = 10;
1: 
1:   private LoadEvaluationRunner() {
1:   }
1: 
1: 
1:     int howMany = 10;
1:     if (args.length > 1) {
1:       howMany = Integer.parseInt(args[1]);
1: 
1:     System.out.println("Run Items");
1:     ItemSimilarity similarity = new EuclideanDistanceSimilarity(model);
1:     Recommender recommender = new GenericItemBasedRecommender(model, similarity); // Use an item-item recommender
0:     for (int i = 0; i < LOOPS; i++){
1:       LoadStatistics loadStats = LoadEvaluator.runLoad(recommender, howMany);
1:       System.out.println(loadStats);
1:     }
1: 
0:     for (int i = 0; i < LOOPS; i++){
1:       LoadStatistics loadStats = LoadEvaluator.runLoad(recommender, howMany);
1:       System.out.println(loadStats);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:c814339
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.cf.taste.impl.eval;
1: 
1: 
1: import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
1: import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
1: import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
1: import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
1: import org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarity;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
1: import org.apache.mahout.cf.taste.recommender.Recommender;
1: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1: import org.apache.mahout.cf.taste.similarity.UserSimilarity;
1: 
1: import java.io.File;
1: 
0: /**
0:  *
0:  *
0:  **/
0: public class LoadEvaluationRunner {
1: 
1:   public static void main(String[] args) throws Exception {
1:     DataModel model = new FileDataModel(new File(args[0]));
0:     ItemSimilarity similarity = new EuclideanDistanceSimilarity(model);
0:     Recommender recommender = new GenericItemBasedRecommender(model, similarity);//Use an item-item recommender
0:     System.out.println("Run Items");
0:     for (int i = 0; i < 10; i++){
0:       LoadEvaluator.runLoad(recommender);
1:     }
1:     System.out.println("Run Users");
1:     UserSimilarity userSim = new EuclideanDistanceSimilarity(model);
1:     UserNeighborhood neighborhood = new NearestNUserNeighborhood(10, userSim, model);
1:     recommender = new GenericUserBasedRecommender(model, neighborhood, userSim);
0:     for (int i = 0; i < 10; i++){
0:       LoadEvaluator.runLoad(recommender);
1:     }
1: 
1:   }
1: 
1: }
============================================================================