1:7a9e99e: /**
1:7a9e99e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9e99e:  * contributor license agreements.  See the NOTICE file distributed with
1:7a9e99e:  * this work for additional information regarding copyright ownership.
1:7a9e99e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a9e99e:  * (the "License"); you may not use this file except in compliance with
1:7a9e99e:  * the License.  You may obtain a copy of the License at
1:7a9e99e:  *
1:7a9e99e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7a9e99e:  *
1:7a9e99e:  * Unless required by applicable law or agreed to in writing, software
1:7a9e99e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a9e99e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9e99e:  * See the License for the specific language governing permissions and
1:7a9e99e:  * limitations under the License.
1:7a9e99e:  */
1:7a9e99e: 
1:7a9e99e: package org.apache.mahout.cf.taste.example.kddcup.track1;
1:7a9e99e: 
1:7a9e99e: import java.io.File;
1:7a9e99e: import java.io.IOException;
1:7a9e99e: 
1:7a9e99e: import org.apache.commons.cli2.OptionException;
1:7a9e99e: import org.apache.mahout.cf.taste.common.TasteException;
1:7a9e99e: import org.apache.mahout.cf.taste.example.TasteOptionParser;
1:7a9e99e: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
1:7a9e99e: import org.apache.mahout.cf.taste.model.DataModel;
1:7a9e99e: import org.slf4j.Logger;
1:7a9e99e: import org.slf4j.LoggerFactory;
1:7a9e99e: 
1:7a9e99e: public final class Track1RecommenderEvaluatorRunner {
1:7a9e99e: 
1:7a9e99e:   private static final Logger log = LoggerFactory.getLogger(Track1RecommenderEvaluatorRunner.class);
1:7a9e99e: 
1:7a9e99e:   private Track1RecommenderEvaluatorRunner() {
1:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e:   public static void main(String... args) throws IOException, TasteException, OptionException {
1:7a9e99e:     File dataFileDirectory = TasteOptionParser.getRatings(args);
1:7a9e99e:     if (dataFileDirectory == null) {
1:7a9e99e:       throw new IllegalArgumentException("No data directory");
1:7a9e99e:     }
1:7a9e99e:     if (!dataFileDirectory.exists() || !dataFileDirectory.isDirectory()) {
1:7a9e99e:       throw new IllegalArgumentException("Bad data file directory: " + dataFileDirectory);
1:7a9e99e:     }
1:7a9e99e:     Track1RecommenderEvaluator evaluator = new Track1RecommenderEvaluator(dataFileDirectory);
1:7a9e99e:     DataModel model = new KDDCupDataModel(KDDCupDataModel.getTrainingFile(dataFileDirectory));
1:d25dd20:     double evaluation = evaluator.evaluate(new Track1RecommenderBuilder(),
1:7a9e99e:       null,
1:7a9e99e:       model,
1:7a9e99e:       Float.NaN,
1:7a9e99e:       Float.NaN);
1:7a9e99e:     log.info(String.valueOf(evaluation));
1:7a9e99e:   }
1:7a9e99e:   
1:7a9e99e: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d25dd20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     double evaluation = evaluator.evaluate(new Track1RecommenderBuilder(),
commit:7a9e99e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track1;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: 
1: import org.apache.commons.cli2.OptionException;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.example.TasteOptionParser;
1: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
0: import org.apache.mahout.cf.taste.example.kddcup.KDDCupRecommenderBuilder;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public final class Track1RecommenderEvaluatorRunner {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(Track1RecommenderEvaluatorRunner.class);
1: 
1:   private Track1RecommenderEvaluatorRunner() {
1:   }
1:   
1:   public static void main(String... args) throws IOException, TasteException, OptionException {
1:     File dataFileDirectory = TasteOptionParser.getRatings(args);
1:     if (dataFileDirectory == null) {
1:       throw new IllegalArgumentException("No data directory");
1:     }
1:     if (!dataFileDirectory.exists() || !dataFileDirectory.isDirectory()) {
1:       throw new IllegalArgumentException("Bad data file directory: " + dataFileDirectory);
1:     }
1:     Track1RecommenderEvaluator evaluator = new Track1RecommenderEvaluator(dataFileDirectory);
1:     DataModel model = new KDDCupDataModel(KDDCupDataModel.getTrainingFile(dataFileDirectory));
0:     double evaluation = evaluator.evaluate(new KDDCupRecommenderBuilder(),
1:       null,
1:       model,
1:       Float.NaN,
1:       Float.NaN);
1:     log.info(String.valueOf(evaluation));
1:   }
1:   
1: }
============================================================================