1:29a7f38: /**
1:4194a28:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4194a28:  * contributor license agreements.  See the NOTICE file distributed with
1:4194a28:  * this work for additional information regarding copyright ownership.
1:4194a28:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4194a28:  * (the "License"); you may not use this file except in compliance with
1:4194a28:  * the License.  You may obtain a copy of the License at
2:29a7f38:  *
1:4194a28:  *     http://www.apache.org/licenses/LICENSE-2.0
1:29a7f38:  *
1:4194a28:  * Unless required by applicable law or agreed to in writing, software
1:4194a28:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4194a28:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4194a28:  * See the License for the specific language governing permissions and
1:4194a28:  * limitations under the License.
1:4194a28:  */
3:29a7f38: 
1:29a7f38: package org.apache.mahout.cf.taste.example.email;
1:29a7f38: 
1:29a7f38: import org.apache.hadoop.conf.Configuration;
1:25d59aa: import org.apache.hadoop.fs.FileSystem;
1:29a7f38: import org.apache.hadoop.fs.Path;
1:29a7f38: import org.apache.hadoop.io.IntWritable;
1:29a7f38: import org.apache.hadoop.io.Writable;
1:6d9179e: import org.apache.mahout.common.HadoopUtil;
1:29a7f38: import org.apache.mahout.common.Pair;
1:29a7f38: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1:29a7f38: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1:29a7f38: 
1:29a7f38: import java.io.IOException;
1:4194a28: import java.util.regex.Pattern;
1:29a7f38: 
1:29a7f38: public final class EmailUtility {
1:29a7f38: 
1:29a7f38:   public static final String SEPARATOR = "separator";
1:29a7f38:   public static final String MSG_IDS_PREFIX = "msgIdsPrefix";
1:29a7f38:   public static final String FROM_PREFIX = "fromPrefix";
1:29a7f38:   public static final String MSG_ID_DIMENSION = "msgIdDim";
1:3b9f635:   public static final String FROM_INDEX = "fromIdx";
1:3b9f635:   public static final String REFS_INDEX = "refsIdx";
1:4194a28:   private static final String[] EMPTY = new String[0];
1:4194a28:   private static final Pattern ADDRESS_CLEANUP = Pattern.compile("mailto:|<|>|\\[|\\]|\\=20");
1:4194a28:   private static final Pattern ANGLE_BRACES = Pattern.compile("<|>");
1:4194a28:   private static final Pattern SPACE_OR_CLOSE_ANGLE = Pattern.compile(">|\\s+");
1:5389d76:   public static final Pattern WHITESPACE = Pattern.compile("\\s*");
1:29a7f38: 
1:29a7f38:   private EmailUtility() {
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   /**
1:29a7f38:    * Strip off some spurious characters that make it harder to dedup
1:29a7f38:    */
1:4194a28:   public static String cleanUpEmailAddress(CharSequence address) {
1:29a7f38:     //do some cleanup to normalize some things, like: Key: karthik ananth <karthik.jcecs@gmail.com>: Value: 178
1:29a7f38:     //Key: karthik ananth [mailto:karthik.jcecs@gmail.com]=20: Value: 179
1:29a7f38:     //TODO: is there more to clean up here?
1:4194a28:     return ADDRESS_CLEANUP.matcher(address).replaceAll("");
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   public static void loadDictionaries(Configuration conf, String fromPrefix,
1:29a7f38:                                       OpenObjectIntHashMap<String> fromDictionary,
1:29a7f38:                                       String msgIdPrefix,
1:29a7f38:                                       OpenObjectIntHashMap<String> msgIdDictionary) throws IOException {
1:29a7f38: 
1:6d9179e:     Path[] localFiles = HadoopUtil.getCachedFiles(conf);
1:25d59aa:     FileSystem fs = FileSystem.getLocal(conf);
1:4a6453c:     for (Path dictionaryFile : localFiles) {
1:4a6453c: 
1:29a7f38:       // key is word value is id
1:29a7f38: 
1:29a7f38:       OpenObjectIntHashMap<String> dictionary = null;
1:29a7f38:       if (dictionaryFile.getName().startsWith(fromPrefix)) {
1:29a7f38:         dictionary = fromDictionary;
1:29a7f38:       } else if (dictionaryFile.getName().startsWith(msgIdPrefix)) {
1:29a7f38:         dictionary = msgIdDictionary;
1:29a7f38:       }
1:29a7f38:       if (dictionary != null) {
1:25d59aa:         dictionaryFile = fs.makeQualified(dictionaryFile);
1:29a7f38:         for (Pair<Writable, IntWritable> record
1:29a7f38:             : new SequenceFileIterable<Writable, IntWritable>(dictionaryFile, true, conf)) {
1:29a7f38:           dictionary.put(record.getFirst().toString(), record.getSecond().get());
1:29a7f38:         }
1:29a7f38:       }
1:29a7f38:     }
1:29a7f38: 
1:29a7f38:   }
1:29a7f38: 
1:4194a28:   public static String[] parseReferences(CharSequence rawRefs) {
1:4194a28:     String[] splits;
1:29a7f38:     if (rawRefs != null && rawRefs.length() > 0) {
1:4194a28:       splits = SPACE_OR_CLOSE_ANGLE.split(rawRefs);
1:29a7f38:       for (int i = 0; i < splits.length; i++) {
1:4194a28:         splits[i] = ANGLE_BRACES.matcher(splits[i]).replaceAll("");
1:29a7f38:       }
1:29a7f38:     } else {
1:29a7f38:       splits = EMPTY;
1:29a7f38:     }
1:29a7f38:     return splits;
1:29a7f38:   }
1:5389d76: 
1:5389d76:   public enum Counters {
1:5389d76:     NO_MESSAGE_ID, NO_FROM_ADDRESS
1:5389d76:   }
1:29a7f38: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d9179e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.HadoopUtil;
/////////////////////////////////////////////////////////////////////////
1:     Path[] localFiles = HadoopUtil.getCachedFiles(conf);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:25d59aa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.fs.FileSystem;
/////////////////////////////////////////////////////////////////////////
1:     FileSystem fs = FileSystem.getLocal(conf);
/////////////////////////////////////////////////////////////////////////
1:         dictionaryFile = fs.makeQualified(dictionaryFile);
commit:4a6453c
/////////////////////////////////////////////////////////////////////////
0:     Path[] localFiles = DistributedCache.getLocalCacheFiles(conf);
1:     for (Path dictionaryFile : localFiles) {
1: 
commit:5389d76
/////////////////////////////////////////////////////////////////////////
1:   public static final Pattern WHITESPACE = Pattern.compile("\\s*");
/////////////////////////////////////////////////////////////////////////
1: 
1:   public enum Counters {
1:     NO_MESSAGE_ID, NO_FROM_ADDRESS
1:   }
commit:3b9f635
/////////////////////////////////////////////////////////////////////////
1:   public static final String FROM_INDEX = "fromIdx";
1:   public static final String REFS_INDEX = "refsIdx";
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.example.email;
1: 
1: 
0: import com.google.common.base.Preconditions;
1: import org.apache.hadoop.conf.Configuration;
0: import org.apache.hadoop.filecache.DistributedCache;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
1: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: 
1: import java.io.IOException;
0: import java.net.URI;
1: 
1: /**
1:  *
1:  *
0:  **/
1: public final class EmailUtility {
1:   public static final String SEPARATOR = "separator";
1:   public static final String MSG_IDS_PREFIX = "msgIdsPrefix";
1:   public static final String FROM_PREFIX = "fromPrefix";
1:   public static final String MSG_ID_DIMENSION = "msgIdDim";
1: 
1:   private EmailUtility() {
1: 
1:   }
1: 
1:   /**
1:    * Strip off some spurious characters that make it harder to dedup
1:    *
0:    * @param address
0:    * @return
1:    */
0:   public static String cleanUpEmailAddress(String address) {
1:     //do some cleanup to normalize some things, like: Key: karthik ananth <karthik.jcecs@gmail.com>: Value: 178
1:     //Key: karthik ananth [mailto:karthik.jcecs@gmail.com]=20: Value: 179
1:     //TODO: is there more to clean up here?
0:     address = address.replaceAll("mailto:|<|>|\\[|\\]|\\=20", "");
0:     return address;
1:   }
1: 
1: 
1:   public static void loadDictionaries(Configuration conf, String fromPrefix,
1:                                       OpenObjectIntHashMap<String> fromDictionary,
1:                                       String msgIdPrefix,
1:                                       OpenObjectIntHashMap<String> msgIdDictionary) throws IOException {
1: 
0:     URI[] localFiles = DistributedCache.getCacheFiles(conf);
0:     Preconditions.checkArgument(localFiles != null,
0:             "missing paths from the DistributedCache");
0:     for (int i = 0; i < localFiles.length; i++) {
0:       URI localFile = localFiles[i];
0:       Path dictionaryFile = new Path(localFile.getPath());
1:       // key is word value is id
1: 
1:       OpenObjectIntHashMap<String> dictionary = null;
1:       if (dictionaryFile.getName().startsWith(fromPrefix)) {
1:         dictionary = fromDictionary;
1:       } else if (dictionaryFile.getName().startsWith(msgIdPrefix)) {
1:         dictionary = msgIdDictionary;
1:       }
1:       if (dictionary != null) {
1:         for (Pair<Writable, IntWritable> record
1:                 : new SequenceFileIterable<Writable, IntWritable>(dictionaryFile, true, conf)) {
1:           dictionary.put(record.getFirst().toString(), record.getSecond().get());
1:         }
1:       }
1:     }
1: 
1:   }
1: 
0:   private static final String [] EMPTY = new String[0];
1: 
0:   public static String[] parseReferences(String rawRefs) {
0:     String[] splits = null;
1:     if (rawRefs != null && rawRefs.length() > 0) {
0:       splits = rawRefs.split(">|\\s+");
1:       for (int i = 0; i < splits.length; i++) {
0:         splits[i] = splits[i].replaceAll("<|>", "");
1:       }
1:     } else {
1:       splits = EMPTY;
1:     }
1:     return splits;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.mahout.cf.taste.example.email;
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Pattern;
0: 
1:   private static final String[] EMPTY = new String[0];
1:   private static final Pattern ADDRESS_CLEANUP = Pattern.compile("mailto:|<|>|\\[|\\]|\\=20");
1:   private static final Pattern ANGLE_BRACES = Pattern.compile("<|>");
1:   private static final Pattern SPACE_OR_CLOSE_ANGLE = Pattern.compile(">|\\s+");
1:   public static String cleanUpEmailAddress(CharSequence address) {
1:     return ADDRESS_CLEANUP.matcher(address).replaceAll("");
/////////////////////////////////////////////////////////////////////////
0:     for (URI localFile : localFiles) {
/////////////////////////////////////////////////////////////////////////
0:             : new SequenceFileIterable<Writable, IntWritable>(dictionaryFile, true, conf)) {
/////////////////////////////////////////////////////////////////////////
1:   public static String[] parseReferences(CharSequence rawRefs) {
1:     String[] splits;
1:       splits = SPACE_OR_CLOSE_ANGLE.split(rawRefs);
1:         splits[i] = ANGLE_BRACES.matcher(splits[i]).replaceAll("");
============================================================================