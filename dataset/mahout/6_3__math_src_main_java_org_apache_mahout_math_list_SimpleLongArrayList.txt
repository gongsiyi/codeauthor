1:35fa73f: /*
1:35fa73f: Copyright 1999 CERN - European Organization for Nuclear Research.
1:35fa73f: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1:35fa73f: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1:35fa73f: that both that copyright notice and this permission notice appear in supporting documentation. 
1:35fa73f: CERN makes no representations about the suitability of this software for any purpose. 
1:35fa73f: It is provided "as is" without expressed or implied warranty.
9:35fa73f: */
1:35fa73f: package org.apache.mahout.math.list;
1:7926fcb: 
1:fcbc54a: /**
1:6d16230:  Resizable list holding <code>long</code> elements; implemented with arrays; not efficient; just to
1:6d16230:  demonstrate which methods you must override to implement a fully functional list.
1:fcbc54a:  */
1:35fa73f: public class SimpleLongArrayList extends AbstractLongList {
1:7926fcb: 
1:fcbc54a:   /**
1:7926fcb:    * The array buffer into which the elements of the list are stored. The capacity of the list is the length of this
1:7926fcb:    * array buffer.
1:fcbc54a:    */
1:7627de6:   private long[] elements;
1:7926fcb: 
1:7926fcb:   /** Constructs an empty list. */
1:7926fcb:   public SimpleLongArrayList() {
1:7926fcb:     this(10);
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Constructs a list containing the specified elements. The initial size and capacity of the list is the length of the
1:7926fcb:    * array.
1:7926fcb:    *
1:7926fcb:    * <b>WARNING:</b> For efficiency reasons and to keep memory usage low, <b>the array is not copied</b>. So if
1:7926fcb:    * subsequently you modify the specified array directly via the [] operator, be sure you know what you're doing.
1:7926fcb:    *
1:7926fcb:    * @param elements the array to be backed by the the constructed list
1:7926fcb:    */
1:7926fcb:   public SimpleLongArrayList(long[] elements) {
1:7926fcb:     elements(elements);
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Constructs an empty list with the specified initial capacity.
1:7926fcb:    *
1:7926fcb:    * @param initialCapacity the number of elements the receiver can hold without auto-expanding itself by allocating new
1:7926fcb:    *                        internal memory.
1:7926fcb:    */
1:7627de6:   private SimpleLongArrayList(int initialCapacity) {
1:7926fcb:     if (initialCapacity < 0) {
1:7926fcb:       throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);
1:7926fcb:     }
1:7926fcb: 
1:7926fcb:     this.elements(new long[initialCapacity]);
1:7926fcb:     size = 0;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Ensures that the receiver can hold at least the specified number of elements without needing to allocate new
1:7926fcb:    * internal memory. If necessary, allocates new internal memory and increases the capacity of the receiver.
1:7926fcb:    *
1:7926fcb:    * @param minCapacity the desired minimum capacity.
1:7926fcb:    */
1:7926fcb:   @Override
1:7926fcb:   public void ensureCapacity(int minCapacity) {
1:35fa73f:     elements = org.apache.mahout.math.Arrays.ensureCapacity(elements, minCapacity);
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Returns the element at the specified position in the receiver; <b>WARNING:</b> Does not check preconditions.
1:7926fcb:    * Provided with invalid parameters this method may return invalid elements without throwing any exception! <b>You
1:7926fcb:    * should only use this method when you are absolutely sure that the index is within bounds.</b> Precondition
1:7926fcb:    * (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
1:7926fcb:    *
1:7926fcb:    * @param index index of element to return.
1:7926fcb:    */
1:7926fcb:   @Override
1:7926fcb:   protected long getQuick(int index) {
1:7926fcb:     return elements[index];
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Replaces the element at the specified position in the receiver with the specified element; <b>WARNING:</b> Does not
1:7926fcb:    * check preconditions. Provided with invalid parameters this method may access invalid indexes without throwing any
1:7926fcb:    * exception! <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
1:7926fcb:    * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
1:7926fcb:    *
1:7926fcb:    * @param index   index of element to replace.
1:7926fcb:    * @param element element to be stored at the specified position.
1:7926fcb:    */
1:7926fcb:   @Override
1:7926fcb:   protected void setQuick(int index, long element) {
1:7926fcb:     elements[index] = element;
1:7926fcb:   }
1:7926fcb: 
1:7926fcb:   /**
1:7926fcb:    * Trims the capacity of the receiver to be the receiver's current size. An application can use this operation to
1:7926fcb:    * minimize the storage of the receiver.
1:7926fcb:    */
1:7926fcb:   @Override
1:7926fcb:   public void trimToSize() {
1:35fa73f:     elements = org.apache.mahout.math.Arrays.trimToCapacity(elements, size());
1:7926fcb:   }
9:35fa73f: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:  Resizable list holding <code>long</code> elements; implemented with arrays; not efficient; just to
1:  demonstrate which methods you must override to implement a fully functional list.
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
commit:7627de6
/////////////////////////////////////////////////////////////////////////
1:   private long[] elements;
0:   private int size;
/////////////////////////////////////////////////////////////////////////
1:   private SimpleLongArrayList(int initialCapacity) {
commit:7926fcb
/////////////////////////////////////////////////////////////////////////
0:  Resizable list holding <code>long</code> elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.
0:  First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
1: 
0: /** @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
1: 
1:    * The array buffer into which the elements of the list are stored. The capacity of the list is the length of this
1:    * array buffer.
0:   /** The size of the list. */
0:   protected int size;
1: 
1:   /** Constructs an empty list. */
1:   public SimpleLongArrayList() {
1:     this(10);
1:   }
1: 
1:   /**
1:    * Constructs a list containing the specified elements. The initial size and capacity of the list is the length of the
1:    * array.
1:    *
1:    * <b>WARNING:</b> For efficiency reasons and to keep memory usage low, <b>the array is not copied</b>. So if
1:    * subsequently you modify the specified array directly via the [] operator, be sure you know what you're doing.
1:    *
1:    * @param elements the array to be backed by the the constructed list
1:    */
1:   public SimpleLongArrayList(long[] elements) {
1:     elements(elements);
1:   }
1: 
1:   /**
1:    * Constructs an empty list with the specified initial capacity.
1:    *
1:    * @param initialCapacity the number of elements the receiver can hold without auto-expanding itself by allocating new
1:    *                        internal memory.
1:    */
0:   public SimpleLongArrayList(int initialCapacity) {
0:     super();
1:     if (initialCapacity < 0) {
1:       throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);
1:     }
1: 
1:     this.elements(new long[initialCapacity]);
1:     size = 0;
1:   }
1: 
1:   /**
1:    * Ensures that the receiver can hold at least the specified number of elements without needing to allocate new
1:    * internal memory. If necessary, allocates new internal memory and increases the capacity of the receiver.
1:    *
1:    * @param minCapacity the desired minimum capacity.
1:    */
1:   @Override
1:   public void ensureCapacity(int minCapacity) {
0:     elements = org.apache.mahout.matrix.Arrays.ensureCapacity(elements, minCapacity);
1:   }
1: 
1:   /**
1:    * Returns the element at the specified position in the receiver; <b>WARNING:</b> Does not check preconditions.
1:    * Provided with invalid parameters this method may return invalid elements without throwing any exception! <b>You
1:    * should only use this method when you are absolutely sure that the index is within bounds.</b> Precondition
1:    * (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
1:    *
1:    * @param index index of element to return.
1:    */
1:   @Override
1:   protected long getQuick(int index) {
1:     return elements[index];
1:   }
1: 
1:   /**
1:    * Replaces the element at the specified position in the receiver with the specified element; <b>WARNING:</b> Does not
1:    * check preconditions. Provided with invalid parameters this method may access invalid indexes without throwing any
1:    * exception! <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
1:    * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
1:    *
1:    * @param index   index of element to replace.
1:    * @param element element to be stored at the specified position.
1:    */
1:   @Override
1:   protected void setQuick(int index, long element) {
1:     elements[index] = element;
1:   }
1: 
1:   /**
1:    * Trims the capacity of the receiver to be the receiver's current size. An application can use this operation to
1:    * minimize the storage of the receiver.
1:    */
1:   @Override
1:   public void trimToSize() {
0:     elements = org.apache.mahout.matrix.Arrays.trimToCapacity(elements, size());
1:   }
commit:fcbc54a
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * The array buffer into which the elements of the list are stored.
0:    * The capacity of the list is the length of this array buffer.
0:    * @serial
1:    */
0:   protected long[] elements;
0:   
1:   /**
0:    * The size of the list.
0:    * @serial
1:    */
0:   protected int size;
0:   this(10);
/////////////////////////////////////////////////////////////////////////
0:   elements(elements);
/////////////////////////////////////////////////////////////////////////
0:   super();
0:   if (initialCapacity < 0)
0:      throw new IllegalArgumentException("Illegal Capacity: "+ initialCapacity);
0:   this.elements(new long[initialCapacity]);
0:   size=0;
/////////////////////////////////////////////////////////////////////////
0:   elements = org.apache.mahout.matrix.Arrays.ensureCapacity(elements,minCapacity);
/////////////////////////////////////////////////////////////////////////
0:   return elements[index];
/////////////////////////////////////////////////////////////////////////
0:   elements[index] = element;
/////////////////////////////////////////////////////////////////////////
0:   elements = org.apache.mahout.matrix.Arrays.trimToCapacity(elements,size());
author:Ted Dunning
-------------------------------------------------------------------------------
commit:35fa73f
/////////////////////////////////////////////////////////////////////////
1: /*
1: Copyright 1999 CERN - European Organization for Nuclear Research.
1: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
1: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
1: that both that copyright notice and this permission notice appear in supporting documentation. 
1: CERN makes no representations about the suitability of this software for any purpose. 
1: It is provided "as is" without expressed or implied warranty.
1: */
1: package org.apache.mahout.math.list;
0: 
0: /**
0:  Resizable list holding <code>long</code> elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.
1:  */
1: public class SimpleLongArrayList extends AbstractLongList {
0: 
0:   /**
0:    * The array buffer into which the elements of the list are stored. The capacity of the list is the length of this
0:    * array buffer.
1:    */
0:   private long[] elements;
0: 
0:   /** Constructs an empty list. */
0:   public SimpleLongArrayList() {
0:     this(10);
1:   }
0: 
0:   /**
0:    * Constructs a list containing the specified elements. The initial size and capacity of the list is the length of the
0:    * array.
0:    *
0:    * <b>WARNING:</b> For efficiency reasons and to keep memory usage low, <b>the array is not copied</b>. So if
0:    * subsequently you modify the specified array directly via the [] operator, be sure you know what you're doing.
0:    *
0:    * @param elements the array to be backed by the the constructed list
1:    */
0:   public SimpleLongArrayList(long[] elements) {
0:     elements(elements);
1:   }
0: 
0:   /**
0:    * Constructs an empty list with the specified initial capacity.
0:    *
0:    * @param initialCapacity the number of elements the receiver can hold without auto-expanding itself by allocating new
0:    *                        internal memory.
1:    */
0:   private SimpleLongArrayList(int initialCapacity) {
0:     super();
0:     if (initialCapacity < 0) {
0:       throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);
1:     }
0: 
0:     this.elements(new long[initialCapacity]);
0:     size = 0;
1:   }
0: 
0:   /**
0:    * Ensures that the receiver can hold at least the specified number of elements without needing to allocate new
0:    * internal memory. If necessary, allocates new internal memory and increases the capacity of the receiver.
0:    *
0:    * @param minCapacity the desired minimum capacity.
1:    */
0:   @Override
0:   public void ensureCapacity(int minCapacity) {
1:     elements = org.apache.mahout.math.Arrays.ensureCapacity(elements, minCapacity);
1:   }
0: 
0:   /**
0:    * Returns the element at the specified position in the receiver; <b>WARNING:</b> Does not check preconditions.
0:    * Provided with invalid parameters this method may return invalid elements without throwing any exception! <b>You
0:    * should only use this method when you are absolutely sure that the index is within bounds.</b> Precondition
0:    * (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
0:    *
0:    * @param index index of element to return.
1:    */
0:   @Override
0:   protected long getQuick(int index) {
0:     return elements[index];
1:   }
0: 
0:   /**
0:    * Replaces the element at the specified position in the receiver with the specified element; <b>WARNING:</b> Does not
0:    * check preconditions. Provided with invalid parameters this method may access invalid indexes without throwing any
0:    * exception! <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
0:    * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
0:    *
0:    * @param index   index of element to replace.
0:    * @param element element to be stored at the specified position.
1:    */
0:   @Override
0:   protected void setQuick(int index, long element) {
0:     elements[index] = element;
1:   }
0: 
0:   /**
0:    * Trims the capacity of the receiver to be the receiver's current size. An application can use this operation to
0:    * minimize the storage of the receiver.
1:    */
0:   @Override
0:   public void trimToSize() {
1:     elements = org.apache.mahout.math.Arrays.trimToCapacity(elements, size());
1:   }
1: }
author:Benson Margulies
-------------------------------------------------------------------------------
commit:ebf9a4d
/////////////////////////////////////////////////////////////////////////
author:Robin Anil
-------------------------------------------------------------------------------
commit:a51dd9e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a435efb
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.list;
/////////////////////////////////////////////////////////////////////////
0:     elements = org.apache.mahout.math.Arrays.ensureCapacity(elements, minCapacity);
/////////////////////////////////////////////////////////////////////////
0:     elements = org.apache.mahout.math.Arrays.trimToCapacity(elements, size());
commit:f49424e
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.matrix.list;
/////////////////////////////////////////////////////////////////////////
0: 	elements = org.apache.mahout.matrix.Arrays.ensureCapacity(elements,minCapacity);
/////////////////////////////////////////////////////////////////////////
0: 	elements = org.apache.mahout.matrix.Arrays.trimToCapacity(elements,size());
commit:7550a10
/////////////////////////////////////////////////////////////////////////
0: /*
0: Copyright 1999 CERN - European Organization for Nuclear Research.
0: Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
0: is hereby granted without fee, provided that the above copyright notice appear in all copies and 
0: that both that copyright notice and this permission notice appear in supporting documentation. 
0: CERN makes no representations about the suitability of this software for any purpose. 
0: It is provided "as is" without expressed or implied warranty.
0: */
0: package org.apache.mahout.colt.list;
0: 
0: /**
0: Resizable list holding <code>long</code> elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.
0: First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
0: */
0: /** 
0:  * @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported.
0:  */
0: @Deprecated
0: public class SimpleLongArrayList extends AbstractLongList {
0: 	/**
0: 	 * The array buffer into which the elements of the list are stored.
0: 	 * The capacity of the list is the length of this array buffer.
0: 	 * @serial
0: 	 */
0: 	protected long[] elements;
0: 	
0: 	/**
0: 	 * The size of the list.
0: 	 * @serial
0: 	 */
0: 	protected int size;
0: /**
0:  * Constructs an empty list.
0:  */
0: public SimpleLongArrayList() {
0: 	this(10);
0: }
0: /**
0:  * Constructs a list containing the specified elements. 
0:  * The initial size and capacity of the list is the length of the array.
0:  *
0:  * <b>WARNING:</b> For efficiency reasons and to keep memory usage low, <b>the array is not copied</b>.
0:  * So if subsequently you modify the specified array directly via the [] operator, be sure you know what you're doing.
0:  * 
0:  * @param elements the array to be backed by the the constructed list
0:  */
0: public SimpleLongArrayList(long[] elements) {
0: 	elements(elements);
0: }
0: /**
0:  * Constructs an empty list with the specified initial capacity.
0:  *
0:  * @param   initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.
0:  */
0: public SimpleLongArrayList(int initialCapacity) {
0: 	super();
0: 	if (initialCapacity < 0)
0: 	   throw new IllegalArgumentException("Illegal Capacity: "+ initialCapacity);
0: 
0: 	this.elements(new long[initialCapacity]);
0: 	size=0;
0: }
0: /**
0:  * Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
0:  * If necessary, allocates new internal memory and increases the capacity of the receiver.
0:  *
0:  * @param   minCapacity   the desired minimum capacity.
0:  */
0: public void ensureCapacity(int minCapacity) {
0: 	elements = org.apache.mahout.colt.Arrays.ensureCapacity(elements,minCapacity);
0: }
0: /**
0:  * Returns the element at the specified position in the receiver; <b>WARNING:</b> Does not check preconditions. 
0:  * Provided with invalid parameters this method may return invalid elements without throwing any exception!
0:  * <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
0:  * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
0:  *
0:  * @param index index of element to return.
0:  */
0: protected long getQuick(int index) {
0: 	return elements[index];
0: }
0: /**
0:  * Replaces the element at the specified position in the receiver with the specified element; <b>WARNING:</b> Does not check preconditions. 
0:  * Provided with invalid parameters this method may access invalid indexes without throwing any exception!
0:  * <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
0:  * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
0:  *
0:  * @param index index of element to replace.
0:  * @param element element to be stored at the specified position.
0:  */
0: protected void setQuick(int index, long element) {
0: 	elements[index] = element;
0: }
0: /**
0: * Trims the capacity of the receiver to be the receiver's current 
0: * size. An application can use this operation to minimize the 
0: * storage of the receiver. 
0: */
0: public void trimToSize() {
0: 	elements = org.apache.mahout.colt.Arrays.trimToCapacity(elements,size());
0: }
0: }
============================================================================