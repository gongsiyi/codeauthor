1:80366ee: /**
1:80366ee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:80366ee:  * contributor license agreements.  See the NOTICE file distributed with
1:80366ee:  * this work for additional information regarding copyright ownership.
1:80366ee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:80366ee:  * (the "License"); you may not use this file except in compliance with
1:80366ee:  * the License.  You may obtain a copy of the License at
1:80366ee:  *
1:80366ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:80366ee:  *
1:80366ee:  * Unless required by applicable law or agreed to in writing, software
1:80366ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:80366ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80366ee:  * See the License for the specific language governing permissions and
1:80366ee:  * limitations under the License.
1:80366ee:  */
1:80366ee: 
1:a13b4b7: package org.apache.mahout.common.iterator.sequencefile;
1:a13b4b7: 
1:12659e1: import java.io.Closeable;
1:a13b4b7: import java.io.IOException;
1:a13b4b7: import java.util.Arrays;
1:12659e1: import java.util.Collections;
1:a13b4b7: import java.util.Comparator;
1:a13b4b7: import java.util.Iterator;
1:12659e1: import java.util.List;
1:a13b4b7: 
1:80366ee: import com.google.common.base.Function;
1:80366ee: import com.google.common.collect.ForwardingIterator;
1:80366ee: import com.google.common.collect.Iterators;
1:12659e1: import com.google.common.collect.Lists;
1:a13b4b7: import org.apache.hadoop.conf.Configuration;
1:a13b4b7: import org.apache.hadoop.fs.FileStatus;
1:a13b4b7: import org.apache.hadoop.fs.FileSystem;
1:a13b4b7: import org.apache.hadoop.fs.Path;
1:a13b4b7: import org.apache.hadoop.fs.PathFilter;
1:a13b4b7: import org.apache.hadoop.io.Writable;
1:12659e1: import org.apache.mahout.common.IOUtils;
1:a13b4b7: 
1:a13b4b7: /**
1:8bac914:  * Like {@link SequenceFileValueIterator}, but iterates not just over one
1:8bac914:  * sequence file, but many. The input path may be specified as a directory of
1:8bac914:  * files to read, or as a glob pattern. The set of files may be optionally
1:a13b4b7:  * restricted with a {@link PathFilter}.
1:a13b4b7:  */
1:8bac914: public final class SequenceFileDirValueIterator<V extends Writable> extends
1:8bac914:     ForwardingIterator<V> implements Closeable {
1:564c3e1:   
1:564c3e1:   private static final FileStatus[] NO_STATUSES = new FileStatus[0];
1:80366ee: 
1:8bac914:   private Iterator<V> delegate;
1:12659e1:   private final List<SequenceFileValueIterator<V>> iterators;
1:a13b4b7: 
1:8bac914:   /**
1:8bac914:    * Constructor that uses either {@link FileSystem#listStatus(Path)} or
1:8bac914:    * {@link FileSystem#globStatus(Path)} to obtain list of files to iterate over
1:8bac914:    * (depending on pathType parameter).
1:8bac914:    */
1:a13b4b7:   public SequenceFileDirValueIterator(Path path,
2:a13b4b7:                                       PathType pathType,
2:a13b4b7:                                       PathFilter filter,
1:a13b4b7:                                       Comparator<FileStatus> ordering,
1:564c3e1:                                       boolean reuseKeyValueInstances,
1:564c3e1:                                       Configuration conf) throws IOException {
1:a13b4b7:     FileStatus[] statuses;
1:1de8cec:     FileSystem fs = FileSystem.get(path.toUri(), conf);
1:a13b4b7:     if (filter == null) {
1:564c3e1:       statuses = pathType == PathType.GLOB ? fs.globStatus(path) : fs.listStatus(path);
1:a13b4b7:     } else {
1:564c3e1:       statuses = pathType == PathType.GLOB ? fs.globStatus(path, filter) : fs.listStatus(path, filter);
4:a13b4b7:     }
1:12659e1:     iterators = Lists.newArrayList();
1:8bac914:     init(statuses, ordering, reuseKeyValueInstances, conf);
1:a13b4b7:   }
1:a13b4b7: 
1:8bac914:   /**
1:8bac914:    * Multifile sequence file iterator where files are specified explicitly by
1:8bac914:    * path parameters.
1:8bac914:    */
1:8bac914:   public SequenceFileDirValueIterator(Path[] path,
1:a13b4b7:                                       Comparator<FileStatus> ordering,
1:564c3e1:                                       boolean reuseKeyValueInstances,
1:564c3e1:                                       Configuration conf) throws IOException {
1:a13b4b7: 
2:8bac914:     iterators = Lists.newArrayList();
1:8bac914:     /*
1:8bac914:      * we assume all files should exist, otherwise we will bail out.
1:8bac914:      */
1:1de8cec:     FileSystem fs = FileSystem.get(path[0].toUri(), conf);
1:8bac914:     FileStatus[] statuses = new FileStatus[path.length];
1:564c3e1:     for (int i = 0; i < statuses.length; i++) {
1:8bac914:       statuses[i] = fs.getFileStatus(path[i]);
1:564c3e1:     }
1:8bac914:     init(statuses, ordering, reuseKeyValueInstances, conf);
1:a13b4b7:   }
1:a13b4b7: 
1:8bac914:   private void init(FileStatus[] statuses,
2:8bac914:                     Comparator<FileStatus> ordering,
1:80366ee:                     final boolean reuseKeyValueInstances,
1:80366ee:                     final Configuration conf) throws IOException {
1:a13b4b7: 
1:8bac914:     /*
1:8bac914:      * prevent NPEs. Unfortunately, Hadoop would return null for list if nothing
1:8bac914:      * was qualified. In this case, which is a corner case, we should assume an
1:8bac914:      * empty iterator, not an NPE.
1:8bac914:      */
1:564c3e1:     if (statuses == null) {
1:564c3e1:       statuses = NO_STATUSES;
1:564c3e1:     }
1:a13b4b7: 
1:a13b4b7:     if (ordering != null) {
1:a13b4b7:       Arrays.sort(statuses, ordering);
1:a13b4b7:     }
1:80366ee:     Iterator<FileStatus> fileStatusIterator = Iterators.forArray(statuses);
1:12659e1: 
1:80366ee:     try {
1:12659e1: 
1:80366ee:       Iterator<Iterator<V>> fsIterators =
1:80366ee:         Iterators.transform(fileStatusIterator,
1:6d16230:           new Function<FileStatus, Iterator<V>>() {
1:6d16230:             @Override
1:6d16230:             public Iterator<V> apply(FileStatus from) {
1:6d16230:               try {
1:87c15be:                 SequenceFileValueIterator<V> iterator = new SequenceFileValueIterator<>(from.getPath(),
1:6d16230:                     reuseKeyValueInstances, conf);
1:6d16230:                 iterators.add(iterator);
1:6d16230:                 return iterator;
1:6d16230:               } catch (IOException ioe) {
1:6d16230:                 throw new IllegalStateException(from.getPath().toString(), ioe);
1:6d16230:               }
1:6d16230:             }
1:6d16230:           });
1:12659e1: 
1:12659e1:       Collections.reverse(iterators); // close later in reverse order
1:12659e1: 
1:80366ee:       delegate = Iterators.concat(fsIterators);
1:a13b4b7: 
1:8bac914:     } finally {
1:8bac914:       /*
1:8bac914:        * prevent file handle leaks in case one of handles fails to open. If some
1:8bac914:        * of the files fail to open, constructor will fail and close() will never
1:8bac914:        * be called. Thus, those handles that did open in constructor, would leak
1:8bac914:        * out, unless we specifically handle it here.
1:8bac914:        */
1:564c3e1:       IOUtils.close(iterators);
1:80366ee:     }
1:80366ee:   }
1:a13b4b7: 
2:80366ee:   @Override
1:80366ee:   protected Iterator<V> delegate() {
1:80366ee:     return delegate;
1:a13b4b7:   }
1:a13b4b7: 
1:12659e1:   @Override
1:12659e1:   public void close() throws IOException {
1:12659e1:     IOUtils.close(iterators);
1:12659e1:   }
1:12659e1: 
1:a13b4b7: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:                 SequenceFileValueIterator<V> iterator = new SequenceFileValueIterator<>(from.getPath(),
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:           new Function<FileStatus, Iterator<V>>() {
1:             @Override
1:             public Iterator<V> apply(FileStatus from) {
1:               try {
0:                 SequenceFileValueIterator<V> iterator = new SequenceFileValueIterator<V>(from.getPath(),
1:                     reuseKeyValueInstances, conf);
1:                 iterators.add(iterator);
1:                 return iterator;
1:               } catch (IOException ioe) {
1:                 throw new IllegalStateException(from.getPath().toString(), ioe);
1:               }
1:             }
1:           });
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1de8cec
/////////////////////////////////////////////////////////////////////////
1:     FileSystem fs = FileSystem.get(path.toUri(), conf);
/////////////////////////////////////////////////////////////////////////
1:     FileSystem fs = FileSystem.get(path[0].toUri(), conf);
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:   
1:   private static final FileStatus[] NO_STATUSES = new FileStatus[0];
/////////////////////////////////////////////////////////////////////////
1:                                       boolean reuseKeyValueInstances,
1:                                       Configuration conf) throws IOException {
1:       statuses = pathType == PathType.GLOB ? fs.globStatus(path) : fs.listStatus(path);
1:       statuses = pathType == PathType.GLOB ? fs.globStatus(path, filter) : fs.listStatus(path, filter);
/////////////////////////////////////////////////////////////////////////
1:                                       boolean reuseKeyValueInstances,
1:                                       Configuration conf) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < statuses.length; i++) {
1:     }
/////////////////////////////////////////////////////////////////////////
1:     if (statuses == null) {
1:       statuses = NO_STATUSES;
1:     }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       IOUtils.close(iterators);
commit:12659e1
/////////////////////////////////////////////////////////////////////////
1: import java.io.Closeable;
1: import java.util.Collections;
1: import java.util.List;
1: import com.google.common.collect.Lists;
1: import org.apache.mahout.common.IOUtils;
0: public final class SequenceFileDirValueIterator<V extends Writable>
0:     extends ForwardingIterator<V> implements Closeable {
1:   private final List<SequenceFileValueIterator<V>> iterators;
/////////////////////////////////////////////////////////////////////////
1: 
1:     iterators = Lists.newArrayList();
1: 
0:                                   SequenceFileValueIterator<V> iterator =
0:                                     new SequenceFileValueIterator<V>(from.getPath(), reuseKeyValueInstances, conf);
0:                                   iterators.add(iterator);
0:                                   return iterator;
1: 
1:     Collections.reverse(iterators); // close later in reverse order
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void close() throws IOException {
1:     IOUtils.close(iterators);
0:     iterators.clear();
1:   }
1: 
commit:9101588
/////////////////////////////////////////////////////////////////////////
0:                                   throw new IllegalStateException(from.getPath().toString(), ioe);
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
1: import com.google.common.collect.ForwardingIterator;
1: import com.google.common.collect.Iterators;
0: public final class SequenceFileDirValueIterator<V extends Writable> extends ForwardingIterator<V> {
1: 
0:   private final Iterator<V> delegate;
1:                                       final boolean reuseKeyValueInstances,
1:                                       final Configuration conf) throws IOException {
0:     FileSystem fs = path.getFileSystem(conf);
/////////////////////////////////////////////////////////////////////////
1:     Iterator<FileStatus> fileStatusIterator = Iterators.forArray(statuses);
1:     Iterator<Iterator<V>> fsIterators =
1:         Iterators.transform(fileStatusIterator,
0:                             new Function<FileStatus, Iterator<V>>() {
1:                               @Override
0:                               public Iterator<V> apply(FileStatus from) {
1:                                 try {
0:                                   return new SequenceFileValueIterator<V>(from.getPath(), reuseKeyValueInstances, conf);
0:                                 } catch (IOException ioe) {
0:                                   throw new IllegalStateException(ioe);
1:                                 }
1:                               }
0:                             });
1:     delegate = Iterators.concat(fsIterators);
1:   @Override
1:   protected Iterator<V> delegate() {
1:     return delegate;
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.common.iterator.sequencefile;
1: 
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.Comparator;
1: import java.util.Iterator;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileStatus;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.fs.PathFilter;
1: import org.apache.hadoop.io.Writable;
0: import org.apache.mahout.common.iterator.ArrayIterator;
0: import org.apache.mahout.common.iterator.DelegatingIterator;
0: import org.apache.mahout.common.iterator.IteratorsIterator;
0: import org.apache.mahout.common.iterator.TransformingIterator;
1: 
1: /**
0:  * Like {@link SequenceFileValueIterator}, but iterates not just over one sequence file, but many. The input path
0:  * may be specified as a directory of files to read, or as a glob pattern. The set of files may be optionally
1:  * restricted with a {@link PathFilter}.
1:  */
0: public final class SequenceFileDirValueIterator<V extends Writable> extends DelegatingIterator<V> {
1: 
1:   public SequenceFileDirValueIterator(Path path,
1:                                       PathType pathType,
1:                                       PathFilter filter,
1:                                       Comparator<FileStatus> ordering,
0:                                       boolean reuseKeyValueInstances,
0:                                       Configuration conf)
0:     throws IOException {
0:     super(SequenceFileDirValueIterator.<V>buildDelegate(path,
0:                                                         pathType,
0:                                                         filter,
0:                                                         ordering,
0:                                                         reuseKeyValueInstances,
0:                                                         conf));
1:   }
1: 
0:   private static <V extends Writable> Iterator<V> buildDelegate(
0:       Path path,
1:       PathType pathType,
1:       PathFilter filter,
1:       Comparator<FileStatus> ordering,
0:       boolean reuseKeyValueInstances,
0:       Configuration conf) throws IOException {
1: 
0:     FileSystem fs = path.getFileSystem(conf);
0:     path = path.makeQualified(fs);
1:     FileStatus[] statuses;
1:     if (filter == null) {
0:       statuses = pathType == PathType.GLOB ? fs.globStatus(path) : fs.listStatus(path);
1:     } else {
0:       statuses = pathType == PathType.GLOB ? fs.globStatus(path, filter) : fs.listStatus(path, filter);
1:     }
1:     if (ordering != null) {
1:       Arrays.sort(statuses, ordering);
1:     }
0:     Iterator<FileStatus> fileStatusIterator = new ArrayIterator<FileStatus>(statuses);
0:     return new IteratorsIterator<V>(
0:         new FileStatusToSFIterator<V>(fileStatusIterator, reuseKeyValueInstances, conf));
1:   }
1: 
1: 
0:   private static class FileStatusToSFIterator<V extends Writable>
0:     extends TransformingIterator<FileStatus,Iterator<V>> {
1: 
0:     private final Configuration conf;
0:     private final boolean reuseKeyValueInstances;
1: 
0:     private FileStatusToSFIterator(Iterator<FileStatus> fileStatusIterator,
0:                                    boolean reuseKeyValueInstances,
0:                                    Configuration conf) {
0:       super(fileStatusIterator);
0:       this.reuseKeyValueInstances = reuseKeyValueInstances;
0:       this.conf = conf;
1:     }
1: 
0:     @Override
0:     protected Iterator<V> transform(FileStatus in) {
0:       try {
0:         return new SequenceFileValueIterator<V>(in.getPath(), reuseKeyValueInstances, conf);
0:       } catch (IOException ioe) {
0:         throw new IllegalStateException(ioe);
1:       }
1:     }
1:   }
1: 
1: }
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:8bac914
/////////////////////////////////////////////////////////////////////////
1:  * Like {@link SequenceFileValueIterator}, but iterates not just over one
1:  * sequence file, but many. The input path may be specified as a directory of
1:  * files to read, or as a glob pattern. The set of files may be optionally
1: public final class SequenceFileDirValueIterator<V extends Writable> extends
1:     ForwardingIterator<V> implements Closeable {
1:   private Iterator<V> delegate;
1:   /**
1:    * Constructor that uses either {@link FileSystem#listStatus(Path)} or
1:    * {@link FileSystem#globStatus(Path)} to obtain list of files to iterate over
1:    * (depending on pathType parameter).
0:    * <P>
0:    * 
0:    * @param path
0:    * @param pathType
0:    * @param filter
0:    * @param ordering
0:    * @param reuseKeyValueInstances
0:    * @param conf
0:    * @throws IOException
1:    */
/////////////////////////////////////////////////////////////////////////
0:     FileSystem fs = FileSystem.get(conf);
0:       statuses =
0:         pathType == PathType.GLOB ? fs.globStatus(path) : fs.listStatus(path);
0:       statuses =
0:         pathType == PathType.GLOB ? fs.globStatus(path, filter)
0:             : fs.listStatus(path, filter);
1:     iterators = Lists.newArrayList();
1:     init(statuses, ordering, reuseKeyValueInstances, conf);
0:   }
0: 
1:   /**
1:    * Multifile sequence file iterator where files are specified explicitly by
1:    * path parameters.
0:    * 
0:    * @param path
0:    * @param ordering
0:    * @param reuseKeyValueInstances
0:    * @param conf
0:    * @throws IOException
1:    */
1:   public SequenceFileDirValueIterator(Path[] path,
1:                                       Comparator<FileStatus> ordering,
0:                                       final boolean reuseKeyValueInstances,
0:                                       final Configuration conf) throws IOException {
0: 
1:     iterators = Lists.newArrayList();
1:     /*
1:      * we assume all files should exist, otherwise we will bail out.
1:      */
0:     FileSystem fs = FileSystem.get(conf);
1:     FileStatus[] statuses = new FileStatus[path.length];
0:     for (int i = 0; i < statuses.length; i++)
1:       statuses[i] = fs.getFileStatus(path[i]);
1:     init(statuses, ordering, reuseKeyValueInstances, conf);
0:   }
0: 
1:   private void init(FileStatus[] statuses,
1:                     Comparator<FileStatus> ordering,
0:                     final boolean reuseKeyValueInstances,
0:                     final Configuration conf) throws IOException {
0: 
1:     /*
1:      * prevent NPEs. Unfortunately, Hadoop would return null for list if nothing
1:      * was qualified. In this case, which is a corner case, we should assume an
1:      * empty iterator, not an NPE.
1:      */
0:     if (statuses == null)
0:       statuses = new FileStatus[0];
0: 
0:     boolean ok = false;
0:     try {
0: 
0:       Iterator<Iterator<V>> fsIterators =
0:                                     new SequenceFileValueIterator<V>(from.getPath(),
0:                                                                      reuseKeyValueInstances,
0:                                                                      conf);
0:                                   throw new IllegalStateException(from.getPath()
0:                                                                       .toString(),
0:                                                                   ioe);
0:       Collections.reverse(iterators); // close later in reverse order
0:       delegate = Iterators.concat(fsIterators);
0:       ok = true;
0: 
1:     } finally {
1:       /*
1:        * prevent file handle leaks in case one of handles fails to open. If some
1:        * of the files fail to open, constructor will fail and close() will never
1:        * be called. Thus, those handles that did open in constructor, would leak
1:        * out, unless we specifically handle it here.
1:        */
0: 
0:       if (!ok)
0:         IOUtils.close(iterators);
0:     }
/////////////////////////////////////////////////////////////////////////
============================================================================