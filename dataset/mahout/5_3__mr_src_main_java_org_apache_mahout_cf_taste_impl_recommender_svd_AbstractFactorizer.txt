1:7892be3: /**
1:7892be3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7892be3:  * contributor license agreements.  See the NOTICE file distributed with
1:7892be3:  * this work for additional information regarding copyright ownership.
1:7892be3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7892be3:  * (the "License"); you may not use this file except in compliance with
1:7892be3:  * the License.  You may obtain a copy of the License at
1:7892be3:  *
1:7892be3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7892be3:  *
1:7892be3:  * Unless required by applicable law or agreed to in writing, software
1:7892be3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7892be3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7892be3:  * See the License for the specific language governing permissions and
1:7892be3:  * limitations under the License.
1:7892be3:  */
1:7892be3: 
1:7892be3: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:7892be3: 
1:11afe57: import java.util.Collection;
1:11afe57: import java.util.concurrent.Callable;
1:11afe57: 
1:11afe57: import org.apache.mahout.cf.taste.common.Refreshable;
1:7892be3: import org.apache.mahout.cf.taste.common.TasteException;
1:7892be3: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:7892be3: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:11afe57: import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
1:7892be3: import org.apache.mahout.cf.taste.model.DataModel;
1:7892be3: 
1:7892be3: /**
1:7892be3:  * base class for {@link Factorizer}s, provides ID to index mapping
1:7892be3:  */
1:7892be3: public abstract class AbstractFactorizer implements Factorizer {
1:7892be3: 
1:11afe57:   private final DataModel dataModel;
1:11afe57:   private FastByIDMap<Integer> userIDMapping;
1:11afe57:   private FastByIDMap<Integer> itemIDMapping;
1:11afe57:   private final RefreshHelper refreshHelper;
1:7892be3: 
1:7892be3:   protected AbstractFactorizer(DataModel dataModel) throws TasteException {
1:11afe57:     this.dataModel = dataModel;
1:11afe57:     buildMappings();
1:11afe57:     refreshHelper = new RefreshHelper(new Callable<Object>() {
1:11afe57:       @Override
1:11afe57:       public Object call() throws TasteException {
1:11afe57:         buildMappings();
1:11afe57:         return null;
1:11afe57:       }
1:11afe57:     });
1:11afe57:     refreshHelper.addDependency(dataModel);
1:11afe57:   }
1:11afe57:   
1:11afe57:   private void buildMappings() throws TasteException {
1:7892be3:     userIDMapping = createIDMapping(dataModel.getNumUsers(), dataModel.getUserIDs());
1:7892be3:     itemIDMapping = createIDMapping(dataModel.getNumItems(), dataModel.getItemIDs());
1:7892be3:   }
1:7892be3: 
1:7892be3:   protected Factorization createFactorization(double[][] userFeatures, double[][] itemFeatures) {
1:7892be3:     return new Factorization(userIDMapping, itemIDMapping, userFeatures, itemFeatures);
1:7892be3:   }
1:7892be3: 
1:7892be3:   protected Integer userIndex(long userID) {
1:11afe57:     Integer userIndex = userIDMapping.get(userID);
1:3218e95:     if (userIndex == null) {
1:77fa316:       userIndex = userIDMapping.size();
1:77fa316:       userIDMapping.put(userID, userIndex);
1:11afe57:     }
1:11afe57:     return userIndex;
1:7892be3:   }
1:7892be3: 
1:7892be3:   protected Integer itemIndex(long itemID) {
1:11afe57:     Integer itemIndex = itemIDMapping.get(itemID);
1:3218e95:     if (itemIndex == null) {
1:77fa316:       itemIndex = itemIDMapping.size();
1:77fa316:       itemIDMapping.put(itemID, itemIndex);
1:11afe57:     }
1:11afe57:     return itemIndex;
1:7892be3:   }
1:7892be3: 
1:b16c260:   private static FastByIDMap<Integer> createIDMapping(int size, LongPrimitiveIterator idIterator) {
1:e73fdb8:     FastByIDMap<Integer> mapping = new FastByIDMap<>(size);
1:7892be3:     int index = 0;
1:7892be3:     while (idIterator.hasNext()) {
1:7892be3:       mapping.put(idIterator.nextLong(), index++);
1:7892be3:     }
1:7892be3:     return mapping;
1:7892be3:   }
1:11afe57: 
1:11afe57:   @Override
1:11afe57:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:11afe57:     refreshHelper.refresh(alreadyRefreshed);
1:11afe57:   }
1:11afe57:   
1:7892be3: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:e73fdb8
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<Integer> mapping = new FastByIDMap<>(size);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:77fa316
/////////////////////////////////////////////////////////////////////////
1:       userIndex = userIDMapping.size();
1:       userIDMapping.put(userID, userIndex);
/////////////////////////////////////////////////////////////////////////
1:       itemIndex = itemIDMapping.size();
1:       itemIDMapping.put(itemID, itemIndex);
commit:3218e95
/////////////////////////////////////////////////////////////////////////
1:     if (userIndex == null) {
/////////////////////////////////////////////////////////////////////////
1:     if (itemIndex == null) {
commit:11afe57
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.impl.common.RefreshHelper;
/////////////////////////////////////////////////////////////////////////
1:   private final DataModel dataModel;
1:   private FastByIDMap<Integer> userIDMapping;
1:   private FastByIDMap<Integer> itemIDMapping;
1:   private final RefreshHelper refreshHelper;
1:     this.dataModel = dataModel;
1:     buildMappings();
1:     refreshHelper = new RefreshHelper(new Callable<Object>() {
1:       @Override
1:       public Object call() throws TasteException {
1:         buildMappings();
1:         return null;
1:       }
1:     });
1:     refreshHelper.addDependency(dataModel);
1:   }
1:   
1:   private void buildMappings() throws TasteException {
/////////////////////////////////////////////////////////////////////////
1:     Integer userIndex = userIDMapping.get(userID);
0:     if(userIndex == null) {
0:       userIndex = userIDMapping.put(userID, userIDMapping.size());
1:     }
1:     return userIndex;
1:     Integer itemIndex = itemIDMapping.get(itemID);
0:     if(itemIndex == null) {
0:       itemIndex = itemIDMapping.put(itemID, itemIDMapping.size());
1:     }
1:     return itemIndex;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     refreshHelper.refresh(alreadyRefreshed);
1:   }
1:   
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:   private static FastByIDMap<Integer> createIDMapping(int size, LongPrimitiveIterator idIterator) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:7892be3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: 
1: /**
1:  * base class for {@link Factorizer}s, provides ID to index mapping
1:  */
1: public abstract class AbstractFactorizer implements Factorizer {
1: 
0:   private final FastByIDMap<Integer> userIDMapping;
0:   private final FastByIDMap<Integer> itemIDMapping;
1: 
1:   protected AbstractFactorizer(DataModel dataModel) throws TasteException {
1:     userIDMapping = createIDMapping(dataModel.getNumUsers(), dataModel.getUserIDs());
1:     itemIDMapping = createIDMapping(dataModel.getNumItems(), dataModel.getItemIDs());
1:   }
1: 
1:   protected Factorization createFactorization(double[][] userFeatures, double[][] itemFeatures) {
1:     return new Factorization(userIDMapping, itemIDMapping, userFeatures, itemFeatures);
1:   }
1: 
1:   protected Integer userIndex(long userID) {
0:     return userIDMapping.get(userID);
1:   }
1: 
1:   protected Integer itemIndex(long itemID) {
0:     return itemIDMapping.get(itemID);
1:   }
1: 
0:   private FastByIDMap<Integer> createIDMapping(int size, LongPrimitiveIterator idIterator) {
0:     FastByIDMap<Integer> mapping = new FastByIDMap<Integer>(size);
1:     int index = 0;
1:     while (idIterator.hasNext()) {
1:       mapping.put(idIterator.nextLong(), index++);
1:     }
1:     return mapping;
1:   }
1: }
============================================================================