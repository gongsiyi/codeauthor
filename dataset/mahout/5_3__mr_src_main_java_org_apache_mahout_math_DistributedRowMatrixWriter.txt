1:131eb4a: /**
1:131eb4a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:131eb4a:  * contributor license agreements.  See the NOTICE file distributed with
1:131eb4a:  * this work for additional information regarding copyright ownership.
1:131eb4a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:131eb4a:  * (the "License"); you may not use this file except in compliance with
1:131eb4a:  * the License.  You may obtain a copy of the License at
1:131eb4a:  *
1:131eb4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:131eb4a:  *
1:131eb4a:  * Unless required by applicable law or agreed to in writing, software
1:131eb4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:131eb4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:131eb4a:  * See the License for the specific language governing permissions and
1:131eb4a:  * limitations under the License.
1:131eb4a:  */
1:131eb4a: package org.apache.mahout.math;
1:131eb4a: 
1:131eb4a: import org.apache.hadoop.conf.Configuration;
1:131eb4a: import org.apache.hadoop.fs.FileSystem;
1:131eb4a: import org.apache.hadoop.fs.Path;
1:131eb4a: import org.apache.hadoop.io.IntWritable;
1:131eb4a: import org.apache.hadoop.io.SequenceFile;
1:131eb4a: 
1:131eb4a: import java.io.IOException;
1:131eb4a: 
1:564c3e1: public final class DistributedRowMatrixWriter {
1:564c3e1: 
1:564c3e1:   private DistributedRowMatrixWriter() {
1:564c3e1:   }
1:131eb4a: 
1:051cbcf:   public static void write(Path outputDir, Configuration conf, Iterable<MatrixSlice> matrix) throws IOException {
1:131eb4a:     FileSystem fs = outputDir.getFileSystem(conf);
1:131eb4a:     SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, outputDir,
1:131eb4a:         IntWritable.class, VectorWritable.class);
1:131eb4a:     IntWritable topic = new IntWritable();
1:131eb4a:     VectorWritable vector = new VectorWritable();
1:e64dd36:     for (MatrixSlice slice : matrix) {
1:131eb4a:       topic.set(slice.index());
1:131eb4a:       vector.set(slice.vector());
1:131eb4a:       writer.append(topic, vector);
1:131eb4a:     }
1:131eb4a:     writer.close();
1:131eb4a: 
1:131eb4a:   }
1:131eb4a: 
1:131eb4a: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     for (MatrixSlice slice : matrix) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1:   public static void write(Path outputDir, Configuration conf, Iterable<MatrixSlice> matrix) throws IOException {
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1: public final class DistributedRowMatrixWriter {
1: 
1:   private DistributedRowMatrixWriter() {
1:   }
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:131eb4a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.math;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.SequenceFile;
1: 
1: import java.io.IOException;
1: 
0: public class DistributedRowMatrixWriter {
1: 
0:   public static void write(Path outputDir, Configuration conf, VectorIterable matrix)
0:       throws IOException {
1:     FileSystem fs = outputDir.getFileSystem(conf);
1:     SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, outputDir,
1:         IntWritable.class, VectorWritable.class);
1:     IntWritable topic = new IntWritable();
1:     VectorWritable vector = new VectorWritable();
0:     for(MatrixSlice slice : matrix) {
1:       topic.set(slice.index());
1:       vector.set(slice.vector());
1:       writer.append(topic, vector);
1:     }
1:     writer.close();
1: 
1:   }
1: 
1: }
============================================================================