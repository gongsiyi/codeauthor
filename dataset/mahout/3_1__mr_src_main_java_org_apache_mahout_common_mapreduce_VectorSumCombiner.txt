1:ed2321d: /**
1:ed2321d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed2321d:  * contributor license agreements.  See the NOTICE file distributed with
1:ed2321d:  * this work for additional information regarding copyright ownership.
1:ed2321d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed2321d:  * (the "License"); you may not use this file except in compliance with
1:ed2321d:  * the License.  You may obtain a copy of the License at
1:ed2321d:  *
1:ed2321d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ed2321d:  *
1:ed2321d:  * Unless required by applicable law or agreed to in writing, software
1:ed2321d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed2321d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed2321d:  * See the License for the specific language governing permissions and
1:ed2321d:  * limitations under the License.
1:ed2321d:  */
1:ed2321d: 
1:ed2321d: package org.apache.mahout.common.mapreduce;
1:ed2321d: 
1:ed2321d: import org.apache.hadoop.io.WritableComparable;
1:ed2321d: import org.apache.hadoop.mapreduce.Reducer;
1:ed2321d: import org.apache.mahout.math.VectorWritable;
1:ed2321d: import org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors;
1:ed2321d: 
1:ed2321d: import java.io.IOException;
1:ed2321d: 
1:ed2321d: public class VectorSumCombiner
1:ed2321d:       extends Reducer<WritableComparable<?>, VectorWritable, WritableComparable<?>, VectorWritable> {
1:ed2321d: 
1:ed2321d:     private final VectorWritable result = new VectorWritable();
1:ed2321d: 
1:ed2321d:     @Override
1:ed2321d:     protected void reduce(WritableComparable<?> key, Iterable<VectorWritable> values, Context ctx)
1:ed2321d:       throws IOException, InterruptedException {
1:ed2321d:       result.set(Vectors.sum(values.iterator()));
1:ed2321d:       ctx.write(key, result);
1:ed2321d:     }
1:ed2321d:   }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:ed2321d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.mapreduce;
1: 
1: import org.apache.hadoop.io.WritableComparable;
1: import org.apache.hadoop.mapreduce.Reducer;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors;
1: 
1: import java.io.IOException;
1: 
1: public class VectorSumCombiner
1:       extends Reducer<WritableComparable<?>, VectorWritable, WritableComparable<?>, VectorWritable> {
1: 
1:     private final VectorWritable result = new VectorWritable();
1: 
1:     @Override
1:     protected void reduce(WritableComparable<?> key, Iterable<VectorWritable> values, Context ctx)
1:       throws IOException, InterruptedException {
1:       result.set(Vectors.sum(values.iterator()));
1:       ctx.write(key, result);
1:     }
1:   }
============================================================================