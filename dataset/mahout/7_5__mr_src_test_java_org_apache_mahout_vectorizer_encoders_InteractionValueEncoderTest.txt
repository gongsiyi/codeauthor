1:d457f73: /*
1:d457f73:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d457f73:  * contributor license agreements.  See the NOTICE file distributed with
1:d457f73:  * this work for additional information regarding copyright ownership.
1:d457f73:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d457f73:  * (the "License"); you may not use this file except in compliance with
1:d457f73:  * the License.  You may obtain a copy of the License at
1:d457f73:  *
1:d457f73:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d457f73:  *
1:d457f73:  * Unless required by applicable law or agreed to in writing, software
1:d457f73:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d457f73:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d457f73:  * See the License for the specific language governing permissions and
1:d457f73:  * limitations under the License.
1:d457f73:  */
3:d457f73: 
1:5a7067b: package org.apache.mahout.vectorizer.encoders;
1:d457f73: 
1:9109586: import java.util.Map;
1:9109586: import java.util.Set;
1:9109586: 
1:9109586: import static com.google.common.collect.Iterables.getFirst;
1:9109586: 
1:9109586: import com.google.common.collect.Maps;
1:ff79ff4: import org.apache.mahout.common.MahoutTestCase;
1:d457f73: import org.apache.mahout.math.DenseVector;
1:d457f73: import org.apache.mahout.math.Vector;
1:d457f73: import org.junit.Test;
1:d457f73: 
1:fbf804b: public class InteractionValueEncoderTest extends MahoutTestCase {
1:d457f73:   @Test
1:d457f73:   public void testAddToVector() {
1:c96fa14:     WordValueEncoder wv = new StaticWordValueEncoder("word");
1:c96fa14:     ContinuousValueEncoder cv = new ContinuousValueEncoder("cont");
1:c96fa14:     InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, cv);
1:d457f73:     Vector v1 = new DenseVector(200);
1:c96fa14:     enc.addInteractionToVector("a","1.0",1.0, v1);
1:d457f73:     int k = enc.getProbes();
1:d457f73:     // should set k distinct locations to 1
1:ff79ff4:     assertEquals((float) k, v1.norm(1), 0);
1:ff79ff4:     assertEquals(1.0, v1.maxValue(), 0);
1:c96fa14: 
1:d457f73:     // adding same interaction again should increment weights
1:c96fa14:     enc.addInteractionToVector("a","1.0",1.0,v1);
1:ff79ff4:     assertEquals((float) k*2, v1.norm(1), 0);
1:ff79ff4:     assertEquals(2.0, v1.maxValue(), 0);
1:d457f73: 
1:d457f73:     Vector v2 = new DenseVector(20000);
1:c96fa14:     enc.addInteractionToVector("a","1.0",1.0,v2);
1:c96fa14:     wv.addToVector("a", v2);
1:c96fa14:     cv.addToVector("1.0", v2);
1:d457f73:     k = enc.getProbes();
1:d457f73:     //this assumes no hash collision
1:ff79ff4:     assertEquals((float) (k + wv.getProbes()+cv.getProbes()), v2.norm(1), 1.0e-3);
1:d457f73:   }
1:7c6f529: 
1:7c6f529:   @Test
1:e64dd36:   public void testAddToVectorUsesProductOfWeights() {
1:7c6f529:     WordValueEncoder wv = new StaticWordValueEncoder("word");
1:c96fa14:     ContinuousValueEncoder cv = new ContinuousValueEncoder("cont");
1:c96fa14:     InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, cv);
1:c96fa14:     Vector v1 = new DenseVector(200);
1:c96fa14:     enc.addInteractionToVector("a","0.9",0.5, v1);
1:c96fa14:     int k = enc.getProbes();
1:c96fa14:     // should set k distinct locations to 0.9*0.5
1:ff79ff4:     assertEquals((float) k*0.5*0.9, v1.norm(1), 0);
1:ff79ff4:     assertEquals(0.5*0.9, v1.maxValue(), 0);
1:c96fa14:   }
1:d457f73: 
1:c96fa14:   @Test
1:e64dd36:   public void testAddToVectorWithTextValueEncoder() {
1:c96fa14:     WordValueEncoder wv = new StaticWordValueEncoder("word");
1:7c6f529:     TextValueEncoder tv = new TextValueEncoder("text");
1:7c6f529:     InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, tv);
1:7c6f529:     Vector v1 = new DenseVector(200);
1:7c6f529:     enc.addInteractionToVector("a","some text here",1.0, v1);
1:7c6f529:     int k = enc.getProbes();
1:7c6f529:     // should interact "a" with each of "some","text" and "here"
1:fbf804b:     assertEquals((float) k*3, v1.norm(1), 0);
1:7c6f529:   }
1:9109586:   
1:9109586:   @Test
1:9109586:   public void testTraceDictionary() {
1:9109586:     StaticWordValueEncoder encoder1 = new StaticWordValueEncoder("first");
1:9109586:     StaticWordValueEncoder encoder2 = new StaticWordValueEncoder("second");
1:9109586:     
1:9109586:     Map<String, Set<Integer>> traceDictionary = Maps.newHashMap();
1:9109586: 
1:9109586:     InteractionValueEncoder interactions = new InteractionValueEncoder("interactions", encoder1, encoder2);
1:9109586:     interactions.setProbes(1);
1:9109586:     interactions.setTraceDictionary(traceDictionary);
1:9109586:     
1:9109586:     Vector v = new DenseVector(10);
1:9109586:     interactions.addInteractionToVector("a", "b", 1, v);
1:9109586:     
1:9109586:     assertEquals(1, v.getNumNonZeroElements());
1:9109586:     assertEquals(1, traceDictionary.size());
1:9109586:     assertEquals("interactions=a:b", getFirst(traceDictionary.keySet(), null));
1:9109586: 
1:9109586:   }
1:7c6f529: 
1:d457f73: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:9109586
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import static com.google.common.collect.Iterables.getFirst;
1: 
1: import com.google.common.collect.Maps;
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test
1:   public void testTraceDictionary() {
1:     StaticWordValueEncoder encoder1 = new StaticWordValueEncoder("first");
1:     StaticWordValueEncoder encoder2 = new StaticWordValueEncoder("second");
1:     
1:     Map<String, Set<Integer>> traceDictionary = Maps.newHashMap();
1: 
1:     InteractionValueEncoder interactions = new InteractionValueEncoder("interactions", encoder1, encoder2);
1:     interactions.setProbes(1);
1:     interactions.setTraceDictionary(traceDictionary);
1:     
1:     Vector v = new DenseVector(10);
1:     interactions.addInteractionToVector("a", "b", 1, v);
1:     
1:     assertEquals(1, v.getNumNonZeroElements());
1:     assertEquals(1, traceDictionary.size());
1:     assertEquals("interactions=a:b", getFirst(traceDictionary.keySet(), null));
1: 
1:   }
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:   public void testAddToVectorUsesProductOfWeights() {
/////////////////////////////////////////////////////////////////////////
1:   public void testAddToVectorWithTextValueEncoder() {
author:Robin Anil
-------------------------------------------------------------------------------
commit:5a7067b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.vectorizer.encoders;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:fbf804b
/////////////////////////////////////////////////////////////////////////
1: public class InteractionValueEncoderTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:     assertEquals((float) k*3, v1.norm(1), 0);
commit:7c6f529
/////////////////////////////////////////////////////////////////////////
0:   public void testAddToVectorUsesProductOfWeights(){
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
0:   public void testAddToVectorWithTextValueEncoder(){
1:     WordValueEncoder wv = new StaticWordValueEncoder("word");
1:     TextValueEncoder tv = new TextValueEncoder("text");
1:     InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, tv);
1:     Vector v1 = new DenseVector(200);
1:     enc.addInteractionToVector("a","some text here",1.0, v1);
1:     int k = enc.getProbes();
1:     // should interact "a" with each of "some","text" and "here"
0:     Assert.assertEquals((float) k*3, v1.norm(1), 0);    
1:   }
1: 
commit:c96fa14
/////////////////////////////////////////////////////////////////////////
1:     WordValueEncoder wv = new StaticWordValueEncoder("word");
1:     ContinuousValueEncoder cv = new ContinuousValueEncoder("cont");
1:     InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, cv);
1:     enc.addInteractionToVector("a","1.0",1.0, v1);
1: 
1:     enc.addInteractionToVector("a","1.0",1.0,v1);
1:     enc.addInteractionToVector("a","1.0",1.0,v2);
1:     wv.addToVector("a", v2);
1:     cv.addToVector("1.0", v2);
0:     Assert.assertEquals((float) (k + wv.getProbes()+cv.getProbes()), v2.norm(1), 1e-3);
1:   @Test
0:   public void testaddToVectorUsesProductOfWeights(){
1:     WordValueEncoder wv = new StaticWordValueEncoder("word");
1:     ContinuousValueEncoder cv = new ContinuousValueEncoder("cont");
1:     InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, cv);
1:     Vector v1 = new DenseVector(200);
1:     enc.addInteractionToVector("a","0.9",0.5, v1);
1:     int k = enc.getProbes();
1:     // should set k distinct locations to 0.9*0.5
0:     Assert.assertEquals((float) k*0.5*0.9, v1.norm(1), 0);
0:     Assert.assertEquals(0.5*0.9, v1.maxValue(), 0);
1:   }
commit:d457f73
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.vectors;
1: 
0: import com.google.common.collect.ImmutableMap;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
0: import org.junit.Assert;
1: import org.junit.Test;
1: 
0: import java.util.Locale;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: public class InteractionValueEncoderTest {
1:   @Test
1:   public void testAddToVector() {
0:     InteractionValueEncoder enc = new InteractionValueEncoder("interactions");
1:     Vector v1 = new DenseVector(200);
0:     enc.addInteractionToVector("a","b",v1);
1:     int k = enc.getProbes();
1:     // should set k distinct locations to 1
0:     Assert.assertEquals((float) k, v1.norm(1), 0);
0:     Assert.assertEquals(1.0, v1.maxValue(), 0);
1:     // adding same interaction again should increment weights
0:     enc.addInteractionToVector("a","b",v1);
0:     Assert.assertEquals((float) k*2, v1.norm(1), 0);
0:     Assert.assertEquals(2.0, v1.maxValue(), 0);
1: 
1:     Vector v2 = new DenseVector(20000);
0:     StaticWordValueEncoder wordEncoder = new StaticWordValueEncoder("test");
0:     enc.addInteractionToVector("a","b",v2);
0:     wordEncoder.addToVector("a", v2);
0:     wordEncoder.addToVector("b", v2);
1:     k = enc.getProbes();
0:     int j = wordEncoder.getProbes();
1:     //this assumes no hash collision
0:     Assert.assertEquals((float) (k + 2*j), v2.norm(1), 0);
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public final class InteractionValueEncoderTest extends MahoutTestCase {
0: 
/////////////////////////////////////////////////////////////////////////
1:     assertEquals((float) k, v1.norm(1), 0);
1:     assertEquals(1.0, v1.maxValue(), 0);
1:     assertEquals((float) k*2, v1.norm(1), 0);
1:     assertEquals(2.0, v1.maxValue(), 0);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals((float) (k + wv.getProbes()+cv.getProbes()), v2.norm(1), 1.0e-3);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals((float) k*0.5*0.9, v1.norm(1), 0);
1:     assertEquals(0.5*0.9, v1.maxValue(), 0);
/////////////////////////////////////////////////////////////////////////
0:     assertEquals((float) k*3, v1.norm(1), 0);    
commit:c0c8d9f
/////////////////////////////////////////////////////////////////////////
============================================================================