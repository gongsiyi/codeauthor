1:6df2469: /**
1:6df2469:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6df2469:  * contributor license agreements.  See the NOTICE file distributed with
1:6df2469:  * this work for additional information regarding copyright ownership.
1:6df2469:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6df2469:  * (the "License"); you may not use this file except in compliance with
1:6df2469:  * the License.  You may obtain a copy of the License at
1:6df2469:  *
1:6df2469:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6df2469:  *
1:6df2469:  * Unless required by applicable law or agreed to in writing, software
1:6df2469:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6df2469:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6df2469:  * See the License for the specific language governing permissions and
1:6df2469:  * limitations under the License.
1:6df2469:  */
1:6df2469: 
1:1970d88: package org.apache.mahout.cf.taste.example;
1:42ae840: 
1:1970d88: import java.io.File;
1:42ae840: 
1:1970d88: import org.apache.commons.cli2.CommandLine;
1:1970d88: import org.apache.commons.cli2.Group;
1:1970d88: import org.apache.commons.cli2.Option;
1:1970d88: import org.apache.commons.cli2.OptionException;
1:1970d88: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:1970d88: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:1970d88: import org.apache.commons.cli2.builder.GroupBuilder;
1:1970d88: import org.apache.commons.cli2.commandline.Parser;
1:1970d88: import org.apache.mahout.common.CommandLineUtil;
1:1970d88: import org.apache.mahout.common.commandline.DefaultOptionCreator;
11:1970d88: 
1:1970d88: /**
1:1970d88:  * This class provides a common implementation for parsing input parameters for
1:1970d88:  * all taste examples. Currently they only need the path to the recommendations
1:1970d88:  * file as input.
1:1970d88:  * 
1:1970d88:  * The class is safe to be used in threaded contexts.
1:1970d88:  */
1:4139a9a: public final class TasteOptionParser {
1:4139a9a:   
1:4139a9a:   private TasteOptionParser() {
1:4139a9a:   }
1:42ae840:   
1:1970d88:   /**
1:1970d88:    * Parse the given command line arguments.
1:1970d88:    * @param args the arguments as given to the application.
1:42ae840:    * @return the input file if a file was given on the command line, null otherwise.
1:4139a9a:    */
1:4139a9a:   public static File getRatings(String[] args) throws OptionException {
1:1970d88:     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
1:1970d88:     ArgumentBuilder abuilder = new ArgumentBuilder();
1:1970d88:     GroupBuilder gbuilder = new GroupBuilder();
1:42ae840:     
1:1ab159a:     Option inputOpt = obuilder.withLongName("input").withRequired(false).withShortName("i")
1:1ab159a:         .withArgument(abuilder.withName("input").withMinimum(1).withMaximum(1).create())
1:1ab159a:         .withDescription("The Path for input data directory.").create();
1:42ae840:     
1:0302c06:     Option helpOpt = DefaultOptionCreator.helpOption();
1:42ae840:     
1:1ab159a:     Group group = gbuilder.withName("Options").withOption(inputOpt).withOption(helpOpt).create();
1:42ae840:     
1:1970d88:     Parser parser = new Parser();
1:1970d88:     parser.setGroup(group);
1:1970d88:     CommandLine cmdLine = parser.parse(args);
1:42ae840:     
1:1970d88:     if (cmdLine.hasOption(helpOpt)) {
1:1970d88:       CommandLineUtil.printHelp(group);
1:4139a9a:       return null;
1:1970d88:     }
1:1ab159a: 
1:1ab159a:     return cmdLine.hasOption(inputOpt) ? new File(cmdLine.getValue(inputOpt).toString()) : null;
1:1970d88:   }
1:42ae840:   
1:1970d88: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1ab159a
/////////////////////////////////////////////////////////////////////////
1:     Option inputOpt = obuilder.withLongName("input").withRequired(false).withShortName("i")
1:         .withArgument(abuilder.withName("input").withMinimum(1).withMaximum(1).create())
1:         .withDescription("The Path for input data directory.").create();
1:     Group group = gbuilder.withName("Options").withOption(inputOpt).withOption(helpOpt).create();
/////////////////////////////////////////////////////////////////////////
1: 
1:     return cmdLine.hasOption(inputOpt) ? new File(cmdLine.getValue(inputOpt).toString()) : null;
commit:0302c06
/////////////////////////////////////////////////////////////////////////
1:     Option helpOpt = DefaultOptionCreator.helpOption();
commit:6df2469
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:4139a9a
/////////////////////////////////////////////////////////////////////////
1: public final class TasteOptionParser {
1: 
1:   private TasteOptionParser() {
1:   }
1:    */
1:   public static File getRatings(String[] args) throws OptionException {
/////////////////////////////////////////////////////////////////////////
1:       return null;
0:     return new File(prefsFile);
author:Robin Anil
-------------------------------------------------------------------------------
commit:42ae840
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:    * @return the input file if a file was given on the command line, null otherwise.
1:     
0:     .withShortName("i").withArgument(
0:       abuilder.withName("input").withMinimum(1).withMaximum(1).create())
0:       .withDescription("The Path for input data directory.").create();
1:     
1:     
0:       helpOpt).create();
1:     
1:     
1:     
1:   
author:Isabel Drost
-------------------------------------------------------------------------------
commit:1970d88
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.example;
1: 
1: import java.io.File;
1: 
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.OptionException;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.mahout.common.CommandLineUtil;
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1: 
1: /**
1:  * This class provides a common implementation for parsing input parameters for
1:  * all taste examples. Currently they only need the path to the recommendations
1:  * file as input.
1:  * 
1:  * The class is safe to be used in threaded contexts.
1:  */
0: public class TasteOptionParser {
1: 
1:   /**
1:    * Parse the given command line arguments.
1:    * @param args the arguments as given to the application.
0:    * @return the input file if a file was given on the command line, null otherwise. 
0:    * */
0:   public File getRatings(final String[] args) throws OptionException {
0:     File file = null;
1:     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
1:     ArgumentBuilder abuilder = new ArgumentBuilder();
1:     GroupBuilder gbuilder = new GroupBuilder();
1: 
0:     Option inputOpt = obuilder.withLongName("input").withRequired(false)
0:         .withShortName("i").withArgument(
0:             abuilder.withName("input").withMinimum(1).withMaximum(1).create())
0:         .withDescription("The Path for input data directory.").create();
1: 
0:     Option helpOpt = DefaultOptionCreator.helpOption(obuilder);
1: 
0:     Group group = gbuilder.withName("Options").withOption(inputOpt).withOption(
0:         helpOpt).create();
1: 
1:     Parser parser = new Parser();
1:     parser.setGroup(group);
1:     CommandLine cmdLine = parser.parse(args);
1: 
1:     if (cmdLine.hasOption(helpOpt)) {
1:       CommandLineUtil.printHelp(group);
0:       System.exit(0);
1:     }
1: 
0:     String prefsFile = cmdLine.getValue(inputOpt).toString();
0:     file = new File(prefsFile);
0:     return file;
1:   }
1: 
1: }
============================================================================