1:21d08d2: /*
1:21d08d2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:21d08d2:  * contributor license agreements.  See the NOTICE file distributed with
1:21d08d2:  * this work for additional information regarding copyright ownership.
1:21d08d2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:21d08d2:  * (the "License"); you may not use this file except in compliance with
1:21d08d2:  * the License.  You may obtain a copy of the License at
1:21d08d2:  *
1:21d08d2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:21d08d2:  *
1:21d08d2:  * Unless required by applicable law or agreed to in writing, software
1:21d08d2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:21d08d2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:21d08d2:  * See the License for the specific language governing permissions and
1:21d08d2:  * limitations under the License.
1:21d08d2:  */
2:21d08d2: 
1:21d08d2: package org.apache.mahout.classifier.sgd;
1:21d08d2: 
1:21d08d2: import org.apache.mahout.classifier.AbstractVectorClassifier;
1:21d08d2: import org.apache.mahout.common.RandomUtils;
1:21d08d2: import org.apache.mahout.math.Vector;
1:21d08d2: 
1:21d08d2: import java.util.Random;
1:21d08d2: 
1:21d08d2: /**
1:cc80709:  * <p>Provides a stochastic mixture of ranking updates and normal logistic updates. This uses a
1:21d08d2:  * combination of AUC driven learning to improve ranking performance and traditional log-loss driven
1:cc80709:  * learning to improve log-likelihood.</p>
1:cc80709:  *
1:cc80709:  * <p>See www.eecs.tufts.edu/~dsculley/papers/combined-ranking-and-regression.pdf</p>
1:cc80709:  *
1:cc80709:  * <p>This implementation only makes sense for the binomial case.</p>
1:21d08d2:  */
1:21d08d2: public class MixedGradient implements Gradient {
1:21d08d2: 
1:69ba194:   private final double alpha;
1:69ba194:   private final RankingGradient rank;
1:69ba194:   private final Gradient basic;
1:69ba194:   private final Random random = RandomUtils.getRandom();
1:cc80709:   private boolean hasZero;
1:cc80709:   private boolean hasOne;
1:21d08d2: 
1:21d08d2:   public MixedGradient(double alpha, int window) {
1:21d08d2:     this.alpha = alpha;
1:21d08d2:     this.rank = new RankingGradient(window);
1:21d08d2:     this.basic = this.rank.getBaseGradient();
1:21d08d2:   }
1:21d08d2: 
1:21d08d2:   @Override
1:21d08d2:   public Vector apply(String groupKey, int actual, Vector instance, AbstractVectorClassifier classifier) {
1:21d08d2:     if (random.nextDouble() < alpha) {
1:21d08d2:       // one option is to apply a ranking update relative to our recent history
1:cc80709:       if (!hasZero || !hasOne) {
1:cc80709:         throw new IllegalStateException();
1:cc80709:       }
1:21d08d2:       return rank.apply(groupKey, actual, instance, classifier);
1:21d08d2:     } else {
1:cc80709:       hasZero |= actual == 0;
1:cc80709:       hasOne |= actual == 1;
1:21d08d2:       // the other option is a normal update, but we have to update our history on the way
1:21d08d2:       rank.addToHistory(actual, instance);
1:21d08d2:       return basic.apply(groupKey, actual, instance, classifier);
1:21d08d2:     }
1:21d08d2:   }
1:21d08d2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:cc80709
/////////////////////////////////////////////////////////////////////////
1:  * <p>Provides a stochastic mixture of ranking updates and normal logistic updates. This uses a
1:  * learning to improve log-likelihood.</p>
1:  *
1:  * <p>See www.eecs.tufts.edu/~dsculley/papers/combined-ranking-and-regression.pdf</p>
1:  *
1:  * <p>This implementation only makes sense for the binomial case.</p>
/////////////////////////////////////////////////////////////////////////
1:   private boolean hasZero;
1:   private boolean hasOne;
/////////////////////////////////////////////////////////////////////////
1:       if (!hasZero || !hasOne) {
1:         throw new IllegalStateException();
1:       }
1:       hasZero |= actual == 0;
1:       hasOne |= actual == 1;
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1:   private final double alpha;
1:   private final RankingGradient rank;
1:   private final Gradient basic;
1:   private final Random random = RandomUtils.getRandom();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:21d08d2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import org.apache.mahout.classifier.AbstractVectorClassifier;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.Vector;
1: 
1: import java.util.Random;
1: 
1: /**
0:  * Provides a stochastic mixture of ranking updates and normal logistic updates. This uses a
1:  * combination of AUC driven learning to improve ranking performance and traditional log-loss driven
0:  * learning to improve log-likelihood.
0:  * <p/>
0:  * See www.eecs.tufts.edu/~dsculley/papers/combined-ranking-and-regression.pdf
1:  */
1: public class MixedGradient implements Gradient {
0:   private double alpha;
1: 
0:   private RankingGradient rank;
0:   private Gradient basic;
1: 
0:   Random random = RandomUtils.getRandom();
1: 
1:   public MixedGradient(double alpha, int window) {
1:     this.alpha = alpha;
1:     this.rank = new RankingGradient(window);
1:     this.basic = this.rank.getBaseGradient();
1:   }
1: 
1:   @Override
1:   public Vector apply(String groupKey, int actual, Vector instance, AbstractVectorClassifier classifier) {
1:     if (random.nextDouble() < alpha) {
1:       // one option is to apply a ranking update relative to our recent history
1:       return rank.apply(groupKey, actual, instance, classifier);
1:     } else {
1:       // the other option is a normal update, but we have to update our history on the way
1:       rank.addToHistory(actual, instance);
1:       return basic.apply(groupKey, actual, instance, classifier);
1:     }
1:   }
1: }
============================================================================