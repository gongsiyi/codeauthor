1:7a9e99e: /**
1:7a9e99e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a9e99e:  * contributor license agreements.  See the NOTICE file distributed with
1:7a9e99e:  * this work for additional information regarding copyright ownership.
1:7a9e99e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a9e99e:  * (the "License"); you may not use this file except in compliance with
1:7a9e99e:  * the License.  You may obtain a copy of the License at
1:7a9e99e:  *
1:7a9e99e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7a9e99e:  *
1:7a9e99e:  * Unless required by applicable law or agreed to in writing, software
1:7a9e99e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a9e99e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a9e99e:  * See the License for the specific language governing permissions and
1:7a9e99e:  * limitations under the License.
1:7a9e99e:  */
1:7a9e99e: 
1:7a9e99e: package org.apache.mahout.cf.taste.example.kddcup;
1:7a9e99e: 
1:7a9e99e: import java.io.File;
1:7a9e99e: import java.io.IOException;
1:7a9e99e: import java.util.Collection;
1:7a9e99e: import java.util.Iterator;
1:7a9e99e: 
1:7a9e99e: import com.google.common.base.Preconditions;
1:7a9e99e: import org.apache.mahout.cf.taste.common.Refreshable;
1:7a9e99e: import org.apache.mahout.cf.taste.common.TasteException;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1:7a9e99e: import org.apache.mahout.cf.taste.model.DataModel;
1:7a9e99e: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:7a9e99e: import org.apache.mahout.common.Pair;
1:7a9e99e: import org.apache.mahout.common.iterator.SamplingIterator;
1:d25dd20: import org.slf4j.Logger;
1:d25dd20: import org.slf4j.LoggerFactory;
1:7a9e99e: 
1:7a9e99e: /**
1:7a9e99e:  * <p>An {@link DataModel} which reads into memory any of the KDD Cup's rating files; it is really
1:7a9e99e:  * meant for use with training data in the files trainIdx{1,2}}.txt.
1:7a9e99e:  * See http://kddcup.yahoo.com/.</p>
1:7a9e99e:  *
1:7a9e99e:  * <p>Timestamps in the data set are relative to some unknown point in time, for anonymity. They are assumed
1:7a9e99e:  * to be relative to the epoch, time 0, or January 1 1970, for purposes here.</p>
1:7a9e99e:  */
1:7a9e99e: public final class KDDCupDataModel implements DataModel {
1:7a9e99e: 
1:d25dd20:   private static final Logger log = LoggerFactory.getLogger(KDDCupDataModel.class);
1:d25dd20: 
1:d25dd20:   private final File dataFileDirectory;
1:7a9e99e:   private final DataModel delegate;
1:7a9e99e: 
1:7a9e99e:   /**
1:7a9e99e:    * @param dataFile training rating file
1:7a9e99e:    */
1:7a9e99e:   public KDDCupDataModel(File dataFile) throws IOException {
1:7a9e99e:     this(dataFile, false, 1.0);
2:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   /**
1:7a9e99e:    * @param dataFile training rating file
1:7a9e99e:    * @param storeDates if true, dates are parsed and stored, otherwise not
1:7a9e99e:    * @param samplingRate percentage of users to keep; can be used to reduce memory requirements
1:7a9e99e:    */
1:7a9e99e:   public KDDCupDataModel(File dataFile, boolean storeDates, double samplingRate) throws IOException {
1:7a9e99e: 
1:cd167f9:     Preconditions.checkArgument(!Double.isNaN(samplingRate) && samplingRate > 0.0 && samplingRate <= 1.0,
1:cd167f9:         "Must be: 0.0 < samplingRate <= 1.0");
1:7a9e99e: 
1:d25dd20:     dataFileDirectory = dataFile.getParentFile();
1:d25dd20: 
1:7a9e99e:     Iterator<Pair<PreferenceArray,long[]>> dataIterator = new DataFileIterator(dataFile);
1:7a9e99e:     if (samplingRate < 1.0) {
1:87c15be:       dataIterator = new SamplingIterator<>(dataIterator, samplingRate);
1:7a9e99e:     }
1:7a9e99e: 
1:87c15be:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:87c15be:     FastByIDMap<FastByIDMap<Long>> timestamps = new FastByIDMap<>();
1:7a9e99e: 
1:7a9e99e:     while (dataIterator.hasNext()) {
1:7a9e99e: 
1:7a9e99e:       Pair<PreferenceArray,long[]> pair = dataIterator.next();
1:7a9e99e:       PreferenceArray userPrefs = pair.getFirst();
1:7a9e99e:       long[] timestampsForPrefs = pair.getSecond();
1:7a9e99e: 
1:7a9e99e:       userData.put(userPrefs.getUserID(0), userPrefs);
1:7a9e99e:       if (storeDates) {
1:87c15be:         FastByIDMap<Long> itemTimestamps = new FastByIDMap<>();
1:7a9e99e:         for (int i = 0; i < timestampsForPrefs.length; i++) {
1:7a9e99e:           long timestamp = timestampsForPrefs[i];
1:7a9e99e:           if (timestamp > 0L) {
1:7a9e99e:             itemTimestamps.put(userPrefs.getItemID(i), timestamp);
1:7a9e99e:           }
1:7a9e99e:         }
1:7a9e99e:       }
1:7a9e99e: 
1:7a9e99e:     }
1:7a9e99e: 
1:7a9e99e:     if (storeDates) {
1:7a9e99e:       delegate = new GenericDataModel(userData, timestamps);
1:7a9e99e:     } else {
1:7a9e99e:       delegate = new GenericDataModel(userData);
1:7a9e99e:     }
1:7a9e99e: 
1:d25dd20:     Runtime runtime = Runtime.getRuntime();
1:d25dd20:     log.info("Loaded data model in about {}MB heap", (runtime.totalMemory() - runtime.freeMemory()) / 1000000);
1:7a9e99e:   }
1:7a9e99e: 
1:d25dd20:   public File getDataFileDirectory() {
1:d25dd20:     return dataFileDirectory;
1:d25dd20:   }
1:7a9e99e: 
1:7a9e99e:   public static File getTrainingFile(File dataFileDirectory) {
1:d25dd20:     return getFile(dataFileDirectory, "trainIdx");
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   public static File getValidationFile(File dataFileDirectory) {
1:d25dd20:     return getFile(dataFileDirectory, "validationIdx");
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   public static File getTestFile(File dataFileDirectory) {
1:d25dd20:     return getFile(dataFileDirectory, "testIdx");
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   public static File getTrackFile(File dataFileDirectory) {
1:d25dd20:     return getFile(dataFileDirectory, "trackData");
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   private static File getFile(File dataFileDirectory, String prefix) {
1:7a9e99e:     // Works on set 1 or 2
1:7a9e99e:     for (int set : new int[] {1,2}) {
1:7a9e99e:       // Works on sample data from before contest or real data
1:7a9e99e:       for (String firstLinesOrNot : new String[] {"", ".firstLines"}) {
1:d25dd20:         for (String gzippedOrNot : new String[] {".gz", ""}) {
1:d25dd20:           File dataFile = new File(dataFileDirectory, prefix + set + firstLinesOrNot + ".txt" + gzippedOrNot);
1:d25dd20:           if (dataFile.exists()) {
1:d25dd20:             return dataFile;
1:d25dd20:           }
1:7a9e99e:         }
1:7a9e99e:       }
1:7a9e99e:     }
1:7a9e99e:     throw new IllegalArgumentException("Can't find " + prefix + " file in " + dataFileDirectory);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public LongPrimitiveIterator getUserIDs() throws TasteException {
1:7a9e99e:     return delegate.getUserIDs();
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public PreferenceArray getPreferencesFromUser(long userID) throws TasteException {
1:7a9e99e:     return delegate.getPreferencesFromUser(userID);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public FastIDSet getItemIDsFromUser(long userID) throws TasteException {
1:7a9e99e:     return delegate.getItemIDsFromUser(userID);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public LongPrimitiveIterator getItemIDs() throws TasteException {
1:7a9e99e:     return delegate.getItemIDs();
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public PreferenceArray getPreferencesForItem(long itemID) throws TasteException {
1:7a9e99e:     return delegate.getPreferencesForItem(itemID);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public Float getPreferenceValue(long userID, long itemID) throws TasteException {
1:7a9e99e:     return delegate.getPreferenceValue(userID, itemID);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public Long getPreferenceTime(long userID, long itemID) throws TasteException {
1:7a9e99e:     return delegate.getPreferenceTime(userID, itemID);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public int getNumItems() throws TasteException {
1:7a9e99e:     return delegate.getNumItems();
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public int getNumUsers() throws TasteException {
1:7a9e99e:     return delegate.getNumUsers();
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:68f00b0:   public int getNumUsersWithPreferenceFor(long itemID) throws TasteException {
1:68f00b0:     return delegate.getNumUsersWithPreferenceFor(itemID);
1:68f00b0:   }
1:68f00b0: 
1:68f00b0:   @Override
1:68f00b0:   public int getNumUsersWithPreferenceFor(long itemID1, long itemID2) throws TasteException {
1:68f00b0:     return delegate.getNumUsersWithPreferenceFor(itemID1, itemID2);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:7a9e99e:     delegate.setPreference(userID, itemID, value);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public void removePreference(long userID, long itemID) throws TasteException {
1:7a9e99e:     delegate.removePreference(userID, itemID);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public boolean hasPreferenceValues() {
1:7a9e99e:     return delegate.hasPreferenceValues();
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public float getMaxPreference() {
1:7a9e99e:     return 100.0f;
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public float getMinPreference() {
1:7a9e99e:     return 0.0f;
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:7a9e99e:     // do nothing
1:3c22856:   }
1:7a9e99e: 
1:7a9e99e: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       dataIterator = new SamplingIterator<>(dataIterator, samplingRate);
1:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<>();
1:     FastByIDMap<FastByIDMap<Long>> timestamps = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:         FastByIDMap<Long> itemTimestamps = new FastByIDMap<>();
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(!Double.isNaN(samplingRate) && samplingRate > 0.0 && samplingRate <= 1.0,
1:         "Must be: 0.0 < samplingRate <= 1.0");
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:68f00b0
/////////////////////////////////////////////////////////////////////////
1:   public int getNumUsersWithPreferenceFor(long itemID) throws TasteException {
1:     return delegate.getNumUsersWithPreferenceFor(itemID);
1:   }
1: 
1:   @Override
1:   public int getNumUsersWithPreferenceFor(long itemID1, long itemID2) throws TasteException {
1:     return delegate.getNumUsersWithPreferenceFor(itemID1, itemID2);
commit:d25dd20
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(KDDCupDataModel.class);
1: 
1:   private final File dataFileDirectory;
/////////////////////////////////////////////////////////////////////////
1:     dataFileDirectory = dataFile.getParentFile();
1: 
/////////////////////////////////////////////////////////////////////////
1:     Runtime runtime = Runtime.getRuntime();
1:     log.info("Loaded data model in about {}MB heap", (runtime.totalMemory() - runtime.freeMemory()) / 1000000);
1:   public File getDataFileDirectory() {
1:     return dataFileDirectory;
1:   }
1:     return getFile(dataFileDirectory, "trainIdx");
1:     return getFile(dataFileDirectory, "validationIdx");
1:     return getFile(dataFileDirectory, "testIdx");
1:   }
1: 
1:   public static File getTrackFile(File dataFileDirectory) {
1:     return getFile(dataFileDirectory, "trackData");
/////////////////////////////////////////////////////////////////////////
1:         for (String gzippedOrNot : new String[] {".gz", ""}) {
1:           File dataFile = new File(dataFileDirectory, prefix + set + firstLinesOrNot + ".txt" + gzippedOrNot);
1:           if (dataFile.exists()) {
1:             return dataFile;
1:           }
commit:7a9e99e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Collection;
1: import java.util.Iterator;
1: 
1: import com.google.common.base.Preconditions;
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.model.GenericDataModel;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.iterator.SamplingIterator;
1: 
1: /**
1:  * <p>An {@link DataModel} which reads into memory any of the KDD Cup's rating files; it is really
1:  * meant for use with training data in the files trainIdx{1,2}}.txt.
1:  * See http://kddcup.yahoo.com/.</p>
1:  *
1:  * <p>Timestamps in the data set are relative to some unknown point in time, for anonymity. They are assumed
1:  * to be relative to the epoch, time 0, or January 1 1970, for purposes here.</p>
1:  */
1: public final class KDDCupDataModel implements DataModel {
1: 
1:   private final DataModel delegate;
1: 
1:   /**
1:    * @param dataFile training rating file
1:    */
1:   public KDDCupDataModel(File dataFile) throws IOException {
1:     this(dataFile, false, 1.0);
1:   }
1: 
1:   /**
1:    * @param dataFile training rating file
1:    * @param storeDates if true, dates are parsed and stored, otherwise not
1:    * @param samplingRate percentage of users to keep; can be used to reduce memory requirements
1:    */
1:   public KDDCupDataModel(File dataFile, boolean storeDates, double samplingRate) throws IOException {
1: 
0:     Preconditions.checkArgument(!Double.isNaN(samplingRate) && samplingRate > 0.0 && samplingRate <= 1.0);
1: 
1:     Iterator<Pair<PreferenceArray,long[]>> dataIterator = new DataFileIterator(dataFile);
1:     if (samplingRate < 1.0) {
0:       dataIterator = new SamplingIterator<Pair<PreferenceArray,long[]>>(dataIterator, samplingRate);
1:     }
1: 
0:     FastByIDMap<PreferenceArray> userData = new FastByIDMap<PreferenceArray>();
0:     FastByIDMap<FastByIDMap<Long>> timestamps = new FastByIDMap<FastByIDMap<Long>>();
1: 
1:     while (dataIterator.hasNext()) {
1: 
1:       Pair<PreferenceArray,long[]> pair = dataIterator.next();
1:       PreferenceArray userPrefs = pair.getFirst();
1:       long[] timestampsForPrefs = pair.getSecond();
1: 
1:       userData.put(userPrefs.getUserID(0), userPrefs);
1:       if (storeDates) {
0:         FastByIDMap<Long> itemTimestamps = new FastByIDMap<Long>();
1:         for (int i = 0; i < timestampsForPrefs.length; i++) {
1:           long timestamp = timestampsForPrefs[i];
1:           if (timestamp > 0L) {
1:             itemTimestamps.put(userPrefs.getItemID(i), timestamp);
1:           }
1:         }
1:       }
1: 
1:     }
1: 
1:     if (storeDates) {
1:       delegate = new GenericDataModel(userData, timestamps);
1:     } else {
1:       delegate = new GenericDataModel(userData);
1:     }
1: 
1:   }
1: 
1: 
1:   public static File getTrainingFile(File dataFileDirectory) {
0:     return getFile(dataFileDirectory, "train");
1:   }
1: 
1:   public static File getValidationFile(File dataFileDirectory) {
0:     return getFile(dataFileDirectory, "validation");
1:   }
1: 
1:   public static File getTestFile(File dataFileDirectory) {
0:     return getFile(dataFileDirectory, "test");
1:   }
1: 
1:   private static File getFile(File dataFileDirectory, String prefix) {
1:     // Works on set 1 or 2
1:     for (int set : new int[] {1,2}) {
1:       // Works on sample data from before contest or real data
1:       for (String firstLinesOrNot : new String[] {"", ".firstLines"}) {
0:         File dataFile = new File(dataFileDirectory, prefix + "Idx" + set + firstLinesOrNot + ".txt");
0:         if (dataFile.exists()) {
0:           return dataFile;
1:         }
1:       }
1:     }
1:     throw new IllegalArgumentException("Can't find " + prefix + " file in " + dataFileDirectory);
1:   }
1: 
1:   @Override
1:   public LongPrimitiveIterator getUserIDs() throws TasteException {
1:     return delegate.getUserIDs();
1:   }
1: 
1:   @Override
1:   public PreferenceArray getPreferencesFromUser(long userID) throws TasteException {
1:     return delegate.getPreferencesFromUser(userID);
1:   }
1: 
1:   @Override
1:   public FastIDSet getItemIDsFromUser(long userID) throws TasteException {
1:     return delegate.getItemIDsFromUser(userID);
1:   }
1: 
1:   @Override
1:   public LongPrimitiveIterator getItemIDs() throws TasteException {
1:     return delegate.getItemIDs();
1:   }
1: 
1:   @Override
1:   public PreferenceArray getPreferencesForItem(long itemID) throws TasteException {
1:     return delegate.getPreferencesForItem(itemID);
1:   }
1: 
1:   @Override
1:   public Float getPreferenceValue(long userID, long itemID) throws TasteException {
1:     return delegate.getPreferenceValue(userID, itemID);
1:   }
1: 
1:   @Override
1:   public Long getPreferenceTime(long userID, long itemID) throws TasteException {
1:     return delegate.getPreferenceTime(userID, itemID);
1:   }
1: 
1:   @Override
1:   public int getNumItems() throws TasteException {
1:     return delegate.getNumItems();
1:   }
1: 
1:   @Override
1:   public int getNumUsers() throws TasteException {
1:     return delegate.getNumUsers();
1:   }
1: 
1:   @Override
0:   public int getNumUsersWithPreferenceFor(long... itemIDs) throws TasteException {
0:     return delegate.getNumUsersWithPreferenceFor(itemIDs);
1:   }
1: 
1:   @Override
1:   public void setPreference(long userID, long itemID, float value) throws TasteException {
1:     delegate.setPreference(userID, itemID, value);
1:   }
1: 
1:   @Override
1:   public void removePreference(long userID, long itemID) throws TasteException {
1:     delegate.removePreference(userID, itemID);
1:   }
1: 
1:   @Override
1:   public boolean hasPreferenceValues() {
1:     return delegate.hasPreferenceValues();
1:   }
1: 
1:   @Override
1:   public float getMaxPreference() {
1:     return 100.0f;
1:   }
1: 
1:   @Override
1:   public float getMinPreference() {
1:     return 0.0f;
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     // do nothing
1:   }
1: 
1: }
============================================================================