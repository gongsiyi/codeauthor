1:1f672cb: /*
1:1f672cb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1f672cb:  * contributor license agreements.  See the NOTICE file distributed with
1:1f672cb:  * this work for additional information regarding copyright ownership.
1:1f672cb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1f672cb:  * (the "License"); you may not use this file except in compliance with
1:1f672cb:  * the License.  You may obtain a copy of the License at
1:1f672cb:  *
1:1f672cb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1f672cb:  *
1:1f672cb:  * Unless required by applicable law or agreed to in writing, software
1:1f672cb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1f672cb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1f672cb:  * See the License for the specific language governing permissions and
1:1f672cb:  * limitations under the License.
1:1f672cb:  */
1:1f672cb: 
1:1f672cb: package org.apache.mahout.classifier.sgd;
1:1f672cb: 
1:1f672cb: import com.google.common.base.CharMatcher;
1:1f672cb: import com.google.common.base.Charsets;
1:1f672cb: import com.google.common.base.Splitter;
1:1f672cb: import com.google.common.collect.Lists;
1:1f672cb: import com.google.common.collect.Maps;
1:1f672cb: import com.google.common.io.CharStreams;
1:1f672cb: import com.google.common.io.Resources;
1:1f672cb: import org.apache.mahout.classifier.AbstractVectorClassifier;
1:1f672cb: import org.apache.mahout.classifier.OnlineLearner;
1:1f672cb: import org.apache.mahout.common.MahoutTestCase;
1:1f672cb: import org.apache.mahout.common.RandomUtils;
1:1f672cb: import org.apache.mahout.math.DenseMatrix;
1:1f672cb: import org.apache.mahout.math.DenseVector;
1:1f672cb: import org.apache.mahout.math.Matrix;
1:1f672cb: import org.apache.mahout.math.Vector;
1:1f672cb: import org.apache.mahout.math.function.Functions;
1:1f672cb: 
1:1f672cb: import java.io.IOException;
1:1f672cb: import java.io.InputStreamReader;
1:1f672cb: import java.util.List;
1:1f672cb: import java.util.Map;
1:1f672cb: import java.util.Random;
1:1f672cb: 
1:1f672cb: public abstract class OnlineBaseTest extends MahoutTestCase {
1:1f672cb: 
1:1f672cb:   private Matrix input;
1:1f672cb: 
1:051cbcf:   Matrix getInput() {
1:1f672cb:     return input;
1:1f672cb:   }
1:1f672cb: 
1:051cbcf:   Vector readStandardData() throws IOException {
1:1f672cb:     // 60 test samples.  First column is constant.  Second and third are normally distributed from
1:1f672cb:     // either N([2,2], 1) (rows 0...29) or N([-2,-2], 1) (rows 30...59).  The first 30 rows have a
1:1f672cb:     // target variable of 0, the last 30 a target of 1.  The remaining columns are are random noise.
1:1f672cb:     input = readCsv("sgd.csv");
1:1f672cb: 
1:1f672cb:     // regenerate the target variable
1:1f672cb:     Vector target = new DenseVector(60);
1:1f672cb:     target.assign(0);
1:1f672cb:     target.viewPart(30, 30).assign(1);
1:1f672cb:     return target;
1:1f672cb:   }
1:1f672cb: 
1:051cbcf:   static void train(Matrix input, Vector target, OnlineLearner lr) {
1:1f672cb:     RandomUtils.useTestSeed();
1:1f672cb:     Random gen = RandomUtils.getRandom();
1:1f672cb: 
1:1f672cb:     // train on samples in random order (but only one pass)
1:1f672cb:     for (int row : permute(gen, 60)) {
1:528ffcd:       lr.train((int) target.get(row), input.viewRow(row));
1:1f672cb:     }
1:1f672cb:     lr.close();
1:1f672cb:   }
1:1f672cb: 
1:051cbcf:   static void test(Matrix input, Vector target, AbstractVectorClassifier lr,
1:051cbcf:                    double expected_mean_error, double expected_absolute_error) {
1:1f672cb:     // now test the accuracy
1:1f672cb:     Matrix tmp = lr.classify(input);
1:1f672cb:     // mean(abs(tmp - target))
1:528ffcd:     double meanAbsoluteError = tmp.viewColumn(0).minus(target).aggregate(Functions.PLUS, Functions.ABS) / 60;
1:1f672cb: 
1:1f672cb:     // max(abs(tmp - target)
1:528ffcd:     double maxAbsoluteError = tmp.viewColumn(0).minus(target).aggregate(Functions.MAX, Functions.ABS);
1:1f672cb: 
1:1f672cb:     System.out.printf("mAE = %.4f, maxAE = %.4f\n", meanAbsoluteError, maxAbsoluteError);
1:1f672cb:     assertEquals(0, meanAbsoluteError , expected_mean_error);
1:1f672cb:     assertEquals(0, maxAbsoluteError, expected_absolute_error);
1:1f672cb: 
1:1f672cb:     // convenience methods should give the same results
1:1f672cb:     Vector v = lr.classifyScalar(input);
1:528ffcd:     assertEquals(0, v.minus(tmp.viewColumn(0)).norm(1), 1.0e-5);
1:528ffcd:     v = lr.classifyFull(input).viewColumn(1);
1:528ffcd:     assertEquals(0, v.minus(tmp.viewColumn(0)).norm(1), 1.0e-4);
1:1f672cb:   }
1:1f672cb: 
1:1f672cb:   /**
1:1f672cb:    * Permute the integers from 0 ... max-1
1:1f672cb:    *
1:1f672cb:    * @param gen The random number generator to use.
1:1f672cb:    * @param max The number of integers to permute
1:1f672cb:    * @return An array of jumbled integer values
1:1f672cb:    */
1:051cbcf:   static int[] permute(Random gen, int max) {
1:1f672cb:     int[] permutation = new int[max];
1:1f672cb:     permutation[0] = 0;
1:1f672cb:     for (int i = 1; i < max; i++) {
1:1f672cb:       int n = gen.nextInt(i + 1);
1:1f672cb:       if (n == i) {
1:1f672cb:         permutation[i] = i;
1:1f672cb:       } else {
1:1f672cb:         permutation[i] = permutation[n];
1:1f672cb:         permutation[n] = i;
1:1f672cb:       }
1:1f672cb:     }
1:1f672cb:     return permutation;
1:1f672cb:   }
1:1f672cb: 
1:1f672cb: 
1:1f672cb:   /**
1:1f672cb:    * Reads a file containing CSV data.  This isn't implemented quite the way you might like for a
1:1f672cb:    * real program, but does the job for reading test data.  Most notably, it will only read numbers,
1:1f672cb:    * not quoted strings.
1:1f672cb:    *
1:1f672cb:    * @param resourceName Where to get the data.
1:1f672cb:    * @return A matrix of the results.
1:1f672cb:    * @throws IOException If there is an error reading the data
1:1f672cb:    */
1:051cbcf:   static Matrix readCsv(String resourceName) throws IOException {
1:82fb401:     Splitter onCommas = Splitter.on(',').trimResults(CharMatcher.anyOf(" \""));
1:1f672cb: 
1:1f672cb:     Readable isr = new InputStreamReader(Resources.getResource(resourceName).openStream(), Charsets.UTF_8);
1:1f672cb:     List<String> data = CharStreams.readLines(isr);
1:1f672cb:     String first = data.get(0);
1:1f672cb:     data = data.subList(1, data.size());
1:1f672cb: 
1:1f672cb:     List<String> values = Lists.newArrayList(onCommas.split(first));
1:1f672cb:     Matrix r = new DenseMatrix(data.size(), values.size());
1:1f672cb: 
1:1f672cb:     int column = 0;
1:1f672cb:     Map<String, Integer> labels = Maps.newHashMap();
1:1f672cb:     for (String value : values) {
1:1f672cb:       labels.put(value, column);
1:1f672cb:       column++;
1:1f672cb:     }
1:1f672cb:     r.setColumnLabelBindings(labels);
1:1f672cb: 
1:1f672cb:     int row = 0;
1:1f672cb:     for (String line : data) {
1:1f672cb:       column = 0;
1:1f672cb:       values = Lists.newArrayList(onCommas.split(line));
1:1f672cb:       for (String value : values) {
1:1f672cb:         r.set(row, column, Double.parseDouble(value));
1:1f672cb:         column++;
1:1f672cb:       }
1:1f672cb:       row++;
1:1f672cb:     }
1:1f672cb: 
1:1f672cb:     return r;
1:1f672cb:   }
1:1f672cb: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1:   Matrix getInput() {
1:   Vector readStandardData() throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   static void train(Matrix input, Vector target, OnlineLearner lr) {
/////////////////////////////////////////////////////////////////////////
1:   static void test(Matrix input, Vector target, AbstractVectorClassifier lr,
1:                    double expected_mean_error, double expected_absolute_error) {
/////////////////////////////////////////////////////////////////////////
1:   static int[] permute(Random gen, int max) {
/////////////////////////////////////////////////////////////////////////
1:   static Matrix readCsv(String resourceName) throws IOException {
commit:82fb401
/////////////////////////////////////////////////////////////////////////
1:     Splitter onCommas = Splitter.on(',').trimResults(CharMatcher.anyOf(" \""));
commit:1f672cb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import com.google.common.base.CharMatcher;
1: import com.google.common.base.Charsets;
1: import com.google.common.base.Splitter;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Maps;
1: import com.google.common.io.CharStreams;
1: import com.google.common.io.Resources;
1: import org.apache.mahout.classifier.AbstractVectorClassifier;
1: import org.apache.mahout.classifier.OnlineLearner;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.Functions;
1: 
1: import java.io.IOException;
1: import java.io.InputStreamReader;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Random;
1: 
1: public abstract class OnlineBaseTest extends MahoutTestCase {
1: 
1:   private Matrix input;
1: 
0:   protected Matrix getInput() {
1:     return input;
1:   }
1: 
0:   protected Vector readStandardData() throws IOException {
1:     // 60 test samples.  First column is constant.  Second and third are normally distributed from
1:     // either N([2,2], 1) (rows 0...29) or N([-2,-2], 1) (rows 30...59).  The first 30 rows have a
1:     // target variable of 0, the last 30 a target of 1.  The remaining columns are are random noise.
1:     input = readCsv("sgd.csv");
1: 
1:     // regenerate the target variable
1:     Vector target = new DenseVector(60);
1:     target.assign(0);
1:     target.viewPart(30, 30).assign(1);
1:     return target;
1:   }
1: 
0:   protected static void train(Matrix input, Vector target, OnlineLearner lr) {
1:     RandomUtils.useTestSeed();
1:     Random gen = RandomUtils.getRandom();
1: 
1:     // train on samples in random order (but only one pass)
1:     for (int row : permute(gen, 60)) {
0:       lr.train((int) target.get(row), input.getRow(row));
1:     }
1:     lr.close();
1:   }
1: 
0:   protected static void test(Matrix input, Vector target, AbstractVectorClassifier lr,
0:                              double expected_mean_error, double expected_absolute_error) {
1:     // now test the accuracy
1:     Matrix tmp = lr.classify(input);
1:     // mean(abs(tmp - target))
0:     double meanAbsoluteError = tmp.getColumn(0).minus(target).aggregate(Functions.PLUS, Functions.ABS) / 60;
1: 
1:     // max(abs(tmp - target)
0:     double maxAbsoluteError = tmp.getColumn(0).minus(target).aggregate(Functions.MAX, Functions.ABS);
1: 
1:     System.out.printf("mAE = %.4f, maxAE = %.4f\n", meanAbsoluteError, maxAbsoluteError);
1:     assertEquals(0, meanAbsoluteError , expected_mean_error);
1:     assertEquals(0, maxAbsoluteError, expected_absolute_error);
1: 
1:     // convenience methods should give the same results
1:     Vector v = lr.classifyScalar(input);
0:     assertEquals(0, v.minus(tmp.getColumn(0)).norm(1), 1.0e-5);
0:     v = lr.classifyFull(input).getColumn(1);
0:     assertEquals(0, v.minus(tmp.getColumn(0)).norm(1), 1.0e-4);
1:   }
1: 
1:   /**
1:    * Permute the integers from 0 ... max-1
1:    *
1:    * @param gen The random number generator to use.
1:    * @param max The number of integers to permute
1:    * @return An array of jumbled integer values
1:    */
0:   protected static int[] permute(Random gen, int max) {
1:     int[] permutation = new int[max];
1:     permutation[0] = 0;
1:     for (int i = 1; i < max; i++) {
1:       int n = gen.nextInt(i + 1);
1:       if (n == i) {
1:         permutation[i] = i;
1:       } else {
1:         permutation[i] = permutation[n];
1:         permutation[n] = i;
1:       }
1:     }
1:     return permutation;
1:   }
1: 
1: 
1:   /**
1:    * Reads a file containing CSV data.  This isn't implemented quite the way you might like for a
1:    * real program, but does the job for reading test data.  Most notably, it will only read numbers,
1:    * not quoted strings.
1:    *
1:    * @param resourceName Where to get the data.
1:    * @return A matrix of the results.
1:    * @throws IOException If there is an error reading the data
1:    */
0:   protected static Matrix readCsv(String resourceName) throws IOException {
0:     Splitter onCommas = Splitter.on(",").trimResults(CharMatcher.anyOf(" \""));
1: 
1:     Readable isr = new InputStreamReader(Resources.getResource(resourceName).openStream(), Charsets.UTF_8);
1:     List<String> data = CharStreams.readLines(isr);
1:     String first = data.get(0);
1:     data = data.subList(1, data.size());
1: 
1:     List<String> values = Lists.newArrayList(onCommas.split(first));
1:     Matrix r = new DenseMatrix(data.size(), values.size());
1: 
1:     int column = 0;
1:     Map<String, Integer> labels = Maps.newHashMap();
1:     for (String value : values) {
1:       labels.put(value, column);
1:       column++;
1:     }
1:     r.setColumnLabelBindings(labels);
1: 
1:     int row = 0;
1:     for (String line : data) {
1:       column = 0;
1:       values = Lists.newArrayList(onCommas.split(line));
1:       for (String value : values) {
1:         r.set(row, column, Double.parseDouble(value));
1:         column++;
1:       }
1:       row++;
1:     }
1: 
1:     return r;
1:   }
1: }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:528ffcd
/////////////////////////////////////////////////////////////////////////
1:       lr.train((int) target.get(row), input.viewRow(row));
/////////////////////////////////////////////////////////////////////////
1:     double meanAbsoluteError = tmp.viewColumn(0).minus(target).aggregate(Functions.PLUS, Functions.ABS) / 60;
1:     double maxAbsoluteError = tmp.viewColumn(0).minus(target).aggregate(Functions.MAX, Functions.ABS);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, v.minus(tmp.viewColumn(0)).norm(1), 1.0e-5);
1:     v = lr.classifyFull(input).viewColumn(1);
1:     assertEquals(0, v.minus(tmp.viewColumn(0)).norm(1), 1.0e-4);
============================================================================