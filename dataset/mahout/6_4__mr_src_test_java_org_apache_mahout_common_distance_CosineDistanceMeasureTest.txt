1:4c0f0e0: /**
1:4c0f0e0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4c0f0e0:  * contributor license agreements.  See the NOTICE file distributed with
1:4c0f0e0:  * this work for additional information regarding copyright ownership.
1:4c0f0e0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4c0f0e0:  * (the "License"); you may not use this file except in compliance with
1:4c0f0e0:  * the License.  You may obtain a copy of the License at
1:4c0f0e0:  *
1:4c0f0e0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4c0f0e0:  *
1:4c0f0e0:  * Unless required by applicable law or agreed to in writing, software
1:4c0f0e0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4c0f0e0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4c0f0e0:  * See the License for the specific language governing permissions and
1:4c0f0e0:  * limitations under the License.
1:4c0f0e0:  */
4:4c0f0e0: 
1:89607ff: package org.apache.mahout.common.distance;
1:a435efb: 
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:a435efb: import org.apache.mahout.math.DenseVector;
1:e5ee197: import org.apache.mahout.math.SequentialAccessSparseVector;
1:a435efb: import org.apache.mahout.math.Vector;
1:ff79ff4: import org.junit.Test;
1:4c0f0e0: 
1:ff79ff4: public final class CosineDistanceMeasureTest extends MahoutTestCase {
1:4c0f0e0: 
1:ff79ff4:   @Test
1:4c0f0e0:   public void testMeasure() {
1:4c0f0e0: 
1:4c0f0e0:     DistanceMeasure distanceMeasure = new CosineDistanceMeasure();
1:4c0f0e0: 
1:4c0f0e0:     Vector[] vectors = {
1:4c0f0e0:         new DenseVector(new double[]{1, 0, 0, 0, 0, 0}),
1:4c0f0e0:         new DenseVector(new double[]{1, 1, 1, 0, 0, 0}),
1:4c0f0e0:         new DenseVector(new double[]{1, 1, 1, 1, 1, 1})
1:4c0f0e0:     };
1:4c0f0e0: 
1:4c0f0e0:     double[][] distanceMatrix = new double[3][3];
1:4c0f0e0: 
1:4c0f0e0:     for (int a = 0; a < 3; a++) {
1:4c0f0e0:       for (int b = 0; b < 3; b++) {
1:4c0f0e0:         distanceMatrix[a][b] = distanceMeasure.distance(vectors[a], vectors[b]);
1:4c0f0e0:       }
1:4c0f0e0:     }
1:4c0f0e0: 
1:ff79ff4:     assertEquals(0.0, distanceMatrix[0][0], EPSILON);
1:4c0f0e0:     assertTrue(distanceMatrix[0][0] < distanceMatrix[0][1]);
1:4c0f0e0:     assertTrue(distanceMatrix[0][1] < distanceMatrix[0][2]);
1:4c0f0e0: 
1:ff79ff4:     assertEquals(0.0, distanceMatrix[1][1], EPSILON);
1:4c0f0e0:     assertTrue(distanceMatrix[1][0] > distanceMatrix[1][1]);
1:4c0f0e0:     assertTrue(distanceMatrix[1][2] < distanceMatrix[1][0]);
1:4c0f0e0: 
1:ff79ff4:     assertEquals(0.0, distanceMatrix[2][2], EPSILON);
1:4c0f0e0:     assertTrue(distanceMatrix[2][0] > distanceMatrix[2][1]);
1:4c0f0e0:     assertTrue(distanceMatrix[2][1] > distanceMatrix[2][2]);
1:4c0f0e0: 
1:e5ee197:     // Two equal vectors (despite them being zero) should have 0 distance.
1:4ca6b86:     assertEquals(0, 
1:4ca6b86:                  distanceMeasure.distance(new SequentialAccessSparseVector(1),
1:4ca6b86:                                           new SequentialAccessSparseVector(1)), 
1:4ca6b86:                  EPSILON);
1:4c0f0e0:   }
1:4c0f0e0: 
1:4c0f0e0: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, 
1:                  distanceMeasure.distance(new SequentialAccessSparseVector(1),
1:                                           new SequentialAccessSparseVector(1)), 
1:                  EPSILON);
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public final class CosineDistanceMeasureTest extends MahoutTestCase {
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0.0, distanceMatrix[0][0], EPSILON);
1:     assertEquals(0.0, distanceMatrix[1][1], EPSILON);
1:     assertEquals(0.0, distanceMatrix[2][2], EPSILON);
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
0: public class CosineDistanceMeasureTest extends MahoutTestCase {
commit:89607ff
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.common.distance;
author:dfilimon
-------------------------------------------------------------------------------
commit:e5ee197
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.SequentialAccessSparseVector;
/////////////////////////////////////////////////////////////////////////
1:     // Two equal vectors (despite them being zero) should have 0 distance.
0:     assertEquals(distanceMeasure.distance(new SequentialAccessSparseVector(1),
0:         new SequentialAccessSparseVector(1)), 0, EPSILON);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a435efb
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:4c0f0e0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.utils;
1: 
0: import junit.framework.TestCase;
0: import org.apache.mahout.matrix.DenseVector;
0: import org.apache.mahout.matrix.Vector;
1: 
1: 
0: public class CosineDistanceMeasureTest extends TestCase {
1: 
1:   public void testMeasure() {
1: 
1:     DistanceMeasure distanceMeasure = new CosineDistanceMeasure();
1: 
1:     Vector[] vectors = {
1:         new DenseVector(new double[]{1, 0, 0, 0, 0, 0}),
1:         new DenseVector(new double[]{1, 1, 1, 0, 0, 0}),
1:         new DenseVector(new double[]{1, 1, 1, 1, 1, 1})
1:     };
1: 
1:     double[][] distanceMatrix = new double[3][3];
1: 
1:     for (int a = 0; a < 3; a++) {
1:       for (int b = 0; b < 3; b++) {
1:         distanceMatrix[a][b] = distanceMeasure.distance(vectors[a], vectors[b]);
1:       }
1:     }
1: 
0:     assertEquals(0.0, distanceMatrix[0][0]);
1:     assertTrue(distanceMatrix[0][0] < distanceMatrix[0][1]);
1:     assertTrue(distanceMatrix[0][1] < distanceMatrix[0][2]);
1: 
0:     assertEquals(0.0, distanceMatrix[1][1]);
1:     assertTrue(distanceMatrix[1][0] > distanceMatrix[1][1]);
1:     assertTrue(distanceMatrix[1][2] < distanceMatrix[1][0]);
1: 
0:     assertEquals(0.0, distanceMatrix[2][2]);
1:     assertTrue(distanceMatrix[2][0] > distanceMatrix[2][1]);
1:     assertTrue(distanceMatrix[2][1] > distanceMatrix[2][2]);
1: 
1: 
1:   }
1: 
1: }
============================================================================