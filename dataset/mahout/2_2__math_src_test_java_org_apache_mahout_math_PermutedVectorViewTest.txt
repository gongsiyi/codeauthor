1:1499411: /*
1:1499411:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1499411:  * contributor license agreements.  See the NOTICE file distributed with
1:1499411:  * this work for additional information regarding copyright ownership.
1:1499411:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1499411:  * (the "License"); you may not use this file except in compliance with
1:1499411:  * the License.  You may obtain a copy of the License at
1:1499411:  *
1:1499411:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1499411:  *
1:1499411:  * Unless required by applicable law or agreed to in writing, software
1:1499411:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1499411:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1499411:  * See the License for the specific language governing permissions and
1:1499411:  * limitations under the License.
1:1499411:  */
1:1499411: 
1:21779d8: package org.apache.mahout.math;
1:21779d8: 
1:21779d8: import org.apache.mahout.common.RandomUtils;
1:21779d8: import org.apache.mahout.math.function.DoubleFunction;
1:21779d8: import org.junit.Test;
1:21779d8: 
1:21779d8: import java.util.Iterator;
1:21779d8: import java.util.Random;
1:21779d8: 
1:21779d8: public class PermutedVectorViewTest extends MahoutTestCase {
1:21779d8:   @Test
1:21779d8:   public void testViewBasics() {
1:21779d8:     Vector v = randomVector();
1:21779d8: 
1:21779d8:     int[] pivot = pivot();
1:21779d8: 
1:1499411:     Vector pvv = new PermutedVectorView(v, pivot);
1:21779d8: 
1:21779d8:     // verify the view has the same contents
1:21779d8:     for (int i = 0; i < 20; i++) {
1:21779d8:       assertEquals("Element " + i, v.get(pivot[i]), pvv.get(i), 0);
1:21779d8:     }
1:21779d8: 
1:21779d8:     // change a view element or two on each side
1:21779d8:     pvv.set(6, 321);
1:21779d8:     v.set(9, 512);
1:21779d8: 
1:21779d8:     // verify again
1:21779d8:     for (int i = 0; i < 20; i++) {
1:21779d8:       assertEquals("Element " + i, v.get(pivot[i]), pvv.get(i), 0);
1:21779d8:     }
1:21779d8:   }
1:21779d8: 
1:21779d8:   @Test
1:21779d8:   public void testIterators() {
1:21779d8:     int[] pivot = pivot();
1:21779d8:     int[] unpivot = unpivot();
1:21779d8: 
1:21779d8:     Vector v = randomVector();
2:21779d8:     PermutedVectorView pvv = new PermutedVectorView(v, pivot);
1:21779d8: 
1:21779d8:     // check a simple operation and thus an iterator
1:21779d8:     assertEquals(v.zSum(), pvv.zSum(), 0);
1:21779d8: 
1:21779d8:     assertEquals(v.getNumNondefaultElements(), pvv.getNumNondefaultElements());
1:21779d8:     v.set(11, 0);
1:21779d8:     assertEquals(v.getNumNondefaultElements(), pvv.getNumNondefaultElements());
1:21779d8: 
1:21779d8:     Iterator<Vector.Element> vi = pvv.iterator();
1:21779d8:     int i = 0;
1:21779d8:     while (vi.hasNext()) {
1:21779d8:       Vector.Element e = vi.next();
1:21779d8:       assertEquals("Index " + i, i, pivot[e.index()]);
1:21779d8:       assertEquals("Reverse Index " + i, unpivot[i], e.index());
1:21779d8:       assertEquals("Self-value " + i, e.get(), pvv.get(e.index()), 0);
1:21779d8:       // note that we iterate in the original vector order
1:21779d8:       assertEquals("Value " + i, v.get(i), e.get(), 0);
1:21779d8:       i++;
1:21779d8:     }
1:21779d8:   }
1:21779d8: 
1:1499411:   private static int[] pivot() {
1:21779d8:     return new int[]{11, 7, 10, 9, 8, 3, 17, 0, 19, 13, 12, 1, 5, 6, 16, 2, 4, 14, 18, 15};
1:21779d8:   }
1:21779d8: 
1:1499411:   private static int[] unpivot() {
1:21779d8:     int[] pivot = pivot();
1:21779d8:     int[] unpivot = new int[20];
1:21779d8: 
1:21779d8:     for (int i = 0; i < 20; i++) {
1:21779d8:       unpivot[pivot[i]] = i;
1:21779d8:     }
1:21779d8:     return unpivot;
1:21779d8:   }
1:21779d8: 
1:1499411:   private static Vector randomVector() {
1:21779d8:     Vector v = new DenseVector(20);
1:21779d8:     v.assign(new DoubleFunction() {
1:4194a28:       private final Random gen = RandomUtils.getRandom();
1:21779d8: 
1:21779d8:       @Override
1:21779d8:       public double apply(double arg1) {
1:21779d8:         return gen.nextDouble();
1:21779d8:       }
1:21779d8:     });
1:21779d8:     return v;
1:21779d8:   }
1:21779d8: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:       private final Random gen = RandomUtils.getRandom();
commit:1499411
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:     Vector pvv = new PermutedVectorView(v, pivot);
/////////////////////////////////////////////////////////////////////////
1:   private static int[] pivot() {
1:   private static int[] unpivot() {
/////////////////////////////////////////////////////////////////////////
1:   private static Vector randomVector() {
0:       final Random gen = RandomUtils.getRandom();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:21779d8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.function.DoubleFunction;
1: import org.junit.Test;
1: 
1: import java.util.Iterator;
1: import java.util.Random;
1: 
1: public class PermutedVectorViewTest extends MahoutTestCase {
1:   @Test
1:   public void testViewBasics() {
1:     Vector v = randomVector();
1: 
1:     int[] pivot = pivot();
1: 
1:     PermutedVectorView pvv = new PermutedVectorView(v, pivot);
1: 
1:     // verify the view has the same contents
1:     for (int i = 0; i < 20; i++) {
1:       assertEquals("Element " + i, v.get(pivot[i]), pvv.get(i), 0);
1:     }
1: 
1:     // change a view element or two on each side
1:     pvv.set(6, 321);
1:     v.set(9, 512);
1: 
1:     // verify again
1:     for (int i = 0; i < 20; i++) {
1:       assertEquals("Element " + i, v.get(pivot[i]), pvv.get(i), 0);
1:     }
1:   }
1: 
1:   @Test
1:   public void testIterators() {
1:     int[] pivot = pivot();
1:     int[] unpivot = unpivot();
1: 
1:     Vector v = randomVector();
1:     PermutedVectorView pvv = new PermutedVectorView(v, pivot);
1: 
1:     // check a simple operation and thus an iterator
1:     assertEquals(v.zSum(), pvv.zSum(), 0);
1: 
1:     assertEquals(v.getNumNondefaultElements(), pvv.getNumNondefaultElements());
1:     v.set(11, 0);
1:     assertEquals(v.getNumNondefaultElements(), pvv.getNumNondefaultElements());
1: 
1:     Iterator<Vector.Element> vi = pvv.iterator();
1:     int i = 0;
1:     while (vi.hasNext()) {
1:       Vector.Element e = vi.next();
1:       assertEquals("Index " + i, i, pivot[e.index()]);
1:       assertEquals("Reverse Index " + i, unpivot[i], e.index());
1:       assertEquals("Self-value " + i, e.get(), pvv.get(e.index()), 0);
1:       // note that we iterate in the original vector order
1:       assertEquals("Value " + i, v.get(i), e.get(), 0);
1:       i++;
1:     }
1:   }
1: 
0:   private int[] pivot() {
1:     return new int[]{11, 7, 10, 9, 8, 3, 17, 0, 19, 13, 12, 1, 5, 6, 16, 2, 4, 14, 18, 15};
1:   }
1: 
0:   private int[] unpivot() {
1:     int[] pivot = pivot();
1:     int[] unpivot = new int[20];
1: 
1:     for (int i = 0; i < 20; i++) {
1:       unpivot[pivot[i]] = i;
1:     }
1:     return unpivot;
1:   }
1: 
0:   private Vector randomVector() {
1:     Vector v = new DenseVector(20);
1:     v.assign(new DoubleFunction() {
0:       Random gen = RandomUtils.getRandom();
1: 
1:       @Override
1:       public double apply(double arg1) {
1:         return gen.nextDouble();
1:       }
1:     });
1:     return v;
1:   }
1: }
============================================================================