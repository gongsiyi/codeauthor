1:c898d27: /*
1:c898d27:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c898d27:  * contributor license agreements.  See the NOTICE file distributed with
1:c898d27:  * this work for additional information regarding copyright ownership.
1:c898d27:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c898d27:  * (the "License"); you may not use this file except in compliance with
1:c898d27:  * the License.  You may obtain a copy of the License at
1:c898d27:  *
1:c898d27:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c898d27:  *
1:c898d27:  * Unless required by applicable law or agreed to in writing, software
1:c898d27:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c898d27:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c898d27:  * See the License for the specific language governing permissions and
1:c898d27:  * limitations under the License.
1:c898d27:  */
1:c898d27: 
1:faf0b6e: package org.apache.mahout.math;
2:faf0b6e: 
1:faf0b6e: import org.apache.mahout.common.RandomUtils;
1:faf0b6e: import org.apache.mahout.math.function.DoubleDoubleFunction;
1:faf0b6e: import org.apache.mahout.math.function.DoubleFunction;
1:faf0b6e: import org.apache.mahout.math.function.Functions;
1:faf0b6e: import org.junit.Assert;
1:faf0b6e: import org.junit.Test;
1:faf0b6e: 
1:faf0b6e: import java.util.Random;
1:faf0b6e: 
1:faf0b6e: public class CholeskyDecompositionTest extends MahoutTestCase {
1:faf0b6e:   @Test
1:faf0b6e:   public void rank1() {
1:faf0b6e:     Matrix x = new DenseMatrix(3, 3);
1:faf0b6e:     x.viewRow(0).assign(new double[]{1, 2, 3});
1:faf0b6e:     x.viewRow(1).assign(new double[]{2, 4, 6});
1:faf0b6e:     x.viewRow(2).assign(new double[]{3, 6, 9});
1:faf0b6e: 
1:faf0b6e:     CholeskyDecomposition rr = new CholeskyDecomposition(x.transpose().times(x), false);
1:faf0b6e:     assertEquals(0, new DenseVector(new double[]{3.741657, 7.483315, 11.22497}).aggregate(rr.getL().transpose().viewRow(0), Functions.PLUS, new DoubleDoubleFunction() {
1:faf0b6e:       @Override
1:faf0b6e:       public double apply(double arg1, double arg2) {
1:faf0b6e:         return Math.abs(arg1) - Math.abs(arg2);
1:faf0b6e:       }
1:564c3e1:     }), 1.0e-5);
1:faf0b6e: 
1:564c3e1:     assertEquals(0, rr.getL().viewPart(0, 3, 1, 2).aggregate(Functions.PLUS, Functions.ABS), 1.0e-9);
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   @Test
1:faf0b6e:   public void test1() {
1:faf0b6e: 
1:faf0b6e:     final Random rand = RandomUtils.getRandom();
1:faf0b6e: 
1:faf0b6e:     Matrix z = new DenseMatrix(100, 100);
1:faf0b6e:     z.assign(new DoubleFunction() {
1:faf0b6e:       @Override
1:faf0b6e:       public double apply(double arg1) {
1:faf0b6e:         return rand.nextDouble();
1:faf0b6e:       }
1:faf0b6e:     });
1:faf0b6e: 
1:faf0b6e:     Matrix A = z.times(z.transpose());
1:faf0b6e: 
1:faf0b6e:     for (boolean type = false; !type; type=true) {
1:faf0b6e:       CholeskyDecomposition cd = new CholeskyDecomposition(A, type);
1:faf0b6e:       Matrix L = cd.getL();
1:faf0b6e: //      Assert.assertTrue("Positive definite", cd.isPositiveDefinite());
1:faf0b6e: 
1:faf0b6e:       Matrix Abar = L.times(L.transpose());
1:faf0b6e: 
1:faf0b6e:       double error = A.minus(Abar).aggregate(Functions.MAX, Functions.ABS);
1:564c3e1:       Assert.assertEquals("type = " + type, 0, error, 1.0e-10);
1:faf0b6e: 
1:faf0b6e:       // L should give us a quick and dirty LQ decomposition
1:faf0b6e:       Matrix q = cd.solveLeft(z);
1:faf0b6e:       Matrix id = q.times(q.transpose());
1:faf0b6e:       for (int i = 0; i < id.columnSize(); i++) {
1:564c3e1:         Assert.assertEquals("type = " + type, 1, id.get(i, i), 1.0e-9);
1:564c3e1:         Assert.assertEquals("type = " + type, 1, id.viewRow(i).norm(1), 1.0e-9);
1:faf0b6e:       }
1:faf0b6e: 
1:faf0b6e:       // and QR as well
1:faf0b6e:       q = cd.solveRight(z.transpose());
1:faf0b6e:       id = q.transpose().times(q);
1:faf0b6e:       for (int i = 0; i < id.columnSize(); i++) {
1:564c3e1:         Assert.assertEquals("type = " + type, 1, id.get(i, i), 1.0e-9);
1:564c3e1:         Assert.assertEquals("type = " + type, 1, id.viewRow(i).norm(1), 1.0e-9);
1:faf0b6e:       }
1:faf0b6e:     }
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e:   @Test
1:faf0b6e:   public void test2() {
1:faf0b6e:     // Test matrix from Nicholas Higham's paper at http://eprints.ma.man.ac.uk/1199/01/covered/MIMS_ep2008_116.pdf
1:faf0b6e:     double[][] values = new double[3][];
1:faf0b6e:     values[0] = new double[]{1, -1, 1};
1:faf0b6e:     values[1] = new double[]{-1, 1, -1};
1:faf0b6e:     values[2] = new double[]{1, -1, 2};
1:faf0b6e: 
1:faf0b6e:     Matrix A = new DenseMatrix(values);
1:faf0b6e: 
1:faf0b6e:     // without pivoting
2:faf0b6e:     CholeskyDecomposition cd = new CholeskyDecomposition(A, false);
1:564c3e1:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:faf0b6e: 
1:faf0b6e:     // with pivoting
2:faf0b6e:     cd = new CholeskyDecomposition(A);
1:564c3e1:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:faf0b6e:   }
1:faf0b6e: 
1:faf0b6e: 
1:faf0b6e:   @Test
1:faf0b6e:   public void testRankDeficient() {
1:faf0b6e:     Matrix A = rank4Matrix();
1:faf0b6e: 
1:564c3e1:     CholeskyDecomposition cd = new CholeskyDecomposition(A);
1:faf0b6e: 
1:faf0b6e:     PivotedMatrix Ax = new PivotedMatrix(A, cd.getPivot());
1:faf0b6e:     CholeskyDecomposition cd2 = new CholeskyDecomposition(Ax, false);
1:faf0b6e: 
1:564c3e1:     assertEquals(0, cd2.getL().times(cd2.getL().transpose()).minus(Ax).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:564c3e1:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:faf0b6e: 
1:faf0b6e:     Assert.assertFalse(cd.isPositiveDefinite());
1:faf0b6e:     Matrix L = cd.getL();
1:faf0b6e:     Matrix Abar = L.times(L.transpose());
1:faf0b6e:     double error = A.minus(Abar).aggregate(Functions.MAX, Functions.ABS);
1:564c3e1:     Assert.assertEquals(0, error, 1.0e-10);
1:faf0b6e:   }
1:faf0b6e: 
1:564c3e1:   private static Matrix rank4Matrix() {
1:faf0b6e:     final Random rand = RandomUtils.getRandom();
1:faf0b6e: 
1:faf0b6e:     Matrix u = new DenseMatrix(10, 4);
1:faf0b6e:     u.assign(new DoubleFunction() {
1:faf0b6e:       @Override
1:faf0b6e:       public double apply(double arg1) {
1:faf0b6e:         return rand.nextDouble();
1:faf0b6e:       }
1:faf0b6e:     });
1:faf0b6e: 
1:faf0b6e:     Matrix v = new DenseMatrix(10, 4);
1:faf0b6e:     v.assign(new DoubleFunction() {
1:faf0b6e:       @Override
1:faf0b6e:       public double apply(double arg1) {
1:faf0b6e:         return rand.nextDouble();
1:faf0b6e:       }
1:faf0b6e:     });
1:faf0b6e: 
1:faf0b6e:     Matrix z = u.times(v.transpose());
1:faf0b6e:     return z.times(z.transpose());
1:faf0b6e:   }
1:faf0b6e: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:     }), 1.0e-5);
1:     assertEquals(0, rr.getL().viewPart(0, 3, 1, 2).aggregate(Functions.PLUS, Functions.ABS), 1.0e-9);
/////////////////////////////////////////////////////////////////////////
1:       Assert.assertEquals("type = " + type, 0, error, 1.0e-10);
1:         Assert.assertEquals("type = " + type, 1, id.get(i, i), 1.0e-9);
1:         Assert.assertEquals("type = " + type, 1, id.viewRow(i).norm(1), 1.0e-9);
1:         Assert.assertEquals("type = " + type, 1, id.get(i, i), 1.0e-9);
1:         Assert.assertEquals("type = " + type, 1, id.viewRow(i).norm(1), 1.0e-9);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
/////////////////////////////////////////////////////////////////////////
1:     CholeskyDecomposition cd = new CholeskyDecomposition(A);
1:     assertEquals(0, cd2.getL().times(cd2.getL().transpose()).minus(Ax).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1.0e-10);
1:     Assert.assertEquals(0, error, 1.0e-10);
1:   private static Matrix rank4Matrix() {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:c898d27
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:faf0b6e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.function.DoubleDoubleFunction;
1: import org.apache.mahout.math.function.DoubleFunction;
1: import org.apache.mahout.math.function.Functions;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import java.util.Random;
1: 
1: public class CholeskyDecompositionTest extends MahoutTestCase {
1:   @Test
1:   public void rank1() {
1:     Matrix x = new DenseMatrix(3, 3);
1:     x.viewRow(0).assign(new double[]{1, 2, 3});
1:     x.viewRow(1).assign(new double[]{2, 4, 6});
1:     x.viewRow(2).assign(new double[]{3, 6, 9});
1: 
1:     CholeskyDecomposition rr = new CholeskyDecomposition(x.transpose().times(x), false);
1:     assertEquals(0, new DenseVector(new double[]{3.741657, 7.483315, 11.22497}).aggregate(rr.getL().transpose().viewRow(0), Functions.PLUS, new DoubleDoubleFunction() {
1:       @Override
1:       public double apply(double arg1, double arg2) {
1:         return Math.abs(arg1) - Math.abs(arg2);
1:       }
0:     }), 1e-5);
1: 
0:     assertEquals(0, rr.getL().viewPart(0, 3, 1, 2).aggregate(Functions.PLUS, Functions.ABS), 1e-9);
1:   }
1: 
1:   @Test
1:   public void test1() {
0:     Matrix lastL;
1: 
1:     final Random rand = RandomUtils.getRandom();
1: 
1:     Matrix z = new DenseMatrix(100, 100);
1:     z.assign(new DoubleFunction() {
1:       @Override
1:       public double apply(double arg1) {
1:         return rand.nextDouble();
1:       }
1:     });
1: 
1:     Matrix A = z.times(z.transpose());
1: 
1:     for (boolean type = false; !type; type=true) {
1:       CholeskyDecomposition cd = new CholeskyDecomposition(A, type);
1:       Matrix L = cd.getL();
0:       lastL = L;
1: //      Assert.assertTrue("Positive definite", cd.isPositiveDefinite());
1: 
1:       Matrix Abar = L.times(L.transpose());
1: 
1:       double error = A.minus(Abar).aggregate(Functions.MAX, Functions.ABS);
0:       Assert.assertEquals("type = " + type, 0, error, 1e-10);
1: 
1:       // L should give us a quick and dirty LQ decomposition
1:       Matrix q = cd.solveLeft(z);
1:       Matrix id = q.times(q.transpose());
1:       for (int i = 0; i < id.columnSize(); i++) {
0:         Assert.assertEquals("type = " + type, 1, id.get(i, i), 1e-9);
0:         Assert.assertEquals("type = " + type, 1, id.viewRow(i).norm(1), 1e-9);
1:       }
1: 
1:       // and QR as well
1:       q = cd.solveRight(z.transpose());
1:       id = q.transpose().times(q);
1:       for (int i = 0; i < id.columnSize(); i++) {
0:         Assert.assertEquals("type = " + type, 1, id.get(i, i), 1e-9);
0:         Assert.assertEquals("type = " + type, 1, id.viewRow(i).norm(1), 1e-9);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void test2() {
1:     // Test matrix from Nicholas Higham's paper at http://eprints.ma.man.ac.uk/1199/01/covered/MIMS_ep2008_116.pdf
1:     double[][] values = new double[3][];
1:     values[0] = new double[]{1, -1, 1};
1:     values[1] = new double[]{-1, 1, -1};
1:     values[2] = new double[]{1, -1, 2};
1: 
1:     Matrix A = new DenseMatrix(values);
1: 
1:     // without pivoting
1:     CholeskyDecomposition cd = new CholeskyDecomposition(A, false);
0:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1: 
1:     // with pivoting
1:     cd = new CholeskyDecomposition(A);
0:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1:   }
1: 
1: 
1:   @Test
1:   public void testRankDeficient() {
1:     Matrix A = rank4Matrix();
1: 
1:     CholeskyDecomposition cd = new CholeskyDecomposition(A, false);
1: 
1:     cd = new CholeskyDecomposition(A);
1: 
1:     PivotedMatrix Ax = new PivotedMatrix(A, cd.getPivot());
1:     CholeskyDecomposition cd2 = new CholeskyDecomposition(Ax, false);
1: 
0:     assertEquals(0, cd2.getL().times(cd2.getL().transpose()).minus(Ax).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
0:     assertEquals(0, cd.getL().times(cd.getL().transpose()).minus(A).aggregate(Functions.PLUS, Functions.ABS), 1e-10);
1: 
1:     Assert.assertFalse(cd.isPositiveDefinite());
1:     Matrix L = cd.getL();
1:     Matrix Abar = L.times(L.transpose());
1:     double error = A.minus(Abar).aggregate(Functions.MAX, Functions.ABS);
0:     Assert.assertEquals(0, error, 1e-10);
1:   }
1: 
0:   private Matrix rank4Matrix() {
1:     final Random rand = RandomUtils.getRandom();
1: 
1:     Matrix u = new DenseMatrix(10, 4);
1:     u.assign(new DoubleFunction() {
1:       @Override
1:       public double apply(double arg1) {
1:         return rand.nextDouble();
1:       }
1:     });
1: 
1:     Matrix v = new DenseMatrix(10, 4);
1:     v.assign(new DoubleFunction() {
1:       @Override
1:       public double apply(double arg1) {
1:         return rand.nextDouble();
1:       }
1:     });
1: 
1:     Matrix z = u.times(v.transpose());
1:     return z.times(z.transpose());
1:   }
1: }
============================================================================