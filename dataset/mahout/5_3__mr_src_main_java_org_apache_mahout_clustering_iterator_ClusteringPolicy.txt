1:172bb3b: /**
1:172bb3b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:172bb3b:  * contributor license agreements.  See the NOTICE file distributed with
1:172bb3b:  * this work for additional information regarding copyright ownership.
1:172bb3b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:172bb3b:  * (the "License"); you may not use this file except in compliance with
1:172bb3b:  * the License.  You may obtain a copy of the License at
1:172bb3b:  *
1:172bb3b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:172bb3b:  *
1:172bb3b:  * Unless required by applicable law or agreed to in writing, software
1:172bb3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:172bb3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:172bb3b:  * See the License for the specific language governing permissions and
1:172bb3b:  * limitations under the License.
1:172bb3b:  */
1:8d102ea: package org.apache.mahout.clustering.iterator;
1:76e80dc: 
1:a28cf1d: import org.apache.hadoop.io.Writable;
1:8d102ea: import org.apache.mahout.clustering.classify.ClusterClassifier;
1:172bb3b: import org.apache.mahout.math.Vector;
2:172bb3b: 
1:76e80dc: /**
1:172bb3b:  * A ClusteringPolicy captures the semantics of assignment of points to clusters
1:172bb3b:  * 
1:172bb3b:  */
1:76e80dc: public interface ClusteringPolicy extends Writable {
1:172bb3b:   
1:172bb3b:   /**
1:3eba6f2:    * Classify the data vector given the classifier's models
1:3eba6f2:    * 
1:3eba6f2:    * @param data
1:3eba6f2:    *          a data Vector
1:3eba6f2:    * @param prior
1:3eba6f2:    *          a prior ClusterClassifier
1:3eba6f2:    * @return a Vector of probabilities that the data is described by each of the
1:3eba6f2:    *         models
1:3eba6f2:    */
1:229aeff:   Vector classify(Vector data, ClusterClassifier prior);
1:3eba6f2:   
1:3eba6f2:   /**
1:76e80dc:    * Return a vector of weights for each of the models given those probabilities
1:172bb3b:    * 
1:933e22a:    * @param probabilities
1:172bb3b:    *          a Vector of pdfs
1:933e22a:    * @return a Vector of weights
1:172bb3b:    */
1:229aeff:   Vector select(Vector probabilities);
1:172bb3b:   
1:172bb3b:   /**
1:172bb3b:    * Update the policy with the given classifier
1:172bb3b:    * 
1:172bb3b:    * @param posterior
1:172bb3b:    *          a ClusterClassifier
1:172bb3b:    */
1:229aeff:   void update(ClusterClassifier posterior);
1:76e80dc:   
1:172bb3b:   /**
1:3eba6f2:    * Close the policy using the classifier's models
1:3eba6f2:    * 
1:3eba6f2:    * @param posterior
1:3eba6f2:    *          a posterior ClusterClassifier
1:76e80dc:    */
1:229aeff:   void close(ClusterClassifier posterior);
1:172bb3b:   
1:4841efb: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:   Vector classify(Vector data, ClusterClassifier prior);
/////////////////////////////////////////////////////////////////////////
1:   Vector select(Vector probabilities);
/////////////////////////////////////////////////////////////////////////
1:   void update(ClusterClassifier posterior);
/////////////////////////////////////////////////////////////////////////
1:   void close(ClusterClassifier posterior);
commit:15712a6
/////////////////////////////////////////////////////////////////////////
0:   Vector select(Vector probabilities);
/////////////////////////////////////////////////////////////////////////
0:   void update(ClusterClassifier posterior);
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:3eba6f2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:    * Classify the data vector given the classifier's models
1:    * 
1:    * @param data
1:    *          a data Vector
1:    * @param prior
1:    *          a prior ClusterClassifier
1:    * @return a Vector of probabilities that the data is described by each of the
1:    *         models
1:    */
0:   public Vector classify(Vector data, ClusterClassifier prior);
1:   
1:   /**
0:   public Vector select(Vector probabilities);
/////////////////////////////////////////////////////////////////////////
0:   public void update(ClusterClassifier posterior);
1:    * Close the policy using the classifier's models
1:    * 
1:    * @param posterior
1:    *          a posterior ClusterClassifier
0:   public void close(ClusterClassifier posterior);
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.iterator;
0: import org.apache.mahout.clustering.Cluster;
1: import org.apache.mahout.clustering.classify.ClusterClassifier;
commit:76e80dc
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1: public interface ClusteringPolicy extends Writable {
1:    * Return a vector of weights for each of the models given those probabilities
/////////////////////////////////////////////////////////////////////////
1:   /**
0:    * @param data
0:    *          a data Vector
0:    * @param models
0:    *          a list of Cluster models
0:    * @return a Vector of probabilities that the data is described by each of the
0:    *         models
1:    */
0:   Vector classify(Vector data, List<Cluster> models);
1:   
commit:a28cf1d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Writable;
0: public interface ClusteringPolicy extends Writable{
commit:933e22a
/////////////////////////////////////////////////////////////////////////
1:    * @param probabilities
1:    * @return a Vector of weights
0:   public abstract Vector select(Vector probabilities);
commit:172bb3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.mahout.clustering;
1: 
1: import org.apache.mahout.math.Vector;
1: 
1: /**
1:  * A ClusteringPolicy captures the semantics of assignment of points to clusters
1:  * 
1:  */
0: public interface ClusteringPolicy {
1:   
1:   /**
0:    * Return the index of the most appropriate model
1:    * 
0:    * @param pdfs
1:    *          a Vector of pdfs
0:    * @return an int index
1:    */
0:   public abstract int select(Vector pdfs);
1:   
1:   /**
1:    * Update the policy with the given classifier
1:    * 
1:    * @param posterior
1:    *          a ClusterClassifier
1:    */
0:   public abstract void update(ClusterClassifier posterior);
1:   
0: }
============================================================================