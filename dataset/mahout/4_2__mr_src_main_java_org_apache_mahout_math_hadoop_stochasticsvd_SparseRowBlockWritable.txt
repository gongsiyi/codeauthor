1:1499411: /*
1:1499411:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1499411:  * contributor license agreements.  See the NOTICE file distributed with
1:1499411:  * this work for additional information regarding copyright ownership.
1:1499411:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1499411:  * (the "License"); you may not use this file except in compliance with
1:1499411:  * the License.  You may obtain a copy of the License at
1:ffc7fab:  *
1:1499411:  *     http://www.apache.org/licenses/LICENSE-2.0
2:1499411:  *
1:1499411:  * Unless required by applicable law or agreed to in writing, software
1:1499411:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1499411:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1499411:  * See the License for the specific language governing permissions and
1:1499411:  * limitations under the License.
1:1499411:  */
1:ffc7fab: 
1:ffc7fab: package org.apache.mahout.math.hadoop.stochasticsvd;
1:ffc7fab: 
1:ffc7fab: import java.io.DataInput;
1:ffc7fab: import java.io.DataOutput;
1:ffc7fab: import java.io.IOException;
1:ffc7fab: import java.util.Arrays;
1:ffc7fab: 
1:ffc7fab: import org.apache.hadoop.io.Writable;
1:ffc7fab: import org.apache.mahout.math.Varint;
1:ffc7fab: import org.apache.mahout.math.Vector;
1:ffc7fab: import org.apache.mahout.math.VectorWritable;
1:ffc7fab: import org.apache.mahout.math.function.PlusMult;
1:ffc7fab: 
1:ffc7fab: /**
1:ffc7fab:  * block that supports accumulating rows and their sums , suitable for combiner
1:ffc7fab:  * and reducers of multiplication jobs.
1:ffc7fab:  */
1:ffc7fab: public class SparseRowBlockWritable implements Writable {
1:ffc7fab: 
1:1499411:   private int[] rowIndices;
1:ffc7fab:   private Vector[] rows;
1:4fbfbc6:   private int numRows;
1:ffc7fab: 
1:ffc7fab:   public SparseRowBlockWritable() {
1:ffc7fab:     this(10);
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public SparseRowBlockWritable(int initialCapacity) {
1:ffc7fab:     rowIndices = new int[initialCapacity];
1:ffc7fab:     rows = new Vector[initialCapacity];
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public int[] getRowIndices() {
1:ffc7fab:     return rowIndices;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public Vector[] getRows() {
1:ffc7fab:     return rows;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public void readFields(DataInput in) throws IOException {
1:ffc7fab:     numRows = Varint.readUnsignedVarInt(in);
1:ffc7fab:     if (rows == null || rows.length < numRows) {
1:ffc7fab:       rows = new Vector[numRows];
1:ffc7fab:       rowIndices = new int[numRows];
1:ffc7fab:     }
1:ffc7fab:     VectorWritable vw = new VectorWritable();
1:ffc7fab:     for (int i = 0; i < numRows; i++) {
1:ffc7fab:       rowIndices[i] = Varint.readUnsignedVarInt(in);
1:ffc7fab:       vw.readFields(in);
1:ffc7fab:       rows[i] = vw.get().clone();
1:ffc7fab:     }
1:ffc7fab: 
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public void write(DataOutput out) throws IOException {
1:ffc7fab:     Varint.writeUnsignedVarInt(numRows, out);
1:ffc7fab:     VectorWritable vw = new VectorWritable();
1:ffc7fab:     for (int i = 0; i < numRows; i++) {
1:ffc7fab:       Varint.writeUnsignedVarInt(rowIndices[i], out);
1:ffc7fab:       vw.set(rows[i]);
1:ffc7fab:       vw.write(out);
1:ffc7fab:     }
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public void plusRow(int index, Vector row) {
1:5a2250c:     /*
1:5a2250c:      * often accumulation goes in row-increasing order, so check for this to
1:5a2250c:      * avoid binary search (another log Height multiplier).
1:5a2250c:      */
1:ffc7fab: 
1:ffc7fab:     int pos =
1:ffc7fab:       numRows == 0 || rowIndices[numRows - 1] < index ? -numRows - 1 : Arrays
1:ffc7fab:         .binarySearch(rowIndices, 0, numRows, index);
1:ffc7fab:     if (pos >= 0) {
1:ffc7fab:       rows[pos].assign(row, PlusMult.plusMult(1));
1:ffc7fab:     } else {
1:ffc7fab:       insertIntoPos(-pos - 1, index, row);
1:ffc7fab:     }
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   private void insertIntoPos(int pos, int rowIndex, Vector row) {
1:ffc7fab:     // reallocate if needed
1:ffc7fab:     if (numRows == rows.length) {
1:ffc7fab:       rows = Arrays.copyOf(rows, numRows + 1 << 1);
1:ffc7fab:       rowIndices = Arrays.copyOf(rowIndices, numRows + 1 << 1);
1:ffc7fab:     }
1:ffc7fab:     // make a hole if needed
1:ffc7fab:     System.arraycopy(rows, pos, rows, pos + 1, numRows - pos);
1:ffc7fab:     System.arraycopy(rowIndices, pos, rowIndices, pos + 1, numRows - pos);
1:ffc7fab:     // put
1:ffc7fab:     rowIndices[pos] = rowIndex;
1:ffc7fab:     rows[pos] = row.clone();
1:ffc7fab:     numRows++;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   /**
1:ffc7fab:    * pluses one block into another. Use it for accumulation of partial products in
1:ffc7fab:    * combiners and reducers.
1:ffc7fab:    * 
1:ffc7fab:    * @param bOther
1:ffc7fab:    *          block to add
1:ffc7fab:    */
1:ffc7fab:   public void plusBlock(SparseRowBlockWritable bOther) {
1:5a2250c:     /*
1:5a2250c:      * since we maintained row indices in a sorted order, we can run sort merge
1:5a2250c:      * to expedite this operation
1:5a2250c:      */
1:1499411:     int i = 0;
1:1499411:     int j = 0;
1:ffc7fab:     while (i < numRows && j < bOther.numRows) {
1:1499411:       while (i < numRows && rowIndices[i] < bOther.rowIndices[j]) {
1:ffc7fab:         i++;
1:1499411:       }
1:ffc7fab:       if (i < numRows) {
1:ffc7fab:         if (rowIndices[i] == bOther.rowIndices[j]) {
1:ffc7fab:           rows[i].assign(bOther.rows[j], PlusMult.plusMult(1));
1:ffc7fab:         } else {
1:ffc7fab:           // insert into i-th position
1:ffc7fab:           insertIntoPos(i, bOther.rowIndices[j], bOther.rows[j]);
1:ffc7fab:         }
1:ffc7fab:         // increment in either case
1:ffc7fab:         i++;
1:ffc7fab:         j++;
1:ffc7fab:       }
1:ffc7fab:     }
1:ffc7fab:     for (; j < bOther.numRows; j++) {
1:ffc7fab:       insertIntoPos(numRows, bOther.rowIndices[j], bOther.rows[j]);
1:ffc7fab:     }
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public int getNumRows() {
1:ffc7fab:     return numRows;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public void clear() {
1:ffc7fab:     numRows = 0;
1:ffc7fab:     Arrays.fill(rows, null);
1:ffc7fab:   }
1:ffc7fab: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:5a2250c
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * often accumulation goes in row-increasing order, so check for this to
1:      * avoid binary search (another log Height multiplier).
1:      */
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * since we maintained row indices in a sorted order, we can run sort merge
1:      * to expedite this operation
1:      */
commit:ffc7fab
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.Arrays;
1: 
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.math.Varint;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.function.PlusMult;
1: 
1: /**
1:  * block that supports accumulating rows and their sums , suitable for combiner
1:  * and reducers of multiplication jobs.
0:  * <P>
1:  * 
1:  */
1: 
1: public class SparseRowBlockWritable implements Writable {
1: 
0:   private int rowIndices[];
1:   private Vector[] rows;
0:   int numRows;
1: 
1:   public SparseRowBlockWritable() {
1:     this(10);
1:   }
1: 
1:   public SparseRowBlockWritable(int initialCapacity) {
0:     super();
1:     rowIndices = new int[initialCapacity];
1:     rows = new Vector[initialCapacity];
1:   }
1: 
1:   public int[] getRowIndices() {
1:     return rowIndices;
1:   }
1: 
1:   public Vector[] getRows() {
1:     return rows;
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     numRows = Varint.readUnsignedVarInt(in);
1:     if (rows == null || rows.length < numRows) {
1:       rows = new Vector[numRows];
1:       rowIndices = new int[numRows];
1:     }
1:     VectorWritable vw = new VectorWritable();
1:     for (int i = 0; i < numRows; i++) {
1:       rowIndices[i] = Varint.readUnsignedVarInt(in);
1:       vw.readFields(in);
1:       rows[i] = vw.get().clone();
1:     }
1: 
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     Varint.writeUnsignedVarInt(numRows, out);
1:     VectorWritable vw = new VectorWritable();
1:     for (int i = 0; i < numRows; i++) {
1:       Varint.writeUnsignedVarInt(rowIndices[i], out);
1:       vw.set(rows[i]);
1:       vw.write(out);
1:     }
1:   }
1: 
1:   public void plusRow(int index, Vector row) {
0:     // often accumulation goes in row-increasing order,
0:     // so check for this to avoid binary search (another log Height multiplier).
1: 
1:     int pos =
1:       numRows == 0 || rowIndices[numRows - 1] < index ? -numRows - 1 : Arrays
1:         .binarySearch(rowIndices, 0, numRows, index);
1:     if (pos >= 0) {
1:       rows[pos].assign(row, PlusMult.plusMult(1));
1:     } else {
1:       insertIntoPos(-pos - 1, index, row);
1:     }
1:   }
1: 
1:   private void insertIntoPos(int pos, int rowIndex, Vector row) {
1:     // reallocate if needed
1:     if (numRows == rows.length) {
1:       rows = Arrays.copyOf(rows, numRows + 1 << 1);
1:       rowIndices = Arrays.copyOf(rowIndices, numRows + 1 << 1);
1:     }
1:     // make a hole if needed
1:     System.arraycopy(rows, pos, rows, pos + 1, numRows - pos);
1:     System.arraycopy(rowIndices, pos, rowIndices, pos + 1, numRows - pos);
1:     // put
1:     rowIndices[pos] = rowIndex;
1:     rows[pos] = row.clone();
1:     numRows++;
1:   }
1: 
1:   /**
1:    * pluses one block into another. Use it for accumulation of partial products in
1:    * combiners and reducers.
1:    * 
1:    * @param bOther
1:    *          block to add
1:    */
1:   public void plusBlock(SparseRowBlockWritable bOther) {
0:     // since we maintained row indices in a sorted order, we can run
0:     // sort merge to expedite this operation
0:     int i = 0, j = 0;
1:     while (i < numRows && j < bOther.numRows) {
0:       while (i < numRows && rowIndices[i] < bOther.rowIndices[j])
1:         i++;
1:       if (i < numRows) {
1:         if (rowIndices[i] == bOther.rowIndices[j]) {
1:           rows[i].assign(bOther.rows[j], PlusMult.plusMult(1));
1:         } else {
1:           // insert into i-th position
1:           insertIntoPos(i, bOther.rowIndices[j], bOther.rows[j]);
1:         }
1:         // increment in either case
1:         i++;
1:         j++;
1:       }
1:     }
1:     for (; j < bOther.numRows; j++) {
1:       insertIntoPos(numRows, bOther.rowIndices[j], bOther.rows[j]);
1:     }
1:   }
1: 
1:   public int getNumRows() {
1:     return numRows;
1:   }
1: 
1:   public void clear() {
1:     numRows = 0;
1:     Arrays.fill(rows, null);
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:   private int numRows;
commit:1499411
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
/////////////////////////////////////////////////////////////////////////
1:   private int[] rowIndices;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     int i = 0;
1:     int j = 0;
1:       while (i < numRows && rowIndices[i] < bOther.rowIndices[j]) {
1:       }
============================================================================