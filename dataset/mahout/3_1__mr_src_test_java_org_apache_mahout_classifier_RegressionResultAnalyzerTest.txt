1:1608f61: /**
1:1608f61:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1608f61:  * contributor license agreements.  See the NOTICE file distributed with
1:1608f61:  * this work for additional information regarding copyright ownership.
1:1608f61:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1608f61:  * (the "License"); you may not use this file except in compliance with
1:1608f61:  * the License.  You may obtain a copy of the License at
1:1608f61:  *
1:1608f61:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1608f61:  *
1:1608f61:  * Unless required by applicable law or agreed to in writing, software
1:1608f61:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1608f61:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1608f61:  * See the License for the specific language governing permissions and
1:1608f61:  * limitations under the License.
1:1608f61:  */
1:1608f61: 
1:1608f61: package org.apache.mahout.classifier;
1:1608f61: 
1:1608f61: import java.util.regex.Matcher;
1:1608f61: import java.util.regex.Pattern;
1:1608f61: 
1:1608f61: import org.apache.mahout.common.MahoutTestCase;
1:1608f61: import org.junit.Test;
1:1608f61: 
1:1608f61: public class RegressionResultAnalyzerTest extends MahoutTestCase {
1:1608f61: 
1:1608f61:   private static final Pattern p1 = Pattern.compile("Correlation coefficient *: *(.*)\n");
1:1608f61:   private static final Pattern p2 = Pattern.compile("Mean absolute error *: *(.*)\n");
1:1608f61:   private static final Pattern p3 = Pattern.compile("Root mean squared error *: *(.*)\n");
1:1608f61:   private static final Pattern p4 = Pattern.compile("Predictable Instances *: *(.*)\n");
1:1608f61:   private static final Pattern p5 = Pattern.compile("Unpredictable Instances *: *(.*)\n");
1:1608f61:   private static final Pattern p6 = Pattern.compile("Total Regressed Instances *: *(.*)\n");
1:1608f61:   
1:1608f61:   private static double[] parseAnalysis(CharSequence analysis) {
1:1608f61:     double[] results = new double[3];
1:1608f61:     Matcher m = p1.matcher(analysis);
1:1608f61:     if (m.find()) {
1:1608f61:       results[0] = Double.parseDouble(m.group(1));
1:1608f61:     } else {
1:1608f61:       return null;
1:1608f61:     }
1:1608f61:     m = p2.matcher(analysis);
1:1608f61:     if (m.find()) {
1:1608f61:       results[1] = Double.parseDouble(m.group(1));
1:1608f61:     } else {
1:1608f61:       return null;
1:1608f61:     }
1:1608f61:     m = p3.matcher(analysis);
1:1608f61:     if (m.find()) {
1:1608f61:       results[2] = Double.parseDouble(m.group(1));
1:1608f61:     } else {
1:1608f61:       return null;
1:1608f61:     }
1:1608f61:     return results;
1:1608f61:   }
1:1608f61: 
1:1608f61:   private static int[] parseAnalysisCount(CharSequence analysis) {
1:1608f61:     int[] results = new int[3];
1:1608f61:     Matcher m = p4.matcher(analysis);
1:1608f61:     if (m.find()) {
1:1608f61:       results[0] = Integer.parseInt(m.group(1));
1:1608f61:     }
1:1608f61:     m = p5.matcher(analysis);
1:1608f61:     if (m.find()) {
1:1608f61:       results[1] = Integer.parseInt(m.group(1));
1:1608f61:     }
1:1608f61:     m = p6.matcher(analysis);
1:1608f61:     if (m.find()) {
1:1608f61:       results[2] = Integer.parseInt(m.group(1));
1:1608f61:     }
1:1608f61:     return results;
1:1608f61:   }
1:1608f61:   
1:1608f61:   @Test
1:1608f61:   public void testAnalyze() {
1:8b6a26a:     double[][] results = new double[10][2];
1:1608f61: 
1:1608f61:     for (int i = 0; i < results.length; i++) {
1:1608f61:       results[i][0] = i;
1:1608f61:       results[i][1] = i + 1;
1:1608f61:     }
1:1608f61:     RegressionResultAnalyzer analyzer = new RegressionResultAnalyzer();
1:1608f61:     analyzer.setInstances(results);
1:1608f61:     String analysis = analyzer.toString();
1:8396a27:     assertArrayEquals(new double[]{1.0, 1.0, 1.0}, parseAnalysis(analysis), 0);
1:1608f61: 
1:1608f61:     for (int i = 0; i < results.length; i++) {
1:1608f61:       results[i][1] = Math.sqrt(i);
1:1608f61:     }
1:1608f61:     analyzer = new RegressionResultAnalyzer();
1:1608f61:     analyzer.setInstances(results);
1:1608f61:     analysis = analyzer.toString();
1:8396a27:     assertArrayEquals(new double[]{0.9573, 2.5694, 3.2848}, parseAnalysis(analysis), 0);
1:1608f61: 
1:1608f61:     for (int i = 0; i < results.length; i++) {
1:1608f61:       results[i][0] = results.length - i;
1:1608f61:     }
1:1608f61:     analyzer = new RegressionResultAnalyzer();
1:1608f61:     analyzer.setInstances(results);
1:1608f61:     analysis = analyzer.toString();
1:8396a27:     assertArrayEquals(new double[]{-0.9573, 4.1351, 5.1573}, parseAnalysis(analysis), 0);
1:1608f61:   }
1:1608f61: 
1:1608f61:   @Test
1:1608f61:   public void testUnpredictable() {
1:1608f61:     double[][] results = new double[10][2];
1:1608f61: 
1:1608f61:     for (int i = 0; i < results.length; i++) {
1:1608f61:       results[i][0] = i;
1:1608f61:       results[i][1] = Double.NaN;
1:1608f61:     }
1:1608f61:     RegressionResultAnalyzer analyzer = new RegressionResultAnalyzer();
1:1608f61:     analyzer.setInstances(results);
1:1608f61:     String analysis = analyzer.toString();
1:1608f61:     assertNull(parseAnalysis(analysis));
1:8396a27:     assertArrayEquals(new int[]{0, 10, 10}, parseAnalysisCount(analysis));
1:1608f61: 
1:1608f61:     for (int i = 0; i < results.length - 3; i++) {
1:1608f61:       results[i][1] = Math.sqrt(i);
1:1608f61:     }
1:1608f61:     analyzer = new RegressionResultAnalyzer();
1:1608f61:     analyzer.setInstances(results);
1:1608f61:     analysis = analyzer.toString();
1:8396a27:     assertArrayEquals(new double[]{0.9552, 1.4526, 1.9345}, parseAnalysis(analysis), 0);
1:8396a27:     assertArrayEquals(new int[]{7, 3, 10}, parseAnalysisCount(analysis));
1:1608f61:   }
1:1608f61: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:     assertArrayEquals(new double[]{1.0, 1.0, 1.0}, parseAnalysis(analysis), 0);
/////////////////////////////////////////////////////////////////////////
1:     assertArrayEquals(new double[]{0.9573, 2.5694, 3.2848}, parseAnalysis(analysis), 0);
/////////////////////////////////////////////////////////////////////////
1:     assertArrayEquals(new double[]{-0.9573, 4.1351, 5.1573}, parseAnalysis(analysis), 0);
/////////////////////////////////////////////////////////////////////////
1:     assertArrayEquals(new int[]{0, 10, 10}, parseAnalysisCount(analysis));
/////////////////////////////////////////////////////////////////////////
1:     assertArrayEquals(new double[]{0.9552, 1.4526, 1.9345}, parseAnalysis(analysis), 0);
1:     assertArrayEquals(new int[]{7, 3, 10}, parseAnalysisCount(analysis));
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1:     double[][] results = new double[10][2];
commit:1608f61
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier;
1: 
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.junit.Test;
1: 
1: public class RegressionResultAnalyzerTest extends MahoutTestCase {
1: 
1:   private static final Pattern p1 = Pattern.compile("Correlation coefficient *: *(.*)\n");
1:   private static final Pattern p2 = Pattern.compile("Mean absolute error *: *(.*)\n");
1:   private static final Pattern p3 = Pattern.compile("Root mean squared error *: *(.*)\n");
1:   private static final Pattern p4 = Pattern.compile("Predictable Instances *: *(.*)\n");
1:   private static final Pattern p5 = Pattern.compile("Unpredictable Instances *: *(.*)\n");
1:   private static final Pattern p6 = Pattern.compile("Total Regressed Instances *: *(.*)\n");
1:   
1:   private static double[] parseAnalysis(CharSequence analysis) {
1:     double[] results = new double[3];
1:     Matcher m = p1.matcher(analysis);
1:     if (m.find()) {
1:       results[0] = Double.parseDouble(m.group(1));
1:     } else {
1:       return null;
1:     }
1:     m = p2.matcher(analysis);
1:     if (m.find()) {
1:       results[1] = Double.parseDouble(m.group(1));
1:     } else {
1:       return null;
1:     }
1:     m = p3.matcher(analysis);
1:     if (m.find()) {
1:       results[2] = Double.parseDouble(m.group(1));
1:     } else {
1:       return null;
1:     }
1:     return results;
1:   }
1: 
1:   private static int[] parseAnalysisCount(CharSequence analysis) {
1:     int[] results = new int[3];
1:     Matcher m = p4.matcher(analysis);
1:     if (m.find()) {
1:       results[0] = Integer.parseInt(m.group(1));
1:     }
1:     m = p5.matcher(analysis);
1:     if (m.find()) {
1:       results[1] = Integer.parseInt(m.group(1));
1:     }
1:     m = p6.matcher(analysis);
1:     if (m.find()) {
1:       results[2] = Integer.parseInt(m.group(1));
1:     }
1:     return results;
1:   }
1:   
1:   @Test
1:   public void testAnalyze() {
0:     double results[][] = new double[10][2];
1: 
1:     for (int i = 0; i < results.length; i++) {
1:       results[i][0] = i;
1:       results[i][1] = i + 1;
1:     }
1:     RegressionResultAnalyzer analyzer = new RegressionResultAnalyzer();
1:     analyzer.setInstances(results);
1:     String analysis = analyzer.toString();
0:     assertArrayEquals(parseAnalysis(analysis), new double[] {1.0, 1.0, 1.0}, 0);
1: 
1:     for (int i = 0; i < results.length; i++) {
1:       results[i][1] = Math.sqrt(i);
1:     }
1:     analyzer = new RegressionResultAnalyzer();
1:     analyzer.setInstances(results);
1:     analysis = analyzer.toString();
0:     assertArrayEquals(parseAnalysis(analysis), new double[] {0.9573, 2.5694, 3.2848}, 0);
1: 
1:     for (int i = 0; i < results.length; i++) {
1:       results[i][0] = results.length - i;
1:     }
1:     analyzer = new RegressionResultAnalyzer();
1:     analyzer.setInstances(results);
1:     analysis = analyzer.toString();
0:     assertArrayEquals(parseAnalysis(analysis), new double[] {-0.9573, 4.1351, 5.1573}, 0);
1:   }
1: 
1:   @Test
1:   public void testUnpredictable() {
1:     double[][] results = new double[10][2];
1: 
1:     for (int i = 0; i < results.length; i++) {
1:       results[i][0] = i;
1:       results[i][1] = Double.NaN;
1:     }
1:     RegressionResultAnalyzer analyzer = new RegressionResultAnalyzer();
1:     analyzer.setInstances(results);
1:     String analysis = analyzer.toString();
1:     assertNull(parseAnalysis(analysis));
0:     assertArrayEquals(parseAnalysisCount(analysis), new int[] {0, 10, 10});
1: 
1:     for (int i = 0; i < results.length - 3; i++) {
1:       results[i][1] = Math.sqrt(i);
1:     }
1:     analyzer = new RegressionResultAnalyzer();
1:     analyzer.setInstances(results);
1:     analysis = analyzer.toString();
0:     assertArrayEquals(parseAnalysis(analysis), new double[] {0.9552, 1.4526, 1.9345}, 0);
0:     assertArrayEquals(parseAnalysisCount(analysis), new int[] {7, 3, 10});
1:   }
1: }
============================================================================