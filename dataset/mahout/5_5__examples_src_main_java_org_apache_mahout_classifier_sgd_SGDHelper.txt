2:8a2c0f3: /**
1:8a2c0f3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8a2c0f3:  * contributor license agreements.  See the NOTICE file distributed with
1:8a2c0f3:  * this work for additional information regarding copyright ownership.
1:8a2c0f3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8a2c0f3:  * (the "License"); you may not use this file except in compliance with
1:8a2c0f3:  * the License.  You may obtain a copy of the License at
3:8a2c0f3:  *
1:8a2c0f3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8a2c0f3:  *
1:8a2c0f3:  * Unless required by applicable law or agreed to in writing, software
1:8a2c0f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8a2c0f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8a2c0f3:  * See the License for the specific language governing permissions and
1:8a2c0f3:  * limitations under the License.
1:8a2c0f3:  */
2:8a2c0f3: 
1:4fbfbc6: package org.apache.mahout.classifier.sgd;
1:8a2c0f3: 
1:4ef9d31: import com.google.common.collect.Multiset;
1:5257bc9: import org.apache.mahout.classifier.NewsgroupHelper;
1:8a2c0f3: import org.apache.mahout.ep.State;
1:8a2c0f3: import org.apache.mahout.math.Matrix;
1:8a2c0f3: import org.apache.mahout.math.Vector;
1:8a2c0f3: import org.apache.mahout.math.function.DoubleFunction;
1:8a2c0f3: import org.apache.mahout.math.function.Functions;
1:8a2c0f3: import org.apache.mahout.vectorizer.encoders.Dictionary;
1:8a2c0f3: 
1:4ef9d31: import java.io.File;
1:4ef9d31: import java.io.IOException;
1:4ef9d31: import java.util.ArrayList;
1:4ef9d31: import java.util.List;
1:4ef9d31: import java.util.Map;
1:4ef9d31: import java.util.Random;
1:4ef9d31: import java.util.Set;
1:4ef9d31: import java.util.TreeMap;
1:5257bc9: 
1:4fbfbc6: public final class SGDHelper {
1:4fbfbc6: 
1:8a2c0f3:   private static final String[] LEAK_LABELS = {"none", "month-year", "day-month-year"};
1:8a2c0f3: 
1:4fbfbc6:   private SGDHelper() {
1:4fbfbc6:   }
1:4fbfbc6: 
1:8a2c0f3:   public static void dissect(int leakType,
1:a2346ae:                              Dictionary dictionary,
1:8a2c0f3:                              AdaptiveLogisticRegression learningAlgorithm,
1:8a2c0f3:                              Iterable<File> files, Multiset<String> overallCounts) throws IOException {
1:8a2c0f3:     CrossFoldLearner model = learningAlgorithm.getBest().getPayload().getLearner();
1:8a2c0f3:     model.close();
1:8a2c0f3: 
1:4ef9d31:     Map<String, Set<Integer>> traceDictionary = new TreeMap<>();
1:8a2c0f3:     ModelDissector md = new ModelDissector();
1:8a2c0f3: 
1:8a2c0f3:     NewsgroupHelper helper = new NewsgroupHelper();
1:8a2c0f3:     helper.getEncoder().setTraceDictionary(traceDictionary);
1:8a2c0f3:     helper.getBias().setTraceDictionary(traceDictionary);
1:8a2c0f3: 
1:8a2c0f3:     for (File file : permute(files, helper.getRandom()).subList(0, 500)) {
1:8a2c0f3:       String ng = file.getParentFile().getName();
1:a2346ae:       int actual = dictionary.intern(ng);
1:8a2c0f3: 
1:8a2c0f3:       traceDictionary.clear();
1:8a2c0f3:       Vector v = helper.encodeFeatureVector(file, actual, leakType, overallCounts);
1:8a2c0f3:       md.update(v, traceDictionary, model);
1:8a2c0f3:     }
1:8a2c0f3: 
1:4ef9d31:     List<String> ngNames = new ArrayList<>(dictionary.values());
1:8a2c0f3:     List<ModelDissector.Weight> weights = md.summary(100);
1:8a2c0f3:     System.out.println("============");
1:8a2c0f3:     System.out.println("Model Dissection");
1:8a2c0f3:     for (ModelDissector.Weight w : weights) {
1:bdb1c48:       System.out.printf("%s\t%.1f\t%s\t%.1f\t%s\t%.1f\t%s%n",
1:8a2c0f3:                         w.getFeature(), w.getWeight(), ngNames.get(w.getMaxImpact() + 1),
1:8a2c0f3:                         w.getCategory(1), w.getWeight(1), w.getCategory(2), w.getWeight(2));
1:8a2c0f3:     }
1:8a2c0f3:   }
1:8a2c0f3: 
1:8a2c0f3:   public static List<File> permute(Iterable<File> files, Random rand) {
1:4ef9d31:     List<File> r = new ArrayList<>();
1:8a2c0f3:     for (File file : files) {
1:8a2c0f3:       int i = rand.nextInt(r.size() + 1);
1:8a2c0f3:       if (i == r.size()) {
1:8a2c0f3:         r.add(file);
1:8a2c0f3:       } else {
1:8a2c0f3:         r.add(r.get(i));
1:8a2c0f3:         r.set(i, file);
1:8a2c0f3:       }
1:8a2c0f3:     }
1:8a2c0f3:     return r;
1:8a2c0f3:   }
1:8a2c0f3: 
1:3c22856:   static void analyzeState(SGDInfo info, int leakType, int k, State<AdaptiveLogisticRegression.Wrapper,
1:3c22856:       CrossFoldLearner> best) throws IOException {
1:4fbfbc6:     int bump = info.getBumps()[(int) Math.floor(info.getStep()) % info.getBumps().length];
1:4fbfbc6:     int scale = (int) Math.pow(10, Math.floor(info.getStep() / info.getBumps().length));
1:8a2c0f3:     double maxBeta;
1:8a2c0f3:     double nonZeros;
1:8a2c0f3:     double positive;
1:8a2c0f3:     double norm;
1:8a2c0f3: 
1:8a2c0f3:     double lambda = 0;
1:8a2c0f3:     double mu = 0;
1:8a2c0f3: 
1:8a2c0f3:     if (best != null) {
1:8a2c0f3:       CrossFoldLearner state = best.getPayload().getLearner();
1:4fbfbc6:       info.setAverageCorrect(state.percentCorrect());
1:4fbfbc6:       info.setAverageLL(state.logLikelihood());
1:8a2c0f3: 
1:8a2c0f3:       OnlineLogisticRegression model = state.getModels().get(0);
1:8a2c0f3:       // finish off pending regularization
1:8a2c0f3:       model.close();
1:8a2c0f3: 
1:8a2c0f3:       Matrix beta = model.getBeta();
1:8a2c0f3:       maxBeta = beta.aggregate(Functions.MAX, Functions.ABS);
1:8a2c0f3:       nonZeros = beta.aggregate(Functions.PLUS, new DoubleFunction() {
1:8a2c0f3:         @Override
1:8a2c0f3:         public double apply(double v) {
1:8a2c0f3:           return Math.abs(v) > 1.0e-6 ? 1 : 0;
1:8a2c0f3:         }
1:8a2c0f3:       });
1:8a2c0f3:       positive = beta.aggregate(Functions.PLUS, new DoubleFunction() {
1:8a2c0f3:         @Override
1:8a2c0f3:         public double apply(double v) {
1:8a2c0f3:           return v > 0 ? 1 : 0;
1:8a2c0f3:         }
1:8a2c0f3:       });
1:8a2c0f3:       norm = beta.aggregate(Functions.PLUS, Functions.ABS);
1:8a2c0f3: 
1:8a2c0f3:       lambda = best.getMappedParams()[0];
1:8a2c0f3:       mu = best.getMappedParams()[1];
1:8a2c0f3:     } else {
1:8a2c0f3:       maxBeta = 0;
1:8a2c0f3:       nonZeros = 0;
1:8a2c0f3:       positive = 0;
1:8a2c0f3:       norm = 0;
1:8a2c0f3:     }
1:8a2c0f3:     if (k % (bump * scale) == 0) {
1:8a2c0f3:       if (best != null) {
1:3a284f5:         File modelFile = new File(System.getProperty("java.io.tmpdir"), "news-group-" + k + ".model");
1:3a284f5:         ModelSerializer.writeBinary(modelFile.getAbsolutePath(), best.getPayload().getLearner().getModels().get(0));
1:8a2c0f3:       }
1:8a2c0f3: 
1:4fbfbc6:       info.setStep(info.getStep() + 0.25);
1:8a2c0f3:       System.out.printf("%.2f\t%.2f\t%.2f\t%.2f\t%.8g\t%.8g\t", maxBeta, nonZeros, positive, norm, lambda, mu);
1:bdb1c48:       System.out.printf("%d\t%.3f\t%.2f\t%s%n",
1:4fbfbc6:         k, info.getAverageLL(), info.getAverageCorrect() * 100, LEAK_LABELS[leakType % 3]);
1:8a2c0f3:     }
1:8a2c0f3:   }
1:8a2c0f3: 
1:8a2c0f3: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Multiset;
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Random;
1: import java.util.Set;
1: import java.util.TreeMap;
/////////////////////////////////////////////////////////////////////////
1:     Map<String, Set<Integer>> traceDictionary = new TreeMap<>();
/////////////////////////////////////////////////////////////////////////
1:     List<String> ngNames = new ArrayList<>(dictionary.values());
/////////////////////////////////////////////////////////////////////////
1:     List<File> r = new ArrayList<>();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3a284f5
/////////////////////////////////////////////////////////////////////////
1:         File modelFile = new File(System.getProperty("java.io.tmpdir"), "news-group-" + k + ".model");
1:         ModelSerializer.writeBinary(modelFile.getAbsolutePath(), best.getPayload().getLearner().getModels().get(0));
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:       System.out.printf("%s\t%.1f\t%s\t%.1f\t%s\t%.1f\t%s%n",
/////////////////////////////////////////////////////////////////////////
1:       System.out.printf("%d\t%.3f\t%.2f\t%s%n",
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:   static void analyzeState(SGDInfo info, int leakType, int k, State<AdaptiveLogisticRegression.Wrapper,
1:       CrossFoldLearner> best) throws IOException {
author:Robin Anil
-------------------------------------------------------------------------------
commit:5257bc9
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Random;
0: import java.util.Set;
1: 
1: import org.apache.mahout.classifier.NewsgroupHelper;
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
0: import com.google.common.collect.Maps;
0: import com.google.common.collect.Multiset;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.sgd;
/////////////////////////////////////////////////////////////////////////
1: public final class SGDHelper {
1: 
1:   private SGDHelper() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     int bump = info.getBumps()[(int) Math.floor(info.getStep()) % info.getBumps().length];
1:     int scale = (int) Math.pow(10, Math.floor(info.getStep() / info.getBumps().length));
/////////////////////////////////////////////////////////////////////////
1:       info.setAverageCorrect(state.percentCorrect());
1:       info.setAverageLL(state.logLikelihood());
/////////////////////////////////////////////////////////////////////////
1:       info.setStep(info.getStep() + 0.25);
1:         k, info.getAverageLL(), info.getAverageCorrect() * 100, LEAK_LABELS[leakType % 3]);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a2346ae
/////////////////////////////////////////////////////////////////////////
1:                              Dictionary dictionary,
/////////////////////////////////////////////////////////////////////////
1:       int actual = dictionary.intern(ng);
0:     List<String> ngNames = Lists.newArrayList(dictionary.values());
commit:8a2c0f3
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.classifier.sgd;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
0: import com.google.common.collect.Lists;
0: import com.google.common.collect.Maps;
0: import com.google.common.collect.Multiset;
1: import org.apache.mahout.ep.State;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.DoubleFunction;
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.vectorizer.encoders.Dictionary;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Random;
0: import java.util.Set;
1: 
1: /**
1:  *
1:  *
0:  **/
0: public class SGDHelper {
1:   private static final String[] LEAK_LABELS = {"none", "month-year", "day-month-year"};
1: 
1:   public static void dissect(int leakType,
0:                              Dictionary newsGroups,
1:                              AdaptiveLogisticRegression learningAlgorithm,
1:                              Iterable<File> files, Multiset<String> overallCounts) throws IOException {
1:     CrossFoldLearner model = learningAlgorithm.getBest().getPayload().getLearner();
1:     model.close();
1: 
0:     Map<String, Set<Integer>> traceDictionary = Maps.newTreeMap();
1:     ModelDissector md = new ModelDissector();
1: 
1:     NewsgroupHelper helper = new NewsgroupHelper();
1:     helper.getEncoder().setTraceDictionary(traceDictionary);
1:     helper.getBias().setTraceDictionary(traceDictionary);
1: 
1:     for (File file : permute(files, helper.getRandom()).subList(0, 500)) {
1:       String ng = file.getParentFile().getName();
0:       int actual = newsGroups.intern(ng);
1: 
1:       traceDictionary.clear();
1:       Vector v = helper.encodeFeatureVector(file, actual, leakType, overallCounts);
1:       md.update(v, traceDictionary, model);
1:     }
1: 
0:     List<String> ngNames = Lists.newArrayList(newsGroups.values());
1:     List<ModelDissector.Weight> weights = md.summary(100);
1:     System.out.println("============");
1:     System.out.println("Model Dissection");
1:     for (ModelDissector.Weight w : weights) {
0:       System.out.printf("%s\t%.1f\t%s\t%.1f\t%s\t%.1f\t%s\n",
1:                         w.getFeature(), w.getWeight(), ngNames.get(w.getMaxImpact() + 1),
1:                         w.getCategory(1), w.getWeight(1), w.getCategory(2), w.getWeight(2));
1:     }
1:   }
1: 
1:   public static List<File> permute(Iterable<File> files, Random rand) {
0:     List<File> r = Lists.newArrayList();
1:     for (File file : files) {
1:       int i = rand.nextInt(r.size() + 1);
1:       if (i == r.size()) {
1:         r.add(file);
1:       } else {
1:         r.add(r.get(i));
1:         r.set(i, file);
1:       }
1:     }
1:     return r;
1:   }
1: 
0:   static void analyzeState(SGDInfo info, int leakType, int k, State<AdaptiveLogisticRegression.Wrapper, CrossFoldLearner> best) throws IOException {
0:     int bump = info.bumps[(int) Math.floor(info.step) % info.bumps.length];
0:     int scale = (int) Math.pow(10, Math.floor(info.step / info.bumps.length));
1:     double maxBeta;
1:     double nonZeros;
1:     double positive;
1:     double norm;
1: 
1:     double lambda = 0;
1:     double mu = 0;
1: 
1:     if (best != null) {
1:       CrossFoldLearner state = best.getPayload().getLearner();
0:       info.averageCorrect = state.percentCorrect();
0:       info.averageLL = state.logLikelihood();
1: 
1:       OnlineLogisticRegression model = state.getModels().get(0);
1:       // finish off pending regularization
1:       model.close();
1: 
1:       Matrix beta = model.getBeta();
1:       maxBeta = beta.aggregate(Functions.MAX, Functions.ABS);
1:       nonZeros = beta.aggregate(Functions.PLUS, new DoubleFunction() {
1:         @Override
1:         public double apply(double v) {
1:           return Math.abs(v) > 1.0e-6 ? 1 : 0;
1:         }
1:       });
1:       positive = beta.aggregate(Functions.PLUS, new DoubleFunction() {
1:         @Override
1:         public double apply(double v) {
1:           return v > 0 ? 1 : 0;
1:         }
1:       });
1:       norm = beta.aggregate(Functions.PLUS, Functions.ABS);
1: 
1:       lambda = best.getMappedParams()[0];
1:       mu = best.getMappedParams()[1];
1:     } else {
1:       maxBeta = 0;
1:       nonZeros = 0;
1:       positive = 0;
1:       norm = 0;
1:     }
1:     if (k % (bump * scale) == 0) {
1:       if (best != null) {
0:         ModelSerializer.writeBinary("/tmp/news-group-" + k + ".model",
0:                 best.getPayload().getLearner().getModels().get(0));
1:       }
1: 
0:       info.step += 0.25;
1:       System.out.printf("%.2f\t%.2f\t%.2f\t%.2f\t%.8g\t%.8g\t", maxBeta, nonZeros, positive, norm, lambda, mu);
0:       System.out.printf("%d\t%.3f\t%.2f\t%s\n",
0:         k, info.averageLL, info.averageCorrect * 100, LEAK_LABELS[leakType % 3]);
1:     }
1:   }
1: 
1: }
============================================================================