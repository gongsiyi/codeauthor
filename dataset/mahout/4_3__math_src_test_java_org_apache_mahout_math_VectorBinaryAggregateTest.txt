1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:f7d1c10: package org.apache.mahout.math;
1:a8d3dbd: 
1:157bca3: import static org.junit.Assert.assertEquals;
1:157bca3: 
1:a8d3dbd: import java.util.Collection;
1:a8d3dbd: import java.util.List;
1:157bca3: import java.util.Random;
1:a8d3dbd: 
1:a8d3dbd: import org.apache.mahout.math.function.DoubleDoubleFunction;
1:a8d3dbd: import org.apache.mahout.math.function.Functions;
1:a8d3dbd: import org.junit.Test;
1:a8d3dbd: import org.junit.runner.RunWith;
1:a8d3dbd: import org.junit.runners.Parameterized;
1:a8d3dbd: 
1:157bca3: import com.google.common.collect.ImmutableSet;
1:157bca3: import com.google.common.collect.Lists;
1:157bca3: import com.google.common.collect.Sets;
1:a8d3dbd: 
1:a8d3dbd: @RunWith(Parameterized.class)
1:a8d3dbd: public final class VectorBinaryAggregateTest {
1:157bca3:   private static final int CARDINALITY = 1000;
1:a8d3dbd: 
1:157bca3:   private final DoubleDoubleFunction aggregator;
1:157bca3:   private final DoubleDoubleFunction combiner;
1:157bca3:   private final VectorBinaryAggregate operation;
1:157bca3:   private final Vector first;
1:157bca3:   private final Vector second;
1:157bca3: 
1:157bca3:   Random r = new Random();
1:a8d3dbd: 
1:a8d3dbd:   @SuppressWarnings("unchecked")
1:a8d3dbd:   @Parameterized.Parameters
1:a8d3dbd:   public static Collection<Object[]> generateData() {
1:a8d3dbd:     List<Object[]> data = Lists.newArrayList();
1:157bca3:     for (List<?> entry : Sets.cartesianProduct(Lists.newArrayList(
1:a8d3dbd:         ImmutableSet.of(Functions.PLUS, Functions.PLUS_ABS, Functions.MAX),
1:a8d3dbd:         ImmutableSet.of(Functions.PLUS, Functions.PLUS_ABS, Functions.MULT, Functions.MULT_RIGHT_PLUS1,
1:a8d3dbd:             Functions.MINUS),
1:157bca3:         ImmutableSet.copyOf(VectorBinaryAggregate.OPERATIONS),
1:157bca3:         ImmutableSet.of(new SequentialAccessSparseVector(CARDINALITY),
1:157bca3:           new RandomAccessSparseVector(CARDINALITY),
1:157bca3:           new DenseVector(CARDINALITY)),
1:157bca3:         ImmutableSet.of(new SequentialAccessSparseVector(CARDINALITY),
1:157bca3:           new RandomAccessSparseVector(CARDINALITY),
1:157bca3:           new DenseVector(CARDINALITY))))) {
1:a8d3dbd:       data.add(entry.toArray());
1:a8d3dbd:     }
1:a8d3dbd:     return data;
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   public VectorBinaryAggregateTest(DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner,
1:157bca3:                                    VectorBinaryAggregate operation, Vector first, Vector second) {
1:a8d3dbd:     this.aggregator = aggregator;
1:a8d3dbd:     this.combiner = combiner;
1:a8d3dbd:     this.operation = operation;
1:157bca3:     this.first = first;
1:157bca3:     this.second = second;
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:157bca3:   public void testSelf() {
1:157bca3:     Vector x = first.like();
1:157bca3:     Vector xBase = new DenseVector(CARDINALITY);
1:157bca3:     List<Double> items = Lists.newArrayList();
1:157bca3:     for (int i = 0; i < x.size(); ++i) {
1:157bca3:       items.add(r.nextDouble());
1:a8d3dbd:     }
1:157bca3: 
1:157bca3:     for (int i = 1; i < x.size(); ++i) {
1:157bca3:       x.setQuick(i, items.get(i));
1:157bca3:       xBase.setQuick(i, items.get(i));
1:157bca3:     }
1:157bca3: 
1:157bca3:     Vector y = second.like().assign(x);
1:157bca3:     Vector yBase = new DenseVector(x);
1:a8d3dbd: 
1:a8d3dbd:     System.out.printf("aggregator %s; combiner %s; operation %s\n", aggregator, combiner, operation);
1:a8d3dbd:     double expectedResult = combiner.apply(0, 0);
2:a8d3dbd:     for (int i = 1; i < x.size(); ++i) {
1:157bca3:       expectedResult = aggregator.apply(expectedResult, combiner.apply(items.get(i), items.get(i)));
1:a8d3dbd:     }
1:a8d3dbd: 
1:a8d3dbd:     double result = operation.aggregate(x, y, aggregator, combiner);
1:157bca3:     double resultBase = operation.aggregate(xBase, yBase, aggregator, combiner);
1:a8d3dbd: 
1:a8d3dbd:     assertEquals(expectedResult, result, 0.0);
1:157bca3:     assertEquals(resultBase, result, 0.0);
1:157bca3:   }
1:157bca3: 
1:157bca3:   @Test
1:157bca3:   public void testSeparate() {
1:157bca3:     List<Double> items1 = Lists.newArrayList();
1:157bca3:     List<Double> items2 = Lists.newArrayList();
1:157bca3:     for (int i = 0; i < CARDINALITY; ++i) {
1:157bca3:       items1.add(r.nextDouble());
1:157bca3:       items2.add(r.nextDouble());
1:157bca3:     }
1:157bca3: 
1:157bca3:     Vector x = first.like();
1:157bca3:     Vector xBase = new DenseVector(CARDINALITY);
1:157bca3:     for (int i = 0; i < x.size(); ++i) {
1:157bca3:       x.setQuick(i, items1.get(i));
1:157bca3:       xBase.setQuick(i, items1.get(i));
1:157bca3:     }
1:157bca3: 
1:157bca3:     Vector y = second.like();
1:157bca3:     Vector yBase = new DenseVector(CARDINALITY);
1:157bca3:     for (int i = 0; i < y.size(); ++i) {
1:157bca3:       y.setQuick(i, items2.get(i));
1:157bca3:       yBase.setQuick(i, items2.get(i));
1:157bca3:     }
1:157bca3: 
1:157bca3: 
1:157bca3:     System.out.printf("aggregator %s; combiner %s; operation %s\n", aggregator, combiner, operation);
1:157bca3:     double expectedResult = combiner.apply(items1.get(0), items2.get(0));
1:157bca3:     for (int i = 1; i < x.size(); ++i) {
1:157bca3:       expectedResult = aggregator.apply(expectedResult, combiner.apply(items1.get(i), items2.get(i)));
1:157bca3:     }
1:157bca3: 
1:157bca3:     double result = operation.aggregate(x, y, aggregator, combiner);
1:157bca3:     double resultBase = operation.aggregate(xBase, yBase, aggregator, combiner);
1:a8d3dbd: 
1:157bca3:     assertEquals(expectedResult, result, 0.0);
1:157bca3:     assertEquals(resultBase, result, 0.0);
1:a8d3dbd:   }
1:a8d3dbd: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:f7d1c10
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: Vpackage org.apache.mahout.math;
author:Robin Anil
-------------------------------------------------------------------------------
commit:157bca3
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Random;
1: import com.google.common.collect.ImmutableSet;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Sets;
1:   private static final int CARDINALITY = 1000;
1:   private final DoubleDoubleFunction aggregator;
1:   private final DoubleDoubleFunction combiner;
1:   private final VectorBinaryAggregate operation;
1:   private final Vector first;
1:   private final Vector second;
1: 
1:   Random r = new Random();
1:     for (List<?> entry : Sets.cartesianProduct(Lists.newArrayList(
1:         ImmutableSet.copyOf(VectorBinaryAggregate.OPERATIONS),
1:         ImmutableSet.of(new SequentialAccessSparseVector(CARDINALITY),
1:           new RandomAccessSparseVector(CARDINALITY),
1:           new DenseVector(CARDINALITY)),
1:         ImmutableSet.of(new SequentialAccessSparseVector(CARDINALITY),
1:           new RandomAccessSparseVector(CARDINALITY),
1:           new DenseVector(CARDINALITY))))) {
1:                                    VectorBinaryAggregate operation, Vector first, Vector second) {
1:     this.first = first;
1:     this.second = second;
1:   public void testSelf() {
1:     Vector x = first.like();
1:     Vector xBase = new DenseVector(CARDINALITY);
1:     List<Double> items = Lists.newArrayList();
1:     for (int i = 0; i < x.size(); ++i) {
1:       items.add(r.nextDouble());
1: 
1:     for (int i = 1; i < x.size(); ++i) {
1:       x.setQuick(i, items.get(i));
1:       xBase.setQuick(i, items.get(i));
1:     }
1: 
1:     Vector y = second.like().assign(x);
1:     Vector yBase = new DenseVector(x);
1:       expectedResult = aggregator.apply(expectedResult, combiner.apply(items.get(i), items.get(i)));
1:     double resultBase = operation.aggregate(xBase, yBase, aggregator, combiner);
1:     assertEquals(resultBase, result, 0.0);
1:   }
1:   @Test
1:   public void testSeparate() {
1:     List<Double> items1 = Lists.newArrayList();
1:     List<Double> items2 = Lists.newArrayList();
1:     for (int i = 0; i < CARDINALITY; ++i) {
1:       items1.add(r.nextDouble());
1:       items2.add(r.nextDouble());
1:     }
1: 
1:     Vector x = first.like();
1:     Vector xBase = new DenseVector(CARDINALITY);
1:     for (int i = 0; i < x.size(); ++i) {
1:       x.setQuick(i, items1.get(i));
1:       xBase.setQuick(i, items1.get(i));
1:     }
1: 
1:     Vector y = second.like();
1:     Vector yBase = new DenseVector(CARDINALITY);
1:     for (int i = 0; i < y.size(); ++i) {
1:       y.setQuick(i, items2.get(i));
1:       yBase.setQuick(i, items2.get(i));
1:     }
1: 
1: 
1:     System.out.printf("aggregator %s; combiner %s; operation %s\n", aggregator, combiner, operation);
1:     double expectedResult = combiner.apply(items1.get(0), items2.get(0));
1:     for (int i = 1; i < x.size(); ++i) {
1:       expectedResult = aggregator.apply(expectedResult, combiner.apply(items1.get(i), items2.get(i)));
1:     }
1: 
1:     double result = operation.aggregate(x, y, aggregator, combiner);
1:     double resultBase = operation.aggregate(xBase, yBase, aggregator, combiner);
1: 
1:     assertEquals(expectedResult, result, 0.0);
1:     assertEquals(resultBase, result, 0.0);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
0:         ImmutableSet.copyOf(VectorBinaryAggregate.OPERATIONS)))) {
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: 
0: import com.google.common.collect.ImmutableSet;
0: import com.google.common.collect.Lists;
0: import com.google.common.collect.Sets;
1: import org.apache.mahout.math.function.DoubleDoubleFunction;
1: import org.apache.mahout.math.function.Functions;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: @RunWith(Parameterized.class)
1: public final class VectorBinaryAggregateTest {
0:   private static final int CARDINALITY = 10;
1: 
0:   private DoubleDoubleFunction aggregator;
0:   private DoubleDoubleFunction combiner;
0:   private VectorBinaryAggregate operation;
1: 
1:   @SuppressWarnings("unchecked")
1:   @Parameterized.Parameters
1:   public static Collection<Object[]> generateData() {
1:     List<Object[]> data = Lists.newArrayList();
0:     for (List entry : Sets.cartesianProduct(Lists.newArrayList(
1:         ImmutableSet.of(Functions.PLUS, Functions.PLUS_ABS, Functions.MAX),
1:         ImmutableSet.of(Functions.PLUS, Functions.PLUS_ABS, Functions.MULT, Functions.MULT_RIGHT_PLUS1,
1:             Functions.MINUS),
0:         ImmutableSet.copyOf(VectorBinaryAggregate.operations)))) {
1:       data.add(entry.toArray());
1:     }
1:     return data;
1:   }
1: 
1:   public VectorBinaryAggregateTest(DoubleDoubleFunction aggregator, DoubleDoubleFunction combiner,
0:                                    VectorBinaryAggregate operation) {
1:     this.aggregator = aggregator;
1:     this.combiner = combiner;
1:     this.operation = operation;
1:   }
1: 
1:   @Test
0:   public void testAll() {
0:     SequentialAccessSparseVector x = new SequentialAccessSparseVector(CARDINALITY);
1:     for (int i = 1; i < x.size(); ++i) {
0:       x.setQuick(i, i);
1:     }
0:     SequentialAccessSparseVector y = new SequentialAccessSparseVector(x);
1: 
1:     System.out.printf("aggregator %s; combiner %s; operation %s\n", aggregator, combiner, operation);
1:     double expectedResult = combiner.apply(0, 0);
1:     for (int i = 1; i < x.size(); ++i) {
0:       expectedResult = aggregator.apply(expectedResult, combiner.apply(i, i));
1:     }
1: 
1:     double result = operation.aggregate(x, y, aggregator, combiner);
1: 
1:     assertEquals(expectedResult, result, 0.0);
1: 
1:   }
1: }
============================================================================