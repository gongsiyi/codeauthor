1:d25dd20: /**
1:d25dd20:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d25dd20:  * contributor license agreements.  See the NOTICE file distributed with
1:d25dd20:  * this work for additional information regarding copyright ownership.
1:d25dd20:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d25dd20:  * (the "License"); you may not use this file except in compliance with
1:d25dd20:  * the License.  You may obtain a copy of the License at
1:d25dd20:  *
1:d25dd20:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d25dd20:  *
1:d25dd20:  * Unless required by applicable law or agreed to in writing, software
1:d25dd20:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d25dd20:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d25dd20:  * See the License for the specific language governing permissions and
1:d25dd20:  * limitations under the License.
1:d25dd20:  */
1:d25dd20: 
1:d25dd20: package org.apache.mahout.cf.taste.example.kddcup.track2;
1:d25dd20: 
1:d25dd20: import java.util.regex.Pattern;
1:d25dd20: 
1:d25dd20: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:d25dd20: 
1:d25dd20: final class TrackData {
1:d25dd20: 
1:d25dd20:   private static final Pattern PIPE = Pattern.compile("\\|");
1:d25dd20:   private static final String NO_VALUE = "None";
1:d25dd20:   static final long NO_VALUE_ID = Long.MIN_VALUE;
1:d25dd20:   private static final FastIDSet NO_GENRES = new FastIDSet();
1:d25dd20: 
1:d25dd20:   private final long trackID;
1:d25dd20:   private final long albumID;
1:d25dd20:   private final long artistID;
1:d25dd20:   private final FastIDSet genreIDs;
1:d25dd20: 
1:d25dd20:   TrackData(CharSequence line) {
1:d25dd20:     String[] tokens = PIPE.split(line);
1:d25dd20:     trackID = Long.parseLong(tokens[0]);
1:d25dd20:     albumID = parse(tokens[1]);
1:d25dd20:     artistID = parse(tokens[2]);
1:d25dd20:     if (tokens.length > 3) {
1:d25dd20:       genreIDs = new FastIDSet(tokens.length - 3);
1:d25dd20:       for (int i = 3; i < tokens.length; i++) {
1:d25dd20:         genreIDs.add(Long.parseLong(tokens[i]));
1:d25dd20:       }
1:d25dd20:     } else {
1:d25dd20:       genreIDs = NO_GENRES;
1:d25dd20:     }
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   private static long parse(String value) {
1:d25dd20:     return NO_VALUE.equals(value) ? NO_VALUE_ID : Long.parseLong(value);
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   public long getTrackID() {
1:d25dd20:     return trackID;
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   public long getAlbumID() {
1:d25dd20:     return albumID;
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   public long getArtistID() {
1:d25dd20:     return artistID;
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   public FastIDSet getGenreIDs() {
1:d25dd20:     return genreIDs;
1:d25dd20:   }
1:d25dd20: 
1:d25dd20: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d25dd20
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track2;
1: 
1: import java.util.regex.Pattern;
1: 
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: 
1: final class TrackData {
1: 
1:   private static final Pattern PIPE = Pattern.compile("\\|");
1:   private static final String NO_VALUE = "None";
1:   static final long NO_VALUE_ID = Long.MIN_VALUE;
1:   private static final FastIDSet NO_GENRES = new FastIDSet();
1: 
1:   private final long trackID;
1:   private final long albumID;
1:   private final long artistID;
1:   private final FastIDSet genreIDs;
1: 
1:   TrackData(CharSequence line) {
1:     String[] tokens = PIPE.split(line);
1:     trackID = Long.parseLong(tokens[0]);
1:     albumID = parse(tokens[1]);
1:     artistID = parse(tokens[2]);
1:     if (tokens.length > 3) {
1:       genreIDs = new FastIDSet(tokens.length - 3);
1:       for (int i = 3; i < tokens.length; i++) {
1:         genreIDs.add(Long.parseLong(tokens[i]));
1:       }
1:     } else {
1:       genreIDs = NO_GENRES;
1:     }
1:   }
1: 
1:   private static long parse(String value) {
1:     return NO_VALUE.equals(value) ? NO_VALUE_ID : Long.parseLong(value);
1:   }
1: 
1:   public long getTrackID() {
1:     return trackID;
1:   }
1: 
1:   public long getAlbumID() {
1:     return albumID;
1:   }
1: 
1:   public long getArtistID() {
1:     return artistID;
1:   }
1: 
1:   public FastIDSet getGenreIDs() {
1:     return genreIDs;
1:   }
1: 
1: }
============================================================================