1:5a58194: /**
1:5a58194:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a58194:  * contributor license agreements.  See the NOTICE file distributed with
1:5a58194:  * this work for additional information regarding copyright ownership.
1:5a58194:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a58194:  * (the "License"); you may not use this file except in compliance with
1:5a58194:  * the License.  You may obtain a copy of the License at
1:5a58194:  *
1:5a58194:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a58194:  *
1:5a58194:  * Unless required by applicable law or agreed to in writing, software
1:5a58194:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a58194:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a58194:  * See the License for the specific language governing permissions and
1:5a58194:  * limitations under the License.
1:5a58194:  */
3:5a58194: 
1:5a58194: package org.apache.mahout.common.iterator;
1:5a58194: 
1:a13b4b7: import java.util.Collections;
1:5a58194: import java.util.Iterator;
1:5a58194: import java.util.Arrays;
1:a13b4b7: import java.util.List;
1:5a58194: 
1:434cdff: import org.apache.mahout.common.MahoutTestCase;
1:ff79ff4: import org.junit.Test;
1:5a58194: 
1:434cdff: public abstract class SamplerCase extends MahoutTestCase {
1:5a58194:   // these provide access to the underlying implementation
1:a13b4b7:   protected abstract Iterator<Integer> createSampler(int n, Iterator<Integer> source);
1:5a58194: 
1:5a58194:   protected abstract boolean isSorted();
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testEmptyCase() {
1:80366ee:     assertFalse(createSampler(100, new CountingIterator(0)).hasNext());
2:5a58194:   }
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testSmallInput() {
1:80366ee:     Iterator<Integer> t = createSampler(10, new CountingIterator(1));
1:5a58194:     assertTrue(t.hasNext());
1:5a58194:     assertEquals(0, t.next().intValue());
1:5a58194:     assertFalse(t.hasNext());
1:5a58194: 
1:80366ee:     t = createSampler(10, new CountingIterator(1));
1:5a58194:     assertTrue(t.hasNext());
1:5a58194:     assertEquals(0, t.next().intValue());
1:5a58194:     assertFalse(t.hasNext());
1:5a58194:   }
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testAbsurdSize() {
1:80366ee:     Iterator<Integer> t = createSampler(0, new CountingIterator(2));
1:5a58194:     assertFalse(t.hasNext());
1:5a58194:   }
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testExactSizeMatch() {
1:80366ee:     Iterator<Integer> t = createSampler(10, new CountingIterator(10));
1:5a58194:     for (int i = 0; i < 10; i++) {
1:5a58194:       assertTrue(t.hasNext());
1:5a58194:       assertEquals(i, t.next().intValue());
1:5a58194:     }
1:5a58194:     assertFalse(t.hasNext());
1:5a58194:   }
1:5a58194: 
1:ff79ff4:   @Test
1:5a58194:   public void testSample() {
1:80366ee:     Iterator<Integer> source = new CountingIterator(100);
1:a13b4b7:     Iterator<Integer> t = createSampler(15, source);
1:5a58194: 
1:5a58194:     // this is just a regression test, not a real test
1:2deba36:     List<Integer> expectedValues = Arrays.asList(52,28,2,60,50,32,65,79,78,9,40,33,96,25,48);
1:a13b4b7:     if (isSorted()) {
1:a13b4b7:       Collections.sort(expectedValues);
1:a13b4b7:     }
1:a13b4b7:     Iterator<Integer> expected = expectedValues.iterator();
1:a13b4b7:     int last = Integer.MIN_VALUE;
1:5a58194:     for (int i = 0; i < 15; i++) {
1:5a58194:       assertTrue(t.hasNext());
1:5a58194:       int actual = t.next();
1:a13b4b7:       if (isSorted()) {
1:a13b4b7:         assertTrue(actual >= last);
1:a13b4b7:         last = actual;
1:a13b4b7:       } else {
1:a13b4b7:         // any of the first few values should be in the original places
1:a13b4b7:         if (actual < 15) {
1:a13b4b7:           assertEquals(i, actual);
1:a13b4b7:         }
1:5a58194:       }
1:a13b4b7: 
1:5a58194:       assertTrue(actual >= 0 && actual < 100);
1:5a58194: 
1:5a58194:       // this is just a regression test, but still of some value
1:5a58194:       assertEquals(expected.next().intValue(), actual);
1:5a58194:       assertFalse(source.hasNext());
1:5a58194:     }
1:5a58194:     assertFalse(t.hasNext());
1:5a58194:   }
1:5a58194: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2deba36
/////////////////////////////////////////////////////////////////////////
1:     List<Integer> expectedValues = Arrays.asList(52,28,2,60,50,32,65,79,78,9,40,33,96,25,48);
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1:     assertFalse(createSampler(100, new CountingIterator(0)).hasNext());
1:     Iterator<Integer> t = createSampler(10, new CountingIterator(1));
1:     t = createSampler(10, new CountingIterator(1));
/////////////////////////////////////////////////////////////////////////
1:     Iterator<Integer> t = createSampler(0, new CountingIterator(2));
1:     Iterator<Integer> t = createSampler(10, new CountingIterator(10));
/////////////////////////////////////////////////////////////////////////
1:     Iterator<Integer> source = new CountingIterator(100);
0:     List<Integer> expectedValues = Arrays.asList(83, 56, 69, 96, 4, 59, 70, 7, 93, 52, 39, 11, 16, 67, 26);
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.List;
1:   protected abstract Iterator<Integer> createSampler(int n, Iterator<Integer> source);
/////////////////////////////////////////////////////////////////////////
0:     Iterator<Integer> t = createSampler(10, Integers.iterator(1));
/////////////////////////////////////////////////////////////////////////
0:     Iterator<Integer> t = createSampler(0, Integers.iterator(2));
0:     Iterator<Integer> t = createSampler(10, Integers.iterator(10));
/////////////////////////////////////////////////////////////////////////
1:     Iterator<Integer> t = createSampler(15, source);
0:     List<Integer> expectedValues = Arrays.asList(16, 23, 2, 3, 32, 85, 6, 53, 8, 75, 15, 81, 12, 59, 14);
1:     if (isSorted()) {
1:       Collections.sort(expectedValues);
1:     }
1:     Iterator<Integer> expected = expectedValues.iterator();
1:     int last = Integer.MIN_VALUE;
1:       if (isSorted()) {
1:         assertTrue(actual >= last);
1:         last = actual;
1:       } else {
1:         // any of the first few values should be in the original places
1:         if (actual < 15) {
1:           assertEquals(i, actual);
1:         }
1: 
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
commit:d911fce
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:434cdff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
1: public abstract class SamplerCase extends MahoutTestCase {
commit:c40fd07
/////////////////////////////////////////////////////////////////////////
0:     super.setUp();
commit:5a58194
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator;
1: 
0: import junit.framework.TestCase;
1: 
1: import java.util.Iterator;
1: import java.util.Arrays;
1: 
0: import org.apache.mahout.common.RandomUtils;
1: 
0: public abstract class SamplerCase extends TestCase {
1:   // these provide access to the underlying implementation
0:   protected abstract DelegatingIterator<Integer> createSampler(int n, Iterator<Integer> source);
1: 
1:   protected abstract boolean isSorted();
1: 
0:   @Override
0:   protected void setUp() throws Exception {
0:     RandomUtils.useTestSeed();
1:   }
1: 
1:   public void testEmptyCase() {
0:     assertFalse(createSampler(100, Integers.iterator(0)).hasNext());
1:   }
1: 
1:   public void testSmallInput() {
0:     DelegatingIterator<Integer> t = createSampler(10, Integers.iterator(1));
1:     assertTrue(t.hasNext());
1:     assertEquals(0, t.next().intValue());
1:     assertFalse(t.hasNext());
1: 
0:     t = createSampler(10, Integers.iterator(1));
1:     assertTrue(t.hasNext());
1:     assertEquals(0, t.next().intValue());
1:     assertFalse(t.hasNext());
1:   }
1: 
1:   public void testAbsurdSize() {
0:     DelegatingIterator<Integer> t = createSampler(0, Integers.iterator(2));
1:     assertFalse(t.hasNext());
1:   }
1: 
1:   public void testExactSizeMatch() {
0:     DelegatingIterator<Integer> t = createSampler(10, Integers.iterator(10));
1:     for (int i = 0; i < 10; i++) {
1:       assertTrue(t.hasNext());
1:       assertEquals(i, t.next().intValue());
1:     }
1:     assertFalse(t.hasNext());
1:   }
1: 
1:   public void testSample() {
0:     Iterator<Integer> source = Integers.iterator(100);
0:     DelegatingIterator<Integer> t = createSampler(15, source);
1: 
1:     // this is just a regression test, not a real test
0:     Iterator<Integer> expected = Arrays.asList(16, 23, 2, 3, 32, 85, 6, 53, 8, 75, 15, 81, 12, 59, 14).iterator();
1:     for (int i = 0; i < 15; i++) {
1:       assertTrue(t.hasNext());
1:       int actual = t.next();
0:       // any of the first few values should be in the original places
0:       if (actual < 15) {
0:         assertEquals(i, actual);
1:       }
1:       assertTrue(actual >= 0 && actual < 100);
1: 
1:       // this is just a regression test, but still of some value
1:       assertEquals(expected.next().intValue(), actual);
1:       assertFalse(source.hasNext());
1:     }
1:     assertFalse(t.hasNext());
1:   }
1: }
============================================================================