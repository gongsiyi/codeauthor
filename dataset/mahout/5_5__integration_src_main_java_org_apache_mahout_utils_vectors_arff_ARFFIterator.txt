1:80366ee: /**
1:80366ee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:80366ee:  * contributor license agreements.  See the NOTICE file distributed with
1:80366ee:  * this work for additional information regarding copyright ownership.
1:80366ee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:80366ee:  * (the "License"); you may not use this file except in compliance with
1:80366ee:  * the License.  You may obtain a copy of the License at
1:80366ee:  *
1:80366ee:  *     http://www.apache.org/licenses/LICENSE-2.0
1:80366ee:  *
1:80366ee:  * Unless required by applicable law or agreed to in writing, software
1:80366ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:80366ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80366ee:  * See the License for the specific language governing permissions and
1:80366ee:  * limitations under the License.
1:80366ee:  */
1:80366ee: 
1:80366ee: package org.apache.mahout.utils.vectors.arff;
1:80366ee: 
1:80366ee: import java.io.BufferedReader;
1:80366ee: import java.io.IOException;
1:85f9ece: import java.util.ArrayList;
1:85f9ece: import java.util.List;
1:304fb0f: import java.util.regex.Matcher;
1:80366ee: import java.util.regex.Pattern;
1:80366ee: 
1:80366ee: import com.google.common.collect.AbstractIterator;
1:74f849b: import com.google.common.io.Closeables;
1:80366ee: import org.apache.mahout.math.DenseVector;
1:80366ee: import org.apache.mahout.math.RandomAccessSparseVector;
1:80366ee: import org.apache.mahout.math.Vector;
1:80366ee: 
1:80366ee: final class ARFFIterator extends AbstractIterator<Vector> {
1:80366ee: 
1:baa3a8c:   // This pattern will make sure a , inside a string is not a point for split.
1:baa3a8c:   // Ex: "Arizona" , "0:08 PM, PDT" , 110 will be split considering "0:08 PM, PDT" as one string
1:c9a7947:   private static final Pattern WORDS_WITHOUT_SPARSE = Pattern.compile("([\\w[^{]])*");
1:304fb0f:   private static final Pattern DATA_PATTERN = Pattern.compile("^\\"+ARFFModel.ARFF_SPARSE+"(.*)\\"+ARFFModel.ARFF_SPARSE_END+"$");
1:80366ee: 
1:80366ee:   private final BufferedReader reader;
1:80366ee:   private final ARFFModel model;
1:80366ee: 
1:80366ee:   ARFFIterator(BufferedReader reader, ARFFModel model) {
1:80366ee:     this.reader = reader;
1:80366ee:     this.model = model;
1:80366ee:   }
1:80366ee: 
1:80366ee:   @Override
1:80366ee:   protected Vector computeNext() {
1:80366ee:     String line;
1:80366ee:     try {
1:80366ee:       while ((line = reader.readLine()) != null) {
1:80366ee:         line = line.trim();
1:4fbfbc6:         if (!line.isEmpty() && !line.startsWith(ARFFModel.ARFF_COMMENT)) {
1:80366ee:           break;
1:80366ee:         }
1:80366ee:       }
1:80366ee:     } catch (IOException ioe) {
1:80366ee:       throw new IllegalStateException(ioe);
1:80366ee:     }
1:80366ee:     if (line == null) {
1:31cb292:       try {
1:31cb292:         Closeables.close(reader, true);
1:31cb292:       } catch (IOException e) {
1:31cb292:         throw new IllegalStateException(e);
1:31cb292:       }
1:80366ee:       return endOfData();
1:80366ee:     }
1:80366ee:     Vector result;
1:304fb0f:     Matcher contents = DATA_PATTERN.matcher(line);
1:304fb0f:     if (contents.find()) {
1:304fb0f:       line = contents.group(1);
1:304fb0f:       String[] splits = splitCSV(line);
1:80366ee:       result = new RandomAccessSparseVector(model.getLabelSize());
1:80366ee:       for (String split : splits) {
1:baa3a8c:         int idIndex = split.indexOf(' ');
1:baa3a8c:         int idx = Integer.parseInt(split.substring(0, idIndex).trim());
1:baa3a8c:         String data = split.substring(idIndex).trim();
1:c9a7947:         if (!"?".equals(data)) {
1:c9a7947:           result.setQuick(idx, model.getValue(data, idx));
1:c9a7947:         }
1:80366ee:       }
1:80366ee:     } else {
1:80366ee:       result = new DenseVector(model.getLabelSize());
1:304fb0f:       String[] splits = splitCSV(line);
1:80366ee:       for (int i = 0; i < splits.length; i++) {
1:c9a7947:         String split = splits[i];
1:c9a7947:         split = split.trim();
1:c9a7947:         if (WORDS_WITHOUT_SPARSE.matcher(split).matches() && !"?".equals(split)) {
1:c9a7947:           result.setQuick(i, model.getValue(split, i));
1:c9a7947:         }
1:80366ee:       }
1:80366ee:     }
1:80366ee:     return result;
1:80366ee:   }
1:80366ee: 
1:304fb0f:   /**
1:304fb0f:    * Splits a string by comma, ignores commas inside quotes and escaped quotes.
1:304fb0f:    * As quotes are both double and single possible, because there is no exact definition
1:304fb0f:    * for ARFF files
1:304fb0f:    * @param line -
1:304fb0f:    * @return String[]
1:304fb0f:    */
1:304fb0f:   public static String[] splitCSV(String line) {
1:304fb0f:     StringBuilder sb = new StringBuilder(128);
1:85f9ece:     List<String> tokens = new ArrayList<>();
1:304fb0f:     char escapeChar = '\0';
1:304fb0f:     for (int i = 0; i < line.length(); i++) {
1:304fb0f:       char c = line.charAt(i);
1:304fb0f:       if (c == '\\') {
1:304fb0f:         i++;
1:304fb0f:         sb.append(line.charAt(i));
1:304fb0f:       }
1:304fb0f:       else if (c == '"' || c == '\'') {
1:304fb0f:         // token is closed
1:304fb0f:         if (c == escapeChar) {
1:304fb0f:           escapeChar = '\0';
1:304fb0f:         }
1:304fb0f:         else if (escapeChar == '\0') {
1:304fb0f:           escapeChar = c;
1:304fb0f:         }
1:304fb0f:         sb.append(c);
1:304fb0f:       }
1:304fb0f:       else if (c == ',') {
1:304fb0f:         if (escapeChar == '\0') {
1:304fb0f:           tokens.add(sb.toString().trim());
1:304fb0f:           sb.setLength(0); // start work on next token
1:304fb0f:         }
1:304fb0f:         else {
1:304fb0f:           sb.append(c);
1:304fb0f:         }
1:304fb0f:       }
1:304fb0f:       else {
1:304fb0f:         sb.append(c);
1:304fb0f:       }
1:304fb0f:     }
1:304fb0f:     if (sb.length() > 0) {
1:304fb0f:       tokens.add(sb.toString().trim());
1:304fb0f:     }
1:304fb0f: 
1:304fb0f:     return tokens.toArray(new String[tokens.size()]);
1:304fb0f:   }
1:304fb0f: 
1:80366ee: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     List<String> tokens = new ArrayList<>();
author:smarthi
-------------------------------------------------------------------------------
commit:304fb0f
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Matcher;
0: import java.util.List;
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:   private static final Pattern DATA_PATTERN = Pattern.compile("^\\"+ARFFModel.ARFF_SPARSE+"(.*)\\"+ARFFModel.ARFF_SPARSE_END+"$");
/////////////////////////////////////////////////////////////////////////
1:     Matcher contents = DATA_PATTERN.matcher(line);
1:     if (contents.find()) {
1:       line = contents.group(1);
1:       String[] splits = splitCSV(line);
/////////////////////////////////////////////////////////////////////////
1:       String[] splits = splitCSV(line);
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Splits a string by comma, ignores commas inside quotes and escaped quotes.
1:    * As quotes are both double and single possible, because there is no exact definition
1:    * for ARFF files
1:    * @param line -
1:    * @return String[]
1:    */
1:   public static String[] splitCSV(String line) {
1:     StringBuilder sb = new StringBuilder(128);
0:     List<String> tokens = Lists.newArrayList();
1:     char escapeChar = '\0';
1:     for (int i = 0; i < line.length(); i++) {
1:       char c = line.charAt(i);
1:       if (c == '\\') {
1:         i++;
1:         sb.append(line.charAt(i));
1:       }
1:       else if (c == '"' || c == '\'') {
1:         // token is closed
1:         if (c == escapeChar) {
1:           escapeChar = '\0';
1:         }
1:         else if (escapeChar == '\0') {
1:           escapeChar = c;
1:         }
1:         sb.append(c);
1:       }
1:       else if (c == ',') {
1:         if (escapeChar == '\0') {
1:           tokens.add(sb.toString().trim());
1:           sb.setLength(0); // start work on next token
1:         }
1:         else {
1:           sb.append(c);
1:         }
1:       }
1:       else {
1:         sb.append(c);
1:       }
1:     }
1:     if (sb.length() > 0) {
1:       tokens.add(sb.toString().trim());
1:     }
1: 
1:     return tokens.toArray(new String[tokens.size()]);
1:   }
1: 
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
1:       try {
1:         Closeables.close(reader, true);
1:       } catch (IOException e) {
1:         throw new IllegalStateException(e);
1:       }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:c9a7947
/////////////////////////////////////////////////////////////////////////
1:   private static final Pattern WORDS_WITHOUT_SPARSE = Pattern.compile("([\\w[^{]])*");
/////////////////////////////////////////////////////////////////////////
0:       line = line.substring(1, line.indexOf(ARFFModel.ARFF_SPARSE_END));
/////////////////////////////////////////////////////////////////////////
1:         if (!"?".equals(data)) {
1:           result.setQuick(idx, model.getValue(data, idx));
1:         }
1:         String split = splits[i];
1:         split = split.trim();
1:         if (WORDS_WITHOUT_SPARSE.matcher(split).matches() && !"?".equals(split)) {
1:           result.setQuick(i, model.getValue(split, i));
1:         }
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:         if (!line.isEmpty() && !line.startsWith(ARFFModel.ARFF_COMMENT)) {
commit:baa3a8c
/////////////////////////////////////////////////////////////////////////
1:   // This pattern will make sure a , inside a string is not a point for split.
1:   // Ex: "Arizona" , "0:08 PM, PDT" , 110 will be split considering "0:08 PM, PDT" as one string
0:   private static final Pattern COMMA_PATTERN = Pattern.compile(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)");
/////////////////////////////////////////////////////////////////////////
0:         split = split.trim();
1:         int idIndex = split.indexOf(' ');
1:         int idx = Integer.parseInt(split.substring(0, idIndex).trim());
1:         String data = split.substring(idIndex).trim();
0:         result.setQuick(idx, model.getValue(data, idx));
commit:50fd693
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.utils.vectors.arff;
1: 
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.util.regex.Pattern;
1: 
1: import com.google.common.collect.AbstractIterator;
0: import org.apache.mahout.common.IOUtils;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: 
1: final class ARFFIterator extends AbstractIterator<Vector> {
1: 
0:   private static final Pattern COMMA_PATTERN = Pattern.compile(",");
0:   private static final Pattern SPACE_PATTERN = Pattern.compile(" ");
1: 
1:   private final BufferedReader reader;
1:   private final ARFFModel model;
1: 
1:   ARFFIterator(BufferedReader reader, ARFFModel model) {
1:     this.reader = reader;
1:     this.model = model;
1:   }
1: 
1:   @Override
1:   protected Vector computeNext() {
1:     String line;
1:     try {
1:       while ((line = reader.readLine()) != null) {
1:         line = line.trim();
0:         if (line.length() > 0 && !line.startsWith(ARFFModel.ARFF_COMMENT)) {
1:           break;
1:         }
1:       }
1:     } catch (IOException ioe) {
1:       throw new IllegalStateException(ioe);
1:     }
1:     if (line == null) {
0:       IOUtils.quietClose(reader);
1:       return endOfData();
1:     }
1:     Vector result;
0:     if (line.startsWith(ARFFModel.ARFF_SPARSE)) {
0:       line = line.substring(1, line.length() - 1);
0:       String[] splits = COMMA_PATTERN.split(line);
1:       result = new RandomAccessSparseVector(model.getLabelSize());
1:       for (String split : splits) {
0:         String[] data = SPACE_PATTERN.split(split); // first is index, second is
0:         int idx = Integer.parseInt(data[0]);
0:         result.setQuick(idx, model.getValue(data[1], idx));
1:       }
1:     } else {
1:       result = new DenseVector(model.getLabelSize());
0:       String[] splits = COMMA_PATTERN.split(line);
1:       for (int i = 0; i < splits.length; i++) {
0:         result.setQuick(i, model.getValue(splits[i], i));
1:       }
1:     }
0:     //result.setLabelBindings(labelBindings);
1:     return result;
1:   }
1: 
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:346c98c
/////////////////////////////////////////////////////////////////////////
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:       Closeables.closeQuietly(reader);
============================================================================