1:e3fb0c4: /**
1:e3fb0c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e3fb0c4:  * contributor license agreements.  See the NOTICE file distributed with
1:e3fb0c4:  * this work for additional information regarding copyright ownership.
1:e3fb0c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e3fb0c4:  * (the "License"); you may not use this file except in compliance with
1:e3fb0c4:  * the License.  You may obtain a copy of the License at
1:e3fb0c4:  *
1:e3fb0c4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e3fb0c4:  *
1:e3fb0c4:  * Unless required by applicable law or agreed to in writing, software
1:e3fb0c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e3fb0c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e3fb0c4:  * See the License for the specific language governing permissions and
1:e3fb0c4:  * limitations under the License.
1:e3fb0c4:  */
19:e3fb0c4: 
1:e3fb0c4: package org.apache.mahout.classifier.naivebayes.training;
1:e3fb0c4: 
1:e3fb0c4: import org.apache.hadoop.io.IntWritable;
1:d8d721a: import org.apache.hadoop.io.Text;
1:d8d721a: import org.apache.hadoop.mapreduce.Counter;
1:e3fb0c4: import org.apache.hadoop.mapreduce.Mapper;
1:e3fb0c4: import org.apache.mahout.common.MahoutTestCase;
1:e3fb0c4: import org.apache.mahout.math.DenseVector;
1:e3fb0c4: import org.apache.mahout.math.VectorWritable;
1:d8d721a: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1:e3fb0c4: import org.easymock.EasyMock;
1:e3fb0c4: import org.junit.Before;
1:e3fb0c4: import org.junit.Test;
1:e3fb0c4: 
1:e3fb0c4: public class IndexInstancesMapperTest extends MahoutTestCase {
1:d8d721a: 
1:4194a28:   private Mapper.Context ctx;
1:d8d721a:   private OpenObjectIntHashMap<String> labelIndex;
1:d8d721a:   private VectorWritable instance;
1:e3fb0c4: 
1:1499411:   @Override
1:e3fb0c4:   @Before
1:1499411:   public void setUp() throws Exception {
1:e3fb0c4:     super.setUp();
1:1526c5b: 
1:e3fb0c4:     ctx = EasyMock.createMock(Mapper.Context.class);
1:d8d721a:     instance = new VectorWritable(new DenseVector(new double[] { 1, 0, 1, 1, 0 }));
1:d8d721a: 
1:02ff22f:     labelIndex = new OpenObjectIntHashMap<>();
1:d8d721a:     labelIndex.put("bird", 0);
1:d8d721a:     labelIndex.put("cat", 1);
2:e3fb0c4:   }
1:d8d721a: 
1:d8d721a: 
2:e3fb0c4:   @Test
1:e3fb0c4:   public void index() throws Exception {
1:d8d721a: 
1:d8d721a:     ctx.write(new IntWritable(0), instance);
1:d8d721a: 
1:e3fb0c4:     EasyMock.replay(ctx);
1:d8d721a: 
2:e3fb0c4:     IndexInstancesMapper indexInstances = new IndexInstancesMapper();
1:d8d721a:     setField(indexInstances, "labelIndex", labelIndex);
1:d8d721a: 
1:d94eb39:     indexInstances.map(new Text("/bird/"), instance, ctx);
1:d8d721a: 
1:e3fb0c4:     EasyMock.verify(ctx);
1:e3fb0c4:   }
1:d8d721a: 
1:d8d721a:   @Test
1:d8d721a:   public void skip() throws Exception {
1:d8d721a: 
1:d8d721a:     Counter skippedInstances = EasyMock.createMock(Counter.class);
1:d8d721a: 
1:d8d721a:     EasyMock.expect(ctx.getCounter(IndexInstancesMapper.Counter.SKIPPED_INSTANCES)).andReturn(skippedInstances);
1:d8d721a:     skippedInstances.increment(1);
1:d8d721a: 
1:d8d721a:     EasyMock.replay(ctx, skippedInstances);
1:d8d721a: 
1:d8d721a:     IndexInstancesMapper indexInstances = new IndexInstancesMapper();
1:d8d721a:     setField(indexInstances, "labelIndex", labelIndex);
1:d8d721a: 
1:d94eb39:     indexInstances.map(new Text("/fish/"), instance, ctx);
1:d8d721a: 
1:d8d721a:     EasyMock.verify(ctx, skippedInstances);
1:d8d721a:   }
1:d8d721a: 
1:e3fb0c4: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     labelIndex = new OpenObjectIntHashMap<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Robin Anil
-------------------------------------------------------------------------------
commit:d94eb39
/////////////////////////////////////////////////////////////////////////
1:     indexInstances.map(new Text("/bird/"), instance, ctx);
/////////////////////////////////////////////////////////////////////////
1:     indexInstances.map(new Text("/fish/"), instance, ctx);
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Counter;
1: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: 
1:   private OpenObjectIntHashMap<String> labelIndex;
1:   private VectorWritable instance;
/////////////////////////////////////////////////////////////////////////
1:     instance = new VectorWritable(new DenseVector(new double[] { 1, 0, 1, 1, 0 }));
1: 
0:     labelIndex = new OpenObjectIntHashMap<String>();
1:     labelIndex.put("bird", 0);
1:     labelIndex.put("cat", 1);
1: 
1: 
1: 
1:     ctx.write(new IntWritable(0), instance);
1: 
1: 
1:     setField(indexInstances, "labelIndex", labelIndex);
1: 
0:     indexInstances.map(new Text("bird"), instance, ctx);
1: 
1: 
1:   @Test
1:   public void skip() throws Exception {
1: 
1:     Counter skippedInstances = EasyMock.createMock(Counter.class);
1: 
1:     EasyMock.expect(ctx.getCounter(IndexInstancesMapper.Counter.SKIPPED_INSTANCES)).andReturn(skippedInstances);
1:     skippedInstances.increment(1);
1: 
1:     EasyMock.replay(ctx, skippedInstances);
1: 
1:     IndexInstancesMapper indexInstances = new IndexInstancesMapper();
1:     setField(indexInstances, "labelIndex", labelIndex);
1: 
0:     indexInstances.map(new Text("fish"), instance, ctx);
1: 
1:     EasyMock.verify(ctx, skippedInstances);
1:   }
1: 
commit:1526c5b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.MultiLabelVectorWritable;
0: @SuppressWarnings("unchecked")
0:   private static final DenseVector VECTOR = new DenseVector(new double[] { 1, 0, 1, 1, 0 });
0:   private MultiLabelVectorWritable instance;
/////////////////////////////////////////////////////////////////////////
0:     instance = new MultiLabelVectorWritable(VECTOR,
0:       new int[] {0});
1:   
0:     ctx.write(new IntWritable(0), new VectorWritable(VECTOR));
0:     indexInstances.map(new IntWritable(-1), instance, ctx);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:   private Mapper.Context ctx;
0:   private OpenObjectIntHashMap<String> labelIndex;
0:   private VectorWritable instance;
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void setUp() throws Exception {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.naivebayes.training;
1: 
1: import org.apache.hadoop.io.IntWritable;
0: import org.apache.hadoop.io.Text;
0: import org.apache.hadoop.mapreduce.Counter;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.VectorWritable;
0: import org.apache.mahout.math.map.OpenObjectIntHashMap;
1: import org.easymock.EasyMock;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class IndexInstancesMapperTest extends MahoutTestCase {
1: 
0:   Mapper.Context ctx;
0:   OpenObjectIntHashMap<String> labelIndex;
0:   VectorWritable instance;
1: 
1:   @Before
0:   public void setup() throws Exception {
1:     super.setUp();
1: 
1:     ctx = EasyMock.createMock(Mapper.Context.class);
0:     instance = new VectorWritable(new DenseVector(new double[] { 1, 0, 1, 1, 0 }));
1: 
0:     labelIndex = new OpenObjectIntHashMap<String>();
0:     labelIndex.put("bird", 0);
0:     labelIndex.put("cat", 1);
1:   }
1: 
1: 
1:   @Test
1:   public void index() throws Exception {
1: 
0:     ctx.write(new IntWritable(0), instance);
1: 
1:     EasyMock.replay(ctx);
1: 
1:     IndexInstancesMapper indexInstances = new IndexInstancesMapper();
0:     setField(indexInstances, "labelIndex", labelIndex);
1: 
0:     indexInstances.map(new Text("bird"), instance, ctx);
1: 
1:     EasyMock.verify(ctx);
1:   }
1: 
1:   @Test
0:   public void skip() throws Exception {
1: 
0:     Counter skippedInstances = EasyMock.createMock(Counter.class);
1: 
0:     EasyMock.expect(ctx.getCounter(IndexInstancesMapper.Counter.SKIPPED_INSTANCES)).andReturn(skippedInstances);
0:     skippedInstances.increment(1);
1: 
0:     EasyMock.replay(ctx, skippedInstances);
1: 
1:     IndexInstancesMapper indexInstances = new IndexInstancesMapper();
0:     setField(indexInstances, "labelIndex", labelIndex);
1: 
0:     indexInstances.map(new Text("fish"), instance, ctx);
1: 
0:     EasyMock.verify(ctx, skippedInstances);
1:   }
1: 
1: }
============================================================================