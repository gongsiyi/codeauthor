1:5a58194: /**
1:5a58194:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a58194:  * contributor license agreements.  See the NOTICE file distributed with
1:5a58194:  * this work for additional information regarding copyright ownership.
1:5a58194:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a58194:  * (the "License"); you may not use this file except in compliance with
1:5a58194:  * the License.  You may obtain a copy of the License at
1:5a58194:  *
1:5a58194:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5a58194:  *
1:5a58194:  * Unless required by applicable law or agreed to in writing, software
1:5a58194:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a58194:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a58194:  * See the License for the specific language governing permissions and
1:5a58194:  * limitations under the License.
1:5a58194:  */
3:5a58194: 
1:5a58194: package org.apache.mahout.common.iterator;
1:5a58194: 
1:5a58194: import java.util.Iterator;
1:5a58194: import java.util.List;
1:5a58194: import java.util.Random;
1:5a58194: 
1:80366ee: import com.google.common.collect.ForwardingIterator;
1:74f849b: import com.google.common.collect.Lists;
1:5a58194: import org.apache.mahout.common.RandomUtils;
1:5a58194: 
1:5a58194: /**
1:b82d989:  * Sample a fixed number of elements from an Iterator. The results can appear in any order.
1:5a58194:  */
1:80366ee: public final class FixedSizeSamplingIterator<T> extends ForwardingIterator<T> {
1:80366ee: 
1:80366ee:   private final Iterator<T> delegate;
1:5a58194:   
1:5a58194:   public FixedSizeSamplingIterator(int size, Iterator<T> source) {
1:74f849b:     List<T> buf = Lists.newArrayListWithCapacity(size);
1:5a58194:     int sofar = 0;
1:80366ee:     Random random = RandomUtils.getRandom();
1:5a58194:     while (source.hasNext()) {
1:5a58194:       T v = source.next();
1:5a58194:       sofar++;
1:5a58194:       if (buf.size() < size) {
1:5a58194:         buf.add(v);
1:5a58194:       } else {
1:80366ee:         int position = random.nextInt(sofar);
1:5a58194:         if (position < buf.size()) {
1:5a58194:           buf.set(position, v);
2:5a58194:         }
1:5a58194:       }
1:5a58194:     }
1:80366ee:     delegate = buf.iterator();
1:5a58194:   }
1:80366ee: 
1:80366ee:   @Override
1:80366ee:   protected Iterator<T> delegate() {
1:80366ee:     return delegate;
1:80366ee:   }
1:80366ee: 
1:5a58194: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:     List<T> buf = Lists.newArrayListWithCapacity(size);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.ForwardingIterator;
1: public final class FixedSizeSamplingIterator<T> extends ForwardingIterator<T> {
1: 
1:   private final Iterator<T> delegate;
1:     Random random = RandomUtils.getRandom();
1:         int position = random.nextInt(sofar);
1:     delegate = buf.iterator();
1: 
1:   @Override
1:   protected Iterator<T> delegate() {
1:     return delegate;
1:   }
1: 
commit:210fac3
commit:5a58194
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: 
1: import java.util.Iterator;
0: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Random;
1: 
1: /**
0:  * Sample a fixed number of elements from an Iterator.  The results can appear in any order.
1:  */
0: public final class FixedSizeSamplingIterator<T> extends DelegatingIterator<T> {
1: 
1:   public FixedSizeSamplingIterator(int size, Iterator<T> source) {
0:     super(buildDelegate(size, source));
1:   }
1: 
0:   private static <T> Iterator<T> buildDelegate(int size, Iterator<T> source) {
0:     List<T> buf = new ArrayList<T>(size);
1:     int sofar = 0;
1:     while (source.hasNext()) {
1:       T v = source.next();
1:       sofar++;
1:       if (buf.size() < size) {
1:         buf.add(v);
1:       } else {
0:         Random generator = RandomUtils.getRandom();
0:         int position = generator.nextInt(sofar);
1:         if (position < buf.size()) {
1:           buf.set(position, v);
1:         }
1:       }
1:     }
0:     return buf.iterator();
1:   }
1: 
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:b82d989
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
0: import org.apache.mahout.common.RandomUtils;
0: 
1:  * Sample a fixed number of elements from an Iterator. The results can appear in any order.
0:   
0:     super(FixedSizeSamplingIterator.buildDelegate(size, source));
0:   
/////////////////////////////////////////////////////////////////////////
0:   
============================================================================