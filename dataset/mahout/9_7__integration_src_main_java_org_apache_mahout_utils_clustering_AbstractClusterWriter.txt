1:29a7f38: /**
1:29a7f38:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29a7f38:  * contributor license agreements.  See the NOTICE file distributed with
1:29a7f38:  * this work for additional information regarding copyright ownership.
1:29a7f38:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29a7f38:  * (the "License"); you may not use this file except in compliance with
1:29a7f38:  * the License.  You may obtain a copy of the License at
1:29a7f38:  *
1:29a7f38:  *     http://www.apache.org/licenses/LICENSE-2.0
1:29a7f38:  *
1:29a7f38:  * Unless required by applicable law or agreed to in writing, software
1:29a7f38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29a7f38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29a7f38:  * See the License for the specific language governing permissions and
1:29a7f38:  * limitations under the License.
1:29a7f38:  */
13:29a7f38: 
1:c9d49ee: package org.apache.mahout.utils.clustering;
1:4194a28: 
1:29a7f38: import java.io.IOException;
1:29a7f38: import java.io.Writer;
1:29a7f38: import java.util.Collection;
1:29a7f38: import java.util.Collections;
1:29a7f38: import java.util.Comparator;
1:29a7f38: import java.util.Iterator;
1:29a7f38: import java.util.List;
1:29a7f38: import java.util.Map;
1:29a7f38: 
1:67a531e: import org.apache.commons.lang3.StringUtils;
1:8253491: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
1:51f58b8: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:51f58b8: import org.apache.mahout.common.Pair;
1:51f58b8: import org.apache.mahout.common.distance.DistanceMeasure;
1:51f58b8: import org.apache.mahout.math.Vector;
1:51f58b8: import org.slf4j.Logger;
1:51f58b8: import org.slf4j.LoggerFactory;
1:51f58b8: 
1:51f58b8: import com.google.common.collect.Lists;
1:51f58b8: 
1:29a7f38: /**
1:29a7f38:  * Base class for implementing ClusterWriter
1:29a7f38:  */
1:29a7f38: public abstract class AbstractClusterWriter implements ClusterWriter {
1:29a7f38: 
1:4194a28:   private static final Logger log = LoggerFactory.getLogger(AbstractClusterWriter.class);
1:4194a28: 
1:b7b432c:   protected final Writer writer;
1:8253491:   protected final Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints;
1:b7b432c:   protected final DistanceMeasure measure;
1:29a7f38: 
1:b7b432c:   /**
1:b7b432c:    *
1:b7b432c:    * @param writer The underlying {@link java.io.Writer} to use
1:3c22856:    * @param clusterIdToPoints The map between cluster ids {@link org.apache.mahout.clustering.Cluster#getId()} and the
1:3c22856:    *                          points in the cluster
1:3c22856:    * @param measure The {@link org.apache.mahout.common.distance.DistanceMeasure} used to calculate the distance.
1:3c22856:    *                Some writers may wish to use it for calculating weights for display.  May be null.
1:b7b432c:    */
1:8253491:   protected AbstractClusterWriter(Writer writer, Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints,
1:3c22856:       DistanceMeasure measure) {
1:29a7f38:     this.writer = writer;
1:29a7f38:     this.clusterIdToPoints = clusterIdToPoints;
1:b7b432c:     this.measure = measure;
10:29a7f38:   }
1:1c06e9d: 
1:4194a28:   protected Writer getWriter() {
1:4194a28:     return writer;
1:4194a28:   }
1:4194a28: 
1:8253491:   protected Map<Integer, List<WeightedPropertyVectorWritable>> getClusterIdToPoints() {
1:4194a28:     return clusterIdToPoints;
1:4194a28:   }
1:4194a28: 
1:29a7f38:   public static String getTopFeatures(Vector vector, String[] dictionary, int numTerms) {
1:b7b432c: 
1:29a7f38:     StringBuilder sb = new StringBuilder(100);
1:b7b432c: 
1:1c06e9d:     for (Pair<String, Double> item : getTopPairs(vector, dictionary, numTerms)) {
1:29a7f38:       String term = item.getFirst();
1:29a7f38:       sb.append("\n\t\t");
1:29a7f38:       sb.append(StringUtils.rightPad(term, 40));
1:29a7f38:       sb.append("=>");
1:29a7f38:       sb.append(StringUtils.leftPad(item.getSecond().toString(), 20));
1:b7b432c:     }
1:29a7f38:     return sb.toString();
1:b7b432c:   }
1:b7b432c: 
1:b7b432c:   public static String getTopTerms(Vector vector, String[] dictionary, int numTerms) {
1:b7b432c: 
1:b7b432c:     StringBuilder sb = new StringBuilder(100);
1:b7b432c: 
1:1c06e9d:     for (Pair<String, Double> item : getTopPairs(vector, dictionary, numTerms)) {
1:b7b432c:       String term = item.getFirst();
1:229aeff:       sb.append(term).append('_');
1:b7b432c:     }
1:b7b432c:     sb.deleteCharAt(sb.length() - 1);
1:b7b432c:     return sb.toString();
1:b7b432c:   }
1:b7b432c: 
1:b7b432c:   @Override
1:51f58b8:   public long write(Iterable<ClusterWritable> iterable) throws IOException {
1:29a7f38:     return write(iterable, Long.MAX_VALUE);
1:29a7f38:   }
1:b7b432c: 
3:29a7f38:   @Override
1:29a7f38:   public void close() throws IOException {
1:29a7f38:     writer.close();
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   @Override
1:51f58b8:   public long write(Iterable<ClusterWritable> iterable, long maxDocs) throws IOException {
1:29a7f38:     long result = 0;
1:51f58b8:     Iterator<ClusterWritable> iterator = iterable.iterator();
1:e64dd36:     while (result < maxDocs && iterator.hasNext()) {
1:29a7f38:       write(iterator.next());
1:29a7f38:       result++;
1:29a7f38:     }
1:29a7f38:     return result;
1:29a7f38:   }
1:29a7f38: 
1:1c06e9d:   private static Collection<Pair<String, Double>> getTopPairs(Vector vector, String[] dictionary, int numTerms) {
1:1c06e9d:     List<TermIndexWeight> vectorTerms = Lists.newArrayList();
1:1c06e9d: 
1:1c06e9d:     for (Vector.Element elt : vector.nonZeroes()) {
1:1c06e9d:       vectorTerms.add(new TermIndexWeight(elt.index(), elt.get()));
1:1c06e9d:     }
1:1c06e9d: 
1:1c06e9d:     // Sort results in reverse order (ie weight in descending order)
1:1c06e9d:     Collections.sort(vectorTerms, new Comparator<TermIndexWeight>() {
1:1c06e9d:       @Override
1:1c06e9d:       public int compare(TermIndexWeight one, TermIndexWeight two) {
1:1c06e9d:         return Double.compare(two.weight, one.weight);
1:1c06e9d:       }
1:1c06e9d:     });
1:1c06e9d: 
1:1c06e9d:     Collection<Pair<String, Double>> topTerms = Lists.newLinkedList();
1:1c06e9d: 
1:1c06e9d:     for (int i = 0; i < vectorTerms.size() && i < numTerms; i++) {
1:1c06e9d:       int index = vectorTerms.get(i).index;
1:1c06e9d:       String dictTerm = dictionary[index];
1:1c06e9d:       if (dictTerm == null) {
1:1c06e9d:         log.error("Dictionary entry missing for {}", index);
1:1c06e9d:         continue;
1:1c06e9d:       }
1:87c15be:       topTerms.add(new Pair<>(dictTerm, vectorTerms.get(i).weight));
1:1c06e9d:     }
1:1c06e9d: 
1:1c06e9d:     return topTerms;
1:1c06e9d:   }
1:1c06e9d: 
1:29a7f38:   private static class TermIndexWeight {
1:29a7f38:     private final int index;
1:29a7f38:     private final double weight;
1:b7b432c: 
1:29a7f38:     TermIndexWeight(int index, double weight) {
1:29a7f38:       this.index = index;
1:29a7f38:       this.weight = weight;
1:3c22856:     }
1:b7b432c:   }
1:b7b432c: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       topTerms.add(new Pair<>(dictTerm, vectorTerms.get(i).weight));
author:smarthi
-------------------------------------------------------------------------------
commit:1c06e9d
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<String, Double> item : getTopPairs(vector, dictionary, numTerms)) {
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<String, Double> item : getTopPairs(vector, dictionary, numTerms)) {
/////////////////////////////////////////////////////////////////////////
1:   private static Collection<Pair<String, Double>> getTopPairs(Vector vector, String[] dictionary, int numTerms) {
1:     List<TermIndexWeight> vectorTerms = Lists.newArrayList();
1: 
1:     for (Vector.Element elt : vector.nonZeroes()) {
1:       vectorTerms.add(new TermIndexWeight(elt.index(), elt.get()));
1:     }
1: 
1:     // Sort results in reverse order (ie weight in descending order)
1:     Collections.sort(vectorTerms, new Comparator<TermIndexWeight>() {
1:       @Override
1:       public int compare(TermIndexWeight one, TermIndexWeight two) {
1:         return Double.compare(two.weight, one.weight);
1:       }
1:     });
1: 
1:     Collection<Pair<String, Double>> topTerms = Lists.newLinkedList();
1: 
1:     for (int i = 0; i < vectorTerms.size() && i < numTerms; i++) {
1:       int index = vectorTerms.get(i).index;
1:       String dictTerm = dictionary[index];
1:       if (dictTerm == null) {
1:         log.error("Dictionary entry missing for {}", index);
1:         continue;
1:       }
0:       topTerms.add(new Pair<String, Double>(dictTerm, vectorTerms.get(i).weight));
1:     }
1: 
1:     return topTerms;
1:   }
1: 
commit:8253491
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
/////////////////////////////////////////////////////////////////////////
1:   protected final Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints;
/////////////////////////////////////////////////////////////////////////
1:   protected AbstractClusterWriter(Writer writer, Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints,
/////////////////////////////////////////////////////////////////////////
1:   protected Map<Integer, List<WeightedPropertyVectorWritable>> getClusterIdToPoints() {
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.StringUtils;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
0:     Collection<Pair<String, Double>> topTerms = Lists.newLinkedList();
/////////////////////////////////////////////////////////////////////////
0:     Collection<Pair<String, Double>> topTerms = Lists.newLinkedList();
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:    * @param clusterIdToPoints The map between cluster ids {@link org.apache.mahout.clustering.Cluster#getId()} and the
1:    *                          points in the cluster
1:    * @param measure The {@link org.apache.mahout.common.distance.DistanceMeasure} used to calculate the distance.
1:    *                Some writers may wish to use it for calculating weights for display.  May be null.
0:   protected AbstractClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
1:       DistanceMeasure measure) {
/////////////////////////////////////////////////////////////////////////
1: }
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
0:     for (Vector.Element elt : vector.nonZeroes()) {
/////////////////////////////////////////////////////////////////////////
0:     for (Vector.Element elt : vector.nonZeroes()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:       sb.append(term).append('_');
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.io;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger log = LoggerFactory.getLogger(AbstractClusterWriter.class);
0:   private final Writer writer;
0:   private final Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
1: 
0:   protected AbstractClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints) {
1:   
1:   protected Writer getWriter() {
1:     return writer;
1:   }
1: 
0:   protected Map<Integer, List<WeightedVectorWritable>> getClusterIdToPoints() {
1:     return clusterIdToPoints;
1:   }
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:     while (result < maxDocs && iterator.hasNext()) {
author:pranjan
-------------------------------------------------------------------------------
commit:51f58b8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.StringUtils;
0: import org.apache.mahout.clustering.classify.WeightedVectorWritable;
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.Vector;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import com.google.common.collect.Lists;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public long write(Iterable<ClusterWritable> iterable) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   public long write(Iterable<ClusterWritable> iterable, long maxDocs) throws IOException {
1:     Iterator<ClusterWritable> iterator = iterable.iterator();
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.clustering.classify.WeightedVectorWritable;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:b7b432c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.distance.DistanceMeasure;
/////////////////////////////////////////////////////////////////////////
1:   protected final Writer writer;
0:   protected final Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
1:   protected final DistanceMeasure measure;
1:   /**
1:    *
1:    * @param writer The underlying {@link java.io.Writer} to use
0:    * @param clusterIdToPoints The map between cluster ids {@link org.apache.mahout.clustering.Cluster#getId()} and the points in the cluster
0:    * @param measure The {@link org.apache.mahout.common.distance.DistanceMeasure} used to calculate the distance.  Some writers may wish to use it for calculating weights for display.  May be null.
1:    */
0:   protected AbstractClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints, DistanceMeasure measure) {
1:     this.measure = measure;
/////////////////////////////////////////////////////////////////////////
1:   public static String getTopTerms(Vector vector, String[] dictionary, int numTerms) {
1: 
0:     List<TermIndexWeight> vectorTerms = Lists.newArrayList();
1: 
0:     Iterator<Vector.Element> iter = vector.iterateNonZero();
0:     while (iter.hasNext()) {
0:       Vector.Element elt = iter.next();
0:       vectorTerms.add(new TermIndexWeight(elt.index(), elt.get()));
1:     }
1: 
0:     // Sort results in reverse order (ie weight in descending order)
0:     Collections.sort(vectorTerms, new Comparator<TermIndexWeight>() {
1:       @Override
0:       public int compare(TermIndexWeight one, TermIndexWeight two) {
0:         return Double.compare(two.weight, one.weight);
1:       }
0:     });
1: 
0:     Collection<Pair<String, Double>> topTerms = new LinkedList<Pair<String, Double>>();
1: 
0:     for (int i = 0; i < vectorTerms.size() && i < numTerms; i++) {
0:       int index = vectorTerms.get(i).index;
0:       String dictTerm = dictionary[index];
0:       if (dictTerm == null) {
0:         log.error("Dictionary entry missing for {}", index);
0:         continue;
1:       }
0:       topTerms.add(new Pair<String, Double>(dictTerm, vectorTerms.get(i).weight));
1:     }
1: 
1:     StringBuilder sb = new StringBuilder(100);
1: 
0:     for (Pair<String, Double> item : topTerms) {
1:       String term = item.getFirst();
0:       sb.append(term).append("_");
1:     }
1:     sb.deleteCharAt(sb.length() - 1);
1:     return sb.toString();
1:   }
1: 
commit:c9d49ee
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.clustering;
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.io;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: import com.google.common.collect.Lists;
0: import org.apache.commons.lang.StringUtils;
0: import org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator;
0: import org.apache.mahout.clustering.Cluster;
0: import org.apache.mahout.clustering.WeightedVectorWritable;
0: import org.apache.mahout.common.Pair;
0: import org.apache.mahout.math.Vector;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: import java.io.Writer;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.Iterator;
0: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
1:  * Base class for implementing ClusterWriter
1:  */
1: public abstract class AbstractClusterWriter implements ClusterWriter {
0:   private transient static Logger log = LoggerFactory.getLogger(AbstractClusterWriter.class);
1: 
0:   protected Writer writer;
0:   protected Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
1: 
0:   public AbstractClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints) {
1:     this.writer = writer;
1:     this.clusterIdToPoints = clusterIdToPoints;
1:   }
1: 
1:   public static String getTopFeatures(Vector vector, String[] dictionary, int numTerms) {
1: 
0:     List<TermIndexWeight> vectorTerms = Lists.newArrayList();
1: 
0:     Iterator<Vector.Element> iter = vector.iterateNonZero();
0:     while (iter.hasNext()) {
0:       Vector.Element elt = iter.next();
0:       vectorTerms.add(new TermIndexWeight(elt.index(), elt.get()));
1:     }
1: 
0:     // Sort results in reverse order (ie weight in descending order)
0:     Collections.sort(vectorTerms, new Comparator<TermIndexWeight>() {
1:       @Override
0:       public int compare(TermIndexWeight one, TermIndexWeight two) {
0:         return Double.compare(two.weight, one.weight);
1:       }
0:     });
1: 
0:     Collection<Pair<String, Double>> topTerms = new LinkedList<Pair<String, Double>>();
1: 
0:     for (int i = 0; i < vectorTerms.size() && i < numTerms; i++) {
0:       int index = vectorTerms.get(i).index;
0:       String dictTerm = dictionary[index];
0:       if (dictTerm == null) {
0:         log.error("Dictionary entry missing for {}", index);
0:         continue;
1:       }
0:       topTerms.add(new Pair<String, Double>(dictTerm, vectorTerms.get(i).weight));
1:     }
1: 
1:     StringBuilder sb = new StringBuilder(100);
1: 
0:     for (Pair<String, Double> item : topTerms) {
1:       String term = item.getFirst();
1:       sb.append("\n\t\t");
1:       sb.append(StringUtils.rightPad(term, 40));
1:       sb.append("=>");
1:       sb.append(StringUtils.leftPad(item.getSecond().toString(), 20));
1:     }
1:     return sb.toString();
1:   }
1: 
1:   @Override
0:   public long write(Iterable<Cluster> iterable) throws IOException {
1:     return write(iterable, Long.MAX_VALUE);
1:   }
1: 
1:   @Override
1:   public void close() throws IOException {
1:     writer.close();
1:   }
1: 
1:   @Override
0:   public long write(Iterable<Cluster> iterable, long maxDocs) throws IOException {
1:     long result = 0;
0:     Iterator<Cluster> iterator = iterable.iterator();
0:     while (result < maxDocs && iterator.hasNext()){
1:       write(iterator.next());
1:       result++;
1:     }
1:     return result;
1:   }
1: 
1:   private static class TermIndexWeight {
1:     private final int index;
1:     private final double weight;
1: 
1:     TermIndexWeight(int index, double weight) {
1:       this.index = index;
1:       this.weight = weight;
1:     }
1:   }
1: }
============================================================================