1:15a7014: /*
1:15a7014:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:15a7014:  * contributor license agreements.  See the NOTICE file distributed with
1:15a7014:  * this work for additional information regarding copyright ownership.
1:15a7014:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:15a7014:  * (the "License"); you may not use this file except in compliance with
1:15a7014:  * the License.  You may obtain a copy of the License at
1:15a7014:  *
1:15a7014:  *     http://www.apache.org/licenses/LICENSE-2.0
1:15a7014:  *
1:15a7014:  * Unless required by applicable law or agreed to in writing, software
1:15a7014:  * distributed under the License is distributed on an "AS IS" BASIS,
1:15a7014:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:15a7014:  * See the License for the specific language governing permissions and
1:15a7014:  * limitations under the License.
1:15a7014:  */
1:15a7014: 
1:21779d8: package org.apache.mahout.math;
3:21779d8: 
1:0b564c7: import org.apache.mahout.math.flavor.MatrixFlavor;
1:0b564c7: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1:0b564c7: 
1:dd78ed9: import java.util.Iterator;
1:dd78ed9: import java.util.NoSuchElementException;
1:dd78ed9: 
1:cd829a2: public class DiagonalMatrix extends AbstractMatrix implements MatrixTimesOps {
1:1499411:   private final Vector diagonal;
1:21779d8: 
1:21779d8:   public DiagonalMatrix(Vector values) {
1:95f836b:     super(values.size(), values.size());
1:21779d8:     this.diagonal = values;
3:21779d8:   }
1:21779d8: 
1:21779d8:   public DiagonalMatrix(Matrix values) {
1:21779d8:     this(values.viewDiagonal());
1:21779d8:   }
1:21779d8: 
1:21779d8:   public DiagonalMatrix(double value, int size) {
1:21779d8:     this(new ConstantVector(value, size));
1:21779d8:   }
1:21779d8: 
1:21779d8:   public DiagonalMatrix(double[] values) {
1:95f836b:     super(values.length, values.length);
1:21779d8:     this.diagonal = new DenseVector(values);
1:21779d8:   }
1:21779d8: 
1:21779d8:   public static DiagonalMatrix identity(int size) {
1:21779d8:     return new DiagonalMatrix(1, size);
1:21779d8:   }
1:21779d8: 
3:21779d8:   @Override
1:21779d8:   public Matrix assignColumn(int column, Vector other) {
1:21779d8:     throw new UnsupportedOperationException("Can't assign a column to a diagonal matrix");
1:21779d8:   }
1:21779d8: 
4:21779d8:   /**
1:21779d8:    * Assign the other vector values to the row of the receiver
3:21779d8:    *
1:21779d8:    * @param row   the int row to assign
1:21779d8:    * @param other a Vector
1:21779d8:    * @return the modified receiver
1:21779d8:    * @throws CardinalityException if the cardinalities differ
4:21779d8:    */
1:cd829a2:   @Override
1:21779d8:   public Matrix assignRow(int row, Vector other) {
1:21779d8:     throw new UnsupportedOperationException("Can't assign a row to a diagonal matrix");
1:21779d8:   }
1:21779d8: 
1:dd78ed9:   @Override
1:dd78ed9:   public Vector viewRow(int row) {
1:dd78ed9:     return new SingleElementVector(row);
1:dd78ed9:   }
1:dd78ed9: 
1:dd78ed9:   @Override
1:dd78ed9:   public Vector viewColumn(int row) {
1:dd78ed9:     return new SingleElementVector(row);
1:dd78ed9:   }
1:dd78ed9: 
1:dd78ed9:   /**
1:dd78ed9:    * Special class to implement views of rows and columns of a diagonal matrix.
1:dd78ed9:    */
1:dd78ed9:   public class SingleElementVector extends AbstractVector {
1:dd78ed9:     private int index;
1:dd78ed9: 
1:dd78ed9:     public SingleElementVector(int index) {
1:dd78ed9:       super(diagonal.size());
1:dd78ed9:       this.index = index;
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public double getQuick(int index) {
1:dd78ed9:       if (index == this.index) {
1:dd78ed9:         return diagonal.get(index);
1:dd78ed9:       } else {
1:dd78ed9:         return 0;
1:dd78ed9:       }
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public void set(int index, double value) {
1:dd78ed9:       if (index == this.index) {
1:dd78ed9:         diagonal.set(index, value);
1:dd78ed9:       } else {
1:dd78ed9:         throw new IllegalArgumentException("Can't set off-diagonal element of diagonal matrix");
1:dd78ed9:       }
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     protected Iterator<Element> iterateNonZero() {
1:dd78ed9:       return new Iterator<Element>() {
1:dd78ed9:         boolean more = true;
1:dd78ed9: 
1:dd78ed9:         @Override
1:dd78ed9:         public boolean hasNext() {
1:dd78ed9:           return more;
1:dd78ed9:         }
1:dd78ed9: 
1:dd78ed9:         @Override
1:dd78ed9:         public Element next() {
1:dd78ed9:           if (more) {
1:dd78ed9:             more = false;
1:dd78ed9:             return new Element() {
1:dd78ed9:               @Override
1:dd78ed9:               public double get() {
1:dd78ed9:                 return diagonal.get(index);
1:dd78ed9:               }
1:dd78ed9: 
1:dd78ed9:               @Override
1:dd78ed9:               public int index() {
1:dd78ed9:                 return index;
1:dd78ed9:               }
1:dd78ed9: 
1:dd78ed9:               @Override
1:dd78ed9:               public void set(double value) {
1:dd78ed9:                 diagonal.set(index, value);
1:dd78ed9:               }
1:dd78ed9:             };
1:dd78ed9:           } else {
1:dd78ed9:             throw new NoSuchElementException("Only one non-zero element in a row or column of a diagonal matrix");
1:dd78ed9:           }
1:dd78ed9:         }
1:dd78ed9: 
1:dd78ed9:         @Override
1:dd78ed9:         public void remove() {
1:dd78ed9:           throw new UnsupportedOperationException("Can't remove from vector view");
1:dd78ed9:         }
1:dd78ed9:       };
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     protected Iterator<Element> iterator() {
1:dd78ed9:       return new Iterator<Element>() {
1:dd78ed9:         int i = 0;
1:dd78ed9: 
1:dd78ed9:         Element r = new Element() {
1:dd78ed9:           @Override
1:dd78ed9:           public double get() {
1:dd78ed9:             if (i == index) {
1:dd78ed9:               return diagonal.get(index);
1:dd78ed9:             } else {
1:dd78ed9:               return 0;
1:dd78ed9:             }
1:dd78ed9:           }
1:dd78ed9: 
1:dd78ed9:           @Override
1:dd78ed9:           public int index() {
1:dd78ed9:             return i;
1:dd78ed9:           }
1:dd78ed9: 
1:dd78ed9:           @Override
1:dd78ed9:           public void set(double value) {
1:dd78ed9:             if (i == index) {
1:dd78ed9:               diagonal.set(index, value);
1:dd78ed9:             } else {
1:dd78ed9:               throw new IllegalArgumentException("Can't set any element but diagonal");
1:dd78ed9:             }
1:dd78ed9:           }
1:dd78ed9:         };
1:dd78ed9: 
1:dd78ed9:         @Override
1:dd78ed9:         public boolean hasNext() {
1:dd78ed9:           return i < diagonal.size() - 1;
1:dd78ed9:         }
1:dd78ed9: 
1:dd78ed9:         @Override
1:dd78ed9:         public Element next() {
1:dd78ed9:           if (i < SingleElementVector.this.size() - 1) {
1:dd78ed9:             i++;
1:dd78ed9:             return r;
1:dd78ed9:           } else {
1:dd78ed9:             throw new NoSuchElementException("Attempted to access passed last element of vector");
1:dd78ed9:           }
1:dd78ed9:         }
1:dd78ed9: 
1:dd78ed9: 
1:dd78ed9:         @Override
1:dd78ed9:         public void remove() {
1:dd78ed9:           throw new UnsupportedOperationException("Default operation");
1:dd78ed9:         }
1:dd78ed9:       };
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     protected Matrix matrixLike(int rows, int columns) {
1:dd78ed9:       return new DiagonalMatrix(rows, columns);
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public boolean isDense() {
1:dd78ed9:       return false;
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public boolean isSequentialAccess() {
1:dd78ed9:       return true;
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public void mergeUpdates(OrderedIntDoubleMapping updates) {
1:dd78ed9:       throw new UnsupportedOperationException("Default operation");
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public Vector like() {
1:dd78ed9:       return new DenseVector(size());
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:0b564c7:     public Vector like(int cardinality) {
1:0b564c7:       return new DenseVector(cardinality);
1:0b564c7:     }
1:0b564c7: 
1:0b564c7:     @Override
1:dd78ed9:     public void setQuick(int index, double value) {
1:dd78ed9:       if (index == this.index) {
1:dd78ed9:         diagonal.set(this.index, value);
1:dd78ed9:       } else {
1:dd78ed9:         throw new IllegalArgumentException("Can't set off-diagonal element of DiagonalMatrix");
1:dd78ed9:       }
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public int getNumNondefaultElements() {
1:dd78ed9:       return 1;
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public double getLookupCost() {
1:dd78ed9:       return 0;
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public double getIteratorAdvanceCost() {
1:dd78ed9:       return 1;
1:dd78ed9:     }
1:dd78ed9: 
1:dd78ed9:     @Override
1:dd78ed9:     public boolean isAddConstantTime() {
1:dd78ed9:       return false;
1:dd78ed9:     }
1:dd78ed9:   }
1:dd78ed9: 
1:21779d8:   /**
1:21779d8:    * Provides a view of the diagonal of a matrix.
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Vector viewDiagonal() {
1:21779d8:     return this.diagonal;
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return the value at the given location, without checking bounds
1:21779d8:    *
1:21779d8:    * @param row    an int row index
2:21779d8:    * @param column an int column index
1:21779d8:    * @return the double at the index
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public double getQuick(int row, int column) {
1:21779d8:     if (row == column) {
1:21779d8:       return diagonal.get(row);
1:21779d8:     } else {
1:21779d8:       return 0;
1:21779d8:     }
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return an empty matrix of the same underlying class as the receiver
1:21779d8:    *
1:21779d8:    * @return a Matrix
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Matrix like() {
1:95f836b:     return new SparseRowMatrix(rowSize(), columnSize());
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Returns an empty matrix of the same underlying class as the receiver and of the specified
1:21779d8:    * size.
1:21779d8:    *
1:21779d8:    * @param rows    the int number of rows
1:21779d8:    * @param columns the int number of columns
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Matrix like(int rows, int columns) {
1:95f836b:     return new SparseRowMatrix(rows, columns);
1:21779d8:   }
1:21779d8: 
1:21779d8:   @Override
1:21779d8:   public void setQuick(int row, int column, double value) {
1:21779d8:     if (row == column) {
1:21779d8:       diagonal.set(row, value);
1:21779d8:     } else {
1:21779d8:       throw new UnsupportedOperationException("Can't set off-diagonal element");
1:21779d8:     }
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return the number of values in the recipient
1:21779d8:    *
1:21779d8:    * @return an int[2] containing [row, column] count
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public int[] getNumNondefaultElements() {
1:21779d8:     throw new UnsupportedOperationException("Don't understand how to implement this");
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return a new matrix containing the subset of the recipient
1:21779d8:    *
1:21779d8:    * @param offset an int[2] offset into the receiver
1:21779d8:    * @param size   the int[2] size of the desired result
1:21779d8:    * @return a new Matrix that is a view of the original
1:21779d8:    * @throws CardinalityException if the length is greater than the cardinality of the receiver
1:21779d8:    * @throws IndexException       if the offset is negative or the offset+length is outside of the
1:21779d8:    *                              receiver
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Matrix viewPart(int[] offset, int[] size) {
1:21779d8:     return new MatrixView(this, offset, size);
1:21779d8:   }
1:cd829a2: 
1:cd829a2:   @Override
1:cd829a2:   public Matrix times(Matrix other) {
1:cd829a2:     return timesRight(other);
1:cd829a2:   }
1:cd829a2: 
1:cd829a2:   @Override
1:cd829a2:   public Matrix timesRight(Matrix that) {
1:dd78ed9:     if (that.numRows() != diagonal.size()) {
1:cd829a2:       throw new IllegalArgumentException("Incompatible number of rows in the right operand of matrix multiplication.");
1:dd78ed9:     }
1:cd829a2:     Matrix m = that.like();
1:dd78ed9:     for (int row = 0; row < diagonal.size(); row++) {
1:cd829a2:       m.assignRow(row, that.viewRow(row).times(diagonal.getQuick(row)));
1:dd78ed9:     }
1:cd829a2:     return m;
1:cd829a2:   }
1:0b564c7: 
1:0b564c7:   @Override
1:cd829a2:   public Matrix timesLeft(Matrix that) {
1:dd78ed9:     if (that.numCols() != diagonal.size()) {
1:cd829a2:       throw new IllegalArgumentException(
1:cd829a2:         "Incompatible number of rows in the left operand of matrix-matrix multiplication.");
1:dd78ed9:     }
1:cd829a2:     Matrix m = that.like();
1:dd78ed9:     for (int col = 0; col < diagonal.size(); col++) {
1:cd829a2:       m.assignColumn(col, that.viewColumn(col).times(diagonal.getQuick(col)));
1:cd829a2:     }
1:cd829a2:     return m;
1:dd78ed9:   }
1:cd829a2: 
1:21779d8:   @Override
1:0b564c7:   public MatrixFlavor getFlavor() {
1:0b564c7:     return MatrixFlavor.DIAGONALLIKE;
1:0b564c7:   }
1:0b564c7: 
1:21779d8: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.flavor.MatrixFlavor;
1: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Vector like(int cardinality) {
1:       return new DenseVector(cardinality);
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public MatrixFlavor getFlavor() {
1:     return MatrixFlavor.DIAGONALLIKE;
1:   }
1: 
commit:cd829a2
/////////////////////////////////////////////////////////////////////////
1: public class DiagonalMatrix extends AbstractMatrix implements MatrixTimesOps {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public Matrix times(Matrix other) {
1:     return timesRight(other);
1:   }
1: 
1:   @Override
1:   public Matrix timesRight(Matrix that) {
0:     if (that.numRows() != diagonal.size())
1:       throw new IllegalArgumentException("Incompatible number of rows in the right operand of matrix multiplication.");
1:     Matrix m = that.like();
0:     for (int row = 0; row < diagonal.size(); row++)
1:       m.assignRow(row, that.viewRow(row).times(diagonal.getQuick(row)));
1:     return m;
1:   }
1: 
1:   @Override
1:   public Matrix timesLeft(Matrix that) {
0:     if (that.numCols() != diagonal.size())
1:       throw new IllegalArgumentException(
1:           "Incompatible number of rows in the left operand of matrix-matrix multiplication.");
1:     Matrix m = that.like();
0:     for (int col = 0; col < diagonal.size(); col++)
1:       m.assignColumn(col, that.viewColumn(col).times(diagonal.getQuick(col)));
1:     return m;
1:   }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:dd78ed9
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.NoSuchElementException;
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public Vector viewRow(int row) {
1:     return new SingleElementVector(row);
1:   }
1: 
1:   @Override
1:   public Vector viewColumn(int row) {
1:     return new SingleElementVector(row);
1:   }
1: 
1:   /**
1:    * Special class to implement views of rows and columns of a diagonal matrix.
1:    */
1:   public class SingleElementVector extends AbstractVector {
1:     private int index;
1: 
1:     public SingleElementVector(int index) {
1:       super(diagonal.size());
1:       this.index = index;
1:     }
1: 
1:     @Override
1:     public double getQuick(int index) {
1:       if (index == this.index) {
1:         return diagonal.get(index);
1:       } else {
1:         return 0;
1:       }
1:     }
1: 
1:     @Override
1:     public void set(int index, double value) {
1:       if (index == this.index) {
1:         diagonal.set(index, value);
1:       } else {
1:         throw new IllegalArgumentException("Can't set off-diagonal element of diagonal matrix");
1:       }
1:     }
1: 
1:     @Override
1:     protected Iterator<Element> iterateNonZero() {
1:       return new Iterator<Element>() {
1:         boolean more = true;
1: 
1:         @Override
1:         public boolean hasNext() {
1:           return more;
1:         }
1: 
1:         @Override
1:         public Element next() {
1:           if (more) {
1:             more = false;
1:             return new Element() {
1:               @Override
1:               public double get() {
1:                 return diagonal.get(index);
1:               }
1: 
1:               @Override
1:               public int index() {
1:                 return index;
1:               }
1: 
1:               @Override
1:               public void set(double value) {
1:                 diagonal.set(index, value);
1:               }
1:             };
1:           } else {
1:             throw new NoSuchElementException("Only one non-zero element in a row or column of a diagonal matrix");
1:           }
1:         }
1: 
1:         @Override
1:         public void remove() {
1:           throw new UnsupportedOperationException("Can't remove from vector view");
1:         }
1:       };
1:     }
1: 
1:     @Override
1:     protected Iterator<Element> iterator() {
1:       return new Iterator<Element>() {
1:         int i = 0;
1: 
1:         Element r = new Element() {
1:           @Override
1:           public double get() {
1:             if (i == index) {
1:               return diagonal.get(index);
1:             } else {
1:               return 0;
1:             }
1:           }
1: 
1:           @Override
1:           public int index() {
1:             return i;
1:           }
1: 
1:           @Override
1:           public void set(double value) {
1:             if (i == index) {
1:               diagonal.set(index, value);
1:             } else {
1:               throw new IllegalArgumentException("Can't set any element but diagonal");
1:             }
1:           }
1:         };
1: 
1:         @Override
1:         public boolean hasNext() {
1:           return i < diagonal.size() - 1;
1:         }
1: 
1:         @Override
1:         public Element next() {
1:           if (i < SingleElementVector.this.size() - 1) {
1:             i++;
1:             return r;
1:           } else {
1:             throw new NoSuchElementException("Attempted to access passed last element of vector");
1:           }
1:         }
1: 
1: 
1:         @Override
1:         public void remove() {
1:           throw new UnsupportedOperationException("Default operation");
1:         }
1:       };
1:     }
1: 
1:     @Override
1:     protected Matrix matrixLike(int rows, int columns) {
1:       return new DiagonalMatrix(rows, columns);
1:     }
1: 
1:     @Override
1:     public boolean isDense() {
1:       return false;
1:     }
1: 
1:     @Override
1:     public boolean isSequentialAccess() {
1:       return true;
1:     }
1: 
1:     @Override
1:     public void mergeUpdates(OrderedIntDoubleMapping updates) {
1:       throw new UnsupportedOperationException("Default operation");
1:     }
1: 
1:     @Override
1:     public Vector like() {
1:       return new DenseVector(size());
1:     }
1: 
1:     @Override
1:     public void setQuick(int index, double value) {
1:       if (index == this.index) {
1:         diagonal.set(this.index, value);
1:       } else {
1:         throw new IllegalArgumentException("Can't set off-diagonal element of DiagonalMatrix");
1:       }
1:     }
1: 
1:     @Override
1:     public int getNumNondefaultElements() {
1:       return 1;
1:     }
1: 
1:     @Override
1:     public double getLookupCost() {
1:       return 0;
1:     }
1: 
1:     @Override
1:     public double getIteratorAdvanceCost() {
1:       return 1;
1:     }
1: 
1:     @Override
1:     public boolean isAddConstantTime() {
1:       return false;
1:     }
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:     if (that.numRows() != diagonal.size()) {
1:     }
1:     for (int row = 0; row < diagonal.size(); row++) {
1:     }
1:     if (that.numCols() != diagonal.size()) {
0:         "Incompatible number of rows in the left operand of matrix-matrix multiplication.");
1:     }
1:     for (int col = 0; col < diagonal.size(); col++) {
1:     }
commit:95f836b
/////////////////////////////////////////////////////////////////////////
1:     super(values.size(), values.size());
/////////////////////////////////////////////////////////////////////////
1:     super(values.length, values.length);
/////////////////////////////////////////////////////////////////////////
1:     return new SparseRowMatrix(rowSize(), columnSize());
/////////////////////////////////////////////////////////////////////////
1:     return new SparseRowMatrix(rows, columns);
commit:15a7014
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
commit:21779d8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
1: /**
0:  * Created by IntelliJ IDEA. User: tdunning Date: 8/9/11 Time: 10:36 PM To change this template use
0:  * File | Settings | File Templates.
1:  */
0: public class DiagonalMatrix extends AbstractMatrix {
0:   private Vector diagonal;
1: 
1:   public DiagonalMatrix(Vector values) {
1:     this.diagonal = values;
0:     super.cardinality[0] = values.size();
0:     super.cardinality[1] = values.size();
1:   }
1: 
1:   public DiagonalMatrix(Matrix values) {
1:     this(values.viewDiagonal());
1:   }
1: 
1:   public DiagonalMatrix(double value, int size) {
1:     this(new ConstantVector(value, size));
1:   }
1: 
1:   public DiagonalMatrix(double[] values) {
1:     this.diagonal = new DenseVector(values);
1:   }
1: 
1:   public static DiagonalMatrix identity(int size) {
1:     return new DiagonalMatrix(1, size);
1:   }
1: 
1:   @Override
1:   public Matrix assignColumn(int column, Vector other) {
1:     throw new UnsupportedOperationException("Can't assign a column to a diagonal matrix");
1:   }
1: 
1:   /**
1:    * Assign the other vector values to the row of the receiver
1:    *
1:    * @param row   the int row to assign
1:    * @param other a Vector
1:    * @return the modified receiver
1:    * @throws CardinalityException if the cardinalities differ
1:    */
1:   @Override
1:   public Matrix assignRow(int row, Vector other) {
1:     throw new UnsupportedOperationException("Can't assign a row to a diagonal matrix");
1:   }
1: 
1:   /**
0:    * Return the column at the given index
1:    *
1:    * @param column an int column index
0:    * @return a Vector at the index
0:    * @throws IndexException if the index is out of bounds
1:    */
1:   @Override
0:   public Vector getColumn(int column) {
0:     return new MatrixVectorView(this, 0, column, 1, 0);
1:   }
1: 
1:   /**
0:    * Return the row at the given index
1:    *
0:    * @param row an int row index
0:    * @return a Vector at the index
0:    * @throws IndexException if the index is out of bounds
1:    */
1:   @Override
0:   public Vector getRow(int row) {
0:     return new MatrixVectorView(this, row, 0, 0, 1);
1:   }
1: 
1:   /**
1:    * Provides a view of the diagonal of a matrix.
1:    */
1:   @Override
1:   public Vector viewDiagonal() {
1:     return this.diagonal;
1:   }
1: 
1:   /**
1:    * Return the value at the given location, without checking bounds
1:    *
1:    * @param row    an int row index
1:    * @param column an int column index
1:    * @return the double at the index
1:    */
1:   @Override
1:   public double getQuick(int row, int column) {
1:     if (row == column) {
1:       return diagonal.get(row);
1:     } else {
1:       return 0;
1:     }
1:   }
1: 
1:   /**
1:    * Return an empty matrix of the same underlying class as the receiver
1:    *
1:    * @return a Matrix
1:    */
1:   @Override
1:   public Matrix like() {
0:     return new SparseRowMatrix(size());
1:   }
1: 
1:   /**
1:    * Returns an empty matrix of the same underlying class as the receiver and of the specified
1:    * size.
1:    *
1:    * @param rows    the int number of rows
1:    * @param columns the int number of columns
1:    */
1:   @Override
1:   public Matrix like(int rows, int columns) {
0:     return new SparseRowMatrix(new int[]{rows, columns});
1:   }
1: 
1:   @Override
1:   public void setQuick(int row, int column, double value) {
1:     if (row == column) {
1:       diagonal.set(row, value);
1:     } else {
1:       throw new UnsupportedOperationException("Can't set off-diagonal element");
1:     }
1:   }
1: 
1:   /**
1:    * Return the number of values in the recipient
1:    *
1:    * @return an int[2] containing [row, column] count
1:    */
1:   @Override
1:   public int[] getNumNondefaultElements() {
1:     throw new UnsupportedOperationException("Don't understand how to implement this");
1:   }
1: 
1:   /**
1:    * Return a new matrix containing the subset of the recipient
1:    *
1:    * @param offset an int[2] offset into the receiver
1:    * @param size   the int[2] size of the desired result
1:    * @return a new Matrix that is a view of the original
1:    * @throws CardinalityException if the length is greater than the cardinality of the receiver
1:    * @throws IndexException       if the offset is negative or the offset+length is outside of the
1:    *                              receiver
1:    */
1:   @Override
1:   public Matrix viewPart(int[] offset, int[] size) {
1:     return new MatrixView(this, offset, size);
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   private final Vector diagonal;
============================================================================