1:29a7f38: /**
1:29a7f38:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29a7f38:  * contributor license agreements.  See the NOTICE file distributed with
1:29a7f38:  * this work for additional information regarding copyright ownership.
1:29a7f38:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29a7f38:  * (the "License"); you may not use this file except in compliance with
1:29a7f38:  * the License.  You may obtain a copy of the License at
1:29a7f38:  *
1:29a7f38:  *     http://www.apache.org/licenses/LICENSE-2.0
1:29a7f38:  *
1:29a7f38:  * Unless required by applicable law or agreed to in writing, software
1:29a7f38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29a7f38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29a7f38:  * See the License for the specific language governing permissions and
1:29a7f38:  * limitations under the License.
1:29a7f38:  */
8:29a7f38: 
1:c9d49ee: package org.apache.mahout.utils.clustering;
1:29a7f38: 
1:29a7f38: import org.apache.hadoop.io.Text;
1:29a7f38: import org.apache.mahout.clustering.AbstractCluster;
1:29a7f38: import org.apache.mahout.clustering.Cluster;
1:8d102ea: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
1:51f58b8: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:b7b432c: import org.apache.mahout.common.distance.DistanceMeasure;
1:29a7f38: 
1:29a7f38: import java.io.IOException;
1:29a7f38: import java.io.Writer;
1:29a7f38: import java.util.Iterator;
1:29a7f38: import java.util.List;
1:29a7f38: import java.util.Map;
1:29a7f38: 
1:29a7f38: /**
1:4194a28:  * Implements a {@link ClusterWriter} that outputs in the format used by ClusterDumper in Mahout 0.5
1:29a7f38:  */
1:4194a28: public class ClusterDumperWriter extends AbstractClusterWriter {
1:9d083f1:   
1:4194a28:   private final int subString;
1:4194a28:   private final String[] dictionary;
1:4194a28:   private final int numTopFeatures;
1:9d083f1:   
1:8253491:   public ClusterDumperWriter(Writer writer, Map<Integer,List<WeightedPropertyVectorWritable>> clusterIdToPoints,
1:9d083f1:       DistanceMeasure measure, int numTopFeatures, String[] dictionary, int subString) {
1:b7b432c:     super(writer, clusterIdToPoints, measure);
1:29a7f38:     this.numTopFeatures = numTopFeatures;
1:29a7f38:     this.dictionary = dictionary;
1:29a7f38:     this.subString = subString;
2:29a7f38:   }
1:9d083f1:   
1:29a7f38:   @Override
1:51f58b8:   public void write(ClusterWritable clusterWritable) throws IOException {
1:51f58b8:     Cluster cluster = clusterWritable.getValue();
1:51f58b8:     String fmtStr = cluster.asFormatString(dictionary);
1:4194a28:     Writer writer = getWriter();
1:29a7f38:     if (subString > 0 && fmtStr.length() > subString) {
1:29a7f38:       writer.write(':');
1:29a7f38:       writer.write(fmtStr, 0, Math.min(subString, fmtStr.length()));
1:29a7f38:     } else {
1:29a7f38:       writer.write(fmtStr);
1:29a7f38:     }
1:9d083f1:     
1:29a7f38:     writer.write('\n');
1:9d083f1:     
1:29a7f38:     if (dictionary != null) {
1:51f58b8:       String topTerms = getTopFeatures(clusterWritable.getValue().getCenter(), dictionary, numTopFeatures);
1:29a7f38:       writer.write("\tTop Terms: ");
1:29a7f38:       writer.write(topTerms);
1:29a7f38:       writer.write('\n');
1:29a7f38:     }
1:9d083f1:     
1:8253491:     Map<Integer,List<WeightedPropertyVectorWritable>> clusterIdToPoints = getClusterIdToPoints();
1:8253491:     List<WeightedPropertyVectorWritable> points = clusterIdToPoints.get(clusterWritable.getValue().getId());
1:29a7f38:     if (points != null) {
1:29a7f38:       writer.write("\tWeight : [props - optional]:  Point:\n\t");
1:8253491:       for (Iterator<WeightedPropertyVectorWritable> iterator = points.iterator(); iterator.hasNext();) {
1:8253491:         WeightedPropertyVectorWritable point = iterator.next();
1:29a7f38:         writer.write(String.valueOf(point.getWeight()));
1:8253491:         Map<Text,Text> map = point.getProperties();
1:8253491:         // map can be null since empty maps when written are returned as null
1:8253491:         writer.write(" : [");
1:8253491:         if (map != null) {
1:8253491:           for (Map.Entry<Text,Text> entry : map.entrySet()) {
1:8253491:             writer.write(entry.getKey().toString());
1:8253491:             writer.write("=");
1:8253491:             writer.write(entry.getValue().toString());
1:44bf39a:           }
1:29a7f38:         }
1:8253491:         writer.write("]");
1:9d083f1:         
1:29a7f38:         writer.write(": ");
1:9d083f1:         
1:29a7f38:         writer.write(AbstractCluster.formatVector(point.getVector(), dictionary));
1:29a7f38:         if (iterator.hasNext()) {
1:29a7f38:           writer.write("\n\t");
1:29a7f38:         }
1:29a7f38:       }
1:29a7f38:       writer.write('\n');
1:29a7f38:     }
1:29a7f38:   }
1:29a7f38: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:8253491
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public ClusterDumperWriter(Writer writer, Map<Integer,List<WeightedPropertyVectorWritable>> clusterIdToPoints,
/////////////////////////////////////////////////////////////////////////
1:     Map<Integer,List<WeightedPropertyVectorWritable>> clusterIdToPoints = getClusterIdToPoints();
1:     List<WeightedPropertyVectorWritable> points = clusterIdToPoints.get(clusterWritable.getValue().getId());
1:       for (Iterator<WeightedPropertyVectorWritable> iterator = points.iterator(); iterator.hasNext();) {
1:         WeightedPropertyVectorWritable point = iterator.next();
1:         Map<Text,Text> map = point.getProperties();
1:         // map can be null since empty maps when written are returned as null
1:         writer.write(" : [");
1:         if (map != null) {
1:           for (Map.Entry<Text,Text> entry : map.entrySet()) {
1:             writer.write(entry.getKey().toString());
1:             writer.write("=");
1:             writer.write(entry.getValue().toString());
1:         writer.write("]");
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:214b329
/////////////////////////////////////////////////////////////////////////
0:           writer.write(" : [");
0:           writer.write("]");
commit:44bf39a
/////////////////////////////////////////////////////////////////////////
0:           if (map != null) {
0:             writer.write(" : [");
0:             for (Map.Entry<Text,Text> entry : map.entrySet()) {
0:               writer.write(entry.getKey().toString());
0:               writer.write("=");
0:               writer.write(entry.getValue().toString());
1:             }
0:             writer.write("]");
commit:9d083f1
/////////////////////////////////////////////////////////////////////////
1:   
1:   
0:   public ClusterDumperWriter(Writer writer, Map<Integer,List<WeightedVectorWritable>> clusterIdToPoints,
1:       DistanceMeasure measure, int numTopFeatures, String[] dictionary, int subString) {
1:   
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:     
0:     Map<Integer,List<WeightedVectorWritable>> clusterIdToPoints = getClusterIdToPoints();
0:       for (Iterator<WeightedVectorWritable> iterator = points.iterator(); iterator.hasNext();) {
0:           Map<Text,Text> map = tmp.getProperties();
0:           // map can be null since empty maps when written are returned as null
0:           if (map == null) break;
0:           for (Map.Entry<Text,Text> entry : map.entrySet()) {
1:         
1:         
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
0: import org.apache.mahout.clustering.classify.WeightedVectorWritable;
author:pranjan
-------------------------------------------------------------------------------
commit:51f58b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
/////////////////////////////////////////////////////////////////////////
1:   public void write(ClusterWritable clusterWritable) throws IOException {
1:     Cluster cluster = clusterWritable.getValue();
1:     String fmtStr = cluster.asFormatString(dictionary);
/////////////////////////////////////////////////////////////////////////
1:       String topTerms = getTopFeatures(clusterWritable.getValue().getCenter(), dictionary, numTopFeatures);
0:     List<WeightedVectorWritable> points = clusterIdToPoints.get(clusterWritable.getValue().getId());
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:b7b432c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.distance.DistanceMeasure;
/////////////////////////////////////////////////////////////////////////
0:                              DistanceMeasure measure,
1:     super(writer, clusterIdToPoints, measure);
commit:c9d49ee
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.clustering;
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.io;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
0: import com.google.common.collect.Lists;
0: import org.apache.commons.lang.StringUtils;
1: import org.apache.hadoop.io.Text;
1: import org.apache.mahout.clustering.AbstractCluster;
1: import org.apache.mahout.clustering.Cluster;
0: import org.apache.mahout.clustering.WeightedPropertyVectorWritable;
0: import org.apache.mahout.clustering.WeightedVectorWritable;
0: import org.apache.mahout.common.Pair;
0: import org.apache.mahout.math.Vector;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: import java.io.Writer;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.Comparator;
1: import java.util.Iterator;
0: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
0:  * Implements a {@link org.apache.mahout.utils.vectors.io.ClusterWriter} that outputs in the format
0:  * used by ClusterDumper in Mahout 0.5
1:  */
0: public class ClusterDumperWriter extends AbstractClusterWriter implements ClusterWriter {
0:   private transient static Logger log = LoggerFactory.getLogger(ClusterDumperWriter.class);
0:   protected int subString;
0:   protected String[] dictionary;
0:   protected int numTopFeatures;
1: 
0:   public ClusterDumperWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints, int numTopFeatures, String[] dictionary, int subString) {
0:     super(writer, clusterIdToPoints);
1:     this.numTopFeatures = numTopFeatures;
1:     this.dictionary = dictionary;
1:     this.subString = subString;
1:   }
1: 
1:   @Override
0:   public void write(Cluster value) throws IOException {
0:     String fmtStr = value.asFormatString(dictionary);
1:     if (subString > 0 && fmtStr.length() > subString) {
1:       writer.write(':');
1:       writer.write(fmtStr, 0, Math.min(subString, fmtStr.length()));
1:     } else {
1:       writer.write(fmtStr);
1:     }
1: 
1:     writer.write('\n');
1: 
1:     if (dictionary != null) {
0:       String topTerms = getTopFeatures(value.getCenter(), dictionary, numTopFeatures);
1:       writer.write("\tTop Terms: ");
1:       writer.write(topTerms);
1:       writer.write('\n');
1:     }
1: 
0:     List<WeightedVectorWritable> points = clusterIdToPoints.get(value.getId());
1:     if (points != null) {
1:       writer.write("\tWeight : [props - optional]:  Point:\n\t");
0:       for (Iterator<WeightedVectorWritable> iterator = points.iterator(); iterator.hasNext(); ) {
0:         WeightedVectorWritable point = iterator.next();
1:         writer.write(String.valueOf(point.getWeight()));
0:         if (point instanceof WeightedPropertyVectorWritable) {
0:           WeightedPropertyVectorWritable tmp = (WeightedPropertyVectorWritable) point;
0:           Map<Text, Text> map = tmp.getProperties();
0:           writer.write(" : [");
0:           for (Map.Entry<Text, Text> entry : map.entrySet()) {
0:             writer.write(entry.getKey().toString());
0:             writer.write("=");
0:             writer.write(entry.getValue().toString());
1:           }
0:           writer.write("]");
1:         }
1: 
1:         writer.write(": ");
1: 
1:         writer.write(AbstractCluster.formatVector(point.getVector(), dictionary));
1:         if (iterator.hasNext()) {
1:           writer.write("\n\t");
1:         }
1:       }
1:       writer.write('\n');
1:     }
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.io;
1:  * Implements a {@link ClusterWriter} that outputs in the format used by ClusterDumper in Mahout 0.5
1: public class ClusterDumperWriter extends AbstractClusterWriter {
1:   private final int subString;
1:   private final String[] dictionary;
1:   private final int numTopFeatures;
0: 
0:   public ClusterDumperWriter(Writer writer,
0:                              Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
0:                              int numTopFeatures,
0:                              String[] dictionary,
0:                              int subString) {
/////////////////////////////////////////////////////////////////////////
1:     Writer writer = getWriter();
/////////////////////////////////////////////////////////////////////////
0:     Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints = getClusterIdToPoints();
============================================================================