1:ffc7fab: /**
1:ffc7fab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ffc7fab:  * contributor license agreements.  See the NOTICE file distributed with
1:ffc7fab:  * this work for additional information regarding copyright ownership.
1:ffc7fab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ffc7fab:  * (the "License"); you may not use this file except in compliance with
1:ffc7fab:  * the License.  You may obtain a copy of the License at
1:ffc7fab:  *
1:ffc7fab:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ffc7fab:  *
1:ffc7fab:  * Unless required by applicable law or agreed to in writing, software
1:ffc7fab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ffc7fab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ffc7fab:  * See the License for the specific language governing permissions and
1:ffc7fab:  * limitations under the License.
1:ffc7fab:  */
1:ffc7fab: package org.apache.mahout.math.hadoop.stochasticsvd;
1:ffc7fab: 
1:ffc7fab: import java.io.DataInput;
1:ffc7fab: import java.io.DataOutput;
1:ffc7fab: import java.io.IOException;
1:bdb1c48: import java.io.Serializable;
1:ffc7fab: 
1:ffc7fab: import org.apache.hadoop.io.WritableComparable;
1:ffc7fab: import org.apache.hadoop.io.WritableComparator;
1:ffc7fab: import org.apache.hadoop.mapreduce.Mapper;
1:ffc7fab: import org.apache.mahout.math.Varint;
1:ffc7fab: 
1:ffc7fab: /**
1:ffc7fab:  * a key for vectors allowing to identify them by their coordinates in original
1:ffc7fab:  * split of A.
1:ffc7fab:  * 
1:ffc7fab:  * We assume all passes over A results in the same splits, thus, we can always
1:ffc7fab:  * prepare side files that come into contact with A, sp that they are sorted and
1:ffc7fab:  * partitioned same way.
1:ffc7fab:  * <P>
1:ffc7fab:  * 
1:ffc7fab:  * Hashcode is defined the way that all records of the same split go to the same
1:ffc7fab:  * reducer.
1:ffc7fab:  * <P>
1:ffc7fab:  * 
1:ffc7fab:  * In addition, we are defining a grouping comparator allowing group one split
1:ffc7fab:  * into the same reducer group.
1:ffc7fab:  * <P>
1:ffc7fab:  * 
1:ffc7fab:  */
1:ffc7fab: public class SplitPartitionedWritable implements
1:ffc7fab:     WritableComparable<SplitPartitionedWritable> {
1:ffc7fab: 
1:ffc7fab:   private int taskId;
1:ffc7fab:   private long taskItemOrdinal;
1:ffc7fab: 
1:ffc7fab:   public SplitPartitionedWritable(Mapper<?, ?, ?, ?>.Context mapperContext) {
1:ffc7fab:     // this is basically a split # if i understand it right
1:ffc7fab:     taskId = mapperContext.getTaskAttemptID().getTaskID().getId();
3:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public SplitPartitionedWritable() {
1:4841efb:   }
1:ffc7fab: 
1:ffc7fab:   public int getTaskId() {
1:ffc7fab:     return taskId;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public long getTaskItemOrdinal() {
1:ffc7fab:     return taskItemOrdinal;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public void incrementItemOrdinal() {
1:ffc7fab:     taskItemOrdinal++;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   public void setTaskItemOrdinal(long taskItemOrdinal) {
1:ffc7fab:     this.taskItemOrdinal = taskItemOrdinal;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public void readFields(DataInput in) throws IOException {
1:ffc7fab:     taskId = Varint.readUnsignedVarInt(in);
1:ffc7fab:     taskItemOrdinal = Varint.readUnsignedVarLong(in);
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public void write(DataOutput out) throws IOException {
1:ffc7fab:     Varint.writeUnsignedVarInt(taskId, out);
1:ffc7fab:     Varint.writeUnsignedVarLong(taskItemOrdinal, out);
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public int hashCode() {
1:1499411:     int prime = 31;
1:ffc7fab:     int result = 1;
1:ffc7fab:     result = prime * result + taskId;
1:ffc7fab:     return result;
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public boolean equals(Object obj) {
1:1499411:     if (this == obj) {
2:ffc7fab:       return true;
1:1499411:     }
1:1499411:     if (obj == null) {
2:ffc7fab:       return false;
1:1499411:     }
1:1499411:     if (getClass() != obj.getClass()) {
1:ffc7fab:       return false;
1:1499411:     }
1:ffc7fab:     SplitPartitionedWritable other = (SplitPartitionedWritable) obj;
1:4194a28:     return taskId == other.taskId;
1:1499411:   }
1:ffc7fab: 
1:ffc7fab:   @Override
1:ffc7fab:   public int compareTo(SplitPartitionedWritable o) {
1:ffc7fab:     if (taskId < o.taskId) {
1:ffc7fab:       return -1;
1:4194a28:     }
1:4194a28:     if (taskId > o.taskId) {
1:ffc7fab:       return 1;
1:ffc7fab:     }
1:ffc7fab:     if (taskItemOrdinal < o.taskItemOrdinal) {
1:ffc7fab:       return -1;
1:4194a28:     }
1:4194a28:     if (taskItemOrdinal > o.taskItemOrdinal) {
1:ffc7fab:       return 1;
1:ffc7fab:     }
1:ffc7fab:     return 0;
1:ffc7fab:   }
1:ffc7fab: 
1:bdb1c48:   public static final class SplitGroupingComparator extends WritableComparator implements Serializable {
1:ffc7fab: 
1:ffc7fab:     public SplitGroupingComparator() {
1:ffc7fab:       super(SplitPartitionedWritable.class, true);
1:ffc7fab:     }
1:ffc7fab: 
1:ffc7fab:     @Override
1:ffc7fab:     public int compare(Object a, Object b) {
1:ffc7fab:       SplitPartitionedWritable o1 = (SplitPartitionedWritable) a;
1:ffc7fab:       SplitPartitionedWritable o2 = (SplitPartitionedWritable) b;
1:ffc7fab: 
1:ffc7fab:       if (o1.taskId < o2.taskId) {
1:ffc7fab:         return -1;
1:4194a28:       }
1:4194a28:       if (o1.taskId > o2.taskId) {
1:ffc7fab:         return 1;
1:ffc7fab:       }
1:ffc7fab:       return 0;
1:ffc7fab:     }
1:ffc7fab: 
1:ffc7fab:   }
1:ffc7fab: 
1:ffc7fab: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
1:   public static final class SplitGroupingComparator extends WritableComparator implements Serializable {
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:63546f9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public static final class SplitGroupingComparator extends WritableComparator {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0: import java.io.Serializable;
/////////////////////////////////////////////////////////////////////////
0:   public static final class SplitGroupingComparator extends WritableComparator implements Serializable {
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:     return taskId == other.taskId;
1:     }
1:     if (taskId > o.taskId) {
1:     }
1:     if (taskItemOrdinal > o.taskItemOrdinal) {
/////////////////////////////////////////////////////////////////////////
1:       }
1:       if (o1.taskId > o2.taskId) {
commit:1499411
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     int prime = 31;
/////////////////////////////////////////////////////////////////////////
1:     if (this == obj) {
1:     }
1:     if (obj == null) {
1:     }
1:     if (getClass() != obj.getClass()) {
1:     }
0:     if (taskId != other.taskId) {
1:     }
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:ffc7fab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.math.hadoop.stochasticsvd;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.hadoop.io.WritableComparable;
1: import org.apache.hadoop.io.WritableComparator;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.Varint;
1: 
1: /**
1:  * a key for vectors allowing to identify them by their coordinates in original
1:  * split of A.
1:  * 
1:  * We assume all passes over A results in the same splits, thus, we can always
1:  * prepare side files that come into contact with A, sp that they are sorted and
1:  * partitioned same way.
1:  * <P>
1:  * 
1:  * Hashcode is defined the way that all records of the same split go to the same
1:  * reducer.
1:  * <P>
1:  * 
1:  * In addition, we are defining a grouping comparator allowing group one split
1:  * into the same reducer group.
1:  * <P>
1:  * 
1:  */
1: public class SplitPartitionedWritable implements
1:     WritableComparable<SplitPartitionedWritable> {
1: 
1:   private int taskId;
1:   private long taskItemOrdinal;
1: 
1:   public SplitPartitionedWritable(Mapper<?, ?, ?, ?>.Context mapperContext) {
0:     super();
1:     // this is basically a split # if i understand it right
1:     taskId = mapperContext.getTaskAttemptID().getTaskID().getId();
1:   }
1: 
1:   public SplitPartitionedWritable() {
0:     super();
1:   }
1: 
1:   public int getTaskId() {
1:     return taskId;
1:   }
1: 
1:   public long getTaskItemOrdinal() {
1:     return taskItemOrdinal;
1:   }
1: 
1:   public void incrementItemOrdinal() {
1:     taskItemOrdinal++;
1:   }
1: 
1:   public void setTaskItemOrdinal(long taskItemOrdinal) {
1:     this.taskItemOrdinal = taskItemOrdinal;
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     taskId = Varint.readUnsignedVarInt(in);
1:     taskItemOrdinal = Varint.readUnsignedVarLong(in);
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     Varint.writeUnsignedVarInt(taskId, out);
1:     Varint.writeUnsignedVarLong(taskItemOrdinal, out);
1:   }
1: 
1:   @Override
1:   public int hashCode() {
0:     final int prime = 31;
1:     int result = 1;
1:     result = prime * result + taskId;
1:     return result;
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
0:     if (this == obj)
1:       return true;
0:     if (obj == null)
1:       return false;
0:     if (getClass() != obj.getClass())
1:       return false;
1:     SplitPartitionedWritable other = (SplitPartitionedWritable) obj;
0:     if (taskId != other.taskId)
1:       return false;
1:     return true;
1:   }
1: 
1:   @Override
1:   public int compareTo(SplitPartitionedWritable o) {
1:     if (taskId < o.taskId) {
1:       return -1;
0:     } else if (taskId > o.taskId) {
1:       return 1;
1:     }
1:     if (taskItemOrdinal < o.taskItemOrdinal) {
1:       return -1;
0:     } else if (taskItemOrdinal > o.taskItemOrdinal) {
1:       return 1;
1:     }
1:     return 0;
1:   }
1: 
0:   public static final class SplitGroupingComparator extends WritableComparator {
1: 
1:     public SplitGroupingComparator() {
1:       super(SplitPartitionedWritable.class, true);
1:     }
1: 
1:     @Override
1:     public int compare(Object a, Object b) {
1:       SplitPartitionedWritable o1 = (SplitPartitionedWritable) a;
1:       SplitPartitionedWritable o2 = (SplitPartitionedWritable) b;
1: 
1:       if (o1.taskId < o2.taskId) {
1:         return -1;
0:       } else if (o1.taskId > o2.taskId) {
1:         return 1;
1:       }
1:       return 0;
1:     }
1: 
1:   }
1: 
1: }
============================================================================