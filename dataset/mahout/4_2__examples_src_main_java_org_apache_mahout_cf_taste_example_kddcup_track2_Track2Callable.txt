1:d25dd20: /**
1:d25dd20:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d25dd20:  * contributor license agreements.  See the NOTICE file distributed with
1:d25dd20:  * this work for additional information regarding copyright ownership.
1:d25dd20:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d25dd20:  * (the "License"); you may not use this file except in compliance with
1:d25dd20:  * the License.  You may obtain a copy of the License at
1:d25dd20:  *
1:d25dd20:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d25dd20:  *
1:d25dd20:  * Unless required by applicable law or agreed to in writing, software
1:d25dd20:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d25dd20:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d25dd20:  * See the License for the specific language governing permissions and
1:d25dd20:  * limitations under the License.
1:d25dd20:  */
2:d25dd20: 
1:d25dd20: package org.apache.mahout.cf.taste.example.kddcup.track2;
1:d25dd20: 
1:d25dd20: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1:d25dd20: import org.apache.mahout.cf.taste.common.TasteException;
1:d25dd20: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:d25dd20: import org.apache.mahout.cf.taste.recommender.Recommender;
1:d25dd20: import org.slf4j.Logger;
1:d25dd20: import org.slf4j.LoggerFactory;
1:d25dd20: 
1:4ef9d31: import java.util.ArrayList;
1:4ef9d31: import java.util.Collection;
1:4ef9d31: import java.util.Collections;
1:4ef9d31: import java.util.HashSet;
1:4ef9d31: import java.util.List;
1:4ef9d31: import java.util.TreeMap;
1:4ef9d31: import java.util.concurrent.Callable;
1:4ef9d31: import java.util.concurrent.atomic.AtomicInteger;
1:4ef9d31: 
1:d25dd20: final class Track2Callable implements Callable<UserResult> {
1:d25dd20: 
1:d25dd20:   private static final Logger log = LoggerFactory.getLogger(Track2Callable.class);
1:17988ce:   private static final AtomicInteger COUNT = new AtomicInteger();
1:d25dd20: 
1:d25dd20:   private final Recommender recommender;
1:d25dd20:   private final PreferenceArray userTest;
1:d25dd20: 
1:d25dd20:   Track2Callable(Recommender recommender, PreferenceArray userTest) {
1:d25dd20:     this.recommender = recommender;
1:d25dd20:     this.userTest = userTest;
1:d25dd20:   }
1:d25dd20: 
1:d25dd20:   @Override
1:d25dd20:   public UserResult call() throws TasteException {
1:d25dd20: 
1:d25dd20:     int testSize = userTest.length();
1:d25dd20:     if (testSize != 6) {
1:d25dd20:       throw new IllegalArgumentException("Expecting 6 items for user but got " + userTest);
1:d25dd20:     }
1:d25dd20:     long userID = userTest.get(0).getUserID();
1:87c15be:     TreeMap<Double,Long> estimateToItemID = new TreeMap<>(Collections.reverseOrder());
1:d25dd20: 
1:d25dd20:     for (int i = 0; i < testSize; i++) {
1:d25dd20:       long itemID = userTest.getItemID(i);
1:d25dd20:       double estimate;
1:d25dd20:       try {
1:d25dd20:         estimate = recommender.estimatePreference(userID, itemID);
1:d25dd20:       } catch (NoSuchItemException nsie) {
1:d25dd20:         // OK in the sample data provided before the contest, should never happen otherwise
1:d25dd20:         log.warn("Unknown item {}; OK unless this is the real contest data", itemID);
1:d25dd20:         continue;
1:d25dd20:       }
1:d25dd20: 
1:d25dd20:       if (!Double.isNaN(estimate)) {
1:d25dd20:         estimateToItemID.put(estimate, itemID);
1:d25dd20:       }
1:d25dd20:     }
1:d25dd20: 
1:d25dd20:     Collection<Long> itemIDs = estimateToItemID.values();
1:4ef9d31:     List<Long> topThree = new ArrayList<>(itemIDs);
1:d25dd20:     if (topThree.size() > 3) {
1:d25dd20:       topThree = topThree.subList(0, 3);
1:d25dd20:     } else if (topThree.size() < 3) {
1:d25dd20:       log.warn("Unable to recommend three items for {}", userID);
1:d25dd20:       // Some NaNs - just guess at the rest then
1:4ef9d31:       Collection<Long> newItemIDs = new HashSet<>(3);
1:d25dd20:       newItemIDs.addAll(itemIDs);
1:d25dd20:       int i = 0;
1:d25dd20:       while (i < testSize && newItemIDs.size() < 3) {
1:d25dd20:         newItemIDs.add(userTest.getItemID(i));
1:d25dd20:         i++;
1:d25dd20:       }
1:4ef9d31:       topThree = new ArrayList<>(newItemIDs);
1:d25dd20:     }
1:d25dd20:     if (topThree.size() != 3) {
1:d25dd20:       throw new IllegalStateException();
1:d25dd20:     }
1:d25dd20: 
1:d25dd20:     boolean[] result = new boolean[testSize];
1:d25dd20:     for (int i = 0; i < testSize; i++) {
1:d25dd20:       result[i] = topThree.contains(userTest.getItemID(i));
1:d25dd20:     }
1:17988ce: 
1:17988ce:     if (COUNT.incrementAndGet() % 1000 == 0) {
1:17988ce:       log.info("Completed {} users", COUNT.get());
1:17988ce:     }
1:17988ce: 
1:d25dd20:     return new UserResult(userID, result);
1:d25dd20:   }
1:d25dd20: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.TreeMap;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
/////////////////////////////////////////////////////////////////////////
1:     List<Long> topThree = new ArrayList<>(itemIDs);
1:       Collection<Long> newItemIDs = new HashSet<>(3);
1:       topThree = new ArrayList<>(newItemIDs);
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     TreeMap<Double,Long> estimateToItemID = new TreeMap<>(Collections.reverseOrder());
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
0:       Collection<Long> newItemIDs = Sets.newHashSetWithExpectedSize(3);
commit:74f849b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     List<Long> topThree = Lists.newArrayList(itemIDs);
/////////////////////////////////////////////////////////////////////////
0:       topThree = Lists.newArrayList(newItemIDs);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:17988ce
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:   private static final AtomicInteger COUNT = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
1: 
1:     if (COUNT.incrementAndGet() % 1000 == 0) {
1:       log.info("Completed {} users", COUNT.get());
1:     }
1: 
commit:d25dd20
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.example.kddcup.track2;
1: 
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.TreeMap;
0: import java.util.concurrent.Callable;
1: 
1: import org.apache.mahout.cf.taste.common.NoSuchItemException;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.cf.taste.recommender.Recommender;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: final class Track2Callable implements Callable<UserResult> {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(Track2Callable.class);
1: 
1:   private final Recommender recommender;
1:   private final PreferenceArray userTest;
1: 
1:   Track2Callable(Recommender recommender, PreferenceArray userTest) {
1:     this.recommender = recommender;
1:     this.userTest = userTest;
1:   }
1: 
1:   @Override
1:   public UserResult call() throws TasteException {
1: 
1:     int testSize = userTest.length();
1:     if (testSize != 6) {
1:       throw new IllegalArgumentException("Expecting 6 items for user but got " + userTest);
1:     }
1:     long userID = userTest.get(0).getUserID();
0:     TreeMap<Double,Long> estimateToItemID = new TreeMap<Double,Long>(Collections.reverseOrder());
1: 
1:     for (int i = 0; i < testSize; i++) {
1:       long itemID = userTest.getItemID(i);
1:       double estimate;
1:       try {
1:         estimate = recommender.estimatePreference(userID, itemID);
1:       } catch (NoSuchItemException nsie) {
1:         // OK in the sample data provided before the contest, should never happen otherwise
1:         log.warn("Unknown item {}; OK unless this is the real contest data", itemID);
1:         continue;
1:       }
1: 
1:       if (!Double.isNaN(estimate)) {
1:         estimateToItemID.put(estimate, itemID);
1:       }
1:     }
1: 
1:     Collection<Long> itemIDs = estimateToItemID.values();
0:     List<Long> topThree = new ArrayList<Long>(itemIDs);
1:     if (topThree.size() > 3) {
1:       topThree = topThree.subList(0, 3);
1:     } else if (topThree.size() < 3) {
1:       log.warn("Unable to recommend three items for {}", userID);
1:       // Some NaNs - just guess at the rest then
0:       Collection<Long> newItemIDs = new HashSet<Long>(3);
1:       newItemIDs.addAll(itemIDs);
1:       int i = 0;
1:       while (i < testSize && newItemIDs.size() < 3) {
1:         newItemIDs.add(userTest.getItemID(i));
1:         i++;
1:       }
0:       topThree = new ArrayList<Long>(newItemIDs);
1:     }
1:     if (topThree.size() != 3) {
1:       throw new IllegalStateException();
1:     }
1: 
1:     boolean[] result = new boolean[testSize];
1:     for (int i = 0; i < testSize; i++) {
1:       result[i] = topThree.contains(userTest.getItemID(i));
1:     }
1:     return new UserResult(userID, result);
1:   }
1: }
============================================================================