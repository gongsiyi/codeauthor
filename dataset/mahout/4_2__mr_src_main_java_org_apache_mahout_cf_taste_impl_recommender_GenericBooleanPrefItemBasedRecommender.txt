1:5d90b58: /**
1:5d90b58:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5d90b58:  * contributor license agreements.  See the NOTICE file distributed with
1:5d90b58:  * this work for additional information regarding copyright ownership.
1:5d90b58:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5d90b58:  * (the "License"); you may not use this file except in compliance with
1:5d90b58:  * the License.  You may obtain a copy of the License at
1:5d90b58:  *
1:5d90b58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5d90b58:  *
1:5d90b58:  * Unless required by applicable law or agreed to in writing, software
1:5d90b58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5d90b58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5d90b58:  * See the License for the specific language governing permissions and
1:5d90b58:  * limitations under the License.
1:5d90b58:  */
1:5d90b58: 
1:5d90b58: package org.apache.mahout.cf.taste.impl.recommender;
1:5d90b58: 
1:5d90b58: import org.apache.mahout.cf.taste.common.TasteException;
1:5d90b58: import org.apache.mahout.cf.taste.model.DataModel;
1:5d90b58: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:cf12948: import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
1:0ac8636: import org.apache.mahout.cf.taste.recommender.MostSimilarItemsCandidateItemsStrategy;
1:5d90b58: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1:5d90b58: 
1:5d90b58: /**
1:5d90b58:  * A variant on {@link GenericItemBasedRecommender} which is appropriate for use when no notion of preference
1:5d90b58:  * value exists in the data.
1:5d90b58:  *
1:5d90b58:  * @see org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefUserBasedRecommender
1:5d90b58:  */
1:5d90b58: public final class GenericBooleanPrefItemBasedRecommender extends GenericItemBasedRecommender {
1:5d90b58: 
1:5d90b58:   public GenericBooleanPrefItemBasedRecommender(DataModel dataModel, ItemSimilarity similarity) {
1:5d90b58:     super(dataModel, similarity);
1:5d90b58:   }
1:cf12948: 
1:0ac8636:   public GenericBooleanPrefItemBasedRecommender(DataModel dataModel, ItemSimilarity similarity,
1:0ac8636:       CandidateItemsStrategy candidateItemsStrategy, MostSimilarItemsCandidateItemsStrategy
1:0ac8636:       mostSimilarItemsCandidateItemsStrategy) {
1:0ac8636:     super(dataModel, similarity, candidateItemsStrategy, mostSimilarItemsCandidateItemsStrategy);
1:cf12948:   }
1:5d90b58:   
1:5d90b58:   /**
1:5d90b58:    * This computation is in a technical sense, wrong, since in the domain of "boolean preference users" where
1:5d90b58:    * all preference values are 1, this method should only ever return 1.0 or NaN. This isn't terribly useful
1:5d90b58:    * however since it means results can't be ranked by preference value (all are 1). So instead this returns a
1:5d90b58:    * sum of similarities.
1:5d90b58:    */
1:5d90b58:   @Override
1:e23728d:   protected float doEstimatePreference(long userID, PreferenceArray preferencesFromUser, long itemID)
1:3218e95:     throws TasteException {
1:e23728d:     double[] similarities = getSimilarity().itemSimilarities(itemID, preferencesFromUser.getIDs());
1:5d90b58:     boolean foundAPref = false;
1:5d90b58:     double totalSimilarity = 0.0;
1:5d90b58:     for (double theSimilarity : similarities) {
1:5d90b58:       if (!Double.isNaN(theSimilarity)) {
1:5d90b58:         foundAPref = true;
1:5d90b58:         totalSimilarity += theSimilarity;
1:5d90b58:       }
1:5d90b58:     }
1:5d90b58:     return foundAPref ? (float) totalSimilarity : Float.NaN;
1:5d90b58:   }
1:5d90b58:   
1:5d90b58:   @Override
1:5d90b58:   public String toString() {
1:5d90b58:     return "GenericBooleanPrefItemBasedRecommender";
1:5d90b58:   }
1:5d90b58:   
1:5d90b58: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:3218e95
/////////////////////////////////////////////////////////////////////////
1:     throws TasteException {
commit:cf12948
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
/////////////////////////////////////////////////////////////////////////
1: 
0:   public GenericBooleanPrefItemBasedRecommender(DataModel dataModel,
0:                                                 ItemSimilarity similarity,
0:                                                 CandidateItemsStrategy candidateItemsStrategy) {
0:     super(dataModel, similarity, candidateItemsStrategy);
1:   }
commit:5d90b58
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
1: 
1: /**
1:  * A variant on {@link GenericItemBasedRecommender} which is appropriate for use when no notion of preference
1:  * value exists in the data.
1:  *
1:  * @see org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefUserBasedRecommender
1:  */
1: public final class GenericBooleanPrefItemBasedRecommender extends GenericItemBasedRecommender {
1: 
1:   public GenericBooleanPrefItemBasedRecommender(DataModel dataModel, ItemSimilarity similarity) {
1:     super(dataModel, similarity);
1:   }
1:   
1:   /**
1:    * This computation is in a technical sense, wrong, since in the domain of "boolean preference users" where
1:    * all preference values are 1, this method should only ever return 1.0 or NaN. This isn't terribly useful
1:    * however since it means results can't be ranked by preference value (all are 1). So instead this returns a
1:    * sum of similarities.
1:    */
1:   @Override
0:   protected float doEstimatePreference(long userID, long itemID) throws TasteException {
0:     PreferenceArray prefs = getDataModel().getPreferencesFromUser(userID);
0:     double[] similarities = getSimilarity().itemSimilarities(itemID, prefs.getIDs());
1:     boolean foundAPref = false;
1:     double totalSimilarity = 0.0;
1:     for (double theSimilarity : similarities) {
1:       if (!Double.isNaN(theSimilarity)) {
1:         foundAPref = true;
1:         totalSimilarity += theSimilarity;
1:       }
1:     }
1:     return foundAPref ? (float) totalSimilarity : Float.NaN;
1:   }
1:   
1:   @Override
1:   public String toString() {
1:     return "GenericBooleanPrefItemBasedRecommender";
1:   }
1:   
1: }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e23728d
/////////////////////////////////////////////////////////////////////////
1:   protected float doEstimatePreference(long userID, PreferenceArray preferencesFromUser, long itemID)
0:       throws TasteException {
1:     double[] similarities = getSimilarity().itemSimilarities(itemID, preferencesFromUser.getIDs());
commit:0ac8636
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.recommender.MostSimilarItemsCandidateItemsStrategy;
/////////////////////////////////////////////////////////////////////////
1:   public GenericBooleanPrefItemBasedRecommender(DataModel dataModel, ItemSimilarity similarity,
1:       CandidateItemsStrategy candidateItemsStrategy, MostSimilarItemsCandidateItemsStrategy
1:       mostSimilarItemsCandidateItemsStrategy) {
1:     super(dataModel, similarity, candidateItemsStrategy, mostSimilarItemsCandidateItemsStrategy);
============================================================================