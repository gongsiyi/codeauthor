1:ff79ff4: /**
1:ff79ff4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ff79ff4:  * contributor license agreements.  See the NOTICE file distributed with
1:ff79ff4:  * this work for additional information regarding copyright ownership.
1:ff79ff4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ff79ff4:  * (the "License"); you may not use this file except in compliance with
1:ff79ff4:  * the License.  You may obtain a copy of the License at
1:ff79ff4:  *
1:ff79ff4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ff79ff4:  *
1:ff79ff4:  * Unless required by applicable law or agreed to in writing, software
1:ff79ff4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ff79ff4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff79ff4:  * See the License for the specific language governing permissions and
1:ff79ff4:  * limitations under the License.
1:ff79ff4:  */
1:ff79ff4: 
1:292bb9d: package org.apache.mahout.ep;
1:ff79ff4: 
1:913d44d: import com.google.common.collect.Lists;
1:02f8694: import org.apache.hadoop.io.Writable;
1:02f8694: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
1:c0c8d9f: import org.apache.mahout.common.RandomUtils;
1:913d44d: 
1:02f8694: import java.io.DataInput;
1:02f8694: import java.io.DataOutput;
1:02f8694: import java.io.IOException;
1:292bb9d: import java.util.Arrays;
1:c0c8d9f: import java.util.Collection;
1:6fca24e: import java.util.Locale;
1:292bb9d: import java.util.Random;
1:c0c8d9f: import java.util.concurrent.atomic.AtomicInteger;
15:292bb9d: 
1:292bb9d: /**
1:4b25f31:  * Records evolutionary state and provides a mutation operation for recorded-step meta-mutation.
1:4b25f31:  *
1:8b194c8:  * You provide the payload, this class provides the mutation operations.  During mutation,
1:4b25f31:  * the payload is copied and after the state variables are changed, they are passed to the
1:4b25f31:  * payload.
1:4b25f31:  *
1:4b25f31:  * Parameters are internally mutated in a state space that spans all of R^n, but parameters
1:4b25f31:  * passed to the payload are transformed as specified by a call to setMap().  The default
1:4b25f31:  * mapping is the identity map, but uniform-ish or exponential-ish coverage of a range are
1:4b25f31:  * also supported.
1:4b25f31:  *
1:4b25f31:  * More information on the underlying algorithm can be found in the following paper
1:4b25f31:  *
1:4b25f31:  * http://arxiv.org/abs/0803.3838
1:4b25f31:  *
1:4b25f31:  * @see Mapping
1:292bb9d:  */
1:02f8694: public class State<T extends Payload<U>, U> implements Comparable<State<T, U>>, Writable {
1:292bb9d: 
1:292bb9d:   // object count is kept to break ties in comparison.
1:5ce5992:   private static final AtomicInteger OBJECT_COUNT = new AtomicInteger();
1:4b25f31: 
1:5ce5992:   private int id = OBJECT_COUNT.getAndIncrement();
1:c0c8d9f:   private Random gen = RandomUtils.getRandom();
1:292bb9d:   // current state
1:292bb9d:   private double[] params;
1:292bb9d:   // mappers to transform state
1:292bb9d:   private Mapping[] maps;
1:292bb9d:   // omni-directional mutation
1:292bb9d:   private double omni;
1:292bb9d:   // directional mutation
1:292bb9d:   private double[] step;
1:292bb9d:   // current fitness value
1:292bb9d:   private double value;
1:051cbcf:   private T payload;
1:a351fdf: 
1:913d44d:   public State() {
1:a351fdf:   }
1:a351fdf: 
1:292bb9d:   /**
1:292bb9d:    * Invent a new state with no momentum (yet).
1:292bb9d:    */
1:292bb9d:   public State(double[] x0, double omni) {
1:292bb9d:     params = Arrays.copyOf(x0, x0.length);
3:292bb9d:     this.omni = omni;
1:292bb9d:     step = new double[params.length];
1:292bb9d:     maps = new Mapping[params.length];
1:a351fdf:   }
1:a351fdf: 
1:292bb9d:   /**
1:a351fdf:    * Deep copies a state, useful in mutation.
1:292bb9d:    */
1:02f8694:   public State<T, U> copy() {
1:87c15be:     State<T, U> r = new State<>();
1:a351fdf:     r.params = Arrays.copyOf(this.params, this.params.length);
1:a351fdf:     r.omni = this.omni;
1:a351fdf:     r.step = Arrays.copyOf(this.step, this.step.length);
1:a351fdf:     r.maps = Arrays.copyOf(this.maps, this.maps.length);
1:090e188:     if (this.payload != null) {
1:051cbcf:       r.payload = (T) this.payload.copy();
1:ec393c0:     }
1:a351fdf:     r.gen = this.gen;
1:6fca24e:     return r;
10:292bb9d:   }
1:a351fdf: 
1:292bb9d:   /**
1:4b25f31:    * Clones this state with a random change in position.  Copies the payload and
1:4b25f31:    * lets it know about the change.
2:292bb9d:    *
1:292bb9d:    * @return A new state.
1:292bb9d:    */
1:02f8694:   public State<T, U> mutate() {
1:292bb9d:     double sum = 0;
1:292bb9d:     for (double v : step) {
1:292bb9d:       sum += v * v;
1:292bb9d:     }
1:292bb9d:     sum = Math.sqrt(sum);
1:4b25f31:     double lambda = 1 + gen.nextGaussian();
1:4b25f31: 
1:02f8694:     State<T, U> r = this.copy();
1:4b25f31:     double magnitude = 0.9 * omni + sum / 10;
1:971a56d:     r.omni = magnitude * -Math.log1p(-gen.nextDouble());
1:292bb9d:     for (int i = 0; i < step.length; i++) {
1:292bb9d:       r.step[i] = lambda * step[i] + r.omni * gen.nextGaussian();
1:292bb9d:       r.params[i] += r.step[i];
1:292bb9d:     }
1:489a1c2:     if (this.payload != null) {
1:ec393c0:       r.payload.update(r.getMappedParams());
1:ec393c0:     }
1:a351fdf:     return r;
1:292bb9d:   }
1:292bb9d: 
1:292bb9d:   /**
1:292bb9d:    * Defines the transformation for a parameter.
1:4b25f31:    * @param i Which parameter's mapping to define.
1:292bb9d:    * @param m The mapping to use.
1:4b25f31:    * @see org.apache.mahout.ep.Mapping
1:292bb9d:    */
1:292bb9d:   public void setMap(int i, Mapping m) {
1:292bb9d:     maps[i] = m;
1:292bb9d:   }
1:292bb9d: 
1:292bb9d:   /**
1:292bb9d:    * Returns a transformed parameter.
1:292bb9d:    * @param i  The parameter to return.
1:292bb9d:    * @return The value of the parameter.
1:292bb9d:    */
1:292bb9d:   public double get(int i) {
1:292bb9d:     Mapping m = maps[i];
1:6fca24e:     return m == null ? params[i] : m.apply(params[i]);
1:292bb9d:   }
1:292bb9d: 
1:913d44d:   public int getId() {
1:913d44d:     return id;
1:913d44d:   }
1:913d44d: 
1:913d44d:   public double[] getParams() {
1:913d44d:     return params;
1:913d44d:   }
1:913d44d: 
1:913d44d:   public Mapping[] getMaps() {
1:913d44d:     return maps;
1:913d44d:   }
1:913d44d: 
1:292bb9d:   /**
1:292bb9d:    * Returns all the parameters in mapped form.
1:292bb9d:    * @return An array of parameters.
1:292bb9d:    */
1:292bb9d:   public double[] getMappedParams() {
1:292bb9d:     double[] r = Arrays.copyOf(params, params.length);
1:292bb9d:     for (int i = 0; i < params.length; i++) {
1:292bb9d:       r[i] = get(i);
1:292bb9d:     }
3:292bb9d:     return r;
1:292bb9d:   }
1:292bb9d: 
1:292bb9d:   public double getOmni() {
1:292bb9d:     return omni;
1:292bb9d:   }
1:292bb9d: 
1:292bb9d:   public double[] getStep() {
1:292bb9d:     return step;
1:4b25f31:   }
1:4b25f31: 
1:4b25f31:   public T getPayload() {
1:051cbcf:     return payload;
1:4b25f31:   }
1:4b25f31: 
1:4b25f31:   public double getValue() {
1:4b25f31:     return value;
1:4b25f31:   }
1:4b25f31: 
1:4b25f31:   public void setOmni(double omni) {
1:4b25f31:     this.omni = omni;
1:4b25f31:   }
1:4b25f31: 
1:913d44d:   public void setId(int id) {
1:913d44d:     this.id = id;
1:913d44d:   }
1:913d44d: 
1:913d44d:   public void setStep(double[] step) {
1:913d44d:     this.step = step;
1:913d44d:   }
1:913d44d: 
1:913d44d:   public void setMaps(Mapping[] maps) {
1:913d44d:     this.maps = maps;
1:913d44d:   }
1:913d44d: 
1:913d44d:   public void setMaps(Iterable<Mapping> maps) {
1:c0c8d9f:     Collection<Mapping> list = Lists.newArrayList(maps);
1:c0c8d9f:     this.maps = list.toArray(new Mapping[list.size()]);
1:913d44d:   }
1:913d44d: 
1:4b25f31:   public void setValue(double v) {
1:4b25f31:     value = v;
1:4b25f31:   }
1:4b25f31: 
1:4b25f31:   public void setPayload(T payload) {
1:4b25f31:     this.payload = payload;
1:4b25f31:   }
1:a351fdf: 
1:5ce5992:   @Override
1:5ce5992:   public boolean equals(Object o) {
1:5ce5992:     if (!(o instanceof State)) {
1:5ce5992:       return false;
1:5ce5992:     }
1:02f8694:     State<?,?> other = (State<?,?>) o;
1:5ce5992:     return id == other.id && value == other.value;
1:5ce5992:   }
1:5ce5992: 
1:1499411:   @Override
1:5ce5992:   public int hashCode() {
1:5ce5992:     return RandomUtils.hashDouble(value) ^ id;
1:5ce5992:   }
1:5ce5992: 
1:292bb9d:   /**
1:292bb9d:    * Natural order is to sort in descending order of score.  Creation order is used as a
1:292bb9d:    * tie-breaker.
1:292bb9d:    *
1:292bb9d:    * @param other The state to compare with.
1:292bb9d:    * @return -1, 0, 1 if the other state is better, identical or worse than this one.
1:292bb9d:    */
1:292bb9d:   @Override
1:02f8694:   public int compareTo(State<T, U> other) {
1:292bb9d:     int r = Double.compare(other.value, this.value);
1:8a99d75:     if (r != 0) {
1:8a99d75:       return r;
1:8a99d75:     }
1:8a99d75:     if (this.id < other.id) {
1:8a99d75:       return -1;
1:4194a28:     }
1:4194a28:     if (this.id > other.id) {
1:8a99d75:       return 1;
1:8a99d75:     }
1:8a99d75:     return 0;
1:a351fdf:   }
1:292bb9d: 
1:1499411:   @Override
1:4b25f31:   public String toString() {
1:4b25f31:     double sum = 0;
1:4b25f31:     for (double v : step) {
1:4b25f31:       sum += v * v;
1:4b25f31:     }
1:6fca24e:     return String.format(Locale.ENGLISH, "<S/%s %.3f %.3f>", payload, omni + Math.sqrt(sum), value);
1:a351fdf:   }
1:02f8694: 
1:02f8694:   @Override
1:02f8694:   public void write(DataOutput out) throws IOException {
1:02f8694:     out.writeInt(id);
1:02f8694:     out.writeInt(params.length);
1:02f8694:     for (double v : params) {
1:02f8694:       out.writeDouble(v);
1:02f8694:     }
1:02f8694:     for (Mapping map : maps) {
1:02f8694:       PolymorphicWritable.write(out, map);
1:02f8694:     }
1:02f8694: 
1:02f8694:     out.writeDouble(omni);
1:02f8694:     for (double v : step) {
1:02f8694:       out.writeDouble(v);
1:02f8694:     }
1:02f8694: 
1:02f8694:     out.writeDouble(value);
1:02f8694:     PolymorphicWritable.write(out, payload);
1:02f8694:   }
1:02f8694: 
1:02f8694:   @Override
1:02f8694:   public void readFields(DataInput input) throws IOException {
1:02f8694:     id = input.readInt();
1:02f8694:     int n = input.readInt();
1:02f8694:     params = new double[n];
1:02f8694:     for (int i = 0; i < n; i++) {
1:02f8694:       params[i] = input.readDouble();
1:02f8694:     }
1:02f8694: 
1:02f8694:     maps = new Mapping[n];
1:02f8694:     for (int i = 0; i < n; i++) {
1:02f8694:       maps[i] = PolymorphicWritable.read(input, Mapping.class);
1:02f8694:     }
1:02f8694:     omni = input.readDouble();
1:02f8694:     step = new double[n];
1:02f8694:     for (int i = 0; i < n; i++) {
1:02f8694:       step[i] = input.readDouble();
1:02f8694:     }
1:02f8694:     value = input.readDouble();
1:051cbcf:     payload = (T) PolymorphicWritable.read(input, Payload.class);
1:02f8694:   }
1:292bb9d: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:     State<T, U> r = new State<>();
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:8b194c8
/////////////////////////////////////////////////////////////////////////
1:  * You provide the payload, this class provides the mutation operations.  During mutation,
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
0:  * You provide the payload, this class provides the mutation OPERATIONS.  During mutation,
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1:   private T payload;
/////////////////////////////////////////////////////////////////////////
1:       r.payload = (T) this.payload.copy();
/////////////////////////////////////////////////////////////////////////
1:     return payload;
/////////////////////////////////////////////////////////////////////////
1:     payload = (T) PolymorphicWritable.read(input, Payload.class);
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:     }
1:     if (this.id > other.id) {
commit:971a56d
/////////////////////////////////////////////////////////////////////////
1:     r.omni = magnitude * -Math.log1p(-gen.nextDouble());
commit:1499411
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
commit:5ce5992
/////////////////////////////////////////////////////////////////////////
1:   private static final AtomicInteger OBJECT_COUNT = new AtomicInteger();
1:   private int id = OBJECT_COUNT.getAndIncrement();
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public boolean equals(Object o) {
1:     if (!(o instanceof State)) {
1:       return false;
1:     }
0:     State<?> other = (State<?>) o;
1:     return id == other.id && value == other.value;
1:   }
1: 
1:   public int hashCode() {
1:     return RandomUtils.hashDouble(value) ^ id;
1:   }
1: 
commit:8a99d75
/////////////////////////////////////////////////////////////////////////
1:     if (r != 0) {
1:       return r;
1:     }
1:     if (this.id < other.id) {
1:       return -1;
0:     } else if (this.id > other.id) {
1:       return 1;
1:     }
1:     return 0;
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:c0c8d9f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1: import java.util.Collection;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
0:   private static final AtomicInteger objectCount = new AtomicInteger();
0:   private int id = objectCount.getAndIncrement();
1:   private Random gen = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
1:     Collection<Mapping> list = Lists.newArrayList(maps);
1:     this.maps = list.toArray(new Mapping[list.size()]);
/////////////////////////////////////////////////////////////////////////
0:   public int compareTo(State<T> other) {
0:     return r == 0 ? this.id - other.id : r;
commit:6fca24e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1:     return m == null ? params[i] : m.apply(params[i]);
/////////////////////////////////////////////////////////////////////////
0:     if (r == 0) {
0:     } else {
1:       return r;
/////////////////////////////////////////////////////////////////////////
1:     return String.format(Locale.ENGLISH, "<S/%s %.3f %.3f>", payload, omni + Math.sqrt(sum), value);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:02f8694
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Writable;
1: import org.apache.mahout.classifier.sgd.PolymorphicWritable;
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: public class State<T extends Payload<U>, U> implements Comparable<State<T, U>>, Writable {
/////////////////////////////////////////////////////////////////////////
0:   private Payload<U> payload;
/////////////////////////////////////////////////////////////////////////
1:   public State<T, U> copy() {
0:     State<T, U> r = new State<T, U>();
/////////////////////////////////////////////////////////////////////////
1:   public State<T, U> mutate() {
/////////////////////////////////////////////////////////////////////////
1:     State<T, U> r = this.copy();
/////////////////////////////////////////////////////////////////////////
0:     return (T) payload;
/////////////////////////////////////////////////////////////////////////
1:     State<?,?> other = (State<?,?>) o;
/////////////////////////////////////////////////////////////////////////
1:   public int compareTo(State<T, U> other) {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeInt(id);
1:     out.writeInt(params.length);
1:     for (double v : params) {
1:       out.writeDouble(v);
1:     }
1:     for (Mapping map : maps) {
1:       PolymorphicWritable.write(out, map);
1:     }
1: 
1:     out.writeDouble(omni);
1:     for (double v : step) {
1:       out.writeDouble(v);
1:     }
1: 
1:     out.writeDouble(value);
1:     PolymorphicWritable.write(out, payload);
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput input) throws IOException {
1:     id = input.readInt();
1:     int n = input.readInt();
1:     params = new double[n];
1:     for (int i = 0; i < n; i++) {
1:       params[i] = input.readDouble();
1:     }
1: 
1:     maps = new Mapping[n];
1:     for (int i = 0; i < n; i++) {
1:       maps[i] = PolymorphicWritable.read(input, Mapping.class);
1:     }
1:     omni = input.readDouble();
1:     step = new double[n];
1:     for (int i = 0; i < n; i++) {
1:       step[i] = input.readDouble();
1:     }
1:     value = input.readDouble();
0:     payload = PolymorphicWritable.read(input, Payload.class);
1:   }
commit:913d44d
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
1: 
/////////////////////////////////////////////////////////////////////////
0:   private int id = objectCount++;
0:   private transient Random gen = new Random();
/////////////////////////////////////////////////////////////////////////
1:   public State() {
/////////////////////////////////////////////////////////////////////////
1:   public int getId() {
1:     return id;
1:   }
1: 
1:   public double[] getParams() {
1:     return params;
1:   }
1: 
1:   public Mapping[] getMaps() {
1:     return maps;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void setId(int id) {
1:     this.id = id;
1:   }
1: 
1:   public void setStep(double[] step) {
1:     this.step = step;
1:   }
1: 
1:   public void setMaps(Mapping[] maps) {
1:     this.maps = maps;
1:   }
1: 
1:   public void setMaps(Iterable<Mapping> maps) {
0:     this.maps = Lists.newArrayList(maps).toArray(new Mapping[0]);
1:   }
1: 
commit:489a1c2
/////////////////////////////////////////////////////////////////////////
1:     if (this.payload != null) {
commit:090e188
/////////////////////////////////////////////////////////////////////////
1:     if (this.payload != null) {
commit:ec393c0
/////////////////////////////////////////////////////////////////////////
0:     if (r.payload != null) {
0:       r.payload = this.payload.copy();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     if (r.payload != null) {
1:       r.payload.update(r.getMappedParams());
1:     }
commit:4b25f31
/////////////////////////////////////////////////////////////////////////
1:  * Records evolutionary state and provides a mutation operation for recorded-step meta-mutation.
1:  *
0:  * You provide the payload, this class provides the mutation operations.  During mutation,
1:  * the payload is copied and after the state variables are changed, they are passed to the
1:  * payload.
1:  *
1:  * Parameters are internally mutated in a state space that spans all of R^n, but parameters
1:  * passed to the payload are transformed as specified by a call to setMap().  The default
1:  * mapping is the identity map, but uniform-ish or exponential-ish coverage of a range are
1:  * also supported.
1:  *
1:  * More information on the underlying algorithm can be found in the following paper
1:  *
1:  * http://arxiv.org/abs/0803.3838
1:  *
1:  * @see Mapping
0:  * @see State
0: public class State<T extends Payload<T>> implements Comparable<State<T>> {
0:   private Random gen = new Random();
1: 
/////////////////////////////////////////////////////////////////////////
1:    * Clones this state with a random change in position.  Copies the payload and
1:    * lets it know about the change.
/////////////////////////////////////////////////////////////////////////
1:     double lambda = 1 + gen.nextGaussian();
1: 
1:     double magnitude = 0.9 * omni + sum / 10;
0:     r.omni = magnitude * -Math.log(1 - gen.nextDouble());
0:     r.payload.update(r.getMappedParams());
1:    * @param i Which parameter's mapping to define.
1:    * @see org.apache.mahout.ep.Mapping
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public T getPayload() {
0:     return payload;
1:   }
1: 
1:   public double getValue() {
1:     return value;
1:   }
1: 
0:   public void setRand(Random rand) {
0:     this.gen = rand;
1:   }
1: 
1:   public void setOmni(double omni) {
1:     this.omni = omni;
1:   }
1: 
1:   public void setValue(double v) {
1:     value = v;
1:   }
1: 
1:   public void setPayload(T payload) {
1:     this.payload = payload;
1:   }
/////////////////////////////////////////////////////////////////////////
1:   public String toString() {
1:     double sum = 0;
1:     for (double v : step) {
1:       sum += v * v;
1:     }
0:     return String.format("<S/%s %.3f %.3f>", payload, omni + Math.sqrt(sum), value);
commit:a351fdf
/////////////////////////////////////////////////////////////////////////
0: public class State<T extends Copyable<T>> implements Copyable<State<T>>, Comparable<State<T>> {
/////////////////////////////////////////////////////////////////////////
0:   private T payload;
1: 
0:   private State() {
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:    * Deep copies a state, useful in mutation.
0:   public State<T> copy() {
0:     State<T> r = new State<T>();
1:     r.params = Arrays.copyOf(this.params, this.params.length);
1:     r.omni = this.omni;
1:     r.step = Arrays.copyOf(this.step, this.step.length);
1:     r.maps = Arrays.copyOf(this.maps, this.maps.length);
0:     r.payload = this.payload.copy();
1:     r.gen = this.gen;
1:     return r;
/////////////////////////////////////////////////////////////////////////
0:   public State<T> mutate() {
0:     State<T> r = this.copy();
/////////////////////////////////////////////////////////////////////////
1: 
0:   public T getPayload() {
0:     return payload;
1:   }
1: 
0:   public double getValue() {
0:     return value;
1:   }
1: 
0:   public void setPayload(T payload) {
0:     this.payload = payload;
1:   }
commit:292bb9d
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.ep;
1: 
1: import java.util.Arrays;
1: import java.util.Random;
1: 
1: /**
0:  * Recorded step evolutionary optimization.  You provide the value, this class provides the
0:  * mutation.
1:  */
0: public class State implements Comparable<State> {
1:   // object count is kept to break ties in comparison.
0:   static volatile int objectCount = 0;
0:   private Random gen = new Random();
1: 
0:   int id = objectCount++;
1: 
1:   // current state
1:   private double[] params;
1: 
1:   // mappers to transform state
1:   private Mapping[] maps;
1: 
1:   // omni-directional mutation
1:   private double omni;
1: 
1:   // directional mutation
1:   private double[] step;
1: 
1:   // current fitness value
1:   private double value;
1: 
1:   /**
1:    * Invent a new state with no momentum (yet).
1:    */
1:   public State(double[] x0, double omni) {
1:     params = Arrays.copyOf(x0, x0.length);
1:     this.omni = omni;
1:     step = new double[params.length];
1:     maps = new Mapping[params.length];
1:   }
1: 
1:   /**
0:    * Deep clones a state, useful in mutation.
1:    *
0:    * @param params Current state
0:    * @param omni   Current omni-directional mutation
0:    * @param step   The step taken to get to this point
1:    */
0:   private State(double[] params, double omni, double[] step, Mapping[] maps) {
0:     this.params = Arrays.copyOf(params, params.length);
1:     this.omni = omni;
0:     this.step = Arrays.copyOf(step, step.length);
0:     this.maps = Arrays.copyOf(maps, maps.length);
1:   }
1: 
1:   /**
0:    * Clone this state with a random change in position.
1:    *
1:    * @return A new state.
1:    */
0:   public State mutate() {
1:     double sum = 0;
1:     for (double v : step) {
1:       sum += v * v;
1:     }
1:     sum = Math.sqrt(sum);
0:     double lambda = 0.9 + gen.nextGaussian();
0:     State r = new State(params, omni, step, maps);
0:     r.omni = -Math.log(1 - gen.nextDouble()) * (0.9 * omni + sum / 10);
1:     for (int i = 0; i < step.length; i++) {
1:       r.step[i] = lambda * step[i] + r.omni * gen.nextGaussian();
1:       r.params[i] += r.step[i];
1:     }
1:     return r;
1:   }
1: 
1:   /**
1:    * Defines the transformation for a parameter.
0:    * @param i Which mapping to define.
1:    * @param m The mapping to use.
1:    */
1:   public void setMap(int i, Mapping m) {
1:     maps[i] = m;
1:   }
1: 
1:   /**
1:    * Returns a transformed parameter.
1:    * @param i  The parameter to return.
1:    * @return The value of the parameter.
1:    */
1:   public double get(int i) {
1:     Mapping m = maps[i];
0:     if (m == null) {
0:       return params[i];
0:     } else {
0:       return m.apply(params[i]);
1:     }
1:   }
1: 
1:   /**
1:    * Returns all the parameters in mapped form.
1:    * @return An array of parameters.
1:    */
1:   public double[] getMappedParams() {
1:     double[] r = Arrays.copyOf(params, params.length);
1:     for (int i = 0; i < params.length; i++) {
1:       r[i] = get(i);
1:     }
1:     return r;
1:   }
1: 
0:   public double[] getParams() {
0:     return params;
1:   }
1: 
1:   public double getOmni() {
1:     return omni;
1:   }
1: 
1:   public double[] getStep() {
1:     return step;
1:   }
1: 
1: 
1:   /**
1:    * Natural order is to sort in descending order of score.  Creation order is used as a
1:    * tie-breaker.
1:    *
1:    * @param other The state to compare with.
1:    * @return -1, 0, 1 if the other state is better, identical or worse than this one.
1:    */
1:   @Override
0:   public int compareTo(State other) {
1:     int r = Double.compare(other.value, this.value);
0:     if (r != 0) {
1:       return r;
0:     } else {
0:       return this.id - other.id;
1:     }
1:   }
1: 
0:   public void setRand(Random rand) {
0:     this.gen = rand;
1:   }
1: 
0:   public void setOmni(double omni) {
1:     this.omni = omni;
1:   }
1: 
0:   public void setValue(double v) {
0:     value = v;
1:   }
1: }
============================================================================