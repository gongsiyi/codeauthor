1:d4e5827: /*
1:d4e5827:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d4e5827:  * contributor license agreements.  See the NOTICE file distributed with
1:d4e5827:  * this work for additional information regarding copyright ownership.
1:d4e5827:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d4e5827:  * (the "License"); you may not use this file except in compliance with
1:d4e5827:  * the License.  You may obtain a copy of the License at
1:d4e5827:  *
1:d4e5827:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d4e5827:  *
1:d4e5827:  * Unless required by applicable law or agreed to in writing, software
1:d4e5827:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d4e5827:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d4e5827:  * See the License for the specific language governing permissions and
1:d4e5827:  * limitations under the License.
1:d4e5827:  */
1:d4e5827: 
1:d4e5827: package org.apache.mahout.classifier.df.split;
1:d4e5827: 
1:d4e5827: import org.apache.commons.math3.stat.descriptive.rank.Percentile;
1:d4e5827: import org.apache.mahout.classifier.df.data.Data;
1:d4e5827: import org.apache.mahout.classifier.df.data.DataUtils;
1:d4e5827: import org.apache.mahout.classifier.df.data.Dataset;
1:d4e5827: import org.apache.mahout.classifier.df.data.Instance;
1:d4e5827: 
1:d4e5827: import java.util.Arrays;
1:d4e5827: import java.util.Collection;
1:d4e5827: import java.util.Iterator;
1:d4e5827: import java.util.TreeSet;
1:d4e5827: 
1:d4e5827: /**
1:d4e5827:  * <p>Optimized implementation of IgSplit.
1:d4e5827:  * This class can be used when the criterion variable is the categorical attribute.</p>
1:d4e5827:  *
1:d4e5827:  * <p>This code was changed in MAHOUT-1419 to deal in sampled splits among numeric
1:d4e5827:  * features to fix a performance problem. To generate some synthetic data that exercises
1:d4e5827:  * the issue, try for example generating 4 features of Normal(0,1) values with a random
1:d4e5827:  * boolean 0/1 categorical feature. In Scala:</p>
1:d4e5827:  *
1:d4e5827:  * {@code
1:d4e5827:  *  val r = new scala.util.Random()
1:d4e5827:  *  val pw = new java.io.PrintWriter("random.csv")
1:d4e5827:  *  (1 to 10000000).foreach(e =>
1:d4e5827:  *    pw.println(r.nextDouble() + "," +
1:d4e5827:  *               r.nextDouble() + "," +
1:d4e5827:  *               r.nextDouble() + "," +
1:d4e5827:  *               r.nextDouble() + "," +
1:d4e5827:  *               (if (r.nextBoolean()) 1 else 0))
1:d4e5827:  *   )
1:d4e5827:  *   pw.close()
1:d4e5827:  * }
1:d4e5827:  */
1:1ffa3a4: @Deprecated
1:d4e5827: public class OptIgSplit extends IgSplit {
1:d4e5827: 
1:d4e5827:   private static final int MAX_NUMERIC_SPLITS = 16;
1:d4e5827: 
1:d4e5827:   @Override
1:d4e5827:   public Split computeSplit(Data data, int attr) {
1:d4e5827:     if (data.getDataset().isNumerical(attr)) {
1:d4e5827:       return numericalSplit(data, attr);
1:d4e5827:     } else {
1:d4e5827:       return categoricalSplit(data, attr);
1:d4e5827:     }
1:d4e5827:   }
1:d4e5827: 
1:d4e5827:   /**
1:d4e5827:    * Computes the split for a CATEGORICAL attribute
1:d4e5827:    */
1:d4e5827:   private static Split categoricalSplit(Data data, int attr) {
1:d4e5827:     double[] values = data.values(attr).clone();
1:d4e5827: 
1:d4e5827:     double[] splitPoints = chooseCategoricalSplitPoints(values);
1:d4e5827: 
1:d4e5827:     int numLabels = data.getDataset().nblabels();
1:d4e5827:     int[][] counts = new int[splitPoints.length][numLabels];
1:d4e5827:     int[] countAll = new int[numLabels];
1:d4e5827: 
1:d4e5827:     computeFrequencies(data, attr, splitPoints, counts, countAll);
1:d4e5827: 
1:d4e5827:     int size = data.size();
1:d4e5827:     double hy = entropy(countAll, size); // H(Y)
1:d4e5827:     double hyx = 0.0; // H(Y|X)
1:d4e5827:     double invDataSize = 1.0 / size;
1:d4e5827: 
1:d4e5827:     for (int index = 0; index < splitPoints.length; index++) {
1:d4e5827:       size = DataUtils.sum(counts[index]);
1:d4e5827:       hyx += size * invDataSize * entropy(counts[index], size);
1:d4e5827:     }
1:d4e5827: 
1:d4e5827:     double ig = hy - hyx;
1:d4e5827:     return new Split(attr, ig);
1:d4e5827:   }
1:d4e5827: 
1:d4e5827:   static void computeFrequencies(Data data,
1:d4e5827:                                  int attr,
1:d4e5827:                                  double[] splitPoints,
1:d4e5827:                                  int[][] counts,
1:d4e5827:                                  int[] countAll) {
1:d4e5827:     Dataset dataset = data.getDataset();
1:d4e5827: 
1:d4e5827:     for (int index = 0; index < data.size(); index++) {
1:d4e5827:       Instance instance = data.get(index);
1:d4e5827:       int label = (int) dataset.getLabel(instance);
1:d4e5827:       double value = instance.get(attr);
1:d4e5827:       int split = 0;
1:d4e5827:       while (split < splitPoints.length && value > splitPoints[split]) {
1:d4e5827:         split++;
1:d4e5827:       }
1:d4e5827:       if (split < splitPoints.length) {
1:d4e5827:         counts[split][label]++;
1:d4e5827:       } // Otherwise it's in the last split, which we don't need to count
1:d4e5827:       countAll[label]++;
1:d4e5827:     }
1:d4e5827:   }
1:d4e5827: 
1:d4e5827:   /**
1:d4e5827:    * Computes the best split for a NUMERICAL attribute
1:d4e5827:    */
1:d4e5827:   static Split numericalSplit(Data data, int attr) {
1:d4e5827:     double[] values = data.values(attr).clone();
1:d4e5827:     Arrays.sort(values);
1:d4e5827: 
1:d4e5827:     double[] splitPoints = chooseNumericSplitPoints(values);
1:d4e5827: 
1:d4e5827:     int numLabels = data.getDataset().nblabels();
1:d4e5827:     int[][] counts = new int[splitPoints.length][numLabels];
1:d4e5827:     int[] countAll = new int[numLabels];
1:d4e5827:     int[] countLess = new int[numLabels];
1:d4e5827: 
1:d4e5827:     computeFrequencies(data, attr, splitPoints, counts, countAll);
1:d4e5827: 
1:d4e5827:     int size = data.size();
1:d4e5827:     double hy = entropy(countAll, size);
1:d4e5827:     double invDataSize = 1.0 / size;
1:d4e5827: 
1:d4e5827:     int best = -1;
1:d4e5827:     double bestIg = -1.0;
1:d4e5827: 
1:d4e5827:     // try each possible split value
1:d4e5827:     for (int index = 0; index < splitPoints.length; index++) {
1:d4e5827:       double ig = hy;
1:d4e5827: 
1:d4e5827:       DataUtils.add(countLess, counts[index]);
1:d4e5827:       DataUtils.dec(countAll, counts[index]);
1:d4e5827: 
1:d4e5827:       // instance with attribute value < values[index]
1:d4e5827:       size = DataUtils.sum(countLess);
1:d4e5827:       ig -= size * invDataSize * entropy(countLess, size);
1:d4e5827:       // instance with attribute value >= values[index]
1:d4e5827:       size = DataUtils.sum(countAll);
1:d4e5827:       ig -= size * invDataSize * entropy(countAll, size);
1:d4e5827: 
1:d4e5827:       if (ig > bestIg) {
1:d4e5827:         bestIg = ig;
1:d4e5827:         best = index;
1:d4e5827:       }
1:d4e5827:     }
1:d4e5827: 
1:d4e5827:     if (best == -1) {
1:d4e5827:       throw new IllegalStateException("no best split found !");
1:d4e5827:     }
1:d4e5827:     return new Split(attr, bestIg, splitPoints[best]);
1:d4e5827:   }
1:d4e5827: 
1:d4e5827:   /**
1:d4e5827:    * @return an array of values to split the numeric feature's values on when
1:d4e5827:    *  building candidate splits. When input size is <= MAX_NUMERIC_SPLITS + 1, it will
1:d4e5827:    *  return the averages between success values as split points. When larger, it will
1:d4e5827:    *  return MAX_NUMERIC_SPLITS approximate percentiles through the data.
1:d4e5827:    */
1:d4e5827:   private static double[] chooseNumericSplitPoints(double[] values) {
1:d4e5827:     if (values.length <= 1) {
1:d4e5827:       return values;
1:d4e5827:     }
1:d4e5827:     if (values.length <= MAX_NUMERIC_SPLITS + 1) {
1:d4e5827:       double[] splitPoints = new double[values.length - 1];
1:d4e5827:       for (int i = 1; i < values.length; i++) {
1:d4e5827:         splitPoints[i-1] = (values[i] + values[i-1]) / 2.0;
1:d4e5827:       }
1:d4e5827:       return splitPoints;
1:d4e5827:     }
1:d4e5827:     Percentile distribution = new Percentile();
1:d4e5827:     distribution.setData(values);
1:d4e5827:     double[] percentiles = new double[MAX_NUMERIC_SPLITS];
1:d4e5827:     for (int i = 0 ; i < percentiles.length; i++) {
1:d4e5827:       double p = 100.0 * ((i + 1.0) / (MAX_NUMERIC_SPLITS + 1.0));
1:d4e5827:       percentiles[i] = distribution.evaluate(p);
1:d4e5827:     }
1:d4e5827:     return percentiles;
1:d4e5827:   }
1:d4e5827: 
1:d4e5827:   private static double[] chooseCategoricalSplitPoints(double[] values) {
1:d4e5827:     // There is no great reason to believe that categorical value order matters,
1:d4e5827:     // but the original code worked this way, and it's not terrible in the absence
1:d4e5827:     // of more sophisticated analysis
1:02ff22f:     Collection<Double> uniqueOrderedCategories = new TreeSet<>();
1:d4e5827:     for (double v : values) {
1:d4e5827:       uniqueOrderedCategories.add(v);
1:d4e5827:     }
1:d4e5827:     double[] uniqueValues = new double[uniqueOrderedCategories.size()];
1:d4e5827:     Iterator<Double> it = uniqueOrderedCategories.iterator();
1:d4e5827:     for (int i = 0; i < uniqueValues.length; i++) {
1:d4e5827:       uniqueValues[i] = it.next();
1:d4e5827:     }
1:d4e5827:     return uniqueValues;
1:d4e5827:   }
1:d4e5827: 
1:d4e5827:   /**
1:d4e5827:    * Computes the Entropy
1:d4e5827:    *
1:d4e5827:    * @param counts   counts[i] = numInstances with label i
1:d4e5827:    * @param dataSize numInstances
1:d4e5827:    */
1:d4e5827:   private static double entropy(int[] counts, int dataSize) {
1:d4e5827:     if (dataSize == 0) {
1:d4e5827:       return 0.0;
1:d4e5827:     }
1:d4e5827: 
1:d4e5827:     double entropy = 0.0;
1:d4e5827: 
1:d4e5827:     for (int count : counts) {
1:d4e5827:       if (count > 0) {
1:d4e5827:         double p = count / (double) dataSize;
1:d4e5827:         entropy -= p * Math.log(p);
1:d4e5827:       }
1:d4e5827:     }
1:d4e5827: 
1:d4e5827:     return entropy / LOG2;
1:d4e5827:   }
1:d4e5827: 
1:d4e5827: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     Collection<Double> uniqueOrderedCategories = new TreeSet<>();
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:67a531e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang3.ArrayUtils;
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d4e5827
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.df.split;
1: 
1: import org.apache.commons.math3.stat.descriptive.rank.Percentile;
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.data.DataUtils;
1: import org.apache.mahout.classifier.df.data.Dataset;
1: import org.apache.mahout.classifier.df.data.Instance;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.TreeSet;
1: 
1: /**
1:  * <p>Optimized implementation of IgSplit.
1:  * This class can be used when the criterion variable is the categorical attribute.</p>
1:  *
1:  * <p>This code was changed in MAHOUT-1419 to deal in sampled splits among numeric
1:  * features to fix a performance problem. To generate some synthetic data that exercises
1:  * the issue, try for example generating 4 features of Normal(0,1) values with a random
1:  * boolean 0/1 categorical feature. In Scala:</p>
1:  *
1:  * {@code
1:  *  val r = new scala.util.Random()
1:  *  val pw = new java.io.PrintWriter("random.csv")
1:  *  (1 to 10000000).foreach(e =>
1:  *    pw.println(r.nextDouble() + "," +
1:  *               r.nextDouble() + "," +
1:  *               r.nextDouble() + "," +
1:  *               r.nextDouble() + "," +
1:  *               (if (r.nextBoolean()) 1 else 0))
1:  *   )
1:  *   pw.close()
1:  * }
1:  */
1: public class OptIgSplit extends IgSplit {
1: 
1:   private static final int MAX_NUMERIC_SPLITS = 16;
1: 
1:   @Override
1:   public Split computeSplit(Data data, int attr) {
1:     if (data.getDataset().isNumerical(attr)) {
1:       return numericalSplit(data, attr);
1:     } else {
1:       return categoricalSplit(data, attr);
1:     }
1:   }
1: 
1:   /**
1:    * Computes the split for a CATEGORICAL attribute
1:    */
1:   private static Split categoricalSplit(Data data, int attr) {
1:     double[] values = data.values(attr).clone();
1: 
1:     double[] splitPoints = chooseCategoricalSplitPoints(values);
1: 
1:     int numLabels = data.getDataset().nblabels();
1:     int[][] counts = new int[splitPoints.length][numLabels];
1:     int[] countAll = new int[numLabels];
1: 
1:     computeFrequencies(data, attr, splitPoints, counts, countAll);
1: 
1:     int size = data.size();
1:     double hy = entropy(countAll, size); // H(Y)
1:     double hyx = 0.0; // H(Y|X)
1:     double invDataSize = 1.0 / size;
1: 
1:     for (int index = 0; index < splitPoints.length; index++) {
1:       size = DataUtils.sum(counts[index]);
1:       hyx += size * invDataSize * entropy(counts[index], size);
1:     }
1: 
1:     double ig = hy - hyx;
1:     return new Split(attr, ig);
1:   }
1: 
1:   static void computeFrequencies(Data data,
1:                                  int attr,
1:                                  double[] splitPoints,
1:                                  int[][] counts,
1:                                  int[] countAll) {
1:     Dataset dataset = data.getDataset();
1: 
1:     for (int index = 0; index < data.size(); index++) {
1:       Instance instance = data.get(index);
1:       int label = (int) dataset.getLabel(instance);
1:       double value = instance.get(attr);
1:       int split = 0;
1:       while (split < splitPoints.length && value > splitPoints[split]) {
1:         split++;
1:       }
1:       if (split < splitPoints.length) {
1:         counts[split][label]++;
1:       } // Otherwise it's in the last split, which we don't need to count
1:       countAll[label]++;
1:     }
1:   }
1: 
1:   /**
1:    * Computes the best split for a NUMERICAL attribute
1:    */
1:   static Split numericalSplit(Data data, int attr) {
1:     double[] values = data.values(attr).clone();
1:     Arrays.sort(values);
1: 
1:     double[] splitPoints = chooseNumericSplitPoints(values);
1: 
1:     int numLabels = data.getDataset().nblabels();
1:     int[][] counts = new int[splitPoints.length][numLabels];
1:     int[] countAll = new int[numLabels];
1:     int[] countLess = new int[numLabels];
1: 
1:     computeFrequencies(data, attr, splitPoints, counts, countAll);
1: 
1:     int size = data.size();
1:     double hy = entropy(countAll, size);
1:     double invDataSize = 1.0 / size;
1: 
1:     int best = -1;
1:     double bestIg = -1.0;
1: 
1:     // try each possible split value
1:     for (int index = 0; index < splitPoints.length; index++) {
1:       double ig = hy;
1: 
1:       DataUtils.add(countLess, counts[index]);
1:       DataUtils.dec(countAll, counts[index]);
1: 
1:       // instance with attribute value < values[index]
1:       size = DataUtils.sum(countLess);
1:       ig -= size * invDataSize * entropy(countLess, size);
1:       // instance with attribute value >= values[index]
1:       size = DataUtils.sum(countAll);
1:       ig -= size * invDataSize * entropy(countAll, size);
1: 
1:       if (ig > bestIg) {
1:         bestIg = ig;
1:         best = index;
1:       }
1:     }
1: 
1:     if (best == -1) {
1:       throw new IllegalStateException("no best split found !");
1:     }
1:     return new Split(attr, bestIg, splitPoints[best]);
1:   }
1: 
1:   /**
1:    * @return an array of values to split the numeric feature's values on when
1:    *  building candidate splits. When input size is <= MAX_NUMERIC_SPLITS + 1, it will
1:    *  return the averages between success values as split points. When larger, it will
1:    *  return MAX_NUMERIC_SPLITS approximate percentiles through the data.
1:    */
1:   private static double[] chooseNumericSplitPoints(double[] values) {
1:     if (values.length <= 1) {
1:       return values;
1:     }
1:     if (values.length <= MAX_NUMERIC_SPLITS + 1) {
1:       double[] splitPoints = new double[values.length - 1];
1:       for (int i = 1; i < values.length; i++) {
1:         splitPoints[i-1] = (values[i] + values[i-1]) / 2.0;
1:       }
1:       return splitPoints;
1:     }
1:     Percentile distribution = new Percentile();
1:     distribution.setData(values);
1:     double[] percentiles = new double[MAX_NUMERIC_SPLITS];
1:     for (int i = 0 ; i < percentiles.length; i++) {
1:       double p = 100.0 * ((i + 1.0) / (MAX_NUMERIC_SPLITS + 1.0));
1:       percentiles[i] = distribution.evaluate(p);
1:     }
1:     return percentiles;
1:   }
1: 
1:   private static double[] chooseCategoricalSplitPoints(double[] values) {
1:     // There is no great reason to believe that categorical value order matters,
1:     // but the original code worked this way, and it's not terrible in the absence
1:     // of more sophisticated analysis
0:     Collection<Double> uniqueOrderedCategories = new TreeSet<Double>();
1:     for (double v : values) {
1:       uniqueOrderedCategories.add(v);
1:     }
1:     double[] uniqueValues = new double[uniqueOrderedCategories.size()];
1:     Iterator<Double> it = uniqueOrderedCategories.iterator();
1:     for (int i = 0; i < uniqueValues.length; i++) {
1:       uniqueValues[i] = it.next();
1:     }
1:     return uniqueValues;
1:   }
1: 
1:   /**
1:    * Computes the Entropy
1:    *
1:    * @param counts   counts[i] = numInstances with label i
1:    * @param dataSize numInstances
1:    */
1:   private static double entropy(int[] counts, int dataSize) {
1:     if (dataSize == 0) {
1:       return 0.0;
1:     }
1: 
1:     double entropy = 0.0;
1: 
1:     for (int count : counts) {
1:       if (count > 0) {
1:         double p = count / (double) dataSize;
1:         entropy -= p * Math.log(p);
1:       }
1:     }
1: 
1:     return entropy / LOG2;
1:   }
1: 
1: }
commit:515bac4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f824f90
commit:210fac3
commit:7f0d774
/////////////////////////////////////////////////////////////////////////
0:     if (best == -1) {
0:       throw new IllegalStateException("no best split found !");
0:     }
commit:acafdc0
/////////////////////////////////////////////////////////////////////////
0:   private int[][] counts;
0:   private int[] countAll;
0:   private int[] countLess;
0:     if (data.getDataset().isNumerical(attr)) {
/////////////////////////////////////////////////////////////////////////
0:   private static Split categoricalSplit(Data data, int attr) {
0:     int[][] counts = new int[values.length][data.getDataset().nblabels()];
0:     int[] countAll = new int[data.getDataset().nblabels()];
/////////////////////////////////////////////////////////////////////////
0:   private static double[] sortedValues(Data data, int attr) {
/////////////////////////////////////////////////////////////////////////
0:     counts = new int[values.length][data.getDataset().nblabels()];
0:     countAll = new int[data.getDataset().nblabels()];
0:     countLess = new int[data.getDataset().nblabels()];
/////////////////////////////////////////////////////////////////////////
0:   private static double entropy(int[] counts, int dataSize) {
commit:8547de7
/////////////////////////////////////////////////////////////////////////
0:   protected static Split categoricalSplit(Data data, int attr) {
/////////////////////////////////////////////////////////////////////////
0:   protected static double[] sortedValues(Data data, int attr) {
/////////////////////////////////////////////////////////////////////////
0:       double ig = hy;
/////////////////////////////////////////////////////////////////////////
0:     for (int count : counts) {
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     Dataset dataset = data.getDataset();
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0:    *
0:    * @param counts   counts[i] = numInstances with label i
0:    * @param dataSize numInstances
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
0:  * Optimized implementation of IgSplit<br>
0:  * This class can be used when the criterion variable is the categorical attribute.
/////////////////////////////////////////////////////////////////////////
0:       counts[ArrayUtils.indexOf(values, instance.get(attr))][(int) dataset.getLabel(instance)]++;
0:       countAll[(int) dataset.getLabel(instance)]++;
/////////////////////////////////////////////////////////////////////////
0:   void initCounts(Data data, double[] values) {
0:   void computeFrequencies(Data data, int attr, double[] values) {
0:       counts[ArrayUtils.indexOf(values, instance.get(attr))][(int) dataset.getLabel(instance)]++;
0:       countAll[(int) dataset.getLabel(instance)]++;
0:   Split numericalSplit(Data data, int attr) {
commit:e107bfa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.df.data.Dataset;
/////////////////////////////////////////////////////////////////////////
0:     Dataset dataset = data.getDataset();
0:     
0:       counts[ArrayUtils.indexOf(values, instance.get(attr))][dataset.getLabel(instance)]++;
0:       countAll[dataset.getLabel(instance)]++;
/////////////////////////////////////////////////////////////////////////
0:   	Dataset dataset = data.getDataset();
0:   	
0:       counts[ArrayUtils.indexOf(values, instance.get(attr))][dataset.getLabel(instance)]++;
0:       countAll[dataset.getLabel(instance)]++;
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.mahout.df.split;
0: 
0: import java.util.Arrays;
0: 
0: import org.apache.commons.lang.ArrayUtils;
0: import org.apache.mahout.df.data.Data;
0: import org.apache.mahout.df.data.DataUtils;
0: import org.apache.mahout.df.data.Instance;
0: 
0: /**
0:  * Optimized implementation of IgSplit
0:  */
0: public class OptIgSplit extends IgSplit {
0: 
0:   protected int[][] counts;
0: 
0:   protected int[] countAll;
0: 
0:   protected int[] countLess;
0: 
0:   @Override
0:   public Split computeSplit(Data data, int attr) {
0:     if (data.dataset.isNumerical(attr)) {
0:       return numericalSplit(data, attr);
0:     } else {
0:       return categoricalSplit(data, attr);
0:     }
0:   }
0: 
0:   /**
0:    * Computes the split for a CATEGORICAL attribute
0:    * 
0:    * @param data
0:    * @param attr
0:    * @return
0:    */
0:   protected Split categoricalSplit(Data data, int attr) {
0:     double[] values = data.values(attr);
0:     int[][] counts = new int[values.length][data.dataset.nblabels()];
0:     int[] countAll = new int[data.dataset.nblabels()];
0: 
0:     // compute frequencies
0:     for (int index = 0; index < data.size(); index++) {
0:       Instance instance = data.get(index);
0:       counts[ArrayUtils.indexOf(values, instance.get(attr))][instance.label]++;
0:       countAll[instance.label]++;
0:     }
0: 
0:     int size = data.size();
0:     double hy = entropy(countAll, size); // H(Y)
0:     double hyx = 0.0; // H(Y|X)
0:     double invDataSize = 1.0 / size;
0: 
0:     for (int index = 0; index < values.length; index++) {
0:       size = DataUtils.sum(counts[index]);
0:       hyx += size * invDataSize * entropy(counts[index], size);
0:     }
0: 
0:     double ig = hy - hyx;
0:     return new Split(attr, ig);
0:   }
0: 
0:   /**
0:    * Return the sorted list of distinct values for the given attribute
0:    * 
0:    * @param data
0:    * @param attr
0:    * @return
0:    */
0:   protected double[] sortedValues(Data data, int attr) {
0:     double[] values = data.values(attr);
0:     Arrays.sort(values);
0: 
0:     return values;
0:   }
0: 
0:   /**
0:    * Instantiates the counting arrays
0:    * 
0:    * @param data
0:    * @param values
0:    */
0:   protected void initCounts(Data data, double[] values) {
0:     counts = new int[values.length][data.dataset.nblabels()];
0:     countAll = new int[data.dataset.nblabels()];
0:     countLess = new int[data.dataset.nblabels()];
0:   }
0: 
0:   protected void computeFrequencies(Data data, int attr, double[] values) {
0:     for (int index = 0; index < data.size(); index++) {
0:       Instance instance = data.get(index);
0:       counts[ArrayUtils.indexOf(values, instance.get(attr))][instance.label]++;
0:       countAll[instance.label]++;
0:     }
0:   }
0:   
0:   /**
0:    * Computes the best split for a NUMERICAL attribute
0:    * 
0:    * @param data
0:    * @param attr
0:    * @return
0:    */
0:   protected Split numericalSplit(Data data, int attr) {
0:     double[] values = sortedValues(data, attr);
0: 
0:     initCounts(data, values);
0: 
0:     computeFrequencies(data, attr, values);
0: 
0:     int size = data.size();
0:     double hy = entropy(countAll, size);
0:     double invDataSize = 1.0 / size;
0: 
0:     int best = -1;
0:     double bestIg = -1.0;
0:     double ig;
0: 
0:     // try each possible split value
0:     for (int index = 0; index < values.length; index++) {
0:       ig = hy;
0: 
0:       // instance with attribute value < values[index]
0:       size = DataUtils.sum(countLess);
0:       ig -= size * invDataSize * entropy(countLess, size);
0: 
0:       // instance with attribute value >= values[index]
0:       size = DataUtils.sum(countAll);
0:       ig -= size * invDataSize * entropy(countAll, size);
0: 
0:       if (ig > bestIg) {
0:         bestIg = ig;
0:         best = index;
0:       }
0: 
0:       DataUtils.add(countLess, counts[index]);
0:       DataUtils.dec(countAll, counts[index]);
0:     }
0: 
0:     assert best != -1 : "no best split found !";
0:     return new Split(attr, bestIg, values[best]);
0:   }
0: 
0:   /**
0:    * Computes the Entropy
0:    * 
0:    * @param counts counts[i] = numInstances with label i
0:    * @param dataSize numInstances
0:    * @return
0:    */
0:   protected static double entropy(int[] counts, int dataSize) {
0:     if (dataSize == 0)
0:       return 0.0;
0: 
0:     double entropy = 0.0;
0:     double invDataSize = 1.0 / dataSize;
0: 
0:     for (int label = 0; label < counts.length; label++) {
0:       int count = counts[label];
0:       if (count == 0)
0:         continue; // otherwise we get a NaN
0:       double p = count * invDataSize;
0:       entropy += -p * Math.log(p) / LOG2;
0:     }
0: 
0:     return entropy;
0:   }
0: 
0: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.classifier.df.split;
0: import org.apache.mahout.classifier.df.data.Data;
0: import org.apache.mahout.classifier.df.data.DataUtils;
0: import org.apache.mahout.classifier.df.data.Dataset;
0: import org.apache.mahout.classifier.df.data.Instance;
author:Robin Anil
-------------------------------------------------------------------------------
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   
0:       return OptIgSplit.categoricalSplit(data, attr);
0:   
/////////////////////////////////////////////////////////////////////////
0:     
0:     
0:     double hy = OptIgSplit.entropy(countAll, size); // H(Y)
0:     
0:       hyx += size * invDataSize * OptIgSplit.entropy(counts[index], size);
0:     
0:   
/////////////////////////////////////////////////////////////////////////
0:     
0:   
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
0:     double[] values = OptIgSplit.sortedValues(data, attr);
0:     
0:     
0:     
0:     double hy = OptIgSplit.entropy(countAll, size);
0:     
0:     
0:       
0:       ig -= size * invDataSize * OptIgSplit.entropy(countLess, size);
0:       
0:       ig -= size * invDataSize * OptIgSplit.entropy(countAll, size);
0:       
0:       
0:     
0:   
0:    * @param counts
0:    *          counts[i] = numInstances with label i
0:    * @param dataSize
0:    *          numInstances
0:     if (dataSize == 0) {
0:     }
0:     
0:     
0:       if (count == 0) {
0:       }
0:       entropy += -p * Math.log(p) / IgSplit.LOG2;
0:     
0:   
============================================================================