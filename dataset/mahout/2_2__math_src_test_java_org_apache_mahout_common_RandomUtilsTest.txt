1:b0695e9: /**
1:b0695e9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b0695e9:  * contributor license agreements.  See the NOTICE file distributed with
1:b0695e9:  * this work for additional information regarding copyright ownership.
1:b0695e9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b0695e9:  * (the "License"); you may not use this file except in compliance with
1:b0695e9:  * the License.  You may obtain a copy of the License at
1:b0695e9:  *
1:b0695e9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b0695e9:  *
1:b0695e9:  * Unless required by applicable law or agreed to in writing, software
1:b0695e9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b0695e9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b0695e9:  * See the License for the specific language governing permissions and
1:b0695e9:  * limitations under the License.
1:b0695e9:  */
7:b0695e9: 
1:b0695e9: package org.apache.mahout.common;
1:b0695e9: 
1:b0695e9: import org.apache.mahout.math.MahoutTestCase;
1:b0695e9: import org.junit.Test;
1:b0695e9: 
1:b0695e9: import java.util.Random;
1:b0695e9: 
1:b0695e9: /**
1:85f9ece:  * Tests {@link RandomUtils}.
1:b0695e9:  */
1:b0695e9: public final class RandomUtilsTest extends MahoutTestCase {
1:b0695e9: 
7:b0695e9:   @Test
1:f3a9cc1:   public void testHashDouble() {
1:f3a9cc1:     assertEquals(new Double(0.0).hashCode(), RandomUtils.hashDouble(0.0));
1:f3a9cc1:     assertEquals(new Double(1.0).hashCode(), RandomUtils.hashDouble(1.0));
1:f3a9cc1:     assertEquals(new Double(Double.POSITIVE_INFINITY).hashCode(), RandomUtils.hashDouble(Double.POSITIVE_INFINITY));
1:f3a9cc1:     assertEquals(new Double(Double.NaN).hashCode(), RandomUtils.hashDouble(Double.NaN));
1:f3a9cc1:   }
1:f3a9cc1: 
1:b185cd5:   @Test
1:f3a9cc1:   public void testHashFloat() {
1:f3a9cc1:     assertEquals(new Float(0.0f).hashCode(), RandomUtils.hashFloat(0.0f));
1:f3a9cc1:     assertEquals(new Float(1.0f).hashCode(), RandomUtils.hashFloat(1.0f));
1:f3a9cc1:     assertEquals(new Float(Float.POSITIVE_INFINITY).hashCode(), RandomUtils.hashFloat(Float.POSITIVE_INFINITY));
1:f3a9cc1:     assertEquals(new Float(Float.NaN).hashCode(), RandomUtils.hashFloat(Float.NaN));
1:f3a9cc1:   }
1:f3a9cc1: 
1:f3a9cc1:   @Test
1:b0695e9:   public void testNextTwinPrime() {
1:b0695e9:     assertEquals(5, RandomUtils.nextTwinPrime(-1));
1:b0695e9:     assertEquals(5, RandomUtils.nextTwinPrime(1));
1:b0695e9:     assertEquals(5, RandomUtils.nextTwinPrime(2));
1:b0695e9:     assertEquals(5, RandomUtils.nextTwinPrime(3));
1:b0695e9:     assertEquals(7, RandomUtils.nextTwinPrime(4));
1:b0695e9:     assertEquals(7, RandomUtils.nextTwinPrime(5));
1:b0695e9:     assertEquals(13, RandomUtils.nextTwinPrime(6));
1:b0695e9:     assertEquals(RandomUtils.MAX_INT_SMALLER_TWIN_PRIME + 2,
1:b0695e9:                  RandomUtils.nextTwinPrime(RandomUtils.MAX_INT_SMALLER_TWIN_PRIME));
1:b0695e9:     try {
1:b0695e9:       RandomUtils.nextTwinPrime(RandomUtils.MAX_INT_SMALLER_TWIN_PRIME + 1);
1:b0695e9:       fail();
1:b0695e9:     } catch (IllegalArgumentException iae) {
1:b0695e9:       // good
8:b0695e9:     }
1:b0695e9:   }
1:b0695e9: 
1:f3a9cc1:   @Test
1:b185cd5:   public void testSetSeed() {
1:b185cd5:     Random rTest0 = RandomUtils.getRandom();
1:b185cd5:     Random rTest1 = RandomUtils.getRandom();
1:b185cd5:     Random r0 = RandomUtils.getRandom(0);
1:b185cd5:     Random r1 = RandomUtils.getRandom(1);
1:b185cd5: 
1:b185cd5:     long lTest0 = rTest0.nextLong();
1:b185cd5:     long lTest1 = rTest1.nextLong();
1:b185cd5:     long l0 = r0.nextLong();
1:b185cd5:     long l1 = r1.nextLong();
1:b185cd5:     assertEquals("getRandom() must match getRandom() in unit tests", lTest0, lTest1);
1:b185cd5:     assertTrue("getRandom() must differ from getRandom(0)", lTest0 != l1);
1:b185cd5:     assertTrue("getRandom(0) must differ from getRandom(1)", l0 != l1);
1:b185cd5:   }
1:b185cd5: 
1:b0695e9: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1:  * Tests {@link RandomUtils}.
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:46ed1c0
/////////////////////////////////////////////////////////////////////////
commit:2deba36
/////////////////////////////////////////////////////////////////////////
commit:b185cd5
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testSetSeed() {
1:     Random rTest0 = RandomUtils.getRandom();
1:     Random rTest1 = RandomUtils.getRandom();
1:     Random r0 = RandomUtils.getRandom(0);
1:     Random r1 = RandomUtils.getRandom(1);
1: 
1:     long lTest0 = rTest0.nextLong();
1:     long lTest1 = rTest1.nextLong();
1:     long l0 = r0.nextLong();
1:     long l1 = r1.nextLong();
1:     assertEquals("getRandom() must match getRandom() in unit tests", lTest0, lTest1);
1:     assertTrue("getRandom() must differ from getRandom(0)", lTest0 != l1);
1:     assertTrue("getRandom(0) must differ from getRandom(1)", l0 != l1);
1:   }
1: 
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
1:   public void testHashDouble() {
1:     assertEquals(new Double(0.0).hashCode(), RandomUtils.hashDouble(0.0));
1:     assertEquals(new Double(1.0).hashCode(), RandomUtils.hashDouble(1.0));
1:     assertEquals(new Double(Double.POSITIVE_INFINITY).hashCode(), RandomUtils.hashDouble(Double.POSITIVE_INFINITY));
1:     assertEquals(new Double(Double.NaN).hashCode(), RandomUtils.hashDouble(Double.NaN));
1:   }
1: 
1:   @Test
1:   public void testHashFloat() {
1:     assertEquals(new Float(0.0f).hashCode(), RandomUtils.hashFloat(0.0f));
1:     assertEquals(new Float(1.0f).hashCode(), RandomUtils.hashFloat(1.0f));
1:     assertEquals(new Float(Float.POSITIVE_INFINITY).hashCode(), RandomUtils.hashFloat(Float.POSITIVE_INFINITY));
1:     assertEquals(new Float(Float.NaN).hashCode(), RandomUtils.hashFloat(Float.NaN));
1:   }
1: 
1:   @Test
/////////////////////////////////////////////////////////////////////////
commit:b0695e9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common;
1: 
1: import org.apache.mahout.math.MahoutTestCase;
1: import org.junit.Test;
1: 
1: import java.util.Random;
1: 
1: /**
0:  * Tests {@linkRandomUtils}.
1:  */
1: public final class RandomUtilsTest extends MahoutTestCase {
1: 
1:   @Test
0:   public void testIsNotPrime() {
0:     assertTrue(RandomUtils.isNotPrime(Integer.MIN_VALUE));
0:     assertTrue(RandomUtils.isNotPrime(-1));
0:     assertTrue(RandomUtils.isNotPrime(0));
0:     assertTrue(RandomUtils.isNotPrime(1));
0:     assertTrue(!RandomUtils.isNotPrime(2));
0:     assertTrue(!RandomUtils.isNotPrime(3));
0:     assertTrue(RandomUtils.isNotPrime(4));
0:     assertTrue(!RandomUtils.isNotPrime(5));
0:     assertTrue(RandomUtils.isNotPrime(Integer.MAX_VALUE - 1));   
0:     assertTrue(!RandomUtils.isNotPrime(Integer.MAX_VALUE)); // 2^31 - 1
1:   }
1: 
1:   @Test
0:   public void testNextPrime() {
0:     assertEquals(2, RandomUtils.nextPrime(-1));
0:     assertEquals(2, RandomUtils.nextPrime(1));
0:     assertEquals(2, RandomUtils.nextPrime(2));
0:     assertEquals(3, RandomUtils.nextPrime(3));
0:     assertEquals(5, RandomUtils.nextPrime(4));
0:     assertEquals(5, RandomUtils.nextPrime(5));
0:     assertEquals(7, RandomUtils.nextPrime(6));    
0:     assertEquals(Integer.MAX_VALUE, RandomUtils.nextPrime(Integer.MAX_VALUE - 1));
1:   }
1: 
1:   @Test
1:   public void testNextTwinPrime() {
1:     assertEquals(5, RandomUtils.nextTwinPrime(-1));
1:     assertEquals(5, RandomUtils.nextTwinPrime(1));
1:     assertEquals(5, RandomUtils.nextTwinPrime(2));
1:     assertEquals(5, RandomUtils.nextTwinPrime(3));
1:     assertEquals(7, RandomUtils.nextTwinPrime(4));
1:     assertEquals(7, RandomUtils.nextTwinPrime(5));
1:     assertEquals(13, RandomUtils.nextTwinPrime(6));
1:     assertEquals(RandomUtils.MAX_INT_SMALLER_TWIN_PRIME + 2,
1:                  RandomUtils.nextTwinPrime(RandomUtils.MAX_INT_SMALLER_TWIN_PRIME));
1:     try {
1:       RandomUtils.nextTwinPrime(RandomUtils.MAX_INT_SMALLER_TWIN_PRIME + 1);
1:       fail();
1:     } catch (IllegalArgumentException iae) {
1:       // good
1:     }
1:   }
1: 
1:   @Test
0:   public void testLongToSeed() {
0:     Random r = RandomUtils.getRandom();
0:     for (int i = 0; i < 10000; i++) {
0:       long l = r.nextLong();
0:       byte[] bytes = RandomUtils.longSeedtoBytes(l);
0:       long back = RandomUtils.seedBytesToLong(bytes);
0:       assertEquals(l, back);
1:     }
1:   }
1: 
1:   @Test
0:   public void testHashDouble() {
0:     assertEquals(0, RandomUtils.hashDouble(0.0));
0:     assertEquals(1072693248, RandomUtils.hashDouble(1.0));
0:     assertEquals(2146959360, RandomUtils.hashDouble(Double.NaN));
0:     assertEquals(2146435072, RandomUtils.hashDouble(Double.POSITIVE_INFINITY));
1:   }
1: 
1:   @Test
0:   public void testHashFloat() {
0:     assertEquals(0, RandomUtils.hashFloat(0.0f));
0:     assertEquals(1065353216, RandomUtils.hashFloat(1.0f));
0:     assertEquals(2143289344, RandomUtils.hashFloat(Float.NaN));
0:     assertEquals(2139095040, RandomUtils.hashFloat(Float.POSITIVE_INFINITY));
1:   }
1: 
1:   @Test
0:   public void testHashLong() {
0:     assertEquals(0, RandomUtils.hashLong(-1L));
0:     assertEquals(0, RandomUtils.hashLong(0L));
0:     assertEquals(1, RandomUtils.hashLong(1L));
0:     assertEquals(Integer.MAX_VALUE, RandomUtils.hashLong(Integer.MAX_VALUE));
0:     assertEquals(Integer.MIN_VALUE, RandomUtils.hashLong((long) Integer.MAX_VALUE + 1L));
0:     assertEquals(Integer.MIN_VALUE, RandomUtils.hashLong(Long.MAX_VALUE));
0:     assertEquals(Integer.MIN_VALUE, RandomUtils.hashLong(Long.MIN_VALUE));
1:   }
1: 
1: }
============================================================================