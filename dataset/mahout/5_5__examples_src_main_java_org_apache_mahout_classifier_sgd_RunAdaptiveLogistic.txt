1:a515335: /*
1:a515335:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a515335:  * contributor license agreements.  See the NOTICE file distributed with
1:a515335:  * this work for additional information regarding copyright ownership.
1:a515335:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a515335:  * (the "License"); you may not use this file except in compliance with
1:a515335:  * the License.  You may obtain a copy of the License at
1:a515335:  *
1:a515335:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a515335:  *
1:a515335:  * Unless required by applicable law or agreed to in writing, software
1:a515335:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a515335:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a515335:  * See the License for the specific language governing permissions and
1:a515335:  * limitations under the License.
1:a515335:  */
2:a515335: 
1:a515335: package org.apache.mahout.classifier.sgd;
1:a515335: 
1:a515335: import org.apache.commons.cli2.CommandLine;
1:a515335: import org.apache.commons.cli2.Group;
1:a515335: import org.apache.commons.cli2.Option;
1:a515335: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:a515335: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:a515335: import org.apache.commons.cli2.builder.GroupBuilder;
1:a515335: import org.apache.commons.cli2.commandline.Parser;
1:a515335: import org.apache.commons.cli2.util.HelpFormatter;
1:4ef9d31: import org.apache.commons.io.Charsets;
1:a515335: import org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper;
1:a515335: import org.apache.mahout.ep.State;
1:a515335: import org.apache.mahout.math.SequentialAccessSparseVector;
1:a515335: import org.apache.mahout.math.Vector;
1:4ef9d31: 
1:a515335: import java.io.BufferedReader;
1:a515335: import java.io.BufferedWriter;
1:a515335: import java.io.File;
1:229aeff: import java.io.FileOutputStream;
1:229aeff: import java.io.OutputStreamWriter;
1:a515335: import java.io.PrintWriter;
1:a515335: import java.util.HashMap;
1:a515335: import java.util.Map;
1:a515335: 
1:a515335: public final class RunAdaptiveLogistic {
1:a515335: 
1:a515335:   private static String inputFile;
1:a515335:   private static String modelFile;
1:a515335:   private static String outputFile;
1:a515335:   private static String idColumn;
1:a515335:   private static boolean maxScoreOnly;
1:a515335: 
1:a515335:   private RunAdaptiveLogistic() {
5:a515335:   }
1:a515335: 
1:1ead5ae:   public static void main(String[] args) throws Exception {
1:229aeff:     mainToOutput(args, new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
1:a515335:   }
1:a515335: 
1:1ead5ae:   static void mainToOutput(String[] args, PrintWriter output) throws Exception {
1:a515335:     if (!parseArgs(args)) {
1:a515335:       return;
1:a515335:     }
1:a515335:     AdaptiveLogisticModelParameters lmp = AdaptiveLogisticModelParameters
1:a515335:         .loadFromFile(new File(modelFile));
1:a515335: 
1:a515335:     CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:a515335:     csv.setIdName(idColumn);
1:a515335: 
1:a515335:     AdaptiveLogisticRegression lr = lmp.createAdaptiveLogisticRegression();
1:a515335: 
1:a515335:     State<Wrapper, CrossFoldLearner> best = lr.getBest();
1:a515335:     if (best == null) {
1:229aeff:       output.println("AdaptiveLogisticRegression has not be trained probably.");
1:a515335:       return;
1:a515335:     }
1:a515335:     CrossFoldLearner learner = best.getPayload().getLearner();
1:a515335: 
1:a515335:     BufferedReader in = TrainAdaptiveLogistic.open(inputFile);
1:8bcaa77:     int k = 0;
1:a515335: 
1:4ef9d31:     try (BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile),
1:4ef9d31:         Charsets.UTF_8))) {
1:8bcaa77:       out.write(idColumn + ",target,score");
1:8bcaa77:       out.newLine();
1:a515335: 
1:8bcaa77:       String line = in.readLine();
1:8bcaa77:       csv.firstLine(line);
2:a515335:       line = in.readLine();
1:02ff22f:       Map<String, Double> results = new HashMap<>();
1:8bcaa77:       while (line != null) {
1:8bcaa77:         Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
1:8bcaa77:         csv.processLine(line, v, false);
1:8bcaa77:         Vector scores = learner.classifyFull(v);
1:8bcaa77:         results.clear();
1:8bcaa77:         if (maxScoreOnly) {
1:8bcaa77:           results.put(csv.getTargetLabel(scores.maxValueIndex()),
1:4ef9d31:               scores.maxValue());
1:8bcaa77:         } else {
1:8bcaa77:           for (int i = 0; i < scores.size(); i++) {
1:8bcaa77:             results.put(csv.getTargetLabel(i), scores.get(i));
1:8bcaa77:           }
1:8bcaa77:         }
1:8bcaa77: 
1:8bcaa77:         for (Map.Entry<String, Double> entry : results.entrySet()) {
1:8bcaa77:           out.write(csv.getIdString(line) + ',' + entry.getKey() + ',' + entry.getValue());
1:8bcaa77:           out.newLine();
1:8bcaa77:         }
1:8bcaa77:         k++;
1:8bcaa77:         if (k % 100 == 0) {
1:8bcaa77:           output.println(k + " records processed");
1:8bcaa77:         }
1:8bcaa77:         line = in.readLine();
1:8bcaa77:       }
1:8bcaa77:       out.flush();
1:a515335:     }
1:229aeff:     output.println(k + " records processed totally.");
1:a515335:   }
1:a515335: 
1:a515335:   private static boolean parseArgs(String[] args) {
1:a515335:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1:a515335: 
1:a515335:     Option help = builder.withLongName("help")
1:a515335:       .withDescription("print this list").create();
1:a515335: 
1:a515335:     Option quiet = builder.withLongName("quiet")
1:a515335:       .withDescription("be extra quiet").create();
1:a515335: 
1:a515335:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:a515335:     Option inputFileOption = builder
1:a515335:       .withLongName("input")
1:a515335:       .withRequired(true)
1:a515335:       .withArgument(
1:a515335:           argumentBuilder.withName("input").withMaximum(1)
1:a515335:             .create())
1:a515335:       .withDescription("where to get training data").create();
1:a515335: 
1:a515335:     Option modelFileOption = builder
1:a515335:       .withLongName("model")
1:a515335:       .withRequired(true)
1:a515335:       .withArgument(
1:a515335:           argumentBuilder.withName("model").withMaximum(1)
1:a515335:             .create())
1:a515335:       .withDescription("where to get the trained model").create();
1:a515335:     
1:a515335:     Option outputFileOption = builder
1:a515335:       .withLongName("output")
1:a515335:       .withRequired(true)
1:a515335:       .withDescription("the file path to output scores")
1:a515335:       .withArgument(argumentBuilder.withName("output").withMaximum(1).create())
1:a515335:       .create();
1:a515335:     
1:a515335:     Option idColumnOption = builder
1:a515335:       .withLongName("idcolumn")
1:a515335:       .withRequired(true)
1:a515335:       .withDescription("the name of the id column for each record")
1:a515335:       .withArgument(argumentBuilder.withName("idcolumn").withMaximum(1).create())
1:a515335:       .create();
1:a515335:     
1:a515335:     Option maxScoreOnlyOption = builder
1:a515335:       .withLongName("maxscoreonly")
1:a515335:       .withDescription("only output the target label with max scores")
1:a515335:       .create();
1:a515335: 
1:a515335:     Group normalArgs = new GroupBuilder()
1:a515335:       .withOption(help).withOption(quiet)
1:a515335:       .withOption(inputFileOption).withOption(modelFileOption)
1:a515335:       .withOption(outputFileOption).withOption(idColumnOption)
1:a515335:       .withOption(maxScoreOnlyOption)
1:a515335:       .create();
1:a515335: 
1:a515335:     Parser parser = new Parser();
1:a515335:     parser.setHelpOption(help);
1:a515335:     parser.setHelpTrigger("--help");
1:a515335:     parser.setGroup(normalArgs);
1:a515335:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:a515335:     CommandLine cmdLine = parser.parseAndHelp(args);
1:a515335: 
1:a515335:     if (cmdLine == null) {
1:a515335:       return false;
1:a515335:     }
1:a515335: 
1:a515335:     inputFile = getStringArgument(cmdLine, inputFileOption);
1:a515335:     modelFile = getStringArgument(cmdLine, modelFileOption);
1:a515335:     outputFile = getStringArgument(cmdLine, outputFileOption);
1:a515335:     idColumn = getStringArgument(cmdLine, idColumnOption);
1:a515335:     maxScoreOnly = getBooleanArgument(cmdLine, maxScoreOnlyOption);    
1:a515335:     return true;
1:a515335:   }
1:a515335: 
1:a515335:   private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
1:a515335:     return cmdLine.hasOption(option);
1:a515335:   }
1:a515335: 
1:a515335:   private static String getStringArgument(CommandLine cmdLine, Option inputFile) {
1:a515335:     return (String) cmdLine.getValue(inputFile);
1:a515335:   }
1:a515335: 
1:a515335: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:       Map<String, Double> results = new HashMap<>();
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
1: 
/////////////////////////////////////////////////////////////////////////
1:     try (BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile),
1:         Charsets.UTF_8))) {
/////////////////////////////////////////////////////////////////////////
1:               scores.maxValue());
/////////////////////////////////////////////////////////////////////////
author:Ted Dunning
-------------------------------------------------------------------------------
commit:8bcaa77
/////////////////////////////////////////////////////////////////////////
1:     int k = 0;
0:     try {
1:       out.write(idColumn + ",target,score");
1:       out.newLine();
1:       String line = in.readLine();
1:       csv.firstLine(line);
0:       Map<String, Double> results = new HashMap<String, Double>();
1:       while (line != null) {
1:         Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
1:         csv.processLine(line, v, false);
1:         Vector scores = learner.classifyFull(v);
1:         results.clear();
1:         if (maxScoreOnly) {
1:           results.put(csv.getTargetLabel(scores.maxValueIndex()),
0:             scores.maxValue());
1:         } else {
1:           for (int i = 0; i < scores.size(); i++) {
1:             results.put(csv.getTargetLabel(i), scores.get(i));
1:           }
1:         }
1: 
1:         for (Map.Entry<String, Double> entry : results.entrySet()) {
1:           out.write(csv.getIdString(line) + ',' + entry.getKey() + ',' + entry.getValue());
1:           out.newLine();
1:         }
1:         k++;
1:         if (k % 100 == 0) {
1:           output.println(k + " records processed");
1:         }
1:         line = in.readLine();
1:       }
1:       out.flush();
0:     } finally {
0:       out.close();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileOutputStream;
1: import java.io.OutputStreamWriter;
/////////////////////////////////////////////////////////////////////////
1:     mainToOutput(args, new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true));
/////////////////////////////////////////////////////////////////////////
1:       output.println("AdaptiveLogisticRegression has not be trained probably.");
0:     BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile), Charsets.UTF_8));
/////////////////////////////////////////////////////////////////////////
0:         output.println(k + " records processed");
1:     output.println(k + " records processed totally.");
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       csv.processLine(line, v, false);
/////////////////////////////////////////////////////////////////////////
commit:23722bc
/////////////////////////////////////////////////////////////////////////
0:     mainToOutput(args, new PrintWriter(System.out, true));
commit:a515335
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.commons.cli2.util.HelpFormatter;
1: import org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.Wrapper;
1: import org.apache.mahout.ep.State;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import java.io.BufferedReader;
1: import java.io.BufferedWriter;
1: import java.io.File;
0: import java.io.FileWriter;
0: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.HashMap;
0: import java.util.Locale;
1: import java.util.Map;
1: 
1: public final class RunAdaptiveLogistic {
1: 
1:   private static String inputFile;
1:   private static String modelFile;
1:   private static String outputFile;
1:   private static String idColumn;
1:   private static boolean maxScoreOnly;
1: 
1:   private RunAdaptiveLogistic() {
1:   }
1: 
0:   public static void main(String[] args) throws IOException {
0:     mainToOutput(args, new PrintWriter(System.out));
1:   }
1: 
0:   static void mainToOutput(String[] args, PrintWriter output) throws IOException {
1:     if (!parseArgs(args)) {
1:       return;
1:     }
1:     AdaptiveLogisticModelParameters lmp = AdaptiveLogisticModelParameters
1:         .loadFromFile(new File(modelFile));
1: 
1:     CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:     csv.setIdName(idColumn);
1: 
1:     AdaptiveLogisticRegression lr = lmp.createAdaptiveLogisticRegression();
1: 
1:     State<Wrapper, CrossFoldLearner> best = lr.getBest();
1:     if (best == null) {
0:       output.printf("%s\n",
0:           "AdaptiveLogisticRegression has not be trained probably.");
1:       return;
1:     }
1:     CrossFoldLearner learner = best.getPayload().getLearner();
1: 
1:     BufferedReader in = TrainAdaptiveLogistic.open(inputFile);
0:     BufferedWriter out = new BufferedWriter(new FileWriter(outputFile));
1: 
0:     out.write(idColumn + ",target,score");
0:     out.newLine();
1: 
0:     String line = in.readLine();
0:     csv.firstLine(line);
1:     line = in.readLine();
0:     Map<String, Double> results = new HashMap<String, Double>();
0:     int k = 0;
0:     while (line != null) {
0:       Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
0:       csv.processLine(line, v, false);
0:       Vector scores = learner.classifyFull(v);
0:       results.clear();
0:       if (maxScoreOnly) {
0:         results.put(csv.getTargetLabel(scores.maxValueIndex()),
0:             scores.maxValue());
0:       } else {
0:         for (int i = 0; i < scores.size(); i++) {
0:           results.put(csv.getTargetLabel(i), scores.get(i));
1:         }
1:       }
1: 
0:       for (Map.Entry<String,Double> entry : results.entrySet()) {
0:         out.write(csv.getIdString(line) + ',' + entry.getKey() + ',' + entry.getValue());
0:         out.newLine();
1:       }
0:       k++;
0:       if (k % 100 == 0) {
0:         output.printf(Locale.ENGLISH, "%d records processed \n", k);
1:       }
1:       line = in.readLine();
1:     }
0:     out.flush();
0:     out.close();
0:     output.printf(Locale.ENGLISH, "%d records processed totally.\n", k);
1:   }
1: 
1:   private static boolean parseArgs(String[] args) {
1:     DefaultOptionBuilder builder = new DefaultOptionBuilder();
1: 
1:     Option help = builder.withLongName("help")
1:       .withDescription("print this list").create();
1: 
1:     Option quiet = builder.withLongName("quiet")
1:       .withDescription("be extra quiet").create();
1: 
1:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:     Option inputFileOption = builder
1:       .withLongName("input")
1:       .withRequired(true)
1:       .withArgument(
1:           argumentBuilder.withName("input").withMaximum(1)
1:             .create())
1:       .withDescription("where to get training data").create();
1: 
1:     Option modelFileOption = builder
1:       .withLongName("model")
1:       .withRequired(true)
1:       .withArgument(
1:           argumentBuilder.withName("model").withMaximum(1)
1:             .create())
1:       .withDescription("where to get the trained model").create();
1:     
1:     Option outputFileOption = builder
1:       .withLongName("output")
1:       .withRequired(true)
1:       .withDescription("the file path to output scores")
1:       .withArgument(argumentBuilder.withName("output").withMaximum(1).create())
1:       .create();
1:     
1:     Option idColumnOption = builder
1:       .withLongName("idcolumn")
1:       .withRequired(true)
1:       .withDescription("the name of the id column for each record")
1:       .withArgument(argumentBuilder.withName("idcolumn").withMaximum(1).create())
1:       .create();
1:     
1:     Option maxScoreOnlyOption = builder
1:       .withLongName("maxscoreonly")
1:       .withDescription("only output the target label with max scores")
1:       .create();
1: 
1:     Group normalArgs = new GroupBuilder()
1:       .withOption(help).withOption(quiet)
1:       .withOption(inputFileOption).withOption(modelFileOption)
1:       .withOption(outputFileOption).withOption(idColumnOption)
1:       .withOption(maxScoreOnlyOption)
1:       .create();
1: 
1:     Parser parser = new Parser();
1:     parser.setHelpOption(help);
1:     parser.setHelpTrigger("--help");
1:     parser.setGroup(normalArgs);
1:     parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
1:     CommandLine cmdLine = parser.parseAndHelp(args);
1: 
1:     if (cmdLine == null) {
1:       return false;
1:     }
1: 
1:     inputFile = getStringArgument(cmdLine, inputFileOption);
1:     modelFile = getStringArgument(cmdLine, modelFileOption);
1:     outputFile = getStringArgument(cmdLine, outputFileOption);
1:     idColumn = getStringArgument(cmdLine, idColumnOption);
1:     maxScoreOnly = getBooleanArgument(cmdLine, maxScoreOnlyOption);    
1:     return true;
1:   }
1: 
1:   private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
1:     return cmdLine.hasOption(option);
1:   }
1: 
1:   private static String getStringArgument(CommandLine cmdLine, Option inputFile) {
1:     return (String) cmdLine.getValue(inputFile);
1:   }
1: 
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:1ead5ae
/////////////////////////////////////////////////////////////////////////
1:   public static void main(String[] args) throws Exception {
1:   static void mainToOutput(String[] args, PrintWriter output) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     int lineCount = 2;
0:       try {
0:         csv.processLine(line, v, false);
0:       } catch (Exception e) {
0:         System.out.println("Exception at line " + lineCount);
0:         throw e;
0:       }
/////////////////////////////////////////////////////////////////////////
0:       lineCount++;
============================================================================