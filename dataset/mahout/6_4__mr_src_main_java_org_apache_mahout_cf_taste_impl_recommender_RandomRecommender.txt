1:543213b: /**
1:543213b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:543213b:  * contributor license agreements.  See the NOTICE file distributed with
1:543213b:  * this work for additional information regarding copyright ownership.
1:543213b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:543213b:  * (the "License"); you may not use this file except in compliance with
1:543213b:  * the License.  You may obtain a copy of the License at
1:543213b:  *
1:543213b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:543213b:  *
1:543213b:  * Unless required by applicable law or agreed to in writing, software
1:543213b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:543213b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:543213b:  * See the License for the specific language governing permissions and
1:543213b:  * limitations under the License.
1:543213b:  */
1:1b4e01f: 
1:543213b: package org.apache.mahout.cf.taste.impl.recommender;
10:543213b: 
1:85f9ece: import java.util.ArrayList;
1:1b4e01f: import java.util.Collection;
1:1b4e01f: import java.util.List;
1:1b4e01f: import java.util.Random;
1:1b4e01f: 
1:543213b: import org.apache.mahout.cf.taste.common.Refreshable;
1:1b4e01f: import org.apache.mahout.cf.taste.common.TasteException;
1:1b4e01f: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:543213b: import org.apache.mahout.cf.taste.model.DataModel;
1:543213b: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:1b4e01f: import org.apache.mahout.cf.taste.recommender.IDRescorer;
1:1b4e01f: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:543213b: import org.apache.mahout.common.RandomUtils;
1:543213b: 
1:543213b: /**
1:1b4e01f:  * Produces random recommendations and preference estimates. This is likely only useful as a novelty and for
1:1b4e01f:  * benchmarking.
1:543213b:  */
1:543213b: public final class RandomRecommender extends AbstractRecommender {
1:1b4e01f:   
1:543213b:   private final Random random = RandomUtils.getRandom();
1:543213b:   private final float minPref;
1:543213b:   private final float maxPref;
1:1b4e01f:   
1:543213b:   public RandomRecommender(DataModel dataModel) throws TasteException {
1:543213b:     super(dataModel);
1:543213b:     float maxPref = Float.NEGATIVE_INFINITY;
1:543213b:     float minPref = Float.POSITIVE_INFINITY;
1:543213b:     LongPrimitiveIterator userIterator = dataModel.getUserIDs();
1:543213b:     while (userIterator.hasNext()) {
1:543213b:       long userID = userIterator.next();
1:543213b:       PreferenceArray prefs = dataModel.getPreferencesFromUser(userID);
1:543213b:       for (int i = 0; i < prefs.length(); i++) {
1:543213b:         float prefValue = prefs.getValue(i);
1:543213b:         if (prefValue < minPref) {
1:543213b:           minPref = prefValue;
1:543213b:         }
1:543213b:         if (prefValue > maxPref) {
1:543213b:           maxPref = prefValue;
1:543213b:         }
1:543213b:       }
1:543213b:     }
1:543213b:     this.minPref = minPref;
1:543213b:     this.maxPref = maxPref;
1:543213b:   }
1:d141c8e: 
1:543213b:   @Override
1:d141c8e:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
1:d141c8e:     throws TasteException {
1:543213b:     DataModel dataModel = getDataModel();
1:543213b:     int numItems = dataModel.getNumItems();
1:85f9ece:     List<RecommendedItem> result = new ArrayList<>(howMany);
1:543213b:     while (result.size() < howMany) {
1:543213b:       LongPrimitiveIterator it = dataModel.getItemIDs();
1:543213b:       it.skip(random.nextInt(numItems));
1:543213b:       long itemID = it.next();
1:d141c8e:       if (includeKnownItems || dataModel.getPreferenceValue(userID, itemID) == null) {
1:543213b:         result.add(new GenericRecommendedItem(itemID, randomPref()));
1:543213b:       }
1:543213b:     }
1:543213b:     return result;
1:543213b:   }
1:1b4e01f:   
1:543213b:   @Override
1:543213b:   public float estimatePreference(long userID, long itemID) {
1:543213b:     return randomPref();
1:543213b:   }
1:1b4e01f:   
1:543213b:   private float randomPref() {
1:543213b:     return minPref + random.nextFloat() * (maxPref - minPref);
1:543213b:   }
1:1b4e01f:   
1:543213b:   @Override
1:543213b:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:543213b:     getDataModel().refresh(alreadyRefreshed);
1:543213b:   }
1:1b4e01f:   
1:543213b: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     List<RecommendedItem> result = new ArrayList<>(howMany);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d141c8e
/////////////////////////////////////////////////////////////////////////
1: 
1:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems)
1:     throws TasteException {
/////////////////////////////////////////////////////////////////////////
1:       if (includeKnownItems || dataModel.getPreferenceValue(userID, itemID) == null) {
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     List<RecommendedItem> result = Lists.newArrayListWithCapacity(howMany);
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Robin Anil
-------------------------------------------------------------------------------
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Random;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.recommender.IDRescorer;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:  * Produces random recommendations and preference estimates. This is likely only useful as a novelty and for
1:  * benchmarking.
1:   
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   
1:   
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:7d5c17f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.recommender.IDRescorer;
/////////////////////////////////////////////////////////////////////////
0:   public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
commit:543213b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender;
1: 
0: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
0: import org.apache.mahout.cf.taste.recommender.Rescorer;
0: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.common.Refreshable;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
0: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.common.RandomUtils;
1: 
0: import java.util.List;
0: import java.util.Collection;
0: import java.util.Random;
0: import java.util.ArrayList;
1: 
1: /**
0:  * Produces random recommendations and preference estimates. This is likely only useful as
0:  * a novelty and for benchmarking.
1:  */
1: public final class RandomRecommender extends AbstractRecommender {
1: 
1:   private final Random random = RandomUtils.getRandom();
1:   private final float minPref;
1:   private final float maxPref;
1: 
1:   public RandomRecommender(DataModel dataModel) throws TasteException {
1:     super(dataModel);
1:     float maxPref = Float.NEGATIVE_INFINITY;
1:     float minPref = Float.POSITIVE_INFINITY;
1:     LongPrimitiveIterator userIterator = dataModel.getUserIDs();
1:     while (userIterator.hasNext()) {
1:       long userID = userIterator.next();
1:       PreferenceArray prefs = dataModel.getPreferencesFromUser(userID);
1:       for (int i = 0; i < prefs.length(); i++) {
1:         float prefValue = prefs.getValue(i);
1:         if (prefValue < minPref) {
1:           minPref = prefValue;
1:         }
1:         if (prefValue > maxPref) {
1:           maxPref = prefValue;
1:         }
1:       }
1:     }
1:     this.minPref = minPref;
1:     this.maxPref = maxPref;
1:   }
1: 
1:   @Override
0:   public List<RecommendedItem> recommend(long userID, int howMany, Rescorer<Long> rescorer) throws TasteException {
1:     DataModel dataModel = getDataModel();
1:     int numItems = dataModel.getNumItems();
0:     List<RecommendedItem> result = new ArrayList<RecommendedItem>(howMany);
1:     while (result.size() < howMany) {
1:       LongPrimitiveIterator it = dataModel.getItemIDs();
1:       it.skip(random.nextInt(numItems));
1:       long itemID = it.next();
0:       if (dataModel.getPreferenceValue(userID, itemID) == null) {
1:         result.add(new GenericRecommendedItem(itemID, randomPref()));
1:       }
1:     }
1:     return result;
1:   }
1: 
1:   @Override
1:   public float estimatePreference(long userID, long itemID) {
1:     return randomPref();
1:   }
1: 
1:   private float randomPref() {
1:     return minPref + random.nextFloat() * (maxPref - minPref);
1:   }
1: 
1:   @Override
1:   public void refresh(Collection<Refreshable> alreadyRefreshed) {
1:     getDataModel().refresh(alreadyRefreshed);
1:   }
1: 
1: }
============================================================================