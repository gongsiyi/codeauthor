1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:8649ac2: package org.apache.mahout.math.neighborhood;
1:8649ac2: 
1:8649ac2: import java.util.Arrays;
1:8649ac2: import java.util.List;
1:8649ac2: 
1:8649ac2: import com.google.common.base.Function;
1:8649ac2: import com.google.common.base.Preconditions;
1:8649ac2: import com.google.common.collect.Iterables;
1:8649ac2: import org.apache.mahout.common.Pair;
1:8649ac2: import org.apache.mahout.common.RandomUtils;
1:8649ac2: import org.apache.mahout.common.distance.CosineDistanceMeasure;
1:8649ac2: import org.apache.mahout.common.distance.DistanceMeasure;
1:8649ac2: import org.apache.mahout.math.Matrix;
1:8649ac2: import org.apache.mahout.math.Vector;
1:8649ac2: import org.apache.mahout.math.random.WeightedThing;
1:8649ac2: import org.junit.Test;
1:8649ac2: import org.junit.runner.RunWith;
1:8649ac2: import org.junit.runners.Parameterized;
1:8649ac2: 
1:8649ac2: import static org.junit.Assert.assertEquals;
1:8649ac2: import static org.junit.Assert.assertTrue;
1:8649ac2: 
1:4ca6b86: @RunWith(Parameterized.class)
1:8649ac2: public class SearchQualityTest {
1:8649ac2:   private static final int NUM_DATA_POINTS = 1 << 14;
1:8649ac2:   private static final int NUM_QUERIES = 1 << 10;
1:8649ac2:   private static final int NUM_DIMENSIONS = 40;
1:8649ac2:   private static final int NUM_RESULTS = 2;
1:8649ac2: 
1:8649ac2:   private final Searcher searcher;
1:8649ac2:   private final Matrix dataPoints;
1:8649ac2:   private final Matrix queries;
1:8649ac2:   private Pair<List<List<WeightedThing<Vector>>>, Long> reference;
1:8649ac2:   private Pair<List<WeightedThing<Vector>>, Long> referenceSearchFirst;
1:8649ac2: 
1:8649ac2:   @Parameterized.Parameters
1:8649ac2:   public static List<Object[]> generateData() {
1:8649ac2:     RandomUtils.useTestSeed();
1:8649ac2:     Matrix dataPoints = LumpyData.lumpyRandomData(NUM_DATA_POINTS, NUM_DIMENSIONS);
1:8649ac2:     Matrix queries = LumpyData.lumpyRandomData(NUM_QUERIES, NUM_DIMENSIONS);
1:8649ac2: 
1:8649ac2:     DistanceMeasure distanceMeasure = new CosineDistanceMeasure();
1:8649ac2: 
1:8649ac2:     Searcher bruteSearcher = new BruteSearch(distanceMeasure);
1:8649ac2:     bruteSearcher.addAll(dataPoints);
1:8649ac2:     Pair<List<List<WeightedThing<Vector>>>, Long> reference = getResultsAndRuntime(bruteSearcher, queries);
1:8649ac2: 
1:8649ac2:     Pair<List<WeightedThing<Vector>>, Long> referenceSearchFirst =
1:8649ac2:         getResultsAndRuntimeSearchFirst(bruteSearcher, queries);
1:8649ac2: 
1:8649ac2:     double bruteSearchAvgTime = reference.getSecond() / (queries.numRows() * 1.0);
1:8649ac2:     System.out.printf("BruteSearch: avg_time(1 query) %f[s]\n", bruteSearchAvgTime);
1:8649ac2: 
1:8649ac2:     return Arrays.asList(new Object[][]{
1:8649ac2:         // NUM_PROJECTIONS = 3
1:8649ac2:         // SEARCH_SIZE = 10
1:8649ac2:         {new ProjectionSearch(distanceMeasure, 3, 10), dataPoints, queries, reference, referenceSearchFirst},
1:8649ac2:         {new FastProjectionSearch(distanceMeasure, 3, 10), dataPoints, queries, reference, referenceSearchFirst},
1:8649ac2:         // NUM_PROJECTIONS = 5
1:8649ac2:         // SEARCH_SIZE = 5
1:8649ac2:         {new ProjectionSearch(distanceMeasure, 5, 5), dataPoints, queries, reference, referenceSearchFirst},
1:ec9035c:         {new FastProjectionSearch(distanceMeasure, 5, 5), dataPoints, queries, reference, referenceSearchFirst},
1:8649ac2:     }
1:8649ac2:     );
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public SearchQualityTest(Searcher searcher, Matrix dataPoints, Matrix queries,
1:8649ac2:                            Pair<List<List<WeightedThing<Vector>>>, Long> reference,
1:8649ac2:                            Pair<List<WeightedThing<Vector>>, Long> referenceSearchFirst) {
1:8649ac2:     this.searcher = searcher;
1:8649ac2:     this.dataPoints = dataPoints;
1:8649ac2:     this.queries = queries;
1:8649ac2:     this.reference = reference;
1:8649ac2:     this.referenceSearchFirst = referenceSearchFirst;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   @Test
1:8649ac2:   public void testOverlapAndRuntimeSearchFirst() {
1:8649ac2:     searcher.clear();
1:8649ac2:     searcher.addAll(dataPoints);
1:8649ac2:     Pair<List<WeightedThing<Vector>>, Long> results = getResultsAndRuntimeSearchFirst(searcher, queries);
1:8649ac2: 
1:8649ac2:     int numFirstMatches = 0;
1:8649ac2:     for (int i = 0; i < queries.numRows(); ++i) {
1:8649ac2:       WeightedThing<Vector> referenceVector = referenceSearchFirst.getFirst().get(i);
1:8649ac2:       WeightedThing<Vector> resultVector = results.getFirst().get(i);
1:8649ac2:       if (referenceVector.getValue().equals(resultVector.getValue())) {
1:8649ac2:         ++numFirstMatches;
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2: 
1:8649ac2:     double bruteSearchAvgTime = reference.getSecond() / (queries.numRows() * 1.0);
1:8649ac2:     double searcherAvgTime = results.getSecond() / (queries.numRows() * 1.0);
1:8649ac2:     System.out.printf("%s: first matches %d [%d]; avg_time(1 query) %f(s) [%f]\n",
1:8649ac2:         searcher.getClass().getName(), numFirstMatches, queries.numRows(),
1:8649ac2:         searcherAvgTime, bruteSearchAvgTime);
1:8649ac2: 
1:8649ac2:     assertEquals("Closest vector returned doesn't match", queries.numRows(), numFirstMatches);
1:8649ac2:     assertTrue("Searcher " + searcher.getClass().getName() + " slower than brute",
1:8649ac2:         bruteSearchAvgTime > searcherAvgTime);
1:8649ac2:   }
1:8649ac2:   @Test
1:8649ac2:   public void testOverlapAndRuntime() {
1:8649ac2:     searcher.clear();
1:8649ac2:     searcher.addAll(dataPoints);
1:8649ac2:     Pair<List<List<WeightedThing<Vector>>>, Long> results = getResultsAndRuntime(searcher, queries);
1:8649ac2: 
1:8649ac2:     int numFirstMatches = 0;
1:8649ac2:     int numMatches = 0;
1:8649ac2:     StripWeight stripWeight = new StripWeight();
1:8649ac2:     for (int i = 0; i < queries.numRows(); ++i) {
1:8649ac2:       List<WeightedThing<Vector>> referenceVectors = reference.getFirst().get(i);
1:8649ac2:       List<WeightedThing<Vector>> resultVectors = results.getFirst().get(i);
1:8649ac2:       if (referenceVectors.get(0).getValue().equals(resultVectors.get(0).getValue())) {
1:8649ac2:         ++numFirstMatches;
1:8649ac2:       }
1:8649ac2:       for (Vector v : Iterables.transform(referenceVectors, stripWeight)) {
1:8649ac2:         for (Vector w : Iterables.transform(resultVectors, stripWeight)) {
1:8649ac2:           if (v.equals(w)) {
1:8649ac2:             ++numMatches;
1:8649ac2:           }
1:8649ac2:         }
1:8649ac2:       }
1:8649ac2:     }
1:8649ac2: 
1:8649ac2:     double bruteSearchAvgTime = reference.getSecond() / (queries.numRows() * 1.0);
1:8649ac2:     double searcherAvgTime = results.getSecond() / (queries.numRows() * 1.0);
1:8649ac2:     System.out.printf("%s: first matches %d [%d]; total matches %d [%d]; avg_time(1 query) %f(s) [%f]\n",
1:8649ac2:         searcher.getClass().getName(), numFirstMatches, queries.numRows(),
1:8649ac2:         numMatches, queries.numRows() * NUM_RESULTS, searcherAvgTime, bruteSearchAvgTime);
1:8649ac2: 
1:8649ac2:     assertEquals("Closest vector returned doesn't match", queries.numRows(), numFirstMatches);
1:8649ac2:     assertTrue("Searcher " + searcher.getClass().getName() + " slower than brute",
1:8649ac2:         bruteSearchAvgTime > searcherAvgTime);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public static Pair<List<List<WeightedThing<Vector>>>, Long> getResultsAndRuntime(Searcher searcher,
1:8649ac2:                                                                                    Iterable<? extends Vector> queries) {
1:8649ac2:     long start = System.currentTimeMillis();
1:8649ac2:     List<List<WeightedThing<Vector>>> results = searcher.search(queries, NUM_RESULTS);
1:8649ac2:     long end = System.currentTimeMillis();
1:02ff22f:     return new Pair<>(results, end - start);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public static Pair<List<WeightedThing<Vector>>, Long> getResultsAndRuntimeSearchFirst(
1:8649ac2:       Searcher searcher, Iterable<? extends Vector> queries) {
1:8649ac2:     long start = System.currentTimeMillis();
1:8649ac2:     List<WeightedThing<Vector>> results = searcher.searchFirst(queries, false);
1:8649ac2:     long end = System.currentTimeMillis();
1:02ff22f:     return new Pair<>(results, end - start);
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   static class StripWeight implements Function<WeightedThing<Vector>, Vector> {
1:8649ac2:     @Override
1:8649ac2:     public Vector apply(WeightedThing<Vector> input) {
1:cd167f9:       Preconditions.checkArgument(input != null, "input is null");
1:8649ac2:       //noinspection ConstantConditions
1:8649ac2:       return input.getValue();
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     return new Pair<>(results, end - start);
/////////////////////////////////////////////////////////////////////////
1:     return new Pair<>(results, end - start);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:       Preconditions.checkArgument(input != null, "input is null");
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1: @RunWith(Parameterized.class)
author:dfilimon
-------------------------------------------------------------------------------
commit:5b29d03
/////////////////////////////////////////////////////////////////////////
commit:ec9035c
/////////////////////////////////////////////////////////////////////////
1:         {new FastProjectionSearch(distanceMeasure, 5, 5), dataPoints, queries, reference, referenceSearchFirst},
0:         {new LocalitySensitiveHashSearch(distanceMeasure, 5), dataPoints, queries, reference, referenceSearchFirst},
0:         // SEARCH_SIZE = 2
0:         {new LocalitySensitiveHashSearch(distanceMeasure, 2), dataPoints, queries, reference, referenceSearchFirst},
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.neighborhood;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import com.google.common.base.Function;
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.Iterables;
1: import org.apache.mahout.common.Pair;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.common.distance.CosineDistanceMeasure;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.random.WeightedThing;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
0: @RunWith(value = Parameterized.class)
1: public class SearchQualityTest {
1:   private static final int NUM_DATA_POINTS = 1 << 14;
1:   private static final int NUM_QUERIES = 1 << 10;
1:   private static final int NUM_DIMENSIONS = 40;
1:   private static final int NUM_RESULTS = 2;
1: 
1:   private final Searcher searcher;
1:   private final Matrix dataPoints;
1:   private final Matrix queries;
1:   private Pair<List<List<WeightedThing<Vector>>>, Long> reference;
1:   private Pair<List<WeightedThing<Vector>>, Long> referenceSearchFirst;
1: 
1:   @Parameterized.Parameters
1:   public static List<Object[]> generateData() {
1:     RandomUtils.useTestSeed();
1:     Matrix dataPoints = LumpyData.lumpyRandomData(NUM_DATA_POINTS, NUM_DIMENSIONS);
1:     Matrix queries = LumpyData.lumpyRandomData(NUM_QUERIES, NUM_DIMENSIONS);
1: 
1:     DistanceMeasure distanceMeasure = new CosineDistanceMeasure();
1: 
1:     Searcher bruteSearcher = new BruteSearch(distanceMeasure);
1:     bruteSearcher.addAll(dataPoints);
1:     Pair<List<List<WeightedThing<Vector>>>, Long> reference = getResultsAndRuntime(bruteSearcher, queries);
1: 
1:     Pair<List<WeightedThing<Vector>>, Long> referenceSearchFirst =
1:         getResultsAndRuntimeSearchFirst(bruteSearcher, queries);
1: 
1:     double bruteSearchAvgTime = reference.getSecond() / (queries.numRows() * 1.0);
1:     System.out.printf("BruteSearch: avg_time(1 query) %f[s]\n", bruteSearchAvgTime);
1: 
1:     return Arrays.asList(new Object[][]{
1:         // NUM_PROJECTIONS = 3
1:         // SEARCH_SIZE = 10
1:         {new ProjectionSearch(distanceMeasure, 3, 10), dataPoints, queries, reference, referenceSearchFirst},
1:         {new FastProjectionSearch(distanceMeasure, 3, 10), dataPoints, queries, reference, referenceSearchFirst},
1:         // NUM_PROJECTIONS = 5
1:         // SEARCH_SIZE = 5
1:         {new ProjectionSearch(distanceMeasure, 5, 5), dataPoints, queries, reference, referenceSearchFirst},
1:     }
1:     );
1:   }
1: 
1:   public SearchQualityTest(Searcher searcher, Matrix dataPoints, Matrix queries,
1:                            Pair<List<List<WeightedThing<Vector>>>, Long> reference,
1:                            Pair<List<WeightedThing<Vector>>, Long> referenceSearchFirst) {
1:     this.searcher = searcher;
1:     this.dataPoints = dataPoints;
1:     this.queries = queries;
1:     this.reference = reference;
1:     this.referenceSearchFirst = referenceSearchFirst;
1:   }
1: 
1:   @Test
1:   public void testOverlapAndRuntimeSearchFirst() {
1:     searcher.clear();
1:     searcher.addAll(dataPoints);
1:     Pair<List<WeightedThing<Vector>>, Long> results = getResultsAndRuntimeSearchFirst(searcher, queries);
1: 
1:     int numFirstMatches = 0;
1:     for (int i = 0; i < queries.numRows(); ++i) {
1:       WeightedThing<Vector> referenceVector = referenceSearchFirst.getFirst().get(i);
1:       WeightedThing<Vector> resultVector = results.getFirst().get(i);
1:       if (referenceVector.getValue().equals(resultVector.getValue())) {
1:         ++numFirstMatches;
1:       }
1:     }
1: 
1:     double bruteSearchAvgTime = reference.getSecond() / (queries.numRows() * 1.0);
1:     double searcherAvgTime = results.getSecond() / (queries.numRows() * 1.0);
1:     System.out.printf("%s: first matches %d [%d]; avg_time(1 query) %f(s) [%f]\n",
1:         searcher.getClass().getName(), numFirstMatches, queries.numRows(),
1:         searcherAvgTime, bruteSearchAvgTime);
1: 
1:     assertEquals("Closest vector returned doesn't match", queries.numRows(), numFirstMatches);
1:     assertTrue("Searcher " + searcher.getClass().getName() + " slower than brute",
1:         bruteSearchAvgTime > searcherAvgTime);
1:   }
1:   @Test
1:   public void testOverlapAndRuntime() {
1:     searcher.clear();
1:     searcher.addAll(dataPoints);
1:     Pair<List<List<WeightedThing<Vector>>>, Long> results = getResultsAndRuntime(searcher, queries);
1: 
1:     int numFirstMatches = 0;
1:     int numMatches = 0;
1:     StripWeight stripWeight = new StripWeight();
1:     for (int i = 0; i < queries.numRows(); ++i) {
1:       List<WeightedThing<Vector>> referenceVectors = reference.getFirst().get(i);
1:       List<WeightedThing<Vector>> resultVectors = results.getFirst().get(i);
1:       if (referenceVectors.get(0).getValue().equals(resultVectors.get(0).getValue())) {
1:         ++numFirstMatches;
1:       }
1:       for (Vector v : Iterables.transform(referenceVectors, stripWeight)) {
1:         for (Vector w : Iterables.transform(resultVectors, stripWeight)) {
1:           if (v.equals(w)) {
1:             ++numMatches;
1:           }
1:         }
1:       }
1:     }
1: 
1:     double bruteSearchAvgTime = reference.getSecond() / (queries.numRows() * 1.0);
1:     double searcherAvgTime = results.getSecond() / (queries.numRows() * 1.0);
1:     System.out.printf("%s: first matches %d [%d]; total matches %d [%d]; avg_time(1 query) %f(s) [%f]\n",
1:         searcher.getClass().getName(), numFirstMatches, queries.numRows(),
1:         numMatches, queries.numRows() * NUM_RESULTS, searcherAvgTime, bruteSearchAvgTime);
1: 
1:     assertEquals("Closest vector returned doesn't match", queries.numRows(), numFirstMatches);
1:     assertTrue("Searcher " + searcher.getClass().getName() + " slower than brute",
1:         bruteSearchAvgTime > searcherAvgTime);
1:   }
1: 
1:   public static Pair<List<List<WeightedThing<Vector>>>, Long> getResultsAndRuntime(Searcher searcher,
1:                                                                                    Iterable<? extends Vector> queries) {
1:     long start = System.currentTimeMillis();
1:     List<List<WeightedThing<Vector>>> results = searcher.search(queries, NUM_RESULTS);
1:     long end = System.currentTimeMillis();
0:     return new Pair<List<List<WeightedThing<Vector>>>, Long>(results, end - start);
1:   }
1: 
1:   public static Pair<List<WeightedThing<Vector>>, Long> getResultsAndRuntimeSearchFirst(
1:       Searcher searcher, Iterable<? extends Vector> queries) {
1:     long start = System.currentTimeMillis();
1:     List<WeightedThing<Vector>> results = searcher.searchFirst(queries, false);
1:     long end = System.currentTimeMillis();
0:     return new Pair<List<WeightedThing<Vector>>, Long>(results, end - start);
1:   }
1: 
1:   static class StripWeight implements Function<WeightedThing<Vector>, Vector> {
1:     @Override
1:     public Vector apply(WeightedThing<Vector> input) {
0:       Preconditions.checkArgument(input != null);
1:       //noinspection ConstantConditions
1:       return input.getValue();
1:     }
1:   }
1: }
============================================================================