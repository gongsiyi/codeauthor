1:845cbcd: /**
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
7:845cbcd: 
1:845cbcd: package org.apache.mahout.cf.taste.hadoop.preparation;
1:845cbcd: 
1:845cbcd: import org.apache.hadoop.io.IntWritable;
1:845cbcd: import org.apache.hadoop.mapreduce.Mapper;
1:845cbcd: import org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils;
1:845cbcd: import org.apache.mahout.math.RandomAccessSparseVector;
1:845cbcd: import org.apache.mahout.math.VarLongWritable;
1:845cbcd: import org.apache.mahout.math.Vector;
1:845cbcd: import org.apache.mahout.math.VectorWritable;
1:845cbcd: 
1:845cbcd: import java.io.IOException;
1:845cbcd: 
1:845cbcd: public class ToItemVectorsMapper
1:845cbcd:     extends Mapper<VarLongWritable,VectorWritable,IntWritable,VectorWritable> {
1:845cbcd: 
1:9152a13:   private final IntWritable itemID = new IntWritable();
1:9152a13:   private final VectorWritable itemVectorWritable = new VectorWritable();
1:9152a13: 
2:845cbcd:   @Override
1:845cbcd:   protected void map(VarLongWritable rowIndex, VectorWritable vectorWritable, Context ctx)
1:845cbcd:     throws IOException, InterruptedException {
1:845cbcd:     Vector userRatings = vectorWritable.get();
1:845cbcd: 
1:845cbcd:     int column = TasteHadoopUtils.idToIndex(rowIndex.get());
1:9152a13: 
1:9152a13:     itemVectorWritable.setWritesLaxPrecision(true);
1:845cbcd: 
1:9152a13:     Vector itemVector = new RandomAccessSparseVector(Integer.MAX_VALUE, 1);
1:dc62944:     for (Vector.Element elem : userRatings.nonZeroes()) {
1:9152a13:       itemID.set(elem.index());
1:9152a13:       itemVector.setQuick(column, elem.get());
1:9152a13:       itemVectorWritable.set(itemVector);
1:9152a13:       ctx.write(itemID, itemVectorWritable);
1:9152a13:       // reset vector for reuse
1:9152a13:       itemVector.setQuick(elem.index(), 0.0);
3:845cbcd:     }
1:845cbcd:   }
1:845cbcd: 
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e90d901
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9152a13
/////////////////////////////////////////////////////////////////////////
1:   private final IntWritable itemID = new IntWritable();
1:   private final VectorWritable itemVectorWritable = new VectorWritable();
1: 
/////////////////////////////////////////////////////////////////////////
1:     Vector itemVector = new RandomAccessSparseVector(Integer.MAX_VALUE, 1);
1: 
1:     itemVectorWritable.setWritesLaxPrecision(true);
1:       itemID.set(elem.index());
1:       itemVector.setQuick(column, elem.get());
1:       itemVectorWritable.set(itemVector);
1:       ctx.write(itemID, itemVectorWritable);
1:       // reset vector for reuse
1:       itemVector.setQuick(elem.index(), 0.0);
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.preparation;
1: 
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.cf.taste.hadoop.TasteHadoopUtils;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.VarLongWritable;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
0: import org.apache.mahout.math.hadoop.similarity.cooccurrence.Vectors;
1: 
1: import java.io.IOException;
0: import java.util.Iterator;
1: 
1: public class ToItemVectorsMapper
1:     extends Mapper<VarLongWritable,VectorWritable,IntWritable,VectorWritable> {
1: 
0:   public static final String SAMPLE_SIZE = ToItemVectorsMapper.class + ".sampleSize";
1: 
0:   enum Elements {
0:     USER_RATINGS_USED, USER_RATINGS_NEGLECTED
1:   }
1: 
0:   private int sampleSize;
1: 
1:   @Override
0:   protected void setup(Context ctx) throws IOException, InterruptedException {
0:     sampleSize = ctx.getConfiguration().getInt(SAMPLE_SIZE, Integer.MAX_VALUE);
1:   }
1: 
1:   @Override
1:   protected void map(VarLongWritable rowIndex, VectorWritable vectorWritable, Context ctx)
1:       throws IOException, InterruptedException {
1:     Vector userRatings = vectorWritable.get();
1: 
0:     int numElementsBeforeSampling = userRatings.getNumNondefaultElements();
0:     userRatings = Vectors.maybeSample(userRatings, sampleSize);
0:     int numElementsAfterSampling = userRatings.getNumNondefaultElements();
1: 
1:     int column = TasteHadoopUtils.idToIndex(rowIndex.get());
0:     VectorWritable itemVector = new VectorWritable(new RandomAccessSparseVector(Integer.MAX_VALUE, 1));
0:     itemVector.setWritesLaxPrecision(true);
1: 
0:     Iterator<Vector.Element> iterator = userRatings.iterateNonZero();
0:     while (iterator.hasNext()) {
0:       Vector.Element elem = iterator.next();
0:       itemVector.get().setQuick(column, elem.get());
0:       ctx.write(new IntWritable(elem.index()), itemVector);
1:     }
1: 
0:     ctx.getCounter(Elements.USER_RATINGS_USED).increment(numElementsAfterSampling);
0:     ctx.getCounter(Elements.USER_RATINGS_NEGLECTED).increment(numElementsBeforeSampling - numElementsAfterSampling);
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
0:     Vector itemVector = new RandomAccessSparseVector(Integer.MAX_VALUE, 1);
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0:     throws IOException, InterruptedException {
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element elem : userRatings.nonZeroes()) {
============================================================================