1:4194a28: /**
1:4194a28:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4194a28:  * contributor license agreements.  See the NOTICE file distributed with
1:4194a28:  * this work for additional information regarding copyright ownership.
1:4194a28:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4194a28:  * (the "License"); you may not use this file except in compliance with
1:4194a28:  * the License.  You may obtain a copy of the License at
1:4194a28:  *
1:4194a28:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4194a28:  *
1:4194a28:  * Unless required by applicable law or agreed to in writing, software
1:4194a28:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4194a28:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4194a28:  * See the License for the specific language governing permissions and
1:4194a28:  * limitations under the License.
1:4194a28:  */
6:29a7f38: 
1:4194a28: package org.apache.mahout.utils.clustering;
1:29a7f38: 
1:29a7f38: import java.io.IOException;
1:29a7f38: import java.io.Writer;
1:b7b432c: import java.util.HashMap;
1:29a7f38: import java.util.List;
1:29a7f38: import java.util.Map;
1:b7b432c: import java.util.Random;
1:4194a28: import java.util.regex.Pattern;
1:29a7f38: 
1:51f58b8: import org.apache.mahout.clustering.Cluster;
1:8253491: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
1:51f58b8: import org.apache.mahout.clustering.classify.WeightedVectorWritable;
1:51f58b8: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:229aeff: import org.apache.mahout.common.RandomUtils;
1:51f58b8: import org.apache.mahout.common.StringUtils;
1:51f58b8: import org.apache.mahout.common.distance.DistanceMeasure;
1:51f58b8: import org.apache.mahout.math.NamedVector;
1:51f58b8: import org.apache.mahout.math.Vector;
1:51f58b8: 
1:29a7f38: /**
1:29a7f38:  * GraphML -- see http://gephi.org/users/supported-graph-formats/graphml-format/
1:4194a28:  */
1:4194a28: public class GraphMLClusterWriter extends AbstractClusterWriter {
1:29a7f38: 
1:4194a28:   private static final Pattern VEC_PATTERN = Pattern.compile("\\{|\\:|\\,|\\}");
1:02ff22f:   private final Map<Integer, Color> colors = new HashMap<>();
1:b7b432c:   private Color lastClusterColor;
1:229aeff:   private float lastX;
1:229aeff:   private float lastY;
1:b7b432c:   private Random random;
1:b7b432c:   private int posStep;
1:b7b432c:   private final String[] dictionary;
1:b7b432c:   private final int numTopFeatures;
1:229aeff:   private final int subString;
1:4194a28: 
1:8253491:   public GraphMLClusterWriter(Writer writer, Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints,
1:6d16230:                               DistanceMeasure measure, int numTopFeatures, String[] dictionary, int subString)
1:6d16230:     throws IOException {
1:b7b432c:     super(writer, clusterIdToPoints, measure);
1:b7b432c:     this.dictionary = dictionary;
1:b7b432c:     this.numTopFeatures = numTopFeatures;
1:b7b432c:     this.subString = subString;
1:b7b432c:     init(writer);
1:b7b432c:   }
1:b7b432c: 
1:b7b432c:   private void init(Writer writer) throws IOException {
1:29a7f38:     writer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
1:6d16230:     writer.append("<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\"\n"
1:6d16230:                 + "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
1:6d16230:                 + "xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns\n"
1:6d16230:                 + "http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\">");
1:b7b432c:     //support rgb
1:6d16230:     writer.append("<key attr.name=\"r\" attr.type=\"int\" for=\"node\" id=\"r\"/>\n"
1:6d16230:                 + "<key attr.name=\"g\" attr.type=\"int\" for=\"node\" id=\"g\"/>\n"
1:6d16230:                 + "<key attr.name=\"b\" attr.type=\"int\" for=\"node\" id=\"b\"/>"
1:6d16230:                 + "<key attr.name=\"size\" attr.type=\"int\" for=\"node\" id=\"size\"/>"
1:6d16230:                 + "<key attr.name=\"weight\" attr.type=\"float\" for=\"edge\" id=\"weight\"/>"
1:6d16230:                 + "<key attr.name=\"x\" attr.type=\"float\" for=\"node\" id=\"x\"/>"
1:6d16230:                 + "<key attr.name=\"y\" attr.type=\"float\" for=\"node\" id=\"y\"/>");
1:29a7f38:     writer.append("<graph edgedefault=\"undirected\">");
1:b7b432c:     lastClusterColor = new Color();
1:b7b432c:     posStep = (int) (0.1 * clusterIdToPoints.size()) + 100;
1:229aeff:     random = RandomUtils.getRandom();
2:29a7f38:   }
1:b7b432c: 
1:4194a28:   /*
1:4194a28:     <?xml version="1.0" encoding="UTF-8"?>
1:4194a28:     <graphml xmlns="http://graphml.graphdrawing.org/xmlns"
1:4194a28:     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
1:4194a28:     xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
1:4194a28:     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
1:4194a28:     <graph id="G" edgedefault="undirected">
1:4194a28:     <node id="n0"/>
1:4194a28:     <node id="n1"/>
1:4194a28:     <edge id="e1" source="n0" target="n1"/>
1:4194a28:     </graph>
1:4194a28:     </graphml>
1:29a7f38:    */
1:4194a28: 
1:29a7f38:   @Override
1:51f58b8:   public void write(ClusterWritable clusterWritable) throws IOException {
1:29a7f38:     StringBuilder line = new StringBuilder();
1:51f58b8:     Cluster cluster = clusterWritable.getValue();
1:6d16230:     Color rgb = getColor(cluster.getId());
1:b7b432c: 
1:b7b432c:     String topTerms = "";
1:b7b432c:     if (dictionary != null) {
1:b7b432c:       topTerms = getTopTerms(cluster.getCenter(), dictionary, numTopFeatures);
1:b7b432c:     }
1:229aeff:     String clusterLabel = String.valueOf(cluster.getId()) + '_' + topTerms;
1:b7b432c:     //do some positioning so that items are visible and grouped together
1:b7b432c:     //TODO: put in a real layout algorithm
1:b7b432c:     float x = lastX + 1000;
1:b7b432c:     float y = lastY;
1:b7b432c:     if (x > (1000 + posStep)) {
1:b7b432c:       y = lastY + 1000;
1:b7b432c:       x = 0;
1:b7b432c:     }
1:b7b432c: 
1:b7b432c:     line.append(createNode(clusterLabel, rgb, x, y));
1:8253491:     List<WeightedPropertyVectorWritable> points = clusterIdToPoints.get(cluster.getId());
1:29a7f38:     if (points != null) {
1:29a7f38:       for (WeightedVectorWritable point : points) {
1:29a7f38:         Vector theVec = point.getVector();
1:b7b432c:         double distance = 1;
1:b7b432c:         if (measure != null) {
1:3c22856:           //scale the distance
1:3c22856:           distance = measure.distance(cluster.getCenter().getLengthSquared(), cluster.getCenter(), theVec) * 500;
1:b7b432c:         }
1:29a7f38:         String vecStr;
1:44459bd:         int angle = random.nextInt(360); //pick an angle at random and then scale along that angle
1:b7b432c:         double angleRads = Math.toRadians(angle);
1:b7b432c: 
1:b7b432c:         float targetX = x + (float) (distance * Math.cos(angleRads));
1:b7b432c:         float targetY = y + (float) (distance * Math.sin(angleRads));
1:8771d89:         if (theVec instanceof NamedVector) {
1:8771d89:           vecStr = ((NamedVector) theVec).getName();
1:29a7f38:         } else {
1:29a7f38:           vecStr = theVec.asFormatString();
1:29a7f38:           //do some basic manipulations for display
1:4194a28:           vecStr = VEC_PATTERN.matcher(vecStr).replaceAll("_");
1:29a7f38:         }
1:b7b432c:         if (subString > 0 && vecStr.length() > subString) {
1:b7b432c:           vecStr = vecStr.substring(0, subString);
1:b7b432c:         }
1:b7b432c:         line.append(createNode(vecStr, rgb, targetX, targetY));
1:b7b432c:         line.append(createEdge(clusterLabel, vecStr, distance));
1:29a7f38:       }
1:29a7f38:     }
1:b7b432c:     lastClusterColor = rgb;
1:b7b432c:     lastX = x;
1:b7b432c:     lastY = y;
1:4194a28:     getWriter().append(line).append("\n");
1:29a7f38:   }
1:b7b432c: 
1:b7b432c:   private Color getColor(int clusterId) {
1:b7b432c:     Color result = colors.get(clusterId);
1:b7b432c:     if (result == null) {
1:b7b432c:       result = new Color();
1:b7b432c:       //there is probably some better way to color a graph
1:229aeff:       int incR = 0;
1:229aeff:       int incG = 0;
1:229aeff:       int incB = 0;
1:b7b432c:       if (lastClusterColor.r + 20 < 256 && lastClusterColor.g + 20 < 256 && lastClusterColor.b + 20 < 256) {
1:b7b432c:         incR = 20;
1:b7b432c:         incG = 0;
1:b7b432c:         incB = 0;
1:b7b432c:       } else if (lastClusterColor.r + 20 >= 256 && lastClusterColor.g + 20 < 256 && lastClusterColor.b + 20 < 256) {
1:b7b432c:         incG = 20;
1:b7b432c:         incB = 0;
1:b7b432c:       } else if (lastClusterColor.r + 20 >= 256 && lastClusterColor.g + 20 >= 256 && lastClusterColor.b + 20 < 256) {
1:b7b432c:         incB = 20;
1:b7b432c:       } else {
1:b7b432c:         incR += 3;
1:b7b432c:         incG += 3;
1:b7b432c:         incR += 3;
1:b7b432c:       }
1:b7b432c:       result.r = (lastClusterColor.r + incR) % 256;
1:b7b432c:       result.g = (lastClusterColor.g + incG) % 256;
1:b7b432c:       result.b = (lastClusterColor.b + incB) % 256;
1:b7b432c:       colors.put(clusterId, result);
1:b7b432c:     }
1:b7b432c:     return result;
1:b7b432c:   }
1:b7b432c: 
1:b7b432c:   private static String createEdge(String left, String right, double distance) {
1:b7b432c:     left = StringUtils.escapeXML(left);
1:b7b432c:     right = StringUtils.escapeXML(right);
1:44459bd:     return "<edge id=\"" + left + '_' + right + "\" source=\"" + left + "\" target=\"" + right + "\">" 
1:44459bd:             + "<data key=\"weight\">" + distance + "</data></edge>";
1:b7b432c:   }
1:b7b432c: 
1:b7b432c:   private static String createNode(String s, Color rgb, float x, float y) {
1:44459bd:     return "<node id=\"" + StringUtils.escapeXML(s) + "\"><data key=\"r\">" + rgb.r 
1:6d16230:             + "</data>"
1:6d16230:             + "<data key=\"g\">" + rgb.g
1:6d16230:             + "</data>"
1:6d16230:             + "<data key=\"b\">" + rgb.b
1:6d16230:             + "</data>"
1:6d16230:             + "<data key=\"x\">" + x
1:6d16230:             + "</data>"
1:6d16230:             + "<data key=\"y\">" + y
1:44459bd:             + "</data>"
1:b7b432c:             + "</node>";
1:29a7f38:   }
1:b7b432c: 
1:29a7f38:   @Override
1:29a7f38:   public void close() throws IOException {
1:8771d89:     getWriter().append("</graph>").append("</graphml>");
1:29a7f38:     super.close();
1:b7b432c:   }
1:b7b432c: 
1:229aeff:   private static class Color {
1:229aeff:     int r;
1:229aeff:     int g;
1:229aeff:     int b;
1:29a7f38:   }
1:29a7f38: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:   private final Map<Integer, Color> colors = new HashMap<>();
author:smarthi
-------------------------------------------------------------------------------
commit:8253491
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;
/////////////////////////////////////////////////////////////////////////
1:   public GraphMLClusterWriter(Writer writer, Map<Integer, List<WeightedPropertyVectorWritable>> clusterIdToPoints,
/////////////////////////////////////////////////////////////////////////
1:     List<WeightedPropertyVectorWritable> points = clusterIdToPoints.get(cluster.getId());
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:                               DistanceMeasure measure, int numTopFeatures, String[] dictionary, int subString)
1:     throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     writer.append("<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\"\n"
1:                 + "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
1:                 + "xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns\n"
1:                 + "http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\">");
1:     writer.append("<key attr.name=\"r\" attr.type=\"int\" for=\"node\" id=\"r\"/>\n"
1:                 + "<key attr.name=\"g\" attr.type=\"int\" for=\"node\" id=\"g\"/>\n"
1:                 + "<key attr.name=\"b\" attr.type=\"int\" for=\"node\" id=\"b\"/>"
1:                 + "<key attr.name=\"size\" attr.type=\"int\" for=\"node\" id=\"size\"/>"
1:                 + "<key attr.name=\"weight\" attr.type=\"float\" for=\"edge\" id=\"weight\"/>"
1:                 + "<key attr.name=\"x\" attr.type=\"float\" for=\"node\" id=\"x\"/>"
1:                 + "<key attr.name=\"y\" attr.type=\"float\" for=\"node\" id=\"y\"/>");
/////////////////////////////////////////////////////////////////////////
1:     Color rgb = getColor(cluster.getId());
/////////////////////////////////////////////////////////////////////////
1:             + "</data>"
1:             + "<data key=\"g\">" + rgb.g
1:             + "</data>"
1:             + "<data key=\"b\">" + rgb.b
1:             + "</data>"
1:             + "<data key=\"x\">" + x
1:             + "</data>"
1:             + "<data key=\"y\">" + y
commit:3c22856
/////////////////////////////////////////////////////////////////////////
0:   Color rgb = getColor(cluster.getId());
/////////////////////////////////////////////////////////////////////////
1:           //scale the distance
1:           distance = measure.distance(cluster.getCenter().getLengthSquared(), cluster.getCenter(), theVec) * 500;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
0:   private final Map<Integer, Color> colors = new HashMap<Integer, Color>();
1:   private float lastX;
1:   private float lastY;
1:   private final int subString;
/////////////////////////////////////////////////////////////////////////
1:     random = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
1:     String clusterLabel = String.valueOf(cluster.getId()) + '_' + topTerms;
/////////////////////////////////////////////////////////////////////////
1:       int incR = 0;
1:       int incG = 0;
1:       int incB = 0;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private static class Color {
1:     int r;
1:     int g;
1:     int b;
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.utils.clustering;
1: import java.util.regex.Pattern;
1:  */
1: public class GraphMLClusterWriter extends AbstractClusterWriter {
1:   private static final Pattern VEC_PATTERN = Pattern.compile("\\{|\\:|\\,|\\}");
1: 
0:   public GraphMLClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints)
0:     throws IOException {
/////////////////////////////////////////////////////////////////////////
1:   /*
1:     <?xml version="1.0" encoding="UTF-8"?>
1:     <graphml xmlns="http://graphml.graphdrawing.org/xmlns"
1:     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
1:     xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
1:     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
1:     <graph id="G" edgedefault="undirected">
1:     <node id="n0"/>
1:     <node id="n1"/>
1:     <edge id="e1" source="n0" target="n1"/>
1:     </graph>
1:     </graphml>
1: 
0:     List<WeightedVectorWritable> points = getClusterIdToPoints().get(cluster.getId());
/////////////////////////////////////////////////////////////////////////
1:           vecStr = VEC_PATTERN.matcher(vecStr).replaceAll("_");
1:       getWriter().append(line).append("\n");
0:   private static String createEdge(String left, String right) {
0:     return "<edge id=\"" + left + '_' + right + "\" source=\"" + left + "\" target=\"" + right + "\"/>";
0:   private static String createNode(String s) {
0:     getWriter().append("</graph>");
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
0:           distance = measure.distance(cluster.getCenter().getLengthSquared(), cluster.getCenter(), theVec) * 500; //scale the distance
1:         int angle = random.nextInt(360); //pick an angle at random and then scale along that angle
/////////////////////////////////////////////////////////////////////////
1:     return "<edge id=\"" + left + '_' + right + "\" source=\"" + left + "\" target=\"" + right + "\">" 
1:             + "<data key=\"weight\">" + distance + "</data></edge>";
/////////////////////////////////////////////////////////////////////////
1:     return "<node id=\"" + StringUtils.escapeXML(s) + "\"><data key=\"r\">" + rgb.r 
0:             + "</data>" +
0:             "<data key=\"g\">" + rgb.g 
0:             + "</data>" +
0:             "<data key=\"b\">" + rgb.b 
0:             + "</data>" +
0:             "<data key=\"x\">" + x 
0:             + "</data>" +
0:             "<data key=\"y\">" + y 
1:             + "</data>"
author:pranjan
-------------------------------------------------------------------------------
commit:51f58b8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.Cluster;
1: import org.apache.mahout.clustering.classify.WeightedVectorWritable;
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
1: import org.apache.mahout.common.StringUtils;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.NamedVector;
1: import org.apache.mahout.math.Vector;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public void write(ClusterWritable clusterWritable) throws IOException {
1:     Cluster cluster = clusterWritable.getValue();
0: 	Color rgb = getColor(cluster.getId());
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:8d102ea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.clustering.classify.WeightedVectorWritable;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:b7b432c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.StringUtils;
0: import org.apache.mahout.common.distance.DistanceMeasure;
1: import java.util.HashMap;
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
0:   private Map<Integer, Color> colors = new HashMap<Integer, Color>();
1:   private Color lastClusterColor;
0:   private float lastX, lastY;
1:   private Random random;
1:   private int posStep;
1:   private final String[] dictionary;
1:   private final int numTopFeatures;
0:   private int subString;
0:   public GraphMLClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
0:                               DistanceMeasure measure,
0:                               int numTopFeatures, String[] dictionary, int subString)
1:     super(writer, clusterIdToPoints, measure);
1:     this.dictionary = dictionary;
1:     this.numTopFeatures = numTopFeatures;
1:     this.subString = subString;
1:     init(writer);
1:   }
1: 
1:   private void init(Writer writer) throws IOException {
1:     //support rgb
0:     writer.append("<key attr.name=\"r\" attr.type=\"int\" for=\"node\" id=\"r\"/>\n" +
0:             "<key attr.name=\"g\" attr.type=\"int\" for=\"node\" id=\"g\"/>\n" +
0:             "<key attr.name=\"b\" attr.type=\"int\" for=\"node\" id=\"b\"/>" +
0:             "<key attr.name=\"size\" attr.type=\"int\" for=\"node\" id=\"size\"/>" +
0:             "<key attr.name=\"weight\" attr.type=\"float\" for=\"edge\" id=\"weight\"/>" +
0:             "<key attr.name=\"x\" attr.type=\"float\" for=\"node\" id=\"x\"/>" +
0:             "<key attr.name=\"y\" attr.type=\"float\" for=\"node\" id=\"y\"/>");
1:     lastClusterColor = new Color();
1:     posStep = (int) (0.1 * clusterIdToPoints.size()) + 100;
0:     random = new Random();
/////////////////////////////////////////////////////////////////////////
0:     Color rgb = getColor(cluster.getId());
1: 
1:     String topTerms = "";
1:     if (dictionary != null) {
1:       topTerms = getTopTerms(cluster.getCenter(), dictionary, numTopFeatures);
1:     }
0:     String clusterLabel = String.valueOf(cluster.getId()) + "_" + topTerms;
1:     //do some positioning so that items are visible and grouped together
1:     //TODO: put in a real layout algorithm
1:     float x = lastX + 1000;
1:     float y = lastY;
1:     if (x > (1000 + posStep)) {
1:       y = lastY + 1000;
1:       x = 0;
1:     }
1: 
1:     line.append(createNode(clusterLabel, rgb, x, y));
0:     List<WeightedVectorWritable> points = clusterIdToPoints.get(cluster.getId());
1:         double distance = 1;
1:         if (measure != null) {
0:           distance = measure.distance(cluster.getCenter().getLengthSquared(), cluster.getCenter(), theVec) * 500;//scale the distance
1:         }
0:         int angle = random.nextInt(360);//pick an angle at random and then scale along that angle
1:         double angleRads = Math.toRadians(angle);
1: 
1:         float targetX = x + (float) (distance * Math.cos(angleRads));
1:         float targetY = y + (float) (distance * Math.sin(angleRads));
1:         if (subString > 0 && vecStr.length() > subString) {
1:           vecStr = vecStr.substring(0, subString);
1:         }
1:         line.append(createNode(vecStr, rgb, targetX, targetY));
1:         line.append(createEdge(clusterLabel, vecStr, distance));
1:     lastClusterColor = rgb;
1:     lastX = x;
1:     lastY = y;
1:   private Color getColor(int clusterId) {
1:     Color result = colors.get(clusterId);
1:     if (result == null) {
1:       result = new Color();
1:       //there is probably some better way to color a graph
0:       int incR = 0, incG = 0, incB = 0;
1:       if (lastClusterColor.r + 20 < 256 && lastClusterColor.g + 20 < 256 && lastClusterColor.b + 20 < 256) {
1:         incR = 20;
1:         incG = 0;
1:         incB = 0;
1:       } else if (lastClusterColor.r + 20 >= 256 && lastClusterColor.g + 20 < 256 && lastClusterColor.b + 20 < 256) {
1:         incG = 20;
1:         incB = 0;
1:       } else if (lastClusterColor.r + 20 >= 256 && lastClusterColor.g + 20 >= 256 && lastClusterColor.b + 20 < 256) {
1:         incB = 20;
1:       } else {
1:         incR += 3;
1:         incG += 3;
1:         incR += 3;
1:       }
1:       result.r = (lastClusterColor.r + incR) % 256;
1:       result.g = (lastClusterColor.g + incG) % 256;
1:       result.b = (lastClusterColor.b + incB) % 256;
1:       colors.put(clusterId, result);
1:     }
1:     return result;
1:   }
1: 
1:   private static String createEdge(String left, String right, double distance) {
1:     left = StringUtils.escapeXML(left);
1:     right = StringUtils.escapeXML(right);
0:     return "<edge id=\"" + left + '_' + right + "\" source=\"" + left + "\" target=\"" + right + "\">" +
0:             "<data key=\"weight\">" + distance + "</data></edge>";
0:     return "<node id=\"" + StringUtils.escapeXML(s) + "\"/>";
1:   }
1: 
1: 
1: 
1: 
1:   private static String createNode(String s, Color rgb, float x, float y) {
0:     return "<node id=\"" + StringUtils.escapeXML(s) + "\"><data key=\"r\">" + rgb.r +
0:             "</data>" +
0:             "<data key=\"g\">" + rgb.g +
0:             "</data>" +
0:             "<data key=\"b\">" + rgb.b +
0:             "</data>" +
0:             "<data key=\"x\">" + x +
0:             "</data>" +
0:             "<data key=\"y\">" + y +
0:             "</data>"
1:             + "</node>";
/////////////////////////////////////////////////////////////////////////
1: 
0:   private class Color {
0:     int r, g, b;
1:   }
commit:c9d49ee
/////////////////////////////////////////////////////////////////////////
commit:2c1c3ad
/////////////////////////////////////////////////////////////////////////
0:     getWriter().append(line).append("\n");
commit:8771d89
/////////////////////////////////////////////////////////////////////////
0:           throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         if (theVec instanceof NamedVector) {
1:           vecStr = ((NamedVector) theVec).getName();
/////////////////////////////////////////////////////////////////////////
1:     getWriter().append("</graph>").append("</graphml>");
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.clustering;
1: 
1: 
0: import org.apache.mahout.clustering.Cluster;
0: import org.apache.mahout.clustering.WeightedVectorWritable;
0: import org.apache.mahout.math.NamedVector;
0: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.utils.vectors.io.AbstractClusterWriter;
0: import org.apache.mahout.utils.vectors.io.ClusterWriter;
1: 
1: import java.io.IOException;
1: import java.io.Writer;
1: import java.util.List;
1: import java.util.Map;
1: 
1: /**
1:  * GraphML -- see http://gephi.org/users/supported-graph-formats/graphml-format/
0:  *
0:  **/
0: public class GraphMLClusterWriter extends AbstractClusterWriter implements ClusterWriter {
1: 
0:   public GraphMLClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints) throws IOException {
0:     super(writer, clusterIdToPoints);
1:     writer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
0:     writer.append("<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\"\n" +
0:             "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" +
0:             "xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns\n" +
0:             "http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\">");
1:     writer.append("<graph edgedefault=\"undirected\">");
1:   }
0:   /*
0: <?xml version="1.0" encoding="UTF-8"?>
0: <graphml xmlns="http://graphml.graphdrawing.org/xmlns"
0: xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
0: xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
0: http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
0: <graph id="G" edgedefault="undirected">
0: <node id="n0"/>
0: <node id="n1"/>
0: <edge id="e1" source="n0" target="n1"/>
0: </graph>
0: </graphml>
1: 
1:    */
1:   @Override
0:   public void write(Cluster cluster) throws IOException {
1:     StringBuilder line = new StringBuilder();
0:     line.append(createNode(String.valueOf(cluster.getId())));
0:     List<WeightedVectorWritable> points = clusterIdToPoints.get(cluster.getId());
1:     if (points != null) {
1:       for (WeightedVectorWritable point : points) {
1:         Vector theVec = point.getVector();
1:         String vecStr;
0:         if (theVec instanceof NamedVector){
0:           vecStr = ((NamedVector)theVec).getName();
0:           line.append(createNode(vecStr));
1:         } else {
1:           vecStr = theVec.asFormatString();
1:           //do some basic manipulations for display
0:           vecStr = vecStr.replaceAll("\\{|\\:|\\,|\\}", "_");
0:           line.append(createNode(vecStr));
1:         }
0:         line.append(createEdge(String.valueOf(cluster.getId()), vecStr));
1:       }
0:       writer.append(line).append("\n");
1:     }
1:   }
1: 
0:   private String createEdge(String left, String right) {
0:     return "<edge id=\"" + left + "_" + right + "\" source=\"" + left + "\" target=\"" + right + "\"/>";
1:   }
1: 
0:   private String createNode(String s) {
0:     return "<node id=\"" + s + "\"/>";
1:   }
1: 
1:   @Override
1:   public void close() throws IOException {
0:     writer.append("</graph>");
1:     super.close();
1:   }
1: }
============================================================================