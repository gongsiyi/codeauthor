1:f43adfe: /**
1:f43adfe:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f43adfe:  * contributor license agreements.  See the NOTICE file distributed with
1:f43adfe:  * this work for additional information regarding copyright ownership.
1:f43adfe:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f43adfe:  * (the "License"); you may not use this file except in compliance with
1:f43adfe:  * the License.  You may obtain a copy of the License at
1:f43adfe:  *
1:f43adfe:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f43adfe:  *
1:f43adfe:  * Unless required by applicable law or agreed to in writing, software
1:f43adfe:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f43adfe:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f43adfe:  * See the License for the specific language governing permissions and
1:f43adfe:  * limitations under the License.
1:f43adfe:  */
1:f43adfe: 
1:f43adfe: package org.apache.mahout.math;
1:f43adfe: 
1:0b564c7: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1:0b564c7: 
1:f43adfe: /**
1:f43adfe:  * Economy packaging for a dense symmetric in-core matrix.
1:f43adfe:  */
1:f43adfe: public class DenseSymmetricMatrix extends UpperTriangular {
1:f43adfe:   public DenseSymmetricMatrix(int n) {
1:f43adfe:     super(n);
1:f43adfe:   }
1:f43adfe: 
1:f43adfe:   public DenseSymmetricMatrix(double[] data, boolean shallow) {
1:f43adfe:     super(data, shallow);
1:f43adfe:   }
1:f43adfe: 
1:f43adfe:   public DenseSymmetricMatrix(Vector data) {
1:f43adfe:     super(data);
1:f43adfe:   }
1:f43adfe: 
1:f43adfe:   public DenseSymmetricMatrix(UpperTriangular mx) {
1:f43adfe:     super(mx);
1:f43adfe:   }
1:f43adfe: 
1:f43adfe:   @Override
1:f43adfe:   public double getQuick(int row, int column) {
1:f43adfe:     if (column < row) {
1:f43adfe:       int swap = row;
1:f43adfe:       row = column;
1:f43adfe:       column = swap;
1:f43adfe:     }
1:f43adfe:     return super.getQuick(row, column);
1:f43adfe:   }
1:f43adfe: 
1:f43adfe:   @Override
1:f43adfe:   public void setQuick(int row, int column, double value) {
1:f43adfe:     if (column < row) {
1:f43adfe:       int swap = row;
1:f43adfe:       row = column;
1:f43adfe:       column = swap;
1:f43adfe:     }
1:f43adfe:     super.setQuick(row, column, value);
1:f43adfe:   }
1:f43adfe: 
1:f43adfe: }
============================================================================
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.flavor.TraversingStructureEnum;
1: 
commit:f43adfe
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: /**
1:  * Economy packaging for a dense symmetric in-core matrix.
1:  */
1: public class DenseSymmetricMatrix extends UpperTriangular {
1:   public DenseSymmetricMatrix(int n) {
1:     super(n);
1:   }
1: 
1:   public DenseSymmetricMatrix(double[] data, boolean shallow) {
1:     super(data, shallow);
1:   }
1: 
1:   public DenseSymmetricMatrix(Vector data) {
1:     super(data);
1:   }
1: 
1:   public DenseSymmetricMatrix(UpperTriangular mx) {
1:     super(mx);
1:   }
1: 
1:   @Override
1:   public double getQuick(int row, int column) {
1:     if (column < row) {
1:       int swap = row;
1:       row = column;
1:       column = swap;
1:     }
1:     return super.getQuick(row, column);
1:   }
1: 
1:   @Override
1:   public void setQuick(int row, int column, double value) {
1:     if (column < row) {
1:       int swap = row;
1:       row = column;
1:       column = swap;
1:     }
1:     super.setQuick(row, column, value);
1:   }
1: 
1: }
============================================================================