1:15712a6: /**
1:15712a6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:15712a6:  * contributor license agreements.  See the NOTICE file distributed with
1:15712a6:  * this work for additional information regarding copyright ownership.
1:15712a6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:15712a6:  * (the "License"); you may not use this file except in compliance with
1:15712a6:  * the License.  You may obtain a copy of the License at
1:15712a6:  *
1:15712a6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:15712a6:  *
1:15712a6:  * Unless required by applicable law or agreed to in writing, software
1:15712a6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:15712a6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:15712a6:  * See the License for the specific language governing permissions and
1:15712a6:  * limitations under the License.
1:15712a6:  */
1:15712a6: 
1:3ffddc5: package org.apache.mahout.utils;
1:3ffddc5: 
1:3ffddc5: /**
1:3ffddc5:  * Helps with making nice intervals at arbitrary scale.
1:3ffddc5:  *
1:3ffddc5:  * One use case is where we are producing progress or error messages every time an incoming
1:3ffddc5:  * record is received.  It is generally bad form to produce a message for <i>every</i> input
1:3ffddc5:  * so it would be better to produce a message for each of the first 10 records, then every
1:3ffddc5:  * other record up to 20 and then every 5 records up to 50 and then every 10 records up to 100,
1:3ffddc5:  * more or less. The pattern can now repeat scaled up by 100.  The total number of messages will scale
1:3ffddc5:  * with the log of the number of input lines which is much more survivable than direct output
1:3ffddc5:  * and because early records all get messages, we get indications early.
1:3ffddc5:  */
1:3ffddc5: public class Bump125 {
1:6d16230:   private static final int[] BUMPS = {1, 2, 5};
1:3ffddc5: 
1:3ffddc5:   static int scale(double value, double base) {
1:3ffddc5:     double scale = value / base;
1:3ffddc5:     // scan for correct step
1:3ffddc5:     int i = 0;
1:6d16230:     while (i < BUMPS.length - 1 && BUMPS[i + 1] <= scale) {
1:3ffddc5:       i++;
1:3ffddc5:     }
1:6d16230:     return BUMPS[i];
1:3ffddc5:   }
1:3ffddc5: 
1:3ffddc5:   static long base(double value) {
1:3ffddc5:     return Math.max(1, (long) Math.pow(10, (int) Math.floor(Math.log10(value))));
1:3ffddc5:   }
1:3ffddc5: 
1:3ffddc5:   private long counter = 0;
1:3ffddc5: 
1:3ffddc5:   public long increment() {
1:3ffddc5:     long delta;
1:3ffddc5:     if (counter >= 10) {
1:15712a6:       long base = base(counter / 4.0);
1:3ffddc5:       int scale = scale(counter / 4.0, base);
1:15712a6:       delta = base * scale;
1:3ffddc5:     } else {
1:3ffddc5:       delta = 1;
1:3ffddc5:     }
1:3ffddc5:     counter += delta;
1:3ffddc5:     return counter;
1:3ffddc5:   }
1:3ffddc5: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:   private static final int[] BUMPS = {1, 2, 5};
1:     while (i < BUMPS.length - 1 && BUMPS[i + 1] <= scale) {
1:     return BUMPS[i];
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:15712a6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:       long base = base(counter / 4.0);
1:       delta = base * scale;
author:Ted Dunning
-------------------------------------------------------------------------------
commit:3ffddc5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils;
1: 
1: /**
1:  * Helps with making nice intervals at arbitrary scale.
1:  *
1:  * One use case is where we are producing progress or error messages every time an incoming
1:  * record is received.  It is generally bad form to produce a message for <i>every</i> input
1:  * so it would be better to produce a message for each of the first 10 records, then every
1:  * other record up to 20 and then every 5 records up to 50 and then every 10 records up to 100,
1:  * more or less. The pattern can now repeat scaled up by 100.  The total number of messages will scale
1:  * with the log of the number of input lines which is much more survivable than direct output
1:  * and because early records all get messages, we get indications early.
1:  */
1: public class Bump125 {
0:   private static final int[] bumps = {1, 2, 5};
1: 
1:   static int scale(double value, double base) {
1:     double scale = value / base;
1:     // scan for correct step
1:     int i = 0;
0:     while (i < bumps.length - 1 && bumps[i + 1] <= scale) {
1:       i++;
1:     }
0:     return bumps[i];
1:   }
1: 
1:   static long base(double value) {
1:     return Math.max(1, (long) Math.pow(10, (int) Math.floor(Math.log10(value))));
1:   }
1: 
1:   private long counter = 0;
1: 
1:   public long increment() {
1:     long delta;
1:     if (counter >= 10) {
0:       final long base = base(counter / 4.0);
1:       int scale = scale(counter / 4.0, base);
0:       delta = (long) (base * scale);
1:     } else {
1:       delta = 1;
1:     }
1:     counter += delta;
1:     return counter;
1:   }
1: }
============================================================================