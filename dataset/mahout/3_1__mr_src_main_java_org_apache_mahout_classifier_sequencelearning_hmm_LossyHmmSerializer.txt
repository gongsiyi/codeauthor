1:d0dbdfb: /**
1:d0dbdfb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d0dbdfb:  * contributor license agreements.  See the NOTICE file distributed with
1:d0dbdfb:  * this work for additional information regarding copyright ownership.
1:d0dbdfb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d0dbdfb:  * (the "License"); you may not use this file except in compliance with
1:d0dbdfb:  * the License.  You may obtain a copy of the License at
1:d0dbdfb:  *
1:d0dbdfb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d0dbdfb:  *
1:d0dbdfb:  * Unless required by applicable law or agreed to in writing, software
1:d0dbdfb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d0dbdfb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0dbdfb:  * See the License for the specific language governing permissions and
1:d0dbdfb:  * limitations under the License.
1:d0dbdfb:  */
1:d0dbdfb: 
1:d0dbdfb: package org.apache.mahout.classifier.sequencelearning.hmm;
1:d0dbdfb: 
1:d0dbdfb: import org.apache.mahout.math.Matrix;
1:d0dbdfb: import org.apache.mahout.math.MatrixWritable;
1:d0dbdfb: import org.apache.mahout.math.Vector;
1:d0dbdfb: import org.apache.mahout.math.VectorWritable;
1:d0dbdfb: 
1:d0dbdfb: import java.io.DataInput;
1:d0dbdfb: import java.io.DataOutput;
1:d0dbdfb: import java.io.IOException;
1:d0dbdfb: 
1:d0dbdfb: /**
1:d0dbdfb:  * Utils for serializing Writable parts of HmmModel (that means without hidden state names and so on)
1:d0dbdfb:  */
1:d0dbdfb: final class LossyHmmSerializer {
1:d0dbdfb: 
1:d0dbdfb:   private LossyHmmSerializer() {
1:d0dbdfb:   }
1:d0dbdfb: 
1:d0dbdfb:   static void serialize(HmmModel model, DataOutput output) throws IOException {
1:d0dbdfb:     MatrixWritable matrix = new MatrixWritable(model.getEmissionMatrix());
1:d0dbdfb:     matrix.write(output);
1:d0dbdfb:     matrix.set(model.getTransitionMatrix());
1:d0dbdfb:     matrix.write(output);
1:d0dbdfb: 
1:d0dbdfb:     VectorWritable vector = new VectorWritable(model.getInitialProbabilities());
1:d0dbdfb:     vector.write(output);
1:d0dbdfb:   }
1:d0dbdfb: 
1:d0dbdfb:   static HmmModel deserialize(DataInput input) throws IOException {
1:d0dbdfb:     MatrixWritable matrix = new MatrixWritable();
1:d0dbdfb:     matrix.readFields(input);
1:d0dbdfb:     Matrix emissionMatrix = matrix.get();
1:d0dbdfb: 
1:d0dbdfb:     matrix.readFields(input);
1:d0dbdfb:     Matrix transitionMatrix = matrix.get();
1:d0dbdfb: 
1:d0dbdfb:     VectorWritable vector = new VectorWritable();
1:d0dbdfb:     vector.readFields(input);
1:d0dbdfb:     Vector initialProbabilities = vector.get();
1:d0dbdfb: 
1:d0dbdfb:     return new HmmModel(transitionMatrix, emissionMatrix, initialProbabilities);
1:d0dbdfb:   }
1:d0dbdfb: 
1:d0dbdfb: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:d0dbdfb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sequencelearning.hmm;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixWritable;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: /**
1:  * Utils for serializing Writable parts of HmmModel (that means without hidden state names and so on)
1:  */
1: final class LossyHmmSerializer {
1: 
1:   private LossyHmmSerializer() {
1:   }
1: 
1:   static void serialize(HmmModel model, DataOutput output) throws IOException {
1:     MatrixWritable matrix = new MatrixWritable(model.getEmissionMatrix());
1:     matrix.write(output);
1:     matrix.set(model.getTransitionMatrix());
1:     matrix.write(output);
1: 
1:     VectorWritable vector = new VectorWritable(model.getInitialProbabilities());
1:     vector.write(output);
1:   }
1: 
1:   static HmmModel deserialize(DataInput input) throws IOException {
1:     MatrixWritable matrix = new MatrixWritable();
1:     matrix.readFields(input);
1:     Matrix emissionMatrix = matrix.get();
1: 
1:     matrix.readFields(input);
1:     Matrix transitionMatrix = matrix.get();
1: 
1:     VectorWritable vector = new VectorWritable();
1:     vector.readFields(input);
1:     Vector initialProbabilities = vector.get();
1: 
1:     return new HmmModel(transitionMatrix, emissionMatrix, initialProbabilities);
1:   }
1: 
1: }
============================================================================