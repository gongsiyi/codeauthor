1:d0dbdfb: /**
1:d0dbdfb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d0dbdfb:  * contributor license agreements.  See the NOTICE file distributed with
1:d0dbdfb:  * this work for additional information regarding copyright ownership.
1:d0dbdfb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d0dbdfb:  * (the "License"); you may not use this file except in compliance with
1:d0dbdfb:  * the License.  You may obtain a copy of the License at
1:d0dbdfb:  *
1:d0dbdfb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d0dbdfb:  *
1:d0dbdfb:  * Unless required by applicable law or agreed to in writing, software
1:d0dbdfb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d0dbdfb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0dbdfb:  * See the License for the specific language governing permissions and
1:d0dbdfb:  * limitations under the License.
1:d0dbdfb:  */
2:d0dbdfb: 
1:d0dbdfb: package org.apache.mahout.classifier.sequencelearning.hmm;
1:d0dbdfb: 
1:87d4b2e: import java.io.DataInputStream;
1:87d4b2e: import java.io.FileInputStream;
1:87d4b2e: import java.io.FileOutputStream;
1:87d4b2e: import java.io.IOException;
1:87d4b2e: import java.io.OutputStreamWriter;
1:87d4b2e: import java.io.PrintWriter;
1:85f9ece: import java.util.ArrayList;
1:87d4b2e: import java.util.List;
1:87d4b2e: import java.util.Scanner;
1:87d4b2e: 
1:d0dbdfb: import org.apache.commons.cli2.CommandLine;
1:d0dbdfb: import org.apache.commons.cli2.Group;
1:d0dbdfb: import org.apache.commons.cli2.Option;
1:d0dbdfb: import org.apache.commons.cli2.OptionException;
1:d0dbdfb: import org.apache.commons.cli2.builder.ArgumentBuilder;
1:d0dbdfb: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1:d0dbdfb: import org.apache.commons.cli2.builder.GroupBuilder;
1:d0dbdfb: import org.apache.commons.cli2.commandline.Parser;
1:85f9ece: import org.apache.commons.io.Charsets;
1:d0dbdfb: import org.apache.mahout.common.CommandLineUtil;
1:763c94c: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1:d0dbdfb: 
1:d0dbdfb: /**
1:d0dbdfb:  * Command-line tool for Viterbi evaluating
1:d0dbdfb:  */
1:d0dbdfb: public final class ViterbiEvaluator {
1:d0dbdfb: 
1:d0dbdfb:   private ViterbiEvaluator() {
1:d0dbdfb:   }
1:d0dbdfb: 
1:d0dbdfb:   public static void main(String[] args) throws IOException {
1:d0dbdfb:     DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();
1:d0dbdfb:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1:d0dbdfb: 
1:763c94c:     Option inputOption = DefaultOptionCreator.inputOption().create();
1:d0dbdfb: 
1:763c94c:     Option outputOption = DefaultOptionCreator.outputOption().create();
1:d0dbdfb: 
1:d0dbdfb:     Option modelOption = optionBuilder.withLongName("model").
1:d0dbdfb:       withDescription("Path to serialized HMM model").
1:d0dbdfb:       withShortName("m").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
3:d0dbdfb:       withName("path").create()).withRequired(true).create();
1:d0dbdfb: 
1:d0dbdfb:     Option likelihoodOption = optionBuilder.withLongName("likelihood").
1:d0dbdfb:       withDescription("Compute likelihood of observed sequence").
1:d0dbdfb:       withShortName("l").withRequired(false).create();
1:d0dbdfb: 
1:d0dbdfb:     Group optionGroup = new GroupBuilder().withOption(inputOption).
1:d0dbdfb:       withOption(outputOption).withOption(modelOption).withOption(likelihoodOption).
1:d0dbdfb:       withName("Options").create();
1:d0dbdfb: 
4:d0dbdfb:     try {
1:d0dbdfb:       Parser parser = new Parser();
1:d0dbdfb:       parser.setGroup(optionGroup);
1:d0dbdfb:       CommandLine commandLine = parser.parse(args);
1:d0dbdfb: 
1:d0dbdfb:       String input = (String) commandLine.getValue(inputOption);
1:d0dbdfb:       String output = (String) commandLine.getValue(outputOption);
1:d0dbdfb: 
1:d0dbdfb:       String modelPath = (String) commandLine.getValue(modelOption);
1:d0dbdfb: 
1:d0dbdfb:       boolean computeLikelihood = commandLine.hasOption(likelihoodOption);
1:d0dbdfb: 
1:d0dbdfb:       //reading serialized HMM
1:85f9ece:       ;
1:d0dbdfb:       HmmModel model;
1:85f9ece:       try (DataInputStream modelStream = new DataInputStream(new FileInputStream(modelPath))) {
1:d0dbdfb:         model = LossyHmmSerializer.deserialize(modelStream);
1:d0dbdfb:       }
1:d0dbdfb: 
1:d0dbdfb:       //reading observations
1:85f9ece:       List<Integer> observations = new ArrayList<>();
1:87c15be:       try (Scanner scanner = new Scanner(new FileInputStream(input), "UTF-8")) {
1:d0dbdfb:         while (scanner.hasNextInt()) {
1:d0dbdfb:           observations.add(scanner.nextInt());
1:d0dbdfb:         }
1:d0dbdfb:       }
1:d0dbdfb: 
1:d0dbdfb:       int[] observationsArray = new int[observations.size()];
1:d0dbdfb:       for (int i = 0; i < observations.size(); ++i) {
1:d0dbdfb:         observationsArray[i] = observations.get(i);
1:d0dbdfb:       }
1:d0dbdfb: 
1:d0dbdfb:       //decoding
1:d0dbdfb:       int[] hiddenStates = HmmEvaluator.decode(model, observationsArray, true);
1:d0dbdfb: 
1:d0dbdfb:       //writing output
1:85f9ece:       try (PrintWriter writer =
1:85f9ece:                new PrintWriter(new OutputStreamWriter(new FileOutputStream(output), Charsets.UTF_8), true)) {
1:d0dbdfb:         for (int hiddenState : hiddenStates) {
1:d0dbdfb:           writer.print(hiddenState);
1:d0dbdfb:           writer.print(' ');
1:d0dbdfb:         }
1:d0dbdfb:       }
1:d0dbdfb: 
1:d0dbdfb:       if (computeLikelihood) {
1:d0dbdfb:         System.out.println("Likelihood: " + HmmEvaluator.modelLikelihood(model, observationsArray, true));
1:d0dbdfb:       }
1:d0dbdfb:     } catch (OptionException e) {
1:d0dbdfb:       CommandLineUtil.printHelp(optionGroup);
1:d0dbdfb:     }
1:d0dbdfb:   }
1:d0dbdfb: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
/////////////////////////////////////////////////////////////////////////
1:       ;
1:       try (DataInputStream modelStream = new DataInputStream(new FileInputStream(modelPath))) {
1:       List<Integer> observations = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1:       try (PrintWriter writer =
1:                new PrintWriter(new OutputStreamWriter(new FileOutputStream(output), Charsets.UTF_8), true)) {
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:       try (Scanner scanner = new Scanner(new FileInputStream(input), "UTF-8")) {
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInputStream;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: import java.io.PrintWriter;
1: import java.util.List;
1: import java.util.Scanner;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:         Closeables.close(modelStream, true);
/////////////////////////////////////////////////////////////////////////
0:         Closeables.close(writer, true);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:       List<Integer> observations = Lists.newArrayList();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
0: import java.io.OutputStreamWriter;
/////////////////////////////////////////////////////////////////////////
0:       Scanner scanner = new Scanner(new FileInputStream(input), "UTF-8");
/////////////////////////////////////////////////////////////////////////
0:       PrintWriter writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output), Charsets.UTF_8), true);
commit:763c94c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
/////////////////////////////////////////////////////////////////////////
1:     Option inputOption = DefaultOptionCreator.inputOption().create();
1:     Option outputOption = DefaultOptionCreator.outputOption().create();
commit:23722bc
/////////////////////////////////////////////////////////////////////////
0:       PrintWriter writer = new PrintWriter(new FileOutputStream(output), true);
commit:d0dbdfb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sequencelearning.hmm;
1: 
0: import com.google.common.io.Closeables;
1: import org.apache.commons.cli2.CommandLine;
1: import org.apache.commons.cli2.Group;
1: import org.apache.commons.cli2.Option;
1: import org.apache.commons.cli2.OptionException;
1: import org.apache.commons.cli2.builder.ArgumentBuilder;
1: import org.apache.commons.cli2.builder.DefaultOptionBuilder;
1: import org.apache.commons.cli2.builder.GroupBuilder;
1: import org.apache.commons.cli2.commandline.Parser;
1: import org.apache.mahout.common.CommandLineUtil;
1: 
0: import java.io.DataInputStream;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.io.IOException;
0: import java.io.PrintWriter;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.Scanner;
1: 
1: /**
1:  * Command-line tool for Viterbi evaluating
1:  */
1: public final class ViterbiEvaluator {
1: 
1:   private ViterbiEvaluator() {
1:   }
1: 
1:   public static void main(String[] args) throws IOException {
1:     DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();
1:     ArgumentBuilder argumentBuilder = new ArgumentBuilder();
1: 
0:     Option inputOption = optionBuilder.withLongName("input").
0:       withDescription("Text file with space-separated integers to segment").
0:       withShortName("i").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:       withName("path").create()).withRequired(true).create();
1: 
0:     Option outputOption = optionBuilder.withLongName("output").
0:       withDescription("Output file with decoded sequence of hidden states").
0:       withShortName("o").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:       withName("path").create()).withRequired(true).create();
1: 
1:     Option modelOption = optionBuilder.withLongName("model").
1:       withDescription("Path to serialized HMM model").
1:       withShortName("m").withArgument(argumentBuilder.withMaximum(1).withMinimum(1).
1:       withName("path").create()).withRequired(true).create();
1: 
1:     Option likelihoodOption = optionBuilder.withLongName("likelihood").
1:       withDescription("Compute likelihood of observed sequence").
1:       withShortName("l").withRequired(false).create();
1: 
1:     Group optionGroup = new GroupBuilder().withOption(inputOption).
1:       withOption(outputOption).withOption(modelOption).withOption(likelihoodOption).
1:       withName("Options").create();
1: 
1:     try {
1:       Parser parser = new Parser();
1:       parser.setGroup(optionGroup);
1:       CommandLine commandLine = parser.parse(args);
1: 
1:       String input = (String) commandLine.getValue(inputOption);
1:       String output = (String) commandLine.getValue(outputOption);
1: 
1:       String modelPath = (String) commandLine.getValue(modelOption);
1: 
1:       boolean computeLikelihood = commandLine.hasOption(likelihoodOption);
1: 
1:       //reading serialized HMM
0:       DataInputStream modelStream = new DataInputStream(new FileInputStream(modelPath));
1:       HmmModel model;
1:       try {
1:         model = LossyHmmSerializer.deserialize(modelStream);
0:       } finally {
0:         Closeables.closeQuietly(modelStream);
1:       }
1: 
1:       //reading observations
0:       List<Integer> observations = new ArrayList<Integer>();
0:       Scanner scanner = new Scanner(new FileInputStream(input));
1:       try {
1:         while (scanner.hasNextInt()) {
1:           observations.add(scanner.nextInt());
1:         }
0:       } finally {
0:         scanner.close();
1:       }
1: 
1:       int[] observationsArray = new int[observations.size()];
1:       for (int i = 0; i < observations.size(); ++i) {
1:         observationsArray[i] = observations.get(i);
1:       }
1: 
1:       //decoding
1:       int[] hiddenStates = HmmEvaluator.decode(model, observationsArray, true);
1: 
1:       //writing output
0:       PrintWriter writer = new PrintWriter(new FileOutputStream(output));
1:       try {
1:         for (int hiddenState : hiddenStates) {
1:           writer.print(hiddenState);
1:           writer.print(' ');
1:         }
0:       } finally {
0:         Closeables.closeQuietly(writer);
1:       }
1: 
1:       if (computeLikelihood) {
1:         System.out.println("Likelihood: " + HmmEvaluator.modelLikelihood(model, observationsArray, true));
1:       }
1:     } catch (OptionException e) {
1:       CommandLineUtil.printHelp(optionGroup);
1:     }
1:   }
1: }
============================================================================