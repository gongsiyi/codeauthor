1:d0bed6d: /*
1:d0bed6d:  * Copyright 2013 The Apache Software Foundation.
1:d0bed6d:  *
1:d0bed6d:  * Licensed under the Apache License, Version 2.0 (the "License");
1:d0bed6d:  * you may not use this file except in compliance with the License.
1:d0bed6d:  * You may obtain a copy of the License at
1:d0bed6d:  *
1:d0bed6d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d0bed6d:  *
1:d0bed6d:  * Unless required by applicable law or agreed to in writing, software
1:d0bed6d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d0bed6d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0bed6d:  * See the License for the specific language governing permissions and
1:d0bed6d:  * limitations under the License.
1:d0bed6d:  */
2:d0bed6d: 
1:d0bed6d: package org.apache.mahout.utils.vectors.arff;
1:d0bed6d: 
1:b381afd: import org.apache.mahout.common.MahoutTestCase;
1:d0bed6d: import org.junit.Test;
1:d0bed6d: 
1:d0bed6d: import java.util.Map;
1:d0bed6d: 
1:d0bed6d: public class MapBackedARFFModelTest extends MahoutTestCase {
1:d0bed6d: 
1:d0bed6d:   @Test
1:d0bed6d:   public void processNominal() {
1:d0bed6d:     String windy = "windy";
1:d0bed6d:     String breezy = "breezy";
1:d0bed6d: 
1:d0bed6d:     ARFFModel model = new MapBackedARFFModel();
1:d0bed6d:     model.addNominal(windy, breezy, 77);
1:d0bed6d:     model.addNominal(windy, "strong", 23);
1:d0bed6d:     model.addNominal(windy, "nuking", 55);
1:d0bed6d:     Map<String, Map<String, Integer>> nominalMap = model.getNominalMap();
1:d0bed6d: 
1:d0bed6d:     assertEquals(1, nominalMap.size());
1:d0bed6d:     Map<String, Integer> windyValues = nominalMap.get(windy);
1:d0bed6d:     assertEquals(77, windyValues.get(breezy).intValue());
1:d0bed6d:   }
1:f2eb7e1: 
1:f2eb7e1:   @Test
1:f2eb7e1:   public void processBadNumeric() {
1:f2eb7e1:     ARFFModel model = new MapBackedARFFModel();
1:f2eb7e1:     model.addLabel("b1shkt70694difsmmmdv0ikmoh", 77);
1:f2eb7e1:     model.addType(77, ARFFType.REAL);
1:7016ff6:     assertTrue(Double.isNaN(model.getValue("b1shkt70694difsmmmdv0ikmoh", 77)));
1:f2eb7e1:   }
1:f2eb7e1: 
1:f2eb7e1:   @Test
1:f2eb7e1:   public void processGoodNumeric() {
1:f2eb7e1:     ARFFModel model = new MapBackedARFFModel();
1:f2eb7e1:     model.addLabel("1234", 77);
1:f2eb7e1:     model.addType(77, ARFFType.INTEGER);
1:f2eb7e1:     assertTrue(1234 == model.getValue("1234", 77));
1:f2eb7e1:     model.addLabel("131.34", 78);
1:f2eb7e1:     model.addType(78, ARFFType.REAL);
1:f2eb7e1:     assertTrue(131.34 == model.getValue("131.34", 78));
1:f2eb7e1:   }
1:d0bed6d: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
author:smarthi
-------------------------------------------------------------------------------
commit:7016ff6
/////////////////////////////////////////////////////////////////////////
1:     assertTrue(Double.isNaN(model.getValue("b1shkt70694difsmmmdv0ikmoh", 77)));
commit:f2eb7e1
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Test
1:   public void processBadNumeric() {
1:     ARFFModel model = new MapBackedARFFModel();
1:     model.addLabel("b1shkt70694difsmmmdv0ikmoh", 77);
1:     model.addType(77, ARFFType.REAL);
0:     assertTrue(0.0 == model.getValue("b1shkt70694difsmmmdv0ikmoh", 77));
1:   }
1: 
1:   @Test
1:   public void processGoodNumeric() {
1:     ARFFModel model = new MapBackedARFFModel();
1:     model.addLabel("1234", 77);
1:     model.addType(77, ARFFType.INTEGER);
1:     assertTrue(1234 == model.getValue("1234", 77));
1:     model.addLabel("131.34", 78);
1:     model.addType(78, ARFFType.REAL);
1:     assertTrue(131.34 == model.getValue("131.34", 78));
1:   }
author:sslavic
-------------------------------------------------------------------------------
commit:b381afd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d0bed6d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2013 The Apache Software Foundation.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.utils.vectors.arff;
1: 
0: import org.apache.mahout.utils.MahoutTestCase;
1: import org.junit.Test;
1: 
1: import java.util.Map;
1: 
1: 
1: public class MapBackedARFFModelTest extends MahoutTestCase {
1: 
1:   @Test
1:   public void processNominal() {
1:     String windy = "windy";
1:     String breezy = "breezy";
1: 
1:     ARFFModel model = new MapBackedARFFModel();
1:     model.addNominal(windy, breezy, 77);
1:     model.addNominal(windy, "strong", 23);
1:     model.addNominal(windy, "nuking", 55);
1:     Map<String, Map<String, Integer>> nominalMap = model.getNominalMap();
1: 
1:     assertEquals(1, nominalMap.size());
1:     Map<String, Integer> windyValues = nominalMap.get(windy);
1:     assertEquals(77, windyValues.get(breezy).intValue());
1:   }
1: }
============================================================================