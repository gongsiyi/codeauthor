1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
1:3d4e6e2: 
1:a07bfc3: package org.apache.mahout.math;
3:a07bfc3: 
1:a07bfc3: import org.apache.mahout.math.function.Functions;
1:a07bfc3: import org.apache.mahout.math.random.MultiNormal;
1:a07bfc3: import org.junit.Test;
1:a07bfc3: 
1:acda70b: public class CentroidTest extends AbstractVectorTest<Centroid> {
1:0b8db82:   @Test
1:0b8db82:   public void testUpdate() {
1:0b8db82:     MultiNormal f = new MultiNormal(20);
1:a07bfc3: 
1:0b8db82:     Vector a = f.sample();
1:0b8db82:     Vector b = f.sample();
1:0b8db82:     Vector c = f.sample();
1:a07bfc3: 
1:8b6a26a:     DenseVector x = new DenseVector(a);
1:0b8db82:     Centroid x1 = new Centroid(1, x);
1:a07bfc3: 
1:0b8db82:     x1.update(new Centroid(2, new DenseVector(b)));
1:0b8db82:     Centroid x2 = new Centroid(x1);
1:a07bfc3: 
1:0b8db82:     x1.update(c);
1:a07bfc3: 
1:0b8db82:     // check for correct value
1:8b6a26a:     Vector mean = a.plus(b).plus(c).assign(Functions.div(3));
1:8b6a26a:     assertEquals(0, x1.getVector().minus(mean).norm(1), 1.0e-8);
1:0b8db82:     assertEquals(3, x1.getWeight(), 0);
1:a07bfc3: 
1:8b6a26a:     assertEquals(0, x2.minus(a.plus(b).divide(2)).norm(1), 1.0e-8);
1:0b8db82:     assertEquals(2, x2.getWeight(), 0);
1:a07bfc3: 
1:8b6a26a:     assertEquals(0, new Centroid(x1.getIndex(), x1, x1.getWeight()).minus(x1).norm(1), 1.0e-8);
1:a07bfc3: 
1:0b8db82:     // and verify shared storage
1:0b8db82:     assertEquals(0, x.minus(x1).norm(1), 0);
1:a07bfc3: 
1:8b6a26a:     assertEquals(3, x1.getWeight(), 1.0e-8);
1:0b8db82:     assertEquals(1, x1.getIndex());
1:0b8db82:   }
1:1e3f7ae: 
1:1e3f7ae:   @Override
1:acda70b:   public Centroid vectorToTest(int size) {
1:3d4e6e2:     return new Centroid(new WeightedVector(new DenseVector(size), 3.15, 51));
1:3d4e6e2:   }
1:1e3f7ae: 
1:1e3f7ae:   @Override
1:1e3f7ae:   public void testSize() {
1:be8e8a0:     assertEquals("size", 3, getTestVector().getNumNonZeroElements());
1:1e3f7ae:   }
1:1e3f7ae: 
1:3d4e6e2:   @Override
1:1e3f7ae:   Vector generateTestVector(int cardinality) {
1:1e3f7ae:     return new Centroid(new WeightedVector(new DenseVector(cardinality), 3.14, 53));
1:1e3f7ae:   }
2:a07bfc3: }
============================================================================
author:Robin Anil
-------------------------------------------------------------------------------
commit:be8e8a0
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("size", 3, getTestVector().getNumNonZeroElements());
commit:be94533
/////////////////////////////////////////////////////////////////////////
0:     assertEquals("size", 3, getTestVector().getNumNondefaultElements());
author:Ted Dunning
-------------------------------------------------------------------------------
commit:acda70b
/////////////////////////////////////////////////////////////////////////
1: public class CentroidTest extends AbstractVectorTest<Centroid> {
/////////////////////////////////////////////////////////////////////////
1:   public Centroid vectorToTest(int size) {
commit:1e3f7ae
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public void testSize() {
0:     assertEquals("size", 7, getTestVector().getNumNondefaultElements());
1:   }
1: 
1:   @Override
1:   Vector generateTestVector(int cardinality) {
1:     return new Centroid(new WeightedVector(new DenseVector(cardinality), 3.14, 53));
1:   }
1: 
commit:3d4e6e2
/////////////////////////////////////////////////////////////////////////
0: public class CentroidTest extends AbstractVectorTest {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
0:   public Vector vectorToTest(int size) {
1:     return new Centroid(new WeightedVector(new DenseVector(size), 3.15, 51));
1:   }
commit:0b8db82
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testUpdate() {
1:     MultiNormal f = new MultiNormal(20);
1:     Vector a = f.sample();
1:     Vector b = f.sample();
1:     Vector c = f.sample();
0:     final DenseVector x = new DenseVector(a);
1:     Centroid x1 = new Centroid(1, x);
1:     x1.update(new Centroid(2, new DenseVector(b)));
1:     Centroid x2 = new Centroid(x1);
1:     x1.update(c);
1:     // check for correct value
0:     final Vector mean = a.plus(b).plus(c).assign(Functions.div(3));
0:     assertEquals(0, x1.getVector().minus(mean).norm(1), 1e-8);
1:     assertEquals(3, x1.getWeight(), 0);
0:     assertEquals(0, x2.minus(a.plus(b).divide(2)).norm(1), 1e-8);
1:     assertEquals(2, x2.getWeight(), 0);
0:     assertEquals(0, new Centroid(x1.getIndex(), x1, x1.getWeight()).minus(x1).norm(1), 1e-8);
1:     // and verify shared storage
1:     assertEquals(0, x.minus(x1).norm(1), 0);
0:     assertEquals(3, x1.getWeight(), 1e-8);
1:     assertEquals(1, x1.getIndex());
1:   }
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.math.random.MultiNormal;
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: public class CentroidTest {
0:     @Test
0:     public void testUpdate() {
0:         MultiNormal f = new MultiNormal(20);
1: 
0:         Vector a = f.sample();
0:         Vector b = f.sample();
0:         Vector c = f.sample();
1: 
0:         final DenseVector x = new DenseVector(a);
0:         Centroid x1 = new Centroid(1, x);
1: 
0:         x1.update(new Centroid(2, new DenseVector(b)));
0:         Centroid x2 = new Centroid(x1);
1: 
0:         x1.update(c);
1: 
0:         // check for correct value
0:         final Vector mean = a.plus(b).plus(c).assign(Functions.div(3));
0:         assertEquals(0, x1.getVector().minus(mean).norm(1), 1e-8);
0:         assertEquals(3, x1.getWeight(), 0);
1: 
0:         assertEquals(0, x2.minus(a.plus(b).divide(2)).norm(1), 1e-8);
0:         assertEquals(2, x2.getWeight(), 0);
1: 
0:         assertEquals(0, new Centroid(x1.getIndex(), x1, x1.getWeight()).minus(x1).norm(1), 1e-8);
1: 
0:         // and verify shared storage
0:         assertEquals(0, x.minus(x1).norm(1), 0);
1: 
0:         assertEquals(3, x1.getWeight(), 1e-8);
0:         assertEquals(1, x1.getIndex());
1:     }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1:     DenseVector x = new DenseVector(a);
/////////////////////////////////////////////////////////////////////////
1:     Vector mean = a.plus(b).plus(c).assign(Functions.div(3));
1:     assertEquals(0, x1.getVector().minus(mean).norm(1), 1.0e-8);
1:     assertEquals(0, x2.minus(a.plus(b).divide(2)).norm(1), 1.0e-8);
1:     assertEquals(0, new Centroid(x1.getIndex(), x1, x1.getWeight()).minus(x1).norm(1), 1.0e-8);
1:     assertEquals(3, x1.getWeight(), 1.0e-8);
============================================================================