2:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
4:f870a63:  */
5:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import org.apache.mahout.math.Matrix;
1:f870a63: import org.apache.mahout.h2obindings.H2OBlockMatrix;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: import water.fvec.NewChunk;
1:f870a63: 
1:f870a63: import java.io.Serializable;
1:f870a63: import java.util.Arrays;
1:f870a63: 
1:f870a63: import scala.reflect.ClassTag;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * MapBlock operator.
1:2d1b0bf:  */
1:f870a63: public class MapBlock {
1:2d1b0bf:   /**
1:2d1b0bf:    * Execute a BlockMapFunction on DRM partitions to create a new DRM.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA DRM representing matrix A.
1:2d1b0bf:    * @param ncol Number of columns output by BMF.
1:2d1b0bf:    * @param bmf BlockMapFunction which maps input DRM partition to output.
1:2d1b0bf:    * @param isRstr flag indicating if key type of output DRM is a String.
1:2d1b0bf:    * @param k ClassTag of intput DRM key type.
1:2d1b0bf:    * @param r ClassTag of output DRM key type.
1:2d1b0bf:    * @return new DRM constructed from mapped blocks of drmA through bmf.
1:2d1b0bf:    */
1:2d1b0bf:   public static <K,R> H2ODrm exec(H2ODrm drmA, int ncol, Object bmf, final boolean isRstr,
1:f870a63:                                   final ClassTag<K> k, final ClassTag<R> r) {
1:f870a63:     Frame A = drmA.frame;
1:f870a63:     Vec keys = drmA.keys;
1:f870a63: 
1:2d1b0bf:     /**
1:2d1b0bf:      * MRTask to execute bmf on partitions. Partitions are
1:2d1b0bf:      * made accessible to bmf in the form of H2OBlockMatrix.
1:2d1b0bf:      */
1:f870a63:     class MRTaskBMF extends MRTask<MRTaskBMF> {
1:f870a63:       Serializable bmf;
1:f870a63:       Vec labels;
1:f870a63:       MRTaskBMF(Object _bmf, Vec _labels) {
1:2d1b0bf:         // BlockMapFun does not implement Serializable,
1:2d1b0bf:         // but Scala closures are _always_ Serializable.
1:2d1b0bf:         //
1:2d1b0bf:         // So receive the object as a plain Object (else
1:2d1b0bf:         // compilation fails) and typcast it with conviction,
1:2d1b0bf:         // that Scala always tags the actually generated
1:2d1b0bf:         // closure functions with Serializable.
1:f870a63:         bmf = (Serializable)_bmf;
1:f870a63:         labels = _labels;
1:f870a63:       }
1:f870a63: 
1:2d1b0bf:       /** Create H2OBlockMatrix from the partition */
1:f870a63:       private Matrix blockify(Chunk chks[]) {
1:f870a63:         return new H2OBlockMatrix(chks);
1:f870a63:       }
1:f870a63: 
1:2d1b0bf:       /** Ingest the output of bmf into the output partition */
1:f870a63:       private void deblockify(Matrix out, NewChunk ncs[]) {
1:f870a63:         // assert (out.colSize() == ncs.length)
1:f870a63:         for (int c = 0; c < out.columnSize(); c++) {
1:f870a63:           for (int r = 0; r < out.rowSize(); r++) {
1:f870a63:             ncs[c].addNum(out.getQuick(r, c));
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }
1:f870a63: 
1:2d1b0bf:       // Input:
1:2d1b0bf:       // chks.length == A.numCols()
1:2d1b0bf:       //
1:2d1b0bf:       // Output:
1:2d1b0bf:       // ncs.length == (A.numCols() + 1) if String keyed
1:2d1b0bf:       //             (A.numCols() + 0) if Int or Long keyed
1:2d1b0bf:       //
1:2d1b0bf:       // First A.numCols() ncs[] elements are fed back the output
1:2d1b0bf:       // of bmf() output's _2 in deblockify()
1:2d1b0bf:       //
1:2d1b0bf:       // If String keyed, then MapBlockHelper.exec() would have
1:2d1b0bf:       // filled in the Strings into ncs[ncol] already
1:2d1b0bf:       //
1:f870a63:       public void map(Chunk chks[], NewChunk ncs[]) {
1:f870a63:         long start = chks[0].start();
1:2d1b0bf:         NewChunk nclabel = isRstr ? ncs[ncs.length - 1] : null;
1:f870a63:         deblockify(MapBlockHelper.exec(bmf, blockify(chks), start, labels, nclabel, k, r), ncs);
1:f870a63:         // assert chks[i]._len == ncs[j]._len
1:f870a63:       }
1:f870a63:     }
1:f870a63: 
1:2d1b0bf:     int ncolRes = ncol + (isRstr ? 1 : 0);
1:2d1b0bf:     Frame fmap = new MRTaskBMF(bmf, keys).doAll(ncolRes, A).outputFrame(null, null);
1:f870a63:     Vec vmap = null;
1:2d1b0bf:     if (isRstr) {
1:2d1b0bf:       // If output was String keyed, then the last Vec in fmap is the String vec.
1:2d1b0bf:       // If so, peel it out into a separate Vec (vmap) and set fmap to be the
1:2d1b0bf:       // Frame with just the first ncol Vecs
1:f870a63:       vmap = fmap.vecs()[ncol];
1:f870a63:       fmap = new Frame(Arrays.copyOfRange(fmap.vecs(), 0, ncol));
1:f870a63:     }
1:f870a63:     return new H2ODrm(fmap, vmap);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * MapBlock operator.
1:  */
1:   /**
1:    * Execute a BlockMapFunction on DRM partitions to create a new DRM.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param ncol Number of columns output by BMF.
1:    * @param bmf BlockMapFunction which maps input DRM partition to output.
1:    * @param isRstr flag indicating if key type of output DRM is a String.
1:    * @param k ClassTag of intput DRM key type.
1:    * @param r ClassTag of output DRM key type.
1:    * @return new DRM constructed from mapped blocks of drmA through bmf.
1:    */
1:   public static <K,R> H2ODrm exec(H2ODrm drmA, int ncol, Object bmf, final boolean isRstr,
1:     /**
1:      * MRTask to execute bmf on partitions. Partitions are
1:      * made accessible to bmf in the form of H2OBlockMatrix.
1:      */
1:         // BlockMapFun does not implement Serializable,
1:         // but Scala closures are _always_ Serializable.
1:         //
1:         // So receive the object as a plain Object (else
1:         // compilation fails) and typcast it with conviction,
1:         // that Scala always tags the actually generated
1:         // closure functions with Serializable.
1:       /** Create H2OBlockMatrix from the partition */
1:       /** Ingest the output of bmf into the output partition */
/////////////////////////////////////////////////////////////////////////
1:       // Input:
1:       // chks.length == A.numCols()
1:       //
1:       // Output:
1:       // ncs.length == (A.numCols() + 1) if String keyed
1:       //             (A.numCols() + 0) if Int or Long keyed
1:       //
1:       // First A.numCols() ncs[] elements are fed back the output
1:       // of bmf() output's _2 in deblockify()
1:       //
1:       // If String keyed, then MapBlockHelper.exec() would have
1:       // filled in the Strings into ncs[ncol] already
1:       //
1:         NewChunk nclabel = isRstr ? ncs[ncs.length - 1] : null;
1:     int ncolRes = ncol + (isRstr ? 1 : 0);
1:     Frame fmap = new MRTaskBMF(bmf, keys).doAll(ncolRes, A).outputFrame(null, null);
1:     if (isRstr) {
1:       // If output was String keyed, then the last Vec in fmap is the String vec.
1:       // If so, peel it out into a separate Vec (vmap) and set fmap to be the
1:       // Frame with just the first ncol Vecs
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.h2obindings.H2OBlockMatrix;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
1: import water.fvec.NewChunk;
1: 
1: import java.io.Serializable;
1: import java.util.Arrays;
1: 
1: import scala.reflect.ClassTag;
1: 
1: public class MapBlock {
0:   public static <K,R> H2ODrm exec(H2ODrm drmA, int ncol, Object bmf, final boolean is_r_str,
1:                                   final ClassTag<K> k, final ClassTag<R> r) {
1:     Frame A = drmA.frame;
1:     Vec keys = drmA.keys;
1: 
1:     class MRTaskBMF extends MRTask<MRTaskBMF> {
1:       Serializable bmf;
1:       Vec labels;
1:       MRTaskBMF(Object _bmf, Vec _labels) {
0:         /* BlockMapFun does not implement Serializable,
0:            but Scala closures are _always_ Serializable.
1: 
0:            So receive the object as a plain Object (else
0:            compilation fails) and typcast it with conviction,
0:            that Scala always tags the actually generated
0:            closure functions with Serializable.
1:          */
1:         bmf = (Serializable)_bmf;
1:         labels = _labels;
1:       }
1: 
1:       private Matrix blockify(Chunk chks[]) {
1:         return new H2OBlockMatrix(chks);
1:       }
1: 
1:       private void deblockify(Matrix out, NewChunk ncs[]) {
1:         // assert (out.colSize() == ncs.length)
1:         for (int c = 0; c < out.columnSize(); c++) {
1:           for (int r = 0; r < out.rowSize(); r++) {
1:             ncs[c].addNum(out.getQuick(r, c));
1:           }
1:         }
1:       }
1: 
1:       /*
0:         Input:
0:         chks.length == A.numCols()
1: 
0:         Output:
0:         ncs.length == (A.numCols() + 1) if String keyed
0:                       (A.numCols() + 0) if Int or Long keyed
1: 
0:         First A.numCols() ncs[] elements are fed back the output
0:         of bmf() output's _2 in deblockify()
1: 
0:         If String keyed, then MapBlockHelper.exec() would have
0:         filled in the Strings into ncs[ncol] already
1:       */
1:       public void map(Chunk chks[], NewChunk ncs[]) {
1:         long start = chks[0].start();
0:         NewChunk nclabel = is_r_str ? ncs[ncs.length - 1] : null;
1:         deblockify(MapBlockHelper.exec(bmf, blockify(chks), start, labels, nclabel, k, r), ncs);
1:         // assert chks[i]._len == ncs[j]._len
1:       }
1:     }
1: 
0:     int ncol_res = ncol + (is_r_str ? 1 : 0);
0:     Frame fmap = new MRTaskBMF(bmf, keys).doAll(ncol_res, A).outputFrame(null, null);
1:     Vec vmap = null;
0:     if (is_r_str) {
0:       /* If output was String keyed, then the last Vec in fmap is the String vec.
0:          If so, peel it out into a separate Vec (vmap) and set fmap to be the
0:          Frame with just the first ncol Vecs
1:       */
1:       vmap = fmap.vecs()[ncol];
1:       fmap = new Frame(Arrays.copyOfRange(fmap.vecs(), 0, ncol));
1:     }
1:     return new H2ODrm(fmap, vmap);
1:   }
1: }
============================================================================