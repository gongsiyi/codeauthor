1:845cbcd: /**
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
1:845cbcd: 
1:845cbcd: package org.apache.mahout.math.hadoop.similarity.cooccurrence;
1:845cbcd: 
1:845cbcd: import org.apache.hadoop.conf.Configuration;
1:845cbcd: import org.apache.hadoop.fs.FileSystem;
1:845cbcd: import org.apache.hadoop.fs.Path;
1:845cbcd: import org.apache.mahout.common.MahoutTestCase;
1:845cbcd: import org.apache.mahout.math.Matrix;
1:845cbcd: import org.apache.mahout.math.hadoop.MathHelper;
1:845cbcd: import org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.TanimotoCoefficientSimilarity;
1:e90d901: import org.apache.mahout.math.map.OpenIntIntHashMap;
1:845cbcd: import org.junit.Test;
1:845cbcd: 
1:845cbcd: import java.io.File;
1:845cbcd: 
1:845cbcd: public class RowSimilarityJobTest extends MahoutTestCase {
1:845cbcd: 
1:845cbcd:   /**
1:845cbcd:    * integration test with a tiny data set
1:845cbcd:    *
1:845cbcd:    * <pre>
1:845cbcd:    *
1:845cbcd:    * input matrix:
1:845cbcd:    *
1:845cbcd:    * 1, 0, 1, 1, 0
1:845cbcd:    * 0, 0, 1, 1, 0
1:845cbcd:    * 0, 0, 0, 0, 1
1:845cbcd:    *
1:845cbcd:    * similarity matrix (via tanimoto):
1:845cbcd:    *
1:845cbcd:    * 1,     0.666, 0
1:845cbcd:    * 0.666, 1,     0
1:845cbcd:    * 0,     0,     1
1:845cbcd:    * </pre>
1:67a531e:    * @throws Exception
1:845cbcd:    */
1:845cbcd:   @Test
1:845cbcd:   public void toyIntegration() throws Exception {
1:845cbcd: 
1:845cbcd:     File inputFile = getTestTempFile("rows");
1:845cbcd:     File outputDir = getTestTempDir("output");
1:845cbcd:     outputDir.delete();
1:845cbcd:     File tmpDir = getTestTempDir("tmp");
1:845cbcd: 
1:e3ec9d8:     Configuration conf = getConfiguration();
1:845cbcd:     Path inputPath = new Path(inputFile.getAbsolutePath());
1:845cbcd:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1:845cbcd: 
1:845cbcd:     MathHelper.writeDistributedRowMatrix(new double[][] {
1:845cbcd:         new double[] { 1, 0, 1, 1, 0 },
1:845cbcd:         new double[] { 0, 0, 1, 1, 0 },
1:845cbcd:         new double[] { 0, 0, 0, 0, 1 } },
1:845cbcd:         fs, conf, inputPath);
1:845cbcd: 
1:845cbcd:     RowSimilarityJob rowSimilarityJob = new RowSimilarityJob();
1:845cbcd:     rowSimilarityJob.setConf(conf);
1:845cbcd:     rowSimilarityJob.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:845cbcd:         "--numberOfColumns", String.valueOf(5), "--similarityClassname", TanimotoCoefficientSimilarity.class.getName(),
1:845cbcd:         "--tempDir", tmpDir.getAbsolutePath() });
1:e90d901: 
1:845cbcd: 
1:e90d901:     OpenIntIntHashMap observationsPerColumn =
1:e90d901:         Vectors.readAsIntMap(new Path(tmpDir.getAbsolutePath(), "observationsPerColumn.bin"), conf);
1:e90d901:     assertEquals(4, observationsPerColumn.size());
1:e90d901:     assertEquals(1, observationsPerColumn.get(0));
1:e90d901:     assertEquals(2, observationsPerColumn.get(2));
1:e90d901:     assertEquals(2, observationsPerColumn.get(3));
1:e90d901:     assertEquals(1, observationsPerColumn.get(4));
1:e90d901: 
1:845cbcd:     Matrix similarityMatrix = MathHelper.readMatrix(conf, new Path(outputDir.getAbsolutePath(), "part-r-00000"), 3, 3);
1:845cbcd: 
1:845cbcd:     assertNotNull(similarityMatrix);
1:845cbcd:     assertEquals(3, similarityMatrix.numCols());
1:845cbcd:     assertEquals(3, similarityMatrix.numRows());
1:845cbcd: 
1:845cbcd:     assertEquals(1.0, similarityMatrix.get(0, 0), EPSILON);
1:845cbcd:     assertEquals(1.0, similarityMatrix.get(1, 1), EPSILON);
1:845cbcd:     assertEquals(1.0, similarityMatrix.get(2, 2), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(2, 0), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(2, 1), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(0, 2), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(1, 2), EPSILON);
1:845cbcd:     assertEquals(0.666666, similarityMatrix.get(0, 1), EPSILON);
1:845cbcd:     assertEquals(0.666666, similarityMatrix.get(1, 0), EPSILON);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:845cbcd:   public void toyIntegrationMaxSimilaritiesPerRow() throws Exception {
1:845cbcd: 
1:845cbcd:     File inputFile = getTestTempFile("rows");
1:845cbcd:     File outputDir = getTestTempDir("output");
1:845cbcd:     outputDir.delete();
1:845cbcd:     File tmpDir = getTestTempDir("tmp");
1:845cbcd: 
1:e3ec9d8:     Configuration conf = getConfiguration();
1:845cbcd:     Path inputPath = new Path(inputFile.getAbsolutePath());
1:845cbcd:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1:845cbcd: 
1:845cbcd:     MathHelper.writeDistributedRowMatrix(new double[][]{
1:845cbcd:         new double[] { 1, 0, 1, 1, 0, 1 },
1:845cbcd:         new double[] { 0, 1, 1, 1, 1, 1 },
1:845cbcd:         new double[] { 1, 1, 0, 1, 0, 0 } },
1:845cbcd:         fs, conf, inputPath);
1:845cbcd: 
1:845cbcd:     RowSimilarityJob rowSimilarityJob = new RowSimilarityJob();
1:845cbcd:     rowSimilarityJob.setConf(conf);
1:845cbcd:     rowSimilarityJob.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:845cbcd:         "--numberOfColumns", String.valueOf(6), "--similarityClassname", TanimotoCoefficientSimilarity.class.getName(),
1:845cbcd:         "--maxSimilaritiesPerRow", String.valueOf(1), "--excludeSelfSimilarity", String.valueOf(true),
1:845cbcd:         "--tempDir", tmpDir.getAbsolutePath() });
1:845cbcd: 
1:845cbcd:     Matrix similarityMatrix = MathHelper.readMatrix(conf, new Path(outputDir.getAbsolutePath(), "part-r-00000"), 3, 3);
1:845cbcd: 
1:845cbcd:     assertNotNull(similarityMatrix);
1:845cbcd:     assertEquals(3, similarityMatrix.numCols());
1:845cbcd:     assertEquals(3, similarityMatrix.numRows());
1:845cbcd: 
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(0, 0), EPSILON);
1:845cbcd:     assertEquals(0.5, similarityMatrix.get(0, 1), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(0, 2), EPSILON);
1:845cbcd: 
1:845cbcd:     assertEquals(0.5, similarityMatrix.get(1, 0), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(1, 1), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(1, 2), EPSILON);
1:845cbcd: 
1:845cbcd:     assertEquals(0.4, similarityMatrix.get(2, 0), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(2, 1), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(2, 2), EPSILON);
1:845cbcd:   }
1:3bf7a1c: 
1:3bf7a1c:   @Test
1:845cbcd:   public void toyIntegrationWithThreshold() throws Exception {
1:845cbcd: 
1:845cbcd: 
1:845cbcd:     File inputFile = getTestTempFile("rows");
1:845cbcd:     File outputDir = getTestTempDir("output");
1:845cbcd:     outputDir.delete();
1:845cbcd:     File tmpDir = getTestTempDir("tmp");
1:845cbcd: 
1:e3ec9d8:     Configuration conf = getConfiguration();
1:845cbcd:     Path inputPath = new Path(inputFile.getAbsolutePath());
1:845cbcd:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1:845cbcd: 
1:845cbcd:     MathHelper.writeDistributedRowMatrix(new double[][]{
1:845cbcd:         new double[] { 1, 0, 1, 1, 0, 1 },
1:845cbcd:         new double[] { 0, 1, 1, 1, 1, 1 },
1:845cbcd:         new double[] { 1, 1, 0, 1, 0, 0 } },
1:845cbcd:         fs, conf, inputPath);
1:845cbcd: 
1:845cbcd:     RowSimilarityJob rowSimilarityJob = new RowSimilarityJob();
1:845cbcd:     rowSimilarityJob.setConf(conf);
1:845cbcd:     rowSimilarityJob.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:845cbcd:         "--numberOfColumns", String.valueOf(6), "--similarityClassname", TanimotoCoefficientSimilarity.class.getName(),
1:845cbcd:         "--excludeSelfSimilarity", String.valueOf(true), "--threshold", String.valueOf(0.5),
1:845cbcd:         "--tempDir", tmpDir.getAbsolutePath() });
1:845cbcd: 
1:845cbcd:     Matrix similarityMatrix = MathHelper.readMatrix(conf, new Path(outputDir.getAbsolutePath(), "part-r-00000"), 3, 3);
1:845cbcd: 
1:845cbcd:     assertNotNull(similarityMatrix);
1:845cbcd:     assertEquals(3, similarityMatrix.numCols());
1:845cbcd:     assertEquals(3, similarityMatrix.numRows());
1:845cbcd: 
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(0, 0), EPSILON);
1:845cbcd:     assertEquals(0.5, similarityMatrix.get(0, 1), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(0, 2), EPSILON);
1:845cbcd: 
1:845cbcd:     assertEquals(0.5, similarityMatrix.get(1, 0), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(1, 1), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(1, 2), EPSILON);
1:845cbcd: 
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(2, 0), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(2, 1), EPSILON);
1:845cbcd:     assertEquals(0.0, similarityMatrix.get(2, 2), EPSILON);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Test
1:3bf7a1c:   public void testVectorDimensions() throws Exception {
1:3bf7a1c: 
1:3bf7a1c:     File inputFile = getTestTempFile("rows");
1:3bf7a1c: 
1:e3ec9d8:     Configuration conf = getConfiguration();
1:3bf7a1c:     Path inputPath = new Path(inputFile.getAbsolutePath());
1:3bf7a1c:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1:3bf7a1c: 
1:3bf7a1c:     MathHelper.writeDistributedRowMatrix(new double[][] {
1:3bf7a1c:         new double[] { 1, 0, 1, 1, 0, 1 },
1:3bf7a1c:         new double[] { 0, 1, 1, 1, 1, 1 },
1:3bf7a1c:         new double[] { 1, 1, 0, 1, 0, 0 } },
1:3bf7a1c:         fs, conf, inputPath);
1:3bf7a1c: 
1:3bf7a1c:     RowSimilarityJob rowSimilarityJob = new RowSimilarityJob();
1:3bf7a1c:     rowSimilarityJob.setConf(conf);
1:845cbcd: 
1:3bf7a1c:     int numberOfColumns = rowSimilarityJob.getDimensions(inputPath);
1:3bf7a1c: 
1:3bf7a1c:     assertEquals(6, numberOfColumns);
1:3bf7a1c:   }
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e90d901
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.map.OpenIntIntHashMap;
/////////////////////////////////////////////////////////////////////////
1: 
1:     OpenIntIntHashMap observationsPerColumn =
1:         Vectors.readAsIntMap(new Path(tmpDir.getAbsolutePath(), "observationsPerColumn.bin"), conf);
1:     assertEquals(4, observationsPerColumn.size());
1:     assertEquals(1, observationsPerColumn.get(0));
1:     assertEquals(2, observationsPerColumn.get(2));
1:     assertEquals(2, observationsPerColumn.get(3));
1:     assertEquals(1, observationsPerColumn.get(4));
1: 
commit:3bf7a1c
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testVectorDimensions() throws Exception {
1: 
1:     File inputFile = getTestTempFile("rows");
1: 
0:     Configuration conf = new Configuration();
1:     Path inputPath = new Path(inputFile.getAbsolutePath());
1:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1: 
1:     MathHelper.writeDistributedRowMatrix(new double[][] {
1:         new double[] { 1, 0, 1, 1, 0, 1 },
1:         new double[] { 0, 1, 1, 1, 1, 1 },
1:         new double[] { 1, 1, 0, 1, 0, 0 } },
1:         fs, conf, inputPath);
1: 
1:     RowSimilarityJob rowSimilarityJob = new RowSimilarityJob();
1:     rowSimilarityJob.setConf(conf);
1: 
1:     int numberOfColumns = rowSimilarityJob.getDimensions(inputPath);
1: 
1:     assertEquals(6, numberOfColumns);
1:   }
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.similarity.cooccurrence;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.hadoop.MathHelper;
1: import org.apache.mahout.math.hadoop.similarity.cooccurrence.measures.TanimotoCoefficientSimilarity;
1: import org.junit.Test;
1: 
1: import java.io.File;
1: 
1: public class RowSimilarityJobTest extends MahoutTestCase {
1: 
1:   /**
1:    * integration test with a tiny data set
1:    *
1:    * <pre>
1:    *
1:    * input matrix:
1:    *
1:    * 1, 0, 1, 1, 0
1:    * 0, 0, 1, 1, 0
1:    * 0, 0, 0, 0, 1
1:    *
1:    * similarity matrix (via tanimoto):
1:    *
1:    * 1,     0.666, 0
1:    * 0.666, 1,     0
1:    * 0,     0,     1
1:    * </pre>
1:    */
1:   @Test
1:   public void toyIntegration() throws Exception {
1: 
1:     File inputFile = getTestTempFile("rows");
1:     File outputDir = getTestTempDir("output");
1:     outputDir.delete();
1:     File tmpDir = getTestTempDir("tmp");
1: 
0:     Configuration conf = new Configuration();
1:     Path inputPath = new Path(inputFile.getAbsolutePath());
1:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1: 
1:     MathHelper.writeDistributedRowMatrix(new double[][] {
1:         new double[] { 1, 0, 1, 1, 0 },
1:         new double[] { 0, 0, 1, 1, 0 },
1:         new double[] { 0, 0, 0, 0, 1 } },
1:         fs, conf, inputPath);
1: 
1:     RowSimilarityJob rowSimilarityJob = new RowSimilarityJob();
1:     rowSimilarityJob.setConf(conf);
1:     rowSimilarityJob.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:         "--numberOfColumns", String.valueOf(5), "--similarityClassname", TanimotoCoefficientSimilarity.class.getName(),
1:         "--tempDir", tmpDir.getAbsolutePath() });
1: 
1:     Matrix similarityMatrix = MathHelper.readMatrix(conf, new Path(outputDir.getAbsolutePath(), "part-r-00000"), 3, 3);
1: 
1:     assertNotNull(similarityMatrix);
1:     assertEquals(3, similarityMatrix.numCols());
1:     assertEquals(3, similarityMatrix.numRows());
1: 
1:     assertEquals(1.0, similarityMatrix.get(0, 0), EPSILON);
1:     assertEquals(1.0, similarityMatrix.get(1, 1), EPSILON);
1:     assertEquals(1.0, similarityMatrix.get(2, 2), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(2, 0), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(2, 1), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(0, 2), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(1, 2), EPSILON);
1:     assertEquals(0.666666, similarityMatrix.get(0, 1), EPSILON);
1:     assertEquals(0.666666, similarityMatrix.get(1, 0), EPSILON);
1:   }
1: 
1:   @Test
1:   public void toyIntegrationMaxSimilaritiesPerRow() throws Exception {
1: 
1:     File inputFile = getTestTempFile("rows");
1:     File outputDir = getTestTempDir("output");
1:     outputDir.delete();
1:     File tmpDir = getTestTempDir("tmp");
1: 
0:     Configuration conf = new Configuration();
1:     Path inputPath = new Path(inputFile.getAbsolutePath());
1:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1: 
1:     MathHelper.writeDistributedRowMatrix(new double[][]{
1:         new double[] { 1, 0, 1, 1, 0, 1 },
1:         new double[] { 0, 1, 1, 1, 1, 1 },
1:         new double[] { 1, 1, 0, 1, 0, 0 } },
1:         fs, conf, inputPath);
1: 
1:     RowSimilarityJob rowSimilarityJob = new RowSimilarityJob();
1:     rowSimilarityJob.setConf(conf);
1:     rowSimilarityJob.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:         "--numberOfColumns", String.valueOf(6), "--similarityClassname", TanimotoCoefficientSimilarity.class.getName(),
1:         "--maxSimilaritiesPerRow", String.valueOf(1), "--excludeSelfSimilarity", String.valueOf(true),
1:         "--tempDir", tmpDir.getAbsolutePath() });
1: 
1:     Matrix similarityMatrix = MathHelper.readMatrix(conf, new Path(outputDir.getAbsolutePath(), "part-r-00000"), 3, 3);
1: 
1:     assertNotNull(similarityMatrix);
1:     assertEquals(3, similarityMatrix.numCols());
1:     assertEquals(3, similarityMatrix.numRows());
1: 
1:     assertEquals(0.0, similarityMatrix.get(0, 0), EPSILON);
1:     assertEquals(0.5, similarityMatrix.get(0, 1), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(0, 2), EPSILON);
1: 
1:     assertEquals(0.5, similarityMatrix.get(1, 0), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(1, 1), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(1, 2), EPSILON);
1: 
1:     assertEquals(0.4, similarityMatrix.get(2, 0), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(2, 1), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(2, 2), EPSILON);
1:   }
1: 
1:   @Test
1:   public void toyIntegrationWithThreshold() throws Exception {
1: 
1: 
1:     File inputFile = getTestTempFile("rows");
1:     File outputDir = getTestTempDir("output");
1:     outputDir.delete();
1:     File tmpDir = getTestTempDir("tmp");
1: 
0:     Configuration conf = new Configuration();
1:     Path inputPath = new Path(inputFile.getAbsolutePath());
1:     FileSystem fs = FileSystem.get(inputPath.toUri(), conf);
1: 
1:     MathHelper.writeDistributedRowMatrix(new double[][]{
1:         new double[] { 1, 0, 1, 1, 0, 1 },
1:         new double[] { 0, 1, 1, 1, 1, 1 },
1:         new double[] { 1, 1, 0, 1, 0, 0 } },
1:         fs, conf, inputPath);
1: 
1:     RowSimilarityJob rowSimilarityJob = new RowSimilarityJob();
1:     rowSimilarityJob.setConf(conf);
1:     rowSimilarityJob.run(new String[] { "--input", inputFile.getAbsolutePath(), "--output", outputDir.getAbsolutePath(),
1:         "--numberOfColumns", String.valueOf(6), "--similarityClassname", TanimotoCoefficientSimilarity.class.getName(),
1:         "--excludeSelfSimilarity", String.valueOf(true), "--threshold", String.valueOf(0.5),
1:         "--tempDir", tmpDir.getAbsolutePath() });
1: 
1:     Matrix similarityMatrix = MathHelper.readMatrix(conf, new Path(outputDir.getAbsolutePath(), "part-r-00000"), 3, 3);
1: 
1:     assertNotNull(similarityMatrix);
1:     assertEquals(3, similarityMatrix.numCols());
1:     assertEquals(3, similarityMatrix.numRows());
1: 
1:     assertEquals(0.0, similarityMatrix.get(0, 0), EPSILON);
1:     assertEquals(0.5, similarityMatrix.get(0, 1), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(0, 2), EPSILON);
1: 
1:     assertEquals(0.5, similarityMatrix.get(1, 0), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(1, 1), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(1, 2), EPSILON);
1: 
1:     assertEquals(0.0, similarityMatrix.get(2, 0), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(2, 1), EPSILON);
1:     assertEquals(0.0, similarityMatrix.get(2, 2), EPSILON);
1:   }
1: 
1: }
author:Isabel Drost
-------------------------------------------------------------------------------
commit:e3ec9d8
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
author:smarthi
-------------------------------------------------------------------------------
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1:    * @throws Exception
============================================================================