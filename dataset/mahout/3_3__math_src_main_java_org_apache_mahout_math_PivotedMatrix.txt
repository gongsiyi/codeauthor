1:15a7014: /*
1:15a7014:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:15a7014:  * contributor license agreements.  See the NOTICE file distributed with
1:15a7014:  * this work for additional information regarding copyright ownership.
1:15a7014:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:15a7014:  * (the "License"); you may not use this file except in compliance with
1:15a7014:  * the License.  You may obtain a copy of the License at
1:15a7014:  *
1:15a7014:  *     http://www.apache.org/licenses/LICENSE-2.0
1:15a7014:  *
1:15a7014:  * Unless required by applicable law or agreed to in writing, software
1:15a7014:  * distributed under the License is distributed on an "AS IS" BASIS,
1:15a7014:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:15a7014:  * See the License for the specific language governing permissions and
1:15a7014:  * limitations under the License.
1:15a7014:  */
1:15a7014: 
1:21779d8: package org.apache.mahout.math;
1:21779d8: 
1:21779d8: import com.google.common.base.Preconditions;
1:21779d8: 
1:21779d8: /**
1:21779d8:  * Matrix that allows transparent row and column permutation.
1:21779d8:  */
1:21779d8: public class PivotedMatrix extends AbstractMatrix {
1:21779d8: 
1:b04eba0:   private Matrix base;
1:b04eba0:   private int[] rowPivot;
1:b04eba0:   private int[] rowUnpivot;
1:b04eba0:   private int[] columnPivot;
1:b04eba0:   private int[] columnUnpivot;
1:21779d8: 
1:21779d8:   public PivotedMatrix(Matrix base, int[] pivot) {
1:21779d8:     this(base, pivot, java.util.Arrays.copyOf(pivot, pivot.length));
1:21779d8:   }
1:21779d8:   public PivotedMatrix(Matrix base, int[] rowPivot, int[] columnPivot) {
1:95f836b:     super(base.rowSize(), base.columnSize());
1:21779d8: 
1:21779d8:     this.base = base;
1:21779d8:     this.rowPivot = rowPivot;
1:21779d8:     rowUnpivot = invert(rowPivot);
1:21779d8: 
1:21779d8:     this.columnPivot = columnPivot;
1:21779d8:     columnUnpivot = invert(columnPivot);
1:21779d8:   }
1:21779d8: 
1:21779d8:   public PivotedMatrix(Matrix base) {
1:21779d8:     this(base, identityPivot(base.rowSize()),identityPivot(base.columnSize()));
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Swaps indexes i and j.  This does both row and column permutation.
1:21779d8:    *
1:21779d8:    * @param i First index to swap.
1:21779d8:    * @param j Second index to swap.
1:21779d8:    */
1:21779d8:   public void swap(int i, int j) {
1:21779d8:     swapRows(i, j);
1:21779d8:     swapColumns(i, j);
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Swaps indexes i and j.  This does just row permutation.
1:21779d8:    *
1:21779d8:    * @param i First index to swap.
1:21779d8:    * @param j Second index to swap.
1:21779d8:    */
1:21779d8:   public void swapRows(int i, int j) {
1:21779d8:     swap(rowPivot, rowUnpivot, i, j);
1:21779d8:   }
1:21779d8: 
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Swaps indexes i and j.  This does just row permutation.
1:21779d8:    *
1:21779d8:    * @param i First index to swap.
1:21779d8:    * @param j Second index to swap.
1:21779d8:    */
1:21779d8:   public void swapColumns(int i, int j) {
1:21779d8:     swap(columnPivot, columnUnpivot, i, j);
1:21779d8:   }
1:21779d8: 
1:1499411:   private static void swap(int[] pivot, int[] unpivot, int i, int j) {
1:21779d8:     Preconditions.checkPositionIndex(i, pivot.length);
1:21779d8:     Preconditions.checkPositionIndex(j, pivot.length);
1:21779d8:     if (i != j) {
1:21779d8:       int tmp = pivot[i];
1:21779d8:       pivot[i] = pivot[j];
1:21779d8:       pivot[j] = tmp;
1:21779d8: 
1:21779d8:       unpivot[pivot[i]] = i;
1:21779d8:       unpivot[pivot[j]] = j;
1:21779d8:     }
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Assign the other vector values to the column of the receiver
1:21779d8:    *
1:21779d8:    * @param column the int row to assign
1:21779d8:    * @param other  a Vector
1:21779d8:    * @return the modified receiver
1:21779d8:    * @throws org.apache.mahout.math.CardinalityException
1:21779d8:    *          if the cardinalities differ
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Matrix assignColumn(int column, Vector other) {
1:21779d8:     // note the reversed pivoting for other
1:21779d8:     return base.assignColumn(columnPivot[column], new PermutedVectorView(other, rowUnpivot, rowPivot));
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Assign the other vector values to the row of the receiver
1:21779d8:    *
1:21779d8:    * @param row   the int row to assign
1:21779d8:    * @param other a Vector
1:21779d8:    * @return the modified receiver
1:21779d8:    * @throws org.apache.mahout.math.CardinalityException
1:21779d8:    *          if the cardinalities differ
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Matrix assignRow(int row, Vector other) {
1:21779d8:     // note the reversed pivoting for other
1:21779d8:     return base.assignRow(rowPivot[row], new PermutedVectorView(other, columnUnpivot, columnPivot));
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return the column at the given index
1:21779d8:    *
1:21779d8:    * @param column an int column index
1:21779d8:    * @return a Vector at the index
1:21779d8:    * @throws org.apache.mahout.math.IndexException
1:21779d8:    *          if the index is out of bounds
1:21779d8:    */
1:21779d8:   @Override
1:15a7014:   public Vector viewColumn(int column) {
1:21779d8:     if (column < 0 || column >= columnSize()) {
1:21779d8:       throw new IndexException(column, columnSize());
1:21779d8:     }
1:15a7014:     return new PermutedVectorView(base.viewColumn(columnPivot[column]), rowPivot, rowUnpivot);
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return the row at the given index
1:21779d8:    *
1:21779d8:    * @param row an int row index
1:21779d8:    * @return a Vector at the index
1:21779d8:    * @throws org.apache.mahout.math.IndexException
1:21779d8:    *          if the index is out of bounds
1:21779d8:    */
1:21779d8:   @Override
1:15a7014:   public Vector viewRow(int row) {
1:21779d8:     if (row < 0 || row >= rowSize()) {
1:21779d8:       throw new IndexException(row, rowSize());
1:21779d8:     }
1:15a7014:     return new PermutedVectorView(base.viewRow(rowPivot[row]), columnPivot, columnUnpivot);
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return the value at the given indexes, without checking bounds
1:21779d8:    *
1:21779d8:    * @param row    an int row index
1:21779d8:    * @param column an int column index
1:21779d8:    * @return the double at the index
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public double getQuick(int row, int column) {
1:21779d8:     return base.getQuick(rowPivot[row], columnPivot[column]);
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return an empty matrix of the same underlying class as the receiver
1:21779d8:    *
1:21779d8:    * @return a Matrix
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Matrix like() {
1:21779d8:     return new PivotedMatrix(base.like());
1:21779d8:   }
1:b04eba0: 
1:21779d8: 
1:b04eba0:   @Override
1:b04eba0:   public Matrix clone() {
1:b04eba0:     PivotedMatrix clone = (PivotedMatrix) super.clone();
1:b04eba0: 
1:b04eba0:     base = base.clone();
1:b04eba0:     rowPivot = rowPivot.clone();
1:b04eba0:     rowUnpivot = rowUnpivot.clone();
1:b04eba0:     columnPivot = columnPivot.clone();
1:b04eba0:     columnUnpivot = columnUnpivot.clone();
1:b04eba0: 
1:b04eba0:     return clone;
1:b04eba0:   }
1:b04eba0: 
1:b04eba0: 
1:21779d8:   /**
1:21779d8:    * Returns an empty matrix of the same underlying class as the receiver and of the specified
1:21779d8:    * size.
1:21779d8:    *
1:21779d8:    * @param rows    the int number of rows
1:21779d8:    * @param columns the int number of columns
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Matrix like(int rows, int columns) {
1:21779d8:     return new PivotedMatrix(base.like(rows, columns));
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Set the value at the given index, without checking bounds
1:21779d8:    *
1:21779d8:    * @param row    an int row index into the receiver
1:21779d8:    * @param column an int column index into the receiver
1:21779d8:    * @param value  a double value to set
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public void setQuick(int row, int column, double value) {
1:21779d8:     base.setQuick(rowPivot[row], columnPivot[column], value);
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return the number of values in the recipient
1:21779d8:    *
1:21779d8:    * @return an int[2] containing [row, column] count
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public int[] getNumNondefaultElements() {
1:21779d8:     return base.getNumNondefaultElements();
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return a new matrix containing the subset of the recipient
1:21779d8:    *
1:21779d8:    * @param offset an int[2] offset into the receiver
1:21779d8:    * @param size   the int[2] size of the desired result
1:21779d8:    * @return a new Matrix that is a view of the original
1:21779d8:    * @throws org.apache.mahout.math.CardinalityException
1:21779d8:    *          if the length is greater than the cardinality of the receiver
1:21779d8:    * @throws org.apache.mahout.math.IndexException
1:21779d8:    *          if the offset is negative or the offset+length is outside of the receiver
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Matrix viewPart(int[] offset, int[] size) {
1:21779d8:     return new MatrixView(this, offset, size);
1:21779d8:   }
1:21779d8: 
1:21779d8:   public int rowUnpivot(int k) {
1:21779d8:     return rowUnpivot[k];
1:21779d8:   }
1:21779d8: 
1:21779d8:   public int columnUnpivot(int k) {
1:21779d8:     return columnUnpivot[k];
1:21779d8:   }
1:21779d8: 
1:21779d8:   public int[] getRowPivot() {
1:21779d8:     return rowPivot;
1:21779d8:   }
1:21779d8: 
1:21779d8:   public int[] getInverseRowPivot() {
1:21779d8:     return rowUnpivot;
1:21779d8:   }
1:21779d8: 
1:21779d8:   public int[] getColumnPivot() {
1:21779d8:     return columnPivot;
1:21779d8:   }
1:21779d8: 
1:21779d8:   public int[] getInverseColumnPivot() {
1:21779d8:     return columnUnpivot;
1:21779d8:   }
1:21779d8: 
1:21779d8:   public Matrix getBase() {
1:21779d8:     return base;
1:21779d8:   }
1:21779d8: 
1:21779d8:   private static int[] identityPivot(int n) {
1:21779d8:     int[] pivot = new int[n];
1:21779d8:     for (int i = 0; i < n; i++) {
1:21779d8:       pivot[i] = i;
1:21779d8:     }
1:21779d8:     return pivot;
1:21779d8:   }
1:21779d8: 
1:1499411:   private static int[] invert(int[] pivot) {
1:21779d8:     int[] x = new int[pivot.length];
1:21779d8:     for (int i = 0; i < pivot.length; i++) {
1:21779d8:       x[pivot[i]] = i;
1:21779d8:     }
1:21779d8:     return x;
1:21779d8:   }
1:21779d8: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:b04eba0
/////////////////////////////////////////////////////////////////////////
1:   private Matrix base;
1:   private int[] rowPivot;
1:   private int[] rowUnpivot;
1:   private int[] columnPivot;
1:   private int[] columnUnpivot;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public Matrix clone() {
1:     PivotedMatrix clone = (PivotedMatrix) super.clone();
1: 
1:     base = base.clone();
1:     rowPivot = rowPivot.clone();
1:     rowUnpivot = rowUnpivot.clone();
1:     columnPivot = columnPivot.clone();
1:     columnUnpivot = columnUnpivot.clone();
1: 
1:     return clone;
1:   }
1: 
1: 
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1499411
/////////////////////////////////////////////////////////////////////////
0:   private final Matrix base;
0:   private final int[] rowPivot;
0:   private final int[] rowUnpivot;
0:   private final int[] columnPivot;
0:   private final int[] columnUnpivot;
/////////////////////////////////////////////////////////////////////////
1:   private static void swap(int[] pivot, int[] unpivot, int i, int j) {
/////////////////////////////////////////////////////////////////////////
1:   private static int[] invert(int[] pivot) {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:95f836b
/////////////////////////////////////////////////////////////////////////
1:     super(base.rowSize(), base.columnSize());
commit:15a7014
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:   public Vector viewColumn(int column) {
1:     return new PermutedVectorView(base.viewColumn(columnPivot[column]), rowPivot, rowUnpivot);
/////////////////////////////////////////////////////////////////////////
1:   public Vector viewRow(int row) {
1:     return new PermutedVectorView(base.viewRow(rowPivot[row]), columnPivot, columnUnpivot);
commit:21779d8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
1: import com.google.common.base.Preconditions;
1: 
1: /**
1:  * Matrix that allows transparent row and column permutation.
1:  */
1: public class PivotedMatrix extends AbstractMatrix {
0:   private Matrix base;
0:   private int[] rowPivot;
0:   private int[] rowUnpivot;
1: 
0:   private int[] columnPivot;
0:   private int[] columnUnpivot;
1: 
1:   public PivotedMatrix(Matrix base, int[] pivot) {
1:     this(base, pivot, java.util.Arrays.copyOf(pivot, pivot.length));
1:   }
1:   public PivotedMatrix(Matrix base, int[] rowPivot, int[] columnPivot) {
0:     cardinality[ROW] = base.rowSize();
0:     cardinality[COL] = base.columnSize();
1: 
1:     this.base = base;
1:     this.rowPivot = rowPivot;
1:     rowUnpivot = invert(rowPivot);
1: 
1:     this.columnPivot = columnPivot;
1:     columnUnpivot = invert(columnPivot);
1:   }
1: 
1:   public PivotedMatrix(Matrix base) {
1:     this(base, identityPivot(base.rowSize()),identityPivot(base.columnSize()));
1:   }
1: 
1:   /**
1:    * Swaps indexes i and j.  This does both row and column permutation.
1:    *
1:    * @param i First index to swap.
1:    * @param j Second index to swap.
1:    */
1:   public void swap(int i, int j) {
1:     swapRows(i, j);
1:     swapColumns(i, j);
1:   }
1: 
1:   /**
1:    * Swaps indexes i and j.  This does just row permutation.
1:    *
1:    * @param i First index to swap.
1:    * @param j Second index to swap.
1:    */
1:   public void swapRows(int i, int j) {
1:     swap(rowPivot, rowUnpivot, i, j);
1:   }
1: 
1: 
1:   /**
1:    * Swaps indexes i and j.  This does just row permutation.
1:    *
1:    * @param i First index to swap.
1:    * @param j Second index to swap.
1:    */
1:   public void swapColumns(int i, int j) {
1:     swap(columnPivot, columnUnpivot, i, j);
1:   }
1: 
0:   private void swap(int[] pivot, int[] unpivot, int i, int j) {
1:     Preconditions.checkPositionIndex(i, pivot.length);
1:     Preconditions.checkPositionIndex(j, pivot.length);
1:     if (i != j) {
1:       int tmp = pivot[i];
1:       pivot[i] = pivot[j];
1:       pivot[j] = tmp;
1: 
1:       unpivot[pivot[i]] = i;
1:       unpivot[pivot[j]] = j;
1:     }
1:   }
1: 
1:   /**
1:    * Assign the other vector values to the column of the receiver
1:    *
1:    * @param column the int row to assign
1:    * @param other  a Vector
1:    * @return the modified receiver
1:    * @throws org.apache.mahout.math.CardinalityException
1:    *          if the cardinalities differ
1:    */
1:   @Override
1:   public Matrix assignColumn(int column, Vector other) {
1:     // note the reversed pivoting for other
1:     return base.assignColumn(columnPivot[column], new PermutedVectorView(other, rowUnpivot, rowPivot));
1:   }
1: 
1:   /**
1:    * Assign the other vector values to the row of the receiver
1:    *
1:    * @param row   the int row to assign
1:    * @param other a Vector
1:    * @return the modified receiver
1:    * @throws org.apache.mahout.math.CardinalityException
1:    *          if the cardinalities differ
1:    */
1:   @Override
1:   public Matrix assignRow(int row, Vector other) {
1:     // note the reversed pivoting for other
1:     return base.assignRow(rowPivot[row], new PermutedVectorView(other, columnUnpivot, columnPivot));
1:   }
1: 
1:   /**
1:    * Return the column at the given index
1:    *
1:    * @param column an int column index
1:    * @return a Vector at the index
1:    * @throws org.apache.mahout.math.IndexException
1:    *          if the index is out of bounds
1:    */
1:   @Override
0:   public Vector getColumn(int column) {
1:     if (column < 0 || column >= columnSize()) {
1:       throw new IndexException(column, columnSize());
1:     }
0:     return new PermutedVectorView(base.getColumn(columnPivot[column]), rowPivot, rowUnpivot);
1:   }
1: 
1:   /**
1:    * Return the row at the given index
1:    *
1:    * @param row an int row index
1:    * @return a Vector at the index
1:    * @throws org.apache.mahout.math.IndexException
1:    *          if the index is out of bounds
1:    */
1:   @Override
0:   public Vector getRow(int row) {
1:     if (row < 0 || row >= rowSize()) {
1:       throw new IndexException(row, rowSize());
1:     }
0:     return new PermutedVectorView(base.getRow(rowPivot[row]), columnPivot, columnUnpivot);
1:   }
1: 
1:   /**
1:    * Return the value at the given indexes, without checking bounds
1:    *
1:    * @param row    an int row index
1:    * @param column an int column index
1:    * @return the double at the index
1:    */
1:   @Override
1:   public double getQuick(int row, int column) {
1:     return base.getQuick(rowPivot[row], columnPivot[column]);
1:   }
1: 
1:   /**
1:    * Return an empty matrix of the same underlying class as the receiver
1:    *
1:    * @return a Matrix
1:    */
1:   @Override
1:   public Matrix like() {
1:     return new PivotedMatrix(base.like());
1:   }
1: 
1:   /**
1:    * Returns an empty matrix of the same underlying class as the receiver and of the specified
1:    * size.
1:    *
1:    * @param rows    the int number of rows
1:    * @param columns the int number of columns
1:    */
1:   @Override
1:   public Matrix like(int rows, int columns) {
1:     return new PivotedMatrix(base.like(rows, columns));
1:   }
1: 
1:   /**
1:    * Set the value at the given index, without checking bounds
1:    *
1:    * @param row    an int row index into the receiver
1:    * @param column an int column index into the receiver
1:    * @param value  a double value to set
1:    */
1:   @Override
1:   public void setQuick(int row, int column, double value) {
1:     base.setQuick(rowPivot[row], columnPivot[column], value);
1:   }
1: 
1:   /**
1:    * Return the number of values in the recipient
1:    *
1:    * @return an int[2] containing [row, column] count
1:    */
1:   @Override
1:   public int[] getNumNondefaultElements() {
1:     return base.getNumNondefaultElements();
1:   }
1: 
1:   /**
1:    * Return a new matrix containing the subset of the recipient
1:    *
1:    * @param offset an int[2] offset into the receiver
1:    * @param size   the int[2] size of the desired result
1:    * @return a new Matrix that is a view of the original
1:    * @throws org.apache.mahout.math.CardinalityException
1:    *          if the length is greater than the cardinality of the receiver
1:    * @throws org.apache.mahout.math.IndexException
1:    *          if the offset is negative or the offset+length is outside of the receiver
1:    */
1:   @Override
1:   public Matrix viewPart(int[] offset, int[] size) {
1:     return new MatrixView(this, offset, size);
1:   }
1: 
1:   public int rowUnpivot(int k) {
1:     return rowUnpivot[k];
1:   }
1: 
1:   public int columnUnpivot(int k) {
1:     return columnUnpivot[k];
1:   }
1: 
1:   public int[] getRowPivot() {
1:     return rowPivot;
1:   }
1: 
1:   public int[] getInverseRowPivot() {
1:     return rowUnpivot;
1:   }
1: 
1:   public int[] getColumnPivot() {
1:     return columnPivot;
1:   }
1: 
1:   public int[] getInverseColumnPivot() {
1:     return columnUnpivot;
1:   }
1: 
1:   public Matrix getBase() {
1:     return base;
1:   }
1: 
1:   private static int[] identityPivot(int n) {
1:     int[] pivot = new int[n];
1:     for (int i = 0; i < n; i++) {
1:       pivot[i] = i;
1:     }
1:     return pivot;
1:   }
1: 
0:   private int[] invert(int[] pivot) {
1:     int[] x = new int[pivot.length];
1:     for (int i = 0; i < pivot.length; i++) {
1:       x[pivot[i]] = i;
1:     }
1:     return x;
1:   }
1: }
============================================================================