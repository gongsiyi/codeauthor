1:a66f1a8: /**
1:a66f1a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a66f1a8:  * contributor license agreements.  See the NOTICE file distributed with
1:a66f1a8:  * this work for additional information regarding copyright ownership.
1:a66f1a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a66f1a8:  * (the "License"); you may not use this file except in compliance with
1:a66f1a8:  * the License.  You may obtain a copy of the License at
1:a66f1a8:  *
1:a66f1a8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a66f1a8:  *
1:a66f1a8:  * Unless required by applicable law or agreed to in writing, software
1:a66f1a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a66f1a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a66f1a8:  * See the License for the specific language governing permissions and
1:a66f1a8:  * limitations under the License.
1:a66f1a8:  */
1:a66f1a8: 
1:a66f1a8: package org.apache.mahout.cf.taste.impl.common;
1:a66f1a8: 
1:a66f1a8: import java.util.NoSuchElementException;
1:a66f1a8: 
1:69ba194: import com.google.common.base.Preconditions;
1:69ba194: 
1:a66f1a8: /**
1:1b4e01f:  * While long[] is an Iterable, it is not an Iterable&lt;Long&gt;. This adapter class addresses that.
1:a66f1a8:  */
1:d0ef512: public final class LongPrimitiveArrayIterator implements LongPrimitiveIterator {
1:a66f1a8:   
1:a66f1a8:   private final long[] array;
1:a66f1a8:   private int position;
1:a66f1a8:   private final int max;
1:a66f1a8:   
1:a66f1a8:   /**
1:1b4e01f:    * <p>
1:131c84c:    * Creates an {@link LongPrimitiveArrayIterator} over an entire array.
1:1b4e01f:    * </p>
1:a66f1a8:    * 
1:1b4e01f:    * @param array
1:1b4e01f:    *          array to iterate over
1:a66f1a8:    */
1:a66f1a8:   public LongPrimitiveArrayIterator(long[] array) {
1:96024a7:     this.array = Preconditions.checkNotNull(array); // yeah, not going to copy the array here, for performance
1:a66f1a8:     this.position = 0;
1:a66f1a8:     this.max = array.length;
3:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public boolean hasNext() {
1:a66f1a8:     return position < max;
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public Long next() {
1:a66f1a8:     return nextLong();
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public long nextLong() {
1:a66f1a8:     if (position >= array.length) {
1:a66f1a8:       throw new NoSuchElementException();
1:a66f1a8:     }
1:a66f1a8:     return array[position++];
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public long peek() {
1:a66f1a8:     if (position >= array.length) {
1:a66f1a8:       throw new NoSuchElementException();
1:a66f1a8:     }
1:a66f1a8:     return array[position];
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   /**
1:a66f1a8:    * @throws UnsupportedOperationException
1:a66f1a8:    */
1:a66f1a8:   @Override
1:a66f1a8:   public void remove() {
1:a66f1a8:     throw new UnsupportedOperationException();
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public void skip(int n) {
1:a66f1a8:     if (n > 0) {
1:a66f1a8:       position += n;
1:a66f1a8:     }
1:a66f1a8:   }
1:a66f1a8:   
1:a66f1a8:   @Override
1:a66f1a8:   public String toString() {
1:a66f1a8:     return "LongPrimitiveArrayIterator";
1:69ba194:   }
1:a66f1a8:   
1:a66f1a8: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:131c84c
/////////////////////////////////////////////////////////////////////////
1:    * Creates an {@link LongPrimitiveArrayIterator} over an entire array.
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:96024a7
/////////////////////////////////////////////////////////////////////////
1:     this.array = Preconditions.checkNotNull(array); // yeah, not going to copy the array here, for performance
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:69ba194
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: 
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkArgument(array != null, "array is null");
/////////////////////////////////////////////////////////////////////////
1: }
commit:0f033b2
commit:d0ef512
/////////////////////////////////////////////////////////////////////////
1: public final class LongPrimitiveArrayIterator implements LongPrimitiveIterator {
commit:a66f1a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common;
1: 
1: import java.util.NoSuchElementException;
1: 
1: /**
0:  * While long[] is an Iterable, it is not an Iterable&lt;Long&gt;. This adapter class
0:  * addresses that.
1:  */
0: public final class LongPrimitiveArrayIterator implements LongPrimitiveIterator, SkippingIterator<Long> {
1: 
1:   private final long[] array;
1:   private int position;
1:   private final int max;
1: 
1:   /**
0:    * <p>Creates an {@link LongPrimitiveArrayIterator} over an entire array.</p>
1:    *
0:    * @param array array to iterate over
1:    */
1:   public LongPrimitiveArrayIterator(long[] array) {
0:     if (array == null) {
0:       throw new IllegalArgumentException("array is null");
1:     }
0:     this.array = array; // yeah, not going to copy the array here, for performance
1:     this.position = 0;
1:     this.max = array.length;
1:   }
1: 
1:   @Override
1:   public boolean hasNext() {
1:     return position < max;
1:   }
1: 
1:   @Override
1:   public Long next() {
1:     return nextLong();
1:   }
1: 
1:   @Override
1:   public long nextLong() {
1:     if (position >= array.length) {
1:       throw new NoSuchElementException();
1:     }
1:     return array[position++];
1:   }
1: 
1:   @Override
1:   public long peek() {
1:     if (position >= array.length) {
1:       throw new NoSuchElementException();
1:     }
1:     return array[position];
1:   }
1: 
1:   /**
1:    * @throws UnsupportedOperationException
1:    */
1:   @Override
1:   public void remove() {
1:     throw new UnsupportedOperationException();
1:   }
1: 
1:   @Override
1:   public void skip(int n) {
1:     if (n > 0) {
1:       position += n;
1:     }
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     return "LongPrimitiveArrayIterator";
1:   }
1: 
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
1:  * While long[] is an Iterable, it is not an Iterable&lt;Long&gt;. This adapter class addresses that.
0:   
0:   
1:    * <p>
0:    * Creates an {@link LongPrimitiveArrayIterator} over an entire array.
1:    * </p>
0:    * 
1:    * @param array
1:    *          array to iterate over
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
============================================================================