1:49697cc: /**
1:49697cc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:49697cc:  * contributor license agreements.  See the NOTICE file distributed with
1:49697cc:  * this work for additional information regarding copyright ownership.
1:49697cc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:49697cc:  * (the "License"); you may not use this file except in compliance with
1:49697cc:  * the License.  You may obtain a copy of the License at
1:49697cc:  *
1:49697cc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:49697cc:  *
1:49697cc:  * Unless required by applicable law or agreed to in writing, software
1:49697cc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:49697cc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:49697cc:  * See the License for the specific language governing permissions and
1:49697cc:  * limitations under the License.
1:49697cc:  */
9:49697cc: 
1:49697cc: package org.apache.mahout.cf.taste.impl.model;
1:49697cc: 
1:543213b: import org.apache.mahout.cf.taste.impl.common.AbstractLongPrimitiveIterator;
1:1b4e01f: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:49697cc: 
1:543213b: final class PlusAnonymousUserLongPrimitiveIterator extends AbstractLongPrimitiveIterator {
1:1b4e01f:   
1:49697cc:   private final LongPrimitiveIterator delegate;
1:49697cc:   private final long extraDatum;
1:49697cc:   private boolean datumConsumed;
1:1b4e01f:   
1:49697cc:   PlusAnonymousUserLongPrimitiveIterator(LongPrimitiveIterator delegate, long extraDatum) {
1:49697cc:     this.delegate = delegate;
1:49697cc:     this.extraDatum = extraDatum;
1:49697cc:     datumConsumed = false;
1:49697cc:   }
1:1b4e01f:   
1:49697cc:   @Override
1:49697cc:   public long nextLong() {
1:49697cc:     if (datumConsumed) {
1:49697cc:       return delegate.nextLong();
1:49697cc:     } else {
1:49697cc:       if (delegate.hasNext()) {
1:49697cc:         long delegateNext = delegate.peek();
1:49697cc:         if (extraDatum <= delegateNext) {
1:49697cc:           datumConsumed = true;
1:49697cc:           return extraDatum;
1:49697cc:         } else {
1:49697cc:           return delegate.next();
1:49697cc:         }
1:49697cc:       } else {
1:49697cc:         datumConsumed = true;
1:49697cc:         return extraDatum;
1:49697cc:       }
1:49697cc:     }
1:49697cc:   }
1:1b4e01f:   
1:49697cc:   @Override
1:49697cc:   public long peek() {
1:49697cc:     if (datumConsumed) {
1:49697cc:       return delegate.peek();
1:49697cc:     } else {
1:49697cc:       if (delegate.hasNext()) {
1:49697cc:         long delegateNext = delegate.peek();
1:49697cc:         if (extraDatum <= delegateNext) {
1:49697cc:           return extraDatum;
1:49697cc:         } else {
1:49697cc:           return delegateNext;
1:49697cc:         }
1:49697cc:       } else {
1:49697cc:         return extraDatum;
1:49697cc:       }
1:49697cc:     }
1:49697cc:   }
1:1b4e01f:   
1:49697cc:   @Override
1:49697cc:   public boolean hasNext() {
1:49697cc:     return !datumConsumed || delegate.hasNext();
1:49697cc:   }
1:1b4e01f:   
1:49697cc:   @Override
1:543213b:   public void remove() {
1:543213b:     throw new UnsupportedOperationException();
1:49697cc:   }
1:1b4e01f:   
1:49697cc:   @Override
1:543213b:   public void skip(int n) {
1:543213b:     for (int i = 0; i < n; i++) {
1:543213b:       nextLong();
1:543213b:     }
1:49697cc:   }
1:1b4e01f:   
1:49697cc: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Robin Anil
-------------------------------------------------------------------------------
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:   
1:   
1:   
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   
1:   
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:543213b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.AbstractLongPrimitiveIterator;
1: final class PlusAnonymousUserLongPrimitiveIterator extends AbstractLongPrimitiveIterator {
/////////////////////////////////////////////////////////////////////////
1:   public void remove() {
1:     throw new UnsupportedOperationException();
1:   public void skip(int n) {
1:     for (int i = 0; i < n; i++) {
1:       nextLong();
1:     }
commit:49697cc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.model;
1: 
0: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: 
0: final class PlusAnonymousUserLongPrimitiveIterator implements LongPrimitiveIterator {
1: 
1:   private final LongPrimitiveIterator delegate;
1:   private final long extraDatum;
1:   private boolean datumConsumed;
1: 
1:   PlusAnonymousUserLongPrimitiveIterator(LongPrimitiveIterator delegate, long extraDatum) {
1:     this.delegate = delegate;
1:     this.extraDatum = extraDatum;
1:     datumConsumed = false;
1:   }
1: 
1:   @Override
1:   public long nextLong() {
1:     if (datumConsumed) {
1:       return delegate.nextLong();
1:     } else {
1:       if (delegate.hasNext()) {
1:         long delegateNext = delegate.peek();
1:         if (extraDatum <= delegateNext) {
1:           datumConsumed = true;
1:           return extraDatum;
1:         } else {
1:           return delegate.next();
1:         }
1:       } else {
1:         datumConsumed = true;
1:         return extraDatum;
1:       }
1:     }
1:   }
1: 
1:   @Override
1:   public long peek() {
1:     if (datumConsumed) {
1:       return delegate.peek();
1:     } else {
1:       if (delegate.hasNext()) {
1:         long delegateNext = delegate.peek();
1:         if (extraDatum <= delegateNext) {
1:           return extraDatum;
1:         } else {
1:           return delegateNext;
1:         }
1:       } else {
1:         return extraDatum;
1:       }
1:     }
1:   }
1: 
1:   @Override
1:   public boolean hasNext() {
1:     return !datumConsumed || delegate.hasNext();
1:   }
1: 
1:   @Override
0:   public Long next() {
0:     return nextLong();
1:   }
1: 
1:   @Override
0:   public void remove() {
0:     throw new UnsupportedOperationException();
1:   }
1: 
1: }
============================================================================