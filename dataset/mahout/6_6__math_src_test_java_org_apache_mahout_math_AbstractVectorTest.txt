1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:3d4e6e2: package org.apache.mahout.math;
3:3d4e6e2: 
1:be94533: import java.util.Iterator;
1:be94533: import java.util.Random;
1:be94533: 
1:0833411: import com.google.common.collect.Iterables;
1:3d4e6e2: import org.apache.mahout.common.RandomUtils;
1:dc62944: import org.apache.mahout.math.Vector.Element;
1:aebdfaf: import org.apache.mahout.math.function.Functions;
1:3d4e6e2: import org.apache.mahout.math.jet.random.Normal;
1:1b50c19: import org.apache.mahout.math.random.MultiNormal;
1:1e3f7ae: import org.junit.Before;
1:3d4e6e2: import org.junit.Test;
1:3d4e6e2: 
1:3d4e6e2: /**
1:3d4e6e2:  * Makes sure that a vector under test acts the same as a DenseVector or RandomAccessSparseVector
1:8b194c8:  * (according to whether it is dense or sparse).  Most operations need to be done within a reasonable
1:3d4e6e2:  * tolerance.
1:3d4e6e2:  *
1:3d4e6e2:  * The idea is that a new vector implementation can extend AbstractVectorTest to get pretty high
1:3d4e6e2:  * confidence that it is working correctly.
1:3d4e6e2:  */
1:3d4e6e2: public abstract class AbstractVectorTest<T extends Vector> extends MahoutTestCase {
1:aebdfaf: 
1:8b6a26a:   private static final double FUZZ = 1.0e-13;
1:1e3f7ae:   private static final double[] values = {1.1, 2.2, 3.3};
1:1e3f7ae:   private static final double[] gold = {0.0, 1.1, 0.0, 2.2, 0.0, 3.3, 0.0};
1:1e3f7ae:   private Vector test;
1:1e3f7ae: 
1:1e3f7ae:   private static void checkIterator(Iterator<Vector.Element> nzIter, double[] values) {
1:1e3f7ae:     while (nzIter.hasNext()) {
1:1e3f7ae:       Vector.Element elt = nzIter.next();
1:1e3f7ae:       assertEquals(elt.index() + " Value: " + values[elt.index()]
1:1e3f7ae:           + " does not equal: " + elt.get(), values[elt.index()], elt.get(), 0.0);
1:1b50c19:     }
1:1e3f7ae:   }
1:0833411: 
1:3d4e6e2:   public abstract T vectorToTest(int size);
1:0833411: 
1:3d4e6e2:   @Test
1:3d4e6e2:   public void testSimpleOps() {
1:dc62944: 
1:8b6a26a:     T v0 = vectorToTest(20);
1:8b6a26a:     Random gen = RandomUtils.getRandom();
1:3d4e6e2:     Vector v1 = v0.assign(new Normal(0, 1, gen));
1:1e3f7ae: 
1:1e3f7ae:     // verify that v0 and v1 share and are identical
1:3d4e6e2:     assertEquals(v0.get(12), v1.get(12), 0);
1:3d4e6e2:     v0.set(12, gen.nextDouble());
1:3d4e6e2:     assertEquals(v0.get(12), v1.get(12), 0);
1:8b6a26a:     assertSame(v0, v1);
1:aebdfaf: 
1:1e3f7ae:     Vector v2 = vectorToTest(20).assign(new Normal(0, 1, gen));
1:3d4e6e2:     Vector dv1 = new DenseVector(v1);
1:3d4e6e2:     Vector dv2 = new DenseVector(v2);
1:3d4e6e2:     Vector sv1 = new RandomAccessSparseVector(v1);
1:3d4e6e2:     Vector sv2 = new RandomAccessSparseVector(v2);
1:3d4e6e2: 
1:aebdfaf:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(v2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(dv2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(sv2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(sv1.plus(v2)), FUZZ);
1:3d4e6e2: 
1:aebdfaf:     assertEquals(0, dv1.times(dv2).getDistanceSquared(v1.times(v2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.times(dv2).getDistanceSquared(v1.times(dv2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.times(dv2).getDistanceSquared(v1.times(sv2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.times(dv2).getDistanceSquared(sv1.times(v2)), FUZZ);
1:aebdfaf: 
1:aebdfaf:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(v2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(dv2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(sv2)), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(sv1.minus(v2)), FUZZ);
1:3d4e6e2: 
1:3d4e6e2:     double z = gen.nextDouble();
1:8b6a26a:     assertEquals(0, dv1.divide(z).getDistanceSquared(v1.divide(z)), 1.0e-12);
1:8b6a26a:     assertEquals(0, dv1.times(z).getDistanceSquared(v1.times(z)), 1.0e-12);
1:8b6a26a:     assertEquals(0, dv1.plus(z).getDistanceSquared(v1.plus(z)), 1.0e-12);
1:3d4e6e2: 
1:aebdfaf:     assertEquals(dv1.dot(dv2), v1.dot(v2), FUZZ);
1:aebdfaf:     assertEquals(dv1.dot(dv2), v1.dot(dv2), FUZZ);
1:aebdfaf:     assertEquals(dv1.dot(dv2), v1.dot(sv2), FUZZ);
1:aebdfaf:     assertEquals(dv1.dot(dv2), sv1.dot(v2), FUZZ);
1:aebdfaf:     assertEquals(dv1.dot(dv2), dv1.dot(v2), FUZZ);
1:3d4e6e2: 
1:aebdfaf:     // first attempt has no cached distances
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(v2), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), dv1.getDistanceSquared(v2), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), sv1.getDistanceSquared(v2), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(dv2), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(sv2), FUZZ);
1:3d4e6e2: 
1:aebdfaf:     // now repeat with cached sizes
1:aebdfaf:     assertEquals(dv1.getLengthSquared(), v1.getLengthSquared(), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(v2), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), dv1.getDistanceSquared(v2), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), sv1.getDistanceSquared(v2), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(dv2), FUZZ);
1:aebdfaf:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(sv2), FUZZ);
1:aebdfaf: 
1:aebdfaf:     assertEquals(dv1.minValue(), v1.minValue(), FUZZ);
1:3d4e6e2:     assertEquals(dv1.minValueIndex(), v1.minValueIndex());
1:3d4e6e2: 
1:aebdfaf:     assertEquals(dv1.maxValue(), v1.maxValue(), FUZZ);
1:3d4e6e2:     assertEquals(dv1.maxValueIndex(), v1.maxValueIndex());
1:3d4e6e2: 
1:3d4e6e2:     Vector nv1 = v1.normalize();
1:3d4e6e2: 
1:aebdfaf:     assertEquals(0, dv1.getDistanceSquared(v1), FUZZ);
1:aebdfaf:     assertEquals(1, nv1.norm(2), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.normalize().getDistanceSquared(nv1), FUZZ);
1:3d4e6e2: 
1:3d4e6e2:     nv1 = v1.normalize(1);
1:aebdfaf:     assertEquals(0, dv1.getDistanceSquared(v1), FUZZ);
1:aebdfaf:     assertEquals(1, nv1.norm(1), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.normalize(1).getDistanceSquared(nv1), FUZZ);
1:3d4e6e2: 
1:aebdfaf:     assertEquals(dv1.norm(0), v1.norm(0), FUZZ);
1:aebdfaf:     assertEquals(dv1.norm(1), v1.norm(1), FUZZ);
1:aebdfaf:     assertEquals(dv1.norm(1.5), v1.norm(1.5), FUZZ);
1:aebdfaf:     assertEquals(dv1.norm(2), v1.norm(2), FUZZ);
1:3d4e6e2: 
1:aebdfaf:     assertEquals(dv1.zSum(), v1.zSum(), FUZZ);
1:3d4e6e2: 
1:aebdfaf:     assertEquals(3.1 * v1.size(), v1.assign(3.1).zSum(), FUZZ);
1:aebdfaf:     assertEquals(0, v1.plus(-3.1).norm(1), FUZZ);
1:aebdfaf:     v1.assign(dv1);
1:aebdfaf:     assertEquals(0, v1.getDistanceSquared(dv1), FUZZ);
1:aebdfaf: 
1:aebdfaf:     assertEquals(dv1.zSum() - dv1.size() * 3.4, v1.assign(Functions.minus(3.4)).zSum(), FUZZ);
1:aebdfaf:     assertEquals(dv1.zSum() - dv1.size() * 4.5, v1.assign(Functions.MINUS, 1.1).zSum(), FUZZ);
1:aebdfaf:     v1.assign(dv1);
1:aebdfaf: 
1:aebdfaf:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.assign(v2, Functions.MINUS)), FUZZ);
1:aebdfaf:     v1.assign(dv1);
1:aebdfaf: 
1:aebdfaf:     assertEquals(dv1.norm(2), Math.sqrt(v1.aggregate(Functions.PLUS, Functions.pow(2))), FUZZ);
1:aebdfaf:     assertEquals(dv1.dot(dv2), v1.aggregate(v2, Functions.PLUS, Functions.MULT), FUZZ);
1:aebdfaf: 
1:aebdfaf:     assertEquals(dv1.viewPart(5, 10).zSum(), v1.viewPart(5, 10).zSum(), FUZZ);
1:aebdfaf: 
1:aebdfaf:     Vector v3 = v1.clone();
1:acda70b: 
1:acda70b:     // must be the right type ... tricky to tell that in the face of type erasure
1:acda70b:     assertTrue(v0.getClass().isAssignableFrom(v3.getClass()));
1:acda70b:     assertTrue(v3.getClass().isAssignableFrom(v0.getClass()));
1:acda70b: 
1:aebdfaf:     assertEquals(0, v1.getDistanceSquared(v3), FUZZ);
1:8b6a26a:     assertNotSame(v1, v3);
1:aebdfaf:     v3.assign(0);
1:aebdfaf:     assertEquals(0, dv1.getDistanceSquared(v1), FUZZ);
1:aebdfaf:     assertEquals(0, v3.getLengthSquared(), FUZZ);
1:aebdfaf: 
1:aebdfaf:     dv1.assign(Functions.ABS);
1:aebdfaf:     v1.assign(Functions.ABS);
1:aebdfaf:     assertEquals(0, dv1.logNormalize().getDistanceSquared(v1.logNormalize()), FUZZ);
1:aebdfaf:     assertEquals(0, dv1.logNormalize(1.5).getDistanceSquared(v1.logNormalize(1.5)), FUZZ);
1:3d4e6e2: 
1:3d4e6e2:     // aggregate
1:3d4e6e2: 
1:3d4e6e2:     // cross,
1:3d4e6e2: 
1:3d4e6e2:     // getNumNondefaultElements
1:3d4e6e2: 
1:dc62944:     for (Vector.Element element : v1.all()) {
1:3d4e6e2:       assertEquals(dv1.get(element.index()), element.get(), 0);
1:3d4e6e2:       assertEquals(dv1.get(element.index()), v1.get(element.index()), 0);
1:3d4e6e2:       assertEquals(dv1.get(element.index()), v1.getQuick(element.index()), 0);
1:1e3f7ae:     }
1:aebdfaf: 
1:aebdfaf: 
2:3d4e6e2:   }
1:3d4e6e2: 
1:1e3f7ae:   abstract Vector generateTestVector(int cardinality);
1:1e3f7ae: 
1:1e3f7ae:   Vector getTestVector() {
1:1e3f7ae:     return test;
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Override
1:1e3f7ae:   @Before
1:1e3f7ae:   public void setUp() throws Exception {
1:1e3f7ae:     super.setUp();
1:1e3f7ae:     test = generateTestVector(2 * values.length + 1);
1:1e3f7ae:     for (int i = 0; i < values.length; i++) {
1:be94533:       test.set(2 * i + 1, values[i]);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testCardinality() {
1:1e3f7ae:     assertEquals("size", 7, test.size());
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testIterator() {
1:dc62944:     Iterator<Vector.Element> iterator = test.nonZeroes().iterator();
1:1e3f7ae:     checkIterator(iterator, gold);
1:1e3f7ae: 
1:dc62944:     iterator = test.all().iterator();
1:1e3f7ae:     checkIterator(iterator, gold);
1:1e3f7ae: 
1:1e3f7ae:     double[] doubles = {0.0, 5.0, 0, 3.0};
1:1e3f7ae:     RandomAccessSparseVector zeros = new RandomAccessSparseVector(doubles.length);
1:1e3f7ae:     for (int i = 0; i < doubles.length; i++) {
1:1e3f7ae:       zeros.setQuick(i, doubles[i]);
1:1e3f7ae:     }
1:1e3f7ae:     iterator = zeros.iterateNonZero();
1:1e3f7ae:     checkIterator(iterator, doubles);
1:1e3f7ae:     iterator = zeros.iterator();
1:1e3f7ae:     checkIterator(iterator, doubles);
1:1e3f7ae: 
1:1e3f7ae:     doubles = new double[]{0.0, 0.0, 0, 0.0};
1:1e3f7ae:     zeros = new RandomAccessSparseVector(doubles.length);
1:1e3f7ae:     for (int i = 0; i < doubles.length; i++) {
1:1e3f7ae:       zeros.setQuick(i, doubles[i]);
1:1e3f7ae:     }
1:1e3f7ae:     iterator = zeros.iterateNonZero();
1:1e3f7ae:     checkIterator(iterator, doubles);
1:1e3f7ae:     iterator = zeros.iterator();
1:1e3f7ae:     checkIterator(iterator, doubles);
1:1e3f7ae: 
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testIteratorSet() {
1:1e3f7ae:     Vector clone = test.clone();
1:dc62944:     for (Element e : clone.nonZeroes()) {
1:1e3f7ae:       e.set(e.get() * 2.0);
1:1e3f7ae:     }
1:dc62944:     for (Element e : clone.nonZeroes()) {
1:1e3f7ae:       assertEquals(test.get(e.index()) * 2.0, e.get(), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:     clone = test.clone();
1:dc62944:     for (Element e : clone.all()) {
1:1e3f7ae:       e.set(e.get() * 2.0);
1:1e3f7ae:     }
1:dc62944:     for (Element e : clone.all()) {
1:1e3f7ae:       assertEquals(test.get(e.index()) * 2.0, e.get(), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testCopy() {
1:1e3f7ae:     Vector copy = test.clone();
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       assertEquals("copy [" + i + ']', test.get(i), copy.get(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testGet() {
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, test.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("get [" + i + ']', values[i/2], test.get(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = IndexException.class)
1:1e3f7ae:   public void testGetOver() {
1:1e3f7ae:     test.get(test.size());
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = IndexException.class)
1:1e3f7ae:   public void testGetUnder() {
1:1e3f7ae:     test.get(-1);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testSet() {
1:1e3f7ae:     test.set(3, 4.5);
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, test.get(i), EPSILON);
1:1e3f7ae:       } else if (i == 3) {
1:1e3f7ae:         assertEquals("set [" + i + ']', 4.5, test.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("set [" + i + ']', values[i/2], test.get(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testSize() {
1:1e3f7ae:     assertEquals("size", 3, test.getNumNondefaultElements());
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testViewPart() {
1:1e3f7ae:     Vector part = test.viewPart(1, 2);
1:1e3f7ae:     assertEquals("part size", 2, part.getNumNondefaultElements());
1:1e3f7ae:     for (int i = 0; i < part.size(); i++) {
1:1e3f7ae:       assertEquals("part[" + i + ']', test.get(i+1), part.get(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = IndexException.class)
1:1e3f7ae:   public void testViewPartUnder() {
1:1e3f7ae:     test.viewPart(-1, values.length);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = IndexException.class)
1:1e3f7ae:   public void testViewPartOver() {
1:1e3f7ae:     test.viewPart(2, 7);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = IndexException.class)
1:1e3f7ae:   public void testViewPartCardinality() {
1:1e3f7ae:     test.viewPart(1, 8);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testSparseDoubleVectorInt() {
1:1e3f7ae:     Vector val = new RandomAccessSparseVector(4);
1:1e3f7ae:     assertEquals("size", 4, val.size());
1:1e3f7ae:     for (int i = 0; i < 4; i++) {
1:1e3f7ae:       assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testDot() {
1:1e3f7ae:     double res = test.dot(test);
1:1e3f7ae:     double expected = 3.3 * 3.3 + 2.2 * 2.2 + 1.1 * 1.1;
1:1e3f7ae:     assertEquals("dot", expected, res, EPSILON);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testDot2() {
1:1e3f7ae:     Vector test2 = test.clone();
1:1e3f7ae:     test2.set(1, 0.0);
1:1e3f7ae:     test2.set(3, 0.0);
1:1e3f7ae:     assertEquals(3.3 * 3.3, test2.dot(test), EPSILON);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = CardinalityException.class)
1:1e3f7ae:   public void testDotCardinality() {
1:1e3f7ae:     test.dot(new DenseVector(test.size() + 1));
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testNormalize() {
1:1e3f7ae:     Vector val = test.normalize();
1:1e3f7ae:     double mag = Math.sqrt(1.1 * 1.1 + 2.2 * 2.2 + 3.3 * 3.3);
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("dot", values[i/2] / mag, val.get(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testMinus() {
1:1e3f7ae:     Vector val = test.minus(test);
1:1e3f7ae:     assertEquals("size", test.size(), val.size());
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae: 
1:1e3f7ae:     val = test.minus(test).minus(test);
1:1e3f7ae:     assertEquals("cardinality", test.size(), val.size());
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       assertEquals("get [" + i + ']', 0.0, val.get(i) + test.get(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae: 
1:1e3f7ae:     Vector val1 = test.plus(1);
1:1e3f7ae:     val = val1.minus(test);
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       assertEquals("get [" + i + ']', 1.0, val.get(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae: 
1:1e3f7ae:     val1 = test.plus(-1);
1:1e3f7ae:     val = val1.minus(test);
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       assertEquals("get [" + i + ']', -1.0, val.get(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testPlusDouble() {
1:1e3f7ae:     Vector val = test.plus(1);
1:1e3f7ae:     assertEquals("size", test.size(), val.size());
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 1.0, val.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("get [" + i + ']', values[i/2] + 1.0, val.get(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testPlusVector() {
1:1e3f7ae:     Vector val = test.plus(test);
1:1e3f7ae:     assertEquals("size", test.size(), val.size());
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("get [" + i + ']', values[i/2] * 2.0, val.get(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = CardinalityException.class)
1:1e3f7ae:   public void testPlusVectorCardinality() {
1:1e3f7ae:     test.plus(new DenseVector(test.size() + 1));
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testTimesDouble() {
1:1e3f7ae:     Vector val = test.times(3);
1:1e3f7ae:     assertEquals("size", test.size(), val.size());
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("get [" + i + ']', values[i/2] * 3.0, val.get(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testDivideDouble() {
1:1e3f7ae:     Vector val = test.divide(3);
1:1e3f7ae:     assertEquals("size", test.size(), val.size());
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("get [" + i + ']', values[i/2] / 3.0, val.get(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testTimesVector() {
1:1e3f7ae:     Vector val = test.times(test);
1:1e3f7ae:     assertEquals("size", test.size(), val.size());
1:1e3f7ae:     for (int i = 0; i < test.size(); i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("get [" + i + ']', values[i/2] * values[i/2], val.get(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = CardinalityException.class)
1:1e3f7ae:   public void testTimesVectorCardinality() {
1:1e3f7ae:     test.times(new DenseVector(test.size() + 1));
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testZSum() {
1:1e3f7ae:     double expected = 0;
1:1e3f7ae:     for (double value : values) {
1:1e3f7ae:       expected += value;
1:1e3f7ae:     }
1:1e3f7ae:     assertEquals("wrong zSum", expected, test.zSum(), EPSILON);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testGetDistanceSquared() {
1:1e3f7ae:     Vector other = new RandomAccessSparseVector(test.size());
1:1e3f7ae:     other.set(1, -2);
1:1e3f7ae:     other.set(2, -5);
1:1e3f7ae:     other.set(3, -9);
1:1e3f7ae:     other.set(4, 1);
1:1e3f7ae:     double expected = test.minus(other).getLengthSquared();
1:1e3f7ae:     assertTrue("a.getDistanceSquared(b) != a.minus(b).getLengthSquared",
1:1e3f7ae:                Math.abs(expected - test.getDistanceSquared(other)) < 10.0E-7);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testAssignDouble() {
1:1e3f7ae:     test.assign(0);
1:1e3f7ae:     for (int i = 0; i < values.length; i++) {
1:1e3f7ae:       assertEquals("value[" + i + ']', 0.0, test.getQuick(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testAssignDoubleArray() {
1:1e3f7ae:     double[] array = new double[test.size()];
1:1e3f7ae:     test.assign(array);
1:1e3f7ae:     for (int i = 0; i < values.length; i++) {
1:1e3f7ae:       assertEquals("value[" + i + ']', 0.0, test.getQuick(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = CardinalityException.class)
1:1e3f7ae:   public void testAssignDoubleArrayCardinality() {
1:1e3f7ae:     double[] array = new double[test.size() + 1];
1:1e3f7ae:     test.assign(array);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testAssignVector() {
1:1e3f7ae:     Vector other = new DenseVector(test.size());
1:1e3f7ae:     test.assign(other);
1:1e3f7ae:     for (int i = 0; i < values.length; i++) {
1:1e3f7ae:       assertEquals("value[" + i + ']', 0.0, test.getQuick(i), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test(expected = CardinalityException.class)
1:1e3f7ae:   public void testAssignVectorCardinality() {
1:1e3f7ae:     Vector other = new DenseVector(test.size() - 1);
1:1e3f7ae:     test.assign(other);
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testAssignUnaryFunction() {
1:1e3f7ae:     test.assign(Functions.NEGATE);
1:1e3f7ae:     for (int i = 1; i < values.length; i += 2) {
1:1e3f7ae:       assertEquals("value[" + i + ']', -values[i], test.getQuick(i+2), EPSILON);
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testAssignBinaryFunction() {
1:1e3f7ae:     test.assign(test, Functions.PLUS);
1:1e3f7ae:     for (int i = 0; i < values.length; i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, test.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("value[" + i + ']', 2 * values[i - 1], test.getQuick(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testAssignBinaryFunction2() {
1:1e3f7ae:     test.assign(Functions.plus(4));
1:1e3f7ae:     for (int i = 0; i < values.length; i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 4.0, test.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("value[" + i + ']', values[i - 1] + 4, test.getQuick(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testAssignBinaryFunction3() {
1:1e3f7ae:     test.assign(Functions.mult(4));
1:1e3f7ae:     for (int i = 0; i < values.length; i++) {
1:1e3f7ae:       if (i % 2 == 0) {
1:1e3f7ae:         assertEquals("get [" + i + ']', 0.0, test.get(i), EPSILON);
1:1e3f7ae:       } else {
1:1e3f7ae:         assertEquals("value[" + i + ']', values[i - 1] * 4, test.getQuick(i), EPSILON);
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testLike() {
1:1e3f7ae:     Vector other = test.like();
1:1e3f7ae:     assertTrue("not like", test.getClass().isAssignableFrom(other.getClass()));
1:1e3f7ae:     assertEquals("size", test.size(), other.size());
1:1e3f7ae:   }
1:1e3f7ae: 
1:1e3f7ae:   @Test
1:1e3f7ae:   public void testCrossProduct() {
1:1e3f7ae:     Matrix result = test.cross(test);
1:1e3f7ae:     assertEquals("row size", test.size(), result.rowSize());
1:1e3f7ae:     assertEquals("col size", test.size(), result.columnSize());
1:1e3f7ae:     for (int row = 0; row < result.rowSize(); row++) {
1:1e3f7ae:       for (int col = 0; col < result.columnSize(); col++) {
1:1e3f7ae:         assertEquals("cross[" + row + "][" + col + ']', test.getQuick(row)
1:1e3f7ae:             * test.getQuick(col), result.getQuick(row, col), EPSILON);
1:1b50c19: 
1:1b50c19:       }
1:1b50c19:     }
1:1b50c19:   }
1:1b50c19: 
1:1b50c19:   @Test
1:1b50c19:   public void testIterators() {
1:1b50c19:     final T v0 = vectorToTest(20);
1:1b50c19: 
1:1b50c19:     double sum = 0;
1:1b50c19:     int elements = 0;
1:1b50c19:     int nonZero = 0;
1:dc62944:     for (Element element : v0.all()) {
1:1b50c19:       elements++;
1:1b50c19:       sum += element.get();
1:1b50c19:       if (element.get() != 0) {
1:1b50c19:         nonZero++;
1:1b50c19:       }
1:1b50c19:     }
1:1b50c19: 
1:0833411:     int nonZeroIterated = Iterables.size(v0.nonZeroes());
1:1b50c19:     assertEquals(20, elements);
1:1b50c19:     assertEquals(v0.size(), elements);
1:1b50c19:     assertEquals(nonZeroIterated, nonZero);
1:1b50c19:     assertEquals(v0.zSum(), sum, 0);
1:1b50c19:   }
1:1b50c19: 
1:1b50c19:   @Test
1:1b50c19:   public void testSmallDistances() {
1:8396a27:     for (double fuzz : new double[]{1.0e-5, 1.0e-6, 1.0e-7, 1.0e-8, 1.0e-9, 1.0e-10}) {
1:1b50c19:       MultiNormal x = new MultiNormal(fuzz, new ConstantVector(0, 20));
1:1b50c19:       for (int i = 0; i < 10000; i++) {
1:1b50c19:         final T v1 = vectorToTest(20);
1:1b50c19:         Vector v2 = v1.plus(x.sample());
1:1b50c19:         if (1 + fuzz * fuzz > 1) {
1:1b50c19:           String msg = String.format("fuzz = %.1g, >", fuzz);
1:1b50c19:           assertTrue(msg, v1.getDistanceSquared(v2) > 0);
1:1b50c19:           assertTrue(msg, v2.getDistanceSquared(v1) > 0);
1:1b50c19:         } else {
1:1b50c19:           String msg = String.format("fuzz = %.1g, >=", fuzz);
1:1b50c19:           assertTrue(msg, v1.getDistanceSquared(v2) >= 0);
1:1b50c19:           assertTrue(msg, v2.getDistanceSquared(v1) >= 0);
1:1b50c19:         }
1:1e3f7ae:       }
1:1e3f7ae:     }
1:1e3f7ae:   }
1:3d4e6e2: 
1:3d4e6e2: 
1:0833411:   public void testToString() {
1:0833411:     Vector w;
1:0833411: 
1:0833411:     w = generateTestVector(20);
1:0833411:     w.set(0, 1.1);
1:0833411:     w.set(13, 100500.);
1:0833411:     w.set(19, 3.141592);
1:0833411:     assertEquals("{0:1.1,13:100500.0,19:3.141592}", w.toString());
1:0833411: 
1:0833411:     w = generateTestVector(12);
1:0833411:     w.set(10, 0.1);
1:0833411:     assertEquals("{10:0.1}", w.toString());
1:0833411: 
1:0833411:     w = generateTestVector(12);
1:0833411:     assertEquals("{}", w.toString());
1:0833411:   }
1:3d4e6e2: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:8396a27
/////////////////////////////////////////////////////////////////////////
1:     for (double fuzz : new double[]{1.0e-5, 1.0e-6, 1.0e-7, 1.0e-8, 1.0e-9, 1.0e-10}) {
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1:   private static final double FUZZ = 1.0e-13;
1:     T v0 = vectorToTest(20);
1:     Random gen = RandomUtils.getRandom();
1:     assertSame(v0, v1);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, dv1.divide(z).getDistanceSquared(v1.divide(z)), 1.0e-12);
1:     assertEquals(0, dv1.times(z).getDistanceSquared(v1.times(z)), 1.0e-12);
1:     assertEquals(0, dv1.plus(z).getDistanceSquared(v1.plus(z)), 1.0e-12);
/////////////////////////////////////////////////////////////////////////
1:     assertNotSame(v1, v3);
author:smarthi
-------------------------------------------------------------------------------
commit:0833411
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
1:     int nonZeroIterated = Iterables.size(v0.nonZeroes());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:   public void testToString() {
1:     Vector w;
1: 
1:     w = generateTestVector(20);
1:     w.set(0, 1.1);
1:     w.set(13, 100500.);
1:     w.set(19, 3.141592);
1:     assertEquals("{0:1.1,13:100500.0,19:3.141592}", w.toString());
1: 
1:     w = generateTestVector(12);
1:     w.set(10, 0.1);
1:     assertEquals("{10:0.1}", w.toString());
1: 
1:     w = generateTestVector(12);
1:     assertEquals("{}", w.toString());
1:   }
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:8b194c8
/////////////////////////////////////////////////////////////////////////
1:  * (according to whether it is dense or sparse).  Most operations need to be done within a reasonable
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
0:  * (according to whether it is dense or sparse).  Most OPERATIONS need to be done within a reasonable
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Vector.Element;
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element element : v1.all()) {
/////////////////////////////////////////////////////////////////////////
1:     Iterator<Vector.Element> iterator = test.nonZeroes().iterator();
1:     iterator = test.all().iterator();
/////////////////////////////////////////////////////////////////////////
1:     for (Element e : clone.nonZeroes()) {
1:     for (Element e : clone.nonZeroes()) {
1:     for (Element e : clone.all()) {
1:     for (Element e : clone.all()) {
/////////////////////////////////////////////////////////////////////////
1:     for (Element element : v0.all()) {
/////////////////////////////////////////////////////////////////////////
1: 
0:     for (Element ignored : v0.nonZeroes()) {
author:Robin Anil
-------------------------------------------------------------------------------
commit:be94533
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.Random;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       test.set(2 * i + 1, values[i]);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:acda70b
/////////////////////////////////////////////////////////////////////////
1: 
1:     // must be the right type ... tricky to tell that in the face of type erasure
1:     assertTrue(v0.getClass().isAssignableFrom(v3.getClass()));
1:     assertTrue(v3.getClass().isAssignableFrom(v0.getClass()));
1: 
commit:1b50c19
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.random.MultiNormal;
/////////////////////////////////////////////////////////////////////////
1: 
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testIterators() {
1:     final T v0 = vectorToTest(20);
1: 
1:     double sum = 0;
1:     int elements = 0;
1:     int nonZero = 0;
0:     for (Vector.Element element : v0) {
1:       elements++;
1:       sum += element.get();
1:       if (element.get() != 0) {
1:         nonZero++;
1:       }
1:     }
1: 
0:     int nonZeroIterated = 0;
0:     final Iterator<Vector.Element> i = v0.iterateNonZero();
0:     while (i.hasNext()) {
0:       i.next();
0:       nonZeroIterated++;
1:     }
1:     assertEquals(20, elements);
1:     assertEquals(v0.size(), elements);
1:     assertEquals(nonZeroIterated, nonZero);
1:     assertEquals(v0.zSum(), sum, 0);
1:   }
1: 
1:   @Test
1:   public void testSmallDistances() {
0:     for (double fuzz : new double[]{1e-5, 1e-6, 1e-7, 1e-8, 1e-9, 1e-10}) {
1:       MultiNormal x = new MultiNormal(fuzz, new ConstantVector(0, 20));
1:       for (int i = 0; i < 10000; i++) {
1:         final T v1 = vectorToTest(20);
1:         Vector v2 = v1.plus(x.sample());
1:         if (1 + fuzz * fuzz > 1) {
1:           String msg = String.format("fuzz = %.1g, >", fuzz);
1:           assertTrue(msg, v1.getDistanceSquared(v2) > 0);
1:           assertTrue(msg, v2.getDistanceSquared(v1) > 0);
1:         } else {
1:           String msg = String.format("fuzz = %.1g, >=", fuzz);
1:           assertTrue(msg, v1.getDistanceSquared(v2) >= 0);
1:           assertTrue(msg, v2.getDistanceSquared(v1) >= 0);
1:         }
commit:1e3f7ae
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:   private static final double[] values = {1.1, 2.2, 3.3};
1:   private static final double[] gold = {0.0, 1.1, 0.0, 2.2, 0.0, 3.3, 0.0};
1:   private Vector test;
1: 
1:   private static void checkIterator(Iterator<Vector.Element> nzIter, double[] values) {
1:     while (nzIter.hasNext()) {
1:       Vector.Element elt = nzIter.next();
1:       assertEquals(elt.index() + " Value: " + values[elt.index()]
1:           + " does not equal: " + elt.get(), values[elt.index()], elt.get(), 0.0);
1:     }
1:   }
/////////////////////////////////////////////////////////////////////////
1:     // verify that v0 and v1 share and are identical
1:     Vector v2 = vectorToTest(20).assign(new Normal(0, 1, gen));
/////////////////////////////////////////////////////////////////////////
1: 
1:   abstract Vector generateTestVector(int cardinality);
1: 
1:   Vector getTestVector() {
1:     return test;
1:   }
1: 
1:   @Override
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
1:     test = generateTestVector(2 * values.length + 1);
1:     for (int i = 0; i < values.length; i++) {
0:       test.set(2*i + 1, values[i]);
1:     }
1:   }
1: 
1:   @Test
1:   public void testCardinality() {
1:     assertEquals("size", 7, test.size());
1:   }
1: 
1:   @Test
1:   public void testIterator() {
0:     Iterator<Vector.Element> iterator = test.iterateNonZero();
1:     checkIterator(iterator, gold);
1: 
0:     iterator = test.iterator();
1:     checkIterator(iterator, gold);
1: 
1:     double[] doubles = {0.0, 5.0, 0, 3.0};
1:     RandomAccessSparseVector zeros = new RandomAccessSparseVector(doubles.length);
1:     for (int i = 0; i < doubles.length; i++) {
1:       zeros.setQuick(i, doubles[i]);
1:     }
1:     iterator = zeros.iterateNonZero();
1:     checkIterator(iterator, doubles);
1:     iterator = zeros.iterator();
1:     checkIterator(iterator, doubles);
1: 
1:     doubles = new double[]{0.0, 0.0, 0, 0.0};
1:     zeros = new RandomAccessSparseVector(doubles.length);
1:     for (int i = 0; i < doubles.length; i++) {
1:       zeros.setQuick(i, doubles[i]);
1:     }
1:     iterator = zeros.iterateNonZero();
1:     checkIterator(iterator, doubles);
1:     iterator = zeros.iterator();
1:     checkIterator(iterator, doubles);
1: 
1:   }
1: 
1:   @Test
1:   public void testIteratorSet() {
1:     Vector clone = test.clone();
0:     Iterator<Vector.Element> it = clone.iterateNonZero();
0:     while (it.hasNext()) {
0:       Vector.Element e = it.next();
1:       e.set(e.get() * 2.0);
1:     }
0:     it = clone.iterateNonZero();
0:     while (it.hasNext()) {
0:       Vector.Element e = it.next();
1:       assertEquals(test.get(e.index()) * 2.0, e.get(), EPSILON);
1:     }
1:     clone = test.clone();
0:     it = clone.iterator();
0:     while (it.hasNext()) {
0:       Vector.Element e = it.next();
1:       e.set(e.get() * 2.0);
1:     }
0:     it = clone.iterator();
0:     while (it.hasNext()) {
0:       Vector.Element e = it.next();
1:       assertEquals(test.get(e.index()) * 2.0, e.get(), EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void testCopy() {
1:     Vector copy = test.clone();
1:     for (int i = 0; i < test.size(); i++) {
1:       assertEquals("copy [" + i + ']', test.get(i), copy.get(i), EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void testGet() {
1:     for (int i = 0; i < test.size(); i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, test.get(i), EPSILON);
1:       } else {
1:         assertEquals("get [" + i + ']', values[i/2], test.get(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test(expected = IndexException.class)
1:   public void testGetOver() {
1:     test.get(test.size());
1:   }
1: 
1:   @Test(expected = IndexException.class)
1:   public void testGetUnder() {
1:     test.get(-1);
1:   }
1: 
1:   @Test
1:   public void testSet() {
1:     test.set(3, 4.5);
1:     for (int i = 0; i < test.size(); i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, test.get(i), EPSILON);
1:       } else if (i == 3) {
1:         assertEquals("set [" + i + ']', 4.5, test.get(i), EPSILON);
1:       } else {
1:         assertEquals("set [" + i + ']', values[i/2], test.get(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testSize() {
1:     assertEquals("size", 3, test.getNumNondefaultElements());
1:   }
1: 
1:   @Test
1:   public void testViewPart() {
1:     Vector part = test.viewPart(1, 2);
1:     assertEquals("part size", 2, part.getNumNondefaultElements());
1:     for (int i = 0; i < part.size(); i++) {
1:       assertEquals("part[" + i + ']', test.get(i+1), part.get(i), EPSILON);
1:     }
1:   }
1: 
1:   @Test(expected = IndexException.class)
1:   public void testViewPartUnder() {
1:     test.viewPart(-1, values.length);
1:   }
1: 
1:   @Test(expected = IndexException.class)
1:   public void testViewPartOver() {
1:     test.viewPart(2, 7);
1:   }
1: 
1:   @Test(expected = IndexException.class)
1:   public void testViewPartCardinality() {
1:     test.viewPart(1, 8);
1:   }
1: 
1:   @Test
1:   public void testSparseDoubleVectorInt() {
1:     Vector val = new RandomAccessSparseVector(4);
1:     assertEquals("size", 4, val.size());
1:     for (int i = 0; i < 4; i++) {
1:       assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void testDot() {
1:     double res = test.dot(test);
1:     double expected = 3.3 * 3.3 + 2.2 * 2.2 + 1.1 * 1.1;
1:     assertEquals("dot", expected, res, EPSILON);
1:   }
1: 
1:   @Test
1:   public void testDot2() {
1:     Vector test2 = test.clone();
1:     test2.set(1, 0.0);
1:     test2.set(3, 0.0);
1:     assertEquals(3.3 * 3.3, test2.dot(test), EPSILON);
1:   }
1: 
1:   @Test(expected = CardinalityException.class)
1:   public void testDotCardinality() {
1:     test.dot(new DenseVector(test.size() + 1));
1:   }
1: 
1:   @Test
1:   public void testNormalize() {
1:     Vector val = test.normalize();
1:     double mag = Math.sqrt(1.1 * 1.1 + 2.2 * 2.2 + 3.3 * 3.3);
1:     for (int i = 0; i < test.size(); i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:       } else {
1:         assertEquals("dot", values[i/2] / mag, val.get(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testMinus() {
1:     Vector val = test.minus(test);
1:     assertEquals("size", test.size(), val.size());
1:     for (int i = 0; i < test.size(); i++) {
1:       assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:     }
1: 
1:     val = test.minus(test).minus(test);
1:     assertEquals("cardinality", test.size(), val.size());
1:     for (int i = 0; i < test.size(); i++) {
1:       assertEquals("get [" + i + ']', 0.0, val.get(i) + test.get(i), EPSILON);
1:     }
1: 
1:     Vector val1 = test.plus(1);
1:     val = val1.minus(test);
1:     for (int i = 0; i < test.size(); i++) {
1:       assertEquals("get [" + i + ']', 1.0, val.get(i), EPSILON);
1:     }
1: 
1:     val1 = test.plus(-1);
1:     val = val1.minus(test);
1:     for (int i = 0; i < test.size(); i++) {
1:       assertEquals("get [" + i + ']', -1.0, val.get(i), EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void testPlusDouble() {
1:     Vector val = test.plus(1);
1:     assertEquals("size", test.size(), val.size());
1:     for (int i = 0; i < test.size(); i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 1.0, val.get(i), EPSILON);
1:       } else {
1:         assertEquals("get [" + i + ']', values[i/2] + 1.0, val.get(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testPlusVector() {
1:     Vector val = test.plus(test);
1:     assertEquals("size", test.size(), val.size());
1:     for (int i = 0; i < test.size(); i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:       } else {
1:         assertEquals("get [" + i + ']', values[i/2] * 2.0, val.get(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test(expected = CardinalityException.class)
1:   public void testPlusVectorCardinality() {
1:     test.plus(new DenseVector(test.size() + 1));
1:   }
1: 
1:   @Test
1:   public void testTimesDouble() {
1:     Vector val = test.times(3);
1:     assertEquals("size", test.size(), val.size());
1:     for (int i = 0; i < test.size(); i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:       } else {
1:         assertEquals("get [" + i + ']', values[i/2] * 3.0, val.get(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testDivideDouble() {
1:     Vector val = test.divide(3);
1:     assertEquals("size", test.size(), val.size());
1:     for (int i = 0; i < test.size(); i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:       } else {
1:         assertEquals("get [" + i + ']', values[i/2] / 3.0, val.get(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testTimesVector() {
1:     Vector val = test.times(test);
1:     assertEquals("size", test.size(), val.size());
1:     for (int i = 0; i < test.size(); i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, val.get(i), EPSILON);
1:       } else {
1:         assertEquals("get [" + i + ']', values[i/2] * values[i/2], val.get(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test(expected = CardinalityException.class)
1:   public void testTimesVectorCardinality() {
1:     test.times(new DenseVector(test.size() + 1));
1:   }
1: 
1:   @Test
1:   public void testZSum() {
1:     double expected = 0;
1:     for (double value : values) {
1:       expected += value;
1:     }
1:     assertEquals("wrong zSum", expected, test.zSum(), EPSILON);
1:   }
1: 
1:   @Test
1:   public void testGetDistanceSquared() {
1:     Vector other = new RandomAccessSparseVector(test.size());
1:     other.set(1, -2);
1:     other.set(2, -5);
1:     other.set(3, -9);
1:     other.set(4, 1);
1:     double expected = test.minus(other).getLengthSquared();
1:     assertTrue("a.getDistanceSquared(b) != a.minus(b).getLengthSquared",
1:                Math.abs(expected - test.getDistanceSquared(other)) < 10.0E-7);
1:   }
1: 
1:   @Test
1:   public void testAssignDouble() {
1:     test.assign(0);
1:     for (int i = 0; i < values.length; i++) {
1:       assertEquals("value[" + i + ']', 0.0, test.getQuick(i), EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void testAssignDoubleArray() {
1:     double[] array = new double[test.size()];
1:     test.assign(array);
1:     for (int i = 0; i < values.length; i++) {
1:       assertEquals("value[" + i + ']', 0.0, test.getQuick(i), EPSILON);
1:     }
1:   }
1: 
1:   @Test(expected = CardinalityException.class)
1:   public void testAssignDoubleArrayCardinality() {
1:     double[] array = new double[test.size() + 1];
1:     test.assign(array);
1:   }
1: 
1:   @Test
1:   public void testAssignVector() {
1:     Vector other = new DenseVector(test.size());
1:     test.assign(other);
1:     for (int i = 0; i < values.length; i++) {
1:       assertEquals("value[" + i + ']', 0.0, test.getQuick(i), EPSILON);
1:     }
1:   }
1: 
1:   @Test(expected = CardinalityException.class)
1:   public void testAssignVectorCardinality() {
1:     Vector other = new DenseVector(test.size() - 1);
1:     test.assign(other);
1:   }
1: 
1:   @Test
1:   public void testAssignUnaryFunction() {
1:     test.assign(Functions.NEGATE);
1:     for (int i = 1; i < values.length; i += 2) {
1:       assertEquals("value[" + i + ']', -values[i], test.getQuick(i+2), EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void testAssignBinaryFunction() {
1:     test.assign(test, Functions.PLUS);
1:     for (int i = 0; i < values.length; i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, test.get(i), EPSILON);
1:       } else {
1:         assertEquals("value[" + i + ']', 2 * values[i - 1], test.getQuick(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testAssignBinaryFunction2() {
1:     test.assign(Functions.plus(4));
1:     for (int i = 0; i < values.length; i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 4.0, test.get(i), EPSILON);
1:       } else {
1:         assertEquals("value[" + i + ']', values[i - 1] + 4, test.getQuick(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testAssignBinaryFunction3() {
1:     test.assign(Functions.mult(4));
1:     for (int i = 0; i < values.length; i++) {
1:       if (i % 2 == 0) {
1:         assertEquals("get [" + i + ']', 0.0, test.get(i), EPSILON);
1:       } else {
1:         assertEquals("value[" + i + ']', values[i - 1] * 4, test.getQuick(i), EPSILON);
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testLike() {
1:     Vector other = test.like();
1:     assertTrue("not like", test.getClass().isAssignableFrom(other.getClass()));
1:     assertEquals("size", test.size(), other.size());
1:   }
1: 
1:   @Test
1:   public void testCrossProduct() {
1:     Matrix result = test.cross(test);
1:     assertEquals("row size", test.size(), result.rowSize());
1:     assertEquals("col size", test.size(), result.columnSize());
1:     for (int row = 0; row < result.rowSize(); row++) {
1:       for (int col = 0; col < result.columnSize(); col++) {
1:         assertEquals("cross[" + row + "][" + col + ']', test.getQuick(row)
1:             * test.getQuick(col), result.getQuick(row, col), EPSILON);
1:       }
1:     }
1:   }
commit:aebdfaf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1: 
0:   private static final double FUZZ = 1e-13;
1: 
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(v2)), FUZZ);
1:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(dv2)), FUZZ);
1:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(sv2)), FUZZ);
1:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(sv1.plus(v2)), FUZZ);
1:     assertEquals(0, dv1.times(dv2).getDistanceSquared(v1.times(v2)), FUZZ);
1:     assertEquals(0, dv1.times(dv2).getDistanceSquared(v1.times(dv2)), FUZZ);
1:     assertEquals(0, dv1.times(dv2).getDistanceSquared(v1.times(sv2)), FUZZ);
1:     assertEquals(0, dv1.times(dv2).getDistanceSquared(sv1.times(v2)), FUZZ);
1: 
1:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(v2)), FUZZ);
1:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(dv2)), FUZZ);
1:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(sv2)), FUZZ);
1:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(sv1.minus(v2)), FUZZ);
1:     assertEquals(dv1.dot(dv2), v1.dot(v2), FUZZ);
1:     assertEquals(dv1.dot(dv2), v1.dot(dv2), FUZZ);
1:     assertEquals(dv1.dot(dv2), v1.dot(sv2), FUZZ);
1:     assertEquals(dv1.dot(dv2), sv1.dot(v2), FUZZ);
1:     assertEquals(dv1.dot(dv2), dv1.dot(v2), FUZZ);
1:     // first attempt has no cached distances
1:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(v2), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), dv1.getDistanceSquared(v2), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), sv1.getDistanceSquared(v2), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(dv2), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(sv2), FUZZ);
1:     // now repeat with cached sizes
1:     assertEquals(dv1.getLengthSquared(), v1.getLengthSquared(), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(v2), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), dv1.getDistanceSquared(v2), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), sv1.getDistanceSquared(v2), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(dv2), FUZZ);
1:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(sv2), FUZZ);
1: 
1:     assertEquals(dv1.minValue(), v1.minValue(), FUZZ);
1:     assertEquals(dv1.maxValue(), v1.maxValue(), FUZZ);
1:     assertEquals(0, dv1.getDistanceSquared(v1), FUZZ);
1:     assertEquals(1, nv1.norm(2), FUZZ);
1:     assertEquals(0, dv1.normalize().getDistanceSquared(nv1), FUZZ);
1:     assertEquals(0, dv1.getDistanceSquared(v1), FUZZ);
1:     assertEquals(1, nv1.norm(1), FUZZ);
1:     assertEquals(0, dv1.normalize(1).getDistanceSquared(nv1), FUZZ);
1:     assertEquals(dv1.norm(0), v1.norm(0), FUZZ);
1:     assertEquals(dv1.norm(1), v1.norm(1), FUZZ);
1:     assertEquals(dv1.norm(1.5), v1.norm(1.5), FUZZ);
1:     assertEquals(dv1.norm(2), v1.norm(2), FUZZ);
1:     assertEquals(dv1.zSum(), v1.zSum(), FUZZ);
1:     assertEquals(3.1 * v1.size(), v1.assign(3.1).zSum(), FUZZ);
1:     assertEquals(0, v1.plus(-3.1).norm(1), FUZZ);
1:     v1.assign(dv1);
1:     assertEquals(0, v1.getDistanceSquared(dv1), FUZZ);
1: 
1:     assertEquals(dv1.zSum() - dv1.size() * 3.4, v1.assign(Functions.minus(3.4)).zSum(), FUZZ);
1:     assertEquals(dv1.zSum() - dv1.size() * 4.5, v1.assign(Functions.MINUS, 1.1).zSum(), FUZZ);
1:     v1.assign(dv1);
1: 
1:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.assign(v2, Functions.MINUS)), FUZZ);
1:     v1.assign(dv1);
1: 
1:     assertEquals(dv1.norm(2), Math.sqrt(v1.aggregate(Functions.PLUS, Functions.pow(2))), FUZZ);
1:     assertEquals(dv1.dot(dv2), v1.aggregate(v2, Functions.PLUS, Functions.MULT), FUZZ);
1: 
1:     assertEquals(dv1.viewPart(5, 10).zSum(), v1.viewPart(5, 10).zSum(), FUZZ);
1: 
1:     Vector v3 = v1.clone();
1:     assertEquals(0, v1.getDistanceSquared(v3), FUZZ);
0:     assertFalse(v1 == v3);
1:     v3.assign(0);
1:     assertEquals(0, dv1.getDistanceSquared(v1), FUZZ);
1:     assertEquals(0, v3.getLengthSquared(), FUZZ);
1: 
1:     dv1.assign(Functions.ABS);
1:     v1.assign(Functions.ABS);
1:     assertEquals(0, dv1.logNormalize().getDistanceSquared(v1.logNormalize()), FUZZ);
1:     assertEquals(0, dv1.logNormalize(1.5).getDistanceSquared(v1.logNormalize(1.5)), FUZZ);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:3d4e6e2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.jet.random.Normal;
1: import org.junit.Test;
1: 
0: import java.util.Random;
1: 
1: /**
1:  * Makes sure that a vector under test acts the same as a DenseVector or RandomAccessSparseVector
0:  * (according to whether it is dense or sparse).  Most operations need to be done within a reasonable
1:  * tolerance.
1:  *
1:  * The idea is that a new vector implementation can extend AbstractVectorTest to get pretty high
1:  * confidence that it is working correctly.
1:  */
1: public abstract class AbstractVectorTest<T extends Vector> extends MahoutTestCase {
1:   public abstract T vectorToTest(int size);
1: 
1:   @Test
1:   public void testSimpleOps() {
1: 
0:     final T v0 = vectorToTest(20);
0:     final Random gen = RandomUtils.getRandom();
1:     Vector v1 = v0.assign(new Normal(0, 1, gen));
0:     Vector v2 = vectorToTest(20).assign(new Normal(0, 1, gen));
1: 
1:     assertEquals(v0.get(12), v1.get(12), 0);
1:     v0.set(12, gen.nextDouble());
1:     assertEquals(v0.get(12), v1.get(12), 0);
0:     assertTrue(v0 == v1);
1: 
1:     Vector dv1 = new DenseVector(v1);
1:     Vector dv2 = new DenseVector(v2);
1:     Vector sv1 = new RandomAccessSparseVector(v1);
1:     Vector sv2 = new RandomAccessSparseVector(v2);
1: 
0:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(v2)), 1e-13);
0:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(dv2)), 1e-13);
0:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(v1.plus(sv2)), 1e-13);
0:     assertEquals(0, dv1.plus(dv2).getDistanceSquared(sv1.plus(v2)), 1e-13);
1: 
0:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(v2)), 1e-13);
0:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(dv2)), 1e-13);
0:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(v1.minus(sv2)), 1e-13);
0:     assertEquals(0, dv1.minus(dv2).getDistanceSquared(sv1.minus(v2)), 1e-13);
1: 
1:     double z = gen.nextDouble();
0:     assertEquals(0, dv1.divide(z).getDistanceSquared(v1.divide(z)), 1e-12);
0:     assertEquals(0, dv1.times(z).getDistanceSquared(v1.times(z)), 1e-12);
0:     assertEquals(0, dv1.plus(z).getDistanceSquared(v1.plus(z)), 1e-12);
1: 
0:     assertEquals(dv1.dot(dv2), v1.dot(v2), 1e-13);
0:     assertEquals(dv1.dot(dv2), v1.dot(dv2), 1e-13);
0:     assertEquals(dv1.dot(dv2), v1.dot(sv2), 1e-13);
0:     assertEquals(dv1.dot(dv2), sv1.dot(v2), 1e-13);
0:     assertEquals(dv1.dot(dv2), dv1.dot(v2), 1e-13);
1: 
0:     assertEquals(dv1.getLengthSquared(), v1.getLengthSquared(), 1e-13);
0:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(v2), 1e-13);
0:     assertEquals(dv1.getDistanceSquared(dv2), dv1.getDistanceSquared(v2), 1e-13);
0:     assertEquals(dv1.getDistanceSquared(dv2), sv1.getDistanceSquared(v2), 1e-13);
0:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(dv2), 1e-13);
0:     assertEquals(dv1.getDistanceSquared(dv2), v1.getDistanceSquared(sv2), 1e-13);
1: 
0:     assertEquals(dv1.minValue(), v1.minValue(), 1e-13);
1:     assertEquals(dv1.minValueIndex(), v1.minValueIndex());
1: 
0:     assertEquals(dv1.maxValue(), v1.maxValue(), 1e-13);
1:     assertEquals(dv1.maxValueIndex(), v1.maxValueIndex());
1: 
1:     Vector nv1 = v1.normalize();
1: 
0:     assertEquals(0, dv1.getDistanceSquared(v1), 1e-13);
0:     assertEquals(1, nv1.norm(2), 1e-13);
0:     assertEquals(0, dv1.normalize().getDistanceSquared(nv1), 1e-13);
1: 
1:     nv1 = v1.normalize(1);
0:     assertEquals(0, dv1.getDistanceSquared(v1), 1e-13);
0:     assertEquals(1, nv1.norm(1), 1e-13);
0:     assertEquals(0, dv1.normalize(1).getDistanceSquared(nv1), 1e-13);
1: 
0:     assertEquals(dv1.norm(0), v1.norm(0), 1e-13);
0:     assertEquals(dv1.norm(1), v1.norm(1), 1e-13);
0:     assertEquals(dv1.norm(1.5), v1.norm(1.5), 1e-13);
0:     assertEquals(dv1.norm(2), v1.norm(2), 1e-13);
1: 
0:     // assign double, function, vector x function
1: 
1: 
1:     // aggregate
1: 
1:     // cross,
1: 
1:     // getNumNondefaultElements
1: 
0:     for (Vector.Element element : v1) {
1:       assertEquals(dv1.get(element.index()), element.get(), 0);
1:       assertEquals(dv1.get(element.index()), v1.get(element.index()), 0);
1:       assertEquals(dv1.get(element.index()), v1.getQuick(element.index()), 0);
1:     }
1:   }
1: }
============================================================================