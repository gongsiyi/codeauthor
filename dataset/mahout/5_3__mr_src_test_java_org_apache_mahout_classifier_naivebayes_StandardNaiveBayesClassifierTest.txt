1:58fd277: /**
1:58fd277:  * Licensed to the Apache Software Foundation (ASF) under one
1:58fd277:  * or more contributor license agreements.  See the NOTICE file
1:58fd277:  * distributed with this work for additional information
1:58fd277:  * regarding copyright ownership.  The ASF licenses this file
1:58fd277:  * to you under the Apache License, Version 2.0 (the
1:58fd277:  * "License"); you may not use this file except in compliance
1:58fd277:  * with the License.  You may obtain a copy of the License at
1:58fd277:  *
1:58fd277:  *     http://www.apache.org/licenses/LICENSE-2.0
1:58fd277:  *
1:58fd277:  * Unless required by applicable law or agreed to in writing, software
1:58fd277:  * distributed under the License is distributed on an "AS IS" BASIS,
1:58fd277:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:58fd277:  * See the License for the specific language governing permissions and
1:58fd277:  * limitations under the License.
1:58fd277:  */
1:515a414: 
1:515a414: package org.apache.mahout.classifier.naivebayes;
1:515a414: 
1:515a414: import org.apache.mahout.math.DenseVector;
1:515a414: import org.junit.Before;
1:515a414: import org.junit.Test;
1:515a414: 
1:515a414: 
1:58fd277: public final class StandardNaiveBayesClassifierTest extends NaiveBayesTestBase {
1:515a414: 
1:58fd277:   private StandardNaiveBayesClassifier classifier;
1:515a414:   
1:515a414:   @Override
1:515a414:   @Before
1:515a414:   public void setUp() throws Exception {
1:515a414:     super.setUp();
1:9a5bab5:     NaiveBayesModel model = createStandardNaiveBayesModel();
1:515a414:     classifier = new StandardNaiveBayesClassifier(model);
1:515a414:   }
1:515a414:   
1:515a414:   @Test
1:515a414:   public void testNaiveBayes() throws Exception {
1:58fd277:     assertEquals(4, classifier.numCategories());
1:d8d721a:     assertEquals(0, maxIndex(classifier.classifyFull(new DenseVector(new double[] { 1.0, 0.0, 0.0, 0.0 }))));
1:d8d721a:     assertEquals(1, maxIndex(classifier.classifyFull(new DenseVector(new double[] { 0.0, 1.0, 0.0, 0.0 }))));
1:d8d721a:     assertEquals(2, maxIndex(classifier.classifyFull(new DenseVector(new double[] { 0.0, 0.0, 1.0, 0.0 }))));
1:d8d721a:     assertEquals(3, maxIndex(classifier.classifyFull(new DenseVector(new double[] { 0.0, 0.0, 0.0, 1.0 }))));
1:515a414:   }
1:515a414:   
1:515a414: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:9a5bab5
/////////////////////////////////////////////////////////////////////////
1:     NaiveBayesModel model = createStandardNaiveBayesModel();
/////////////////////////////////////////////////////////////////////////
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(0, maxIndex(classifier.classify(new DenseVector(new double[] { 1.0, 0.0, 0.0, 0.0 }))));
0:     assertEquals(1, maxIndex(classifier.classify(new DenseVector(new double[] { 0.0, 1.0, 0.0, 0.0 }))));
0:     assertEquals(2, maxIndex(classifier.classify(new DenseVector(new double[] { 0.0, 0.0, 1.0, 0.0 }))));
0:     assertEquals(3, maxIndex(classifier.classify(new DenseVector(new double[] { 0.0, 0.0, 0.0, 1.0 }))));
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Robin Anil
-------------------------------------------------------------------------------
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, maxIndex(classifier.classifyFull(new DenseVector(new double[] { 1.0, 0.0, 0.0, 0.0 }))));
1:     assertEquals(1, maxIndex(classifier.classifyFull(new DenseVector(new double[] { 0.0, 1.0, 0.0, 0.0 }))));
1:     assertEquals(2, maxIndex(classifier.classifyFull(new DenseVector(new double[] { 0.0, 0.0, 1.0, 0.0 }))));
1:     assertEquals(3, maxIndex(classifier.classifyFull(new DenseVector(new double[] { 0.0, 0.0, 0.0, 1.0 }))));
commit:515a414
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.naivebayes;
1: 
1: import org.apache.mahout.math.DenseVector;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
0: public final class StandardNaiveBayesClassifierTest extends NaiveBayesTestBase{
1: 
0:   NaiveBayesModel model;
0:   StandardNaiveBayesClassifier classifier;
1:   
1:   @Override
1:   @Before
1:   public void setUp() throws Exception {
1:     super.setUp();
0:     model = createNaiveBayesModel();
1:     classifier = new StandardNaiveBayesClassifier(model);
1:   }
1:   
1:   @Test
1:   public void testNaiveBayes() throws Exception {
0:     assertEquals(classifier.numCategories(), 4);
0:     assertEquals(0, maxIndex(classifier.classify(new DenseVector(new double[] {1.0, 0.0, 0.0, 0.0}))));
0:     assertEquals(1, maxIndex(classifier.classify(new DenseVector(new double[] {0.0, 1.0, 0.0, 0.0}))));
0:     assertEquals(2, maxIndex(classifier.classify(new DenseVector(new double[] {0.0, 0.0, 1.0, 0.0}))));
0:     assertEquals(3, maxIndex(classifier.classify(new DenseVector(new double[] {0.0, 0.0, 0.0, 1.0}))));
1:     
1:   }
1:   
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:58fd277
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
/////////////////////////////////////////////////////////////////////////
1: public final class StandardNaiveBayesClassifierTest extends NaiveBayesTestBase {
1:   private StandardNaiveBayesClassifier classifier;
0:     NaiveBayesModel model = createNaiveBayesModel();
1:     assertEquals(4, classifier.numCategories());
============================================================================