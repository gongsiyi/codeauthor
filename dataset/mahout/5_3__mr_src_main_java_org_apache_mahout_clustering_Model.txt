2:ce91768: /**
1:ce91768:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ce91768:  * contributor license agreements.  See the NOTICE file distributed with
1:ce91768:  * this work for additional information regarding copyright ownership.
1:ce91768:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ce91768:  * (the "License"); you may not use this file except in compliance with
1:ce91768:  * the License.  You may obtain a copy of the License at
2:ce91768:  *
1:ce91768:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ce91768:  *
1:ce91768:  * Unless required by applicable law or agreed to in writing, software
1:ce91768:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ce91768:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ce91768:  * See the License for the specific language governing permissions and
1:ce91768:  * limitations under the License.
2:ce91768:  */
1:933e22a: 
1:fed7d61: package org.apache.mahout.clustering;
5:ce91768: 
1:abcb7f5: import org.apache.hadoop.io.Writable;
1:0342478: import org.apache.mahout.math.VectorWritable;
1:abcb7f5: 
1:ce91768: /**
1:933e22a:  * A model is a probability distribution over observed data points and allows
1:933e22a:  * the probability of any data point to be computed. All Models have a
1:933e22a:  * persistent representation and extend
1:6430188:  * WritablesampleFromPosterior(Model<VectorWritable>[])
1:ce91768:  */
1:0342478: public interface Model<O> extends Writable {
1:ce91768:   
1:ce91768:   /**
1:0342478:    * Return the probability that the observation is described by this model
1:0342478:    * 
1:0342478:    * @param x
1:0342478:    *          an Observation from the posterior
1:0342478:    * @return the probability that x is in the receiver
1:0342478:    */
1:0342478:   double pdf(O x);
1:933e22a:   
1:0342478:   /**
1:ce91768:    * Observe the given observation, retaining information about it
1:ce91768:    * 
2:53de8dc:    * @param x
2:53de8dc:    *          an Observation from the posterior
1:ce91768:    */
1:f55276b:   void observe(O x);
1:933e22a:   
1:ce91768:   /**
1:933e22a:    * Observe the given observation, retaining information about it
1:933e22a:    * 
1:933e22a:    * @param x
1:933e22a:    *          an Observation from the posterior
1:933e22a:    * @param weight
1:933e22a:    *          a double weighting factor
1:933e22a:    */
1:933e22a:   void observe(O x, double weight);
1:dc637e8:   
1:dc637e8:   /**
1:dc637e8:    * Observe the given model, retaining information about its observations
1:dc637e8:    * 
1:dc637e8:    * @param x
1:dc637e8:    *          a Model<0>
1:dc637e8:    */
1:dc637e8:   void observe(Model<O> x);
1:dc637e8:   
1:933e22a:   /**
1:933e22a:    * Compute a new set of posterior parameters based upon the Observations that
1:933e22a:    * have been observed since my creation
1:ce91768:    */
1:95368a7:   void computeParameters();
1:0342478:   
1:0342478:   /**
1:1ac30a4:    * Return the number of observations that this model has seen since its
1:1ac30a4:    * parameters were last computed
1:ce91768:    * 
1:1ac30a4:    * @return a long
1:ce91768:    */
1:1ac30a4:   long getNumObservations();
1:1ac30a4:   
1:1ac30a4:   /**
1:1ac30a4:    * Return the number of observations that this model has seen over its
1:1ac30a4:    * lifetime
1:1ac30a4:    * 
1:1ac30a4:    * @return a long
1:1ac30a4:    */
1:1ac30a4:   long getTotalObservations();
1:0342478:   
1:ce91768:   /**
1:0342478:    * @return a sample of my posterior model
1:0342478:    */
1:6430188:   Model<VectorWritable> sampleFromPosterior();
1:933e22a:   
1:ce91768: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:1ac30a4
/////////////////////////////////////////////////////////////////////////
1:    * Return the number of observations that this model has seen since its
1:    * parameters were last computed
1:    * @return a long
1:   long getNumObservations();
1:   
1:   /**
1:    * Return the number of observations that this model has seen over its
1:    * lifetime
1:    * 
1:    * @return a long
1:    */
1:   long getTotalObservations();
commit:dc637e8
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * Observe the given model, retaining information about its observations
1:    * 
1:    * @param x
1:    *          a Model<0>
1:    */
1:   void observe(Model<O> x);
1:   
commit:933e22a
/////////////////////////////////////////////////////////////////////////
1:  * A model is a probability distribution over observed data points and allows
1:  * the probability of any data point to be computed. All Models have a
1:  * persistent representation and extend
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
1:    * Observe the given observation, retaining information about it
1:    * 
1:    * @param x
1:    *          an Observation from the posterior
1:    * @param weight
1:    *          a double weighting factor
1:    */
1:   void observe(O x, double weight);
1: 
1:   /**
1:    * Compute a new set of posterior parameters based upon the Observations that
1:    * have been observed since my creation
/////////////////////////////////////////////////////////////////////////
1:   
1:   
commit:172bb3b
/////////////////////////////////////////////////////////////////////////
0:   long count();
commit:3c9538a
/////////////////////////////////////////////////////////////////////////
commit:fed7d61
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering;
commit:0342478
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.VectorWritable;
0:  * point to be computed. All Models have a persistent representation and extend WritablesampleFromPosterior(Model<VectorWritable>[])
1: public interface Model<O> extends Writable {
1:    * Return the probability that the observation is described by this model
1:    * 
1:    * @param x
1:    *          an Observation from the posterior
1:    * @return the probability that x is in the receiver
1:    */
1:   double pdf(O x);
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1: 
1:   /**
1:    * @return a sample of my posterior model
1:    */
0:   public Model<VectorWritable> sampleFromPosterior();
commit:3a70a10
commit:611c3a7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.clustering.Printable;
0: public interface Model<O> extends Writable, Printable {
commit:abcb7f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Writable;
1: 
/////////////////////////////////////////////////////////////////////////
0: public interface Model<Observation> extends Writable {
commit:ce91768
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.clustering.dirichlet.models;
1: 
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: /**
0:  * A model is a probability distribution over observed data points and allows 
0:  * the probability of any data point to be computed.
1:  */
0: public interface Model<Observation> {
1: 
1:   /**
1:    * Observe the given observation, retaining information about it
1:    * 
0:    * @param x an Observation from the posterior
1:    */
0:   public abstract void observe(Observation x);
1: 
1:   /**
0:    * Compute a new set of posterior parameters based upon the Observations 
0:    * that have been observed since my creation
1:    */
0:   public abstract void computeParameters();
1: 
1:   /**
0:   * Return the probability that the observation is described by this model
1:   * 
0:   * @param x an Observation from the posterior
0:   * @return the probability that x is in the receiver
1:   */
0:   public abstract double pdf(Observation x);
1: 
1:   /**
0:    * Return the number of observations that have been observed by this model
1:    * 
0:    * @return an int
1:    */
0:   public abstract int count();
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:6430188
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.Vector;
0:  * point to be computed. All Models have a persistent representation and extend
1:  * WritablesampleFromPosterior(Model<VectorWritable>[])
/////////////////////////////////////////////////////////////////////////
1:   Model<VectorWritable> sampleFromPosterior();
0: 
commit:758cc1b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.clustering.dirichlet.models;
0: 
0: import org.apache.hadoop.io.Writable;
0: 
commit:b25ad9d
/////////////////////////////////////////////////////////////////////////
0:  * A model is a probability distribution over observed data points and allows the probability of any data point to be
0:  * computed.
0:    *
0:   /** Compute a new set of posterior parameters based upon the Observations that have been observed since my creation */
0:    * Return the probability that the observation is described by this model
0:    *
0:    * @param x an Observation from the posterior
0:    * @return the probability that x is in the receiver
0:    */
0:    *
commit:f55276b
/////////////////////////////////////////////////////////////////////////
0: public interface Model<O> extends Writable {
1:   void observe(O x);
/////////////////////////////////////////////////////////////////////////
0:   double pdf(O x);
commit:95368a7
/////////////////////////////////////////////////////////////////////////
0:   void observe(Observation x);
1:   void computeParameters();
/////////////////////////////////////////////////////////////////////////
0:   double pdf(Observation x);
0:   int count();
author:Robin Anil
-------------------------------------------------------------------------------
commit:53de8dc
/////////////////////////////////////////////////////////////////////////
0:  * A model is a probability distribution over observed data points and allows the probability of any data
0:  * point to be computed.
0:   
0:    * 
1:    * @param x
1:    *          an Observation from the posterior
0:   
0:   /**
0:    * Compute a new set of posterior parameters based upon the Observations that have been observed since my
0:    * creation
0:    */
0:   
0:    * 
1:    * @param x
1:    *          an Observation from the posterior
0:   
0:    * 
============================================================================