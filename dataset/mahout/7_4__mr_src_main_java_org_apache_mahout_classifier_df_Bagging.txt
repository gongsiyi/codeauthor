1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
2:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
1:8c37a84:  */
4:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df;
1:8c37a84: 
1:52ce412: import org.apache.mahout.classifier.df.builder.TreeBuilder;
1:52ce412: import org.apache.mahout.classifier.df.data.Data;
1:52ce412: import org.apache.mahout.classifier.df.node.Node;
1:8c37a84: import org.slf4j.Logger;
1:8c37a84: import org.slf4j.LoggerFactory;
1:8c37a84: 
1:d6aba1a: import java.util.Arrays;
1:d6aba1a: import java.util.Random;
1:d6aba1a: 
1:8c37a84: /**
1:8c37a84:  * Builds a tree using bagging
1:8c37a84:  */
1:1ffa3a4: @Deprecated
1:8c37a84: public class Bagging {
1:8c37a84:   
1:8c37a84:   private static final Logger log = LoggerFactory.getLogger(Bagging.class);
1:8c37a84:   
1:8547de7:   private final TreeBuilder treeBuilder;
1:8c37a84:   
1:8547de7:   private final Data data;
1:8c37a84:   
1:8547de7:   private final boolean[] sampled;
1:8c37a84:   
1:8c37a84:   public Bagging(TreeBuilder treeBuilder, Data data) {
1:8c37a84:     this.treeBuilder = treeBuilder;
1:8c37a84:     this.data = data;
1:8c37a84:     sampled = new boolean[data.size()];
4:8c37a84:   }
1:8c37a84:   
1:8c37a84:   /**
1:8c37a84:    * Builds one tree
1:8c37a84:    */
1:4fbfbc6:   public Node build(Random rng) {
1:8c37a84:     log.debug("Bagging...");
1:8c37a84:     Arrays.fill(sampled, false);
1:8c37a84:     Data bag = data.bagging(rng, sampled);
1:8c37a84:     
1:8c37a84:     log.debug("Building...");
1:ac83cf3:     return treeBuilder.build(rng, bag);
1:8c37a84:   }
1:8c37a84:   
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Random;
1: 
commit:ac83cf3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public Node build(int treeId, Random rng) {
1:     return treeBuilder.build(rng, bag);
commit:819cc97
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.df.data.Instance;
/////////////////////////////////////////////////////////////////////////
0:         	Instance instance = data.get(index);
0:           int prediction = tree.classify(instance);
0:           callback.prediction(treeId, instance.getId(), prediction);
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df;
1: 
0: import java.util.Arrays;
0: import java.util.Random;
1: 
0: import org.apache.mahout.df.builder.TreeBuilder;
0: import org.apache.mahout.df.callback.PredictionCallback;
0: import org.apache.mahout.df.data.Data;
0: import org.apache.mahout.df.node.Node;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Builds a tree using bagging
1:  */
1: public class Bagging {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(Bagging.class);
1: 
0:   protected final TreeBuilder treeBuilder;
1: 
0:   protected final Data data;
1: 
0:   protected final boolean[] sampled;
1: 
1:   public Bagging(TreeBuilder treeBuilder, Data data) {
1:     this.treeBuilder = treeBuilder;
1:     this.data = data;
1:     sampled = new boolean[data.size()];
1:   }
1: 
1:   /**
1:    * Builds one tree
1:    * 
0:    * @param treeId tree identifier
0:    * @param rng
0:    * @param callback
0:    * @return
0:    * @throws RuntimeException if the data is not set
1:    */
0:   public Node build(int treeId, Random rng, PredictionCallback callback) {
1:     log.debug("Bagging...");
1:     Arrays.fill(sampled, false);
1:     Data bag = data.bagging(rng, sampled);
1: 
1:     log.debug("Building...");
0:     Node tree = treeBuilder.build(rng, bag);
1: 
0:     // predict the label for the out-of-bag elements
0:     if (callback != null) {
0:       log.debug("Oob error estimation");
0:       for (int index = 0; index < data.size(); index++) {
0:         if (sampled[index] == false) {
0:           int prediction = tree.classify(data.get(index));
0:           callback.prediction(treeId, index, prediction);
1:         }
1:       }
1:     }
1: 
0:     return tree;
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:   public Node build(Random rng) {
commit:4194a28
/////////////////////////////////////////////////////////////////////////
commit:515bac4
/////////////////////////////////////////////////////////////////////////
commit:45cebc4
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1:   private final TreeBuilder treeBuilder;
1:   private final Data data;
1:   private final boolean[] sampled;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df;
1: import org.apache.mahout.classifier.df.builder.TreeBuilder;
1: import org.apache.mahout.classifier.df.data.Data;
1: import org.apache.mahout.classifier.df.node.Node;
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
0:     log.debug("Bagging...");
0:     log.debug("Building...");
0:       log.debug("Oob error estimation");
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   
0:   
0:   
0:    * @param treeId
0:    *          tree identifier
0:    * @throws RuntimeException
0:    *           if the data is not set
0:     Bagging.log.debug("Bagging...");
0:     
0:     Bagging.log.debug("Building...");
0:     
0:       Bagging.log.debug("Oob error estimation");
/////////////////////////////////////////////////////////////////////////
0:     
0:   
============================================================================