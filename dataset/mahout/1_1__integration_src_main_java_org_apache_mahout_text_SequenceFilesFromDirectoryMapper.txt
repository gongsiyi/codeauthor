1:d711ac1: /**
1:d711ac1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d711ac1:  * contributor license agreements.  See the NOTICE file distributed with
1:d711ac1:  * this work for additional information regarding copyright ownership.
1:d711ac1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d711ac1:  * (the "License"); you may not use this file except in compliance with
1:d711ac1:  * the License.  You may obtain a copy of the License at
1:d711ac1:  *
1:d711ac1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d711ac1:  *
1:d711ac1:  * Unless required by applicable law or agreed to in writing, software
1:d711ac1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d711ac1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d711ac1:  * See the License for the specific language governing permissions and
1:d711ac1:  * limitations under the License.
1:d711ac1:  */
2:d711ac1: 
1:d711ac1: package org.apache.mahout.text;
1:d711ac1: 
1:22533ae: import java.io.IOException;
1:22533ae: 
1:d711ac1: import org.apache.hadoop.conf.Configuration;
1:d711ac1: import org.apache.hadoop.fs.Path;
1:d711ac1: import org.apache.hadoop.io.BytesWritable;
1:d711ac1: import org.apache.hadoop.io.IntWritable;
1:d711ac1: import org.apache.hadoop.io.Text;
1:d711ac1: import org.apache.hadoop.mapreduce.Mapper;
1:d711ac1: import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;
1:22533ae: import org.apache.mahout.common.HadoopUtil;
1:d711ac1: 
1:74078b6: import static org.apache.mahout.text.SequenceFilesFromDirectory.KEY_PREFIX_OPTION;
1:74078b6: 
1:d711ac1: /**
1:d711ac1:  * Map class for SequenceFilesFromDirectory MR job
1:d711ac1:  */
1:d711ac1: public class SequenceFilesFromDirectoryMapper extends Mapper<IntWritable, BytesWritable, Text, Text> {
1:d711ac1: 
1:d711ac1:   private String keyPrefix;
1:d711ac1:   private Text fileValue = new Text();
1:d711ac1: 
1:d711ac1:   @Override
1:d711ac1:   protected void setup(Context context) throws IOException, InterruptedException {
1:d711ac1:     super.setup(context);
1:74078b6:     this.keyPrefix = context.getConfiguration().get(KEY_PREFIX_OPTION[0], "");
1:d711ac1:   }
1:d711ac1: 
1:d711ac1:   public void map(IntWritable key, BytesWritable value, Context context)
1:d711ac1:     throws IOException, InterruptedException {
1:d711ac1: 
1:d711ac1:     Configuration configuration = context.getConfiguration();
1:d711ac1:     Path filePath = ((CombineFileSplit) context.getInputSplit()).getPath(key.get());
1:22533ae:     String relativeFilePath = HadoopUtil.calcRelativeFilePath(configuration, filePath);
1:d711ac1: 
1:d711ac1:     String filename = this.keyPrefix.length() > 0 ?
1:d711ac1:       this.keyPrefix + Path.SEPARATOR + relativeFilePath :
1:d711ac1:       Path.SEPARATOR + relativeFilePath;
1:d711ac1: 
1:d711ac1:     fileValue.set(value.getBytes(), 0, value.getBytes().length);
1:d711ac1:     context.write(new Text(filename), fileValue);
1:d711ac1:   }
1:d711ac1: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:74078b6
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.mahout.text.SequenceFilesFromDirectory.KEY_PREFIX_OPTION;
1: 
/////////////////////////////////////////////////////////////////////////
1:     this.keyPrefix = context.getConfiguration().get(KEY_PREFIX_OPTION[0], "");
commit:22533ae
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.HadoopUtil;
/////////////////////////////////////////////////////////////////////////
1:     String relativeFilePath = HadoopUtil.calcRelativeFilePath(configuration, filePath);
commit:d711ac1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.text;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.BytesWritable;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;
1: 
0: import java.io.IOException;
1: 
1: /**
1:  * Map class for SequenceFilesFromDirectory MR job
1:  */
1: public class SequenceFilesFromDirectoryMapper extends Mapper<IntWritable, BytesWritable, Text, Text> {
1: 
1:   private String keyPrefix;
1:   private Text fileValue = new Text();
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     super.setup(context);
0:     this.keyPrefix = context.getConfiguration().get("keyPrefix", "");
1:   }
1: 
1:   public void map(IntWritable key, BytesWritable value, Context context)
1:     throws IOException, InterruptedException {
1: 
1:     Configuration configuration = context.getConfiguration();
1:     Path filePath = ((CombineFileSplit) context.getInputSplit()).getPath(key.get());
0:     String relativeFilePath = SequenceFilesFromMailArchivesMapper.calcRelativeFilePath(configuration, filePath);
1: 
1:     String filename = this.keyPrefix.length() > 0 ?
1:       this.keyPrefix + Path.SEPARATOR + relativeFilePath :
1:       Path.SEPARATOR + relativeFilePath;
1: 
1:     fileValue.set(value.getBytes(), 0, value.getBytes().length);
1:     context.write(new Text(filename), fileValue);
1:   }
1: }
============================================================================