1:b25ad9d: /**
1:b25ad9d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b25ad9d:  * contributor license agreements.  See the NOTICE file distributed with
1:b25ad9d:  * this work for additional information regarding copyright ownership.
1:b25ad9d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b25ad9d:  * (the "License"); you may not use this file except in compliance with
1:b25ad9d:  * the License.  You may obtain a copy of the License at
1:b25ad9d:  *
1:b25ad9d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b25ad9d:  *
1:b25ad9d:  * Unless required by applicable law or agreed to in writing, software
1:b25ad9d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b25ad9d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b25ad9d:  * See the License for the specific language governing permissions and
1:b25ad9d:  * limitations under the License.
1:b25ad9d:  */
2:de680d0: 
1:b25ad9d: package org.apache.mahout.cf.taste.impl.eval;
1:faccaf2: 
1:85f9ece: import java.util.ArrayList;
1:faccaf2: import java.util.Collection;
1:faccaf2: import java.util.concurrent.Callable;
1:6680267: import java.util.concurrent.atomic.AtomicInteger;
1:faccaf2: 
1:b25ad9d: import org.apache.mahout.cf.taste.common.TasteException;
1:4fbab15: import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
1:accdbdb: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1:4fbab15: import org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;
1:accdbdb: import org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator;
1:b25ad9d: import org.apache.mahout.cf.taste.model.DataModel;
1:b25ad9d: import org.apache.mahout.cf.taste.recommender.Recommender;
1:faccaf2: 
1:faccaf2: /**
1:faccaf2:  * Simple helper class for running load on a Recommender.
1:faccaf2:  */
1:b25ad9d: public final class LoadEvaluator {
1:faccaf2:   
1:1b4e01f:   private LoadEvaluator() { }
1:4fbab15: 
1:4fbab15:   public static LoadStatistics runLoad(Recommender recommender) throws TasteException {
1:4fbab15:     return runLoad(recommender, 10);
1:4fbab15:   }
1:faccaf2:   
1:4fbab15:   public static LoadStatistics runLoad(Recommender recommender, int howMany) throws TasteException {
1:b25ad9d:     DataModel dataModel = recommender.getDataModel();
1:b25ad9d:     int numUsers = dataModel.getNumUsers();
1:b25ad9d:     double sampleRate = 1000.0 / numUsers;
1:4fbab15:     LongPrimitiveIterator userSampler =
1:4fbab15:         SamplingLongPrimitiveIterator.maybeWrapIterator(dataModel.getUserIDs(), sampleRate);
1:4fbab15:     recommender.recommend(userSampler.next(), howMany); // Warm up
1:85f9ece:     Collection<Callable<Void>> callables = new ArrayList<>();
1:accdbdb:     while (userSampler.hasNext()) {
1:10c5652:       callables.add(new LoadCallable(recommender, userSampler.next()));
2:faccaf2:     }
1:4fbab15:     AtomicInteger noEstimateCounter = new AtomicInteger();
1:4fbab15:     RunningAverageAndStdDev timing = new FullRunningAverageAndStdDev();
1:4fbab15:     AbstractDifferenceRecommenderEvaluator.execute(callables, noEstimateCounter, timing);
1:4fbab15:     return new LoadStatistics(timing);
1:4841efb:   }
1:4fbab15: 
1:faccaf2: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     Collection<Callable<Void>> callables = new ArrayList<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
commit:74f849b
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     Collection<Callable<Void>> callables = Lists.newArrayList();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbab15
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
1: import org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public static LoadStatistics runLoad(Recommender recommender) throws TasteException {
1:     return runLoad(recommender, 10);
1:   }
1:   public static LoadStatistics runLoad(Recommender recommender, int howMany) throws TasteException {
1:     LongPrimitiveIterator userSampler =
1:         SamplingLongPrimitiveIterator.maybeWrapIterator(dataModel.getUserIDs(), sampleRate);
1:     recommender.recommend(userSampler.next(), howMany); // Warm up
1:     AtomicInteger noEstimateCounter = new AtomicInteger();
1:     RunningAverageAndStdDev timing = new FullRunningAverageAndStdDev();
1:     AbstractDifferenceRecommenderEvaluator.execute(callables, noEstimateCounter, timing);
1:     return new LoadStatistics(timing);
1: 
commit:6680267
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
0:     AbstractDifferenceRecommenderEvaluator.execute(callables, new AtomicInteger());
commit:4ef4dc7
commit:10c5652
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     Collection<Callable<Void>> callables = new ArrayList<Callable<Void>>();
1:       callables.add(new LoadCallable(recommender, userSampler.next()));
0:   private static class LoadCallable implements Callable<Void> {
0:     private LoadCallable(Recommender recommender, long userID) {
0:     public Void call() throws Exception {
commit:faccaf2
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.concurrent.Callable;
1: 
1: /**
1:  * Simple helper class for running load on a Recommender.
1:  */
/////////////////////////////////////////////////////////////////////////
0:     recommender.recommend(userSampler.next(), 10); // Warm up
0:     Collection<Callable<Object>> callables = new ArrayList<Callable<Object>>();
0:       callables.add(new LoadCallable(recommender, userSampler.next(), recommendationTime));
0:     AbstractDifferenceRecommenderEvaluator.execute(callables);
/////////////////////////////////////////////////////////////////////////
0:   private static class LoadCallable implements Callable<Object> {
1: 
0:     private final Recommender recommender;
0:     private final long userID;
0:     private final RunningAverage recommendationTime;
1: 
0:     private LoadCallable(Recommender recommender, long userID, RunningAverage recommendationTime) {
0:       this.recommender = recommender;
0:       this.userID = userID;
0:       this.recommendationTime = recommendationTime;
1:     }
1: 
0:     @Override
0:     public Object call() throws Exception {
0:       long start = System.currentTimeMillis();
0:       recommender.recommend(userID, 10);
0:       long end = System.currentTimeMillis();
0:       recommendationTime.addDatum(end - start);
0:       return null;
1:     }
1:   }
1: 
commit:de680d0
/////////////////////////////////////////////////////////////////////////
0:       if (++count % 100 == 0) {
0:         logStats(recommendationTime);
0:     logStats(recommendationTime);
0:   }
1: 
0:   private static void logStats(RunningAverage recommendationTime) {
0:     Runtime runtime = Runtime.getRuntime();
0:     System.gc();
0:     log.info("Average time per recommendation: " + (int) recommendationTime.getAverage() +
0:              "ms; approx. memory used: " + ((runtime.totalMemory() - runtime.freeMemory()) / 1000000) + "MB");
1: 
commit:1dc91b2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
/////////////////////////////////////////////////////////////////////////
0:     LongPrimitiveIterator userSampler =
0:         SamplingLongPrimitiveIterator.maybeWrapIterator(dataModel.getUserIDs(), sampleRate);
0:     RunningAverage recommendationTime = new FullRunningAverageAndStdDev();
/////////////////////////////////////////////////////////////////////////
0:         log.info("Average time per recommendation: " + recommendationTime.getAverage());
0:     log.info("Average time per recommendation: " + recommendationTime.getAverage());
commit:f3e63ce
/////////////////////////////////////////////////////////////////////////
0:   private LoadEvaluator() {
0:   }
0: 
0:   public static void runLoad(Recommender recommender) throws TasteException {
commit:accdbdb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
1: import org.apache.mahout.cf.taste.impl.common.SamplingLongPrimitiveIterator;
/////////////////////////////////////////////////////////////////////////
0:     LongPrimitiveIterator userSampler = SamplingLongPrimitiveIterator.maybeWrapIterator(dataModel.getUserIDs(), sampleRate);
1:     while (userSampler.hasNext()) {
0:       recommender.recommend(userSampler.next(), 10);
commit:a66f1a8
/////////////////////////////////////////////////////////////////////////
0:     SamplingIterable<Long> userSampler = new SamplingIterable<Long>(dataModel.getUserIDs(), sampleRate);
0:     for (long userID : userSampler) {
commit:d86c967
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     SamplingIterable<Comparable<?>> userSampler =
0:             new SamplingIterable<Comparable<?>>(dataModel.getUserIDs(), sampleRate);
0:     for (Comparable<?> userID : userSampler) {
0:       recommender.recommend(userID, 10);
commit:b25ad9d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.mahout.cf.taste.impl.eval;
0: 
1: import org.apache.mahout.cf.taste.common.TasteException;
0: import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
0: import org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;
0: import org.apache.mahout.cf.taste.impl.common.SamplingIterable;
1: import org.apache.mahout.cf.taste.model.DataModel;
0: import org.apache.mahout.cf.taste.model.User;
1: import org.apache.mahout.cf.taste.recommender.Recommender;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
1: public final class LoadEvaluator {
0: 
0:   private static final Logger log = LoggerFactory.getLogger(LoadEvaluator.class);
0: 
0:   public void runLoad(Recommender recommender) throws TasteException {
0: 
1:     DataModel dataModel = recommender.getDataModel();
1:     int numUsers = dataModel.getNumUsers();
1:     double sampleRate = 1000.0 / numUsers;
0:     SamplingIterable<User> userSampler = new SamplingIterable<User>(dataModel.getUsers(), sampleRate);
0:     RunningAverageAndStdDev recommendationTime = new FullRunningAverageAndStdDev();
0:     int count = 0;
0:     for (User user : userSampler) {
0:       long start = System.currentTimeMillis();
0:       recommender.recommend(user.getID(), 10);
0:       long end = System.currentTimeMillis();
0:       if (count > 0) { // Ignore first as a warmup
0:         recommendationTime.addDatum(end - start);
0:       }
0:       if (++count % 10 == 0) {
0:         log.info(recommendationTime.toString());
0:       }
0:     }
0:     log.info(recommendationTime.toString());
0: 
0:   }
0: 
0: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:1b4e01f
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.concurrent.Callable;
0: 
0:   
1:   private LoadEvaluator() { }
0:   
0:     LongPrimitiveIterator userSampler = SamplingLongPrimitiveIterator.maybeWrapIterator(dataModel
0:         .getUserIDs(), sampleRate);
/////////////////////////////////////////////////////////////////////////
0:   
0:     
0:     
0:     
0:   
============================================================================