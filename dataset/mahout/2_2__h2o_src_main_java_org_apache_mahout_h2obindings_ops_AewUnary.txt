1:2c143fc: /*
1:2c143fc:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:2c143fc:  *  contributor license agreements.  See the NOTICE file distributed with
1:2c143fc:  *  this work for additional information regarding copyright ownership.
1:2c143fc:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:2c143fc:  *  (the "License"); you may not use this file except in compliance with
1:2c143fc:  *  the License.  You may obtain a copy of the License at
1:2c143fc:  *
1:2c143fc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2c143fc:  *
1:2c143fc:  *  Unless required by applicable law or agreed to in writing, software
1:2c143fc:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:2c143fc:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2c143fc:  *  See the License for the specific language governing permissions and
1:2c143fc:  *  limitations under the License.
1:2c143fc:  */
2:2c143fc: 
1:2c143fc: package org.apache.mahout.h2obindings.ops;
1:2c143fc: 
1:2c143fc: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:6ac833b: import scala.Function1;
1:2c143fc: import water.MRTask;
1:2c143fc: import water.fvec.Chunk;
1:6ac833b: import water.fvec.Frame;
1:2c143fc: import water.fvec.NewChunk;
1:6ac833b: import water.fvec.Vec;
1:2c143fc: 
1:2c143fc: import java.io.Serializable;
1:2c143fc: 
1:2c143fc: /**
1:2c143fc:  * MapBlock operator.
1:2c143fc:  */
1:2c143fc: public class AewUnary {
1:2c143fc:   /**
1:2c143fc:    * Execute a UnaryFunc on each element of a DRM. Create a new DRM
1:2c143fc:    * with the new values.
1:2c143fc:    *
1:2c143fc:    * @param drmA DRM representing matrix A.
1:2c143fc:    * @param f UnaryFunc f, that accepts and Double and returns a Double.
1:6ac833b:    * @param evalZeros Whether or not to execute function on zeroes (in case of sparse DRM).
1:2c143fc:    * @return new DRM constructed from mapped values of drmA through f.
1:2c143fc:    */
1:2c143fc:   public static H2ODrm exec(H2ODrm drmA, Object f, final boolean evalZeros) {
1:2c143fc: 
1:2c143fc:     Frame A = drmA.frame;
1:2c143fc:     Vec keys = drmA.keys;
1:2c143fc:     final int ncol = A.numCols();
1:2c143fc: 
1:2c143fc:     /**
1:2c143fc:      * MRTask to execute fn on all elements.
1:2c143fc:      */
1:2c143fc:     class MRTaskAewUnary extends MRTask<MRTaskAewUnary> {
1:2c143fc:       Serializable fn;
1:2c143fc:       MRTaskAewUnary(Object _fn) {
1:2c143fc:         fn = (Serializable)_fn;
1:2c143fc:       }
1:2c143fc:       public void map(Chunk chks[], NewChunk ncs[]) {
1:2c143fc:         for (int c = 0; c < chks.length; c++) {
1:2c143fc:           Chunk chk = chks[c];
1:856a681:           Function1 f = (Function1) fn;
1:856a681:           int ChunkLen = chk.len();
1:2c143fc: 
1:2c143fc:           if (!evalZeros && chk.isSparse()) {
1:2c143fc:             /* sparse and skip zeros */
1:2c143fc:             int prev_offset = -1;
1:2c143fc:             for (int r = chk.nextNZ(-1); r < ChunkLen; r = chk.nextNZ(prev_offset)) {
1:2c143fc:               if (r - prev_offset > 1)
1:2c143fc:                 ncs[c].addZeros(r - prev_offset - 1);
1:6ac833b:               ncs[c].addNum((double)f.apply(chk.atd(r)));
1:2c143fc:               prev_offset = r;
1:2c143fc:             }
1:2c143fc:             if (ChunkLen - prev_offset > 1)
1:2c143fc:               ncs[c].addZeros(chk._len - prev_offset - 1);
1:2c143fc:           } else {
1:2c143fc:             /* dense or non-skip zeros */
1:2c143fc:             for (int r = 0; r < ChunkLen; r++) {
1:6ac833b:               ncs[c].addNum((double)f.apply(chk.atd(r)));
1:2c143fc:             }
1:2c143fc:           }
1:2c143fc:         }
1:2c143fc:       }
1:2c143fc:     }
1:2c143fc: 
1:2c143fc:     Frame fmap = new MRTaskAewUnary(f).doAll(ncol, A).outputFrame(null, null);
1:2c143fc: 
1:2c143fc:     return new H2ODrm(fmap, keys);
1:2c143fc:   }
1:2c143fc: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:6ac833b
/////////////////////////////////////////////////////////////////////////
1: import scala.Function1;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
/////////////////////////////////////////////////////////////////////////
1:    * @param evalZeros Whether or not to execute function on zeroes (in case of sparse DRM).
/////////////////////////////////////////////////////////////////////////
1:               ncs[c].addNum((double)f.apply(chk.atd(r)));
/////////////////////////////////////////////////////////////////////////
1:               ncs[c].addNum((double)f.apply(chk.atd(r)));
author:Anand Avati
-------------------------------------------------------------------------------
commit:856a681
/////////////////////////////////////////////////////////////////////////
1:           Function1 f = (Function1) fn;
1:           int ChunkLen = chk.len();
commit:2c143fc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: import water.MRTask;
0: import water.fvec.Frame;
0: import water.fvec.Vec;
1: import water.fvec.Chunk;
1: import water.fvec.NewChunk;
1: 
1: import java.io.Serializable;
0: import scala.Function1;
1: 
1: /**
1:  * MapBlock operator.
1:  */
1: public class AewUnary {
1:   /**
1:    * Execute a UnaryFunc on each element of a DRM. Create a new DRM
1:    * with the new values.
1:    *
1:    * @param drmA DRM representing matrix A.
1:    * @param f UnaryFunc f, that accepts and Double and returns a Double.
0:    * @param z Whether or not to execute function on zeroes (in case of sparse DRM).
1:    * @return new DRM constructed from mapped values of drmA through f.
1:    */
1:   public static H2ODrm exec(H2ODrm drmA, Object f, final boolean evalZeros) {
1: 
1:     Frame A = drmA.frame;
1:     Vec keys = drmA.keys;
1:     final int ncol = A.numCols();
1: 
1:     /**
1:      * MRTask to execute fn on all elements.
1:      */
1:     class MRTaskAewUnary extends MRTask<MRTaskAewUnary> {
1:       Serializable fn;
1:       MRTaskAewUnary(Object _fn) {
1:         fn = (Serializable)_fn;
1:       }
1:       public void map(Chunk chks[], NewChunk ncs[]) {
1:         for (int c = 0; c < chks.length; c++) {
1:           Chunk chk = chks[c];
0: 	  Function1 f = (Function1) fn;
0: 	  int ChunkLen = chk.len();
1: 
1:           if (!evalZeros && chk.isSparse()) {
1:             /* sparse and skip zeros */
1:             int prev_offset = -1;
1:             for (int r = chk.nextNZ(-1); r < ChunkLen; r = chk.nextNZ(prev_offset)) {
1:               if (r - prev_offset > 1)
1:                 ncs[c].addZeros(r - prev_offset - 1);
0:               ncs[c].addNum((double)f.apply((java.lang.Double)chk.atd(r)));
1:               prev_offset = r;
1:             }
1:             if (ChunkLen - prev_offset > 1)
1:               ncs[c].addZeros(chk._len - prev_offset - 1);
1:           } else {
1:             /* dense or non-skip zeros */
1:             for (int r = 0; r < ChunkLen; r++) {
0:               ncs[c].addNum((double)f.apply((java.lang.Double)chk.atd(r)));
1:             }
1:           }
1:         }
1:       }
1:     }
1: 
1:     Frame fmap = new MRTaskAewUnary(f).doAll(ncol, A).outputFrame(null, null);
1: 
1:     return new H2ODrm(fmap, keys);
1:   }
1: }
============================================================================