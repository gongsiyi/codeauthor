1:d8e91f9: package org.apache.mahout.vectorizer.pruner;
1:d8e91f9: /**
1:d8e91f9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d8e91f9:  * contributor license agreements.  See the NOTICE file distributed with
1:d8e91f9:  * this work for additional information regarding copyright ownership.
1:d8e91f9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d8e91f9:  * (the "License"); you may not use this file except in compliance with
1:d8e91f9:  * the License.  You may obtain a copy of the License at
1:d8e91f9:  *
1:d8e91f9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d8e91f9:  *
1:d8e91f9:  * Unless required by applicable law or agreed to in writing, software
1:d8e91f9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d8e91f9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d8e91f9:  * See the License for the specific language governing permissions and
1:d8e91f9:  * limitations under the License.
1:d8e91f9:  */
1:d8e91f9: 
1:d8e91f9: import org.apache.hadoop.conf.Configuration;
1:d8e91f9: import org.apache.hadoop.io.WritableComparable;
1:d8e91f9: import org.apache.hadoop.mapreduce.Reducer;
1:d8e91f9: import org.apache.mahout.math.Vector;
1:d8e91f9: import org.apache.mahout.math.VectorWritable;
1:d8e91f9: import org.apache.mahout.math.function.Functions;
1:d8e91f9: import org.apache.mahout.vectorizer.common.PartialVectorMerger;
1:d8e91f9: 
1:d8e91f9: import java.io.IOException;
1:d8e91f9: 
1:d8e91f9: public class PrunedPartialVectorMergeReducer extends
1:d8e91f9:         Reducer<WritableComparable<?>, VectorWritable, WritableComparable<?>, VectorWritable> {
1:d8e91f9: 
1:d8e91f9:   private double normPower;
1:d8e91f9: 
1:d8e91f9:   private boolean logNormalize;
1:d8e91f9: 
1:d8e91f9:   @Override
1:d8e91f9:   protected void reduce(WritableComparable<?> key, Iterable<VectorWritable> values, Context context) throws IOException,
1:d8e91f9:           InterruptedException {
1:d8e91f9: 
1:d8e91f9:     Vector vector = null;
1:d8e91f9:     for (VectorWritable value : values) {
1:d8e91f9:       if (vector == null) {
1:d8e91f9:         vector = value.get().clone();
1:d8e91f9:         continue;
2:d8e91f9:       }
1:d8e91f9:       //value.get().addTo(vector);
1:d8e91f9:       vector.assign(value.get(), Functions.PLUS);
1:d8e91f9:     }
1:d8e91f9: 
1:31cb292:     if (vector != null && normPower != PartialVectorMerger.NO_NORMALIZING) {
1:31cb292:       vector = logNormalize ? vector.logNormalize(normPower) : vector.normalize(normPower);
1:d8e91f9:     }
1:d8e91f9: 
1:d8e91f9:     VectorWritable vectorWritable = new VectorWritable(vector);
1:d8e91f9:     context.write(key, vectorWritable);
1:d8e91f9:   }
1:d8e91f9: 
1:d8e91f9:   @Override
1:d8e91f9:   protected void setup(Context context) throws IOException, InterruptedException {
1:d8e91f9:     super.setup(context);
1:d8e91f9:     Configuration conf = context.getConfiguration();
1:d8e91f9:     normPower = conf.getFloat(PartialVectorMerger.NORMALIZATION_POWER, PartialVectorMerger.NO_NORMALIZING);
1:d8e91f9:     logNormalize = conf.getBoolean(PartialVectorMerger.LOG_NORMALIZE, false);
1:d8e91f9:   }
1:d8e91f9: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
1:     if (vector != null && normPower != PartialVectorMerger.NO_NORMALIZING) {
1:       vector = logNormalize ? vector.logNormalize(normPower) : vector.normalize(normPower);
commit:d8e91f9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.vectorizer.pruner;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.WritableComparable;
1: import org.apache.hadoop.mapreduce.Reducer;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.vectorizer.common.PartialVectorMerger;
1: 
1: import java.io.IOException;
1: 
1: public class PrunedPartialVectorMergeReducer extends
1:         Reducer<WritableComparable<?>, VectorWritable, WritableComparable<?>, VectorWritable> {
1: 
1:   private double normPower;
1: 
1:   private boolean logNormalize;
1: 
1:   @Override
1:   protected void reduce(WritableComparable<?> key, Iterable<VectorWritable> values, Context context) throws IOException,
1:           InterruptedException {
1: 
1:     Vector vector = null;
1:     for (VectorWritable value : values) {
1:       if (vector == null) {
1:         vector = value.get().clone();
1:         continue;
1:       }
1:       //value.get().addTo(vector);
1:       vector.assign(value.get(), Functions.PLUS);
1:     }
1: 
0:     if (normPower != PartialVectorMerger.NO_NORMALIZING) {
0:       if (logNormalize) {
0:         vector = vector.logNormalize(normPower);
0:       } else {
0:         vector = vector.normalize(normPower);
1:       }
1:     }
1: 
1:     VectorWritable vectorWritable = new VectorWritable(vector);
1:     context.write(key, vectorWritable);
1:   }
1: 
1:   @Override
1:   protected void setup(Context context) throws IOException, InterruptedException {
1:     super.setup(context);
1:     Configuration conf = context.getConfiguration();
1:     normPower = conf.getFloat(PartialVectorMerger.NORMALIZATION_POWER, PartialVectorMerger.NO_NORMALIZING);
1:     logNormalize = conf.getBoolean(PartialVectorMerger.LOG_NORMALIZE, false);
1:   }
1: }
============================================================================