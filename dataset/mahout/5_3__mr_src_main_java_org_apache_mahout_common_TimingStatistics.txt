1:89607ff: /**
1:89607ff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:89607ff:  * contributor license agreements.  See the NOTICE file distributed with
1:89607ff:  * this work for additional information regarding copyright ownership.
1:89607ff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:89607ff:  * (the "License"); you may not use this file except in compliance with
1:89607ff:  * the License.  You may obtain a copy of the License at
1:89607ff:  *
1:89607ff:  *     http://www.apache.org/licenses/LICENSE-2.0
1:89607ff:  *
1:89607ff:  * Unless required by applicable law or agreed to in writing, software
1:89607ff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:89607ff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89607ff:  * See the License for the specific language governing permissions and
1:89607ff:  * limitations under the License.
1:89607ff:  */
14:b82d989: 
1:89607ff: package org.apache.mahout.common;
1:812d0ba: 
1:9125a01: import java.io.Serializable;
1:812d0ba: import java.text.DecimalFormat;
1:b82d989: 
1:d0ef512: public final class TimingStatistics implements Serializable {
1:812d0ba:   private static final DecimalFormat DF = new DecimalFormat("#.##");
1:9125a01:   private int nCalls;
1:9125a01:   private long minTime;
1:9125a01:   private long maxTime;
1:9125a01:   private long sumTime;
1:812d0ba:   private long leadSumTime;
1:9125a01:   private double sumSquaredTime;
1:812d0ba: 
1:812d0ba: 
1:9125a01:   /** Creates a new instance of CallStats */
1:b82d989:   public TimingStatistics() { }
1:812d0ba: 
1:b82d989:   public TimingStatistics(int nCalls, long minTime, long maxTime, long sumTime, double sumSquaredTime) {
1:9125a01:     this.nCalls = nCalls;
1:9125a01:     this.minTime = minTime;
1:9125a01:     this.maxTime = maxTime;
1:9125a01:     this.sumTime = sumTime;
1:9125a01:     this.sumSquaredTime = sumSquaredTime;
3:9125a01:   }
1:812d0ba: 
1:2f0cdab:   public synchronized int getNCalls() {
1:9125a01:     return nCalls;
1:9125a01:   }
1:812d0ba: 
1:2f0cdab:   public synchronized long getMinTime() {
1:9125a01:     return Math.max(0, minTime);
1:9125a01:   }
1:812d0ba: 
1:2f0cdab:   public synchronized long getMaxTime() {
1:9125a01:     return maxTime;
1:9125a01:   }
1:812d0ba: 
1:2f0cdab:   public synchronized long getSumTime() {
1:9125a01:     return sumTime;
1:9125a01:   }
1:812d0ba: 
1:2f0cdab:   public synchronized double getSumSquaredTime() {
1:9125a01:     return sumSquaredTime;
1:9125a01:   }
1:812d0ba: 
1:2f0cdab:   public synchronized long getMeanTime() {
1:d0ef512:     return nCalls == 0 ? 0 : sumTime / nCalls;
1:9125a01:   }
1:812d0ba: 
1:2f0cdab:   public synchronized long getStdDevTime() {
1:b82d989:     if (nCalls == 0) {
2:9125a01:       return 0;
1:b82d989:     }
1:9125a01:     double mean = getMeanTime();
1:9125a01:     double meanSquared = mean * mean;
1:9125a01:     double meanOfSquares = sumSquaredTime / nCalls;
1:9125a01:     double variance = meanOfSquares - meanSquared;
1:b82d989:     if (variance < 0) {
1:b82d989:       return 0; // might happen due to rounding error
1:b82d989:     }
1:9125a01:     return (long) Math.sqrt(variance);
1:9125a01:   }
1:812d0ba: 
1:b82d989:   @Override
1:2f0cdab:   public synchronized String toString() {
1:812d0ba:     return '\n'
1:812d0ba:         + "nCalls = " + nCalls + ";\n"
1:812d0ba:         + "sum    = " + DF.format(sumTime / 1000000000.0) + "s;\n"
1:812d0ba:         + "min    = " + DF.format(minTime / 1000000.0) + "ms;\n"
1:812d0ba:         + "max    = " + DF.format(maxTime / 1000000.0) + "ms;\n"
1:812d0ba:         + "mean   = " + DF.format(getMeanTime() / 1000.0) + "us;\n"
1:812d0ba:         + "stdDev = " + DF.format(getStdDevTime() / 1000.0) + "us;";
1:9125a01:   }
1:812d0ba: 
1:58cc1ae:   /** Ignores counting the performance metrics until leadTimeIsFinished The caller should enough time for the JIT
1:58cc1ae:    *  to warm up. */
1:812d0ba:   public Call newCall(long leadTimeUsec) {
1:812d0ba:     if (leadSumTime > leadTimeUsec) {
1:812d0ba:       return new Call();
1:812d0ba:     } else {
1:812d0ba:       return new LeadTimeCall();
1:812d0ba:     }
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   /** Ignores counting the performance metrics. The caller should enough time for the JIT to warm up. */
1:58cc1ae:   public final class LeadTimeCall extends Call {
1:812d0ba: 
1:812d0ba:     private LeadTimeCall() { }
1:812d0ba: 
1:812d0ba:     @Override
1:812d0ba:     public void end() {
1:812d0ba:       long elapsed = System.nanoTime() - startTime;
1:812d0ba:       synchronized (TimingStatistics.this) {
1:812d0ba:         leadSumTime += elapsed;
1:812d0ba:       }
1:812d0ba:     }
1:812d0ba: 
1:812d0ba:     @Override
1:812d0ba:     public boolean end(long sumMaxUsec) {
1:812d0ba:       end();
1:812d0ba:       return false;
1:812d0ba:     }
1:812d0ba:   }
1:812d0ba: 
1:812d0ba:   /**
1:812d0ba:    * A call object that can update performance metrics.
1:812d0ba:    */
1:812d0ba:   public class Call {
1:812d0ba:     protected final long startTime = System.nanoTime();
1:812d0ba: 
1:b82d989:     private Call() { }
1:812d0ba: 
1:9125a01:     public void end() {
1:9125a01:       long elapsed = System.nanoTime() - startTime;
1:9125a01:       synchronized (TimingStatistics.this) {
1:9125a01:         nCalls++;
1:b82d989:         if (elapsed < minTime || nCalls == 1) {
1:9125a01:           minTime = elapsed;
1:b82d989:         }
1:b82d989:         if (elapsed > maxTime) {
1:9125a01:           maxTime = elapsed;
1:b82d989:         }
1:9125a01:         sumTime += elapsed;
1:b82d989:         sumSquaredTime += elapsed * elapsed;
1:9125a01:       }
1:9125a01:     }
1:812d0ba: 
1:812d0ba:     /**
1:812d0ba:      * Returns true if the sumTime as reached this limit;
1:812d0ba:      */
1:812d0ba:     public boolean end(long sumMaxUsec) {
1:812d0ba:       end();
1:812d0ba:       return sumMaxUsec < sumTime;
1:812d0ba:     }
1:9125a01:   }
1:9125a01: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:   /** Ignores counting the performance metrics until leadTimeIsFinished The caller should enough time for the JIT
1:    *  to warm up. */
/////////////////////////////////////////////////////////////////////////
1:   public final class LeadTimeCall extends Call {
author:Robin Anil
-------------------------------------------------------------------------------
commit:812d0ba
/////////////////////////////////////////////////////////////////////////
1: import java.text.DecimalFormat;
1:   private static final DecimalFormat DF = new DecimalFormat("#.##");
1:   private long leadSumTime;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     return '\n'
1:         + "nCalls = " + nCalls + ";\n"
1:         + "sum    = " + DF.format(sumTime / 1000000000.0) + "s;\n"
1:         + "min    = " + DF.format(minTime / 1000000.0) + "ms;\n"
1:         + "max    = " + DF.format(maxTime / 1000000.0) + "ms;\n"
1:         + "mean   = " + DF.format(getMeanTime() / 1000.0) + "us;\n"
1:         + "stdDev = " + DF.format(getStdDevTime() / 1000.0) + "us;";
1: 
1: 
0:   /** Ignores counting the performance metrics until leadTimeIsFinished The caller should enough time for the JIT to warm up. */
1:   public Call newCall(long leadTimeUsec) {
1:     if (leadSumTime > leadTimeUsec) {
1:       return new Call();
1:     } else {
1:       return new LeadTimeCall();
1:     }
1:   }
1: 
1:   /** Ignores counting the performance metrics. The caller should enough time for the JIT to warm up. */
0:   public class LeadTimeCall extends Call {
1: 
1:     private LeadTimeCall() { }
1: 
1:     @Override
1:     public void end() {
1:       long elapsed = System.nanoTime() - startTime;
1:       synchronized (TimingStatistics.this) {
1:         leadSumTime += elapsed;
1:       }
1:     }
1: 
1:     @Override
1:     public boolean end(long sumMaxUsec) {
1:       end();
1:       return false;
1:     }
1:   }
1: 
1:   /**
1:    * A call object that can update performance metrics.
1:    */
1:   public class Call {
1:     protected final long startTime = System.nanoTime();
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns true if the sumTime as reached this limit;
1:      */
1:     public boolean end(long sumMaxUsec) {
1:       end();
1:       return sumMaxUsec < sumTime;
1:     }
commit:8c68b31
commit:46e266a
commit:b82d989
/////////////////////////////////////////////////////////////////////////
1:   
1:   
1:   public TimingStatistics() { }
1:   
1:   public TimingStatistics(int nCalls, long minTime, long maxTime, long sumTime, double sumSquaredTime) {
1:   
1:   
1:   
1:   
1:   
1:   
1:   
1:     if (nCalls == 0) {
1:     }
1:     if (variance < 0) {
1:       return 0; // might happen due to rounding error
1:     }
1:   
1:   @Override
0:     return '\n' + "nCalls = " + nCalls + ";\n" + "sumTime = " + sumTime / 1000000000.0f + "s;\n"
0:            + "minTime = " + minTime / 1000000.0f + "ms;\n" + "maxTime = " + maxTime / 1000000.0f + "ms;\n"
0:            + "meanTime = " + getMeanTime() / 1000000.0f + "ms;\n" + "stdDevTime = " + getStdDevTime()
0:            / 1000000.0f + "ms;";
1:   
1:   
1:     
1:     private Call() { }
1:     
1:         if (elapsed < minTime || nCalls == 1) {
1:         }
1:         if (elapsed > maxTime) {
1:         }
1:         sumSquaredTime += elapsed * elapsed;
commit:9125a01
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils;
0: import java.beans.ConstructorProperties;
1: import java.io.Serializable;
0: 
0: public class TimingStatistics implements Serializable {
1:     private int nCalls;
1:     private long minTime;
1:     private long maxTime;
1:     private long sumTime;
1:     private double sumSquaredTime;
0:     
1:     /** Creates a new instance of CallStats */
0:     public TimingStatistics() {
1:     }
0:     
0:     @ConstructorProperties({"nCalls", "minTime", "maxTime", "sumTime",
0:                             "sumSquaredTime"})
0:     public TimingStatistics(int nCalls, long minTime, long maxTime, long sumTime,
0:                      double sumSquaredTime) {
1:         this.nCalls = nCalls;
1:         this.minTime = minTime;
1:         this.maxTime = maxTime;
1:         this.sumTime = sumTime;
1:         this.sumSquaredTime = sumSquaredTime;
1:     }
0:     
0:     public int getNCalls() {
1:         return nCalls;
1:     }
0:     
0:     public long getMinTime() {
1:         return Math.max(0, minTime);
1:     }
0:     
0:     public long getMaxTime() {
1:         return maxTime;
1:     }
0:     
0:     public long getSumTime() {
1:         return sumTime;
1:     }
0:     
0:     public double getSumSquaredTime() {
1:         return sumSquaredTime;
1:     }
0:     
0:     public long getMeanTime() {
0:         if (nCalls == 0)
1:             return 0;
0:         else
0:             return sumTime / nCalls;
1:     }
0:     
0:     public long getStdDevTime() {
0:         if (nCalls == 0)
1:             return 0;
1:         double mean = getMeanTime();
1:         double meanSquared = mean * mean;
1:         double meanOfSquares = sumSquaredTime / nCalls;
1:         double variance = meanOfSquares - meanSquared;
0:         if (variance < 0)
0:             return 0;  // might happen due to rounding error
1:         return (long) Math.sqrt(variance);
1:     }
0:     
0:     public String toString() {
0:         return "\n" +
0:         		"nCalls = " + nCalls + ";\n" +
0:                 "sumTime = " + getSumTime()/1000000000f + "s;\n" +
0:                 "minTime = " + minTime/1000000f + "ms;\n" +
0:                 "maxTime = " + maxTime/1000000f + "ms;\n" +
0:                 "meanTime = " + getMeanTime()/1000000f + "ms;\n" +
0:                 "stdDevTime = " + getStdDevTime()/1000000f + "ms;";
1:     }
0:     
0:     public Call newCall() {
0:         return new Call();
1:     }
0:     
0:     public class Call {
0:         private final long startTime = System.nanoTime();
0:         private Call() {}
0:         
1:         public void end() {
1:             long elapsed = System.nanoTime() - startTime;
1:             synchronized (TimingStatistics.this) {
1:                 nCalls++;
0:                 if (elapsed < minTime || nCalls == 1)
1:                     minTime = elapsed;
0:                 if (elapsed > maxTime)
1:                     maxTime = elapsed;
1:                 sumTime += elapsed;
0:                 double elapsedFP = elapsed;
0:                 sumSquaredTime += elapsedFP * elapsedFP;
1:             }
1:         }
1:     }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:515bac4
/////////////////////////////////////////////////////////////////////////
0:     return '\n' + "nCalls = " + nCalls + ";\n" + "sum = " + sumTime / 1000000000.0 + "s;\n"
0:            + "min = " + minTime / 1000000.0 + "ms;\n" + "max = " + maxTime / 1000000.0 + "ms;\n"
0:            + "mean = " + getMeanTime() / 1000000.0 + "ms;\n" + "stdDev = " + getStdDevTime()
0:            / 1000000.0 + "ms;";
commit:4ef4dc7
commit:2f0cdab
/////////////////////////////////////////////////////////////////////////
1:   public synchronized int getNCalls() {
1:   public synchronized long getMinTime() {
1:   public synchronized long getMaxTime() {
1:   public synchronized long getSumTime() {
1:   public synchronized double getSumSquaredTime() {
1:   public synchronized long getMeanTime() {
1:   public synchronized long getStdDevTime() {
/////////////////////////////////////////////////////////////////////////
1:   public synchronized String toString() {
/////////////////////////////////////////////////////////////////////////
0:         sumSquaredTime += (double) (elapsed * elapsed);
commit:d0ef512
/////////////////////////////////////////////////////////////////////////
1: public final class TimingStatistics implements Serializable {
0: 
0:   private int nCalls;
0:   private long minTime;
0:   private long maxTime;
0:   private long sumTime;
0:   private double sumSquaredTime;
0: 
0:   /** Creates a new instance of CallStats */
0:   public TimingStatistics() {
0:   }
0: 
0:   public TimingStatistics(int nCalls, long minTime, long maxTime, long sumTime,
0:                           double sumSquaredTime) {
0:     this.nCalls = nCalls;
0:     this.minTime = minTime;
0:     this.maxTime = maxTime;
0:     this.sumTime = sumTime;
0:     this.sumSquaredTime = sumSquaredTime;
0:   }
0: 
0:   public int getNCalls() {
0:     return nCalls;
0:   }
0: 
0:   public long getMinTime() {
0:     return Math.max(0, minTime);
0:   }
0: 
0:   public long getMaxTime() {
0:     return maxTime;
0:   }
0: 
0:   public long getSumTime() {
0:     return sumTime;
0:   }
0: 
0:   public double getSumSquaredTime() {
0:     return sumSquaredTime;
0:   }
0: 
0:   public long getMeanTime() {
1:     return nCalls == 0 ? 0 : sumTime / nCalls;
0:   }
0: 
0:   public long getStdDevTime() {
0:     if (nCalls == 0)
0:       return 0;
0:     double mean = getMeanTime();
0:     double meanSquared = mean * mean;
0:     double meanOfSquares = sumSquaredTime / nCalls;
0:     double variance = meanOfSquares - meanSquared;
0:     if (variance < 0)
0:       return 0;  // might happen due to rounding error
0:     return (long) Math.sqrt(variance);
0:   }
0: 
0:   public String toString() {
0:     return '\n' +
0:         "nCalls = " + nCalls + ";\n" +
0:         "sumTime = " + sumTime / 1000000000.0f + "s;\n" +
0:         "minTime = " + minTime / 1000000.0f + "ms;\n" +
0:         "maxTime = " + maxTime / 1000000.0f + "ms;\n" +
0:         "meanTime = " + getMeanTime() / 1000000.0f + "ms;\n" +
0:         "stdDevTime = " + getStdDevTime() / 1000000.0f + "ms;";
0:   }
0: 
0:   public Call newCall() {
0:     return new Call();
0:   }
0: 
0:   public class Call {
0:     private final long startTime = System.nanoTime();
0: 
0:     private Call() {
0:     public void end() {
0:       long elapsed = System.nanoTime() - startTime;
0:       synchronized (TimingStatistics.this) {
0:         nCalls++;
0:         if (elapsed < minTime || nCalls == 1)
0:           minTime = elapsed;
0:         if (elapsed > maxTime)
0:           maxTime = elapsed;
0:         sumTime += elapsed;
0:         double elapsedFP = elapsed;
0:         sumSquaredTime += elapsedFP * elapsedFP;
0:       }
0:   }
commit:89607ff
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.mahout.common;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
commit:af58850
/////////////////////////////////////////////////////////////////////////
0:                 "sumTime = " + getSumTime()/1000000000.0f + "s;\n" +
0:                 "minTime = " + minTime/1000000.0f + "ms;\n" +
0:                 "maxTime = " + maxTime/1000000.0f + "ms;\n" +
0:                 "meanTime = " + getMeanTime()/1000000.0f + "ms;\n" +
0:                 "stdDevTime = " + getStdDevTime()/1000000.0f + "ms;";
============================================================================