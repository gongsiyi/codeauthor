1:9d44881: /**
1:9d44881:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9d44881:  * contributor license agreements.  See the NOTICE file distributed with
1:9d44881:  * this work for additional information regarding copyright ownership.
1:9d44881:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9d44881:  * (the "License"); you may not use this file except in compliance with
1:9d44881:  * the License.  You may obtain a copy of the License at
1:9d44881:  *
1:9d44881:  *     http://www.apache.org/licenses/LICENSE-2.0
1:9d44881:  *
1:9d44881:  * Unless required by applicable law or agreed to in writing, software
1:9d44881:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9d44881:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9d44881:  * See the License for the specific language governing permissions and
1:9d44881:  * limitations under the License.
1:9d44881:  */
4:9d44881: 
1:9d44881: package org.apache.mahout.clustering.topdown.postprocessor;
1:9d44881: 
1:bbf5369: import org.apache.hadoop.conf.Configuration;
1:bbf5369: import org.apache.hadoop.fs.Path;
1:bbf5369: import org.apache.hadoop.io.IntWritable;
1:9d44881: import org.apache.hadoop.mapreduce.Reducer;
1:9d44881: import org.apache.mahout.math.VectorWritable;
1:bbf5369: 
1:bbf5369: import java.io.IOException;
1:bbf5369: import java.util.Map;
1:bbf5369: 
1:9d44881: /**
1:9d44881:  * Reducer for post processing cluster output.
1:9d44881:  */
1:58cc1ae: public class ClusterOutputPostProcessorReducer
1:58cc1ae:     extends Reducer<IntWritable, VectorWritable, IntWritable, VectorWritable> {
1:bbf5369: 
1:bbf5369:   private Map<Integer, Integer> reverseClusterMappings;
1:bbf5369: 
1:bbf5369:   //read the current cluster ids, and populate the hash cluster mapping hash table
1:bbf5369:   @Override
1:bbf5369:   public void setup(Context context) throws IOException {
1:bbf5369:     Configuration conf = context.getConfiguration();
1:bbf5369:     Path clusterOutputPath = new Path(conf.get("clusterOutputPath"));
1:bbf5369:     //we want to the key to be the index, the value to be the cluster id
1:bbf5369:     reverseClusterMappings = ClusterCountReader.getClusterIDs(clusterOutputPath, conf, false);
1:bbf5369:   }
1:bbf5369: 
1:9d44881:   /**
1:bbf5369:    * The key is the remapped cluster id and the values contains the vectors in that cluster.
1:9d44881:    */
1:9d44881:   @Override
1:bbf5369:   protected void reduce(IntWritable key, Iterable<VectorWritable> values, Context context) throws IOException,
1:bbf5369:           InterruptedException {
1:bbf5369:     //remap the cluster back to its original id
1:bbf5369:     //and then output the vectors with their correct
1:bbf5369:     //cluster id.
1:bbf5369:     IntWritable outKey = new IntWritable(reverseClusterMappings.get(key.get()));
1:bbf5369:     System.out.println(outKey + " this: " + this);
1:9d44881:     for (VectorWritable value : values) {
1:bbf5369:       context.write(outKey, value);
1:9d44881:     }
1:9d44881:   }
1:bbf5369: 
1:9d44881: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1: public class ClusterOutputPostProcessorReducer
1:     extends Reducer<IntWritable, VectorWritable, IntWritable, VectorWritable> {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:bbf5369
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.IntWritable;
1: import java.io.IOException;
1: import java.util.Map;
1: 
0: public class ClusterOutputPostProcessorReducer extends Reducer<IntWritable, VectorWritable, IntWritable, VectorWritable> {
1: 
1: 
1:   private Map<Integer, Integer> reverseClusterMappings;
1: 
1:   //read the current cluster ids, and populate the hash cluster mapping hash table
1:   @Override
1:   public void setup(Context context) throws IOException {
1:     Configuration conf = context.getConfiguration();
1:     Path clusterOutputPath = new Path(conf.get("clusterOutputPath"));
1:     //we want to the key to be the index, the value to be the cluster id
1:     reverseClusterMappings = ClusterCountReader.getClusterIDs(clusterOutputPath, conf, false);
1:   }
1: 
1:    * The key is the remapped cluster id and the values contains the vectors in that cluster.
1:   protected void reduce(IntWritable key, Iterable<VectorWritable> values, Context context) throws IOException,
1:           InterruptedException {
1:     //remap the cluster back to its original id
1:     //and then output the vectors with their correct
1:     //cluster id.
1:     IntWritable outKey = new IntWritable(reverseClusterMappings.get(key.get()));
1:     System.out.println(outKey + " this: " + this);
1:       context.write(outKey, value);
1: 
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:9d44881
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.topdown.postprocessor;
1: 
0: import java.io.IOException;
1: 
0: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Reducer;
1: import org.apache.mahout.math.VectorWritable;
1: 
1: /**
1:  * Reducer for post processing cluster output.
1:  */
0: public class ClusterOutputPostProcessorReducer extends Reducer<Text,VectorWritable,Text,VectorWritable> {
1:   /**
0:    * The key is the cluster id and the values contains the points in that cluster.
1:    */
1:   @Override
0:   protected void reduce(Text key, Iterable<VectorWritable> values, Context context) throws IOException,
0:                                                                                    InterruptedException {
1:     for (VectorWritable value : values) {
0:       context.write(key, value);
1:     }
1:   }
1:   
1: }
============================================================================