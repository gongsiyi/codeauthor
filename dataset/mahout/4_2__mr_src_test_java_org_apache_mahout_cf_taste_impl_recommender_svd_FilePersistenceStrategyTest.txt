1:84f17ae: /**
1:84f17ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:84f17ae:  * contributor license agreements.  See the NOTICE file distributed with
1:84f17ae:  * this work for additional information regarding copyright ownership.
1:84f17ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:84f17ae:  * (the "License"); you may not use this file except in compliance with
1:84f17ae:  * the License.  You may obtain a copy of the License at
1:84f17ae:  *
1:84f17ae:  *     http://www.apache.org/licenses/LICENSE-2.0
1:84f17ae:  *
1:84f17ae:  * Unless required by applicable law or agreed to in writing, software
1:84f17ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:84f17ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:84f17ae:  * See the License for the specific language governing permissions and
1:84f17ae:  * limitations under the License.
1:84f17ae:  */
1:84f17ae: 
1:84f17ae: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:84f17ae: 
1:84f17ae: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:84f17ae: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:84f17ae: import org.junit.Test;
1:84f17ae: 
1:84f17ae: import java.io.File;
1:84f17ae: 
1:84f17ae: public class FilePersistenceStrategyTest extends TasteTestCase {
1:84f17ae: 
1:84f17ae:   @Test
1:84f17ae:   public void persistAndLoad() throws Exception {
1:02ff22f:     FastByIDMap<Integer> userIDMapping = new FastByIDMap<>();
1:02ff22f:     FastByIDMap<Integer> itemIDMapping = new FastByIDMap<>();
1:84f17ae: 
1:84f17ae:     userIDMapping.put(123, 0);
1:84f17ae:     userIDMapping.put(456, 1);
1:84f17ae: 
1:84f17ae:     itemIDMapping.put(12, 0);
1:84f17ae:     itemIDMapping.put(34, 1);
1:84f17ae: 
1:84f17ae:     double[][] userFeatures = { { 0.1, 0.2, 0.3 }, { 0.4, 0.5, 0.6 } };
1:84f17ae:     double[][] itemFeatures = { { 0.7, 0.8, 0.9 }, { 1.0, 1.1, 1.2 } };
1:84f17ae: 
1:84f17ae:     Factorization original = new Factorization(userIDMapping, itemIDMapping, userFeatures, itemFeatures);
1:84f17ae:     File storage = getTestTempFile("storage.bin");
1:84f17ae:     PersistenceStrategy persistenceStrategy = new FilePersistenceStrategy(storage);
1:84f17ae: 
1:84f17ae:     assertNull(persistenceStrategy.load());
1:84f17ae: 
1:84f17ae:     persistenceStrategy.maybePersist(original);
1:84f17ae:     Factorization clone = persistenceStrategy.load();
1:84f17ae: 
1:84f17ae:     assertEquals(original, clone);
1:84f17ae:   }
1:84f17ae: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<Integer> userIDMapping = new FastByIDMap<>();
1:     FastByIDMap<Integer> itemIDMapping = new FastByIDMap<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:84f17ae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.junit.Test;
1: 
1: import java.io.File;
1: 
1: public class FilePersistenceStrategyTest extends TasteTestCase {
1: 
1:   @Test
1:   public void persistAndLoad() throws Exception {
0:     FastByIDMap<Integer> userIDMapping = new FastByIDMap<Integer>();
0:     FastByIDMap<Integer> itemIDMapping = new FastByIDMap<Integer>();
1: 
1:     userIDMapping.put(123, 0);
1:     userIDMapping.put(456, 1);
1: 
1:     itemIDMapping.put(12, 0);
1:     itemIDMapping.put(34, 1);
1: 
1:     double[][] userFeatures = { { 0.1, 0.2, 0.3 }, { 0.4, 0.5, 0.6 } };
1:     double[][] itemFeatures = { { 0.7, 0.8, 0.9 }, { 1.0, 1.1, 1.2 } };
1: 
1:     Factorization original = new Factorization(userIDMapping, itemIDMapping, userFeatures, itemFeatures);
1:     File storage = getTestTempFile("storage.bin");
1:     PersistenceStrategy persistenceStrategy = new FilePersistenceStrategy(storage);
1: 
1:     assertNull(persistenceStrategy.load());
1: 
1:     persistenceStrategy.maybePersist(original);
1:     Factorization clone = persistenceStrategy.load();
1: 
1:     assertEquals(original, clone);
1:   }
1: }
============================================================================