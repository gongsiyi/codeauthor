2:db362c2: /**
1:db362c2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:db362c2:  * contributor license agreements.  See the NOTICE file distributed with
1:db362c2:  * this work for additional information regarding copyright ownership.
1:db362c2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:db362c2:  * (the "License"); you may not use this file except in compliance with
1:db362c2:  * the License.  You may obtain a copy of the License at
1:e6f27f1:  *
1:db362c2:  *     http://www.apache.org/licenses/LICENSE-2.0
4:db362c2:  *
1:db362c2:  * Unless required by applicable law or agreed to in writing, software
1:db362c2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:db362c2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:db362c2:  * See the License for the specific language governing permissions and
1:db362c2:  * limitations under the License.
1:db362c2:  */
18:db362c2: 
1:758cc1b: package org.apache.mahout.utils.vectors.lucene;
1:758cc1b: 
1:e6f27f1: import org.apache.lucene.index.IndexReader;
1:a435efb: import org.apache.mahout.math.Vector;
1:6a4942c: import org.apache.mahout.utils.vectors.TermInfo;
1:6a4942c: import org.apache.mahout.vectorizer.Weight;
1:6a4942c: 
1:6a4942c: import java.util.Iterator;
1:206cee0: 
1:e6f27f1: /**
1:d023fad:  * {@link Iterable} counterpart to {@link LuceneIterator}.
1:e6f27f1:  */
1:d023fad: public final class LuceneIterable implements Iterable<Vector> {
1:db362c2: 
1:206cee0:   public static final double NO_NORMALIZING = -1.0;
1:db362c2: 
1:233d93d:   private final IndexReader indexReader;
1:233d93d:   private final String field;
1:233d93d:   private final String idField;
1:6a4942c:   private final TermInfo terminfo;
1:d023fad:   private final double normPower;
1:a3b9379:   private final double maxPercentErrorDocs;
1:6a4942c:   private final Weight weight;
1:db362c2: 
1:6a4942c:   public LuceneIterable(IndexReader reader, String idField, String field, TermInfo terminfo, Weight weight) {
1:6a4942c:     this(reader, idField, field, terminfo, weight, NO_NORMALIZING);
1:cb030aa:   }
1:6a4942c: 
1:3c22856:   public LuceneIterable(IndexReader indexReader, String idField, String field, TermInfo terminfo, Weight weight,
1:3c22856:       double normPower) {
1:6a4942c:     this(indexReader, idField, field, terminfo, weight, normPower, 0);
1:206cee0:   }
1:6a4942c: 
1:db362c2:   /**
1:db362c2:    * Produce a LuceneIterable that can create the Vector plus normalize it.
1:6a4942c:    *
1:6a4942c:    * @param indexReader         {@link org.apache.lucene.index.IndexReader} to read the documents from.
1:6a4942c:    * @param idField             field containing the id. May be null.
1:6a4942c:    * @param field               field to use for the Vector
1:6a4942c:    * @param normPower           the normalization value. Must be nonnegative, or {@link #NO_NORMALIZING}
1:fad58fe:    * @param maxPercentErrorDocs the percentage of documents in the lucene index that can have a null term vector
1:db362c2:    */
1:15712a6:   public LuceneIterable(IndexReader indexReader,
1:15712a6:                         String idField,
1:15712a6:                         String field,
1:6a4942c:                         TermInfo terminfo,
1:6a4942c:                         Weight weight,
1:15712a6:                         double normPower,
1:15712a6:                         double maxPercentErrorDocs) {
1:d023fad:     this.indexReader = indexReader;
1:db362c2:     this.idField = idField;
1:db362c2:     this.field = field;
1:6a4942c:     this.terminfo = terminfo;
1:db362c2:     this.normPower = normPower;
1:a3b9379:     this.maxPercentErrorDocs = maxPercentErrorDocs;
1:6a4942c:     this.weight = weight;
12:db362c2:   }
1:6a4942c: 
4:db362c2:   @Override
1:db362c2:   public Iterator<Vector> iterator() {
1:10c535c:     return new LuceneIterator(indexReader, idField, field, terminfo, weight, normPower, maxPercentErrorDocs);
1:db362c2:   }
1:db362c2: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:   public LuceneIterable(IndexReader indexReader, String idField, String field, TermInfo terminfo, Weight weight,
1:       double normPower) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     return new LuceneIterator(indexReader, idField, field, terminfo, weight, normPower, maxPercentErrorDocs);
commit:50fd693
commit:fad58fe
/////////////////////////////////////////////////////////////////////////
1:    * @param maxPercentErrorDocs the percentage of documents in the lucene index that can have a null term vector
commit:15712a6
/////////////////////////////////////////////////////////////////////////
1:   public LuceneIterable(IndexReader indexReader,
1:                         String idField,
1:                         String field,
0:                         VectorMapper mapper,
1:                         double normPower,
1:                         double maxPercentErrorDocs) {
commit:d023fad
/////////////////////////////////////////////////////////////////////////
1:  * {@link Iterable} counterpart to {@link LuceneIterator}.
1: public final class LuceneIterable implements Iterable<Vector> {
1:   private final double normPower;
/////////////////////////////////////////////////////////////////////////
0:    * @param indexReader {@link org.apache.lucene.index.IndexReader} to read the documents from.
0:    * @param idField field containing the id. May be null.
0:    * @param field  field to use for the Vector
0:    * @param mapper {@link VectorMapper} for creating {@link Vector}s from Lucene's TermVectors.
0:    * @param normPower the normalization value. Must be nonnegative, or {@link #NO_NORMALIZING}
0:   public LuceneIterable(IndexReader indexReader, String idField, String field, VectorMapper mapper, double normPower) {
1:     this.indexReader = indexReader;
/////////////////////////////////////////////////////////////////////////
0:       return new LuceneIterator(indexReader, idField, field, mapper, normPower);
commit:69ba194
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkArgument(normPower == NO_NORMALIZING || normPower >= 0,
0:         "If specified normPower must be nonnegative", normPower);
commit:024261a
commit:ad2817b
commit:4ef4dc7
commit:b4d9cc8
commit:210fac3
commit:434cdff
/////////////////////////////////////////////////////////////////////////
0:  * A LuceneIterable is an Iterable&lt;Vector&gt; that uses a Lucene index as the source for creating the {@link Vector}.
commit:cb030aa
/////////////////////////////////////////////////////////////////////////
0:         mapper.setDocumentNumber(doc);
0:         if (result == null) {
0:           return null;
1:         }
commit:b5bbe2e
/////////////////////////////////////////////////////////////////////////
0:       throw new IllegalStateException(e);
/////////////////////////////////////////////////////////////////////////
0:       // TODO this doesn't work with the Iterator contract -- hasNext() cannot have a side effect      
0:         throw new IllegalStateException(e);
/////////////////////////////////////////////////////////////////////////
0:         throw new IllegalStateException(e);
commit:758cc1b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors.lucene;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private final TermDocs termDocs;
/////////////////////////////////////////////////////////////////////////
0:       Vector result;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:6a4942c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.utils.vectors.TermInfo;
1: import org.apache.mahout.vectorizer.Weight;
1: 
0: import java.io.IOException;
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:   private final TermInfo terminfo;
1:   private final Weight weight;
1:   public LuceneIterable(IndexReader reader, String idField, String field, TermInfo terminfo, Weight weight) {
1:     this(reader, idField, field, terminfo, weight, NO_NORMALIZING);
1: 
0:   public LuceneIterable(IndexReader indexReader, String idField, String field, TermInfo terminfo, Weight weight, double normPower) {
1:     this(indexReader, idField, field, terminfo, weight, normPower, 0);
1: 
1:    *
1:    * @param indexReader         {@link org.apache.lucene.index.IndexReader} to read the documents from.
1:    * @param idField             field containing the id. May be null.
1:    * @param field               field to use for the Vector
1:    * @param normPower           the normalization value. Must be nonnegative, or {@link #NO_NORMALIZING}
1:                         TermInfo terminfo,
1:                         Weight weight,
1:     this.terminfo = terminfo;
1:     this.weight = weight;
1: 
0:       return new LuceneIterator(indexReader, idField, field, terminfo, weight, normPower, maxPercentErrorDocs);
commit:ecc4cc7
commit:1ec084c
commit:a435efb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Vector;
0:  * A LuceneIterable is an Iterable&lt;Vector&gt; that uses a Lucene index as the source for creating the {@link org.apache.mahout.math.Vector}.
/////////////////////////////////////////////////////////////////////////
0:    * @param mapper    The {@link org.apache.mahout.utils.vectors.lucene.VectorMapper} for creating {@link org.apache.mahout.math.Vector}s from Lucene's TermVectors.
commit:e6f27f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.index.IndexReader;
0: import org.apache.lucene.index.TermDocs;
0: import java.util.Iterator;
1: /**
0:  * A LuceneIterable is an Iterable&lt;Vector&gt; that uses a Lucene index as the source for creating the {@link org.apache.mahout.matrix.Vector}.
0:  * The Field used to create the Vector currently must have Term Vectors stored for it.
1:  */
/////////////////////////////////////////////////////////////////////////
1:    *
0:    * @param reader    The {@link org.apache.lucene.index.IndexReader} to read the documents from.
0:    * @param idField   - The Field containing the id.  May be null
0:    * @param field     The field to use for the Vector
0:    * @param mapper    The {@link org.apache.mahout.utils.vectors.lucene.VectorMapper} for creating {@link org.apache.mahout.matrix.Vector}s from Lucene's TermVectors.
0:     if (normPower != NO_NORMALIZING && normPower < 0) {
0:     idFieldSelector = new SetBasedFieldSelector(Collections.singleton(idField), Collections.emptySet());
/////////////////////////////////////////////////////////////////////////
0:         if (normPower != NO_NORMALIZING) {
commit:90fe0a2
/////////////////////////////////////////////////////////////////////////
0: public class LuceneIterable implements Iterable<Vector> {
commit:ee4a261
/////////////////////////////////////////////////////////////////////////
0: public class LuceneIterable implements VectorIterable {
/////////////////////////////////////////////////////////////////////////
0:   public LuceneIterable(IndexReader reader, String idField, String field, VectorMapper mapper) {
/////////////////////////////////////////////////////////////////////////
0:   public LuceneIterable(IndexReader reader, String idField, String field, VectorMapper mapper, double normPower) {
commit:206cee0
/////////////////////////////////////////////////////////////////////////
0:   private double normPower = NO_NORMALIZING;
1: 
1:   public static final double NO_NORMALIZING = -1.0;
0:     this(reader, idField, field, mapper, NO_NORMALIZING);
0:    * @param reader The {@link org.apache.lucene.index.IndexReader} to read the documents from.
0:    * @param mapper The {@link org.apache.mahout.utils.vectors.lucene.VectorMapper} for creating {@link org.apache.mahout.matrix.Vector}s from Lucene's TermVectors.
0:    * @param normPower The normalization value.  Must be greater than or equal to 0 or equal to {@link #NO_NORMALIZING}
0:     if (normPower != NO_NORMALIZING && normPower < 0){
0:       throw new IllegalArgumentException("normPower must either be -1 or >= 0");
1:     }
0:       idFieldSelector = new SetBasedFieldSelector(Collections.singleton(idField), Collections.emptySet());
/////////////////////////////////////////////////////////////////////////
0:         if (normPower != NO_NORMALIZING){
commit:db362c2
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.lucene;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: import org.apache.lucene.index.IndexReader;
0: import org.apache.lucene.index.TermDocs;
0: import org.apache.lucene.document.FieldSelector;
0: import org.apache.lucene.document.SetBasedFieldSelector;
0: import org.apache.mahout.matrix.Vector;
0: import org.apache.mahout.utils.vectors.VectorIterable;
1: 
0: import java.io.IOException;
0: import java.util.Iterator;
0: import java.util.Collections;
1: 
1: 
1: /**
1:  *
1:  *
0:  **/
0: public class LuceneIteratable implements VectorIterable {
1: 
1: 
0:   private IndexReader indexReader;
0:   private String field;
0:   private String idField;
0:   private FieldSelector idFieldSelector;
1: 
0:   private VectorMapper mapper;
0:   private double normPower = -1;
1: 
0:   public LuceneIteratable(IndexReader reader, String idField, String field, VectorMapper mapper) {
0:     this(reader, idField, field, mapper, 2.0);
1:   }
1: 
1:   /**
1:    * Produce a LuceneIterable that can create the Vector plus normalize it.
0:    * @param reader
0:    * @param idField - The Field containing the id.  May be null
0:    * @param field The field to use for the Vector
0:    * @param mapper
0:    * @param normPower
1:    */
0:   public LuceneIteratable(IndexReader reader, String idField, String field, VectorMapper mapper, double normPower) {
0:     this.indexReader = reader;
1:     this.idField = idField;
1:     this.field = field;
0:     this.mapper = mapper;
1:     this.normPower = normPower;
0:     idFieldSelector = new SetBasedFieldSelector(Collections.singleton(idField), Collections.emptySet());
1:   }
1: 
1: 
1:   @Override
1:   public Iterator<Vector> iterator() {
0:     try {
0:       return new TDIterator();
0:     } catch (IOException e) {
0:       throw new RuntimeException(e);
1:     }
1:   }
1: 
0:   private class TDIterator implements Iterator<Vector> {
0:     private TermDocs termDocs;
1: 
0:     private TDIterator() throws IOException {
0:       //term docs(null) is a better way of iterating all the docs in Lucene
0:       this.termDocs = indexReader.termDocs(null);
1:     }
1: 
1:     @Override
0:     public boolean hasNext() {
0:       try {
0:         return termDocs.next();
0:       } catch (IOException e) {
0:         throw new RuntimeException(e);
1:       }
1:     }
1: 
1:     @Override
0:     public Vector next() {
0:       Vector result = null;
0:       int doc = termDocs.doc();
0:       //
0:       try {
0:         indexReader.getTermFreqVector(doc, field, mapper);
0:         result = mapper.getVector();
0:         if (idField != null) {
0:           String id = indexReader.document(doc, idFieldSelector).get(idField);
0:           result.setName(id);
0:         } else {
0:           result.setName(String.valueOf(doc));
1:         }
0:         if (normPower >= 0){
0:           result = result.normalize(normPower);
1:         }
0:       } catch (IOException e) {
0:         //Log?
0:         throw new RuntimeException(e);
1:       }
1: 
0:       return result;
1:     }
1: 
1: 
1:     @Override
0:     public void remove() {
0:       throw new UnsupportedOperationException();
1:     }
1: 
1:   }
1: 
1: 
1: }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a3b9379
/////////////////////////////////////////////////////////////////////////
1:   private final double maxPercentErrorDocs;
0:   public LuceneIterable(IndexReader indexReader, String idField, String field, VectorMapper mapper, double normPower) {
0:     this(indexReader, idField, field, mapper, normPower, 0);
0:   }
0:   
/////////////////////////////////////////////////////////////////////////
0:   public LuceneIterable(IndexReader indexReader, String idField, String field, VectorMapper mapper, double normPower, double maxPercentErrorDocs) {
1:     this.maxPercentErrorDocs = maxPercentErrorDocs;
0:       return new LuceneIterator(indexReader, idField, field, mapper, normPower, maxPercentErrorDocs);
author:Andrew L. Farris
-------------------------------------------------------------------------------
commit:e55e36d
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
0:  * A LuceneIterable is an Iterable&lt;Vector&gt; that uses a Lucene index as the source for creating the
0:  * {@link Vector}. The Field used to create the Vector currently must have Term Vectors stored for it.
/////////////////////////////////////////////////////////////////////////
0:    * 
0:    * @param reader
0:    *          The {@link org.apache.lucene.index.IndexReader} to read the documents from.
0:    * @param idField
0:    *          - The Field containing the id. May be null
0:    * @param field
0:    *          The field to use for the Vector
0:    * @param mapper
0:    *          The {@link org.apache.mahout.utils.vectors.lucene.VectorMapper} for creating
0:    *          {@link org.apache.mahout.math.Vector}s from Lucene's TermVectors.
0:    * @param normPower
0:    *          The normalization value. Must be greater than or equal to 0 or equal to {@link #NO_NORMALIZING}
0:   public LuceneIterable(IndexReader reader,
0:                         String idField,
0:                         String field,
0:                         VectorMapper mapper,
0:                         double normPower) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       // term docs(null) is a better way of iterating all the docs in Lucene
/////////////////////////////////////////////////////////////////////////
0:         // Log?
/////////////////////////////////////////////////////////////////////////
commit:233d93d
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.Collections;
0: import java.util.Iterator;
0: 
0:   
1:   private final IndexReader indexReader;
1:   private final String field;
1:   private final String idField;
0:   private final FieldSelector idFieldSelector;
0:   
0:   private final VectorMapper mapper;
0:   private double normPower = LuceneIterable.NO_NORMALIZING;
0:   
0:   
0:     this(reader, idField, field, mapper, LuceneIterable.NO_NORMALIZING);
0:   
/////////////////////////////////////////////////////////////////////////
0:     if (normPower != LuceneIterable.NO_NORMALIZING && normPower < 0) {
/////////////////////////////////////////////////////////////////////////
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:   
0:     
0:     
0:       // TODO this doesn't work with the Iterator contract -- hasNext() cannot have a side effect
0:     
/////////////////////////////////////////////////////////////////////////
0:         if (normPower != LuceneIterable.NO_NORMALIZING) {
0:       
0:     
0:     
0:     
0:   
0:   
============================================================================