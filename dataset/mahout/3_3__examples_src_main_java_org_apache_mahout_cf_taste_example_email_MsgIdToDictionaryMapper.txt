1:4194a28: /**
1:4194a28:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4194a28:  * contributor license agreements.  See the NOTICE file distributed with
1:4194a28:  * this work for additional information regarding copyright ownership.
1:4194a28:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4194a28:  * (the "License"); you may not use this file except in compliance with
1:4194a28:  * the License.  You may obtain a copy of the License at
1:4194a28:  *
1:4194a28:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4194a28:  *
1:4194a28:  * Unless required by applicable law or agreed to in writing, software
1:4194a28:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4194a28:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4194a28:  * See the License for the specific language governing permissions and
1:4194a28:  * limitations under the License.
1:4194a28:  */
2:29a7f38: 
1:4194a28: package org.apache.mahout.cf.taste.example.email;
1:29a7f38: 
1:29a7f38: import org.apache.hadoop.io.Text;
1:29a7f38: import org.apache.hadoop.mapreduce.Mapper;
1:29a7f38: import org.apache.mahout.math.VarIntWritable;
1:29a7f38: 
1:29a7f38: import java.io.IOException;
1:29a7f38: 
1:29a7f38: /**
1:29a7f38:  * Assumes the input is in the format created by {@link org.apache.mahout.text.SequenceFilesFromMailArchives}
1:29a7f38:  */
1:4194a28: public final class MsgIdToDictionaryMapper extends Mapper<Text, Text, Text, VarIntWritable> {
1:4194a28: 
1:29a7f38:   @Override
1:29a7f38:   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
1:29a7f38:     //message id is in the key: /201008/AANLkTikvVnhNH+Y5AGEwqd2=u0CFv2mCm0ce6E6oBnj1@mail.gmail.com
1:29a7f38:     String keyStr = key.toString();
1:44459bd:     int idx = keyStr.lastIndexOf('@'); //find the last @
1:4194a28:     if (idx == -1) {
1:5389d76:       context.getCounter(EmailUtility.Counters.NO_MESSAGE_ID).increment(1);
1:4194a28:     } else {
1:5389d76:       //found the @, now find the last slash before the @ and grab everything after that
1:5389d76:       idx = keyStr.lastIndexOf('/', idx);
1:4194a28:       String msgId = keyStr.substring(idx + 1);
1:4fbfbc6:       if (EmailUtility.WHITESPACE.matcher(msgId).matches()) {
1:5389d76:         context.getCounter(EmailUtility.Counters.NO_MESSAGE_ID).increment(1);
1:4fbfbc6:       } else {
1:4fbfbc6:         context.write(new Text(msgId), new VarIntWritable(1));
1:5389d76:       }
2:29a7f38:     }
1:29a7f38:   }
1:29a7f38: }
============================================================================
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
1:     int idx = keyStr.lastIndexOf('@'); //find the last @
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:       if (EmailUtility.WHITESPACE.matcher(msgId).matches()) {
1:       } else {
1:         context.write(new Text(msgId), new VarIntWritable(1));
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.cf.taste.example.email;
/////////////////////////////////////////////////////////////////////////
1: public final class MsgIdToDictionaryMapper extends Mapper<Text, Text, Text, VarIntWritable> {
1: 
/////////////////////////////////////////////////////////////////////////
0:     int idx = keyStr.lastIndexOf('/');
1:     if (idx == -1) {
1:     } else {
1:       String msgId = keyStr.substring(idx + 1);
0:       context.write(new Text(msgId), new VarIntWritable(1));
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:5389d76
/////////////////////////////////////////////////////////////////////////
0:     int idx = keyStr.lastIndexOf('@');//find the last @
1:       context.getCounter(EmailUtility.Counters.NO_MESSAGE_ID).increment(1);
1:       //found the @, now find the last slash before the @ and grab everything after that
1:       idx = keyStr.lastIndexOf('/', idx);
0:       if (EmailUtility.WHITESPACE.matcher(msgId).matches() == false) {
0:         context.write(new Text(msgId), new VarIntWritable(1));
0:       } else {
1:         context.getCounter(EmailUtility.Counters.NO_MESSAGE_ID).increment(1);
1:       }
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.cf.taste.example.email;
1: 
1: 
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.VarIntWritable;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * Assumes the input is in the format created by {@link org.apache.mahout.text.SequenceFilesFromMailArchives}
1:  */
0: public class MsgIdToDictionaryMapper extends
0:         Mapper<Text, Text, Text, VarIntWritable> {
0:   public enum Counters {
0:     NO_MESSAGE_ID
1:   }
1: 
1:   @Override
1:   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
1:     //message id is in the key: /201008/AANLkTikvVnhNH+Y5AGEwqd2=u0CFv2mCm0ce6E6oBnj1@mail.gmail.com
1:     String keyStr = key.toString();
0:     int idx = keyStr.lastIndexOf("/");
0:     String msgId = null;
0:     if (idx != -1) {
0:       msgId = keyStr.substring(idx + 1);
0:       context.write(new Text(msgId), new VarIntWritable(1));
0:     } else {
0:       context.getCounter(Counters.NO_MESSAGE_ID).increment(1);
1:     }
1:   }
1: }
============================================================================