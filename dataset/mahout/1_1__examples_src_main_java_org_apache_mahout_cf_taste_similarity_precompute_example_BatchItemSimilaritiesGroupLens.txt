1:1e898e7: /**
1:1e898e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1e898e7:  * contributor license agreements.  See the NOTICE file distributed with
1:1e898e7:  * this work for additional information regarding copyright ownership.
1:1e898e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1e898e7:  * (the "License"); you may not use this file except in compliance with
1:1e898e7:  * the License.  You may obtain a copy of the License at
1:1e898e7:  *
1:1e898e7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1e898e7:  *
1:1e898e7:  * Unless required by applicable law or agreed to in writing, software
1:1e898e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1e898e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1e898e7:  * See the License for the specific language governing permissions and
1:1e898e7:  * limitations under the License.
1:1e898e7:  */
1:1e898e7: 
1:1e898e7: package org.apache.mahout.cf.taste.similarity.precompute.example;
1:1e898e7: 
1:1e898e7: import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
1:1e898e7: import org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity;
1:1e898e7: import org.apache.mahout.cf.taste.impl.similarity.precompute.FileSimilarItemsWriter;
1:1e898e7: import org.apache.mahout.cf.taste.impl.similarity.precompute.MultithreadedBatchItemSimilarities;
1:f9baeba: import org.apache.mahout.cf.taste.model.DataModel;
1:50349a6: import org.apache.mahout.cf.taste.recommender.ItemBasedRecommender;
1:1e898e7: import org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities;
1:1e898e7: 
1:1e898e7: import java.io.File;
1:1e898e7: 
1:1e898e7: /**
1:1e898e7:  * Example that precomputes all item similarities of the Movielens1M dataset
1:1e898e7:  *
1:1e898e7:  * Usage: download movielens1M from http://www.grouplens.org/node/73 , unzip it and invoke this code with the path
1:1e898e7:  * to the ratings.dat file as argument
1:1e898e7:  *
1:1e898e7:  */
1:3c22856: public final class BatchItemSimilaritiesGroupLens {
1:3c22856: 
1:3c22856:   private BatchItemSimilaritiesGroupLens() {}
1:1e898e7: 
1:1e898e7:   public static void main(String[] args) throws Exception {
1:1e898e7: 
1:1e898e7:     if (args.length != 1) {
1:1e898e7:       System.err.println("Need path to ratings.dat of the movielens1M dataset as argument!");
1:1e898e7:       System.exit(-1);
1:1e898e7:     }
1:1e898e7: 
1:1e898e7:     File resultFile = new File(System.getProperty("java.io.tmpdir"), "similarities.csv");
1:1e898e7:     if (resultFile.exists()) {
1:1e898e7:       resultFile.delete();
1:1e898e7:     }
1:1e898e7: 
1:f9baeba:     DataModel dataModel = new GroupLensDataModel(new File(args[0]));
1:50349a6:     ItemBasedRecommender recommender = new GenericItemBasedRecommender(dataModel,
1:1e898e7:         new LogLikelihoodSimilarity(dataModel));
1:1e898e7:     BatchItemSimilarities batch = new MultithreadedBatchItemSimilarities(recommender, 5);
1:1e898e7: 
1:1e898e7:     int numSimilarities = batch.computeItemSimilarities(Runtime.getRuntime().availableProcessors(), 1,
1:1e898e7:         new FileSimilarItemsWriter(resultFile));
1:1e898e7: 
1:6d16230:     System.out.println("Computed " + numSimilarities + " similarities for " + dataModel.getNumItems() + " items "
1:6d16230:         + "and saved them to " + resultFile.getAbsolutePath());
1:1e898e7:   }
1:1e898e7: 
1:1e898e7: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     System.out.println("Computed " + numSimilarities + " similarities for " + dataModel.getNumItems() + " items "
1:         + "and saved them to " + resultFile.getAbsolutePath());
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1: public final class BatchItemSimilaritiesGroupLens {
1: 
1:   private BatchItemSimilaritiesGroupLens() {}
commit:50349a6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.recommender.ItemBasedRecommender;
/////////////////////////////////////////////////////////////////////////
1:     ItemBasedRecommender recommender = new GenericItemBasedRecommender(dataModel,
commit:f9baeba
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.model.DataModel;
/////////////////////////////////////////////////////////////////////////
1:     DataModel dataModel = new GroupLensDataModel(new File(args[0]));
commit:1e898e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.similarity.precompute.example;
1: 
0: import org.apache.mahout.cf.taste.example.grouplens.GroupLensDataModel;
0: import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
1: import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
1: import org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity;
1: import org.apache.mahout.cf.taste.impl.similarity.precompute.FileSimilarItemsWriter;
1: import org.apache.mahout.cf.taste.impl.similarity.precompute.MultithreadedBatchItemSimilarities;
1: import org.apache.mahout.cf.taste.similarity.precompute.BatchItemSimilarities;
1: 
1: import java.io.File;
1: 
1: /**
1:  * Example that precomputes all item similarities of the Movielens1M dataset
1:  *
1:  * Usage: download movielens1M from http://www.grouplens.org/node/73 , unzip it and invoke this code with the path
1:  * to the ratings.dat file as argument
1:  *
1:  */
0: public class BatchItemSimilaritiesGroupLens {
1: 
1:   public static void main(String[] args) throws Exception {
1: 
1:     if (args.length != 1) {
1:       System.err.println("Need path to ratings.dat of the movielens1M dataset as argument!");
1:       System.exit(-1);
1:     }
1: 
1:     File resultFile = new File(System.getProperty("java.io.tmpdir"), "similarities.csv");
1:     if (resultFile.exists()) {
1:       resultFile.delete();
1:     }
1: 
0:     FileDataModel dataModel = new GroupLensDataModel(new File(args[0]));
0:     GenericItemBasedRecommender recommender = new GenericItemBasedRecommender(dataModel,
1:         new LogLikelihoodSimilarity(dataModel));
1:     BatchItemSimilarities batch = new MultithreadedBatchItemSimilarities(recommender, 5);
1: 
1:     int numSimilarities = batch.computeItemSimilarities(Runtime.getRuntime().availableProcessors(), 1,
1:         new FileSimilarItemsWriter(resultFile));
1: 
0:     System.out.println("Computed " + numSimilarities + " similarities for " + dataModel.getNumItems() + " items " +
0:         "and saved them to " + resultFile.getAbsolutePath());
1:   }
1: 
1: }
============================================================================