1:623be86: /**
1:623be86:  * Licensed to the Apache Software Foundation (ASF) under one
1:623be86:  * or more contributor license agreements. See the NOTICE file
1:623be86:  * distributed with this work for additional information
1:623be86:  * regarding copyright ownership. The ASF licenses this file
1:623be86:  * to you under the Apache License, Version 2.0 (the
1:623be86:  * "License"); you may not use this file except in compliance
1:623be86:  * with the License. You may obtain a copy of the License at
1:623be86:  *
1:623be86:  * http://www.apache.org/licenses/LICENSE-2.0
1:623be86:  *
1:623be86:  * Unless required by applicable law or agreed to in writing,
1:623be86:  * software distributed under the License is distributed on an
1:623be86:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:623be86:  * KIND, either express or implied. See the License for the
1:623be86:  * specific language governing permissions and limitations
1:623be86:  * under the License.
1:623be86:  */
1:623be86: 
1:623be86: package org.apache.mahout.utils.nlp.collocations.llr;
1:623be86: 
1:623be86: import java.io.IOException;
1:623be86: import java.nio.ByteBuffer;
1:623be86: import java.nio.CharBuffer;
1:623be86: import java.nio.charset.CharsetEncoder;
1:623be86: import java.nio.charset.CodingErrorAction;
1:623be86: 
1:85f9ece: import org.apache.commons.io.Charsets;
1:623be86: import org.apache.hadoop.util.bloom.Filter;
1:623be86: import org.apache.hadoop.util.bloom.Key;
1:623be86: import org.apache.lucene.analysis.TokenFilter;
1:623be86: import org.apache.lucene.analysis.TokenStream;
1:e4dfc93: import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
1:623be86: 
1:623be86: /**
1:623be86:  * Emits tokens based on bloom filter membership.
1:623be86:  */
1:4ef41c7: public final class BloomTokenFilter extends TokenFilter {
1:623be86:   
1:623be86:   private final Filter filter;
1:e4dfc93:   private final CharTermAttribute termAtt;
1:623be86:   private final CharsetEncoder encoder;
1:623be86:   private final Key key;
1:623be86:   private final boolean keepMembers;
1:623be86:   
1:623be86:   /** 
1:623be86:    * @param filter tokens will be checked for membership in this bloom filter
1:623be86:    * @param in the tokenstream to read.
1:623be86:    * @param keepMembers keep memoers of the bloom filter? If true works like
1:623be86:    *   a whitelist and members found in the list are kept and all others are
1:623be86:    *   dropped. If false works like a stoplist and members found in the 
1:623be86:    *   filter are dropped all others are kept.
1:623be86:    */
1:623be86:   public BloomTokenFilter(Filter filter, boolean keepMembers, TokenStream in) {
1:623be86:     super(in);
1:623be86:     this.filter = filter;
1:623be86:     this.keepMembers = keepMembers;
1:623be86:     this.key = new Key();
1:e4dfc93:     this.termAtt = addAttribute(CharTermAttribute.class);
1:623be86:     this.encoder = Charsets.UTF_8.newEncoder().
1:623be86:       onMalformedInput(CodingErrorAction.REPORT).
1:623be86:       onUnmappableCharacter(CodingErrorAction.REPORT);
1:623be86:   }
1:623be86:   
1:623be86:   @Override
1:623be86:   public boolean incrementToken() throws IOException {
1:623be86:     while (input.incrementToken()) {
1:e4dfc93:       ByteBuffer bytes =  encoder.encode(CharBuffer.wrap(termAtt.buffer(), 0, termAtt.length()));
1:623be86:       key.set(bytes.array(), 1.0f);
1:623be86:       boolean member = filter.membershipTest(key);
1:623be86:       if ((keepMembers && member) || (!keepMembers && !member)) {
1:623be86:         return true;
1:623be86:       }
1:623be86:     }
1:623be86:     return false;
1:623be86:   }
1:623be86: 
1:623be86: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.Charsets;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e4dfc93
/////////////////////////////////////////////////////////////////////////
1: import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
/////////////////////////////////////////////////////////////////////////
1:   private final CharTermAttribute termAtt;
/////////////////////////////////////////////////////////////////////////
1:     this.termAtt = addAttribute(CharTermAttribute.class);
/////////////////////////////////////////////////////////////////////////
1:       ByteBuffer bytes =  encoder.encode(CharBuffer.wrap(termAtt.buffer(), 0, termAtt.length()));
commit:4ef41c7
/////////////////////////////////////////////////////////////////////////
1: public final class BloomTokenFilter extends TokenFilter {
commit:623be86
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements. See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.mahout.utils.nlp.collocations.llr;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.CharBuffer;
1: import java.nio.charset.CharsetEncoder;
1: import java.nio.charset.CodingErrorAction;
1: 
0: import com.google.common.base.Charsets;
1: import org.apache.hadoop.util.bloom.Filter;
1: import org.apache.hadoop.util.bloom.Key;
1: import org.apache.lucene.analysis.TokenFilter;
1: import org.apache.lucene.analysis.TokenStream;
0: import org.apache.lucene.analysis.tokenattributes.TermAttribute;
1: 
1: /**
1:  * Emits tokens based on bloom filter membership.
1:  */
0: public class BloomTokenFilter extends TokenFilter {
1:   
1:   private final Filter filter;
0:   private final TermAttribute termAtt;
1:   private final CharsetEncoder encoder;
1:   private final Key key;
1:   private final boolean keepMembers;
1:   
1:   /** 
1:    * @param filter tokens will be checked for membership in this bloom filter
1:    * @param in the tokenstream to read.
1:    * @param keepMembers keep memoers of the bloom filter? If true works like
1:    *   a whitelist and members found in the list are kept and all others are
1:    *   dropped. If false works like a stoplist and members found in the 
1:    *   filter are dropped all others are kept.
1:    */
1:   public BloomTokenFilter(Filter filter, boolean keepMembers, TokenStream in) {
1:     super(in);
1:     this.filter = filter;
1:     this.keepMembers = keepMembers;
1:     this.key = new Key();
0:     this.termAtt = addAttribute(TermAttribute.class);
1:     this.encoder = Charsets.UTF_8.newEncoder().
1:       onMalformedInput(CodingErrorAction.REPORT).
1:       onUnmappableCharacter(CodingErrorAction.REPORT);
1:   }
1:   
1:   @Override
1:   public boolean incrementToken() throws IOException {
1:     while (input.incrementToken()) {
0:       ByteBuffer bytes =  encoder.encode(CharBuffer.wrap(termAtt.termBuffer(), 0, termAtt.termLength()));
1:       key.set(bytes.array(), 1.0f);
1:       boolean member = filter.membershipTest(key);
1:       if ((keepMembers && member) || (!keepMembers && !member)) {
1:         return true;
1:       }
1:     }
1:     return false;
1:   }
1: 
1: }
============================================================================