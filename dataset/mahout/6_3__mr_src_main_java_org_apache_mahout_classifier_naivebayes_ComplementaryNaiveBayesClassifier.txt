2:515a414: /**
1:515a414:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:515a414:  * contributor license agreements.  See the NOTICE file distributed with
1:515a414:  * this work for additional information regarding copyright ownership.
1:515a414:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:515a414:  * (the "License"); you may not use this file except in compliance with
1:515a414:  * the License.  You may obtain a copy of the License at
2:515a414:  *
1:515a414:  *     http://www.apache.org/licenses/LICENSE-2.0
1:515a414:  *
1:515a414:  * Unless required by applicable law or agreed to in writing, software
1:515a414:  * distributed under the License is distributed on an "AS IS" BASIS,
1:515a414:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:515a414:  * See the License for the specific language governing permissions and
1:515a414:  * limitations under the License.
2:515a414:  */
5:515a414: 
1:515a414: package org.apache.mahout.classifier.naivebayes;
1:d8d721a: 
1:515a414: 
1:94b08db: /** Implementation of the Naive Bayes Classifier Algorithm */
1:f4d9a5b: public class ComplementaryNaiveBayesClassifier extends AbstractNaiveBayesClassifier {
1:515a414:   public ComplementaryNaiveBayesClassifier(NaiveBayesModel model) {
1:515a414:     super(model);
1:515a414:   }
1:d94eb39: 
1:515a414:   @Override
1:515a414:   public double getScoreForLabelFeature(int label, int feature) {
1:939ac30:     NaiveBayesModel model = getModel();
1:94b08db:     double weight = computeWeight(model.featureWeight(feature), model.weight(label, feature),
1:d94eb39:         model.totalWeightSum(), model.labelWeight(label), model.alphaI(), model.numFeatures());
1:94b08db:     // see http://people.csail.mit.edu/jrennie/papers/icml03-nb.pdf - Section 3.2, Weight Magnitude Errors
1:94b08db:     return weight / model.thetaNormalizer(label);
1:d94eb39:   }
1:e3fb0c4: 
1:94b08db:   // see http://people.csail.mit.edu/jrennie/papers/icml03-nb.pdf - Section 3.1, Skewed Data bias
1:d94eb39:   public static double computeWeight(double featureWeight, double featureLabelWeight,
1:d94eb39:       double totalWeight, double labelWeight, double alphaI, double numFeatures) {
1:d94eb39:     double numerator = featureWeight - featureLabelWeight + alphaI;
1:d94eb39:     double denominator = totalWeight - labelWeight + alphaI * numFeatures;
1:d94eb39:     return -Math.log(numerator / denominator);
1:515a414:   }
1:515a414: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:94b08db
/////////////////////////////////////////////////////////////////////////
1: /** Implementation of the Naive Bayes Classifier Algorithm */
/////////////////////////////////////////////////////////////////////////
1:     double weight = computeWeight(model.featureWeight(feature), model.weight(label, feature),
1:     // see http://people.csail.mit.edu/jrennie/papers/icml03-nb.pdf - Section 3.2, Weight Magnitude Errors
1:     return weight / model.thetaNormalizer(label);
1:   // see http://people.csail.mit.edu/jrennie/papers/icml03-nb.pdf - Section 3.1, Skewed Data bias
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
0:     double numerator = model.featureWeight(feature) - model.weight(label, feature) + model.alphaI();
0:     double denominator =  model.totalWeightSum() - model.labelWeight(label) + model.alphaI() * model.numFeatures();
1: 
0:     return Math.log(numerator / denominator);
author:smarthi
-------------------------------------------------------------------------------
commit:fa29726
/////////////////////////////////////////////////////////////////////////
0:     double weight=computeWeight(model.featureWeight(feature), model.weight(label, feature),
0:     // http://people.csail.mit.edu/jrennie/papers/icml03-nb.pdf - Section 3.2, Weight Magnitude Errors
0:     return weight/model.thetaNormalizer(label);
0:   // http://people.csail.mit.edu/jrennie/papers/icml03-nb.pdf - Section 3.1, Skewed Data bias
author:Robin Anil
-------------------------------------------------------------------------------
commit:f4d9a5b
/////////////////////////////////////////////////////////////////////////
1: public class ComplementaryNaiveBayesClassifier extends AbstractNaiveBayesClassifier {
commit:d94eb39
/////////////////////////////////////////////////////////////////////////
0:     return computeWeight(model.featureWeight(feature), model.weight(label, feature),
1:         model.totalWeightSum(), model.labelWeight(label), model.alphaI(), model.numFeatures());
1:   }
1: 
1:   public static double computeWeight(double featureWeight, double featureLabelWeight,
1:       double totalWeight, double labelWeight, double alphaI, double numFeatures) {
1:     double numerator = featureWeight - featureLabelWeight + alphaI;
1:     double denominator = totalWeight - labelWeight + alphaI * numFeatures;
1:     return -Math.log(numerator / denominator);
commit:1bdf3ab
/////////////////////////////////////////////////////////////////////////
commit:a344c6b
/////////////////////////////////////////////////////////////////////////
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
1: 
commit:1526c5b
/////////////////////////////////////////////////////////////////////////
commit:515a414
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.naivebayes;
1: 
1: 
1: /**
0:  * Class implementing the Naive Bayes Classifier Algorithm
1:  * 
1:  */
0: public class ComplementaryNaiveBayesClassifier extends AbstractNaiveBayesClassifier { 
1:  
1:   public ComplementaryNaiveBayesClassifier(NaiveBayesModel model) {
1:     super(model);
1:   }
1: 
1:   @Override
1:   public double getScoreForLabelFeature(int label, int feature) {
0:     double result = model.getWeightMatrix().get(label, feature);
0:     double vocabCount = model.getVocabCount();
0:     double featureSum = model.getFeatureSum().get(feature);
0:     double totalSum = model.getTotalSum();
0:     double labelSum = model.getLabelSum().get(label);
0:     double numerator = featureSum - result + model.getAlphaI();
0:     double denominator =  totalSum - labelSum + vocabCount;
0:     double weight = Math.log(numerator / denominator);
0:     result = weight / model.getPerlabelThetaNormalizer().get(label);
0:     return result;
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:939ac30
/////////////////////////////////////////////////////////////////////////
1:     NaiveBayesModel model = getModel();
============================================================================