1:7892be3: /**
1:7892be3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7892be3:  * contributor license agreements.  See the NOTICE file distributed with
1:7892be3:  * this work for additional information regarding copyright ownership.
1:7892be3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7892be3:  * (the "License"); you may not use this file except in compliance with
1:7892be3:  * the License.  You may obtain a copy of the License at
1:7892be3:  *
1:7892be3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7892be3:  *
1:7892be3:  * Unless required by applicable law or agreed to in writing, software
1:7892be3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7892be3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7892be3:  * See the License for the specific language governing permissions and
1:7892be3:  * limitations under the License.
1:7892be3:  */
1:7892be3: 
1:7892be3: package org.apache.mahout.cf.taste.impl.recommender.svd;
1:7892be3: 
1:7892be3: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:7892be3: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:7892be3: import org.apache.mahout.cf.taste.model.DataModel;
1:e23728d: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:7892be3: import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
1:7892be3: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:055f4ab: import org.easymock.EasyMock;
1:7892be3: import org.junit.Test;
1:7892be3: 
1:7892be3: import java.util.List;
1:7892be3: 
1:7892be3: public class SVDRecommenderTest extends TasteTestCase {
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void estimatePreference() throws Exception {
1:7892be3:     DataModel dataModel = EasyMock.createMock(DataModel.class);
1:7892be3:     Factorizer factorizer = EasyMock.createMock(Factorizer.class);
1:7892be3:     Factorization factorization = EasyMock.createMock(Factorization.class);
1:7892be3: 
1:7892be3:     EasyMock.expect(factorizer.factorize()).andReturn(factorization);
1:7892be3:     EasyMock.expect(factorization.getUserFeatures(1L)).andReturn(new double[] { 0.4, 2 });
1:7892be3:     EasyMock.expect(factorization.getItemFeatures(5L)).andReturn(new double[] { 1, 0.3 });
1:7892be3:     EasyMock.replay(dataModel, factorizer, factorization);
1:7892be3: 
1:7892be3:     SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer);
1:7892be3: 
1:7892be3:     float estimate = svdRecommender.estimatePreference(1L, 5L);
1:7892be3:     assertEquals(1, estimate, EPSILON);
1:7892be3: 
1:7892be3:     EasyMock.verify(dataModel, factorizer, factorization);
1:7892be3:   }
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void recommend() throws Exception {
1:7892be3:     DataModel dataModel = EasyMock.createMock(DataModel.class);
1:e23728d:     PreferenceArray preferencesFromUser = EasyMock.createMock(PreferenceArray.class);
1:7892be3:     CandidateItemsStrategy candidateItemsStrategy = EasyMock.createMock(CandidateItemsStrategy.class);
1:7892be3:     Factorizer factorizer = EasyMock.createMock(Factorizer.class);
1:7892be3:     Factorization factorization = EasyMock.createMock(Factorization.class);
1:7892be3: 
1:7892be3:     FastIDSet candidateItems = new FastIDSet();
1:7892be3:     candidateItems.add(5L);
1:7892be3:     candidateItems.add(3L);
1:7892be3: 
1:7892be3:     EasyMock.expect(factorizer.factorize()).andReturn(factorization);
1:e23728d:     EasyMock.expect(dataModel.getPreferencesFromUser(1L)).andReturn(preferencesFromUser);
1:d141c8e:     EasyMock.expect(candidateItemsStrategy.getCandidateItems(1L, preferencesFromUser, dataModel, false))
1:e23728d:         .andReturn(candidateItems);
1:7892be3:     EasyMock.expect(factorization.getUserFeatures(1L)).andReturn(new double[] { 0.4, 2 });
1:7892be3:     EasyMock.expect(factorization.getItemFeatures(5L)).andReturn(new double[] { 1, 0.3 });
1:7892be3:     EasyMock.expect(factorization.getUserFeatures(1L)).andReturn(new double[] { 0.4, 2 });
1:7892be3:     EasyMock.expect(factorization.getItemFeatures(3L)).andReturn(new double[] { 2, 0.6 });
1:7892be3: 
1:7892be3:     EasyMock.replay(dataModel, candidateItemsStrategy, factorizer, factorization);
1:7892be3: 
1:7892be3:     SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer, candidateItemsStrategy);
1:7892be3: 
1:7892be3:     List<RecommendedItem> recommendedItems = svdRecommender.recommend(1L, 5);
1:7892be3:     assertEquals(2, recommendedItems.size());
1:7892be3:     assertEquals(3L, recommendedItems.get(0).getItemID());
1:b16c260:     assertEquals(2.0f, recommendedItems.get(0).getValue(), EPSILON);
1:7892be3:     assertEquals(5L, recommendedItems.get(1).getItemID());
1:b16c260:     assertEquals(1.0f, recommendedItems.get(1).getValue(), EPSILON);
1:7892be3: 
1:7892be3:     EasyMock.verify(dataModel, candidateItemsStrategy, factorizer, factorization);
1:7892be3:   }
1:7892be3: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:d141c8e
/////////////////////////////////////////////////////////////////////////
1:     EasyMock.expect(candidateItemsStrategy.getCandidateItems(1L, preferencesFromUser, dataModel, false))
commit:e23728d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
/////////////////////////////////////////////////////////////////////////
1:     PreferenceArray preferencesFromUser = EasyMock.createMock(PreferenceArray.class);
/////////////////////////////////////////////////////////////////////////
1:     EasyMock.expect(dataModel.getPreferencesFromUser(1L)).andReturn(preferencesFromUser);
0:     EasyMock.expect(candidateItemsStrategy.getCandidateItems(1L, preferencesFromUser, dataModel))
1:         .andReturn(candidateItems);
commit:7892be3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.recommender.svd;
1: 
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.recommender.CandidateItemsStrategy;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
0: import org.easymock.classextension.EasyMock;
1: import org.junit.Test;
1: 
1: import java.util.List;
1: 
1: public class SVDRecommenderTest extends TasteTestCase {
1: 
1:   @Test
1:   public void estimatePreference() throws Exception {
1:     DataModel dataModel = EasyMock.createMock(DataModel.class);
1:     Factorizer factorizer = EasyMock.createMock(Factorizer.class);
1:     Factorization factorization = EasyMock.createMock(Factorization.class);
1: 
1:     EasyMock.expect(factorizer.factorize()).andReturn(factorization);
1:     EasyMock.expect(factorization.getUserFeatures(1L)).andReturn(new double[] { 0.4, 2 });
1:     EasyMock.expect(factorization.getItemFeatures(5L)).andReturn(new double[] { 1, 0.3 });
1:     EasyMock.replay(dataModel, factorizer, factorization);
1: 
1:     SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer);
1: 
1:     float estimate = svdRecommender.estimatePreference(1L, 5L);
1:     assertEquals(1, estimate, EPSILON);
1: 
1:     EasyMock.verify(dataModel, factorizer, factorization);
1:   }
1: 
1:   @Test
1:   public void recommend() throws Exception {
1:     DataModel dataModel = EasyMock.createMock(DataModel.class);
1:     CandidateItemsStrategy candidateItemsStrategy = EasyMock.createMock(CandidateItemsStrategy.class);
1:     Factorizer factorizer = EasyMock.createMock(Factorizer.class);
1:     Factorization factorization = EasyMock.createMock(Factorization.class);
1: 
1:     FastIDSet candidateItems = new FastIDSet();
1:     candidateItems.add(5L);
1:     candidateItems.add(3L);
1: 
1:     EasyMock.expect(factorizer.factorize()).andReturn(factorization);
0:     EasyMock.expect(candidateItemsStrategy.getCandidateItems(1L, dataModel)).andReturn(candidateItems);
1:     EasyMock.expect(factorization.getUserFeatures(1L)).andReturn(new double[] { 0.4, 2 });
1:     EasyMock.expect(factorization.getItemFeatures(5L)).andReturn(new double[] { 1, 0.3 });
1:     EasyMock.expect(factorization.getUserFeatures(1L)).andReturn(new double[] { 0.4, 2 });
1:     EasyMock.expect(factorization.getItemFeatures(3L)).andReturn(new double[] { 2, 0.6 });
1: 
1:     EasyMock.replay(dataModel, candidateItemsStrategy, factorizer, factorization);
1: 
1:     SVDRecommender svdRecommender = new SVDRecommender(dataModel, factorizer, candidateItemsStrategy);
1: 
1:     List<RecommendedItem> recommendedItems = svdRecommender.recommend(1L, 5);
1:     assertEquals(2, recommendedItems.size());
1:     assertEquals(3L, recommendedItems.get(0).getItemID());
0:     assertEquals(2f, recommendedItems.get(0).getValue(), EPSILON);
1:     assertEquals(5L, recommendedItems.get(1).getItemID());
0:     assertEquals(1f, recommendedItems.get(1).getValue(), EPSILON);
1: 
1:     EasyMock.verify(dataModel, candidateItemsStrategy, factorizer, factorization);
1:   }
1: }
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:055f4ab
/////////////////////////////////////////////////////////////////////////
1: import org.easymock.EasyMock;
commit:208aa07
/////////////////////////////////////////////////////////////////////////
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(2.0f, recommendedItems.get(0).getValue(), EPSILON);
1:     assertEquals(1.0f, recommendedItems.get(1).getValue(), EPSILON);
============================================================================