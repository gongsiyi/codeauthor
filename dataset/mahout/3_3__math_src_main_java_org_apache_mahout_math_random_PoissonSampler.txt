1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
3:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:a07bfc3: import com.google.common.collect.Lists;
1:127d450: import org.apache.commons.math3.distribution.PoissonDistribution;
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:2deba36: import org.apache.mahout.common.RandomWrapper;
1:a07bfc3: 
1:a07bfc3: import java.util.List;
1:a07bfc3: 
1:a07bfc3: /**
1:a07bfc3:  * Samples from a Poisson distribution.  Should probably not be used for lambda > 1000 or so.
1:a07bfc3:  */
1:8b6a26a: public final class PoissonSampler extends AbstractSamplerFunction {
1:a07bfc3: 
1:127d450:   private double limit;
1:127d450:   private Multinomial<Integer> partial;
1:2deba36:   private final RandomWrapper gen;
1:127d450:   private final PoissonDistribution pd;
1:a07bfc3: 
1:127d450:   public PoissonSampler(double lambda) {
1:127d450:     limit = 1;
1:127d450:     gen = RandomUtils.getRandom();
1:2deba36:     pd = new PoissonDistribution(gen.getRandomGenerator(),
1:2deba36:                                  lambda,
1:2deba36:                                  PoissonDistribution.DEFAULT_EPSILON,
1:2deba36:                                  PoissonDistribution.DEFAULT_MAX_ITERATIONS);
1:127d450:   }
1:127d450: 
1:127d450:   @Override
1:127d450:   public Double sample() {
1:127d450:     return sample(gen.nextDouble());
1:127d450:   }
1:127d450: 
1:127d450:   double sample(double u) {
1:127d450:     if (u < limit) {
1:127d450:       List<WeightedThing<Integer>> steps = Lists.newArrayList();
1:127d450:       limit = 1;
1:127d450:       int i = 0;
1:127d450:       while (u / 20 < limit) {
1:127d450:         double pdf = pd.probability(i);
1:127d450:         limit -= pdf;
1:02ff22f:         steps.add(new WeightedThing<>(i, pdf));
1:127d450:         i++;
1:127d450:       }
1:02ff22f:       steps.add(new WeightedThing<>(steps.size(), limit));
1:02ff22f:       partial = new Multinomial<>(steps);
5:a07bfc3:     }
1:127d450:     return partial.sample(u);
1:127d450:   }
1:a07bfc3: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:         steps.add(new WeightedThing<>(i, pdf));
1:       steps.add(new WeightedThing<>(steps.size(), limit));
1:       partial = new Multinomial<>(steps);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2deba36
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomWrapper;
/////////////////////////////////////////////////////////////////////////
1:   private final RandomWrapper gen;
1:     pd = new PoissonDistribution(gen.getRandomGenerator(),
1:                                  lambda,
1:                                  PoissonDistribution.DEFAULT_EPSILON,
1:                                  PoissonDistribution.DEFAULT_MAX_ITERATIONS);
commit:127d450
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.math3.distribution.PoissonDistribution;
/////////////////////////////////////////////////////////////////////////
1:   private double limit;
1:   private Multinomial<Integer> partial;
0:   private final Random gen;
1:   private final PoissonDistribution pd;
1:   public PoissonSampler(double lambda) {
1:     limit = 1;
1:     gen = RandomUtils.getRandom();
0:     pd = new PoissonDistribution(lambda);
1:   }
1: 
1:   @Override
1:   public Double sample() {
1:     return sample(gen.nextDouble());
1:   }
1: 
1:   double sample(double u) {
1:     if (u < limit) {
1:       List<WeightedThing<Integer>> steps = Lists.newArrayList();
1:       limit = 1;
1:       int i = 0;
1:       while (u / 20 < limit) {
1:         double pdf = pd.probability(i);
1:         limit -= pdf;
0:         steps.add(new WeightedThing<Integer>(i, pdf));
1:         i++;
1:       }
0:       steps.add(new WeightedThing<Integer>(steps.size(), limit));
0:       partial = new Multinomial<Integer>(steps);
1:     return partial.sample(u);
1:   }
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: public final class PoissonSampler extends AbstractSamplerFunction {
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:                 double pdf = pd.probability(i);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
1: import com.google.common.collect.Lists;
0: import org.apache.commons.math.distribution.PoissonDistribution;
0: import org.apache.commons.math.distribution.PoissonDistributionImpl;
1: import org.apache.mahout.common.RandomUtils;
1: 
1: import java.util.List;
0: import java.util.Random;
1: 
1: /**
1:  * Samples from a Poisson distribution.  Should probably not be used for lambda > 1000 or so.
1:  */
0: public class PoissonSampler extends AbstractSamplerFunction {
0:     private double limit = 1;
1: 
0:     private Multinomial<Integer> partial;
0:     private final Random gen;
0:     private final PoissonDistribution pd;
1: 
0:     public PoissonSampler(double lambda) {
0:         gen = RandomUtils.getRandom();
0:         pd = new PoissonDistributionImpl(lambda);
1:     }
1: 
0:     public Double sample() {
0:         return sample(gen.nextDouble());
1:     }
1: 
0:     double sample(double u) {
0:         if (u < limit) {
0:             List<WeightedThing<Integer>> steps = Lists.newArrayList();
0:             limit = 1;
0:             for (int i = 0; u / 20 < limit; i++) {
0:                 final double pdf = pd.probability(i);
0:                 limit -= pdf;
0:                 steps.add(new WeightedThing<Integer>(i, pdf));
1:             }
0:             steps.add(new WeightedThing<Integer>(steps.size(), limit));
0:             partial = new Multinomial<Integer>(steps);
1:         }
0:         return partial.sample(u);
1:     }
1: }
============================================================================