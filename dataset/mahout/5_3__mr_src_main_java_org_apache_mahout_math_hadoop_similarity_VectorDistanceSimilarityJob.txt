1:efa490c: /**
1:efa490c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:efa490c:  * contributor license agreements.  See the NOTICE file distributed with
1:efa490c:  * this work for additional information regarding copyright ownership.
1:efa490c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:efa490c:  * (the "License"); you may not use this file except in compliance with
1:efa490c:  * the License.  You may obtain a copy of the License at
1:efa490c:  *
1:efa490c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:efa490c:  *
1:efa490c:  * Unless required by applicable law or agreed to in writing, software
1:efa490c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:efa490c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efa490c:  * See the License for the specific language governing permissions and
1:efa490c:  * limitations under the License.
1:efa490c:  */
3:efa490c: 
1:b59e468: package org.apache.mahout.math.hadoop.similarity;
1:efa490c: 
1:efa490c: import org.apache.hadoop.conf.Configuration;
1:efa490c: import org.apache.hadoop.fs.Path;
1:efa490c: import org.apache.hadoop.io.DoubleWritable;
1:e55ec3c: import org.apache.hadoop.io.Text;
1:efa490c: import org.apache.hadoop.mapreduce.Job;
1:efa490c: import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
1:efa490c: import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
1:efa490c: import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
1:efa490c: import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
1:efa490c: import org.apache.hadoop.util.ToolRunner;
1:efa490c: import org.apache.mahout.common.AbstractJob;
1:e0ec7c1: import org.apache.mahout.common.ClassUtils;
1:efa490c: import org.apache.mahout.common.HadoopUtil;
1:efa490c: import org.apache.mahout.common.StringTuple;
1:efa490c: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1:efa490c: import org.apache.mahout.common.distance.DistanceMeasure;
1:efa490c: import org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;
1:e55ec3c: import org.apache.mahout.math.VectorWritable;
1:efa490c: 
1:9dba3cc: import com.google.common.base.Preconditions;
1:9dba3cc: 
1:efa490c: import java.io.IOException;
1:efa490c: 
1:efa490c: /**
1:efa490c:  * This class does a Map-side join between seed vectors (the map side can also be a Cluster) and a list of other vectors
1:efa490c:  * and emits the a tuple of seed id, other id, distance.  It is a more generic version of KMean's mapper
1:efa490c:  */
1:efa490c: public class VectorDistanceSimilarityJob extends AbstractJob {
1:b59e468: 
1:efa490c:   public static final String SEEDS = "seeds";
1:efa490c:   public static final String SEEDS_PATH_KEY = "seedsPath";
1:efa490c:   public static final String DISTANCE_MEASURE_KEY = "vectorDistSim.measure";
1:e55ec3c:   public static final String OUT_TYPE_KEY = "outType";
1:9dba3cc:   public static final String MAX_DISTANCE = "maxDistance";
1:efa490c: 
1:efa490c:   public static void main(String[] args) throws Exception {
1:efa490c:     ToolRunner.run(new Configuration(), new VectorDistanceSimilarityJob(), args);
2:efa490c:   }
1:e55ec3c: 
1:efa490c:   @Override
1:efa490c:   public int run(String[] args) throws Exception {
1:efa490c: 
1:efa490c:     addInputOption();
1:efa490c:     addOutputOption();
1:efa490c:     addOption(DefaultOptionCreator.distanceMeasureOption().create());
1:efa490c:     addOption(SEEDS, "s", "The set of vectors to compute distances against.  Must fit in memory on the mapper");
1:6d16230:     addOption(MAX_DISTANCE, "mx", "set an upper-bound on distance (double) such that any pair of vectors with a"
1:6d16230:         + " distance greater than this value is ignored in the output. Ignored for non pairwise output!");
1:efa490c:     addOption(DefaultOptionCreator.overwriteOption().create());
1:6d16230:     addOption(OUT_TYPE_KEY, "ot", "[pw|v] -- Define the output style: pairwise, the default, (pw) or vector (v).  "
1:6d16230:         + "Pairwise is a tuple of <seed, other, distance>, vector is <other, <Vector of size the number of seeds>>.",
1:9dba3cc:         "pw");
1:9dba3cc: 
1:efa490c:     if (parseArguments(args) == null) {
1:efa490c:       return -1;
1:e55ec3c:     }
1:efa490c: 
1:efa490c:     Path input = getInputPath();
1:efa490c:     Path output = getOutputPath();
1:efa490c:     Path seeds = new Path(getOption(SEEDS));
1:efa490c:     String measureClass = getOption(DefaultOptionCreator.DISTANCE_MEASURE_OPTION);
1:efa490c:     if (measureClass == null) {
1:efa490c:       measureClass = SquaredEuclideanDistanceMeasure.class.getName();
1:efa490c:     }
1:efa490c:     if (hasOption(DefaultOptionCreator.OVERWRITE_OPTION)) {
1:efa490c:       HadoopUtil.delete(getConf(), output);
1:efa490c:     }
1:e0ec7c1:     DistanceMeasure measure = ClassUtils.instantiateAs(measureClass, DistanceMeasure.class);
1:9dba3cc:     String outType = getOption(OUT_TYPE_KEY, "pw");
1:9dba3cc:     
1:9dba3cc:     Double maxDistance = null;
1:9dba3cc: 
1:9dba3cc:     if ("pw".equals(outType)) {
1:9dba3cc:       String maxDistanceArg = getOption(MAX_DISTANCE);
1:9dba3cc:       if (maxDistanceArg != null) {
1:9dba3cc:         maxDistance = Double.parseDouble(maxDistanceArg);
1:10c535c:         Preconditions.checkArgument(maxDistance > 0.0d, "value for " + MAX_DISTANCE + " must be greater than zero");
1:9dba3cc:       }
1:efa490c:     }
1:efa490c: 
1:9dba3cc:     run(getConf(), input, seeds, output, measure, outType, maxDistance);
1:efa490c:     return 0;
1:efa490c:   }
1:efa490c: 
1:efa490c:   public static void run(Configuration conf,
1:efa490c:                          Path input,
1:efa490c:                          Path seeds,
1:efa490c:                          Path output,
1:b59e468:                          DistanceMeasure measure, String outType)
1:b59e468:     throws IOException, ClassNotFoundException, InterruptedException {
1:6d16230:     run(conf, input, seeds, output, measure, outType, null);
1:9dba3cc:   }      
1:9dba3cc:   
1:9dba3cc:   public static void run(Configuration conf,
1:9dba3cc:           Path input,
1:9dba3cc:           Path seeds,
1:9dba3cc:           Path output,
1:9dba3cc:           DistanceMeasure measure, String outType, Double maxDistance)
1:9dba3cc:     throws IOException, ClassNotFoundException, InterruptedException {
1:9dba3cc:     if (maxDistance != null) {
1:9dba3cc:       conf.set(MAX_DISTANCE, String.valueOf(maxDistance));
1:9dba3cc:     }
1:efa490c:     conf.set(DISTANCE_MEASURE_KEY, measure.getClass().getName());
1:efa490c:     conf.set(SEEDS_PATH_KEY, seeds.toString());
1:efa490c:     Job job = new Job(conf, "Vector Distance Similarity: seeds: " + seeds + " input: " + input);
1:efa490c:     job.setInputFormatClass(SequenceFileInputFormat.class);
1:efa490c:     job.setOutputFormatClass(SequenceFileOutputFormat.class);
1:b59e468:     if ("pw".equalsIgnoreCase(outType)) {
1:e55ec3c:       job.setMapOutputKeyClass(StringTuple.class);
1:e55ec3c:       job.setOutputKeyClass(StringTuple.class);
1:e55ec3c:       job.setMapOutputValueClass(DoubleWritable.class);
1:e55ec3c:       job.setOutputValueClass(DoubleWritable.class);
1:e55ec3c:       job.setMapperClass(VectorDistanceMapper.class);
1:b59e468:     } else if ("v".equalsIgnoreCase(outType)) {
1:e55ec3c:       job.setMapOutputKeyClass(Text.class);
1:e55ec3c:       job.setOutputKeyClass(Text.class);
1:e55ec3c:       job.setMapOutputValueClass(VectorWritable.class);
1:e55ec3c:       job.setOutputValueClass(VectorWritable.class);
1:e55ec3c:       job.setMapperClass(VectorDistanceInvertedMapper.class);
1:e55ec3c:     } else {
1:b59e468:       throw new IllegalArgumentException("Invalid outType specified: " + outType);
1:e55ec3c:     }
1:e55ec3c: 
1:efa490c:     job.setNumReduceTasks(0);
1:efa490c:     FileInputFormat.addInputPath(job, input);
1:efa490c:     FileOutputFormat.setOutputPath(job, output);
1:efa490c: 
1:efa490c:     job.setJarByClass(VectorDistanceSimilarityJob.class);
1:efa490c:     HadoopUtil.delete(conf, output);
1:efa490c:     if (!job.waitForCompletion(true)) {
1:b59e468:       throw new IllegalStateException("VectorDistance Similarity failed processing " + seeds);
1:efa490c:     }
1:efa490c:   }
1:efa490c: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     addOption(MAX_DISTANCE, "mx", "set an upper-bound on distance (double) such that any pair of vectors with a"
1:         + " distance greater than this value is ignored in the output. Ignored for non pairwise output!");
1:     addOption(OUT_TYPE_KEY, "ot", "[pw|v] -- Define the output style: pairwise, the default, (pw) or vector (v).  "
1:         + "Pairwise is a tuple of <seed, other, distance>, vector is <other, <Vector of size the number of seeds>>.",
/////////////////////////////////////////////////////////////////////////
1:     run(conf, input, seeds, output, measure, outType, null);
commit:9dba3cc
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: 
/////////////////////////////////////////////////////////////////////////
1:   public static final String MAX_DISTANCE = "maxDistance";
/////////////////////////////////////////////////////////////////////////
0:     addOption(MAX_DISTANCE, "mx", "set an upper-bound on distance (double) such that any pair of vectors with a" +
0:         " distance greater than this value is ignored in the output. Ignored for non pairwise output!");
0:     addOption(OUT_TYPE_KEY, "ot", "[pw|v] -- Define the output style: pairwise, the default, (pw) or vector (v).  " +
0:         "Pairwise is a tuple of <seed, other, distance>, vector is <other, <Vector of size the number of seeds>>.",
1:         "pw");
1: 
/////////////////////////////////////////////////////////////////////////
1:     String outType = getOption(OUT_TYPE_KEY, "pw");
1:     
1:     Double maxDistance = null;
1: 
1:     if ("pw".equals(outType)) {
1:       String maxDistanceArg = getOption(MAX_DISTANCE);
1:       if (maxDistanceArg != null) {
1:         maxDistance = Double.parseDouble(maxDistanceArg);
0:         Preconditions.checkArgument(maxDistance > 0d, "value for " + MAX_DISTANCE + " must be greater than zero");
1:       }
1:     run(getConf(), input, seeds, output, measure, outType, maxDistance);
/////////////////////////////////////////////////////////////////////////
0:       run(conf, input, seeds, output, measure, outType, null);
1:   }      
1:   
1:   public static void run(Configuration conf,
1:           Path input,
1:           Path seeds,
1:           Path output,
1:           DistanceMeasure measure, String outType, Double maxDistance)
1:     throws IOException, ClassNotFoundException, InterruptedException {
1:     if (maxDistance != null) {
1:       conf.set(MAX_DISTANCE, String.valueOf(maxDistance));
1:     }
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1:         Preconditions.checkArgument(maxDistance > 0.0d, "value for " + MAX_DISTANCE + " must be greater than zero");
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.ClassUtils;
/////////////////////////////////////////////////////////////////////////
1:     DistanceMeasure measure = ClassUtils.instantiateAs(measureClass, DistanceMeasure.class);
commit:b59e468
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.hadoop.similarity;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     addOption(OUT_TYPE_KEY, "ot",
0:               "[pw|v] -- Define the output style: pairwise, the default, (pw) or vector (v).  Pairwise is a "
0:                   + "tuple of <seed, other, distance>, vector is <other, <Vector of size the number of seeds>>.",
0:               "pw");
/////////////////////////////////////////////////////////////////////////
1:                          DistanceMeasure measure, String outType)
1:     throws IOException, ClassNotFoundException, InterruptedException {
1:     if ("pw".equalsIgnoreCase(outType)) {
1:     } else if ("v".equalsIgnoreCase(outType)) {
1:       throw new IllegalArgumentException("Invalid outType specified: " + outType);
/////////////////////////////////////////////////////////////////////////
1:       throw new IllegalStateException("VectorDistance Similarity failed processing " + seeds);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:e55ec3c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.hadoop.io.Text;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.VectorWritable;
/////////////////////////////////////////////////////////////////////////
1:   public static final String OUT_TYPE_KEY = "outType";
/////////////////////////////////////////////////////////////////////////
0:     addOption(OUT_TYPE_KEY, "ot", "[pw|v] -- Define the output style: pairwise, the default, (pw) or vector (v).  Pairwise is a tuple of <seed, other, distance>, vector is <other, <Vector of size the number of seeds>>.", "pw");
/////////////////////////////////////////////////////////////////////////
0:     String outType = getOption(OUT_TYPE_KEY);
0:     if (outType == null) {
0:       outType = "pw";
1:     }
1: 
0:     run(getConf(), input, seeds, output, measure, outType);
/////////////////////////////////////////////////////////////////////////
0:                          DistanceMeasure measure, String outType) throws IOException, ClassNotFoundException, InterruptedException {
0:     if (outType.equalsIgnoreCase("pw")) {
1:       job.setMapOutputKeyClass(StringTuple.class);
1:       job.setOutputKeyClass(StringTuple.class);
1:       job.setMapOutputValueClass(DoubleWritable.class);
1:       job.setOutputValueClass(DoubleWritable.class);
1:       job.setMapperClass(VectorDistanceMapper.class);
0:     } else if (outType.equalsIgnoreCase("v")) {
1:       job.setMapOutputKeyClass(Text.class);
1:       job.setOutputKeyClass(Text.class);
1:       job.setMapOutputValueClass(VectorWritable.class);
1:       job.setOutputValueClass(VectorWritable.class);
1:       job.setMapperClass(VectorDistanceInvertedMapper.class);
1:     } else {
0:       throw new InterruptedException("Invalid outType specified: " + outType);
1:     }
1: 
commit:efa490c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.math.hadoop.similarity;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.io.DoubleWritable;
1: import org.apache.hadoop.mapreduce.Job;
1: import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
1: import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
1: import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
1: import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
1: import org.apache.hadoop.util.ToolRunner;
1: import org.apache.mahout.common.AbstractJob;
1: import org.apache.mahout.common.HadoopUtil;
1: import org.apache.mahout.common.StringTuple;
1: import org.apache.mahout.common.commandline.DefaultOptionCreator;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.common.distance.SquaredEuclideanDistanceMeasure;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * This class does a Map-side join between seed vectors (the map side can also be a Cluster) and a list of other vectors
1:  * and emits the a tuple of seed id, other id, distance.  It is a more generic version of KMean's mapper
1:  */
1: public class VectorDistanceSimilarityJob extends AbstractJob {
0:   private static final Logger log = LoggerFactory.getLogger(VectorDistanceSimilarityJob.class);
1:   public static final String SEEDS = "seeds";
1:   public static final String SEEDS_PATH_KEY = "seedsPath";
1:   public static final String DISTANCE_MEASURE_KEY = "vectorDistSim.measure";
1: 
1:   public static void main(String[] args) throws Exception {
1:     ToolRunner.run(new Configuration(), new VectorDistanceSimilarityJob(), args);
1:   }
1: 
1:   @Override
1:   public int run(String[] args) throws Exception {
1: 
1:     addInputOption();
1:     addOutputOption();
1:     addOption(DefaultOptionCreator.distanceMeasureOption().create());
1:     addOption(SEEDS, "s", "The set of vectors to compute distances against.  Must fit in memory on the mapper");
1:     addOption(DefaultOptionCreator.overwriteOption().create());
1: 
1:     if (parseArguments(args) == null) {
1:       return -1;
1:     }
1: 
1:     Path input = getInputPath();
1:     Path output = getOutputPath();
1:     Path seeds = new Path(getOption(SEEDS));
1:     String measureClass = getOption(DefaultOptionCreator.DISTANCE_MEASURE_OPTION);
1:     if (measureClass == null) {
1:       measureClass = SquaredEuclideanDistanceMeasure.class.getName();
1:     }
1:     if (hasOption(DefaultOptionCreator.OVERWRITE_OPTION)) {
1:       HadoopUtil.delete(getConf(), output);
1:     }
0:     ClassLoader ccl = Thread.currentThread().getContextClassLoader();
0:     DistanceMeasure measure = ccl.loadClass(measureClass).asSubclass(DistanceMeasure.class).newInstance();
0:     if (getConf() == null) {
0:       setConf(new Configuration());
1:     }
0:     run(getConf(), input, seeds, output, measure);
1:     return 0;
1:   }
1: 
1:   public static void run(Configuration conf,
1:                          Path input,
1:                          Path seeds,
1:                          Path output,
0:                          DistanceMeasure measure) throws IOException, ClassNotFoundException, InterruptedException {
1:     conf.set(DISTANCE_MEASURE_KEY, measure.getClass().getName());
1:     conf.set(SEEDS_PATH_KEY, seeds.toString());
1:     Job job = new Job(conf, "Vector Distance Similarity: seeds: " + seeds + " input: " + input);
1:     job.setInputFormatClass(SequenceFileInputFormat.class);
1:     job.setOutputFormatClass(SequenceFileOutputFormat.class);
0:     job.setMapOutputKeyClass(StringTuple.class);
0:     job.setOutputKeyClass(StringTuple.class);
0:     job.setMapOutputValueClass(DoubleWritable.class);
0:     job.setOutputValueClass(DoubleWritable.class);
0:     job.setMapperClass(VectorDistanceMapper.class);
1: 
1:     job.setNumReduceTasks(0);
1:     FileInputFormat.addInputPath(job, input);
1:     FileOutputFormat.setOutputPath(job, output);
1: 
1:     job.setJarByClass(VectorDistanceSimilarityJob.class);
1:     HadoopUtil.delete(conf, output);
1:     if (!job.waitForCompletion(true)) {
0:       throw new InterruptedException("VectorDistance Similarity failed processing " + seeds);
1:     }
1:   }
1: }
============================================================================