1:c4597cb: /**
1:c4597cb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c4597cb:  * contributor license agreements.  See the NOTICE file distributed with
1:c4597cb:  * this work for additional information regarding copyright ownership.
1:c4597cb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c4597cb:  * (the "License"); you may not use this file except in compliance with
1:c4597cb:  * the License.  You may obtain a copy of the License at
1:c4597cb:  *
1:c4597cb:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c4597cb:  *
1:c4597cb:  * Unless required by applicable law or agreed to in writing, software
1:c4597cb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4597cb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4597cb:  * See the License for the specific language governing permissions and
1:c4597cb:  * limitations under the License.
1:c4597cb:  */
1:c4597cb: 
1:c4597cb: package org.apache.mahout.cf.taste.impl.common;
1:c4597cb: 
1:c4597cb: /**
1:c4597cb:  * This subclass also provides for a weighted estimate of the sample standard deviation.
1:c4597cb:  * See <a href="http://en.wikipedia.org/wiki/Mean_square_weighted_deviation">estimate formulae here</a>.
1:c4597cb:  */
1:c4597cb: public final class WeightedRunningAverageAndStdDev extends WeightedRunningAverage implements RunningAverageAndStdDev {
1:c4597cb: 
1:c4597cb:   private double totalSquaredWeight;
1:c4597cb:   private double totalWeightedData;
1:c4597cb:   private double totalWeightedSquaredData;
1:c4597cb: 
1:c4597cb:   public WeightedRunningAverageAndStdDev() {
1:c4597cb:     totalSquaredWeight = 0.0;
1:c4597cb:     totalWeightedData = 0.0;
1:c4597cb:     totalWeightedSquaredData = 0.0;
1:c4597cb:   }
1:c4597cb:   
1:c4597cb:   @Override
1:c4597cb:   public synchronized void addDatum(double datum, double weight) {
1:c4597cb:     super.addDatum(datum, weight);
1:c4597cb:     totalSquaredWeight += weight * weight;
1:c4597cb:     double weightedData = datum * weight;
1:c4597cb:     totalWeightedData += weightedData;
1:c4597cb:     totalWeightedSquaredData += weightedData * datum;
1:c4597cb:   }
1:c4597cb:   
1:c4597cb:   @Override
1:c4597cb:   public synchronized void removeDatum(double datum, double weight) {
1:c4597cb:     super.removeDatum(datum, weight);
1:c4597cb:     totalSquaredWeight -= weight * weight;
1:c4597cb:     if (totalSquaredWeight <= 0.0) {
1:c4597cb:       totalSquaredWeight = 0.0;
1:c4597cb:     }
1:c4597cb:     double weightedData = datum * weight;
1:c4597cb:     totalWeightedData -= weightedData;
1:c4597cb:     if (totalWeightedData <= 0.0) {
1:c4597cb:       totalWeightedData = 0.0;
1:c4597cb:     }
1:c4597cb:     totalWeightedSquaredData -= weightedData * datum;
1:c4597cb:     if (totalWeightedSquaredData <= 0.0) {
1:c4597cb:       totalWeightedSquaredData = 0.0;
1:c4597cb:     }
1:c4597cb:   }
1:c4597cb: 
1:c4597cb:   /**
1:c4597cb:    * @throws UnsupportedOperationException
1:c4597cb:    */
1:c4597cb:   @Override
1:c4597cb:   public synchronized void changeDatum(double delta, double weight) {
1:c4597cb:     throw new UnsupportedOperationException();
1:c4597cb:   }
1:c4597cb:   
1:c4597cb: 
1:c4597cb:   @Override
1:c4597cb:   public synchronized double getStandardDeviation() {
1:c4597cb:     double totalWeight = getTotalWeight();
1:3218e95:     return Math.sqrt((totalWeightedSquaredData * totalWeight - totalWeightedData * totalWeightedData)
1:3218e95:                          / (totalWeight * totalWeight - totalSquaredWeight));
1:c4597cb:   }
1:c1d2cd1: 
1:c1d2cd1:   @Override
1:c1d2cd1:   public RunningAverageAndStdDev inverse() {
1:c1d2cd1:     return new InvertedRunningAverageAndStdDev(this);
1:c1d2cd1:   }
1:c4597cb:   
1:c4597cb:   @Override
1:c4597cb:   public synchronized String toString() {
1:c4597cb:     return String.valueOf(String.valueOf(getAverage()) + ',' + getStandardDeviation());
1:c4597cb:   }
1:c4597cb: 
1:c4597cb: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:c1d2cd1
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public RunningAverageAndStdDev inverse() {
1:     return new InvertedRunningAverageAndStdDev(this);
1:   }
commit:3218e95
/////////////////////////////////////////////////////////////////////////
1:     return Math.sqrt((totalWeightedSquaredData * totalWeight - totalWeightedData * totalWeightedData)
1:                          / (totalWeight * totalWeight - totalSquaredWeight));
commit:c4597cb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common;
1: 
1: /**
1:  * This subclass also provides for a weighted estimate of the sample standard deviation.
1:  * See <a href="http://en.wikipedia.org/wiki/Mean_square_weighted_deviation">estimate formulae here</a>.
1:  */
1: public final class WeightedRunningAverageAndStdDev extends WeightedRunningAverage implements RunningAverageAndStdDev {
1: 
1:   private double totalSquaredWeight;
1:   private double totalWeightedData;
1:   private double totalWeightedSquaredData;
1: 
1:   public WeightedRunningAverageAndStdDev() {
1:     totalSquaredWeight = 0.0;
1:     totalWeightedData = 0.0;
1:     totalWeightedSquaredData = 0.0;
1:   }
1:   
1:   @Override
1:   public synchronized void addDatum(double datum, double weight) {
1:     super.addDatum(datum, weight);
1:     totalSquaredWeight += weight * weight;
1:     double weightedData = datum * weight;
1:     totalWeightedData += weightedData;
1:     totalWeightedSquaredData += weightedData * datum;
1:   }
1:   
1:   @Override
1:   public synchronized void removeDatum(double datum, double weight) {
1:     super.removeDatum(datum, weight);
1:     totalSquaredWeight -= weight * weight;
1:     if (totalSquaredWeight <= 0.0) {
1:       totalSquaredWeight = 0.0;
1:     }
1:     double weightedData = datum * weight;
1:     totalWeightedData -= weightedData;
1:     if (totalWeightedData <= 0.0) {
1:       totalWeightedData = 0.0;
1:     }
1:     totalWeightedSquaredData -= weightedData * datum;
1:     if (totalWeightedSquaredData <= 0.0) {
1:       totalWeightedSquaredData = 0.0;
1:     }
1:   }
1: 
1:   /**
1:    * @throws UnsupportedOperationException
1:    */
1:   @Override
1:   public synchronized void changeDatum(double delta, double weight) {
1:     throw new UnsupportedOperationException();
1:   }
1:   
1: 
1:   @Override
1:   public synchronized double getStandardDeviation() {
1:     double totalWeight = getTotalWeight();
0:     return Math.sqrt((totalWeightedSquaredData * totalWeight - totalWeightedData * totalWeightedData) /
0:         (totalWeight * totalWeight - totalSquaredWeight));
1:   }
1:   
1:   @Override
1:   public synchronized String toString() {
1:     return String.valueOf(String.valueOf(getAverage()) + ',' + getStandardDeviation());
1:   }
1: 
1: }
============================================================================