1:ec9035c: /*
1:ec9035c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ec9035c:  * contributor license agreements.  See the NOTICE file distributed with
1:ec9035c:  * this work for additional information regarding copyright ownership.
1:ec9035c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ec9035c:  * (the "License"); you may not use this file except in compliance with
1:ec9035c:  * the License.  You may obtain a copy of the License at
1:ec9035c:  *
1:ec9035c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ec9035c:  *
1:ec9035c:  * Unless required by applicable law or agreed to in writing, software
1:ec9035c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ec9035c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ec9035c:  * See the License for the specific language governing permissions and
1:ec9035c:  * limitations under the License.
1:ec9035c:  */
1:ec9035c: package org.apache.mahout.math.neighborhood;
1:ec9035c: 
1:ec9035c: import java.util.BitSet;
1:ec9035c: import java.util.List;
1:ec9035c: 
1:ec9035c: import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
1:ec9035c: import org.apache.mahout.math.DenseMatrix;
1:ec9035c: import org.apache.mahout.math.DenseVector;
1:ec9035c: import org.apache.mahout.math.Matrix;
1:ec9035c: import org.apache.mahout.math.Vector;
1:ec9035c: import org.apache.mahout.math.WeightedVector;
1:ec9035c: import org.apache.mahout.math.random.Normal;
1:ec9035c: import org.apache.mahout.math.random.WeightedThing;
1:ec9035c: import org.apache.mahout.math.stats.OnlineSummarizer;
1:ec9035c: import org.junit.Test;
1:ec9035c: 
1:ec9035c: import static org.junit.Assert.assertTrue;
1:ec9035c: 
1:ec9035c: public class LocalitySensitiveHashSearchTest {
1:ec9035c: 
1:ec9035c:   @Test
1:ec9035c:   public void testNormal() {
1:ec9035c:     Matrix testData = new DenseMatrix(100000, 10);
1:ec9035c:     final Normal gen = new Normal();
1:ec9035c:     testData.assign(gen);
1:ec9035c: 
1:ec9035c:     final EuclideanDistanceMeasure distance = new EuclideanDistanceMeasure();
1:ec9035c:     BruteSearch ref = new BruteSearch(distance);
1:ec9035c:     ref.addAllMatrixSlicesAsWeightedVectors(testData);
1:ec9035c: 
1:ec9035c:     LocalitySensitiveHashSearch cut = new LocalitySensitiveHashSearch(distance, 10);
1:ec9035c:     cut.addAllMatrixSlicesAsWeightedVectors(testData);
1:ec9035c: 
1:ec9035c:     cut.setSearchSize(200);
1:ec9035c:     cut.resetEvaluationCount();
1:ec9035c: 
1:ec9035c:     System.out.printf("speedup,q1,q2,q3\n");
1:ec9035c: 
1:ec9035c:     for (int i = 0; i < 12; i++) {
1:ec9035c:       double strategy = (i - 1.0) / 10.0;
1:ec9035c:       cut.setRaiseHashLimitStrategy(strategy);
1:ec9035c:       OnlineSummarizer t1 = evaluateStrategy(testData, ref, cut);
1:ec9035c:       int evals = cut.resetEvaluationCount();
1:4ca6b86:       final double speedup = 10.0e6 / evals;
1:ec9035c:       System.out.printf("%.1f,%.2f,%.2f,%.2f\n", speedup, t1.getQuartile(1),
1:ec9035c:           t1.getQuartile(2), t1.getQuartile(3));
1:ec9035c:       assertTrue(t1.getQuartile(2) > 0.45);
1:ec9035c:       assertTrue(speedup > 4 || t1.getQuartile(2) > 0.9);
1:ec9035c:       assertTrue(speedup > 15 || t1.getQuartile(2) > 0.8);
1:ec9035c:     }
1:ec9035c:   }
1:ec9035c: 
1:4ca6b86:   private static OnlineSummarizer evaluateStrategy(Matrix testData, BruteSearch ref,
1:4ca6b86:                                                    LocalitySensitiveHashSearch cut) {
1:ec9035c:     OnlineSummarizer t1 = new OnlineSummarizer();
1:ec9035c: 
1:ec9035c:     for (int i = 0; i < 100; i++) {
1:ec9035c:       final Vector q = testData.viewRow(i);
1:ec9035c:       List<WeightedThing<Vector>> v1 = cut.search(q, 150);
1:ec9035c:       BitSet b1 = new BitSet();
1:ec9035c:       for (WeightedThing<Vector> v : v1) {
1:ec9035c:         b1.set(((WeightedVector)v.getValue()).getIndex());
1:ec9035c:       }
1:ec9035c: 
1:ec9035c:       List<WeightedThing<Vector>> v2 = ref.search(q, 100);
1:ec9035c:       BitSet b2 = new BitSet();
1:ec9035c:       for (WeightedThing<Vector> v : v2) {
1:ec9035c:         b2.set(((WeightedVector)v.getValue()).getIndex());
1:ec9035c:       }
1:ec9035c: 
1:ec9035c:       b1.and(b2);
1:ec9035c:       t1.add(b1.cardinality());
1:ec9035c:     }
1:ec9035c:     return t1;
1:ec9035c:   }
1:ec9035c: 
1:ec9035c:   @Test
1:ec9035c:   public void testDotCorrelation() {
1:ec9035c:     final Normal gen = new Normal();
1:ec9035c: 
1:ec9035c:     Matrix projection = new DenseMatrix(64, 10);
1:ec9035c:     projection.assign(gen);
1:ec9035c: 
1:ec9035c:     Vector query = new DenseVector(10);
1:ec9035c:     query.assign(gen);
1:ec9035c:     long qhash = HashedVector.computeHash64(query, projection);
1:ec9035c: 
1:ec9035c:     int count[] = new int[65];
1:ec9035c:     Vector v = new DenseVector(10);
1:ec9035c:     for (int i = 0; i <500000; i++) {
1:ec9035c:       v.assign(gen);
1:ec9035c:       long hash = HashedVector.computeHash64(v, projection);
1:ec9035c:       final int bitDot = Long.bitCount(qhash ^ hash);
1:ec9035c:       count[bitDot]++;
1:ec9035c:       if (count[bitDot] < 200) {
1:ec9035c:         System.out.printf("%d, %.3f\n", bitDot, v.dot(query) / Math.sqrt(v.getLengthSquared() * query.getLengthSquared()));
1:ec9035c:       }
1:ec9035c:     }
1:ec9035c:     for (int i = 0; i < 65; ++i) {
1:ec9035c:       System.out.printf("%d, %d\n", i, count[i]);
1:ec9035c:     }
1:ec9035c:   }
1:ec9035c: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:       final double speedup = 10.0e6 / evals;
/////////////////////////////////////////////////////////////////////////
1:   private static OnlineSummarizer evaluateStrategy(Matrix testData, BruteSearch ref,
1:                                                    LocalitySensitiveHashSearch cut) {
author:dfilimon
-------------------------------------------------------------------------------
commit:ec9035c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.math.neighborhood;
1: 
1: import java.util.BitSet;
1: import java.util.List;
1: 
1: import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.WeightedVector;
1: import org.apache.mahout.math.random.Normal;
1: import org.apache.mahout.math.random.WeightedThing;
1: import org.apache.mahout.math.stats.OnlineSummarizer;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class LocalitySensitiveHashSearchTest {
1: 
1:   @Test
1:   public void testNormal() {
1:     Matrix testData = new DenseMatrix(100000, 10);
1:     final Normal gen = new Normal();
1:     testData.assign(gen);
1: 
1:     final EuclideanDistanceMeasure distance = new EuclideanDistanceMeasure();
1:     BruteSearch ref = new BruteSearch(distance);
1:     ref.addAllMatrixSlicesAsWeightedVectors(testData);
1: 
1:     LocalitySensitiveHashSearch cut = new LocalitySensitiveHashSearch(distance, 10);
1:     cut.addAllMatrixSlicesAsWeightedVectors(testData);
1: 
1:     cut.setSearchSize(200);
1:     cut.resetEvaluationCount();
1: 
1:     System.out.printf("speedup,q1,q2,q3\n");
1: 
1:     for (int i = 0; i < 12; i++) {
1:       double strategy = (i - 1.0) / 10.0;
1:       cut.setRaiseHashLimitStrategy(strategy);
1:       OnlineSummarizer t1 = evaluateStrategy(testData, ref, cut);
1:       int evals = cut.resetEvaluationCount();
0:       final double speedup = 10e6 / evals;
1:       System.out.printf("%.1f,%.2f,%.2f,%.2f\n", speedup, t1.getQuartile(1),
1:           t1.getQuartile(2), t1.getQuartile(3));
1:       assertTrue(t1.getQuartile(2) > 0.45);
1:       assertTrue(speedup > 4 || t1.getQuartile(2) > 0.9);
1:       assertTrue(speedup > 15 || t1.getQuartile(2) > 0.8);
1:     }
1:   }
1: 
0:   private OnlineSummarizer evaluateStrategy(Matrix testData, BruteSearch ref,
0:                                             LocalitySensitiveHashSearch cut) {
1:     OnlineSummarizer t1 = new OnlineSummarizer();
1: 
1:     for (int i = 0; i < 100; i++) {
1:       final Vector q = testData.viewRow(i);
1:       List<WeightedThing<Vector>> v1 = cut.search(q, 150);
1:       BitSet b1 = new BitSet();
1:       for (WeightedThing<Vector> v : v1) {
1:         b1.set(((WeightedVector)v.getValue()).getIndex());
1:       }
1: 
1:       List<WeightedThing<Vector>> v2 = ref.search(q, 100);
1:       BitSet b2 = new BitSet();
1:       for (WeightedThing<Vector> v : v2) {
1:         b2.set(((WeightedVector)v.getValue()).getIndex());
1:       }
1: 
1:       b1.and(b2);
1:       t1.add(b1.cardinality());
1:     }
1:     return t1;
1:   }
1: 
1:   @Test
1:   public void testDotCorrelation() {
1:     final Normal gen = new Normal();
1: 
1:     Matrix projection = new DenseMatrix(64, 10);
1:     projection.assign(gen);
1: 
1:     Vector query = new DenseVector(10);
1:     query.assign(gen);
1:     long qhash = HashedVector.computeHash64(query, projection);
1: 
1:     int count[] = new int[65];
1:     Vector v = new DenseVector(10);
1:     for (int i = 0; i <500000; i++) {
1:       v.assign(gen);
1:       long hash = HashedVector.computeHash64(v, projection);
1:       final int bitDot = Long.bitCount(qhash ^ hash);
1:       count[bitDot]++;
1:       if (count[bitDot] < 200) {
1:         System.out.printf("%d, %.3f\n", bitDot, v.dot(query) / Math.sqrt(v.getLengthSquared() * query.getLengthSquared()));
1:       }
1:     }
1:     for (int i = 0; i < 65; ++i) {
1:       System.out.printf("%d, %d\n", i, count[i]);
1:     }
1:   }
1: }
============================================================================