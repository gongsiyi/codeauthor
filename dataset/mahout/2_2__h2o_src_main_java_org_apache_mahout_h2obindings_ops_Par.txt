1:f870a63: /*
1:f870a63:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f870a63:  *  contributor license agreements.  See the NOTICE file distributed with
1:f870a63:  *  this work for additional information regarding copyright ownership.
1:f870a63:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f870a63:  *  (the "License"); you may not use this file except in compliance with
1:f870a63:  *  the License.  You may obtain a copy of the License at
1:f870a63:  *
1:f870a63:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f870a63:  *
1:f870a63:  *  Unless required by applicable law or agreed to in writing, software
1:f870a63:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f870a63:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f870a63:  *  See the License for the specific language governing permissions and
1:f870a63:  *  limitations under the License.
3:f870a63:  */
2:f870a63: 
1:f870a63: package org.apache.mahout.h2obindings.ops;
1:f870a63: 
1:f870a63: import water.MRTask;
1:f870a63: import water.fvec.Frame;
1:f870a63: import water.fvec.Vec;
1:f870a63: import water.fvec.Chunk;
1:f870a63: import water.fvec.NewChunk;
1:f870a63: import water.parser.ValueString;
1:f870a63: 
1:f870a63: import org.apache.mahout.h2obindings.H2OHelper;
1:f870a63: import org.apache.mahout.h2obindings.drm.H2ODrm;
1:f870a63: 
1:2d1b0bf: /**
1:2d1b0bf:  * Parallelize operator.
1:2d1b0bf:  */
1:f870a63: public class Par {
1:2d1b0bf:   /**
1:2d1b0bf:    * (re)Parallelize DRM data according to new partitioning hints.
1:2d1b0bf:    *
1:2d1b0bf:    * @param drmA Input DRM containing data.
1:2d1b0bf:    * @param min Hint of minimum number of partitions to parallelize, if not -1.
1:2d1b0bf:    * @param exact Hint of exact number of partitions to parallelize, if not -1.
1:2d1b0bf:    * @return new DRM holding the same data but parallelized according to new hints.
1:2d1b0bf:    */
1:f870a63:   public static H2ODrm exec(H2ODrm drmA, int min, int exact) {
1:f870a63:     final Frame frin = drmA.frame;
1:f870a63:     final Vec vin = drmA.keys;
1:f870a63: 
1:2d1b0bf:     // First create a new empty Frame with the required partitioning
1:c964986:     Frame frout = H2OHelper.emptyFrame(frin.numRows(), frin.numCols(), min, exact);
1:f870a63:     Vec vout = null;
1:f870a63: 
1:f870a63:     if (vin != null) {
1:2d1b0bf:       // If String keyed, then run an MRTask on the new frame, and also
1:2d1b0bf:       // creat yet another 1-column newer frame for the re-orged String keys.
1:2d1b0bf:       // The new String Vec will therefore be similarly partitioned as the
1:2d1b0bf:       // new Frame.
1:2d1b0bf:       //
1:2d1b0bf:       // vout is finally collected by calling anyVec() on outputFrame(),
1:2d1b0bf:       // as it is the only column in the output frame.
1:f870a63:       vout = new MRTask() {
1:f870a63:           public void map(Chunk chks[], NewChunk nc) {
1:2d1b0bf:             int chunkSize = chks[0].len();
1:f870a63:             Vec vins[] = frin.vecs();
1:f870a63:             long start = chks[0].start();
1:f870a63:             ValueString vstr = new ValueString();
1:f870a63: 
1:2d1b0bf:             for (int r = 0; r < chunkSize; r++) {
1:f870a63:               for (int c = 0; c < chks.length; c++) {
1:f5f54a1:                 chks[c].set(r, vins[c].at(start + r));
1:f870a63:               }
1:f870a63:               nc.addStr(vin.atStr(vstr, start + r));
1:f870a63:             }
1:f870a63:           }
1:f870a63:         }.doAll(1, frout).outputFrame(null, null).anyVec();
1:f870a63:     } else {
1:2d1b0bf:       // If not String keyed, then run and MRTask on the new frame, and
1:2d1b0bf:       // just pull in right elements from frin
1:f870a63:       new MRTask() {
1:f870a63:         public void map(Chunk chks[]) {
1:2d1b0bf:           int chunkSize = chks[0].len();
1:f870a63:           Vec vins[] = frin.vecs();
1:f870a63:           long start = chks[0].start();
1:f870a63: 
1:2d1b0bf:           for (int r = 0; r < chunkSize; r++) {
1:f870a63:             for (int c = 0; c < chks.length; c++) {
1:f5f54a1:               chks[c].set(r, vins[c].at(start + r));
1:f870a63:             }
1:f870a63:           }
1:f870a63:         }
1:f870a63:       }.doAll(frout);
1:f870a63:     }
1:f870a63: 
1:f870a63:     return new H2ODrm(frout, vout);
1:f870a63:   }
1:f870a63: }
============================================================================
author:Stevo Slavic
-------------------------------------------------------------------------------
commit:f5f54a1
/////////////////////////////////////////////////////////////////////////
1:                 chks[c].set(r, vins[c].at(start + r));
/////////////////////////////////////////////////////////////////////////
1:               chks[c].set(r, vins[c].at(start + r));
author:Andrew Palumbo
-------------------------------------------------------------------------------
commit:2d1b0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Parallelize operator.
1:  */
1:   /**
1:    * (re)Parallelize DRM data according to new partitioning hints.
1:    *
1:    * @param drmA Input DRM containing data.
1:    * @param min Hint of minimum number of partitions to parallelize, if not -1.
1:    * @param exact Hint of exact number of partitions to parallelize, if not -1.
1:    * @return new DRM holding the same data but parallelized according to new hints.
1:    */
1:     // First create a new empty Frame with the required partitioning
1:       // If String keyed, then run an MRTask on the new frame, and also
1:       // creat yet another 1-column newer frame for the re-orged String keys.
1:       // The new String Vec will therefore be similarly partitioned as the
1:       // new Frame.
1:       //
1:       // vout is finally collected by calling anyVec() on outputFrame(),
1:       // as it is the only column in the output frame.
1:             int chunkSize = chks[0].len();
1:             for (int r = 0; r < chunkSize; r++) {
/////////////////////////////////////////////////////////////////////////
1:       // If not String keyed, then run and MRTask on the new frame, and
1:       // just pull in right elements from frin
1:           int chunkSize = chks[0].len();
1:           for (int r = 0; r < chunkSize; r++) {
commit:c964986
/////////////////////////////////////////////////////////////////////////
1:     Frame frout = H2OHelper.emptyFrame(frin.numRows(), frin.numCols(), min, exact);
commit:f870a63
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
1: package org.apache.mahout.h2obindings.ops;
1: 
1: import water.MRTask;
1: import water.fvec.Frame;
1: import water.fvec.Vec;
1: import water.fvec.Chunk;
1: import water.fvec.NewChunk;
1: import water.parser.ValueString;
1: 
1: import org.apache.mahout.h2obindings.H2OHelper;
1: import org.apache.mahout.h2obindings.drm.H2ODrm;
1: 
1: public class Par {
1:   public static H2ODrm exec(H2ODrm drmA, int min, int exact) {
1:     final Frame frin = drmA.frame;
1:     final Vec vin = drmA.keys;
1: 
0:     /* First create a new empty Frame with the required partitioning */
0:     Frame frout = H2OHelper.empty_frame(frin.numRows(), frin.numCols(), min, exact);
1:     Vec vout = null;
1: 
1:     if (vin != null) {
0:       /* If String keyed, then run an MRTask on the new frame, and also
0:          creat yet another 1-column newer frame for the re-orged String keys.
0:          The new String Vec will therefore be similarly partitioned as the
0:          new Frame.
1: 
0:          vout is finally collected by calling anyVec() on outputFrame(),
0:          as it is the only column in the output frame.
1:       */
1:       vout = new MRTask() {
1:           public void map(Chunk chks[], NewChunk nc) {
0:             int chunk_size = chks[0].len();
1:             Vec vins[] = frin.vecs();
1:             long start = chks[0].start();
1:             ValueString vstr = new ValueString();
1: 
0:             for (int r = 0; r < chunk_size; r++) {
1:               for (int c = 0; c < chks.length; c++) {
0:                 chks[c].set0(r, vins[c].at(start + r));
1:               }
1:               nc.addStr(vin.atStr(vstr, start + r));
1:             }
1:           }
1:         }.doAll(1, frout).outputFrame(null, null).anyVec();
1:     } else {
0:       /* If not String keyed, then run and MRTask on the new frame, and
0:          just pull in right elements from frin
1:       */
1:       new MRTask() {
1:         public void map(Chunk chks[]) {
0:           int chunk_size = chks[0].len();
1:           Vec vins[] = frin.vecs();
1:           long start = chks[0].start();
1: 
0:           for (int r = 0; r < chunk_size; r++) {
1:             for (int c = 0; c < chks.length; c++) {
0:               chks[c].set0(r, vins[c].at(start + r));
1:             }
1:           }
1:         }
1:       }.doAll(frout);
1:     }
1: 
1:     return new H2ODrm(frout, vout);
1:   }
1: }
============================================================================