1:71bf817: /*
1:71bf817:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:71bf817:  * contributor license agreements.  See the NOTICE file distributed with
1:71bf817:  * this work for additional information regarding copyright ownership.
1:71bf817:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:71bf817:  * (the "License"); you may not use this file except in compliance with
1:71bf817:  * the License.  You may obtain a copy of the License at
1:71bf817:  *
1:71bf817:  *     http://www.apache.org/licenses/LICENSE-2.0
1:71bf817:  *
1:71bf817:  * Unless required by applicable law or agreed to in writing, software
1:71bf817:  * distributed under the License is distributed on an "AS IS" BASIS,
1:71bf817:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:71bf817:  * See the License for the specific language governing permissions and
1:71bf817:  * limitations under the License.
1:71bf817:  */
1:71bf817: 
1:71bf817: package org.apache.mahout.cf.taste.impl.eval;
1:71bf817: 
1:71bf817: import org.apache.mahout.cf.taste.common.TasteException;
1:71bf817: import org.apache.mahout.cf.taste.eval.RelevantItemsDataSplitter;
1:71bf817: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1:71bf817: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1:71bf817: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1:71bf817: import org.apache.mahout.cf.taste.model.DataModel;
1:71bf817: import org.apache.mahout.cf.taste.model.Preference;
1:71bf817: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:71bf817: 
1:85f9ece: import java.util.ArrayList;
1:71bf817: import java.util.Iterator;
1:71bf817: import java.util.List;
1:71bf817: 
1:71bf817: /**
1:71bf817:  * Picks relevant items to be those with the strongest preference, and
1:71bf817:  * includes the other users' preferences in full.
1:71bf817:  */
1:71bf817: public final class GenericRelevantItemsDataSplitter implements RelevantItemsDataSplitter {
1:71bf817: 
1:71bf817:   @Override
1:71bf817:   public FastIDSet getRelevantItemsIDs(long userID,
1:71bf817:                                        int at,
1:71bf817:                                        double relevanceThreshold,
1:71bf817:                                        DataModel dataModel) throws TasteException {
1:71bf817:     PreferenceArray prefs = dataModel.getPreferencesFromUser(userID);
1:71bf817:     FastIDSet relevantItemIDs = new FastIDSet(at);
1:71bf817:     prefs.sortByValueReversed();
1:71bf817:     for (int i = 0; i < prefs.length() && relevantItemIDs.size() < at; i++) {
1:71bf817:       if (prefs.getValue(i) >= relevanceThreshold) {
1:71bf817:         relevantItemIDs.add(prefs.getItemID(i));
1:71bf817:       }
1:71bf817:     }
1:71bf817:     return relevantItemIDs;
1:71bf817:   }
1:71bf817: 
1:71bf817:   @Override
1:71bf817:   public void processOtherUser(long userID,
1:71bf817:                                FastIDSet relevantItemIDs,
1:71bf817:                                FastByIDMap<PreferenceArray> trainingUsers,
1:71bf817:                                long otherUserID,
1:71bf817:                                DataModel dataModel) throws TasteException {
1:71bf817:     PreferenceArray prefs2Array = dataModel.getPreferencesFromUser(otherUserID);
1:71bf817:     // If we're dealing with the very user that we're evaluating for precision/recall,
1:71bf817:     if (userID == otherUserID) {
1:71bf817:       // then must remove all the test IDs, the "relevant" item IDs
1:85f9ece:       List<Preference> prefs2 = new ArrayList<>(prefs2Array.length());
1:71bf817:       for (Preference pref : prefs2Array) {
1:71bf817:         prefs2.add(pref);
1:71bf817:       }
1:229aeff:       for (Iterator<Preference> iterator = prefs2.iterator(); iterator.hasNext();) {
1:71bf817:         Preference pref = iterator.next();
1:71bf817:         if (relevantItemIDs.contains(pref.getItemID())) {
1:71bf817:           iterator.remove();
1:71bf817:         }
1:71bf817:       }
1:71bf817:       if (!prefs2.isEmpty()) {
1:71bf817:         trainingUsers.put(otherUserID, new GenericUserPreferenceArray(prefs2));
1:71bf817:       }
1:71bf817:     } else {
1:71bf817:       // otherwise just add all those other user's prefs
1:71bf817:       trainingUsers.put(otherUserID, prefs2Array);
1:71bf817:     }
1:71bf817:   }
1:71bf817: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:       List<Preference> prefs2 = new ArrayList<>(prefs2Array.length());
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:       for (Iterator<Preference> iterator = prefs2.iterator(); iterator.hasNext();) {
commit:71bf817
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.eval;
1: 
0: import com.google.common.collect.Lists;
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.eval.RelevantItemsDataSplitter;
1: import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
1: import org.apache.mahout.cf.taste.impl.common.FastIDSet;
1: import org.apache.mahout.cf.taste.impl.model.GenericUserPreferenceArray;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: 
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
1:  * Picks relevant items to be those with the strongest preference, and
1:  * includes the other users' preferences in full.
1:  */
1: public final class GenericRelevantItemsDataSplitter implements RelevantItemsDataSplitter {
1: 
1:   @Override
1:   public FastIDSet getRelevantItemsIDs(long userID,
1:                                        int at,
1:                                        double relevanceThreshold,
1:                                        DataModel dataModel) throws TasteException {
1:     PreferenceArray prefs = dataModel.getPreferencesFromUser(userID);
1:     FastIDSet relevantItemIDs = new FastIDSet(at);
1:     prefs.sortByValueReversed();
1:     for (int i = 0; i < prefs.length() && relevantItemIDs.size() < at; i++) {
1:       if (prefs.getValue(i) >= relevanceThreshold) {
1:         relevantItemIDs.add(prefs.getItemID(i));
1:       }
1:     }
1:     return relevantItemIDs;
1:   }
1: 
1:   @Override
1:   public void processOtherUser(long userID,
1:                                FastIDSet relevantItemIDs,
1:                                FastByIDMap<PreferenceArray> trainingUsers,
1:                                long otherUserID,
1:                                DataModel dataModel) throws TasteException {
1:     PreferenceArray prefs2Array = dataModel.getPreferencesFromUser(otherUserID);
1:     // If we're dealing with the very user that we're evaluating for precision/recall,
1:     if (userID == otherUserID) {
1:       // then must remove all the test IDs, the "relevant" item IDs
0:       List<Preference> prefs2 = Lists.newArrayListWithCapacity(prefs2Array.length());
1:       for (Preference pref : prefs2Array) {
1:         prefs2.add(pref);
1:       }
0:       for (Iterator<Preference> iterator = prefs2.iterator(); iterator.hasNext(); ) {
1:         Preference pref = iterator.next();
1:         if (relevantItemIDs.contains(pref.getItemID())) {
1:           iterator.remove();
1:         }
1:       }
1:       if (!prefs2.isEmpty()) {
1:         trainingUsers.put(otherUserID, new GenericUserPreferenceArray(prefs2));
1:       }
1:     } else {
1:       // otherwise just add all those other user's prefs
1:       trainingUsers.put(otherUserID, prefs2Array);
1:     }
1:   }
1: }
============================================================================