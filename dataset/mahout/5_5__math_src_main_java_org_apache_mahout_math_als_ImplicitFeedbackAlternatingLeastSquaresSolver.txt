1:3631151: /**
1:3631151:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3631151:  * contributor license agreements.  See the NOTICE file distributed with
1:3631151:  * this work for additional information regarding copyright ownership.
1:3631151:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3631151:  * (the "License"); you may not use this file except in compliance with
1:3631151:  * the License.  You may obtain a copy of the License at
1:3631151:  *
1:3631151:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3631151:  *
1:3631151:  * Unless required by applicable law or agreed to in writing, software
1:3631151:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3631151:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3631151:  * See the License for the specific language governing permissions and
1:3631151:  * limitations under the License.
1:3631151:  */
7:3631151: 
1:3631151: package org.apache.mahout.math.als;
1:3631151: 
1:f6fd0ce: import java.util.concurrent.ExecutorService;
1:f6fd0ce: import java.util.concurrent.Executors;
1:f6fd0ce: import java.util.concurrent.TimeUnit;
1:f6fd0ce: 
1:3631151: import org.apache.mahout.math.DenseMatrix;
1:3631151: import org.apache.mahout.math.DenseVector;
1:3631151: import org.apache.mahout.math.Matrix;
1:3631151: import org.apache.mahout.math.QRDecomposition;
1:3631151: import org.apache.mahout.math.Vector;
1:dc62944: import org.apache.mahout.math.Vector.Element;
1:3631151: import org.apache.mahout.math.function.Functions;
1:3631151: import org.apache.mahout.math.list.IntArrayList;
1:3631151: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1:f6fd0ce: import org.slf4j.Logger;
1:f6fd0ce: import org.slf4j.LoggerFactory;
1:f6fd0ce: 
1:f6fd0ce: import com.google.common.base.Preconditions;
1:3631151: 
1:3631151: /** see <a href="http://research.yahoo.com/pub/2433">Collaborative Filtering for Implicit Feedback Datasets</a> */
1:3631151: public class ImplicitFeedbackAlternatingLeastSquaresSolver {
1:3631151: 
1:3631151:   private final int numFeatures;
1:3631151:   private final double alpha;
1:3631151:   private final double lambda;
1:f6fd0ce:   private final int numTrainingThreads;
1:3631151: 
1:3631151:   private final OpenIntObjectHashMap<Vector> Y;
1:3631151:   private final Matrix YtransposeY;
1:f6fd0ce:   
1:f6fd0ce:   private static final Logger log = LoggerFactory.getLogger(ImplicitFeedbackAlternatingLeastSquaresSolver.class);
1:62b94a5:   
1:3631151:   public ImplicitFeedbackAlternatingLeastSquaresSolver(int numFeatures, double lambda, double alpha,
1:f6fd0ce:       OpenIntObjectHashMap<Vector> Y, int numTrainingThreads) {
1:3631151:     this.numFeatures = numFeatures;
1:3631151:     this.lambda = lambda;
1:3631151:     this.alpha = alpha;
1:3631151:     this.Y = Y;
1:f6fd0ce:     this.numTrainingThreads = numTrainingThreads;
1:229aeff:     YtransposeY = getYtransposeY(Y);
3:3631151:   }
1:f6fd0ce: 
1:3631151:   public Vector solve(Vector ratings) {
1:229aeff:     return solve(YtransposeY.plus(getYtransponseCuMinusIYPlusLambdaI(ratings)), getYtransponseCuPu(ratings));
1:3631151:   }
1:3631151: 
1:4fbfbc6:   private static Vector solve(Matrix A, Matrix y) {
1:3631151:     return new QRDecomposition(A).solve(y).viewColumn(0);
1:3631151:   }
1:3631151: 
1:5d66758:   double confidence(double rating) {
1:3631151:     return 1 + alpha * rating;
1:3631151:   }
1:3631151: 
1:3631151:   /* Y' Y */
1:fcb436d:   public Matrix getYtransposeY(final OpenIntObjectHashMap<Vector> Y) {
1:fcb436d: 
1:f6fd0ce:     ExecutorService queue = Executors.newFixedThreadPool(numTrainingThreads);
1:62b94a5:     if (log.isInfoEnabled()) {
1:62b94a5:       log.info("Starting the computation of Y'Y");
1:62b94a5:     }
1:f6fd0ce:     long startTime = System.nanoTime();
1:f6fd0ce:     final IntArrayList indexes = Y.keys();
1:f6fd0ce:     final int numIndexes = indexes.size();
1:f6fd0ce:   
1:f6fd0ce:     final double[][] YtY = new double[numFeatures][numFeatures];
1:f6fd0ce:   
1:0f55314:     // Compute Y'Y by dot products between the 'columns' of Y
1:0f55314:     for (int i = 0; i < numFeatures; i++) {
1:0f55314:       for (int j = i; j < numFeatures; j++) {
1:f6fd0ce:   
1:f6fd0ce:         final int ii = i;
1:f6fd0ce:         final int jj = j;
1:f6fd0ce:         queue.execute(new Runnable() {
1:f6fd0ce:           @Override
1:f6fd0ce:           public void run() {
1:f6fd0ce:             double dot = 0;
1:f6fd0ce:             for (int k = 0; k < numIndexes; k++) {
1:f6fd0ce:               Vector row = Y.get(indexes.getQuick(k));
1:f6fd0ce:               dot += row.getQuick(ii) * row.getQuick(jj);
1:f6fd0ce:             }
1:f6fd0ce:             YtY[ii][jj] = dot;
1:f6fd0ce:             if (ii != jj) {
1:f6fd0ce:               YtY[jj][ii] = dot;
1:f6fd0ce:             }
1:f6fd0ce:           }
1:f6fd0ce:         });
1:f6fd0ce:   
1:0f55314:       }
1:0f55314:     }
1:f6fd0ce:     queue.shutdown();
1:f6fd0ce:     try {
1:f6fd0ce:       queue.awaitTermination(1, TimeUnit.DAYS);
1:f6fd0ce:     } catch (InterruptedException e) {
1:62b94a5:       log.error("Error during Y'Y queue shutdown", e);
1:62b94a5:       throw new RuntimeException("Error during Y'Y queue shutdown");
1:f6fd0ce:     }
1:62b94a5:     if (log.isInfoEnabled()) {
1:62b94a5:       log.info("Computed Y'Y in " + (System.nanoTime() - startTime) / 1000000.0 + " ms" );
1:62b94a5:     }
1:e5cc83d:     return new DenseMatrix(YtY, true);
1:0f55314:   }
1:3631151: 
1:3631151:   /** Y' (Cu - I) Y + λ I */
1:229aeff:   private Matrix getYtransponseCuMinusIYPlusLambdaI(Vector userRatings) {
1:3631151:     Preconditions.checkArgument(userRatings.isSequentialAccess(), "need sequential access to ratings!");
1:3631151: 
1:3631151:     /* (Cu -I) Y */
1:02ff22f:     OpenIntObjectHashMap<Vector> CuMinusIY = new OpenIntObjectHashMap<>(userRatings.getNumNondefaultElements());
1:dc62944:     for (Element e : userRatings.nonZeroes()) {
1:3631151:       CuMinusIY.put(e.index(), Y.get(e.index()).times(confidence(e.get()) - 1));
1:0f55314:     }
1:3631151: 
1:3631151:     Matrix YtransponseCuMinusIY = new DenseMatrix(numFeatures, numFeatures);
1:3631151: 
1:3631151:     /* Y' (Cu -I) Y by outer products */
1:dc62944:     for (Element e : userRatings.nonZeroes()) {
1:dc62944:       for (Vector.Element feature : Y.get(e.index()).all()) {
1:3631151:         Vector partial = CuMinusIY.get(e.index()).times(feature.get());
1:3631151:         YtransponseCuMinusIY.viewRow(feature.index()).assign(partial, Functions.PLUS);
1:3631151:       }
1:3631151:     }
1:3631151: 
1:3631151:     /* Y' (Cu - I) Y + λ I  add lambda on the diagonal */
1:3631151:     for (int feature = 0; feature < numFeatures; feature++) {
1:3631151:       YtransponseCuMinusIY.setQuick(feature, feature, YtransponseCuMinusIY.getQuick(feature, feature) + lambda);
1:3631151:     }
1:3631151: 
1:3631151:     return YtransponseCuMinusIY;
1:3631151:   }
1:3631151: 
1:3631151:   /** Y' Cu p(u) */
1:229aeff:   private Matrix getYtransponseCuPu(Vector userRatings) {
1:3631151:     Preconditions.checkArgument(userRatings.isSequentialAccess(), "need sequential access to ratings!");
1:3631151: 
1:3631151:     Vector YtransponseCuPu = new DenseVector(numFeatures);
1:3631151: 
1:dc62944:     for (Element e : userRatings.nonZeroes()) {
1:4fbfbc6:       YtransponseCuPu.assign(Y.get(e.index()).times(confidence(e.get())), Functions.PLUS);
1:3631151:     }
1:3631151: 
1:3631151:     return columnVectorAsMatrix(YtransponseCuPu);
1:3631151:   }
1:3631151: 
1:3631151:   private Matrix columnVectorAsMatrix(Vector v) {
1:e5cc83d:     double[][] matrix =  new double[numFeatures][1];
1:dc62944:     for (Vector.Element e : v.all()) {
1:e5cc83d:       matrix[e.index()][0] =  e.get();
1:3631151:     }
1:e5cc83d:     return new DenseMatrix(matrix, true);
1:3631151:   }
1:3631151: 
1:3631151: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     OpenIntObjectHashMap<Vector> CuMinusIY = new OpenIntObjectHashMap<>(userRatings.getNumNondefaultElements());
author:Ted Dunning
-------------------------------------------------------------------------------
commit:fcb436d
/////////////////////////////////////////////////////////////////////////
1:   public Matrix getYtransposeY(final OpenIntObjectHashMap<Vector> Y) {
1: 
commit:8bcaa77
/////////////////////////////////////////////////////////////////////////
0:   private Matrix getYtransposeY(final OpenIntObjectHashMap<Vector> Y) {
commit:402e296
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       OpenIntObjectHashMap<Vector> Y) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:62b94a5
/////////////////////////////////////////////////////////////////////////
1:   
/////////////////////////////////////////////////////////////////////////
0:   Matrix getYtransposeY(final OpenIntObjectHashMap<Vector> Y) {
1:     if (log.isInfoEnabled()) {
1:       log.info("Starting the computation of Y'Y");
1:     }
/////////////////////////////////////////////////////////////////////////
1:       log.error("Error during Y'Y queue shutdown", e);
1:       throw new RuntimeException("Error during Y'Y queue shutdown");
1:     if (log.isInfoEnabled()) {
1:       log.info("Computed Y'Y in " + (System.nanoTime() - startTime) / 1000000.0 + " ms" );
1:     }
commit:f6fd0ce
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import com.google.common.base.Preconditions;
/////////////////////////////////////////////////////////////////////////
1:   private final int numTrainingThreads;
1:   
1:   private static final Logger log = LoggerFactory.getLogger(ImplicitFeedbackAlternatingLeastSquaresSolver.class);
1:       OpenIntObjectHashMap<Vector> Y, int numTrainingThreads) {
1:     this.numTrainingThreads = numTrainingThreads;
/////////////////////////////////////////////////////////////////////////
0:   private Matrix getYtransposeY(final OpenIntObjectHashMap<Vector> Y) {
1:   
1:     ExecutorService queue = Executors.newFixedThreadPool(numTrainingThreads);
0:     log.info("starting Y transpose Y");
1:     long startTime = System.nanoTime();
1:     final IntArrayList indexes = Y.keys();
1:     final int numIndexes = indexes.size();
1:   
1:     final double[][] YtY = new double[numFeatures][numFeatures];
1:   
1:   
1:         final int ii = i;
1:         final int jj = j;
1:         queue.execute(new Runnable() {
1:           @Override
1:           public void run() {
1:             double dot = 0;
1:             for (int k = 0; k < numIndexes; k++) {
1:               Vector row = Y.get(indexes.getQuick(k));
1:               dot += row.getQuick(ii) * row.getQuick(jj);
1:             }
1:             YtY[ii][jj] = dot;
1:             if (ii != jj) {
1:               YtY[jj][ii] = dot;
1:             }
1:           }
1:         });
1:   
1:     queue.shutdown();
1:     try {
1:       queue.awaitTermination(1, TimeUnit.DAYS);
1:     } catch (InterruptedException e) {
0:       log.error("Error during YtY queue shutdown", e);
0:       throw new RuntimeException("Error during YtY queue shutdown");
1:     }
0:     log.info("done yty in " + (System.nanoTime() - startTime) / 1000000.0 + " ms" );
commit:5d66758
/////////////////////////////////////////////////////////////////////////
1:   double confidence(double rating) {
commit:e5cc83d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.CholeskyDecomposition;
/////////////////////////////////////////////////////////////////////////
0:     int numIndexes = indexes.size();
0:     double[][] YtY = new double[numFeatures][numFeatures];
0:         for (int k = 0; k < numIndexes; k++) {
0:         YtY[i][j] = dot;
0:           YtY[j][i] = dot;
1:     return new DenseMatrix(YtY, true);
/////////////////////////////////////////////////////////////////////////
0:     OpenIntObjectHashMap<Vector> CuMinusIY = new OpenIntObjectHashMap<Vector>(userRatings.getNumNondefaultElements());
/////////////////////////////////////////////////////////////////////////
1:     double[][] matrix =  new double[numFeatures][1];
1:       matrix[e.index()][0] =  e.get();
1:     return new DenseMatrix(matrix, true);
commit:0f55314
/////////////////////////////////////////////////////////////////////////
0:     Matrix YTY = new DenseMatrix(numFeatures, numFeatures);
1:     // Compute Y'Y by dot products between the 'columns' of Y
1:     for (int i = 0; i < numFeatures; i++) {
1:       for (int j = i; j < numFeatures; j++) {
0:         double dot = 0;
0:         for (int k = 0; k < indexes.size(); k++) {
0:           Vector row = Y.get(indexes.getQuick(k));
0:           dot += row.getQuick(i) * row.getQuick(j);
1:         }
0:         YTY.setQuick(i, j, dot);
0:         if (i != j) {
0:           YTY.setQuick(j, i, dot);
1:         }
1:       }
1:     }
0:     return YTY;
commit:3631151
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.als;
1: 
0: import com.google.common.base.Preconditions;
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.QRDecomposition;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.function.Functions;
1: import org.apache.mahout.math.list.IntArrayList;
1: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1: 
0: import java.util.Iterator;
1: 
1: /** see <a href="http://research.yahoo.com/pub/2433">Collaborative Filtering for Implicit Feedback Datasets</a> */
1: public class ImplicitFeedbackAlternatingLeastSquaresSolver {
1: 
1:   private final int numFeatures;
1:   private final double alpha;
1:   private final double lambda;
1: 
1:   private final OpenIntObjectHashMap<Vector> Y;
1:   private final Matrix YtransposeY;
1: 
1:   public ImplicitFeedbackAlternatingLeastSquaresSolver(int numFeatures, double lambda, double alpha,
0:       OpenIntObjectHashMap Y) {
1:     this.numFeatures = numFeatures;
1:     this.lambda = lambda;
1:     this.alpha = alpha;
1:     this.Y = Y;
0:     YtransposeY = YtransposeY(Y);
1:   }
1: 
1:   public Vector solve(Vector ratings) {
0:     return solve(YtransposeY.plus(YtransponseCuMinusIYPlusLambdaI(ratings)), YtransponseCuPu(ratings));
1:   }
1: 
0:   private Vector solve(Matrix A, Matrix y) {
1:     return new QRDecomposition(A).solve(y).viewColumn(0);
1:   }
1: 
0:   protected double confidence(double rating) {
1:     return 1 + alpha * rating;
1:   }
1: 
1:   /* Y' Y */
0:   private Matrix YtransposeY(OpenIntObjectHashMap<Vector> Y) {
1: 
0:     Matrix compactedY = new DenseMatrix(Y.size(), numFeatures);
0:     IntArrayList indexes = Y.keys();
0:     indexes.quickSort();
1: 
0:     int row = 0;
0:     for (int index : indexes.elements()) {
0:       compactedY.assignRow(row++, Y.get(index));
1:     }
1: 
0:     return compactedY.transpose().times(compactedY);
1:   }
1: 
1:   /** Y' (Cu - I) Y + λ I */
0:   private Matrix YtransponseCuMinusIYPlusLambdaI(Vector userRatings) {
1:     Preconditions.checkArgument(userRatings.isSequentialAccess(), "need sequential access to ratings!");
1: 
1:     /* (Cu -I) Y */
0:     OpenIntObjectHashMap<Vector> CuMinusIY = new OpenIntObjectHashMap<Vector>();
0:     Iterator<Vector.Element> ratings = userRatings.iterateNonZero();
0:     while (ratings.hasNext()) {
0:       Vector.Element e = ratings.next();
1:       CuMinusIY.put(e.index(), Y.get(e.index()).times(confidence(e.get()) - 1));
1:     }
1: 
1:     Matrix YtransponseCuMinusIY = new DenseMatrix(numFeatures, numFeatures);
1: 
1:     /* Y' (Cu -I) Y by outer products */
0:     ratings = userRatings.iterateNonZero();
0:     while (ratings.hasNext()) {
0:       Vector.Element e = ratings.next();
0:       for (Vector.Element feature : Y.get(e.index())) {
1:         Vector partial = CuMinusIY.get(e.index()).times(feature.get());
1:         YtransponseCuMinusIY.viewRow(feature.index()).assign(partial, Functions.PLUS);
1:       }
1:     }
1: 
1:     /* Y' (Cu - I) Y + λ I  add lambda on the diagonal */
1:     for (int feature = 0; feature < numFeatures; feature++) {
1:       YtransponseCuMinusIY.setQuick(feature, feature, YtransponseCuMinusIY.getQuick(feature, feature) + lambda);
1:     }
1: 
1:     return YtransponseCuMinusIY;
1:   }
1: 
1:   /** Y' Cu p(u) */
0:   private Matrix YtransponseCuPu(Vector userRatings) {
1:     Preconditions.checkArgument(userRatings.isSequentialAccess(), "need sequential access to ratings!");
1: 
1:     Vector YtransponseCuPu = new DenseVector(numFeatures);
1: 
0:     Iterator<Vector.Element> ratings = userRatings.iterateNonZero();
0:     while (ratings.hasNext()) {
0:       Vector.Element e = ratings.next();
0:       YtransponseCuPu.assign((Y.get(e.index()).times(confidence(e.get()))), Functions.PLUS);
1:     }
1: 
1:     return columnVectorAsMatrix(YtransponseCuPu);
1:   }
1: 
1:   private Matrix columnVectorAsMatrix(Vector v) {
0:     Matrix matrix = new DenseMatrix(numFeatures, 1);
0:     for (Vector.Element e : v)
0:     matrix.setQuick(e.index(), 0, e.get());
0:     return matrix;
1:   }
1: 
1: }
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.Vector.Element;
/////////////////////////////////////////////////////////////////////////
1:     for (Element e : userRatings.nonZeroes()) {
1:     for (Element e : userRatings.nonZeroes()) {
1:       for (Vector.Element feature : Y.get(e.index()).all()) {
/////////////////////////////////////////////////////////////////////////
1:     for (Element e : userRatings.nonZeroes()) {
/////////////////////////////////////////////////////////////////////////
1:     for (Vector.Element e : v.all()) {
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     YtransposeY = getYtransposeY(Y);
1:     return solve(YtransposeY.plus(getYtransponseCuMinusIYPlusLambdaI(ratings)), getYtransponseCuPu(ratings));
/////////////////////////////////////////////////////////////////////////
0:   private Matrix getYtransposeY(OpenIntObjectHashMap<Vector> Y) {
/////////////////////////////////////////////////////////////////////////
1:   private Matrix getYtransponseCuMinusIYPlusLambdaI(Vector userRatings) {
/////////////////////////////////////////////////////////////////////////
1:   private Matrix getYtransponseCuPu(Vector userRatings) {
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1:   private static Vector solve(Matrix A, Matrix y) {
/////////////////////////////////////////////////////////////////////////
1:       YtransponseCuPu.assign(Y.get(e.index()).times(confidence(e.get())), Functions.PLUS);
/////////////////////////////////////////////////////////////////////////
0:     for (Vector.Element e : v) {
0:       matrix.setQuick(e.index(), 0, e.get());
0:     }
============================================================================