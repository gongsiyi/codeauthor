2:c3154b8: /**
1:c3154b8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c3154b8:  * contributor license agreements.  See the NOTICE file distributed with
1:c3154b8:  * this work for additional information regarding copyright ownership.
1:c3154b8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c3154b8:  * (the "License"); you may not use this file except in compliance with
1:c3154b8:  * the License.  You may obtain a copy of the License at
1:c3154b8:  *
1:c3154b8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c3154b8:  *
1:c3154b8:  * Unless required by applicable law or agreed to in writing, software
1:c3154b8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c3154b8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c3154b8:  * See the License for the specific language governing permissions and
1:c3154b8:  * limitations under the License.
2:c3154b8:  */
3:c3154b8: 
1:d95bdda: package org.apache.mahout.cf.taste.hadoop;
1:c3154b8: 
1:c3154b8: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1:c3154b8: import org.apache.mahout.common.RandomUtils;
1:c3154b8: 
1:c3154b8: /**
1:8a8e10d:  * Mutable variant of {@link RecommendedItem}
1:c3154b8:  */
1:d95bdda: public class MutableRecommendedItem implements RecommendedItem {
1:c3154b8: 
1:8a8e10d:   private long itemID;
1:c3154b8:   private float value;
1:c3154b8: 
1:d95bdda:   public MutableRecommendedItem() {}
1:d95bdda: 
1:d95bdda:   public MutableRecommendedItem(long itemID, float value) {
1:d95bdda:     this.itemID = itemID;
1:d95bdda:     this.value = value;
1:d95bdda:   }
1:d95bdda: 
1:c3154b8:   @Override
1:c3154b8:   public long getItemID() {
1:c3154b8:     return itemID;
3:c3154b8:   }
1:c3154b8: 
1:c3154b8:   @Override
1:c3154b8:   public float getValue() {
1:c3154b8:     return value;
1:c3154b8:   }
1:c3154b8: 
1:bbd2b7e:   public void setItemID(long itemID) {
1:bbd2b7e:     this.itemID = itemID;
1:bbd2b7e:   }
1:bbd2b7e: 
1:8a8e10d:   public void set(long itemID, float value) {
1:8a8e10d:     this.itemID = itemID;
1:8a8e10d:     this.value = value;
1:8a8e10d:   }
1:8a8e10d: 
1:c3154b8:   public void capToMaxValue(float maxValue) {
1:c3154b8:     if (value > maxValue) {
1:c3154b8:       value = maxValue;
1:8a8e10d:     }
1:c3154b8:   }
1:8a8e10d: 
1:c3154b8:   @Override
1:c3154b8:   public String toString() {
1:8a8e10d:     return "MutableRecommendedItem[item:" + itemID + ", value:" + value + ']';
1:c3154b8:   }
1:c3154b8: 
1:c3154b8:   @Override
1:c3154b8:   public int hashCode() {
1:c3154b8:     return (int) itemID ^ RandomUtils.hashFloat(value);
1:c3154b8:   }
1:c3154b8: 
1:c3154b8:   @Override
1:c3154b8:   public boolean equals(Object o) {
1:8a8e10d:     if (!(o instanceof MutableRecommendedItem)) {
1:c3154b8:       return false;
1:c3154b8:     }
1:c3154b8:     RecommendedItem other = (RecommendedItem) o;
1:c3154b8:     return itemID == other.getItemID() && value == other.getValue();
1:c3154b8:   }
1:c3154b8: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bbd2b7e
/////////////////////////////////////////////////////////////////////////
1:   public void setItemID(long itemID) {
1:     this.itemID = itemID;
1:   }
1: 
commit:d95bdda
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.hadoop;
/////////////////////////////////////////////////////////////////////////
1: public class MutableRecommendedItem implements RecommendedItem {
1:   public MutableRecommendedItem() {}
1: 
1:   public MutableRecommendedItem(long itemID, float value) {
1:     this.itemID = itemID;
1:     this.value = value;
1:   }
1: 
commit:5d66758
/////////////////////////////////////////////////////////////////////////
commit:8a8e10d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.cf.taste.impl.recommender.GenericRecommendedItem;
1:  * Mutable variant of {@link RecommendedItem}
0: class MutableRecommendedItem implements RecommendedItem {
1:   private long itemID;
/////////////////////////////////////////////////////////////////////////
1:   public void set(long itemID, float value) {
1:     this.itemID = itemID;
1:     this.value = value;
1:   }
1: 
0:   public RecommendedItem copy() {
0:     return new GenericRecommendedItem(itemID, value);
1:   }
1: 
1:     return "MutableRecommendedItem[item:" + itemID + ", value:" + value + ']';
/////////////////////////////////////////////////////////////////////////
1:     if (!(o instanceof MutableRecommendedItem)) {
commit:c3154b8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.cf.taste.hadoop.als;
1: 
0: import com.google.common.base.Preconditions;
1: import org.apache.mahout.cf.taste.recommender.RecommendedItem;
1: import org.apache.mahout.common.RandomUtils;
1: 
1: /**
0:  * Mutable variant of {@link RecommendedItem} that allows to cap the preference to a max value
1:  */
0: class CappableRecommendedItem implements RecommendedItem {
1: 
0:   private final long itemID;
1:   private float value;
1: 
1:   /**
0:    * @throws IllegalArgumentException
0:    *           if item is null or value is NaN
1:    */
0:   public CappableRecommendedItem(long itemID, float value) {
0:     Preconditions.checkArgument(!Float.isNaN(value), "value is NaN");
0:     this.itemID = itemID;
0:     this.value = value;
1:   }
1: 
1:   @Override
1:   public long getItemID() {
1:     return itemID;
1:   }
1: 
1:   @Override
1:   public float getValue() {
1:     return value;
1:   }
1: 
1:   public void capToMaxValue(float maxValue) {
1:     if (value > maxValue) {
1:       value = maxValue;
1:     }
1:   }
1: 
1:   @Override
1:   public String toString() {
0:     return "CappableRecommendedItem[item:" + itemID + ", value:" + value + ']';
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return (int) itemID ^ RandomUtils.hashFloat(value);
1:   }
1: 
1:   @Override
1:   public boolean equals(Object o) {
0:     if (!(o instanceof CappableRecommendedItem)) {
1:       return false;
1:     }
1:     RecommendedItem other = (RecommendedItem) o;
1:     return itemID == other.getItemID() && value == other.getValue();
1:   }
1: }
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
============================================================================