1:466f319: /**
1:466f319:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:466f319:  * contributor license agreements.  See the NOTICE file distributed with
1:466f319:  * this work for additional information regarding copyright ownership.
1:466f319:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:466f319:  * (the "License"); you may not use this file except in compliance with
1:466f319:  * the License.  You may obtain a copy of the License at
1:466f319:  *
1:466f319:  *     http://www.apache.org/licenses/LICENSE-2.0
1:466f319:  *
1:466f319:  * Unless required by applicable law or agreed to in writing, software
1:466f319:  * distributed under the License is distributed on an "AS IS" BASIS,
1:466f319:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:466f319:  * See the License for the specific language governing permissions and
1:466f319:  * limitations under the License.
1:466f319:  */
1:f5e7732: 
1:466f319: package org.apache.mahout.text;
2:466f319: 
1:466f319: import org.apache.hadoop.conf.Configuration;
1:466f319: import org.apache.hadoop.fs.FileStatus;
1:466f319: import org.apache.hadoop.fs.FileSystem;
1:466f319: import org.apache.hadoop.fs.Path;
1:466f319: import org.apache.hadoop.fs.PathFilter;
1:29a7f38: import org.apache.mahout.utils.io.ChunkedWriter;
1:466f319: import org.slf4j.Logger;
1:466f319: import org.slf4j.LoggerFactory;
1:466f319: 
1:466f319: import java.io.IOException;
1:466f319: import java.nio.charset.Charset;
1:466f319: import java.util.Map;
1:466f319: 
1:466f319: /**
1:466f319:  * Implement this interface if you wish to extend SequenceFilesFromDirectory with your own parsing logic.
1:466f319:  */
1:7c0da90: public abstract class SequenceFilesFromDirectoryFilter implements PathFilter {
1:466f319:   private static final Logger log = LoggerFactory.getLogger(SequenceFilesFromDirectoryFilter.class);
1:466f319: 
1:e4dfc93:   private final String prefix;
1:e4dfc93:   private final ChunkedWriter writer;
1:e4dfc93:   private final Charset charset;
1:e4dfc93:   private final FileSystem fs;
1:e4dfc93:   private final Map<String, String> options;
1:7c0da90:   private final Configuration conf;
1:466f319: 
1:a13b4b7:   protected SequenceFilesFromDirectoryFilter(Configuration conf,
1:a13b4b7:                                              String keyPrefix,
1:a13b4b7:                                              Map<String, String> options,
1:f5e7732:                                              ChunkedWriter writer,
1:7c0da90:                                              Charset charset,
1:f5e7732:                                              FileSystem fs) {
1:466f319:     this.prefix = keyPrefix;
1:466f319:     this.writer = writer;
1:7c0da90:     this.charset = charset;
1:f5e7732:     this.fs = fs;
1:466f319:     this.options = options;
1:7c0da90:     this.conf = conf;
1:e4dfc93:   }
1:e4dfc93: 
1:e4dfc93:   protected final String getPrefix() {
1:e4dfc93:     return prefix;
1:e4dfc93:   }
1:e4dfc93: 
1:e4dfc93:   protected final ChunkedWriter getWriter() {
1:e4dfc93:     return writer;
1:e4dfc93:   }
1:e4dfc93: 
1:e4dfc93:   protected final Charset getCharset() {
1:e4dfc93:     return charset;
1:e4dfc93:   }
1:e4dfc93: 
1:e4dfc93:   protected final FileSystem getFs() {
1:e4dfc93:     return fs;
2:466f319:   }
1:466f319: 
1:466f319:   protected final Map<String, String> getOptions() {
1:466f319:     return options;
1:466f319:   }
1:7c0da90:   
1:7c0da90:   protected final Configuration getConf() {
1:7c0da90:     return conf;
1:7c0da90:   }
1:466f319: 
1:466f319:   @Override
1:466f319:   public final boolean accept(Path current) {
1:466f319:     log.debug("CURRENT: {}", current.getName());
1:466f319:     try {
1:a13b4b7:       for (FileStatus fst : fs.listStatus(current)) {
1:466f319:         log.debug("CHILD: {}", fst.getPath().getName());
1:466f319:         process(fst, current);
1:466f319:       }
1:a13b4b7:     } catch (IOException ioe) {
1:a13b4b7:       throw new IllegalStateException(ioe);
1:466f319:     }
1:466f319:     return false;
1:466f319:   }
1:466f319: 
1:466f319:   protected abstract void process(FileStatus in, Path current) throws IOException;
1:466f319: }
============================================================================
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.utils.io.ChunkedWriter;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:7c0da90
/////////////////////////////////////////////////////////////////////////
1: public abstract class SequenceFilesFromDirectoryFilter implements PathFilter {
/////////////////////////////////////////////////////////////////////////
1:   private final Configuration conf;
1:                                              Charset charset,
1:     this.charset = charset;
1:     this.conf = conf;
/////////////////////////////////////////////////////////////////////////
1:   
1:   protected final Configuration getConf() {
1:     return conf;
1:   }
commit:e4dfc93
/////////////////////////////////////////////////////////////////////////
1:   private final String prefix;
1:   private final ChunkedWriter writer;
1:   private final Charset charset;
1:   private final FileSystem fs;
1:   private final Map<String, String> options;
/////////////////////////////////////////////////////////////////////////
0:     setConf(conf);
1:   }
1: 
1:   protected final String getPrefix() {
1:     return prefix;
1:   }
1: 
1:   protected final ChunkedWriter getWriter() {
1:     return writer;
1:   }
1: 
1:   protected final Charset getCharset() {
1:     return charset;
1:   }
1: 
1:   protected final FileSystem getFs() {
1:     return fs;
commit:f5e7732
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                                              ChunkedWriter writer,
1:                                              FileSystem fs) {
1:     this.fs = fs;
commit:50fd693
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   protected SequenceFilesFromDirectoryFilter(Configuration conf,
1:                                              String keyPrefix,
1:                                              Map<String, String> options,
0:                                              ChunkedWriter writer)
/////////////////////////////////////////////////////////////////////////
1:       for (FileStatus fst : fs.listStatus(current)) {
1:     } catch (IOException ioe) {
1:       throw new IllegalStateException(ioe);
author:Isabel Drost
-------------------------------------------------------------------------------
commit:466f319
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.text;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileStatus;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.hadoop.fs.PathFilter;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: import java.nio.charset.Charset;
0: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
1:  * Implement this interface if you wish to extend SequenceFilesFromDirectory with your own parsing logic.
1:  */
0: public abstract class SequenceFilesFromDirectoryFilter extends SequenceFilesFromDirectory implements PathFilter {
1:   private static final Logger log = LoggerFactory.getLogger(SequenceFilesFromDirectoryFilter.class);
1: 
0:   protected final String prefix;
0:   protected final ChunkedWriter writer;
0:   protected final Charset charset;
0:   protected final Configuration conf;
0:   protected final FileSystem fs;
0:   protected final Map<String, String> options;
1: 
0:   protected SequenceFilesFromDirectoryFilter() {
0:     this.prefix = null;
0:     this.writer = null;
0:     this.charset = null;
0:     this.conf = null;
0:     this.fs = null;
0:     this.options = null;
1:   }
1: 
0:   public SequenceFilesFromDirectoryFilter(Configuration conf, String keyPrefix, Map<String, String> options, ChunkedWriter writer)
0:     throws IOException {
0:     this.conf = conf;
1:     this.prefix = keyPrefix;
1:     this.writer = writer;
0:     this.charset = Charset.forName(options.get(SequenceFilesFromDirectory.CHARSET_OPTION[0]));
0:     this.fs = FileSystem.get(conf);
1:     this.options = options;
1:   }
1: 
1:   protected final Map<String, String> getOptions() {
1:     return options;
1:   }
1: 
1:   @Override
1:   public final boolean accept(Path current) {
1:     log.debug("CURRENT: {}", current.getName());
1:     try {
0:       FileStatus[] fstatus = fs.listStatus(current);
0:       for (FileStatus fst : fstatus) {
1:         log.debug("CHILD: {}", fst.getPath().getName());
1:         process(fst, current);
1:       }
0:     } catch (Exception e) {
0:       throw new IllegalStateException(e);
1:     }
1:     return false;
1:   }
1: 
1:   protected abstract void process(FileStatus in, Path current) throws IOException;
1: }
============================================================================