1:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
1:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
1:8c37a84:  */
1:e107bfa: 
1:52ce412: package org.apache.mahout.classifier.df.data;
1:e107bfa: 
1:d6aba1a: import com.google.common.base.Preconditions;
1:67a531e: import org.apache.commons.lang3.ArrayUtils;
1:a435efb: import org.apache.mahout.math.DenseVector;
1:7404f70: 
1:d6aba1a: import java.util.regex.Pattern;
13:8c37a84: 
1:8c37a84: /**
1:8c37a84:  * Converts String to Instance using a Dataset
1:8c37a84:  */
1:1ffa3a4: @Deprecated
1:8c37a84: public class DataConverter {
1:2563b6e: 
1:d6aba1a:   private static final Pattern COMMA_SPACE = Pattern.compile("[, ]");
1:8c37a84: 
1:8547de7:   private final Dataset dataset;
1:d6aba1a: 
1:8c37a84:   public DataConverter(Dataset dataset) {
1:8c37a84:     this.dataset = dataset;
1:2563b6e:   }
1:d6aba1a: 
1:083eb98:   public Instance convert(CharSequence string) {
1:e107bfa:     // all attributes (categorical, numerical, label), ignored
1:e107bfa:     int nball = dataset.nbAttributes() + dataset.getIgnored().length;
1:d6aba1a: 
1:4194a28:     String[] tokens = COMMA_SPACE.split(string);
1:d6aba1a:     Preconditions.checkArgument(tokens.length == nball,
1:cd167f9:         "Wrong number of attributes in the string: " + tokens.length + ". Must be " + nball);
1:d6aba1a: 
1:8c37a84:     int nbattrs = dataset.nbAttributes();
1:8c37a84:     DenseVector vector = new DenseVector(nbattrs);
1:d6aba1a: 
1:8c37a84:     int aId = 0;
1:8c37a84:     for (int attr = 0; attr < nball; attr++) {
1:16e952d:       if (!ArrayUtils.contains(dataset.getIgnored(), attr)) {
1:16e952d:         String token = tokens[attr].trim();
1:d6aba1a: 
1:16e952d:         if ("?".equals(token)) {
1:16e952d:           // missing value
1:16e952d:           return null;
1:16e952d:         }
1:d6aba1a: 
1:16e952d:         if (dataset.isNumerical(aId)) {
1:16e952d:           vector.set(aId++, Double.parseDouble(token));
1:16e952d:         } else { // CATEGORICAL
1:16e952d:           vector.set(aId, dataset.valueOf(aId, token));
1:16e952d:           aId++;
1:16e952d:         }
1:e107bfa:       }
1:7404f70:     }
1:d6aba1a: 
1:083eb98:     return new Instance(vector);
1:2563b6e:   }
7:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
commit:16e952d
/////////////////////////////////////////////////////////////////////////
1:       if (!ArrayUtils.contains(dataset.getIgnored(), attr)) {
1:         String token = tokens[attr].trim();
1:         if ("?".equals(token)) {
1:           // missing value
1:           return null;
1:         }
1:         if (dataset.isNumerical(aId)) {
1:           vector.set(aId++, Double.parseDouble(token));
1:         } else { // CATEGORICAL
1:           vector.set(aId, dataset.valueOf(aId, token));
1:           aId++;
1:         }
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:         "Wrong number of attributes in the string: " + tokens.length + ". Must be " + nball);
commit:67a531e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.ArrayUtils;
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Preconditions;
1: import java.util.regex.Pattern;
1:   private static final Pattern COMMA_SPACE = Pattern.compile("[, ]");
1: 
1: 
1: 
1:     Preconditions.checkArgument(tokens.length == nball,
0:         "Wrong number of attributes in the string");
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static final Pattern COMMA_SPACE = Pattern.compile("[, ]");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:       } else { // CATEGORICAL
commit:083eb98
/////////////////////////////////////////////////////////////////////////
1:   public Instance convert(CharSequence string) {
/////////////////////////////////////////////////////////////////////////
0:       log.error("Label not found, instance string : {}", string);
1:     return new Instance(vector);
commit:e107bfa
/////////////////////////////////////////////////////////////////////////
1:     // all attributes (categorical, numerical, label), ignored
1:     int nball = dataset.nbAttributes() + dataset.getIgnored().length;
/////////////////////////////////////////////////////////////////////////
1: 
0:       String token = tokens[attr].trim();
0:       if (aId == dataset.getLabelId()) {
1:       } 
1:       
0:       if (dataset.isNumerical(aId)) {
0:       } else { // CATEGORICAL/LABEL
/////////////////////////////////////////////////////////////////////////
0:     return new Instance(id, vector);
commit:7404f70
/////////////////////////////////////////////////////////////////////////
1: 
0:       if ("?".equals(token)) {
0:         // missing value
0:         return null;
1:       }
commit:2563b6e
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:   private static final Logger log = LoggerFactory.getLogger(DataConverter.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:       String token = tokenizer.nextToken().trim();
/////////////////////////////////////////////////////////////////////////
0:         if (label == -1) {
0:           log.error(String.format("label token: %s\ndataset.labels: %s",
0:                   token, Arrays.toString(dataset.labels())));
0:           throw new IllegalStateException("Label value ("+token+") not known");
1:         }
/////////////////////////////////////////////////////////////////////////
0:     if (label == -1) {
0:       log.error(String.format("Label not found, instance id : %d, \nstring : %s", id, string));
1:     }
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.data;
1: 
0: import java.util.StringTokenizer;
1: 
0: import org.apache.commons.lang.ArrayUtils;
0: import org.apache.mahout.matrix.DenseVector;
1: 
1: /**
1:  * Converts String to Instance using a Dataset
1:  */
1: public class DataConverter {
1: 
0:   protected final Dataset dataset;
1: 
1:   public DataConverter(Dataset dataset) {
1:     this.dataset = dataset;
1:   }
1: 
0:   public Instance convert(int id, String string) {
0:     // all attributes (categorical, numerical), ignored, label
0:     int nball = dataset.nbAttributes() + dataset.getIgnored().length + 1;
1: 
0:     StringTokenizer tokenizer = new StringTokenizer(string, ", ");
0:     if (tokenizer.countTokens() != nball) {
0:       throw new RuntimeException("Wrong number of attributes in the string");
1:     }
1: 
1:     int nbattrs = dataset.nbAttributes();
1:     DenseVector vector = new DenseVector(nbattrs);
1: 
1:     int aId = 0;
0:     int label = -1;
1:     for (int attr = 0; attr < nball; attr++) {
0:       String token = tokenizer.nextToken();
1:       
0:       if (ArrayUtils.contains(dataset.getIgnored(), attr)) {
0:         continue; // IGNORED
1:       }
1:       
0:       if (attr == dataset.getLabelId()) {
0:         label = dataset.labelCode(token);
0:       } else if (dataset.isNumerical(aId)) {
0:         vector.set(aId++, Double.parseDouble(token));
0:       } else {
0:         vector.set(aId, dataset.valueOf(aId, token));
0:         aId++;
1:       }
1:     }
1: 
0:     if (label == -1)
0:       throw new RuntimeException("Label not found!");
1: 
0:     return new Instance(id, vector, label);
1:   }
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.data;
commit:a435efb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.DenseVector;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
0: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
0: 
0:   private static final Pattern COMMA_SPACE = Pattern.compile("[, ]");
0: 
0:   public Instance convert(int id, CharSequence string) {
1:     String[] tokens = COMMA_SPACE.split(string);
commit:3d44c1e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     String[] tokens = string.split("[, ]");
0:     Preconditions.checkArgument(tokens.length == nball, "Wrong number of attributes in the string");
/////////////////////////////////////////////////////////////////////////
0:       String token = tokens[attr].trim();
commit:69ba194
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Preconditions;
0: 
/////////////////////////////////////////////////////////////////////////
0:     Preconditions.checkArgument(tokenizer.countTokens() == nball, "Wrong number of attributes in the string");
commit:8a99d75
/////////////////////////////////////////////////////////////////////////
commit:70fa802
/////////////////////////////////////////////////////////////////////////
0: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
0:           log.error("label token: {} dataset.labels: {}", token, Arrays.toString(dataset.labels()));
/////////////////////////////////////////////////////////////////////////
0:       log.error("Label not found, instance id : {}, string : {}", id, string);
commit:acafdc0
/////////////////////////////////////////////////////////////////////////
0:       throw new IllegalArgumentException("Wrong number of attributes in the string");
/////////////////////////////////////////////////////////////////////////
0:       throw new IllegalStateException("Label not found!");
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1:   private final Dataset dataset;
author:Robin Anil
-------------------------------------------------------------------------------
commit:297bef5
/////////////////////////////////////////////////////////////////////////
0:           log.error(String.format("label token: %s\ndataset.labels: %s", token, Arrays
/////////////////////////////////////////////////////////////////////////
0:       log.error(String.format("Label not found, instance id : %d, \nstring : %s", id, string));
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0: import java.util.StringTokenizer;
/////////////////////////////////////////////////////////////////////////
0:   
0:   
0:   
0:   
0:     
0:     
0:     
/////////////////////////////////////////////////////////////////////////
0:       
/////////////////////////////////////////////////////////////////////////
0:           DataConverter.log.error(String.format("label token: %s\ndataset.labels: %s", token, Arrays
0:               .toString(dataset.labels())));
0:           throw new IllegalStateException("Label value (" + token + ") not known");
/////////////////////////////////////////////////////////////////////////
0:     
0:       DataConverter.log.error(String.format("Label not found, instance id : %d, \nstring : %s", id, string));
0:     
============================================================================