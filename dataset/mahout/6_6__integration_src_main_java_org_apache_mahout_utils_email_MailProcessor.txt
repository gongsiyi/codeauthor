2:29a7f38: /**
1:29a7f38:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29a7f38:  * contributor license agreements.  See the NOTICE file distributed with
1:29a7f38:  * this work for additional information regarding copyright ownership.
1:29a7f38:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29a7f38:  * (the "License"); you may not use this file except in compliance with
1:29a7f38:  * the License.  You may obtain a copy of the License at
1:d54c59b:  *
1:29a7f38:  *     http://www.apache.org/licenses/LICENSE-2.0
4:29a7f38:  *
1:29a7f38:  * Unless required by applicable law or agreed to in writing, software
1:29a7f38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29a7f38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29a7f38:  * See the License for the specific language governing permissions and
1:29a7f38:  * limitations under the License.
1:29a7f38:  */
1:29a7f38: 
1:29a7f38: package org.apache.mahout.utils.email;
1:29a7f38: 
1:29a7f38: import org.apache.mahout.common.iterator.FileLineIterable;
1:29a7f38: import org.apache.mahout.utils.io.ChunkedWriter;
1:29a7f38: import org.apache.mahout.utils.io.ChunkedWrapper;
1:29a7f38: import org.apache.mahout.utils.io.IOWriterWrapper;
1:29a7f38: import org.apache.mahout.utils.io.WrappedWriter;
1:3c22856: import org.slf4j.Logger;
1:3c22856: import org.slf4j.LoggerFactory;
1:29a7f38: 
1:29a7f38: import java.io.File;
1:29a7f38: import java.io.FileNotFoundException;
1:29a7f38: import java.io.IOException;
1:29a7f38: import java.io.Writer;
1:29a7f38: import java.util.regex.Matcher;
1:29a7f38: import java.util.regex.Pattern;
1:29a7f38: 
1:d54c59b: /**
1:58cc1ae:  * Converts an mbox mail archive into a group of Hadoop Sequence Files with equal size. The archive may optionally be
1:58cc1ae:  * gzipped or zipped. @see org.apache.mahout.text.SequenceFilesFromMailArchives
1:d54c59b:  */
1:29a7f38: public class MailProcessor {
1:3c22856: 
1:3c22856:   private static final Pattern MESSAGE_START = Pattern.compile("^From \\S+@\\S.*\\d{4}$", Pattern.CASE_INSENSITIVE);
1:3c22856:   private static final Pattern MESSAGE_ID_PREFIX = Pattern.compile("^message-id: <(.*)>$", Pattern.CASE_INSENSITIVE);
1:29a7f38:   // regular expressions used to parse individual messages
1:3c22856:   public static final Pattern SUBJECT_PREFIX = Pattern.compile("^subject: (.*)$", Pattern.CASE_INSENSITIVE);
1:3c22856:   //we need to have at least one character
1:3c22856:   public static final Pattern FROM_PREFIX = Pattern.compile("^from: (\\S.*)$", Pattern.CASE_INSENSITIVE);
1:3c22856:   public static final Pattern REFS_PREFIX = Pattern.compile("^references: (.*)$", Pattern.CASE_INSENSITIVE);
1:3c22856:   public static final Pattern TO_PREFIX = Pattern.compile("^to: (.*)$", Pattern.CASE_INSENSITIVE);
1:3c22856: 
1:4194a28:   private final String prefix;
1:4194a28:   private final MailOptions options;
1:4194a28:   private final WrappedWriter writer;
1:29a7f38: 
1:3c22856:   private static final Logger log = LoggerFactory.getLogger(MailProcessor.class);
1:3c22856: 
1:d54c59b:   /**
1:d54c59b:    * Creates a {@code MailProcessor} that does not write to sequence files, but to a single text file.
1:d54c59b:    * This constructor is for debugging and testing purposes.
1:d54c59b:    */
1:29a7f38:   public MailProcessor(MailOptions options, String prefix, Writer writer) {
1:29a7f38:     this.writer = new IOWriterWrapper(writer);
1:29a7f38:     this.options = options;
1:29a7f38:     this.prefix = prefix;
1:29a7f38:   }
1:29a7f38: 
1:d54c59b:   /**
1:d54c59b:    * This is the main constructor of {@code MailProcessor}.
1:d54c59b:    */
1:29a7f38:   public MailProcessor(MailOptions options, String prefix, ChunkedWriter writer) {
1:29a7f38:     this.writer = new ChunkedWrapper(writer);
1:29a7f38:     this.options = options;
1:29a7f38:     this.prefix = prefix;
1:29a7f38:   }
1:29a7f38: 
1:d54c59b:   /**
1:d54c59b:    * Parses one complete mail archive, writing output to the {@code writer} constructor parameter.
1:d54c59b:    * @param mboxFile  mail archive to parse
1:d54c59b:    * @return number of parsed mails
1:d54c59b:    * @throws IOException
1:d54c59b:    */
1:29a7f38:   public long parseMboxLineByLine(File mboxFile) throws IOException {
1:29a7f38:     long messageCount = 0;
1:29a7f38:     try {
1:29a7f38:       StringBuilder contents = new StringBuilder();
1:29a7f38:       // tmps used during mail message parsing
1:29a7f38:       StringBuilder body = new StringBuilder();
1:29a7f38:       Matcher messageIdMatcher = MESSAGE_ID_PREFIX.matcher("");
1:29a7f38:       Matcher messageBoundaryMatcher = MESSAGE_START.matcher("");
1:4194a28:       String[] patternResults = new String[options.getPatternsToMatch().length];
1:4194a28:       Matcher[] matchers = new Matcher[options.getPatternsToMatch().length];
1:29a7f38:       for (int i = 0; i < matchers.length; i++) {
1:4194a28:         matchers[i] = options.getPatternsToMatch()[i].matcher("");
1:29a7f38:       }
1:29a7f38: 
1:29a7f38:       String messageId = null;
1:29a7f38:       boolean inBody = false;
1:69f324d:       Pattern quotedTextPattern = options.getQuotedTextPattern();
1:4194a28:       for (String nextLine : new FileLineIterable(mboxFile, options.getCharset(), false)) {
1:e64dd36:         if (options.isStripQuotedText() && quotedTextPattern.matcher(nextLine).find()) {
1:69f324d:           continue;
1:69f324d:         }
1:29a7f38:         for (int i = 0; i < matchers.length; i++) {
1:29a7f38:           Matcher matcher = matchers[i];
1:29a7f38:           matcher.reset(nextLine);
1:29a7f38:           if (matcher.matches()) {
1:29a7f38:             patternResults[i] = matcher.group(1);
1:29a7f38:           }
1:29a7f38:         }
1:29a7f38: 
1:29a7f38:         // only start appending body content after we've seen a message ID
1:29a7f38:         if (messageId != null) {
1:29a7f38:           // first, see if we hit the end of the message
1:29a7f38:           messageBoundaryMatcher.reset(nextLine);
1:29a7f38:           if (messageBoundaryMatcher.matches()) {
1:29a7f38:             // done parsing this message ... write it out
1:29a7f38:             String key = generateKey(mboxFile, prefix, messageId);
1:29a7f38:             //if this ordering changes, then also change FromEmailToDictionaryMapper
1:4194a28:             writeContent(options.getSeparator(), contents, body, patternResults);
1:29a7f38:             writer.write(key, contents.toString());
1:29a7f38:             contents.setLength(0); // reset the buffer
1:29a7f38:             body.setLength(0);
1:29a7f38: 
1:29a7f38:             messageId = null;
1:29a7f38:             inBody = false;
1:29a7f38:           } else {
1:4194a28:             if (inBody && options.isIncludeBody()) {
1:e0ec7c1:               if (!nextLine.isEmpty()) {
1:4194a28:                 body.append(nextLine).append(options.getBodySeparator());
1:29a7f38:               }
1:29a7f38:             } else {
1:29a7f38:               // first empty line we see after reading the message Id
1:29a7f38:               // indicates that we are in the body ...
1:e0ec7c1:               inBody = nextLine.isEmpty();
1:29a7f38:             }
1:29a7f38:           }
1:29a7f38:         } else {
1:29a7f38:           if (nextLine.length() > 14) {
1:29a7f38:             messageIdMatcher.reset(nextLine);
1:29a7f38:             if (messageIdMatcher.matches()) {
1:29a7f38:               messageId = messageIdMatcher.group(1);
1:29a7f38:               ++messageCount;
1:29a7f38:             }
1:29a7f38:           }
1:29a7f38:         }
1:29a7f38:       }
1:29a7f38:       // write the last message in the file if available
1:29a7f38:       if (messageId != null) {
1:29a7f38:         String key = generateKey(mboxFile, prefix, messageId);
1:4194a28:         writeContent(options.getSeparator(), contents, body, patternResults);
1:29a7f38:         writer.write(key, contents.toString());
1:29a7f38:         contents.setLength(0); // reset the buffer
1:29a7f38:       }
1:29a7f38:     } catch (FileNotFoundException e) {
1:29a7f38:       // Skip file.
1:3c22856:       log.warn("Unable to process non-existing file", e);
1:29a7f38:     }
1:29a7f38:     // TODO: report exceptions and continue;
1:29a7f38:     return messageCount;
1:29a7f38:   }
1:29a7f38: 
1:4194a28:   protected static String generateKey(File mboxFile, String prefix, String messageId) {
1:29a7f38:     return prefix + File.separator + mboxFile.getName() + File.separator + messageId;
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   public String getPrefix() {
1:29a7f38:     return prefix;
1:29a7f38:   }
1:29a7f38: 
1:29a7f38:   public MailOptions getOptions() {
1:29a7f38:     return options;
1:29a7f38:   }
1:29a7f38: 
1:4194a28:   private static void writeContent(String separator, StringBuilder contents, CharSequence body, String[] matches) {
1:4194a28:     for (String match : matches) {
1:05cf634:       if (match != null) {
1:05cf634:         contents.append(match).append(separator);
1:05cf634:       } else {
1:5f8070b:         contents.append(separator);
1:05cf634:       }
1:29a7f38:     }
1:4194a28:     contents.append('\n').append(body);
1:29a7f38:   }
1:29a7f38: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:  * Converts an mbox mail archive into a group of Hadoop Sequence Files with equal size. The archive may optionally be
1:  * gzipped or zipped. @see org.apache.mahout.text.SequenceFilesFromMailArchives
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1:   private static final Pattern MESSAGE_START = Pattern.compile("^From \\S+@\\S.*\\d{4}$", Pattern.CASE_INSENSITIVE);
1:   private static final Pattern MESSAGE_ID_PREFIX = Pattern.compile("^message-id: <(.*)>$", Pattern.CASE_INSENSITIVE);
1:   public static final Pattern SUBJECT_PREFIX = Pattern.compile("^subject: (.*)$", Pattern.CASE_INSENSITIVE);
1:   //we need to have at least one character
1:   public static final Pattern FROM_PREFIX = Pattern.compile("^from: (\\S.*)$", Pattern.CASE_INSENSITIVE);
1:   public static final Pattern REFS_PREFIX = Pattern.compile("^references: (.*)$", Pattern.CASE_INSENSITIVE);
1:   public static final Pattern TO_PREFIX = Pattern.compile("^to: (.*)$", Pattern.CASE_INSENSITIVE);
1: 
1:   private static final Logger log = LoggerFactory.getLogger(MailProcessor.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:       log.warn("Unable to process non-existing file", e);
author:smarthi
-------------------------------------------------------------------------------
commit:d54c59b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Converts an mbox mail archive into a group of Hadoop Sequence Files with equal size. The archive may optionally be gzipped or zipped.
0:  * @see org.apache.mahout.text.SequenceFilesFromMailArchives
1:  *
1:  */
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Creates a {@code MailProcessor} that does not write to sequence files, but to a single text file.
1:    * This constructor is for debugging and testing purposes.
1:    */
1:   /**
1:    * This is the main constructor of {@code MailProcessor}.
1:    */
1:   /**
1:    * Parses one complete mail archive, writing output to the {@code writer} constructor parameter.
1:    * @param mboxFile  mail archive to parse
1:    * @return number of parsed mails
1:    * @throws IOException
1:    */
author:Ted Dunning
-------------------------------------------------------------------------------
commit:5f8070b
/////////////////////////////////////////////////////////////////////////
1:         contents.append(separator);
author:tcp
-------------------------------------------------------------------------------
commit:44459bd
/////////////////////////////////////////////////////////////////////////
0:                   Pattern.compile("^from: (\\S.*)$", Pattern.CASE_INSENSITIVE); //we need to have at least one character
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:         if (options.isStripQuotedText() && quotedTextPattern.matcher(nextLine).find()) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:69f324d
/////////////////////////////////////////////////////////////////////////
1:       Pattern quotedTextPattern = options.getQuotedTextPattern();
0:         if (options.isStripQuotedText() && quotedTextPattern.matcher(nextLine).find()){
1:           continue;
1:         }
commit:5389d76
/////////////////////////////////////////////////////////////////////////
0:                   Pattern.compile("^from: (\\S.*)$", Pattern.CASE_INSENSITIVE);//we need to have at least one character
commit:05cf634
/////////////////////////////////////////////////////////////////////////
1:       if (match != null) {
1:         contents.append(match).append(separator);
1:       } else {
0:         contents.append("").append(separator);
1:       }
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.email;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: import org.apache.mahout.common.iterator.FileLineIterable;
1: import org.apache.mahout.utils.io.ChunkedWriter;
1: import org.apache.mahout.utils.io.ChunkedWrapper;
1: import org.apache.mahout.utils.io.IOWriterWrapper;
1: import org.apache.mahout.utils.io.WrappedWriter;
1: 
1: import java.io.File;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import java.io.Writer;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: /**
1:  *
1:  *
0:  **/
1: public class MailProcessor {
0:   private static final Pattern MESSAGE_START =
0:           Pattern.compile("^From \\S+@\\S.*\\d{4}$", Pattern.CASE_INSENSITIVE);
0:   private static final Pattern MESSAGE_ID_PREFIX =
0:           Pattern.compile("^message-id: <(.*)>$", Pattern.CASE_INSENSITIVE);
1:   // regular expressions used to parse individual messages
0:   public static final Pattern SUBJECT_PREFIX =
0:           Pattern.compile("^subject: (.*)$", Pattern.CASE_INSENSITIVE);
0:   public static final Pattern FROM_PREFIX =
0:                   Pattern.compile("^from: (.*)$", Pattern.CASE_INSENSITIVE);
0:   public static final Pattern REFS_PREFIX =
0:                           Pattern.compile("^references: (.*)$", Pattern.CASE_INSENSITIVE);
0:   public static final Pattern TO_PREFIX =
0:                                   Pattern.compile("^to: (.*)$", Pattern.CASE_INSENSITIVE);
0:   private String prefix;
0:   private MailOptions options;
0:   private WrappedWriter writer;
1: 
1:   public MailProcessor(MailOptions options, String prefix, Writer writer) {
1:     this.writer = new IOWriterWrapper(writer);
1:     this.options = options;
1:     this.prefix = prefix;
1:   }
1: 
1:   public MailProcessor(MailOptions options, String prefix, ChunkedWriter writer) {
1:     this.writer = new ChunkedWrapper(writer);
1:     this.options = options;
1:     this.prefix = prefix;
1:   }
1: 
1:   public long parseMboxLineByLine(File mboxFile) throws IOException {
1:     long messageCount = 0;
1:     try {
1:       StringBuilder contents = new StringBuilder();
1:       // tmps used during mail message parsing
1:       StringBuilder body = new StringBuilder();
1:       String messageId = null;
1:       boolean inBody = false;
1:       Matcher messageIdMatcher = MESSAGE_ID_PREFIX.matcher("");
1:       Matcher messageBoundaryMatcher = MESSAGE_START.matcher("");
0:       String[] patternResults = new String[options.patternsToMatch.length];
0:       Matcher[] matchers = new Matcher[options.patternsToMatch.length];
1:       for (int i = 0; i < matchers.length; i++) {
0:         matchers[i] = options.patternsToMatch[i].matcher("");
1:       }
1: 
0:       for (String nextLine : new FileLineIterable(mboxFile, options.charset, false)) {
1:         for (int i = 0; i < matchers.length; i++) {
1:           Matcher matcher = matchers[i];
1:           matcher.reset(nextLine);
1:           if (matcher.matches()) {
1:             patternResults[i] = matcher.group(1);
1:           }
1:         }
1: 
1:         // only start appending body content after we've seen a message ID
1:         if (messageId != null) {
1:           // first, see if we hit the end of the message
1:           messageBoundaryMatcher.reset(nextLine);
1:           if (messageBoundaryMatcher.matches()) {
1:             // done parsing this message ... write it out
1:             String key = generateKey(mboxFile, prefix, messageId);
1:             //if this ordering changes, then also change FromEmailToDictionaryMapper
0:             writeContent(options.separator, contents, body, patternResults);
1:             writer.write(key, contents.toString());
1:             contents.setLength(0); // reset the buffer
1:             body.setLength(0);
1: 
1:             messageId = null;
1:             inBody = false;
1:           } else {
0:             if (inBody && options.includeBody) {
0:               if (nextLine.length() > 0) {
0:                 body.append(nextLine).append(options.bodySeparator);
1:               }
1:             } else {
1:               // first empty line we see after reading the message Id
1:               // indicates that we are in the body ...
0:               inBody = nextLine.length() == 0;
1:             }
1:           }
1:         } else {
1:           if (nextLine.length() > 14) {
1:             messageIdMatcher.reset(nextLine);
1:             if (messageIdMatcher.matches()) {
1:               messageId = messageIdMatcher.group(1);
1:               ++messageCount;
1:             }
1:           }
1:         }
1:       }
1:       // write the last message in the file if available
1:       if (messageId != null) {
1:         String key = generateKey(mboxFile, prefix, messageId);
0:         writeContent(options.separator, contents, body, patternResults);
1:         writer.write(key, contents.toString());
1:         contents.setLength(0); // reset the buffer
1:       }
1:     } catch (FileNotFoundException e) {
1:       // Skip file.
1:     }
1:     // TODO: report exceptions and continue;
1:     return messageCount;
1:   }
1: 
0:   protected String generateKey(File mboxFile, String prefix, String messageId) {
1:     return prefix + File.separator + mboxFile.getName() + File.separator + messageId;
1:   }
1: 
1:   public String getPrefix() {
1:     return prefix;
1:   }
1: 
1:   public MailOptions getOptions() {
1:     return options;
1:   }
1: 
0:   private void writeContent(String separator, StringBuilder contents, StringBuilder body, String[] matches) {
0:     for (int i = 0; i < matches.length; i++) {
0:       String match = matches[i];
0:       contents.append(match).append(separator);
1:     }
0:     contents.append("\n").append(body);
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:e0ec7c1
/////////////////////////////////////////////////////////////////////////
1:               if (!nextLine.isEmpty()) {
1:               inBody = nextLine.isEmpty();
commit:4194a28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.email;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private final String prefix;
1:   private final MailOptions options;
1:   private final WrappedWriter writer;
/////////////////////////////////////////////////////////////////////////
1:       String[] patternResults = new String[options.getPatternsToMatch().length];
1:       Matcher[] matchers = new Matcher[options.getPatternsToMatch().length];
1:         matchers[i] = options.getPatternsToMatch()[i].matcher("");
0:       String messageId = null;
0:       boolean inBody = false;
1:       for (String nextLine : new FileLineIterable(mboxFile, options.getCharset(), false)) {
/////////////////////////////////////////////////////////////////////////
1:             writeContent(options.getSeparator(), contents, body, patternResults);
/////////////////////////////////////////////////////////////////////////
1:             if (inBody && options.isIncludeBody()) {
1:                 body.append(nextLine).append(options.getBodySeparator());
/////////////////////////////////////////////////////////////////////////
1:         writeContent(options.getSeparator(), contents, body, patternResults);
/////////////////////////////////////////////////////////////////////////
1:   protected static String generateKey(File mboxFile, String prefix, String messageId) {
/////////////////////////////////////////////////////////////////////////
1:   private static void writeContent(String separator, StringBuilder contents, CharSequence body, String[] matches) {
1:     for (String match : matches) {
1:     contents.append('\n').append(body);
============================================================================