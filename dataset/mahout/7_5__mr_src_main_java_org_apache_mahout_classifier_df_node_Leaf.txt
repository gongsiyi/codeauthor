2:8c37a84: /**
1:8c37a84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c37a84:  * contributor license agreements.  See the NOTICE file distributed with
1:8c37a84:  * this work for additional information regarding copyright ownership.
1:8c37a84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c37a84:  * (the "License"); you may not use this file except in compliance with
1:8c37a84:  * the License.  You may obtain a copy of the License at
2:8c37a84:  *
1:8c37a84:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8c37a84:  *
1:8c37a84:  * Unless required by applicable law or agreed to in writing, software
1:8c37a84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c37a84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c37a84:  * See the License for the specific language governing permissions and
1:8c37a84:  * limitations under the License.
2:8c37a84:  */
4:8c37a84: 
1:52ce412: package org.apache.mahout.classifier.df.node;
1:8c37a84: 
1:d6aba1a: import org.apache.mahout.classifier.df.data.Instance;
1:d6aba1a: 
1:8c37a84: import java.io.DataInput;
1:8c37a84: import java.io.DataOutput;
1:8c37a84: import java.io.IOException;
1:8c37a84: 
1:8c37a84: /**
1:8c37a84:  * Represents a Leaf node
1:8c37a84:  */
1:1ffa3a4: @Deprecated
1:d0ef512: public class Leaf extends Node {
1:564c3e1:   private static final double EPSILON = 1.0e-6;
1:e9cc323: 
1:e9cc323:   private double label;
1:8c37a84:   
1:e9cc323:   Leaf() { }
1:8c37a84:   
1:e9cc323:   public Leaf(double label) {
1:8c37a84:     this.label = label;
1:8c37a84:   }
1:8547de7:   
1:8547de7:   @Override
1:e9cc323:   public double classify(Instance instance) {
1:8547de7:     return label;
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public long maxDepth() {
1:8c37a84:     return 1;
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public long nbNodes() {
1:8c37a84:     return 1;
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:2bc819e:   protected Type getType() {
1:2bc819e:     return Type.LEAF;
1:2bc819e:   }
1:2bc819e:   
1:2bc819e:   @Override
1:8c37a84:   public boolean equals(Object obj) {
1:ad11134:     if (this == obj) {
1:8c37a84:       return true;
1:8c37a84:     }
1:4194a28:     if (!(obj instanceof Leaf)) {
1:8c37a84:       return false;
1:8c37a84:     }
1:8c37a84:     
1:8c37a84:     Leaf leaf = (Leaf) obj;
1:8c37a84:     
1:e9cc323:     return Math.abs(label - leaf.label) < EPSILON;
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8547de7:   public int hashCode() {
1:e9cc323:     long bits = Double.doubleToLongBits(label);
1:e9cc323:     return (int)(bits ^ (bits >>> 32));
1:8547de7:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   protected String getString() {
1:8c37a84:     return "";
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   public void readFields(DataInput in) throws IOException {
1:e9cc323:     label = in.readDouble();
1:8c37a84:   }
1:8c37a84:   
1:8c37a84:   @Override
1:8c37a84:   protected void writeNode(DataOutput out) throws IOException {
1:e9cc323:     out.writeDouble(label);
1:8c37a84:   }
1:8c37a84: }
============================================================================
author:smarthi
-------------------------------------------------------------------------------
commit:1ffa3a4
/////////////////////////////////////////////////////////////////////////
1: @Deprecated
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1:   private static final double EPSILON = 1.0e-6;
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1:     if (!(obj instanceof Leaf)) {
commit:39fe224
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     if (obj == null || !(obj instanceof Leaf)) {
commit:f824f90
commit:2bc819e
/////////////////////////////////////////////////////////////////////////
1:   protected Type getType() {
1:     return Type.LEAF;
1:   }
1: 
1:   @Override
commit:d0ef512
/////////////////////////////////////////////////////////////////////////
1: public class Leaf extends Node {
commit:8547de7
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public int hashCode() {
1:     return label;
1:   }
author:Abdel Hakim Deneche
-------------------------------------------------------------------------------
commit:d6aba1a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.classifier.df.data.Instance;
1: 
commit:e9cc323
/////////////////////////////////////////////////////////////////////////
0:   private static final double EPSILON = 1e-6;
1: 
1:   private double label;
1:   Leaf() { }
1:   public Leaf(double label) {
1:   public double classify(Instance instance) {
/////////////////////////////////////////////////////////////////////////
1:     return Math.abs(label - leaf.label) < EPSILON;
1:     long bits = Double.doubleToLongBits(label);
1:     return (int)(bits ^ (bits >>> 32));
/////////////////////////////////////////////////////////////////////////
1:     label = in.readDouble();
1:     out.writeDouble(label);
commit:8c37a84
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.df.node;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
0: import java.util.StringTokenizer;
1: 
0: import org.apache.hadoop.io.Writable;
0: import org.apache.mahout.df.data.Instance;
1: 
1: /**
1:  * Represents a Leaf node
1:  */
0: public class Leaf extends Node implements Writable {
0:   private int label;
1: 
0:   protected Leaf() {
1:   }
1: 
0:   public Leaf(int label) {
1:     this.label = label;
1:   }
1: 
1:   @Override
0:   public int classify(Instance instance) {
0:     return label;
1:   }
1: 
1:   @Override
1:   public long maxDepth() {
1:     return 1;
1:   }
1: 
1:   @Override
1:   public long nbNodes() {
1:     return 1;
1:   }
1: 
1:   /**
0:    * Extract a Leaf Node
1:    * 
0:    * @param tokenizer
0:    * @return the extracted Leaf Node
1:    */
0:   static Leaf parse(StringTokenizer tokenizer) {
0:     int label = Integer.parseInt(tokenizer.nextToken());
1: 
0:     return new Leaf(label);
1:   }
1: 
1:   @Override
1:   public boolean equals(Object obj) {
0:     if (this == obj)
1:       return true;
0:     if (obj == null || !(obj instanceof Leaf))
1:       return false;
1: 
1:     Leaf leaf = (Leaf) obj;
1: 
0:     return label == leaf.label;
1:   }
1:  
1:   @Override
1:   protected String getString() {
1:     return "";
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
0:     label = in.readInt();
1:   }
1: 
1:   @Override
1:   protected void writeNode(DataOutput out) throws IOException {
0:     out.writeInt(label);
1:   }
1: }
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:52ce412
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.classifier.df.node;
0: import org.apache.mahout.classifier.df.data.Instance;
author:Robin Anil
-------------------------------------------------------------------------------
commit:ad11134
/////////////////////////////////////////////////////////////////////////
0:   
0:   protected Leaf() {}
0:   
0:   
0:   
0:   
0:   
/////////////////////////////////////////////////////////////////////////
0:     
0:   
0:   
1:     if (this == obj) {
0:     }
0:     if ((obj == null) || !(obj instanceof Leaf)) {
0:     }
0:     
0:     
0:   
0:   
0:   
0:   
============================================================================