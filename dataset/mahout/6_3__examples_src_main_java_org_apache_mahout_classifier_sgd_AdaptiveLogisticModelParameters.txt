1:a515335: /*
1:a515335:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a515335:  * contributor license agreements.  See the NOTICE file distributed with
1:a515335:  * this work for additional information regarding copyright ownership.
1:a515335:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a515335:  * (the "License"); you may not use this file except in compliance with
1:a515335:  * the License.  You may obtain a copy of the License at
1:a515335:  *
1:a515335:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a515335:  *
1:a515335:  * Unless required by applicable law or agreed to in writing, software
1:a515335:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a515335:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a515335:  * See the License for the specific language governing permissions and
1:a515335:  * limitations under the License.
1:a515335:  */
2:a515335: 
1:a515335: package org.apache.mahout.classifier.sgd;
1:a515335: 
1:4ef9d31: import org.apache.mahout.math.stats.GlobalOnlineAuc;
1:4ef9d31: import org.apache.mahout.math.stats.GroupedOnlineAuc;
1:4ef9d31: import org.apache.mahout.math.stats.OnlineAuc;
1:4ef9d31: 
1:a515335: import java.io.DataInput;
1:a515335: import java.io.DataInputStream;
1:a515335: import java.io.DataOutput;
1:a515335: import java.io.DataOutputStream;
1:a515335: import java.io.File;
1:a515335: import java.io.FileInputStream;
1:a515335: import java.io.IOException;
1:a515335: import java.io.InputStream;
1:a515335: import java.io.OutputStream;
1:4ef9d31: import java.util.ArrayList;
1:a515335: import java.util.HashMap;
1:a515335: import java.util.List;
1:4194a28: import java.util.Locale;
1:a515335: import java.util.Map;
1:a515335: 
1:a515335: public class AdaptiveLogisticModelParameters extends LogisticModelParameters {
1:a515335: 
1:a515335:   private AdaptiveLogisticRegression alr;
1:a515335:   private int interval = 800;
1:a515335:   private int averageWindow = 500;
1:a515335:   private int threads = 4;
1:a515335:   private String prior = "L1";
1:a515335:   private double priorOption = Double.NaN;
1:a515335:   private String auc = null;
1:a515335: 
1:a515335:   public AdaptiveLogisticRegression createAdaptiveLogisticRegression() {
1:a515335: 
1:a515335:     if (alr == null) {
1:a515335:       alr = new AdaptiveLogisticRegression(getMaxTargetCategories(),
1:a515335:                                            getNumFeatures(), createPrior(prior, priorOption));
1:a515335:       alr.setInterval(interval);
1:a515335:       alr.setAveragingWindow(averageWindow);
1:a515335:       alr.setThreadCount(threads);
1:a515335:       alr.setAucEvaluator(createAUC(auc));
2:a515335:     }
1:a515335:     return alr;
1:a515335:   }
1:a515335: 
1:a515335:   public void checkParameters() {
1:a515335:     if (prior != null) {
1:229aeff:       String priorUppercase = prior.toUpperCase(Locale.ENGLISH).trim();
1:229aeff:       if (("TP".equals(priorUppercase) || "EBP".equals(priorUppercase)) && Double.isNaN(priorOption)) {
1:229aeff:         throw new IllegalArgumentException("You must specify a double value for TPrior and ElasticBandPrior.");
1:a515335:       }
1:a515335:     }
1:a515335:   }
1:a515335: 
1:a515335:   private static PriorFunction createPrior(String cmd, double priorOption) {
1:a515335:     if (cmd == null) {
1:a515335:       return null;
1:a515335:     }
1:4194a28:     if ("L1".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:a515335:       return new L1();
1:a515335:     }
1:4194a28:     if ("L2".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:a515335:       return new L2();
1:a515335:     }
1:4194a28:     if ("UP".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:a515335:       return new UniformPrior();
1:a515335:     }
1:4194a28:     if ("TP".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:a515335:       return new TPrior(priorOption);
1:a515335:     }
1:4194a28:     if ("EBP".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:a515335:       return new ElasticBandPrior(priorOption);
1:a515335:     }
1:a515335: 
1:a515335:     return null;
1:a515335:   }
1:a515335: 
1:a515335:   private static OnlineAuc createAUC(String cmd) {
1:a515335:     if (cmd == null) {
1:a515335:       return null;
1:a515335:     }
1:4194a28:     if ("GLOBAL".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:a515335:       return new GlobalOnlineAuc();
1:a515335:     }
1:4194a28:     if ("GROUPED".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:a515335:       return new GroupedOnlineAuc();
1:a515335:     }
1:a515335:     return null;
1:a515335:   }
1:a515335: 
1:a515335:   @Override
1:a515335:   public void saveTo(OutputStream out) throws IOException {
1:a515335:     if (alr != null) {
1:a515335:       alr.close();
1:a515335:     }
1:a515335:     setTargetCategories(getCsvRecordFactory().getTargetCategories());
1:a515335:     write(new DataOutputStream(out));
1:a515335:   }
1:a515335: 
1:a515335:   @Override
1:a515335:   public void write(DataOutput out) throws IOException {
1:a515335:     out.writeUTF(getTargetVariable());
1:a515335:     out.writeInt(getTypeMap().size());
1:a515335:     for (Map.Entry<String, String> entry : getTypeMap().entrySet()) {
1:a515335:       out.writeUTF(entry.getKey());
1:a515335:       out.writeUTF(entry.getValue());
1:a515335:     }
1:a515335:     out.writeInt(getNumFeatures());
1:a515335:     out.writeInt(getMaxTargetCategories());
1:a515335:     out.writeInt(getTargetCategories().size());
1:a515335:     for (String category : getTargetCategories()) {
1:a515335:       out.writeUTF(category);
1:a515335:     }
1:a515335: 
1:a515335:     out.writeInt(interval);
1:a515335:     out.writeInt(averageWindow);
1:a515335:     out.writeInt(threads);
1:a515335:     out.writeUTF(prior);
1:a515335:     out.writeDouble(priorOption);
1:a515335:     out.writeUTF(auc);
1:a515335: 
1:a515335:     // skip csv
1:a515335:     alr.write(out);
1:a515335:   }
1:a515335: 
1:a515335:   @Override
1:a515335:   public void readFields(DataInput in) throws IOException {
1:a515335:     setTargetVariable(in.readUTF());
1:a515335:     int typeMapSize = in.readInt();
1:02ff22f:     Map<String, String> typeMap = new HashMap<>(typeMapSize);
1:a515335:     for (int i = 0; i < typeMapSize; i++) {
1:a515335:       String key = in.readUTF();
1:a515335:       String value = in.readUTF();
1:a515335:       typeMap.put(key, value);
1:a515335:     }
1:a515335:     setTypeMap(typeMap);
1:a515335: 
1:a515335:     setNumFeatures(in.readInt());
1:a515335:     setMaxTargetCategories(in.readInt());
1:a515335:     int targetCategoriesSize = in.readInt();
1:4ef9d31:     List<String> targetCategories = new ArrayList<>(targetCategoriesSize);
1:a515335:     for (int i = 0; i < targetCategoriesSize; i++) {
1:a515335:       targetCategories.add(in.readUTF());
1:a515335:     }
1:a515335:     setTargetCategories(targetCategories);
1:a515335: 
1:a515335:     interval = in.readInt();
1:a515335:     averageWindow = in.readInt();
1:a515335:     threads = in.readInt();
1:a515335:     prior = in.readUTF();
1:a515335:     priorOption = in.readDouble();
1:a515335:     auc = in.readUTF();
1:a515335: 
1:a515335:     alr = new AdaptiveLogisticRegression();
1:a515335:     alr.readFields(in);
1:a515335:   }
1:a515335: 
1:a515335: 
1:a515335:   private static AdaptiveLogisticModelParameters loadFromStream(InputStream in) throws IOException {
1:a515335:     AdaptiveLogisticModelParameters result = new AdaptiveLogisticModelParameters();
1:a515335:     result.readFields(new DataInputStream(in));
1:a515335:     return result;
1:a515335:   }
1:a515335: 
1:a515335:   public static AdaptiveLogisticModelParameters loadFromFile(File in) throws IOException {
1:4ef9d31:     try (InputStream input = new FileInputStream(in)) {
1:a515335:       return loadFromStream(input);
1:a515335:     }
1:a515335:   }
1:a515335: 
1:a515335:   public int getInterval() {
1:a515335:     return interval;
1:a515335:   }
1:a515335: 
1:a515335:   public void setInterval(int interval) {
1:a515335:     this.interval = interval;
1:a515335:   }
1:a515335: 
1:a515335:   public int getAverageWindow() {
1:a515335:     return averageWindow;
1:a515335:   }
1:a515335: 
1:a515335:   public void setAverageWindow(int averageWindow) {
1:a515335:     this.averageWindow = averageWindow;
1:a515335:   }
1:a515335: 
1:a515335:   public int getThreads() {
1:a515335:     return threads;
1:a515335:   }
1:a515335: 
1:a515335:   public void setThreads(int threads) {
1:a515335:     this.threads = threads;
1:a515335:   }
1:a515335: 
1:a515335:   public String getPrior() {
1:a515335:     return prior;
1:a515335:   }
1:a515335: 
1:a515335:   public void setPrior(String prior) {
1:a515335:     this.prior = prior;
1:a515335:   }
1:a515335: 
1:a515335:   public String getAuc() {
1:a515335:     return auc;
1:a515335:   }
1:a515335: 
1:a515335:   public void setAuc(String auc) {
1:a515335:     this.auc = auc;
1:a515335:   }
1:a515335: 
1:a515335:   public double getPriorOption() {
1:a515335:     return priorOption;
1:a515335:   }
1:a515335: 
1:a515335:   public void setPriorOption(double priorOption) {
1:a515335:     this.priorOption = priorOption;
1:a515335:   }
1:a515335: 
1:a515335: 
1:a515335: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     Map<String, String> typeMap = new HashMap<>(typeMapSize);
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.stats.GlobalOnlineAuc;
1: import org.apache.mahout.math.stats.GroupedOnlineAuc;
1: import org.apache.mahout.math.stats.OnlineAuc;
1: 
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     List<String> targetCategories = new ArrayList<>(targetCategoriesSize);
/////////////////////////////////////////////////////////////////////////
1:     try (InputStream input = new FileInputStream(in)) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(input, true);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     List<String> targetCategories = Lists.newArrayListWithCapacity(targetCategoriesSize);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:       String priorUppercase = prior.toUpperCase(Locale.ENGLISH).trim();
1:       if (("TP".equals(priorUppercase) || "EBP".equals(priorUppercase)) && Double.isNaN(priorOption)) {
1:         throw new IllegalArgumentException("You must specify a double value for TPrior and ElasticBandPrior.");
commit:4194a28
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
0:       if ("TP".equals(prior.toUpperCase(Locale.ENGLISH).trim()) ||
0:           "EBP".equals(prior.toUpperCase(Locale.ENGLISH).trim())) {
/////////////////////////////////////////////////////////////////////////
1:     if ("L1".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:     if ("L2".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:     if ("UP".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:     if ("TP".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:     if ("EBP".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
/////////////////////////////////////////////////////////////////////////
1:     if ("GLOBAL".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
1:     if ("GROUPED".equals(cmd.toUpperCase(Locale.ENGLISH).trim())) {
commit:a515335
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.DataOutput;
1: import java.io.DataOutputStream;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
0: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import com.google.common.io.Closeables;
0: import org.apache.mahout.math.stats.GlobalOnlineAuc;
0: import org.apache.mahout.math.stats.GroupedOnlineAuc;
0: import org.apache.mahout.math.stats.OnlineAuc;
1: 
1: public class AdaptiveLogisticModelParameters extends LogisticModelParameters {
1: 
1:   private AdaptiveLogisticRegression alr;
1:   private int interval = 800;
1:   private int averageWindow = 500;
1:   private int threads = 4;
1:   private String prior = "L1";
1:   private double priorOption = Double.NaN;
1:   private String auc = null;
1: 
1:   public AdaptiveLogisticRegression createAdaptiveLogisticRegression() {
1: 
1:     if (alr == null) {
1:       alr = new AdaptiveLogisticRegression(getMaxTargetCategories(),
1:                                            getNumFeatures(), createPrior(prior, priorOption));
1:       alr.setInterval(interval);
1:       alr.setAveragingWindow(averageWindow);
1:       alr.setThreadCount(threads);
1:       alr.setAucEvaluator(createAUC(auc));
1:     }
1:     return alr;
1:   }
1: 
1:   public void checkParameters() {
1:     if (prior != null) {
0:       if ("TP".equals(prior.toUpperCase().trim()) ||
0:           "EBP".equals(prior.toUpperCase().trim())) {
0:         if (Double.isNaN(priorOption)) {
0:           throw new IllegalArgumentException("You must specify a double value for TPrior and ElasticBandPrior.");
1:         }
1:       }
1:     }
1:   }
1: 
1:   private static PriorFunction createPrior(String cmd, double priorOption) {
1:     if (cmd == null) {
1:       return null;
1:     }
0:     if ("L1".equals(cmd.toUpperCase().trim())) {
1:       return new L1();
1:     }
0:     if ("L2".equals(cmd.toUpperCase().trim())) {
1:       return new L2();
1:     }
0:     if ("UP".equals(cmd.toUpperCase().trim())) {
1:       return new UniformPrior();
1:     }
0:     if ("TP".equals(cmd.toUpperCase().trim())) {
1:       return new TPrior(priorOption);
1:     }
0:     if ("EBP".equals(cmd.toUpperCase().trim())) {
1:       return new ElasticBandPrior(priorOption);
1:     }
1: 
1:     return null;
1:   }
1: 
1:   private static OnlineAuc createAUC(String cmd) {
1:     if (cmd == null) {
1:       return null;
1:     }
0:     if ("GLOBAL".equals(cmd.toUpperCase().trim())) {
1:       return new GlobalOnlineAuc();
1:     }
0:     if ("GROUPED".equals(cmd.toUpperCase().trim())) {
1:       return new GroupedOnlineAuc();
1:     }
1:     return null;
1:   }
1: 
1:   @Override
1:   public void saveTo(OutputStream out) throws IOException {
1:     if (alr != null) {
1:       alr.close();
1:     }
1:     setTargetCategories(getCsvRecordFactory().getTargetCategories());
1:     write(new DataOutputStream(out));
1:   }
1: 
1:   @Override
1:   public void write(DataOutput out) throws IOException {
1:     out.writeUTF(getTargetVariable());
1:     out.writeInt(getTypeMap().size());
1:     for (Map.Entry<String, String> entry : getTypeMap().entrySet()) {
1:       out.writeUTF(entry.getKey());
1:       out.writeUTF(entry.getValue());
1:     }
1:     out.writeInt(getNumFeatures());
1:     out.writeInt(getMaxTargetCategories());
1:     out.writeInt(getTargetCategories().size());
1:     for (String category : getTargetCategories()) {
1:       out.writeUTF(category);
1:     }
1: 
1:     out.writeInt(interval);
1:     out.writeInt(averageWindow);
1:     out.writeInt(threads);
1:     out.writeUTF(prior);
1:     out.writeDouble(priorOption);
1:     out.writeUTF(auc);
1: 
1:     // skip csv
1:     alr.write(out);
1:   }
1: 
1:   @Override
1:   public void readFields(DataInput in) throws IOException {
1:     setTargetVariable(in.readUTF());
1:     int typeMapSize = in.readInt();
0:     Map<String, String> typeMap = new HashMap<String, String>(typeMapSize);
1:     for (int i = 0; i < typeMapSize; i++) {
1:       String key = in.readUTF();
1:       String value = in.readUTF();
1:       typeMap.put(key, value);
1:     }
1:     setTypeMap(typeMap);
1: 
1:     setNumFeatures(in.readInt());
1:     setMaxTargetCategories(in.readInt());
1:     int targetCategoriesSize = in.readInt();
0:     List<String> targetCategories = new ArrayList<String>(targetCategoriesSize);
1:     for (int i = 0; i < targetCategoriesSize; i++) {
1:       targetCategories.add(in.readUTF());
1:     }
1:     setTargetCategories(targetCategories);
1: 
1:     interval = in.readInt();
1:     averageWindow = in.readInt();
1:     threads = in.readInt();
1:     prior = in.readUTF();
1:     priorOption = in.readDouble();
1:     auc = in.readUTF();
1: 
1:     alr = new AdaptiveLogisticRegression();
1:     alr.readFields(in);
1:   }
1: 
1: 
1:   private static AdaptiveLogisticModelParameters loadFromStream(InputStream in) throws IOException {
1:     AdaptiveLogisticModelParameters result = new AdaptiveLogisticModelParameters();
1:     result.readFields(new DataInputStream(in));
1:     return result;
1:   }
1: 
1:   public static AdaptiveLogisticModelParameters loadFromFile(File in) throws IOException {
0:     InputStream input = new FileInputStream(in);
0:     try {
1:       return loadFromStream(input);
0:     } finally {
0:       Closeables.closeQuietly(input);
1:     }
1:   }
1: 
1:   public int getInterval() {
1:     return interval;
1:   }
1: 
1:   public void setInterval(int interval) {
1:     this.interval = interval;
1:   }
1: 
1:   public int getAverageWindow() {
1:     return averageWindow;
1:   }
1: 
1:   public void setAverageWindow(int averageWindow) {
1:     this.averageWindow = averageWindow;
1:   }
1: 
1:   public int getThreads() {
1:     return threads;
1:   }
1: 
1:   public void setThreads(int threads) {
1:     this.threads = threads;
1:   }
1: 
1:   public String getPrior() {
1:     return prior;
1:   }
1: 
1:   public void setPrior(String prior) {
1:     this.prior = prior;
1:   }
1: 
1:   public String getAuc() {
1:     return auc;
1:   }
1: 
1:   public void setAuc(String auc) {
1:     this.auc = auc;
1:   }
1: 
1:   public double getPriorOption() {
1:     return priorOption;
1:   }
1: 
1:   public void setPriorOption(double priorOption) {
1:     this.priorOption = priorOption;
1:   }
1: 
1: 
1: }
============================================================================