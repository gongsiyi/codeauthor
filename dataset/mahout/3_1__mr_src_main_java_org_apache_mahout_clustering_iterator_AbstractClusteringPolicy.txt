1:3eba6f2: /**
1:3eba6f2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3eba6f2:  * contributor license agreements.  See the NOTICE file distributed with
1:3eba6f2:  * this work for additional information regarding copyright ownership.
1:3eba6f2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3eba6f2:  * (the "License"); you may not use this file except in compliance with
1:3eba6f2:  * the License.  You may obtain a copy of the License at
1:3eba6f2:  *
1:3eba6f2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3eba6f2:  *
1:3eba6f2:  * Unless required by applicable law or agreed to in writing, software
1:3eba6f2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3eba6f2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3eba6f2:  * See the License for the specific language governing permissions and
1:3eba6f2:  * limitations under the License.
1:3eba6f2:  */
1:3eba6f2: package org.apache.mahout.clustering.iterator;
1:3eba6f2: 
1:3eba6f2: import java.io.DataInput;
1:3eba6f2: import java.io.DataOutput;
1:3eba6f2: import java.io.IOException;
1:3eba6f2: import java.util.List;
1:3eba6f2: 
1:3eba6f2: import org.apache.mahout.clustering.Cluster;
1:3eba6f2: import org.apache.mahout.clustering.classify.ClusterClassifier;
1:3eba6f2: import org.apache.mahout.math.DenseVector;
1:3eba6f2: import org.apache.mahout.math.SequentialAccessSparseVector;
1:3eba6f2: import org.apache.mahout.math.Vector;
1:3eba6f2: import org.apache.mahout.math.VectorWritable;
1:3eba6f2: import org.apache.mahout.math.function.TimesFunction;
1:3eba6f2: 
1:3eba6f2: public abstract class AbstractClusteringPolicy implements ClusteringPolicy {
1:3eba6f2:   
1:3eba6f2:   @Override
1:3eba6f2:   public abstract void write(DataOutput out) throws IOException;
1:3eba6f2:   
1:3eba6f2:   @Override
1:3eba6f2:   public abstract void readFields(DataInput in) throws IOException;
1:3eba6f2:   
1:3eba6f2:   @Override
1:3eba6f2:   public Vector select(Vector probabilities) {
1:3eba6f2:     int maxValueIndex = probabilities.maxValueIndex();
1:3eba6f2:     Vector weights = new SequentialAccessSparseVector(probabilities.size());
1:3eba6f2:     weights.set(maxValueIndex, 1.0);
1:3eba6f2:     return weights;
1:3eba6f2:   }
1:3eba6f2:   
1:3eba6f2:   @Override
1:3eba6f2:   public void update(ClusterClassifier posterior) {
1:3eba6f2:     // nothing to do in general here
1:3eba6f2:   }
1:3eba6f2:   
1:3eba6f2:   @Override
1:3eba6f2:   public Vector classify(Vector data, ClusterClassifier prior) {
1:3eba6f2:     List<Cluster> models = prior.getModels();
1:3eba6f2:     int i = 0;
1:3eba6f2:     Vector pdfs = new DenseVector(models.size());
1:3eba6f2:     for (Cluster model : models) {
1:3eba6f2:       pdfs.set(i++, model.pdf(new VectorWritable(data)));
1:3eba6f2:     }
1:3eba6f2:     return pdfs.assign(new TimesFunction(), 1.0 / pdfs.zSum());
1:3eba6f2:   }
1:3eba6f2:   
1:3eba6f2:   @Override
1:3eba6f2:   public void close(ClusterClassifier posterior) {
1:3eba6f2:     for (Cluster cluster : posterior.getModels()) {
1:3eba6f2:       cluster.computeParameters();
1:3eba6f2:     }
1:3eba6f2:     
1:3eba6f2:   }
1:3eba6f2:   
1:3eba6f2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:3eba6f2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.mahout.clustering.iterator;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.List;
1: 
1: import org.apache.mahout.clustering.Cluster;
1: import org.apache.mahout.clustering.classify.ClusterClassifier;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.apache.mahout.math.function.TimesFunction;
1: 
1: public abstract class AbstractClusteringPolicy implements ClusteringPolicy {
1:   
1:   @Override
1:   public abstract void write(DataOutput out) throws IOException;
1:   
1:   @Override
1:   public abstract void readFields(DataInput in) throws IOException;
1:   
1:   @Override
1:   public Vector select(Vector probabilities) {
1:     int maxValueIndex = probabilities.maxValueIndex();
1:     Vector weights = new SequentialAccessSparseVector(probabilities.size());
1:     weights.set(maxValueIndex, 1.0);
1:     return weights;
1:   }
1:   
1:   @Override
1:   public void update(ClusterClassifier posterior) {
1:     // nothing to do in general here
1:   }
1:   
1:   @Override
1:   public Vector classify(Vector data, ClusterClassifier prior) {
1:     List<Cluster> models = prior.getModels();
1:     int i = 0;
1:     Vector pdfs = new DenseVector(models.size());
1:     for (Cluster model : models) {
1:       pdfs.set(i++, model.pdf(new VectorWritable(data)));
1:     }
1:     return pdfs.assign(new TimesFunction(), 1.0 / pdfs.zSum());
1:   }
1:   
1:   @Override
1:   public void close(ClusterClassifier posterior) {
1:     for (Cluster cluster : posterior.getModels()) {
1:       cluster.computeParameters();
1:     }
1:     
1:   }
1:   
1: }
============================================================================