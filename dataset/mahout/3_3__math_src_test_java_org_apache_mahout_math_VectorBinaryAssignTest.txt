1:1cdd095: /*
1:1cdd095:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1cdd095:  * contributor license agreements.  See the NOTICE file distributed with
1:1cdd095:  * this work for additional information regarding copyright ownership.
1:1cdd095:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1cdd095:  * (the "License"); you may not use this file except in compliance with
1:1cdd095:  * the License.  You may obtain a copy of the License at
1:1cdd095:  *
1:1cdd095:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1cdd095:  *
1:1cdd095:  * Unless required by applicable law or agreed to in writing, software
1:1cdd095:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1cdd095:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1cdd095:  * See the License for the specific language governing permissions and
1:1cdd095:  * limitations under the License.
1:1cdd095:  */
1:1cdd095: 
1:a8d3dbd: package org.apache.mahout.math;
1:a8d3dbd: 
1:a8d3dbd: import java.util.Collection;
1:a8d3dbd: import java.util.List;
1:a8d3dbd: 
1:a8d3dbd: import com.google.common.collect.ImmutableSet;
1:a8d3dbd: import com.google.common.collect.Lists;
1:a8d3dbd: import com.google.common.collect.Sets;
1:a8d3dbd: import org.apache.mahout.math.function.DoubleDoubleFunction;
1:a8d3dbd: import org.apache.mahout.math.function.Functions;
1:a8d3dbd: import org.junit.Test;
1:a8d3dbd: import org.junit.runner.RunWith;
1:a8d3dbd: import org.junit.runners.Parameterized;
1:a8d3dbd: 
1:a8d3dbd: import static org.junit.Assert.assertEquals;
1:a8d3dbd: 
1:a8d3dbd: @RunWith(Parameterized.class)
1:a8d3dbd: public final class VectorBinaryAssignTest {
1:a8d3dbd:   private static final int CARDINALITY = 10;
1:a8d3dbd: 
1:a8d3dbd:   private DoubleDoubleFunction function;
1:a8d3dbd:   private VectorBinaryAssign operation;
1:a8d3dbd: 
1:a8d3dbd:   @SuppressWarnings("unchecked")
1:a8d3dbd:   @Parameterized.Parameters
1:a8d3dbd:   public static Collection<Object[]> generateData() {
1:a8d3dbd:     List<Object[]> data = Lists.newArrayList();
1:a8d3dbd:     for (List entry : Sets.cartesianProduct(Lists.newArrayList(
1:a8d3dbd:         ImmutableSet.of(Functions.PLUS, Functions.PLUS_ABS, Functions.MULT, Functions.MULT_RIGHT_PLUS1,
1:a8d3dbd:             Functions.MINUS),
1:58cc1ae:         ImmutableSet.copyOf(VectorBinaryAssign.OPERATIONS)))) {
1:a8d3dbd:       data.add(entry.toArray());
1:a8d3dbd:     }
1:a8d3dbd:     return data;
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   public VectorBinaryAssignTest(DoubleDoubleFunction function, VectorBinaryAssign operation) {
1:a8d3dbd:     this.function = function;
1:a8d3dbd:     this.operation = operation;
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Test
1:a8d3dbd:   public void testAll() {
1:a8d3dbd:     SequentialAccessSparseVector x = new SequentialAccessSparseVector(CARDINALITY);
1:a8d3dbd:     for (int i = 0; i < x.size(); ++i) {
1:a8d3dbd:       x.setQuick(i, i);
1:a8d3dbd:     }
1:a8d3dbd:     SequentialAccessSparseVector y = new SequentialAccessSparseVector(x);
1:a8d3dbd: 
1:a8d3dbd:     System.out.printf("function %s; operation %s\n", function, operation);
1:a8d3dbd: 
1:a8d3dbd:     operation.assign(x, y, function);
1:a8d3dbd: 
1:a8d3dbd:     for (int i = 0; i < x.size(); ++i) {
1:a8d3dbd:       assertEquals(x.getQuick(i), function.apply(i, i), 0.0);
1:a8d3dbd:     }
1:a8d3dbd:   }
1:a8d3dbd: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:1cdd095
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:         ImmutableSet.copyOf(VectorBinaryAssign.OPERATIONS)))) {
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import com.google.common.collect.ImmutableSet;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Sets;
1: import org.apache.mahout.math.function.DoubleDoubleFunction;
1: import org.apache.mahout.math.function.Functions;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: @RunWith(Parameterized.class)
1: public final class VectorBinaryAssignTest {
1:   private static final int CARDINALITY = 10;
1: 
1:   private DoubleDoubleFunction function;
1:   private VectorBinaryAssign operation;
1: 
1:   @SuppressWarnings("unchecked")
1:   @Parameterized.Parameters
1:   public static Collection<Object[]> generateData() {
1:     List<Object[]> data = Lists.newArrayList();
1:     for (List entry : Sets.cartesianProduct(Lists.newArrayList(
1:         ImmutableSet.of(Functions.PLUS, Functions.PLUS_ABS, Functions.MULT, Functions.MULT_RIGHT_PLUS1,
1:             Functions.MINUS),
0:         ImmutableSet.copyOf(VectorBinaryAssign.operations)))) {
1:       data.add(entry.toArray());
1:     }
1:     return data;
1:   }
1: 
1:   public VectorBinaryAssignTest(DoubleDoubleFunction function, VectorBinaryAssign operation) {
1:     this.function = function;
1:     this.operation = operation;
1:   }
1: 
1:   @Test
1:   public void testAll() {
1:     SequentialAccessSparseVector x = new SequentialAccessSparseVector(CARDINALITY);
1:     for (int i = 0; i < x.size(); ++i) {
1:       x.setQuick(i, i);
1:     }
1:     SequentialAccessSparseVector y = new SequentialAccessSparseVector(x);
1: 
1:     System.out.printf("function %s; operation %s\n", function, operation);
1: 
1:     operation.assign(x, y, function);
1: 
1:     for (int i = 0; i < x.size(); ++i) {
1:       assertEquals(x.getQuick(i), function.apply(i, i), 0.0);
1:     }
1:   }
1: }
============================================================================