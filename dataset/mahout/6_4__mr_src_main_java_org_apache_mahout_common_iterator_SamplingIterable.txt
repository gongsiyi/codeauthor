1:369c86f: /**
1:369c86f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:369c86f:  * contributor license agreements.  See the NOTICE file distributed with
1:369c86f:  * this work for additional information regarding copyright ownership.
1:369c86f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:369c86f:  * (the "License"); you may not use this file except in compliance with
1:369c86f:  * the License.  You may obtain a copy of the License at
1:369c86f:  *
1:369c86f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:369c86f:  *
1:369c86f:  * Unless required by applicable law or agreed to in writing, software
1:369c86f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:369c86f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:369c86f:  * See the License for the specific language governing permissions and
1:369c86f:  * limitations under the License.
1:369c86f:  */
6:369c86f: 
1:5a58194: package org.apache.mahout.common.iterator;
1:369c86f: 
1:369c86f: import java.util.Iterator;
1:369c86f: 
1:369c86f: /**
1:b82d989:  * Wraps an {@link Iterable} whose {@link Iterable#iterator()} returns only some subset of the elements that
1:b82d989:  * it would, as determined by a iterator rate parameter.
1:369c86f:  */
1:369c86f: public final class SamplingIterable<T> implements Iterable<T> {
1:b82d989:   
1:369c86f:   private final Iterable<? extends T> delegate;
1:369c86f:   private final double samplingRate;
1:b82d989:   
1:369c86f:   public SamplingIterable(Iterable<? extends T> delegate, double samplingRate) {
1:369c86f:     this.delegate = delegate;
1:369c86f:     this.samplingRate = samplingRate;
2:369c86f:   }
1:b82d989:   
1:369c86f:   @Override
1:369c86f:   public Iterator<T> iterator() {
1:02ff22f:     return new SamplingIterator<>(delegate.iterator(), samplingRate);
1:4841efb:   }
1:b82d989:   
1:369c86f:   public static <T> Iterable<T> maybeWrapIterable(Iterable<T> delegate, double samplingRate) {
1:02ff22f:     return samplingRate >= 1.0 ? delegate : new SamplingIterable<>(delegate, samplingRate);
1:369c86f:   }
1:b82d989:   
1:369c86f: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     return new SamplingIterator<>(delegate.iterator(), samplingRate);
1:     return samplingRate >= 1.0 ? delegate : new SamplingIterable<>(delegate, samplingRate);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1: }
author:Robin Anil
-------------------------------------------------------------------------------
commit:b82d989
/////////////////////////////////////////////////////////////////////////
1:  * Wraps an {@link Iterable} whose {@link Iterable#iterator()} returns only some subset of the elements that
1:  * it would, as determined by a iterator rate parameter.
1:   
1:   
1:   
1:   
1:   
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:5a58194
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.common.iterator;
0:  * as determined by a iterator rate parameter.
commit:b25ad9d
/////////////////////////////////////////////////////////////////////////
0:  * Wraps an {@link Iterable} whose {@link Iterable#iterator()} returns only some subset of the elements that it would,
0:  * as determined by a sampling rate parameter.
commit:369c86f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.cf.taste.impl.common;
1: 
1: import java.util.Iterator;
1: 
1: /**
0:  * Wraps an {@link Iterable} whose {@link Iterable#iterator()} returns only some subset of the elements
0:  * that it would, as determined by a sampling rate parameter.
1:  */
1: public final class SamplingIterable<T> implements Iterable<T> {
1: 
1:   private final Iterable<? extends T> delegate;
1:   private final double samplingRate;
1: 
1:   public SamplingIterable(Iterable<? extends T> delegate, double samplingRate) {
1:     this.delegate = delegate;
1:     this.samplingRate = samplingRate;
1:   }
1: 
1:   @Override
1:   public Iterator<T> iterator() {
0:     return new SamplingIterator<T>(delegate.iterator(), samplingRate);
1:   }
1: 
1:   public static <T> Iterable<T> maybeWrapIterable(Iterable<T> delegate, double samplingRate) {
0:     return samplingRate >= 1.0 ? delegate : new SamplingIterable<T>(delegate, samplingRate);
1:   }
1: 
1: }
============================================================================