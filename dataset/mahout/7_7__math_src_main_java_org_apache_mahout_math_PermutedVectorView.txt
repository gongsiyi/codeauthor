1:1499411: /*
1:1499411:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1499411:  * contributor license agreements.  See the NOTICE file distributed with
1:1499411:  * this work for additional information regarding copyright ownership.
1:1499411:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1499411:  * (the "License"); you may not use this file except in compliance with
1:1499411:  * the License.  You may obtain a copy of the License at
1:1499411:  *
1:1499411:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1499411:  *
1:1499411:  * Unless required by applicable law or agreed to in writing, software
1:1499411:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1499411:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1499411:  * See the License for the specific language governing permissions and
1:1499411:  * limitations under the License.
1:1499411:  */
1:1499411: 
1:21779d8: package org.apache.mahout.math;
2:21779d8: 
1:21779d8: import java.util.Iterator;
1:21779d8: 
1:a8d3dbd: import com.google.common.collect.AbstractIterator;
1:a8d3dbd: 
2:21779d8: /**
1:21779d8:  * Provides a permuted view of a vector.
2:21779d8:  */
1:21779d8: public class PermutedVectorView extends AbstractVector {
1:1499411:   private final Vector vector;            // the vector containing the data
1:1499411:   private final int[] pivot;              // convert from external index to internal
1:1499411:   private final int[] unpivot;            // convert from internal index to external
1:21779d8: 
1:21779d8:   public PermutedVectorView(Vector vector, int[] pivot, int[] unpivot) {
1:21779d8:     super(vector.size());
1:21779d8:     this.vector = vector;
1:21779d8:     this.pivot = pivot;
1:21779d8:     this.unpivot = unpivot;
1:21779d8:   }
1:21779d8: 
1:21779d8:   public PermutedVectorView(Vector vector, int[] pivot) {
1:21779d8:     this(vector, pivot, reversePivotPermutation(pivot));
1:21779d8:   }
1:21779d8: 
1:21779d8:   private static int[] reversePivotPermutation(int[] pivot) {
1:21779d8:     int[] unpivot1 = new int[pivot.length];
1:21779d8:     for (int i = 0; i < pivot.length; i++) {
1:21779d8:       unpivot1[pivot[i]] = i;
1:21779d8:     }
1:21779d8:     return unpivot1;
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Subclasses must override to return an appropriately sparse or dense result
2:21779d8:    *
1:21779d8:    * @param rows    the row cardinality
1:21779d8:    * @param columns the column cardinality
1:21779d8:    * @return a Matrix
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   protected Matrix matrixLike(int rows, int columns) {
1:21779d8:     if (vector.isDense()) {
1:21779d8:       return new DenseMatrix(rows, columns);
1:21779d8:     } else {
1:95f836b:       return new SparseRowMatrix(rows, columns);
1:21779d8:     }
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:a8d3dbd:    * Used internally by assign() to update multiple indices and values at once.
1:a8d3dbd:    * Only really useful for sparse vectors (especially SequentialAccessSparseVector).
1:b5c2879:    * <p>
1:a8d3dbd:    * If someone ever adds a new type of sparse vectors, this method must merge (index, value) pairs into the vector.
1:a8d3dbd:    *
1:a8d3dbd:    * @param updates a mapping of indices to values to merge in the vector.
1:a8d3dbd:    */
1:a8d3dbd:   @Override
1:a8d3dbd:   public void mergeUpdates(OrderedIntDoubleMapping updates) {
1:a8d3dbd:     for (int i = 0; i < updates.getNumMappings(); ++i) {
1:a8d3dbd:       updates.setIndexAt(i, pivot[updates.indexAt(i)]);
1:a8d3dbd:     }
1:a8d3dbd:     vector.mergeUpdates(updates);
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   /**
1:21779d8:    * @return true iff this implementation should be considered dense -- that it explicitly
1:21779d8:    *         represents every value
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public boolean isDense() {
1:21779d8:     return vector.isDense();
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:a8d3dbd:    * If the view is permuted, the elements cannot be accessed in the same order.
1:a8d3dbd:    *
1:21779d8:    * @return true iff this implementation should be considered to be iterable in index order in an
1:21779d8:    *         efficient way. In particular this implies that {@link #iterator()} and {@link
1:21779d8:    *         #iterateNonZero()} return elements in ascending order by index.
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public boolean isSequentialAccess() {
1:a8d3dbd:     return false;
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:b5c2879:    * Iterates over all elements <p> * NOTE: Implementations may choose to reuse the Element
1:21779d8:    * returned for performance reasons, so if you need a copy of it, you should call {@link
1:21779d8:    * #getElement(int)} for the given index
1:21779d8:    *
1:21779d8:    * @return An {@link java.util.Iterator} over all elements
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Iterator<Element> iterator() {
1:21779d8:     return new AbstractIterator<Element>() {
1:dc62944:       private final Iterator<Element> i = vector.all().iterator();
1:21779d8: 
1:21779d8:       @Override
1:21779d8:       protected Vector.Element computeNext() {
1:21779d8:         if (i.hasNext()) {
1:21779d8:           final Element x = i.next();
1:21779d8:           return new Element() {
1:4194a28:             private final int index = unpivot[x.index()];
1:21779d8: 
1:21779d8:             @Override
1:21779d8:             public double get() {
1:21779d8:               return x.get();
1:21779d8:             }
1:21779d8: 
1:21779d8:             @Override
1:21779d8:             public int index() {
1:21779d8:               return index;
1:21779d8:             }
1:21779d8: 
1:21779d8:             @Override
1:21779d8:             public void set(double value) {
1:21779d8:               x.set(value);
1:21779d8:             }
1:21779d8:           };
1:21779d8:         } else {
1:21779d8:           return endOfData();
1:21779d8:         }
1:21779d8:       }
1:21779d8:     };
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:b5c2879:    * Iterates over all non-zero elements. <p> NOTE: Implementations may choose to reuse the Element
1:21779d8:    * returned for performance reasons, so if you need a copy of it, you should call {@link
1:21779d8:    * #getElement(int)} for the given index
1:21779d8:    *
1:21779d8:    * @return An {@link java.util.Iterator} over all non-zero elements
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Iterator<Element> iterateNonZero() {
1:21779d8:     return new AbstractIterator<Element>() {
1:dc62944:       private final Iterator<Element> i = vector.nonZeroes().iterator();
1:21779d8: 
1:21779d8:       @Override
1:21779d8:       protected Vector.Element computeNext() {
1:21779d8:         if (i.hasNext()) {
1:21779d8:           final Element x = i.next();
1:21779d8:           return new Element() {
1:4194a28:             private final int index = unpivot[x.index()];
1:21779d8: 
1:21779d8:             @Override
1:21779d8:             public double get() {
1:21779d8:               return x.get();
1:21779d8:             }
1:21779d8: 
1:21779d8:             @Override
1:21779d8:             public int index() {
1:21779d8:               return index;
1:21779d8:             }
1:21779d8: 
1:21779d8:             @Override
1:21779d8:             public void set(double value) {
1:21779d8:               x.set(value);
1:21779d8:             }
1:21779d8:           };
1:21779d8:         } else {
1:21779d8:           return endOfData();
1:21779d8:         }
1:21779d8:       }
1:21779d8:     };
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return the value at the given index, without checking bounds
1:21779d8:    *
1:21779d8:    * @param index an int index
1:21779d8:    * @return the double at the index
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public double getQuick(int index) {
1:21779d8:     return vector.getQuick(pivot[index]);
1:21779d8:   }
1:21779d8: 
1:21779d8:   /**
1:21779d8:    * Return an empty vector of the same underlying class as the receiver
1:21779d8:    *
1:21779d8:    * @return a Vector
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public Vector like() {
1:21779d8:     return vector.like();
1:21779d8:   }
1:21779d8: 
1:0b564c7:   @Override
1:0b564c7:   public Vector like(int cardinality) {
1:0b564c7:     return vector.like(cardinality);
1:0b564c7:   }
1:0b564c7: 
1:21779d8:   /**
1:21779d8:    * Set the value at the given index, without checking bounds
1:21779d8:    *
1:21779d8:    * @param index an int index into the receiver
1:21779d8:    * @param value a double value to set
1:21779d8:    */
1:21779d8:   @Override
1:21779d8:   public void setQuick(int index, double value) {
1:21779d8:     vector.setQuick(pivot[index], value);
1:21779d8:   }
1:21779d8: 
1:45d8803:   /** Return the number of values in the recipient */
1:21779d8:   @Override
1:21779d8:   public int getNumNondefaultElements() {
1:21779d8:     return vector.getNumNondefaultElements();
1:21779d8:   }
1:a8d3dbd: 
1:a8d3dbd:   @Override
1:45d8803:   public int getNumNonZeroElements() {
1:45d8803:     // Return the number of nonzeros in the recipient,
1:45d8803:     // so potentially don't have to go through our iterator
1:45d8803:     return vector.getNumNonZeroElements();
1:45d8803:   }
1:45d8803: 
1:45d8803:   @Override
1:a8d3dbd:   public double getLookupCost() {
1:a8d3dbd:     return vector.getLookupCost();
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Override
1:a8d3dbd:   public double getIteratorAdvanceCost() {
1:a8d3dbd:     return vector.getIteratorAdvanceCost();
1:a8d3dbd:   }
1:a8d3dbd: 
1:a8d3dbd:   @Override
1:a8d3dbd:   public boolean isAddConstantTime() {
1:a8d3dbd:     return vector.isAddConstantTime();
1:a8d3dbd:   }
1:21779d8: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:b5c2879
/////////////////////////////////////////////////////////////////////////
1:    * <p>
/////////////////////////////////////////////////////////////////////////
1:    * Iterates over all elements <p> * NOTE: Implementations may choose to reuse the Element
/////////////////////////////////////////////////////////////////////////
1:    * Iterates over all non-zero elements. <p> NOTE: Implementations may choose to reuse the Element
author:Dmitriy Lyubimov
-------------------------------------------------------------------------------
commit:0b564c7
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public Vector like(int cardinality) {
1:     return vector.like(cardinality);
1:   }
1: 
author:ssc
-------------------------------------------------------------------------------
commit:45d8803
/////////////////////////////////////////////////////////////////////////
1:   /** Return the number of values in the recipient */
1:   public int getNumNonZeroElements() {
1:     // Return the number of nonzeros in the recipient,
1:     // so potentially don't have to go through our iterator
1:     return vector.getNumNonZeroElements();
1:   }
1: 
1:   @Override
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:dc62944
/////////////////////////////////////////////////////////////////////////
1:       private final Iterator<Element> i = vector.all().iterator();
/////////////////////////////////////////////////////////////////////////
1:       private final Iterator<Element> i = vector.nonZeroes().iterator();
author:dfilimon
-------------------------------------------------------------------------------
commit:a8d3dbd
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.AbstractIterator;
1: 
/////////////////////////////////////////////////////////////////////////
1:    * Used internally by assign() to update multiple indices and values at once.
1:    * Only really useful for sparse vectors (especially SequentialAccessSparseVector).
0:    * <p/>
1:    * If someone ever adds a new type of sparse vectors, this method must merge (index, value) pairs into the vector.
1:    *
1:    * @param updates a mapping of indices to values to merge in the vector.
1:    */
1:   @Override
1:   public void mergeUpdates(OrderedIntDoubleMapping updates) {
1:     for (int i = 0; i < updates.getNumMappings(); ++i) {
1:       updates.setIndexAt(i, pivot[updates.indexAt(i)]);
1:     }
1:     vector.mergeUpdates(updates);
1:   }
1: 
1:   /**
/////////////////////////////////////////////////////////////////////////
1:    * If the view is permuted, the elements cannot be accessed in the same order.
1:    *
1:     return false;
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public double getLookupCost() {
1:     return vector.getLookupCost();
1:   }
1: 
1:   @Override
1:   public double getIteratorAdvanceCost() {
1:     return vector.getIteratorAdvanceCost();
1:   }
1: 
1:   @Override
1:   public boolean isAddConstantTime() {
1:     return vector.isAddConstantTime();
1:   }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4194a28
/////////////////////////////////////////////////////////////////////////
0:       private final Iterator<Element> i = vector.iterator();
1:             private final int index = unpivot[x.index()];
/////////////////////////////////////////////////////////////////////////
0:       private final Iterator<Element> i = vector.iterateNonZero();
1:             private final int index = unpivot[x.index()];
commit:1499411
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
1:   private final Vector vector;            // the vector containing the data
1:   private final int[] pivot;              // convert from external index to internal
1:   private final int[] unpivot;            // convert from internal index to external
/////////////////////////////////////////////////////////////////////////
0:       final Iterator<Element> i = vector.iterator();
0:             final int index = unpivot[x.index()];
/////////////////////////////////////////////////////////////////////////
0:       final Iterator<Element> i = vector.iterateNonZero();
0:             final int index = unpivot[x.index()];
author:Ted Dunning
-------------------------------------------------------------------------------
commit:95f836b
/////////////////////////////////////////////////////////////////////////
1:       return new SparseRowMatrix(rows, columns);
commit:21779d8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math;
1: 
0: import com.google.common.collect.AbstractIterator;
1: 
1: import java.util.Iterator;
1: 
1: /**
1:  * Provides a permuted view of a vector.
1:  */
1: public class PermutedVectorView extends AbstractVector {
0:   private Vector vector;            // the vector containing the data
0:   private int[] pivot;              // convert from external index to internal
0:   private int[] unpivot;            // convert from internal index to external
1: 
1:   public PermutedVectorView(Vector vector, int[] pivot, int[] unpivot) {
1:     super(vector.size());
1:     this.vector = vector;
1:     this.pivot = pivot;
1:     this.unpivot = unpivot;
1:   }
1: 
1:   public PermutedVectorView(Vector vector, int[] pivot) {
1:     this(vector, pivot, reversePivotPermutation(pivot));
1:   }
1: 
1:   private static int[] reversePivotPermutation(int[] pivot) {
1:     int[] unpivot1 = new int[pivot.length];
1:     for (int i = 0; i < pivot.length; i++) {
1:       unpivot1[pivot[i]] = i;
1:     }
1:     return unpivot1;
1:   }
1: 
1:   /**
1:    * Subclasses must override to return an appropriately sparse or dense result
1:    *
1:    * @param rows    the row cardinality
1:    * @param columns the column cardinality
1:    * @return a Matrix
1:    */
1:   @Override
1:   protected Matrix matrixLike(int rows, int columns) {
1:     if (vector.isDense()) {
1:       return new DenseMatrix(rows, columns);
1:     } else {
0:       return new SparseRowMatrix(new int[] {rows, columns});
1:     }
1:   }
1: 
1:   /**
1:    * @return true iff this implementation should be considered dense -- that it explicitly
1:    *         represents every value
1:    */
1:   @Override
1:   public boolean isDense() {
1:     return vector.isDense();
1:   }
1: 
1:   /**
1:    * @return true iff this implementation should be considered to be iterable in index order in an
1:    *         efficient way. In particular this implies that {@link #iterator()} and {@link
1:    *         #iterateNonZero()} return elements in ascending order by index.
1:    */
1:   @Override
1:   public boolean isSequentialAccess() {
0:     return vector.isSequentialAccess();
1:   }
1: 
1:   /**
0:    * Iterates over all elements <p/> * NOTE: Implementations may choose to reuse the Element
1:    * returned for performance reasons, so if you need a copy of it, you should call {@link
1:    * #getElement(int)} for the given index
1:    *
1:    * @return An {@link java.util.Iterator} over all elements
1:    */
1:   @Override
1:   public Iterator<Element> iterator() {
1:     return new AbstractIterator<Element>() {
0:       Iterator<Element> i = vector.iterator();
1: 
1:       @Override
1:       protected Vector.Element computeNext() {
1:         if (i.hasNext()) {
1:           final Element x = i.next();
1:           return new Element() {
0:             int index = unpivot[x.index()];
1: 
1:             @Override
1:             public double get() {
1:               return x.get();
1:             }
1: 
1:             @Override
1:             public int index() {
1:               return index;
1:             }
1: 
1:             @Override
1:             public void set(double value) {
1:               x.set(value);
1:             }
1:           };
1:         } else {
1:           return endOfData();
1:         }
1:       }
1:     };
1:   }
1: 
1:   /**
0:    * Iterates over all non-zero elements. <p/> NOTE: Implementations may choose to reuse the Element
1:    * returned for performance reasons, so if you need a copy of it, you should call {@link
1:    * #getElement(int)} for the given index
1:    *
1:    * @return An {@link java.util.Iterator} over all non-zero elements
1:    */
1:   @Override
1:   public Iterator<Element> iterateNonZero() {
1:     return new AbstractIterator<Element>() {
0:       Iterator<Element> i = vector.iterateNonZero();
1: 
1:       @Override
1:       protected Vector.Element computeNext() {
1:         if (i.hasNext()) {
1:           final Element x = i.next();
1:           return new Element() {
0:             int index = unpivot[x.index()];
1: 
1:             @Override
1:             public double get() {
1:               return x.get();
1:             }
1: 
1:             @Override
1:             public int index() {
1:               return index;
1:             }
1: 
1:             @Override
1:             public void set(double value) {
1:               x.set(value);
1:             }
1:           };
1:         } else {
1:           return endOfData();
1:         }
1:       }
1:     };
1:   }
1: 
1:   /**
1:    * Return the value at the given index, without checking bounds
1:    *
1:    * @param index an int index
1:    * @return the double at the index
1:    */
1:   @Override
1:   public double getQuick(int index) {
1:     return vector.getQuick(pivot[index]);
1:   }
1: 
1:   /**
1:    * Return an empty vector of the same underlying class as the receiver
1:    *
1:    * @return a Vector
1:    */
1:   @Override
1:   public Vector like() {
1:     return vector.like();
1:   }
1: 
1:   /**
1:    * Set the value at the given index, without checking bounds
1:    *
1:    * @param index an int index into the receiver
1:    * @param value a double value to set
1:    */
1:   @Override
1:   public void setQuick(int index, double value) {
1:     vector.setQuick(pivot[index], value);
1:   }
1: 
1:   /**
0:    * Return the number of values in the recipient
1:    *
0:    * @return an int
1:    */
1:   @Override
1:   public int getNumNondefaultElements() {
1:     return vector.getNumNondefaultElements();
1:   }
1: }
============================================================================