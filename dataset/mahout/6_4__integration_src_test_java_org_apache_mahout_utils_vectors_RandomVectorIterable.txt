1:f55276b: /**
1:f55276b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f55276b:  * contributor license agreements.  See the NOTICE file distributed with
1:f55276b:  * this work for additional information regarding copyright ownership.
1:f55276b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f55276b:  * (the "License"); you may not use this file except in compliance with
1:f55276b:  * the License.  You may obtain a copy of the License at
1:f55276b:  *
1:f55276b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f55276b:  *
1:f55276b:  * Unless required by applicable law or agreed to in writing, software
1:f55276b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f55276b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f55276b:  * See the License for the specific language governing permissions and
1:f55276b:  * limitations under the License.
1:f55276b:  */
1:f55276b: 
1:63e11c0: package org.apache.mahout.utils.vectors;
2:233d93d: 
1:63e11c0: import java.util.Iterator;
1:63e11c0: import java.util.Random;
1:233d93d: 
1:80366ee: import com.google.common.base.Function;
1:80366ee: import com.google.common.collect.Iterators;
1:b3f6857: import org.apache.mahout.common.RandomUtils;
1:80366ee: import org.apache.mahout.common.iterator.CountingIterator;
1:233d93d: import org.apache.mahout.math.DenseVector;
1:b3f6857: import org.apache.mahout.math.RandomAccessSparseVector;
1:233d93d: import org.apache.mahout.math.Vector;
1:85ec3a3: import org.apache.mahout.math.function.DoubleFunction;
1:233d93d: 
1:ff79ff4: public final class RandomVectorIterable implements Iterable<Vector> {
1:ff79ff4: 
1:758cc1b:   public enum VectorType {DENSE, SPARSE}
1:ff79ff4: 
1:a13b4b7:   private final int numItems;
1:a13b4b7:   private final VectorType type;
1:ff79ff4:   
1:63e11c0:   public RandomVectorIterable() {
1:a13b4b7:     this(100, VectorType.SPARSE);
1:b5bbe2e:   }
1:233d93d:   
1:63e11c0:   public RandomVectorIterable(int numItems) {
1:a13b4b7:     this(numItems, VectorType.SPARSE);
7:63e11c0:   }
1:233d93d:   
1:63e11c0:   public RandomVectorIterable(int numItems, VectorType type) {
2:63e11c0:     this.numItems = numItems;
1:63e11c0:     this.type = type;
1:63e11c0:   }
1:233d93d:   
5:63e11c0:   @Override
1:63e11c0:   public Iterator<Vector> iterator() {
1:80366ee:     return Iterators.transform(
1:80366ee:         new CountingIterator(numItems),
1:80366ee:         new Function<Integer, Vector>() {
1:80366ee:           private final Random random = RandomUtils.getRandom();
1:80366ee:           @Override
1:80366ee:           public Vector apply(Integer dummy) {
1:80366ee:             Vector result =
1:80366ee:                 type == VectorType.SPARSE ? new RandomAccessSparseVector(numItems) : new DenseVector(numItems);
1:e64dd36:             result.assign(new DoubleFunction() {
1:80366ee:               @Override
1:80366ee:               public double apply(double ignored) {
1:80366ee:                 return random.nextDouble();
1:80366ee:               }
1:80366ee:             });
1:80366ee:             return result;
1:80366ee:           }
1:80366ee:         });
1:63e11c0:   }
1:80366ee: 
1:63e11c0: }
============================================================================
author:tcp
-------------------------------------------------------------------------------
commit:e64dd36
/////////////////////////////////////////////////////////////////////////
1:             result.assign(new DoubleFunction() {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:74f849b
/////////////////////////////////////////////////////////////////////////
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:50fd693
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
1: import com.google.common.collect.Iterators;
1: import org.apache.mahout.common.iterator.CountingIterator;
/////////////////////////////////////////////////////////////////////////
1:     return Iterators.transform(
1:         new CountingIterator(numItems),
1:         new Function<Integer, Vector>() {
1:           private final Random random = RandomUtils.getRandom();
1:           @Override
1:           public Vector apply(Integer dummy) {
1:             Vector result =
1:                 type == VectorType.SPARSE ? new RandomAccessSparseVector(numItems) : new DenseVector(numItems);
0:             result.assign(new DoubleFunction(){
1:               @Override
1:               public double apply(double ignored) {
1:                 return random.nextDouble();
1:               }
1:             });
1:             return result;
1:           }
1:         });
1: 
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1:   private final int numItems;
1:   private final VectorType type;
1:     this(100, VectorType.SPARSE);
1:     this(numItems, VectorType.SPARSE);
commit:85ec3a3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.DoubleFunction;
/////////////////////////////////////////////////////////////////////////
0:       result.assign(new DoubleFunction(){
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: public final class RandomVectorIterable implements Iterable<Vector> {
1: 
1: 
0:   private int numItems = 100;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private int count;
commit:b3f6857
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.RandomAccessSparseVector;
/////////////////////////////////////////////////////////////////////////
0:       Vector result = type == VectorType.SPARSE ? new RandomAccessSparseVector(numItems) : new DenseVector(numItems);
commit:b5bbe2e
/////////////////////////////////////////////////////////////////////////
0: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
0:     private int count = 0;
0:     private final Random random = RandomUtils.getRandom();
/////////////////////////////////////////////////////////////////////////
0:       if (!hasNext()) {
0:         throw new NoSuchElementException();
1:       }
commit:da03b23
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.RandomUtils;
/////////////////////////////////////////////////////////////////////////
0:     final Random random = RandomUtils.getRandom();
commit:758cc1b
/////////////////////////////////////////////////////////////////////////
0:   private int numItems = 100;
1:   public enum VectorType {DENSE, SPARSE}
0:   private VectorType type = VectorType.SPARSE;
/////////////////////////////////////////////////////////////////////////
0:     final Random random = new Random();
/////////////////////////////////////////////////////////////////////////
0:       Vector result = type == VectorType.SPARSE ? new SparseVector(numItems) : new DenseVector(numItems);
commit:f55276b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
/////////////////////////////////////////////////////////////////////////
author:Robin Anil
-------------------------------------------------------------------------------
commit:233d93d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
0: import org.apache.mahout.math.function.UnaryFunction;
0: public class RandomVectorIterable implements Iterable<Vector>{
1:   
1:   
1:   
1:   
1:   
1:   
1:   
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     
author:Jacob Alexander Mannix
-------------------------------------------------------------------------------
commit:4f91f44
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.function.UnaryFunction;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:a435efb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.mahout.math.DenseVector;
0: import org.apache.mahout.math.SparseVector;
0: import org.apache.mahout.math.UnaryFunction;
0: import org.apache.mahout.math.Vector;
commit:90fe0a2
/////////////////////////////////////////////////////////////////////////
0: public class RandomVectorIterable implements Iterable<Vector>{
commit:63e11c0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.vectors;
0: 
0: import org.apache.mahout.matrix.Vector;
0: import org.apache.mahout.matrix.DenseVector;
0: import org.apache.mahout.matrix.UnaryFunction;
0: import org.apache.mahout.matrix.SparseVector;
0: 
1: import java.util.Iterator;
1: import java.util.Random;
0: 
0: 
0: /**
0:  *
0:  *
0:  **/
0: public class RandomVectorIterable implements VectorIterable{
0: 
0:   int numItems = 100;
0:   public static enum VectorType {DENSE, SPARSE};
0: 
0:   VectorType type = VectorType.SPARSE;
0: 
1:   public RandomVectorIterable() {
1:   }
0: 
1:   public RandomVectorIterable(int numItems) {
1:     this.numItems = numItems;
1:   }
0: 
1:   public RandomVectorIterable(int numItems, VectorType type) {
1:     this.numItems = numItems;
1:     this.type = type;
1:   }
0: 
1:   @Override
1:   public Iterator<Vector> iterator() {
0:     return new VectIterator();
1:   }
0: 
0:   private class VectIterator implements Iterator<Vector>{
0:     int count = 0;
0:     Random random = new Random();
1:     @Override
0:     public boolean hasNext() {
0:       return count < numItems;
1:     }
0: 
1:     @Override
0:     public Vector next() {
0:       Vector result = type.equals(VectorType.SPARSE) ? new SparseVector(numItems) : new DenseVector(numItems);
0:       result.assign(new UnaryFunction(){
1:         @Override
0:         public double apply(double arg1) {
0:           return random.nextDouble();
1:         }
0:       });
0:       count++;
0:       return result;
1:     }
0: 
1:     @Override
0:     public void remove() {
0:       throw new UnsupportedOperationException();
1:     }
1:   }
1: }
============================================================================