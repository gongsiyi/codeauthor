1:f3a9cc1: /**
1:f3a9cc1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f3a9cc1:  * contributor license agreements.  See the NOTICE file distributed with
1:f3a9cc1:  * this work for additional information regarding copyright ownership.
1:f3a9cc1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f3a9cc1:  * (the "License"); you may not use this file except in compliance with
1:f3a9cc1:  * the License.  You may obtain a copy of the License at
1:f3a9cc1:  *
1:f3a9cc1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f3a9cc1:  *
1:f3a9cc1:  * Unless required by applicable law or agreed to in writing, software
1:f3a9cc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f3a9cc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3a9cc1:  * See the License for the specific language governing permissions and
1:f3a9cc1:  * limitations under the License.
1:f3a9cc1:  */
1:f3a9cc1: 
1:7a9e99e: package org.apache.mahout.cf.taste.example.kddcup.track1;
1:7a9e99e: 
1:7a9e99e: import java.io.File;
1:7a9e99e: import java.util.Collection;
1:7a9e99e: import java.util.concurrent.Callable;
1:7a9e99e: import java.util.concurrent.atomic.AtomicInteger;
1:7a9e99e: 
1:74f849b: import com.google.common.collect.Lists;
1:7a9e99e: import org.apache.mahout.cf.taste.common.TasteException;
1:7a9e99e: import org.apache.mahout.cf.taste.eval.DataModelBuilder;
1:7a9e99e: import org.apache.mahout.cf.taste.eval.RecommenderBuilder;
1:7a9e99e: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterable;
1:7a9e99e: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1:4fbab15: import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1:4fbab15: import org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;
1:7a9e99e: import org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;
1:7a9e99e: import org.apache.mahout.cf.taste.model.DataModel;
1:7a9e99e: import org.apache.mahout.cf.taste.model.Preference;
1:7a9e99e: import org.apache.mahout.cf.taste.model.PreferenceArray;
1:7a9e99e: import org.apache.mahout.cf.taste.recommender.Recommender;
1:7a9e99e: import org.apache.mahout.common.Pair;
1:7a9e99e: import org.slf4j.Logger;
1:7a9e99e: import org.slf4j.LoggerFactory;
1:7a9e99e: 
1:7a9e99e: /**
1:7a9e99e:  * Attempts to run an evaluation just like that dictated for Yahoo's KDD Cup, Track 1.
1:7a9e99e:  * It will compute the RMSE of a validation data set against the predicted ratings from
1:7a9e99e:  * the training data set.
1:7a9e99e:  */
1:7a9e99e: public final class Track1RecommenderEvaluator extends AbstractDifferenceRecommenderEvaluator {
1:7a9e99e: 
1:7a9e99e:   private static final Logger log = LoggerFactory.getLogger(Track1RecommenderEvaluator.class);
1:7a9e99e: 
1:7a9e99e:   private RunningAverage average;
1:7a9e99e:   private final File dataFileDirectory;
1:7a9e99e: 
1:7a9e99e:   public Track1RecommenderEvaluator(File dataFileDirectory) {
1:7a9e99e:     setMaxPreference(100.0f);
1:7a9e99e:     setMinPreference(0.0f);
1:7a9e99e:     average = new FullRunningAverage();
1:7a9e99e:     this.dataFileDirectory = dataFileDirectory;
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   public double evaluate(RecommenderBuilder recommenderBuilder,
1:7a9e99e:                          DataModelBuilder dataModelBuilder,
1:7a9e99e:                          DataModel dataModel,
1:7a9e99e:                          double trainingPercentage,
1:7a9e99e:                          double evaluationPercentage) throws TasteException {
1:7a9e99e: 
1:7a9e99e:     Recommender recommender = recommenderBuilder.buildRecommender(dataModel);
1:7a9e99e: 
1:74f849b:     Collection<Callable<Void>> estimateCallables = Lists.newArrayList();
1:7a9e99e:     AtomicInteger noEstimateCounter = new AtomicInteger();
1:6d16230:     for (Pair<PreferenceArray,long[]> userData
1:6d16230:         : new DataFileIterable(KDDCupDataModel.getValidationFile(dataFileDirectory))) {
1:7a9e99e:       PreferenceArray validationPrefs = userData.getFirst();
1:7a9e99e:       long userID = validationPrefs.get(0).getUserID();
1:7a9e99e:       estimateCallables.add(
1:7a9e99e:           new PreferenceEstimateCallable(recommender, userID, validationPrefs, noEstimateCounter));
1:7a9e99e:     }
1:7a9e99e: 
1:4fbab15:     RunningAverageAndStdDev timing = new FullRunningAverageAndStdDev();
1:4fbab15:     execute(estimateCallables, noEstimateCounter, timing);
1:7a9e99e: 
1:7a9e99e:     double result = computeFinalEvaluation();
1:7a9e99e:     log.info("Evaluation result: {}", result);
1:7a9e99e:     return result;
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   // Use RMSE scoring:
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   protected void reset() {
1:7a9e99e:     average = new FullRunningAverage();
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   protected void processOneEstimate(float estimatedPreference, Preference realPref) {
1:7a9e99e:     double diff = realPref.getValue() - estimatedPreference;
1:7a9e99e:     average.addDatum(diff * diff);
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e:   @Override
1:7a9e99e:   protected double computeFinalEvaluation() {
1:7a9e99e:     return Math.sqrt(average.getAverage());
1:7a9e99e:   }
1:7a9e99e: 
1:7a9e99e: }
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     for (Pair<PreferenceArray,long[]> userData
1:         : new DataFileIterable(KDDCupDataModel.getValidationFile(dataFileDirectory))) {
commit:74f849b
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:     Collection<Callable<Void>> estimateCallables = Lists.newArrayList();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbab15
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.cf.taste.impl.common.FullRunningAverageAndStdDev;
1: import org.apache.mahout.cf.taste.impl.common.RunningAverageAndStdDev;
/////////////////////////////////////////////////////////////////////////
1:     RunningAverageAndStdDev timing = new FullRunningAverageAndStdDev();
1:     execute(estimateCallables, noEstimateCounter, timing);
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:7a9e99e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.cf.taste.example.kddcup.track1;
1: 
1: import java.io.File;
0: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.apache.mahout.cf.taste.common.TasteException;
1: import org.apache.mahout.cf.taste.eval.DataModelBuilder;
1: import org.apache.mahout.cf.taste.eval.RecommenderBuilder;
1: import org.apache.mahout.cf.taste.example.kddcup.DataFileIterable;
1: import org.apache.mahout.cf.taste.example.kddcup.KDDCupDataModel;
1: import org.apache.mahout.cf.taste.impl.common.FullRunningAverage;
1: import org.apache.mahout.cf.taste.impl.common.RunningAverage;
1: import org.apache.mahout.cf.taste.impl.eval.AbstractDifferenceRecommenderEvaluator;
1: import org.apache.mahout.cf.taste.model.DataModel;
1: import org.apache.mahout.cf.taste.model.Preference;
1: import org.apache.mahout.cf.taste.model.PreferenceArray;
1: import org.apache.mahout.cf.taste.recommender.Recommender;
1: import org.apache.mahout.common.Pair;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Attempts to run an evaluation just like that dictated for Yahoo's KDD Cup, Track 1.
1:  * It will compute the RMSE of a validation data set against the predicted ratings from
1:  * the training data set.
1:  */
1: public final class Track1RecommenderEvaluator extends AbstractDifferenceRecommenderEvaluator {
1: 
1:   private static final Logger log = LoggerFactory.getLogger(Track1RecommenderEvaluator.class);
1: 
1:   private RunningAverage average;
1:   private final File dataFileDirectory;
1: 
1:   public Track1RecommenderEvaluator(File dataFileDirectory) {
1:     setMaxPreference(100.0f);
1:     setMinPreference(0.0f);
1:     average = new FullRunningAverage();
1:     this.dataFileDirectory = dataFileDirectory;
1:   }
1: 
1:   @Override
1:   public double evaluate(RecommenderBuilder recommenderBuilder,
1:                          DataModelBuilder dataModelBuilder,
1:                          DataModel dataModel,
1:                          double trainingPercentage,
1:                          double evaluationPercentage) throws TasteException {
1: 
1:     Recommender recommender = recommenderBuilder.buildRecommender(dataModel);
1: 
0:     Collection<Callable<Void>> estimateCallables = new ArrayList<Callable<Void>>();
1:     AtomicInteger noEstimateCounter = new AtomicInteger();
0:     for (Pair<PreferenceArray,long[]> userData :
0:          new DataFileIterable(KDDCupDataModel.getValidationFile(dataFileDirectory))) {
1:       PreferenceArray validationPrefs = userData.getFirst();
1:       long userID = validationPrefs.get(0).getUserID();
1:       estimateCallables.add(
1:           new PreferenceEstimateCallable(recommender, userID, validationPrefs, noEstimateCounter));
1:     }
1: 
0:     execute(estimateCallables, noEstimateCounter);
1: 
1:     double result = computeFinalEvaluation();
1:     log.info("Evaluation result: {}", result);
1:     return result;
1:   }
1: 
1:   // Use RMSE scoring:
1: 
1:   @Override
1:   protected void reset() {
1:     average = new FullRunningAverage();
1:   }
1: 
1:   @Override
1:   protected void processOneEstimate(float estimatedPreference, Preference realPref) {
1:     double diff = realPref.getValue() - estimatedPreference;
1:     average.addDatum(diff * diff);
1:   }
1: 
1:   @Override
1:   protected double computeFinalEvaluation() {
1:     return Math.sqrt(average.getAverage());
1:   }
1: 
1: }
============================================================================