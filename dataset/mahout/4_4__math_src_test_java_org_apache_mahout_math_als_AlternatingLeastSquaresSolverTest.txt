1:7892be3: /**
1:7892be3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7892be3:  * contributor license agreements.  See the NOTICE file distributed with
1:7892be3:  * this work for additional information regarding copyright ownership.
1:7892be3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7892be3:  * (the "License"); you may not use this file except in compliance with
1:7892be3:  * the License.  You may obtain a copy of the License at
1:7892be3:  *
1:7892be3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7892be3:  *
1:7892be3:  * Unless required by applicable law or agreed to in writing, software
1:7892be3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7892be3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7892be3:  * See the License for the specific language governing permissions and
1:7892be3:  * limitations under the License.
1:7892be3:  */
4:7892be3: 
1:7892be3: package org.apache.mahout.math.als;
1:7892be3: 
1:62b94a5: import java.util.Arrays;
1:62b94a5: 
1:62b94a5: import org.apache.mahout.math.DenseMatrix;
1:7892be3: import org.apache.mahout.math.DenseVector;
1:7892be3: import org.apache.mahout.math.MahoutTestCase;
1:7892be3: import org.apache.mahout.math.Matrix;
1:7892be3: import org.apache.mahout.math.RandomAccessSparseVector;
1:7892be3: import org.apache.mahout.math.SequentialAccessSparseVector;
1:7892be3: import org.apache.mahout.math.SparseMatrix;
1:7892be3: import org.apache.mahout.math.Vector;
1:62b94a5: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1:7892be3: import org.junit.Test;
1:7892be3: 
1:3631151: public class AlternatingLeastSquaresSolverTest extends MahoutTestCase {
1:7892be3: 
1:7892be3:   @Test
1:62b94a5:   public void testYtY() {
1:62b94a5:       
1:62b94a5:       double[][] testMatrix = new double[][] {
1:62b94a5:           new double[] { 1, 2, 3, 4, 5 },
1:62b94a5:           new double[] { 1, 2, 3, 4, 5 },
1:62b94a5:           new double[] { 1, 2, 3, 4, 5 },
1:62b94a5:           new double[] { 1, 2, 3, 4, 5 },
1:62b94a5:           new double[] { 1, 2, 3, 4, 5 }};
1:62b94a5:       
1:62b94a5:       double[][] testMatrix2 = new double[][] {
1:62b94a5:           new double[] { 1, 2, 3, 4, 5, 6 },
1:62b94a5:           new double[] { 5, 4, 3, 2, 1, 7 },
1:62b94a5:           new double[] { 1, 2, 3, 4, 5, 8 },
1:62b94a5:           new double[] { 1, 2, 3, 4, 5, 8 },
1:62b94a5:           new double[] { 11, 12, 13, 20, 27, 8 }};
1:62b94a5:       
1:62b94a5:       double[][][] testData = new double[][][] {
1:62b94a5:           testMatrix,
1:62b94a5:           testMatrix2 };
1:62b94a5:       
1:62b94a5:     for (int i = 0; i < testData.length; i++) {
1:62b94a5:       Matrix matrixToTest = new DenseMatrix(testData[i]);
1:62b94a5:       
1:62b94a5:       //test for race conditions by trying a few times
1:62b94a5:       for (int j = 0; j < 100; j++) {
1:62b94a5:         validateYtY(matrixToTest, 4);
1:62b94a5:       }
1:62b94a5:       
1:62b94a5:       //one thread @ a time test
1:62b94a5:       validateYtY(matrixToTest, 1);
1:62b94a5:     }
1:62b94a5:     
1:62b94a5:   }
1:62b94a5: 
1:62b94a5:   private void validateYtY(Matrix matrixToTest, int numThreads) {
1:62b94a5: 
1:62b94a5:     OpenIntObjectHashMap<Vector> matrixToTestAsRowVectors = asRowVectors(matrixToTest);
1:62b94a5:     ImplicitFeedbackAlternatingLeastSquaresSolver solver = new ImplicitFeedbackAlternatingLeastSquaresSolver(
1:62b94a5:         matrixToTest.columnSize(), 1, 1, matrixToTestAsRowVectors, numThreads);
1:62b94a5: 
1:62b94a5:     Matrix yTy = matrixToTest.transpose().times(matrixToTest);
1:62b94a5:     Matrix shouldMatchyTy = solver.getYtransposeY(matrixToTestAsRowVectors);
1:62b94a5:     
1:62b94a5:     for (int row = 0; row < yTy.rowSize(); row++) {
1:62b94a5:       for (int column = 0; column < yTy.columnSize(); column++) {
1:62b94a5:         assertEquals(yTy.getQuick(row, column), shouldMatchyTy.getQuick(row, column), 0);
1:62b94a5:       }
1:62b94a5:     }
1:62b94a5:   }
1:62b94a5: 
1:62b94a5:   private OpenIntObjectHashMap<Vector> asRowVectors(Matrix matrix) {
1:02ff22f:     OpenIntObjectHashMap<Vector> rows = new OpenIntObjectHashMap<>();
1:62b94a5:     for (int row = 0; row < matrix.numRows(); row++) {
1:62b94a5:       rows.put(row, matrix.viewRow(row).clone());
1:62b94a5:     }
1:62b94a5:     return rows;
1:62b94a5:   }
1:62b94a5:   
1:62b94a5:   @Test
1:7892be3:   public void addLambdaTimesNuiTimesE() {
1:7892be3:     int nui = 5;
1:7892be3:     double lambda = 0.2;
1:95f836b:     Matrix matrix = new SparseMatrix(5, 5);
1:7892be3: 
1:229aeff:     AlternatingLeastSquaresSolver.addLambdaTimesNuiTimesE(matrix, lambda, nui);
1:7892be3: 
1:7892be3:     for (int n = 0; n < 5; n++) {
1:7892be3:       assertEquals(1.0, matrix.getQuick(n, n), EPSILON);
2:7892be3:     }
1:7892be3:   }
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void createMiIi() {
1:7892be3:     Vector f1 = new DenseVector(new double[] { 1, 2, 3 });
1:7892be3:     Vector f2 = new DenseVector(new double[] { 4, 5, 6 });
1:7892be3: 
1:229aeff:     Matrix miIi = AlternatingLeastSquaresSolver.createMiIi(Arrays.asList(f1, f2), 3);
1:7892be3: 
1:7892be3:     assertEquals(1.0, miIi.getQuick(0, 0), EPSILON);
1:7892be3:     assertEquals(2.0, miIi.getQuick(1, 0), EPSILON);
1:7892be3:     assertEquals(3.0, miIi.getQuick(2, 0), EPSILON);
1:7892be3:     assertEquals(4.0, miIi.getQuick(0, 1), EPSILON);
1:7892be3:     assertEquals(5.0, miIi.getQuick(1, 1), EPSILON);
1:7892be3:     assertEquals(6.0, miIi.getQuick(2, 1), EPSILON);
1:7892be3:   }
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void createRiIiMaybeTransposed() {
1:7892be3:     Vector ratings = new SequentialAccessSparseVector(3);
1:7892be3:     ratings.setQuick(1, 1.0);
1:7892be3:     ratings.setQuick(3, 3.0);
1:7892be3:     ratings.setQuick(5, 5.0);
1:7892be3: 
1:229aeff:     Matrix riIiMaybeTransposed = AlternatingLeastSquaresSolver.createRiIiMaybeTransposed(ratings);
1:7892be3:     assertEquals(1, riIiMaybeTransposed.numCols(), 1);
1:7892be3:     assertEquals(3, riIiMaybeTransposed.numRows(), 3);
1:7892be3: 
1:7892be3:     assertEquals(1.0, riIiMaybeTransposed.getQuick(0, 0), EPSILON);
1:7892be3:     assertEquals(3.0, riIiMaybeTransposed.getQuick(1, 0), EPSILON);
1:7892be3:     assertEquals(5.0, riIiMaybeTransposed.getQuick(2, 0), EPSILON);
1:7892be3:   }
1:7892be3: 
1:7892be3:   @Test
1:7892be3:   public void createRiIiMaybeTransposedExceptionOnNonSequentialVector() {
1:7892be3:     Vector ratings = new RandomAccessSparseVector(3);
1:7892be3:     ratings.setQuick(1, 1.0);
1:7892be3:     ratings.setQuick(3, 3.0);
1:7892be3:     ratings.setQuick(5, 5.0);
1:7892be3: 
1:7892be3:     try {
1:229aeff:       AlternatingLeastSquaresSolver.createRiIiMaybeTransposed(ratings);
1:7892be3:       fail();
1:7892be3:     } catch (IllegalArgumentException e) {}
1:7892be3:   }
1:7892be3: 
1:7892be3: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     OpenIntObjectHashMap<Vector> rows = new OpenIntObjectHashMap<>();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:62b94a5
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: 
1: import org.apache.mahout.math.DenseMatrix;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.map.OpenIntObjectHashMap;
1:   public void testYtY() {
1:       
1:       double[][] testMatrix = new double[][] {
1:           new double[] { 1, 2, 3, 4, 5 },
1:           new double[] { 1, 2, 3, 4, 5 },
1:           new double[] { 1, 2, 3, 4, 5 },
1:           new double[] { 1, 2, 3, 4, 5 },
1:           new double[] { 1, 2, 3, 4, 5 }};
1:       
1:       double[][] testMatrix2 = new double[][] {
1:           new double[] { 1, 2, 3, 4, 5, 6 },
1:           new double[] { 5, 4, 3, 2, 1, 7 },
1:           new double[] { 1, 2, 3, 4, 5, 8 },
1:           new double[] { 1, 2, 3, 4, 5, 8 },
1:           new double[] { 11, 12, 13, 20, 27, 8 }};
1:       
1:       double[][][] testData = new double[][][] {
1:           testMatrix,
1:           testMatrix2 };
1:       
1:     for (int i = 0; i < testData.length; i++) {
1:       Matrix matrixToTest = new DenseMatrix(testData[i]);
1:       
1:       //test for race conditions by trying a few times
1:       for (int j = 0; j < 100; j++) {
1:         validateYtY(matrixToTest, 4);
1:       }
1:       
1:       //one thread @ a time test
1:       validateYtY(matrixToTest, 1);
1:     }
1:     
1:   }
1: 
1:   private void validateYtY(Matrix matrixToTest, int numThreads) {
1: 
1:     OpenIntObjectHashMap<Vector> matrixToTestAsRowVectors = asRowVectors(matrixToTest);
1:     ImplicitFeedbackAlternatingLeastSquaresSolver solver = new ImplicitFeedbackAlternatingLeastSquaresSolver(
1:         matrixToTest.columnSize(), 1, 1, matrixToTestAsRowVectors, numThreads);
1: 
1:     Matrix yTy = matrixToTest.transpose().times(matrixToTest);
1:     Matrix shouldMatchyTy = solver.getYtransposeY(matrixToTestAsRowVectors);
1:     
1:     for (int row = 0; row < yTy.rowSize(); row++) {
1:       for (int column = 0; column < yTy.columnSize(); column++) {
1:         assertEquals(yTy.getQuick(row, column), shouldMatchyTy.getQuick(row, column), 0);
1:       }
1:     }
1:   }
1: 
1:   private OpenIntObjectHashMap<Vector> asRowVectors(Matrix matrix) {
0:     OpenIntObjectHashMap<Vector> rows = new OpenIntObjectHashMap<Vector>();
1:     for (int row = 0; row < matrix.numRows(); row++) {
1:       rows.put(row, matrix.viewRow(row).clone());
1:     }
1:     return rows;
1:   }
1:   
1:   @Test
commit:3631151
/////////////////////////////////////////////////////////////////////////
1: public class AlternatingLeastSquaresSolverTest extends MahoutTestCase {
0:   private AlternatingLeastSquaresSolver solver;
0:     solver = new AlternatingLeastSquaresSolver();
commit:7892be3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.als;
1: 
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.MahoutTestCase;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.SequentialAccessSparseVector;
1: import org.apache.mahout.math.SparseMatrix;
1: import org.apache.mahout.math.Vector;
0: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import java.util.Arrays;
1: 
0: public class AlternateLeastSquaresSolverTest extends MahoutTestCase {
1: 
0:   AlternateLeastSquaresSolver solver;
1: 
0:   @Before
0:   public void setup() {
0:     solver = new AlternateLeastSquaresSolver();
1:   }
1: 
1:   @Test
1:   public void addLambdaTimesNuiTimesE() {
1:     int nui = 5;
1:     double lambda = 0.2;
0:     Matrix matrix = new SparseMatrix(new int[] { 5, 5 });
1: 
0:     solver.addLambdaTimesNuiTimesE(matrix, lambda, nui);
1: 
1:     for (int n = 0; n < 5; n++) {
1:       assertEquals(1.0, matrix.getQuick(n, n), EPSILON);
1:     }
1:   }
1: 
1:   @Test
1:   public void createMiIi() {
1:     Vector f1 = new DenseVector(new double[] { 1, 2, 3 });
1:     Vector f2 = new DenseVector(new double[] { 4, 5, 6 });
1: 
0:     Matrix miIi = solver.createMiIi(Arrays.asList(f1, f2), 3);
1: 
1:     assertEquals(1.0, miIi.getQuick(0, 0), EPSILON);
1:     assertEquals(2.0, miIi.getQuick(1, 0), EPSILON);
1:     assertEquals(3.0, miIi.getQuick(2, 0), EPSILON);
1:     assertEquals(4.0, miIi.getQuick(0, 1), EPSILON);
1:     assertEquals(5.0, miIi.getQuick(1, 1), EPSILON);
1:     assertEquals(6.0, miIi.getQuick(2, 1), EPSILON);
1:   }
1: 
1:   @Test
1:   public void createRiIiMaybeTransposed() {
1:     Vector ratings = new SequentialAccessSparseVector(3);
1:     ratings.setQuick(1, 1.0);
1:     ratings.setQuick(3, 3.0);
1:     ratings.setQuick(5, 5.0);
1: 
0:     Matrix riIiMaybeTransposed = solver.createRiIiMaybeTransposed(ratings);
1:     assertEquals(1, riIiMaybeTransposed.numCols(), 1);
1:     assertEquals(3, riIiMaybeTransposed.numRows(), 3);
1: 
1:     assertEquals(1.0, riIiMaybeTransposed.getQuick(0, 0), EPSILON);
1:     assertEquals(3.0, riIiMaybeTransposed.getQuick(1, 0), EPSILON);
1:     assertEquals(5.0, riIiMaybeTransposed.getQuick(2, 0), EPSILON);
1:   }
1: 
1:   @Test
1:   public void createRiIiMaybeTransposedExceptionOnNonSequentialVector() {
1:     Vector ratings = new RandomAccessSparseVector(3);
1:     ratings.setQuick(1, 1.0);
1:     ratings.setQuick(3, 3.0);
1:     ratings.setQuick(5, 5.0);
1: 
1:     try {
0:       solver.createRiIiMaybeTransposed(ratings);
1:       fail();
1:     } catch (IllegalArgumentException e) {}
1:   }
1: 
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     AlternatingLeastSquaresSolver.addLambdaTimesNuiTimesE(matrix, lambda, nui);
/////////////////////////////////////////////////////////////////////////
1:     Matrix miIi = AlternatingLeastSquaresSolver.createMiIi(Arrays.asList(f1, f2), 3);
/////////////////////////////////////////////////////////////////////////
1:     Matrix riIiMaybeTransposed = AlternatingLeastSquaresSolver.createRiIiMaybeTransposed(ratings);
/////////////////////////////////////////////////////////////////////////
1:       AlternatingLeastSquaresSolver.createRiIiMaybeTransposed(ratings);
commit:4194a28
/////////////////////////////////////////////////////////////////////////
0:   private AlternateLeastSquaresSolver solver;
0:   @Override
0:   public void setUp() throws Exception {
0:     super.setUp();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:95f836b
/////////////////////////////////////////////////////////////////////////
1:     Matrix matrix = new SparseMatrix(5, 5);
============================================================================