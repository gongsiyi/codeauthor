1:10c535c: /**
1:10c535c:  * <HTML>
1:10c535c:  * <BODY>
1:10c535c:  * Automatically growing and shrinking maps holding objects or primitive
1:10c535c:  * data types such as <tt>int</tt>, <tt>double</tt>, etc. Currently all maps are
1:10c535c:  * based upon hashing.
1:10c535c:  * <h2><a name="Overview"></a>1. Overview</h2>
1:10c535c:  * <p>The map package offers flexible object oriented abstractions modelling automatically
1:10c535c:  * resizing maps. It is designed to be scalable in terms of performance and memory
1:10c535c:  * requirements.</p>
1:10c535c:  * <p>Features include: </p>
1:10c535c:  * <p></p>
1:10c535c:  * <ul>
1:10c535c:  * <li>Maps operating on objects as well as all primitive data types such as <code>int</code>,
1:10c535c:  * <code>double</code>, etc.
1:10c535c:  * </li>
1:10c535c:  * <li>Compact representations</li>
1:10c535c:  * <li>Support for quick access to associations</li>
1:8b194c8:  * <li>A number of general purpose map operations</li>
1:10c535c:  * </ul>
1:10c535c:  * <p>File-based I/O can be achieved through the standard Java built-in serialization
1:10c535c:  * mechanism. All classes implement the {@link java.io.Serializable} interface.
1:10c535c:  * However, the toolkit is entirely decoupled from advanced I/O. It provides data
1:10c535c:  * structures and algorithms only.
1:10c535c:  * <p> This toolkit borrows some terminology from the Javasoft <a
1:10c535c:  * href="http://www.javasoft.com/products/jdk/1.2/docs/guide/collections/index.html">
1:10c535c:  * Collections framework</a> written by Josh Bloch and introduced in JDK 1.2.
1:10c535c:  * <h2>2. Introduction</h2>
1:10c535c:  * <p>A map is an associative container that manages a set of (key,value) pairs.
1:10c535c:  * It is useful for implementing a collection of one-to-one mappings. A (key,value)
1:10c535c:  * pair is called an <i>association</i>. A value can be looked up up via its key.
1:10c535c:  * Associations can quickly be set, removed and retrieved. They are stored in a
1:10c535c:  * hashing structure based on the hash code of their keys, which is obtained by
1:10c535c:  * using a hash function. </p>
1:10c535c:  * <p> A map can, for example, contain <tt>Name-->Location</tt> associations like
1:10c535c:  * <tt>{("Pete", "Geneva"), ("Steve", "Paris"), ("Robert", "New York")}</tt> used
1:10c535c:  * in address books or <tt>Index-->Value</tt> mappings like <tt>{(0, 100), (3,
1:10c535c:  * 1000), (100000, 70)}</tt> representing sparse lists or matrices. For example
1:10c535c:  * this could mean at index 0 we have a value of 100, at index 3 we have a value
1:10c535c:  * of 1000, at index 1000000 we have a value of 70, and at all other indexes we
1:10c535c:  * have a value of, say, zero. Another example is a map of IP addresses to domain
1:10c535c:  * names (DNS). Maps can also be useful to represent<i> multi sets</i>, that is,
1:10c535c:  * sets where elements can occur more than once. For multi sets one would have
1:10c535c:  * <tt>Value-->Frequency</tt> mappings like <tt>{(100, 1), (50, 1000), (101, 3))}</tt>
1:10c535c:  * meaning element 100 occurs 1 time, element 50 occurs 1000 times, element 101
1:10c535c:  * occurs 3 times. Further, maps can also manage <tt>ObjectIdentifier-->Object</tt>
1:10c535c:  * mappings like <tt>{(12, obj1), (7, obj2), (10000, obj3), (9, obj4)}</tt> used
1:10c535c:  * in Object Databases.
1:10c535c:  * <p> A map cannot contain two or more <i>equal</i> keys; a key can map to at most
1:10c535c:  * one value. However, more than one key can map to identical values. For primitive
1:10c535c:  * data types "equality" of keys is defined as identity (operator <tt>==</tt>).
1:10c535c:  * For maps using <tt>Object</tt> keys, the meaning of "equality" can be specified
1:10c535c:  * by the user upon instance construction. It can either be defined to be identity
1:10c535c:  * (operator <tt>==</tt>) or to be given by the method {@link java.lang.Object#equals(Object)}.
1:10c535c:  * Associations of kind <tt>(AnyType,Object)</tt> can be of the form <tt>(AnyKey,null)
1:10c535c:  * </tt>, i.e. values can be <tt>null</tt>.
1:10c535c:  * <p> The classes of this package make no guarantees as to the order of the elements
1:10c535c:  * returned by iterators; in particular, they do not guarantee that the order will
1:10c535c:  * remain constant over time.
1:10c535c:  * <h2></h2>
1:10c535c:  * <h4>Copying</h4>
1:10c535c:  * <p>
1:10c535c:  * <p>Any map can be copied. A copy is <i>equal</i> to the original but entirely
1:10c535c:  * independent of the original. So changes in the copy are not reflected in the
1:10c535c:  * original, and vice-versa.
1:10c535c:  * <h2>3. Package organization</h2>
1:10c535c:  * <p>For most primitive data types and for objects there exists a separate map version.
1:10c535c:  * All versions are just the same, except that they operate on different data types.
1:10c535c:  * Colt includes two kinds of implementations for maps: The two different implementations
1:10c535c:  * are tagged <b>Chained</b> and <b>Open</b>.
1:10c535c:  * Note: Chained is no more included. Wherever it is mentioned it is of historic interest only.</p>
1:10c535c:  * <ul>
1:10c535c:  * <li><b>Chained</b> uses extendible separate chaining with chains holding unsorted
1:10c535c:  * dynamically linked collision lists.
1:10c535c:  * <li><b>Open</b> uses extendible open addressing with double hashing.
1:10c535c:  * </ul>
1:10c535c:  * <p>Class naming follows the schema <tt>&lt;Implementation&gt;&lt;KeyType&gt;&lt;ValueType&gt;HashMap</tt>.
1:10c535c:  * For example, a {@link org.apache.mahout.math.map.OpenIntDoubleHashMap} holds <tt>(int-->double)</tt>
1:10c535c:  * associations and is implemented with open addressing. A {@link org.apache.mahout.math.map.OpenIntObjectHashMap}
1:10c535c:  * holds <tt>(int-->Object)</tt> associations and is implemented with open addressing.
1:10c535c:  * </p>
1:10c535c:  * <p>The classes for maps of a given (key,value) type are derived from a common
1:10c535c:  * abstract base class tagged <tt>Abstract&lt;KeyType&gt;&lt;ValueType&gt;</tt><tt>Map</tt>.
1:10c535c:  * For example, all maps operating on <tt>(int-->double)</tt> associations are
1:10c535c:  * derived from {@link org.apache.mahout.math.map.AbstractIntDoubleMap}, which in turn is derived
1:10c535c:  * from an abstract base class tying together all maps regardless of assocation
1:10c535c:  * type, {@link org.apache.mahout.math.set.AbstractSet}. The abstract base classes provide skeleton
1:10c535c:  * implementations for all but few methods. Experimental layouts (such as chaining,
1:10c535c:  * open addressing, extensible hashing, red-black-trees, etc.) can easily be implemented
1:10c535c:  * and inherit a rich set of functionality. Have a look at the javadoc <a href="package-tree.html">tree
1:10c535c:  * view</a> to get the broad picture.</p>
1:10c535c:  * <h2>4. Example usage</h2>
1:10c535c:  * <TABLE>
1:10c535c:  * <TD CLASS="PRE">
1:10c535c:  * <PRE>
1:10c535c:  * int[]    keys   = {0    , 3     , 100000, 9   };
1:10c535c:  * double[] values = {100.0, 1000.0, 70.0  , 71.0};
1:10c535c:  * AbstractIntDoubleMap map = new OpenIntDoubleHashMap();
1:10c535c:  * // add several associations
1:10c535c:  * for (int i=0; i &lt; keys.length; i++) map.put(keys[i], values[i]);
1:10c535c:  * log.info("map="+map);
1:10c535c:  * log.info("size="+map.size());
1:10c535c:  * log.info(map.containsKey(3));
1:10c535c:  * log.info("get(3)="+map.get(3));
1:10c535c:  * log.info(map.containsKey(4));
1:10c535c:  * log.info("get(4)="+map.get(4));
1:10c535c:  * log.info(map.containsValue(71.0));
1:10c535c:  * log.info("keyOf(71.0)="+map.keyOf(71.0));
1:10c535c:  * // remove one association
1:10c535c:  * map.removeKey(3);
1:10c535c:  * log.info("\nmap="+map);
1:10c535c:  * log.info(map.containsKey(3));
1:10c535c:  * log.info("get(3)="+map.get(3));
1:10c535c:  * log.info(map.containsValue(1000.0));
1:10c535c:  * log.info("keyOf(1000.0)="+map.keyOf(1000.0));
1:10c535c:  * // clear
1:10c535c:  * map.clear();
1:10c535c:  * log.info("\nmap="+map);
1:10c535c:  * log.info("size="+map.size());
1:10c535c:  * </PRE>
1:10c535c:  * </TD>
1:10c535c:  * </TABLE>
1:10c535c:  * yields the following output
1:10c535c:  * <TABLE>
1:10c535c:  * <TD CLASS="PRE">
1:10c535c:  * <PRE>
1:10c535c:  * map=[0->100.0, 3->1000.0, 9->71.0, 100000->70.0]
1:10c535c:  * size=4
1:10c535c:  * true
1:10c535c:  * get(3)=1000.0
1:10c535c:  * false
1:10c535c:  * get(4)=0.0
1:10c535c:  * true
1:10c535c:  * keyOf(71.0)=9
1:10c535c:  * map=[0->100.0, 9->71.0, 100000->70.0]
1:10c535c:  * false
1:10c535c:  * get(3)=0.0
1:10c535c:  * false
1:10c535c:  * keyOf(1000.0)=-2147483648
1:10c535c:  * map=[]
1:10c535c:  * size=0
1:10c535c:  * </PRE>
1:10c535c:  * </TD>
1:10c535c:  * </TABLE>
1:10c535c:  * <h2> 5. Notes </h2>
1:10c535c:  * <p>
1:10c535c:  * Note that implementations are not synchronized.
1:10c535c:  * <p>
1:10c535c:  * Choosing efficient parameters for hash maps is not always easy.
1:10c535c:  * However, since parameters determine efficiency and memory requirements, here is a quick guide how to choose them.
1:10c535c:  * If your use case does not heavily operate on hash maps but uses them just because they provide
1:10c535c:  * convenient functionality, you can safely skip this section.
1:10c535c:  * For those of you who care, read on.
1:10c535c:  * <p>
1:10c535c:  * There are three parameters that can be customized upon map construction: <tt>initialCapacity</tt>,
1:10c535c:  * <tt>minLoadFactor</tt> and <tt>maxLoadFactor</tt>.
1:10c535c:  * The more memory one can afford, the faster a hash map.
1:10c535c:  * The hash map's capacity is the maximum number of associations that can be added without needing to allocate new
1:10c535c:  * internal memory.
1:10c535c:  * A larger capacity means faster adding, searching and removing.
1:10c535c:  * The <tt>initialCapacity</tt> corresponds to the capacity used upon instance construction.
1:10c535c:  * <p>
1:10c535c:  * The <tt>loadFactor</tt> of a hash map measures the degree of "fullness".
1:10c535c:  * It is given by the number of assocations (<tt>size()</tt>)
1:10c535c:  * divided by the hash map capacity <tt>(0.0 &lt;= loadFactor &lt;= 1.0)</tt>.
1:10c535c:  * The more associations are added, the larger the loadFactor and the more hash map performance degrades.
1:10c535c:  * Therefore, when the loadFactor exceeds a customizable threshold (<tt>maxLoadFactor</tt>), the hash map is
1:10c535c:  * automatically grown.
1:10c535c:  * In such a way performance degradation can be avoided.
1:10c535c:  * Similarly, when the loadFactor falls below a customizable threshold (<tt>minLoadFactor</tt>), the hash map is
1:10c535c:  * automatically shrinked.
1:10c535c:  * In such a way excessive memory consumption can be avoided.
1:10c535c:  * Automatic resizing (both growing and shrinking) obeys the following invariant:
1:10c535c:  * <p>
1:10c535c:  * <tt>capacity * minLoadFactor <= size() <= capacity * maxLoadFactor</tt>
1:10c535c:  * <p> The term <tt>capacity * minLoadFactor</tt> is called the <i>low water mark</i>,
1:10c535c:  * <tt>capacity * maxLoadFactor</tt> is called the <i>high water mark</i>. In other
1:10c535c:  * words, the number of associations may vary within the water mark constraints.
1:10c535c:  * When it goes out of range, the map is automatically resized and memory consumption
1:10c535c:  * changes proportionally.
1:10c535c:  * <ul>
1:6d16230:  * <li>To tune for memory at the expense of performance, both increase <tt>minLoadFactor</tt> and
1:6d16230:  * <tt>maxLoadFactor</tt>.
1:6d16230:  * <li>To tune for performance at the expense of memory, both decrease <tt>minLoadFactor</tt> and
1:6d16230:  * <tt>maxLoadFactor</tt>.
1:10c535c:  * As as special case set <tt>minLoadFactor=0</tt> to avoid any automatic shrinking.
1:10c535c:  * </ul>
1:10c535c:  * Resizing large hash maps can be time consuming, <tt>O(size())</tt>, and should be avoided if possible (maintaining
1:10c535c:  * primes is not the reason).
1:8b194c8:  * Unnecessary growing operations can be avoided if the number of associations is known before they are added, or can be
1:10c535c:  * estimated.<p>
1:10c535c:  * In such a case good parameters are as follows:
1:10c535c:  * <p>
1:10c535c:  * <i>For chaining:</i>
1:10c535c:  * <br>Set the <tt>initialCapacity = 1.4*expectedSize</tt> or greater.
1:10c535c:  * <br>Set the <tt>maxLoadFactor = 0.8</tt> or greater.
1:10c535c:  * <p>
1:10c535c:  * <i>For open addressing:</i>
1:10c535c:  * <br>Set the <tt>initialCapacity = 2*expectedSize</tt> or greater. Alternatively call <tt>ensureCapacity(...)</tt>.
1:10c535c:  * <br>Set the <tt>maxLoadFactor = 0.5</tt>.
1:10c535c:  * <br>Never set <tt>maxLoadFactor &gt; 0.55</tt>; open addressing exponentially slows down beyond that point.
1:10c535c:  * <p>
1:10c535c:  * In this way the hash map will never need to grow and still stay fast.
1:10c535c:  * It is never a good idea to set <tt>maxLoadFactor &lt; 0.1</tt>,
1:10c535c:  * because the hash map would grow too often.
1:10c535c:  * If it is entirelly unknown how many associations the application will use,
1:10c535c:  * the default constructor should be used. The map will grow and shrink as needed.
1:10c535c:  * <p>
1:10c535c:  * <b>Comparision of chaining and open addressing</b>
1:10c535c:  * <p> Chaining is faster than open addressing, when assuming unconstrained memory
1:10c535c:  * consumption. Open addressing is more space efficient than chaining, because
1:10c535c:  * it does not create entry objects but uses primitive arrays which are considerably
1:10c535c:  * smaller. Entry objects consume significant amounts of memory compared to the
1:10c535c:  * information they actually hold. Open addressing also poses no problems to the
1:10c535c:  * garbage collector. In contrast, chaining can create millions of entry objects
1:10c535c:  * which are linked; a nightmare for any garbage collector. In addition, entry
1:10c535c:  * object creation is a bit slow. <br>
1:10c535c:  * Therefore, with the same amount of memory, or even less memory, hash maps with
1:10c535c:  * larger capacity can be maintained under open addressing, which yields smaller
1:10c535c:  * loadFactors, which in turn keeps performance competitive with chaining. In our
1:10c535c:  * benchmarks, using significantly less memory, open addressing usually is not
1:10c535c:  * more than 1.2-1.5 times slower than chaining.
1:10c535c:  * <p><b>Further readings</b>:
1:10c535c:  * <br>Knuth D., The Art of Computer Programming: Searching and Sorting, 3rd ed.
1:6d16230:  * <br>Griswold W., Townsend G., The Design and Implementation of Dynamic Hashing for Sets and Tables in Icon,
1:6d16230:  * Software - Practice and Experience, Vol. 23(4), 351-367 (April 1993).
1:10c535c:  * <br>Larson P., Dynamic hash tables, Comm. of the ACM, 31, (4), 1988.
1:10c535c:  * <p>
1:10c535c:  * <b>Performance:</b>
1:10c535c:  * <p>
1:10c535c:  * Time complexity:
1:8b194c8:  * <br>The classes offer <i>expected</i> time complexity <tt>O(1)</tt> (i.e. constant time) for the basic operations
1:10c535c:  * <tt>put</tt>, <tt>get</tt>, <tt>removeKey</tt>, <tt>containsKey</tt> and <tt>size</tt>,
1:10c535c:  * assuming the hash function disperses the elements properly among the buckets.
1:10c535c:  * Otherwise, pathological cases, although highly improbable, can occur, degrading performance to <tt>O(N)</tt> in the
1:10c535c:  * worst case.
1:10c535c:  * Operations <tt>containsValue</tt> and <tt>keyOf</tt> are <tt>O(N)</tt>.
1:10c535c:  * <p>
1:10c535c:  * Memory requirements for <i>open addressing</i>:
1:10c535c:  * <br>worst case: <tt>memory [bytes] = (1/minLoadFactor) * size() * (1 + sizeOf(key) + sizeOf(value))</tt>.
1:10c535c:  * <br>best case: <tt>memory [bytes] = (1/maxLoadFactor) * size() * (1 + sizeOf(key) + sizeOf(value))</tt>.
1:10c535c:  * Where <tt>sizeOf(int) = 4</tt>, <tt>sizeOf(double) = 8</tt>, <tt>sizeOf(Object) = 4</tt>, etc.
1:10c535c:  * Thus, an <tt>OpenIntIntHashMap</tt> with minLoadFactor=0.25 and maxLoadFactor=0.5 and 1000000 associations uses
1:10c535c:  * between 17 MB and 34 MB.
1:10c535c:  * The same map with 1000 associations uses between 17 and 34 KB.
1:10c535c:  * <p>
1:10c535c:  * </BODY>
1:10c535c:  * </HTML>
1:10c535c:  */
1:6d16230: package org.apache.mahout.math.map;
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:8b194c8
/////////////////////////////////////////////////////////////////////////
1:  * <li>A number of general purpose map operations</li>
/////////////////////////////////////////////////////////////////////////
1:  * Unnecessary growing operations can be avoided if the number of associations is known before they are added, or can be
/////////////////////////////////////////////////////////////////////////
1:  * <br>The classes offer <i>expected</i> time complexity <tt>O(1)</tt> (i.e. constant time) for the basic operations
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
0:  * <li>A number of general purpose map OPERATIONS</li>
/////////////////////////////////////////////////////////////////////////
0:  * Unnecessary growing OPERATIONS can be avoided if the number of associations is known before they are added, or can be
/////////////////////////////////////////////////////////////////////////
0:  * <br>The classes offer <i>expected</i> time complexity <tt>O(1)</tt> (i.e. constant time) for the basic OPERATIONS
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:  * <li>To tune for memory at the expense of performance, both increase <tt>minLoadFactor</tt> and
1:  * <tt>maxLoadFactor</tt>.
1:  * <li>To tune for performance at the expense of memory, both decrease <tt>minLoadFactor</tt> and
1:  * <tt>maxLoadFactor</tt>.
/////////////////////////////////////////////////////////////////////////
1:  * <br>Griswold W., Townsend G., The Design and Implementation of Dynamic Hashing for Sets and Tables in Icon,
1:  * Software - Practice and Experience, Vol. 23(4), 351-367 (April 1993).
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.map;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * <HTML>
1:  * <BODY>
1:  * Automatically growing and shrinking maps holding objects or primitive
1:  * data types such as <tt>int</tt>, <tt>double</tt>, etc. Currently all maps are
1:  * based upon hashing.
1:  * <h2><a name="Overview"></a>1. Overview</h2>
1:  * <p>The map package offers flexible object oriented abstractions modelling automatically
1:  * resizing maps. It is designed to be scalable in terms of performance and memory
1:  * requirements.</p>
1:  * <p>Features include: </p>
1:  * <p></p>
1:  * <ul>
1:  * <li>Maps operating on objects as well as all primitive data types such as <code>int</code>,
1:  * <code>double</code>, etc.
1:  * </li>
1:  * <li>Compact representations</li>
1:  * <li>Support for quick access to associations</li>
0:  * <li>A number of general purpose map operations</li>
1:  * </ul>
1:  * <p>File-based I/O can be achieved through the standard Java built-in serialization
1:  * mechanism. All classes implement the {@link java.io.Serializable} interface.
1:  * However, the toolkit is entirely decoupled from advanced I/O. It provides data
1:  * structures and algorithms only.
1:  * <p> This toolkit borrows some terminology from the Javasoft <a
1:  * href="http://www.javasoft.com/products/jdk/1.2/docs/guide/collections/index.html">
1:  * Collections framework</a> written by Josh Bloch and introduced in JDK 1.2.
1:  * <h2>2. Introduction</h2>
1:  * <p>A map is an associative container that manages a set of (key,value) pairs.
1:  * It is useful for implementing a collection of one-to-one mappings. A (key,value)
1:  * pair is called an <i>association</i>. A value can be looked up up via its key.
1:  * Associations can quickly be set, removed and retrieved. They are stored in a
1:  * hashing structure based on the hash code of their keys, which is obtained by
1:  * using a hash function. </p>
1:  * <p> A map can, for example, contain <tt>Name-->Location</tt> associations like
1:  * <tt>{("Pete", "Geneva"), ("Steve", "Paris"), ("Robert", "New York")}</tt> used
1:  * in address books or <tt>Index-->Value</tt> mappings like <tt>{(0, 100), (3,
1:  * 1000), (100000, 70)}</tt> representing sparse lists or matrices. For example
1:  * this could mean at index 0 we have a value of 100, at index 3 we have a value
1:  * of 1000, at index 1000000 we have a value of 70, and at all other indexes we
1:  * have a value of, say, zero. Another example is a map of IP addresses to domain
1:  * names (DNS). Maps can also be useful to represent<i> multi sets</i>, that is,
1:  * sets where elements can occur more than once. For multi sets one would have
1:  * <tt>Value-->Frequency</tt> mappings like <tt>{(100, 1), (50, 1000), (101, 3))}</tt>
1:  * meaning element 100 occurs 1 time, element 50 occurs 1000 times, element 101
1:  * occurs 3 times. Further, maps can also manage <tt>ObjectIdentifier-->Object</tt>
1:  * mappings like <tt>{(12, obj1), (7, obj2), (10000, obj3), (9, obj4)}</tt> used
1:  * in Object Databases.
1:  * <p> A map cannot contain two or more <i>equal</i> keys; a key can map to at most
1:  * one value. However, more than one key can map to identical values. For primitive
1:  * data types "equality" of keys is defined as identity (operator <tt>==</tt>).
1:  * For maps using <tt>Object</tt> keys, the meaning of "equality" can be specified
1:  * by the user upon instance construction. It can either be defined to be identity
1:  * (operator <tt>==</tt>) or to be given by the method {@link java.lang.Object#equals(Object)}.
1:  * Associations of kind <tt>(AnyType,Object)</tt> can be of the form <tt>(AnyKey,null)
1:  * </tt>, i.e. values can be <tt>null</tt>.
1:  * <p> The classes of this package make no guarantees as to the order of the elements
1:  * returned by iterators; in particular, they do not guarantee that the order will
1:  * remain constant over time.
1:  * <h2></h2>
1:  * <h4>Copying</h4>
1:  * <p>
1:  * <p>Any map can be copied. A copy is <i>equal</i> to the original but entirely
1:  * independent of the original. So changes in the copy are not reflected in the
1:  * original, and vice-versa.
1:  * <h2>3. Package organization</h2>
1:  * <p>For most primitive data types and for objects there exists a separate map version.
1:  * All versions are just the same, except that they operate on different data types.
1:  * Colt includes two kinds of implementations for maps: The two different implementations
1:  * are tagged <b>Chained</b> and <b>Open</b>.
1:  * Note: Chained is no more included. Wherever it is mentioned it is of historic interest only.</p>
1:  * <ul>
1:  * <li><b>Chained</b> uses extendible separate chaining with chains holding unsorted
1:  * dynamically linked collision lists.
1:  * <li><b>Open</b> uses extendible open addressing with double hashing.
1:  * </ul>
1:  * <p>Class naming follows the schema <tt>&lt;Implementation&gt;&lt;KeyType&gt;&lt;ValueType&gt;HashMap</tt>.
1:  * For example, a {@link org.apache.mahout.math.map.OpenIntDoubleHashMap} holds <tt>(int-->double)</tt>
1:  * associations and is implemented with open addressing. A {@link org.apache.mahout.math.map.OpenIntObjectHashMap}
1:  * holds <tt>(int-->Object)</tt> associations and is implemented with open addressing.
1:  * </p>
1:  * <p>The classes for maps of a given (key,value) type are derived from a common
1:  * abstract base class tagged <tt>Abstract&lt;KeyType&gt;&lt;ValueType&gt;</tt><tt>Map</tt>.
1:  * For example, all maps operating on <tt>(int-->double)</tt> associations are
1:  * derived from {@link org.apache.mahout.math.map.AbstractIntDoubleMap}, which in turn is derived
1:  * from an abstract base class tying together all maps regardless of assocation
1:  * type, {@link org.apache.mahout.math.set.AbstractSet}. The abstract base classes provide skeleton
1:  * implementations for all but few methods. Experimental layouts (such as chaining,
1:  * open addressing, extensible hashing, red-black-trees, etc.) can easily be implemented
1:  * and inherit a rich set of functionality. Have a look at the javadoc <a href="package-tree.html">tree
1:  * view</a> to get the broad picture.</p>
1:  * <h2>4. Example usage</h2>
1:  * <TABLE>
1:  * <TD CLASS="PRE">
1:  * <PRE>
1:  * int[]    keys   = {0    , 3     , 100000, 9   };
1:  * double[] values = {100.0, 1000.0, 70.0  , 71.0};
1:  * AbstractIntDoubleMap map = new OpenIntDoubleHashMap();
1:  * // add several associations
1:  * for (int i=0; i &lt; keys.length; i++) map.put(keys[i], values[i]);
1:  * log.info("map="+map);
1:  * log.info("size="+map.size());
1:  * log.info(map.containsKey(3));
1:  * log.info("get(3)="+map.get(3));
1:  * log.info(map.containsKey(4));
1:  * log.info("get(4)="+map.get(4));
1:  * log.info(map.containsValue(71.0));
1:  * log.info("keyOf(71.0)="+map.keyOf(71.0));
1:  * // remove one association
1:  * map.removeKey(3);
1:  * log.info("\nmap="+map);
1:  * log.info(map.containsKey(3));
1:  * log.info("get(3)="+map.get(3));
1:  * log.info(map.containsValue(1000.0));
1:  * log.info("keyOf(1000.0)="+map.keyOf(1000.0));
1:  * // clear
1:  * map.clear();
1:  * log.info("\nmap="+map);
1:  * log.info("size="+map.size());
1:  * </PRE>
1:  * </TD>
1:  * </TABLE>
1:  * yields the following output
1:  * <TABLE>
1:  * <TD CLASS="PRE">
1:  * <PRE>
1:  * map=[0->100.0, 3->1000.0, 9->71.0, 100000->70.0]
1:  * size=4
1:  * true
1:  * get(3)=1000.0
1:  * false
1:  * get(4)=0.0
1:  * true
1:  * keyOf(71.0)=9
1:  * map=[0->100.0, 9->71.0, 100000->70.0]
1:  * false
1:  * get(3)=0.0
1:  * false
1:  * keyOf(1000.0)=-2147483648
1:  * map=[]
1:  * size=0
1:  * </PRE>
1:  * </TD>
1:  * </TABLE>
1:  * <h2> 5. Notes </h2>
1:  * <p>
1:  * Note that implementations are not synchronized.
1:  * <p>
1:  * Choosing efficient parameters for hash maps is not always easy.
1:  * However, since parameters determine efficiency and memory requirements, here is a quick guide how to choose them.
1:  * If your use case does not heavily operate on hash maps but uses them just because they provide
1:  * convenient functionality, you can safely skip this section.
1:  * For those of you who care, read on.
1:  * <p>
1:  * There are three parameters that can be customized upon map construction: <tt>initialCapacity</tt>,
1:  * <tt>minLoadFactor</tt> and <tt>maxLoadFactor</tt>.
1:  * The more memory one can afford, the faster a hash map.
1:  * The hash map's capacity is the maximum number of associations that can be added without needing to allocate new
1:  * internal memory.
1:  * A larger capacity means faster adding, searching and removing.
1:  * The <tt>initialCapacity</tt> corresponds to the capacity used upon instance construction.
1:  * <p>
1:  * The <tt>loadFactor</tt> of a hash map measures the degree of "fullness".
1:  * It is given by the number of assocations (<tt>size()</tt>)
1:  * divided by the hash map capacity <tt>(0.0 &lt;= loadFactor &lt;= 1.0)</tt>.
1:  * The more associations are added, the larger the loadFactor and the more hash map performance degrades.
1:  * Therefore, when the loadFactor exceeds a customizable threshold (<tt>maxLoadFactor</tt>), the hash map is
1:  * automatically grown.
1:  * In such a way performance degradation can be avoided.
1:  * Similarly, when the loadFactor falls below a customizable threshold (<tt>minLoadFactor</tt>), the hash map is
1:  * automatically shrinked.
1:  * In such a way excessive memory consumption can be avoided.
1:  * Automatic resizing (both growing and shrinking) obeys the following invariant:
1:  * <p>
1:  * <tt>capacity * minLoadFactor <= size() <= capacity * maxLoadFactor</tt>
1:  * <p> The term <tt>capacity * minLoadFactor</tt> is called the <i>low water mark</i>,
1:  * <tt>capacity * maxLoadFactor</tt> is called the <i>high water mark</i>. In other
1:  * words, the number of associations may vary within the water mark constraints.
1:  * When it goes out of range, the map is automatically resized and memory consumption
1:  * changes proportionally.
1:  * <ul>
0:  * <li>To tune for memory at the expense of performance, both increase <tt>minLoadFactor</tt> and <tt>maxLoadFactor</tt>.
0:  * <li>To tune for performance at the expense of memory, both decrease <tt>minLoadFactor</tt> and <tt>maxLoadFactor</tt>.
1:  * As as special case set <tt>minLoadFactor=0</tt> to avoid any automatic shrinking.
1:  * </ul>
1:  * Resizing large hash maps can be time consuming, <tt>O(size())</tt>, and should be avoided if possible (maintaining
1:  * primes is not the reason).
0:  * Unnecessary growing operations can be avoided if the number of associations is known before they are added, or can be
1:  * estimated.<p>
1:  * In such a case good parameters are as follows:
1:  * <p>
1:  * <i>For chaining:</i>
1:  * <br>Set the <tt>initialCapacity = 1.4*expectedSize</tt> or greater.
1:  * <br>Set the <tt>maxLoadFactor = 0.8</tt> or greater.
1:  * <p>
1:  * <i>For open addressing:</i>
1:  * <br>Set the <tt>initialCapacity = 2*expectedSize</tt> or greater. Alternatively call <tt>ensureCapacity(...)</tt>.
1:  * <br>Set the <tt>maxLoadFactor = 0.5</tt>.
1:  * <br>Never set <tt>maxLoadFactor &gt; 0.55</tt>; open addressing exponentially slows down beyond that point.
1:  * <p>
1:  * In this way the hash map will never need to grow and still stay fast.
1:  * It is never a good idea to set <tt>maxLoadFactor &lt; 0.1</tt>,
1:  * because the hash map would grow too often.
1:  * If it is entirelly unknown how many associations the application will use,
1:  * the default constructor should be used. The map will grow and shrink as needed.
1:  * <p>
1:  * <b>Comparision of chaining and open addressing</b>
1:  * <p> Chaining is faster than open addressing, when assuming unconstrained memory
1:  * consumption. Open addressing is more space efficient than chaining, because
1:  * it does not create entry objects but uses primitive arrays which are considerably
1:  * smaller. Entry objects consume significant amounts of memory compared to the
1:  * information they actually hold. Open addressing also poses no problems to the
1:  * garbage collector. In contrast, chaining can create millions of entry objects
1:  * which are linked; a nightmare for any garbage collector. In addition, entry
1:  * object creation is a bit slow. <br>
1:  * Therefore, with the same amount of memory, or even less memory, hash maps with
1:  * larger capacity can be maintained under open addressing, which yields smaller
1:  * loadFactors, which in turn keeps performance competitive with chaining. In our
1:  * benchmarks, using significantly less memory, open addressing usually is not
1:  * more than 1.2-1.5 times slower than chaining.
1:  * <p><b>Further readings</b>:
1:  * <br>Knuth D., The Art of Computer Programming: Searching and Sorting, 3rd ed.
0:  * <br>Griswold W., Townsend G., The Design and Implementation of Dynamic Hashing for Sets and Tables in Icon, Software -
0:  * Practice and Experience, Vol. 23(4), 351-367 (April 1993).
1:  * <br>Larson P., Dynamic hash tables, Comm. of the ACM, 31, (4), 1988.
1:  * <p>
1:  * <b>Performance:</b>
1:  * <p>
1:  * Time complexity:
0:  * <br>The classes offer <i>expected</i> time complexity <tt>O(1)</tt> (i.e. constant time) for the basic operations
1:  * <tt>put</tt>, <tt>get</tt>, <tt>removeKey</tt>, <tt>containsKey</tt> and <tt>size</tt>,
1:  * assuming the hash function disperses the elements properly among the buckets.
1:  * Otherwise, pathological cases, although highly improbable, can occur, degrading performance to <tt>O(N)</tt> in the
1:  * worst case.
1:  * Operations <tt>containsValue</tt> and <tt>keyOf</tt> are <tt>O(N)</tt>.
1:  * <p>
1:  * Memory requirements for <i>open addressing</i>:
1:  * <br>worst case: <tt>memory [bytes] = (1/minLoadFactor) * size() * (1 + sizeOf(key) + sizeOf(value))</tt>.
1:  * <br>best case: <tt>memory [bytes] = (1/maxLoadFactor) * size() * (1 + sizeOf(key) + sizeOf(value))</tt>.
1:  * Where <tt>sizeOf(int) = 4</tt>, <tt>sizeOf(double) = 8</tt>, <tt>sizeOf(Object) = 4</tt>, etc.
1:  * Thus, an <tt>OpenIntIntHashMap</tt> with minLoadFactor=0.25 and maxLoadFactor=0.5 and 1000000 associations uses
1:  * between 17 MB and 34 MB.
1:  * The same map with 1000 associations uses between 17 and 34 KB.
1:  * <p>
1:  * </BODY>
1:  * </HTML>
1:  */
0: package org.apache.mahout.math.map;
============================================================================