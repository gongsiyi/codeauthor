1:763433c: /*
1:763433c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:763433c:  * contributor license agreements.  See the NOTICE file distributed with
1:763433c:  * this work for additional information regarding copyright ownership.
1:763433c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:763433c:  * (the "License"); you may not use this file except in compliance with
1:763433c:  * the License.  You may obtain a copy of the License at
1:763433c:  *
1:763433c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:763433c:  *
1:763433c:  * Unless required by applicable law or agreed to in writing, software
1:763433c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:763433c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:763433c:  * See the License for the specific language governing permissions and
1:763433c:  * limitations under the License.
1:763433c:  */
1:763433c: 
1:763433c: package org.apache.mahout.math.stats;
1:763433c: 
1:763433c: import org.apache.mahout.common.RandomUtils;
1:b16c260: import org.apache.mahout.math.MahoutTestCase;
1:763433c: import org.apache.mahout.math.jet.random.Poisson;
1:763433c: import org.junit.Test;
1:763433c: 
1:763433c: import java.util.Random;
1:763433c: 
1:b16c260: public class OnlineExponentialAverageTest extends MahoutTestCase {
1:763433c:   @Test
1:763433c:   public void testAverage() {
1:763433c:     double[] t = {11.35718, 21.54637, 28.91061, 33.03586, 39.57767};
1:763433c:     double[] x = {1.5992071, -1.3577032, -0.3405638, 0.7048632, 0.3020558};
1:763433c:     double[] m = {1.5992071, -1.0168100, -0.4797436, 0.2836447, 0.2966159};
1:763433c: 
1:763433c:     OnlineExponentialAverage averager = new OnlineExponentialAverage(5);
1:763433c: 
1:763433c:     for (int i = 0; i < t.length; i++) {
1:763433c:       averager.add(t[i], x[i]);
1:b16c260:       assertEquals("Step " + i, m[i], averager.mean(), 1.0e-6);
1:763433c:     }
1:763433c:   }
1:763433c: 
1:763433c:   @Test
1:763433c:   public void testRate() {
1:763433c:     Random gen = RandomUtils.getRandom();
1:763433c: 
1:763433c:     Poisson p = new Poisson(5, gen);
1:763433c:     double lastT = 0;
1:763433c: 
1:763433c:     double[] k = new double[1000];
1:763433c:     double[] t = new double[1000];
1:763433c:     for (int i = 1; i < 1000; i++) {
1:763433c:       // we sample every 5-15 seconds
1:763433c:       double dt = gen.nextDouble() * 10 + 5;
1:763433c:       t[i] = lastT + dt;
1:763433c: 
1:763433c:       // at those points, we get a Poisson count
1:b16c260:       k[i] = p.nextInt(dt * 0.2);
1:763433c:       lastT = t[i];
1:763433c:     }
1:763433c: 
1:763433c:     OnlineExponentialAverage averager = new OnlineExponentialAverage(2000);
1:763433c: 
1:763433c:     for (int i = 1; i < 1000; i++) {
1:763433c:       averager.add(t[i], k[i]);
1:763433c:     }
1:763433c: 
1:b16c260:     assertEquals("Expected rate", 0.2, averager.meanRate(), 0.01);
1:763433c:   }
1:763433c: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:b16c260
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MahoutTestCase;
1: public class OnlineExponentialAverageTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:       assertEquals("Step " + i, m[i], averager.mean(), 1.0e-6);
/////////////////////////////////////////////////////////////////////////
1:       k[i] = p.nextInt(dt * 0.2);
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("Expected rate", 0.2, averager.meanRate(), 0.01);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:763433c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.stats;
1: 
0: import junit.framework.TestCase;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.math.jet.random.Poisson;
1: import org.junit.Test;
1: 
1: import java.util.Random;
1: 
0: public class OnlineExponentialAverageTest extends TestCase {
1:   @Test
1:   public void testAverage() {
1:     double[] t = {11.35718, 21.54637, 28.91061, 33.03586, 39.57767};
1:     double[] x = {1.5992071, -1.3577032, -0.3405638, 0.7048632, 0.3020558};
1:     double[] m = {1.5992071, -1.0168100, -0.4797436, 0.2836447, 0.2966159};
1: 
1:     OnlineExponentialAverage averager = new OnlineExponentialAverage(5);
1: 
1:     for (int i = 0; i < t.length; i++) {
1:       averager.add(t[i], x[i]);
0:       assertEquals("Step " + i, m[i], averager.mean(), 1e-6);
1:     }
1:   }
1: 
1:   @Test
1:   public void testRate() {
1:     Random gen = RandomUtils.getRandom();
1: 
1:     Poisson p = new Poisson(5, gen);
1:     double lastT = 0;
1: 
1:     double[] k = new double[1000];
1:     double[] t = new double[1000];
1:     for (int i = 1; i < 1000; i++) {
1:       // we sample every 5-15 seconds
1:       double dt = gen.nextDouble() * 10 + 5;
1:       t[i] = lastT + dt;
1: 
1:       // at those points, we get a Poisson count
0:       k[i] = p.nextInt(dt * .2);
1:       lastT = t[i];
1:     }
1: 
1:     OnlineExponentialAverage averager = new OnlineExponentialAverage(2000);
1: 
1:     for (int i = 1; i < 1000; i++) {
1:       averager.add(t[i], k[i]);
1:     }
1: 
0:     assertEquals("Expected rate", .2, averager.meanRate(), 0.01);
1:   }
1: }
============================================================================