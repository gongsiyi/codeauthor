1:a66f1a8: /**
1:a66f1a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a66f1a8:  * contributor license agreements.  See the NOTICE file distributed with
1:a66f1a8:  * this work for additional information regarding copyright ownership.
1:a66f1a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a66f1a8:  * (the "License"); you may not use this file except in compliance with
1:a66f1a8:  * the License.  You may obtain a copy of the License at
1:a66f1a8:  *
1:a66f1a8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a66f1a8:  *
1:a66f1a8:  * Unless required by applicable law or agreed to in writing, software
1:a66f1a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a66f1a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a66f1a8:  * See the License for the specific language governing permissions and
1:a66f1a8:  * limitations under the License.
1:a66f1a8:  */
2:a66f1a8: 
1:a66f1a8: package org.apache.mahout.cf.taste.impl.common;
1:a66f1a8: 
1:210b265: import com.google.common.collect.Sets;
1:a66f1a8: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:da03b23: import org.apache.mahout.common.RandomUtils;
1:ff79ff4: import org.junit.Test;
1:a66f1a8: 
1:a66f1a8: import java.util.Collection;
1:a66f1a8: import java.util.Random;
1:a66f1a8: 
1:a66f1a8: /** <p>Tests {@link FastIDSet}.</p> */
1:a66f1a8: public final class FastIDSetTest extends TasteTestCase {
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testContainsAndAdd() {
1:a66f1a8:     FastIDSet set = new FastIDSet();
1:a66f1a8:     assertFalse(set.contains(1));
1:a66f1a8:     set.add(1);
1:a66f1a8:     assertTrue(set.contains(1));
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testRemove() {
1:a66f1a8:     FastIDSet set = new FastIDSet();
1:a66f1a8:     set.add(1);
1:a66f1a8:     set.remove(1);
1:a66f1a8:     assertEquals(0, set.size());
1:a66f1a8:     assertTrue(set.isEmpty());
1:a66f1a8:     assertFalse(set.contains(1));
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testClear() {
1:a66f1a8:     FastIDSet set = new FastIDSet();
1:a66f1a8:     set.add(1);
1:a66f1a8:     set.clear();
1:a66f1a8:     assertEquals(0, set.size());
1:a66f1a8:     assertTrue(set.isEmpty());
1:a66f1a8:     assertFalse(set.contains(1));
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testSizeEmpty() {
1:a66f1a8:     FastIDSet set = new FastIDSet();
1:a66f1a8:     assertEquals(0, set.size());
1:a66f1a8:     assertTrue(set.isEmpty());
1:a66f1a8:     set.add(1);
1:a66f1a8:     assertEquals(1, set.size());
1:a66f1a8:     assertFalse(set.isEmpty());
1:a66f1a8:     set.remove(1);
1:a66f1a8:     assertEquals(0, set.size());
1:a66f1a8:     assertTrue(set.isEmpty());
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testContains() {
1:a66f1a8:     FastIDSet set = buildTestFastSet();
1:a66f1a8:     assertTrue(set.contains(1));
1:a66f1a8:     assertTrue(set.contains(2));
1:a66f1a8:     assertTrue(set.contains(3));
1:a66f1a8:     assertFalse(set.contains(4));
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testReservedValues() {
1:a66f1a8:     FastIDSet set = new FastIDSet();
1:a66f1a8:     try {
1:a66f1a8:       set.add(Long.MIN_VALUE);
1:a66f1a8:       fail("Should have thrown IllegalArgumentException");
1:a66f1a8:     } catch (IllegalArgumentException iae) {
1:a66f1a8:       // good
1:a66f1a8:     }
1:a66f1a8:     assertFalse(set.contains(Long.MIN_VALUE));
1:a66f1a8:     try {
1:a66f1a8:       set.add(Long.MAX_VALUE);
1:a66f1a8:       fail("Should have thrown IllegalArgumentException");
1:a66f1a8:     } catch (IllegalArgumentException iae) {
1:a66f1a8:       // good
1:a66f1a8:     }
1:a66f1a8:     assertFalse(set.contains(Long.MAX_VALUE));
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testRehash() {
1:a66f1a8:     FastIDSet set = buildTestFastSet();
1:a66f1a8:     set.remove(1);
1:a66f1a8:     set.rehash();
1:a66f1a8:     assertFalse(set.contains(1));
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testGrow() {
1:a66f1a8:     FastIDSet set = new FastIDSet(1);
1:a66f1a8:     set.add(1);
1:a66f1a8:     set.add(2);
1:a66f1a8:     assertTrue(set.contains(1));
1:a66f1a8:     assertTrue(set.contains(2));
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testIterator() {
1:a66f1a8:     FastIDSet set = buildTestFastSet();
1:210b265:     Collection<Long> expected = Sets.newHashSetWithExpectedSize(3);
1:a66f1a8:     expected.add(1L);
1:a66f1a8:     expected.add(2L);
1:a66f1a8:     expected.add(3L);
1:a66f1a8:     LongPrimitiveIterator it = set.iterator();
1:a66f1a8:     while (it.hasNext()) {
1:85ec3a3:       expected.remove(it.nextLong());
1:a66f1a8:     }
1:a66f1a8:     assertTrue(expected.isEmpty());
1:a66f1a8:   }
1:a66f1a8: 
1:ff79ff4:   @Test
1:a66f1a8:   public void testVersusHashSet() {
1:a66f1a8:     FastIDSet actual = new FastIDSet(1);
1:210b265:     Collection<Integer> expected = Sets.newHashSetWithExpectedSize(1000000);
1:a66f1a8:     Random r = RandomUtils.getRandom();
1:a66f1a8:     for (int i = 0; i < 1000000; i++) {
1:a66f1a8:       double d = r.nextDouble();
1:a66f1a8:       Integer key = r.nextInt(100);
1:a66f1a8:       if (d < 0.4) {
1:a66f1a8:         assertEquals(expected.contains(key), actual.contains(key));
1:a66f1a8:       } else {
1:a66f1a8:         if (d < 0.7) {
1:a66f1a8:           assertEquals(expected.add(key), actual.add(key));
1:a66f1a8:         } else {
1:a66f1a8:           assertEquals(expected.remove(key), actual.remove(key));
1:a66f1a8:         }
1:a66f1a8:         assertEquals(expected.size(), actual.size());
1:a66f1a8:         assertEquals(expected.isEmpty(), actual.isEmpty());
1:a66f1a8:       }
1:a66f1a8:     }
1:a66f1a8:   }
1:a66f1a8: 
1:a66f1a8:   private static FastIDSet buildTestFastSet() {
1:a66f1a8:     FastIDSet set = new FastIDSet();
1:a66f1a8:     set.add(1);
1:a66f1a8:     set.add(2);
1:a66f1a8:     set.add(3);
1:a66f1a8:     return set;
1:a66f1a8:   }
1:a66f1a8: 
1:a66f1a8: 
1:a66f1a8: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Ted Dunning
-------------------------------------------------------------------------------
commit:402e296
/////////////////////////////////////////////////////////////////////////
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:210b265
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1:     Collection<Long> expected = Sets.newHashSetWithExpectedSize(3);
/////////////////////////////////////////////////////////////////////////
1:     Collection<Integer> expected = Sets.newHashSetWithExpectedSize(1000000);
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:85ec3a3
/////////////////////////////////////////////////////////////////////////
1:       expected.remove(it.nextLong());
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
/////////////////////////////////////////////////////////////////////////
1:   @Test
0:     Collection<Integer> expected = new HashSet<Integer>(1000000);
commit:da03b23
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.RandomUtils;
commit:a66f1a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common;
1: 
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: 
1: import java.util.Collection;
0: import java.util.HashSet;
1: import java.util.Random;
0: import java.util.Set;
1: 
1: /** <p>Tests {@link FastIDSet}.</p> */
1: public final class FastIDSetTest extends TasteTestCase {
1: 
1:   public void testContainsAndAdd() {
1:     FastIDSet set = new FastIDSet();
1:     assertFalse(set.contains(1));
1:     set.add(1);
1:     assertTrue(set.contains(1));
1:   }
1: 
1:   public void testRemove() {
1:     FastIDSet set = new FastIDSet();
1:     set.add(1);
1:     set.remove(1);
1:     assertEquals(0, set.size());
1:     assertTrue(set.isEmpty());
1:     assertFalse(set.contains(1));
1:   }
1: 
1: 
1:   public void testClear() {
1:     FastIDSet set = new FastIDSet();
1:     set.add(1);
1:     set.clear();
1:     assertEquals(0, set.size());
1:     assertTrue(set.isEmpty());
1:     assertFalse(set.contains(1));
1:   }
1: 
1:   public void testSizeEmpty() {
1:     FastIDSet set = new FastIDSet();
1:     assertEquals(0, set.size());
1:     assertTrue(set.isEmpty());
1:     set.add(1);
1:     assertEquals(1, set.size());
1:     assertFalse(set.isEmpty());
1:     set.remove(1);
1:     assertEquals(0, set.size());
1:     assertTrue(set.isEmpty());
1:   }
1: 
1:   public void testContains() {
1:     FastIDSet set = buildTestFastSet();
1:     assertTrue(set.contains(1));
1:     assertTrue(set.contains(2));
1:     assertTrue(set.contains(3));
1:     assertFalse(set.contains(4));
1:   }
1: 
1:   public void testReservedValues() {
1:     FastIDSet set = new FastIDSet();
1:     try {
1:       set.add(Long.MIN_VALUE);
1:       fail("Should have thrown IllegalArgumentException");
1:     } catch (IllegalArgumentException iae) {
1:       // good
1:     }
1:     assertFalse(set.contains(Long.MIN_VALUE));
1:     try {
1:       set.add(Long.MAX_VALUE);
1:       fail("Should have thrown IllegalArgumentException");
1:     } catch (IllegalArgumentException iae) {
1:       // good
1:     }
1:     assertFalse(set.contains(Long.MAX_VALUE));
1:   }
1: 
1:   public void testRehash() {
1:     FastIDSet set = buildTestFastSet();
1:     set.remove(1);
1:     set.rehash();
1:     assertFalse(set.contains(1));
1:   }
1: 
1:   public void testGrow() {
1:     FastIDSet set = new FastIDSet(1);
1:     set.add(1);
1:     set.add(2);
1:     assertTrue(set.contains(1));
1:     assertTrue(set.contains(2));
1:   }
1: 
1:   public void testIterator() {
1:     FastIDSet set = buildTestFastSet();
0:     Collection<Long> expected = new HashSet<Long>(3);
1:     expected.add(1L);
1:     expected.add(2L);
1:     expected.add(3L);
1:     LongPrimitiveIterator it = set.iterator();
1:     while (it.hasNext()) {
0:       expected.remove(it.next());
1:     }
1:     assertTrue(expected.isEmpty());
1:   }
1: 
1:   public void testVersusHashSet() {
1:     FastIDSet actual = new FastIDSet(1);
0:     Set<Integer> expected = new HashSet<Integer>(1000000);
1:     Random r = RandomUtils.getRandom();
1:     for (int i = 0; i < 1000000; i++) {
1:       double d = r.nextDouble();
1:       Integer key = r.nextInt(100);
1:       if (d < 0.4) {
1:         assertEquals(expected.contains(key), actual.contains(key));
1:       } else {
1:         if (d < 0.7) {
1:           assertEquals(expected.add(key), actual.add(key));
1:         } else {
1:           assertEquals(expected.remove(key), actual.remove(key));
1:         }
1:         assertEquals(expected.size(), actual.size());
1:         assertEquals(expected.isEmpty(), actual.isEmpty());
1:       }
1:     }
1:   }
1: 
1:   private static FastIDSet buildTestFastSet() {
1:     FastIDSet set = new FastIDSet();
1:     set.add(1);
1:     set.add(2);
1:     set.add(3);
1:     return set;
1:   }
1: 
1: 
1: }
============================================================================