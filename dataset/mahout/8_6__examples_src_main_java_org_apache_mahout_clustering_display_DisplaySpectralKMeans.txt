1:903575e: /*
1:903575e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:903575e:  * contributor license agreements.  See the NOTICE file distributed with
1:903575e:  * this work for additional information regarding copyright ownership.
1:903575e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:903575e:  * (the "License"); you may not use this file except in compliance with
1:903575e:  * the License.  You may obtain a copy of the License at
1:903575e:  *
1:903575e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:903575e:  *
1:903575e:  * Unless required by applicable law or agreed to in writing, software
1:903575e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:903575e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:903575e:  * See the License for the specific language governing permissions and
1:903575e:  * limitations under the License.
1:903575e:  */
2:903575e: 
1:903575e: package org.apache.mahout.clustering.display;
1:903575e: 
1:903575e: import java.awt.Graphics;
1:903575e: import java.awt.Graphics2D;
1:4b1c133: import java.io.BufferedWriter;
1:4b1c133: import java.io.FileWriter;
1:ad8b61d: import java.io.Writer;
1:903575e: 
1:903575e: import org.apache.hadoop.conf.Configuration;
1:903575e: import org.apache.hadoop.fs.FileSystem;
1:903575e: import org.apache.hadoop.fs.Path;
1:903575e: import org.apache.mahout.clustering.spectral.kmeans.SpectralKMeansDriver;
1:903575e: import org.apache.mahout.common.HadoopUtil;
1:903575e: import org.apache.mahout.common.RandomUtils;
1:903575e: import org.apache.mahout.common.distance.DistanceMeasure;
1:903575e: import org.apache.mahout.common.distance.ManhattanDistanceMeasure;
1:903575e: 
1:c02e98f: public class DisplaySpectralKMeans extends DisplayClustering {
1:903575e: 
1:3c22856:   protected static final String SAMPLES = "samples";
1:3c22856:   protected static final String OUTPUT = "output";
1:3c22856:   protected static final String TEMP = "tmp";
1:3c22856:   protected static final String AFFINITIES = "affinities";
1:3c22856: 
1:903575e:   DisplaySpectralKMeans() {
1:903575e:     initialize();
1:4841efb:     setTitle("Spectral k-Means Clusters (>" + (int) (significance * 100) + "% of population)");
1:903575e:   }
1:78545ff: 
1:903575e:   public static void main(String[] args) throws Exception {
1:903575e:     DistanceMeasure measure = new ManhattanDistanceMeasure();
1:78545ff:     Path samples = new Path(SAMPLES);
1:78545ff:     Path output = new Path(OUTPUT);
1:25b5146:     Path tempDir = new Path(TEMP);
1:903575e:     Configuration conf = new Configuration();
1:a13b4b7:     HadoopUtil.delete(conf, samples);
1:a13b4b7:     HadoopUtil.delete(conf, output);
1:903575e: 
1:903575e:     RandomUtils.useTestSeed();
1:903575e:     DisplayClustering.generateSamples();
1:903575e:     writeSampleData(samples);
1:78545ff:     Path affinities = new Path(output, AFFINITIES);
1:903575e:     FileSystem fs = FileSystem.get(output.toUri(), conf);
1:903575e:     if (!fs.exists(output)) {
1:903575e:       fs.mkdirs(output);
1:903575e:     }
1:4b1c133: 
1:4b1c133:     try (Writer writer = new BufferedWriter(new FileWriter(affinities.toString()))){
1:903575e:       for (int i = 0; i < SAMPLE_DATA.size(); i++) {
1:903575e:         for (int j = 0; j < SAMPLE_DATA.size(); j++) {
1:4b1c133:           writer.write(i + "," + j + ',' + measure.distance(SAMPLE_DATA.get(i).get(),
1:4b1c133:               SAMPLE_DATA.get(j).get()) + '\n');
1:903575e:         }
1:903575e:       }
1:903575e:     }
1:4b1c133: 
1:903575e:     int maxIter = 10;
1:903575e:     double convergenceDelta = 0.001;
1:4b1c133:     SpectralKMeansDriver.run(new Configuration(), affinities, output, SAMPLE_DATA.size(), 3, measure,
1:4b1c133:         convergenceDelta, maxIter, tempDir);
1:903575e:     new DisplaySpectralKMeans();
1:903575e:   }
1:903575e: 
1:903575e:   @Override
1:903575e:   public void paint(Graphics g) {
1:e58f704:     plotClusteredSampleData((Graphics2D) g, new Path(new Path(OUTPUT), "kmeans_out"));
1:903575e:   }
1:903575e: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4b1c133
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedWriter;
1: import java.io.FileWriter;
/////////////////////////////////////////////////////////////////////////
1: 
1:     try (Writer writer = new BufferedWriter(new FileWriter(affinities.toString()))){
1:           writer.write(i + "," + j + ',' + measure.distance(SAMPLE_DATA.get(i).get(),
1:               SAMPLE_DATA.get(j).get()) + '\n');
1: 
1:     SpectralKMeansDriver.run(new Configuration(), affinities, output, SAMPLE_DATA.size(), 3, measure,
1:         convergenceDelta, maxIter, tempDir);
author:smarthi
-------------------------------------------------------------------------------
commit:e58f704
/////////////////////////////////////////////////////////////////////////
1:     plotClusteredSampleData((Graphics2D) g, new Path(new Path(OUTPUT), "kmeans_out"));
author:dfilimon
-------------------------------------------------------------------------------
commit:87d4b2e
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, false);
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(writer, true);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:3c22856
/////////////////////////////////////////////////////////////////////////
1:   protected static final String SAMPLES = "samples";
1:   protected static final String OUTPUT = "output";
1:   protected static final String TEMP = "tmp";
1:   protected static final String AFFINITIES = "affinities";
1: 
/////////////////////////////////////////////////////////////////////////
0:     plotClusteredSampleData((Graphics2D) g, new Path(OUTPUT));
commit:4841efb
/////////////////////////////////////////////////////////////////////////
1:     setTitle("Spectral k-Means Clusters (>" + (int) (significance * 100) + "% of population)");
/////////////////////////////////////////////////////////////////////////
0:     Writer writer = null;
0:       writer = Files.newWriter(new File(affinities.toString()), Charsets.UTF_8);
/////////////////////////////////////////////////////////////////////////
0:     SpectralKMeansDriver.run(new Configuration(), affinities, output, SAMPLE_DATA.size(), 3, measure, convergenceDelta,
0:         maxIter, tempDir, false);
commit:d608a88
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:       Closeables.closeQuietly(writer);
author:Shannon Quinn
-------------------------------------------------------------------------------
commit:25b5146
/////////////////////////////////////////////////////////////////////////
0: 	protected static final String TEMP = "tmp";
/////////////////////////////////////////////////////////////////////////
1:     Path tempDir = new Path(TEMP);
/////////////////////////////////////////////////////////////////////////
0:     SpectralKMeansDriver.run(new Configuration(), affinities, output, SAMPLE_DATA.size(), 3, measure, convergenceDelta, maxIter, tempDir, false);
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:78545ff
/////////////////////////////////////////////////////////////////////////
0: 	protected static final String SAMPLES = "samples";
0: 	protected static final String OUTPUT = "output";
0: 	protected static final String AFFINITIES = "affinities";
1: 	
/////////////////////////////////////////////////////////////////////////
1:     Path samples = new Path(SAMPLES);
1:     Path output = new Path(OUTPUT);
/////////////////////////////////////////////////////////////////////////
1:     Path affinities = new Path(output, AFFINITIES);
/////////////////////////////////////////////////////////////////////////
0:     SpectralKMeansDriver.run(new Configuration(), affinities, output, SAMPLE_DATA.size(), 3, measure, convergenceDelta, maxIter);
0:   	plotClusteredSampleData((Graphics2D) g, new Path(OUTPUT));
commit:c02e98f
/////////////////////////////////////////////////////////////////////////
1: public class DisplaySpectralKMeans extends DisplayClustering {
commit:347aaed
/////////////////////////////////////////////////////////////////////////
0:     SpectralKMeansDriver.run(new Configuration(), affinities, output, 1100, 2, measure, convergenceDelta, maxIter);
commit:903575e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.clustering.display;
1: 
1: import java.awt.Graphics;
1: import java.awt.Graphics2D;
0: import java.io.FileWriter;
0: import java.io.PrintWriter;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.fs.FileSystem;
1: import org.apache.hadoop.fs.Path;
1: import org.apache.mahout.clustering.spectral.kmeans.SpectralKMeansDriver;
1: import org.apache.mahout.common.HadoopUtil;
1: import org.apache.mahout.common.RandomUtils;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.common.distance.ManhattanDistanceMeasure;
1: 
0: class DisplaySpectralKMeans extends DisplayClustering {
1: 
1:   DisplaySpectralKMeans() {
1:     initialize();
0:     this.setTitle("Spectral k-Means Clusters (>" + (int) (significance * 100) + "% of population)");
1:   }
1: 
1:   public static void main(String[] args) throws Exception {
1:     DistanceMeasure measure = new ManhattanDistanceMeasure();
0:     Path samples = new Path("samples");
0:     Path output = new Path("output");
0:     HadoopUtil.overwriteOutput(samples);
0:     HadoopUtil.overwriteOutput(output);
1: 
1:     RandomUtils.useTestSeed();
1:     DisplayClustering.generateSamples();
1:     writeSampleData(samples);
1:     int maxIter = 10;
1:     double convergenceDelta = 0.001;
0:     Path affinities = new Path(output, "affinities");
1:     Configuration conf = new Configuration();
1:     FileSystem fs = FileSystem.get(output.toUri(), conf);
1:     if (!fs.exists(output)) {
1:       fs.mkdirs(output);
1:     }
0:     FileWriter writer = new FileWriter(affinities.toString());
0:     PrintWriter out = new PrintWriter(writer);
0:     try {
1:       for (int i = 0; i < SAMPLE_DATA.size(); i++) {
1:         for (int j = 0; j < SAMPLE_DATA.size(); j++) {
0:           out.println(i + "," + j + "," + measure.distance(SAMPLE_DATA.get(i).get(), SAMPLE_DATA.get(j).get()));
1:         }
1:       }
0:     } finally {
0:       out.close();
1:     }
0:     SpectralKMeansDriver.run(new Configuration(), affinities, output, 1100, 5, measure, convergenceDelta, maxIter);
0:     loadClusters(output);
1:     new DisplaySpectralKMeans();
1:   }
1: 
0:   // Override the paint() method
1:   @Override
1:   public void paint(Graphics g) {
0:     plotSampleData((Graphics2D) g);
0:     plotClusters((Graphics2D) g);
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:f3a9cc1
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Files;
/////////////////////////////////////////////////////////////////////////
0:     Writer writer = Files.newWriter(new File(affinities.toString()), Charsets.UTF_8);
commit:80366ee
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
0:         new FileOutputStream(new File(affinities.toString())), Charsets.UTF_8);
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
0:     Configuration conf = new Configuration();
1:     HadoopUtil.delete(conf, samples);
1:     HadoopUtil.delete(conf, output);
commit:ad8b61d
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.OutputStreamWriter;
1: import java.io.Writer;
0: import java.nio.charset.Charset;
/////////////////////////////////////////////////////////////////////////
0:     Writer writer = new OutputStreamWriter(
0:         new FileOutputStream(new File(affinities.toString())), Charset.forName("UTF-8"));
0:           writer.write(i + "," + j + ',' + measure.distance(SAMPLE_DATA.get(i).get(), SAMPLE_DATA.get(j).get()) + '\n');
0:       writer.close();
commit:58fd277
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:           out.println(i + "," + j + ',' + measure.distance(SAMPLE_DATA.get(i).get(), SAMPLE_DATA.get(j).get()));
0:     int maxIter = 10;
0:     double convergenceDelta = 0.001;
============================================================================