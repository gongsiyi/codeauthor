1:10c535c: /**
1:10c535c:  * <HTML>
1:10c535c:  * <BODY>
1:10c535c:  * Resizable lists holding objects or primitive data types such as <tt>int</tt>,
1:10c535c:  * <tt>double</tt>, etc. For non-resizable lists (1-dimensional matrices) see
1:10c535c:  * package <code>org.apache.mahout.math.matrix</code>.<p></p>
1:10c535c:  * <h1><a name="Overview"></a>Getting Started</h1>
1:10c535c:  * <h2>1. Overview</h2>
1:10c535c:  * <p>The list package offers flexible object oriented abstractions modelling dynamically
1:10c535c:  * resizing lists holding objects or primitive data types such as <tt>int</tt>,
1:10c535c:  * <tt>double</tt>, etc. It is designed to be scalable in terms of performance
1:10c535c:  * and memory requirements.</p>
1:10c535c:  * <p>Features include: </p>
1:10c535c:  * <p></p>
1:10c535c:  * <ul>
1:10c535c:  * <li>Lists operating on objects as well as all primitive data types such as <tt>int</tt>,
1:10c535c:  * <tt>double</tt>, etc.
1:10c535c:  * </li>
1:10c535c:  * <li>Compact representations</li>
1:8b194c8:  * <li>A number of general purpose list operations including: adding, inserting,
1:10c535c:  * removing, iterating, searching, sorting, extracting ranges and copying. All
1:8b194c8:  * operations are designed to perform well on mass data.
1:10c535c:  * </li>
1:10c535c:  * <li>Support for quick access to list elements. This is achieved by bounds-checking
1:10c535c:  * and non-bounds-checking accessor methods as well as zero-copy transformations
1:10c535c:  * to primitive arrays such as <tt>int[]</tt>, <tt>double[]</tt>, etc.
1:10c535c:  * </li>
1:10c535c:  * <li>Allows to use high level algorithms on primitive data types without any
1:10c535c:  * space and time overhead. Operations on primitive arrays, Colt lists and JAL
1:10c535c:  * algorithms can freely be mixed at zero copy overhead.
1:10c535c:  * </li>
1:10c535c:  * </ul>
1:10c535c:  * <p>File-based I/O can be achieved through the standard Java built-in serialization
1:10c535c:  * mechanism. All classes implement the {@link java.io.Serializable} interface.
1:10c535c:  * However, the toolkit is entirely decoupled from advanced I/O. It provides data
1:10c535c:  * structures and algorithms only.
1:10c535c:  * <p> This toolkit borrows concepts and terminology from the Javasoft <a
1:10c535c:  * href="http://www.javasoft.com/products/jdk/1.2/docs/guide/collections/index.html">
1:10c535c:  * Collections framework</a> written by Josh Bloch and introduced in JDK 1.2.
1:10c535c:  * <h2>2. Introduction</h2>
1:10c535c:  * <p>Lists are fundamental to virtually any application. Large scale resizable lists
1:10c535c:  * are, for example, used in scientific computations, simulations database management
1:10c535c:  * systems, to name just a few.</p>
1:10c535c:  * <h2></h2>
1:10c535c:  * <p>A list is a container holding elements that can be accessed via zero-based
1:10c535c:  * indexes. Lists may be implemented in different ways (most commonly with arrays).
1:10c535c:  * A resizable list automatically grows as elements are added. The lists of this
1:10c535c:  * package do not automatically shrink. Shrinking needs to be triggered by explicitly
1:10c535c:  * calling <tt>trimToSize()</tt> methods.</p>
1:10c535c:  * <p><i>Growing policy</i>: A list implemented with arrays initially has a certain
1:10c535c:  * <tt>initialCapacity</tt> - per default 10 elements, but customizable upon instance
1:10c535c:  * construction. As elements are added, this capacity may nomore be sufficient.
1:10c535c:  * When a list is automatically grown, its capacity is expanded to <tt>1.5*currentCapacity</tt>.
1:10c535c:  * Thus, excessive resizing (involving copying) is avoided.</p>
1:10c535c:  * <h4>Copying</h4>
1:10c535c:  * <p>
1:10c535c:  * <p>Any list can be copied. A copy is <i>equal</i> to the original but entirely
1:10c535c:  * independent of the original. So changes in the copy are not reflected in the
1:10c535c:  * original, and vice-versa.
1:10c535c:  * <h2>3. Organization of this package</h2>
1:10c535c:  * <p>Class naming follows the schema <tt>&lt;ElementType&gt;&lt;ImplementationTechnique&gt;List</tt>.
1:10c535c:  * For example, we have a {@link org.apache.mahout.math.list.DoubleArrayList}, which is a list
1:10c535c:  * holding <tt>double</tt> elements implemented with <tt>double</tt>[] arrays.
1:10c535c:  * </p>
1:10c535c:  * <p>The classes for lists of a given value type are derived from a common abstract
1:10c535c:  * base class tagged <tt>Abstract&lt;ElementType&gt;</tt><tt>List</tt>. For example,
1:10c535c:  * all lists operating on <tt>double</tt> elements are derived from
1:10c535c:  * {@link org.apache.mahout.math.list.AbstractDoubleList},
1:10c535c:  * which in turn is derived from an abstract base class tying together all lists
1:10c535c:  * regardless of value type, {@link org.apache.mahout.math.list.AbstractList}. The abstract
1:10c535c:  * base classes provide skeleton implementations for all but few methods. Experimental
1:10c535c:  * data layouts (such as compressed, sparse, linked, etc.) can easily be implemented
1:10c535c:  * and inherit a rich set of functionality. Have a look at the javadoc <a href="package-tree.html">tree
1:10c535c:  * view</a> to get the broad picture.</p>
1:10c535c:  * <h2>4. Example usage</h2>
1:10c535c:  * <p>The following snippet fills a list, randomizes it, extracts the first half
1:10c535c:  * of the elements, sums them up and prints the result. It is implemented entirely
1:10c535c:  * with accessor methods.</p>
1:10c535c:  * <table>
1:10c535c:  * <td class="PRE">
1:10c535c:  * <pre>
1:10c535c:  * int s = 1000000;<br>AbstractDoubleList list = new DoubleArrayList();
1:10c535c:  * for (int i=0; i&lt;s; i++) { list.add((double)i); }
1:10c535c:  * list.shuffle();
1:10c535c:  * AbstractDoubleList part = list.partFromTo(0,list.size()/2 - 1);
1:10c535c:  * double sum = 0.0;
1:10c535c:  * for (int i=0; i&lt;part.size(); i++) { sum += part.get(i); }
1:10c535c:  * log.info(sum);
1:10c535c:  * </pre>
1:10c535c:  * </td>
1:10c535c:  * </table>
1:10c535c:  * <p> For efficiency, all classes provide back doors to enable getting/setting the
1:8b194c8:  * backing array directly. In this way, the high level operations of these classes
1:10c535c:  * can be used where appropriate, and one can switch to <tt>[]</tt>-array index
1:10c535c:  * notations where necessary. The key methods for this are <tt>public &lt;ElementType&gt;[]
1:10c535c:  * elements()</tt> and <tt>public void elements(&lt;ElementType&gt;[])</tt>. The
1:10c535c:  * former trustingly returns the array it internally keeps to store the elements.
1:10c535c:  * Holding this array in hand, we can use the <tt>[]</tt>-array operator to
1:10c535c:  * perform iteration over large lists without needing to copy the array or paying
1:10c535c:  * the performance penalty introduced by accessor methods. Alternatively any JAL
1:10c535c:  * algorithm (or other algorithm) can operate on the returned primitive array.
1:10c535c:  * The latter method forces a list to internally hold a user provided array. Using
1:10c535c:  * this approach one can avoid needing to copy the elements into the list.
1:8b194c8:  * <p>As a consequence, operations on primitive arrays, Colt lists and JAL algorithms
1:10c535c:  * can freely be mixed at zero-copy overhead.
1:10c535c:  * <p> Note that such special treatment certainly breaks encapsulation. This functionality
1:10c535c:  * is provided for performance reasons only and should only be used when absolutely
1:10c535c:  * necessary. Here is the above example in mixed notation:
1:10c535c:  * <table>
1:10c535c:  * <td class="PRE">
1:10c535c:  * <pre>
1:10c535c:  * int s = 1000000;<br>DoubleArrayList list = new DoubleArrayList(s); // list.size()==0, capacity==s
1:6d16230:  * list.setSize(s); // list.size()==s<br>double[] values = list.elements();
1:6d16230:  * // zero copy, values.length==s<br>for (int i=0; i&lt;s; i++) { values[i]=(double)i; }
1:10c535c:  * list.shuffle();
1:10c535c:  * double sum = 0.0;
1:10c535c:  * int limit = values.length/2;
1:10c535c:  * for (int i=0; i&lt;limit; i++) { sum += values[i]; }
1:10c535c:  * log.info(sum);
1:10c535c:  * </pre>
1:10c535c:  * </td>
1:10c535c:  * </table>
1:10c535c:  * <p> Or even more compact using lists as algorithm objects:
1:10c535c:  * <table>
1:10c535c:  * <td class="PRE">
1:10c535c:  * <pre>
1:10c535c:  * int s = 1000000;<br>double[] values = new double[s];
1:10c535c:  * for (int i=0; i&lt;s; i++) { values[i]=(double)i; }
1:10c535c:  * new DoubleArrayList(values).shuffle(); // zero-copy, shuffle via back door
1:10c535c:  * double sum = 0.0;
1:10c535c:  * int limit = values.length/2;
1:10c535c:  * for (int i=0; i&lt;limit; i++) { sum += values[i]; }
1:10c535c:  * log.info(sum);
1:10c535c:  * </pre>
1:10c535c:  * </td>
1:10c535c:  * </table>
1:10c535c:  * <p>
1:10c535c:  * <h2>5. Notes </h2>
1:10c535c:  * <p>The quicksorts and mergesorts are the JDK 1.2 V1.26 algorithms, modified as
1:10c535c:  * necessary to operate on the given data types.
1:10c535c:  * </BODY>
1:10c535c:  * </HTML>
1:10c535c:  */
1:6d16230: package org.apache.mahout.math.list;
============================================================================
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:8b194c8
/////////////////////////////////////////////////////////////////////////
1:  * <li>A number of general purpose list operations including: adding, inserting,
1:  * operations are designed to perform well on mass data.
/////////////////////////////////////////////////////////////////////////
1:  * backing array directly. In this way, the high level operations of these classes
/////////////////////////////////////////////////////////////////////////
1:  * <p>As a consequence, operations on primitive arrays, Colt lists and JAL algorithms
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
0:  * <li>A number of general purpose list OPERATIONS including: adding, inserting,
0:  * OPERATIONS are designed to perform well on mass data.
/////////////////////////////////////////////////////////////////////////
0:  * backing array directly. In this way, the high level OPERATIONS of these classes
/////////////////////////////////////////////////////////////////////////
0:  * <p>As a consequence, OPERATIONS on primitive arrays, Colt lists and JAL algorithms
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:  * list.setSize(s); // list.size()==s<br>double[] values = list.elements();
1:  * // zero copy, values.length==s<br>for (int i=0; i&lt;s; i++) { values[i]=(double)i; }
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.list;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:10c535c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * <HTML>
1:  * <BODY>
1:  * Resizable lists holding objects or primitive data types such as <tt>int</tt>,
1:  * <tt>double</tt>, etc. For non-resizable lists (1-dimensional matrices) see
1:  * package <code>org.apache.mahout.math.matrix</code>.<p></p>
1:  * <h1><a name="Overview"></a>Getting Started</h1>
1:  * <h2>1. Overview</h2>
1:  * <p>The list package offers flexible object oriented abstractions modelling dynamically
1:  * resizing lists holding objects or primitive data types such as <tt>int</tt>,
1:  * <tt>double</tt>, etc. It is designed to be scalable in terms of performance
1:  * and memory requirements.</p>
1:  * <p>Features include: </p>
1:  * <p></p>
1:  * <ul>
1:  * <li>Lists operating on objects as well as all primitive data types such as <tt>int</tt>,
1:  * <tt>double</tt>, etc.
1:  * </li>
1:  * <li>Compact representations</li>
0:  * <li>A number of general purpose list operations including: adding, inserting,
1:  * removing, iterating, searching, sorting, extracting ranges and copying. All
0:  * operations are designed to perform well on mass data.
1:  * </li>
1:  * <li>Support for quick access to list elements. This is achieved by bounds-checking
1:  * and non-bounds-checking accessor methods as well as zero-copy transformations
1:  * to primitive arrays such as <tt>int[]</tt>, <tt>double[]</tt>, etc.
1:  * </li>
1:  * <li>Allows to use high level algorithms on primitive data types without any
1:  * space and time overhead. Operations on primitive arrays, Colt lists and JAL
1:  * algorithms can freely be mixed at zero copy overhead.
1:  * </li>
1:  * </ul>
1:  * <p>File-based I/O can be achieved through the standard Java built-in serialization
1:  * mechanism. All classes implement the {@link java.io.Serializable} interface.
1:  * However, the toolkit is entirely decoupled from advanced I/O. It provides data
1:  * structures and algorithms only.
1:  * <p> This toolkit borrows concepts and terminology from the Javasoft <a
1:  * href="http://www.javasoft.com/products/jdk/1.2/docs/guide/collections/index.html">
1:  * Collections framework</a> written by Josh Bloch and introduced in JDK 1.2.
1:  * <h2>2. Introduction</h2>
1:  * <p>Lists are fundamental to virtually any application. Large scale resizable lists
1:  * are, for example, used in scientific computations, simulations database management
1:  * systems, to name just a few.</p>
1:  * <h2></h2>
1:  * <p>A list is a container holding elements that can be accessed via zero-based
1:  * indexes. Lists may be implemented in different ways (most commonly with arrays).
1:  * A resizable list automatically grows as elements are added. The lists of this
1:  * package do not automatically shrink. Shrinking needs to be triggered by explicitly
1:  * calling <tt>trimToSize()</tt> methods.</p>
1:  * <p><i>Growing policy</i>: A list implemented with arrays initially has a certain
1:  * <tt>initialCapacity</tt> - per default 10 elements, but customizable upon instance
1:  * construction. As elements are added, this capacity may nomore be sufficient.
1:  * When a list is automatically grown, its capacity is expanded to <tt>1.5*currentCapacity</tt>.
1:  * Thus, excessive resizing (involving copying) is avoided.</p>
1:  * <h4>Copying</h4>
1:  * <p>
1:  * <p>Any list can be copied. A copy is <i>equal</i> to the original but entirely
1:  * independent of the original. So changes in the copy are not reflected in the
1:  * original, and vice-versa.
1:  * <h2>3. Organization of this package</h2>
1:  * <p>Class naming follows the schema <tt>&lt;ElementType&gt;&lt;ImplementationTechnique&gt;List</tt>.
1:  * For example, we have a {@link org.apache.mahout.math.list.DoubleArrayList}, which is a list
1:  * holding <tt>double</tt> elements implemented with <tt>double</tt>[] arrays.
1:  * </p>
1:  * <p>The classes for lists of a given value type are derived from a common abstract
1:  * base class tagged <tt>Abstract&lt;ElementType&gt;</tt><tt>List</tt>. For example,
1:  * all lists operating on <tt>double</tt> elements are derived from
1:  * {@link org.apache.mahout.math.list.AbstractDoubleList},
1:  * which in turn is derived from an abstract base class tying together all lists
1:  * regardless of value type, {@link org.apache.mahout.math.list.AbstractList}. The abstract
1:  * base classes provide skeleton implementations for all but few methods. Experimental
1:  * data layouts (such as compressed, sparse, linked, etc.) can easily be implemented
1:  * and inherit a rich set of functionality. Have a look at the javadoc <a href="package-tree.html">tree
1:  * view</a> to get the broad picture.</p>
1:  * <h2>4. Example usage</h2>
1:  * <p>The following snippet fills a list, randomizes it, extracts the first half
1:  * of the elements, sums them up and prints the result. It is implemented entirely
1:  * with accessor methods.</p>
1:  * <table>
1:  * <td class="PRE">
1:  * <pre>
1:  * int s = 1000000;<br>AbstractDoubleList list = new DoubleArrayList();
1:  * for (int i=0; i&lt;s; i++) { list.add((double)i); }
1:  * list.shuffle();
1:  * AbstractDoubleList part = list.partFromTo(0,list.size()/2 - 1);
1:  * double sum = 0.0;
1:  * for (int i=0; i&lt;part.size(); i++) { sum += part.get(i); }
1:  * log.info(sum);
1:  * </pre>
1:  * </td>
1:  * </table>
1:  * <p> For efficiency, all classes provide back doors to enable getting/setting the
0:  * backing array directly. In this way, the high level operations of these classes
1:  * can be used where appropriate, and one can switch to <tt>[]</tt>-array index
1:  * notations where necessary. The key methods for this are <tt>public &lt;ElementType&gt;[]
1:  * elements()</tt> and <tt>public void elements(&lt;ElementType&gt;[])</tt>. The
1:  * former trustingly returns the array it internally keeps to store the elements.
1:  * Holding this array in hand, we can use the <tt>[]</tt>-array operator to
1:  * perform iteration over large lists without needing to copy the array or paying
1:  * the performance penalty introduced by accessor methods. Alternatively any JAL
1:  * algorithm (or other algorithm) can operate on the returned primitive array.
1:  * The latter method forces a list to internally hold a user provided array. Using
1:  * this approach one can avoid needing to copy the elements into the list.
0:  * <p>As a consequence, operations on primitive arrays, Colt lists and JAL algorithms
1:  * can freely be mixed at zero-copy overhead.
1:  * <p> Note that such special treatment certainly breaks encapsulation. This functionality
1:  * is provided for performance reasons only and should only be used when absolutely
1:  * necessary. Here is the above example in mixed notation:
1:  * <table>
1:  * <td class="PRE">
1:  * <pre>
1:  * int s = 1000000;<br>DoubleArrayList list = new DoubleArrayList(s); // list.size()==0, capacity==s
0:  * list.setSize(s); // list.size()==s<br>double[] values = list.elements(); // zero copy, values.length==s<br>for (int i=0; i&lt;s; i++) { values[i]=(double)i; }
1:  * list.shuffle();
1:  * double sum = 0.0;
1:  * int limit = values.length/2;
1:  * for (int i=0; i&lt;limit; i++) { sum += values[i]; }
1:  * log.info(sum);
1:  * </pre>
1:  * </td>
1:  * </table>
1:  * <p> Or even more compact using lists as algorithm objects:
1:  * <table>
1:  * <td class="PRE">
1:  * <pre>
1:  * int s = 1000000;<br>double[] values = new double[s];
1:  * for (int i=0; i&lt;s; i++) { values[i]=(double)i; }
1:  * new DoubleArrayList(values).shuffle(); // zero-copy, shuffle via back door
1:  * double sum = 0.0;
1:  * int limit = values.length/2;
1:  * for (int i=0; i&lt;limit; i++) { sum += values[i]; }
1:  * log.info(sum);
1:  * </pre>
1:  * </td>
1:  * </table>
1:  * <p>
1:  * <h2>5. Notes </h2>
1:  * <p>The quicksorts and mergesorts are the JDK 1.2 V1.26 algorithms, modified as
1:  * necessary to operate on the given data types.
1:  * </BODY>
1:  * </HTML>
1:  */
0: package org.apache.mahout.math.list;
============================================================================