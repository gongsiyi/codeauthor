1:48d069f: /**
1:48d069f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:48d069f:  * contributor license agreements.  See the NOTICE file distributed with
1:48d069f:  * this work for additional information regarding copyright ownership.
1:48d069f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:48d069f:  * (the "License"); you may not use this file except in compliance with
1:48d069f:  * the License.  You may obtain a copy of the License at
1:48d069f:  *
1:48d069f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:48d069f:  *
1:48d069f:  * Unless required by applicable law or agreed to in writing, software
1:48d069f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:48d069f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:48d069f:  * See the License for the specific language governing permissions and
1:48d069f:  * limitations under the License.
1:48d069f:  */
1:48d069f: 
1:b60c909: package org.apache.mahout.clustering.spectral;
1:48d069f: 
1:48d069f: import java.util.List;
1:48d069f: 
1:48d069f: import org.apache.hadoop.conf.Configuration;
1:48d069f: import org.apache.hadoop.io.IntWritable;
1:48d069f: import org.apache.hadoop.mapreduce.Mapper;
1:b60c909: import org.apache.mahout.clustering.spectral.UnitVectorizerJob.UnitVectorizerMapper;
1:48d069f: import org.apache.mahout.common.DummyRecordWriter;
1:48d069f: import org.apache.mahout.common.MahoutTestCase;
1:48d069f: import org.apache.mahout.math.RandomAccessSparseVector;
1:48d069f: import org.apache.mahout.math.Vector;
1:48d069f: import org.apache.mahout.math.VectorWritable;
1:48d069f: import org.junit.Test;
1:48d069f: 
1:48d069f: public class TestUnitVectorizerJob extends MahoutTestCase {
1:48d069f: 
1:049e7dc:   private static final double [][] RAW = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
1:48d069f: 
1:48d069f:   @Test
1:48d069f:   public void testUnitVectorizerMapper() throws Exception {
1:48d069f:     UnitVectorizerMapper mapper = new UnitVectorizerMapper();
1:921e201:     Configuration conf = getConfiguration();
1:48d069f:     
1:48d069f:     // set up the dummy writers
1:48d069f:     DummyRecordWriter<IntWritable, VectorWritable> writer = new
1:02ff22f:       DummyRecordWriter<>();
1:48d069f:     Mapper<IntWritable, VectorWritable, IntWritable, VectorWritable>.Context 
1:48d069f:       context = DummyRecordWriter.build(mapper, conf, writer);
1:48d069f:     
1:48d069f:     // perform the mapping
1:049e7dc:     for (int i = 0; i < RAW.length; i++) {
1:049e7dc:       Vector vector = new RandomAccessSparseVector(RAW[i].length);
1:049e7dc:       vector.assign(RAW[i]);
1:48d069f:       mapper.map(new IntWritable(i), new VectorWritable(vector), context);
1:48d069f:     }
1:48d069f:     
1:48d069f:     // check the results
1:049e7dc:     assertEquals("Number of map results", RAW.length, writer.getData().size());
1:049e7dc:     for (int i = 0; i < RAW.length; i++) {
1:48d069f:       IntWritable key = new IntWritable(i);
1:48d069f:       List<VectorWritable> list = writer.getValue(key);
1:48d069f:       assertEquals("Only one element per row", 1, list.size());
1:48d069f:       Vector v = list.get(0).get();
1:48d069f:       assertTrue("Unit vector sum is 1 or differs by 0.0001", Math.abs(v.norm(2) - 1) < 0.000001);
1:48d069f:     }
1:48d069f:   } 
1:48d069f: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:       DummyRecordWriter<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:sslavic
-------------------------------------------------------------------------------
commit:921e201
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:b60c909
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.clustering.spectral;
1: import org.apache.mahout.clustering.spectral.UnitVectorizerJob.UnitVectorizerMapper;
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:049e7dc
/////////////////////////////////////////////////////////////////////////
1:   private static final double [][] RAW = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
/////////////////////////////////////////////////////////////////////////
1:     for (int i = 0; i < RAW.length; i++) {
1:       Vector vector = new RandomAccessSparseVector(RAW[i].length);
1:       vector.assign(RAW[i]);
1:     assertEquals("Number of map results", RAW.length, writer.getData().size());
1:     for (int i = 0; i < RAW.length; i++) {
author:Jeff Eastman
-------------------------------------------------------------------------------
commit:48d069f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.mahout.clustering.spectral.common;
1: 
1: import java.util.List;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.mapreduce.Mapper;
0: import org.apache.mahout.clustering.spectral.common.UnitVectorizerJob.UnitVectorizerMapper;
1: import org.apache.mahout.common.DummyRecordWriter;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: import org.junit.Test;
1: 
1: public class TestUnitVectorizerJob extends MahoutTestCase {
1: 
0:   private double [][] raw = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
1: 
1:   @Test
1:   public void testUnitVectorizerMapper() throws Exception {
1:     UnitVectorizerMapper mapper = new UnitVectorizerMapper();
0:     Configuration conf = new Configuration();
1:     
1:     // set up the dummy writers
1:     DummyRecordWriter<IntWritable, VectorWritable> writer = new
0:       DummyRecordWriter<IntWritable, VectorWritable>();
1:     Mapper<IntWritable, VectorWritable, IntWritable, VectorWritable>.Context 
1:       context = DummyRecordWriter.build(mapper, conf, writer);
1:     
1:     // perform the mapping
0:     for (int i = 0; i < raw.length; i++) {
0:       Vector vector = new RandomAccessSparseVector(raw[i].length);
0:       vector.assign(raw[i]);
1:       mapper.map(new IntWritable(i), new VectorWritable(vector), context);
1:     }
1:     
1:     // check the results
0:     assertEquals("Number of map results", raw.length, writer.getData().size());
0:     for (int i = 0; i < raw.length; i++) {
1:       IntWritable key = new IntWritable(i);
1:       List<VectorWritable> list = writer.getValue(key);
1:       assertEquals("Only one element per row", 1, list.size());
1:       Vector v = list.get(0).get();
1:       assertTrue("Unit vector sum is 1 or differs by 0.0001", Math.abs(v.norm(2) - 1) < 0.000001);
1:     }
1:   } 
1: }
============================================================================