1:437d918: /**
1:437d918:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:437d918:  * contributor license agreements.  See the NOTICE file distributed with
1:437d918:  * this work for additional information regarding copyright ownership.
1:437d918:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:437d918:  * (the "License"); you may not use this file except in compliance with
1:437d918:  * the License.  You may obtain a copy of the License at
1:437d918:  *
1:437d918:  *     http://www.apache.org/licenses/LICENSE-2.0
1:437d918:  *
1:437d918:  * Unless required by applicable law or agreed to in writing, software
1:437d918:  * distributed under the License is distributed on an "AS IS" BASIS,
1:437d918:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:437d918:  * See the License for the specific language governing permissions and
1:437d918:  * limitations under the License.
1:437d918:  */
1:437d918: 
1:437d918: package org.apache.mahout.cf.taste.impl.common;
1:437d918: 
1:437d918: import com.google.common.collect.Maps;
1:437d918: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1:437d918: import org.apache.mahout.common.RandomUtils;
1:437d918: import org.junit.Test;
1:437d918: 
1:437d918: import java.util.Map;
1:437d918: import java.util.Random;
1:437d918: 
1:437d918: /** <p>Tests {@link FastByIDMap}.</p> */
1:437d918: public final class FastByIDMapTest extends TasteTestCase {
1:437d918: 
1:437d918:   @Test
1:437d918:   public void testPutAndGet() {
1:02ff22f:     FastByIDMap<Long> map = new FastByIDMap<>();
1:437d918:     assertNull(map.get(500000L));
1:437d918:     map.put(500000L, 2L);
1:437d918:     assertEquals(2L, (long) map.get(500000L));
1:437d918:   }
1:437d918:   
1:437d918:   @Test
1:437d918:   public void testRemove() {
1:02ff22f:     FastByIDMap<Long> map = new FastByIDMap<>();
1:437d918:     map.put(500000L, 2L);
1:437d918:     map.remove(500000L);
1:437d918:     assertEquals(0, map.size());
1:437d918:     assertTrue(map.isEmpty());
1:437d918:     assertNull(map.get(500000L));
1:437d918:   }
1:437d918:   
1:437d918:   @Test
1:437d918:   public void testClear() {
1:02ff22f:     FastByIDMap<Long> map = new FastByIDMap<>();
1:437d918:     map.put(500000L, 2L);
1:437d918:     map.clear();
1:437d918:     assertEquals(0, map.size());
1:437d918:     assertTrue(map.isEmpty());
1:437d918:     assertNull(map.get(500000L));
1:437d918:   }
1:437d918:   
1:437d918:   @Test
1:437d918:   public void testSizeEmpty() {
1:02ff22f:     FastByIDMap<Long> map = new FastByIDMap<>();
1:437d918:     assertEquals(0, map.size());
1:437d918:     assertTrue(map.isEmpty());
1:437d918:     map.put(500000L, 2L);
1:437d918:     assertEquals(1, map.size());
1:437d918:     assertFalse(map.isEmpty());
1:437d918:     map.remove(500000L);
1:437d918:     assertEquals(0, map.size());
1:437d918:     assertTrue(map.isEmpty());
1:437d918:   }
1:437d918:   
1:437d918:   @Test
1:437d918:   public void testContains() {
1:437d918:     FastByIDMap<String> map = buildTestFastMap();
1:437d918:     assertTrue(map.containsKey(500000L));
1:437d918:     assertTrue(map.containsKey(47L));
1:437d918:     assertTrue(map.containsKey(2L));
1:437d918:     assertTrue(map.containsValue("alpha"));
1:437d918:     assertTrue(map.containsValue("bang"));
1:437d918:     assertTrue(map.containsValue("beta"));
1:437d918:     assertFalse(map.containsKey(999));
1:437d918:     assertFalse(map.containsValue("something"));
1:437d918:   }
1:437d918: 
1:437d918:   @Test
1:437d918:   public void testRehash() {
1:437d918:     FastByIDMap<String> map = buildTestFastMap();
1:437d918:     map.remove(500000L);
1:437d918:     map.rehash();
1:437d918:     assertNull(map.get(500000L));
1:437d918:     assertEquals("bang", map.get(47L));
1:437d918:   }
1:437d918:   
1:437d918:   @Test
1:437d918:   public void testGrow() {
1:02ff22f:     FastByIDMap<String> map = new FastByIDMap<>(1,1);
1:437d918:     map.put(500000L, "alpha");
1:437d918:     map.put(47L, "bang");
1:437d918:     assertNull(map.get(500000L));
1:437d918:     assertEquals("bang", map.get(47L));
1:437d918:   }
1:437d918:    
1:437d918:   @Test
1:437d918:   public void testVersusHashMap() {
1:02ff22f:     FastByIDMap<String> actual = new FastByIDMap<>();
1:437d918:     Map<Long, String> expected = Maps.newHashMapWithExpectedSize(1000000);
1:437d918:     Random r = RandomUtils.getRandom();
1:437d918:     for (int i = 0; i < 1000000; i++) {
1:437d918:       double d = r.nextDouble();
1:437d918:       Long key = (long) r.nextInt(100);
1:437d918:       if (d < 0.4) {
1:437d918:         assertEquals(expected.get(key), actual.get(key));
1:437d918:       } else {
1:437d918:         if (d < 0.7) {
1:437d918:           assertEquals(expected.put(key, "bang"), actual.put(key, "bang"));
1:437d918:         } else {
1:437d918:           assertEquals(expected.remove(key), actual.remove(key));
1:437d918:         }
1:437d918:         assertEquals(expected.size(), actual.size());
1:437d918:         assertEquals(expected.isEmpty(), actual.isEmpty());
1:437d918:       }
1:437d918:     }
1:437d918:   }
1:437d918:   
1:437d918:   @Test
1:437d918:   public void testMaxSize() {
1:02ff22f:     FastByIDMap<String> map = new FastByIDMap<>();
1:437d918:     map.put(4, "bang");
1:437d918:     assertEquals(1, map.size());
1:437d918:     map.put(47L, "bang");
1:437d918:     assertEquals(2, map.size());
1:437d918:     assertNull(map.get(500000L));
1:437d918:     map.put(47L, "buzz");
1:437d918:     assertEquals(2, map.size());
1:437d918:     assertEquals("buzz", map.get(47L));
1:437d918:   }
1:437d918:   
1:437d918:   
1:437d918:   private static FastByIDMap<String> buildTestFastMap() {
1:02ff22f:     FastByIDMap<String> map = new FastByIDMap<>();
1:437d918:     map.put(500000L, "alpha");
1:437d918:     map.put(47L, "bang");
1:437d918:     map.put(2L, "beta");
1:437d918:     return map;
1:437d918:   }
1:437d918:   
1:437d918: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<Long> map = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<Long> map = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<Long> map = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<Long> map = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<String> map = new FastByIDMap<>(1,1);
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<String> actual = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<String> map = new FastByIDMap<>();
/////////////////////////////////////////////////////////////////////////
1:     FastByIDMap<String> map = new FastByIDMap<>();
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:437d918
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.common;
1: 
1: import com.google.common.collect.Maps;
1: import org.apache.mahout.cf.taste.impl.TasteTestCase;
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Test;
1: 
1: import java.util.Map;
1: import java.util.Random;
1: 
1: /** <p>Tests {@link FastByIDMap}.</p> */
1: public final class FastByIDMapTest extends TasteTestCase {
1: 
1:   @Test
1:   public void testPutAndGet() {
0:     FastByIDMap<Long> map = new FastByIDMap<Long>();
1:     assertNull(map.get(500000L));
1:     map.put(500000L, 2L);
1:     assertEquals(2L, (long) map.get(500000L));
1:   }
1:   
1:   @Test
1:   public void testRemove() {
0:     FastByIDMap<Long> map = new FastByIDMap<Long>();
1:     map.put(500000L, 2L);
1:     map.remove(500000L);
1:     assertEquals(0, map.size());
1:     assertTrue(map.isEmpty());
1:     assertNull(map.get(500000L));
1:   }
1:   
1:   @Test
1:   public void testClear() {
0:     FastByIDMap<Long> map = new FastByIDMap<Long>();
1:     map.put(500000L, 2L);
1:     map.clear();
1:     assertEquals(0, map.size());
1:     assertTrue(map.isEmpty());
1:     assertNull(map.get(500000L));
1:   }
1:   
1:   @Test
1:   public void testSizeEmpty() {
0:     FastByIDMap<Long> map = new FastByIDMap<Long>();
1:     assertEquals(0, map.size());
1:     assertTrue(map.isEmpty());
1:     map.put(500000L, 2L);
1:     assertEquals(1, map.size());
1:     assertFalse(map.isEmpty());
1:     map.remove(500000L);
1:     assertEquals(0, map.size());
1:     assertTrue(map.isEmpty());
1:   }
1:   
1:   @Test
1:   public void testContains() {
1:     FastByIDMap<String> map = buildTestFastMap();
1:     assertTrue(map.containsKey(500000L));
1:     assertTrue(map.containsKey(47L));
1:     assertTrue(map.containsKey(2L));
1:     assertTrue(map.containsValue("alpha"));
1:     assertTrue(map.containsValue("bang"));
1:     assertTrue(map.containsValue("beta"));
1:     assertFalse(map.containsKey(999));
1:     assertFalse(map.containsValue("something"));
1:   }
1: 
1:   @Test
1:   public void testRehash() {
1:     FastByIDMap<String> map = buildTestFastMap();
1:     map.remove(500000L);
1:     map.rehash();
1:     assertNull(map.get(500000L));
1:     assertEquals("bang", map.get(47L));
1:   }
1:   
1:   @Test
1:   public void testGrow() {
0:     FastByIDMap<String> map = new FastByIDMap<String>(1,1);
1:     map.put(500000L, "alpha");
1:     map.put(47L, "bang");
1:     assertNull(map.get(500000L));
1:     assertEquals("bang", map.get(47L));
1:   }
1:    
1:   @Test
1:   public void testVersusHashMap() {
0:     FastByIDMap<String> actual = new FastByIDMap<String>();
1:     Map<Long, String> expected = Maps.newHashMapWithExpectedSize(1000000);
1:     Random r = RandomUtils.getRandom();
1:     for (int i = 0; i < 1000000; i++) {
1:       double d = r.nextDouble();
1:       Long key = (long) r.nextInt(100);
1:       if (d < 0.4) {
1:         assertEquals(expected.get(key), actual.get(key));
1:       } else {
1:         if (d < 0.7) {
1:           assertEquals(expected.put(key, "bang"), actual.put(key, "bang"));
1:         } else {
1:           assertEquals(expected.remove(key), actual.remove(key));
1:         }
1:         assertEquals(expected.size(), actual.size());
1:         assertEquals(expected.isEmpty(), actual.isEmpty());
1:       }
1:     }
1:   }
1:   
1:   @Test
1:   public void testMaxSize() {
0:     FastByIDMap<String> map = new FastByIDMap<String>();
1:     map.put(4, "bang");
1:     assertEquals(1, map.size());
1:     map.put(47L, "bang");
1:     assertEquals(2, map.size());
1:     assertNull(map.get(500000L));
1:     map.put(47L, "buzz");
1:     assertEquals(2, map.size());
1:     assertEquals("buzz", map.get(47L));
1:   }
1:   
1:   
1:   private static FastByIDMap<String> buildTestFastMap() {
0:     FastByIDMap<String> map = new FastByIDMap<String>();
1:     map.put(500000L, "alpha");
1:     map.put(47L, "bang");
1:     map.put(2L, "beta");
1:     return map;
1:   }
1:   
1: }
============================================================================