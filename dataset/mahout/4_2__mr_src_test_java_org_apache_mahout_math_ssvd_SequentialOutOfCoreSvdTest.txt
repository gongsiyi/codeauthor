1:564c3e1: /*
1:564c3e1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:564c3e1:  * contributor license agreements.  See the NOTICE file distributed with
1:564c3e1:  * this work for additional information regarding copyright ownership.
1:564c3e1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:564c3e1:  * (the "License"); you may not use this file except in compliance with
1:564c3e1:  * the License.  You may obtain a copy of the License at
1:564c3e1:  *
1:564c3e1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:564c3e1:  *
1:564c3e1:  * Unless required by applicable law or agreed to in writing, software
1:564c3e1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:564c3e1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:564c3e1:  * See the License for the specific language governing permissions and
1:564c3e1:  * limitations under the License.
1:564c3e1:  */
1:564c3e1: 
1:c898d27: package org.apache.mahout.math.ssvd;
4:c898d27: 
1:3be3d23: import com.google.common.collect.Lists;
1:564c3e1: import org.apache.mahout.common.MahoutTestCase;
1:c898d27: import org.apache.mahout.math.DenseMatrix;
1:c898d27: import org.apache.mahout.math.DenseVector;
1:c898d27: import org.apache.mahout.math.DiagonalMatrix;
1:c898d27: import org.apache.mahout.math.Matrix;
1:c898d27: import org.apache.mahout.math.MatrixWritable;
1:c898d27: import org.apache.mahout.math.RandomTrinaryMatrix;
1:3be3d23: import org.apache.mahout.math.SingularValueDecomposition;
1:c898d27: import org.apache.mahout.math.Vector;
1:f5cce9b: import org.apache.mahout.math.function.Functions;
1:c898d27: import org.junit.Before;
1:c898d27: import org.junit.Test;
1:c898d27: 
1:c898d27: import java.io.DataInputStream;
1:c898d27: import java.io.DataOutputStream;
1:c898d27: import java.io.File;
1:c898d27: import java.io.FileInputStream;
1:c898d27: import java.io.FileOutputStream;
1:c898d27: import java.io.FilenameFilter;
1:c898d27: import java.io.IOException;
1:c898d27: import java.util.Arrays;
1:c898d27: import java.util.Collections;
1:c898d27: import java.util.List;
1:c898d27: 
1:564c3e1: public final class SequentialOutOfCoreSvdTest extends MahoutTestCase {
1:c898d27: 
1:c898d27:   private File tmpDir;
1:c898d27: 
1:564c3e1:   @Override
1:c898d27:   @Before
1:564c3e1:   public void setUp() throws Exception {
1:564c3e1:     super.setUp();
1:1540cec:     tmpDir = getTestTempDir("matrix");
3:c898d27:   }
1:c898d27: 
1:c898d27:   @Test
1:c898d27:   public void testSingularValues() throws IOException {
1:f5cce9b:     Matrix A = lowRankMatrix(tmpDir, "A", 200, 970, 1020);
1:c898d27: 
1:c898d27:     List<File> partsOfA = Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
1:564c3e1:       @Override
1:1540cec:       public boolean accept(File file, String fileName) {
1:1540cec:         return fileName.matches("A-.*");
1:c898d27:       }
1:c898d27:     }));
1:3be3d23: 
1:3be3d23:     // rearrange A to make sure we don't depend on lexical ordering.
1:3be3d23:     partsOfA = Lists.reverse(partsOfA);
1:3be3d23:     SequentialOutOfCoreSvd s = new SequentialOutOfCoreSvd(partsOfA, tmpDir, 100, 210);
1:f5cce9b:     SequentialBigSvd svd = new SequentialBigSvd(A, 100);
1:c898d27: 
1:c898d27:     Vector reference = new DenseVector(svd.getSingularValues()).viewPart(0, 6);
1:f5cce9b:     Vector actual = s.getSingularValues().viewPart(0, 6);
1:1540cec:     assertEquals(0, reference.minus(actual).maxValue(), 1.0e-9);
1:c898d27: 
1:3be3d23:     s.computeU(partsOfA, tmpDir);
1:c898d27:     Matrix u = readBlockMatrix(Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
2:c898d27:       @Override
1:1540cec:       public boolean accept(File file, String fileName) {
1:1540cec:         return fileName.matches("U-.*");
1:c898d27:       }
1:f5cce9b:     })));
1:c898d27: 
1:3be3d23:     s.computeV(tmpDir, A.columnSize());
1:c898d27:     Matrix v = readBlockMatrix(Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
1:c898d27:       @Override
1:1540cec:       public boolean accept(File file, String fileName) {
1:1540cec:         return fileName.matches("V-.*");
1:c898d27:       }
1:f5cce9b:     })));
1:c898d27: 
1:f5cce9b:     // The values in A are pretty big so this is a pretty tight relative tolerance
1:051cbcf:     assertEquals(0, A.minus(u.times(new DiagonalMatrix(s.getSingularValues())).times(v.transpose())).aggregate(Functions.PLUS, Functions.ABS), 1.0e-7);
1:c898d27:   }
1:c898d27: 
1:3be3d23:   /**
1:3be3d23:    * Reads a list of files that contain a column of blocks.  It is assumed that the files
1:3be3d23:    * can be sorted lexicographically to determine the order they should be stacked.  It
1:3be3d23:    * is also assumed here that all blocks will be the same size except the last one which
1:3be3d23:    * may be shorter than the others.
1:3be3d23:    * @param files  The list of files to read.
1:3be3d23:    * @return  The row-wise concatenation of the matrices in the files.
1:3be3d23:    * @throws IOException If we can't read the sub-matrices.
1:3be3d23:    */
1:564c3e1:   private static Matrix readBlockMatrix(List<File> files) throws IOException {
1:3be3d23:     // force correct ordering
1:c898d27:     Collections.sort(files);
1:3be3d23: 
1:3be3d23:     // initially, we don't know what size buffer to hold
1:f5cce9b:     int nrows = -1;
1:f5cce9b:     int ncols = -1;
1:f5cce9b:     Matrix r = null;
1:c898d27: 
1:c898d27:     MatrixWritable m = new MatrixWritable();
1:c898d27: 
1:c898d27:     int row = 0;
1:c898d27:     for (File file : files) {
1:c898d27:       DataInputStream in = new DataInputStream(new FileInputStream(file));
1:c898d27:       m.readFields(in);
1:c898d27:       in.close();
1:f5cce9b:       if (nrows == -1) {
1:3be3d23:         // now we can set an upper bound on how large our result will be
1:f5cce9b:         nrows = m.get().rowSize() * files.size();
1:f5cce9b:         ncols = m.get().columnSize();
1:f5cce9b:         r = new DenseMatrix(nrows, ncols);
1:f5cce9b:       }
1:c898d27:       r.viewPart(row, m.get().rowSize(), 0, r.columnSize()).assign(m.get());
1:c898d27:       row += m.get().rowSize();
1:c898d27:     }
1:3be3d23:     // at the end, row will have the true size of the result
1:f5cce9b:     if (row != nrows && r != null) {
1:3be3d23:       // and if that isn't the size of the buffer, we need to crop the result a bit
1:f5cce9b:       r = r.viewPart(0, row, 0, ncols);
1:f5cce9b:     }
1:c898d27:     return r;
1:c898d27:   }
1:c898d27: 
1:3be3d23:   @Test
1:3be3d23:   public void testLeftVectors() throws IOException {
1:3be3d23:     Matrix A = lowRankMatrixInMemory(20, 20);
1:3be3d23: 
1:3be3d23:     SequentialBigSvd s = new SequentialBigSvd(A, 6);
1:3be3d23:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1:3be3d23: 
1:3be3d23:     // can only check first few singular vectors
1:3be3d23:     Matrix u1 = svd.getU().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:3be3d23:     Matrix u2 = s.getU().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:3be3d23:     assertEquals(u1, u2);
1:3be3d23:   }
1:3be3d23: 
1:229aeff:   private static Matrix lowRankMatrixInMemory(int rows, int columns) throws IOException {
1:3be3d23:     return lowRankMatrix(null, null, 0, rows, columns);
1:3be3d23:   }
1:3be3d23: 
1:229aeff:   private static void assertEquals(Matrix u1, Matrix u2) {
1:229aeff:     assertEquals(0.0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1.0e-10);
1:3be3d23:   }
1:3be3d23: 
1:3be3d23:   @Test
1:3be3d23:   public void testRightVectors() throws IOException {
1:3be3d23:     Matrix A = lowRankMatrixInMemory(20, 20);
1:3be3d23: 
1:3be3d23:     SequentialBigSvd s = new SequentialBigSvd(A, 6);
1:3be3d23:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1:3be3d23: 
1:3be3d23:     Matrix v1 = svd.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:3be3d23:     Matrix v2 = s.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:3be3d23:     assertEquals(v1, v2);
1:3be3d23:   }
1:c898d27: 
1:564c3e1:   private static Matrix lowRankMatrix(File tmpDir, String aBase, int rowsPerSlice, int rows, int columns) throws IOException {
1:c898d27:     int rank = 10;
1:f5cce9b:     Matrix u = new RandomTrinaryMatrix(1, rows, rank, false);
1:c898d27:     Matrix d = new DenseMatrix(rank, rank);
1:c898d27:     d.set(0, 0, 5);
1:c898d27:     d.set(1, 1, 3);
1:c898d27:     d.set(2, 2, 1);
1:f5cce9b:     d.set(3, 3, 0.5);
1:f5cce9b:     Matrix v = new RandomTrinaryMatrix(2, columns, rank, false);
1:c898d27:     Matrix a = u.times(d).times(v.transpose());
1:c898d27: 
1:3be3d23:     if (tmpDir != null) {
1:3be3d23:       for (int i = 0; i < a.rowSize(); i += rowsPerSlice) {
1:3be3d23:         MatrixWritable m = new MatrixWritable(a.viewPart(i, Math.min(a.rowSize() - i, rowsPerSlice), 0, a.columnSize()));
1:3be3d23:         DataOutputStream out = new DataOutputStream(new FileOutputStream(new File(tmpDir, String.format("%s-%09d", aBase, i))));
1:3be3d23:         try {
1:3be3d23:           m.write(out);
1:3be3d23:         } finally {
1:3be3d23:           out.close();
1:3be3d23:         }
1:c898d27:       }
1:c898d27:     }
1:c898d27:     return a;
1:c898d27:   }
1:c898d27: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:   private static Matrix lowRankMatrixInMemory(int rows, int columns) throws IOException {
1:   private static void assertEquals(Matrix u1, Matrix u2) {
1:     assertEquals(0.0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1.0e-10);
commit:051cbcf
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, A.minus(u.times(new DiagonalMatrix(s.getSingularValues())).times(v.transpose())).aggregate(Functions.PLUS, Functions.ABS), 1.0e-7);
commit:1540cec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     tmpDir = getTestTempDir("matrix");
/////////////////////////////////////////////////////////////////////////
1:       public boolean accept(File file, String fileName) {
1:         return fileName.matches("A-.*");
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(0, reference.minus(actual).maxValue(), 1.0e-9);
1:       public boolean accept(File file, String fileName) {
1:         return fileName.matches("U-.*");
1:       public boolean accept(File file, String fileName) {
1:         return fileName.matches("V-.*");
commit:564c3e1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.mahout.common.MahoutTestCase;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public final class SequentialOutOfCoreSvdTest extends MahoutTestCase {
1:   @Override
1:   public void setUp() throws Exception {
1:     super.setUp();
0:     assertTrue(tmpDir.delete());
0:     assertTrue(tmpDir.mkdir());
1:   @Override
0:   public void tearDown() throws Exception {
0:       assertTrue(f.delete());
0:     assertTrue(tmpDir.delete());
0:     super.tearDown();
/////////////////////////////////////////////////////////////////////////
1:   private static Matrix readBlockMatrix(List<File> files) throws IOException {
/////////////////////////////////////////////////////////////////////////
0: //    assertEquals(0.0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1e-10);
0: //    assertEquals(0.0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1e-10);
/////////////////////////////////////////////////////////////////////////
1:   private static Matrix lowRankMatrix(File tmpDir, String aBase, int rowsPerSlice, int rows, int columns) throws IOException {
author:Ted Dunning
-------------------------------------------------------------------------------
commit:3be3d23
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.SingularValueDecomposition;
/////////////////////////////////////////////////////////////////////////
1: 
1:     // rearrange A to make sure we don't depend on lexical ordering.
1:     partsOfA = Lists.reverse(partsOfA);
1:     SequentialOutOfCoreSvd s = new SequentialOutOfCoreSvd(partsOfA, tmpDir, 100, 210);
1:     s.computeU(partsOfA, tmpDir);
/////////////////////////////////////////////////////////////////////////
1:     s.computeV(tmpDir, A.columnSize());
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Reads a list of files that contain a column of blocks.  It is assumed that the files
1:    * can be sorted lexicographically to determine the order they should be stacked.  It
1:    * is also assumed here that all blocks will be the same size except the last one which
1:    * may be shorter than the others.
1:    * @param files  The list of files to read.
1:    * @return  The row-wise concatenation of the matrices in the files.
1:    * @throws IOException If we can't read the sub-matrices.
1:    */
1:     // force correct ordering
1: 
1:     // initially, we don't know what size buffer to hold
/////////////////////////////////////////////////////////////////////////
1:         // now we can set an upper bound on how large our result will be
/////////////////////////////////////////////////////////////////////////
1:     // at the end, row will have the true size of the result
1:       // and if that isn't the size of the buffer, we need to crop the result a bit
1:   @Test
1:   public void testLeftVectors() throws IOException {
1:     Matrix A = lowRankMatrixInMemory(20, 20);
1: 
1:     SequentialBigSvd s = new SequentialBigSvd(A, 6);
1:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1: 
1:     // can only check first few singular vectors
1:     Matrix u1 = svd.getU().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:     Matrix u2 = s.getU().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:     assertEquals(u1, u2);
1:   }
1: 
0:   private Matrix lowRankMatrixInMemory(int rows, int columns) throws IOException {
1:     return lowRankMatrix(null, null, 0, rows, columns);
1:   }
1: 
0:   private void assertEquals(Matrix u1, Matrix u2) {
0:     assertEquals(0.0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1e-10);
1:   }
1: 
1:   @Test
1:   public void testRightVectors() throws IOException {
1:     Matrix A = lowRankMatrixInMemory(20, 20);
1: 
1:     SequentialBigSvd s = new SequentialBigSvd(A, 6);
1:     SingularValueDecomposition svd = new SingularValueDecomposition(A);
1: 
1:     Matrix v1 = svd.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:     Matrix v2 = s.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
1:     assertEquals(v1, v2);
1:   }
/////////////////////////////////////////////////////////////////////////
1:     if (tmpDir != null) {
1:       for (int i = 0; i < a.rowSize(); i += rowsPerSlice) {
1:         MatrixWritable m = new MatrixWritable(a.viewPart(i, Math.min(a.rowSize() - i, rowsPerSlice), 0, a.columnSize()));
1:         DataOutputStream out = new DataOutputStream(new FileOutputStream(new File(tmpDir, String.format("%s-%09d", aBase, i))));
1:         try {
1:           m.write(out);
1:         } finally {
1:           out.close();
1:         }
commit:f5cce9b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
1:     Matrix A = lowRankMatrix(tmpDir, "A", 200, 970, 1020);
/////////////////////////////////////////////////////////////////////////
0:     SequentialOutOfCoreSvd s = new SequentialOutOfCoreSvd(partsOfA, "U", "V", tmpDir, 100, 210);
1:     SequentialBigSvd svd = new SequentialBigSvd(A, 100);
1:     Vector actual = s.getSingularValues().viewPart(0, 6);
0:     assertEquals(0, reference.minus(actual).maxValue(), 1e-9);
/////////////////////////////////////////////////////////////////////////
1:     })));
/////////////////////////////////////////////////////////////////////////
1:     })));
1:     // The values in A are pretty big so this is a pretty tight relative tolerance
0:     assertEquals(0, A.minus(u.times(new DiagonalMatrix(s.getSingularValues())).times(v.transpose())).aggregate(Functions.PLUS, Functions.ABS), 1e-7);
0:   private Matrix readBlockMatrix(List<File> files) throws IOException {
1:     int nrows = -1;
1:     int ncols = -1;
1:     Matrix r = null;
/////////////////////////////////////////////////////////////////////////
1:       if (nrows == -1) {
1:         nrows = m.get().rowSize() * files.size();
1:         ncols = m.get().columnSize();
1:         r = new DenseMatrix(nrows, ncols);
1:       }
1:     if (row != nrows && r != null) {
1:       r = r.viewPart(0, row, 0, ncols);
1:     }
/////////////////////////////////////////////////////////////////////////
0:   private Matrix lowRankMatrix(File tmpDir, String aBase, int rowsPerSlice, int rows, int columns) throws IOException {
1:     Matrix u = new RandomTrinaryMatrix(1, rows, rank, false);
1:     d.set(3, 3, 0.5);
1:     Matrix v = new RandomTrinaryMatrix(2, columns, rank, false);
0:       MatrixWritable m = new MatrixWritable(a.viewPart(i, Math.min(a.rowSize() - i, rowsPerSlice), 0, a.columnSize()));
commit:c898d27
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.math.ssvd;
1: 
1: import org.apache.mahout.math.DenseMatrix;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.DiagonalMatrix;
1: import org.apache.mahout.math.Matrix;
1: import org.apache.mahout.math.MatrixWritable;
1: import org.apache.mahout.math.RandomTrinaryMatrix;
1: import org.apache.mahout.math.Vector;
0: import org.junit.After;
0: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.FilenameFilter;
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: public class SequentialOutOfCoreSvdTest {
1: 
1:   private File tmpDir;
1: 
1:   @Before
0:   public void setup() throws IOException {
0:     tmpDir = File.createTempFile("matrix", "");
0:     Assert.assertTrue(tmpDir.delete());
0:     Assert.assertTrue(tmpDir.mkdir());
1:   }
1: 
0:   @After
0:   public void tearDown() {
0:     for (File f : tmpDir.listFiles()) {
0:       Assert.assertTrue(f.delete());
1:     }
0:     Assert.assertTrue(tmpDir.delete());
1:   }
1: 
1:   @Test
1:   public void testSingularValues() throws IOException {
0:     Matrix A = lowRankMatrix(tmpDir, "A", 200);
1: 
1:     List<File> partsOfA = Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
1:       @Override
0:       public boolean accept(File file, String s) {
0:         return s.matches("A-.*");
1:       }
1:     }));
0:     SequentialOutOfCoreSvd s = new SequentialOutOfCoreSvd(partsOfA, "U", "V", tmpDir, 100, 200);
0:     SequentialBigSvd svd = new SequentialBigSvd(A, 20);
1: 
1:     Vector reference = new DenseVector(svd.getSingularValues()).viewPart(0, 6);
0:     assertEquals(0, reference.minus(s.getSingularValues().viewPart(0, 6)).maxValue(), 1e-9);
1: 
0:     s.computeU(partsOfA, "U-", tmpDir);
1:     Matrix u = readBlockMatrix(Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
1:       @Override
0:       public boolean accept(File file, String s) {
0:         return s.matches("U-.*");
1:       }
0:     })), A.rowSize(), 15);
1: 
0:     s.computeV(tmpDir, "V-", A.columnSize());
1:     Matrix v = readBlockMatrix(Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
1:       @Override
0:       public boolean accept(File file, String s) {
0:         return s.matches("V-.*");
1:       }
0:     })), A.rowSize(), 15);
1: 
0:     assertEquals(A, u.times(new DiagonalMatrix(s.getSingularValues())).times(v.transpose()));
1:   }
1: 
0:   private Matrix readBlockMatrix(List<File> files, int nrows, int ncols) throws IOException {
1:     Collections.sort(files);
0:     Matrix r = new DenseMatrix(nrows, ncols);
1: 
1:     MatrixWritable m = new MatrixWritable();
1: 
1:     int row = 0;
1:     for (File file : files) {
1:       DataInputStream in = new DataInputStream(new FileInputStream(file));
1:       m.readFields(in);
1:       in.close();
1:       r.viewPart(row, m.get().rowSize(), 0, r.columnSize()).assign(m.get());
1:       row += m.get().rowSize();
1:     }
1:     return r;
1:   }
1: 
0: //  @Test
0: //  public void testLeftVectors() {
0: //    Matrix A = lowRankMatrix();
0: //
0: //    SequentialBigSvd s = new SequentialBigSvd(A, 6);
0: //    SingularValueDecomposition svd = new SingularValueDecomposition(A);
0: //
0: //    // can only check first few singular vectors
0: //    Matrix u1 = svd.getU().viewPart(0, 20, 0, 3).assign(Functions.ABS);
0: //    Matrix u2 = s.getU().viewPart(0, 20, 0, 3).assign(Functions.ABS);
0: //    assertEquals(u1, u2);
0: //  }
0: //
0: //  private void assertEquals(Matrix u1, Matrix u2) {
0: //    Assert.assertEquals(0.0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1e-10);
0: //  }
0: //
0: //  private void assertEquals(Vector u1, Vector u2) {
0: //    Assert.assertEquals(0.0, u1.minus(u2).aggregate(Functions.MAX, Functions.ABS), 1e-10);
0: //  }
0: //
0: //  @Test
0: //  public void testRightVectors() {
0: //    Matrix A = lowRankMatrix();
0: //
0: //    SequentialBigSvd s = new SequentialBigSvd(A, 6);
0: //    SingularValueDecomposition svd = new SingularValueDecomposition(A);
0: //
0: //    Matrix v1 = svd.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
0: //    Matrix v2 = s.getV().viewPart(0, 20, 0, 3).assign(Functions.ABS);
0: //    assertEquals(v1, v2);
0: //  }
1: 
0:   private Matrix lowRankMatrix(File tmpDir, String aBase, int rowsPerSlice) throws IOException {
1:     int rank = 10;
0:     Matrix u = new RandomTrinaryMatrix(1, 1000, rank, false);
1:     Matrix d = new DenseMatrix(rank, rank);
1:     d.set(0, 0, 5);
1:     d.set(1, 1, 3);
1:     d.set(2, 2, 1);
0:     d.set(3, 3, 0);
0:     Matrix v = new RandomTrinaryMatrix(2, 1000, rank, false);
1:     Matrix a = u.times(d).times(v.transpose());
1: 
0:     for (int i = 0; i < a.rowSize(); i += rowsPerSlice) {
0:       MatrixWritable m = new MatrixWritable(a.viewPart(i, rowsPerSlice, 0, a.columnSize()));
0:       DataOutputStream out = new DataOutputStream(new FileOutputStream(new File(tmpDir, String.format("%s-%09d", aBase, i))));
0:       try {
0:         m.write(out);
0:       } finally {
0:         out.close();
1:       }
1:     }
1:     return a;
1:   }
1: 
1: }
============================================================================