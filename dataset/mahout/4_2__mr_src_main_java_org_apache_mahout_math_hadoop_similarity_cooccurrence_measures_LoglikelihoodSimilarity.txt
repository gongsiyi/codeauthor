1:845cbcd: /**
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
2:845cbcd: 
1:845cbcd: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1:845cbcd: 
1:845cbcd: import org.apache.mahout.math.stats.LogLikelihood;
1:845cbcd: 
1:845cbcd: public class LoglikelihoodSimilarity extends CountbasedMeasure {
1:845cbcd: 
2:845cbcd:   @Override
1:845cbcd:   public double similarity(double summedAggregations, double normA, double normB, int numberOfColumns) {
1:229aeff:     double logLikelihood =
1:229aeff:         LogLikelihood.logLikelihoodRatio((long) summedAggregations,
1:229aeff:                                          (long) (normB - summedAggregations),
1:229aeff:                                          (long) (normA - summedAggregations),
1:229aeff:                                          (long) (numberOfColumns - normA - normB + summedAggregations));
1:845cbcd:     return 1.0 - 1.0 / (1.0 + logLikelihood);
2:845cbcd:   }
1:845cbcd: 
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1:     double logLikelihood =
1:         LogLikelihood.logLikelihoodRatio((long) summedAggregations,
1:                                          (long) (normB - summedAggregations),
1:                                          (long) (normA - summedAggregations),
1:                                          (long) (numberOfColumns - normA - normB + summedAggregations));
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:4cad7a0
/////////////////////////////////////////////////////////////////////////
commit:4e64e04
/////////////////////////////////////////////////////////////////////////
0:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double threshold) {
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1: 
1: import org.apache.mahout.math.stats.LogLikelihood;
1: 
1: public class LoglikelihoodSimilarity extends CountbasedMeasure {
1: 
1:   @Override
1:   public double similarity(double summedAggregations, double normA, double normB, int numberOfColumns) {
0:     double logLikelihood = LogLikelihood.logLikelihoodRatio((long) summedAggregations, (long) (normB - summedAggregations),
0:         (long) (normA - summedAggregations), (long) (numberOfColumns - normA - normB + summedAggregations));
1: 
1:     return 1.0 - 1.0 / (1.0 + logLikelihood);
1:   }
1: 
1:   @Override
0:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double treshold) {
0:     return true;
1:   }
1: }
============================================================================