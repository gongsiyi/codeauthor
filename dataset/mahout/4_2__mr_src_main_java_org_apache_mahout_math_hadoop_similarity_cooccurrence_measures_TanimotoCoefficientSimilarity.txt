1:845cbcd: /**
1:845cbcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845cbcd:  * contributor license agreements.  See the NOTICE file distributed with
1:845cbcd:  * this work for additional information regarding copyright ownership.
1:845cbcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845cbcd:  * (the "License"); you may not use this file except in compliance with
1:845cbcd:  * the License.  You may obtain a copy of the License at
1:845cbcd:  *
1:845cbcd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:845cbcd:  *
1:845cbcd:  * Unless required by applicable law or agreed to in writing, software
1:845cbcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845cbcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845cbcd:  * See the License for the specific language governing permissions and
1:845cbcd:  * limitations under the License.
1:845cbcd:  */
1:845cbcd: 
1:845cbcd: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1:845cbcd: 
1:845cbcd: public class TanimotoCoefficientSimilarity extends CountbasedMeasure {
1:845cbcd: 
1:845cbcd:   @Override
1:845cbcd:   public double similarity(double dots, double normA, double normB, int numberOfColumns) {
1:ce91968:     // Return 0 even when dots == 0 since this will cause it to be ignored -- not NaN
1:845cbcd:     return dots / (normA + normB - dots);
1:845cbcd:   }
1:845cbcd: 
1:845cbcd:   @Override
1:4cad7a0:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double maxValueB,
1:4cad7a0:       double threshold) {
1:6d16230:     return numNonZeroEntriesA >= numNonZeroEntriesB * threshold
1:6d16230:         && numNonZeroEntriesB >= numNonZeroEntriesA * threshold;
1:845cbcd:   }
1:845cbcd: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:6d16230
/////////////////////////////////////////////////////////////////////////
1:     return numNonZeroEntriesA >= numNonZeroEntriesB * threshold
1:         && numNonZeroEntriesB >= numNonZeroEntriesA * threshold;
commit:4cad7a0
/////////////////////////////////////////////////////////////////////////
1:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double maxValueB,
1:       double threshold) {
0:     return numNonZeroEntriesA >= numNonZeroEntriesB * threshold &&
0:         numNonZeroEntriesB >= numNonZeroEntriesA * threshold;
commit:4e64e04
/////////////////////////////////////////////////////////////////////////
0:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double threshold) {
0:     return numNonZeroEntriesA >= numNonZeroEntriesB * threshold;
commit:845cbcd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.hadoop.similarity.cooccurrence.measures;
1: 
1: public class TanimotoCoefficientSimilarity extends CountbasedMeasure {
1: 
1:   @Override
1:   public double similarity(double dots, double normA, double normB, int numberOfColumns) {
1:     return dots / (normA + normB - dots);
1:   }
1: 
1:   @Override
0:   public boolean consider(int numNonZeroEntriesA, int numNonZeroEntriesB, double maxValueA, double treshold) {
0:     return numNonZeroEntriesA >= numNonZeroEntriesB * treshold;
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:ce91968
/////////////////////////////////////////////////////////////////////////
1:     // Return 0 even when dots == 0 since this will cause it to be ignored -- not NaN
0:     return dots / (normA + normB - dots);
commit:2e2ef2c
/////////////////////////////////////////////////////////////////////////
0:     return dots == 0 ? Double.NaN : dots / (normA + normB - dots);
============================================================================