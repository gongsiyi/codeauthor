1:e3fb0c4: /**
1:e3fb0c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e3fb0c4:  * contributor license agreements.  See the NOTICE file distributed with
1:e3fb0c4:  * this work for additional information regarding copyright ownership.
1:e3fb0c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e3fb0c4:  * (the "License"); you may not use this file except in compliance with
1:e3fb0c4:  * the License.  You may obtain a copy of the License at
1:e3fb0c4:  *
1:e3fb0c4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e3fb0c4:  *
1:e3fb0c4:  * Unless required by applicable law or agreed to in writing, software
1:e3fb0c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e3fb0c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e3fb0c4:  * See the License for the specific language governing permissions and
1:e3fb0c4:  * limitations under the License.
1:e3fb0c4:  */
1:e3fb0c4: 
1:e3fb0c4: package org.apache.mahout.classifier.naivebayes.training;
1:e3fb0c4: 
1:e3fb0c4: import java.io.IOException;
1:e3fb0c4: 
1:e3fb0c4: import org.apache.hadoop.io.IntWritable;
1:e3fb0c4: import org.apache.hadoop.io.Text;
1:e3fb0c4: import org.apache.hadoop.mapreduce.Mapper;
1:3cadef9: import org.apache.mahout.math.DenseVector;
1:e3fb0c4: import org.apache.mahout.math.RandomAccessSparseVector;
1:e3fb0c4: import org.apache.mahout.math.Vector;
1:e3fb0c4: import org.apache.mahout.math.VectorWritable;
1:528ffcd: import org.apache.mahout.math.function.Functions;
1:e3fb0c4: 
1:3cadef9: import com.google.common.base.Preconditions;
1:3cadef9: 
1:e3fb0c4: public class WeightsMapper extends Mapper<IntWritable, VectorWritable, Text, VectorWritable> {
1:e3fb0c4: 
1:e3fb0c4:   static final String NUM_LABELS = WeightsMapper.class.getName() + ".numLabels";
1:e3fb0c4: 
1:e3fb0c4:   private Vector weightsPerFeature;
1:e3fb0c4:   private Vector weightsPerLabel;
1:e3fb0c4: 
1:e3fb0c4:   @Override
1:e3fb0c4:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:d8d721a:     super.setup(ctx);
1:e3fb0c4:     int numLabels = Integer.parseInt(ctx.getConfiguration().get(NUM_LABELS));
1:cd167f9:     Preconditions.checkArgument(numLabels > 0, "Wrong numLabels: " + numLabels + ". Must be > 0!");
1:3cadef9:     weightsPerLabel = new DenseVector(numLabels);
1:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4:   @Override
1:e3fb0c4:   protected void map(IntWritable index, VectorWritable value, Context ctx) throws IOException, InterruptedException {
1:e3fb0c4:     Vector instance = value.get();
1:e3fb0c4:     if (weightsPerFeature == null) {
1:e3fb0c4:       weightsPerFeature = new RandomAccessSparseVector(instance.size(), instance.getNumNondefaultElements());
1:e3fb0c4:     }
1:e3fb0c4: 
1:e3fb0c4:     int label = index.get();
1:528ffcd:     weightsPerFeature.assign(instance, Functions.PLUS);
1:e3fb0c4:     weightsPerLabel.set(label, weightsPerLabel.get(label) + instance.zSum());
1:e3fb0c4:   }
1:e3fb0c4: 
1:e3fb0c4:   @Override
1:e3fb0c4:   protected void cleanup(Context ctx) throws IOException, InterruptedException {
1:e3fb0c4:     if (weightsPerFeature != null) {
1:e3fb0c4:       ctx.write(new Text(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE), new VectorWritable(weightsPerFeature));
1:e3fb0c4:       ctx.write(new Text(TrainNaiveBayesJob.WEIGHTS_PER_LABEL), new VectorWritable(weightsPerLabel));
1:e3fb0c4:     }
1:e3fb0c4:     super.cleanup(ctx);
1:e3fb0c4:   }
1:e3fb0c4: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:cd167f9
/////////////////////////////////////////////////////////////////////////
1:     Preconditions.checkArgument(numLabels > 0, "Wrong numLabels: " + numLabels + ". Must be > 0!");
author:Robin Anil
-------------------------------------------------------------------------------
commit:3cadef9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.DenseVector;
1: import com.google.common.base.Preconditions;
1: 
/////////////////////////////////////////////////////////////////////////
1:     weightsPerLabel = new DenseVector(numLabels);
commit:a344c6b
/////////////////////////////////////////////////////////////////////////
commit:d8d721a
/////////////////////////////////////////////////////////////////////////
1:     super.setup(ctx);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:528ffcd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.function.Functions;
/////////////////////////////////////////////////////////////////////////
0: //    instance.addTo(weightsPerFeature);
1:     weightsPerFeature.assign(instance, Functions.PLUS);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:e3fb0c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.classifier.naivebayes.training;
1: 
1: import java.io.IOException;
1: 
0: import com.google.common.base.Preconditions;
1: import org.apache.hadoop.io.IntWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.math.RandomAccessSparseVector;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.VectorWritable;
1: 
1: public class WeightsMapper extends Mapper<IntWritable, VectorWritable, Text, VectorWritable> {
1: 
1:   static final String NUM_LABELS = WeightsMapper.class.getName() + ".numLabels";
1: 
1:   private Vector weightsPerFeature;
1:   private Vector weightsPerLabel;
1: 
1:   @Override
1:   protected void setup(Context ctx) throws IOException, InterruptedException {
1:     int numLabels = Integer.parseInt(ctx.getConfiguration().get(NUM_LABELS));
0:     Preconditions.checkArgument(numLabels > 0);
0:     weightsPerLabel = new RandomAccessSparseVector(numLabels);
1:   }
1: 
1:   @Override
1:   protected void map(IntWritable index, VectorWritable value, Context ctx) throws IOException, InterruptedException {
1:     Vector instance = value.get();
1:     if (weightsPerFeature == null) {
1:       weightsPerFeature = new RandomAccessSparseVector(instance.size(), instance.getNumNondefaultElements());
1:     }
1: 
1:     int label = index.get();
0:     instance.addTo(weightsPerFeature);
1:     weightsPerLabel.set(label, weightsPerLabel.get(label) + instance.zSum());
1:   }
1: 
1:   @Override
1:   protected void cleanup(Context ctx) throws IOException, InterruptedException {
1:     if (weightsPerFeature != null) {
1:       ctx.write(new Text(TrainNaiveBayesJob.WEIGHTS_PER_FEATURE), new VectorWritable(weightsPerFeature));
1:       ctx.write(new Text(TrainNaiveBayesJob.WEIGHTS_PER_LABEL), new VectorWritable(weightsPerLabel));
1:     }
1:     super.cleanup(ctx);
1:   }
1: }
============================================================================