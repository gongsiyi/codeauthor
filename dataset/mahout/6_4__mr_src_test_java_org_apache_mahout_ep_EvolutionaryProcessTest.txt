1:c0c8d9f: /**
1:c0c8d9f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c0c8d9f:  * contributor license agreements.  See the NOTICE file distributed with
1:c0c8d9f:  * this work for additional information regarding copyright ownership.
1:c0c8d9f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c0c8d9f:  * (the "License"); you may not use this file except in compliance with
1:c0c8d9f:  * the License.  You may obtain a copy of the License at
1:c0c8d9f:  *
1:c0c8d9f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c0c8d9f:  *
1:c0c8d9f:  * Unless required by applicable law or agreed to in writing, software
1:c0c8d9f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c0c8d9f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0c8d9f:  * See the License for the specific language governing permissions and
1:c0c8d9f:  * limitations under the License.
1:c0c8d9f:  */
3:c0c8d9f: 
1:115fec6: package org.apache.mahout.ep;
1:115fec6: 
1:ff79ff4: import org.apache.mahout.common.MahoutTestCase;
1:115fec6: import org.junit.Test;
1:115fec6: 
1:02f8694: import java.io.DataInput;
1:02f8694: import java.io.DataOutput;
1:02f8694: import java.io.IOException;
1:02f8694: 
1:ff79ff4: public final class EvolutionaryProcessTest extends MahoutTestCase {
1:115fec6: 
1:115fec6:   @Test
1:ff79ff4:   public void testConverges() throws Exception {
1:02ff22f:     State<Foo, Double> s0 = new State<>(new double[5], 1);
1:115fec6:     s0.setPayload(new Foo());
1:02ff22f:     EvolutionaryProcess<Foo, Double> ep = new EvolutionaryProcess<>(10, 100, s0);
1:115fec6: 
1:02f8694:     State<Foo, Double> best = null;
1:02f8694:     for (int i = 0; i < 20; i++) {
1:02f8694:       best = ep.parallelDo(new EvolutionaryProcess.Function<Payload<Double>>() {
1:115fec6:         @Override
1:02f8694:         public double apply(Payload<Double> payload, double[] params) {
1:115fec6:           int i = 1;
1:115fec6:           double sum = 0;
1:115fec6:           for (double x : params) {
1:115fec6:             sum += i * (x - i) * (x - i);
1:4b25f31:             i++;
1:115fec6:           }
1:115fec6:           return -sum;
1:115fec6:         }
1:115fec6:       });
1:115fec6: 
1:115fec6:       ep.mutatePopulation(3);
1:115fec6: 
1:4b25f31:       System.out.printf("%10.3f %.3f\n", best.getValue(), best.getOmni());
1:115fec6:     }
1:115fec6: 
1:c88c240:     ep.close();
1:ff79ff4:     assertNotNull(best);
1:ff79ff4:     assertEquals(0.0, best.getValue(), 0.02);
1:115fec6:   }
1:115fec6: 
1:02f8694:   private static class Foo implements Payload<Double> {
1:115fec6:     @Override
1:115fec6:     public Foo copy() {
1:115fec6:       return this;
1:115fec6:     }
1:4b25f31: 
1:4b25f31:     @Override
1:4b25f31:     public void update(double[] params) {
1:4b25f31:       // ignore
1:4b25f31:     }
1:02f8694: 
1:02f8694:     @Override
1:02f8694:     public void write(DataOutput dataOutput) throws IOException {
1:02f8694:       // no-op
1:02f8694:     }
1:02f8694: 
1:02f8694:     @Override
1:02f8694:     public void readFields(DataInput dataInput) throws IOException {
1:02f8694:       // no-op
1:02f8694:     }
1:115fec6:   }
1:115fec6: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     State<Foo, Double> s0 = new State<>(new double[5], 1);
1:     EvolutionaryProcess<Foo, Double> ep = new EvolutionaryProcess<>(10, 100, s0);
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:smarthi
-------------------------------------------------------------------------------
commit:c88c240
/////////////////////////////////////////////////////////////////////////
1:     ep.close();
author:Ted Dunning
-------------------------------------------------------------------------------
commit:02f8694
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
0:     State<Foo, Double> s0 = new State<Foo, Double>(new double[5], 1);
0:     EvolutionaryProcess<Foo, Double> ep = new EvolutionaryProcess<Foo, Double>(10, 100, s0);
1:     State<Foo, Double> best = null;
1:     for (int i = 0; i < 20; i++) {
1:       best = ep.parallelDo(new EvolutionaryProcess.Function<Payload<Double>>() {
1:         public double apply(Payload<Double> payload, double[] params) {
/////////////////////////////////////////////////////////////////////////
1:   private static class Foo implements Payload<Double> {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void write(DataOutput dataOutput) throws IOException {
1:       // no-op
1:     }
1: 
1:     @Override
1:     public void readFields(DataInput dataInput) throws IOException {
1:       // no-op
1:     }
commit:4b25f31
/////////////////////////////////////////////////////////////////////////
0:     for (int i = 0; i < 20  ; i++) {
0:         public double apply(Foo payload, double[] params) {
1:             i++;
/////////////////////////////////////////////////////////////////////////
1:       System.out.printf("%10.3f %.3f\n", best.getValue(), best.getOmni());
0:   private static class Foo implements Payload<Foo> {
1: 
1:     @Override
1:     public void update(double[] params) {
1:       // ignore
1:     }
commit:115fec6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.ep;
1: 
0: import org.junit.Assert;
1: import org.junit.Test;
1: 
0: import java.util.Random;
0: import java.util.concurrent.ExecutionException;
1: 
0: public class EvolutionaryProcessTest {
1:   @Test
0:   public void converges() throws ExecutionException, InterruptedException {
0:     State<Foo> s0 = new State<Foo>(new double[5], 1);
1:     s0.setPayload(new Foo());
0:     s0.setRand(new Random(1));
0:     EvolutionaryProcess<Foo> ep = new EvolutionaryProcess<Foo>(10, 100, s0);
1: 
0:     State<Foo> best = null;
0:     for (int i = 0; i < 10; i++) {
0:       best = ep.parallelDo(new EvolutionaryProcess.Function<Foo>() {
1:         @Override
0:         double apply(Foo payload, double[] params) {
1:           int i = 1;
1:           double sum = 0;
1:           for (double x : params) {
1:             sum += i * (x - i) * (x - i);
1:           }
1:           return -sum;
1:         }
1:       });
1: 
1:       ep.mutatePopulation(3);
1: 
0:       System.out.printf("%.3f\n", best.getValue());
1:     }
1: 
0:     Assert.assertNotNull(best);
0:     Assert.assertEquals(0, best.getValue(), 0.02);
1:   }
1: 
0:   private static class Foo implements Copyable<Foo> {
1:     @Override
1:     public Foo copy() {
1:       return this;
1:     }
1:   }
1: }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:ff79ff4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.MahoutTestCase;
1: public final class EvolutionaryProcessTest extends MahoutTestCase {
1:   public void testConverges() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     assertNotNull(best);
1:     assertEquals(0.0, best.getValue(), 0.02);
commit:c0c8d9f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: import org.apache.mahout.common.RandomUtils;
0: import org.junit.Before;
1: 
0:   @Before
0:   public void setUp() {
0:     RandomUtils.useTestSeed();
0:   }
1: 
============================================================================