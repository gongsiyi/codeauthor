1:4fbfbc6: /*
1:29a7f38:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:29a7f38:  * contributor license agreements.  See the NOTICE file distributed with
1:29a7f38:  * this work for additional information regarding copyright ownership.
1:29a7f38:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:29a7f38:  * (the "License"); you may not use this file except in compliance with
1:29a7f38:  * the License.  You may obtain a copy of the License at
3:29a7f38:  *
1:29a7f38:  *     http://www.apache.org/licenses/LICENSE-2.0
1:29a7f38:  *
1:29a7f38:  * Unless required by applicable law or agreed to in writing, software
1:29a7f38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:29a7f38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:29a7f38:  * See the License for the specific language governing permissions and
1:29a7f38:  * limitations under the License.
1:29a7f38:  */
2:29a7f38: 
1:4fbfbc6: package org.apache.mahout.utils.clustering;
1:29a7f38: 
1:29a7f38: import java.io.Closeable;
1:29a7f38: import java.io.IOException;
1:29a7f38: 
1:51f58b8: import org.apache.mahout.clustering.iterator.ClusterWritable;
1:51f58b8: 
2:29a7f38: /**
1:29a7f38:  * Writes out clusters
1:4fbfbc6:  */
1:29a7f38: public interface ClusterWriter extends Closeable {
1:229aeff: 
1:29a7f38:   /**
1:29a7f38:    * Write all values in the Iterable to the output
1:29a7f38:    *
1:29a7f38:    * @param iterable The {@link Iterable} to loop over
1:29a7f38:    * @return the number of docs written
1:29a7f38:    * @throws java.io.IOException if there was a problem writing
1:29a7f38:    */
1:51f58b8:   long write(Iterable<ClusterWritable> iterable) throws IOException;
1:29a7f38: 
1:29a7f38:   /**
1:29a7f38:    * Write out a Cluster
1:29a7f38:    */
1:51f58b8:   void write(ClusterWritable clusterWritable) throws IOException;
1:29a7f38: 
1:29a7f38:   /**
1:29a7f38:    * Write the first {@code maxDocs} to the output.
1:29a7f38:    *
1:29a7f38:    * @param iterable The {@link Iterable} to loop over
1:29a7f38:    * @param maxDocs  the maximum number of docs to write
1:29a7f38:    * @return The number of docs written
1:29a7f38:    * @throws IOException if there was a problem writing
1:29a7f38:    */
1:51f58b8:   long write(Iterable<ClusterWritable> iterable, long maxDocs) throws IOException;
1:29a7f38: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:229aeff
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.clustering;
/////////////////////////////////////////////////////////////////////////
1:  */
author:pranjan
-------------------------------------------------------------------------------
commit:51f58b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.clustering.iterator.ClusterWritable;
1: 
/////////////////////////////////////////////////////////////////////////
1:   long write(Iterable<ClusterWritable> iterable) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:   void write(ClusterWritable clusterWritable) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:   long write(Iterable<ClusterWritable> iterable, long maxDocs) throws IOException;
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:c9d49ee
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.clustering;
commit:29a7f38
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.vectors.io;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
0: import org.apache.mahout.clustering.Cluster;
1: 
1: import java.io.Closeable;
1: import java.io.IOException;
1: 
1: /**
1:  * Writes out clusters
1:  *
0:  **/
1: public interface ClusterWriter extends Closeable {
1:   /**
1:    * Write all values in the Iterable to the output
1:    *
1:    * @param iterable The {@link Iterable} to loop over
1:    * @return the number of docs written
1:    * @throws java.io.IOException if there was a problem writing
1:    */
0:   long write(Iterable<Cluster> iterable) throws IOException;
1: 
1:   /**
1:    * Write out a Cluster
1:    *
0:    * @param cluster The {@link org.apache.mahout.clustering.Cluster} to write
0:    * @throws IOException
1:    */
0:   void write(Cluster cluster) throws IOException;
1: 
1:   /**
1:    * Write the first {@code maxDocs} to the output.
1:    *
1:    * @param iterable The {@link Iterable} to loop over
1:    * @param maxDocs  the maximum number of docs to write
1:    * @return The number of docs written
1:    * @throws IOException if there was a problem writing
1:    */
0:   long write(Iterable<Cluster> iterable, long maxDocs) throws IOException;
1: }
============================================================================