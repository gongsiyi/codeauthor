2:2e4d306: /**
1:2e4d306:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2e4d306:  * contributor license agreements.  See the NOTICE file distributed with
1:2e4d306:  * this work for additional information regarding copyright ownership.
1:2e4d306:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2e4d306:  * (the "License"); you may not use this file except in compliance with
1:2e4d306:  * the License.  You may obtain a copy of the License at
3:2e4d306:  *
1:2e4d306:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2e4d306:  *
1:2e4d306:  * Unless required by applicable law or agreed to in writing, software
1:2e4d306:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e4d306:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e4d306:  * See the License for the specific language governing permissions and
1:2e4d306:  * limitations under the License.
1:2e4d306:  */
4:2e4d306: 
1:4fbfbc6: package org.apache.mahout.utils.regex;
1:4fbfbc6: 
1:2e4d306: import org.apache.hadoop.conf.Configuration;
1:2e4d306: import org.apache.hadoop.io.LongWritable;
1:2e4d306: import org.apache.hadoop.io.Text;
1:2e4d306: import org.apache.hadoop.mapreduce.Mapper;
1:2e4d306: import org.apache.mahout.common.DummyRecordWriter;
1:2e4d306: import org.apache.mahout.common.MahoutTestCase;
1:2e4d306: import org.junit.Test;
1:2e4d306: 
1:2e4d306: import java.util.List;
1:2e4d306: 
1:4fbfbc6: public final class RegexMapperTest extends MahoutTestCase {
1:2e4d306: 
1:2e4d306:   @Test
1:2e4d306:   public void testRegex() throws Exception {
1:2e4d306:     RegexMapper mapper = new RegexMapper();
1:921e201:     Configuration conf = getConfiguration();
1:2e4d306:     conf.set(RegexMapper.REGEX, "(?<=(\\?|&)q=).*?(?=&|$)");
1:2e4d306:     conf.set(RegexMapper.TRANSFORMER_CLASS, URLDecodeTransformer.class.getName());
1:02ff22f:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<>();
1:2e4d306:     Mapper<LongWritable, Text, LongWritable, Text>.Context mapContext = DummyRecordWriter
1:2e4d306:             .build(mapper, conf, mapWriter);
1:2e4d306: 
1:2e4d306:     mapper.setup(mapContext);
1:2e4d306:     for (int i = 0; i < RegexUtilsTest.TEST_STRS.length; i++) {
1:2e4d306:       String testStr = RegexUtilsTest.TEST_STRS[i];
1:2e4d306: 
1:2e4d306:       LongWritable key = new LongWritable(i);
1:2e4d306:       mapper.map(key, new Text(testStr), mapContext);
1:2e4d306:       List<Text> value = mapWriter.getValue(key);
1:4fbfbc6:       if (!RegexUtilsTest.GOLD[i].isEmpty()) {
1:2e4d306:         assertEquals(1, value.size());
1:2e4d306:         assertEquals(RegexUtilsTest.GOLD[i], value.get(0).toString());
1:2e4d306:       }
1:2e4d306:     }
1:2e4d306:   }
1:2e4d306: 
1:2e4d306:   @Test
1:2e4d306:   public void testGroups() throws Exception {
1:2e4d306:     RegexMapper mapper = new RegexMapper();
1:921e201:     Configuration conf = getConfiguration();
1:2e4d306:     conf.set(RegexMapper.REGEX, "(\\d+)\\.(\\d+)\\.(\\d+)");
1:2e4d306:     conf.set(RegexMapper.TRANSFORMER_CLASS, URLDecodeTransformer.class.getName());
1:2e4d306:     conf.setStrings(RegexMapper.GROUP_MATCHERS, "1", "3");
1:85f9ece:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<>();
1:2e4d306:     Mapper<LongWritable, Text, LongWritable, Text>.Context mapContext = DummyRecordWriter
1:2e4d306:             .build(mapper, conf, mapWriter);
1:2e4d306: 
1:2e4d306:     mapper.setup(mapContext);
1:2e4d306:     for (int i = 0; i < RegexUtilsTest.TEST_STRS.length; i++) {
1:2e4d306:       String testStr = RegexUtilsTest.TEST_STRS[i];
1:2e4d306: 
1:2e4d306:       LongWritable key = new LongWritable(i);
1:2e4d306:       mapper.map(key, new Text(testStr), mapContext);
1:2e4d306:       List<Text> value = mapWriter.getValue(key);
1:2e4d306:       assertEquals(1, value.size());
1:4fbfbc6:       assertEquals("127 0", value.get(0).toString());
1:2e4d306:     }
1:2e4d306:   }
1:2e4d306: 
1:2e4d306:   @Test
1:2e4d306:   public void testFPGFormatter() throws Exception {
1:2e4d306:     RegexMapper mapper = new RegexMapper();
1:921e201:     Configuration conf = getConfiguration();
1:2e4d306:     conf.set(RegexMapper.REGEX, "(?<=(\\?|&)q=).*?(?=&|$)");
1:2e4d306:     conf.set(RegexMapper.TRANSFORMER_CLASS, URLDecodeTransformer.class.getName());
1:2e4d306:     conf.set(RegexMapper.FORMATTER_CLASS, FPGFormatter.class.getName());
1:85f9ece:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<>();
1:2e4d306:     Mapper<LongWritable, Text, LongWritable, Text>.Context mapContext = DummyRecordWriter
1:2e4d306:             .build(mapper, conf, mapWriter);
1:2e4d306: 
1:2e4d306:     mapper.setup(mapContext);
1:4fbfbc6:     RegexFormatter formatter = new FPGFormatter();
1:2e4d306:     for (int i = 0; i < RegexUtilsTest.TEST_STRS.length; i++) {
1:2e4d306:       String testStr = RegexUtilsTest.TEST_STRS[i];
1:2e4d306: 
1:2e4d306:       LongWritable key = new LongWritable(i);
1:2e4d306:       mapper.map(key, new Text(testStr), mapContext);
1:2e4d306:       List<Text> value = mapWriter.getValue(key);
1:4fbfbc6:       if (!RegexUtilsTest.GOLD[i].isEmpty()) {
1:2e4d306:         assertEquals(1, value.size());
1:2e4d306:         assertEquals(formatter.format(RegexUtilsTest.GOLD[i]), value.get(0).toString());
1:2e4d306:       }
1:2e4d306:     }
1:2e4d306:   }
1:2e4d306: }
============================================================================
author:Karl Richter
-------------------------------------------------------------------------------
commit:02ff22f
/////////////////////////////////////////////////////////////////////////
1:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<>();
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:85f9ece
/////////////////////////////////////////////////////////////////////////
1:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<>();
/////////////////////////////////////////////////////////////////////////
1:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<>();
author:sslavic
-------------------------------------------------------------------------------
commit:921e201
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
/////////////////////////////////////////////////////////////////////////
1:     Configuration conf = getConfiguration();
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4fbfbc6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.mahout.utils.regex;
1: 
/////////////////////////////////////////////////////////////////////////
1: public final class RegexMapperTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!RegexUtilsTest.GOLD[i].isEmpty()) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       assertEquals("127 0", value.get(0).toString());
/////////////////////////////////////////////////////////////////////////
1:     RegexFormatter formatter = new FPGFormatter();
1:       if (!RegexUtilsTest.GOLD[i].isEmpty()) {
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:2e4d306
/////////////////////////////////////////////////////////////////////////
0: package org.apache.mahout.utils.regex;
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.io.LongWritable;
1: import org.apache.hadoop.io.Text;
1: import org.apache.hadoop.mapreduce.Mapper;
1: import org.apache.mahout.common.DummyRecordWriter;
1: import org.apache.mahout.common.MahoutTestCase;
1: import org.junit.Test;
1: 
1: import java.util.List;
1: 
1: 
1: /**
1:  *
1:  *
0:  **/
1: 
0: public class RegexMapperTest extends MahoutTestCase {
1: 
1: 
1:   @Test
1:   public void testRegex() throws Exception {
1:     RegexMapper mapper = new RegexMapper();
0:     Configuration conf = new Configuration();
1:     conf.set(RegexMapper.REGEX, "(?<=(\\?|&)q=).*?(?=&|$)");
1:     conf.set(RegexMapper.TRANSFORMER_CLASS, URLDecodeTransformer.class.getName());
0:     //conf.set(RegexMapper.);
0:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<LongWritable, Text>();
1:     Mapper<LongWritable, Text, LongWritable, Text>.Context mapContext = DummyRecordWriter
1:             .build(mapper, conf, mapWriter);
1: 
1:     mapper.setup(mapContext);
1:     for (int i = 0; i < RegexUtilsTest.TEST_STRS.length; i++) {
1:       String testStr = RegexUtilsTest.TEST_STRS[i];
1: 
1:       LongWritable key = new LongWritable(i);
1:       mapper.map(key, new Text(testStr), mapContext);
1:       List<Text> value = mapWriter.getValue(key);
0:       if (RegexUtilsTest.GOLD[i].equals("") == false) {
1:         assertEquals(1, value.size());
1:         assertEquals(RegexUtilsTest.GOLD[i], value.get(0).toString());
1:       }
1:     }
1:   }
1: 
1:   @Test
1:   public void testGroups() throws Exception {
1:     RegexMapper mapper = new RegexMapper();
0:     Configuration conf = new Configuration();
1:     conf.set(RegexMapper.REGEX, "(\\d+)\\.(\\d+)\\.(\\d+)");
1:     conf.set(RegexMapper.TRANSFORMER_CLASS, URLDecodeTransformer.class.getName());
1:     conf.setStrings(RegexMapper.GROUP_MATCHERS, "1", "3");
0:     //conf.set(RegexMapper.);
0:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<LongWritable, Text>();
1:     Mapper<LongWritable, Text, LongWritable, Text>.Context mapContext = DummyRecordWriter
1:             .build(mapper, conf, mapWriter);
1: 
1:     mapper.setup(mapContext);
1:     for (int i = 0; i < RegexUtilsTest.TEST_STRS.length; i++) {
1:       String testStr = RegexUtilsTest.TEST_STRS[i];
1: 
1:       LongWritable key = new LongWritable(i);
1:       mapper.map(key, new Text(testStr), mapContext);
1:       List<Text> value = mapWriter.getValue(key);
0:       String gold = "127 0";
1:       assertEquals(1, value.size());
0:       assertEquals(gold, value.get(0).toString());
1:     }
1:   }
1: 
1:   @Test
1:   public void testFPGFormatter() throws Exception {
1:     RegexMapper mapper = new RegexMapper();
0:     Configuration conf = new Configuration();
1:     conf.set(RegexMapper.REGEX, "(?<=(\\?|&)q=).*?(?=&|$)");
1:     conf.set(RegexMapper.TRANSFORMER_CLASS, URLDecodeTransformer.class.getName());
1:     conf.set(RegexMapper.FORMATTER_CLASS, FPGFormatter.class.getName());
0:     //conf.set(RegexMapper.);
0:     DummyRecordWriter<LongWritable, Text> mapWriter = new DummyRecordWriter<LongWritable, Text>();
1:     Mapper<LongWritable, Text, LongWritable, Text>.Context mapContext = DummyRecordWriter
1:             .build(mapper, conf, mapWriter);
1: 
1:     mapper.setup(mapContext);
0:     FPGFormatter formatter = new FPGFormatter();
1:     for (int i = 0; i < RegexUtilsTest.TEST_STRS.length; i++) {
1:       String testStr = RegexUtilsTest.TEST_STRS[i];
1: 
1:       LongWritable key = new LongWritable(i);
1:       mapper.map(key, new Text(testStr), mapContext);
1:       List<Text> value = mapWriter.getValue(key);
0:       if (RegexUtilsTest.GOLD[i].equals("") == false) {
1:         assertEquals(1, value.size());
1:         assertEquals(formatter.format(RegexUtilsTest.GOLD[i]), value.get(0).toString());
1:       }
1:     }
1:   }
1: }
============================================================================