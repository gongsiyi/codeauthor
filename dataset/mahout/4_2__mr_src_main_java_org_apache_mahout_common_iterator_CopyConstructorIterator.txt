1:a13b4b7: /**
1:a13b4b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a13b4b7:  * contributor license agreements.  See the NOTICE file distributed with
1:a13b4b7:  * this work for additional information regarding copyright ownership.
1:a13b4b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a13b4b7:  * (the "License"); you may not use this file except in compliance with
1:a13b4b7:  * the License.  You may obtain a copy of the License at
1:a13b4b7:  *
1:a13b4b7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a13b4b7:  *
1:a13b4b7:  * Unless required by applicable law or agreed to in writing, software
1:a13b4b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a13b4b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a13b4b7:  * See the License for the specific language governing permissions and
1:a13b4b7:  * limitations under the License.
1:a13b4b7:  */
1:a13b4b7: 
1:a13b4b7: package org.apache.mahout.common.iterator;
1:a13b4b7: 
1:a13b4b7: import java.lang.reflect.Constructor;
1:a13b4b7: import java.lang.reflect.InvocationTargetException;
1:a13b4b7: import java.util.Iterator;
1:a13b4b7: 
1:80366ee: import com.google.common.base.Function;
1:80366ee: import com.google.common.collect.ForwardingIterator;
1:80366ee: import com.google.common.collect.Iterators;
1:80366ee: 
1:a13b4b7: /**
1:a13b4b7:  * An iterator that copies the values in an underlying iterator by finding an appropriate copy constructor.
1:a13b4b7:  */
1:80366ee: public final class CopyConstructorIterator<T> extends ForwardingIterator<T> {
1:a13b4b7: 
1:80366ee:   private final Iterator<T> delegate;
1:a13b4b7:   private Constructor<T> constructor;
1:a13b4b7: 
1:80366ee:   public CopyConstructorIterator(Iterator<? extends T> copyFrom) {
1:80366ee:     this.delegate = Iterators.transform(
1:80366ee:         copyFrom,
1:80366ee:         new Function<T,T>() {
1:80366ee:           @Override
1:80366ee:           public T apply(T from) {
1:80366ee:             if (constructor == null) {
1:80366ee:               Class<T> elementClass = (Class<T>) from.getClass();
1:80366ee:               try {
1:80366ee:                 constructor = elementClass.getConstructor(elementClass);
1:80366ee:               } catch (NoSuchMethodException e) {
3:80366ee:                 throw new IllegalStateException(e);
1:80366ee:               }
1:80366ee:             }
1:80366ee:             try {
1:80366ee:               return constructor.newInstance(from);
1:87c15be:             } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
1:80366ee:               throw new IllegalStateException(e);
1:80366ee:             }
1:80366ee:           }
1:80366ee:         });
4:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7:   @Override
1:80366ee:   protected Iterator<T> delegate() {
1:80366ee:     return delegate;
1:a13b4b7:   }
1:a13b4b7: 
1:a13b4b7: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:87c15be
/////////////////////////////////////////////////////////////////////////
1:             } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
1: import com.google.common.collect.ForwardingIterator;
1: import com.google.common.collect.Iterators;
1: 
1: public final class CopyConstructorIterator<T> extends ForwardingIterator<T> {
1:   private final Iterator<T> delegate;
1:   public CopyConstructorIterator(Iterator<? extends T> copyFrom) {
1:     this.delegate = Iterators.transform(
1:         copyFrom,
1:         new Function<T,T>() {
1:           @Override
1:           public T apply(T from) {
1:             if (constructor == null) {
1:               Class<T> elementClass = (Class<T>) from.getClass();
1:               try {
1:                 constructor = elementClass.getConstructor(elementClass);
1:               } catch (NoSuchMethodException e) {
1:                 throw new IllegalStateException(e);
1:               }
1:             }
1:             try {
1:               return constructor.newInstance(from);
0:             } catch (InstantiationException e) {
1:               throw new IllegalStateException(e);
0:             } catch (IllegalAccessException e) {
1:               throw new IllegalStateException(e);
0:             } catch (InvocationTargetException e) {
1:               throw new IllegalStateException(e);
1:             }
1:           }
1:         });
1:   protected Iterator<T> delegate() {
1:     return delegate;
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.common.iterator;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.InvocationTargetException;
1: import java.util.Iterator;
1: 
1: /**
1:  * An iterator that copies the values in an underlying iterator by finding an appropriate copy constructor.
1:  */
0: public final class CopyConstructorIterator<T> extends TransformingIterator<T,T> {
1: 
1:   private Constructor<T> constructor;
1: 
0:   public CopyConstructorIterator(Iterator<? extends T> delegate) {
0:     super(delegate);
1:   }
1: 
1:   @Override
0:   protected T transform(T in) {
0:     if (constructor == null) {
0:       Class<T> elementClass = (Class<T>) in.getClass();
0:       try {
0:         constructor = elementClass.getConstructor(elementClass);
0:       } catch (NoSuchMethodException e) {
0:         throw new IllegalStateException(e);
1:       }
1:     }
0:     try {
0:       return constructor.newInstance(in);
0:     } catch (InstantiationException e) {
0:       throw new IllegalStateException(e);
0:     } catch (IllegalAccessException e) {
0:       throw new IllegalStateException(e);
0:     } catch (InvocationTargetException e) {
0:       throw new IllegalStateException(e);
1:     }
1:   }
1: 
1: }
============================================================================