1:63c81f1: /**
1:63c81f1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:63c81f1:  * contributor license agreements.  See the NOTICE file distributed with
1:63c81f1:  * this work for additional information regarding copyright ownership.
1:63c81f1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:63c81f1:  * (the "License"); you may not use this file except in compliance with
1:63c81f1:  * the License.  You may obtain a copy of the License at
1:63c81f1:  *
1:63c81f1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:63c81f1:  *
1:63c81f1:  * Unless required by applicable law or agreed to in writing, software
1:63c81f1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:63c81f1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:63c81f1:  * See the License for the specific language governing permissions and
1:63c81f1:  * limitations under the License.
1:63c81f1:  */
1:63c81f1: 
1:63c81f1: package org.apache.mahout.cf.taste.hadoop.als;
1:63c81f1: 
1:63c81f1: import org.apache.hadoop.mapreduce.Mapper;
1:63c81f1: 
1:97f6db2: import java.io.IOException;
1:97f6db2: 
1:63c81f1: /**
1:63c81f1:  * Mapper class to be used by {@link MultithreadedSharingMapper}. Offers "global" before() and after() methods
1:63c81f1:  * that will typically be used to set up static variables.
1:63c81f1:  *
1:63c81f1:  * Suitable for mappers that need large, read-only in-memory data to operate.
1:63c81f1:  *
1:63c81f1:  * @param <K1>
1:63c81f1:  * @param <V1>
1:63c81f1:  * @param <K2>
1:63c81f1:  * @param <V2>
1:63c81f1:  */
1:63c81f1: public abstract class SharingMapper<K1,V1,K2,V2,S> extends Mapper<K1,V1,K2,V2> {
1:63c81f1: 
1:97f6db2:   private static Object SHARED_INSTANCE;
1:63c81f1: 
1:63c81f1:   /**
1:63c81f1:    * Called before the multithreaded execution
1:63c81f1:    *
1:5d66758:    * @param context mapper's context
1:63c81f1:    */
1:97f6db2:   abstract S createSharedInstance(Context context) throws IOException;
1:63c81f1: 
1:97f6db2:   final void setupSharedInstance(Context context) throws IOException {
1:97f6db2:     if (SHARED_INSTANCE == null) {
1:97f6db2:       SHARED_INSTANCE = createSharedInstance(context);
1:97f6db2:     }
1:63c81f1:   }
1:63c81f1: 
1:5d66758:   final S getSharedInstance() {
1:97f6db2:     return (S) SHARED_INSTANCE;
1:97f6db2:   }
1:97f6db2: 
1:4ca6b86:   static void reset() {
1:97f6db2:     SHARED_INSTANCE = null;
1:63c81f1:   }
1:63c81f1: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:4ca6b86
/////////////////////////////////////////////////////////////////////////
1:   static void reset() {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:97f6db2
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private static Object SHARED_INSTANCE;
1:   abstract S createSharedInstance(Context context) throws IOException;
1:   final void setupSharedInstance(Context context) throws IOException {
1:     if (SHARED_INSTANCE == null) {
1:       SHARED_INSTANCE = createSharedInstance(context);
1:     }
1:     return (S) SHARED_INSTANCE;
1:   }
1: 
0:   final static void reset() {
1:     SHARED_INSTANCE = null;
commit:4841efb
/////////////////////////////////////////////////////////////////////////
0:   private static Object sharedInstance;
/////////////////////////////////////////////////////////////////////////
0:     sharedInstance = createSharedInstance(context);
0:     return (S) sharedInstance;
commit:5d66758
/////////////////////////////////////////////////////////////////////////
1:    * @param context mapper's context
/////////////////////////////////////////////////////////////////////////
1:   final S getSharedInstance() {
commit:df39ce4
/////////////////////////////////////////////////////////////////////////
0:   final void setupSharedInstance(Context context) {
commit:63c81f1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.hadoop.als;
1: 
1: import org.apache.hadoop.mapreduce.Mapper;
1: 
1: /**
1:  * Mapper class to be used by {@link MultithreadedSharingMapper}. Offers "global" before() and after() methods
1:  * that will typically be used to set up static variables.
1:  *
1:  * Suitable for mappers that need large, read-only in-memory data to operate.
1:  *
1:  * @param <K1>
1:  * @param <V1>
1:  * @param <K2>
1:  * @param <V2>
1:  */
1: public abstract class SharingMapper<K1,V1,K2,V2,S> extends Mapper<K1,V1,K2,V2> {
1: 
0:   private static Object SHARED_INSTANCE;
1: 
1:   /**
1:    * Called before the multithreaded execution
1:    *
0:    * @param context
1:    */
0:   abstract S createSharedInstance(Context context);
1: 
0:   void setupSharedInstance(Context context) {
0:     SHARED_INSTANCE = createSharedInstance(context);
1:   }
1: 
0:   protected final S getSharedInstance() {
0:     return (S) SHARED_INSTANCE;
1:   }
1: }
============================================================================