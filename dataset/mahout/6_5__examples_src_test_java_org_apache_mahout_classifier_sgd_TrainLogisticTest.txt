1:d4b7924: /*
1:d4b7924:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d4b7924:  * contributor license agreements.  See the NOTICE file distributed with
1:d4b7924:  * this work for additional information regarding copyright ownership.
1:d4b7924:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d4b7924:  * (the "License"); you may not use this file except in compliance with
1:d4b7924:  * the License.  You may obtain a copy of the License at
1:ebaa95d:  *
1:d4b7924:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ebaa95d:  *
1:d4b7924:  * Unless required by applicable law or agreed to in writing, software
1:d4b7924:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d4b7924:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d4b7924:  * See the License for the specific language governing permissions and
1:d4b7924:  * limitations under the License.
1:ebaa95d:  */
7:d4b7924: 
1:d4b7924: package org.apache.mahout.classifier.sgd;
1:ebaa95d: 
1:d4b7924: import com.google.common.base.Charsets;
1:ebaa95d: import com.google.common.collect.ImmutableMap;
1:d4b7924: import com.google.common.collect.Sets;
1:d4b7924: import com.google.common.io.Resources;
1:d4b7924: import org.apache.mahout.classifier.AbstractVectorClassifier;
1:d4b7924: import org.apache.mahout.examples.MahoutTestCase;
1:d4b7924: import org.apache.mahout.math.DenseVector;
1:d4b7924: import org.apache.mahout.math.Vector;
1:d4b7924: import org.junit.Test;
1:ebaa95d: 
1:ad8b61d: import java.io.File;
1:ad8b61d: import java.io.FileInputStream;
1:35032b8: import java.io.InputStream;
1:a515335: import java.io.PrintWriter;
1:a515335: import java.io.StringWriter;
1:d4b7924: import java.util.List;
1:ebaa95d: import java.util.Map;
1:d4b7924: import java.util.Set;
1:4ef9d31: import java.util.TreeSet;
1:ebaa95d: 
1:d4b7924: public class TrainLogisticTest extends MahoutTestCase {
1:d53cf4a: 
1:d4b7924:   @Test
1:bdb1c48:   public void example131() throws Exception {
1:fa4822b:     String outputFile = getTestTempFile("model").getAbsolutePath();
1:d53cf4a: 
1:a515335:     StringWriter sw = new StringWriter();
1:23722bc:     PrintWriter pw = new PrintWriter(sw, true);
1:a515335:     TrainLogistic.mainToOutput(new String[]{
1:a515335:         "--input", "donut.csv",
1:a515335:         "--output", outputFile,
1:a515335:         "--target", "color", "--categories", "2",
1:a515335:         "--predictors", "x", "y",
1:a515335:         "--types", "numeric",
1:a515335:         "--features", "20",
1:a515335:         "--passes", "100",
1:a515335:         "--rate", "50"
1:a515335:     }, pw);
1:a515335:     String trainOut = sw.toString();
1:ebaa95d:     assertTrue(trainOut.contains("x -0.7"));
1:ebaa95d:     assertTrue(trainOut.contains("y -0.4"));
1:ebaa95d: 
1:d4b7924:     LogisticModelParameters lmp = TrainLogistic.getParameters();
1:d53cf4a:     assertEquals(1.0e-4, lmp.getLambda(), 1.0e-9);
1:d4b7924:     assertEquals(20, lmp.getNumFeatures());
1:d53cf4a:     assertTrue(lmp.useBias());
1:d4b7924:     assertEquals("color", lmp.getTargetVariable());
1:d4b7924:     CsvRecordFactory csv = lmp.getCsvRecordFactory();
1:4ef9d31:     assertEquals("[1, 2]", new TreeSet<>(csv.getTargetCategories()).toString());
1:d4b7924:     assertEquals("[Intercept Term, x, y]", Sets.newTreeSet(csv.getPredictors()).toString());
1:ebaa95d: 
1:ebaa95d:     // verify model by building dissector
1:d4b7924:     AbstractVectorClassifier model = TrainLogistic.getModel();
1:ebaa95d:     List<String> data = Resources.readLines(Resources.getResource("donut.csv"), Charsets.UTF_8);
1:ebaa95d:     Map<String, Double> expectedValues = ImmutableMap.of("x", -0.7, "y", -0.43, "Intercept Term", -0.15);
1:ebaa95d:     verifyModel(lmp, csv, data, model, expectedValues);
1:ebaa95d: 
1:ebaa95d:     // test saved model
1:4ef9d31:     try (InputStream in = new FileInputStream(new File(outputFile))){
1:d608a88:       LogisticModelParameters lmpOut = LogisticModelParameters.loadFrom(in);
1:d608a88:       CsvRecordFactory csvOut = lmpOut.getCsvRecordFactory();
1:d608a88:       csvOut.firstLine(data.get(0));
1:d608a88:       OnlineLogisticRegression lrOut = lmpOut.createRegression();
1:d608a88:       verifyModel(lmpOut, csvOut, data, lrOut, expectedValues);
1:d608a88:     }
1:ebaa95d: 
1:a515335:     sw = new StringWriter();
1:23722bc:     pw = new PrintWriter(sw, true);
1:a515335:     RunLogistic.mainToOutput(new String[]{
1:ad8b61d:         "--input", "donut.csv",
1:ad8b61d:         "--model", outputFile,
1:ad8b61d:         "--auc",
1:ad8b61d:         "--confusion"
1:a515335:     }, pw);
1:a515335:     trainOut = sw.toString();
1:a515335:     assertTrue(trainOut.contains("AUC = 0.57"));
1:a515335:     assertTrue(trainOut.contains("confusion: [[27.0, 13.0], [0.0, 0.0]]"));
1:d608a88:   }
1:a515335: 
1:ebaa95d:   @Test
1:bdb1c48:   public void example132() throws Exception {
1:ebaa95d:     String outputFile = getTestTempFile("model").getAbsolutePath();
1:ebaa95d: 
1:a515335:     StringWriter sw = new StringWriter();
1:23722bc:     PrintWriter pw = new PrintWriter(sw, true);
1:a515335:     TrainLogistic.mainToOutput(new String[]{
1:ad8b61d:         "--input", "donut.csv",
1:ad8b61d:         "--output", outputFile,
1:ad8b61d:         "--target", "color",
1:ad8b61d:         "--categories", "2",
1:ad8b61d:         "--predictors", "x", "y", "a", "b", "c",
1:ad8b61d:         "--types", "numeric",
1:ad8b61d:         "--features", "20",
1:ad8b61d:         "--passes", "100",
1:ad8b61d:         "--rate", "50"
1:a515335:     }, pw);
1:ebaa95d: 
1:a515335:     String trainOut = sw.toString();
1:ebaa95d:     assertTrue(trainOut.contains("a 0."));
1:ebaa95d:     assertTrue(trainOut.contains("b -1."));
1:ebaa95d:     assertTrue(trainOut.contains("c -25."));
1:ebaa95d: 
1:a515335:     sw = new StringWriter();
1:23722bc:     pw = new PrintWriter(sw, true);
1:a515335:     RunLogistic.mainToOutput(new String[]{
1:ad8b61d:         "--input", "donut.csv",
1:ad8b61d:         "--model", outputFile,
1:ad8b61d:         "--auc",
1:ad8b61d:         "--confusion"
1:a515335:     }, pw);
1:a515335:     trainOut = sw.toString();
1:a515335:     assertTrue(trainOut.contains("AUC = 1.00"));
1:ebaa95d: 
1:a515335:     sw = new StringWriter();
1:23722bc:     pw = new PrintWriter(sw, true);
1:a515335:     RunLogistic.mainToOutput(new String[]{
1:ad8b61d:         "--input", "donut-test.csv",
1:ad8b61d:         "--model", outputFile,
1:ad8b61d:         "--auc",
1:ad8b61d:         "--confusion"
1:a515335:     }, pw);
1:a515335:     trainOut = sw.toString();
1:a515335:     assertTrue(trainOut.contains("AUC = 0.9"));
1:ebaa95d:   }
1:ebaa95d: 
1:ad8b61d:   private static void verifyModel(LogisticModelParameters lmp,
1:ad8b61d:                                   RecordFactory csv,
1:ad8b61d:                                   List<String> data,
1:ad8b61d:                                   AbstractVectorClassifier model,
1:ad8b61d:                                   Map<String, Double> expectedValues) {
1:61ae2e7:     ModelDissector md = new ModelDissector();
1:d4b7924:     for (String line : data.subList(1, data.size())) {
1:d4b7924:       Vector v = new DenseVector(lmp.getNumFeatures());
1:d4b7924:       csv.getTraceDictionary().clear();
1:d4b7924:       csv.processLine(line, v);
1:d4b7924:       md.update(v, csv.getTraceDictionary(), model);
1:ebaa95d:     }
1:ebaa95d: 
1:ebaa95d:     // check right variables are present
1:d4b7924:     List<ModelDissector.Weight> weights = md.summary(10);
1:ebaa95d:     Set<String> expected = Sets.newHashSet(expectedValues.keySet());
1:d4b7924:     for (ModelDissector.Weight weight : weights) {
1:d4b7924:       assertTrue(expected.remove(weight.getFeature()));
1:ebaa95d:       assertEquals(expectedValues.get(weight.getFeature()), weight.getWeight(), 0.1);
1:ebaa95d:     }
1:d4b7924:     assertEquals(0, expected.size());
3:d4b7924:   }
1:d4b7924: }
============================================================================
author:Suneel Marthi
-------------------------------------------------------------------------------
commit:4ef9d31
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.TreeSet;
/////////////////////////////////////////////////////////////////////////
1:     assertEquals("[1, 2]", new TreeSet<>(csv.getTargetCategories()).toString());
/////////////////////////////////////////////////////////////////////////
1:     try (InputStream in = new FileInputStream(new File(outputFile))){
author:Grant Ingersoll
-------------------------------------------------------------------------------
commit:31cb292
/////////////////////////////////////////////////////////////////////////
0:       Closeables.close(in, true);
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:bdb1c48
/////////////////////////////////////////////////////////////////////////
1:   public void example131() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:   public void example132() throws Exception {
commit:d608a88
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.io.Closeables;
/////////////////////////////////////////////////////////////////////////
0:     try {
1:       LogisticModelParameters lmpOut = LogisticModelParameters.loadFrom(in);
1:       CsvRecordFactory csvOut = lmpOut.getCsvRecordFactory();
1:       csvOut.firstLine(data.get(0));
1:       OnlineLogisticRegression lrOut = lmpOut.createRegression();
1:       verifyModel(lmpOut, csvOut, data, lrOut, expectedValues);
0:     } finally {
0:       Closeables.closeQuietly(in);
1:     }
/////////////////////////////////////////////////////////////////////////
0:     try {
0:       Field outputField = clazz.getDeclaredField("output");
0:       Method main = clazz.getMethod("main", args.getClass());
0:       outputField.set(null, printStream);
0:       Object[] argList = {args};
0:       main.invoke(null, argList);
0:       return new String(trainOutput.toByteArray(), Charsets.UTF_8);
0:     } finally {
0:       Closeables.closeQuietly(printStream);
1:     }
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:23722bc
/////////////////////////////////////////////////////////////////////////
1:     PrintWriter pw = new PrintWriter(sw, true);
/////////////////////////////////////////////////////////////////////////
1:     pw = new PrintWriter(sw, true);
/////////////////////////////////////////////////////////////////////////
1:     PrintWriter pw = new PrintWriter(sw, true);
/////////////////////////////////////////////////////////////////////////
1:     pw = new PrintWriter(sw, true);
/////////////////////////////////////////////////////////////////////////
1:     pw = new PrintWriter(sw, true);
commit:a515335
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import java.io.StringWriter;
/////////////////////////////////////////////////////////////////////////
1:     StringWriter sw = new StringWriter();
0:     PrintWriter pw = new PrintWriter(sw);
1:     TrainLogistic.mainToOutput(new String[]{
1:         "--input", "donut.csv",
1:         "--output", outputFile,
1:         "--target", "color", "--categories", "2",
1:         "--predictors", "x", "y",
1:         "--types", "numeric",
1:         "--features", "20",
1:         "--passes", "100",
1:         "--rate", "50"
1:     }, pw);
1:     String trainOut = sw.toString();
/////////////////////////////////////////////////////////////////////////
1:     sw = new StringWriter();
0:     pw = new PrintWriter(sw);
1:     RunLogistic.mainToOutput(new String[]{
1:     }, pw);
1:     trainOut = sw.toString();
1:     assertTrue(trainOut.contains("AUC = 0.57"));
1:     assertTrue(trainOut.contains("confusion: [[27.0, 13.0], [0.0, 0.0]]"));
1: 
1:     StringWriter sw = new StringWriter();
0:     PrintWriter pw = new PrintWriter(sw);
1:     TrainLogistic.mainToOutput(new String[]{
/////////////////////////////////////////////////////////////////////////
1:     }, pw);
1:     String trainOut = sw.toString();
1:     sw = new StringWriter();
0:     pw = new PrintWriter(sw);
1:     RunLogistic.mainToOutput(new String[]{
1:     }, pw);
1:     trainOut = sw.toString();
1:     assertTrue(trainOut.contains("AUC = 1.00"));
1:     sw = new StringWriter();
0:     pw = new PrintWriter(sw);
1:     RunLogistic.mainToOutput(new String[]{
1:     }, pw);
1:     trainOut = sw.toString();
1:     assertTrue(trainOut.contains("AUC = 0.9"));
commit:35032b8
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
0:     InputStream in = new FileInputStream(new File(outputFile));
commit:ad8b61d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileInputStream;
0: import java.io.InputStreamReader;
0: import java.io.Reader;
0: import java.nio.charset.Charset;
0:   public void example13_1() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     Reader in = new InputStreamReader(new FileInputStream(new File(outputFile)), Charset.forName("UTF-8"));
0:     LogisticModelParameters lmpOut = LogisticModelParameters.loadFrom(in);
0:     in.close();
0:     String output = runMain(RunLogistic.class, new String[]{
1:         "--input", "donut.csv",
1:         "--model", outputFile,
1:         "--auc",
1:         "--confusion"
0:     });
0:   public void example13_2() throws Exception {
1:         "--input", "donut.csv",
1:         "--output", outputFile,
1:         "--target", "color",
1:         "--categories", "2",
1:         "--predictors", "x", "y", "a", "b", "c",
1:         "--types", "numeric",
1:         "--features", "20",
1:         "--passes", "100",
1:         "--rate", "50"
0:     String output = runMain(RunLogistic.class, new String[]{
1:         "--input", "donut.csv",
1:         "--model", outputFile,
1:         "--auc",
1:         "--confusion"
0:     });
0:     String heldout = runMain(RunLogistic.class, new String[]{
1:         "--input", "donut-test.csv",
1:         "--model", outputFile,
1:         "--auc",
1:         "--confusion"
0:     });
/////////////////////////////////////////////////////////////////////////
0:   private static String runMain(Class<?> clazz, String[] args)
0:     throws NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
/////////////////////////////////////////////////////////////////////////
1:   private static void verifyModel(LogisticModelParameters lmp,
1:                                   RecordFactory csv,
1:                                   List<String> data,
1:                                   AbstractVectorClassifier model,
1:                                   Map<String, Double> expectedValues) {
commit:61ae2e7
/////////////////////////////////////////////////////////////////////////
1:     ModelDissector md = new ModelDissector();
commit:d53cf4a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:   private static final Splitter ON_WHITE_SPACE = 
0:       Splitter.on(CharMatcher.BREAKING_WHITESPACE).trimResults().omitEmptyStrings();
1: 
0:     String[] args = Iterables.toArray(ON_WHITE_SPACE.split(
/////////////////////////////////////////////////////////////////////////
1:     assertEquals(1.0e-4, lmp.getLambda(), 1.0e-9);
1:     assertTrue(lmp.useBias());
author:Ted Dunning
-------------------------------------------------------------------------------
commit:f372304
/////////////////////////////////////////////////////////////////////////
commit:5baba6e
/////////////////////////////////////////////////////////////////////////
0:       "--output", outputFile,
0:       "--target", "color", "--categories", "2",
0:       "--predictors", "x", "y",
commit:ebaa95d
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.ImmutableMap;
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayOutputStream;
0: import java.io.FileReader;
0: import java.io.PrintStream;
0: import java.lang.reflect.Field;
0: import java.lang.reflect.InvocationTargetException;
0: import java.lang.reflect.Method;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:   public void example13_1() throws IOException, NoSuchFieldException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
1: 
0:     String trainOut = runMain(TrainLogistic.class, new String[]{
0:       "--input", "donut.csv",
0:       " --output", outputFile,
0:       " --target", "color", "--categories", "2" +
0:         "--predictors", "x", "y",
0:       "--types", "numeric",
0:       "--features", "20",
0:       "--passes", "100",
0:       "--rate", "50"
0:     });
1:     assertTrue(trainOut.contains("x -0.7"));
1:     assertTrue(trainOut.contains("y -0.4"));
1: 
/////////////////////////////////////////////////////////////////////////
1:     // verify model by building dissector
1:     List<String> data = Resources.readLines(Resources.getResource("donut.csv"), Charsets.UTF_8);
1:     Map<String, Double> expectedValues = ImmutableMap.of("x", -0.7, "y", -0.43, "Intercept Term", -0.15);
1:     verifyModel(lmp, csv, data, model, expectedValues);
1: 
1:     // test saved model
0:     LogisticModelParameters lmpOut = LogisticModelParameters.loadFrom(new FileReader(outputFile));
0:     CsvRecordFactory csvOut = lmpOut.getCsvRecordFactory();
0:     csvOut.firstLine(data.get(0));
0:     OnlineLogisticRegression lrOut = lmpOut.createRegression();
0:     verifyModel(lmpOut, csvOut, data, lrOut, expectedValues);
1: 
0:     String output = runMain(RunLogistic.class, new String[]{"--input", "donut.csv", "--model", outputFile, "--auc", "--confusion"});
0:     assertTrue(output.contains("AUC = 0.57"));
0:     assertTrue(output.contains("confusion: [[27.0, 13.0], [0.0, 0.0]]"));
1:   }
1: 
1:   @Test
0:   public void example13_2() throws InvocationTargetException, IOException, NoSuchMethodException, NoSuchFieldException, IllegalAccessException {
1:     String outputFile = getTestTempFile("model").getAbsolutePath();
0:     String trainOut = runMain(TrainLogistic.class, new String[]{
0:       "--input", "donut.csv", "--output", outputFile,
0:       "--target", "color", "--categories", "2",
0:       "--predictors", "x", "y", "a", "b", "c", "--types", "numeric",
0:       "--features", "20", "--passes", "100", "--rate", "50"
0:     });
1: 
1:     assertTrue(trainOut.contains("a 0."));
1:     assertTrue(trainOut.contains("b -1."));
1:     assertTrue(trainOut.contains("c -25."));
1: 
0:     String output = runMain(RunLogistic.class, new String[]{"--input", "donut.csv", "--model", outputFile, "--auc", "--confusion"});
0:     assertTrue(output.contains("AUC = 1.00"));
1: 
0:     String heldout = runMain(RunLogistic.class, new String[]{"--input", "donut-test.csv", "--model", outputFile, "--auc", "--confusion"});
0:     assertTrue(heldout.contains("AUC = 0.9"));
1:   }
1: 
0:   /**
0:    * Runs a class with a public static void main method.  We assume that there is an accessible
0:    * field named "output" that we can change to redirect output.
1:    *
1:    *
0:    * @param clazz   contains the main method.
0:    * @param args    contains the command line arguments
0:    * @return The contents to standard out as a string.
0:    * @throws IOException                   Not possible, but must be declared.
0:    * @throws NoSuchFieldException          If there isn't an output field.
0:    * @throws IllegalAccessException        If the output field isn't accessible by us.
0:    * @throws NoSuchMethodException         If there isn't a main method.
0:    * @throws InvocationTargetException     If the main method throws an exception.
1:    */
0:   private String runMain(Class clazz, String[] args) throws IOException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
0:     ByteArrayOutputStream trainOutput = new ByteArrayOutputStream();
0:     PrintStream printStream = new PrintStream(trainOutput);
1: 
0:     Field outputField = clazz.getDeclaredField("output");
0:     Method main = clazz.getMethod("main", args.getClass());
1: 
0:     outputField.set(null, printStream);
0:     Object[] argList = {args};
0:     main.invoke(null, argList);
0:     printStream.close();
1: 
0:     return new String(trainOutput.toByteArray(), Charsets.UTF_8);
1:   }
1: 
0:   private void verifyModel(LogisticModelParameters lmp, CsvRecordFactory csv, List<String> data, AbstractVectorClassifier model, Map<String, Double> expectedValues) {
/////////////////////////////////////////////////////////////////////////
1:     // check right variables are present
1:     Set<String> expected = Sets.newHashSet(expectedValues.keySet());
1:       assertEquals(expectedValues.get(weight.getFeature()), weight.getWeight(), 0.1);
commit:d4b7924
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: 
1: package org.apache.mahout.classifier.sgd;
1: 
0: import com.google.common.base.CharMatcher;
1: import com.google.common.base.Charsets;
0: import com.google.common.base.Splitter;
0: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Sets;
0: import com.google.common.io.Files;
1: import com.google.common.io.Resources;
1: import org.apache.mahout.classifier.AbstractVectorClassifier;
1: import org.apache.mahout.examples.MahoutTestCase;
1: import org.apache.mahout.math.DenseVector;
1: import org.apache.mahout.math.Vector;
1: import org.junit.Test;
1: 
0: import java.io.File;
0: import java.io.IOException;
1: import java.util.List;
1: import java.util.Set;
1: 
1: public class TrainLogisticTest extends MahoutTestCase {
0:   Splitter onWhiteSpace = Splitter.on(CharMatcher.BREAKING_WHITESPACE).trimResults().omitEmptyStrings();
1:   @Test
0:   public void testMain() throws IOException {
0:     String outputFile = "./model";
0:     String inputFile = "donut.csv";
0:     String[] args = Iterables.toArray(onWhiteSpace.split(
0:       "--input " +
0:         inputFile +
0:         " --output " +
0:         outputFile +
0:         " --target color --categories 2 " +
0:         "--predictors x y --types numeric --features 20 --passes 100 --rate 50 "), String.class);
0:     TrainLogistic.main(args);
1:     LogisticModelParameters lmp = TrainLogistic.getParameters();
0:     assertEquals(1e-4, lmp.getLambda(), 1e-9);
1:     assertEquals(20, lmp.getNumFeatures());
0:     assertEquals(true, lmp.useBias());
1:     assertEquals("color", lmp.getTargetVariable());
1:     CsvRecordFactory csv = lmp.getCsvRecordFactory();
0:     assertEquals("[1, 2]", Sets.newTreeSet(csv.getTargetCategories()).toString());
1:     assertEquals("[Intercept Term, x, y]", Sets.newTreeSet(csv.getPredictors()).toString());
1: 
1: 
1:     AbstractVectorClassifier model = TrainLogistic.getModel();
0:     ModelDissector md = new ModelDissector(2);
0:     List<String> data = Resources.readLines(Resources.getResource(inputFile), Charsets.UTF_8);
1:     for (String line : data.subList(1, data.size())) {
1:       Vector v = new DenseVector(lmp.getNumFeatures());
1:       csv.getTraceDictionary().clear();
1:       csv.processLine(line, v);
1:       md.update(v, csv.getTraceDictionary(), model);
1:     }
1: 
1:     List<ModelDissector.Weight> weights = md.summary(10);
0:     Set<String> expected = Sets.newHashSet("x", "y", "Intercept Term");
1:     for (ModelDissector.Weight weight : weights) {
1:       assertTrue(expected.remove(weight.getFeature()));
1:     }
1:     assertEquals(0, expected.size());
0:     System.out.printf("%s\n", weights);
1:   }
1: }
author:Andrew L. Farris
-------------------------------------------------------------------------------
commit:fa4822b
/////////////////////////////////////////////////////////////////////////
1:     String outputFile = getTestTempFile("model").getAbsolutePath();
============================================================================