1:8649ac2: /*
1:8649ac2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8649ac2:  * contributor license agreements.  See the NOTICE file distributed with
1:8649ac2:  * this work for additional information regarding copyright ownership.
1:8649ac2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8649ac2:  * (the "License"); you may not use this file except in compliance with
1:8649ac2:  * the License.  You may obtain a copy of the License at
1:8649ac2:  *
1:8649ac2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8649ac2:  *
1:8649ac2:  * Unless required by applicable law or agreed to in writing, software
1:8649ac2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8649ac2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8649ac2:  * See the License for the specific language governing permissions and
1:8649ac2:  * limitations under the License.
1:8649ac2:  */
1:8649ac2: 
1:8649ac2: package org.apache.mahout.math.neighborhood;
1:8649ac2: 
1:8649ac2: import java.util.List;
1:8649ac2: 
1:8649ac2: import com.google.common.collect.Iterables;
1:8649ac2: import com.google.common.collect.Lists;
1:8649ac2: import org.apache.lucene.util.PriorityQueue;
1:8649ac2: import org.apache.mahout.common.distance.DistanceMeasure;
1:8649ac2: import org.apache.mahout.math.MatrixSlice;
1:8649ac2: import org.apache.mahout.math.Vector;
1:8649ac2: import org.apache.mahout.math.WeightedVector;
1:8649ac2: import org.apache.mahout.math.random.WeightedThing;
1:8649ac2: 
1:8649ac2: /**
1:8649ac2:  * Describes how to search a bunch of vectors.
1:8649ac2:  * The vectors can be of any type (weighted, sparse, ...) but only the values of the vector  matter
1:8649ac2:  * when searching (weights, indices, ...) will not.
1:8649ac2:  *
1:8649ac2:  * When iterating through a Searcher, the Vectors added to it are returned.
1:8649ac2:  */
1:8649ac2: public abstract class Searcher implements Iterable<Vector> {
1:8649ac2:   protected DistanceMeasure distanceMeasure;
1:8649ac2: 
1:335a993:   protected Searcher(DistanceMeasure distanceMeasure) {
1:8649ac2:     this.distanceMeasure = distanceMeasure;
1:8649ac2:   }
1:8649ac2: 
1:58cc1ae:   public DistanceMeasure getDistanceMeasure() {
1:8649ac2:     return distanceMeasure;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Add a new Vector to the Searcher that will be checked when getting
1:8649ac2:    * the nearest neighbors.
1:8649ac2:    *
1:8649ac2:    * The vector IS NOT CLONED. Do not modify the vector externally otherwise the internal
1:8649ac2:    * Searcher data structures could be invalidated.
1:8649ac2:    */
1:8649ac2:   public abstract void add(Vector vector);
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Returns the number of WeightedVectors being searched for nearest neighbors.
1:8649ac2:    */
1:8649ac2:   public abstract int size();
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * When querying the Searcher for the closest vectors, a list of WeightedThing<Vector>s is
1:8649ac2:    * returned. The value of the WeightedThing is the neighbor and the weight is the
1:8649ac2:    * the distance (calculated by some metric - see a concrete implementation) between the query
1:8649ac2:    * and neighbor.
1:8649ac2:    * The actual type of vector in the pair is the same as the vector added to the Searcher.
1:8649ac2:    * @param query the vector to search for
1:8649ac2:    * @param limit the number of results to return
1:8649ac2:    * @return the list of weighted vectors closest to the query
1:8649ac2:    */
1:8649ac2:   public abstract List<WeightedThing<Vector>> search(Vector query, int limit);
1:8649ac2: 
1:8649ac2:   public List<List<WeightedThing<Vector>>> search(Iterable<? extends Vector> queries, int limit) {
1:8649ac2:     List<List<WeightedThing<Vector>>> results = Lists.newArrayListWithExpectedSize(Iterables.size(queries));
1:8649ac2:     for (Vector query : queries) {
1:8649ac2:       results.add(search(query, limit));
1:8649ac2:     }
1:8649ac2:     return results;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Returns the closest vector to the query.
1:8649ac2:    * When only one the nearest vector is needed, use this method, NOT search(query, limit) because
1:8649ac2:    * it's faster (less overhead).
1:8649ac2:    *
1:8649ac2:    * @param query the vector to search for
1:8649ac2:    * @param differentThanQuery if true, returns the closest vector different than the query (this
1:8649ac2:    *                           only matters if the query is among the searched vectors), otherwise,
1:8649ac2:    *                           returns the closest vector to the query (even the same vector).
1:8649ac2:    * @return the weighted vector closest to the query
1:8649ac2:    */
1:8649ac2:   public abstract WeightedThing<Vector> searchFirst(Vector query, boolean differentThanQuery);
1:8649ac2: 
1:8649ac2:   public List<WeightedThing<Vector>> searchFirst(Iterable<? extends Vector> queries, boolean differentThanQuery) {
1:8649ac2:     List<WeightedThing<Vector>> results = Lists.newArrayListWithExpectedSize(Iterables.size(queries));
1:8649ac2:     for (Vector query : queries) {
1:8649ac2:       results.add(searchFirst(query, differentThanQuery));
1:8649ac2:     }
1:8649ac2:     return results;
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Adds all the data elements in the Searcher.
1:8649ac2:    *
1:8649ac2:    * @param data an iterable of WeightedVectors to add.
1:8649ac2:    */
1:8649ac2:   public void addAll(Iterable<? extends Vector> data) {
1:8649ac2:     for (Vector vector : data) {
1:8649ac2:       add(vector);
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Adds all the data elements in the Searcher.
1:8649ac2:    *
1:8649ac2:    * @param data an iterable of MatrixSlices to add.
1:8649ac2:    */
1:8649ac2:   public void addAllMatrixSlices(Iterable<MatrixSlice> data) {
1:8649ac2:     for (MatrixSlice slice : data) {
1:8649ac2:       add(slice.vector());
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public void addAllMatrixSlicesAsWeightedVectors(Iterable<MatrixSlice> data) {
1:8649ac2:     for (MatrixSlice slice : data) {
1:8649ac2:       add(new WeightedVector(slice.vector(), 1, slice.index()));
1:8649ac2:     }
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public boolean remove(Vector v, double epsilon) {
1:8649ac2:     throw new UnsupportedOperationException("Can't remove a vector from a "
1:8649ac2:         + this.getClass().getName());
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   public void clear() {
1:8649ac2:     throw new UnsupportedOperationException("Can't remove vectors from a "
1:8649ac2:         + this.getClass().getName());
1:8649ac2:   }
1:8649ac2: 
1:8649ac2:   /**
1:8649ac2:    * Returns a bounded size priority queue, in reverse order that keeps track of the best nearest neighbor vectors.
1:8649ac2:    * @param limit maximum size of the heap.
1:8649ac2:    * @return the priority queue.
1:8649ac2:    */
1:8649ac2:   public static PriorityQueue<WeightedThing<Vector>> getCandidateQueue(int limit) {
1:8649ac2:     return new PriorityQueue<WeightedThing<Vector>>(limit) {
1:8649ac2:       @Override
1:8649ac2:       protected boolean lessThan(WeightedThing<Vector> a, WeightedThing<Vector> b) {
1:8649ac2:         return a.getWeight() > b.getWeight();
1:8649ac2:       }
1:8649ac2:     };
1:8649ac2:   }
1:8649ac2: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:335a993
/////////////////////////////////////////////////////////////////////////
1:   protected Searcher(DistanceMeasure distanceMeasure) {
author:Sebastian Schelter
-------------------------------------------------------------------------------
commit:58cc1ae
/////////////////////////////////////////////////////////////////////////
1:   public DistanceMeasure getDistanceMeasure() {
author:dfilimon
-------------------------------------------------------------------------------
commit:8649ac2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.neighborhood;
1: 
1: import java.util.List;
1: 
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Lists;
1: import org.apache.lucene.util.PriorityQueue;
1: import org.apache.mahout.common.distance.DistanceMeasure;
1: import org.apache.mahout.math.MatrixSlice;
1: import org.apache.mahout.math.Vector;
1: import org.apache.mahout.math.WeightedVector;
1: import org.apache.mahout.math.random.WeightedThing;
1: 
1: /**
1:  * Describes how to search a bunch of vectors.
1:  * The vectors can be of any type (weighted, sparse, ...) but only the values of the vector  matter
1:  * when searching (weights, indices, ...) will not.
1:  *
1:  * When iterating through a Searcher, the Vectors added to it are returned.
1:  */
1: public abstract class Searcher implements Iterable<Vector> {
1:   protected DistanceMeasure distanceMeasure;
1: 
0:   public Searcher(DistanceMeasure distanceMeasure) {
1:     this.distanceMeasure = distanceMeasure;
1:   }
1: 
0:   public DistanceMeasure getDistanceMeasure(){
1:     return distanceMeasure;
1:   }
1: 
1:   /**
1:    * Add a new Vector to the Searcher that will be checked when getting
1:    * the nearest neighbors.
1:    *
1:    * The vector IS NOT CLONED. Do not modify the vector externally otherwise the internal
1:    * Searcher data structures could be invalidated.
1:    */
1:   public abstract void add(Vector vector);
1: 
1:   /**
1:    * Returns the number of WeightedVectors being searched for nearest neighbors.
1:    */
1:   public abstract int size();
1: 
1:   /**
1:    * When querying the Searcher for the closest vectors, a list of WeightedThing<Vector>s is
1:    * returned. The value of the WeightedThing is the neighbor and the weight is the
1:    * the distance (calculated by some metric - see a concrete implementation) between the query
1:    * and neighbor.
1:    * The actual type of vector in the pair is the same as the vector added to the Searcher.
1:    * @param query the vector to search for
1:    * @param limit the number of results to return
1:    * @return the list of weighted vectors closest to the query
1:    */
1:   public abstract List<WeightedThing<Vector>> search(Vector query, int limit);
1: 
1:   public List<List<WeightedThing<Vector>>> search(Iterable<? extends Vector> queries, int limit) {
1:     List<List<WeightedThing<Vector>>> results = Lists.newArrayListWithExpectedSize(Iterables.size(queries));
1:     for (Vector query : queries) {
1:       results.add(search(query, limit));
1:     }
1:     return results;
1:   }
1: 
1:   /**
1:    * Returns the closest vector to the query.
1:    * When only one the nearest vector is needed, use this method, NOT search(query, limit) because
1:    * it's faster (less overhead).
1:    *
1:    * @param query the vector to search for
1:    * @param differentThanQuery if true, returns the closest vector different than the query (this
1:    *                           only matters if the query is among the searched vectors), otherwise,
1:    *                           returns the closest vector to the query (even the same vector).
1:    * @return the weighted vector closest to the query
1:    */
1:   public abstract WeightedThing<Vector> searchFirst(Vector query, boolean differentThanQuery);
1: 
1:   public List<WeightedThing<Vector>> searchFirst(Iterable<? extends Vector> queries, boolean differentThanQuery) {
1:     List<WeightedThing<Vector>> results = Lists.newArrayListWithExpectedSize(Iterables.size(queries));
1:     for (Vector query : queries) {
1:       results.add(searchFirst(query, differentThanQuery));
1:     }
1:     return results;
1:   }
1: 
1:   /**
1:    * Adds all the data elements in the Searcher.
1:    *
1:    * @param data an iterable of WeightedVectors to add.
1:    */
1:   public void addAll(Iterable<? extends Vector> data) {
1:     for (Vector vector : data) {
1:       add(vector);
1:     }
1:   }
1: 
1:   /**
1:    * Adds all the data elements in the Searcher.
1:    *
1:    * @param data an iterable of MatrixSlices to add.
1:    */
1:   public void addAllMatrixSlices(Iterable<MatrixSlice> data) {
1:     for (MatrixSlice slice : data) {
1:       add(slice.vector());
1:     }
1:   }
1: 
1:   public void addAllMatrixSlicesAsWeightedVectors(Iterable<MatrixSlice> data) {
1:     for (MatrixSlice slice : data) {
1:       add(new WeightedVector(slice.vector(), 1, slice.index()));
1:     }
1:   }
1: 
1:   public boolean remove(Vector v, double epsilon) {
1:     throw new UnsupportedOperationException("Can't remove a vector from a "
1:         + this.getClass().getName());
1:   }
1: 
1:   public void clear() {
1:     throw new UnsupportedOperationException("Can't remove vectors from a "
1:         + this.getClass().getName());
1:   }
1: 
1:   /**
1:    * Returns a bounded size priority queue, in reverse order that keeps track of the best nearest neighbor vectors.
1:    * @param limit maximum size of the heap.
1:    * @return the priority queue.
1:    */
1:   public static PriorityQueue<WeightedThing<Vector>> getCandidateQueue(int limit) {
1:     return new PriorityQueue<WeightedThing<Vector>>(limit) {
1:       @Override
1:       protected boolean lessThan(WeightedThing<Vector> a, WeightedThing<Vector> b) {
1:         return a.getWeight() > b.getWeight();
1:       }
1:     };
1:   }
1: }
============================================================================