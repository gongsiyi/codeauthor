1:07d3d5f: /*
1:07d3d5f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:07d3d5f:  * contributor license agreements.  See the NOTICE file distributed with
1:07d3d5f:  * this work for additional information regarding copyright ownership.
1:07d3d5f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:07d3d5f:  * (the "License"); you may not use this file except in compliance with
1:07d3d5f:  * the License.  You may obtain a copy of the License at
1:07d3d5f:  *
1:07d3d5f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07d3d5f:  *
1:07d3d5f:  * Unless required by applicable law or agreed to in writing, software
1:07d3d5f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07d3d5f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07d3d5f:  * See the License for the specific language governing permissions and
1:07d3d5f:  * limitations under the License.
1:07d3d5f:  */
3:07d3d5f: 
1:07d3d5f: package org.apache.mahout.cf.taste.impl.similarity.file;
1:07d3d5f: 
1:80366ee: import com.google.common.base.Function;
1:80366ee: import com.google.common.collect.ForwardingIterator;
1:80366ee: import com.google.common.collect.Iterators;
1:07d3d5f: import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
1:a13b4b7: import org.apache.mahout.common.iterator.FileLineIterator;
1:07d3d5f: 
1:07d3d5f: import java.io.File;
1:07d3d5f: import java.io.IOException;
1:80366ee: import java.util.Iterator;
1:07d3d5f: import java.util.regex.Pattern;
1:07d3d5f: 
1:07d3d5f: /**
1:a13b4b7:  * a simple iterator using a {@link FileLineIterator} internally, parsing each
1:80366ee:  * line into an {@link GenericItemSimilarity.ItemItemSimilarity}.
1:07d3d5f:  */
1:80366ee: final class FileItemItemSimilarityIterator extends ForwardingIterator<GenericItemSimilarity.ItemItemSimilarity> {
1:07d3d5f: 
1:07d3d5f:   private static final Pattern SEPARATOR = Pattern.compile("[,\t]");
1:07d3d5f: 
1:80366ee:   private final Iterator<GenericItemSimilarity.ItemItemSimilarity> delegate;
1:80366ee: 
1:07d3d5f:   FileItemItemSimilarityIterator(File similaritiesFile) throws IOException {
1:80366ee:     delegate = Iterators.transform(
1:80366ee:         new FileLineIterator(similaritiesFile),
1:80366ee:         new Function<String, GenericItemSimilarity.ItemItemSimilarity>() {
1:80366ee:           @Override
1:80366ee:           public GenericItemSimilarity.ItemItemSimilarity apply(String from) {
1:80366ee:             String[] tokens = SEPARATOR.split(from);
1:80366ee:             return new GenericItemSimilarity.ItemItemSimilarity(Long.parseLong(tokens[0]),
1:80366ee:                                                                 Long.parseLong(tokens[1]),
1:80366ee:                                                                 Double.parseDouble(tokens[2]));
1:80366ee:           }
1:80366ee:         });
3:07d3d5f:   }
1:07d3d5f: 
3:07d3d5f:   @Override
1:80366ee:   protected Iterator<GenericItemSimilarity.ItemItemSimilarity> delegate() {
1:80366ee:     return delegate;
1:07d3d5f:   }
1:07d3d5f: 
1:07d3d5f: }
============================================================================
author:pferrel
-------------------------------------------------------------------------------
commit:b988c49
author:frankscholten
-------------------------------------------------------------------------------
commit:1a42d85
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:80366ee
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.Function;
1: import com.google.common.collect.ForwardingIterator;
1: import com.google.common.collect.Iterators;
1: import java.util.Iterator;
1:  * line into an {@link GenericItemSimilarity.ItemItemSimilarity}.
1: final class FileItemItemSimilarityIterator extends ForwardingIterator<GenericItemSimilarity.ItemItemSimilarity> {
1:   private final Iterator<GenericItemSimilarity.ItemItemSimilarity> delegate;
1: 
1:     delegate = Iterators.transform(
1:         new FileLineIterator(similaritiesFile),
1:         new Function<String, GenericItemSimilarity.ItemItemSimilarity>() {
1:           @Override
1:           public GenericItemSimilarity.ItemItemSimilarity apply(String from) {
1:             String[] tokens = SEPARATOR.split(from);
1:             return new GenericItemSimilarity.ItemItemSimilarity(Long.parseLong(tokens[0]),
1:                                                                 Long.parseLong(tokens[1]),
1:                                                                 Double.parseDouble(tokens[2]));
1:           }
1:         });
1:   protected Iterator<GenericItemSimilarity.ItemItemSimilarity> delegate() {
1:     return delegate;
commit:a13b4b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.common.iterator.FileLineIterator;
0: import org.apache.mahout.common.iterator.TransformingIterator;
1:  * a simple iterator using a {@link FileLineIterator} internally, parsing each
0: final class FileItemItemSimilarityIterator
0:   extends TransformingIterator<String,GenericItemSimilarity.ItemItemSimilarity> {
0:     super(new FileLineIterator(similaritiesFile));
0:   protected GenericItemSimilarity.ItemItemSimilarity transform(String in) {
0:     String[] tokens = SEPARATOR.split(in);
commit:07d3d5f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.cf.taste.impl.similarity.file;
1: 
1: import org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity;
0: import org.apache.mahout.common.FileLineIterator;
1: 
1: import java.io.File;
1: import java.io.IOException;
0: import java.util.Iterator;
1: import java.util.regex.Pattern;
1: 
1: /**
0:  * a simple iterator using a {@link org.apache.mahout.common.FileLineIterator} internally, parsing each
0:  * line into an {@link org.apache.mahout.cf.taste.impl.similarity.GenericItemSimilarity.ItemItemSimilarity}
1:  */
0: final class FileItemItemSimilarityIterator implements Iterator<GenericItemSimilarity.ItemItemSimilarity> {
1: 
1:   private static final Pattern SEPARATOR = Pattern.compile("[,\t]");
1: 
0:   private final FileLineIterator lineIterator;
1: 
1:   FileItemItemSimilarityIterator(File similaritiesFile) throws IOException {
0:     lineIterator = new FileLineIterator(similaritiesFile);
1:   }
1: 
1:   @Override
0:   public boolean hasNext() {
0:     return lineIterator.hasNext();
1:   }
1: 
1:   @Override
0:   public GenericItemSimilarity.ItemItemSimilarity next() {
0:     String line = lineIterator.next();
0:     String[] tokens = SEPARATOR.split(line);
0:     return new GenericItemSimilarity.ItemItemSimilarity(Long.parseLong(tokens[0]),
0:                                                         Long.parseLong(tokens[1]),
0:                                                         Double.parseDouble(tokens[2]));
1:   }
1: 
1:   @Override
0:   public void remove() {
0:     throw new UnsupportedOperationException();
1:   }
1: }
============================================================================