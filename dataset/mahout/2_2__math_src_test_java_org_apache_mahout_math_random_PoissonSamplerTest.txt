1:a07bfc3: /*
1:a07bfc3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a07bfc3:  * contributor license agreements.  See the NOTICE file distributed with
1:a07bfc3:  * this work for additional information regarding copyright ownership.
1:a07bfc3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a07bfc3:  * (the "License"); you may not use this file except in compliance with
1:a07bfc3:  * the License.  You may obtain a copy of the License at
1:a07bfc3:  *
1:a07bfc3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a07bfc3:  *
1:a07bfc3:  * Unless required by applicable law or agreed to in writing, software
1:a07bfc3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a07bfc3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a07bfc3:  * See the License for the specific language governing permissions and
1:a07bfc3:  * limitations under the License.
1:a07bfc3:  */
4:a07bfc3: 
1:a07bfc3: package org.apache.mahout.math.random;
1:a07bfc3: 
1:2deba36: import org.apache.commons.math3.distribution.IntegerDistribution;
1:127d450: import org.apache.commons.math3.distribution.PoissonDistribution;
1:a07bfc3: import org.apache.mahout.common.RandomUtils;
1:8b6a26a: import org.apache.mahout.math.MahoutTestCase;
1:a07bfc3: import org.junit.Before;
1:a07bfc3: import org.junit.Test;
1:127d450: 
1:2deba36: public final class PoissonSamplerTest extends MahoutTestCase {
1:a07bfc3: 
1:127d450:   @Override
1:127d450:   @Before
1:127d450:   public void setUp() {
1:127d450:     RandomUtils.useTestSeed();
1:127d450:   }
1:127d450: 
1:127d450:   @Test
1:127d450:   public void testBasics() {
1:127d450:     for (double alpha : new double[]{0.1, 1, 10, 100}) {
1:127d450:       checkDistribution(new PoissonSampler(alpha), alpha);
1:127d450:     }
1:127d450:   }
1:127d450: 
1:2deba36:   private static void checkDistribution(Sampler<Double> pd, double alpha) {
1:127d450:     int[] count = new int[(int) Math.max(10, 5 * alpha)];
1:127d450:     for (int i = 0; i < 10000; i++) {
1:127d450:       count[pd.sample().intValue()]++;
5:a07bfc3:     }
1:a07bfc3: 
1:2deba36:     IntegerDistribution ref = new PoissonDistribution(RandomUtils.getRandom().getRandomGenerator(),
1:2deba36:                                                       alpha,
1:2deba36:                                                       PoissonDistribution.DEFAULT_EPSILON,
1:2deba36:                                                       PoissonDistribution.DEFAULT_MAX_ITERATIONS);
1:127d450:     for (int i = 0; i < count.length; i++) {
1:127d450:       assertEquals(ref.probability(i), count[i] / 10000.0, 2.0e-2);
1:127d450:     }
1:a07bfc3:   }
1:a07bfc3: }
============================================================================
author:Sean R. Owen
-------------------------------------------------------------------------------
commit:2deba36
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.math3.distribution.IntegerDistribution;
1: public final class PoissonSamplerTest extends MahoutTestCase {
/////////////////////////////////////////////////////////////////////////
1:   private static void checkDistribution(Sampler<Double> pd, double alpha) {
1:     IntegerDistribution ref = new PoissonDistribution(RandomUtils.getRandom().getRandomGenerator(),
1:                                                       alpha,
1:                                                       PoissonDistribution.DEFAULT_EPSILON,
1:                                                       PoissonDistribution.DEFAULT_MAX_ITERATIONS);
commit:127d450
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.math3.distribution.PoissonDistribution;
1: 
1:   @Override
1:   @Before
1:   public void setUp() {
1:     RandomUtils.useTestSeed();
1:   }
1: 
1:   @Test
1:   public void testBasics() {
1:     for (double alpha : new double[]{0.1, 1, 10, 100}) {
1:       checkDistribution(new PoissonSampler(alpha), alpha);
1:     }
1:   }
1: 
0:   private static void checkDistribution(PoissonSampler pd, double alpha) {
1:     int[] count = new int[(int) Math.max(10, 5 * alpha)];
1:     for (int i = 0; i < 10000; i++) {
1:       count[pd.sample().intValue()]++;
0:     PoissonDistribution ref = new PoissonDistribution(alpha);
1:     for (int i = 0; i < count.length; i++) {
1:       assertEquals(ref.probability(i), count[i] / 10000.0, 2.0e-2);
1:   }
commit:8b6a26a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.mahout.math.MahoutTestCase;
0: public class PoissonSamplerTest extends MahoutTestCase {
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     private static void checkDistribution(PoissonSampler pd, double alpha) {
/////////////////////////////////////////////////////////////////////////
0:             assertEquals(ref.probability(i), count[i] / 10000.0, 2.0e-2);
author:Ted Dunning
-------------------------------------------------------------------------------
commit:a07bfc3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.mahout.math.random;
1: 
0: import org.apache.commons.math.distribution.PoissonDistribution;
0: import org.apache.commons.math.distribution.PoissonDistributionImpl;
1: import org.apache.mahout.common.RandomUtils;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: public class PoissonSamplerTest {
0:     @Before
0:     public void setUp() {
0:         RandomUtils.useTestSeed();
1:     }
1: 
0:     @Test
0:     public void testBasics() {
0:         for (double alpha : new double[]{0.1, 1, 10, 100}) {
0:             checkDistribution(new PoissonSampler(alpha), alpha);
1:         }
1:     }
1: 
0:     private void checkDistribution(PoissonSampler pd, double alpha) {
0:         int[] count = new int[(int) Math.max(10, 5 * alpha)];
0:         for (int i = 0; i < 10000; i++) {
0:             count[pd.sample().intValue()]++;
1:         }
1: 
0:         PoissonDistribution ref = new PoissonDistributionImpl(alpha);
0:         for (int i = 0; i < count.length; i++) {
0:             assertEquals(ref.probability(i), count[i] / 10000.0, 2e-2);
1:         }
1:     }
1: }
============================================================================