1:9e140bf: /*
1:9e140bf:  * Licensed to the Apache Software Foundation (ASF) under one
1:9e140bf:  * or more contributor license agreements.  See the NOTICE file
1:9e140bf:  * distributed with this work for additional information
1:9e140bf:  * regarding copyright ownership.  The ASF licenses this file
1:9e140bf:  * to you under the Apache License, Version 2.0 (the
1:9e140bf:  * "License"); you may not use this file except in compliance
1:9e140bf:  * with the License.  You may obtain a copy of the License at
1:9e140bf:  *
1:9e140bf:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9e140bf:  *
1:9e140bf:  * Unless required by applicable law or agreed to in writing,
1:9e140bf:  * software distributed under the License is distributed on an
1:9e140bf:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9e140bf:  * KIND, either express or implied.  See the License for the
1:9e140bf:  * specific language governing permissions and limitations
1:9e140bf:  * under the License.
1:9e140bf:  */
1:9e140bf: package org.apache.aries.jndi;
18:9e140bf: 
1:9e140bf: import java.util.Arrays;
1:9e140bf: import java.util.Hashtable;
1:9e140bf: 
1:9e140bf: import javax.naming.Context;
1:9e140bf: import javax.naming.Name;
1:9e140bf: import javax.naming.NamingException;
1:9e140bf: import javax.naming.Reference;
1:9e140bf: import javax.naming.Referenceable;
1:9e140bf: import javax.naming.directory.Attributes;
1:9e140bf: import javax.naming.spi.DirObjectFactory;
1:9e140bf: import javax.naming.spi.ObjectFactory;
1:9e140bf: import javax.naming.spi.ObjectFactoryBuilder;
1:9e140bf: 
1:7b2544b: import org.osgi.framework.BundleContext;
1:9e140bf: import org.osgi.framework.ServiceReference;
1:31b19f1: 
1:9e140bf: public class DirObjectFactoryHelper extends ObjectFactoryHelper implements DirObjectFactory {
1:31b19f1: 
1:7b2544b:     public DirObjectFactoryHelper(BundleContext defaultContext, BundleContext callerContext) {
1:7b2544b:         super(defaultContext, callerContext);
1:7b2544b:     }
1:7b2544b:     
1:e04b9ae:     public Object getObjectInstance(Object obj,
1:e04b9ae:                                     Name name,
1:e04b9ae:                                     Context nameCtx,
1:e04b9ae:                                     Hashtable<?, ?> environment,
1:e04b9ae:                                     Attributes attrs) throws Exception {
1:7bee809: 
1:9e140bf:         // Step 1
1:9e140bf:         if (obj instanceof Referenceable) {
1:9e140bf:             obj = ((Referenceable) obj).getReference();
1:7b2544b:         }
1:e04b9ae: 
1:9e140bf:         Object result = obj;
1:7b2544b: 
1:9e140bf:         // Step 2
1:9e140bf:         if (obj instanceof Reference) {
1:9e140bf:             Reference ref = (Reference) obj;
1:9e140bf:             String className = ref.getFactoryClassName();
1:9e140bf: 
1:9e140bf:             if (className != null) {
1:9e140bf:                 // Step 3
1:9e140bf:                 result = getObjectInstanceUsingClassName(obj, className, obj, name, nameCtx, environment, attrs);
1:7b2544b:             }
30:9e140bf:         }
1:9e140bf: 
1:b756d71:         // Step 4
1:2b1b14d:         if (result == null || result == obj) {
1:9e140bf:             result = getObjectInstanceUsingObjectFactoryBuilders(obj, name, nameCtx, environment, attrs);
1:9e140bf:         }
1:9e140bf:         
1:b756d71:         // Step 5
2:9e140bf:         if (result == null || result == obj) {                
1:9e140bf:             if ((obj instanceof Reference && ((Reference) obj).getFactoryClassName() == null) ||
1:9e140bf:                 !(obj instanceof Reference)) {
1:9e140bf:                 result = getObjectInstanceUsingObjectFactories(obj, name, nameCtx, environment, attrs);
1:9e140bf:             }
1:9e140bf:         }
1:9e140bf: 
1:7bee809:         // Extra, non-standard, bonus step. If javax.naming.OBJECT_FACTORIES is set as 
1:7bee809:         // a property in the environment, use its value to construct additional object factories. 
1:7bee809:         // Added under Aries-822, with reference 
1:7bee809:         // to https://www.osgi.org/bugzilla/show_bug.cgi?id=138 
1:7bee809:         if (result == null || result == obj) {
1:df049d7:             result = getObjectInstanceViaContextDotObjectFactories(obj, name, nameCtx, environment, attrs);
1:7bee809:         } 
1:7bee809:         
2:9e140bf:         return (result == null) ? obj : result;
1:2b1b14d:     }
1:2b1b14d: 
1:9e140bf:     private Object getObjectInstanceUsingObjectFactories(Object obj,
1:7b2544b:                                                          Name name,
1:7b2544b:                                                          Context nameCtx,
1:7b2544b:                                                          Hashtable<?, ?> environment,
2:9e140bf:                                                          Attributes attrs) 
2:9e140bf:         throws Exception {
1:7bee809:         
2:9e140bf:         Object result = null;
1:7f6baa5:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, DirObjectFactory.class);
1:e04b9ae:         if (refs != null) {
1:7bee809:             Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:7bee809:             for (ServiceReference ref : refs) {
1:31b19f1:               
1:7bee809:                 if (canCallObjectFactory(obj, ref)) {
1:7f6baa5:                     DirObjectFactory factory = (DirObjectFactory) Utils.getServicePrivileged(callerContext, ref);
1:7f6baa5:     
1:7f6baa5:                     try {
1:7f6baa5:                         result = factory.getObjectInstance(obj, name, nameCtx, environment, attrs);
1:7f6baa5:                     } finally {
1:7f6baa5:                         callerContext.ungetService(ref);
1:7f6baa5:                     }
1:7f6baa5:     
1:7bee809:                     // if the result comes back and is not null and not the reference
1:7bee809:                     // object then we should return the result, so break out of the
1:7bee809:                     // loop we are in.
1:7bee809:                     if (result != null && result != obj) {
1:7bee809:                         break;
1:7bee809:                     }
1:7bee809:                 }
1:7bee809:             }
1:7bee809:         }
1:7bee809: 
1:9e140bf:         if (result == null) {
1:9e140bf:             result = getObjectInstanceUsingObjectFactories(obj, name, nameCtx, environment);
1:e04b9ae:         }
1:7bee809:         
1:9e140bf:         return (result == null) ? obj : result;
1:e04b9ae:     }
1:9e140bf: 
1:7bee809:     private boolean canCallObjectFactory(Object obj, ServiceReference ref)
1:7bee809:     {
1:7bee809:       if (obj instanceof Reference) return true;
1:7bee809:       
1:7bee809:       Object prop = ref.getProperty("aries.object.factory.requires.reference");
1:7bee809:       
1:7bee809:       if (prop == null) return true;
1:7bee809:       
1:7bee809:       if (prop instanceof Boolean) return !!!(Boolean) prop; // if set to true we don't call.
1:7bee809:       
1:7bee809:       return true;
1:7bee809:     }
1:7bee809: 
1:9e140bf:     private Object getObjectInstanceUsingClassName(Object reference,
1:9e140bf:                                                    String className,
2:9e140bf:                                                    Object obj,
4:9e140bf:                                                    Name name,
4:9e140bf:                                                    Context nameCtx,
4:9e140bf:                                                    Hashtable<?, ?> environment,
1:9e140bf:                                                    Attributes attrs)
1:9e140bf:         throws Exception {
1:9e140bf: 
1:7f6baa5:         Tuple<ServiceReference, ObjectFactory> tuple = ObjectFactoryHelper.findObjectFactoryByClassName(defaultContext, className);
1:9e140bf:         Object result = null;
1:9e140bf:         
1:e04b9ae:         if (tuple.second != null) {
1:7f6baa5:             try {
1:7f6baa5:                 result = ((DirObjectFactory) tuple.second).getObjectInstance(reference, name, nameCtx, environment, attrs);
1:7f6baa5:             } finally {
1:7f6baa5:                 defaultContext.ungetService(tuple.first);
1:7f6baa5:             }
1:e04b9ae:         }
1:9e140bf: 
1:9e140bf:         return (result == null) ? obj : result;
1:9e140bf:     }
1:9e140bf:   
1:9e140bf:     private Object getObjectInstanceUsingObjectFactoryBuilders(Object obj,
1:9e140bf:                                                                Name name,
1:9e140bf:                                                                Context nameCtx,
1:9e140bf:                                                                Hashtable<?, ?> environment,
1:9e140bf:                                                                Attributes attrs) 
1:9e140bf:         throws Exception {
1:9e140bf:         ObjectFactory factory = null;
1:7f6baa5:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactoryBuilder.class);
1:e04b9ae:         if (refs != null) {
1:7bee809:             Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:7bee809:             for (ServiceReference ref : refs) {
1:7f6baa5:                 ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
1:7bee809:                 try {
1:7bee809:                     factory = builder.createObjectFactory(obj, environment);
1:7bee809:                 } catch (NamingException e) {
1:7bee809:                     // TODO: log it
1:7f6baa5:                 } finally {
1:7f6baa5:                     callerContext.ungetService(ref);
1:7bee809:                 }
1:7bee809:                 if (factory != null) {
1:7bee809:                     break;
1:7bee809:                 }
1:7bee809:             }
1:e04b9ae:         }
1:9e140bf: 
1:9e140bf:         Object result = null;
1:9e140bf:         
1:e04b9ae:         if (factory != null) {
1:9e140bf:             if (factory instanceof DirObjectFactory) {       
1:9e140bf:                 result = ((DirObjectFactory) factory).getObjectInstance(obj, name, nameCtx, environment, attrs);
2:9e140bf:             } else {
1:9e140bf:                 result = factory.getObjectInstance(obj, name, nameCtx, environment);
1:e04b9ae:             }
1:e04b9ae:         }
1:9e140bf:         
1:9e140bf:         return (result == null) ? obj : result;
1:9e140bf:     }
1:9e140bf: 
1:9e140bf: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:7f6baa5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, DirObjectFactory.class);
1:                     DirObjectFactory factory = (DirObjectFactory) Utils.getServicePrivileged(callerContext, ref);
1:     
1:                     try {
1:                         result = factory.getObjectInstance(obj, name, nameCtx, environment, attrs);
1:                     } finally {
1:                         callerContext.ungetService(ref);
1:                     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         Tuple<ServiceReference, ObjectFactory> tuple = ObjectFactoryHelper.findObjectFactoryByClassName(defaultContext, className);
1:             try {
1:                 result = ((DirObjectFactory) tuple.second).getObjectInstance(reference, name, nameCtx, environment, attrs);
1:             } finally {
1:                 defaultContext.ungetService(tuple.first);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactoryBuilder.class);
1:                 ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
1:                 } finally {
1:                     callerContext.ungetService(ref);
commit:31b19f1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jndi.tracker.ServiceTrackerCustomizers;
0:     private ServiceTrackerCustomizers.ContextServiceTrackerCustomizer dirObjFactorySTC = null;
1: 
1:   
0:         dirObjFactorySTC = ServiceTrackerCustomizers.getOrRegisterServiceTracker(callerContext, DirObjectFactory.class.getName());
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference[] refs = dirObjFactorySTC.getServiceRefs(); 
0:                     DirObjectFactory factory = (DirObjectFactory) dirObjFactorySTC.getService(ref);
0:                     result = factory.getObjectInstance(obj, name, nameCtx, environment, attrs);
1:                     
/////////////////////////////////////////////////////////////////////////
0:         Tuple<ServiceReference, ObjectFactory> tuple = ObjectFactoryHelper.findObjectFactoryByClassName(defaultStC, className);
0:             result = ((DirObjectFactory) tuple.second).getObjectInstance(reference, name, nameCtx, environment, attrs);
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference[] refs = objFactoryBuilderStC.getServiceRefs();
0:                 ObjectFactoryBuilder builder = (ObjectFactoryBuilder) objFactoryBuilderStC.getService(ref);
commit:df049d7
/////////////////////////////////////////////////////////////////////////
1:             result = getObjectInstanceViaContextDotObjectFactories(obj, name, nameCtx, environment, attrs);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:7bee809
/////////////////////////////////////////////////////////////////////////
1:         // Extra, non-standard, bonus step. If javax.naming.OBJECT_FACTORIES is set as 
1:         // a property in the environment, use its value to construct additional object factories. 
1:         // Added under Aries-822, with reference 
1:         // to https://www.osgi.org/bugzilla/show_bug.cgi?id=138 
1:         if (result == null || result == obj) {
0:             result = getObjectInstanceViaContextDotObjectFactories(obj, name, nameCtx, environment);
1:         } 
1:         
/////////////////////////////////////////////////////////////////////////
1:         
1:             Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:             for (ServiceReference ref : refs) {
1:               
1:                 if (canCallObjectFactory(obj, ref)) {
0:                     DirObjectFactory factory = (DirObjectFactory) Utils.getServicePrivileged(callerContext, ref);
1:     
1:                     try {
0:                         result = factory.getObjectInstance(obj, name, nameCtx, environment, attrs);
0:                     } finally {
0:                         callerContext.ungetService(ref);
1:                     }
1:     
1:                     // if the result comes back and is not null and not the reference
1:                     // object then we should return the result, so break out of the
1:                     // loop we are in.
1:                     if (result != null && result != obj) {
1:                         break;
1:                     }
1:                 }
1:             }
/////////////////////////////////////////////////////////////////////////
1:     private boolean canCallObjectFactory(Object obj, ServiceReference ref)
1:     {
1:       if (obj instanceof Reference) return true;
1:       
1:       Object prop = ref.getProperty("aries.object.factory.requires.reference");
1:       
1:       if (prop == null) return true;
1:       
1:       if (prop instanceof Boolean) return !!!(Boolean) prop; // if set to true we don't call.
1:       
1:       return true;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:             try {
0:                 result = ((DirObjectFactory) tuple.second).getObjectInstance(reference, name, nameCtx, environment, attrs);
/////////////////////////////////////////////////////////////////////////
1:             Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
1:             for (ServiceReference ref : refs) {
0:                 ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
0:                 try {
1:                     factory = builder.createObjectFactory(obj, environment);
1:                 } catch (NamingException e) {
1:                     // TODO: log it
0:                 } finally {
0:                     callerContext.ungetService(ref);
1:                 }
1:                 if (factory != null) {
1:                     break;
1:                 }
1:             }
commit:b756d71
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // Step 4
1:         // Step 5
/////////////////////////////////////////////////////////////////////////
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:2b1b14d
/////////////////////////////////////////////////////////////////////////
0: 		// Extra, non-standard, bonus step. If javax.naming.OBJECT_FACTORIES is set as 
0: 		// a property in the environment, use its value to construct additional object factories. 
0: 		// Added under Aries-822, with reference 
0: 		// to https://www.osgi.org/bugzilla/show_bug.cgi?id=138 
1: 		if (result == null || result == obj) {
0: 			result = getObjectInstanceViaContextDotObjectFactories(obj, name, nameCtx, environment);
1: 		} 
1: 		
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:e04b9ae
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Object getObjectInstance(Object obj,
1:                                     Name name,
1:                                     Context nameCtx,
1:                                     Hashtable<?, ?> environment,
1:                                     Attributes attrs) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     	
0:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, DirObjectFactory.class);
1:         if (refs != null) {
0:         	Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
0:         	for (ServiceReference ref : refs) {
0:         		DirObjectFactory factory = (DirObjectFactory) Utils.getServicePrivileged(callerContext, ref);
0:         		try {
0:         			result = factory.getObjectInstance(obj, name, nameCtx, environment, attrs);
0:         		} finally {
0:         			callerContext.ungetService(ref);
1:         		}
0:         		// if the result comes back and is not null and not the reference
0:         		// object then we should return the result, so break out of the
0:         		// loop we are in.
0:         		if (result != null && result != obj) {
0:         			break;
1:         		}
1:         	}
/////////////////////////////////////////////////////////////////////////
0:         Tuple<ServiceReference, ObjectFactory> tuple = ObjectFactoryHelper.findObjectFactoryByClassName(defaultContext, className);
1:         if (tuple.second != null) {
0:         	try {
0:         		result = ((DirObjectFactory) tuple.second).getObjectInstance(reference, name, nameCtx, environment, attrs);
0:                 defaultContext.ungetService(tuple.first);
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference[] refs = Utils.getReferencesPrivileged(callerContext, ObjectFactoryBuilder.class);
1:         if (refs != null) {
0:         	Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
0:         	for (ServiceReference ref : refs) {
0:         		ObjectFactoryBuilder builder = (ObjectFactoryBuilder) Utils.getServicePrivileged(callerContext, ref);
0:         		try {
0:         			factory = builder.createObjectFactory(obj, environment);
0:         		} catch (NamingException e) {
0:         			// TODO: log it
0:         		} finally {
0:         			callerContext.ungetService(ref);
1:         		}
1:         		if (factory != null) {
0:         			break;
1:         		}
1:         	}
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
0: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1:     public DirObjectFactoryHelper(BundleContext defaultContext, BundleContext callerContext) {
1:         super(defaultContext, callerContext);
1:     }
1:     
0:     public Object getObjectInstance(final Object obj,
0:                                     final Name name,
0:                                     final Context nameCtx,
0:                                     final Hashtable<?, ?> environment,
0:                                     final Attributes attrs) throws Exception {
0:         return Utils.doPrivileged(new PrivilegedExceptionAction<Object>() {
0:             public Object run() throws Exception {
0:                 return doGetObjectInstance(obj, name, nameCtx, environment, attrs);
1:             }            
0:         });
1:     }
1:     
0:     private Object doGetObjectInstance(Object obj,
1:                                        Name name,
1:                                        Context nameCtx,
1:                                        Hashtable<?, ?> environment,
0:                                        Attributes attrs) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:             ServiceReference[] refs = callerContext.getServiceReferences(DirObjectFactory.class.getName(), null);
0:                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
0:                     DirObjectFactory factory = (DirObjectFactory) callerContext.getService(ref);
0:                         callerContext.ungetService(ref);
/////////////////////////////////////////////////////////////////////////
0:                     ServiceReference[] services = callerContext.getServiceReferences(DirObjectFactory.class.getName(), 
/////////////////////////////////////////////////////////////////////////
0:                     factory = (DirObjectFactory) callerContext.getService(ref);
0:                         callerContext.ungetService(ref);
/////////////////////////////////////////////////////////////////////////
0:             ServiceReference[] refs = defaultContext.getServiceReferences(className, null);
/////////////////////////////////////////////////////////////////////////
0:             DirObjectFactory factory = (DirObjectFactory) defaultContext.getService(serviceReference);
0:                 defaultContext.ungetService(serviceReference);
/////////////////////////////////////////////////////////////////////////
0:             ServiceReference[] refs = callerContext.getServiceReferences(ObjectFactoryBuilder.class.getName(), null);
0:                 Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
0:                     ObjectFactoryBuilder builder = (ObjectFactoryBuilder) callerContext.getService(ref);
0:                         callerContext.ungetService(ref);
commit:9e140bf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import java.util.Arrays;
0: import java.util.Enumeration;
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.NamingException;
0: import javax.naming.RefAddr;
1: import javax.naming.Reference;
1: import javax.naming.Referenceable;
0: import javax.naming.StringRefAddr;
1: import javax.naming.directory.Attributes;
1: import javax.naming.spi.DirObjectFactory;
1: import javax.naming.spi.ObjectFactory;
1: import javax.naming.spi.ObjectFactoryBuilder;
1: 
0: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
0: import org.osgi.service.jndi.JNDIConstants;
1: 
1: public class DirObjectFactoryHelper extends ObjectFactoryHelper implements DirObjectFactory {
1: 
0:     public Object getObjectInstance(Object obj,
1:                                     Name name,
1:                                     Context nameCtx,
1:                                     Hashtable<?, ?> environment,
0:                                     Attributes attrs) throws Exception {
1: 
1:         // Step 1
1:         if (obj instanceof Referenceable) {
1:             obj = ((Referenceable) obj).getReference();
1:         }
1: 
1:         Object result = obj;
1: 
1:         // Step 2
1:         if (obj instanceof Reference) {
1:             Reference ref = (Reference) obj;
1:             String className = ref.getFactoryClassName();
1: 
1:             if (className != null) {
1:                 // Step 3
1:                 result = getObjectInstanceUsingClassName(obj, className, obj, name, nameCtx, environment, attrs);
1:             } else {
0:                 // Step 4
0:                 result = getObjectInstanceUsingRefAddress(ref.getAll(), obj, name, nameCtx, environment, attrs);
1:             }
1:         }
1: 
0:         // Step 5
1:         if (result == null || result == obj) {
1:             result = getObjectInstanceUsingObjectFactoryBuilders(obj, name, nameCtx, environment, attrs);
1:         }
1:         
0:         // Step 6
1:         if (result == null || result == obj) {                
1:             if ((obj instanceof Reference && ((Reference) obj).getFactoryClassName() == null) ||
1:                 !(obj instanceof Reference)) {
1:                 result = getObjectInstanceUsingObjectFactories(obj, name, nameCtx, environment, attrs);
1:             }
1:         }
1: 
1:         return (result == null) ? obj : result;
1:     }
1: 
1:     private Object getObjectInstanceUsingObjectFactories(Object obj,
1:                                                          Name name,
1:                                                          Context nameCtx,
1:                                                          Hashtable<?, ?> environment,
1:                                                          Attributes attrs) 
1:         throws Exception {
1:         Object result = null;
0:         try {
0:             ServiceReference[] refs = context.getAllServiceReferences(DirObjectFactory.class.getName(), null);
0:             if (refs != null) {
0:                 Arrays.sort(refs, ContextHelper.SERVICE_REFERENCE_COMPARATOR);
0:                 for (ServiceReference ref : refs) {
0:                     DirObjectFactory factory = (DirObjectFactory) context.getService(ref);
1: 
0:                     try {
0:                         result = factory.getObjectInstance(obj, name, nameCtx, environment, attrs);
0:                     } finally {
0:                         context.ungetService(ref);
1:                     }
1: 
0:                     // if the result comes back and is not null and not the reference
0:                     // object then we should return the result, so break out of the
0:                     // loop we are in.
0:                     if (result != null && result != obj) {
0:                         break;
1:                     }
1:                 }
1:             }
0:         } catch (InvalidSyntaxException e) {
0:             // should not happen
0:             throw new RuntimeException("Invalid filter", e);
1:         }
1: 
1:         if (result == null) {
1:             result = getObjectInstanceUsingObjectFactories(obj, name, nameCtx, environment);
1:         }
1:         
1:         return (result == null) ? obj : result;
1:     }
1: 
0:     private Object getObjectInstanceUsingRefAddress(Enumeration<RefAddr> addresses,
1:                                                     Object obj,
1:                                                     Name name,
1:                                                     Context nameCtx,
1:                                                     Hashtable<?, ?> environment,
1:                                                     Attributes attrs) 
1:         throws Exception {
1:         Object result = null;
0:         while (addresses.hasMoreElements()) {
0:             RefAddr address = addresses.nextElement();
0:             if (address instanceof StringRefAddr && "URL".equals(address.getType())) {
0:                 String urlScheme = getUrlScheme( (String) address.getContent() );
0:                 DirObjectFactory factory = null;
0:                 ServiceReference ref = null;
0:                 try {
0:                     ServiceReference[] services = context.getServiceReferences(DirObjectFactory.class.getName(), 
0:                             "(&(" + JNDIConstants.JNDI_URLSCHEME + "=" + urlScheme + "))");
1: 
0:                     if (services != null && services.length > 0) {
0:                         ref = services[0];
1:                     }
0:                 } catch (InvalidSyntaxException e) {
0:                     // should not happen
0:                     throw new RuntimeException("Invalid filter", e);
1:                 }
1: 
0:                 if (ref != null) {
0:                     factory = (DirObjectFactory) context.getService(ref);
1:                     
0:                     String value = (String) address.getContent();
0:                     try {
0:                         result = factory.getObjectInstance(value, name, nameCtx, environment, attrs);
0:                     } finally {
0:                         context.ungetService(ref);
1:                     }
1: 
0:                     // if the result comes back and is not null and not the reference
0:                     // object then we should return the result, so break out of the
0:                     // loop we are in.
0:                     if (result != null && result != obj) {
0:                         break;
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         return (result == null) ? obj : result;
1:     }
1: 
1:     private Object getObjectInstanceUsingClassName(Object reference,
1:                                                    String className,
1:                                                    Object obj,
1:                                                    Name name,
1:                                                    Context nameCtx,
1:                                                    Hashtable<?, ?> environment,
1:                                                    Attributes attrs)
1:         throws Exception {
0:         ServiceReference serviceReference = null;
1: 
0:         try {
0:             ServiceReference[] refs = context.getAllServiceReferences(className, null);
0:             if (refs != null && refs.length > 0) {
0:                 serviceReference = refs[0];
1:             }
0:         } catch (InvalidSyntaxException e) {
0:             // should not happen
0:             throw new RuntimeException("Invalid filter", e);
1:         }
1: 
1:         Object result = null;
1:         
0:         if (serviceReference != null) {
0:             DirObjectFactory factory = (DirObjectFactory) context.getService(serviceReference);
0:             try {
0:                 result = factory.getObjectInstance(reference, name, nameCtx, environment, attrs);
0:             } finally {
0:                 context.ungetService(serviceReference);
1:             }
1:         }
1: 
1:         return (result == null) ? obj : result;
1:     }
1:   
1:     private Object getObjectInstanceUsingObjectFactoryBuilders(Object obj,
1:                                                                Name name,
1:                                                                Context nameCtx,
1:                                                                Hashtable<?, ?> environment,
1:                                                                Attributes attrs) 
1:         throws Exception {
1:         ObjectFactory factory = null;
0:         try {
0:             ServiceReference[] refs = context.getServiceReferences(ObjectFactoryBuilder.class.getName(), null);
0:             if (refs != null) {
0:                 Arrays.sort(refs, ContextHelper.SERVICE_REFERENCE_COMPARATOR);
0:                 for (ServiceReference ref : refs) {
0:                     ObjectFactoryBuilder builder = (ObjectFactoryBuilder) context.getService(ref);
0:                     try {
0:                         factory = builder.createObjectFactory(obj, environment);
0:                     } catch (NamingException e) {
0:                         // TODO: log it
0:                     } finally {
0:                         context.ungetService(ref);
1:                     }
0:                     if (factory != null) {
0:                         break;
1:                     }
1:                 }
1:             }
0:         } catch (InvalidSyntaxException e) {
0:             // should not happen
0:             throw new RuntimeException("Invalid filter", e);
1:         }
1: 
1:         Object result = null;
1:         
0:         if (factory != null) {
1:             if (factory instanceof DirObjectFactory) {       
1:                 result = ((DirObjectFactory) factory).getObjectInstance(obj, name, nameCtx, environment, attrs);
1:             } else {
1:                 result = factory.getObjectInstance(obj, name, nameCtx, environment);
1:             }
1:         }
1:         
1:         return (result == null) ? obj : result;
1:     }
1: 
1: }
============================================================================