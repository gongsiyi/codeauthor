1:24455ce: /*
1:24455ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:24455ce:  * or more contributor license agreements.  See the NOTICE file
1:24455ce:  * distributed with this work for additional information
1:24455ce:  * regarding copyright ownership.  The ASF licenses this file
1:24455ce:  * to you under the Apache License, Version 2.0 (the
1:24455ce:  * "License"); you may not use this file except in compliance
1:24455ce:  * with the License.  You may obtain a copy of the License at
1:24455ce:  *
1:24455ce:  *   http://www.apache.org/licenses/LICENSE-2.0
1:24455ce:  *
1:24455ce:  * Unless required by applicable law or agreed to in writing,
1:24455ce:  * software distributed under the License is distributed on an
1:24455ce:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:24455ce:  * KIND, either express or implied.  See the License for the
1:24455ce:  * specific language governing permissions and limitations
1:24455ce:  * under the License.
1:24455ce:  */
1:24455ce: package org.apache.aries.proxy.impl;
1:24455ce: 
1:5109e38: 
1:24455ce: import org.apache.aries.proxy.ProxyManager;
1:24455ce: import org.osgi.framework.BundleActivator;
1:24455ce: import org.osgi.framework.BundleContext;
1:18a59b5: import org.osgi.framework.ServiceRegistration;
1:24455ce: 
1:24455ce: public class ProxyManagerActivator implements BundleActivator 
1:24455ce: {
1:24455ce:   private static final boolean ASM_PROXY_SUPPORTED;
1:24455ce:   private AbstractProxyManager managerService;
1:18a59b5:   private ServiceRegistration registration;
1:24455ce:   
1:24455ce:   static
1:24455ce:   {
1:24455ce:     boolean classProxy = false;
1:24455ce:     try {
1:24455ce:       // Try load load a asm class (to make sure it's actually available
1:24455ce:       // then create the asm factory
1:48be854:       Class.forName("org.objectweb.asm.ClassVisitor", false, ProxyManagerActivator.class.getClassLoader());
1:24455ce:       classProxy = true;
1:24455ce:     } catch (Throwable t) {
1:24455ce:     }
1:24455ce:     
1:24455ce:     ASM_PROXY_SUPPORTED = classProxy;
1:24455ce:   }
1:24455ce:   
1:24455ce:   public void start(BundleContext context)
1:24455ce:   {
1:24455ce:     if (ASM_PROXY_SUPPORTED) {
1:24455ce:       managerService = new AsmProxyManager();
1:96d4e06:       
1:96d4e06:       try {
1:96d4e06:         //if ASM is available then we should also try weaving
1:48be854:         Class<?> cls = Class.forName("org.apache.aries.proxy.impl.weaving.ProxyWeavingHook",
1:48be854:         		true, ProxyManagerActivator.class.getClassLoader());
1:a897b56:         cls.getConstructor(BundleContext.class).newInstance(context);
1:96d4e06:       } catch (Throwable t) {
1:96d4e06:         //We don't care about this, we just won't have registered the hook
1:96d4e06:       }
1:96d4e06:       
1:24455ce:     } else {
1:24455ce:       managerService = new JdkProxyManager();
1:24455ce:     }
1:24455ce:     
1:18a59b5:     registration = context.registerService(ProxyManager.class.getName(), managerService, null);
1:24455ce:   }
1:24455ce: 
1:24455ce:   public void stop(BundleContext context)
1:24455ce:   {
1:18a59b5:     registration.unregister();
1:24455ce:   }
1:24455ce: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:a897b56
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         cls.getConstructor(BundleContext.class).newInstance(context);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:48be854
/////////////////////////////////////////////////////////////////////////
1:       Class.forName("org.objectweb.asm.ClassVisitor", false, ProxyManagerActivator.class.getClassLoader());
/////////////////////////////////////////////////////////////////////////
1:         Class<?> cls = Class.forName("org.apache.aries.proxy.impl.weaving.ProxyWeavingHook",
1:         		true, ProxyManagerActivator.class.getClassLoader());
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1:       
1:       try {
1:         //if ASM is available then we should also try weaving
0:         Class<?> cls = Class.forName("org.apache.aries.proxy.impl.weaving.ProxyWeavingHook");
0:         context.registerService("org.osgi.framework.hooks.weaving.WeavingHook",
0:             cls.newInstance(), null);
1:       } catch (Throwable t) {
1:         //We don't care about this, we just won't have registered the hook
1:       }
1:       
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:18a59b5
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceRegistration;
1:   private ServiceRegistration registration;
/////////////////////////////////////////////////////////////////////////
1:     registration = context.registerService(ProxyManager.class.getName(), managerService, null);
1:     registration.unregister();
commit:48caea3
/////////////////////////////////////////////////////////////////////////
0:             cls.getConstructor(BundleContext.class).newInstance(context), null);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:5109e38
/////////////////////////////////////////////////////////////////////////
0: import java.util.Dictionary;
0: import java.util.Hashtable;
1: 
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String,String> props = new Hashtable<String,String>();
0:         // SubsystemResource.java also uses this constant. 
0:         //   While it could be turned into a static final constant, note that this
0:         //   is also a non-standard workaround in the absence of a solution in the spec. 
0:         // See the associated OSGi spec bug. 
0:         props.put("osgi.woven.packages", "org.apache.aries.proxy.weaving,org.apache.aries.proxy");
0:             cls.getConstructor(BundleContext.class).newInstance(context), props);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl;
1: 
1: import org.apache.aries.proxy.ProxyManager;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: 
1: public class ProxyManagerActivator implements BundleActivator 
1: {
1:   private static final boolean ASM_PROXY_SUPPORTED;
1:   private AbstractProxyManager managerService;
1:   
1:   static
1:   {
1:     boolean classProxy = false;
1:     try {
1:       // Try load load a asm class (to make sure it's actually available
1:       // then create the asm factory
0:       Class.forName("org.objectweb.asm.ClassVisitor");
1:       classProxy = true;
1:     } catch (Throwable t) {
1:     }
1:     
1:     ASM_PROXY_SUPPORTED = classProxy;
1:   }
1:   
1:   public void start(BundleContext context)
1:   {
1:     if (ASM_PROXY_SUPPORTED) {
1:       managerService = new AsmProxyManager();
1:     } else {
1:       managerService = new JdkProxyManager();
1:     }
1:     
0:     context.registerService(ProxyManager.class.getName(), managerService, null);
1:   }
1: 
1:   public void stop(BundleContext context)
1:   {
1:   }
1: }
============================================================================