1:db3b209: /*
1:db3b209:  * Licensed to the Apache Software Foundation (ASF) under one
1:db3b209:  * or more contributor license agreements.  See the NOTICE file
1:db3b209:  * distributed with this work for additional information
1:db3b209:  * regarding copyright ownership.  The ASF licenses this file
1:db3b209:  * to you under the Apache License, Version 2.0 (the
1:db3b209:  * "License"); you may not use this file except in compliance
1:db3b209:  * with the License.  You may obtain a copy of the License at
1:db3b209:  *
1:db3b209:  *   http://www.apache.org/licenses/LICENSE-2.0
1:db3b209:  *
1:db3b209:  * Unless required by applicable law or agreed to in writing,
1:db3b209:  * software distributed under the License is distributed on an
1:db3b209:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:db3b209:  * KIND, either express or implied.  See the License for the
1:db3b209:  * specific language governing permissions and limitations
1:db3b209:  * under the License.
1:db3b209:  */
1:db3b209: package org.apache.aries.transaction.jdbc.internal;
1:db3b209: 
1:db3b209: import org.apache.geronimo.transaction.manager.NamedXAResource;
1:db3b209: import org.apache.geronimo.transaction.manager.NamedXAResourceFactory;
1:db3b209: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
1:db3b209: import org.apache.geronimo.transaction.manager.WrapperNamedXAResource;
1:db3b209: import org.slf4j.Logger;
1:db3b209: import org.slf4j.LoggerFactory;
1:db3b209: 
1:db3b209: import javax.sql.XAConnection;
1:db3b209: import javax.sql.XADataSource;
1:db3b209: import javax.transaction.SystemException;
1:db3b209: import javax.transaction.xa.XAResource;
1:db3b209: import java.io.IOException;
1:db3b209: 
1:db3b209: /**
1:db3b209:  * This class will ensure the broker is properly recovered when wired with
1:db3b209:  * the Geronimo transaction manager.
1:db3b209:  */
1:db3b209: public class Recovery {
1:db3b209: 
1:db3b209:     private static final Logger LOGGER = LoggerFactory.getLogger(Recovery.class);
1:db3b209: 
1:db3b209:     public static boolean recover(final String name,
1:db3b209:                                   final XADataSource dataSource,
1:db3b209:                                   final RecoverableTransactionManager transactionManager) throws IOException {
1:db3b209: 
1:db3b209:         if (name != null && name.length() > 0) {
1:db3b209:             transactionManager.registerNamedXAResourceFactory(new NamedXAResourceFactory() {
1:db3b209: 
1:db3b209:                 public String getName() {
1:db3b209:                     return name;
1:db3b209:                 }
1:db3b209: 
1:db3b209:                 public NamedXAResource getNamedXAResource() throws SystemException {
1:db3b209:                     try {
1:db3b209:                         final XAConnection connection = dataSource.getXAConnection();
1:db3b209:                         LOGGER.debug("new namedXAResource's connection: " + connection);
1:db3b209: 
1:db3b209:                         return new ConnectionAndWrapperNamedXAResource(connection.getXAResource(), getName(), connection);
1:db3b209:                     } catch (Exception e) {
1:db3b209:                         SystemException se =  new SystemException("Failed to create ConnectionAndWrapperNamedXAResource, " + e.getLocalizedMessage());
1:db3b209:                         se.initCause(e);
1:db3b209:                         LOGGER.error(se.getLocalizedMessage(), se);
1:db3b209:                         throw se;
1:db3b209:                     }
1:db3b209:                 }
1:db3b209: 
1:db3b209:                 public void returnNamedXAResource(NamedXAResource namedXaResource) {
1:db3b209:                     if (namedXaResource instanceof ConnectionAndWrapperNamedXAResource) {
1:db3b209:                         try {
1:db3b209:                             LOGGER.debug("closing returned namedXAResource's connection: " + ((ConnectionAndWrapperNamedXAResource)namedXaResource).connection);
1:db3b209:                             ((ConnectionAndWrapperNamedXAResource)namedXaResource).connection.close();
1:db3b209:                         } catch (Exception ignored) {
1:db3b209:                             LOGGER.debug("failed to close returned namedXAResource: " + namedXaResource, ignored);
1:db3b209:                         }
1:db3b209:                     }
1:db3b209:                 }
1:db3b209:             });
1:db3b209:             return true;
1:db3b209:         } else {
1:db3b209:             LOGGER.warn("Unable to recover XADataSource: aries.xa.name property not set");
1:db3b209:             return false;
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:db3b209:     public static class ConnectionAndWrapperNamedXAResource extends WrapperNamedXAResource {
1:db3b209: 
1:db3b209:         final XAConnection connection;
1:db3b209: 
1:db3b209:         public ConnectionAndWrapperNamedXAResource(XAResource xaResource, String name, XAConnection connection) {
1:db3b209:             super(xaResource, name);
1:db3b209:             this.connection = connection;
1:db3b209:         }
1:db3b209:     }
1:db3b209: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:db3b209
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc.internal;
1: 
1: import org.apache.geronimo.transaction.manager.NamedXAResource;
1: import org.apache.geronimo.transaction.manager.NamedXAResourceFactory;
1: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
1: import org.apache.geronimo.transaction.manager.WrapperNamedXAResource;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.sql.XAConnection;
1: import javax.sql.XADataSource;
1: import javax.transaction.SystemException;
1: import javax.transaction.xa.XAResource;
1: import java.io.IOException;
1: 
1: /**
1:  * This class will ensure the broker is properly recovered when wired with
1:  * the Geronimo transaction manager.
1:  */
1: public class Recovery {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(Recovery.class);
1: 
1:     public static boolean recover(final String name,
1:                                   final XADataSource dataSource,
1:                                   final RecoverableTransactionManager transactionManager) throws IOException {
1: 
1:         if (name != null && name.length() > 0) {
1:             transactionManager.registerNamedXAResourceFactory(new NamedXAResourceFactory() {
1: 
1:                 public String getName() {
1:                     return name;
1:                 }
1: 
1:                 public NamedXAResource getNamedXAResource() throws SystemException {
1:                     try {
1:                         final XAConnection connection = dataSource.getXAConnection();
1:                         LOGGER.debug("new namedXAResource's connection: " + connection);
1: 
1:                         return new ConnectionAndWrapperNamedXAResource(connection.getXAResource(), getName(), connection);
1:                     } catch (Exception e) {
1:                         SystemException se =  new SystemException("Failed to create ConnectionAndWrapperNamedXAResource, " + e.getLocalizedMessage());
1:                         se.initCause(e);
1:                         LOGGER.error(se.getLocalizedMessage(), se);
1:                         throw se;
1:                     }
1:                 }
1: 
1:                 public void returnNamedXAResource(NamedXAResource namedXaResource) {
1:                     if (namedXaResource instanceof ConnectionAndWrapperNamedXAResource) {
1:                         try {
1:                             LOGGER.debug("closing returned namedXAResource's connection: " + ((ConnectionAndWrapperNamedXAResource)namedXaResource).connection);
1:                             ((ConnectionAndWrapperNamedXAResource)namedXaResource).connection.close();
1:                         } catch (Exception ignored) {
1:                             LOGGER.debug("failed to close returned namedXAResource: " + namedXaResource, ignored);
1:                         }
1:                     }
1:                 }
1:             });
1:             return true;
1:         } else {
1:             LOGGER.warn("Unable to recover XADataSource: aries.xa.name property not set");
1:             return false;
1:         }
1:     }
1: 
1:     public static class ConnectionAndWrapperNamedXAResource extends WrapperNamedXAResource {
1: 
1:         final XAConnection connection;
1: 
1:         public ConnectionAndWrapperNamedXAResource(XAResource xaResource, String name, XAConnection connection) {
1:             super(xaResource, name);
1:             this.connection = connection;
1:         }
1:     }
1: }
============================================================================