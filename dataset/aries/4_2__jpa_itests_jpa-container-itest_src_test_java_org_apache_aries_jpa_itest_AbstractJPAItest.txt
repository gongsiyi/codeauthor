1:98ca24c: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:98ca24c:  *  contributor license agreements.  See the NOTICE file distributed with
1:98ca24c:  *  this work for additional information regarding copyright ownership.
1:98ca24c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:98ca24c:  *  (the "License"); you may not use this file except in compliance with
1:98ca24c:  *  the License.  You may obtain a copy of the License at
1:98ca24c:  *
1:98ca24c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:98ca24c:  *
1:98ca24c:  *  Unless required by applicable law or agreed to in writing, software
1:98ca24c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:98ca24c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98ca24c:  *  See the License for the specific language governing permissions and
1:98ca24c:  *  limitations under the License.
1:98ca24c:  */
1:ece43ad: package org.apache.aries.jpa.itest;
1:83d1ac1: 
1:ece43ad: import static org.ops4j.pax.exam.CoreOptions.composite;
1:ece43ad: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1:ece43ad: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:ece43ad: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:ece43ad: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:ece43ad: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:ece43ad: import static org.ops4j.pax.exam.CoreOptions.when;
1:b7db6ca: 
1:e5c89d2: import java.io.IOException;
1:e5c89d2: import java.util.Dictionary;
1:e5c89d2: import java.util.Hashtable;
1:e5c89d2: 
1:b7db6ca: import javax.inject.Inject;
1:ece43ad: import javax.persistence.EntityManagerFactory;
1:6d497a2: import javax.transaction.UserTransaction;
1:2cfdf52: 
1:e5c89d2: import org.junit.Before;
1:ece43ad: import org.junit.runner.RunWith;
1:16d8bab: import org.ops4j.pax.exam.CoreOptions;
1:ece43ad: import org.ops4j.pax.exam.Option;
1:ece43ad: import org.ops4j.pax.exam.junit.PaxExam;
1:ece43ad: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1:ece43ad: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:ece43ad: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:b7db6ca: import org.osgi.framework.Bundle;
1:b7db6ca: import org.osgi.framework.BundleContext;
1:b7db6ca: import org.osgi.framework.BundleException;
1:b7db6ca: import org.osgi.framework.Constants;
1:b7db6ca: import org.osgi.framework.Filter;
1:b7db6ca: import org.osgi.framework.FrameworkUtil;
1:ece43ad: import org.osgi.framework.InvalidSyntaxException;
1:ece43ad: import org.osgi.framework.ServiceReference;
1:e5c89d2: import org.osgi.service.cm.Configuration;
1:e5c89d2: import org.osgi.service.cm.ConfigurationAdmin;
1:e5c89d2: import org.osgi.service.jdbc.DataSourceFactory;
1:b7db6ca: import org.osgi.util.tracker.ServiceTracker;
1:e5c89d2: import org.slf4j.Logger;
1:e5c89d2: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:ece43ad: @RunWith(PaxExam.class)
1:ece43ad: @ExamReactorStrategy(PerClass.class)
1:b7db6ca: public abstract class AbstractJPAItest {
1:e5c89d2:     private static Logger LOG = LoggerFactory.getLogger(AbstractJPAItest.class);
1:6d497a2: 
1:319ff8b:     protected static final String TEST_UNIT = "test-unit";
1:e5c89d2:     protected static final String XA_TEST_UNIT = "xa-test-unit";
1:6d497a2:     protected static final String DSF_TEST_UNIT = "dsf-test-unit";
1:6d497a2:     protected static final String DSF_XA_TEST_UNIT = "dsf-xa-test-unit";
1:38cf4cd:     protected static final String EXTERNAL_TEST_UNIT = "external-test-unit";
1:6d497a2: 
1:319ff8b:     protected static final String TEST_BUNDLE_NAME = "org.apache.aries.jpa.org.apache.aries.jpa.container.itest.bundle";
1:6d497a2:     
1:6d497a2:     protected static final String BLUE_CAR_PLATE = "A1AAA";
1:6d497a2:     protected static final String GREEN_CAR_PLATE = "B2BBB";
1:e5c89d2: 
1:b7db6ca:     @Inject
1:b7db6ca:     protected BundleContext bundleContext;
1:6d497a2:     
1:6d497a2:     @Inject
1:6d497a2:     protected UserTransaction ut;
1:e5c89d2: 
1:e5c89d2:     @Inject
1:e5c89d2:     protected ConfigurationAdmin configAdmin;
1:0d59ccb:     private static Configuration config;
1:e5c89d2: 
1:6d497a2:     /**
1:2cfdf52:      * TODO check calls to this. Eventually switch to EmSupplier 
1:6d497a2:      */
1:319ff8b:     protected EntityManagerFactory getProxyEMF(String name) {
1:2cfdf52:         return getEMF(name);
1:b7db6ca:     }
1:6d497a2: 
1:319ff8b:     protected EntityManagerFactory getEMF(String name) {
1:b7db6ca:         return getService(EntityManagerFactory.class, "osgi.unit.name=" + name);
1:6d497a2:     }
1:6d497a2: 
1:83d1ac1:     public <T> T getService(Class<T> type, String filter) {
1:95f35a3:         return getService(type, filter, 10000);
1:83d1ac1:     }
1:6d497a2: 
1:b7db6ca:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:95f35a3:     public <T> T getService(Class<T> type, String filter, int timeout) {
1:b7db6ca:         ServiceTracker tracker = null;
1:b7db6ca:         try {
1:e5c89d2:             String objClassFilter = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:83d1ac1:             String flt = filter != null ? "(&" + objClassFilter + sanitizeFilter(filter) + ")" : objClassFilter;
1:b7db6ca:             Filter osgiFilter = FrameworkUtil.createFilter(flt);
1:b7db6ca:             tracker = new ServiceTracker(bundleContext, osgiFilter, null);
1:b7db6ca:             tracker.open();
1:e5c89d2: 
1:95f35a3:             Object svc = type.cast(tracker.waitForService(timeout));
1:95f35a3:             if (svc == null) {
1:95f35a3:                 throw new IllegalStateException("Gave up waiting for service " + flt);
1:b7db6ca:             }
1:b7db6ca:             return type.cast(svc);
1:b7db6ca:         } catch (InvalidSyntaxException e) {
1:b7db6ca:             throw new IllegalArgumentException("Invalid filter", e);
1:b7db6ca:         } catch (InterruptedException e) {
1:b7db6ca:             throw new RuntimeException(e);
1:83d1ac1:         } finally {
1:e5c89d2:             tracker.close();
1:83d1ac1:         }
1:b7db6ca:     }
1:e5c89d2: 
1:798ba3b:     public String sanitizeFilter(String filter) {
1:798ba3b:         return filter.startsWith("(") ? filter : "(" + filter + ")";
1:798ba3b:     }
1:798ba3b: 
1:6d497a2:     /**
1:798ba3b:      * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
1:798ba3b:      * 
1:6d497a2:      * @throws BundleException
1:6d497a2:      */
1:798ba3b:     public void resolveBundles() throws BundleException {
1:798ba3b:         Bundle[] bundles = bundleContext.getBundles();
1:798ba3b:         for (Bundle bundle : bundles) {
1:798ba3b:             if (bundle.getState() == Bundle.INSTALLED) {
1:798ba3b:                 System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":"
1:e5c89d2:                     + bundle.getSymbolicName() + ":" + bundle.getVersion());
1:798ba3b:                 bundle.start();
1:6d497a2:             }
1:6d497a2:         }
1:6d497a2:     }
1:6d497a2: 
1:b7db6ca:     public Bundle getBundleByName(String symbolicName) {
1:b7db6ca:         for (Bundle b : bundleContext.getBundles()) {
1:b7db6ca:             if (b.getSymbolicName().equals(symbolicName)) {
1:b7db6ca:                 return b;
1:798ba3b:             }
1:798ba3b:         }
1:b7db6ca:         return null;
1:798ba3b:     }
1:6d497a2: 
2:319ff8b:     @SuppressWarnings("rawtypes")
1:319ff8b:     protected ServiceReference[] getEMFRefs(String name) throws InvalidSyntaxException {
1:2cfdf52:         return bundleContext.getAllServiceReferences(EntityManagerFactory.class.getName(), "(osgi.unit.name=" + name + ")");
1:b7db6ca:     }
1:6d497a2: 
1:319ff8b:     private MavenArtifactProvisionOption mvnBundle(String groupId, String artifactId) {
1:319ff8b:         return mavenBundle(groupId, artifactId).versionAsInProject();
1:b7db6ca:     }
1:6d497a2: 
1:319ff8b:     protected Option baseOptions() {
1:ece43ad:         String localRepo = System.getProperty("maven.repo.local");
1:798ba3b: 
1:ece43ad:         if (localRepo == null) {
1:ece43ad:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:b7db6ca:         }
1:319ff8b:         return composite(junitBundles(),
1:e5c89d2:                          mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:e5c89d2:                          mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1:e5c89d2:                          // this is how you set the default log level when using pax
1:e5c89d2:                          // logging (logProfile)
1:e5c89d2:                          systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:e5c89d2:                          when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:e5c89d2:                          //,
1:e5c89d2:             );
1:b7db6ca:     }
1:e5c89d2: 
1:2cfdf52:     protected Option debug() {
1:2cfdf52:         return vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005");
1:b7db6ca:     }
1:83d1ac1: 
1:319ff8b:     private Option ariesJpaInternal() {
1:2cfdf52:         return composite(
1:e5c89d2:                          frameworkProperty("org.osgi.framework.system.packages")
1:e5c89d2:                          .value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,"
1:e5c89d2:                              + "javax.xml.stream; version=1.0,javax.xml.stream.events; version=1.0,javax.xml.stream.util; version=1.0,"
1:e5c89d2:                              + "javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
1:16d8bab:                          CoreOptions.systemProperty("derby.stream.error.file").value("target/derby.log"),
1:e5c89d2:                              mvnBundle("org.ow2.asm", "asm-all"),
1:e5c89d2:                              mvnBundle("org.apache.felix", "org.apache.felix.configadmin"),
1:96e072c:                              mvnBundle("org.apache.felix", "org.apache.felix.coordinator"),
1:83d1ac1: 
1:e5c89d2:                              mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api"),
1:e5c89d2:                              mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl"),
1:e5c89d2:                              mvnBundle("org.apache.aries", "org.apache.aries.util"),
1:b7db6ca: 
1:e5c89d2:                              mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.api"),
1:e5c89d2:                              mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.core"),
1:e5c89d2:                              mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url"),
1:b7db6ca: 
1:e5c89d2:                              mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api"),
1:e5c89d2:                              mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core"),
1:e5c89d2: 
1:e5c89d2:                              mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api"),
1:e5c89d2:                              mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container"),
1:e5c89d2:                              mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.support"),
1:e5c89d2:                              mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint"),
1:e5c89d2: 
1:e5c89d2:                              mvnBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager"),
1:e5c89d2:                              mvnBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint"),
1:e5c89d2: 
1:e5c89d2:                              mvnBundle("org.apache.derby", "derby")
1:e5c89d2:             );
1:2cfdf52:     }
1:e5c89d2: 
1:319ff8b:     protected Option ariesJpa20() {
1:70ea7fd:         return composite(
1:e5c89d2:                          ariesJpaInternal(),
1:e5c89d2:                          mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec", "1.1")
1:e5c89d2:             );
15:319ff8b:     }
1:b7db6ca: 
1:319ff8b:     protected Option ariesJpa21() {
4:319ff8b:         return composite(
1:e5c89d2:                          ariesJpaInternal(),
1:e5c89d2:                          mvnBundle("org.eclipse.persistence", "javax.persistence")
1:e5c89d2:             );
1:319ff8b:     }
1:2cfdf52: 
1:319ff8b:     protected Option eclipseLink() {
1:319ff8b:         return composite(
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-dbcp"),
1:e5c89d2:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa"),
1:e5c89d2:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.core"),
1:e5c89d2:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.asm"),
1:e5c89d2:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.antlr"),
1:e5c89d2:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa.jpql"),
1:e5c89d2:                          mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.eclipselink.adapter")
1:e5c89d2:             );
1:319ff8b:     }
1:e5c89d2: 
1:319ff8b:     protected Option openJpa() {
1:e5c89d2:         return composite(
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib"), //
1:e5c89d2:                          mvnBundle("commons-pool", "commons-pool"), //
1:e5c89d2:                          mvnBundle("commons-lang", "commons-lang"), //
1:e5c89d2:                          mvnBundle("commons-collections", "commons-collections"), //
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp"),
1:e5c89d2:                          mvnBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec"),
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-dbcp"),
1:e5c89d2:                          mvnBundle("org.apache.xbean", "xbean-asm4-shaded"),
1:e5c89d2:                          mvnBundle("org.apache.openjpa", "openjpa")
1:e5c89d2:             );
1:319ff8b:     }
1:e5c89d2: 
1:e5c89d2:     protected Option hibernate() {
1:e5c89d2:         return composite(
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.antlr"),
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.ant"),
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.dom4j"),
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles" , "org.apache.servicemix.bundles.serp"),
1:e5c89d2:                          mvnBundle("com.fasterxml", "classmate"),
1:e5c89d2:                          mvnBundle("org.javassist", "javassist"),
1:e5c89d2:                          mvnBundle("org.jboss.logging", "jboss-logging"),
1:e5c89d2:                          mvnBundle("org.hibernate.common", "hibernate-commons-annotations"), 
1:e5c89d2:                          mvnBundle("org.jboss", "jandex"),
1:e5c89d2:                          mvnBundle("org.hibernate", "hibernate-core"),
1:e5c89d2:                          mvnBundle("org.hibernate", "hibernate-entitymanager"),
1:e5c89d2:                          mvnBundle("org.hibernate", "hibernate-osgi")
1:e5c89d2:             );
1:e5c89d2:     }
1:e5c89d2: 
1:e5c89d2:     protected Option derbyDSF() {
1:e5c89d2:         return composite(
1:9fe2906:                          mvnBundle("org.osgi", "org.osgi.service.jdbc"), //
1:e5c89d2:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-derby"), //
1:e5c89d2:                          mvnBundle("org.apache.commons", "commons-pool2"), //
1:e5c89d2:                          mvnBundle("commons-logging", "commons-logging"), //
1:e5c89d2:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib"), //
1:e5c89d2:                          mvnBundle("org.apache.commons", "commons-dbcp2"), //
1:e5c89d2:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-pool-common"), //
1:e5c89d2:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-pool-dbcp2"), //
1:e5c89d2:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-config")
1:e5c89d2:             );
1:e5c89d2:     }
1:d5c184f:     
1:f50875c:     protected Option jta11Bundles() {
1:f50875c:         return composite(
1:f50875c:             mvnBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec")
1:f50875c:         );
1:f50875c:     }
1:f50875c:     
1:d5c184f:     protected Option jta12Bundles() {
1:5b1b814:         return composite(
1:f50875c:             mvnBundle("javax.interceptor", "javax.interceptor-api"),
1:f50875c:             mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javax-inject"),
1:f50875c:             mvnBundle("javax.el", "javax.el-api"),
1:f50875c:             mvnBundle("javax.enterprise", "cdi-api"),
1:f50875c:             mvnBundle("javax.transaction", "javax.transaction-api")
1:d5c184f:         );
1:d5c184f:     }
1:e5c89d2: 
1:e5c89d2:     protected Option testBundle() {
1:319ff8b:         return mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.itest.bundle");
1:70ea7fd:     }
1:e5c89d2: 
1:e5c89d2:     protected Option testBundleBlueprint() {
1:0d59ccb:         return mvnBundle("org.apache.aries.jpa.itest", "org.apache.aries.jpa.container.itest.bundle.blueprint");
1:e5c89d2:     }
1:e5c89d2: 
1:319ff8b:     protected MavenArtifactProvisionOption testBundleEclipseLink() {
1:319ff8b:         return mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.itest.bundle.eclipselink");
1:e5c89d2:     }
1:e5c89d2: 
1:e5c89d2:     @Before
1:9aefd96:     public void createConfigForDataSource() throws Exception {
1:e5c89d2:         if (config == null) {
1:9aefd96:             createConfigForLogging();
1:e5c89d2:             config = configAdmin.createFactoryConfiguration("org.ops4j.datasource", null);
1:e5c89d2:             Dictionary<String, String> props = new Hashtable<String, String>();
1:e5c89d2:             props.put(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS, "org.apache.derby.jdbc.EmbeddedDriver-pool-xa");
1:e5c89d2:             props.put(DataSourceFactory.JDBC_URL, "jdbc:derby:memory:TEST1;create=true");
1:e5c89d2:             props.put("dataSourceName", "testds");
1:e5c89d2:             config.update(props);
1:e5c89d2:             LOG.info("Created DataSource config testds");
1:e5c89d2:         }
1:e5c89d2:     }
1:9aefd96:     
1:9aefd96:     public void createConfigForLogging() throws IOException {
1:9aefd96:         Configuration logConfig = configAdmin.getConfiguration("org.ops4j.pax.logging", null);
1:9aefd96:         Dictionary<String, String> props = new Hashtable<String, String>();
1:9aefd96:         props.put("log4j.rootLogger", "INFO, stdout");
1:9aefd96:         props.put("log4j.logger.org.apache.aries.transaction", "DEBUG");
1:9aefd96:         props.put("log4j.logger.org.apache.aries.transaction.parsing", "DEBUG");
1:9aefd96:         props.put("log4j.logger.org.apache.aries.jpa.blueprint.impl", "DEBUG");
1:9aefd96:         props.put("log4j.appender.stdout", "org.apache.log4j.ConsoleAppender");
1:9aefd96:         props.put("log4j.appender.stdout.layout", "org.apache.log4j.PatternLayout");
1:9aefd96:         props.put("log4j.appender.stdout.layout.ConversionPattern", "%d{ISO8601} | %-5.5p | %-16.16t | %c | %m%n");
1:9aefd96:         logConfig.update(props);
1:9aefd96:     }
1:e5c89d2: 
1:e5c89d2: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:38cf4cd
/////////////////////////////////////////////////////////////////////////
1:     protected static final String EXTERNAL_TEST_UNIT = "external-test-unit";
author:Christian Schneider
-------------------------------------------------------------------------------
commit:16d8bab
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.CoreOptions;
/////////////////////////////////////////////////////////////////////////
1:                          CoreOptions.systemProperty("derby.stream.error.file").value("target/derby.log"),
commit:9fe2906
/////////////////////////////////////////////////////////////////////////
1:                          mvnBundle("org.osgi", "org.osgi.service.jdbc"), //
commit:f50875c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected Option jta11Bundles() {
1:         return composite(
1:             mvnBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec")
1:         );
1:     }
1:     
1:             mvnBundle("javax.interceptor", "javax.interceptor-api"),
1:             mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javax-inject"),
1:             mvnBundle("javax.el", "javax.el-api"),
1:             mvnBundle("javax.enterprise", "cdi-api"),
1:             mvnBundle("javax.transaction", "javax.transaction-api")
commit:96e072c
/////////////////////////////////////////////////////////////////////////
1:                              mvnBundle("org.apache.felix", "org.apache.felix.coordinator"),
commit:5b1b814
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return composite(
0:             mavenBundle("javax.interceptor", "javax.interceptor-api").versionAsInProject(),
0:             mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javax-inject").versionAsInProject(),
0:             mavenBundle("javax.el", "javax.el-api").versionAsInProject(),
0:             mavenBundle("javax.enterprise", "cdi-api").versionAsInProject(),
0:             mavenBundle("javax.transaction", "javax.transaction-api").versionAsInProject()
commit:1bfa1d3
/////////////////////////////////////////////////////////////////////////
0:                              mvnBundle("org.eclipse.equinox", "org.eclipse.equinox.coordinator"),
commit:9aefd96
/////////////////////////////////////////////////////////////////////////
1:     public void createConfigForDataSource() throws Exception {
1:             createConfigForLogging();
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void createConfigForLogging() throws IOException {
1:         Configuration logConfig = configAdmin.getConfiguration("org.ops4j.pax.logging", null);
1:         Dictionary<String, String> props = new Hashtable<String, String>();
1:         props.put("log4j.rootLogger", "INFO, stdout");
1:         props.put("log4j.logger.org.apache.aries.transaction", "DEBUG");
1:         props.put("log4j.logger.org.apache.aries.transaction.parsing", "DEBUG");
1:         props.put("log4j.logger.org.apache.aries.jpa.blueprint.impl", "DEBUG");
1:         props.put("log4j.appender.stdout", "org.apache.log4j.ConsoleAppender");
1:         props.put("log4j.appender.stdout.layout", "org.apache.log4j.PatternLayout");
1:         props.put("log4j.appender.stdout.layout.ConversionPattern", "%d{ISO8601} | %-5.5p | %-16.16t | %c | %m%n");
1:         logConfig.update(props);
1:     }
commit:d5c184f
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.CoreOptions;
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected Option jta12Bundles() {
0:         return CoreOptions.composite(
0:             mavenBundle("javax.interceptor", "javax.interceptor-api", "1.2"),
0:             mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javax-inject", "1_2"),
0:             mavenBundle("javax.el", "javax.el-api", "3.0.0"),
0:             mavenBundle("javax.enterprise", "cdi-api", "1.2"),
0:             mavenBundle("javax.transaction", "javax.transaction-api", "1.2")
1:         );
1:     }
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:     private static Configuration config;
/////////////////////////////////////////////////////////////////////////
1:         return mvnBundle("org.apache.aries.jpa.itest", "org.apache.aries.jpa.container.itest.bundle.blueprint");
commit:98ca24c
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:95f35a3
/////////////////////////////////////////////////////////////////////////
1:         return getService(type, filter, 10000);
1:     public <T> T getService(Class<T> type, String filter, int timeout) {
/////////////////////////////////////////////////////////////////////////
1:             Object svc = type.cast(tracker.waitForService(timeout));
1:             if (svc == null) {
1:                 throw new IllegalStateException("Gave up waiting for service " + flt);
commit:6d497a2
/////////////////////////////////////////////////////////////////////////
0: import javax.persistence.EntityManager;
1: import javax.transaction.UserTransaction;
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected static final String DSF_TEST_UNIT = "dsf-test-unit";
1:     protected static final String DSF_XA_TEST_UNIT = "dsf-xa-test-unit";
1: 
1:     
1:     protected static final String BLUE_CAR_PLATE = "A1AAA";
1:     protected static final String GREEN_CAR_PLATE = "B2BBB";
1:     
1:     @Inject
1:     protected UserTransaction ut;
/////////////////////////////////////////////////////////////////////////
0:         car.setNumberPlate(GREEN_CAR_PLATE);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(GREEN_CAR_PLATE, car.getNumberPlate());
1:     
1:     /**
0:      * Create, find and delete car using resource local transactions
0:      * @param emf
1:      * @throws BundleException
1:      */
0:     protected void carLifecycleRL(EntityManager em) throws BundleException {
0:         em.getTransaction().begin();
0:         Car car = createBlueCar();
0:         em.persist(car);
0:         em.getTransaction().commit();
1: 
0:         Car car2 = em.find(Car.class, BLUE_CAR_PLATE);
0:         assertBlueCar(car2);
0:         em.getTransaction().begin();
0:         em.remove(car2);
0:         em.getTransaction().commit();
0:         em.close();
1:     }
1: 
1:     /**
0:      * Create, find and delete car using XA Transactions
0:      * @param ut
0:      * @param em
0:      * @throws Exception
1:      */
0:     protected void carLifecycleXA(UserTransaction ut, EntityManager em) throws Exception {
0:         ut.begin();
0:         em.joinTransaction();
0:         delete(em, BLUE_CAR_PLATE);
0:         em.persist(createBlueCar());
0:         ut.commit();
1: 
0:         Car c = em.find(Car.class, BLUE_CAR_PLATE);
0:         assertBlueCar(c);
1: 
0:         ut.begin();
0:         em.joinTransaction();
0:         delete(em, BLUE_CAR_PLATE);
0:         ut.commit();
1:     }
1: 
0:     protected void delete(EntityManager em, String plateId) {
0:         Car car = em.find(Car.class, plateId);
0:         if (car != null) {
0:             em.remove(car);
1:         }
1:     }
1: 
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
0: import org.apache.aries.jpa.container.itest.entities.Car;
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static Logger LOG = LoggerFactory.getLogger(AbstractJPAItest.class);
0:     protected static final String BLUE_CAR_PLATE = "A1AAA";
1:     protected static final String XA_TEST_UNIT = "xa-test-unit";
1: 
1:     @Inject
1:     protected ConfigurationAdmin configAdmin;
0:     private Configuration config;
1: 
1: 
1: 
0:         return getService(type, filter, true);
0:     public <T> T getService(Class<T> type, String filter, boolean mandatory) {
1:             String objClassFilter = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
/////////////////////////////////////////////////////////////////////////
1:             tracker.close();
/////////////////////////////////////////////////////////////////////////
1:                     + bundle.getSymbolicName() + ":" + bundle.getVersion());
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                          mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:                          mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1:                          // this is how you set the default log level when using pax
1:                          // logging (logProfile)
1:                          systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:                          when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:                          //,
1:             );
1: 
1:                          frameworkProperty("org.osgi.framework.system.packages")
1:                          .value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,"
1:                              + "javax.xml.stream; version=1.0,javax.xml.stream.events; version=1.0,javax.xml.stream.util; version=1.0,"
1:                              + "javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
1:                              mvnBundle("org.ow2.asm", "asm-all"),
1:                              mvnBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:                              mvnBundle("org.apache.felix", "org.apache.felix.coordinator"),
1:                              mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api"),
1:                              mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl"),
1:                              mvnBundle("org.apache.aries", "org.apache.aries.util"),
1:                              mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.api"),
1:                              mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.core"),
1:                              mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url"),
1:                              mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api"),
1:                              mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core"),
1: 
1:                              mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api"),
1:                              mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container"),
1:                              mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.support"),
1:                              mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint"),
1: 
0:                              mvnBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec"),
1:                              mvnBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager"),
1:                              mvnBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint"),
1: 
1:                              mvnBundle("org.apache.derby", "derby")
1:             );
1: 
1:                          ariesJpaInternal(),
1:                          mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec", "1.1")
1:             );
1:                          ariesJpaInternal(),
1:                          mvnBundle("org.eclipse.persistence", "javax.persistence")
1:             );
1:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-dbcp"),
1:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa"),
1:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.core"),
1:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.asm"),
1:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.antlr"),
1:                          mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa.jpql"),
1:                          mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.eclipselink.adapter")
1:             );
1:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib"), //
1:                          mvnBundle("commons-pool", "commons-pool"), //
1:                          mvnBundle("commons-lang", "commons-lang"), //
1:                          mvnBundle("commons-collections", "commons-collections"), //
1:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp"),
1:                          mvnBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec"),
1:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-dbcp"),
1:                          mvnBundle("org.apache.xbean", "xbean-asm4-shaded"),
1:                          mvnBundle("org.apache.openjpa", "openjpa")
1: 
1:     protected Option hibernate() {
1:         return composite(
1:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.antlr"),
1:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.ant"),
1:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.dom4j"),
1:                          mvnBundle("org.apache.servicemix.bundles" , "org.apache.servicemix.bundles.serp"),
1:                          mvnBundle("com.fasterxml", "classmate"),
1:                          mvnBundle("org.javassist", "javassist"),
1:                          mvnBundle("org.jboss.logging", "jboss-logging"),
1:                          mvnBundle("org.hibernate.common", "hibernate-commons-annotations"), 
1:                          mvnBundle("org.jboss", "jandex"),
1:                          mvnBundle("org.hibernate", "hibernate-core"),
1:                          mvnBundle("org.hibernate", "hibernate-entitymanager"),
1:                          mvnBundle("org.hibernate", "hibernate-osgi")
1:             );
1:     }
1: 
1:     protected Option derbyDSF() {
1:         return composite(
0:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-spec"), //
1:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-derby"), //
1:                          mvnBundle("org.apache.commons", "commons-pool2"), //
1:                          mvnBundle("commons-logging", "commons-logging"), //
1:                          mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib"), //
1:                          mvnBundle("org.apache.commons", "commons-dbcp2"), //
1:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-pool-common"), //
1:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-pool-dbcp2"), //
1:                          mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-config")
1:             );
1:     }
1: 
1:     protected Option testBundle() {
1:     protected Option testBundleBlueprint() {
1:         return composite(
0:                          testBundle(),
0:                          mvnBundle("org.apache.aries.jpa.itest", "org.apache.aries.jpa.container.itest.bundle.blueprint")
1:             );
1: 
1:     @Before
0:     public void createConfigForDataSource() throws IOException {
1:         if (config == null) {
1:             config = configAdmin.createFactoryConfiguration("org.ops4j.datasource", null);
1:             Dictionary<String, String> props = new Hashtable<String, String>();
1:             props.put(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS, "org.apache.derby.jdbc.EmbeddedDriver-pool-xa");
1:             props.put(DataSourceFactory.JDBC_URL, "jdbc:derby:memory:TEST1;create=true");
1:             props.put("dataSourceName", "testds");
1:             config.update(props);
1:             LOG.info("Created DataSource config testds");
1:         }
1:     }
1: 
0:     protected Car createBlueCar() {
0:         Car car = new Car();
0:         car.setNumberOfSeats(5);
0:         car.setEngineSize(1200);
0:         car.setColour("blue");
0:         car.setNumberPlate(BLUE_CAR_PLATE);
0:         return car;
1:     }
1: 
0:     protected Car createGreenCar() {
0:         Car car;
0:         car = new Car();
0:         car.setNumberOfSeats(7);
0:         car.setEngineSize(1800);
0:         car.setColour("green");
0:         car.setNumberPlate("B2BBB");
0:         return car;
1:     }
1: 
0:     protected void assertBlueCar(Car car) {
0:         assertEquals(5, car.getNumberOfSeats());
0:         assertEquals(1200, car.getEngineSize());
0:         assertEquals("blue", car.getColour());
0:         assertEquals(BLUE_CAR_PLATE, car.getNumberPlate());
1:     }
1: 
0:     protected void assertGreenCar(Car car) {
0:         assertEquals(7, car.getNumberOfSeats());
0:         assertEquals(1800, car.getEngineSize());
0:         assertEquals("green", car.getColour());
0:         assertEquals("B2BBB", car.getNumberPlate());
commit:798ba3b
/////////////////////////////////////////////////////////////////////////
1:     public String sanitizeFilter(String filter) {
1:         return filter.startsWith("(") ? filter : "(" + filter + ")";
1:     }
1: 
0:     /**
1:      * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
1:      * 
0:      * @throws BundleException
0:      */
1:     public void resolveBundles() throws BundleException {
1:         Bundle[] bundles = bundleContext.getBundles();
1:         for (Bundle bundle : bundles) {
1:             if (bundle.getState() == Bundle.INSTALLED) {
1:                 System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":"
0:                                    + bundle.getSymbolicName() + ":" + bundle.getVersion());
1:                 bundle.start();
1:             }
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:                 mvnBundle("org.apache.felix", "org.apache.felix.coordinator"),
commit:83d1ac1
/////////////////////////////////////////////////////////////////////////
1:     
1:     public <T> T getService(Class<T> type, String filter) {
0:     	return getService(type, filter, true);
1:     }
0: 	public <T> T getService(Class<T> type, String filter, boolean mandatory) {
0:         	String objClassFilter = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:             String flt = filter != null ? "(&" + objClassFilter + sanitizeFilter(filter) + ")" : objClassFilter;
0:             if (svc == null && mandatory) {
/////////////////////////////////////////////////////////////////////////
1:         } finally {
0:         	tracker.close();
1: 
0: 	public String sanitizeFilter(String filter) {
0: 		return filter.startsWith("(") ? filter : "(" + filter + ")";
1: 	}	
1: 		
commit:4bdb1e8
/////////////////////////////////////////////////////////////////////////
commit:b7db6ca
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
0: import org.ops4j.pax.exam.options.AbstractProvisionControl;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.util.tracker.ServiceTracker;
1: public abstract class AbstractJPAItest {
1:     @Inject
1:     protected BundleContext bundleContext;
1: 
/////////////////////////////////////////////////////////////////////////
1:         return getService(EntityManagerFactory.class, "osgi.unit.name=" + name);
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
0: 	public <T> T getService(Class<T> type, String filter) {
1:         ServiceTracker tracker = null;
1:         try {
0:             String flt;
0:             if (filter != null) {
0:                 if (filter.startsWith("(")) {
0:                     flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")" + filter + ")";
0:                 } else {
0:                     flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")(" + filter + "))";
1:                 }
0:             } else {
0:                 flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:             }
1:             Filter osgiFilter = FrameworkUtil.createFilter(flt);
1:             tracker = new ServiceTracker(bundleContext, osgiFilter, null);
1:             tracker.open();
1: 
0:             Object svc = type.cast(tracker.waitForService(10000));
0:             if (svc == null) {
0:                 throw new RuntimeException("Gave up waiting for service " + flt);
1:             }
1:             return type.cast(svc);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IllegalArgumentException("Invalid filter", e);
1:         } catch (InterruptedException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1:     
0: 	/**
0: 	 * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
0: 	 * 
0: 	 * @throws BundleException
0: 	 */
0: 	public void resolveBundles() throws BundleException {
0: 		Bundle[] bundles = bundleContext.getBundles();
0: 		for (Bundle bundle : bundles) {
0: 			if (bundle.getState() == Bundle.INSTALLED) {
0: 				System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":" + bundle.getSymbolicName() + ":" + bundle.getVersion());
0: 				bundle.start();
1: 	
1:     public Bundle getBundleByName(String symbolicName) {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if (b.getSymbolicName().equals(symbolicName)) {
1:                 return b;
1:             }
1:         }
1:         return null;
1:     }
/////////////////////////////////////////////////////////////////////////
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
0:     /**
1:      * TODO check calls to this. Eventually switch to EmSupplier 
0:      */
1:         return getEMF(name);
1:     
0:         return context().getService(EntityManagerFactory.class, "osgi.unit.name=" + name);
1:         return bundleContext.getAllServiceReferences(EntityManagerFactory.class.getName(), "(osgi.unit.name=" + name + ")");
/////////////////////////////////////////////////////////////////////////
0:                 //,
1:     
1:     protected Option debug() {
1:         return vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005");
1:     }
/////////////////////////////////////////////////////////////////////////
0:                 mvnBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:                 mvnBundle("org.apache.aries", "org.apache.aries.util"),
0:                 
0:                 
0:                 mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.support"),
0:                 mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint"),
0:                 mvnBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint"),
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib"), //
0:                 mvnBundle("commons-pool", "commons-pool"), //
0:                 mvnBundle("commons-lang", "commons-lang"), //
0:                 mvnBundle("commons-collections", "commons-collections"), //
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected Option derbyDSF() {
1:         return composite(
0:                 mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-derby"), //
0:                 mvnBundle("org.apache.commons", "commons-pool2"), //
0:                 mvnBundle("commons-logging", "commons-logging"), //
0:                 mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib"), //
0:                 mvnBundle("org.apache.commons", "commons-dbcp2"), //
0:                 mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-pool-common"), //
0:                 mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-pool-dbcp2") //
0:             );
0:     
0:         return mvnBundle("org.apache.aries.jpa.itest", "org.apache.aries.jpa.container.itest.bundle.blueprint");
commit:a3c7aee
/////////////////////////////////////////////////////////////////////////
0:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
0: //               , vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
0:                 );
commit:70ea7fd
/////////////////////////////////////////////////////////////////////////
0:                         .value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,"
0:                                + "javax.xml.stream; version=1.0,javax.xml.stream.events; version=1.0,javax.xml.stream.util; version=1.0,"
0:                                + "javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected Option hibernate() {
1:         return composite(
0:                 mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.antlr"),
0:                 mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.ant"),
0:                 mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.dom4j"),
0:                 mvnBundle("org.apache.servicemix.bundles" , "org.apache.servicemix.bundles.serp"),
0:                 mvnBundle("com.fasterxml", "classmate"),
0:                 mvnBundle("org.javassist", "javassist"),
0:                 mvnBundle("org.jboss.logging", "jboss-logging"),
0:                 mvnBundle("org.hibernate.common", "hibernate-commons-annotations"), 
0:                 mvnBundle("org.jboss", "jandex"),
0:                 mvnBundle("org.hibernate", "hibernate-core"),
0:                 mvnBundle("org.hibernate", "hibernate-entitymanager"),
0:                 mvnBundle("org.hibernate", "hibernate-osgi")
0:                 );
1:     }
commit:319ff8b
/////////////////////////////////////////////////////////////////////////
1:     protected static final String TEST_UNIT = "test-unit";
0:     protected static final String BP_TEST_UNIT = "bp-test-unit";
0:     protected static final String BP_XA_TEST_UNIT = "bp-xa-test-unit";
1:     protected static final String TEST_BUNDLE_NAME = "org.apache.aries.jpa.org.apache.aries.jpa.container.itest.bundle";
0:     private static final String FILTER_CONTAINER_MANAGED = "(" + PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT + "=true)";
0:     private static final String FILTER_PROXY = "(" + PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE + "=*)";
0:     protected void registerClient(String unitName) {
0:         PersistenceContextProvider provider = context().getService(PersistenceContextProvider.class);
0:         HashMap<String, Object> props = new HashMap<String, Object>();
0:         props.put(PersistenceContextProvider.PERSISTENCE_CONTEXT_TYPE, PersistenceContextType.TRANSACTION);
0:         provider.registerContext(unitName, bundleContext.getBundle(), props);
1:     }
0: 
1:     protected EntityManagerFactory getProxyEMF(String name) {
0:         String filter = "(&(osgi.unit.name=" + name + ")" + FILTER_CONTAINER_MANAGED + FILTER_PROXY + ")";
1:     }
1:     protected EntityManagerFactory getEMF(String name) {
0:         return context().getService(EntityManagerFactory.class, "(&(osgi.unit.name=" + name + ")" + FILTER_CONTAINER_MANAGED + ")");
1:     }
1:     @SuppressWarnings("rawtypes")
1:     protected ServiceReference[] getEMFRefs(String name) throws InvalidSyntaxException {
0:         return bundleContext.getAllServiceReferences(EntityManagerFactory.class.getName(), "(&(osgi.unit.name=" + name + ")"
0:                 + FILTER_CONTAINER_MANAGED + ")");
1:     }
0: 
1:     @SuppressWarnings("rawtypes")
0:     protected ServiceReference[] getProxyEMFRefs(String name) throws InvalidSyntaxException {
0:         return bundleContext.getAllServiceReferences(EntityManagerFactory.class.getName(), "(&(osgi.unit.name=" + name + ")"
0:                 + FILTER_CONTAINER_MANAGED + FILTER_PROXY + ")");
1:     }
0:     
1:     private MavenArtifactProvisionOption mvnBundle(String groupId, String artifactId) {
1:         return mavenBundle(groupId, artifactId).versionAsInProject();
1:     }
0: 
1:     protected Option baseOptions() {
0: 
1:         return composite(junitBundles(),
0:                 mvnBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)));
1:     private Option ariesJpaInternal() {
1:         return composite(
0:                 frameworkProperty("org.osgi.framework.system.packages")
0:                         .value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
0:                 
0:                 mvnBundle("org.ow2.asm", "asm-all"),
0:                 mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api"),
0:                 mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl"),
0:                 mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.api"),
0:                 mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.core"),
0:                 mvnBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url"),
0:                 mvnBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api"),
0:                 mvnBundle("org.apache.aries", "org.apache.aries.util"),
0:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api"),
0:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core"),
0:                 mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api"),
0:                 mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container"),
0:                 mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context"),
0:                 mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.aries"),
0:                 mvnBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec"),
0:                 mvnBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager"),
0:                 mvnBundle("commons-lang", "commons-lang"),
0:                 mvnBundle("commons-collections", "commons-collections"),
0:                 mvnBundle("commons-pool", "commons-pool"),
0: 
0:                 mvnBundle("org.apache.derby", "derby")
1:     }
0:     
1:     protected Option ariesJpa20() {
1:         return composite(
0:                 ariesJpaInternal(),
0:                 mvnBundle("org.osgi", "org.osgi.enterprise"),
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec", "1.1")
0:                 );
1:     }
0: 
1:     protected Option ariesJpa21() {
1:         return composite(
0:                 ariesJpaInternal(),
0:                 mvnBundle("org.eclipse.persistence", "javax.persistence")
0:                 );
1:     }
0: 
0:     protected Option transactionWrapper() {
0:         return mvnBundle("org.apache.aries.transaction", "org.apache.aries.transaction.wrappers");
1:     }
0: 
1:     protected Option eclipseLink() {
1:         return composite(
0:                 mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-dbcp"),
0:                 mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa"),
0:                 mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.core"),
0:                 mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.asm"),
0:                 mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.antlr"),
0:                 mvnBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa.jpql"),
0:                 mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.eclipselink.adapter")
0:                 );
1:     }
0: 
1:     protected Option openJpa() {
1:         return composite(
0:                 mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp"),
0:                 mvnBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec"),
0:                 mvnBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-dbcp"),
0:                 mvnBundle("org.apache.xbean", "xbean-asm4-shaded"),
0:                 mvnBundle("org.apache.openjpa", "openjpa")
0:                 );
1:     }
0: 
0:     protected Option testDs() {
0:         return mvnBundle("org.apache.aries.transaction", "org.apache.aries.transaction.testds");
1:     }
0: 
0:     protected MavenArtifactProvisionOption derbyDataSourceFactory() {
0:         return mvnBundle("org.ops4j.pax.jdbc", "pax-jdbc-derby");
1:     }
0: 
0:     protected MavenArtifactProvisionOption testBundle() {
1:         return mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.itest.bundle");
1:     }
0: 
0:     protected MavenArtifactProvisionOption testBundleBlueprint() {
0:         return mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.itest.bundle");
1:     }
0: 
1:     protected MavenArtifactProvisionOption testBundleEclipseLink() {
1:         return mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.itest.bundle.eclipselink");
1:     }
0: 
0:     protected MavenArtifactProvisionOption testBundleAdvanced() {
0:         return mvnBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.advanced.itest.bundle");
1:     }
commit:3b80dcd
/////////////////////////////////////////////////////////////////////////
0: 	protected Option ariesJpa20() {
/////////////////////////////////////////////////////////////////////////
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.aries").versionAsInProject(),
0: 				
0: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager").versionAsInProject(),
0: 				
0: 				mavenBundle("commons-lang", "commons-lang").versionAsInProject(),
0: 				mavenBundle("commons-collections", "commons-collections").versionAsInProject(),
0: 				mavenBundle("commons-pool", "commons-pool").versionAsInProject(),
0: 				
0: 				mavenBundle("org.apache.derby", "derby").versionAsInProject()
0: 				
0: 				);
0: 	}
0: 	
0: 	protected Option ariesJpa21() {
0:     return composite(
0:         frameworkProperty("org.osgi.framework.system.packages")
0:               .value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
0:         //mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
0:         //mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib").versionAsInProject(),
0: //              mavenBundle("org.osgi", "org.osgi.enterprise").versionAsInProject(),
0:         mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
0: 
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api").versionAsInProject(),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl").versionAsInProject(),
0: 
0:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.api").versionAsInProject(),
0:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.core").versionAsInProject(),
0:         mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url").versionAsInProject(),
0:         
0:         mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api").versionAsInProject(),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
0: 
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api").versionAsInProject(),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core").versionAsInProject(),
0: 
0:         mavenBundle("org.eclipse.persistence", "javax.persistence").versionAsInProject(),
/////////////////////////////////////////////////////////////////////////
0: 		    mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-dbcp").versionAsInProject(),
0:         mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.core").versionAsInProject(),
0:         mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.asm").versionAsInProject(),
0:         mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.antlr").versionAsInProject(),
0:         mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa.jpql").versionAsInProject(),
0:         mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.eclipselink.adapter").versionAsInProject()
0:         );
/////////////////////////////////////////////////////////////////////////
0:         );
/////////////////////////////////////////////////////////////////////////
0: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.itest.bundle.eclipselink").versionAsInProject();
commit:3eb9d18
/////////////////////////////////////////////////////////////////////////
0: 		String filter = "(&(osgi.unit.name=" + name + ")" + FILTER_CONTAINER_MANAGED + FILTER_PROXY +")";
0:         return context().getService(EntityManagerFactory.class, filter, 5000);
commit:3b7e9b2
/////////////////////////////////////////////////////////////////////////
commit:5de25af
/////////////////////////////////////////////////////////////////////////
0: 
commit:e175ef4
/////////////////////////////////////////////////////////////////////////
0: 	protected MavenArtifactProvisionOption derbyDataSourceFactory() {
0: 		return mavenBundle("org.ops4j.pax.jdbc", "pax-jdbc-derby").versionAsInProject();
0: 	}
0: 	
commit:ece43ad
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.itest;
0: 
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
0: 
0: import java.util.HashMap;
0: 
1: import javax.persistence.EntityManagerFactory;
0: import javax.persistence.PersistenceContextType;
0: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import org.apache.aries.jpa.container.PersistenceUnitConstants;
0: import org.apache.aries.jpa.container.context.PersistenceContextProvider;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleException;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
0: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
0: public abstract class AbstractJPAItest extends AbstractIntegrationTest {
0: 	protected static final String TEST_UNIT = "test-unit";
0: 	protected static final String BP_TEST_UNIT = "bp-test-unit";
0: 	protected static final String BP_XA_TEST_UNIT = "bp-xa-test-unit";
0: 	protected static final String TEST_BUNDLE_NAME = "org.apache.aries.jpa.org.apache.aries.jpa.container.itest.bundle";
0: 	private static final String FILTER_CONTAINER_MANAGED = "(" + PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT + "=true)";
0: 	private static final String FILTER_PROXY = "(" + PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE + "=*)";
0: 
0: 	protected void registerClient(String unitName) {
0: 		PersistenceContextProvider provider = context().getService(PersistenceContextProvider.class);
0: 		HashMap<String, Object> props = new HashMap<String, Object>();
0: 		props.put(PersistenceContextProvider.PERSISTENCE_CONTEXT_TYPE, PersistenceContextType.TRANSACTION);
0: 		provider.registerContext(unitName, bundleContext.getBundle(), props);
0: 	}
0: 	
0: 	protected EntityManagerFactory getProxyEMF(String name) {
0: 		return context().getService(EntityManagerFactory.class, "(&(osgi.unit.name=" + name + ")" 
0: 				+ FILTER_CONTAINER_MANAGED + FILTER_PROXY +")");
0: 	}
0: 	
0: 	protected EntityManagerFactory getEMF(String name) {
0: 		return context().getService(EntityManagerFactory.class, "(&(osgi.unit.name=" + name + ")" + FILTER_CONTAINER_MANAGED + ")");
0: 	}
0: 	
0: 	@SuppressWarnings("rawtypes")
0: 	protected ServiceReference[] getEMFRefs(String name) throws InvalidSyntaxException {
0: 		return bundleContext.getAllServiceReferences(EntityManagerFactory.class.getName(), "(&(osgi.unit.name=" + name + ")"
0: 				+ FILTER_CONTAINER_MANAGED + ")");
0: 	}
0: 	
0: 	@SuppressWarnings("rawtypes")
0: 	protected ServiceReference[] getProxyEMFRefs(String name)
0: 			throws InvalidSyntaxException {
0: 		return bundleContext.getAllServiceReferences(EntityManagerFactory.class.getName(), "(&(osgi.unit.name=" + name + ")" 
0: 			+ FILTER_CONTAINER_MANAGED + FILTER_PROXY + ")");
0: 	}
0: 	
0: 	/**
0: 	 * Help to diagnose bundles that did not start
0: 	 * 
0: 	 * @throws BundleException
0: 	 */
0: 	protected void showBundles() throws BundleException {
0: 		Bundle[] bundles = bundleContext.getBundles();
0: 		for (Bundle bundle : bundles) {
0: 			System.out.println(bundle.getBundleId() + ":" + bundle.getSymbolicName() + ":" + bundle.getVersion() + ":" + bundle.getState());
0: 			if (bundle.getState() != 32) {
0: 				System.out.println(bundle.getBundleId() + ":" + bundle.getSymbolicName() + ":" + bundle.getState());
0: 				bundle.start();
0: 			}
0: 		}
0: 	}
0: 
0: 	protected Option baseOptions() {
1:         String localRepo = System.getProperty("maven.repo.local");
0:      
1:         if (localRepo == null) {
1:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
0:         }
0:         return composite(
0:                 junitBundles(),
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
0:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
0:                 // this is how you set the default log level when using pax
0:                 // logging (logProfile)
0:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
0:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
0:          );
0:     }
0: 	
0: 	protected Option ariesJpa() {
0: 		return composite(
0: 				frameworkProperty("org.osgi.framework.system.packages")
0:             	.value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
0: 				//mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
0: 				//mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib").versionAsInProject(),
0:             	mavenBundle("org.osgi", "org.osgi.enterprise").versionAsInProject(),
0: 				mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
0: 
0: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl").versionAsInProject(),
0: 
0: 				mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.api").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.core").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi.url").versionAsInProject(),
0: 				
0: 				mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api").versionAsInProject(),
0: 				mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
0: 
0: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core").versionAsInProject(),
0: 				
0: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.aries").versionAsInProject(),
0: 				
0: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject(),
0: 				mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager").versionAsInProject(),
0: 				
0: 				mavenBundle("commons-lang", "commons-lang").versionAsInProject(),
0: 				mavenBundle("commons-collections", "commons-collections").versionAsInProject(),
0: 				mavenBundle("commons-pool", "commons-pool").versionAsInProject(),
0: 				
0: 				mavenBundle("org.apache.derby", "derby").versionAsInProject()
0: 				
0: 				);
0: 	}
0: 	
0: 	protected Option transactionWrapper() {
0: 		return mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.wrappers" ).versionAsInProject();
0: 	}
0: 	
0: 	protected Option eclipseLink() {
0: 		return composite(
0: 				mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa").versionAsInProject(),
0:                 mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.core").versionAsInProject(),
0:                 mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.asm").versionAsInProject(),
0:                 mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.antlr").versionAsInProject(),
0:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.eclipselink.adapter").versionAsInProject()
0:                 );
0: 	}
0: 	
0: 	protected Option openJpa() {
0: 		return composite(
0: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp").versionAsInProject(),
0: 				mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec").versionAsInProject(),
0: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.commons-dbcp").versionAsInProject(),
0: 				mavenBundle("org.apache.xbean","xbean-asm4-shaded").versionAsInProject(),
0: 				mavenBundle("org.apache.openjpa", "openjpa").versionAsInProject()
0: 				);
0: 	}
0: 	
0: 	protected Option testDs() {
0: 		return mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.testds").versionAsInProject();
0: 	}
0: 	
0: 	protected MavenArtifactProvisionOption testBundle() {
0: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.itest.bundle").versionAsInProject();
0: 	}
0: 	
0: 	protected MavenArtifactProvisionOption testBundleBlueprint() {
0: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.itest.bundle").versionAsInProject();
0: 	}
0: 	
0: 	protected MavenArtifactProvisionOption testBundleEclipseLink() {
0: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.itest.bundle.eclipselink");
0: 	}
0: 	
0: 	protected MavenArtifactProvisionOption testBundleAdvanced() {
0: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.advanced.itest.bundle").versionAsInProject();
0: 	}
0: }
author:Giuseppe Gerla
-------------------------------------------------------------------------------
commit:0b001f7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: 
/////////////////////////////////////////////////////////////////////////
0:     protected <T> T getServie(Class<T> type, Map<String, String> filters) {
0: 		if (filters.size() > 0) {
0: 			String filterS = "(&";
0: 			for (String key : filters.keySet()) {
0: 				String value = filters.get(key);
0: 				filterS += String.format("(%s=%s)", key, value);
0: 			}
0: 			filterS += ")";
0: 			return context().getService(type, filterS);
0: 		} else {
0: 			return context().getService(type);
0: 		}
0: 	}
0: 
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:a5133a1
/////////////////////////////////////////////////////////////////////////
0: 
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec", "1.1"),
0: 				// mavenBundle("org.hibernate.javax.persistence", "hibernate-jpa-2.1-api").versionAsInProject(),
============================================================================