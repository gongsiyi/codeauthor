1:264011e: /*
1:264011e:  * Licensed to the Apache Software Foundation (ASF) under one
1:264011e:  * or more contributor license agreements.  See the NOTICE file
1:264011e:  * distributed with this work for additional information
1:264011e:  * regarding copyright ownership.  The ASF licenses this file
1:264011e:  * to you under the Apache License, Version 2.0 (the
1:264011e:  * "License"); you may not use this file except in compliance
1:264011e:  * with the License.  You may obtain a copy of the License at
1:264011e:  *
1:264011e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:264011e:  *
1:264011e:  * Unless required by applicable law or agreed to in writing,
1:264011e:  * software distributed under the License is distributed on an
1:264011e:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:264011e:  * KIND, either express or implied.  See the License for the
1:264011e:  * specific language governing permissions and limitations
1:264011e:  * under the License.
1:264011e:  */
1:264011e: package org.apache.aries.unittest.mocks;
1:264011e: 
1:264011e: /**
1:264011e:  * <p>This class contains method call handlers for some default method handling.
1:264011e:  * </p>
1:264011e:  *
1:264011e:  * <p>This class provides handlers for the toString, equals and hashCode
1:264011e:  *   methods. They reproduce the default Object implementations for dynamic
1:264011e:  *   mock objects, these can be overridden.
1:264011e:  * </p>
1:264011e:  */
1:264011e: public class DefaultMethodCallHandlers
1:264011e: {
1:264011e:   /** A MethodCall representing the equals method */
1:264011e:   private static MethodCall _equals;
1:264011e:   /** A MethodCall representing the toString method */
1:264011e:   private static MethodCall _toString;
1:264011e:   /** A MethodCall representing the hashCode method */
1:264011e:   private static MethodCall _hashCode;
1:264011e: 
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /* static initializer
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   static
1:264011e:   {
1:264011e:     _equals = new MethodCall(Object.class, "equals", new Object[] {Object.class});
1:264011e:     _toString = new MethodCall(Object.class, "toString", new Object[0]);
1:264011e:     _hashCode = new MethodCall(Object.class, "hashCode", new Object[0]);
1:264011e:   }
1:264011e: 
1:264011e:   /**
1:264011e:    * The Default MethodCallHandler for the equals method, performs an == check.
1:264011e:    */
1:264011e:   public static final MethodCallHandler EQUALS_HANDLER = new MethodCallHandler()
1:264011e:   {
1:264011e:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
1:264011e:     {
1:264011e:       Object obj = methodCall.getInvokedObject();
1:264011e:       Object toObj = methodCall.getArguments()[0];
1:264011e:       
1:264011e:       if (toObj == null) return false;
1:264011e:       
1:264011e:       if(parent.getTemplateObject() != null){
1:264011e:         try {
1:264011e:           if(Skeleton.isSkeleton(toObj) &&Skeleton.getSkeleton(toObj).getTemplateObject() != null){
1:264011e:             return parent.getTemplateObject().equals(Skeleton.getSkeleton(toObj).getTemplateObject());
1:264011e:           } else {
1:264011e:             return false;
1:264011e:           }
1:264011e:         } catch (IllegalArgumentException iae) {
1:264011e:           return parent.getTemplateObject().equals(toObj);
1:264011e:         }
1:264011e:       }
1:264011e:         
1:264011e: 
1:264011e:       return obj == toObj ? Boolean.TRUE : Boolean.FALSE;
1:264011e:     }
1:264011e:   };
1:264011e: 
1:264011e:   /**
1:264011e:    * The Default MethodCallHandler for the toString method, reproduces
1:264011e:    * <classname>@<hashCode>
1:264011e:    */
1:264011e:   public static final MethodCallHandler TOSTRING_HANDLER = new MethodCallHandler()
1:264011e:   {
1:264011e:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
1:264011e:     {
1:264011e:       if(parent.getTemplateObject() != null)
1:264011e:         return parent.getTemplateObject().toString();
1:264011e:       Object obj = methodCall.getInvokedObject();
1:264011e:       return obj.getClass().getName() + "@" + System.identityHashCode(obj);
1:264011e:     }
1:264011e:   };
1:264011e: 
1:264011e:   /**
1:264011e:    * The Default MethodCallHandler for the hashCode method, returns the
1:264011e:    * identity hashCode.
1:264011e:    */
1:264011e:   public static final MethodCallHandler HASHCODE_HANDLER = new MethodCallHandler()
1:264011e:   {
1:264011e:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
1:264011e:     {
1:264011e:       if(parent.getTemplateObject() != null)
1:264011e:         return parent.getTemplateObject().hashCode();
1:264011e:       
1:264011e:       return Integer.valueOf(System.identityHashCode(methodCall.getInvokedObject()));
1:264011e:     }
1:264011e:   };
1:264011e: 
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /* registerDefaultHandlers method
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /**
1:264011e:    * This method registers the DefaultMethodCall Handlers with the specified
1:264011e:    * skeleton.
1:264011e:    *
1:264011e:    * @param s a skeleton
1:264011e:    */
1:264011e:   public static void registerDefaultHandlers(Skeleton s)
1:264011e:   {
1:264011e:     s.registerMethodCallHandler(_equals, EQUALS_HANDLER);
1:264011e:     s.registerMethodCallHandler(_toString, TOSTRING_HANDLER);
1:264011e:     s.registerMethodCallHandler(_hashCode, HASHCODE_HANDLER);
1:264011e:   }
1:264011e: 
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /* isDefaultMethodCall method
1:264011e:   /* ------------------------------------------------------------------------ */
1:264011e:   /**
1:264011e:    * This method returns true if and only if the specified call represents a
1:264011e:    * default method call.
1:264011e:    *
1:264011e:    * @param call the call
1:264011e:    * @return see above.
1:264011e:    */
1:264011e:   public static boolean isDefaultMethodCall(MethodCall call)
1:264011e:   {
1:264011e:     return _toString.equals(call) || _equals.equals(call) || _hashCode.equals(call);
1:264011e:   }
1:264011e: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:264011e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.unittest.mocks;
1: 
1: /**
1:  * <p>This class contains method call handlers for some default method handling.
1:  * </p>
1:  *
1:  * <p>This class provides handlers for the toString, equals and hashCode
1:  *   methods. They reproduce the default Object implementations for dynamic
1:  *   mock objects, these can be overridden.
1:  * </p>
1:  */
1: public class DefaultMethodCallHandlers
1: {
1:   /** A MethodCall representing the equals method */
1:   private static MethodCall _equals;
1:   /** A MethodCall representing the toString method */
1:   private static MethodCall _toString;
1:   /** A MethodCall representing the hashCode method */
1:   private static MethodCall _hashCode;
1: 
1:   /* ------------------------------------------------------------------------ */
1:   /* static initializer
1:   /* ------------------------------------------------------------------------ */
1:   static
1:   {
1:     _equals = new MethodCall(Object.class, "equals", new Object[] {Object.class});
1:     _toString = new MethodCall(Object.class, "toString", new Object[0]);
1:     _hashCode = new MethodCall(Object.class, "hashCode", new Object[0]);
1:   }
1: 
1:   /**
1:    * The Default MethodCallHandler for the equals method, performs an == check.
1:    */
1:   public static final MethodCallHandler EQUALS_HANDLER = new MethodCallHandler()
1:   {
1:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
1:     {
1:       Object obj = methodCall.getInvokedObject();
1:       Object toObj = methodCall.getArguments()[0];
1:       
1:       if (toObj == null) return false;
1:       
1:       if(parent.getTemplateObject() != null){
1:         try {
1:           if(Skeleton.isSkeleton(toObj) &&Skeleton.getSkeleton(toObj).getTemplateObject() != null){
1:             return parent.getTemplateObject().equals(Skeleton.getSkeleton(toObj).getTemplateObject());
1:           } else {
1:             return false;
1:           }
1:         } catch (IllegalArgumentException iae) {
1:           return parent.getTemplateObject().equals(toObj);
1:         }
1:       }
1:         
1: 
1:       return obj == toObj ? Boolean.TRUE : Boolean.FALSE;
1:     }
1:   };
1: 
1:   /**
1:    * The Default MethodCallHandler for the toString method, reproduces
1:    * <classname>@<hashCode>
1:    */
1:   public static final MethodCallHandler TOSTRING_HANDLER = new MethodCallHandler()
1:   {
1:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
1:     {
1:       if(parent.getTemplateObject() != null)
1:         return parent.getTemplateObject().toString();
1:       Object obj = methodCall.getInvokedObject();
1:       return obj.getClass().getName() + "@" + System.identityHashCode(obj);
1:     }
1:   };
1: 
1:   /**
1:    * The Default MethodCallHandler for the hashCode method, returns the
1:    * identity hashCode.
1:    */
1:   public static final MethodCallHandler HASHCODE_HANDLER = new MethodCallHandler()
1:   {
1:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
1:     {
1:       if(parent.getTemplateObject() != null)
1:         return parent.getTemplateObject().hashCode();
1:       
1:       return Integer.valueOf(System.identityHashCode(methodCall.getInvokedObject()));
1:     }
1:   };
1: 
1:   /* ------------------------------------------------------------------------ */
1:   /* registerDefaultHandlers method
1:   /* ------------------------------------------------------------------------ */
1:   /**
1:    * This method registers the DefaultMethodCall Handlers with the specified
1:    * skeleton.
1:    *
1:    * @param s a skeleton
1:    */
1:   public static void registerDefaultHandlers(Skeleton s)
1:   {
1:     s.registerMethodCallHandler(_equals, EQUALS_HANDLER);
1:     s.registerMethodCallHandler(_toString, TOSTRING_HANDLER);
1:     s.registerMethodCallHandler(_hashCode, HASHCODE_HANDLER);
1:   }
1: 
1:   /* ------------------------------------------------------------------------ */
1:   /* isDefaultMethodCall method
1:   /* ------------------------------------------------------------------------ */
1:   /**
1:    * This method returns true if and only if the specified call represents a
1:    * default method call.
1:    *
1:    * @param call the call
1:    * @return see above.
1:    */
1:   public static boolean isDefaultMethodCall(MethodCall call)
1:   {
1:     return _toString.equals(call) || _equals.equals(call) || _hashCode.equals(call);
1:   }
1: }
commit:4e2fb0c
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.unittest.mocks;
0: 
0: /**
0:  * <p>This class contains method call handlers for some default method handling.
0:  * </p>
0:  *
0:  * <p>This class provides handlers for the toString, equals and hashCode
0:  *   methods. They reproduce the default Object implementations for dynamic
0:  *   mock objects, these can be overridden.
0:  * </p>
0:  */
0: public class DefaultMethodCallHandlers
0: {
0:   /** A MethodCall representing the equals method */
0:   private static MethodCall _equals;
0:   /** A MethodCall representing the toString method */
0:   private static MethodCall _toString;
0:   /** A MethodCall representing the hashCode method */
0:   private static MethodCall _hashCode;
0: 
0:   /* ------------------------------------------------------------------------ */
0:   /* static initializer
0:   /* ------------------------------------------------------------------------ */
0:   static
0:   {
0:     _equals = new MethodCall(Object.class, "equals", new Object[] {Object.class});
0:     _toString = new MethodCall(Object.class, "toString", new Object[0]);
0:     _hashCode = new MethodCall(Object.class, "hashCode", new Object[0]);
0:   }
0: 
0:   /**
0:    * The Default MethodCallHandler for the equals method, performs an == check.
0:    */
0:   public static final MethodCallHandler EQUALS_HANDLER = new MethodCallHandler()
0:   {
0:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
0:     {
0:       Object obj = methodCall.getInvokedObject();
0:       Object toObj = methodCall.getArguments()[0];
0:       
0:       if (toObj == null) return false;
0:       
0:       if(parent.getTemplateObject() != null){
0:         try {
0:           if(Skeleton.isSkeleton(toObj) &&Skeleton.getSkeleton(toObj).getTemplateObject() != null){
0:             return parent.getTemplateObject().equals(Skeleton.getSkeleton(toObj).getTemplateObject());
0:           } else {
0:             return false;
0:           }
0:         } catch (IllegalArgumentException iae) {
0:           return parent.getTemplateObject().equals(toObj);
0:         }
0:       }
0:         
0: 
0:       return obj == toObj ? Boolean.TRUE : Boolean.FALSE;
0:     }
0:   };
0: 
0:   /**
0:    * The Default MethodCallHandler for the toString method, reproduces
0:    * <classname>@<hashCode>
0:    */
0:   public static final MethodCallHandler TOSTRING_HANDLER = new MethodCallHandler()
0:   {
0:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
0:     {
0:       if(parent.getTemplateObject() != null)
0:         return parent.getTemplateObject().toString();
0:       Object obj = methodCall.getInvokedObject();
0:       return obj.getClass().getName() + "@" + System.identityHashCode(obj);
0:     }
0:   };
0: 
0:   /**
0:    * The Default MethodCallHandler for the hashCode method, returns the
0:    * identity hashCode.
0:    */
0:   public static final MethodCallHandler HASHCODE_HANDLER = new MethodCallHandler()
0:   {
0:     public Object handle(MethodCall methodCall, Skeleton parent) throws Exception
0:     {
0:       if(parent.getTemplateObject() != null)
0:         return parent.getTemplateObject().hashCode();
0:       
0:       return Integer.valueOf(System.identityHashCode(methodCall.getInvokedObject()));
0:     }
0:   };
0: 
0:   /* ------------------------------------------------------------------------ */
0:   /* registerDefaultHandlers method
0:   /* ------------------------------------------------------------------------ */
0:   /**
0:    * This method registers the DefaultMethodCall Handlers with the specified
0:    * skeleton.
0:    *
0:    * @param s a skeleton
0:    */
0:   public static void registerDefaultHandlers(Skeleton s)
0:   {
0:     s.registerMethodCallHandler(_equals, EQUALS_HANDLER);
0:     s.registerMethodCallHandler(_toString, TOSTRING_HANDLER);
0:     s.registerMethodCallHandler(_hashCode, HASHCODE_HANDLER);
0:   }
0: 
0:   /* ------------------------------------------------------------------------ */
0:   /* isDefaultMethodCall method
0:   /* ------------------------------------------------------------------------ */
0:   /**
0:    * This method returns true if and only if the specified call represents a
0:    * default method call.
0:    *
0:    * @param call the call
0:    * @return see above.
0:    */
0:   public static boolean isDefaultMethodCall(MethodCall call)
0:   {
0:     return _toString.equals(call) || _equals.equals(call) || _hashCode.equals(call);
0:   }
0: }
============================================================================