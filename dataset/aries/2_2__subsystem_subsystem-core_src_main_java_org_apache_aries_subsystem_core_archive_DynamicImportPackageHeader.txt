1:d6eb080: /*
1:d6eb080:  * Licensed under the Apache License, Version 2.0 (the "License");
1:d6eb080:  * you may not use this file except in compliance with the License.
1:d6eb080:  * You may obtain a copy of the License at
1:d6eb080:  *
1:d6eb080:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d6eb080:  *
1:d6eb080:  * Unless required by applicable law or agreed to in writing, software
1:d6eb080:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d6eb080:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d6eb080:  * See the License for the specific language governing permissions and
1:d6eb080:  * limitations under the License.
1:d6eb080:  */
1:d6eb080: package org.apache.aries.subsystem.core.archive;
17:d6eb080: 
1:d6eb080: import java.util.ArrayList;
1:d6eb080: import java.util.Arrays;
1:d6eb080: import java.util.Collection;
1:d6eb080: import java.util.List;
1:d6eb080: 
1:d6eb080: import org.osgi.framework.Constants;
1:d6eb080: import org.osgi.framework.namespace.PackageNamespace;
1:d6eb080: import org.osgi.resource.Resource;
1:d6eb080: 
1:2ffcfb9: public class DynamicImportPackageHeader extends AbstractClauseBasedHeader<DynamicImportPackageHeader.Clause> implements RequirementHeader<DynamicImportPackageHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:d6eb080: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9: 					parsePath(clause, Patterns.WILDCARD_NAMES, true),
1:2ffcfb9: 					parseParameters(clause, true), 
1:2ffcfb9:             		generateDefaultParameters(
1:2ffcfb9:             				VersionRangeAttribute.DEFAULT_VERSION));
22:d6eb080: 		}
1:d6eb080: 		
1:d6eb080: 		public Collection<String> getPackageNames() {
1:2ffcfb9: 			return Arrays.asList(path.split(";"));
1:d6eb080: 		}
1:d6eb080: 		
1:d6eb080: 		public VersionRangeAttribute getVersionRangeAttribute() {
1:2ffcfb9: 			return (VersionRangeAttribute)parameters.get(Constants.VERSION_ATTRIBUTE);
1:d6eb080: 		}
1:2ffcfb9:         
1:d6eb080: 		public List<DynamicImportPackageRequirement> toRequirements(Resource resource) {
1:d6eb080: 			Collection<String> pkgs = getPackageNames();
1:d6eb080: 			List<DynamicImportPackageRequirement> result = new ArrayList<DynamicImportPackageRequirement>(pkgs.size());
1:d6eb080: 			for (String pkg : pkgs) {
1:d6eb080: 				result.add(new DynamicImportPackageRequirement(pkg, this, resource));
1:d6eb080: 			}
1:d6eb080: 			return result;
1:d6eb080: 		}
1:d6eb080: 	}
1:d6eb080: 	
1:d6eb080: 	public static final String ATTRIBUTE_BUNDLE_SYMBOLICNAME = PackageNamespace.CAPABILITY_BUNDLE_SYMBOLICNAME_ATTRIBUTE;
1:d6eb080: 	public static final String ATTRIBUTE_BUNDLE_VERSION = PackageNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
1:d6eb080: 	public static final String ATTRIBUTE_VERSION = PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE;
1:d6eb080: 	public static final String NAME = Constants.DYNAMICIMPORT_PACKAGE;
1:d6eb080: 	
1:d6eb080: 	public DynamicImportPackageHeader(Collection<Clause> clauses) {
1:2ffcfb9: 		super(clauses);
1:d6eb080: 	}
1:d6eb080: 	
1:2ffcfb9: 	public DynamicImportPackageHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:d6eb080: 	}
1:d6eb080: 	
1:2ffcfb9: 	@Override
1:2ffcfb9:     public String getName() {
1:d6eb080: 		return Constants.IMPORT_PACKAGE;
1:d6eb080: 	}
1:d6eb080: 	
10:d6eb080: 	@Override
1:d6eb080: 	public String getValue() {
1:d6eb080: 		return toString();
1:d6eb080: 	}
1:d6eb080: 	
1:d6eb080: 	@Override
1:d6eb080: 	public List<DynamicImportPackageRequirement> toRequirements(Resource resource) {
1:d6eb080: 		Collection<Clause> clauses = getClauses();
1:d6eb080: 		List<DynamicImportPackageRequirement> result = new ArrayList<DynamicImportPackageRequirement>(clauses.size());
1:d6eb080: 		for (Clause clause : clauses) {
1:d6eb080: 			result.addAll(clause.toRequirements(resource));
1:d6eb080: 		}
1:d6eb080: 		return result;
1:d6eb080: 	}
1:d6eb080: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public class DynamicImportPackageHeader extends AbstractClauseBasedHeader<DynamicImportPackageHeader.Clause> implements RequirementHeader<DynamicImportPackageHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1: 			super(
1: 					parsePath(clause, Patterns.WILDCARD_NAMES, true),
1: 					parseParameters(clause, true), 
1:             		generateDefaultParameters(
1:             				VersionRangeAttribute.DEFAULT_VERSION));
1: 			return Arrays.asList(path.split(";"));
1: 			return (VersionRangeAttribute)parameters.get(Constants.VERSION_ATTRIBUTE);
1:         
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		super(clauses);
1: 	public DynamicImportPackageHeader(String value) {
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
1: 	@Override
1:     public String getName() {
/////////////////////////////////////////////////////////////////////////
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.resource.Resource;
1: 
0: public class DynamicImportPackageHeader implements RequirementHeader<DynamicImportPackageHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		private static final String REGEX1 = '(' + Grammar.WILDCARD_NAMES + ")(?=;|\\z)";
0: 		private static final String REGEX2 = '(' + Grammar.PARAMETER + ")(?=;|\\z)";
0: 		private static final Pattern PATTERN1 = Pattern.compile(REGEX1);
0: 		private static final Pattern PATTERN2 = Pattern.compile(REGEX2);
1: 
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(Constants.VERSION_ATTRIBUTE);
0: 			if (parameter == null)
0: 				parameters.put(Constants.VERSION_ATTRIBUTE, new VersionRangeAttribute());
1: 		}
1: 		
0: 		private final Map<String, Parameter> myParameters = new HashMap<String, Parameter>();
0: 		private final String myPath;
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN1.matcher(clause);
0: 			if (matcher.find())
0: 				myPath = matcher.group().replaceAll("\\s", "");
0: 			else
0: 				throw new IllegalArgumentException("Invalid " + Constants.IMPORT_PACKAGE + " header clause: " + clause);
0: 			matcher.usePattern(PATTERN2);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				// TODO Revisit the following fix.
0: 				// All version attributes on an ImportPackage header are ranges. The ParameterFactory will return
0: 				// a VersionAttribute when the value is a single version (e.g., version=1.0.0). This causes a
0: 				// ClassCastException in getVersionRangeAttribute().
0: 				if (parameter instanceof VersionAttribute)
0: 					parameter = new VersionRangeAttribute(String.valueOf(parameter.getValue()));
0: 				myParameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(myParameters);
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = myParameters.get(name);
0: 			if (result instanceof Attribute) {
0: 				return (Attribute)result;
1: 			}
0: 			return null;
1: 		}
1: 		
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(myParameters.size());
0: 			for (Parameter parameter : myParameters.values()) {
0: 				if (parameter instanceof Attribute) {
0: 					attributes.add((Attribute)parameter);
1: 				}
1: 			}
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 		
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = myParameters.get(name);
0: 			if (result instanceof Directive) {
0: 				return (Directive)result;
1: 			}
0: 			return null;
1: 		}
1: 		
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(myParameters.size());
0: 			for (Parameter parameter : myParameters.values()) {
0: 				if (parameter instanceof Directive) {
0: 					directives.add((Directive)parameter);
1: 				}
1: 			}
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 		
1: 		public Collection<String> getPackageNames() {
0: 			return Arrays.asList(myPath.split(";"));
1: 		}
1: 		
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return myParameters.get(name);
1: 		}
1: 		
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(myParameters.values());
1: 		}
1: 		
1: 		@Override
0: 		public String getPath() {
0: 			return myPath;
1: 		}
1: 		
1: 		public VersionRangeAttribute getVersionRangeAttribute() {
0: 			return (VersionRangeAttribute)myParameters.get(Constants.VERSION_ATTRIBUTE);
1: 		}
1: 		
1: 		public List<DynamicImportPackageRequirement> toRequirements(Resource resource) {
1: 			Collection<String> pkgs = getPackageNames();
1: 			List<DynamicImportPackageRequirement> result = new ArrayList<DynamicImportPackageRequirement>(pkgs.size());
1: 			for (String pkg : pkgs) {
1: 				result.add(new DynamicImportPackageRequirement(pkg, this, resource));
1: 			}
1: 			return result;
1: 		}
1: 		
1: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 		}
1: 	}
1: 	
1: 	public static final String ATTRIBUTE_BUNDLE_SYMBOLICNAME = PackageNamespace.CAPABILITY_BUNDLE_SYMBOLICNAME_ATTRIBUTE;
1: 	public static final String ATTRIBUTE_BUNDLE_VERSION = PackageNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
1: 	public static final String ATTRIBUTE_VERSION = PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE;
1: 	public static final String NAME = Constants.DYNAMICIMPORT_PACKAGE;
1: 	
0: 	private static Collection<Clause> processHeader(String header) {
0: 		Set<Clause> clauses = new HashSet<Clause>();
0: 		for (String clause : new ClauseTokenizer(header).getClauses())
0: 			clauses.add(new Clause(clause));
0: 		return clauses;
1: 	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	
1: 	public DynamicImportPackageHeader(Collection<Clause> clauses) {
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A DynamicImport-Package header must have at least one clause");
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
1: 	
0: 	public DynamicImportPackageHeader(String header) {
0: 		this(processHeader(header));
1: 	}
1: 	
0: 	public Collection<DynamicImportPackageHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
0: 	public String getName() {
1: 		return Constants.IMPORT_PACKAGE;
1: 	}
1: 	
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
1: 	@Override
1: 	public List<DynamicImportPackageRequirement> toRequirements(Resource resource) {
1: 		Collection<Clause> clauses = getClauses();
1: 		List<DynamicImportPackageRequirement> result = new ArrayList<DynamicImportPackageRequirement>(clauses.size());
1: 		for (Clause clause : clauses) {
1: 			result.addAll(clause.toRequirements(resource));
1: 		}
1: 		return result;
1: 	}
1: 	
1: 	@Override
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
1: 	}
1: }
============================================================================