1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: 
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: 
1:7fa86e8: import org.osgi.annotation.versioning.ConsumerType;
1:7fa86e8: import org.osgi.util.pushstream.PushEvent.EventType;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * A {@link QueuePolicy} is used to control how events should be queued in the
1:7fa86e8:  * current buffer. The {@link QueuePolicy} will be called when an event has
1:7fa86e8:  * arrived.
1:7fa86e8:  * 
1:7fa86e8:  * @see QueuePolicyOption
1:7fa86e8:  * 
1:7fa86e8:  *
1:7fa86e8:  * @param <T> The type of the data
1:7fa86e8:  * @param <U> The type of the queue
1:7fa86e8:  */
1:7fa86e8: 
1:7fa86e8: @ConsumerType
1:7fa86e8: @FunctionalInterface
1:7fa86e8: public interface QueuePolicy<T, U extends BlockingQueue<PushEvent<? extends T>>> { 
1:7fa86e8: 	
1:7fa86e8: 	/**
1:7fa86e8: 	 * Enqueue the event and return the remaining capacity available for events
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param queue
1:7fa86e8: 	 * @param event
1:7fa86e8: 	 * @throws Exception If an error ocurred adding the event to the queue. This
1:7fa86e8: 	 *         exception will cause the connection between the
1:7fa86e8: 	 *         {@link PushEventSource} and the {@link PushEventConsumer} to be
1:7fa86e8: 	 *         closed with an {@link EventType#ERROR}
1:7fa86e8: 	 */
1:7fa86e8: 	public void doOffer(U queue, PushEvent<? extends T> event) throws Exception;
1:7fa86e8: 	
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.util.pushstream;
1: 
1: import java.util.concurrent.BlockingQueue;
1: 
1: import org.osgi.annotation.versioning.ConsumerType;
1: import org.osgi.util.pushstream.PushEvent.EventType;
1: 
1: /**
1:  * A {@link QueuePolicy} is used to control how events should be queued in the
1:  * current buffer. The {@link QueuePolicy} will be called when an event has
1:  * arrived.
1:  * 
1:  * @see QueuePolicyOption
1:  * 
1:  *
1:  * @param <T> The type of the data
1:  * @param <U> The type of the queue
1:  */
1: 
1: @ConsumerType
1: @FunctionalInterface
1: public interface QueuePolicy<T, U extends BlockingQueue<PushEvent<? extends T>>> { 
1: 	
1: 	/**
1: 	 * Enqueue the event and return the remaining capacity available for events
1: 	 * 
1: 	 * @param queue
1: 	 * @param event
1: 	 * @throws Exception If an error ocurred adding the event to the queue. This
1: 	 *         exception will cause the connection between the
1: 	 *         {@link PushEventSource} and the {@link PushEventConsumer} to be
1: 	 *         closed with an {@link EventType#ERROR}
1: 	 */
1: 	public void doOffer(U queue, PushEvent<? extends T> event) throws Exception;
1: 	
1: }
============================================================================