1:6aa0635: /*
1:6aa0635:  * Licensed to the Apache Software Foundation (ASF) under one
1:6aa0635:  * or more contributor license agreements.  See the NOTICE file
1:6aa0635:  * distributed with this work for additional information
1:6aa0635:  * regarding copyright ownership.  The ASF licenses this file
1:6aa0635:  * to you under the Apache License, Version 2.0 (the
1:6aa0635:  * "License"); you may not use this file except in compliance
1:6aa0635:  * with the License.  You may obtain a copy of the License at
1:6aa0635:  *
1:6aa0635:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6aa0635:  *
1:6aa0635:  * Unless required by applicable law or agreed to in writing,
1:6aa0635:  * software distributed under the License is distributed on an
1:6aa0635:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6aa0635:  * KIND, either express or implied.  See the License for the
1:6aa0635:  * specific language governing permissions and limitations
1:6aa0635:  * under the License.
1:6aa0635:  */
1:6aa0635: package org.apache.aries.versioning.utils;
1:6aa0635: 
1:6aa0635: import java.lang.reflect.Modifier;
1:6aa0635: import java.net.URLClassLoader;
1:6aa0635: 
1:6aa0635: import org.objectweb.asm.AnnotationVisitor;
1:6aa0635: import org.objectweb.asm.Attribute;
1:6aa0635: import org.objectweb.asm.ClassVisitor;
1:6aa0635: import org.objectweb.asm.FieldVisitor;
1:6aa0635: import org.objectweb.asm.MethodVisitor;
1:6aa0635: 
1:9d710d0: public class SemanticVersioningClassVisitor extends ClassVisitor {
1:6aa0635: 
1:6aa0635:     private ClassDeclaration classDeclaration;
1:6aa0635:     private boolean needVisit = false;
1:6aa0635:     private URLClassLoader loader = null;
1:f9b43fb:     private SerialVersionClassVisitor cv = null;
1:9822203: 
1:f9b43fb:     public SemanticVersioningClassVisitor(URLClassLoader newJarLoader, SerialVersionClassVisitor cv) {
1:9d710d0:       super(SemanticVersioningUtils.ASM4);
1:9d710d0:       this.loader = newJarLoader;
1:9d710d0:       this.cv = cv;
1:f9b43fb:     }
1:f9b43fb: 
1:6aa0635:     public SemanticVersioningClassVisitor(URLClassLoader newJarLoader) {
1:9d710d0:       super(SemanticVersioningUtils.ASM4);
1:9d710d0:       this.loader = newJarLoader;
2:6aa0635:     }
1:6aa0635: 
1:9822203:     public ClassDeclaration getClassDeclaration() {
1:6aa0635:         return classDeclaration;
1:6aa0635:     }
1:6aa0635: 
1:6aa0635:     /*
1:6aa0635:     * (non-Javadoc)
1:6aa0635:     *
1:6aa0635:     * @see org.objectweb.asm.ClassAdapter#visit(int, int,
1:6aa0635:     * java.lang.String, java.lang.String, java.lang.String, java.lang.String)
1:6aa0635:     */
1:6aa0635:     // visit the header of the class
1:f9b43fb:     @Override
1:9822203:     public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
1:6aa0635:         // only interested in public class
1:f9b43fb:         if (cv != null) {
1:f9b43fb:             cv.visit(version, access, name, signature, superName, interfaces);
1:6aa0635:         }
1:f9b43fb:         if (Modifier.isPublic(access) || (Modifier.isProtected(access))) {
1:f9b43fb:             classDeclaration = new ClassDeclaration(access, name, signature, superName, interfaces, loader, cv);
1:f9b43fb:             needVisit = true;
1:f9b43fb: 
1:f9b43fb:         }
1:f9b43fb:     }
1:6aa0635: 
1:6aa0635:     /*
1:6aa0635:     * (non-Javadoc)
1:6aa0635:     *
1:6aa0635:     * @see org.objectweb.asm.ClassAdapter#visitField(int, java.lang.String,
1:6aa0635:     * java.lang.String, java.lang.String, java.lang.Object)
1:6aa0635:     *
1:6aa0635:     * Grab all protected or public fields
1:6aa0635:     */
1:6aa0635:     @Override
1:6aa0635:     public FieldVisitor visitField(int access, String name, String desc,
1:6aa0635:                                    String signature, Object value) {
1:f9b43fb:         if (cv != null) {
1:f9b43fb:             cv.visitField(access, name, desc, signature, value);
1:f9b43fb:         }
2:6aa0635:         if (needVisit) {
1:f9b43fb:             FieldDeclaration fd = new FieldDeclaration(access, name, desc, signature, value);
1:6aa0635:             classDeclaration.addFields(fd);
1:6aa0635:         }
1:6aa0635:         return null;
1:6aa0635:     }
1:6aa0635: 
1:6aa0635:     /*
1:6aa0635:     * (non-Javadoc)
1:6aa0635:     *
1:6aa0635:     * @see org.objectweb.asm.ClassAdapter#visitMethod(int, java.lang.String,
1:6aa0635:     * java.lang.String, java.lang.String, java.lang.String[])
1:6aa0635:     * Get all non-private methods
1:6aa0635:     */
1:6aa0635:     @Override
1:6aa0635:     public MethodVisitor visitMethod(int access, String name, String desc,
1:6aa0635:                                      String signature, String[] exceptions) {
1:6aa0635: 
1:6aa0635: 
1:f9b43fb:         if (cv != null) {
1:f9b43fb:             cv.visitMethod(access, name, desc, signature, exceptions);
1:f9b43fb:         }
1:f9b43fb:         if (needVisit && (!SemanticVersioningUtils.CLINIT.equals(name))) {
1:6aa0635:             MethodDeclaration md = new MethodDeclaration(access, name, desc, signature, exceptions);
1:6aa0635:             classDeclaration.addMethods(md);
1:6aa0635:         }
1:6aa0635:         return null;
1:6aa0635:     }
1:6aa0635: 
1:6aa0635:     @Override
1:9822203:     public AnnotationVisitor visitAnnotation(String arg0, boolean arg1) {
1:6aa0635:         return null;
1:6aa0635:     }
1:6aa0635: 
1:6aa0635:     @Override
1:9822203:     public void visitAttribute(Attribute arg0) {
1:6aa0635:         // no-op
1:6aa0635:     }
1:f9b43fb: 
1:6aa0635:     @Override
1:9822203:     public void visitEnd() {
1:f9b43fb:         //no-op
1:f9b43fb: 
1:6aa0635:     }
1:6aa0635: 
1:6aa0635:     @Override
1:9822203:     public void visitInnerClass(String name, String outerName, String innerName, int access) {
2:6aa0635:         //no-op
1:6aa0635:         //The inner class will be scanned on its own. However, the method level class will be excluded, as they won't be public or protected.
1:f9b43fb: 
1:6aa0635:     }
1:6aa0635: 
1:6aa0635:     @Override
1:9822203:     public void visitOuterClass(String owner, String name, String desc) {
1:f9b43fb:         //no op
1:f9b43fb: 
1:6aa0635:     }
1:f9b43fb: 
1:6aa0635:     @Override
1:9822203:     public void visitSource(String arg0, String arg1) {
1:6aa0635:         //no-op
1:6aa0635: 
1:6aa0635:     }
1:6aa0635: 
1:6aa0635: 
1:6aa0635: }
============================================================================
author:Emily Jiang
-------------------------------------------------------------------------------
commit:9d710d0
/////////////////////////////////////////////////////////////////////////
1: public class SemanticVersioningClassVisitor extends ClassVisitor {
/////////////////////////////////////////////////////////////////////////
1:       super(SemanticVersioningUtils.ASM4);
1:       this.loader = newJarLoader;
1:       this.cv = cv;
1:       super(SemanticVersioningUtils.ASM4);
1:       this.loader = newJarLoader;
commit:f9b43fb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private SerialVersionClassVisitor cv = null;
1:   public SemanticVersioningClassVisitor(URLClassLoader newJarLoader, SerialVersionClassVisitor cv) {
0:     this.loader = newJarLoader;
0:     this.cv = cv;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     if (cv != null) {
1:       cv.visit(version, access, name, signature, superName, interfaces);
1:     if (Modifier.isPublic(access) || (Modifier.isProtected(access))) {
1:       classDeclaration = new ClassDeclaration(access, name, signature, superName, interfaces, loader, cv);
1:       needVisit = true;
1: 
1:     } 
1:   }
/////////////////////////////////////////////////////////////////////////
1:     if (cv != null) {
1:       cv.visitField(access, name, desc, signature, value);
1:     }
1:       FieldDeclaration fd = new FieldDeclaration(access, name, desc, signature, value);
/////////////////////////////////////////////////////////////////////////
1:     if (cv != null) {
1:       cv.visitMethod(access, name, desc, signature, exceptions);
1:     }
1:     if (needVisit && (!SemanticVersioningUtils.CLINIT.equals(name))) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     //no-op
1: 
1: 
1:     //no op
1: 
1: 
commit:6aa0635
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.versioning.utils;
1: 
1: import java.lang.reflect.Modifier;
1: import java.net.URLClassLoader;
1: 
1: import org.objectweb.asm.AnnotationVisitor;
1: import org.objectweb.asm.Attribute;
1: import org.objectweb.asm.ClassVisitor;
1: import org.objectweb.asm.FieldVisitor;
1: import org.objectweb.asm.MethodVisitor;
1: 
0: public class SemanticVersioningClassVisitor implements ClassVisitor
0: {
1: 
1:   private ClassDeclaration classDeclaration;
1:   private boolean needVisit = false;
1:   private URLClassLoader loader = null;
1:   public SemanticVersioningClassVisitor(URLClassLoader newJarLoader) {
0:     this.loader = newJarLoader;
1:   }
1: 
0:   public ClassDeclaration getClassDeclaration()
0:   {
1:     return classDeclaration;
1:   }
1:   /*
1:    * (non-Javadoc)
1:    * 
1:    * @see org.objectweb.asm.ClassAdapter#visit(int, int,
1:    * java.lang.String, java.lang.String, java.lang.String, java.lang.String)
1:    */
1:   // visit the header of the class
0:   public void  visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
1:     // only interested in public class
0:     if (Modifier.isPublic(access) || (Modifier.isProtected(access))) {
0:     classDeclaration = new ClassDeclaration(access, name, signature, superName, interfaces, loader);
0:     needVisit = true;
1:     
1:     } 
1:     }
1:   /*
1:    * (non-Javadoc)
1:    * 
1:    * @see org.objectweb.asm.ClassAdapter#visitField(int, java.lang.String,
1:    * java.lang.String, java.lang.String, java.lang.Object)
1:    * 
1:    * Grab all protected or public fields
1:    */
1:   @Override
1:   public FieldVisitor visitField(int access, String name, String desc,
1:       String signature, Object value) {
1:     if (needVisit) {
0:       FieldDeclaration fd = new FieldDeclaration(access, name, desc, signature);
1: 
1:       classDeclaration.addFields(fd);
1:     }
1:     return null;
1:   }
1: 
1:   /*
1:    * (non-Javadoc)
1:    * 
1:    * @see org.objectweb.asm.ClassAdapter#visitMethod(int, java.lang.String,
1:    * java.lang.String, java.lang.String, java.lang.String[])
1:    * Get all non-private methods
1:    */
1:   @Override
1:   public MethodVisitor visitMethod(int access, String name, String desc,
1:       String signature, String[] exceptions) {
1: 
1: 
1:     if (needVisit) {
1:       MethodDeclaration md = new MethodDeclaration(access, name, desc, signature, exceptions);
1:       classDeclaration.addMethods(md);
1:     }
1:     return null;
1:   }
1:   @Override
0:   public AnnotationVisitor visitAnnotation(String arg0, boolean arg1)
0:   {
1:     return null;
1:   }
1:   @Override
0:   public void visitAttribute(Attribute arg0)
0:   {
1:     // no-op    
1:   }
1:  
1:   @Override
0:   public void visitEnd()
0:   {
1:   //no-op
1:     
1:   }
1:   @Override
0:   public void visitInnerClass(String name, String outerName, String innerName, int access)
0:   {
1:     //no-op
1:     //The inner class will be scanned on its own. However, the method level class will be excluded, as they won't be public or protected.
1:    
1:   }
1:   @Override
0:   public void visitOuterClass(String owner, String name, String desc)
0:   {
0:   //no op
1:     
1:   }
1:   @Override
0:   public void visitSource(String arg0, String arg1)
0:   {
1:     //no-op
1:     
1:   }
1: 
1: 
1: }
author:David Jencks
-------------------------------------------------------------------------------
commit:9822203
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: public class SemanticVersioningClassVisitor implements ClassVisitor {
0:     private ClassDeclaration classDeclaration;
0:     private boolean needVisit = false;
0:     private URLClassLoader loader = null;
0:     private SerialVersionClassVisitor cv = null;
0:     public SemanticVersioningClassVisitor(URLClassLoader newJarLoader, SerialVersionClassVisitor cv) {
0:         this.loader = newJarLoader;
0:         this.cv = cv;
0:     public SemanticVersioningClassVisitor(URLClassLoader newJarLoader) {
0:         this.loader = newJarLoader;
0: 
1:     public ClassDeclaration getClassDeclaration() {
0:         return classDeclaration;
0:     /*
0:     * (non-Javadoc)
0:     *
0:     * @see org.objectweb.asm.ClassAdapter#visit(int, int,
0:     * java.lang.String, java.lang.String, java.lang.String, java.lang.String)
0:     */
0:     // visit the header of the class
0:     @Override
1:     public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
0:         // only interested in public class
0:         if (cv != null) {
0:             cv.visit(version, access, name, signature, superName, interfaces);
0:         }
0:         if (Modifier.isPublic(access) || (Modifier.isProtected(access))) {
0:             classDeclaration = new ClassDeclaration(access, name, signature, superName, interfaces, loader, cv);
0:             needVisit = true;
0:         }
0: 
0:     /*
0:     * (non-Javadoc)
0:     *
0:     * @see org.objectweb.asm.ClassAdapter#visitField(int, java.lang.String,
0:     * java.lang.String, java.lang.String, java.lang.Object)
0:     *
0:     * Grab all protected or public fields
0:     */
0:     @Override
0:     public FieldVisitor visitField(int access, String name, String desc,
0:                                    String signature, Object value) {
0:         if (cv != null) {
0:             cv.visitField(access, name, desc, signature, value);
0:         }
0:         if (needVisit) {
0:             FieldDeclaration fd = new FieldDeclaration(access, name, desc, signature, value);
0:             classDeclaration.addFields(fd);
0:         }
0:         return null;
0:     /*
0:     * (non-Javadoc)
0:     *
0:     * @see org.objectweb.asm.ClassAdapter#visitMethod(int, java.lang.String,
0:     * java.lang.String, java.lang.String, java.lang.String[])
0:     * Get all non-private methods
0:     */
0:     @Override
0:     public MethodVisitor visitMethod(int access, String name, String desc,
0:                                      String signature, String[] exceptions) {
0:         if (cv != null) {
0:             cv.visitMethod(access, name, desc, signature, exceptions);
0:         }
0:         if (needVisit && (!SemanticVersioningUtils.CLINIT.equals(name))) {
0:             MethodDeclaration md = new MethodDeclaration(access, name, desc, signature, exceptions);
0:             classDeclaration.addMethods(md);
0:         }
0:         return null;
0:     }
0:     @Override
1:     public AnnotationVisitor visitAnnotation(String arg0, boolean arg1) {
0:         return null;
0:     }
0:     @Override
1:     public void visitAttribute(Attribute arg0) {
0:         // no-op
0:     }
0: 
0:     @Override
1:     public void visitEnd() {
0:         //no-op
0: 
0:     }
0: 
0:     @Override
1:     public void visitInnerClass(String name, String outerName, String innerName, int access) {
0:         //no-op
0:         //The inner class will be scanned on its own. However, the method level class will be excluded, as they won't be public or protected.
0: 
0:     }
0: 
0:     @Override
1:     public void visitOuterClass(String owner, String name, String desc) {
0:         //no op
0: 
0:     }
0: 
0:     @Override
1:     public void visitSource(String arg0, String arg1) {
0:         //no-op
0: 
0:     }
============================================================================