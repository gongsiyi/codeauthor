1:108deb0: 
1:108deb0: /*
1:108deb0:  * Licensed to the Apache Software Foundation (ASF) under one
1:108deb0:  * or more contributor license agreements.  See the NOTICE file
1:108deb0:  * distributed with this work for additional information
1:108deb0:  * regarding copyright ownership.  The ASF licenses this file
1:108deb0:  * to you under the Apache License, Version 2.0 (the
1:108deb0:  * "License"); you may not use this file except in compliance
1:108deb0:  * with the License.  You may obtain a copy of the License at
1:108deb0:  *
1:108deb0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:108deb0:  *
1:108deb0:  * Unless required by applicable law or agreed to in writing,
1:108deb0:  * software distributed under the License is distributed on an
1:108deb0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:108deb0:  * KIND, either express or implied.  See the License for the
1:108deb0:  * specific language governing permissions and limitations
1:108deb0:  * under the License.
1:108deb0:  */
1:108deb0: package org.apache.aries.jpa.blueprint.impl;
1:108deb0: 
1:108deb0: import java.lang.reflect.AccessibleObject;
1:108deb0: import java.lang.reflect.Field;
1:108deb0: import java.lang.reflect.Method;
1:108deb0: import java.util.List;
1:108deb0: 
1:108deb0: import javax.persistence.EntityManager;
1:108deb0: import javax.persistence.EntityManagerFactory;
1:108deb0: import javax.persistence.PersistenceContext;
1:108deb0: import javax.persistence.PersistenceUnit;
1:108deb0: 
1:108deb0: import org.junit.Assert;
1:108deb0: import org.junit.Test;
1:108deb0: 
1:108deb0: 
1:108deb0: public class AnnotationScannerTest {
1:108deb0:     
1:108deb0:     private Method setEmMethod;
1:108deb0:     private Field emField;
1:108deb0:     private Method setEmfMethod;
1:108deb0:     private Field emfField;
1:108deb0: 
1:108deb0:     public AnnotationScannerTest() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
1:108deb0:         setEmMethod = TestClass.class.getMethod("setEm", new Class<?>[] {EntityManager.class});
1:108deb0:         emField = TestClass.class.getDeclaredField("em");
1:108deb0:         setEmfMethod = TestClass.class.getMethod("setEmf", new Class<?>[] {EntityManagerFactory.class});
1:108deb0:         emfField = TestClass.class.getDeclaredField("emf");
1:108deb0:     }
1:108deb0: 
1:108deb0:     @Test
1:108deb0:     public void getNameTest() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
1:108deb0:         Assert.assertEquals("em", AnnotationScanner.getName(setEmMethod));
1:108deb0:         Assert.assertEquals("em", AnnotationScanner.getName(emField));
1:108deb0:         Assert.assertEquals("emf", AnnotationScanner.getName(setEmfMethod));
1:108deb0:         Assert.assertEquals("emf", AnnotationScanner.getName(emfField));
1:108deb0: 
1:108deb0:     }
1:108deb0: 
1:108deb0:     @Test
1:108deb0:     public void getTypeTest() {
1:108deb0:         Assert.assertEquals(EntityManager.class, AnnotationScanner.getType(setEmMethod));
1:108deb0:         Assert.assertEquals(EntityManager.class, AnnotationScanner.getType(emField));
1:108deb0:         Assert.assertEquals(EntityManagerFactory.class, AnnotationScanner.getType(setEmfMethod));
1:108deb0:         Assert.assertEquals(EntityManagerFactory.class, AnnotationScanner.getType(emfField));
1:108deb0: 
1:108deb0:     }
1:108deb0:     
1:108deb0:     @Test
1:108deb0:     public void getPCAnnotatedMembersTest() {
1:108deb0:         AnnotationScanner scanner = new AnnotationScanner();
1:108deb0:         List<AccessibleObject> members = scanner.getJpaAnnotatedMembers(TestClass.class, PersistenceContext.class);
1:108deb0:         Assert.assertEquals(1, members.size());
1:108deb0:         AccessibleObject member = members.get(0);
1:108deb0:         Assert.assertEquals(Field.class, member.getClass());
1:108deb0:         Field field = (Field)member;
1:108deb0:         Assert.assertEquals("em", field.getName());
1:108deb0:     }
1:108deb0: 
1:108deb0:     @Test
1:108deb0:     public void getPUAnnotatedMembersTest() {
1:108deb0:         AnnotationScanner scanner = new AnnotationScanner();
1:108deb0:         List<AccessibleObject> members = scanner.getJpaAnnotatedMembers(TestClass.class, PersistenceUnit.class);
1:108deb0:         Assert.assertEquals(1, members.size());
1:108deb0:         AccessibleObject member = members.get(0);
1:108deb0:         Assert.assertEquals(Method.class, member.getClass());
1:108deb0:         Method method = (Method)member;
1:108deb0:         Assert.assertEquals("setEmf", method.getName());
1:108deb0:     }
1:108deb0: 
1:e7e89d9:     /**
1:e7e89d9:      * When using a factory the class can be an interface. We need to make sure this does not cause a NPE
1:e7e89d9:      */
1:e7e89d9:     @Test
1:e7e89d9:     public void getFactoryTest() {
1:e7e89d9:         AnnotationScanner scanner = new AnnotationScanner();
1:e7e89d9:         List<AccessibleObject> members = scanner.getJpaAnnotatedMembers(TestInterface.class, PersistenceUnit.class);
1:e7e89d9:         Assert.assertEquals(0, members.size());
1:e7e89d9:     }
1:108deb0:     
1:108deb0: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e7e89d9
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * When using a factory the class can be an interface. We need to make sure this does not cause a NPE
1:      */
1:     @Test
1:     public void getFactoryTest() {
1:         AnnotationScanner scanner = new AnnotationScanner();
1:         List<AccessibleObject> members = scanner.getJpaAnnotatedMembers(TestInterface.class, PersistenceUnit.class);
1:         Assert.assertEquals(0, members.size());
1:     }
commit:108deb0
/////////////////////////////////////////////////////////////////////////
1: 
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.blueprint.impl;
1: 
1: import java.lang.reflect.AccessibleObject;
1: import java.lang.reflect.Field;
1: import java.lang.reflect.Method;
1: import java.util.List;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.PersistenceContext;
1: import javax.persistence.PersistenceUnit;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: 
1: public class AnnotationScannerTest {
1:     
1:     private Method setEmMethod;
1:     private Field emField;
1:     private Method setEmfMethod;
1:     private Field emfField;
1: 
1:     public AnnotationScannerTest() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
1:         setEmMethod = TestClass.class.getMethod("setEm", new Class<?>[] {EntityManager.class});
1:         emField = TestClass.class.getDeclaredField("em");
1:         setEmfMethod = TestClass.class.getMethod("setEmf", new Class<?>[] {EntityManagerFactory.class});
1:         emfField = TestClass.class.getDeclaredField("emf");
1:     }
1: 
1:     @Test
1:     public void getNameTest() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
1:         Assert.assertEquals("em", AnnotationScanner.getName(setEmMethod));
1:         Assert.assertEquals("em", AnnotationScanner.getName(emField));
1:         Assert.assertEquals("emf", AnnotationScanner.getName(setEmfMethod));
1:         Assert.assertEquals("emf", AnnotationScanner.getName(emfField));
1: 
1:     }
1: 
1:     @Test
1:     public void getTypeTest() {
1:         Assert.assertEquals(EntityManager.class, AnnotationScanner.getType(setEmMethod));
1:         Assert.assertEquals(EntityManager.class, AnnotationScanner.getType(emField));
1:         Assert.assertEquals(EntityManagerFactory.class, AnnotationScanner.getType(setEmfMethod));
1:         Assert.assertEquals(EntityManagerFactory.class, AnnotationScanner.getType(emfField));
1: 
1:     }
1:     
1:     @Test
1:     public void getPCAnnotatedMembersTest() {
1:         AnnotationScanner scanner = new AnnotationScanner();
1:         List<AccessibleObject> members = scanner.getJpaAnnotatedMembers(TestClass.class, PersistenceContext.class);
1:         Assert.assertEquals(1, members.size());
1:         AccessibleObject member = members.get(0);
1:         Assert.assertEquals(Field.class, member.getClass());
1:         Field field = (Field)member;
1:         Assert.assertEquals("em", field.getName());
1:     }
1: 
1:     @Test
1:     public void getPUAnnotatedMembersTest() {
1:         AnnotationScanner scanner = new AnnotationScanner();
1:         List<AccessibleObject> members = scanner.getJpaAnnotatedMembers(TestClass.class, PersistenceUnit.class);
1:         Assert.assertEquals(1, members.size());
1:         AccessibleObject member = members.get(0);
1:         Assert.assertEquals(Method.class, member.getClass());
1:         Method method = (Method)member;
1:         Assert.assertEquals("setEmf", method.getName());
1:     }
1: 
1:     
1: }
============================================================================