1:f46e7d5: /*
1:f46e7d5:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f46e7d5:  * you may not use this file except in compliance with the License.
1:f46e7d5:  * You may obtain a copy of the License at
1:f46e7d5:  *
1:f46e7d5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f46e7d5:  *
1:f46e7d5:  * Unless required by applicable law or agreed to in writing, software
1:f46e7d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f46e7d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f46e7d5:  * See the License for the specific language governing permissions and
1:f46e7d5:  * limitations under the License.
1:f46e7d5:  */
1:f46e7d5: package org.apache.aries.subsystem.core.archive;
1:f46e7d5: 
1:f46e7d5: import java.util.Collection;
1:f46e7d5: import java.util.Collections;
1:f46e7d5: import java.util.HashMap;
1:f46e7d5: import java.util.Map;
1:f46e7d5: 
1:f46e7d5: import org.apache.aries.subsystem.core.archive.BundleRequiredExecutionEnvironmentHeader.Clause.ExecutionEnvironment;
1:f46e7d5: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1:f46e7d5: import org.osgi.framework.Version;
1:f46e7d5: import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;
1:f46e7d5: import org.osgi.resource.Resource;
1:f46e7d5: 
1:f46e7d5: public class OsgiExecutionEnvironmentRequirement extends AbstractRequirement {
1:f46e7d5: 	public static final String ATTRIBUTE_VERSION = ExecutionEnvironmentNamespace.CAPABILITY_VERSION_ATTRIBUTE;
1:f46e7d5: 	public static final String DIRECTIVE_FILTER = ExecutionEnvironmentNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1:f46e7d5: 	public static final String NAMESPACE = ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE;
1:f46e7d5: 	
1:f46e7d5: 	private final Map<String, String> directives;
1:f46e7d5: 	private final Resource resource;
1:f46e7d5: 	
1:f46e7d5: 	public OsgiExecutionEnvironmentRequirement(BundleRequiredExecutionEnvironmentHeader.Clause clause, Resource resource) {
1:f46e7d5: 		this(Collections.singleton(clause), resource);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	public OsgiExecutionEnvironmentRequirement(Collection<BundleRequiredExecutionEnvironmentHeader.Clause> clauses, Resource resource) {
1:2ffcfb9: 		if (clauses.isEmpty()) {
1:2ffcfb9: 			throw new IllegalArgumentException();
1:2ffcfb9: 		}
1:2ffcfb9: 		if (resource == null) {
1:2ffcfb9: 			throw new NullPointerException();
1:2ffcfb9: 		}
1:2ffcfb9: 		StringBuilder filter = new StringBuilder();
1:2ffcfb9: 		if (clauses.size() > 1) {
1:2ffcfb9: 			filter.append("(|");
1:2ffcfb9: 		}
1:f46e7d5: 		for (BundleRequiredExecutionEnvironmentHeader.Clause clause : clauses) {
1:f46e7d5: 			ExecutionEnvironment ee = clause.getExecutionEnvironment();
1:f46e7d5: 			Version version = ee.getVersion();
1:2ffcfb9: 			if (version != null) {
1:2ffcfb9: 				filter.append("(&");
1:2ffcfb9: 			}
1:2ffcfb9: 			filter.append("(").append(NAMESPACE).append('=').append(ee.getName()).append(')');
1:2ffcfb9: 			if (version != null) {
1:2ffcfb9: 				filter.append('(').append(ATTRIBUTE_VERSION).append('=').append(version).append("))");
1:2ffcfb9: 			}
1:2ffcfb9: 		}
1:2ffcfb9: 		if (clauses.size() > 1) {
1:f46e7d5: 			filter.append(')');
1:f46e7d5: 		}
1:f46e7d5: 		directives = new HashMap<String, String>(1);
1:2ffcfb9: 		directives.put(DIRECTIVE_FILTER, filter.toString());
1:f46e7d5: 		this.resource = resource;
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Override
1:f46e7d5: 	public Map<String, Object> getAttributes() {
1:f46e7d5: 		return Collections.emptyMap();
1:f46e7d5: 	}
1:f46e7d5: 
1:f46e7d5: 	@Override
1:f46e7d5: 	public Map<String, String> getDirectives() {
1:f46e7d5: 		return Collections.unmodifiableMap(directives);
1:f46e7d5: 	}
1:f46e7d5: 
1:f46e7d5: 	@Override
1:f46e7d5: 	public String getNamespace() {
1:f46e7d5: 		return NAMESPACE;
1:f46e7d5: 	}
1:f46e7d5: 
1:f46e7d5: 	@Override
1:f46e7d5: 	public Resource getResource() {
1:f46e7d5: 		return resource;
1:f46e7d5: 	}
1:f46e7d5: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: 		if (clauses.isEmpty()) {
1: 			throw new IllegalArgumentException();
1: 		}
1: 		if (resource == null) {
1: 			throw new NullPointerException();
1: 		}
1: 		StringBuilder filter = new StringBuilder();
1: 		if (clauses.size() > 1) {
1: 			filter.append("(|");
1: 		}
1: 			if (version != null) {
1: 				filter.append("(&");
1: 			}
1: 			filter.append("(").append(NAMESPACE).append('=').append(ee.getName()).append(')');
1: 			if (version != null) {
1: 				filter.append('(').append(ATTRIBUTE_VERSION).append('=').append(version).append("))");
1: 			}
1: 		}
1: 		if (clauses.size() > 1) {
1: 		directives.put(DIRECTIVE_FILTER, filter.toString());
commit:f46e7d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.archive.BundleRequiredExecutionEnvironmentHeader.Clause.ExecutionEnvironment;
1: import org.apache.aries.subsystem.core.internal.AbstractRequirement;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class OsgiExecutionEnvironmentRequirement extends AbstractRequirement {
1: 	public static final String ATTRIBUTE_VERSION = ExecutionEnvironmentNamespace.CAPABILITY_VERSION_ATTRIBUTE;
1: 	public static final String DIRECTIVE_FILTER = ExecutionEnvironmentNamespace.REQUIREMENT_FILTER_DIRECTIVE;
1: 	public static final String NAMESPACE = ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE;
1: 	
1: 	private final Map<String, String> directives;
1: 	private final Resource resource;
1: 	
1: 	public OsgiExecutionEnvironmentRequirement(BundleRequiredExecutionEnvironmentHeader.Clause clause, Resource resource) {
1: 		this(Collections.singleton(clause), resource);
1: 	}
1: 	
1: 	public OsgiExecutionEnvironmentRequirement(Collection<BundleRequiredExecutionEnvironmentHeader.Clause> clauses, Resource resource) {
0: 		StringBuilder filter = new StringBuilder("(|");
1: 		for (BundleRequiredExecutionEnvironmentHeader.Clause clause : clauses) {
1: 			ExecutionEnvironment ee = clause.getExecutionEnvironment();
0: 			filter.append("(&(").append(NAMESPACE).append('=').append(ee.getName()).append(')');
1: 			Version version = ee.getVersion();
0: 			if (version != null)
0: 				filter.append('(').append(ATTRIBUTE_VERSION).append('=')
0: 						.append(version).append(')');
1: 			filter.append(')');
1: 		}
1: 		directives = new HashMap<String, String>(1);
0: 		directives.put(DIRECTIVE_FILTER, filter.append(')').toString());
1: 		this.resource = resource;
1: 	}
1: 	
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return NAMESPACE;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================