1:8d9ae6e: /**
1:8d9ae6e:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:8d9ae6e:  *  contributor license agreements.  See the NOTICE file distributed with
1:8d9ae6e:  *  this work for additional information regarding copyright ownership.
1:8d9ae6e:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:8d9ae6e:  *  (the "License"); you may not use this file except in compliance with
1:8d9ae6e:  *  the License.  You may obtain a copy of the License at
1:8d9ae6e:  *
1:8d9ae6e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8d9ae6e:  *
1:8d9ae6e:  *  Unless required by applicable law or agreed to in writing, software
1:8d9ae6e:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:8d9ae6e:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d9ae6e:  *  See the License for the specific language governing permissions and
1:8d9ae6e:  *  limitations under the License.
1:8d9ae6e:  */
1:8d9ae6e: package org.apache.aries.blueprint.spring;
1:8d9ae6e: 
1:8d9ae6e: import java.io.IOException;
1:8d9ae6e: import java.io.InputStream;
1:8d9ae6e: import java.net.URL;
1:8d9ae6e: import java.util.ArrayList;
1:8d9ae6e: import java.util.HashMap;
1:8d9ae6e: import java.util.Hashtable;
1:8d9ae6e: import java.util.List;
1:8d9ae6e: import java.util.Map;
1:8d9ae6e: import java.util.Properties;
1:8d9ae6e: 
1:8d9ae6e: import org.apache.aries.blueprint.NamespaceHandler;
1:8d9ae6e: import org.apache.felix.utils.extender.Extension;
1:8d9ae6e: import org.osgi.framework.Bundle;
1:8d9ae6e: import org.osgi.framework.FrameworkUtil;
1:8d9ae6e: import org.osgi.framework.ServiceRegistration;
1:8d9ae6e: import org.springframework.beans.factory.BeanFactory;
1:8d9ae6e: import org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;
1:8d9ae6e: 
1:8d9ae6e: /**
1:8d9ae6e:  * Spring extension.
1:8d9ae6e:  * Each spring namespace is wrapped in a blueprint namespace.
1:8d9ae6e:  *
1:8d9ae6e:  * @see BlueprintNamespaceHandler
1:8d9ae6e:  */
1:8d9ae6e: public class SpringExtension implements Extension {
1:8d9ae6e: 
1:8d9ae6e:     public static final String SPRING_HANDLERS = "META-INF/spring.handlers";
1:8d9ae6e:     public static final String SPRING_SCHEMAS = "META-INF/spring.schemas";
1:8d9ae6e: 
1:8d9ae6e:     private final Bundle bundle;
1:8d9ae6e:     private final List<ServiceRegistration<NamespaceHandler>> registrations;
1:8d9ae6e: 
1:8d9ae6e:     public SpringExtension(Bundle bundle) {
1:8d9ae6e:         this.bundle = bundle;
1:8d9ae6e:         this.registrations = new ArrayList<ServiceRegistration<NamespaceHandler>>();
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public void start() throws Exception {
1:8d9ae6e:         Map<String, NamespaceHandler> handlers = new HashMap<String, NamespaceHandler>();
1:8d9ae6e:         Properties props = loadSpringHandlers();
1:8d9ae6e:         Properties schemas = loadSpringSchemas();
1:8d9ae6e:         for (String key : props.stringPropertyNames()) {
1:8d9ae6e:             String clazzName = props.getProperty(key);
1:8d9ae6e:             org.springframework.beans.factory.xml.NamespaceHandler springHandler
1:8d9ae6e:                     = (org.springframework.beans.factory.xml.NamespaceHandler) bundle.loadClass(clazzName).newInstance();
1:8d9ae6e:             NamespaceHandler wrapper = new BlueprintNamespaceHandler(bundle, schemas, springHandler);
1:8d9ae6e:             handlers.put(key, wrapper);
1:8d9ae6e:         }
1:8d9ae6e:         if (bundle == FrameworkUtil.getBundle(BeanFactory.class)) {
1:8d9ae6e:             org.springframework.beans.factory.xml.NamespaceHandler springHandler
1:8d9ae6e:                     = new BeansNamespaceHandler();
1:8d9ae6e:             NamespaceHandler wrapper = new BlueprintNamespaceHandler(bundle, schemas, springHandler);
1:8d9ae6e:             handlers.put(BeanDefinitionParserDelegate.BEANS_NAMESPACE_URI, wrapper);
1:8d9ae6e:         }
1:8d9ae6e:         for (Map.Entry<String, NamespaceHandler> entry : handlers.entrySet()) {
1:8d9ae6e:             Hashtable<String, String> svcProps = new Hashtable<String, String>();
1:8d9ae6e:             svcProps.put("osgi.service.blueprint.namespace", entry.getKey());
1:8d9ae6e:             ServiceRegistration<NamespaceHandler> reg =
1:8d9ae6e:                     bundle.getBundleContext().registerService(NamespaceHandler.class, entry.getValue(),
1:8d9ae6e:                             svcProps);
1:8d9ae6e:             registrations.add(reg);
1:8d9ae6e:         }
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     private Properties loadSpringHandlers() throws IOException {
1:8d9ae6e:         Properties props = new Properties();
1:8d9ae6e:         URL url = bundle.getResource(SPRING_HANDLERS);
1:8d9ae6e:         InputStream is = url.openStream();
1:8d9ae6e:         try {
1:8d9ae6e:             props.load(is);
1:8d9ae6e:         } finally {
1:8d9ae6e:             is.close();
1:8d9ae6e:         }
1:8d9ae6e:         return props;
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     private Properties loadSpringSchemas() throws IOException {
1:8d9ae6e:         Properties props = new Properties();
1:8d9ae6e:         URL url = bundle.getResource(SPRING_SCHEMAS);
1:8d9ae6e:         InputStream is = url.openStream();
1:8d9ae6e:         try {
1:8d9ae6e:             props.load(is);
1:8d9ae6e:         } finally {
1:8d9ae6e:             is.close();
1:8d9ae6e:         }
1:8d9ae6e:         return props;
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public void destroy() throws Exception {
1:8d9ae6e:         for (ServiceRegistration<NamespaceHandler> reg : registrations) {
1:8d9ae6e:             reg.unregister();
1:8d9ae6e:         }
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:55084bf
/////////////////////////////////////////////////////////////////////////
commit:8d9ae6e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.spring;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.felix.utils.extender.Extension;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.ServiceRegistration;
1: import org.springframework.beans.factory.BeanFactory;
1: import org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;
1: 
1: /**
1:  * Spring extension.
1:  * Each spring namespace is wrapped in a blueprint namespace.
1:  *
1:  * @see BlueprintNamespaceHandler
1:  */
1: public class SpringExtension implements Extension {
1: 
1:     public static final String SPRING_HANDLERS = "META-INF/spring.handlers";
1:     public static final String SPRING_SCHEMAS = "META-INF/spring.schemas";
1: 
1:     private final Bundle bundle;
1:     private final List<ServiceRegistration<NamespaceHandler>> registrations;
1: 
1:     public SpringExtension(Bundle bundle) {
1:         this.bundle = bundle;
1:         this.registrations = new ArrayList<ServiceRegistration<NamespaceHandler>>();
1:     }
1: 
1:     @Override
1:     public void start() throws Exception {
1:         Map<String, NamespaceHandler> handlers = new HashMap<String, NamespaceHandler>();
1:         Properties props = loadSpringHandlers();
1:         Properties schemas = loadSpringSchemas();
1:         for (String key : props.stringPropertyNames()) {
1:             String clazzName = props.getProperty(key);
1:             org.springframework.beans.factory.xml.NamespaceHandler springHandler
1:                     = (org.springframework.beans.factory.xml.NamespaceHandler) bundle.loadClass(clazzName).newInstance();
0:             springHandler.init();
1:             NamespaceHandler wrapper = new BlueprintNamespaceHandler(bundle, schemas, springHandler);
1:             handlers.put(key, wrapper);
1:         }
1:         if (bundle == FrameworkUtil.getBundle(BeanFactory.class)) {
1:             org.springframework.beans.factory.xml.NamespaceHandler springHandler
1:                     = new BeansNamespaceHandler();
1:             NamespaceHandler wrapper = new BlueprintNamespaceHandler(bundle, schemas, springHandler);
1:             handlers.put(BeanDefinitionParserDelegate.BEANS_NAMESPACE_URI, wrapper);
1:         }
1:         for (Map.Entry<String, NamespaceHandler> entry : handlers.entrySet()) {
1:             Hashtable<String, String> svcProps = new Hashtable<String, String>();
1:             svcProps.put("osgi.service.blueprint.namespace", entry.getKey());
1:             ServiceRegistration<NamespaceHandler> reg =
1:                     bundle.getBundleContext().registerService(NamespaceHandler.class, entry.getValue(),
1:                             svcProps);
1:             registrations.add(reg);
1:         }
1:     }
1: 
1:     private Properties loadSpringHandlers() throws IOException {
1:         Properties props = new Properties();
1:         URL url = bundle.getResource(SPRING_HANDLERS);
1:         InputStream is = url.openStream();
1:         try {
1:             props.load(is);
1:         } finally {
1:             is.close();
1:         }
1:         return props;
1:     }
1: 
1:     private Properties loadSpringSchemas() throws IOException {
1:         Properties props = new Properties();
1:         URL url = bundle.getResource(SPRING_SCHEMAS);
1:         InputStream is = url.openStream();
1:         try {
1:             props.load(is);
1:         } finally {
1:             is.close();
1:         }
1:         return props;
1:     }
1: 
1:     @Override
1:     public void destroy() throws Exception {
1:         for (ServiceRegistration<NamespaceHandler> reg : registrations) {
1:             reg.unregister();
1:         }
1:     }
1: 
1: }
============================================================================