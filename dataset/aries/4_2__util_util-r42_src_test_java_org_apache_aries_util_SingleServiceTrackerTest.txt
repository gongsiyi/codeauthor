1:c6fe749: /*
1:c6fe749:  * Licensed to the Apache Software Foundation (ASF) under one
1:c6fe749:  * or more contributor license agreements.  See the NOTICE file
1:c6fe749:  * distributed with this work for additional information
1:c6fe749:  * regarding copyright ownership.  The ASF licenses this file
1:c6fe749:  * to you under the Apache License, Version 2.0 (the
1:c6fe749:  * "License"); you may not use this file except in compliance
1:c6fe749:  * with the License.  You may obtain a copy of the License at
1:c6fe749:  *
1:c6fe749:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c6fe749:  *
1:c6fe749:  * Unless required by applicable law or agreed to in writing,
1:c6fe749:  * software distributed under the License is distributed on an
1:c6fe749:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c6fe749:  * KIND, either express or implied.  See the License for the
1:c6fe749:  * specific language governing permissions and limitations
1:c6fe749:  * under the License.
1:c6fe749:  */
1:c6fe749: package org.apache.aries.util;
1:c6fe749: 
1:30f1ccc: import java.util.Arrays;
1:30f1ccc: import java.util.Dictionary;
1:30f1ccc: import java.util.Hashtable;
1:30f1ccc: 
1:c6fe749: import org.apache.aries.mocks.BundleContextMock;
1:c6fe749: import org.apache.aries.unittest.mocks.MethodCall;
1:c6fe749: import org.apache.aries.unittest.mocks.Skeleton;
1:047a2ae: import org.apache.aries.util.tracker.SingleServiceTracker;
1:047a2ae: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1:c6fe749: import org.junit.After;
1:c6fe749: import org.junit.Before;
1:c6fe749: import org.junit.Test;
1:c6fe749: import org.osgi.framework.BundleContext;
1:30f1ccc: import org.osgi.framework.InvalidSyntaxException;
1:c6fe749: 
1:c6fe749: import static org.junit.Assert.*;
1:c6fe749: 
1:c6fe749: public class SingleServiceTrackerTest {
1:c6fe749:   private BundleContext ctx;
1:c6fe749:   private SingleServiceTracker<String> sut;
1:c6fe749:   private SingleServiceTracker.SingleServiceListener listener;
1:c6fe749:   
1:c6fe749:   @Before
1:c6fe749:   public void setup() {
1:c6fe749:     ctx = Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:c6fe749:   }
1:c6fe749:   
1:c6fe749:   @After
1:c6fe749:   public void teardown() {
1:c6fe749:     BundleContextMock.clear();
1:c6fe749:   }
1:c6fe749:   
1:c6fe749:   private void createSut() {
1:30f1ccc: 	  createSut(null);
1:30f1ccc:   }
1:30f1ccc:   
1:30f1ccc:   private void createSut(String filter) {
1:c6fe749:     listener = Skeleton.newMock(SingleServiceListener.class);
1:30f1ccc:     try {
1:30f1ccc: 		sut = new SingleServiceTracker<String>(ctx, String.class, filter, listener);
1:30f1ccc: 	} catch (InvalidSyntaxException e) {
1:30f1ccc: 		throw new RuntimeException(e);
1:30f1ccc: 	}
1:c6fe749:     sut.open();
1:c6fe749:   }
1:c6fe749:   
1:c6fe749:   @Test
1:30f1ccc:   public void testBeforeTheFactService() {
1:30f1ccc: 	  ctx.registerService("java.lang.String", "uno", null);
1:30f1ccc: 	  createSut();
1:30f1ccc: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1:30f1ccc: 	  assertEquals("uno", sut.getService());
1:30f1ccc:   }
1:59d7e60:   
1:30f1ccc:   @Test
1:30f1ccc:   public void testBeforeTheFactServiceDoubleRegistration() {
1:30f1ccc: 	  testBeforeTheFactService();
1:30f1ccc: 	  
1:30f1ccc: 	  ctx.registerService("java.lang.String", "due", null);
1:30f1ccc: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1:30f1ccc: 	  assertEquals("uno", sut.getService());
1:30f1ccc:   }
1:30f1ccc:   
1:30f1ccc:   @Test
1:30f1ccc:   public void testBeforeTheFactChoice() {
1:30f1ccc: 	  ctx.registerService("java.lang.String", "uno", null);
1:30f1ccc: 	  ctx.registerService("java.lang.String", "due", null);
1:30f1ccc: 	  createSut();
1:30f1ccc: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1:30f1ccc: 	  assertEquals("uno", sut.getService());
1:30f1ccc:   }
1:30f1ccc:   
1:30f1ccc:   @Test
1:30f1ccc:   public void testBeforeTheFactChoiceWithPropertiesAndFilterWithFirstMatch() {
1:30f1ccc: 	  Dictionary<String, String> props = new Hashtable<String, String>();
1:30f1ccc: 	  props.put("foo", "bar");
1:30f1ccc: 	  ctx.registerService("java.lang.String", "uno", props);
1:30f1ccc: 	  ctx.registerService("java.lang.String", "due", null);
1:30f1ccc: 	  createSut("(foo=bar)");
1:30f1ccc: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1:30f1ccc: 	  assertEquals("uno", sut.getService());
1:30f1ccc:   }
1:30f1ccc:   
1:30f1ccc:   @Test
1:30f1ccc:   public void testBeforeTheFactChoiceWithPropertiesAndFilterWithSecondMatch() {
1:30f1ccc: 	  Dictionary<String, String> props = new Hashtable<String, String>();
1:30f1ccc: 	  props.put("foo", "bar");
1:30f1ccc: 	  ctx.registerService("java.lang.String", "uno", null);
1:30f1ccc: 	  ctx.registerService("java.lang.String", "due", props);
1:30f1ccc: 	  createSut("(foo=bar)");
1:30f1ccc: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1:30f1ccc: 	  assertEquals("due", sut.getService());
1:30f1ccc:   }
1:30f1ccc:   
1:30f1ccc:   @Test
1:c6fe749:   public void testAfterTheFactService() 
1:c6fe749:   {
1:c6fe749:     createSut();
1:c6fe749:     Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1:30f1ccc:     
1:c6fe749:     ctx.registerService("java.lang.String", "uno", null);
1:c6fe749:     Skeleton.getSkeleton(listener).assertCalled(new MethodCall(SingleServiceListener.class, "serviceFound"));
1:c6fe749:     
1:c6fe749:     assertEquals("uno", sut.getService());
1:c6fe749:   }
1:c6fe749:   
1:c6fe749:   @Test
1:c6fe749:   public void testDoubleRegistration() {
1:c6fe749:     testAfterTheFactService();
1:c6fe749:     
1:c6fe749:     Skeleton.getSkeleton(listener).clearMethodCalls();
1:c6fe749:     ctx.registerService("java.lang.String", "due", null);
1:c6fe749:     
1:c6fe749:     Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1:c6fe749:     assertEquals("uno", sut.getService());
1:c6fe749:   }
1:c6fe749:   
1:c6fe749:   @Test
1:59d7e60:   public void testAfterTheFactChoiceWithPropertiesAndFilterWithSecondMatch() {
1:59d7e60: 	  
1:59d7e60: 	  createSut("(foo=bar)");
1:59d7e60: 	  Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1:59d7e60: 	  
1:59d7e60: 	  ctx.registerService("java.lang.String", "uno", null);
1:59d7e60: 	  Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1:59d7e60: 
1:59d7e60: 	  Dictionary<String, String> props = new Hashtable<String, String>();
1:59d7e60: 	  props.put("foo", "bar");
1:59d7e60: 	  ctx.registerService("java.lang.String", "due", props);
1:59d7e60: 	  
1:59d7e60: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1:59d7e60: 	  assertEquals("due", sut.getService());
1:59d7e60:   }
1:c6fe749:   
1:59d7e60:   @Test
1:c6fe749:   public void testRegistrationWhileClosed() {
1:c6fe749:     createSut();
1:c6fe749:     sut.close();
1:c6fe749:     
1:c6fe749:     ctx.registerService("java.lang.String", "uno", null);
1:c6fe749:     Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1:c6fe749:     
1:c6fe749:     assertNull(sut.getService());
1:c6fe749:   }
1:c6fe749:   
1:c6fe749: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:59d7e60
/////////////////////////////////////////////////////////////////////////
1:   public void testAfterTheFactChoiceWithPropertiesAndFilterWithSecondMatch() {
1: 	  
1: 	  createSut("(foo=bar)");
1: 	  Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1: 	  
1: 	  ctx.registerService("java.lang.String", "uno", null);
1: 	  Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1: 
1: 	  Dictionary<String, String> props = new Hashtable<String, String>();
1: 	  props.put("foo", "bar");
1: 	  ctx.registerService("java.lang.String", "due", props);
1: 	  
1: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1: 	  assertEquals("due", sut.getService());
1:   }
1:   
1:   @Test
commit:30f1ccc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.InvalidSyntaxException;
/////////////////////////////////////////////////////////////////////////
1: 	  createSut(null);
1:   }
1:   
1:   private void createSut(String filter) {
1:     try {
1: 		sut = new SingleServiceTracker<String>(ctx, String.class, filter, listener);
1: 	} catch (InvalidSyntaxException e) {
1: 		throw new RuntimeException(e);
1: 	}
1:   public void testBeforeTheFactService() {
1: 	  ctx.registerService("java.lang.String", "uno", null);
1: 	  createSut();
1: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1: 	  assertEquals("uno", sut.getService());
1:   }
1:   
1:   @Test
1:   public void testBeforeTheFactServiceDoubleRegistration() {
1: 	  testBeforeTheFactService();
1: 	  
1: 	  ctx.registerService("java.lang.String", "due", null);
1: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1: 	  assertEquals("uno", sut.getService());
1:   }
1:   
1:   @Test
1:   public void testBeforeTheFactChoice() {
1: 	  ctx.registerService("java.lang.String", "uno", null);
1: 	  ctx.registerService("java.lang.String", "due", null);
1: 	  createSut();
1: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1: 	  assertEquals("uno", sut.getService());
1:   }
1:   
1:   @Test
1:   public void testBeforeTheFactChoiceWithPropertiesAndFilterWithFirstMatch() {
1: 	  Dictionary<String, String> props = new Hashtable<String, String>();
1: 	  props.put("foo", "bar");
1: 	  ctx.registerService("java.lang.String", "uno", props);
1: 	  ctx.registerService("java.lang.String", "due", null);
1: 	  createSut("(foo=bar)");
1: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1: 	  assertEquals("uno", sut.getService());
1:   }
1:   
1:   @Test
1:   public void testBeforeTheFactChoiceWithPropertiesAndFilterWithSecondMatch() {
1: 	  Dictionary<String, String> props = new Hashtable<String, String>();
1: 	  props.put("foo", "bar");
1: 	  ctx.registerService("java.lang.String", "uno", null);
1: 	  ctx.registerService("java.lang.String", "due", props);
1: 	  createSut("(foo=bar)");
1: 	  Skeleton.getSkeleton(listener).assertCalled(Arrays.asList(new MethodCall(SingleServiceListener.class, "serviceFound")), true);
1: 	  assertEquals("due", sut.getService());
1:   }
1:   
1:   @Test
commit:047a2ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.tracker.SingleServiceTracker;
1: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:b6c4135
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.tracker.SingleServiceTracker;
0: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
commit:c6fe749
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util;
1: 
1: import org.apache.aries.mocks.BundleContextMock;
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
0: import org.apache.aries.util.SingleServiceTracker.SingleServiceListener;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class SingleServiceTrackerTest {
1:   private BundleContext ctx;
1:   private SingleServiceTracker<String> sut;
1:   private SingleServiceTracker.SingleServiceListener listener;
1:   
1:   @Before
1:   public void setup() {
1:     ctx = Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:   }
1:   
1:   @After
1:   public void teardown() {
1:     BundleContextMock.clear();
1:   }
1:   
1:   private void createSut() {
1:     listener = Skeleton.newMock(SingleServiceListener.class);
0:     sut = new SingleServiceTracker<String>(ctx, String.class, listener);
1:     sut.open();
1:   }
1:   
1:   @Test
1:   public void testAfterTheFactService() 
1:   {
1:     createSut();
1:     Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1:     
1:     ctx.registerService("java.lang.String", "uno", null);
1:     Skeleton.getSkeleton(listener).assertCalled(new MethodCall(SingleServiceListener.class, "serviceFound"));
1:     
1:     assertEquals("uno", sut.getService());
1:   }
1:   
1:   @Test
1:   public void testDoubleRegistration() {
1:     testAfterTheFactService();
1:     
1:     Skeleton.getSkeleton(listener).clearMethodCalls();
1:     ctx.registerService("java.lang.String", "due", null);
1:     
1:     Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1:     assertEquals("uno", sut.getService());
1:   }
1:   
1:   @Test
1:   public void testRegistrationWhileClosed() {
1:     createSut();
1:     sut.close();
1:     
1:     ctx.registerService("java.lang.String", "uno", null);
1:     Skeleton.getSkeleton(listener).assertSkeletonNotCalled();
1:     
1:     assertNull(sut.getService());
1:   }
1:   
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:c827e88
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.SingleServiceTracker.SingleServiceListener;
============================================================================