1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:d299aa1: package org.apache.aries.subsystem.itests;
2:d299aa1: 
1:d299aa1: import static org.junit.Assert.assertEquals;
1:9df8274: import static org.junit.Assert.assertTrue;
1:2b251bb: import static org.junit.Assert.fail;
1:d299aa1: 
1:f9e608f: import java.io.File;
1:f9e608f: import java.io.IOException;
1:ed5f3dc: import java.util.HashMap;
1:ed5f3dc: import java.util.Map;
1:f9e608f: 
1:8481849: import org.eclipse.equinox.region.Region;
1:8481849: import org.eclipse.equinox.region.RegionDigraph;
1:8481849: import org.eclipse.equinox.region.RegionFilter;
1:d299aa1: import org.junit.Test;
1:d299aa1: import org.osgi.framework.Bundle;
1:5725f09: import org.osgi.framework.BundleException;
1:391a1aa: import org.osgi.framework.ServiceEvent;
1:d299aa1: import org.osgi.framework.Version;
1:d299aa1: import org.osgi.service.subsystem.Subsystem;
1:ed5f3dc: import org.osgi.service.subsystem.SubsystemConstants;
1:d299aa1: 
1:d299aa1: public class RootSubsystemTest extends SubsystemTest {
1:ed5f3dc: 	/*
1:ed5f3dc: 	 * Subsystem-SymbolicName: application.a.esa
1:ed5f3dc: 	 * Subsystem-Content: bundle.a.jar
1:ed5f3dc: 	 */
1:ed5f3dc: 	private static final String APPLICATION_A = "application.a.esa";
1:ed5f3dc: 	/*
1:ed5f3dc: 	 * Bundle-SymbolicName: bundle.a.jar
1:ed5f3dc: 	 * Import-Package: org.osgi.framework
1:ed5f3dc: 	 */
1:ed5f3dc: 	private static final String BUNDLE_A = "bundle.a.jar";
1:f9e608f: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:f9e608f: 		createBundleA();
1:ed5f3dc: 		createApplicationA();
1:f9e608f: 	}
1:f9e608f: 	
1:ed5f3dc: 	private static void createApplicationA() throws IOException {
1:ed5f3dc: 		createApplicationAManifest();
1:ed5f3dc: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1:ed5f3dc: 	}
1:ed5f3dc: 	
1:ed5f3dc: 	private static void createApplicationAManifest() throws IOException {
1:ed5f3dc: 		Map<String, String> attributes = new HashMap<String, String>();
1:ed5f3dc: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:ed5f3dc: 		createManifest(APPLICATION_A + ".mf", attributes);
1:ed5f3dc: 	}
1:ed5f3dc: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), importPackage("org.osgi.framework"));
1:f9e608f: 	}
1:f9e608f: 	
1:d299aa1: 	// TODO Test root subsystem headers.
1:d299aa1: 	
2:d299aa1: 	@Test
1:f9e608f: 	public void testDoNotStartExtraneousRootRegionBundles() throws Exception {
1:f9e608f: 		bundleContext.installBundle(new File(BUNDLE_A).toURI().toURL().toString());
1:f9e608f: 		getSubsystemCoreBundle().stop();
1:f9e608f: 		getSubsystemCoreBundle().start();
1:57b6627: 		Bundle bundleA = context().getBundleByName(BUNDLE_A);
1:9df8274: 		assertTrue("Extraneous root region bundle should not be started", (bundleA.getState() & (Bundle.INSTALLED | Bundle.RESOLVED)) != 0);
1:f9e608f: 	}
1:f9e608f: 	
1:f9e608f: 	@Test
1:d299aa1: 	public void testId() {
1:d299aa1: 		assertEquals("Wrong root ID", getRootSubsystem().getSubsystemId(), 0);
2:d299aa1: 	}
1:d299aa1: 	
1:d299aa1: 	@Test
1:d299aa1: 	public void testLocation() {
1:d299aa1: 		assertEquals("Wrong root location", getRootSubsystem().getLocation(), "subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&Subsystem-Version=1.0.0");
1:d299aa1: 	}
1:d299aa1: 	
1:d299aa1: 	@Test
1:5725f09: 	public void testRegionContextBundle() throws BundleException {
1:5725f09: 		assertRegionContextBundle(getRootSubsystem());
1:5725f09: 		getSubsystemCoreBundle().stop();
1:5725f09: 		getSubsystemCoreBundle().start();
1:5725f09: 		assertRegionContextBundle(getRootSubsystem());
1:5725f09: 	}
1:5725f09: 	
1:5725f09: 	@Test
1:bda6868: 	public void testServiceEvents() throws Exception {
2:d299aa1: 		Subsystem root = getRootSubsystem();
2:d299aa1: 		Bundle core = getSubsystemCoreBundle();
1:6abbe8d: 		// TODO Temporary(?) workaround to allow time for any tardy service
1:6abbe8d: 		// events to arrive so they can be cleared. So far, this sleep has only
1:6abbe8d: 		// been necessary on the IBM 6.0 64-bit JDK.
1:6abbe8d: 		Thread.sleep(1000);
1:6abbe8d: 		subsystemEvents.clear();
1:d299aa1: 		core.stop();
1:bda6868: 		assertServiceEventsStop(root);
1:d299aa1: 		core.uninstall();
1:d6eb080: 		core = bundleContext.installBundle(normalizeBundleLocation(core));
1:d299aa1: 		core.start();
1:391a1aa: 		// There should be install events since the persisted root subsystem was
1:391a1aa: 		// deleted when the subsystems implementation bundle was uninstalled.
2:bda6868: 		assertServiceEventsInstall(root);
2:bda6868: 		assertServiceEventsResolve(root);
1:bda6868: 		assertServiceEventsStart(root);
1:d299aa1: 		core.stop();
1:bda6868: 		assertServiceEventsStop(root);
1:d299aa1: 		core.start();
1:391a1aa: 		// There should be no install events or RESOLVING event since there
1:391a1aa: 		// should be a persisted root subsystem already in the RESOLVED state.
1:391a1aa: 		assertServiceEventResolved(root, ServiceEvent.REGISTERED);
1:bda6868: 		assertServiceEventsStart(root);
1:d299aa1: 	}
1:d299aa1: 	
1:d299aa1: 	@Test
1:d299aa1: 	public void testSymbolicName() {
1:d299aa1: 		assertEquals("Wrong root symbolic name", getRootSubsystem().getSymbolicName(), "org.osgi.service.subsystem.root");
1:d299aa1: 	}
1:d299aa1: 	
1:d299aa1: 	@Test
1:2b251bb: 	public void testUninstallRootRegionBundleWithNoBundleEventHook() throws Exception {
1:2b251bb: 		// Install an extraneous bundle into the root region. The bundle will
1:2b251bb: 		// be recorded in the root subsystem's persistent memory.
1:2b251bb: 		Bundle bundleA = bundleContext.installBundle(new File(BUNDLE_A).toURI().toURL().toString());
1:2b251bb: 		try {
1:2b251bb: 			Bundle core = getSubsystemCoreBundle();
1:2b251bb: 			// Stop the subsystems bundle in order to unregister the bundle
1:2b251bb: 			// event hook.
1:2b251bb: 			core.stop();
1:2b251bb: 			// Uninstall the bundle so it won't be there on restart.
1:2b251bb: 			bundleA.uninstall();
1:2b251bb: 			try {
1:2b251bb: 				// Start the subsystems bundle and ensure the root subsystem
1:2b251bb: 				// recovers from the uninstalled bundle being in persistent
1:2b251bb: 				// memory.
1:2b251bb: 				core.start();
1:2b251bb: 			}
1:2b251bb: 			catch (BundleException e) {
1:2b251bb: 				fail("Could not start subsystems bundle after uninstalling a root region bundle with no bundle event hook registered");
1:2b251bb: 			}
1:2b251bb: 		}
1:2b251bb: 		finally {
1:2b251bb: 			if (Bundle.UNINSTALLED != bundleA.getState())
1:2b251bb: 				bundleA.uninstall();
1:2b251bb: 		}
1:2b251bb: 	}
1:2b251bb: 	
1:2b251bb: 	@Test
1:d299aa1: 	public void testVersion() {
1:d299aa1: 		assertEquals("Wrong root version", getRootSubsystem().getVersion(), Version.parseVersion("1.0.0"));
1:d299aa1: 	}
1:8481849: 	
1:8481849: 	/*
1:8481849: 	 * The root subsystem should be associated with the region in which the
1:8481849: 	 * subsystems implementation bundle is installed.
1:8481849: 	 */
1:8481849: 	@Test
1:8481849: 	public void testRegion() throws Exception {
1:57b6627: 		RegionDigraph digraph = context().getService(RegionDigraph.class);
1:8481849: 		Bundle core = getSubsystemCoreBundle();
1:8481849: 		Region kernel = digraph.getRegion(core);
1:8481849: 		Subsystem root = getRootSubsystem();
1:8481849: 		Bundle rootRegionContext = root.getBundleContext().getBundle();
1:8481849: 		// Get the region containing the subsystem's region context bundle, 
1:8481849: 		// which is the same thing as getting the region with which the 
1:8481849: 		// subsystem is associated.
1:8481849: 		Region region = digraph.getRegion(root.getBundleContext().getBundle());
1:8481849: 		assertEquals("Wrong region", kernel, region);
1:8481849: 		// Uninstall the core bundle to remove the persisted root subsystem.
1:8481849: 		core.uninstall();
1:8481849: 		// Clean up the lingering region context bundle.
1:8481849: 		rootRegionContext.uninstall();
1:8481849: 		// Create a new region and install the core bundle into it.
1:8481849: 		Region user = digraph.createRegion("user");
1:8481849: 		// Allow everything from the kernel region into the user region so the 
1:8481849: 		// core bundle will resolve.
1:8481849: 		user.connectRegion(
1:8481849: 				kernel, 
1:8481849: 				digraph.createRegionFilterBuilder().allowAll(RegionFilter.VISIBLE_ALL_NAMESPACE).build());
1:8481849: 		// Allow everything from the user region into the kernel region so the
1:8481849: 		// root subsystem service can be found.
1:8481849: 		kernel.connectRegion(
1:8481849: 				user, 
1:8481849: 				digraph.createRegionFilterBuilder().allowAll(RegionFilter.VISIBLE_ALL_NAMESPACE).build());
1:8481849: 		core = user.installBundle(normalizeBundleLocation(core.getLocation()));
1:8481849: 		user = digraph.getRegion(core);
1:8481849: 		core.start();
1:8481849: 		root = getRootSubsystem();
1:8481849: 		region = digraph.getRegion(root.getBundleContext().getBundle());
1:8481849: 		// The root subsystem should now be in the new region.
1:8481849: 		assertEquals("Wrong region", user, region);
1:ed5f3dc: 		// Extra test. Install application A into the root region (user) and 
1:ed5f3dc: 		// make sure it resolves. Although the system bundle is in the kernel 
1:ed5f3dc: 		// region and not a constituent of the root subsystem, the capability 
1:ed5f3dc: 		// should still be found and used.
1:ed5f3dc: 		try {
1:ed5f3dc: 			Subsystem applicationA = installSubsystemFromFile(root, APPLICATION_A);
1:ed5f3dc: 			uninstallSubsystemSilently(applicationA);
1:ed5f3dc: 		}
1:ed5f3dc: 		catch (Exception e) {
1:ed5f3dc: 			e.printStackTrace();
1:ed5f3dc: 			fail("Subsystem should have installed");
1:ed5f3dc: 		}
1:8481849: 	}
1:d299aa1: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:9df8274
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: 		assertTrue("Extraneous root region bundle should not be started", (bundleA.getState() & (Bundle.INSTALLED | Bundle.RESOLVED)) != 0);
commit:ed5f3dc
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Import-Package: org.osgi.framework
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
/////////////////////////////////////////////////////////////////////////
1: 		createApplicationA();
1: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, "org.osgi.framework");
0: 		createBundle(BUNDLE_A, headers);
/////////////////////////////////////////////////////////////////////////
1: 		// Extra test. Install application A into the root region (user) and 
1: 		// make sure it resolves. Although the system bundle is in the kernel 
1: 		// region and not a constituent of the root subsystem, the capability 
1: 		// should still be found and used.
1: 		try {
1: 			Subsystem applicationA = installSubsystemFromFile(root, APPLICATION_A);
1: 			uninstallSubsystemSilently(applicationA);
1: 		}
1: 		catch (Exception e) {
1: 			e.printStackTrace();
1: 			fail("Subsystem should have installed");
1: 		}
commit:8481849
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.equinox.region.Region;
1: import org.eclipse.equinox.region.RegionDigraph;
1: import org.eclipse.equinox.region.RegionFilter;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/*
1: 	 * The root subsystem should be associated with the region in which the
1: 	 * subsystems implementation bundle is installed.
1: 	 */
1: 	@Test
1: 	public void testRegion() throws Exception {
0: 		RegionDigraph digraph = getOsgiService(RegionDigraph.class);
1: 		Bundle core = getSubsystemCoreBundle();
1: 		Region kernel = digraph.getRegion(core);
1: 		Subsystem root = getRootSubsystem();
1: 		Bundle rootRegionContext = root.getBundleContext().getBundle();
1: 		// Get the region containing the subsystem's region context bundle, 
1: 		// which is the same thing as getting the region with which the 
1: 		// subsystem is associated.
1: 		Region region = digraph.getRegion(root.getBundleContext().getBundle());
1: 		assertEquals("Wrong region", kernel, region);
1: 		// Uninstall the core bundle to remove the persisted root subsystem.
1: 		core.uninstall();
1: 		// Clean up the lingering region context bundle.
1: 		rootRegionContext.uninstall();
1: 		// Create a new region and install the core bundle into it.
1: 		Region user = digraph.createRegion("user");
1: 		// Allow everything from the kernel region into the user region so the 
1: 		// core bundle will resolve.
1: 		user.connectRegion(
1: 				kernel, 
1: 				digraph.createRegionFilterBuilder().allowAll(RegionFilter.VISIBLE_ALL_NAMESPACE).build());
1: 		// Allow everything from the user region into the kernel region so the
1: 		// root subsystem service can be found.
1: 		kernel.connectRegion(
1: 				user, 
1: 				digraph.createRegionFilterBuilder().allowAll(RegionFilter.VISIBLE_ALL_NAMESPACE).build());
1: 		core = user.installBundle(normalizeBundleLocation(core.getLocation()));
1: 		user = digraph.getRegion(core);
1: 		core.start();
1: 		root = getRootSubsystem();
1: 		region = digraph.getRegion(root.getBundleContext().getBundle());
1: 		// The root subsystem should now be in the new region.
1: 		assertEquals("Wrong region", user, region);
1: 	}
commit:6abbe8d
/////////////////////////////////////////////////////////////////////////
1: 		// TODO Temporary(?) workaround to allow time for any tardy service
1: 		// events to arrive so they can be cleared. So far, this sleep has only
1: 		// been necessary on the IBM 6.0 64-bit JDK.
1: 		Thread.sleep(1000);
1: 		subsystemEvents.clear();
commit:2b251bb
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1: 	public void testUninstallRootRegionBundleWithNoBundleEventHook() throws Exception {
1: 		// Install an extraneous bundle into the root region. The bundle will
1: 		// be recorded in the root subsystem's persistent memory.
1: 		Bundle bundleA = bundleContext.installBundle(new File(BUNDLE_A).toURI().toURL().toString());
1: 		try {
1: 			Bundle core = getSubsystemCoreBundle();
1: 			// Stop the subsystems bundle in order to unregister the bundle
1: 			// event hook.
1: 			core.stop();
1: 			// Uninstall the bundle so it won't be there on restart.
1: 			bundleA.uninstall();
1: 			try {
1: 				// Start the subsystems bundle and ensure the root subsystem
1: 				// recovers from the uninstalled bundle being in persistent
1: 				// memory.
1: 				core.start();
1: 			}
1: 			catch (BundleException e) {
1: 				fail("Could not start subsystems bundle after uninstalling a root region bundle with no bundle event hook registered");
1: 			}
1: 		}
1: 		finally {
1: 			if (Bundle.UNINSTALLED != bundleA.getState())
1: 				bundleA.uninstall();
1: 		}
1: 	}
1: 	
1: 	@Test
commit:f9e608f
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: 
0: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
0: 	private static final String BUNDLE_A = "bundle.a";
1: 	
0: 	private static boolean createdTestFiles;
0: 	@Before
0: 	public static void createTestFiles() throws Exception {
0: 		if (createdTestFiles)
0: 			return;
1: 		createBundleA();
0: 		createdTestFiles = true;
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		createBundle(BUNDLE_A);
1: 	}
1: 	
1: 	public void testDoNotStartExtraneousRootRegionBundles() throws Exception {
1: 		bundleContext.installBundle(new File(BUNDLE_A).toURI().toURL().toString());
1: 		getSubsystemCoreBundle().stop();
1: 		getSubsystemCoreBundle().start();
0: 		Bundle bundleA = findBundleBySymbolicName(BUNDLE_A);
0: 		assertEquals("Extraneous root region bundle should not be started", Bundle.INSTALLED, bundleA.getState());
1: 	}
1: 	
1: 	@Test
commit:1669633
/////////////////////////////////////////////////////////////////////////
0: 		core = bundleContext.installBundle(core.getLocation());
commit:bf3a6bc
/////////////////////////////////////////////////////////////////////////
0: 		core = installBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.core", "1.0.0-SNAPSHOT");
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceEvent;
/////////////////////////////////////////////////////////////////////////
1: 		// There should be install events since the persisted root subsystem was
1: 		// deleted when the subsystems implementation bundle was uninstalled.
1: 		// There should be no install events or RESOLVING event since there
1: 		// should be a persisted root subsystem already in the RESOLVED state.
1: 		assertServiceEventResolved(root, ServiceEvent.REGISTERED);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:bda6868
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void testServiceEvents() throws Exception {
1: 		assertServiceEventsStop(root);
1: 		assertServiceEventsInstall(root);
1: 		assertServiceEventsResolve(root);
1: 		assertServiceEventsStart(root);
1: 		assertServiceEventsStop(root);
1: 		assertServiceEventsInstall(root);
1: 		assertServiceEventsResolve(root);
1: 		assertServiceEventsStart(root);
commit:5725f09
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleException;
/////////////////////////////////////////////////////////////////////////
1: 	public void testRegionContextBundle() throws BundleException {
1: 		assertRegionContextBundle(getRootSubsystem());
1: 		getSubsystemCoreBundle().stop();
1: 		getSubsystemCoreBundle().start();
1: 		assertRegionContextBundle(getRootSubsystem());
1: 	}
1: 	
1: 	@Test
commit:d299aa1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.Version;
1: import org.osgi.service.subsystem.Subsystem;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class RootSubsystemTest extends SubsystemTest {
1: 	// TODO Test root subsystem headers.
1: 	
1: 	@Test
1: 	public void testId() {
1: 		assertEquals("Wrong root ID", getRootSubsystem().getSubsystemId(), 0);
1: 	}
1: 	
1: 	@Test
1: 	public void testLocation() {
1: 		assertEquals("Wrong root location", getRootSubsystem().getLocation(), "subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&Subsystem-Version=1.0.0");
1: 	}
1: 	
1: 	@Test
0: 	public void testServiceEventsFresh() throws Exception {
1: 		Subsystem root = getRootSubsystem();
1: 		Bundle core = getSubsystemCoreBundle();
1: 		core.stop();
0: 		assertEvent(root, Subsystem.State.STOPPING, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		assertEvent(root, Subsystem.State.RESOLVED, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		// Don't forget about the unregistering event, which will have the same state as before.
0: 		assertEvent(root, Subsystem.State.RESOLVED, subsystemEvents.poll(root.getSubsystemId(), 5000), ServiceEvent.UNREGISTERING);
1: 		core.uninstall();
0: 		core = installBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.core");
1: 		core.start();
0: 		// When starting for the very first time, the root subsystem should transition through all states.
0: 		assertEvent(root, Subsystem.State.INSTALLING, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		assertEvent(root, Subsystem.State.INSTALLED, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		assertEvent(root, Subsystem.State.RESOLVING, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		assertEvent(root, Subsystem.State.RESOLVED, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		assertEvent(root, Subsystem.State.STARTING, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		assertEvent(root, Subsystem.State.ACTIVE, subsystemEvents.poll(root.getSubsystemId(), 5000));
1: 	}
1: 	
1: 	@Test
0: 	public void testServiceEventsPersisted() throws Exception {
1: 		Subsystem root = getRootSubsystem();
1: 		Bundle core = getSubsystemCoreBundle();
1: 		core.stop();
0: 		assertEvent(root, Subsystem.State.STOPPING, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		assertEvent(root, Subsystem.State.RESOLVED, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		// Don't forget about the unregistering event, which will have the same state as before.
0: 		assertEvent(root, Subsystem.State.RESOLVED, subsystemEvents.poll(root.getSubsystemId(), 5000), ServiceEvent.UNREGISTERING);
1: 		core.start();
0: 		// On subsequent, post-installation starts, the root subsystem should start in the resolved state.
0: 		assertEvent(root, Subsystem.State.RESOLVED, subsystemEvents.poll(root.getSubsystemId(), 5000), ServiceEvent.REGISTERED);
0: 		assertEvent(root, Subsystem.State.STARTING, subsystemEvents.poll(root.getSubsystemId(), 5000));
0: 		assertEvent(root, Subsystem.State.ACTIVE, subsystemEvents.poll(root.getSubsystemId(), 5000));
1: 	}
1: 	
1: 	@Test
1: 	public void testSymbolicName() {
1: 		assertEquals("Wrong root symbolic name", getRootSubsystem().getSymbolicName(), "org.osgi.service.subsystem.root");
1: 	}
1: 	
1: 	@Test
1: 	public void testVersion() {
1: 		assertEquals("Wrong root version", getRootSubsystem().getVersion(), Version.parseVersion("1.0.0"));
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: 		core = bundleContext.installBundle(normalizeBundleLocation(core));
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), importPackage("org.osgi.framework"));
/////////////////////////////////////////////////////////////////////////
1: 		Bundle bundleA = context().getBundleByName(BUNDLE_A);
/////////////////////////////////////////////////////////////////////////
1: 		RegionDigraph digraph = context().getService(RegionDigraph.class);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
============================================================================