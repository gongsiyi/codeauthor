1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:2ac6b1a: package org.apache.aries.subsystem.core.internal;
1:2ac6b1a: 
1:2ac6b1a: import java.util.Comparator;
1:2ac6b1a: 
1:2ac6b1a: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1:2ac6b1a: import org.osgi.resource.Resource;
1:2ac6b1a: 
1:2ac6b1a: public class StartResourceComparator implements Comparator<Resource> {
1:2ac6b1a: 	private final SubsystemContentHeader header;
1:2ac6b1a: 	
1:2ac6b1a: 	public StartResourceComparator(SubsystemContentHeader header) {
1:2ac6b1a: 		this.header = header;
1:2ac6b1a: 	}
1:2ac6b1a: 	@Override
1:2ac6b1a: 	public int compare(Resource r1, Resource r2) {
1:2ac6b1a: 		Integer r1StartOrder = getStartOrder(r1);
1:2ac6b1a: 		Integer r2StartOrder = getStartOrder(r2);
1:2ac6b1a: 		return r1StartOrder.compareTo(r2StartOrder);
1:2ac6b1a: 	}
1:2ac6b1a: 	
1:2ac6b1a: 	private Integer getStartOrder(Resource r) {
1:547a8ce: 		SubsystemContentHeader.Clause clause = header.getClause(r);
1:547a8ce: 		if (clause == null)
1:1fca6d0: 			return -1;
1:547a8ce: 		return clause.getStartOrder();
1:2ac6b1a: 	}
1:2ac6b1a: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:1fca6d0
/////////////////////////////////////////////////////////////////////////
1: 			return -1;
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:547a8ce
/////////////////////////////////////////////////////////////////////////
1: 		SubsystemContentHeader.Clause clause = header.getClause(r);
1: 		if (clause == null)
1: 		return clause.getStartOrder();
commit:2ac6b1a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Comparator;
1: 
1: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1: import org.osgi.resource.Resource;
1: 
1: public class StartResourceComparator implements Comparator<Resource> {
1: 	private final SubsystemContentHeader header;
1: 	
1: 	public StartResourceComparator(SubsystemContentHeader header) {
1: 		this.header = header;
1: 	}
1: 	@Override
1: 	public int compare(Resource r1, Resource r2) {
1: 		Integer r1StartOrder = getStartOrder(r1);
1: 		Integer r2StartOrder = getStartOrder(r2);
1: 		return r1StartOrder.compareTo(r2StartOrder);
1: 	}
1: 	
1: 	private Integer getStartOrder(Resource r) {
0: 		SubsystemContentHeader.Content content = header.getContent(r);
0: 		if (content == null)
0: 			return 0;
0: 		return content.getStartOrder();
1: 	}
1: }
============================================================================