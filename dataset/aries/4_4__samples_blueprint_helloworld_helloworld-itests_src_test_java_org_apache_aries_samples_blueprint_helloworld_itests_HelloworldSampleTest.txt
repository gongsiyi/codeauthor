1:05c76d5: /*
1:05c76d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:05c76d5:  * or more contributor license agreements.  See the NOTICE file
1:05c76d5:  * distributed with this work for additional information
1:05c76d5:  * regarding copyright ownership.  The ASF licenses this file
1:05c76d5:  * to you under the Apache License, Version 2.0 (the
1:05c76d5:  * "License"); you may not use this file except in compliance
1:05c76d5:  * with the License.  You may obtain a copy of the License at
1:05c76d5:  *
1:05c76d5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:05c76d5:  *
1:05c76d5:  * Unless required by applicable law or agreed to in writing,
1:05c76d5:  * software distributed under the License is distributed on an
1:05c76d5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:05c76d5:  * KIND, either express or implied.  See the License for the
1:05c76d5:  * specific language governing permissions and limitations
1:05c76d5:  * under the License.
1:05c76d5:  */
1:05c76d5: package org.apache.aries.samples.blueprint.helloworld.itests;
3:05c76d5: 
1:05c76d5: import static org.junit.Assert.assertEquals;
1:05c76d5: import static org.junit.Assert.assertNotNull;
1:d0a7bb9: import static org.junit.Assert.assertNull;
1:05c76d5: import static org.ops4j.pax.exam.CoreOptions.bootDelegationPackages;
1:05c76d5: import static org.ops4j.pax.exam.CoreOptions.equinox;
1:05c76d5: import static org.ops4j.pax.exam.CoreOptions.options;
1:05c76d5: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:05c76d5: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1:05c76d5: 
1:d0a7bb9: import org.osgi.service.blueprint.container.BlueprintContainer;
1:d0a7bb9: 
1:05c76d5: import org.junit.Test;
1:05c76d5: import org.junit.runner.RunWith;
1:05c76d5: import org.ops4j.pax.exam.Option;
1:05c76d5: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1:05c76d5: import org.osgi.framework.Bundle;
1:d0a7bb9: 
1:05c76d5: @RunWith(JUnit4TestRunner.class)
1:05c76d5: public class HelloworldSampleTest extends AbstractIntegrationTest {
1:05c76d5: 
1:05c76d5:     @Test
1:d0a7bb9:     public void testBundlesStart() throws Exception {
1:05c76d5: 
1:2ca0dda:         /* Check that the HelloWorld Sample bundles are present an started */
1:05c76d5:         Bundle bapi = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.api");
1:05c76d5:         assertNotNull(bapi);
1:2ca0dda:         
3:2ca0dda:         failInBundleNotActiveInFiveSeconds(bapi);
1:2ca0dda:         assertEquals(Bundle.ACTIVE, bapi.getState());
1:05c76d5: 
1:05c76d5:         Bundle bcli = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.client");
1:05c76d5:         assertNotNull(bcli);
1:d0a7bb9:         failInBundleNotActiveInFiveSeconds(bcli);
1:05c76d5: 
1:05c76d5:         Bundle bser = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.server");
1:05c76d5:         assertNotNull(bser);
1:d0a7bb9:         failInBundleNotActiveInFiveSeconds(bser);
1:2ca0dda:     }
1:d0a7bb9:     
1:d0a7bb9:     @Test
1:d0a7bb9:     public void testClientBlueprintContainerOnlyStartsWhenServiceStarted() throws Exception
1:d0a7bb9:     {
1:d0a7bb9:        // Stop everything before we start
1:d0a7bb9:        Bundle bcli = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.client");
1:d0a7bb9:        assertNotNull(bcli);
1:d0a7bb9:        bcli.stop();
1:d0a7bb9: 
1:d0a7bb9:        Bundle bser = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.server");
1:d0a7bb9:        assertNotNull(bser);
1:d0a7bb9:        bser.stop();
1:d0a7bb9: 
1:d0a7bb9:        // Wait for everything to shut down 
1:d0a7bb9:        Thread.sleep(1000);
1:d0a7bb9:        
1:d0a7bb9:        // When everything is stopped, there should be no blueprint container for either the client or the server 
1:d0a7bb9:        
1:d0a7bb9:        assertClientBlueprintContainerNull();
1:d0a7bb9:        assertServerBlueprintContainerNull();
1:d0a7bb9: 
1:d0a7bb9:        // If we start the client first, it shouldn't have a blueprint container
1:d0a7bb9:        bcli.start();
1:d0a7bb9: 
1:d0a7bb9:        // Wait for everything to get started 
1:d0a7bb9:        Thread.sleep(1000);
1:d0a7bb9:        assertClientBlueprintContainerNull();
1:d0a7bb9:        
1:d0a7bb9:        // Then when we start the server both it and the client should have blueprint containers
1:d0a7bb9:        bser.start();
1:d0a7bb9:        // Wait for everything to get started 
1:d0a7bb9:        Thread.sleep(1000);
1:d0a7bb9:        assertClientBlueprintContainerNotNull();
1:d0a7bb9:        assertServerBlueprintContainerNotNull();
1:d0a7bb9: 
1:d0a7bb9:     }
1:d0a7bb9:     
1:d0a7bb9:     private BlueprintContainer getBlueprintContainer(String bundleName)
1:d0a7bb9:     {       
1:d0a7bb9:        BlueprintContainer container = null;
1:d0a7bb9:        try {
1:d0a7bb9:        container = getOsgiService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + bundleName + ")", 500);
1:d0a7bb9:        } catch (RuntimeException e)
1:d0a7bb9:        {
1:d0a7bb9:           // Just return null if we couldn't get the container
1:d0a7bb9:        }
1:d0a7bb9:        return container;
1:d0a7bb9:     }
1:d0a7bb9:     
1:d0a7bb9:     private BlueprintContainer getClientBlueprintContainer()
1:d0a7bb9:     {
1:d0a7bb9:        return getBlueprintContainer("org.apache.aries.samples.blueprint.helloworld.client");
1:d0a7bb9:     }
1:d0a7bb9:   
1:d0a7bb9:     private BlueprintContainer getServerBlueprintContainer()
1:d0a7bb9:     {
1:d0a7bb9:        return getBlueprintContainer("org.apache.aries.samples.blueprint.helloworld.server");
1:d0a7bb9:     }
1:d0a7bb9:     
1:d0a7bb9:     private void assertClientBlueprintContainerNotNull()
1:d0a7bb9:     {
1:d0a7bb9:        assertNotNull("There was no blueprint container for the client bundle.", getClientBlueprintContainer());
1:d0a7bb9:     }
1:d0a7bb9: 
1:d0a7bb9:     private void assertClientBlueprintContainerNull()
1:d0a7bb9:     {
1:d0a7bb9:        assertNull("There was a blueprint container for the client bundle when we didn't expect one.", getClientBlueprintContainer());
1:d0a7bb9:     }
1:d0a7bb9: 
1:d0a7bb9:     private void assertServerBlueprintContainerNotNull()
1:d0a7bb9:     {
1:d0a7bb9:        assertNotNull("There was no blueprint container for the server bundle.", getServerBlueprintContainer());
1:d0a7bb9:     }
1:d0a7bb9: 
1:d0a7bb9:     private void assertServerBlueprintContainerNull()
1:d0a7bb9:     {
1:d0a7bb9:        assertNull("There was a blueprint container for the server bundle when we didn't expect one.", getServerBlueprintContainer());
1:d0a7bb9:     }
1:d0a7bb9: 
1:05c76d5: 
1:2ca0dda:     private void failInBundleNotActiveInFiveSeconds(Bundle bapi)
1:2ca0dda:     {
1:2ca0dda:         for (int i = 0; i < 5 && Bundle.ACTIVE != bapi.getState(); i++) {
1:2ca0dda:             try {
1:2ca0dda:               Thread.sleep(1000);
1:2ca0dda:             } catch (InterruptedException e) {
1:2ca0dda:               // TODO Auto-generated catch block
1:2ca0dda:               e.printStackTrace();
1:2ca0dda:             }
1:2ca0dda:         }
1:2ca0dda:         
1:2ca0dda:         assertEquals("The bundle " + bapi.getSymbolicName() + " " + bapi.getVersion() + " is not active", Bundle.ACTIVE, bapi.getState());
1:05c76d5:     }
1:05c76d5: 
1:05c76d5:     @org.ops4j.pax.exam.junit.Configuration
1:05c76d5:     public static Option[] configuration() {
1:2ca0dda:         Option[] options = options(
1:05c76d5:                 bootDelegationPackages("javax.transaction",
1:05c76d5:                         "javax.transaction.*"),
1:05c76d5:                 vmOption("-Dorg.osgi.framework.system.packages=javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.transaction;partial=true;mandatory:=partial,javax.transaction.xa;partial=true;mandatory:=partial"),
1:05c76d5:                 // Log
1:05c76d5:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
1:05c76d5:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
1:05c76d5:                 // Felix mvn url handler - do we need this?
1:05c76d5:                 mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1:05c76d5: 
1:05c76d5:                 // this is how you set the default log level when using pax
1:05c76d5:                 // logging (logProfile)
1:05c76d5:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level")
1:05c76d5:                         .value("DEBUG"),
1:05c76d5: 
1:05c76d5:                 // Bundles
1:05c76d5:                 mavenBundle("org.eclipse.equinox", "cm"),
1:05c76d5:                 mavenBundle("org.eclipse.osgi", "services"),
1:05c76d5: 
1:05c76d5:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint" ),
1:05c76d5:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
1:05c76d5:                 mavenBundle("org.apache.aries", "org.apache.aries.util" ),
1:b8839d6:                 mavenBundle("org.ow2.asm", "asm-all" ),
1:05c76d5:                 mavenBundle("org.apache.aries.samples.blueprint.helloworld", "org.apache.aries.samples.blueprint.helloworld.api"),
1:05c76d5:                 mavenBundle("org.apache.aries.samples.blueprint.helloworld", "org.apache.aries.samples.blueprint.helloworld.server"),
1:05c76d5:                 mavenBundle("org.apache.aries.samples.blueprint.helloworld", "org.apache.aries.samples.blueprint.helloworld.client"),
1:05c76d5:                 /* For debugging, uncomment the next two lines  */
1:05c76d5:                 /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
1:05c76d5:                 waitForFrameworkStartup(),  
1:05c76d5: */
1:05c76d5:                 /* For debugging, add these imports:
1:05c76d5:                 import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
1:05c76d5:                 import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1:05c76d5:                 */
1:05c76d5:                 equinox().version("3.5.0")
1:05c76d5:         );
1:05c76d5:         options = updateOptions(options);
1:05c76d5:         return options;
1:05c76d5:     }
1:05c76d5: 
1:05c76d5: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:d0a7bb9
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
1: 
1:     public void testBundlesStart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         failInBundleNotActiveInFiveSeconds(bcli);
1:         failInBundleNotActiveInFiveSeconds(bser);
1:     
1:     @Test
1:     public void testClientBlueprintContainerOnlyStartsWhenServiceStarted() throws Exception
1:     {
1:        // Stop everything before we start
1:        Bundle bcli = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.client");
1:        assertNotNull(bcli);
1:        bcli.stop();
1: 
1:        Bundle bser = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.server");
1:        assertNotNull(bser);
1:        bser.stop();
1: 
1:        // Wait for everything to shut down 
1:        Thread.sleep(1000);
1:        
1:        // When everything is stopped, there should be no blueprint container for either the client or the server 
1:        
1:        assertClientBlueprintContainerNull();
1:        assertServerBlueprintContainerNull();
1: 
1:        // If we start the client first, it shouldn't have a blueprint container
1:        bcli.start();
1: 
1:        // Wait for everything to get started 
1:        Thread.sleep(1000);
1:        assertClientBlueprintContainerNull();
1:        
1:        // Then when we start the server both it and the client should have blueprint containers
1:        bser.start();
1:        // Wait for everything to get started 
1:        Thread.sleep(1000);
1:        assertClientBlueprintContainerNotNull();
1:        assertServerBlueprintContainerNotNull();
1: 
1:     }
1:     
1:     private BlueprintContainer getBlueprintContainer(String bundleName)
1:     {       
1:        BlueprintContainer container = null;
1:        try {
1:        container = getOsgiService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + bundleName + ")", 500);
1:        } catch (RuntimeException e)
1:        {
1:           // Just return null if we couldn't get the container
1:        }
1:        return container;
1:     }
1:     
1:     private BlueprintContainer getClientBlueprintContainer()
1:     {
1:        return getBlueprintContainer("org.apache.aries.samples.blueprint.helloworld.client");
1:     }
1:   
1:     private BlueprintContainer getServerBlueprintContainer()
1:     {
1:        return getBlueprintContainer("org.apache.aries.samples.blueprint.helloworld.server");
1:     }
1:     
1:     private void assertClientBlueprintContainerNotNull()
1:     {
1:        assertNotNull("There was no blueprint container for the client bundle.", getClientBlueprintContainer());
1:     }
1: 
1:     private void assertClientBlueprintContainerNull()
1:     {
1:        assertNull("There was a blueprint container for the client bundle when we didn't expect one.", getClientBlueprintContainer());
1:     }
1: 
1:     private void assertServerBlueprintContainerNotNull()
1:     {
1:        assertNotNull("There was no blueprint container for the server bundle.", getServerBlueprintContainer());
1:     }
1: 
1:     private void assertServerBlueprintContainerNull()
1:     {
1:        assertNull("There was a blueprint container for the server bundle when we didn't expect one.", getServerBlueprintContainer());
1:     }
1: 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:b8839d6
/////////////////////////////////////////////////////////////////////////
1:                 mavenBundle("org.ow2.asm", "asm-all" ),
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:2ca0dda
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         /* Check that the HelloWorld Sample bundles are present an started */
1:         
1:         failInBundleNotActiveInFiveSeconds(bapi);
1:         assertEquals(Bundle.ACTIVE, bapi.getState());
1:         failInBundleNotActiveInFiveSeconds(bapi);
1:         failInBundleNotActiveInFiveSeconds(bapi);
1:     }
1:     private void failInBundleNotActiveInFiveSeconds(Bundle bapi)
1:     {
1:         for (int i = 0; i < 5 && Bundle.ACTIVE != bapi.getState(); i++) {
1:             try {
1:               Thread.sleep(1000);
1:             } catch (InterruptedException e) {
1:               // TODO Auto-generated catch block
1:               e.printStackTrace();
1:             }
1:         }
1:         
1:         assertEquals("The bundle " + bapi.getSymbolicName() + " " + bapi.getVersion() + " is not active", Bundle.ACTIVE, bapi.getState());
1:         Option[] options = options(
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:05c76d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blueprint.helloworld.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertTrue;
1: import static org.ops4j.pax.exam.CoreOptions.bootDelegationPackages;
1: import static org.ops4j.pax.exam.CoreOptions.equinox;
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1: 
0: import java.net.HttpURLConnection;
0: import java.net.URL;
1: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: @RunWith(JUnit4TestRunner.class)
1: public class HelloworldSampleTest extends AbstractIntegrationTest {
1: 
1:     @Test
0:     public void test() throws Exception {
1: 
0: 		/* Check that the HelloWorld Sample bundles are present an started */
1:         Bundle bapi = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.api");
1:         assertNotNull(bapi);
0: 		assertEquals(Bundle.ACTIVE, bapi.getState());
1: 
1:         Bundle bcli = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.client");
1:         assertNotNull(bcli);
0: 		assertEquals(Bundle.ACTIVE, bcli.getState());
1: 
1:         Bundle bser = getInstalledBundle("org.apache.aries.samples.blueprint.helloworld.server");
1:         assertNotNull(bser);
0: 		assertEquals(Bundle.ACTIVE, bser.getState());
1: 
1: 
1:     }
1: 
1:     @org.ops4j.pax.exam.junit.Configuration
1:     public static Option[] configuration() {
0:     	Option[] options = options(
1:                 bootDelegationPackages("javax.transaction",
1:                         "javax.transaction.*"),
1:                 vmOption("-Dorg.osgi.framework.system.packages=javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.transaction;partial=true;mandatory:=partial,javax.transaction.xa;partial=true;mandatory:=partial"),
1:                 // Log
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
1:                 // Felix mvn url handler - do we need this?
1:                 mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
1:                 // this is how you set the default log level when using pax
1:                 // logging (logProfile)
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level")
1:                         .value("DEBUG"),
1: 
1:                 // Bundles
1:                 mavenBundle("org.eclipse.equinox", "cm"),
1:                 mavenBundle("org.eclipse.osgi", "services"),
1: 
1:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint" ),
1:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
1:                 mavenBundle("org.apache.aries", "org.apache.aries.util" ),
0:                 mavenBundle("asm", "asm-all" ),
1:                 mavenBundle("org.apache.aries.samples.blueprint.helloworld", "org.apache.aries.samples.blueprint.helloworld.api"),
1:                 mavenBundle("org.apache.aries.samples.blueprint.helloworld", "org.apache.aries.samples.blueprint.helloworld.server"),
1:                 mavenBundle("org.apache.aries.samples.blueprint.helloworld", "org.apache.aries.samples.blueprint.helloworld.client"),
1:                 /* For debugging, uncomment the next two lines  */
1:                 /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
1:                 waitForFrameworkStartup(),  
1: */
1:                 /* For debugging, add these imports:
1:                 import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
1:                 import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1:                 */
1:                 equinox().version("3.5.0")
1:         );
1:         options = updateOptions(options);
1:         return options;
1:     }
1: 
1: }
============================================================================