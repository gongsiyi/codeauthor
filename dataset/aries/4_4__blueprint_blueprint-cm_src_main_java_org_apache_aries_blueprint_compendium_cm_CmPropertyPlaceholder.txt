1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.compendium.cm;
1:f13c6ac: 
1:f13c6ac: import java.util.Dictionary;
1:e2445d0: import java.util.Enumeration;
1:e2445d0: import java.util.Properties;
1:f13c6ac: 
1:be8e9c5: import org.apache.aries.blueprint.ext.PropertyPlaceholder;
1:09a7647: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:f492016: import org.osgi.framework.Bundle;
1:f492016: import org.osgi.framework.Constants;
1:f13c6ac: import org.osgi.service.cm.Configuration;
1:f13c6ac: import org.osgi.service.cm.ConfigurationAdmin;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * TODO: javadoc
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f492016: public class CmPropertyPlaceholder extends PropertyPlaceholder implements ManagedObject {
1:f13c6ac: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(CmPropertyPlaceholder.class);
1:f13c6ac: 
1:f492016:     private ExtendedBlueprintContainer blueprintContainer;
1:f13c6ac:     private ConfigurationAdmin configAdmin; 
1:f13c6ac:     private String persistentId;
1:f492016:     private String updateStrategy;
1:f492016:     private ManagedObjectManager managedObjectManager;
1:f492016:     private Dictionary<String,Object> properties;
1:1591a51:     private boolean initialized;
1:f13c6ac: 
1:f492016:     public ExtendedBlueprintContainer getBlueprintContainer() {
1:f13c6ac:         return blueprintContainer;
4:f13c6ac:     }
1:f13c6ac: 
1:f492016:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
1:f13c6ac:         this.blueprintContainer = blueprintContainer;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public ConfigurationAdmin getConfigAdmin() {
1:f13c6ac:         return configAdmin;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setConfigAdmin(ConfigurationAdmin configAdmin) {
1:f13c6ac:         this.configAdmin = configAdmin;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getPersistentId() {
1:f13c6ac:         return persistentId;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setPersistentId(String persistentId) {
1:f13c6ac:         this.persistentId = persistentId;
1:f492016:     }
1:f13c6ac: 
1:f492016:     public String getUpdateStrategy() {
1:f492016:         return updateStrategy;
1:f492016:     }
1:f492016: 
1:f492016:     public void setUpdateStrategy(String updateStrategy) {
1:f492016:         this.updateStrategy = updateStrategy;
1:f492016:     }
1:f492016: 
1:f492016:     public ManagedObjectManager getManagedObjectManager() {
1:f492016:         return managedObjectManager;
1:f492016:     }
1:f492016: 
1:f492016:     public void setManagedObjectManager(ManagedObjectManager managedObjectManager) {
1:f492016:         this.managedObjectManager = managedObjectManager;
1:f492016:     }
1:f492016: 
1:f492016:     public void init() throws Exception {
1:f492016:         LOGGER.debug("Initializing CmPropertyPlaceholder");
1:f492016:         Properties props = new Properties();
1:f492016:         props.put(Constants.SERVICE_PID, persistentId);
1:f492016:         Bundle bundle = blueprintContainer.getBundleContext().getBundle();
1:f492016:         props.put(Constants.BUNDLE_SYMBOLICNAME, bundle.getSymbolicName());
1:f492016:         props.put(Constants.BUNDLE_VERSION, bundle.getHeaders().get(Constants.BUNDLE_VERSION));
1:f492016:         managedObjectManager.register(this, props);
1:f492016:     }
1:f492016: 
1:f492016:     public void destroy() {
1:f492016:         LOGGER.debug("Destroying CmPropertyPlaceholder");
1:f492016:         managedObjectManager.unregister(this);
1:f492016:     }
1:f492016: 
1:f13c6ac:     protected String getProperty(String val) {
1:f13c6ac:         LOGGER.debug("Retrieving property value {} from configuration with pid {}", val, persistentId);
1:f13c6ac:         Object v = null;
1:f492016:         if (properties != null) {
1:f492016:             v = properties.get(val);
1:f492016:             if (v != null) {
1:f492016:                 LOGGER.debug("Found property value {}", v);
2:f13c6ac:             } else {
1:f492016:                 LOGGER.debug("Property not found in configuration");
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         if (v == null) {
1:f13c6ac:             v = super.getProperty(val);
1:f13c6ac:         }
1:f13c6ac:         return v != null ? v.toString() : null;
1:f13c6ac:     }
1:f13c6ac: 
1:f492016:     public Bundle getBundle() {
1:f492016:         return blueprintContainer.getBundleContext().getBundle();
1:f492016:     }
1:f492016: 
1:f492016:     public void updated(Dictionary props) {
1:1591a51:         if (!initialized) {
1:1591a51:             properties = props;
1:1591a51:             initialized = true;
1:1591a51:             return;
1:1591a51:         }
1:f492016:         if ("reload".equalsIgnoreCase(updateStrategy) && !equals(properties, props)) {
1:f492016:             LOGGER.debug("Configuration updated for pid={}", persistentId);
1:f492016:             // Run in a separate thread to avoid re-entrance
1:f492016:             new Thread() {
1:f492016:                 public void run() {
1:f492016:                     blueprintContainer.reload();
1:f492016:                 }
1:f492016:             }.start();
1:f492016:         }
1:f13c6ac:     }
1:f492016: 
1:f492016:     private <T,U> boolean equals(Dictionary<T,U> d1, Dictionary<T,U> d2) {
1:f492016:         if (d1 == null || d1.isEmpty()) {
1:f492016:             return d2 == null || d2.isEmpty();
1:f492016:         } else if (d2 == null || d1.size() != d2.size()) {
1:f492016:             return false;
1:f492016:         } else {
1:f492016:             for (Enumeration<T> e = d1.keys(); e.hasMoreElements();) {
1:f492016:                 T k = e.nextElement();
1:f492016:                 U v1 = d1.get(k);
1:f492016:                 U v2 = d2.get(k);
1:f492016:                 if (v1 == null) {
1:f492016:                     if (v2 != null) {
1:f492016:                         return false;
1:f492016:                     }
1:f492016:                 } else {
1:f492016:                     if (!v1.equals(v2)) {
1:f492016:                         return false;
1:f492016:                     }
1:f492016:                 }
1:f492016:             }
1:f492016:             return true;
1:f492016:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1591a51
/////////////////////////////////////////////////////////////////////////
1:     private boolean initialized;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (!initialized) {
1:             properties = props;
1:             initialized = true;
1:             return;
1:         }
commit:be8e9c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.ext.PropertyPlaceholder;
commit:f492016
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
0: import org.apache.aries.blueprint.ExtendedBlueprintContainer;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1: public class CmPropertyPlaceholder extends PropertyPlaceholder implements ManagedObject {
1:     private ExtendedBlueprintContainer blueprintContainer;
1:     private String updateStrategy;
1:     private ManagedObjectManager managedObjectManager;
1:     private Dictionary<String,Object> properties;
1:     public ExtendedBlueprintContainer getBlueprintContainer() {
1:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
/////////////////////////////////////////////////////////////////////////
1:     public String getUpdateStrategy() {
1:         return updateStrategy;
1:     }
1: 
1:     public void setUpdateStrategy(String updateStrategy) {
1:         this.updateStrategy = updateStrategy;
1:     }
1: 
1:     public ManagedObjectManager getManagedObjectManager() {
1:         return managedObjectManager;
1:     }
1: 
1:     public void setManagedObjectManager(ManagedObjectManager managedObjectManager) {
1:         this.managedObjectManager = managedObjectManager;
1:     }
1: 
1:     public void init() throws Exception {
1:         LOGGER.debug("Initializing CmPropertyPlaceholder");
0:         Configuration config = CmUtils.getConfiguration(configAdmin, persistentId);
0:         if (config != null) {
0:             properties = config.getProperties();
1:         }
1:         Properties props = new Properties();
1:         props.put(Constants.SERVICE_PID, persistentId);
1:         Bundle bundle = blueprintContainer.getBundleContext().getBundle();
1:         props.put(Constants.BUNDLE_SYMBOLICNAME, bundle.getSymbolicName());
1:         props.put(Constants.BUNDLE_VERSION, bundle.getHeaders().get(Constants.BUNDLE_VERSION));
1:         managedObjectManager.register(this, props);
1:     }
1: 
1:     public void destroy() {
1:         LOGGER.debug("Destroying CmPropertyPlaceholder");
1:         managedObjectManager.unregister(this);
1:     }
1: 
1:         if (properties != null) {
1:             v = properties.get(val);
1:             if (v != null) {
1:                 LOGGER.debug("Found property value {}", v);
1:                 LOGGER.debug("Property not found in configuration");
/////////////////////////////////////////////////////////////////////////
1:     public Bundle getBundle() {
1:         return blueprintContainer.getBundleContext().getBundle();
1:     }
1: 
1:     public void updated(Dictionary props) {
1:         if ("reload".equalsIgnoreCase(updateStrategy) && !equals(properties, props)) {
1:             LOGGER.debug("Configuration updated for pid={}", persistentId);
1:             // Run in a separate thread to avoid re-entrance
1:             new Thread() {
1:                 public void run() {
1:                     blueprintContainer.reload();
1:                 }
1:             }.start();
1:     }
1: 
1:     private <T,U> boolean equals(Dictionary<T,U> d1, Dictionary<T,U> d2) {
1:         if (d1 == null || d1.isEmpty()) {
1:             return d2 == null || d2.isEmpty();
1:         } else if (d2 == null || d1.size() != d2.size()) {
1:             return false;
1:         } else {
1:             for (Enumeration<T> e = d1.keys(); e.hasMoreElements();) {
1:                 T k = e.nextElement();
1:                 U v1 = d1.get(k);
1:                 U v2 = d2.get(k);
1:                 if (v1 == null) {
1:                     if (v2 != null) {
1:                         return false;
1:                     }
1:                 } else {
1:                     if (!v1.equals(v2)) {
1:                         return false;
1:                     }
1:                 }
1:             }
1:             return true;
1:         }
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.compendium.cm;
1: 
0: import java.io.IOException;
1: import java.util.Dictionary;
0: import java.util.Map;
1: 
0: import org.apache.geronimo.blueprint.ext.AbstractPropertyPlaceholder;
0: import org.apache.geronimo.blueprint.ext.PropertyPlaceholder;
0: import org.osgi.service.blueprint.container.BlueprintContainer;
0: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * TODO: javadoc
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 766508 $, $Date: 2009-04-19 22:09:27 +0200 (Sun, 19 Apr 2009) $
1:  */
0: public class CmPropertyPlaceholder extends PropertyPlaceholder {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(CmPropertyPlaceholder.class);
1: 
0:     private BlueprintContainer blueprintContainer;
1:     private ConfigurationAdmin configAdmin; 
1:     private String persistentId;
0:     private transient Configuration config;
1: 
0:     public BlueprintContainer getBlueprintContainer() {
1:         return blueprintContainer;
1:     }
1: 
0:     public void setBlueprintContainer(BlueprintContainer blueprintContainer) {
1:         this.blueprintContainer = blueprintContainer;
1:     }
1: 
1:     public ConfigurationAdmin getConfigAdmin() {
1:         return configAdmin;
1:     }
1: 
1:     public void setConfigAdmin(ConfigurationAdmin configAdmin) {
1:         this.configAdmin = configAdmin;
1:     }
1: 
1:     public String getPersistentId() {
1:         return persistentId;
1:     }
1: 
1:     public void setPersistentId(String persistentId) {
1:         this.persistentId = persistentId;
1:     }
1: 
1:     protected String getProperty(String val) {
1:         LOGGER.debug("Retrieving property value {} from configuration with pid {}", val, persistentId);
0:         Configuration config = getConfig();
1:         Object v = null;
0:         if (config != null) {
0:             Dictionary props = config.getProperties();
0:             if (props != null) {
0:                 v = props.get(val);
0:                 if (v != null) {
0:                     LOGGER.debug("Found property value {}", v);
1:                 } else {
0:                     LOGGER.debug("Property not found in configuration");
1:                 }
1:             } else {
0:                 LOGGER.debug("No dictionary available from configuration");
1:             }
1:         }
1:         if (v == null) {
1:             v = super.getProperty(val);
1:         }
1:         return v != null ? v.toString() : null;
1:     }
1: 
0:     protected synchronized Configuration getConfig() {
0:         if (config == null) {
0:             try {
0:                 config = CmUtils.getConfiguration(configAdmin, persistentId);
0:             } catch (IOException e) {
0:                 // ignore
1:             }
1:         }
0:         return config;
1:     }
1: 
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:e2445d0
/////////////////////////////////////////////////////////////////////////
0: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.Properties;
0: import org.apache.aries.blueprint.utils.PropertyPlaceholder;
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.compendium.cm;
0: import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
0: import org.apache.aries.blueprint.ext.PropertyPlaceholder;
============================================================================