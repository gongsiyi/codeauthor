1:7fa86e8: /*
1:7fa86e8:  * Licensed to the Apache Software Foundation (ASF) under one
1:7fa86e8:  * or more contributor license agreements.  See the NOTICE file
1:7fa86e8:  * distributed with this work for additional information
1:7fa86e8:  * regarding copyright ownership.  The ASF licenses this file
1:7fa86e8:  * to you under the Apache License, Version 2.0 (the
1:7fa86e8:  * "License"); you may not use this file except in compliance
1:7fa86e8:  * with the License.  You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing,
1:7fa86e8:  * software distributed under the License is distributed on an
1:7fa86e8:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:7fa86e8:  * KIND, either express or implied.  See the License for the
1:7fa86e8:  * specific language governing permissions and limitations
1:7fa86e8:  * under the License.
1:7fa86e8:  */
1:7fa86e8: package org.apache.aries.pushstream;
1:7fa86e8: 
1:7fa86e8: import static java.util.Collections.emptyList;
1:7fa86e8: import static java.util.concurrent.TimeUnit.NANOSECONDS;
1:7fa86e8: import static java.util.stream.Collectors.toList;
1:7fa86e8: 
1:7fa86e8: import java.util.ArrayList;
1:7fa86e8: import java.util.List;
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: import java.util.concurrent.Executor;
1:7fa86e8: import java.util.concurrent.RejectedExecutionException;
1:7fa86e8: import java.util.concurrent.ScheduledExecutorService;
1:7fa86e8: import java.util.concurrent.Semaphore;
1:7fa86e8: 
1:7fa86e8: import org.osgi.util.promise.Deferred;
1:7fa86e8: import org.osgi.util.promise.Promise;
1:7fa86e8: import org.osgi.util.promise.Promises;
1:7fa86e8: import org.osgi.util.pushstream.PushEvent;
1:7fa86e8: import org.osgi.util.pushstream.PushEventConsumer;
1:7fa86e8: import org.osgi.util.pushstream.QueuePolicy;
1:7fa86e8: import org.osgi.util.pushstream.SimplePushEventSource;
1:7fa86e8: 
1:7fa86e8: public class SimplePushEventSourceImpl<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1:7fa86e8: 		implements SimplePushEventSource<T> {
1:7fa86e8: 
1:7fa86e8: 	private final Object								lock		= new Object();
1:7fa86e8: 
1:7fa86e8: 	private final Executor								worker;
1:7fa86e8: 
1:7fa86e8: 	private final ScheduledExecutorService				scheduler;
1:7fa86e8: 
1:7fa86e8: 	private final QueuePolicy<T,U>						queuePolicy;
1:7fa86e8: 
1:7fa86e8: 	private final U										queue;
1:7fa86e8: 
1:7fa86e8: 	private final int									parallelism;
1:7fa86e8: 
1:7fa86e8: 	private final Semaphore								semaphore;
1:7fa86e8: 
1:7fa86e8: 	private final List<PushEventConsumer< ? super T>>	connected	= new ArrayList<>();
1:7fa86e8: 
1:7fa86e8: 	private final Runnable								onClose;
1:7fa86e8: 
1:7fa86e8: 	private boolean										closed;
1:7fa86e8: 	
1:7fa86e8: 	private Deferred<Void>								connectPromise;
1:7fa86e8: 
1:7fa86e8: 	private boolean										waitForFinishes;
1:7fa86e8: 
1:7fa86e8: 
1:7fa86e8: 	public SimplePushEventSourceImpl(Executor worker,
1:7fa86e8: 			ScheduledExecutorService scheduler, QueuePolicy<T,U> queuePolicy,
1:7fa86e8: 			U queue, int parallelism, Runnable onClose) {
1:7fa86e8: 		this.worker = worker;
1:7fa86e8: 		this.scheduler = scheduler;
1:7fa86e8: 		this.queuePolicy = queuePolicy;
1:7fa86e8: 		this.queue = queue;
1:7fa86e8: 		this.parallelism = parallelism;
1:7fa86e8: 		this.semaphore = new Semaphore(parallelism);
1:7fa86e8: 		this.onClose = onClose;
1:7fa86e8: 		this.closed = false;
1:7fa86e8: 		this.connectPromise = null;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public AutoCloseable open(PushEventConsumer< ? super T> pec)
1:7fa86e8: 			throws Exception {
1:7fa86e8: 		Deferred<Void> toResolve = null;
1:7fa86e8: 		synchronized (lock) {
1:7fa86e8: 			if (closed) {
1:7fa86e8: 				throw new IllegalStateException(
1:7fa86e8: 						"This PushEventConsumer is closed");
1:7fa86e8: 			}
1:7fa86e8: 
1:7fa86e8: 			toResolve = connectPromise;
1:7fa86e8: 			connectPromise = null;
1:7fa86e8: 
1:7fa86e8: 			connected.add(pec);
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		if (toResolve != null) {
1:7fa86e8: 			toResolve.resolve(null);
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		return () -> {
1:7fa86e8: 			closeConsumer(pec, PushEvent.close());
1:7fa86e8: 		};
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	private void closeConsumer(PushEventConsumer< ? super T> pec,
1:7fa86e8: 			PushEvent<T> event) {
1:7fa86e8: 		boolean sendClose;
1:7fa86e8: 		synchronized (lock) {
1:7fa86e8: 			sendClose = connected.remove(pec);
1:7fa86e8: 		}
1:7fa86e8: 		if (sendClose) {
1:7fa86e8: 			doSend(pec, event);
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	private void doSend(PushEventConsumer< ? super T> pec, PushEvent<T> event) {
1:7fa86e8: 		try {
1:7fa86e8: 			worker.execute(() -> safePush(pec, event));
1:7fa86e8: 		} catch (RejectedExecutionException ree) {
1:7fa86e8: 			// TODO log?
1:7fa86e8: 			if (!event.isTerminal()) {
1:7fa86e8: 				close(PushEvent.error(ree));
1:7fa86e8: 			} else {
1:7fa86e8: 				safePush(pec, event);
1:7fa86e8: 			}
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@SuppressWarnings("boxing")
1:7fa86e8: 	private Promise<Long> doSendWithBackPressure(
1:7fa86e8: 			PushEventConsumer< ? super T> pec, PushEvent<T> event) {
1:7fa86e8: 		Deferred<Long> d = new Deferred<>();
1:7fa86e8: 		try {
1:7fa86e8: 			worker.execute(
1:7fa86e8: 					() -> d.resolve(System.nanoTime() + safePush(pec, event)));
1:7fa86e8: 		} catch (RejectedExecutionException ree) {
1:7fa86e8: 			// TODO log?
1:7fa86e8: 			if (!event.isTerminal()) {
1:7fa86e8: 				close(PushEvent.error(ree));
1:7fa86e8: 				return Promises.resolved(System.nanoTime());
1:7fa86e8: 			} else {
1:7fa86e8: 				return Promises
1:7fa86e8: 						.resolved(System.nanoTime() + safePush(pec, event));
1:7fa86e8: 			}
1:7fa86e8: 		}
1:7fa86e8: 		return d.getPromise();
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	private long safePush(PushEventConsumer< ? super T> pec,
1:7fa86e8: 			PushEvent<T> event) {
1:7fa86e8: 		try {
1:7fa86e8: 			long backpressure = pec.accept(event) * 1000000;
1:7fa86e8: 			if (backpressure < 0 && !event.isTerminal()) {
1:7fa86e8: 				closeConsumer(pec, PushEvent.close());
1:7fa86e8: 				return -1;
1:7fa86e8: 			}
1:7fa86e8: 			return backpressure;
1:7fa86e8: 		} catch (Exception e) {
1:7fa86e8: 			// TODO log?
1:7fa86e8: 			if (!event.isTerminal()) {
1:7fa86e8: 				closeConsumer(pec, PushEvent.error(e));
1:7fa86e8: 			}
1:7fa86e8: 			return -1;
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public void close() {
1:7fa86e8: 		close(PushEvent.close());
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	private void close(PushEvent<T> event) {
1:7fa86e8: 		List<PushEventConsumer< ? super T>> toClose;
1:7fa86e8: 		Deferred<Void> toFail = null;
1:7fa86e8: 		synchronized (lock) {
1:7fa86e8: 			if(!closed) {
1:7fa86e8: 				closed = true;
1:7fa86e8: 				
1:7fa86e8: 				toClose = new ArrayList<>(connected);
1:7fa86e8: 				connected.clear();
1:7fa86e8: 				queue.clear();
1:7fa86e8: 
1:7fa86e8: 				if(connectPromise != null) {
1:7fa86e8: 					toFail = connectPromise;
1:7fa86e8: 					connectPromise = null;
1:7fa86e8: 				}
1:7fa86e8: 			} else {
1:7fa86e8: 				toClose = emptyList();
1:7fa86e8: 			}
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		toClose.stream().forEach(pec -> doSend(pec, event));
1:7fa86e8: 
1:7fa86e8: 		if (toFail != null) {
1:7fa86e8: 			toFail.resolveWith(closedConnectPromise());
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		onClose.run();
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public void publish(T t) {
1:7fa86e8: 		enqueueEvent(PushEvent.data(t));
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public void endOfStream() {
1:7fa86e8: 		enqueueEvent(PushEvent.close());
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public void error(Exception e) {
1:7fa86e8: 		enqueueEvent(PushEvent.error(e));
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	private void enqueueEvent(PushEvent<T> event) {
1:7fa86e8: 		synchronized (lock) {
1:7fa86e8: 			if (closed || connected.isEmpty()) {
1:7fa86e8: 				return;
1:7fa86e8: 			}
1:7fa86e8: 		}
1:7fa86e8: 
1:7fa86e8: 		try {
1:7fa86e8: 			queuePolicy.doOffer(queue, event);
1:7fa86e8: 			boolean start;
1:7fa86e8: 			synchronized (lock) {
1:7fa86e8: 				start = !waitForFinishes && semaphore.tryAcquire();
1:7fa86e8: 			}
1:7fa86e8: 			if (start) {
1:7fa86e8: 				startWorker();
1:7fa86e8: 			}
1:7fa86e8: 		} catch (Exception e) {
1:7fa86e8: 			close(PushEvent.error(e));
1:7fa86e8: 			throw new IllegalStateException(
1:7fa86e8: 					"The queue policy threw an exception", e);
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@SuppressWarnings({
1:7fa86e8: 			"unchecked", "boxing"
1:7fa86e8: 	})
1:7fa86e8: 	private void startWorker() {
1:7fa86e8: 		worker.execute(() -> {
1:7fa86e8: 			try {
1:7fa86e8: 				
1:7fa86e8: 				for(;;) {
1:7fa86e8: 					PushEvent<T> event;
1:7fa86e8: 					List<PushEventConsumer< ? super T>> toCall;
1:7fa86e8: 					boolean resetWait = false;
1:7fa86e8: 					synchronized (lock) {
1:7fa86e8: 						if(waitForFinishes) {
1:7fa86e8: 							semaphore.release();
1:7fa86e8: 							while(waitForFinishes) {
1:7fa86e8: 								lock.notifyAll();
1:7fa86e8: 								lock.wait();
1:7fa86e8: 							}
1:7fa86e8: 							semaphore.acquire();
1:7fa86e8: 						}
1:7fa86e8: 
1:7fa86e8: 						event = (PushEvent<T>) queue.poll();
1:7fa86e8: 						
1:7fa86e8: 						if(event == null) {
1:7fa86e8: 							break;
1:7fa86e8: 						}
1:7fa86e8: 
1:7fa86e8: 						toCall = new ArrayList<>(connected);
1:7fa86e8: 						if (event.isTerminal()) {
1:7fa86e8: 							waitForFinishes = true;
1:7fa86e8: 							resetWait = true;
1:7fa86e8: 							connected.clear();
1:7fa86e8: 							while (!semaphore.tryAcquire(parallelism - 1)) {
1:7fa86e8: 								lock.wait();
1:7fa86e8: 							}
1:7fa86e8: 						}
1:7fa86e8: 					}
1:7fa86e8: 					
1:7fa86e8: 					List<Promise<Long>> calls = toCall.stream().map(pec -> {
1:7fa86e8: 						if (semaphore.tryAcquire()) {
1:7fa86e8: 							try {
1:7fa86e8: 								return doSendWithBackPressure(pec, event);
1:7fa86e8: 							} finally {
1:7fa86e8: 								semaphore.release();
1:7fa86e8: 							}
1:7fa86e8: 						} else {
1:7fa86e8: 							return Promises.resolved(
1:7fa86e8: 									System.nanoTime() + safePush(pec, event));
1:7fa86e8: 						}
1:7fa86e8: 					}).collect(toList());
1:7fa86e8: 
1:7fa86e8: 					long toWait = Promises.<Long,Long>all(calls)
1:7fa86e8: 							.map(l -> l.stream()
1:7fa86e8: 									.max((a,b) -> a.compareTo(b))
1:7fa86e8: 										.orElseGet(() -> System.nanoTime()))
1:7fa86e8: 							.getValue() - System.nanoTime();
1:7fa86e8: 					
1:7fa86e8: 					
1:7fa86e8: 					if (toWait > 0) {
1:7fa86e8: 						scheduler.schedule(this::startWorker, toWait,
1:7fa86e8: 								NANOSECONDS);
1:7fa86e8: 						return;
1:7fa86e8: 					}
1:7fa86e8: 
1:7fa86e8: 					if (resetWait == true) {
1:7fa86e8: 						synchronized (lock) {
1:7fa86e8: 							waitForFinishes = false;
1:7fa86e8: 							lock.notifyAll();
1:7fa86e8: 						}
1:7fa86e8: 					}
1:7fa86e8: 				}
1:7fa86e8: 
1:7fa86e8: 				semaphore.release();
1:7fa86e8: 			} catch (Exception e) {
1:7fa86e8: 				close(PushEvent.error(e));
1:7fa86e8: 			}
1:7fa86e8: 			if (queue.peek() != null && semaphore.tryAcquire()) {
1:7fa86e8: 				try {
1:7fa86e8: 					startWorker();
1:7fa86e8: 				} catch (Exception e) {
1:7fa86e8: 					close(PushEvent.error(e));
1:7fa86e8: 				}
1:7fa86e8: 			}
1:7fa86e8: 		});
1:7fa86e8: 
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public boolean isConnected() {
1:7fa86e8: 		synchronized (lock) {
1:7fa86e8: 			return !connected.isEmpty();
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public Promise<Void> connectPromise() {
1:7fa86e8: 		synchronized (lock) {
1:7fa86e8: 			if (closed) {
1:7fa86e8: 				return closedConnectPromise();
1:7fa86e8: 			}
1:7fa86e8: 
1:7fa86e8: 			if (connected.isEmpty()) {
1:7fa86e8: 				if (connectPromise == null) {
1:7fa86e8: 					connectPromise = new Deferred<>();
1:7fa86e8: 				}
1:7fa86e8: 				return connectPromise.getPromise();
1:7fa86e8: 			} else {
1:7fa86e8: 				return Promises.resolved(null);
1:7fa86e8: 			}
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	private Promise<Void> closedConnectPromise() {
1:7fa86e8: 		return Promises.failed(new IllegalStateException(
1:7fa86e8: 				"This SimplePushEventSource is closed"));
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.pushstream;
1: 
1: import static java.util.Collections.emptyList;
1: import static java.util.concurrent.TimeUnit.NANOSECONDS;
1: import static java.util.stream.Collectors.toList;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.RejectedExecutionException;
1: import java.util.concurrent.ScheduledExecutorService;
1: import java.util.concurrent.Semaphore;
1: 
1: import org.osgi.util.promise.Deferred;
1: import org.osgi.util.promise.Promise;
1: import org.osgi.util.promise.Promises;
1: import org.osgi.util.pushstream.PushEvent;
1: import org.osgi.util.pushstream.PushEventConsumer;
1: import org.osgi.util.pushstream.QueuePolicy;
1: import org.osgi.util.pushstream.SimplePushEventSource;
1: 
1: public class SimplePushEventSourceImpl<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1: 		implements SimplePushEventSource<T> {
1: 
1: 	private final Object								lock		= new Object();
1: 
1: 	private final Executor								worker;
1: 
1: 	private final ScheduledExecutorService				scheduler;
1: 
1: 	private final QueuePolicy<T,U>						queuePolicy;
1: 
1: 	private final U										queue;
1: 
1: 	private final int									parallelism;
1: 
1: 	private final Semaphore								semaphore;
1: 
1: 	private final List<PushEventConsumer< ? super T>>	connected	= new ArrayList<>();
1: 
1: 	private final Runnable								onClose;
1: 
1: 	private boolean										closed;
1: 	
1: 	private Deferred<Void>								connectPromise;
1: 
1: 	private boolean										waitForFinishes;
1: 
1: 
1: 	public SimplePushEventSourceImpl(Executor worker,
1: 			ScheduledExecutorService scheduler, QueuePolicy<T,U> queuePolicy,
1: 			U queue, int parallelism, Runnable onClose) {
1: 		this.worker = worker;
1: 		this.scheduler = scheduler;
1: 		this.queuePolicy = queuePolicy;
1: 		this.queue = queue;
1: 		this.parallelism = parallelism;
1: 		this.semaphore = new Semaphore(parallelism);
1: 		this.onClose = onClose;
1: 		this.closed = false;
1: 		this.connectPromise = null;
1: 	}
1: 
1: 	@Override
1: 	public AutoCloseable open(PushEventConsumer< ? super T> pec)
1: 			throws Exception {
1: 		Deferred<Void> toResolve = null;
1: 		synchronized (lock) {
1: 			if (closed) {
1: 				throw new IllegalStateException(
1: 						"This PushEventConsumer is closed");
1: 			}
1: 
1: 			toResolve = connectPromise;
1: 			connectPromise = null;
1: 
1: 			connected.add(pec);
1: 		}
1: 
1: 		if (toResolve != null) {
1: 			toResolve.resolve(null);
1: 		}
1: 
1: 		return () -> {
1: 			closeConsumer(pec, PushEvent.close());
1: 		};
1: 	}
1: 
1: 	private void closeConsumer(PushEventConsumer< ? super T> pec,
1: 			PushEvent<T> event) {
1: 		boolean sendClose;
1: 		synchronized (lock) {
1: 			sendClose = connected.remove(pec);
1: 		}
1: 		if (sendClose) {
1: 			doSend(pec, event);
1: 		}
1: 	}
1: 
1: 	private void doSend(PushEventConsumer< ? super T> pec, PushEvent<T> event) {
1: 		try {
1: 			worker.execute(() -> safePush(pec, event));
1: 		} catch (RejectedExecutionException ree) {
1: 			// TODO log?
1: 			if (!event.isTerminal()) {
1: 				close(PushEvent.error(ree));
1: 			} else {
1: 				safePush(pec, event);
1: 			}
1: 		}
1: 	}
1: 
1: 	@SuppressWarnings("boxing")
1: 	private Promise<Long> doSendWithBackPressure(
1: 			PushEventConsumer< ? super T> pec, PushEvent<T> event) {
1: 		Deferred<Long> d = new Deferred<>();
1: 		try {
1: 			worker.execute(
1: 					() -> d.resolve(System.nanoTime() + safePush(pec, event)));
1: 		} catch (RejectedExecutionException ree) {
1: 			// TODO log?
1: 			if (!event.isTerminal()) {
1: 				close(PushEvent.error(ree));
1: 				return Promises.resolved(System.nanoTime());
1: 			} else {
1: 				return Promises
1: 						.resolved(System.nanoTime() + safePush(pec, event));
1: 			}
1: 		}
1: 		return d.getPromise();
1: 	}
1: 
1: 	private long safePush(PushEventConsumer< ? super T> pec,
1: 			PushEvent<T> event) {
1: 		try {
1: 			long backpressure = pec.accept(event) * 1000000;
1: 			if (backpressure < 0 && !event.isTerminal()) {
1: 				closeConsumer(pec, PushEvent.close());
1: 				return -1;
1: 			}
1: 			return backpressure;
1: 		} catch (Exception e) {
1: 			// TODO log?
1: 			if (!event.isTerminal()) {
1: 				closeConsumer(pec, PushEvent.error(e));
1: 			}
1: 			return -1;
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public void close() {
1: 		close(PushEvent.close());
1: 	}
1: 
1: 	private void close(PushEvent<T> event) {
1: 		List<PushEventConsumer< ? super T>> toClose;
1: 		Deferred<Void> toFail = null;
1: 		synchronized (lock) {
1: 			if(!closed) {
1: 				closed = true;
1: 				
1: 				toClose = new ArrayList<>(connected);
1: 				connected.clear();
1: 				queue.clear();
1: 
1: 				if(connectPromise != null) {
1: 					toFail = connectPromise;
1: 					connectPromise = null;
1: 				}
1: 			} else {
1: 				toClose = emptyList();
1: 			}
1: 		}
1: 
1: 		toClose.stream().forEach(pec -> doSend(pec, event));
1: 
1: 		if (toFail != null) {
1: 			toFail.resolveWith(closedConnectPromise());
1: 		}
1: 
1: 		onClose.run();
1: 	}
1: 
1: 	@Override
1: 	public void publish(T t) {
1: 		enqueueEvent(PushEvent.data(t));
1: 	}
1: 
1: 	@Override
1: 	public void endOfStream() {
1: 		enqueueEvent(PushEvent.close());
1: 	}
1: 
1: 	@Override
1: 	public void error(Exception e) {
1: 		enqueueEvent(PushEvent.error(e));
1: 	}
1: 
1: 	private void enqueueEvent(PushEvent<T> event) {
1: 		synchronized (lock) {
1: 			if (closed || connected.isEmpty()) {
1: 				return;
1: 			}
1: 		}
1: 
1: 		try {
1: 			queuePolicy.doOffer(queue, event);
1: 			boolean start;
1: 			synchronized (lock) {
1: 				start = !waitForFinishes && semaphore.tryAcquire();
1: 			}
1: 			if (start) {
1: 				startWorker();
1: 			}
1: 		} catch (Exception e) {
1: 			close(PushEvent.error(e));
1: 			throw new IllegalStateException(
1: 					"The queue policy threw an exception", e);
1: 		}
1: 	}
1: 
1: 	@SuppressWarnings({
1: 			"unchecked", "boxing"
1: 	})
1: 	private void startWorker() {
1: 		worker.execute(() -> {
1: 			try {
1: 				
1: 				for(;;) {
1: 					PushEvent<T> event;
1: 					List<PushEventConsumer< ? super T>> toCall;
1: 					boolean resetWait = false;
1: 					synchronized (lock) {
1: 						if(waitForFinishes) {
1: 							semaphore.release();
1: 							while(waitForFinishes) {
1: 								lock.notifyAll();
1: 								lock.wait();
1: 							}
1: 							semaphore.acquire();
1: 						}
1: 
1: 						event = (PushEvent<T>) queue.poll();
1: 						
1: 						if(event == null) {
1: 							break;
1: 						}
1: 
1: 						toCall = new ArrayList<>(connected);
1: 						if (event.isTerminal()) {
1: 							waitForFinishes = true;
1: 							resetWait = true;
1: 							connected.clear();
1: 							while (!semaphore.tryAcquire(parallelism - 1)) {
1: 								lock.wait();
1: 							}
1: 						}
1: 					}
1: 					
1: 					List<Promise<Long>> calls = toCall.stream().map(pec -> {
1: 						if (semaphore.tryAcquire()) {
1: 							try {
1: 								return doSendWithBackPressure(pec, event);
1: 							} finally {
1: 								semaphore.release();
1: 							}
1: 						} else {
1: 							return Promises.resolved(
1: 									System.nanoTime() + safePush(pec, event));
1: 						}
1: 					}).collect(toList());
1: 
1: 					long toWait = Promises.<Long,Long>all(calls)
1: 							.map(l -> l.stream()
1: 									.max((a,b) -> a.compareTo(b))
1: 										.orElseGet(() -> System.nanoTime()))
1: 							.getValue() - System.nanoTime();
1: 					
1: 					
1: 					if (toWait > 0) {
1: 						scheduler.schedule(this::startWorker, toWait,
1: 								NANOSECONDS);
1: 						return;
1: 					}
1: 
1: 					if (resetWait == true) {
1: 						synchronized (lock) {
1: 							waitForFinishes = false;
1: 							lock.notifyAll();
1: 						}
1: 					}
1: 				}
1: 
1: 				semaphore.release();
1: 			} catch (Exception e) {
1: 				close(PushEvent.error(e));
1: 			}
1: 			if (queue.peek() != null && semaphore.tryAcquire()) {
1: 				try {
1: 					startWorker();
1: 				} catch (Exception e) {
1: 					close(PushEvent.error(e));
1: 				}
1: 			}
1: 		});
1: 
1: 	}
1: 
1: 	@Override
1: 	public boolean isConnected() {
1: 		synchronized (lock) {
1: 			return !connected.isEmpty();
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public Promise<Void> connectPromise() {
1: 		synchronized (lock) {
1: 			if (closed) {
1: 				return closedConnectPromise();
1: 			}
1: 
1: 			if (connected.isEmpty()) {
1: 				if (connectPromise == null) {
1: 					connectPromise = new Deferred<>();
1: 				}
1: 				return connectPromise.getPromise();
1: 			} else {
1: 				return Promises.resolved(null);
1: 			}
1: 		}
1: 	}
1: 
1: 	private Promise<Void> closedConnectPromise() {
1: 		return Promises.failed(new IllegalStateException(
1: 				"This SimplePushEventSource is closed"));
1: 	}
1: 
1: }
============================================================================