1:1751b0a: /**
1:1751b0a:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:1751b0a:  *  contributor license agreements.  See the NOTICE file distributed with
1:1751b0a:  *  this work for additional information regarding copyright ownership.
1:1751b0a:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:1751b0a:  *  (the "License"); you may not use this file except in compliance with
1:1751b0a:  *  the License.  You may obtain a copy of the License at
1:1751b0a:  *
1:1751b0a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1751b0a:  *
1:1751b0a:  *  Unless required by applicable law or agreed to in writing, software
1:1751b0a:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:1751b0a:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1751b0a:  *  See the License for the specific language governing permissions and
1:1751b0a:  *  limitations under the License.
1:1751b0a:  */
1:1751b0a: 
1:6d5ae4f: package org.apache.aries.transaction.internal;
1:1751b0a: 
1:1751b0a: import javax.transaction.xa.Xid;
1:1751b0a: import org.apache.geronimo.transaction.manager.XidFactory;
1:1751b0a: import org.apache.geronimo.transaction.manager.XidImpl;
1:1751b0a: 
1:1751b0a: /**
1:1751b0a:  * Factory for transaction ids that are ever increasing
1:1751b0a:  * allowing determination of new transactions
1:1751b0a:  * The Xid is constructed of two parts:
1:1751b0a:  * <ol><li>8 byte id (LSB first)</li>
1:1751b0a:  * <li>base id</li>
1:1751b0a:  * <ol>
1:1751b0a:  * can't easily extend geronimo XidFactoryImpl b/c count is private
1:1751b0a:  */
1:1751b0a: public class XidFactoryImpl implements XidFactory {
1:1751b0a:     private final byte[] baseId = new byte[Xid.MAXGTRIDSIZE];
1:1751b0a:     private final long start = System.currentTimeMillis();
1:1751b0a:     private long count = start;
1:1751b0a: 
1:1751b0a:     public XidFactoryImpl(byte[] tmId) {
1:1751b0a:         System.arraycopy(tmId, 0, baseId, 8, tmId.length);
1:1751b0a:     }
1:1751b0a: 
1:1751b0a:     public Xid createXid() {
1:1751b0a:         byte[] globalId = (byte[]) baseId.clone();
1:1751b0a:         long id;
1:1751b0a:         synchronized (this) {
1:1751b0a:             id = count++;
1:1751b0a:         }
1:1751b0a:         insertLong(id, globalId, 0);
1:1751b0a:         return new XidImpl(globalId);
1:1751b0a:     }
1:1751b0a: 
1:1751b0a:     public Xid createBranch(Xid globalId, int branch) {
1:1751b0a:         byte[] branchId = (byte[]) baseId.clone();
1:1751b0a:         branchId[0] = (byte) branch;
1:1751b0a:         branchId[1] = (byte) (branch >>> 8);
1:1751b0a:         branchId[2] = (byte) (branch >>> 16);
1:1751b0a:         branchId[3] = (byte) (branch >>> 24);
1:1751b0a:         insertLong(start, branchId, 4);
1:1751b0a:         return new XidImpl(globalId, branchId);
1:1751b0a:     }
1:1751b0a: 
1:1751b0a:     public boolean matchesGlobalId(byte[] globalTransactionId) {
1:1751b0a:         if (globalTransactionId.length != Xid.MAXGTRIDSIZE) {
1:1751b0a:             return false;
1:1751b0a:         }
1:1751b0a:         for (int i = 8; i < globalTransactionId.length; i++) {
1:1751b0a:             if (globalTransactionId[i] != baseId[i]) {
1:1751b0a:                 return false;
1:1751b0a:             }
1:1751b0a:         }
1:1751b0a:         // for recovery, only match old transactions
1:1751b0a:         long id = extractLong(globalTransactionId, 0);
1:1751b0a:         return (id < start);
1:1751b0a:     }
1:1751b0a: 
1:1751b0a:     public boolean matchesBranchId(byte[] branchQualifier) {
1:1751b0a:         if (branchQualifier.length != Xid.MAXBQUALSIZE) {
1:1751b0a:             return false;
1:1751b0a:         }
1:1751b0a:         long id = extractLong(branchQualifier, 4);
1:1751b0a:         if (id >= start) {
1:1751b0a:             // newly created branch, not recoverable
1:1751b0a:             return false;
1:1751b0a:         }
1:1751b0a: 
1:1751b0a:         for (int i = 12; i < branchQualifier.length; i++) {
1:1751b0a:             if (branchQualifier[i] != baseId[i]) {
1:1751b0a:                 return false;
1:1751b0a:             }
1:1751b0a:         }
1:1751b0a:         return true;
1:1751b0a:     }
1:1751b0a: 
1:1751b0a:     public Xid recover(int formatId, byte[] globalTransactionid, byte[] branchQualifier) {
1:1751b0a:         return new XidImpl(formatId, globalTransactionid, branchQualifier);
1:1751b0a:     }
1:1751b0a: 
1:1751b0a:     static void insertLong(long value, byte[] bytes, int offset) {
1:1751b0a:         bytes[offset + 0] = (byte) value;
1:1751b0a:         bytes[offset + 1] = (byte) (value >>> 8);
1:1751b0a:         bytes[offset + 2] = (byte) (value >>> 16);
1:1751b0a:         bytes[offset + 3] = (byte) (value >>> 24);
1:1751b0a:         bytes[offset + 4] = (byte) (value >>> 32);
1:1751b0a:         bytes[offset + 5] = (byte) (value >>> 40);
1:1751b0a:         bytes[offset + 6] = (byte) (value >>> 48);
1:1751b0a:         bytes[offset + 7] = (byte) (value >>> 56);
1:1751b0a:     }
1:1751b0a: 
1:1751b0a:     static long extractLong(byte[] bytes, int offset) {
1:1751b0a:         return (bytes[offset + 0] & 0xff)
1:1751b0a:                 + (((bytes[offset + 1] & 0xff)) << 8)
1:1751b0a:                 + (((bytes[offset + 2] & 0xff)) << 16)
1:1751b0a:                 + (((bytes[offset + 3] & 0xffL)) << 24)
1:1751b0a:                 + (((bytes[offset + 4] & 0xffL)) << 32)
1:1751b0a:                 + (((bytes[offset + 5] & 0xffL)) << 40)
1:1751b0a:                 + (((bytes[offset + 6] & 0xffL)) << 48)
1:1751b0a:                 + (((long) bytes[offset + 7]) << 56);
1:1751b0a:     }
1:1751b0a: 
1:1751b0a: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:6d5ae4f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.transaction.internal;
commit:1751b0a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
0: package org.apache.aries.transaction;
1: 
1: import javax.transaction.xa.Xid;
1: import org.apache.geronimo.transaction.manager.XidFactory;
1: import org.apache.geronimo.transaction.manager.XidImpl;
1: 
1: /**
1:  * Factory for transaction ids that are ever increasing
1:  * allowing determination of new transactions
1:  * The Xid is constructed of two parts:
1:  * <ol><li>8 byte id (LSB first)</li>
1:  * <li>base id</li>
1:  * <ol>
1:  * can't easily extend geronimo XidFactoryImpl b/c count is private
1:  */
1: public class XidFactoryImpl implements XidFactory {
1:     private final byte[] baseId = new byte[Xid.MAXGTRIDSIZE];
1:     private final long start = System.currentTimeMillis();
1:     private long count = start;
1: 
1:     public XidFactoryImpl(byte[] tmId) {
1:         System.arraycopy(tmId, 0, baseId, 8, tmId.length);
1:     }
1: 
1:     public Xid createXid() {
1:         byte[] globalId = (byte[]) baseId.clone();
1:         long id;
1:         synchronized (this) {
1:             id = count++;
1:         }
1:         insertLong(id, globalId, 0);
1:         return new XidImpl(globalId);
1:     }
1: 
1:     public Xid createBranch(Xid globalId, int branch) {
1:         byte[] branchId = (byte[]) baseId.clone();
1:         branchId[0] = (byte) branch;
1:         branchId[1] = (byte) (branch >>> 8);
1:         branchId[2] = (byte) (branch >>> 16);
1:         branchId[3] = (byte) (branch >>> 24);
1:         insertLong(start, branchId, 4);
1:         return new XidImpl(globalId, branchId);
1:     }
1: 
1:     public boolean matchesGlobalId(byte[] globalTransactionId) {
1:         if (globalTransactionId.length != Xid.MAXGTRIDSIZE) {
1:             return false;
1:         }
1:         for (int i = 8; i < globalTransactionId.length; i++) {
1:             if (globalTransactionId[i] != baseId[i]) {
1:                 return false;
1:             }
1:         }
1:         // for recovery, only match old transactions
1:         long id = extractLong(globalTransactionId, 0);
1:         return (id < start);
1:     }
1: 
1:     public boolean matchesBranchId(byte[] branchQualifier) {
1:         if (branchQualifier.length != Xid.MAXBQUALSIZE) {
1:             return false;
1:         }
1:         long id = extractLong(branchQualifier, 4);
1:         if (id >= start) {
1:             // newly created branch, not recoverable
1:             return false;
1:         }
1: 
1:         for (int i = 12; i < branchQualifier.length; i++) {
1:             if (branchQualifier[i] != baseId[i]) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1: 
1:     public Xid recover(int formatId, byte[] globalTransactionid, byte[] branchQualifier) {
1:         return new XidImpl(formatId, globalTransactionid, branchQualifier);
1:     }
1: 
1:     static void insertLong(long value, byte[] bytes, int offset) {
1:         bytes[offset + 0] = (byte) value;
1:         bytes[offset + 1] = (byte) (value >>> 8);
1:         bytes[offset + 2] = (byte) (value >>> 16);
1:         bytes[offset + 3] = (byte) (value >>> 24);
1:         bytes[offset + 4] = (byte) (value >>> 32);
1:         bytes[offset + 5] = (byte) (value >>> 40);
1:         bytes[offset + 6] = (byte) (value >>> 48);
1:         bytes[offset + 7] = (byte) (value >>> 56);
1:     }
1: 
1:     static long extractLong(byte[] bytes, int offset) {
1:         return (bytes[offset + 0] & 0xff)
1:                 + (((bytes[offset + 1] & 0xff)) << 8)
1:                 + (((bytes[offset + 2] & 0xff)) << 16)
1:                 + (((bytes[offset + 3] & 0xffL)) << 24)
1:                 + (((bytes[offset + 4] & 0xffL)) << 32)
1:                 + (((bytes[offset + 5] & 0xffL)) << 40)
1:                 + (((bytes[offset + 6] & 0xffL)) << 48)
1:                 + (((long) bytes[offset + 7]) << 56);
1:     }
1: 
1: }
============================================================================