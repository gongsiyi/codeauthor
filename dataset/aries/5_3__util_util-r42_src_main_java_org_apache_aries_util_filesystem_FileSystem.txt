1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
4:8914925: 
1:910fec0: package org.apache.aries.util.filesystem;
1:8914925: 
1:8914925: import java.io.File;
1:754e2c3: import java.io.FileOutputStream;
1:754e2c3: import java.io.IOException;
1:754e2c3: import java.io.InputStream;
1:754e2c3: import java.util.zip.ZipFile;
1:910fec0: 
1:910fec0: import org.apache.aries.util.filesystem.impl.FileSystemImpl;
1:754e2c3: import org.apache.aries.util.filesystem.impl.NestedZipDirectory;
1:754e2c3: import org.apache.aries.util.io.IOUtils;
1:8914925: 
1:8914925: /**
1:8914925:  * An abstraction of a file system. A file system can be a zip, or a directory.
1:8914925:  */
1:8914925: public class FileSystem {
1:8914925: 
1:8914925:   /**
1:8914925:    * This method gets the IDirectory that represents the root of a virtual file
1:8914925:    * system. The provided file can either identify a directory, or a zip file.
1:8914925:    * 
1:8914925:    * @param fs the zip file.
1:8914925:    * @return   the root of the virtual FS.
1:8914925:    */
1:8914925:   public static IDirectory getFSRoot(File fs)
1:8914925:   {
1:e62fca9: 	  return FileSystemImpl.getFSRoot(fs, null);
5:8914925:   }
1:754e2c3:   
1:754e2c3:   /**
1:754e2c3:    * This method gets an ICloseableDirectory that represents the root of a virtual file
1:754e2c3:    * system. The provided InputStream should represent a zip file.
1:754e2c3:    * 
1:754e2c3:    * When this {@link ICloseableDirectory} is closed then backing resources will be
1:754e2c3:    * cleaned up.
1:754e2c3:    * 
1:754e2c3:    * @param is An input stream to a zip file.
1:754e2c3:    * @return   the root of the virtual FS.
1:754e2c3:    */
1:754e2c3:   public static ICloseableDirectory getFSRoot(InputStream is)
1:754e2c3:   {
1:754e2c3:     return FileSystemImpl.getFSRoot(is);
1:754e2c3:   }
1:8914925: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:754e2c3
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.zip.ZipFile;
1: import org.apache.aries.util.filesystem.impl.NestedZipDirectory;
1: import org.apache.aries.util.io.IOUtils;
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * This method gets an ICloseableDirectory that represents the root of a virtual file
1:    * system. The provided InputStream should represent a zip file.
1:    * 
1:    * When this {@link ICloseableDirectory} is closed then backing resources will be
1:    * cleaned up.
1:    * 
1:    * @param is An input stream to a zip file.
1:    * @return   the root of the virtual FS.
1:    */
1:   public static ICloseableDirectory getFSRoot(InputStream is)
1:   {
1:     return FileSystemImpl.getFSRoot(is);
1:   }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem;
1: 
1: import org.apache.aries.util.filesystem.impl.FileSystemImpl;
commit:e62fca9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.filesystem.impl.FileSystemImpl;
/////////////////////////////////////////////////////////////////////////
1: 	  return FileSystemImpl.getFSRoot(fs, null);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.utils.filesystem;
1: 
1: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
1: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.utils.filesystem.impl.DirectoryImpl;
0: import org.apache.aries.application.utils.filesystem.impl.ZipDirectory;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * An abstraction of a file system. A file system can be a zip, or a directory.
1:  */
1: public class FileSystem {
1: 
0:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
1: 
1:   /**
1:    * This method gets the IDirectory that represents the root of a virtual file
1:    * system. The provided file can either identify a directory, or a zip file.
1:    * 
1:    * @param fs the zip file.
1:    * @return   the root of the virtual FS.
1:    */
1:   public static IDirectory getFSRoot(File fs)
1:   {
0:     IDirectory dir = null;
1:     
0:     if (fs.exists()) {
0:       if (fs.isDirectory()) {
0:         dir = new DirectoryImpl(fs, fs);
0:       } else if (fs.isFile()) {
0:         try {
0:           dir = new ZipDirectory(fs, fs);
0:         } catch (IOException e) {
0:           _logger.error ("IOException in IDirectory.getFSRoot", e);
1:         }
1:       }
1:     }
0:     else {
0:       // since this method does not throw an exception but just returns null, make sure we do not lose the error
0:       _logger.error("File not found in IDirectory.getFSRoot", new FileNotFoundException(fs.getPath()));
1:     }
0:     return dir;
1:   }
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:4febb9f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem;
0: import org.apache.aries.application.utils.filesystem.impl.DirectoryImpl;
0: import org.apache.aries.application.utils.filesystem.impl.ZipDirectory;
commit:3c38842
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.filesystem.utils;
0: 
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
0: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.utils.impl.DirectoryImpl;
0: import org.apache.aries.application.filesystem.utils.impl.ZipDirectory;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * An abstraction of a file system. A file system can be a zip, or a directory.
0:  */
0: public class FileSystem {
0: 
0:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
0: 
0:   /**
0:    * This method gets the IDirectory that represents the root of a virtual file
0:    * system. The provided file can either identify a directory, or a zip file.
0:    * 
0:    * @param fs the zip file.
0:    * @return   the root of the virtual FS.
0:    */
0:   public static IDirectory getFSRoot(File fs)
0:   {
0:     IDirectory dir = null;
0:     
0:     if (fs.exists()) {
0:       if (fs.isDirectory()) {
0:         dir = new DirectoryImpl(fs, fs);
0:       } else if (fs.isFile()) {
0:         try {
0:           dir = new ZipDirectory(fs, fs);
0:         } catch (IOException e) {
0:           _logger.error ("IOException in IDirectory.getFSRoot", e);
0:         }
0:       }
0:     }
0:     else {
0:       // since this method does not throw an exception but just returns null, make sure we do not lose the error
0:       _logger.error("File not found in IDirectory.getFSRoot", new FileNotFoundException(fs.getPath()));
0:     }
0:     return dir;
0:   }
0: }
============================================================================