1:fc02f66: /*
1:fc02f66:  * Licensed to the Apache Software Foundation (ASF) under one
1:fc02f66:  * or more contributor license agreements.  See the NOTICE file
1:fc02f66:  * distributed with this work for additional information
1:fc02f66:  * regarding copyright ownership.  The ASF licenses this file
1:fc02f66:  * to you under the Apache License, Version 2.0 (the
1:fc02f66:  * "License"); you may not use this file except in compliance
1:fc02f66:  * with the License.  You may obtain a copy of the License at
1:fc02f66:  *
1:fc02f66:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fc02f66:  *
1:fc02f66:  * Unless required by applicable law or agreed to in writing,
1:fc02f66:  * software distributed under the License is distributed on an
1:3c19a77:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fc02f66:  * KIND, either express or implied.  See the License for the
1:fc02f66:  * specific language governing permissions and limitations
1:fc02f66:  * under the License.
2:fc02f66:  */
1:fc02f66: package org.apache.aries.jndi;
32:fc02f66: 
1:fc02f66: import java.util.Hashtable;
1:fc02f66: 
1:fc02f66: import javax.naming.Context;
1:fc02f66: import javax.naming.Name;
1:fc02f66: import javax.naming.NamingException;
1:fc02f66: import javax.naming.directory.Attributes;
1:fc02f66: import javax.naming.spi.DirObjectFactory;
1:7b2544b: import javax.naming.spi.DirectoryManager;
1:7b2544b: import javax.naming.spi.NamingManager;
1:fc02f66: import javax.naming.spi.ObjectFactory;
1:fc02f66: import javax.naming.spi.ObjectFactoryBuilder;
1:fc02f66: 
1:fc02f66: import org.osgi.framework.BundleContext;
1:fc02f66: 
1:9e140bf: public class OSGiObjectFactoryBuilder implements ObjectFactoryBuilder, ObjectFactory, DirObjectFactory {
1:fc02f66: 
1:7b2544b:     private BundleContext defaultContext;
1:fc02f66:     
1:7b2544b:     public OSGiObjectFactoryBuilder(BundleContext ctx) {
1:7b2544b:         defaultContext = ctx;
32:fc02f66:     }
1:fc02f66: 
1:9e140bf:     public ObjectFactory createObjectFactory(Object obj, Hashtable<?, ?> environment)
1:9e140bf:         throws NamingException {
1:9e140bf:         return this;
1:fc02f66:     }
1:fc02f66: 
1:9e140bf:     public Object getObjectInstance(Object obj,
1:9e140bf:                                     Name name,
1:9e140bf:                                     Context nameCtx,
1:9e140bf:                                     Hashtable<?, ?> environment) throws Exception {
1:2ba6269:         
1:2ba6269:         if (environment == null) {
1:2ba6269:             environment = new Hashtable();
1:2ba6269:         }
1:2ba6269:         
1:7b2544b:         BundleContext callerContext = getCallerBundleContext(environment);
1:7b2544b:         if (callerContext == null) {
1:7b2544b:             return obj;
1:7b2544b:         }
1:7b2544b:         DirObjectFactoryHelper helper = new DirObjectFactoryHelper(defaultContext, callerContext);
1:9e140bf:         return helper.getObjectInstance(obj, name, nameCtx, environment);
1:fc02f66:     }
1:fc02f66: 
1:9e140bf:     public Object getObjectInstance(Object obj,
1:9e140bf:                                     Name name,
1:9e140bf:                                     Context nameCtx,
1:9e140bf:                                     Hashtable<?, ?> environment,
1:9e140bf:                                     Attributes attrs) throws Exception {
1:2ba6269:         
1:2ba6269:         if (environment == null) {
1:2ba6269:             environment = new Hashtable();
1:2ba6269:         }
1:2ba6269:         
1:7b2544b:         BundleContext callerContext = getCallerBundleContext(environment);
1:7b2544b:         if (callerContext == null) {
1:7b2544b:             return obj;
1:7b2544b:         }
1:7b2544b:         DirObjectFactoryHelper helper = new DirObjectFactoryHelper(defaultContext, callerContext);
1:9e140bf:         return helper.getObjectInstance(obj, name, nameCtx, environment, attrs);
1:9e140bf:     }
1:fc02f66: 
1:7b2544b:     private BundleContext getCallerBundleContext(Hashtable<?, ?> environment) throws NamingException {
1:d90eeba:         AugmenterInvokerImpl.getInstance().augmentEnvironment(environment);
1:a1d48ad:         BundleContext context = Utils.getBundleContext(environment, NamingManager.class);        
1:7b2544b:         if (context == null) {
1:a1d48ad:             context = Utils.getBundleContext(environment, DirectoryManager.class);
1:7b2544b:         }
1:d90eeba:         AugmenterInvokerImpl.getInstance().unaugmentEnvironment(environment);
1:7b2544b:         return context;
1:7b2544b:     }
1:fc02f66: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:2ba6269
/////////////////////////////////////////////////////////////////////////
1:         
1:         if (environment == null) {
1:             environment = new Hashtable();
1:         }
1:         
/////////////////////////////////////////////////////////////////////////
1:         
1:         if (environment == null) {
1:             environment = new Hashtable();
1:         }
1:         
commit:d90eeba
/////////////////////////////////////////////////////////////////////////
1:         AugmenterInvokerImpl.getInstance().augmentEnvironment(environment);
1:         AugmenterInvokerImpl.getInstance().unaugmentEnvironment(environment);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:a1d48ad
/////////////////////////////////////////////////////////////////////////
1:         BundleContext context = Utils.getBundleContext(environment, NamingManager.class);        
1:             context = Utils.getBundleContext(environment, DirectoryManager.class);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.spi.DirectoryManager;
1: import javax.naming.spi.NamingManager;
/////////////////////////////////////////////////////////////////////////
1:     private BundleContext defaultContext;
1:     public OSGiObjectFactoryBuilder(BundleContext ctx) {
1:         defaultContext = ctx;
/////////////////////////////////////////////////////////////////////////
1:         BundleContext callerContext = getCallerBundleContext(environment);
1:         if (callerContext == null) {
1:             return obj;
1:         }
1:         DirObjectFactoryHelper helper = new DirObjectFactoryHelper(defaultContext, callerContext);
/////////////////////////////////////////////////////////////////////////
1:         BundleContext callerContext = getCallerBundleContext(environment);
1:         if (callerContext == null) {
1:             return obj;
1:         }
1:         DirObjectFactoryHelper helper = new DirObjectFactoryHelper(defaultContext, callerContext);
1:     private BundleContext getCallerBundleContext(Hashtable<?, ?> environment) throws NamingException {
0:         BundleContext context = Utils.getBundleContext(environment, NamingManager.class.getName());        
1:         if (context == null) {
0:             context = Utils.getBundleContext(environment, DirectoryManager.class.getName());
1:         }
1:         return context;
1:     }
commit:9e140bf
/////////////////////////////////////////////////////////////////////////
1: public class OSGiObjectFactoryBuilder implements ObjectFactoryBuilder, ObjectFactory, DirObjectFactory {
0:     private static DirObjectFactoryHelper helper = new DirObjectFactoryHelper();
0:     public static void setBundleContext(BundleContext ctx) {
0:         helper.setBundleContext(ctx);
1:     public ObjectFactory createObjectFactory(Object obj, Hashtable<?, ?> environment)
1:         throws NamingException {
1:         return this;
1:     public Object getObjectInstance(Object obj,
1:                                     Name name,
1:                                     Context nameCtx,
1:                                     Hashtable<?, ?> environment) throws Exception {
1:         return helper.getObjectInstance(obj, name, nameCtx, environment);
1:     public Object getObjectInstance(Object obj,
1:                                     Name name,
1:                                     Context nameCtx,
1:                                     Hashtable<?, ?> environment,
1:                                     Attributes attrs) throws Exception {
1:         return helper.getObjectInstance(obj, name, nameCtx, environment, attrs);
1: }
commit:3c19a77
/////////////////////////////////////////////////////////////////////////
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
commit:e6f69cc
commit:fc02f66
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
0: import java.util.Enumeration;
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.NamingException;
0: import javax.naming.RefAddr;
0: import javax.naming.Reference;
0: import javax.naming.Referenceable;
0: import javax.naming.StringRefAddr;
1: import javax.naming.directory.Attributes;
1: import javax.naming.spi.DirObjectFactory;
1: import javax.naming.spi.ObjectFactory;
1: import javax.naming.spi.ObjectFactoryBuilder;
1: 
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.framework.ServiceReference;
1: 
0: public class OSGiObjectFactoryBuilder implements ObjectFactoryBuilder, ObjectFactory, DirObjectFactory
0: {
0:   /** The bundle context we use for accessing the SR */
0:   private static BundleContext context;
1:   
0:   public static void setBundleContext(BundleContext ctx)
0:   {
0:     context = ctx;
1:   }
1: 
0:   public ObjectFactory createObjectFactory(Object obj, Hashtable<?, ?> environment)
0:       throws NamingException
0:   {
0:     return this;
1:   }
1: 
0:   public Object getObjectInstance(Object obj, Name name, Context nameCtx,
0:       Hashtable<?, ?> environment) throws Exception
0:   {
1:   	
0:     Reference ref = null;
1: 
0:     if (obj instanceof Reference) {
0:       ref = (Reference) obj;
0:     } else if (obj instanceof Referenceable) {
0:       ref = ((Referenceable)obj).getReference();
1:     }
1: 
0:     Object result = ref;
1: 
0:     if (ref != null) {
0:       String className = ref.getFactoryClassName();
1: 
0:       if (className != null) {
0:         result = getObjectInstanceUsingClassName(obj, className, obj, name, nameCtx, environment);
0:       } else {
0:         result = getObjectInstanceUsingRefAddress(ref.getAll(), obj, name, nameCtx, environment);
1: 
0:         if (result == null || result == obj) {
0:           result = getObjectInstanceUsingAllObjectFactories(obj, name, nameCtx, environment);
1:         }
1:       }
1:     }
1: 
0:     if (result == null) result = ref;
1:     
0:     return result;
1:   }
1: 
0:   private Object getObjectInstanceUsingAllObjectFactories(Object obj, Name name, Context nameCtx,
0:       Hashtable<?, ?> environment)
0:   {
0:     Object result = obj;
0:     try {
0:       ServiceReference[] refs = context.getAllServiceReferences(ObjectFactory.class.getName(), null);
1: 
0:       if (refs != null) {
0:         for (ServiceReference ref : refs) {
0:           ObjectFactory factory = (ObjectFactory) context.getService(ref);
1:   
0:           if (factory != null) {
0:             try {
0:               result = factory.getObjectInstance(obj, name, nameCtx, environment);
0:             } catch (Exception e) {
0:               // TODO Auto-generated catch block
0:               e.printStackTrace();
1:             }
1:   
0:             context.ungetService(ref);
1:   
0:             // if the result comes back and is not null and not the reference
0:             // object then we should return the result, so break out of the
0:             // loop we are in.
0:             if (result != null && result != obj) break;
1:           }
1:         }
1:       }
0:     } catch (InvalidSyntaxException e) {
0:       // TODO Auto-generated catch block
0:       e.printStackTrace();
1:     }
1: 
0:     if (result == null) result = obj;
1:   	
0:     return result;
1:   }
1: 
0:   private Object getObjectInstanceUsingRefAddress(Enumeration<RefAddr> addresses, Object obj, Name name,
0:       Context nameCtx, Hashtable<?, ?> environment)
0:   {
0:     Object result = obj;
1: 
0:     while (addresses.hasMoreElements()) {
0:       RefAddr address = addresses.nextElement();
0:       if (address instanceof StringRefAddr && "URL".equals(address.getType())) {
0:         String urlScheme = (String)address.getContent();
0:         ObjectFactory factory = null;
0:         ServiceReference ref = null;
0:         try {
0:           ServiceReference[] services = context.getServiceReferences(ObjectFactory.class.getName(), "(|(osgi.jndi.urlScheme=" + urlScheme + ")(urlScheme=" + urlScheme + "))");
1: 
0:           if (services != null) {
0:             ref = services[0];
0:             factory = (ObjectFactory) context.getService(ref);
1:           }
0:         } catch (InvalidSyntaxException e) {
0:           e.printStackTrace();
1:         }
1: 
0:         if (factory != null) {
0:           try {
0:             result = factory.getObjectInstance(obj, name, nameCtx, environment);
0:           } catch (Exception e) {
0:             // TODO Auto-generated catch block
0:             e.printStackTrace();
1:           }
1:         }
1: 
0:         if (ref != null) context.ungetService(ref);
1:         
0:         // if the result is not null and references a different object from
0:         // the obj then we have resolved the object, so we stop searching.
0:         if (result != null && result != obj) break;
1:       }
1:     }
1: 
0:     return result;
1:   }
1: 
0:   private Object getObjectInstanceUsingClassName(Object reference, String className, Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)
0:   {
0:     Object result = obj;
1: 
0:     ObjectFactory factory = null;
0:     ServiceReference ref = null;
1: 
0:     if (className != null) {
0:       try {
0:         ServiceReference[] refs = context.getAllServiceReferences(className, null);
1: 
0:         if (refs != null) {
0:           for (ServiceReference ref1 : refs) {
0:             factory = (ObjectFactory) context.getService(ref1);
1: 
0:             if (factory != null) {
0:               ref = ref1;
0:               break;
1:             }
1:           }
1:         }
0:       } catch (InvalidSyntaxException e) {
0:         // TODO Auto-generated catch block
0:         e.printStackTrace();
1:       }
1:     }
1: 
0:     if (factory == null) {
0:       try {
0:         ServiceReference[] refs = context.getServiceReferences(ObjectFactoryBuilder.class.getName(), null);
1: 
0:         if (refs != null) {
0:           for (ServiceReference ofRef : refs) {
0:             ObjectFactoryBuilder builder = (ObjectFactoryBuilder) context.getService(ofRef);
0:             try {
0:               factory = builder.createObjectFactory(reference, environment);
0:             } catch (NamingException e) {
0:               // TODO Auto-generated catch block
0:               e.printStackTrace();
1:             }
1: 
0:             context.ungetService(ofRef);
0:             if (factory != null) {
0:               break;
1:             }
1:           }
1:         }
0:       } catch (InvalidSyntaxException e) {
0:         // TODO Auto-generated catch block
0:         e.printStackTrace();
1:       }
1:     }
1: 
0:     if (factory != null) {
0:       try {
0:         result = factory.getObjectInstance(obj, name, nameCtx, environment);
0:       } catch (Exception e) {
0:         // TODO Auto-generated catch block
0:         e.printStackTrace();
0:       } finally {
0:         if (ref != null) context.ungetService(ref);
1:       }
1:     }
1: 
0:     return result;
1:   }
1:   
0:   /**
0:    * when we get called by DirectoryManager#getObjectInstance if we can't find the object 
0:    * instance, we just need to return the passed in refInfo  
1:    */
0:   public Object getObjectInstance(Object refInfo, Name name, Context nameCtx, 
0:                                   Hashtable<?, ?> environment, Attributes attrs) throws Exception {
0:       Object result = getObjectInstance(refInfo, name, nameCtx, environment);
0:       return result == null ? refInfo : result;
1:   }
1: 
commit:8681af1
/////////////////////////////////////////////////////////////////////////
0: import javax.naming.directory.Attributes;
0: import javax.naming.spi.DirObjectFactory;
/////////////////////////////////////////////////////////////////////////
0: public class OSGiObjectFactoryBuilder implements ObjectFactoryBuilder, ObjectFactory, DirObjectFactory
/////////////////////////////////////////////////////////////////////////
0:   
0:   /**
0:    * when we get called by DirectoryManager#getObjectInstance if we can't find the object 
0:    * instance, we just need to return the passed in refInfo  
0:    */
0:   public Object getObjectInstance(Object refInfo, Name name, Context nameCtx, 
0:                                   Hashtable<?, ?> environment, Attributes attrs) throws Exception {
0:       Object result = getObjectInstance(refInfo, name, nameCtx, environment);
0:       return result == null ? refInfo : result;
0:   }
0: 
commit:1a3015d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.jndi;
0: 
0: import java.util.Enumeration;
0: import java.util.Hashtable;
0: 
0: import javax.naming.Context;
0: import javax.naming.Name;
0: import javax.naming.NamingException;
0: import javax.naming.RefAddr;
0: import javax.naming.Reference;
0: import javax.naming.Referenceable;
0: import javax.naming.StringRefAddr;
0: import javax.naming.spi.ObjectFactory;
0: import javax.naming.spi.ObjectFactoryBuilder;
0: 
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.framework.ServiceReference;
0: 
0: public class OSGiObjectFactoryBuilder implements ObjectFactoryBuilder, ObjectFactory
0: {
0:   /** The bundle context we use for accessing the SR */
0:   private static BundleContext context;
0:   
0:   public static void setBundleContext(BundleContext ctx)
0:   {
0:     context = ctx;
0:   }
0: 
0:   public ObjectFactory createObjectFactory(Object obj, Hashtable<?, ?> environment)
0:       throws NamingException
0:   {
0:     return this;
0:   }
0: 
0:   public Object getObjectInstance(Object obj, Name name, Context nameCtx,
0:       Hashtable<?, ?> environment) throws Exception
0:   {
0:   	
0:     Reference ref = null;
0: 
0:     if (obj instanceof Reference) {
0:       ref = (Reference) obj;
0:     } else if (obj instanceof Referenceable) {
0:       ref = ((Referenceable)obj).getReference();
0:     }
0: 
0:     Object result = ref;
0: 
0:     if (ref != null) {
0:       String className = ref.getFactoryClassName();
0: 
0:       if (className != null) {
0:         result = getObjectInstanceUsingClassName(obj, className, obj, name, nameCtx, environment);
0:       } else {
0:         result = getObjectInstanceUsingRefAddress(ref.getAll(), obj, name, nameCtx, environment);
0: 
0:         if (result == null || result == obj) {
0:           result = getObjectInstanceUsingAllObjectFactories(obj, name, nameCtx, environment);
0:         }
0:       }
0:     }
0: 
0:     if (result == null) result = ref;
0:     
0:     return result;
0:   }
0: 
0:   private Object getObjectInstanceUsingAllObjectFactories(Object obj, Name name, Context nameCtx,
0:       Hashtable<?, ?> environment)
0:   {
0:     Object result = obj;
0:     try {
0:       ServiceReference[] refs = context.getAllServiceReferences(ObjectFactory.class.getName(), null);
0: 
0:       if (refs != null) {
0:         for (ServiceReference ref : refs) {
0:           ObjectFactory factory = (ObjectFactory) context.getService(ref);
0:   
0:           if (factory != null) {
0:             try {
0:               result = factory.getObjectInstance(obj, name, nameCtx, environment);
0:             } catch (Exception e) {
0:               // TODO Auto-generated catch block
0:               e.printStackTrace();
0:             }
0:   
0:             context.ungetService(ref);
0:   
0:             // if the result comes back and is not null and not the reference
0:             // object then we should return the result, so break out of the
0:             // loop we are in.
0:             if (result != null && result != obj) break;
0:           }
0:         }
0:       }
0:     } catch (InvalidSyntaxException e) {
0:       // TODO Auto-generated catch block
0:       e.printStackTrace();
0:     }
0: 
0:     if (result == null) result = obj;
0:   	
0:     return result;
0:   }
0: 
0:   private Object getObjectInstanceUsingRefAddress(Enumeration<RefAddr> addresses, Object obj, Name name,
0:       Context nameCtx, Hashtable<?, ?> environment)
0:   {
0:     Object result = obj;
0: 
0:     while (addresses.hasMoreElements()) {
0:       RefAddr address = addresses.nextElement();
0:       if (address instanceof StringRefAddr && "URL".equals(address.getType())) {
0:         String urlScheme = (String)address.getContent();
0:         ObjectFactory factory = null;
0:         ServiceReference ref = null;
0:         try {
0:           ServiceReference[] services = context.getServiceReferences(ObjectFactory.class.getName(), "(|(osgi.jndi.urlScheme=" + urlScheme + ")(urlScheme=" + urlScheme + "))");
0: 
0:           if (services != null) {
0:             ref = services[0];
0:             factory = (ObjectFactory) context.getService(ref);
0:           }
0:         } catch (InvalidSyntaxException e) {
0:           e.printStackTrace();
0:         }
0: 
0:         if (factory != null) {
0:           try {
0:             result = factory.getObjectInstance(obj, name, nameCtx, environment);
0:           } catch (Exception e) {
0:             // TODO Auto-generated catch block
0:             e.printStackTrace();
0:           }
0:         }
0: 
0:         if (ref != null) context.ungetService(ref);
0:         
0:         // if the result is not null and references a different object from
0:         // the obj then we have resolved the object, so we stop searching.
0:         if (result != null && result != obj) break;
0:       }
0:     }
0: 
0:     return result;
0:   }
0: 
0:   private Object getObjectInstanceUsingClassName(Object reference, String className, Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)
0:   {
0:     Object result = obj;
0: 
0:     ObjectFactory factory = null;
0:     ServiceReference ref = null;
0: 
0:     if (className != null) {
0:       try {
0:         ServiceReference[] refs = context.getAllServiceReferences(className, null);
0: 
0:         if (refs != null) {
0:           for (ServiceReference ref1 : refs) {
0:             factory = (ObjectFactory) context.getService(ref1);
0: 
0:             if (factory != null) {
0:               ref = ref1;
0:               break;
0:             }
0:           }
0:         }
0:       } catch (InvalidSyntaxException e) {
0:         // TODO Auto-generated catch block
0:         e.printStackTrace();
0:       }
0:     }
0: 
0:     if (factory == null) {
0:       try {
0:         ServiceReference[] refs = context.getServiceReferences(ObjectFactoryBuilder.class.getName(), null);
0: 
0:         if (refs != null) {
0:           for (ServiceReference ofRef : refs) {
0:             ObjectFactoryBuilder builder = (ObjectFactoryBuilder) context.getService(ofRef);
0:             try {
0:               factory = builder.createObjectFactory(reference, environment);
0:             } catch (NamingException e) {
0:               // TODO Auto-generated catch block
0:               e.printStackTrace();
0:             }
0: 
0:             context.ungetService(ofRef);
0:             if (factory != null) {
0:               break;
0:             }
0:           }
0:         }
0:       } catch (InvalidSyntaxException e) {
0:         // TODO Auto-generated catch block
0:         e.printStackTrace();
0:       }
0:     }
0: 
0:     if (factory != null) {
0:       try {
0:         result = factory.getObjectInstance(obj, name, nameCtx, environment);
0:       } catch (Exception e) {
0:         // TODO Auto-generated catch block
0:         e.printStackTrace();
0:       } finally {
0:         if (ref != null) context.ungetService(ref);
0:       }
0:     }
0: 
0:     return result;
0:   }
0: }
============================================================================