1:db61fe4: /** 
1:db61fe4:   * Licensed to the Apache Software Foundation (ASF) under one 
1:db61fe4:   * or more contributor license agreements. See the NOTICE file 
1:db61fe4:   * distributed with this work for additional information 
1:db61fe4:   * regarding copyright ownership. The ASF licenses this file 
1:db61fe4:   * to you under the Apache License, Version 2.0 (the 
1:db61fe4:   * "License"); you may not use this file except in compliance 
1:db61fe4:   * with the License. You may obtain a copy of the License at 
1:db61fe4:   * 
1:db61fe4:   * http://www.apache.org/licenses/LICENSE-2.0 
1:db61fe4:   * 
1:db61fe4:   * Unless required by applicable law or agreed to in writing, 
1:db61fe4:   * software distributed under the License is distributed on an 
1:db61fe4:   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
1:db61fe4:   * KIND, either express or implied. See the License for the 
1:db61fe4:   * specific language governing permissions and limitations 
1:db61fe4:   * under the License. 
1:db61fe4:   */
1:db61fe4: package org.apache.cxf.dosgi.samples.greeter.client;
1:db61fe4: 
1:db61fe4: import java.util.Map;
1:db61fe4: 
1:db61fe4: import org.apache.cxf.dosgi.samples.greeter.GreeterData;
1:db61fe4: import org.apache.cxf.dosgi.samples.greeter.GreeterException;
1:db61fe4: import org.apache.cxf.dosgi.samples.greeter.GreeterService;
1:db61fe4: import org.apache.cxf.dosgi.samples.greeter.GreetingPhrase;
1:db61fe4: import org.osgi.framework.BundleActivator;
1:db61fe4: import org.osgi.framework.BundleContext;
1:db61fe4: import org.osgi.framework.ServiceReference;
1:db61fe4: import org.osgi.util.tracker.ServiceTracker;
1:db61fe4: 
1:db61fe4: public class Activator implements BundleActivator {    
1:db61fe4:     private ServiceTracker tracker;
1:db61fe4: 
1:db61fe4:     public void start(final BundleContext bc) {
1:db61fe4:         tracker = new ServiceTracker(bc, GreeterService.class.getName(), null) {
1:db61fe4:             @Override
1:db61fe4:             public Object addingService(ServiceReference reference) {
1:db61fe4:                 Object result = super.addingService(reference);
1:db61fe4: 
1:db61fe4:                 useService(bc, reference);
1:db61fe4:                 
1:db61fe4:                 return result;
1:db61fe4:             }
1:db61fe4:         };
1:db61fe4:         tracker.open();
1:db61fe4:         
1:db61fe4:     }
1:db61fe4: 
1:db61fe4:     protected void useService(final BundleContext bc, ServiceReference reference) {
1:db61fe4:         Object svc = bc.getService(reference);
1:db61fe4:         if (!(svc instanceof GreeterService)) {
1:db61fe4:             return;
1:db61fe4:         }
1:db61fe4:         final GreeterService greeter = (GreeterService) svc;
1:db61fe4: 
1:db61fe4:         Thread t = new Thread(new Runnable() {
1:db61fe4:             public void run() {
1:db61fe4:                 greeterUI(bc, greeter);
1:db61fe4:             }
1:db61fe4:         });
1:db61fe4:         t.start();
1:db61fe4:     }
1:db61fe4: 
1:db61fe4:     private void greeterUI(final BundleContext bc, final GreeterService greeter) {
1:db61fe4:         while (true) {
1:db61fe4:             System.out.println("*** Opening greeter client dialog ***");
1:db61fe4:             Object gd = getGreeterData();
1:db61fe4:             if (gd instanceof String) {
1:db61fe4:                 System.out.println("*** Invoking greeter ***");
1:db61fe4:                 Map<GreetingPhrase, String> result = greeter.greetMe((String) gd);
1:db61fe4: 
1:db61fe4:                 System.out.println("greetMe(\"" + gd + "\") returns:");
1:db61fe4:                 for (Map.Entry<GreetingPhrase, String> greeting : result.entrySet()) {
1:db61fe4:                     System.out.println("  " + greeting.getKey().getPhrase() 
1:db61fe4:                             + " " + greeting.getValue());
1:db61fe4:                 }
1:db61fe4:             } else if (gd instanceof GreeterData) {
1:db61fe4:                 System.out.println("*** Invoking greeter ***");
1:db61fe4:                 try {
1:db61fe4:                     GreetingPhrase [] result = greeter.greetMe((GreeterData) gd);
1:db61fe4:                     System.out.println("greetMe(\"" + gd + "\") returns:");
1:db61fe4:                     for (GreetingPhrase phrase : result) {
1:db61fe4:                         System.out.println("  " + phrase.getPhrase());
1:db61fe4:                     }
1:db61fe4:                 } catch (GreeterException ex) {
1:db61fe4:                     System.out.println("GreeterException : " + ex.toString());
1:db61fe4:                 }                
1:db61fe4:             }
1:db61fe4:         }
1:db61fe4:     }
1:db61fe4: 
1:db61fe4:     private static Object getGreeterData() {
1:db61fe4:         GreeterDialog gd = new GreeterDialog();
1:db61fe4:         gd.setVisible(true);
1:db61fe4:         return gd.getSelection();
1:db61fe4:     }
1:db61fe4: 
1:db61fe4:     public void stop(BundleContext bc) throws Exception {
1:db61fe4:         tracker.close();
1:db61fe4:     }
1:db61fe4: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:db61fe4
/////////////////////////////////////////////////////////////////////////
1: /** 
1:   * Licensed to the Apache Software Foundation (ASF) under one 
1:   * or more contributor license agreements. See the NOTICE file 
1:   * distributed with this work for additional information 
1:   * regarding copyright ownership. The ASF licenses this file 
1:   * to you under the Apache License, Version 2.0 (the 
1:   * "License"); you may not use this file except in compliance 
1:   * with the License. You may obtain a copy of the License at 
1:   * 
1:   * http://www.apache.org/licenses/LICENSE-2.0 
1:   * 
1:   * Unless required by applicable law or agreed to in writing, 
1:   * software distributed under the License is distributed on an 
1:   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
1:   * KIND, either express or implied. See the License for the 
1:   * specific language governing permissions and limitations 
1:   * under the License. 
1:   */
1: package org.apache.cxf.dosgi.samples.greeter.client;
1: 
1: import java.util.Map;
1: 
1: import org.apache.cxf.dosgi.samples.greeter.GreeterData;
1: import org.apache.cxf.dosgi.samples.greeter.GreeterException;
1: import org.apache.cxf.dosgi.samples.greeter.GreeterService;
1: import org.apache.cxf.dosgi.samples.greeter.GreetingPhrase;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class Activator implements BundleActivator {    
1:     private ServiceTracker tracker;
1: 
1:     public void start(final BundleContext bc) {
1:         tracker = new ServiceTracker(bc, GreeterService.class.getName(), null) {
1:             @Override
1:             public Object addingService(ServiceReference reference) {
1:                 Object result = super.addingService(reference);
1: 
1:                 useService(bc, reference);
1:                 
1:                 return result;
1:             }
1:         };
1:         tracker.open();
1:         
1:     }
1: 
1:     protected void useService(final BundleContext bc, ServiceReference reference) {
1:         Object svc = bc.getService(reference);
1:         if (!(svc instanceof GreeterService)) {
1:             return;
1:         }
1:         final GreeterService greeter = (GreeterService) svc;
1: 
1:         Thread t = new Thread(new Runnable() {
1:             public void run() {
1:                 greeterUI(bc, greeter);
1:             }
1:         });
1:         t.start();
1:     }
1: 
1:     private void greeterUI(final BundleContext bc, final GreeterService greeter) {
1:         while (true) {
1:             System.out.println("*** Opening greeter client dialog ***");
1:             Object gd = getGreeterData();
1:             if (gd instanceof String) {
1:                 System.out.println("*** Invoking greeter ***");
1:                 Map<GreetingPhrase, String> result = greeter.greetMe((String) gd);
1: 
1:                 System.out.println("greetMe(\"" + gd + "\") returns:");
1:                 for (Map.Entry<GreetingPhrase, String> greeting : result.entrySet()) {
1:                     System.out.println("  " + greeting.getKey().getPhrase() 
1:                             + " " + greeting.getValue());
1:                 }
1:             } else if (gd instanceof GreeterData) {
1:                 System.out.println("*** Invoking greeter ***");
1:                 try {
1:                     GreetingPhrase [] result = greeter.greetMe((GreeterData) gd);
1:                     System.out.println("greetMe(\"" + gd + "\") returns:");
1:                     for (GreetingPhrase phrase : result) {
1:                         System.out.println("  " + phrase.getPhrase());
1:                     }
1:                 } catch (GreeterException ex) {
1:                     System.out.println("GreeterException : " + ex.toString());
1:                 }                
1:             }
1:         }
1:     }
1: 
1:     private static Object getGreeterData() {
1:         GreeterDialog gd = new GreeterDialog();
1:         gd.setVisible(true);
1:         return gd.getSelection();
1:     }
1: 
1:     public void stop(BundleContext bc) throws Exception {
1:         tracker.close();
1:     }
1: }
============================================================================