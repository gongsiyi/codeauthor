1:c3c0e1b: /*
1:c3c0e1b:  * Licensed to the Apache Software Foundation (ASF) under one
1:c3c0e1b:  * or more contributor license agreements.  See the NOTICE file
1:c3c0e1b:  * distributed with this work for additional information
1:c3c0e1b:  * regarding copyright ownership.  The ASF licenses this file
1:c3c0e1b:  * to you under the Apache License, Version 2.0 (the
1:c3c0e1b:  * "License"); you may not use this file except in compliance
1:c3c0e1b:  * with the License.  You may obtain a copy of the License at
1:c3c0e1b:  *
1:c3c0e1b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c3c0e1b:  *
1:c3c0e1b:  * Unless required by applicable law or agreed to in writing,
1:c3c0e1b:  * software distributed under the License is distributed on an
1:c3c0e1b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c3c0e1b:  * KIND, either express or implied.  See the License for the
1:c3c0e1b:  * specific language governing permissions and limitations
1:c3c0e1b:  * under the License.
1:c3c0e1b:  */
1:c3c0e1b: package org.apache.aries.transaction;
1:febc5c2: 
1:4de6208: import java.net.URI;
1:4de6208: import java.net.URL;
1:4de6208: import java.util.Arrays;
1:4de6208: import java.util.Set;
5:4de6208: 
1:c3c0e1b: import javax.transaction.TransactionManager;
1:4de6208: 
1:4de6208: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:d4c2b25: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1:d4c2b25: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1:d4c2b25: import org.apache.aries.blueprint.parser.Parser;
1:4de6208: import org.apache.aries.blueprint.reflect.PassThroughMetadataImpl;
1:0bfefd9: import org.apache.aries.transaction.parsing.TxNamespaceHandler;
1:febc5c2: import org.easymock.EasyMock;
1:febc5c2: import org.easymock.IMocksControl;
1:c3c0e1b: import org.junit.After;
1:c3c0e1b: import org.junit.Before;
1:c3c0e1b: import org.osgi.framework.Bundle;
1:febc5c2: import org.osgi.framework.InvalidSyntaxException;
1:bd98451: import org.osgi.service.coordinator.Coordinator;
1:febc5c2: 
1:c3c0e1b: public class BaseNameSpaceHandlerSetup {
1:c3c0e1b:     protected Bundle b;
1:febc5c2:     protected DummyNamespaceHandlerRegistry nhri;
1:0bfefd9:     protected TxNamespaceHandler namespaceHandler;
1:febc5c2:     protected IMocksControl control;
1:febc5c2: 
1:c3c0e1b:     @Before
1:febc5c2:     public void setUp() throws InvalidSyntaxException {
1:febc5c2:         control = EasyMock.createControl();
1:febc5c2:         b = control.createMock(Bundle.class);
1:febc5c2:         TransactionManager tm = control.createMock(TransactionManager.class);
1:bd98451:         Coordinator coordinator = control.createMock(Coordinator.class);
1:febc5c2:         control.replay();
1:bd98451: 
1:bd98451:         namespaceHandler = new TxNamespaceHandler();
1:bd98451:         namespaceHandler.setTm(tm);
1:bd98451:         namespaceHandler.setCoordinator(coordinator);
1:febc5c2: 
1:176b64c:         String[] namespaces = new String[] { "http://aries.apache.org/xmlns/transactions/v2.0.0" };
1:febc5c2:         nhri = new DummyNamespaceHandlerRegistry();
1:febc5c2:         nhri.addNamespaceHandlers(namespaces, namespaceHandler);
2:c3c0e1b:     }
1:febc5c2: 
1:4de6208:     @After
1:4de6208:     public void tearDown() throws Exception{
1:febc5c2:         control.verify();
1:febc5c2:         b = null;
1:febc5c2:         nhri = null;
1:4de6208:     }
1:febc5c2: 
1:4de6208:     protected ComponentDefinitionRegistry parseCDR(String name) throws Exception {
1:4de6208:         Parser p = new Parser();
1:febc5c2: 
1:4de6208:         URL bpxml = this.getClass().getResource(name);
1:4de6208:         p.parse(Arrays.asList(bpxml));
1:febc5c2: 
1:4de6208:         Set<URI> nsuris = p.getNamespaces();
1:4de6208:         NamespaceHandlerSet nshandlers = nhri.getNamespaceHandlers(nsuris, b);
1:febc5c2: 
1:4de6208:         ComponentDefinitionRegistry cdr = new ComponentDefinitionRegistryImpl();
1:4de6208:         cdr.registerComponentDefinition(new PassThroughMetadataImpl("blueprintBundle", b));
1:4de6208:         p.populate(nshandlers, cdr);
1:febc5c2: 
1:4de6208:         return cdr;
1:4de6208:     }
1:c3c0e1b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:176b64c
/////////////////////////////////////////////////////////////////////////
1:         String[] namespaces = new String[] { "http://aries.apache.org/xmlns/transactions/v2.0.0" };
commit:bd98451
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordinator;
/////////////////////////////////////////////////////////////////////////
1:         Coordinator coordinator = control.createMock(Coordinator.class);
1: 
1:         namespaceHandler = new TxNamespaceHandler();
1:         namespaceHandler.setTm(tm);
1:         namespaceHandler.setCoordinator(coordinator);
/////////////////////////////////////////////////////////////////////////
commit:febc5c2
/////////////////////////////////////////////////////////////////////////
0: import static org.easymock.EasyMock.expect;
1: 
1: import org.easymock.EasyMock;
1: import org.easymock.IMocksControl;
1: import org.osgi.framework.InvalidSyntaxException;
1:     protected DummyNamespaceHandlerRegistry nhri;
1:     protected IMocksControl control;
1: 
1:     public void setUp() throws InvalidSyntaxException {
1:         control = EasyMock.createControl();
1:         b = control.createMock(Bundle.class);
1:         TransactionManager tm = control.createMock(TransactionManager.class);
1: 
0:         BlueprintContainer container = control.createMock(BlueprintContainer.class);
0:         expect(container.getComponentInstance(EasyMock.eq(TxNamespaceHandler.DEFAULT_INTERCEPTOR_ID))).andReturn(txinterceptor);
1:         control.replay();
1: 
0:         String[] namespaces = new String[]
0:             {"http://aries.apache.org/xmlns/transactions/v1.0.0", 
0:              "http://aries.apache.org/xmlns/transactions/v1.1.0", 
0:              "http://aries.apache.org/xmlns/transactions/v1.2.0"
0:             };
1:         nhri = new DummyNamespaceHandlerRegistry();
1:         nhri.addNamespaceHandlers(namespaces, namespaceHandler);
1: 
1:         control.verify();
1:         b = null;
1:         nhri = null;
0:         txenhancer = null;
1: 
1: 
1: 
1: 
1: 
commit:0bfefd9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.transaction.parsing.TxNamespaceHandler;
/////////////////////////////////////////////////////////////////////////
1:     protected TxNamespaceHandler namespaceHandler;
/////////////////////////////////////////////////////////////////////////
0:         namespaceHandler = new TxNamespaceHandler();
0:                 new MethodCall(BlueprintContainer.class, "getComponentInstance", TxNamespaceHandler.DEFAULT_INTERCEPTOR_ID),
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:2e23f30
/////////////////////////////////////////////////////////////////////////
0: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
0:         ctx.registerService(NamespaceHandler.class.getName(), namespaceHandler, (Dictionary) props);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:76bff89
/////////////////////////////////////////////////////////////////////////
0:         props.put("osgi.service.blueprint.namespace", new String[]{"http://aries.apache.org/xmlns/transactions/v1.0.0", "http://aries.apache.org/xmlns/transactions/v1.1.0", "http://aries.apache.org/xmlns/transactions/v1.2.0"});
commit:d4c2b25
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.parser.ComponentDefinitionRegistryImpl;
1: import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
1: import org.apache.aries.blueprint.parser.Parser;
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:4de6208
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.net.URL;
1: import java.util.Arrays;
1: import java.util.Set;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
0: import org.apache.aries.blueprint.container.Parser;
0: import org.apache.aries.blueprint.container.NamespaceHandlerRegistry.NamespaceHandlerSet;
0: import org.apache.aries.blueprint.namespace.ComponentDefinitionRegistryImpl;
1: import org.apache.aries.blueprint.reflect.PassThroughMetadataImpl;
0: import org.apache.aries.mocks.BundleContextMock;
/////////////////////////////////////////////////////////////////////////
0:     protected TxElementHandler namespaceHandler;
/////////////////////////////////////////////////////////////////////////
0:         namespaceHandler = new TxElementHandler();
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void tearDown() throws Exception{
0:       b = null;
0:       nhri = null;
0:       txenhancer = null;
1:       
0:       BundleContextMock.clear();
1:     }
1:     
1:     protected ComponentDefinitionRegistry parseCDR(String name) throws Exception {
1:         Parser p = new Parser();
1:         
1:         URL bpxml = this.getClass().getResource(name);
1:         p.parse(Arrays.asList(bpxml));
1:         
1:         Set<URI> nsuris = p.getNamespaces();
1:         NamespaceHandlerSet nshandlers = nhri.getNamespaceHandlers(nsuris, b);
0:         p.validate(nshandlers.getSchema());
1:         
1:         ComponentDefinitionRegistry cdr = new ComponentDefinitionRegistryImpl();
1:         cdr.registerComponentDefinition(new PassThroughMetadataImpl("blueprintBundle", b));
1:         p.populate(nshandlers, cdr);
1:         
1:         return cdr;
1:     }
commit:c3c0e1b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction;
0: 
0: import java.util.Properties;
0: 
1: import javax.transaction.TransactionManager;
0: 
0: import org.apache.aries.blueprint.NamespaceHandler;
0: import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
0: import org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl;
0: import org.apache.aries.mocks.BundleMock;
0: import org.apache.aries.transaction.parsing.TxElementHandler;
0: import org.apache.aries.unittest.mocks.MethodCall;
0: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.service.blueprint.container.BlueprintContainer;
0: 
1: public class BaseNameSpaceHandlerSetup {
1:     protected Bundle b;
0:     protected NamespaceHandlerRegistry nhri;
0:     protected TxComponentMetaDataHelperImpl txenhancer;
0:     
1:     @Before
0:     public void setUp() {
0:         b = Skeleton.newMock(new BundleMock("org.apache.aries.tx", new Properties()), Bundle.class);
0:         BundleContext ctx = b.getBundleContext();
0:         nhri = new NamespaceHandlerRegistryImpl(ctx);
0:         
0:         TransactionManager tm = Skeleton.newMock(TransactionManager.class);
0:         
0:         txenhancer = new TxComponentMetaDataHelperImpl();
0:         
0:         TxInterceptorImpl txinterceptor = new TxInterceptorImpl();
0:         txinterceptor.setTransactionManager(tm);
0:         txinterceptor.setTxMetaDataHelper(txenhancer);
0:         
0:         TxElementHandler namespaceHandler = new TxElementHandler();
0:         
0:         BlueprintContainer container = Skeleton.newMock(BlueprintContainer.class);
0:         Skeleton.getSkeleton(container).setReturnValue(
0:                 new MethodCall(BlueprintContainer.class, "getComponentInstance", TxElementHandler.DEFAULT_INTERCEPTOR_ID),
0:                 txinterceptor);
0:         namespaceHandler.setBlueprintContainer(container);
0:         namespaceHandler.setTxMetaDataHelper(txenhancer);
0:             
0:         Properties props = new Properties();
0:         props.put("osgi.service.blueprint.namespace", new String[]{"http://aries.apache.org/xmlns/transactions/v1.0.0", "http://aries.apache.org/xmlns/transactions/v1.1.0"});
0:         ctx.registerService(NamespaceHandler.class.getName(), namespaceHandler, props);
1:     }
0:       
0:       @After
0:       public void tearDown() throws Exception{
0:         b = null;
0:           nhri = null;
0:           txenhancer = null;
1:       }
1: }
============================================================================