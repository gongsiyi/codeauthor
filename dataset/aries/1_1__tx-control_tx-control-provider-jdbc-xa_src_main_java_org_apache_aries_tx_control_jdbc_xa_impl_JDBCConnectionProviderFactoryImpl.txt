1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:2299957: package org.apache.aries.tx.control.jdbc.xa.impl;
1:2299957: 
1:2299957: import static java.util.Optional.ofNullable;
1:2299957: import static java.util.concurrent.TimeUnit.HOURS;
1:2299957: import static java.util.concurrent.TimeUnit.SECONDS;
1:2299957: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_URL;
1:2299957: 
1:2299957: import java.sql.Driver;
1:2299957: import java.sql.SQLException;
1:2299957: import java.util.Map;
1:2299957: import java.util.Properties;
1:2299957: import java.util.concurrent.TimeUnit;
1:2299957: 
1:2299957: import javax.sql.DataSource;
1:2299957: import javax.sql.XADataSource;
1:2299957: 
1:2299957: import org.apache.aries.tx.control.jdbc.common.impl.DriverDataSource;
1:2906477: import org.apache.aries.tx.control.jdbc.common.impl.InternalJDBCConnectionProviderFactory;
1:4c0430e: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XADataSourceMapper;
1:2299957: import org.osgi.service.jdbc.DataSourceFactory;
1:2299957: import org.osgi.service.transaction.control.TransactionException;
1:2299957: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1:80b5875: import org.slf4j.Logger;
1:80b5875: import org.slf4j.LoggerFactory;
1:2299957: 
1:2299957: import com.zaxxer.hikari.HikariConfig;
1:2299957: import com.zaxxer.hikari.HikariDataSource;
1:2299957: 
1:2906477: public class JDBCConnectionProviderFactoryImpl implements JDBCConnectionProviderFactory, InternalJDBCConnectionProviderFactory {
1:2299957: 
1:80b5875: 	private static final Logger LOG = LoggerFactory.getLogger(ManagedServiceFactoryImpl.class);
1:80b5875: 	
1:2299957: 	@Override
1:80b5875: 	public JDBCConnectionProviderImpl getProviderFor(DataSourceFactory dsf, Properties jdbcProperties,
1:2299957: 			Map<String, Object> resourceProviderProperties) {
1:2299957: 
1:2299957: 		boolean xaEnabled = toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, true);
1:2299957: 		boolean localEnabled = toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true);
1:2299957: 		boolean useDriver = toBoolean(resourceProviderProperties, USE_DRIVER, false);
1:2299957: 		
1:2299957: 		checkEnlistment(xaEnabled, localEnabled, !useDriver);
1:2299957: 
1:2299957: 		DataSource unpooled;
1:2299957: 		try {
1:2299957: 			if (useDriver) {
1:2299957: 				unpooled = new DriverDataSource(dsf.createDriver(null), jdbcProperties.getProperty(JDBC_URL),
1:2299957: 						jdbcProperties);
1:2299957: 			} else if (xaEnabled) {
1:2299957: 				unpooled = new XADataSourceMapper(dsf.createXADataSource(jdbcProperties));
1:2299957: 			} else {
1:2299957: 				unpooled = dsf.createDataSource(jdbcProperties);
1:2299957: 			}
1:2299957: 		} catch (SQLException sqle) {
1:2299957: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1:2299957: 		}
1:2299957: 
1:2299957: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, unpooled);
1:80b5875: 		
1:80b5875: 		return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled, 
1:80b5875: 				getRecoveryId(resourceProviderProperties, xaEnabled));
1:80b5875: 	}
1:2299957: 
1:80b5875: 	private String getRecoveryId(Map<String, Object> resourceProviderProps, boolean xaEnabled) {
1:80b5875: 		String recoveryIdentifier = ofNullable(resourceProviderProps)
1:80b5875: 										.map(m -> m.get(OSGI_RECOVERY_IDENTIFIER))
1:80b5875: 										.map(String::valueOf)
1:80b5875: 										.orElse(null);
1:80b5875: 		
1:80b5875: 		if(recoveryIdentifier != null && !xaEnabled) {
1:80b5875: 			LOG.warn("A recovery identifier {} has been declared, but the JDBCConnectionProvider is configured to disable XA", recoveryIdentifier);
1:80b5875: 		}
1:80b5875: 		return recoveryIdentifier;
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2906477: 	public JDBCConnectionProviderImpl getProviderFor(DataSource ds, Map<String, Object> resourceProviderProperties) {
1:2299957: 		boolean xaEnabled = toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, true);
1:2299957: 		boolean localEnabled = toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true);
1:2299957: 		
1:2299957: 		try {
1:2299957: 			checkEnlistment(xaEnabled, localEnabled, ds.isWrapperFor(XADataSource.class));
1:2299957: 			DataSource toUse = poolIfNecessary(resourceProviderProperties, xaEnabled ?
1:2299957: 					new XADataSourceMapper(ds.unwrap(XADataSource.class)) : ds);
1:2299957: 	
1:80b5875: 			return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled, 
1:80b5875: 					getRecoveryId(resourceProviderProperties, xaEnabled));
1:2299957: 		} catch (SQLException sqle) {
1:2299957: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1:2299957: 		}
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2906477: 	public JDBCConnectionProviderImpl getProviderFor(Driver driver, Properties jdbcProperties, 
1:2299957: 			Map<String, Object> resourceProviderProperties) {
1:2299957: 		
1:2299957: 		boolean xaEnabled = toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, false);
1:2299957: 		boolean localEnabled = toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true);
1:2299957: 		
1:2299957: 		checkEnlistment(xaEnabled, localEnabled, false);
1:2299957: 		
1:2299957: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, 
1:2299957: 				new DriverDataSource(driver, jdbcProperties.getProperty(JDBC_URL), jdbcProperties));
1:2299957: 		
1:80b5875: 		return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled, 
1:80b5875: 				getRecoveryId(resourceProviderProperties, xaEnabled));
1:2299957: 	}
1:2299957: 
1:2299957: 	@Override
1:2906477: 	public JDBCConnectionProviderImpl getProviderFor(XADataSource ds, Map<String, Object> resourceProviderProperties) {
1:2299957: 		
1:2299957: 		boolean xaEnabled = toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, true);
1:2299957: 		boolean localEnabled = toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true);
1:2299957: 		
1:2299957: 		checkEnlistment(xaEnabled, localEnabled, true);
1:2299957: 		
1:2299957: 		DataSource unpooled = new XADataSourceMapper(ds);
1:2299957: 		
1:2299957: 		return new JDBCConnectionProviderImpl(poolIfNecessary(resourceProviderProperties, unpooled),
1:80b5875: 				xaEnabled, localEnabled, getRecoveryId(resourceProviderProperties, xaEnabled));
1:2299957: 	}
1:2299957: 
1:2299957: 	private void checkEnlistment(boolean xaEnabled, boolean localEnabled, boolean isXA) {
1:2299957: 		
1:2299957: 		if (!xaEnabled && !localEnabled) {
1:2299957: 			throw new TransactionException("The configuration supports neither local nor XA transactions");
1:2299957: 		} 
1:2299957: 		
1:2299957: 		if(xaEnabled && !isXA) {
1:2299957: 			throw new TransactionException("The configuration is XA enabled but the resource is not suitable for XA enlistment");
1:2299957: 		}
1:2299957: 	}
1:2299957: 
1:2299957: 	private DataSource poolIfNecessary(Map<String, Object> resourceProviderProperties, DataSource unpooled) {
1:2299957: 		DataSource toUse;
1:2299957: 
1:2299957: 		if (toBoolean(resourceProviderProperties, CONNECTION_POOLING_ENABLED, true)) {
1:2299957: 			HikariConfig hcfg = new HikariConfig();
1:2299957: 			hcfg.setDataSource(unpooled);
1:2299957: 
1:2299957: 			// Sizes
1:2299957: 			hcfg.setMaximumPoolSize(toInt(resourceProviderProperties, MAX_CONNECTIONS, 10));
1:2299957: 			hcfg.setMinimumIdle(toInt(resourceProviderProperties, MIN_CONNECTIONS, 10));
1:2299957: 
1:2299957: 			// Timeouts
1:2299957: 			hcfg.setConnectionTimeout(toLong(resourceProviderProperties, CONNECTION_TIMEOUT, SECONDS.toMillis(30)));
1:2299957: 			hcfg.setIdleTimeout(toLong(resourceProviderProperties, IDLE_TIMEOUT, TimeUnit.MINUTES.toMillis(3)));
1:2299957: 			hcfg.setMaxLifetime(toLong(resourceProviderProperties, CONNECTION_LIFETIME, HOURS.toMillis(3)));
1:2299957: 
1:2299957: 			toUse = new HikariDataSource(hcfg);
1:2299957: 
1:2299957: 		} else {
1:2299957: 			toUse = unpooled;
1:2299957: 		}
1:2299957: 		return toUse;
1:2299957: 	}
1:2299957: 
1:80b5875: 	static boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1:2299957: 		Object o =  ofNullable(props)
1:2299957: 			.map(m -> m.get(key))
1:2299957: 			.orElse(defaultValue);
1:2299957: 		
1:2299957: 		if (o instanceof Boolean) {
1:2299957: 			return ((Boolean) o).booleanValue();
1:2299957: 		} else if(o instanceof String) {
1:2299957: 			return Boolean.parseBoolean((String) o);
1:2299957: 		} else {
1:2299957: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1:2299957: 		}
1:2299957: 	}
1:2299957: 
1:2299957: 	private int toInt(Map<String, Object> props, String key, int defaultValue) {
1:2299957: 		
1:2299957: 		Object o =  ofNullable(props)
1:2299957: 				.map(m -> m.get(key))
1:2299957: 				.orElse(defaultValue);
1:2299957: 		
1:2299957: 		if (o instanceof Number) {
1:2299957: 			return ((Number) o).intValue();
1:2299957: 		} else if(o instanceof String) {
1:2299957: 			return Integer.parseInt((String) o);
1:2299957: 		} else {
1:2299957: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to an int");
1:2299957: 		}
1:2299957: 	}
1:2299957: 
1:2299957: 	private long toLong(Map<String, Object> props, String key, long defaultValue) {
1:2299957: 		
1:2299957: 		Object o =  ofNullable(props)
1:2299957: 				.map(m -> m.get(key))
1:2299957: 				.orElse(defaultValue);
1:2299957: 		
1:2299957: 		if (o instanceof Number) {
1:2299957: 			return ((Number) o).longValue();
1:2299957: 		} else if(o instanceof String) {
1:2299957: 			return Long.parseLong((String) o);
1:2299957: 		} else {
1:2299957: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a long");
1:2299957: 		}
1:2299957: 	}
1:2299957: 
1:2299957: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jdbc.common.impl.InternalJDBCConnectionProviderFactory;
/////////////////////////////////////////////////////////////////////////
1: public class JDBCConnectionProviderFactoryImpl implements JDBCConnectionProviderFactory, InternalJDBCConnectionProviderFactory {
/////////////////////////////////////////////////////////////////////////
1: 	public JDBCConnectionProviderImpl getProviderFor(DataSource ds, Map<String, Object> resourceProviderProperties) {
/////////////////////////////////////////////////////////////////////////
1: 	public JDBCConnectionProviderImpl getProviderFor(Driver driver, Properties jdbcProperties, 
/////////////////////////////////////////////////////////////////////////
1: 	public JDBCConnectionProviderImpl getProviderFor(XADataSource ds, Map<String, Object> resourceProviderProperties) {
commit:80b5875
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger LOG = LoggerFactory.getLogger(ManagedServiceFactoryImpl.class);
1: 	
1: 	public JDBCConnectionProviderImpl getProviderFor(DataSourceFactory dsf, Properties jdbcProperties,
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled, 
1: 				getRecoveryId(resourceProviderProperties, xaEnabled));
1: 	}
1: 	private String getRecoveryId(Map<String, Object> resourceProviderProps, boolean xaEnabled) {
1: 		String recoveryIdentifier = ofNullable(resourceProviderProps)
1: 										.map(m -> m.get(OSGI_RECOVERY_IDENTIFIER))
1: 										.map(String::valueOf)
1: 										.orElse(null);
1: 		
1: 		if(recoveryIdentifier != null && !xaEnabled) {
1: 			LOG.warn("A recovery identifier {} has been declared, but the JDBCConnectionProvider is configured to disable XA", recoveryIdentifier);
1: 		}
1: 		return recoveryIdentifier;
/////////////////////////////////////////////////////////////////////////
1: 			return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled, 
1: 					getRecoveryId(resourceProviderProperties, xaEnabled));
/////////////////////////////////////////////////////////////////////////
1: 		return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled, 
1: 				getRecoveryId(resourceProviderProperties, xaEnabled));
/////////////////////////////////////////////////////////////////////////
1: 				xaEnabled, localEnabled, getRecoveryId(resourceProviderProperties, xaEnabled));
/////////////////////////////////////////////////////////////////////////
1: 	static boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jdbc.xa.connection.impl.XADataSourceMapper;
commit:2299957
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.xa.impl;
1: 
1: import static java.util.Optional.ofNullable;
1: import static java.util.concurrent.TimeUnit.HOURS;
1: import static java.util.concurrent.TimeUnit.SECONDS;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_URL;
1: 
1: import java.sql.Driver;
1: import java.sql.SQLException;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.sql.DataSource;
1: import javax.sql.XADataSource;
1: 
1: import org.apache.aries.tx.control.jdbc.common.impl.DriverDataSource;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.service.transaction.control.TransactionException;
0: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: 
1: import com.zaxxer.hikari.HikariConfig;
1: import com.zaxxer.hikari.HikariDataSource;
1: 
0: public class JDBCConnectionProviderFactoryImpl implements JDBCConnectionProviderFactory {
1: 
1: 	@Override
0: 	public JDBCConnectionProvider getProviderFor(DataSourceFactory dsf, Properties jdbcProperties,
1: 			Map<String, Object> resourceProviderProperties) {
1: 
1: 		boolean xaEnabled = toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, true);
1: 		boolean localEnabled = toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true);
1: 		boolean useDriver = toBoolean(resourceProviderProperties, USE_DRIVER, false);
1: 		
1: 		checkEnlistment(xaEnabled, localEnabled, !useDriver);
1: 
1: 		DataSource unpooled;
1: 		try {
1: 			if (useDriver) {
1: 				unpooled = new DriverDataSource(dsf.createDriver(null), jdbcProperties.getProperty(JDBC_URL),
1: 						jdbcProperties);
1: 			} else if (xaEnabled) {
1: 				unpooled = new XADataSourceMapper(dsf.createXADataSource(jdbcProperties));
1: 			} else {
1: 				unpooled = dsf.createDataSource(jdbcProperties);
1: 			}
1: 		} catch (SQLException sqle) {
1: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1: 		}
1: 
1: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, unpooled);
1: 
0: 		return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled);
1: 	}
1: 
1: 	@Override
0: 	public JDBCConnectionProvider getProviderFor(DataSource ds, Map<String, Object> resourceProviderProperties) {
1: 		boolean xaEnabled = toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, true);
1: 		boolean localEnabled = toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true);
1: 		
1: 		try {
1: 			checkEnlistment(xaEnabled, localEnabled, ds.isWrapperFor(XADataSource.class));
1: 			DataSource toUse = poolIfNecessary(resourceProviderProperties, xaEnabled ?
1: 					new XADataSourceMapper(ds.unwrap(XADataSource.class)) : ds);
1: 	
0: 			return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled);
1: 		} catch (SQLException sqle) {
1: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1: 		}
1: 	}
1: 
1: 	@Override
0: 	public JDBCConnectionProvider getProviderFor(Driver driver, Properties jdbcProperties, 
1: 			Map<String, Object> resourceProviderProperties) {
1: 		
1: 		boolean xaEnabled = toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, false);
1: 		boolean localEnabled = toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true);
1: 		
1: 		checkEnlistment(xaEnabled, localEnabled, false);
1: 		
1: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, 
1: 				new DriverDataSource(driver, jdbcProperties.getProperty(JDBC_URL), jdbcProperties));
1: 		
0: 		return new JDBCConnectionProviderImpl(toUse, xaEnabled, localEnabled);
1: 	}
1: 
1: 	@Override
0: 	public JDBCConnectionProvider getProviderFor(XADataSource ds, Map<String, Object> resourceProviderProperties) {
1: 		
1: 		boolean xaEnabled = toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, true);
1: 		boolean localEnabled = toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true);
1: 		
1: 		checkEnlistment(xaEnabled, localEnabled, true);
1: 		
1: 		DataSource unpooled = new XADataSourceMapper(ds);
1: 		
1: 		return new JDBCConnectionProviderImpl(poolIfNecessary(resourceProviderProperties, unpooled),
0: 				xaEnabled, localEnabled);
1: 	}
1: 
1: 	private void checkEnlistment(boolean xaEnabled, boolean localEnabled, boolean isXA) {
1: 		
1: 		if (!xaEnabled && !localEnabled) {
1: 			throw new TransactionException("The configuration supports neither local nor XA transactions");
1: 		} 
1: 		
1: 		if(xaEnabled && !isXA) {
1: 			throw new TransactionException("The configuration is XA enabled but the resource is not suitable for XA enlistment");
1: 		}
1: 	}
1: 
1: 	private DataSource poolIfNecessary(Map<String, Object> resourceProviderProperties, DataSource unpooled) {
1: 		DataSource toUse;
1: 
1: 		if (toBoolean(resourceProviderProperties, CONNECTION_POOLING_ENABLED, true)) {
1: 			HikariConfig hcfg = new HikariConfig();
1: 			hcfg.setDataSource(unpooled);
1: 
1: 			// Sizes
1: 			hcfg.setMaximumPoolSize(toInt(resourceProviderProperties, MAX_CONNECTIONS, 10));
1: 			hcfg.setMinimumIdle(toInt(resourceProviderProperties, MIN_CONNECTIONS, 10));
1: 
1: 			// Timeouts
1: 			hcfg.setConnectionTimeout(toLong(resourceProviderProperties, CONNECTION_TIMEOUT, SECONDS.toMillis(30)));
1: 			hcfg.setIdleTimeout(toLong(resourceProviderProperties, IDLE_TIMEOUT, TimeUnit.MINUTES.toMillis(3)));
1: 			hcfg.setMaxLifetime(toLong(resourceProviderProperties, CONNECTION_LIFETIME, HOURS.toMillis(3)));
1: 
1: 			toUse = new HikariDataSource(hcfg);
1: 
1: 		} else {
1: 			toUse = unpooled;
1: 		}
1: 		return toUse;
1: 	}
1: 
0: 	private boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1: 		Object o =  ofNullable(props)
1: 			.map(m -> m.get(key))
1: 			.orElse(defaultValue);
1: 		
1: 		if (o instanceof Boolean) {
1: 			return ((Boolean) o).booleanValue();
1: 		} else if(o instanceof String) {
1: 			return Boolean.parseBoolean((String) o);
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1: 		}
1: 	}
1: 
1: 	private int toInt(Map<String, Object> props, String key, int defaultValue) {
1: 		
1: 		Object o =  ofNullable(props)
1: 				.map(m -> m.get(key))
1: 				.orElse(defaultValue);
1: 		
1: 		if (o instanceof Number) {
1: 			return ((Number) o).intValue();
1: 		} else if(o instanceof String) {
1: 			return Integer.parseInt((String) o);
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to an int");
1: 		}
1: 	}
1: 
1: 	private long toLong(Map<String, Object> props, String key, long defaultValue) {
1: 		
1: 		Object o =  ofNullable(props)
1: 				.map(m -> m.get(key))
1: 				.orElse(defaultValue);
1: 		
1: 		if (o instanceof Number) {
1: 			return ((Number) o).longValue();
1: 		} else if(o instanceof String) {
1: 			return Long.parseLong((String) o);
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a long");
1: 		}
1: 	}
1: 
1: }
============================================================================