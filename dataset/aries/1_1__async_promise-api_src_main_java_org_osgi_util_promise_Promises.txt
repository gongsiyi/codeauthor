1:14ceeb1: /*
1:14ceeb1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:14ceeb1:  *
1:14ceeb1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:14ceeb1:  * you may not use this file except in compliance with the License.
1:14ceeb1:  * You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing, software
1:14ceeb1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14ceeb1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14ceeb1:  * See the License for the specific language governing permissions and
1:14ceeb1:  * limitations under the License.
1:14ceeb1:  */
1:0d3d319: package org.osgi.util.promise;
1:0d3d319: 
1:0d3d319: import java.util.ArrayList;
1:0d3d319: import java.util.Collection;
1:0d3d319: import java.util.List;
1:0d3d319: 
1:0d3d319: /**
1:0d3d319:  * Static helper methods for Promises.
1:0d3d319:  */
1:0d3d319: public class Promises {
1:0d3d319:     /**
1:0d3d319:      * Create a new Promise that has been resolved with the specified value.
1:0d3d319:      *
1:0d3d319:      * @param value The value of the resolved Promise.
1:0d3d319:      * @param <T>   The value type associated with the returned Promise.
1:0d3d319:      * @return A new Promise that has been resolved with the specified value.
1:0d3d319:      */
1:0d3d319:     public static <T> Promise<T> resolved(T value) {
1:0d3d319:         Deferred<T> def = new Deferred<T>();
1:0d3d319:         def.resolve(value);
1:0d3d319:         return def.getPromise();
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Create a new Promise that has been resolved with the specified failure.
1:0d3d319:      *
1:0d3d319:      * @param failure The failure of the resolved Promise. Must not be null.
1:0d3d319:      * @param <T>     The value type associated with the returned Promise.
1:0d3d319:      * @return A new Promise that has been resolved with the specified failure.
1:0d3d319:      */
1:0d3d319:     public static <T> Promise<T> failed(Throwable failure) {
1:0d3d319:         if (failure == null)
1:0d3d319:             throw new NullPointerException();
1:0d3d319:         Deferred<T> def = new Deferred<T>();
1:0d3d319:         def.fail(failure);
1:0d3d319:         return def.getPromise();
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Create a new Promise that is a latch on the resolution of the specified Promises.
1:0d3d319:      * <p/>
1:0d3d319:      * The new Promise acts as a gate and must be resolved after all of the specified Promises are resolved.
1:0d3d319:      *
1:0d3d319:      * @param promises The Promises which must be resolved before the returned Promise must be resolved. Must not be
1:0d3d319:      *                 null.
1:0d3d319:      * @param <T>      The value type of the List value associated with the returned Promise.
1:0d3d319:      * @param <S>      A subtype of the value type of the List value associated with the returned Promise.
1:0d3d319:      * @return A Promise that is resolved only when all the specified Promises are resolved. The returned Promise will
1:0d3d319:      * be successfully resolved, with a List of the values in the order of the specified Promises, if all the specified
1:0d3d319:      * Promises are successfully resolved. The List in the returned Promise is the property of the caller and is
1:0d3d319:      * modifiable. The returned Promise will be resolved with a failure of FailedPromisesException if any of the
1:0d3d319:      * specified Promises are resolved with a failure. The failure FailedPromisesException must contain all of the
1:0d3d319:      * specified Promises which resolved with a failure.
1:0d3d319:      */
1:0d3d319:     public static <T, S> Promise<List<T>> all(final Collection<Promise<S>> promises) {
1:0d3d319:         if (promises == null)
1:0d3d319:             throw new NullPointerException();
1:0d3d319:         final Deferred<List<T>> result = new Deferred<List<T>>();
1:0d3d319:         final Collection<Promise<?>> failedPromises = new ArrayList<Promise<?>>();
1:0d3d319:         final List<T> resolvedValues = new ArrayList<T>();
1:0d3d319: 
1:0d3d319:         if (promises.size() == 0) {
1:0d3d319:             result.resolve(resolvedValues);
1:0d3d319:         }
1:0d3d319:         for (final Promise<S> promise : promises) {
1:0d3d319:             promise.then(new Success<S, T>() {
1:0d3d319:                 @Override
1:0d3d319:                 public Promise<T> call(Promise<S> resolved) throws Exception {
1:0d3d319:                     // "S is subtype of the value type of the List"
1:0d3d319:                     @SuppressWarnings("unchecked")
1:0d3d319:                     T value = (T) resolved.getValue();
1:0d3d319:                     resolvedValues.add(value);
1:0d3d319: 
1:0d3d319:                     if (resolvedValues.size() == promises.size()) {
1:0d3d319:                         result.resolve(resolvedValues);
1:0d3d319:                     } else if (failedPromises.size() + resolvedValues.size() == promises.size()) {
1:0d3d319:                         result.fail(new FailedPromisesException(failedPromises));
1:0d3d319:                     }
1:0d3d319:                     return null;
1:0d3d319:                 }
1:0d3d319:             }, new Failure() {
1:0d3d319:                 @Override
1:0d3d319:                 public void fail(Promise<?> resolved) throws Exception {
1:0d3d319:                     failedPromises.add(resolved);
1:0d3d319:                     if (failedPromises.size() + resolvedValues.size() == promises.size()) {
1:0d3d319:                         result.fail(new FailedPromisesException(failedPromises));
1:0d3d319:                     }
1:0d3d319:                 }
1:0d3d319:             });
1:0d3d319: 
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         return result.getPromise();
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Create a new Promise that is a latch on the resolution of the specified Promises.
1:0d3d319:      * <p/>
1:0d3d319:      * The new Promise acts as a gate and must be resolved after all of the specified Promises are resolved.
1:0d3d319:      *
1:0d3d319:      * @param promises The Promises which must be resolved before the returned Promise must be resolved. Must not be
1:0d3d319:      *                 null.
1:0d3d319:      * @param <T>      The value type associated with the specified Promises.
1:0d3d319:      * @return A Promise that is resolved only when all the specified Promises are resolved. The returned Promise will
1:0d3d319:      * be successfully resolved, with a List of the values in the order of the specified Promises, if all the specified
1:0d3d319:      * Promises are successfully resolved. The List in the returned Promise is the property of the caller and is
1:0d3d319:      * modifiable. The returned Promise will be resolved with a failure of FailedPromisesException if any of the
1:0d3d319:      * specified Promises are resolved with a failure. The failure FailedPromisesException must contain all of the
1:0d3d319:      * specified Promises which resolved with a failure.
1:0d3d319:      */
1:0d3d319:     public static <T> Promise<List<T>> all(final Promise<? extends T>... promises) {
1:0d3d319:         if (promises == null)
1:0d3d319:             throw new NullPointerException();
1:0d3d319:         List<Promise<T>> list = new ArrayList<Promise<T>>();
1:0d3d319:         for (Promise<? extends T> promise : promises) {
1:0d3d319:             @SuppressWarnings("unchecked")
1:0d3d319:             Promise<T> pt = (Promise<T>) promise;
1:0d3d319:             list.add(pt);
1:0d3d319:         }
1:0d3d319:         return all(list);
1:0d3d319:     }
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.osgi.util.promise;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: /**
1:  * Static helper methods for Promises.
1:  */
1: public class Promises {
1:     /**
1:      * Create a new Promise that has been resolved with the specified value.
1:      *
1:      * @param value The value of the resolved Promise.
1:      * @param <T>   The value type associated with the returned Promise.
1:      * @return A new Promise that has been resolved with the specified value.
1:      */
1:     public static <T> Promise<T> resolved(T value) {
1:         Deferred<T> def = new Deferred<T>();
1:         def.resolve(value);
1:         return def.getPromise();
1:     }
1: 
1:     /**
1:      * Create a new Promise that has been resolved with the specified failure.
1:      *
1:      * @param failure The failure of the resolved Promise. Must not be null.
1:      * @param <T>     The value type associated with the returned Promise.
1:      * @return A new Promise that has been resolved with the specified failure.
1:      */
1:     public static <T> Promise<T> failed(Throwable failure) {
1:         if (failure == null)
1:             throw new NullPointerException();
1:         Deferred<T> def = new Deferred<T>();
1:         def.fail(failure);
1:         return def.getPromise();
1:     }
1: 
1:     /**
1:      * Create a new Promise that is a latch on the resolution of the specified Promises.
1:      * <p/>
1:      * The new Promise acts as a gate and must be resolved after all of the specified Promises are resolved.
1:      *
1:      * @param promises The Promises which must be resolved before the returned Promise must be resolved. Must not be
1:      *                 null.
1:      * @param <T>      The value type of the List value associated with the returned Promise.
1:      * @param <S>      A subtype of the value type of the List value associated with the returned Promise.
1:      * @return A Promise that is resolved only when all the specified Promises are resolved. The returned Promise will
1:      * be successfully resolved, with a List of the values in the order of the specified Promises, if all the specified
1:      * Promises are successfully resolved. The List in the returned Promise is the property of the caller and is
1:      * modifiable. The returned Promise will be resolved with a failure of FailedPromisesException if any of the
1:      * specified Promises are resolved with a failure. The failure FailedPromisesException must contain all of the
1:      * specified Promises which resolved with a failure.
1:      */
1:     public static <T, S> Promise<List<T>> all(final Collection<Promise<S>> promises) {
1:         if (promises == null)
1:             throw new NullPointerException();
1:         final Deferred<List<T>> result = new Deferred<List<T>>();
1:         final Collection<Promise<?>> failedPromises = new ArrayList<Promise<?>>();
1:         final List<T> resolvedValues = new ArrayList<T>();
1: 
1:         if (promises.size() == 0) {
1:             result.resolve(resolvedValues);
1:         }
1:         for (final Promise<S> promise : promises) {
1:             promise.then(new Success<S, T>() {
1:                 @Override
1:                 public Promise<T> call(Promise<S> resolved) throws Exception {
1:                     // "S is subtype of the value type of the List"
1:                     @SuppressWarnings("unchecked")
1:                     T value = (T) resolved.getValue();
1:                     resolvedValues.add(value);
1: 
1:                     if (resolvedValues.size() == promises.size()) {
1:                         result.resolve(resolvedValues);
1:                     } else if (failedPromises.size() + resolvedValues.size() == promises.size()) {
1:                         result.fail(new FailedPromisesException(failedPromises));
1:                     }
1:                     return null;
1:                 }
1:             }, new Failure() {
1:                 @Override
1:                 public void fail(Promise<?> resolved) throws Exception {
1:                     failedPromises.add(resolved);
1:                     if (failedPromises.size() + resolvedValues.size() == promises.size()) {
1:                         result.fail(new FailedPromisesException(failedPromises));
1:                     }
1:                 }
1:             });
1: 
1:         }
1: 
1:         return result.getPromise();
1:     }
1: 
1:     /**
1:      * Create a new Promise that is a latch on the resolution of the specified Promises.
1:      * <p/>
1:      * The new Promise acts as a gate and must be resolved after all of the specified Promises are resolved.
1:      *
1:      * @param promises The Promises which must be resolved before the returned Promise must be resolved. Must not be
1:      *                 null.
1:      * @param <T>      The value type associated with the specified Promises.
1:      * @return A Promise that is resolved only when all the specified Promises are resolved. The returned Promise will
1:      * be successfully resolved, with a List of the values in the order of the specified Promises, if all the specified
1:      * Promises are successfully resolved. The List in the returned Promise is the property of the caller and is
1:      * modifiable. The returned Promise will be resolved with a failure of FailedPromisesException if any of the
1:      * specified Promises are resolved with a failure. The failure FailedPromisesException must contain all of the
1:      * specified Promises which resolved with a failure.
1:      */
1:     public static <T> Promise<List<T>> all(final Promise<? extends T>... promises) {
1:         if (promises == null)
1:             throw new NullPointerException();
1:         List<Promise<T>> list = new ArrayList<Promise<T>>();
1:         for (Promise<? extends T> promise : promises) {
1:             @SuppressWarnings("unchecked")
1:             Promise<T> pt = (Promise<T>) promise;
1:             list.add(pt);
1:         }
1:         return all(list);
1:     }
1: }
============================================================================