1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:0d3d319: package org.apache.aries.async.promise.test;
1:0d3d319: 
1:14ceeb1: import static org.junit.Assert.assertEquals;
1:14ceeb1: import static org.junit.Assert.assertFalse;
1:14ceeb1: import static org.junit.Assert.assertTrue;
1:0d3d319: 
1:0d3d319: import java.util.ArrayList;
1:0d3d319: import java.util.Collection;
1:0d3d319: import java.util.List;
1:0d3d319: 
1:14ceeb1: import org.junit.Test;
1:14ceeb1: import org.osgi.util.promise.Deferred;
1:14ceeb1: import org.osgi.util.promise.FailedPromisesException;
1:14ceeb1: import org.osgi.util.promise.Promise;
1:14ceeb1: import org.osgi.util.promise.Promises;
1:0d3d319: 
1:0d3d319: public class PromisesTest {
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testResolved() throws Exception {
1:0d3d319:         final Promise<String> promise = Promises.resolved("Resolved");
1:0d3d319:         assertTrue("Promise resolved", promise.isDone());
1:0d3d319:         assertEquals("Value matches", "Resolved", promise.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testFailed() throws Exception {
1:0d3d319:         Exception failed = new Exception("Failed");
1:0d3d319:         final Promise<String> promise = Promises.failed(failed);
1:0d3d319:         assertTrue("Promise resolved", promise.isDone());
1:0d3d319:         assertEquals("Value matches", failed, promise.getFailure());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testLatch() throws Exception {
1:0d3d319:         testLatch(false, "hello", "world");
1:0d3d319:         testLatch(true, "hello", "world");
1:0d3d319:         testLatch(false, "goodbye", "!cruel", "world");
1:0d3d319:         testLatch(true, "goodbye", "!cruel", "world");
1:0d3d319:         testLatch(false, "goodbye", "!cruel", "!world");
1:0d3d319:         testLatch(false);
1:0d3d319:         testLatch(1, 2);
1:0d3d319:         testLatch(1, -2, 3);
1:0d3d319:         testLatch(1, -2, 3, -4);
1:0d3d319:         testLatch(new Integer[0]);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     // T = String
1:0d3d319:     private void testLatch(boolean preResolve, String... rv) throws Exception {
3:0d3d319:         @SuppressWarnings("unchecked")
1:0d3d319:         Deferred<String>[] dv = new Deferred[rv.length];
1:0d3d319:         @SuppressWarnings("unchecked")
1:0d3d319:         Promise<String>[] pv = new Promise[rv.length];
1:0d3d319: 
1:0d3d319:         for (int i = 0; i < rv.length; i++) {
1:0d3d319:             dv[i] = new Deferred<String>();
1:0d3d319:             pv[i] = dv[i].getPromise();
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         Promise<List<String>> latch = null;
1:0d3d319:         if (!preResolve) {
1:0d3d319:             Promise<List<String>> latch2 = Promises.all(pv);
1:0d3d319:             latch = latch2;
1:0d3d319: 
1:0d3d319:             if (rv.length == 0) {
1:0d3d319:                 assertTrue("latch resolved", latch.isDone());
1:0d3d319:                 return;
1:0d3d319:             }
1:0d3d319:             assertFalse("latch not resolved", latch.isDone());
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         int nFail = 0;
1:0d3d319:         for (int i = 0; i < rv.length; i++) {
1:0d3d319:             String res = rv[i];
1:0d3d319:             if (res.startsWith("!")) {
1:0d3d319:                 dv[i].fail(new Exception(res));
1:0d3d319:                 nFail++;
1:0d3d319:             } else {
1:0d3d319:                 dv[i].resolve(res);
1:0d3d319:             }
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         if (preResolve) {
1:0d3d319:             Promise<List<String>> latch2 = Promises.all(pv);
1:0d3d319:             latch = latch2;
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         assertTrue("latch resolved", latch.isDone());
1:0d3d319: 
1:0d3d319:         if (nFail > 0) {
1:0d3d319:             @SuppressWarnings({"not thrown", "all"})
1:0d3d319:             Throwable failure = latch.getFailure();
1:0d3d319:             assertTrue("failure instanceof FailedPromisesException", failure instanceof FailedPromisesException);
1:0d3d319:             Collection<Promise<?>> failedPromises = ((FailedPromisesException) failure).getFailedPromises();
1:0d3d319:             assertEquals("failedPromises size matches", nFail, failedPromises.size());
1:0d3d319: 
1:0d3d319:             for (int i = 0; i < rv.length; i++) {
1:0d3d319:                 Promise<String> promise = pv[i];
1:0d3d319:                 if (rv[i].startsWith("!")) {
1:0d3d319:                     assertTrue("failedPromises contains", failedPromises.contains(promise));
1:0d3d319:                 } else {
1:0d3d319:                     assertFalse("failedPromises doesn't contain", failedPromises.contains(promise));
1:0d3d319:                 }
1:0d3d319:             }
1:0d3d319:         } else {
1:0d3d319:             List<String> list = latch.getValue();
1:0d3d319:             assertEquals("list size matches", rv.length, list.size());
1:0d3d319:             for (int i = 0; i < rv.length; i++) {
1:0d3d319:                 assertEquals("list[i] matches", rv[i], list.get(i));
1:0d3d319:             }
1:0d3d319: 
1:0d3d319:             // check list is modifiable
1:0d3d319:             list.add(0, "new item");
1:0d3d319:             assertEquals("list modifiable", "new item", list.get(0));
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     // T = Number
1:0d3d319:     // S = Integer
1:0d3d319:     private void testLatch(Integer... rv) throws Exception {
1:0d3d319:         @SuppressWarnings("unchecked")
1:0d3d319:         Deferred<Integer>[] dv = new Deferred[rv.length];
1:0d3d319: 
1:0d3d319:         List<Promise<Integer>> promises = new ArrayList<Promise<Integer>>();
1:0d3d319: 
1:0d3d319:         for (int i = 0; i < rv.length; i++) {
1:0d3d319:             dv[i] = new Deferred<Integer>();
1:0d3d319:             promises.add(dv[i].getPromise());
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         Promise<List<Number>> latch = Promises.all(promises);
1:0d3d319:         if (rv.length == 0) {
1:0d3d319:             assertTrue("latch resolved", latch.isDone());
1:0d3d319:             return;
1:0d3d319:         }
1:0d3d319:         assertFalse("latch not resolved", latch.isDone());
1:0d3d319: 
1:0d3d319:         int nFail = 0;
1:0d3d319:         for (int i = 0; i < rv.length; i++) {
1:0d3d319:             Integer res = rv[i];
1:0d3d319:             if (res < 0) {
1:0d3d319:                 dv[i].fail(new Exception("fail" + res));
1:0d3d319:                 nFail++;
1:0d3d319:             } else {
1:0d3d319:                 dv[i].resolve(res);
1:0d3d319:             }
1:0d3d319:         }
1:0d3d319:         assertTrue("latch resolved", latch.isDone());
1:0d3d319: 
1:0d3d319:         if (nFail > 0) {
1:0d3d319:             @SuppressWarnings({"not thrown", "all"})
1:0d3d319:             Throwable failure = latch.getFailure();
1:0d3d319:             assertTrue("failure instanceof FailedPromisesException", failure instanceof FailedPromisesException);
1:0d3d319:             Collection<Promise<?>> failedPromises = ((FailedPromisesException) failure).getFailedPromises();
1:0d3d319:             assertEquals("failedPromises size matches", nFail, failedPromises.size());
1:0d3d319: 
1:0d3d319:             for (int i = 0; i < rv.length; i++) {
1:0d3d319:                 Promise<Integer> promise = promises.get(i);
1:0d3d319:                 if (rv[i] < 0) {
1:0d3d319:                     assertTrue("failedPromises contains", failedPromises.contains(promise));
1:0d3d319:                 } else {
1:0d3d319:                     assertFalse("failedPromises doesn't contain", failedPromises.contains(promise));
1:0d3d319:                 }
1:0d3d319:             }
1:0d3d319:         } else {
1:0d3d319:             List<Number> list = latch.getValue();
1:0d3d319:             assertEquals("list size matches", rv.length, list.size());
1:0d3d319:             for (int i = 0; i < rv.length; i++) {
1:0d3d319:                 assertEquals("list[i] matches", rv[i], list.get(i));
1:0d3d319:             }
1:0d3d319: 
1:0d3d319:             // check list is modifiable
1:0d3d319:             list.add(0, 3.14);
1:0d3d319:             assertEquals("list modifiable", 3.14, list.get(0));
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319: 
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import org.junit.Test;
1: import org.osgi.util.promise.Deferred;
1: import org.osgi.util.promise.FailedPromisesException;
1: import org.osgi.util.promise.Promise;
1: import org.osgi.util.promise.Promises;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.promise.test;
1: 
0: import org.osgi.util.promise.Deferred;
0: import org.osgi.util.promise.FailedPromisesException;
0: import org.osgi.util.promise.Promise;
0: import org.osgi.util.promise.Promises;
0: import org.junit.Test;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class PromisesTest {
1: 
1:     @Test
1:     public void testResolved() throws Exception {
1:         final Promise<String> promise = Promises.resolved("Resolved");
1:         assertTrue("Promise resolved", promise.isDone());
1:         assertEquals("Value matches", "Resolved", promise.getValue());
1:     }
1: 
1:     @Test
1:     public void testFailed() throws Exception {
1:         Exception failed = new Exception("Failed");
1:         final Promise<String> promise = Promises.failed(failed);
1:         assertTrue("Promise resolved", promise.isDone());
1:         assertEquals("Value matches", failed, promise.getFailure());
1:     }
1: 
1:     @Test
1:     public void testLatch() throws Exception {
1:         testLatch(false, "hello", "world");
1:         testLatch(true, "hello", "world");
1:         testLatch(false, "goodbye", "!cruel", "world");
1:         testLatch(true, "goodbye", "!cruel", "world");
1:         testLatch(false, "goodbye", "!cruel", "!world");
1:         testLatch(false);
1:         testLatch(1, 2);
1:         testLatch(1, -2, 3);
1:         testLatch(1, -2, 3, -4);
1:         testLatch(new Integer[0]);
1:     }
1: 
1:     // T = String
1:     private void testLatch(boolean preResolve, String... rv) throws Exception {
1:         @SuppressWarnings("unchecked")
1:         Deferred<String>[] dv = new Deferred[rv.length];
1:         @SuppressWarnings("unchecked")
1:         Promise<String>[] pv = new Promise[rv.length];
1: 
1:         for (int i = 0; i < rv.length; i++) {
1:             dv[i] = new Deferred<String>();
1:             pv[i] = dv[i].getPromise();
1:         }
1: 
1:         Promise<List<String>> latch = null;
1:         if (!preResolve) {
1:             @SuppressWarnings("unchecked")
1:             Promise<List<String>> latch2 = Promises.all(pv);
1:             latch = latch2;
1: 
1:             if (rv.length == 0) {
1:                 assertTrue("latch resolved", latch.isDone());
1:                 return;
1:             }
1:             assertFalse("latch not resolved", latch.isDone());
1:         }
1: 
1:         int nFail = 0;
1:         for (int i = 0; i < rv.length; i++) {
1:             String res = rv[i];
1:             if (res.startsWith("!")) {
1:                 dv[i].fail(new Exception(res));
1:                 nFail++;
1:             } else {
1:                 dv[i].resolve(res);
1:             }
1:         }
1: 
1:         if (preResolve) {
1:             @SuppressWarnings("unchecked")
1:             Promise<List<String>> latch2 = Promises.all(pv);
1:             latch = latch2;
1:         }
1: 
1:         assertTrue("latch resolved", latch.isDone());
1: 
1:         if (nFail > 0) {
1:             @SuppressWarnings({"not thrown", "all"})
1:             Throwable failure = latch.getFailure();
1:             assertTrue("failure instanceof FailedPromisesException", failure instanceof FailedPromisesException);
1:             Collection<Promise<?>> failedPromises = ((FailedPromisesException) failure).getFailedPromises();
1:             assertEquals("failedPromises size matches", nFail, failedPromises.size());
1: 
1:             for (int i = 0; i < rv.length; i++) {
1:                 Promise<String> promise = pv[i];
1:                 if (rv[i].startsWith("!")) {
1:                     assertTrue("failedPromises contains", failedPromises.contains(promise));
1:                 } else {
1:                     assertFalse("failedPromises doesn't contain", failedPromises.contains(promise));
1:                 }
1:             }
1:         } else {
1:             List<String> list = latch.getValue();
1:             assertEquals("list size matches", rv.length, list.size());
1:             for (int i = 0; i < rv.length; i++) {
1:                 assertEquals("list[i] matches", rv[i], list.get(i));
1:             }
1: 
1:             // check list is modifiable
1:             list.add(0, "new item");
1:             assertEquals("list modifiable", "new item", list.get(0));
1:         }
1:     }
1: 
1:     // T = Number
1:     // S = Integer
1:     private void testLatch(Integer... rv) throws Exception {
1:         @SuppressWarnings("unchecked")
1:         Deferred<Integer>[] dv = new Deferred[rv.length];
1: 
1:         List<Promise<Integer>> promises = new ArrayList<Promise<Integer>>();
1: 
1:         for (int i = 0; i < rv.length; i++) {
1:             dv[i] = new Deferred<Integer>();
1:             promises.add(dv[i].getPromise());
1:         }
1: 
1:         Promise<List<Number>> latch = Promises.all(promises);
1:         if (rv.length == 0) {
1:             assertTrue("latch resolved", latch.isDone());
1:             return;
1:         }
1:         assertFalse("latch not resolved", latch.isDone());
1: 
1:         int nFail = 0;
1:         for (int i = 0; i < rv.length; i++) {
1:             Integer res = rv[i];
1:             if (res < 0) {
1:                 dv[i].fail(new Exception("fail" + res));
1:                 nFail++;
1:             } else {
1:                 dv[i].resolve(res);
1:             }
1:         }
1:         assertTrue("latch resolved", latch.isDone());
1: 
1:         if (nFail > 0) {
1:             @SuppressWarnings({"not thrown", "all"})
1:             Throwable failure = latch.getFailure();
1:             assertTrue("failure instanceof FailedPromisesException", failure instanceof FailedPromisesException);
1:             Collection<Promise<?>> failedPromises = ((FailedPromisesException) failure).getFailedPromises();
1:             assertEquals("failedPromises size matches", nFail, failedPromises.size());
1: 
1:             for (int i = 0; i < rv.length; i++) {
1:                 Promise<Integer> promise = promises.get(i);
1:                 if (rv[i] < 0) {
1:                     assertTrue("failedPromises contains", failedPromises.contains(promise));
1:                 } else {
1:                     assertFalse("failedPromises doesn't contain", failedPromises.contains(promise));
1:                 }
1:             }
1:         } else {
1:             List<Number> list = latch.getValue();
1:             assertEquals("list size matches", rv.length, list.size());
1:             for (int i = 0; i < rv.length; i++) {
1:                 assertEquals("list[i] matches", rv[i], list.get(i));
1:             }
1: 
1:             // check list is modifiable
1:             list.add(0, 3.14);
1:             assertEquals("list modifiable", 3.14, list.get(0));
1:         }
1:     }
1: 
1: 
1: }
============================================================================