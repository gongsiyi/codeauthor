1:f34e6a1: /*
1:c60a8af:  * Licensed to the Apache Software Foundation (ASF) under one
1:c60a8af:  * or more contributor license agreements.  See the NOTICE file
1:c60a8af:  * distributed with this work for additional information
1:c60a8af:  * regarding copyright ownership.  The ASF licenses this file
1:c60a8af:  * to you under the Apache License, Version 2.0 (the
1:c60a8af:  * "License"); you may not use this file except in compliance
1:c60a8af:  * with the License.  You may obtain a copy of the License at
1:65e113c:  *
1:c60a8af:  *   http://www.apache.org/licenses/LICENSE-2.0
2:c60a8af:  *
1:c60a8af:  * Unless required by applicable law or agreed to in writing,
1:c60a8af:  * software distributed under the License is distributed on an
1:c60a8af:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c60a8af:  * KIND, either express or implied.  See the License for the
1:c60a8af:  * specific language governing permissions and limitations
1:c60a8af:  * under the License.
1:f34e6a1:  */
1:c60a8af: package org.apache.aries.application.runtime.itests;
16:c78a28f: 
1:c60a8af: import static org.junit.Assert.assertEquals;
1:c60a8af: import static org.junit.Assert.assertTrue;
1:2ef667c: import static org.osgi.framework.Constants.BUNDLE_MANIFESTVERSION;
1:2ef667c: import static org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME;
1:2ef667c: import static org.osgi.framework.Constants.BUNDLE_VERSION;
1:2ef667c: import static org.osgi.framework.Constants.EXPORT_PACKAGE;
1:2ef667c: import static org.osgi.framework.Constants.IMPORT_PACKAGE;
1:0223547: import static org.ops4j.pax.exam.CoreOptions.*;
1:65e113c: 
1:c60a8af: import java.io.File;
1:c78a28f: import java.io.FileInputStream;
1:c60a8af: import java.io.FileOutputStream;
1:c60a8af: import java.util.ArrayList;
1:cce7f7c: import java.util.Arrays;
1:cce7f7c: import java.util.Collection;
1:c60a8af: import java.util.HashSet;
1:c60a8af: import java.util.List;
1:c60a8af: import java.util.Set;
1:65e113c: 
1:cce7f7c: import org.apache.aries.application.Content;
1:c60a8af: import org.apache.aries.application.DeploymentContent;
1:c60a8af: import org.apache.aries.application.DeploymentMetadata;
1:c60a8af: import org.apache.aries.application.management.AriesApplication;
1:694eb45: import org.apache.aries.application.management.AriesApplicationContext;
1:c60a8af: import org.apache.aries.application.management.AriesApplicationManager;
1:c78a28f: import org.apache.aries.application.management.ResolverException;
1:89f804e: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1:cce7f7c: import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
1:92429ff: import org.apache.aries.application.modelling.ModelledResource;
1:92429ff: import org.apache.aries.application.modelling.ModelledResourceManager;
1:65e113c: import org.apache.aries.application.utils.AppConstants;
1:cce7f7c: import org.apache.aries.application.utils.manifest.ContentFactory;
1:86224ba: import org.apache.aries.itest.AbstractIntegrationTest;
1:c60a8af: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:c60a8af: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:248447e: import org.apache.felix.bundlerepository.Repository;
1:248447e: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:92429ff: import org.junit.After;
1:c60a8af: import org.junit.Before;
1:c60a8af: import org.junit.Test;
1:c60a8af: import org.junit.runner.RunWith;
1:0223547: import org.ops4j.pax.exam.Configuration;
1:c60a8af: import org.ops4j.pax.exam.Option;
1:0223547: import org.ops4j.pax.exam.junit.PaxExam;
1:0223547: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:0223547: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:c60a8af: import org.osgi.framework.Bundle;
1:cce7f7c: 
1:0223547: @RunWith(PaxExam.class)
1:0223547: @ExamReactorStrategy(PerClass.class)
1:0223547: public class OBRResolverTest extends AbstractIntegrationTest {
1:cce7f7c: 
1:0223547:     public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
1:0223547:     public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
1:0223547:     public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
1:0223547:     public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
1:0223547:     public static final String BUNDLE_IN_FRAMEWORK = "org.apache.aries.util";
1:cce7f7c: 
1:86224ba: 
1:0223547:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:0223547:      * are created in the paxweb temp directory, and not in the svn tree
1:0223547:      */
1:0223547:     @Before
1:0223547:     public void createApplications() throws Exception {
1:0223547:         ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
1:0223547:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(IMPORT_PACKAGE, "p.q.r, x.y.z, javax.naming, " + BUNDLE_IN_FRAMEWORK)
1:0223547:                 .attribute(BUNDLE_VERSION, "1.0.0").end();
1:c78a28f: 
1:c78a28f: 
1:0223547:         FileOutputStream fout = new FileOutputStream(CORE_BUNDLE_BY_VALUE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:cce7f7c: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
1:0223547:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(EXPORT_PACKAGE, "p.q.r")
1:0223547:                 .attribute(BUNDLE_VERSION, "1.0.0").end();
1:cce7f7c: 
1:0223547:         fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:cce7f7c: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
1:0223547:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(EXPORT_PACKAGE, "x.y.z")
1:0223547:                 .attribute(BUNDLE_VERSION, "1.0.0").end();
1:c78a28f: 
1:0223547:         fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
1:0223547:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(EXPORT_PACKAGE, "d.e.f")
1:0223547:                 .attribute(BUNDLE_VERSION, "1.0.0").end();
1:0223547: 
1:0223547:         fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
1:0223547:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(EXPORT_PACKAGE, "d.e.f").end();
1:0223547: 
1:0223547:         fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         ZipFixture testEba = ArchiveFixture.newZip()
1:0223547:                 .binary("META-INF/APPLICATION.MF",
1:0223547:                         OBRResolverTest.class.getClassLoader().getResourceAsStream("obr/APPLICATION.MF"))
1:0223547:                 .end()
1:0223547:                 .binary(CORE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(CORE_BUNDLE_BY_VALUE + ".jar")).end()
1:0223547:                 .binary(TRANSITIVE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar")).end();
1:0223547: 
1:0223547:         fout = new FileOutputStream("blog.eba");
1:0223547:         testEba.writeOut(fout);
1:0223547:         fout.close();
2:cce7f7c:     }
1:f34e6a1: 
1:0223547:     @After
1:0223547:     public void clearRepository() {
1:0223547:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:0223547:         Repository[] repos = repositoryAdmin.listRepositories();
1:0223547:         if ((repos != null) && (repos.length > 0)) {
1:0223547:             for (Repository repo : repos) {
1:0223547:                 repositoryAdmin.removeRepository(repo.getURI());
1:0223547:             }
1:0223547:         }
1:f34e6a1:     }
1:8069959: 
1:0223547:     @Test(expected = ResolverException.class)
1:0223547:     public void testBlogAppResolveFail() throws ResolverException, Exception {
1:0223547:         //  provision against the local runtime
1:0223547:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
1:0223547:         generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
1:0223547: 
1:0223547:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:0223547: 
1:0223547:         Repository[] repos = repositoryAdmin.listRepositories();
1:0223547:         for (Repository repo : repos) {
1:0223547:             repositoryAdmin.removeRepository(repo.getURI());
1:0223547:         }
1:0223547: 
1:0223547:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1:0223547: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
1:0223547:         //installing requires a valid url for the bundle in repository.xml.
1:0223547: 
1:0223547:         app = manager.resolve(app);
1:8069959:     }
1:8069959: 
1:0223547:     /**
1:0223547:      * Test the resolution should fail because the required package org.apache.aries.util is provided by the local runtime,
1:0223547:      * which is not included when provisioning.
1:0223547:      *
1:0223547:      * @throws Exception
1:0223547:      */
1:0223547:     @Test(expected = ResolverException.class)
1:0223547:     public void testProvisionExcludeLocalRepo() throws Exception {
1:0223547:         // do not provision against the local runtime
1:0223547:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:0223547:         generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547: 
1:0223547:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:0223547: 
1:0223547:         Repository[] repos = repositoryAdmin.listRepositories();
1:0223547:         for (Repository repo : repos) {
1:0223547:             repositoryAdmin.removeRepository(repo.getURI());
1:0223547:         }
1:0223547: 
1:0223547:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1:0223547: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
1:0223547:         //installing requires a valid url for the bundle in repository.xml.
1:0223547: 
1:0223547:         app = manager.resolve(app);
1:8069959:     }
1:8069959: 
1:0223547:     @Test
1:0223547:     public void test_resolve_self_contained_app_in_isolation() throws Exception {
1:0223547:         assertEquals(2, createAndResolveSelfContainedApp("org.osgi.framework").size());
1:65e113c:     }
1:0223547: 
1:0223547:     @Test(expected = ResolverException.class)
1:0223547:     public void test_resolve_non_self_contained_app_in_isolation() throws Exception {
1:0223547:         createAndResolveSelfContainedApp("org.osgi.service.blueprint");
1:0223547:     }
1:0223547: 
1:0223547:     private Collection<ModelledResource> createAndResolveSelfContainedApp(String extraImport) throws Exception {
1:0223547:         FileOutputStream fout = new FileOutputStream(new File("a.bundle.jar"));
1:0223547:         ArchiveFixture.newJar()
1:0223547:                 .manifest()
1:0223547:                 .attribute(BUNDLE_SYMBOLICNAME, "a.bundle")
1:0223547:                 .attribute(BUNDLE_VERSION, "1.0.0")
1:0223547:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(IMPORT_PACKAGE, "a.pack.age")
1:0223547:                 .end().writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         fout = new FileOutputStream(new File("b.bundle.jar"));
1:0223547:         ArchiveFixture.newJar()
1:0223547:                 .manifest()
1:0223547:                 .attribute(BUNDLE_SYMBOLICNAME, "b.bundle")
1:0223547:                 .attribute(BUNDLE_VERSION, "1.0.0")
1:0223547:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(IMPORT_PACKAGE, extraImport)
1:0223547:                 .attribute(EXPORT_PACKAGE, "a.pack.age")
1:0223547:                 .end().writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         ModelledResourceManager mrm = context().getService(ModelledResourceManager.class);
1:0223547:         ModelledResource aBundle = mrm.getModelledResource(FileSystem.getFSRoot(new File("a.bundle.jar")));
1:0223547:         ModelledResource bBundle = mrm.getModelledResource(FileSystem.getFSRoot(new File("b.bundle.jar")));
1:0223547: 
1:0223547:         AriesApplicationResolver resolver = context().getService(AriesApplicationResolver.class);
1:0223547:         return resolver.resolveInIsolation("test.app", "1.0.0",
1:0223547:                 Arrays.asList(aBundle, bBundle),
1:0223547:                 Arrays.<Content>asList(ContentFactory.parseContent("a.bundle", "1.0.0"), ContentFactory.parseContent("b.bundle", "1.0.0")));
1:0223547:     }
1:0223547: 
1:0223547:     @Test
1:0223547:     public void testBlogApp() throws Exception {
1:0223547:         //  provision against the local runtime
1:0223547:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
1:0223547:         generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547: 
1:0223547:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:0223547: 
1:0223547:         Repository[] repos = repositoryAdmin.listRepositories();
1:0223547:         for (Repository repo : repos) {
1:0223547:             repositoryAdmin.removeRepository(repo.getURI());
1:0223547:         }
1:0223547: 
1:0223547:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1:0223547: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
1:0223547:         //installing requires a valid url for the bundle in repository.xml.
1:0223547: 
1:0223547:         app = manager.resolve(app);
1:0223547: 
1:0223547:         DeploymentMetadata depMeta = app.getDeploymentMetadata();
1:0223547: 
1:0223547:         List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
1:0223547: 
1:0223547:         assertEquals(provision.toString(), 3, provision.size());
1:0223547: 
1:0223547:         List<String> bundleSymbolicNames = new ArrayList<String>();
1:0223547: 
1:0223547:         for (DeploymentContent dep : provision) {
1:0223547:             bundleSymbolicNames.add(dep.getContentName());
1:0223547:         }
1:0223547: 
1:0223547:         assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
1:0223547:         assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
1:0223547:         assertTrue("Bundle " + BUNDLE_IN_FRAMEWORK + " not found.", bundleSymbolicNames.contains(BUNDLE_IN_FRAMEWORK));
1:0223547: 
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         Set<Bundle> bundles = ctx.getApplicationContent();
1:0223547: 
1:0223547:         assertEquals("Number of bundles provisioned in the app", 4, bundles.size());
1:0223547: 
1:0223547:         ctx.stop();
1:0223547:         manager.uninstall(ctx);
1:65e113c:     }
1:65e113c: 
1:65e113c: 
1:0223547:     private void generateOBRRepoXML(String... bundleFiles) throws Exception {
1:0223547:         Set<ModelledResource> mrs = new HashSet<ModelledResource>();
1:0223547:         FileOutputStream fout = new FileOutputStream("repository.xml");
1:0223547:         RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
1:0223547:         ModelledResourceManager modelledResourceManager = context().getService(ModelledResourceManager.class);
1:0223547:         for (String fileName : bundleFiles) {
1:0223547:             File bundleFile = new File(fileName);
1:0223547:             IDirectory jarDir = FileSystem.getFSRoot(bundleFile);
1:0223547:             mrs.add(modelledResourceManager.getModelledResource(bundleFile.toURI().toString(), jarDir));
1:0223547:         }
1:0223547:         repositoryGenerator.generateRepository("Test repo description", mrs, fout);
1:0223547:         fout.close();
1:0223547:     }
1:65e113c: 
1:0223547:     @Configuration
1:0223547:     public static Option[] configuration() {
1:0223547:         return options(
1:65e113c: 
1:0223547:                 // framework / core bundles
1:0223547:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:65e113c: 
1:0223547:                 // Logging
1:0223547:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:0223547: 
1:0223547:                 // Bundles
1:0223547:                 junitBundles(),
1:0223547:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:0223547: 
1:0223547:                 // Bundles
1:0223547:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:0223547:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces").versionAsInProject());
1:0223547:     }
1:cce7f7c: 
1:cce7f7c: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e334773
/////////////////////////////////////////////////////////////////////////
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:0223547
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public class OBRResolverTest extends AbstractIntegrationTest {
1:     public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
1:     public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
1:     public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
1:     public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
1:     public static final String BUNDLE_IN_FRAMEWORK = "org.apache.aries.util";
1:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:      * are created in the paxweb temp directory, and not in the svn tree
1:      */
1:     @Before
1:     public void createApplications() throws Exception {
1:         ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
1:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(IMPORT_PACKAGE, "p.q.r, x.y.z, javax.naming, " + BUNDLE_IN_FRAMEWORK)
1:                 .attribute(BUNDLE_VERSION, "1.0.0").end();
1:         FileOutputStream fout = new FileOutputStream(CORE_BUNDLE_BY_VALUE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
1:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(EXPORT_PACKAGE, "p.q.r")
1:                 .attribute(BUNDLE_VERSION, "1.0.0").end();
1:         fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
1:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(EXPORT_PACKAGE, "x.y.z")
1:                 .attribute(BUNDLE_VERSION, "1.0.0").end();
1:         fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
1:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(EXPORT_PACKAGE, "d.e.f")
1:                 .attribute(BUNDLE_VERSION, "1.0.0").end();
1: 
1:         fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
1:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(EXPORT_PACKAGE, "d.e.f").end();
1: 
1:         fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1:         ZipFixture testEba = ArchiveFixture.newZip()
1:                 .binary("META-INF/APPLICATION.MF",
1:                         OBRResolverTest.class.getClassLoader().getResourceAsStream("obr/APPLICATION.MF"))
1:                 .end()
1:                 .binary(CORE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(CORE_BUNDLE_BY_VALUE + ".jar")).end()
1:                 .binary(TRANSITIVE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar")).end();
1: 
1:         fout = new FileOutputStream("blog.eba");
1:         testEba.writeOut(fout);
1:         fout.close();
1:     @After
1:     public void clearRepository() {
1:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:         Repository[] repos = repositoryAdmin.listRepositories();
1:         if ((repos != null) && (repos.length > 0)) {
1:             for (Repository repo : repos) {
1:                 repositoryAdmin.removeRepository(repo.getURI());
1:             }
1:         }
1:     @Test(expected = ResolverException.class)
1:     public void testBlogAppResolveFail() throws ResolverException, Exception {
1:         //  provision against the local runtime
1:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
1:         generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
1: 
1:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1: 
1:         Repository[] repos = repositoryAdmin.listRepositories();
1:         for (Repository repo : repos) {
1:             repositoryAdmin.removeRepository(repo.getURI());
1:         }
1: 
1:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
1:         //installing requires a valid url for the bundle in repository.xml.
1: 
1:         app = manager.resolve(app);
1:     /**
1:      * Test the resolution should fail because the required package org.apache.aries.util is provided by the local runtime,
1:      * which is not included when provisioning.
1:      *
1:      * @throws Exception
1:      */
1:     @Test(expected = ResolverException.class)
1:     public void testProvisionExcludeLocalRepo() throws Exception {
1:         // do not provision against the local runtime
1:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:         generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar");
1: 
1:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1: 
1:         Repository[] repos = repositoryAdmin.listRepositories();
1:         for (Repository repo : repos) {
1:             repositoryAdmin.removeRepository(repo.getURI());
1:         }
1: 
1:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
1:         //installing requires a valid url for the bundle in repository.xml.
1: 
1:         app = manager.resolve(app);
1:     @Test
1:     public void test_resolve_self_contained_app_in_isolation() throws Exception {
1:         assertEquals(2, createAndResolveSelfContainedApp("org.osgi.framework").size());
1: 
1:     @Test(expected = ResolverException.class)
1:     public void test_resolve_non_self_contained_app_in_isolation() throws Exception {
1:         createAndResolveSelfContainedApp("org.osgi.service.blueprint");
1:     }
1: 
1:     private Collection<ModelledResource> createAndResolveSelfContainedApp(String extraImport) throws Exception {
1:         FileOutputStream fout = new FileOutputStream(new File("a.bundle.jar"));
1:         ArchiveFixture.newJar()
1:                 .manifest()
1:                 .attribute(BUNDLE_SYMBOLICNAME, "a.bundle")
1:                 .attribute(BUNDLE_VERSION, "1.0.0")
1:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(IMPORT_PACKAGE, "a.pack.age")
1:                 .end().writeOut(fout);
1:         fout.close();
1: 
1:         fout = new FileOutputStream(new File("b.bundle.jar"));
1:         ArchiveFixture.newJar()
1:                 .manifest()
1:                 .attribute(BUNDLE_SYMBOLICNAME, "b.bundle")
1:                 .attribute(BUNDLE_VERSION, "1.0.0")
1:                 .attribute(BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(IMPORT_PACKAGE, extraImport)
1:                 .attribute(EXPORT_PACKAGE, "a.pack.age")
1:                 .end().writeOut(fout);
1:         fout.close();
1: 
1:         ModelledResourceManager mrm = context().getService(ModelledResourceManager.class);
1:         ModelledResource aBundle = mrm.getModelledResource(FileSystem.getFSRoot(new File("a.bundle.jar")));
1:         ModelledResource bBundle = mrm.getModelledResource(FileSystem.getFSRoot(new File("b.bundle.jar")));
1: 
1:         AriesApplicationResolver resolver = context().getService(AriesApplicationResolver.class);
1:         return resolver.resolveInIsolation("test.app", "1.0.0",
1:                 Arrays.asList(aBundle, bBundle),
1:                 Arrays.<Content>asList(ContentFactory.parseContent("a.bundle", "1.0.0"), ContentFactory.parseContent("b.bundle", "1.0.0")));
1:     }
1: 
1:     @Test
1:     public void testBlogApp() throws Exception {
1:         //  provision against the local runtime
1:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
1:         generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar");
1: 
1:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1: 
1:         Repository[] repos = repositoryAdmin.listRepositories();
1:         for (Repository repo : repos) {
1:             repositoryAdmin.removeRepository(repo.getURI());
1:         }
1: 
1:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
1:         //installing requires a valid url for the bundle in repository.xml.
1: 
1:         app = manager.resolve(app);
1: 
1:         DeploymentMetadata depMeta = app.getDeploymentMetadata();
1: 
1:         List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
1: 
1:         assertEquals(provision.toString(), 3, provision.size());
1: 
1:         List<String> bundleSymbolicNames = new ArrayList<String>();
1: 
1:         for (DeploymentContent dep : provision) {
1:             bundleSymbolicNames.add(dep.getContentName());
1:         }
1: 
1:         assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
1:         assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
1:         assertTrue("Bundle " + BUNDLE_IN_FRAMEWORK + " not found.", bundleSymbolicNames.contains(BUNDLE_IN_FRAMEWORK));
1: 
1:         AriesApplicationContext ctx = manager.install(app);
1:         ctx.start();
1: 
1:         Set<Bundle> bundles = ctx.getApplicationContent();
1: 
1:         assertEquals("Number of bundles provisioned in the app", 4, bundles.size());
1: 
1:         ctx.stop();
1:         manager.uninstall(ctx);
1:     private void generateOBRRepoXML(String... bundleFiles) throws Exception {
1:         Set<ModelledResource> mrs = new HashSet<ModelledResource>();
1:         FileOutputStream fout = new FileOutputStream("repository.xml");
1:         RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
1:         ModelledResourceManager modelledResourceManager = context().getService(ModelledResourceManager.class);
1:         for (String fileName : bundleFiles) {
1:             File bundleFile = new File(fileName);
1:             IDirectory jarDir = FileSystem.getFSRoot(bundleFile);
1:             mrs.add(modelledResourceManager.getModelledResource(bundleFile.toURI().toString(), jarDir));
1:         }
1:         repositoryGenerator.generateRepository("Test repo description", mrs, fout);
1:         fout.close();
1:     }
1:     @Configuration
1:     public static Option[] configuration() {
1:         return options(
1:                 // framework / core bundles
1:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
0:                 mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:                 // Logging
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 
1:                 // Bundles
1:                 junitBundles(),
1:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 
1:                 // Bundles
1:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces").versionAsInProject());
1:     }
author:John Ross
-------------------------------------------------------------------------------
commit:cffbcb0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
/////////////////////////////////////////////////////////////////////////
0:   public static Option[] configuration()
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties")        
commit:f34e6a1
/////////////////////////////////////////////////////////////////////////
1:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
1:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
0:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
0:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox38Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.8.0.V20120529-1548")
0: 	          );
1:   }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8069959
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
0:   private static Option[] generalConfiguration() {
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.osgi", "org.osgi.compendium")
/////////////////////////////////////////////////////////////////////////
0:         );
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox35Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 	          equinox().version("3.5.0")
0: 	          );
1:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox37Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.7.0.v20110613")
0: 	          );
1:   }
1: 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:2ef667c
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
1: import static org.osgi.framework.Constants.BUNDLE_MANIFESTVERSION;
1: import static org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME;
1: import static org.osgi.framework.Constants.BUNDLE_VERSION;
1: import static org.osgi.framework.Constants.EXPORT_PACKAGE;
1: import static org.osgi.framework.Constants.IMPORT_PACKAGE;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(provision.toString(), 3, provision.size());
commit:2b7f337
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
commit:65e113c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.AppConstants;
/////////////////////////////////////////////////////////////////////////
0:     //  provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * Test the resolution should fail because the required package org.apache.aries.util is provided by the local runtime, 
0:    * which is not included when provisioning.
1:    *  
0:    * @throws Exception
0:    */
0:   @Test(expected=ResolverException.class)
0:   public void testProvisionExcludeLocalRepo() throws Exception {
0:     // do not provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
0:     generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar");
1:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
1:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
1:     }
1:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
0:     //installing requires a valid url for the bundle in repository.xml.
1:     
0:     app = manager.resolve(app);
1:     
1: 
1:   }
0:     //  provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:cce7f7c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
1: import org.apache.aries.application.Content;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
1: import org.apache.aries.application.utils.manifest.ContentFactory;
/////////////////////////////////////////////////////////////////////////
0: import static org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME;
0: import static org.osgi.framework.Constants.BUNDLE_MANIFESTVERSION;
0: import static org.osgi.framework.Constants.IMPORT_PACKAGE;
0: import static org.osgi.framework.Constants.EXPORT_PACKAGE;
0: import static org.osgi.framework.Constants.BUNDLE_VERSION;
/////////////////////////////////////////////////////////////////////////
0:                             .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
0:                             .attribute(BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(IMPORT_PACKAGE, "p.q.r, x.y.z, javax.naming, " + BUNDLE_IN_FRAMEWORK)
0:                             .attribute(BUNDLE_VERSION, "1.0.0").end();
/////////////////////////////////////////////////////////////////////////
0:                             .attribute(BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
0:                             .attribute(BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(EXPORT_PACKAGE, "p.q.r")
0:                             .attribute(BUNDLE_VERSION, "1.0.0").end();
0:                             .attribute(BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
0:                             .attribute(BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(EXPORT_PACKAGE, "x.y.z")
0:                             .attribute(BUNDLE_VERSION, "1.0.0").end();
0:                             .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:                             .attribute(BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(EXPORT_PACKAGE, "d.e.f")
0:                             .attribute(BUNDLE_VERSION, "1.0.0").end();
0:                             .attribute(BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:                             .attribute(BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(EXPORT_PACKAGE, "d.e.f").end();
/////////////////////////////////////////////////////////////////////////
1:   
0:   @Test
0:   public void test_resolve_self_contained_app_in_isolation() throws Exception {
0:       assertEquals(2, createAndResolveSelfContainedApp("org.osgi.framework").size());
1:   }
1:   
0:   @Test(expected=ResolverException.class)
0:   public void test_resolve_non_self_contained_app_in_isolation() throws Exception {
0:       createAndResolveSelfContainedApp("org.osgi.service.blueprint");
1:   }
1:   
0:   private Collection<ModelledResource> createAndResolveSelfContainedApp(String extraImport) throws Exception {
0:       FileOutputStream fout = new FileOutputStream(new File("a.bundle.jar"));
0:       ArchiveFixture.newJar()
0:               .manifest()
0:                   .attribute(BUNDLE_SYMBOLICNAME, "a.bundle")
0:                   .attribute(BUNDLE_VERSION, "1.0.0")
0:                   .attribute(BUNDLE_MANIFESTVERSION, "2")
0:                   .attribute(IMPORT_PACKAGE, "a.pack.age")
0:               .end().writeOut(fout);
0:       fout.close();
1:           
0:       fout = new FileOutputStream(new File("b.bundle.jar"));
0:       ArchiveFixture.newJar()
0:               .manifest()
0:                   .attribute(BUNDLE_SYMBOLICNAME, "b.bundle")
0:                   .attribute(BUNDLE_VERSION, "1.0.0")
0:                   .attribute(BUNDLE_MANIFESTVERSION, "2")
0:                   .attribute(IMPORT_PACKAGE, extraImport)
0:                   .attribute(EXPORT_PACKAGE, "a.pack.age")
0:               .end().writeOut(fout);
0:       fout.close();      
1:       
0:       ModelledResourceManager mrm = context().getService(ModelledResourceManager.class);
0:       ModelledResource aBundle = mrm.getModelledResource(FileSystem.getFSRoot(new File("a.bundle.jar")));
0:       ModelledResource bBundle = mrm.getModelledResource(FileSystem.getFSRoot(new File("b.bundle.jar")));
1:       
0:       AriesApplicationResolver resolver = context().getService(AriesApplicationResolver.class);
0:       return resolver.resolveInIsolation("test.app", "1.0.0", 
0:               Arrays.asList(aBundle, bBundle), 
0:               Arrays.<Content>asList(ContentFactory.parseContent("a.bundle", "1.0.0"), ContentFactory.parseContent("b.bundle", "1.0.0")));
1:   }
1:   
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
0: 	  RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
0:     ModelledResourceManager modelledResourceManager = context().getService(ModelledResourceManager.class);
/////////////////////////////////////////////////////////////////////////
0:     return testOptions(
0:         paxLogging("DEBUG"),
1:         
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:910fec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(provision.toString(), 4, provision.size());
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:be6ac25
/////////////////////////////////////////////////////////////////////////
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
commit:248447e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.felix.bundlerepository.Repository;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
/////////////////////////////////////////////////////////////////////////
0:       repositoryAdmin.removeRepository(repo.getURI());
/////////////////////////////////////////////////////////////////////////
0:       repositoryAdmin.removeRepository(repo.getURI());
commit:c78a28f
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.ResolverException;
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.Constants;
0: public class OBRResolverTest extends AbstractIntegrationTest 
0:   public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
0:   public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
0:   public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.reference";
0:   public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.value";
1:   
1:   
0:     ZipFixture bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.IMPORT_PACKAGE, "p.q.r, x.y.z")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
1:     
0:     FileOutputStream fout = new FileOutputStream(CORE_BUNDLE_BY_VALUE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "p.q.r")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
0:     fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "x.y.z")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:     
0:     fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "d.e.f")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:     
0:     fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "d.e.f").end();
1: 
0:     fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1:     
0:         OBRResolverTest.class.getClassLoader().getResourceAsStream("obr/APPLICATION.MF"))
0:       .binary(CORE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(CORE_BUNDLE_BY_VALUE + ".jar")).end()
0:       .binary(TRANSITIVE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar")).end();
0:     fout = new FileOutputStream("blog.eba");
0:   @Test(expected=ResolverException.class)
0:   public void testBlogAppResolveFail() throws ResolverException, Exception
0:   {
0:     generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
1:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
1:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURL());
0:     }
1:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
0:     //installing requires a valid url for the bundle in repository.xml.
1:     
0:     app = manager.resolve(app);
0:   }
1:   
0:     generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar");
/////////////////////////////////////////////////////////////////////////
0:     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
0:     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
0:   private void generateOBRRepoXML(String ... bundleFiles) throws Exception
0:     for (String file : bundleFiles) {
0:       bundles.add(createBundleInfo(new File(file).toURI().toURL().toExternalForm()));
0:     }
0:     Document doc = RepositoryDescriptorGenerator.generateRepositoryDescriptor("Test repo description", bundles);
commit:c60a8af
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.application.runtime.itests;
0: 
1: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0: 
1: import java.io.File;
1: import java.io.FileOutputStream;
0: import java.lang.reflect.Constructor;
0: import java.net.URL;
0: import java.util.Date;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
0: 
0: import javax.xml.transform.TransformerFactory;
0: import javax.xml.transform.dom.DOMSource;
0: import javax.xml.transform.stream.StreamResult;
0: 
0: import org.apache.aries.application.ApplicationMetadataFactory;
1: import org.apache.aries.application.DeploymentContent;
1: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.management.ApplicationContext;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.resolver.obr.generator.RepositoryDescriptorGenerator;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
0: import org.apache.aries.samples.blog.api.BloggingService;
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleEvent;
0: import org.osgi.framework.BundleListener;
0: import org.osgi.service.obr.Repository;
0: import org.osgi.service.obr.RepositoryAdmin;
0: import org.w3c.dom.Document;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public class BlogSampleInstalledUsingOBRResolverTest extends AbstractIntegrationTest 
0: {
0:   /* Use @Before not @BeforeClass so as to ensure that these resources
0:    * are created in the paxweb temp directory, and not in the svn tree
0:    */
0:   @Before
0:   public static void createApplications() throws Exception 
0:   {
0:     System.out.println("creating eba " + new Date());
0:     ZipFixture testEba = ArchiveFixture.newZip()
0:      .binary("META-INF/APPLICATION.MF",
0:         BlogSampleInstalledUsingOBRResolverTest.class.getClassLoader().getResourceAsStream("blog/APPLICATION.MF"))
0:         .end()
0:       .binary("org.apache.aries.samples.blog.jar", new URL("mvn:org.apache.aries.samples/blog").openStream()).end()
0:       .binary("org.apache.derby.jar", new URL("mvn:org.apache.derby/derby").openStream()).end();
0: 
0:     FileOutputStream fout = new FileOutputStream("blog.eba");
0:     testEba.writeOut(fout);
0:     fout.close();
0:     System.out.println("created eba  " + new Date());
0:   }
0: 
0:   @Test
0:   public void testBlogApp() throws Exception 
0:   {
0:     generateOBRRepoXML();
0:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURL());
0:     }
0:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
0: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
0:     //installing requires a valid url for the bundle in repository.xml.
0:     
0:     app = manager.resolve(app);
0:     
0:     DeploymentMetadata depMeta = app.getDeploymentMetadata();
0:     
0:     List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
0:     
0:     assertEquals(provision.toString(), 2, provision.size());
0:     
0:     List<String> bundleSymbolicNames = new ArrayList<String>();
0:     
0:     for (DeploymentContent dep : provision) {
0:       bundleSymbolicNames.add(dep.getContentName());
0:     }
0:     
0:     assertTrue("Bundle org.apache.aries.samples.blog-api not found.", bundleSymbolicNames.contains("org.apache.aries.samples.blog-api"));
0:     
0:     bundleContext.addBundleListener(new BundleListener() {
0:       public void bundleChanged(BundleEvent event)
0:       {
0:         System.out.println("Bundle " + event.getBundle().getSymbolicName() + " " + event.getType() + " at " + new Date());
0:       }
0:     });
0:     
0:     System.out.println("about to install " + new Date());
0:     ApplicationContext ctx = manager.install(app);
0:     System.out.println("about to start   " + new Date());
0:     ctx.start();
0:     System.out.println("started          " + new Date());
0: 
0:     Set<Bundle> bundles = ctx.getApplicationContent();
0:     
0:     assertEquals("Number of bundles provisioned in the app", 4, bundles.size());
0:     
0:     BloggingService service = getOsgiService(BloggingService.class);
0:     
0:     assertNotNull("Found the blogging service", service);
0:     
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:   }
0: 
0: 
0:   private void generateOBRRepoXML() throws Exception
0:   {
0:     Set<BundleInfo> bundles = new HashSet<BundleInfo>();
0:     
0:     bundles.add(createBundleInfo("mvn:org.apache.aries.samples/blog-persistence"));
0:     bundles.add(createBundleInfo("mvn:org.apache.aries.samples/blog-api"));
0: //    bundles.add(createBundleInfo("mvn:org.apache.derby/derby"));
0:     
0:     Document doc = RepositoryDescriptorGenerator.generateRepositoryDescriptor("Blog sample description", bundles);
0:     
0:     FileOutputStream fout = new FileOutputStream("repository.xml");
0:     
0:     TransformerFactory.newInstance().newTransformer().transform(new DOMSource(doc), new StreamResult(fout));
0:     
0:     fout.close();
0:     
0:     TransformerFactory.newInstance().newTransformer().transform(new DOMSource(doc), new StreamResult(System.out));
0:   }
0: 
0:   private BundleInfo createBundleInfo(String urlToBundle) throws Exception
0:   {
0:     ApplicationMetadataFactory factory = getOsgiService(ApplicationMetadataFactory.class);
0:     
0:     Bundle b = getBundle("org.apache.aries.application.management");
0:     @SuppressWarnings("unchecked")
0:     Class<BundleInfo> clazz = b.loadClass("org.apache.aries.application.management.impl.BundleInfoImpl");
0:     Constructor<BundleInfo> c = clazz.getConstructor(ApplicationMetadataFactory.class, BundleManifest.class, String.class);
0:     
0:     return c.newInstance(factory, BundleManifest.fromBundle(new URL(urlToBundle).openStream()), urlToBundle);
0:   }
0: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
0:         mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0: 
0:         /* For debugging, uncomment the next two lines */
0: //        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
0: //        waitForFrameworkStartup(),
0: 
0:         /* For debugging, uncomment the next two lines
0:         and add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:         */
0: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
0: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:d3efe20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
commit:a0eca03
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.platform.repo"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.postresolve.process"),
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").noStart(),
0:         // vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
0:         // waitForFrameworkStartup(),
0:         /* For debugging, uncomment the next two lines and add these imports:
commit:92429ff
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.management.RepositoryGenerator;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.modelling.ModelledResourceManager;
0: import org.apache.felix.bundlerepository.Repository;
0: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   @After
0:   public void clearRepository() {
0: 	  RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0: 	  Repository[] repos = repositoryAdmin.listRepositories();
0: 	  if ((repos != null) && (repos.length >0)) {
0: 		  for (Repository repo : repos) {
0: 			  repositoryAdmin.removeRepository(repo.getURI());
0: 		  }
0: 	  }
0:   }
/////////////////////////////////////////////////////////////////////////
0:     Set<ModelledResource> mrs = new HashSet<ModelledResource>();
0:     RepositoryGenerator repositoryGenerator = getOsgiService(RepositoryGenerator.class);
0:     ModelledResourceManager modelledResourceManager = getOsgiService(ModelledResourceManager.class);
0:     for (String fileName : bundleFiles) {
0:       File bundleFile = new File(fileName);
0:       IDirectory jarDir = FileSystem.getFSRoot(bundleFile);
0:       mrs.add(modelledResourceManager.getModelledResource(bundleFile.toURI().toString(), jarDir));
0:     }
0:     repositoryGenerator.generateRepository("Test repo description", mrs, fout);
0:     }
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
/////////////////////////////////////////////////////////////////////////
0:         /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
0:         waitForFrameworkStartup(),*/
commit:c06b97e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     Constructor<BundleInfo> c = clazz.getConstructor(BundleManifest.class, String.class);
0:     return c.newInstance(BundleManifest.fromBundle(new URL(urlToBundle).openStream()), urlToBundle);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8702237
/////////////////////////////////////////////////////////////////////////
0:   public static final String BUNDLE_IN_FRAMEWORK = "org.apache.aries.util";
/////////////////////////////////////////////////////////////////////////
0:                             .attribute(Constants.IMPORT_PACKAGE, "p.q.r, x.y.z, javax.naming, " + BUNDLE_IN_FRAMEWORK)
/////////////////////////////////////////////////////////////////////////
0:     assertEquals(provision.toString(), 3, provision.size());
/////////////////////////////////////////////////////////////////////////
0:     assertTrue("Bundle " + BUNDLE_IN_FRAMEWORK + " not found.", bundleSymbolicNames.contains(BUNDLE_IN_FRAMEWORK));
commit:9b0cfd6
/////////////////////////////////////////////////////////////////////////
0:                             .attribute(Constants.IMPORT_PACKAGE, "p.q.r, x.y.z, javax.naming, org.apache.aries.util")
commit:694eb45
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.application.runtime.itests;
0: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.lang.reflect.Constructor;
0: import java.net.URL;
0: import java.util.ArrayList;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Set;
0: 
0: import javax.xml.transform.TransformerFactory;
0: import javax.xml.transform.dom.DOMSource;
0: import javax.xml.transform.stream.StreamResult;
0: 
0: import org.apache.aries.application.ApplicationMetadataFactory;
0: import org.apache.aries.application.DeploymentContent;
0: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
0: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.management.ResolverException;
0: import org.apache.aries.application.resolver.obr.generator.RepositoryDescriptorGenerator;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.Constants;
0: import org.osgi.service.obr.Repository;
0: import org.osgi.service.obr.RepositoryAdmin;
0: import org.w3c.dom.Document;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public class OBRResolverTest extends AbstractIntegrationTest 
0: {
0:   public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
0:   public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
0:   public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.reference";
0:   public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.value";
0:   
0:   
0:   /* Use @Before not @BeforeClass so as to ensure that these resources
0:    * are created in the paxweb temp directory, and not in the svn tree
0:    */
0:   @Before
0:   public static void createApplications() throws Exception 
0:   {
0:     ZipFixture bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.IMPORT_PACKAGE, "p.q.r, x.y.z")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0: 
0:     
0:     FileOutputStream fout = new FileOutputStream(CORE_BUNDLE_BY_VALUE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "p.q.r")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0: 
0:     fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "x.y.z")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0:     
0:     fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "d.e.f")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0:     
0:     fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "d.e.f").end();
0: 
0:     fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0:     
0:     ZipFixture testEba = ArchiveFixture.newZip()
0:      .binary("META-INF/APPLICATION.MF",
0:         OBRResolverTest.class.getClassLoader().getResourceAsStream("obr/APPLICATION.MF"))
0:         .end()
0:       .binary(CORE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(CORE_BUNDLE_BY_VALUE + ".jar")).end()
0:       .binary(TRANSITIVE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar")).end();
0: 
0:     fout = new FileOutputStream("blog.eba");
0:     testEba.writeOut(fout);
0:     fout.close();
0:   }
0: 
0:   @Test(expected=ResolverException.class)
0:   public void testBlogAppResolveFail() throws ResolverException, Exception
0:   {
0:     generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
0:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURL());
0:     }
0:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
0: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
0:     //installing requires a valid url for the bundle in repository.xml.
0:     
0:     app = manager.resolve(app);
0:   }
0:   
0:   @Test
0:   public void testBlogApp() throws Exception 
0:   {
0:     generateOBRRepoXML(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar");
0:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURL());
0:     }
0:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
0: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("blog.eba")));
0:     //installing requires a valid url for the bundle in repository.xml.
0:     
0:     app = manager.resolve(app);
0:     
0:     DeploymentMetadata depMeta = app.getDeploymentMetadata();
0:     
0:     List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
0:     
0:     assertEquals(provision.toString(), 2, provision.size());
0:     
0:     List<String> bundleSymbolicNames = new ArrayList<String>();
0:     
0:     for (DeploymentContent dep : provision) {
0:       bundleSymbolicNames.add(dep.getContentName());
0:     }
0:     
0:     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
0:     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
0:     
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
0: 
0:     Set<Bundle> bundles = ctx.getApplicationContent();
0:     
0:     assertEquals("Number of bundles provisioned in the app", 4, bundles.size());
0:     
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:   }
0: 
0: 
0:   private void generateOBRRepoXML(String ... bundleFiles) throws Exception
0:   {
0:     Set<BundleInfo> bundles = new HashSet<BundleInfo>();
0:     
0:     for (String file : bundleFiles) {
0:       bundles.add(createBundleInfo(new File(file).toURI().toURL().toExternalForm()));
0:     }
0:     
0:     Document doc = RepositoryDescriptorGenerator.generateRepositoryDescriptor("Test repo description", bundles);
0:     
0:     FileOutputStream fout = new FileOutputStream("repository.xml");
0:     
0:     TransformerFactory.newInstance().newTransformer().transform(new DOMSource(doc), new StreamResult(fout));
0:     
0:     fout.close();
0:     
0:     TransformerFactory.newInstance().newTransformer().transform(new DOMSource(doc), new StreamResult(System.out));
0:   }
0: 
0:   private BundleInfo createBundleInfo(String urlToBundle) throws Exception
0:   {
0:     ApplicationMetadataFactory factory = getOsgiService(ApplicationMetadataFactory.class);
0:     
0:     Bundle b = getBundle("org.apache.aries.application.management");
0:     @SuppressWarnings("unchecked")
0:     Class<BundleInfo> clazz = b.loadClass("org.apache.aries.application.utils.management.SimpleBundleInfo");
0:     Constructor<BundleInfo> c = clazz.getConstructor(ApplicationMetadataFactory.class, BundleManifest.class, String.class);
0:     
0:     return c.newInstance(factory, BundleManifest.fromBundle(new URL(urlToBundle).openStream()), urlToBundle);
0:   }
0: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
0:         mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0: 
0:         /* For debugging, uncomment the next two lines */
0: //        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
0: //        waitForFrameworkStartup(),
0: 
0:         /* For debugging, uncomment the next two lines
0:         and add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:         */
0: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
commit:948b72b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.AriesApplicationContext;
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationContext ctx = manager.install(app);
commit:ba73ed7
/////////////////////////////////////////////////////////////////////////
0:     Class<BundleInfo> clazz = b.loadClass("org.apache.aries.application.utils.management.SimpleBundleInfo");
author:Lin Sun
-------------------------------------------------------------------------------
commit:48d72a7
/////////////////////////////////////////////////////////////////////////
0:   public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
0:   public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
/////////////////////////////////////////////////////////////////////////
0:     startApplicationRuntimeBundle();
0: 
/////////////////////////////////////////////////////////////////////////
0:     startApplicationRuntimeBundle();
0: 
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").noStart(),
============================================================================