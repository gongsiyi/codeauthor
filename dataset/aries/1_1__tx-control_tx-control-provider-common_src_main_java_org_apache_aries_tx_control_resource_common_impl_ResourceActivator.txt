1:7c388cb: /*
1:7c388cb:  * Licensed to the Apache Software Foundation (ASF) under one
1:7c388cb:  * or more contributor license agreements.  See the NOTICE file
1:7c388cb:  * distributed with this work for additional information
1:7c388cb:  * regarding copyright ownership.  The ASF licenses this file
1:7c388cb:  * to you under the Apache License, Version 2.0 (the
1:7c388cb:  * "License"); you may not use this file except in compliance
1:7c388cb:  * with the License.  You may obtain a copy of the License at
1:7c388cb:  *
1:7c388cb:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7c388cb:  *
1:7c388cb:  * Unless required by applicable law or agreed to in writing,
1:7c388cb:  * software distributed under the License is distributed on an
1:7c388cb:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:7c388cb:  * KIND, either express or implied.  See the License for the
1:7c388cb:  * specific language governing permissions and limitations
1:7c388cb:  * under the License.
1:7c388cb:  */
1:7c388cb: package org.apache.aries.tx.control.resource.common.impl;
1:7c388cb: 
1:7c388cb: import static org.osgi.framework.Constants.SERVICE_PID;
1:7c388cb: 
1:7c388cb: import java.util.Dictionary;
1:7c388cb: import java.util.Hashtable;
1:7c388cb: 
1:7c388cb: import org.osgi.framework.BundleActivator;
1:7c388cb: import org.osgi.framework.BundleContext;
1:7c388cb: import org.osgi.framework.ServiceRegistration;
1:7c388cb: import org.osgi.service.cm.ManagedServiceFactory;
1:7c388cb: import org.slf4j.Logger;
1:7c388cb: import org.slf4j.LoggerFactory;
1:7c388cb: 
1:7c388cb: public abstract class ResourceActivator<R extends AutoCloseable, F extends TrackingResourceProviderFactory<R>> implements BundleActivator {
1:7c388cb: 
1:7c388cb: 	private static final Logger LOG = LoggerFactory.getLogger(ResourceActivator.class);
1:7c388cb: 	
1:7c388cb: 	private ResourceProviderFactoryServiceFactory<R, F> service;
1:7c388cb: 	private ConfigurationDefinedResourceFactory msf;
1:7c388cb: 	
1:7c388cb: 	private ServiceRegistration<?> reg;
1:7c388cb: 	private ServiceRegistration<ManagedServiceFactory> factoryReg;
1:7c388cb: 	
1:7c388cb: 	@Override
1:7c388cb: 	public void start(BundleContext context) throws Exception {
1:7c388cb: 		
1:7c388cb: 		service = getServiceFactory(context);
1:7c388cb: 		
1:7c388cb: 		if(service != null) {
1:7c388cb: 			reg = context.registerService(getAdvertisedInterface().getName(), 
1:7c388cb: 					service, getServiceProperties());
1:7c388cb: 		}
1:7c388cb: 		
1:7c388cb: 		msf = getConfigurationDefinedResourceFactory(context);
1:7c388cb: 		
1:7c388cb: 		if(msf != null) {
1:7c388cb: 			factoryReg = context.registerService(ManagedServiceFactory.class, 
1:7c388cb: 					msf, getMSFProperties());
1:7c388cb: 		}
1:7c388cb: 		
1:7c388cb: 		if(service == null && msf == null) {
1:7c388cb: 			LOG.warn("The Resource Activator class {} defined no service factory or configuration defined resources", getClass().getName());
1:7c388cb: 		}
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	@Override
1:7c388cb: 	public void stop(BundleContext context) throws Exception {
1:7c388cb: 		safeUnregister(reg);
1:7c388cb: 		safeUnregister(factoryReg);
1:7c388cb: 		if(msf != null) {
1:7c388cb: 			try {
1:7c388cb: 				msf.stop();
1:7c388cb: 			} catch (Exception e) {
1:7c388cb: 				LOG.error("There was an error closing the Configuration Defined Resource Manager", e);
1:7c388cb: 			}
1:7c388cb: 		}
1:7c388cb: 		if(service != null) {
1:7c388cb: 			try {
1:7c388cb: 				service.close();
1:7c388cb: 			} catch (Exception e) {
1:7c388cb: 				LOG.error("There was an error closing the ResourceProviderFactory", e);
1:7c388cb: 			}
1:7c388cb: 		}
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	private void safeUnregister(ServiceRegistration<?> reg) {
1:7c388cb: 		if(reg != null) {
1:7c388cb: 			try {
1:7c388cb: 				reg.unregister();
1:7c388cb: 			} catch (IllegalStateException ise) {
1:7c388cb: 				// Ignore this
1:7c388cb: 			}
1:7c388cb: 		}
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	protected Dictionary<String, ?> getMSFProperties() {
1:7c388cb: 		Dictionary<String, Object> props = new Hashtable<>();
1:7c388cb: 		props.put(SERVICE_PID, getMSFPid());
1:7c388cb: 		return props;
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	protected ResourceProviderFactoryServiceFactory<R, F> getServiceFactory(BundleContext context) {
1:7c388cb: 		return null;
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	protected Class<? super F> getAdvertisedInterface() {
1:7c388cb: 		throw new UnsupportedOperationException("Resource factories are not supported");
1:7c388cb: 	}
1:7c388cb: 	
1:7c388cb: 	protected Dictionary<String, Object> getServiceProperties() {
1:7c388cb: 		throw new UnsupportedOperationException("Resource factories are not supported");
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	protected ConfigurationDefinedResourceFactory getConfigurationDefinedResourceFactory(
1:7c388cb: 			BundleContext context) {
1:7c388cb: 		return null;
1:7c388cb: 	}
1:7c388cb: 	
1:7c388cb: 	protected String getMSFPid() {
1:7c388cb: 		throw new UnsupportedOperationException("Configuration defined resources are not supported");
1:7c388cb: 	}
1:7c388cb: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.resource.common.impl;
1: 
1: import static org.osgi.framework.Constants.SERVICE_PID;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ManagedServiceFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public abstract class ResourceActivator<R extends AutoCloseable, F extends TrackingResourceProviderFactory<R>> implements BundleActivator {
1: 
1: 	private static final Logger LOG = LoggerFactory.getLogger(ResourceActivator.class);
1: 	
1: 	private ResourceProviderFactoryServiceFactory<R, F> service;
1: 	private ConfigurationDefinedResourceFactory msf;
1: 	
1: 	private ServiceRegistration<?> reg;
1: 	private ServiceRegistration<ManagedServiceFactory> factoryReg;
1: 	
1: 	@Override
1: 	public void start(BundleContext context) throws Exception {
1: 		
1: 		service = getServiceFactory(context);
1: 		
1: 		if(service != null) {
1: 			reg = context.registerService(getAdvertisedInterface().getName(), 
1: 					service, getServiceProperties());
1: 		}
1: 		
1: 		msf = getConfigurationDefinedResourceFactory(context);
1: 		
1: 		if(msf != null) {
1: 			factoryReg = context.registerService(ManagedServiceFactory.class, 
1: 					msf, getMSFProperties());
1: 		}
1: 		
1: 		if(service == null && msf == null) {
1: 			LOG.warn("The Resource Activator class {} defined no service factory or configuration defined resources", getClass().getName());
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public void stop(BundleContext context) throws Exception {
1: 		safeUnregister(reg);
1: 		safeUnregister(factoryReg);
1: 		if(msf != null) {
1: 			try {
1: 				msf.stop();
1: 			} catch (Exception e) {
1: 				LOG.error("There was an error closing the Configuration Defined Resource Manager", e);
1: 			}
1: 		}
1: 		if(service != null) {
1: 			try {
1: 				service.close();
1: 			} catch (Exception e) {
1: 				LOG.error("There was an error closing the ResourceProviderFactory", e);
1: 			}
1: 		}
1: 	}
1: 
1: 	private void safeUnregister(ServiceRegistration<?> reg) {
1: 		if(reg != null) {
1: 			try {
1: 				reg.unregister();
1: 			} catch (IllegalStateException ise) {
1: 				// Ignore this
1: 			}
1: 		}
1: 	}
1: 
1: 	protected Dictionary<String, ?> getMSFProperties() {
1: 		Dictionary<String, Object> props = new Hashtable<>();
1: 		props.put(SERVICE_PID, getMSFPid());
1: 		return props;
1: 	}
1: 
1: 	protected ResourceProviderFactoryServiceFactory<R, F> getServiceFactory(BundleContext context) {
1: 		return null;
1: 	}
1: 
1: 	protected Class<? super F> getAdvertisedInterface() {
1: 		throw new UnsupportedOperationException("Resource factories are not supported");
1: 	}
1: 	
1: 	protected Dictionary<String, Object> getServiceProperties() {
1: 		throw new UnsupportedOperationException("Resource factories are not supported");
1: 	}
1: 
1: 	protected ConfigurationDefinedResourceFactory getConfigurationDefinedResourceFactory(
1: 			BundleContext context) {
1: 		return null;
1: 	}
1: 	
1: 	protected String getMSFPid() {
1: 		throw new UnsupportedOperationException("Configuration defined resources are not supported");
1: 	}
1: }
============================================================================