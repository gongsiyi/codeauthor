1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:4c0430e: package org.apache.aries.tx.control.jpa.xa.hibernate.impl;
1:4c0430e: 
1:4c0430e: import static javax.transaction.Status.STATUS_COMMITTED;
1:4c0430e: import static javax.transaction.Status.STATUS_ROLLEDBACK;
1:4c0430e: import static javax.transaction.Status.STATUS_UNKNOWN;
1:4c0430e: import static org.hibernate.ConnectionAcquisitionMode.AS_NEEDED;
1:4c0430e: import static org.hibernate.ConnectionReleaseMode.AFTER_STATEMENT;
1:4c0430e: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1:4c0430e: 
1:4c0430e: import java.sql.Connection;
1:4c0430e: import java.util.ArrayList;
1:4c0430e: import java.util.List;
1:4c0430e: import java.util.concurrent.Callable;
1:4c0430e: 
1:4c0430e: import javax.persistence.TransactionRequiredException;
1:4c0430e: import javax.transaction.Synchronization;
1:4c0430e: 
1:4c0430e: import org.hibernate.ConnectionAcquisitionMode;
1:4c0430e: import org.hibernate.ConnectionReleaseMode;
1:4c0430e: import org.hibernate.HibernateException;
1:74e23ff: import org.hibernate.TransactionException;
1:4c0430e: import org.hibernate.engine.transaction.spi.IsolationDelegate;
1:4c0430e: import org.hibernate.engine.transaction.spi.TransactionObserver;
1:4c0430e: import org.hibernate.jdbc.WorkExecutor;
1:4c0430e: import org.hibernate.jdbc.WorkExecutorVisitable;
1:4c0430e: import org.hibernate.resource.jdbc.spi.JdbcSessionOwner;
1:4c0430e: import org.hibernate.resource.transaction.SynchronizationRegistry;
1:4c0430e: import org.hibernate.resource.transaction.TransactionCoordinator;
1:4c0430e: import org.hibernate.resource.transaction.TransactionCoordinator.TransactionDriver;
1:4c0430e: import org.hibernate.resource.transaction.TransactionCoordinatorBuilder;
1:4c0430e: import org.hibernate.resource.transaction.spi.TransactionCoordinatorOwner;
1:4c0430e: import org.osgi.service.transaction.control.TransactionContext;
1:4c0430e: import org.osgi.service.transaction.control.TransactionControl;
1:4c0430e: import org.osgi.service.transaction.control.TransactionStatus;
1:4c0430e: 
1:74e23ff: public class HibernateTxControlPlatform implements 
1:74e23ff: 	TransactionCoordinatorBuilder {
1:4c0430e: 	
1:4c0430e: 	private static final long serialVersionUID = 1L;
1:4c0430e: 
1:74e23ff: 	private final ThreadLocal<TransactionControl> txControlToUse;
1:4c0430e: 	
1:74e23ff: 	public HibernateTxControlPlatform(ThreadLocal<TransactionControl> txControlToUse) {
1:74e23ff: 		this.txControlToUse = txControlToUse;
1:74e23ff: 	}
1:4c0430e: 	
1:74e23ff: 	public TransactionControl getTxControl() {
1:74e23ff: 		TransactionControl transactionControl = txControlToUse.get();
1:74e23ff: 		if(transactionControl == null) {
1:74e23ff: 			throw new TransactionException("A No Transaction Context could not be created because there is no associated Transaction Control");
1:74e23ff: 		}
1:74e23ff: 		return transactionControl;
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:4c0430e: 	public TransactionCoordinator buildTransactionCoordinator(TransactionCoordinatorOwner owner, TransactionCoordinatorOptions options) {
1:4c0430e: 		return new HibernateTxControlCoordinator(owner, options.shouldAutoJoinTransaction());
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:4c0430e: 	public boolean isJta() {
1:4c0430e: 		return true;
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:4c0430e: 	public ConnectionReleaseMode getDefaultConnectionReleaseMode() {
1:4c0430e: 		return AFTER_STATEMENT;
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:4c0430e: 	public ConnectionAcquisitionMode getDefaultConnectionAcquisitionMode() {
1:4c0430e: 		return AS_NEEDED;
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	public class HibernateTxControlCoordinator implements TransactionCoordinator, 
1:4c0430e: 		SynchronizationRegistry, TransactionDriver, IsolationDelegate {
1:4c0430e: 		
1:4c0430e: 		private static final long serialVersionUID = 1L;
1:4c0430e: 
1:4c0430e: 		private final List<TransactionObserver> registeredObservers = new ArrayList<>();
1:4c0430e: 
1:4c0430e: 		private final TransactionCoordinatorOwner owner;
1:4c0430e: 
1:4c0430e: 		private final boolean autoJoin;
1:4c0430e: 		
1:4c0430e: 		private boolean joined = false;
1:4c0430e: 		
1:4c0430e: 		public HibernateTxControlCoordinator(TransactionCoordinatorOwner owner, boolean autoJoin) {
1:4c0430e: 			this.owner = owner;
1:4c0430e: 			this.autoJoin = autoJoin;
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void explicitJoin() {
1:4c0430e: 			if(!joined) {
1:74e23ff: 				if(!getTxControl().activeTransaction()) {
1:4c0430e: 					throw new TransactionRequiredException("There is no transaction active to join");
1:4c0430e: 				}
1:4c0430e: 				
1:4c0430e: 				internalJoin();
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		private void internalJoin() {
1:74e23ff: 			TransactionContext currentContext = getTxControl().getCurrentContext();
1:4c0430e: 			currentContext.preCompletion(this::beforeCompletion);
1:4c0430e: 			currentContext.postCompletion(this::afterCompletion);
1:4c0430e: 			joined = true;
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public boolean isJoined() {
1:4c0430e: 			return joined;
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void pulse() {
1:74e23ff: 			if (autoJoin && !joined && getTxControl().activeTransaction()) {
1:4c0430e: 				internalJoin();
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public TransactionDriver getTransactionDriverControl() {
1:4c0430e: 			return this;
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public SynchronizationRegistry getLocalSynchronizations() {
1:4c0430e: 			return this;
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public boolean isActive() {
1:74e23ff: 			return getTxControl().activeTransaction();
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public IsolationDelegate createIsolationDelegate() {
1:4c0430e: 			return this;
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void addObserver(TransactionObserver observer) {
1:4c0430e: 			registeredObservers.add(observer);
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void removeObserver(TransactionObserver observer) {
1:4c0430e: 			registeredObservers.remove(observer);
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public TransactionCoordinatorBuilder getTransactionCoordinatorBuilder() {
1:4c0430e: 			return HibernateTxControlPlatform.this;
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void setTimeOut(int seconds) {
1:4c0430e: 			// TODO How do we support this?
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public int getTimeOut() {
1:4c0430e: 			return -1;
1:4c0430e: 		}
1:4c0430e: 	
1:4c0430e: 		@Override
1:4c0430e: 		public void registerSynchronization(Synchronization synchronization) {
1:74e23ff: 			TransactionContext currentContext = getTxControl().getCurrentContext();
1:4c0430e: 			currentContext.preCompletion(synchronization::beforeCompletion);
1:4c0430e: 			currentContext.postCompletion(status -> synchronization.afterCompletion(toIntStatus(status)));
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		private void beforeCompletion() {
1:4c0430e: 			try {
1:4c0430e: 				owner.beforeTransactionCompletion();
1:4c0430e: 			}
1:4c0430e: 			catch (RuntimeException re) {
1:74e23ff: 				getTxControl().setRollbackOnly();
1:4c0430e: 				throw re;
1:4c0430e: 			}
1:4c0430e: 			finally {
1:4c0430e: 				registeredObservers.forEach(TransactionObserver::beforeCompletion);
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 		
1:4c0430e: 		private void afterCompletion(TransactionStatus status) {
1:4c0430e: 			if ( owner.isActive() ) {
1:4c0430e: 				toIntStatus(status);
1:4c0430e: 				
1:4c0430e: 				boolean committed = status == COMMITTED;
1:4c0430e: 				owner.afterTransactionCompletion(committed, false);
1:4c0430e: 				
1:4c0430e: 				registeredObservers.forEach(o -> o.afterCompletion(committed, false));
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		private int toIntStatus(TransactionStatus status) {
1:4c0430e: 			switch(status) {
1:4c0430e: 				case COMMITTED:
1:4c0430e: 					return STATUS_COMMITTED;
1:4c0430e: 				case ROLLED_BACK:
1:4c0430e: 					return STATUS_ROLLEDBACK;
1:4c0430e: 				default:
1:4c0430e: 					return STATUS_UNKNOWN;
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void begin() {
1:74e23ff: 			if(!getTxControl().activeTransaction()) {
1:4c0430e: 				throw new IllegalStateException("There is no existing active transaction scope");
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void commit() {
1:74e23ff: 			if(!getTxControl().activeTransaction()) {
1:4c0430e: 				throw new IllegalStateException("There is no existing active transaction scope");
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void rollback() {
1:74e23ff: 			if(!getTxControl().activeTransaction()) {
1:4c0430e: 				throw new IllegalStateException("There is no existing active transaction scope");
1:4c0430e: 			}
1:74e23ff: 			getTxControl().setRollbackOnly();
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public org.hibernate.resource.transaction.spi.TransactionStatus getStatus() {
1:74e23ff: 			TransactionStatus status = getTxControl().getCurrentContext().getTransactionStatus();
1:4c0430e: 			switch(status) {
1:4c0430e: 				case ACTIVE:
1:4c0430e: 					return org.hibernate.resource.transaction.spi.TransactionStatus.ACTIVE;
1:4c0430e: 				case COMMITTED:
1:4c0430e: 					return org.hibernate.resource.transaction.spi.TransactionStatus.COMMITTED;
1:4c0430e: 				case PREPARING:
1:4c0430e: 				case PREPARED:
1:4c0430e: 				case COMMITTING:
1:4c0430e: 					return org.hibernate.resource.transaction.spi.TransactionStatus.COMMITTING;
1:4c0430e: 				case MARKED_ROLLBACK:
1:4c0430e: 					return org.hibernate.resource.transaction.spi.TransactionStatus.MARKED_ROLLBACK;
1:4c0430e: 				case NO_TRANSACTION:
1:4c0430e: 					return org.hibernate.resource.transaction.spi.TransactionStatus.NOT_ACTIVE;
1:4c0430e: 				case ROLLED_BACK:
1:4c0430e: 					return org.hibernate.resource.transaction.spi.TransactionStatus.ROLLED_BACK;
1:4c0430e: 				case ROLLING_BACK:
1:4c0430e: 					return org.hibernate.resource.transaction.spi.TransactionStatus.ROLLING_BACK;
1:4c0430e: 				default:
1:4c0430e: 					throw new IllegalStateException("The state " + status + " is unknown");
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public void markRollbackOnly() {
1:74e23ff: 			getTxControl().setRollbackOnly();
1:4c0430e: 		}
1:4c0430e: 
1:4c0430e: 		@Override
1:4c0430e: 		public <T> T delegateWork(WorkExecutorVisitable<T> work, boolean transacted) throws HibernateException {
1:4c0430e: 			Callable<T> c = () -> {
1:4c0430e: 			
1:4c0430e: 				JdbcSessionOwner sessionOwner = owner.getJdbcSessionOwner();
1:4c0430e: 				Connection conn = sessionOwner.getJdbcConnectionAccess().obtainConnection();
1:4c0430e: 				
1:4c0430e: 				try {
1:4c0430e: 					return work.accept(new WorkExecutor<>(), conn);
1:4c0430e: 				} finally {
1:4c0430e: 					sessionOwner.getJdbcConnectionAccess().releaseConnection(conn);
1:4c0430e: 				}
1:4c0430e: 			};
1:4c0430e: 			
1:4c0430e: 			if(transacted) {
1:74e23ff: 				return getTxControl().requiresNew(c);
1:4c0430e: 			} else {
1:74e23ff: 				return getTxControl().notSupported(c);
1:4c0430e: 			}
1:4c0430e: 				
1:4c0430e: 		}
1:4c0430e: 	}
1:4c0430e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:74e23ff
/////////////////////////////////////////////////////////////////////////
1: import org.hibernate.TransactionException;
/////////////////////////////////////////////////////////////////////////
1: public class HibernateTxControlPlatform implements 
1: 	TransactionCoordinatorBuilder {
1: 	private final ThreadLocal<TransactionControl> txControlToUse;
1: 	public HibernateTxControlPlatform(ThreadLocal<TransactionControl> txControlToUse) {
1: 		this.txControlToUse = txControlToUse;
1: 	}
1: 	public TransactionControl getTxControl() {
1: 		TransactionControl transactionControl = txControlToUse.get();
1: 		if(transactionControl == null) {
1: 			throw new TransactionException("A No Transaction Context could not be created because there is no associated Transaction Control");
1: 		}
1: 		return transactionControl;
/////////////////////////////////////////////////////////////////////////
1: 				if(!getTxControl().activeTransaction()) {
/////////////////////////////////////////////////////////////////////////
1: 			TransactionContext currentContext = getTxControl().getCurrentContext();
/////////////////////////////////////////////////////////////////////////
1: 			if (autoJoin && !joined && getTxControl().activeTransaction()) {
/////////////////////////////////////////////////////////////////////////
1: 			return getTxControl().activeTransaction();
/////////////////////////////////////////////////////////////////////////
1: 			TransactionContext currentContext = getTxControl().getCurrentContext();
/////////////////////////////////////////////////////////////////////////
1: 				getTxControl().setRollbackOnly();
/////////////////////////////////////////////////////////////////////////
1: 			if(!getTxControl().activeTransaction()) {
1: 			if(!getTxControl().activeTransaction()) {
1: 			if(!getTxControl().activeTransaction()) {
1: 			getTxControl().setRollbackOnly();
1: 			TransactionStatus status = getTxControl().getCurrentContext().getTransactionStatus();
/////////////////////////////////////////////////////////////////////////
1: 			getTxControl().setRollbackOnly();
/////////////////////////////////////////////////////////////////////////
1: 				return getTxControl().requiresNew(c);
1: 				return getTxControl().notSupported(c);
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.xa.hibernate.impl;
1: 
1: import static javax.transaction.Status.STATUS_COMMITTED;
1: import static javax.transaction.Status.STATUS_ROLLEDBACK;
1: import static javax.transaction.Status.STATUS_UNKNOWN;
1: import static org.hibernate.ConnectionAcquisitionMode.AS_NEEDED;
1: import static org.hibernate.ConnectionReleaseMode.AFTER_STATEMENT;
1: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1: 
1: import java.sql.Connection;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: 
1: import javax.persistence.TransactionRequiredException;
1: import javax.transaction.Synchronization;
1: 
1: import org.hibernate.ConnectionAcquisitionMode;
1: import org.hibernate.ConnectionReleaseMode;
1: import org.hibernate.HibernateException;
1: import org.hibernate.engine.transaction.spi.IsolationDelegate;
1: import org.hibernate.engine.transaction.spi.TransactionObserver;
1: import org.hibernate.jdbc.WorkExecutor;
1: import org.hibernate.jdbc.WorkExecutorVisitable;
1: import org.hibernate.resource.jdbc.spi.JdbcSessionOwner;
1: import org.hibernate.resource.transaction.SynchronizationRegistry;
1: import org.hibernate.resource.transaction.TransactionCoordinator;
1: import org.hibernate.resource.transaction.TransactionCoordinator.TransactionDriver;
1: import org.hibernate.resource.transaction.TransactionCoordinatorBuilder;
1: import org.hibernate.resource.transaction.spi.TransactionCoordinatorOwner;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionStatus;
1: 
0: public class HibernateTxControlPlatform implements TransactionCoordinatorBuilder {
1: 	
1: 	private static final long serialVersionUID = 1L;
1: 
0: 	private final TransactionControl control;
1: 	
1: 	
0: 	public HibernateTxControlPlatform(TransactionControl control) {
0: 		this.control = control;
1: 	}
1: 
1: 	@Override
1: 	public TransactionCoordinator buildTransactionCoordinator(TransactionCoordinatorOwner owner, TransactionCoordinatorOptions options) {
1: 		return new HibernateTxControlCoordinator(owner, options.shouldAutoJoinTransaction());
1: 	}
1: 
1: 	@Override
1: 	public boolean isJta() {
1: 		return true;
1: 	}
1: 
1: 	@Override
1: 	public ConnectionReleaseMode getDefaultConnectionReleaseMode() {
1: 		return AFTER_STATEMENT;
1: 	}
1: 
1: 	@Override
1: 	public ConnectionAcquisitionMode getDefaultConnectionAcquisitionMode() {
1: 		return AS_NEEDED;
1: 	}
1: 
1: 	public class HibernateTxControlCoordinator implements TransactionCoordinator, 
1: 		SynchronizationRegistry, TransactionDriver, IsolationDelegate {
1: 		
1: 		private static final long serialVersionUID = 1L;
1: 
1: 		private final List<TransactionObserver> registeredObservers = new ArrayList<>();
1: 
1: 		private final TransactionCoordinatorOwner owner;
1: 
1: 		private final boolean autoJoin;
1: 		
1: 		private boolean joined = false;
1: 		
1: 		public HibernateTxControlCoordinator(TransactionCoordinatorOwner owner, boolean autoJoin) {
1: 			this.owner = owner;
1: 			this.autoJoin = autoJoin;
1: 		}
1: 
1: 		@Override
1: 		public void explicitJoin() {
1: 			if(!joined) {
0: 				if(!control.activeTransaction()) {
1: 					throw new TransactionRequiredException("There is no transaction active to join");
1: 				}
1: 				
1: 				internalJoin();
1: 			}
1: 		}
1: 
1: 		private void internalJoin() {
0: 			TransactionContext currentContext = control.getCurrentContext();
1: 			currentContext.preCompletion(this::beforeCompletion);
1: 			currentContext.postCompletion(this::afterCompletion);
1: 			joined = true;
1: 		}
1: 
1: 		@Override
1: 		public boolean isJoined() {
1: 			return joined;
1: 		}
1: 
1: 		@Override
1: 		public void pulse() {
0: 			if (autoJoin && !joined && control.activeTransaction()) {
1: 				internalJoin();
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public TransactionDriver getTransactionDriverControl() {
1: 			return this;
1: 		}
1: 
1: 		@Override
1: 		public SynchronizationRegistry getLocalSynchronizations() {
1: 			return this;
1: 		}
1: 
1: 		@Override
1: 		public boolean isActive() {
0: 			return control.activeTransaction();
1: 		}
1: 
1: 		@Override
1: 		public IsolationDelegate createIsolationDelegate() {
1: 			return this;
1: 		}
1: 
1: 		@Override
1: 		public void addObserver(TransactionObserver observer) {
1: 			registeredObservers.add(observer);
1: 		}
1: 
1: 		@Override
1: 		public void removeObserver(TransactionObserver observer) {
1: 			registeredObservers.remove(observer);
1: 		}
1: 
1: 		@Override
1: 		public TransactionCoordinatorBuilder getTransactionCoordinatorBuilder() {
1: 			return HibernateTxControlPlatform.this;
1: 		}
1: 
1: 		@Override
1: 		public void setTimeOut(int seconds) {
1: 			// TODO How do we support this?
1: 		}
1: 
1: 		@Override
1: 		public int getTimeOut() {
1: 			return -1;
1: 		}
1: 	
1: 		@Override
1: 		public void registerSynchronization(Synchronization synchronization) {
0: 			TransactionContext currentContext = control.getCurrentContext();
1: 			currentContext.preCompletion(synchronization::beforeCompletion);
1: 			currentContext.postCompletion(status -> synchronization.afterCompletion(toIntStatus(status)));
1: 		}
1: 
1: 		private void beforeCompletion() {
1: 			try {
1: 				owner.beforeTransactionCompletion();
1: 			}
1: 			catch (RuntimeException re) {
0: 				control.setRollbackOnly();
1: 				throw re;
1: 			}
1: 			finally {
1: 				registeredObservers.forEach(TransactionObserver::beforeCompletion);
1: 			}
1: 		}
1: 		
1: 		private void afterCompletion(TransactionStatus status) {
1: 			if ( owner.isActive() ) {
1: 				toIntStatus(status);
1: 				
1: 				boolean committed = status == COMMITTED;
1: 				owner.afterTransactionCompletion(committed, false);
1: 				
1: 				registeredObservers.forEach(o -> o.afterCompletion(committed, false));
1: 			}
1: 		}
1: 
1: 		private int toIntStatus(TransactionStatus status) {
1: 			switch(status) {
1: 				case COMMITTED:
1: 					return STATUS_COMMITTED;
1: 				case ROLLED_BACK:
1: 					return STATUS_ROLLEDBACK;
1: 				default:
1: 					return STATUS_UNKNOWN;
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public void begin() {
0: 			if(!control.activeTransaction()) {
1: 				throw new IllegalStateException("There is no existing active transaction scope");
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public void commit() {
0: 			if(!control.activeTransaction()) {
1: 				throw new IllegalStateException("There is no existing active transaction scope");
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public void rollback() {
0: 			if(!control.activeTransaction()) {
1: 				throw new IllegalStateException("There is no existing active transaction scope");
1: 			}
0: 			control.setRollbackOnly();
1: 		}
1: 
1: 		@Override
1: 		public org.hibernate.resource.transaction.spi.TransactionStatus getStatus() {
0: 			TransactionStatus status = control.getCurrentContext().getTransactionStatus();
1: 			switch(status) {
1: 				case ACTIVE:
1: 					return org.hibernate.resource.transaction.spi.TransactionStatus.ACTIVE;
1: 				case COMMITTED:
1: 					return org.hibernate.resource.transaction.spi.TransactionStatus.COMMITTED;
1: 				case PREPARING:
1: 				case PREPARED:
1: 				case COMMITTING:
1: 					return org.hibernate.resource.transaction.spi.TransactionStatus.COMMITTING;
1: 				case MARKED_ROLLBACK:
1: 					return org.hibernate.resource.transaction.spi.TransactionStatus.MARKED_ROLLBACK;
1: 				case NO_TRANSACTION:
1: 					return org.hibernate.resource.transaction.spi.TransactionStatus.NOT_ACTIVE;
1: 				case ROLLED_BACK:
1: 					return org.hibernate.resource.transaction.spi.TransactionStatus.ROLLED_BACK;
1: 				case ROLLING_BACK:
1: 					return org.hibernate.resource.transaction.spi.TransactionStatus.ROLLING_BACK;
1: 				default:
1: 					throw new IllegalStateException("The state " + status + " is unknown");
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public void markRollbackOnly() {
0: 			control.setRollbackOnly();
1: 		}
1: 
1: 		@Override
1: 		public <T> T delegateWork(WorkExecutorVisitable<T> work, boolean transacted) throws HibernateException {
1: 			Callable<T> c = () -> {
1: 			
1: 				JdbcSessionOwner sessionOwner = owner.getJdbcSessionOwner();
1: 				Connection conn = sessionOwner.getJdbcConnectionAccess().obtainConnection();
1: 				
1: 				try {
1: 					return work.accept(new WorkExecutor<>(), conn);
1: 				} finally {
1: 					sessionOwner.getJdbcConnectionAccess().releaseConnection(conn);
1: 				}
1: 			};
1: 			
1: 			if(transacted) {
0: 				return control.requiresNew(c);
1: 			} else {
0: 				return control.notSupported(c);
1: 			}
1: 				
1: 		}
1: 	}
1: }
============================================================================