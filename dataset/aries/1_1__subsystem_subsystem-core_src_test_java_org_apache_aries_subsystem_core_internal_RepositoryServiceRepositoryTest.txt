1:c79daa6: /*
1:c79daa6:  * Licensed under the Apache License, Version 2.0 (the "License");
1:c79daa6:  * you may not use this file except in compliance with the License.
1:c79daa6:  * You may obtain a copy of the License at
1:c79daa6:  *
1:c79daa6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c79daa6:  *
1:c79daa6:  * Unless required by applicable law or agreed to in writing, software
1:c79daa6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c79daa6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c79daa6:  * See the License for the specific language governing permissions and
1:c79daa6:  * limitations under the License.
1:c79daa6:  */
1:c79daa6: package org.apache.aries.subsystem.core.internal;
7:c79daa6: 
1:c79daa6: import static org.junit.Assert.assertEquals;
1:c79daa6: 
1:c79daa6: import java.util.Collection;
1:c79daa6: import java.util.Collections;
1:c79daa6: import java.util.HashMap;
1:c79daa6: import java.util.Map;
1:c79daa6: 
1:e9bec29: import org.apache.aries.subsystem.core.internal.sub.Creator;
1:c79daa6: import org.easymock.EasyMock;
1:c79daa6: import org.junit.Test;
1:c79daa6: import org.osgi.framework.BundleContext;
1:c79daa6: import org.osgi.framework.ServiceReference;
1:c79daa6: import org.osgi.resource.Capability;
1:c79daa6: import org.osgi.resource.Requirement;
1:c79daa6: import org.osgi.resource.Resource;
1:c79daa6: import org.osgi.service.repository.Repository;
1:c79daa6: 
1:c79daa6: public class RepositoryServiceRepositoryTest {
1:c79daa6:     @Test
1:c79daa6:     public void testFindProviders() throws Exception {
1:c79daa6:         BundleContext bc = EasyMock.createNiceMock(BundleContext.class);
1:c79daa6:         RepositoryServiceRepository rsr = new RepositoryServiceRepository(bc);
1:c79daa6: 
1:c79daa6:         @SuppressWarnings("unchecked")
1:c79daa6:         ServiceReference<Object> sr = EasyMock.createMock(ServiceReference.class);
1:c79daa6:         @SuppressWarnings("unchecked")
1:c79daa6:         ServiceReference<Object> sr2 = EasyMock.createMock(ServiceReference.class);
1:e9bec29:         @SuppressWarnings("unchecked")
1:e9bec29:         ServiceReference<Object> sr3 = EasyMock.createMock(ServiceReference.class);
1:e9bec29: 
1:c79daa6:         EasyMock.expect(bc.getAllServiceReferences("org.osgi.service.repository.Repository", null)).
1:e9bec29:             andReturn(new ServiceReference[] {sr, sr2, sr3}).anyTimes();
1:c79daa6: 
1:c79daa6:         TestRepository tr = new TestRepository();
1:c79daa6:         EasyMock.expect(bc.getService(sr)).andReturn(tr).anyTimes();
1:c79daa6: 
1:c79daa6:         ToastRepository tr2 = new ToastRepository();
1:c79daa6:         EasyMock.expect(bc.getService(sr2)).andReturn(tr2).anyTimes();
1:c79daa6: 
1:e9bec29:         Repository tr3 = Creator.create();
1:e9bec29:         EasyMock.expect(bc.getService(sr3)).andReturn(tr3).anyTimes();
1:e9bec29:         EasyMock.replay(bc);
1:c79daa6: 
1:c79daa6:         Map<String, String> dirs = Collections.singletonMap("filter", "(org.foo=bar)");
1:c79daa6:         Requirement req = new TestRequirement("org.foo", dirs);
1:c79daa6:         Collection<Capability> res = rsr.findProviders(req);
1:c79daa6:         assertEquals(1, res.size());
1:c79daa6:         Capability cap = res.iterator().next();
1:c79daa6:         assertEquals("org.foo", cap.getNamespace());
1:c79daa6:         assertEquals(1, cap.getAttributes().size());
1:c79daa6:         assertEquals("bar", cap.getAttributes().get("org.foo"));
1:c79daa6: 
1:c79daa6:         Map<String, String> dirs2 = Collections.singletonMap("filter", "(org.foo=b)");
1:c79daa6:         Requirement req2 = new TestRequirement("poing", dirs2);
1:c79daa6:         Collection<Capability> res2 = rsr.findProviders(req2);
1:c79daa6:         assertEquals(1, res2.size());
1:c79daa6:         Capability cap2 = res2.iterator().next();
1:c79daa6:         assertEquals("poing", cap2.getNamespace());
1:c79daa6:         assertEquals(1, cap2.getAttributes().size());
1:c79daa6:         assertEquals("b", cap2.getAttributes().get("org.foo"));
1:e9bec29: 
1:e9bec29:         Map<String, String> dirs3 = Collections.singletonMap("filter", "(x=y)");
1:e9bec29:         Requirement req3 = new TestRequirement("ns1", dirs3);
1:e9bec29:         Collection<Capability> res3 = rsr.findProviders(req3);
1:e9bec29:         assertEquals(1, res3.size());
1:e9bec29:         Capability cap3 = res3.iterator().next();
1:e9bec29:         assertEquals("ns1", cap3.getNamespace());
1:e9bec29:         assertEquals(1, cap3.getAttributes().size());
1:e9bec29:         assertEquals("y", cap3.getAttributes().get("x"));
7:c79daa6:     }
1:c79daa6: 
1:c79daa6:     private static class TestRequirement implements Requirement {
2:c79daa6:         private final String namespace;
1:c79daa6:         private final Map<String, String> directives;
1:c79daa6: 
1:c79daa6:         private TestRequirement(String ns, Map<String, String> dirs) {
2:c79daa6:             namespace = ns;
1:c79daa6:             directives = dirs;
1:c79daa6:         }
1:c79daa6: 
5:c79daa6:         @Override
2:c79daa6:         public String getNamespace() {
2:c79daa6:             return namespace;
1:c79daa6:         }
1:c79daa6: 
1:c79daa6:         @Override
2:c79daa6:         public Map<String, Object> getAttributes() {
2:c79daa6:             return Collections.emptyMap();
1:c79daa6:         }
1:c79daa6: 
1:c79daa6:         @Override
2:c79daa6:         public Map<String, String> getDirectives() {
1:c79daa6:             return directives;
1:c79daa6:         }
1:c79daa6: 
1:c79daa6:         @Override
2:c79daa6:         public Resource getResource() {
2:c79daa6:             return null;
1:c79daa6:         }
1:c79daa6:     }
1:c79daa6: 
1:c79daa6:     private static class TestRepository implements Repository {
1:c79daa6:         @Override
1:c79daa6:         public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:c79daa6:             Map<Requirement, Collection<Capability>> res = new HashMap<Requirement, Collection<Capability>>();
1:c79daa6: 
1:c79daa6:             for (Requirement req : requirements) {
1:c79daa6:                 if (req.getNamespace().equals("org.foo") &&
1:c79daa6:                         req.getDirectives().equals(Collections.singletonMap("filter", "(org.foo=bar)"))) {
1:c79daa6:                     TestCapability cap = new TestCapability("org.foo",
1:c79daa6:                             Collections.<String, Object>singletonMap("org.foo", "bar"));
1:c79daa6:                     Collection<Capability> caps = Collections.<Capability>singleton(cap);
1:c79daa6:                     res.put(req, caps);
1:c79daa6:                 }
1:c79daa6:             }
1:c79daa6: 
1:c79daa6:             return res;
1:c79daa6:         }
1:c79daa6:     }
1:c79daa6: 
1:c79daa6:     private static class ToastRepository extends TestRepository {
1:c79daa6:         @Override
1:c79daa6:         public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:c79daa6:             for (Requirement req : requirements) {
1:c79daa6:                 if (req.getNamespace().equals("poing") &&
1:c79daa6:                         req.getDirectives().equals(Collections.singletonMap("filter", "(org.foo=b)"))) {
1:c79daa6:                     TestCapability cap = new TestCapability("poing",
1:c79daa6:                             Collections.<String, Object>singletonMap("org.foo", "b"));
1:c79daa6:                     Collection<Capability> caps = Collections.<Capability>singleton(cap);
1:c79daa6:                     return Collections.singletonMap(req, caps);
1:c79daa6:                 }
1:c79daa6:             }
1:c79daa6:             return Collections.emptyMap();
1:c79daa6:         }
1:c79daa6:     }
1:c79daa6: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:e9bec29
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.sub.Creator;
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("unchecked")
1:         ServiceReference<Object> sr3 = EasyMock.createMock(ServiceReference.class);
1: 
1:             andReturn(new ServiceReference[] {sr, sr2, sr3}).anyTimes();
1:         Repository tr3 = Creator.create();
1:         EasyMock.expect(bc.getService(sr3)).andReturn(tr3).anyTimes();
1:         EasyMock.replay(bc);
/////////////////////////////////////////////////////////////////////////
1: 
1:         Map<String, String> dirs3 = Collections.singletonMap("filter", "(x=y)");
1:         Requirement req3 = new TestRequirement("ns1", dirs3);
1:         Collection<Capability> res3 = rsr.findProviders(req3);
1:         assertEquals(1, res3.size());
1:         Capability cap3 = res3.iterator().next();
1:         assertEquals("ns1", cap3.getNamespace());
1:         assertEquals(1, cap3.getAttributes().size());
1:         assertEquals("y", cap3.getAttributes().get("x"));
/////////////////////////////////////////////////////////////////////////
commit:c79daa6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.easymock.EasyMock;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: 
1: public class RepositoryServiceRepositoryTest {
1:     @Test
1:     public void testFindProviders() throws Exception {
1:         BundleContext bc = EasyMock.createNiceMock(BundleContext.class);
1:         RepositoryServiceRepository rsr = new RepositoryServiceRepository(bc);
1: 
1:         @SuppressWarnings("unchecked")
1:         ServiceReference<Object> sr = EasyMock.createMock(ServiceReference.class);
1:         @SuppressWarnings("unchecked")
1:         ServiceReference<Object> sr2 = EasyMock.createMock(ServiceReference.class);
1:         EasyMock.expect(bc.getAllServiceReferences("org.osgi.service.repository.Repository", null)).
0:             andReturn(new ServiceReference[] {sr, sr2}).anyTimes();
1: 
1:         TestRepository tr = new TestRepository();
1:         EasyMock.expect(bc.getService(sr)).andReturn(tr).anyTimes();
1: 
1:         ToastRepository tr2 = new ToastRepository();
1:         EasyMock.expect(bc.getService(sr2)).andReturn(tr2).anyTimes();
0:         EasyMock.replay(bc);
1: 
1: 
1:         Map<String, String> dirs = Collections.singletonMap("filter", "(org.foo=bar)");
1:         Requirement req = new TestRequirement("org.foo", dirs);
1:         Collection<Capability> res = rsr.findProviders(req);
1:         assertEquals(1, res.size());
1:         Capability cap = res.iterator().next();
1:         assertEquals("org.foo", cap.getNamespace());
1:         assertEquals(1, cap.getAttributes().size());
1:         assertEquals("bar", cap.getAttributes().get("org.foo"));
1: 
1:         Map<String, String> dirs2 = Collections.singletonMap("filter", "(org.foo=b)");
1:         Requirement req2 = new TestRequirement("poing", dirs2);
1:         Collection<Capability> res2 = rsr.findProviders(req2);
1:         assertEquals(1, res2.size());
1:         Capability cap2 = res2.iterator().next();
1:         assertEquals("poing", cap2.getNamespace());
1:         assertEquals(1, cap2.getAttributes().size());
1:         assertEquals("b", cap2.getAttributes().get("org.foo"));
1:     }
1: 
1:     private static class TestRequirement implements Requirement {
1:         private final String namespace;
1:         private final Map<String, String> directives;
1: 
1:         private TestRequirement(String ns, Map<String, String> dirs) {
1:             namespace = ns;
1:             directives = dirs;
1:         }
1: 
1:         @Override
1:         public String getNamespace() {
1:             return namespace;
1:         }
1: 
1:         @Override
1:         public Map<String, Object> getAttributes() {
1:             return Collections.emptyMap();
1:         }
1: 
1:         @Override
1:         public Map<String, String> getDirectives() {
1:             return directives;
1:         }
1: 
1:         @Override
1:         public Resource getResource() {
1:             return null;
1:         }
1:     }
1: 
0:     private static class TestCapability implements Capability {
1:         private final String namespace;
0:         private final Map<String, Object> attributes;
1: 
0:         private TestCapability(String ns, Map<String, Object> attrs) {
1:             namespace = ns;
0:             attributes = attrs;
1:         }
1: 
1:         @Override
1:         public String getNamespace() {
1:             return namespace;
1:         }
1: 
1:         @Override
1:         public Map<String, String> getDirectives() {
1:             return Collections.emptyMap();
1:         }
1: 
1:         @Override
1:         public Map<String, Object> getAttributes() {
0:             return attributes;
1:         }
1: 
1:         @Override
1:         public Resource getResource() {
1:             return null;
1:         }
1:     }
1: 
1:     private static class TestRepository implements Repository {
1:         @Override
1:         public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:             Map<Requirement, Collection<Capability>> res = new HashMap<Requirement, Collection<Capability>>();
1: 
1:             for (Requirement req : requirements) {
1:                 if (req.getNamespace().equals("org.foo") &&
1:                         req.getDirectives().equals(Collections.singletonMap("filter", "(org.foo=bar)"))) {
1:                     TestCapability cap = new TestCapability("org.foo",
1:                             Collections.<String, Object>singletonMap("org.foo", "bar"));
1:                     Collection<Capability> caps = Collections.<Capability>singleton(cap);
1:                     res.put(req, caps);
1:                 }
1:             }
1: 
1:             return res;
1:         }
1:     }
1: 
1:     private static class ToastRepository extends TestRepository {
1:         @Override
1:         public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:             for (Requirement req : requirements) {
1:                 if (req.getNamespace().equals("poing") &&
1:                         req.getDirectives().equals(Collections.singletonMap("filter", "(org.foo=b)"))) {
1:                     TestCapability cap = new TestCapability("poing",
1:                             Collections.<String, Object>singletonMap("org.foo", "b"));
1:                     Collection<Capability> caps = Collections.<Capability>singleton(cap);
1:                     return Collections.singletonMap(req, caps);
1:                 }
1:             }
1:             return Collections.emptyMap();
1:         }
1:     }
1: }
============================================================================