1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
3:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
5:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.io.InputStream;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.BatchActionResult;
1:fdf3952: import org.apache.aries.jmx.codec.BatchInstallResult;
1:8b67a25: import org.junit.Assert;
1:fdf3952: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.mockito.Mock;
1:fdf3952: import org.mockito.Mockito;
1:fdf3952: import org.mockito.MockitoAnnotations;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.BundleException;
1:fdf3952: import org.osgi.jmx.framework.FrameworkMBean;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: import org.osgi.service.startlevel.StartLevel;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * {@link FrameworkMBean} test case.
1:8b67a25:  *
1:8b67a25:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class FrameworkTest {
1:fdf3952: 
1:fdf3952:     @Mock
1:fdf3952:     private StartLevel startLevel;
1:fdf3952:     @Mock
1:fdf3952:     private PackageAdmin admin;
1:fdf3952:     @Mock
1:fdf3952:     private BundleContext context;
1:fdf3952:     private Framework mbean;
1:fdf3952: 
1:fdf3952:     @Before
1:fdf3952:     public void setUp() throws Exception {
1:fdf3952:         MockitoAnnotations.initMocks(this);
1:fdf3952:         mbean = new Framework(context, startLevel, admin);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testGetFrameworkStartLevel() throws IOException {
1:fdf3952:         Mockito.when(startLevel.getStartLevel()).thenReturn(1);
1:fdf3952:         int level = mbean.getFrameworkStartLevel();
1:fdf3952:         Assert.assertEquals(1, level);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testGetInitialBundleStartLevel() throws IOException {
1:fdf3952:         Mockito.when(startLevel.getInitialBundleStartLevel()).thenReturn(2);
1:fdf3952:         int level = mbean.getInitialBundleStartLevel();
1:fdf3952:         Mockito.verify(startLevel).getInitialBundleStartLevel();
1:fdf3952:         Assert.assertEquals(2, level);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testInstallBundle() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.installBundle("file:test.jar")).thenReturn(bundle);
1:fdf3952:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(2));
1:fdf3952:         long bundleId = mbean.installBundle("file:test.jar");
1:fdf3952:         Assert.assertEquals(2, bundleId);
1:fdf3952:         Mockito.reset(context);
1:fdf3952:         Mockito.when(context.installBundle("file:test2.jar")).thenThrow(new BundleException("location doesn't exist"));
1:fdf3952: 
1:fdf3952:         try {
1:fdf3952:             mbean.installBundle("file:test2.jar");
1:fdf3952:             Assert.fail("Shouldn't go to this stage, location doesn't exist");
1:fdf3952:         } catch (IOException e) {
1:fdf3952:             // ok
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testInstallBundleFromURL() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.installBundle(Mockito.anyString(), Mockito.any(InputStream.class))).thenReturn(bundle);
1:fdf3952:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(2));
1:fdf3952:         Framework spiedMBean = Mockito.spy(mbean);
1:fdf3952:         InputStream stream = Mockito.mock(InputStream.class);
1:fdf3952:         Mockito.doReturn(stream).when(spiedMBean).createStream("test.jar");
1:fdf3952:         long bundleId = spiedMBean.installBundleFromURL("file:test.jar", "test.jar");
1:fdf3952:         Assert.assertEquals(2, bundleId);
1:fdf3952:         Mockito.reset(context);
1:fdf3952:         Mockito.doReturn(stream).when(spiedMBean).createStream(Mockito.anyString());
1:fdf3952:         Mockito.when(context.installBundle(Mockito.anyString(), Mockito.any(InputStream.class))).thenThrow(
1:fdf3952:                 new BundleException("location doesn't exist"));
1:fdf3952: 
1:fdf3952:         try {
1:fdf3952:             spiedMBean.installBundleFromURL("file:test2.jar", "test.jar");
1:fdf3952:             Assert.fail("Shouldn't go to this stage, location doesn't exist");
1:fdf3952:         } catch (IOException e) {
1:fdf3952:             // ok
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testInstallBundles() throws Exception {
1:fdf3952:         String[] locations = new String[] { "file:test.jar" };
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.installBundle("file:test.jar")).thenReturn(bundle);
1:fdf3952:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(2));
1:fdf3952:         CompositeData data = mbean.installBundles(locations);
1:fdf3952:         BatchInstallResult batch = BatchInstallResult.from(data);
1:fdf3952:         Assert.assertNotNull(batch);
1:fdf3952:         Assert.assertEquals(2, batch.getCompleted()[0]);
1:fdf3952:         Assert.assertTrue(batch.isSuccess());
1:fdf3952:         Assert.assertNull(batch.getError());
1:fdf3952:         Assert.assertNull(batch.getRemainingLocationItems());
1:fdf3952:         Mockito.reset(context);
1:fdf3952:         Mockito.when(context.installBundle("file:test.jar")).thenThrow(new BundleException("location doesn't exist"));
1:fdf3952:         CompositeData data2 = mbean.installBundles(locations);
1:fdf3952:         BatchInstallResult batch2 = BatchInstallResult.from(data2);
1:fdf3952:         Assert.assertNotNull(batch2);
1:fdf3952:         Assert.assertNotNull(batch2.getCompleted());
1:fdf3952:         Assert.assertEquals(0, batch2.getCompleted().length);
1:fdf3952:         Assert.assertFalse(batch2.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertEquals("file:test.jar", batch2.getBundleInError());
1:fdf3952:         Assert.assertNotNull(batch2.getRemainingLocationItems());
1:8b67a25:         Assert.assertEquals(0, batch2.getRemainingLocationItems().length);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testInstallBundlesFromURL() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.installBundle(Mockito.anyString(), Mockito.any(InputStream.class))).thenReturn(bundle);
1:fdf3952:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(2));
1:fdf3952:         Framework spiedMBean = Mockito.spy(mbean);
1:fdf3952:         InputStream stream = Mockito.mock(InputStream.class);
1:fdf3952:         Mockito.doReturn(stream).when(spiedMBean).createStream(Mockito.anyString());
1:fdf3952:         CompositeData data = spiedMBean.installBundlesFromURL(new String[] { "file:test.jar" }, new String[] { "test.jar" });
1:fdf3952:         Assert.assertNotNull(data);
1:fdf3952:         BatchInstallResult batch = BatchInstallResult.from(data);
1:fdf3952:         Assert.assertEquals(2, batch.getCompleted()[0]);
1:fdf3952:         Assert.assertTrue(batch.isSuccess());
1:fdf3952:         Assert.assertNull(batch.getError());
1:fdf3952:         Assert.assertNull(batch.getRemainingLocationItems());
1:fdf3952:         Mockito.reset(context);
1:fdf3952:         Mockito.when(spiedMBean.createStream(Mockito.anyString())).thenReturn(stream);
1:fdf3952:         Mockito.when(context.installBundle(Mockito.anyString(), Mockito.any(InputStream.class))).thenThrow(
1:fdf3952:                 new BundleException("location doesn't exist"));
1:fdf3952:         CompositeData data2 = spiedMBean.installBundlesFromURL(new String[] { "file:test.jar" }, new String[] { "test.jar" });
1:fdf3952:         BatchInstallResult batch2 = BatchInstallResult.from(data2);
1:fdf3952:         Assert.assertNotNull(batch2);
1:fdf3952:         Assert.assertNotNull(batch2.getCompleted());
1:fdf3952:         Assert.assertEquals(0, batch2.getCompleted().length);
1:fdf3952:         Assert.assertFalse(batch2.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertEquals("file:test.jar", batch2.getBundleInError());
1:fdf3952:         Assert.assertNotNull(batch2.getRemainingLocationItems());
1:8b67a25:         Assert.assertEquals(0, batch2.getRemainingLocationItems().length);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testRefreshBundle() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(1)).thenReturn(bundle);
1:fdf3952: 
1:fdf3952:         mbean.refreshBundle(1);
1:fdf3952:         Mockito.verify(admin).refreshPackages((Bundle[]) Mockito.any());
1:fdf3952: 
1:fdf3952:         try {
1:fdf3952:             mbean.refreshBundle(2);
1:fdf3952:             Assert.fail("IOException should be thrown");
1:fdf3952:         } catch (IOException e) {
1:fdf3952:             // expected
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testRefreshBundles() throws IOException {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(1)).thenReturn(bundle);
1:fdf3952: 
1:fdf3952:         mbean.refreshBundles(new long[] { 1 });
1:fdf3952:         Mockito.verify(admin).refreshPackages((Bundle[]) Mockito.any());
1:fdf3952: 
1:fdf3952:         mbean.refreshBundles(null);
1:fdf3952:         Mockito.verify(admin).refreshPackages(null);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testResolveBundle() throws IOException {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(1)).thenReturn(bundle);
1:fdf3952: 
1:fdf3952:         mbean.resolveBundle(1);
1:fdf3952:         Mockito.verify(admin).resolveBundles(new Bundle[] { bundle });
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testResolveBundles() throws IOException {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(1)).thenReturn(bundle);
1:8b67a25: //        Mockito.when(context.getBundles()).thenReturn(new Bundle [] { bundle });
1:fdf3952: 
1:fdf3952:         mbean.resolveBundles(new long[] { 1 });
1:fdf3952:         Mockito.verify(admin).resolveBundles(new Bundle[] { bundle });
1:fdf3952: 
1:fdf3952:         mbean.resolveBundles(null);
1:fdf3952:         Mockito.verify(admin).resolveBundles(null);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testRestartFramework() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(0)).thenReturn(bundle);
1:fdf3952:         mbean.restartFramework();
1:fdf3952:         Mockito.verify(bundle).update();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testSetBundleStartLevel() throws IOException {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(2)).thenReturn(bundle);
1:fdf3952:         mbean.setBundleStartLevel(2, 1);
1:fdf3952:         Mockito.verify(startLevel).setBundleStartLevel(bundle, 1);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testSetBundleStartLevels() throws IOException {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(2)).thenReturn(bundle);
1:fdf3952:         CompositeData data = mbean.setBundleStartLevels(new long[] { 2 }, new int[] { 2 });
1:fdf3952:         Mockito.verify(startLevel).setBundleStartLevel(bundle, 2);
1:fdf3952:         BatchActionResult batch = BatchActionResult.from(data);
1:fdf3952:         Assert.assertEquals(2, batch.getCompleted()[0]);
1:fdf3952:         Assert.assertTrue(batch.isSuccess());
1:fdf3952:         Assert.assertNull(batch.getError());
1:fdf3952:         Assert.assertNull(batch.getRemainingItems());
1:fdf3952: 
1:fdf3952:         CompositeData data2 = mbean.setBundleStartLevels(new long[] { 2 }, new int[] { 2, 4 });
1:fdf3952:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:fdf3952:         Assert.assertNull(batch2.getCompleted());
1:fdf3952:         Assert.assertFalse(batch2.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertNull(batch2.getRemainingItems());
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testSetFrameworkStartLevel() throws IOException {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(0)).thenReturn(bundle);
1:fdf3952:         mbean.setFrameworkStartLevel(1);
1:fdf3952:         Mockito.verify(startLevel).setStartLevel(1);
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testSetInitialBundleStartLevel() throws IOException {
1:fdf3952:         mbean.setInitialBundleStartLevel(5);
1:fdf3952:         Mockito.verify(startLevel).setInitialBundleStartLevel(5);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testShutdownFramework() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(0)).thenReturn(bundle);
1:fdf3952:         mbean.shutdownFramework();
1:fdf3952:         Mockito.verify(bundle).stop();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testStartBundle() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         mbean.startBundle(5);
1:fdf3952:         Mockito.verify(bundle).start();
1:fdf3952: 
1:fdf3952:         Mockito.reset(context);
1:fdf3952:         Mockito.when(context.getBundle(6)).thenReturn(bundle);
1:fdf3952:         Mockito.doThrow(new BundleException("")).when(bundle).start();
1:fdf3952: 
1:fdf3952:         try {
1:fdf3952:             mbean.startBundle(6);
1:fdf3952:             Assert.fail("Shouldn't go to this stage, BundleException was thrown");
1:fdf3952:         } catch (IOException ioe) {
1:fdf3952:             // expected
1:fdf3952:         }
1:8b67a25: 
1:fdf3952:         Mockito.when(context.getBundle(6)).thenReturn(null);
1:fdf3952:         try {
1:fdf3952:             mbean.startBundle(6);
1:fdf3952:             Assert.fail("IOException should be thrown");
1:fdf3952:         } catch (IOException e) {
1:fdf3952:             //expected
1:fdf3952:         }
1:fdf3952:     }
1:8b67a25: 
1:fdf3952:     @Test
1:fdf3952:     public void testStartBundles() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         CompositeData data = mbean.startBundles(new long[] { 5 });
1:fdf3952:         Mockito.verify(bundle).start();
1:fdf3952: 
1:fdf3952:         BatchActionResult batch = BatchActionResult.from(data);
1:fdf3952:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:fdf3952:         Assert.assertTrue(batch.isSuccess());
1:fdf3952:         Assert.assertNull(batch.getError());
1:fdf3952:         Assert.assertNull(batch.getRemainingItems());
1:fdf3952: 
1:fdf3952:         CompositeData data2 = mbean.startBundles(null);
1:fdf3952: 
1:fdf3952:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:fdf3952:         Assert.assertNull(batch2.getCompleted());
1:fdf3952:         Assert.assertFalse(batch2.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertNull(batch2.getRemainingItems());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testStopBundle() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         mbean.stopBundle(5);
1:fdf3952:         Mockito.verify(bundle).stop();
1:8b67a25: 
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(null);
1:fdf3952:         try {
1:fdf3952:             mbean.stopBundle(5);
1:fdf3952:             Assert.fail("IOException should be thrown");
1:fdf3952:         } catch (IOException e) {
1:fdf3952:             //expected
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testStopBundles() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         CompositeData data = mbean.stopBundles(new long[] { 5 });
1:fdf3952:         Mockito.verify(bundle).stop();
1:fdf3952: 
1:fdf3952:         BatchActionResult batch = BatchActionResult.from(data);
1:fdf3952:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:fdf3952:         Assert.assertTrue(batch.isSuccess());
1:fdf3952:         Assert.assertNull(batch.getError());
1:fdf3952:         Assert.assertNull(batch.getRemainingItems());
1:fdf3952: 
1:fdf3952:         CompositeData data2 = mbean.stopBundles(null);
1:fdf3952: 
1:fdf3952:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:fdf3952:         Assert.assertNull(batch2.getCompleted());
1:fdf3952:         Assert.assertFalse(batch2.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertNull(batch2.getRemainingItems());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testUninstallBundle() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         mbean.uninstallBundle(5);
1:fdf3952:         Mockito.verify(bundle).uninstall();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testUninstallBundles() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         CompositeData data = mbean.uninstallBundles(new long[] { 5 });
1:fdf3952:         Mockito.verify(bundle).uninstall();
1:fdf3952:         BatchActionResult batch = BatchActionResult.from(data);
1:fdf3952:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:fdf3952:         Assert.assertTrue(batch.isSuccess());
1:fdf3952:         Assert.assertNull(batch.getError());
1:fdf3952:         Assert.assertNull(batch.getRemainingItems());
1:fdf3952: 
1:fdf3952:         CompositeData data2 = mbean.uninstallBundles(null);
1:fdf3952: 
1:fdf3952:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:fdf3952:         Assert.assertNull(batch2.getCompleted());
1:fdf3952:         Assert.assertFalse(batch2.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertNull(batch2.getRemainingItems());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testUpdateBundle() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         mbean.updateBundle(5);
1:fdf3952:         Mockito.verify(bundle).update();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testUpdateBundleFromUrl() throws Exception {
1:fdf3952:         Framework spiedMBean = Mockito.spy(mbean);
1:fdf3952:         InputStream stream = Mockito.mock(InputStream.class);
1:fdf3952:         Mockito.doReturn(stream).when(spiedMBean).createStream(Mockito.anyString());
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         spiedMBean.updateBundleFromURL(5, "file:test.jar");
1:fdf3952:         Mockito.verify(bundle).update(stream);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testUpdateBundles() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         CompositeData data = mbean.updateBundles(new long[] { 5 });
1:fdf3952:         Mockito.verify(bundle).update();
1:fdf3952:         BatchActionResult batch = BatchActionResult.from(data);
1:fdf3952:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:fdf3952:         Assert.assertTrue(batch.isSuccess());
1:fdf3952:         Assert.assertNull(batch.getError());
1:fdf3952:         Assert.assertNull(batch.getRemainingItems());
1:fdf3952: 
1:fdf3952:         CompositeData data2 = mbean.updateBundles(null);
1:fdf3952: 
1:fdf3952:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:fdf3952:         Assert.assertNull(batch2.getCompleted());
1:fdf3952:         Assert.assertFalse(batch2.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertNull(batch2.getRemainingItems());
1:fdf3952: 
1:fdf3952:         Mockito.reset(bundle);
1:fdf3952:         CompositeData data3 = mbean.updateBundles(new long[] { 6 });
1:fdf3952:         Mockito.when(context.getBundle(6)).thenReturn(bundle);
1:fdf3952:         Mockito.doThrow(new BundleException("")).when(bundle).update();
1:fdf3952:         BatchActionResult batch3 = BatchActionResult.from(data3);
1:fdf3952:         Assert.assertEquals(0, batch3.getCompleted().length);
1:fdf3952:         Assert.assertFalse(batch3.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch3.getError());
1:fdf3952:         Assert.assertEquals(6, batch3.getBundleInError());
1:fdf3952: 
1:fdf3952:         Bundle bundle6 = Mockito.mock(Bundle.class);
1:fdf3952:         Bundle bundle8 = Mockito.mock(Bundle.class);
1:fdf3952:         Bundle bundle7 = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(6)).thenReturn(bundle6);
1:fdf3952:         Mockito.when(context.getBundle(8)).thenReturn(bundle8);
1:fdf3952:         Mockito.when(context.getBundle(7)).thenReturn(bundle7);
1:fdf3952:         Mockito.doThrow(new BundleException("")).when(bundle8).update();
1:fdf3952:         CompositeData data4 = mbean.updateBundles(new long[] { 6, 8, 7 });
1:fdf3952:         BatchActionResult batch4 = BatchActionResult.from(data4);
1:fdf3952:         Mockito.verify(bundle6).update();
1:fdf3952:         Assert.assertEquals(1, batch4.getCompleted().length);
1:fdf3952:         // should contain only bundleid 6
1:fdf3952:         Assert.assertEquals(6, batch4.getCompleted()[0]);
1:fdf3952:         Assert.assertFalse(batch4.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch4.getError());
1:fdf3952:         Assert.assertEquals(8, batch4.getBundleInError());
1:fdf3952:         Assert.assertEquals(1, batch4.getRemainingItems().length);
1:fdf3952:         // should contain only bundleid 7
1:fdf3952:         Assert.assertEquals(7, batch4.getRemainingItems()[0]);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testUpdateBundlesFromURL() throws Exception {
1:fdf3952:         Framework spiedMBean = Mockito.spy(mbean);
1:fdf3952:         InputStream stream = Mockito.mock(InputStream.class);
1:fdf3952:         Mockito.doReturn(stream).when(spiedMBean).createStream(Mockito.anyString());
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:fdf3952:         CompositeData data = spiedMBean.updateBundlesFromURL(new long[] { 5 }, new String[] { "file:test.jar" });
1:fdf3952:         Mockito.verify(bundle).update(stream);
1:fdf3952:         BatchActionResult batch = BatchActionResult.from(data);
1:fdf3952:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:fdf3952:         Assert.assertTrue(batch.isSuccess());
1:fdf3952:         Assert.assertNull(batch.getError());
1:fdf3952:         Assert.assertNull(batch.getRemainingItems());
1:fdf3952: 
1:fdf3952:         CompositeData data2 = spiedMBean.updateBundlesFromURL(new long[] { 2, 4 }, new String[] { "file:test.jar" });
1:fdf3952:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:fdf3952:         Assert.assertFalse(batch2.isSuccess());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertNotNull(batch2.getError());
1:fdf3952:         Assert.assertNull(batch2.getRemainingItems());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testUpdateFramework() throws Exception {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundle(0)).thenReturn(bundle);
1:fdf3952:         mbean.restartFramework();
1:fdf3952:         Mockito.verify(bundle).update();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:8b67a25
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertEquals(0, batch2.getRemainingLocationItems().length);
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertEquals(0, batch2.getRemainingLocationItems().length);
/////////////////////////////////////////////////////////////////////////
1: //        Mockito.when(context.getBundles()).thenReturn(new Bundle [] { bundle });
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import javax.management.openmbean.CompositeData;
1: 
0: import org.junit.Assert;
1: 
1: import org.apache.aries.jmx.codec.BatchActionResult;
1: import org.apache.aries.jmx.codec.BatchInstallResult;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.MockitoAnnotations;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
1: import org.osgi.jmx.framework.FrameworkMBean;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.service.startlevel.StartLevel;
1: 
1: /**
1:  * {@link FrameworkMBean} test case.
1:  * 
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class FrameworkTest {
1: 
1:     @Mock
1:     private StartLevel startLevel;
1:     @Mock
1:     private PackageAdmin admin;
1:     @Mock
1:     private BundleContext context;
1:     private Framework mbean;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         MockitoAnnotations.initMocks(this);
1:         mbean = new Framework(context, startLevel, admin);
1:     }
1: 
1:     @Test
1:     public void testGetFrameworkStartLevel() throws IOException {
1:         Mockito.when(startLevel.getStartLevel()).thenReturn(1);
1:         int level = mbean.getFrameworkStartLevel();
1:         Assert.assertEquals(1, level);
1:     }
1: 
1:     @Test
1:     public void testGetInitialBundleStartLevel() throws IOException {
1:         Mockito.when(startLevel.getInitialBundleStartLevel()).thenReturn(2);
1:         int level = mbean.getInitialBundleStartLevel();
1:         Mockito.verify(startLevel).getInitialBundleStartLevel();
1:         Assert.assertEquals(2, level);
1:     }
1: 
1:     @Test
1:     public void testInstallBundle() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.installBundle("file:test.jar")).thenReturn(bundle);
1:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(2));
1:         long bundleId = mbean.installBundle("file:test.jar");
1:         Assert.assertEquals(2, bundleId);
1:         Mockito.reset(context);
1:         Mockito.when(context.installBundle("file:test2.jar")).thenThrow(new BundleException("location doesn't exist"));
1: 
1:         try {
1:             mbean.installBundle("file:test2.jar");
1:             Assert.fail("Shouldn't go to this stage, location doesn't exist");
1:         } catch (IOException e) {
1:             // ok
1:         }
1: 
1:     }
1: 
1:     @Test
1:     public void testInstallBundleFromURL() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.installBundle(Mockito.anyString(), Mockito.any(InputStream.class))).thenReturn(bundle);
1:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(2));
1:         Framework spiedMBean = Mockito.spy(mbean);
1:         InputStream stream = Mockito.mock(InputStream.class);
1:         Mockito.doReturn(stream).when(spiedMBean).createStream("test.jar");
1:         long bundleId = spiedMBean.installBundleFromURL("file:test.jar", "test.jar");
1:         Assert.assertEquals(2, bundleId);
1:         Mockito.reset(context);
1:         Mockito.doReturn(stream).when(spiedMBean).createStream(Mockito.anyString());
1:         Mockito.when(context.installBundle(Mockito.anyString(), Mockito.any(InputStream.class))).thenThrow(
1:                 new BundleException("location doesn't exist"));
1: 
1:         try {
1:             spiedMBean.installBundleFromURL("file:test2.jar", "test.jar");
1:             Assert.fail("Shouldn't go to this stage, location doesn't exist");
1:         } catch (IOException e) {
1:             // ok
1:         }
1:     }
1: 
1:     @Test
1:     public void testInstallBundles() throws Exception {
1:         String[] locations = new String[] { "file:test.jar" };
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.installBundle("file:test.jar")).thenReturn(bundle);
1:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(2));
1:         CompositeData data = mbean.installBundles(locations);
1:         BatchInstallResult batch = BatchInstallResult.from(data);
1:         Assert.assertNotNull(batch);
1:         Assert.assertEquals(2, batch.getCompleted()[0]);
1:         Assert.assertTrue(batch.isSuccess());
1:         Assert.assertNull(batch.getError());
1:         Assert.assertNull(batch.getRemainingLocationItems());
1:         Mockito.reset(context);
1:         Mockito.when(context.installBundle("file:test.jar")).thenThrow(new BundleException("location doesn't exist"));
1:         CompositeData data2 = mbean.installBundles(locations);
1:         BatchInstallResult batch2 = BatchInstallResult.from(data2);
1:         Assert.assertNotNull(batch2);
1:         Assert.assertNotNull(batch2.getCompleted());
1:         Assert.assertEquals(0, batch2.getCompleted().length);
1:         Assert.assertFalse(batch2.isSuccess());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertEquals("file:test.jar", batch2.getBundleInError());
1:         Assert.assertNotNull(batch2.getRemainingLocationItems());
0:         Assert.assertEquals(0, batch2.getRemainingLocationItems().length); 
1:     }
1: 
1:     @Test
1:     public void testInstallBundlesFromURL() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.installBundle(Mockito.anyString(), Mockito.any(InputStream.class))).thenReturn(bundle);
1:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(2));
1:         Framework spiedMBean = Mockito.spy(mbean);
1:         InputStream stream = Mockito.mock(InputStream.class);
1:         Mockito.doReturn(stream).when(spiedMBean).createStream(Mockito.anyString());
1:         CompositeData data = spiedMBean.installBundlesFromURL(new String[] { "file:test.jar" }, new String[] { "test.jar" });
1:         Assert.assertNotNull(data);
1:         BatchInstallResult batch = BatchInstallResult.from(data);
1:         Assert.assertEquals(2, batch.getCompleted()[0]);
1:         Assert.assertTrue(batch.isSuccess());
1:         Assert.assertNull(batch.getError());
1:         Assert.assertNull(batch.getRemainingLocationItems());
1:         Mockito.reset(context);
1:         Mockito.when(spiedMBean.createStream(Mockito.anyString())).thenReturn(stream);
1:         Mockito.when(context.installBundle(Mockito.anyString(), Mockito.any(InputStream.class))).thenThrow(
1:                 new BundleException("location doesn't exist"));
1:         CompositeData data2 = spiedMBean.installBundlesFromURL(new String[] { "file:test.jar" }, new String[] { "test.jar" });
1:         BatchInstallResult batch2 = BatchInstallResult.from(data2);
1:         Assert.assertNotNull(batch2);
1:         Assert.assertNotNull(batch2.getCompleted());
1:         Assert.assertEquals(0, batch2.getCompleted().length);
1:         Assert.assertFalse(batch2.isSuccess());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertEquals("file:test.jar", batch2.getBundleInError());
1:         Assert.assertNotNull(batch2.getRemainingLocationItems());
0:         Assert.assertEquals(0, batch2.getRemainingLocationItems().length);     
1:     }
1: 
1:     @Test
1:     public void testRefreshBundle() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(1)).thenReturn(bundle);
1: 
1:         mbean.refreshBundle(1);
1:         Mockito.verify(admin).refreshPackages((Bundle[]) Mockito.any());
1: 
1:         try {
1:             mbean.refreshBundle(2);
1:             Assert.fail("IOException should be thrown");
1:         } catch (IOException e) {
1:             // expected
1:         }
1:     }
1: 
1:     @Test
1:     public void testRefreshBundles() throws IOException {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(1)).thenReturn(bundle);
1: 
1:         mbean.refreshBundles(new long[] { 1 });
1:         Mockito.verify(admin).refreshPackages((Bundle[]) Mockito.any());
1: 
1:         mbean.refreshBundles(null);
1:         Mockito.verify(admin).refreshPackages(null);
1:     }
1: 
1:     @Test
1:     public void testResolveBundle() throws IOException {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(1)).thenReturn(bundle);
1: 
1:         mbean.resolveBundle(1);
1:         Mockito.verify(admin).resolveBundles(new Bundle[] { bundle });
1:     }
1: 
1:     @Test
1:     public void testResolveBundles() throws IOException {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(1)).thenReturn(bundle);
1: 
1:         mbean.resolveBundles(new long[] { 1 });
1:         Mockito.verify(admin).resolveBundles(new Bundle[] { bundle });
1: 
1:         mbean.resolveBundles(null);
1:         Mockito.verify(admin).resolveBundles(null);
1:     }
1: 
1:     @Test
1:     public void testRestartFramework() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(0)).thenReturn(bundle);
1:         mbean.restartFramework();
1:         Mockito.verify(bundle).update();
1:     }
1: 
1:     @Test
1:     public void testSetBundleStartLevel() throws IOException {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(2)).thenReturn(bundle);
1:         mbean.setBundleStartLevel(2, 1);
1:         Mockito.verify(startLevel).setBundleStartLevel(bundle, 1);
1:     }
1: 
1:     @Test
1:     public void testSetBundleStartLevels() throws IOException {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(2)).thenReturn(bundle);
1:         CompositeData data = mbean.setBundleStartLevels(new long[] { 2 }, new int[] { 2 });
1:         Mockito.verify(startLevel).setBundleStartLevel(bundle, 2);
1:         BatchActionResult batch = BatchActionResult.from(data);
1:         Assert.assertEquals(2, batch.getCompleted()[0]);
1:         Assert.assertTrue(batch.isSuccess());
1:         Assert.assertNull(batch.getError());
1:         Assert.assertNull(batch.getRemainingItems());
1: 
1:         CompositeData data2 = mbean.setBundleStartLevels(new long[] { 2 }, new int[] { 2, 4 });
1:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:         Assert.assertNull(batch2.getCompleted());
1:         Assert.assertFalse(batch2.isSuccess());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertNull(batch2.getRemainingItems());
1: 
1:     }
1: 
1:     @Test
1:     public void testSetFrameworkStartLevel() throws IOException {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(0)).thenReturn(bundle);
1:         mbean.setFrameworkStartLevel(1);
1:         Mockito.verify(startLevel).setStartLevel(1);
1: 
1:     }
1: 
1:     @Test
1:     public void testSetInitialBundleStartLevel() throws IOException {
1:         mbean.setInitialBundleStartLevel(5);
1:         Mockito.verify(startLevel).setInitialBundleStartLevel(5);
1:     }
1: 
1:     @Test
1:     public void testShutdownFramework() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(0)).thenReturn(bundle);
1:         mbean.shutdownFramework();
1:         Mockito.verify(bundle).stop();
1:     }
1: 
1:     @Test
1:     public void testStartBundle() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         mbean.startBundle(5);
1:         Mockito.verify(bundle).start();
1: 
1:         Mockito.reset(context);
1:         Mockito.when(context.getBundle(6)).thenReturn(bundle);
1:         Mockito.doThrow(new BundleException("")).when(bundle).start();
1: 
1:         try {
1:             mbean.startBundle(6);
1:             Assert.fail("Shouldn't go to this stage, BundleException was thrown");
1:         } catch (IOException ioe) {
1:             // expected
1:         }
1:         
1:         Mockito.when(context.getBundle(6)).thenReturn(null);
1:         try {
1:             mbean.startBundle(6);
1:             Assert.fail("IOException should be thrown");
1:         } catch (IOException e) {
1:             //expected
1:         }
1:     }
1: 
1:     @Test
1:     public void testStartBundles() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         CompositeData data = mbean.startBundles(new long[] { 5 });
1:         Mockito.verify(bundle).start();
1: 
1:         BatchActionResult batch = BatchActionResult.from(data);
1:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:         Assert.assertTrue(batch.isSuccess());
1:         Assert.assertNull(batch.getError());
1:         Assert.assertNull(batch.getRemainingItems());
1: 
1:         CompositeData data2 = mbean.startBundles(null);
1: 
1:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:         Assert.assertNull(batch2.getCompleted());
1:         Assert.assertFalse(batch2.isSuccess());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertNull(batch2.getRemainingItems());
1:     }
1: 
1:     @Test
1:     public void testStopBundle() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         mbean.stopBundle(5);
1:         Mockito.verify(bundle).stop();
1:         
1:         Mockito.when(context.getBundle(5)).thenReturn(null);
1:         try {
1:             mbean.stopBundle(5);
1:             Assert.fail("IOException should be thrown");
1:         } catch (IOException e) {
1:             //expected
1:         }
1:        
1:     }
1: 
1:     @Test
1:     public void testStopBundles() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         CompositeData data = mbean.stopBundles(new long[] { 5 });
1:         Mockito.verify(bundle).stop();
1: 
1:         BatchActionResult batch = BatchActionResult.from(data);
1:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:         Assert.assertTrue(batch.isSuccess());
1:         Assert.assertNull(batch.getError());
1:         Assert.assertNull(batch.getRemainingItems());
1: 
1:         CompositeData data2 = mbean.stopBundles(null);
1: 
1:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:         Assert.assertNull(batch2.getCompleted());
1:         Assert.assertFalse(batch2.isSuccess());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertNull(batch2.getRemainingItems());
1:     }
1: 
1:     @Test
1:     public void testUninstallBundle() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         mbean.uninstallBundle(5);
1:         Mockito.verify(bundle).uninstall();
1:     }
1: 
1:     @Test
1:     public void testUninstallBundles() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         CompositeData data = mbean.uninstallBundles(new long[] { 5 });
1:         Mockito.verify(bundle).uninstall();
1:         BatchActionResult batch = BatchActionResult.from(data);
1:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:         Assert.assertTrue(batch.isSuccess());
1:         Assert.assertNull(batch.getError());
1:         Assert.assertNull(batch.getRemainingItems());
1: 
1:         CompositeData data2 = mbean.uninstallBundles(null);
1: 
1:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:         Assert.assertNull(batch2.getCompleted());
1:         Assert.assertFalse(batch2.isSuccess());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertNull(batch2.getRemainingItems());
1:     }
1: 
1:     @Test
1:     public void testUpdateBundle() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         mbean.updateBundle(5);
1:         Mockito.verify(bundle).update();
1:     }
1: 
1:     @Test
1:     public void testUpdateBundleFromUrl() throws Exception {
1:         Framework spiedMBean = Mockito.spy(mbean);
1:         InputStream stream = Mockito.mock(InputStream.class);
1:         Mockito.doReturn(stream).when(spiedMBean).createStream(Mockito.anyString());
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         spiedMBean.updateBundleFromURL(5, "file:test.jar");
1:         Mockito.verify(bundle).update(stream);
1:     }
1: 
1:     @Test
1:     public void testUpdateBundles() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         CompositeData data = mbean.updateBundles(new long[] { 5 });
1:         Mockito.verify(bundle).update();
1:         BatchActionResult batch = BatchActionResult.from(data);
1:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:         Assert.assertTrue(batch.isSuccess());
1:         Assert.assertNull(batch.getError());
1:         Assert.assertNull(batch.getRemainingItems());
1: 
1:         CompositeData data2 = mbean.updateBundles(null);
1: 
1:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:         Assert.assertNull(batch2.getCompleted());
1:         Assert.assertFalse(batch2.isSuccess());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertNull(batch2.getRemainingItems());
1: 
1:         Mockito.reset(bundle);
1:         CompositeData data3 = mbean.updateBundles(new long[] { 6 });
1:         Mockito.when(context.getBundle(6)).thenReturn(bundle);
1:         Mockito.doThrow(new BundleException("")).when(bundle).update();
1:         BatchActionResult batch3 = BatchActionResult.from(data3);
1:         Assert.assertEquals(0, batch3.getCompleted().length);
1:         Assert.assertFalse(batch3.isSuccess());
1:         Assert.assertNotNull(batch3.getError());
1:         Assert.assertEquals(6, batch3.getBundleInError());
1: 
1:         Bundle bundle6 = Mockito.mock(Bundle.class);
1:         Bundle bundle8 = Mockito.mock(Bundle.class);
1:         Bundle bundle7 = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(6)).thenReturn(bundle6);
1:         Mockito.when(context.getBundle(8)).thenReturn(bundle8);
1:         Mockito.when(context.getBundle(7)).thenReturn(bundle7);
1:         Mockito.doThrow(new BundleException("")).when(bundle8).update();
1:         CompositeData data4 = mbean.updateBundles(new long[] { 6, 8, 7 });
1:         BatchActionResult batch4 = BatchActionResult.from(data4);
1:         Mockito.verify(bundle6).update();
1:         Assert.assertEquals(1, batch4.getCompleted().length);
1:         // should contain only bundleid 6
1:         Assert.assertEquals(6, batch4.getCompleted()[0]);
1:         Assert.assertFalse(batch4.isSuccess());
1:         Assert.assertNotNull(batch4.getError());
1:         Assert.assertEquals(8, batch4.getBundleInError());
1:         Assert.assertEquals(1, batch4.getRemainingItems().length);
1:         // should contain only bundleid 7
1:         Assert.assertEquals(7, batch4.getRemainingItems()[0]);
1:     }
1: 
1:     @Test
1:     public void testUpdateBundlesFromURL() throws Exception {
1:         Framework spiedMBean = Mockito.spy(mbean);
1:         InputStream stream = Mockito.mock(InputStream.class);
1:         Mockito.doReturn(stream).when(spiedMBean).createStream(Mockito.anyString());
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(5)).thenReturn(bundle);
1:         CompositeData data = spiedMBean.updateBundlesFromURL(new long[] { 5 }, new String[] { "file:test.jar" });
1:         Mockito.verify(bundle).update(stream);
1:         BatchActionResult batch = BatchActionResult.from(data);
1:         Assert.assertEquals(5, batch.getCompleted()[0]);
1:         Assert.assertTrue(batch.isSuccess());
1:         Assert.assertNull(batch.getError());
1:         Assert.assertNull(batch.getRemainingItems());
1: 
1:         CompositeData data2 = spiedMBean.updateBundlesFromURL(new long[] { 2, 4 }, new String[] { "file:test.jar" });
1:         BatchActionResult batch2 = BatchActionResult.from(data2);
1:         Assert.assertFalse(batch2.isSuccess());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertNotNull(batch2.getError());
1:         Assert.assertNull(batch2.getRemainingItems());
1:     }
1: 
1:     @Test
1:     public void testUpdateFramework() throws Exception {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundle(0)).thenReturn(bundle);
1:         mbean.restartFramework();
1:         Mockito.verify(bundle).update();
1:     }
1: 
1: }
============================================================================