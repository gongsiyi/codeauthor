1:552587b: /*
1:552587b:  * Licensed under the Apache License, Version 2.0 (the "License");
1:552587b:  * you may not use this file except in compliance with the License.
1:552587b:  * You may obtain a copy of the License at
1:552587b:  *
1:552587b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:552587b:  *
1:552587b:  * Unless required by applicable law or agreed to in writing, software
1:552587b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:552587b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:552587b:  * See the License for the specific language governing permissions and
1:552587b:  * limitations under the License.
1:552587b:  */
1:b7762c7: package org.apache.aries.subsystem.core.internal;
1:b7762c7: 
1:b7762c7: import static org.junit.Assert.assertFalse;
1:b7762c7: import static org.junit.Assert.assertTrue;
1:b7762c7: 
1:b7762c7: import org.easymock.EasyMock;
1:b7762c7: import org.junit.Test;
1:b7762c7: import org.osgi.framework.namespace.PackageNamespace;
1:b7762c7: import org.osgi.resource.Capability;
1:b7762c7: import org.osgi.resource.Requirement;
1:b7762c7: import org.osgi.resource.Resource;
1:b7762c7: 
1:b7762c7: public class ResourceHelperTest {
1:b7762c7: 	@Test
1:b7762c7: 	public void testMandatoryDirectiveAbsent() {
1:b7762c7: 		Capability cap = new BasicCapability.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1:b7762c7: 				.attribute("a", "b")
1:b7762c7: 				.attribute("b", "c")
1:b7762c7: 				.attribute("c", "d")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		Requirement req = new BasicRequirement.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1:b7762c7: 						"(&(osgi.wiring.package=com.foo)(a=b)(b=c))")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
1:b7762c7: 	}
1:b7762c7: 	
1:b7762c7: 	@Test
1:b7762c7: 	public void testMandatoryDirectiveAndNullFilterDirective() {
1:b7762c7: 		Capability cap = new BasicCapability.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1:b7762c7: 				.attribute("a", "b")
1:b7762c7: 				.attribute("b", "c")
1:b7762c7: 				.attribute("c", "d")
1:b7762c7: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "b")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		Requirement req = new BasicRequirement.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
1:b7762c7: 	}
1:b7762c7: 	
1:b7762c7: 	@Test
1:b7762c7: 	public void testMandatoryDirectiveCaseSensitive() {
1:b7762c7: 		Capability cap = new BasicCapability.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1:b7762c7: 				.attribute("a", "b")
1:b7762c7: 				.attribute("bAr", "c")
1:b7762c7: 				.attribute("c", "d")
1:b7762c7: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "bAr")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		Requirement req = new BasicRequirement.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1:b7762c7: 						"(&(osgi.wiring.package=com.foo)(a=b)(baR=c)(c=d))")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
1:b7762c7: 	}
1:b7762c7: 	
1:b7762c7: 	@Test
1:b7762c7: 	public void testMandatoryDirectiveExportPackageFail() {
1:b7762c7: 		Capability cap = new BasicCapability.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1:b7762c7: 				.attribute("a", "b")
1:b7762c7: 				.attribute("b", "c")
1:b7762c7: 				.attribute("c", "d")
1:b7762c7: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "a,c")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class))
1:b7762c7: 				.build();
1:b7762c7: 		Requirement req = new BasicRequirement.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1:b7762c7: 						"(&(osgi.wiring.package=com.foo)(a=b)(b=c))")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
1:b7762c7: 	}
1:b7762c7: 	
1:b7762c7: 	@Test
1:b7762c7: 	public void testMandatoryDirectiveExportPackagePass() {
1:b7762c7: 		Capability cap = new BasicCapability.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1:b7762c7: 				.attribute("a", "b")
1:b7762c7: 				.attribute("b", "c")
1:b7762c7: 				.attribute("c", "d")
1:b7762c7: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "a,c")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class))
1:b7762c7: 				.build();
1:b7762c7: 		Requirement req = new BasicRequirement.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1:b7762c7: 						"(&(osgi.wiring.package=com.foo)(a=b)(c=d))")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
1:b7762c7: 	}
1:b7762c7: 	
1:b7762c7: 	@Test
1:b7762c7: 	public void testMandatoryDirectiveWithWhitespace() {
1:b7762c7: 		Capability cap = new BasicCapability.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1:b7762c7: 				.attribute("a", "b")
1:b7762c7: 				.attribute("b", "c")
1:b7762c7: 				.attribute("c", "d")
1:b7762c7: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "\ra\n, c	")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class))
1:b7762c7: 				.build();
1:b7762c7: 		Requirement req = new BasicRequirement.Builder()
1:b7762c7: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:b7762c7: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1:b7762c7: 						"(&(osgi.wiring.package=com.foo)(a=b)(c=d))")
1:b7762c7: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1:b7762c7: 		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
1:b7762c7: 	}
1:b7762c7: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:552587b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:b7762c7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import org.easymock.EasyMock;
1: import org.junit.Test;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: public class ResourceHelperTest {
1: 	@Test
1: 	public void testMandatoryDirectiveAbsent() {
1: 		Capability cap = new BasicCapability.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1: 				.attribute("a", "b")
1: 				.attribute("b", "c")
1: 				.attribute("c", "d")
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		Requirement req = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1: 						"(&(osgi.wiring.package=com.foo)(a=b)(b=c))")
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
1: 	}
1: 	
1: 	@Test
1: 	public void testMandatoryDirectiveAndNullFilterDirective() {
1: 		Capability cap = new BasicCapability.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1: 				.attribute("a", "b")
1: 				.attribute("b", "c")
1: 				.attribute("c", "d")
1: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "b")
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		Requirement req = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
1: 	}
1: 	
1: 	@Test
1: 	public void testMandatoryDirectiveCaseSensitive() {
1: 		Capability cap = new BasicCapability.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1: 				.attribute("a", "b")
1: 				.attribute("bAr", "c")
1: 				.attribute("c", "d")
1: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "bAr")
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		Requirement req = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1: 						"(&(osgi.wiring.package=com.foo)(a=b)(baR=c)(c=d))")
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
1: 	}
1: 	
1: 	@Test
1: 	public void testMandatoryDirectiveExportPackageFail() {
1: 		Capability cap = new BasicCapability.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1: 				.attribute("a", "b")
1: 				.attribute("b", "c")
1: 				.attribute("c", "d")
1: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "a,c")
1: 				.resource(EasyMock.createNiceMock(Resource.class))
1: 				.build();
1: 		Requirement req = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1: 						"(&(osgi.wiring.package=com.foo)(a=b)(b=c))")
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
1: 	}
1: 	
1: 	@Test
1: 	public void testMandatoryDirectiveExportPackagePass() {
1: 		Capability cap = new BasicCapability.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1: 				.attribute("a", "b")
1: 				.attribute("b", "c")
1: 				.attribute("c", "d")
1: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "a,c")
1: 				.resource(EasyMock.createNiceMock(Resource.class))
1: 				.build();
1: 		Requirement req = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1: 						"(&(osgi.wiring.package=com.foo)(a=b)(c=d))")
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
1: 	}
1: 	
1: 	@Test
1: 	public void testMandatoryDirectiveWithWhitespace() {
1: 		Capability cap = new BasicCapability.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
1: 				.attribute("a", "b")
1: 				.attribute("b", "c")
1: 				.attribute("c", "d")
1: 				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "\ra\n, c	")
1: 				.resource(EasyMock.createNiceMock(Resource.class))
1: 				.build();
1: 		Requirement req = new BasicRequirement.Builder()
1: 				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1: 						"(&(osgi.wiring.package=com.foo)(a=b)(c=d))")
1: 				.resource(EasyMock.createNiceMock(Resource.class)).build();
1: 		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
1: 	}
1: }
============================================================================