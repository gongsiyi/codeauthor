1:9439520: /**
1:9439520:  * Licensed to the Apache Software Foundation (ASF) under one
1:9439520:  * or more contributor license agreements.  See the NOTICE file
1:9439520:  * distributed with this work for additional information
1:9439520:  * regarding copyright ownership.  The ASF licenses this file
1:9439520:  * to you under the Apache License, Version 2.0 (the
1:9439520:  * "License"); you may not use this file except in compliance
1:9439520:  * with the License.  You may obtain a copy of the License at
1:9439520:  *
1:9439520:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9439520:  *
1:9439520:  * Unless required by applicable law or agreed to in writing,
1:9439520:  * software distributed under the License is distributed on an
1:9439520:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9439520:  * KIND, either express or implied.  See the License for the
1:9439520:  * specific language governing permissions and limitations
1:9439520:  * under the License.
1:9439520:  */
1:9439520: package org.apache.aries.samples.goat.enhancer;
1:9439520: 
1:9439520: import java.util.ArrayList;
1:9439520: import java.util.Collection;
1:9439520: import java.util.Collections;
1:9439520: import java.util.HashMap;
1:9439520: import java.util.List;
1:9439520: import java.util.Map;
1:9439520: 
1:9439520: import org.apache.aries.samples.goat.api.ComponentInfo;
1:9439520: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1:9439520: import org.apache.aries.samples.goat.api.ModelInfoService;
1:9439520: import org.apache.aries.samples.goat.api.RelationshipInfo;
1:9439520: import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
1:35c9dd5: 
1:35c9dd5: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
1:35c9dd5: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
1:9439520: 
1:9439520: public class ModelInfoEnhancerService implements ModelInfoService,
1:9439520: 		ComponentInfoProvider, RelationshipInfoProvider,
1:9439520: 		ComponentInfoProvider.ComponentInfoListener,
1:9439520: 		RelationshipInfoProvider.RelationshipInfoListener {
1:9439520: 
1:9439520: 	private static final String SERVICE_REGISTRATION = "Service registration";
1:9439520: 
1:9439520: 	private static final String SERVICE_USAGE = "Service usage";
1:9439520: 
1:9439520: 	// TODO where should we expose these shared strings?
1:9439520: 	private static final String SERVICE = "Service";
1:9439520: 
1:9439520: 	private ModelInfoService originalService;
1:9439520: 
1:9439520: 	private final Map<String, ComponentInfo> components = new HashMap<String, ComponentInfo>();
1:9439520: 	private final Map<String, RelationshipInfo> relationships = new HashMap<String, RelationshipInfo>();
1:9439520: 
1:9439520: 	private final List<ComponentInfoListener> clisteners;
1:9439520: 	private final List<RelationshipInfoListener> rlisteners;
1:9439520: 
1:9439520: 	public ModelInfoEnhancerService(ModelInfoService infoService) {
1:9439520: 
1:9439520: 		clisteners = Collections
1:9439520: 				.synchronizedList(new ArrayList<ComponentInfoListener>());
1:9439520: 		rlisteners = Collections
1:9439520: 				.synchronizedList(new ArrayList<RelationshipInfoListener>());
1:9439520: 
1:9439520: 		this.originalService = infoService;
1:9439520: 		Collection<ComponentInfo> originalComponents = originalService
1:9439520: 				.getComponentInfoProvider().getComponents();
1:9439520: 		// We keep all the original components
1:9439520: 		for (ComponentInfo info : originalComponents) {
1:9439520: 			components.put(info.getId(), info);
1:9439520: 		}
1:9439520: 		// We add a new component for each service
1:9439520: 		Collection<RelationshipInfo> originalRelationships = originalService
1:9439520: 				.getRelationshipInfoProvider().getRelationships();
1:9439520: 		// We keep all the original components
1:9439520: 		for (RelationshipInfo rel : originalRelationships) {
1:9439520: 
1:9439520: 			if (SERVICE.equals(rel.getType())) {
1:9439520: 				ComponentInfoImpl serviceComponent = new ComponentInfoImpl();
1:9439520: 				String id = constructServiceComponentId(rel);
1:9439520: 				serviceComponent.setId(id);
1:9439520: 				Map<String, String> componentProperties = new HashMap<String, String>();
1:9439520: 				componentProperties.put("Name", rel.getName());
1:9439520: 				serviceComponent.setComponentProperties(componentProperties);
1:9439520: 
1:9439520: 				components.put(id, serviceComponent);
1:9439520: 
1:9439520: 				// Make new relationships;
1:9439520: 
1:9439520: 				RelationshipInfoImpl registration = new RelationshipInfoImpl();
1:9439520: 				registration.setType(SERVICE_REGISTRATION);
1:9439520: 				registration.setName(rel.getName());
1:9439520: 				registration.setProvidedBy(rel.getProvidedBy());
1:9439520: 				registration.setRelationshipAspects(rel
1:9439520: 						.getRelationshipAspects());
1:9439520: 
1:9439520: 				ArrayList<ComponentInfo> arrayList = new ArrayList<ComponentInfo>();
1:9439520: 				arrayList.add(serviceComponent);
1:9439520: 				registration.setConsumedBy(arrayList);
1:9439520: 
1:9439520: 				relationships.put(constructId(registration), registration);
1:9439520: 
1:9439520: 				RelationshipInfoImpl consumption = new RelationshipInfoImpl();
1:9439520: 				consumption.setType(SERVICE_USAGE);
1:9439520: 				consumption.setName(rel.getName());
1:9439520: 				consumption.setProvidedBy(serviceComponent);
1:9439520: 				consumption.setConsumedBy(rel.getConsumedBy());
1:9439520: 				consumption
1:9439520: 						.setRelationshipAspects(rel.getRelationshipAspects());
1:9439520: 
1:9439520: 				relationships.put(constructId(consumption), consumption);
1:9439520: 
1:9439520: 			} else {
1:9439520: 				// Pass non-service relationships through
1:9439520: 				relationships.put(constructId(rel), rel);
1:9439520: 
1:9439520: 			}
1:9439520: 
1:9439520: 			originalService.getComponentInfoProvider()
1:9439520: 					.registerComponentInfoListener(this);
1:9439520: 			originalService.getRelationshipInfoProvider()
1:9439520: 					.registerRelationshipInfoListener(this);
1:9439520: 		}
1:9439520: 
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public String getName() {
1:9439520: 		return "Model Enhancer Service";
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public ComponentInfoProvider getComponentInfoProvider() {
1:9439520: 		return this;
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public RelationshipInfoProvider getRelationshipInfoProvider() {
1:9439520: 		return this;
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public Collection<RelationshipInfo> getRelationships() {
1:9439520: 		return relationships.values();
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public Collection<ComponentInfo> getComponents() {
1:9439520: 		return components.values();
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public ComponentInfo getComponentForId(String id) {
1:9439520: 		return components.get(id);
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public void registerRelationshipInfoListener(
1:9439520: 			RelationshipInfoListener listener) {
1:9439520: 		rlisteners.add(listener);
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public void registerComponentInfoListener(ComponentInfoListener listener) {
1:9439520: 		clisteners.add(listener);
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public void updateRelationship(RelationshipInfo r) {
1:9439520: 		if (SERVICE.equals(r.getType())) {
1:9439520: 			updateSyntheticServiceArtefactsAndNotifyListeners(r);
1:9439520: 		} else {
1:9439520: 			// Update our copy
1:9439520: 			relationships.put(constructId(r), r);
1:9439520: 			// This shouldn't affect us, but pass it on to our listeners
1:9439520: 			for (RelationshipInfoListener listener : rlisteners) {
1:9439520: 				listener.updateRelationship(r);
1:9439520: 			}
1:9439520: 		}
1:9439520: 
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public void removeRelationship(RelationshipInfo r) {
1:9439520: 
1:9439520: 		if (SERVICE.equals(r.getType())) {
1:9439520: 			removeSyntheticServiceArtefactsAndNotifyListeners(r);
1:9439520: 		} else {
1:9439520: 			// We don't want to track this relationship anymore
1:9439520: 			String id = constructId(r);
1:9439520: 			RelationshipInfo relationship = relationships.get(id);
1:9439520: 			relationships.remove(id);
1:9439520: 			if (relationship != null) {
1:9439520: 				// This shouldn't affect us, but pass it on to our listeners
1:9439520: 				for (RelationshipInfoListener listener : rlisteners) {
1:9439520: 					listener.removeRelationship(relationship);
1:9439520: 				}
1:9439520: 			}
1:9439520: 		}
1:9439520: 
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public void updateComponent(ComponentInfo b) {
1:9439520: 		// Update our copy
1:9439520: 		components.put(b.getId(), b);
1:9439520: 		// This shouldn't affect us, but pass it on to our listeners
1:9439520: 		for (ComponentInfoListener listener : clisteners) {
1:9439520: 			listener.updateComponent(b);
1:9439520: 		}
1:9439520: 
1:9439520: 	}
1:9439520: 
1:9439520: 	@Override
1:9439520: 	public void removeComponent(ComponentInfo b) {
1:9439520: 		// This shouldn't affect us unless it has relationships pointing to it
1:9439520: 		// Cheerfully assume that gets handled upstream
1:9439520: 
1:9439520: 		// We don't want to know about this component anymore
1:9439520: 		ComponentInfo component = components.remove(b);
1:9439520: 		if (component != null) {// This shouldn't affect us, but pass it on to
1:9439520: 								// our listeners
1:9439520: 			for (ComponentInfoListener listener : clisteners) {
1:9439520: 				listener.removeComponent(component);
1:9439520: 			}
1:9439520: 		}
1:9439520: 
1:9439520: 	}
1:9439520: 
1:9439520: 	private String constructServiceComponentId(RelationshipInfo rel) {
1:9439520: 		return "/syntheticenhancedservices/" + rel.getName() + "/"
1:9439520: 				+ rel.getProvidedBy().getId();
1:9439520: 	}
1:9439520: 
1:9439520: 	private String constructId(RelationshipInfo b) {
1:9439520: 		return b.getType() + "/" + b.getName() + "/"
1:9439520: 				+ b.getProvidedBy().getId();
1:9439520: 	}
1:9439520: 
1:9439520: 	private void removeSyntheticServiceArtefactsAndNotifyListeners(
1:9439520: 			RelationshipInfo r) {
1:9439520: 		// We need to remove our two relationships and the synthetic
1:9439520: 		// component
1:9439520: 
1:9439520: 		String componentId = constructServiceComponentId(r);
1:9439520: 
1:9439520: 		// Do the relationships first
1:9439520: 		// The registration has type "service registration", and the
1:9439520: 		// original provider and name
1:9439520: 		String registrationRelationshipId = SERVICE_REGISTRATION + "/"
1:9439520: 				+ r.getName() + "/" + r.getProvidedBy().getId();
1:9439520: 		RelationshipInfo registrationRelationship = relationships
1:9439520: 				.get(registrationRelationshipId);
1:9439520: 
1:9439520: 		// The consumers have type "service usage", and the
1:9439520: 		// original name, and the new provided by
1:9439520: 
1:9439520: 		String usageRelationshipId = SERVICE_USAGE + "/" + r.getName() + "/"
1:9439520: 				+ componentId;
1:9439520: 		RelationshipInfo usageRelationship = relationships
1:9439520: 				.get(usageRelationshipId);
1:9439520: 
1:9439520: 		relationships.remove(usageRelationshipId);
1:9439520: 		relationships.remove(registrationRelationshipId);
1:9439520: 
1:9439520: 		// Tell our listeners about the relationships first
1:9439520: 
1:9439520: 		for (RelationshipInfoListener listener : rlisteners) {
1:9439520: 			if (usageRelationship != null) {
1:9439520: 				listener.removeRelationship(usageRelationship);
1:9439520: 			}
1:9439520: 			if (registrationRelationship != null) {
1:9439520: 				listener.removeRelationship(registrationRelationship);
1:9439520: 			}
1:9439520: 
1:9439520: 		}
1:9439520: 
1:9439520: 		ComponentInfo component = components.remove(componentId);
1:9439520: 		if (component != null) {
1:9439520: 			// Tell our listeners their service component went away
1:9439520: 			for (ComponentInfoListener listener : clisteners) {
1:9439520: 				listener.removeComponent(component);
1:9439520: 			}
1:9439520: 		}
1:9439520: 	}
1:9439520: 
1:9439520: 	private void updateSyntheticServiceArtefactsAndNotifyListeners(
1:9439520: 			RelationshipInfo r) {
1:9439520: 		// We need to update our two relationships and the synthetic
1:9439520: 		// component
1:9439520: 		// Hopefully the thing which changed won't prevent us
1:9439520: 		// from finding our relationship
1:9439520: 
1:9439520: 		String componentId = constructServiceComponentId(r);
1:9439520: 
1:9439520: 		// Do the relationships first
1:9439520: 		// The registration has type "service registration", and the
1:9439520: 		// original provider and name
1:9439520: 		String registrationRelationshipId = SERVICE_REGISTRATION + "/"
1:9439520: 				+ r.getName() + "/" + r.getProvidedBy().getId();
1:9439520: 		RelationshipInfoImpl registrationRelationship = (RelationshipInfoImpl) relationships
1:9439520: 				.get(registrationRelationshipId);
1:9439520: 		registrationRelationship.setName(r.getName());
1:9439520: 		registrationRelationship.setRelationshipAspects(r
1:9439520: 				.getRelationshipAspects());
1:9439520: 
1:9439520: 		// The consumers have type "service usage", and the
1:9439520: 		// original name, and the new provided by
1:9439520: 
1:9439520: 		String usageRelationshipId = SERVICE_USAGE + "/" + r.getName() + "/"
1:9439520: 				+ componentId;
1:9439520: 		RelationshipInfoImpl usageRelationship = (RelationshipInfoImpl) relationships
1:9439520: 				.get(usageRelationshipId);
1:9439520: 
1:9439520: 		// The consumers may have changed, so we update the usage relationship
1:9439520: 		usageRelationship.setConsumedBy(r.getConsumedBy());
1:9439520: 		usageRelationship.setName(r.getName());
1:9439520: 		usageRelationship.setRelationshipAspects(r.getRelationshipAspects());
1:9439520: 
1:9439520: 		// Tell our listeners about the relationships first
1:9439520: 
1:9439520: 		for (RelationshipInfoListener listener : rlisteners) {
1:9439520: 			if (usageRelationship != null) {
1:9439520: 				listener.updateRelationship(usageRelationship);
1:9439520: 			}
1:9439520: 			if (registrationRelationship != null) {
1:9439520: 				listener.updateRelationship(registrationRelationship);
1:9439520: 			}
1:9439520: 
1:9439520: 		}
1:9439520: 
1:9439520: 		ComponentInfo component = components.get(componentId);
1:9439520: 		if (component != null) {
1:9439520: 			// Tell our listeners their service component was updated
1:9439520: 			for (ComponentInfoListener listener : clisteners) {
1:9439520: 				listener.updateComponent(component);
1:9439520: 			}
1:9439520: 		}
1:9439520: 	}
1:9439520: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:50bd22c
commit:35c9dd5
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
1: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
commit:31b81a2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.goat.api.ComponentInfoImpl;
0: import org.apache.aries.samples.goat.api.RelationshipInfoImpl;
commit:9439520
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.goat.enhancer;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.samples.goat.api.ComponentInfo;
1: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1: import org.apache.aries.samples.goat.api.ModelInfoService;
1: import org.apache.aries.samples.goat.api.RelationshipInfo;
1: import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
0: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
0: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
1: 
1: public class ModelInfoEnhancerService implements ModelInfoService,
1: 		ComponentInfoProvider, RelationshipInfoProvider,
1: 		ComponentInfoProvider.ComponentInfoListener,
1: 		RelationshipInfoProvider.RelationshipInfoListener {
1: 
1: 	private static final String SERVICE_REGISTRATION = "Service registration";
1: 
1: 	private static final String SERVICE_USAGE = "Service usage";
1: 
1: 	// TODO where should we expose these shared strings?
1: 	private static final String SERVICE = "Service";
1: 
1: 	private ModelInfoService originalService;
1: 
1: 	private final Map<String, ComponentInfo> components = new HashMap<String, ComponentInfo>();
1: 	private final Map<String, RelationshipInfo> relationships = new HashMap<String, RelationshipInfo>();
1: 
1: 	private final List<ComponentInfoListener> clisteners;
1: 	private final List<RelationshipInfoListener> rlisteners;
1: 
1: 	public ModelInfoEnhancerService(ModelInfoService infoService) {
1: 
1: 		clisteners = Collections
1: 				.synchronizedList(new ArrayList<ComponentInfoListener>());
1: 		rlisteners = Collections
1: 				.synchronizedList(new ArrayList<RelationshipInfoListener>());
1: 
1: 		this.originalService = infoService;
1: 		Collection<ComponentInfo> originalComponents = originalService
1: 				.getComponentInfoProvider().getComponents();
1: 		// We keep all the original components
1: 		for (ComponentInfo info : originalComponents) {
1: 			components.put(info.getId(), info);
1: 		}
1: 		// We add a new component for each service
1: 		Collection<RelationshipInfo> originalRelationships = originalService
1: 				.getRelationshipInfoProvider().getRelationships();
1: 		// We keep all the original components
1: 		for (RelationshipInfo rel : originalRelationships) {
1: 
1: 			if (SERVICE.equals(rel.getType())) {
1: 				ComponentInfoImpl serviceComponent = new ComponentInfoImpl();
1: 				String id = constructServiceComponentId(rel);
1: 				serviceComponent.setId(id);
1: 				Map<String, String> componentProperties = new HashMap<String, String>();
1: 				componentProperties.put("Name", rel.getName());
1: 				serviceComponent.setComponentProperties(componentProperties);
1: 
1: 				components.put(id, serviceComponent);
1: 
1: 				// Make new relationships;
1: 
1: 				RelationshipInfoImpl registration = new RelationshipInfoImpl();
1: 				registration.setType(SERVICE_REGISTRATION);
1: 				registration.setName(rel.getName());
1: 				registration.setProvidedBy(rel.getProvidedBy());
1: 				registration.setRelationshipAspects(rel
1: 						.getRelationshipAspects());
1: 
1: 				ArrayList<ComponentInfo> arrayList = new ArrayList<ComponentInfo>();
1: 				arrayList.add(serviceComponent);
1: 				registration.setConsumedBy(arrayList);
1: 
1: 				relationships.put(constructId(registration), registration);
1: 
1: 				RelationshipInfoImpl consumption = new RelationshipInfoImpl();
1: 				consumption.setType(SERVICE_USAGE);
1: 				consumption.setName(rel.getName());
1: 				consumption.setProvidedBy(serviceComponent);
1: 				consumption.setConsumedBy(rel.getConsumedBy());
1: 				consumption
1: 						.setRelationshipAspects(rel.getRelationshipAspects());
1: 
1: 				relationships.put(constructId(consumption), consumption);
1: 
1: 			} else {
1: 				// Pass non-service relationships through
1: 				relationships.put(constructId(rel), rel);
1: 
1: 			}
1: 
1: 			originalService.getComponentInfoProvider()
1: 					.registerComponentInfoListener(this);
1: 			originalService.getRelationshipInfoProvider()
1: 					.registerRelationshipInfoListener(this);
1: 		}
1: 
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return "Model Enhancer Service";
1: 	}
1: 
1: 	@Override
1: 	public ComponentInfoProvider getComponentInfoProvider() {
1: 		return this;
1: 	}
1: 
1: 	@Override
1: 	public RelationshipInfoProvider getRelationshipInfoProvider() {
1: 		return this;
1: 	}
1: 
1: 	@Override
1: 	public Collection<RelationshipInfo> getRelationships() {
1: 		return relationships.values();
1: 	}
1: 
1: 	@Override
1: 	public Collection<ComponentInfo> getComponents() {
1: 		return components.values();
1: 	}
1: 
1: 	@Override
1: 	public ComponentInfo getComponentForId(String id) {
1: 		return components.get(id);
1: 	}
1: 
1: 	@Override
1: 	public void registerRelationshipInfoListener(
1: 			RelationshipInfoListener listener) {
1: 		rlisteners.add(listener);
1: 	}
1: 
1: 	@Override
1: 	public void registerComponentInfoListener(ComponentInfoListener listener) {
1: 		clisteners.add(listener);
1: 	}
1: 
1: 	@Override
1: 	public void updateRelationship(RelationshipInfo r) {
1: 		if (SERVICE.equals(r.getType())) {
1: 			updateSyntheticServiceArtefactsAndNotifyListeners(r);
1: 		} else {
1: 			// Update our copy
1: 			relationships.put(constructId(r), r);
1: 			// This shouldn't affect us, but pass it on to our listeners
1: 			for (RelationshipInfoListener listener : rlisteners) {
1: 				listener.updateRelationship(r);
1: 			}
1: 		}
1: 
1: 	}
1: 
1: 	@Override
1: 	public void removeRelationship(RelationshipInfo r) {
1: 
1: 		if (SERVICE.equals(r.getType())) {
1: 			removeSyntheticServiceArtefactsAndNotifyListeners(r);
1: 		} else {
1: 			// We don't want to track this relationship anymore
1: 			String id = constructId(r);
1: 			RelationshipInfo relationship = relationships.get(id);
1: 			relationships.remove(id);
1: 			if (relationship != null) {
1: 				// This shouldn't affect us, but pass it on to our listeners
1: 				for (RelationshipInfoListener listener : rlisteners) {
1: 					listener.removeRelationship(relationship);
1: 				}
1: 			}
1: 		}
1: 
1: 	}
1: 
1: 	@Override
1: 	public void updateComponent(ComponentInfo b) {
1: 		// Update our copy
1: 		components.put(b.getId(), b);
1: 		// This shouldn't affect us, but pass it on to our listeners
1: 		for (ComponentInfoListener listener : clisteners) {
1: 			listener.updateComponent(b);
1: 		}
1: 
1: 	}
1: 
1: 	@Override
1: 	public void removeComponent(ComponentInfo b) {
1: 		// This shouldn't affect us unless it has relationships pointing to it
1: 		// Cheerfully assume that gets handled upstream
1: 
1: 		// We don't want to know about this component anymore
1: 		ComponentInfo component = components.remove(b);
1: 		if (component != null) {// This shouldn't affect us, but pass it on to
1: 								// our listeners
1: 			for (ComponentInfoListener listener : clisteners) {
1: 				listener.removeComponent(component);
1: 			}
1: 		}
1: 
1: 	}
1: 
1: 	private String constructServiceComponentId(RelationshipInfo rel) {
1: 		return "/syntheticenhancedservices/" + rel.getName() + "/"
1: 				+ rel.getProvidedBy().getId();
1: 	}
1: 
1: 	private String constructId(RelationshipInfo b) {
1: 		return b.getType() + "/" + b.getName() + "/"
1: 				+ b.getProvidedBy().getId();
1: 	}
1: 
1: 	private void removeSyntheticServiceArtefactsAndNotifyListeners(
1: 			RelationshipInfo r) {
1: 		// We need to remove our two relationships and the synthetic
1: 		// component
1: 
1: 		String componentId = constructServiceComponentId(r);
1: 
1: 		// Do the relationships first
1: 		// The registration has type "service registration", and the
1: 		// original provider and name
1: 		String registrationRelationshipId = SERVICE_REGISTRATION + "/"
1: 				+ r.getName() + "/" + r.getProvidedBy().getId();
1: 		RelationshipInfo registrationRelationship = relationships
1: 				.get(registrationRelationshipId);
1: 
1: 		// The consumers have type "service usage", and the
1: 		// original name, and the new provided by
1: 
1: 		String usageRelationshipId = SERVICE_USAGE + "/" + r.getName() + "/"
1: 				+ componentId;
1: 		RelationshipInfo usageRelationship = relationships
1: 				.get(usageRelationshipId);
1: 
1: 		relationships.remove(usageRelationshipId);
1: 		relationships.remove(registrationRelationshipId);
1: 
1: 		// Tell our listeners about the relationships first
1: 
1: 		for (RelationshipInfoListener listener : rlisteners) {
1: 			if (usageRelationship != null) {
1: 				listener.removeRelationship(usageRelationship);
1: 			}
1: 			if (registrationRelationship != null) {
1: 				listener.removeRelationship(registrationRelationship);
1: 			}
1: 
1: 		}
1: 
1: 		ComponentInfo component = components.remove(componentId);
1: 		if (component != null) {
1: 			// Tell our listeners their service component went away
1: 			for (ComponentInfoListener listener : clisteners) {
1: 				listener.removeComponent(component);
1: 			}
1: 		}
1: 	}
1: 
1: 	private void updateSyntheticServiceArtefactsAndNotifyListeners(
1: 			RelationshipInfo r) {
1: 		// We need to update our two relationships and the synthetic
1: 		// component
1: 		// Hopefully the thing which changed won't prevent us
1: 		// from finding our relationship
1: 
1: 		String componentId = constructServiceComponentId(r);
1: 
1: 		// Do the relationships first
1: 		// The registration has type "service registration", and the
1: 		// original provider and name
1: 		String registrationRelationshipId = SERVICE_REGISTRATION + "/"
1: 				+ r.getName() + "/" + r.getProvidedBy().getId();
1: 		RelationshipInfoImpl registrationRelationship = (RelationshipInfoImpl) relationships
1: 				.get(registrationRelationshipId);
1: 		registrationRelationship.setName(r.getName());
1: 		registrationRelationship.setRelationshipAspects(r
1: 				.getRelationshipAspects());
1: 
1: 		// The consumers have type "service usage", and the
1: 		// original name, and the new provided by
1: 
1: 		String usageRelationshipId = SERVICE_USAGE + "/" + r.getName() + "/"
1: 				+ componentId;
1: 		RelationshipInfoImpl usageRelationship = (RelationshipInfoImpl) relationships
1: 				.get(usageRelationshipId);
1: 
1: 		// The consumers may have changed, so we update the usage relationship
1: 		usageRelationship.setConsumedBy(r.getConsumedBy());
1: 		usageRelationship.setName(r.getName());
1: 		usageRelationship.setRelationshipAspects(r.getRelationshipAspects());
1: 
1: 		// Tell our listeners about the relationships first
1: 
1: 		for (RelationshipInfoListener listener : rlisteners) {
1: 			if (usageRelationship != null) {
1: 				listener.updateRelationship(usageRelationship);
1: 			}
1: 			if (registrationRelationship != null) {
1: 				listener.updateRelationship(registrationRelationship);
1: 			}
1: 
1: 		}
1: 
1: 		ComponentInfo component = components.get(componentId);
1: 		if (component != null) {
1: 			// Tell our listeners their service component was updated
1: 			for (ComponentInfoListener listener : clisteners) {
1: 				listener.updateComponent(component);
1: 			}
1: 		}
1: 	}
1: }
============================================================================