1:228f370: package org.apache.aries.application.utils.service;
1:228f370: 
1:228f370: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:228f370: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:228f370: 
1:228f370: import java.util.ArrayList;
1:228f370: import java.util.Collections;
1:228f370: import java.util.HashSet;
1:228f370: import java.util.List;
1:228f370: import java.util.Map;
1:228f370: import java.util.Set;
1:228f370: 
1:228f370: import org.apache.aries.application.modelling.ExportedService;
1:228f370: import org.apache.aries.application.modelling.WrappedServiceMetadata;
1:228f370: 
1:a1623f0: /*
1:a1623f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:a1623f0:  * or more contributor license agreements.  See the NOTICE file
1:a1623f0:  * distributed with this work for additional information
1:a1623f0:  * regarding copyright ownership.  The ASF licenses this file
1:a1623f0:  * to you under the Apache License, Version 2.0 (the
1:a1623f0:  * "License"); you may not use this file except in compliance
1:a1623f0:  * with the License.  You may obtain a copy of the License at
1:a1623f0:  *
1:a1623f0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a1623f0:  *
1:a1623f0:  * Unless required by applicable law or agreed to in writing,
1:a1623f0:  * software distributed under the License is distributed on an
1:a1623f0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a1623f0:  * KIND, either express or implied.  See the License for the
1:a1623f0:  * specific language governing permissions and limitations
1:a1623f0:  * under the License.
1:a1623f0:  */
1:228f370: public class ExportedServiceHelper {
1:228f370: 
1:228f370:   public static String generatePortableExportedServiceToString(ExportedService svc) {
1:228f370:     List<String> interfaces = new ArrayList<String>(svc.getInterfaces());
1:228f370:     Collections.sort(interfaces);
1:228f370:     
1:228f370:     List<String> props = new ArrayList<String>();
1:228f370:     for (Map.Entry<String, Object> entry : svc.getServiceProperties().entrySet()) {
1:228f370:       Object entryValue = entry.getValue();
1:228f370:       String entryText;
1:228f370:       if (entryValue.getClass().isArray()) { 
1:228f370:         // Turn arrays into comma separated Strings
1:228f370:         Object [] entryArray = (Object[]) entryValue;
1:228f370:         StringBuilder sb = new StringBuilder();
1:228f370:         for (Object o: entryArray) { 
1:228f370:           sb.append(String.valueOf(o) + ",");
1:228f370:         }
1:228f370:         sb = sb.deleteCharAt(sb.length()-1);
1:228f370:         entryText = sb.toString();
1:228f370:       } else { 
1:228f370:         entryText = String.valueOf(entryValue);
1:228f370:       }
1:228f370:       props.add ("<entry> key=\"" + entry.getKey() + "\" value=\"" + entryText + "\"/>");
1:228f370:     }
1:228f370:     Collections.sort(props);
1:228f370:     
1:228f370:     StringBuffer buf = new StringBuffer("<service>");
1:228f370:     if(svc.getName() != null) {
1:228f370:       buf.append("<name>" + svc.getName() + "</name>");
1:228f370:     }
1:228f370:     if (interfaces.size() > 0) { 
1:228f370:       buf.append("<interfaces>");
1:228f370:     }
1:228f370:     for (String i : interfaces) { 
1:228f370:       buf.append("<value>" + i + "</value>");
1:228f370:     }
1:228f370:     if (interfaces.size() > 0) { 
1:228f370:       buf.append("</interfaces>");
1:228f370:     }
1:228f370:     if (svc.getServiceProperties().size() > 0) { 
1:228f370:       buf.append("<service-properties>");
1:228f370:     }
1:228f370:     for (String p : props) { 
1:228f370:       buf.append(p);
1:228f370:     }
1:228f370:     if (svc.getServiceProperties().size() > 0) { 
1:228f370:       buf.append("</service-properties>");
1:228f370:     }
1:228f370:     buf.append("</service>");
1:228f370:     return buf.toString();
1:228f370:   }
1:228f370:   
1:228f370: 
1:228f370:   public static boolean portableExportedServiceIdenticalOrDiffersOnlyByName(ExportedService svc, WrappedServiceMetadata wsmi) {
1:228f370:     if (svc.equals(wsmi)) { 
1:228f370:       return true;
1:228f370:     }
1:228f370: 
1:228f370:     Set<String> svcInterfaces = new HashSet<String>(svc.getInterfaces());
1:228f370:     Set<String> cmpInterfaces = new HashSet<String>(wsmi.getInterfaces());
1:228f370:     if (!svcInterfaces.equals(cmpInterfaces)) { 
1:228f370:       return false;
1:228f370:     }
1:228f370:     
1:228f370:     boolean propertiesEqual = svc.getServiceProperties().equals(wsmi.getServiceProperties());
1:228f370:     if (!propertiesEqual) {
1:228f370:       return false;
1:228f370:     }
1:228f370:     return true;
1:228f370:   }
1:228f370:   
1:228f370:   public static boolean portableExportedServiceEquals (ExportedService left, Object right) { 
1:228f370:     // Doubles as a null check
1:228f370:     if (!(right instanceof WrappedServiceMetadata)) { 
1:228f370:       return false;
1:228f370:     }
1:228f370: 
1:228f370:     if (right == left) { 
1:228f370:       return true;
1:228f370:     }
1:228f370:  
1:228f370:     boolean eq = left.toString().equals(right.toString());
1:228f370:     return eq;
1:228f370:   }
1:228f370:   
1:228f370:   public static int portableExportedServiceHashCode(ExportedService svc) {
1:228f370:     int result = svc.toString().hashCode();
1:228f370:     return result;
1:228f370:   }
1:228f370:   
1:228f370:   public static int portableExportedServiceCompareTo(ExportedService svc, WrappedServiceMetadata o) {
1:228f370:     if (o == null) {
1:228f370:       return -1;      // shunt nulls to the end of any lists
1:228f370:     }
1:228f370:     int result = svc.toString().compareTo(o.toString());
1:228f370:     return result;
1:228f370:   }
1:228f370:   
1:228f370: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:a1623f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:228f370
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.utils.service;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.WrappedServiceMetadata;
1: 
1: public class ExportedServiceHelper {
1: 
1:   public static String generatePortableExportedServiceToString(ExportedService svc) {
1:     List<String> interfaces = new ArrayList<String>(svc.getInterfaces());
1:     Collections.sort(interfaces);
1:     
1:     List<String> props = new ArrayList<String>();
1:     for (Map.Entry<String, Object> entry : svc.getServiceProperties().entrySet()) {
1:       Object entryValue = entry.getValue();
1:       String entryText;
1:       if (entryValue.getClass().isArray()) { 
1:         // Turn arrays into comma separated Strings
1:         Object [] entryArray = (Object[]) entryValue;
1:         StringBuilder sb = new StringBuilder();
1:         for (Object o: entryArray) { 
1:           sb.append(String.valueOf(o) + ",");
1:         }
1:         sb = sb.deleteCharAt(sb.length()-1);
1:         entryText = sb.toString();
1:       } else { 
1:         entryText = String.valueOf(entryValue);
1:       }
1:       props.add ("<entry> key=\"" + entry.getKey() + "\" value=\"" + entryText + "\"/>");
1:     }
1:     Collections.sort(props);
1:     
1:     StringBuffer buf = new StringBuffer("<service>");
1:     if(svc.getName() != null) {
1:       buf.append("<name>" + svc.getName() + "</name>");
1:     }
1:     if (interfaces.size() > 0) { 
1:       buf.append("<interfaces>");
1:     }
1:     for (String i : interfaces) { 
1:       buf.append("<value>" + i + "</value>");
1:     }
1:     if (interfaces.size() > 0) { 
1:       buf.append("</interfaces>");
1:     }
1:     if (svc.getServiceProperties().size() > 0) { 
1:       buf.append("<service-properties>");
1:     }
1:     for (String p : props) { 
1:       buf.append(p);
1:     }
1:     if (svc.getServiceProperties().size() > 0) { 
1:       buf.append("</service-properties>");
1:     }
1:     buf.append("</service>");
1:     return buf.toString();
1:   }
1:   
1: 
1:   public static boolean portableExportedServiceIdenticalOrDiffersOnlyByName(ExportedService svc, WrappedServiceMetadata wsmi) {
1:     if (svc.equals(wsmi)) { 
1:       return true;
1:     }
1: 
1:     Set<String> svcInterfaces = new HashSet<String>(svc.getInterfaces());
1:     Set<String> cmpInterfaces = new HashSet<String>(wsmi.getInterfaces());
1:     if (!svcInterfaces.equals(cmpInterfaces)) { 
1:       return false;
1:     }
1:     
1:     boolean propertiesEqual = svc.getServiceProperties().equals(wsmi.getServiceProperties());
1:     if (!propertiesEqual) {
1:       return false;
1:     }
1:     return true;
1:   }
1:   
1:   public static boolean portableExportedServiceEquals (ExportedService left, Object right) { 
1:     // Doubles as a null check
1:     if (!(right instanceof WrappedServiceMetadata)) { 
1:       return false;
1:     }
1: 
1:     if (right == left) { 
1:       return true;
1:     }
1:  
1:     boolean eq = left.toString().equals(right.toString());
1:     return eq;
1:   }
1:   
1:   public static int portableExportedServiceHashCode(ExportedService svc) {
1:     int result = svc.toString().hashCode();
1:     return result;
1:   }
1:   
1:   public static int portableExportedServiceCompareTo(ExportedService svc, WrappedServiceMetadata o) {
1:     if (o == null) {
1:       return -1;      // shunt nulls to the end of any lists
1:     }
1:     int result = svc.toString().compareTo(o.toString());
1:     return result;
1:   }
1:   
1: }
============================================================================