1:29c4662: /*
1:29c4662:  * Licensed to the Apache Software Foundation (ASF) under one
1:29c4662:  * or more contributor license agreements.  See the NOTICE file
1:29c4662:  * distributed with this work for additional information
1:29c4662:  * regarding copyright ownership.  The ASF licenses this file
1:29c4662:  * to you under the Apache License, Version 2.0 (the
1:29c4662:  * "License"); you may not use this file except in compliance
1:29c4662:  * with the License.  You may obtain a copy of the License at
1:29c4662:  *
1:29c4662:  *   http://www.apache.org/licenses/LICENSE-2.0
1:29c4662:  *
1:29c4662:  * Unless required by applicable law or agreed to in writing,
1:29c4662:  * software distributed under the License is distributed on an
1:29c4662:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:29c4662:  * KIND, either express or implied.  See the License for the
1:29c4662:  * specific language governing permissions and limitations
1:29c4662:  * under the License.
1:29c4662:  */
4:29c4662: 
1:29c4662: package org.apache.aries.jndi.url;
1:29c4662: 
1:29c4662: import java.util.ArrayList;
1:29c4662: import java.util.Collections;
1:29c4662: import java.util.Enumeration;
1:29c4662: import java.util.List;
1:29c4662: 
1:29c4662: import javax.naming.CompositeName;
1:29c4662: 
1:29c4662: @SuppressWarnings("serial")
1:29c4662: public abstract class AbstractName extends CompositeName 
1:29c4662: {
1:08490c1:   public AbstractName (String name) { 
1:08490c1:     super(split(name));
1:29c4662:   }
1:29c4662: 
1:08490c1:   protected static Enumeration<String> split(String name)
1:29c4662:   {
1:29c4662:     List<String> elements = new ArrayList<String>();
1:29c4662: 
1:29c4662:     StringBuilder builder = new StringBuilder();
1:29c4662:     
1:29c4662:     int len = name.length();
1:29c4662:     int count = 0;
1:29c4662:     
1:29c4662:     for (int i = 0; i < len; i++) {
1:29c4662:       char c = name.charAt(i);
1:29c4662:       
1:29c4662:       if (c == '/' && count == 0) {
1:29c4662:         elements.add(builder.toString());
1:29c4662:         builder = new StringBuilder();
1:29c4662:         continue;
1:29c4662:       } else if (c == '(') count++;
1:29c4662:       else if (c == ')') count++;
1:29c4662:       
1:29c4662:       builder.append(c);
1:29c4662:     }
1:29c4662:     
1:29c4662:     elements.add(builder.toString());
1:29c4662:     
1:29c4662:     return Collections.enumeration(elements);
1:29c4662:   }
1:29c4662:   
1:29c4662:   public String getScheme()
1:29c4662:   {
1:29c4662:     String part0 = get(0);
1:29c4662:     int index = part0.indexOf(':');
1:29c4662:     if (index > 0) {
1:08490c1:       return part0.substring(0, index);
1:29c4662:     } else {
1:08490c1:       return null;
1:29c4662:     }
1:29c4662:   }
1:29c4662:   
1:29c4662:   public String getSchemePath()
1:29c4662:   {
1:29c4662:     String part0 = get(0);
1:29c4662:     int index = part0.indexOf(':');
1:29c4662:     
2:29c4662:     String result;
1:29c4662:     
1:29c4662:     if (index > 0) {
1:29c4662:       result = part0.substring(index + 1);
1:29c4662:     } else {
2:29c4662:       result = null;
1:29c4662:     }
1:29c4662:     
2:29c4662:     return result;
1:29c4662:   }
1:29c4662: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:08490c1
/////////////////////////////////////////////////////////////////////////
1:   public AbstractName (String name) { 
1:     super(split(name));
1:   protected static Enumeration<String> split(String name)
/////////////////////////////////////////////////////////////////////////
1:       return part0.substring(0, index);
1:       return null;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:29c4662
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.jndi.url;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Enumeration;
1: import java.util.List;
1: 
1: import javax.naming.CompositeName;
1: 
1: @SuppressWarnings("serial")
1: public abstract class AbstractName extends CompositeName 
1: {
0:   public AbstractName (Enumeration<String> e) { 
0:     super(e);
1:   }
1: 
0:   static Enumeration<String> split(String name)
1:   {
1:     List<String> elements = new ArrayList<String>();
1: 
1:     StringBuilder builder = new StringBuilder();
1:     
1:     int len = name.length();
1:     int count = 0;
1:     
1:     for (int i = 0; i < len; i++) {
1:       char c = name.charAt(i);
1:       
1:       if (c == '/' && count == 0) {
1:         elements.add(builder.toString());
1:         builder = new StringBuilder();
1:         continue;
1:       } else if (c == '(') count++;
1:       else if (c == ')') count++;
1:       
1:       builder.append(c);
1:     }
1:     
1:     elements.add(builder.toString());
1:     
1:     return Collections.enumeration(elements);
1:   }
1:   
1:   public String getScheme()
1:   {
1:     String part0 = get(0);
1:     int index = part0.indexOf(':');
1:     
1:     String result;
1:     
1:     if (index > 0) {
0:       result = part0.substring(0, index);
1:     } else {
1:       result = null;
1:     }
1:     
1:     return result;
1:   }
1:   
1:   public String getSchemePath()
1:   {
1:     String part0 = get(0);
1:     int index = part0.indexOf(':');
1:     
1:     String result;
1:     
1:     if (index > 0) {
1:       result = part0.substring(index + 1);
1:     } else {
1:       result = null;
1:     }
1:     
1:     return result;
1:   }
1: }
============================================================================