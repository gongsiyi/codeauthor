1:aeedca8: package org.apache.aries.subsystem.scope.internal;
12:aeedca8: 
1:e9f9bca: import org.apache.aries.subsystem.scope.Scope;
1:e9f9bca: import org.apache.aries.subsystem.scope.impl.ScopeManager;
1:6f4b079: import org.osgi.framework.Bundle;
1:aeedca8: import org.osgi.framework.BundleActivator;
1:aeedca8: import org.osgi.framework.BundleContext;
1:6f4b079: import org.osgi.framework.ServiceFactory;
1:aeedca8: import org.osgi.framework.ServiceRegistration;
1:e9f9bca: import org.osgi.framework.hooks.bundle.EventHook;
1:e9f9bca: import org.osgi.framework.hooks.resolver.ResolverHookFactory;
1:e9f9bca: import org.osgi.framework.hooks.service.EventListenerHook;
1:e9f9bca: 
1:6f4b079: public class Activator implements BundleActivator, ServiceFactory<Scope> {
1:6f4b079: 	private static volatile BundleContext bundleContext;
1:aeedca8: 	
1:6f4b079: 	public static BundleContext getBundleContext() {
1:6f4b079: 		return bundleContext;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private ScopeManager scopeManager;
1:6f4b079: 	private ServiceRegistration<?> scopeManagerReg;
1:6f4b079: 	private ServiceRegistration<Scope> scopeFactoryReg;
1:6f4b079: 	
1:6f4b079: 	public Scope getService(Bundle b, ServiceRegistration<Scope> sr) {
1:6f4b079: 		return scopeManager.getScope(b);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	@SuppressWarnings("unchecked")
1:e9f9bca: 	public void start(BundleContext bundleContext) throws Exception {
1:6f4b079: 		Activator.bundleContext = bundleContext;
1:6f4b079: 		scopeManager = new ScopeManager(bundleContext);
1:6f4b079: 		scopeManagerReg = bundleContext.registerService(
1:6f4b079: 				new String[] {
1:6f4b079: 						EventHook.class.getName(),
1:6f4b079: 						EventListenerHook.class.getName(),
1:6f4b079: 						org.osgi.framework.hooks.bundle.FindHook.class.getName(),
1:6f4b079: 						org.osgi.framework.hooks.service.FindHook.class.getName(),
1:6f4b079: 						ResolverHookFactory.class.getName(),
1:6f4b079: 				},
1:6f4b079: 				scopeManager, 
6:e9f9bca: 				null);
1:6f4b079: 		scopeFactoryReg = (ServiceRegistration<Scope>)bundleContext.registerService(Scope.class.getName(), this, null);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public void stop(BundleContext bc) throws Exception {
1:e9f9bca: 		unregisterQuietly();
1:6f4b079: 		scopeManager.shutdown();
1:6f4b079: 		Activator.bundleContext = null;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public void ungetService(Bundle b, ServiceRegistration<Scope> sr, Scope s) {
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	private void unregisterQuietly() {
1:6f4b079: 		unregisterQuietly(scopeFactoryReg);
1:6f4b079: 		unregisterQuietly(scopeManagerReg);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	private void unregisterQuietly(ServiceRegistration<?> serviceRegistration) {
1:e9f9bca: 		try {
1:e9f9bca: 			serviceRegistration.unregister();
1:e9f9bca: 		}
1:e9f9bca: 		catch (Exception e) {
1:e9f9bca: 			// ignore
1:e9f9bca: 		}
1:e9f9bca: 	}
9:aeedca8: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceFactory;
1: public class Activator implements BundleActivator, ServiceFactory<Scope> {
1: 	private static volatile BundleContext bundleContext;
1: 	public static BundleContext getBundleContext() {
1: 		return bundleContext;
1: 	}
1: 	
1: 	private ScopeManager scopeManager;
1: 	private ServiceRegistration<?> scopeManagerReg;
1: 	private ServiceRegistration<Scope> scopeFactoryReg;
1: 	
1: 	public Scope getService(Bundle b, ServiceRegistration<Scope> sr) {
1: 		return scopeManager.getScope(b);
1: 	}
1: 	
1: 	@SuppressWarnings("unchecked")
1: 		Activator.bundleContext = bundleContext;
1: 		scopeManager = new ScopeManager(bundleContext);
1: 		scopeManagerReg = bundleContext.registerService(
1: 				new String[] {
1: 						EventHook.class.getName(),
1: 						EventListenerHook.class.getName(),
1: 						org.osgi.framework.hooks.bundle.FindHook.class.getName(),
1: 						org.osgi.framework.hooks.service.FindHook.class.getName(),
1: 						ResolverHookFactory.class.getName(),
1: 				},
1: 				scopeManager, 
1: 		scopeFactoryReg = (ServiceRegistration<Scope>)bundleContext.registerService(Scope.class.getName(), this, null);
1: 		scopeManager.shutdown();
1: 		Activator.bundleContext = null;
1: 	}
1: 	
1: 	public void ungetService(Bundle b, ServiceRegistration<Scope> sr, Scope s) {
1: 		unregisterQuietly(scopeFactoryReg);
1: 		unregisterQuietly(scopeManagerReg);
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.Collection;
1: import org.apache.aries.subsystem.scope.Scope;
0: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.apache.aries.subsystem.scope.impl.ScopeManager;
1: import org.osgi.framework.hooks.bundle.EventHook;
1: import org.osgi.framework.hooks.resolver.ResolverHookFactory;
1: import org.osgi.framework.hooks.service.EventListenerHook;
0: 	private final Collection<ServiceRegistration<?>> serviceRegistrations = new ArrayList<ServiceRegistration<?>>();
1: 	
1: 	public void start(BundleContext bundleContext) throws Exception {
0: 		ScopeManager sm = new ScopeManager(bundleContext);
0: 		ServiceRegistration<?> sr = bundleContext.registerService(
0: 				EventHook.class, 
0: 				sm.newEventHook(), 
1: 				null);
0: 		serviceRegistrations.add(sr);
0: 		ScopeUpdate su = sm.getRootScope().newScopeUpdate();
0: 		su.getBundles().addAll(Arrays.asList(bundleContext.getBundles()));
0: 		su.commit();
0: 		sr = bundleContext.registerService(
0: 				org.osgi.framework.hooks.bundle.FindHook.class,
0: 				sm.newBundleFindHook(), 
1: 				null);
0: 		serviceRegistrations.add(sr);
0: 		sr = bundleContext.registerService(
0: 				ResolverHookFactory.class,
0: 				sm.newResolverHookFactory(), 
1: 				null);
0: 		serviceRegistrations.add(sr);
0: 		sr = bundleContext.registerService(
0: 				EventListenerHook.class,
0: 				sm.newEventListenerHook(), 
1: 				null);
0: 		serviceRegistrations.add(sr);
0: 		sr = bundleContext.registerService(
0: 				org.osgi.framework.hooks.service.FindHook.class,
0: 				sm.newServiceFindHook(), 
1: 				null);
0: 		serviceRegistrations.add(sr);
0: 		sr = bundleContext.registerService(
0: 				Scope.class.getName(), 
0: 				sm.newServiceFactory(), 
1: 				null);
0: 		serviceRegistrations.add(sr);
1: 	}
1: 	
1: 	public void stop(BundleContext bc) throws Exception {
1: 		unregisterQuietly();
1: 	}
1: 	
1: 	private void unregisterQuietly() {
0: 		for (ServiceRegistration<?> sr : serviceRegistrations)
0: 			unregisterQuietly(sr);
0: 		serviceRegistrations.clear();
1: 	}
1: 	
1: 	private void unregisterQuietly(ServiceRegistration<?> serviceRegistration) {
1: 		try {
1: 			serviceRegistration.unregister();
1: 		}
1: 		catch (Exception e) {
1: 			// ignore
1: 		}
1: 	}
author:Lin Sun
-------------------------------------------------------------------------------
commit:aeedca8
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
1: package org.apache.aries.subsystem.scope.internal;
1: 
0: import java.util.ArrayList;
0: import java.util.Dictionary;
0: import java.util.List;
1: 
0: import org.apache.aries.subsystem.scope.ScopeAdmin;
0: import org.apache.aries.subsystem.scope.impl.ScopeAdminServiceFactory;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceFactory;
1: import org.osgi.framework.ServiceRegistration;
1: 
0: public class Activator implements BundleActivator {
1: 
0:     private static BundleContext context;
0:     private List<ServiceRegistration> registrations = new ArrayList<ServiceRegistration>();
0:     ScopeAdminServiceFactory scopeAdminFactory;
1: 
0:     static BundleContext getContext() {
0:         return context;
1:     }
1: 
0:     /*
0:      * (non-Javadoc)
0:      * 
0:      * @see
0:      * org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext
0:      * )
0:      */
0:     public void start(BundleContext bundleContext) throws Exception {
0:         Activator.context = bundleContext;
0:         scopeAdminFactory = new ScopeAdminServiceFactory();
0:         scopeAdminFactory.init();
0:         register(ScopeAdmin.class, scopeAdminFactory, null);
1: 
1:     }
1: 
0:     protected <T> void register(Class<T> clazz, T service, Dictionary props) {
0:         registrations.add(context.registerService(clazz.getName(), service,
0:                 props));
1:     }
1: 
0:     protected <T> void register(Class<T> clazz, ServiceFactory factory,
0:             Dictionary props) {
0:         registrations.add(context.registerService(clazz.getName(), factory,
0:                 props));
1:     }
1: 
0:     /*
0:      * (non-Javadoc)
0:      * 
0:      * @see
0:      * org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
0:      */
0:     public void stop(BundleContext bundleContext) throws Exception {
0:         Activator.context = null;
0:         for (ServiceRegistration r : registrations) {
0:             try {
0:                 r.unregister();
0:             } catch (Exception e) {
0:                 // LOGGER.warn("Scope Activator shut down", e);
1:             }
1:         }
1: 
0:         scopeAdminFactory.destroy();
1:     }
1: 
0:     public static BundleContext getBundleContext() {
0:         return context;
1:     }
1: 
1: }
============================================================================