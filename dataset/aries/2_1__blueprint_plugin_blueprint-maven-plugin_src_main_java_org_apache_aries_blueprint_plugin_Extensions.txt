1:c201f83: /**
1:c201f83:  * Licensed to the Apache Software Foundation (ASF) under one
1:c201f83:  * or more contributor license agreements.  See the NOTICE file
1:c201f83:  * distributed with this work for additional information
1:c201f83:  * regarding copyright ownership.  The ASF licenses this file
1:c201f83:  * to you under the Apache License, Version 2.0 (the
1:c201f83:  * "License"); you may not use this file except in compliance
1:c201f83:  * with the License.  You may obtain a copy of the License at
1:868c96f:  * <p>
1:868c96f:  * http://www.apache.org/licenses/LICENSE-2.0
1:868c96f:  * <p>
1:c201f83:  * Unless required by applicable law or agreed to in writing,
1:c201f83:  * software distributed under the License is distributed on an
1:c201f83:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c201f83:  * KIND, either express or implied.  See the License for the
1:c201f83:  * specific language governing permissions and limitations
1:c201f83:  * under the License.
1:c201f83:  */
1:c201f83: package org.apache.aries.blueprint.plugin;
4:c201f83: 
1:a04c623: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1:a2ed671: import org.apache.aries.blueprint.plugin.spi.BeanFinder;
1:aaf182f: import org.apache.aries.blueprint.plugin.spi.ContextInitializationHandler;
1:868c96f: import org.apache.aries.blueprint.plugin.spi.CustomDependencyAnnotationHandler;
1:a2ed671: import org.apache.aries.blueprint.plugin.spi.FactoryMethodFinder;
1:64f241a: import org.apache.aries.blueprint.plugin.spi.FieldAnnotationHandler;
1:c201f83: import org.apache.aries.blueprint.plugin.spi.InjectLikeHandler;
1:a04c623: import org.apache.aries.blueprint.plugin.spi.MethodAnnotationHandler;
1:c201f83: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
1:6c346ba: import org.apache.aries.blueprint.plugin.spi.QualifingAnnotationFinder;
1:c201f83: import org.apache.aries.blueprint.plugin.spi.ValueInjectionHandler;
1:c201f83: 
1:c201f83: import java.lang.annotation.Annotation;
1:c201f83: import java.util.ArrayList;
1:c201f83: import java.util.List;
1:c201f83: import java.util.ServiceLoader;
1:c201f83: 
1:c201f83: public class Extensions {
1:c201f83:     public static final List<Class<? extends Annotation>> beanMarkingAnnotationClasses = new ArrayList<>();
1:c201f83:     public static final List<Class<? extends Annotation>> singletons = new ArrayList<>();
1:c201f83:     public static final List<InjectLikeHandler<? extends Annotation>> beanInjectLikeHandlers = new ArrayList<>();
1:c201f83:     public static final List<NamedLikeHandler> namedLikeHandlers = new ArrayList<>();
1:c201f83:     public static final List<ValueInjectionHandler<? extends Annotation>> valueInjectionHandlers = new ArrayList<>();
1:a04c623:     public static final List<BeanAnnotationHandler<? extends Annotation>> BEAN_ANNOTATION_HANDLERs = new ArrayList<>();
1:868c96f:     public static final List<CustomDependencyAnnotationHandler<? extends Annotation>> customDependencyAnnotationHandlers = new ArrayList<>();
1:a04c623:     public static final List<MethodAnnotationHandler<? extends Annotation>> methodAnnotationHandlers = new ArrayList<>();
1:64f241a:     public static final List<FieldAnnotationHandler<? extends Annotation>> fieldAnnotationHandlers = new ArrayList<>();
1:a2ed671:     public static final List<Class<? extends Annotation>> factoryMethodAnnotationClasses = new ArrayList<>();
1:6c346ba:     public static final List<Class<? extends Annotation>> qualifingAnnotationClasses = new ArrayList<>();
1:aaf182f:     public static final List<ContextInitializationHandler> contextInitializationHandlers = new ArrayList<>();
1:c201f83: 
1:c201f83:     static {
1:c201f83:         for (BeanFinder beanFinder : ServiceLoader.load(BeanFinder.class)) {
1:fc7ae19:             beanMarkingAnnotationClasses.add(beanFinder.getAnnotation());
1:c201f83:             if (beanFinder.isSingleton()) {
1:fc7ae19:                 singletons.add(beanFinder.getAnnotation());
4:c201f83:             }
1:c201f83:         }
1:868c96f: 
1:c201f83:         for (InjectLikeHandler<? extends Annotation> injectLikeHandler : ServiceLoader.load(InjectLikeHandler.class)) {
1:c201f83:             beanInjectLikeHandlers.add(injectLikeHandler);
1:c201f83:         }
1:c201f83: 
1:c201f83:         for (NamedLikeHandler namedLikeHandler : ServiceLoader.load(NamedLikeHandler.class)) {
1:c201f83:             namedLikeHandlers.add(namedLikeHandler);
1:c201f83:         }
1:c201f83: 
1:c201f83:         for (ValueInjectionHandler<? extends Annotation> valueInjectionHandler : ServiceLoader.load(ValueInjectionHandler.class)) {
1:c201f83:             valueInjectionHandlers.add(valueInjectionHandler);
1:868c96f:         }
1:868c96f: 
1:a04c623:         for (BeanAnnotationHandler<? extends Annotation> beanAnnotationHandler : ServiceLoader.load(BeanAnnotationHandler.class)) {
1:a04c623:             BEAN_ANNOTATION_HANDLERs.add(beanAnnotationHandler);
1:868c96f:         }
1:868c96f: 
1:868c96f:         for (CustomDependencyAnnotationHandler<? extends Annotation> customDependencyAnnotationHandler : ServiceLoader.load(CustomDependencyAnnotationHandler.class)) {
1:868c96f:             customDependencyAnnotationHandlers.add(customDependencyAnnotationHandler);
1:868c96f:         }
1:a04c623: 
1:a04c623:         for (MethodAnnotationHandler<? extends Annotation> methodAnnotationHandler : ServiceLoader.load(MethodAnnotationHandler.class)) {
1:a04c623:             methodAnnotationHandlers.add(methodAnnotationHandler);
1:a04c623:         }
1:64f241a: 
1:64f241a:         for (FieldAnnotationHandler<? extends Annotation> fieldAnnotationHandler : ServiceLoader.load(FieldAnnotationHandler.class)) {
1:64f241a:             fieldAnnotationHandlers.add(fieldAnnotationHandler);
1:64f241a:         }
1:a2ed671: 
1:a2ed671:         for (FactoryMethodFinder<? extends Annotation> factoryMethodFinder : ServiceLoader.load(FactoryMethodFinder.class)) {
1:fc7ae19:             factoryMethodAnnotationClasses.add((Class<? extends Annotation>) factoryMethodFinder.getAnnotation());
1:a2ed671:         }
1:6c346ba: 
1:6c346ba:         for (QualifingAnnotationFinder<? extends Annotation> qualifingAnnotationFinder : ServiceLoader.load(QualifingAnnotationFinder.class)) {
1:6c346ba:             qualifingAnnotationClasses.add((Class<? extends Annotation>) qualifingAnnotationFinder.getAnnotation());
1:6c346ba:         }
1:aaf182f: 
1:aaf182f:         for (ContextInitializationHandler contextInitializationHandler : ServiceLoader.load(ContextInitializationHandler.class)) {
1:aaf182f:             contextInitializationHandlers.add(contextInitializationHandler);
1:aaf182f:         }
1:c201f83:     }
1:c201f83: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:fc7ae19
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             beanMarkingAnnotationClasses.add(beanFinder.getAnnotation());
1:                 singletons.add(beanFinder.getAnnotation());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             factoryMethodAnnotationClasses.add((Class<? extends Annotation>) factoryMethodFinder.getAnnotation());
commit:aaf182f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.ContextInitializationHandler;
/////////////////////////////////////////////////////////////////////////
1:     public static final List<ContextInitializationHandler> contextInitializationHandlers = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 
1:         for (ContextInitializationHandler contextInitializationHandler : ServiceLoader.load(ContextInitializationHandler.class)) {
1:             contextInitializationHandlers.add(contextInitializationHandler);
1:         }
commit:6c346ba
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.QualifingAnnotationFinder;
/////////////////////////////////////////////////////////////////////////
1:     public static final List<Class<? extends Annotation>> qualifingAnnotationClasses = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 
1:         for (QualifingAnnotationFinder<? extends Annotation> qualifingAnnotationFinder : ServiceLoader.load(QualifingAnnotationFinder.class)) {
1:             qualifingAnnotationClasses.add((Class<? extends Annotation>) qualifingAnnotationFinder.getAnnotation());
1:         }
commit:a2ed671
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.BeanFinder;
1: import org.apache.aries.blueprint.plugin.spi.FactoryMethodFinder;
/////////////////////////////////////////////////////////////////////////
1:     public static final List<Class<? extends Annotation>> factoryMethodAnnotationClasses = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 
1:         for (FactoryMethodFinder<? extends Annotation> factoryMethodFinder : ServiceLoader.load(FactoryMethodFinder.class)) {
0:             factoryMethodAnnotationClasses.add((Class<? extends Annotation>) factoryMethodFinder.factoryMethodAnnotation());
1:         }
commit:64f241a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.FieldAnnotationHandler;
/////////////////////////////////////////////////////////////////////////
1:     public static final List<FieldAnnotationHandler<? extends Annotation>> fieldAnnotationHandlers = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 
1:         for (FieldAnnotationHandler<? extends Annotation> fieldAnnotationHandler : ServiceLoader.load(FieldAnnotationHandler.class)) {
1:             fieldAnnotationHandlers.add(fieldAnnotationHandler);
1:         }
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a04c623
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1: import org.apache.aries.blueprint.plugin.spi.MethodAnnotationHandler;
/////////////////////////////////////////////////////////////////////////
1:     public static final List<BeanAnnotationHandler<? extends Annotation>> BEAN_ANNOTATION_HANDLERs = new ArrayList<>();
1:     public static final List<MethodAnnotationHandler<? extends Annotation>> methodAnnotationHandlers = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (BeanAnnotationHandler<? extends Annotation> beanAnnotationHandler : ServiceLoader.load(BeanAnnotationHandler.class)) {
1:             BEAN_ANNOTATION_HANDLERs.add(beanAnnotationHandler);
/////////////////////////////////////////////////////////////////////////
1: 
1:         for (MethodAnnotationHandler<? extends Annotation> methodAnnotationHandler : ServiceLoader.load(MethodAnnotationHandler.class)) {
1:             methodAnnotationHandlers.add(methodAnnotationHandler);
1:         }
commit:868c96f
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.spi.CustomBeanAnnotationHandler;
1: import org.apache.aries.blueprint.plugin.spi.CustomDependencyAnnotationHandler;
0: import org.apache.aries.blueprint.plugin.spi.CustomFactoryMethodAnnotationHandler;
/////////////////////////////////////////////////////////////////////////
0:     public static final List<CustomBeanAnnotationHandler<? extends Annotation>> customBeanAnnotationHandlers = new ArrayList<>();
0:     public static final List<CustomFactoryMethodAnnotationHandler<? extends Annotation>> customFactoryMethodAnnotationHandlers = new ArrayList<>();
1:     public static final List<CustomDependencyAnnotationHandler<? extends Annotation>> customDependencyAnnotationHandlers = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 
0:         for (CustomBeanAnnotationHandler<? extends Annotation> customBeanAnnotationHandler : ServiceLoader.load(CustomBeanAnnotationHandler.class)) {
0:             customBeanAnnotationHandlers.add(customBeanAnnotationHandler);
1:         }
1: 
0:         for (CustomFactoryMethodAnnotationHandler<? extends Annotation> customFactoryMethodAnnotationHandler : ServiceLoader.load(CustomFactoryMethodAnnotationHandler.class)) {
0:             customFactoryMethodAnnotationHandlers.add(customFactoryMethodAnnotationHandler);
1:         }
1: 
1:         for (CustomDependencyAnnotationHandler<? extends Annotation> customDependencyAnnotationHandler : ServiceLoader.load(CustomDependencyAnnotationHandler.class)) {
1:             customDependencyAnnotationHandlers.add(customDependencyAnnotationHandler);
1:         }
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin;
1: 
0: import org.apache.aries.blueprint.plugin.model.AbstractTransactionalFactory;
0: import org.apache.aries.blueprint.plugin.model.ExtensionTransactionFactory;
0: import org.apache.aries.blueprint.plugin.spi.BeanAttributesResolver;
0: import org.apache.aries.blueprint.plugin.spi.BeanFinder;
1: import org.apache.aries.blueprint.plugin.spi.InjectLikeHandler;
1: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
0: import org.apache.aries.blueprint.plugin.spi.TransactionalFactory;
1: import org.apache.aries.blueprint.plugin.spi.ValueInjectionHandler;
1: 
1: import java.lang.annotation.Annotation;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.ServiceLoader;
1: 
1: public class Extensions {
1:     public static final List<Class<? extends Annotation>> beanMarkingAnnotationClasses = new ArrayList<>();
1:     public static final List<Class<? extends Annotation>> singletons = new ArrayList<>();
0:     public static final List<AbstractTransactionalFactory> transactionalFactories = new ArrayList<>();
0:     public static final List<BeanAttributesResolver> beanAttributesResolvers = new ArrayList<>();
1:     public static final List<InjectLikeHandler<? extends Annotation>> beanInjectLikeHandlers = new ArrayList<>();
1:     public static final List<NamedLikeHandler> namedLikeHandlers = new ArrayList<>();
1:     public static final List<ValueInjectionHandler<? extends Annotation>> valueInjectionHandlers = new ArrayList<>();
1: 
1:     static {
1:         for (BeanFinder beanFinder : ServiceLoader.load(BeanFinder.class)) {
0:             beanMarkingAnnotationClasses.add(beanFinder.beanAnnotation());
1:             if (beanFinder.isSingleton()) {
0:                 singletons.add(beanFinder.beanAnnotation());
1:             }
1:         }
1: 
0:         for (TransactionalFactory transactionalFactory : ServiceLoader.load(TransactionalFactory.class)) {
0:             transactionalFactories.add(new ExtensionTransactionFactory(transactionalFactory));
1:         }
1: 
0:         for (BeanAttributesResolver beanAttributesResolverExtenstion : ServiceLoader.load(BeanAttributesResolver.class)) {
0:             beanAttributesResolvers.add(beanAttributesResolverExtenstion);
1:         }
1: 
1:         for (InjectLikeHandler<? extends Annotation> injectLikeHandler : ServiceLoader.load(InjectLikeHandler.class)) {
1:             beanInjectLikeHandlers.add(injectLikeHandler);
1:         }
1: 
1:         for (NamedLikeHandler namedLikeHandler : ServiceLoader.load(NamedLikeHandler.class)) {
1:             namedLikeHandlers.add(namedLikeHandler);
1:         }
1: 
1:         for (ValueInjectionHandler<? extends Annotation> valueInjectionHandler : ServiceLoader.load(ValueInjectionHandler.class)) {
1:             valueInjectionHandlers.add(valueInjectionHandler);
1:         }
1:     }
1: }
============================================================================