1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
3:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
6:fdf3952: 
1:fdf3952: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleIds;
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.toLong;
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.toPrimitive;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
1:282cfcd: import static org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES;
1:fdf3952: 
1:282cfcd: import java.util.ArrayList;
1:c8116cd: import java.util.Collection;
1:fdf3952: import java.util.HashMap;
1:282cfcd: import java.util.List;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:282cfcd: import javax.management.openmbean.TabularData;
1:282cfcd: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:282cfcd: import org.osgi.jmx.JmxConstants;
1:fdf3952: import org.osgi.jmx.framework.ServiceStateMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>ServiceData</tt> represents Service Type @see {@link ServiceStateMBean#SERVICE_TYPE}. It is a codec for the
1:fdf3952:  * <code>CompositeData</code> representing an OSGi <code>ServiceReference</code>.
1:fdf3952:  * </p>
1:cbbcd95:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ServiceData {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#IDENTIFIER_ITEM
1:fdf3952:      */
1:fdf3952:     private long serviceId;
1:cbbcd95: 
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#BUNDLE_IDENTIFIER_ITEM
1:fdf3952:      */
1:fdf3952:     private long bundleId;
1:cbbcd95: 
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#OBJECT_CLASS_ITEM
1:fdf3952:      */
1:fdf3952:     private String[] serviceInterfaces;
1:cbbcd95: 
1:282cfcd:     /**
1:282cfcd:      * @see ServiceStateMBean#PROPERTIES_ITEM
1:282cfcd:      */
1:282cfcd:     private List<PropertyData<? extends Object>> properties = new ArrayList<PropertyData<? extends Object>>();
1:cbbcd95: 
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#USING_BUNDLES_ITEM
1:fdf3952:      */
1:fdf3952:     private long[] usingBundles;
1:fdf3952: 
1:fdf3952:     private ServiceData() {
1:fdf3952:         super();
1:fdf3952:     }
1:fdf3952: 
1:282cfcd:     public ServiceData(ServiceReference<?> serviceReference) throws IllegalArgumentException {
1:fdf3952:         if (serviceReference == null) {
1:fdf3952:             throw new IllegalArgumentException("Argument serviceReference cannot be null");
1:fdf3952:         }
1:fdf3952:         this.serviceId = (Long) serviceReference.getProperty(Constants.SERVICE_ID);
1:fdf3952:         this.bundleId = serviceReference.getBundle().getBundleId();
1:fdf3952:         this.serviceInterfaces = (String[]) serviceReference.getProperty(Constants.OBJECTCLASS);
1:fdf3952:         this.usingBundles = getBundleIds(serviceReference.getUsingBundles());
1:282cfcd:         for (String propertyKey: serviceReference.getPropertyKeys()) {
1:282cfcd:             this.properties.add(PropertyData.newInstance(propertyKey, serviceReference.getProperty(propertyKey)));
1:282cfcd:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Returns CompositeData representing a ServiceReference typed by {@link ServiceStateMBean#SERVICE_TYPE}.
1:fdf3952:      * @return
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:c8116cd:         return toCompositeData(ServiceStateMBean.SERVICE_TYPE.keySet());
1:c8116cd:     }
1:c8116cd: 
1:c8116cd:     public CompositeData toCompositeData(Collection<String> itemNames) {
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:c8116cd: 
1:fdf3952:         items.put(IDENTIFIER, this.serviceId);
1:c8116cd: 
1:c8116cd:         if (itemNames.contains(BUNDLE_IDENTIFIER))
1:c8116cd:             items.put(BUNDLE_IDENTIFIER, this.bundleId);
1:c8116cd: 
1:c8116cd:         if (itemNames.contains(OBJECT_CLASS))
1:c8116cd:             items.put(OBJECT_CLASS, this.serviceInterfaces);
1:c8116cd: 
1:282cfcd:         TabularData propertiesTable = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:282cfcd:         for (PropertyData<? extends Object> propertyData : this.properties) {
1:282cfcd:             propertiesTable.put(propertyData.toCompositeData());
1:282cfcd:         }
1:282cfcd:         items.put(PROPERTIES, propertiesTable);
1:282cfcd: 
1:c8116cd: 
1:c8116cd:         if (itemNames.contains(USING_BUNDLES))
1:c8116cd:             items.put(USING_BUNDLES, toLong(this.usingBundles));
1:c8116cd: 
1:c8116cd:         String[] allItemNames = SERVICE_TYPE.keySet().toArray(new String [] {});
1:c8116cd:         Object[] itemValues = new Object[allItemNames.length];
1:c8116cd:         for (int i=0; i < allItemNames.length; i++) {
1:c8116cd:             itemValues[i] = items.get(allItemNames[i]);
1:c8116cd:         }
1:c8116cd: 
1:fdf3952:         try {
1:c8116cd:             return new CompositeDataSupport(SERVICE_TYPE, allItemNames, itemValues);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Failed to create CompositeData for ServiceReference with "
1:fdf3952:                     + Constants.SERVICE_ID + " [" + this.serviceId + "]", e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs a <code>ServiceData</code> object from the given <code>CompositeData</code>
1:cbbcd95:      *
1:fdf3952:      * @param compositeData
1:fdf3952:      * @return
1:fdf3952:      * @throws IlleglArugmentException
1:fdf3952:      *             if compositeData is null or not of type {@link ServiceStateMBean#SERVICE_TYPE}.
1:fdf3952:      */
1:fdf3952:     public static ServiceData from(CompositeData compositeData) {
1:fdf3952:         if (compositeData == null) {
1:fdf3952:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:fdf3952:         }
1:fdf3952:         if (!compositeData.getCompositeType().equals(SERVICE_TYPE)) {
1:fdf3952:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:fdf3952:         }
1:fdf3952:         ServiceData serviceData = new ServiceData();
1:fdf3952:         serviceData.serviceId = (Long) compositeData.get(IDENTIFIER);
1:fdf3952:         serviceData.bundleId = (Long) compositeData.get(BUNDLE_IDENTIFIER);
1:fdf3952:         serviceData.serviceInterfaces = (String[]) compositeData.get(OBJECT_CLASS);
1:fdf3952:         serviceData.usingBundles = toPrimitive((Long[]) compositeData.get(USING_BUNDLES));
1:282cfcd:         TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
1:282cfcd:         Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
1:282cfcd:         for (CompositeData propertyRow: propertyData) {
1:282cfcd:             serviceData.properties.add(PropertyData.from(propertyRow));
1:282cfcd:         }
1:fdf3952:         return serviceData;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long getServiceId() {
1:fdf3952:         return serviceId;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long getBundleId() {
1:fdf3952:         return bundleId;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String[] getServiceInterfaces() {
1:fdf3952:         return serviceInterfaces;
1:fdf3952:     }
1:fdf3952: 
1:282cfcd:     public List<PropertyData<? extends Object>> getProperties() {
1:282cfcd:         return properties;
1:282cfcd:     }
1:fdf3952: 
1:fdf3952:     public long[] getUsingBundles() {
1:fdf3952:         return usingBundles;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:282cfcd
/////////////////////////////////////////////////////////////////////////
1: import static org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES;
1: import java.util.ArrayList;
1: import java.util.List;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: import org.osgi.jmx.JmxConstants;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see ServiceStateMBean#PROPERTIES_ITEM
1:      */
1:     private List<PropertyData<? extends Object>> properties = new ArrayList<PropertyData<? extends Object>>();
/////////////////////////////////////////////////////////////////////////
1:     public ServiceData(ServiceReference<?> serviceReference) throws IllegalArgumentException {
/////////////////////////////////////////////////////////////////////////
1:         for (String propertyKey: serviceReference.getPropertyKeys()) {
1:             this.properties.add(PropertyData.newInstance(propertyKey, serviceReference.getProperty(propertyKey)));
1:         }
/////////////////////////////////////////////////////////////////////////
1:         TabularData propertiesTable = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:         for (PropertyData<? extends Object> propertyData : this.properties) {
1:             propertiesTable.put(propertyData.toCompositeData());
1:         }
1:         items.put(PROPERTIES, propertiesTable);
1: 
/////////////////////////////////////////////////////////////////////////
1:         TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
1:         Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
1:         for (CompositeData propertyRow: propertyData) {
1:             serviceData.properties.add(PropertyData.from(propertyRow));
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public List<PropertyData<? extends Object>> getProperties() {
1:         return properties;
1:     }
commit:c8116cd
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:         return toCompositeData(ServiceStateMBean.SERVICE_TYPE.keySet());
1:     }
1: 
1:     public CompositeData toCompositeData(Collection<String> itemNames) {
1: 
1: 
1:         if (itemNames.contains(BUNDLE_IDENTIFIER))
1:             items.put(BUNDLE_IDENTIFIER, this.bundleId);
1: 
1:         if (itemNames.contains(OBJECT_CLASS))
1:             items.put(OBJECT_CLASS, this.serviceInterfaces);
1: 
1: 
1:         if (itemNames.contains(USING_BUNDLES))
1:             items.put(USING_BUNDLES, toLong(this.usingBundles));
1: 
1:         String[] allItemNames = SERVICE_TYPE.keySet().toArray(new String [] {});
1:         Object[] itemValues = new Object[allItemNames.length];
1:         for (int i=0; i < allItemNames.length; i++) {
1:             itemValues[i] = items.get(allItemNames[i]);
1:         }
1: 
1:             return new CompositeDataSupport(SERVICE_TYPE, allItemNames, itemValues);
commit:cbbcd95
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.apache.aries.jmx.util.FrameworkUtils.getBundleIds;
1: import static org.apache.aries.jmx.util.TypeUtils.toLong;
1: import static org.apache.aries.jmx.util.TypeUtils.toPrimitive;
1: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
1: import static org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER;
1: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
1: import static org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE;
1: import static org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.jmx.framework.ServiceStateMBean;
1: 
1: /**
1:  * <p>
1:  * <tt>ServiceData</tt> represents Service Type @see {@link ServiceStateMBean#SERVICE_TYPE}. It is a codec for the
1:  * <code>CompositeData</code> representing an OSGi <code>ServiceReference</code>.
1:  * </p>
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class ServiceData {
1: 
1:     /**
1:      * @see ServiceStateMBean#IDENTIFIER_ITEM
1:      */
1:     private long serviceId;
1:     
1:     /**
1:      * @see ServiceStateMBean#BUNDLE_IDENTIFIER_ITEM
1:      */
1:     private long bundleId;
1:     
1:     /**
1:      * @see ServiceStateMBean#OBJECT_CLASS_ITEM
1:      */
1:     private String[] serviceInterfaces;
1:     
0:     // keep properties for next version of the spec
0:     ///**
0:     // * @see ServiceStateMBean#PROPERTIES_ITEM
0:     // */
0:     //private List<PropertyData<? extends Object>> properties = new ArrayList<PropertyData<? extends Object>>();
1:     
1:     /**
1:      * @see ServiceStateMBean#USING_BUNDLES_ITEM
1:      */
1:     private long[] usingBundles;
1: 
1:     private ServiceData() {
1:         super();
1:     }
1: 
0:     public ServiceData(ServiceReference serviceReference) throws IllegalArgumentException {
1:         if (serviceReference == null) {
1:             throw new IllegalArgumentException("Argument serviceReference cannot be null");
1:         }
1:         this.serviceId = (Long) serviceReference.getProperty(Constants.SERVICE_ID);
1:         this.bundleId = serviceReference.getBundle().getBundleId();
1:         this.serviceInterfaces = (String[]) serviceReference.getProperty(Constants.OBJECTCLASS);
1:         this.usingBundles = getBundleIds(serviceReference.getUsingBundles());
0:         //for (String propertyKey: serviceReference.getPropertyKeys()) {
0:         //    this.properties.add(PropertyData.newInstance(propertyKey, serviceReference.getProperty(propertyKey)));
0:         //}
1:     }
1: 
1:     /**
1:      * Returns CompositeData representing a ServiceReference typed by {@link ServiceStateMBean#SERVICE_TYPE}.
1:      * @return
1:      */
1:     public CompositeData toCompositeData() {
0:         CompositeData result = null;
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(IDENTIFIER, this.serviceId);
0:         items.put(BUNDLE_IDENTIFIER, this.bundleId);
0:         items.put(OBJECT_CLASS, this.serviceInterfaces);
0:         //TabularData propertiesTable = new TabularDataSupport(PROPERTIES_TYPE);
0:         //for (PropertyData<? extends Object> propertyData : this.properties) {
0:         //    propertiesTable.put(propertyData.toCompositeData());
0:         //}
0:         // items.put(PROPERTIES, propertiesTable);
0:         items.put(USING_BUNDLES, toLong(this.usingBundles));
1:         try {
0:             result = new CompositeDataSupport(SERVICE_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Failed to create CompositeData for ServiceReference with "
1:                     + Constants.SERVICE_ID + " [" + this.serviceId + "]", e);
1:         }
0:         return result;
1:     }
1: 
1:     /**
1:      * Constructs a <code>ServiceData</code> object from the given <code>CompositeData</code>
1:      * 
1:      * @param compositeData
1:      * @return
1:      * @throws IlleglArugmentException
1:      *             if compositeData is null or not of type {@link ServiceStateMBean#SERVICE_TYPE}.
1:      */
1:     public static ServiceData from(CompositeData compositeData) {
1:         if (compositeData == null) {
1:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:         }
1:         if (!compositeData.getCompositeType().equals(SERVICE_TYPE)) {
1:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:         }
1:         ServiceData serviceData = new ServiceData();
1:         serviceData.serviceId = (Long) compositeData.get(IDENTIFIER);
1:         serviceData.bundleId = (Long) compositeData.get(BUNDLE_IDENTIFIER);
1:         serviceData.serviceInterfaces = (String[]) compositeData.get(OBJECT_CLASS);
1:         serviceData.usingBundles = toPrimitive((Long[]) compositeData.get(USING_BUNDLES));
0:         // TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
0:         // Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
0:         // for (CompositeData propertyRow: propertyData) {
0:         //     serviceData.properties.add(PropertyData.from(propertyRow));
0:         // }
1:         return serviceData;
1:     }
1: 
1:     public long getServiceId() {
1:         return serviceId;
1:     }
1: 
1:     public long getBundleId() {
1:         return bundleId;
1:     }
1: 
1:     public String[] getServiceInterfaces() {
1:         return serviceInterfaces;
1:     }
1: 
0:     //public List<PropertyData<? extends Object>> getProperties() {
0:     //    return properties;
0:     //}
1: 
1:     public long[] getUsingBundles() {
1:         return usingBundles;
1:     }
1: 
1: }
============================================================================