1:02735d7: /**
1:02735d7:  * Licensed to the Apache Software Foundation (ASF) under one
1:02735d7:  * or more contributor license agreements.  See the NOTICE file
1:02735d7:  * distributed with this work for additional information
1:02735d7:  * regarding copyright ownership.  The ASF licenses this file
1:02735d7:  * to you under the Apache License, Version 2.0 (the
1:02735d7:  * "License"); you may not use this file except in compliance
1:02735d7:  * with the License.  You may obtain a copy of the License at
1:02735d7:  *
1:02735d7:  *  http://www.apache.org/licenses/LICENSE-2.0
1:02735d7:  *
1:02735d7:  * Unless required by applicable law or agreed to in writing,
1:02735d7:  * software distributed under the License is distributed on an
1:02735d7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:02735d7:  * KIND, either express or implied.  See the License for the
1:02735d7:  * specific language governing permissions and limitations
1:02735d7:  * under the License.
1:02735d7:  */
1:02735d7: 
1:02735d7: package org.apache.aries.ant.taskdefs;
1:02735d7: 
1:02735d7: import java.io.ByteArrayInputStream;
1:02735d7: import java.io.ByteArrayOutputStream;
1:02735d7: import java.io.File;
1:02735d7: import java.io.IOException;
1:02735d7: import java.io.OutputStreamWriter;
1:02735d7: import java.io.PrintWriter;
1:02735d7: import java.util.jar.Attributes;
1:02735d7: import java.util.jar.JarFile;
1:02735d7: import java.util.jar.Manifest;
1:02735d7: 
1:02735d7: import org.apache.tools.ant.BuildException;
1:02735d7: import org.apache.tools.ant.Project;
1:02735d7: import org.apache.tools.ant.taskdefs.Jar;
1:02735d7: import org.apache.tools.ant.taskdefs.Zip;
1:02735d7: import org.apache.tools.ant.types.Resource;
1:02735d7: import org.apache.tools.ant.types.ZipFileSet;
1:02735d7: import org.apache.tools.ant.util.FileUtils;
1:02735d7: import org.apache.tools.zip.ZipOutputStream;
1:02735d7: 
1:02735d7: /**
1:02735d7:  * The Ant task that will build the Enterprise Subsystem Archive, this task is
1:02735d7:  * modeled based on the Ant {@link Jar} task
1:02735d7:  * 
1:02735d7:  * @version $Id: $
1:02735d7:  */
1:02735d7: public class EsaTask extends Zip {
1:02735d7: 
1:02735d7: 	/* name of the subsystem */
1:02735d7: 	private String symbolicName;
1:02735d7: 
1:02735d7: 	/* name of the subsystem */
1:02735d7: 	private String name;
1:02735d7: 
1:02735d7: 	/* subsystem description */
1:02735d7: 	private String description;
1:02735d7: 
1:02735d7: 	/* version of the subsystem */
1:02735d7: 	private String version;
1:02735d7: 
1:02735d7: 	/* subsystem type */
1:02735d7: 	private String type = Constants.FEATURE_TYPE;
1:02735d7: 
1:02735d7: 	/* the file holder of the esa manifest */
1:02735d7: 	private File manifestFile;
1:02735d7: 
1:02735d7: 	/* Flag to indicate whether to generate manifest */
1:02735d7: 	protected boolean generateManifest;
1:02735d7: 
1:02735d7: 	/* Used for dry runs */
1:02735d7: 	protected boolean skipWriting = false;
1:02735d7: 
1:02735d7: 	/* Used build the subsystem content header */
1:02735d7: 	private StringBuilder subsystemContent = new StringBuilder(
1:02735d7: 		Constants.SUBSYSTEM_CONTENT + ":");
1:02735d7: 
1:02735d7: 	public EsaTask() {
1:02735d7: 
1:02735d7: 		super();
1:02735d7: 		archiveType = "esa";
1:02735d7: 		setEncoding("UTF8");
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	/**
1:02735d7: 	 * @param symbolicName
1:02735d7: 	 *            the symbolicName to set
1:02735d7: 	 */
1:02735d7: 	public void setSymbolicName(String symbolicName) {
1:02735d7: 
1:02735d7: 		this.symbolicName = symbolicName;
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	/**
1:02735d7: 	 * @param name
1:02735d7: 	 *            the name to set
1:02735d7: 	 */
1:02735d7: 	public void setName(String name) {
1:02735d7: 
1:02735d7: 		this.name = name;
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	/**
1:02735d7: 	 * @param version
1:02735d7: 	 *            the version to set
1:02735d7: 	 */
1:02735d7: 	public void setVersion(String subsystemVersion) {
1:02735d7: 
1:02735d7: 		this.version = subsystemVersion;
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	/**
1:02735d7: 	 * @param type
1:02735d7: 	 *            the type to set
1:02735d7: 	 */
1:02735d7: 	public void setType(String subsystemType) {
1:02735d7: 
1:02735d7: 		this.type = subsystemType;
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	/**
1:02735d7: 	 * @param manifest
1:02735d7: 	 *            file to use the manifest to set
1:02735d7: 	 */
1:02735d7: 	public void setManifest(File manifestFile) {
1:02735d7: 
1:02735d7: 		if (!manifestFile.exists()) {
1:02735d7: 			throw new BuildException("Manifest:" + manifestFile +
1:02735d7: 				" does not exist", getLocation());
1:02735d7: 		}
1:02735d7: 
1:02735d7: 		this.manifestFile = manifestFile;
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	/**
1:02735d7: 	 * @param generateManifest
1:02735d7: 	 *            the generateManifest to set
1:02735d7: 	 */
1:02735d7: 	public void setGenerateManifest(boolean generateManifest) {
1:02735d7: 
1:02735d7: 		this.generateManifest = generateManifest;
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	/**
1:02735d7: 	 * @param skipWriting
1:02735d7: 	 *            the skipWriting to set
1:02735d7: 	 */
1:02735d7: 	public void setSkipWriting(boolean skipWriting) {
1:02735d7: 
1:02735d7: 		this.skipWriting = skipWriting;
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	@Override
1:02735d7: 	protected void zipFile(
1:02735d7: 		File file, ZipOutputStream zOut, String vPath, int mode)
1:02735d7: 		throws IOException {
1:02735d7: 
1:02735d7: 		super.zipFile(file, zOut, vPath, mode);
1:02735d7: 
1:02735d7: 		/*
1:02735d7: 		 * this handling is only for OSGi bundles and we need to exclude other
1:02735d7: 		 * entries
1:02735d7: 		 */
1:02735d7: 		if (file.isFile() &&
1:02735d7: 			!Constants.SUBSYSTEM_MANIFEST_NAME.equalsIgnoreCase(vPath)) {
1:02735d7: 
1:02735d7: 			JarFile bundleFile = new JarFile(file);
1:02735d7: 
1:02735d7: 			Manifest jarManifest = bundleFile.getManifest();
1:02735d7: 
1:02735d7: 			if (jarManifest != null) {
1:02735d7: 
1:02735d7: 				Attributes mainAttributes = jarManifest.getMainAttributes();
1:02735d7: 
1:02735d7: 				String bundleSymbolicName =
1:02735d7: 					mainAttributes.getValue(Constants.BUNDLE_SYMBOLICNAME);
1:02735d7: 
1:02735d7: 				String bundleVersion =
1:02735d7: 					mainAttributes.getValue(Constants.BUNDLE_VERSION);
1:02735d7: 
1:02735d7: 				bundleFile.close();
1:02735d7: 
1:02735d7: 				String strSubsystemContentEntry =
1:02735d7: 					bundleSymbolicName + ";version=" + bundleVersion;
1:02735d7: 
1:02735d7: 				subsystemContent.append(strSubsystemContentEntry);
1:02735d7: 				subsystemContent.append(",");
1:02735d7: 			}
1:02735d7: 		}
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	@Override
1:02735d7: 	protected void initZipOutputStream(ZipOutputStream zOut)
1:02735d7: 		throws IOException, BuildException {
1:02735d7: 
1:02735d7: 		if (manifestFile != null && !generateManifest) {
1:02735d7: 
1:02735d7: 			zipDir(
1:02735d7: 				(Resource) null, zOut, Constants.OSGI_INF_PATH,
1:02735d7: 				ZipFileSet.DEFAULT_DIR_MODE, null);
1:02735d7: 
1:02735d7: 			zipFile(
1:02735d7: 				manifestFile, zOut, Constants.SUBSYSTEM_MANIFEST_NAME,
1:02735d7: 				ZipFileSet.DEFAULT_FILE_MODE);
1:02735d7: 		}
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	@Override
1:02735d7: 	protected void finalizeZipOutputStream(ZipOutputStream zOut)
1:02735d7: 		throws IOException, BuildException {
1:02735d7: 
1:02735d7: 		if (!skipWriting) {
1:02735d7: 			if (generateManifest) {
1:02735d7: 				addNewManifest(zOut);
1:02735d7: 			}
1:02735d7: 		}
1:02735d7: 	}
1:02735d7: 
1:02735d7: 	/**
1:02735d7: 	 * This method will add the SUBSYSTEM.MF to the esa archieve
1:02735d7: 	 * 
1:02735d7: 	 * @param zOut
1:02735d7: 	 *            -the zip output stream
1:02735d7: 	 */
1:02735d7: 	private void addNewManifest(ZipOutputStream zOut) {
1:02735d7: 
1:02735d7: 		try {
1:02735d7: 
1:02735d7: 			log("Generating SUBSYSTEM.MF", Project.MSG_VERBOSE);
1:02735d7: 
1:02735d7: 			zipDir(
1:02735d7: 				(Resource) null, zOut, Constants.OSGI_INF_PATH,
1:02735d7: 				ZipFileSet.DEFAULT_DIR_MODE, null);
1:02735d7: 
1:02735d7: 			ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:02735d7: 
1:02735d7: 			OutputStreamWriter osWriter = new OutputStreamWriter(bout, "UTF-8");
1:02735d7: 
1:02735d7: 			PrintWriter printWriter = new PrintWriter(osWriter);
1:02735d7: 
1:02735d7: 			// Start writing manifest content
1:02735d7: 			printWriter.write(Constants.SUBSYSTEM_MANIFESTVERSION + ": " +
1:02735d7: 				Constants.SUBSYSTEM_MANIFEST_VERSION_VALUE + "\n");
1:02735d7: 
1:02735d7: 			printWriter.write(Constants.SUBSYSTEM_SYMBOLICNAME + ": " +
1:02735d7: 				symbolicName + "\n");
1:02735d7: 
1:02735d7: 			if (version == null) {
1:02735d7: 				version = "1.0.0";
1:02735d7: 			}
1:02735d7: 
1:02735d7: 			printWriter.write(Constants.SUBSYSTEM_VERSION + ": " + version +
1:02735d7: 				"\n");
1:02735d7: 
1:02735d7: 			if (name == null) {
1:02735d7: 				name = symbolicName;
1:02735d7: 			}
1:02735d7: 
1:02735d7: 			printWriter.write(Constants.SUBSYSTEM_NAME + ": " + name + "\n");
1:02735d7: 
1:02735d7: 			printWriter.write(Constants.SUBSYSTEM_TYPE + ": " + type + "\n");
1:02735d7: 
1:02735d7: 			if (description != null) {
1:02735d7: 				printWriter.write(Constants.SUBSYSTEM_DESCRIPTION + ": " +
1:02735d7: 					description + "\n");
1:02735d7: 			}
1:02735d7: 
1:02735d7: 			// Subsystem-content header
1:02735d7: 
1:02735d7: 			String subsystemContentHeader = subsystemContent.toString();
1:02735d7: 			// strip the last ,
1:02735d7: 			subsystemContentHeader =
1:02735d7: 				subsystemContentHeader.substring(
1:02735d7: 					0, (subsystemContentHeader.length() - 1)) +
1:02735d7: 					"\n";
1:02735d7: 
1:02735d7: 			printWriter.write(subsystemContentHeader);
1:02735d7: 
1:02735d7: 			printWriter.close();
1:02735d7: 
1:02735d7: 			ByteArrayInputStream bais =
1:02735d7: 				new ByteArrayInputStream(bout.toByteArray());
1:02735d7: 			try {
1:02735d7: 				super.zipFile(
1:02735d7: 					bais, zOut, Constants.SUBSYSTEM_MANIFEST_NAME,
1:02735d7: 					System.currentTimeMillis(), null,
1:02735d7: 					ZipFileSet.DEFAULT_FILE_MODE);
1:02735d7: 			}
1:02735d7: 			finally {
1:02735d7: 				// not really required
1:02735d7: 				FileUtils.close(bais);
1:02735d7: 			}
1:02735d7: 		}
1:02735d7: 		catch (IOException e) {
1:02735d7: 			log("Error generating manifest", Project.MSG_ERR);
1:02735d7: 		}
1:02735d7: 	}
1:02735d7: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:02735d7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.ant.taskdefs;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.OutputStreamWriter;
1: import java.io.PrintWriter;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarFile;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.tools.ant.BuildException;
1: import org.apache.tools.ant.Project;
1: import org.apache.tools.ant.taskdefs.Jar;
1: import org.apache.tools.ant.taskdefs.Zip;
1: import org.apache.tools.ant.types.Resource;
1: import org.apache.tools.ant.types.ZipFileSet;
1: import org.apache.tools.ant.util.FileUtils;
1: import org.apache.tools.zip.ZipOutputStream;
1: 
1: /**
1:  * The Ant task that will build the Enterprise Subsystem Archive, this task is
1:  * modeled based on the Ant {@link Jar} task
1:  * 
1:  * @version $Id: $
1:  */
1: public class EsaTask extends Zip {
1: 
1: 	/* name of the subsystem */
1: 	private String symbolicName;
1: 
1: 	/* name of the subsystem */
1: 	private String name;
1: 
1: 	/* subsystem description */
1: 	private String description;
1: 
1: 	/* version of the subsystem */
1: 	private String version;
1: 
1: 	/* subsystem type */
1: 	private String type = Constants.FEATURE_TYPE;
1: 
1: 	/* the file holder of the esa manifest */
1: 	private File manifestFile;
1: 
1: 	/* Flag to indicate whether to generate manifest */
1: 	protected boolean generateManifest;
1: 
1: 	/* Used for dry runs */
1: 	protected boolean skipWriting = false;
1: 
1: 	/* Used build the subsystem content header */
1: 	private StringBuilder subsystemContent = new StringBuilder(
1: 		Constants.SUBSYSTEM_CONTENT + ":");
1: 
1: 	public EsaTask() {
1: 
1: 		super();
1: 		archiveType = "esa";
1: 		setEncoding("UTF8");
1: 	}
1: 
1: 	/**
1: 	 * @param symbolicName
1: 	 *            the symbolicName to set
1: 	 */
1: 	public void setSymbolicName(String symbolicName) {
1: 
1: 		this.symbolicName = symbolicName;
1: 	}
1: 
1: 	/**
1: 	 * @param name
1: 	 *            the name to set
1: 	 */
1: 	public void setName(String name) {
1: 
1: 		this.name = name;
1: 	}
1: 
1: 	/**
1: 	 * @param version
1: 	 *            the version to set
1: 	 */
1: 	public void setVersion(String subsystemVersion) {
1: 
1: 		this.version = subsystemVersion;
1: 	}
1: 
1: 	/**
1: 	 * @param type
1: 	 *            the type to set
1: 	 */
1: 	public void setType(String subsystemType) {
1: 
1: 		this.type = subsystemType;
1: 	}
1: 
1: 	/**
1: 	 * @param manifest
1: 	 *            file to use the manifest to set
1: 	 */
1: 	public void setManifest(File manifestFile) {
1: 
1: 		if (!manifestFile.exists()) {
1: 			throw new BuildException("Manifest:" + manifestFile +
1: 				" does not exist", getLocation());
1: 		}
1: 
1: 		this.manifestFile = manifestFile;
1: 	}
1: 
1: 	/**
1: 	 * @param generateManifest
1: 	 *            the generateManifest to set
1: 	 */
1: 	public void setGenerateManifest(boolean generateManifest) {
1: 
1: 		this.generateManifest = generateManifest;
1: 	}
1: 
1: 	/**
1: 	 * @param skipWriting
1: 	 *            the skipWriting to set
1: 	 */
1: 	public void setSkipWriting(boolean skipWriting) {
1: 
1: 		this.skipWriting = skipWriting;
1: 	}
1: 
1: 	@Override
1: 	protected void zipFile(
1: 		File file, ZipOutputStream zOut, String vPath, int mode)
1: 		throws IOException {
1: 
1: 		super.zipFile(file, zOut, vPath, mode);
1: 
1: 		/*
1: 		 * this handling is only for OSGi bundles and we need to exclude other
1: 		 * entries
1: 		 */
1: 		if (file.isFile() &&
1: 			!Constants.SUBSYSTEM_MANIFEST_NAME.equalsIgnoreCase(vPath)) {
1: 
1: 			JarFile bundleFile = new JarFile(file);
1: 
1: 			Manifest jarManifest = bundleFile.getManifest();
1: 
1: 			if (jarManifest != null) {
1: 
1: 				Attributes mainAttributes = jarManifest.getMainAttributes();
1: 
1: 				String bundleSymbolicName =
1: 					mainAttributes.getValue(Constants.BUNDLE_SYMBOLICNAME);
1: 
1: 				String bundleVersion =
1: 					mainAttributes.getValue(Constants.BUNDLE_VERSION);
1: 
1: 				bundleFile.close();
1: 
1: 				String strSubsystemContentEntry =
1: 					bundleSymbolicName + ";version=" + bundleVersion;
1: 
1: 				subsystemContent.append(strSubsystemContentEntry);
1: 				subsystemContent.append(",");
1: 			}
1: 		}
1: 	}
1: 
1: 	@Override
1: 	protected void initZipOutputStream(ZipOutputStream zOut)
1: 		throws IOException, BuildException {
1: 
1: 		if (manifestFile != null && !generateManifest) {
1: 
1: 			zipDir(
1: 				(Resource) null, zOut, Constants.OSGI_INF_PATH,
1: 				ZipFileSet.DEFAULT_DIR_MODE, null);
1: 
1: 			zipFile(
1: 				manifestFile, zOut, Constants.SUBSYSTEM_MANIFEST_NAME,
1: 				ZipFileSet.DEFAULT_FILE_MODE);
1: 		}
1: 	}
1: 
1: 	@Override
1: 	protected void finalizeZipOutputStream(ZipOutputStream zOut)
1: 		throws IOException, BuildException {
1: 
1: 		if (!skipWriting) {
1: 			if (generateManifest) {
1: 				addNewManifest(zOut);
1: 			}
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * This method will add the SUBSYSTEM.MF to the esa archieve
1: 	 * 
1: 	 * @param zOut
1: 	 *            -the zip output stream
1: 	 */
1: 	private void addNewManifest(ZipOutputStream zOut) {
1: 
1: 		try {
1: 
1: 			log("Generating SUBSYSTEM.MF", Project.MSG_VERBOSE);
1: 
1: 			zipDir(
1: 				(Resource) null, zOut, Constants.OSGI_INF_PATH,
1: 				ZipFileSet.DEFAULT_DIR_MODE, null);
1: 
1: 			ByteArrayOutputStream bout = new ByteArrayOutputStream();
1: 
1: 			OutputStreamWriter osWriter = new OutputStreamWriter(bout, "UTF-8");
1: 
1: 			PrintWriter printWriter = new PrintWriter(osWriter);
1: 
1: 			// Start writing manifest content
1: 			printWriter.write(Constants.SUBSYSTEM_MANIFESTVERSION + ": " +
1: 				Constants.SUBSYSTEM_MANIFEST_VERSION_VALUE + "\n");
1: 
1: 			printWriter.write(Constants.SUBSYSTEM_SYMBOLICNAME + ": " +
1: 				symbolicName + "\n");
1: 
1: 			if (version == null) {
1: 				version = "1.0.0";
1: 			}
1: 
1: 			printWriter.write(Constants.SUBSYSTEM_VERSION + ": " + version +
1: 				"\n");
1: 
1: 			if (name == null) {
1: 				name = symbolicName;
1: 			}
1: 
1: 			printWriter.write(Constants.SUBSYSTEM_NAME + ": " + name + "\n");
1: 
1: 			printWriter.write(Constants.SUBSYSTEM_TYPE + ": " + type + "\n");
1: 
1: 			if (description != null) {
1: 				printWriter.write(Constants.SUBSYSTEM_DESCRIPTION + ": " +
1: 					description + "\n");
1: 			}
1: 
1: 			// Subsystem-content header
1: 
1: 			String subsystemContentHeader = subsystemContent.toString();
1: 			// strip the last ,
1: 			subsystemContentHeader =
1: 				subsystemContentHeader.substring(
1: 					0, (subsystemContentHeader.length() - 1)) +
1: 					"\n";
1: 
1: 			printWriter.write(subsystemContentHeader);
1: 
1: 			printWriter.close();
1: 
1: 			ByteArrayInputStream bais =
1: 				new ByteArrayInputStream(bout.toByteArray());
1: 			try {
1: 				super.zipFile(
1: 					bais, zOut, Constants.SUBSYSTEM_MANIFEST_NAME,
1: 					System.currentTimeMillis(), null,
1: 					ZipFileSet.DEFAULT_FILE_MODE);
1: 			}
1: 			finally {
1: 				// not really required
1: 				FileUtils.close(bais);
1: 			}
1: 		}
1: 		catch (IOException e) {
1: 			log("Error generating manifest", Project.MSG_ERR);
1: 		}
1: 	}
1: }
============================================================================