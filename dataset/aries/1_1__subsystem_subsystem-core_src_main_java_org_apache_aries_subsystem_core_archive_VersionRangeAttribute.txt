1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
15:1129914: 
1:1129914: import org.osgi.framework.Constants;
1:1129914: import org.osgi.framework.Version;
1:deca8ed: import org.osgi.framework.VersionRange;
1:1129914: 
1:1129914: public class VersionRangeAttribute extends AbstractAttribute {
1:2ffcfb9: 	public static final String NAME_BUNDLEVERSION = Constants.BUNDLE_VERSION_ATTRIBUTE;
1:2ffcfb9: 	public static final String NAME_VERSION = Constants.VERSION_ATTRIBUTE;
1:547a8ce: 	
1:2ffcfb9: 	public static final VersionRangeAttribute DEFAULT_BUNDLEVERSION = new VersionRangeAttribute(
1:2ffcfb9: 			NAME_BUNDLEVERSION, new VersionRange(Version.emptyVersion.toString()));
1:2ffcfb9: 	public static final VersionRangeAttribute DEFAULT_VERSION = new VersionRangeAttribute();
1:732a67a: 	
1:226c63f: 	private final VersionRange range;
1:1129914: 	
1:1129914: 	public VersionRangeAttribute() {
1:deca8ed: 		this(Version.emptyVersion.toString());
1:732a67a: 	}
1:1129914: 			
1:1129914: 	public VersionRangeAttribute(String value) {
1:deca8ed: 		this(new VersionRange(value));
1:deca8ed: 	}
1:deca8ed: 	
1:deca8ed: 	public VersionRangeAttribute(VersionRange range) {
1:2ffcfb9: 		this(Constants.VERSION_ATTRIBUTE, range);
1:2ffcfb9: 	}
1:2ffcfb9: 	
1:2ffcfb9: 	public VersionRangeAttribute(String name, VersionRange range) {
1:2ffcfb9: 		super(name, range.toString());
1:deca8ed: 		this.range = range;
1:732a67a: 	}
1:1129914: 	
1:2b13b05: 	@Override
1:1129914: 	public StringBuilder appendToFilter(StringBuilder builder) {
1:2ffcfb9: 		return builder.append(range.toFilterString(name));
21:1129914: 	}
1:2b13b05: 	
1:2b13b05: 	@Override
1:2b13b05: 	public Object getValue() {
1:2b13b05: 		return new StringBuilder().append('"').append(range.toString()).append('"').toString();
1:2b13b05: 	}
1:1129914: 
1:226c63f: 	public VersionRange getVersionRange() {
1:1129914: 		return range;
1:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: 	public static final String NAME_BUNDLEVERSION = Constants.BUNDLE_VERSION_ATTRIBUTE;
1: 	public static final String NAME_VERSION = Constants.VERSION_ATTRIBUTE;
1: 	public static final VersionRangeAttribute DEFAULT_BUNDLEVERSION = new VersionRangeAttribute(
1: 			NAME_BUNDLEVERSION, new VersionRange(Version.emptyVersion.toString()));
1: 	public static final VersionRangeAttribute DEFAULT_VERSION = new VersionRangeAttribute();
/////////////////////////////////////////////////////////////////////////
1: 		this(Constants.VERSION_ATTRIBUTE, range);
1: 	}
1: 	
1: 	public VersionRangeAttribute(String name, VersionRange range) {
1: 		super(name, range.toString());
1: 		return builder.append(range.toFilterString(name));
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	
1: 	@Override
1: 	public Object getValue() {
1: 		return new StringBuilder().append('"').append(range.toString()).append('"').toString();
1: 	}
commit:547a8ce
/////////////////////////////////////////////////////////////////////////
0: 	public static final String NAME = Constants.VERSION_ATTRIBUTE;
1: 	
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
0: 	public static final VersionRangeAttribute DEFAULT = new VersionRangeAttribute();
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.VersionRange;
0: //	public static String toFilterString(VersionRange range) {
0: //		String version = Constants.VERSION_ATTRIBUTE;
0: //		Version min = range.getMinimumVersion();
0: //		Version max = range.getMaximumVersion();
0: //		StringBuilder sb = new StringBuilder();
0: //		if (max != null)
0: //			sb.append("(&");
0: //		if (range.isMinimumExclusive())
0: //			sb.append("(!(").append(version).append("<=").append(min).append("))");
0: //		else
0: //			sb.append('(').append(version).append(">=").append(min).append(')');
0: //		if (max != null) {
0: //			if (range.isMaximumExclusive())
0: //				sb.append("(!(").append(version).append(">=").append(range.getMaximumVersion()).append("))");
0: //			else
0: //				sb.append('(').append(version).append("<=").append(max).append(')');
0: //			sb.append(')');
0: //		}
0: //		return sb.toString();
0: //	}
1: 		this(Version.emptyVersion.toString());
1: 		this(new VersionRange(value));
1: 	}
1: 	
1: 	public VersionRangeAttribute(VersionRange range) {
0: 		super(Constants.VERSION_ATTRIBUTE, range.toString());
1: 		this.range = range;
0: 		return builder.append(range.toFilterString(Constants.VERSION_ATTRIBUTE));
commit:732a67a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.VersionRange;
0: 	public static String toFilterString(VersionRange range) {
0: 		String version = Constants.VERSION_ATTRIBUTE;
0: 		Version min = range.getMinimumVersion();
0: 		Version max = range.getMaximumVersion();
0: 		StringBuilder sb = new StringBuilder();
0: 		if (max != null)
0: 			sb.append("(&");
0: 		if (range.isMinimumExclusive())
0: 			sb.append("(!(").append(version).append("<=").append(min).append("))");
0: 		else
0: 			sb.append('(').append(version).append(">=").append(min).append(')');
0: 		if (max != null) {
0: 			if (range.isMaximumExclusive())
0: 				sb.append("(!(").append(version).append(">=").append(range.getMaximumVersion()).append("))");
0: 			else
0: 				sb.append('(').append(version).append("<=").append(max).append(')');
0: 			sb.append(')');
1: 		}
0: 		return sb.toString();
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
0: 		return builder.append(toFilterString(range));
commit:226c63f
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.VersionRange;
1: 	private final VersionRange range;
0: 		range = new VersionRange(getValue());
0: 		range = new VersionRange(getValue());
0: 		return builder.append(range.toFilterString(Constants.VERSION_ATTRIBUTE));
1: 	public VersionRange getVersionRange() {
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: 
1: public class VersionRangeAttribute extends AbstractAttribute {
0: 	public static class RangedVersion extends Version {
0: 		private final boolean inclusive;
1: 		
0: 		public RangedVersion() {
0: 			super(Version.emptyVersion.toString());
0: 			inclusive = true;
1: 		}
1: 		
0: 		public RangedVersion(String value) {
0: 			this(value, true);
1: 		}
1: 		
0: 		public RangedVersion(String value, boolean inclusive) {
0: 			super(value);
0: 			this.inclusive = inclusive;
1: 		}
1: 		
0: 		public boolean isExclusive() {
0: 			return !inclusive;
1: 		}
1: 		
0: 		public boolean isInclusive() {
0: 			return inclusive;
1: 		}
1: 	}
1: 	
0: 	public static class Range {
0: 		private static final String INTERVAL = "([\\[\\(])(" + Grammar.FLOOR + "),(" + Grammar.CEILING + ")([\\[\\)])";
0: 		private static final String REGEX = INTERVAL + "|(" + Grammar.ATLEAST + ')';
0: 		private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 		
0: 		private final RangedVersion ceiling;
0: 		private final RangedVersion floor;
1: 		
0: 		public Range() {
0: 			ceiling = null;
0: 			floor = new RangedVersion();
1: 		}
1: 		
0: 		public Range(String value) {
0: 			Matcher matcher = PATTERN.matcher(value);
0: 			if (!matcher.matches()) {
0: 				throw new IllegalArgumentException("Invalid " + Constants.VERSION_ATTRIBUTE + " attribute value: " + value);
1: 			}
0: 			String floorSymbol = matcher.group(1);
0: 			String floorStr = matcher.group(2);
0: 			String ceilingStr = matcher.group(3);
0: 			String ceilingSymbol = matcher.group(4);
0: 			String atLeastStr = matcher.group(5);
0: 			if (atLeastStr != null) {
0: 				floor = new RangedVersion(atLeastStr);
0: 				ceiling = null;
1: 			}
0: 			else {
0: 				floor = new RangedVersion(floorStr, floorSymbol.equals("("));
0: 				if (ceilingStr != null) {
0: 					ceiling = new RangedVersion(ceilingStr, ceilingSymbol.equals("("));
1: 				}
0: 				else {
0: 					ceiling = null;
1: 				}
1: 			}
1: 		}
1: 		
0: 		public RangedVersion getCeiling() {
0: 			return ceiling;
1: 		}
1: 		
0: 		public RangedVersion getFloor() {
0: 			return floor;
1: 		}
1: 	}
1: 	
0: 	private static final String REGEX = '(' + Grammar.INTERVAL + ")|(" + Grammar.ATLEAST + ')';
0: 	private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 	
0: 	private final Range range;
1: 	
1: 	public VersionRangeAttribute() {
0: 		super(Constants.VERSION_ATTRIBUTE, Version.emptyVersion.toString());
0: 		range = new Range();
1: 	}
1: 			
1: 	public VersionRangeAttribute(String value) {
0: 		super(Constants.VERSION_ATTRIBUTE, value);
0: 		Matcher matcher = PATTERN.matcher(value);
0: 		if (!matcher.matches()) {
0: 			throw new IllegalArgumentException("Invalid " + Constants.VERSION_ATTRIBUTE + " attribute value: " + value);
1: 		}
0: 		range = new Range(matcher.group(1));
1: 	}
1: 	
1: 	public StringBuilder appendToFilter(StringBuilder builder) {
0: 		Range range = getRange();
0: 		builder.append(getName()).append(">=").append(range.getFloor());
0: 		if (range.getCeiling() != null) {
0: 			builder.append(")(!(").append(getName()).append(">=").append(range.getCeiling()).append(')');
1: 		}
0: 		return builder;
1: 	}
1: 
0: 	public Range getRange() {
1: 		return range;
1: 	}
1: }
============================================================================