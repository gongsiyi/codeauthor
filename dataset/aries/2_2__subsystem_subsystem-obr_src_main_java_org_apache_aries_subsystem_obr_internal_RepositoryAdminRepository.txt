1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
1:6c69a67:  */
1:6c69a67: package org.apache.aries.subsystem.obr.internal;
1:6c69a67: 
1:6c69a67: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:6c69a67: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:6c69a67: 
1:6c69a67: import java.util.ArrayList;
1:6c69a67: import java.util.Arrays;
1:6c69a67: import java.util.Collection;
1:6c69a67: import java.util.Collections;
1:6c69a67: import java.util.HashMap;
1:6c69a67: import java.util.Map;
1:6c69a67: 
1:7a834c3: import org.apache.aries.subsystem.util.felix.FelixCapabilityAdapter;
1:7a834c3: import org.apache.aries.subsystem.util.felix.FelixRepositoryAdapter;
1:7a834c3: import org.apache.aries.subsystem.util.felix.FelixResourceAdapter;
1:7a834c3: import org.apache.aries.subsystem.util.felix.OsgiRequirementAdapter;
1:6c69a67: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:6c69a67: import org.apache.felix.bundlerepository.Resource;
1:6c69a67: import org.osgi.framework.namespace.IdentityNamespace;
1:6c69a67: import org.osgi.resource.Capability;
1:6c69a67: import org.osgi.resource.Requirement;
1:6c69a67: import org.osgi.service.repository.Repository;
1:6c69a67: import org.slf4j.Logger;
1:6c69a67: import org.slf4j.LoggerFactory;
1:6c69a67: 
1:6c69a67: public class RepositoryAdminRepository implements Repository {
1:6c69a67: 	private static final Logger logger = LoggerFactory.getLogger(RepositoryAdminRepository.class);
1:6c69a67: 	
1:6c69a67: 	private final RepositoryAdmin repositoryAdmin;
1:6c69a67: 	
1:6c69a67: 	public RepositoryAdminRepository(RepositoryAdmin repositoryAdmin) {
1:6c69a67: 		this.repositoryAdmin = repositoryAdmin;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	public Collection<Capability> findProviders(Requirement requirement) {
1:6c69a67: 		logger.debug(LOG_ENTRY, "findProviders", requirement);
1:6c69a67: 		Collection<Capability> result = Collections.emptyList();
1:6c69a67: 		if (IdentityNamespace.IDENTITY_NAMESPACE.equals(requirement.getNamespace())) {
1:6c69a67: 			result = new ArrayList<Capability>();
1:6c69a67: 			for (org.apache.felix.bundlerepository.Repository r : repositoryAdmin.listRepositories()) {
1:6c69a67: 				FelixRepositoryAdapter repository = new FelixRepositoryAdapter(r);
1:6c69a67: 				Map<Requirement, Collection<Capability>> map = repository.findProviders(Arrays.asList(requirement));
1:6c69a67: 				Collection<Capability> capabilities = map.get(requirement);
1:6c69a67: 				if (capabilities != null)
1:6c69a67: 					result.addAll(capabilities);
1:6c69a67: 			}
1:6c69a67: 			return result;
1:6c69a67: 		}
1:6c69a67: 		else {
1:6c69a67: 			Resource[] resources = repositoryAdmin.discoverResources(
1:6c69a67: 					new org.apache.felix.bundlerepository.Requirement[]{
1:6c69a67: 							new OsgiRequirementAdapter(requirement)});
1:6c69a67: 			logger.debug("Found {} resources with capabilities satisfying {}", resources == null ? 0 : resources.length, requirement);
1:6c69a67: 			if (resources != null  && resources.length != 0) {
1:6c69a67: 				result = new ArrayList<Capability>(result.size());
1:6c69a67: 				OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(requirement);
1:6c69a67: 				for (Resource resource : resources) {
1:6c69a67: 					logger.debug("Evaluating resource {}", resource);
1:6c69a67: 					for (org.apache.felix.bundlerepository.Capability capability : resource.getCapabilities()) {
1:6c69a67: 						logger.debug("Evaluating capability {}", capability);
1:6c69a67: 						if (adapter.isSatisfied(capability)) {
1:6c69a67: 							logger.debug("Adding capability {}", capability);
1:6c69a67: 							result.add(new FelixCapabilityAdapter(capability, new FelixResourceAdapter(resource)));
1:6c69a67: 						}
1:6c69a67: 					}
1:6c69a67: 				}
1:6c69a67: 			}
1:6c69a67: 		}
1:6c69a67: 		logger.debug(LOG_EXIT, "findProviders", result);
1:6c69a67: 		return result;
1:6c69a67: 
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	@Override
1:6c69a67: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:6c69a67: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>(requirements.size());
1:6c69a67: 		for (Requirement requirement : requirements)
1:6c69a67: 			result.put(requirement, findProviders(requirement));
1:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.util.felix.FelixCapabilityAdapter;
1: import org.apache.aries.subsystem.util.felix.FelixRepositoryAdapter;
1: import org.apache.aries.subsystem.util.felix.FelixResourceAdapter;
1: import org.apache.aries.subsystem.util.felix.OsgiRequirementAdapter;
author:John Ross
-------------------------------------------------------------------------------
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.obr.internal;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.service.repository.Repository;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class RepositoryAdminRepository implements Repository {
1: 	private static final Logger logger = LoggerFactory.getLogger(RepositoryAdminRepository.class);
1: 	
1: 	private final RepositoryAdmin repositoryAdmin;
1: 	
1: 	public RepositoryAdminRepository(RepositoryAdmin repositoryAdmin) {
1: 		this.repositoryAdmin = repositoryAdmin;
1: 	}
1: 	
1: 	public Collection<Capability> findProviders(Requirement requirement) {
1: 		logger.debug(LOG_ENTRY, "findProviders", requirement);
1: 		Collection<Capability> result = Collections.emptyList();
1: 		if (IdentityNamespace.IDENTITY_NAMESPACE.equals(requirement.getNamespace())) {
1: 			result = new ArrayList<Capability>();
1: 			for (org.apache.felix.bundlerepository.Repository r : repositoryAdmin.listRepositories()) {
1: 				FelixRepositoryAdapter repository = new FelixRepositoryAdapter(r);
1: 				Map<Requirement, Collection<Capability>> map = repository.findProviders(Arrays.asList(requirement));
1: 				Collection<Capability> capabilities = map.get(requirement);
1: 				if (capabilities != null)
1: 					result.addAll(capabilities);
1: 			}
1: 			return result;
1: 		}
1: 		else {
1: 			Resource[] resources = repositoryAdmin.discoverResources(
1: 					new org.apache.felix.bundlerepository.Requirement[]{
1: 							new OsgiRequirementAdapter(requirement)});
1: 			logger.debug("Found {} resources with capabilities satisfying {}", resources == null ? 0 : resources.length, requirement);
1: 			if (resources != null  && resources.length != 0) {
1: 				result = new ArrayList<Capability>(result.size());
1: 				OsgiRequirementAdapter adapter = new OsgiRequirementAdapter(requirement);
1: 				for (Resource resource : resources) {
1: 					logger.debug("Evaluating resource {}", resource);
1: 					for (org.apache.felix.bundlerepository.Capability capability : resource.getCapabilities()) {
1: 						logger.debug("Evaluating capability {}", capability);
1: 						if (adapter.isSatisfied(capability)) {
1: 							logger.debug("Adding capability {}", capability);
1: 							result.add(new FelixCapabilityAdapter(capability, new FelixResourceAdapter(resource)));
1: 						}
1: 					}
1: 				}
1: 			}
1: 		}
1: 		logger.debug(LOG_EXIT, "findProviders", result);
1: 		return result;
1: 
1: 	}
1: 	
1: 	@Override
1: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>(requirements.size());
1: 		for (Requirement requirement : requirements)
1: 			result.put(requirement, findProviders(requirement));
1: 		return result;
1: 	}
1: }
============================================================================