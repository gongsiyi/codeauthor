1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
12:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
3:fdf3952: 
1:fdf3952: package org.apache.aries.jmx.blueprint;
1:fdf3952: 
1:fdf3952: import java.util.Arrays;
1:fdf3952: import java.util.LinkedHashSet;
1:fdf3952: import java.util.Set;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.ArrayType;
1:fdf3952: import javax.management.openmbean.CompositeType;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: import javax.management.openmbean.OpenType;
1:fdf3952: import javax.management.openmbean.TabularType;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * The item class enables the definition of open types in the appropriate interfaces.
1:8624fd8:  *
1:fdf3952:  * This class contains a number of methods that make it possible to create open types for {@link CompositeType},
1:fdf3952:  * {@link TabularType}, and {@link ArrayType}. The normal creation throws a checked exception, making it impossible to
1:fdf3952:  * use them in a static initializer. They constructors are also not very suitable for static construction.
1:8624fd8:  *
1:8624fd8:  *
1:fdf3952:  * An Item instance describes an item in a Composite Type. It groups the triplet of name, description, and Open Type.
1:fdf3952:  * These Item instances allows the definitions of an item to stay together.
1:8624fd8:  *
1:fdf3952:  * @Immutable
1:fdf3952:  */
1:fdf3952: public class Item {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The name of this item.
1:fdf3952:      */
1:fdf3952:     private final String name;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The description of this item.
1:fdf3952:      */
1:fdf3952:     private final String description;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * The type of this item.
1:fdf3952:      */
1:fdf3952:     private final OpenType/*<?>*/ type;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Create a triple of name, description, and type. This triplet is used in the creation of a Composite Type.
1:8624fd8:      *
1:fdf3952:      * @param name
1:fdf3952:      *            The name of the item.
1:fdf3952:      * @param description
1:fdf3952:      *            The description of the item.
1:fdf3952:      * @param type
1:fdf3952:      *            The Open Type of this item.
1:fdf3952:      * @param restrictions
1:fdf3952:      *            Ignored, contains list of restrictions
1:fdf3952:      */
1:fdf3952:     public Item(String name, String description, OpenType/*<?>*/ type, String... restrictions) {
1:fdf3952:         this.name = name;
1:fdf3952:         this.description = description;
1:fdf3952:         this.type = type;
2:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Create a Tabular Type.
1:8624fd8:      *
1:fdf3952:      * @param name
1:fdf3952:      *            The name of the Tabular Type.
1:fdf3952:      * @param description
1:fdf3952:      *            The description of the Tabular Type.
1:fdf3952:      * @param rowType
1:fdf3952:      *            The Open Type for a row
1:fdf3952:      * @param index
1:fdf3952:      *            The names of the items that form the index .
1:fdf3952:      * @return A new Tabular Type composed from the parameters.
1:fdf3952:      * @throws RuntimeException
1:fdf3952:      *             when the Tabular Type throws an OpenDataException
1:fdf3952:      */
1:fdf3952:     static public TabularType tabularType(String name, String description, CompositeType rowType, String... index) {
1:fdf3952:         try {
1:fdf3952:             return new TabularType(name, description, rowType, index);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Create a Composite Type
1:8624fd8:      *
1:fdf3952:      * @param name
1:fdf3952:      *            The name of the Tabular Type.
1:fdf3952:      * @param description
1:fdf3952:      *            The description of the Tabular Type.
1:fdf3952:      * @param items
1:fdf3952:      *            The items that describe the composite type.
1:fdf3952:      * @return a new Composite Type
1:fdf3952:      * @throws RuntimeException
1:fdf3952:      *             when the Tabular Type throws an OpenDataException
1:fdf3952:      */
1:fdf3952:     static public CompositeType compositeType(String name, String description, Item... items) {
1:fdf3952:         return extend(null, name, description, items);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Extend a Composite Type by adding new items. Items can override items in the parent type.
1:8624fd8:      *
1:fdf3952:      * @param parent
1:fdf3952:      *            The parent type, can be <code>null</code>
1:fdf3952:      * @param name
1:fdf3952:      *            The name of the type
1:fdf3952:      * @param description
1:fdf3952:      *            The description of the type
1:fdf3952:      * @param items
1:fdf3952:      *            The items that should be added/override to the parent type
1:fdf3952:      * @return A new Composite Type that extends the parent type
1:fdf3952:      * @throws RuntimeException
1:fdf3952:      *             when an OpenDataException is thrown
1:fdf3952:      */
1:fdf3952:     public static CompositeType extend(CompositeType parent, String name, String description, Item... items) {
1:fdf3952:         Set<Item> all = new LinkedHashSet<Item>();
1:fdf3952: 
1:fdf3952:         if (parent != null) {
1:fdf3952:             for (Object nm : parent.keySet()) {
1:fdf3952:                 String key = (String) nm;
1:fdf3952:                 all.add(new Item((String) nm, parent.getDescription(key), parent.getType(key)));
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         all.addAll(Arrays.asList(items));
1:fdf3952: 
1:fdf3952:         String names[] = new String[all.size()];
1:fdf3952:         String descriptions[] = new String[all.size()];
1:fdf3952:         OpenType types[] = new OpenType[all.size()];
1:fdf3952: 
1:fdf3952:         int n = 0;
1:fdf3952:         for (Item item : all) {
1:fdf3952:             names[n] = item.name;
1:fdf3952:             descriptions[n] = item.description;
1:fdf3952:             types[n] = item.type;
1:fdf3952:             n++;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         try {
1:fdf3952:             return new CompositeType(name, description, names, descriptions, types);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Return a new Array Type.
1:8624fd8:      *
1:fdf3952:      * @param dim
1:fdf3952:      *            The dimension
1:fdf3952:      * @param elementType
1:fdf3952:      *            The element type
1:fdf3952:      * @return A new Array Type
1:fdf3952:      */
1:8624fd8:     public static <T> ArrayType<T> arrayType(int dim, OpenType<T> elementType) {
1:fdf3952:         try {
1:8624fd8:             return new ArrayType<T>(dim, elementType);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:8624fd8:         }
1:fdf3952:      }
1:8624fd8: 
1:8624fd8: 
1:fdf3952:     /**
1:fdf3952:      * Return a new primaArray Type.
1:8624fd8:      *
1:fdf3952:      * @param elementType
1:fdf3952:      *            The element type
1:fdf3952:      * @return A new Array Type
1:fdf3952:      */
1:fdf3952:     /*
1:fdf3952:      * For the compatibility  with java 5, we have to cancel this method temporarily.
1:8624fd8:      *
1:fdf3952:      * public static ArrayType<?> primitiveArrayType(SimpleType<?> elementType) {
1:fdf3952:         try {
1:fdf3952:             return new ArrayType(elementType, true);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952:     */
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:8624fd8
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     public static <T> ArrayType<T> arrayType(int dim, OpenType<T> elementType) {
1:             return new ArrayType<T>(dim, elementType);
1:      }
1: 
1: 
1:      *
1:      *
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.jmx.blueprint;
1: 
1: import java.util.Arrays;
1: import java.util.LinkedHashSet;
1: import java.util.Set;
1: 
1: import javax.management.openmbean.ArrayType;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.OpenType;
0: import javax.management.openmbean.SimpleType;
1: import javax.management.openmbean.TabularType;
1: 
1: /**
1:  * The item class enables the definition of open types in the appropriate interfaces.
1:  * 
1:  * This class contains a number of methods that make it possible to create open types for {@link CompositeType},
1:  * {@link TabularType}, and {@link ArrayType}. The normal creation throws a checked exception, making it impossible to
1:  * use them in a static initializer. They constructors are also not very suitable for static construction.
1:  * 
1:  * 
1:  * An Item instance describes an item in a Composite Type. It groups the triplet of name, description, and Open Type.
1:  * These Item instances allows the definitions of an item to stay together.
1:  * 
1:  * @Immutable
1:  */
1: public class Item {
1: 
1:     /**
1:      * The name of this item.
1:      */
1:     private final String name;
1: 
1:     /**
1:      * The description of this item.
1:      */
1:     private final String description;
1: 
1:     /**
1:      * The type of this item.
1:      */
1:     private final OpenType/*<?>*/ type;
1: 
1:     /**
1:      * Create a triple of name, description, and type. This triplet is used in the creation of a Composite Type.
1:      * 
1:      * @param name
1:      *            The name of the item.
1:      * @param description
1:      *            The description of the item.
1:      * @param type
1:      *            The Open Type of this item.
1:      * @param restrictions
1:      *            Ignored, contains list of restrictions
1:      */
1:     public Item(String name, String description, OpenType/*<?>*/ type, String... restrictions) {
1:         this.name = name;
1:         this.description = description;
1:         this.type = type;
1:     }
1: 
1:     /**
1:      * Create a Tabular Type.
1:      * 
1:      * @param name
1:      *            The name of the Tabular Type.
1:      * @param description
1:      *            The description of the Tabular Type.
1:      * @param rowType
1:      *            The Open Type for a row
1:      * @param index
1:      *            The names of the items that form the index .
1:      * @return A new Tabular Type composed from the parameters.
1:      * @throws RuntimeException
1:      *             when the Tabular Type throws an OpenDataException
1:      */
1:     static public TabularType tabularType(String name, String description, CompositeType rowType, String... index) {
1:         try {
1:             return new TabularType(name, description, rowType, index);
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Create a Composite Type
1:      * 
1:      * @param name
1:      *            The name of the Tabular Type.
1:      * @param description
1:      *            The description of the Tabular Type.
1:      * @param items
1:      *            The items that describe the composite type.
1:      * @return a new Composite Type
1:      * @throws RuntimeException
1:      *             when the Tabular Type throws an OpenDataException
1:      */
1:     static public CompositeType compositeType(String name, String description, Item... items) {
1:         return extend(null, name, description, items);
1:     }
1: 
1:     /**
1:      * Extend a Composite Type by adding new items. Items can override items in the parent type.
1:      * 
1:      * @param parent
1:      *            The parent type, can be <code>null</code>
1:      * @param name
1:      *            The name of the type
1:      * @param description
1:      *            The description of the type
1:      * @param items
1:      *            The items that should be added/override to the parent type
1:      * @return A new Composite Type that extends the parent type
1:      * @throws RuntimeException
1:      *             when an OpenDataException is thrown
1:      */
1:     public static CompositeType extend(CompositeType parent, String name, String description, Item... items) {
1:         Set<Item> all = new LinkedHashSet<Item>();
1: 
1:         if (parent != null) {
1:             for (Object nm : parent.keySet()) {
1:                 String key = (String) nm;
1:                 all.add(new Item((String) nm, parent.getDescription(key), parent.getType(key)));
1:             }
1:         }
1: 
1:         all.addAll(Arrays.asList(items));
1: 
1:         String names[] = new String[all.size()];
1:         String descriptions[] = new String[all.size()];
1:         OpenType types[] = new OpenType[all.size()];
1: 
1:         int n = 0;
1:         for (Item item : all) {
1:             names[n] = item.name;
1:             descriptions[n] = item.description;
1:             types[n] = item.type;
1:             n++;
1:         }
1: 
1:         try {
1:             return new CompositeType(name, description, names, descriptions, types);
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Return a new Array Type.
1:      * 
1:      * @param dim
1:      *            The dimension
1:      * @param elementType
1:      *            The element type
1:      * @return A new Array Type
1:      */
0:     public static ArrayType/*<?>*/ arrayType(int dim, OpenType/*<?>*/ elementType) {
1:         try {
0:             return new ArrayType(dim, elementType);
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1:     
1:     
1:     /**
1:      * Return a new primaArray Type.
1:      * 
1:      * @param elementType
1:      *            The element type
1:      * @return A new Array Type
1:      */
1:     /*
1:      * For the compatibility  with java 5, we have to cancel this method temporarily.
1:      * 
1:      * public static ArrayType<?> primitiveArrayType(SimpleType<?> elementType) {
1:         try {
1:             return new ArrayType(elementType, true);
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1:     */
1: }
============================================================================