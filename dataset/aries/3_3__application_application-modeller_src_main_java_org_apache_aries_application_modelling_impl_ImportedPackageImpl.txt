1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.impl;
1:4fec049: 
1:58f55bd: import static org.apache.aries.application.modelling.ModellingConstants.OPTIONAL_KEY;
1:4fec049: import static org.apache.aries.application.modelling.ResourceType.PACKAGE;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:4fec049: 
1:4fec049: import java.util.Collections;
1:4fec049: import java.util.Dictionary;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.Hashtable;
1:4fec049: import java.util.Map;
1:bbcf8d2: import java.util.Map.Entry;
1:4fec049: 
1:89f804e: import org.apache.aries.application.InvalidAttributeException;
1:bbcf8d2: import org.apache.aries.application.modelling.ExportedPackage;
1:4fec049: import org.apache.aries.application.modelling.ImportedPackage;
1:4fec049: import org.apache.aries.application.modelling.Provider;
1:4fec049: import org.apache.aries.application.modelling.ResourceType;
1:58f55bd: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
1:4fec049: import org.apache.aries.application.utils.FilterUtils;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: import org.osgi.framework.Filter;
1:4fec049: import org.osgi.framework.FrameworkUtil;
1:4fec049: import org.osgi.framework.InvalidSyntaxException;
1:4fec049: import org.osgi.framework.Version;
1:4fec049: import org.slf4j.Logger;
1:4fec049: import org.slf4j.LoggerFactory;
1:4fec049: /**
1:4fec049:  * An imported, or required package. Capable of generating an entry in DEPLOYMENT.MF's Import-Package header. 
1:4fec049:  */
1:4fec049: public class ImportedPackageImpl implements ImportedPackage
1:4fec049: {
1:4fec049: 
1:4fec049:   
1:4fec049:   private final boolean _optional;
1:4fec049:   private final String _filterString;
1:4fec049:   private final Filter _filter;
1:4fec049:   private final String _package;
1:4fec049:   private final String _versionRange;
1:4fec049:   private final Map<String,String> _attributes;
1:4fec049:   private final Logger logger = LoggerFactory.getLogger(ImportedPackageImpl.class);
1:4fec049:   /**
1:4fec049:    * Construct a package requirement
1:4fec049:    * @param pkg The name of the required package
1:4fec049:    * @param attributes Other attributes - most commonly, version
1:4fec049:    * @throws InvalidAttributeException
1:4fec049:    */
1:4fec049:   public ImportedPackageImpl (String pkg, Map<String, String> attributes) throws InvalidAttributeException {
1:4fec049:     logger.debug(LOG_ENTRY, "ImportedPackageImpl", new Object[] {pkg, attributes});
1:4fec049:     _package = pkg;
1:4fec049:     String versionRange = null;
1:4fec049:     if (attributes != null) {
1:4fec049:       _optional = (Constants.RESOLUTION_OPTIONAL.equals(attributes.get(OPTIONAL_KEY)));
1:4fec049:       versionRange = attributes.get(Constants.VERSION_ATTRIBUTE);
1:4fec049:       _attributes = new HashMap<String, String>(attributes);
1:4fec049:     } else { 
1:4fec049:       _optional = false;
1:4fec049:       _attributes = new HashMap<String, String>();
2:4fec049:     }
1:4fec049:     if (versionRange == null) {
1:4fec049:       _versionRange = Version.emptyVersion.toString();
1:4fec049:     } else { 
1:4fec049:       _versionRange = versionRange;
1:4fec049:     }
1:4fec049:     
1:4fec049:     _attributes.put(Constants.VERSION_ATTRIBUTE, _versionRange);
1:4fec049:     _filterString = ManifestHeaderProcessor.generateFilter(PACKAGE.toString(), _package, _attributes);
1:4fec049:     try { 
1:4fec049:     _filter = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(_filterString));
1:4fec049:     } catch (InvalidSyntaxException isx) { 
1:4fec049:       logger.debug(LOG_EXIT, "ImportedPackageImpl", new Object[] {isx});
1:4fec049:       throw new InvalidAttributeException(isx);
1:4fec049:     }
1:4fec049:     logger.debug(LOG_EXIT, "ImportedPackageImpl");
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Get this ImportedPackageImpl's attributes
1:4fec049:    * @return attributes
1:4fec049:    */
1:4fec049:   public Map<String, String> getAttributes() { 
1:4fec049:     logger.debug(LOG_ENTRY, "getAttributes");
1:4fec049:     logger.debug(LOG_EXIT, "getAttributes", new Object[] {_attributes});
1:4fec049:     return Collections.unmodifiableMap(_attributes);
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Get the package name
1:4fec049:    * @return package name
1:4fec049:    */
1:4fec049:   public String getPackageName() { 
1:4fec049:     logger.debug(LOG_ENTRY, "getPackageName");
1:4fec049:     logger.debug(LOG_EXIT, "getPackageName", new Object[] {_package});
1:4fec049:     return _package;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Get the imported package's version range
1:4fec049:    * @return version range
1:4fec049:    */
1:4fec049:   public String getVersionRange() {
1:4fec049:     logger.debug(LOG_ENTRY, "getVersionRange");
1:4fec049:     logger.debug(LOG_EXIT, "getVersionRange", new Object[] {_versionRange});
1:4fec049:     return _versionRange;
1:4fec049:   }
1:4fec049:   
1:4fec049: 
1:4fec049:   public String getAttributeFilter() {
1:4fec049:     logger.debug(LOG_ENTRY, "getAttributeFilter");
1:4fec049:     logger.debug(LOG_EXIT, "getAttributeFilter", new Object[] {_filterString});
1:4fec049:     return _filterString;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public ResourceType getType() {
1:4fec049:     logger.debug(LOG_ENTRY, "getType");
1:4fec049:     logger.debug(LOG_EXIT, "getType", new Object[] {PACKAGE});
1:4fec049:     return PACKAGE;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public boolean isMultiple() {
1:4fec049:     logger.debug(LOG_ENTRY, "isMultiple");
1:4fec049:     logger.debug(LOG_EXIT, "isMultiple", new Object[] {false});
1:4fec049:     return false;   // cannot import a given package more than once
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public boolean isOptional() {
1:4fec049:     logger.debug(LOG_ENTRY, "isOptional");
1:4fec049:     logger.debug(LOG_EXIT, "isOptional", new Object[] {_optional});
1:4fec049:     return _optional;
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public boolean isSatisfied(Provider capability) {
1:4fec049:     logger.debug(LOG_ENTRY, "isSatisfied", new Object[]{capability});
1:4fec049:     if (capability.getType() != PACKAGE) { 
1:4fec049:       logger.debug(LOG_EXIT, "isSatisfied", new Object[] {false});
1:4fec049:       return false;
1:4fec049:     }
1:4fec049:     Dictionary<String, Object> dict = new Hashtable<String, Object> (capability.getAttributes());
1:4fec049:     String version = (String) dict.get(Constants.VERSION_ATTRIBUTE);
1:4fec049:     if (version != null) { 
1:4fec049:       dict.put(Constants.VERSION_ATTRIBUTE, Version.parseVersion(version));
1:4fec049:     }
1:4fec049:     
1:58f55bd:     boolean allPresent = ModellingHelperImpl.areMandatoryAttributesPresent_(_attributes, capability);
1:4fec049:     boolean result = allPresent && _filter.match(dict);
1:4fec049:     logger.debug(LOG_EXIT, "isSatisfied", new Object[] {result});
1:4fec049:     return result;
1:4fec049:   }
1:4fec049: 
1:4fec049:   
1:4fec049:   
1:4fec049:   /**
1:4fec049:   * This method turns an {@link ImportedPackageImpl} into a string suitable for a 
1:4fec049:   * Provision-Bundle style package import.  
1:4fec049:   * It will not include ;bundle-symbolic-name=bundleName;bundle-version=version attribute pairs
1:4fec049:   * @return A String
1:4fec049:   */
1:4fec049:   @SuppressWarnings("deprecation")
1:4fec049:   public String toDeploymentString() {
1:4fec049:     logger.debug(LOG_ENTRY, "toDeploymentString");
1:4fec049:     StringBuilder sb = new StringBuilder(_package);
1:4fec049:     // Note that the RESOLUTION_DIRECTIVE is set in this map, so it will be
1:4fec049:     // output automatically. p41 of the OSGi Core Spec v4.2 includes an example
1:4fec049:     // Import-Package with a resolution:=mandatory directive on. We could choose to suppress
1:4fec049:     // resolution:=mandatory on packages however, since mandatory is the default.
1:4fec049:     for (Map.Entry<String, String> entry : _attributes.entrySet()) {
1:4fec049:       String key = entry.getKey();
1:4fec049:       String value = entry.getValue();
1:4fec049:       if (!key.equals(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE)
1:4fec049:           && !key.equals(Constants.BUNDLE_VERSION_ATTRIBUTE)
1:4fec049:           && !key.equals(PACKAGE.toString())
1:4fec049:           && !key.equals(Constants.PACKAGE_SPECIFICATION_VERSION)) {
1:4fec049:         sb.append(";").append(key).append("=\"").append(value).append('"');
1:4fec049:       } else {
1:4fec049:         logger.debug("ignoring attribute {" + key + "=" + value + "} in ImportedPackageImpl.toDeploymentString()");
1:4fec049:       }
1:4fec049:     }
1:4fec049:     String result = sb.toString();
1:4fec049:     logger.debug(LOG_EXIT, "toDeploymentString", new Object[]{result});
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Override
1:4fec049:   public String toString() {
1:4fec049:     return toDeploymentString();
1:4fec049:   }
1:bbcf8d2:   
1:bbcf8d2: 	@Override
1:bbcf8d2: 	public boolean equals(Object thing) {
1:bbcf8d2: 		if (thing == this) {
1:bbcf8d2: 			return true;
1:bbcf8d2: 		} else {
1:bbcf8d2: 			if (thing instanceof ImportedPackage) {
1:bbcf8d2: 				ImportedPackage otherPackage = (ImportedPackage) thing;
1:bbcf8d2: 				if (!this.getPackageName()
1:bbcf8d2: 						.equals(otherPackage.getPackageName())) {
1:bbcf8d2: 					return false;
1:bbcf8d2: 				}
1:bbcf8d2: 				if (!this.getVersionRange().equals(otherPackage.getVersionRange())) {
1:bbcf8d2: 					return false;
1:bbcf8d2: 				}
1:bbcf8d2: 				if (!this.getPackageName()
1:bbcf8d2: 						.equals(otherPackage.getPackageName())) {
1:bbcf8d2: 					return false;
1:bbcf8d2: 				}
1:bbcf8d2: 				Map<String, String> otherAttributes = otherPackage
1:bbcf8d2: 						.getAttributes();
1:bbcf8d2: 
1:bbcf8d2: 				// Ignore the bundle, since the same package imported from
1:bbcf8d2: 				// different bundles should count as the same
1:bbcf8d2: 
1:bbcf8d2: 				if (!attributesAreEqual(otherAttributes)) {
1:bbcf8d2: 					return false;
1:bbcf8d2: 				}
1:bbcf8d2: 			}
1:bbcf8d2: 			return true;
1:bbcf8d2: 
1:bbcf8d2: 		}
1:bbcf8d2: 	}
1:bbcf8d2: 
1:bbcf8d2: 	private boolean attributesAreEqual(Map<String, String> otherAttributes) {
1:bbcf8d2: 		// We better have the same number of attributes
1:bbcf8d2: 		if (this.getAttributes().size() != otherAttributes.size()) {
1:bbcf8d2: 			return false;
1:bbcf8d2: 		}
1:bbcf8d2: 
1:bbcf8d2: 		for (Entry<String, String> entry : getAttributes().entrySet()) {
1:bbcf8d2: 			String key = entry.getKey();
1:bbcf8d2: 			if (otherAttributes != null && otherAttributes.containsKey(key)) {
1:bbcf8d2: 				Object otherValue = otherAttributes.get(key);
1:bbcf8d2: 				Object value = entry.getValue();
1:bbcf8d2: 				if (value == null) {
1:bbcf8d2: 					if (otherValue != null) {
1:bbcf8d2: 						return false;
1:bbcf8d2: 					}
1:bbcf8d2: 				} else {
1:bbcf8d2: 					if (!value.equals(otherValue)) {
1:bbcf8d2: 						return false;
1:bbcf8d2: 					}
1:bbcf8d2: 				}
1:bbcf8d2: 			} else {
1:bbcf8d2: 				// We insist every value be present on both sides
1:bbcf8d2: 				return false;
1:bbcf8d2: 			}
1:bbcf8d2: 		}
1:bbcf8d2: 
1:bbcf8d2: 		return true;
1:bbcf8d2: 	}
1:bbcf8d2:   
1:bbcf8d2:   @Override
1:bbcf8d2:   public int hashCode()
1:bbcf8d2:   {
1:bbcf8d2: 	  return getPackageName().hashCode();
1:bbcf8d2:   }
1:bbcf8d2: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.InvalidAttributeException;
author:Holly Cummins
-------------------------------------------------------------------------------
commit:bbcf8d2
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map.Entry;
1: import org.apache.aries.application.modelling.ExportedPackage;
/////////////////////////////////////////////////////////////////////////
1:   
1: 	@Override
1: 	public boolean equals(Object thing) {
1: 		if (thing == this) {
1: 			return true;
1: 		} else {
1: 			if (thing instanceof ImportedPackage) {
1: 				ImportedPackage otherPackage = (ImportedPackage) thing;
1: 				if (!this.getPackageName()
1: 						.equals(otherPackage.getPackageName())) {
1: 					return false;
1: 				}
1: 				if (!this.getVersionRange().equals(otherPackage.getVersionRange())) {
1: 					return false;
1: 				}
1: 				if (!this.getPackageName()
1: 						.equals(otherPackage.getPackageName())) {
1: 					return false;
1: 				}
1: 				Map<String, String> otherAttributes = otherPackage
1: 						.getAttributes();
1: 
1: 				// Ignore the bundle, since the same package imported from
1: 				// different bundles should count as the same
1: 
1: 				if (!attributesAreEqual(otherAttributes)) {
1: 					return false;
1: 				}
1: 			}
1: 			return true;
1: 
1: 		}
1: 	}
1: 
1: 	private boolean attributesAreEqual(Map<String, String> otherAttributes) {
1: 		// We better have the same number of attributes
1: 		if (this.getAttributes().size() != otherAttributes.size()) {
1: 			return false;
1: 		}
1: 
1: 		for (Entry<String, String> entry : getAttributes().entrySet()) {
1: 			String key = entry.getKey();
1: 			if (otherAttributes != null && otherAttributes.containsKey(key)) {
1: 				Object otherValue = otherAttributes.get(key);
1: 				Object value = entry.getValue();
1: 				if (value == null) {
1: 					if (otherValue != null) {
1: 						return false;
1: 					}
1: 				} else {
1: 					if (!value.equals(otherValue)) {
1: 						return false;
1: 					}
1: 				}
1: 			} else {
1: 				// We insist every value be present on both sides
1: 				return false;
1: 			}
1: 		}
1: 
1: 		return true;
1: 	}
1:   
1:   @Override
1:   public int hashCode()
1:   {
1: 	  return getPackageName().hashCode();
1:   }
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.application.modelling.ModellingConstants.OPTIONAL_KEY;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
/////////////////////////////////////////////////////////////////////////
1:     boolean allPresent = ModellingHelperImpl.areMandatoryAttributesPresent_(_attributes, capability);
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.impl;
1: 
1: import static org.apache.aries.application.modelling.ResourceType.PACKAGE;
0: import static org.apache.aries.application.modelling.utils.ModellingConstants.OPTIONAL_KEY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.Collections;
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
0: import org.apache.aries.application.management.InvalidAttributeException;
1: import org.apache.aries.application.modelling.ImportedPackage;
1: import org.apache.aries.application.modelling.Provider;
1: import org.apache.aries.application.modelling.ResourceType;
0: import org.apache.aries.application.modelling.utils.ModellingUtils;
1: import org.apache.aries.application.utils.FilterUtils;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.Version;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: /**
1:  * An imported, or required package. Capable of generating an entry in DEPLOYMENT.MF's Import-Package header. 
1:  */
1: public class ImportedPackageImpl implements ImportedPackage
1: {
1: 
1:   
1:   private final boolean _optional;
1:   private final String _filterString;
1:   private final Filter _filter;
1:   private final String _package;
1:   private final String _versionRange;
1:   private final Map<String,String> _attributes;
1:   private final Logger logger = LoggerFactory.getLogger(ImportedPackageImpl.class);
1:   /**
1:    * Construct a package requirement
1:    * @param pkg The name of the required package
1:    * @param attributes Other attributes - most commonly, version
1:    * @throws InvalidAttributeException
1:    */
1:   public ImportedPackageImpl (String pkg, Map<String, String> attributes) throws InvalidAttributeException {
1:     logger.debug(LOG_ENTRY, "ImportedPackageImpl", new Object[] {pkg, attributes});
1:     _package = pkg;
1:     String versionRange = null;
1:     if (attributes != null) {
1:       _optional = (Constants.RESOLUTION_OPTIONAL.equals(attributes.get(OPTIONAL_KEY)));
1:       versionRange = attributes.get(Constants.VERSION_ATTRIBUTE);
1:       _attributes = new HashMap<String, String>(attributes);
1:     } else { 
1:       _optional = false;
1:       _attributes = new HashMap<String, String>();
1:     }
1:     if (versionRange == null) {
1:       _versionRange = Version.emptyVersion.toString();
1:     } else { 
1:       _versionRange = versionRange;
1:     }
1:     
1:     _attributes.put(Constants.VERSION_ATTRIBUTE, _versionRange);
1:     _filterString = ManifestHeaderProcessor.generateFilter(PACKAGE.toString(), _package, _attributes);
1:     try { 
1:     _filter = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(_filterString));
1:     } catch (InvalidSyntaxException isx) { 
1:       logger.debug(LOG_EXIT, "ImportedPackageImpl", new Object[] {isx});
1:       throw new InvalidAttributeException(isx);
1:     }
1:     logger.debug(LOG_EXIT, "ImportedPackageImpl");
1:   }
1:   
1:   /**
1:    * Get this ImportedPackageImpl's attributes
1:    * @return attributes
1:    */
1:   public Map<String, String> getAttributes() { 
1:     logger.debug(LOG_ENTRY, "getAttributes");
1:     logger.debug(LOG_EXIT, "getAttributes", new Object[] {_attributes});
1:     return Collections.unmodifiableMap(_attributes);
1:   }
1:   
1:   /**
1:    * Get the package name
1:    * @return package name
1:    */
1:   public String getPackageName() { 
1:     logger.debug(LOG_ENTRY, "getPackageName");
1:     logger.debug(LOG_EXIT, "getPackageName", new Object[] {_package});
1:     return _package;
1:   }
1:   
1:   /**
1:    * Get the imported package's version range
1:    * @return version range
1:    */
1:   public String getVersionRange() {
1:     logger.debug(LOG_ENTRY, "getVersionRange");
1:     logger.debug(LOG_EXIT, "getVersionRange", new Object[] {_versionRange});
1:     return _versionRange;
1:   }
1:   
1: 
1:   public String getAttributeFilter() {
1:     logger.debug(LOG_ENTRY, "getAttributeFilter");
1:     logger.debug(LOG_EXIT, "getAttributeFilter", new Object[] {_filterString});
1:     return _filterString;
1:   }
1: 
1: 
1:   public ResourceType getType() {
1:     logger.debug(LOG_ENTRY, "getType");
1:     logger.debug(LOG_EXIT, "getType", new Object[] {PACKAGE});
1:     return PACKAGE;
1:   }
1: 
1: 
1:   public boolean isMultiple() {
1:     logger.debug(LOG_ENTRY, "isMultiple");
1:     logger.debug(LOG_EXIT, "isMultiple", new Object[] {false});
1:     return false;   // cannot import a given package more than once
1:   }
1: 
1: 
1:   public boolean isOptional() {
1:     logger.debug(LOG_ENTRY, "isOptional");
1:     logger.debug(LOG_EXIT, "isOptional", new Object[] {_optional});
1:     return _optional;
1:   }
1: 
1: 
1:   public boolean isSatisfied(Provider capability) {
1:     logger.debug(LOG_ENTRY, "isSatisfied", new Object[]{capability});
1:     if (capability.getType() != PACKAGE) { 
1:       logger.debug(LOG_EXIT, "isSatisfied", new Object[] {false});
1:       return false;
1:     }
1:     Dictionary<String, Object> dict = new Hashtable<String, Object> (capability.getAttributes());
1:     String version = (String) dict.get(Constants.VERSION_ATTRIBUTE);
1:     if (version != null) { 
1:       dict.put(Constants.VERSION_ATTRIBUTE, Version.parseVersion(version));
1:     }
1:     
0:     boolean allPresent = ModellingUtils.areMandatoryAttributesPresent(_attributes, capability);
1:     boolean result = allPresent && _filter.match(dict);
1:     logger.debug(LOG_EXIT, "isSatisfied", new Object[] {result});
1:     return result;
1:   }
1: 
1:   
1:   
1:   /**
1:   * This method turns an {@link ImportedPackageImpl} into a string suitable for a 
1:   * Provision-Bundle style package import.  
1:   * It will not include ;bundle-symbolic-name=bundleName;bundle-version=version attribute pairs
1:   * @return A String
1:   */
1:   @SuppressWarnings("deprecation")
1:   public String toDeploymentString() {
1:     logger.debug(LOG_ENTRY, "toDeploymentString");
1:     StringBuilder sb = new StringBuilder(_package);
1:     // Note that the RESOLUTION_DIRECTIVE is set in this map, so it will be
1:     // output automatically. p41 of the OSGi Core Spec v4.2 includes an example
1:     // Import-Package with a resolution:=mandatory directive on. We could choose to suppress
1:     // resolution:=mandatory on packages however, since mandatory is the default.
1:     for (Map.Entry<String, String> entry : _attributes.entrySet()) {
1:       String key = entry.getKey();
1:       String value = entry.getValue();
1:       if (!key.equals(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE)
1:           && !key.equals(Constants.BUNDLE_VERSION_ATTRIBUTE)
1:           && !key.equals(PACKAGE.toString())
1:           && !key.equals(Constants.PACKAGE_SPECIFICATION_VERSION)) {
1:         sb.append(";").append(key).append("=\"").append(value).append('"');
1:       } else {
1:         logger.debug("ignoring attribute {" + key + "=" + value + "} in ImportedPackageImpl.toDeploymentString()");
1:       }
1:     }
1:     String result = sb.toString();
1:     logger.debug(LOG_EXIT, "toDeploymentString", new Object[]{result});
1:     return result;
1:   }
1:   
1:   @Override
1:   public String toString() {
1:     return toDeploymentString();
1:   }
1: }
============================================================================