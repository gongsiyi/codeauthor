1:2d7219c: /*
1:2d7219c:  * Licensed to the Apache Software Foundation (ASF) under one
1:2d7219c:  * or more contributor license agreements.  See the NOTICE file
1:2d7219c:  * distributed with this work for additional information
1:2d7219c:  * regarding copyright ownership.  The ASF licenses this file
1:2d7219c:  * to you under the Apache License, Version 2.0 (the
1:2d7219c:  * "License"); you may not use this file except in compliance
1:2d7219c:  * with the License.  You may obtain a copy of the License at
1:2d7219c:  *
1:2d7219c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2d7219c:  *
1:2d7219c:  * Unless required by applicable law or agreed to in writing,
1:2d7219c:  * software distributed under the License is distributed on an
1:2d7219c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2d7219c:  * KIND, either express or implied.  See the License for the
1:2d7219c:  * specific language governing permissions and limitations
1:2d7219c:  * under the License.
2:2d7219c:  */
1:475ef33: package org.apache.aries.proxy.impl.common;
1:0ee069b: 
1:2d7219c: import java.io.IOException;
1:2d7219c: import java.io.InputStream;
1:2d7219c: import java.util.HashSet;
1:2d7219c: import java.util.Set;
15:2d7219c: 
1:5199fe7: import org.apache.aries.proxy.UnableToProxyException;
1:ef57cb3: import org.apache.aries.proxy.impl.NLS;
1:2d7219c: import org.objectweb.asm.ClassReader;
1:2d7219c: import org.objectweb.asm.ClassWriter;
2:2d7219c: /**
1:2d7219c:  * We need to override ASM's default behaviour in {@link #getCommonSuperClass(String, String)}
1:2d7219c:  * so that it doesn't load classes (which it was doing on the wrong {@link ClassLoader}
1:475ef33:  * anyway...)
1:2d7219c:  */
1:475ef33: public final class OSGiFriendlyClassWriter extends ClassWriter {
1:e6518d7: 
1:2d7219c:   private static final String OBJECT_INTERNAL_NAME = "java/lang/Object";
1:2d7219c:   private final ClassLoader loader;
1:f80358e: 
1:e6518d7:   
1:f80358e:   public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader) {
1:2d7219c:     super(arg0, arg1);
1:e6518d7:     
1:2d7219c:     this.loader = loader;
4:2d7219c:   }
1:54c5f49:   
1:f80358e:   public OSGiFriendlyClassWriter(int arg0, ClassLoader loader) {
1:2d7219c:     super(arg0);
1:e6518d7:     
1:2d7219c:     this.loader = loader;
1:2d7219c:   }
1:54c5f49: 
1:2d7219c:   /**
1:2d7219c:    * We provide an implementation that doesn't cause class loads to occur. It may
1:2d7219c:    * not be sufficient because it expects to find the common parent using a single
1:2d7219c:    * classloader, though in fact the common parent may only be loadable by another
1:2d7219c:    * bundle from which an intermediate class is loaded
1:f80358e:    *
1:f80358e:    * precondition: arg0 and arg1 are not equal. (checked before this method is called)
1:2d7219c:    */
1:54c5f49:   @Override
1:2d7219c:   protected final String getCommonSuperClass(String arg0, String arg1) {
1:2d7219c:     //If either is Object, then Object must be the answer
1:f80358e:     if(arg0.equals(OBJECT_INTERNAL_NAME) || arg1.equals(OBJECT_INTERNAL_NAME)) {
1:2d7219c:       return OBJECT_INTERNAL_NAME;
1:f80358e:     }
1:2d7219c:     Set<String> names = new HashSet<String>();
1:2d7219c:     names.add(arg0);
1:2d7219c:     names.add(arg1);
1:475ef33:     //Try loading the class (in ASM not for real)
1:2d7219c:     try {
1:2d7219c:       boolean bRunning = true;
1:2d7219c:       boolean aRunning = true;
1:2d7219c:       InputStream is;
1:5199fe7:       String arg00 = arg0;
1:5199fe7:       String arg11 = arg1;
1:5199fe7:       String unable = null;
1:2d7219c:       while(aRunning || bRunning ) {
1:88359ce:         if(aRunning) {
1:5199fe7:           is = loader.getResourceAsStream(arg00 + ".class");
1:88359ce:           if(is != null) {
1:88359ce:             ClassReader cr = new ClassReader(is);
1:5199fe7:             arg00 = cr.getSuperName();
1:0ee069b:             if(arg00 == null) {
1:0ee069b:               if (names.size() == 2) {
1:0ee069b:                 return OBJECT_INTERNAL_NAME; //arg0 is an interface
1:0ee069b:               }
1:0ee069b:               aRunning = false; //old arg00 was java.lang.Object
1:0ee069b:             } else if(!!!names.add(arg00)) {
1:5199fe7:               return arg00;
1:0ee069b:             }
1:475ef33:           } else {
1:475ef33:             //The class file isn't visible on this ClassLoader
1:5199fe7:             unable = arg0;
1:88359ce:             aRunning = false;
1:54c5f49:           }
1:88359ce:         }
1:88359ce:         if(bRunning) {
1:5199fe7:           is = loader.getResourceAsStream(arg11 + ".class");
1:88359ce:           if(is != null) {
1:88359ce:             ClassReader cr = new ClassReader(is);
1:5199fe7:             arg11 = cr.getSuperName();
1:0ee069b:             if(arg11 == null) {
1:0ee069b:               if (names.size() == 3) {
1:0ee069b:                 return OBJECT_INTERNAL_NAME;  //arg1 is an interface
1:0ee069b:               }
1:0ee069b:               bRunning = false; //old arg11 was java.lang.Object
1:0ee069b:             } else if(!!!names.add(arg11)) {
1:5199fe7:               return arg11;
1:0ee069b:             }
2:88359ce:           } else {
1:5199fe7:             unable = arg1;
1:88359ce:             bRunning = false;
1:88359ce:           }
1:2d7219c:         }
1:2d7219c:       }
1:0ee069b: 
1:5199fe7:       if (unable == null) {
1:5199fe7:           throw new RuntimeException(NLS.MESSAGES.getMessage("no.common.superclass", arg0, arg1));
1:5199fe7:       } else {
1:5199fe7:           throw new RuntimeException(new UnableToProxyException(unable, NLS.MESSAGES.getMessage("no.common.superclass", arg0, arg1)));
1:5199fe7:       }
1:2d7219c:     } catch (IOException e) {
1:2d7219c:       throw new RuntimeException(e);
1:475ef33:     }
1:2d7219c:   }
1:5199fe7: 
1:54c5f49: 
1:2d7219c: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:f80358e
/////////////////////////////////////////////////////////////////////////
1: 
1:   public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader) {
1:   public OSGiFriendlyClassWriter(int arg0, ClassLoader loader) {
/////////////////////////////////////////////////////////////////////////
1:    *
1:    * precondition: arg0 and arg1 are not equal. (checked before this method is called)
1:     if(arg0.equals(OBJECT_INTERNAL_NAME) || arg1.equals(OBJECT_INTERNAL_NAME)) {
1:     }
commit:0ee069b
/////////////////////////////////////////////////////////////////////////
0:     //---------------  see asm ow2 316320 which proposes putting the generic common cases in ClassWriter.internalGetCommonSuperClass
1: 
1: 
0:       return getCommonSuperClass(currentSuperClassInternalName, arg1);
0:       return getCommonSuperClass(arg0, currentSuperClassInternalName);
0:     //---------------- end asm 316320 proposal
/////////////////////////////////////////////////////////////////////////
1:             if(arg00 == null) {
1:               if (names.size() == 2) {
1:                 return OBJECT_INTERNAL_NAME; //arg0 is an interface
1:               }
1:               aRunning = false; //old arg00 was java.lang.Object
1:             } else if(!!!names.add(arg00)) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if(arg11 == null) {
1:               if (names.size() == 3) {
1:                 return OBJECT_INTERNAL_NAME;  //arg1 is an interface
1:               }
1:               bRunning = false; //old arg11 was java.lang.Object
1:             } else if(!!!names.add(arg11)) {
1:             }
/////////////////////////////////////////////////////////////////////////
commit:5199fe7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.UnableToProxyException;
/////////////////////////////////////////////////////////////////////////
1:       String arg00 = arg0;
1:       String arg11 = arg1;
1:       String unable = null;
1:           is = loader.getResourceAsStream(arg00 + ".class");
1:             arg00 = cr.getSuperName();
0:             if(arg00 == null)
0:             else if(!!!names.add(arg00))
1:               return arg00;
1:             unable = arg0;
1:           is = loader.getResourceAsStream(arg11 + ".class");
1:             arg11 = cr.getSuperName();
0:             if(arg11 == null)
0:             else if(!!!names.add(arg11))
1:               return arg11;
1:             unable = arg1;
1: 
1:         if (unable == null) {
1:             throw new RuntimeException(NLS.MESSAGES.getMessage("no.common.superclass", arg0, arg1));
1:         } else {
1:             throw new RuntimeException(new UnableToProxyException(unable, NLS.MESSAGES.getMessage("no.common.superclass", arg0, arg1)));
1:         }
author:Emily Jiang
-------------------------------------------------------------------------------
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  
0:   public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader, String currentClassInternalName, String currentSuperClassInternalName) {
1:     
0:     this.currentClassInternalName = currentClassInternalName;
0:     this.currentSuperClassInternalName = currentSuperClassInternalName;
0:   public OSGiFriendlyClassWriter(int arg0, ClassLoader loader, String currentClassInternalName, String currentSuperClassInternalName) {
1:     
0:     this.currentClassInternalName = currentClassInternalName;
0:     this.currentSuperClassInternalName = currentSuperClassInternalName;
/////////////////////////////////////////////////////////////////////////
1:   
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:54c5f49
/////////////////////////////////////////////////////////////////////////
0: import org.objectweb.asm.MethodVisitor;
0: import org.objectweb.asm.commons.JSRInlinerAdapter;
/////////////////////////////////////////////////////////////////////////
0:   private final boolean inlineJSR;
0:     inlineJSR = arg1 == COMPUTE_FRAMES;
0:     inlineJSR = arg0 == COMPUTE_FRAMES;
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public MethodVisitor visitMethod(int arg0, String arg1, String arg2,
0:       String arg3, String[] arg4) {
0:     MethodVisitor mv =  super.visitMethod(arg0, arg1, arg2, arg3, arg4);
1:     
0:     if(inlineJSR)
0:       mv = new JSRInlinerAdapter(mv, arg0, arg1, arg2, arg3, arg4);
1:     
0:     return mv;
1:   }
1: 
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.impl.common;
/////////////////////////////////////////////////////////////////////////
1:  * anyway...)
1: public final class OSGiFriendlyClassWriter extends ClassWriter {
/////////////////////////////////////////////////////////////////////////
0:     // If either of these class names are the current class then we can short
0:     // circuit to the superclass (which we already know)
/////////////////////////////////////////////////////////////////////////
1:     //Try loading the class (in ASM not for real)
/////////////////////////////////////////////////////////////////////////
1:             //The class file isn't visible on this ClassLoader
/////////////////////////////////////////////////////////////////////////
0:       if (unable == null) {
0:           throw new RuntimeException(NLS.MESSAGES.getMessage("no.common.superclass", arg0, arg1));
1:       } else {
0:           throw new RuntimeException(new UnableToProxyException(unable, NLS.MESSAGES.getMessage("no.common.superclass", arg0, arg1)));
1:       }
commit:88359ce
/////////////////////////////////////////////////////////////////////////
1:         if(aRunning) {
0:           is = loader.getResourceAsStream(arg0 + ".class");
1:           if(is != null) {
1:             ClassReader cr = new ClassReader(is);
0:             arg0 = cr.getSuperName();
0:             if(arg0 == null)
1:               aRunning = false;
0:             else if(!!!names.add(arg0))
0:               return arg0;
1:           } else {
1:           }
1:         if(bRunning) {
0:           is = loader.getResourceAsStream(arg1 + ".class");
1:           if(is != null) {
1:             ClassReader cr = new ClassReader(is);
0:             arg1 = cr.getSuperName();
0:             if(arg1 == null)
1:               bRunning = false;
0:             else if(!!!names.add(arg1))
0:               return arg1;
1:           } else {
1:           }
commit:2d7219c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.proxy.impl.weaving;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import org.objectweb.asm.ClassReader;
1: import org.objectweb.asm.ClassWriter;
1: /**
1:  * We need to override ASM's default behaviour in {@link #getCommonSuperClass(String, String)}
1:  * so that it doesn't load classes (which it was doing on the wrong {@link ClassLoader}
0:  * anyway...
1:  */
0: final class OSGiFriendlyClassWriter extends ClassWriter {
1: 
1:   private static final String OBJECT_INTERNAL_NAME = "java/lang/Object";
1:   private final ClassLoader loader;
0:   private String currentClassInternalName;
0:   private String currentSuperClassInternalName;
1:   
0:   public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader) {
1:     super(arg0, arg1);
1:     this.loader = loader;
1:   }
1:   
0:   public OSGiFriendlyClassWriter(int arg0, ClassLoader loader) {
1:     super(arg0);
1:     this.loader = loader;
1:   }
1: 
1:   /**
1:    * We provide an implementation that doesn't cause class loads to occur. It may
1:    * not be sufficient because it expects to find the common parent using a single
1:    * classloader, though in fact the common parent may only be loadable by another
1:    * bundle from which an intermediate class is loaded
1:    */
0:   @Override
1:   protected final String getCommonSuperClass(String arg0, String arg1) {
0:     //If the two are equal then return either
0:     if(arg0.equals(arg1))
0:       return arg0;
1:     
1:     //If either is Object, then Object must be the answer
0:     if(arg0.equals(OBJECT_INTERNAL_NAME) || arg1.equals(OBJECT_INTERNAL_NAME))
1:       return OBJECT_INTERNAL_NAME;
1:     
0:     //We can't load the class being woven, so call again passing in the supertype
0:     if(arg0.equals(currentClassInternalName))
0:       getCommonSuperClass(currentSuperClassInternalName, arg1);
0:     else if (arg1.equals(currentClassInternalName))
0:       getCommonSuperClass(arg0, currentSuperClassInternalName);
1:     
1:     Set<String> names = new HashSet<String>();
1:     names.add(arg0);
1:     names.add(arg1);
0:     //Try loading the class (in ASM)
1:     try {
1:       
1:       boolean bRunning = true;
1:       boolean aRunning = true;
1:       InputStream is;
1:       
1:       while(aRunning || bRunning ) {
0:         is = loader.getResourceAsStream(arg0 + ".class");
0:         if(is != null) {
0:           ClassReader cr = new ClassReader(is);
0:           arg0 = cr.getSuperName();
0:           if(arg0 == null)
0:             aRunning = false;
0:           else if(!!!names.add(arg0))
0:             return arg0;
0:         } else {
0:           aRunning = false;
1:         }
1:         
0:         is = loader.getResourceAsStream(arg1 + ".class");
0:         if(is != null) {
0:           ClassReader cr = new ClassReader(is);
0:           arg1 = cr.getSuperName();
0:           if(arg1 == null)
0:             bRunning = false;
0:           else if(!!!names.add(arg1))
0:             return arg1;
0:         } else {
0:           bRunning = false;
1:         }
1:       }
1:       
0:       throw new RuntimeException("Unable to locate common superclass, start looking outside the loader's bundle");
1:     } catch (IOException e) {
1:       throw new RuntimeException(e);
1:     }
1:   }
1: 
1:   /**
0:    * We need access to the super's name and our class name
1:    */
0:   @Override
0:   public final void visit(int arg0, int arg1, String arg2, String arg3, String arg4,
0:       String[] arg5) {
0:     currentClassInternalName = arg2;
0:     currentSuperClassInternalName = arg4;
0:     super.visit(arg0, arg1, arg2, arg3, arg4, arg5);
1:   }
1: 
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ef57cb3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.NLS;
/////////////////////////////////////////////////////////////////////////
0:       throw new RuntimeException(NLS.MESSAGES.getMessage("no.common.superclass", arg0, arg1));
============================================================================