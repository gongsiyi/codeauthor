1:e8ec7a5: /*
1:e8ec7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:e8ec7a5:  * or more contributor license agreements.  See the NOTICE file
1:e8ec7a5:  * distributed with this work for additional information
1:e8ec7a5:  * regarding copyright ownership.  The ASF licenses this file
1:e8ec7a5:  * to you under the Apache License, Version 2.0 (the
1:e8ec7a5:  * "License"); you may not use this file except in compliance
1:e8ec7a5:  * with the License.  You may obtain a copy of the License at
1:e8ec7a5:  *
1:e8ec7a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e8ec7a5:  *
1:e8ec7a5:  * Unless required by applicable law or agreed to in writing,
1:e8ec7a5:  * software distributed under the License is distributed on an
1:e8ec7a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e8ec7a5:  * KIND, either express or implied.  See the License for the
1:e8ec7a5:  * specific language governing permissions and limitations
1:e8ec7a5:  * under the License.
1:e8ec7a5:  */
1:e8ec7a5: package org.apache.aries.application.resolver.obr.impl;
4:e8ec7a5: 
1:792f3de: import java.util.ArrayList;
1:792f3de: import java.util.Collection;
1:e8ec7a5: import java.util.Dictionary;
1:e8ec7a5: import java.util.List;
1:e8ec7a5: import java.util.Map;
1:e8ec7a5: 
1:e8ec7a5: import org.apache.aries.application.Content;
1:792f3de: import org.apache.aries.application.modelling.ImportedBundle;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:792f3de: import org.apache.felix.bundlerepository.Capability;
1:792f3de: import org.apache.felix.bundlerepository.Requirement;
1:792f3de: import org.apache.felix.bundlerepository.Resource;
1:e8ec7a5: import org.osgi.framework.Filter;
1:e8ec7a5: import org.osgi.framework.FrameworkUtil;
1:e8ec7a5: import org.osgi.framework.InvalidSyntaxException;
1:e8ec7a5: import org.osgi.framework.ServiceReference;
1:e8ec7a5: import org.osgi.framework.Version;
1:e8ec7a5: 
1:e8ec7a5: public class ApplicationResourceImpl implements Resource
2:e8ec7a5: {
1:e8ec7a5:   private String _symbolicName;
1:e8ec7a5:   private Version _version;
1:792f3de:   private List<Requirement> _requirements = new ArrayList<Requirement>();
1:e8ec7a5:   
1:c4ca40b:   private static class FilterWrapper implements Filter
1:e8ec7a5:   {
1:e8ec7a5:     private Filter delgate;
1:e8ec7a5:     
1:e8ec7a5:     public FilterWrapper(Filter f)
1:e8ec7a5:     {
1:e8ec7a5:       delgate = f;
2:e8ec7a5:     }
1:e8ec7a5:     
1:e8ec7a5:     public boolean match(ServiceReference reference)
1:e8ec7a5:     {
1:e8ec7a5:       return delgate.match(reference);
1:e8ec7a5:     }
1:e8ec7a5: 
1:e8ec7a5:     public boolean match(Dictionary dictionary)
1:e8ec7a5:     {
1:e8ec7a5:       boolean result = delgate.match(dictionary);
1:e8ec7a5:       return result;
1:e8ec7a5:     }
1:e8ec7a5: 
1:e8ec7a5:     public boolean matchCase(Dictionary dictionary)
1:e8ec7a5:     {
1:e8ec7a5:       return delgate.matchCase(dictionary);
1:e8ec7a5:     }
1:b49a314: 
1:b49a314:     public boolean matches(Map<java.lang.String,?> map) {
1:b49a314:         return delgate.matches(map);
1:b49a314:     }
1:e8ec7a5:     
1:e8ec7a5:     public String toString()
1:e8ec7a5:     {
1:e8ec7a5:       return delgate.toString();
1:e8ec7a5:     }
1:e8ec7a5:   }
1:e8ec7a5:   
1:e8ec7a5:   public ApplicationResourceImpl(String appName, Version appVersion, List<Content> appContent)
1:e8ec7a5:   {
1:e8ec7a5:     _symbolicName = appName;
1:e8ec7a5:     _version = appVersion;
1:792f3de:     
1:e8ec7a5:  
1:792f3de:     for (int i = 0; i < appContent.size(); i++) {
1:e8ec7a5:       Content c = appContent.get(i);
1:e8ec7a5:       
1:e8ec7a5:       String comment = "Requires " + Resource.SYMBOLIC_NAME + " " + c.getContentName() + " with attributes " + c.getAttributes();
1:e8ec7a5:       
1:e8ec7a5:       String resolution = c.getDirective("resolution");
1:e8ec7a5: 
1:e8ec7a5:       boolean optional = Boolean.valueOf(resolution);
1:e8ec7a5:       
1:e8ec7a5:       String f = ManifestHeaderProcessor.generateFilter(Resource.SYMBOLIC_NAME, c.getContentName(), c.getAttributes());
1:e8ec7a5:       Filter filter;
1:e8ec7a5:       try {
1:e8ec7a5:         filter = FrameworkUtil.createFilter(f);
1:792f3de:         _requirements.add(new RequirementImpl("bundle", new FilterWrapper(filter), false, optional, false, comment));
1:e8ec7a5:       } catch (InvalidSyntaxException e) {
1:792f3de:         // TODO work out what to do if this happens. If it does our filter generation code is bust.
1:e8ec7a5:       }
1:e8ec7a5:     }
1:e8ec7a5:   }
1:e8ec7a5:   
1:792f3de:   public ApplicationResourceImpl(String appName, Version appVersion, Collection<ImportedBundle> inputs)
1:792f3de:   {
1:792f3de:     _symbolicName = appName;
1:792f3de:     _version = appVersion;
1:792f3de:     
1:792f3de:     for (ImportedBundle match : inputs) {
1:792f3de:       _requirements.add(new RequirementImpl(match));
1:792f3de:     }
1:792f3de:   }
1:e8ec7a5:   public Capability[] getCapabilities()
1:e8ec7a5:   {
2:e8ec7a5:     return null;
1:e8ec7a5:   }
1:e8ec7a5: 
1:e8ec7a5:   public String[] getCategories()
1:e8ec7a5:   {
1:e8ec7a5:     return null;
1:e8ec7a5:   }
1:e8ec7a5: 
1:e8ec7a5:   public String getId()
1:e8ec7a5:   {
1:e8ec7a5:     return _symbolicName;
1:e8ec7a5:   }
1:e8ec7a5: 
1:e8ec7a5:   public String getPresentationName()
1:e8ec7a5:   {
1:e8ec7a5:     return _symbolicName;
1:e8ec7a5:   }
1:e8ec7a5: 
1:e8ec7a5:   public Map getProperties()
1:e8ec7a5:   {
1:e8ec7a5:     return null;
1:e8ec7a5:   }
1:e8ec7a5: 
1:e8ec7a5:   public Requirement[] getRequirements()
1:e8ec7a5:   {
1:792f3de:     if (_requirements!= null) {
1:792f3de:     Requirement[] reqs = new Requirement[_requirements.size()];
1:792f3de:     int index =0;
1:792f3de:     for (Requirement req: _requirements) {
1:792f3de:       reqs[index++] = req;
1:792f3de:     }
1:792f3de:     return reqs;
1:792f3de:     } else {
1:792f3de:       return null;
1:792f3de:     }
1:792f3de:       
1:e8ec7a5:   }
1:e8ec7a5: 
1:e8ec7a5:   public String getSymbolicName()
1:e8ec7a5:   {
1:e8ec7a5:     return _symbolicName;
1:e8ec7a5:   }
1:e8ec7a5: 
1:e8ec7a5:   public java.net.URL getURL()
1:e8ec7a5:   {
1:e8ec7a5:     return null;
1:e8ec7a5:   }
1:e8ec7a5: 
1:e8ec7a5:   public Version getVersion()
1:e8ec7a5:   {
1:e8ec7a5:     return _version;
1:e8ec7a5:   }
1:248447e: 
1:248447e:   public Long getSize()
1:248447e:   {
1:248447e:     return 0l;
1:248447e:   }
1:248447e: 
1:248447e:   public String getURI()
1:248447e:   {
1:248447e:     return null;
1:248447e:   }
1:248447e: 
1:248447e:   public boolean isLocal()
1:248447e:   {
1:248447e:     return false;
1:248447e:   }
1:e8ec7a5: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:b49a314
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean matches(Map<java.lang.String,?> map) {
1:         return delgate.matches(map);
1:     }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:792f3de
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import org.apache.aries.application.modelling.ImportedBundle;
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.apache.felix.bundlerepository.Resource;
1:   private List<Requirement> _requirements = new ArrayList<Requirement>();
/////////////////////////////////////////////////////////////////////////
1:  
1:     for (int i = 0; i < appContent.size(); i++) {
/////////////////////////////////////////////////////////////////////////
1:         _requirements.add(new RequirementImpl("bundle", new FilterWrapper(filter), false, optional, false, comment));
1:         // TODO work out what to do if this happens. If it does our filter generation code is bust.
1:   public ApplicationResourceImpl(String appName, Version appVersion, Collection<ImportedBundle> inputs)
1:   {
1:     _symbolicName = appName;
1:     _version = appVersion;
1:     
1:     for (ImportedBundle match : inputs) {
1:       _requirements.add(new RequirementImpl(match));
1:     }
1:   }
/////////////////////////////////////////////////////////////////////////
1:     if (_requirements!= null) {
1:     Requirement[] reqs = new Requirement[_requirements.size()];
1:     int index =0;
1:     for (Requirement req: _requirements) {
1:       reqs[index++] = req;
1:     }
1:     return reqs;
1:     } else {
1:       return null;
1:     }
1:       
/////////////////////////////////////////////////////////////////////////
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:248447e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.felix.bundlerepository.Capability;
0: import org.apache.felix.bundlerepository.Repository;
0: import org.apache.felix.bundlerepository.Requirement;
0: import org.apache.felix.bundlerepository.Resource;
/////////////////////////////////////////////////////////////////////////
1: 
1:   public Long getSize()
1:   {
1:     return 0l;
1:   }
1: 
1:   public String getURI()
1:   {
0:     // TODO Auto-generated method stub
1:     return null;
1:   }
1: 
1:   public boolean isLocal()
1:   {
1:     return false;
1:   }
commit:e8ec7a5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.resolver.obr.impl;
1: 
1: import java.util.Dictionary;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.Content;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
0: import org.osgi.service.obr.Capability;
0: import org.osgi.service.obr.Repository;
0: import org.osgi.service.obr.Requirement;
0: import org.osgi.service.obr.Resource;
1: 
1: public class ApplicationResourceImpl implements Resource
1: {
1:   private String _symbolicName;
1:   private Version _version;
0:   private Requirement[] _requirements;
1:   
0:   private class FilterWrapper implements Filter
1:   {
1:     private Filter delgate;
1:     
1:     public FilterWrapper(Filter f)
1:     {
1:       delgate = f;
1:     }
1:     
1:     public boolean match(ServiceReference reference)
1:     {
1:       return delgate.match(reference);
1:     }
1: 
1:     public boolean match(Dictionary dictionary)
1:     {
1:       boolean result = delgate.match(dictionary);
1:       
0:       System.out.println("Filter:     " + delgate);
0:       System.out.println("Dictionary: " + dictionary);
0:       System.out.println("Result:     " + result);
1:       
1:       return result;
1:     }
1: 
1:     public boolean matchCase(Dictionary dictionary)
1:     {
1:       return delgate.matchCase(dictionary);
1:     }
1:     
1:     public String toString()
1:     {
1:       return delgate.toString();
1:     }
1:   }
1:   
1:   public ApplicationResourceImpl(String appName, Version appVersion, List<Content> appContent)
1:   {
1:     _symbolicName = appName;
1:     _version = appVersion;
1:     
0:     _requirements = new Requirement[appContent.size()];
0:     for (int i = 0; i < _requirements.length; i++) {
1:       Content c = appContent.get(i);
1:       
1:       String comment = "Requires " + Resource.SYMBOLIC_NAME + " " + c.getContentName() + " with attributes " + c.getAttributes();
1:       
1:       String resolution = c.getDirective("resolution");
1: 
1:       boolean optional = Boolean.valueOf(resolution);
1:       
1:       String f = ManifestHeaderProcessor.generateFilter(Resource.SYMBOLIC_NAME, c.getContentName(), c.getAttributes());
1:       Filter filter;
1:       try {
1:         filter = FrameworkUtil.createFilter(f);
0:         _requirements[i] = new RequirementImpl("bundle", new FilterWrapper(filter), false, optional, false, comment);
1:       } catch (InvalidSyntaxException e) {
0:         // TODO work out what to do if his happens. If it does our filter generation code is bust.
1:       }
1:     }
1:   }
1:   
1:   public Capability[] getCapabilities()
1:   {
1:     return null;
1:   }
1: 
1:   public String[] getCategories()
1:   {
1:     return null;
1:   }
1: 
1:   public String getId()
1:   {
1:     return _symbolicName;
1:   }
1: 
1:   public String getPresentationName()
1:   {
1:     return _symbolicName;
1:   }
1: 
1:   public Map getProperties()
1:   {
1:     return null;
1:   }
1: 
0:   public Repository getRepository()
1:   {
1:     return null;
1:   }
1: 
1:   public Requirement[] getRequirements()
1:   {
0:     return _requirements;
1:   }
1: 
1:   public String getSymbolicName()
1:   {
1:     return _symbolicName;
1:   }
1: 
1:   public java.net.URL getURL()
1:   {
1:     return null;
1:   }
1: 
1:   public Version getVersion()
1:   {
1:     return _version;
1:   }
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:c4ca40b
/////////////////////////////////////////////////////////////////////////
1:   private static class FilterWrapper implements Filter
/////////////////////////////////////////////////////////////////////////
============================================================================