1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:12260c5: package org.apache.aries.subsystem.core.archive;
1:12260c5: 
1:12260c5: import java.util.Collection;
1:12260c5: import java.util.Collections;
1:12260c5: import java.util.HashMap;
1:12260c5: import java.util.Map;
1:12260c5: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.AbstractCapability;
1:12260c5: import org.osgi.framework.namespace.BundleNamespace;
1:12260c5: import org.osgi.resource.Resource;
1:12260c5: 
1:12260c5: public class ProvideBundleCapability extends AbstractCapability {
1:12260c5: 	public static final String ATTRIBUTE_BUNDLE_VERSION = BundleNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
1:12260c5: 	public static final String DIRECTIVE_EFFECTIVE = BundleNamespace.CAPABILITY_EFFECTIVE_DIRECTIVE;
1:12260c5: 	public static final String DIRECTIVE_FRAGMENT_ATTACHMENT = BundleNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE;
1:12260c5: 	public static final String DIRECTIVE_MANDATORY = BundleNamespace.CAPABILITY_MANDATORY_DIRECTIVE;
1:12260c5: 	public static final String DIRECTIVE_SINGLETON = BundleNamespace.CAPABILITY_SINGLETON_DIRECTIVE;
1:12260c5: 	public static final String DIRECTIVE_USES = BundleNamespace.CAPABILITY_USES_DIRECTIVE;
1:12260c5: 	public static final String NAMESPACE = BundleNamespace.BUNDLE_NAMESPACE;
1:12260c5: 	
1:12260c5: 	private static Map<String, Object> initializeAttributes(BundleSymbolicNameHeader bsn, BundleVersionHeader version) {
1:12260c5: 		if (version == null) {
1:12260c5: 			version = new BundleVersionHeader();
1:12260c5: 		}
1:12260c5: 		Clause clause = bsn.getClauses().get(0);
1:12260c5: 		Collection<Attribute> attributes = clause.getAttributes();
1:12260c5: 		Map<String, Object> result = new HashMap<String, Object>(attributes.size() + 2);
1:12260c5: 		result.put(NAMESPACE, clause.getPath());
1:12260c5: 		result.put(ATTRIBUTE_BUNDLE_VERSION, version.getValue());
1:12260c5: 		for (Attribute attribute : attributes) {
1:12260c5: 			result.put(attribute.getName(), attribute.getValue());
1:12260c5: 		}
1:12260c5: 		return Collections.unmodifiableMap(result);
1:12260c5: 	}
1:12260c5: 	
1:12260c5: 	private static Map<String, String> initializeDirectives(Collection<Directive> directives) {
1:12260c5: 		if (directives.isEmpty())
1:12260c5: 			return Collections.emptyMap();
1:12260c5: 		Map<String, String> result = new HashMap<String, String>(directives.size());
1:12260c5: 		for (Directive directive : directives) {
1:12260c5: 			result.put(directive.getName(), directive.getValue());
1:12260c5: 		}
1:12260c5: 		return Collections.unmodifiableMap(result);
1:12260c5: 	}
1:12260c5: 	
1:12260c5: 	private final Map<String, Object> attributes;
1:12260c5: 	private final Map<String, String> directives;
1:12260c5: 	private final Resource resource;
1:12260c5: 	
1:12260c5: 	public ProvideBundleCapability(BundleSymbolicNameHeader bsn, BundleVersionHeader version, Resource resource) {
1:12260c5: 		if (resource == null)
1:12260c5: 			throw new NullPointerException("Missing required parameter: resource");
1:12260c5: 		this.resource = resource;
1:12260c5: 		attributes = initializeAttributes(bsn, version);
1:12260c5: 		directives = initializeDirectives(bsn.getClauses().get(0).getDirectives());
1:12260c5: 	}
1:12260c5: 
1:12260c5: 	@Override
1:12260c5: 	public Map<String, Object> getAttributes() {
1:12260c5: 		return attributes;
1:12260c5: 	}
1:12260c5: 
1:12260c5: 	@Override
1:12260c5: 	public Map<String, String> getDirectives() {
1:12260c5: 		return directives;
1:12260c5: 	}
1:12260c5: 
1:12260c5: 	@Override
1:12260c5: 	public String getNamespace() {
1:12260c5: 		return NAMESPACE;
1:12260c5: 	}
1:12260c5: 
1:12260c5: 	@Override
1:12260c5: 	public Resource getResource() {
1:12260c5: 		return resource;
1:12260c5: 	}
1:12260c5: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.AbstractCapability;
commit:12260c5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.resource.AbstractCapability;
1: import org.osgi.framework.namespace.BundleNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class ProvideBundleCapability extends AbstractCapability {
1: 	public static final String ATTRIBUTE_BUNDLE_VERSION = BundleNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
1: 	public static final String DIRECTIVE_EFFECTIVE = BundleNamespace.CAPABILITY_EFFECTIVE_DIRECTIVE;
1: 	public static final String DIRECTIVE_FRAGMENT_ATTACHMENT = BundleNamespace.CAPABILITY_FRAGMENT_ATTACHMENT_DIRECTIVE;
1: 	public static final String DIRECTIVE_MANDATORY = BundleNamespace.CAPABILITY_MANDATORY_DIRECTIVE;
1: 	public static final String DIRECTIVE_SINGLETON = BundleNamespace.CAPABILITY_SINGLETON_DIRECTIVE;
1: 	public static final String DIRECTIVE_USES = BundleNamespace.CAPABILITY_USES_DIRECTIVE;
1: 	public static final String NAMESPACE = BundleNamespace.BUNDLE_NAMESPACE;
1: 	
1: 	private static Map<String, Object> initializeAttributes(BundleSymbolicNameHeader bsn, BundleVersionHeader version) {
1: 		if (version == null) {
1: 			version = new BundleVersionHeader();
1: 		}
1: 		Clause clause = bsn.getClauses().get(0);
1: 		Collection<Attribute> attributes = clause.getAttributes();
1: 		Map<String, Object> result = new HashMap<String, Object>(attributes.size() + 2);
1: 		result.put(NAMESPACE, clause.getPath());
1: 		result.put(ATTRIBUTE_BUNDLE_VERSION, version.getValue());
1: 		for (Attribute attribute : attributes) {
1: 			result.put(attribute.getName(), attribute.getValue());
1: 		}
1: 		return Collections.unmodifiableMap(result);
1: 	}
1: 	
1: 	private static Map<String, String> initializeDirectives(Collection<Directive> directives) {
1: 		if (directives.isEmpty())
1: 			return Collections.emptyMap();
1: 		Map<String, String> result = new HashMap<String, String>(directives.size());
1: 		for (Directive directive : directives) {
1: 			result.put(directive.getName(), directive.getValue());
1: 		}
1: 		return Collections.unmodifiableMap(result);
1: 	}
1: 	
1: 	private final Map<String, Object> attributes;
1: 	private final Map<String, String> directives;
1: 	private final Resource resource;
1: 	
1: 	public ProvideBundleCapability(BundleSymbolicNameHeader bsn, BundleVersionHeader version, Resource resource) {
1: 		if (resource == null)
1: 			throw new NullPointerException("Missing required parameter: resource");
1: 		this.resource = resource;
1: 		attributes = initializeAttributes(bsn, version);
1: 		directives = initializeDirectives(bsn.getClauses().get(0).getDirectives());
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return attributes;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return directives;
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return NAMESPACE;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================