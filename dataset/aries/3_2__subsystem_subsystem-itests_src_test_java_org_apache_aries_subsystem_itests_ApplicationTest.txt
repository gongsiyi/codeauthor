1:e8a0b01: /*
1:e8a0b01:  * Licensed to the Apache Software Foundation (ASF) under one
1:e8a0b01:  * or more contributor license agreements.  See the NOTICE file
1:e8a0b01:  * distributed with this work for additional information
1:e8a0b01:  * regarding copyright ownership.  The ASF licenses this file
1:e8a0b01:  * to you under the Apache License, Version 2.0 (the
1:e8a0b01:  * "License"); you may not use this file except in compliance
1:e8a0b01:  * with the License.  You may obtain a copy of the License at
1:e8a0b01:  *
1:e8a0b01:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e8a0b01:  *
1:e8a0b01:  * Unless required by applicable law or agreed to in writing,
1:e8a0b01:  * software distributed under the License is distributed on an
1:e8a0b01:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e8a0b01:  * KIND, either express or implied.  See the License for the
1:e8a0b01:  * specific language governing permissions and limitations
1:e8a0b01:  * under the License.
1:e8a0b01:  */
1:e8a0b01: package org.apache.aries.subsystem.itests;
3:e8a0b01: 
1:fc759fb: import java.io.ByteArrayOutputStream;
1:e8a0b01: import java.io.File;
1:fc759fb: import java.io.FileInputStream;
1:fc759fb: import java.io.IOException;
1:7e004f1: import java.util.HashMap;
1:7e004f1: import java.util.Map;
1:fc759fb: import java.util.jar.Attributes;
1:fc759fb: import java.util.jar.JarOutputStream;
1:fc759fb: import java.util.jar.Manifest;
1:7e004f1: 
1:fc759fb: import org.apache.aries.subsystem.itests.util.TestCapability;
1:fc759fb: import org.apache.aries.subsystem.itests.util.TestRepository;
1:fc759fb: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1:e8a0b01: import org.junit.Before;
1:fc759fb: import org.junit.Test;
1:fc759fb: import org.osgi.framework.Bundle;
1:fc759fb: import org.osgi.framework.Constants;
1:fc759fb: import org.osgi.framework.Version;
1:fc759fb: import org.osgi.framework.namespace.IdentityNamespace;
1:fc759fb: import org.osgi.framework.namespace.PackageNamespace;
1:71fe81a: import org.osgi.resource.Resource;
1:fc759fb: import org.osgi.service.repository.Repository;
1:e8a0b01: import org.osgi.service.subsystem.Subsystem;
1:fc759fb: import org.osgi.service.subsystem.SubsystemConstants;
1:fc759fb: 
1:e8a0b01: public class ApplicationTest extends SubsystemTest {
1:7e004f1: 	/*
1:7e004f1: 	 * Subsystem-SymbolicName: application.a.esa
1:574fba9: 	 * Subsystem-Content: bundle.a.jar
1:7e004f1: 	 */
1:7e004f1: 	private static final String APPLICATION_A = "application.a.esa";
1:574fba9: 	/*
1:574fba9: 	 * Subsystem-SymbolicName: application.b.esa
1:574fba9: 	 * Subsystem-Content: bundle.c.jar
1:574fba9: 	 */
1:574fba9: 	private static final String APPLICATION_B = "application.b.esa";
1:7e004f1: 	/*
1:7e004f1: 	 * Bundle-SymbolicName: bundle.a.jar
1:7e004f1: 	 * Require-Capability: foo; filter:="(foo=bar)"
1:7e004f1: 	 */
1:7e004f1: 	private static final String BUNDLE_A = "bundle.a.jar";
1:7e004f1: 	/*
1:7e004f1: 	 * Bundle-SymbolicName: bundle.b.jar
1:7e004f1: 	 * Provide-Capability: foo; foo=bar
1:7e004f1: 	 */
1:7e004f1: 	private static final String BUNDLE_B = "bundle.b.jar";
1:574fba9: 	/*
1:574fba9: 	 * Bundle-SymbolicName: bundle.c.jar
1:574fba9: 	 * Require-Bundle: bundle.b.jar
1:574fba9: 	 */
1:574fba9: 	private static final String BUNDLE_C = "bundle.c.jar";
1:7e004f1: 	
1:7e004f1: 	private static boolean createdTestFiles;
1:7e004f1: 	
1:7e004f1: 	@Before
1:57b6627: 	public void createTestFiles() throws Exception {
1:7e004f1: 		if (createdTestFiles)
1:7e004f1: 			return;
1:7e004f1: 		createBundleA();
1:7e004f1: 		createBundleB();
1:574fba9: 		createBundleC();
1:7e004f1: 		createApplicationA();
1:574fba9: 		createApplicationB();
1:7e004f1: 		createdTestFiles = true;
1:7e004f1: 	}
1:574fba9: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), version("1.0.0"),
1:57b6627: 				new Header(Constants.REQUIRE_CAPABILITY, "foo; filter:=\"(foo=bar)\""));
1:574fba9: 	}
1:7e004f1: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B), version("1.0.0"), 
1:57b6627: 				new Header(Constants.PROVIDE_CAPABILITY, "foo; foo=bar"));
1:7e004f1: 	}
1:7e004f1: 	
1:57b6627: 	private void createBundleC() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_C), version("1.0.0"), requireBundle(BUNDLE_B));
1:7e004f1: 	}
1:7e004f1: 	
1:57b6627: 	private void createApplicationA() throws IOException {
1:7e004f1: 		createApplicationAManifest();
1:7e004f1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1:7e004f1: 	}
1:7e004f1: 	
1:57b6627: 	private void createApplicationB() throws IOException {
1:574fba9: 		createApplicationBManifest();
1:574fba9: 		createSubsystem(APPLICATION_B, BUNDLE_C);
1:574fba9: 	}
1:574fba9: 	
1:57b6627: 	private void createApplicationAManifest() throws IOException {
1:7e004f1: 		Map<String, String> attributes = new HashMap<String, String>();
1:7e004f1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:7e004f1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:7e004f1: 		createManifest(APPLICATION_A + ".mf", attributes);
1:7e004f1: 	}
1:7e004f1: 	
1:57b6627: 	private void createApplicationBManifest() throws IOException {
1:574fba9: 		Map<String, String> attributes = new HashMap<String, String>();
1:574fba9: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:574fba9: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_C);
1:574fba9: 		createManifest(APPLICATION_B + ".mf", attributes);
1:574fba9: 	}
1:574fba9: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:57b6627: 		createApplication("application1", "tb1.jar");
2:fc759fb: 	}
1:fc759fb: 	
1:875a6d6: 	public void setUp() throws Exception {
1:fc759fb: 		super.setUp();
2:fc759fb: 		try {
1:fc759fb: 			serviceRegistrations.add(
1:fc759fb: 					bundleContext.registerService(
1:fc759fb: 							Repository.class, 
1:fc759fb: 							createTestRepository(), 
1:fc759fb: 							null));
1:fc759fb: 		}
1:fc759fb: 		catch (IOException e) {
1:fc759fb: 			throw new RuntimeException(e);
1:fc759fb: 		}
1:fc759fb: 	}
1:fc759fb:     
1:fc759fb: 	/*
1:fc759fb: 	 * Subsystem application1 has content bundle tb1.jar.
1:fc759fb: 	 * Bundle tb1.jar has an import package dependency on org.apache.aries.subsystem.itests.tb3.
1:fc759fb: 	 */
1:7e004f1:     @Test
1:fc759fb:     public void testApplication1() throws Exception {
1:fc759fb:     	Subsystem application1 = installSubsystemFromFile("application1.esa");
1:fc759fb:     	try {
1:fc759fb: 	    	assertSymbolicName("org.apache.aries.subsystem.application1", application1);
1:fc759fb: 			assertVersion("0.0.0", application1);
1:fc759fb: 			assertType(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION, application1);
1:fc759fb: 			assertChildren(0, application1);
1:fc759fb: 			assertConstituents(2, application1);
1:fc759fb: 			startSubsystem(application1);
1:fc759fb: 			assertBundleState(Bundle.RESOLVED|Bundle.ACTIVE, "org.apache.aries.subsystem.itests.tb1", application1);
1:fc759fb: 			assertBundleState(Bundle.RESOLVED|Bundle.ACTIVE, "org.apache.aries.subsystem.itests.tb3", getRootSubsystem());
1:fc759fb:     	}
1:fc759fb:     	finally {
1:574fba9:     		stopSubsystemSilently(application1);
1:574fba9:     		uninstallSubsystemSilently(application1);
1:574fba9:     	}
1:574fba9:     }
1:574fba9:     
1:574fba9:     @Test
1:574fba9:     public void testRequireBundle() throws Exception {
1:574fba9:     	File file = new File(BUNDLE_B);
1:f615d56:     	// The following input stream is closed by the bundle context.
1:574fba9:     	Bundle b = getRootSubsystem().getBundleContext().installBundle(file.toURI().toString(), new FileInputStream(file));
1:574fba9:     	try {
1:574fba9: 	    	Subsystem application = installSubsystemFromFile(APPLICATION_B);
1:574fba9: 	    	try {
1:574fba9: 	    		startSubsystem(application);
1:574fba9: 	    	}
1:574fba9: 	    	finally {
1:574fba9: 	    		stopSubsystemSilently(application);
1:574fba9: 	    		uninstallSubsystemSilently(application);
1:574fba9: 	    	}
1:574fba9:     	}
1:574fba9:     	finally {
1:67ef08f:     		uninstallSilently(b);
1:7e004f1:     	}
1:fc759fb:     }
1:e8a0b01:     
1:fc759fb:     @Test
1:7e004f1:     public void testRequireCapability() throws Exception {
1:7e004f1:     	File file = new File(BUNDLE_B);
1:f615d56:     	// The following input stream is closed by the bundle context.
1:7e004f1:     	Bundle b = getRootSubsystem().getBundleContext().installBundle(file.toURI().toString(), new FileInputStream(file));
1:7e004f1:     	try {
1:7e004f1: 	    	Subsystem application = installSubsystemFromFile(APPLICATION_A);
1:7e004f1: 	    	try {
1:7e004f1: 	    		startSubsystem(application);
1:7e004f1: 	    	}
1:7e004f1: 	    	finally {
1:574fba9: 	    		stopSubsystemSilently(application);
1:574fba9: 	    		uninstallSubsystemSilently(application);
1:7e004f1: 	    	}
1:7e004f1:     	}
1:7e004f1:     	finally {
1:67ef08f:     		uninstallSilently(b);
1:7e004f1:     	}
1:fc759fb:     }
1:7e004f1:     
1:fc759fb:     private byte[] createTestBundle3Content() throws IOException {
1:fc759fb:     	Manifest manifest = new Manifest();
1:fc759fb:     	manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:fc759fb:     	manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.subsystem.itests.tb3");
1:fc759fb:     	manifest.getMainAttributes().putValue(Constants.EXPORT_PACKAGE, "org.apache.aries.subsystem.itests.tb3");
1:fc759fb:     	ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:fc759fb:     	JarOutputStream jos = new JarOutputStream(baos, manifest);
1:fc759fb:     	jos.close();
1:fc759fb:     	return baos.toByteArray();
1:fc759fb:     }
1:fc759fb:     
1:fc759fb:     private Resource createTestBundle3Resource() throws IOException {
1:fc759fb:     	return new TestRepositoryContent.Builder()
1:fc759fb:     	.capability(
1:fc759fb:     			new TestCapability.Builder()
1:fc759fb:     			.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:fc759fb:     			.attribute(IdentityNamespace.IDENTITY_NAMESPACE, "org.apache.aries.subsystem.itests.tb3")
1:fc759fb:     			.attribute(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, Version.emptyVersion)
1:fc759fb:     			.attribute(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_BUNDLE))
1:fc759fb:     	.capability(
1:fc759fb:     			new TestCapability.Builder()
1:fc759fb:     			.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:fc759fb:     			.attribute(PackageNamespace.PACKAGE_NAMESPACE, "org.apache.aries.subsystem.itests.tb3")
1:fc759fb:     			.attribute(PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE, "0.0.0"))
1:875a6d6:     	.content(createTestBundle3Content())
1:fc759fb:     	.build();
1:fc759fb:     }
1:fc759fb:     
1:fc759fb:     private Repository createTestRepository() throws IOException {
1:fc759fb:     	return new TestRepository.Builder()
1:fc759fb:     	.resource(createTestBundle3Resource())
1:fc759fb:     	.build();
1:fc759fb:     }
1:fc759fb: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void createTestFiles() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), version("1.0.0"),
1: 				new Header(Constants.REQUIRE_CAPABILITY, "foo; filter:=\"(foo=bar)\""));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), version("1.0.0"), 
1: 				new Header(Constants.PROVIDE_CAPABILITY, "foo; foo=bar"));
1: 	private void createBundleC() throws IOException {
1: 		createBundle(name(BUNDLE_C), version("1.0.0"), requireBundle(BUNDLE_B));
1: 	private void createApplicationA() throws IOException {
1: 	private void createApplicationB() throws IOException {
1: 	private void createApplicationAManifest() throws IOException {
1: 	private void createApplicationBManifest() throws IOException {
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 		createApplication("application1", "tb1.jar");
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
/////////////////////////////////////////////////////////////////////////
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:John Ross
-------------------------------------------------------------------------------
commit:f615d56
/////////////////////////////////////////////////////////////////////////
1:     	// The following input stream is closed by the bundle context.
/////////////////////////////////////////////////////////////////////////
1:     	// The following input stream is closed by the bundle context.
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1:     		uninstallSilently(b);
/////////////////////////////////////////////////////////////////////////
1:     		uninstallSilently(b);
commit:875a6d6
/////////////////////////////////////////////////////////////////////////
1: 	public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     	.content(createTestBundle3Content())
commit:574fba9
/////////////////////////////////////////////////////////////////////////
1: 	 * Subsystem-Content: bundle.a.jar
1: 	/*
1: 	 * Subsystem-SymbolicName: application.b.esa
1: 	 * Subsystem-Content: bundle.c.jar
1: 	 */
1: 	private static final String APPLICATION_B = "application.b.esa";
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.c.jar
1: 	 * Require-Bundle: bundle.b.jar
1: 	 */
1: 	private static final String BUNDLE_C = "bundle.c.jar";
/////////////////////////////////////////////////////////////////////////
1: 		createBundleC();
1: 		createApplicationB();
/////////////////////////////////////////////////////////////////////////
0: 	private static void createBundleC() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.REQUIRE_BUNDLE, BUNDLE_B);
0: 		createBundle(BUNDLE_C, "1.0.0", headers);
1: 	}
1: 	
0: 	private static void createApplicationB() throws IOException {
1: 		createApplicationBManifest();
1: 		createSubsystem(APPLICATION_B, BUNDLE_C);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
0: 	private static void createApplicationBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_C);
1: 		createManifest(APPLICATION_B + ".mf", attributes);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1:     		stopSubsystemSilently(application1);
1:     		uninstallSubsystemSilently(application1);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testRequireBundle() throws Exception {
1:     	File file = new File(BUNDLE_B);
1:     	Bundle b = getRootSubsystem().getBundleContext().installBundle(file.toURI().toString(), new FileInputStream(file));
1:     	try {
1: 	    	Subsystem application = installSubsystemFromFile(APPLICATION_B);
1: 	    	try {
1: 	    		startSubsystem(application);
1: 	    	}
1: 	    	finally {
1: 	    		stopSubsystemSilently(application);
1: 	    		uninstallSubsystemSilently(application);
1: 	    	}
1:     	}
1:     	finally {
0:     		b.uninstall();
/////////////////////////////////////////////////////////////////////////
1: 	    		stopSubsystemSilently(application);
1: 	    		uninstallSubsystemSilently(application);
commit:7e004f1
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Require-Capability: foo; filter:="(foo=bar)"
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Provide-Capability: foo; foo=bar
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
0: 	public static void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createdTestFiles = true;
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.REQUIRE_CAPABILITY, "foo; filter:=\"(foo=bar)\"");
0: 		createBundle(BUNDLE_A, "1.0.0", headers);
1: 	}
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.PROVIDE_CAPABILITY, "foo; foo=bar");
0: 		createBundle(BUNDLE_B, "1.0.0", headers);
1: 	}
1: 	
0: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
0: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testRequireCapability() throws Exception {
1:     	File file = new File(BUNDLE_B);
1:     	Bundle b = getRootSubsystem().getBundleContext().installBundle(file.toURI().toString(), new FileInputStream(file));
1:     	try {
1: 	    	Subsystem application = installSubsystemFromFile(APPLICATION_A);
1: 	    	try {
1: 	    		startSubsystem(application);
1: 	    	}
1: 	    	finally {
0: 	    		stopSubsystem(application);
0: 	    		uninstallScopedSubsystem(application);
1: 	    	}
1:     	}
1:     	finally {
0:     		b.uninstall();
1:     	}
1:     }
1:     
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import org.apache.aries.subsystem.itests.util.TestCapability;
1: import org.apache.aries.subsystem.itests.util.TestRepository;
1: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.framework.namespace.PackageNamespace;
0: import org.osgi.framework.resource.Resource;
1: import org.osgi.service.repository.Repository;
1: import org.osgi.service.subsystem.SubsystemConstants;
0: 	private static void createApplication(String name, String[] content) throws Exception {
0: 		ZipFixture feature = ArchiveFixture
0: 				.newZip()
0: 				.binary("OSGI-INF/SUBSYSTEM.MF",
0: 						ApplicationTest.class.getClassLoader().getResourceAsStream(
0: 								name + "/OSGI-INF/SUBSYSTEM.MF"));
0: 		for (String s : content) {
1: 			try {
0: 				feature.binary(s,
0: 						ApplicationTest.class.getClassLoader().getResourceAsStream(
0: 								name + '/' + s));
1: 			}
0: 			catch (Exception e) {
0: 				feature.binary(s, new FileInputStream(new File(s)));
1: 			}
1: 		}
0: 		feature.end();
0: 		FileOutputStream fos = new FileOutputStream(name + ".esa");
1: 		try {
0: 			feature.writeOut(fos);
0: 		} finally {
0: 			Utils.closeQuietly(fos);
1: 		}
1: 	}
1: 	
0: 	public static void createApplications() throws Exception {
0: 		createApplication("application1", new String[]{"tb1.jar"});
0: 		createdApplications = true;
1: 	}
1: 	
0: 	public void setUp() {
1: 		super.setUp();
1: 			serviceRegistrations.add(
1: 					bundleContext.registerService(
1: 							Repository.class, 
1: 							createTestRepository(), 
1: 							null));
1: 		catch (IOException e) {
1: 			throw new RuntimeException(e);
1: 		}
1: 	}
1:     
1: 	/*
1: 	 * Subsystem application1 has content bundle tb1.jar.
1: 	 * Bundle tb1.jar has an import package dependency on org.apache.aries.subsystem.itests.tb3.
1: 	 */
1:     @Test
1:     public void testApplication1() throws Exception {
1:     	Subsystem application1 = installSubsystemFromFile("application1.esa");
1:     	try {
1: 	    	assertSymbolicName("org.apache.aries.subsystem.application1", application1);
1: 			assertVersion("0.0.0", application1);
1: 			assertType(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION, application1);
1: 			assertChildren(0, application1);
1: 			assertConstituents(2, application1);
1: 			startSubsystem(application1);
1: 			assertBundleState(Bundle.RESOLVED|Bundle.ACTIVE, "org.apache.aries.subsystem.itests.tb1", application1);
1: 			assertBundleState(Bundle.RESOLVED|Bundle.ACTIVE, "org.apache.aries.subsystem.itests.tb3", getRootSubsystem());
1:     	}
1:     	finally {
0:     		stopSubsystem(application1);
0:     		uninstallScopedSubsystem(application1);
1:     	}
1:     private byte[] createTestBundle3Content() throws IOException {
1:     	Manifest manifest = new Manifest();
1:     	manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
1:     	manifest.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.subsystem.itests.tb3");
1:     	manifest.getMainAttributes().putValue(Constants.EXPORT_PACKAGE, "org.apache.aries.subsystem.itests.tb3");
1:     	ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     	JarOutputStream jos = new JarOutputStream(baos, manifest);
1:     	jos.close();
1:     	return baos.toByteArray();
1:     }
1:     
1:     private Resource createTestBundle3Resource() throws IOException {
1:     	return new TestRepositoryContent.Builder()
1:     	.capability(
1:     			new TestCapability.Builder()
1:     			.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:     			.attribute(IdentityNamespace.IDENTITY_NAMESPACE, "org.apache.aries.subsystem.itests.tb3")
1:     			.attribute(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, Version.emptyVersion)
1:     			.attribute(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_BUNDLE))
1:     	.capability(
1:     			new TestCapability.Builder()
1:     			.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:     			.attribute(PackageNamespace.PACKAGE_NAMESPACE, "org.apache.aries.subsystem.itests.tb3")
1:     			.attribute(PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE, "0.0.0"))
0:     			.content(createTestBundle3Content())
1:     	.build();
1:     }
1:     
1:     private Repository createTestRepository() throws IOException {
1:     	return new TestRepository.Builder()
1:     	.resource(createTestBundle3Resource())
1:     	.build();
commit:e6bf465
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.itests.util.Utils;
commit:e8a0b01
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import java.io.File;
0: import java.io.FileOutputStream;
1: 
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.junit.Before;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.service.subsystem.Subsystem;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class ApplicationTest extends SubsystemTest {
0: 	@Before
0:     public static void doCreateApplications() throws Exception {
0: 		if (createdApplications) {
0: 			return;
0: 		}
0: 		ZipFixture testEba = ArchiveFixture
0: 				.newZip()
0: 				.binary("OSGI-INF/APPLICATION.MF",
0: 						ApplicationTest.class.getClassLoader()
0: 								.getResourceAsStream(
0: 										"application1/OSGI-INF/APPLICATION.MF"))
0: 				.binary("tb1.jar",
0: 						ApplicationTest.class.getClassLoader()
0: 								.getResourceAsStream("application1/tb1.jar"))
0: 				.end();
0: 		FileOutputStream fout = new FileOutputStream("application1.eba");
0: 		try {
0: 			testEba.writeOut(fout);
0: 			createdApplications = true;
0: 		} finally {
0: 			Utils.closeQuietly(fout);
0: 		}
0:     }
1:     
0:     //@Test
0:     public void testApplication1() throws Exception {
0:     	String application = "application1.eba";
0:     	Subsystem subsystem = assertSubsystemLifeCycle(new File(application));
0:     	assertId(subsystem);
0:         assertLocation(application, subsystem);
0:         assertSymbolicName("org.apache.aries.subsystem.application1", subsystem);
0:         assertVersion("1.0.0", subsystem);
0:         assertConstituents(2, subsystem);
0:     }
0: }
============================================================================