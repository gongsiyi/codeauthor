1:8ad6b99: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:8ad6b99:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8ad6b99:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:8ad6b99:  */
1:8ad6b99: package org.apache.aries.subsystem.core.archive;
1:8ad6b99: 
1:8ad6b99: import static org.junit.Assert.assertEquals;
1:8ad6b99: import static org.junit.Assert.fail;
1:8ad6b99: 
1:8ad6b99: import org.junit.Test;
1:8ad6b99: import org.osgi.framework.Version;
1:8ad6b99: import org.osgi.framework.VersionRange;
1:8ad6b99: 
1:8ad6b99: public class FragmentHostHeaderTest {
1:8ad6b99: 	@Test
1:8ad6b99: 	public void testNullClause() {
1:8ad6b99: 		String headerStr = null;
1:8ad6b99: 		try {
1:8ad6b99: 		    new FragmentHostHeader(headerStr);
1:8ad6b99: 		    fail("Null clause not allowed");
1:8ad6b99: 		}
1:8ad6b99: 		catch (NullPointerException e) {}
1:8ad6b99: 		catch (Exception e) {
1:8ad6b99: 		    fail("Null clause should result in NPE");
1:8ad6b99: 		}
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	@Test
1:8ad6b99:     public void testEmptyClause() {
1:8ad6b99:         String headerStr = "";
1:8ad6b99:         try {
1:8ad6b99:             new FragmentHostHeader(headerStr);
1:8ad6b99:             fail("Empty clause not allowed");
1:8ad6b99:         }
1:8ad6b99:         catch (IllegalArgumentException e) {}
1:8ad6b99:         catch (Exception e) {
1:8ad6b99:             fail("Empty clause should result in IAE");
1:8ad6b99:         }
1:8ad6b99:     }
1:8ad6b99: 	
1:8ad6b99: 	@Test
1:8ad6b99:     public void testMultipleClauses() {
1:8ad6b99:         String headerStr = "foo;bundle-version=1.0,bar";
1:8ad6b99:         try {
1:8ad6b99:             new FragmentHostHeader(headerStr);
1:8ad6b99:             fail("Multiple clauses not allowed");
1:8ad6b99:         }
1:8ad6b99:         catch (IllegalArgumentException e) {}
1:8ad6b99:         catch (Exception e) {
1:8ad6b99:             fail("Multiple cluases should result in IAE");
1:8ad6b99:         }
1:8ad6b99:     }
1:8ad6b99: 	
1:8ad6b99: 	@Test
1:8ad6b99:     public void testSymbolicName() {
1:8ad6b99:         String headerStr = "org.foo";
1:8ad6b99:         FragmentHostHeader header = new FragmentHostHeader(headerStr);
1:8ad6b99:         assertClauses(header, 1);
1:8ad6b99:         assertSymbolicName(header.getClauses().iterator().next(), headerStr);
1:8ad6b99:         assertBundleVersionAttribute(
1:8ad6b99:                 header.getClauses().iterator().next(), 
1:8ad6b99:                 new VersionRange(VersionRange.LEFT_CLOSED, new Version("0"), null, VersionRange.RIGHT_OPEN));
1:8ad6b99:     }
1:8ad6b99: 	
1:8ad6b99: 	@Test
1:8ad6b99: 	public void testBundleVersionSingle() {
1:8ad6b99: 		String headerStr = "com.bar.foo;bundle-version=1.0";
1:8ad6b99: 		FragmentHostHeader header = new FragmentHostHeader(headerStr);
1:8ad6b99: 		assertClauses(header, 1);
1:8ad6b99: 		assertSymbolicName(header.getClauses().iterator().next(), "com.bar.foo");
1:8ad6b99: 		assertBundleVersionAttribute(
1:8ad6b99:                 header.getClauses().iterator().next(), 
1:8ad6b99:                 new VersionRange("1.0"));
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	@Test
1:8ad6b99:     public void testBundleVersionRange() {
1:8ad6b99:         String headerStr = "com.acme.support;bundle-version=\"[2.0,3.0)\"";
1:8ad6b99:         FragmentHostHeader header = new FragmentHostHeader(headerStr);
1:8ad6b99:         assertClauses(header, 1);
1:8ad6b99:         assertSymbolicName(header.getClauses().iterator().next(), "com.acme.support");
1:8ad6b99:         assertBundleVersionAttribute(
1:8ad6b99:                 header.getClauses().iterator().next(), 
1:8ad6b99:                 new VersionRange(VersionRange.LEFT_CLOSED, new Version("2.0"), new Version("3.0"), VersionRange.RIGHT_OPEN));
1:8ad6b99:     }
1:8ad6b99: 	
1:8ad6b99: 	private void assertBundleVersionAttribute(FragmentHostHeader.Clause clause, VersionRange value) {
1:8ad6b99: 	    assertEquals("Wrong bundle version", value, ((BundleVersionAttribute)clause.getAttribute(BundleVersionAttribute.NAME)).getVersionRange());
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	private void assertClauses(FragmentHostHeader header, int expectedClauses) {
1:8ad6b99: 		assertEquals("Wrong number of clauses", expectedClauses, header.getClauses().size());
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	private void assertSymbolicName(FragmentHostHeader.Clause clause, String value) {
1:8ad6b99: 	    assertEquals("Wrong symbolic name", value, clause.getSymbolicName());
1:8ad6b99: 	}
1:8ad6b99: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import org.junit.Test;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.VersionRange;
1: 
1: public class FragmentHostHeaderTest {
1: 	@Test
1: 	public void testNullClause() {
1: 		String headerStr = null;
1: 		try {
1: 		    new FragmentHostHeader(headerStr);
1: 		    fail("Null clause not allowed");
1: 		}
1: 		catch (NullPointerException e) {}
1: 		catch (Exception e) {
1: 		    fail("Null clause should result in NPE");
1: 		}
1: 	}
1: 	
1: 	@Test
1:     public void testEmptyClause() {
1:         String headerStr = "";
1:         try {
1:             new FragmentHostHeader(headerStr);
1:             fail("Empty clause not allowed");
1:         }
1:         catch (IllegalArgumentException e) {}
1:         catch (Exception e) {
1:             fail("Empty clause should result in IAE");
1:         }
1:     }
1: 	
1: 	@Test
1:     public void testMultipleClauses() {
1:         String headerStr = "foo;bundle-version=1.0,bar";
1:         try {
1:             new FragmentHostHeader(headerStr);
1:             fail("Multiple clauses not allowed");
1:         }
1:         catch (IllegalArgumentException e) {}
1:         catch (Exception e) {
1:             fail("Multiple cluases should result in IAE");
1:         }
1:     }
1: 	
1: 	@Test
1:     public void testSymbolicName() {
1:         String headerStr = "org.foo";
1:         FragmentHostHeader header = new FragmentHostHeader(headerStr);
1:         assertClauses(header, 1);
1:         assertSymbolicName(header.getClauses().iterator().next(), headerStr);
1:         assertBundleVersionAttribute(
1:                 header.getClauses().iterator().next(), 
1:                 new VersionRange(VersionRange.LEFT_CLOSED, new Version("0"), null, VersionRange.RIGHT_OPEN));
1:     }
1: 	
1: 	@Test
1: 	public void testBundleVersionSingle() {
1: 		String headerStr = "com.bar.foo;bundle-version=1.0";
1: 		FragmentHostHeader header = new FragmentHostHeader(headerStr);
1: 		assertClauses(header, 1);
1: 		assertSymbolicName(header.getClauses().iterator().next(), "com.bar.foo");
1: 		assertBundleVersionAttribute(
1:                 header.getClauses().iterator().next(), 
1:                 new VersionRange("1.0"));
1: 	}
1: 	
1: 	@Test
1:     public void testBundleVersionRange() {
1:         String headerStr = "com.acme.support;bundle-version=\"[2.0,3.0)\"";
1:         FragmentHostHeader header = new FragmentHostHeader(headerStr);
1:         assertClauses(header, 1);
1:         assertSymbolicName(header.getClauses().iterator().next(), "com.acme.support");
1:         assertBundleVersionAttribute(
1:                 header.getClauses().iterator().next(), 
1:                 new VersionRange(VersionRange.LEFT_CLOSED, new Version("2.0"), new Version("3.0"), VersionRange.RIGHT_OPEN));
1:     }
1: 	
1: 	private void assertBundleVersionAttribute(FragmentHostHeader.Clause clause, VersionRange value) {
1: 	    assertEquals("Wrong bundle version", value, ((BundleVersionAttribute)clause.getAttribute(BundleVersionAttribute.NAME)).getVersionRange());
1: 	}
1: 	
1: 	private void assertClauses(FragmentHostHeader header, int expectedClauses) {
1: 		assertEquals("Wrong number of clauses", expectedClauses, header.getClauses().size());
1: 	}
1: 	
1: 	private void assertSymbolicName(FragmentHostHeader.Clause clause, String value) {
1: 	    assertEquals("Wrong symbolic name", value, clause.getSymbolicName());
1: 	}
1: }
============================================================================