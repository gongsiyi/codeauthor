1:e9395b8: /*
1:e9395b8:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9395b8:  * or more contributor license agreements.  See the NOTICE file
1:e9395b8:  * distributed with this work for additional information
1:e9395b8:  * regarding copyright ownership.  The ASF licenses this file
1:e9395b8:  * to you under the Apache License, Version 2.0 (the
1:e9395b8:  * "License"); you may not use this file except in compliance
1:e9395b8:  * with the License.  You may obtain a copy of the License at
1:e9395b8:  *
1:e9395b8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e9395b8:  *
1:e9395b8:  * Unless required by applicable law or agreed to in writing,
1:e9395b8:  * software distributed under the License is distributed on an
1:e9395b8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e9395b8:  * KIND, either express or implied.  See the License for the
1:e9395b8:  * specific language governing permissions and limitations
1:e9395b8:  * under the License.
1:e9395b8:  */
1:e9395b8: package org.apache.aries.jndi.url;
3:e9395b8: 
1:e9395b8: import javax.naming.InvalidNameException;
1:e9395b8: import javax.naming.Name;
1:e9395b8: import javax.naming.NameParser;
1:e9395b8: import javax.naming.NamingException;
1:e9395b8: 
1:e9395b8: /**
1:e9395b8:  * A parser for the aries namespace
1:e9395b8:  */
1:e9395b8: public final class OsgiNameParser implements NameParser
1:e9395b8: {
1:e9395b8:   private static final String OSGI_SCHEME = "osgi";
1:e9395b8:   private static final String ARIES_SCHEME = "aries";
1:e9395b8:   private static final String SERVICE_PATH = "service";
1:e9395b8:   private static final String SERVICES_PATH = "services";
1:e9395b8:   private static final String SERVICE_LIST_PATH = "servicelist";
1:e9395b8:   private static final String FRAMEWORK_PATH = "framework";
1:e9395b8:   
1:e9395b8:   public Name parse(String name) throws NamingException
1:e9395b8:   {
1:e9395b8:     OsgiName result = new OsgiName(name);
1:e9395b8:     
1:e9395b8:     String urlScheme = result.getScheme();
1:e9395b8:     String schemePath = result.getSchemePath();
1:e9395b8:     
1:e9395b8:     if (!!!(OSGI_SCHEME.equals(urlScheme) || ARIES_SCHEME.equals(urlScheme))) {
2:e9395b8:       throw new InvalidNameException(name);
2:e9395b8:     }
1:e9395b8:     
1:e9395b8:     if (ARIES_SCHEME.equals(urlScheme) && !!!SERVICES_PATH.equals(schemePath)) {
1:e9395b8:       throw new InvalidNameException(name);
1:e9395b8:     }
1:e9395b8:     
1:e9395b8:     if (OSGI_SCHEME.equals(urlScheme) && !!!( SERVICE_PATH.equals(schemePath) || 
1:e9395b8:                                               SERVICE_LIST_PATH.equals(schemePath) || 
1:e9395b8:                                               FRAMEWORK_PATH.equals(schemePath))) {
1:e9395b8:       throw new InvalidNameException(name);
1:e9395b8:     }
1:e9395b8:     
1:e9395b8:     return result;
1:e9395b8:   }
1:e9395b8: 
1:e9395b8:   @Override
1:e9395b8:   public boolean equals(Object other)
1:e9395b8:   {
1:e9395b8:     return other instanceof OsgiNameParser;
1:e9395b8:   }
1:e9395b8:   
1:e9395b8:   @Override
1:e9395b8:   public int hashCode()
1:e9395b8:   {
1:e9395b8:     return 100003;
1:e9395b8:   }
1:e9395b8: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:a724dca
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e9395b8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi.url;
1: 
1: import javax.naming.InvalidNameException;
1: import javax.naming.Name;
1: import javax.naming.NameParser;
1: import javax.naming.NamingException;
1: 
1: /**
1:  * A parser for the aries namespace
1:  */
1: public final class OsgiNameParser implements NameParser
1: {
1:   private static final String OSGI_SCHEME = "osgi";
1:   private static final String ARIES_SCHEME = "aries";
1:   private static final String SERVICE_PATH = "service";
1:   private static final String SERVICES_PATH = "services";
1:   private static final String SERVICE_LIST_PATH = "servicelist";
1:   private static final String FRAMEWORK_PATH = "framework";
1:   
1:   public Name parse(String name) throws NamingException
1:   {
1:     OsgiName result = new OsgiName(name);
1:     
0:     if (result.size() < 2) throw new InvalidNameException(name);
1:     
1:     String urlScheme = result.getScheme();
1:     String schemePath = result.getSchemePath();
1:     
1:     if (!!!(OSGI_SCHEME.equals(urlScheme) || ARIES_SCHEME.equals(urlScheme))) {
1:       throw new InvalidNameException(name);
1:     }
1:     
1:     if (ARIES_SCHEME.equals(urlScheme) && !!!SERVICES_PATH.equals(schemePath)) {
1:       throw new InvalidNameException(name);
1:     }
1:     
1:     if (OSGI_SCHEME.equals(urlScheme) && !!!( SERVICE_PATH.equals(schemePath) || 
1:                                               SERVICE_LIST_PATH.equals(schemePath) || 
1:                                               FRAMEWORK_PATH.equals(schemePath))) {
1:       throw new InvalidNameException(name);
1:     }
1:     
0:     if (result.getInterface() == null || result.getInterface().length() == 0) {
1:       throw new InvalidNameException(name);
1:     }
1:     
1:     return result;
1:   }
1: 
1:   @Override
1:   public boolean equals(Object other)
1:   {
1:     return other instanceof OsgiNameParser;
1:   }
1:   
1:   @Override
1:   public int hashCode()
1:   {
1:     return 100003;
1:   }
1: }
============================================================================