1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
1:1129914: 
1:1129914: import java.util.regex.Matcher;
1:1129914: import java.util.regex.Pattern;
1:1129914: 
1:1129914: public class ParameterFactory {
1:1129914: 	public static final String QUOTED_STRING = "\"((?:[^\"\r\n\u0000]|\\\\\"|\\\\\\\\)*)\"";
1:1129914: 	public static final String ARGUMENT = '(' + Grammar.EXTENDED + ")|" + QUOTED_STRING;
1:1129914: 	private static final String REGEX = '(' + Grammar.EXTENDED + ")(\\:?=)(?:" + ARGUMENT + ')';
1:1129914: 	private static final Pattern PATTERN = Pattern.compile(REGEX);
1:1129914: 	
1:1129914: 	public static Parameter create(String parameter) {
1:1129914: 		Matcher matcher = PATTERN.matcher(parameter);
1:1129914: 		if (!matcher.matches()) {
1:1129914: 			throw new IllegalArgumentException("Invalid parameter: " + parameter);
1:1129914: 		}
1:1129914: 		String name = matcher.group(1);
1:1129914: 		String symbol = matcher.group(2);
1:1129914: 		String value = matcher.group(3);
1:1129914: 		if (value == null)
1:1129914: 			value = matcher.group(4);
1:1129914: 		if (symbol.equals("=")) {
1:1129914: 			return AttributeFactory.createAttribute(name, value);
1:1129914: 		}
1:1129914: 		return DirectiveFactory.createDirective(name, value);
1:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: public class ParameterFactory {
1: 	public static final String QUOTED_STRING = "\"((?:[^\"\r\n\u0000]|\\\\\"|\\\\\\\\)*)\"";
1: 	public static final String ARGUMENT = '(' + Grammar.EXTENDED + ")|" + QUOTED_STRING;
1: 	private static final String REGEX = '(' + Grammar.EXTENDED + ")(\\:?=)(?:" + ARGUMENT + ')';
1: 	private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 	
1: 	public static Parameter create(String parameter) {
1: 		Matcher matcher = PATTERN.matcher(parameter);
1: 		if (!matcher.matches()) {
1: 			throw new IllegalArgumentException("Invalid parameter: " + parameter);
1: 		}
1: 		String name = matcher.group(1);
1: 		String symbol = matcher.group(2);
1: 		String value = matcher.group(3);
1: 		if (value == null)
1: 			value = matcher.group(4);
1: 		if (symbol.equals("=")) {
1: 			return AttributeFactory.createAttribute(name, value);
1: 		}
1: 		return DirectiveFactory.createDirective(name, value);
1: 	}
1: }
============================================================================