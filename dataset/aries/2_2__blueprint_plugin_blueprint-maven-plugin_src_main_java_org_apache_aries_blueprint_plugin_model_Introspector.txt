1:3aa60ba: /**
1:3aa60ba:  * Licensed to the Apache Software Foundation (ASF) under one
1:3aa60ba:  * or more contributor license agreements.  See the NOTICE file
1:3aa60ba:  * distributed with this work for additional information
1:3aa60ba:  * regarding copyright ownership.  The ASF licenses this file
1:3aa60ba:  * to you under the Apache License, Version 2.0 (the
1:3aa60ba:  * "License"); you may not use this file except in compliance
1:3aa60ba:  * with the License.  You may obtain a copy of the License at
1:3aa60ba:  *
1:3aa60ba:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3aa60ba:  *
1:3aa60ba:  * Unless required by applicable law or agreed to in writing,
1:3aa60ba:  * software distributed under the License is distributed on an
1:3aa60ba:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3aa60ba:  * KIND, either express or implied.  See the License for the
1:3aa60ba:  * specific language governing permissions and limitations
1:3aa60ba:  * under the License.
1:3aa60ba:  */
1:3aa60ba: package org.apache.aries.blueprint.plugin.model;
2:3aa60ba: 
1:05c904d: import com.google.common.base.Preconditions;
1:3aa60ba: import com.google.common.collect.HashMultimap;
1:05c904d: import com.google.common.collect.Iterables;
1:3aa60ba: import com.google.common.collect.Lists;
1:3aa60ba: import com.google.common.collect.Multimap;
1:3aa60ba: import com.google.common.collect.Sets;
1:3aa60ba: 
1:3aa60ba: import java.lang.annotation.Annotation;
1:3aa60ba: import java.lang.reflect.Field;
1:05c904d: import java.lang.reflect.Method;
1:05c904d: import java.util.ArrayList;
1:3aa60ba: import java.util.Collection;
1:3aa60ba: import java.util.List;
1:3aa60ba: import java.util.Set;
1:3aa60ba: 
1:3aa60ba: /**
1:3aa60ba:  * Class to find uniquely-named fields declared in a class hierarchy with specified annotations.
1:3aa60ba:  */
1:05c904d: public final class Introspector {
1:05c904d:     private Class<?> originalClazz;
1:3aa60ba: 
1:3aa60ba:     /**
1:05c904d:      * @param clazz the class to introspect (including those defined in parent classes).
1:3aa60ba:      */
1:05c904d:     public Introspector(Class<?> clazz) {
1:05c904d:         this.originalClazz = clazz;
1:3aa60ba:     }
1:3aa60ba: 
1:3aa60ba:     /**
1:b270d54:      * @param requiredAnnotations annotations the fields must have
1:3aa60ba:      * @return fields in the given class (including parent classes) that match this finder's annotations requirements.
1:3aa60ba:      * @throws UnsupportedOperationException if any field matching the annotations requirement shares its name with a
1:3aa60ba:      * field declared elsewhere in the class hierarchy.
1:3aa60ba:      */
1:05c904d:     @SafeVarargs
1:05c904d:     public final List<Field> fieldsWith(Class<? extends Annotation>... requiredAnnotations) {
1:3aa60ba:         Multimap<String, Field> fieldsByName = HashMultimap.create();
1:3aa60ba:         Set<String> acceptedFieldNames = Sets.newHashSet();
1:3aa60ba:         Class<?> clazz = originalClazz;
1:3aa60ba: 
1:3aa60ba:         // For each parent class of clazz...
1:3aa60ba:         while(clazz != null && clazz != Object.class) {
1:3aa60ba:             for (Field field : clazz.getDeclaredFields()) {
1:3aa60ba:                 // ...add all declared fields
1:3aa60ba:                 fieldsByName.put(field.getName(), field);
1:3aa60ba: 
1:3aa60ba:                 // ...and if it meets the annotation requirement, add the field name to the set of accepted field names
1:05c904d:                 if (hasAnyRequiredAnnotation(field, requiredAnnotations)) {
1:3aa60ba:                     acceptedFieldNames.add(field.getName());
1:bd1fd92:                 }
1:3aa60ba:             }
1:3aa60ba:             clazz = clazz.getSuperclass();
1:3aa60ba:         }
1:3aa60ba: 
1:3aa60ba:         // Add all accepted fields to acceptedFields
1:3aa60ba:         List<Field> acceptedFields = Lists.newArrayList();
1:bd1fd92:         for (String fieldName : acceptedFieldNames) {
1:bd1fd92:             Collection<Field> fields = fieldsByName.get(fieldName);
1:05c904d:             validateOnlyOneFieldWithName(fieldName, fields);
1:bd1fd92:             acceptedFields.addAll(fields);
1:3aa60ba:         }
1:3aa60ba:         return acceptedFields;
1:3aa60ba:     }
1:3aa60ba: 
1:bd1fd92:     /**
1:bd1fd92:      * Check that each field name is defined no more than once
1:bd1fd92:      * @param acceptedFieldName
1:bd1fd92:      * @param acceptedFieldsWithSameName
1:bd1fd92:      */
1:05c904d:     private void validateOnlyOneFieldWithName(String acceptedFieldName,
1:bd1fd92:                                               Collection<Field> acceptedFieldsWithSameName) {
1:bd1fd92:         if (acceptedFieldsWithSameName.size() > 1) {
1:bd1fd92:             String header = String.format("Field '%s' in bean class '%s' has been defined multiple times in:",
1:bd1fd92:                                           acceptedFieldName, originalClazz.getName());
1:bd1fd92:             StringBuilder msgBuilder = new StringBuilder(header);
1:bd1fd92:             for (Field field : acceptedFieldsWithSameName) {
1:bd1fd92:                 msgBuilder.append("\n\t- ").append(field.getDeclaringClass().getName());
1:bd1fd92:             }
1:bd1fd92:             throw new UnsupportedOperationException(msgBuilder.toString());
1:bd1fd92:         }
1:bd1fd92:     }
1:bd1fd92: 
1:05c904d:     @SafeVarargs
1:05c904d:     private final boolean hasAnyRequiredAnnotation(Field field, Class<? extends Annotation>... requiredAnnotations) {
1:bd1fd92:         if (requiredAnnotations.length == 0) {
1:05c904d:             throw new IllegalArgumentException("Must specify at least one annotation");
1:bd1fd92:         }
1:bd1fd92:         for (Class<? extends Annotation> requiredAnnotation : requiredAnnotations) {
1:bd1fd92:             if (field.getAnnotation(requiredAnnotation) != null) {
2:3aa60ba:                 return true;
1:bd1fd92:             }
1:bd1fd92:         }
1:3aa60ba:         return false;
1:3aa60ba:     }
1:05c904d:     
1:05c904d:     public <T extends Annotation> Method methodWith(Class<T> annotationClass) {
1:05c904d:         List<Method> methods = methodsWith(annotationClass);
1:05c904d:         Preconditions.checkArgument(methods.size() <= 1,
1:05c904d:                                     "Found %d methods annotated with %s in class %s, but only 1 allowed",
1:05c904d:                                     methods.size(), annotationClass.getName(), originalClazz.getName());
1:05c904d:         return Iterables.getOnlyElement(methods, null);
1:05c904d:     }
1:05c904d: 
1:3aa60ba:     @SafeVarargs
1:d22e134:     public final List<Method> methodsWith(Class<? extends Annotation>... annotationClasses) {
1:05c904d:         List<Method> methods = new ArrayList<>();
1:05c904d:         for (Method method : originalClazz.getMethods()) {
1:d22e134:             for(Class<? extends Annotation> annotationClass : annotationClasses) {
1:d22e134:                 if (method.getAnnotation(annotationClass) != null) {
1:05c904d:                     methods.add(method);
1:d22e134:                     break;
1:05c904d:                 }
1:05c904d:             }
1:3aa60ba:         }
1:05c904d:         return methods;
1:05c904d:     }
1:3aa60ba: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:b270d54
/////////////////////////////////////////////////////////////////////////
1:      * @param requiredAnnotations annotations the fields must have
commit:05c904d
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
1: import java.util.ArrayList;
1: import com.google.common.base.Preconditions;
1: import com.google.common.collect.Iterables;
/////////////////////////////////////////////////////////////////////////
1: public final class Introspector {
1:     private Class<?> originalClazz;
1:      * @param clazz the class to introspect (including those defined in parent classes).
1:     public Introspector(Class<?> clazz) {
1:         this.originalClazz = clazz;
0:      * @param 
1:     @SafeVarargs
1:     public final List<Field> fieldsWith(Class<? extends Annotation>... requiredAnnotations) {
/////////////////////////////////////////////////////////////////////////
1:                 if (hasAnyRequiredAnnotation(field, requiredAnnotations)) {
/////////////////////////////////////////////////////////////////////////
1:             validateOnlyOneFieldWithName(fieldName, fields);
/////////////////////////////////////////////////////////////////////////
1:     private void validateOnlyOneFieldWithName(String acceptedFieldName,
/////////////////////////////////////////////////////////////////////////
1:     @SafeVarargs
1:     private final boolean hasAnyRequiredAnnotation(Field field, Class<? extends Annotation>... requiredAnnotations) {
1:             throw new IllegalArgumentException("Must specify at least one annotation");
/////////////////////////////////////////////////////////////////////////
1:     
1:     public <T extends Annotation> Method methodWith(Class<T> annotationClass) {
1:         List<Method> methods = methodsWith(annotationClass);
1:         Preconditions.checkArgument(methods.size() <= 1,
1:                                     "Found %d methods annotated with %s in class %s, but only 1 allowed",
1:                                     methods.size(), annotationClass.getName(), originalClazz.getName());
1:         return Iterables.getOnlyElement(methods, null);
1:     }
1: 
0:     public <T extends Annotation> List<Method> methodsWith(Class<T> annotationClass) {
1:         List<Method> methods = new ArrayList<>();
1:         for (Method method : originalClazz.getMethods()) {
0:             T annotation = method.getAnnotation(annotationClass);
0:             if (annotation != null) {
1:                 methods.add(method);
1:             }
1:         }
1:         return methods;
1:     }
commit:bd1fd92
/////////////////////////////////////////////////////////////////////////
0:                 if (hasAnyRequiredAnnotation(field)) {
1:                 }
1:         for (String fieldName : acceptedFieldNames) {
1:             Collection<Field> fields = fieldsByName.get(fieldName);
0:             validateOnlyOneFieldWithName(originalClazz, fieldName, fields);
1:             acceptedFields.addAll(fields);
1:     /**
1:      * Check that each field name is defined no more than once
0:      * @param originalClazz
1:      * @param acceptedFieldName
1:      * @param acceptedFieldsWithSameName
1:      */
0:     private void validateOnlyOneFieldWithName(Class<?> originalClazz, String acceptedFieldName,
1:                                               Collection<Field> acceptedFieldsWithSameName) {
1:         if (acceptedFieldsWithSameName.size() > 1) {
1:             String header = String.format("Field '%s' in bean class '%s' has been defined multiple times in:",
1:                                           acceptedFieldName, originalClazz.getName());
1:             StringBuilder msgBuilder = new StringBuilder(header);
1:             for (Field field : acceptedFieldsWithSameName) {
1:                 msgBuilder.append("\n\t- ").append(field.getDeclaringClass().getName());
1:             }
1:             throw new UnsupportedOperationException(msgBuilder.toString());
1:         }
1:     }
1: 
1:         if (requiredAnnotations.length == 0) {
1:         }
1:         for (Class<? extends Annotation> requiredAnnotation : requiredAnnotations) {
1:             if (field.getAnnotation(requiredAnnotation) != null) {
1:             }
1:         }
commit:3aa60ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.model;
1: 
1: import java.lang.annotation.Annotation;
1: import java.lang.reflect.Field;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import com.google.common.collect.HashMultimap;
1: import com.google.common.collect.Lists;
1: import com.google.common.collect.Multimap;
1: import com.google.common.collect.Sets;
1: 
1: /**
1:  * Class to find uniquely-named fields declared in a class hierarchy with specified annotations.
1:  */
0: public final class FieldFinder {
0:     private final Class<? extends Annotation>[] requiredAnnotations;
1: 
1:     /**
0:      * @param requiredAnnotations if not empty, a field must have one of these annotations for it to be found.
1:      */
1:     @SafeVarargs
0:     public FieldFinder(Class<? extends Annotation>... requiredAnnotations) {
0:         this.requiredAnnotations = requiredAnnotations;
1:     }
1: 
1:     /**
0:      * @param originalClazz the class in which to find fields (including those defined in parent classes).
1:      * @return fields in the given class (including parent classes) that match this finder's annotations requirements.
1:      * @throws UnsupportedOperationException if any field matching the annotations requirement shares its name with a
1:      * field declared elsewhere in the class hierarchy.
1:      */
0:     public List<Field> findFields(Class<?> originalClazz) {
1:         Multimap<String, Field> fieldsByName = HashMultimap.create();
1:         Set<String> acceptedFieldNames = Sets.newHashSet();
1:         Class<?> clazz = originalClazz;
1: 
1:         // For each parent class of clazz...
1:         while(clazz != null && clazz != Object.class) {
1:             for (Field field : clazz.getDeclaredFields()) {
1:                 // ...add all declared fields
1:                 fieldsByName.put(field.getName(), field);
1: 
1:                 // ...and if it meets the annotation requirement, add the field name to the set of accepted field names
0:                 if (hasAnyRequiredAnnotation(field))
1:                     acceptedFieldNames.add(field.getName());
1:             }
1:             clazz = clazz.getSuperclass();
1:         }
1: 
1:         // Add all accepted fields to acceptedFields
1:         List<Field> acceptedFields = Lists.newArrayList();
0:         for (String acceptedFieldName : acceptedFieldNames) {
0:             Collection<Field> acceptedFieldsWithSameName = fieldsByName.get(acceptedFieldName);
1: 
0:             // Check that each field name is defined no more than once
0:             if (acceptedFieldsWithSameName.size() > 1) {
0:                 String header = String.format("Field '%s' in bean class '%s' has been defined multiple times in:",
0:                                               acceptedFieldName, originalClazz.getName());
0:                 StringBuilder msgBuilder = new StringBuilder(header);
0:                 for (Field field : acceptedFieldsWithSameName)
0:                     msgBuilder.append("\n\t- ").append(field.getDeclaringClass().getName());
0:                 throw new UnsupportedOperationException(msgBuilder.toString());
0:             } else {
0:                 acceptedFields.addAll(acceptedFieldsWithSameName);
1:             }
1:         }
1:         return acceptedFields;
1:     }
1: 
0:     private boolean hasAnyRequiredAnnotation(Field field) {
0:         if (requiredAnnotations.length == 0)
1:             return true;
0:         for (Class<? extends Annotation> requiredAnnotation : requiredAnnotations)
0:             if (field.getAnnotation(requiredAnnotation) != null)
1:                 return true;
1:         return false;
1:     }
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:d22e134
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Preconditions;
0: import com.google.common.collect.HashMultimap;
0: import com.google.common.collect.Iterables;
0: import com.google.common.collect.Lists;
0: import com.google.common.collect.Multimap;
0: import com.google.common.collect.Sets;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     @SafeVarargs
1:     public final List<Method> methodsWith(Class<? extends Annotation>... annotationClasses) {
1:             for(Class<? extends Annotation> annotationClass : annotationClasses) {
1:                 if (method.getAnnotation(annotationClass) != null) {
0:                     methods.add(method);
1:                     break;
0:                 }
============================================================================