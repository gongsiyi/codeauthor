1:6e99237: /*
1:6e99237:  * Licensed to the Apache Software Foundation (ASF) under one
1:6e99237:  * or more contributor license agreements.  See the NOTICE file
1:6e99237:  * distributed with this work for additional information
1:6e99237:  * regarding copyright ownership.  The ASF licenses this file
1:6e99237:  * to you under the Apache License, Version 2.0 (the
1:6e99237:  * "License"); you may not use this file except in compliance
1:6e99237:  * with the License.  You may obtain a copy of the License at
1:6e99237:  *
1:6e99237:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6e99237:  *
1:6e99237:  * Unless required by applicable law or agreed to in writing,
1:6e99237:  * software distributed under the License is distributed on an
1:6e99237:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6e99237:  * KIND, either express or implied.  See the License for the
1:6e99237:  * specific language governing permissions and limitations
1:6e99237:  * under the License.
1:6e99237:  */
1:6e99237: package org.apache.aries.util.log;
1:6e99237: 
1:6e99237: import org.osgi.framework.BundleContext;
1:6e99237: import org.osgi.framework.ServiceReference;
1:6e99237: import org.osgi.service.log.LogService;
1:6e99237: import org.osgi.util.tracker.ServiceTracker;
1:6e99237: 
1:6e99237: // Note this file originated in the JMX subproject.
1:6e99237: 
1:6e99237: /**
1:6e99237:  * <p>This <tt>Logger</tt> class represents ServiceTracker for LogService.
1:6e99237:  * It provides a simple mechanism for interacting with the log service.
1:6e99237:  *
1:6e99237:  * @see org.osgi.service.log.LogService
1:6e99237:  * @see org.osgi.util.tracker.ServiceTracker
1:6e99237:  */
1:6e99237: public class Logger extends ServiceTracker implements LogService {
1:6e99237:     /**
1:6e99237:      * Constructs new Logger(ServiceTracker for LogService).
1:6e99237:      *
1:6e99237:      * @param context bundle context.
1:6e99237:      */
1:6e99237:     public Logger(BundleContext context) {
1:6e99237:         super(context, LogService.class.getName(), null);
1:6e99237:     }
1:6e99237: 
1:6e99237:     /**
1:6e99237:      * @see org.osgi.service.log.LogService#log(int, java.lang.String)
1:6e99237:      */
1:6e99237:     public void log(int level, String message) {
1:6e99237:         LogService logService = (LogService) getService();
1:6e99237:         if (logService != null) {
1:6e99237:             logService.log(level, message);
1:6e99237:         }
1:6e99237:     }
1:6e99237: 
1:6e99237:     /**
1:6e99237:      * @see org.osgi.service.log.LogService#log(int, java.lang.String, java.lang.Throwable)
1:6e99237:      */
1:6e99237:     public void log(int level, String message, Throwable exception) {
1:6e99237:         LogService logService = (LogService) getService();
1:6e99237:         if (logService != null) {
1:6e99237:             logService.log(level, message, exception);
1:6e99237:         }
1:6e99237:     }
1:6e99237: 
1:6e99237:     /**
1:6e99237:      * @see org.osgi.service.log.LogService#log(org.osgi.framework.ServiceReference, int, java.lang.String)
1:6e99237:      */
1:6e99237:     public void log(ServiceReference ref, int level, String message) {
1:6e99237:         LogService logService = (LogService) getService();
1:6e99237:         if (logService != null) {
1:6e99237:             logService.log(ref, level, message);
1:6e99237:         }
1:6e99237:     }
1:6e99237: 
1:6e99237:     /**
1:6e99237:      * @see org.osgi.service.log.LogService#log(org.osgi.framework.ServiceReference, int, java.lang.String,
1:6e99237:      *      java.lang.Throwable)
1:6e99237:      */
1:6e99237:     public void log(ServiceReference ref, int level, String message, Throwable exception) {
1:6e99237:         LogService logService = (LogService) getService();
1:6e99237:         if (logService != null) {
1:6e99237:             logService.log(ref, level, message, exception);
1:6e99237:         }
1:6e99237:     }
1:6e99237: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:6e99237
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util.log;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: // Note this file originated in the JMX subproject.
1: 
1: /**
1:  * <p>This <tt>Logger</tt> class represents ServiceTracker for LogService.
1:  * It provides a simple mechanism for interacting with the log service.
1:  *
1:  * @see org.osgi.service.log.LogService
1:  * @see org.osgi.util.tracker.ServiceTracker
1:  */
1: public class Logger extends ServiceTracker implements LogService {
1:     /**
1:      * Constructs new Logger(ServiceTracker for LogService).
1:      *
1:      * @param context bundle context.
1:      */
1:     public Logger(BundleContext context) {
1:         super(context, LogService.class.getName(), null);
1:     }
1: 
1:     /**
1:      * @see org.osgi.service.log.LogService#log(int, java.lang.String)
1:      */
1:     public void log(int level, String message) {
1:         LogService logService = (LogService) getService();
1:         if (logService != null) {
1:             logService.log(level, message);
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.service.log.LogService#log(int, java.lang.String, java.lang.Throwable)
1:      */
1:     public void log(int level, String message, Throwable exception) {
1:         LogService logService = (LogService) getService();
1:         if (logService != null) {
1:             logService.log(level, message, exception);
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.service.log.LogService#log(org.osgi.framework.ServiceReference, int, java.lang.String)
1:      */
1:     public void log(ServiceReference ref, int level, String message) {
1:         LogService logService = (LogService) getService();
1:         if (logService != null) {
1:             logService.log(ref, level, message);
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.service.log.LogService#log(org.osgi.framework.ServiceReference, int, java.lang.String,
1:      *      java.lang.Throwable)
1:      */
1:     public void log(ServiceReference ref, int level, String message, Throwable exception) {
1:         LogService logService = (LogService) getService();
1:         if (logService != null) {
1:             logService.log(ref, level, message, exception);
1:         }
1:     }
1: }
============================================================================