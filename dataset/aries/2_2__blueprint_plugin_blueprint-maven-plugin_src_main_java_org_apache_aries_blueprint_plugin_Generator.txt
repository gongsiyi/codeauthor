1:46cfc09: /**
1:46cfc09:  * Licensed to the Apache Software Foundation (ASF) under one
1:46cfc09:  * or more contributor license agreements.  See the NOTICE file
1:46cfc09:  * distributed with this work for additional information
1:46cfc09:  * regarding copyright ownership.  The ASF licenses this file
1:46cfc09:  * to you under the Apache License, Version 2.0 (the
1:46cfc09:  * "License"); you may not use this file except in compliance
1:46cfc09:  * with the License.  You may obtain a copy of the License at
1:7583a4c:  * <p/>
1:218954f:  * http://www.apache.org/licenses/LICENSE-2.0
1:7583a4c:  * <p/>
1:46cfc09:  * Unless required by applicable law or agreed to in writing,
1:46cfc09:  * software distributed under the License is distributed on an
1:46cfc09:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:46cfc09:  * KIND, either express or implied.  See the License for the
1:46cfc09:  * specific language governing permissions and limitations
1:46cfc09:  * under the License.
1:46cfc09:  */
1:46cfc09: package org.apache.aries.blueprint.plugin;
1:fff2e99: 
1:218954f: import org.apache.aries.blueprint.plugin.model.Argument;
1:218954f: import org.apache.aries.blueprint.plugin.model.ArgumentWriter;
1:46cfc09: import org.apache.aries.blueprint.plugin.model.Bean;
1:46cfc09: import org.apache.aries.blueprint.plugin.model.Context;
1:a2ed671: import org.apache.aries.blueprint.plugin.model.BeanFromFactory;
1:46cfc09: import org.apache.aries.blueprint.plugin.model.Property;
1:46cfc09: import org.apache.aries.blueprint.plugin.model.PropertyWriter;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.BlueprintConfiguration;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1:ca31962: 
1:218954f: import javax.xml.stream.XMLOutputFactory;
1:218954f: import javax.xml.stream.XMLStreamException;
1:218954f: import javax.xml.stream.XMLStreamWriter;
1:218954f: import java.io.OutputStream;
1:c201f83: import java.util.Map;
1:218954f: 
1:218954f: public class Generator implements PropertyWriter, ArgumentWriter {
1:46cfc09:     private static final String NS_BLUEPRINT = "http://www.osgi.org/xmlns/blueprint/v1.0.0";
1:46cfc09:     private static final String NS_EXT = "http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0";
1:89994b6: 
1:7583a4c:     private final Context context;
1:0d2c0ec:     private final BlueprintConfiguration blueprintConfiguration;
1:7583a4c:     private final XMLStreamWriter writer;
1:ca31962: 
1:0d2c0ec:     public Generator(Context context, OutputStream os, BlueprintConfiguration blueprintConfiguration) throws XMLStreamException {
1:46cfc09:         this.context = context;
1:0d2c0ec:         this.blueprintConfiguration = blueprintConfiguration;
1:46cfc09:         XMLOutputFactory factory = XMLOutputFactory.newInstance();
1:46cfc09:         writer = factory.createXMLStreamWriter(os);
1:218954f:     }
1:fff2e99: 
1:46cfc09:     public void generate() {
1:46cfc09:         try {
1:46cfc09:             writer.writeStartDocument();
1:89994b6:             writer.writeCharacters("\n");
1:46cfc09:             writeBlueprint();
1:89994b6:             writer.writeCharacters("\n");
1:fff2e99: 
2:ca31962:             for (Bean bean : context.getBeans()) {
1:46cfc09:                 writeBeanStart(bean);
1:218954f:                 bean.writeArguments(this);
1:46cfc09:                 bean.writeProperties(this);
1:46cfc09:                 writer.writeEndElement();
1:ae778e2:                 writer.writeCharacters("\n");
1:218954f:             }
1:fff2e99: 
1:0d2c0ec:             for (XmlWriter bw : context.getBlueprintWriters().values()) {
1:868c96f:                 bw.write(writer);
1:ca31962:                 writer.writeCharacters("\n");
1:fff2e99:             }
1:fff2e99: 
1:46cfc09:             writer.writeEndElement();
1:ca31962:             writer.writeCharacters("\n");
1:46cfc09:             writer.writeEndDocument();
8:46cfc09:             writer.writeCharacters("\n");
1:46cfc09:             writer.close();
1:46cfc09:         } catch (XMLStreamException e) {
1:46cfc09:             throw new RuntimeException(e.getMessage(), e);
1:89994b6:         }
1:89994b6:     }
1:fff2e99: 
1:46cfc09:     private void writeBlueprint() throws XMLStreamException {
1:46cfc09:         writer.writeStartElement("blueprint");
1:46cfc09:         writer.writeDefaultNamespace(NS_BLUEPRINT);
1:46cfc09:         writer.writeNamespace("ext", NS_EXT);
1:0d2c0ec:         if (blueprintConfiguration.getDefaultActivation() != null) {
1:0d2c0ec:             writer.writeAttribute("default-activation", blueprintConfiguration.getDefaultActivation().name().toLowerCase());
1:89994b6:         }
1:89994b6:     }
1:fff2e99: 
1:46cfc09:     public void writeBeanStart(Bean bean) throws XMLStreamException {
1:46cfc09:         writer.writeStartElement("bean");
1:46cfc09:         writer.writeAttribute("id", bean.id);
1:46cfc09:         writer.writeAttribute("class", bean.clazz.getName());
1:7583a4c:         if (bean.needFieldInjection()) {
1:46cfc09:             writer.writeAttribute("ext", NS_EXT, "field-injection", "true");
1:89994b6:         }
1:f36cef0:         if (bean.isPrototype) {
1:f36cef0:             writer.writeAttribute("scope", "prototype");
1:f36cef0:         }
1:fff2e99: 
1:c201f83:         Map<String, String> attributes = bean.attributes;
1:c201f83:         for (Map.Entry<String, String> entry : attributes.entrySet()) {
1:c201f83:             writer.writeAttribute(entry.getKey(), entry.getValue());
1:89994b6:         }
1:a2ed671:         if (bean instanceof BeanFromFactory) {
1:a2ed671:             writeFactory((BeanFromFactory) bean);
1:ca31962:         }
1:46cfc09:         writer.writeCharacters("\n");
1:89994b6: 
1:0d2c0ec:         for (XmlWriter xmlWriter : bean.beanContentWriters.values()) {
3:46cfc09:             writer.writeCharacters("    ");
1:0d2c0ec:             xmlWriter.write(writer);
1:66fc490:             writer.writeCharacters("\n");
1:ca31962:         }
2:ca31962:     }
1:ca31962: 
1:a2ed671:     private void writeFactory(BeanFromFactory bean) throws XMLStreamException {
1:853c6ee:         writer.writeAttribute("factory-ref", bean.factoryBean.id);
1:b5bf406:         writer.writeAttribute("factory-method", bean.factoryMethod);
1:ca31962:     }
1:ca31962: 
1:218954f:     @Override
1:46cfc09:     public void writeProperty(Property property) {
1:46cfc09:         try {
1:66fc490:             writer.writeCharacters("    ");
1:46cfc09:             writer.writeEmptyElement("property");
1:46cfc09:             writer.writeAttribute("name", property.name);
1:46cfc09:             if (property.ref != null) {
1:46cfc09:                 writer.writeAttribute("ref", property.ref);
1:46cfc09:             } else if (property.value != null) {
1:46cfc09:                 writer.writeAttribute("value", property.value);
1:ca31962:             }
1:46cfc09:             writer.writeCharacters("\n");
1:46cfc09:         } catch (XMLStreamException e) {
1:46cfc09:             throw new RuntimeException(e.getMessage(), e);
1:ca31962:         }
1:ca31962:     }
1:ca31962: 
1:46cfc09:     @Override
1:218954f:     public void writeArgument(Argument argument) {
1:218954f:         try {
1:218954f:             writer.writeCharacters("    ");
1:218954f:             writer.writeEmptyElement("argument");
1:218954f:             if (argument.getRef() != null) {
1:218954f:                 writer.writeAttribute("ref", argument.getRef());
1:218954f:             } else if (argument.getValue() != null) {
1:218954f:                 writer.writeAttribute("value", argument.getValue());
1:218954f:             }
1:218954f:             writer.writeCharacters("\n");
1:218954f:         } catch (XMLStreamException e) {
1:218954f:             throw new RuntimeException(e.getMessage(), e);
1:218954f:         }
1:218954f:     }
1:ca31962: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:218954f
/////////////////////////////////////////////////////////////////////////
0:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * <p>
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.model.Argument;
1: import org.apache.aries.blueprint.plugin.model.ArgumentWriter;
/////////////////////////////////////////////////////////////////////////
0: import javax.persistence.PersistenceContext;
0: import javax.persistence.PersistenceUnit;
1: import javax.xml.stream.XMLOutputFactory;
1: import javax.xml.stream.XMLStreamException;
1: import javax.xml.stream.XMLStreamWriter;
1: import java.io.OutputStream;
0: import java.lang.reflect.Field;
0: import java.util.Arrays;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Set;
1: 
1: public class Generator implements PropertyWriter, ArgumentWriter {
/////////////////////////////////////////////////////////////////////////
1:                 bean.writeArguments(this);
/////////////////////////////////////////////////////////////////////////
0:             if (bean.persistenceFields.size() > 0) {
0:                 jpaUsed = true;
1:             }
/////////////////////////////////////////////////////////////////////////
1:         }
0:         if (namespace.contains("transactions")) {
/////////////////////////////////////////////////////////////////////////
0:             writeFactory((ProducedBean) bean);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void writeArgument(Argument argument) {
1:         try {
1:             writer.writeCharacters("    ");
1:             writer.writeEmptyElement("argument");
1:             if (argument.getRef() != null) {
1:                 writer.writeAttribute("ref", argument.getRef());
1:             } else if (argument.getValue() != null) {
1:                 writer.writeAttribute("value", argument.getValue());
1:             }
1:             writer.writeCharacters("\n");
1:         } catch (XMLStreamException e) {
1:             throw new RuntimeException(e.getMessage(), e);
1:         }
1:     }
commit:3aa60ba
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         if (bean.persistenceFields.size() > 0) {
/////////////////////////////////////////////////////////////////////////
0:     private void writePersistenceFields(List<Field> fields) throws XMLStreamException {
commit:fff2e99
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:             if (!bean.transactionDefs.isEmpty()) {
0:                 return true;
0:         return false;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:             for (TransactionalDef transactionalDef : bean.transactionDefs) {
0:                 writeTransactional(transactionalDef);
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:f36cef0
/////////////////////////////////////////////////////////////////////////
1:         if (bean.isPrototype) {
1:             writer.writeAttribute("scope", "prototype");
1:         }
commit:89994b6
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.HashSet;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public static final String NS_JPA = "http://aries.apache.org/xmlns/jpa/v1.1.0";
0:     public static final String NS_JPA2 = "http://aries.apache.org/xmlns/jpa/v2.0.0";
0:     public static final String NS_TX = "http://aries.apache.org/xmlns/transactions/v1.2.0";
0:     public static final String NS_TX2 = "http://aries.apache.org/xmlns/transactions/v2.0.0";
1:     
0:     private Set<String> namespaces;
0:     public Generator(Context context, OutputStream os, Set<String> namespaces) throws XMLStreamException {
0:         this.namespaces = namespaces;
0:         if (this.namespaces == null) {
0:             this.namespaces = new HashSet<String>(Arrays.asList(NS_TX2, NS_JPA2));
1:         }
/////////////////////////////////////////////////////////////////////////
0:             if (namespaces.contains(NS_JPA2) && isJpaUsed()) {
0:                 writer.writeEmptyElement(NS_JPA2, "enable");
1:                 writer.writeCharacters("\n");
1:             }
0:             if (namespaces.contains(NS_TX) && isJtaUsed()) {
1:             }
0:             if (namespaces.contains(NS_TX2) && isJtaUsed()) {
0:                 writer.writeEmptyElement(NS_TX2, "enable");
1:                 writer.writeCharacters("\n");
/////////////////////////////////////////////////////////////////////////
0:         for (String namespace : namespaces) {
0:             String prefix = getPrefixForNamesapace(namespace);
0:             writer.writeNamespace(prefix, namespace);
0:     private String getPrefixForNamesapace(String namespace) {
0:         if (namespace.contains("jpa")) {
0:             return "jpa";
0:         } if (namespace.contains("transactions")) {
0:             return "tx";
1:         }
0:         return "other";
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (namespaces.contains(NS_TX)) {
1:         }
0:         if (namespaces.contains(NS_JPA)) {
commit:853c6ee
/////////////////////////////////////////////////////////////////////////
1:         writer.writeAttribute("factory-ref", bean.factoryBean.id);
commit:ae778e2
/////////////////////////////////////////////////////////////////////////
0:     private static final String NS_JPA2 = "http://aries.apache.org/xmlns/jpa/v2.0.0";
/////////////////////////////////////////////////////////////////////////
1:             writer.writeCharacters("\n");
/////////////////////////////////////////////////////////////////////////
0:             new OsgiServiceRefWriter(writer).write(context.getServiceRefs());
/////////////////////////////////////////////////////////////////////////
commit:ca31962
/////////////////////////////////////////////////////////////////////////
0:     private static final String NS_JPA2 = "http://aries.apache.org/xmlns/jpan/v1.0.0";
0:     private static final String NS_TX = "http://aries.apache.org/xmlns/transactions/v1.2.0";
0:     private boolean persistenceAnnotated;
0:     public Generator(Context context, OutputStream os, boolean persistenceAnnotated) throws XMLStreamException {
0:         this.persistenceAnnotated = persistenceAnnotated;
/////////////////////////////////////////////////////////////////////////
1:             
0:             if (persistenceAnnotated) {
0:                 if (isJpaUsed()) {
0:                     writer.writeEmptyElement(NS_JPA2, "enable");
1:                     writer.writeCharacters("\n");
1:                 }
0:                 writer.writeEmptyElement(NS_TX, "enable-annotations");
1:                 writer.writeCharacters("\n");
0:                 //if (isJtaUsed()) {
0: //                    writer.writeEmptyElement(NS_TX, "enable-annotations");
0:                 //}
1:             }
/////////////////////////////////////////////////////////////////////////
0:     private boolean isJpaUsed() {
0:         boolean jpaUsed = false;
1:         for (Bean bean : context.getBeans()) {
0:         if (bean.persistenceFields.length > 0) {
0:             jpaUsed = true;
1:         }
1:         }
0:         return jpaUsed;
1:     }
1: 
0:     private boolean isJtaUsed() {
0:         boolean jtaUsed = false;
1:         for (Bean bean : context.getBeans()) {
0:             if (bean.transactionDef != null) {
0:                 jtaUsed = true;
1:             }
1: 
1:         }
0:         return jtaUsed;
1:     }
1: 
0:         if (persistenceAnnotated) {
0:             writer.writeNamespace("jpa", NS_JPA2);
0:         } else {
0:             writer.writeNamespace("jpa", NS_JPA);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         
0:         if (!persistenceAnnotated) {
0:             writeTransactional(bean.transactionDef);
0:             writePersistenceFields(bean.persistenceFields);
0:         }
commit:b5bf406
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.model.OsgiServiceRef;
0: import org.apache.aries.blueprint.plugin.model.ProducedBean;
/////////////////////////////////////////////////////////////////////////
0:         if (bean instanceof ProducedBean) {
0:             writeFactory((ProducedBean)bean);
0:         }
/////////////////////////////////////////////////////////////////////////
0:     private void writeFactory(ProducedBean bean) throws XMLStreamException {
0:         writer.writeAttribute("factory-ref", bean.factoryBeanId);
1:         writer.writeAttribute("factory-method", bean.factoryMethod);
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         for (OsgiServiceRef serviceBean : context.getServiceRefs()) {
0:     private void writeServiceRef(OsgiServiceRef serviceBean) throws XMLStreamException {
commit:66fc490
/////////////////////////////////////////////////////////////////////////
0: import javax.persistence.PersistenceContext;
/////////////////////////////////////////////////////////////////////////
0:         writePersistenceFields(bean.persistenceFields);
/////////////////////////////////////////////////////////////////////////
0:     
0:     private void writePersistenceFields(Field[] fields) throws XMLStreamException {
0:         for (Field field : fields) {
0:             writePersistenceField(field);
0:         }
0:     }
0: 
0:     private void writePersistenceField(Field field) throws XMLStreamException {
0:         PersistenceContext persistenceContext = field.getAnnotation(PersistenceContext.class);
0:         if (persistenceContext != null) {
0:             writer.writeAttribute("unitname", persistenceContext.unitName());
0:             writer.writeAttribute("property", field.getName());
1:             writer.writeCharacters("\n");
0:         }
0:         PersistenceUnit persistenceUnit = field.getAnnotation(PersistenceUnit.class);
0:         if (persistenceUnit != null) {
1:             writer.writeCharacters("    ");
0:             writer.writeEmptyElement("jpa", "unit", NS_JPA);
0: 
commit:46cfc09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin;
0: 
0: import java.io.OutputStream;
0: import java.lang.reflect.Field;
0: 
0: import javax.persistence.PersistenceUnit;
0: import javax.xml.stream.XMLOutputFactory;
0: import javax.xml.stream.XMLStreamException;
0: import javax.xml.stream.XMLStreamWriter;
0: 
1: import org.apache.aries.blueprint.plugin.model.Bean;
1: import org.apache.aries.blueprint.plugin.model.Context;
0: import org.apache.aries.blueprint.plugin.model.OsgiServiceBean;
1: import org.apache.aries.blueprint.plugin.model.Property;
1: import org.apache.aries.blueprint.plugin.model.PropertyWriter;
0: import org.apache.aries.blueprint.plugin.model.TransactionalDef;
0: 
0: public class Generator implements PropertyWriter {
1:     private static final String NS_BLUEPRINT = "http://www.osgi.org/xmlns/blueprint/v1.0.0";
1:     private static final String NS_EXT = "http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0";
0:     private static final String NS_JPA = "http://aries.apache.org/xmlns/jpa/v1.1.0";
0:     private static final String NS_TX = "http://aries.apache.org/xmlns/transactions/v1.1.0";
0: 
0:     private Context context;
0:     private XMLStreamWriter writer;
0: 
0:     public Generator(Context context, OutputStream os) throws XMLStreamException {
1:         this.context = context;
0:         
1:         XMLOutputFactory factory = XMLOutputFactory.newInstance();
1:         writer = factory.createXMLStreamWriter(os);
0:     }
0: 
1:     public void generate() {
1:         try {
1:             writer.writeStartDocument();
1:             writer.writeCharacters("\n");
1:             writeBlueprint();
0:             for (Bean bean : context.getBeans()) {
1:                 writeBeanStart(bean);
1:                 bean.writeProperties(this);
1:                 writer.writeEndElement();
1:                 writer.writeCharacters("\n");
0:             }
0:             
0:             writeServiceRefs();
0:             new OsgiServiceProviderWriter(writer).write(context.getBeans());
0:             
1:             writer.writeEndElement();
1:             writer.writeCharacters("\n");
1:             writer.writeEndDocument();
1:             writer.writeCharacters("\n");
1:             writer.close();
1:         } catch (XMLStreamException e) {
1:             throw new RuntimeException(e.getMessage(), e);
0:         }
0:     }
0: 
1:     private void writeBlueprint() throws XMLStreamException {
1:         writer.writeStartElement("blueprint");
1:         writer.writeDefaultNamespace(NS_BLUEPRINT);
1:         writer.writeNamespace("ext", NS_EXT);
0:         writer.writeNamespace("jpa", NS_JPA);
0:         writer.writeNamespace("tx", NS_TX);
1:         writer.writeCharacters("\n");
0:     }
0:     
1:     public void writeBeanStart(Bean bean) throws XMLStreamException {
1:         writer.writeStartElement("bean");
1:         writer.writeAttribute("id", bean.id);
1:         writer.writeAttribute("class", bean.clazz.getName());
1:         writer.writeAttribute("ext", NS_EXT, "field-injection", "true");
0:         if (bean.initMethod != null) {
0:             writer.writeAttribute("init-method", bean.initMethod);
0:         }
0:         if (bean.destroyMethod != null) {
0:             writer.writeAttribute("destroy-method", bean.destroyMethod);
0:         }
1:         writer.writeCharacters("\n");
0:         writeTransactional(bean.transactionDef);
0: 
0:         if (bean.persistenceUnitField != null) {
0:             writePersistenceUnit(bean.persistenceUnitField);
0:         }
0:     }
0:     
0:     private void writeTransactional(TransactionalDef transactionDef)
0:             throws XMLStreamException {
0:         if (transactionDef != null) {
1:             writer.writeCharacters("    ");
0:             writer.writeEmptyElement("tx", "transaction", NS_TX);
0:             writer.writeAttribute("method", transactionDef.getMethod());
0:             writer.writeAttribute("value", transactionDef.getType());
1:             writer.writeCharacters("\n");
0:         }
0:     }
0: 
0:     private void writePersistenceUnit(Field field) throws XMLStreamException {
0:         PersistenceUnit persistenceUnit = field.getAnnotation(PersistenceUnit.class);
0:         if (persistenceUnit !=null) {
1:             writer.writeCharacters("    ");
0:             writer.writeEmptyElement("jpa", "context", NS_JPA);
0:             writer.writeAttribute("unitname", persistenceUnit.unitName());
0:             writer.writeAttribute("property", field.getName());
1:             writer.writeCharacters("\n");
0:         }
0:     }
0:     
0:     private void writeServiceRefs() throws XMLStreamException {
0:         for (OsgiServiceBean serviceBean : context.getServiceRefs()) {
0:             writeServiceRef(serviceBean);
0:         }
0:     }
0: 
0:     private void writeServiceRef(OsgiServiceBean serviceBean) throws XMLStreamException {
0:         writer.writeEmptyElement("reference");
0:         writer.writeAttribute("id", serviceBean.id);
0:         writer.writeAttribute("interface", serviceBean.clazz.getName());
0:         if (serviceBean.filter != null && !"".equals(serviceBean.filter)) {
0:             writer.writeAttribute("filter", serviceBean.filter);
0:         }
1:         writer.writeCharacters("\n");
0:     }
0: 
1:     @Override
1:     public void writeProperty(Property property) {
1:         try {
1:             writer.writeCharacters("    ");
1:             writer.writeEmptyElement("property");
1:             writer.writeAttribute("name", property.name);
1:             if (property.ref != null) {
1:                 writer.writeAttribute("ref", property.ref);
1:             } else if (property.value != null) {
1:                 writer.writeAttribute("value", property.value);
0:             }
1:             writer.writeCharacters("\n");
1:         } catch (XMLStreamException e) {
1:             throw new RuntimeException(e.getMessage(), e);
0:         }
0:     }
0: 
0: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:a2ed671
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.model.BeanFromFactory;
/////////////////////////////////////////////////////////////////////////
1:         if (bean instanceof BeanFromFactory) {
1:             writeFactory((BeanFromFactory) bean);
/////////////////////////////////////////////////////////////////////////
1:     private void writeFactory(BeanFromFactory bean) throws XMLStreamException {
commit:6aac545
/////////////////////////////////////////////////////////////////////////
0:                 writer.writeCharacters("\n");
/////////////////////////////////////////////////////////////////////////
0:             writer.writeCharacters("    ");
0:             writer.writeCharacters("\n");
commit:64f241a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:119afa3
/////////////////////////////////////////////////////////////////////////
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.BlueprintConfiguration;
1: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final BlueprintConfiguration blueprintConfiguration;
1:     public Generator(Context context, OutputStream os, BlueprintConfiguration blueprintConfiguration) throws XMLStreamException {
1:         this.blueprintConfiguration = blueprintConfiguration;
/////////////////////////////////////////////////////////////////////////
0:             if (blueprintConfiguration.getNamespaces().contains(NS_JPA2) && isJpaUsed()) {
/////////////////////////////////////////////////////////////////////////
1:             for (XmlWriter bw : context.getBlueprintWriters().values()) {
/////////////////////////////////////////////////////////////////////////
0:         for (String namespace : blueprintConfiguration.getNamespaces()) {
1:         if (blueprintConfiguration.getDefaultActivation() != null) {
1:             writer.writeAttribute("default-activation", blueprintConfiguration.getDefaultActivation().name().toLowerCase());
/////////////////////////////////////////////////////////////////////////
1:         for (XmlWriter xmlWriter : bean.beanContentWriters.values()) {
1:             xmlWriter.write(writer);
0:         if (blueprintConfiguration.getNamespaces().contains(NS_JPA)) {
/////////////////////////////////////////////////////////////////////////
commit:a04c623
/////////////////////////////////////////////////////////////////////////
commit:868c96f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.spi.BlueprintWriter;
/////////////////////////////////////////////////////////////////////////
0:             for (BlueprintWriter bw : context.getBlueprintWriters().values()) {
1:                 bw.write(writer);
0:             }
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:         this.namespaces = namespaces != null ? namespaces : new HashSet<>(Arrays.asList(NS_TX2, NS_JPA2));
/////////////////////////////////////////////////////////////////////////
0: 
1:         Map<String, String> attributes = bean.attributes;
1:         for (Map.Entry<String, String> entry : attributes.entrySet()) {
1:             writer.writeAttribute(entry.getKey(), entry.getValue());
commit:0eb5481
/////////////////////////////////////////////////////////////////////////
0:         if (bean.dependsOn != null) {
0:             writer.writeAttribute("depends-on", bean.dependsOn);
0:         }
commit:7583a4c
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
1:     private final Context context;
1:     private final XMLStreamWriter writer;
0:     private final Set<String> namespaces;
0:     private final Activation defaultActivation;
0:     public Generator(Context context, OutputStream os, Set<String> namespaces, Activation defaultActivation) throws XMLStreamException {
0:         this.namespaces = namespaces != null ? namespaces :  new HashSet<>(Arrays.asList(NS_TX2, NS_JPA2));
0:         this.defaultActivation = defaultActivation;
/////////////////////////////////////////////////////////////////////////
0:         if (defaultActivation != null) {
0:             writer.writeAttribute("default-activation", defaultActivation.name().toLowerCase());
0:         }
/////////////////////////////////////////////////////////////////////////
1:         if (bean.needFieldInjection()) {
0:         if (bean.activation != null) {
0:             writer.writeAttribute("activation", bean.activation.toString());
0:         }
/////////////////////////////////////////////////////////////////////////
0:         throws XMLStreamException {
commit:9632b7d
/////////////////////////////////////////////////////////////////////////
0:         if(bean.needFieldInjection()) {
0:             writer.writeAttribute("ext", NS_EXT, "field-injection", "true");
0:         }
commit:3d350f5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.model.service.ServiceProviderWriter;
/////////////////////////////////////////////////////////////////////////
0:             new ServiceProviderWriter(writer).write(context.getServiceProviders());
============================================================================