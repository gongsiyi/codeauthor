1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.web;
1:628add4: 
1:628add4: import javax.servlet.*;
1:628add4: import javax.servlet.http.*;
1:628add4: 
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.*;
1:56a6860: import org.apache.aries.samples.ariestrader.util.*;
1:628add4: 
1:628add4: import java.util.Collection;
1:628add4: import java.util.Iterator;
1:628add4: import java.io.IOException;
1:628add4: import java.io.PrintWriter;
1:628add4: 
1:628add4: /**
1:628add4:  * TradeScenarioServlet emulates a population of web users by generating a specific Trade operation 
1:628add4:  * for a randomly chosen user on each access to the URL. Test this servlet by clicking Trade Scenario 
1:628add4:  * and hit "Reload" on your browser to step through a Trade Scenario. To benchmark using this URL aim 
1:628add4:  * your favorite web load generator (such as AKStress) at the Trade Scenario URL and fire away.
1:628add4:  */
1:628add4: public class TradeScenarioServlet extends HttpServlet {
1:628add4: 
1:628add4:    /**
1:628add4: 	* Servlet initialization method.
1:628add4: 	*/
1:628add4: 	public void init(ServletConfig config) throws ServletException
1:628add4: 	{
1:628add4: 		super.init(config);
1:628add4: 		java.util.Enumeration en = config.getInitParameterNames();
1:628add4: 		while ( en.hasMoreElements() )
1:628add4: 		{
1:628add4: 			String parm = (String) en.nextElement();
1:628add4: 			String value = config.getInitParameter(parm);
1:628add4: 			TradeConfig.setConfigParam(parm, value);
1:628add4: 		}
1:628add4: 	}
1:628add4: 	
1:628add4:    /**
1:628add4: 	* Returns a string that contains information about TradeScenarioServlet
1:628add4: 	*
1:628add4: 	* @return The servlet information
1:628add4: 	*/
1:628add4: 	public java.lang.String getServletInfo()
1:628add4: 	{
1:628add4: 		return "TradeScenarioServlet emulates a population of web users";
1:628add4: 	}	
1:628add4: 
1:628add4: 
1:628add4: 
1:628add4:    /**
1:628add4: 	* Process incoming HTTP GET requests
1:628add4: 	*
1:628add4: 	* @param request Object that encapsulates the request to the servlet
1:628add4: 	* @param response Object that encapsulates the response from the servlet
1:628add4: 	*/
1:628add4: 	public void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
1:628add4: 		throws ServletException, IOException
1:628add4: 	{
1:628add4: 		performTask(request,response);
1:628add4: 	}
1:628add4: 
1:628add4:    /**
1:628add4: 	* Process incoming HTTP POST requests
1:628add4: 	*
1:628add4: 	* @param request Object that encapsulates the request to the servlet
1:628add4: 	* @param response Object that encapsulates the response from the servlet
1:628add4: 	*/
1:628add4: 	public void doPost(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
1:628add4: 		throws ServletException, IOException
1:628add4: 	{
1:628add4: 		performTask(request,response);
1:628add4: 	}	
1:628add4: 
1:628add4:    /** 
1:628add4: 	* Main service method for TradeScenarioServlet
1:628add4: 	*
1:628add4: 	* @param request Object that encapsulates the request to the servlet
1:628add4: 	* @param response Object that encapsulates the response from the servlet
1:628add4: 	*/    
1:628add4: 	public void performTask(HttpServletRequest req, HttpServletResponse resp)
1:628add4: 		throws ServletException, IOException {
1:628add4: 
1:628add4: 		// Scenario generator for Trade2
1:628add4: 		char action = ' ';
1:628add4: 		String userID = null;
1:628add4: 
1:628add4: 		// String to create full dispatch path to TradeAppServlet w/ request Parameters
1:628add4: 		String dispPath = null; // Dispatch Path to TradeAppServlet
1:628add4: 
1:628add4: 		String scenarioAction = (String) req.getParameter("action");
1:628add4: 		if ((scenarioAction != null) && (scenarioAction.length() >= 1))
1:628add4: 		{
1:628add4: 			action = scenarioAction.charAt(0);
1:628add4: 			if (action == 'n')
1:628add4: 			{ //null;
1:628add4: 				try
1:628add4: 				{
1:628add4: 					resp.setContentType("text/html");
1:628add4: 					PrintWriter out = new PrintWriter(resp.getOutputStream());
1:628add4: 					out.println("<HTML><HEAD>TradeScenarioServlet</HEAD><BODY>Hello</BODY></HTML>"); 
1:628add4: 					out.close();
1:628add4: 					return;
1:628add4: 	
1:628add4: 				}
1:628add4: 				catch (Exception e)
1:628add4: 				{
1:628add4: 					Log.error(
1:628add4: 						"trade_client.TradeScenarioServlet.service(...)" + 
1:628add4: 						"error creating printwriter from responce.getOutputStream", e);
1:628add4: 						
1:628add4: 					resp.sendError(
1:628add4: 							500, 
1:628add4: 						"trade_client.TradeScenarioServlet.service(...): erorr creating and writing to PrintStream created from response.getOutputStream()"); 
1:628add4: 				} //end of catch
1:628add4: 	
1:628add4: 			} //end of action=='n'
1:628add4: 		}
1:628add4: 
1:628add4: 
1:628add4: 		ServletContext ctx = null;
1:628add4: 		HttpSession session = null;
1:628add4: 		try
1:628add4: 		{
1:628add4: 			ctx = getServletConfig().getServletContext();
1:628add4: 			// These operations require the user to be logged in. Verify the user and if not logged in
1:628add4: 			// change the operation to a login
1:628add4: 			session = req.getSession(true);
1:628add4: 			userID = (String) session.getAttribute("uidBean");
1:628add4: 		}
1:628add4: 		catch (Exception e)
1:628add4: 		{
1:628add4: 			Log.error(
1:628add4: 				"trade_client.TradeScenarioServlet.service(...): performing " + scenarioAction +
1:628add4: 				"error getting ServletContext,HttpSession, or UserID from session" +
1:628add4: 				"will make scenarioAction a login and try to recover from there", e);
1:628add4: 			userID = null;
1:628add4: 			action = 'l';
1:628add4: 		}
1:628add4: 
1:628add4: 		if (userID == null)
1:628add4: 		{
1:628add4: 			action = 'l'; // change to login
1:628add4: 			TradeConfig.incrementScenarioCount();
1:628add4: 		}
1:628add4: 		else if (action == ' ') {
1:628add4: 			//action is not specified perform a random operation according to current mix
1:628add4: 			// Tell getScenarioAction if we are an original user or a registered user 
1:628add4: 			// -- sellDeficits should only be compensated for with original users.
1:628add4: 			action = TradeConfig.getScenarioAction(
1:628add4: 				userID.startsWith(TradeConfig.newUserPrefix));
1:628add4: 		}	
1:628add4: 		switch (action)
1:628add4: 			{
1:628add4: 
1:628add4: 				case 'q' : //quote 
1:628add4: 					dispPath = tasPathPrefix + "quotes&symbols=" + TradeConfig.rndSymbols();
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 					break;
1:628add4: 				case 'a' : //account
1:628add4: 					dispPath = tasPathPrefix + "account";
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 					break;
1:628add4: 				case 'u' : //update account profile
1:628add4: 					dispPath = tasPathPrefix + "account";
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 
1:628add4: 					String fullName = "rnd" + System.currentTimeMillis();
1:628add4: 					String address = "rndAddress";
1:628add4: 					String   password = "xxx";
1:628add4: 					String email = "rndEmail";
1:628add4: 					String creditcard = "rndCC";
1:628add4: 					dispPath = tasPathPrefix + "update_profile&fullname=" + fullName + 
1:628add4: 						"&password=" + password + "&cpassword=" + password + 					
1:628add4: 						"&address=" + address +	"&email=" + email + 
1:628add4: 						"&creditcard=" +  creditcard;
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 					break;
1:628add4: 				case 'h' : //home
1:628add4: 					dispPath = tasPathPrefix + "home";
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 					break;
1:628add4: 				case 'l' : //login
1:628add4: 					userID = TradeConfig.getUserID();
1:628add4: 					String password2 = "xxx";
1:628add4: 					dispPath = tasPathPrefix + "login&inScenario=true&uid=" + userID + "&passwd=" + password2;
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 						
1:628add4: 					// login is successful if the userID is written to the HTTP session
1:628add4: 					if (session.getAttribute("uidBean") == null) {
1:628add4: 						System.out.println("TradeScenario login failed. Reset DB between runs");
1:628add4: 					} 
1:628add4: 					break;
1:628add4: 				case 'o' : //logout
1:628add4: 					dispPath = tasPathPrefix + "logout";
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 					break;
1:628add4: 				case 'p' : //portfolio
1:628add4: 					dispPath = tasPathPrefix + "portfolio";
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 					break;
1:628add4: 				case 'r' : //register
1:628add4: 					//Logout the current user to become a new user
1:628add4: 					// see note in TradeServletAction
1:628add4: 					req.setAttribute("TSS-RecreateSessionInLogout", Boolean.TRUE);
1:628add4: 					dispPath = tasPathPrefix + "logout";
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 
1:628add4: 					userID = TradeConfig.rndNewUserID();
1:628add4: 					String passwd = "yyy";
1:628add4: 					fullName = TradeConfig.rndFullName();
1:628add4: 					creditcard = TradeConfig.rndCreditCard();
1:628add4: 					String money = TradeConfig.rndBalance();
1:628add4: 					email = TradeConfig.rndEmail(userID);
1:628add4: 					String smail = TradeConfig.rndAddress();
1:628add4: 					dispPath = tasPathPrefix + "register&Full Name=" + fullName + "&snail mail=" + smail +
1:628add4: 						"&email=" + email + "&user id=" + userID + "&passwd=" + passwd + 
1:628add4: 						"&confirm passwd=" + passwd + "&money=" + money + 
1:628add4: 						"&Credit Card Number=" + creditcard;
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 					break;
1:628add4: 				case 's' : //sell
1:628add4: 					dispPath = tasPathPrefix + "portfolioNoEdge";
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 
1:628add4: 					Collection holdings = (Collection) req.getAttribute("holdingDataBeans");
1:628add4: 					int numHoldings = holdings.size();
1:628add4: 					if (numHoldings > 0)
1:628add4: 					{
1:628add4: 						//sell first available security out of holding 
1:628add4: 						
1:628add4: 						Iterator it = holdings.iterator();
1:628add4: 						boolean foundHoldingToSell = false;
1:628add4: 						while (it.hasNext()) 
1:628add4: 						{
1:628add4: 							HoldingDataBean holdingData = (HoldingDataBean) it.next();
1:628add4: 							if ( !(holdingData.getPurchaseDate().equals(new java.util.Date(0)))  )
1:628add4: 							{
1:628add4: 								Integer holdingID = holdingData.getHoldingID();
1:628add4: 
1:628add4: 								dispPath = tasPathPrefix + "sell&holdingID="+holdingID;
1:628add4: 								ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 								foundHoldingToSell = true;
1:628add4: 								break;	
1:628add4: 							}
1:628add4: 						}
1:628add4: 						if (foundHoldingToSell) break;
1:628add4: 						if (Log.doTrace())
1:628add4: 							Log.trace("TradeScenario: No holding to sell -switch to buy -- userID = " + userID + "  Collection count = " + numHoldings);		
1:628add4: 
1:628add4: 					}
1:628add4: 					// At this point: A TradeScenario Sell was requested with No Stocks in Portfolio
1:628add4: 					// This can happen when a new registered user happens to request a sell before a buy
1:628add4: 					// In this case, fall through and perform a buy instead
1:628add4: 
1:628add4: 					/* Trade 2.037: Added sell_deficit counter to maintain correct buy/sell mix.
1:628add4: 					 * When a users portfolio is reduced to 0 holdings, a buy is requested instead of a sell.
1:628add4: 					 * This throws off the buy/sell mix by 1. This results in unwanted holding table growth
1:628add4: 					 * To fix this we increment a sell deficit counter to maintain the correct ratio in getScenarioAction
1:628add4: 					 * The 'z' action from getScenario denotes that this is a sell action that was switched from a buy
1:628add4: 					 * to reduce a sellDeficit
1:628add4: 					 */
1:628add4: 					if (userID.startsWith(TradeConfig.newUserPrefix) == false)
1:628add4: 					{
1:628add4: 						TradeConfig.incrementSellDeficit();
1:628add4: 					}
1:628add4: 				case 'b' : //buy
1:628add4: 					String symbol = TradeConfig.rndSymbol();
1:628add4: 					String amount = TradeConfig.rndQuantity() + "";
1:628add4: 
1:628add4: 					dispPath = tasPathPrefix + "quotes&symbols=" + symbol;
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 
1:628add4: 					dispPath = tasPathPrefix + "buy&quantity=" + amount + "&symbol=" + symbol;
1:628add4: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1:628add4: 					break;
1:628add4: 			} //end of switch statement 
1:628add4: 	}
1:628add4: 
1:628add4: 	// URL Path Prefix for dispatching to TradeAppServlet
1:628add4: 	private final static String tasPathPrefix = "/app?action=";
1:628add4: 
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.*;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.web;
0: import org.apache.aries.samples.ariestrader.persistence.api.*;
1: import org.apache.aries.samples.ariestrader.util.*;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.web;
0: import org.apache.aries.samples.daytrader.persistence.api.*;
0: import org.apache.aries.samples.daytrader.util.*;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.web;
1: 
1: import javax.servlet.*;
1: import javax.servlet.http.*;
1: 
0: import org.apache.geronimo.samples.daytrader.persistence.api.*;
0: import org.apache.geronimo.samples.daytrader.util.*;
1: 
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: 
1: /**
1:  * TradeScenarioServlet emulates a population of web users by generating a specific Trade operation 
1:  * for a randomly chosen user on each access to the URL. Test this servlet by clicking Trade Scenario 
1:  * and hit "Reload" on your browser to step through a Trade Scenario. To benchmark using this URL aim 
1:  * your favorite web load generator (such as AKStress) at the Trade Scenario URL and fire away.
1:  */
1: public class TradeScenarioServlet extends HttpServlet {
1: 
1:    /**
1: 	* Servlet initialization method.
1: 	*/
1: 	public void init(ServletConfig config) throws ServletException
1: 	{
1: 		super.init(config);
1: 		java.util.Enumeration en = config.getInitParameterNames();
1: 		while ( en.hasMoreElements() )
1: 		{
1: 			String parm = (String) en.nextElement();
1: 			String value = config.getInitParameter(parm);
1: 			TradeConfig.setConfigParam(parm, value);
1: 		}
1: 	}
1: 	
1:    /**
1: 	* Returns a string that contains information about TradeScenarioServlet
1: 	*
1: 	* @return The servlet information
1: 	*/
1: 	public java.lang.String getServletInfo()
1: 	{
1: 		return "TradeScenarioServlet emulates a population of web users";
1: 	}	
1: 
1: 
1: 
1:    /**
1: 	* Process incoming HTTP GET requests
1: 	*
1: 	* @param request Object that encapsulates the request to the servlet
1: 	* @param response Object that encapsulates the response from the servlet
1: 	*/
1: 	public void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
1: 		throws ServletException, IOException
1: 	{
1: 		performTask(request,response);
1: 	}
1: 
1:    /**
1: 	* Process incoming HTTP POST requests
1: 	*
1: 	* @param request Object that encapsulates the request to the servlet
1: 	* @param response Object that encapsulates the response from the servlet
1: 	*/
1: 	public void doPost(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
1: 		throws ServletException, IOException
1: 	{
1: 		performTask(request,response);
1: 	}	
1: 
1:    /** 
1: 	* Main service method for TradeScenarioServlet
1: 	*
1: 	* @param request Object that encapsulates the request to the servlet
1: 	* @param response Object that encapsulates the response from the servlet
1: 	*/    
1: 	public void performTask(HttpServletRequest req, HttpServletResponse resp)
1: 		throws ServletException, IOException {
1: 
1: 		// Scenario generator for Trade2
1: 		char action = ' ';
1: 		String userID = null;
1: 
1: 		// String to create full dispatch path to TradeAppServlet w/ request Parameters
1: 		String dispPath = null; // Dispatch Path to TradeAppServlet
1: 
1: 		String scenarioAction = (String) req.getParameter("action");
1: 		if ((scenarioAction != null) && (scenarioAction.length() >= 1))
1: 		{
1: 			action = scenarioAction.charAt(0);
1: 			if (action == 'n')
1: 			{ //null;
1: 				try
1: 				{
1: 					resp.setContentType("text/html");
1: 					PrintWriter out = new PrintWriter(resp.getOutputStream());
1: 					out.println("<HTML><HEAD>TradeScenarioServlet</HEAD><BODY>Hello</BODY></HTML>"); 
1: 					out.close();
1: 					return;
1: 	
1: 				}
1: 				catch (Exception e)
1: 				{
1: 					Log.error(
1: 						"trade_client.TradeScenarioServlet.service(...)" + 
1: 						"error creating printwriter from responce.getOutputStream", e);
1: 						
1: 					resp.sendError(
1: 							500, 
1: 						"trade_client.TradeScenarioServlet.service(...): erorr creating and writing to PrintStream created from response.getOutputStream()"); 
1: 				} //end of catch
1: 	
1: 			} //end of action=='n'
1: 		}
1: 
1: 
1: 		ServletContext ctx = null;
1: 		HttpSession session = null;
1: 		try
1: 		{
1: 			ctx = getServletConfig().getServletContext();
1: 			// These operations require the user to be logged in. Verify the user and if not logged in
1: 			// change the operation to a login
1: 			session = req.getSession(true);
1: 			userID = (String) session.getAttribute("uidBean");
1: 		}
1: 		catch (Exception e)
1: 		{
1: 			Log.error(
1: 				"trade_client.TradeScenarioServlet.service(...): performing " + scenarioAction +
1: 				"error getting ServletContext,HttpSession, or UserID from session" +
1: 				"will make scenarioAction a login and try to recover from there", e);
1: 			userID = null;
1: 			action = 'l';
1: 		}
1: 
1: 		if (userID == null)
1: 		{
1: 			action = 'l'; // change to login
1: 			TradeConfig.incrementScenarioCount();
1: 		}
1: 		else if (action == ' ') {
1: 			//action is not specified perform a random operation according to current mix
1: 			// Tell getScenarioAction if we are an original user or a registered user 
1: 			// -- sellDeficits should only be compensated for with original users.
1: 			action = TradeConfig.getScenarioAction(
1: 				userID.startsWith(TradeConfig.newUserPrefix));
1: 		}	
1: 		switch (action)
1: 			{
1: 
1: 				case 'q' : //quote 
1: 					dispPath = tasPathPrefix + "quotes&symbols=" + TradeConfig.rndSymbols();
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 					break;
1: 				case 'a' : //account
1: 					dispPath = tasPathPrefix + "account";
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 					break;
1: 				case 'u' : //update account profile
1: 					dispPath = tasPathPrefix + "account";
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 
1: 					String fullName = "rnd" + System.currentTimeMillis();
1: 					String address = "rndAddress";
1: 					String   password = "xxx";
1: 					String email = "rndEmail";
1: 					String creditcard = "rndCC";
1: 					dispPath = tasPathPrefix + "update_profile&fullname=" + fullName + 
1: 						"&password=" + password + "&cpassword=" + password + 					
1: 						"&address=" + address +	"&email=" + email + 
1: 						"&creditcard=" +  creditcard;
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 					break;
1: 				case 'h' : //home
1: 					dispPath = tasPathPrefix + "home";
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 					break;
1: 				case 'l' : //login
1: 					userID = TradeConfig.getUserID();
1: 					String password2 = "xxx";
1: 					dispPath = tasPathPrefix + "login&inScenario=true&uid=" + userID + "&passwd=" + password2;
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 						
1: 					// login is successful if the userID is written to the HTTP session
1: 					if (session.getAttribute("uidBean") == null) {
1: 						System.out.println("TradeScenario login failed. Reset DB between runs");
1: 					} 
1: 					break;
1: 				case 'o' : //logout
1: 					dispPath = tasPathPrefix + "logout";
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 					break;
1: 				case 'p' : //portfolio
1: 					dispPath = tasPathPrefix + "portfolio";
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 					break;
1: 				case 'r' : //register
1: 					//Logout the current user to become a new user
1: 					// see note in TradeServletAction
1: 					req.setAttribute("TSS-RecreateSessionInLogout", Boolean.TRUE);
1: 					dispPath = tasPathPrefix + "logout";
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 
1: 					userID = TradeConfig.rndNewUserID();
1: 					String passwd = "yyy";
1: 					fullName = TradeConfig.rndFullName();
1: 					creditcard = TradeConfig.rndCreditCard();
1: 					String money = TradeConfig.rndBalance();
1: 					email = TradeConfig.rndEmail(userID);
1: 					String smail = TradeConfig.rndAddress();
1: 					dispPath = tasPathPrefix + "register&Full Name=" + fullName + "&snail mail=" + smail +
1: 						"&email=" + email + "&user id=" + userID + "&passwd=" + passwd + 
1: 						"&confirm passwd=" + passwd + "&money=" + money + 
1: 						"&Credit Card Number=" + creditcard;
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 					break;
1: 				case 's' : //sell
1: 					dispPath = tasPathPrefix + "portfolioNoEdge";
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 
1: 					Collection holdings = (Collection) req.getAttribute("holdingDataBeans");
1: 					int numHoldings = holdings.size();
1: 					if (numHoldings > 0)
1: 					{
1: 						//sell first available security out of holding 
1: 						
1: 						Iterator it = holdings.iterator();
1: 						boolean foundHoldingToSell = false;
1: 						while (it.hasNext()) 
1: 						{
1: 							HoldingDataBean holdingData = (HoldingDataBean) it.next();
1: 							if ( !(holdingData.getPurchaseDate().equals(new java.util.Date(0)))  )
1: 							{
1: 								Integer holdingID = holdingData.getHoldingID();
1: 
1: 								dispPath = tasPathPrefix + "sell&holdingID="+holdingID;
1: 								ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 								foundHoldingToSell = true;
1: 								break;	
1: 							}
1: 						}
1: 						if (foundHoldingToSell) break;
1: 						if (Log.doTrace())
1: 							Log.trace("TradeScenario: No holding to sell -switch to buy -- userID = " + userID + "  Collection count = " + numHoldings);		
1: 
1: 					}
1: 					// At this point: A TradeScenario Sell was requested with No Stocks in Portfolio
1: 					// This can happen when a new registered user happens to request a sell before a buy
1: 					// In this case, fall through and perform a buy instead
1: 
1: 					/* Trade 2.037: Added sell_deficit counter to maintain correct buy/sell mix.
1: 					 * When a users portfolio is reduced to 0 holdings, a buy is requested instead of a sell.
1: 					 * This throws off the buy/sell mix by 1. This results in unwanted holding table growth
1: 					 * To fix this we increment a sell deficit counter to maintain the correct ratio in getScenarioAction
1: 					 * The 'z' action from getScenario denotes that this is a sell action that was switched from a buy
1: 					 * to reduce a sellDeficit
1: 					 */
1: 					if (userID.startsWith(TradeConfig.newUserPrefix) == false)
1: 					{
1: 						TradeConfig.incrementSellDeficit();
1: 					}
1: 				case 'b' : //buy
1: 					String symbol = TradeConfig.rndSymbol();
1: 					String amount = TradeConfig.rndQuantity() + "";
1: 
1: 					dispPath = tasPathPrefix + "quotes&symbols=" + symbol;
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 
1: 					dispPath = tasPathPrefix + "buy&quantity=" + amount + "&symbol=" + symbol;
1: 					ctx.getRequestDispatcher(dispPath).include(req, resp);
1: 					break;
1: 			} //end of switch statement 
1: 	}
1: 
1: 	// URL Path Prefix for dispatching to TradeAppServlet
1: 	private final static String tasPathPrefix = "/app?action=";
1: 
1: }
============================================================================