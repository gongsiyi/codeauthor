1:6d6b002: /*
1:6d6b002:  * Licensed to the Apache Software Foundation (ASF) under one
1:6d6b002:  * or more contributor license agreements.  See the NOTICE file
1:6d6b002:  * distributed with this work for additional information
1:6d6b002:  * regarding copyright ownership.  The ASF licenses this file
1:6d6b002:  * to you under the Apache License, Version 2.0 (the
1:6d6b002:  * "License"); you may not use this file except in compliance
1:6d6b002:  * with the License.  You may obtain a copy of the License at
1:6d6b002:  *
1:6d6b002:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6d6b002:  *
1:6d6b002:  * Unless required by applicable law or agreed to in writing,
1:6d6b002:  * software distributed under the License is distributed on an
1:6d6b002:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6d6b002:  * KIND, either express or implied.  See the License for the
1:6d6b002:  * specific language governing permissions and limitations
1:6d6b002:  * under the License.
1:6d6b002:  */
1:69fc795: package org.apache.aries.jpa.blueprint.impl;
10:69fc795: 
1:69fc795: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1:69fc795: 
1:69fc795: import java.lang.reflect.AccessibleObject;
1:69fc795: import java.util.Collections;
1:69fc795: import java.util.HashSet;
1:69fc795: import java.util.List;
1:69fc795: import java.util.Set;
1:69fc795: 
1:6d6b002: import javax.persistence.EntityManager;
1:69fc795: import javax.persistence.PersistenceContext;
1:69fc795: import javax.persistence.PersistenceUnit;
1:69fc795: 
1:69fc795: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:69fc795: import org.apache.aries.blueprint.ComponentDefinitionRegistryProcessor;
1:69fc795: import org.apache.aries.blueprint.Interceptor;
1:69fc795: import org.apache.aries.blueprint.ParserContext;
1:69fc795: import org.apache.aries.blueprint.PassThroughMetadata;
1:69fc795: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1:69fc795: import org.apache.aries.blueprint.mutable.MutableRefMetadata;
1:69fc795: import org.apache.aries.blueprint.mutable.MutableReferenceMetadata;
1:37265e0: import org.apache.aries.blueprint.mutable.MutableServiceMetadata;
1:69fc795: import org.osgi.framework.Bundle;
1:6d6b002: import org.osgi.service.blueprint.container.BlueprintContainer;
1:69fc795: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:69fc795: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1:37265e0: import org.osgi.service.blueprint.reflect.Target;
1:69fc795: import org.osgi.service.coordinator.Coordinator;
1:69fc795: import org.slf4j.Logger;
1:69fc795: import org.slf4j.LoggerFactory;
1:69fc795: 
1:69fc795: public class JpaComponentProcessor implements ComponentDefinitionRegistryProcessor {
1:6d6b002:     private static final String JPA_COORDINATOR = "jpa_Coordinator";
1:69fc795:     private static final Logger LOGGER = LoggerFactory.getLogger(JpaComponentProcessor.class);
1:69fc795:     private AnnotationScanner annotationScanner;
1:69fc795:     private ParserContext pc;
1:69fc795: 
1:69fc795:     public JpaComponentProcessor() {
1:69fc795:         annotationScanner = new AnnotationScanner();
9:69fc795:     }
1:69fc795:     
1:69fc795:     public void setPc(ParserContext pc) {
1:69fc795:         this.pc = pc;
1:69fc795:     }
1:69fc795: 
1:69fc795:     @Override
1:69fc795:     public void process(ComponentDefinitionRegistry cdr) {
1:6d6b002:         BlueprintContainer container = getComponent(cdr, "blueprintContainer");
1:6d6b002:         Bundle bundle = getComponent(cdr, "blueprintBundle");
1:6d6b002:         cdr.registerComponentDefinition(createServiceRef(JPA_COORDINATOR, Coordinator.class));
1:6d6b002: 
1:e809e9c:         Set<String> components = new HashSet<String>(cdr.getComponentDefinitionNames());
1:69fc795:         for (String component : components) {
1:69fc795:             ComponentMetadata compDef = cdr.getComponentDefinition(component);
1:37265e0:             
1:69fc795:             if (compDef instanceof MutableBeanMetadata && !((MutableBeanMetadata)compDef).isProcessor()) {
1:37265e0:                 // Normal bean def
1:6d6b002:                 handleComponent((MutableBeanMetadata)compDef, bundle, cdr, container);
1:37265e0:             } else if(compDef instanceof MutableServiceMetadata) {
1:37265e0:                 // Bean inlined into service def
1:37265e0:                 MutableServiceMetadata sMeta = (MutableServiceMetadata)compDef;
1:37265e0:                 Target target = sMeta.getServiceComponent();
1:37265e0:                 if (target instanceof MutableBeanMetadata) {
1:37265e0:                     handleComponent((MutableBeanMetadata)target, bundle, cdr, container);
1:37265e0:                 }
1:69fc795:             }
1:69fc795:         }
1:69fc795:     }
1:69fc795: 
1:6d6b002:     private void handleComponent(MutableBeanMetadata compDef, Bundle bundle, ComponentDefinitionRegistry cdr, BlueprintContainer container) {
1:6d6b002:         final String compName = compDef.getId();
1:69fc795:         if (compDef.getClassName() == null) {
1:905efd2:             LOGGER.debug("No classname for " + compDef.getId());
1:69fc795:             return;
1:69fc795:         }
1:69fc795:         Class<?> compClass;
1:69fc795:         try {
1:69fc795:             compClass = bundle.loadClass(compDef.getClassName());
1:6d6b002:         } catch (final ClassNotFoundException e) {
1:ec3ea65:             throw new IllegalArgumentException("Bean class not found " + compDef.getClassName(), e);
1:69fc795:         }
1:69fc795:         compDef.setFieldInjection(true);
1:6d6b002:         List<AccessibleObject> pcMembers = annotationScanner.getJpaAnnotatedMembers(compClass, PersistenceContext.class);
1:6d6b002:         for (AccessibleObject member : pcMembers) {
1:69fc795:             PersistenceContext pcAnn = member.getAnnotation(PersistenceContext.class);
1:69fc795:             
1:ec3ea65:             String propName = AnnotationScanner.getName(member);
1:ec3ea65:             Class<?> iface = AnnotationScanner.getType(member);
1:6d6b002:             LOGGER.debug("Injecting {} into prop {} of bean {} with class {}", iface.getSimpleName(), propName, compName, compClass);
1:6d6b002:             MutableRefMetadata ref = getServiceRef(cdr, pcAnn.unitName(), iface);
1:6d6b002:             compDef.addProperty(propName, ref);
1:6d6b002:             
1:6d6b002:             MutableRefMetadata emRef = getServiceRef(cdr, pcAnn.unitName(), EntityManager.class);
1:6d6b002:             Interceptor interceptor = new JpaInterceptor(container, JPA_COORDINATOR, emRef.getComponentId());
1:6d6b002:             cdr.registerInterceptorWithComponent(compDef, interceptor);
1:6d6b002:         }
1:6d6b002:         
1:6d6b002:         List<AccessibleObject> puMembers = annotationScanner.getJpaAnnotatedMembers(compClass, PersistenceUnit.class);
1:6d6b002:         for (AccessibleObject member : puMembers) {
1:6d6b002:             PersistenceUnit puAnn = member.getAnnotation(PersistenceUnit.class);
1:ec3ea65:             String propName = AnnotationScanner.getName(member);
1:ec3ea65:             Class<?> iface = AnnotationScanner.getType(member);
1:6d6b002:             LOGGER.debug("Injecting {} into prop {} of bean {} with class {}", iface.getSimpleName(), propName, compName, compClass);
1:6d6b002:             MutableRefMetadata ref = getServiceRef(cdr, puAnn.unitName(), iface);
1:6d6b002:             compDef.addProperty(propName, ref);
1:69fc795:         }
1:69fc795:     }
1:69fc795: 
1:69fc795:     private MutableRefMetadata getServiceRef(ComponentDefinitionRegistry cdr, String unitName, Class<?> iface) {
1:69fc795:         ComponentMetadata serviceRef = cdr.getComponentDefinition(getId(unitName, iface));
1:69fc795:         if (serviceRef == null)  {
1:6d6b002:             serviceRef = createJPAServiceRef(unitName, iface);
1:69fc795:             cdr.registerComponentDefinition(serviceRef);
1:69fc795:         }
1:69fc795:         MutableRefMetadata ref = pc.createMetadata(MutableRefMetadata.class);
1:69fc795:         ref.setComponentId(serviceRef.getId());
1:69fc795:         return ref;
1:69fc795:     }
1:69fc795:     
1:ec3ea65:     private ComponentMetadata createServiceRef(String id, Class<?> iface) {
1:6d6b002:         final MutableReferenceMetadata refMeta = pc.createMetadata(MutableReferenceMetadata.class);
1:6d6b002:         refMeta.setActivation(getDefaultActivation(pc));
1:6d6b002:         refMeta.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
1:6d6b002:         refMeta.setRuntimeInterface(iface);
1:6d6b002:         refMeta.setTimeout(Integer.parseInt(pc.getDefaultTimeout()));
1:ec3ea65:         List<String> emptyList = Collections.emptyList();
1:ec3ea65:         refMeta.setDependsOn(emptyList);
1:6d6b002:         refMeta.setId(id);
1:6d6b002:         return refMeta;
1:69fc795:     }
1:69fc795: 
1:ec3ea65:     private ComponentMetadata createJPAServiceRef(String unitName, Class<?> iface) {
1:69fc795:         final MutableReferenceMetadata refMeta = pc.createMetadata(MutableReferenceMetadata.class);
1:69fc795:         refMeta.setActivation(getDefaultActivation(pc));
1:69fc795:         refMeta.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
1:69fc795:         refMeta.setRuntimeInterface(iface);
1:69fc795:         refMeta.setFilter(String.format("(%s=%s)", JPA_UNIT_NAME, unitName));
1:69fc795:         refMeta.setTimeout(Integer.parseInt(pc.getDefaultTimeout()));
1:ec3ea65:         List<String> emptyList = Collections.emptyList();
1:ec3ea65:         refMeta.setDependsOn(emptyList);
1:69fc795:         refMeta.setId(getId(unitName, iface));
1:69fc795:         return refMeta;
1:69fc795:     }
1:69fc795:     
1:69fc795:     public String getId(String unitName, Class<?> iface) {
1:6d6b002:         return unitName + "-" + iface.getSimpleName();
1:69fc795:     }
1:69fc795:     
1:ec3ea65:     private static int getDefaultActivation(ParserContext ctx) {
1:69fc795:         return "ACTIVATION_EAGER".equalsIgnoreCase(ctx.getDefaultActivation())
1:69fc795:             ? ReferenceMetadata.ACTIVATION_EAGER : ReferenceMetadata.ACTIVATION_LAZY;
1:69fc795:     }
1:69fc795:     
1:6d6b002:     @SuppressWarnings("unchecked")
1:ec3ea65:     private static <T>T getComponent(ComponentDefinitionRegistry cdr, String id) {
1:6d6b002:         return (T)((PassThroughMetadata) cdr.getComponentDefinition(id)).getObject();
1:69fc795:     }
1:6d6b002: 
1:69fc795: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:37265e0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.mutable.MutableServiceMetadata;
1: import org.osgi.service.blueprint.reflect.Target;
/////////////////////////////////////////////////////////////////////////
1:             
1:                 // Normal bean def
1:             } else if(compDef instanceof MutableServiceMetadata) {
1:                 // Bean inlined into service def
1:                 MutableServiceMetadata sMeta = (MutableServiceMetadata)compDef;
1:                 Target target = sMeta.getServiceComponent();
1:                 if (target instanceof MutableBeanMetadata) {
1:                     handleComponent((MutableBeanMetadata)target, bundle, cdr, container);
1:                 }
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalArgumentException("Bean class not found " + compDef.getClassName(), e);
1:             String propName = AnnotationScanner.getName(member);
1:             Class<?> iface = AnnotationScanner.getType(member);
/////////////////////////////////////////////////////////////////////////
1:             String propName = AnnotationScanner.getName(member);
1:             Class<?> iface = AnnotationScanner.getType(member);
/////////////////////////////////////////////////////////////////////////
1:     private ComponentMetadata createServiceRef(String id, Class<?> iface) {
1:         List<String> emptyList = Collections.emptyList();
1:         refMeta.setDependsOn(emptyList);
1:     private ComponentMetadata createJPAServiceRef(String unitName, Class<?> iface) {
1:         List<String> emptyList = Collections.emptyList();
1:         refMeta.setDependsOn(emptyList);
/////////////////////////////////////////////////////////////////////////
1:     private static int getDefaultActivation(ParserContext ctx) {
1:     private static <T>T getComponent(ComponentDefinitionRegistry cdr, String id) {
commit:905efd2
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.debug("No classname for " + compDef.getId());
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
1:         Set<String> components = new HashSet<String>(cdr.getComponentDefinitionNames());
commit:6d6b002
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: import javax.persistence.EntityManager;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.blueprint.container.BlueprintContainer;
/////////////////////////////////////////////////////////////////////////
1:     private static final String JPA_COORDINATOR = "jpa_Coordinator";
/////////////////////////////////////////////////////////////////////////
1:         BlueprintContainer container = getComponent(cdr, "blueprintContainer");
1:         Bundle bundle = getComponent(cdr, "blueprintBundle");
1:         cdr.registerComponentDefinition(createServiceRef(JPA_COORDINATOR, Coordinator.class));
1: 
1:                 handleComponent((MutableBeanMetadata)compDef, bundle, cdr, container);
1:     private void handleComponent(MutableBeanMetadata compDef, Bundle bundle, ComponentDefinitionRegistry cdr, BlueprintContainer container) {
1:         final String compName = compDef.getId();
1:         } catch (final ClassNotFoundException e) {
1:         List<AccessibleObject> pcMembers = annotationScanner.getJpaAnnotatedMembers(compClass, PersistenceContext.class);
1:         for (AccessibleObject member : pcMembers) {
0:             String propName = annotationScanner.getName(member);
0:             Class<?> iface = annotationScanner.getType(member);
1:             LOGGER.debug("Injecting {} into prop {} of bean {} with class {}", iface.getSimpleName(), propName, compName, compClass);
1:             MutableRefMetadata ref = getServiceRef(cdr, pcAnn.unitName(), iface);
1:             compDef.addProperty(propName, ref);
1:             
1:             MutableRefMetadata emRef = getServiceRef(cdr, pcAnn.unitName(), EntityManager.class);
1:             Interceptor interceptor = new JpaInterceptor(container, JPA_COORDINATOR, emRef.getComponentId());
1:             cdr.registerInterceptorWithComponent(compDef, interceptor);
1:         }
1:         
1:         List<AccessibleObject> puMembers = annotationScanner.getJpaAnnotatedMembers(compClass, PersistenceUnit.class);
1:         for (AccessibleObject member : puMembers) {
1:             PersistenceUnit puAnn = member.getAnnotation(PersistenceUnit.class);
0:             String propName = annotationScanner.getName(member);
0:             Class<?> iface = annotationScanner.getType(member);
1:             LOGGER.debug("Injecting {} into prop {} of bean {} with class {}", iface.getSimpleName(), propName, compName, compClass);
1:             MutableRefMetadata ref = getServiceRef(cdr, puAnn.unitName(), iface);
1:             compDef.addProperty(propName, ref);
1:             serviceRef = createJPAServiceRef(unitName, iface);
1:     @SuppressWarnings("unchecked")
0:     ComponentMetadata createServiceRef(String id, Class<?> iface) {
1:         final MutableReferenceMetadata refMeta = pc.createMetadata(MutableReferenceMetadata.class);
1:         refMeta.setActivation(getDefaultActivation(pc));
1:         refMeta.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
1:         refMeta.setRuntimeInterface(iface);
1:         refMeta.setTimeout(Integer.parseInt(pc.getDefaultTimeout()));
0:         refMeta.setDependsOn((List<String>)Collections.EMPTY_LIST);
1:         refMeta.setId(id);
1:         return refMeta;
0:     ComponentMetadata createJPAServiceRef(String unitName, Class<?> iface) {
/////////////////////////////////////////////////////////////////////////
1:         return unitName + "-" + iface.getSimpleName();
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
0:     private <T>T getComponent(ComponentDefinitionRegistry cdr, String id) {
1:         return (T)((PassThroughMetadata) cdr.getComponentDefinition(id)).getObject();
1: 
commit:69fc795
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.blueprint.impl;
1: 
1: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1: 
1: import java.lang.reflect.AccessibleObject;
0: import java.lang.reflect.Field;
0: import java.lang.reflect.Method;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
0: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.PersistenceContext;
1: import javax.persistence.PersistenceUnit;
1: 
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistryProcessor;
1: import org.apache.aries.blueprint.Interceptor;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.apache.aries.blueprint.PassThroughMetadata;
1: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1: import org.apache.aries.blueprint.mutable.MutableRefMetadata;
1: import org.apache.aries.blueprint.mutable.MutableReferenceMetadata;
0: import org.apache.aries.jpa.blueprint.supplier.impl.ServiceProxy;
0: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1: import org.osgi.service.coordinator.Coordinator;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JpaComponentProcessor implements ComponentDefinitionRegistryProcessor {
1:     private static final Logger LOGGER = LoggerFactory.getLogger(JpaComponentProcessor.class);
1:     private AnnotationScanner annotationScanner;
1:     private ParserContext pc;
1: 
1:     public JpaComponentProcessor() {
1:         annotationScanner = new AnnotationScanner();
1:     }
1:     
1:     public void setPc(ParserContext pc) {
1:         this.pc = pc;
1:     }
1: 
1:     @Override
1:     public void process(ComponentDefinitionRegistry cdr) {
0:         PassThroughMetadata bundleMeta = (PassThroughMetadata)cdr.getComponentDefinition("blueprintBundle");
0:         Bundle bundle = (Bundle)bundleMeta.getObject();
1:         
0:         Set<String> components = new HashSet<>(cdr.getComponentDefinitionNames());
1:         for (String component : components) {
1:             ComponentMetadata compDef = cdr.getComponentDefinition(component);
1:             if (compDef instanceof MutableBeanMetadata && !((MutableBeanMetadata)compDef).isProcessor()) {
0:                 handleComponent((MutableBeanMetadata)compDef, bundle, cdr);
1:             }
1:         }
0:         System.out.println(cdr.getComponentDefinitionNames());
1:     }
1: 
0:     private void handleComponent(MutableBeanMetadata compDef, Bundle bundle, ComponentDefinitionRegistry cdr) {
1:         if (compDef.getClassName() == null) {
0:             LOGGER.warn("No classname for " + compDef.getId());
1:             return;
1:         }
0:         String compName = compDef.getId();
1:         Class<?> compClass;
1:         try {
1:             compClass = bundle.loadClass(compDef.getClassName());
0:         } catch (ClassNotFoundException e) {
0:             throw new IllegalArgumentException("Bean class not found " + compDef.getClassName());
1:         }
0:         BundleContext context = bundle.getBundleContext();
1:         compDef.setFieldInjection(true);
0:         List<AccessibleObject> jpaAnnotatedMembers = annotationScanner.getJpaAnnotatedMembers(compClass);
0:         for (AccessibleObject member : jpaAnnotatedMembers) {
0:             member.setAccessible(true);
0:             String propName = getName(member);
1: 
1:             PersistenceContext pcAnn = member.getAnnotation(PersistenceContext.class);
0:             if (pcAnn != null) {
0:                 LOGGER.info("Adding jpa interceptor for bean {}, prop {} with class {}", compName, propName, compClass);
0:                 Class<?> iface = getType(member);
0:                 if (iface != null) {
0:                     MutableRefMetadata emRef = getServiceRef(cdr, pcAnn.unitName(), iface);
0:                     compDef.addProperty(propName, emRef);
1: 
0:                     Interceptor interceptor = createInterceptor(context, pcAnn);
0:                     cdr.registerInterceptorWithComponent(compDef, interceptor);
1: 
1:                 }
1:             }
1: 
0:             PersistenceUnit puAnn = member.getAnnotation(PersistenceUnit.class);
0:             if (puAnn != null) {
0:                 LOGGER.info("Adding emf proxy for bean {}, prop {} with class {}", compName, propName, compClass);
0:                 MutableRefMetadata emfRef = getServiceRef(cdr, puAnn.unitName(), EntityManagerFactory.class);
0:                 compDef.addProperty(propName, emfRef);
1:             }
1:             
1:         }
1:     }
1: 
1:     private MutableRefMetadata getServiceRef(ComponentDefinitionRegistry cdr, String unitName, Class<?> iface) {
1:         ComponentMetadata serviceRef = cdr.getComponentDefinition(getId(unitName, iface));
1:         if (serviceRef == null)  {
0:             serviceRef = createServiceRef(unitName, iface);
1:             cdr.registerComponentDefinition(serviceRef);
0:         } else {
0:             LOGGER.info("Using already registered ref " + serviceRef.getId());
1:         }
1:         MutableRefMetadata ref = pc.createMetadata(MutableRefMetadata.class);
1:         ref.setComponentId(serviceRef.getId());
1:         return ref;
1:     }
1: 
1: 
1: 
0:     private Interceptor createInterceptor(BundleContext context, PersistenceContext pcAnn) {
0:         String filter = getFilter(EmSupplier.class, pcAnn.unitName());
0:         EmSupplier supplierProxy = ServiceProxy.create(context, EmSupplier.class, filter);
0:         Coordinator coordinator = ServiceProxy.create(context, Coordinator.class);
0:         Interceptor interceptor = new JpaInterceptor(supplierProxy, coordinator);
0:         return interceptor;
1:     }
1: 
0:     private String getName(AccessibleObject member) {
0:         if (member instanceof Field) {
0:             return ((Field)member).getName();
0:         } else if (member instanceof Method) {
0:             Method method = (Method)member;
0:             String name = method.getName();
0:             if (!name.startsWith("set")) {
0:                 return null;
1:             }
0:             return name. substring(3, 4).toLowerCase() + name.substring(4);
1:         }
0:         return null;
1:     }
1:     
0:     private Class<?> getType(AccessibleObject member) {
0:         if (member instanceof Field) {
0:             return ((Field)member).getType();
0:         } else if (member instanceof Method) {
0:             Method method = (Method)member;
0:             return method.getParameterTypes()[0];
1:         }
0:         return null;
1:     }
1: 
0:     @SuppressWarnings("unchecked")
0:     ComponentMetadata createServiceRef(String unitName, Class<?> iface) {
1:         final MutableReferenceMetadata refMeta = pc.createMetadata(MutableReferenceMetadata.class);
1:         refMeta.setActivation(getDefaultActivation(pc));
1:         refMeta.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
1:         refMeta.setRuntimeInterface(iface);
1:         refMeta.setFilter(String.format("(%s=%s)", JPA_UNIT_NAME, unitName));
1:         refMeta.setTimeout(Integer.parseInt(pc.getDefaultTimeout()));
0:         refMeta.setDependsOn((List<String>)Collections.EMPTY_LIST);
1:         refMeta.setId(getId(unitName, iface));
1:         return refMeta;
1:     }
1:     
1:     public String getId(String unitName, Class<?> iface) {
0:         return unitName + "_" + iface.getSimpleName();
1:     }
1:     
0:     private int getDefaultActivation(ParserContext ctx) {
1:         return "ACTIVATION_EAGER".equalsIgnoreCase(ctx.getDefaultActivation())
1:             ? ReferenceMetadata.ACTIVATION_EAGER : ReferenceMetadata.ACTIVATION_LAZY;
1:     }
1:     
0:     private String getFilter(Class<?> clazz, String unitName) {
0:         return String.format("(&(objectClass=%s)(%s=%s))", clazz.getName(), JPA_UNIT_NAME, unitName);
1:     }
1: }
============================================================================