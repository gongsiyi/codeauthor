1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:8a2da19: package org.apache.aries.tx.control.service.local.impl;
1:9552b0c: 
1:f87416c: import java.util.UUID;
1:f87416c: import java.util.concurrent.atomic.AtomicLong;
1:f87416c: 
1:78dd69f: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
1:78dd69f: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionControlImpl;
1:9552b0c: 
1:78dd69f: public class TransactionControlImpl extends AbstractTransactionControlImpl {
1:9552b0c: 
1:f87416c: 	private static class TxId {
1:f87416c: 		private final UUID controlId;
1:f87416c: 		private final long txId;
1:f87416c: 		
1:f87416c: 		public TxId(UUID controlId, long txId) {
1:f87416c: 			this.controlId = controlId;
1:f87416c: 			this.txId = txId;
1:f87416c: 		}
1:9552b0c: 
1:f87416c: 		@Override
1:f87416c: 		public int hashCode() {
1:f87416c: 			final int prime = 31;
1:f87416c: 			int result = 1;
1:f87416c: 			result = prime * result + controlId.hashCode();
1:f87416c: 			result = prime * result + (int) (txId ^ (txId >>> 32));
1:f87416c: 			return result;
1:f87416c: 		}
1:f87416c: 
1:f87416c: 		@Override
1:f87416c: 		public boolean equals(Object obj) {
1:f87416c: 			if (this == obj)
1:f87416c: 				return true;
1:f87416c: 			if (obj == null)
1:f87416c: 				return false;
1:f87416c: 			if (getClass() != obj.getClass())
1:f87416c: 				return false;
1:f87416c: 			TxId other = (TxId) obj;
1:f87416c: 			if (!controlId.equals(other.controlId))
1:f87416c: 				return false;
1:f87416c: 			if (txId != other.txId)
1:f87416c: 				return false;
1:f87416c: 			return true;
1:f87416c: 		}
1:f87416c: 	}
1:f87416c: 	
1:f87416c: 	private final UUID txControlId = UUID.randomUUID();
1:f87416c: 	private final AtomicLong txCounter = new AtomicLong();
1:f87416c: 	
15:8a2da19: 	@Override
1:f87416c: 	protected AbstractTransactionContextImpl startTransaction(boolean readOnly) {
1:f87416c: 		return new TransactionContextImpl(new TxId(txControlId, txCounter.incrementAndGet()), readOnly);
1:04788bf: 	}
1:78dd69f: 	
1:04788bf: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: 	private static class TxId {
1: 		private final UUID controlId;
1: 		private final long txId;
1: 		
1: 		public TxId(UUID controlId, long txId) {
1: 			this.controlId = controlId;
1: 			this.txId = txId;
1: 		}
1: 		@Override
1: 		public int hashCode() {
1: 			final int prime = 31;
1: 			int result = 1;
1: 			result = prime * result + controlId.hashCode();
1: 			result = prime * result + (int) (txId ^ (txId >>> 32));
1: 			return result;
1: 		}
1: 
1: 		@Override
1: 		public boolean equals(Object obj) {
1: 			if (this == obj)
1: 				return true;
1: 			if (obj == null)
1: 				return false;
1: 			if (getClass() != obj.getClass())
1: 				return false;
1: 			TxId other = (TxId) obj;
1: 			if (!controlId.equals(other.controlId))
1: 				return false;
1: 			if (txId != other.txId)
1: 				return false;
1: 			return true;
1: 		}
1: 	}
1: 	
1: 	private final UUID txControlId = UUID.randomUUID();
1: 	private final AtomicLong txCounter = new AtomicLong();
1: 	
1: 	protected AbstractTransactionContextImpl startTransaction(boolean readOnly) {
1: 		return new TransactionContextImpl(new TxId(txControlId, txCounter.incrementAndGet()), readOnly);
commit:661c406
/////////////////////////////////////////////////////////////////////////
0: 	protected AbstractTransactionContextImpl startTransaction(Coordination currentCoord, boolean readOnly) {
0: 		return new TransactionContextImpl(currentCoord, readOnly);
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
1: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionControlImpl;
1: public class TransactionControlImpl extends AbstractTransactionControlImpl {
0: 		super(c);
0: 	protected AbstractTransactionContextImpl startTransaction(Coordination currentCoord) {
0: 		return new TransactionContextImpl(currentCoord);
1: 	
commit:04788bf
/////////////////////////////////////////////////////////////////////////
0: 			boolean endTransaction = false;
/////////////////////////////////////////////////////////////////////////
0: 					endTransaction = true;
0: 				if(endTransaction) {
0: 					currentTran.finish();
1: 				}
0: 			return doWork(work, currentTran, currentCoord, endTransaction, endCoordination);
/////////////////////////////////////////////////////////////////////////
0: 			return doWork(work, currentTran, currentCoord, true, true);
/////////////////////////////////////////////////////////////////////////
0: 			boolean endTransaction = false;
/////////////////////////////////////////////////////////////////////////
0: 					endTransaction = true;
0: 				if(endTransaction) {
0: 					currentTran.finish();
1: 				}
0: 			return doWork(work, currentTran, currentCoord, endTransaction, endCoordination);
/////////////////////////////////////////////////////////////////////////
0: 			boolean endTransaction = false;
/////////////////////////////////////////////////////////////////////////
0: 					endTransaction = true;
0: 				if(endTransaction) {
0: 					currentTran.finish();
0: 				}
0: 			return doWork(work, currentTran, currentCoord, endTransaction, endCoordination);
0: 				AbstractTransactionContextImpl currentTran, Coordination currentCoord, 
0: 				boolean endTransaction, boolean endCoordination) {
/////////////////////////////////////////////////////////////////////////
0: 				if(endTransaction) {
0: 					try {
0: 						currentTran.finish();
0: 					} catch (Exception e) {
0: 						currentTran.recordFailure(e);
0: 					}
/////////////////////////////////////////////////////////////////////////
0: 			if(endTransaction) {
0: 				try {
0: 					currentTran.finish();
0: 				} catch (Exception e) {
0: 					currentTran.recordFailure(e);
0: 					currentCoord.fail(e);
0: 				}
commit:9552b0c
/////////////////////////////////////////////////////////////////////////
0: import static java.util.stream.Collectors.toList;
0: import java.util.Collection;
0: import java.util.List;
0: import java.util.Optional;
/////////////////////////////////////////////////////////////////////////
0: 		private void checkExceptions() {
0: 			List<Class<? extends Throwable>> duplicates = rollbackFor.stream()
0: 					.filter(noRollbackFor::contains)
0: 					.collect(toList());
0: 			if(!duplicates.isEmpty()) {
0: 				throw new TransactionException("The transaction declares that the Exceptions " + 
0: 						duplicates + " must both trigger and not trigger rollback");
0: 			}
0: 		}
0: 			checkExceptions();
1: 			
/////////////////////////////////////////////////////////////////////////
0: 			checkExceptions();
1: 			
/////////////////////////////////////////////////////////////////////////
0: 			checkExceptions();
1: 			
/////////////////////////////////////////////////////////////////////////
0: 			checkExceptions();
1: 			
/////////////////////////////////////////////////////////////////////////
0: 				if(requiresRollback(t)) {
0: 					currentCoord.fail(t);
0: 				}
/////////////////////////////////////////////////////////////////////////
0: 
0: 		private boolean requiresRollback(Throwable t) {
0: 			return mostSpecificMatch(noRollbackFor, t)
0: 				.map(noRollbackType -> mostSpecificMatch(rollbackFor, t)
0: 						.map(rollbackType -> noRollbackType.isAssignableFrom(rollbackType))
0: 						.orElse(false))
0: 				.orElse(true);
0: 		}
0: 		
0: 		private Optional<Class<? extends Throwable>> mostSpecificMatch(Collection<Class<? extends Throwable>> types, Throwable t) {
0: 			return types.stream()
0: 					.filter(c -> c.isInstance(t))
0: 					.max((c1, c2) -> {
0: 							if(c1 == c2) return 0;
0: 							
0: 							return c1.isAssignableFrom(c2) ? 1 : c2.isAssignableFrom(c1) ? -1 : 0;
0: 						});
0: 		}
commit:f377acd
/////////////////////////////////////////////////////////////////////////
0: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
0: import org.osgi.service.transaction.control.ScopedWorkException;
/////////////////////////////////////////////////////////////////////////
0: 			return doWork(work, currentTran, currentCoord, endCoordination);
0: 			AbstractTransactionContextImpl currentTran;
0: 				currentTran = new TransactionContextImpl(
/////////////////////////////////////////////////////////////////////////
0: 			return doWork(work, currentTran, currentCoord, true);
/////////////////////////////////////////////////////////////////////////
0: 			return doWork(work, currentTran, currentCoord, endCoordination);
/////////////////////////////////////////////////////////////////////////
0: 			return doWork(work, currentTran, currentCoord, endCoordination);
0: 				AbstractTransactionContextImpl currentTran, Coordination currentCoord, boolean endCoordination) {
0: 			R result;
0: 				result = transactionalWork.call();
0: 				try {
0: 					currentTran.finish();
0: 				} catch (Exception e) {
0: 					currentTran.recordFailure(e);
0: 				}
0: 						if(ce.getType() != CoordinationException.FAILED) {
0: 							currentTran.recordFailure(ce);
0: 				ScopedWorkException workException = new ScopedWorkException("The scoped work threw an exception", t, 
0: 						endCoordination ? null : currentTran);
0: 				Throwable throwable = currentTran.firstUnexpectedException.get();
0: 				if(throwable != null) {
0: 					workException.addSuppressed(throwable);
0: 				}
0: 				currentTran.subsequentExceptions.stream().forEach(workException::addSuppressed);
0: 				
0: 				throw workException;
0: 			
0: 			try {
0: 				currentTran.finish();
0: 			} catch (Exception e) {
0: 				currentTran.recordFailure(e);
0: 				currentCoord.fail(e);
0: 			}
0: 			try {
0: 				if (endCoordination) {
0: 					currentCoord.end();
0: 				}
0: 			} catch (CoordinationException ce) {
0: 				if(ce.getType() != CoordinationException.FAILED) {
0: 					currentTran.recordFailure(ce);
0: 				}
0: 			}
0: 			
0: 			Throwable throwable = currentTran.firstUnexpectedException.get();
0: 			if(throwable != null) {
0: 				TransactionException te = currentTran.getTransactionStatus() == ROLLED_BACK ?
0: 						new TransactionRolledBackException("The transaction rolled back due to a failure", throwable) :
0: 						new TransactionException("There was an error in the Transaction completion.", throwable);
0: 				
0: 				currentTran.subsequentExceptions.stream().forEach(te::addSuppressed);
0: 				
0: 				throw te;
0: 			}
0: 			
0: 			return result;
/////////////////////////////////////////////////////////////////////////
commit:25e28f1
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.coordinator.CoordinationException;
/////////////////////////////////////////////////////////////////////////
0: 				//TODO handle noRollbackFor
0: 				currentCoord.fail(t);
0: 					try {
0: 						currentCoord.end();
0: 					} catch (CoordinationException ce) {
0: 						if(ce.getType() == CoordinationException.FAILED) {
0: 							throw new TransactionRolledBackException("The transaction was rolled back due to a failure", ce.getCause());
0: 						} else {
0: 							throw ce;
0: 						}
0: 					}
commit:8a2da19
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.local.impl;
0: 
0: import static java.util.Optional.ofNullable;
0: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
0: 
0: import java.util.concurrent.Callable;
0: 
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Coordinator;
0: import org.osgi.service.transaction.control.TransactionBuilder;
0: import org.osgi.service.transaction.control.TransactionContext;
0: import org.osgi.service.transaction.control.TransactionControl;
0: import org.osgi.service.transaction.control.TransactionException;
0: import org.osgi.service.transaction.control.TransactionRolledBackException;
0: 
0: public class TransactionControlImpl implements TransactionControl {
0: 
0: 	private final class TransactionBuilderImpl extends TransactionBuilder {
0: 
0: 
1: 		@Override
0: 		public <T> T required(Callable<T> work)
0: 				throws TransactionException, TransactionRolledBackException {
0: 
0: 			Coordination currentCoord = coordinator.peek();
0: 			boolean endCoordination = false;
0: 
0: 			AbstractTransactionContextImpl currentTran = ofNullable(
0: 					currentCoord).map(c -> (AbstractTransactionContextImpl) c
0: 							.getVariables().get(TransactionContextKey.class))
0: 							.filter(atc -> atc
0: 									.getTransactionStatus() != NO_TRANSACTION)
0: 							.orElse(null);
0: 			try {
0: 				if (currentTran == null) {
0: 					// We must create a new coordination to scope our new
0: 					// transaction
0: 					currentCoord = coordinator.begin(
0: 							"Resource-Local-Transaction.REQUIRED", 30000);
0: 					endCoordination = true;
0: 					currentTran = new TransactionContextImpl(currentCoord);
0: 					currentCoord.getVariables().put(TransactionContextKey.class,
0: 							currentTran);
0: 				}
0: 			} catch (RuntimeException re) {
0: 				if (endCoordination) {
0: 					currentCoord.end();
0: 				}
0: 				throw re;
0: 			}
0: 
0: 			return doWork(work, currentCoord, endCoordination);
0: 		}
0: 
1: 		@Override
0: 		public <T> T requiresNew(Callable<T> work)
0: 				throws TransactionException, TransactionRolledBackException {
0: 			Coordination currentCoord = null;
0: 			try {
0: 				currentCoord = coordinator.begin(
0: 						"Resource-Local-Transaction.REQUIRES_NEW", 30000);
0: 
0: 				AbstractTransactionContextImpl currentTran = new TransactionContextImpl(
0: 						currentCoord);
0: 				currentCoord.getVariables().put(TransactionContextKey.class,
0: 						currentTran);
0: 			} catch (RuntimeException re) {
0: 				if (currentCoord != null)
0: 					currentCoord.end();
0: 				throw re;
0: 			}
0: 
0: 			return doWork(work, currentCoord, true);
0: 		}
0: 
1: 		@Override
0: 		public <T> T supports(Callable<T> work) throws TransactionException {
0: 			Coordination currentCoord = coordinator.peek();
0: 			boolean endCoordination = false;
0: 
0: 			AbstractTransactionContextImpl currentTran = ofNullable(
0: 					currentCoord).map(c -> (AbstractTransactionContextImpl) c
0: 							.getVariables().get(TransactionContextKey.class))
0: 							.orElse(null);
0: 			try {
0: 				if (currentTran == null) {
0: 					// We must create a new coordination to scope our new
0: 					// transaction
0: 					currentCoord = coordinator.begin(
0: 							"Resource-Local-Transaction.SUPPORTS", 30000);
0: 					endCoordination = true;
0: 					currentTran = new NoTransactionContextImpl(currentCoord);
0: 					currentCoord.getVariables().put(TransactionContextKey.class,
0: 							currentTran);
0: 				}
0: 			} catch (RuntimeException re) {
0: 				if (endCoordination) {
0: 					currentCoord.end();
0: 				}
0: 				throw re;
0: 			}
0: 
0: 			return doWork(work, currentCoord, endCoordination);
0: 		}
0: 
1: 		@Override
0: 		public <T> T notSupported(Callable<T> work)
0: 				throws TransactionException {
0: 			Coordination currentCoord = coordinator.peek();
0: 			boolean endCoordination = false;
0: 
0: 			AbstractTransactionContextImpl currentTran = ofNullable(
0: 					currentCoord).map(c -> (AbstractTransactionContextImpl) c
0: 							.getVariables().get(TransactionContextKey.class))
0: 							.filter(atc -> atc
0: 									.getTransactionStatus() == NO_TRANSACTION)
0: 							.orElse(null);
0: 			try {
0: 				if (currentTran == null) {
0: 					// We must create a new coordination to scope our new
0: 					// transaction
0: 					currentCoord = coordinator.begin(
0: 							"Resource-Local-Transaction.NOT_SUPPORTED", 30000);
0: 					endCoordination = true;
0: 					currentTran = new NoTransactionContextImpl(currentCoord);
0: 					currentCoord.getVariables().put(TransactionContextKey.class,
0: 							currentTran);
0: 				}
0: 			} catch (RuntimeException re) {
0: 				if (endCoordination) {
0: 					currentCoord.end();
0: 				}
0: 				throw re;
0: 			}
0: 			return doWork(work, currentCoord, endCoordination);
0: 		}
0: 
0: 		private <R> R doWork(Callable<R> transactionalWork,
0: 				Coordination currentCoord, boolean endCoordination) {
0: 			try {
0: 				R result = transactionalWork.call();
0: 
0: 				if (endCoordination) {
0: 					currentCoord.end();
0: 				}
0: 				return result;
0: 			} catch (Throwable t) {
0: 				if (endCoordination) {
0: 					//TODO handle noRollbackFor
0: 					currentCoord.fail(t);
0: 				}
0: 				TransactionControlImpl.<RuntimeException> throwException(t);
0: 			}
0: 			throw new TransactionException(
0: 					"The code here should never be reached");
0: 		}
0: 	}
0: 
0: 	private static class TransactionContextKey {}
0: 
0: 	private final Coordinator coordinator;
0: 
0: 	public TransactionControlImpl(Coordinator c) {
0: 		coordinator = c;
0: 	}
0: 
1: 	@Override
0: 	public TransactionBuilder build() {
0: 		return new TransactionBuilderImpl();
0: 	}
0: 
1: 	@Override
0: 	public boolean getRollbackOnly() throws IllegalStateException {
0: 		return getCurrentTranContextChecked().getRollbackOnly();
0: 	}
0: 
1: 	@Override
0: 	public void setRollbackOnly() throws IllegalStateException {
0: 		getCurrentTranContextChecked().setRollbackOnly();
0: 	}
0: 
1: 	@Override
0: 	public <T> T required(Callable<T> work)
0: 			throws TransactionException, TransactionRolledBackException {
0: 		return build().required(work);
0: 	}
0: 
1: 	@Override
0: 	public <T> T requiresNew(Callable<T> work)
0: 			throws TransactionException, TransactionRolledBackException {
0: 		return build().requiresNew(work);
0: 	}
0: 
1: 	@Override
0: 	public <T> T notSupported(Callable<T> work) throws TransactionException {
0: 		return build().notSupported(work);
0: 	}
0: 
1: 	@Override
0: 	public <T> T supports(Callable<T> work) throws TransactionException {
0: 		return build().supports(work);
0: 	}
0: 
1: 	@Override
0: 	public boolean activeTransaction() {
0: 		TransactionContext context = getCurrentContext();
0: 		return context != null
0: 				&& context.getTransactionStatus() != NO_TRANSACTION;
0: 	}
0: 
1: 	@Override
0: 	public boolean activeScope() {
0: 		return getCurrentContext() != null;
0: 	}
0: 
0: 	private TransactionContext getCurrentTranContextChecked() {
0: 		TransactionContext toUse = getCurrentContext();
0: 		if (toUse == null) {
0: 			throw new IllegalStateException(
0: 					"There is no applicable transaction context");
0: 		}
0: 		return toUse;
0: 	}
0: 
1: 	@Override
0: 	public TransactionContext getCurrentContext() {
0: 		TransactionContext toUse = null;
0: 
0: 		Coordination peek = coordinator.peek();
0: 		if (peek != null) {
0: 			toUse = (TransactionContext) peek.getVariables()
0: 					.get(TransactionContextKey.class);
0: 		}
0: 		return toUse;
0: 	}
0: 
0: 	/**
0: 	 * Borrowed from the netty project as a way to avoid wrapping checked
0: 	 * exceptions Viewable at https://github.com/netty/netty/
0: 	 * netty/common/src/main/java/io/netty/util/internal/PlatformDependent.java
0: 	 * 
0: 	 * @param t
0: 	 * @return
0: 	 * @throws T
0: 	 */
0: 	@SuppressWarnings("unchecked")
0: 	private static <T extends Throwable> T throwException(Throwable t)
0: 			throws T {
0: 		throw (T) t;
0: 	}
0: 
1: 	@Override
0: 	public void ignoreException(Throwable t) throws IllegalStateException {
0: 		// TODO Auto-generated method stub
0: 
0: 	}
0: 
0: }
============================================================================