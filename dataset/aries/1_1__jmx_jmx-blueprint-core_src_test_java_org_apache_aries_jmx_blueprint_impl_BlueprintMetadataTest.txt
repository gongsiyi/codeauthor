1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.impl;
1:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:fdf3952: 
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.Arrays;
1:fdf3952: import java.util.Collection;
1:fdf3952: import java.util.HashSet;
1:fdf3952: import java.util.List;
1:fdf3952: import java.util.Set;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.jmock.Expectations;
1:fdf3952: import org.jmock.Mockery;
1:fdf3952: import org.jmock.integration.junit4.JMock;
1:fdf3952: import org.jmock.integration.junit4.JUnit4Mockery;
1:fdf3952: import org.junit.After;
1:fdf3952: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.junit.runner.RunWith;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.framework.Version;
1:fdf3952: import org.osgi.service.blueprint.container.BlueprintContainer;
1:fdf3952: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:fdf3952: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1:fdf3952: 
1:fdf3952: @RunWith(JMock.class)
1:fdf3952: public class BlueprintMetadataTest {
1:fdf3952: 
1:fdf3952:     private BlueprintMetadata metadata;
1:fdf3952:     private Mockery mockery = new JUnit4Mockery();
1:fdf3952:     
1:fdf3952:     private BundleContext mockContext;
1:fdf3952:     private Bundle  mockBundle;
1:fdf3952:     private ServiceReference[] mockServiceReferences = new ServiceReference[1];
1:fdf3952:     //private ServiceReference mockServiceReference;
1:fdf3952:     private BlueprintContainer mockContainer;
1:fdf3952:     private ServiceMetadata mockServiceMetadata;
1:fdf3952:     private BeanMetadata mockBeanMetadata;
1:fdf3952:     
1:fdf3952:     @Before
1:fdf3952:     public void setUp() throws Exception {
1:fdf3952:         mockContext = mockery.mock(BundleContext.class);
1:fdf3952:         mockBundle = mockery.mock(Bundle.class);
1:fdf3952:         mockServiceReferences[0] = mockery.mock(ServiceReference.class);
1:fdf3952:         mockContainer = mockery.mock(BlueprintContainer.class);
1:fdf3952:         mockServiceMetadata = mockery.mock(ServiceMetadata.class);
1:fdf3952:         mockBeanMetadata = mockery.mock(BeanMetadata.class);
1:fdf3952:         
1:fdf3952:         metadata = new BlueprintMetadata(mockContext);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @After
1:fdf3952:     public void tearDown() throws Exception {
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void validGetBlueprintContainerServiceId() throws Exception {
1:fdf3952:         final long bundleId = 12;
1:fdf3952:         final long serviceId = 7117;
1:fdf3952:         
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 allowing(mockContext).getBundle(bundleId);
1:fdf3952:                 will(returnValue(mockBundle));
1:fdf3952:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 will(returnValue(mockServiceReferences));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         // is there any need?
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 allowing(mockBundle).getSymbolicName();
1:fdf3952:                 will(returnValue("org.apache.geronimo.blueprint.testXXX"));
1:fdf3952:                 allowing(mockBundle).getVersion();
1:fdf3952:                 will(returnValue(Version.emptyVersion));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 allowing(mockServiceReferences[0]).getProperty(Constants.SERVICE_ID);
1:fdf3952:                 will(returnValue(serviceId));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952: 
1:fdf3952:         assertEquals(serviceId, metadata.getBlueprintContainerServiceId(bundleId));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void invalidParaInGetBlueprintContainerServiceId() throws Exception
1:fdf3952:     {
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 allowing(mockContext).getBundle(with(any(Long.class)));
1:fdf3952:                 will(returnValue(null));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         try{
1:fdf3952:             metadata.getBlueprintContainerServiceId(-10);
1:fdf3952:         } catch(Exception ex)
1:fdf3952:         {
1:fdf3952:             assertTrue(ex instanceof IllegalArgumentException);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void cannotFindAssociatedContainerServiceId() throws Exception
1:fdf3952:     {
1:fdf3952:         final long bundleId = 12;
1:fdf3952:         
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 allowing(mockContext).getBundle(bundleId);
1:fdf3952:                 will(returnValue(mockBundle));
1:fdf3952:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 //return null if no services are registered which satisfy the search
1:fdf3952:                 will(returnValue(null));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         // is there any need?
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 allowing(mockBundle).getSymbolicName();
1:fdf3952:                 will(returnValue("org.apache.geronimo.blueprint.testXXX"));
1:fdf3952:                 allowing(mockBundle).getVersion();
1:fdf3952:                 will(returnValue(Version.emptyVersion));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         assertEquals(-1, metadata.getBlueprintContainerServiceId(bundleId));
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void normalBlueprintContainerServiceIds() throws Exception {
1:fdf3952:         final long serviceId = 7117;
1:fdf3952:         final long [] serviceIds = new long[]{serviceId};
1:fdf3952:         
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 will(returnValue(mockServiceReferences));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 allowing(mockServiceReferences[0]).getProperty(Constants.SERVICE_ID);
1:fdf3952:                 will(returnValue(serviceId));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         
1:fdf3952:         assertArrayEquals(serviceIds, metadata.getBlueprintContainerServiceIds());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test 
1:fdf3952:     public void noBlueprintContainerServiceIds() throws Exception
1:fdf3952:     {//It is impossible according to osgi spec, here just test the robustness of code
1:fdf3952:         mockery.checking(new Expectations() {
1:fdf3952:             {
1:fdf3952:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 //return null if no services are registered which satisfy the search
1:fdf3952:                 will(returnValue(null));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         assertNull(metadata.getBlueprintContainerServiceIds());
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void nomalGetComponentIds() throws Exception {
1:fdf3952:         final long serviceId = 7117;
1:fdf3952:         final Set cidset = getAsSet(new String[]{".component-1", ".component-2", ".component-5"});
1:fdf3952:         
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 will(returnValue(mockServiceReferences));
1:fdf3952:                 oneOf(mockContext).getService(mockServiceReferences[0]);
1:fdf3952:                 will(returnValue(mockContainer));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 oneOf(mockContainer).getComponentIds();
1:fdf3952:                 will(returnValue(cidset));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         
1:fdf3952:         assertEquals(cidset, getAsSet(metadata.getComponentIds(serviceId)));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void normalGetComponentIdsByType() throws Exception {
1:fdf3952:         final long serviceId = 7117;
1:fdf3952:         final String [] cidarray = new String[]{".component-1"};
1:fdf3952:         final Collection cMetadatas = new ArrayList();
1:fdf3952:         cMetadatas.add(mockServiceMetadata);
1:fdf3952:         
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 will(returnValue(mockServiceReferences));
1:fdf3952:                 oneOf(mockContext).getService(mockServiceReferences[0]);
1:fdf3952:                 will(returnValue(mockContainer));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 oneOf(mockContainer).getMetadata(ServiceMetadata.class);
1:fdf3952:                 will(returnValue(cMetadatas));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 oneOf(mockServiceMetadata).getId();
1:fdf3952:                 will(returnValue(cidarray[0]));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         
1:fdf3952:         assertArrayEquals(cidarray, 
1:fdf3952:                 metadata.getComponentIdsByType(serviceId, BlueprintMetadataMBean.SERVICE_METADATA));
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public void invalidParaInGetComponentIdsByType() throws Exception {
1:fdf3952:         final long serviceId = 7117;
1:fdf3952:                 
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 allowing(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 will(returnValue(mockServiceReferences));
1:fdf3952:                 allowing(mockContext).getService(mockServiceReferences[0]);
1:fdf3952:                 will(returnValue(mockContainer));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         
1:fdf3952:         try {
1:fdf3952:             metadata.getComponentIdsByType(serviceId, null);
1:fdf3952:         }catch(Exception ex)
1:fdf3952:         {
1:fdf3952:             assertTrue(ex instanceof IllegalArgumentException);
1:fdf3952:         }
1:fdf3952:         try {
1:fdf3952:             metadata.getComponentIdsByType(serviceId, BlueprintMetadataMBean.COMPONENT_METADATA);
1:fdf3952:         }catch(Exception ex)
1:fdf3952:         {
1:fdf3952:             assertTrue(ex instanceof IllegalArgumentException);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952:     @Test
1:fdf3952:     public void testGetComponentMetadata() throws Exception {
1:fdf3952:         final long serviceId = 7117;
1:fdf3952:         final String componentId = ".component-1";
1:fdf3952:         final String [] cidarray = new String[]{componentId};
1:fdf3952:         final List emptyList = new ArrayList();
1:fdf3952:         
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 will(returnValue(mockServiceReferences));
1:fdf3952:                 oneOf(mockContext).getService(mockServiceReferences[0]);
1:fdf3952:                 will(returnValue(mockContainer));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 oneOf(mockContainer).getComponentMetadata(componentId);
1:fdf3952:                 will(returnValue(mockBeanMetadata));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 allowing(mockBeanMetadata).getDependsOn();
1:fdf3952:                 will(returnValue(emptyList));
1:fdf3952: 
1:fdf3952:                 allowing(mockBeanMetadata).getArguments();
1:fdf3952:                 will(returnValue(emptyList));
1:fdf3952:                 allowing(mockBeanMetadata).getFactoryComponent();
1:fdf3952:                 will(returnValue(null));
1:fdf3952:                 allowing(mockBeanMetadata).getProperties();
1:fdf3952:                 will(returnValue(emptyList));
1:fdf3952:                 ignoring(mockBeanMetadata);
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         metadata.getComponentMetadata(serviceId, componentId);
1:fdf3952:         mockery.assertIsSatisfied();
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     @Test
1:fdf3952:     public void fail2GetBlueprintContainer() throws Exception
1:fdf3952:     {
1:fdf3952:         final long serviceId = 7117;
1:fdf3952:         mockery.checking(new Expectations(){
1:fdf3952:             {
1:fdf3952:                 exactly(3).of(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:fdf3952:                 will(returnValue(null));
1:fdf3952:             }
1:fdf3952:         });
1:fdf3952:         
1:fdf3952:         try{
1:fdf3952:             metadata.getComponentIds(serviceId);
1:fdf3952:         }catch(Exception ex)
1:fdf3952:         {
1:fdf3952:             assertTrue(ex instanceof IllegalArgumentException);
1:fdf3952:         }
1:fdf3952:         
1:fdf3952:         try{
1:fdf3952:             metadata.getComponentIdsByType(serviceId, BlueprintMetadataMBean.SERVICE_METADATA);
1:fdf3952:         }catch(Exception ex)
1:fdf3952:         {
1:fdf3952:             assertTrue(ex instanceof IllegalArgumentException);
1:fdf3952:         }
1:fdf3952:         
1:fdf3952:         try{
1:fdf3952:             metadata.getComponentMetadata(serviceId, "xxxx");
1:fdf3952:         }catch(Exception ex)
1:fdf3952:         {
1:fdf3952:             assertTrue(ex instanceof IllegalArgumentException);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private Set getAsSet(String[] data) {
1:fdf3952:         Set dataSet = new HashSet();
1:fdf3952:         dataSet.addAll(Arrays.asList(data));
1:fdf3952:         return dataSet;
1:fdf3952:     }
1:fdf3952:         
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.impl;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.jmock.Expectations;
1: import org.jmock.Mockery;
1: import org.jmock.integration.junit4.JMock;
1: import org.jmock.integration.junit4.JUnit4Mockery;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1: 
1: @RunWith(JMock.class)
1: public class BlueprintMetadataTest {
1: 
1:     private BlueprintMetadata metadata;
1:     private Mockery mockery = new JUnit4Mockery();
1:     
1:     private BundleContext mockContext;
1:     private Bundle  mockBundle;
1:     private ServiceReference[] mockServiceReferences = new ServiceReference[1];
1:     //private ServiceReference mockServiceReference;
1:     private BlueprintContainer mockContainer;
1:     private ServiceMetadata mockServiceMetadata;
1:     private BeanMetadata mockBeanMetadata;
1:     
1:     @Before
1:     public void setUp() throws Exception {
1:         mockContext = mockery.mock(BundleContext.class);
1:         mockBundle = mockery.mock(Bundle.class);
1:         mockServiceReferences[0] = mockery.mock(ServiceReference.class);
1:         mockContainer = mockery.mock(BlueprintContainer.class);
1:         mockServiceMetadata = mockery.mock(ServiceMetadata.class);
1:         mockBeanMetadata = mockery.mock(BeanMetadata.class);
1:         
1:         metadata = new BlueprintMetadata(mockContext);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1: 
1:     }
1: 
1:     @Test
1:     public void validGetBlueprintContainerServiceId() throws Exception {
1:         final long bundleId = 12;
1:         final long serviceId = 7117;
1:         
1:         mockery.checking(new Expectations() {
1:             {
1:                 allowing(mockContext).getBundle(bundleId);
1:                 will(returnValue(mockBundle));
1:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 will(returnValue(mockServiceReferences));
1:             }
1:         });
1:         // is there any need?
1:         mockery.checking(new Expectations() {
1:             {
1:                 allowing(mockBundle).getSymbolicName();
1:                 will(returnValue("org.apache.geronimo.blueprint.testXXX"));
1:                 allowing(mockBundle).getVersion();
1:                 will(returnValue(Version.emptyVersion));
1:             }
1:         });
1:         mockery.checking(new Expectations() {
1:             {
1:                 allowing(mockServiceReferences[0]).getProperty(Constants.SERVICE_ID);
1:                 will(returnValue(serviceId));
1:             }
1:         });
1: 
1:         assertEquals(serviceId, metadata.getBlueprintContainerServiceId(bundleId));
1:     }
1: 
1:     @Test
1:     public void invalidParaInGetBlueprintContainerServiceId() throws Exception
1:     {
1:         mockery.checking(new Expectations() {
1:             {
1:                 allowing(mockContext).getBundle(with(any(Long.class)));
1:                 will(returnValue(null));
1:             }
1:         });
1:         try{
1:             metadata.getBlueprintContainerServiceId(-10);
1:         } catch(Exception ex)
1:         {
1:             assertTrue(ex instanceof IllegalArgumentException);
1:         }
1:     }
1:     
1:     @Test
1:     public void cannotFindAssociatedContainerServiceId() throws Exception
1:     {
1:         final long bundleId = 12;
1:         
1:         mockery.checking(new Expectations() {
1:             {
1:                 allowing(mockContext).getBundle(bundleId);
1:                 will(returnValue(mockBundle));
1:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 //return null if no services are registered which satisfy the search
1:                 will(returnValue(null));
1:             }
1:         });
1:         // is there any need?
1:         mockery.checking(new Expectations() {
1:             {
1:                 allowing(mockBundle).getSymbolicName();
1:                 will(returnValue("org.apache.geronimo.blueprint.testXXX"));
1:                 allowing(mockBundle).getVersion();
1:                 will(returnValue(Version.emptyVersion));
1:             }
1:         });
1:         assertEquals(-1, metadata.getBlueprintContainerServiceId(bundleId));
1:     }
1:     
1:     @Test
1:     public void normalBlueprintContainerServiceIds() throws Exception {
1:         final long serviceId = 7117;
1:         final long [] serviceIds = new long[]{serviceId};
1:         
1:         mockery.checking(new Expectations() {
1:             {
1:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 will(returnValue(mockServiceReferences));
1:             }
1:         });
1:         mockery.checking(new Expectations() {
1:             {
1:                 allowing(mockServiceReferences[0]).getProperty(Constants.SERVICE_ID);
1:                 will(returnValue(serviceId));
1:             }
1:         });
1:         
1:         assertArrayEquals(serviceIds, metadata.getBlueprintContainerServiceIds());
1:     }
1: 
1:     @Test 
1:     public void noBlueprintContainerServiceIds() throws Exception
1:     {//It is impossible according to osgi spec, here just test the robustness of code
1:         mockery.checking(new Expectations() {
1:             {
1:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 //return null if no services are registered which satisfy the search
1:                 will(returnValue(null));
1:             }
1:         });
1:         assertNull(metadata.getBlueprintContainerServiceIds());
1:     }
1:     
1:     @Test
1:     public void nomalGetComponentIds() throws Exception {
1:         final long serviceId = 7117;
1:         final Set cidset = getAsSet(new String[]{".component-1", ".component-2", ".component-5"});
1:         
1:         mockery.checking(new Expectations(){
1:             {
1:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 will(returnValue(mockServiceReferences));
1:                 oneOf(mockContext).getService(mockServiceReferences[0]);
1:                 will(returnValue(mockContainer));
1:             }
1:         });
1:         mockery.checking(new Expectations(){
1:             {
1:                 oneOf(mockContainer).getComponentIds();
1:                 will(returnValue(cidset));
1:             }
1:         });
1:         
1:         assertEquals(cidset, getAsSet(metadata.getComponentIds(serviceId)));
1:     }
1: 
1:     @Test
1:     public void normalGetComponentIdsByType() throws Exception {
1:         final long serviceId = 7117;
1:         final String [] cidarray = new String[]{".component-1"};
1:         final Collection cMetadatas = new ArrayList();
1:         cMetadatas.add(mockServiceMetadata);
1:         
1:         mockery.checking(new Expectations(){
1:             {
1:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 will(returnValue(mockServiceReferences));
1:                 oneOf(mockContext).getService(mockServiceReferences[0]);
1:                 will(returnValue(mockContainer));
1:             }
1:         });
1:         mockery.checking(new Expectations(){
1:             {
1:                 oneOf(mockContainer).getMetadata(ServiceMetadata.class);
1:                 will(returnValue(cMetadatas));
1:             }
1:         });
1:         mockery.checking(new Expectations(){
1:             {
1:                 oneOf(mockServiceMetadata).getId();
1:                 will(returnValue(cidarray[0]));
1:             }
1:         });
1:         
1:         assertArrayEquals(cidarray, 
1:                 metadata.getComponentIdsByType(serviceId, BlueprintMetadataMBean.SERVICE_METADATA));
1:     }
1: 
1:     public void invalidParaInGetComponentIdsByType() throws Exception {
1:         final long serviceId = 7117;
1:                 
1:         mockery.checking(new Expectations(){
1:             {
1:                 allowing(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 will(returnValue(mockServiceReferences));
1:                 allowing(mockContext).getService(mockServiceReferences[0]);
1:                 will(returnValue(mockContainer));
1:             }
1:         });
1:         
1:         try {
1:             metadata.getComponentIdsByType(serviceId, null);
1:         }catch(Exception ex)
1:         {
1:             assertTrue(ex instanceof IllegalArgumentException);
1:         }
1:         try {
1:             metadata.getComponentIdsByType(serviceId, BlueprintMetadataMBean.COMPONENT_METADATA);
1:         }catch(Exception ex)
1:         {
1:             assertTrue(ex instanceof IllegalArgumentException);
1:         }
1:     }
1:     @Test
1:     public void testGetComponentMetadata() throws Exception {
1:         final long serviceId = 7117;
1:         final String componentId = ".component-1";
1:         final String [] cidarray = new String[]{componentId};
1:         final List emptyList = new ArrayList();
1:         
1:         mockery.checking(new Expectations(){
1:             {
1:                 oneOf(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 will(returnValue(mockServiceReferences));
1:                 oneOf(mockContext).getService(mockServiceReferences[0]);
1:                 will(returnValue(mockContainer));
1:             }
1:         });
1:         mockery.checking(new Expectations(){
1:             {
1:                 oneOf(mockContainer).getComponentMetadata(componentId);
1:                 will(returnValue(mockBeanMetadata));
1:             }
1:         });
1:         mockery.checking(new Expectations(){
1:             {
1:                 allowing(mockBeanMetadata).getDependsOn();
1:                 will(returnValue(emptyList));
1: 
1:                 allowing(mockBeanMetadata).getArguments();
1:                 will(returnValue(emptyList));
1:                 allowing(mockBeanMetadata).getFactoryComponent();
1:                 will(returnValue(null));
1:                 allowing(mockBeanMetadata).getProperties();
1:                 will(returnValue(emptyList));
1:                 ignoring(mockBeanMetadata);
1:             }
1:         });
1:         metadata.getComponentMetadata(serviceId, componentId);
1:         mockery.assertIsSatisfied();
1:     }
1:     
1:     @Test
1:     public void fail2GetBlueprintContainer() throws Exception
1:     {
1:         final long serviceId = 7117;
1:         mockery.checking(new Expectations(){
1:             {
1:                 exactly(3).of(mockContext).getServiceReferences(with(any(String.class)), with(any(String.class)));
1:                 will(returnValue(null));
1:             }
1:         });
1:         
1:         try{
1:             metadata.getComponentIds(serviceId);
1:         }catch(Exception ex)
1:         {
1:             assertTrue(ex instanceof IllegalArgumentException);
1:         }
1:         
1:         try{
1:             metadata.getComponentIdsByType(serviceId, BlueprintMetadataMBean.SERVICE_METADATA);
1:         }catch(Exception ex)
1:         {
1:             assertTrue(ex instanceof IllegalArgumentException);
1:         }
1:         
1:         try{
1:             metadata.getComponentMetadata(serviceId, "xxxx");
1:         }catch(Exception ex)
1:         {
1:             assertTrue(ex instanceof IllegalArgumentException);
1:         }
1:     }
1: 
1:     private Set getAsSet(String[] data) {
1:         Set dataSet = new HashSet();
1:         dataSet.addAll(Arrays.asList(data));
1:         return dataSet;
1:     }
1:         
1: }
============================================================================