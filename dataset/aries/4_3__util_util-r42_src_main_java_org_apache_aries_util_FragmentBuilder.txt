2:1bccb37: /**
1:1bccb37:  * Licensed to the Apache Software Foundation (ASF) under one
1:1bccb37:  * or more contributor license agreements.  See the NOTICE file
1:1bccb37:  * distributed with this work for additional information
1:1bccb37:  * regarding copyright ownership.  The ASF licenses this file
1:1bccb37:  * to you under the Apache License, Version 2.0 (the
1:1bccb37:  * "License"); you may not use this file except in compliance
1:1bccb37:  * with the License.  You may obtain a copy of the License at
1:1bccb37:  *
1:1bccb37:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1bccb37:  *
1:1bccb37:  * Unless required by applicable law or agreed to in writing,
1:1bccb37:  * software distributed under the License is distributed on an
1:1bccb37:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1bccb37:  * KIND, either express or implied.  See the License for the
1:1bccb37:  * specific language governing permissions and limitations
1:1bccb37:  * under the License.
2:1bccb37:  */
1:1bccb37: package org.apache.aries.util;
26:1bccb37: 
1:1bccb37: import java.io.ByteArrayInputStream;
1:1bccb37: import java.io.ByteArrayOutputStream;
1:1bccb37: import java.io.IOException;
1:1bccb37: import java.util.ArrayList;
1:1bccb37: import java.util.Arrays;
1:1bccb37: import java.util.HashMap;
1:1bccb37: import java.util.List;
1:1bccb37: import java.util.Map;
1:1bccb37: import java.util.jar.Attributes;
1:1bccb37: import java.util.jar.JarEntry;
1:1bccb37: import java.util.jar.JarOutputStream;
1:1bccb37: import java.util.jar.Manifest;
1:1bccb37: 
1:7341d98: import org.apache.aries.util.internal.MessageUtil;
1:1bccb37: import org.osgi.framework.Bundle;
1:1bccb37: import org.osgi.framework.BundleContext;
1:1bccb37: import org.osgi.framework.BundleException;
1:1bccb37: import org.osgi.framework.Constants;
1:1bccb37: 
1:1534743: public class FragmentBuilder {
1:1534743:     private List<String> importPackages = new ArrayList<String>();
1:1534743:     private List<String> exportPackages = new ArrayList<String>();
1:1534743:     private Bundle hostBundle;
1:1534743:     private String nameExtension;
1:2d6bb5c:     private String bundleNameExtension;
1:1534743:     private String fragmentName;
1:1534743:     private Map<String, byte[]> files = new HashMap<String, byte[]>();
1:1bccb37: 
1:2d6bb5c:     public FragmentBuilder(Bundle host) {
1:2d6bb5c:         this(host, ".fragment", "Fragment");
1:2d6bb5c:     }
1:2d6bb5c:     
1:2d6bb5c:     public FragmentBuilder(Bundle host, String symbolicNameSuffix, String bundleNameSuffix) {
1:1534743:         hostBundle = host;
1:2d6bb5c:         nameExtension = symbolicNameSuffix;
1:2d6bb5c:         bundleNameExtension = bundleNameSuffix;
1:1bccb37: 
1:1534743:         // make sure we have an initial '.'
1:2d6bb5c:         if (!!!nameExtension.startsWith(".")) {
1:1534743:             nameExtension = "." + nameExtension;
1:2d6bb5c:         }
1:1534743:     }
1:1534743: 
1:1534743:     public void setName(String name) {
1:1534743:         fragmentName = name;
1:1534743:     }
1:1534743: 
1:1534743:     public void addImports(String... imports) {
1:1534743:         importPackages.addAll(Arrays.asList(imports));
1:1534743:     }
1:1534743: 
1:1534743:     public void addExports(String... imports) {
1:1534743:         exportPackages.addAll(Arrays.asList(imports));
1:1534743:     }
1:1534743: 
1:1534743:     public void addImportsFromExports(Bundle exportBundle) {
1:2d6bb5c:         String exportString = (String) exportBundle.getHeaders().get(Constants.EXPORT_PACKAGE);
1:1534743: 
1:1534743:         if (exportString != null) {
1:1534743:             String exportVersion = exportBundle.getVersion().toString();
1:1534743:             String bundleConstraint = Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE
1:1534743:                     + "=\"" + exportBundle.getSymbolicName() + "\"";
1:1534743:             String bundleVersionConstraint = Constants.BUNDLE_VERSION_ATTRIBUTE
1:1534743:                     + "=\"[" + exportVersion + "," + exportVersion + "]\"";
1:1534743: 
1:fa7040c:             List<String> exports = parseDelimitedString(exportString, ",", true);            
1:fa7040c:             for (String export : exports) {
1:2d6bb5c:                 importPackages.add(convertExportToImport(export, bundleConstraint, bundleVersionConstraint));
1:1534743:             }
1:1534743:         }
1:1534743:     }
1:1534743: 
1:1534743:     /**
1:1534743:      * Filter out directives in the export statement
1:1534743:      * 
1:1534743:      * @param exportStatement
1:1534743:      * @return
1:1534743:      */
1:1534743:     private String convertExportToImport(String exportStatement,
1:2d6bb5c:                                          String bundleConstraint, 
1:2d6bb5c:                                          String bundleVersionConstraint) {
1:1534743:         StringBuffer result = new StringBuffer();
1:1534743: 
1:1534743:         for (String fragment : exportStatement.split("\\s*;\\s*")) {
1:1534743:             int pos = fragment.indexOf('=');
1:1534743: 
1:1534743:             // similar to fragment.contains(":=") but looks for the first '='
1:1534743:             // and checks whether this is part of ':='
1:1534743:             // in this way we will not be fooled by attributes like
1:1534743:             // a="something:=strange"
1:1534743:             if (!!!(pos > 0 && fragment.charAt(pos - 1) == ':')) {
1:1534743:                 result.append(fragment);
1:1534743:                 result.append(';');
1:1534743:             }
1:1534743:         }
1:1534743: 
1:1534743:         result.append(bundleConstraint);
2:1bccb37:         result.append(';');
1:1534743:         result.append(bundleVersionConstraint);
1:1bccb37: 
1:1534743:         return result.toString();
20:1bccb37:     }
1:fa7040c: 
1:1534743:     public void addFile(String path, byte[] content) {
1:1534743:         files.put(path, content);
1:1bccb37:     }
1:1534743: 
1:2d6bb5c:     public Bundle install(BundleContext ctx) throws IOException, BundleException {
1:1534743:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:1534743:         JarOutputStream jos = null;
1:1534743: 
1:1534743:         try {
1:1534743:             jos = new JarOutputStream(baos, makeManifest());
1:1534743:             addFileContent(jos);
1:1534743:         } finally {
1:1534743:             if (jos != null)
1:1534743:                 jos.close();
1:1534743:             baos.close();
1:1534743:         }
1:1534743: 
1:1534743:         byte[] inMemoryJar = baos.toByteArray();
1:1534743:         ByteArrayInputStream bais = new ByteArrayInputStream(inMemoryJar);
1:1534743: 
1:1534743:         return ctx.installBundle(getFragmentSymbolicName(), bais);
1:1bccb37:     }
1:1534743: 
1:1534743:     private void addFileContent(JarOutputStream jos) throws IOException {
1:1534743:         for (Map.Entry<String, byte[]> entry : files.entrySet()) {
1:1534743:             jos.putNextEntry(new JarEntry(entry.getKey()));
1:1534743:             jos.write(entry.getValue());
1:1534743:         }
1:1bccb37:     }
1:1534743: 
1:1534743:     public String getFragmentSymbolicName() {
1:1534743:         return hostBundle.getSymbolicName() + nameExtension;
1:1534743:     }
1:1534743: 
1:2d6bb5c:     public String getFragmentBundleName() {
1:2d6bb5c:         if (fragmentName != null) {
1:2d6bb5c:             return fragmentName;
1:2d6bb5c:         } else {
1:2d6bb5c:             String bundleName = (String) hostBundle.getHeaders().get(Constants.BUNDLE_NAME);
1:2d6bb5c:             if (bundleName != null && bundleNameExtension != null) {
1:2d6bb5c:                 return bundleName.trim() + " " + bundleNameExtension.trim();
1:2d6bb5c:             }
1:2d6bb5c:         }
1:2d6bb5c:         return null;
1:2d6bb5c:     }
1:2d6bb5c:     
1:1534743:     private Manifest makeManifest() {
1:1534743:         String commonVersion = hostBundle.getVersion().toString();
1:1534743:         String fragmentHost = hostBundle.getSymbolicName() + ";"
1:1534743:                 + Constants.BUNDLE_VERSION_ATTRIBUTE + "=\"" + commonVersion
1:1534743:                 + "\"";
1:1534743: 
1:1534743:         Manifest m = new Manifest();
1:1534743:         Attributes manifestAttributes = m.getMainAttributes();
1:2d6bb5c:         manifestAttributes.putValue(Attributes.Name.MANIFEST_VERSION.toString(), "1.0");
1:1534743:         manifestAttributes.putValue(Constants.BUNDLE_MANIFESTVERSION, "2");
1:2d6bb5c:         manifestAttributes.putValue(Constants.BUNDLE_SYMBOLICNAME, getFragmentSymbolicName());   
1:2d6bb5c:         
1:2d6bb5c:         String bundleName = getFragmentBundleName();        
1:2d6bb5c:         if (bundleName != null) {
1:2d6bb5c:             manifestAttributes.putValue(Constants.BUNDLE_NAME, bundleName);
1:2d6bb5c:         }
1:2d6bb5c:             
1:1534743:         manifestAttributes.putValue(Constants.BUNDLE_VERSION, commonVersion);
1:2d6bb5c:         manifestAttributes.putValue(Constants.BUNDLE_VENDOR, "Apache");
1:1534743:         manifestAttributes.putValue(Constants.FRAGMENT_HOST, fragmentHost);
1:1534743: 
1:1534743:         addImportsAndExports(manifestAttributes);
1:1534743: 
1:1534743:         return m;
1:1534743:     }
1:1534743: 
1:1534743:     private void addImportsAndExports(Attributes attrs) {
1:1534743:         if (!!!importPackages.isEmpty()) {
1:2d6bb5c:             attrs.putValue(Constants.IMPORT_PACKAGE, joinStrings(importPackages, ','));
1:1534743:         }
1:1534743: 
1:1534743:         if (!!!exportPackages.isEmpty()) {
1:2d6bb5c:             attrs.putValue(Constants.EXPORT_PACKAGE, joinStrings(exportPackages, ','));
1:1534743:         }
1:1534743:     }
1:1534743: 
1:1534743:     private String joinStrings(List<String> strs, char separator) {
1:1534743:         StringBuilder result = new StringBuilder();
1:1534743:         boolean first = true;
1:1534743:         for (String str : strs) {
1:1534743:             if (first)
1:1534743:                 first = false;
1:1534743:             else
1:1534743:                 result.append(separator);
1:1534743: 
1:1534743:             result.append(str);
1:1534743:         }
1:1534743: 
1:1534743:         return result.toString();
1:1534743:     }
1:1bccb37:     
1:fa7040c:     private static List<String> parseDelimitedString(String value, String delim, boolean includeQuotes) {   
1:fa7040c:         if (value == null) {       
1:fa7040c:             value = "";
1:fa7040c:         }
1:fa7040c: 
1:fa7040c:         List<String> list = new ArrayList<String>();
1:fa7040c: 
1:fa7040c:         int CHAR = 1;
1:fa7040c:         int DELIMITER = 2;
1:fa7040c:         int STARTQUOTE = 4;
1:fa7040c:         int ENDQUOTE = 8;
1:fa7040c: 
1:fa7040c:         StringBuffer sb = new StringBuffer();
1:fa7040c: 
1:fa7040c:         int expecting = (CHAR | DELIMITER | STARTQUOTE);
1:fa7040c: 
1:fa7040c:         for (int i = 0; i < value.length(); i++) {        
1:fa7040c:             char c = value.charAt(i);
1:fa7040c: 
1:fa7040c:             boolean isDelimiter = (delim.indexOf(c) >= 0);
1:fa7040c:             boolean isQuote = (c == '"');
1:fa7040c: 
1:fa7040c:             if (isDelimiter && ((expecting & DELIMITER) > 0)) {            
1:fa7040c:                 list.add(sb.toString().trim());
1:fa7040c:                 sb.delete(0, sb.length());
1:fa7040c:                 expecting = (CHAR | DELIMITER | STARTQUOTE);
1:fa7040c:             } else if (isQuote && ((expecting & STARTQUOTE) > 0)) { 
1:fa7040c:                 if (includeQuotes) {
1:fa7040c:                     sb.append(c);
1:fa7040c:                 }
1:fa7040c:                 expecting = CHAR | ENDQUOTE;
1:fa7040c:             } else if (isQuote && ((expecting & ENDQUOTE) > 0)) {    
1:fa7040c:                 if (includeQuotes) {
1:fa7040c:                     sb.append(c);
1:fa7040c:                 }
1:fa7040c:                 expecting = (CHAR | STARTQUOTE | DELIMITER);
1:fa7040c:             } else if ((expecting & CHAR) > 0) {            
1:fa7040c:                 sb.append(c);
1:fa7040c:             } else {
1:7341d98:                 throw new IllegalArgumentException(MessageUtil.getMessage("UTIL0012E", value));
1:fa7040c:             }
1:fa7040c:         }
1:fa7040c: 
1:fa7040c:         if (sb.length() > 0) {        
1:fa7040c:             list.add(sb.toString().trim());
1:fa7040c:         }
1:fa7040c: 
1:fa7040c:         return list;
1:fa7040c:     }
1:1bccb37: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:7341d98
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.internal.MessageUtil;
/////////////////////////////////////////////////////////////////////////
1:                 throw new IllegalArgumentException(MessageUtil.getMessage("UTIL0012E", value));
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:2d6bb5c
/////////////////////////////////////////////////////////////////////////
1:     private String bundleNameExtension;
1:     public FragmentBuilder(Bundle host) {
1:         this(host, ".fragment", "Fragment");
1:     }
1:     
1:     public FragmentBuilder(Bundle host, String symbolicNameSuffix, String bundleNameSuffix) {
1:         nameExtension = symbolicNameSuffix;
1:         bundleNameExtension = bundleNameSuffix;
1:         if (!!!nameExtension.startsWith(".")) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         String exportString = (String) exportBundle.getHeaders().get(Constants.EXPORT_PACKAGE);
/////////////////////////////////////////////////////////////////////////
1:                 importPackages.add(convertExportToImport(export, bundleConstraint, bundleVersionConstraint));
/////////////////////////////////////////////////////////////////////////
1:                                          String bundleConstraint, 
1:                                          String bundleVersionConstraint) {
/////////////////////////////////////////////////////////////////////////
1:     public Bundle install(BundleContext ctx) throws IOException, BundleException {
/////////////////////////////////////////////////////////////////////////
1:     public String getFragmentBundleName() {
1:         if (fragmentName != null) {
1:             return fragmentName;
1:         } else {
1:             String bundleName = (String) hostBundle.getHeaders().get(Constants.BUNDLE_NAME);
1:             if (bundleName != null && bundleNameExtension != null) {
1:                 return bundleName.trim() + " " + bundleNameExtension.trim();
1:             }
1:         }
1:         return null;
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         manifestAttributes.putValue(Attributes.Name.MANIFEST_VERSION.toString(), "1.0");
1:         manifestAttributes.putValue(Constants.BUNDLE_SYMBOLICNAME, getFragmentSymbolicName());   
1:         
1:         String bundleName = getFragmentBundleName();        
1:         if (bundleName != null) {
1:             manifestAttributes.putValue(Constants.BUNDLE_NAME, bundleName);
1:         }
1:             
1:         manifestAttributes.putValue(Constants.BUNDLE_VENDOR, "Apache");
/////////////////////////////////////////////////////////////////////////
1:             attrs.putValue(Constants.IMPORT_PACKAGE, joinStrings(importPackages, ','));
1:             attrs.putValue(Constants.EXPORT_PACKAGE, joinStrings(exportPackages, ','));
commit:fa7040c
/////////////////////////////////////////////////////////////////////////
1:             List<String> exports = parseDelimitedString(exportString, ",", true);            
1:             for (String export : exports) {
/////////////////////////////////////////////////////////////////////////
1:     
1:     private static List<String> parseDelimitedString(String value, String delim, boolean includeQuotes) {   
1:         if (value == null) {       
1:             value = "";
1:         }
1: 
1:         List<String> list = new ArrayList<String>();
1: 
1:         int CHAR = 1;
1:         int DELIMITER = 2;
1:         int STARTQUOTE = 4;
1:         int ENDQUOTE = 8;
1: 
1:         StringBuffer sb = new StringBuffer();
1: 
1:         int expecting = (CHAR | DELIMITER | STARTQUOTE);
1: 
1:         for (int i = 0; i < value.length(); i++) {        
1:             char c = value.charAt(i);
1: 
1:             boolean isDelimiter = (delim.indexOf(c) >= 0);
1:             boolean isQuote = (c == '"');
1: 
1:             if (isDelimiter && ((expecting & DELIMITER) > 0)) {            
1:                 list.add(sb.toString().trim());
1:                 sb.delete(0, sb.length());
1:                 expecting = (CHAR | DELIMITER | STARTQUOTE);
1:             } else if (isQuote && ((expecting & STARTQUOTE) > 0)) { 
1:                 if (includeQuotes) {
1:                     sb.append(c);
1:                 }
1:                 expecting = CHAR | ENDQUOTE;
1:             } else if (isQuote && ((expecting & ENDQUOTE) > 0)) {    
1:                 if (includeQuotes) {
1:                     sb.append(c);
1:                 }
1:                 expecting = (CHAR | STARTQUOTE | DELIMITER);
1:             } else if ((expecting & CHAR) > 0) {            
1:                 sb.append(c);
1:             } else {
0:                 throw new IllegalArgumentException("Invalid delimited string: " + value);
1:             }
1:         }
1: 
1:         if (sb.length() > 0) {        
1:             list.add(sb.toString().trim());
1:         }
1: 
1:         return list;
1:     }
author:Lin Sun
-------------------------------------------------------------------------------
commit:1534743
/////////////////////////////////////////////////////////////////////////
1: public class FragmentBuilder {
1:     private List<String> importPackages = new ArrayList<String>();
1:     private List<String> exportPackages = new ArrayList<String>();
1:     private Bundle hostBundle;
1:     private String nameExtension;
1:     private String fragmentName;
1:     private Map<String, byte[]> files = new HashMap<String, byte[]>();
0:     public FragmentBuilder(Bundle host, String extension) {
1:         hostBundle = host;
0:         nameExtension = extension;
1:         // make sure we have an initial '.'
0:         if (!!!nameExtension.startsWith("."))
1:             nameExtension = "." + nameExtension;
1:     }
1: 
1:     public void setName(String name) {
1:         fragmentName = name;
1:     }
1: 
1:     public void addImports(String... imports) {
1:         importPackages.addAll(Arrays.asList(imports));
1:     }
1: 
1:     public void addExports(String... imports) {
1:         exportPackages.addAll(Arrays.asList(imports));
1:     }
1: 
1:     public void addImportsFromExports(Bundle exportBundle) {
0:         String exportString = (String) exportBundle.getHeaders().get(
0:                 Constants.EXPORT_PACKAGE);
1: 
1:         if (exportString != null) {
1:             String exportVersion = exportBundle.getVersion().toString();
1:             String bundleConstraint = Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE
1:                     + "=\"" + exportBundle.getSymbolicName() + "\"";
1:             String bundleVersionConstraint = Constants.BUNDLE_VERSION_ATTRIBUTE
1:                     + "=\"[" + exportVersion + "," + exportVersion + "]\"";
1: 
0:             for (String export : exportString.split("\\s*,\\s*")) {
0:                 importPackages.add(convertExportToImport(export,
0:                         bundleConstraint, bundleVersionConstraint));
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Filter out directives in the export statement
1:      * 
1:      * @param exportStatement
1:      * @return
1:      */
1:     private String convertExportToImport(String exportStatement,
0:             String bundleConstraint, String bundleVersionConstraint) {
1:         StringBuffer result = new StringBuffer();
1: 
1:         for (String fragment : exportStatement.split("\\s*;\\s*")) {
1:             int pos = fragment.indexOf('=');
1: 
1:             // similar to fragment.contains(":=") but looks for the first '='
1:             // and checks whether this is part of ':='
1:             // in this way we will not be fooled by attributes like
1:             // a="something:=strange"
1:             if (!!!(pos > 0 && fragment.charAt(pos - 1) == ':')) {
1:                 result.append(fragment);
1:                 result.append(';');
1:             }
1:         }
1: 
1:         result.append(bundleConstraint);
1:         result.append(bundleVersionConstraint);
1:         return result.toString();
1:     public void addFile(String path, byte[] content) {
1:         files.put(path, content);
1: 
0:     public Bundle install(BundleContext ctx) throws IOException,
0:             BundleException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         JarOutputStream jos = null;
1: 
1:         try {
1:             jos = new JarOutputStream(baos, makeManifest());
1:             addFileContent(jos);
1:         } finally {
1:             if (jos != null)
1:                 jos.close();
1:             baos.close();
1:         }
1: 
1:         byte[] inMemoryJar = baos.toByteArray();
1:         ByteArrayInputStream bais = new ByteArrayInputStream(inMemoryJar);
1: 
1:         return ctx.installBundle(getFragmentSymbolicName(), bais);
1: 
1:     private void addFileContent(JarOutputStream jos) throws IOException {
1:         for (Map.Entry<String, byte[]> entry : files.entrySet()) {
1:             jos.putNextEntry(new JarEntry(entry.getKey()));
1:             jos.write(entry.getValue());
1:         }
1: 
1:     public String getFragmentSymbolicName() {
1:         return hostBundle.getSymbolicName() + nameExtension;
1:     }
1: 
1:     private Manifest makeManifest() {
1:         String commonVersion = hostBundle.getVersion().toString();
1:         String fragmentHost = hostBundle.getSymbolicName() + ";"
1:                 + Constants.BUNDLE_VERSION_ATTRIBUTE + "=\"" + commonVersion
1:                 + "\"";
1: 
1:         Manifest m = new Manifest();
1:         Attributes manifestAttributes = m.getMainAttributes();
0:         manifestAttributes.putValue(
0:                 Attributes.Name.MANIFEST_VERSION.toString(), "1.0");
1:         manifestAttributes.putValue(Constants.BUNDLE_MANIFESTVERSION, "2");
0:         manifestAttributes.putValue(Constants.BUNDLE_SYMBOLICNAME,
0:                 getFragmentSymbolicName());
0:         if (fragmentName != null)
0:             manifestAttributes.putValue(Constants.BUNDLE_NAME, fragmentName);
1:         manifestAttributes.putValue(Constants.BUNDLE_VERSION, commonVersion);
0:         manifestAttributes.putValue(Constants.BUNDLE_VENDOR, "IBM");
1:         manifestAttributes.putValue(Constants.FRAGMENT_HOST, fragmentHost);
1: 
1:         addImportsAndExports(manifestAttributes);
1: 
1:         return m;
1:     }
1: 
1:     private void addImportsAndExports(Attributes attrs) {
1:         if (!!!importPackages.isEmpty()) {
0:             attrs.putValue(Constants.IMPORT_PACKAGE, joinStrings(
0:                     importPackages, ','));
1:         }
1: 
1:         if (!!!exportPackages.isEmpty()) {
0:             attrs.putValue(Constants.EXPORT_PACKAGE, joinStrings(
0:                     exportPackages, ','));
1:         }
1:     }
1: 
1:     private String joinStrings(List<String> strs, char separator) {
1:         StringBuilder result = new StringBuilder();
1:         boolean first = true;
1:         for (String str : strs) {
1:             if (first)
1:                 first = false;
1:             else
1:                 result.append(separator);
1: 
1:             result.append(str);
1:         }
1: 
1:         return result.toString();
1:     }
commit:1bccb37
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.util;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarEntry;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: 
0: public class FragmentBuilder
0: {
0:   private List<String> importPackages = new ArrayList<String>();
0:   private List<String> exportPackages = new ArrayList<String>();
0:   private Bundle hostBundle;
0:   private String nameExtension;
0:   private String fragmentName;
0:   private Map<String,byte[]> files = new HashMap<String, byte[]>();
1:   
0:   public FragmentBuilder(Bundle host, String extension)
0:   {
0:     hostBundle = host;
0:     nameExtension = extension;
1:     
0:     // make sure we have an initial '.'
0:     if (!!!nameExtension.startsWith("."))
0:       nameExtension = "."+nameExtension;
1:   }
1:   
0:   public void setName(String name) {
0:     fragmentName = name;
1:   }
1:   
0:   public void addImports(String ... imports) {
0:     importPackages.addAll(Arrays.asList(imports));
1:   }
1:   
0:   public void addExports(String ... imports) {
0:     exportPackages.addAll(Arrays.asList(imports));
1:   }
1:   
0:   public void addImportsFromExports(Bundle exportBundle) {
0:     String exportString = (String) exportBundle.getHeaders().get(
0:         Constants.EXPORT_PACKAGE);
1:     
0:     if (exportString != null) {
0:       String exportVersion = exportBundle.getVersion().toString();
0:       String bundleConstraint = 
0:         Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=\"" + exportBundle.getSymbolicName() + "\"";
0:       String bundleVersionConstraint = 
0:         Constants.BUNDLE_VERSION_ATTRIBUTE + "=\"[" + exportVersion + "," + exportVersion + "]\"";
1: 
0:       for (String export : exportString.split("\\s*,\\s*")) {
0:         importPackages.add(convertExportToImport(export, bundleConstraint, bundleVersionConstraint));
1:       }
1:     }    
1:   }
1: 
1:   /**
0:    * Filter out directives in the export statement
0:    * @param exportStatement
0:    * @return
1:    */
0:   private String convertExportToImport(String exportStatement, String bundleConstraint, String bundleVersionConstraint) 
0:   {
0:     StringBuffer result = new StringBuffer();
1:     
0:     for (String fragment : exportStatement.split("\\s*;\\s*")) {
0:       int pos = fragment.indexOf('=');
1:       
0:       // similar to fragment.contains(":=") but looks for the first '=' and checks whether this is part of ':='
0:       // in this way we will not be fooled by attributes like a="something:=strange"
0:       if (!!!(pos > 0 && fragment.charAt(pos-1) == ':')) {
0:         result.append(fragment);
1:         result.append(';');
1:       }
1:     }
1:     
0:     result.append(bundleConstraint);
1:     result.append(';');
0:     result.append(bundleVersionConstraint);
1:     
0:     return result.toString();
1:   }
1:   
0:   public void addFile(String path, byte[] content) {
0:     files.put(path, content);
1:   }
1:   
0:   public Bundle install(BundleContext ctx) throws IOException, BundleException
0:   {
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     JarOutputStream jos = null;
1:     
0:     try {
0:       jos = new JarOutputStream(baos, makeManifest());
0:       addFileContent(jos);
1:     }
0:     finally {
0:       if (jos != null) jos.close();
0:       baos.close();
1:     }
1:     
0:     byte[] inMemoryJar = baos.toByteArray();
0:     ByteArrayInputStream bais = new ByteArrayInputStream(inMemoryJar);
1: 
0:     return ctx.installBundle(getFragmentSymbolicName(), bais);
1:   }
1:   
0:   private void addFileContent(JarOutputStream jos) throws IOException
0:   {
0:     for (Map.Entry<String, byte[]> entry : files.entrySet()) {
0:       jos.putNextEntry(new JarEntry(entry.getKey()));
0:       jos.write(entry.getValue());
1:     }
1:   }
1:   
0:   public String getFragmentSymbolicName() 
0:   {
0:     return hostBundle.getSymbolicName() + nameExtension;
1:   }
1:   
0:   private Manifest makeManifest() 
0:   {
0:     String commonVersion = hostBundle.getVersion().toString();
0:     String fragmentHost = hostBundle.getSymbolicName() + ";"+Constants.BUNDLE_VERSION_ATTRIBUTE+"=\"" + commonVersion + "\"";
1:     
0:     Manifest m = new Manifest();
0:     Attributes manifestAttributes = m.getMainAttributes();
0:     manifestAttributes.putValue(Attributes.Name.MANIFEST_VERSION.toString(), "1.0");
0:     manifestAttributes.putValue(Constants.BUNDLE_MANIFESTVERSION, "2");
0:     manifestAttributes.putValue(Constants.BUNDLE_SYMBOLICNAME, getFragmentSymbolicName());
0:     if (fragmentName != null)
0:       manifestAttributes.putValue(Constants.BUNDLE_NAME, fragmentName);
0:     manifestAttributes.putValue(Constants.BUNDLE_VERSION, commonVersion);
0:     manifestAttributes.putValue(Constants.BUNDLE_VENDOR, "IBM");
0:     manifestAttributes.putValue(Constants.FRAGMENT_HOST, fragmentHost);
1:     
0:     addImportsAndExports(manifestAttributes);
1: 
0:     return m;
1:   }
1:   
0:   private void addImportsAndExports(Attributes attrs) {
0:     if (!!!importPackages.isEmpty()) {
0:       attrs.putValue(Constants.IMPORT_PACKAGE, joinStrings(importPackages, ','));
1:     }
1:     
0:     if (!!!exportPackages.isEmpty()) {
0:       attrs.putValue(Constants.EXPORT_PACKAGE, joinStrings(exportPackages, ','));
1:     }
1:   }
1:   
0:   private String joinStrings(List<String> strs, char separator) {
0:     StringBuilder result = new StringBuilder();
0:     boolean first = true;
0:     for (String str : strs) {
0:       if (first)
0:         first = false;
0:       else
0:         result.append(separator);
1:       
0:       result.append(str);
1:     }
1:     
0:     return result.toString();
1:   }
1: }
============================================================================