1:e9f9bca: package org.apache.aries.subsystem.scope.itests;
1:e9f9bca: 
1:e9f9bca: import org.apache.aries.subsystem.scope.Scope;
1:e9f9bca: import org.osgi.framework.Bundle;
1:e9f9bca: import org.osgi.framework.BundleContext;
1:e9f9bca: import org.osgi.framework.ServiceReference;
1:e9f9bca: import org.osgi.framework.ServiceRegistration;
1:e9f9bca: 
1:e9f9bca: public class Utils {
1:6f4b079: 	public static Bundle findBundle(String symbolicName, BundleContext bundleContext) {
1:6f4b079: 		Bundle[] bundles = bundleContext.getBundles();
1:6f4b079: 		for (Bundle bundle : bundles) {
1:6f4b079: 			if (bundle.getSymbolicName().equals(symbolicName)) {
1:6f4b079: 				return bundle;
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return null;
1:6f4b079: 	}
1:6f4b079: 	
1:e9f9bca: 	public static Bundle findBundle(String symbolicName, Scope scope) {
1:e9f9bca: 		if (scope == null) return null;
1:e9f9bca: 		for (Bundle b : scope.getBundles()) {
1:e9f9bca: 			if (symbolicName == null) {
1:e9f9bca: 				if (b.getSymbolicName() == null)
1:e9f9bca: 					return b;
1:e9f9bca: 			}
1:e9f9bca: 			else if (symbolicName.equals(b.getSymbolicName()))
1:e9f9bca: 				return b;
1:e9f9bca: 		}
1:e9f9bca: 		return null;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public static void ungetQuietly(ServiceReference<?> serviceReference, BundleContext bundleContext) {
1:e9f9bca: 		if (serviceReference == null) return;
1:e9f9bca: 		try {
1:e9f9bca: 			bundleContext.ungetService(serviceReference);
1:e9f9bca: 		}
1:e9f9bca: 		catch (Exception e) {
1:e9f9bca: 			// ignore
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public static void uninstallQuietly(Bundle bundle) {
1:e9f9bca: 		if (bundle == null) return;
1:e9f9bca: 		try {
1:e9f9bca: 			bundle.uninstall();
1:e9f9bca: 		}
1:e9f9bca: 		catch (Exception e) {
1:e9f9bca: 			// ignore
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public static void unregisterQuietly(ServiceRegistration<?> serviceRegistration) {
1:e9f9bca: 		if (serviceRegistration == null) return;
1:e9f9bca: 		try {
1:e9f9bca: 			serviceRegistration.unregister();
1:e9f9bca: 		}
1:e9f9bca: 		catch (Exception e) {
1:e9f9bca: 			// ignore
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: 	public static Bundle findBundle(String symbolicName, BundleContext bundleContext) {
1: 		Bundle[] bundles = bundleContext.getBundles();
1: 		for (Bundle bundle : bundles) {
1: 			if (bundle.getSymbolicName().equals(symbolicName)) {
1: 				return bundle;
1: 			}
1: 		}
1: 		return null;
1: 	}
1: 	
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
1: 
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: public class Utils {
1: 	public static Bundle findBundle(String symbolicName, Scope scope) {
1: 		if (scope == null) return null;
1: 		for (Bundle b : scope.getBundles()) {
1: 			if (symbolicName == null) {
1: 				if (b.getSymbolicName() == null)
1: 					return b;
1: 			}
1: 			else if (symbolicName.equals(b.getSymbolicName()))
1: 				return b;
1: 		}
1: 		return null;
1: 	}
1: 	
1: 	public static void ungetQuietly(ServiceReference<?> serviceReference, BundleContext bundleContext) {
1: 		if (serviceReference == null) return;
1: 		try {
1: 			bundleContext.ungetService(serviceReference);
1: 		}
1: 		catch (Exception e) {
1: 			// ignore
1: 		}
1: 	}
1: 	
1: 	public static void uninstallQuietly(Bundle bundle) {
1: 		if (bundle == null) return;
1: 		try {
1: 			bundle.uninstall();
1: 		}
1: 		catch (Exception e) {
1: 			// ignore
1: 		}
1: 	}
1: 	
1: 	public static void unregisterQuietly(ServiceRegistration<?> serviceRegistration) {
1: 		if (serviceRegistration == null) return;
1: 		try {
1: 			serviceRegistration.unregister();
1: 		}
1: 		catch (Exception e) {
1: 			// ignore
1: 		}
1: 	}
1: }
============================================================================