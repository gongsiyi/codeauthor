1:3bece4b: package org.apache.aries.plugin.eba;
34:3bece4b: 
1:3bece4b: /*
1:3bece4b:  * Licensed to the Apache Software Foundation (ASF) under one
1:3bece4b:  * or more contributor license agreements.  See the NOTICE file
1:3bece4b:  * distributed with this work for additional information
1:3bece4b:  * regarding copyright ownership.  The ASF licenses this file
1:3bece4b:  * to you under the Apache License, Version 2.0 (the
1:3bece4b:  * "License"); you may not use this file except in compliance
1:3bece4b:  * with the License.  You may obtain a copy of the License at
1:3bece4b:  *
1:3bece4b:  *  http://www.apache.org/licenses/LICENSE-2.0
1:3bece4b:  *
1:3bece4b:  * Unless required by applicable law or agreed to in writing,
1:3bece4b:  * software distributed under the License is distributed on an
1:3bece4b:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3bece4b:  * KIND, either express or implied.  See the License for the
1:3bece4b:  * specific language governing permissions and limitations
1:3bece4b:  * under the License.
1:3bece4b:  */
1:3bece4b: 
1:a68eb1d: import java.io.BufferedReader;
1:3bece4b: import java.io.File;
1:a68eb1d: import java.io.InputStreamReader;
1:3bece4b: import java.util.ArrayList;
1:3bece4b: import java.util.Enumeration;
1:3bece4b: import java.util.List;
1:3bece4b: import java.util.Iterator;
1:3bece4b: 
1:3bece4b: import org.apache.maven.plugin.testing.AbstractMojoTestCase;
1:3bece4b: import org.codehaus.plexus.archiver.zip.ZipEntry;
1:3bece4b: import org.codehaus.plexus.archiver.zip.ZipFile;
1:3bece4b: import org.codehaus.plexus.util.FileUtils;
1:3bece4b: 
1:3bece4b: /**
1:3bece4b:  * @author <a href="mailto:aramirez@apache.org">Allan Ramirez</a>
1:3bece4b:  */
1:3bece4b: public class EbaMojoTest
1:3bece4b:     extends AbstractMojoTestCase
14:3bece4b: {
1:3bece4b:     public void testEbaTestEnvironment()
1:3bece4b:         throws Exception
1:3bece4b:     {
1:3bece4b:         File testPom = new File( getBasedir(),
1:3bece4b:                                  "target/test-classes/unit/basic-eba-test/plugin-config.xml" );
1:3bece4b: 
1:3bece4b:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1:3bece4b: 
1:3bece4b:         assertNotNull( mojo );
14:3bece4b:     }
1:b95d944: 
1:3bece4b:     public void testBasicEba()
1:3bece4b:         throws Exception
1:3bece4b:     {
1:3bece4b:         File testPom = new File( getBasedir(),
1:3bece4b:                                  "target/test-classes/unit/basic-eba-test/plugin-config.xml" );
1:b95d944: 
1:3bece4b:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1:b95d944: 
1:3bece4b:         assertNotNull( mojo );
1:3bece4b: 
1:3bece4b:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:3bece4b: 
1:3bece4b:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:3bece4b: 
1:3bece4b:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:3bece4b: 
1:3bece4b:         Boolean includeJar = ( Boolean ) getVariableValueFromObject(  mojo, "includeJar" );
1:3bece4b: 
1:3bece4b:         assertTrue( includeJar.booleanValue() );
1:3bece4b: 
1:3bece4b:         //include the project jar to the eba
1:3bece4b:         File projectJar = new File( getBasedir(), "src/test/resources/unit/basic-eba-test/target/test-eba.jar" );
1:3bece4b: 
1:3bece4b:         FileUtils.copyFileToDirectory( projectJar, new File( outputDir ) );
1:3bece4b: 
1:3bece4b:         mojo.execute();
1:b95d944: 
1:3bece4b:         //check the generated eba file
1:3bece4b:         File ebaFile = new File( outputDir, finalName + ".eba" );
1:3bece4b: 
1:3bece4b:         assertTrue( ebaFile.exists() );
1:3bece4b: 
1:3bece4b:         //expected files/directories inside the eba file
1:a5742c5:         List expectedFiles = new ArrayList();
1:3bece4b: 
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/" );
1:e1f2a07: //        expectedFiles.add( "META-INF/MANIFEST.MF" );
1:3bece4b:         expectedFiles.add( "META-INF/" );
4:3bece4b:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
4:3bece4b:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
2:3bece4b:         expectedFiles.add( "test-eba.jar" );
1:3bece4b: 
1:3bece4b:         ZipFile eba = new ZipFile( ebaFile );
1:3bece4b: 
1:3bece4b:         Enumeration entries = eba.getEntries();
1:3bece4b: 
1:3bece4b:         assertTrue( entries.hasMoreElements() );
1:e1f2a07: 
1:e1f2a07:         assertTrue( entries.hasMoreElements() );
1:e1f2a07: 
1:e1f2a07:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:e1f2a07:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:3bece4b:     }
1:3bece4b: 
1:3bece4b:     public void testBasicEbaWithDescriptor()
1:3bece4b:         throws Exception
1:3bece4b:     {
1:3bece4b:         File testPom = new File( getBasedir(),
1:3bece4b:                                  "target/test-classes/unit/basic-eba-with-descriptor/plugin-config.xml" );
1:3bece4b: 
1:3bece4b:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1:3bece4b: 
1:3bece4b:         assertNotNull( mojo );
1:3bece4b: 
1:3bece4b:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:3bece4b: 
1:3bece4b:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:3bece4b: 
1:3bece4b:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:3bece4b: 
1:3bece4b:         mojo.execute();
1:3bece4b: 
1:3bece4b:         //check the generated eba file
1:3bece4b:         File ebaFile = new File( outputDir, finalName + ".eba" );
1:3bece4b: 
1:3bece4b:         assertTrue( ebaFile.exists() );
1:3bece4b: 
1:3bece4b:         //expected files/directories inside the eba file
1:a5742c5:         List expectedFiles = new ArrayList();
1:3bece4b: 
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/" );
1:e1f2a07: //        expectedFiles.add( "META-INF/MANIFEST.MF" );
1:0ed9b09:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:3bece4b:         expectedFiles.add( "META-INF/" );
1:3bece4b:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:3bece4b:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:3bece4b: 
1:3bece4b:         ZipFile eba = new ZipFile( ebaFile );
1:3bece4b: 
1:3bece4b:         Enumeration entries = eba.getEntries();
1:3bece4b: 
1:e1f2a07:         assertTrue( entries.hasMoreElements() );
1:3bece4b: 
1:3bece4b:         assertTrue( entries.hasMoreElements() );
1:3bece4b: 
1:e1f2a07:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:e1f2a07:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:3bece4b:     }
1:3bece4b: 
1:3bece4b:     public void testBasicEbaWithManifest()
1:3bece4b:         throws Exception
1:3bece4b:     {
1:3bece4b:         File testPom = new File( getBasedir(),
1:3bece4b:                                  "target/test-classes/unit/basic-eba-with-manifest/plugin-config.xml" );
1:3bece4b: 
1:3bece4b:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1:3bece4b: 
1:3bece4b:         assertNotNull( mojo );
1:3bece4b: 
1:3bece4b:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:3bece4b: 
1:3bece4b:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:3bece4b: 
1:3bece4b:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:3bece4b: 
1:3bece4b:         mojo.execute();
1:3bece4b: 
1:3bece4b: 
1:3bece4b:         //check the generated eba file
1:3bece4b:         File ebaFile = new File( outputDir, finalName + ".eba" );
1:3bece4b: 
1:3bece4b:         assertTrue( ebaFile.exists() );
1:3bece4b: 
1:3bece4b:         //expected files/directories inside the eba file
1:a5742c5:         List expectedFiles = new ArrayList();
1:3bece4b: 
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:3bece4b:         expectedFiles.add( "META-INF/maven/" );
3:3bece4b:         expectedFiles.add( "META-INF/MANIFEST.MF" );
1:0ed9b09:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:3bece4b:         expectedFiles.add( "META-INF/" );
1:3bece4b:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:3bece4b:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:3bece4b: 
1:3bece4b:         ZipFile eba = new ZipFile( ebaFile );
1:3bece4b: 
1:3bece4b:         Enumeration entries = eba.getEntries();
1:3bece4b: 
1:3bece4b:         assertTrue( entries.hasMoreElements() );
1:3bece4b: 
1:e1f2a07:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:e1f2a07:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:3bece4b:     }
1:3bece4b: 
1:a68eb1d:     public void testApplicationManifestGeneration()
1:a68eb1d:         throws Exception
1:a68eb1d:     {
1:a68eb1d:         File testPom = new File( getBasedir(),
1:a68eb1d:                                  "target/test-classes/unit/basic-eba-without-manifest/plugin-config.xml" );
1:a68eb1d: 
1:a68eb1d:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1:a68eb1d: 
1:a68eb1d:         assertNotNull( mojo );
1:a68eb1d: 
1:a68eb1d:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:a68eb1d: 
1:a68eb1d:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:a68eb1d: 
1:a68eb1d:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:a68eb1d: 
1:a68eb1d:         mojo.execute();
1:a68eb1d: 
1:a68eb1d: 
1:a68eb1d:         //check the generated eba file
1:a68eb1d:         File ebaFile = new File( outputDir, finalName + ".eba" );
1:a68eb1d: 
1:a68eb1d:         assertTrue( ebaFile.exists() );
1:a68eb1d: 
1:a68eb1d:         //expected files/directories inside the eba file
1:a68eb1d:         List expectedFiles = new ArrayList();
1:a68eb1d: 
1:a68eb1d:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:a68eb1d:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:a68eb1d:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:a68eb1d:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:a68eb1d:         expectedFiles.add( "META-INF/maven/" );
1:a68eb1d:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:a68eb1d:         expectedFiles.add( "META-INF/" );
1:a68eb1d:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:a68eb1d:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:a68eb1d: 
1:a68eb1d:         ZipFile eba = new ZipFile( ebaFile );
1:a68eb1d: 
1:a68eb1d:         Enumeration entries = eba.getEntries();
1:a68eb1d: 
1:a68eb1d:         assertTrue( entries.hasMoreElements() );
1:a68eb1d: 
1:a68eb1d:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:a68eb1d:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:a68eb1d: 
1:a68eb1d: 	//Test Application-ImportService Application-ExportService and Use-Bundle inclusion
1:a68eb1d:         ZipEntry entry = eba.getEntry("META-INF/APPLICATION.MF");
1:a68eb1d:         BufferedReader br = new BufferedReader(new InputStreamReader(eba.getInputStream(entry)));
1:a68eb1d: 
1:a68eb1d:         String appServiceExport = new String("Application-ExportService: test.ExportService");
1:a68eb1d:         String appServiceImport = new String("Application-ImportService: test.ImportService");
1:a68eb1d:         String useBundle = new String("Use-Bundle: org.apache.aries.test.Bundle;version=1.0.0-SNAPSHOT");
1:a68eb1d:         Boolean foundAppExport=false;
1:a68eb1d:         Boolean foundAppImport=false;
1:a68eb1d:         Boolean foundUseBundle=false;
1:a68eb1d:         
1:a68eb1d:         String line;
1:a68eb1d:         while ((line = br.readLine()) != null) {
1:a68eb1d:         	if (line.contains(new String("Application-ExportService"))) {
1:a68eb1d:         		assertEquals(appServiceExport, line);
1:a68eb1d:         		foundAppExport = true;
1:a68eb1d:         	}
1:a68eb1d:         	if (line.contains(new String("Application-ImportService"))) {
1:a68eb1d:         		assertEquals(appServiceImport, line);
1:a68eb1d:         		foundAppImport = true;
1:a68eb1d:         	}
1:a68eb1d:         	if (line.contains(new String("Use-Bundle"))) {
1:a68eb1d:         		assertEquals(useBundle, line);
1:a68eb1d:         		foundUseBundle = true;
1:a68eb1d:         	}
1:a68eb1d: 		}
1:a68eb1d:         assertTrue("Found Application-ExportService:", foundAppExport);
1:a68eb1d:         assertTrue("Found Application-ImportService:", foundAppImport);
1:a68eb1d:         assertTrue("Found Use-Bundle:", foundUseBundle);
1:a68eb1d:     }
1:9e91704: 
1:a68eb1d: 
1:9e91704:     public void testArchiveContentConfigurationNoBundles()
1:9e91704:         throws Exception
1:9e91704:     {
1:9e91704:         File testPom = new File( getBasedir(),
1:9e91704:                                  "target/test-classes/unit/basic-eba-no-bundles/plugin-config.xml" );
1:9e91704: 
1:9e91704:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1:9e91704: 
1:9e91704:         assertNotNull( mojo );
1:9e91704: 
1:9e91704:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:9e91704: 
1:9e91704:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:9e91704: 
1:9e91704:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:9e91704: 
1:9e91704:         mojo.execute();
1:9e91704: 
1:9e91704: 
1:9e91704:         //check the generated eba file
1:9e91704:         File ebaFile = new File( outputDir, finalName + ".eba" );
1:9e91704: 
1:9e91704:         assertTrue( ebaFile.exists() );
1:9e91704: 
1:9e91704:         //expected files/directories inside the eba file
1:9e91704:         List expectedFiles = new ArrayList();
1:9e91704: 
1:9e91704:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:9e91704:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:9e91704:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:9e91704:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:9e91704:         expectedFiles.add( "META-INF/maven/" );
1:9e91704:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:9e91704:         expectedFiles.add( "META-INF/" );
1:9e91704: 
1:9e91704:         ZipFile eba = new ZipFile( ebaFile );
1:9e91704: 
1:9e91704:         Enumeration entries = eba.getEntries();
1:9e91704: 
1:9e91704:         assertTrue( entries.hasMoreElements() );
1:9e91704: 
1:9e91704:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:9e91704:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9e91704: 
1:9e91704:     }
1:9e91704: 
1:9e91704:     public void testArchiveContentConfigurationApplicationContentBundles()
1:9e91704:         throws Exception
1:9e91704:     {
1:9e91704:         File testPom = new File( getBasedir(),
1:9e91704:                                  "target/test-classes/unit/basic-eba-content-bundles-only/plugin-config.xml" );
1:9e91704: 
1:9e91704:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1:9e91704: 
1:9e91704:         assertNotNull( mojo );
1:9e91704: 
1:9e91704:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:9e91704: 
1:9e91704:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:9e91704: 
1:9e91704:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:9e91704: 
1:9e91704:         mojo.execute();
1:9e91704: 
1:9e91704: 
1:9e91704:         //check the generated eba file
1:9e91704:         File ebaFile = new File( outputDir, finalName + ".eba" );
1:9e91704: 
1:9e91704:         assertTrue( ebaFile.exists() );
1:9e91704: 
1:9e91704:         //expected files/directories inside the eba file
1:9e91704:         List expectedFiles = new ArrayList();
1:9e91704: 
1:9e91704:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:9e91704:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:9e91704:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:9e91704:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:9e91704:         expectedFiles.add( "META-INF/maven/" );
1:9e91704:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:9e91704:         expectedFiles.add( "META-INF/" );
1:9e91704:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:9e91704:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:9e91704: 
1:9e91704:         ZipFile eba = new ZipFile( ebaFile );
1:9e91704: 
1:9e91704:         Enumeration entries = eba.getEntries();
1:9e91704: 
1:9e91704:         assertTrue( entries.hasMoreElements() );
1:9e91704: 
1:9e91704:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:9e91704:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:9e91704: 
1:9e91704:     }
1:9e91704: 
1:b95d944:     public void testArchiveContentConfigurationAllBundles()
1:b95d944:         throws Exception
1:b95d944:     {
1:b95d944:         File testPom = new File( getBasedir(),
1:b95d944:                                  "target/test-classes/unit/basic-eba-all-bundles/plugin-config.xml" );
1:b95d944: 
1:b95d944:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1:b95d944: 
1:b95d944:         assertNotNull( mojo );
1:b95d944: 
1:b95d944:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1:b95d944: 
1:b95d944:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1:b95d944: 
1:b95d944:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1:b95d944: 
1:b95d944:         mojo.execute();
1:b95d944: 
1:b95d944: 
1:b95d944:         //check the generated eba file
1:b95d944:         File ebaFile = new File( outputDir, finalName + ".eba" );
1:b95d944: 
1:b95d944:         assertTrue( ebaFile.exists() );
1:3bece4b: 
1:b95d944:         //expected files/directories inside the eba file
1:b95d944:         List expectedFiles = new ArrayList();
1:3bece4b: 
1:b95d944:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:b95d944:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:b95d944:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:b95d944:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:b95d944:         expectedFiles.add( "META-INF/maven/" );
1:b95d944:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:b95d944:         expectedFiles.add( "META-INF/" );
1:b95d944:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:b95d944:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:b95d944:         expectedFiles.add( "maven-artifact03-1.0-SNAPSHOT.jar" );
1:b95d944: 
1:b95d944:         ZipFile eba = new ZipFile( ebaFile );
1:b95d944: 
1:b95d944:         Enumeration entries = eba.getEntries();
1:b95d944: 
1:b95d944:         assertTrue( entries.hasMoreElements() );
1:b95d944: 
1:b95d944:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:b95d944:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1:3bece4b: 
1:b95d944:     }
1:3bece4b: 
1:3bece4b:     private int getSizeOfExpectedFiles( Enumeration entries, List expectedFiles )
1:3bece4b:     {
1:3bece4b:         while( entries.hasMoreElements() )
1:3bece4b:         {
1:3bece4b:             ZipEntry entry = ( ZipEntry ) entries.nextElement();
1:3bece4b: 
1:3bece4b:             if( expectedFiles.contains( entry.getName() ) )
1:3bece4b:             {
1:3bece4b:                 expectedFiles.remove( entry.getName() );
1:3bece4b:                 assertFalse( expectedFiles.contains( entry.getName() ) );
1:3bece4b:             }
4:3bece4b:             else
1:3bece4b:             {
1:3bece4b:                 fail( entry.getName() + " is not included in the expected files" );
1:3bece4b:             }
1:3bece4b:         }
2:3bece4b:         return expectedFiles.size();
1:3bece4b:     }
1:3bece4b: 
1:3bece4b: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:b95d944
/////////////////////////////////////////////////////////////////////////
1:     public void testArchiveContentConfigurationAllBundles()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-eba-all-bundles/plugin-config.xml" );
1: 
1:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated eba file
1:         File ebaFile = new File( outputDir, finalName + ".eba" );
1: 
1:         assertTrue( ebaFile.exists() );
1: 
1:         //expected files/directories inside the eba file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact03-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile eba = new ZipFile( ebaFile );
1: 
1:         Enumeration entries = eba.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
1:     }
1: 
commit:9e91704
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testArchiveContentConfigurationNoBundles()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-eba-no-bundles/plugin-config.xml" );
1: 
1:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated eba file
1:         File ebaFile = new File( outputDir, finalName + ".eba" );
1: 
1:         assertTrue( ebaFile.exists() );
1: 
1:         //expected files/directories inside the eba file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:         expectedFiles.add( "META-INF/" );
1: 
1:         ZipFile eba = new ZipFile( ebaFile );
1: 
1:         Enumeration entries = eba.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
1:     }
1: 
1:     public void testArchiveContentConfigurationApplicationContentBundles()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-eba-content-bundles-only/plugin-config.xml" );
1: 
1:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated eba file
1:         File ebaFile = new File( outputDir, finalName + ".eba" );
1: 
1:         assertTrue( ebaFile.exists() );
1: 
1:         //expected files/directories inside the eba file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile eba = new ZipFile( ebaFile );
1: 
1:         Enumeration entries = eba.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
1:     }
1: 
commit:a68eb1d
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
/////////////////////////////////////////////////////////////////////////
1:     public void testApplicationManifestGeneration()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-eba-without-manifest/plugin-config.xml" );
1: 
1:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
1: 
1:         //check the generated eba file
1:         File ebaFile = new File( outputDir, finalName + ".eba" );
1: 
1:         assertTrue( ebaFile.exists() );
1: 
1:         //expected files/directories inside the eba file
1:         List expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/APPLICATION.MF" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile eba = new ZipFile( ebaFile );
1: 
1:         Enumeration entries = eba.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
1: 
1: 	//Test Application-ImportService Application-ExportService and Use-Bundle inclusion
1:         ZipEntry entry = eba.getEntry("META-INF/APPLICATION.MF");
1:         BufferedReader br = new BufferedReader(new InputStreamReader(eba.getInputStream(entry)));
1: 
1:         String appServiceExport = new String("Application-ExportService: test.ExportService");
1:         String appServiceImport = new String("Application-ImportService: test.ImportService");
1:         String useBundle = new String("Use-Bundle: org.apache.aries.test.Bundle;version=1.0.0-SNAPSHOT");
1:         Boolean foundAppExport=false;
1:         Boolean foundAppImport=false;
1:         Boolean foundUseBundle=false;
1:         
1:         String line;
1:         while ((line = br.readLine()) != null) {
1:         	if (line.contains(new String("Application-ExportService"))) {
1:         		assertEquals(appServiceExport, line);
1:         		foundAppExport = true;
1:         	}
1:         	if (line.contains(new String("Application-ImportService"))) {
1:         		assertEquals(appServiceImport, line);
1:         		foundAppImport = true;
1:         	}
1:         	if (line.contains(new String("Use-Bundle"))) {
1:         		assertEquals(useBundle, line);
1:         		foundUseBundle = true;
1:         	}
1: 		}
1:         assertTrue("Found Application-ExportService:", foundAppExport);
1:         assertTrue("Found Application-ImportService:", foundAppImport);
1:         assertTrue("Found Use-Bundle:", foundUseBundle);
1:     }
1: 
commit:3b91bb3
commit:3ef076f
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:0ed9b09
/////////////////////////////////////////////////////////////////////////
1:         expectedFiles.add( "META-INF/APPLICATION.MF" );
/////////////////////////////////////////////////////////////////////////
1:         expectedFiles.add( "META-INF/APPLICATION.MF" );
author:David Jencks
-------------------------------------------------------------------------------
commit:1705c08
commit:e1f2a07
/////////////////////////////////////////////////////////////////////////
1: //        expectedFiles.add( "META-INF/MANIFEST.MF" );
/////////////////////////////////////////////////////////////////////////
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
/////////////////////////////////////////////////////////////////////////
1: //        expectedFiles.add( "META-INF/MANIFEST.MF" );
/////////////////////////////////////////////////////////////////////////
1:         assertTrue( entries.hasMoreElements() );
1: 
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
/////////////////////////////////////////////////////////////////////////
1:         int missing = getSizeOfExpectedFiles(entries, expectedFiles);
1:         assertEquals("Missing files: " + expectedFiles,  0, missing);
/////////////////////////////////////////////////////////////////////////
commit:a5742c5
/////////////////////////////////////////////////////////////////////////
1:         List expectedFiles = new ArrayList();
/////////////////////////////////////////////////////////////////////////
1:         List expectedFiles = new ArrayList();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         List expectedFiles = new ArrayList();
commit:3bece4b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.plugin.eba;
1: 
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
1: import java.util.Iterator;
1: 
1: import org.apache.maven.plugin.testing.AbstractMojoTestCase;
1: import org.codehaus.plexus.archiver.zip.ZipEntry;
1: import org.codehaus.plexus.archiver.zip.ZipFile;
1: import org.codehaus.plexus.util.FileUtils;
1: 
1: /**
1:  * @author <a href="mailto:aramirez@apache.org">Allan Ramirez</a>
1:  */
1: public class EbaMojoTest
1:     extends AbstractMojoTestCase
1: {
1:     public void testEbaTestEnvironment()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-eba-test/plugin-config.xml" );
1: 
1:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1: 
1:         assertNotNull( mojo );
1:     }
1: 
1:     public void testBasicEba()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-eba-test/plugin-config.xml" );
1: 
1:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         Boolean includeJar = ( Boolean ) getVariableValueFromObject(  mojo, "includeJar" );
1: 
1:         assertTrue( includeJar.booleanValue() );
1: 
1:         //include the project jar to the eba
1:         File projectJar = new File( getBasedir(), "src/test/resources/unit/basic-eba-test/target/test-eba.jar" );
1: 
1:         FileUtils.copyFileToDirectory( projectJar, new File( outputDir ) );
1: 
1:         mojo.execute();
1: 
0:         //check the working directory
0:         File workDirectory = new File( workDir );
1: 
0:         assertTrue( workDirectory.exists() );
1: 
0:         assertTrue( workDirectory.isDirectory() );
1: 
0:         File[] fileNames = workDirectory.listFiles();
1: 
0:         List expectedFiles = new ArrayList();
1:         
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "test-eba.jar" );
1:         
0:         assertEquals( "Files in working directory", expectedFiles.size(), fileNames.length );
1: 
1:         
0:         for( int i=0; i<fileNames.length; i++ )
1:         {
0:             String fileName = fileNames[i].getName();
1:             
0:             assertTrue( expectedFiles.contains( fileName ) );
1:             
0:             if( expectedFiles.contains( fileName ) )
1:             {
0:                 expectedFiles.remove( fileName );
0:                 assertFalse( expectedFiles.contains( fileName ) );
1:             }
1:             else
1:             {
0:                 fail( fileName + " is not included in expected files." );
1:             }
1:         }
1: 
0:         assertEquals( 0, expectedFiles.size() );
1: 
1:         //check the generated eba file
1:         File ebaFile = new File( outputDir, finalName + ".eba" );
1: 
1:         assertTrue( ebaFile.exists() );
1: 
1:         //expected files/directories inside the eba file
0:         expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/MANIFEST.MF" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "test-eba.jar" );
1: 
1:         ZipFile eba = new ZipFile( ebaFile );
1: 
1:         Enumeration entries = eba.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
0:         assertEquals( 0, getSizeOfExpectedFiles( entries, expectedFiles ) );
1:     }
1: 
1:     public void testBasicEbaWithDescriptor()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-eba-with-descriptor/plugin-config.xml" );
1: 
1:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
0:         //check the working directory
0:         File workDirectory = new File( workDir );
1: 
0:         assertTrue( workDirectory.exists() );
1: 
0:         assertTrue( workDirectory.isDirectory() );
1: 
0:         File[] fileNames = workDirectory.listFiles();
1: 
0:         List expectedFiles = new ArrayList();
0:         List fileList = new ArrayList();
1: 
0:         for( int i=0; i<fileNames.length; i++ )
1:         {
0:             addFileToList( fileNames[i], fileList );
1:         }
1: 
0:         expectedFiles.add( "application.mf" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
0:         expectedFiles.add( "META-INF" );
1: 
0:         assertEquals( expectedFiles.size(), fileList.size() );
1: 
0:         assertEquals( 0, getSizeOfExpectedFiles( fileList, expectedFiles ) );
1: 
1:         //check the generated eba file
1:         File ebaFile = new File( outputDir, finalName + ".eba" );
1: 
1:         assertTrue( ebaFile.exists() );
1: 
1:         //expected files/directories inside the eba file
0:         expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/MANIFEST.MF" );
0:         expectedFiles.add( "META-INF/application.mf" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile eba = new ZipFile( ebaFile );
1: 
1:         Enumeration entries = eba.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
0:         assertEquals( 0, getSizeOfExpectedFiles( entries, expectedFiles ) );
1:     }
1: 
1:     public void testBasicEbaWithManifest()
1:         throws Exception
1:     {
1:         File testPom = new File( getBasedir(),
1:                                  "target/test-classes/unit/basic-eba-with-manifest/plugin-config.xml" );
1: 
1:         EbaMojo mojo = ( EbaMojo ) lookupMojo( "eba", testPom );
1: 
1:         assertNotNull( mojo );
1: 
1:         String finalName = ( String ) getVariableValueFromObject( mojo, "finalName" );
1: 
1:         String workDir = ( String ) getVariableValueFromObject( mojo, "workDirectory" );
1: 
1:         String outputDir = ( String ) getVariableValueFromObject( mojo, "outputDirectory" );
1: 
1:         mojo.execute();
1: 
0:         //check the working directory
0:         File workDirectory = new File( workDir );
1: 
0:         assertTrue( workDirectory.exists() );
1: 
0:         assertTrue( workDirectory.isDirectory() );
1: 
0:         File[] fileNames = workDirectory.listFiles();
1: 
0:         List expectedFiles = new ArrayList();
0:         List fileList = new ArrayList();
1: 
0:         for( int i=0; i<fileNames.length; i++ )
1:         {
0:             addFileToList( fileNames[i], fileList );
1:         }
1: 
0:         expectedFiles.add( "application.mf" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
0:         expectedFiles.add( "META-INF" );
0:         expectedFiles.add( "MANIFEST.MF" );
1: 
0:         assertEquals( expectedFiles.size(), fileList.size() );
1: 
0:         assertEquals( 0, getSizeOfExpectedFiles( fileList, expectedFiles ) );
1: 
1:         //check the generated eba file
1:         File ebaFile = new File( outputDir, finalName + ".eba" );
1: 
1:         assertTrue( ebaFile.exists() );
1: 
1:         //expected files/directories inside the eba file
0:         expectedFiles = new ArrayList();
1: 
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.properties" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/pom.xml" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/maven-eba-test/" );
1:         expectedFiles.add( "META-INF/maven/org.apache.maven.test/" );
1:         expectedFiles.add( "META-INF/maven/" );
1:         expectedFiles.add( "META-INF/MANIFEST.MF" );
0:         expectedFiles.add( "META-INF/application.mf" );
1:         expectedFiles.add( "META-INF/" );
1:         expectedFiles.add( "maven-artifact01-1.0-SNAPSHOT.jar" );
1:         expectedFiles.add( "maven-artifact02-1.0-SNAPSHOT.jar" );
1: 
1:         ZipFile eba = new ZipFile( ebaFile );
1: 
1:         Enumeration entries = eba.getEntries();
1: 
1:         assertTrue( entries.hasMoreElements() );
1: 
0:         assertEquals( 0, getSizeOfExpectedFiles( entries, expectedFiles ) );
1:     }
1: 
1:     private int getSizeOfExpectedFiles( Enumeration entries, List expectedFiles )
1:     {
1:         while( entries.hasMoreElements() )
1:         {
1:             ZipEntry entry = ( ZipEntry ) entries.nextElement();
1: 
1:             if( expectedFiles.contains( entry.getName() ) )
1:             {
1:                 expectedFiles.remove( entry.getName() );
1:                 assertFalse( expectedFiles.contains( entry.getName() ) );
1:             }
1:             else
1:             {
1:                 fail( entry.getName() + " is not included in the expected files" );
1:             }
1:         }
1:         return expectedFiles.size();
1:     }
1: 
0:     private int getSizeOfExpectedFiles( List fileList, List expectedFiles )
1:     {
0:         for( Iterator iter=fileList.iterator(); iter.hasNext(); )
1:         {
0:             String fileName = ( String ) iter.next();
1: 
0:             if( expectedFiles.contains(  fileName ) )
1:             {
0:                 expectedFiles.remove( fileName );
0:                 assertFalse( expectedFiles.contains( fileName ) );
1:             }
1:             else
1:             {
0:                 fail( fileName + " is not included in the expected files" );
1:             }
1:         }
1:         return expectedFiles.size();
1:     }
1: 
0:     private void addFileToList( File file, List fileList )
1:     {
0:         if( !file.isDirectory() )
1:         {
0:             fileList.add( file.getName() );
1:         }
1:         else
1:         {
0:             fileList.add( file.getName() );
1: 
0:             File[] files = file.listFiles();
1: 
0:             for( int i=0; i<files.length; i++ )
1:             {
0:                 addFileToList( files[i], fileList );
1:             }
1:         }
1:     }
1: }
============================================================================