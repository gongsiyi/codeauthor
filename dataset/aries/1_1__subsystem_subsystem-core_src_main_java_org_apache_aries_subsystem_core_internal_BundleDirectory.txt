1:5f81379: /*
1:5f81379:  * Licensed under the Apache License, Version 2.0 (the "License");
1:5f81379:  * you may not use this file except in compliance with the License.
1:5f81379:  * You may obtain a copy of the License at
1:5f81379:  *
1:5f81379:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f81379:  *
1:5f81379:  * Unless required by applicable law or agreed to in writing, software
1:5f81379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f81379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f81379:  * See the License for the specific language governing permissions and
1:5f81379:  * limitations under the License.
1:5f81379:  */
1:5f81379: package org.apache.aries.subsystem.core.internal;
1:5f81379: 
1:5f81379: import java.io.IOException;
1:5f81379: import java.io.InputStream;
1:5f81379: import java.net.MalformedURLException;
1:5f81379: import java.net.URL;
1:5f81379: import java.util.ArrayList;
1:5f81379: import java.util.Collections;
1:5f81379: import java.util.Enumeration;
1:5f81379: import java.util.Iterator;
1:5f81379: import java.util.List;
1:5f81379: 
1:5f81379: import org.apache.aries.util.filesystem.FileSystem;
1:5f81379: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:5f81379: import org.apache.aries.util.filesystem.IDirectory;
1:5f81379: import org.apache.aries.util.filesystem.IFile;
1:5f81379: import org.osgi.framework.Bundle;
1:5f81379: import org.osgi.service.subsystem.SubsystemException;
1:5f81379: 
1:5f81379: public class BundleDirectory implements IDirectory {
1:5f81379: 	private static class BundleFile implements IFile {
1:5f81379: 		private final BundleDirectory directory;
1:5f81379: 		private final String name;
1:5f81379: 		private final URL url;
1:5f81379: 		
1:5f81379: 		public BundleFile(String name, URL url, BundleDirectory directory) {
1:5f81379: 			this.name = name;
1:5f81379: 			this.url = url;
1:5f81379: 			this.directory = directory;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public IDirectory convert() {
1:5f81379: 			return null;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public IDirectory convertNested() {
1:5f81379: 			try {
1:5f81379: 				return FileSystem.getFSRoot(url.openStream());
1:5f81379: 			}
1:5f81379: 			catch (IOException e) {
1:5f81379: 				throw new SubsystemException(e);
1:5f81379: 			}
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public long getLastModified() {
1:5f81379: 			return 0;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public String getName() {
1:5f81379: 			if (name.startsWith("/"))
1:5f81379: 				return name.substring(1);
1:5f81379: 			return name;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public IDirectory getParent() {
1:5f81379: 			return directory;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public IDirectory getRoot() {
1:5f81379: 			return directory;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public long getSize() {
1:5f81379: 			return 0;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public boolean isDirectory() {
1:5f81379: 			return false;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public boolean isFile() {
1:5f81379: 			return true;
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public InputStream open() throws IOException,
1:5f81379: 		UnsupportedOperationException {
1:5f81379: 			return url.openStream();
1:5f81379: 		}
1:5f81379: 
1:5f81379: 		@Override
1:5f81379: 		public URL toURL() throws MalformedURLException {
1:5f81379: 			return url;
1:5f81379: 		}
1:5f81379: 	}
1:5f81379: 	
1:5f81379: 	private final Bundle bundle;
1:5f81379: 	
1:5f81379: 	public BundleDirectory(Bundle bundle) {
1:5f81379: 		if (bundle == null)
1:5f81379: 			throw new NullPointerException();
1:5f81379: 		this.bundle = bundle;
1:5f81379: 	}
1:5f81379: 	
1:5f81379: 	@Override
1:5f81379: 	public Iterator<IFile> iterator() {
1:5f81379: 		return listAllFiles().iterator();
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public IDirectory convert() {
1:5f81379: 		return this;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public IDirectory convertNested() {
1:5f81379: 		return this;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public long getLastModified() {
1:5f81379: 		return 0;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public String getName() {
1:5f81379: 		return "";
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public IDirectory getParent() {
1:5f81379: 		return null;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public IDirectory getRoot() {
1:5f81379: 		return this;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public long getSize() {
1:5f81379: 		return 0;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public boolean isDirectory() {
1:5f81379: 		return true;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public boolean isFile() {
1:5f81379: 		return false;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public InputStream open() throws IOException, UnsupportedOperationException {
1:5f81379: 		throw new UnsupportedOperationException();
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public URL toURL() throws MalformedURLException {
1:5f81379: 		return bundle.getEntry("/");
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public IFile getFile(final String name) {
1:5f81379: 		if (name == null || name.length() == 0)
1:5f81379: 			return null;
1:5f81379: 		if ("/".equals(name))
1:5f81379: 			return this;
1:5f81379: 		URL entry = bundle.getEntry(name);
1:5f81379: 		if (entry == null)
1:5f81379: 			return null;
1:5f81379: 		return new BundleFile(name, entry, this);
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public boolean isRoot() {
1:5f81379: 		return true;
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public List<IFile> listAllFiles() {
1:5f81379: 		return listFiles(true);
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public List<IFile> listFiles() {
1:5f81379: 		return listFiles(false);
1:5f81379: 	}
1:5f81379: 
1:5f81379: 	@Override
1:5f81379: 	public ICloseableDirectory toCloseable() {
1:5f81379: 		return null;
1:5f81379: 	}
1:5f81379: 	
1:5f81379: 	private List<IFile> listFiles(boolean recurse) {
1:5f81379: 		Enumeration<URL> entries = bundle.findEntries("/", null, recurse);
1:5f81379: 		if (entries == null)
1:5f81379: 			return Collections.emptyList();
1:5f81379: 		ArrayList<IFile> files = new ArrayList<IFile>();
1:5f81379: 		while (entries.hasMoreElements()) {
1:5f81379: 			URL entry = entries.nextElement();
1:5f81379: 			if (entry.getPath().endsWith("/"))
1:5f81379: 				continue;
1:5f81379: 			files.add(new BundleFile(entry.getPath(), entry, this));
1:5f81379: 		}
1:5f81379: 		files.trimToSize();
1:5f81379: 		return files;
1:5f81379: 	}
1:5f81379: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:5f81379
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Enumeration;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class BundleDirectory implements IDirectory {
1: 	private static class BundleFile implements IFile {
1: 		private final BundleDirectory directory;
1: 		private final String name;
1: 		private final URL url;
1: 		
1: 		public BundleFile(String name, URL url, BundleDirectory directory) {
1: 			this.name = name;
1: 			this.url = url;
1: 			this.directory = directory;
1: 		}
1: 
1: 		@Override
1: 		public IDirectory convert() {
1: 			return null;
1: 		}
1: 
1: 		@Override
1: 		public IDirectory convertNested() {
1: 			try {
1: 				return FileSystem.getFSRoot(url.openStream());
1: 			}
1: 			catch (IOException e) {
1: 				throw new SubsystemException(e);
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public long getLastModified() {
1: 			return 0;
1: 		}
1: 
1: 		@Override
1: 		public String getName() {
1: 			if (name.startsWith("/"))
1: 				return name.substring(1);
1: 			return name;
1: 		}
1: 
1: 		@Override
1: 		public IDirectory getParent() {
1: 			return directory;
1: 		}
1: 
1: 		@Override
1: 		public IDirectory getRoot() {
1: 			return directory;
1: 		}
1: 
1: 		@Override
1: 		public long getSize() {
1: 			return 0;
1: 		}
1: 
1: 		@Override
1: 		public boolean isDirectory() {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		public boolean isFile() {
1: 			return true;
1: 		}
1: 
1: 		@Override
1: 		public InputStream open() throws IOException,
1: 		UnsupportedOperationException {
1: 			return url.openStream();
1: 		}
1: 
1: 		@Override
1: 		public URL toURL() throws MalformedURLException {
1: 			return url;
1: 		}
1: 	}
1: 	
1: 	private final Bundle bundle;
1: 	
1: 	public BundleDirectory(Bundle bundle) {
1: 		if (bundle == null)
1: 			throw new NullPointerException();
1: 		this.bundle = bundle;
1: 	}
1: 	
1: 	@Override
1: 	public Iterator<IFile> iterator() {
1: 		return listAllFiles().iterator();
1: 	}
1: 
1: 	@Override
1: 	public IDirectory convert() {
1: 		return this;
1: 	}
1: 
1: 	@Override
1: 	public IDirectory convertNested() {
1: 		return this;
1: 	}
1: 
1: 	@Override
1: 	public long getLastModified() {
1: 		return 0;
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return "";
1: 	}
1: 
1: 	@Override
1: 	public IDirectory getParent() {
1: 		return null;
1: 	}
1: 
1: 	@Override
1: 	public IDirectory getRoot() {
1: 		return this;
1: 	}
1: 
1: 	@Override
1: 	public long getSize() {
1: 		return 0;
1: 	}
1: 
1: 	@Override
1: 	public boolean isDirectory() {
1: 		return true;
1: 	}
1: 
1: 	@Override
1: 	public boolean isFile() {
1: 		return false;
1: 	}
1: 
1: 	@Override
1: 	public InputStream open() throws IOException, UnsupportedOperationException {
1: 		throw new UnsupportedOperationException();
1: 	}
1: 
1: 	@Override
1: 	public URL toURL() throws MalformedURLException {
1: 		return bundle.getEntry("/");
1: 	}
1: 
1: 	@Override
1: 	public IFile getFile(final String name) {
1: 		if (name == null || name.length() == 0)
1: 			return null;
1: 		if ("/".equals(name))
1: 			return this;
1: 		URL entry = bundle.getEntry(name);
1: 		if (entry == null)
1: 			return null;
1: 		return new BundleFile(name, entry, this);
1: 	}
1: 
1: 	@Override
1: 	public boolean isRoot() {
1: 		return true;
1: 	}
1: 
1: 	@Override
1: 	public List<IFile> listAllFiles() {
1: 		return listFiles(true);
1: 	}
1: 
1: 	@Override
1: 	public List<IFile> listFiles() {
1: 		return listFiles(false);
1: 	}
1: 
1: 	@Override
1: 	public ICloseableDirectory toCloseable() {
1: 		return null;
1: 	}
1: 	
1: 	private List<IFile> listFiles(boolean recurse) {
1: 		Enumeration<URL> entries = bundle.findEntries("/", null, recurse);
1: 		if (entries == null)
1: 			return Collections.emptyList();
1: 		ArrayList<IFile> files = new ArrayList<IFile>();
1: 		while (entries.hasMoreElements()) {
1: 			URL entry = entries.nextElement();
1: 			if (entry.getPath().endsWith("/"))
1: 				continue;
1: 			files.add(new BundleFile(entry.getPath(), entry, this));
1: 		}
1: 		files.trimToSize();
1: 		return files;
1: 	}
1: }
============================================================================