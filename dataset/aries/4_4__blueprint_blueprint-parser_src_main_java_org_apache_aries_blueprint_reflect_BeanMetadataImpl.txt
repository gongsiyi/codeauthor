1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.reflect;
2:f13c6ac: 
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Collections;
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:b4fc651: import javax.xml.namespace.QName;
1:b4fc651: 
1:6414875: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1:6414875: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanArgument;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanProperty;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Metadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Target;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Implementation of BeanMetadata
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class BeanMetadataImpl extends ComponentMetadataImpl implements MutableBeanMetadata {
1:f13c6ac: 
1:f13c6ac:     private String className;
1:f13c6ac:     private String initMethod;
1:f13c6ac:     private String destroyMethod;
1:f13c6ac:     private List<BeanArgument> arguments;
1:f13c6ac:     private List<BeanProperty> properties;
1:f13c6ac:     private int initialization;
1:f13c6ac:     private String factoryMethod;
1:f13c6ac:     private Target factoryComponent;
1:b4fc651:     private QName scope;
1:f13c6ac:     private Class runtimeClass;
1:f13c6ac:     private boolean processor;
1:d08aba3:     private boolean fieldInjection;
1:d08aba3:     
1:f13c6ac:     public BeanMetadataImpl() {
1:d08aba3:         this.fieldInjection = false;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public BeanMetadataImpl(BeanMetadata source) {
1:f13c6ac:         super(source);
1:f13c6ac:         this.className = source.getClassName();
1:f13c6ac:         this.initMethod = source.getInitMethod();
1:f13c6ac:         this.destroyMethod = source.getDestroyMethod();
1:f13c6ac:         for (BeanArgument argument : source.getArguments()) {
1:f13c6ac:             addArgument(new BeanArgumentImpl(argument));
1:f13c6ac:         }
1:f13c6ac:         for (BeanProperty property : source.getProperties()) {
1:f13c6ac:             addProperty(new BeanPropertyImpl(property));
1:f13c6ac:         }
1:f13c6ac:         this.initialization = source.getActivation();
1:f13c6ac:         this.factoryMethod = source.getFactoryMethod();
1:f13c6ac:         this.factoryComponent = MetadataUtil.cloneTarget(source.getFactoryComponent());
1:b4fc651:         this.scope = source.getScope() != null ? QName.valueOf(source.getScope()) : null;
1:f13c6ac:         this.dependsOn = new ArrayList<String>(source.getDependsOn());
1:f13c6ac:         if (source instanceof ExtendedBeanMetadata) {
1:f13c6ac:             this.runtimeClass = ((ExtendedBeanMetadata) source).getRuntimeClass();
1:d08aba3:             this.fieldInjection = ((ExtendedBeanMetadata) source).getFieldInjection();
1:d08aba3:         } else {
1:d08aba3:             this.fieldInjection = false;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public String getClassName() {
1:f13c6ac:         return className;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setClassName(String className) {
1:f13c6ac:         this.className = className;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getInitMethod() {
1:f13c6ac:         return initMethod;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setInitMethod(String initMethodName) {
1:f13c6ac:         this.initMethod = initMethodName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getDestroyMethod() {
1:f13c6ac:         return destroyMethod;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setDestroyMethod(String destroyMethodName) {
1:f13c6ac:         this.destroyMethod = destroyMethodName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<BeanArgument> getArguments() {
1:f13c6ac:         if (this.arguments == null) {
1:f13c6ac:             return Collections.emptyList();
1:f13c6ac:         } else {
1:f13c6ac:             return Collections.unmodifiableList(this.arguments);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setArguments(List<BeanArgument> arguments) {
1:f13c6ac:         this.arguments = arguments != null ? new ArrayList<BeanArgument>(arguments) : null;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void addArgument(BeanArgument argument) {
1:f13c6ac:         if (this.arguments == null) {
1:f13c6ac:             this.arguments = new ArrayList<BeanArgument>();
1:f13c6ac:         }
1:f13c6ac:         this.arguments.add(argument);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public BeanArgument addArgument(Metadata value, String valueType, int index) {
1:f13c6ac:         BeanArgument arg = new BeanArgumentImpl(value, valueType, index);
1:f13c6ac:         addArgument(arg);
1:f13c6ac:         return arg;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void removeArgument(BeanArgument argument) {
1:f13c6ac:         if (this.arguments != null) {
1:f13c6ac:             this.arguments.remove(argument);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<BeanProperty> getProperties() {
1:f13c6ac:         if (this.properties == null) {
1:f13c6ac:             return Collections.emptyList();
1:f13c6ac:         } else {
1:f13c6ac:             return Collections.unmodifiableList(this.properties);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setProperties(List<BeanProperty> properties) {
1:f13c6ac:         this.properties = properties != null ? new ArrayList<BeanProperty>(properties) : null;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void addProperty(BeanProperty property) {
1:f13c6ac:         if (this.properties == null) {
1:f13c6ac:             this.properties = new ArrayList<BeanProperty>();
1:f13c6ac:         }
1:f13c6ac:         this.properties.add(property);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public BeanProperty addProperty(String name, Metadata value) {
1:f13c6ac:         BeanProperty prop = new BeanPropertyImpl(name, value);
1:f13c6ac:         addProperty(prop);
1:f13c6ac:         return prop;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void removeProperty(BeanProperty property) {
1:f13c6ac:         if (this.properties != null) {
1:f13c6ac:             this.properties.remove(property);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getFactoryMethod() {
1:f13c6ac:         return this.factoryMethod;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setFactoryMethod(String factoryMethodName) {
1:f13c6ac:         this.factoryMethod = factoryMethodName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Target getFactoryComponent() {
1:f13c6ac:         return this.factoryComponent;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setFactoryComponent(Target factoryComponent) {
1:f13c6ac:         this.factoryComponent = factoryComponent;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getScope() {
1:b4fc651:         return this.scope != null ? this.scope.toString() : null;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setScope(String scope) {
1:b4fc651:         this.scope = scope != null ? QName.valueOf(scope) : null;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Class getRuntimeClass() {
1:f13c6ac:         return this.runtimeClass;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setRuntimeClass(Class runtimeClass) {
1:f13c6ac:         this.runtimeClass = runtimeClass;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean isProcessor() {
1:f13c6ac:         return processor;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setProcessor(boolean processor) {
1:f13c6ac:         this.processor = processor;
1:f13c6ac:     }
1:f13c6ac: 
1:d08aba3:     public boolean getFieldInjection() {
1:d08aba3:         return fieldInjection;
1:d08aba3:     }
1:d08aba3:     
1:d08aba3:     public void setFieldInjection(boolean fieldInjection) {
1:d08aba3:         this.fieldInjection = fieldInjection;
1:d08aba3:     }
1:d08aba3:     
1:f13c6ac:     @Override
1:f13c6ac:     public String toString() {
1:f13c6ac:         return "BeanMetadata[" +
1:f13c6ac:                 "id='" + id + '\'' +
1:f13c6ac:                 ", initialization=" + initialization +
1:f13c6ac:                 ", dependsOn=" + dependsOn +
1:f13c6ac:                 ", className='" + className + '\'' +
1:f13c6ac:                 ", initMethodName='" + initMethod + '\'' +
1:f13c6ac:                 ", destroyMethodName='" + destroyMethod + '\'' +
1:f13c6ac:                 ", arguments=" + arguments +
1:f13c6ac:                 ", properties=" + properties +
1:f13c6ac:                 ", factoryMethodName='" + factoryMethod + '\'' +
1:f13c6ac:                 ", factoryComponent=" + factoryComponent +
1:f13c6ac:                 ", scope='" + scope + '\'' +
1:f13c6ac:                 ", runtimeClass=" + runtimeClass +
1:d08aba3:                 ", fieldInjection=" + fieldInjection + 
1:f13c6ac:                 ']';
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:b4fc651
/////////////////////////////////////////////////////////////////////////
1: import javax.xml.namespace.QName;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private QName scope;
/////////////////////////////////////////////////////////////////////////
1:         this.scope = source.getScope() != null ? QName.valueOf(source.getScope()) : null;
/////////////////////////////////////////////////////////////////////////
1:         return this.scope != null ? this.scope.toString() : null;
1:         this.scope = scope != null ? QName.valueOf(scope) : null;
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
commit:d08aba3
/////////////////////////////////////////////////////////////////////////
1:     private boolean fieldInjection;
1:     
1:         this.fieldInjection = false;
/////////////////////////////////////////////////////////////////////////
1:             this.fieldInjection = ((ExtendedBeanMetadata) source).getFieldInjection();
1:         } else {
1:             this.fieldInjection = false;
/////////////////////////////////////////////////////////////////////////
1:     public boolean getFieldInjection() {
1:         return fieldInjection;
1:     }
1:     
1:     public void setFieldInjection(boolean fieldInjection) {
1:         this.fieldInjection = fieldInjection;
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:                 ", fieldInjection=" + fieldInjection + 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.reflect;
1: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.reflect;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.apache.geronimo.blueprint.ExtendedBeanMetadata;
0: import org.apache.geronimo.blueprint.mutable.MutableBeanMetadata;
1: import org.osgi.service.blueprint.reflect.BeanArgument;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.BeanProperty;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.Target;
1: 
1: /**
1:  * Implementation of BeanMetadata
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 760378 $, $Date: 2009-03-31 11:31:38 +0200 (Tue, 31 Mar 2009) $
1:  */
1: public class BeanMetadataImpl extends ComponentMetadataImpl implements MutableBeanMetadata {
1: 
1:     private String className;
1:     private String initMethod;
1:     private String destroyMethod;
1:     private List<BeanArgument> arguments;
1:     private List<BeanProperty> properties;
1:     private int initialization;
1:     private String factoryMethod;
1:     private Target factoryComponent;
0:     private String scope;
1:     private Class runtimeClass;
1:     private boolean processor;
1: 
1:     public BeanMetadataImpl() {
1:     }
1: 
1:     public BeanMetadataImpl(BeanMetadata source) {
1:         super(source);
1:         this.className = source.getClassName();
1:         this.initMethod = source.getInitMethod();
1:         this.destroyMethod = source.getDestroyMethod();
1:         for (BeanArgument argument : source.getArguments()) {
1:             addArgument(new BeanArgumentImpl(argument));
1:         }
1:         for (BeanProperty property : source.getProperties()) {
1:             addProperty(new BeanPropertyImpl(property));
1:         }
1:         this.initialization = source.getActivation();
1:         this.factoryMethod = source.getFactoryMethod();
1:         this.factoryComponent = MetadataUtil.cloneTarget(source.getFactoryComponent());
0:         this.scope = source.getScope();
1:         this.dependsOn = new ArrayList<String>(source.getDependsOn());
1:         if (source instanceof ExtendedBeanMetadata) {
1:             this.runtimeClass = ((ExtendedBeanMetadata) source).getRuntimeClass();
1:         }
1:     }
1:     
1:     public String getClassName() {
1:         return className;
1:     }
1: 
1:     public void setClassName(String className) {
1:         this.className = className;
1:     }
1: 
1:     public String getInitMethod() {
1:         return initMethod;
1:     }
1: 
1:     public void setInitMethod(String initMethodName) {
1:         this.initMethod = initMethodName;
1:     }
1: 
1:     public String getDestroyMethod() {
1:         return destroyMethod;
1:     }
1: 
1:     public void setDestroyMethod(String destroyMethodName) {
1:         this.destroyMethod = destroyMethodName;
1:     }
1: 
1:     public List<BeanArgument> getArguments() {
1:         if (this.arguments == null) {
1:             return Collections.emptyList();
1:         } else {
1:             return Collections.unmodifiableList(this.arguments);
1:         }
1:     }
1: 
1:     public void setArguments(List<BeanArgument> arguments) {
1:         this.arguments = arguments != null ? new ArrayList<BeanArgument>(arguments) : null;
1:     }
1: 
1:     public void addArgument(BeanArgument argument) {
1:         if (this.arguments == null) {
1:             this.arguments = new ArrayList<BeanArgument>();
1:         }
1:         this.arguments.add(argument);
1:     }
1: 
1:     public BeanArgument addArgument(Metadata value, String valueType, int index) {
1:         BeanArgument arg = new BeanArgumentImpl(value, valueType, index);
1:         addArgument(arg);
1:         return arg;
1:     }
1: 
1:     public void removeArgument(BeanArgument argument) {
1:         if (this.arguments != null) {
1:             this.arguments.remove(argument);
1:         }
1:     }
1: 
1:     public List<BeanProperty> getProperties() {
1:         if (this.properties == null) {
1:             return Collections.emptyList();
1:         } else {
1:             return Collections.unmodifiableList(this.properties);
1:         }
1:     }
1: 
1:     public void setProperties(List<BeanProperty> properties) {
1:         this.properties = properties != null ? new ArrayList<BeanProperty>(properties) : null;
1:     }
1: 
1:     public void addProperty(BeanProperty property) {
1:         if (this.properties == null) {
1:             this.properties = new ArrayList<BeanProperty>();
1:         }
1:         this.properties.add(property);
1:     }
1: 
1:     public BeanProperty addProperty(String name, Metadata value) {
1:         BeanProperty prop = new BeanPropertyImpl(name, value);
1:         addProperty(prop);
1:         return prop;
1:     }
1: 
1:     public void removeProperty(BeanProperty property) {
1:         if (this.properties != null) {
1:             this.properties.remove(property);
1:         }
1:     }
1: 
1:     public String getFactoryMethod() {
1:         return this.factoryMethod;
1:     }
1: 
1:     public void setFactoryMethod(String factoryMethodName) {
1:         this.factoryMethod = factoryMethodName;
1:     }
1: 
1:     public Target getFactoryComponent() {
1:         return this.factoryComponent;
1:     }
1: 
1:     public void setFactoryComponent(Target factoryComponent) {
1:         this.factoryComponent = factoryComponent;
1:     }
1: 
1:     public String getScope() {
0:         return this.scope;
1:     }
1: 
1:     public void setScope(String scope) {
0:         this.scope = scope;
1:     }
1: 
1:     public Class getRuntimeClass() {
1:         return this.runtimeClass;
1:     }
1: 
1:     public void setRuntimeClass(Class runtimeClass) {
1:         this.runtimeClass = runtimeClass;
1:     }
1: 
1:     public boolean isProcessor() {
1:         return processor;
1:     }
1: 
1:     public void setProcessor(boolean processor) {
1:         this.processor = processor;
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "BeanMetadata[" +
1:                 "id='" + id + '\'' +
1:                 ", initialization=" + initialization +
1:                 ", dependsOn=" + dependsOn +
1:                 ", className='" + className + '\'' +
1:                 ", initMethodName='" + initMethod + '\'' +
1:                 ", destroyMethodName='" + destroyMethod + '\'' +
1:                 ", arguments=" + arguments +
1:                 ", properties=" + properties +
1:                 ", factoryMethodName='" + factoryMethod + '\'' +
1:                 ", factoryComponent=" + factoryComponent +
1:                 ", scope='" + scope + '\'' +
1:                 ", runtimeClass=" + runtimeClass +
1:                 ']';
1:     }
1: }
============================================================================