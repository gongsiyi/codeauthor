1:d7c375c: /*
1:d7c375c:  * Licensed to the Apache Software Foundation (ASF) under one
1:d7c375c:  * or more contributor license agreements.  See the NOTICE file
1:d7c375c:  * distributed with this work for additional information
1:d7c375c:  * regarding copyright ownership.  The ASF licenses this file
1:d7c375c:  * to you under the Apache License, Version 2.0 (the
1:d7c375c:  * "License"); you may not use this file except in compliance
1:d7c375c:  * with the License.  You may obtain a copy of the License at
1:d7c375c:  *
1:d7c375c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d7c375c:  *
1:d7c375c:  * Unless required by applicable law or agreed to in writing,
1:d7c375c:  * software distributed under the License is distributed on an
1:d7c375c:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:d7c375c:  * KIND, either express or implied.  See the License for the
1:d7c375c:  * specific language governing permissions and limitations
1:d7c375c:  * under the License.
1:d7c375c:  */
1:d7c375c: package org.apache.aries.tx.control.itests;
2:d7c375c: 
1:d7c375c: import static org.junit.Assert.assertEquals;
1:d7c375c: import static org.ops4j.pax.exam.CoreOptions.composite;
1:d7c375c: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:25f014f: 
1:d7c375c: import org.junit.Before;
1:d7c375c: import org.junit.Test;
1:d7c375c: import org.junit.runner.RunWith;
1:d7c375c: import org.ops4j.pax.exam.Option;
1:d7c375c: import org.ops4j.pax.exam.junit.PaxExam;
1:d7c375c: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:d7c375c: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:d7c375c: import org.springframework.jdbc.core.JdbcTemplate;
1:d7c375c: import org.springframework.jdbc.core.StatementCallback;
1:d7c375c: import org.springframework.jdbc.datasource.SingleConnectionDataSource;
1:d7c375c: 
1:d7c375c: @RunWith(PaxExam.class)
1:d7c375c: @ExamReactorStrategy(PerClass.class)
1:d7c375c: public class SpringJdbcTemplateTransactionTest extends AbstractTransactionTest {
1:d7c375c: 
1:d7c375c: 	JdbcTemplate jdbcTemplate; 
1:d7c375c: 
1:d7c375c: 	@Before
1:4dcd48b: 	public void setUp() throws Exception {
1:d7c375c: 		super.setUp();
1:d7c375c: 		
1:d7c375c: 		jdbcTemplate = new JdbcTemplate(new SingleConnectionDataSource(connection, false));
1:d7c375c: 	}
1:d7c375c: 	
1:d7c375c: 	@Test
1:d7c375c: 	public void testJdbcTemplateTx() {
1:d7c375c: 		
1:d7c375c: 		StatementCallback<Boolean> callback = s -> 
1:d7c375c: 			s.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:d7c375c: 		
1:d7c375c: 		txControl.required(() -> jdbcTemplate.execute(callback));
1:d7c375c: 		
1:d7c375c: 		assertEquals("Hello World!", txControl.notSupported(() -> 
1:d7c375c: 			jdbcTemplate.queryForObject("Select * from TEST_TABLE", String.class)));
1:d7c375c: 	}
1:d7c375c: 	
1:25f014f: 	@Test
1:25f014f: 	public void testJdbcTemplateRollback() {
1:25f014f: 		
1:25f014f: 		StatementCallback<Boolean> callback = s -> 
1:25f014f: 			s.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:25f014f: 		
1:25f014f: 		txControl.required(() -> {
1:25f014f: 			jdbcTemplate.execute(callback);
1:25f014f: 			txControl.setRollbackOnly();
1:25f014f: 			return null;
1:25f014f: 		});
1:25f014f: 
1:25f014f: 		assertEquals(Integer.valueOf(0), txControl.notSupported(() -> 
1:25f014f: 			jdbcTemplate.queryForInt("Select count(*) from TEST_TABLE")));
1:25f014f: 	}
1:25f014f: 	
1:d7c375c: 	
1:d7c375c: 	@Override
1:d7c375c: 	protected Option testSpecificOptions() {
1:d7c375c: 		return composite(
1:d7c375c: 				mavenBundle("org.springframework", "spring-jdbc").versionAsInProject(),
1:d7c375c: 				mavenBundle("org.springframework", "spring-tx").versionAsInProject(),
1:d7c375c: 				mavenBundle("org.springframework", "spring-beans").versionAsInProject(),
1:d7c375c: 				mavenBundle("org.springframework", "spring-core").versionAsInProject(),
1:d7c375c: 				mavenBundle("org.springframework", "spring-context").versionAsInProject());
1:d7c375c: 	}
1:d7c375c: 
1:d7c375c: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4dcd48b
/////////////////////////////////////////////////////////////////////////
1: 	public void setUp() throws Exception {
commit:04788bf
/////////////////////////////////////////////////////////////////////////
commit:25f014f
/////////////////////////////////////////////////////////////////////////
0: import java.sql.ResultSet;
1: 
/////////////////////////////////////////////////////////////////////////
1: 	@Test
1: 	public void testJdbcTemplateRollback() {
1: 		
1: 		StatementCallback<Boolean> callback = s -> 
1: 			s.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 		
1: 		txControl.required(() -> {
1: 			jdbcTemplate.execute(callback);
1: 			txControl.setRollbackOnly();
1: 			return null;
1: 		});
1: 
1: 		assertEquals(Integer.valueOf(0), txControl.notSupported(() -> 
1: 			jdbcTemplate.queryForInt("Select count(*) from TEST_TABLE")));
1: 	}
1: 	
commit:d7c375c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.springframework.jdbc.core.JdbcTemplate;
1: import org.springframework.jdbc.core.StatementCallback;
1: import org.springframework.jdbc.datasource.SingleConnectionDataSource;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public class SpringJdbcTemplateTransactionTest extends AbstractTransactionTest {
1: 
1: 	JdbcTemplate jdbcTemplate; 
1: 
1: 	@Before
0: 	public void setUp() {
1: 		super.setUp();
1: 		
1: 		jdbcTemplate = new JdbcTemplate(new SingleConnectionDataSource(connection, false));
1: 	}
1: 	
1: 	@Test
1: 	public void testJdbcTemplateTx() {
1: 		
1: 		StatementCallback<Boolean> callback = s -> 
1: 			s.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 		
1: 		txControl.required(() -> jdbcTemplate.execute(callback));
1: 		
1: 		assertEquals("Hello World!", txControl.notSupported(() -> 
1: 			jdbcTemplate.queryForObject("Select * from TEST_TABLE", String.class)));
1: 	}
1: 	
1: 	
1: 	@Override
1: 	protected Option testSpecificOptions() {
1: 		return composite(
1: 				mavenBundle("org.springframework", "spring-jdbc").versionAsInProject(),
1: 				mavenBundle("org.springframework", "spring-tx").versionAsInProject(),
1: 				mavenBundle("org.springframework", "spring-beans").versionAsInProject(),
1: 				mavenBundle("org.springframework", "spring-core").versionAsInProject(),
1: 				mavenBundle("org.springframework", "spring-context").versionAsInProject());
1: 	}
1: 
1: }
============================================================================