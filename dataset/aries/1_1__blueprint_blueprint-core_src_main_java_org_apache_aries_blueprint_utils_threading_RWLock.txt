1:ef7b490: /*
1:ef7b490:  * Licensed to the Apache Software Foundation (ASF) under one
1:ef7b490:  * or more contributor license agreements.  See the NOTICE file
1:ef7b490:  * distributed with this work for additional information
1:ef7b490:  * regarding copyright ownership.  The ASF licenses this file
1:ef7b490:  * to you under the Apache License, Version 2.0 (the
1:ef7b490:  * "License"); you may not use this file except in compliance
1:ef7b490:  * with the License.  You may obtain a copy of the License at
1:ef7b490:  *
1:ef7b490:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ef7b490:  *
1:ef7b490:  * Unless required by applicable law or agreed to in writing,
1:ef7b490:  * software distributed under the License is distributed on an
1:ef7b490:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ef7b490:  * KIND, either express or implied.  See the License for the
1:ef7b490:  * specific language governing permissions and limitations
1:ef7b490:  * under the License.
1:ef7b490:  */
1:ef7b490: package org.apache.aries.blueprint.utils.threading;
1:ef7b490: 
1:ef7b490: import java.util.concurrent.Callable;
1:ef7b490: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:ef7b490: import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
1:ef7b490: import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
1:ef7b490: 
1:ef7b490: public class RWLock
1:ef7b490: {
1:ef7b490:   private ReentrantReadWriteLock _lock = new ReentrantReadWriteLock();
1:ef7b490:   
1:ef7b490:   public <T> T runReadOperation(Callable<T> call) throws Exception
1:ef7b490:   {
1:ef7b490:     ReadLock rl = _lock.readLock();
1:ef7b490:     rl.lock();
1:ef7b490:     try {
1:ef7b490:       return call.call();
1:ef7b490:     } finally {
1:ef7b490:       rl.unlock();
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490:   
1:ef7b490:   public void runReadOperation(Runnable r)
1:ef7b490:   {
1:ef7b490:     ReadLock rl = _lock.readLock();
1:ef7b490:     rl.lock();
1:ef7b490:     try {
1:ef7b490:       r.run();
1:ef7b490:     } finally {
1:ef7b490:       rl.unlock();
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490:   
1:ef7b490:   public <T> T runWriteOperation(Callable<T> call) throws Exception
1:ef7b490:   {
1:ef7b490:     WriteLock wl = _lock.writeLock();
1:ef7b490:     wl.lock();
1:ef7b490:     try {
1:ef7b490:       return call.call();
1:ef7b490:     } finally {
1:ef7b490:       wl.unlock();
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490:   
1:ef7b490:   public void runWriteOperation(Runnable r)
1:ef7b490:   {
1:ef7b490:     WriteLock wl = _lock.writeLock();
1:ef7b490:     wl.lock();
1:ef7b490:     try {
1:ef7b490:       r.run();
1:ef7b490:     } finally {
1:ef7b490:       wl.unlock();
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ef7b490
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.utils.threading;
1: 
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
1: import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
1: import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
1: 
1: public class RWLock
1: {
1:   private ReentrantReadWriteLock _lock = new ReentrantReadWriteLock();
1:   
1:   public <T> T runReadOperation(Callable<T> call) throws Exception
1:   {
1:     ReadLock rl = _lock.readLock();
1:     rl.lock();
1:     try {
1:       return call.call();
1:     } finally {
1:       rl.unlock();
1:     }
1:   }
1:   
1:   public void runReadOperation(Runnable r)
1:   {
1:     ReadLock rl = _lock.readLock();
1:     rl.lock();
1:     try {
1:       r.run();
1:     } finally {
1:       rl.unlock();
1:     }
1:   }
1:   
1:   public <T> T runWriteOperation(Callable<T> call) throws Exception
1:   {
1:     WriteLock wl = _lock.writeLock();
1:     wl.lock();
1:     try {
1:       return call.call();
1:     } finally {
1:       wl.unlock();
1:     }
1:   }
1:   
1:   public void runWriteOperation(Runnable r)
1:   {
1:     WriteLock wl = _lock.writeLock();
1:     wl.lock();
1:     try {
1:       r.run();
1:     } finally {
1:       wl.unlock();
1:     }
1:   }
1: }
============================================================================