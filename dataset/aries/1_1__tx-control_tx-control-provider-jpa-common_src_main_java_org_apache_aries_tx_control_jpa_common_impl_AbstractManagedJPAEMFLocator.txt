1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:84a8d37: package org.apache.aries.tx.control.jpa.common.impl;
1:e7c1ea5: 
1:84a8d37: import static org.apache.aries.tx.control.jpa.common.impl.AbstractJPAManagedServiceFactory.EMF_BUILDER_TARGET_FILTER;
1:e7c1ea5: import static org.osgi.framework.Constants.OBJECTCLASS;
1:e7c1ea5: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_PASSWORD;
1:e7c1ea5: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1:e7c1ea5: 
1:e7c1ea5: import java.util.Dictionary;
1:e7c1ea5: import java.util.Hashtable;
1:e7c1ea5: import java.util.Map;
1:e7c1ea5: import java.util.concurrent.atomic.AtomicReference;
1:e7c1ea5: 
1:e55f0fd: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1:0e20712: import org.apache.aries.tx.control.resource.common.impl.LifecycleAware;
1:e7c1ea5: import org.osgi.framework.BundleContext;
1:e7c1ea5: import org.osgi.framework.InvalidSyntaxException;
1:e7c1ea5: import org.osgi.framework.ServiceReference;
1:e7c1ea5: import org.osgi.framework.ServiceRegistration;
1:e7c1ea5: import org.osgi.service.cm.ConfigurationException;
1:e7c1ea5: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:e7c1ea5: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1:e7c1ea5: import org.osgi.util.tracker.ServiceTracker;
1:e7c1ea5: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:84a8d37: import org.slf4j.Logger;
1:84a8d37: import org.slf4j.LoggerFactory;
1:e7c1ea5: 
1:84a8d37: public abstract class AbstractManagedJPAEMFLocator implements LifecycleAware,
1:e7c1ea5: 	ServiceTrackerCustomizer<EntityManagerFactoryBuilder, EntityManagerFactoryBuilder> {
1:e7c1ea5: 
1:84a8d37: 	private static final Logger LOG = LoggerFactory.getLogger(AbstractJPAEntityManagerProvider.class);
1:84a8d37: 	
1:e7c1ea5: 	private final BundleContext context;
1:e7c1ea5: 	private final String pid;
1:e7c1ea5: 	private final Map<String, Object> jpaProperties;
1:e7c1ea5: 	private final Map<String, Object> providerProperties;
1:e55f0fd: 	private final Runnable onClose;
1:e7c1ea5: 	private final ServiceTracker<EntityManagerFactoryBuilder, EntityManagerFactoryBuilder> emfBuilderTracker;
1:e7c1ea5: 
1:e55f0fd: 	private final AtomicReference<EntityManagerFactoryBuilder> activeEMFB = new AtomicReference<>();
1:e55f0fd: 	private final AtomicReference<AbstractJPAEntityManagerProvider> providerObject = new AtomicReference<>();
1:e55f0fd: 	
1:e7c1ea5: 	private final AtomicReference<ServiceRegistration<JPAEntityManagerProvider>> serviceReg = new AtomicReference<>();
1:e7c1ea5: 
1:84a8d37: 	public AbstractManagedJPAEMFLocator(BundleContext context, String pid, Map<String, Object> jpaProperties,
1:e55f0fd: 			Map<String, Object> providerProperties, Runnable onClose) throws InvalidSyntaxException, ConfigurationException {
1:e7c1ea5: 		this.context = context;
1:e7c1ea5: 		this.pid = pid;
1:e7c1ea5: 		this.jpaProperties = jpaProperties;
1:e7c1ea5: 		this.providerProperties = providerProperties;
1:e55f0fd: 		this.onClose = onClose;
1:e7c1ea5: 
1:e7c1ea5: 		String unitName = (String) providerProperties.get(JPA_UNIT_NAME);
1:e7c1ea5: 		if (unitName == null) {
1:84a8d37: 			LOG.error("The configuration {} must specify a persistence unit name", pid);
1:e7c1ea5: 			throw new ConfigurationException(JPA_UNIT_NAME,
1:e7c1ea5: 					"The configuration must specify a persistence unit name");
1:e7c1ea5: 		}
1:e55f0fd: 		
1:e7c1ea5: 		String targetFilter = (String) providerProperties.get(EMF_BUILDER_TARGET_FILTER);
1:e7c1ea5: 		if (targetFilter == null) {
1:e7c1ea5: 			targetFilter = "(" + JPA_UNIT_NAME + "=" + unitName + ")";
1:e7c1ea5: 		}
1:e7c1ea5: 
1:e7c1ea5: 		targetFilter = "(&(" + OBJECTCLASS + "=" + EntityManagerFactoryBuilder.class.getName() + ")" + targetFilter + ")";
1:e7c1ea5: 
1:e7c1ea5: 		this.emfBuilderTracker = new ServiceTracker<>(context, context.createFilter(targetFilter), this);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void start() {
1:e7c1ea5: 		emfBuilderTracker.open();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public void stop() {
1:e7c1ea5: 		emfBuilderTracker.close();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public EntityManagerFactoryBuilder addingService(ServiceReference<EntityManagerFactoryBuilder> reference) {
1:e7c1ea5: 		EntityManagerFactoryBuilder service = context.getService(reference);
1:e7c1ea5: 
1:84a8d37: 		updateService(reference, service);
1:e7c1ea5: 		return service;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:84a8d37: 	private void updateService(ServiceReference<EntityManagerFactoryBuilder> reference, EntityManagerFactoryBuilder service) {
1:e7c1ea5: 		boolean setEMFB;
1:e7c1ea5: 		synchronized (this) {
1:e55f0fd: 			setEMFB = activeEMFB.compareAndSet(null, service);
1:e7c1ea5: 		}
1:e7c1ea5: 
1:e7c1ea5: 		if (setEMFB) {
1:e55f0fd: 			AbstractJPAEntityManagerProvider provider = null;
1:e7c1ea5: 			try {
1:84a8d37: 				provider = getResourceProvider(context, service, reference, jpaProperties, providerProperties, onClose);
1:e55f0fd: 				providerObject.set(provider);
1:e7c1ea5: 				ServiceRegistration<JPAEntityManagerProvider> reg = context
1:e7c1ea5: 						.registerService(JPAEntityManagerProvider.class, provider, getServiceProperties());
1:e7c1ea5: 				if (!serviceReg.compareAndSet(null, reg)) {
1:e7c1ea5: 					throw new IllegalStateException("Unable to set the JDBC connection provider registration");
1:e7c1ea5: 				}
1:e7c1ea5: 			} catch (Exception e) {
1:84a8d37: 				LOG.error("An error occurred when creating the resource provider for {}.", pid, e);
1:e55f0fd: 				activeEMFB.compareAndSet(service, null);
1:e55f0fd: 				if(provider != null) {
1:e55f0fd: 					provider.close();
1:e55f0fd: 				}
1:e55f0fd: 					
1:e7c1ea5: 			}
1:e7c1ea5: 		}
1:e7c1ea5: 	}
1:e7c1ea5: 
1:84a8d37: 	protected abstract AbstractJPAEntityManagerProvider getResourceProvider(BundleContext context, 
1:84a8d37: 			EntityManagerFactoryBuilder service, ServiceReference<EntityManagerFactoryBuilder> reference, 
1:84a8d37: 			Map<String, Object> jpaProperties, Map<String, Object> providerProperties, Runnable onClose);
1:84a8d37: 
1:e7c1ea5: 	private Dictionary<String, ?> getServiceProperties() {
1:e7c1ea5: 		Hashtable<String, Object> props = new Hashtable<>();
1:e7c1ea5: 		providerProperties.keySet().stream().filter(s -> !JDBC_PASSWORD.equals(s))
1:e7c1ea5: 				.forEach(s -> props.put(s, providerProperties.get(s)));
1:e7c1ea5: 		return props;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public void modifiedService(ServiceReference<EntityManagerFactoryBuilder> reference, EntityManagerFactoryBuilder service) {
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public void removedService(ServiceReference<EntityManagerFactoryBuilder> reference, EntityManagerFactoryBuilder service) {
1:e55f0fd: 		boolean emfbLeft;
1:e7c1ea5: 		ServiceRegistration<JPAEntityManagerProvider> oldReg = null;
1:e55f0fd: 		AbstractJPAEntityManagerProvider toClose = null;
1:e7c1ea5: 		synchronized (this) {
1:e55f0fd: 			emfbLeft = activeEMFB.compareAndSet(service, null);
1:e55f0fd: 			if (emfbLeft) {
1:e55f0fd: 				toClose = providerObject.get();
1:e7c1ea5: 				oldReg = serviceReg.getAndSet(null);
1:e7c1ea5: 			}
1:e7c1ea5: 		}
1:e7c1ea5: 
1:e7c1ea5: 		if (oldReg != null) {
1:e7c1ea5: 			try {
1:e7c1ea5: 				oldReg.unregister();
1:e7c1ea5: 			} catch (IllegalStateException ise) {
1:84a8d37: 				LOG.debug("An exception occurred when unregistering a service for {}", pid);
1:e7c1ea5: 			}
1:e7c1ea5: 		}
1:e7c1ea5: 		
1:e55f0fd: 		if(toClose != null) {
1:e55f0fd: 			try {
1:e55f0fd: 				toClose.close();
1:e55f0fd: 			} catch (Exception e) {
1:84a8d37: 				LOG.debug("An Exception occured when closing the Resource provider for {}", pid, e);
1:e55f0fd: 			}
1:e55f0fd: 		}
1:e55f0fd: 		
1:e7c1ea5: 		try {
1:e7c1ea5: 			context.ungetService(reference);
1:e7c1ea5: 		} catch (IllegalStateException ise) {
1:84a8d37: 			LOG.debug("An exception occurred when ungetting the service for {}", reference);
1:e7c1ea5: 		}
1:e7c1ea5: 
1:e55f0fd: 		if (emfbLeft) {
1:84a8d37: 			ServiceReference<EntityManagerFactoryBuilder> newEMFBuilderRef = emfBuilderTracker
1:84a8d37: 					.getServiceReference();
1:84a8d37: 			if (newEMFBuilderRef != null) {
1:84a8d37: 				EntityManagerFactoryBuilder newEMFBuilder = emfBuilderTracker.getService(newEMFBuilderRef);
1:84a8d37: 				if(newEMFBuilder != null) {
1:84a8d37: 					updateService(newEMFBuilderRef, newEMFBuilder);
1:84a8d37: 				}
1:e7c1ea5: 			}
1:e7c1ea5: 		}
1:e7c1ea5: 	}
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:84a8d37
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.common.impl;
1: import static org.apache.aries.tx.control.jpa.common.impl.AbstractJPAManagedServiceFactory.EMF_BUILDER_TARGET_FILTER;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public abstract class AbstractManagedJPAEMFLocator implements LifecycleAware,
1: 	private static final Logger LOG = LoggerFactory.getLogger(AbstractJPAEntityManagerProvider.class);
1: 	
/////////////////////////////////////////////////////////////////////////
1: 	public AbstractManagedJPAEMFLocator(BundleContext context, String pid, Map<String, Object> jpaProperties,
/////////////////////////////////////////////////////////////////////////
1: 			LOG.error("The configuration {} must specify a persistence unit name", pid);
/////////////////////////////////////////////////////////////////////////
1: 		updateService(reference, service);
1: 	private void updateService(ServiceReference<EntityManagerFactoryBuilder> reference, EntityManagerFactoryBuilder service) {
/////////////////////////////////////////////////////////////////////////
1: 				provider = getResourceProvider(context, service, reference, jpaProperties, providerProperties, onClose);
/////////////////////////////////////////////////////////////////////////
1: 				LOG.error("An error occurred when creating the resource provider for {}.", pid, e);
/////////////////////////////////////////////////////////////////////////
1: 	protected abstract AbstractJPAEntityManagerProvider getResourceProvider(BundleContext context, 
1: 			EntityManagerFactoryBuilder service, ServiceReference<EntityManagerFactoryBuilder> reference, 
1: 			Map<String, Object> jpaProperties, Map<String, Object> providerProperties, Runnable onClose);
1: 
/////////////////////////////////////////////////////////////////////////
1: 				LOG.debug("An exception occurred when unregistering a service for {}", pid);
/////////////////////////////////////////////////////////////////////////
1: 				LOG.debug("An Exception occured when closing the Resource provider for {}", pid, e);
1: 			LOG.debug("An exception occurred when ungetting the service for {}", reference);
1: 			ServiceReference<EntityManagerFactoryBuilder> newEMFBuilderRef = emfBuilderTracker
1: 					.getServiceReference();
1: 			if (newEMFBuilderRef != null) {
1: 				EntityManagerFactoryBuilder newEMFBuilder = emfBuilderTracker.getService(newEMFBuilderRef);
1: 				if(newEMFBuilder != null) {
1: 					updateService(newEMFBuilderRef, newEMFBuilder);
1: 				}
commit:0e20712
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.resource.common.impl.LifecycleAware;
commit:e55f0fd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
/////////////////////////////////////////////////////////////////////////
1: 	private final Runnable onClose;
1: 	private final AtomicReference<EntityManagerFactoryBuilder> activeEMFB = new AtomicReference<>();
1: 	private final AtomicReference<AbstractJPAEntityManagerProvider> providerObject = new AtomicReference<>();
1: 	
1: 			Map<String, Object> providerProperties, Runnable onClose) throws InvalidSyntaxException, ConfigurationException {
1: 		this.onClose = onClose;
/////////////////////////////////////////////////////////////////////////
1: 			setEMFB = activeEMFB.compareAndSet(null, service);
1: 			AbstractJPAEntityManagerProvider provider = null;
0: 				provider = new JPAEntityManagerProviderFactoryImpl().getProviderFor(service,
0: 						jpaProperties, providerProperties, onClose);
1: 				providerObject.set(provider);
/////////////////////////////////////////////////////////////////////////
1: 				activeEMFB.compareAndSet(service, null);
1: 				if(provider != null) {
1: 					provider.close();
1: 				}
1: 					
/////////////////////////////////////////////////////////////////////////
1: 		boolean emfbLeft;
1: 		AbstractJPAEntityManagerProvider toClose = null;
1: 			emfbLeft = activeEMFB.compareAndSet(service, null);
1: 			if (emfbLeft) {
1: 				toClose = providerObject.get();
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		if(toClose != null) {
1: 			try {
1: 				toClose.close();
1: 			} catch (Exception e) {
0: 				ManagedServiceFactoryImpl.LOG.debug("An Exception occured when closing the Resource provider for {}", pid, e);
1: 			}
1: 		}
1: 		
1: 		if (emfbLeft) {
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.tx.control.jpa.local.impl;
1: 
0: import static org.apache.aries.tx.control.jpa.local.impl.ManagedServiceFactoryImpl.EMF_BUILDER_TARGET_FILTER;
1: import static org.osgi.framework.Constants.OBJECTCLASS;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_PASSWORD;
1: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.Map;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: 
0: public class ManagedJPAEMFLocator implements LifecycleAware,
1: 	ServiceTrackerCustomizer<EntityManagerFactoryBuilder, EntityManagerFactoryBuilder> {
1: 
1: 	private final BundleContext context;
1: 	private final String pid;
1: 	private final Map<String, Object> jpaProperties;
1: 	private final Map<String, Object> providerProperties;
1: 	private final ServiceTracker<EntityManagerFactoryBuilder, EntityManagerFactoryBuilder> emfBuilderTracker;
1: 
0: 	private final AtomicReference<EntityManagerFactoryBuilder> activeDsf = new AtomicReference<>();
1: 	private final AtomicReference<ServiceRegistration<JPAEntityManagerProvider>> serviceReg = new AtomicReference<>();
1: 
0: 	public ManagedJPAEMFLocator(BundleContext context, String pid, Map<String, Object> jpaProperties,
0: 			Map<String, Object> providerProperties) throws InvalidSyntaxException, ConfigurationException {
1: 		this.context = context;
1: 		this.pid = pid;
1: 		this.jpaProperties = jpaProperties;
1: 		this.providerProperties = providerProperties;
1: 
1: 		String unitName = (String) providerProperties.get(JPA_UNIT_NAME);
1: 		if (unitName == null) {
0: 			ManagedServiceFactoryImpl.LOG.error("The configuration {} must specify a persistence unit name", pid);
1: 			throw new ConfigurationException(JPA_UNIT_NAME,
1: 					"The configuration must specify a persistence unit name");
1: 		}
1: 		
1: 		String targetFilter = (String) providerProperties.get(EMF_BUILDER_TARGET_FILTER);
1: 		if (targetFilter == null) {
1: 			targetFilter = "(" + JPA_UNIT_NAME + "=" + unitName + ")";
1: 		}
1: 
1: 		targetFilter = "(&(" + OBJECTCLASS + "=" + EntityManagerFactoryBuilder.class.getName() + ")" + targetFilter + ")";
1: 
1: 		this.emfBuilderTracker = new ServiceTracker<>(context, context.createFilter(targetFilter), this);
1: 	}
1: 
1: 	public void start() {
1: 		emfBuilderTracker.open();
1: 	}
1: 
1: 	public void stop() {
1: 		emfBuilderTracker.close();
1: 	}
1: 
1: 	@Override
1: 	public EntityManagerFactoryBuilder addingService(ServiceReference<EntityManagerFactoryBuilder> reference) {
1: 		EntityManagerFactoryBuilder service = context.getService(reference);
1: 
0: 		updateService(service);
1: 		return service;
1: 	}
1: 
0: 	private void updateService(EntityManagerFactoryBuilder service) {
1: 		boolean setEMFB;
1: 		synchronized (this) {
0: 			setEMFB = activeDsf.compareAndSet(null, service);
1: 		}
1: 
1: 		if (setEMFB) {
1: 			try {
0: 				JPAEntityManagerProvider provider = new JPAEntityManagerProviderFactoryImpl().getProviderFor(service,
0: 						jpaProperties, providerProperties);
1: 				ServiceRegistration<JPAEntityManagerProvider> reg = context
1: 						.registerService(JPAEntityManagerProvider.class, provider, getServiceProperties());
1: 				if (!serviceReg.compareAndSet(null, reg)) {
1: 					throw new IllegalStateException("Unable to set the JDBC connection provider registration");
1: 				}
1: 			} catch (Exception e) {
0: 				ManagedServiceFactoryImpl.LOG.error("An error occurred when creating the connection provider for {}.", pid, e);
0: 				activeDsf.compareAndSet(service, null);
1: 			}
1: 		}
1: 	}
1: 
1: 	private Dictionary<String, ?> getServiceProperties() {
1: 		Hashtable<String, Object> props = new Hashtable<>();
1: 		providerProperties.keySet().stream().filter(s -> !JDBC_PASSWORD.equals(s))
1: 				.forEach(s -> props.put(s, providerProperties.get(s)));
1: 		return props;
1: 	}
1: 
1: 	@Override
1: 	public void modifiedService(ServiceReference<EntityManagerFactoryBuilder> reference, EntityManagerFactoryBuilder service) {
1: 	}
1: 
1: 	@Override
1: 	public void removedService(ServiceReference<EntityManagerFactoryBuilder> reference, EntityManagerFactoryBuilder service) {
0: 		boolean dsfLeft;
1: 		ServiceRegistration<JPAEntityManagerProvider> oldReg = null;
1: 		synchronized (this) {
0: 			dsfLeft = activeDsf.compareAndSet(service, null);
0: 			if (dsfLeft) {
1: 				oldReg = serviceReg.getAndSet(null);
1: 			}
1: 		}
1: 
1: 		if (oldReg != null) {
1: 			try {
1: 				oldReg.unregister();
1: 			} catch (IllegalStateException ise) {
0: 				ManagedServiceFactoryImpl.LOG.debug("An exception occurred when unregistering a service for {}", pid);
1: 			}
1: 		}
1: 		try {
1: 			context.ungetService(reference);
1: 		} catch (IllegalStateException ise) {
0: 			ManagedServiceFactoryImpl.LOG.debug("An exception occurred when ungetting the service for {}", reference);
1: 		}
1: 
0: 		if (dsfLeft) {
0: 			EntityManagerFactoryBuilder newEMFBuilder = emfBuilderTracker.getService();
0: 			if (newEMFBuilder != null) {
0: 				updateService(newEMFBuilder);
1: 			}
1: 		}
1: 	}
1: }
============================================================================