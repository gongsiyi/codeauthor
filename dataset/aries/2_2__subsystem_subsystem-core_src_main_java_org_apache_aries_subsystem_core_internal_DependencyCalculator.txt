1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
2:428e9f1: 
1:428e9f1: import java.util.ArrayList;
1:428e9f1: import java.util.Collection;
1:428e9f1: import java.util.Collections;
1:428e9f1: import java.util.HashMap;
1:428e9f1: import java.util.List;
1:428e9f1: import java.util.Map;
1:23d86e6: import java.util.regex.Matcher;
1:23d86e6: import java.util.regex.Pattern;
1:428e9f1: 
1:e33d72b: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1:23d86e6: import org.osgi.framework.Constants;
1:a6b79e8: import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;
1:428e9f1: import org.osgi.framework.namespace.IdentityNamespace;
1:d6eb080: import org.osgi.framework.namespace.NativeNamespace;
1:428e9f1: import org.osgi.resource.Capability;
1:428e9f1: import org.osgi.resource.Requirement;
1:428e9f1: import org.osgi.resource.Resource;
1:428e9f1: import org.osgi.resource.Wire;
1:428e9f1: import org.osgi.resource.Wiring;
1:23d86e6: import org.osgi.service.resolver.HostedCapability;
1:23d86e6: import org.osgi.service.resolver.ResolutionException;
1:23d86e6: import org.osgi.service.resolver.Resolver;
1:428e9f1: 
1:428e9f1: public class DependencyCalculator {
1:23d86e6: 	private static class ResolveContext extends
1:23d86e6: 			org.osgi.service.resolver.ResolveContext {
1:e33d72b: 	    private final CapabilitySetRepository repository = new CapabilitySetRepository();
2:428e9f1: 		private final Collection<Resource> resources;
1:428e9f1: 
1:23d86e6: 		public ResolveContext(Collection<Resource> resources) {
1:e33d72b: 		    this.resources = resources;
1:e33d72b: 			for (Resource resource : resources) {
1:e33d72b: 			    repository.addResource(resource);
1:e33d72b: 			}
1:428e9f1: 		}
1:428e9f1: 
2:428e9f1: 		@Override
1:23d86e6: 		public List<Capability> findProviders(Requirement requirement) {
1:e33d72b: 		    String namespace = requirement.getNamespace();
1:e33d72b: 		    // never check local resources for osgi.ee or osgi.native capabilities
1:e33d72b: 		    if (ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE.equals(namespace) 
1:e33d72b:                     || NativeNamespace.NATIVE_NAMESPACE.equals(namespace)) {
1:e33d72b: 		        return Collections.<Capability>singletonList(new MissingCapability(requirement));
1:e33d72b: 		    }
1:e33d72b: 			Map<Requirement, Collection<Capability>> map = repository.findProviders(Collections.singleton(requirement));
1:e33d72b: 			Collection<Capability> capabilities = map.get(requirement);
1:e33d72b: 			if (!capabilities.isEmpty()) {
1:e33d72b: 			    return new ArrayList<Capability>(capabilities);
1:428e9f1: 			}
1:e33d72b: 			return Collections.<Capability>singletonList(new MissingCapability(requirement));
1:428e9f1: 		}
1:428e9f1: 
1:428e9f1: 		@Override
1:428e9f1: 		public boolean isEffective(Requirement requirement) {
1:428e9f1: 			return true;
1:428e9f1: 		}
1:23d86e6: 		
1:23d86e6: 		@Override
1:23d86e6: 		public Collection<Resource> getMandatoryResources() {
1:23d86e6: 			return resources;
1:23d86e6: 		}
1:428e9f1: 
1:428e9f1: 		@Override
1:428e9f1: 		public Map<Resource, Wiring> getWirings() {
2:428e9f1: 			return Collections.emptyMap();
1:428e9f1: 		}
1:23d86e6: 
1:23d86e6: 		@Override
1:23d86e6: 		public int insertHostedCapability(List<Capability> capabilities,
1:23d86e6: 				HostedCapability hostedCapability) {
1:281d248: 			int sz = capabilities.size();
1:281d248: 			capabilities.add(sz, hostedCapability);
1:281d248: 	        return sz;
1:23d86e6: 		}
1:428e9f1: 	}
1:428e9f1: 
1:d6eb080: 	static class MissingCapability extends AbstractCapability {
1:428e9f1: 		private static class Resource implements org.osgi.resource.Resource {
1:428e9f1: 			public static final Resource INSTANCE = new Resource();
1:428e9f1: 			
1:428e9f1: 			private final Capability identity;
1:428e9f1: 			
1:428e9f1: 			public Resource() {
1:428e9f1: 				Map<String, Object> attributes = new HashMap<String, Object>();
1:ad2b527: 				attributes.put(IdentityNamespace.IDENTITY_NAMESPACE, org.apache.aries.subsystem.core.internal.Constants.ResourceTypeSynthesized);
1:ad2b527: 				attributes.put(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, org.apache.aries.subsystem.core.internal.Constants.ResourceTypeSynthesized);
1:428e9f1: 				identity = new BasicCapability(IdentityNamespace.IDENTITY_NAMESPACE, attributes, null, this);
1:428e9f1: 			}
1:428e9f1: 			
1:428e9f1: 			@Override
1:428e9f1: 			public List<Capability> getCapabilities(String namespace) {
1:428e9f1: 				return Collections.singletonList(identity);
1:428e9f1: 			}
1:428e9f1: 
1:428e9f1: 			@Override
1:428e9f1: 			public List<Requirement> getRequirements(String namespace) {
1:428e9f1: 				return Collections.emptyList();
1:428e9f1: 			}
1:428e9f1: 		}
1:428e9f1: 		
1:23d86e6: 		private final Map<String, Object> attributes = new HashMap<String, Object>();
1:428e9f1: 		private final Requirement requirement;
1:428e9f1: 
1:428e9f1: 		public MissingCapability(Requirement requirement) {
1:428e9f1: 			this.requirement = requirement;
1:23d86e6: 			initializeAttributes();
1:428e9f1: 		}
1:428e9f1: 
1:428e9f1: 		@Override
1:428e9f1: 		public Map<String, Object> getAttributes() {
1:23d86e6: 			return Collections.unmodifiableMap(attributes);
1:428e9f1: 		}
1:428e9f1: 
1:428e9f1: 		@Override
1:428e9f1: 		public Map<String, String> getDirectives() {
1:428e9f1: 			return Collections.emptyMap();
1:428e9f1: 		}
1:428e9f1: 
1:428e9f1: 		@Override
1:428e9f1: 		public String getNamespace() {
1:428e9f1: 			return requirement.getNamespace();
1:428e9f1: 		}
1:428e9f1: 
1:428e9f1: 		@Override
1:428e9f1: 		public Resource getResource() {
1:428e9f1: 			return Resource.INSTANCE;
1:428e9f1: 		}
1:23d86e6: 		
1:23d86e6: 		private void initializeAttributes() {
1:392ea23: 			String filter = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
1:392ea23: 			if (filter == null)
1:392ea23: 				return;
1:f864605: 			Pattern pattern = Pattern.compile("\\(([^<>~(=]+)(?:=|<=|>=|~=)([^)]+)\\)");
1:392ea23: 			Matcher matcher = pattern.matcher(filter);
1:23d86e6: 			while (matcher.find())
1:23d86e6: 				attributes.put(matcher.group(1), matcher.group(2));
1:23d86e6: 		}
1:428e9f1: 	}
1:428e9f1: 
1:23d86e6: 	private final ResolveContext context;
1:428e9f1: 
1:428e9f1: 	public DependencyCalculator(Collection<Resource> resources) {
1:23d86e6: 		context = new ResolveContext(resources);
1:428e9f1: 	}
1:428e9f1: 
1:23d86e6: 	public List<Requirement> calculateDependencies() throws ResolutionException {
1:428e9f1: 		ArrayList<Requirement> result = new ArrayList<Requirement>();
1:23d86e6: 		Resolver resolver = Activator.getInstance().getResolver();
1:23d86e6: 		Map<Resource, List<Wire>> resolution = resolver.resolve(context);
1:428e9f1: 		for (List<Wire> wires : resolution.values())
1:428e9f1: 			for (Wire wire : wires)
1:428e9f1: 				if (wire.getCapability() instanceof MissingCapability)
1:428e9f1: 					result.add(wire.getRequirement());
1:428e9f1: 		result.trimToSize();
2:428e9f1: 		return result;
1:428e9f1: 	}
1:428e9f1: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:281d248
/////////////////////////////////////////////////////////////////////////
1: 			int sz = capabilities.size();
1: 			capabilities.add(sz, hostedCapability);
1: 	        return sz;
commit:e33d72b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
/////////////////////////////////////////////////////////////////////////
1: 	    private final CapabilitySetRepository repository = new CapabilitySetRepository();
1: 		    this.resources = resources;
1: 			for (Resource resource : resources) {
1: 			    repository.addResource(resource);
1: 			}
1: 		    String namespace = requirement.getNamespace();
1: 		    // never check local resources for osgi.ee or osgi.native capabilities
1: 		    if (ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE.equals(namespace) 
1:                     || NativeNamespace.NATIVE_NAMESPACE.equals(namespace)) {
1: 		        return Collections.<Capability>singletonList(new MissingCapability(requirement));
1: 		    }
1: 			Map<Requirement, Collection<Capability>> map = repository.findProviders(Collections.singleton(requirement));
1: 			Collection<Capability> capabilities = map.get(requirement);
1: 			if (!capabilities.isEmpty()) {
1: 			    return new ArrayList<Capability>(capabilities);
1: 			return Collections.<Capability>singletonList(new MissingCapability(requirement));
commit:ad2b527
/////////////////////////////////////////////////////////////////////////
1: 				attributes.put(IdentityNamespace.IDENTITY_NAMESPACE, org.apache.aries.subsystem.core.internal.Constants.ResourceTypeSynthesized);
1: 				attributes.put(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, org.apache.aries.subsystem.core.internal.Constants.ResourceTypeSynthesized);
commit:f864605
/////////////////////////////////////////////////////////////////////////
1: 			Pattern pattern = Pattern.compile("\\(([^<>~(=]+)(?:=|<=|>=|~=)([^)]+)\\)");
commit:392ea23
/////////////////////////////////////////////////////////////////////////
1: 			String filter = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
1: 			if (filter == null)
1: 				return;
1: 			Matcher matcher = pattern.matcher(filter);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
/////////////////////////////////////////////////////////////////////////
commit:23d86e6
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
0: import org.apache.aries.subsystem.core.internal.Activator;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.resolver.HostedCapability;
1: import org.osgi.service.resolver.ResolutionException;
1: import org.osgi.service.resolver.Resolver;
1: 	private static class ResolveContext extends
1: 			org.osgi.service.resolver.ResolveContext {
1: 		public ResolveContext(Collection<Resource> resources) {
1: 		public List<Capability> findProviders(Requirement requirement) {
/////////////////////////////////////////////////////////////////////////
0: 			return capabilities;
1: 		
1: 		@Override
1: 		public Collection<Resource> getMandatoryResources() {
1: 			return resources;
1: 		}
1: 
1: 		@Override
1: 		public int insertHostedCapability(List<Capability> capabilities,
1: 				HostedCapability hostedCapability) {
0: 			capabilities.add(hostedCapability);
0: 			return capabilities.size() - 1;
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 			initializeAttributes();
1: 			return Collections.unmodifiableMap(attributes);
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		private void initializeAttributes() {
0: 			Pattern pattern = Pattern.compile("\\(([^(=]+)=([^)]+)\\)");
0: 			Matcher matcher = pattern.matcher(requirement.getDirectives().get(Constants.FILTER_DIRECTIVE));
1: 			while (matcher.find())
1: 				attributes.put(matcher.group(1), matcher.group(2));
1: 		}
1: 	private final ResolveContext context;
1: 		context = new ResolveContext(resources);
1: 	public List<Requirement> calculateDependencies() throws ResolutionException {
1: 		Resolver resolver = Activator.getInstance().getResolver();
1: 		Map<Resource, List<Wire>> resolution = resolver.resolve(context);
commit:428e9f1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.subsystem.core.resource;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
0: import java.util.SortedSet;
0: import java.util.TreeSet;
1: 
0: import org.apache.aries.subsystem.core.Resolver;
0: import org.apache.aries.subsystem.core.ResourceHelper;
0: import org.apache.felix.resolver.impl.ResolverImpl;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.resource.Wire;
1: import org.osgi.resource.Wiring;
1: 
1: public class DependencyCalculator {
0: 	private static class Environment implements
0: 			org.apache.aries.subsystem.core.Environment {
1: 		private final Collection<Resource> resources;
1: 
0: 		public Environment(Collection<Resource> resources) {
0: 			this.resources = resources;
1: 		}
1: 
1: 		@Override
0: 		public SortedSet<Capability> findProviders(Requirement requirement) {
0: 			ArrayList<Capability> capabilities = new ArrayList<Capability>();
0: 			for (Resource resource : resources)
0: 				for (Capability capability : resource
0: 						.getCapabilities(requirement.getNamespace()))
0: 					if (ResourceHelper.matches(requirement, capability))
0: 						capabilities.add(capability);
0: 			if (capabilities.isEmpty())
0: 				capabilities.add(new MissingCapability(requirement));
0: 			capabilities.trimToSize();
0: 			return new TreeSet<Capability>(capabilities);
1: 		}
1: 
1: 		@Override
0: 		public Map<Requirement, SortedSet<Capability>> findProviders(
0: 				Collection<? extends Requirement> requirements) {
0: 			Map<Requirement, SortedSet<Capability>> result = new HashMap<Requirement, SortedSet<Capability>>();
0: 			for (Requirement requirement : requirements)
0: 				result.put(requirement, findProviders(requirement));
1: 			return result;
1: 		}
1: 
1: 		@Override
1: 		public boolean isEffective(Requirement requirement) {
1: 			return true;
1: 		}
1: 
1: 		@Override
1: 		public Map<Resource, Wiring> getWirings() {
1: 			return Collections.emptyMap();
1: 		}
1: 	}
1: 
0: 	private static class MissingCapability extends AbstractCapability {
1: 		private static class Resource implements org.osgi.resource.Resource {
1: 			public static final Resource INSTANCE = new Resource();
1: 			
1: 			private final Capability identity;
1: 			
1: 			public Resource() {
1: 				Map<String, Object> attributes = new HashMap<String, Object>();
0: 				attributes.put(IdentityNamespace.IDENTITY_NAMESPACE, "org.apache.aries.subsystem.resource.dummy");
0: 				attributes.put(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE, IdentityNamespace.TYPE_UNKNOWN);
1: 				identity = new BasicCapability(IdentityNamespace.IDENTITY_NAMESPACE, attributes, null, this);
1: 			}
1: 			
1: 			@Override
1: 			public List<Capability> getCapabilities(String namespace) {
1: 				return Collections.singletonList(identity);
1: 			}
1: 
1: 			@Override
1: 			public List<Requirement> getRequirements(String namespace) {
1: 				return Collections.emptyList();
1: 			}
1: 		}
1: 		
1: 		private final Requirement requirement;
1: 
1: 		public MissingCapability(Requirement requirement) {
1: 			this.requirement = requirement;
1: 		}
1: 
1: 		@Override
1: 		public Map<String, Object> getAttributes() {
1: 			return Collections.emptyMap();
1: 		}
1: 
1: 		@Override
1: 		public Map<String, String> getDirectives() {
1: 			return Collections.emptyMap();
1: 		}
1: 
1: 		@Override
1: 		public String getNamespace() {
1: 			return requirement.getNamespace();
1: 		}
1: 
1: 		@Override
1: 		public Resource getResource() {
1: 			return Resource.INSTANCE;
1: 		}
1: 	}
1: 
0: 	private final Environment environment;
1: 	private final Collection<Resource> resources;
1: 
1: 	public DependencyCalculator(Collection<Resource> resources) {
0: 		environment = new Environment(resources);
0: 		this.resources = resources;
1: 	}
1: 
0: 	public List<Requirement> calculateDependencies() {
1: 		ArrayList<Requirement> result = new ArrayList<Requirement>();
0: 		Resolver resolver = new ResolverImpl(null);
0: 		Map<Resource, List<Wire>> resolution = resolver.resolve(environment,
0: 				Collections.EMPTY_LIST, resources);
1: 		for (List<Wire> wires : resolution.values())
1: 			for (Wire wire : wires)
1: 				if (wire.getCapability() instanceof MissingCapability)
1: 					result.add(wire.getRequirement());
1: 		result.trimToSize();
1: 		return result;
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.NativeNamespace;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 					|| NativeNamespace.NATIVE_NAMESPACE.equals(requirement.getNamespace()))) {
/////////////////////////////////////////////////////////////////////////
1: 	static class MissingCapability extends AbstractCapability {
commit:a6b79e8
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;
/////////////////////////////////////////////////////////////////////////
0: 	// TODO replace with NativeNamespace constant in R6.
0: 	static final String NATIVE_NAMESPACE = "osgi.native";
/////////////////////////////////////////////////////////////////////////
0: 			// never check local resources for osgi.ee or osgi.native capabilities
0: 			if (!(ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE.equals(requirement.getNamespace()) 
0: 					|| NATIVE_NAMESPACE.equals(requirement.getNamespace()))) {
0: 				for (Resource resource : resources)
0: 					for (Capability capability : resource
0: 							.getCapabilities(requirement.getNamespace()))
0: 						if (ResourceHelper.matches(requirement, capability))
0: 							capabilities.add(capability);
0: 			}
============================================================================