1:6aa0635: /*
1:9822203: * Licensed to the Apache Software Foundation (ASF) under one
1:9822203: * or more contributor license agreements.  See the NOTICE file
1:9822203: * distributed with this work for additional information
1:9822203: * regarding copyright ownership.  The ASF licenses this file
1:9822203: * to you under the Apache License, Version 2.0 (the
1:9822203: * "License"); you may not use this file except in compliance
1:9822203: * with the License.  You may obtain a copy of the License at
1:9822203: *
1:9822203: *   http://www.apache.org/licenses/LICENSE-2.0
1:9822203: *
1:9822203: * Unless required by applicable law or agreed to in writing,
1:9822203: * software distributed under the License is distributed on an
1:9822203: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9822203: * KIND, either express or implied.  See the License for the
1:9822203: * specific language governing permissions and limitations
1:9822203: * under the License.
1:9822203: */
1:6aa0635: package org.apache.aries.versioning.utils;
1:9822203: 
1:6aa0635: import java.lang.reflect.Modifier;
1:f9b43fb: 
1:6aa0635: import org.objectweb.asm.Opcodes;
1:f9b43fb: 
1:9822203: public abstract class GenericDeclaration {
1:f9b43fb: 
1:9822203:     private final int access;
1:9822203:     private final String name;
1:9822203:     private final String signature;
1:9822203: 
1:9822203:     public GenericDeclaration(int access, String name, String signature) {
1:9822203:         int updatedAccess = access;
1:9822203:         // ignore the native or synchronized modifier as they do not affect binary compatibility
1:9822203:         if (Modifier.isNative(access)) {
1:9822203:             updatedAccess = updatedAccess - Opcodes.ACC_NATIVE;
1:9822203:         }
1:9822203:         if (Modifier.isSynchronized(access)) {
1:9822203:             updatedAccess = updatedAccess - Opcodes.ACC_SYNCHRONIZED;
1:9822203:         }
1:9822203:         this.access = access;
1:9822203:         this.name = name;
1:9822203:         this.signature = signature;
12:6aa0635:     }
1:9822203: 
1:9822203:     public int getAccess() {
1:9822203:         return access;
1:6aa0635:     }
12:6aa0635: 
1:9822203:     public String getName() {
1:9822203:         return name;
1:9822203:     }
1:6aa0635: 
1:6aa0635: 
1:9822203:     public String getSignature() {
1:9822203:         return signature;
1:9822203:     }
1:9822203: 
1:9822203:     public boolean isFinal() {
1:9822203:         return Modifier.isFinal(access);
1:9822203:     }
1:9822203: 
1:9822203:     public boolean isStatic() {
1:9822203:         return Modifier.isStatic(access);
1:9822203:     }
1:9822203: 
1:9822203:     public boolean isPublic() {
1:9822203:         return Modifier.isPublic(access);
1:9822203:     }
1:9822203: 
1:9822203:     public boolean isProtected() {
1:9822203:         return Modifier.isProtected(access);
1:9822203:     }
1:9822203: 
1:9822203:     public boolean isPrivate() {
1:9822203:         return Modifier.isPrivate(access);
1:9822203:     }
1:9822203: 
1:9822203:     @Override
1:9822203:     public int hashCode() {
1:9822203:         final int prime = 31;
1:9822203:         int result = 1;
1:9822203:         result = prime * result + access;
1:9822203:         result = prime * result + ((name == null) ? 0 : name.hashCode());
1:9822203: 
1:9822203:         return result;
1:9822203:     }
1:9822203: 
1:9822203:     @Override
1:9822203:     public boolean equals(Object obj) {
1:9822203:         if (this == obj) return true;
1:9822203:         if (obj == null) return false;
1:9822203:         if (getClass() != obj.getClass()) return false;
1:9822203:         GenericDeclaration other = (GenericDeclaration) obj;
1:9822203:         if (access != other.access) return false;
1:9822203:         if (name == null) {
1:9822203:             if (other.name != null) return false;
1:9822203:         } else if (!name.equals(other.name)) return false;
1:9822203: 
1:9822203:         return true;
1:9822203:     }
1:f9b43fb: 
1:6aa0635: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:9822203
/////////////////////////////////////////////////////////////////////////
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *   http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: 
1: public abstract class GenericDeclaration {
1:     private final int access;
1:     private final String name;
1:     private final String signature;
1: 
1:     public GenericDeclaration(int access, String name, String signature) {
1:         int updatedAccess = access;
1:         // ignore the native or synchronized modifier as they do not affect binary compatibility
1:         if (Modifier.isNative(access)) {
1:             updatedAccess = updatedAccess - Opcodes.ACC_NATIVE;
1:         }
1:         if (Modifier.isSynchronized(access)) {
1:             updatedAccess = updatedAccess - Opcodes.ACC_SYNCHRONIZED;
1:         }
1:         this.access = access;
1:         this.name = name;
1:         this.signature = signature;
1: 
1:     public int getAccess() {
1:         return access;
1:     public String getName() {
1:         return name;
1:     }
1:     public String getSignature() {
1:         return signature;
1:     }
1: 
1:     public boolean isFinal() {
1:         return Modifier.isFinal(access);
1:     }
1: 
1:     public boolean isStatic() {
1:         return Modifier.isStatic(access);
1:     }
1: 
1:     public boolean isPublic() {
1:         return Modifier.isPublic(access);
1:     }
1: 
1:     public boolean isProtected() {
1:         return Modifier.isProtected(access);
1:     }
1: 
1:     public boolean isPrivate() {
1:         return Modifier.isPrivate(access);
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         final int prime = 31;
1:         int result = 1;
1:         result = prime * result + access;
1:         result = prime * result + ((name == null) ? 0 : name.hashCode());
1: 
1:         return result;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj) {
1:         if (this == obj) return true;
1:         if (obj == null) return false;
1:         if (getClass() != obj.getClass()) return false;
1:         GenericDeclaration other = (GenericDeclaration) obj;
1:         if (access != other.access) return false;
1:         if (name == null) {
1:             if (other.name != null) return false;
1:         } else if (!name.equals(other.name)) return false;
1: 
1:         return true;
1:     }
author:Emily Jiang
-------------------------------------------------------------------------------
commit:f9b43fb
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     // ignore the native or synchronized modifier as they do not affect binary compatibility
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:     
commit:6aa0635
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
1: package org.apache.aries.versioning.utils;
1: 
1: import java.lang.reflect.Modifier;
1: 
1: import org.objectweb.asm.Opcodes;
1: 
0: public abstract class GenericDeclaration
0: {
1: 
0:   private final int access;
0:   private final String name; 
0:   private final String signature;
1:   
0:   public GenericDeclaration(int access, String name, String signature) {
0:     int updatedAccess = access;
0:     // Ignore the native or synchronized modifier as they do not affect binary compatibility
0:     if (Modifier.isNative(access)) {
0:       updatedAccess = updatedAccess - Opcodes.ACC_NATIVE;
1:     }
0:     if (Modifier.isSynchronized(access)) {
0:       updatedAccess = updatedAccess - Opcodes.ACC_SYNCHRONIZED;
1:     }
0:     this.access = access;
0:     this.name = name;
0:     this.signature = signature;
1:   }
0:   public int getAccess()
0:   {
0:     return access;
1:   }
1: 
0:   public String getName()
0:   {
0:     return name;
1:   }
1: 
1:  
1: 
0:   public String getSignature()
0:   {
0:     return signature;
1:   }
1:   
0:   public boolean isFinal() {
0:     return Modifier.isFinal(access);
1:   }
1:   
0:   public boolean isStatic() {
0:     return Modifier.isStatic(access);
1:   }
1:   
0:   public boolean isPublic() {
0:     return Modifier.isPublic(access);
1:   }
1:   
0:   public boolean isProtected() {
0:     return Modifier.isProtected(access);
1:   }
0:   public boolean isPrivate() {
0:     return Modifier.isPrivate(access);
1:   }
0:   @Override
0:   public int hashCode()
0:   {
0:     final int prime = 31;
0:     int result = 1;
0:     result = prime * result + access;
0:     result = prime * result + ((name == null) ? 0 : name.hashCode());
0:     result = prime * result + ((signature == null) ? 0 : signature.hashCode());
0:     return result;
1:   }
0:   @Override
0:   public boolean equals(Object obj)
0:   {
0:     if (this == obj) return true;
0:     if (obj == null) return false;
0:     if (getClass() != obj.getClass()) return false;
0:     GenericDeclaration other = (GenericDeclaration) obj;
0:     if (access != other.access) return false;
0:     if (name == null) {
0:       if (other.name != null) return false;
0:     } else if (!name.equals(other.name)) return false;
0:     if (signature == null) {
0:       if (other.signature != null) return false;
0:     } else if (!signature.equals(other.signature)) return false;
0:     return true;
1:   }
1: 
1: }
============================================================================