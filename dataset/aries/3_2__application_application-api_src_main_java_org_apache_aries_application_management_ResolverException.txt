1:694eb45: /*
1:694eb45:  * Licensed to the Apache Software Foundation (ASF) under one
1:694eb45:  * or more contributor license agreements.  See the NOTICE file
1:694eb45:  * distributed with this work for additional information
1:694eb45:  * regarding copyright ownership.  The ASF licenses this file
1:694eb45:  * to you under the Apache License, Version 2.0 (the
1:694eb45:  * "License"); you may not use this file except in compliance
1:694eb45:  * with the License.  You may obtain a copy of the License at
1:694eb45:  *
1:694eb45:  *   http://www.apache.org/licenses/LICENSE-2.0
1:694eb45:  *
1:694eb45:  * Unless required by applicable law or agreed to in writing,
1:694eb45:  * software distributed under the License is distributed on an
1:694eb45:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:694eb45:  * KIND, either express or implied.  See the License for the
1:694eb45:  * specific language governing permissions and limitations
1:694eb45:  * under the License.
1:694eb45:  */
1:694eb45: package org.apache.aries.application.management;
1:694eb45: 
1:694eb45: import java.util.ArrayList;
1:9da7040: import java.util.HashMap;
1:9da7040: import java.util.List;
1:9da7040: import java.util.Map;
1:9da7040: 
1:9da7040: import org.apache.aries.application.modelling.ModellingConstants;
1:694eb45: 
1:694eb45: /**
1:694eb45:  * Exception thrown by the AriesApplicationResolver interface
1:694eb45:  */
1:694eb45: public class ResolverException extends Exception {
1:694eb45: 
1:694eb45:   private static final long serialVersionUID = 8176120468577397671L;
1:9da7040:   private Map<String, String> _unsatisfiedRequirementMessages = new HashMap<String, String>();
1:694eb45:   
1:694eb45:   /**
1:694eb45:    * Construct from an Exception
1:694eb45:    * @param e
1:694eb45:    */
1:694eb45:   public ResolverException (Exception e) { 
1:694eb45:     super(e);
1:694eb45:   }
1:694eb45:   /**
1:694eb45:    * Construct from a String
1:694eb45:    * @param s
1:694eb45:    */
1:694eb45:   public ResolverException (String s) { 
1:694eb45:     super(s);
1:694eb45:   }
1:694eb45:   
1:694eb45:   public void setUnsatisfiedRequirements (List<String> reqts) { 
1:9da7040:     // Assume the type is unknown if we don't get told it
1:9da7040:     for (String reqt : reqts)
1:9da7040:     {
1:9da7040:       _unsatisfiedRequirementMessages.put(reqt, ModellingConstants.OBR_UNKNOWN);
1:9da7040:     }
1:694eb45:   }
1:694eb45:   public List<String> getUnsatisfiedRequirements() { 
1:9da7040:     return new ArrayList<String>(_unsatisfiedRequirementMessages.keySet());
1:9da7040:   }
1:9da7040: 
1:9da7040:   public void setUnsatisfiedRequirementsAndReasons(
1:9da7040:       Map<String, String> unsatisfiedRequirements) {
1:9da7040:     _unsatisfiedRequirementMessages = unsatisfiedRequirements;
1:9da7040:   }
1:9da7040:   
1:9da7040:   public Map<String, String> getUnsatisfiedRequirementsAndReasons() {
1:9da7040:       return _unsatisfiedRequirementMessages;
1:694eb45:   }
1:694eb45: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:9da7040
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.modelling.ModellingConstants;
/////////////////////////////////////////////////////////////////////////
1:   private Map<String, String> _unsatisfiedRequirementMessages = new HashMap<String, String>();
/////////////////////////////////////////////////////////////////////////
1:     // Assume the type is unknown if we don't get told it
1:     for (String reqt : reqts)
1:     {
1:       _unsatisfiedRequirementMessages.put(reqt, ModellingConstants.OBR_UNKNOWN);
1:     }
1:     return new ArrayList<String>(_unsatisfiedRequirementMessages.keySet());
1:   }
1: 
1:   public void setUnsatisfiedRequirementsAndReasons(
1:       Map<String, String> unsatisfiedRequirements) {
1:     _unsatisfiedRequirementMessages = unsatisfiedRequirements;
1:   }
1:   
1:   public Map<String, String> getUnsatisfiedRequirementsAndReasons() {
1:       return _unsatisfiedRequirementMessages;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:694eb45
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.management;
1: 
0: import java.util.List;
1: import java.util.ArrayList;
1: 
1: /**
1:  * Exception thrown by the AriesApplicationResolver interface
1:  */
1: public class ResolverException extends Exception {
1: 
1:   private static final long serialVersionUID = 8176120468577397671L;
0:   private List<String> _unsatisfiedRequirementMessages = new ArrayList<String>();
1:   
1:   /**
1:    * Construct from an Exception
1:    * @param e
1:    */
1:   public ResolverException (Exception e) { 
1:     super(e);
1:   }
1:   /**
1:    * Construct from a String
1:    * @param s
1:    */
1:   public ResolverException (String s) { 
1:     super(s);
1:   }
1:   
1:   public void setUnsatisfiedRequirements (List<String> reqts) { 
0:     _unsatisfiedRequirementMessages = reqts;
1:   }
1:   public List<String> getUnsatisfiedRequirements() { 
0:     return _unsatisfiedRequirementMessages;
1:   }
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:43be66f
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.application.management;
0: 
0: import java.util.List;
0: import java.util.ArrayList;
0: 
0: /**
0:  * Exception thrown by the AriesApplicationResolver interface
0:  */
0: public class ResolverException extends Exception {
0: 
0:   private static final long serialVersionUID = 8176120468577397671L;
0:   private List<String> _unsatisfiedRequirementMessages = new ArrayList<String>();
0:   
0:   /**
0:    * Construct from an Exception
0:    * @param e
0:    */
0:   public ResolverException (Exception e) { 
0:     super(e);
0:   }
0:   /**
0:    * Construct from a String
0:    * @param s
0:    */
0:   public ResolverException (String s) { 
0:     super(s);
0:   }
0:   
0:   public void setUnsatisfiedRequirements (List<String> reqts) { 
0:     _unsatisfiedRequirementMessages = reqts;
0:   }
0:   public List<String> getUnsatisfiedRequirements() { 
0:     return _unsatisfiedRequirementMessages;
0:   }
0: }
============================================================================