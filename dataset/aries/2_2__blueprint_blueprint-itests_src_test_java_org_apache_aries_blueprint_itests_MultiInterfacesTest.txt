1:f4bd728: /*
1:f4bd728:  * Licensed to the Apache Software Foundation (ASF) under one
1:f4bd728:  * or more contributor license agreements.  See the NOTICE file
1:f4bd728:  * distributed with this work for additional information
1:f4bd728:  * regarding copyright ownership.  The ASF licenses this file
1:f4bd728:  * to you under the Apache License, Version 2.0 (the
1:f4bd728:  * "License"); you may not use this file except in compliance
1:f4bd728:  * with the License.  You may obtain a copy of the License at
1:f4bd728:  *
1:f4bd728:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f4bd728:  *
1:f4bd728:  * Unless required by applicable law or agreed to in writing,
1:f4bd728:  * software distributed under the License is distributed on an
1:f4bd728:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f4bd728:  * KIND, either express or implied.  See the License for the
1:f4bd728:  * specific language governing permissions and limitations
1:f4bd728:  * under the License.
1:f4bd728:  */
1:f4bd728: package org.apache.aries.blueprint.itests;
6:f4bd728: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:f4bd728: import static org.junit.Assert.assertEquals;
1:f4bd728: import static org.junit.Assert.assertFalse;
1:f4bd728: import static org.junit.Assert.assertTrue;
1:f4bd728: import static org.junit.Assert.fail;
1:f4bd728: 
1:f4bd728: import org.apache.aries.blueprint.testbundlea.multi.InterfaceA;
1:f4bd728: import org.apache.aries.blueprint.testbundlea.multi.InterfaceB;
1:f4bd728: import org.apache.aries.blueprint.testbundlea.multi.InterfaceC;
1:f4bd728: import org.apache.aries.blueprint.testbundlea.multi.InterfaceD;
1:f4bd728: import org.junit.Test;
1:f4bd728: import org.junit.runner.RunWith;
1:d251156: import org.ops4j.pax.exam.Configuration;
1:f4bd728: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:f4bd728: import org.osgi.service.blueprint.container.BlueprintContainer;
1:f4bd728: 
1:d251156: @RunWith(PaxExam.class)
1:d251156: public class MultiInterfacesTest extends AbstractBlueprintIntegrationTest {
1:f4bd728: 
1:f4bd728:     @Test
1:f4bd728:     public void testMultiInterfaceReferences() throws Exception {
1:f4bd728:         //bundlea provides the ns handlers, bean processors, interceptors etc for this test.
1:d251156:         startBundleBlueprint("org.apache.aries.blueprint.testbundlea");
1:f4bd728:         
1:f4bd728:         //bundleb makes use of the extensions provided by bundlea
1:f4bd728:         //bundleb's container will hold the beans we need to query to check the function
1:f4bd728:         //provided by bundlea functioned as expected
1:d251156:         BlueprintContainer beanContainer = startBundleBlueprint("org.apache.aries.blueprint.testbundleb");
1:f4bd728: 
1:f4bd728:         Object obj1 = beanContainer.getComponentInstance("OnlyA");
1:f4bd728:         Object obj2 = beanContainer.getComponentInstance("AandB");
1:f4bd728:         Object obj3 = beanContainer.getComponentInstance("AandBandC");
1:f4bd728:         Object obj4 = beanContainer.getComponentInstance("AandBandCandD");
1:f4bd728:         
1:f4bd728:         assertEquals("A", ((InterfaceA)obj1).methodA());
1:f4bd728:         assertEquals("A", ((InterfaceA)obj2).methodA());
1:f4bd728:         assertEquals("A", ((InterfaceA)obj3).methodA());
1:f4bd728:         assertEquals("B", ((InterfaceB)obj2).methodB());
1:f4bd728:         assertEquals("C", ((InterfaceC)obj3).methodC());
1:f4bd728:         
1:f4bd728:         assertFalse(obj1 instanceof InterfaceC);
1:f4bd728:         assertFalse(obj2 instanceof InterfaceC);
1:f4bd728:         assertFalse(obj1 instanceof InterfaceB);
1:f4bd728:         
1:f4bd728:         assertTrue(obj4 instanceof InterfaceD);
1:f4bd728:         try {
1:f4bd728:             ((InterfaceD)obj4).methodD();
1:f4bd728:             fail("This should not work");
1:f4bd728:         } catch (org.osgi.service.blueprint.container.ServiceUnavailableException t) {
1:f4bd728:             //expected
1:f4bd728:         }        
1:f4bd728:     }
1:f4bd728:     
1:d251156:     @Configuration
1:d251156:     public Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:             baseOptions(),
1:f4bd728:             Helper.blueprintBundles(),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea"),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb")
1:d251156:         };
1:f4bd728:     } 
1:f4bd728: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea"),
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb")
commit:07887b0
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea").versionAsInProject(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb").versionAsInProject()
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: @RunWith(PaxExam.class)
1: public class MultiInterfacesTest extends AbstractBlueprintIntegrationTest {
1:         startBundleBlueprint("org.apache.aries.blueprint.testbundlea");
1:         BlueprintContainer beanContainer = startBundleBlueprint("org.apache.aries.blueprint.testbundleb");
/////////////////////////////////////////////////////////////////////////
1:     @Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb")
1:         };
commit:f4bd728
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
1: 
1: import org.apache.aries.blueprint.testbundlea.multi.InterfaceA;
1: import org.apache.aries.blueprint.testbundlea.multi.InterfaceB;
1: import org.apache.aries.blueprint.testbundlea.multi.InterfaceC;
1: import org.apache.aries.blueprint.testbundlea.multi.InterfaceD;
0: import org.apache.aries.itest.AbstractIntegrationTest;
1: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.osgi.framework.Bundle;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class MultiInterfacesTest extends AbstractIntegrationTest {
1: 
1:     @Test
1:     public void testMultiInterfaceReferences() throws Exception {
1:         //bundlea provides the ns handlers, bean processors, interceptors etc for this test.
0:         Bundle bundlea = context().getBundleByName("org.apache.aries.blueprint.testbundlea");
0:         assertNotNull(bundlea);
0:         bundlea.start();
1:         
1:         //bundleb makes use of the extensions provided by bundlea
0:         Bundle bundleb = context().getBundleByName("org.apache.aries.blueprint.testbundleb");
0:         assertNotNull(bundleb);
0:         bundleb.start();
1:         
1:         //bundleb's container will hold the beans we need to query to check the function
1:         //provided by bundlea functioned as expected
0:         BlueprintContainer beanContainer = 
0:             Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.testbundleb");
0:         assertNotNull(beanContainer);
1: 
1:         Object obj1 = beanContainer.getComponentInstance("OnlyA");
1:         Object obj2 = beanContainer.getComponentInstance("AandB");
1:         Object obj3 = beanContainer.getComponentInstance("AandBandC");
1:         Object obj4 = beanContainer.getComponentInstance("AandBandCandD");
1:         
1:         assertEquals("A", ((InterfaceA)obj1).methodA());
1:         assertEquals("A", ((InterfaceA)obj2).methodA());
1:         assertEquals("A", ((InterfaceA)obj3).methodA());
1:         assertEquals("B", ((InterfaceB)obj2).methodB());
1:         assertEquals("C", ((InterfaceC)obj3).methodC());
1:         
1:         assertFalse(obj1 instanceof InterfaceC);
1:         assertFalse(obj2 instanceof InterfaceC);
1:         assertFalse(obj1 instanceof InterfaceB);
1:         
1:         assertTrue(obj4 instanceof InterfaceD);
1:         try {
1:             ((InterfaceD)obj4).methodD();
1:             fail("This should not work");
1:         } catch (org.osgi.service.blueprint.container.ServiceUnavailableException t) {
1:             //expected
1:         }        
1:     }
1:     
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         return testOptions(
0:             paxLogging("DEBUG"),
1:             Helper.blueprintBundles(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea").noStart(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb").noStart(),
0:             equinox().version("3.5.0")
0:         );
1:     } 
1: }
============================================================================