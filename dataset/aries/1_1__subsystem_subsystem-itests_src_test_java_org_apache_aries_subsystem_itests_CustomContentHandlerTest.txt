1:79b20bc: /*
1:79b20bc:  * Licensed under the Apache License, Version 2.0 (the "License");
1:79b20bc:  * you may not use this file except in compliance with the License.
1:79b20bc:  * You may obtain a copy of the License at
1:79b20bc:  *
1:79b20bc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:79b20bc:  *
1:79b20bc:  * Unless required by applicable law or agreed to in writing, software
1:79b20bc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:79b20bc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:79b20bc:  * See the License for the specific language governing permissions and
1:79b20bc:  * limitations under the License.
1:79b20bc:  */
1:79b20bc: package org.apache.aries.subsystem.itests;
1:79b20bc: 
1:79b20bc: import static org.junit.Assert.assertEquals;
1:79b20bc: import static org.junit.Assert.assertNotNull;
1:79b20bc: import static org.junit.Assert.assertTrue;
1:79b20bc: import static org.junit.Assert.fail;
1:79b20bc: 
1:79b20bc: import java.io.InputStream;
1:79b20bc: import java.util.ArrayList;
1:79b20bc: import java.util.Arrays;
1:79b20bc: import java.util.Collection;
1:79b20bc: import java.util.Dictionary;
1:79b20bc: import java.util.Hashtable;
1:79b20bc: import java.util.List;
1:79b20bc: import java.util.Scanner;
1:79b20bc: 
1:79b20bc: import org.apache.aries.subsystem.ContentHandler;
1:79b20bc: import org.junit.Ignore;
1:79b20bc: import org.junit.Test;
1:79b20bc: import org.osgi.framework.Bundle;
1:79b20bc: import org.osgi.framework.ServiceRegistration;
1:79b20bc: import org.osgi.framework.namespace.IdentityNamespace;
1:79b20bc: import org.osgi.resource.Capability;
1:79b20bc: import org.osgi.resource.Resource;
1:79b20bc: import org.osgi.service.coordinator.Coordination;
1:79b20bc: import org.osgi.service.subsystem.Subsystem;
1:79b20bc: 
1:79b20bc: public class CustomContentHandlerTest extends SubsystemTest {
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     protected void createApplications() throws Exception {
1:79b20bc:         createApplication("customContent", "custom1.sausages", "customContentBundleA.jar");
1:79b20bc:         createApplication("customContent1", "custom2.sausages", "customContentBundleB.jar");
1:79b20bc:         createApplication("customContent2", "custom3.sausages", "customContentBundleC.jar");
1:79b20bc:         createApplication("customContent3", "custom4.sausages", "customContentBundleD.jar");
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Test
1:79b20bc:     public void testCustomContentHandler() throws Exception {
1:79b20bc:         for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:             if ("org.apache.aries.subsystem.itests.customcontent.bundleA".equals(b.getSymbolicName())) {
1:79b20bc:                 fail("Precondition");
1:79b20bc:             }
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         SausagesContentHandler handler = new SausagesContentHandler();
1:79b20bc:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:79b20bc:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:79b20bc:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1:79b20bc: 
1:79b20bc:         try {
1:79b20bc:             assertEquals("Precondition", 0, handler.calls.size());
1:79b20bc:             Subsystem subsystem = installSubsystemFromFile("customContent.esa");
1:79b20bc:             try {
1:79b20bc:                 assertEquals(Arrays.asList("install:customContent1 sausages = 1"), handler.calls);
1:79b20bc: 
1:79b20bc:                 Collection<Resource> constituents = subsystem.getConstituents();
1:79b20bc:                 assertEquals("The custom content should not show up as a subsystem constituent",
1:79b20bc:                         1, constituents.size());
1:79b20bc: 
1:79b20bc:                 boolean foundBundle = false;
1:79b20bc:                 for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:                     if ("org.apache.aries.subsystem.itests.customcontent.bundleA".equals(b.getSymbolicName())) {
1:79b20bc:                         foundBundle = true;
1:79b20bc:                     }
1:79b20bc:                 }
1:79b20bc:                 assertTrue(foundBundle);
1:79b20bc: 
1:79b20bc:                 boolean foundBundleInConstituents = false;
1:79b20bc:                 for (Resource c : constituents) {
1:79b20bc:                     for(Capability idCap : c.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE)) {
1:79b20bc:                         Object name = idCap.getAttributes().get(IdentityNamespace.IDENTITY_NAMESPACE);
1:79b20bc:                         if ("org.apache.aries.subsystem.itests.customcontent.bundleA".equals(name))
1:79b20bc:                             foundBundleInConstituents = true;
1:79b20bc:                     }
1:79b20bc:                 }
1:79b20bc:                 assertTrue(foundBundleInConstituents);
1:79b20bc: 
1:79b20bc:                 handler.calls.clear();
1:79b20bc:                 assertEquals(Subsystem.State.INSTALLED, subsystem.getState());
1:79b20bc: 
1:79b20bc:                 subsystem.start();
1:79b20bc:                 assertEquals(Arrays.asList("start:customContent1"), handler.calls);
1:79b20bc: 
1:79b20bc:                 handler.calls.clear();
1:79b20bc:                 assertEquals(Subsystem.State.ACTIVE, subsystem.getState());
1:79b20bc: 
1:79b20bc:                 subsystem.stop();
1:79b20bc:                 assertEquals(Arrays.asList("stop:customContent1"), handler.calls);
1:79b20bc: 
1:79b20bc:                 assertEquals(Subsystem.State.RESOLVED, subsystem.getState());
1:79b20bc:             } finally {
1:79b20bc:                 handler.calls.clear();
1:79b20bc:                 subsystem.uninstall();
1:79b20bc:                 assertEquals(Arrays.asList("uninstall:customContent1"), handler.calls);
1:79b20bc:                 assertEquals(Subsystem.State.UNINSTALLED, subsystem.getState());
1:79b20bc:             }
1:79b20bc:         } finally {
1:79b20bc:             reg.unregister();
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Test
1:79b20bc:     public void testCustomContentInstallationException() throws Exception {
1:79b20bc:         for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:             if ("org.apache.aries.subsystem.itests.customcontent.bundleB".equals(b.getSymbolicName())) {
1:79b20bc:                 fail("Precondition");
1:79b20bc:             }
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         SausagesContentHandler handler = new SausagesContentHandler(true, "install");
1:79b20bc:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:79b20bc:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:79b20bc:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1:79b20bc: 
1:79b20bc:         assertEquals("Precondition", 0, handler.calls.size());
1:79b20bc: 
1:79b20bc:         try {
1:79b20bc:             installSubsystemFromFile("customContent1.esa");
1:79b20bc:         } catch (Exception ex) {
1:79b20bc:             // ignore
1:79b20bc:         }
1:79b20bc:         try {
1:79b20bc:             for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:                 if ("org.apache.aries.subsystem.itests.customcontent.bundleB".equals(b.getSymbolicName())) {
1:79b20bc:                     fail("Should not have installed the bundle");
1:79b20bc:                 }
1:79b20bc:             }
1:79b20bc:         } finally {
1:79b20bc:             reg.unregister();
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Test @Ignore("This test exposes a problem that needs to be fixed, namely that the previous test leaves stuff behind and that "
1:79b20bc:             + "customContent1.esa cannot be installed again. Currently ignored until someone finds the time to fix it.")
1:79b20bc:     public void testCustomContentInstallationSecondTime() throws Exception {
1:79b20bc:         for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:             if ("org.apache.aries.subsystem.itests.customcontent.bundleB".equals(b.getSymbolicName())) {
1:79b20bc:                 fail("Precondition");
1:79b20bc:             }
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         SausagesContentHandler handler = new SausagesContentHandler();
1:79b20bc:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:79b20bc:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:79b20bc:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1:79b20bc: 
1:79b20bc:         try {
1:79b20bc:             Subsystem subsystem = installSubsystemFromFile("customContent1.esa");
1:79b20bc:             subsystem.uninstall();
1:79b20bc:         } finally {
1:79b20bc:             reg.unregister();
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Test
1:79b20bc:     public void testCustomContentInstallationCoordinationFails() throws Exception {
1:79b20bc:         for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:             if ("org.apache.aries.subsystem.itests.customcontent.bundleC".equals(b.getSymbolicName())) {
1:79b20bc:                 fail("Precondition");
1:79b20bc:             }
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         SausagesContentHandler handler = new SausagesContentHandler(false, "install");
1:79b20bc:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:79b20bc:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:79b20bc:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1:79b20bc: 
1:79b20bc:         assertEquals("Precondition", 0, handler.calls.size());
1:79b20bc: 
1:79b20bc:         try {
1:79b20bc:             installSubsystemFromFile("customContent2.esa");
1:79b20bc:         } catch (Exception ex) {
1:79b20bc:             // ignore
1:79b20bc:         }
1:79b20bc:         try {
1:79b20bc:             for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:                 if ("org.apache.aries.subsystem.itests.customcontent.bundleC".equals(b.getSymbolicName())) {
1:79b20bc:                     fail("Should not have installed the bundle");
1:79b20bc:                 }
1:79b20bc:             }
1:79b20bc:         } finally {
1:79b20bc:             reg.unregister();
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: 
1:79b20bc: 
1:79b20bc: 
1:79b20bc:     @Test @Ignore("This test currently doesn't pass, the bundle moves to the active state, while it shouldn't")
1:79b20bc:     public void testCustomContentStartException() throws Exception {
1:79b20bc:         for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:             if ("org.apache.aries.subsystem.itests.customcontent.bundleC".equals(b.getSymbolicName())) {
1:79b20bc:                 fail("Precondition");
1:79b20bc:             }
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         SausagesContentHandler handler = new SausagesContentHandler(true, "start");
1:79b20bc:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:79b20bc:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:79b20bc:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1:79b20bc: 
1:79b20bc:         assertEquals("Precondition", 0, handler.calls.size());
1:79b20bc:         Subsystem subsystem = installSubsystemFromFile("customContent2.esa");
1:79b20bc: 
1:79b20bc:         try {
1:79b20bc:             assertEquals(Arrays.asList("install:customContent3 sausages = 3"), handler.calls);
1:79b20bc: 
1:79b20bc:             try {
1:79b20bc:                 Bundle theBundle = null;
1:79b20bc:                 for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:                     if ("org.apache.aries.subsystem.itests.customcontent.bundleC".equals(b.getSymbolicName())) {
1:79b20bc:                         assertEquals(Bundle.INSTALLED, b.getState());
1:79b20bc:                         theBundle = b;
1:79b20bc:                     }
1:79b20bc:                 }
1:79b20bc:                 assertNotNull(theBundle);
1:79b20bc: 
1:79b20bc:                 try {
1:79b20bc:                     subsystem.start();
1:79b20bc:                 } catch (Exception ex) {
1:79b20bc:                     // good
1:79b20bc:                 }
1:79b20bc:                 assertEquals("There was an exception during start, so the bundle should not be started",
1:79b20bc:                         Bundle.INSTALLED, theBundle.getState());
1:79b20bc:             } finally {
1:79b20bc:                 subsystem.uninstall();
1:79b20bc:             }
1:79b20bc:         } finally {
1:79b20bc:             reg.unregister();
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Test @Ignore("This test currently doesn't pass, the bundle moves to the active state, while it shouldn't")
1:79b20bc:     public void testCustomContentStartFailCoordination() throws Exception {
1:79b20bc:         for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:             if ("org.apache.aries.subsystem.itests.customcontent.bundleD".equals(b.getSymbolicName())) {
1:79b20bc:                 fail("Precondition");
1:79b20bc:             }
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         SausagesContentHandler handler = new SausagesContentHandler(false, "start");
1:79b20bc:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:79b20bc:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:79b20bc:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1:79b20bc: 
1:79b20bc:         assertEquals("Precondition", 0, handler.calls.size());
1:79b20bc:         Subsystem subsystem = installSubsystemFromFile("customContent3.esa");
1:79b20bc: 
1:79b20bc:         try {
1:79b20bc:             assertEquals(Arrays.asList("install:customContent4 sausages = 4"), handler.calls);
1:79b20bc: 
1:79b20bc:             try {
1:79b20bc:                 Bundle theBundle = null;
1:79b20bc:                 for (Bundle b : bundleContext.getBundles()) {
1:79b20bc:                     if ("org.apache.aries.subsystem.itests.customcontent.bundleD".equals(b.getSymbolicName())) {
1:79b20bc:                         assertEquals(Bundle.INSTALLED, b.getState());
1:79b20bc:                         theBundle = b;
1:79b20bc:                     }
1:79b20bc:                 }
1:79b20bc:                 assertNotNull(theBundle);
1:79b20bc: 
1:79b20bc:                 try {
1:79b20bc:                     subsystem.start();
1:79b20bc:                 } catch (Exception ex) {
1:79b20bc:                     // good
1:79b20bc:                 }
1:79b20bc:                 assertEquals("The coordination failued during start, so the bundle should not be started",
1:79b20bc:                         Bundle.INSTALLED, theBundle.getState());
1:79b20bc:             } finally {
1:79b20bc:                 subsystem.uninstall();
1:79b20bc:             }
1:79b20bc:         } finally {
1:79b20bc:             reg.unregister();
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     private static String convertStreamToString(InputStream is) {
1:79b20bc:         Scanner s = new Scanner(is).useDelimiter("\\A");
1:79b20bc:         return s.hasNext() ? s.next() : "";
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     static class SausagesContentHandler implements ContentHandler {
1:79b20bc:         List<String> calls = new ArrayList<String>();
1:79b20bc:         private final boolean exception;
1:79b20bc:         private final String state;
1:79b20bc: 
1:79b20bc:         public SausagesContentHandler() {
1:79b20bc:             this(false, null);
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         public SausagesContentHandler(boolean exception, String state) {
1:79b20bc:             this.exception = exception;
1:79b20bc:             this.state = state;
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         @Override
1:79b20bc:         public void install(InputStream is, String symbolicName, String type, Subsystem subsystem,
1:79b20bc:                 Coordination coordination) {
1:79b20bc:             if ("install".equals(state)) {
1:79b20bc:                 if (exception) {
1:79b20bc:                     throw new RuntimeException(state);
1:79b20bc:                 } else {
1:79b20bc:                     coordination.fail(new RuntimeException(state));
1:79b20bc:                 }
1:79b20bc:             }
1:79b20bc: 
1:79b20bc:             String content = convertStreamToString(is);
1:79b20bc:             calls.add(("install:" + symbolicName + " " + content).trim());
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         @Override
1:79b20bc:         public void start(String symbolicName, String type, Subsystem subsystem, Coordination coordination) {
1:79b20bc:             if ("start".equals(state)) {
1:79b20bc:                 if (exception) {
1:79b20bc:                     throw new RuntimeException(state);
1:79b20bc:                 } else {
1:79b20bc:                     coordination.fail(new RuntimeException(state));
1:79b20bc:                 }
1:79b20bc:             }
1:79b20bc: 
1:79b20bc:             calls.add("start:" + symbolicName);
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         @Override
1:79b20bc:         public void stop(String symbolicName, String type, Subsystem subsystem) {
1:79b20bc:             calls.add("stop:" + symbolicName);
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         @Override
1:79b20bc:         public void uninstall(String symbolicName, String type, Subsystem subsystem) {
1:79b20bc:             calls.add("uninstall:" + symbolicName);
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.InputStream;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.List;
1: import java.util.Scanner;
1: 
1: import org.apache.aries.subsystem.ContentHandler;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.subsystem.Subsystem;
1: 
1: public class CustomContentHandlerTest extends SubsystemTest {
1: 
1:     @Override
1:     protected void createApplications() throws Exception {
1:         createApplication("customContent", "custom1.sausages", "customContentBundleA.jar");
1:         createApplication("customContent1", "custom2.sausages", "customContentBundleB.jar");
1:         createApplication("customContent2", "custom3.sausages", "customContentBundleC.jar");
1:         createApplication("customContent3", "custom4.sausages", "customContentBundleD.jar");
1:     }
1: 
1:     @Test
1:     public void testCustomContentHandler() throws Exception {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if ("org.apache.aries.subsystem.itests.customcontent.bundleA".equals(b.getSymbolicName())) {
1:                 fail("Precondition");
1:             }
1:         }
1: 
1:         SausagesContentHandler handler = new SausagesContentHandler();
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1: 
1:         try {
1:             assertEquals("Precondition", 0, handler.calls.size());
1:             Subsystem subsystem = installSubsystemFromFile("customContent.esa");
1:             try {
1:                 assertEquals(Arrays.asList("install:customContent1 sausages = 1"), handler.calls);
1: 
1:                 Collection<Resource> constituents = subsystem.getConstituents();
1:                 assertEquals("The custom content should not show up as a subsystem constituent",
1:                         1, constituents.size());
1: 
1:                 boolean foundBundle = false;
1:                 for (Bundle b : bundleContext.getBundles()) {
1:                     if ("org.apache.aries.subsystem.itests.customcontent.bundleA".equals(b.getSymbolicName())) {
1:                         foundBundle = true;
1:                     }
1:                 }
1:                 assertTrue(foundBundle);
1: 
1:                 boolean foundBundleInConstituents = false;
1:                 for (Resource c : constituents) {
1:                     for(Capability idCap : c.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE)) {
1:                         Object name = idCap.getAttributes().get(IdentityNamespace.IDENTITY_NAMESPACE);
1:                         if ("org.apache.aries.subsystem.itests.customcontent.bundleA".equals(name))
1:                             foundBundleInConstituents = true;
1:                     }
1:                 }
1:                 assertTrue(foundBundleInConstituents);
1: 
1:                 handler.calls.clear();
1:                 assertEquals(Subsystem.State.INSTALLED, subsystem.getState());
1: 
1:                 subsystem.start();
1:                 assertEquals(Arrays.asList("start:customContent1"), handler.calls);
1: 
1:                 handler.calls.clear();
1:                 assertEquals(Subsystem.State.ACTIVE, subsystem.getState());
1: 
1:                 subsystem.stop();
1:                 assertEquals(Arrays.asList("stop:customContent1"), handler.calls);
1: 
1:                 assertEquals(Subsystem.State.RESOLVED, subsystem.getState());
1:             } finally {
1:                 handler.calls.clear();
1:                 subsystem.uninstall();
1:                 assertEquals(Arrays.asList("uninstall:customContent1"), handler.calls);
1:                 assertEquals(Subsystem.State.UNINSTALLED, subsystem.getState());
1:             }
1:         } finally {
1:             reg.unregister();
1:         }
1:     }
1: 
1:     @Test
1:     public void testCustomContentInstallationException() throws Exception {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if ("org.apache.aries.subsystem.itests.customcontent.bundleB".equals(b.getSymbolicName())) {
1:                 fail("Precondition");
1:             }
1:         }
1: 
1:         SausagesContentHandler handler = new SausagesContentHandler(true, "install");
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1: 
1:         assertEquals("Precondition", 0, handler.calls.size());
1: 
1:         try {
1:             installSubsystemFromFile("customContent1.esa");
1:         } catch (Exception ex) {
1:             // ignore
1:         }
1:         try {
1:             for (Bundle b : bundleContext.getBundles()) {
1:                 if ("org.apache.aries.subsystem.itests.customcontent.bundleB".equals(b.getSymbolicName())) {
1:                     fail("Should not have installed the bundle");
1:                 }
1:             }
1:         } finally {
1:             reg.unregister();
1:         }
1:     }
1: 
1:     @Test @Ignore("This test exposes a problem that needs to be fixed, namely that the previous test leaves stuff behind and that "
1:             + "customContent1.esa cannot be installed again. Currently ignored until someone finds the time to fix it.")
1:     public void testCustomContentInstallationSecondTime() throws Exception {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if ("org.apache.aries.subsystem.itests.customcontent.bundleB".equals(b.getSymbolicName())) {
1:                 fail("Precondition");
1:             }
1:         }
1: 
1:         SausagesContentHandler handler = new SausagesContentHandler();
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1: 
1:         try {
1:             Subsystem subsystem = installSubsystemFromFile("customContent1.esa");
1:             subsystem.uninstall();
1:         } finally {
1:             reg.unregister();
1:         }
1:     }
1: 
1:     @Test
1:     public void testCustomContentInstallationCoordinationFails() throws Exception {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if ("org.apache.aries.subsystem.itests.customcontent.bundleC".equals(b.getSymbolicName())) {
1:                 fail("Precondition");
1:             }
1:         }
1: 
1:         SausagesContentHandler handler = new SausagesContentHandler(false, "install");
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1: 
1:         assertEquals("Precondition", 0, handler.calls.size());
1: 
1:         try {
1:             installSubsystemFromFile("customContent2.esa");
1:         } catch (Exception ex) {
1:             // ignore
1:         }
1:         try {
1:             for (Bundle b : bundleContext.getBundles()) {
1:                 if ("org.apache.aries.subsystem.itests.customcontent.bundleC".equals(b.getSymbolicName())) {
1:                     fail("Should not have installed the bundle");
1:                 }
1:             }
1:         } finally {
1:             reg.unregister();
1:         }
1:     }
1: 
1: 
1: 
1:     @Test @Ignore("This test currently doesn't pass, the bundle moves to the active state, while it shouldn't")
1:     public void testCustomContentStartException() throws Exception {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if ("org.apache.aries.subsystem.itests.customcontent.bundleC".equals(b.getSymbolicName())) {
1:                 fail("Precondition");
1:             }
1:         }
1: 
1:         SausagesContentHandler handler = new SausagesContentHandler(true, "start");
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1: 
1:         assertEquals("Precondition", 0, handler.calls.size());
1:         Subsystem subsystem = installSubsystemFromFile("customContent2.esa");
1: 
1:         try {
1:             assertEquals(Arrays.asList("install:customContent3 sausages = 3"), handler.calls);
1: 
1:             try {
1:                 Bundle theBundle = null;
1:                 for (Bundle b : bundleContext.getBundles()) {
1:                     if ("org.apache.aries.subsystem.itests.customcontent.bundleC".equals(b.getSymbolicName())) {
1:                         assertEquals(Bundle.INSTALLED, b.getState());
1:                         theBundle = b;
1:                     }
1:                 }
1:                 assertNotNull(theBundle);
1: 
1:                 try {
1:                     subsystem.start();
1:                 } catch (Exception ex) {
1:                     // good
1:                 }
1:                 assertEquals("There was an exception during start, so the bundle should not be started",
1:                         Bundle.INSTALLED, theBundle.getState());
1:             } finally {
1:                 subsystem.uninstall();
1:             }
1:         } finally {
1:             reg.unregister();
1:         }
1:     }
1: 
1:     @Test @Ignore("This test currently doesn't pass, the bundle moves to the active state, while it shouldn't")
1:     public void testCustomContentStartFailCoordination() throws Exception {
1:         for (Bundle b : bundleContext.getBundles()) {
1:             if ("org.apache.aries.subsystem.itests.customcontent.bundleD".equals(b.getSymbolicName())) {
1:                 fail("Precondition");
1:             }
1:         }
1: 
1:         SausagesContentHandler handler = new SausagesContentHandler(false, "start");
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put(ContentHandler.CONTENT_TYPE_PROPERTY, "foo.sausages");
1:         ServiceRegistration<ContentHandler> reg = bundleContext.registerService(ContentHandler.class, handler, props);
1: 
1:         assertEquals("Precondition", 0, handler.calls.size());
1:         Subsystem subsystem = installSubsystemFromFile("customContent3.esa");
1: 
1:         try {
1:             assertEquals(Arrays.asList("install:customContent4 sausages = 4"), handler.calls);
1: 
1:             try {
1:                 Bundle theBundle = null;
1:                 for (Bundle b : bundleContext.getBundles()) {
1:                     if ("org.apache.aries.subsystem.itests.customcontent.bundleD".equals(b.getSymbolicName())) {
1:                         assertEquals(Bundle.INSTALLED, b.getState());
1:                         theBundle = b;
1:                     }
1:                 }
1:                 assertNotNull(theBundle);
1: 
1:                 try {
1:                     subsystem.start();
1:                 } catch (Exception ex) {
1:                     // good
1:                 }
1:                 assertEquals("The coordination failued during start, so the bundle should not be started",
1:                         Bundle.INSTALLED, theBundle.getState());
1:             } finally {
1:                 subsystem.uninstall();
1:             }
1:         } finally {
1:             reg.unregister();
1:         }
1:     }
1: 
1:     private static String convertStreamToString(InputStream is) {
1:         Scanner s = new Scanner(is).useDelimiter("\\A");
1:         return s.hasNext() ? s.next() : "";
1:     }
1: 
1:     static class SausagesContentHandler implements ContentHandler {
1:         List<String> calls = new ArrayList<String>();
1:         private final boolean exception;
1:         private final String state;
1: 
1:         public SausagesContentHandler() {
1:             this(false, null);
1:         }
1: 
1:         public SausagesContentHandler(boolean exception, String state) {
1:             this.exception = exception;
1:             this.state = state;
1:         }
1: 
1:         @Override
1:         public void install(InputStream is, String symbolicName, String type, Subsystem subsystem,
1:                 Coordination coordination) {
1:             if ("install".equals(state)) {
1:                 if (exception) {
1:                     throw new RuntimeException(state);
1:                 } else {
1:                     coordination.fail(new RuntimeException(state));
1:                 }
1:             }
1: 
1:             String content = convertStreamToString(is);
1:             calls.add(("install:" + symbolicName + " " + content).trim());
1:         }
1: 
1:         @Override
1:         public void start(String symbolicName, String type, Subsystem subsystem, Coordination coordination) {
1:             if ("start".equals(state)) {
1:                 if (exception) {
1:                     throw new RuntimeException(state);
1:                 } else {
1:                     coordination.fail(new RuntimeException(state));
1:                 }
1:             }
1: 
1:             calls.add("start:" + symbolicName);
1:         }
1: 
1:         @Override
1:         public void stop(String symbolicName, String type, Subsystem subsystem) {
1:             calls.add("stop:" + symbolicName);
1:         }
1: 
1:         @Override
1:         public void uninstall(String symbolicName, String type, Subsystem subsystem) {
1:             calls.add("uninstall:" + symbolicName);
1:         }
1:     }
1: }
============================================================================