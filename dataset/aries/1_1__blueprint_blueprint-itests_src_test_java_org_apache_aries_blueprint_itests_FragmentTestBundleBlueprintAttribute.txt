1:d251156: /*
1:d251156:  * Licensed to the Apache Software Foundation (ASF) under one
1:d251156:  * or more contributor license agreements.  See the NOTICE file
1:d251156:  * distributed with this work for additional information
1:d251156:  * regarding copyright ownership.  The ASF licenses this file
1:d251156:  * to you under the Apache License, Version 2.0 (the
1:d251156:  * "License"); you may not use this file except in compliance
1:d251156:  * with the License.  You may obtain a copy of the License at
1:d251156:  *
1:d251156:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d251156:  *
1:d251156:  * Unless required by applicable law or agreed to in writing,
1:d251156:  * software distributed under the License is distributed on an
1:d251156:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:d251156:  * KIND, either express or implied.  See the License for the
1:d251156:  * specific language governing permissions and limitations
1:d251156:  * under the License.
1:d251156:  */
1:d251156: package org.apache.aries.blueprint.itests;
1:d251156: 
1:d251156: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:d251156: 
1:d251156: import java.io.InputStream;
1:d251156: 
1:d251156: import org.junit.Assert;
1:d251156: import org.junit.Test;
1:d251156: import org.junit.runner.RunWith;
1:d251156: import org.ops4j.pax.exam.Configuration;
1:d251156: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:d251156: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:d251156: import org.osgi.framework.Constants;
1:d251156: import org.osgi.service.blueprint.container.BlueprintContainer;
1:d251156: 
1:d251156: @RunWith(PaxExam.class)
1:d251156: public class FragmentTestBundleBlueprintAttribute extends AbstractBlueprintIntegrationTest
1:d251156: {
1:d251156:     
1:d251156:   @Test
1:d251156:   public void testFragmentProvidesBlueprintFile() throws Exception
1:d251156:   {
1:d251156:     Runnable r = context().getService(Runnable.class);
1:d251156:     Assert.assertNotNull("Could not find blueprint registered service", r);
1:d251156:     BlueprintContainer bc = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.test.host");
1:d251156:     Assert.assertNotNull("Could not find blueprint container for bundle", bc);
1:d251156:   }
1:d251156:   
1:d251156:   @Configuration
1:d251156:   public Option[] configuration() {
1:d251156:       InputStream hostJar = TinyBundles.bundle()
1:d251156:               .set(Constants.BUNDLE_MANIFESTVERSION, "2")
1:d251156:               .set("Bundle-Blueprint", "META-INF/bp/*.xml")
1:d251156:               .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.host").build();
1:d251156:       
1:d251156:       InputStream fragmentJar = TinyBundles.bundle()
1:d251156:               .set(Constants.BUNDLE_MANIFESTVERSION, "2")
1:d251156:               .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.fragment")
1:d251156:               .set(Constants.FRAGMENT_HOST, "org.apache.aries.test.host")
1:d251156:               .add("META-INF/bp/bp.xml", this.getClass().getResourceAsStream("/bp.xml"))
1:d251156:               .build();
1:d251156: 
1:d251156:       return new Option[] {
1:d251156:           baseOptions(),
1:d251156:           Helper.blueprintBundles(),
1:d251156:           streamBundle(fragmentJar).noStart(),
1:d251156:           streamBundle(hostJar),
1:d251156:       };
1:d251156:   }
1:d251156: 
1:d251156: 
1:d251156: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: 
1: import java.io.InputStream;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
1: @RunWith(PaxExam.class)
1: public class FragmentTestBundleBlueprintAttribute extends AbstractBlueprintIntegrationTest
1: {
1:     
1:   @Test
1:   public void testFragmentProvidesBlueprintFile() throws Exception
1:   {
1:     Runnable r = context().getService(Runnable.class);
1:     Assert.assertNotNull("Could not find blueprint registered service", r);
1:     BlueprintContainer bc = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.test.host");
1:     Assert.assertNotNull("Could not find blueprint container for bundle", bc);
1:   }
1:   
1:   @Configuration
1:   public Option[] configuration() {
1:       InputStream hostJar = TinyBundles.bundle()
1:               .set(Constants.BUNDLE_MANIFESTVERSION, "2")
1:               .set("Bundle-Blueprint", "META-INF/bp/*.xml")
1:               .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.host").build();
1:       
1:       InputStream fragmentJar = TinyBundles.bundle()
1:               .set(Constants.BUNDLE_MANIFESTVERSION, "2")
1:               .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.test.fragment")
1:               .set(Constants.FRAGMENT_HOST, "org.apache.aries.test.host")
1:               .add("META-INF/bp/bp.xml", this.getClass().getResourceAsStream("/bp.xml"))
1:               .build();
1: 
1:       return new Option[] {
1:           baseOptions(),
1:           Helper.blueprintBundles(),
1:           streamBundle(fragmentJar).noStart(),
1:           streamBundle(hostJar),
1:       };
1:   }
1: 
1: 
1: }
============================================================================