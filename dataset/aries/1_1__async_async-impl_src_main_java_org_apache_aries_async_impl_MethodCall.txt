1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:39cd3f4: package org.apache.aries.async.impl;
1:39cd3f4: 
1:39cd3f4: import java.lang.reflect.Method;
1:39cd3f4: import java.util.concurrent.ExecutorService;
1:39cd3f4: import java.util.concurrent.RejectedExecutionException;
1:8b05938: import java.util.concurrent.ScheduledExecutorService;
1:39cd3f4: 
1:a038667: import org.apache.aries.async.promise.PromiseImpl;
1:39cd3f4: import org.osgi.framework.Bundle;
1:39cd3f4: import org.osgi.framework.BundleContext;
1:39cd3f4: import org.osgi.framework.ServiceException;
1:39cd3f4: import org.osgi.framework.ServiceReference;
1:39cd3f4: import org.osgi.service.async.delegate.AsyncDelegate;
1:39cd3f4: import org.osgi.service.log.LogService;
1:39cd3f4: import org.osgi.util.promise.Failure;
1:39cd3f4: import org.osgi.util.promise.Promise;
1:39cd3f4: import org.osgi.util.tracker.ServiceTracker;
1:39cd3f4: 
1:39cd3f4: 
1:39cd3f4: public class MethodCall {
1:39cd3f4: 	
1:39cd3f4: 	private final Bundle clientBundle;
1:39cd3f4: 	private final ServiceTracker<LogService, LogService> logServiceTracker;
1:39cd3f4: 	
1:39cd3f4: 	private final ServiceReference<?> reference;
1:39cd3f4: 	private final Object service;
1:39cd3f4: 
1:39cd3f4: 	final Method method;
1:39cd3f4: 	final Object[] arguments;
1:39cd3f4: 	
1:39cd3f4: 	public MethodCall(Bundle clientBundle, ServiceTracker<LogService, LogService> logServiceTracker, 
1:39cd3f4: 			ServiceReference<?> reference, Object service, Method method, Object[] arguments) {
1:39cd3f4: 		this.clientBundle = clientBundle;
1:39cd3f4: 		this.logServiceTracker = logServiceTracker;
1:39cd3f4: 		this.reference = reference;
1:39cd3f4: 		this.service = service;
1:39cd3f4: 		this.method = method;
1:39cd3f4: 		this.arguments = arguments;
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	Object getService() {
1:39cd3f4: 		if(reference != null) {
1:39cd3f4: 			BundleContext bc = clientBundle.getBundleContext();
1:39cd3f4: 			if(bc != null) {
1:39cd3f4: 				try {
1:39cd3f4: 					Object svc = bc.getService(reference);
1:39cd3f4: 					if(svc == null) {
1:39cd3f4: 						throw new ServiceException("Unable to retrieve the mediated service because it has been unregistered", 7);
1:39cd3f4: 					} else {
1:39cd3f4: 						return svc;
1:39cd3f4: 					}
1:39cd3f4: 				} catch (Exception e) {
1:39cd3f4: 					throw new ServiceException("Unable to retrieve the mediated service", 7, e);
1:39cd3f4: 				}
1:39cd3f4: 			} else {
1:39cd3f4: 				throw new ServiceException("Unable to retrieve the mediated service because the client bundle has been stopped", 7);
1:39cd3f4: 			}
1:39cd3f4: 		} else {
1:39cd3f4: 			return service;
1:39cd3f4: 		}
1:39cd3f4: 	}
1:39cd3f4: 	
1:39cd3f4: 	void releaseService() {
1:39cd3f4: 		if(reference != null) {
1:39cd3f4: 			BundleContext bc = clientBundle.getBundleContext();
1:39cd3f4: 			if(bc != null) {
1:39cd3f4: 				bc.ungetService(reference);
1:39cd3f4: 			}
1:39cd3f4: 		}
1:39cd3f4: 	}
1:39cd3f4: 	
1:8b05938: 	public <V> Promise<V> invokeAsynchronously(Bundle clientBundle, ExecutorService executor, ScheduledExecutorService ses) {
1:39cd3f4: 		
1:8b05938: 		PromiseImpl<V> promiseImpl = new PromiseImpl<V>(executor, ses);
1:39cd3f4: 
1:39cd3f4: 		Object svc;
1:39cd3f4: 		try {
1:39cd3f4: 			svc = getService();
1:39cd3f4: 		} catch (Exception e) {
1:a038667: 			promiseImpl.fail(e);
1:a038667: 			return promiseImpl;
1:39cd3f4: 		}
1:39cd3f4: 		
1:39cd3f4: 		if(svc instanceof AsyncDelegate) {
1:39cd3f4: 			try {
1:39cd3f4: 				@SuppressWarnings("unchecked")
1:39cd3f4: 				Promise<V> p = (Promise<V>) ((AsyncDelegate) svc).async(method, arguments);
1:39cd3f4: 				if(p != null) {
1:39cd3f4: 					try {
1:a038667: 						promiseImpl.resolveWith(p);
1:a038667: 						return promiseImpl;
1:39cd3f4: 					} finally {
1:39cd3f4: 						releaseService();
1:39cd3f4: 					}
1:39cd3f4: 				}
1:39cd3f4: 			} catch (Exception e) {
1:39cd3f4: 				try {
1:a038667: 					promiseImpl.fail(e);
1:a038667: 					return promiseImpl;
1:39cd3f4: 				} finally {
1:39cd3f4: 					releaseService();
1:39cd3f4: 				}
1:39cd3f4: 			}
1:39cd3f4: 		}
1:39cd3f4: 		//If we get here then svc is either not an async delegate, or it rejected the call
1:39cd3f4: 		
1:39cd3f4: 		try {
1:a038667: 			executor.execute(new Work<V>(this, promiseImpl));
1:39cd3f4: 		} catch (RejectedExecutionException ree) {
1:a038667: 			promiseImpl.fail(new ServiceException("The Async service is unable to accept new requests", 7, ree));
1:39cd3f4: 		}
1:39cd3f4: 		
1:39cd3f4: 		//Release the service we got at the start of this method
1:a038667: 		promiseImpl.onResolve(new Runnable() {
1:39cd3f4: 			public void run() {
1:39cd3f4: 				releaseService();
1:39cd3f4: 			}
1:39cd3f4: 		});
1:39cd3f4: 		
1:a038667: 		return promiseImpl;
1:39cd3f4: 	}
1:39cd3f4: 
1:8b05938: 	public Promise<Void> fireAndForget(Bundle clientBundle, ExecutorService executor, ScheduledExecutorService ses) {
1:8b05938: 		PromiseImpl<Void> started = new PromiseImpl<Void>(executor, ses);
1:39cd3f4: 		Object svc;
1:39cd3f4: 		try {
1:39cd3f4: 			svc = getService();
1:39cd3f4: 		} catch (Exception e) {
1:39cd3f4: 			logError("Unable to obtain the service object", e);
1:a038667: 			started.fail(e);
1:a038667: 			return started;
1:39cd3f4: 		}
1:39cd3f4: 		
1:39cd3f4: 		if(svc instanceof AsyncDelegate) {
1:39cd3f4: 			try {
1:39cd3f4: 				if(((AsyncDelegate) svc).execute(method, arguments)) {
1:39cd3f4: 					releaseService();
1:a038667: 					started.resolve(null);
1:a038667: 					return started;
1:39cd3f4: 				}
1:39cd3f4: 			} catch (Exception e) {
1:39cd3f4: 				releaseService();
1:39cd3f4: 				logError("The AsyncDelegate rejected the fire-and-forget invocation with an exception", e);
1:a038667: 				started.fail(e);
1:a038667: 				return started;
1:39cd3f4: 			}
1:39cd3f4: 		}
1:39cd3f4: 		//If we get here then svc is either not an async delegate, or it rejected the call
1:39cd3f4: 		
1:a038667: 		PromiseImpl<Void> cleanup = new PromiseImpl<Void>();
1:39cd3f4: 		try {
1:39cd3f4: 			executor.execute(new FireAndForgetWork(this, cleanup, started));
1:a038667: 			cleanup.onResolve(new Runnable() {
1:39cd3f4: 				public void run() {
1:39cd3f4: 					releaseService();
1:39cd3f4: 				}
1:39cd3f4: 			}).then(null, new Failure(){
1:39cd3f4: 				public void fail(Promise<?> resolved) throws Exception {
1:39cd3f4: 					logError("The fire-and-forget invocation failed", resolved.getFailure());
1:39cd3f4: 				}
1:39cd3f4: 			});
1:39cd3f4: 		} catch (RejectedExecutionException ree) {
1:39cd3f4: 			logError("The Async Service threadpool rejected the fire-and-forget invocation", ree);
1:a038667: 			started.fail(new ServiceException("Unable to enqueue the fire-and forget task", 7, ree));
1:39cd3f4: 		}
1:a038667: 		return started;
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 	void logError(String message, Throwable e) {
1:39cd3f4: 		for(LogService log : logServiceTracker.getServices(new LogService[0])) {
1:39cd3f4: 			if(reference == null) {
1:39cd3f4: 				log.log(LogService.LOG_ERROR, message, e);
1:39cd3f4: 			} else {
1:39cd3f4: 				log.log(reference,  LogService.LOG_ERROR, message, e);
1:39cd3f4: 			}
1:39cd3f4: 		}
1:39cd3f4: 	}
1:39cd3f4: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8b05938
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ScheduledExecutorService;
/////////////////////////////////////////////////////////////////////////
1: 	public <V> Promise<V> invokeAsynchronously(Bundle clientBundle, ExecutorService executor, ScheduledExecutorService ses) {
1: 		PromiseImpl<V> promiseImpl = new PromiseImpl<V>(executor, ses);
/////////////////////////////////////////////////////////////////////////
1: 	public Promise<Void> fireAndForget(Bundle clientBundle, ExecutorService executor, ScheduledExecutorService ses) {
1: 		PromiseImpl<Void> started = new PromiseImpl<Void>(executor, ses);
commit:a038667
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.async.promise.PromiseImpl;
/////////////////////////////////////////////////////////////////////////
0: 		PromiseImpl<V> promiseImpl = new PromiseImpl<V>(executor);
1: 			promiseImpl.fail(e);
1: 			return promiseImpl;
/////////////////////////////////////////////////////////////////////////
1: 						promiseImpl.resolveWith(p);
1: 						return promiseImpl;
1: 					promiseImpl.fail(e);
1: 					return promiseImpl;
/////////////////////////////////////////////////////////////////////////
1: 			executor.execute(new Work<V>(this, promiseImpl));
1: 			promiseImpl.fail(new ServiceException("The Async service is unable to accept new requests", 7, ree));
1: 		promiseImpl.onResolve(new Runnable() {
1: 		return promiseImpl;
0: 		PromiseImpl<Void> started = new PromiseImpl<Void>(executor);
1: 			started.fail(e);
1: 			return started;
1: 					started.resolve(null);
1: 					return started;
1: 				started.fail(e);
1: 				return started;
1: 		PromiseImpl<Void> cleanup = new PromiseImpl<Void>();
1: 			cleanup.onResolve(new Runnable() {
/////////////////////////////////////////////////////////////////////////
1: 			started.fail(new ServiceException("Unable to enqueue the fire-and forget task", 7, ree));
1: 		return started;
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:39cd3f4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.impl;
1: 
1: import java.lang.reflect.Method;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.RejectedExecutionException;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.async.delegate.AsyncDelegate;
1: import org.osgi.service.log.LogService;
0: import org.osgi.util.promise.Deferred;
1: import org.osgi.util.promise.Failure;
1: import org.osgi.util.promise.Promise;
0: import org.osgi.util.promise.Promises;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: 
1: public class MethodCall {
1: 	
1: 	private final Bundle clientBundle;
1: 	private final ServiceTracker<LogService, LogService> logServiceTracker;
1: 	
1: 	private final ServiceReference<?> reference;
1: 	private final Object service;
1: 
1: 	final Method method;
1: 	final Object[] arguments;
1: 	
1: 	public MethodCall(Bundle clientBundle, ServiceTracker<LogService, LogService> logServiceTracker, 
1: 			ServiceReference<?> reference, Object service, Method method, Object[] arguments) {
1: 		this.clientBundle = clientBundle;
1: 		this.logServiceTracker = logServiceTracker;
1: 		this.reference = reference;
1: 		this.service = service;
1: 		this.method = method;
1: 		this.arguments = arguments;
1: 	}
1: 
1: 	Object getService() {
1: 		if(reference != null) {
1: 			BundleContext bc = clientBundle.getBundleContext();
1: 			if(bc != null) {
1: 				try {
1: 					Object svc = bc.getService(reference);
1: 					if(svc == null) {
1: 						throw new ServiceException("Unable to retrieve the mediated service because it has been unregistered", 7);
1: 					} else {
1: 						return svc;
1: 					}
1: 				} catch (Exception e) {
1: 					throw new ServiceException("Unable to retrieve the mediated service", 7, e);
1: 				}
1: 			} else {
1: 				throw new ServiceException("Unable to retrieve the mediated service because the client bundle has been stopped", 7);
1: 			}
1: 		} else {
1: 			return service;
1: 		}
1: 	}
1: 	
1: 	void releaseService() {
1: 		if(reference != null) {
1: 			BundleContext bc = clientBundle.getBundleContext();
1: 			if(bc != null) {
1: 				bc.ungetService(reference);
1: 			}
1: 		}
1: 	}
1: 	
0: 	public <V> Promise<V> invokeAsynchronously(Bundle clientBundle, ExecutorService executor) {
1: 		
0: 		Deferred<V> deferred = new Deferred<V>();
1: 
1: 		Object svc;
1: 		try {
1: 			svc = getService();
1: 		} catch (Exception e) {
0: 			deferred.fail(e);
0: 			return deferred.getPromise();
1: 		}
1: 		
1: 		if(svc instanceof AsyncDelegate) {
1: 			try {
1: 				@SuppressWarnings("unchecked")
1: 				Promise<V> p = (Promise<V>) ((AsyncDelegate) svc).async(method, arguments);
1: 				if(p != null) {
1: 					try {
0: 						deferred.resolveWith(p);
0: 						return deferred.getPromise();
1: 					} finally {
1: 						releaseService();
1: 					}
1: 				}
1: 			} catch (Exception e) {
1: 				try {
0: 					deferred.fail(e);
0: 					return deferred.getPromise();
1: 				} finally {
1: 					releaseService();
1: 				}
1: 			}
1: 		}
1: 		//If we get here then svc is either not an async delegate, or it rejected the call
1: 		
1: 		try {
0: 			executor.execute(new Work<V>(this, deferred));
1: 		} catch (RejectedExecutionException ree) {
0: 			deferred.fail(new ServiceException("The Async service is unable to accept new requests", 7, ree));
1: 		}
0: 		Promise<V> promise = deferred.getPromise();
1: 		
1: 		//Release the service we got at the start of this method
0: 		promise.onResolve(new Runnable() {
1: 			public void run() {
1: 				releaseService();
1: 			}
1: 		});
1: 		
0: 		return promise;
1: 	}
1: 
0: 	public Promise<Void> fireAndForget(Bundle clientBundle, ExecutorService executor) {
1: 		Object svc;
1: 		try {
1: 			svc = getService();
1: 		} catch (Exception e) {
1: 			logError("Unable to obtain the service object", e);
0: 			return Promises.failed(e);
1: 		}
1: 		
1: 		if(svc instanceof AsyncDelegate) {
1: 			try {
1: 				if(((AsyncDelegate) svc).execute(method, arguments)) {
1: 					releaseService();
0: 					return Promises.resolved(null);
1: 				}
1: 			} catch (Exception e) {
1: 				releaseService();
1: 				logError("The AsyncDelegate rejected the fire-and-forget invocation with an exception", e);
0: 				return Promises.failed(e);
1: 			}
1: 		}
1: 		//If we get here then svc is either not an async delegate, or it rejected the call
1: 		
0: 		Deferred<Void> cleanup = new Deferred<Void>();
0: 		Deferred<Void> started = new Deferred<Void>();
1: 		try {
1: 			executor.execute(new FireAndForgetWork(this, cleanup, started));
0: 			cleanup.getPromise().onResolve(new Runnable() {
1: 				public void run() {
1: 					releaseService();
1: 				}
1: 			}).then(null, new Failure(){
1: 				public void fail(Promise<?> resolved) throws Exception {
1: 					logError("The fire-and-forget invocation failed", resolved.getFailure());
1: 				}
1: 			});
0: 			return started.getPromise();
1: 		} catch (RejectedExecutionException ree) {
1: 			logError("The Async Service threadpool rejected the fire-and-forget invocation", ree);
0: 			return Promises.failed(new ServiceException("Unable to enqueue the fire-and forget task", 7, ree));
1: 		}
1: 	}
1: 
1: 	void logError(String message, Throwable e) {
1: 		for(LogService log : logServiceTracker.getServices(new LogService[0])) {
1: 			if(reference == null) {
1: 				log.log(LogService.LOG_ERROR, message, e);
1: 			} else {
1: 				log.log(reference,  LogService.LOG_ERROR, message, e);
1: 			}
1: 		}
1: 	}
1: }
============================================================================