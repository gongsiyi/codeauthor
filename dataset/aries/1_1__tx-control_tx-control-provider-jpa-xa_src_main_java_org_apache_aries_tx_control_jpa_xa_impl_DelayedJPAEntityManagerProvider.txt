1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:4c0430e: package org.apache.aries.tx.control.jpa.xa.impl;
4:4c0430e: 
1:4c0430e: import java.util.function.Function;
1:74e23ff: 
1:4c0430e: import javax.persistence.EntityManager;
1:4c0430e: 
1:426f022: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1:4c0430e: import org.osgi.service.transaction.control.TransactionControl;
1:4c0430e: import org.osgi.service.transaction.control.TransactionException;
1:4c0430e: 
1:426f022: public class DelayedJPAEntityManagerProvider extends AbstractJPAEntityManagerProvider {
1:4c0430e: 	
1:426f022: 	private final Function<ThreadLocal<TransactionControl>, AbstractJPAEntityManagerProvider> wireToTransactionControl;
1:4c0430e: 	
1:74e23ff: 	private final ThreadLocal<TransactionControl> commonStore = new ThreadLocal<>();
1:4c0430e: 	
1:426f022: 	private AbstractJPAEntityManagerProvider delegate;
1:426f022: 	
1:426f022: 	private boolean closed;
1:4c0430e: 	
1:74e23ff: 	public DelayedJPAEntityManagerProvider(Function<ThreadLocal<TransactionControl>, 
1:426f022: 			AbstractJPAEntityManagerProvider> wireToTransactionControl) {
1:426f022: 		super(null, null);
1:4c0430e: 		this.wireToTransactionControl = wireToTransactionControl;
2:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Override
1:4c0430e: 	public EntityManager getResource(TransactionControl txControl) throws TransactionException {
1:4c0430e: 		synchronized (wireToTransactionControl) {
1:426f022: 			if(closed) {
1:426f022: 				throw new IllegalStateException("This XA JPA resource provider has been closed");
1:426f022: 			}
1:4c0430e: 			if(delegate == null) {
1:74e23ff: 				commonStore.set(txControl);
1:74e23ff: 				delegate = wireToTransactionControl.apply(commonStore);
1:4c0430e: 			}
1:4c0430e: 		}
1:4c0430e: 		return delegate.getResource(txControl);
1:4c0430e: 	}
1:4c0430e: 	
1:426f022: 	public void close() {
1:426f022: 		AbstractJPAEntityManagerProvider toClose = null;
1:426f022: 		synchronized (wireToTransactionControl) {
1:426f022: 			if(!closed) {
1:426f022: 				closed = true;
1:426f022: 				toClose = delegate;
1:426f022: 				delegate = null;
1:426f022: 			}
1:426f022: 		}
1:426f022: 		
1:426f022: 		if(toClose != null) {
1:426f022: 			toClose.close();
1:426f022: 		}
1:426f022: 	}
1:4c0430e: 
1:4c0430e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:426f022
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jpa.common.impl.AbstractJPAEntityManagerProvider;
1: public class DelayedJPAEntityManagerProvider extends AbstractJPAEntityManagerProvider {
1: 	private final Function<ThreadLocal<TransactionControl>, AbstractJPAEntityManagerProvider> wireToTransactionControl;
1: 	private AbstractJPAEntityManagerProvider delegate;
1: 	
1: 	private boolean closed;
1: 			AbstractJPAEntityManagerProvider> wireToTransactionControl) {
1: 		super(null, null);
1: 			if(closed) {
1: 				throw new IllegalStateException("This XA JPA resource provider has been closed");
1: 			}
/////////////////////////////////////////////////////////////////////////
1: 	public void close() {
1: 		AbstractJPAEntityManagerProvider toClose = null;
1: 		synchronized (wireToTransactionControl) {
1: 			if(!closed) {
1: 				closed = true;
1: 				toClose = delegate;
1: 				delegate = null;
1: 			}
1: 		}
1: 		
1: 		if(toClose != null) {
1: 			toClose.close();
1: 		}
1: 	}
commit:74e23ff
/////////////////////////////////////////////////////////////////////////
0: 	private final Function<ThreadLocal<TransactionControl>, JPAEntityManagerProvider> wireToTransactionControl;
1: 	
1: 	private final ThreadLocal<TransactionControl> commonStore = new ThreadLocal<>();
1: 	public DelayedJPAEntityManagerProvider(Function<ThreadLocal<TransactionControl>, 
0: 			JPAEntityManagerProvider> wireToTransactionControl) {
1: 				commonStore.set(txControl);
1: 				delegate = wireToTransactionControl.apply(commonStore);
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.xa.impl;
1: 
1: import java.util.function.Function;
1: 
1: import javax.persistence.EntityManager;
1: 
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
0: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1: 
0: public class DelayedJPAEntityManagerProvider implements JPAEntityManagerProvider {
1: 	
0: 	private final Function<TransactionControl, JPAEntityManagerProvider> wireToTransactionControl;
1: 	
0: 	private JPAEntityManagerProvider delegate;
1: 	
0: 	private TransactionControl wiredTxControl;
1: 
0: 	public DelayedJPAEntityManagerProvider(Function<TransactionControl, JPAEntityManagerProvider> wireToTransactionControl) {
1: 		this.wireToTransactionControl = wireToTransactionControl;
1: 	}
1: 
1: 	@Override
1: 	public EntityManager getResource(TransactionControl txControl) throws TransactionException {
1: 		synchronized (wireToTransactionControl) {
1: 			
0: 			if(wiredTxControl != null && !wiredTxControl.equals(txControl)) {
0: 				throw new TransactionException("This JPAEntityManagerProvider has already been wired to a different Transaction Control service.");
1: 			}
1: 			if(delegate == null) {
0: 				delegate = wireToTransactionControl.apply(txControl);
0: 				wiredTxControl = txControl;
1: 			}
1: 		}
1: 		return delegate.getResource(txControl);
1: 	}
1: 	
1: 	
1: 
1: }
============================================================================