1:104d86d: /**
1:104d86d:  * Licensed to the Apache Software Foundation (ASF) under one
1:104d86d:  * or more contributor license agreements.  See the NOTICE file
1:104d86d:  * distributed with this work for additional information
1:104d86d:  * regarding copyright ownership.  The ASF licenses this file
1:104d86d:  * to you under the Apache License, Version 2.0 (the
1:104d86d:  * "License"); you may not use this file except in compliance
1:104d86d:  * with the License.  You may obtain a copy of the License at
1:104d86d:  *
1:104d86d:  *   http://www.apache.org/licenses/LICENSE-2.0
1:104d86d:  *
1:104d86d:  * Unless required by applicable law or agreed to in writing,
1:104d86d:  * software distributed under the License is distributed on an
1:104d86d:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:104d86d:  * KIND, either express or implied.  See the License for the
1:104d86d:  * specific language governing permissions and limitations
1:104d86d:  * under the License.
1:104d86d:  */
1:104d86d: package org.apache.aries.spifly.statictool;
5:104d86d: 
1:fa5cfba: import static org.junit.Assert.assertFalse;
1:fa5cfba: import static org.junit.Assert.assertTrue;
1:fa5cfba: 
1:104d86d: import java.io.File;
1:104d86d: import java.io.FileInputStream;
1:104d86d: import java.io.IOException;
1:104d86d: import java.io.InputStream;
1:104d86d: import java.net.URL;
1:43cb4c6: import java.util.jar.Manifest;
1:104d86d: 
1:104d86d: import org.apache.aries.spifly.Streams;
1:104d86d: import org.junit.Assert;
1:104d86d: import org.junit.Test;
1:43cb4c6: import org.junit.internal.ArrayComparisonFailure;
1:104d86d: 
1:104d86d: public class MainTest {
1:104d86d:     @Test
1:43cb4c6:     public void testUnJarReJar() throws Exception {
1:104d86d:         URL jarURL = getClass().getResource("/testjar.jar");
1:104d86d:         File jarFile = new File(jarURL.getFile());
1:104d86d:         File tempDir = new File(System.getProperty("java.io.tmpdir") + "/testjar_" + System.currentTimeMillis());
1:104d86d:         
1:104d86d:         try {
1:43cb4c6:             Manifest manifest = Main.unJar(jarFile, tempDir);
1:104d86d:             
1:104d86d:             assertStreams(new File(tempDir, "META-INF/MANIFEST.MF"), 
1:104d86d:                     "jar:" + jarURL + "!/META-INF/MANIFEST.MF");
1:104d86d:             
1:104d86d:             assertStreams(new File(tempDir, "A text File with no content"),
1:104d86d:                     "jar:" + jarURL + "!/A text File with no content");
1:104d86d:             assertStreams(new File(tempDir, "dir/Main.class"),
1:104d86d:                     "jar:" + jarURL + "!/dir/Main.class");
1:104d86d:             assertStreams(new File(tempDir, "dir/dir 2/a.txt"), 
1:104d86d:                     "jar:" + jarURL + "!/dir/dir 2/a.txt");
1:104d86d:             assertStreams(new File(tempDir, "dir/dir 2/b.txt"), 
1:104d86d:                     "jar:" + jarURL + "!/dir/dir 2/b.txt");
1:43cb4c6:                         
1:104d86d:             Assert.assertTrue(new File(tempDir, "dir/dir.3").exists());
1:43cb4c6:             
1:43cb4c6:             // Create a second jar from the exploded directory
1:43cb4c6:             File copiedFile = new File(jarFile.getAbsolutePath() + ".copy");            
1:43cb4c6:             Main.jar(copiedFile, tempDir, manifest);
1:43cb4c6:             URL copyURL = copiedFile.toURI().toURL();
1:43cb4c6:             
1:43cb4c6:             assertStreams("jar:" + copyURL + "!/META-INF/MANIFEST.MF", 
1:43cb4c6:                     "jar:" + jarURL + "!/META-INF/MANIFEST.MF");
1:43cb4c6:             
1:43cb4c6:             assertStreams("jar:" + copyURL + "!/A text File with no content",
1:43cb4c6:                     "jar:" + jarURL + "!/A text File with no content");
1:43cb4c6:             assertStreams("jar:" + copyURL + "!/dir/Main.class",
1:43cb4c6:                     "jar:" + jarURL + "!/dir/Main.class");
1:43cb4c6:             assertStreams("jar:" + copyURL + "!/dir/dir 2/a.txt", 
1:43cb4c6:                     "jar:" + jarURL + "!/dir/dir 2/a.txt");
1:43cb4c6:             assertStreams("jar:" + copyURL + "!/dir/dir 2/b.txt", 
1:43cb4c6:                     "jar:" + jarURL + "!/dir/dir 2/b.txt");
1:104d86d:         } finally {
1:fa5cfba:             Main.delTree(tempDir);
4:104d86d:         }
1:104d86d:     }
1:fa5cfba: 
1:fa5cfba:     @Test
1:fa5cfba:     public void testDelTree() throws IOException {
1:fa5cfba:         URL jarURL = getClass().getResource("/testjar.jar");
1:fa5cfba:         File jarFile = new File(jarURL.getFile());
1:fa5cfba:         File tempDir = new File(System.getProperty("java.io.tmpdir") + "/testjar_" + System.currentTimeMillis());
1:fa5cfba:         
1:fa5cfba:         assertFalse("Precondition", tempDir.exists());
1:fa5cfba:         Main.unJar(jarFile, tempDir);
1:fa5cfba:         assertTrue(tempDir.exists());
1:fa5cfba:         
1:fa5cfba:         Main.delTree(tempDir);                
1:fa5cfba:         assertFalse(tempDir.exists());
1:fa5cfba:     }
1:43cb4c6:     
1:43cb4c6:     private void assertStreams(String url1, String url2) throws Exception {
1:43cb4c6:         InputStream is1 = new URL(url1).openStream();
1:43cb4c6:         InputStream is2 = new URL(url2).openStream();
1:43cb4c6:         assertStreams(is1, is2);
1:43cb4c6:     }
1:43cb4c6:     
1:104d86d:     private void assertStreams(File file, String url) throws Exception {
1:104d86d:         InputStream is1 = new FileInputStream(file);
1:104d86d:         InputStream is2 = new URL(url).openStream();
1:43cb4c6:         assertStreams(is1, is2);
1:43cb4c6:     }
1:43cb4c6: 
1:43cb4c6:     private void assertStreams(InputStream is1, InputStream is2)
1:43cb4c6:             throws IOException, ArrayComparisonFailure {
1:104d86d:         try {
1:104d86d:             byte[] bytes1 = Streams.suck(is1);
1:104d86d:             byte[] bytes2 = Streams.suck(is2);
1:104d86d:             Assert.assertArrayEquals("Files not equal", bytes1, bytes2);
1:104d86d:         } finally {
1:104d86d:             is1.close();
1:104d86d:             is2.close();
1:104d86d:         }
1:104d86d:     }
1:104d86d: }
1:104d86d: 
1:104d86d: 
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:b1379cb
commit:fa5cfba
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1:             Main.delTree(tempDir);
1: 
1:     @Test
1:     public void testDelTree() throws IOException {
1:         URL jarURL = getClass().getResource("/testjar.jar");
1:         File jarFile = new File(jarURL.getFile());
1:         File tempDir = new File(System.getProperty("java.io.tmpdir") + "/testjar_" + System.currentTimeMillis());
1:         
1:         assertFalse("Precondition", tempDir.exists());
1:         Main.unJar(jarFile, tempDir);
1:         assertTrue(tempDir.exists());
1:         
1:         Main.delTree(tempDir);                
1:         assertFalse(tempDir.exists());
1:     }
/////////////////////////////////////////////////////////////////////////
commit:43cb4c6
/////////////////////////////////////////////////////////////////////////
1: import java.util.jar.Manifest;
1: import org.junit.internal.ArrayComparisonFailure;
1:     public void testUnJarReJar() throws Exception {
1:             Manifest manifest = Main.unJar(jarFile, tempDir);
/////////////////////////////////////////////////////////////////////////
1:             
1:             // Create a second jar from the exploded directory
1:             File copiedFile = new File(jarFile.getAbsolutePath() + ".copy");            
1:             Main.jar(copiedFile, tempDir, manifest);
1:             URL copyURL = copiedFile.toURI().toURL();
1:             
1:             assertStreams("jar:" + copyURL + "!/META-INF/MANIFEST.MF", 
1:                     "jar:" + jarURL + "!/META-INF/MANIFEST.MF");
1:             
1:             assertStreams("jar:" + copyURL + "!/A text File with no content",
1:                     "jar:" + jarURL + "!/A text File with no content");
1:             assertStreams("jar:" + copyURL + "!/dir/Main.class",
1:                     "jar:" + jarURL + "!/dir/Main.class");
1:             assertStreams("jar:" + copyURL + "!/dir/dir 2/a.txt", 
1:                     "jar:" + jarURL + "!/dir/dir 2/a.txt");
1:             assertStreams("jar:" + copyURL + "!/dir/dir 2/b.txt", 
1:                     "jar:" + jarURL + "!/dir/dir 2/b.txt");
1:     
1:     
1:     private void assertStreams(String url1, String url2) throws Exception {
1:         InputStream is1 = new URL(url1).openStream();
1:         InputStream is2 = new URL(url2).openStream();
1:         assertStreams(is1, is2);
1:     }
1:     
1:         assertStreams(is1, is2);
1:     }
1: 
1:     private void assertStreams(InputStream is1, InputStream is2)
1:             throws IOException, ArrayComparisonFailure {
commit:104d86d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly.statictool;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: 
1: import org.apache.aries.spifly.Streams;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class MainTest {
1:     @Test
0:     public void testUnJar() throws Exception {
1:         URL jarURL = getClass().getResource("/testjar.jar");
1:         File jarFile = new File(jarURL.getFile());
1:         File tempDir = new File(System.getProperty("java.io.tmpdir") + "/testjar_" + System.currentTimeMillis());
1:         
1:         try {
0:             Main.unJar(jarFile, tempDir);
1:             
1:             assertStreams(new File(tempDir, "META-INF/MANIFEST.MF"), 
1:                     "jar:" + jarURL + "!/META-INF/MANIFEST.MF");
1:             
1:             assertStreams(new File(tempDir, "A text File with no content"),
1:                     "jar:" + jarURL + "!/A text File with no content");
1:             assertStreams(new File(tempDir, "dir/Main.class"),
1:                     "jar:" + jarURL + "!/dir/Main.class");
1:             assertStreams(new File(tempDir, "dir/dir 2/a.txt"), 
1:                     "jar:" + jarURL + "!/dir/dir 2/a.txt");
1:             assertStreams(new File(tempDir, "dir/dir 2/b.txt"), 
1:                     "jar:" + jarURL + "!/dir/dir 2/b.txt");
1:                         
1:             Assert.assertTrue(new File(tempDir, "dir/dir.3").exists());
1:         } finally {
0:             deleteTree(tempDir);
1:         }
1:     }
1: 
1:     private void assertStreams(File file, String url) throws Exception {
1:         InputStream is1 = new FileInputStream(file);
1:         InputStream is2 = new URL(url).openStream();
1:         try {
1:             byte[] bytes1 = Streams.suck(is1);
1:             byte[] bytes2 = Streams.suck(is2);
1:             Assert.assertArrayEquals("Files not equal", bytes1, bytes2);
1:         } finally {
1:             is1.close();
1:             is2.close();
1:         }
1:     }
1: 
0:     public static void deleteTree(File dir) throws IOException {
0:         if (!dir.isDirectory()) 
0:             return;
1:                 
0:         for (File f : new DirTree(dir).getFiles()) {
0:             if (!f.delete()) {
0:                 throw new IOException("Unable to delete file " + f.getAbsolutePath() +
0:                     " The file may still be in use.");
1:             }
1:         }
1:     }
1: }
1: 
1: 
============================================================================