1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_EVENT_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.EVENT;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.LOCATION;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleEvent;
1:fdf3952: import org.osgi.jmx.framework.BundleStateMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>BundleEventData</tt> represents BundleEvent Type @see {@link BundleStateMBean#BUNDLE_EVENT_TYPE}. It is a codec
1:fdf3952:  * for the <code>CompositeData</code> representing an OSGi BundleEvent.
1:fdf3952:  * </p>
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class BundleEventData {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#IDENTIFIER_ITEM
1:fdf3952:      */
1:fdf3952:     private long bundleId;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#LOCATION_ITEM
1:fdf3952:      */
1:fdf3952:     private String location;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#SYMBOLIC_NAME_ITEM
1:fdf3952:      */
1:fdf3952:     private String bundleSymbolicName;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see BundleStateMBean#EVENT_ITEM
1:fdf3952:      */
1:fdf3952:     private int eventType;
1:fdf3952: 
1:fdf3952:     private BundleEventData() {
1:fdf3952:         super();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BundleEventData(BundleEvent bundleEvent) {
1:fdf3952:         this.eventType = bundleEvent.getType();
1:fdf3952:         Bundle bundle = bundleEvent.getBundle();
1:fdf3952:         this.bundleId = bundle.getBundleId();
1:fdf3952:         this.location = bundle.getLocation();
1:fdf3952:         this.bundleSymbolicName = bundle.getSymbolicName();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Returns CompositeData representing a BundleEvent typed by {@link BundleStateMBean#BUNDLE_EVENT_TYPE}
1:fdf3952:      * 
1:fdf3952:      * @return
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         CompositeData result = null;
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(IDENTIFIER, this.bundleId);
1:fdf3952:         items.put(SYMBOLIC_NAME, this.bundleSymbolicName);
1:fdf3952:         items.put(LOCATION, this.location);
1:fdf3952:         items.put(EVENT, this.eventType);
1:fdf3952:         try {
1:fdf3952:             result = new CompositeDataSupport(BUNDLE_EVENT_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Failed to create CompositeData for BundleEvent for Bundle ["
1:fdf3952:                     + this.bundleId + "]", e);
1:fdf3952:         }
1:fdf3952:         return result;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Returns a <code>BundleEventData</code> representation of the given compositeData
1:fdf3952:      * 
1:fdf3952:      * @param compositeData
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException
1:fdf3952:      *             if the compositeData is null or incorrect type
1:fdf3952:      */
1:fdf3952:     public static BundleEventData from(CompositeData compositeData) throws IllegalArgumentException {
1:fdf3952:         BundleEventData eventData = new BundleEventData();
1:fdf3952:         if (compositeData == null) {
1:fdf3952:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:fdf3952:         }
1:fdf3952:         if (!compositeData.getCompositeType().equals(BUNDLE_EVENT_TYPE)) {
1:fdf3952:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:fdf3952:         }
1:fdf3952:         eventData.bundleId = (Long) compositeData.get(IDENTIFIER);
1:fdf3952:         eventData.bundleSymbolicName = (String) compositeData.get(SYMBOLIC_NAME);
1:fdf3952:         eventData.eventType = (Integer) compositeData.get(EVENT);
1:fdf3952:         eventData.location = (String) compositeData.get(LOCATION);
1:fdf3952:         return eventData;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public long getBundleId() {
1:fdf3952:         return bundleId;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getLocation() {
1:fdf3952:         return location;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getBundleSymbolicName() {
1:fdf3952:         return bundleSymbolicName;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public int getEventType() {
1:fdf3952:         return eventType;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_EVENT_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.EVENT;
1: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1: import static org.osgi.jmx.framework.BundleStateMBean.LOCATION;
1: import static org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.jmx.framework.BundleStateMBean;
1: 
1: /**
1:  * <p>
1:  * <tt>BundleEventData</tt> represents BundleEvent Type @see {@link BundleStateMBean#BUNDLE_EVENT_TYPE}. It is a codec
1:  * for the <code>CompositeData</code> representing an OSGi BundleEvent.
1:  * </p>
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class BundleEventData {
1: 
1:     /**
1:      * @see BundleStateMBean#IDENTIFIER_ITEM
1:      */
1:     private long bundleId;
1: 
1:     /**
1:      * @see BundleStateMBean#LOCATION_ITEM
1:      */
1:     private String location;
1: 
1:     /**
1:      * @see BundleStateMBean#SYMBOLIC_NAME_ITEM
1:      */
1:     private String bundleSymbolicName;
1: 
1:     /**
1:      * @see BundleStateMBean#EVENT_ITEM
1:      */
1:     private int eventType;
1: 
1:     private BundleEventData() {
1:         super();
1:     }
1: 
1:     public BundleEventData(BundleEvent bundleEvent) {
1:         this.eventType = bundleEvent.getType();
1:         Bundle bundle = bundleEvent.getBundle();
1:         this.bundleId = bundle.getBundleId();
1:         this.location = bundle.getLocation();
1:         this.bundleSymbolicName = bundle.getSymbolicName();
1:     }
1: 
1:     /**
1:      * Returns CompositeData representing a BundleEvent typed by {@link BundleStateMBean#BUNDLE_EVENT_TYPE}
1:      * 
1:      * @return
1:      */
1:     public CompositeData toCompositeData() {
1:         CompositeData result = null;
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(IDENTIFIER, this.bundleId);
1:         items.put(SYMBOLIC_NAME, this.bundleSymbolicName);
1:         items.put(LOCATION, this.location);
1:         items.put(EVENT, this.eventType);
1:         try {
1:             result = new CompositeDataSupport(BUNDLE_EVENT_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Failed to create CompositeData for BundleEvent for Bundle ["
1:                     + this.bundleId + "]", e);
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * Returns a <code>BundleEventData</code> representation of the given compositeData
1:      * 
1:      * @param compositeData
1:      * @return
1:      * @throws IllegalArgumentException
1:      *             if the compositeData is null or incorrect type
1:      */
1:     public static BundleEventData from(CompositeData compositeData) throws IllegalArgumentException {
1:         BundleEventData eventData = new BundleEventData();
1:         if (compositeData == null) {
1:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:         }
1:         if (!compositeData.getCompositeType().equals(BUNDLE_EVENT_TYPE)) {
1:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:         }
1:         eventData.bundleId = (Long) compositeData.get(IDENTIFIER);
1:         eventData.bundleSymbolicName = (String) compositeData.get(SYMBOLIC_NAME);
1:         eventData.eventType = (Integer) compositeData.get(EVENT);
1:         eventData.location = (String) compositeData.get(LOCATION);
1:         return eventData;
1:     }
1: 
1:     public long getBundleId() {
1:         return bundleId;
1:     }
1: 
1:     public String getLocation() {
1:         return location;
1:     }
1: 
1:     public String getBundleSymbolicName() {
1:         return bundleSymbolicName;
1:     }
1: 
1:     public int getEventType() {
1:         return eventType;
1:     }
1: }
============================================================================