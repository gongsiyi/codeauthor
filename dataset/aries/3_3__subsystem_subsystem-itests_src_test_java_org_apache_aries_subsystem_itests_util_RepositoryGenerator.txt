1:ad877b6: /*
1:ad877b6:  * Licensed under the Apache License, Version 2.0 (the "License");
1:ad877b6:  * you may not use this file except in compliance with the License.
1:ad877b6:  * You may obtain a copy of the License at
1:ad877b6:  *
1:ad877b6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ad877b6:  *
1:ad877b6:  * Unless required by applicable law or agreed to in writing, software
1:ad877b6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad877b6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad877b6:  * See the License for the specific language governing permissions and
1:ad877b6:  * limitations under the License.
3:ad877b6:  */
1:ad877b6: package org.apache.aries.subsystem.itests.util;
21:ad877b6: 
1:ad877b6: import java.io.File;
1:ad877b6: import java.io.FileOutputStream;
1:ad877b6: import java.util.ArrayList;
1:ad877b6: import java.util.HashSet;
1:ad877b6: import java.util.List;
1:ad877b6: import java.util.Map;
1:ad877b6: import java.util.Set;
1:ad877b6: import java.util.SortedSet;
1:ad877b6: 
1:ad877b6: import javax.xml.transform.TransformerFactory;
1:ad877b6: import javax.xml.transform.dom.DOMSource;
1:ad877b6: import javax.xml.transform.stream.StreamResult;
1:ad877b6: 
1:ad877b6: import org.apache.aries.application.Content;
1:ad877b6: import org.apache.aries.application.management.BundleInfo;
1:48360fa: import org.apache.aries.subsystem.util.felix.FelixResourceAdapter;
1:48360fa: import org.apache.aries.subsystem.util.felix.OsgiResourceAdapter;
1:ad877b6: import org.apache.felix.bundlerepository.Reason;
1:ad877b6: import org.apache.felix.bundlerepository.Repository;
1:ad877b6: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:ad877b6: import org.apache.felix.bundlerepository.Resolver;
1:ad877b6: import org.osgi.framework.BundleContext;
1:ad877b6: import org.osgi.framework.ServiceReference;
1:ad877b6: import org.osgi.framework.Version;
1:a1c6951: import org.osgi.framework.namespace.IdentityNamespace;
1:71fe81a: import org.osgi.resource.Resource;
1:ad877b6: import org.osgi.service.subsystem.SubsystemException;
1:ad877b6: import org.slf4j.Logger;
1:ad877b6: import org.slf4j.LoggerFactory;
1:ad877b6: import org.w3c.dom.Document;
1:ad877b6: 
1:ad877b6: public class RepositoryGenerator {
1:ad877b6:     private static final Logger LOGGER = LoggerFactory
1:ad877b6:             .getLogger(RepositoryGenerator.class);
1:5ddaa55:     private static final String REPOSITORY_FILE = "repository-subsystems.xml";
1:ad877b6: 
1:ad877b6:     final private BundleContext context;
1:ad877b6:     private RepositoryAdmin repositoryAdmin;
1:ad877b6:     private static boolean generated = false;
1:ad877b6:     private String obrPath;
1:ad877b6: 
1:ad877b6:     public RepositoryGenerator(BundleContext context) {
1:ad877b6:         this.context = context;
24:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public RepositoryGenerator(BundleContext context, String obrPath) {
1:ad877b6:         this.context = context;
1:ad877b6:         this.obrPath = obrPath;
1:ad877b6:     }
1:ad877b6:     
1:ad877b6:     public  void generateOBR() {
1:ad877b6:         if (generated) {
1:ad877b6:             return;
1:ad877b6:         }
1:ad877b6:         synchronized(this) {
1:ad877b6:             if (obrPath == null) {
1:ad877b6:                 // set to a default obr file which is local m2 repo
1:ad877b6:                 String file = System.getProperty("user.home") + "/.m2/repository/";
1:ad877b6:                 if (new File(file).exists()) {
1:ad877b6:                     obrPath = file;
1:ad877b6:                 }
1:ad877b6:     
1:ad877b6:             }
1:ad877b6:             
1:ad877b6:             // if repository.xml already exists, no need to generate it
1:5ddaa55:             if (new File(obrPath + REPOSITORY_FILE).exists()) {
1:ad877b6:                 registerOBR();
1:ad877b6:                 generated = true;
1:ad877b6:                 return;
1:ad877b6:             }
1:ad877b6:     
1:ad877b6:             File rootFile = new File(obrPath);
1:ad877b6:             if (!rootFile.exists() || !rootFile.isDirectory()) {
1:ad877b6:                 throw new IllegalArgumentException("obr path " + obrPath
1:ad877b6:                         + " is not valid");
1:ad877b6:             }
1:ad877b6:     
1:ad877b6:             Manve2Repository repo = new Manve2Repository(rootFile);
1:ad877b6:     
1:ad877b6:             SortedSet<String> ss = repo.listFiles();
1:ad877b6:             Set<BundleInfo> infos = new HashSet<BundleInfo>();
1:ad877b6:     
1:ad877b6:             for (String s : ss) {
1:ad877b6:                 BundleInfo info = new BundleInfoImpl(s);
1:ad877b6:                 infos.add(info);
1:ad877b6:             }
1:ad877b6:     
1:ad877b6:             Document doc;
1:ad877b6:             try {
1:ad877b6:                 doc = RepositoryDescriptorGenerator.generateRepositoryDescriptor(
1:ad877b6:                         "Subsystem Repository description", infos);
1:ad877b6:                 FileOutputStream fout = new FileOutputStream(obrPath
1:5ddaa55:                         + REPOSITORY_FILE);
1:ad877b6:     
1:ad877b6:                 TransformerFactory.newInstance().newTransformer().transform(
1:ad877b6:                         new DOMSource(doc), new StreamResult(fout));
1:ad877b6:     
1:ad877b6:                 fout.close();
1:ad877b6:     
1:ad877b6:                 TransformerFactory.newInstance().newTransformer().transform(
1:ad877b6:                         new DOMSource(doc), new StreamResult(System.out));
1:ad877b6:             } catch (Exception e) {
1:ad877b6:                 LOGGER.error("Exception occurred when generate obr", e);
1:ad877b6:                 e.printStackTrace();
1:ad877b6:             }
1:ad877b6:     
1:ad877b6:             registerOBR();
1:ad877b6:             
1:ad877b6:             generated = true;
1:ad877b6: 
1:ad877b6:         }
1:ad877b6: 
1:ad877b6:     }
1:ad877b6: 
1:ad877b6: 	private void registerOBR() {
1:ad877b6:         // set repositoryAdmin
1:11d09f4:         ServiceReference ref = context.getServiceReference(RepositoryAdmin.class);
1:ad877b6:         
1:ad877b6:         if (ref != null) {
1:ad877b6:             this.repositoryAdmin = (RepositoryAdmin) context.getService(ref);
1:ad877b6:     
1:ad877b6:             try {
1:ad877b6:                 this.repositoryAdmin.addRepository(new File(obrPath
1:5ddaa55:                         + REPOSITORY_FILE).toURI().toURL());
1:ad877b6:             } catch (Exception e) {
1:ad877b6:                 LOGGER.warn("Exception occurred when register obr", e);
1:ad877b6:                 e.printStackTrace();
1:ad877b6:             }
1:ad877b6:     
1:ad877b6:             this.context.ungetService(ref);
1:ad877b6:         } else {
1:ad877b6:             LOGGER.error("Unable to register OBR as RepositoryAdmin service is not available");
1:ad877b6:         }
1:ad877b6: 
1:ad877b6:     }
1:ad877b6: 
3:ad877b6:     /**
2:ad877b6:      * the format of resource is like bundlesymbolicname;version=1.0.0, for example com.ibm.ws.eba.example.blog.api;version=1.0.0,
1:ad877b6:      */
1:57b6627:     @SuppressWarnings({ "rawtypes", "unused" })
1:ad877b6: 	public Resource find(String resource) throws SubsystemException {
1:ad877b6:         generateOBR();
1:ad877b6:         
1:ad877b6:         Content content = new ContentImpl(resource);
1:ad877b6:         
1:ad877b6:         String symbolicName = content.getContentName();
2:ad877b6:         // this version could possibly be a range
1:ad877b6:         String version = content.getVersion().toString();
1:ad877b6:         StringBuilder filterString = new StringBuilder();
1:ad877b6:         filterString.append("(&(name" + "=" + symbolicName + "))");
1:ad877b6:         filterString.append("(version" + "=" + version + "))");
1:ad877b6: 
2:ad877b6:         //org.apache.felix.bundlerepository.Resource[] res = this.repositoryAdmin.discoverResources(filterString.toString());
2:ad877b6:         Repository[] repos = this.repositoryAdmin.listRepositories();
2:ad877b6:         org.apache.felix.bundlerepository.Resource res = null;
2:ad877b6:         for (Repository repo : repos) {
2:ad877b6:             org.apache.felix.bundlerepository.Resource[] resources = repo.getResources();
2:ad877b6:             for (int i = 0; i < resources.length; i++) {
2:ad877b6:                 if (resources[i].getSymbolicName().equals(symbolicName)) {
1:ad877b6:                     if (resources[i].getVersion().compareTo(new Version(version)) == 0) {
2:ad877b6:                         res = resources[i];
1:ad877b6:                         break;
1:ad877b6:                     }
1:ad877b6:                 }
1:ad877b6:             }
1:ad877b6:         }
1:ad877b6:         if (res == null) {
1:ad877b6: //            throw new SubsystemException("unable to find the resource " + resource);
6:ad877b6:         	return null;
1:ad877b6:         }
1:ad877b6:         
1:ad877b6:         Map props = res.getProperties();
1:ad877b6:         
1:ad877b6: 
1:a1c6951:         Object type = props.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
1:ad877b6: 
1:ad877b6:         return new FelixResourceAdapter(res);
1:ad877b6:     }
1:ad877b6: 
1:ad877b6:     public List<Resource> resolve(List<Resource> subsystemContent,
1:ad877b6:             List<Resource> subsystemResources) throws SubsystemException {
1:ad877b6:         generateOBR();
1:ad877b6:         if (LOGGER.isDebugEnabled()) {
1:ad877b6:             LOGGER.debug("Attempt to resolve subsystem content {} subsystem resource {}", subsystemContent.toString(), subsystemResources.toString());
1:ad877b6:         }
1:ad877b6:         Resolver obrResolver = this.repositoryAdmin.resolver();
1:ad877b6:         
1:ad877b6:         // add subsystem content to the resolver
1:ad877b6:         for (Resource res : subsystemContent) {
1:ad877b6: //            org.apache.felix.bundlerepository.Resource obrRes = findOBRResource(res);
1:ad877b6: //            obrResolver.add(obrRes);
1:ad877b6:             obrResolver.add(new OsgiResourceAdapter(res));
1:ad877b6:         }
1:ad877b6:         
1:ad877b6:         // add subsystem resource to the resolver
1:ad877b6:         for (Resource res : subsystemResources) {
1:ad877b6: //            org.apache.felix.bundlerepository.Resource obrRes = findOBRResource(res);
1:ad877b6: //            obrResolver.add(obrRes);
1:ad877b6:         	obrResolver.add(new OsgiResourceAdapter(res));
1:ad877b6:         }
1:ad877b6:         
1:ad877b6:         // Question: do we need to create the repository.xml for the subsystem and add the repo to RepoAdmin?
1:ad877b6:         List<Resource> resources = new ArrayList<Resource>();
1:ad877b6:         if (obrResolver.resolve()) {
1:ad877b6:             for (org.apache.felix.bundlerepository.Resource res : obrResolver.getRequiredResources()) {
1:ad877b6: //                resources.add(toResource(res));
1:ad877b6:             	resources.add(new FelixResourceAdapter(res));
1:ad877b6:             }
1:ad877b6:             
1:ad877b6:             // Question: should we handle optional resource differently?
1:ad877b6:             for (org.apache.felix.bundlerepository.Resource res : obrResolver.getOptionalResources()) {
1:ad877b6: //                resources.add(toResource(res));
1:ad877b6:             	resources.add(new FelixResourceAdapter(res));
1:ad877b6:             }
1:ad877b6:         } else {
1:ad877b6:             // log the unsatisfied requirement
1:ad877b6:             Reason[] reasons = obrResolver.getUnsatisfiedRequirements();
1:ad877b6:             StringBuilder builder = new StringBuilder("Failed to resolve subsystem").append(System.getProperty("line.separator"));
1:ad877b6:             for (Reason reason : reasons) {
1:ad877b6:                 LOGGER.warn("Unable to resolve subsystem content {} subsystem resource {} because of unsatisfied requirement {}", 
1:ad877b6:                         new Object[] {subsystemContent.toString(), subsystemResources.toString(), reason.getRequirement().getName()});
1:ad877b6:                 builder
1:ad877b6:                 	.append("resource = ")
1:ad877b6:                 	.append(reason.getResource().getSymbolicName())
1:ad877b6:                 	.append(", requirement = ")
1:ad877b6:                 	.append(reason.getRequirement().getName())
1:ad877b6:                 	.append(System.getProperty("line.separator"));
1:ad877b6:             }
1:ad877b6:             throw new SubsystemException(builder.toString());
1:ad877b6:         }
1:ad877b6:         return resources;
1:ad877b6:     }
1:ad877b6: 
1:ad877b6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:48360fa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.util.felix.FelixResourceAdapter;
1: import org.apache.aries.subsystem.util.felix.OsgiResourceAdapter;
commit:5ddaa55
/////////////////////////////////////////////////////////////////////////
1:     private static final String REPOSITORY_FILE = "repository-subsystems.xml";
/////////////////////////////////////////////////////////////////////////
1:             if (new File(obrPath + REPOSITORY_FILE).exists()) {
/////////////////////////////////////////////////////////////////////////
1:                         + REPOSITORY_FILE);
/////////////////////////////////////////////////////////////////////////
1:                         + REPOSITORY_FILE).toURI().toURL());
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.internal.ResourceHelper;
commit:276997f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.itests.obr.felix.FelixResourceAdapter;
0: import org.apache.aries.subsystem.itests.obr.felix.OsgiResourceAdapter;
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
/////////////////////////////////////////////////////////////////////////
0: 				for (org.osgi.resource.Capability capability : resource.getCapabilities(null)) {
commit:a1c6951
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
/////////////////////////////////////////////////////////////////////////
1:         Object type = props.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
/////////////////////////////////////////////////////////////////////////
0:         Object type = props.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.ResourceConstants;
/////////////////////////////////////////////////////////////////////////
0:         Object type = props.get(ResourceConstants.IDENTITY_TYPE_ATTRIBUTE);
/////////////////////////////////////////////////////////////////////////
0:         Object type = props.get(ResourceConstants.IDENTITY_TYPE_ATTRIBUTE);
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Resource;
/////////////////////////////////////////////////////////////////////////
0:         Object type = props.get(SubsystemConstants.IDENTITY_TYPE_ATTRIBUTE);
/////////////////////////////////////////////////////////////////////////
0:         Object type = props.get(SubsystemConstants.IDENTITY_TYPE_ATTRIBUTE);
/////////////////////////////////////////////////////////////////////////
0: 				for (org.osgi.framework.resource.Capability capability : resource.getCapabilities(null)) {
commit:ad877b6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.SortedSet;
1: 
1: import javax.xml.transform.TransformerFactory;
1: import javax.xml.transform.dom.DOMSource;
1: import javax.xml.transform.stream.StreamResult;
1: 
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.subsystem.core.ResourceHelper;
0: import org.apache.aries.subsystem.core.obr.felix.FelixResourceAdapter;
0: import org.apache.aries.subsystem.core.obr.felix.OsgiResourceAdapter;
0: import org.apache.felix.bundlerepository.Capability;
0: import org.apache.felix.bundlerepository.Property;
1: import org.apache.felix.bundlerepository.Reason;
1: import org.apache.felix.bundlerepository.Repository;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
0: import org.apache.felix.bundlerepository.Requirement;
1: import org.apache.felix.bundlerepository.Resolver;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
0: import org.osgi.framework.wiring.Resource;
0: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.w3c.dom.Document;
1: 
1: public class RepositoryGenerator {
1:     private static final Logger LOGGER = LoggerFactory
1:             .getLogger(RepositoryGenerator.class);
1: 
1:     final private BundleContext context;
1:     private RepositoryAdmin repositoryAdmin;
1:     private static boolean generated = false;
1:     private String obrPath;
1: 
1:     public RepositoryGenerator(BundleContext context) {
1:         this.context = context;
1:     }
1: 
1:     public RepositoryGenerator(BundleContext context, String obrPath) {
1:         this.context = context;
1:         this.obrPath = obrPath;
1:     }
1:     
1:     public  void generateOBR() {
1:         if (generated) {
1:             return;
1:         }
1:         synchronized(this) {
1:             if (obrPath == null) {
1:                 // set to a default obr file which is local m2 repo
1:                 String file = System.getProperty("user.home") + "/.m2/repository/";
1:                 if (new File(file).exists()) {
1:                     obrPath = file;
1:                 }
1:     
1:             }
1:             
1:             // if repository.xml already exists, no need to generate it
0:             if (new File(obrPath + "repository.xml").exists()) {
1:                 registerOBR();
1:                 generated = true;
1:                 return;
1:             }
1:     
1:             File rootFile = new File(obrPath);
1:             if (!rootFile.exists() || !rootFile.isDirectory()) {
1:                 throw new IllegalArgumentException("obr path " + obrPath
1:                         + " is not valid");
1:             }
1:     
1:             Manve2Repository repo = new Manve2Repository(rootFile);
1:     
1:             SortedSet<String> ss = repo.listFiles();
1:             Set<BundleInfo> infos = new HashSet<BundleInfo>();
1:     
1:             for (String s : ss) {
1:                 BundleInfo info = new BundleInfoImpl(s);
1:                 infos.add(info);
1:             }
1:     
1:             Document doc;
1:             try {
1:                 doc = RepositoryDescriptorGenerator.generateRepositoryDescriptor(
1:                         "Subsystem Repository description", infos);
1:                 FileOutputStream fout = new FileOutputStream(obrPath
0:                         + "repository.xml");
1:     
1:                 TransformerFactory.newInstance().newTransformer().transform(
1:                         new DOMSource(doc), new StreamResult(fout));
1:     
1:                 fout.close();
1:     
1:                 TransformerFactory.newInstance().newTransformer().transform(
1:                         new DOMSource(doc), new StreamResult(System.out));
1:             } catch (Exception e) {
1:                 LOGGER.error("Exception occurred when generate obr", e);
1:                 e.printStackTrace();
1:             }
1:     
1:             registerOBR();
1:             
1:             generated = true;
1: 
1:         }
1: 
1:     }
1: 
1:     private void registerOBR() {
1:         // set repositoryAdmin
0:         ServiceReference ref = context
0:                 .getServiceReference(RepositoryAdmin.class.getName());
1:         
1:         if (ref != null) {
1:             this.repositoryAdmin = (RepositoryAdmin) context.getService(ref);
1:     
1:             try {
1:                 this.repositoryAdmin.addRepository(new File(obrPath
0:                         + "repository.xml").toURI().toURL());
1:             } catch (Exception e) {
1:                 LOGGER.warn("Exception occurred when register obr", e);
1:                 e.printStackTrace();
1:             }
1:     
1:             this.context.ungetService(ref);
1:         } else {
1:             LOGGER.error("Unable to register OBR as RepositoryAdmin service is not available");
1:         }
1: 
1:     }
1: 
1:     /**
1:      * the format of resource is like bundlesymbolicname;version=1.0.0, for example com.ibm.ws.eba.example.blog.api;version=1.0.0,
1:      */
1:     public Resource find(String resource) throws SubsystemException {
1:         generateOBR();
1:         
1:         Content content = new ContentImpl(resource);
1:         
1:         String symbolicName = content.getContentName();
1:         // this version could possibly be a range
1:         String version = content.getVersion().toString();
1:         StringBuilder filterString = new StringBuilder();
1:         filterString.append("(&(name" + "=" + symbolicName + "))");
1:         filterString.append("(version" + "=" + version + "))");
1: 
1:         //org.apache.felix.bundlerepository.Resource[] res = this.repositoryAdmin.discoverResources(filterString.toString());
1:         Repository[] repos = this.repositoryAdmin.listRepositories();
1:         org.apache.felix.bundlerepository.Resource res = null;
1:         for (Repository repo : repos) {
1:             org.apache.felix.bundlerepository.Resource[] resources = repo.getResources();
1:             for (int i = 0; i < resources.length; i++) {
1:                 if (resources[i].getSymbolicName().equals(symbolicName)) {
1:                     if (resources[i].getVersion().compareTo(new Version(version)) == 0) {
1:                         res = resources[i];
1:                         break;
1:                     }
1:                 }
1:             }
1:         }
1:         if (res == null) {
1: //            throw new SubsystemException("unable to find the resource " + resource);
1:         	return null;
1:         }
1:         
1:         Map props = res.getProperties();
1:         
1: 
0:         Object type = props.get(SubsystemConstants.RESOURCE_TYPE_ATTRIBUTE);
1: 
1:         return new FelixResourceAdapter(res);
1:     }
1:     
1:     /**
1:      * the format of resource is like bundlesymbolicname;version=1.0.0, for example com.ibm.ws.eba.example.blog.api;version=1.0.0,
1:      */
0:     private org.apache.felix.bundlerepository.Resource findOBRResource(Resource resource) throws SubsystemException {
0:         String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:         // this version could possibly be a range
0:         Version version = ResourceHelper.getVersionAttribute(resource);
1: 
1:         //org.apache.felix.bundlerepository.Resource[] res = this.repositoryAdmin.discoverResources(filterString.toString());
1:         Repository[] repos = this.repositoryAdmin.listRepositories();
1:         org.apache.felix.bundlerepository.Resource res = null;
1:         for (Repository repo : repos) {
1:             org.apache.felix.bundlerepository.Resource[] resources = repo.getResources();
1:             for (int i = 0; i < resources.length; i++) {
1:                 if (resources[i].getSymbolicName().equals(symbolicName)) {
0:                     if (resources[i].getVersion().compareTo(version) == 0) {
1:                         res = resources[i];
1:                     }
1:                 }
1:             }
1:         }
0:         return res;
1:     }
1: 
1:     /**
0:      * convert to the resource from the obr resource
1:      */
0:     private Resource toResource(org.apache.felix.bundlerepository.Resource resource) throws SubsystemException {
0:         if (resource == null) {
0:             throw new SubsystemException("unable to find the resource " + resource);
1:         }
1:         
0:         Map props = resource.getProperties();
1:         
1: 
0:         Object type = props.get(SubsystemConstants.RESOURCE_TYPE_ATTRIBUTE);
1: 
0:         return new FelixResourceAdapter(resource);
1:     }
1:     
1:     public List<Resource> resolve(List<Resource> subsystemContent,
1:             List<Resource> subsystemResources) throws SubsystemException {
1:         generateOBR();
1:         if (LOGGER.isDebugEnabled()) {
1:             LOGGER.debug("Attempt to resolve subsystem content {} subsystem resource {}", subsystemContent.toString(), subsystemResources.toString());
1:         }
1:         Resolver obrResolver = this.repositoryAdmin.resolver();
1:         
1:         // add subsystem content to the resolver
1:         for (Resource res : subsystemContent) {
1: //            org.apache.felix.bundlerepository.Resource obrRes = findOBRResource(res);
1: //            obrResolver.add(obrRes);
1:             obrResolver.add(new OsgiResourceAdapter(res));
1:         }
1:         
1:         // add subsystem resource to the resolver
1:         for (Resource res : subsystemResources) {
1: //            org.apache.felix.bundlerepository.Resource obrRes = findOBRResource(res);
1: //            obrResolver.add(obrRes);
1:         	obrResolver.add(new OsgiResourceAdapter(res));
1:         }
1:         
1:         // Question: do we need to create the repository.xml for the subsystem and add the repo to RepoAdmin?
1:         List<Resource> resources = new ArrayList<Resource>();
1:         if (obrResolver.resolve()) {
1:             for (org.apache.felix.bundlerepository.Resource res : obrResolver.getRequiredResources()) {
1: //                resources.add(toResource(res));
1:             	resources.add(new FelixResourceAdapter(res));
1:             }
1:             
1:             // Question: should we handle optional resource differently?
1:             for (org.apache.felix.bundlerepository.Resource res : obrResolver.getOptionalResources()) {
1: //                resources.add(toResource(res));
1:             	resources.add(new FelixResourceAdapter(res));
1:             }
1:         } else {
1:             // log the unsatisfied requirement
1:             Reason[] reasons = obrResolver.getUnsatisfiedRequirements();
1:             StringBuilder builder = new StringBuilder("Failed to resolve subsystem").append(System.getProperty("line.separator"));
1:             for (Reason reason : reasons) {
1:                 LOGGER.warn("Unable to resolve subsystem content {} subsystem resource {} because of unsatisfied requirement {}", 
1:                         new Object[] {subsystemContent.toString(), subsystemResources.toString(), reason.getRequirement().getName()});
1:                 builder
1:                 	.append("resource = ")
1:                 	.append(reason.getResource().getSymbolicName())
1:                 	.append(", requirement = ")
1:                 	.append(reason.getRequirement().getName())
1:                 	.append(System.getProperty("line.separator"));
1:             }
1:             throw new SubsystemException(builder.toString());
1:         }
1:         return resources;
1:     }
1:     
0:     private org.apache.felix.bundlerepository.Resource convert(final Resource resource) {
0:     	return new org.apache.felix.bundlerepository.Resource() {
0: 			public Capability[] getCapabilities() {
0: 				Collection<Capability> result = new ArrayList<Capability>(resource.getCapabilities(null).size());
0: 				for (org.osgi.framework.wiring.Capability capability : resource.getCapabilities(null)) {
0: 					result.add(new Capability() {
0: 						public String getName() {
0: 							// TODO Auto-generated method stub
1: 							return null;
1: 						}
1: 
0: 						public Property[] getProperties() {
0: 							// TODO Auto-generated method stub
1: 							return null;
1: 						}
1: 
0: 						public Map getPropertiesAsMap() {
0: 							// TODO Auto-generated method stub
1: 							return null;
1: 						}
0: 					});
1: 				}
1: 				return null;
1: 			}
1: 
0: 			public String[] getCategories() {
0: 				return new String[0];
1: 			}
1: 
0: 			public String getId() {
0: 				return getSymbolicName() + ";version=" + getVersion();
1: 			}
1: 
0: 			public String getPresentationName() {
0: 				return getSymbolicName();
1: 			}
1: 
0: 			public Map getProperties() {
0: 				return Collections.EMPTY_MAP;
1: 			}
1: 
0: 			public Requirement[] getRequirements() {
0: 				// TODO Auto-generated method stub
1: 				return null;
1: 			}
1: 
0: 			public Long getSize() {
0: 				return 0L;
1: 			}
1: 
0: 			public String getSymbolicName() {
0: 				return ResourceHelper.getSymbolicNameAttribute(resource);
1: 			}
1: 
0: 			public String getURI() {
0: 				return ResourceHelper.getContentAttribute(resource);
1: 			}
1: 
0: 			public Version getVersion() {
0: 				return ResourceHelper.getVersionAttribute(resource);
1: 			}
1: 
0: 			public boolean isLocal() {
0: 				return false;
1: 			}
0:     	};
1:     }
1: 
1: }
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:11d09f4
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference ref = context.getServiceReference(RepositoryAdmin.class);
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	private void registerOBR() {
0:         ServiceReference<RepositoryAdmin> ref = context.getServiceReference(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "rawtypes", "unused" })
0: 	public Resource find(String resource) throws SubsystemException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================