1:fdf3952: /*
1:fdf3952:  * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
1:65b0a8e:  *
1:fdf3952:  * Licensed under the Apache License, Version 2.0 (the "License");
1:fdf3952:  * you may not use this file except in compliance with the License.
1:fdf3952:  * You may obtain a copy of the License at
9:fdf3952:  *
1:fdf3952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing, software
1:fdf3952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  * See the License for the specific language governing permissions and
1:fdf3952:  * limitations under the License.
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: package org.osgi.jmx;
1:fdf3952: 
1:fdf3952: import java.util.Arrays;
1:fdf3952: import java.util.Collections;
1:fdf3952: import java.util.List;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.ArrayType;
1:fdf3952: import javax.management.openmbean.CompositeType;
1:fdf3952: import javax.management.openmbean.SimpleType;
1:fdf3952: import javax.management.openmbean.TabularType;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * Constants for OSGi JMX Specification.
1:65b0a8e:  *
1:fdf3952:  * Additionally, this class contains a number of utility types that are used in
1:fdf3952:  * different places in the specification. These are {@link #LONG_ARRAY_TYPE},
1:fdf3952:  * {@link #STRING_ARRAY_TYPE}, and {@link #PROPERTIES_TYPE}.
1:65b0a8e:  *
1:fdf3952:  * @version $Rev$
1:fdf3952:  * @Immutable
1:fdf3952:  */
1:fdf3952: public class JmxConstants {
1:fdf3952: 
1:fdf3952: 	/*
1:fdf3952: 	 * Empty constructor to make sure this is not used as an object.
1:fdf3952: 	 */
1:fdf3952: 	private JmxConstants() {
1:fdf3952: 		// empty
1:fdf3952: 	}
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The MBean Open type for an array of strings
1:fdf3952: 	 */
1:8624fd8: 	public static final ArrayType<String>		STRING_ARRAY_TYPE	= Item
1:fdf3952: 																	.arrayType(
1:fdf3952: 																			1,
1:fdf3952: 																			SimpleType.STRING);
1:fdf3952: 	/**
1:fdf3952: 	 * The MBean Open type for an array of longs
1:fdf3952: 	 */
1:8624fd8: 	public static final ArrayType<Long>		LONG_ARRAY_TYPE		= Item
1:fdf3952: 																	.arrayType(
1:fdf3952: 																			1,
1:fdf3952: 																			SimpleType.LONG);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * For an encoded array we need to start with ARRAY_OF. This must be
1:fdf3952: 	 * followed by one of the names in {@link #SCALAR}.
1:65b0a8e: 	 *
1:fdf3952: 	 */
1:fdf3952: 	public final static String			ARRAY_OF			= "Array of ";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * For an encoded vector we need to start with ARRAY_OF. This must be
1:fdf3952: 	 * followed by one of the names in {@link #SCALAR}.
1:fdf3952: 	 */
1:fdf3952: 	public final static String			VECTOR_OF			= "Vector of ";
1:fdf3952: 
1:65b0a8e:     /**
1:65b0a8e:      * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:65b0a8e:      * {@link org.osgi.framework.Version}
1:65b0a8e:      */
1:65b0a8e:     public static final String          VERSION             = "Version";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.String}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			STRING				= "String";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.Integer}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			INTEGER				= "Integer";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.Long}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			LONG				= "Long";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.Float}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			FLOAT				= "Float";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.Double}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			DOUBLE				= "Double";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.Byte}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			BYTE				= "Byte";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.Short}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			SHORT				= "Short";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.Character}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			CHARACTER			= "Character";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.lang.Boolean}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			BOOLEAN				= "Boolean";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.math.BigDecimal}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			BIGDECIMAL			= "BigDecimal";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * {@link java.math.BigInteger}
1:fdf3952: 	 */
1:fdf3952: 	public static final String			BIGINTEGER			= "BigInteger";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * the <code>double</code> primitive type.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			P_DOUBLE			= "double";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * the <code>float</code> primitive type.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			P_FLOAT				= "float";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * the <code>long</code> primitive type.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			P_LONG				= "long";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * the <code>int</code> primitive type.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			P_INT				= "int";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * the <code>short</code> primitive type.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			P_SHORT				= "short";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * the <code>byte</code> primitive type.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			P_BYTE				= "byte";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * the <code>char</code> primitive type.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			P_CHAR				= "char";
1:fdf3952: 	/**
1:fdf3952: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:fdf3952: 	 * the <code>boolean</code> primitive type.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			P_BOOLEAN			= "boolean";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * A set of all scalars that can be used in the {@link #TYPE} property of a
1:fdf3952: 	 * {@link #PROPERTIES_TYPE}. This contains the following names:
1:fdf3952: 	 * <ul>
1:fdf3952: 	 * <li>{@link #BIGDECIMAL}</li>
1:fdf3952: 	 * <li>{@link #BIGINTEGER}</li>
1:fdf3952: 	 * <li>{@link #BOOLEAN}</li>
1:fdf3952: 	 * <li>{@link #BYTE}</li>
1:fdf3952: 	 * <li>{@link #CHARACTER}</li>
1:fdf3952: 	 * <li>{@link #DOUBLE}</li>
1:fdf3952: 	 * <li>{@link #FLOAT}</li>
1:fdf3952: 	 * <li>{@link #INTEGER}</li>
1:fdf3952: 	 * <li>{@link #LONG}</li>
1:fdf3952: 	 * <li>{@link #SHORT}</li>
1:fdf3952: 	 * <li>{@link #STRING}</li>
1:fdf3952: 	 * <li>{@link #P_BYTE}</li>
1:fdf3952: 	 * <li>{@link #P_CHAR}</li>
1:fdf3952: 	 * <li>{@link #P_DOUBLE}</li>
1:fdf3952: 	 * <li>{@link #P_FLOAT}</li>
1:fdf3952: 	 * <li>{@link #P_INT}</li>
1:fdf3952: 	 * <li>{@link #P_LONG}</li>
1:fdf3952: 	 * <li>{@link #P_SHORT}</li>
1:fdf3952: 	 */
1:fdf3952: 	public final static List<String>	SCALAR				= Collections
1:fdf3952: 																	.unmodifiableList(Arrays
1:fdf3952: 																			.asList(
1:fdf3952: 																					STRING,
1:fdf3952: 																					INTEGER,
1:fdf3952: 																					LONG,
1:fdf3952: 																					FLOAT,
1:fdf3952: 																					DOUBLE,
1:fdf3952: 																					BYTE,
1:fdf3952: 																					SHORT,
1:fdf3952: 																					CHARACTER,
1:fdf3952: 																					BOOLEAN,
1:fdf3952: 																					BIGDECIMAL,
1:fdf3952: 																					BIGINTEGER,
1:fdf3952: 																					P_BYTE,
1:fdf3952: 																					P_CHAR,
1:fdf3952: 																					P_SHORT,
1:fdf3952: 																					P_INT,
1:fdf3952: 																					P_LONG,
1:fdf3952: 																					P_DOUBLE,
1:fdf3952: 																					P_FLOAT));
1:fdf3952: 	/**
1:fdf3952: 	 * The key KEY.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			KEY					= "Key";
1:fdf3952: 	/**
1:fdf3952: 	 * The key of a property. The key is {@link #KEY} and the type is
1:fdf3952: 	 * {@link SimpleType#STRING}.
1:fdf3952: 	 */
1:fdf3952: 	public static final Item			KEY_ITEM			= new Item(
1:fdf3952: 																	KEY,
1:fdf3952: 																	"The key of the property",
1:fdf3952: 																	SimpleType.STRING);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key VALUE.
1:fdf3952: 	 */
1:fdf3952: 	public static final String			VALUE				= "Value";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The value of a property. The key is {@link #VALUE} and the type is
1:fdf3952: 	 * {@link SimpleType#STRING}. A value will be encoded by the string given in
1:fdf3952: 	 * {@link #TYPE}. The syntax for this type is given in {@link #TYPE_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	public static final Item			VALUE_ITEM			= new Item(
1:fdf3952: 																	VALUE,
1:fdf3952: 																	"The value of the property",
1:fdf3952: 																	SimpleType.STRING);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key PROPERTY_TYPE.
1:65b0a8e: 	 *
1:fdf3952: 	 * ### can we call this value PropertyType and service type ServiceType?
1:fdf3952: 	 */
1:fdf3952: 	public static final String			TYPE				= "Type";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The type of the property. The key is {@link #TYPE} and the type is
1:fdf3952: 	 * {@link SimpleType#STRING}. This string must follow the following syntax:
1:65b0a8e: 	 *
1:fdf3952: 	 * TYPE ::= ( 'Array of ' | 'Vector of ' )? {@link #SCALAR}
1:65b0a8e: 	 *
1:fdf3952: 	 * ### why can't we just use the class name?
1:65b0a8e: 	 *
1:fdf3952: 	 * ### why do we have to distinguish between primitives and wrappers?
1:fdf3952: 	 */
1:fdf3952: 	public static final Item			TYPE_ITEM			= new Item(
1:fdf3952: 																	TYPE,
1:fdf3952: 																	"The type of the property",
1:fdf3952: 																	SimpleType.STRING,
1:fdf3952: 																	STRING,
1:fdf3952: 																	INTEGER,
1:fdf3952: 																	LONG,
1:fdf3952: 																	FLOAT,
1:fdf3952: 																	DOUBLE,
1:fdf3952: 																	BYTE,
1:fdf3952: 																	SHORT,
1:fdf3952: 																	CHARACTER,
1:fdf3952: 																	BOOLEAN,
1:fdf3952: 																	BIGDECIMAL,
1:fdf3952: 																	BIGINTEGER,
1:fdf3952: 																	P_DOUBLE,
1:fdf3952: 																	P_FLOAT,
1:fdf3952: 																	P_LONG,
1:fdf3952: 																	P_INT,
1:fdf3952: 																	P_SHORT,
1:fdf3952: 																	P_CHAR,
1:fdf3952: 																	P_BYTE,
1:fdf3952: 																	P_BOOLEAN);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * A Composite Type describing a a single property. A property consists of
1:fdf3952: 	 * the following items {@link #KEY_ITEM}, {@link #VALUE_ITEM}, and
1:fdf3952: 	 * {@link #TYPE_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	public static final CompositeType	PROPERTY_TYPE		= Item
1:fdf3952: 																	.compositeType(
1:fdf3952: 																			"PROPERTY",
1:fdf3952: 																			"This type encapsulates a key/value pair",
1:fdf3952: 																			KEY_ITEM,
1:fdf3952: 																			VALUE_ITEM,
1:fdf3952: 																			TYPE_ITEM);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Describes a map with properties. The row type is {@link #PROPERTY_TYPE}.
1:fdf3952: 	 * The index is defined to the {@link #KEY} of the property.
1:fdf3952: 	 */
1:fdf3952: 	public static final TabularType		PROPERTIES_TYPE		= Item
1:fdf3952: 																	.tabularType(
1:fdf3952: 																			"PROPERTIES",
1:fdf3952: 																			"A table of PROPERTY",
1:fdf3952: 																			PROPERTY_TYPE,
1:fdf3952: 																			KEY);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The domain name of the core OSGi MBeans
1:fdf3952: 	 */
1:fdf3952: 	public static final String			OSGI_CORE			= "osgi.core";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The domain name of the selected OSGi compendium MBeans
1:fdf3952: 	 */
1:fdf3952: 	public static final String			OSGI_COMPENDIUM		= "osgi.compendium";
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:8624fd8
/////////////////////////////////////////////////////////////////////////
1: 	public static final ArrayType<String>		STRING_ARRAY_TYPE	= Item
1: 	public static final ArrayType<Long>		LONG_ARRAY_TYPE		= Item
commit:65b0a8e
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 	 *
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1:      * {@link org.osgi.framework.Version}
1:      */
1:     public static final String          VERSION             = "Version";
/////////////////////////////////////////////////////////////////////////
1: 	 *
/////////////////////////////////////////////////////////////////////////
1: 	 *
1: 	 *
1: 	 *
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.jmx;
1: 
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import javax.management.openmbean.ArrayType;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.SimpleType;
1: import javax.management.openmbean.TabularType;
1: 
1: /**
1:  * Constants for OSGi JMX Specification.
1:  * 
1:  * Additionally, this class contains a number of utility types that are used in
1:  * different places in the specification. These are {@link #LONG_ARRAY_TYPE},
1:  * {@link #STRING_ARRAY_TYPE}, and {@link #PROPERTIES_TYPE}.
1:  * 
1:  * @version $Rev$
1:  * @Immutable
1:  */
1: public class JmxConstants {
1: 
1: 	/*
1: 	 * Empty constructor to make sure this is not used as an object.
1: 	 */
1: 	private JmxConstants() {
1: 		// empty
1: 	}
1: 
1: 	/**
1: 	 * The MBean Open type for an array of strings
1: 	 */
0: 	public static final ArrayType		STRING_ARRAY_TYPE	= Item
1: 																	.arrayType(
1: 																			1,
1: 																			SimpleType.STRING);
1: 	/**
1: 	 * The MBean Open type for an array of longs
1: 	 */
0: 	public static final ArrayType		LONG_ARRAY_TYPE		= Item
1: 																	.arrayType(
1: 																			1,
1: 																			SimpleType.LONG);
1: 
1: 	/**
1: 	 * For an encoded array we need to start with ARRAY_OF. This must be
1: 	 * followed by one of the names in {@link #SCALAR}.
1: 	 * 
1: 	 */
1: 	public final static String			ARRAY_OF			= "Array of ";
1: 
1: 	/**
1: 	 * For an encoded vector we need to start with ARRAY_OF. This must be
1: 	 * followed by one of the names in {@link #SCALAR}.
1: 	 */
1: 	public final static String			VECTOR_OF			= "Vector of ";
1: 
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.String}
1: 	 */
1: 	public static final String			STRING				= "String";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.Integer}
1: 	 */
1: 	public static final String			INTEGER				= "Integer";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.Long}
1: 	 */
1: 	public static final String			LONG				= "Long";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.Float}
1: 	 */
1: 	public static final String			FLOAT				= "Float";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.Double}
1: 	 */
1: 	public static final String			DOUBLE				= "Double";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.Byte}
1: 	 */
1: 	public static final String			BYTE				= "Byte";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.Short}
1: 	 */
1: 	public static final String			SHORT				= "Short";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.Character}
1: 	 */
1: 	public static final String			CHARACTER			= "Character";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.lang.Boolean}
1: 	 */
1: 	public static final String			BOOLEAN				= "Boolean";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.math.BigDecimal}
1: 	 */
1: 	public static final String			BIGDECIMAL			= "BigDecimal";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * {@link java.math.BigInteger}
1: 	 */
1: 	public static final String			BIGINTEGER			= "BigInteger";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * the <code>double</code> primitive type.
1: 	 */
1: 	public static final String			P_DOUBLE			= "double";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * the <code>float</code> primitive type.
1: 	 */
1: 	public static final String			P_FLOAT				= "float";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * the <code>long</code> primitive type.
1: 	 */
1: 	public static final String			P_LONG				= "long";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * the <code>int</code> primitive type.
1: 	 */
1: 	public static final String			P_INT				= "int";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * the <code>short</code> primitive type.
1: 	 */
1: 	public static final String			P_SHORT				= "short";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * the <code>byte</code> primitive type.
1: 	 */
1: 	public static final String			P_BYTE				= "byte";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * the <code>char</code> primitive type.
1: 	 */
1: 	public static final String			P_CHAR				= "char";
1: 	/**
1: 	 * Value for {@link #PROPERTY_TYPE} <code>Type</code> value in the case of
1: 	 * the <code>boolean</code> primitive type.
1: 	 */
1: 	public static final String			P_BOOLEAN			= "boolean";
1: 
1: 	/**
1: 	 * A set of all scalars that can be used in the {@link #TYPE} property of a
1: 	 * {@link #PROPERTIES_TYPE}. This contains the following names:
1: 	 * <ul>
1: 	 * <li>{@link #BIGDECIMAL}</li>
1: 	 * <li>{@link #BIGINTEGER}</li>
1: 	 * <li>{@link #BOOLEAN}</li>
1: 	 * <li>{@link #BYTE}</li>
1: 	 * <li>{@link #CHARACTER}</li>
1: 	 * <li>{@link #DOUBLE}</li>
1: 	 * <li>{@link #FLOAT}</li>
1: 	 * <li>{@link #INTEGER}</li>
1: 	 * <li>{@link #LONG}</li>
1: 	 * <li>{@link #SHORT}</li>
1: 	 * <li>{@link #STRING}</li>
1: 	 * <li>{@link #P_BYTE}</li>
1: 	 * <li>{@link #P_CHAR}</li>
1: 	 * <li>{@link #P_DOUBLE}</li>
1: 	 * <li>{@link #P_FLOAT}</li>
1: 	 * <li>{@link #P_INT}</li>
1: 	 * <li>{@link #P_LONG}</li>
1: 	 * <li>{@link #P_SHORT}</li>
1: 	 */
1: 	public final static List<String>	SCALAR				= Collections
1: 																	.unmodifiableList(Arrays
1: 																			.asList(
1: 																					STRING,
1: 																					INTEGER,
1: 																					LONG,
1: 																					FLOAT,
1: 																					DOUBLE,
1: 																					BYTE,
1: 																					SHORT,
1: 																					CHARACTER,
1: 																					BOOLEAN,
1: 																					BIGDECIMAL,
1: 																					BIGINTEGER,
1: 																					P_BYTE,
1: 																					P_CHAR,
1: 																					P_SHORT,
1: 																					P_INT,
1: 																					P_LONG,
1: 																					P_DOUBLE,
1: 																					P_FLOAT));
1: 	/**
1: 	 * The key KEY.
1: 	 */
1: 	public static final String			KEY					= "Key";
1: 	/**
1: 	 * The key of a property. The key is {@link #KEY} and the type is
1: 	 * {@link SimpleType#STRING}.
1: 	 */
1: 	public static final Item			KEY_ITEM			= new Item(
1: 																	KEY,
1: 																	"The key of the property",
1: 																	SimpleType.STRING);
1: 
1: 	/**
1: 	 * The key VALUE.
1: 	 */
1: 	public static final String			VALUE				= "Value";
1: 
1: 	/**
1: 	 * The value of a property. The key is {@link #VALUE} and the type is
1: 	 * {@link SimpleType#STRING}. A value will be encoded by the string given in
1: 	 * {@link #TYPE}. The syntax for this type is given in {@link #TYPE_ITEM}.
1: 	 */
1: 	public static final Item			VALUE_ITEM			= new Item(
1: 																	VALUE,
1: 																	"The value of the property",
1: 																	SimpleType.STRING);
1: 
1: 	/**
1: 	 * The key PROPERTY_TYPE.
1: 	 * 
1: 	 * ### can we call this value PropertyType and service type ServiceType?
1: 	 */
1: 	public static final String			TYPE				= "Type";
1: 
1: 	/**
1: 	 * The type of the property. The key is {@link #TYPE} and the type is
1: 	 * {@link SimpleType#STRING}. This string must follow the following syntax:
1: 	 * 
1: 	 * TYPE ::= ( 'Array of ' | 'Vector of ' )? {@link #SCALAR}
1: 	 * 
1: 	 * ### why can't we just use the class name?
1: 	 * 
1: 	 * ### why do we have to distinguish between primitives and wrappers?
1: 	 */
1: 	public static final Item			TYPE_ITEM			= new Item(
1: 																	TYPE,
1: 																	"The type of the property",
1: 																	SimpleType.STRING,
1: 																	STRING,
1: 																	INTEGER,
1: 																	LONG,
1: 																	FLOAT,
1: 																	DOUBLE,
1: 																	BYTE,
1: 																	SHORT,
1: 																	CHARACTER,
1: 																	BOOLEAN,
1: 																	BIGDECIMAL,
1: 																	BIGINTEGER,
1: 																	P_DOUBLE,
1: 																	P_FLOAT,
1: 																	P_LONG,
1: 																	P_INT,
1: 																	P_SHORT,
1: 																	P_CHAR,
1: 																	P_BYTE,
1: 																	P_BOOLEAN);
1: 
1: 	/**
1: 	 * A Composite Type describing a a single property. A property consists of
1: 	 * the following items {@link #KEY_ITEM}, {@link #VALUE_ITEM}, and
1: 	 * {@link #TYPE_ITEM}.
1: 	 */
1: 	public static final CompositeType	PROPERTY_TYPE		= Item
1: 																	.compositeType(
1: 																			"PROPERTY",
1: 																			"This type encapsulates a key/value pair",
1: 																			KEY_ITEM,
1: 																			VALUE_ITEM,
1: 																			TYPE_ITEM);
1: 
1: 	/**
1: 	 * Describes a map with properties. The row type is {@link #PROPERTY_TYPE}.
1: 	 * The index is defined to the {@link #KEY} of the property.
1: 	 */
1: 	public static final TabularType		PROPERTIES_TYPE		= Item
1: 																	.tabularType(
1: 																			"PROPERTIES",
1: 																			"A table of PROPERTY",
1: 																			PROPERTY_TYPE,
1: 																			KEY);
1: 
1: 	/**
1: 	 * The domain name of the core OSGi MBeans
1: 	 */
1: 	public static final String			OSGI_CORE			= "osgi.core";
1: 
1: 	/**
1: 	 * The domain name of the selected OSGi compendium MBeans
1: 	 */
1: 	public static final String			OSGI_COMPENDIUM		= "osgi.compendium";
1: }
============================================================================