1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: import java.util.concurrent.Executor;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * A Builder for a PushStream. This Builder extends the support of a standard
1:7fa86e8:  * BufferBuilder by allowing the PushStream to be unbuffered.
1:7fa86e8:  * 
1:7fa86e8:  *
1:7fa86e8:  * @param <T> The type of objects in the {@link PushEvent}
1:7fa86e8:  * @param <U> The type of the Queue used in the user specified buffer
1:7fa86e8:  */
1:7fa86e8: public interface PushStreamBuilder<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1:7fa86e8: 		extends BufferBuilder<PushStream<T>,T,U> {
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Tells this {@link PushStreamBuilder} to create an unbuffered stream which
1:7fa86e8: 	 * delivers events directly to its consumer using the incoming delivery
1:7fa86e8: 	 * thread.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @return the builder
1:7fa86e8: 	 */
1:7fa86e8: 	PushStreamBuilder<T,U> unbuffered();
1:7fa86e8: 
1:7fa86e8: 	/*
1:7fa86e8: 	 * Overridden methods to allow the covariant return of a PushStreamBuilder
1:7fa86e8: 	 */
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	PushStreamBuilder<T,U> withBuffer(U queue);
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	PushStreamBuilder<T,U> withQueuePolicy(QueuePolicy<T,U> queuePolicy);
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	PushStreamBuilder<T,U> withQueuePolicy(QueuePolicyOption queuePolicyOption);
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	PushStreamBuilder<T,U> withPushbackPolicy(
1:7fa86e8: 			PushbackPolicy<T,U> pushbackPolicy);
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	PushStreamBuilder<T,U> withPushbackPolicy(
1:7fa86e8: 			PushbackPolicyOption pushbackPolicyOption, long time);
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	PushStreamBuilder<T,U> withParallelism(int parallelism);
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	PushStreamBuilder<T,U> withExecutor(Executor executor);
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.util.pushstream;
1: 
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.Executor;
1: 
1: /**
1:  * A Builder for a PushStream. This Builder extends the support of a standard
1:  * BufferBuilder by allowing the PushStream to be unbuffered.
1:  * 
1:  *
1:  * @param <T> The type of objects in the {@link PushEvent}
1:  * @param <U> The type of the Queue used in the user specified buffer
1:  */
1: public interface PushStreamBuilder<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1: 		extends BufferBuilder<PushStream<T>,T,U> {
1: 
1: 	/**
1: 	 * Tells this {@link PushStreamBuilder} to create an unbuffered stream which
1: 	 * delivers events directly to its consumer using the incoming delivery
1: 	 * thread.
1: 	 * 
1: 	 * @return the builder
1: 	 */
1: 	PushStreamBuilder<T,U> unbuffered();
1: 
1: 	/*
1: 	 * Overridden methods to allow the covariant return of a PushStreamBuilder
1: 	 */
1: 
1: 	@Override
1: 	PushStreamBuilder<T,U> withBuffer(U queue);
1: 
1: 	@Override
1: 	PushStreamBuilder<T,U> withQueuePolicy(QueuePolicy<T,U> queuePolicy);
1: 
1: 	@Override
1: 	PushStreamBuilder<T,U> withQueuePolicy(QueuePolicyOption queuePolicyOption);
1: 
1: 	@Override
1: 	PushStreamBuilder<T,U> withPushbackPolicy(
1: 			PushbackPolicy<T,U> pushbackPolicy);
1: 
1: 	@Override
1: 	PushStreamBuilder<T,U> withPushbackPolicy(
1: 			PushbackPolicyOption pushbackPolicyOption, long time);
1: 
1: 	@Override
1: 	PushStreamBuilder<T,U> withParallelism(int parallelism);
1: 
1: 	@Override
1: 	PushStreamBuilder<T,U> withExecutor(Executor executor);
1: }
============================================================================