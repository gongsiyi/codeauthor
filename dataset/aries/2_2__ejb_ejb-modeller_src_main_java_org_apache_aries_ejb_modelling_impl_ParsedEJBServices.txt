1:0d78661: /**
1:0d78661:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:0d78661:  *  contributor license agreements.  See the NOTICE file distributed with
1:0d78661:  *  this work for additional information regarding copyright ownership.
1:0d78661:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:0d78661:  *  (the "License"); you may not use this file except in compliance with
1:0d78661:  *  the License.  You may obtain a copy of the License at
1:0d78661:  *
1:0d78661:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d78661:  *
1:0d78661:  *  Unless required by applicable law or agreed to in writing, software
1:0d78661:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:0d78661:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d78661:  *  See the License for the specific language governing permissions and
1:0d78661:  *  limitations under the License.
1:0d78661:  */
1:0d78661: package org.apache.aries.ejb.modelling.impl;
1:0d78661: 
1:0d78661: import java.util.ArrayList;
1:0d78661: import java.util.Collection;
1:0d78661: import java.util.Collections;
1:0d78661: import java.util.HashSet;
1:0d78661: import java.util.Set;
1:0d78661: 
1:0d78661: import org.apache.aries.application.modelling.ExportedService;
1:0d78661: import org.apache.aries.application.modelling.ImportedService;
1:0d78661: import org.apache.aries.application.modelling.ParsedServiceElements;
1:0d78661: import org.apache.aries.ejb.modelling.EJBRegistry;
1:0d78661: 
1:4134a37: /**
1:4134a37:  * An {@link EJBRegistry} that marks the {@link ParsedServiceElements} provided
1:4134a37:  * by the EJB bundle.
1:4134a37:  * @author Tim
1:4134a37:  *
1:4134a37:  */
1:0d78661: public class ParsedEJBServices implements ParsedServiceElements, EJBRegistry {
1:0d78661: 
1:0d78661:   private final Collection<ImportedService> references;
1:0d78661:   private final Collection<ExportedService> services;
1:0d78661:   
1:0d78661:   private boolean all;
1:0d78661:   private Set<String> allowedNames; 
1:0d78661:   
1:0d78661:   public ParsedEJBServices() {
1:0d78661:     this.references = Collections.emptyList();
1:0d78661:     this.services = new ArrayList<ExportedService>();
1:0d78661:     allowedNames = new HashSet<String>();
1:0d78661:     all = false;
1:0d78661:   }
1:0d78661: 
1:0d78661:   public Collection<ImportedService> getReferences() {
1:0d78661:     return references;
1:0d78661:   }
1:0d78661: 
1:0d78661:   public Collection<ExportedService> getServices() {
1:0d78661:     return Collections.unmodifiableCollection(services);
1:0d78661:   }
1:0d78661:   
1:0d78661:   public void setAllowedNames(Collection<String> names) {
1:0d78661:     if(names.contains("NONE")) {
1:0d78661:       all= false;
1:0d78661:       allowedNames.clear();
2:0d78661:       return;
1:0d78661:     }
1:f8bfaf6: 
1:f8bfaf6:     if(names.size() == 1 && "".equals(names.iterator().next())) {
1:f8bfaf6:         all = true;
1:f8bfaf6:         return;
1:0d78661:     }
1:f8bfaf6:     
1:0d78661:     allowedNames.addAll(names);
1:0d78661:   }
1:0d78661:   
1:0d78661:   public void addEJBView(String ejbName, String ejbType, String interfaceName,
1:0d78661:       boolean remote) {
1:4134a37:     if(ejbType.equalsIgnoreCase("Stateful"))
1:4134a37:       return;
1:4134a37:     
1:0d78661:     if(all || allowedNames.contains(ejbName))
1:0d78661:       services.add(new EJBServiceExport(ejbName, ejbType, interfaceName, remote));
1:0d78661:   }
1:0d78661: }
============================================================================
author:Emily Jiang
-------------------------------------------------------------------------------
commit:f8bfaf6
/////////////////////////////////////////////////////////////////////////
1: 
1:     if(names.size() == 1 && "".equals(names.iterator().next())) {
1:         all = true;
1:         return;
1:     
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4134a37
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * An {@link EJBRegistry} that marks the {@link ParsedServiceElements} provided
1:  * by the EJB bundle.
1:  * @author Tim
1:  *
1:  */
/////////////////////////////////////////////////////////////////////////
1:     if(ejbType.equalsIgnoreCase("Stateful"))
1:       return;
1:     
commit:0d78661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.ImportedService;
1: import org.apache.aries.application.modelling.ParsedServiceElements;
1: import org.apache.aries.ejb.modelling.EJBRegistry;
1: 
1: public class ParsedEJBServices implements ParsedServiceElements, EJBRegistry {
1: 
1:   private final Collection<ImportedService> references;
1:   private final Collection<ExportedService> services;
1:   
1:   private boolean all;
1:   private Set<String> allowedNames; 
1:   
1:   public ParsedEJBServices() {
1:     this.references = Collections.emptyList();
1:     this.services = new ArrayList<ExportedService>();
1:     allowedNames = new HashSet<String>();
1:     all = false;
1:   }
1: 
1:   public Collection<ImportedService> getReferences() {
1:     return references;
1:   }
1: 
1:   public Collection<ExportedService> getServices() {
1:     return Collections.unmodifiableCollection(services);
1:   }
1:   
1:   public void setAllowedNames(Collection<String> names) {
1:     if(names.contains("NONE")) {
1:       all= false;
1:       allowedNames.clear();
1:       return;
1:     }
0:     if(names.contains("ALL")) {
0:       all = true;
1:       return;
1:     }
1:     allowedNames.addAll(names);
1:   }
1:   
1:   public void addEJBView(String ejbName, String ejbType, String interfaceName,
1:       boolean remote) {
1:     if(all || allowedNames.contains(ejbName))
1:       services.add(new EJBServiceExport(ejbName, ejbType, interfaceName, remote));
1:   }
1: }
============================================================================