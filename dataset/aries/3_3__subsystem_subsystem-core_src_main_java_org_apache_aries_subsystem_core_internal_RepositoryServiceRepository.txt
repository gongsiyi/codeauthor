1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:f62fff3: package org.apache.aries.subsystem.core.internal;
7:428e9f1: 
1:d6eb080: import java.lang.reflect.Method;
1:428e9f1: import java.util.Collection;
1:428e9f1: import java.util.Collections;
1:428e9f1: import java.util.HashMap;
1:428e9f1: import java.util.HashSet;
1:428e9f1: import java.util.Map;
1:428e9f1: import java.util.Set;
1:f62fff3: 
1:428e9f1: import org.osgi.framework.BundleContext;
1:428e9f1: import org.osgi.framework.InvalidSyntaxException;
1:428e9f1: import org.osgi.framework.ServiceReference;
1:428e9f1: import org.osgi.resource.Capability;
1:428e9f1: import org.osgi.resource.Requirement;
1:c79daa6: import org.osgi.service.repository.Repository;
1:d6eb080: import org.osgi.service.subsystem.SubsystemException;
1:428e9f1: 
1:d6eb080: public class RepositoryServiceRepository implements org.apache.aries.subsystem.core.repository.Repository {
1:c79daa6:     final BundleContext context;
1:c79daa6: 
1:f62fff3: 	public RepositoryServiceRepository() {
1:c79daa6: 		this(Activator.getInstance().getBundleContext());
1:f62fff3: 	}
1:c79daa6: 
1:c79daa6: 	RepositoryServiceRepository(BundleContext ctx) {
1:c79daa6: 	    context = ctx;
1:c79daa6: 	}
1:c79daa6: 
1:d6eb080: 	@SuppressWarnings("unchecked")
1:428e9f1: 	public Collection<Capability> findProviders(Requirement requirement) {
1:428e9f1: 		Set<Capability> result = new HashSet<Capability>();
1:d6eb080: 		ServiceReference<?>[] references;
1:428e9f1: 		try {
1:d6eb080: 			references = context.getAllServiceReferences("org.osgi.service.repository.Repository", null);
1:d6eb080: 			if (references == null)
1:d6eb080: 				return result;
2:428e9f1: 		}
1:428e9f1: 		catch (InvalidSyntaxException e) {
1:428e9f1: 			throw new IllegalStateException(e);
1:428e9f1: 		}
1:d6eb080: 		for (ServiceReference<?> reference : references) {
1:d6eb080: 			Object repository = context.getService(reference);
1:d6eb080: 			if (repository == null)
1:d6eb080: 				continue;
1:428e9f1: 			try {
1:c79daa6: 			    // Reflection is used here to allow the service to work with a mixture of
1:c79daa6: 			    // Repository services implementing different versions of the API.
1:c79daa6: 
1:d6eb080: 				Class<?> clazz = repository.getClass();
1:c79daa6: 				Class<?> repoInterface = null;
1:c79daa6: 
1:c79daa6: 				while (clazz != null && repoInterface == null) {
1:c79daa6: 				    for (Class<?> intf : clazz.getInterfaces()) {
1:c79daa6: 				        if (Repository.class.getName().equals(intf.getName())) {
1:c79daa6: 				            // Compare interfaces by name so that we can work with different versions of the
1:c79daa6: 				            // interface.
1:c79daa6: 				            repoInterface = intf;
1:c79daa6: 				            break;
1:c79daa6: 				        }
1:c79daa6: 				    }
1:c79daa6:                     clazz = clazz.getSuperclass();
1:c79daa6: 				}
1:c79daa6: 
1:c79daa6: 				if (repoInterface == null) {
1:c79daa6: 				    continue;
1:c79daa6: 				}
1:c79daa6: 
1:d6eb080: 				Map<Requirement, Collection<Capability>> map;
1:d6eb080: 				try {
1:c79daa6: 					Method method = repoInterface.getMethod("findProviders", Collection.class);
1:d6eb080: 					map = (Map<Requirement, Collection<Capability>>)method.invoke(repository, Collections.singleton(requirement));
1:d6eb080: 				}
1:d6eb080: 				catch (Exception e) {
1:d6eb080: 					throw new SubsystemException(e);
1:d6eb080: 				}
1:428e9f1: 				Collection<Capability> capabilities = map.get(requirement);
1:428e9f1: 				if (capabilities == null)
2:428e9f1: 					continue;
1:428e9f1: 				result.addAll(capabilities);
1:428e9f1: 			}
1:428e9f1: 			finally {
1:428e9f1: 				context.ungetService(reference);
1:428e9f1: 			}
1:428e9f1: 		}
1:428e9f1: 		return result;
1:428e9f1: 	}
1:c79daa6: 
1:428e9f1: 	@Override
1:d6eb080: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:428e9f1: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
1:428e9f1: 		for (Requirement requirement : requirements)
1:428e9f1: 			result.put(requirement, findProviders(requirement));
1:428e9f1: 		return result;
1:428e9f1: 	}
1:428e9f1: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:c79daa6
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.repository.Repository;
1:     final BundleContext context;
1: 
1: 		this(Activator.getInstance().getBundleContext());
1: 
1: 	RepositoryServiceRepository(BundleContext ctx) {
1: 	    context = ctx;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 			    // Reflection is used here to allow the service to work with a mixture of
1: 			    // Repository services implementing different versions of the API.
1: 
1: 				Class<?> repoInterface = null;
1: 
1: 				while (clazz != null && repoInterface == null) {
1: 				    for (Class<?> intf : clazz.getInterfaces()) {
1: 				        if (Repository.class.getName().equals(intf.getName())) {
1: 				            // Compare interfaces by name so that we can work with different versions of the
1: 				            // interface.
1: 				            repoInterface = intf;
1: 				            break;
1: 				        }
1: 				    }
1:                     clazz = clazz.getSuperclass();
1: 				}
1: 
1: 				if (repoInterface == null) {
1: 				    continue;
1: 				}
1: 
1: 					Method method = repoInterface.getMethod("findProviders", Collection.class);
/////////////////////////////////////////////////////////////////////////
1: 
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.SubsystemException;
1: public class RepositoryServiceRepository implements org.apache.aries.subsystem.core.repository.Repository {
0: 	private BundleContext context;
0: 		context = Activator.getInstance().getBundleContext();
1: 	@SuppressWarnings("unchecked")
1: 		ServiceReference<?>[] references;
1: 			references = context.getAllServiceReferences("org.osgi.service.repository.Repository", null);
1: 			if (references == null)
1: 				return result;
1: 		for (ServiceReference<?> reference : references) {
1: 			Object repository = context.getService(reference);
1: 			if (repository == null)
1: 				continue;
1: 				Class<?> clazz = repository.getClass();
1: 				Map<Requirement, Collection<Capability>> map;
1: 				try {
0: 					Method method = clazz.getMethod("findProviders", Collection.class);
1: 					map = (Map<Requirement, Collection<Capability>>)method.invoke(repository, Collections.singleton(requirement));
1: 				}
1: 				catch (Exception e) {
1: 					throw new SubsystemException(e);
1: 				}
/////////////////////////////////////////////////////////////////////////
1: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:f62fff3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
/////////////////////////////////////////////////////////////////////////
1: 	public RepositoryServiceRepository() {
0: 		this(Activator.getInstance().getBundleContext());
1: 	}
1: 	
commit:428e9f1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.subsystem.core.resource;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
0: import org.osgi.service.repository.Repository;
1: 
0: public class RepositoryServiceRepository implements Repository {
0: 	private final BundleContext context;
1: 	
0: 	public RepositoryServiceRepository(BundleContext context) {
0: 		this.context = context;
1: 	}
1: 	
1: 	public Collection<Capability> findProviders(Requirement requirement) {
1: 		Set<Capability> result = new HashSet<Capability>();
0: 		Collection<ServiceReference<Repository>> references;
1: 		try {
0: 			references = context.getServiceReferences(Repository.class, null);
1: 		}
1: 		catch (InvalidSyntaxException e) {
1: 			throw new IllegalStateException(e);
1: 		}
0: 		for (ServiceReference<Repository> reference : references) {
0: 			Repository repository = context.getService(reference);
1: 			try {
0: 				if (repository == null)
1: 					continue;
0: 				Map<Requirement, Collection<Capability>> map = repository.findProviders(Collections.singleton(requirement));
1: 				Collection<Capability> capabilities = map.get(requirement);
1: 				if (capabilities == null)
1: 					continue;
1: 				result.addAll(capabilities);
1: 			}
1: 			finally {
1: 				context.ungetService(reference);
1: 			}
1: 		}
1: 		return result;
1: 	}
1: 	
1: 	@Override
0: 	public Map<Requirement, Collection<Capability>> findProviders(
0: 			Collection<? extends Requirement> requirements) {
1: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
1: 		for (Requirement requirement : requirements)
1: 			result.put(requirement, findProviders(requirement));
1: 		return result;
1: 				
1: 		
1: 	}
1: }
============================================================================