1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:9483663: package org.apache.aries.jpa.example.tasklist.ds.impl;
1:2cfdf52: 
1:2cfdf52: import java.util.Collection;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManager;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.example.tasklist.model.Task;
1:2cfdf52: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1:2cfdf52: import org.apache.aries.jpa.template.EmConsumer;
1:2cfdf52: import org.apache.aries.jpa.template.EmFunction;
1:2cfdf52: import org.apache.aries.jpa.template.JpaTemplate;
1:2cfdf52: import org.apache.aries.jpa.template.TransactionType;
1:2cfdf52: import org.osgi.service.component.annotations.Component;
1:2cfdf52: import org.osgi.service.component.annotations.Reference;
1:2cfdf52: 
1:2cfdf52: @Component
1:2cfdf52: public class TaskServiceImpl implements TaskService {
1:2cfdf52: 
1:2cfdf52:     private JpaTemplate jpa;
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public Task getTask(final Integer id) {
1:2cfdf52:         return jpa.txExpr(TransactionType.Required, new EmFunction<Task>() {
1:ec3ea65:             @Override
1:2cfdf52:             public Task apply(EntityManager em) {
1:2cfdf52:                 return em.find(Task.class, id);
1:2cfdf52:             }
1:2cfdf52:         });
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public void addTask(final Task task) {
1:2cfdf52:         jpa.tx(new EmConsumer() {
1:ec3ea65:             @Override
1:2cfdf52:             public void accept(EntityManager em) {
1:2cfdf52:                     em.persist(task);
1:2cfdf52:                     em.flush();
1:2cfdf52:             }
1:2cfdf52:         });
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public Collection<Task> getTasks() {
1:2cfdf52:         return jpa.txExpr(new EmFunction<Collection<Task>>() {
1:ec3ea65:             @Override
1:2cfdf52:             public Collection<Task> apply(EntityManager em) {
1:2cfdf52:                 return em.createQuery("select t from Task t", Task.class).getResultList();
1:2cfdf52:             }
1:2cfdf52:         });
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public void updateTask(final Task task) {
1:2cfdf52:         jpa.tx(new EmConsumer() {
1:ec3ea65:             @Override
1:2cfdf52:             public void accept(EntityManager em) {
1:2cfdf52:                 em.persist(task);
1:2cfdf52:             }
1:2cfdf52:         });
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public void deleteTask(final Integer id) {
1:2cfdf52:         jpa.tx(new EmConsumer() {
1:ec3ea65:             @Override
1:2cfdf52:             public void accept(EntityManager em) {
1:2cfdf52:                 em.remove(getTask(id));
1:2cfdf52:             }
1:2cfdf52:         });
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Reference(target = "(osgi.unit.name=tasklist)")
1:2cfdf52:     public void setJpaTemplate(JpaTemplate jpa) {
1:2cfdf52:         this.jpa = jpa;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     // See below for the Java 8 version with closures
1:2cfdf52:     /*
1:2cfdf52:     public Task getTask(Integer id) {
1:2cfdf52:         return jpa.txExpr(TransactionType.Required, em -> em.find(Task.class, id));
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void addTask(Task task) {
1:2cfdf52:         jpa.tx(em -> {
1:2cfdf52:             em.persist(task);
1:2cfdf52:             em.flush();
1:2cfdf52:         });
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public Collection<Task> getTasks() {
1:2cfdf52:         return jpa.txExpr(em -> em.createQuery("select t from Task t", Task.class).getResultList());
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void updateTask(Task task) {
1:2cfdf52:         jpa.tx(em -> em.persist(task));
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public void deleteTask(Integer id) {
1:2cfdf52:         jpa.tx(em -> em.remove(getTask(id)));
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Reference(target = "(osgi.unit.name=tasklist)")
1:2cfdf52:     public void setJpaTemplate(JpaTemplate jpa) {
1:2cfdf52:         this.jpa = jpa;
1:2cfdf52:     }
1:2cfdf52:     */
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             @Override
1:     @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             @Override
1:     @Override
1:             @Override
1:     @Override
1:             @Override
commit:9483663
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.example.tasklist.ds.impl;
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.jpa.tasklist.closure.impl;
1: 
1: import java.util.Collection;
1: 
1: import javax.persistence.EntityManager;
1: 
1: import org.apache.aries.jpa.example.tasklist.model.Task;
1: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1: import org.apache.aries.jpa.template.EmConsumer;
1: import org.apache.aries.jpa.template.EmFunction;
1: import org.apache.aries.jpa.template.JpaTemplate;
1: import org.apache.aries.jpa.template.TransactionType;
1: import org.osgi.service.component.annotations.Component;
1: import org.osgi.service.component.annotations.Reference;
1: 
1: @Component
1: public class TaskServiceImpl implements TaskService {
1: 
1:     private JpaTemplate jpa;
1: 
1:     public Task getTask(final Integer id) {
1:         return jpa.txExpr(TransactionType.Required, new EmFunction<Task>() {
1:             public Task apply(EntityManager em) {
1:                 return em.find(Task.class, id);
1:             }
1:         });
1:     }
1: 
1:     public void addTask(final Task task) {
1:         jpa.tx(new EmConsumer() {
1:             public void accept(EntityManager em) {
1:                     em.persist(task);
1:                     em.flush();
1:             }
1:         });
1:     }
1: 
1:     public Collection<Task> getTasks() {
1:         return jpa.txExpr(new EmFunction<Collection<Task>>() {
1:             public Collection<Task> apply(EntityManager em) {
1:                 return em.createQuery("select t from Task t", Task.class).getResultList();
1:             }
1:         });
1:     }
1: 
1:     public void updateTask(final Task task) {
1:         jpa.tx(new EmConsumer() {
1:             public void accept(EntityManager em) {
1:                 em.persist(task);
1:             }
1:         });
1:     }
1: 
1:     public void deleteTask(final Integer id) {
1:         jpa.tx(new EmConsumer() {
1:             public void accept(EntityManager em) {
1:                 em.remove(getTask(id));
1:             }
1:         });
1:     }
1: 
1:     @Reference(target = "(osgi.unit.name=tasklist)")
1:     public void setJpaTemplate(JpaTemplate jpa) {
1:         this.jpa = jpa;
1:     }
1: 
1:     // See below for the Java 8 version with closures
1:     /*
1:     public Task getTask(Integer id) {
1:         return jpa.txExpr(TransactionType.Required, em -> em.find(Task.class, id));
1:     }
1: 
1:     public void addTask(Task task) {
1:         jpa.tx(em -> {
1:             em.persist(task);
1:             em.flush();
1:         });
1:     }
1: 
1:     public Collection<Task> getTasks() {
1:         return jpa.txExpr(em -> em.createQuery("select t from Task t", Task.class).getResultList());
1:     }
1: 
1:     public void updateTask(Task task) {
1:         jpa.tx(em -> em.persist(task));
1:     }
1: 
1:     public void deleteTask(Integer id) {
1:         jpa.tx(em -> em.remove(getTask(id)));
1:     }
1: 
1:     @Reference(target = "(osgi.unit.name=tasklist)")
1:     public void setJpaTemplate(JpaTemplate jpa) {
1:         this.jpa = jpa;
1:     }
1:     */
1: }
============================================================================