1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
1:ade4709: 
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertFalse;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:fdf3952: import static org.mockito.Mockito.atMost;
1:fdf3952: import static org.mockito.Mockito.mock;
1:fdf3952: import static org.mockito.Mockito.never;
1:fdf3952: import static org.mockito.Mockito.verify;
1:fdf3952: import static org.mockito.Mockito.when;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.OBJECTNAME;
1:ade4709: 
1:fdf3952: import java.util.LinkedList;
1:fdf3952: import java.util.List;
1:fdf3952: import java.util.concurrent.ExecutorService;
1:fdf3952: import java.util.concurrent.TimeUnit;
1:ade4709: 
1:ade4709: import javax.management.AttributeChangeNotification;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.Notification;
1:fdf3952: import javax.management.NotificationListener;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.openmbean.CompositeData;
34:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.Logger;
1:fdf3952: import org.apache.aries.jmx.codec.BundleEventData;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.mockito.ArgumentCaptor;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.BundleEvent;
1:fdf3952: import org.osgi.framework.BundleListener;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: import org.osgi.service.startlevel.StartLevel;
1:fdf3952: 
1:fdf3952: 
1:fdf3952: public class BundleStateTest {
1:fdf3952: 
1:a0df2a3:     private void createBundle(StateConfig stateConfig, final List<Notification> received,
1:a0df2a3:                               final List<AttributeChangeNotification> attributeChanges) throws Exception {
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:ade4709:         when(context.getBundles()).thenReturn(new Bundle [] {});
1:fdf3952:         PackageAdmin admin = mock(PackageAdmin.class);
1:fdf3952:         StartLevel startLevel = mock(StartLevel.class);
1:fdf3952:         Logger logger = mock(Logger.class);
1:ade4709: 
1:a0df2a3:         BundleState bundleState = new BundleState(context, admin, startLevel, stateConfig, logger);
1:ade4709: 
1:fdf3952:         Bundle b1 = mock(Bundle.class);
1:fdf3952:         when(b1.getBundleId()).thenReturn(new Long(9));
1:fdf3952:         when(b1.getSymbolicName()).thenReturn("bundle");
1:fdf3952:         when(b1.getLocation()).thenReturn("file:/location");
1:ade4709: 
1:fdf3952:         BundleEvent installedEvent = mock(BundleEvent.class);
1:fdf3952:         when(installedEvent.getBundle()).thenReturn(b1);
1:fdf3952:         when(installedEvent.getType()).thenReturn(BundleEvent.INSTALLED);
1:ade4709: 
1:fdf3952:         BundleEvent resolvedEvent = mock(BundleEvent.class);
1:fdf3952:         when(resolvedEvent.getBundle()).thenReturn(b1);
1:fdf3952:         when(resolvedEvent.getType()).thenReturn(BundleEvent.RESOLVED);
1:ade4709: 
1:fdf3952:         MBeanServer server = mock(MBeanServer.class);
1:ade4709: 
1:fdf3952:         //setup for notification
1:fdf3952:         ObjectName objectName = new ObjectName(OBJECTNAME);
1:fdf3952:         bundleState.preRegister(server, objectName);
1:fdf3952:         bundleState.postRegister(true);
1:ade4709: 
1:fdf3952:         //add NotificationListener to receive the events
1:fdf3952:         bundleState.addNotificationListener(new NotificationListener() {
1:fdf3952:             public void handleNotification(Notification notification, Object handback) {
1:ade4709:                 if (notification instanceof AttributeChangeNotification) {
1:ade4709:                     attributeChanges.add((AttributeChangeNotification) notification);
1:ade4709:                 } else {
1:ade4709:                     received.add(notification);
1:ade4709:                 }
1:fdf3952:             }
1:fdf3952:         }, null, null);
1:a0df2a3: 
1:fdf3952:         // capture the BundleListener registered with BundleContext to issue BundleEvents
1:ade4709:         ArgumentCaptor<BundleListener> argument = ArgumentCaptor.forClass(BundleListener.class);
1:fdf3952:         verify(context).addBundleListener(argument.capture());
1:ade4709: 
1:fdf3952:         //send events
1:fdf3952:         BundleListener listener = argument.getValue();
1:fdf3952:         listener.bundleChanged(installedEvent);
1:fdf3952:         listener.bundleChanged(resolvedEvent);
1:ade4709: 
1:ade4709:         //shutdown dispatcher via unregister callback
1:fdf3952:         bundleState.postDeregister();
1:fdf3952:         //check the BundleListener is cleaned up
1:fdf3952:         verify(context).removeBundleListener(listener);
1:ade4709: 
1:fdf3952:         ExecutorService dispatcher = bundleState.getEventDispatcher();
1:fdf3952:         assertTrue(dispatcher.isShutdown());
1:fdf3952:         dispatcher.awaitTermination(2, TimeUnit.SECONDS);
1:fdf3952:         assertTrue(dispatcher.isTerminated());
1:a0df2a3:     }
1:a0df2a3: 
1:a0df2a3:     @Test
1:a0df2a3:     public void testNotificationsForBundleEvents() throws Exception {
1:a0df2a3:         StateConfig stateConfig = new StateConfig();
1:a0df2a3: 
1:a0df2a3:         //holders for Notifications captured
1:a0df2a3:         List<Notification> received = new LinkedList<Notification>();
1:a0df2a3:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1:a0df2a3: 
1:a0df2a3:         createBundle(stateConfig, received, attributeChanges);
1:ade4709: 
1:fdf3952:         assertEquals(2, received.size());
1:fdf3952:         Notification installed = received.get(0);
1:fdf3952:         assertEquals(1, installed.getSequenceNumber());
1:fdf3952:         CompositeData installedCompositeData = (CompositeData) installed.getUserData();
1:fdf3952:         BundleEventData installedData = BundleEventData.from(installedCompositeData);
1:fdf3952:         assertEquals("bundle", installedData.getBundleSymbolicName());
1:fdf3952:         assertEquals(9, installedData.getBundleId());
1:fdf3952:         assertEquals("file:/location", installedData.getLocation());
1:fdf3952:         assertEquals(BundleEvent.INSTALLED, installedData.getEventType());
1:ade4709: 
1:fdf3952:         Notification resolved = received.get(1);
1:fdf3952:         assertEquals(2, resolved.getSequenceNumber());
1:fdf3952:         CompositeData resolvedCompositeData = (CompositeData) resolved.getUserData();
1:fdf3952:         BundleEventData resolvedData = BundleEventData.from(resolvedCompositeData);
1:fdf3952:         assertEquals("bundle", resolvedData.getBundleSymbolicName());
1:fdf3952:         assertEquals(9, resolvedData.getBundleId());
1:fdf3952:         assertEquals("file:/location", resolvedData.getLocation());
1:fdf3952:         assertEquals(BundleEvent.RESOLVED, resolvedData.getEventType());
1:ade4709: 
1:ade4709:         assertEquals(1, attributeChanges.size());
1:ade4709:         AttributeChangeNotification ac = attributeChanges.get(0);
1:ade4709:         assertEquals("BundleIds", ac.getAttributeName());
1:ade4709:         assertEquals(0, ((long [])ac.getOldValue()).length);
1:ade4709:         assertEquals(1, ((long [])ac.getNewValue()).length);
1:ade4709:         assertEquals(9L, ((long [])ac.getNewValue())[0]);
1:fdf3952:     }
1:ade4709: 
1:a0df2a3:     @Test
1:1570712:     public void testNotificationsForBundleEventsDisabled() throws Exception {
1:1570712:         StateConfig stateConfig = new StateConfig();
1:1570712:         stateConfig.setBundleChangeNotificationEnabled(false);
1:1570712: 
1:1570712:         //holders for Notifications captured
1:1570712:         List<Notification> received = new LinkedList<Notification>();
1:1570712:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1:1570712: 
1:1570712:         createBundle(stateConfig, received, attributeChanges);
1:1570712: 
1:1570712:         assertEquals(0, received.size());
1:1570712:     }
1:1570712: 
1:1570712:     @Test
1:fdf3952:     public void testLifeCycleOfNotificationSupport() throws Exception {
1:ade4709: 
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:fdf3952:         PackageAdmin admin = mock(PackageAdmin.class);
1:fdf3952:         StartLevel startLevel = mock(StartLevel.class);
1:fdf3952:         Logger logger = mock(Logger.class);
1:ade4709: 
1:a0df2a3:         BundleState bundleState = new BundleState(context, admin, startLevel, new StateConfig(), logger);
1:ade4709: 
1:fdf3952:         MBeanServer server1 = mock(MBeanServer.class);
1:fdf3952:         MBeanServer server2 = mock(MBeanServer.class);
1:fdf3952: 
1:fdf3952:         ObjectName objectName = new ObjectName(OBJECTNAME);
1:fdf3952:         bundleState.preRegister(server1, objectName);
1:fdf3952:         bundleState.postRegister(true);
1:ade4709: 
1:fdf3952:         // capture the BundleListener registered with BundleContext
1:ade4709:         ArgumentCaptor<BundleListener> argument = ArgumentCaptor.forClass(BundleListener.class);
1:fdf3952:         verify(context).addBundleListener(argument.capture());
1:fdf3952:         assertEquals(1, argument.getAllValues().size());
1:ade4709: 
1:fdf3952:         BundleListener listener = argument.getValue();
1:fdf3952:         assertNotNull(listener);
1:ade4709: 
1:fdf3952:         ExecutorService dispatcher = bundleState.getEventDispatcher();
1:ade4709: 
1:fdf3952:         //do registration with another server
1:fdf3952:         bundleState.preRegister(server2, objectName);
1:fdf3952:         bundleState.postRegister(true);
1:ade4709: 
1:fdf3952:         // check no more actions on BundleContext
1:ade4709:         argument = ArgumentCaptor.forClass(BundleListener.class);
1:fdf3952:         verify(context, atMost(1)).addBundleListener(argument.capture());
1:fdf3952:         assertEquals(1, argument.getAllValues().size());
1:ade4709: 
1:fdf3952:         //do one unregister
1:fdf3952:         bundleState.postDeregister();
1:ade4709: 
1:fdf3952:         //verify bundleListener not invoked
1:fdf3952:         verify(context, never()).removeBundleListener(listener);
1:fdf3952:         assertFalse(dispatcher.isShutdown());
1:ade4709: 
1:fdf3952:         //do second unregister and check cleanup
1:fdf3952:         bundleState.postDeregister();
1:fdf3952:         verify(context).removeBundleListener(listener);
1:fdf3952:         assertTrue(dispatcher.isShutdown());
1:fdf3952:         dispatcher.awaitTermination(2, TimeUnit.SECONDS);
1:fdf3952:         assertTrue(dispatcher.isTerminated());
1:ade4709: 
1:ade4709: 
1:ade4709: 
1:fdf3952:     }
1:fdf3952: 
2:fdf3952:     @Test
1:a0df2a3:     public void testAttributeNotificationDisabled() throws Exception {
1:1570712:         StateConfig stateConfig = new StateConfig();
1:1570712:         stateConfig.setAttributeChangeNotificationEnabled(false);
1:a0df2a3: 
1:a0df2a3:         //holders for Notifications captured
1:a0df2a3:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1:a0df2a3:         createBundle(stateConfig, new LinkedList<Notification>(), attributeChanges);
1:a0df2a3: 
1:a0df2a3:         assertEquals(0, attributeChanges.size());
1:a0df2a3:     }
1:a0df2a3: 
1:a0df2a3: 
1:fdf3952: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1570712
/////////////////////////////////////////////////////////////////////////
1:     public void testNotificationsForBundleEventsDisabled() throws Exception {
1:         StateConfig stateConfig = new StateConfig();
1:         stateConfig.setBundleChangeNotificationEnabled(false);
1: 
1:         //holders for Notifications captured
1:         List<Notification> received = new LinkedList<Notification>();
1:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1: 
1:         createBundle(stateConfig, received, attributeChanges);
1: 
1:         assertEquals(0, received.size());
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         StateConfig stateConfig = new StateConfig();
1:         stateConfig.setAttributeChangeNotificationEnabled(false);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:a0df2a3
/////////////////////////////////////////////////////////////////////////
1:     private void createBundle(StateConfig stateConfig, final List<Notification> received,
1:                               final List<AttributeChangeNotification> attributeChanges) throws Exception {
1:         BundleState bundleState = new BundleState(context, admin, startLevel, stateConfig, logger);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     @Test
1:     public void testNotificationsForBundleEvents() throws Exception {
1:         StateConfig stateConfig = new StateConfig();
1: 
1:         //holders for Notifications captured
1:         List<Notification> received = new LinkedList<Notification>();
1:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1: 
1:         createBundle(stateConfig, received, attributeChanges);
/////////////////////////////////////////////////////////////////////////
1:         BundleState bundleState = new BundleState(context, admin, startLevel, new StateConfig(), logger);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testAttributeNotificationDisabled() throws Exception {
0:         StateConfig stateConfig = new StateConfig(false);
1: 
1:         //holders for Notifications captured
1:         List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1:         createBundle(stateConfig, new LinkedList<Notification>(), attributeChanges);
1: 
1:         assertEquals(0, attributeChanges.size());
1:     }
1: 
1: 
commit:0273964
commit:ade4709
/////////////////////////////////////////////////////////////////////////
1: import javax.management.AttributeChangeNotification;
/////////////////////////////////////////////////////////////////////////
1: 
1:         when(context.getBundles()).thenReturn(new Bundle [] {});
1: 
1: 
1: 
1: 
1: 
1: 
1: 
0:         //holders for Notifications captured
0:         final List<Notification> received = new LinkedList<Notification>();
0:         final List<AttributeChangeNotification> attributeChanges = new LinkedList<AttributeChangeNotification>();
1: 
1:                 if (notification instanceof AttributeChangeNotification) {
1:                     attributeChanges.add((AttributeChangeNotification) notification);
1:                 } else {
1:                     received.add(notification);
1:                 }
1: 
1:         ArgumentCaptor<BundleListener> argument = ArgumentCaptor.forClass(BundleListener.class);
1: 
1: 
1:         //shutdown dispatcher via unregister callback
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertEquals(1, attributeChanges.size());
1:         AttributeChangeNotification ac = attributeChanges.get(0);
1:         assertEquals("BundleIds", ac.getAttributeName());
1:         assertEquals(0, ((long [])ac.getOldValue()).length);
1:         assertEquals(1, ((long [])ac.getNewValue()).length);
1:         assertEquals(9L, ((long [])ac.getNewValue())[0]);
1: 
1: 
1: 
1: 
1: 
1:         ArgumentCaptor<BundleListener> argument = ArgumentCaptor.forClass(BundleListener.class);
1: 
1: 
1: 
1: 
1:         argument = ArgumentCaptor.forClass(BundleListener.class);
1: 
1: 
1: 
1: 
1: 
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.mockito.Mockito.atMost;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.never;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: import static org.osgi.jmx.framework.BundleStateMBean.OBJECTNAME;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.management.MBeanServer;
1: import javax.management.Notification;
1: import javax.management.NotificationListener;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.Logger;
1: import org.apache.aries.jmx.codec.BundleEventData;
1: import org.junit.Test;
1: import org.mockito.ArgumentCaptor;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.BundleListener;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.service.startlevel.StartLevel;
1: 
1: 
1: public class BundleStateTest {
1: 
1:     @Test
0:     public void testNotificationsForBundleEvents() throws Exception {
1:         
1:         BundleContext context = mock(BundleContext.class);
1:         PackageAdmin admin = mock(PackageAdmin.class);
1:         StartLevel startLevel = mock(StartLevel.class);
1:         Logger logger = mock(Logger.class);
1:         
0:         //holder for Notifications captured
0:         final List<Notification> received = new LinkedList<Notification>();
1:         
0:         BundleState bundleState = new BundleState(context, admin, startLevel, logger);
1:         
1:         Bundle b1 = mock(Bundle.class);
1:         when(b1.getBundleId()).thenReturn(new Long(9));
1:         when(b1.getSymbolicName()).thenReturn("bundle");
1:         when(b1.getLocation()).thenReturn("file:/location");
1:         
1:         BundleEvent installedEvent = mock(BundleEvent.class);
1:         when(installedEvent.getBundle()).thenReturn(b1);
1:         when(installedEvent.getType()).thenReturn(BundleEvent.INSTALLED);
1:        
1:         BundleEvent resolvedEvent = mock(BundleEvent.class);
1:         when(resolvedEvent.getBundle()).thenReturn(b1);
1:         when(resolvedEvent.getType()).thenReturn(BundleEvent.RESOLVED);
1:         
1:         MBeanServer server = mock(MBeanServer.class);
1:         
1:         //setup for notification
1:         ObjectName objectName = new ObjectName(OBJECTNAME);
1:         bundleState.preRegister(server, objectName);
1:         bundleState.postRegister(true);
1:         
1:         //add NotificationListener to receive the events
1:         bundleState.addNotificationListener(new NotificationListener() {
1:             public void handleNotification(Notification notification, Object handback) {
0:                received.add(notification);
1:             }
1:         }, null, null);
1:         
1:         // capture the BundleListener registered with BundleContext to issue BundleEvents
0:         ArgumentCaptor<BundleListener> argument = ArgumentCaptor.forClass(BundleListener.class);        
1:         verify(context).addBundleListener(argument.capture());
1:         
1:         //send events
1:         BundleListener listener = argument.getValue();
1:         listener.bundleChanged(installedEvent);
1:         listener.bundleChanged(resolvedEvent);
1:         
0:         //shutdown dispatcher via unregister callback 
1:         bundleState.postDeregister();
1:         //check the BundleListener is cleaned up
1:         verify(context).removeBundleListener(listener);
1:         
1:         ExecutorService dispatcher = bundleState.getEventDispatcher();
1:         assertTrue(dispatcher.isShutdown());
1:         dispatcher.awaitTermination(2, TimeUnit.SECONDS);
1:         assertTrue(dispatcher.isTerminated());
1:         
1:         assertEquals(2, received.size());
1:         Notification installed = received.get(0);
1:         assertEquals(1, installed.getSequenceNumber());
1:         CompositeData installedCompositeData = (CompositeData) installed.getUserData();
1:         BundleEventData installedData = BundleEventData.from(installedCompositeData);
1:         assertEquals("bundle", installedData.getBundleSymbolicName());
1:         assertEquals(9, installedData.getBundleId());
1:         assertEquals("file:/location", installedData.getLocation());
1:         assertEquals(BundleEvent.INSTALLED, installedData.getEventType());
1:         
1:         Notification resolved = received.get(1);
1:         assertEquals(2, resolved.getSequenceNumber());
1:         CompositeData resolvedCompositeData = (CompositeData) resolved.getUserData();
1:         BundleEventData resolvedData = BundleEventData.from(resolvedCompositeData);
1:         assertEquals("bundle", resolvedData.getBundleSymbolicName());
1:         assertEquals(9, resolvedData.getBundleId());
1:         assertEquals("file:/location", resolvedData.getLocation());
1:         assertEquals(BundleEvent.RESOLVED, resolvedData.getEventType());
1:         
1:     }
1:     
1:     @Test
1:     public void testLifeCycleOfNotificationSupport() throws Exception {
1:         
1:         BundleContext context = mock(BundleContext.class);
1:         PackageAdmin admin = mock(PackageAdmin.class);
1:         StartLevel startLevel = mock(StartLevel.class);
1:         Logger logger = mock(Logger.class);
1:         
0:         BundleState bundleState = new BundleState(context, admin, startLevel, logger);
1:         
1:         MBeanServer server1 = mock(MBeanServer.class);
1:         MBeanServer server2 = mock(MBeanServer.class);
1: 
1:         ObjectName objectName = new ObjectName(OBJECTNAME);
1:         bundleState.preRegister(server1, objectName);
1:         bundleState.postRegister(true);
1:         
1:         // capture the BundleListener registered with BundleContext
0:         ArgumentCaptor<BundleListener> argument = ArgumentCaptor.forClass(BundleListener.class);        
1:         verify(context).addBundleListener(argument.capture());
1:         assertEquals(1, argument.getAllValues().size());
1:         
1:         BundleListener listener = argument.getValue();
1:         assertNotNull(listener);
1:         
1:         ExecutorService dispatcher = bundleState.getEventDispatcher();
1:         
1:         //do registration with another server
1:         bundleState.preRegister(server2, objectName);
1:         bundleState.postRegister(true);
1:         
1:         // check no more actions on BundleContext
0:         argument = ArgumentCaptor.forClass(BundleListener.class);        
1:         verify(context, atMost(1)).addBundleListener(argument.capture());
1:         assertEquals(1, argument.getAllValues().size());
1:         
1:         //do one unregister
1:         bundleState.postDeregister();
1:         
1:         //verify bundleListener not invoked
1:         verify(context, never()).removeBundleListener(listener);
1:         assertFalse(dispatcher.isShutdown());
1:         
1:         //do second unregister and check cleanup
1:         bundleState.postDeregister();
1:         verify(context).removeBundleListener(listener);
1:         assertTrue(dispatcher.isShutdown());
1:         dispatcher.awaitTermination(2, TimeUnit.SECONDS);
1:         assertTrue(dispatcher.isTerminated());
1:         
1:       
1:         
1:     }
1: }
============================================================================