1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:47d9366: package org.apache.aries.subsystem.core.archive;
1:47d9366: 
1:47d9366: import org.osgi.framework.Constants;
1:47d9366: 
1:47d9366: public class VisibilityDirective extends AbstractDirective {
1:47d9366: 	public static final String NAME = Constants.VISIBILITY_DIRECTIVE;
1:47d9366: 	public static final String VALUE_PRIVATE = Constants.VISIBILITY_PRIVATE;
1:47d9366: 	public static final String VALUE_REEXPORT = Constants.VISIBILITY_REEXPORT;
1:47d9366: 	
1:47d9366: 	public static final VisibilityDirective PRIVATE = new VisibilityDirective(VALUE_PRIVATE);
1:47d9366: 	public static final VisibilityDirective REEXPORT = new VisibilityDirective(VALUE_REEXPORT);
1:47d9366: 	
1:47d9366: 	public static VisibilityDirective getInstance(String value) {
1:47d9366: 		if (VALUE_PRIVATE.equals(value))
1:47d9366: 			return PRIVATE;
1:47d9366: 		if (VALUE_REEXPORT.equals(value))
1:47d9366: 			return REEXPORT;
1:47d9366: 		return new VisibilityDirective(value);
1:47d9366: 	}
1:47d9366: 	
1:47d9366: 	public VisibilityDirective() {
1:47d9366: 		this(VALUE_PRIVATE);
1:47d9366: 	}
1:47d9366: 	
1:47d9366: 	public VisibilityDirective(String value) {
1:47d9366: 		super(NAME, value);
1:47d9366: 	}
1:47d9366: 	
1:47d9366: 	public boolean isPrivate() {
1:47d9366: 		return PRIVATE == this || VALUE_PRIVATE.equals(getValue());
1:47d9366: 	}
1:47d9366: 	
1:47d9366: 	public boolean isReexport() {
1:47d9366: 		return REEXPORT == this || VALUE_REEXPORT.equals(getValue());
1:47d9366: 	}
1:47d9366: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:47d9366
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import org.osgi.framework.Constants;
1: 
1: public class VisibilityDirective extends AbstractDirective {
1: 	public static final String NAME = Constants.VISIBILITY_DIRECTIVE;
1: 	public static final String VALUE_PRIVATE = Constants.VISIBILITY_PRIVATE;
1: 	public static final String VALUE_REEXPORT = Constants.VISIBILITY_REEXPORT;
1: 	
1: 	public static final VisibilityDirective PRIVATE = new VisibilityDirective(VALUE_PRIVATE);
1: 	public static final VisibilityDirective REEXPORT = new VisibilityDirective(VALUE_REEXPORT);
1: 	
1: 	public static VisibilityDirective getInstance(String value) {
1: 		if (VALUE_PRIVATE.equals(value))
1: 			return PRIVATE;
1: 		if (VALUE_REEXPORT.equals(value))
1: 			return REEXPORT;
1: 		return new VisibilityDirective(value);
1: 	}
1: 	
1: 	public VisibilityDirective() {
1: 		this(VALUE_PRIVATE);
1: 	}
1: 	
1: 	public VisibilityDirective(String value) {
1: 		super(NAME, value);
1: 	}
1: 	
1: 	public boolean isPrivate() {
1: 		return PRIVATE == this || VALUE_PRIVATE.equals(getValue());
1: 	}
1: 	
1: 	public boolean isReexport() {
1: 		return REEXPORT == this || VALUE_REEXPORT.equals(getValue());
1: 	}
1: }
============================================================================