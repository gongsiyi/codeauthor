1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:e7c1ea5: package org.apache.aries.tx.control.jpa.common.impl;
1:e7c1ea5: 
1:e7c1ea5: import javax.persistence.EntityManager;
1:e7c1ea5: import javax.persistence.TransactionRequiredException;
1:e7c1ea5: 
1:e7c1ea5: public class ScopedEntityManagerWrapper extends EntityManagerWrapper {
1:e7c1ea5: 
1:e7c1ea5: 	private final EntityManager entityManager;
1:e7c1ea5: 	
1:e7c1ea5: 	public ScopedEntityManagerWrapper(EntityManager entityManager) {
1:e7c1ea5: 		this.entityManager = entityManager;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	protected EntityManager getRealEntityManager() {
1:e7c1ea5: 		return entityManager;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public void close() {
1:e7c1ea5: 		// A no op
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public void joinTransaction() {
1:e7c1ea5: 		throw new TransactionRequiredException("This EntityManager is being used in the No Transaction scope. There is no transaction to join.");
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@Override
1:e7c1ea5: 	public boolean isJoinedToTransaction() {
1:e7c1ea5: 		return false;
1:e7c1ea5: 	}
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:0e20712
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.common.impl;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.TransactionRequiredException;
1: 
1: public class ScopedEntityManagerWrapper extends EntityManagerWrapper {
1: 
1: 	private final EntityManager entityManager;
1: 	
1: 	public ScopedEntityManagerWrapper(EntityManager entityManager) {
1: 		this.entityManager = entityManager;
1: 	}
1: 
1: 	@Override
1: 	protected EntityManager getRealEntityManager() {
1: 		return entityManager;
1: 	}
1: 
1: 	@Override
1: 	public void close() {
1: 		// A no op
1: 	}
1: 
1: 	@Override
1: 	public void joinTransaction() {
1: 		throw new TransactionRequiredException("This EntityManager is being used in the No Transaction scope. There is no transaction to join.");
1: 	}
1: 
1: 	@Override
1: 	public boolean isJoinedToTransaction() {
1: 		return false;
1: 	}
1: }
============================================================================