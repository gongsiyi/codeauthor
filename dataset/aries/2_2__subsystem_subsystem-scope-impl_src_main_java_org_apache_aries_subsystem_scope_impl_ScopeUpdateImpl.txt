1:aeedca8: package org.apache.aries.subsystem.scope.impl;
1:b4c3c21: 
1:aeedca8: import java.util.ArrayList;
1:aeedca8: import java.util.Collection;
1:6f4b079: import java.util.Collections;
1:e9f9bca: import java.util.HashSet;
1:aeedca8: import java.util.List;
1:aeedca8: import java.util.Map;
1:e9f9bca: import java.util.Set;
1:b4c3c21: 
1:aeedca8: import org.apache.aries.subsystem.scope.InstallInfo;
1:aeedca8: import org.apache.aries.subsystem.scope.Scope;
1:aeedca8: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:aeedca8: import org.apache.aries.subsystem.scope.SharePolicy;
1:6f4b079: import org.apache.aries.subsystem.scope.internal.Activator;
1:aeedca8: import org.osgi.framework.Bundle;
1:aeedca8: import org.osgi.framework.BundleException;
1:b4c3c21: 
1:aeedca8: public class ScopeUpdateImpl implements ScopeUpdate {
1:e9f9bca: 	public static ScopeUpdateImpl newInstance(ScopeImpl scope) {
1:6f4b079: 		ScopeUpdateImpl scopeUpdate = new ScopeUpdateImpl(scope, null);
1:e9f9bca: 		for (Scope child : scopeUpdate.scope.getChildren()) {
1:6f4b079: 			scopeUpdate.children.add(new ScopeUpdateImpl((ScopeImpl)child, scopeUpdate));
9:e9f9bca: 		}
1:e9f9bca: 		return scopeUpdate;
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	private static final IdGenerator idGenerator = new IdGenerator(1);
1:e9f9bca: 	
1:6f4b079: 	private final Set<Bundle> bundles = Collections.synchronizedSet(new HashSet<Bundle>());
1:6f4b079: 	private final List<InstallInfo> bundlesToInstall = Collections.synchronizedList(new ArrayList<InstallInfo>());
1:6f4b079: 	private final Set<ScopeUpdate> children = Collections.synchronizedSet(new HashSet<ScopeUpdate>());
1:6f4b079: 	private final long id = idGenerator.nextId();
1:e9f9bca: 	private final ScopeUpdateImpl parent;
1:e9f9bca: 	private final ScopeImpl scope;
1:6f4b079: 	private final SharePolicies sharePolicies = new SharePolicies();
1:e9f9bca: 	
1:6f4b079: 	private ScopeUpdateImpl(String name, String location, ScopeUpdateImpl parent) {
1:6f4b079: 		this.parent = parent;
1:6f4b079: 		this.scope = new ScopeImpl(
1:6f4b079: 				((ScopeImpl)parent.getScope()).getScopes().nextScopeId(),
1:6f4b079: 				name,
1:6f4b079: 				location,
1:6f4b079: 				parent.getScope().getId(),
1:6f4b079: 				null,
1:6f4b079: 				new SharePolicies(),
1:6f4b079: 				((ScopeImpl)parent.getScope()).getScopes());
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private ScopeUpdateImpl(ScopeImpl scope, ScopeUpdateImpl parent) {
1:e9f9bca: 		this.scope = scope;
1:e9f9bca: 		this.parent = parent;
1:6f4b079: 		bundles.addAll(scope.getBundles());
1:6f4b079: 		sharePolicies.replaceAll(scope.getSharePolicies());
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public boolean commit() throws BundleException {
1:e9f9bca: 		if (parent != null)
1:e9f9bca: 			throw new IllegalStateException("Only the root ScopeUpdate may be committed");
1:e9f9bca: 		return commit0();
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public Collection<Bundle> getBundles() {
1:e9f9bca: 		return bundles;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public List<InstallInfo> getBundlesToInstall() {
1:e9f9bca: 		return bundlesToInstall;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public Collection<ScopeUpdate> getChildren() {
1:e9f9bca: 		return children;
1:e9f9bca: 	}
1:e9f9bca: 
1:e9f9bca: 	public String getName() {
1:e9f9bca: 		return scope.getName();
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	public Scope getScope() {
1:e9f9bca: 		return scope;
1:e9f9bca: 	}
1:e9f9bca: 
1:e9f9bca: 	public Map<String, List<SharePolicy>> getSharePolicies(String type) {
1:6f4b079: 		return sharePolicies.getSharePolicies(type);
1:e9f9bca: 	}
1:e9f9bca: 
1:e9f9bca: 	public ScopeUpdate newChild(String name) {
1:e9f9bca: 		return newChild(name, null);
1:e9f9bca: 	}
1:e9f9bca: 
1:e9f9bca: 	public ScopeUpdate newChild(String name, String location) {
1:6f4b079: 		return new ScopeUpdateImpl(name, location, this);
1:e9f9bca: 	}
1:e9f9bca: 		
1:e9f9bca: 	private void addBundles() {
1:e9f9bca: 		for (Bundle b : getBundles()) {
1:e9f9bca: 			if (!getScope().getBundles().contains(b)) {
1:e9f9bca: 				if (contains(b, this)) {
1:e9f9bca: 					throw new IllegalStateException("Bundle " + b.getSymbolicName() + " being added to scope " + getName() + " but already exists in another scope");
1:e9f9bca: 				}
1:6f4b079: 				scope.getScopes().addBundle(b, scope);
1:e9f9bca: 			}
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	private synchronized boolean commit0() throws BundleException {
1:6f4b079: 		synchronized (scope) {
1:6f4b079: 			if (scope.getLastUpdate() > id)
2:e9f9bca: 				return false;
1:6f4b079: 			scope.setUpdating(true);
1:6f4b079: 			synchronized (bundles) {
1:6f4b079: 				removeBundles();
1:6f4b079: 			}
1:6f4b079: 			synchronized (children) {
1:6f4b079: 				for (ScopeUpdate child : children) {
1:6f4b079: 					if (!((ScopeUpdateImpl)child).commit0())
1:6f4b079: 						return false;
1:6f4b079: 				}
1:6f4b079: 				uninstallChildren();
1:6f4b079: 			}
1:6f4b079: 			synchronized (bundles) {
1:6f4b079: 				addBundles();
1:6f4b079: 			}
1:6f4b079: 			synchronized (bundlesToInstall) {
1:6f4b079: 				installBundles();
1:6f4b079: 			}
1:6f4b079: 			updateSharePolicies();
1:6f4b079: 			scope.setLastUpdate(id);
1:6f4b079: 			scope.getScopes().addScope(scope);
1:6f4b079: 			scope.setUpdating(false);
1:6f4b079: 			return true;
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	private boolean contains(Bundle bundle, ScopeUpdateImpl scopeUpdate) {
1:e9f9bca: 		// Recurse to the top of the tree and then perform a depth-first search.
1:e9f9bca: 		return parent == null ? contains0(bundle, scopeUpdate) : parent.contains(bundle, scopeUpdate);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	private boolean contains0(Bundle bundle, ScopeUpdateImpl scopeUpdate) {
1:e9f9bca: 		if (!equals(scopeUpdate) && bundles.contains(bundle))
2:e9f9bca: 			return true;
1:e9f9bca: 		// Depth-first search.
2:e9f9bca: 		for (ScopeUpdate child : children) {
1:e9f9bca: 			if (((ScopeUpdateImpl)child).contains0(bundle, scopeUpdate)) return true;
1:e9f9bca: 		}
1:e9f9bca: 		return false;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	private void installBundles() throws BundleException {
1:e9f9bca: 		for (InstallInfo installInfo : getBundlesToInstall()) {
1:e9f9bca: 			ScopeManager.installingBundleToScope.put(installInfo.getLocation(), scope);
1:6f4b079: 			Activator.getBundleContext().installBundle(installInfo.getLocation(), installInfo.getContent());
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	private void removeBundles() throws BundleException {
1:e9f9bca: 		Collection<Bundle> bundles = new HashSet<Bundle>(scope.getBundles());
2:e9f9bca: 		for (Bundle b : bundles) {
1:e9f9bca: 			if (!getBundles().contains(b)) {
1:e9f9bca: 				if (!contains(b, null)) {
2:e9f9bca: 					b.uninstall();
1:e9f9bca: 				}
1:e9f9bca: 				else {
1:6f4b079: 					scope.getScopes().removeBundle(b);
1:e9f9bca: 				}
1:e9f9bca: 			}
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	private void uninstall(ScopeImpl scope) throws BundleException {
1:6f4b079: 		for (Scope child : scope.getChildren()) {
1:6f4b079: 			uninstall((ScopeImpl)child);
1:6f4b079: 		}
1:6f4b079: 		Collection<Bundle> bundles = new HashSet<Bundle>(scope.getBundles());
1:6f4b079: 		for (Bundle bundle : bundles) {
1:6f4b079: 			if (!contains(bundle, null)) {
1:6f4b079: 				bundle.uninstall();
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		scope.getScopes().removeScope(scope);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void uninstallChildren() throws BundleException {
1:6f4b079: 		Collection<Scope> children = new HashSet<Scope>(scope.getChildren());
1:6f4b079: 		for (Scope child : children) {
1:6f4b079: //		for (Iterator<Scope> i = scope.children.iterator(); i.hasNext();) {
1:6f4b079: //			Scope child = i.next();
1:e9f9bca: 			boolean found = false;
1:e9f9bca: 			for (ScopeUpdate su : getChildren()) {
1:e9f9bca: 				if (child.equals(su.getScope())) {
1:e9f9bca: 					found = true;
1:e9f9bca: 					break;
1:e9f9bca: 				}
1:e9f9bca: 			}
1:e9f9bca: 			if (!found) {
1:6f4b079: 				uninstall((ScopeImpl)child);
1:e9f9bca: 			}
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	private void updateSharePolicies() {
1:6f4b079: 		scope.getSharePolicies().replaceAll(sharePolicies);
1:e9f9bca: 	}
1:e9f9bca:  }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.scope.internal.Activator;
1: 		ScopeUpdateImpl scopeUpdate = new ScopeUpdateImpl(scope, null);
1: 			scopeUpdate.children.add(new ScopeUpdateImpl((ScopeImpl)child, scopeUpdate));
1: 	private static final IdGenerator idGenerator = new IdGenerator(1);
1: 	private final Set<Bundle> bundles = Collections.synchronizedSet(new HashSet<Bundle>());
1: 	private final List<InstallInfo> bundlesToInstall = Collections.synchronizedList(new ArrayList<InstallInfo>());
1: 	private final Set<ScopeUpdate> children = Collections.synchronizedSet(new HashSet<ScopeUpdate>());
1: 	private final long id = idGenerator.nextId();
1: 	private final SharePolicies sharePolicies = new SharePolicies();
1: 	private ScopeUpdateImpl(String name, String location, ScopeUpdateImpl parent) {
1: 		this.parent = parent;
1: 		this.scope = new ScopeImpl(
1: 				((ScopeImpl)parent.getScope()).getScopes().nextScopeId(),
1: 				name,
1: 				location,
1: 				parent.getScope().getId(),
1: 				null,
1: 				new SharePolicies(),
1: 				((ScopeImpl)parent.getScope()).getScopes());
1: 	}
1: 	
1: 	private ScopeUpdateImpl(ScopeImpl scope, ScopeUpdateImpl parent) {
1: 		bundles.addAll(scope.getBundles());
1: 		sharePolicies.replaceAll(scope.getSharePolicies());
/////////////////////////////////////////////////////////////////////////
1: 		return sharePolicies.getSharePolicies(type);
/////////////////////////////////////////////////////////////////////////
1: 		return new ScopeUpdateImpl(name, location, this);
/////////////////////////////////////////////////////////////////////////
1: 				scope.getScopes().addBundle(b, scope);
1: 	private synchronized boolean commit0() throws BundleException {
1: 		synchronized (scope) {
1: 			if (scope.getLastUpdate() > id)
1: 			scope.setUpdating(true);
1: 			synchronized (bundles) {
1: 				removeBundles();
1: 			}
1: 			synchronized (children) {
1: 				for (ScopeUpdate child : children) {
1: 					if (!((ScopeUpdateImpl)child).commit0())
1: 						return false;
1: 				}
1: 				uninstallChildren();
1: 			}
1: 			synchronized (bundles) {
1: 				addBundles();
1: 			}
1: 			synchronized (bundlesToInstall) {
1: 				installBundles();
1: 			}
1: 			updateSharePolicies();
1: 			scope.setLastUpdate(id);
1: 			scope.getScopes().addScope(scope);
1: 			scope.setUpdating(false);
1: 			return true;
/////////////////////////////////////////////////////////////////////////
1: 			Activator.getBundleContext().installBundle(installInfo.getLocation(), installInfo.getContent());
/////////////////////////////////////////////////////////////////////////
1: 					scope.getScopes().removeBundle(b);
1: 	private void uninstall(ScopeImpl scope) throws BundleException {
1: 		for (Scope child : scope.getChildren()) {
1: 			uninstall((ScopeImpl)child);
1: 		}
1: 		Collection<Bundle> bundles = new HashSet<Bundle>(scope.getBundles());
1: 		for (Bundle bundle : bundles) {
1: 			if (!contains(bundle, null)) {
1: 				bundle.uninstall();
1: 			}
1: 		}
1: 		scope.getScopes().removeScope(scope);
1: 	}
1: 	
1: 	private void uninstallChildren() throws BundleException {
1: 		Collection<Scope> children = new HashSet<Scope>(scope.getChildren());
1: 		for (Scope child : children) {
1: //		for (Iterator<Scope> i = scope.children.iterator(); i.hasNext();) {
1: //			Scope child = i.next();
/////////////////////////////////////////////////////////////////////////
1: 				uninstall((ScopeImpl)child);
1: 		scope.getSharePolicies().replaceAll(sharePolicies);
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
1: import java.util.HashSet;
0: import java.util.Iterator;
1: import java.util.Set;
1: 	public static ScopeUpdateImpl newInstance(ScopeImpl scope) {
0: 		ScopeUpdateImpl scopeUpdate = new ScopeUpdateImpl(null, null, scope, null);
1: 		for (Scope child : scopeUpdate.scope.getChildren()) {
0: 			scopeUpdate.children.add(new ScopeUpdateImpl(null, null, (ScopeImpl)child, scopeUpdate));
1: 		}
1: 		return scopeUpdate;
1: 	}
1: 	
0: 	public static ScopeUpdateImpl newInstance(String name, String location, ScopeUpdateImpl parent) {
0: 		return new ScopeUpdateImpl(name, location, null, parent);
1: 	}
1: 	
0: 	private static long lastId;
0: 	private static synchronized long nextId() {
0: 		if (lastId == Long.MAX_VALUE)
0: 			throw new IllegalStateException("The next ID would exceed Long.MAX_VALUE");
0: 		return ++lastId;
1: 	}
1: 	
0: 	private final Set<Bundle> bundles;
0: 	private final List<InstallInfo> bundlesToInstall = new ArrayList<InstallInfo>();
0: 	private final Set<ScopeUpdate> children = new HashSet<ScopeUpdate>();
0: 	private final Map<String, List<SharePolicy>> exportPolicies;
0: 	private final long id = nextId();
0: 	private final Map<String, List<SharePolicy>> importPolicies;
1: 	private final ScopeUpdateImpl parent;
1: 	private final ScopeImpl scope;
1: 	
0: 	private ScopeUpdateImpl(
0: 			String name,
0: 			String location,
0: 			ScopeImpl scope,
0: 			ScopeUpdateImpl parent) {
0: 		if (scope == null)
0: 			scope = new ScopeImpl(parent.scope.bundleContext, name, location, parent.scope);
1: 		this.scope = scope;
1: 		this.parent = parent;
0: 		bundles = new HashSet<Bundle>(scope.getBundles());
0: 		exportPolicies = new HashMap<String, List<SharePolicy>>(scope.getSharePolicies(SharePolicy.TYPE_EXPORT));
0: 		importPolicies = new HashMap<String, List<SharePolicy>>(scope.getSharePolicies(SharePolicy.TYPE_IMPORT));
1: 	}
1: 	
1: 	public boolean commit() throws BundleException {
1: 		if (parent != null)
1: 			throw new IllegalStateException("Only the root ScopeUpdate may be committed");
1: 		return commit0();
1: 	}
1: 	
1: 	public Collection<Bundle> getBundles() {
1: 		return bundles;
1: 	}
1: 	
1: 	public List<InstallInfo> getBundlesToInstall() {
1: 		return bundlesToInstall;
1: 	}
1: 	
1: 	public Collection<ScopeUpdate> getChildren() {
1: 		return children;
1: 	}
1: 	public String getName() {
1: 		return scope.getName();
1: 	}
1: 	
1: 	public Scope getScope() {
1: 		return scope;
1: 	}
1: 	public Map<String, List<SharePolicy>> getSharePolicies(String type) {
0: 		if (SharePolicy.TYPE_EXPORT.equals(type))
0: 			return exportPolicies;
0: 		else if (SharePolicy.TYPE_IMPORT.equals(type))
0: 			return importPolicies;
0: 		throw new IllegalArgumentException(type);
1: 	}
1: 	public ScopeUpdate newChild(String name) {
1: 		return newChild(name, null);
1: 	}
1: 	public ScopeUpdate newChild(String name, String location) {
0: 		return ScopeUpdateImpl.newInstance(name, location, this);
1: 	}
1: 		
1: 	private void addBundles() {
1: 		for (Bundle b : getBundles()) {
1: 			if (!getScope().getBundles().contains(b)) {
1: 				if (contains(b, this)) {
1: 					throw new IllegalStateException("Bundle " + b.getSymbolicName() + " being added to scope " + getName() + " but already exists in another scope");
1: 				}
0: 				scope.bundles.add(b);
0: 				ScopeManager.bundleToScope.put(b, scope);
1: 			}
1: 		}
1: 	}
1: 	
0: 	private boolean commit0() throws BundleException {
0: 		if (scope.lastUpdate > id)
1: 			return false;
0: 		scope.updating = true;
1: 		for (ScopeUpdate child : children) {
0: 			if (!((ScopeUpdateImpl)child).commit0())
1: 				return false;
1: 		}
0: 		removeBundles();
0: 		addBundles();
0: 		installBundles();
0: 		uninstallScopes();
0: 		installScopes();
0: 		updateSharePolicies();
0: 		scope.lastUpdate = id;
0: 		scope.updating = false;
1: 		return true;
1: 	}
1: 	
1: 	private boolean contains(Bundle bundle, ScopeUpdateImpl scopeUpdate) {
1: 		// Recurse to the top of the tree and then perform a depth-first search.
1: 		return parent == null ? contains0(bundle, scopeUpdate) : parent.contains(bundle, scopeUpdate);
1: 	}
1: 	
1: 	private boolean contains0(Bundle bundle, ScopeUpdateImpl scopeUpdate) {
1: 		if (!equals(scopeUpdate) && bundles.contains(bundle))
1: 			return true;
1: 		// Depth-first search.
1: 		for (ScopeUpdate child : children) {
1: 			if (((ScopeUpdateImpl)child).contains0(bundle, scopeUpdate)) return true;
1: 		}
1: 		return false;
1: 	}
1: 	
1: 	private void installBundles() throws BundleException {
1: 		for (InstallInfo installInfo : getBundlesToInstall()) {
1: 			ScopeManager.installingBundleToScope.put(installInfo.getLocation(), scope);
0: 			scope.bundleContext.installBundle(installInfo.getLocation(), installInfo.getContent());
1: 		}
1: 	}
1: 	
0: 	private void installScopes() {
0: 		for (ScopeUpdate child : getChildren()) {
0: 			if (!getScope().getChildren().contains(child.getScope())) {
0: 				scope.children.add(child.getScope());
1: 			}
1: 		}
1: 	}
1: 	
1: 	private void removeBundles() throws BundleException {
1: 		Collection<Bundle> bundles = new HashSet<Bundle>(scope.getBundles());
1: 		for (Bundle b : bundles) {
1: 			if (!getBundles().contains(b)) {
1: 				if (!contains(b, null)) {
1: 					b.uninstall();
1: 				}
1: 				else {
0: 					scope.bundles.remove(b);
1: 				}
1: 			}
1: 		}
1: 	}
1: 	
0: 	private void uninstallScopes() throws BundleException {
0: 		for (Iterator<Scope> i = scope.children.iterator(); i.hasNext();) {
0: 			Scope child = i.next();
1: 			boolean found = false;
1: 			for (ScopeUpdate su : getChildren()) {
1: 				if (child.equals(su.getScope())) {
1: 					found = true;
1: 					break;
1: 				}
1: 			}
1: 			if (!found) {
0: 				Collection<Bundle> bundles = new HashSet<Bundle>(child.getBundles());
1: 				for (Bundle b : bundles) {
1: 					b.uninstall();
1: 				}
0: 				i.remove();
1: 			}
1: 		}
1: 	}
1: 	
1: 	private void updateSharePolicies() {
0: 		updateExportSharePolicies(getSharePolicies(SharePolicy.TYPE_EXPORT));
0: 		updateImportSharePolicies(getSharePolicies(SharePolicy.TYPE_IMPORT));
1: 	}
1: 	
0: 	private void updateExportSharePolicies(Map<String, List<SharePolicy>> exportPolicies) {
0: 		scope.exportPolicies.clear();
0: 		scope.exportPolicies.putAll(exportPolicies);
1: 	}
1: 	
0: 	private void updateImportSharePolicies(Map<String, List<SharePolicy>> importPolicies) {
0: 		scope.importPolicies.clear();
0: 		scope.importPolicies.putAll(importPolicies);
1: 	}
1:  }
author:Lin Sun
-------------------------------------------------------------------------------
commit:b4c3c21
/////////////////////////////////////////////////////////////////////////
0: import java.io.BufferedReader;
0: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.FileReader;
/////////////////////////////////////////////////////////////////////////
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.ServiceReference;
0: import org.osgi.service.condpermadmin.ConditionInfo;
0: import org.osgi.service.condpermadmin.ConditionalPermissionAdmin;
0: import org.osgi.service.condpermadmin.ConditionalPermissionInfo;
0: import org.osgi.service.condpermadmin.ConditionalPermissionUpdate;
0: import org.osgi.service.permissionadmin.PermissionInfo;
/////////////////////////////////////////////////////////////////////////
0:     private final static PermissionInfo[] denyInfo = 
0:     {
0:         new PermissionInfo("org.osgi.framework.ServicePermission", "org.osgi.service.condpermadmin.ConditionalPermissionAdmin", "*"),
0:         new PermissionInfo("org.osgi.framework.ServicePermission", "org.osgi.service.permissionadmin.PermissionAdmin", "*"),
0:         new PermissionInfo("org.osgi.framework.ServicePermission", "org.osgi.framework.hooks.service.*", "*"),
0:         new PermissionInfo("org.osgi.framework.ServicePermission", "org.osgi.service.packageadmin.PackageAdmin", "*")
0:     };
1:     
0:     private final static PermissionInfo[] allowInfo = {
0:         new PermissionInfo("org.osgi.framework.PackagePermission", "*", "import"),
0:         new PermissionInfo("org.osgi.framework.BundlePermission", "*", "host,provide,fragment"),
0:     };
1:     
0:     private final static PermissionInfo[] defaultAllowInfo = {
0:             new PermissionInfo("java.lang.RuntimePermission", "loadLibrary.*", "*"),
0:             new PermissionInfo("java.lang.RuntimePermission", "queuePrintJob", "*"),
0:             new PermissionInfo("java.net.SocketPermission", "*", "connect"),
0:             new PermissionInfo("java.util.PropertyPermission", "*", "read"),
0:             new PermissionInfo("org.osgi.framework.PackagePermission", "*", "exportonly,import"),
0:             new PermissionInfo("org.osgi.framework.ServicePermission", "*", "get,register"),
0:         };
/////////////////////////////////////////////////////////////////////////
0:         int numException = 0;
1:         
/////////////////////////////////////////////////////////////////////////
0:                 // prefix location with scope-scopeId:
0:                 loc = "scope-" + this.getScope().getId() + ": " + loc;
0:                 numException++;
/////////////////////////////////////////////////////////////////////////
0:         // Sets up Java 2 security permissions for the application
0:         try {
0:           boolean suc = setupJava2Security(scope.getLocation());
0:           if (!suc) {
0:               numException++;
0:           }
0:         } catch (BundleException ex) {
0:             numException++;
0:             throw ex;
0:         }
0:         
/////////////////////////////////////////////////////////////////////////
0:                 numException++;
/////////////////////////////////////////////////////////////////////////
0:         return numException == 0 ? true : false;
0:     }
0:      
0:     private boolean setupJava2Security(String location) throws BundleException {
0:         // obtain security manager
0:         SecurityManager secMan = System.getSecurityManager();
0:         
0:         if (secMan == null) {
0:             return true;
0:         }
0:         
0:         ServiceReference permRef = bc.getServiceReference(ConditionalPermissionAdmin.class.getName());
0: 
0:         ConditionalPermissionAdmin permAdmin = (ConditionalPermissionAdmin) bc.getService(permRef);
0:         ConditionalPermissionUpdate update = permAdmin.newConditionalPermissionUpdate();
0: 
0:         List<ConditionalPermissionInfo> infos = update.getConditionalPermissionInfos();
0:         //infos.clear();
0: 
0:         // set up the conditionInfo
0:         String scopePrefix = "scope-" + this.scope.getId() + "-*";
0:         ConditionInfo[] conditionInfo = new ConditionInfo[] {new ConditionInfo("org.osgi.service.condpermadmin.BundleLocationCondition", new String[]{scopePrefix})}; 
0:         // Set up permissions which are common to all applications
0:         infos.add(permAdmin.newConditionalPermissionInfo(null, conditionInfo, denyInfo, "deny"));
0:         infos.add(permAdmin.newConditionalPermissionInfo(null, conditionInfo, allowInfo, "allow"));
0: 
0:         // exact scope permission from scope installation loc
0:         // TODO: need to figure out the permFile from the scope/subsystem, META-INF/permissions.perm
0:         // Also add code to handle the permission file
0:         File permFile = new File("META-INF/permissions.perm");
0:         if (!permFile.exists()) { 
0:             /*
0:              * If there is no specific permissions file provided, the following 
0:              * default permissions are provided.
0:              */        
0:             infos.add(permAdmin.newConditionalPermissionInfo(null, conditionInfo, defaultAllowInfo, "allow"));
0: 
0:         }
0:         
0:         if (!update.commit()) {
0:             return false;
0:         }
0:         
0:         
0: 
commit:aeedca8
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
1: package org.apache.aries.subsystem.scope.impl;
0: 
0: import java.io.IOException;
0: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Map;
0: import java.util.concurrent.ConcurrentHashMap;
0: 
1: import org.apache.aries.subsystem.scope.InstallInfo;
1: import org.apache.aries.subsystem.scope.Scope;
0: import org.apache.aries.subsystem.scope.ScopeAdmin;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.apache.aries.subsystem.scope.SharePolicy;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
0: import org.osgi.framework.ServiceRegistration;
0: 
1: public class ScopeUpdateImpl implements ScopeUpdate {
0: 
0:     private ScopeImpl scope;
0:     private List<InstallInfo> installInfo = new ArrayList<InstallInfo>();
0:     private List<ScopeUpdate> children = new ArrayList<ScopeUpdate>();
0:     private List<Scope> tbrChildren = new ArrayList<Scope>();
0:     private BundleContext bc;
0:     private static ConcurrentHashMap<Long, ServiceRegistration> srs = new ConcurrentHashMap<Long, ServiceRegistration>();
0:     
0:     public ScopeUpdateImpl(ScopeImpl scope, BundleContext bc) {
0:         this.scope = scope;
0:         this.bc = bc;
0:     }
0:     
0:     public ScopeUpdateImpl(ScopeImpl scope, List<InstallInfo> installInfo) {
0:         this.scope = scope;
0:         this.installInfo = installInfo;
0:     }
0:     
0:     
0:     public ScopeUpdateImpl(ScopeImpl scope, List<InstallInfo> installInfo, List<ScopeUpdate> children) {
0:         this.scope = scope;
0:         this.installInfo = installInfo;
0:         this.children = children;
0:     }
0:     
0:     public ScopeImpl getScope() {
0:         return this.scope;
0:     }
0:     
0:     public boolean commit() throws BundleException {
0:         // process installedBundle
0:         boolean success = false;
0:         List<Bundle> installedBundle = new ArrayList<Bundle>();
0:         for (InstallInfo info : this.installInfo) {
0:             URL url = info.getContent();
0:             String loc = info.getLocation();
0:             Bundle b;
0:             Bundle oldB = alreadyInstalled(info);
0:             
0:             // in case of modify, uninstall the previous bundle first.
0:             if (oldB != null) {
0:                 oldB.uninstall();
0:                 getBundles().remove(oldB);
0:             }
0:             
0:             try {
0:                 scope.getToBeInstalledBundleLocation().add(loc);
0:                 b = bc.installBundle(loc, url.openStream());
0:                 installedBundle.add(b);
0:             } catch (IOException e) {
0:                 // clear bundle location off the list.
0:                 scope.getToBeInstalledBundleLocation().remove(loc);
0:                 throw new BundleException("problem when opening url " + e.getCause());
0:             }
0:             scope.getToBeInstalledBundleLocation().remove(loc);
0:         }
0:         
0:         // clear bundle location list since all install is finished.
0:         scope.clearBundleLocations();
0:         
0:         // update bundle list for the scope
0:         getBundles().addAll(installedBundle);
0: 
0:         
0:         // process child scopes
0:         Collection<ScopeUpdate> children = getChildren();
0:         for (ScopeUpdate child : children) {
0:             
0:             ScopeUpdateImpl scopeUpdateImpl = (ScopeUpdateImpl)child;
0:             ServiceRegistration sr = null;
0:             try {
0:                 // also create a new scopeAdmin as scopeadmin and scope is 1-1 relationship
0:                 ScopeAdminImpl newScopeAdmin = new ScopeAdminImpl(this.scope, scopeUpdateImpl.getScope());
0:                 
0:                 
0:                 sr = this.bc.registerService(ScopeAdmin.class.getName(), 
0:                         newScopeAdmin, 
0:                         DictionaryBuilder.build("ScopeName", child.getName(), "ScopeId", scopeUpdateImpl.getScope().getId()));
0:                 srs.put(scopeUpdateImpl.getScope().getId(), sr);
0:                 child.commit();
0:             } catch (BundleException e) {
0:                 if (sr != null) {
0:                     sr.unregister();
0:                     srs.remove(scopeUpdateImpl.getScope().getId());
0:                 }
0:                 throw new BundleException("problem when commiting child scope: " + child.getName() + " " + e.getCause());
0:             }
0:             
0: 
0:             // update current scope to specify the children.
0:             getExistingChildren().add(scopeUpdateImpl.getScope());
0:             
0: 
0:         }
0:         // remove any scopes in to be removed children list
0:         for (Scope scope : tbrChildren) {
0:             removeChildScope(scope); 
0:         }
0:         
0:         
0:         return true;
0:     }
0:     
0:     // check if the install info is already installed in the scope
0:     private Bundle alreadyInstalled(InstallInfo info) {
0:         String loc = info.getLocation();
0:         
0:         Collection<Bundle> bundles = scope.getBundles();
0:         
0:         for (Bundle b : bundles) {
0:             if (b.getLocation().equals(loc)) {
0:                 return b;
0:             }
0:         }
0:         
0:         return null;
0:     }
0: 
0:     public Collection<Bundle> getBundles() {
0:         return scope.getModifiableBundles();
0:     }
0: 
0:     public List<InstallInfo> getBundlesToInstall() {
0:         return this.installInfo;
0:     }
0:     
0:     /*public List<InstallInfo> getBundlesToDelete() {
0:         return this.installInfo;
0:     }
0:     
0:     public List<InstallInfo> getBundlesToModify() {
0:         return this.installInfo;
0:     }*/
0: 
0:     public Collection<ScopeUpdate> getChildren() {
0:         return this.children;
0:     }
0:     
0:     public Collection<Scope> getExistingChildren() {
0:         return scope.getModifiableChildren();
0:     }
0: 
0:     public Collection<Scope> getToBeRemovedChildren() {
0:         return this.tbrChildren;
0:     }
0:     
0:     // this would remove the child off the scope and uninstall the scope.
0:     private void removeChildScope(Scope sc) {
0:         removeChildScope(sc.getId());
0:     }
0:     // this would remove the child off the scope and uninstall the scope.
0:     private void removeChildScope(long id) {
0:         Collection<Scope> scopes =  scope.getModifiableChildren();
0:         for (Scope scope : scopes) {
0:             if (scope.getId() == id) {
0:                 for (Bundle b : scope.getBundles()) {
0:                     try {
0:                         b.uninstall();
0:                     } catch (BundleException e) {
0:                         // TODO Auto-generated catch block
0:                         e.printStackTrace();
0:                     }
0:                 }
0:                 scopes.remove(scope);
0:                 // unregister the associated ScopeAdmin in service registry
0:                 ServiceRegistration sr = srs.get(id);
0:                 if (sr != null) {
0:                     sr.unregister();
0:                     srs.remove(id);
0:                 } else {
0:                     throw new NullPointerException ("Unable to find the ScopeAdmin service Registration in the map");
0:                 }
0:                 return;
0:             }
0:         }
0:     }
0:     
0:     public String getName() {
0:         return scope.getName();
0:     }
0: 
0:     public Map<String, List<SharePolicy>> getSharePolicies(String type) {
0:         return scope.getModifiableSharePolicies(type);
0:     }
0: 
0:     public ScopeUpdate newChild(String name) {
0:         ScopeImpl newScope = new ScopeImpl(name);
0: 
0:         // create scope update
0:         ScopeUpdate scopeUpdate = new ScopeUpdateImpl(newScope, this.bc);
0:         this.children.add(scopeUpdate);
0:         return scopeUpdate;
0:     }
0: 
0:     public ScopeUpdate newChild(String name, String location) {
0:         ScopeImpl newScope = new ScopeImpl(name, location);
0: 
0:         // create scope update
0:         ScopeUpdate scopeUpdate = new ScopeUpdateImpl(newScope, this.bc);
0:         this.children.add(scopeUpdate);
0:         return scopeUpdate;
0:     }
0: }
============================================================================