1:868c96f: /**
1:868c96f:  * Licensed to the Apache Software Foundation (ASF) under one
1:868c96f:  * or more contributor license agreements.  See the NOTICE file
1:868c96f:  * distributed with this work for additional information
1:868c96f:  * regarding copyright ownership.  The ASF licenses this file
1:868c96f:  * to you under the Apache License, Version 2.0 (the
1:868c96f:  * "License"); you may not use this file except in compliance
1:868c96f:  * with the License.  You may obtain a copy of the License at
1:868c96f:  * <p>
1:868c96f:  * http://www.apache.org/licenses/LICENSE-2.0
1:868c96f:  * <p>
1:868c96f:  * Unless required by applicable law or agreed to in writing,
1:868c96f:  * software distributed under the License is distributed on an
1:868c96f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:868c96f:  * KIND, either express or implied.  See the License for the
1:868c96f:  * specific language governing permissions and limitations
1:868c96f:  * under the License.
1:868c96f:  */
1:868c96f: package org.apache.aries.blueprint.plugin.pax;
3:868c96f: 
1:868c96f: import com.google.common.collect.Iterables;
1:868c96f: import com.google.common.collect.Lists;
1:a04c623: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1:6aac545: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1:6aac545: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1:6aac545: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1:868c96f: import org.ops4j.pax.cdi.api.OsgiServiceProvider;
1:868c96f: import org.ops4j.pax.cdi.api.Properties;
1:868c96f: import org.ops4j.pax.cdi.api.Property;
1:868c96f: 
1:868c96f: import javax.xml.stream.XMLStreamException;
1:868c96f: import javax.xml.stream.XMLStreamWriter;
1:868c96f: import java.lang.reflect.AnnotatedElement;
1:868c96f: import java.util.HashMap;
1:868c96f: import java.util.List;
1:868c96f: import java.util.Map;
1:868c96f: 
1:fc7ae19: public class OsgiServiceProviderHandler implements BeanAnnotationHandler<OsgiServiceProvider> {
2:868c96f:     @Override
1:868c96f:     public Class<OsgiServiceProvider> getAnnotation() {
1:868c96f:         return OsgiServiceProvider.class;
2:868c96f:     }
1:868c96f: 
1:868c96f:     @Override
1:a04c623:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, final String id, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
2:868c96f:         handleAnnotation(annotatedElement, id, contextEnricher);
1:868c96f:     }
1:868c96f: 
1:868c96f:     private void handleAnnotation(AnnotatedElement annotatedElement, final String id, ContextEnricher contextEnricher) {
1:868c96f:         final OsgiServiceProvider serviceProvider = annotatedElement.getAnnotation(OsgiServiceProvider.class);
1:868c96f:         Properties properties = annotatedElement.getAnnotation(Properties.class);
1:868c96f: 
1:868c96f:         final List<String> interfaceNames = extractServiceInterfaces(serviceProvider);
1:868c96f: 
1:868c96f:         final Map<String, String> propertiesAsMap = extractProperties(properties);
1:868c96f: 
1:0d2c0ec:         contextEnricher.addBlueprintContentWriter("OsgiServiceProvider/" + annotatedElement + "/" + id, new XmlWriter() {
1:868c96f:             @Override
1:868c96f:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:868c96f:                 writeService(writer, propertiesAsMap, interfaceNames, id);
1:868c96f:             }
1:868c96f:         });
1:868c96f:     }
1:868c96f: 
1:868c96f:     private void writeService(XMLStreamWriter writer, Map<String, String> propertiesAsMap, List<String> interfaceNames, String id) throws XMLStreamException {
1:868c96f:         // If there are no properties to write and only one service attribute (either
1:868c96f:         // interface="MyServiceInterface" or auto-export="interfaces") then create an
1:868c96f:         // empty element
1:868c96f:         boolean writeEmptyElement = propertiesAsMap.isEmpty() && interfaceNames.size() < 2;
1:868c96f:         if (writeEmptyElement) {
1:868c96f:             writer.writeEmptyElement("service");
1:868c96f:         } else {
1:868c96f:             writer.writeStartElement("service");
1:868c96f:         }
1:868c96f:         writer.writeAttribute("ref", id);
1:868c96f: 
1:868c96f:         if (interfaceNames.size() == 0) {
1:868c96f:             writer.writeAttribute("auto-export", "interfaces");
1:868c96f:         } else if (interfaceNames.size() == 1) {
1:868c96f:             writer.writeAttribute("interface", Iterables.getOnlyElement(interfaceNames));
1:868c96f:         } else {
1:868c96f:             writeInterfacesElement(writer, interfaceNames);
1:868c96f:         }
1:868c96f: 
1:868c96f:         if (!propertiesAsMap.isEmpty()) {
1:868c96f:             writeProperties(writer, propertiesAsMap);
1:868c96f:         }
1:868c96f: 
1:868c96f:         if (!writeEmptyElement) {
1:868c96f:             writer.writeEndElement();
1:868c96f:         }
1:868c96f:     }
1:868c96f: 
1:868c96f:     private static Map<String, String> extractProperties(Properties properties) {
1:868c96f:         Map<String, String> propertiesAsMap = new HashMap<>();
1:868c96f:         if (properties != null) {
1:868c96f:             for (Property property : properties.value()) {
1:868c96f:                 propertiesAsMap.put(property.name(), property.value());
1:868c96f:             }
1:868c96f:         }
1:868c96f:         return propertiesAsMap;
1:868c96f:     }
1:868c96f: 
1:868c96f:     private static List<String> extractServiceInterfaces(OsgiServiceProvider serviceProvider) {
1:868c96f:         List<String> interfaceNames = Lists.newArrayList();
1:868c96f:         for (Class<?> serviceIf : serviceProvider.classes()) {
1:868c96f:             interfaceNames.add(serviceIf.getName());
1:868c96f:         }
1:868c96f:         return interfaceNames;
1:868c96f:     }
1:868c96f: 
1:868c96f:     private void writeInterfacesElement(XMLStreamWriter writer, Iterable<String> interfaceNames) throws XMLStreamException {
3:868c96f:         writer.writeCharacters("\n");
1:868c96f:         writer.writeCharacters("    ");
1:868c96f:         writer.writeStartElement("interfaces");
1:6aac545:         writer.writeCharacters("\n");
1:868c96f:         for (String interfaceName : interfaceNames) {
1:868c96f:             writer.writeCharacters("        ");
1:868c96f:             writer.writeStartElement("value");
1:868c96f:             writer.writeCharacters(interfaceName);
1:868c96f:             writer.writeEndElement();
1:868c96f:             writer.writeCharacters("\n");
1:868c96f:         }
1:868c96f:         writer.writeCharacters("    ");
1:868c96f:         writer.writeEndElement();
1:868c96f:         writer.writeCharacters("\n");
1:868c96f:     }
1:868c96f: 
1:868c96f:     private void writeProperties(XMLStreamWriter writer, Map<String, String> properties) throws XMLStreamException {
1:868c96f:         writer.writeCharacters("    ");
1:868c96f:         writer.writeStartElement("service-properties");
1:868c96f:         writer.writeCharacters("\n");
1:868c96f:         for (Map.Entry<String, String> property : properties.entrySet()) {
1:868c96f:             writer.writeCharacters("        ");
1:868c96f:             writer.writeEmptyElement("entry");
1:868c96f:             writer.writeAttribute("key", property.getKey());
1:868c96f:             writer.writeAttribute("value", property.getValue());
1:868c96f:             writer.writeCharacters("\n");
1:868c96f:         }
1:868c96f:         writer.writeCharacters("    ");
1:868c96f:         writer.writeEndElement();
1:868c96f:         writer.writeCharacters("\n");
1:868c96f:     }
1:868c96f: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:fc7ae19
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class OsgiServiceProviderHandler implements BeanAnnotationHandler<OsgiServiceProvider> {
commit:6aac545
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         writer.writeCharacters("\n");
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
/////////////////////////////////////////////////////////////////////////
1:         contextEnricher.addBlueprintContentWriter("OsgiServiceProvider/" + annotatedElement + "/" + id, new XmlWriter() {
commit:a04c623
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
/////////////////////////////////////////////////////////////////////////
0: public class OsgiServiceProviderHandler implements BeanAnnotationHandler<OsgiServiceProvider>, CustomFactoryMethodAnnotationHandler<OsgiServiceProvider> {
/////////////////////////////////////////////////////////////////////////
1:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, final String id, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
commit:868c96f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.pax;
1: 
1: import com.google.common.collect.Iterables;
1: import com.google.common.collect.Lists;
0: import org.apache.aries.blueprint.plugin.spi.BlueprintWriter;
0: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
0: import org.apache.aries.blueprint.plugin.spi.CustomBeanAnnotationHandler;
0: import org.apache.aries.blueprint.plugin.spi.CustomFactoryMethodAnnotationHandler;
1: import org.ops4j.pax.cdi.api.OsgiServiceProvider;
1: import org.ops4j.pax.cdi.api.Properties;
1: import org.ops4j.pax.cdi.api.Property;
1: 
1: import javax.xml.stream.XMLStreamException;
1: import javax.xml.stream.XMLStreamWriter;
1: import java.lang.reflect.AnnotatedElement;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
0: public class OsgiServiceProviderHandler implements CustomBeanAnnotationHandler<OsgiServiceProvider>, CustomFactoryMethodAnnotationHandler<OsgiServiceProvider> {
1:     @Override
1:     public Class<OsgiServiceProvider> getAnnotation() {
1:         return OsgiServiceProvider.class;
1:     }
1: 
1:     @Override
0:     public void handleFactoryMethodAnnotation(AnnotatedElement annotatedElement, String id, ContextEnricher contextEnricher) {
1:         handleAnnotation(annotatedElement, id, contextEnricher);
1:     }
1: 
1:     @Override
0:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, final String id, ContextEnricher contextEnricher) {
1:         handleAnnotation(annotatedElement, id, contextEnricher);
1:     }
1: 
1:     private void handleAnnotation(AnnotatedElement annotatedElement, final String id, ContextEnricher contextEnricher) {
1:         final OsgiServiceProvider serviceProvider = annotatedElement.getAnnotation(OsgiServiceProvider.class);
1:         Properties properties = annotatedElement.getAnnotation(Properties.class);
1: 
1:         final List<String> interfaceNames = extractServiceInterfaces(serviceProvider);
1: 
1:         final Map<String, String> propertiesAsMap = extractProperties(properties);
1: 
0:         contextEnricher.addBlueprintWriter("OsgiServiceProvider/" + annotatedElement + "/" + id, new BlueprintWriter() {
1:             @Override
1:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:                 writeService(writer, propertiesAsMap, interfaceNames, id);
1:             }
1:         });
1:     }
1: 
1:     private void writeService(XMLStreamWriter writer, Map<String, String> propertiesAsMap, List<String> interfaceNames, String id) throws XMLStreamException {
1:         // If there are no properties to write and only one service attribute (either
1:         // interface="MyServiceInterface" or auto-export="interfaces") then create an
1:         // empty element
1:         boolean writeEmptyElement = propertiesAsMap.isEmpty() && interfaceNames.size() < 2;
1:         if (writeEmptyElement) {
1:             writer.writeEmptyElement("service");
1:         } else {
1:             writer.writeStartElement("service");
1:         }
1:         writer.writeAttribute("ref", id);
1: 
1:         if (interfaceNames.size() == 0) {
1:             writer.writeAttribute("auto-export", "interfaces");
1:         } else if (interfaceNames.size() == 1) {
1:             writer.writeAttribute("interface", Iterables.getOnlyElement(interfaceNames));
1:         } else {
1:             writeInterfacesElement(writer, interfaceNames);
1:         }
1: 
1:         writer.writeCharacters("\n");
1: 
1:         if (!propertiesAsMap.isEmpty()) {
1:             writeProperties(writer, propertiesAsMap);
1:         }
1: 
1:         if (!writeEmptyElement) {
1:             writer.writeEndElement();
1:             writer.writeCharacters("\n");
1:         }
1:     }
1: 
1:     private static Map<String, String> extractProperties(Properties properties) {
1:         Map<String, String> propertiesAsMap = new HashMap<>();
1:         if (properties != null) {
1:             for (Property property : properties.value()) {
1:                 propertiesAsMap.put(property.name(), property.value());
1:             }
1:         }
1:         return propertiesAsMap;
1:     }
1: 
1:     private static List<String> extractServiceInterfaces(OsgiServiceProvider serviceProvider) {
1:         List<String> interfaceNames = Lists.newArrayList();
1:         for (Class<?> serviceIf : serviceProvider.classes()) {
1:             interfaceNames.add(serviceIf.getName());
1:         }
1:         return interfaceNames;
1:     }
1: 
1:     private void writeInterfacesElement(XMLStreamWriter writer, Iterable<String> interfaceNames) throws XMLStreamException {
1:         writer.writeCharacters("\n");
1:         writer.writeCharacters("    ");
1:         writer.writeStartElement("interfaces");
1:         writer.writeCharacters("\n");
1:         for (String interfaceName : interfaceNames) {
1:             writer.writeCharacters("        ");
1:             writer.writeStartElement("value");
1:             writer.writeCharacters(interfaceName);
1:             writer.writeEndElement();
1:             writer.writeCharacters("\n");
1:         }
1:         writer.writeCharacters("    ");
1:         writer.writeEndElement();
1:     }
1: 
1:     private void writeProperties(XMLStreamWriter writer, Map<String, String> properties) throws XMLStreamException {
1:         writer.writeCharacters("    ");
1:         writer.writeStartElement("service-properties");
1:         writer.writeCharacters("\n");
1:         for (Map.Entry<String, String> property : properties.entrySet()) {
1:             writer.writeCharacters("        ");
1:             writer.writeEmptyElement("entry");
1:             writer.writeAttribute("key", property.getKey());
1:             writer.writeAttribute("value", property.getValue());
1:             writer.writeCharacters("\n");
1:         }
1:         writer.writeCharacters("    ");
1:         writer.writeEndElement();
1:         writer.writeCharacters("\n");
1:     }
1: }
============================================================================