1:e9f9bca: package org.apache.aries.subsystem.scope.itests;
1:e9f9bca: 
1:e9f9bca: import static org.junit.Assert.assertEquals;
1:e9f9bca: import static org.junit.Assert.assertTrue;
1:e9f9bca: 
1:e9f9bca: import java.net.URL;
1:e9f9bca: 
1:e9f9bca: import org.apache.aries.subsystem.scope.InstallInfo;
1:e9f9bca: import org.apache.aries.subsystem.scope.Scope;
1:e9f9bca: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:e9f9bca: import org.junit.Test;
1:e9f9bca: import org.osgi.framework.Bundle;
1:e9f9bca: import org.osgi.framework.ServiceReference;
1:e9f9bca: 
1:e9f9bca: /**
1:e9f9bca:  * Tests that bundles requesting a Scope service receive the correct one. 
1:e9f9bca:  * Bundles should receive the Scope within which they exist. Requesting bundles 
1:e9f9bca:  * are in the root scope by default.
1:e9f9bca:  */
1:e9f9bca: public class GetScopeServiceTest extends AbstractTest {
1:e9f9bca: 	/**
1:e9f9bca: 	 * The test bundle should be in and receive the root scope by default. The
1:e9f9bca: 	 * root scope will always have an ID of '0' and name of 'root'.
1:e9f9bca: 	 * @throws Exception
1:e9f9bca: 	 */
1:e9f9bca: 	@Test
1:e9f9bca: 	public void test1() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:e9f9bca: 		assertEquals(0, scope.getId());
1:e9f9bca: 		assertEquals("root", scope.getName());
1:e9f9bca: 		assertTrue(scope.getBundles().contains(bundleContext.getBundle()));
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	/**
1:e9f9bca: 	 * The tb3 bundle should also be in and receive the root scope by default.
1:e9f9bca: 	 * @throws Exception
1:e9f9bca: 	 */
1:e9f9bca: 	@Test
1:e9f9bca: 	public void test2() throws Exception {
1:e9f9bca: 		Bundle bundle = installBundle("tb-3.jar");
1:e9f9bca: 		bundle.start();
1:e9f9bca: 		ServiceReference<ScopeProvider> scopeProviderRef = bundleContext.getServiceReference(ScopeProvider.class);
1:e9f9bca: 		ScopeProvider scopeProvider = bundleContext.getService(scopeProviderRef);
3:e9f9bca: 		Scope scope = scopeProvider.getScope();
1:6f4b079: 		assertEquals(getScope(), scope);
1:e9f9bca: 		assertTrue(scope.getBundles().contains(bundle));
1:e9f9bca: 		bundleContext.ungetService(scopeProviderRef);
1:e9f9bca: 		bundle.uninstall();
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	/**
1:e9f9bca: 	 * A new scope is created as a child of the root scope and the tb3 bundle
1:e9f9bca: 	 * is added to it. The tb3 bundle should receive and be in the new scope.
1:e9f9bca: 	 * @throws Exception
1:e9f9bca: 	 */
1:e9f9bca: 	@Test
1:e9f9bca: 	public void test3() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:e9f9bca: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1:e9f9bca: 		ScopeUpdate child = scopeUpdate.newChild("tb3");
1:e9f9bca: 		scopeUpdate.getChildren().add(child);
1:e9f9bca: 		String location = getBundleLocation("tb-3.jar");
1:e9f9bca: 		URL url = new URL(location);
1:e9f9bca: 		InstallInfo installInfo = new InstallInfo(location, url.openStream());
1:e9f9bca: 		child.getBundlesToInstall().add(installInfo);
1:e9f9bca: 		addPackageImportPolicy("org.osgi.framework", child);
1:e9f9bca: 		addPackageImportPolicy("org.apache.aries.subsystem.scope", child);
1:e9f9bca: 		addPackageImportPolicy("org.apache.aries.subsystem.scope.itests", child);
1:e9f9bca: 		addServiceImportPolicy(Scope.class, child);
1:e9f9bca: 		addServiceExportPolicy(ScopeProvider.class, child);
1:e9f9bca: 		scopeUpdate.commit();
1:e9f9bca: 		Bundle bundle = bundleContext.getBundle(location);
1:e9f9bca: 		bundle.start();
1:e9f9bca: 		ServiceReference<ScopeProvider> scopeProviderRef = bundleContext.getServiceReference(ScopeProvider.class);
1:e9f9bca: 		ScopeProvider scopeProvider = bundleContext.getService(scopeProviderRef);
1:6f4b079: 		scope = scopeProvider.getScope();
1:e9f9bca: 		assertEquals("tb3", scope.getName());
1:e9f9bca: 		assertTrue(scope.getBundles().contains(bundle));
1:e9f9bca: 		bundleContext.ungetService(scopeProviderRef);
1:e9f9bca: 		bundle.uninstall();
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	/**
1:e9f9bca: 	 * A new scope is created as a child of the root scope and the tb3 bundle
1:e9f9bca: 	 * is added to it. The tb3 bundle should receive and be in the new scope.
1:e9f9bca: 	 * The bundle is added directly as opposed to via an InstallInfo.
1:e9f9bca: 	 * @throws Exception
1:e9f9bca: 	 */
1:e9f9bca: 	@Test
1:e9f9bca: 	public void test4() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:e9f9bca: 		Bundle bundle = installBundle("tb-3.jar");
1:e9f9bca: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1:e9f9bca: 		scopeUpdate.getBundles().remove(bundle);
1:e9f9bca: 		ScopeUpdate child = scopeUpdate.newChild("tb3");
1:e9f9bca: 		scopeUpdate.getChildren().add(child);
1:e9f9bca: 		child.getBundles().add(bundle);
1:e9f9bca: 		addPackageImportPolicy("org.osgi.framework", child);
1:e9f9bca: 		addPackageImportPolicy("org.apache.aries.subsystem.scope", child);
1:e9f9bca: 		addPackageImportPolicy("org.apache.aries.subsystem.scope.itests", child);
1:e9f9bca: 		addServiceImportPolicy(Scope.class, child);
1:e9f9bca: 		addServiceExportPolicy(ScopeProvider.class, child);
1:e9f9bca: 		scopeUpdate.commit();
1:e9f9bca: 		bundle.start();
1:e9f9bca: 		ServiceReference<ScopeProvider> scopeProviderRef = bundleContext.getServiceReference(ScopeProvider.class);
1:e9f9bca: 		ScopeProvider scopeProvider = bundleContext.getService(scopeProviderRef);
1:6f4b079: 		scope = scopeProvider.getScope();
1:e9f9bca: 		assertEquals("tb3", scope.getName());
1:e9f9bca: 		assertTrue(scope.getBundles().contains(bundle));
1:e9f9bca: 		bundleContext.ungetService(scopeProviderRef);
1:e9f9bca: 		bundle.uninstall();
1:e9f9bca: 	}
1:e9f9bca: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5bdb2b8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: 		Scope scope = getScope();
/////////////////////////////////////////////////////////////////////////
1: 		assertEquals(getScope(), scope);
/////////////////////////////////////////////////////////////////////////
1: 		Scope scope = getScope();
/////////////////////////////////////////////////////////////////////////
1: 		scope = scopeProvider.getScope();
/////////////////////////////////////////////////////////////////////////
1: 		Scope scope = getScope();
/////////////////////////////////////////////////////////////////////////
1: 		scope = scopeProvider.getScope();
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URL;
1: 
1: import org.apache.aries.subsystem.scope.InstallInfo;
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceReference;
1: 
1: /**
1:  * Tests that bundles requesting a Scope service receive the correct one. 
1:  * Bundles should receive the Scope within which they exist. Requesting bundles 
1:  * are in the root scope by default.
1:  */
0: @RunWith(JUnit4TestRunner.class)
1: public class GetScopeServiceTest extends AbstractTest {
1: 	/**
1: 	 * The test bundle should be in and receive the root scope by default. The
1: 	 * root scope will always have an ID of '0' and name of 'root'.
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test1() throws Exception {
1: 		assertEquals(0, scope.getId());
1: 		assertEquals("root", scope.getName());
1: 		assertTrue(scope.getBundles().contains(bundleContext.getBundle()));
1: 	}
1: 	
1: 	/**
1: 	 * The tb3 bundle should also be in and receive the root scope by default.
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test2() throws Exception {
1: 		Bundle bundle = installBundle("tb-3.jar");
1: 		bundle.start();
1: 		ServiceReference<ScopeProvider> scopeProviderRef = bundleContext.getServiceReference(ScopeProvider.class);
1: 		ScopeProvider scopeProvider = bundleContext.getService(scopeProviderRef);
1: 		Scope scope = scopeProvider.getScope();
0: 		assertEquals(this.scope, scope);
1: 		assertTrue(scope.getBundles().contains(bundle));
1: 		bundleContext.ungetService(scopeProviderRef);
1: 		bundle.uninstall();
1: 	}
1: 	
1: 	/**
1: 	 * A new scope is created as a child of the root scope and the tb3 bundle
1: 	 * is added to it. The tb3 bundle should receive and be in the new scope.
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test3() throws Exception {
1: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1: 		ScopeUpdate child = scopeUpdate.newChild("tb3");
1: 		scopeUpdate.getChildren().add(child);
1: 		String location = getBundleLocation("tb-3.jar");
1: 		URL url = new URL(location);
1: 		InstallInfo installInfo = new InstallInfo(location, url.openStream());
1: 		child.getBundlesToInstall().add(installInfo);
1: 		addPackageImportPolicy("org.osgi.framework", child);
1: 		addPackageImportPolicy("org.apache.aries.subsystem.scope", child);
1: 		addPackageImportPolicy("org.apache.aries.subsystem.scope.itests", child);
1: 		addServiceImportPolicy(Scope.class, child);
1: 		addServiceExportPolicy(ScopeProvider.class, child);
1: 		scopeUpdate.commit();
1: 		Bundle bundle = bundleContext.getBundle(location);
1: 		bundle.start();
1: 		ServiceReference<ScopeProvider> scopeProviderRef = bundleContext.getServiceReference(ScopeProvider.class);
1: 		ScopeProvider scopeProvider = bundleContext.getService(scopeProviderRef);
1: 		Scope scope = scopeProvider.getScope();
1: 		assertEquals("tb3", scope.getName());
1: 		assertTrue(scope.getBundles().contains(bundle));
1: 		bundleContext.ungetService(scopeProviderRef);
1: 		bundle.uninstall();
1: 	}
1: 	
1: 	/**
1: 	 * A new scope is created as a child of the root scope and the tb3 bundle
1: 	 * is added to it. The tb3 bundle should receive and be in the new scope.
1: 	 * The bundle is added directly as opposed to via an InstallInfo.
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test4() throws Exception {
1: 		Bundle bundle = installBundle("tb-3.jar");
1: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1: 		scopeUpdate.getBundles().remove(bundle);
1: 		ScopeUpdate child = scopeUpdate.newChild("tb3");
1: 		scopeUpdate.getChildren().add(child);
1: 		child.getBundles().add(bundle);
1: 		addPackageImportPolicy("org.osgi.framework", child);
1: 		addPackageImportPolicy("org.apache.aries.subsystem.scope", child);
1: 		addPackageImportPolicy("org.apache.aries.subsystem.scope.itests", child);
1: 		addServiceImportPolicy(Scope.class, child);
1: 		addServiceExportPolicy(ScopeProvider.class, child);
1: 		scopeUpdate.commit();
1: 		bundle.start();
1: 		ServiceReference<ScopeProvider> scopeProviderRef = bundleContext.getServiceReference(ScopeProvider.class);
1: 		ScopeProvider scopeProvider = bundleContext.getService(scopeProviderRef);
1: 		Scope scope = scopeProvider.getScope();
1: 		assertEquals("tb3", scope.getName());
1: 		assertTrue(scope.getBundles().contains(bundle));
1: 		bundleContext.ungetService(scopeProviderRef);
1: 		bundle.uninstall();
1: 	}
1: }
============================================================================