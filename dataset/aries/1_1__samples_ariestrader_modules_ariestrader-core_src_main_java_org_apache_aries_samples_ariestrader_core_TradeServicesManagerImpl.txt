2:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
2:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
2:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.core;
2:628add4: 
1:628add4: import java.util.ArrayList;
1:628add4: import java.util.Iterator;
1:628add4: import java.util.List;
1:628add4: import java.util.Map;
1:628add4: 
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.MarketSummaryDataBean;
1:56a6860: import org.apache.aries.samples.ariestrader.util.Log;
1:56a6860: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServicesManager;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServices;
1:628add4: 
1:628add4: 
1:628add4: /**
1:af24676:  * TradeServicesManagerImpl coordinates access to the currently
1:af24676:  * selected TradeServices implementation and manages the list of
1:af24676:  * currently available TradeServices implementations.
1:628add4:  * 
1:af24676:  * @see
1:af24676:  *      org.apache.geronimo.samples.daytrader.api.TradeServicesManager
1:628add4:  * 
1:628add4:  */
1:628add4: 
1:628add4: public class TradeServicesManagerImpl implements TradeServicesManager {
1:628add4: 
1:628add4:     private static TradeServices[] tradeServicesList = new TradeServices[TradeConfig.runTimeModeNames.length] ;
1:628add4: 
1:628add4:     // This lock is used to serialize market summary operations.
1:628add4:     private static final Integer marketSummaryLock = new Integer(0);
1:628add4:     private static long nextMarketSummary = System.currentTimeMillis();
1:628add4:     private static MarketSummaryDataBean cachedMSDB = null; 
1:628add4:     
1:628add4:     /**
1:628add4:       * TradeServicesManagerImpl null constructor
1:628add4:       */
1:628add4:     public TradeServicesManagerImpl() {
2:628add4:         if (Log.doTrace())
1:628add4:             Log.trace("TradeServicesManagerImpl()");
3:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:       * init
1:628add4:       */
1:628add4:     public void init() {
1:628add4:         if (Log.doTrace())
1:628add4:             Log.trace("TradeServicesManagerImpl:init()");
1:628add4:     }
1:628add4: 
1:628add4: 
1:628add4:     /**
1:628add4:       * Get CurrentModes that are registered
1:628add4:       */
1:628add4:     public ArrayList<Integer> getCurrentModes() {
1:628add4:         if (Log.doTrace())
1:628add4:             Log.trace("TradeServicesManagerImpl:getCurrentModes()");
1:628add4:         ArrayList<Integer> modes = new ArrayList<Integer>();
1:628add4:         for (int i=0; i<tradeServicesList.length; i++) {
1:628add4:             TradeServices tradeServicesRef = tradeServicesList[i];
1:628add4:             if (tradeServicesRef != null) {
1:8ef753d:                 modes.add(i);
1:628add4:             }
1:628add4:         }
1:628add4:         return modes;
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:       * Get TradeServices reference
1:628add4:       */
1:628add4:     public TradeServices getTradeServices() {
1:628add4:         if (Log.doTrace()) 
1:628add4:             Log.trace("TradeServicesManagerImpl:getTradeServices()");
1:8ef753d:         return tradeServicesList[TradeConfig.getRunTimeMode().ordinal()];
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:       * Bind a new TradeServices implementation
1:628add4:       */
1:628add4:     public void bindService(TradeServices tradeServices, Map props) {
1:628add4:         if (Log.doTrace())
1:628add4:             Log.trace("TradeServicesManagerImpl:bindService()", tradeServices, props);
1:628add4:         if (tradeServices != null) {
1:8ef753d:             String mode = (String) props.get("mode");
1:8ef753d:             tradeServicesList[Enum.valueOf(TradeConfig.ModeType.class, mode).ordinal()] = tradeServices;
1:628add4:         }
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:       * Unbind a TradeServices implementation
1:628add4:       */
1:628add4:     public void unbindService(TradeServices tradeServices, Map props) {
1:628add4:         if (Log.doTrace())
1:628add4:             Log.trace("TradeServicesManagerImpl:unbindService()", tradeServices, props);
1:628add4:         if (tradeServices != null) {
1:8ef753d:             String mode = (String) props.get("mode");
1:8ef753d:             tradeServicesList[Enum.valueOf(TradeConfig.ModeType.class, mode).ordinal()] = null;
1:628add4:         }
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Market Summary is inherently a heavy database operation.  For servers that have a caching
1:628add4:      * story this is a great place to cache data that is good for a period of time.  In order to
1:628add4:      * provide a flexible framework for this we allow the market summary operation to be
1:628add4:      * invoked on every transaction, time delayed or never.  This is configurable in the 
1:628add4:      * configuration panel.  
1:628add4:      *
1:628add4:      * @return An instance of the market summary
1:628add4:      */
1:628add4:     public MarketSummaryDataBean getMarketSummary() throws Exception {
1:628add4:     
1:628add4:         if (Log.doActionTrace()) {
1:628add4:             Log.trace("TradeAction:getMarketSummary()");
1:628add4:         }
1:628add4:     
1:628add4:         if (Log.doTrace())
1:628add4:             Log.trace("TradeServicesManagerImpl:getMarketSummary()");
1:628add4: 
1:628add4:         if (TradeConfig.getMarketSummaryInterval() == 0) return getMarketSummaryInternal();
1:628add4:         if (TradeConfig.getMarketSummaryInterval() < 0) return cachedMSDB;
1:628add4:     
1:628add4:         /**
1:628add4:          * This is a little funky.  If its time to fetch a new Market summary then we'll synchronize
1:628add4:          * access to make sure only one requester does it.  Others will merely return the old copy until
1:628add4:          * the new MarketSummary has been executed.
1:628add4:          */
1:628add4:          long currentTime = System.currentTimeMillis();
1:628add4:          
1:628add4:          if (currentTime > nextMarketSummary) {
1:628add4:              long oldNextMarketSummary = nextMarketSummary;
1:628add4:              boolean fetch = false;
1:628add4: 
1:628add4:              synchronized (marketSummaryLock) {
1:628add4:                  /**
1:628add4:                   * Is it still ahead or did we miss lose the race?  If we lost then let's get out
1:628add4:                   * of here as the work has already been done.
1:628add4:                   */
1:628add4:                  if (oldNextMarketSummary == nextMarketSummary) {
1:628add4:                      fetch = true;
1:628add4:                      nextMarketSummary += TradeConfig.getMarketSummaryInterval()*1000;
1:628add4:                      
1:628add4:                      /** 
1:628add4:                       * If the server has been idle for a while then its possible that nextMarketSummary
1:628add4:                       * could be way off.  Rather than try and play catch up we'll simply get in sync with the 
1:628add4:                       * current time + the interval.
1:628add4:                       */ 
1:628add4:                      if (nextMarketSummary < currentTime) {
1:628add4:                          nextMarketSummary = currentTime + TradeConfig.getMarketSummaryInterval()*1000;
1:628add4:                      }
1:628add4:                  }
1:628add4:              }
1:628add4: 
1:628add4:             /**
1:628add4:              * If we're the lucky one then let's update the MarketSummary
1:628add4:              */
1:628add4:             if (fetch) {
1:628add4:                 cachedMSDB = getMarketSummaryInternal();
1:628add4:             }
1:628add4:         }
1:628add4:          
1:628add4:         return cachedMSDB;
1:628add4:     }
1:628add4: 
1:628add4:     /**
1:628add4:      * Compute and return a snapshot of the current market conditions This
1:628add4:      * includes the TSIA - an index of the price of the top 100 Trade stock
1:628add4:      * quotes The openTSIA ( the index at the open) The volume of shares traded,
1:628add4:      * Top Stocks gain and loss
1:628add4:      *
1:628add4:      * @return A snapshot of the current market summary
1:628add4:      */
1:628add4:     private MarketSummaryDataBean getMarketSummaryInternal() throws Exception {
1:628add4:         if (Log.doActionTrace()) {
1:628add4:             Log.trace("TradeAction:getMarketSummaryInternal()");
1:628add4:         }
1:628add4:         MarketSummaryDataBean marketSummaryData = null;
1:8ef753d:         marketSummaryData = tradeServicesList[TradeConfig.getRunTimeMode().ordinal()].getMarketSummary();
1:628add4:         return marketSummaryData;
1:628add4:     }
1:628add4: 
1:628add4: 
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:8ef753d
/////////////////////////////////////////////////////////////////////////
1:                 modes.add(i);
1:         return tradeServicesList[TradeConfig.getRunTimeMode().ordinal()];
/////////////////////////////////////////////////////////////////////////
1:             String mode = (String) props.get("mode");
1:             tradeServicesList[Enum.valueOf(TradeConfig.ModeType.class, mode).ordinal()] = tradeServices;
/////////////////////////////////////////////////////////////////////////
1:             String mode = (String) props.get("mode");
1:             tradeServicesList[Enum.valueOf(TradeConfig.ModeType.class, mode).ordinal()] = null;
/////////////////////////////////////////////////////////////////////////
1:         marketSummaryData = tradeServicesList[TradeConfig.getRunTimeMode().ordinal()].getMarketSummary();
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.MarketSummaryDataBean;
commit:989ba4e
commit:af24676
/////////////////////////////////////////////////////////////////////////
1:  * TradeServicesManagerImpl coordinates access to the currently
1:  * selected TradeServices implementation and manages the list of
1:  * currently available TradeServices implementations.
1:  * @see
1:  *      org.apache.geronimo.samples.daytrader.api.TradeServicesManager
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.core;
0: import org.apache.aries.samples.ariestrader.persistence.api.MarketSummaryDataBean;
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1: import org.apache.aries.samples.ariestrader.api.TradeServicesManager;
1: import org.apache.aries.samples.ariestrader.api.TradeServices;
/////////////////////////////////////////////////////////////////////////
0:  * specified in the {@link org.apache.aries.samples.ariestrader.TradeServices}
0:  * @see org.apache.aries.samples.ariestrader.TradeServices
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.core;
0: import org.apache.aries.samples.daytrader.persistence.api.MarketSummaryDataBean;
0: import org.apache.aries.samples.daytrader.util.Log;
0: import org.apache.aries.samples.daytrader.util.TradeConfig;
0: import org.apache.aries.samples.daytrader.api.TradeServicesManager;
0: import org.apache.aries.samples.daytrader.api.TradeServices;
/////////////////////////////////////////////////////////////////////////
0:  * specified in the {@link org.apache.aries.samples.daytrader.TradeServices}
0:  * @see org.apache.aries.samples.daytrader.TradeServices
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.core;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.geronimo.samples.daytrader.persistence.api.MarketSummaryDataBean;
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
0: import org.apache.geronimo.samples.daytrader.api.TradeServicesManager;
0: import org.apache.geronimo.samples.daytrader.api.TradeServices;
1: 
1: 
1: /**
0:  * TradeJDBCDirect uses direct JDBC access to a
0:  * <code>javax.sql.DataSource</code> to implement the business methods of the
0:  * Trade online broker application. These business methods represent the
0:  * features and operations that can be performed by customers of the brokerage
0:  * such as login, logout, get a stock quote, buy or sell a stock, etc. and are
0:  * specified in the {@link org.apache.geronimo.samples.daytrader.TradeServices}
0:  * interface
1:  * 
0:  * Note: In order for this class to be thread-safe, a new TradeJDBC must be
0:  * created for each call to a method from the TradeInterface interface.
0:  * Otherwise, pooled connections may not be released.
1:  * 
0:  * @see org.apache.geronimo.samples.daytrader.TradeServices
1:  * 
1:  */
1: 
1: public class TradeServicesManagerImpl implements TradeServicesManager {
1: 
1:     private static TradeServices[] tradeServicesList = new TradeServices[TradeConfig.runTimeModeNames.length] ;
0:     private List tradeList = null;
0:     private List tradeDBList = null;
1: 
1:     // This lock is used to serialize market summary operations.
1:     private static final Integer marketSummaryLock = new Integer(0);
1:     private static long nextMarketSummary = System.currentTimeMillis();
0: //    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
1:     private static MarketSummaryDataBean cachedMSDB = null; 
1:     
1:     /**
1:       * TradeServicesManagerImpl null constructor
1:       */
1:     public TradeServicesManagerImpl() {
1:         if (Log.doTrace())
1:             Log.trace("TradeServicesManagerImpl()");
1:     }
1: 
1:     /**
1:       * init
1:       */
1:     public void init() {
1:         if (Log.doTrace())
1:             Log.trace("TradeServicesManagerImpl:init()");
1:     }
1: 
1: 
1:     /**
1:       * Get CurrentModes that are registered
1:       */
1:     public ArrayList<Integer> getCurrentModes() {
1:         if (Log.doTrace())
1:             Log.trace("TradeServicesManagerImpl:getCurrentModes()");
1:         ArrayList<Integer> modes = new ArrayList<Integer>();
1:         for (int i=0; i<tradeServicesList.length; i++) {
1:             TradeServices tradeServicesRef = tradeServicesList[i];
1:             if (tradeServicesRef != null) {
0:                 modes.add(tradeServicesRef.getMode());
1:             }
1:         }
1:         return modes;
1:     }
1: 
1:     /**
0:       * Set TradeServicesList reference
1:       */
0:     public void setTradeServicesList(List tradeList) {
1:         if (Log.doTrace())
0:             Log.trace("TradeServicesManagerImpl:setTradeServicesList()" , tradeList);
0:         this.tradeList = tradeList;
0:         Iterator it = tradeList.iterator();
0:         while (it.hasNext()) {  
0:             TradeServices tradeServices =  (TradeServices) it.next(); 
0:             this.tradeServicesList[tradeServices.getMode()] = tradeServices;
1:         }  
1:     }
1: 
1:     /**
1:       * Get TradeServices reference
1:       */
1:     public TradeServices getTradeServices() {
1:         if (Log.doTrace()) 
1:             Log.trace("TradeServicesManagerImpl:getTradeServices()");
0:         return tradeServicesList[TradeConfig.runTimeMode];
1:     }
1: 
1:     /**
1:       * Bind a new TradeServices implementation
1:       */
1:     public void bindService(TradeServices tradeServices, Map props) {
1:         if (Log.doTrace())
1:             Log.trace("TradeServicesManagerImpl:bindService()", tradeServices, props);
1:         if (tradeServices != null) {
0:             tradeServicesList[tradeServices.getMode()] = tradeServices;
1:         }
1:     }
1: 
1:     /**
1:       * Unbind a TradeServices implementation
1:       */
1:     public void unbindService(TradeServices tradeServices, Map props) {
1:         if (Log.doTrace())
1:             Log.trace("TradeServicesManagerImpl:unbindService()", tradeServices, props);
1:         if (tradeServices != null) {
0:             tradeServicesList[tradeServices.getMode()] = null;
1:         }
1:     }
1: 
1:     /**
1:      * Market Summary is inherently a heavy database operation.  For servers that have a caching
1:      * story this is a great place to cache data that is good for a period of time.  In order to
1:      * provide a flexible framework for this we allow the market summary operation to be
1:      * invoked on every transaction, time delayed or never.  This is configurable in the 
1:      * configuration panel.  
1:      *
1:      * @return An instance of the market summary
1:      */
1:     public MarketSummaryDataBean getMarketSummary() throws Exception {
1:     
1:         if (Log.doActionTrace()) {
1:             Log.trace("TradeAction:getMarketSummary()");
1:         }
1:     
1:         if (Log.doTrace())
1:             Log.trace("TradeServicesManagerImpl:getMarketSummary()");
1: 
1:         if (TradeConfig.getMarketSummaryInterval() == 0) return getMarketSummaryInternal();
1:         if (TradeConfig.getMarketSummaryInterval() < 0) return cachedMSDB;
1:     
1:         /**
1:          * This is a little funky.  If its time to fetch a new Market summary then we'll synchronize
1:          * access to make sure only one requester does it.  Others will merely return the old copy until
1:          * the new MarketSummary has been executed.
1:          */
1:          long currentTime = System.currentTimeMillis();
1:          
1:          if (currentTime > nextMarketSummary) {
1:              long oldNextMarketSummary = nextMarketSummary;
1:              boolean fetch = false;
1: 
1:              synchronized (marketSummaryLock) {
1:                  /**
1:                   * Is it still ahead or did we miss lose the race?  If we lost then let's get out
1:                   * of here as the work has already been done.
1:                   */
1:                  if (oldNextMarketSummary == nextMarketSummary) {
1:                      fetch = true;
1:                      nextMarketSummary += TradeConfig.getMarketSummaryInterval()*1000;
1:                      
1:                      /** 
1:                       * If the server has been idle for a while then its possible that nextMarketSummary
1:                       * could be way off.  Rather than try and play catch up we'll simply get in sync with the 
1:                       * current time + the interval.
1:                       */ 
1:                      if (nextMarketSummary < currentTime) {
1:                          nextMarketSummary = currentTime + TradeConfig.getMarketSummaryInterval()*1000;
1:                      }
1:                  }
1:              }
1: 
1:             /**
1:              * If we're the lucky one then let's update the MarketSummary
1:              */
1:             if (fetch) {
1:                 cachedMSDB = getMarketSummaryInternal();
1:             }
1:         }
1:          
1:         return cachedMSDB;
1:     }
1: 
1:     /**
1:      * Compute and return a snapshot of the current market conditions This
1:      * includes the TSIA - an index of the price of the top 100 Trade stock
1:      * quotes The openTSIA ( the index at the open) The volume of shares traded,
1:      * Top Stocks gain and loss
1:      *
1:      * @return A snapshot of the current market summary
1:      */
1:     private MarketSummaryDataBean getMarketSummaryInternal() throws Exception {
1:         if (Log.doActionTrace()) {
1:             Log.trace("TradeAction:getMarketSummaryInternal()");
1:         }
1:         MarketSummaryDataBean marketSummaryData = null;
0:         marketSummaryData = tradeServicesList[TradeConfig.runTimeMode].getMarketSummary();
1:         return marketSummaryData;
1:     }
1: 
1: 
1: }
============================================================================