1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.osgi.service.blueprint.reflect.ReferenceListener;
1:fdf3952: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
1:fdf3952: 
1:fdf3952: public abstract class BPServiceReferenceMetadata extends BPComponentMetadata {
1:fdf3952: 
1:fdf3952:     private int availability;
1:fdf3952: 
1:fdf3952:     private String componentName;
1:fdf3952: 
1:fdf3952:     private String filter;
1:fdf3952: 
1:fdf3952:     private String $interface;
1:fdf3952: 
1:fdf3952:     private BPReferenceListener[] listeners;
1:fdf3952: 
1:fdf3952:     protected BPServiceReferenceMetadata(CompositeData reference) {
1:fdf3952:         super(reference);
1:fdf3952:         availability = (Integer) reference.get(BlueprintMetadataMBean.AVAILABILITY);
1:fdf3952:         componentName = (String) reference.get(BlueprintMetadataMBean.COMPONENT_NAME);
1:fdf3952:         filter = (String) reference.get(BlueprintMetadataMBean.FILTER);
1:fdf3952:         $interface = (String) reference.get(BlueprintMetadataMBean.INTERFACE);
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_listeners = (CompositeData[]) reference.get(BlueprintMetadataMBean.REFERENCE_LISTENERS);
1:fdf3952:         listeners = new BPReferenceListener[cd_listeners.length];
1:fdf3952:         for (int i = 0; i < listeners.length; i++) {
1:fdf3952:             listeners[i] = new BPReferenceListener(cd_listeners[i]);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected BPServiceReferenceMetadata(ServiceReferenceMetadata reference) {
1:fdf3952:         super(reference);
1:fdf3952:         availability = reference.getAvailability();
1:fdf3952:         componentName = reference.getComponentName();
1:fdf3952:         filter = reference.getFilter();
1:fdf3952:         $interface = reference.getInterface();
1:fdf3952: 
1:fdf3952:         listeners = new BPReferenceListener[reference.getReferenceListeners().size()];
1:fdf3952:         int i = 0;
1:fdf3952:         for (Object listener : reference.getReferenceListeners()) {
1:fdf3952:             listeners[i++] = new BPReferenceListener((ReferenceListener) listener);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected Map<String, Object> getItemsMap() {
1:fdf3952:         Map<String, Object> items = super.getItemsMap();
1:fdf3952: 
1:fdf3952:         // itself
1:fdf3952:         items.put(BlueprintMetadataMBean.AVAILABILITY, availability);
1:fdf3952:         items.put(BlueprintMetadataMBean.COMPONENT_NAME, componentName);
1:fdf3952:         items.put(BlueprintMetadataMBean.FILTER, filter);
1:fdf3952:         items.put(BlueprintMetadataMBean.INTERFACE, $interface);
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_listeners = new CompositeData[listeners.length];
1:fdf3952:         for (int i = 0; i < listeners.length; i++) {
1:fdf3952:             cd_listeners[i] = listeners[i].asCompositeData();
1:fdf3952:         }
1:fdf3952:         items.put(BlueprintMetadataMBean.REFERENCE_LISTENERS, cd_listeners);
1:fdf3952: 
1:fdf3952:         return items;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public int getAvailability() {
1:fdf3952:         return availability;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getComponentName() {
1:fdf3952:         return componentName;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getFilter() {
1:fdf3952:         return filter;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getInterface() {
1:fdf3952:         return $interface;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPReferenceListener[] getReferenceListeners() {
1:fdf3952:         return listeners;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.osgi.service.blueprint.reflect.ReferenceListener;
1: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
1: 
1: public abstract class BPServiceReferenceMetadata extends BPComponentMetadata {
1: 
1:     private int availability;
1: 
1:     private String componentName;
1: 
1:     private String filter;
1: 
1:     private String $interface;
1: 
1:     private BPReferenceListener[] listeners;
1: 
1:     protected BPServiceReferenceMetadata(CompositeData reference) {
1:         super(reference);
1:         availability = (Integer) reference.get(BlueprintMetadataMBean.AVAILABILITY);
1:         componentName = (String) reference.get(BlueprintMetadataMBean.COMPONENT_NAME);
1:         filter = (String) reference.get(BlueprintMetadataMBean.FILTER);
1:         $interface = (String) reference.get(BlueprintMetadataMBean.INTERFACE);
1: 
1:         CompositeData[] cd_listeners = (CompositeData[]) reference.get(BlueprintMetadataMBean.REFERENCE_LISTENERS);
1:         listeners = new BPReferenceListener[cd_listeners.length];
1:         for (int i = 0; i < listeners.length; i++) {
1:             listeners[i] = new BPReferenceListener(cd_listeners[i]);
1:         }
1:     }
1: 
1:     protected BPServiceReferenceMetadata(ServiceReferenceMetadata reference) {
1:         super(reference);
1:         availability = reference.getAvailability();
1:         componentName = reference.getComponentName();
1:         filter = reference.getFilter();
1:         $interface = reference.getInterface();
1: 
1:         listeners = new BPReferenceListener[reference.getReferenceListeners().size()];
1:         int i = 0;
1:         for (Object listener : reference.getReferenceListeners()) {
1:             listeners[i++] = new BPReferenceListener((ReferenceListener) listener);
1:         }
1:     }
1: 
1:     protected Map<String, Object> getItemsMap() {
1:         Map<String, Object> items = super.getItemsMap();
1: 
1:         // itself
1:         items.put(BlueprintMetadataMBean.AVAILABILITY, availability);
1:         items.put(BlueprintMetadataMBean.COMPONENT_NAME, componentName);
1:         items.put(BlueprintMetadataMBean.FILTER, filter);
1:         items.put(BlueprintMetadataMBean.INTERFACE, $interface);
1: 
1:         CompositeData[] cd_listeners = new CompositeData[listeners.length];
1:         for (int i = 0; i < listeners.length; i++) {
1:             cd_listeners[i] = listeners[i].asCompositeData();
1:         }
1:         items.put(BlueprintMetadataMBean.REFERENCE_LISTENERS, cd_listeners);
1: 
1:         return items;
1:     }
1: 
1:     public int getAvailability() {
1:         return availability;
1:     }
1: 
1:     public String getComponentName() {
1:         return componentName;
1:     }
1: 
1:     public String getFilter() {
1:         return filter;
1:     }
1: 
1:     public String getInterface() {
1:         return $interface;
1:     }
1: 
1:     public BPReferenceListener[] getReferenceListeners() {
1:         return listeners;
1:     }
1: }
============================================================================