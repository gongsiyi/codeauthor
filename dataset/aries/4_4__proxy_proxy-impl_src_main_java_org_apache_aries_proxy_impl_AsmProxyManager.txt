1:24455ce: /*
1:24455ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:24455ce:  * or more contributor license agreements.  See the NOTICE file
1:24455ce:  * distributed with this work for additional information
1:24455ce:  * regarding copyright ownership.  The ASF licenses this file
1:24455ce:  * to you under the Apache License, Version 2.0 (the
1:24455ce:  * "License"); you may not use this file except in compliance
1:24455ce:  * with the License.  You may obtain a copy of the License at
1:24455ce:  *
1:24455ce:  *   http://www.apache.org/licenses/LICENSE-2.0
1:24455ce:  *
1:24455ce:  * Unless required by applicable law or agreed to in writing,
1:24455ce:  * software distributed under the License is distributed on an
1:24455ce:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:24455ce:  * KIND, either express or implied.  See the License for the
1:24455ce:  * specific language governing permissions and limitations
1:24455ce:  * under the License.
1:24455ce:  */
1:24455ce: package org.apache.aries.proxy.impl;
3:24455ce: 
1:cc94d79: import java.io.IOException;
1:96d4e06: import java.lang.reflect.Constructor;
1:24455ce: import java.lang.reflect.InvocationHandler;
1:d014a6c: import java.lang.reflect.Modifier;
1:24455ce: import java.lang.reflect.Proxy;
1:cc94d79: import java.net.URL;
1:cc94d79: import java.util.ArrayList;
1:24455ce: import java.util.Collection;
1:cc94d79: import java.util.Enumeration;
1:24455ce: import java.util.HashSet;
1:d014a6c: import java.util.Iterator;
1:cc94d79: import java.util.List;
1:cc94d79: import java.util.NoSuchElementException;
1:24455ce: import java.util.Set;
1:96d4e06: import java.util.concurrent.Callable;
1:24455ce: 
1:96d4e06: import org.apache.aries.proxy.InvocationListener;
1:24455ce: import org.apache.aries.proxy.ProxyManager;
1:24455ce: import org.apache.aries.proxy.UnableToProxyException;
1:24455ce: import org.apache.aries.proxy.impl.gen.ProxySubclassGenerator;
1:475ef33: import org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator;
1:96d4e06: import org.apache.aries.proxy.weaving.WovenProxy;
1:24455ce: import org.osgi.framework.Bundle;
1:24455ce: 
1:24455ce: public final class AsmProxyManager extends AbstractProxyManager implements ProxyManager
1:24455ce: {
1:7d43dc2:   static final ClassLoader bootClassLoader = new ClassLoader(Object.class.getClassLoader()) { /* boot class loader */};
1:7d43dc2: 	
1:96d4e06:   public Object createNewProxy(Bundle clientBundle, Collection<Class<?>> classes, 
1:96d4e06:       Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException
1:24455ce:   {
1:24455ce:     Object proxyObject = null;
1:96d4e06:     
1:24455ce:     // if we just have interfaces and no classes we default to using
1:24455ce:     // the interface proxy because we can't dynamically
1:24455ce:     // subclass more than one interface
1:24455ce:     // unless we have a class
1:24455ce:     // that implements all of them
1:24455ce: 
1:24455ce:     // loop through the classes checking if they are java interfaces
1:24455ce:     // if we find any class that isn't an interface we need to use
1:24455ce:     // the subclass proxy
1:24455ce:     Set<Class<?>> notInterfaces = new HashSet<Class<?>>();
1:d014a6c:     Set<Class<?>> interfaces = new HashSet<Class<?>>();
1:d014a6c:     
1:24455ce:     for (Class<?> clazz : classes) {
1:24455ce:       if (!!!clazz.isInterface()) {
1:24455ce:         notInterfaces.add(clazz);
1:d014a6c:       } else {
1:d014a6c:         interfaces.add(clazz);
3:24455ce:       }
1:24455ce:     }
1:24455ce: 
1:d014a6c:     // if we just have no classes we default to using
1:d014a6c:     // the interface proxy because we can't dynamically
1:d014a6c:     // subclass more than one interface
1:d014a6c:     // unless we have a class
1:d014a6c:     // that implements all of them
1:d014a6c:     if (notInterfaces.isEmpty()) {
1:d014a6c:       proxyObject = InterfaceProxyGenerator.getProxyInstance(clientBundle, null, interfaces, dispatcher, listener);
1:d014a6c:     } else {
1:24455ce:       // if we need to use the subclass proxy then we need to find
1:24455ce:       // the most specific class
1:d014a6c:       Class<?> classToProxy = getLowestSubclass(notInterfaces);
1:96d4e06:       if(WovenProxy.class.isAssignableFrom(classToProxy)) {
1:d014a6c:         
1:d014a6c:         if(isConcrete(classToProxy) && implementsAll(classToProxy, interfaces)) {
1:d014a6c:           try {
1:d014a6c:             Constructor<?> c = classToProxy.getDeclaredConstructor(Callable.class, 
1:d014a6c:                 InvocationListener.class);
1:d014a6c:             c.setAccessible(true);
1:d014a6c:             proxyObject = c.newInstance(dispatcher, listener);
1:d014a6c:           } catch (Exception e) {
1:d014a6c:             //We will have to subclass this one, but we should always have a constructor
1:d014a6c:             //to use
1:d014a6c:             //TODO log that performance would be improved by using a non-null template
1:d014a6c:           }
1:d014a6c:         } else {
1:d014a6c:           //We need to generate a class that implements the interfaces (if any) and
1:d014a6c:           //has the classToProxy as a superclass
1:d014a6c:           if((classToProxy.getModifiers() & Modifier.FINAL) != 0) {
1:d014a6c:             throw new UnableToProxyException(classToProxy, "The class " + classToProxy
1:d014a6c:                 + " does not implement all of the interfaces " + interfaces + 
1:d014a6c:                 " and is final. This means that we cannot create a proxy for both the class and all of the requested interfaces.");
1:d014a6c:           }
1:d014a6c:           proxyObject = InterfaceProxyGenerator.getProxyInstance(clientBundle, 
1:8f852b6:               classToProxy, interfaces, dispatcher, listener);
1:96d4e06:         }
1:96d4e06:       } 
1:96d4e06:       if(proxyObject == null){
1:cc94d79:         // ARIES-1216 : in some cases, some class can not be visible from the root class classloader.
1:cc94d79:         // If that's the case, we need to build a custom classloader that has visibility on all those classes
1:cc94d79:         // If we could generate a proper constructor this would not be necessary, but since we have to rely
1:cc94d79:         // on the generated serialization constructor to bypass the JVM verifier, we don't have much choice
1:cc94d79:         ClassLoader classLoader = classToProxy.getClassLoader();
1:7d43dc2:         if (classLoader == null) {
1:7d43dc2:         	classLoader = bootClassLoader;
1:7d43dc2:         }
1:cc94d79:         boolean allVisible = true;
1:cc94d79:         for (Class<?> clazz : classes) {
1:cc94d79:           try {
1:cc94d79:             if (classLoader.loadClass(clazz.getName()) != clazz) {
1:cc94d79:               throw new UnableToProxyException(classToProxy, "The requested class " + clazz + " is different from the one seen by by " + classToProxy);
1:cc94d79:             }
1:cc94d79:           } catch (ClassNotFoundException e) {
1:cc94d79:             allVisible = false;
1:cc94d79:             break;
1:cc94d79:           }
1:cc94d79:         }
1:cc94d79:         if (!allVisible) {
1:cc94d79:           List<ClassLoader> classLoaders = new ArrayList<ClassLoader>();
1:cc94d79:           for (Class<?> clazz : classes) {
1:cc94d79:             ClassLoader cl = clazz.getClassLoader();
1:cc94d79:             if (cl != null && !classLoaders.contains(cl)) {
1:cc94d79:               classLoaders.add(cl);
1:cc94d79:             }
1:cc94d79:           }
1:cc94d79:           classLoader = new MultiClassLoader(classLoaders);
1:cc94d79:         }
1:cc94d79:         proxyObject = ProxySubclassGenerator.newProxySubclassInstance(classToProxy, classLoader, new ProxyHandler(this, dispatcher, listener));
1:96d4e06:       }
1:24455ce:     }
1:24455ce: 
1:24455ce:     return proxyObject;
1:24455ce:   }
1:d014a6c: 
1:cc94d79:   private static class MultiClassLoader extends ClassLoader {
1:cc94d79:     private final List<ClassLoader> parents;
1:cc94d79:     private MultiClassLoader(List<ClassLoader> parents) {
1:cc94d79:       this.parents = parents;
1:cc94d79:     }
1:cc94d79: 
1:cc94d79:     @Override
1:cc94d79:     public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
1:cc94d79:       for (ClassLoader cl : parents) {
1:cc94d79:          try {
1:cc94d79:            return cl.loadClass(name);
1:cc94d79:          } catch (ClassNotFoundException e) {
1:cc94d79:            // Ignore
1:cc94d79:          }
1:cc94d79:         }
1:0737543:         try {
1:0737543:           // use bootClassLoader as last fallback
1:0737543:           return bootClassLoader.loadClass(name);
1:0737543:         } catch (ClassNotFoundException e) {
1:0737543:           // Ignore
1:0737543:         }
1:cc94d79:         throw new ClassNotFoundException(name);
1:cc94d79:     }
1:cc94d79: 
1:cc94d79:     @Override
1:cc94d79:     public URL getResource(String name) {
1:cc94d79:       for (ClassLoader cl : parents) {
1:cc94d79:          URL url = cl.getResource(name);
1:cc94d79:          if (url != null) {
1:cc94d79:            return url;
1:cc94d79:          }
1:cc94d79:        }
1:cc94d79:        return null;
1:cc94d79:     }
1:cc94d79: 
1:cc94d79:     @Override
1:cc94d79:     public Enumeration<URL> getResources(String name) throws IOException {
1:cc94d79:       final List<Enumeration<URL>> tmp = new ArrayList<Enumeration<URL>>();
1:cc94d79:       for (ClassLoader cl : parents) {
1:cc94d79:         tmp.add(cl.getResources(name));
1:cc94d79:       }
1:cc94d79:       return new Enumeration<URL>() {
1:cc94d79:         int index = 0;
1:cc94d79:         @Override
1:cc94d79:         public boolean hasMoreElements() {
1:cc94d79:           return next();
1:cc94d79:         }
1:cc94d79:         @Override
1:cc94d79:         public URL nextElement() {
1:cc94d79:           if (!next()) {
1:cc94d79:             throw new NoSuchElementException();
1:cc94d79:           }
1:cc94d79:           return tmp.get(index).nextElement();
1:cc94d79:         }
1:cc94d79:         private boolean next() {
1:cc94d79:           while (index < tmp.size()) {
1:cc94d79:             if (tmp.get(index) != null && tmp.get(index).hasMoreElements()) {
1:cc94d79:               return true;
1:cc94d79:             }
1:cc94d79:             index++;
1:cc94d79:           }
1:cc94d79:           return false;
1:cc94d79:         }
1:cc94d79:       };
1:cc94d79:     }
1:cc94d79:   }
1:cc94d79: 
1:d014a6c:   private Class<?> getLowestSubclass(Set<Class<?>> notInterfaces) throws
1:d014a6c:        UnableToProxyException {
1:d014a6c:     
1:d014a6c:     Iterator<Class<?>> it = notInterfaces.iterator();
1:d014a6c:     
1:d014a6c:     Class<?> classToProxy = it.next();
1:d014a6c:     
1:d014a6c:     while(it.hasNext()) {
1:d014a6c:       Class<?> potential = it.next();
1:d014a6c:       if(classToProxy.isAssignableFrom(potential)) {
1:d014a6c:         //potential can be widened to classToProxy, and is therefore
1:d014a6c:         //a lower subclass
1:d014a6c:         classToProxy = potential;
1:d014a6c:       } else if (!!!potential.isAssignableFrom(classToProxy)){
1:d014a6c:         //classToProxy is not a subclass of potential - This is
1:d014a6c:         //an error, we can't be part of two hierarchies at once!
1:d014a6c:         throw new UnableToProxyException(classToProxy, "The requested classes "
1:d014a6c:             + classToProxy + " and " + potential + " are not in the same type hierarchy");
1:d014a6c:       }
1:d014a6c:     }
1:d014a6c:     return classToProxy;
1:d014a6c:   }
1:24455ce:   
1:d014a6c:   private boolean isConcrete(Class<?> classToProxy) {
1:d014a6c:     
1:d014a6c:     return (classToProxy.getModifiers() & Modifier.ABSTRACT) == 0;
1:d014a6c:   }
1:d014a6c: 
1:d014a6c:   private boolean implementsAll(Class<?> classToProxy, Set<Class<?>> interfaces) {
1:d014a6c:     //If we can't widen to one of the interfaces then we need to do some more work
1:d014a6c:     for(Class<?> iface : interfaces) {
1:d014a6c:       if(!!!iface.isAssignableFrom(classToProxy))
1:d014a6c:         return false;
1:d014a6c:     }
1:d014a6c:     return true;
1:d014a6c:   }
1:d014a6c: 
1:24455ce:   @Override
1:24455ce:   protected boolean isProxyClass(Class<?> clazz)
1:24455ce:   {
1:96d4e06:     return WovenProxy.class.isAssignableFrom(clazz) || ProxySubclassGenerator.isProxySubclass(clazz) || Proxy.isProxyClass(clazz);
1:24455ce:   }
1:24455ce: 
1:24455ce:   @Override
1:24455ce:   protected InvocationHandler getInvocationHandler(Object proxy) 
1:24455ce:   {
1:24455ce:     Class<?> type = proxy.getClass();
1:24455ce:     InvocationHandler ih = null;
1:24455ce:     
1:24455ce:     if (ProxySubclassGenerator.isProxySubclass(type)) {
1:24455ce:       ih = ProxySubclassGenerator.getInvocationHandler(proxy);
1:24455ce:     } else if (Proxy.isProxyClass(type)) {
1:24455ce:       ih = Proxy.getInvocationHandler(proxy);
1:24455ce:     }
1:24455ce:     
1:24455ce:     return ih;
1:24455ce:   }
1:24455ce: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0737543
/////////////////////////////////////////////////////////////////////////
1:         try {
1:           // use bootClassLoader as last fallback
1:           return bootClassLoader.loadClass(name);
1:         } catch (ClassNotFoundException e) {
1:           // Ignore
1:         }
commit:cc94d79
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
1: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
1:         // ARIES-1216 : in some cases, some class can not be visible from the root class classloader.
1:         // If that's the case, we need to build a custom classloader that has visibility on all those classes
1:         // If we could generate a proper constructor this would not be necessary, but since we have to rely
1:         // on the generated serialization constructor to bypass the JVM verifier, we don't have much choice
1:         ClassLoader classLoader = classToProxy.getClassLoader();
1:         boolean allVisible = true;
1:         for (Class<?> clazz : classes) {
1:           try {
1:             if (classLoader.loadClass(clazz.getName()) != clazz) {
1:               throw new UnableToProxyException(classToProxy, "The requested class " + clazz + " is different from the one seen by by " + classToProxy);
1:             }
1:           } catch (ClassNotFoundException e) {
1:             allVisible = false;
1:             break;
1:           }
1:         }
1:         if (!allVisible) {
1:           List<ClassLoader> classLoaders = new ArrayList<ClassLoader>();
1:           for (Class<?> clazz : classes) {
1:             ClassLoader cl = clazz.getClassLoader();
1:             if (cl != null && !classLoaders.contains(cl)) {
1:               classLoaders.add(cl);
1:             }
1:           }
1:           classLoader = new MultiClassLoader(classLoaders);
1:         }
1:         proxyObject = ProxySubclassGenerator.newProxySubclassInstance(classToProxy, classLoader, new ProxyHandler(this, dispatcher, listener));
1:   private static class MultiClassLoader extends ClassLoader {
1:     private final List<ClassLoader> parents;
1:     private MultiClassLoader(List<ClassLoader> parents) {
1:       this.parents = parents;
1:     }
1: 
1:     @Override
1:     public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
1:       for (ClassLoader cl : parents) {
1:          try {
1:            return cl.loadClass(name);
1:          } catch (ClassNotFoundException e) {
1:            // Ignore
1:          }
1:         }
1:         throw new ClassNotFoundException(name);
1:     }
1: 
1:     @Override
1:     public URL getResource(String name) {
1:       for (ClassLoader cl : parents) {
1:          URL url = cl.getResource(name);
1:          if (url != null) {
1:            return url;
1:          }
1:        }
1:        return null;
1:     }
1: 
1:     @Override
1:     public Enumeration<URL> getResources(String name) throws IOException {
1:       final List<Enumeration<URL>> tmp = new ArrayList<Enumeration<URL>>();
1:       for (ClassLoader cl : parents) {
1:         tmp.add(cl.getResources(name));
1:       }
1:       return new Enumeration<URL>() {
1:         int index = 0;
1:         @Override
1:         public boolean hasMoreElements() {
1:           return next();
1:         }
1:         @Override
1:         public URL nextElement() {
1:           if (!next()) {
1:             throw new NoSuchElementException();
1:           }
1:           return tmp.get(index).nextElement();
1:         }
1:         private boolean next() {
1:           while (index < tmp.size()) {
1:             if (tmp.get(index) != null && tmp.get(index).hasMoreElements()) {
1:               return true;
1:             }
1:             index++;
1:           }
1:           return false;
1:         }
1:       };
1:     }
1:   }
1: 
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7d43dc2
/////////////////////////////////////////////////////////////////////////
1:   static final ClassLoader bootClassLoader = new ClassLoader(Object.class.getClassLoader()) { /* boot class loader */};
1: 	
/////////////////////////////////////////////////////////////////////////
1:         if (classLoader == null) {
1:         	classLoader = bootClassLoader;
1:         }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1:               classToProxy, interfaces, dispatcher, listener);
commit:d014a6c
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Modifier;
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:     Set<Class<?>> interfaces = new HashSet<Class<?>>();
1:     
1:       } else {
1:         interfaces.add(clazz);
1:     // if we just have no classes we default to using
1:     // the interface proxy because we can't dynamically
1:     // subclass more than one interface
1:     // unless we have a class
1:     // that implements all of them
1:     if (notInterfaces.isEmpty()) {
1:       proxyObject = InterfaceProxyGenerator.getProxyInstance(clientBundle, null, interfaces, dispatcher, listener);
1:     } else {
1:       Class<?> classToProxy = getLowestSubclass(notInterfaces);
1:         
1:         if(isConcrete(classToProxy) && implementsAll(classToProxy, interfaces)) {
1:           try {
1:             Constructor<?> c = classToProxy.getDeclaredConstructor(Callable.class, 
1:                 InvocationListener.class);
1:             c.setAccessible(true);
1:             proxyObject = c.newInstance(dispatcher, listener);
1:           } catch (Exception e) {
1:             //We will have to subclass this one, but we should always have a constructor
1:             //to use
1:             //TODO log that performance would be improved by using a non-null template
1:           }
1:         } else {
1:           //We need to generate a class that implements the interfaces (if any) and
1:           //has the classToProxy as a superclass
1:           if((classToProxy.getModifiers() & Modifier.FINAL) != 0) {
1:             throw new UnableToProxyException(classToProxy, "The class " + classToProxy
1:                 + " does not implement all of the interfaces " + interfaces + 
1:                 " and is final. This means that we cannot create a proxy for both the class and all of the requested interfaces.");
1:           }
1:           proxyObject = InterfaceProxyGenerator.getProxyInstance(clientBundle, 
0:               (Class<? extends WovenProxy>)classToProxy, interfaces, dispatcher, listener);
1: 
1:   private Class<?> getLowestSubclass(Set<Class<?>> notInterfaces) throws
1:        UnableToProxyException {
1:     
1:     Iterator<Class<?>> it = notInterfaces.iterator();
1:     
1:     Class<?> classToProxy = it.next();
1:     
1:     while(it.hasNext()) {
1:       Class<?> potential = it.next();
1:       if(classToProxy.isAssignableFrom(potential)) {
1:         //potential can be widened to classToProxy, and is therefore
1:         //a lower subclass
1:         classToProxy = potential;
1:       } else if (!!!potential.isAssignableFrom(classToProxy)){
1:         //classToProxy is not a subclass of potential - This is
1:         //an error, we can't be part of two hierarchies at once!
1:         throw new UnableToProxyException(classToProxy, "The requested classes "
1:             + classToProxy + " and " + potential + " are not in the same type hierarchy");
1:       }
1:     }
1:     return classToProxy;
1:   }
1:   private boolean isConcrete(Class<?> classToProxy) {
1:     
1:     return (classToProxy.getModifiers() & Modifier.ABSTRACT) == 0;
1:   }
1: 
1:   private boolean implementsAll(Class<?> classToProxy, Set<Class<?>> interfaces) {
1:     //If we can't widen to one of the interfaces then we need to do some more work
1:     for(Class<?> iface : interfaces) {
1:       if(!!!iface.isAssignableFrom(classToProxy))
1:         return false;
1:     }
1:     return true;
1:   }
1: 
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator;
/////////////////////////////////////////////////////////////////////////
0:       proxyObject = InterfaceProxyGenerator.getProxyInstance(clientBundle, classes, dispatcher, listener);
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
1: import java.util.concurrent.Callable;
1: import org.apache.aries.proxy.InvocationListener;
0: import org.apache.aries.proxy.impl.weaving.InterfaceCombiningClassAdapter;
1: import org.apache.aries.proxy.weaving.WovenProxy;
1:   public Object createNewProxy(Bundle clientBundle, Collection<Class<?>> classes, 
1:       Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException
1:     
/////////////////////////////////////////////////////////////////////////
1:       if(WovenProxy.class.isAssignableFrom(classToProxy)) {
0:         try {
0:           Constructor<?> c = classToProxy.getDeclaredConstructor(Callable.class, 
0:               InvocationListener.class);
0:           c.setAccessible(true);
0:           proxyObject = c.newInstance(dispatcher, listener);
0:         } catch (Exception e) {
0:           //We will have to subclass this one, but we should always have a constructor
0:           //to use
0:           //TODO log that performance would be improved by using a non-null template
1:         }
1:       } 
1:       if(proxyObject == null){
0:         proxyObject = ProxySubclassGenerator.newProxySubclassInstance(classToProxy, new ProxyHandler(this, dispatcher, listener));
1:       }
0:       proxyObject = InterfaceCombiningClassAdapter.getProxyInstance(classes, dispatcher, listener);
/////////////////////////////////////////////////////////////////////////
1:     return WovenProxy.class.isAssignableFrom(clazz) || ProxySubclassGenerator.isProxySubclass(clazz) || Proxy.isProxyClass(clazz);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.Proxy;
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import org.apache.aries.proxy.ProxyManager;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.apache.aries.proxy.impl.gen.ProxySubclassGenerator;
1: import org.osgi.framework.Bundle;
1: 
1: public final class AsmProxyManager extends AbstractProxyManager implements ProxyManager
1: {
0:   public Object createNewProxy(Bundle clientBundle, Collection<Class<?>> classes, InvocationHandler handler) 
0:     throws UnableToProxyException
1:   {
1:     Object proxyObject = null;
1: 
1:     // if we just have interfaces and no classes we default to using
1:     // the interface proxy because we can't dynamically
1:     // subclass more than one interface
1:     // unless we have a class
1:     // that implements all of them
1: 
0:     // default to not subclass
0:     boolean useSubclassProxy = false;
1: 
1:     // loop through the classes checking if they are java interfaces
1:     // if we find any class that isn't an interface we need to use
1:     // the subclass proxy
1:     Set<Class<?>> notInterfaces = new HashSet<Class<?>>();
1:     for (Class<?> clazz : classes) {
1:       if (!!!clazz.isInterface()) {
0:         useSubclassProxy = true;
1:         notInterfaces.add(clazz);
1:       }
1:     }
1: 
0:     if (useSubclassProxy) {
1:       // if we need to use the subclass proxy then we need to find
1:       // the most specific class
0:       Class<?> classToProxy = null;
0:       int deepest = 0;
0:       // for each of the classes find out how deep it is in the
0:       // hierarchy
0:       for (Class<?> clazz : notInterfaces) {
0:         Class<?> nextHighestClass = clazz;
0:         int depth = 0;
0:         do {
0:           nextHighestClass = nextHighestClass.getSuperclass();
0:           depth++;
0:         } while (nextHighestClass != null);
0:         if (depth > deepest) {
0:           // if we find a class deeper than the one we already
0:           // had
0:           // it becomes the new most specific
0:           deepest = depth;
0:           classToProxy = clazz;
1:         }
1:       }
0:       proxyObject = ProxySubclassGenerator.newProxySubclassInstance(classToProxy, handler);
0:     } else {
0:       // TODO there are some problems here. If we get a BundleToClassLoaderAdapter back and the bundle can't see all the classes referenced by the interface bad things happen (i.e. it fails).
0:       proxyObject = Proxy.newProxyInstance(getClassLoader(clientBundle, classes), classes.toArray(new Class<?>[classes.size()]), handler);
1:     }
1: 
1:     return proxyObject;
1:   }
1:   
1:   @Override
1:   protected boolean isProxyClass(Class<?> clazz)
1:   {
0:     return ProxySubclassGenerator.isProxySubclass(clazz) || Proxy.isProxyClass(clazz);
1:   }
1: 
1:   @Override
1:   protected InvocationHandler getInvocationHandler(Object proxy) 
1:   {
1:     Class<?> type = proxy.getClass();
1:     InvocationHandler ih = null;
1:     
1:     if (ProxySubclassGenerator.isProxySubclass(type)) {
1:       ih = ProxySubclassGenerator.getInvocationHandler(proxy);
1:     } else if (Proxy.isProxyClass(type)) {
1:       ih = Proxy.getInvocationHandler(proxy);
1:     }
1:     
1:     return ih;
1:   }
1: }
============================================================================