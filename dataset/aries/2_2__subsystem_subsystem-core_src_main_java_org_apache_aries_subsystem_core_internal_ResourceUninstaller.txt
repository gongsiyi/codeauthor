1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:225bcae: package org.apache.aries.subsystem.core.internal;
12:225bcae: 
1:79b20bc: import org.apache.aries.subsystem.ContentHandler;
1:225bcae: import org.apache.aries.subsystem.core.archive.ProvisionResourceHeader;
1:79b20bc: import org.osgi.framework.ServiceReference;
1:225bcae: import org.osgi.framework.namespace.IdentityNamespace;
1:307d743: import org.osgi.framework.wiring.BundleRevision;
1:225bcae: import org.osgi.resource.Resource;
1:225bcae: import org.osgi.service.subsystem.SubsystemConstants;
1:225bcae: import org.osgi.service.subsystem.SubsystemException;
1:307d743: import org.slf4j.Logger;
1:307d743: import org.slf4j.LoggerFactory;
1:225bcae: 
1:225bcae: public abstract class ResourceUninstaller {
1:307d743: 	private static final Logger logger = LoggerFactory.getLogger(ResourceUninstaller.class);
1:79b20bc: 
1:5bd3bf6: 	public static ResourceUninstaller newInstance(Resource resource, BasicSubsystem subsystem) {
1:225bcae: 		String type = ResourceHelper.getTypeAttribute(resource);
1:225bcae: 		if (SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION.equals(type)
1:225bcae: 				|| SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)
1:79b20bc: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type)) {
1:225bcae: 			return new SubsystemResourceUninstaller(resource, subsystem);
1:79b20bc: 		} else if (IdentityNamespace.TYPE_BUNDLE.equals(type) || IdentityNamespace.TYPE_FRAGMENT.equals(type)) {
1:225bcae: 			return new BundleResourceUninstaller(resource, subsystem);
1:79b20bc: 		} else {
1:79b20bc: 		    ServiceReference<ContentHandler> handlerRef = CustomResources.getCustomContentHandler(subsystem, type);
1:79b20bc: 		    if (handlerRef != null) {
1:79b20bc: 		        return new CustomResourceUninstaller(resource, type, subsystem, handlerRef);
1:79b20bc: 		    } else {
1:79b20bc: 		        throw new SubsystemException("No uninstaller exists for resource type: " + type);
1:79b20bc: 		    }
1:79b20bc: 		}
2:225bcae: 	}
1:79b20bc: 
1:5bd3bf6: 	protected static void removeConstituent(BasicSubsystem subsystem, Resource resource) {
1:225bcae: 		Activator.getInstance().getSubsystems().removeConstituent(subsystem, resource);
1:225bcae: 	}
1:79b20bc: 
1:5bd3bf6: 	protected static void removeReference(BasicSubsystem subsystem, Resource resource) {
1:225bcae: 		Activator.getInstance().getSubsystems().removeReference(subsystem, resource);
1:225bcae: 	}
1:79b20bc: 
1:5bd3bf6: 	protected final BasicSubsystem provisionTo;
1:225bcae: 	protected final Resource resource;
1:5bd3bf6: 	protected final BasicSubsystem subsystem;
1:79b20bc: 
1:5bd3bf6: 	public ResourceUninstaller(Resource resource, BasicSubsystem subsystem) {
1:307d743: 		if (resource == null)
1:307d743: 			throw new NullPointerException("Missing required parameter: resource");
1:307d743: 		if (subsystem == null)
1:307d743: 			throw new NullPointerException("Missing required parameter: subsystem");
1:225bcae: 		this.resource = resource;
1:225bcae: 		this.subsystem = subsystem;
1:225bcae: 		if (isTransitive())
1:225bcae: 			provisionTo = Utils.findFirstSubsystemAcceptingDependenciesStartingFrom(subsystem);
2:225bcae: 		else
1:225bcae: 			provisionTo = subsystem;
1:225bcae: 	}
1:79b20bc: 
1:225bcae: 	public abstract void uninstall();
1:79b20bc: 
1:307d743: 	protected boolean isExplicit() {
1:307d743: 		// The operation is explicit if it was requested by a user, in which
1:307d743: 		// case the resource and subsystem are the same.
1:307d743: 		if (resource.equals(subsystem))
1:307d743: 			return true;
1:307d743: 		// The operation is explicit if it was requested by a scoped subsystem
1:307d743: 		// on a resource within the same region.
1:307d743: 		if (subsystem.isScoped()) {
1:307d743: 			if (Utils.isBundle(resource))
1:307d743: 				return subsystem.getRegion().contains(((BundleRevision)resource).getBundle());
1:307d743: 			// TODO This is insufficient. The unscoped subsystem could be a
1:307d743: 			// dependency in another region, which would make it implicit.
1:5bd3bf6: 			return !((BasicSubsystem)resource).isScoped();
1:307d743: 		}
1:307d743: 		return false;
1:225bcae: 	}
1:79b20bc: 
1:225bcae: 	protected boolean isTransitive() {
1:777b216: 		ProvisionResourceHeader header = subsystem.getDeploymentManifest().getProvisionResourceHeader();
1:225bcae: 		if (header == null)
2:225bcae: 			return false;
1:225bcae: 		return header.contains(resource);
1:225bcae: 	}
1:79b20bc: 
1:225bcae: 	protected boolean isResourceUninstallable() {
1:307d743: 		int referenceCount = Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource).size();
1:307d743: 		if (referenceCount == 0)
1:307d743: 			return true;
1:307d743: 		if (isExplicit()) {
1:307d743: 			logger.error("Explicitly uninstalling resource still has dependencies: {}", resource);
1:307d743: 			return true;
1:307d743: 		}
1:307d743: 		return false;
1:225bcae: 	}
1:79b20bc: 
1:225bcae: 	protected void removeConstituent() {
1:391a1aa: 		removeConstituent(subsystem, resource);
1:225bcae: 	}
1:79b20bc: 
1:225bcae: 	protected void removeReference() {
1:225bcae: 		removeReference(subsystem, resource);
1:225bcae: 	}
1:225bcae: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.ContentHandler;
1: import org.osgi.framework.ServiceReference;
/////////////////////////////////////////////////////////////////////////
1: 
1: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type)) {
1: 		} else if (IdentityNamespace.TYPE_BUNDLE.equals(type) || IdentityNamespace.TYPE_FRAGMENT.equals(type)) {
1: 		} else {
1: 		    ServiceReference<ContentHandler> handlerRef = CustomResources.getCustomContentHandler(subsystem, type);
1: 		    if (handlerRef != null) {
1: 		        return new CustomResourceUninstaller(resource, type, subsystem, handlerRef);
1: 		    } else {
1: 		        throw new SubsystemException("No uninstaller exists for resource type: " + type);
1: 		    }
1: 		}
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:John Ross
-------------------------------------------------------------------------------
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	public static ResourceUninstaller newInstance(Resource resource, BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	protected static void removeConstituent(BasicSubsystem subsystem, Resource resource) {
1: 	protected static void removeReference(BasicSubsystem subsystem, Resource resource) {
1: 	protected final BasicSubsystem provisionTo;
1: 	protected final BasicSubsystem subsystem;
1: 	public ResourceUninstaller(Resource resource, BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 			return !((BasicSubsystem)resource).isScoped();
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
1: 		removeConstituent(subsystem, resource);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger logger = LoggerFactory.getLogger(ResourceUninstaller.class);
/////////////////////////////////////////////////////////////////////////
1: 		if (resource == null)
1: 			throw new NullPointerException("Missing required parameter: resource");
1: 		if (subsystem == null)
1: 			throw new NullPointerException("Missing required parameter: subsystem");
/////////////////////////////////////////////////////////////////////////
1: 	protected boolean isExplicit() {
1: 		// The operation is explicit if it was requested by a user, in which
1: 		// case the resource and subsystem are the same.
1: 		if (resource.equals(subsystem))
1: 			return true;
1: 		// The operation is explicit if it was requested by a scoped subsystem
1: 		// on a resource within the same region.
1: 		if (subsystem.isScoped()) {
1: 			if (Utils.isBundle(resource))
1: 				return subsystem.getRegion().contains(((BundleRevision)resource).getBundle());
1: 			// TODO This is insufficient. The unscoped subsystem could be a
1: 			// dependency in another region, which would make it implicit.
0: 			return !((AriesSubsystem)resource).isScoped();
1: 		}
1: 		return false;
/////////////////////////////////////////////////////////////////////////
1: 		int referenceCount = Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource).size();
1: 		if (referenceCount == 0)
1: 			return true;
1: 		if (isExplicit()) {
1: 			logger.error("Explicitly uninstalling resource still has dependencies: {}", resource);
1: 			return true;
1: 		}
1: 		return false;
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: 		ProvisionResourceHeader header = subsystem.getDeploymentManifest().getProvisionResourceHeader();
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.apache.aries.subsystem.core.archive.ProvisionResourceHeader;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public abstract class ResourceUninstaller {
0: 	public static ResourceUninstaller newInstance(Resource resource) {
0: 		return newInstance(resource, null);
1: 	}
1: 	
0: 	public static ResourceUninstaller newInstance(Resource resource, AriesSubsystem subsystem) {
1: 		String type = ResourceHelper.getTypeAttribute(resource);
1: 		if (SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION.equals(type)
1: 				|| SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)
0: 				|| SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(type))
1: 			return new SubsystemResourceUninstaller(resource, subsystem);
0: 		else if (IdentityNamespace.TYPE_BUNDLE.equals(type) || IdentityNamespace.TYPE_FRAGMENT.equals(type))
1: 			return new BundleResourceUninstaller(resource, subsystem);
1: 		else
0: 			throw new SubsystemException("No uninstaller exists for resource type: " + type);
1: 	}
1: 	
0: 	protected static void removeConstituent(AriesSubsystem subsystem, Resource resource) {
1: 		Activator.getInstance().getSubsystems().removeConstituent(subsystem, resource);
1: 	}
1: 	
0: 	protected static void removeReference(AriesSubsystem subsystem, Resource resource) {
1: 		Activator.getInstance().getSubsystems().removeReference(subsystem, resource);
1: 	}
1: 	
0: 	protected final AriesSubsystem provisionTo;
1: 	protected final Resource resource;
0: 	protected final AriesSubsystem subsystem;
1: 	
0: 	public ResourceUninstaller(Resource resource, AriesSubsystem subsystem) {
1: 		this.resource = resource;
1: 		this.subsystem = subsystem;
1: 		if (isTransitive())
1: 			provisionTo = Utils.findFirstSubsystemAcceptingDependenciesStartingFrom(subsystem);
1: 		else
1: 			provisionTo = subsystem;
1: 	}
1: 	
1: 	public abstract void uninstall();
1: 	
0: 	protected boolean isImplicit() {
0: 		return subsystem != null;
1: 	}
1: 	
1: 	protected boolean isTransitive() {
0: 		if (subsystem == null)
1: 			return false;
0: 		ProvisionResourceHeader header = subsystem.getArchive().getDeploymentManifest().getProvisionResourceHeader();
1: 		if (header == null)
1: 			return false;
1: 		return header.contains(resource);
1: 	}
1: 	
1: 	protected boolean isResourceUninstallable() {
0: 		return Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource).size() <= 1;
1: 	}
1: 	
1: 	protected void removeConstituent() {
0: 		removeConstituent(provisionTo, resource);
1: 	}
1: 	
1: 	protected void removeReference() {
1: 		removeReference(subsystem, resource);
1: 	}
1: }
============================================================================