1:ec3ea65: /*
1:ec3ea65:  * Licensed to the Apache Software Foundation (ASF) under one
1:ec3ea65:  * or more contributor license agreements.  See the NOTICE file
1:ec3ea65:  * distributed with this work for additional information
1:ec3ea65:  * regarding copyright ownership.  The ASF licenses this file
1:ec3ea65:  * to you under the Apache License, Version 2.0 (the
1:ec3ea65:  * "License"); you may not use this file except in compliance
1:ec3ea65:  * with the License.  You may obtain a copy of the License at
1:ec3ea65:  *
1:ec3ea65:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ec3ea65:  *
1:ec3ea65:  * Unless required by applicable law or agreed to in writing,
1:ec3ea65:  * software distributed under the License is distributed on an
1:ec3ea65:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ec3ea65:  * KIND, either express or implied.  See the License for the
1:ec3ea65:  * specific language governing permissions and limitations
1:ec3ea65:  * under the License.
1:ec3ea65:  */
1:ec3ea65: package org.apache.aries.jpa.eclipselink.adapter;
1:ec3ea65: 
1:ec3ea65: import java.util.Map;
1:ec3ea65: 
1:ec3ea65: import javax.persistence.EntityManagerFactory;
1:ec3ea65: import javax.persistence.spi.PersistenceProvider;
1:ec3ea65: import javax.persistence.spi.PersistenceUnitInfo;
1:ec3ea65: import javax.persistence.spi.ProviderUtil;
1:ec3ea65: 
1:ec3ea65: import org.osgi.framework.Bundle;
1:ec3ea65: 
1:06491b0: @SuppressWarnings({"rawtypes", "unchecked"})
1:ec3ea65: final class EclipseLinkPersistenceProvider implements PersistenceProvider {
1:ec3ea65:     private final PersistenceProvider delegate;
1:ec3ea65:     private final Bundle eclipeLinkBundle;
1:ec3ea65: 
1:ec3ea65:     EclipseLinkPersistenceProvider(PersistenceProvider delegate, Bundle eclipeLinkBundle) {
1:ec3ea65:         this.delegate = delegate;
1:ec3ea65:         this.eclipeLinkBundle = eclipeLinkBundle;
1:ec3ea65:     }
1:ec3ea65: 
2:ec3ea65:     @Override
1:ec3ea65:     public ProviderUtil getProviderUtil() {
1:ec3ea65:         return delegate.getProviderUtil();
1:ec3ea65:     }
1:ec3ea65:     
1:ec3ea65:     @Override
1:ec3ea65:     public EntityManagerFactory createEntityManagerFactory(String arg0, Map arg1) {
1:ec3ea65:         return delegate.createEntityManagerFactory(arg0, arg1);
1:ec3ea65:     }
1:ec3ea65: 
1:06491b0: 	@Override
1:ec3ea65:     public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo punit, Map props) {
1:06491b0:         return delegate.createContainerEntityManagerFactory(new PersistenceUnitProxyWithTargetServer(punit, eclipeLinkBundle, props), props);
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     @Override
1:ec3ea65:     public void generateSchema(PersistenceUnitInfo punit, Map arg1) {
1:06491b0:         delegate.generateSchema(new PersistenceUnitProxyWithTargetServer(punit, eclipeLinkBundle, arg1), arg1);
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     @Override
1:ec3ea65:     public boolean generateSchema(String arg0, Map arg1) {
1:ec3ea65:         return delegate.generateSchema(arg0, arg1);
1:ec3ea65:     }
1:ec3ea65: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:06491b0
/////////////////////////////////////////////////////////////////////////
1: @SuppressWarnings({"rawtypes", "unchecked"})
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1:         return delegate.createContainerEntityManagerFactory(new PersistenceUnitProxyWithTargetServer(punit, eclipeLinkBundle, props), props);
1:         delegate.generateSchema(new PersistenceUnitProxyWithTargetServer(punit, eclipeLinkBundle, arg1), arg1);
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.eclipselink.adapter;
1: 
1: import java.util.Map;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceProvider;
1: import javax.persistence.spi.PersistenceUnitInfo;
1: import javax.persistence.spi.ProviderUtil;
1: 
1: import org.osgi.framework.Bundle;
1: 
0: @SuppressWarnings("rawtypes")
1: final class EclipseLinkPersistenceProvider implements PersistenceProvider {
1:     private final PersistenceProvider delegate;
1:     private final Bundle eclipeLinkBundle;
1: 
1:     EclipseLinkPersistenceProvider(PersistenceProvider delegate, Bundle eclipeLinkBundle) {
1:         this.delegate = delegate;
1:         this.eclipeLinkBundle = eclipeLinkBundle;
1:     }
1: 
1:     @Override
1:     public ProviderUtil getProviderUtil() {
1:         return delegate.getProviderUtil();
1:     }
1:     
1:     @Override
1:     public EntityManagerFactory createEntityManagerFactory(String arg0, Map arg1) {
1:         return delegate.createEntityManagerFactory(arg0, arg1);
1:     }
1: 
1:     @Override
1:     public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo punit, Map props) {
0:         return delegate.createContainerEntityManagerFactory(new PersistenceUnitProxyWithTargetServer(punit, eclipeLinkBundle), props);
1:     }
1: 
1:     @Override
1:     public void generateSchema(PersistenceUnitInfo punit, Map arg1) {
0:         delegate.generateSchema(new PersistenceUnitProxyWithTargetServer(punit, eclipeLinkBundle), arg1);
1:     }
1: 
1:     @Override
1:     public boolean generateSchema(String arg0, Map arg1) {
1:         return delegate.generateSchema(arg0, arg1);
1:     }
1: }
============================================================================