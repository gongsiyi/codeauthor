1:6461e4c: /*
1:6461e4c:  * Licensed to the Apache Software Foundation (ASF) under one
1:6461e4c:  * or more contributor license agreements.  See the NOTICE file
1:6461e4c:  * distributed with this work for additional information
1:6461e4c:  * regarding copyright ownership.  The ASF licenses this file
1:6461e4c:  * to you under the Apache License, Version 2.0 (the
1:6461e4c:  * "License"); you may not use this file except in compliance
1:6461e4c:  * with the License.  You may obtain a copy of the License at
1:6461e4c:  *
1:6461e4c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6461e4c:  *
1:6461e4c:  * Unless required by applicable law or agreed to in writing,
1:6461e4c:  * software distributed under the License is distributed on an
1:6461e4c:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:6461e4c:  * KIND, either express or implied.  See the License for the
1:6461e4c:  * specific language governing permissions and limitations
1:6461e4c:  * under the License.
1:6461e4c:  */
1:0857a0e: package org.apache.aries.blueprint.proxy;
1:0857a0e: 
1:0857a0e: import static org.junit.Assert.assertEquals;
1:0857a0e: 
1:0857a0e: import java.io.ByteArrayInputStream;
1:0857a0e: import java.io.ObjectInputStream;
1:0857a0e: 
1:0857a0e: public class ProxyTestClassSerializableInterface implements
1:0857a0e:     ProxyTestSerializableInterface {
1:0857a0e: 
1:0857a0e:   public int value;
1:0857a0e:   
1:0857a0e:   /**
1:0857a0e:    * We deserialize using this static method to ensure that the right classloader
1:0857a0e:    * is used when deserializing our object, it will always be the classloader that
1:0857a0e:    * loaded this class, which might be the JUnit one, or our weaving one.
1:0857a0e:    * 
1:0857a0e:    * @param bytes
1:0857a0e:    * @param value
1:0857a0e:    * @throws Exception
1:0857a0e:    */
1:0857a0e:   public static void checkDeserialization(byte[] bytes, int value) throws Exception {
1:0857a0e:     ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
1:0857a0e:     ProxyTestClassSerializableInterface out = (ProxyTestClassSerializableInterface) ois.readObject();
1:0857a0e:     assertEquals(value, out.value);
1:0857a0e:   }
1:0857a0e: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:6461e4c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:0857a0e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.proxy;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ObjectInputStream;
1: 
1: public class ProxyTestClassSerializableInterface implements
1:     ProxyTestSerializableInterface {
1: 
1:   public int value;
1:   
1:   /**
1:    * We deserialize using this static method to ensure that the right classloader
1:    * is used when deserializing our object, it will always be the classloader that
1:    * loaded this class, which might be the JUnit one, or our weaving one.
1:    * 
1:    * @param bytes
1:    * @param value
1:    * @throws Exception
1:    */
1:   public static void checkDeserialization(byte[] bytes, int value) throws Exception {
1:     ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
1:     ProxyTestClassSerializableInterface out = (ProxyTestClassSerializableInterface) ois.readObject();
1:     assertEquals(value, out.value);
1:   }
1: }
============================================================================