1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:225bcae: package org.apache.aries.subsystem.core.internal;
1:225bcae: 
1:225bcae: import org.apache.aries.util.io.IOUtils;
1:225bcae: import org.osgi.resource.Resource;
1:225bcae: import org.osgi.service.subsystem.Subsystem;
1:225bcae: import org.osgi.service.subsystem.Subsystem.State;
1:225bcae: import org.osgi.service.subsystem.SubsystemException;
1:225bcae: import org.slf4j.Logger;
1:225bcae: import org.slf4j.LoggerFactory;
1:225bcae: 
1:225bcae: public class SubsystemResourceUninstaller extends ResourceUninstaller {
1:5bd3bf6: 	private static final Logger logger = LoggerFactory.getLogger(BasicSubsystem.class);
1:225bcae: 	
1:5bd3bf6: 	private static void removeChild(BasicSubsystem parent, BasicSubsystem child) {
1:225bcae: 		Activator.getInstance().getSubsystems().removeChild(parent, child);
3:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public SubsystemResourceUninstaller(Resource resource, BasicSubsystem subsystem) {
1:225bcae: 		super(resource, subsystem);
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	public void uninstall() {
1:307d743: 		removeReferences();
1:2b13b05: 		try {
1:2b13b05: 			if (isResourceUninstallable())
1:2b13b05: 				uninstallSubsystem();
1:2b13b05: 		}
1:2b13b05: 		finally {
1:2b13b05: 			removeConstituents();
1:2b13b05: 			removeChildren();
1:2b13b05: 			removeSubsystem();
1:2b13b05: 		}
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	private void removeChildren() {
1:307d743: 		if (!isExplicit()) {
1:5bd3bf6: 			removeChild((BasicSubsystem)subsystem, (BasicSubsystem)resource);
2:225bcae: 			return;
1:225bcae: 		}
1:5bd3bf6: 		for (Subsystem subsystem : ((BasicSubsystem)resource).getParents())
1:5bd3bf6: 			removeChild((BasicSubsystem)subsystem, (BasicSubsystem)resource);
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	private void removeConstituents() {
1:307d743: 		if (!isExplicit()) {
1:225bcae: 			removeConstituent();
1:225bcae: 			return;
1:225bcae: 		}
1:5bd3bf6: 		for (Subsystem subsystem : ((BasicSubsystem)resource).getParents())
1:5bd3bf6: 			removeConstituent((BasicSubsystem)subsystem, (BasicSubsystem)resource);
1:225bcae: 	}
1:225bcae: 	
1:225bcae: 	private void removeReferences() {
1:307d743: 		if (!isExplicit()) {
1:225bcae: 			removeReference();
1:225bcae: 		}
1:7a346a4: 		else {
1:7a346a4: 			for (Subsystem subsystem : ((BasicSubsystem)resource).getParents())
1:7a346a4: 				removeReference((BasicSubsystem)subsystem, (BasicSubsystem)resource);
1:7a346a4: 			Subsystems subsystems = Activator.getInstance().getSubsystems();
1:7a346a4: 			// for explicit uninstall remove all references to subsystem.
1:7a346a4: 			for (BasicSubsystem s : subsystems.getSubsystemsReferencing(resource)) {
1:7a346a4: 				removeReference(s, resource);
1:7a346a4: 			}
1:7a346a4: 		}
1:225bcae: 	}
1:225bcae: 	
1:777b216: 	private void removeSubsystem() {
1:5bd3bf6: 		Activator.getInstance().getSubsystems().removeSubsystem((BasicSubsystem)resource);
1:777b216: 	}
1:777b216: 	
1:225bcae: 	private void uninstallSubsystem() {
1:5bd3bf6: 		BasicSubsystem subsystem = (BasicSubsystem) resource;
1:2b13b05: 		try {
1:2b13b05: 			if (subsystem.getState().equals(Subsystem.State.RESOLVED))
1:2b13b05: 				subsystem.setState(State.INSTALLED);
1:2b13b05: 			subsystem.setState(State.UNINSTALLING);
1:2b13b05: 			Throwable firstError = null;
1:2b13b05: 			for (Resource resource : Activator.getInstance().getSubsystems()
1:2b13b05: 					.getResourcesReferencedBy(subsystem)) {
1:2b13b05: 				// Don't uninstall the region context bundle here.
1:5b9ff63: 				if (Utils.isRegionContextBundle(resource))
1:2b13b05: 					continue;
1:2b13b05: 				try {
1:2b13b05: 					ResourceUninstaller.newInstance(resource, subsystem)
1:2b13b05: 							.uninstall();
1:2b13b05: 				} catch (Throwable t) {
1:2b13b05: 					logger.error("An error occurred while uninstalling resource "
1:2b13b05: 							+ resource + " of subsystem " + subsystem, t);
1:2b13b05: 					if (firstError == null)
1:2b13b05: 						firstError = t;
1:2b13b05: 				}
1:777b216: 			}
1:2b13b05: 			subsystem.setState(State.UNINSTALLED);
1:8481849: 			Activator activator = Activator.getInstance();
1:8481849: 			activator.getSubsystemServiceRegistrar().unregister(subsystem);
1:8481849: 			if (subsystem.isScoped()) {
1:2b13b05: 				RegionContextBundleHelper.uninstallRegionContextBundle(subsystem);
1:8481849: 				activator.getRegionDigraph().removeRegion(subsystem.getRegion());
1:8481849: 			}
1:2b13b05: 			if (firstError != null)
1:2b13b05: 				throw new SubsystemException(firstError);
1:225bcae: 		}
1:2b13b05: 		finally {
1:2b13b05: 			// Let's be sure to always clean up the directory.
1:2b13b05: 			IOUtils.deleteRecursive(subsystem.getDirectory());
1:2b13b05: 		}
1:225bcae: 	}
1:225bcae: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:7a346a4
/////////////////////////////////////////////////////////////////////////
1: 		else {
1: 			for (Subsystem subsystem : ((BasicSubsystem)resource).getParents())
1: 				removeReference((BasicSubsystem)subsystem, (BasicSubsystem)resource);
1: 			Subsystems subsystems = Activator.getInstance().getSubsystems();
1: 			// for explicit uninstall remove all references to subsystem.
1: 			for (BasicSubsystem s : subsystems.getSubsystemsReferencing(resource)) {
1: 				removeReference(s, resource);
1: 			}
1: 		}
author:John Ross
-------------------------------------------------------------------------------
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	private static final Logger logger = LoggerFactory.getLogger(BasicSubsystem.class);
1: 	private static void removeChild(BasicSubsystem parent, BasicSubsystem child) {
1: 	public SubsystemResourceUninstaller(Resource resource, BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 			removeChild((BasicSubsystem)subsystem, (BasicSubsystem)resource);
1: 		for (Subsystem subsystem : ((BasicSubsystem)resource).getParents())
1: 			removeChild((BasicSubsystem)subsystem, (BasicSubsystem)resource);
/////////////////////////////////////////////////////////////////////////
1: 		for (Subsystem subsystem : ((BasicSubsystem)resource).getParents())
1: 			removeConstituent((BasicSubsystem)subsystem, (BasicSubsystem)resource);
/////////////////////////////////////////////////////////////////////////
0: 		for (Subsystem subsystem : ((BasicSubsystem)resource).getParents())
0: 			removeReference((BasicSubsystem)subsystem, (BasicSubsystem)resource);
1: 		Activator.getInstance().getSubsystems().removeSubsystem((BasicSubsystem)resource);
1: 		BasicSubsystem subsystem = (BasicSubsystem) resource;
commit:8481849
/////////////////////////////////////////////////////////////////////////
1: 			Activator activator = Activator.getInstance();
1: 			activator.getSubsystemServiceRegistrar().unregister(subsystem);
1: 			if (subsystem.isScoped()) {
1: 				activator.getRegionDigraph().removeRegion(subsystem.getRegion());
1: 			}
commit:5b9ff63
/////////////////////////////////////////////////////////////////////////
1: 				if (Utils.isRegionContextBundle(resource))
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
1: 		try {
1: 			if (isResourceUninstallable())
1: 				uninstallSubsystem();
1: 		}
1: 		finally {
1: 			removeConstituents();
1: 			removeChildren();
1: 			removeSubsystem();
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		try {
1: 			if (subsystem.getState().equals(Subsystem.State.RESOLVED))
1: 				subsystem.setState(State.INSTALLED);
1: 			subsystem.setState(State.UNINSTALLING);
1: 			Throwable firstError = null;
1: 			for (Resource resource : Activator.getInstance().getSubsystems()
1: 					.getResourcesReferencedBy(subsystem)) {
1: 				// Don't uninstall the region context bundle here.
0: 				if (ResourceHelper.getSymbolicNameAttribute(resource).startsWith(
0: 						RegionContextBundleHelper.SYMBOLICNAME_PREFIX))
1: 					continue;
1: 				try {
1: 					ResourceUninstaller.newInstance(resource, subsystem)
1: 							.uninstall();
1: 				} catch (Throwable t) {
1: 					logger.error("An error occurred while uninstalling resource "
1: 							+ resource + " of subsystem " + subsystem, t);
1: 					if (firstError == null)
1: 						firstError = t;
1: 				}
1: 			subsystem.setState(State.UNINSTALLED);
0: 			Activator.getInstance().getSubsystemServiceRegistrar()
0: 					.unregister(subsystem);
0: 			if (subsystem.isScoped())
1: 				RegionContextBundleHelper.uninstallRegionContextBundle(subsystem);
1: 			if (firstError != null)
1: 				throw new SubsystemException(firstError);
1: 		finally {
1: 			// Let's be sure to always clean up the directory.
1: 			IOUtils.deleteRecursive(subsystem.getDirectory());
1: 		}
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: 		removeReferences();
1: 		if (!isExplicit()) {
/////////////////////////////////////////////////////////////////////////
1: 		if (!isExplicit()) {
/////////////////////////////////////////////////////////////////////////
1: 		if (!isExplicit()) {
/////////////////////////////////////////////////////////////////////////
0: 		IOUtils.deleteRecursive(subsystem.getDirectory());
commit:777b216
/////////////////////////////////////////////////////////////////////////
0: 		removeSubsystem();
/////////////////////////////////////////////////////////////////////////
1: 	private void removeSubsystem() {
0: 		Activator.getInstance().getSubsystems().removeSubsystem((AriesSubsystem)resource);
1: 	}
1: 	
0: 		AriesSubsystem subsystem = (AriesSubsystem) resource;
0: 			subsystem.setState(State.INSTALLED);
0: 		subsystem.setState(State.UNINSTALLING);
0: 		Throwable firstError = null;
0: 		for (Resource resource : Activator.getInstance().getSubsystems()
0: 				.getResourcesReferencedBy(subsystem)) {
0: 			// Don't uninstall the region context bundle here.
0: 			if (ResourceHelper.getSymbolicNameAttribute(resource).startsWith(
0: 					RegionContextBundleHelper.SYMBOLICNAME_PREFIX))
0: 				continue;
0: 			try {
0: 				ResourceUninstaller.newInstance(resource, subsystem)
0: 						.uninstall();
0: 			} catch (Throwable t) {
0: 				logger.error("An error occurred while uninstalling resource "
0: 						+ resource + " of subsystem " + subsystem, t);
0: 				if (firstError == null)
0: 					firstError = t;
1: 		}
0: 		subsystem.setState(State.UNINSTALLED);
0: 		Activator.getInstance().getSubsystemServiceRegistrar()
0: 				.unregister(subsystem);
0: 		if (subsystem.isScoped())
0: 			RegionContextBundleHelper.uninstallRegionContextBundle(subsystem);
0: 		if (firstError != null)
0: 			throw new SubsystemException(firstError);
0: 		IOUtils.deleteRecursive(subsystem.getDirectory());
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import org.apache.aries.util.io.IOUtils;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.Subsystem.State;
1: import org.osgi.service.subsystem.SubsystemException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class SubsystemResourceUninstaller extends ResourceUninstaller {
0: 	private static final Logger logger = LoggerFactory.getLogger(AriesSubsystem.class);
1: 	
0: 	private static void removeChild(AriesSubsystem parent, AriesSubsystem child) {
1: 		Activator.getInstance().getSubsystems().removeChild(parent, child);
1: 	}
1: 	
0: 	public SubsystemResourceUninstaller(Resource resource, AriesSubsystem subsystem) {
1: 		super(resource, subsystem);
1: 	}
1: 	
1: 	public void uninstall() {
0: 		if (isResourceUninstallable())
0: 			uninstallSubsystem();
0: 		removeReferences();
0: 		removeConstituents();
0: 		removeChildren();
1: 	}
1: 	
1: 	private void removeChildren() {
0: 		if (isImplicit()) {
0: 			removeChild((AriesSubsystem)subsystem, (AriesSubsystem)resource);
1: 			return;
1: 		}
0: 		for (Subsystem subsystem : ((AriesSubsystem)resource).getParents())
0: 			removeChild((AriesSubsystem)subsystem, (AriesSubsystem)resource);
1: 	}
1: 	
1: 	private void removeConstituents() {
0: 		if (isImplicit()) {
1: 			removeConstituent();
1: 			return;
1: 		}
0: 		for (Subsystem subsystem : ((AriesSubsystem)resource).getParents())
0: 			removeConstituent((AriesSubsystem)subsystem, (AriesSubsystem)resource);
1: 	}
1: 	
1: 	private void removeReferences() {
0: 		if (isImplicit()) {
1: 			removeReference();
1: 			return;
1: 		}
0: 		for (Subsystem subsystem : ((AriesSubsystem)resource).getParents())
0: 			removeReference((AriesSubsystem)subsystem, (AriesSubsystem)resource);
1: 	}
1: 	
1: 	private void uninstallSubsystem() {
0: 		AriesSubsystem subsystem = (AriesSubsystem)resource;
0: 		if (subsystem.getState().equals(Subsystem.State.RESOLVED))
0: 				subsystem.setState(State.INSTALLED);
0: 			subsystem.setState(State.UNINSTALLING);
0: 			Throwable firstError = null;
0: 			for (Resource resource : Activator.getInstance().getSubsystems().getResourcesReferencedBy(subsystem)) {
0: 				// Don't uninstall the region context bundle here.
0: 				if (ResourceHelper.getSymbolicNameAttribute(resource).startsWith(RegionContextBundleHelper.SYMBOLICNAME_PREFIX))
0: 					continue;
0: 				try {
0: 					ResourceUninstaller.newInstance(resource, subsystem).uninstall();
1: 				}
0: 				catch (Throwable t) {
0: 					logger.error("An error occurred while uninstalling resource " + resource + " of subsystem " + subsystem, t);
0: 					if (firstError == null)
0: 						firstError = t;
1: 				}
1: 			}
0: 			IOUtils.deleteRecursive(subsystem.getDirectory());
0: 			subsystem.setState(State.UNINSTALLED);
0: 			Activator.getInstance().getSubsystemServiceRegistrar().unregister(subsystem);
0: 			if (subsystem.isScoped())
0: 				RegionContextBundleHelper.uninstallRegionContextBundle(subsystem);
0: 			if (firstError != null)
0: 				throw new SubsystemException(firstError);
1: 	}
1: }
============================================================================