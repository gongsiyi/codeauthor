1:552587b: /*
1:552587b:  * Licensed under the Apache License, Version 2.0 (the "License");
1:552587b:  * you may not use this file except in compliance with the License.
1:552587b:  * You may obtain a copy of the License at
1:552587b:  *
1:552587b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:552587b:  *
1:552587b:  * Unless required by applicable law or agreed to in writing, software
1:552587b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:552587b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:552587b:  * See the License for the specific language governing permissions and
1:552587b:  * limitations under the License.
1:552587b:  */
1:5f81379: package org.apache.aries.subsystem.core.internal;
8:5f81379: 
1:5f81379: import java.util.ArrayList;
1:5f81379: import java.util.Collections;
1:5f81379: import java.util.List;
1:5f81379: 
1:5f81379: import org.osgi.framework.wiring.BundleRevision;
1:5f81379: import org.osgi.namespace.service.ServiceNamespace;
1:5f81379: import org.osgi.resource.Capability;
1:5f81379: import org.osgi.resource.Requirement;
1:5f81379: import org.osgi.resource.Resource;
1:5f81379: 
1:5f81379: public class BundleRevisionResource implements Resource {
1:5f81379: 	private final BundleRevision revision;
1:5f81379: 
1:5f81379: 	public BundleRevisionResource(BundleRevision revision) {
1:5f81379: 		if (revision == null)
1:5f81379: 			throw new NullPointerException();
1:5f81379: 		this.revision = revision;
1:66992c9: 	}
1:66992c9: 
1:66992c9: 	@Override
1:66992c9: 	public List<Capability> getCapabilities(String namespace) {
1:66992c9: 	    if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)) {
1:66992c9: 	        return Collections.unmodifiableList(getServiceCapabilities());
1:66992c9: 	    }
1:66992c9: 	    List<Capability> revisionCapabilities = revision.getCapabilities(namespace);
1:66992c9: 	    if (namespace == null) {
1:66992c9: 	    	List<Capability> serviceCapabilities = getServiceCapabilities();
1:66992c9: 	        List<Capability> result = new ArrayList<Capability>(revisionCapabilities.size() + serviceCapabilities.size());
1:66992c9: 	        result.addAll(revisionCapabilities);
1:66992c9: 	        result.addAll(serviceCapabilities);
1:66992c9: 	        return Collections.unmodifiableList(result);
1:66992c9: 	    }
1:66992c9: 	    return revisionCapabilities;
1:66992c9: 	}
1:66992c9: 
1:66992c9: 	@Override
1:66992c9: 	public List<Requirement> getRequirements(String namespace) {
1:66992c9: 	    if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)) {
1:66992c9: 	        return Collections.unmodifiableList(getServiceRequirements());
1:66992c9: 	    }
1:66992c9: 	    List<Requirement> revisionRequirements = revision.getRequirements(namespace);
1:66992c9: 	    if (namespace == null) {
1:66992c9: 	    	List<Requirement> serviceRequirements = getServiceRequirements();
1:66992c9: 	        List<Requirement> result = new ArrayList<Requirement>(revisionRequirements.size() + serviceRequirements.size());
1:66992c9:             result.addAll(revisionRequirements);
1:66992c9:             result.addAll(serviceRequirements);
1:66992c9:             return Collections.unmodifiableList(result);
1:66992c9: 	    }
1:66992c9: 	    return revisionRequirements;
1:66992c9: 	}
1:66992c9: 	
1:66992c9: 	public BundleRevision getRevision() {
1:66992c9: 	    return revision;
1:66992c9: 	}
1:66992c9: 	
1:66992c9: 	private ServiceModeller.ServiceModel getModel() {
1:66992c9: 	    Activator activator = Activator.getInstance();
1:66992c9: 	    ServiceModeller modeller = activator.getServiceModeller();
1:66992c9: 	    if (modeller == null) {
1:66992c9:             return null;
1:66992c9:         }
1:66992c9: 	    ServiceModeller.ServiceModel model = modeller.computeRequirementsAndCapabilities(this,
1:66992c9:                 new BundleDirectory(revision.getBundle()));
1:66992c9: 	    return model;
1:66992c9: 	}
1:66992c9: 	
1:66992c9: 	private boolean initialized;
1:66992c9: 	private List<Capability> serviceCapabilities;
1:66992c9: 	private List<Requirement> serviceRequirements;
1:66992c9: 	
1:66992c9: 	private synchronized void computeServiceCapabilitiesAndRequirements() {
1:b597cdd: 		ServiceModeller.ServiceModel model = null;
1:b597cdd: 		boolean gotModel = false;
1:b597cdd:         List<Capability> capabilities = revision.getCapabilities(ServiceNamespace.SERVICE_NAMESPACE);
1:b597cdd:         // OSGi RFC 201 for R6: The presence of any Provide-Capability clauses
1:b597cdd:         // in the osgi.service namespace overrides any service related
1:b597cdd:         // capabilities that might have been found by other means.
1:b597cdd:         if (capabilities.isEmpty()) {
1:b597cdd:             model = getModel();
1:b597cdd:             gotModel = true;
1:b597cdd:             if (model != null) {
1:b597cdd:                 capabilities = model.getServiceCapabilities();
1:9df8274:             }
3:b597cdd:         }
1:b597cdd:         serviceCapabilities = capabilities;
1:b597cdd:         List<Requirement> requirements = revision.getRequirements(ServiceNamespace.SERVICE_NAMESPACE);
1:b597cdd:         // OSGi RFC 201 for R6: The presence of any Require-Capability clauses
1:b597cdd:         // in the osgi.service namespace overrides any service related
1:b597cdd:         // requirements that might have been found by other means.
1:b597cdd:         if (requirements.isEmpty()) {
1:b597cdd:             if (model == null && !gotModel) {
1:b597cdd:                 model = getModel();
1:b597cdd:             }
1:b597cdd:             if (model != null) {
1:b597cdd:                 requirements = model.getServiceRequirements();
1:b597cdd:             }
1:b597cdd:         }
1:b597cdd:         serviceRequirements = requirements;
1:66992c9: 		initialized = true;
1:b597cdd: 	}
1:9df8274: 	
1:66992c9: 	private synchronized List<Capability> getServiceCapabilities() {
1:66992c9: 		if (!initialized) {
1:66992c9: 			computeServiceCapabilitiesAndRequirements();
1:66992c9: 		}
1:66992c9: 		return serviceCapabilities;
1:b597cdd: 	}
1:b597cdd: 	
1:66992c9: 	private synchronized List<Requirement> getServiceRequirements() {
1:66992c9: 		if (!initialized) {
1:66992c9: 			computeServiceCapabilitiesAndRequirements();
1:66992c9: 		}
1:66992c9: 		return serviceRequirements;
1:b597cdd: 	}
1:b597cdd: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:66992c9
/////////////////////////////////////////////////////////////////////////
1: 	}
1: 
1: 	@Override
1: 	public List<Capability> getCapabilities(String namespace) {
1: 	    if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)) {
1: 	        return Collections.unmodifiableList(getServiceCapabilities());
1: 	    }
1: 	    List<Capability> revisionCapabilities = revision.getCapabilities(namespace);
1: 	    if (namespace == null) {
1: 	    	List<Capability> serviceCapabilities = getServiceCapabilities();
1: 	        List<Capability> result = new ArrayList<Capability>(revisionCapabilities.size() + serviceCapabilities.size());
1: 	        result.addAll(revisionCapabilities);
1: 	        result.addAll(serviceCapabilities);
1: 	        return Collections.unmodifiableList(result);
1: 	    }
1: 	    return revisionCapabilities;
1: 	}
1: 
1: 	@Override
1: 	public List<Requirement> getRequirements(String namespace) {
1: 	    if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)) {
1: 	        return Collections.unmodifiableList(getServiceRequirements());
1: 	    }
1: 	    List<Requirement> revisionRequirements = revision.getRequirements(namespace);
1: 	    if (namespace == null) {
1: 	    	List<Requirement> serviceRequirements = getServiceRequirements();
1: 	        List<Requirement> result = new ArrayList<Requirement>(revisionRequirements.size() + serviceRequirements.size());
1:             result.addAll(revisionRequirements);
1:             result.addAll(serviceRequirements);
1:             return Collections.unmodifiableList(result);
1: 	    }
1: 	    return revisionRequirements;
1: 	}
1: 	
1: 	public BundleRevision getRevision() {
1: 	    return revision;
1: 	}
1: 	
1: 	private ServiceModeller.ServiceModel getModel() {
1: 	    Activator activator = Activator.getInstance();
1: 	    ServiceModeller modeller = activator.getServiceModeller();
1: 	    if (modeller == null) {
1:             return null;
1:         }
1: 	    ServiceModeller.ServiceModel model = modeller.computeRequirementsAndCapabilities(this,
1:                 new BundleDirectory(revision.getBundle()));
1: 	    return model;
1: 	}
1: 	
1: 	private boolean initialized;
1: 	private List<Capability> serviceCapabilities;
1: 	private List<Requirement> serviceRequirements;
1: 	
1: 	private synchronized void computeServiceCapabilitiesAndRequirements() {
/////////////////////////////////////////////////////////////////////////
1: 		initialized = true;
1: 	private synchronized List<Capability> getServiceCapabilities() {
1: 		if (!initialized) {
1: 			computeServiceCapabilitiesAndRequirements();
1: 		}
1: 		return serviceCapabilities;
1: 	private synchronized List<Requirement> getServiceRequirements() {
1: 		if (!initialized) {
1: 			computeServiceCapabilitiesAndRequirements();
1: 		}
1: 		return serviceRequirements;
commit:9df8274
/////////////////////////////////////////////////////////////////////////
0: 	public BundleRevision getRevision() {
0: 	    return revision;
1: 	}
1: 	
commit:b597cdd
/////////////////////////////////////////////////////////////////////////
0: 	private final List<Capability> serviceCapabilities;
0: 	private final List<Requirement> serviceRequirements;
1: 		ServiceModeller.ServiceModel model = null;
1: 		boolean gotModel = false;
1:         List<Capability> capabilities = revision.getCapabilities(ServiceNamespace.SERVICE_NAMESPACE);
1:         // OSGi RFC 201 for R6: The presence of any Provide-Capability clauses
1:         // in the osgi.service namespace overrides any service related
1:         // capabilities that might have been found by other means.
1:         if (capabilities.isEmpty()) {
1:             model = getModel();
1:             gotModel = true;
1:             if (model != null) {
1:                 capabilities = model.getServiceCapabilities();
1:             }
1:         }
1:         serviceCapabilities = capabilities;
1:         List<Requirement> requirements = revision.getRequirements(ServiceNamespace.SERVICE_NAMESPACE);
1:         // OSGi RFC 201 for R6: The presence of any Require-Capability clauses
1:         // in the osgi.service namespace overrides any service related
1:         // requirements that might have been found by other means.
1:         if (requirements.isEmpty()) {
1:             if (model == null && !gotModel) {
1:                 model = getModel();
1:             }
1:             if (model != null) {
1:                 requirements = model.getServiceRequirements();
1:             }
1:         }
1:         serviceRequirements = requirements;
0: 	    if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)) {
0: 	        return Collections.unmodifiableList(serviceCapabilities);
1: 	    }
0: 	    List<Capability> revisionCapabilities = revision.getCapabilities(namespace);
0: 	    if (namespace == null) {
0: 	        List<Capability> result = new ArrayList<Capability>(revisionCapabilities.size() + serviceCapabilities.size());
0: 	        result.addAll(revisionCapabilities);
0: 	        result.addAll(serviceCapabilities);
0: 	        return Collections.unmodifiableList(result);
1: 	    }
0: 	    return revisionCapabilities;
0: 	    if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace)) {
0: 	        return Collections.unmodifiableList(serviceRequirements);
1: 	    }
0: 	    List<Requirement> revisionRequirements = revision.getRequirements(namespace);
0: 	    if (namespace == null) {
0: 	        List<Requirement> result = new ArrayList<Requirement>(revisionRequirements.size() + serviceRequirements.size());
0:             result.addAll(revisionRequirements);
0:             result.addAll(serviceRequirements);
0:             return Collections.unmodifiableList(result);
1: 	    }
0: 	    return revisionRequirements;
1: 	
0: 	private ServiceModeller.ServiceModel getModel() {
0: 	    Activator activator = Activator.getInstance();
0: 	    ServiceModeller modeller = activator.getServiceModeller();
0: 	    if (modeller == null) {
0:             return null;
1:         }
0: 	    ServiceModeller.ServiceModel model = modeller.computeRequirementsAndCapabilities(this,
0:                 new BundleDirectory(revision.getBundle()));
0: 	    return model;
commit:28b6fc1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.modelling.ParsedServiceElements;
/////////////////////////////////////////////////////////////////////////
0: 	private volatile ParsedServiceElements elements;
/////////////////////////////////////////////////////////////////////////
0: 	private ParsedServiceElements computeParsedServiceElements() {
0: 			return manager.getServiceElements(directory);
/////////////////////////////////////////////////////////////////////////
0: 		ParsedServiceElements elements = getParsedServiceElements();
0: 		if (elements == null)
0: 		Collection<? extends ExportedService> services = elements.getServices();
/////////////////////////////////////////////////////////////////////////
0: 		ParsedServiceElements elements = getParsedServiceElements();
0: 		if (elements == null)
0: 		Collection<? extends ImportedService> services = elements.getReferences();
/////////////////////////////////////////////////////////////////////////
0: 	private ParsedServiceElements getParsedServiceElements() {
0: 		ParsedServiceElements result = elements;
0: 				result = elements;
0: 					elements = result = computeParsedServiceElements();
commit:e7af8b6
/////////////////////////////////////////////////////////////////////////
0: 		if (manager == null)
0: 			return null;
/////////////////////////////////////////////////////////////////////////
0: 		if (resource == null)
0: 			return Collections.emptyList();
/////////////////////////////////////////////////////////////////////////
0: 		if (resource == null)
0: 			return Collections.emptyList();
commit:552587b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:5f81379
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.ArrayList;
0: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.apache.aries.application.modelling.ExportedService;
0: import org.apache.aries.application.modelling.ImportedService;
0: import org.apache.aries.application.modelling.ModelledResource;
0: import org.apache.aries.application.modelling.ModelledResourceManager;
0: import org.apache.aries.application.modelling.ModellerException;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.resource.Capability;
0: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
0: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class BundleRevisionResource implements Resource {
1: 	private final BundleRevision revision;
1: 	
0: 	private volatile ModelledResource resource;
1: 	
1: 	public BundleRevisionResource(BundleRevision revision) {
1: 		if (revision == null)
1: 			throw new NullPointerException();
1: 		this.revision = revision;
0: 	}
1: 
0: 	@Override
0: 	public List<Capability> getCapabilities(String namespace) {
0: 		if (namespace == null) {
0: 			List<Capability> rCaps = revision.getCapabilities(namespace);
0: 			List<Capability> sCaps = computeServiceCapabilities();
0: 			List<Capability> result = new ArrayList<Capability>(rCaps.size() + sCaps.size());
0: 			result.addAll(rCaps);
0: 			result.addAll(sCaps);
0: 			return Collections.unmodifiableList(result);
0: 		}
0: 		if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace))
0: 			return Collections.unmodifiableList(computeServiceCapabilities());
0: 		return revision.getCapabilities(namespace);
0: 	}
1: 
0: 	@Override
0: 	public List<Requirement> getRequirements(String namespace) {
0: 		if (namespace == null) {
0: 			List<Requirement> rReqs = revision.getRequirements(namespace);
0: 			List<Requirement> sReqs = computeServiceRequirements();
0: 			List<Requirement> result = new ArrayList<Requirement>(rReqs.size() + sReqs.size());
0: 			result.addAll(rReqs);
0: 			result.addAll(sReqs);
0: 			return Collections.unmodifiableList(result);
0: 		}
0: 		if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace))
0: 			return Collections.unmodifiableList(computeServiceRequirements());
0: 		return revision.getRequirements(namespace);
0: 	}
1: 	
0: 	private ModelledResource computeModelledResource() {
0: 		Activator activator = Activator.getInstance();
0: 		ModelledResourceManager manager = activator.getModelledResourceManager();
0: 		BundleDirectory directory = new BundleDirectory(revision.getBundle());
0: 		try {
0: 			return manager.getModelledResource(directory);
0: 		}
0: 		catch (ModellerException e) {
0: 			throw new SubsystemException(e);
0: 		}
0: 	}
1: 	
0: 	private List<Capability> computeServiceCapabilities() {
0: 		ModelledResource resource = getModelledResource();
0: 		Collection<? extends ExportedService> services = resource.getExportedServices();
0: 		if (services.isEmpty())
0: 			return Collections.emptyList();
0: 		List<Capability> result = new ArrayList<Capability>(services.size());
0: 		for (ExportedService service : services)
0: 			result.add(new BasicCapability.Builder()
0: 					.namespace(ServiceNamespace.SERVICE_NAMESPACE)
0: 					.attribute(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, new ArrayList<String>(service.getInterfaces()))
0: 					.attributes(service.getServiceProperties())
0: 					.resource(this)
0: 					.build());
0: 		return result;
0: 	}
1: 	
0: 	private List<Requirement> computeServiceRequirements() {
0: 		ModelledResource resource = getModelledResource();
0: 		Collection<? extends ImportedService> services = resource.getImportedServices();
0: 		if (services.isEmpty())
0: 			return Collections.emptyList();
0: 		List<Requirement> result = new ArrayList<Requirement>(services.size());
0: 		for (ImportedService service : services) {
0: 			StringBuilder builder = new StringBuilder("(&(")
0: 					.append(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE)
0: 					.append('=')
0: 					.append(service.getInterface())
0: 					.append(')');
0: 			String filter = service.getFilter();
0: 			if (filter != null)
0: 				builder.append('(').append(filter).append(')');
0: 			builder.append(')');
0: 			result.add(new BasicRequirement.Builder()
0: 					.namespace(ServiceNamespace.SERVICE_NAMESPACE)
0: 					.directive(Namespace.REQUIREMENT_FILTER_DIRECTIVE, builder.toString())
0: 					.directive(
0: 							Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, 
0: 							service.isOptional() ? Namespace.RESOLUTION_OPTIONAL : Namespace.RESOLUTION_MANDATORY)
0: 					.resource(this)
0: 					.build());
0: 		}
0: 		return result;
0: 	}
1: 
0: 	private ModelledResource getModelledResource() {
0: 		ModelledResource result = resource;
0: 		if (result == null) {
0: 			synchronized (this) {
0: 				result = resource;
0: 				if (result == null)
0: 					resource = result = computeModelledResource();
0: 			}
0: 		}
0: 		return result;
0: 	}
0: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
0: 		List<Capability> result = revision.getCapabilities(namespace);
0: 		// OSGi RFC 201 for R6: The presence of any Provide-Capability clauses
0: 		// in the osgi.service namespace overrides any service related
0: 		// capabilities that might have been found by other means.
0: 		if (result.isEmpty() && ServiceNamespace.SERVICE_NAMESPACE.equals(namespace))
0: 			result = Collections.unmodifiableList(computeServiceCapabilities());
0: 		return result;
/////////////////////////////////////////////////////////////////////////
0: 		// OSGi RFC 201 for R6: The presence of any Require-Capability clauses
0: 		// in the osgi.service namespace overrides any service related
0: 		// requirements that might have been found by other means.
0: 		List<Requirement> result = revision.getRequirements(namespace);
0: 		if (result.isEmpty() && ServiceNamespace.SERVICE_NAMESPACE.equals(namespace))
0: 			result = Collections.unmodifiableList(computeServiceRequirements());
0: 		return result;
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:36d1a1d
/////////////////////////////////////////////////////////////////////////
0:             return Collections.emptyList();
commit:06e67d9
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:             return Collections.emptyList();
0: 
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:9bba779
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Activator activator = Activator.getInstance();
0:         ServiceModeller modeller = activator.getServiceModeller();
0:         if (modeller == null)
0:             return null;
0:         ServiceModeller.ServiceModel model =
0:                 modeller.computeRequirementsAndCapabilities(this, new BundleDirectory(revision.getBundle()));
0:         return model.getServiceCapabilities();
0:         Activator activator = Activator.getInstance();
0:         ServiceModeller modeller = activator.getServiceModeller();
0:         if (modeller == null)
0:             return null;
0:         ServiceModeller.ServiceModel model =
0:                 modeller.computeRequirementsAndCapabilities(this, new BundleDirectory(revision.getBundle()));
0:         return model.getServiceRequirements();
============================================================================