1:f13c6ac: /*
1:f13c6ac:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:f13c6ac:  *
1:f13c6ac:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f13c6ac:  * you may not use this file except in compliance with the License.
1:f13c6ac:  * You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:f13c6ac: package org.osgi.service.blueprint.container;
1:f13c6ac: 
1:f13c6ac: import java.util.Collection;
1:f13c6ac: import java.util.Set;
1:f13c6ac: 
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * A Blueprint Container represents the managed state of a Blueprint bundle.
1:f13c6ac:  * 
1:f13c6ac:  * A Blueprint Container provides access to all managed components. These are
1:f13c6ac:  * the beans, services, and service references. Only bundles in the
1:f13c6ac:  * <code>ACTIVE</code> state (and also the <code>STARTING</code> state for
1:f13c6ac:  * bundles awaiting lazy activation) can have an associated Blueprint Container.
1:f13c6ac:  * A given Bundle Context has at most one associated Blueprint Container.
1:f13c6ac:  * 
1:f13c6ac:  * A Blueprint Container can be obtained by injecting the predefined
1:f13c6ac:  * &quot;blueprintContainer&quot; component id. The Blueprint Container is also
1:f13c6ac:  * registered as a service and its managed components can be queried.
1:f13c6ac:  * 
1:f13c6ac:  * @ThreadSafe
1:f13c6ac:  * @version $Revision$
1:f13c6ac:  */
1:f13c6ac: public interface BlueprintContainer {
1:f13c6ac: 	/**
1:f13c6ac: 	 * Returns the set of component ids managed by this Blueprint Container.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return An immutable Set of Strings, containing the ids of all of the
1:f13c6ac: 	 *         components managed within this Blueprint Container.
1:f13c6ac: 	 */
1:f13c6ac: 	Set<String> getComponentIds();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the component instance for the specified component id.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * If the component's manager has not yet been activated, calling this
1:f13c6ac: 	 * operation will atomically activate it. If the component has singleton
1:f13c6ac: 	 * scope, the activation will cause the component instance to be created and
1:f13c6ac: 	 * initialized. If the component has prototype scope, then each call to this
1:f13c6ac: 	 * method will return a new component instance.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @param id The component id for the requested component instance.
1:f13c6ac: 	 * @return A component instance for the component with the specified
1:f13c6ac: 	 *         component id.
1:f13c6ac: 	 * @throws NoSuchComponentException If no component with the specified
1:f13c6ac: 	 *         component id is managed by this Blueprint Container.
1:f13c6ac: 	 */
1:f13c6ac: 	Object getComponentInstance(String id);
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the Component Metadata object for the component with the specified
1:f13c6ac: 	 * component id.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @param id The component id for the requested Component Metadata.
1:f13c6ac: 	 * @return The Component Metadata object for the component with the
1:f13c6ac: 	 *         specified component id.
1:f13c6ac: 	 * @throws NoSuchComponentException If no component with the specified
1:f13c6ac: 	 *         component id is managed by this Blueprint Container.
1:f13c6ac: 	 */
1:f13c6ac: 	ComponentMetadata getComponentMetadata(String id);
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return all {@link ComponentMetadata} objects of the specified Component
1:f13c6ac: 	 * Metadata type. The supported Component Metadata types are
1:f13c6ac: 	 * {@link ComponentMetadata} (which returns the Component Metadata for all
1:f13c6ac: 	 * defined manager types), {@link BeanMetadata} ,
1:f13c6ac: 	 * {@link ServiceReferenceMetadata} (which returns both
1:f13c6ac: 	 * {@link ReferenceMetadata} and {@link ReferenceListMetadata} objects), and
1:f13c6ac: 	 * {@link ServiceMetadata}. The collection will include all Component
1:f13c6ac: 	 * Metadata objects of the requested type, including components that are
1:f13c6ac: 	 * declared inline.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @param type The super type or type of the requested Component Metadata
1:f13c6ac: 	 *        objects.
1:f13c6ac: 	 * @return An immutable collection of Component Metadata objects of the
1:f13c6ac: 	 *         specified type.
1:f13c6ac: 	 */
1:f13c6ac: 	<T extends ComponentMetadata> Collection<T> getMetadata(
1:f13c6ac: 			Class<T> type);
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.blueprint.container;
1: 
1: import java.util.Collection;
1: import java.util.Set;
1: 
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
1: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
1: 
1: /**
1:  * A Blueprint Container represents the managed state of a Blueprint bundle.
1:  * 
1:  * A Blueprint Container provides access to all managed components. These are
1:  * the beans, services, and service references. Only bundles in the
1:  * <code>ACTIVE</code> state (and also the <code>STARTING</code> state for
1:  * bundles awaiting lazy activation) can have an associated Blueprint Container.
1:  * A given Bundle Context has at most one associated Blueprint Container.
1:  * 
1:  * A Blueprint Container can be obtained by injecting the predefined
1:  * &quot;blueprintContainer&quot; component id. The Blueprint Container is also
1:  * registered as a service and its managed components can be queried.
1:  * 
1:  * @ThreadSafe
1:  * @version $Revision$
1:  */
1: public interface BlueprintContainer {
1: 	/**
1: 	 * Returns the set of component ids managed by this Blueprint Container.
1: 	 * 
1: 	 * @return An immutable Set of Strings, containing the ids of all of the
1: 	 *         components managed within this Blueprint Container.
1: 	 */
1: 	Set<String> getComponentIds();
1: 
1: 	/**
1: 	 * Return the component instance for the specified component id.
1: 	 * 
1: 	 * If the component's manager has not yet been activated, calling this
1: 	 * operation will atomically activate it. If the component has singleton
1: 	 * scope, the activation will cause the component instance to be created and
1: 	 * initialized. If the component has prototype scope, then each call to this
1: 	 * method will return a new component instance.
1: 	 * 
1: 	 * @param id The component id for the requested component instance.
1: 	 * @return A component instance for the component with the specified
1: 	 *         component id.
1: 	 * @throws NoSuchComponentException If no component with the specified
1: 	 *         component id is managed by this Blueprint Container.
1: 	 */
1: 	Object getComponentInstance(String id);
1: 
1: 	/**
1: 	 * Return the Component Metadata object for the component with the specified
1: 	 * component id.
1: 	 * 
1: 	 * @param id The component id for the requested Component Metadata.
1: 	 * @return The Component Metadata object for the component with the
1: 	 *         specified component id.
1: 	 * @throws NoSuchComponentException If no component with the specified
1: 	 *         component id is managed by this Blueprint Container.
1: 	 */
1: 	ComponentMetadata getComponentMetadata(String id);
1: 
1: 	/**
1: 	 * Return all {@link ComponentMetadata} objects of the specified Component
1: 	 * Metadata type. The supported Component Metadata types are
1: 	 * {@link ComponentMetadata} (which returns the Component Metadata for all
1: 	 * defined manager types), {@link BeanMetadata} ,
1: 	 * {@link ServiceReferenceMetadata} (which returns both
1: 	 * {@link ReferenceMetadata} and {@link ReferenceListMetadata} objects), and
1: 	 * {@link ServiceMetadata}. The collection will include all Component
1: 	 * Metadata objects of the requested type, including components that are
1: 	 * declared inline.
1: 	 * 
1: 	 * @param type The super type or type of the requested Component Metadata
1: 	 *        objects.
1: 	 * @return An immutable collection of Component Metadata objects of the
1: 	 *         specified type.
1: 	 */
1: 	<T extends ComponentMetadata> Collection<T> getMetadata(
1: 			Class<T> type);
1: }
============================================================================