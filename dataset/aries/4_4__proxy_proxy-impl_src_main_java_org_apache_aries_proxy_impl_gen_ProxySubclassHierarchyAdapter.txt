1:6a4e3c8: /*
1:6a4e3c8:  * Licensed to the Apache Software Foundation (ASF) under one
1:6a4e3c8:  * or more contributor license agreements.  See the NOTICE file
1:6a4e3c8:  * distributed with this work for additional information
1:6a4e3c8:  * regarding copyright ownership.  The ASF licenses this file
1:6a4e3c8:  * to you under the Apache License, Version 2.0 (the
1:6a4e3c8:  * "License"); you may not use this file except in compliance
1:6a4e3c8:  * with the License.  You may obtain a copy of the License at
1:6a4e3c8:  *
1:6a4e3c8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6a4e3c8:  *
1:6a4e3c8:  * Unless required by applicable law or agreed to in writing,
1:6a4e3c8:  * software distributed under the License is distributed on an
1:6a4e3c8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6a4e3c8:  * KIND, either express or implied.  See the License for the
1:6a4e3c8:  * specific language governing permissions and limitations
1:6a4e3c8:  * under the License.
1:6a4e3c8:  */
1:24455ce: package org.apache.aries.proxy.impl.gen;
3:6a4e3c8: 
1:6a4e3c8: import java.util.Collection;
1:6a4e3c8: 
1:6a4e3c8: import org.objectweb.asm.AnnotationVisitor;
1:6a4e3c8: import org.objectweb.asm.Attribute;
1:6a4e3c8: import org.objectweb.asm.ClassVisitor;
1:6a4e3c8: import org.objectweb.asm.FieldVisitor;
1:6a4e3c8: import org.objectweb.asm.MethodVisitor;
1:6a4e3c8: import org.objectweb.asm.Opcodes;
1:6a4e3c8: import org.objectweb.asm.Type;
1:6a4e3c8: import org.slf4j.Logger;
1:6a4e3c8: import org.slf4j.LoggerFactory;
1:6a4e3c8: 
1:6a4e3c8: /*
1:6a4e3c8:  * Although we implement ClassVisitor we are only interested in the methods of
1:6a4e3c8:  * the superclasses in the hierarchy.  For this reason although visitMethod is 
1:6a4e3c8:  * implemented the other methods of ClassVisitor are currently no-op.
1:6a4e3c8:  *
1:6a4e3c8:  *
1:6a4e3c8:  */
1:e6518d7: public class ProxySubclassHierarchyAdapter extends ClassVisitor implements Opcodes
2:6a4e3c8: {
1:6a4e3c8: 
1:6a4e3c8:   private ProxySubclassAdapter adapter = null;
1:6a4e3c8:   private Collection<String> methodsToImplement = null;
1:6a4e3c8: 
1:6a4e3c8:   private static Logger LOGGER = LoggerFactory.getLogger(ProxySubclassHierarchyAdapter.class);
1:9a9631e: 
1:9a9631e:   ProxySubclassHierarchyAdapter(ProxySubclassAdapter adapter, Collection<String> methodsToImplement)
1:9a9631e:   {
1:9a9631e:     super(Opcodes.ASM5);
1:9a9631e:     LOGGER.debug(Constants.LOG_ENTRY, "ProxySubclassHeirarchyAdapter", new Object[] {
1:9a9631e:         this, adapter, methodsToImplement });
1:9a9631e: 
1:6a4e3c8:     this.methodsToImplement = methodsToImplement;
1:6a4e3c8:     this.adapter = adapter;
1:6a4e3c8: 
1:24455ce:     LOGGER.debug(Constants.LOG_EXIT, "ProxySubclassHeirarchyAdapter", this);
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public MethodVisitor visitMethod(int access, String name, String desc, String signature,
1:6a4e3c8:       String[] exceptions)
1:6a4e3c8:   {
1:24455ce:     LOGGER.debug(Constants.LOG_ENTRY, "visitMethod", new Object[] { access, name, desc,
1:6a4e3c8:         signature, exceptions });
1:6a4e3c8: 
1:6a4e3c8:     // if the method we find in the superclass is one that is available on
1:6a4e3c8:     // the class
1:6a4e3c8:     // we are dynamically subclassing then we need to implement an
1:6a4e3c8:     // invocation for it
1:6a4e3c8:     String argDesc = ProxySubclassMethodHashSet.typeArrayToStringArgDescriptor(Type
1:6a4e3c8:         .getArgumentTypes(desc));
1:6a4e3c8:     if (methodsToImplement.contains(name + argDesc)) {
1:6a4e3c8:       // create the method in bytecode
1:6a4e3c8:       adapter.visitMethod(access, name, desc, signature, exceptions);
1:6a4e3c8:     }
1:6a4e3c8: 
1:24455ce:     LOGGER.debug(Constants.LOG_EXIT, "visitMethod");
1:6a4e3c8: 
1:6a4e3c8:     // always return null because we don't want to copy any method code
1:6a4e3c8:     return null;
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public void visit(int arg0, int arg1, String arg2, String arg3, String arg4, String[] arg5)
1:6a4e3c8:   {
1:6a4e3c8:     // no-op
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public AnnotationVisitor visitAnnotation(String arg0, boolean arg1)
1:6a4e3c8:   {
1:6a4e3c8:     // don't process any annotations at this stage
1:6a4e3c8:     return null;
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public void visitAttribute(Attribute arg0)
1:6a4e3c8:   {
1:6a4e3c8:     // no-op
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public void visitEnd()
1:6a4e3c8:   {
1:6a4e3c8:     // no-op
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4)
1:6a4e3c8:   {
1:6a4e3c8:     // don't process fields
1:6a4e3c8:     return null;
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public void visitInnerClass(String arg0, String arg1, String arg2, int arg3)
1:6a4e3c8:   {
1:6a4e3c8:     // no-op
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public void visitOuterClass(String arg0, String arg1, String arg2)
1:6a4e3c8:   {
1:6a4e3c8:     // no-op
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8:   public void visitSource(String arg0, String arg1)
1:6a4e3c8:   {
1:6a4e3c8:     // no-op
1:6a4e3c8:   }
1:6a4e3c8: 
1:6a4e3c8: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a9631e
/////////////////////////////////////////////////////////////////////////
1: 
1:   ProxySubclassHierarchyAdapter(ProxySubclassAdapter adapter, Collection<String> methodsToImplement)
1:   {
1:     super(Opcodes.ASM5);
1:     LOGGER.debug(Constants.LOG_ENTRY, "ProxySubclassHeirarchyAdapter", new Object[] {
1:         this, adapter, methodsToImplement });
1: 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:322f373
/////////////////////////////////////////////////////////////////////////
0:     super(Opcodes.ASM4);
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
1: public class ProxySubclassHierarchyAdapter extends ClassVisitor implements Opcodes
/////////////////////////////////////////////////////////////////////////
0:     super(Constants.ASM4);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.impl.gen;
/////////////////////////////////////////////////////////////////////////
0:     LOGGER.debug(Constants.LOG_ENTRY, "ProxySubclassHeirarchyAdapter", new Object[] {
1:     LOGGER.debug(Constants.LOG_EXIT, "ProxySubclassHeirarchyAdapter", this);
1:     LOGGER.debug(Constants.LOG_ENTRY, "visitMethod", new Object[] { access, name, desc,
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.debug(Constants.LOG_EXIT, "visitMethod");
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:6a4e3c8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.blueprint.proxy;
1: 
1: import java.util.Collection;
1: 
1: import org.objectweb.asm.AnnotationVisitor;
1: import org.objectweb.asm.Attribute;
1: import org.objectweb.asm.ClassVisitor;
1: import org.objectweb.asm.FieldVisitor;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Opcodes;
1: import org.objectweb.asm.Type;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /*
1:  * Although we implement ClassVisitor we are only interested in the methods of
1:  * the superclasses in the hierarchy.  For this reason although visitMethod is 
1:  * implemented the other methods of ClassVisitor are currently no-op.
1:  *
1:  *
1:  */
0: public class ProxySubclassHierarchyAdapter implements ClassVisitor, Opcodes
1: {
1: 
1:   private ProxySubclassAdapter adapter = null;
1:   private Collection<String> methodsToImplement = null;
1: 
1:   private static Logger LOGGER = LoggerFactory.getLogger(ProxySubclassHierarchyAdapter.class);
1: 
0:   ProxySubclassHierarchyAdapter(ProxySubclassAdapter adapter, Collection<String> methodsToImplement)
1:   {
0:     LOGGER.debug(AsmInterceptorWrapper.LOG_ENTRY, "ProxySubclassHeirarchyAdapter", new Object[] {
0:         this, adapter, methodsToImplement });
1: 
1:     this.methodsToImplement = methodsToImplement;
1:     this.adapter = adapter;
1: 
0:     LOGGER.debug(AsmInterceptorWrapper.LOG_EXIT, "ProxySubclassHeirarchyAdapter", this);
1:   }
1: 
1:   public MethodVisitor visitMethod(int access, String name, String desc, String signature,
1:       String[] exceptions)
1:   {
0:     LOGGER.debug(AsmInterceptorWrapper.LOG_ENTRY, "visitMethod", new Object[] { access, name, desc,
1:         signature, exceptions });
1: 
1:     // if the method we find in the superclass is one that is available on
1:     // the class
1:     // we are dynamically subclassing then we need to implement an
1:     // invocation for it
1:     String argDesc = ProxySubclassMethodHashSet.typeArrayToStringArgDescriptor(Type
1:         .getArgumentTypes(desc));
1:     if (methodsToImplement.contains(name + argDesc)) {
1:       // create the method in bytecode
1:       adapter.visitMethod(access, name, desc, signature, exceptions);
1:     }
1: 
0:     LOGGER.debug(AsmInterceptorWrapper.LOG_EXIT, "visitMethod");
1: 
1:     // always return null because we don't want to copy any method code
1:     return null;
1:   }
1: 
1:   public void visit(int arg0, int arg1, String arg2, String arg3, String arg4, String[] arg5)
1:   {
1:     // no-op
1:   }
1: 
1:   public AnnotationVisitor visitAnnotation(String arg0, boolean arg1)
1:   {
1:     // don't process any annotations at this stage
1:     return null;
1:   }
1: 
1:   public void visitAttribute(Attribute arg0)
1:   {
1:     // no-op
1:   }
1: 
1:   public void visitEnd()
1:   {
1:     // no-op
1:   }
1: 
1:   public FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4)
1:   {
1:     // don't process fields
1:     return null;
1:   }
1: 
1:   public void visitInnerClass(String arg0, String arg1, String arg2, int arg3)
1:   {
1:     // no-op
1:   }
1: 
1:   public void visitOuterClass(String arg0, String arg1, String arg2)
1:   {
1:     // no-op
1:   }
1: 
1:   public void visitSource(String arg0, String arg1)
1:   {
1:     // no-op
1:   }
1: 
1: }
============================================================================