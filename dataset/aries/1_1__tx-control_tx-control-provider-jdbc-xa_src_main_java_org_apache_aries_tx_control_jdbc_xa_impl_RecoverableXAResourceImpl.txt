1:efb3993: /*
1:efb3993:  * Licensed to the Apache Software Foundation (ASF) under one
1:efb3993:  * or more contributor license agreements.  See the NOTICE file
1:efb3993:  * distributed with this work for additional information
1:efb3993:  * regarding copyright ownership.  The ASF licenses this file
1:efb3993:  * to you under the Apache License, Version 2.0 (the
1:efb3993:  * "License"); you may not use this file except in compliance
1:efb3993:  * with the License.  You may obtain a copy of the License at
1:efb3993:  *
1:efb3993:  *   http://www.apache.org/licenses/LICENSE-2.0
1:efb3993:  *
1:efb3993:  * Unless required by applicable law or agreed to in writing,
1:efb3993:  * software distributed under the License is distributed on an
1:efb3993:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:efb3993:  * KIND, either express or implied.  See the License for the
1:efb3993:  * specific language governing permissions and limitations
1:efb3993:  * under the License.
1:efb3993:  */
1:80b5875: package org.apache.aries.tx.control.jdbc.xa.impl;
1:80b5875: 
1:80b5875: import java.sql.Connection;
1:80b5875: import java.sql.SQLException;
1:80b5875: 
1:80b5875: import javax.sql.DataSource;
1:80b5875: import javax.transaction.xa.XAException;
1:80b5875: import javax.transaction.xa.XAResource;
1:80b5875: import javax.transaction.xa.Xid;
1:80b5875: 
1:80b5875: import org.osgi.service.transaction.control.recovery.RecoverableXAResource;
1:80b5875: 
1:80b5875: public class RecoverableXAResourceImpl implements RecoverableXAResource {
1:80b5875: 
1:80b5875: 	private final String id;
1:80b5875: 	
1:80b5875: 	private final JDBCConnectionProviderImpl providerImpl;
1:80b5875: 	
1:80b5875: 	private final String recoveryUser;
1:80b5875: 	
1:80b5875: 	private final String recoveryPw;
1:80b5875: 	
1:80b5875: 	public RecoverableXAResourceImpl(String id, JDBCConnectionProviderImpl providerImpl, String recoveryUser,
1:80b5875: 			String recoveryPw) {
1:80b5875: 		this.id = id;
1:80b5875: 		this.providerImpl = providerImpl;
1:80b5875: 		this.recoveryUser = recoveryUser;
1:80b5875: 		this.recoveryPw = recoveryPw;
1:80b5875: 	}
1:80b5875: 
1:80b5875: 	@Override
1:80b5875: 	public String getId() {
1:80b5875: 		return id;
1:80b5875: 	}
1:80b5875: 
1:80b5875: 	@Override
1:80b5875: 	public XAResource getXAResource() throws Exception {
1:80b5875: 		DataSource rawDataSource = providerImpl.getRawDataSource();
1:80b5875: 
1:80b5875: 		Connection recoveryConn;
1:80b5875: 		if(recoveryUser != null) {
1:80b5875: 			recoveryConn = rawDataSource.getConnection(recoveryUser, recoveryPw);
1:80b5875: 		} else {
1:80b5875: 			recoveryConn = rawDataSource.getConnection();
1:80b5875: 		}
1:80b5875: 		
1:80b5875: 		return new CloseableXAResource(recoveryConn);
1:80b5875: 	}
1:80b5875: 
1:80b5875: 	@Override
1:80b5875: 	public void releaseXAResource(XAResource xaRes) {
1:80b5875: 		if(xaRes instanceof CloseableXAResource) {
1:80b5875: 			try {
1:80b5875: 				((CloseableXAResource) xaRes).close();
1:80b5875: 			} catch (Exception e) {
1:80b5875: 				// This is fine, the connection has been returned
1:80b5875: 			}
1:80b5875: 		} else {
1:80b5875: 			throw new IllegalArgumentException("The XAResource being returned was not created by this provider implementation");
1:80b5875: 		}
1:80b5875: 	}
1:80b5875: 
1:80b5875: 	private static class CloseableXAResource implements XAResource, AutoCloseable {
1:80b5875: 		private final Connection conn;
1:80b5875: 		
1:80b5875: 		private final XAResource resource;
1:80b5875: 		
1:80b5875: 		public CloseableXAResource(Connection conn) throws SQLException {
1:80b5875: 			conn.isValid(5);
1:80b5875: 			this.conn = conn;
1:80b5875: 			this.resource = XAEnabledTxContextBindingConnection.getXAResource(conn);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		@Override
1:80b5875: 		public void close() throws Exception {
1:80b5875: 			conn.close();
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public void commit(Xid arg0, boolean arg1) throws XAException {
1:80b5875: 			resource.commit(arg0, arg1);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public void end(Xid arg0, int arg1) throws XAException {
1:80b5875: 			resource.end(arg0, arg1);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public void forget(Xid arg0) throws XAException {
1:80b5875: 			resource.forget(arg0);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public int getTransactionTimeout() throws XAException {
1:80b5875: 			return resource.getTransactionTimeout();
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public boolean isSameRM(XAResource arg0) throws XAException {
1:80b5875: 			return resource.isSameRM(arg0);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public int prepare(Xid arg0) throws XAException {
1:80b5875: 			return resource.prepare(arg0);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public Xid[] recover(int arg0) throws XAException {
1:80b5875: 			return resource.recover(arg0);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public void rollback(Xid arg0) throws XAException {
1:80b5875: 			resource.rollback(arg0);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public boolean setTransactionTimeout(int arg0) throws XAException {
1:80b5875: 			return resource.setTransactionTimeout(arg0);
1:80b5875: 		}
1:80b5875: 
1:80b5875: 		public void start(Xid arg0, int arg1) throws XAException {
1:80b5875: 			resource.start(arg0, arg1);
1:80b5875: 		}
1:80b5875: 	}
1:80b5875: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:efb3993
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:80b5875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.xa.impl;
1: 
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: 
1: import javax.sql.DataSource;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
1: import org.osgi.service.transaction.control.recovery.RecoverableXAResource;
1: 
1: public class RecoverableXAResourceImpl implements RecoverableXAResource {
1: 
1: 	private final String id;
1: 	
1: 	private final JDBCConnectionProviderImpl providerImpl;
1: 	
1: 	private final String recoveryUser;
1: 	
1: 	private final String recoveryPw;
1: 	
1: 	public RecoverableXAResourceImpl(String id, JDBCConnectionProviderImpl providerImpl, String recoveryUser,
1: 			String recoveryPw) {
1: 		this.id = id;
1: 		this.providerImpl = providerImpl;
1: 		this.recoveryUser = recoveryUser;
1: 		this.recoveryPw = recoveryPw;
1: 	}
1: 
1: 	@Override
1: 	public String getId() {
1: 		return id;
1: 	}
1: 
1: 	@Override
1: 	public XAResource getXAResource() throws Exception {
1: 		DataSource rawDataSource = providerImpl.getRawDataSource();
1: 
1: 		Connection recoveryConn;
1: 		if(recoveryUser != null) {
1: 			recoveryConn = rawDataSource.getConnection(recoveryUser, recoveryPw);
1: 		} else {
1: 			recoveryConn = rawDataSource.getConnection();
1: 		}
1: 		
1: 		return new CloseableXAResource(recoveryConn);
1: 	}
1: 
1: 	@Override
1: 	public void releaseXAResource(XAResource xaRes) {
1: 		if(xaRes instanceof CloseableXAResource) {
1: 			try {
1: 				((CloseableXAResource) xaRes).close();
1: 			} catch (Exception e) {
1: 				// This is fine, the connection has been returned
1: 			}
1: 		} else {
1: 			throw new IllegalArgumentException("The XAResource being returned was not created by this provider implementation");
1: 		}
1: 	}
1: 
1: 	private static class CloseableXAResource implements XAResource, AutoCloseable {
1: 		private final Connection conn;
1: 		
1: 		private final XAResource resource;
1: 		
1: 		public CloseableXAResource(Connection conn) throws SQLException {
1: 			conn.isValid(5);
1: 			this.conn = conn;
1: 			this.resource = XAEnabledTxContextBindingConnection.getXAResource(conn);
1: 		}
1: 
1: 		@Override
1: 		public void close() throws Exception {
1: 			conn.close();
1: 		}
1: 
1: 		public void commit(Xid arg0, boolean arg1) throws XAException {
1: 			resource.commit(arg0, arg1);
1: 		}
1: 
1: 		public void end(Xid arg0, int arg1) throws XAException {
1: 			resource.end(arg0, arg1);
1: 		}
1: 
1: 		public void forget(Xid arg0) throws XAException {
1: 			resource.forget(arg0);
1: 		}
1: 
1: 		public int getTransactionTimeout() throws XAException {
1: 			return resource.getTransactionTimeout();
1: 		}
1: 
1: 		public boolean isSameRM(XAResource arg0) throws XAException {
1: 			return resource.isSameRM(arg0);
1: 		}
1: 
1: 		public int prepare(Xid arg0) throws XAException {
1: 			return resource.prepare(arg0);
1: 		}
1: 
1: 		public Xid[] recover(int arg0) throws XAException {
1: 			return resource.recover(arg0);
1: 		}
1: 
1: 		public void rollback(Xid arg0) throws XAException {
1: 			resource.rollback(arg0);
1: 		}
1: 
1: 		public boolean setTransactionTimeout(int arg0) throws XAException {
1: 			return resource.setTransactionTimeout(arg0);
1: 		}
1: 
1: 		public void start(Xid arg0, int arg1) throws XAException {
1: 			resource.start(arg0, arg1);
1: 		}
1: 	}
1: }
============================================================================