1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a4dcb4:  * contributor license agreements.  See the NOTICE file distributed with
1:5a4dcb4:  * this work for additional information regarding copyright ownership.
1:5a4dcb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a4dcb4:  * (the "License"); you may not use this file except in compliance with
1:5a4dcb4:  * the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing, software
1:5a4dcb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4dcb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4dcb4:  * See the License for the specific language governing permissions and
1:5a4dcb4:  * limitations under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.cdi.support;
1:5a4dcb4: 
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedConstructor;
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedField;
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedMethod;
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedType;
1:5a4dcb4: import java.lang.annotation.Annotation;
1:5a4dcb4: import java.lang.reflect.Type;
1:5a4dcb4: import java.util.Set;
1:5a4dcb4: 
1:5a4dcb4: public class ForwardingAnnotatedType<X> implements AnnotatedType<X> {
1:5a4dcb4: 
1:5a4dcb4:     private final AnnotatedType<X> delegate;
1:5a4dcb4: 
1:5a4dcb4:     public ForwardingAnnotatedType(AnnotatedType<X> delegate) {
1:5a4dcb4:         this.delegate = delegate;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Class<X> getJavaClass() {
1:5a4dcb4:         return delegate.getJavaClass();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<AnnotatedConstructor<X>> getConstructors() {
1:5a4dcb4:         return delegate.getConstructors();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<AnnotatedMethod<? super X>> getMethods() {
1:5a4dcb4:         return delegate.getMethods();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<AnnotatedField<? super X>> getFields() {
1:5a4dcb4:         return delegate.getFields();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Type getBaseType() {
1:5a4dcb4:         return delegate.getBaseType();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<Type> getTypeClosure() {
1:5a4dcb4:         return delegate.getTypeClosure();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public <T extends Annotation> T getAnnotation(Class<T> annotationType) {
1:5a4dcb4:         return delegate.getAnnotation(annotationType);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<Annotation> getAnnotations() {
1:5a4dcb4:         return delegate.getAnnotations();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public boolean isAnnotationPresent(Class<? extends Annotation> annotationType) {
1:5a4dcb4:         return delegate.isAnnotationPresent(annotationType);
1:5a4dcb4:     }
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.jpa.cdi.support;
1: 
1: import javax.enterprise.inject.spi.AnnotatedConstructor;
1: import javax.enterprise.inject.spi.AnnotatedField;
1: import javax.enterprise.inject.spi.AnnotatedMethod;
1: import javax.enterprise.inject.spi.AnnotatedType;
1: import java.lang.annotation.Annotation;
1: import java.lang.reflect.Type;
1: import java.util.Set;
1: 
1: public class ForwardingAnnotatedType<X> implements AnnotatedType<X> {
1: 
1:     private final AnnotatedType<X> delegate;
1: 
1:     public ForwardingAnnotatedType(AnnotatedType<X> delegate) {
1:         this.delegate = delegate;
1:     }
1: 
1:     @Override
1:     public Class<X> getJavaClass() {
1:         return delegate.getJavaClass();
1:     }
1: 
1:     @Override
1:     public Set<AnnotatedConstructor<X>> getConstructors() {
1:         return delegate.getConstructors();
1:     }
1: 
1:     @Override
1:     public Set<AnnotatedMethod<? super X>> getMethods() {
1:         return delegate.getMethods();
1:     }
1: 
1:     @Override
1:     public Set<AnnotatedField<? super X>> getFields() {
1:         return delegate.getFields();
1:     }
1: 
1:     @Override
1:     public Type getBaseType() {
1:         return delegate.getBaseType();
1:     }
1: 
1:     @Override
1:     public Set<Type> getTypeClosure() {
1:         return delegate.getTypeClosure();
1:     }
1: 
1:     @Override
1:     public <T extends Annotation> T getAnnotation(Class<T> annotationType) {
1:         return delegate.getAnnotation(annotationType);
1:     }
1: 
1:     @Override
1:     public Set<Annotation> getAnnotations() {
1:         return delegate.getAnnotations();
1:     }
1: 
1:     @Override
1:     public boolean isAnnotationPresent(Class<? extends Annotation> annotationType) {
1:         return delegate.isAnnotationPresent(annotationType);
1:     }
1: }
============================================================================