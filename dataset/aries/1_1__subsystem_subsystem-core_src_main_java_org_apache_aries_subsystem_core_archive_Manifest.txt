1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
1:1129914: 
1:1129914: import java.io.File;
1:1129914: import java.io.FileInputStream;
1:1129914: import java.io.IOException;
1:1129914: import java.io.InputStream;
1:1129914: import java.io.OutputStream;
1:1129914: import java.util.Collection;
1:1129914: import java.util.Collections;
1:1129914: import java.util.HashMap;
1:1129914: import java.util.Map;
1:1129914: import java.util.jar.Attributes;
1:1129914: 
1:1129914: import org.apache.aries.util.manifest.ManifestProcessor;
1:1129914: 
1:1129914: public abstract class Manifest {
1:1c9c28b: 	protected final Map<String, Header> headers = Collections.synchronizedMap(new HashMap<String, Header>());
1:1129914: 	protected final java.util.jar.Manifest manifest;
1:1129914: 	
1:1129914: 	public Manifest(InputStream in) throws IOException {
1:4717af0: 		this(ManifestProcessor.parseManifest(in));
1:4717af0: 	}
1:4717af0: 	
1:4717af0: 	public Manifest(java.util.jar.Manifest manifest) {
1:4717af0: 		this.manifest = manifest;
1:1129914: 		for (Map.Entry<Object, Object> entry : manifest.getMainAttributes().entrySet()) {
1:1129914: 			Header header = HeaderFactory.createHeader(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
1:1129914: 			headers.put(header.getName(), header);
1:1129914: 		}
1:4717af0: 		if (headers.get(ManifestVersionHeader.NAME) == null)
1:4717af0: 			headers.put(ManifestVersionHeader.NAME, ManifestVersionHeader.DEFAULT);
1:1129914: 	}
1:1129914: 	
1:1129914: 	public Manifest(File manifestFile) throws IOException {
1:1129914: 		this(new FileInputStream(manifestFile));
1:1129914: 	}
1:1129914: 	
1:1129914: 	protected Manifest() {
1:1129914: 		manifest = null;
1:1129914: 	}
1:1129914: 
1:1129914: 	public Header getHeader(String name) {
1:1129914: 		return headers.get(name);
1:1129914: 	}
1:1129914: 
1:1129914: 	public Collection<Header> getHeaders() {
1:1129914: 		return Collections.unmodifiableCollection(headers.values());
1:1129914: 	}
1:47cea41: 	
1:47cea41: 	public java.util.jar.Manifest getManifest() {
1:47cea41: 		return manifest;
1:47cea41: 	}
1:1129914: 
1:1129914: 	public Header getManifestVersion() {
1:1129914: 		return getHeader(Attributes.Name.MANIFEST_VERSION.toString());
1:1129914: 	}
1:1129914: 	
1:1c9c28b: 	@Override
1:1c9c28b: 	public String toString() {
1:1c9c28b: 		StringBuilder sb = new StringBuilder();
1:1c9c28b: 		sb.append('[').append(getClass().getName()).append(": ");
1:1c9c28b: 		if (!headers.values().isEmpty()) {
1:1c9c28b: 			for (Header header : headers.values())
1:1c9c28b: 				sb.append(header.getName()).append('=').append(header.getValue()).append(", ");
1:1c9c28b: 			sb.delete(sb.length() - 2, sb.length());
1:1c9c28b: 		}
1:1c9c28b: 		sb.append(']');
1:1c9c28b: 		return sb.toString();
1:1c9c28b: 	}
1:1c9c28b: 	
1:1129914: 	public void write(OutputStream out) throws IOException {
1:1129914: 		java.util.jar.Manifest m = new java.util.jar.Manifest();
1:1129914: 		Attributes attributes = m.getMainAttributes();
1:1129914: 		for (Header header : headers.values()) {
1:1129914: 			attributes.putValue(header.getName(), header.getValue());
1:1129914: 		}
1:1129914: 		m.write(out);
1:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:47cea41
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	public java.util.jar.Manifest getManifest() {
1: 		return manifest;
1: 	}
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
1: 	protected final Map<String, Header> headers = Collections.synchronizedMap(new HashMap<String, Header>());
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public String toString() {
1: 		StringBuilder sb = new StringBuilder();
1: 		sb.append('[').append(getClass().getName()).append(": ");
1: 		if (!headers.values().isEmpty()) {
1: 			for (Header header : headers.values())
1: 				sb.append(header.getName()).append('=').append(header.getValue()).append(", ");
1: 			sb.delete(sb.length() - 2, sb.length());
1: 		}
1: 		sb.append(']');
1: 		return sb.toString();
1: 	}
1: 	
commit:4717af0
/////////////////////////////////////////////////////////////////////////
1: 		this(ManifestProcessor.parseManifest(in));
1: 	}
1: 	
1: 	public Manifest(java.util.jar.Manifest manifest) {
1: 		this.manifest = manifest;
1: 		if (headers.get(ManifestVersionHeader.NAME) == null)
1: 			headers.put(ManifestVersionHeader.NAME, ManifestVersionHeader.DEFAULT);
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.jar.Attributes;
1: 
1: import org.apache.aries.util.manifest.ManifestProcessor;
1: 
1: public abstract class Manifest {
0: 	protected final Map<String, Header> headers = new HashMap<String, Header>();
1: 	protected final java.util.jar.Manifest manifest;
1: 	
1: 	public Manifest(InputStream in) throws IOException {
0: 		manifest = ManifestProcessor.parseManifest(in);
1: 		for (Map.Entry<Object, Object> entry : manifest.getMainAttributes().entrySet()) {
1: 			Header header = HeaderFactory.createHeader(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
1: 			headers.put(header.getName(), header);
1: 		}
1: 	}
1: 	
1: 	public Manifest(File manifestFile) throws IOException {
1: 		this(new FileInputStream(manifestFile));
1: 	}
1: 	
1: 	protected Manifest() {
1: 		manifest = null;
1: 	}
1: 
1: 	public Header getHeader(String name) {
1: 		return headers.get(name);
1: 	}
1: 
1: 	public Collection<Header> getHeaders() {
1: 		return Collections.unmodifiableCollection(headers.values());
1: 	}
1: 
1: 	public Header getManifestVersion() {
1: 		return getHeader(Attributes.Name.MANIFEST_VERSION.toString());
1: 	}
1: 	
1: 	public void write(OutputStream out) throws IOException {
1: 		java.util.jar.Manifest m = new java.util.jar.Manifest();
1: 		Attributes attributes = m.getMainAttributes();
1: 		for (Header header : headers.values()) {
1: 			attributes.putValue(header.getName(), header.getValue());
1: 		}
1: 		m.write(out);
1: 	}
1: }
============================================================================