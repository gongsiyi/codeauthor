1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:78dd69f: package org.apache.aries.tx.control.service.common.impl;
5:8a2da19: 
1:8a2da19: import static org.junit.Assert.assertEquals;
1:8a2da19: import static org.junit.Assert.assertFalse;
1:8a2da19: import static org.junit.Assert.assertNull;
1:8a2da19: import static org.junit.Assert.assertSame;
1:8a2da19: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:8a2da19: 
1:8a2da19: import java.util.concurrent.atomic.AtomicInteger;
1:8a2da19: 
1:8a2da19: import javax.transaction.xa.XAResource;
1:8a2da19: 
1:8a2da19: import org.junit.Before;
1:8a2da19: import org.junit.Test;
1:8a2da19: import org.junit.runner.RunWith;
1:8a2da19: import org.mockito.Mock;
1:8a2da19: import org.mockito.runners.MockitoJUnitRunner;
1:8a2da19: import org.osgi.service.transaction.control.LocalResource;
1:8a2da19: 
1:8a2da19: @RunWith(MockitoJUnitRunner.class)
1:8a2da19: public class NoTransactionContextTest {
1:8a2da19: 
2:8a2da19: 	@Mock
1:8a2da19: 	XAResource xaResource;
1:8a2da19: 	@Mock
1:8a2da19: 	LocalResource localResource;
1:8a2da19: 	
1:f377acd: 	AbstractTransactionContextImpl ctx;
1:8a2da19: 	
1:8a2da19: 	@Before
1:8a2da19: 	public void setUp() {
1:f87416c: 		ctx = new NoTransactionContextImpl();
2:8a2da19: 	}
1:8a2da19: 	
1:8a2da19: 	@Test(expected=IllegalStateException.class)
1:8a2da19: 	public void testGetRollbackOnly() {
1:8a2da19: 		ctx.getRollbackOnly();
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test(expected=IllegalStateException.class)
1:8a2da19: 	public void testSetRollbackOnly() {
1:8a2da19: 		ctx.setRollbackOnly();
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testTransactionKey() {
1:8a2da19: 		assertNull(ctx.getTransactionKey());
1:8a2da19: 	}
1:8a2da19: 	
1:8a2da19: 	@Test
1:8a2da19: 	public void testTransactionStatus() {
1:8a2da19: 		assertEquals(NO_TRANSACTION, ctx.getTransactionStatus());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testLocalResourceSupport() {
1:8a2da19: 		assertFalse(ctx.supportsLocal());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testXAResourceSupport() {
1:8a2da19: 		assertFalse(ctx.supportsXA());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test(expected=IllegalStateException.class)
1:8a2da19: 	public void testLocalResourceRegistration() {
1:8a2da19: 		ctx.registerLocalResource(localResource);
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test(expected=IllegalStateException.class)
1:8a2da19: 	public void testXAResourceRegistration() {
1:47a70d3: 		ctx.registerXAResource(xaResource, null);
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testScopedValues() {
1:8a2da19: 		assertNull(ctx.getScopedValue("foo"));
1:8a2da19: 		
1:8a2da19: 		Object value = new Object();
1:8a2da19: 		
1:8a2da19: 		ctx.putScopedValue("foo", value);
1:8a2da19: 		
1:8a2da19: 		assertSame(value, ctx.getScopedValue("foo"));
1:8a2da19: 	}
1:8a2da19: 	
1:8a2da19: 	@Test
1:f377acd: 	public void testPreCompletion() throws Exception {
1:8a2da19: 		
1:8a2da19: 		AtomicInteger value = new AtomicInteger(0);
1:8a2da19: 		
1:8a2da19: 		ctx.preCompletion(() -> value.compareAndSet(1, 5));
1:8a2da19: 		
1:8a2da19: 		assertEquals(0, value.getAndSet(1));
1:8a2da19: 		
1:f377acd: 		ctx.finish();
1:f377acd: 		
1:8a2da19: 		assertEquals(5, value.get());
1:8a2da19: 	}
1:f377acd: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testPreCompletionFail() throws Exception {
1:f377acd: 		
1:8a2da19: 		AtomicInteger value = new AtomicInteger(0);
1:8a2da19: 		
1:8a2da19: 		ctx.preCompletion(() -> value.compareAndSet(1, 5));
1:8a2da19: 		
1:8a2da19: 		assertEquals(0, value.getAndSet(1));
1:8a2da19: 		
1:f87416c: 		ctx.recordFailure(new Exception());
1:8a2da19: 		
1:f377acd: 		ctx.finish();
1:8a2da19: 		
1:8a2da19: 		assertEquals(5, value.get());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:f377acd: 	public void testPostCompletion() throws Exception {
1:8a2da19: 		
1:8a2da19: 		AtomicInteger value = new AtomicInteger(0);
1:8a2da19: 		
1:8a2da19: 		ctx.postCompletion(status -> {
1:8a2da19: 				assertEquals(NO_TRANSACTION, status);
1:8a2da19: 				value.compareAndSet(1, 5);
1:8a2da19: 			});
1:8a2da19: 		
1:8a2da19: 		assertEquals(0, value.getAndSet(1));
1:8a2da19: 		
1:f377acd: 		ctx.finish();
1:8a2da19: 		
1:8a2da19: 		assertEquals(5, value.get());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testPostCompletionFail() throws Exception {
1:8a2da19: 		
1:8a2da19: 		AtomicInteger value = new AtomicInteger(0);
1:8a2da19: 		
1:8a2da19: 		ctx.postCompletion(status -> {
1:8a2da19: 			assertEquals(NO_TRANSACTION, status);
1:8a2da19: 			value.compareAndSet(1, 5);
1:8a2da19: 		});
1:8a2da19: 		
1:8a2da19: 		assertEquals(0, value.getAndSet(1));
1:8a2da19: 		
1:f87416c: 		ctx.recordFailure(new Exception());
1:8a2da19: 		
1:f377acd: 		ctx.finish();
1:8a2da19: 		
1:8a2da19: 		assertEquals(5, value.get());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:f377acd: 	public void testPostCompletionIsAfterPreCompletion() throws Exception {
1:8a2da19: 		
1:8a2da19: 		AtomicInteger value = new AtomicInteger(0);
1:8a2da19: 		
1:8a2da19: 		ctx.preCompletion(() -> value.compareAndSet(0, 3));
1:8a2da19: 		ctx.postCompletion(status -> {
1:8a2da19: 			assertEquals(NO_TRANSACTION, status);
1:8a2da19: 			value.compareAndSet(3, 5);
1:8a2da19: 		});
1:8a2da19: 		
1:f377acd: 		ctx.finish();
1:8a2da19: 		
1:8a2da19: 		assertEquals(5, value.get());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testPostCompletionIsAfterPreCompletionFail() throws Exception {
1:8a2da19: 		
1:8a2da19: 		AtomicInteger value = new AtomicInteger(0);
1:8a2da19: 		
1:8a2da19: 		ctx.preCompletion(() -> value.compareAndSet(0, 3));
1:8a2da19: 		ctx.postCompletion(status -> {
1:8a2da19: 			assertEquals(NO_TRANSACTION, status);
1:8a2da19: 			value.compareAndSet(3, 5);
1:8a2da19: 		});
1:8a2da19: 		
1:f87416c: 		ctx.recordFailure(new Exception());
1:8a2da19: 		
1:f377acd: 		ctx.finish();
1:8a2da19: 		
1:8a2da19: 		assertEquals(5, value.get());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testPostCompletionIsStillCalledAfterPreCompletionException() throws Exception {
1:8a2da19: 		
1:8a2da19: 		AtomicInteger value = new AtomicInteger(0);
1:8a2da19: 		
1:8a2da19: 		ctx.preCompletion(() -> {
1:8a2da19: 				value.compareAndSet(0, 3);
1:8a2da19: 				throw new RuntimeException("Boom!");
1:8a2da19: 			});
1:8a2da19: 		ctx.postCompletion(status -> {
1:8a2da19: 			assertEquals(NO_TRANSACTION, status);
1:8a2da19: 			value.compareAndSet(3, 5);
1:8a2da19: 		});
1:8a2da19: 		
1:f377acd: 		ctx.finish();
1:8a2da19: 		
1:8a2da19: 		assertEquals(5, value.get());
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test(expected=IllegalStateException.class)
1:8a2da19: 	public void testPreCompletionAfterEnd() throws Exception {
1:f87416c: 		ctx.finish();
1:8a2da19: 		ctx.preCompletion(() -> {});
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test(expected=IllegalStateException.class)
1:8a2da19: 	public void testPostCompletionAfterEnd() throws Exception {
1:f87416c: 		ctx.finish();
1:8a2da19: 		ctx.postCompletion(x -> {});
1:8a2da19: 	}
1:8a2da19: 	
1:8a2da19: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: 		ctx.registerXAResource(xaResource, null);
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
1: 		ctx = new NoTransactionContextImpl();
/////////////////////////////////////////////////////////////////////////
1: 		ctx.recordFailure(new Exception());
/////////////////////////////////////////////////////////////////////////
1: 		ctx.recordFailure(new Exception());
/////////////////////////////////////////////////////////////////////////
1: 		ctx.recordFailure(new Exception());
/////////////////////////////////////////////////////////////////////////
1: 		ctx.finish();
1: 		ctx.finish();
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.common.impl;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
0: import org.apache.aries.tx.control.service.common.impl.NoTransactionContextImpl;
commit:f377acd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	AbstractTransactionContextImpl ctx;
/////////////////////////////////////////////////////////////////////////
1: 	public void testPreCompletion() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 		ctx.finish();
/////////////////////////////////////////////////////////////////////////
1: 		ctx.finish();
1: 		
1: 	public void testPostCompletion() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 		ctx.finish();
/////////////////////////////////////////////////////////////////////////
1: 		ctx.finish();
1: 		
1: 	public void testPostCompletionIsAfterPreCompletion() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 		ctx.finish();
/////////////////////////////////////////////////////////////////////////
1: 		ctx.finish();
1: 		
/////////////////////////////////////////////////////////////////////////
1: 		ctx.finish();
commit:8a2da19
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.tx.control.service.local.impl;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertSame;
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: 
0: import java.util.HashMap;
0: import java.util.Map;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.transaction.xa.XAResource;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.mockito.ArgumentCaptor;
1: import org.mockito.Mock;
0: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Participant;
1: import org.osgi.service.transaction.control.LocalResource;
0: import org.osgi.service.transaction.control.TransactionContext;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class NoTransactionContextTest {
1: 
1: 	@Mock
0: 	Coordination coordination;
1: 	@Mock
1: 	XAResource xaResource;
1: 	@Mock
1: 	LocalResource localResource;
1: 	
0: 	Map<Class<?>, Object> variables;
1: 	
0: 	TransactionContext ctx;
1: 	
1: 	@Before
1: 	public void setUp() {
0: 		ctx = new NoTransactionContextImpl(coordination);
0: 		variables = new HashMap<>();
0: 		Mockito.when(coordination.getVariables()).thenReturn(variables);
1: 	}
1: 	
1: 	@Test(expected=IllegalStateException.class)
1: 	public void testGetRollbackOnly() {
1: 		ctx.getRollbackOnly();
1: 	}
1: 
1: 	@Test(expected=IllegalStateException.class)
1: 	public void testSetRollbackOnly() {
1: 		ctx.setRollbackOnly();
1: 	}
1: 
1: 	@Test
1: 	public void testTransactionKey() {
1: 		assertNull(ctx.getTransactionKey());
1: 	}
1: 	
1: 	@Test
1: 	public void testTransactionStatus() {
1: 		assertEquals(NO_TRANSACTION, ctx.getTransactionStatus());
1: 	}
1: 
1: 	@Test
1: 	public void testLocalResourceSupport() {
1: 		assertFalse(ctx.supportsLocal());
1: 	}
1: 
1: 	@Test
1: 	public void testXAResourceSupport() {
1: 		assertFalse(ctx.supportsXA());
1: 	}
1: 
1: 	@Test(expected=IllegalStateException.class)
1: 	public void testLocalResourceRegistration() {
1: 		ctx.registerLocalResource(localResource);
1: 	}
1: 
1: 	@Test(expected=IllegalStateException.class)
1: 	public void testXAResourceRegistration() {
0: 		ctx.registerXAResource(xaResource);
1: 	}
1: 
1: 	@Test
1: 	public void testScopedValues() {
1: 		assertNull(ctx.getScopedValue("foo"));
1: 		
1: 		Object value = new Object();
1: 		
1: 		ctx.putScopedValue("foo", value);
1: 		
1: 		assertSame(value, ctx.getScopedValue("foo"));
1: 	}
1: 	
1: 	@Test
0: 	public void testPreCompletionEnd() throws Exception {
1: 		
1: 		AtomicInteger value = new AtomicInteger(0);
1: 		
1: 		ctx.preCompletion(() -> value.compareAndSet(1, 5));
1: 		
1: 		assertEquals(0, value.getAndSet(1));
1: 		
0: 		Participant participant = getParticipant();
0: 		participant.ended(coordination);
1: 		
1: 		assertEquals(5, value.get());
1: 	}
1: 
1: 	@Test
1: 	public void testPreCompletionFail() throws Exception {
1: 		
1: 		AtomicInteger value = new AtomicInteger(0);
1: 		
1: 		ctx.preCompletion(() -> value.compareAndSet(1, 5));
1: 		
1: 		assertEquals(0, value.getAndSet(1));
1: 		
0: 		Participant participant = getParticipant();
0: 		participant.failed(coordination);
1: 		
1: 		assertEquals(5, value.get());
1: 	}
1: 
1: 	@Test
0: 	public void testPostCompletionEnd() throws Exception {
1: 		
1: 		AtomicInteger value = new AtomicInteger(0);
1: 		
1: 		ctx.postCompletion(status -> {
1: 				assertEquals(NO_TRANSACTION, status);
1: 				value.compareAndSet(1, 5);
1: 			});
1: 		
1: 		assertEquals(0, value.getAndSet(1));
1: 		
0: 		Participant participant = getParticipant();
0: 		participant.ended(coordination);
1: 		
1: 		assertEquals(5, value.get());
1: 	}
1: 
1: 	@Test
1: 	public void testPostCompletionFail() throws Exception {
1: 		
1: 		AtomicInteger value = new AtomicInteger(0);
1: 		
1: 		ctx.postCompletion(status -> {
1: 			assertEquals(NO_TRANSACTION, status);
1: 			value.compareAndSet(1, 5);
1: 		});
1: 		
1: 		assertEquals(0, value.getAndSet(1));
1: 		
0: 		Participant participant = getParticipant();
0: 		participant.failed(coordination);
1: 		
1: 		assertEquals(5, value.get());
1: 	}
1: 
1: 	@Test
0: 	public void testPostCompletionIsAfterPreCompletionEnd() throws Exception {
1: 		
1: 		AtomicInteger value = new AtomicInteger(0);
1: 		
1: 		ctx.preCompletion(() -> value.compareAndSet(0, 3));
1: 		ctx.postCompletion(status -> {
1: 			assertEquals(NO_TRANSACTION, status);
1: 			value.compareAndSet(3, 5);
1: 		});
1: 		
0: 		Participant participant = getParticipant();
0: 		participant.ended(coordination);
1: 		
1: 		assertEquals(5, value.get());
1: 	}
1: 
1: 	@Test
1: 	public void testPostCompletionIsAfterPreCompletionFail() throws Exception {
1: 		
1: 		AtomicInteger value = new AtomicInteger(0);
1: 		
1: 		ctx.preCompletion(() -> value.compareAndSet(0, 3));
1: 		ctx.postCompletion(status -> {
1: 			assertEquals(NO_TRANSACTION, status);
1: 			value.compareAndSet(3, 5);
1: 		});
1: 		
0: 		Participant participant = getParticipant();
0: 		participant.failed(coordination);
1: 		
1: 		assertEquals(5, value.get());
1: 	}
1: 
1: 	@Test
1: 	public void testPostCompletionIsStillCalledAfterPreCompletionException() throws Exception {
1: 		
1: 		AtomicInteger value = new AtomicInteger(0);
1: 		
1: 		ctx.preCompletion(() -> {
1: 				value.compareAndSet(0, 3);
1: 				throw new RuntimeException("Boom!");
1: 			});
1: 		ctx.postCompletion(status -> {
1: 			assertEquals(NO_TRANSACTION, status);
1: 			value.compareAndSet(3, 5);
1: 		});
1: 		
0: 		Participant participant = getParticipant();
0: 		participant.ended(coordination);
1: 		
1: 		assertEquals(5, value.get());
1: 	}
1: 
0: 	private Participant getParticipant() {
0: 		ArgumentCaptor<Participant> captor = ArgumentCaptor.forClass(Participant.class);
0: 		Mockito.verify(coordination).addParticipant(captor.capture());
1: 		
0: 		Participant participant = captor.getValue();
0: 		return participant;
1: 	}
1: 
1: 	@Test(expected=IllegalStateException.class)
1: 	public void testPreCompletionAfterEnd() throws Exception {
1: 		
0: 		Mockito.when(coordination.isTerminated()).thenReturn(true);
1: 		ctx.preCompletion(() -> {});
1: 	}
1: 
1: 	@Test(expected=IllegalStateException.class)
1: 	public void testPostCompletionAfterEnd() throws Exception {
0: 		Mockito.when(coordination.isTerminated()).thenReturn(true);
1: 		ctx.postCompletion(x -> {});
1: 	}
1: 	
1: }
============================================================================