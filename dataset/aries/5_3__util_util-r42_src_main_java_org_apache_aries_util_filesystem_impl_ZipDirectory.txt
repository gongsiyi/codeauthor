1:3c38842: /*
1:3c38842:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c38842:  * or more contributor license agreements.  See the NOTICE file
1:3c38842:  * distributed with this work for additional information
1:3c38842:  * regarding copyright ownership.  The ASF licenses this file
1:3c38842:  * to you under the Apache License, Version 2.0 (the
1:3c38842:  * "License"); you may not use this file except in compliance
1:3c38842:  * with the License.  You may obtain a copy of the License at
3:3c38842:  *
1:3c38842:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3c38842:  *
1:3c38842:  * Unless required by applicable law or agreed to in writing,
1:3c38842:  * software distributed under the License is distributed on an
1:3c38842:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:3c38842:  * KIND, either express or implied.  See the License for the
1:3c38842:  * specific language governing permissions and limitations
1:3c38842:  * under the License.
1:3c38842:  */
30:3c38842: 
1:910fec0: package org.apache.aries.util.filesystem.impl;
1:9c133a0: 
1:3c38842: import java.io.File;
1:72345ab: import java.io.IOException;
1:3c38842: import java.io.InputStream;
1:3c38842: import java.net.MalformedURLException;
1:3c38842: import java.util.ArrayList;
1:f2492f7: import java.util.Collections;
1:3c38842: import java.util.Iterator;
1:3c38842: import java.util.List;
1:3c38842: import java.util.zip.ZipEntry;
1:3c38842: import java.util.zip.ZipFile;
1:72345ab: 
1:8ab18a7: import org.apache.aries.util.IORuntimeException;
1:910fec0: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:9c133a0: 
1:3c38842: /**
1:3c38842:  * A directory in the zip.
1:3c38842:  */
1:3c38842: public class ZipDirectory extends ZipFileImpl implements IDirectory
2:3c38842: {
1:3c38842:   /** The root of the zip FS. */
1:7a2a976:   private final IDirectory root;
1:e62fca9:   private final boolean zipRoot;
1:8ab18a7: 
1:3c38842:   /**
1:3c38842:    * Constructs a directory in the zip.
1:8ab18a7:    *
1:3c38842:    * @param zip1   the zip file.
1:3c38842:    * @param entry1 the entry in the zip representing this dir.
1:3c38842:    * @param parent the parent directory.
1:3c38842:    */
1:72345ab:   public ZipDirectory(File zip1, ZipEntry entry1, ZipDirectory parent, ZipCloseableDirectory cache)
1:3c38842:   {
1:72345ab:     super(zip1, entry1, parent, cache);
1:e62fca9:     zipRoot = false;
1:7a2a976:     root = parent.getRoot();
8:3c38842:   }
1:8ab18a7: 
1:3c38842:   /**
1:3c38842:    * This constructor creates the root of the zip.
1:3c38842:    * @param file
1:3c38842:    * @param fs
1:e62fca9:    * @param parent
1:8ab18a7:    * @throws MalformedURLException
1:3c38842:    */
1:72345ab:   public ZipDirectory(File fs, IDirectory parent) throws MalformedURLException
1:3c38842:   {
1:72345ab:     super(fs, parent);
1:e62fca9:     root = (parent == null) ? this : parent.getRoot();
1:e62fca9:     zipRoot = true;
1:3c38842:   }
1:8ab18a7: 
1:72345ab:   public ZipDirectory(ZipDirectory other, ZipCloseableDirectory cache) {
1:72345ab: 	  super(other, cache);
1:72345ab: 	  root = other.root;
1:72345ab: 	  zipRoot = other.zipRoot;
1:72345ab:   }
1:72345ab: 
1:3c38842:   public IFile getFile(String name)
1:3c38842:   {
1:3c38842:     IFile result = null;
1:8ab18a7: 
1:7a2a976:     String entryName = isZipRoot() ? name : getNameInZip() + "/" + name;
1:8ab18a7: 
1:3c38842:     ZipEntry entryFile = getEntry(entryName);
1:8ab18a7: 
1:3c38842:     if (entryFile != null) {
1:3c38842:       if (!!!entryFile.isDirectory()) {
1:72345ab:         result = new ZipFileImpl(zip, entryFile, buildParent(entryFile), cache);
1:9c133a0:       } else {
1:72345ab:         result = new ZipDirectory(zip, entryFile, buildParent(entryFile), cache);
1:3c38842:       }
1:3c38842:     }
4:3c38842:     return result;
1:3c38842:   }
1:72345ab: 
1:3c38842:   /**
1:3c38842:    * This method builds the parent directory hierarchy for a file.
1:3c38842:    * @param foundEntry
1:3c38842:    * @return the parent of the entry.
1:3c38842:    */
1:3c38842:   private ZipDirectory buildParent(ZipEntry foundEntry)
1:3c38842:   {
1:3c38842:     ZipDirectory result = this;
1:8ab18a7: 
1:3c38842:     String name = foundEntry.getName();
1:8ab18a7: 
1:7a2a976:     name = name.substring(getNameInZip().length());
1:8ab18a7: 
1:3c38842:     String[] paths = name.split("/");
1:8ab18a7: 
1:7a2a976:     StringBuilder baseBuilderCrapThingToGetRoundFindBugs = new StringBuilder(getNameInZip());
1:8ab18a7: 
1:7a2a976:     if (!!!isZipRoot()) baseBuilderCrapThingToGetRoundFindBugs.append('/');
1:8ab18a7:     // Build 'result' as a chain of ZipDirectories. This will only work if java.util.ZipFile recognises every
1:8ab18a7:     // directory in the chain as being a ZipEntry in its own right.
1:3373efd:     outer: if (paths != null && paths.length > 1) {
1:3c38842:       for (int i = 0; i < paths.length - 1; i++) {
1:3c38842:         String path = paths[i];
1:3c38842:         baseBuilderCrapThingToGetRoundFindBugs.append(path);
1:3c38842:         ZipEntry dirEntry = getEntry(baseBuilderCrapThingToGetRoundFindBugs.toString());
1:8ab18a7:         if (dirEntry == null) {
1:3373efd:           result = this;
1:3373efd:           break outer;
1:3373efd:         }
1:72345ab:         result = new ZipDirectory(zip, dirEntry, result, cache);
1:3c38842:         baseBuilderCrapThingToGetRoundFindBugs.append('/');
1:3c38842:       }
1:3c38842:     }
1:3c38842:     return result;
1:3c38842:   }
1:72345ab: 
1:3c38842:   public boolean isRoot()
1:3c38842:   {
1:e62fca9: 	  return getParent() == null;
1:3c38842:   }
1:f2492f7: 
1:3c38842:   public List<IFile> listFiles()
1:3c38842:   {
1:e62fca9: 	  return listFiles(false);
1:3c38842:   }
1:e62fca9: 
1:9c133a0:   public List<IFile> listAllFiles()
1:9c133a0:   {
1:e62fca9: 	  return listFiles(true);
1:9c133a0:   }
1:8ab18a7: 
1:e62fca9:   private List<IFile> listFiles(boolean includeFilesInNestedSubdirs)
1:e62fca9:   {
1:e62fca9: 	  List<IFile> files = new ArrayList<IFile>();
1:e62fca9: 
1:e62fca9: 	  ZipFile z = openZipFile();
1:f2492f7: 	  List<? extends ZipEntry> entries = Collections.list(z.entries());
1:e62fca9: 
1:f2492f7: 	  for (ZipEntry possibleEntry : entries) {
1:7a2a976: 		  if (isInDir(getNameInZip(), possibleEntry, includeFilesInNestedSubdirs)) {
1:e62fca9: 			  ZipDirectory parent = includeFilesInNestedSubdirs ? buildParent(possibleEntry) : this;
1:e62fca9: 			  if (possibleEntry.isDirectory()) {
1:72345ab: 				  files.add(new ZipDirectory(zip, possibleEntry, parent, cache));
1:e62fca9: 			  } else {
1:72345ab: 				  files.add(new ZipFileImpl(zip, possibleEntry, parent, cache));
1:e62fca9: 			  }
1:e62fca9: 		  }
1:e62fca9: 
1:e62fca9: 	  }
1:e62fca9: 
1:e62fca9: 	  closeZipFile(z);
1:8ab18a7: 	  return files;
1:e62fca9:   }
1:8ab18a7: 
1:3c38842:   /**
1:3c38842:    * This method works out if the provided entry is inside this directory. It
1:3c38842:    * returns false if it is not, or if it is in a sub-directory.
1:8ab18a7:    *
1:3c38842:    * @param possibleEntry
1:e62fca9:    * @param whether files in subdirectories are to be included
1:3c38842:    * @return true if it is in this directory.
1:3c38842:    */
1:7a2a976:   protected static boolean isInDir(String parentDir, ZipEntry possibleEntry, boolean allowSubDirs)
1:3c38842:   {
1:3c38842:     boolean result;
1:3c38842:     String name = possibleEntry.getName();
1:3c38842:     if (name.endsWith("/")) name = name.substring(0, name.length() - 1);
1:e62fca9:     result = (name.startsWith(parentDir) && !!!name.equals(parentDir) && (allowSubDirs || name.substring(parentDir.length() + 1).indexOf('/') == -1));
1:3c38842:     return result;
1:9c133a0:   }
1:e62fca9: 
1:3c38842:   public Iterator<IFile> iterator()
1:3c38842:   {
1:e62fca9:     return listFiles().iterator();
1:9c133a0:   }
1:e62fca9: 
1:3c38842:   public IDirectory convert()
1:3c38842:   {
1:3c38842:     return this;
1:3c38842:   }
1:9c133a0: 
1:3c38842:   public boolean isDirectory()
1:3c38842:   {
1:3c38842:     return true;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public boolean isFile()
1:3c38842:   {
1:3c38842:     return false;
1:3c38842:   }
1:3c38842: 
1:8ab18a7:   public InputStream open()
1:3c38842:   {
1:3c38842:     throw new UnsupportedOperationException();
1:3c38842:   }
1:3c38842: 
1:3c38842:   public IDirectory getRoot()
1:3c38842:   {
1:3c38842:     return root;
1:3c38842:   }
1:8ab18a7: 
1:e62fca9:   public boolean isZipRoot() {
1:e62fca9: 	  return zipRoot;
1:e62fca9:   }
1:8ab18a7: 
1:3c38842:   // Although we only delegate to our super class if we removed this Findbugs
1:3c38842:   // would correctly point out that we add fields in this class, but do not
1:3c38842:   // take them into account for the equals method. In fact this is not a problem
1:3c38842:   // we do not care about the root when doing an equality check, but by including
1:3c38842:   // an equals or hashCode in here we can clearly document that we did this
1:3c38842:   // on purpose. Hence this comment.
1:72345ab:   @Override
1:3c38842:   public boolean equals(Object other)
1:3c38842:   {
1:3c38842:     return super.equals(other);
1:3c38842:   }
1:8ab18a7: 
1:e62fca9:   @Override
1:3c38842:   public int hashCode()
1:3c38842:   {
1:3c38842:     return super.hashCode();
1:3c38842:   }
1:8ab18a7: 
1:72345ab:   private ZipEntry getEntry(String entryName) {
1:9c133a0:     ZipFile z = openZipFile();
1:3c38842:     ZipEntry entryFile = null;
1:8ab18a7: 
1:3c38842:     if (z != null) {
1:3c38842:       entryFile = z.getEntry(entryName);
1:9c133a0:       closeZipFile(z);
1:3c38842:     }
1:3c38842:     return entryFile;
1:3c38842:   }
1:3c38842: 
1:72345ab:   public ICloseableDirectory toCloseable() {
1:72345ab: 	  try {
1:72345ab: 		  return new ZipCloseableDirectory(zip, this);
1:72345ab: 	  } catch (IOException e) {
1:8ab18a7: 		  throw new IORuntimeException("IOException opening zip file: " + this, e);
1:72345ab: 	  }
1:72345ab:   }
1:72345ab: }
1:72345ab: 
1:72345ab: 
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:8ab18a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.IORuntimeException;
1: 
1:    *
/////////////////////////////////////////////////////////////////////////
1:    * @throws MalformedURLException
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1:     // Build 'result' as a chain of ZipDirectories. This will only work if java.util.ZipFile recognises every
1:     // directory in the chain as being a ZipEntry in its own right.
1:         if (dirEntry == null) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 	  return files;
1: 
1:    *
/////////////////////////////////////////////////////////////////////////
1:   public InputStream open()
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 		  throw new IORuntimeException("IOException opening zip file: " + this, e);
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:f8e6603
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
/////////////////////////////////////////////////////////////////////////
0:   private static final Logger logger = LoggerFactory.getLogger(ZipDirectory.class.getName());
commit:72345ab
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.aries.application.filesystem.ICloseableDirectory;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:   private static final Logger logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
1: 
/////////////////////////////////////////////////////////////////////////
1:   public ZipDirectory(File zip1, ZipEntry entry1, ZipDirectory parent, ZipCloseableDirectory cache)
1:     super(zip1, entry1, parent, cache);
/////////////////////////////////////////////////////////////////////////
1:   public ZipDirectory(File fs, IDirectory parent) throws MalformedURLException
1:     super(fs, parent);
1:   
1:   public ZipDirectory(ZipDirectory other, ZipCloseableDirectory cache) {
1: 	  super(other, cache);
1: 	  root = other.root;
1: 	  zipRoot = other.zipRoot;
1:   }
/////////////////////////////////////////////////////////////////////////
1:         result = new ZipFileImpl(zip, entryFile, buildParent(entryFile), cache);
1:         result = new ZipDirectory(zip, entryFile, buildParent(entryFile), cache);
/////////////////////////////////////////////////////////////////////////
1:         result = new ZipDirectory(zip, dirEntry, result, cache);
/////////////////////////////////////////////////////////////////////////
1: 				  files.add(new ZipDirectory(zip, possibleEntry, parent, cache));
1: 				  files.add(new ZipFileImpl(zip, possibleEntry, parent, cache));
/////////////////////////////////////////////////////////////////////////
1:   private ZipEntry getEntry(String entryName) {
/////////////////////////////////////////////////////////////////////////
1: 
1:   @Override
1:   public ICloseableDirectory toCloseable() {
1: 	  try {
1: 		  return new ZipCloseableDirectory(zip, this);
1: 	  } catch (IOException e) {
0: 		  logger.error("IOException opening zip file", this);
0: 		  return null;
1: 	  }
1:   }
1: }
1: 
1: 
commit:f2492f7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: 	  List<? extends ZipEntry> entries = Collections.list(z.entries());
1: 	  for (ZipEntry possibleEntry : entries) {
/////////////////////////////////////////////////////////////////////////
1: 	  
commit:7a2a976
/////////////////////////////////////////////////////////////////////////
1:   private final IDirectory root;
/////////////////////////////////////////////////////////////////////////
1:     root = parent.getRoot();
/////////////////////////////////////////////////////////////////////////
1:     String entryName = isZipRoot() ? name : getNameInZip() + "/" + name;
/////////////////////////////////////////////////////////////////////////
1:     name = name.substring(getNameInZip().length());
1:     StringBuilder baseBuilderCrapThingToGetRoundFindBugs = new StringBuilder(getNameInZip());
1:     if (!!!isZipRoot()) baseBuilderCrapThingToGetRoundFindBugs.append('/');
/////////////////////////////////////////////////////////////////////////
1: 		  if (isInDir(getNameInZip(), possibleEntry, includeFilesInNestedSubdirs)) {
/////////////////////////////////////////////////////////////////////////
1:   protected static boolean isInDir(String parentDir, ZipEntry possibleEntry, boolean allowSubDirs)
commit:e62fca9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   private IDirectory root;
1:   private final boolean zipRoot;
/////////////////////////////////////////////////////////////////////////
1:     zipRoot = false;
1:    * @param parent
0:   public ZipDirectory(File file, File fs, IDirectory parent) throws MalformedURLException
0:     super(file, fs, parent);
1:     root = (parent == null) ? this : parent.getRoot();
1:     zipRoot = true;
1:   @Override
0:     String entryName = isZipRoot() ? name : getName() + "/" + name;
/////////////////////////////////////////////////////////////////////////
0:   @Override
1: 	  return getParent() == null;
0:   @Override
1: 	  return listFiles(false);
0:   @Override
1: 	  return listFiles(true);
1:   
1:   private List<IFile> listFiles(boolean includeFilesInNestedSubdirs)
1:   {
1: 	  List<IFile> files = new ArrayList<IFile>();
1: 
1: 	  ZipFile z = openZipFile();
0: 	  Enumeration<? extends ZipEntry> entries = z.entries();
1: 
0: 	  while (entries.hasMoreElements()) {
0: 		  ZipEntry possibleEntry = entries.nextElement();
1: 
0: 		  if (isInDir(possibleEntry, includeFilesInNestedSubdirs)) {
1: 			  ZipDirectory parent = includeFilesInNestedSubdirs ? buildParent(possibleEntry) : this;
1: 			  if (possibleEntry.isDirectory()) {
0: 				  files.add(new ZipDirectory(zip, possibleEntry, parent));
1: 			  } else {
0: 				  files.add(new ZipFileImpl(zip, possibleEntry, parent));
1: 			  }
1: 		  }
1: 
1: 	  }
1: 	  closeZipFile(z);
0: 	  return files;	  
1:   }
1:   
1:    * @param whether files in subdirectories are to be included
0:   private boolean isInDir(ZipEntry possibleEntry, boolean allowSubDirs)
1:     result = (name.startsWith(parentDir) && !!!name.equals(parentDir) && (allowSubDirs || name.substring(parentDir.length() + 1).indexOf('/') == -1));
0:   @Override
1:     return listFiles().iterator();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public boolean isZipRoot() {
1: 	  return zipRoot;
1:   }
1:     
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:3373efd
/////////////////////////////////////////////////////////////////////////
0:     // Build 'result' as a chain of ZipDirectories. This will only work if java.util.ZipFile recognises every 
0:     // directory in the chain as being a ZipEntry in its own right. 
1:     outer: if (paths != null && paths.length > 1) {
0:         if (dirEntry == null) { 
1:           result = this;
1:           break outer;
1:         }
commit:9c133a0
/////////////////////////////////////////////////////////////////////////
1:   public List<IFile> listAllFiles()
1:   {
0:     List<IFile> files = new ArrayList<IFile>();
1: 
1:     ZipFile z = openZipFile();
0:     Enumeration<? extends ZipEntry> entries = z.entries();
1: 
0:     while (entries.hasMoreElements()) {
0:       ZipEntry possibleEntry = entries.nextElement();
0:       if (possibleEntry.isDirectory()) {
0:         files.add(new ZipDirectory(zip, possibleEntry, this));
1:       } else {
0:         files.add(new ZipFileImpl(zip, possibleEntry, this));
1:       }
1:       
1:     }
1:     closeZipFile(z);
0:     return files;
1:   }
commit:4febb9f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem.impl;
commit:3c38842
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.filesystem.utils.impl;
1: 
1: import java.io.File;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.util.ArrayList;
0: import java.util.Enumeration;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipFile;
1: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
1: 
1: /**
1:  * A directory in the zip.
1:  */
1: public class ZipDirectory extends ZipFileImpl implements IDirectory
1: {
1:   /** The root of the zip FS. */
0:   private ZipDirectory root;
1:   
1:   /**
1:    * Constructs a directory in the zip.
1:    * 
1:    * @param zip1   the zip file.
1:    * @param entry1 the entry in the zip representing this dir.
1:    * @param parent the parent directory.
1:    */
0:   public ZipDirectory(File zip1, ZipEntry entry1, ZipDirectory parent)
1:   {
0:     super(zip1, entry1, parent);
1:   }
1: 
1:   /**
1:    * This constructor creates the root of the zip.
1:    * @param file
1:    * @param fs
0:    * @throws MalformedURLException 
1:    */
0:   public ZipDirectory(File file, File fs) throws MalformedURLException
1:   {
0:     super(file, fs);
0:     root = this;
1:   }
1: 
1:   public IFile getFile(String name)
1:   {
1:     IFile result = null;
1:     
0:     String entryName = isRoot() ? name : getName() + "/" + name;
1:     
1:     ZipEntry entryFile = getEntry(entryName);
1:     
1:     if (entryFile != null) {
1:       if (!!!entryFile.isDirectory()) {
0:         result = new ZipFileImpl(zip, entryFile, buildParent(entryFile));
0:       } else {
0:         result = new ZipDirectory(zip, entryFile, buildParent(entryFile));
1:       }
1:     }
1:     return result;
1:   }
1: 
1:   /**
1:    * This method builds the parent directory hierarchy for a file.
1:    * @param foundEntry
1:    * @return the parent of the entry.
1:    */
1:   private ZipDirectory buildParent(ZipEntry foundEntry)
1:   {
1:     ZipDirectory result = this;
1:     
1:     String name = foundEntry.getName();
1:     
0:     name = name.substring(getName().length());
1:     
1:     String[] paths = name.split("/");
1:     
0:     StringBuilder baseBuilderCrapThingToGetRoundFindBugs = new StringBuilder(getName());
1:     
0:     if (!!!isRoot()) baseBuilderCrapThingToGetRoundFindBugs.append('/');
1:     
0:     if (paths != null && paths.length > 1) {
1:       for (int i = 0; i < paths.length - 1; i++) {
1:         String path = paths[i];
1:         baseBuilderCrapThingToGetRoundFindBugs.append(path);
1:         ZipEntry dirEntry = getEntry(baseBuilderCrapThingToGetRoundFindBugs.toString());
0:         result = new ZipDirectory(zip, dirEntry, result);
1:         baseBuilderCrapThingToGetRoundFindBugs.append('/');
1:       }
1:     }
1:     return result;
1:   }
1: 
1:   public boolean isRoot()
1:   {
0:     boolean result = (root == this);
1:     return result;
1:   }
1: 
1:   public List<IFile> listFiles()
1:   {
0:     List<IFile> files = new ArrayList<IFile>();
1:     
0:     ZipFile z = openZipFile();
0:     Enumeration<? extends ZipEntry> entries = z.entries();
1:     
0:     while (entries.hasMoreElements()) {
0:       ZipEntry possibleEntry = entries.nextElement();
1:       
0:       if (isInDir(possibleEntry)) {
0:         if (possibleEntry.isDirectory()) {
0:           files.add(new ZipDirectory(zip, possibleEntry, this));
0:         } else {
0:           files.add(new ZipFileImpl(zip, possibleEntry, this));
1:         }
1:       }
1:     }
0:     closeZipFile(z);
0:     return files;
1:   }
1: 
1:   /**
1:    * This method works out if the provided entry is inside this directory. It
1:    * returns false if it is not, or if it is in a sub-directory.
1:    * 
1:    * @param possibleEntry
1:    * @return true if it is in this directory.
1:    */
0:   private boolean isInDir(ZipEntry possibleEntry)
1:   {
1:     boolean result;
1:     String name = possibleEntry.getName();
0:     String parentDir = getName();
1:     if (name.endsWith("/")) name = name.substring(0, name.length() - 1);
0:     result = (name.startsWith(parentDir) && !!!name.equals(parentDir) && name.substring(parentDir.length() + 1).indexOf('/') == -1);
1:     return result;
1:   }
1: 
1:   public Iterator<IFile> iterator()
1:   {
0:     Iterator<IFile> result = listFiles().iterator();
1:     return result;
1:   }
1: 
0:   @Override
1:   public IDirectory convert()
1:   {
1:     return this;
1:   }
1: 
0:   @Override
0:   public IDirectory getParent()
1:   {
0:     IDirectory result = isRoot() ? null : super.getParent();
1:     return result;
1:   }
1: 
0:   @Override
1:   public boolean isDirectory()
1:   {
1:     return true;
1:   }
1: 
0:   @Override
1:   public boolean isFile()
1:   {
1:     return false;
1:   }
1: 
0:   @Override
0:   public InputStream open() 
1:   {
1:     throw new UnsupportedOperationException();
1:   }
1: 
0:   @Override
1:   public IDirectory getRoot()
1:   {
1:     return root;
1:   }
1:   
1:   // Although we only delegate to our super class if we removed this Findbugs
1:   // would correctly point out that we add fields in this class, but do not
1:   // take them into account for the equals method. In fact this is not a problem
1:   // we do not care about the root when doing an equality check, but by including
1:   // an equals or hashCode in here we can clearly document that we did this
1:   // on purpose. Hence this comment.
0:   @Override
1:   public boolean equals(Object other)
1:   {
1:     return super.equals(other);
1:   }
1:   
0:   @Override
1:   public int hashCode()
1:   {
1:     return super.hashCode();
1:   }
1:   
0:   private ZipEntry getEntry(String entryName){
0:     ZipFile z = openZipFile();
1:     ZipEntry entryFile = null;
1:     
1:     if (z != null) {
1:       entryFile = z.getEntry(entryName);
0:       closeZipFile(z);
1:     }
1:     return entryFile;
1:   }
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.utils.filesystem.impl;
0: 
0: import java.io.File;
0: import java.io.InputStream;
0: import java.net.MalformedURLException;
0: import java.util.ArrayList;
0: import java.util.Enumeration;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipFile;
0: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: 
0: /**
0:  * A directory in the zip.
0:  */
0: public class ZipDirectory extends ZipFileImpl implements IDirectory
0: {
0:   /** The root of the zip FS. */
0:   private ZipDirectory root;
0:   
0:   /**
0:    * Constructs a directory in the zip.
0:    * 
0:    * @param zip1   the zip file.
0:    * @param entry1 the entry in the zip representing this dir.
0:    * @param parent the parent directory.
0:    */
0:   public ZipDirectory(File zip1, ZipEntry entry1, ZipDirectory parent)
0:   {
0:     super(zip1, entry1, parent);
0:   }
0: 
0:   /**
0:    * This constructor creates the root of the zip.
0:    * @param file
0:    * @param fs
0:    * @throws MalformedURLException 
0:    */
0:   public ZipDirectory(File file, File fs) throws MalformedURLException
0:   {
0:     super(file, fs);
0:     root = this;
0:   }
0: 
0:   public IFile getFile(String name)
0:   {
0:     IFile result = null;
0:     
0:     String entryName = isRoot() ? name : getName() + "/" + name;
0:     
0:     ZipEntry entryFile = getEntry(entryName);
0:     
0:     if (entryFile != null) {
0:       if (!!!entryFile.isDirectory()) {
0:         result = new ZipFileImpl(zip, entryFile, buildParent(entryFile));
0:       } else {
0:         result = new ZipDirectory(zip, entryFile, buildParent(entryFile));
0:       }
0:     }
0:     return result;
0:   }
0: 
0:   /**
0:    * This method builds the parent directory hierarchy for a file.
0:    * @param foundEntry
0:    * @return the parent of the entry.
0:    */
0:   private ZipDirectory buildParent(ZipEntry foundEntry)
0:   {
0:     ZipDirectory result = this;
0:     
0:     String name = foundEntry.getName();
0:     
0:     name = name.substring(getName().length());
0:     
0:     String[] paths = name.split("/");
0:     
0:     StringBuilder baseBuilderCrapThingToGetRoundFindBugs = new StringBuilder(getName());
0:     
0:     if (!!!isRoot()) baseBuilderCrapThingToGetRoundFindBugs.append('/');
0:     
0:     if (paths != null && paths.length > 1) {
0:       for (int i = 0; i < paths.length - 1; i++) {
0:         String path = paths[i];
0:         baseBuilderCrapThingToGetRoundFindBugs.append(path);
0:         ZipEntry dirEntry = getEntry(baseBuilderCrapThingToGetRoundFindBugs.toString());
0:         result = new ZipDirectory(zip, dirEntry, result);
0:         baseBuilderCrapThingToGetRoundFindBugs.append('/');
0:       }
0:     }
0:     return result;
0:   }
0: 
0:   public boolean isRoot()
0:   {
0:     boolean result = (root == this);
0:     return result;
0:   }
0: 
0:   public List<IFile> listFiles()
0:   {
0:     List<IFile> files = new ArrayList<IFile>();
0:     
0:     ZipFile z = openZipFile();
0:     Enumeration<? extends ZipEntry> entries = z.entries();
0:     
0:     while (entries.hasMoreElements()) {
0:       ZipEntry possibleEntry = entries.nextElement();
0:       
0:       if (isInDir(possibleEntry)) {
0:         if (possibleEntry.isDirectory()) {
0:           files.add(new ZipDirectory(zip, possibleEntry, this));
0:         } else {
0:           files.add(new ZipFileImpl(zip, possibleEntry, this));
0:         }
0:       }
0:     }
0:     closeZipFile(z);
0:     return files;
0:   }
0: 
0:   /**
0:    * This method works out if the provided entry is inside this directory. It
0:    * returns false if it is not, or if it is in a sub-directory.
0:    * 
0:    * @param possibleEntry
0:    * @return true if it is in this directory.
0:    */
0:   private boolean isInDir(ZipEntry possibleEntry)
0:   {
0:     boolean result;
0:     String name = possibleEntry.getName();
0:     String parentDir = getName();
0:     if (name.endsWith("/")) name = name.substring(0, name.length() - 1);
0:     result = (name.startsWith(parentDir) && !!!name.equals(parentDir) && name.substring(parentDir.length() + 1).indexOf('/') == -1);
0:     return result;
0:   }
0: 
0:   public Iterator<IFile> iterator()
0:   {
0:     Iterator<IFile> result = listFiles().iterator();
0:     return result;
0:   }
0: 
0:   @Override
0:   public IDirectory convert()
0:   {
0:     return this;
0:   }
0: 
0:   @Override
0:   public IDirectory getParent()
0:   {
0:     IDirectory result = isRoot() ? null : super.getParent();
0:     return result;
0:   }
0: 
0:   @Override
0:   public boolean isDirectory()
0:   {
0:     return true;
0:   }
0: 
0:   @Override
0:   public boolean isFile()
0:   {
0:     return false;
0:   }
0: 
0:   @Override
0:   public InputStream open() 
0:   {
0:     throw new UnsupportedOperationException();
0:   }
0: 
0:   @Override
0:   public IDirectory getRoot()
0:   {
0:     return root;
0:   }
0:   
0:   // Although we only delegate to our super class if we removed this Findbugs
0:   // would correctly point out that we add fields in this class, but do not
0:   // take them into account for the equals method. In fact this is not a problem
0:   // we do not care about the root when doing an equality check, but by including
0:   // an equals or hashCode in here we can clearly document that we did this
0:   // on purpose. Hence this comment.
0:   @Override
0:   public boolean equals(Object other)
0:   {
0:     return super.equals(other);
0:   }
0:   
0:   @Override
0:   public int hashCode()
0:   {
0:     return super.hashCode();
0:   }
0:   
0:   private ZipEntry getEntry(String entryName){
0:     ZipFile z = openZipFile();
0:     ZipEntry entryFile = null;
0:     
0:     if (z != null) {
0:       entryFile = z.getEntry(entryName);
0:       closeZipFile(z);
0:     }
0:     return entryFile;
0:   }
============================================================================