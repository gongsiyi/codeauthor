1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.container;
1:f13c6ac: 
1:4a974ed: 
1:f13c6ac: import java.util.Arrays;
1:4a974ed: import java.util.Collections;
1:f13c6ac: import java.util.Dictionary;
1:f13c6ac: import java.util.Hashtable;
1:f13c6ac: import java.util.Map;
1:4a974ed: import java.util.Set;
1:4a974ed: import java.util.concurrent.Callable;
1:f13c6ac: import java.util.concurrent.ConcurrentHashMap;
1:4a974ed: import java.util.concurrent.CopyOnWriteArraySet;
1:4a974ed: import java.util.concurrent.ExecutionException;
1:f13c6ac: import java.util.concurrent.ExecutorService;
1:f13c6ac: import java.util.concurrent.Executors;
1:4a974ed: import java.util.concurrent.RejectedExecutionException;
1:ef7b490: import java.util.concurrent.ScheduledExecutorService;
1:f13c6ac: import java.util.concurrent.TimeUnit;
1:4a974ed: import java.util.concurrent.TimeoutException;
1:f13c6ac: 
1:f13c6ac: import org.osgi.framework.Bundle;
1:f13c6ac: import org.osgi.framework.BundleContext;
1:f13c6ac: import org.osgi.framework.ServiceReference;
1:f13c6ac: import org.osgi.service.blueprint.container.BlueprintEvent;
1:f13c6ac: import org.osgi.service.blueprint.container.BlueprintListener;
1:f13c6ac: import org.osgi.service.blueprint.container.EventConstants;
1:f13c6ac: import org.osgi.service.event.Event;
1:f13c6ac: import org.osgi.service.event.EventAdmin;
1:f13c6ac: import org.osgi.util.tracker.ServiceTracker;
1:f13c6ac: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.utils.JavaUtils;
1:ef7b490: import org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper;
1:ef7b490: import org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper.ScheduledExecutorServiceFactory;
1:f13c6ac: 
1:f13c6ac: /**
1:4a974ed:  * The delivery of {@link BlueprintEvent}s is complicated.  The blueprint extender and its containers use this class to
1:4a974ed:  * deliver {@link BlueprintEvent}s.
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:1d8c3ec: class BlueprintEventDispatcher implements BlueprintListener {
1:4a974ed: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(BlueprintEventDispatcher.class);
1:f13c6ac: 
1:4a974ed:     private final Set<BlueprintListener> listeners = new CopyOnWriteArraySet<BlueprintListener>();
1:4a974ed:     private final Map<Bundle, BlueprintEvent> states = new ConcurrentHashMap<Bundle, BlueprintEvent>();
1:f13c6ac:     private final ExecutorService executor;
1:5cff64a:     private final ExecutorService sharedExecutor;
1:a28e8ff:     private final EventAdminListener eventAdminListener;
1:f13c6ac:     private final ServiceTracker containerListenerTracker;
1:f13c6ac: 
1:5cff64a:     BlueprintEventDispatcher(final BundleContext bundleContext, ExecutorService sharedExecutor) {
1:4a974ed: 
1:4a974ed:         assert bundleContext != null;
1:5cff64a:         assert sharedExecutor != null;
1:ef7b490:         
1:ef7b490:         executor = new ScheduledExecutorServiceWrapper(bundleContext, "Blueprint Event Dispatcher", new ScheduledExecutorServiceFactory() {
1:ef7b490:           
1:ef7b490:           public ScheduledExecutorService create(String name)
1:ef7b490:           {
1:ef7b490:             return Executors.newScheduledThreadPool(1, new BlueprintThreadFactory(name));
1:ef7b490:           }
1:ef7b490:         });
1:5cff64a: 
1:ef7b490: //        executor = Executors.newSingleThreadExecutor(new BlueprintThreadFactory("Blueprint Event Dispatcher"));
1:ef7b490:         
1:5cff64a:         this.sharedExecutor = sharedExecutor;
1:4d7701c: 
1:a28e8ff:         EventAdminListener listener = null;
1:f13c6ac:         try {
1:f13c6ac:             getClass().getClassLoader().loadClass("org.osgi.service.event.EventAdmin");
1:f13c6ac:             listener = new EventAdminListener(bundleContext);
1:f13c6ac:         } catch (Throwable t) {
1:f13c6ac:             // Ignore, if the EventAdmin package is not available, just don't use it
1:4a974ed:             LOGGER.debug("EventAdmin package is not available, just don't use it");
1:f13c6ac:         }
1:f13c6ac:         this.eventAdminListener = listener;
1:4d7701c: 
1:f13c6ac:         this.containerListenerTracker = new ServiceTracker(bundleContext, BlueprintListener.class.getName(), new ServiceTrackerCustomizer() {
1:f13c6ac:             public Object addingService(ServiceReference reference) {
1:f13c6ac:                 BlueprintListener listener = (BlueprintListener) bundleContext.getService(reference);
1:4a974ed: 
1:4a974ed:                 synchronized (listeners) {
1:f13c6ac:                     sendInitialEvents(listener);
1:4a974ed:                     listeners.add(listener);
1:4d7701c:                 }
1:4a974ed: 
1:f13c6ac:                 return listener;
1:f13c6ac:             }
1:4a974ed: 
1:f13c6ac:             public void modifiedService(ServiceReference reference, Object service) {
1:f13c6ac:             }
1:4a974ed: 
1:f13c6ac:             public void removedService(ServiceReference reference, Object service) {
1:4a974ed:                 listeners.remove(service);
1:f13c6ac:                 bundleContext.ungetService(reference);
1:f13c6ac:             }
1:f13c6ac:         });
1:f13c6ac:         this.containerListenerTracker.open();
1:f13c6ac:     }
1:f13c6ac: 
1:4a974ed:     private void sendInitialEvents(BlueprintListener listener) {
1:f13c6ac:         for (Map.Entry<Bundle, BlueprintEvent> entry : states.entrySet()) {
1:4a974ed:             try {
1:4a974ed:                 callListener(listener, new BlueprintEvent(entry.getValue(), true));
1:4a974ed:             } catch (RejectedExecutionException ree) {
1:4a974ed:                 LOGGER.warn("Executor shut down", ree);
1:4a974ed:                 break;
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void blueprintEvent(final BlueprintEvent event) {
1:f13c6ac:         if (LOGGER.isDebugEnabled()) {
1:db4243b:             LOGGER.debug("Sending blueprint container event {} for bundle {}/{}", toString(event), event.getBundle().getSymbolicName(), event.getBundle().getVersion());
1:f13c6ac:         }
1:4a974ed: 
1:4a974ed:         synchronized (listeners) {
1:f13c6ac:             callListeners(event);
1:f13c6ac:             states.put(event.getBundle(), event);
1:4d7701c:         }
1:4a974ed: 
1:f13c6ac:         if (eventAdminListener != null) {
1:4a974ed:             try {
1:5cff64a:                 sharedExecutor.submit(new Runnable() {
1:f13c6ac:                     public void run() {
1:f13c6ac:                         eventAdminListener.blueprintEvent(event);
1:f13c6ac:                     }
1:f13c6ac:                 });
1:4a974ed:             } catch (RejectedExecutionException ree) {
1:4a974ed:                 LOGGER.warn("Executor shut down", ree);
1:f13c6ac:             }
1:f13c6ac:         }
1:4a974ed:     }
1:f13c6ac: 
1:4a974ed:     @SuppressWarnings({"ThrowableResultOfMethodCallIgnored"})
1:4a974ed:     private static String toString(BlueprintEvent event) {
1:f13c6ac:         return "BlueprintEvent[type=" + getEventType(event.getType())
1:f13c6ac:                 + (event.getDependencies() != null ? ", dependencies=" + Arrays.asList(event.getDependencies()) : "")
1:f13c6ac:                 + (event.getCause() != null ? ", exception=" + event.getCause().getMessage() : "")
1:f13c6ac:                 + "]";
1:f13c6ac:     }
1:f13c6ac: 
1:4a974ed:     private static String getEventType(int type) {
1:f13c6ac:         switch (type) {
1:f13c6ac:             case BlueprintEvent.CREATING:
1:f13c6ac:                 return "CREATING";
1:f13c6ac:             case BlueprintEvent.CREATED:
1:f13c6ac:                 return "CREATED";
1:f13c6ac:             case BlueprintEvent.DESTROYING:
1:f13c6ac:                 return "DESTROYING";
1:f13c6ac:             case BlueprintEvent.DESTROYED:
1:f13c6ac:                 return "DESTROYED";
1:f13c6ac:             case BlueprintEvent.FAILURE:
1:f13c6ac:                 return "FAILURE";
1:f13c6ac:             case BlueprintEvent.GRACE_PERIOD:
1:f13c6ac:                 return "GRACE_PERIOD";
1:f13c6ac:             case BlueprintEvent.WAITING:
1:f13c6ac:                 return "WAITING";
1:f13c6ac:             default:
1:f13c6ac:                 return "UNKNOWN";
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private void callListeners(BlueprintEvent event) {
1:4a974ed:         for (final BlueprintListener listener : listeners) {
1:4a974ed:             try {
1:4a974ed:                 callListener(listener, event);
1:4a974ed:             } catch (RejectedExecutionException ree) {
1:4a974ed:                 LOGGER.warn("Executor shut down", ree);
1:4a974ed:                 break;
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:4a974ed:     private void callListener(final BlueprintListener listener, final BlueprintEvent event) throws RejectedExecutionException {
1:4a974ed:         try {
1:4a974ed:             executor.invokeAny(Collections.<Callable<Void>>singleton(new Callable<Void>() {
1:4a974ed:                 public Void call() throws Exception {
1:4a974ed:                     listener.blueprintEvent(event);
1:4a974ed:                     return null;
1:f13c6ac:                 }
1:4a974ed:             }), 60L, TimeUnit.SECONDS);
1:4a974ed:         } catch (InterruptedException ie) {
1:4a974ed:             LOGGER.warn("Thread interrupted", ie);
1:4a974ed:             Thread.currentThread().interrupt();
1:4a974ed:         } catch (TimeoutException te) {
1:4a974ed:             LOGGER.warn("Listener timed out, will be ignored", te);
1:4a974ed:             listeners.remove(listener);
1:4a974ed:         } catch (ExecutionException ee) {
1:4a974ed:             LOGGER.warn("Listener caused an exception, will be ignored", ee);
1:4a974ed:             listeners.remove(listener);
1:4a974ed:         }
1:4a974ed:     }
1:f13c6ac: 
1:4a974ed:     void destroy() {
1:4a974ed:         executor.shutdown();
1:f13c6ac:         // wait for the queued tasks to execute
1:f13c6ac:         try {
1:4a974ed:             executor.awaitTermination(60, TimeUnit.SECONDS);
1:f13c6ac:         } catch (InterruptedException e) {
1:f13c6ac:             // ignore
1:f13c6ac:         }
1:4a974ed:         containerListenerTracker.close();
1:a28e8ff:         // clean up the EventAdmin tracker if we're using that
1:4a974ed:         if (eventAdminListener != null) {
1:a28e8ff:             eventAdminListener.destroy();
1:f13c6ac:         }
1:f13c6ac:     }
1:4a974ed: 
1:1d8c3ec:     public void removeBlueprintBundle(Bundle bundle) {
1:f13c6ac:         states.remove(bundle);
1:f13c6ac:     }
1:f13c6ac: 
1:4a974ed:     private static class EventAdminListener implements BlueprintListener {
1:f13c6ac: 
1:4a974ed:         private final ServiceTracker tracker;
1:f13c6ac: 
1:4a974ed:         EventAdminListener(BundleContext context) {
1:f13c6ac:             tracker = new ServiceTracker(context, EventAdmin.class.getName(), null);
1:f13c6ac:             tracker.open();
1:f13c6ac:         }
1:f13c6ac: 
1:4a974ed:         @SuppressWarnings({"ThrowableResultOfMethodCallIgnored"})
1:f13c6ac:         public void blueprintEvent(BlueprintEvent event) {
1:f13c6ac:             EventAdmin eventAdmin = (EventAdmin) tracker.getService();
1:f13c6ac:             if (eventAdmin == null) {
1:f13c6ac:                 return;
1:f13c6ac:             }
1:f13c6ac: 
1:4a974ed:             Dictionary<String, Object> props = new Hashtable<String, Object>();
1:f13c6ac:             props.put(EventConstants.TYPE, event.getType());
1:f13c6ac:             props.put(EventConstants.EVENT, event);
1:f13c6ac:             props.put(EventConstants.TIMESTAMP, event.getTimestamp());
1:f13c6ac:             props.put(EventConstants.BUNDLE, event.getBundle());
1:f13c6ac:             props.put(EventConstants.BUNDLE_SYMBOLICNAME, event.getBundle().getSymbolicName());
1:f13c6ac:             props.put(EventConstants.BUNDLE_ID, event.getBundle().getBundleId());
1:da5911c:             props.put(EventConstants.BUNDLE_VERSION, JavaUtils.getBundleVersion(event.getBundle()));
1:f13c6ac:             props.put(EventConstants.EXTENDER_BUNDLE, event.getExtenderBundle());
1:f13c6ac:             props.put(EventConstants.EXTENDER_BUNDLE_ID, event.getExtenderBundle().getBundleId());
1:f13c6ac:             props.put(EventConstants.EXTENDER_BUNDLE_SYMBOLICNAME, event.getExtenderBundle().getSymbolicName());
1:da5911c:             props.put(EventConstants.EXTENDER_BUNDLE_VERSION, JavaUtils.getBundleVersion(event.getExtenderBundle()));
1:f13c6ac: 
1:f13c6ac:             if (event.getCause() != null) {
1:f13c6ac:                 props.put(EventConstants.CAUSE, event.getCause());
1:f13c6ac:             }
1:f13c6ac:             if (event.getDependencies() != null) {
1:f13c6ac:                 props.put(EventConstants.DEPENDENCIES, event.getDependencies());
1:f13c6ac:             }
1:f13c6ac:             String topic;
1:f13c6ac:             switch (event.getType()) {
1:f13c6ac:                 case BlueprintEvent.CREATING:
1:f13c6ac:                     topic = EventConstants.TOPIC_CREATING;
1:f13c6ac:                     break;
1:f13c6ac:                 case BlueprintEvent.CREATED:
1:f13c6ac:                     topic = EventConstants.TOPIC_CREATED;
1:f13c6ac:                     break;
1:f13c6ac:                 case BlueprintEvent.DESTROYING:
1:f13c6ac:                     topic = EventConstants.TOPIC_DESTROYING;
1:f13c6ac:                     break;
1:f13c6ac:                 case BlueprintEvent.DESTROYED:
1:f13c6ac:                     topic = EventConstants.TOPIC_DESTROYED;
1:f13c6ac:                     break;
1:f13c6ac:                 case BlueprintEvent.FAILURE:
1:f13c6ac:                     topic = EventConstants.TOPIC_FAILURE;
1:f13c6ac:                     break;
1:f13c6ac:                 case BlueprintEvent.GRACE_PERIOD:
1:f13c6ac:                     topic = EventConstants.TOPIC_GRACE_PERIOD;
1:f13c6ac:                     break;
1:f13c6ac:                 case BlueprintEvent.WAITING:
1:f13c6ac:                     topic = EventConstants.TOPIC_WAITING;
1:f13c6ac:                     break;
1:f13c6ac:                 default:
1:f13c6ac:                     throw new IllegalStateException("Unknown blueprint event type: " + event.getType());
1:f13c6ac:             }
1:f13c6ac:             eventAdmin.postEvent(new Event(topic, props));
1:f13c6ac:         }
1:4a974ed: 
1:a28e8ff:         /**
1:a28e8ff:          * Perform cleanup at Blueprint extender shutdown.
1:a28e8ff:          */
1:f13c6ac:         public void destroy() {
1:a28e8ff:             tracker.close();
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:     }
1:f13c6ac: 
1:4a974ed: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:db4243b
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.debug("Sending blueprint container event {} for bundle {}/{}", toString(event), event.getBundle().getSymbolicName(), event.getBundle().getVersion());
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.container;
1: 
1: import java.util.Arrays;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
0: import org.apache.geronimo.blueprint.utils.JavaUtils;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
0: import org.osgi.framework.Version;
1: import org.osgi.service.blueprint.container.BlueprintEvent;
1: import org.osgi.service.blueprint.container.BlueprintListener;
1: import org.osgi.service.blueprint.container.EventConstants;
1: import org.osgi.service.event.Event;
1: import org.osgi.service.event.EventAdmin;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * TODO: javadoc
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 760378 $, $Date: 2009-03-31 11:31:38 +0200 (Tue, 31 Mar 2009) $
1:  */
0: public class BlueprintEventDispatcher implements BlueprintListener {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(BlueprintEventDispatcher.class);
1: 
0:     private final BlueprintListener eventAdminListener;
1:     private final ServiceTracker containerListenerTracker;
0:     private final Map<Bundle, BlueprintEvent> states;
1:     private final ExecutorService executor;
1: 
0:     public BlueprintEventDispatcher(final BundleContext bundleContext) {
0:         this.states = new ConcurrentHashMap<Bundle, BlueprintEvent>();
0:         this.executor = Executors.newSingleThreadExecutor();
0:         BlueprintListener listener = null;
1:         try {
1:             getClass().getClassLoader().loadClass("org.osgi.service.event.EventAdmin");
1:             listener = new EventAdminListener(bundleContext);
1:         } catch (Throwable t) {
1:             // Ignore, if the EventAdmin package is not available, just don't use it
1:         }
1:         this.eventAdminListener = listener;
1:         this.containerListenerTracker = new ServiceTracker(bundleContext, BlueprintListener.class.getName(), new ServiceTrackerCustomizer() {
1:             public Object addingService(ServiceReference reference) {
1:                 BlueprintListener listener = (BlueprintListener) bundleContext.getService(reference);
1:                 sendInitialEvents(listener);
1:                 return listener;
1:             }
1:             public void modifiedService(ServiceReference reference, Object service) {
1:             }
1:             public void removedService(ServiceReference reference, Object service) {
1:                 bundleContext.ungetService(reference);
1:             }
1:         });
1:         this.containerListenerTracker.open();
1:     }
1: 
0:     protected void sendInitialEvents(BlueprintListener listener) {
0:         if (states != null) {
1:             for (Map.Entry<Bundle, BlueprintEvent> entry : states.entrySet()) {
0:                 listener.blueprintEvent(new BlueprintEvent(entry.getValue(), true));
1:             }
1:         }
1:     }
1: 
1:     public void blueprintEvent(final BlueprintEvent event) {
1:         if (LOGGER.isDebugEnabled()) {
0:             LOGGER.debug("Sending blueprint container event {} for bundle {}", toString(event), event.getBundle().getSymbolicName());
1:         }
1:         states.put(event.getBundle(), event);
0:         executor.submit(new Runnable() {
1:             public void run() {
1:                 callListeners(event);
1:                 if (eventAdminListener != null) {
1:                     eventAdminListener.blueprintEvent(event);
1:                 }
1:             }
1:         });
1:     }
1: 
0:     private String toString(BlueprintEvent event) {
1:         return "BlueprintEvent[type=" + getEventType(event.getType())
1:                         + (event.getDependencies() != null ? ", dependencies=" + Arrays.asList(event.getDependencies()) : "")
1:                         + (event.getCause() != null ? ", exception=" + event.getCause().getMessage() : "")
1:                         + "]";
1:     }
1: 
0:     private String getEventType(int type) {
1:         switch (type) {
1:             case BlueprintEvent.CREATING:
1:                 return "CREATING";
1:             case BlueprintEvent.CREATED:
1:                 return "CREATED";
1:             case BlueprintEvent.DESTROYING:
1:                 return "DESTROYING";
1:             case BlueprintEvent.DESTROYED:
1:                 return "DESTROYED";
1:             case BlueprintEvent.FAILURE:
1:                 return "FAILURE";
1:             case BlueprintEvent.GRACE_PERIOD:
1:                 return "GRACE_PERIOD";
1:             case BlueprintEvent.WAITING:
1:                 return "WAITING";
1:             default:
1:                 return "UNKNOWN";
1:         }
1:     }
1: 
1:     private void callListeners(BlueprintEvent event) {
0:         Object[] listeners = containerListenerTracker.getServices();
0:         if (listeners != null) {
0:             for (Object listener : listeners) {
0:                 ((BlueprintListener) listener).blueprintEvent(event);
1:             }
1:         }
1:     }
1:     
0:     protected void contextDestroyed(Bundle bundle) {
1:         states.remove(bundle);
1:     }
1:     
1:     public void destroy() {
0:         this.executor.shutdown();
1:         // wait for the queued tasks to execute        
1:         try {
0:             this.executor.awaitTermination(60, TimeUnit.SECONDS);
1:         } catch (InterruptedException e) {
1:             // ignore
1:         }
0:         this.containerListenerTracker.close();
1:     }
1: 
0:     static class EventAdminListener implements BlueprintListener {
1: 
0:         private ServiceTracker tracker;
1: 
0:         public EventAdminListener(BundleContext context) {
1:             tracker = new ServiceTracker(context, EventAdmin.class.getName(), null);
1:             tracker.open();
1:         }
1: 
1:         public void blueprintEvent(BlueprintEvent event) {
1:             EventAdmin eventAdmin = (EventAdmin) tracker.getService();
1:             if (eventAdmin == null) {
1:                 return;
1:             }
1: 
0:             Dictionary<String,Object> props = new Hashtable<String,Object>();
1:             props.put(EventConstants.TYPE, event.getType());
1:             props.put(EventConstants.EVENT, event);
1:             props.put(EventConstants.TIMESTAMP, event.getTimestamp());
1:             props.put(EventConstants.BUNDLE, event.getBundle());
1:             props.put(EventConstants.BUNDLE_SYMBOLICNAME, event.getBundle().getSymbolicName());
1:             props.put(EventConstants.BUNDLE_ID, event.getBundle().getBundleId());
0:             Version version = JavaUtils.getBundleVersion(event.getBundle());
0:             if (version != null) {
0:                 props.put(EventConstants.BUNDLE_VERSION, version);
1:             }
1:             props.put(EventConstants.EXTENDER_BUNDLE, event.getExtenderBundle());
1:             props.put(EventConstants.EXTENDER_BUNDLE_ID, event.getExtenderBundle().getBundleId());
1:             props.put(EventConstants.EXTENDER_BUNDLE_SYMBOLICNAME, event.getExtenderBundle().getSymbolicName());
0:             version = JavaUtils.getBundleVersion(event.getExtenderBundle());
0:             if (version != null) {
0:                 props.put(EventConstants.EXTENDER_BUNDLE_VERSION, version);
1:             }
1: 
1:             if (event.getCause() != null) {
1:                 props.put(EventConstants.CAUSE, event.getCause());
1:             }
1:             if (event.getDependencies() != null) {
1:                 props.put(EventConstants.DEPENDENCIES, event.getDependencies());
1:             }
1:             String topic;
1:             switch (event.getType()) {
1:                 case BlueprintEvent.CREATING:
1:                     topic = EventConstants.TOPIC_CREATING;
1:                     break;
1:                 case BlueprintEvent.CREATED:
1:                     topic = EventConstants.TOPIC_CREATED;
1:                     break;
1:                 case BlueprintEvent.DESTROYING:
1:                     topic = EventConstants.TOPIC_DESTROYING;
1:                     break;
1:                 case BlueprintEvent.DESTROYED:
1:                     topic = EventConstants.TOPIC_DESTROYED;
1:                     break;
1:                 case BlueprintEvent.FAILURE:
1:                     topic = EventConstants.TOPIC_FAILURE;
1:                     break;
1:                 case BlueprintEvent.GRACE_PERIOD:
1:                     topic = EventConstants.TOPIC_GRACE_PERIOD;
1:                     break;
1:                 case BlueprintEvent.WAITING:
1:                     topic = EventConstants.TOPIC_WAITING;
1:                     break;
1:                 default:
1:                     throw new IllegalStateException("Unknown blueprint event type: " + event.getType());
1:             }
1:             eventAdmin.postEvent(new Event(topic, props));
1:         }
1: 
1:     }
1: 
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ef7b490
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ScheduledExecutorService;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper;
1: import org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper.ScheduledExecutorServiceFactory;
/////////////////////////////////////////////////////////////////////////
0:     private final ExecutorService executor;
/////////////////////////////////////////////////////////////////////////
1:         
1:         executor = new ScheduledExecutorServiceWrapper(bundleContext, "Blueprint Event Dispatcher", new ScheduledExecutorServiceFactory() {
1:           
1:           public ScheduledExecutorService create(String name)
1:           {
1:             return Executors.newScheduledThreadPool(1, new BlueprintThreadFactory(name));
1:           }
1:         });
1: //        executor = Executors.newSingleThreadExecutor(new BlueprintThreadFactory("Blueprint Event Dispatcher"));
1:         
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:1d8c3ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: class BlueprintEventDispatcher implements BlueprintListener {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void removeBlueprintBundle(Bundle bundle) {
0:         states.remove(bundle);
commit:48dd690
/////////////////////////////////////////////////////////////////////////
0:     private final ExecutorService executor = Executors.newSingleThreadExecutor(new BlueprintThreadFactory("Blueprint Event Dispatcher"));
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.container;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.utils.JavaUtils;
author:Alan Cabrera
-------------------------------------------------------------------------------
commit:5cff64a
/////////////////////////////////////////////////////////////////////////
1:     private final ExecutorService sharedExecutor;
1:     BlueprintEventDispatcher(final BundleContext bundleContext, ExecutorService sharedExecutor) {
1:         assert sharedExecutor != null;
1: 
1:         this.sharedExecutor = sharedExecutor;
/////////////////////////////////////////////////////////////////////////
1:                 sharedExecutor.submit(new Runnable() {
commit:4d7701c
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.BundleEvent;
0: import org.osgi.framework.SynchronousBundleListener;
/////////////////////////////////////////////////////////////////////////
0: class BlueprintEventDispatcher implements BlueprintListener, SynchronousBundleListener {
/////////////////////////////////////////////////////////////////////////
0:         bundleContext.addBundleListener(this);
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void bundleChanged(BundleEvent event) {
0:         if (BundleEvent.STOPPING == event.getType()) {
0:             states.remove(event.getBundle());
1:         }
1:     }
1: 
commit:4a974ed
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.util.Collections;
1: import java.util.Set;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.CopyOnWriteArraySet;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.RejectedExecutionException;
1: import java.util.concurrent.TimeoutException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.utils.JavaUtils;
1: 
1:  * The delivery of {@link BlueprintEvent}s is complicated.  The blueprint extender and its containers use this class to
1:  * deliver {@link BlueprintEvent}s.
0: class BlueprintEventDispatcher implements BlueprintListener {
1:     private final Set<BlueprintListener> listeners = new CopyOnWriteArraySet<BlueprintListener>();
1:     private final Map<Bundle, BlueprintEvent> states = new ConcurrentHashMap<Bundle, BlueprintEvent>();
0:     private final ExecutorService executor = Executors.newSingleThreadExecutor();
0:     BlueprintEventDispatcher(final BundleContext bundleContext) {
1: 
1:         assert bundleContext != null;
1: 
1:             LOGGER.debug("EventAdmin package is not available, just don't use it");
1: 
1: 
1:                 synchronized (listeners) {
0:                     sendInitialEvents(listener);
1:                     listeners.add(listener);
1:                 }
1: 
1: 
1: 
1:                 listeners.remove(service);
1:     private void sendInitialEvents(BlueprintListener listener) {
0:         for (Map.Entry<Bundle, BlueprintEvent> entry : states.entrySet()) {
1:             try {
1:                 callListener(listener, new BlueprintEvent(entry.getValue(), true));
1:             } catch (RejectedExecutionException ree) {
1:                 LOGGER.warn("Executor shut down", ree);
1:                 break;
/////////////////////////////////////////////////////////////////////////
1: 
1:         synchronized (listeners) {
0:             callListeners(event);
0:             states.put(event.getBundle(), event);
1:         }
1: 
1:         if (eventAdminListener != null) {
1:             try {
0:                 executor.submit(new Runnable() {
0:                     public void run() {
0:                         eventAdminListener.blueprintEvent(event);
1:                     }
0:                 });
1:             } catch (RejectedExecutionException ree) {
1:                 LOGGER.warn("Executor shut down", ree);
1:         }
1:     @SuppressWarnings({"ThrowableResultOfMethodCallIgnored"})
1:     private static String toString(BlueprintEvent event) {
0:                 + (event.getDependencies() != null ? ", dependencies=" + Arrays.asList(event.getDependencies()) : "")
0:                 + (event.getCause() != null ? ", exception=" + event.getCause().getMessage() : "")
0:                 + "]";
1:     private static String getEventType(int type) {
/////////////////////////////////////////////////////////////////////////
1:         for (final BlueprintListener listener : listeners) {
1:             try {
1:                 callListener(listener, event);
1:             } catch (RejectedExecutionException ree) {
1:                 LOGGER.warn("Executor shut down", ree);
1:                 break;
1:     private void callListener(final BlueprintListener listener, final BlueprintEvent event) throws RejectedExecutionException {
1:         try {
1:             executor.invokeAny(Collections.<Callable<Void>>singleton(new Callable<Void>() {
1:                 public Void call() throws Exception {
1:                     listener.blueprintEvent(event);
1:                     return null;
0:                 }
1:             }), 60L, TimeUnit.SECONDS);
1:         } catch (InterruptedException ie) {
1:             LOGGER.warn("Thread interrupted", ie);
1:             Thread.currentThread().interrupt();
1:         } catch (TimeoutException te) {
1:             LOGGER.warn("Listener timed out, will be ignored", te);
1:             listeners.remove(listener);
1:         } catch (ExecutionException ee) {
1:             LOGGER.warn("Listener caused an exception, will be ignored", ee);
1:             listeners.remove(listener);
0:         }
0:     }
0: 
0:     void contextDestroyed(Bundle bundle) {
1:     void destroy() {
1:         executor.shutdown();
1:             executor.awaitTermination(60, TimeUnit.SECONDS);
1:         containerListenerTracker.close();
0:         if (eventAdminListener != null) {
1:     private static class EventAdminListener implements BlueprintListener {
1:         private final ServiceTracker tracker;
1:         EventAdminListener(BundleContext context) {
1:         @SuppressWarnings({"ThrowableResultOfMethodCallIgnored"})
1:             Dictionary<String, Object> props = new Hashtable<String, Object>();
author:Richard McGuire
-------------------------------------------------------------------------------
commit:a28e8ff
/////////////////////////////////////////////////////////////////////////
1:     private final EventAdminListener eventAdminListener;
/////////////////////////////////////////////////////////////////////////
1:         EventAdminListener listener = null;
/////////////////////////////////////////////////////////////////////////
1:         // clean up the EventAdmin tracker if we're using that
0:         if (this.eventAdminListener != null) {
1:             eventAdminListener.destroy();
0:         }
/////////////////////////////////////////////////////////////////////////
1:         /**
1:          * Perform cleanup at Blueprint extender shutdown.
1:          */
0:         public void destroy() {
1:             tracker.close();
0:         }
0: 
commit:d163494
/////////////////////////////////////////////////////////////////////////
0:                 try {
0:                     ((BlueprintListener) listener).blueprintEvent(event);
0:                 } catch (Throwable e) {
0:                     // an exception in a BlueprintListener should not terminate the
0:                     // dispatch chain to other listeners
0:                 }
commit:da5911c
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:         // wait for the queued tasks to execute
/////////////////////////////////////////////////////////////////////////
1:             props.put(EventConstants.BUNDLE_VERSION, JavaUtils.getBundleVersion(event.getBundle()));
1:             props.put(EventConstants.EXTENDER_BUNDLE_VERSION, JavaUtils.getBundleVersion(event.getExtenderBundle()));
============================================================================