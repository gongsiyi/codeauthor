1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.util.shared;
1:fdf3952: 
1:fdf3952: import javax.management.ListenerNotFoundException;
1:fdf3952: import javax.management.MBeanInfo;
1:fdf3952: import javax.management.MBeanNotificationInfo;
1:fdf3952: import javax.management.MBeanRegistration;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.NotCompliantMBeanException;
1:fdf3952: import javax.management.NotificationEmitter;
1:fdf3952: import javax.management.NotificationFilter;
1:fdf3952: import javax.management.NotificationListener;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.StandardMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * The <code>StandardMBean</code> does not appear to delegate correctly to the underlying MBean implementation. Due to
1:fdf3952:  * issues surrounding the <code>MBeanRegistration</code> callback methods and <code>NotificationEmmitter</code> methods,
1:fdf3952:  * this subclass was introduced to force the delegation
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class RegistrableStandardEmitterMBean extends StandardMBean implements MBeanRegistration, NotificationEmitter {
1:fdf3952: 
1:fdf3952:     public <T> RegistrableStandardEmitterMBean(T impl, Class<T> intf) throws NotCompliantMBeanException {
1:fdf3952:         super(impl, intf);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.StandardMBean#getMBeanInfo()
1:fdf3952:      */
1:fdf3952:     public MBeanInfo getMBeanInfo() {
1:fdf3952:         MBeanInfo mbeanInfo = super.getMBeanInfo();
1:fdf3952:         if (mbeanInfo != null) {
1:fdf3952:             MBeanNotificationInfo[] notificationInfo;
1:fdf3952:             Object impl = getImplementation();
1:fdf3952:             if (impl instanceof NotificationEmitter) {
1:fdf3952:                 notificationInfo = ((NotificationEmitter) (impl)).getNotificationInfo();
1:fdf3952:             } else {
1:fdf3952:                 notificationInfo = new MBeanNotificationInfo[0];
1:fdf3952:             }
1:fdf3952:             mbeanInfo = new MBeanInfo(mbeanInfo.getClassName(), mbeanInfo.getDescription(), mbeanInfo.getAttributes(),
1:fdf3952:                     mbeanInfo.getConstructors(), mbeanInfo.getOperations(), notificationInfo);
1:fdf3952:         }
1:fdf3952:         return mbeanInfo;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.MBeanRegistration#postDeregister()
1:fdf3952:      */
1:fdf3952:     public void postDeregister() {
1:fdf3952:         Object impl = getImplementation();
1:fdf3952:         if (impl instanceof MBeanRegistration) {
1:fdf3952:             ((MBeanRegistration) impl).postDeregister();
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.MBeanRegistration#postRegister(java.lang.Boolean)
1:fdf3952:      */
1:fdf3952:     public void postRegister(Boolean registrationDone) {
1:fdf3952:         Object impl = getImplementation();
1:fdf3952:         if (impl instanceof MBeanRegistration) {
1:fdf3952:             ((MBeanRegistration) impl).postRegister(registrationDone);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.MBeanRegistration#preDeregister()
1:fdf3952:      */
1:fdf3952:     public void preDeregister() throws Exception {
1:fdf3952:         Object impl = getImplementation();
1:fdf3952:         if (impl instanceof MBeanRegistration) {
1:fdf3952:             ((MBeanRegistration) impl).preDeregister();
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.MBeanRegistration#preRegister(javax.management.MBeanServer, javax.management.ObjectName)
1:fdf3952:      */
1:fdf3952:     public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {
1:fdf3952:         ObjectName result = name;
1:fdf3952:         Object impl = getImplementation();
1:fdf3952:         if (impl instanceof MBeanRegistration) {
1:fdf3952:             result = ((MBeanRegistration) impl).preRegister(server, name);
1:fdf3952:         }
1:fdf3952:         return result;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener,
1:fdf3952:      *      javax.management.NotificationFilter, java.lang.Object)
1:fdf3952:      */
1:fdf3952:     public void removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)
1:fdf3952:             throws ListenerNotFoundException {
1:fdf3952:         Object impl = getImplementation();
1:fdf3952:         if (impl instanceof NotificationEmitter) {
1:fdf3952:             ((NotificationEmitter) (impl)).removeNotificationListener(listener, filter, handback);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener,
1:fdf3952:      *      javax.management.NotificationFilter, java.lang.Object)
1:fdf3952:      */
1:fdf3952:     public void addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)
1:fdf3952:             throws IllegalArgumentException {
1:fdf3952:         Object impl = getImplementation();
1:fdf3952:         if (impl instanceof NotificationEmitter) {
1:fdf3952:             ((NotificationEmitter) (impl)).addNotificationListener(listener, filter, handback);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.NotificationBroadcaster#getNotificationInfo()
1:fdf3952:      */
1:fdf3952:     public MBeanNotificationInfo[] getNotificationInfo() {
1:fdf3952:         MBeanNotificationInfo[] result;
1:fdf3952:         Object impl = getImplementation();
1:fdf3952:         if (impl instanceof NotificationEmitter) {
1:fdf3952:             result = ((NotificationEmitter) (impl)).getNotificationInfo();
1:fdf3952:         } else {
1:fdf3952:             result = new MBeanNotificationInfo[0];
1:fdf3952:         }
1:fdf3952:         return result;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
1:fdf3952:      */
1:fdf3952:     public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {
1:fdf3952:         Object impl = getImplementation();
1:fdf3952:         if (impl instanceof NotificationEmitter) {
1:fdf3952:             ((NotificationEmitter) (impl)).removeNotificationListener(listener);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.util.shared;
1: 
1: import javax.management.ListenerNotFoundException;
1: import javax.management.MBeanInfo;
1: import javax.management.MBeanNotificationInfo;
1: import javax.management.MBeanRegistration;
1: import javax.management.MBeanServer;
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.NotificationEmitter;
1: import javax.management.NotificationFilter;
1: import javax.management.NotificationListener;
1: import javax.management.ObjectName;
1: import javax.management.StandardMBean;
1: 
1: /**
1:  * The <code>StandardMBean</code> does not appear to delegate correctly to the underlying MBean implementation. Due to
1:  * issues surrounding the <code>MBeanRegistration</code> callback methods and <code>NotificationEmmitter</code> methods,
1:  * this subclass was introduced to force the delegation
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class RegistrableStandardEmitterMBean extends StandardMBean implements MBeanRegistration, NotificationEmitter {
1: 
1:     public <T> RegistrableStandardEmitterMBean(T impl, Class<T> intf) throws NotCompliantMBeanException {
1:         super(impl, intf);
1:     }
1: 
1:     /**
1:      * @see javax.management.StandardMBean#getMBeanInfo()
1:      */
1:     public MBeanInfo getMBeanInfo() {
1:         MBeanInfo mbeanInfo = super.getMBeanInfo();
1:         if (mbeanInfo != null) {
1:             MBeanNotificationInfo[] notificationInfo;
1:             Object impl = getImplementation();
1:             if (impl instanceof NotificationEmitter) {
1:                 notificationInfo = ((NotificationEmitter) (impl)).getNotificationInfo();
1:             } else {
1:                 notificationInfo = new MBeanNotificationInfo[0];
1:             }
1:             mbeanInfo = new MBeanInfo(mbeanInfo.getClassName(), mbeanInfo.getDescription(), mbeanInfo.getAttributes(),
1:                     mbeanInfo.getConstructors(), mbeanInfo.getOperations(), notificationInfo);
1:         }
1:         return mbeanInfo;
1:     }
1: 
1:     /**
1:      * @see javax.management.MBeanRegistration#postDeregister()
1:      */
1:     public void postDeregister() {
1:         Object impl = getImplementation();
1:         if (impl instanceof MBeanRegistration) {
1:             ((MBeanRegistration) impl).postDeregister();
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.management.MBeanRegistration#postRegister(java.lang.Boolean)
1:      */
1:     public void postRegister(Boolean registrationDone) {
1:         Object impl = getImplementation();
1:         if (impl instanceof MBeanRegistration) {
1:             ((MBeanRegistration) impl).postRegister(registrationDone);
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.management.MBeanRegistration#preDeregister()
1:      */
1:     public void preDeregister() throws Exception {
1:         Object impl = getImplementation();
1:         if (impl instanceof MBeanRegistration) {
1:             ((MBeanRegistration) impl).preDeregister();
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.management.MBeanRegistration#preRegister(javax.management.MBeanServer, javax.management.ObjectName)
1:      */
1:     public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {
1:         ObjectName result = name;
1:         Object impl = getImplementation();
1:         if (impl instanceof MBeanRegistration) {
1:             result = ((MBeanRegistration) impl).preRegister(server, name);
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener,
1:      *      javax.management.NotificationFilter, java.lang.Object)
1:      */
1:     public void removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)
1:             throws ListenerNotFoundException {
1:         Object impl = getImplementation();
1:         if (impl instanceof NotificationEmitter) {
1:             ((NotificationEmitter) (impl)).removeNotificationListener(listener, filter, handback);
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener,
1:      *      javax.management.NotificationFilter, java.lang.Object)
1:      */
1:     public void addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)
1:             throws IllegalArgumentException {
1:         Object impl = getImplementation();
1:         if (impl instanceof NotificationEmitter) {
1:             ((NotificationEmitter) (impl)).addNotificationListener(listener, filter, handback);
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.management.NotificationBroadcaster#getNotificationInfo()
1:      */
1:     public MBeanNotificationInfo[] getNotificationInfo() {
1:         MBeanNotificationInfo[] result;
1:         Object impl = getImplementation();
1:         if (impl instanceof NotificationEmitter) {
1:             result = ((NotificationEmitter) (impl)).getNotificationInfo();
1:         } else {
1:             result = new MBeanNotificationInfo[0];
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
1:      */
1:     public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {
1:         Object impl = getImplementation();
1:         if (impl instanceof NotificationEmitter) {
1:             ((NotificationEmitter) (impl)).removeNotificationListener(listener);
1:         }
1:     }
1: 
1: }
============================================================================