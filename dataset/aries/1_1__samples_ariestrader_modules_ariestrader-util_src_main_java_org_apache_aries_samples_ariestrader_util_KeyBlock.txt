1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.util;
1:628add4: 
1:628add4: import java.util.AbstractSequentialList;
1:628add4: import java.util.ListIterator;
1:628add4: public class KeyBlock extends AbstractSequentialList 
1:628add4: {
1:628add4: 
1:628add4: 	// min and max provide range of valid primary keys for this KeyBlock
1:628add4: 	private int min = 0;
1:628add4: 	private int max = 0;
1:628add4: 	private int index = 0;
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Constructor for KeyBlock
1:628add4: 	 */
1:628add4: 	public KeyBlock() {
1:628add4: 		super();
1:628add4: 		min = 0;
1:628add4: 		max = 0;
1:628add4: 		index = min;
1:628add4: 	}
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Constructor for KeyBlock 
1:628add4: 	 */
1:628add4: 	public KeyBlock(int min, int max) {
1:628add4: 		super();
1:628add4: 		this.min = min;
1:628add4: 		this.max = max;
1:628add4: 		index = min;
1:628add4: 	}
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * @see AbstractCollection#size()
1:628add4: 	 */
1:628add4: 	public int size() {
1:628add4: 		return (max - min) + 1;
1:628add4: 	}
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * @see AbstractSequentialList#listIterator(int)
1:628add4: 	 */
1:628add4: 	public ListIterator listIterator(int arg0) {
1:628add4: 		return new KeyBlockIterator();
1:628add4: 	}
1:628add4: 
1:628add4: 	class KeyBlockIterator implements ListIterator {
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#hasNext()
1:628add4: 		 */
1:628add4: 		public boolean hasNext() {
1:628add4: 			return index <= max;
1:628add4: 		}
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#next()
1:628add4: 		 */
1:628add4: 		public synchronized Object next() {
1:628add4: 			if (index > max)
1:628add4: 				throw new java.lang.RuntimeException("KeyBlock:next() -- Error KeyBlock depleted");
1:628add4: 			return new Integer(index++);
1:628add4: 		}
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#hasPrevious()
1:628add4: 		 */
1:628add4: 		public boolean hasPrevious() {
1:628add4: 			return index > min;
1:628add4: 		}
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#previous()
1:628add4: 		 */
1:628add4: 		public Object previous() {
1:628add4: 			return new Integer(--index);
1:628add4: 		}
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#nextIndex()
1:628add4: 		 */
1:628add4: 		public int nextIndex() {
1:628add4: 			return index-min;
1:628add4: 		}
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#previousIndex()
1:628add4: 		 */
1:628add4: 		public int previousIndex() {
1:628add4: 			throw new UnsupportedOperationException("KeyBlock: previousIndex() not supported");
1:628add4: 		}
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#add()
1:628add4: 		 */
1:628add4: 		public void add(Object o) {
1:628add4: 			throw new UnsupportedOperationException("KeyBlock: add() not supported");
1:628add4: 		}
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#remove()
1:628add4: 		 */
1:628add4: 		public void remove() {
1:628add4: 			throw new UnsupportedOperationException("KeyBlock: remove() not supported");
1:628add4: 		}
1:628add4: 
1:628add4: 		/**
1:628add4: 		 * @see ListIterator#set(Object)
1:628add4: 		 */
1:628add4: 		public void set(Object arg0) {
1:628add4: 		}
1:628add4: 	}
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.util;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.util;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.util;
1: 
1: import java.util.AbstractSequentialList;
1: import java.util.ListIterator;
1: public class KeyBlock extends AbstractSequentialList 
1: {
1: 
1: 	// min and max provide range of valid primary keys for this KeyBlock
1: 	private int min = 0;
1: 	private int max = 0;
1: 	private int index = 0;
1: 
1: 	/**
1: 	 * Constructor for KeyBlock
1: 	 */
1: 	public KeyBlock() {
1: 		super();
1: 		min = 0;
1: 		max = 0;
1: 		index = min;
1: 	}
1: 
1: 	/**
1: 	 * Constructor for KeyBlock 
1: 	 */
1: 	public KeyBlock(int min, int max) {
1: 		super();
1: 		this.min = min;
1: 		this.max = max;
1: 		index = min;
1: 	}
1: 
1: 	/**
1: 	 * @see AbstractCollection#size()
1: 	 */
1: 	public int size() {
1: 		return (max - min) + 1;
1: 	}
1: 
1: 	/**
1: 	 * @see AbstractSequentialList#listIterator(int)
1: 	 */
1: 	public ListIterator listIterator(int arg0) {
1: 		return new KeyBlockIterator();
1: 	}
1: 
1: 	class KeyBlockIterator implements ListIterator {
1: 
1: 		/**
1: 		 * @see ListIterator#hasNext()
1: 		 */
1: 		public boolean hasNext() {
1: 			return index <= max;
1: 		}
1: 
1: 		/**
1: 		 * @see ListIterator#next()
1: 		 */
1: 		public synchronized Object next() {
1: 			if (index > max)
1: 				throw new java.lang.RuntimeException("KeyBlock:next() -- Error KeyBlock depleted");
1: 			return new Integer(index++);
1: 		}
1: 
1: 		/**
1: 		 * @see ListIterator#hasPrevious()
1: 		 */
1: 		public boolean hasPrevious() {
1: 			return index > min;
1: 		}
1: 
1: 		/**
1: 		 * @see ListIterator#previous()
1: 		 */
1: 		public Object previous() {
1: 			return new Integer(--index);
1: 		}
1: 
1: 		/**
1: 		 * @see ListIterator#nextIndex()
1: 		 */
1: 		public int nextIndex() {
1: 			return index-min;
1: 		}
1: 
1: 		/**
1: 		 * @see ListIterator#previousIndex()
1: 		 */
1: 		public int previousIndex() {
1: 			throw new UnsupportedOperationException("KeyBlock: previousIndex() not supported");
1: 		}
1: 
1: 		/**
1: 		 * @see ListIterator#add()
1: 		 */
1: 		public void add(Object o) {
1: 			throw new UnsupportedOperationException("KeyBlock: add() not supported");
1: 		}
1: 
1: 		/**
1: 		 * @see ListIterator#remove()
1: 		 */
1: 		public void remove() {
1: 			throw new UnsupportedOperationException("KeyBlock: remove() not supported");
1: 		}
1: 
1: 		/**
1: 		 * @see ListIterator#set(Object)
1: 		 */
1: 		public void set(Object arg0) {
1: 		}
1: 	}
1: }
============================================================================