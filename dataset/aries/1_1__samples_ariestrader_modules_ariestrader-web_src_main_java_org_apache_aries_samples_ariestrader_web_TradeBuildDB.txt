1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.web;
2:628add4: 
1:628add4: import java.io.BufferedReader;
1:628add4: import java.io.File;
1:09d6656: import java.io.InputStreamReader;
1:628add4: import java.io.IOException;
1:628add4: import java.math.BigDecimal;
1:09d6656: import java.net.URL;
1:628add4: import java.util.ArrayList;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeDBManager;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServicesManager;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServices;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.*;
1:56a6860: import org.apache.aries.samples.ariestrader.util.*;
1:628add4: 
1:628add4: /**
1:628add4:  * TradeBuildDB uses operations provided by the TradeApplication to 
1:628add4:  *   (a) create the Database tables 
1:56a6860:  *   (b) populate a AriesTrader database without creating the tables. 
1:56a6860:  * Specifically, a new AriesTrader User population is created using
1:628add4:  * UserIDs of the form "uid:xxx" where xxx is a sequential number 
1:628add4:  * (e.g. uid:0, uid:1, etc.). New stocks are also created of the form "s:xxx",
1:628add4:  * again where xxx represents sequential numbers (e.g. s:1, s:2, etc.)
1:628add4:  */
1:628add4: public class TradeBuildDB {
1:628add4: 
1:628add4:     private static TradeServicesManager tradeServicesManager = null;
1:628add4:     private static TradeDBManager tradeDBManager = null;
1:628add4: 
1:628add4:     /**
1:628add4:      * Populate a Trade DB using standard out as a log
1:628add4:      */
1:628add4:     public TradeBuildDB() throws Exception {
1:09d6656:         this(new java.io.PrintWriter(System.out), false);
2:628add4:     }
1:628add4: 
1:628add4:     /**
1:56a6860:      * Re-create the AriesTrader db tables and populate them OR just populate a 
1:56a6860:      * AriesTrader DB, logging to the provided output stream
1:628add4:      */
1:09d6656:     public TradeBuildDB(java.io.PrintWriter out, boolean createTables)
1:628add4:         throws Exception {
1:628add4:         String symbol, companyName;
1:628add4:         int errorCount = 0; // Give up gracefully after 10 errors
1:628add4:         if (tradeServicesManager == null) {
1:628add4:             tradeServicesManager = TradeServiceUtilities.getTradeServicesManager();
1:628add4:         }
1:628add4:         TradeServices tradeServices = tradeServicesManager.getTradeServices();
1:628add4: 
1:628add4:         if (tradeDBManager == null) {
1:628add4:             tradeDBManager = TradeServiceUtilities.getTradeDBManager();
1:628add4:         }
1:628add4: 
1:628add4:         // TradeStatistics.statisticsEnabled=false; // disable statistics
1:56a6860:         out.println("<HEAD><BR><EM> TradeBuildDB: Building AriesTrader Database...</EM><BR>"
1:628add4:             + "This operation will take several minutes. Please wait...</HEAD>");
1:628add4:         out.println("<BODY>");
1:628add4: 
1:09d6656:         if (createTables) {
1:628add4:             boolean success = false;
1:628add4:             String dbProductName = null;
1:09d6656:             String fileLocation = null;
1:09d6656:             URL ddlFile = null;
1:628add4:             Object[] sqlBuffer = null;
1:628add4: 
1:628add4:             // Find out the Database being used
1:628add4:             try {
1:628add4:                 dbProductName = tradeDBManager.checkDBProductName();
1:628add4:             } catch (Exception e) {
1:628add4:                 Log.error(e, "TradeBuildDB: Unable to check DB Product name");
1:628add4:             }
1:628add4:             if (dbProductName == null) {
1:628add4:                 out.println("<BR>TradeBuildDB: **** Unable to check DB Product name,"
1:628add4:                     + "please check Database/AppServer configuration and retry ****</BR></BODY>");
2:628add4:                 return;
1:628add4:             }
1:628add4: 
1:628add4:             // Locate DDL file for the specified database
1:628add4:             try {
1:628add4:                 out.println("<BR>TradeBuildDB: **** Database Product detected: "
1:628add4:                     + dbProductName + " ****</BR>");
1:09d6656:                 if (dbProductName.startsWith("DB2/")) { // if db is DB2
1:1f17ee6:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "db2" + File.separatorChar + "Table.ddl";
1:628add4:                 } else if (dbProductName.startsWith("Apache Derby")) { // if db is Derby
1:1f17ee6:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "derby" + File.separatorChar + "Table.ddl";
1:628add4:                 } else if (dbProductName.startsWith("Oracle")) { // if the Db is Oracle
1:1f17ee6:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "oracle" + File.separatorChar + "Table.ddl";
1:628add4:                 } else { // Unsupported "Other" Database
1:1f17ee6:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "other" + File.separatorChar + "Table.ddl";
1:628add4:                     out.println("<BR>TradeBuildDB: **** This Database is "
1:628add4:                         + "unsupported/untested use at your own risk ****</BR>");
1:628add4:                 }
1:628add4: 
1:09d6656:                 ddlFile = this.getClass().getResource(fileLocation);                
1:09d6656: 
1:628add4:             } catch (Exception e) {
1:628add4:                 Log.error(e,
1:628add4:                     "TradeBuildDB: Unable to locate DDL file for the specified database");
1:628add4:                 out.println("<BR>TradeBuildDB: **** Unable to locate DDL file for "
1:628add4:                     + "the specified database ****</BR></BODY>");
1:628add4:                 return;
1:628add4:             }
1:628add4: 
1:628add4:             // parse the DDL file and fill the SQL commands into a buffer
1:628add4:             try {
1:628add4:                 sqlBuffer = parseDDLToBuffer(ddlFile);
1:628add4:             } catch (Exception e) {
1:628add4:                 Log.error(e, "TradeBuildDB: Unable to parse DDL file");
1:628add4:                 out.println("<BR>TradeBuildDB: **** Unable to parse DDL file for the specified "+
1:628add4:                     "database ****</BR></BODY>");
1:628add4:                 return;
1:628add4:             }
1:628add4:             if ((sqlBuffer == null) || (sqlBuffer.length == 0)) {
1:628add4:                 out.println("<BR>TradeBuildDB: **** Parsing DDL file returned empty buffer, please check "+
1:628add4:                     "that a valid DB specific DDL file is available and retry ****</BR></BODY>");
1:628add4:                 return;
1:628add4:             }
1:628add4: 
1:56a6860:             // send the sql commands buffer to drop and recreate the AriesTrader tables
1:56a6860:             out.println("<BR>TradeBuildDB: **** Dropping and Recreating the AriesTrader tables... ****</BR>");
1:628add4:             try {
1:628add4:                 success = tradeDBManager.recreateDBTables(sqlBuffer, out);
1:628add4:             } catch (Exception e) {
1:628add4:                 Log.error(e,
1:56a6860:                     "TradeBuildDB: Unable to drop and recreate AriesTrader Db Tables, "+
1:628add4:                     "please check for database consistency before continuing");
1:628add4:             }
1:628add4:             if (!success) {
1:56a6860:                 out.println("<BR>TradeBuildDB: **** Unable to drop and recreate AriesTrader Db Tables, "+
1:628add4:                     "please check for database consistency before continuing ****</BR></BODY>");
1:628add4:                 return;
1:628add4:             }
1:56a6860:             out.println("<BR>TradeBuildDB: **** AriesTrader tables successfully created! ****</BR><BR><b> "+
1:56a6860:                 "Please Stop and Re-start your AriesTrader application (or your application server) and then use "+
1:56a6860:                 "the \"Repopulate AriesTrader Database\" link to populate your database.</b></BR><BR><BR></BODY>");
1:628add4:             return;
1:628add4:         } // end of createDBTables
1:628add4: 
1:628add4:         out.println("<BR>TradeBuildDB: **** Creating "
1:628add4:             + TradeConfig.getMAX_QUOTES() + " Quotes ****</BR>");
1:628add4:         // Attempt to delete all of the Trade users and Trade Quotes first
1:628add4:         try {
1:628add4:             tradeDBManager.resetTrade(true);
1:628add4:         } catch (Exception e) {
1:628add4:             Log.error(e, "TradeBuildDB: Unable to delete Trade users "+
1:628add4:                 "(uid:0, uid:1, ...) and Trade Quotes (s:0, s:1, ...)");
1:628add4:         }
1:628add4:         for (int i = 0; i < TradeConfig.getMAX_QUOTES(); i++) {
1:628add4:             symbol = "s:" + i;
1:628add4:             companyName = "S" + i + " Incorporated";
1:628add4:             try {
1:b8c0170:                 tradeServices.createQuote(symbol, companyName,
1:b8c0170: 				    new java.math.BigDecimal(TradeConfig.rndPrice()));
1:628add4:                 if (i % 10 == 0) {
1:628add4:                     out.print("....." + symbol);
1:628add4:                     if (i % 100 == 0) {
1:628add4:                         out.println(" -<BR>");
2:628add4:                         out.flush();
1:628add4:                     }
1:628add4:                 }
1:628add4:             } catch (Exception e) {
1:628add4:                 if (errorCount++ >= 10) {
1:628add4:                     String error = "Populate Trade DB aborting after 10 create quote errors. Check "+
1:628add4:                         "the EJB datasource configuration. Check the log for details <BR><BR> Exception is: <BR> "
1:628add4:                         + e.toString();
1:628add4:                     Log.error(e, error);
1:628add4:                     throw e;
1:628add4:                 }
1:628add4:             }
1:628add4:         }
1:628add4:         out.println("<BR>");
1:628add4:         out.println("<BR>**** Registering " + TradeConfig.getMAX_USERS()
1:628add4:             + " Users **** ");
1:628add4:         errorCount = 0; // reset for user registrations
1:628add4: 
1:628add4:         // Registration is a formal operation in Trade 2.
1:628add4:         for (int i = 0; i < TradeConfig.getMAX_USERS(); i++) {
1:628add4:             String userID = "uid:" + i;
1:628add4:             String fullname = TradeConfig.rndFullName();
1:628add4:             String email = TradeConfig.rndEmail(userID);
1:628add4:             String address = TradeConfig.rndAddress();
1:628add4:             String creditcard = TradeConfig.rndCreditCard();
1:628add4:             double initialBalance =
1:628add4:                 (double) (TradeConfig.rndInt(100000)) + 200000;
1:628add4:             if (i == 0) {
1:628add4:                 initialBalance = 1000000; // uid:0 starts with a cool million.
1:628add4:             }
1:628add4:             try {
1:628add4:                 AccountDataBean accountData =
1:628add4:                     tradeServices.register(userID, "xxx", fullname, address,
1:628add4:                         email, creditcard, new BigDecimal(initialBalance));
1:628add4:                 if (accountData != null) {
1:628add4:                     if (i % 50 == 0) {
1:628add4:                         out.print("<BR>Account# " + accountData.getAccountID()
1:628add4:                             + " userID=" + userID);
1:628add4:                     }
1:628add4: 
1:628add4:                     // 0-MAX_HOLDING (inclusive), avg holdings per user = (MAX-0)/2
1:628add4:                     int holdings = TradeConfig.rndInt(TradeConfig.getMAX_HOLDINGS() + 1); 
1:628add4:                     double quantity = 0;
1:628add4:                     for (int j = 0; j < holdings; j++) {
1:628add4:                         symbol = TradeConfig.rndSymbol();
1:628add4:                         quantity = TradeConfig.rndQuantity();
1:b8c0170:                         tradeServices.buy(userID, symbol, quantity,
1:b8c0170: 						    TradeConfig.orderProcessingMode);
1:628add4:                     }
1:628add4:                     if (i % 50 == 0) {
1:628add4:                         out.println(" has " + holdings + " holdings.");
1:628add4:                         out.flush();
1:628add4:                     }
1:628add4:                 } else {
1:628add4:                     out.println("<BR>UID " + userID
1:628add4:                         + " already registered.</BR>");
1:628add4:                     out.flush();
1:628add4:                 }
1:628add4: 
1:628add4:             } catch (Exception e) {
1:628add4:                 if (errorCount++ >= 10) {
1:628add4:                     String error = "Populate Trade DB aborting after 10 user registration errors. "+
1:628add4:                         "Check the log for details. <BR><BR> Exception is: <BR>" + e.toString();
1:628add4:                     Log.error(e, error);
1:628add4:                     throw e;
1:628add4:                 }
1:628add4:             }
1:628add4:         } // end-for
1:628add4:         out.println("</BODY>");
1:628add4:     }
1:628add4: 
1:09d6656:     public Object[] parseDDLToBuffer(URL ddlFile) throws Exception {
1:628add4:         BufferedReader br = null;
1:09d6656:         InputStreamReader ir = null;
1:628add4:         ArrayList sqlBuffer = new ArrayList(30); // initial capacity 30 assuming we have 30 ddl-sql statements to read
1:628add4: 
1:628add4:         try {
1:628add4:             if (Log.doTrace())
1:628add4:                 Log.traceEnter("TradeBuildDB:parseDDLToBuffer - " + ddlFile);
1:628add4: 
1:09d6656:             ir = new InputStreamReader(ddlFile.openStream());
1:09d6656:             br = new BufferedReader(ir);
1:628add4:             String s;
1:628add4:             String sql = new String();
1:628add4:             while ((s = br.readLine()) != null) {
1:628add4:                 s = s.trim();
1:628add4:                 if ((s.length() != 0) && (s.charAt(0) != '#')) // Empty lines or lines starting with "#" are ignored
1:628add4:                 {
1:628add4:                     sql = sql + " " + s;
1:628add4:                     if (s.endsWith(";")) // reached end of sql statement
1:628add4:                     {
1:628add4:                         sql = sql.replace(';', ' '); // remove the semicolon
1:628add4:                         sqlBuffer.add(sql);
1:628add4:                         sql = "";
1:628add4:                     }
1:628add4:                 }
1:628add4:             }
1:628add4:         } catch (IOException ex) {
1:628add4:             Log.error("TradeBuildDB:parseDDLToBuffer Exeception during open/read of File: "
1:628add4:                 + ddlFile, ex);
1:628add4:             throw ex;
1:628add4:         } finally {
1:628add4:             if (br != null) {
1:628add4:                 try {
1:628add4:                     br.close();
1:628add4:                 } catch (IOException ex) {
1:628add4:                     Log.error("TradeBuildDB:parseDDLToBuffer Failed to close BufferedReader",
1:628add4:                         ex);
1:628add4:                 }
1:628add4:             }
1:628add4:         }
1:628add4:         return sqlBuffer.toArray();
1:628add4:     }
1:628add4: 
1:628add4:     public static void main(String args[]) throws Exception {
1:628add4:         new TradeBuildDB();
1:628add4: 
1:628add4:     }
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:1f17ee6
/////////////////////////////////////////////////////////////////////////
1:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "db2" + File.separatorChar + "Table.ddl";
1:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "derby" + File.separatorChar + "Table.ddl";
1:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "oracle" + File.separatorChar + "Table.ddl";
1:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "other" + File.separatorChar + "Table.ddl";
commit:db75876
/////////////////////////////////////////////////////////////////////////
0:                     fileLocation = File.separatorChar + "db2" + File.separatorChar + "Table.ddl";
0:                     fileLocation = File.separatorChar + "derby" + File.separatorChar + "Table.ddl";
0:                     fileLocation = File.separatorChar + "oracle" + File.separatorChar + "Table.ddl";
0:                     fileLocation = File.separatorChar + "other" + File.separatorChar + "Table.ddl";
commit:09d6656
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStreamReader;
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1:         this(new java.io.PrintWriter(System.out), false);
1:     public TradeBuildDB(java.io.PrintWriter out, boolean createTables)
/////////////////////////////////////////////////////////////////////////
1:         if (createTables) {
1:             String fileLocation = null;
1:             URL ddlFile = null;
/////////////////////////////////////////////////////////////////////////
1:                 if (dbProductName.startsWith("DB2/")) { // if db is DB2
0:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "db2" + File.separatorChar + "Table.ddl";
0:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "derby" + File.separatorChar + "Table.ddl";
0:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "oracle" + File.separatorChar + "Table.ddl";
0:                     fileLocation = File.separatorChar + "dbscripts" + File.separatorChar + "other" + File.separatorChar + "Table.ddl";
1:                 ddlFile = this.getClass().getResource(fileLocation);                
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Object[] parseDDLToBuffer(URL ddlFile) throws Exception {
1:         InputStreamReader ir = null;
1:             ir = new InputStreamReader(ddlFile.openStream());
1:             br = new BufferedReader(ir);
commit:3a78a2d
/////////////////////////////////////////////////////////////////////////
0:                 if (warPath.equals("")) { // if empty warPath provided assume this is Aries under the Equinox test harness
0:                     ddlFile = new File("tradeDB.sql");                    
0:                 } else if (dbProductName.startsWith("DB2/")) { // if db is DB2
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 tradeServices.createQuote(symbol, companyName,
1: 				    new java.math.BigDecimal(TradeConfig.rndPrice()));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                         tradeServices.buy(userID, symbol, quantity,
1: 						    TradeConfig.orderProcessingMode);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.*;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.web;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.TradeDBManager;
1: import org.apache.aries.samples.ariestrader.api.TradeServicesManager;
1: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1: import org.apache.aries.samples.ariestrader.api.TradeServices;
0: import org.apache.aries.samples.ariestrader.persistence.api.*;
1: import org.apache.aries.samples.ariestrader.util.*;
1:  *   (b) populate a AriesTrader database without creating the tables. 
1:  * Specifically, a new AriesTrader User population is created using
/////////////////////////////////////////////////////////////////////////
1:      * Re-create the AriesTrader db tables and populate them OR just populate a 
1:      * AriesTrader DB, logging to the provided output stream
/////////////////////////////////////////////////////////////////////////
1:         out.println("<HEAD><BR><EM> TradeBuildDB: Building AriesTrader Database...</EM><BR>"
/////////////////////////////////////////////////////////////////////////
1:             // send the sql commands buffer to drop and recreate the AriesTrader tables
1:             out.println("<BR>TradeBuildDB: **** Dropping and Recreating the AriesTrader tables... ****</BR>");
1:                     "TradeBuildDB: Unable to drop and recreate AriesTrader Db Tables, "+
1:                 out.println("<BR>TradeBuildDB: **** Unable to drop and recreate AriesTrader Db Tables, "+
1:             out.println("<BR>TradeBuildDB: **** AriesTrader tables successfully created! ****</BR><BR><b> "+
1:                 "Please Stop and Re-start your AriesTrader application (or your application server) and then use "+
1:                 "the \"Repopulate AriesTrader Database\" link to populate your database.</b></BR><BR><BR></BODY>");
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.web;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.daytrader.api.TradeDBManager;
0: import org.apache.aries.samples.daytrader.api.TradeServicesManager;
0: import org.apache.aries.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.aries.samples.daytrader.api.TradeServices;
0: import org.apache.aries.samples.daytrader.persistence.api.*;
0: import org.apache.aries.samples.daytrader.util.*;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.web;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
0: import java.io.FileReader;
1: import java.io.IOException;
1: import java.math.BigDecimal;
1: import java.util.ArrayList;
1: 
0: import org.apache.geronimo.samples.daytrader.api.TradeDBManager;
0: import org.apache.geronimo.samples.daytrader.api.TradeServicesManager;
0: import org.apache.geronimo.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.geronimo.samples.daytrader.api.TradeServices;
0: import org.apache.geronimo.samples.daytrader.persistence.api.*;
0: import org.apache.geronimo.samples.daytrader.util.*;
1: 
1: /**
1:  * TradeBuildDB uses operations provided by the TradeApplication to 
1:  *   (a) create the Database tables 
0:  *   (b) populate a DayTrader database without creating the tables. 
0:  * Specifically, a new DayTrader User population is created using
1:  * UserIDs of the form "uid:xxx" where xxx is a sequential number 
1:  * (e.g. uid:0, uid:1, etc.). New stocks are also created of the form "s:xxx",
1:  * again where xxx represents sequential numbers (e.g. s:1, s:2, etc.)
1:  */
1: public class TradeBuildDB {
1: 
0:     private boolean verbose = true;
0:     private TradeConfig t = new TradeConfig();
1:     private static TradeServicesManager tradeServicesManager = null;
1:     private static TradeDBManager tradeDBManager = null;
1: 
1:     /**
1:      * Populate a Trade DB using standard out as a log
1:      */
1:     public TradeBuildDB() throws Exception {
0:         this(new java.io.PrintWriter(System.out), null);
1:     }
1: 
1:     /**
0:      * Re-create the DayTrader db tables and populate them OR just populate a 
0:      * DayTrader DB, logging to the provided output stream
1:      */
0:     public TradeBuildDB(java.io.PrintWriter out, String warPath)
1:         throws Exception {
1:         String symbol, companyName;
1:         int errorCount = 0; // Give up gracefully after 10 errors
1:         if (tradeServicesManager == null) {
1:             tradeServicesManager = TradeServiceUtilities.getTradeServicesManager();
1:         }
1:         TradeServices tradeServices = tradeServicesManager.getTradeServices();
1: 
1:         if (tradeDBManager == null) {
1:             tradeDBManager = TradeServiceUtilities.getTradeDBManager();
1:         }
1: 
1:         // TradeStatistics.statisticsEnabled=false; // disable statistics
0:         out.println("<HEAD><BR><EM> TradeBuildDB: Building DayTrader Database...</EM><BR>"
1:             + "This operation will take several minutes. Please wait...</HEAD>");
1:         out.println("<BODY>");
1: 
0:         if (warPath != null) {
1:             boolean success = false;
1:             String dbProductName = null;
0:             File ddlFile = null;
1:             Object[] sqlBuffer = null;
1: 
1:             // Find out the Database being used
1:             try {
1:                 dbProductName = tradeDBManager.checkDBProductName();
1:             } catch (Exception e) {
1:                 Log.error(e, "TradeBuildDB: Unable to check DB Product name");
1:             }
1:             if (dbProductName == null) {
1:                 out.println("<BR>TradeBuildDB: **** Unable to check DB Product name,"
1:                     + "please check Database/AppServer configuration and retry ****</BR></BODY>");
1:                 return;
1:             }
1: 
1:             // Locate DDL file for the specified database
1:             try {
1:                 out.println("<BR>TradeBuildDB: **** Database Product detected: "
1:                     + dbProductName + " ****</BR>");
0:                 if (dbProductName.startsWith("DB2/")) { // if db is DB2
0:                     ddlFile = new File(warPath + File.separatorChar + "dbscripts"
0:                         + File.separatorChar + "db2" + File.separatorChar + "Table.ddl");
1:                 } else if (dbProductName.startsWith("Apache Derby")) { // if db is Derby
0:                     ddlFile = new File(warPath + File.separatorChar + "dbscripts"
0:                         + File.separatorChar + "derby" + File.separatorChar + "Table.ddl");
1:                 } else if (dbProductName.startsWith("Oracle")) { // if the Db is Oracle
0:                     ddlFile = new File(warPath + File.separatorChar + "dbscripts"
0:                         + File.separatorChar + "oracle" + File.separatorChar + "Table.ddl");
1:                 } else { // Unsupported "Other" Database
0:                     ddlFile = new File(warPath + File.separatorChar + "dbscripts"
0:                         + File.separatorChar + "other" + File.separatorChar + "Table.ddl");
1:                     out.println("<BR>TradeBuildDB: **** This Database is "
1:                         + "unsupported/untested use at your own risk ****</BR>");
1:                 }
1: 
0:                 if (!ddlFile.exists()) {
0:                     Log.error("TradeBuildDB: DDL file doesnt exist at path "
0:                         + ddlFile.getCanonicalPath()
0:                         + " , please provide the file and retry");
0:                     out.println("<BR>TradeBuildDB: DDL file doesnt exist at path <I>"
0:                         + ddlFile.getCanonicalPath() +
0:                         "</I> , please provide the file and retry ****</BR></BODY>");
1:                     return;
1:                 }
0:                 out.println("<BR>TradeBuildDB: **** The DDL file at path <I>"
0:                     + ddlFile.getCanonicalPath()
0:                     + "</I> will be used ****</BR>");
1:                 out.flush();
1:             } catch (Exception e) {
1:                 Log.error(e,
1:                     "TradeBuildDB: Unable to locate DDL file for the specified database");
1:                 out.println("<BR>TradeBuildDB: **** Unable to locate DDL file for "
1:                     + "the specified database ****</BR></BODY>");
1:                 return;
1:             }
1: 
1:             // parse the DDL file and fill the SQL commands into a buffer
1:             try {
1:                 sqlBuffer = parseDDLToBuffer(ddlFile);
1:             } catch (Exception e) {
1:                 Log.error(e, "TradeBuildDB: Unable to parse DDL file");
1:                 out.println("<BR>TradeBuildDB: **** Unable to parse DDL file for the specified "+
1:                     "database ****</BR></BODY>");
1:                 return;
1:             }
1:             if ((sqlBuffer == null) || (sqlBuffer.length == 0)) {
1:                 out.println("<BR>TradeBuildDB: **** Parsing DDL file returned empty buffer, please check "+
1:                     "that a valid DB specific DDL file is available and retry ****</BR></BODY>");
1:                 return;
1:             }
1: 
0:             // send the sql commands buffer to drop and recreate the Daytrader tables
0:             out.println("<BR>TradeBuildDB: **** Dropping and Recreating the DayTrader tables... ****</BR>");
1:             try {
1:                 success = tradeDBManager.recreateDBTables(sqlBuffer, out);
1:             } catch (Exception e) {
1:                 Log.error(e,
0:                     "TradeBuildDB: Unable to drop and recreate DayTrader Db Tables, "+
1:                     "please check for database consistency before continuing");
1:             }
1:             if (!success) {
0:                 out.println("<BR>TradeBuildDB: **** Unable to drop and recreate DayTrader Db Tables, "+
1:                     "please check for database consistency before continuing ****</BR></BODY>");
1:                 return;
1:             }
0:             out.println("<BR>TradeBuildDB: **** DayTrader tables successfully created! ****</BR><BR><b> "+
0:                 "Please Stop and Re-start your Daytrader application (or your application server) and then use "+
0:                 "the \"Repopulate Daytrader Database\" link to populate your database.</b></BR><BR><BR></BODY>");
1:             return;
1:         } // end of createDBTables
1: 
1:         out.println("<BR>TradeBuildDB: **** Creating "
1:             + TradeConfig.getMAX_QUOTES() + " Quotes ****</BR>");
1:         // Attempt to delete all of the Trade users and Trade Quotes first
1:         try {
1:             tradeDBManager.resetTrade(true);
1:         } catch (Exception e) {
1:             Log.error(e, "TradeBuildDB: Unable to delete Trade users "+
1:                 "(uid:0, uid:1, ...) and Trade Quotes (s:0, s:1, ...)");
1:         }
1:         for (int i = 0; i < TradeConfig.getMAX_QUOTES(); i++) {
1:             symbol = "s:" + i;
1:             companyName = "S" + i + " Incorporated";
1:             try {
0:                 QuoteDataBean quoteData =
0:                     tradeServices.createQuote(symbol, companyName,
0:                         new java.math.BigDecimal(TradeConfig.rndPrice()));
1:                 if (i % 10 == 0) {
1:                     out.print("....." + symbol);
1:                     if (i % 100 == 0) {
1:                         out.println(" -<BR>");
1:                         out.flush();
1:                     }
1:                 }
1:             } catch (Exception e) {
1:                 if (errorCount++ >= 10) {
1:                     String error = "Populate Trade DB aborting after 10 create quote errors. Check "+
1:                         "the EJB datasource configuration. Check the log for details <BR><BR> Exception is: <BR> "
1:                         + e.toString();
1:                     Log.error(e, error);
1:                     throw e;
1:                 }
1:             }
1:         }
1:         out.println("<BR>");
1:         out.println("<BR>**** Registering " + TradeConfig.getMAX_USERS()
1:             + " Users **** ");
1:         errorCount = 0; // reset for user registrations
1: 
1:         // Registration is a formal operation in Trade 2.
1:         for (int i = 0; i < TradeConfig.getMAX_USERS(); i++) {
1:             String userID = "uid:" + i;
1:             String fullname = TradeConfig.rndFullName();
1:             String email = TradeConfig.rndEmail(userID);
1:             String address = TradeConfig.rndAddress();
1:             String creditcard = TradeConfig.rndCreditCard();
1:             double initialBalance =
1:                 (double) (TradeConfig.rndInt(100000)) + 200000;
1:             if (i == 0) {
1:                 initialBalance = 1000000; // uid:0 starts with a cool million.
1:             }
1:             try {
1:                 AccountDataBean accountData =
1:                     tradeServices.register(userID, "xxx", fullname, address,
1:                         email, creditcard, new BigDecimal(initialBalance));
0:                 String results;
1:                 if (accountData != null) {
1:                     if (i % 50 == 0) {
1:                         out.print("<BR>Account# " + accountData.getAccountID()
1:                             + " userID=" + userID);
1:                     }
1: 
1:                     // 0-MAX_HOLDING (inclusive), avg holdings per user = (MAX-0)/2
1:                     int holdings = TradeConfig.rndInt(TradeConfig.getMAX_HOLDINGS() + 1); 
1:                     double quantity = 0;
0:                     OrderDataBean orderData;
1:                     for (int j = 0; j < holdings; j++) {
1:                         symbol = TradeConfig.rndSymbol();
1:                         quantity = TradeConfig.rndQuantity();
0:                         orderData =
0:                             tradeServices.buy(userID, symbol, quantity,
0:                                 TradeConfig.orderProcessingMode);
1:                     }
1:                     if (i % 50 == 0) {
1:                         out.println(" has " + holdings + " holdings.");
1:                         out.flush();
1:                     }
1:                 } else {
1:                     out.println("<BR>UID " + userID
1:                         + " already registered.</BR>");
1:                     out.flush();
1:                 }
1: 
1:             } catch (Exception e) {
1:                 if (errorCount++ >= 10) {
0:                     AccountProfileDataBean accountProfileData = null;
1: 
1:                     String error = "Populate Trade DB aborting after 10 user registration errors. "+
1:                         "Check the log for details. <BR><BR> Exception is: <BR>" + e.toString();
1:                     Log.error(e, error);
1:                     throw e;
1:                 }
1:             }
1:         } // end-for
1:         out.println("</BODY>");
1:     }
1: 
0:     public Object[] parseDDLToBuffer(File ddlFile) throws Exception {
1:         BufferedReader br = null;
1:         ArrayList sqlBuffer = new ArrayList(30); // initial capacity 30 assuming we have 30 ddl-sql statements to read
1: 
1:         try {
1:             if (Log.doTrace())
1:                 Log.traceEnter("TradeBuildDB:parseDDLToBuffer - " + ddlFile);
1: 
0:             br = new BufferedReader(new FileReader(ddlFile));
1:             String s;
1:             String sql = new String();
1:             while ((s = br.readLine()) != null) {
1:                 s = s.trim();
1:                 if ((s.length() != 0) && (s.charAt(0) != '#')) // Empty lines or lines starting with "#" are ignored
1:                 {
1:                     sql = sql + " " + s;
1:                     if (s.endsWith(";")) // reached end of sql statement
1:                     {
1:                         sql = sql.replace(';', ' '); // remove the semicolon
0:                         // System.out.println (sql);
1:                         sqlBuffer.add(sql);
1:                         sql = "";
1:                     }
1:                 }
1:             }
1:         } catch (IOException ex) {
1:             Log.error("TradeBuildDB:parseDDLToBuffer Exeception during open/read of File: "
1:                 + ddlFile, ex);
1:             throw ex;
1:         } finally {
1:             if (br != null) {
1:                 try {
1:                     br.close();
1:                 } catch (IOException ex) {
1:                     Log.error("TradeBuildDB:parseDDLToBuffer Failed to close BufferedReader",
1:                         ex);
1:                 }
1:             }
1:         }
1:         return sqlBuffer.toArray();
1:     }
1: 
1:     public static void main(String args[]) throws Exception {
1:         new TradeBuildDB();
1: 
1:     }
1: }
============================================================================