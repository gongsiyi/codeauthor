1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:78dd69f: package org.apache.aries.tx.control.service.xa.impl;
5:78dd69f: 
1:78dd69f: import static java.util.Optional.ofNullable;
1:78dd69f: import static javax.transaction.xa.XAException.XA_HEURMIX;
1:78dd69f: import static javax.transaction.xa.XAException.XA_RBOTHER;
1:78dd69f: import static javax.transaction.xa.XAException.XA_RBPROTO;
1:cc2f539: import static org.apache.aries.tx.control.service.xa.impl.LocalResourceSupport.DISABLED;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTING;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.MARKED_ROLLBACK;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.PREPARED;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.PREPARING;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.ROLLING_BACK;
1:78dd69f: 
1:78dd69f: import java.util.ArrayList;
1:78dd69f: import java.util.List;
1:78dd69f: import java.util.concurrent.atomic.AtomicBoolean;
1:78dd69f: import java.util.concurrent.atomic.AtomicReference;
1:78dd69f: import java.util.function.Consumer;
1:78dd69f: 
1:78dd69f: import javax.transaction.Status;
1:78dd69f: import javax.transaction.Synchronization;
1:78dd69f: import javax.transaction.SystemException;
1:78dd69f: import javax.transaction.Transaction;
1:78dd69f: import javax.transaction.xa.XAException;
1:78dd69f: import javax.transaction.xa.XAResource;
1:78dd69f: import javax.transaction.xa.Xid;
1:78dd69f: 
1:78dd69f: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
1:47a70d3: import org.apache.geronimo.transaction.manager.RecoveryWorkAroundTransactionManager;
1:78dd69f: import org.osgi.service.transaction.control.LocalResource;
1:78dd69f: import org.osgi.service.transaction.control.TransactionContext;
1:78dd69f: import org.osgi.service.transaction.control.TransactionException;
1:78dd69f: import org.osgi.service.transaction.control.TransactionStatus;
1:78dd69f: 
1:78dd69f: public class TransactionContextImpl extends AbstractTransactionContextImpl implements TransactionContext {
1:78dd69f: 
1:78dd69f: 	final List<LocalResource> resources = new ArrayList<>();
1:78dd69f: 
1:78dd69f: 	private final Transaction oldTran;
1:78dd69f: 	
1:78dd69f: 	private final Transaction currentTransaction;
1:78dd69f: 	
1:78dd69f: 	private final AtomicReference<TransactionStatus> completionState = new AtomicReference<>();
1:78dd69f: 
1:47a70d3: 	private final RecoveryWorkAroundTransactionManager transactionManager;
1:78dd69f: 	
1:78dd69f: 	private final Object key;
1:78dd69f: 
1:661c406: 	private final boolean readOnly;
1:661c406: 
1:cc2f539: 	private LocalResourceSupport localResourceSupport;
1:cc2f539: 
1:47a70d3: 	public TransactionContextImpl(RecoveryWorkAroundTransactionManager transactionManager, 
1:cc2f539: 			boolean readOnly, LocalResourceSupport localResourceSupport) {
1:78dd69f: 		this.transactionManager = transactionManager;
1:661c406: 		this.readOnly = readOnly;
1:cc2f539: 		this.localResourceSupport = localResourceSupport;
1:78dd69f: 		Transaction tmp = null;
2:78dd69f: 		try {
1:78dd69f: 			tmp = transactionManager.suspend();
1:78dd69f: 			transactionManager.begin();
2:78dd69f: 		} catch (Exception e) {
1:78dd69f: 			if(tmp != null) {
1:78dd69f: 				try {
1:78dd69f: 					transactionManager.resume(tmp);
1:78dd69f: 				} catch (Exception e1) {
1:78dd69f: 					e.addSuppressed(e1);
6:78dd69f: 				}
1:78dd69f: 			}
1:78dd69f: 			throw new TransactionException("There was a serious error creating a transaction");
1:78dd69f: 		}
1:78dd69f: 		oldTran = tmp;
1:78dd69f: 		currentTransaction = transactionManager.getTransaction();
1:78dd69f: 		key = transactionManager.getTransactionKey();
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public Object getTransactionKey() {
1:78dd69f: 		return key;
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public boolean getRollbackOnly() throws IllegalStateException {
1:78dd69f: 		switch (getTransactionStatus()) {
1:78dd69f: 			case MARKED_ROLLBACK:
1:78dd69f: 			case ROLLING_BACK:
1:78dd69f: 			case ROLLED_BACK:
2:78dd69f: 				return true;
1:78dd69f: 			default:
1:78dd69f: 				return false;
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public void setRollbackOnly() throws IllegalStateException {
1:78dd69f: 		TransactionStatus status = getTransactionStatus();
1:78dd69f: 		switch (status) {
1:78dd69f: 			case ACTIVE:
1:78dd69f: 			case MARKED_ROLLBACK:
1:78dd69f: 				try {
1:78dd69f: 					currentTransaction.setRollbackOnly();
1:78dd69f: 				} catch (Exception e) {
1:78dd69f: 					throw new TransactionException("Unable to set rollback for the transaction", e);
1:78dd69f: 				}
1:78dd69f: 				break;
1:78dd69f: 			case COMMITTING:
1:78dd69f: 				// TODO something here? If it's the first resource then it might
1:78dd69f: 				// be ok to roll back?
1:78dd69f: 				throw new IllegalStateException("The transaction is already being committed");
1:78dd69f: 			case COMMITTED:
1:78dd69f: 				throw new IllegalStateException("The transaction is already committed");
1:78dd69f: 	
1:78dd69f: 			case ROLLING_BACK:
1:78dd69f: 			case ROLLED_BACK:
1:78dd69f: 				// A no op
1:78dd69f: 				break;
1:78dd69f: 			default:
1:78dd69f: 				throw new IllegalStateException("The transaction is in an unkown state");
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 	
1:78dd69f: 	@Override
1:78dd69f: 	protected void safeSetRollbackOnly() {
1:78dd69f: 		TransactionStatus status = getTransactionStatus();
1:78dd69f: 		switch (status) {
1:78dd69f: 			case ACTIVE:
1:78dd69f: 			case MARKED_ROLLBACK:
1:78dd69f: 				try {
1:78dd69f: 					currentTransaction.setRollbackOnly();
1:78dd69f: 				} catch (Exception e) {
1:78dd69f: 					throw new TransactionException("Unable to set rollback for the transaction", e);
1:78dd69f: 				}
1:78dd69f: 				break;
1:78dd69f: 			default:
1:78dd69f: 				break;
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public TransactionStatus getTransactionStatus() {
1:78dd69f: 		return ofNullable(completionState.get())
1:78dd69f: 			.orElseGet(this::getStatusFromTransaction);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	private TransactionStatus getStatusFromTransaction() {
2:78dd69f: 		int status;
1:78dd69f: 		try {
1:78dd69f: 			status = currentTransaction.getStatus();
1:78dd69f: 		} catch (SystemException e) {
1:78dd69f: 			throw new TransactionException("Unable to determine the state of the transaction.", e);
1:78dd69f: 		}
1:78dd69f: 		
1:78dd69f: 		switch (status) {
1:78dd69f: 			case Status.STATUS_ACTIVE:
1:78dd69f: 				return ACTIVE;
1:78dd69f: 			case Status.STATUS_MARKED_ROLLBACK:
1:78dd69f: 				return MARKED_ROLLBACK;
1:78dd69f: 			case Status.STATUS_PREPARING:
1:78dd69f: 				return PREPARING;
1:78dd69f: 			case Status.STATUS_PREPARED:
1:78dd69f: 				return PREPARED;
1:78dd69f: 			case Status.STATUS_COMMITTING:
1:78dd69f: 				return COMMITTING;
1:78dd69f: 			case Status.STATUS_COMMITTED:
1:78dd69f: 				return COMMITTED;
1:78dd69f: 			case Status.STATUS_ROLLING_BACK:
1:78dd69f: 				return ROLLING_BACK;
1:78dd69f: 			case Status.STATUS_ROLLEDBACK:
1:78dd69f: 				return ROLLED_BACK;
1:78dd69f: 			default:
1:78dd69f: 				throw new TransactionException("Unable to determine the state of the transaction: " + status);
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public void preCompletion(Runnable job) throws IllegalStateException {
1:78dd69f: 		TransactionStatus status = getTransactionStatus();
1:78dd69f: 		if (status.compareTo(MARKED_ROLLBACK) > 0) {
1:78dd69f: 			throw new IllegalStateException("The current transaction is in state " + status);
1:78dd69f: 		}
1:cc2f539: 
1:78dd69f: 		preCompletion.add(job);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public void postCompletion(Consumer<TransactionStatus> job) throws IllegalStateException {
1:78dd69f: 		TransactionStatus status = getTransactionStatus();
1:78dd69f: 		if (status == COMMITTED || status == ROLLED_BACK) {
1:78dd69f: 			throw new IllegalStateException("The current transaction is in state " + status);
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		postCompletion.add(job);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:47a70d3: 	public void registerXAResource(XAResource resource, String name) {
1:78dd69f: 		TransactionStatus status = getTransactionStatus();
1:78dd69f: 		if (status.compareTo(MARKED_ROLLBACK) > 0) {
1:78dd69f: 			throw new IllegalStateException("The current transaction is in state " + status);
1:78dd69f: 		}
1:78dd69f: 		try {
1:47a70d3: 			if(name == null) {
1:47a70d3: 				currentTransaction.enlistResource(resource);
1:47a70d3: 			} else {
1:47a70d3: 				NamedXAResourceImpl res = new NamedXAResourceImpl(name, resource, transactionManager, true);
1:47a70d3: 				postCompletion(x -> res.close());
1:47a70d3: 				currentTransaction.enlistResource(res);
1:47a70d3: 			}
1:78dd69f: 		} catch (Exception e) {
1:78dd69f: 			throw new TransactionException("The transaction was unable to enlist a resource", e);
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public void registerLocalResource(LocalResource resource) {
1:78dd69f: 		TransactionStatus status = getTransactionStatus();
1:78dd69f: 		if (status.compareTo(MARKED_ROLLBACK) > 0) {
1:78dd69f: 			throw new IllegalStateException("The current transaction is in state " + status);
1:78dd69f: 		}
1:78dd69f: 		
1:cc2f539: 		switch (localResourceSupport) {
1:cc2f539: 			case ENFORCE_SINGLE:
1:cc2f539: 				if(!resources.isEmpty()) {
1:cc2f539: 					throw new TransactionException(
1:cc2f539: 							"Only one local resource may be added. Adding multiple local resources increases the risk of inconsistency on failure.");
1:cc2f539: 				}
1:cc2f539: 			case ENABLED:
1:cc2f539: 				resources.add(resource);
1:cc2f539: 				break;
1:cc2f539: 			case DISABLED:
1:cc2f539: 				throw new TransactionException(
1:cc2f539: 						"This Transaction Control Service does not support local resources");
1:cc2f539: 			default :
1:cc2f539: 				throw new IllegalArgumentException("Unknown local resources configuration option");
1:cc2f539: 		}
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public boolean supportsXA() {
1:78dd69f: 		return true;
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public boolean supportsLocal() {
1:cc2f539: 		return localResourceSupport != DISABLED;
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:661c406: 	public boolean isReadOnly() {
1:661c406: 		return readOnly;
1:661c406: 	}
1:661c406: 
1:661c406: 	@Override
1:78dd69f: 	protected boolean isAlive() {
1:78dd69f: 		TransactionStatus status = getTransactionStatus();
1:78dd69f: 		return status != COMMITTED && status != ROLLED_BACK;
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public void finish() {
1:78dd69f: 		
1:78dd69f: 		if(!resources.isEmpty()) {
1:78dd69f: 			XAResource localResource = new LocalXAResourceImpl();
1:78dd69f: 			try {
1:78dd69f: 				currentTransaction.enlistResource(localResource);
1:78dd69f: 			} catch (Exception e) {
2:78dd69f: 				safeSetRollbackOnly();
2:78dd69f: 				recordFailure(e);
1:78dd69f: 				try {
1:78dd69f: 					localResource.rollback(null);
1:78dd69f: 				} catch (XAException e1) {
1:78dd69f: 					recordFailure(e1);
1:78dd69f: 				}
1:78dd69f: 			}
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		try {
1:47a70d3: 			TxListener listener = new TxListener(); 
1:78dd69f: 			try {
1:47a70d3: 				transactionManager.registerInterposedSynchronization(listener);
1:47a70d3: 
1:78dd69f: 				if (getRollbackOnly()) {
1:78dd69f: 					// GERONIMO-4449 says that we get no beforeCompletion 
1:78dd69f: 					// callback for rollback :(
1:47a70d3: 					listener.beforeCompletion();
1:78dd69f: 					transactionManager.rollback();
2:78dd69f: 				} else {
1:78dd69f: 					transactionManager.commit();
1:78dd69f: 				}
1:78dd69f: 			} catch (Exception e) {
1:78dd69f: 				recordFailure(e);
1:78dd69f: 			}
1:78dd69f: 		} finally {
1:78dd69f: 			try {
1:78dd69f: 				transactionManager.resume(oldTran);
1:78dd69f: 			} catch (Exception e) {
1:78dd69f: 				recordFailure(e);
1:78dd69f: 			}
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 	
1:78dd69f: 	private class LocalXAResourceImpl implements XAResource {
1:78dd69f: 
1:78dd69f: 		private final AtomicBoolean finished = new AtomicBoolean();
1:78dd69f: 		
1:78dd69f: 		@Override
1:78dd69f: 		public void commit(Xid xid, boolean onePhase) throws XAException {
1:78dd69f: 			if(!finished.compareAndSet(false, true)) {
1:78dd69f: 				return;
1:78dd69f: 			}
1:78dd69f: 			doCommit();
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		private void doCommit() throws XAException {
1:78dd69f: 			AtomicBoolean commit = new AtomicBoolean(true);
1:78dd69f: 			
1:78dd69f: 			List<LocalResource> committed = new ArrayList<>(resources.size());
1:78dd69f: 			List<LocalResource> rolledback = new ArrayList<>(0);
1:78dd69f: 
1:78dd69f: 			resources.stream().forEach(lr -> {
1:78dd69f: 				try {
1:78dd69f: 					if (commit.get()) {
1:78dd69f: 						lr.commit();
1:78dd69f: 						committed.add(lr);
1:78dd69f: 					} else {
1:78dd69f: 						lr.rollback();
1:78dd69f: 						rolledback.add(lr);
1:78dd69f: 					}
1:78dd69f: 				} catch (Exception e) {
1:78dd69f: 					recordFailure(e);
1:78dd69f: 					if (committed.isEmpty()) {
1:78dd69f: 						commit.set(false);
1:78dd69f: 						// This is needed to override the status from the
1:78dd69f: 						// Transaction, which thinks that we're committing
1:78dd69f: 						// until we throw an XAException from this commit.
1:78dd69f: 						completionState.set(ROLLING_BACK);
1:78dd69f: 					}
1:78dd69f: 					rolledback.add(lr);
1:78dd69f: 				}
1:78dd69f: 			});
1:78dd69f: 			
1:78dd69f: 			if(!rolledback.isEmpty()) {
1:78dd69f: 				if(committed.isEmpty()) {
1:78dd69f: 					throw (XAException) new XAException(XA_RBOTHER)
1:78dd69f: 						.initCause(firstUnexpectedException.get());
1:78dd69f: 				} else {
1:78dd69f: 					throw (XAException) new XAException(XA_HEURMIX)
1:78dd69f: 						.initCause(firstUnexpectedException.get());
1:78dd69f: 				}
1:78dd69f: 			}
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public void end(Xid xid, int flags) throws XAException {
1:78dd69f: 			//Nothing to do here
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public void forget(Xid xid) throws XAException {
1:78dd69f: 			//Nothing to do here
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public int getTransactionTimeout() throws XAException {
1:78dd69f: 			return 3600;
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public boolean isSameRM(XAResource xares) throws XAException {
1:78dd69f: 			return this == xares;
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public int prepare(Xid xid) throws XAException {
1:78dd69f: 			if(!finished.compareAndSet(false, true)) {
1:78dd69f: 				switch(getTransactionStatus()) {
1:78dd69f: 					case COMMITTING:
1:78dd69f: 						return XA_OK;
1:78dd69f: 					case ROLLING_BACK:
1:78dd69f: 						throw new XAException(XA_RBOTHER);
1:78dd69f: 					default:
1:78dd69f: 						throw new XAException(XA_RBPROTO);
1:78dd69f: 				}
1:78dd69f: 			}
1:78dd69f: 			completionState.set(COMMITTING);
1:78dd69f: 			doCommit();
1:78dd69f: 			return XA_OK;
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public Xid[] recover(int flag) throws XAException {
1:78dd69f: 			return new Xid[0];
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public void rollback(Xid xid) throws XAException {
1:78dd69f: 			if(!finished.compareAndSet(false, true)) {
1:78dd69f: 				return;
1:78dd69f: 			}
1:78dd69f: 			resources.stream().forEach(lr -> {
1:78dd69f: 				try {
1:78dd69f: 					lr.rollback();
1:78dd69f: 				} catch (Exception e) {
1:78dd69f: 					// TODO log this
1:78dd69f: 					recordFailure(e);
1:78dd69f: 				}
1:78dd69f: 			});
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public boolean setTransactionTimeout(int seconds) throws XAException {
1:78dd69f: 			return false;
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public void start(Xid xid, int flags) throws XAException {
1:78dd69f: 			// Nothing to do here
1:78dd69f: 		}
1:78dd69f: 		
1:78dd69f: 	}
1:78dd69f: 	
1:78dd69f: 	private class TxListener implements Synchronization {
1:47a70d3: 		
1:78dd69f: 		@Override
1:78dd69f: 		public void beforeCompletion() {
1:78dd69f: 			TransactionContextImpl.this.beforeCompletion(() -> safeSetRollbackOnly());
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public void afterCompletion(int status) {
1:47a70d3: 			TransactionStatus ts = status == Status.STATUS_COMMITTED ? COMMITTED : ROLLED_BACK;
1:47a70d3: 			completionState.set(ts);
1:47a70d3: 			TransactionContextImpl.this.afterCompletion(ts);
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.geronimo.transaction.manager.RecoveryWorkAroundTransactionManager;
/////////////////////////////////////////////////////////////////////////
1: 	private final RecoveryWorkAroundTransactionManager transactionManager;
/////////////////////////////////////////////////////////////////////////
1: 	public TransactionContextImpl(RecoveryWorkAroundTransactionManager transactionManager, 
/////////////////////////////////////////////////////////////////////////
1: 	public void registerXAResource(XAResource resource, String name) {
1: 			if(name == null) {
1: 				currentTransaction.enlistResource(resource);
1: 			} else {
1: 				NamedXAResourceImpl res = new NamedXAResourceImpl(name, resource, transactionManager, true);
1: 				postCompletion(x -> res.close());
1: 				currentTransaction.enlistResource(res);
1: 			}
/////////////////////////////////////////////////////////////////////////
1: 			TxListener listener = new TxListener(); 
1: 				transactionManager.registerInterposedSynchronization(listener);
1: 
1: 					listener.beforeCompletion();
/////////////////////////////////////////////////////////////////////////
1: 		
/////////////////////////////////////////////////////////////////////////
1: 			TransactionStatus ts = status == Status.STATUS_COMMITTED ? COMMITTED : ROLLED_BACK;
1: 			completionState.set(ts);
1: 			TransactionContextImpl.this.afterCompletion(ts);
commit:cc2f539
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.tx.control.service.xa.impl.LocalResourceSupport.DISABLED;
/////////////////////////////////////////////////////////////////////////
1: 	private LocalResourceSupport localResourceSupport;
1: 
1: 			boolean readOnly, LocalResourceSupport localResourceSupport) {
1: 		this.localResourceSupport = localResourceSupport;
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		switch (localResourceSupport) {
1: 			case ENFORCE_SINGLE:
1: 				if(!resources.isEmpty()) {
1: 					throw new TransactionException(
1: 							"Only one local resource may be added. Adding multiple local resources increases the risk of inconsistency on failure.");
1: 				}
1: 			case ENABLED:
1: 				resources.add(resource);
1: 				break;
1: 			case DISABLED:
1: 				throw new TransactionException(
1: 						"This Transaction Control Service does not support local resources");
1: 			default :
1: 				throw new IllegalArgumentException("Unknown local resources configuration option");
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		return localResourceSupport != DISABLED;
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	public TransactionContextImpl(GeronimoTransactionManager transactionManager, 
commit:661c406
/////////////////////////////////////////////////////////////////////////
1: 	private final boolean readOnly;
1: 
0: 	public TransactionContextImpl(GeronimoTransactionManager transactionManager, Coordination coordination, 
0: 			boolean readOnly) {
1: 		this.readOnly = readOnly;
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isReadOnly() {
1: 		return readOnly;
1: 	}
1: 
1: 	@Override
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.xa.impl;
1: 
1: import static java.util.Optional.ofNullable;
1: import static javax.transaction.xa.XAException.XA_HEURMIX;
1: import static javax.transaction.xa.XAException.XA_RBOTHER;
1: import static javax.transaction.xa.XAException.XA_RBPROTO;
1: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTING;
1: import static org.osgi.service.transaction.control.TransactionStatus.MARKED_ROLLBACK;
1: import static org.osgi.service.transaction.control.TransactionStatus.PREPARED;
1: import static org.osgi.service.transaction.control.TransactionStatus.PREPARING;
1: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1: import static org.osgi.service.transaction.control.TransactionStatus.ROLLING_BACK;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicReference;
1: import java.util.function.Consumer;
1: 
1: import javax.transaction.Status;
1: import javax.transaction.Synchronization;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
1: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
0: import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
0: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionException;
1: import org.osgi.service.transaction.control.TransactionStatus;
1: 
1: public class TransactionContextImpl extends AbstractTransactionContextImpl implements TransactionContext {
1: 
1: 	final List<LocalResource> resources = new ArrayList<>();
1: 
1: 	private final Transaction oldTran;
1: 	
1: 	private final Transaction currentTransaction;
1: 	
1: 	private final AtomicReference<TransactionStatus> completionState = new AtomicReference<>();
1: 
0: 	private final GeronimoTransactionManager transactionManager;
1: 	
1: 	private final Object key;
1: 
0: 	public TransactionContextImpl(GeronimoTransactionManager transactionManager, Coordination coordination) {
0: 		super(coordination);
1: 		this.transactionManager = transactionManager;
1: 		Transaction tmp = null;
1: 		try {
1: 			tmp = transactionManager.suspend();
1: 			transactionManager.begin();
1: 		} catch (Exception e) {
1: 			if(tmp != null) {
1: 				try {
1: 					transactionManager.resume(tmp);
1: 				} catch (Exception e1) {
1: 					e.addSuppressed(e1);
1: 				}
1: 			}
1: 			throw new TransactionException("There was a serious error creating a transaction");
1: 		}
1: 		oldTran = tmp;
1: 		currentTransaction = transactionManager.getTransaction();
1: 		key = transactionManager.getTransactionKey();
1: 	}
1: 
1: 	@Override
1: 	public Object getTransactionKey() {
1: 		return key;
1: 	}
1: 
1: 	@Override
1: 	public boolean getRollbackOnly() throws IllegalStateException {
1: 		switch (getTransactionStatus()) {
1: 			case MARKED_ROLLBACK:
1: 			case ROLLING_BACK:
1: 			case ROLLED_BACK:
1: 				return true;
1: 			default:
1: 				return false;
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public void setRollbackOnly() throws IllegalStateException {
1: 		TransactionStatus status = getTransactionStatus();
1: 		switch (status) {
1: 			case ACTIVE:
1: 			case MARKED_ROLLBACK:
1: 				try {
1: 					currentTransaction.setRollbackOnly();
1: 				} catch (Exception e) {
1: 					throw new TransactionException("Unable to set rollback for the transaction", e);
1: 				}
1: 				break;
1: 			case COMMITTING:
1: 				// TODO something here? If it's the first resource then it might
1: 				// be ok to roll back?
1: 				throw new IllegalStateException("The transaction is already being committed");
1: 			case COMMITTED:
1: 				throw new IllegalStateException("The transaction is already committed");
1: 	
1: 			case ROLLING_BACK:
1: 			case ROLLED_BACK:
1: 				// A no op
1: 				break;
1: 			default:
1: 				throw new IllegalStateException("The transaction is in an unkown state");
1: 		}
1: 	}
1: 	
1: 	@Override
1: 	protected void safeSetRollbackOnly() {
1: 		TransactionStatus status = getTransactionStatus();
1: 		switch (status) {
1: 			case ACTIVE:
1: 			case MARKED_ROLLBACK:
1: 				try {
1: 					currentTransaction.setRollbackOnly();
1: 				} catch (Exception e) {
1: 					throw new TransactionException("Unable to set rollback for the transaction", e);
1: 				}
1: 				break;
1: 			default:
1: 				break;
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public TransactionStatus getTransactionStatus() {
1: 		return ofNullable(completionState.get())
1: 			.orElseGet(this::getStatusFromTransaction);
1: 	}
1: 
1: 	private TransactionStatus getStatusFromTransaction() {
1: 		int status;
1: 		try {
1: 			status = currentTransaction.getStatus();
1: 		} catch (SystemException e) {
1: 			throw new TransactionException("Unable to determine the state of the transaction.", e);
1: 		}
1: 		
1: 		switch (status) {
1: 			case Status.STATUS_ACTIVE:
1: 				return ACTIVE;
1: 			case Status.STATUS_MARKED_ROLLBACK:
1: 				return MARKED_ROLLBACK;
1: 			case Status.STATUS_PREPARING:
1: 				return PREPARING;
1: 			case Status.STATUS_PREPARED:
1: 				return PREPARED;
1: 			case Status.STATUS_COMMITTING:
1: 				return COMMITTING;
1: 			case Status.STATUS_COMMITTED:
1: 				return COMMITTED;
1: 			case Status.STATUS_ROLLING_BACK:
1: 				return ROLLING_BACK;
1: 			case Status.STATUS_ROLLEDBACK:
1: 				return ROLLED_BACK;
1: 			default:
1: 				throw new TransactionException("Unable to determine the state of the transaction: " + status);
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public void preCompletion(Runnable job) throws IllegalStateException {
1: 		TransactionStatus status = getTransactionStatus();
1: 		if (status.compareTo(MARKED_ROLLBACK) > 0) {
1: 			throw new IllegalStateException("The current transaction is in state " + status);
1: 		}
1: 
1: 		preCompletion.add(job);
1: 	}
1: 
1: 	@Override
1: 	public void postCompletion(Consumer<TransactionStatus> job) throws IllegalStateException {
1: 		TransactionStatus status = getTransactionStatus();
1: 		if (status == COMMITTED || status == ROLLED_BACK) {
1: 			throw new IllegalStateException("The current transaction is in state " + status);
1: 		}
1: 
1: 		postCompletion.add(job);
1: 	}
1: 
1: 	@Override
0: 	public void registerXAResource(XAResource resource) {
1: 		TransactionStatus status = getTransactionStatus();
1: 		if (status.compareTo(MARKED_ROLLBACK) > 0) {
1: 			throw new IllegalStateException("The current transaction is in state " + status);
1: 		}
1: 		try {
0: 			currentTransaction.enlistResource(resource);
1: 		} catch (Exception e) {
1: 			throw new TransactionException("The transaction was unable to enlist a resource", e);
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public void registerLocalResource(LocalResource resource) {
1: 		TransactionStatus status = getTransactionStatus();
1: 		if (status.compareTo(MARKED_ROLLBACK) > 0) {
1: 			throw new IllegalStateException("The current transaction is in state " + status);
1: 		}
0: 		resources.add(resource);
1: 	}
1: 
1: 	@Override
1: 	public boolean supportsXA() {
1: 		return true;
1: 	}
1: 
1: 	@Override
1: 	public boolean supportsLocal() {
1: 		return true;
1: 	}
1: 
1: 	@Override
1: 	protected boolean isAlive() {
1: 		TransactionStatus status = getTransactionStatus();
1: 		return status != COMMITTED && status != ROLLED_BACK;
1: 	}
1: 
1: 	@Override
1: 	public void finish() {
1: 		
1: 		if(!resources.isEmpty()) {
1: 			XAResource localResource = new LocalXAResourceImpl();
1: 			try {
1: 				currentTransaction.enlistResource(localResource);
1: 			} catch (Exception e) {
1: 				safeSetRollbackOnly();
1: 				recordFailure(e);
1: 				try {
1: 					localResource.rollback(null);
1: 				} catch (XAException e1) {
1: 					recordFailure(e1);
1: 				}
1: 			}
1: 		}
1: 		
0: 		TxListener listener; 
0: 		boolean manualCallListener;
0: 		if(!preCompletion.isEmpty() || !postCompletion.isEmpty()) {
0: 			listener = new TxListener();
1: 			try {
0: 				transactionManager.registerInterposedSynchronization(listener);
0: 				manualCallListener = false;
1: 			} catch (Exception e) {
0: 				manualCallListener = true;
1: 				recordFailure(e);
1: 				safeSetRollbackOnly();
1: 			}
1: 		} else {
0: 			listener = null;
0: 			manualCallListener = false;
1: 		}
1: 		
1: 
1: 		try {
1: 			int status;
1: 			try {
1: 				if (getRollbackOnly()) {
1: 					// GERONIMO-4449 says that we get no beforeCompletion 
1: 					// callback for rollback :(
0: 					if(listener != null) {
0: 						listener.beforeCompletion();
1: 					}
1: 					transactionManager.rollback();
0: 					status = Status.STATUS_ROLLEDBACK;
0: 					completionState.set(ROLLED_BACK);
1: 				} else {
0: 					if(manualCallListener) {
0: 						listener.beforeCompletion();
1: 					}
1: 					transactionManager.commit();
0: 					status = Status.STATUS_COMMITTED;
0: 					completionState.set(COMMITTED);
1: 				}
1: 			} catch (Exception e) {
1: 				recordFailure(e);
0: 				status = Status.STATUS_ROLLEDBACK;
0: 				completionState.set(ROLLED_BACK);
1: 			}
0: 			if(manualCallListener) {
0: 				listener.afterCompletion(status);
1: 			}
1: 		} finally {
1: 			try {
1: 				transactionManager.resume(oldTran);
1: 			} catch (Exception e) {
1: 				recordFailure(e);
1: 			}
1: 		}
1: 	}
1: 	
1: 	private class LocalXAResourceImpl implements XAResource {
1: 
1: 		private final AtomicBoolean finished = new AtomicBoolean();
1: 		
1: 		@Override
1: 		public void commit(Xid xid, boolean onePhase) throws XAException {
1: 			if(!finished.compareAndSet(false, true)) {
1: 				return;
1: 			}
1: 			doCommit();
1: 		}
1: 
1: 		private void doCommit() throws XAException {
1: 			AtomicBoolean commit = new AtomicBoolean(true);
1: 			
1: 			List<LocalResource> committed = new ArrayList<>(resources.size());
1: 			List<LocalResource> rolledback = new ArrayList<>(0);
1: 
1: 			resources.stream().forEach(lr -> {
1: 				try {
1: 					if (commit.get()) {
1: 						lr.commit();
1: 						committed.add(lr);
1: 					} else {
1: 						lr.rollback();
1: 						rolledback.add(lr);
1: 					}
1: 				} catch (Exception e) {
1: 					recordFailure(e);
1: 					if (committed.isEmpty()) {
1: 						commit.set(false);
1: 						// This is needed to override the status from the
1: 						// Transaction, which thinks that we're committing
1: 						// until we throw an XAException from this commit.
1: 						completionState.set(ROLLING_BACK);
1: 					}
1: 					rolledback.add(lr);
1: 				}
1: 			});
1: 			
1: 			if(!rolledback.isEmpty()) {
1: 				if(committed.isEmpty()) {
1: 					throw (XAException) new XAException(XA_RBOTHER)
1: 						.initCause(firstUnexpectedException.get());
1: 				} else {
1: 					throw (XAException) new XAException(XA_HEURMIX)
1: 						.initCause(firstUnexpectedException.get());
1: 				}
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public void end(Xid xid, int flags) throws XAException {
1: 			//Nothing to do here
1: 		}
1: 
1: 		@Override
1: 		public void forget(Xid xid) throws XAException {
1: 			//Nothing to do here
1: 		}
1: 
1: 		@Override
1: 		public int getTransactionTimeout() throws XAException {
1: 			return 3600;
1: 		}
1: 
1: 		@Override
1: 		public boolean isSameRM(XAResource xares) throws XAException {
1: 			return this == xares;
1: 		}
1: 
1: 		@Override
1: 		public int prepare(Xid xid) throws XAException {
1: 			if(!finished.compareAndSet(false, true)) {
1: 				switch(getTransactionStatus()) {
1: 					case COMMITTING:
1: 						return XA_OK;
1: 					case ROLLING_BACK:
1: 						throw new XAException(XA_RBOTHER);
1: 					default:
1: 						throw new XAException(XA_RBPROTO);
1: 				}
1: 			}
1: 			completionState.set(COMMITTING);
1: 			doCommit();
1: 			return XA_OK;
1: 		}
1: 
1: 		@Override
1: 		public Xid[] recover(int flag) throws XAException {
1: 			return new Xid[0];
1: 		}
1: 
1: 		@Override
1: 		public void rollback(Xid xid) throws XAException {
1: 			if(!finished.compareAndSet(false, true)) {
1: 				return;
1: 			}
1: 			resources.stream().forEach(lr -> {
1: 				try {
1: 					lr.rollback();
1: 				} catch (Exception e) {
1: 					// TODO log this
1: 					recordFailure(e);
1: 				}
1: 			});
1: 		}
1: 
1: 		@Override
1: 		public boolean setTransactionTimeout(int seconds) throws XAException {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		public void start(Xid xid, int flags) throws XAException {
1: 			// Nothing to do here
1: 		}
1: 		
1: 	}
1: 	
1: 	private class TxListener implements Synchronization {
1: 
1: 		@Override
1: 		public void beforeCompletion() {
1: 			TransactionContextImpl.this.beforeCompletion(() -> safeSetRollbackOnly());
1: 		}
1: 
1: 		@Override
1: 		public void afterCompletion(int status) {
0: 			TransactionContextImpl.this.afterCompletion(status == Status.STATUS_COMMITTED ? COMMITTED : ROLLED_BACK);
1: 		}
1: 		
1: 	}
1: }
============================================================================