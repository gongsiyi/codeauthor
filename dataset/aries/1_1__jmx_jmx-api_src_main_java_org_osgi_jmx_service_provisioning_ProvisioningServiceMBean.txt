1:fdf3952: /*
1:fdf3952:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:fdf3952:  * 
1:fdf3952:  * Licensed under the Apache License, Version 2.0 (the "License");
1:fdf3952:  * you may not use this file except in compliance with the License.
1:fdf3952:  * You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing, software
1:fdf3952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  * See the License for the specific language governing permissions and
1:fdf3952:  * limitations under the License.
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: package org.osgi.jmx.service.provisioning;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * This MBean represents the management interface to the OSGi Initial
1:fdf3952:  * Provisioning Service
1:fdf3952:  * 
1:fdf3952:  * @version $Revision$
1:fdf3952:  * @ThreadSafe
1:fdf3952:  */
1:fdf3952: public interface ProvisioningServiceMBean {
1:fdf3952: 	/**
1:fdf3952: 	 * Provisioning MBean object name.
1:fdf3952: 	 */
1:fdf3952: 	String	OBJECTNAME	= JmxConstants.OSGI_COMPENDIUM
1:fdf3952: 								+ ":service=provisioning,version=1.2";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Processes the <code>ZipInputStream</code> contents of the provided
1:fdf3952: 	 * zipURL and extracts information to add to the Provisioning Information
1:fdf3952: 	 * dictionary, as well as, install/update and start bundles. This method
1:fdf3952: 	 * causes the <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
1:fdf3952: 	 * 
1:fdf3952: 	 * @param zipURL the String form of the URL that will be resolved into a
1:fdf3952: 	 *        <code>ZipInputStream</code> which will be used to add key/value
1:fdf3952: 	 *        pairs to the Provisioning Information dictionary and install and
1:fdf3952: 	 *        start bundles. If a <code>ZipEntry</code> does not have an
1:fdf3952: 	 *        <code>Extra</code> field that corresponds to one of the four
1:fdf3952: 	 *        defined MIME types (<code>MIME_STRING</code>,
1:fdf3952: 	 *        <code>MIME_BYTE_ARRAY</code>,<code>MIME_BUNDLE</code>, and
1:fdf3952: 	 *        <code>MIME_BUNDLE_URL</code>) in will be silently ignored.
1:fdf3952: 	 * @throws IOException if an error occurs while processing the
1:fdf3952: 	 *         ZipInputStream of the URL. No additions will be made to the
1:fdf3952: 	 *         Provisioning Information dictionary and no bundles must be
1:fdf3952: 	 *         started or installed.
1:fdf3952: 	 */
1:fdf3952: 	public void addInformationFromZip(String zipURL) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Adds the key/value pairs contained in <code>info</code> to the
1:fdf3952: 	 * Provisioning Information dictionary. This method causes the
1:fdf3952: 	 * <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
1:fdf3952: 	 * 
1:fdf3952: 	 * @see JmxConstants#PROPERTIES_TYPE for details of the Tabular Data
1:fdf3952: 	 * 
1:fdf3952: 	 * @param info the set of Provisioning Information key/value pairs to add to
1:fdf3952: 	 *        the Provisioning Information dictionary. Any keys are values that
1:fdf3952: 	 *        are of an invalid type will be silently ignored.
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	public void addInformation(TabularData info) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Returns a table representing the Provisioning Information Dictionary.
1:fdf3952: 	 * 
1:fdf3952: 	 * @see JmxConstants#PROPERTIES_TYPE for details of the Tabular Data
1:fdf3952: 	 * 
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 * @return The table representing the manager dictionary.
1:fdf3952: 	 */
1:fdf3952: 	public TabularData listInformation() throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Replaces the Provisioning Information dictionary with the entries of the
1:fdf3952: 	 * supplied table. This method causes the
1:fdf3952: 	 * <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
1:fdf3952: 	 * 
1:fdf3952: 	 * @see JmxConstants#PROPERTIES_TYPE for details of the Tabular Data
1:fdf3952: 	 * 
1:fdf3952: 	 * @param info the new set of Provisioning Information key/value pairs. Any
1:fdf3952: 	 *        keys are values that are of an invalid type will be silently
1:fdf3952: 	 *        ignored.
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 */
1:fdf3952: 	public void setInformation(TabularData info) throws IOException;
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.jmx.service.provisioning;
1: 
1: import java.io.IOException;
1: 
1: import javax.management.openmbean.TabularData;
1: 
1: import org.osgi.jmx.JmxConstants;
1: 
1: /**
1:  * This MBean represents the management interface to the OSGi Initial
1:  * Provisioning Service
1:  * 
1:  * @version $Revision$
1:  * @ThreadSafe
1:  */
1: public interface ProvisioningServiceMBean {
1: 	/**
1: 	 * Provisioning MBean object name.
1: 	 */
1: 	String	OBJECTNAME	= JmxConstants.OSGI_COMPENDIUM
1: 								+ ":service=provisioning,version=1.2";
1: 
1: 	/**
1: 	 * Processes the <code>ZipInputStream</code> contents of the provided
1: 	 * zipURL and extracts information to add to the Provisioning Information
1: 	 * dictionary, as well as, install/update and start bundles. This method
1: 	 * causes the <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
1: 	 * 
1: 	 * @param zipURL the String form of the URL that will be resolved into a
1: 	 *        <code>ZipInputStream</code> which will be used to add key/value
1: 	 *        pairs to the Provisioning Information dictionary and install and
1: 	 *        start bundles. If a <code>ZipEntry</code> does not have an
1: 	 *        <code>Extra</code> field that corresponds to one of the four
1: 	 *        defined MIME types (<code>MIME_STRING</code>,
1: 	 *        <code>MIME_BYTE_ARRAY</code>,<code>MIME_BUNDLE</code>, and
1: 	 *        <code>MIME_BUNDLE_URL</code>) in will be silently ignored.
1: 	 * @throws IOException if an error occurs while processing the
1: 	 *         ZipInputStream of the URL. No additions will be made to the
1: 	 *         Provisioning Information dictionary and no bundles must be
1: 	 *         started or installed.
1: 	 */
1: 	public void addInformationFromZip(String zipURL) throws IOException;
1: 
1: 	/**
1: 	 * Adds the key/value pairs contained in <code>info</code> to the
1: 	 * Provisioning Information dictionary. This method causes the
1: 	 * <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
1: 	 * 
1: 	 * @see JmxConstants#PROPERTIES_TYPE for details of the Tabular Data
1: 	 * 
1: 	 * @param info the set of Provisioning Information key/value pairs to add to
1: 	 *        the Provisioning Information dictionary. Any keys are values that
1: 	 *        are of an invalid type will be silently ignored.
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	public void addInformation(TabularData info) throws IOException;
1: 
1: 	/**
1: 	 * Returns a table representing the Provisioning Information Dictionary.
1: 	 * 
1: 	 * @see JmxConstants#PROPERTIES_TYPE for details of the Tabular Data
1: 	 * 
1: 	 * @throws IOException if the operation fails
1: 	 * @return The table representing the manager dictionary.
1: 	 */
1: 	public TabularData listInformation() throws IOException;
1: 
1: 	/**
1: 	 * Replaces the Provisioning Information dictionary with the entries of the
1: 	 * supplied table. This method causes the
1: 	 * <code>PROVISIONING_UPDATE_COUNT</code> to be incremented.
1: 	 * 
1: 	 * @see JmxConstants#PROPERTIES_TYPE for details of the Tabular Data
1: 	 * 
1: 	 * @param info the new set of Provisioning Information key/value pairs. Any
1: 	 *        keys are values that are of an invalid type will be silently
1: 	 *        ignored.
1: 	 * @throws IOException if the operation fails
1: 	 */
1: 	public void setInformation(TabularData info) throws IOException;
1: 
1: }
============================================================================