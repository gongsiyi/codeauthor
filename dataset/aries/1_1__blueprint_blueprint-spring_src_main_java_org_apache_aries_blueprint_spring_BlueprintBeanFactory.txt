1:8d9ae6e: /**
1:8d9ae6e:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:8d9ae6e:  *  contributor license agreements.  See the NOTICE file distributed with
1:8d9ae6e:  *  this work for additional information regarding copyright ownership.
1:8d9ae6e:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:8d9ae6e:  *  (the "License"); you may not use this file except in compliance with
1:8d9ae6e:  *  the License.  You may obtain a copy of the License at
1:8d9ae6e:  *
1:8d9ae6e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8d9ae6e:  *
1:8d9ae6e:  *  Unless required by applicable law or agreed to in writing, software
1:8d9ae6e:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:8d9ae6e:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d9ae6e:  *  See the License for the specific language governing permissions and
1:8d9ae6e:  *  limitations under the License.
1:8d9ae6e:  */
1:8d9ae6e: package org.apache.aries.blueprint.spring;
1:8d9ae6e: 
1:8d9ae6e: import java.util.Arrays;
1:8d9ae6e: import java.util.Collections;
1:8d9ae6e: import java.util.List;
1:8d9ae6e: 
1:8d9ae6e: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:8d9ae6e: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:8d9ae6e: import org.osgi.service.blueprint.container.NoSuchComponentException;
1:8d9ae6e: import org.osgi.service.blueprint.container.ReifiedType;
1:4a2cc5c: import org.osgi.service.blueprint.reflect.BeanArgument;
1:4a2cc5c: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:4a2cc5c: import org.osgi.service.blueprint.reflect.BeanProperty;
1:8d9ae6e: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:4a2cc5c: import org.osgi.service.blueprint.reflect.Metadata;
1:4a2cc5c: import org.osgi.service.blueprint.reflect.RefMetadata;
1:4a2cc5c: import org.osgi.service.blueprint.reflect.Target;
1:4a2cc5c: import org.osgi.service.blueprint.reflect.ValueMetadata;
1:8d9ae6e: import org.springframework.beans.BeansException;
1:8d9ae6e: import org.springframework.beans.factory.BeanDefinitionStoreException;
1:8d9ae6e: import org.springframework.beans.factory.BeanFactory;
1:8d9ae6e: import org.springframework.beans.factory.BeanNotOfRequiredTypeException;
1:8d9ae6e: import org.springframework.beans.factory.NoSuchBeanDefinitionException;
1:8d9ae6e: import org.springframework.beans.factory.config.BeanDefinition;
1:8d9ae6e: import org.springframework.beans.factory.support.DefaultListableBeanFactory;
1:8d9ae6e: import org.springframework.core.ResolvableType;
1:8d9ae6e: 
1:8d9ae6e: public class BlueprintBeanFactory extends DefaultListableBeanFactory {
1:8d9ae6e: 
1:8d9ae6e:     private final ExtendedBlueprintContainer container;
1:8d9ae6e: 
1:8d9ae6e:     public BlueprintBeanFactory(ExtendedBlueprintContainer container) {
1:8d9ae6e:         super(new WrapperBeanFactory(container));
1:8d9ae6e:         this.container = container;
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public <T> T getBean(Class<T> requiredType) throws BeansException {
1:8d9ae6e:         return super.getBean(requiredType);
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException {
1:8d9ae6e:         ComponentDefinitionRegistry registry = container.getComponentDefinitionRegistry();
1:8d9ae6e:         ComponentMetadata metadata = registry.getComponentDefinition(beanName);
1:8d9ae6e:         if (metadata != null && !(metadata instanceof SpringMetadata)) {
1:8d9ae6e:             throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,
1:8d9ae6e:                     "Cannot register bean definition [" + beanDefinition + "] for bean '" + beanName +
1:8d9ae6e:                             "': There is already bound.");
1:8d9ae6e:         }
1:8d9ae6e:         super.registerBeanDefinition(beanName, beanDefinition);
1:8d9ae6e:         if (!beanDefinition.isAbstract()) {
1:8d9ae6e:             registry.registerComponentDefinition(new SpringMetadata(beanName));
1:8d9ae6e:         }
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException {
1:8d9ae6e:         super.removeBeanDefinition(beanName);
1:8d9ae6e:     }
1:8d9ae6e: 
1:4a2cc5c:     public class SpringMetadata implements BeanMetadata {
1:8d9ae6e:         private final String beanName;
1:8d9ae6e: 
1:8d9ae6e:         public SpringMetadata(String beanName) {
1:8d9ae6e:             this.beanName = beanName;
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         public BeanDefinition getDefinition() {
1:8d9ae6e:             return getBeanDefinition(beanName);
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public String getId() {
1:8d9ae6e:             return beanName;
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public String getScope() {
1:8d9ae6e:             return getDefinition().isSingleton() ? SCOPE_SINGLETON : SCOPE_PROTOTYPE;
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public int getActivation() {
1:8d9ae6e:             return getDefinition().isLazyInit() ? ACTIVATION_LAZY : ACTIVATION_EAGER;
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public List<String> getDependsOn() {
1:8d9ae6e:             String[] dependson = getDefinition().getDependsOn();
1:8d9ae6e:             return dependson != null ? Arrays.asList(dependson) : Collections.<String>emptyList();
1:8d9ae6e:         }
1:4a2cc5c: 
1:4a2cc5c:         @Override
1:4a2cc5c:         public String getClassName() {
1:4a2cc5c:             return null;
1:4a2cc5c:         }
1:4a2cc5c: 
1:4a2cc5c:         @Override
1:4a2cc5c:         public String getInitMethod() {
1:4a2cc5c:             return null;
1:4a2cc5c:         }
1:4a2cc5c: 
1:4a2cc5c:         @Override
1:4a2cc5c:         public String getDestroyMethod() {
1:4a2cc5c:             return null;
1:4a2cc5c:         }
1:4a2cc5c: 
1:4a2cc5c:         @Override
1:4a2cc5c:         public List<BeanArgument> getArguments() {
1:4a2cc5c:             return Collections.<BeanArgument>singletonList(new BeanArgument() {
1:4a2cc5c:                 @Override
1:4a2cc5c:                 public Metadata getValue() {
1:4a2cc5c:                     return new ValueMetadata() {
1:4a2cc5c:                         @Override
1:4a2cc5c:                         public String getStringValue() {
1:4a2cc5c:                             return beanName;
1:4a2cc5c:                         }
1:4a2cc5c:                         @Override
1:4a2cc5c:                         public String getType() {
1:4a2cc5c:                             return null;
1:4a2cc5c:                         }
1:4a2cc5c:                     };
1:4a2cc5c:                 }
1:4a2cc5c:                 @Override
1:4a2cc5c:                 public String getValueType() {
1:4a2cc5c:                     return null;
1:4a2cc5c:                 }
1:4a2cc5c:                 @Override
1:4a2cc5c:                 public int getIndex() {
1:4a2cc5c:                     return -1;
1:4a2cc5c:                 }
1:4a2cc5c:             });
1:4a2cc5c:         }
1:4a2cc5c: 
1:4a2cc5c:         @Override
1:4a2cc5c:         public List<BeanProperty> getProperties() {
1:4a2cc5c:             return Collections.emptyList();
1:4a2cc5c:         }
1:4a2cc5c: 
1:4a2cc5c:         @Override
1:4a2cc5c:         public String getFactoryMethod() {
1:4a2cc5c:             return "getBean";
1:4a2cc5c:         }
1:4a2cc5c: 
1:4a2cc5c:         @Override
1:4a2cc5c:         public Target getFactoryComponent() {
1:4a2cc5c:             return new RefMetadata() {
1:4a2cc5c:                 @Override
1:4a2cc5c:                 public String getComponentId() {
1:4a2cc5c:                     return BlueprintNamespaceHandler.SPRING_BEAN_FACTORY_ID;
1:4a2cc5c:                 }
1:4a2cc5c:             };
1:4a2cc5c:         }
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e: 
1:8d9ae6e:     static class WrapperBeanFactory implements BeanFactory {
1:8d9ae6e: 
1:8d9ae6e:         private final ExtendedBlueprintContainer container;
1:8d9ae6e: 
1:8d9ae6e:         public WrapperBeanFactory(ExtendedBlueprintContainer container) {
1:8d9ae6e:             this.container = container;
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public Object getBean(String name) throws BeansException {
1:8d9ae6e:             try {
1:8d9ae6e:                 return container.getComponentInstance(name);
1:8d9ae6e:             } catch (NoSuchComponentException e) {
1:8d9ae6e:                 throw new NoSuchBeanDefinitionException(name);
1:8d9ae6e:             }
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @SuppressWarnings("unchecked")
1:8d9ae6e:         @Override
1:8d9ae6e:         public <T> T getBean(String name, Class<T> requiredType) throws BeansException {
1:8d9ae6e:             Object bean = getBean(name);
1:8d9ae6e:             if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) {
1:8d9ae6e:                 try {
1:8d9ae6e:                     bean = container.getConverter().convert(bean, new ReifiedType(requiredType));
1:8d9ae6e:                 } catch (Exception ex) {
1:8d9ae6e:                     throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
1:8d9ae6e:                 }
1:8d9ae6e:             }
1:8d9ae6e:             return (T) bean;
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public <T> T getBean(Class<T> requiredType) throws BeansException {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public Object getBean(String name, Object... args) throws BeansException {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public boolean containsBean(String name) {
1:8d9ae6e:             return container.getComponentIds().contains(name);
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public boolean isSingleton(String name) throws NoSuchBeanDefinitionException {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public boolean isPrototype(String name) throws NoSuchBeanDefinitionException {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public Class<?> getType(String name) throws NoSuchBeanDefinitionException {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e: 
1:8d9ae6e:         @Override
1:8d9ae6e:         public String[] getAliases(String name) {
1:8d9ae6e:             throw new UnsupportedOperationException();
1:8d9ae6e:         }
1:8d9ae6e:     }
1:8d9ae6e: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4a2cc5c
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.blueprint.reflect.BeanArgument;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.BeanProperty;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.RefMetadata;
1: import org.osgi.service.blueprint.reflect.Target;
1: import org.osgi.service.blueprint.reflect.ValueMetadata;
/////////////////////////////////////////////////////////////////////////
1:     public class SpringMetadata implements BeanMetadata {
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
1:         public String getClassName() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public String getInitMethod() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public String getDestroyMethod() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public List<BeanArgument> getArguments() {
1:             return Collections.<BeanArgument>singletonList(new BeanArgument() {
1:                 @Override
1:                 public Metadata getValue() {
1:                     return new ValueMetadata() {
1:                         @Override
1:                         public String getStringValue() {
1:                             return beanName;
1:                         }
1:                         @Override
1:                         public String getType() {
1:                             return null;
1:                         }
1:                     };
1:                 }
1:                 @Override
1:                 public String getValueType() {
1:                     return null;
1:                 }
1:                 @Override
1:                 public int getIndex() {
1:                     return -1;
1:                 }
1:             });
1:         }
1: 
1:         @Override
1:         public List<BeanProperty> getProperties() {
1:             return Collections.emptyList();
1:         }
1: 
1:         @Override
1:         public String getFactoryMethod() {
1:             return "getBean";
1:         }
1: 
1:         @Override
1:         public Target getFactoryComponent() {
1:             return new RefMetadata() {
1:                 @Override
1:                 public String getComponentId() {
1:                     return BlueprintNamespaceHandler.SPRING_BEAN_FACTORY_ID;
1:                 }
1:             };
1:         }
commit:8d9ae6e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.spring;
1: 
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
0: import org.apache.aries.blueprint.reflect.BeanMetadataImpl;
0: import org.apache.aries.blueprint.reflect.RefMetadataImpl;
0: import org.apache.aries.blueprint.reflect.ValueMetadataImpl;
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
0: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.service.blueprint.container.NoSuchComponentException;
1: import org.osgi.service.blueprint.container.ReifiedType;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.springframework.beans.BeansException;
1: import org.springframework.beans.factory.BeanDefinitionStoreException;
1: import org.springframework.beans.factory.BeanFactory;
1: import org.springframework.beans.factory.BeanNotOfRequiredTypeException;
1: import org.springframework.beans.factory.NoSuchBeanDefinitionException;
1: import org.springframework.beans.factory.config.BeanDefinition;
1: import org.springframework.beans.factory.support.DefaultListableBeanFactory;
1: import org.springframework.core.ResolvableType;
1: 
1: public class BlueprintBeanFactory extends DefaultListableBeanFactory {
1: 
1:     private final ExtendedBlueprintContainer container;
1: 
1:     public BlueprintBeanFactory(ExtendedBlueprintContainer container) {
1:         super(new WrapperBeanFactory(container));
1:         this.container = container;
1:     }
1: 
1:     @Override
1:     public <T> T getBean(Class<T> requiredType) throws BeansException {
1:         return super.getBean(requiredType);
1:     }
1: 
1:     @Override
1:     public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException {
1:         ComponentDefinitionRegistry registry = container.getComponentDefinitionRegistry();
1:         ComponentMetadata metadata = registry.getComponentDefinition(beanName);
1:         if (metadata != null && !(metadata instanceof SpringMetadata)) {
1:             throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,
1:                     "Cannot register bean definition [" + beanDefinition + "] for bean '" + beanName +
1:                             "': There is already bound.");
1:         }
1:         super.registerBeanDefinition(beanName, beanDefinition);
1:         if (!beanDefinition.isAbstract()) {
1:             registry.registerComponentDefinition(new SpringMetadata(beanName));
1:         }
1:     }
1: 
1:     @Override
1:     public void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException {
1:         super.removeBeanDefinition(beanName);
1:     }
1: 
0:     public class SpringMetadata extends BeanMetadataImpl {
1:         private final String beanName;
1: 
1:         public SpringMetadata(String beanName) {
1:             this.beanName = beanName;
0:             setFactoryComponent(new RefMetadataImpl(BlueprintNamespaceHandler.SPRING_BEAN_FACTORY_ID));
0:             setFactoryMethod("getBean");
0:             addArgument(new ValueMetadataImpl(beanName), null, -1);
1:         }
1: 
1:         public BeanDefinition getDefinition() {
1:             return getBeanDefinition(beanName);
1:         }
1: 
1:         @Override
1:         public String getId() {
1:             return beanName;
1:         }
1: 
1:         @Override
1:         public String getScope() {
1:             return getDefinition().isSingleton() ? SCOPE_SINGLETON : SCOPE_PROTOTYPE;
1:         }
1: 
1:         @Override
1:         public int getActivation() {
1:             return getDefinition().isLazyInit() ? ACTIVATION_LAZY : ACTIVATION_EAGER;
1:         }
1: 
1:         @Override
1:         public List<String> getDependsOn() {
1:             String[] dependson = getDefinition().getDependsOn();
1:             return dependson != null ? Arrays.asList(dependson) : Collections.<String>emptyList();
1:         }
1:     }
1: 
1: 
1:     static class WrapperBeanFactory implements BeanFactory {
1: 
1:         private final ExtendedBlueprintContainer container;
1: 
1:         public WrapperBeanFactory(ExtendedBlueprintContainer container) {
1:             this.container = container;
1:         }
1: 
1:         @Override
1:         public Object getBean(String name) throws BeansException {
1:             try {
1:                 return container.getComponentInstance(name);
1:             } catch (NoSuchComponentException e) {
1:                 throw new NoSuchBeanDefinitionException(name);
1:             }
1:         }
1: 
1:         @SuppressWarnings("unchecked")
1:         @Override
1:         public <T> T getBean(String name, Class<T> requiredType) throws BeansException {
1:             Object bean = getBean(name);
1:             if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) {
1:                 try {
1:                     bean = container.getConverter().convert(bean, new ReifiedType(requiredType));
1:                 } catch (Exception ex) {
1:                     throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
1:                 }
1:             }
1:             return (T) bean;
1:         }
1: 
1:         @Override
1:         public <T> T getBean(Class<T> requiredType) throws BeansException {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public Object getBean(String name, Object... args) throws BeansException {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public boolean containsBean(String name) {
1:             return container.getComponentIds().contains(name);
1:         }
1: 
1:         @Override
1:         public boolean isSingleton(String name) throws NoSuchBeanDefinitionException {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public boolean isPrototype(String name) throws NoSuchBeanDefinitionException {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public Class<?> getType(String name) throws NoSuchBeanDefinitionException {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         @Override
1:         public String[] getAliases(String name) {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: }
============================================================================