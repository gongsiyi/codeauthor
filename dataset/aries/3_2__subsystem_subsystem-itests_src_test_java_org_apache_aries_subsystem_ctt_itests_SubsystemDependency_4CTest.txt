1:3e9adfe: package org.apache.aries.subsystem.ctt.itests;
1:412c1f8: 
1:3e9adfe: import java.util.HashMap;
1:3e9adfe: import java.util.Map;
1:412c1f8: 
1:3e9adfe: import org.junit.Test;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:350ffa0: import org.osgi.framework.Bundle;
1:3e9adfe: import org.osgi.framework.Constants;
1:350ffa0: import org.osgi.service.subsystem.Subsystem;
1:3e9adfe: import org.osgi.service.subsystem.SubsystemConstants;
6:412c1f8: 
1:412c1f8: /*
1:412c1f8: C) Test with pre-installed transitive resources
1:412c1f8: - Register repository R1
1:412c1f8: - Using the Root subsystem, install a composite subsystem S1 with the following content bundles (with no import/export policy)
1:412c1f8:   - Bundle A
1:412c1f8:   - Bundle B
1:412c1f8: - Using the subsystem S1, install a composite S2 that imports package x, requires bundle A and required capability y
1:412c1f8: - Verify the wiring of C, D and E wire to A->x, A, B->y respectively 
1:412c1f8: - Verify no new bundles are installed into the Root or S1 subsystems
1:412c1f8: */
1:412c1f8: 
1:57b6627: @ExamReactorStrategy(PerMethod.class)
1:3e9adfe: public class SubsystemDependency_4CTest extends SubsystemDependencyTestBase 
1:350ffa0: {
1:3e9adfe: 	private static final String SUBSYSTEM_S1 = "sdt_composite.s1.esa";
1:350ffa0: 	private static final String SUBSYSTEM_S2 = "sdt_composite.s2.esa";
1:412c1f8: 	private Subsystem s1;
1:412c1f8: 	private Subsystem s2;
1:412c1f8: 	
1:57b6627: 	@Override
1:57b6627: 	protected void createApplications() throws Exception {
1:57b6627: 		super.createApplications();
1:57b6627: 		createSubsystemS1();
1:57b6627: 		createSubsystemS2();
1:350ffa0: 		registerRepositoryR1();
1:412c1f8: 	}
1:412c1f8: 	
1:412c1f8: 	// doing this within @Before doesn't work :(
1:412c1f8: 	private void startSubsystems() throws Exception
1:412c1f8: 	{ 
1:412c1f8: 		s1 = installSubsystemFromFile(SUBSYSTEM_S1);
1:412c1f8: 		startSubsystem(s1);
1:412c1f8: 		s2 = installSubsystemFromFile(s1, SUBSYSTEM_S2);
1:412c1f8: 		startSubsystem(s2);
1:412c1f8: 	}
1:412c1f8: 	
1:412c1f8: 	private void stopSubsystems() throws Exception
1:412c1f8: 	{
1:412c1f8: 		stopSubsystem(s2);
1:412c1f8: 		stopSubsystem(s1);
1:57b6627: 		//uninstallSubsystem(s2);
1:57b6627: 		//uninstallSubsystem(s1);
1:412c1f8: 	}
1:412c1f8: 	
1:350ffa0: 	// Using the subsystem S1, install a composite S2 that 
1:350ffa0: 	//   imports package x, 
1:350ffa0: 	//   requires bundle A 
1:350ffa0: 	//   and required capability y
1:350ffa0:     // - Verify the wiring of C, D and E wire to A->x, A, B->y respectively 
1:412c1f8: 
2:412c1f8: 	@Test
1:57b6627: 	public void verify() throws Exception
1:412c1f8: 	{
4:412c1f8: 		startSubsystems();
1:350ffa0: 		verifySinglePackageWiring (s2, BUNDLE_C, "x", BUNDLE_A);
1:412c1f8: 		verifyRequireBundleWiring (s2, BUNDLE_D, BUNDLE_A);
1:412c1f8: 		verifyCapabilityWiring (s2, BUNDLE_E, "y", BUNDLE_B);
3:412c1f8: 		stopSubsystems();
1:412c1f8: 	}
1:57b6627: 	
1:412c1f8: 	@Test
1:412c1f8: 	public void verifyNoUnexpectedBundlesProvisioned() throws Exception 
1:412c1f8: 	{ 
1:abf906b: 		Bundle[] rootBundlesBefore = bundleContext.getBundles();
1:abf906b: 		s1 = installSubsystemFromFile(SUBSYSTEM_S1);
1:abf906b: 		startSubsystem(s1);
1:abf906b: 		Bundle[] s1BundlesBefore = bundleContext.getBundles();
1:abf906b: 		s2 = installSubsystemFromFile(s1, SUBSYSTEM_S2);
1:abf906b: 		startSubsystem(s2);
1:abf906b: 		Bundle[] rootBundlesAfter = bundleContext.getBundles();
1:abf906b: 		Bundle[] s1BundlesAfter = bundleContext.getBundles();
1:abf906b: 		checkNoNewBundles ("rootBundles", rootBundlesBefore, rootBundlesAfter);
1:abf906b: 		checkNoNewBundles ("s1Bundles", s1BundlesBefore, s1BundlesAfter);
1:412c1f8: 		stopSubsystems();
1:412c1f8: 	}
1:412c1f8: 	
1:412c1f8: 	/*
1:350ffa0: 	 * a composite subsystem S1 with the following content bundles (with no import/export policy)
1:350ffa0:        - Bundle A
1:350ffa0:        - Bundle B
1:412c1f8: 	 */
1:3e9adfe: 	private static void createSubsystemS1() throws Exception
1:412c1f8: 	{
1:3e9adfe: 		Map<String, String> attributes = new HashMap<String, String>();
1:3e9adfe: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_S1);
1:3e9adfe: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:350ffa0: 		String appContent = BUNDLE_A + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1:350ffa0: 			+ ", " + BUNDLE_B + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\"";
1:350ffa0: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1:350ffa0: 		createManifest(SUBSYSTEM_S1 + ".mf", attributes);
1:350ffa0: 		createSubsystem(SUBSYSTEM_S1);
1:412c1f8: 	}
1:412c1f8: 	
2:350ffa0: 	/*
1:350ffa0: 	 * a composite S2 that 
1:350ffa0: 	 *  imports package x, 
1:350ffa0: 	 *  requires bundle A 
1:350ffa0: 	 *  and required capability y
1:350ffa0: 	 *  
1:350ffa0: 	 * Although the test plan is silent as to the content of S2, I think we have to assume
1:350ffa0: 	 * that it contains bundles C, D and E
2:350ffa0: 	 */
1:350ffa0: 	private static void createSubsystemS2() throws Exception
1:412c1f8: 	{
1:350ffa0: 		Map<String, String> attributes = new HashMap<String, String>();
1:350ffa0: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_S2);
1:350ffa0: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:3e9adfe: 		String appContent = BUNDLE_C + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1:3e9adfe: 			+ ", " + BUNDLE_D + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1:3e9adfe: 			+ ", " + BUNDLE_E + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\"";
1:3e9adfe: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1:412c1f8: 		
1:3e9adfe: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1:3e9adfe: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
1:412c1f8: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y"); 
1:412c1f8: 		
1:350ffa0: 		createManifest(SUBSYSTEM_S2 + ".mf", attributes);
1:350ffa0: 		createSubsystem(SUBSYSTEM_S2);
1:412c1f8: 	}
1:412c1f8: 
1:412c1f8: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
/////////////////////////////////////////////////////////////////////////
1: @ExamReactorStrategy(PerMethod.class)
1: 	@Override
1: 	protected void createApplications() throws Exception {
1: 		super.createApplications();
1: 		createSubsystemS1();
1: 		createSubsystemS2();
/////////////////////////////////////////////////////////////////////////
1: 		//uninstallSubsystem(s2);
1: 		//uninstallSubsystem(s1);
/////////////////////////////////////////////////////////////////////////
1: 	public void verify() throws Exception
1: 	
author:John Ross
-------------------------------------------------------------------------------
commit:47cea41
/////////////////////////////////////////////////////////////////////////
commit:f313673
/////////////////////////////////////////////////////////////////////////
0: 		"org.osgi.service.subsystem.region.context.0", "pax-exam-probe",
0: 		"wrap_mvn_org.ops4j.pax.exam_pax-exam-junit_1.2.3", "org.apache.aries.subsystem.itest.interfaces"});
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:abf906b
/////////////////////////////////////////////////////////////////////////
1: 		Bundle[] rootBundlesBefore = bundleContext.getBundles();
1: 		s1 = installSubsystemFromFile(SUBSYSTEM_S1);
1: 		startSubsystem(s1);
1: 		Bundle[] s1BundlesBefore = bundleContext.getBundles();
1: 		s2 = installSubsystemFromFile(s1, SUBSYSTEM_S2);
1: 		startSubsystem(s2);
1: 		Bundle[] rootBundlesAfter = bundleContext.getBundles();
1: 		Bundle[] s1BundlesAfter = bundleContext.getBundles();
1: 		checkNoNewBundles ("rootBundles", rootBundlesBefore, rootBundlesAfter);
1: 		checkNoNewBundles ("s1Bundles", s1BundlesBefore, s1BundlesAfter);
commit:50c405c
/////////////////////////////////////////////////////////////////////////
commit:412c1f8
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
0: import java.util.Arrays;
0: import java.util.Collection;
0: import org.osgi.framework.BundleContext;
1: /*
1: C) Test with pre-installed transitive resources
1: - Register repository R1
1: - Using the Root subsystem, install a composite subsystem S1 with the following content bundles (with no import/export policy)
1:   - Bundle A
1:   - Bundle B
1: - Using the subsystem S1, install a composite S2 that imports package x, requires bundle A and required capability y
1: - Verify the wiring of C, D and E wire to A->x, A, B->y respectively 
1: - Verify no new bundles are installed into the Root or S1 subsystems
1: */
1: 
1: 	private Subsystem s1;
1: 	private Subsystem s2;
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		
1: 	}
1: 	
1: 	// doing this within @Before doesn't work :(
1: 	private void startSubsystems() throws Exception
1: 	{ 
0: 		System.out.println ("into verifyCinS1WiresToAxInS2");
1: 		
1: 		s1 = installSubsystemFromFile(SUBSYSTEM_S1);
1: 		startSubsystem(s1);
1: 		
0: 		System.out.println ("s1 started");
1: 		
1: 		s2 = installSubsystemFromFile(s1, SUBSYSTEM_S2);
1: 		startSubsystem(s2);
1: 		
0: 		System.out.println ("s2 started");
1: 	}
1: 	
1: 	private void stopSubsystems() throws Exception
1: 	{
1: 		stopSubsystem(s2);
0: 		System.out.println ("s2 stopped");
1: 		
1: 		stopSubsystem(s1);
0: 		System.out.println ("s1 stopped");
1: 		
0: 		uninstallSubsystem(s2);
0: 		System.out.println ("s2 uninstalled");
1: 		
0: 		uninstallSubsystem(s1);
0: 		System.out.println ("s1 uninstalled");
/////////////////////////////////////////////////////////////////////////
1: 		startSubsystems();
1: 		stopSubsystems();
1: 	}
1: 	
1: 	@Test
0: 	public void verifyBundleDWiredToBundleA() throws Exception
1: 	{
1: 		startSubsystems();
1: 		verifyRequireBundleWiring (s2, BUNDLE_D, BUNDLE_A);
1: 		stopSubsystems();
1: 	}
1: 	
1: 	@Test
0: 	public void verifyBundleEWiredToCapability_yFromBundleB() throws Exception
1: 	{
1: 		startSubsystems();
1: 		verifyCapabilityWiring (s2, BUNDLE_E, "y", BUNDLE_B);
1: 		stopSubsystems();
1: 	}
1: 	
1: 	/*
0: 	 *  Verify no new bundles are installed into the Root or S1 subsystems 
1: 	 */
1: 	
0: 	private static final Collection<String> _expectedRootRegionBundles = Arrays.asList(new String[]{ 
0: 		"org.eclipse.osgi", "org.ops4j.pax.exam", "org.ops4j.pax.exam.junit.extender", 
0: 		"org.ops4j.pax.exam.junit.extender.impl", "org.ops4j.pax.logging.pax-logging-api", 
0: 		"org.ops4j.pax.logging.pax-logging-service", "org.ops4j.pax.url.mvn", 
0: 		"org.eclipse.osgi.services", "org.eclipse.equinox.region", 
0: 		"org.apache.aries.testsupport.unit", "org.apache.aries.application.api", 
0: 		"org.apache.aries.util", "org.apache.aries.application.utils", 
0: 		"org.apache.felix.bundlerepository", "org.apache.felix.resolver", 
0: 		"org.eclipse.equinox.coordinator", "org.eclipse.equinox.event", 
0: 		"org.apache.aries.subsystem.api", "org.apache.aries.subsystem.core", 
0: 		"com.springsource.org.junit", "org.ops4j.pax.exam.rbc", 
0: 		"org.osgi.service.subsystem.region.context.0", "pax-exam-probe"});
1: 	
0: 	private static final Collection<String> _expectedS1RegionBundles = Arrays.asList(new String[] { 
0: 			BUNDLE_A, BUNDLE_B, "org.osgi.service.subsystem.region.context.1"});
1: 
1: 	@Test
1: 	public void verifyNoUnexpectedBundlesProvisioned() throws Exception 
1: 	{ 
1: 		startSubsystems();
0: 		checkSubsystemContents ("Root", bundleContext,_expectedRootRegionBundles);
0: 		BundleContext s1Context = s1.getBundleContext();
0: 		checkSubsystemContents ("S1", s1Context, _expectedS1RegionBundles);
1: 		stopSubsystems();
1: 	}
1: 	
0: 	private void checkSubsystemContents (String subsystemName, BundleContext subsystemContext, Collection<String> expectedBundleNames ) 
1: 	{ 
0: 		Bundle[] regionBundles = subsystemContext.getBundles();
0: 		if (expectedBundleNames.size() != regionBundles.length) { 
0: 			fail ("Wrong number of bundles in the " + subsystemName + " subsystem." 
0: 				+ " Expected " + expectedBundleNames.size() + " bundles: " + expectedBundleNames
0: 				+ " Found " + regionBundles.length + " bundles: " + Arrays.toString(regionBundles));
1: 		}
0: 		for (Bundle b: regionBundles) {
0: 			String bsn = b.getSymbolicName();
0: 			assertTrue ("Unexpected bundle found in " + subsystemName + " subsystem: " + bsn, expectedBundleNames.contains(bsn));
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y"); 
commit:350ffa0
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE;
0: 
0: import java.util.List;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.wiring.BundleWire;
0: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.service.subsystem.Subsystem;
/////////////////////////////////////////////////////////////////////////
1: 	private static final String SUBSYSTEM_S2 = "sdt_composite.s2.esa";
0: 
/////////////////////////////////////////////////////////////////////////
0: 			createSubsystemS2();
1: 		registerRepositoryR1();
1: 	// Using the subsystem S1, install a composite S2 that 
1: 	//   imports package x, 
1: 	//   requires bundle A 
1: 	//   and required capability y
1:     // - Verify the wiring of C, D and E wire to A->x, A, B->y respectively 
0: 
0: 	public void verifyCinS1WiresToAxInS2() throws Exception
0: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_S1);
0: 		startSubsystem(s1); 
0: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_S2);
0: 		startSubsystem(s2); 
1: 		verifySinglePackageWiring (s2, BUNDLE_C, "x", BUNDLE_A);
0: 		
0: 		stopSubsystem(s2);
0: 		stopSubsystem(s1);
1: 	/*
1: 	 * a composite subsystem S1 with the following content bundles (with no import/export policy)
1:        - Bundle A
1:        - Bundle B
1: 	 */
1: 		String appContent = BUNDLE_A + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1: 			+ ", " + BUNDLE_B + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\"";
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1: 		createManifest(SUBSYSTEM_S1 + ".mf", attributes);
1: 		createSubsystem(SUBSYSTEM_S1);
0: 	}
0: 	
1: 	/*
1: 	 * a composite S2 that 
1: 	 *  imports package x, 
1: 	 *  requires bundle A 
1: 	 *  and required capability y
1: 	 *  
1: 	 * Although the test plan is silent as to the content of S2, I think we have to assume
1: 	 * that it contains bundles C, D and E
1: 	 */
1: 	private static void createSubsystemS2() throws Exception
1: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_S2);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
0: 		
0: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y;filter:=\"(bug=true)\""); 
0: 		// ;filter:=\"(bug=true)\" still required even after ARIES-825 revision 1356872
0: 		
1: 		createManifest(SUBSYSTEM_S2 + ".mf", attributes);
1: 		createSubsystem(SUBSYSTEM_S2);
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.ctt.itests;
0: 
1: import java.util.HashMap;
1: import java.util.Map;
0: 
0: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.SubsystemConstants;
0: 
1: public class SubsystemDependency_4CTest extends SubsystemDependencyTestBase 
0: {
0: 	/*
0: 	 C) Test with pre-installed transitive resources
0:      - Register repository R1
0:      - Using the Root subsystem, install a composite subsystem S1 with the following content bundles (with no import/export policy)
0:        - Bundle A
0:        - Bundle B
0:      - Using the subsystem S1, install a composite S2 that imports package x, requires bundle A and required capability y
0:      - Verify the wiring of C, D and E wire to A->x, A, B->y respectively 
0:      - Verify no new bundles are installed into the Root or S1 subsystems
0: 	 */
1: 	private static final String SUBSYSTEM_S1 = "sdt_composite.s1.esa";
0: 	
0: 	private static boolean _testSubsystemCreated = false;
0: 	@Before
0: 	public void setUp() throws Exception
0: 	{ 
0: 		super.setUp();
0: 		if (!_testSubsystemCreated) { 
0: 			createSubsystemS1();
0: 			_testSubsystemCreated = true;
0: 		}
0: 	}
0: 	
0: 	@Test
0: 	public void verifyCinS1WiresToAxInS2() 
0: 	{
0: 		
0: 	}
0: 	
1: 	private static void createSubsystemS1() throws Exception
0: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_S1);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		String appContent = BUNDLE_C + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1: 			+ ", " + BUNDLE_D + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1: 			+ ", " + BUNDLE_E + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\"";
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
0: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y;filter:=\"(bug=true)\"");
0: 		createManifest(SUBSYSTEM_S1 + ".mf", attributes);
0: 		createSubsystem(SUBSYSTEM_S1);
0: 	}
0: 
0: }
============================================================================