1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:225bcae: package org.apache.aries.subsystem.core.internal;
2:225bcae: 
1:777b216: import java.io.File;
1:225bcae: import java.util.ArrayList;
1:777b216: import java.util.Arrays;
1:225bcae: import java.util.Collection;
1:225bcae: import java.util.Collections;
1:777b216: import java.util.Comparator;
1:225bcae: import java.util.HashMap;
1:225bcae: import java.util.HashSet;
1:777b216: import java.util.List;
1:225bcae: import java.util.Map;
1:225bcae: import java.util.Set;
1:225bcae: 
1:71ee087: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1:5c35e50: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
1:ed5f3dc: import org.osgi.framework.Bundle;
1:777b216: import org.osgi.framework.BundleContext;
1:777b216: import org.osgi.framework.wiring.BundleRevision;
1:225bcae: import org.osgi.resource.Resource;
1:777b216: import org.osgi.service.coordinator.Coordination;
1:225bcae: import org.osgi.service.subsystem.Subsystem;
1:777b216: import org.osgi.service.subsystem.SubsystemException;
1:225bcae: 
1:225bcae: public class Subsystems {
1:5bd3bf6: 	private BasicSubsystem root;
1:777b216: 	private volatile SubsystemGraph graph;
1:777b216: 	
1:5bd3bf6: 	private final Map<Long, BasicSubsystem> idToSubsystem = new HashMap<Long, BasicSubsystem>();
1:5bd3bf6: 	private final Map<String, BasicSubsystem> locationToSubsystem = new HashMap<String, BasicSubsystem>();
1:225bcae: 	private final ResourceReferences resourceReferences = new ResourceReferences();
1:5bd3bf6: 	private final Map<BasicSubsystem, Set<Resource>> subsystemToConstituents = new HashMap<BasicSubsystem, Set<Resource>>();
1:225bcae: 	
1:5bd3bf6: 	public void addChild(BasicSubsystem parent, BasicSubsystem child, boolean referenceCount) {
1:225bcae: 		graph.add(parent, child);
1:307d743: 		child.addedParent(parent, referenceCount);
1:2b13b05: 	}
1:225bcae: 	
1:5bd3bf6: 	public void addConstituent(BasicSubsystem subsystem, Resource constituent, boolean referenced) {
1:225bcae: 		synchronized (subsystemToConstituents) {
1:225bcae: 			Set<Resource> constituents = subsystemToConstituents.get(subsystem);
1:225bcae: 			if (constituents == null) {
1:225bcae: 				constituents = new HashSet<Resource>();
1:225bcae: 				subsystemToConstituents.put(subsystem, constituents);
7:225bcae: 			}
1:777b216: 			constituents.add(constituent);
1:225bcae: 		}
1:391a1aa: 		subsystem.addedConstituent(constituent, referenced);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public void addReference(BasicSubsystem subsystem, Resource resource) {
1:225bcae: 		resourceReferences.addReference(subsystem, resource);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public void addSubsystem(BasicSubsystem subsystem) {
1:225bcae: 		synchronized (idToSubsystem) {
1:225bcae: 			synchronized (locationToSubsystem) {
1:225bcae: 				addIdToSubsystem(subsystem);
1:225bcae: 				addLocationToSubsystem(subsystem);
1:225bcae: 			}
1:225bcae: 		}
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public Collection<Subsystem> getChildren(BasicSubsystem parent) {
1:225bcae: 		return graph.getChildren(parent);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public Collection<Resource> getConstituents(BasicSubsystem subsystem) {
1:225bcae: 		synchronized (subsystemToConstituents) {
1:225bcae: 			Collection<Resource> result = subsystemToConstituents.get(subsystem);
1:225bcae: 			if (result == null)
1:225bcae: 				return Collections.emptyList();
1:777b216: 			return Collections.unmodifiableCollection(new ArrayList<Resource>(result));
1:225bcae: 		}
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public Collection<Subsystem> getParents(BasicSubsystem child) {
1:225bcae: 		return graph.getParents(child);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public Collection<Resource> getResourcesReferencedBy(BasicSubsystem subsystem) {
1:225bcae: 		return resourceReferences.getResources(subsystem);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public synchronized BasicSubsystem getRootSubsystem() {
1:777b216: 		if (root == null) {
1:777b216: 			File file = Activator.getInstance().getBundleContext().getDataFile("");
1:777b216: 			File[] fileArray = file.listFiles();
1:777b216: 			List<File> fileList = new ArrayList<File>(Arrays.asList(fileArray));
1:777b216: 			Collections.sort(fileList, new Comparator<File>() {
1:777b216: 				@Override
1:777b216: 				public int compare(File file1, File file2) {
1:777b216: 					String name1 = file1.getName();
1:777b216: 					String name2 = file2.getName();
1:777b216: 					return Long.valueOf(name1).compareTo(Long.valueOf(name2));
1:777b216: 				}
1:777b216: 			});
1:777b216: 			if (fileList.isEmpty()) {
1:391a1aa: 				// There are no persisted subsystems, including root.
1:777b216: 				SubsystemResource resource;
1:777b216: 				try {
1:777b216: 					resource = new SubsystemResource(file);
1:777b216: 				}
1:777b216: 				catch (SubsystemException e) {
1:777b216: 					throw e;
1:777b216: 				}
1:777b216: 				catch (Exception e) {
1:777b216: 					throw new SubsystemException(e);
1:777b216: 				}
1:777b216: 				Coordination coordination = Utils.createCoordination();
1:777b216: 				try {
1:5bd3bf6: 					root = new BasicSubsystem(resource);
1:307d743: 					// TODO This initialization is a bit brittle. The root subsystem
1:307d743: 					// must be gotten before anything else will be able to use the
1:307d743: 					// graph. At the very least, throw IllegalStateException where
1:307d743: 					// appropriate.
1:307d743: 					graph = new SubsystemGraph(root);
1:e341c9b: 					ResourceInstaller.newInstance(coordination, root, root).install();
1:56040b4: 					populateRootSubsystem(root, coordination);
1:777b216: 				} catch (Exception e) {
1:777b216: 					coordination.fail(e);
1:777b216: 				} finally {
1:777b216: 					coordination.end();
1:777b216: 				}
1:777b216: 			}
2:777b216: 			else {
1:391a1aa: 				// There are persisted subsystems.
1:777b216: 				Coordination coordination = Utils.createCoordination();
1:5bd3bf6: 				Collection<BasicSubsystem> subsystems = new ArrayList<BasicSubsystem>(fileList.size());
1:777b216: 				try {
1:777b216: 					for (File f : fileList) {
1:5bd3bf6: 						BasicSubsystem s = new BasicSubsystem(f);
1:777b216: 						subsystems.add(s);
1:777b216: 						addSubsystem(s);
1:777b216: 					}
1:777b216: 					root = getSubsystemById(0);
1:71ee087: 					SubsystemIdentifier.setLastId(
1:71ee087: 							Long.parseLong(
1:71ee087: 									root.getDeploymentManifest().getHeaders().get(
1:71ee087: 											DeploymentManifest.ARIESSUBSYSTEM_LASTID).getValue()));
2:777b216: 					graph = new SubsystemGraph(root);
1:e341c9b: 					ResourceInstaller.newInstance(coordination, root, root).install();
1:56040b4: 					populateRootSubsystem(root, coordination);
1:777b216: 				} catch (Exception e) {
1:777b216: 					coordination.fail(e);
1:777b216: 				} finally {
1:777b216: 					coordination.end();
1:225bcae: 				}
1:225bcae: 			}
1:225bcae: 		}
1:225bcae: 		return root;
1:225bcae: 	}
1:225bcae: 	
1:56040b4: 	private void populateRootSubsystem(BasicSubsystem root, Coordination coordination) throws Exception {
1:56040b4: 		// TODO Begin proof of concept.
1:56040b4: 		// This is a proof of concept for initializing the relationships between the root subsystem and bundles
1:56040b4: 		// that already existed in its region. Not sure this will be the final resting place. Plus, there are issues
1:56040b4: 		// since this does not take into account the possibility of already existing bundles going away or new bundles
1:56040b4: 		// being installed out of band while this initialization is taking place. Need a bundle event hook for that.
1:56040b4: 		BundleContext context = Activator.getInstance().getBundleContext().getBundle(org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext();
1:56040b4: 		for (Bundle bundle : context.getBundles()) {
1:56040b4: 			BundleRevision revision = bundle.adapt(BundleRevision.class);
1:aa4b17c: 			if (revision == null)
1:aa4b17c: 				// The bundle has been uninstalled. Do not process.
1:aa4b17c: 				continue;
1:56040b4: 			if (!resourceReferences.getSubsystems(revision).isEmpty())
1:56040b4: 				continue;
1:56040b4: 			ResourceInstaller.newInstance(coordination, revision, root).install();
1:56040b4: 		}
1:56040b4: 		// TODO End proof of concept.
1:56040b4: 	}
1:56040b4: 	
1:5bd3bf6: 	public BasicSubsystem getSubsystemById(long id) {
1:225bcae: 		synchronized (idToSubsystem) {
1:225bcae: 			return idToSubsystem.get(id);
1:777b216: 		}
1:777b216: 	}
1:225bcae: 	
1:5bd3bf6: 	public BasicSubsystem getSubsystemByLocation(String location) {
1:225bcae: 		synchronized (locationToSubsystem) {
1:225bcae: 			return locationToSubsystem.get(location);
1:777b216: 		}
1:777b216: 	}
1:225bcae: 	
1:5bd3bf6: 	public Collection<BasicSubsystem> getSubsystems() {
1:5bd3bf6: 		return new ArrayList<BasicSubsystem>(idToSubsystem.values());
1:777b216: 	}
1:225bcae: 	
1:5c35e50: 	// TODO Not very pretty. A quick fix.
1:5c35e50: 	public Object[] getSubsystemsByBundle(Bundle bundle) {
1:5c35e50: 		BundleRevision revision = null;
1:5c35e50: 		ArrayList<BasicSubsystem> result = new ArrayList<BasicSubsystem>();
1:5c35e50: 		synchronized (subsystemToConstituents) {
1:5c35e50: 			for (BasicSubsystem subsystem : subsystemToConstituents.keySet()) {
1:5c35e50: 				for (Resource constituent : getConstituents(subsystem)) {
1:5c35e50: 					if (constituent instanceof BundleConstituent &&
1:5c35e50: 							((BundleConstituent)constituent).getBundle() == bundle) {
1:5c35e50: 						result.add(subsystem);
1:5c35e50: 						revision = ((BundleConstituent)constituent).getRevision();
1:5c35e50: 					}
1:5c35e50: 				}	
1:5c35e50: 			}
1:5c35e50: 		}
1:5c35e50: 		result.trimToSize();
1:5c35e50: 		if (revision == null)
1:5c35e50: 			return null;
1:5c35e50: 		return new Object[]{revision, result};
1:5c35e50: 	}
1:5c35e50: 	
1:5bd3bf6: 	public Collection<BasicSubsystem> getSubsystemsByConstituent(Resource constituent) {
1:5bd3bf6: 		ArrayList<BasicSubsystem> result = new ArrayList<BasicSubsystem>();
1:225bcae: 		synchronized (subsystemToConstituents) {
1:5bd3bf6: 			for (BasicSubsystem subsystem : subsystemToConstituents.keySet())
1:777b216: 				if (getConstituents(subsystem).contains(constituent))
1:225bcae: 					result.add(subsystem);
1:777b216: 		}
1:225bcae: 		result.trimToSize();
1:225bcae: 		return result;
1:777b216: 	}
1:225bcae: 	
1:5bd3bf6: 	public Collection<BasicSubsystem> getSubsystemsReferencing(Resource resource) {
1:225bcae: 		return resourceReferences.getSubsystems(resource);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public void removeChild(BasicSubsystem child) {
1:225bcae: 		graph.remove(child);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public void removeChild(BasicSubsystem parent, BasicSubsystem child) {
1:225bcae: 		graph.remove(parent, child);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public void removeConstituent(BasicSubsystem subsystem, Resource constituent) {
1:225bcae: 		synchronized (subsystemToConstituents) {
1:225bcae: 			Set<Resource> constituents = subsystemToConstituents.get(subsystem);
1:8481849: 			if (constituents != null) {
1:8481849: 				constituents.remove(constituent);
1:8481849: 				if (constituents.isEmpty())
1:8481849: 					subsystemToConstituents.remove(subsystem);
1:8481849: 			}
1:225bcae: 		}
1:777b216: 		subsystem.removedContent(constituent);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public void removeReference(BasicSubsystem subsystem, Resource resource) {
1:225bcae: 		resourceReferences.removeReference(subsystem, resource);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	public void removeSubsystem(BasicSubsystem subsystem) {
1:225bcae: 		synchronized (idToSubsystem) {
1:225bcae: 			synchronized (locationToSubsystem) {
1:225bcae: 				removeLocationToSubsystem(subsystem);
1:225bcae: 				removeIdToSubsystem(subsystem);
1:225bcae: 			}
1:225bcae: 		}
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	private void addIdToSubsystem(BasicSubsystem subsystem) {
1:225bcae: 		long id = subsystem.getSubsystemId();
1:225bcae: 		idToSubsystem.put(id, subsystem);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	private void addLocationToSubsystem(BasicSubsystem subsystem) {
1:225bcae: 		String location = subsystem.getLocation();
1:225bcae: 		locationToSubsystem.put(location, subsystem);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	private void removeIdToSubsystem(BasicSubsystem subsystem) {
1:225bcae: 		long id = subsystem.getSubsystemId();
1:777b216: 		idToSubsystem.remove(id);
1:225bcae: 	}
1:225bcae: 	
1:5bd3bf6: 	private void removeLocationToSubsystem(BasicSubsystem subsystem) {
1:225bcae: 		String location = subsystem.getLocation();
1:777b216: 		locationToSubsystem.remove(location);
1:225bcae: 	}
1:225bcae: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:71ee087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
/////////////////////////////////////////////////////////////////////////
1: 					SubsystemIdentifier.setLastId(
1: 							Long.parseLong(
1: 									root.getDeploymentManifest().getHeaders().get(
1: 											DeploymentManifest.ARIESSUBSYSTEM_LASTID).getValue()));
commit:aa4b17c
/////////////////////////////////////////////////////////////////////////
1: 			if (revision == null)
1: 				// The bundle has been uninstalled. Do not process.
1: 				continue;
commit:5c35e50
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
/////////////////////////////////////////////////////////////////////////
1: 	// TODO Not very pretty. A quick fix.
1: 	public Object[] getSubsystemsByBundle(Bundle bundle) {
1: 		BundleRevision revision = null;
1: 		ArrayList<BasicSubsystem> result = new ArrayList<BasicSubsystem>();
1: 		synchronized (subsystemToConstituents) {
1: 			for (BasicSubsystem subsystem : subsystemToConstituents.keySet()) {
1: 				for (Resource constituent : getConstituents(subsystem)) {
1: 					if (constituent instanceof BundleConstituent &&
1: 							((BundleConstituent)constituent).getBundle() == bundle) {
1: 						result.add(subsystem);
1: 						revision = ((BundleConstituent)constituent).getRevision();
1: 					}
1: 				}	
1: 			}
1: 		}
1: 		result.trimToSize();
1: 		if (revision == null)
1: 			return null;
1: 		return new Object[]{revision, result};
1: 	}
1: 	
commit:56040b4
/////////////////////////////////////////////////////////////////////////
1: 					populateRootSubsystem(root, coordination);
/////////////////////////////////////////////////////////////////////////
1: 					populateRootSubsystem(root, coordination);
/////////////////////////////////////////////////////////////////////////
1: 	private void populateRootSubsystem(BasicSubsystem root, Coordination coordination) throws Exception {
1: 		// TODO Begin proof of concept.
1: 		// This is a proof of concept for initializing the relationships between the root subsystem and bundles
1: 		// that already existed in its region. Not sure this will be the final resting place. Plus, there are issues
1: 		// since this does not take into account the possibility of already existing bundles going away or new bundles
1: 		// being installed out of band while this initialization is taking place. Need a bundle event hook for that.
1: 		BundleContext context = Activator.getInstance().getBundleContext().getBundle(org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext();
1: 		for (Bundle bundle : context.getBundles()) {
1: 			BundleRevision revision = bundle.adapt(BundleRevision.class);
1: 			if (!resourceReferences.getSubsystems(revision).isEmpty())
1: 				continue;
1: 			ResourceInstaller.newInstance(coordination, revision, root).install();
1: 		}
1: 		// TODO End proof of concept.
1: 	}
1: 	
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	private BasicSubsystem root;
1: 	private final Map<Long, BasicSubsystem> idToSubsystem = new HashMap<Long, BasicSubsystem>();
1: 	private final Map<String, BasicSubsystem> locationToSubsystem = new HashMap<String, BasicSubsystem>();
1: 	private final Map<BasicSubsystem, Set<Resource>> subsystemToConstituents = new HashMap<BasicSubsystem, Set<Resource>>();
1: 	public void addChild(BasicSubsystem parent, BasicSubsystem child, boolean referenceCount) {
1: 	public void addConstituent(BasicSubsystem subsystem, Resource constituent, boolean referenced) {
/////////////////////////////////////////////////////////////////////////
1: 	public void addReference(BasicSubsystem subsystem, Resource resource) {
1: 	public void addSubsystem(BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	public Collection<Subsystem> getChildren(BasicSubsystem parent) {
1: 	public Collection<Resource> getConstituents(BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	public Collection<Subsystem> getParents(BasicSubsystem child) {
1: 	public Collection<Resource> getResourcesReferencedBy(BasicSubsystem subsystem) {
1: 	public synchronized BasicSubsystem getRootSubsystem() {
/////////////////////////////////////////////////////////////////////////
1: 					root = new BasicSubsystem(resource);
/////////////////////////////////////////////////////////////////////////
1: 				Collection<BasicSubsystem> subsystems = new ArrayList<BasicSubsystem>(fileList.size());
1: 						BasicSubsystem s = new BasicSubsystem(f);
/////////////////////////////////////////////////////////////////////////
1: 	public BasicSubsystem getSubsystemById(long id) {
1: 	public BasicSubsystem getSubsystemByLocation(String location) {
1: 	public Collection<BasicSubsystem> getSubsystems() {
1: 		return new ArrayList<BasicSubsystem>(idToSubsystem.values());
1: 	public Collection<BasicSubsystem> getSubsystemsByConstituent(Resource constituent) {
1: 		ArrayList<BasicSubsystem> result = new ArrayList<BasicSubsystem>();
1: 			for (BasicSubsystem subsystem : subsystemToConstituents.keySet())
/////////////////////////////////////////////////////////////////////////
1: 	public Collection<BasicSubsystem> getSubsystemsReferencing(Resource resource) {
1: 	public void removeChild(BasicSubsystem child) {
1: 	public void removeChild(BasicSubsystem parent, BasicSubsystem child) {
1: 	public void removeConstituent(BasicSubsystem subsystem, Resource constituent) {
/////////////////////////////////////////////////////////////////////////
1: 	public void removeReference(BasicSubsystem subsystem, Resource resource) {
1: 	public void removeSubsystem(BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	private void addIdToSubsystem(BasicSubsystem subsystem) {
1: 	private void addLocationToSubsystem(BasicSubsystem subsystem) {
1: 	private void removeIdToSubsystem(BasicSubsystem subsystem) {
1: 	private void removeLocationToSubsystem(BasicSubsystem subsystem) {
commit:ed5f3dc
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
/////////////////////////////////////////////////////////////////////////
0: 					BundleContext context = Activator.getInstance().getBundleContext().getBundle(org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext();
0: 					for (Bundle b : context.getBundles())
0: 						ResourceInstaller.newInstance(coordination, b.adapt(BundleRevision.class), root).install();
commit:8481849
/////////////////////////////////////////////////////////////////////////
1: 			if (constituents != null) {
1: 				constituents.remove(constituent);
1: 				if (constituents.isEmpty())
1: 					subsystemToConstituents.remove(subsystem);
1: 			}
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	public void addConstituent(AriesSubsystem subsystem, Resource constituent, boolean referenced) {
/////////////////////////////////////////////////////////////////////////
1: 		subsystem.addedConstituent(constituent, referenced);
/////////////////////////////////////////////////////////////////////////
1: 				// There are no persisted subsystems, including root.
/////////////////////////////////////////////////////////////////////////
1: 				// There are persisted subsystems.
/////////////////////////////////////////////////////////////////////////
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:e341c9b
/////////////////////////////////////////////////////////////////////////
0: 	public void addConstituent(AriesSubsystem subsystem, Resource constituent, boolean isContent) {
/////////////////////////////////////////////////////////////////////////
0: 		if (isContent)
0: 			subsystem.addedContent(constituent);
/////////////////////////////////////////////////////////////////////////
1: 					ResourceInstaller.newInstance(coordination, root, root).install();
/////////////////////////////////////////////////////////////////////////
1: 					ResourceInstaller.newInstance(coordination, root, root).install();
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
0: 						for (AriesSubsystemParentsHeader.Clause clause : header.getClauses()) {
0: 							ResourceInstaller.newInstance(coordination, s, getSubsystemById(clause.getId())).install();
0: 							if (s.isAutostart())
0: 								new StartAction(s, false).run();
1: 						}
commit:307d743
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.archive.AriesSubsystemParentsHeader;
/////////////////////////////////////////////////////////////////////////
0: 	public void addChild(AriesSubsystem parent, AriesSubsystem child, boolean referenceCount) {
1: 		child.addedParent(parent, referenceCount);
/////////////////////////////////////////////////////////////////////////
0: 					root = new AriesSubsystem(resource);
1: 					// TODO This initialization is a bit brittle. The root subsystem
1: 					// must be gotten before anything else will be able to use the
1: 					// graph. At the very least, throw IllegalStateException where
1: 					// appropriate.
1: 					graph = new SubsystemGraph(root);
0: 					ResourceInstaller.newInstance(coordination, root, null).install();
/////////////////////////////////////////////////////////////////////////
0: 						ResourceInstaller.newInstance(coordination, br, root).install();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 					ResourceInstaller.newInstance(coordination, root, null).install();
0: 						AriesSubsystemParentsHeader header = s.getDeploymentManifest().getAriesSubsystemParentsHeader();
0: 						if (header == null)
0: 							continue;
0: 						for (AriesSubsystemParentsHeader.Clause clause : header.getClauses())
0: 							ResourceInstaller.newInstance(coordination, s, getSubsystemById(clause.getId())).install();	
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.Arrays;
1: import java.util.Comparator;
1: import java.util.List;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.subsystem.SubsystemException;
0: 	private AriesSubsystem root;
1: 	private volatile SubsystemGraph graph;
1: 	
0: 		child.addedParent(parent);
/////////////////////////////////////////////////////////////////////////
1: 			constituents.add(constituent);
0: 		subsystem.addedContent(constituent);
/////////////////////////////////////////////////////////////////////////
1: 			return Collections.unmodifiableCollection(new ArrayList<Resource>(result));
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized AriesSubsystem getRootSubsystem() {
1: 		if (root == null) {
1: 			File file = Activator.getInstance().getBundleContext().getDataFile("");
1: 			File[] fileArray = file.listFiles();
1: 			List<File> fileList = new ArrayList<File>(Arrays.asList(fileArray));
1: 			Collections.sort(fileList, new Comparator<File>() {
1: 				@Override
1: 				public int compare(File file1, File file2) {
1: 					String name1 = file1.getName();
1: 					String name2 = file2.getName();
1: 					return Long.valueOf(name1).compareTo(Long.valueOf(name2));
1: 				}
1: 			});
1: 			if (fileList.isEmpty()) {
1: 				SubsystemResource resource;
1: 				try {
1: 					resource = new SubsystemResource(file);
1: 				}
1: 				catch (SubsystemException e) {
1: 					throw e;
1: 				}
1: 				catch (Exception e) {
1: 					throw new SubsystemException(e);
1: 				}
1: 				Coordination coordination = Utils.createCoordination();
1: 				try {
0: 					root = (AriesSubsystem)ResourceInstaller.newInstance(coordination, resource, null, false).install();
0: 					// TODO Begin proof of concept.
0: 					// This is a proof of concept for initializing the relationships between the root subsystem and bundles
0: 					// that already existed in its region. Not sure this will be the final resting place. Plus, there are issues
0: 					// since this does not take into account the possibility of already existing bundles going away or new bundles
0: 					// being installed out of band while this initialization is taking place. Need a bundle event hook for that.
0: 					BundleContext context = Activator.getInstance().getBundleContext().getBundle(0).getBundleContext();
0: 					for (long id : root.getRegion().getBundleIds()) {
0: 						BundleRevision br = context.getBundle(id).adapt(BundleRevision.class);
0: 						ResourceInstaller.newInstance(coordination, br, root, false).install();
1: 					}
0: 					// TODO End proof of concept.
1: 				} catch (Exception e) {
1: 					coordination.fail(e);
1: 				} finally {
1: 					coordination.end();
1: 				}
0: 				// TODO This initialization is a bit brittle. The root subsystem
0: 				// must be gotten before anything else will be able to use the
0: 				// graph. At the very least, throw IllegalStateException where
0: 				// appropriate.
1: 				graph = new SubsystemGraph(root);
1: 			}
1: 			else {
1: 				Coordination coordination = Utils.createCoordination();
0: 				Collection<AriesSubsystem> subsystems = new ArrayList<AriesSubsystem>(fileList.size());
1: 				try {
1: 					for (File f : fileList) {
0: 						AriesSubsystem s = new AriesSubsystem(f);
1: 						subsystems.add(s);
1: 						addSubsystem(s);
1: 					}
1: 					root = getSubsystemById(0);
1: 					graph = new SubsystemGraph(root);
0: 					for (AriesSubsystem s : subsystems) {
0: 						Collection<Subsystem> parents = s.getParents();
0: 						if (parents == null || parents.isEmpty()) {
0: 							ResourceInstaller.newInstance(coordination, s, null, false).install();
1: 						}
1: 						else {
0: 							for (Subsystem parent : s.getParents())
0: 								ResourceInstaller.newInstance(coordination, s, (AriesSubsystem)parent, false).install();
1: 						}	
1: 					}
1: 				} catch (Exception e) {
1: 					coordination.fail(e);
1: 				} finally {
1: 					coordination.end();
1: 				}
1: 			}
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 				if (getConstituents(subsystem).contains(constituent))
/////////////////////////////////////////////////////////////////////////
0: 			constituents.remove(constituent);
1: 		subsystem.removedContent(constituent);
/////////////////////////////////////////////////////////////////////////
1: 		idToSubsystem.remove(id);
1: 		locationToSubsystem.remove(location);
commit:225bcae
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.Subsystem;
1: 
1: public class Subsystems {
0: 	private final SubsystemGraph graph;
0: 	private final Map<Long, AriesSubsystem> idToSubsystem = new HashMap<Long, AriesSubsystem>();
0: 	private final Map<String, AriesSubsystem> locationToSubsystem = new HashMap<String, AriesSubsystem>();
1: 	private final ResourceReferences resourceReferences = new ResourceReferences();
0: 	private final AriesSubsystem root;
0: 	private final Map<AriesSubsystem, Set<Resource>> subsystemToConstituents = new HashMap<AriesSubsystem, Set<Resource>>();
1: 	
0: 	public Subsystems() throws Exception {
0: 		root = new AriesSubsystem();
0: 		graph = new SubsystemGraph(root);
1: 	}
1: 	
0: 	public void addChild(AriesSubsystem parent, AriesSubsystem child) {
1: 		graph.add(parent, child);
1: 	}
1: 	
0: 	public void addConstituent(AriesSubsystem subsystem, Resource constituent) {
1: 		synchronized (subsystemToConstituents) {
1: 			Set<Resource> constituents = subsystemToConstituents.get(subsystem);
1: 			if (constituents == null) {
1: 				constituents = new HashSet<Resource>();
1: 				subsystemToConstituents.put(subsystem, constituents);
1: 			}
0: 			if (!constituents.add(constituent))
0: 				throw new IllegalArgumentException("Constituent already exists");
1: 		}
1: 	}
1: 	
0: 	public void addReference(AriesSubsystem subsystem, Resource resource) {
1: 		resourceReferences.addReference(subsystem, resource);
1: 	}
1: 	
0: 	public void addSubsystem(AriesSubsystem subsystem) {
1: 		synchronized (idToSubsystem) {
1: 			synchronized (locationToSubsystem) {
1: 				addIdToSubsystem(subsystem);
1: 				addLocationToSubsystem(subsystem);
1: 			}
1: 		}
1: 	}
1: 	
0: 	public Collection<Subsystem> getChildren(AriesSubsystem parent) {
1: 		return graph.getChildren(parent);
1: 	}
1: 	
0: 	public Collection<Resource> getConstituents(AriesSubsystem subsystem) {
1: 		synchronized (subsystemToConstituents) {
1: 			Collection<Resource> result = subsystemToConstituents.get(subsystem);
1: 			if (result == null)
1: 				return Collections.emptyList();
0: 			return Collections.unmodifiableCollection(result);
1: 		}
1: 	}
1: 	
0: 	public Collection<Subsystem> getParents(AriesSubsystem child) {
1: 		return graph.getParents(child);
1: 	}
1: 	
0: 	public Collection<Resource> getResourcesReferencedBy(AriesSubsystem subsystem) {
1: 		return resourceReferences.getResources(subsystem);
1: 	}
1: 	
0: 	public AriesSubsystem getRootSubsystem() {
1: 		return root;
1: 	}
1: 	
0: 	public AriesSubsystem getSubsystemById(long id) {
1: 		synchronized (idToSubsystem) {
1: 			return idToSubsystem.get(id);
1: 		}
1: 	}
1: 	
0: 	public AriesSubsystem getSubsystemByLocation(String location) {
1: 		synchronized (locationToSubsystem) {
1: 			return locationToSubsystem.get(location);
1: 		}
1: 	}
1: 	
0: 	public Collection<AriesSubsystem> getSubsystems() {
0: 		return new ArrayList<AriesSubsystem>(idToSubsystem.values());
1: 	}
1: 	
0: 	public Collection<AriesSubsystem> getSubsystemsByConstituent(Resource constituent) {
0: 		ArrayList<AriesSubsystem> result = new ArrayList<AriesSubsystem>();
1: 		synchronized (subsystemToConstituents) {
0: 			for (AriesSubsystem subsystem : subsystemToConstituents.keySet())
0: 				if (subsystem.contains(constituent))
1: 					result.add(subsystem);
1: 		}
1: 		result.trimToSize();
1: 		return result;
1: 	}
1: 	
0: 	public Collection<AriesSubsystem> getSubsystemsReferencing(Resource resource) {
1: 		return resourceReferences.getSubsystems(resource);
1: 	}
1: 	
0: 	public void removeChild(AriesSubsystem child) {
1: 		graph.remove(child);
1: 	}
1: 	
0: 	public void removeChild(AriesSubsystem parent, AriesSubsystem child) {
1: 		graph.remove(parent, child);
1: 	}
1: 	
0: 	public void removeConstituent(AriesSubsystem subsystem, Resource constituent) {
1: 		synchronized (subsystemToConstituents) {
1: 			Set<Resource> constituents = subsystemToConstituents.get(subsystem);
0: 			if (!constituents.remove(constituent))
0: 				throw new IllegalArgumentException("Constituent does not exist");
1: 		}
1: 	}
1: 	
0: 	public void removeReference(AriesSubsystem subsystem, Resource resource) {
1: 		resourceReferences.removeReference(subsystem, resource);
1: 	}
1: 	
0: 	public void removeSubsystem(AriesSubsystem subsystem) {
1: 		synchronized (idToSubsystem) {
1: 			synchronized (locationToSubsystem) {
1: 				removeLocationToSubsystem(subsystem);
1: 				removeIdToSubsystem(subsystem);
1: 			}
1: 		}
1: 	}
1: 	
0: 	private void addIdToSubsystem(AriesSubsystem subsystem) {
1: 		long id = subsystem.getSubsystemId();
0: 		if (idToSubsystem.containsKey(id))
0: 			throw new IllegalArgumentException("Subsystem ID already exists: " + id);
1: 		idToSubsystem.put(id, subsystem);
1: 	}
1: 	
0: 	private void addLocationToSubsystem(AriesSubsystem subsystem) {
1: 		String location = subsystem.getLocation();
0: 		if (locationToSubsystem.containsKey(location))
0: 			throw new IllegalArgumentException("Subsystem location already exists: " + location);
1: 		locationToSubsystem.put(location, subsystem);
1: 	}
1: 	
0: 	private void removeIdToSubsystem(AriesSubsystem subsystem) {
1: 		long id = subsystem.getSubsystemId();
0: 		if (idToSubsystem.remove(id) == null)
0: 			throw new IllegalArgumentException("Subsystem ID does not exist: " + id);
1: 	}
1: 	
0: 	private void removeLocationToSubsystem(AriesSubsystem subsystem) {
1: 		String location = subsystem.getLocation();
0: 		if (locationToSubsystem.remove(location) == null)
0: 			throw new IllegalArgumentException("Subsystem location does not exist: " + location);
1: 	}
1: }
============================================================================