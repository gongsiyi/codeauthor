1:5ac33c7: /*
1:5ac33c7:  * Licensed to the Apache Software Foundation (ASF) under one
1:5ac33c7:  * or more contributor license agreements.  See the NOTICE file
1:5ac33c7:  * distributed with this work for additional information
1:5ac33c7:  * regarding copyright ownership.  The ASF licenses this file
1:5ac33c7:  * to you under the Apache License, Version 2.0 (the
1:5ac33c7:  * "License"); you may not use this file except in compliance
1:5ac33c7:  * with the License.  You may obtain a copy of the License at
1:5ac33c7:  *
1:5ac33c7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5ac33c7:  *
1:5ac33c7:  * Unless required by applicable law or agreed to in writing,
1:5ac33c7:  * software distributed under the License is distributed on an
1:5ac33c7:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:5ac33c7:  * KIND, either express or implied.  See the License for the
1:5ac33c7:  * specific language governing permissions and limitations
1:5ac33c7:  * under the License.
1:5ac33c7:  */
1:2cfdf52: package org.apache.aries.jpa.container.weaving.impl;
1:2cfdf52: 
1:2cfdf52: import java.io.PrintWriter;
1:2cfdf52: import java.lang.reflect.InvocationHandler;
1:2cfdf52: import java.lang.reflect.Method;
1:2cfdf52: import java.lang.reflect.Proxy;
1:2cfdf52: import java.sql.Connection;
1:2cfdf52: import java.sql.DatabaseMetaData;
1:e27680e: import java.sql.PreparedStatement;
1:2cfdf52: import java.sql.ResultSet;
1:2cfdf52: import java.sql.SQLException;
1:2cfdf52: import java.sql.SQLFeatureNotSupportedException;
1:e27680e: import java.sql.Statement;
1:2cfdf52: 
1:2cfdf52: import javax.sql.DataSource;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * DummyDataSource to be able to create the EMF before DataSource is ready
1:2cfdf52:  */
1:2cfdf52: public final class DummyDataSource implements DataSource {
1:2cfdf52:     
1:2cfdf52:     /**
1:2cfdf52:      * Simply tries to avoid that calling code runs into NPE
1:2cfdf52:      */
1:2cfdf52:     private final class DummyHandler implements InvocationHandler {
1:ec3ea65:         @Override
1:2cfdf52:         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
1:2cfdf52:             ClassLoader classLoader = this.getClass().getClassLoader();
1:ec3ea65:             Class<?> type = method.getReturnType();
1:ec3ea65:             if (type == int.class) {
1:2cfdf52:                 return new Integer(0);
2:2cfdf52:             }
1:ec3ea65:             if (type == boolean.class) {
1:2cfdf52:                 return new Boolean(false);
1:2cfdf52:             }
1:ec3ea65:             if (type == String.class) {
1:2cfdf52:                 return "";
1:2cfdf52:             }
1:ec3ea65:             return proxyClasses(classLoader, type);
1:ec3ea65:         }
1:ec3ea65: 
1:ec3ea65:         private Object proxyClasses(ClassLoader classLoader, Class<?> type) {
1:ec3ea65:             if (type == DatabaseMetaData.class) {
1:ec3ea65:                 return createProxy(classLoader, DatabaseMetaData.class);
1:ec3ea65:             }
1:ec3ea65:             if (type == ResultSet.class) {
1:ec3ea65:                 return createProxy(classLoader, ResultSet.class);
1:2cfdf52:             }
1:e27680e:             if (type == Statement.class) {
1:e27680e:                 return createProxy(classLoader, PreparedStatement.class);
1:e27680e:             }
1:2cfdf52:             return null;
1:2cfdf52:         }
1:ec3ea65: 
1:ec3ea65:         private Object createProxy(ClassLoader classLoader, Class<?> iface) {
1:ec3ea65:             Class<?>[] ifAr = new Class[] { iface };
1:ec3ea65:             return Proxy.newProxyInstance(classLoader, ifAr, this);
1:ec3ea65:         }
1:2cfdf52:     }
1:2cfdf52:     
2:2cfdf52:     @Override
1:2cfdf52:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:2cfdf52:         return null;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:2cfdf52:         return false;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void setLoginTimeout(int seconds) throws SQLException {
1:ec3ea65:         // Ignore
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void setLogWriter(PrintWriter out) throws SQLException {
1:ec3ea65:         // Ignore
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:2cfdf52:         return null;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public int getLoginTimeout() throws SQLException {
1:2cfdf52:         return 0;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public PrintWriter getLogWriter() throws SQLException {
1:2cfdf52:         return null;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public Connection getConnection(String username, String password) throws SQLException {
1:2cfdf52:         InvocationHandler handler = new DummyHandler();
1:2cfdf52:         ClassLoader classLoader = this.getClass().getClassLoader();
1:2cfdf52:         return (Connection)Proxy.newProxyInstance(classLoader, new Class[] {
1:2cfdf52:             Connection.class
1:2cfdf52:         }, handler);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public Connection getConnection() throws SQLException {
1:2cfdf52:         return getConnection(null, null);
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e27680e
/////////////////////////////////////////////////////////////////////////
1: import java.sql.PreparedStatement;
1: import java.sql.Statement;
/////////////////////////////////////////////////////////////////////////
1:             if (type == Statement.class) {
1:                 return createProxy(classLoader, PreparedStatement.class);
1:             }
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:             Class<?> type = method.getReturnType();
1:             if (type == int.class) {
1:             if (type == boolean.class) {
1:             if (type == String.class) {
1:             return proxyClasses(classLoader, type);
1:         }
1: 
1:         private Object proxyClasses(ClassLoader classLoader, Class<?> type) {
1:             if (type == DatabaseMetaData.class) {
1:                 return createProxy(classLoader, DatabaseMetaData.class);
1:             }
1:             if (type == ResultSet.class) {
1:                 return createProxy(classLoader, ResultSet.class);
1: 
1:         private Object createProxy(ClassLoader classLoader, Class<?> iface) {
1:             Class<?>[] ifAr = new Class[] { iface };
1:             return Proxy.newProxyInstance(classLoader, ifAr, this);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         // Ignore
1:         // Ignore
1:     @Override
commit:5ac33c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.container.weaving.impl;
1: 
1: import java.io.PrintWriter;
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Proxy;
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.SQLFeatureNotSupportedException;
1: 
1: import javax.sql.DataSource;
1: 
1: /**
1:  * DummyDataSource to be able to create the EMF before DataSource is ready
1:  */
1: public final class DummyDataSource implements DataSource {
1:     
1:     /**
1:      * Simply tries to avoid that calling code runs into NPE
1:      */
1:     private final class DummyHandler implements InvocationHandler {
1:         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
1:             ClassLoader classLoader = this.getClass().getClassLoader();
0:             if (method.getReturnType() == DatabaseMetaData.class) {
0:                 Class<?>[] ifAr = new Class[] {
0:                     DatabaseMetaData.class
0:                 };
0:                 return Proxy.newProxyInstance(classLoader, ifAr, this);
1:             }
0:             if (method.getReturnType() == int.class) {
1:                 return new Integer(0);
1:             }
0:             if (method.getReturnType() == boolean.class) {
1:                 return new Boolean(false);
1:             }
0:             if (method.getReturnType() == String.class) {
1:                 return "";
1:             }
0:             if (method.getReturnType() == ResultSet.class) {
0:                 Class<?>[] ifAr = new Class[] {
0:                     ResultSet.class
0:                 };
0:                 return Proxy.newProxyInstance(classLoader, ifAr, this);
1:             }
1:             return null;
1:         }
1:     }
1:     
1:     @Override
1:     public <T> T unwrap(Class<T> iface) throws SQLException {
1:         return null;
1:     }
1: 
1:     @Override
1:     public boolean isWrapperFor(Class<?> iface) throws SQLException {
1:         return false;
1:     }
1: 
1:     @Override
1:     public void setLoginTimeout(int seconds) throws SQLException {
1:     }
1: 
1:     @Override
1:     public void setLogWriter(PrintWriter out) throws SQLException {
1:     }
1: 
1:     @Override
1:     public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException {
1:         return null;
1:     }
1: 
1:     @Override
1:     public int getLoginTimeout() throws SQLException {
1:         return 0;
1:     }
1: 
1:     @Override
1:     public PrintWriter getLogWriter() throws SQLException {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Connection getConnection(String username, String password) throws SQLException {
1:         InvocationHandler handler = new DummyHandler();
1:         ClassLoader classLoader = this.getClass().getClassLoader();
1:         return (Connection)Proxy.newProxyInstance(classLoader, new Class[] {
1:             Connection.class
1:         }, handler);
1:     }
1: 
1:     @Override
1:     public Connection getConnection() throws SQLException {
1:         return getConnection(null, null);
1:     }
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:6c51652
/////////////////////////////////////////////////////////////////////////
============================================================================