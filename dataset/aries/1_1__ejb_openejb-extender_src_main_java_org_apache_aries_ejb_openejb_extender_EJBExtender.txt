1:541fd79: /**
1:541fd79:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:541fd79:  *  contributor license agreements.  See the NOTICE file distributed with
1:541fd79:  *  this work for additional information regarding copyright ownership.
1:541fd79:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:541fd79:  *  (the "License"); you may not use this file except in compliance with
1:541fd79:  *  the License.  You may obtain a copy of the License at
1:541fd79:  *
1:541fd79:  *     http://www.apache.org/licenses/LICENSE-2.0
1:541fd79:  *
1:541fd79:  *  Unless required by applicable law or agreed to in writing, software
1:541fd79:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:541fd79:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:541fd79:  *  See the License for the specific language governing permissions and
1:541fd79:  *  limitations under the License.
1:541fd79:  */
1:541fd79: package org.apache.aries.ejb.openejb.extender;
28:541fd79: 
1:541fd79: import java.io.IOException;
1:4115fb2: import java.lang.reflect.Field;
1:541fd79: import java.net.URL;
1:541fd79: import java.util.Collections;
1:541fd79: import java.util.Dictionary;
1:541fd79: import java.util.Enumeration;
1:541fd79: import java.util.Map;
1:541fd79: import java.util.Properties;
1:541fd79: import java.util.concurrent.ConcurrentHashMap;
1:541fd79: import java.util.concurrent.ConcurrentMap;
1:541fd79: 
1:541fd79: import javax.naming.NamingException;
1:541fd79: 
1:541fd79: import org.apache.aries.util.AriesFrameworkUtil;
1:541fd79: import org.apache.aries.util.tracker.RecursiveBundleTracker;
1:541fd79: import org.apache.openejb.OpenEJBException;
1:541fd79: import org.apache.openejb.assembler.classic.Assembler;
1:541fd79: import org.apache.openejb.assembler.classic.EjbJarInfo;
1:ea6eb33: import org.apache.openejb.assembler.classic.EnterpriseBeanInfo;
1:ea6eb33: import org.apache.openejb.assembler.classic.PersistenceContextReferenceInfo;
1:ea6eb33: import org.apache.openejb.assembler.classic.PersistenceUnitReferenceInfo;
1:541fd79: import org.apache.openejb.assembler.classic.ProxyFactoryInfo;
1:ea6eb33: import org.apache.openejb.assembler.classic.ReferenceLocationInfo;
1:541fd79: import org.apache.openejb.assembler.classic.SecurityServiceInfo;
1:541fd79: import org.apache.openejb.assembler.classic.TransactionServiceInfo;
1:541fd79: import org.apache.openejb.assembler.dynamic.PassthroughFactory;
1:541fd79: import org.apache.openejb.config.ConfigurationFactory;
1:541fd79: import org.apache.openejb.config.EjbModule;
1:4115fb2: import org.apache.openejb.config.ValidationContext;
1:541fd79: import org.apache.openejb.loader.SystemInstance;
1:4115fb2: import org.apache.openejb.persistence.JtaEntityManagerRegistry;
1:541fd79: import org.apache.openejb.ri.sp.PseudoSecurityService;
1:541fd79: import org.apache.openejb.util.OpenEjbVersion;
1:541fd79: import org.osgi.framework.Bundle;
1:541fd79: import org.osgi.framework.BundleActivator;
1:541fd79: import org.osgi.framework.BundleContext;
1:541fd79: import org.osgi.framework.BundleEvent;
1:541fd79: import org.osgi.util.tracker.BundleTrackerCustomizer;
1:541fd79: 
1:541fd79: public class EJBExtender implements BundleActivator, BundleTrackerCustomizer {
1:541fd79: 
1:541fd79:   private static final int STARTABLE = Bundle.STARTING | Bundle.ACTIVE;
1:541fd79:   
1:541fd79:   private static final Object PROCESSING_OBJECT = new Object();
1:541fd79:   private static final Object REMOVING_OBJECT = new Object();
1:541fd79:   
1:541fd79:   private RecursiveBundleTracker tracker;
1:541fd79:   
1:541fd79:   private final ConcurrentMap<Bundle, RunningApplication> runningApps = 
1:541fd79:        new ConcurrentHashMap<Bundle, RunningApplication>();
1:541fd79:   
1:541fd79:   private final ConcurrentMap<Bundle, Object> processingMap = 
1:541fd79:        new ConcurrentHashMap<Bundle, Object>();
1:541fd79:   
1:541fd79:   public void start(BundleContext context) throws Exception {
1:541fd79: 
1:541fd79:     //Internal setup
1:541fd79:     OSGiTransactionManager.init(context);
1:541fd79:     AriesProxyService.init(context);
1:4115fb2:     try {
1:4115fb2:       AriesPersistenceContextIntegration.init(context);
1:4115fb2:     } catch (NoClassDefFoundError ncdfe) {
1:4115fb2:       //TODO log that no JPA Context integration is available
1:4115fb2:     }
1:541fd79:     
1:541fd79:     //Setup OpenEJB with our own extensions
1:541fd79:     setupOpenEJB();
1:541fd79:     
1:541fd79:     tracker = new RecursiveBundleTracker(context, Bundle.INSTALLED | Bundle.RESOLVED | 
1:541fd79:         Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING, this);
1:541fd79: 
1:541fd79:     tracker.open();
13:541fd79:   }
1:541fd79: 
1:541fd79:   private void setupOpenEJB() throws OpenEJBException {
1:541fd79:     //Avoid a ClassLoader problem 
1:541fd79:     ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:541fd79:     try {
1:541fd79:       Thread.currentThread().setContextClassLoader(OpenEjbVersion.class.getClassLoader());
1:541fd79:       OpenEjbVersion.get();
1:541fd79:     } finally {
1:541fd79:       Thread.currentThread().setContextClassLoader(cl);
1:541fd79:     }
1:541fd79:     
1:541fd79:     Assembler a = new Assembler();
1:541fd79:     TransactionServiceInfo tsi = new TransactionServiceInfo();
1:541fd79:     tsi.service = "TransactionManager";
1:541fd79:     tsi.id = "OSGi Transaction Manager";
1:541fd79:     PassthroughFactory.add(tsi, OSGiTransactionManager.get());
1:541fd79:     //Avoid another ClassLoader problem
1:4115fb2:     try {
1:541fd79:       Thread.currentThread().setContextClassLoader(PassthroughFactory.class.getClassLoader());
1:541fd79:       a.createTransactionManager(tsi);
1:541fd79:     } finally {
1:541fd79:       Thread.currentThread().setContextClassLoader(cl);
1:541fd79:     }
1:541fd79:     
1:541fd79:     try {
1:4115fb2:       //Overwrite existing, default JPA integration with an Aries JPA integrated one
1:4115fb2:       Assembler.getContext().put(JtaEntityManagerRegistry.class.getName(), 
1:4115fb2:           AriesPersistenceContextIntegration.get());
1:4115fb2:       SystemInstance.get().setComponent(JtaEntityManagerRegistry.class, 
1:4115fb2:           AriesPersistenceContextIntegration.get());
1:4115fb2:     } catch (NoClassDefFoundError ncdfe) {
1:4115fb2:       //TODO log that no JPA Context integration is available
1:4115fb2:     }
1:4115fb2:     
1:541fd79:     SecurityServiceInfo ssi = new SecurityServiceInfo();
1:541fd79:     ssi.service = "SecurityService";
1:541fd79:     ssi.id = "Pseudo Security Service";
1:541fd79:     PassthroughFactory.add(ssi, new PseudoSecurityService());
1:541fd79:     //Avoid another ClassLoader problem
1:541fd79:     try {
1:541fd79:       Thread.currentThread().setContextClassLoader(PassthroughFactory.class.getClassLoader());
1:541fd79:       a.createSecurityService(ssi);
1:541fd79:     } finally {
1:541fd79:       Thread.currentThread().setContextClassLoader(cl);
1:541fd79:     }
1:541fd79:     
1:541fd79:     
1:541fd79:     ProxyFactoryInfo proxyFactoryInfo = new ProxyFactoryInfo();
1:541fd79:     proxyFactoryInfo.id = "Aries ProxyFactory";
1:541fd79:     proxyFactoryInfo.service = "ProxyFactory";
1:541fd79:     proxyFactoryInfo.properties = new Properties();
1:541fd79:     PassthroughFactory.add(proxyFactoryInfo, AriesProxyService.get());
1:541fd79:     try {
1:541fd79:       Thread.currentThread().setContextClassLoader(PassthroughFactory.class.getClassLoader());
1:541fd79:       a.createProxyFactory(proxyFactoryInfo);
1:541fd79:     } finally {
1:541fd79:       Thread.currentThread().setContextClassLoader(cl);
1:541fd79:     }
1:541fd79:   }
1:541fd79: 
1:541fd79:   public void stop(BundleContext context) throws Exception {
1:541fd79:     tracker.close();
1:541fd79:     AriesProxyService.get().destroy();
1:541fd79:     OSGiTransactionManager.get().destroy();
1:4115fb2:     try {
1:4115fb2:       AriesPersistenceContextIntegration.get().destroy();
1:4115fb2:     } catch (NoClassDefFoundError ncdfe) {
1:4115fb2:       //TODO log that no JPA Context integration is available
1:4115fb2:     }
1:541fd79:   }
1:541fd79: 
1:541fd79:   public Object addingBundle(Bundle bundle, BundleEvent event) {
1:541fd79:     
1:541fd79:     if(mightContainEJBs(bundle)) {
1:541fd79:       if((bundle.getState() & STARTABLE) != 0) {
1:541fd79:         startEJBs(bundle);
1:541fd79:       }
1:541fd79:       return bundle;
1:541fd79:     }
1:541fd79:     return null;
1:541fd79:   }
1:541fd79: 
1:541fd79: 
1:541fd79:   private boolean mightContainEJBs(Bundle bundle) {
1:541fd79:     Dictionary<String, String> headers = bundle.getHeaders();
1:541fd79:     return (headers.get("Export-EJB") != null) || (headers.get("Web-ContextPath") != null);
1:541fd79:   }
1:541fd79: 
1:541fd79:   public void modifiedBundle(Bundle bundle, BundleEvent event, Object object) {
1:541fd79:     if((bundle.getState() & STARTABLE) != 0) {
1:541fd79:       startEJBs(bundle);
1:541fd79:     } else if (bundle.getState() == Bundle.STOPPING) {
1:541fd79:       stopEJBs(bundle);
1:541fd79:     }
1:541fd79:   }
1:541fd79: 
1:541fd79:   private void startEJBs(final Bundle bundle) {
1:541fd79: 
1:541fd79:     try {
1:541fd79:       //If there is another thread adding or removing then stop here
1:541fd79:       Object o = processingMap.put(bundle, PROCESSING_OBJECT);
1:541fd79:       if(o == REMOVING_OBJECT || o == PROCESSING_OBJECT) {
1:541fd79:         return;
1:541fd79:       }
1:541fd79:       //If already running then avoid
1:541fd79:       if(runningApps.get(bundle) != null)
1:541fd79:         return;
1:541fd79:       
1:4115fb2:       //Broken validation for persistence :(
1:4115fb2:       EjbModule ejbModule = new EjbModule(AriesFrameworkUtil.getClassLoaderForced(bundle), null, null, null);
1:4115fb2:       try {
1:4115fb2:         Field f = EjbModule.class.getDeclaredField("validation");
1:4115fb2:         f.setAccessible(true);
1:4115fb2:         f.set(ejbModule, new ValidationProofValidationContext(ejbModule));
1:4115fb2:       } catch (Exception e) {
1:4115fb2:         // Hmmm
1:4115fb2:       }
1:541fd79:       addAltDDs(ejbModule, bundle);
1:541fd79:       //We build our own because we can't trust anyone to get the classpath right otherwise!
1:541fd79:       ejbModule.setFinder(new OSGiFinder(bundle));
1:541fd79:       
1:541fd79:       ConfigurationFactory configurationFactory = new ConfigurationFactory();
1:541fd79:       
1:541fd79:       EjbJarInfo ejbInfo = null;
1:541fd79:       //Avoid yet another ClassLoading problem
1:541fd79:       ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:541fd79:       try {
1:541fd79:         Thread.currentThread().setContextClassLoader(new ClassLoader(OpenEjbVersion.class.getClassLoader()) {
1:541fd79:           protected Class<?> findClass(String name) throws ClassNotFoundException {
1:541fd79:             for(Bundle b : bundle.getBundleContext().getBundles()) {
1:541fd79:               if(b.getSymbolicName().contains("jaxb-impl"))
1:541fd79:                 return b.loadClass(name);
1:541fd79:             
1:541fd79:             }
1:541fd79:             throw new ClassNotFoundException(name);
1:541fd79:           }
1:541fd79:         });
1:541fd79:         
1:541fd79:         ejbInfo = configurationFactory.configureApplication(ejbModule);
1:541fd79:         //Another oddity here
1:541fd79:         ejbInfo.validationInfo = null;
1:541fd79:       } finally {
1:541fd79:         Thread.currentThread().setContextClassLoader(cl);
1:541fd79:       }
1:541fd79:       
1:ea6eb33:       processJPAMappings(ejbInfo);
1:ea6eb33:       
1:541fd79:       
1:541fd79:       Assembler assembler = (Assembler) SystemInstance.get().getComponent(Assembler.class);
1:541fd79:       RunningApplication app = null;
1:541fd79:       try {
1:541fd79:         SystemInstance.get().setProperty("openejb.geronimo", "true");
1:541fd79:         cl = Thread.currentThread().getContextClassLoader();
1:541fd79:         try {
1:541fd79:           Thread.currentThread().setContextClassLoader(OpenEjbVersion.class.getClassLoader());
1:541fd79:           app = new RunningApplication(assembler.createApplication(ejbInfo, 
1:4115fb2:               new AppClassLoader(ejbModule.getClassLoader())), bundle, ejbInfo.enterpriseBeans);
1:541fd79:         } finally {
1:541fd79:           Thread.currentThread().setContextClassLoader(cl);
1:541fd79:         }
1:541fd79:       } finally {
1:541fd79:         SystemInstance.get().getProperties().remove("openejb.geronimo");
1:541fd79:       }
1:541fd79:       runningApps.put(bundle, app);
1:541fd79:       
1:4115fb2:       app.init();
1:4115fb2:       
1:541fd79:       
1:541fd79:     } catch (OpenEJBException oee) {
1:541fd79:       // TODO Auto-generated catch block
1:541fd79:       oee.printStackTrace();
1:541fd79:     } catch (NamingException e) {
1:541fd79:       // TODO Auto-generated catch block
1:541fd79:       e.printStackTrace();
1:541fd79:     } catch (IOException e) {
1:541fd79:       e.printStackTrace();
1:541fd79:     } finally {
1:541fd79:       if(processingMap.remove(bundle) == REMOVING_OBJECT) {
1:541fd79:         stopEJBs(bundle);
1:541fd79:       }
1:541fd79:     }
1:541fd79:   }
1:541fd79: 
1:ea6eb33:   private void processJPAMappings(EjbJarInfo ejbInfo) {
1:ea6eb33:     for(EnterpriseBeanInfo ebi : ejbInfo.enterpriseBeans){
1:ea6eb33:       
1:ea6eb33:       for(PersistenceUnitReferenceInfo pui : ebi.jndiEnc.persistenceUnitRefs) {
1:ea6eb33:         pui.location = new ReferenceLocationInfo();
1:ea6eb33:         pui.location.jndiName = "aries/integration/unit/" + pui.persistenceUnitName;
1:ea6eb33:       }
1:ea6eb33:       
1:ea6eb33:       for(PersistenceContextReferenceInfo pci : ebi.jndiEnc.persistenceContextRefs) {
1:ea6eb33:         pci.location = new ReferenceLocationInfo();
1:ea6eb33:         pci.location.jndiName = "aries/integration/context/" + pci.persistenceUnitName;
1:ea6eb33:       }
1:ea6eb33:     }
1:ea6eb33:     
1:ea6eb33:   }
1:ea6eb33: 
1:541fd79:   private void addAltDDs(EjbModule ejbModule, Bundle bundle) {
1:541fd79:     
1:541fd79:     Map<String, Object> altDDs = ejbModule.getAltDDs(); 
1:541fd79:     
1:541fd79:     String folder = (bundle.getHeaders().get("Web-ContextPath") == null) ? 
1:541fd79:         "META-INF" : "WEB-INF";
1:541fd79:     
1:541fd79:     Enumeration<URL> e = bundle.findEntries(folder, "*.xml", false);
1:541fd79:     if(e == null)
1:541fd79:       return;
1:541fd79:     
1:541fd79:     for(URL u : Collections.list(e)) {
1:541fd79:       
1:541fd79:       String urlString = u.toExternalForm();
1:541fd79:       urlString = urlString.substring(urlString.lastIndexOf('/') + 1);
1:541fd79:         
1:541fd79:       altDDs.put(urlString, u);
1:541fd79:     }
1:4115fb2:     //Persistence descriptors are handled by Aries JPA, but OpenEJB fails validation
1:4115fb2:     //if we hide them. As a result we switch it off.
1:4115fb2:     //altDDs.remove("persistence.xml");
1:541fd79:   }
1:541fd79: 
1:541fd79:   private void stopEJBs(Bundle bundle) {
1:541fd79:     if(processingMap.put(bundle, REMOVING_OBJECT) == PROCESSING_OBJECT)
1:541fd79:       return;
1:541fd79:     else {
1:541fd79:       try {
1:541fd79:         RunningApplication app = runningApps.remove(bundle);
1:541fd79:         if(app != null) {
1:4115fb2:           app.destroy();
1:541fd79:           Assembler assembler = (Assembler) SystemInstance.get().getComponent(Assembler.class);
1:541fd79:           assembler.destroyApplication(app.getCtx());
1:541fd79:         }
1:541fd79:       } catch (OpenEJBException e) {
1:541fd79:         // TODO Auto-generated catch block
1:541fd79:         e.printStackTrace();
1:541fd79:       } finally {
1:541fd79:         if(processingMap.remove(bundle) == PROCESSING_OBJECT)
1:541fd79:           startEJBs(bundle);
1:541fd79:       }
1:541fd79:     }
1:541fd79:   }
1:541fd79:   
1:541fd79:   public void removedBundle(Bundle bundle, BundleEvent event, Object object) {
1:541fd79:     if (bundle.getState() == Bundle.STOPPING) {
1:541fd79:       stopEJBs(bundle);
1:541fd79:     }
1:541fd79:   }
1:541fd79:   
1:4115fb2:   private static final class ValidationProofValidationContext extends ValidationContext {
1:4115fb2:     private ValidationProofValidationContext(EjbModule mod) {
1:4115fb2:       super(mod);
1:4115fb2:     }
1:4115fb2: 
1:4115fb2:     @Override
1:4115fb2:     public boolean hasErrors() {
1:4115fb2:       return false;
1:4115fb2:     }
1:4115fb2: 
1:4115fb2:     @Override
1:4115fb2:     public boolean hasFailures() {
1:4115fb2:       return false;
1:4115fb2:     }
1:4115fb2: 
1:4115fb2:     @Override
1:4115fb2:     public boolean hasWarnings() {
1:4115fb2:       return false;
1:4115fb2:     }
1:4115fb2: 
1:4115fb2:     
1:4115fb2:   }
1:4115fb2: 
1:541fd79:   private static final class AppClassLoader extends ClassLoader {
1:541fd79:     private AppClassLoader(ClassLoader parentLoader) {
1:541fd79:       super(parentLoader);
1:541fd79:     }
1:541fd79: 
1:541fd79:     @Override
1:541fd79:     protected Class<?> findClass(String className)
1:541fd79:         throws ClassNotFoundException {
1:541fd79:       return Class.forName(className, false, OpenEjbVersion.class.getClassLoader());
1:541fd79:     }
1:541fd79:   }
1:541fd79: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:ea6eb33
/////////////////////////////////////////////////////////////////////////
1: import org.apache.openejb.assembler.classic.EnterpriseBeanInfo;
1: import org.apache.openejb.assembler.classic.PersistenceContextReferenceInfo;
1: import org.apache.openejb.assembler.classic.PersistenceUnitReferenceInfo;
1: import org.apache.openejb.assembler.classic.ReferenceLocationInfo;
/////////////////////////////////////////////////////////////////////////
1:       processJPAMappings(ejbInfo);
1:       
/////////////////////////////////////////////////////////////////////////
1:   private void processJPAMappings(EjbJarInfo ejbInfo) {
1:     for(EnterpriseBeanInfo ebi : ejbInfo.enterpriseBeans){
1:       
1:       for(PersistenceUnitReferenceInfo pui : ebi.jndiEnc.persistenceUnitRefs) {
1:         pui.location = new ReferenceLocationInfo();
1:         pui.location.jndiName = "aries/integration/unit/" + pui.persistenceUnitName;
1:       }
1:       
1:       for(PersistenceContextReferenceInfo pci : ebi.jndiEnc.persistenceContextRefs) {
1:         pci.location = new ReferenceLocationInfo();
1:         pci.location.jndiName = "aries/integration/context/" + pci.persistenceUnitName;
1:       }
1:     }
1:     
1:   }
1: 
commit:1168865
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.openejb.config.ValidationContext;
0: import org.apache.openejb.jee.EjbJar;
0: import org.apache.openejb.jee.oejb3.OpenejbJar;
1: import org.apache.openejb.persistence.JtaEntityManagerRegistry;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       AriesPersistenceContextIntegration.init(context);
1:     } catch (NoClassDefFoundError ncdfe) {
1:       //TODO log that no JPA Context integration is available
1:     }
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       //Overwrite existing, default JPA integration with an Aries JPA integrated one
1:       Assembler.getContext().put(JtaEntityManagerRegistry.class.getName(), 
1:           AriesPersistenceContextIntegration.get());
1:       SystemInstance.get().setComponent(JtaEntityManagerRegistry.class, 
1:           AriesPersistenceContextIntegration.get());
1:     } catch (NoClassDefFoundError ncdfe) {
1:       //TODO log that no JPA Context integration is available
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     try {
1:       AriesPersistenceContextIntegration.get().destroy();
1:     } catch (NoClassDefFoundError ncdfe) {
1:       //TODO log that no JPA Context integration is available
1:     }
/////////////////////////////////////////////////////////////////////////
1:       //Broken validation for persistence :(
1:       EjbModule ejbModule = new EjbModule(AriesFrameworkUtil.getClassLoaderForced(bundle), null, null, null);
1:       try {
1:         Field f = EjbModule.class.getDeclaredField("validation");
1:         f.setAccessible(true);
1:         f.set(ejbModule, new ValidationProofValidationContext(ejbModule));
1:       } catch (Exception e) {
1:         // Hmmm
1:       }
/////////////////////////////////////////////////////////////////////////
1:               new AppClassLoader(ejbModule.getClassLoader())), bundle, ejbInfo.enterpriseBeans);
/////////////////////////////////////////////////////////////////////////
1:       app.init();
1:       
/////////////////////////////////////////////////////////////////////////
1:     //Persistence descriptors are handled by Aries JPA, but OpenEJB fails validation
1:     //if we hide them. As a result we switch it off.
1:     //altDDs.remove("persistence.xml");
/////////////////////////////////////////////////////////////////////////
1:           app.destroy();
/////////////////////////////////////////////////////////////////////////
1:   private static final class ValidationProofValidationContext extends ValidationContext {
1:     private ValidationProofValidationContext(EjbModule mod) {
1:       super(mod);
1:     }
1: 
1:     @Override
1:     public boolean hasErrors() {
1:       return false;
1:     }
1: 
1:     @Override
1:     public boolean hasFailures() {
1:       return false;
1:     }
1: 
1:     @Override
1:     public boolean hasWarnings() {
1:       return false;
1:     }
1: 
1:     
1:   }
1: 
commit:541fd79
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.openejb.extender;
1: 
1: import java.io.IOException;
1: import java.net.URL;
0: import java.util.ArrayList;
0: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
0: import java.util.HashSet;
0: import java.util.Hashtable;
0: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: 
1: import javax.naming.NamingException;
1: 
1: import org.apache.aries.util.AriesFrameworkUtil;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;
1: import org.apache.aries.util.tracker.RecursiveBundleTracker;
0: import org.apache.openejb.AppContext;
0: import org.apache.openejb.BeanContext;
0: import org.apache.openejb.ContainerType;
1: import org.apache.openejb.OpenEJBException;
1: import org.apache.openejb.assembler.classic.Assembler;
1: import org.apache.openejb.assembler.classic.EjbJarInfo;
1: import org.apache.openejb.assembler.classic.ProxyFactoryInfo;
0: import org.apache.openejb.assembler.classic.ProxyInterfaceResolver;
1: import org.apache.openejb.assembler.classic.SecurityServiceInfo;
1: import org.apache.openejb.assembler.classic.TransactionServiceInfo;
1: import org.apache.openejb.assembler.dynamic.PassthroughFactory;
1: import org.apache.openejb.config.ConfigurationFactory;
1: import org.apache.openejb.config.EjbModule;
1: import org.apache.openejb.loader.SystemInstance;
1: import org.apache.openejb.ri.sp.PseudoSecurityService;
1: import org.apache.openejb.util.OpenEjbVersion;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
0: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.util.tracker.BundleTrackerCustomizer;
1: 
1: public class EJBExtender implements BundleActivator, BundleTrackerCustomizer {
1: 
1:   private static final int STARTABLE = Bundle.STARTING | Bundle.ACTIVE;
1:   
1:   private static final Object PROCESSING_OBJECT = new Object();
1:   private static final Object REMOVING_OBJECT = new Object();
0:   private static final String NONE = "NONE";
0:   private static final String ALL = "ALL";
1:   
1:   private RecursiveBundleTracker tracker;
1:   
1:   private final ConcurrentMap<Bundle, RunningApplication> runningApps = 
1:        new ConcurrentHashMap<Bundle, RunningApplication>();
1:   
1:   private final ConcurrentMap<Bundle, Object> processingMap = 
1:        new ConcurrentHashMap<Bundle, Object>();
1:   
1:   public void start(BundleContext context) throws Exception {
1: 
1:     //Internal setup
1:     OSGiTransactionManager.init(context);
1:     AriesProxyService.init(context);
1:     
1:     
1:     //Setup OpenEJB with our own extensions
1:     setupOpenEJB();
1:     
1:     tracker = new RecursiveBundleTracker(context, Bundle.INSTALLED | Bundle.RESOLVED | 
1:         Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING, this);
1: 
1:     tracker.open();
1:   }
1: 
1:   private void setupOpenEJB() throws OpenEJBException {
1:     //Avoid a ClassLoader problem 
1:     ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:     try {
1:       Thread.currentThread().setContextClassLoader(OpenEjbVersion.class.getClassLoader());
1:       OpenEjbVersion.get();
1:     } finally {
1:       Thread.currentThread().setContextClassLoader(cl);
1:     }
1:     
1:     Assembler a = new Assembler();
1:     TransactionServiceInfo tsi = new TransactionServiceInfo();
1:     tsi.service = "TransactionManager";
1:     tsi.id = "OSGi Transaction Manager";
1:     PassthroughFactory.add(tsi, OSGiTransactionManager.get());
1:     //Avoid another ClassLoader problem
1:     try {
1:       Thread.currentThread().setContextClassLoader(PassthroughFactory.class.getClassLoader());
1:       a.createTransactionManager(tsi);
1:     } finally {
1:       Thread.currentThread().setContextClassLoader(cl);
1:     }
1:     
1:     SecurityServiceInfo ssi = new SecurityServiceInfo();
1:     ssi.service = "SecurityService";
1:     ssi.id = "Pseudo Security Service";
1:     PassthroughFactory.add(ssi, new PseudoSecurityService());
1:     //Avoid another ClassLoader problem
1:     try {
1:       Thread.currentThread().setContextClassLoader(PassthroughFactory.class.getClassLoader());
1:       a.createSecurityService(ssi);
1:     } finally {
1:       Thread.currentThread().setContextClassLoader(cl);
1:     }
1:     
1:     
1:     ProxyFactoryInfo proxyFactoryInfo = new ProxyFactoryInfo();
1:     proxyFactoryInfo.id = "Aries ProxyFactory";
1:     proxyFactoryInfo.service = "ProxyFactory";
1:     proxyFactoryInfo.properties = new Properties();
1:     PassthroughFactory.add(proxyFactoryInfo, AriesProxyService.get());
1:     try {
1:       Thread.currentThread().setContextClassLoader(PassthroughFactory.class.getClassLoader());
1:       a.createProxyFactory(proxyFactoryInfo);
1:     } finally {
1:       Thread.currentThread().setContextClassLoader(cl);
1:     }
1:   }
1: 
1:   public void stop(BundleContext context) throws Exception {
1:     tracker.close();
1:     AriesProxyService.get().destroy();
1:     OSGiTransactionManager.get().destroy();
1:   }
1: 
1:   public Object addingBundle(Bundle bundle, BundleEvent event) {
1:     
1:     if(mightContainEJBs(bundle)) {
1:       if((bundle.getState() & STARTABLE) != 0) {
1:         startEJBs(bundle);
1:       }
1:       return bundle;
1:     }
1:     return null;
1:   }
1: 
1: 
1:   private boolean mightContainEJBs(Bundle bundle) {
1:     Dictionary<String, String> headers = bundle.getHeaders();
1:     return (headers.get("Export-EJB") != null) || (headers.get("Web-ContextPath") != null);
1:   }
1: 
1:   public void modifiedBundle(Bundle bundle, BundleEvent event, Object object) {
1:     if((bundle.getState() & STARTABLE) != 0) {
1:       startEJBs(bundle);
1:     } else if (bundle.getState() == Bundle.STOPPING) {
1:       stopEJBs(bundle);
1:     }
1:   }
1: 
1:   private void startEJBs(final Bundle bundle) {
1: 
1:     try {
1:       //If there is another thread adding or removing then stop here
1:       Object o = processingMap.put(bundle, PROCESSING_OBJECT);
1:       if(o == REMOVING_OBJECT || o == PROCESSING_OBJECT) {
1:         return;
1:       }
1:       //If already running then avoid
1:       if(runningApps.get(bundle) != null)
1:         return;
1:       
0:       EjbModule ejbModule = new EjbModule(AriesFrameworkUtil.getClassLoaderForced(bundle),
0:           null, null, null);
1:       
1:       addAltDDs(ejbModule, bundle);
1:       //We build our own because we can't trust anyone to get the classpath right otherwise!
1:       ejbModule.setFinder(new OSGiFinder(bundle));
1:       
1:       ConfigurationFactory configurationFactory = new ConfigurationFactory();
1:       
1:       EjbJarInfo ejbInfo = null;
1:       //Avoid yet another ClassLoading problem
1:       ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:       try {
1:         Thread.currentThread().setContextClassLoader(new ClassLoader(OpenEjbVersion.class.getClassLoader()) {
1:           protected Class<?> findClass(String name) throws ClassNotFoundException {
1:             for(Bundle b : bundle.getBundleContext().getBundles()) {
1:               if(b.getSymbolicName().contains("jaxb-impl"))
1:                 return b.loadClass(name);
1:             
1:             }
1:             throw new ClassNotFoundException(name);
1:           }
1:         });
1:         
1:         ejbInfo = configurationFactory.configureApplication(ejbModule);
1:         //Another oddity here
1:         ejbInfo.validationInfo = null;
1:       } finally {
1:         Thread.currentThread().setContextClassLoader(cl);
1:       }
1:       
1:       
1:       Assembler assembler = (Assembler) SystemInstance.get().getComponent(Assembler.class);
1:       RunningApplication app = null;
1:       try {
1:         SystemInstance.get().setProperty("openejb.geronimo", "true");
1:         cl = Thread.currentThread().getContextClassLoader();
1:         try {
1:           Thread.currentThread().setContextClassLoader(OpenEjbVersion.class.getClassLoader());
1:           app = new RunningApplication(assembler.createApplication(ejbInfo, 
0:               new AppClassLoader(ejbModule.getClassLoader())));
1:         } finally {
1:           Thread.currentThread().setContextClassLoader(cl);
1:         }
1:       } finally {
1:         SystemInstance.get().getProperties().remove("openejb.geronimo");
1:       }
1:       runningApps.put(bundle, app);
1:       
0:       app.addRegs(registerEJBs(app.getCtx(), bundle));
1:       
1:     } catch (OpenEJBException oee) {
1:       // TODO Auto-generated catch block
1:       oee.printStackTrace();
1:     } catch (NamingException e) {
1:       // TODO Auto-generated catch block
1:       e.printStackTrace();
1:     } catch (IOException e) {
1:       e.printStackTrace();
1:     } finally {
1:       if(processingMap.remove(bundle) == REMOVING_OBJECT) {
1:         stopEJBs(bundle);
1:       }
1:     }
1:   }
1: 
1:   private void addAltDDs(EjbModule ejbModule, Bundle bundle) {
1:     
1:     Map<String, Object> altDDs = ejbModule.getAltDDs(); 
1:     
1:     String folder = (bundle.getHeaders().get("Web-ContextPath") == null) ? 
1:         "META-INF" : "WEB-INF";
1:     
1:     Enumeration<URL> e = bundle.findEntries(folder, "*.xml", false);
1:     if(e == null)
1:       return;
1:     
1:     for(URL u : Collections.list(e)) {
1:       
1:       String urlString = u.toExternalForm();
1:       urlString = urlString.substring(urlString.lastIndexOf('/') + 1);
1:         
1:       altDDs.put(urlString, u);
1:     }
0:     //Persistence descriptors are handled by Aries JPA
0:     altDDs.remove("persistence.xml");
1:   }
1: 
0:   private Collection<ServiceRegistration<?>> registerEJBs(AppContext appCtx, Bundle bundle) {
1:     
0:     Collection<ServiceRegistration<?>> regs = new ArrayList<ServiceRegistration<?>>();
1:     
0:     Collection<String> names = new HashSet<String>();
1:     
0:     Dictionary<String, String> d = bundle.getHeaders();
0:     String valueOfExportEJBHeader = d.get("Export-EJB");
1:     
0:     if((valueOfExportEJBHeader == null)||(valueOfExportEJBHeader.equals(""))){
0:       return Collections.emptyList();
1:     }
1:     
0:     List<NameValuePair> contentsOfExportEJBHeader = ManifestHeaderProcessor.parseExportString(valueOfExportEJBHeader);
0:     for(NameValuePair nvp:contentsOfExportEJBHeader){
0:       names.add(nvp.getName());
1:     }
1:     
0:     if(names.contains(NONE)){
0:       return Collections.emptyList();
1:     }
1:     
0:     if(names.contains(ALL)){
0:       names = new AllCollection<String>();
1:     }
1:     
0:     //Register our session beans
0:     for (BeanContext beanContext : appCtx.getDeployments()) {
0:       String ejbName = beanContext.getEjbName();
0:       //Skip if not a Singleton or stateless bean
0:       ContainerType type = beanContext.getContainer().getContainerType();
0:       boolean register = type == ContainerType.SINGLETON || type == ContainerType.STATELESS;
1:       
0:       //Skip if not allowed name
0:       register &= names.contains(ejbName);
1:       
0:       if(!register) {
0:         continue;
1:       }
1:       
0:       if (beanContext.isLocalbean()) {
1: 
0:         BeanContext.BusinessLocalBeanHome home = beanContext.getBusinessLocalBeanHome();
1:     
0:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:         
0:         props.put("ejb.name", ejbName);
0:         props.put("ejb.type", getCasedType(type));
0:         regs.add(bundle.getBundleContext().registerService(beanContext.getBeanClass().getName(), 
0:             new EJBServiceFactory(home), props));
1:       }
1: 
1:   
0:       for (Class<?> interfce : beanContext.getBusinessLocalInterfaces()) {
1: 
0:         BeanContext.BusinessLocalHome home = beanContext.getBusinessLocalHome(interfce);
1:         
0:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:         
0:         props.put("ejb.name", ejbName);
0:         props.put("ejb.type", getCasedType(type));
0:         regs.add(bundle.getBundleContext().registerService(interfce.getName(), 
0:             new EJBServiceFactory(home), props));
1:       }
1:       
0:       for (Class<?> interfce : beanContext.getBusinessRemoteInterfaces()) {
1: 
0:         List<Class> interfaces = ProxyInterfaceResolver.getInterfaces(beanContext.getBeanClass(), 
0:             interfce, beanContext.getBusinessRemoteInterfaces());
0:         BeanContext.BusinessRemoteHome home = beanContext.getBusinessRemoteHome(interfaces, interfce);
1:         
0:         Dictionary<String, Object> props = new Hashtable<String, Object>(); 
1:         
0:         props.put("sevice.exported.interfaces", interfce.getName());
0:         props.put("ejb.name", ejbName);
0:         props.put("ejb.type", getCasedType(type));
0:         regs.add(bundle.getBundleContext().registerService(interfce.getName(), 
0:             new EJBServiceFactory(home), props));
1:       }
1:     }
0:     return regs;
1:   }
1: 
0:   private String getCasedType(ContainerType type) {
0:     String s = type.toString().substring(0,1).toUpperCase();
0:     s += type.toString().substring(1).toLowerCase();
0:     return s;
1:   }
1: 
1:   private void stopEJBs(Bundle bundle) {
1:     if(processingMap.put(bundle, REMOVING_OBJECT) == PROCESSING_OBJECT)
1:       return;
1:     else {
1:       try {
1:         RunningApplication app = runningApps.remove(bundle);
1:         if(app != null) {
0:           for(ServiceRegistration<?> reg : app.getRegs()) {
0:             AriesFrameworkUtil.safeUnregisterService(reg);
1:           }
1:           Assembler assembler = (Assembler) SystemInstance.get().getComponent(Assembler.class);
1:           assembler.destroyApplication(app.getCtx());
1:         }
1:       } catch (OpenEJBException e) {
1:         // TODO Auto-generated catch block
1:         e.printStackTrace();
1:       } finally {
1:         if(processingMap.remove(bundle) == PROCESSING_OBJECT)
1:           startEJBs(bundle);
1:       }
1:     }
1:   }
1:   
1:   public void removedBundle(Bundle bundle, BundleEvent event, Object object) {
1:     if (bundle.getState() == Bundle.STOPPING) {
1:       stopEJBs(bundle);
1:     }
1:   }
1:   
1:   private static final class AppClassLoader extends ClassLoader {
1:     private AppClassLoader(ClassLoader parentLoader) {
1:       super(parentLoader);
1:     }
1: 
1:     @Override
1:     protected Class<?> findClass(String className)
1:         throws ClassNotFoundException {
1:       return Class.forName(className, false, OpenEjbVersion.class.getClassLoader());
1:     }
1:   }
1: }
============================================================================