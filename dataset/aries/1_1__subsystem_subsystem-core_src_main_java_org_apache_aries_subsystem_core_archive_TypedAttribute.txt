1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:26123d8: package org.apache.aries.subsystem.core.archive;
2:26123d8: 
1:d93afd1: import java.util.ArrayList;
1:d93afd1: import java.util.List;
1:d93afd1: import java.util.regex.Matcher;
1:d93afd1: 
1:26123d8: import org.osgi.framework.Version;
1:26123d8: 
1:26123d8: public class TypedAttribute extends AbstractAttribute {
1:d93afd1: 	private static final String DOUBLE = "Double";
1:d93afd1: 	private static final String LIST = "List";
1:d93afd1: 	private static final String LIST_DOUBLE = "List<Double>";
1:d93afd1: 	private static final String LIST_LONG = "List<Long>";
1:d93afd1: 	private static final String LIST_STRING = "List<String>";
1:d93afd1: 	private static final String LIST_VERSION = "List<Version>";
1:d93afd1: 	private static final String LONG = "Long";
1:d93afd1: 	private static final String STRING = "String";
1:d93afd1: 	private static final String VERSION = "Version";
1:26123d8: 	
1:d93afd1: 	private static Object parseScalar(String value, String type) {
1:d93afd1: 		if (STRING.equals(type)) {
1:d93afd1: 			return value;
3:26123d8: 		}
1:d93afd1: 		if (VERSION.equals(type)) {
1:d93afd1: 			return Version.parseVersion(value);
1:d93afd1: 		}
1:d93afd1: 		if (LONG.equals(type)) {
1:d93afd1: 			return Long.valueOf(value);
1:d93afd1: 		}
1:d93afd1: 		if (DOUBLE.equals(type)) {
1:d93afd1: 			return Double.valueOf(value);
1:d93afd1: 		}
1:d93afd1: 		return null;
1:26123d8: 	}
1:26123d8: 	
1:d93afd1: 	private static Object parseList(String value, String type) {
1:d93afd1: 		if (!type.startsWith(LIST)) {
1:d93afd1: 			return null;
1:d93afd1: 		}
1:d93afd1: 		String scalar;
1:d93afd1: 		if (type.length() == LIST.length()) {
1:d93afd1: 			scalar = STRING;
1:d93afd1: 		}
1:d93afd1: 		else {
1:d93afd1: 			Matcher matcher = Patterns.SCALAR_LIST.matcher(type);
1:d93afd1: 			if (!matcher.matches()) {
1:d93afd1: 				return null;
1:d93afd1: 			}
1:d93afd1: 			scalar = matcher.group(1);
1:d93afd1: 		}
1:d93afd1: 		String[] values = value.split(",");
1:d93afd1: 		List<Object> result = new ArrayList<Object>(values.length);
1:d93afd1: 		for (String s : values) {
1:d93afd1: 			result.add(parseScalar(s, scalar));
1:d93afd1: 		}
1:d93afd1: 		return result;
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	private static Object parseValue(String value, String type) {
1:d93afd1: 		if (type == null) {
1:d93afd1: 			return value;
1:d93afd1: 		}
1:d93afd1: 		Object result = parseScalar(value, type);
1:d93afd1: 		if (result == null) {
1:d93afd1: 			result = parseList(value, type);
1:d93afd1: 		}
1:d93afd1: 		return result;
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	private final String type;
1:26123d8: 	
1:26123d8: 	public TypedAttribute(String name, String value, String type) {
1:26123d8: 		super(name, parseValue(value, type));
1:26123d8: 		this.type = type;
1:26123d8: 	}
1:26123d8: 	
1:d93afd1: 	public TypedAttribute(String name, Object value) {
1:d93afd1: 		super(name, value);
1:d93afd1: 		if (value instanceof String) {
1:d93afd1: 			type = STRING;
1:d93afd1: 		}
1:d93afd1: 		else if (value instanceof List) {
1:d93afd1: 			@SuppressWarnings("rawtypes")
1:d93afd1: 			List list = (List)value;
1:d93afd1: 			if (list.isEmpty()) {
1:d93afd1: 				type = LIST;
1:d93afd1: 			}
1:d93afd1: 			else {
1:d93afd1: 				Object o = list.get(0);
1:d93afd1: 				if (o instanceof String) {
1:d93afd1: 					type = LIST_STRING;
1:d93afd1: 				}
1:d93afd1: 				else if (o instanceof Version) {
1:d93afd1: 					type = LIST_VERSION;
1:d93afd1: 				}
1:d93afd1: 				else if (o instanceof Long) {
1:d93afd1: 					type = LIST_LONG;
1:d93afd1: 				}
1:d93afd1: 				else if (o instanceof Double) {
1:d93afd1: 					type = LIST_DOUBLE;
1:d93afd1: 				}
1:d93afd1: 				else {
1:d93afd1: 					throw new IllegalArgumentException(name + '=' + value);
1:d93afd1: 				}
1:d93afd1: 			}
1:d93afd1: 		}
1:d93afd1: 		else if (value instanceof Version) {
1:d93afd1: 			type = VERSION;
1:d93afd1: 		}
1:d93afd1: 		else if (value instanceof Long) {
1:d93afd1: 			type = LONG;
1:d93afd1: 		}
1:d93afd1: 		else if (value instanceof Double) {
1:d93afd1: 			type = DOUBLE;
1:d93afd1: 		}
1:d93afd1: 		else {
1:d93afd1: 			throw new IllegalArgumentException(name + '=' + value);
1:d93afd1: 		}
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	@Override
1:d93afd1:     public String toString() {
1:d93afd1: 		StringBuilder builder = new StringBuilder()
1:d93afd1: 				.append(getName())
1:d93afd1: 				.append(':')
1:d93afd1: 				.append(type)
1:d93afd1: 				.append("=\"");
1:d93afd1: 		if (type.startsWith(LIST)) {
1:d93afd1: 			@SuppressWarnings("rawtypes")
1:d93afd1: 			List list = (List)getValue();
1:d93afd1: 			if (!list.isEmpty()) {
1:d93afd1: 				builder.append(list.get(0));
1:d93afd1: 			}
1:d93afd1: 			for (int i = 1; i < list.size(); i++) {
1:d93afd1: 				builder.append(',').append(list.get(i));
1:d93afd1: 			}
1:d93afd1: 		}
1:d93afd1: 		else {
1:d93afd1: 			builder.append(getValue());
1:d93afd1: 		}
1:d93afd1: 		return builder.append('"').toString();
1:26123d8: 	}
1:26123d8: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.regex.Matcher;
1: 
1: 	private static final String DOUBLE = "Double";
1: 	private static final String LIST = "List";
1: 	private static final String LIST_DOUBLE = "List<Double>";
1: 	private static final String LIST_LONG = "List<Long>";
1: 	private static final String LIST_STRING = "List<String>";
1: 	private static final String LIST_VERSION = "List<Version>";
1: 	private static final String LONG = "Long";
1: 	private static final String STRING = "String";
1: 	private static final String VERSION = "Version";
1: 	private static Object parseScalar(String value, String type) {
1: 		if (STRING.equals(type)) {
1: 			return value;
1: 		if (VERSION.equals(type)) {
1: 			return Version.parseVersion(value);
1: 		}
1: 		if (LONG.equals(type)) {
1: 			return Long.valueOf(value);
1: 		}
1: 		if (DOUBLE.equals(type)) {
1: 			return Double.valueOf(value);
1: 		}
1: 		return null;
1: 	private static Object parseList(String value, String type) {
1: 		if (!type.startsWith(LIST)) {
1: 			return null;
1: 		}
1: 		String scalar;
1: 		if (type.length() == LIST.length()) {
1: 			scalar = STRING;
1: 		}
1: 		else {
1: 			Matcher matcher = Patterns.SCALAR_LIST.matcher(type);
1: 			if (!matcher.matches()) {
1: 				return null;
1: 			}
1: 			scalar = matcher.group(1);
1: 		}
1: 		String[] values = value.split(",");
1: 		List<Object> result = new ArrayList<Object>(values.length);
1: 		for (String s : values) {
1: 			result.add(parseScalar(s, scalar));
1: 		}
1: 		return result;
1: 	}
1: 	
1: 	private static Object parseValue(String value, String type) {
1: 		if (type == null) {
1: 			return value;
1: 		}
1: 		Object result = parseScalar(value, type);
1: 		if (result == null) {
1: 			result = parseList(value, type);
1: 		}
1: 		return result;
1: 	}
1: 	
1: 	private final String type;
1: 	public TypedAttribute(String name, Object value) {
1: 		super(name, value);
1: 		if (value instanceof String) {
1: 			type = STRING;
1: 		}
1: 		else if (value instanceof List) {
1: 			@SuppressWarnings("rawtypes")
1: 			List list = (List)value;
1: 			if (list.isEmpty()) {
1: 				type = LIST;
1: 			}
1: 			else {
1: 				Object o = list.get(0);
1: 				if (o instanceof String) {
1: 					type = LIST_STRING;
1: 				}
1: 				else if (o instanceof Version) {
1: 					type = LIST_VERSION;
1: 				}
1: 				else if (o instanceof Long) {
1: 					type = LIST_LONG;
1: 				}
1: 				else if (o instanceof Double) {
1: 					type = LIST_DOUBLE;
1: 				}
1: 				else {
1: 					throw new IllegalArgumentException(name + '=' + value);
1: 				}
1: 			}
1: 		}
1: 		else if (value instanceof Version) {
1: 			type = VERSION;
1: 		}
1: 		else if (value instanceof Long) {
1: 			type = LONG;
1: 		}
1: 		else if (value instanceof Double) {
1: 			type = DOUBLE;
1: 		}
1: 		else {
1: 			throw new IllegalArgumentException(name + '=' + value);
1: 		}
1: 	}
1: 	
1: 	@Override
1:     public String toString() {
1: 		StringBuilder builder = new StringBuilder()
1: 				.append(getName())
1: 				.append(':')
1: 				.append(type)
1: 				.append("=\"");
1: 		if (type.startsWith(LIST)) {
1: 			@SuppressWarnings("rawtypes")
1: 			List list = (List)getValue();
1: 			if (!list.isEmpty()) {
1: 				builder.append(list.get(0));
1: 			}
1: 			for (int i = 1; i < list.size(); i++) {
1: 				builder.append(',').append(list.get(i));
1: 			}
1: 		}
1: 		else {
1: 			builder.append(getValue());
1: 		}
1: 		return builder.append('"').toString();
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:26123d8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import org.osgi.framework.Version;
1: 
1: public class TypedAttribute extends AbstractAttribute {
0: 	public static enum Type {
0: 		Double,
0: 		Long,
0: 		String,
0: 		Version
1: 	}
1: 	
0: 	private static Object parseValue(String value, Type type) {
0: 		switch (type) {
0: 			case Double:
0: 				return Double.valueOf(value);
0: 			case Long:
0: 				return Long.valueOf(value);
0: 			case Version:
0: 				return Version.parseVersion(value);
0: 			default:
0: 				return value;
1: 		}
1: 	}
1: 	
0: 	private final Type type;
1: 	
1: 	public TypedAttribute(String name, String value, String type) {
0: 		this(name, value, Type.valueOf(type));
1: 	}
1: 	
0: 	public TypedAttribute(String name, String value, Type type) {
1: 		super(name, parseValue(value, type));
1: 		this.type = type;
1: 	}
1: 	
0: 	public Type getType() {
0: 		return type;
1: 	}
1: }
============================================================================