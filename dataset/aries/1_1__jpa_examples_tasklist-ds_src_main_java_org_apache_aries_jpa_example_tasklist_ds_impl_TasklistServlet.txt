1:5ac33c7: /*
1:5ac33c7:  * Licensed to the Apache Software Foundation (ASF) under one
1:5ac33c7:  * or more contributor license agreements.  See the NOTICE file
1:5ac33c7:  * distributed with this work for additional information
1:5ac33c7:  * regarding copyright ownership.  The ASF licenses this file
1:5ac33c7:  * to you under the Apache License, Version 2.0 (the
1:5ac33c7:  * "License"); you may not use this file except in compliance
1:5ac33c7:  * with the License.  You may obtain a copy of the License at
1:5ac33c7:  *
1:5ac33c7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5ac33c7:  *
1:5ac33c7:  * Unless required by applicable law or agreed to in writing,
1:5ac33c7:  * software distributed under the License is distributed on an
1:5ac33c7:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:5ac33c7:  * KIND, either express or implied.  See the License for the
1:5ac33c7:  * specific language governing permissions and limitations
1:5ac33c7:  * under the License.
1:5ac33c7:  */
1:9483663: package org.apache.aries.jpa.example.tasklist.ds.impl;
3:9483663: 
1:9483663: import java.io.IOException;
1:9483663: import java.io.PrintWriter;
1:9483663: import java.text.SimpleDateFormat;
1:9483663: import java.util.Collection;
1:9483663: 
1:9483663: import javax.servlet.Servlet;
1:9483663: import javax.servlet.ServletException;
1:9483663: import javax.servlet.http.HttpServlet;
1:9483663: import javax.servlet.http.HttpServletRequest;
1:9483663: import javax.servlet.http.HttpServletResponse;
1:9483663: 
1:9483663: import org.apache.aries.jpa.example.tasklist.model.Task;
1:9483663: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1:9483663: import org.osgi.service.component.annotations.Component;
1:9483663: import org.osgi.service.component.annotations.Reference;
1:9483663: 
1:9483663: @Component(immediate = true,
1:9483663:     service = { Servlet.class }, 
1:9483663:     property = { "alias:String=/tasklist" }
1:9483663: ) 
1:9483663: public class TasklistServlet extends HttpServlet {
1:9483663:     private static final long serialVersionUID = 34992072289535683L;
1:ec3ea65:     private transient TaskService taskService; // NOSONAR
1:9483663: 
1:9483663:     @Override
1:9483663:     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
1:9483663:         IOException {
1:9483663:         String add = req.getParameter("add");
1:9483663:         String taskId = req.getParameter("taskId");
1:9483663:         String title = req.getParameter("title");
1:ec3ea65:         PrintWriter writer = resp.getWriter(); // NOSONAR
1:9483663:         if (add != null) {
1:9483663:             addTask(taskId, title);
1:9483663:         } else if (taskId != null && taskId.length() > 0) {
1:9483663:             showTask(writer, taskId);
1:9483663:         } else {
1:9483663:             showTaskList(writer);
1:9483663:         }
1:9483663:     }
1:9483663: 
1:9483663:     private void addTask(String taskId, String title) {
1:9483663:         Task task = new Task();
1:9483663:         task.setId(new Integer(taskId));
1:9483663:         task.setTitle(title);
1:9483663:         taskService.addTask(task );
1:9483663:     }
1:9483663: 
1:9483663:     private void showTaskList(PrintWriter writer) {
1:9483663:         writer.println("<h1>Tasks</h1>");
1:9483663:         Collection<Task> tasks = taskService.getTasks();
1:9483663:         for (Task task : tasks) {
1:9483663:             writer.println("<a href=\"?taskId=" + task.getId() + "\">" + task.getTitle() + "</a><BR/>");
1:9483663:         }
1:9483663:     }
1:9483663: 
1:9483663:     private void showTask(PrintWriter writer, String taskId) {
1:9483663:         SimpleDateFormat sdf = new SimpleDateFormat();
1:9483663:         Task task = taskService.getTask(new Integer(taskId));
1:9483663:         if (task != null) {
1:9483663:             writer.println("<h1>Task " + task.getTitle() + " </h1>");
1:9483663:             if (task.getDueDate() != null) {
1:9483663:                 writer.println("Due date: " + sdf.format(task.getDueDate()) + "<br/>");
1:9483663:             }
1:9483663:             writer.println(task.getDescription());
1:9483663:         } else {
1:9483663:             writer.println("Task with id " + taskId + " not found");
1:9483663:         }
1:9483663: 
1:9483663:     }
1:9483663: 
1:9483663:     @Reference
1:9483663:     public void setTaskService(TaskService taskService) {
1:9483663:         this.taskService = taskService;
1:9483663:     }
1:9483663: 
1:9483663: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private transient TaskService taskService; // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:         PrintWriter writer = resp.getWriter(); // NOSONAR
commit:5ac33c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:9483663
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.example.tasklist.ds.impl;
1: 
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.text.SimpleDateFormat;
1: import java.util.Collection;
1: 
1: import javax.servlet.Servlet;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
1: import org.apache.aries.jpa.example.tasklist.model.Task;
1: import org.apache.aries.jpa.example.tasklist.model.TaskService;
1: import org.osgi.service.component.annotations.Component;
1: import org.osgi.service.component.annotations.Reference;
1: 
1: @Component(immediate = true,
1:     service = { Servlet.class }, 
1:     property = { "alias:String=/tasklist" }
1: ) 
1: public class TasklistServlet extends HttpServlet {
1:     
0:     TaskService taskService;
1: 
1:     private static final long serialVersionUID = 34992072289535683L;
1: 
1:     @Override
1:     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
1:         IOException {
1:         String add = req.getParameter("add");
1:         String taskId = req.getParameter("taskId");
1:         String title = req.getParameter("title");
0:         PrintWriter writer = resp.getWriter();
1:         if (add != null) {
1:             addTask(taskId, title);
1:         } else if (taskId != null && taskId.length() > 0) {
1:             showTask(writer, taskId);
1:         } else {
1:             showTaskList(writer);
1:         }
1:     }
1: 
1:     private void addTask(String taskId, String title) {
1:         Task task = new Task();
1:         task.setId(new Integer(taskId));
1:         task.setTitle(title);
1:         taskService.addTask(task );
1:     }
1: 
1:     private void showTaskList(PrintWriter writer) {
1:         writer.println("<h1>Tasks</h1>");
1:         Collection<Task> tasks = taskService.getTasks();
1:         for (Task task : tasks) {
1:             writer.println("<a href=\"?taskId=" + task.getId() + "\">" + task.getTitle() + "</a><BR/>");
1:         }
1:     }
1: 
1:     private void showTask(PrintWriter writer, String taskId) {
1:         SimpleDateFormat sdf = new SimpleDateFormat();
1:         Task task = taskService.getTask(new Integer(taskId));
1:         if (task != null) {
1:             writer.println("<h1>Task " + task.getTitle() + " </h1>");
1:             if (task.getDueDate() != null) {
1:                 writer.println("Due date: " + sdf.format(task.getDueDate()) + "<br/>");
1:             }
1:             writer.println(task.getDescription());
1:         } else {
1:             writer.println("Task with id " + taskId + " not found");
1:         }
1: 
1:     }
1: 
1:     @Reference
1:     public void setTaskService(TaskService taskService) {
1:         this.taskService = taskService;
1:     }
1: 
1: }
============================================================================