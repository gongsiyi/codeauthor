1:0f3010e: /*
1:0f3010e:  * Licensed to the Apache Software Foundation (ASF) under one
1:0f3010e:  * or more contributor license agreements.  See the NOTICE file
1:0f3010e:  * distributed with this work for additional information
1:0f3010e:  * regarding copyright ownership.  The ASF licenses this file
1:0f3010e:  * to you under the Apache License, Version 2.0 (the
1:0f3010e:  * "License"); you may not use this file except in compliance
1:0f3010e:  * with the License.  You may obtain a copy of the License at
1:0f3010e:  *
1:0f3010e:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0f3010e:  *
1:0f3010e:  * Unless required by applicable law or agreed to in writing,
1:0f3010e:  * software distributed under the License is distributed on an
1:0f3010e:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:0f3010e:  * KIND, either express or implied.  See the License for the
1:0f3010e:  * specific language governing permissions and limitations
1:0f3010e:  * under the License.
1:0f3010e:  */
3:0f3010e: 
1:ba73ed7: package org.apache.aries.application.utils.management;
1:0f3010e: 
1:0f3010e: import java.util.HashMap;
1:0f3010e: import java.util.HashSet;
1:0f3010e: import java.util.List;
1:0f3010e: import java.util.Map;
1:0f3010e: import java.util.Set;
1:0f3010e: import java.util.Map.Entry;
1:0f3010e: import java.util.jar.Attributes;
1:0f3010e: 
1:0f3010e: import org.apache.aries.application.Content;
1:59e7b8b: import org.apache.aries.application.impl.ContentImpl;
1:0f3010e: import org.apache.aries.application.management.BundleInfo;
1:910fec0: import org.apache.aries.util.manifest.BundleManifest;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:0f3010e: import org.osgi.framework.Constants;
1:0f3010e: import org.osgi.framework.Version;
1:0f3010e: 
1:ba73ed7: public final class SimpleBundleInfo implements BundleInfo {
1:59e7b8b:   private Content _contentName;
1:5297b83:   private Version _version;
1:0f3010e:   private Attributes _attributes;
1:0f3010e:   private Set<Content> _exportPackages = null;
1:0f3010e:   private Set<Content> _importPackages = null;
1:b83fa8a:   private Set<Content> _exportServices = null;
1:b83fa8a:   private Set<Content> _importServices = null;
1:958fb7e:   private Set<Content> _requireBundle = null;
1:958fb7e:   
1:0f3010e:   private String _location;
1:0f3010e:   
1:59e7b8b:   public SimpleBundleInfo(BundleManifest bm, String location) { 
1:59e7b8b:     _contentName = new ContentImpl(
1:59e7b8b:         bm.getSymbolicName(), 
1:de5b346:         ManifestHeaderProcessor.parseBundleSymbolicName(bm.getSymbolicName()).getAttributes());
1:5297b83:     _version = bm.getVersion();
1:5297b83:     _attributes = bm.getRawAttributes();
1:0f3010e:     _location = location;
1:0f3010e:   }
1:59e7b8b:     
1:0f3010e:   public Set<Content> getExportPackage() {
1:0f3010e:     if (_exportPackages == null) { 
1:0f3010e:       _exportPackages = getContentSetFromHeader (_attributes, Constants.EXPORT_PACKAGE);
1:0f3010e:     }
1:0f3010e:     return _exportPackages;
1:0f3010e:   }
1:0f3010e:   
1:b83fa8a:   public Set<Content> getExportService() {
1:b83fa8a:     if (_exportServices == null) {
1:b83fa8a:       _exportServices = getContentSetFromHeader (_attributes, Constants.EXPORT_SERVICE);
11:8914925:     }
1:8689985:     return _exportServices;
1:8914925:   }
1:0f3010e: 
1:0f3010e:   public Map<String, String> getHeaders() {
1:0f3010e:     Map<String, String> result = new HashMap<String, String>();
1:0aad0ca:     for (Entry<Object, Object> h: _attributes.entrySet()) {
1:0aad0ca:       Attributes.Name name = (Attributes.Name) h.getKey();
1:0aad0ca:       String value = (String) h.getValue();
1:0aad0ca:       result.put(name.toString(), value);
1:0f3010e:     }
1:0f3010e:     return result;
1:0f3010e:   }
1:958fb7e: 
1:0f3010e:   public Set<Content> getImportPackage() {
1:0f3010e:     if (_importPackages == null) { 
1:0f3010e:       _importPackages = getContentSetFromHeader (_attributes, Constants.IMPORT_PACKAGE);
1:0f3010e:     }
1:0f3010e:     return _importPackages;
1:0f3010e:   }
1:0f3010e: 
1:b83fa8a:   public Set<Content> getImportService() {
1:b83fa8a:     if (_importServices == null) {
1:b83fa8a:       _importServices = getContentSetFromHeader (_attributes, Constants.IMPORT_SERVICE);
1:0f3010e:     }
1:b83fa8a:     return _importServices;
1:8914925:   }
1:0f3010e: 
1:0f3010e:   public String getLocation() {
1:0f3010e:     return _location;
1:0f3010e:   }
1:0f3010e: 
1:0f3010e:   public String getSymbolicName() {
1:59e7b8b:     return _contentName.getContentName();
1:0f3010e:   }
1:0f3010e: 
1:0f3010e:   public Version getVersion() {
1:5297b83:     return _version;
1:0f3010e:   }
1:0f3010e: 
1:0f3010e:   private Set<Content> getContentSetFromHeader (Attributes attributes, String key) {
1:0f3010e:     String header = _attributes.getValue(key);
1:0f3010e:     List<String> splitHeader = ManifestHeaderProcessor.split(header, ",");
1:0f3010e:     HashSet<Content> result = new HashSet<Content>();
1:0f3010e:     for (String s: splitHeader) { 
1:59e7b8b:       Content c = new ContentImpl(s);
1:734efc2:       result.add(c);
1:0f3010e:     }
1:0f3010e:     return result;
1:0f3010e:   }
1:0f3010e: 
1:958fb7e:   public Map<String, String> getBundleAttributes()
1:958fb7e:   {
1:59e7b8b:     return _contentName.getAttributes();
1:958fb7e:   }
1:958fb7e: 
1:958fb7e:   public Map<String, String> getBundleDirectives()
1:958fb7e:   {
1:59e7b8b:     return _contentName.getDirectives();
1:958fb7e:   }
1:958fb7e: 
1:958fb7e:   public Set<Content> getRequireBundle()
1:958fb7e:   {
1:958fb7e:     if (_requireBundle == null) {
1:958fb7e:       _requireBundle = getContentSetFromHeader(_attributes, Constants.REQUIRE_BUNDLE);
1:958fb7e:     }
1:958fb7e:     
1:958fb7e:     return _requireBundle;
1:958fb7e:   }
1:cc6016b:   
1:cc6016b:   /**
1:cc6016b:    * Equality is just based on the location. If you install a bundle from the same location string
1:cc6016b:    * you get the same Bundle, even if the underlying bundle had a different symbolic name/version.
1:cc6016b:    * This seems reasonable and quick.
1:cc6016b:    */
1:cc6016b:   public boolean equals(Object other)
1:cc6016b:   {
1:cc6016b:     if (other == null) return false;
1:cc6016b:     if (other == this) return true;
1:ba73ed7:     if (other instanceof SimpleBundleInfo) {
1:ba73ed7:       return _location.equals(((SimpleBundleInfo)other)._location);
1:cc6016b:     }
1:cc6016b:     
1:cc6016b:     return false;
1:cc6016b:   }
1:cc6016b:   
1:cc6016b:   public int hashCode()
1:cc6016b:   {
1:cc6016b:     return _location.hashCode();
1:cc6016b:   }
1:cc6016b:   
1:cc6016b:   public String toString()
1:cc6016b:   {
1:59e7b8b:     return _contentName.getContentName() + "_" + getVersion();
1:cc6016b:   }
1:9c133a0:   public Attributes getRawAttributes()
1:9c133a0:   {
1:9c133a0:     
1:9c133a0:     return _attributes;
1:cc6016b:   }
1:9c133a0: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:8689985
/////////////////////////////////////////////////////////////////////////
1:     return _exportServices;
commit:cc6016b
/////////////////////////////////////////////////////////////////////////
0: public final class BundleInfoImpl implements BundleInfo {
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * Equality is just based on the location. If you install a bundle from the same location string
1:    * you get the same Bundle, even if the underlying bundle had a different symbolic name/version.
1:    * This seems reasonable and quick.
1:    */
1:   public boolean equals(Object other)
1:   {
1:     if (other == null) return false;
1:     if (other == this) return true;
0:     if (other instanceof BundleInfoImpl) {
0:       return _location.equals(((BundleInfoImpl)other)._location);
1:     }
1:     
1:     return false;
1:   }
1:   
1:   public int hashCode()
1:   {
1:     return _location.hashCode();
1:   }
1:   
1:   public String toString()
1:   {
0:     return _symbolicName.getContentName() + "_" + getVersion();
1:   }
1: }
commit:958fb7e
/////////////////////////////////////////////////////////////////////////
0:   private Content _symbolicName;
1:   private Set<Content> _requireBundle = null;
1:   
0:     _symbolicName = amf.parseContent(bm.getSymbolicName());
/////////////////////////////////////////////////////////////////////////
0:     return _symbolicName.getContentName();
/////////////////////////////////////////////////////////////////////////
1: 
1:   public Map<String, String> getBundleAttributes()
1:   {
0:     return _symbolicName.getAttributes();
1:   }
1: 
1:   public Map<String, String> getBundleDirectives()
1:   {
0:     return _symbolicName.getDirectives();
1:   }
1: 
1:   public Set<Content> getRequireBundle()
1:   {
1:     if (_requireBundle == null) {
1:       _requireBundle = getContentSetFromHeader(_attributes, Constants.REQUIRE_BUNDLE);
1:     }
1:     
1:     return _requireBundle;
1:   }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:de5b346
/////////////////////////////////////////////////////////////////////////
1:         ManifestHeaderProcessor.parseBundleSymbolicName(bm.getSymbolicName()).getAttributes());
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.BundleManifest;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9c133a0
/////////////////////////////////////////////////////////////////////////
1:   public Attributes getRawAttributes()
1:   {
1:     
1:     return _attributes;
1:   }
commit:59e7b8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.impl.ContentImpl;
/////////////////////////////////////////////////////////////////////////
1:   private Content _contentName;
/////////////////////////////////////////////////////////////////////////
1:   public SimpleBundleInfo(BundleManifest bm, String location) { 
1:     _contentName = new ContentImpl(
1:         bm.getSymbolicName(), 
0:         ManifestHeaderProcessor.parseBundleSymbolicName(bm.getSymbolicName()).getValue());
1:     
/////////////////////////////////////////////////////////////////////////
1:     return _contentName.getContentName();
/////////////////////////////////////////////////////////////////////////
1:       Content c = new ContentImpl(s);
/////////////////////////////////////////////////////////////////////////
1:     return _contentName.getAttributes();
1:     return _contentName.getDirectives();
/////////////////////////////////////////////////////////////////////////
1:     return _contentName.getContentName() + "_" + getVersion();
commit:beeb1d7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.ApplicationMetadataFactory;
/////////////////////////////////////////////////////////////////////////
0:   private ApplicationMetadataFactory _applicationMetadataFactory;
0:   public BundleInfoImpl (ApplicationMetadataFactory amf, BundleManifest bm, String location) { 
0:     _applicationMetadataFactory = amf;
/////////////////////////////////////////////////////////////////////////
0:       Content c = _applicationMetadataFactory.parseContent(s);
commit:734efc2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.ApplicationMetadataManager;
/////////////////////////////////////////////////////////////////////////
0:   private ApplicationMetadataManager _applicationMetadataManager;
0:   public BundleInfoImpl (ApplicationMetadataManager amm, BundleManifest bm, String location) { 
0:     _applicationMetadataManager = amm;
/////////////////////////////////////////////////////////////////////////
0:       Content c = _applicationMetadataManager.parseContent(s);
1:       result.add(c);
commit:5297b83
/////////////////////////////////////////////////////////////////////////
0:   private String _symbolicName;
1:   private Version _version;
0:     _symbolicName = bm.getSymbolicName();
1:     _version = bm.getVersion();
1:     _attributes = bm.getRawAttributes();
/////////////////////////////////////////////////////////////////////////
0:     return _symbolicName;
1:     return _version;
commit:0f3010e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.management.impl;
1: 
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.Map.Entry;
1: import java.util.jar.Attributes;
1: 
1: import org.apache.aries.application.Content;
0: import org.apache.aries.application.impl.ContentImpl;
1: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: 
0: public class BundleInfoImpl implements BundleInfo {
1: 
0:   private BundleManifest _bundleManifest;
1:   private Attributes _attributes;
1:   private Set<Content> _exportPackages = null;
1:   private Set<Content> _importPackages = null;
1:   private String _location;
1:   
0:   public BundleInfoImpl (BundleManifest bm, String location) { 
0:     _bundleManifest = bm;
0:     _attributes = _bundleManifest.getRawAttributes();
1:     _location = location;
1:   }
1:   
1:   public Set<Content> getExportPackage() {
1:     if (_exportPackages == null) { 
1:       _exportPackages = getContentSetFromHeader (_attributes, Constants.EXPORT_PACKAGE);
1:     
1:     }
1:     return _exportPackages;
1:   }
1:   
1:   public Map<String, String> getHeaders() {
0:     Set<Entry<Object, Object>> headers = _attributes.entrySet();
1:     Map<String, String> result = new HashMap<String, String>();
0:     for (Entry<Object, Object> h: headers) { 
0:       result.put((String)h.getKey(), (String)h.getValue());
1:     }
1:     return result;
1:   }
1: 
1:   public Set<Content> getImportPackage() {
1:     if (_importPackages == null) { 
1:       _importPackages = getContentSetFromHeader (_attributes, Constants.IMPORT_PACKAGE);
1:     
1:     }
1:     return _importPackages;
1:   }
1: 
1:   public String getLocation() {
1:     return _location;
1:   }
1: 
1:   public String getSymbolicName() {
0:     return _bundleManifest.getSymbolicName();
1:   }
1: 
1:   public Version getVersion() {
0:     return _bundleManifest.getVersion();
1:   }
1: 
1:   private Set<Content> getContentSetFromHeader (Attributes attributes, String key) { 
1:     String header = _attributes.getValue(key);
1:     List<String> splitHeader = ManifestHeaderProcessor.split(header, ",");
1:     HashSet<Content> result = new HashSet<Content>();
1:     for (String s: splitHeader) { 
0:       result.add(new ContentImpl(s));
1:     }
1:     return result;
1:   }
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:ba73ed7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.utils.management;
/////////////////////////////////////////////////////////////////////////
1: public final class SimpleBundleInfo implements BundleInfo {
/////////////////////////////////////////////////////////////////////////
0:   public SimpleBundleInfo(ApplicationMetadataFactory amf, BundleManifest bm, String location) { 
/////////////////////////////////////////////////////////////////////////
1:     if (other instanceof SimpleBundleInfo) {
1:       return _location.equals(((SimpleBundleInfo)other)._location);
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.management.impl;
0: 
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.Map.Entry;
0: import java.util.jar.Attributes;
0: 
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.impl.ContentImpl;
0: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.Version;
0: 
0: public class BundleInfoImpl implements BundleInfo {
0:   private String _symbolicName;
0:   private Version _version;
0:   private Attributes _attributes;
0:   private Set<Content> _exportPackages = null;
0:   private Set<Content> _importPackages = null;
0:   private String _location;
0:   
0:   public BundleInfoImpl (BundleManifest bm, String location) { 
0:     _symbolicName = bm.getSymbolicName();
0:     _version = bm.getVersion();
0:     _attributes = bm.getRawAttributes();
0:     _location = location;
1:   }
0:   
0:   public Set<Content> getExportPackage() {
0:     if (_exportPackages == null) { 
0:       _exportPackages = getContentSetFromHeader (_attributes, Constants.EXPORT_PACKAGE);
0:     
1:     }
0:     return _exportPackages;
1:   }
0:   
0:   public Map<String, String> getHeaders() {
0:     Set<Entry<Object, Object>> headers = _attributes.entrySet();
0:     Map<String, String> result = new HashMap<String, String>();
0:     for (Entry<Object, Object> h: headers) { 
0:       result.put((String)h.getKey(), (String)h.getValue());
1:     }
0:     return result;
1:   }
0: 
0:   public Set<Content> getImportPackage() {
0:     if (_importPackages == null) { 
0:       _importPackages = getContentSetFromHeader (_attributes, Constants.IMPORT_PACKAGE);
0:     
1:     }
0:     return _importPackages;
1:   }
0: 
0:   public String getLocation() {
0:     return _location;
1:   }
0: 
0:   public String getSymbolicName() {
0:     return _symbolicName;
1:   }
0: 
0:   public Version getVersion() {
0:     return _version;
1:   }
0: 
0:   private Set<Content> getContentSetFromHeader (Attributes attributes, String key) { 
0:     String header = _attributes.getValue(key);
0:     List<String> splitHeader = ManifestHeaderProcessor.split(header, ",");
0:     HashSet<Content> result = new HashSet<Content>();
0:     for (String s: splitHeader) { 
0:       result.add(new ContentImpl(s));
1:     }
0:     return result;
1:   }
1: }
author:David Jencks
-------------------------------------------------------------------------------
commit:0aad0ca
/////////////////////////////////////////////////////////////////////////
1:     for (Entry<Object, Object> h: _attributes.entrySet()) {
1:       Attributes.Name name = (Attributes.Name) h.getKey();
1:       String value = (String) h.getValue();
1:       result.put(name.toString(), value);
/////////////////////////////////////////////////////////////////////////
0:   private Set<Content> getContentSetFromHeader (Attributes attributes, String key) {
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:b83fa8a
/////////////////////////////////////////////////////////////////////////
1:   private Set<Content> _exportServices = null;
1:   private Set<Content> _importServices = null;
/////////////////////////////////////////////////////////////////////////
1:   public Set<Content> getExportService() {
1:     if (_exportServices == null) {
1:       _exportServices = getContentSetFromHeader (_attributes, Constants.EXPORT_SERVICE);
0:     }
0:     return _exportPackages;
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
1:   public Set<Content> getImportService() {
1:     if (_importServices == null) {
1:       _importServices = getContentSetFromHeader (_attributes, Constants.IMPORT_SERVICE);
0:     }
1:     return _importServices;
0:   }
0: 
============================================================================