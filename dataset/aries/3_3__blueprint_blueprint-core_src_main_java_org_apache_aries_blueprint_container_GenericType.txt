1:f13c6ac: /**
1:f13c6ac:  *
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.container;
2:f13c6ac: 
1:f13c6ac: import java.lang.reflect.Array;
1:f13c6ac: import java.lang.reflect.GenericArrayType;
1:f13c6ac: import java.lang.reflect.ParameterizedType;
1:f13c6ac: import java.lang.reflect.Type;
1:f13c6ac: import java.lang.reflect.TypeVariable;
1:f13c6ac: import java.lang.reflect.WildcardType;
1:1a56ba3: import java.security.AccessController;
1:1a56ba3: import java.security.PrivilegedActionException;
1:1a56ba3: import java.security.PrivilegedExceptionAction;
1:f13c6ac: import java.util.HashMap;
1:f13c6ac: import java.util.Map;
1:f13c6ac: 
1:09a7647: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:6414875: import org.apache.aries.blueprint.di.ExecutionContext;
1:f13c6ac: import org.osgi.framework.Bundle;
1:f13c6ac: import org.osgi.service.blueprint.container.ReifiedType;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * XXXX: Currently, in case of arrays getActualTypeArgument(0) returns something similar to what
1:f13c6ac:  * Class.getComponentType() does for arrays.  I don't think this is quite right since getActualTypeArgument()
1:f13c6ac:  * should return the given parameterized type not the component type. Need to check this behavior with the spec.
1:f13c6ac:  */
1:f13c6ac: public class GenericType extends ReifiedType {
1:f13c6ac: 
1:f13c6ac: 	private static final GenericType[] EMPTY = new GenericType[0];
1:f13c6ac: 
1:f13c6ac:     private static final Map<String, Class> primitiveClasses = new HashMap<String, Class>();
1:f13c6ac: 
1:f13c6ac:     static {
1:f13c6ac:         primitiveClasses.put("int", int.class);
1:f13c6ac:         primitiveClasses.put("short", short.class);
1:f13c6ac:         primitiveClasses.put("long", long.class);
1:f13c6ac:         primitiveClasses.put("byte", byte.class);
1:f13c6ac:         primitiveClasses.put("char", char.class);
1:f13c6ac:         primitiveClasses.put("float", float.class);
1:f13c6ac:         primitiveClasses.put("double", double.class);
1:f13c6ac:         primitiveClasses.put("boolean", boolean.class);
1:f13c6ac:     }
1:f13c6ac: 
1:c290cc1:     enum BoundType {
1:c290cc1:         Exact,
1:c290cc1:         Extends,
1:c290cc1:         Super
1:c290cc1:     }
1:c290cc1: 
1:f13c6ac:     private GenericType[] parameters;
1:c290cc1:     private BoundType boundType;
1:f13c6ac: 
1:f13c6ac: 	public GenericType(Type type) {
1:c290cc1: 		this(getConcreteClass(type), boundType(type), parametersOf(type));
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac:     public GenericType(Class clazz, GenericType... parameters) {
1:c290cc1:         this(clazz, BoundType.Exact, parameters);
1:c290cc1:     }
1:c290cc1: 
1:c290cc1:     public GenericType(Class clazz, BoundType boundType, GenericType... parameters) {
1:f13c6ac:         super(clazz);
1:f13c6ac:         this.parameters = parameters;
1:c290cc1:         this.boundType = boundType;
1:f13c6ac:     }
1:f13c6ac: 
1:1a56ba3:     public static GenericType parse(String rawType, final Object loader) throws ClassNotFoundException, IllegalArgumentException {
1:1a56ba3:         final String type = rawType.trim();
1:f13c6ac:         // Check if this is an array
1:f13c6ac:         if (type.endsWith("[]")) {
1:f13c6ac:             GenericType t = parse(type.substring(0, type.length() - 2), loader);
1:f13c6ac:             return new GenericType(Array.newInstance(t.getRawClass(), 0).getClass(), t);
1:f13c6ac:         }
1:f13c6ac:         // Check if this is a generic
1:f13c6ac:         int genericIndex = type.indexOf('<');
1:f13c6ac:         if (genericIndex > 0) {
1:f13c6ac:             if (!type.endsWith(">")) {
1:f13c6ac:                 throw new IllegalArgumentException("Can not load type: " + type);
1:f13c6ac:             }
1:f13c6ac:             GenericType base = parse(type.substring(0, genericIndex), loader);
1:f13c6ac:             String[] params = type.substring(genericIndex + 1, type.length() - 1).split(",");
1:f13c6ac:             GenericType[] types = new GenericType[params.length];
1:f13c6ac:             for (int i = 0; i < params.length; i++) {
1:f13c6ac:                 types[i] = parse(params[i], loader);
1:f13c6ac:             }
1:f13c6ac:             return new GenericType(base.getRawClass(), types);
1:f13c6ac:         }
1:f13c6ac:         // Primitive
1:f13c6ac:         if (primitiveClasses.containsKey(type)) {
1:f13c6ac:             return new GenericType(primitiveClasses.get(type));
1:f13c6ac:         }
1:b222d94:         // Extends
1:b222d94:         if (type.startsWith("? extends ")) {
1:b222d94:             String raw = type.substring("? extends ".length());
1:b222d94:             return new GenericType(((ClassLoader) loader).loadClass(raw), BoundType.Extends);
1:b222d94:         }
1:b222d94:         // Super
1:b222d94:         if (type.startsWith("? super ")) {
1:b222d94:             String raw = type.substring("? extends ".length());
1:b222d94:             return new GenericType(((ClassLoader) loader).loadClass(raw), BoundType.Super);
1:b222d94:         }
1:f13c6ac:         // Class
1:f13c6ac:         if (loader instanceof ClassLoader) {
1:f13c6ac:             return new GenericType(((ClassLoader) loader).loadClass(type));
1:f13c6ac:         } else if (loader instanceof Bundle) {
1:1a56ba3:             try {
1:1a56ba3:               return AccessController.doPrivileged(new PrivilegedExceptionAction<GenericType>() {
1:1a56ba3:                 public GenericType run() throws ClassNotFoundException {
1:f13c6ac:                   return new GenericType(((Bundle) loader).loadClass(type));
1:1a56ba3:                 }
1:1a56ba3:               });
1:1a56ba3:             } catch (PrivilegedActionException pae) {
1:1a56ba3:               Exception e = pae.getException();
1:1a56ba3:               if (e instanceof ClassNotFoundException) 
1:1a56ba3:                 throw (ClassNotFoundException) e;
1:1a56ba3:               else
1:1a56ba3:                 throw (RuntimeException) e;
1:1a56ba3:             }
1:f13c6ac:         } else if (loader instanceof ExecutionContext) {
1:f13c6ac:             return new GenericType(((ExecutionContext) loader).loadClass(type));
1:f13c6ac:         } else if (loader instanceof ExtendedBlueprintContainer) {
1:f13c6ac:             return new GenericType(((ExtendedBlueprintContainer) loader).loadClass(type));
1:f13c6ac:         } else {
1:f13c6ac:             throw new IllegalArgumentException("Unsupported loader: " + loader);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     @Override
1:f13c6ac:     public ReifiedType getActualTypeArgument(int i) {
1:f13c6ac:         if (parameters.length == 0) {
1:f13c6ac:             return super.getActualTypeArgument(i);
1:f13c6ac:         }
1:f13c6ac:         return parameters[i];
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     @Override
1:f13c6ac:     public int size() {
1:f13c6ac:         return parameters.length;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     @Override
1:f13c6ac:     public String toString() {
1:c290cc1:         StringBuilder sb = new StringBuilder();
1:c290cc1:         if (boundType == BoundType.Extends) {
1:c290cc1:             sb.append("? extends ");
1:c290cc1:         } else if (boundType == BoundType.Super) {
1:c290cc1:             sb.append("? super ");
1:c290cc1:         }
1:f13c6ac:         Class cl = getRawClass();
1:f13c6ac:         if (cl.isArray()) {
1:f13c6ac:             if (parameters.length > 0) {
1:f13c6ac:                 return parameters[0].toString() + "[]";
1:f13c6ac:             } else {
1:f13c6ac:                 return cl.getComponentType().getName() + "[]";
1:f13c6ac:             }
1:f13c6ac:         }
1:c290cc1:         sb.append(cl.getName());
1:f13c6ac:         if (parameters.length > 0) {
1:f13c6ac:             sb.append("<");
1:f13c6ac:             for (int i = 0; i < parameters.length; i++) {
1:f13c6ac:                 if (i > 0) {
1:f13c6ac:                     sb.append(",");
1:f13c6ac:                 }
1:f13c6ac:                 sb.append(parameters[i].toString());
1:f13c6ac:             }
1:f13c6ac:             sb.append(">");   
1:f13c6ac:         }
1:c290cc1:         return sb.toString();
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean equals(Object object) {
1:f13c6ac:         if (!(object instanceof GenericType)) {
1:f13c6ac:             return false;
1:f13c6ac:         }
1:f13c6ac:         GenericType other = (GenericType) object;
1:f13c6ac:         if (getRawClass() != other.getRawClass()) {
1:f13c6ac:             return false;
1:f13c6ac:         }
1:c290cc1:         if (boundType != other.boundType) {
1:c290cc1:             return false;
1:c290cc1:         }
1:f13c6ac:         if (parameters == null) {
1:f13c6ac:             return (other.parameters == null);
1:f13c6ac:         } else {
1:f13c6ac:             if (other.parameters == null) {
1:f13c6ac:                 return false;
1:f13c6ac:             }
1:f13c6ac:             if (parameters.length != other.parameters.length) {
1:f13c6ac:                 return false;
1:f13c6ac:             }
1:f13c6ac:             for (int i = 0; i < parameters.length; i++) {
1:f13c6ac:                 if (!parameters[i].equals(other.parameters[i])) {
1:f13c6ac:                     return false;
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:             return true;
1:f13c6ac:         }
1:f13c6ac:     }
1:c290cc1: 
1:c290cc1:     static ReifiedType bound(ReifiedType type) {
1:c290cc1:         if (type instanceof GenericType
1:c290cc1:                 && ((GenericType) type).boundType != BoundType.Exact) {
1:c290cc1:             GenericType t = (GenericType) type;
1:c290cc1:             return new GenericType(t.getRawClass(), BoundType.Exact, t.parameters);
1:c290cc1:         }
1:c290cc1:         return type;
1:c290cc1:     }
1:c290cc1: 
1:c290cc1:     static BoundType boundType(ReifiedType type) {
1:c290cc1:         if (type instanceof GenericType) {
1:c290cc1:             return ((GenericType) type).boundType;
1:c290cc1:         } else {
1:c290cc1:             return BoundType.Exact;
1:c290cc1:         }
1:c290cc1:     }
1:c290cc1: 
1:c290cc1:     static BoundType boundType(Type type) {
1:c290cc1:         if (type instanceof WildcardType) {
1:c290cc1:             WildcardType wct = (WildcardType) type;
1:c290cc1:             return wct.getLowerBounds().length == 0
1:c290cc1:                     ? BoundType.Extends : BoundType.Super;
1:c290cc1:         }
1:c290cc1:         return BoundType.Exact;
1:c290cc1:     }
1:c290cc1: 
1:f13c6ac:     static GenericType[] parametersOf(Type type) {
1:f13c6ac: 		if (type instanceof Class) {
1:f13c6ac: 		    Class clazz = (Class) type;
1:f13c6ac: 		    if (clazz.isArray()) {
1:f13c6ac:                 GenericType t = new GenericType(clazz.getComponentType());
1:f13c6ac:                 if (t.size() > 0) {
1:f13c6ac: 		            return new GenericType[] { t };
1:f13c6ac:                 } else {
1:f13c6ac:                     return EMPTY;
1:f13c6ac:                 }
1:f13c6ac: 		    } else {
1:f13c6ac: 		        return EMPTY;
1:f13c6ac: 		    }
1:f13c6ac: 		}
1:f13c6ac:         if (type instanceof ParameterizedType) {
1:f13c6ac:             ParameterizedType pt = (ParameterizedType) type;
1:f13c6ac:             Type [] parameters = pt.getActualTypeArguments();
1:f13c6ac:             GenericType[] gts = new GenericType[parameters.length];
1:f13c6ac:             for ( int i =0; i<gts.length; i++) {
1:f13c6ac:                 gts[i] = new GenericType(parameters[i]);
1:f13c6ac:             }
1:f13c6ac:             return gts;
1:f13c6ac:         }
1:f13c6ac:         if (type instanceof GenericArrayType) {
1:f13c6ac:             return new GenericType[] { new GenericType(((GenericArrayType) type).getGenericComponentType()) };
1:f13c6ac:         }
1:f13c6ac:         if (type instanceof WildcardType) {
1:f13c6ac:             return EMPTY;
1:f13c6ac:         }
1:f13c6ac:         if (type instanceof TypeVariable) {
1:f13c6ac:             return EMPTY;
1:f13c6ac:         }
1:f13c6ac:         throw new IllegalStateException();
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	static Class<?> getConcreteClass(Type type) {
1:f13c6ac: 		Type ntype = collapse(type);
1:f13c6ac: 		if ( ntype instanceof Class )
1:f13c6ac: 			return (Class<?>) ntype;
1:f13c6ac: 
1:f13c6ac: 		if ( ntype instanceof ParameterizedType )
1:f13c6ac: 			return getConcreteClass(collapse(((ParameterizedType)ntype).getRawType()));
1:f13c6ac: 
1:f13c6ac: 		throw new RuntimeException("Unknown type " + type );
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: 	static Type collapse(Type target) {
1:f13c6ac: 		if (target instanceof Class || target instanceof ParameterizedType ) {
1:f13c6ac: 			return target;
1:f13c6ac: 		} else if (target instanceof TypeVariable) {
1:f13c6ac: 			return collapse(((TypeVariable<?>) target).getBounds()[0]);
1:f13c6ac: 		} else if (target instanceof GenericArrayType) {
1:f13c6ac: 			Type t = collapse(((GenericArrayType) target)
1:f13c6ac: 					.getGenericComponentType());
1:f13c6ac: 			while ( t instanceof ParameterizedType )
1:f13c6ac: 				t = collapse(((ParameterizedType)t).getRawType());
1:f13c6ac: 			return Array.newInstance((Class<?>)t, 0).getClass();
1:f13c6ac: 		} else if (target instanceof WildcardType) {
1:f13c6ac: 			WildcardType wct = (WildcardType) target;
1:f13c6ac: 			if (wct.getLowerBounds().length == 0)
1:f13c6ac: 				return collapse(wct.getUpperBounds()[0]);
1:f13c6ac: 			else
1:f13c6ac: 				return collapse(wct.getLowerBounds()[0]);
1:f13c6ac: 		}
1:f13c6ac: 		throw new RuntimeException("Huh? " + target);
1:f13c6ac: 	}
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:b222d94
/////////////////////////////////////////////////////////////////////////
1:         // Extends
1:         if (type.startsWith("? extends ")) {
1:             String raw = type.substring("? extends ".length());
1:             return new GenericType(((ClassLoader) loader).loadClass(raw), BoundType.Extends);
1:         }
1:         // Super
1:         if (type.startsWith("? super ")) {
1:             String raw = type.substring("? extends ".length());
1:             return new GenericType(((ClassLoader) loader).loadClass(raw), BoundType.Super);
1:         }
commit:c290cc1
/////////////////////////////////////////////////////////////////////////
1:     enum BoundType {
1:         Exact,
1:         Extends,
1:         Super
1:     }
1: 
1:     private BoundType boundType;
1: 		this(getConcreteClass(type), boundType(type), parametersOf(type));
1:         this(clazz, BoundType.Exact, parameters);
1:     }
1: 
1:     public GenericType(Class clazz, BoundType boundType, GenericType... parameters) {
1:         this.boundType = boundType;
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder sb = new StringBuilder();
1:         if (boundType == BoundType.Extends) {
1:             sb.append("? extends ");
1:         } else if (boundType == BoundType.Super) {
1:             sb.append("? super ");
1:         }
/////////////////////////////////////////////////////////////////////////
1:         sb.append(cl.getName());
/////////////////////////////////////////////////////////////////////////
1:         return sb.toString();
/////////////////////////////////////////////////////////////////////////
1:         if (boundType != other.boundType) {
1:             return false;
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     static ReifiedType bound(ReifiedType type) {
1:         if (type instanceof GenericType
1:                 && ((GenericType) type).boundType != BoundType.Exact) {
1:             GenericType t = (GenericType) type;
1:             return new GenericType(t.getRawClass(), BoundType.Exact, t.parameters);
1:         }
1:         return type;
1:     }
1: 
1:     static BoundType boundType(ReifiedType type) {
1:         if (type instanceof GenericType) {
1:             return ((GenericType) type).boundType;
1:         } else {
1:             return BoundType.Exact;
1:         }
1:     }
1: 
1:     static BoundType boundType(Type type) {
1:         if (type instanceof WildcardType) {
1:             WildcardType wct = (WildcardType) type;
1:             return wct.getLowerBounds().length == 0
1:                     ? BoundType.Extends : BoundType.Super;
1:         }
1:         return BoundType.Exact;
1:     }
1: 
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.container;
1: 
1: import java.lang.reflect.Array;
1: import java.lang.reflect.GenericArrayType;
1: import java.lang.reflect.ParameterizedType;
1: import java.lang.reflect.Type;
1: import java.lang.reflect.TypeVariable;
1: import java.lang.reflect.WildcardType;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.geronimo.blueprint.ExtendedBlueprintContainer;
0: import org.apache.geronimo.blueprint.di.ExecutionContext;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.blueprint.container.ReifiedType;
1: 
1: /**
1:  * XXXX: Currently, in case of arrays getActualTypeArgument(0) returns something similar to what
1:  * Class.getComponentType() does for arrays.  I don't think this is quite right since getActualTypeArgument()
1:  * should return the given parameterized type not the component type. Need to check this behavior with the spec.
1:  */
1: public class GenericType extends ReifiedType {
1: 
1: 	private static final GenericType[] EMPTY = new GenericType[0];
1: 
1:     private static final Map<String, Class> primitiveClasses = new HashMap<String, Class>();
1: 
1:     static {
1:         primitiveClasses.put("int", int.class);
1:         primitiveClasses.put("short", short.class);
1:         primitiveClasses.put("long", long.class);
1:         primitiveClasses.put("byte", byte.class);
1:         primitiveClasses.put("char", char.class);
1:         primitiveClasses.put("float", float.class);
1:         primitiveClasses.put("double", double.class);
1:         primitiveClasses.put("boolean", boolean.class);
1:     }
1: 
1:     private GenericType[] parameters;
1: 
1: 	public GenericType(Type type) {
0: 		this(getConcreteClass(type), parametersOf(type));
1: 	}
1: 
1:     public GenericType(Class clazz, GenericType... parameters) {
1:         super(clazz);
1:         this.parameters = parameters;
1:     }
1: 
0:     public static GenericType parse(String type, Object loader) throws ClassNotFoundException, IllegalArgumentException {
0:         type = type.trim();
1:         // Check if this is an array
1:         if (type.endsWith("[]")) {
1:             GenericType t = parse(type.substring(0, type.length() - 2), loader);
1:             return new GenericType(Array.newInstance(t.getRawClass(), 0).getClass(), t);
1:         }
1:         // Check if this is a generic
1:         int genericIndex = type.indexOf('<');
1:         if (genericIndex > 0) {
1:             if (!type.endsWith(">")) {
1:                 throw new IllegalArgumentException("Can not load type: " + type);
1:             }
1:             GenericType base = parse(type.substring(0, genericIndex), loader);
1:             String[] params = type.substring(genericIndex + 1, type.length() - 1).split(",");
1:             GenericType[] types = new GenericType[params.length];
1:             for (int i = 0; i < params.length; i++) {
1:                 types[i] = parse(params[i], loader);
1:             }
1:             return new GenericType(base.getRawClass(), types);
1:         }
1:         // Primitive
1:         if (primitiveClasses.containsKey(type)) {
1:             return new GenericType(primitiveClasses.get(type));
1:         }
1:         // Class
1:         if (loader instanceof ClassLoader) {
1:             return new GenericType(((ClassLoader) loader).loadClass(type));
1:         } else if (loader instanceof Bundle) {
1:             return new GenericType(((Bundle) loader).loadClass(type));
1:         } else if (loader instanceof ExecutionContext) {
1:             return new GenericType(((ExecutionContext) loader).loadClass(type));
1:         } else if (loader instanceof ExtendedBlueprintContainer) {
1:             return new GenericType(((ExtendedBlueprintContainer) loader).loadClass(type));
1:         } else {
1:             throw new IllegalArgumentException("Unsupported loader: " + loader);
1:         }
1:     }
1: 
1:     @Override
1:     public ReifiedType getActualTypeArgument(int i) {
1:         if (parameters.length == 0) {
1:             return super.getActualTypeArgument(i);
1:         }
1:         return parameters[i];
1:     }
1: 
1:     @Override
1:     public int size() {
1:         return parameters.length;
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         Class cl = getRawClass();
1:         if (cl.isArray()) {
1:             if (parameters.length > 0) {
1:                 return parameters[0].toString() + "[]";
1:             } else {
1:                 return cl.getComponentType().getName() + "[]";
1:             }
1:         }
1:         if (parameters.length > 0) {
0:             StringBuilder sb = new StringBuilder();
0:             sb.append(cl.getName());    
1:             sb.append("<");
1:             for (int i = 0; i < parameters.length; i++) {
1:                 if (i > 0) {
1:                     sb.append(",");
1:                 }
1:                 sb.append(parameters[i].toString());
1:             }
1:             sb.append(">");   
0:             return sb.toString();
1:         }
0:         return cl.getName();
1:     }
1: 
1:     public boolean equals(Object object) {
1:         if (!(object instanceof GenericType)) {
1:             return false;
1:         }
1:         GenericType other = (GenericType) object;
1:         if (getRawClass() != other.getRawClass()) {
1:             return false;
1:         }
1:         if (parameters == null) {
1:             return (other.parameters == null);
1:         } else {
1:             if (other.parameters == null) {
1:                 return false;
1:             }
1:             if (parameters.length != other.parameters.length) {
1:                 return false;
1:             }
1:             for (int i = 0; i < parameters.length; i++) {
1:                 if (!parameters[i].equals(other.parameters[i])) {
1:                     return false;
1:                 }
1:             }
1:             return true;
1:         }
1:     }
1:     
1:     static GenericType[] parametersOf(Type type) {
1: 		if (type instanceof Class) {
1: 		    Class clazz = (Class) type;
1: 		    if (clazz.isArray()) {
1:                 GenericType t = new GenericType(clazz.getComponentType());
1:                 if (t.size() > 0) {
1: 		            return new GenericType[] { t };
1:                 } else {
1:                     return EMPTY;
1:                 }
1: 		    } else {
1: 		        return EMPTY;
1: 		    }
1: 		}
1:         if (type instanceof ParameterizedType) {
1:             ParameterizedType pt = (ParameterizedType) type;
1:             Type [] parameters = pt.getActualTypeArguments();
1:             GenericType[] gts = new GenericType[parameters.length];
1:             for ( int i =0; i<gts.length; i++) {
1:                 gts[i] = new GenericType(parameters[i]);
1:             }
1:             return gts;
1:         }
1:         if (type instanceof GenericArrayType) {
1:             return new GenericType[] { new GenericType(((GenericArrayType) type).getGenericComponentType()) };
1:         }
1:         if (type instanceof WildcardType) {
1:             return EMPTY;
1:         }
1:         if (type instanceof TypeVariable) {
1:             return EMPTY;
1:         }
1:         throw new IllegalStateException();
1: 	}
1: 
1: 	static Class<?> getConcreteClass(Type type) {
1: 		Type ntype = collapse(type);
1: 		if ( ntype instanceof Class )
1: 			return (Class<?>) ntype;
1: 
1: 		if ( ntype instanceof ParameterizedType )
1: 			return getConcreteClass(collapse(((ParameterizedType)ntype).getRawType()));
1: 
1: 		throw new RuntimeException("Unknown type " + type );
1: 	}
1: 
1: 	static Type collapse(Type target) {
1: 		if (target instanceof Class || target instanceof ParameterizedType ) {
1: 			return target;
1: 		} else if (target instanceof TypeVariable) {
1: 			return collapse(((TypeVariable<?>) target).getBounds()[0]);
1: 		} else if (target instanceof GenericArrayType) {
1: 			Type t = collapse(((GenericArrayType) target)
1: 					.getGenericComponentType());
1: 			while ( t instanceof ParameterizedType )
1: 				t = collapse(((ParameterizedType)t).getRawType());
1: 			return Array.newInstance((Class<?>)t, 0).getClass();
1: 		} else if (target instanceof WildcardType) {
1: 			WildcardType wct = (WildcardType) target;
1: 			if (wct.getLowerBounds().length == 0)
1: 				return collapse(wct.getUpperBounds()[0]);
1: 			else
1: 				return collapse(wct.getLowerBounds()[0]);
1: 		}
1: 		throw new RuntimeException("Huh? " + target);
1: 	}
1: 
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
commit:1a56ba3
/////////////////////////////////////////////////////////////////////////
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
1:     public static GenericType parse(String rawType, final Object loader) throws ClassNotFoundException, IllegalArgumentException {
1:         final String type = rawType.trim();
/////////////////////////////////////////////////////////////////////////
1:             try {
1:               return AccessController.doPrivileged(new PrivilegedExceptionAction<GenericType>() {
1:                 public GenericType run() throws ClassNotFoundException {
0:                   return new GenericType(((Bundle) loader).loadClass(type));
1:                 }
1:               });
1:             } catch (PrivilegedActionException pae) {
1:               Exception e = pae.getException();
1:               if (e instanceof ClassNotFoundException) 
1:                 throw (ClassNotFoundException) e;
1:               else
1:                 throw (RuntimeException) e;
1:             }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.container;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.ExtendedBlueprintContainer;
1: import org.apache.aries.blueprint.di.ExecutionContext;
============================================================================