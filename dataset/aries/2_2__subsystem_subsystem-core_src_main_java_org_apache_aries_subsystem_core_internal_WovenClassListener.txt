1:fba8a39: /*
1:fba8a39:  * Licensed to the Apache Software Foundation (ASF) under one
1:fba8a39:  * or more contributor license agreements.  See the NOTICE file
1:fba8a39:  * distributed with this work for additional information
1:fba8a39:  * regarding copyright ownership.  The ASF licenses this file
1:fba8a39:  * to you under the Apache License, Version 2.0 (the
1:fba8a39:  * "License"); you may not use this file except in compliance
1:fba8a39:  * with the License.  You may obtain a copy of the License at
1:fba8a39:  *
1:fba8a39:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fba8a39:  *
1:fba8a39:  * Unless required by applicable law or agreed to in writing,
1:fba8a39:  * software distributed under the License is distributed on an
1:fba8a39:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fba8a39:  * KIND, either express or implied.  See the License for the
1:fba8a39:  * specific language governing permissions and limitations
1:fba8a39:  * under the License.
1:fba8a39:  */
1:d6eb080: package org.apache.aries.subsystem.core.internal;
1:d6eb080: 
1:d6eb080: import java.security.AccessController;
1:d6eb080: import java.util.ArrayList;
1:d6eb080: import java.util.Collection;
1:d6eb080: import java.util.EnumSet;
1:2aab796: import java.util.HashMap;
1:d6eb080: import java.util.List;
1:2aab796: import java.util.Map;
1:1c027e7: import java.util.Set;
1:d6eb080: 
1:d6eb080: import org.apache.aries.subsystem.core.archive.DynamicImportPackageHeader;
1:d6eb080: import org.apache.aries.subsystem.core.archive.DynamicImportPackageRequirement;
1:d6eb080: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
1:b66ad7c: import org.apache.aries.subsystem.core.internal.StartAction.Restriction;
1:d6eb080: import org.eclipse.equinox.region.Region;
1:1c027e7: import org.eclipse.equinox.region.RegionDigraph.FilteredRegion;
1:2aab796: import org.eclipse.equinox.region.RegionDigraphVisitor;
1:2aab796: import org.eclipse.equinox.region.RegionFilter;
1:d6eb080: import org.osgi.framework.Bundle;
1:d6eb080: import org.osgi.framework.BundleContext;
1:d6eb080: import org.osgi.framework.hooks.weaving.WovenClass;
1:d6eb080: import org.osgi.framework.wiring.BundleCapability;
1:d6eb080: import org.osgi.framework.wiring.BundleRevision;
1:2aab796: import org.osgi.framework.wiring.BundleWiring;
1:d6eb080: import org.osgi.framework.wiring.FrameworkWiring;
1:d6eb080: import org.osgi.service.subsystem.Subsystem;
1:d6eb080: import org.osgi.service.subsystem.SubsystemException;
1:d6eb080: 
1:d6eb080: public class WovenClassListener implements org.osgi.framework.hooks.weaving.WovenClassListener {
1:2aab796: 	private static class RegionUpdaterInfo {
1:2aab796: 		private final Region head;
1:2aab796: 		private final Collection<DynamicImportPackageRequirement> requirements;
1:2aab796: 		private final Region tail;
1:2aab796: 		
1:2aab796: 		public RegionUpdaterInfo(Region tail, Region head) {
1:2aab796: 			this.tail = tail;
1:2aab796: 			this.head = head;
1:2aab796: 			requirements = new ArrayList<DynamicImportPackageRequirement>();
1:2aab796: 		}
1:2aab796: 		
1:2aab796: 		public Region head() {
1:2aab796: 			return head;
1:2aab796: 		}
1:2aab796: 		
1:2aab796: 		public void requirement(DynamicImportPackageRequirement requirement) {
1:2aab796: 			requirements.add(requirement);
1:2aab796: 		}
1:2aab796: 		
1:2aab796: 		public Collection<DynamicImportPackageRequirement> requirements() {
1:2aab796: 			return requirements;
1:2aab796: 		}
1:2aab796: 		
1:2aab796: 		public Region tail() {
1:2aab796: 			return tail;
1:2aab796: 		}
1:2aab796: 	}
1:2aab796: 	
1:d6eb080: 	private final BundleContext context;
1:d6eb080: 	private final Subsystems subsystems;
1:d6eb080: 	
1:d6eb080: 	public WovenClassListener(BundleContext context, Subsystems subsystems) {
1:d6eb080: 		this.context = context;
1:d6eb080: 		this.subsystems = subsystems;
10:d6eb080: 	}
1:d6eb080: 	
1:d6eb080: 	@Override
1:d6eb080: 	public void modified(WovenClass wovenClass) {
1:d6eb080: 		if (wovenClass.getState() != WovenClass.TRANSFORMED) {
1:d6eb080: 			// Dynamic package imports must be added when the woven class is in
1:d6eb080: 			// the transformed state in order to ensure the class will load once
1:d6eb080: 			// the defined state is reached.
3:d6eb080: 			return;
1:14d0ff1: 		}
1:d6eb080: 		List<String> dynamicImports = wovenClass.getDynamicImports();
1:d6eb080: 		if (dynamicImports.isEmpty()) {
1:d6eb080: 			// Nothing to do if there are no dynamic imports.
1:14d0ff1: 			return;
1:d6eb080: 		}
1:2aab796: 		BundleWiring wiring = wovenClass.getBundleWiring();
1:2aab796: 		Bundle bundle = wiring.getBundle();
1:2aab796: 		BundleRevision revision = bundle.adapt(BundleRevision.class);
1:2aab796: 		BundleConstituent constituent = new BundleConstituent(null, revision);
1:2aab796: 		Collection<BasicSubsystem> basicSubsystems = subsystems.getSubsystemsByConstituent(constituent);
1:2aab796: 		BasicSubsystem subsystem = basicSubsystems.iterator().next();
1:2aab796: 		// Find the scoped subsystem in the region.
1:2aab796: 		subsystem = scopedSubsystem(subsystem);
1:d6eb080: 		if (subsystem.getSubsystemId() == 0) {
1:d6eb080: 			// The root subsystem needs no sharing policy.
1:d6eb080: 			return;
1:d6eb080: 		}
1:d6eb080: 		if (EnumSet.of(Subsystem.State.INSTALLING, Subsystem.State.INSTALLED).contains(subsystem.getState())) {
1:2aab796: 			// The scoped subsystem must be resolved before adding dynamic 
1:2aab796: 			// package imports to the sharing policy in order to minimize 
1:2aab796: 			// unpredictable wirings. Resolving the scoped subsystem will also
1:2aab796: 			// resolve all of the unscoped subsystems in the region.
1:b66ad7c: 			AccessController.doPrivileged(new StartAction(subsystem, subsystem, subsystem, Restriction.RESOLVE_ONLY));
1:d6eb080: 		}
1:2aab796: 		Bundle systemBundle = context.getBundle(org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION);
1:2aab796: 		FrameworkWiring frameworkWiring = systemBundle.adapt(FrameworkWiring.class);
1:2aab796: 		// The following map tracks all of the necessary updates as each dynamic
1:2aab796: 		// import is processed. The key is the tail region of the connection 
1:2aab796: 		// whose filter needs updating.
1:2aab796: 		Map<Region, RegionUpdaterInfo> updates = new HashMap<Region, RegionUpdaterInfo>();
1:d6eb080: 		for (String dynamicImport : dynamicImports) {
1:2aab796: 			// For each dynamic import, collect the necessary update information.
1:d6eb080: 			DynamicImportPackageHeader header = new DynamicImportPackageHeader(dynamicImport);
1:2aab796: 			List<DynamicImportPackageRequirement> requirements = header.toRequirements(revision);
1:2aab796: 			for (DynamicImportPackageRequirement requirement : requirements) {
1:2aab796: 				Collection<BundleCapability> providers = frameworkWiring.findProviders(requirement);
1:2aab796: 				if (providers.isEmpty()) {
1:2aab796: 					// If nothing provides a capability matching the dynamic
1:2aab796: 					// import, no updates are made.
1:2aab796: 					continue;
1:d6eb080: 				}
1:2aab796: 				addSharingPolicyUpdates(requirement, subsystem, providers, updates);
1:2aab796: 			}
1:2aab796: 		}
1:2aab796: 		// Now update each sharing policy only once.
1:2aab796: 		for (RegionUpdaterInfo update : updates.values()) {
1:2aab796: 			RegionUpdater updater = new RegionUpdater(update.tail(), update.head());
1:2aab796: 			try {
1:2aab796: 				updater.addRequirements(update.requirements());
1:2aab796: 			}
1:2aab796: 			catch (IllegalStateException e) {
1:2aab796: 				// Something outside of the subsystems implementation has
1:2aab796: 				// deleted the edge between the parent and child subsystems.
1:2aab796: 				// Assume the dynamic import sharing policy is being handled
1:2aab796: 				// elsewhere. See ARIES-1429.
1:2aab796: 			} 
1:2aab796: 			catch (Exception e) {
1:2aab796: 				throw new SubsystemException(e);
1:2aab796: 			} 
1:2aab796: 		}
1:2aab796: 	}
1:2aab796: 	
1:2aab796: 	private void addSharingPolicyUpdates(
1:2aab796: 			final DynamicImportPackageRequirement requirement, 
1:2aab796: 			final BasicSubsystem scopedSubsystem,
1:2aab796: 			final Collection<BundleCapability> providers,
1:2aab796: 			Map<Region, RegionUpdaterInfo> updates) {
1:2aab796: 		
1:2aab796: 		final List<BasicSubsystem> subsystems = new ArrayList<BasicSubsystem>();
1:2aab796: 		final Map<Region, BasicSubsystem> regionToSubsystem = new HashMap<Region, BasicSubsystem>();
1:2aab796: 		regionToSubsystem(scopedSubsystem, regionToSubsystem);
1:2aab796: 		scopedSubsystem.getRegion().visitSubgraph(new RegionDigraphVisitor() {
1:1c027e7: 			private final List<BasicSubsystem> visited = new ArrayList<BasicSubsystem>();
1:2aab796: 			
1:2aab796: 			@Override
1:2aab796: 			public void postEdgeTraverse(RegionFilter filter) {
1:1c027e7: 				// Nothing.
1:2aab796: 			}
1:2aab796: 
1:2aab796: 			@Override
1:2aab796: 			public boolean preEdgeTraverse(RegionFilter filter) {
1:2aab796: 				return true;
1:2aab796: 			}
1:2aab796: 
1:2aab796: 			@Override
1:2aab796: 			public boolean visit(Region region) {
1:2aab796: 				BasicSubsystem subsystem = regionToSubsystem.get(region);
1:1c027e7: 				if (subsystem == null || subsystem.isRoot()) {
1:1c027e7: 					// Don't mess with regions not created by the subsystem
1:1c027e7: 					// implementation. Also, the root subsystem never has a
1:1c027e7: 					// sharing policy.
4:2aab796: 					return false;
1:2aab796: 				}
1:1c027e7: 				if (!visited.isEmpty() && !subsystem.equals(scopedParent(visited.get(visited.size() - 1)))) {
1:1c027e7: 					// We're only interested in walking up the scoped parent tree.
1:2aab796: 					return false;
1:2aab796: 				}
1:1c027e7: 				visited.add(subsystem);
1:1c027e7: 				if (!requirement.getPackageName().contains("*")) {
1:1c027e7: 					for (BundleCapability provider : providers) {
1:1c027e7: 						BundleRevision br = provider.getResource();
1:1c027e7: 						if (region.contains(br.getBundle())) {
1:1c027e7: 							// The region contains a bundle providing a matching
1:1c027e7: 							// capability, and the dynamic import does not contain a
1:1c027e7: 							// wildcard. The requirement is therefore completely
1:1c027e7: 							// satisfied.
1:1c027e7: 							return false;
1:1c027e7: 						}
1:2aab796: 					}
1:2aab796: 				}
1:1c027e7: 				boolean allowed = false;
1:1c027e7: 				Set<FilteredRegion> filters = region.getEdges();
1:1c027e7: 				for (FilteredRegion filteredRegion : filters) {
1:1c027e7: 					RegionFilter filter = filteredRegion.getFilter();
1:1c027e7: 					if (filter.isAllowed(providers.iterator().next())) {
1:1c027e7: 						// The region already allows matching capabilities
1:1c027e7: 						// through so there is no need to update the sharing
1:1c027e7: 						// policy.
1:1c027e7: 						allowed = true;
1:1c027e7: 						break;
1:1c027e7: 					}
1:2aab796: 				}
1:1c027e7: 				if (!allowed) {
1:1c027e7: 					// The subsystem region requires a sharing policy update.
1:1c027e7: 					subsystems.add(subsystem);
1:1c027e7: 				}
1:1c027e7: 				// Visit the next region.
1:2aab796: 				return true;
1:2aab796: 			}
1:2aab796: 		});
1:14d0ff1: 		// Collect the information for the necessary sharing policy updates.
1:14d0ff1: 		for (BasicSubsystem subsystem : subsystems) {
1:14d0ff1: 			Region tail = subsystem.getRegion();
1:14d0ff1: 			Region head = scopedParent(subsystem).getRegion();
1:2aab796: 			RegionUpdaterInfo info = updates.get(tail);
1:2aab796: 			if (info == null) {
1:2aab796: 				info = new RegionUpdaterInfo(tail, head);
1:2aab796: 				updates.put(tail, info);
1:2aab796: 			}
1:2aab796: 			info.requirement(requirement);
1:2aab796: 		}
1:2aab796: 	}
1:2aab796: 	
1:2aab796: 	private void regionToSubsystem(BasicSubsystem subsystem, Map<Region, BasicSubsystem> map) {
1:2aab796: 		map.put(subsystem.getRegion(), subsystem);
1:2aab796: 		subsystem = scopedParent(subsystem);
2:2aab796: 		if (subsystem == null) {
1:2aab796: 			return;
1:2aab796: 		}
1:2aab796: 		regionToSubsystem(subsystem, map);
1:2aab796: 	}
1:2aab796: 	
1:2aab796: 	private BasicSubsystem scopedParent(BasicSubsystem subsystem) {
1:2aab796: 		Collection<Subsystem> parents = subsystem.getParents();
1:2aab796: 		if (parents.isEmpty()) {
1:2aab796: 			return null;
1:7c4fef4: 		}
1:2aab796: 		subsystem = (BasicSubsystem)parents.iterator().next();
1:2aab796: 		return scopedSubsystem(subsystem);
1:2aab796: 	}
1:2aab796: 	
1:2aab796: 	private BasicSubsystem scopedSubsystem(BasicSubsystem subsystem) {
1:2aab796: 		while (!subsystem.isScoped()) {
1:2aab796: 			subsystem = (BasicSubsystem)subsystem.getParents().iterator().next();
1:d6eb080: 		}
1:2aab796: 		return subsystem;
1:d6eb080: 	}
1:d6eb080: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:b66ad7c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.StartAction.Restriction;
/////////////////////////////////////////////////////////////////////////
1: 			AccessController.doPrivileged(new StartAction(subsystem, subsystem, subsystem, Restriction.RESOLVE_ONLY));
commit:1c027e7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import org.eclipse.equinox.region.RegionDigraph.FilteredRegion;
/////////////////////////////////////////////////////////////////////////
1: 			private final List<BasicSubsystem> visited = new ArrayList<BasicSubsystem>();
1: 				// Nothing.
1: 				if (subsystem == null || subsystem.isRoot()) {
1: 					// Don't mess with regions not created by the subsystem
1: 					// implementation. Also, the root subsystem never has a
1: 					// sharing policy.
1: 				if (!visited.isEmpty() && !subsystem.equals(scopedParent(visited.get(visited.size() - 1)))) {
1: 					// We're only interested in walking up the scoped parent tree.
1: 				visited.add(subsystem);
1: 				if (!requirement.getPackageName().contains("*")) {
1: 					for (BundleCapability provider : providers) {
1: 						BundleRevision br = provider.getResource();
1: 						if (region.contains(br.getBundle())) {
1: 							// The region contains a bundle providing a matching
1: 							// capability, and the dynamic import does not contain a
1: 							// wildcard. The requirement is therefore completely
1: 							// satisfied.
1: 							return false;
1: 						}
1: 				boolean allowed = false;
1: 				Set<FilteredRegion> filters = region.getEdges();
1: 				for (FilteredRegion filteredRegion : filters) {
1: 					RegionFilter filter = filteredRegion.getFilter();
1: 					if (filter.isAllowed(providers.iterator().next())) {
1: 						// The region already allows matching capabilities
1: 						// through so there is no need to update the sharing
1: 						// policy.
1: 						allowed = true;
1: 						break;
1: 					}
1: 				if (!allowed) {
1: 					// The subsystem region requires a sharing policy update.
1: 					subsystems.add(subsystem);
1: 				}
1: 				// Visit the next region.
commit:14d0ff1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 				BasicSubsystem subsystem = deque.pop();
0: 				if (filter.isAllowed(providers.iterator().next())) {
0: 					// The sharing policy already allows the dynamic import
0: 					// so no update is necessary.
1: 					return;
1: 				}
0: 				subsystems.add(subsystem);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 						// need to update it's sharing policy. Remove it from
0: 						// the list.
0: 						deque.pop();
0: 					// there is no sharing policy to update. Remove it from the
0: 					// list.
0: 					deque.pop();
1: 		// Collect the information for the necessary sharing policy updates.
1: 		for (BasicSubsystem subsystem : subsystems) {
1: 			Region tail = subsystem.getRegion();
1: 			Region head = scopedParent(subsystem).getRegion();
commit:2aab796
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayDeque;
0: import java.util.Collections;
0: import java.util.Deque;
1: import java.util.HashMap;
1: import java.util.Map;
0: import java.util.concurrent.atomic.AtomicBoolean;
1: import org.eclipse.equinox.region.RegionDigraphVisitor;
1: import org.eclipse.equinox.region.RegionFilter;
1: import org.osgi.framework.wiring.BundleWiring;
1: 	private static class RegionUpdaterInfo {
1: 		private final Region head;
1: 		private final Collection<DynamicImportPackageRequirement> requirements;
1: 		private final Region tail;
1: 		
1: 		public RegionUpdaterInfo(Region tail, Region head) {
1: 			this.tail = tail;
1: 			this.head = head;
1: 			requirements = new ArrayList<DynamicImportPackageRequirement>();
1: 		}
1: 		
1: 		public Region head() {
1: 			return head;
1: 		}
1: 		
1: 		public void requirement(DynamicImportPackageRequirement requirement) {
1: 			requirements.add(requirement);
1: 		}
1: 		
1: 		public Collection<DynamicImportPackageRequirement> requirements() {
1: 			return requirements;
1: 		}
1: 		
1: 		public Region tail() {
1: 			return tail;
1: 		}
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		BundleWiring wiring = wovenClass.getBundleWiring();
1: 		Bundle bundle = wiring.getBundle();
1: 		BundleRevision revision = bundle.adapt(BundleRevision.class);
1: 		BundleConstituent constituent = new BundleConstituent(null, revision);
1: 		Collection<BasicSubsystem> basicSubsystems = subsystems.getSubsystemsByConstituent(constituent);
1: 		BasicSubsystem subsystem = basicSubsystems.iterator().next();
1: 		// Find the scoped subsystem in the region.
1: 		subsystem = scopedSubsystem(subsystem);
1: 			// The scoped subsystem must be resolved before adding dynamic 
1: 			// package imports to the sharing policy in order to minimize 
1: 			// unpredictable wirings. Resolving the scoped subsystem will also
1: 			// resolve all of the unscoped subsystems in the region.
1: 		Bundle systemBundle = context.getBundle(org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION);
1: 		FrameworkWiring frameworkWiring = systemBundle.adapt(FrameworkWiring.class);
1: 		// The following map tracks all of the necessary updates as each dynamic
1: 		// import is processed. The key is the tail region of the connection 
1: 		// whose filter needs updating.
1: 		Map<Region, RegionUpdaterInfo> updates = new HashMap<Region, RegionUpdaterInfo>();
1: 			// For each dynamic import, collect the necessary update information.
1: 			List<DynamicImportPackageRequirement> requirements = header.toRequirements(revision);
1: 			for (DynamicImportPackageRequirement requirement : requirements) {
1: 				Collection<BundleCapability> providers = frameworkWiring.findProviders(requirement);
1: 				if (providers.isEmpty()) {
1: 					// If nothing provides a capability matching the dynamic
1: 					// import, no updates are made.
1: 					continue;
1: 				addSharingPolicyUpdates(requirement, subsystem, providers, updates);
1: 		// Now update each sharing policy only once.
1: 		for (RegionUpdaterInfo update : updates.values()) {
1: 			RegionUpdater updater = new RegionUpdater(update.tail(), update.head());
1: 			try {
1: 				updater.addRequirements(update.requirements());
1: 			}
1: 			catch (IllegalStateException e) {
1: 				// Something outside of the subsystems implementation has
1: 				// deleted the edge between the parent and child subsystems.
1: 				// Assume the dynamic import sharing policy is being handled
1: 				// elsewhere. See ARIES-1429.
1: 			} 
1: 			catch (Exception e) {
1: 				throw new SubsystemException(e);
1: 			} 
1: 		}
1: 	}
1: 	
1: 	private void addSharingPolicyUpdates(
1: 			final DynamicImportPackageRequirement requirement, 
1: 			final BasicSubsystem scopedSubsystem,
1: 			final Collection<BundleCapability> providers,
1: 			Map<Region, RegionUpdaterInfo> updates) {
1: 		
1: 		final List<BasicSubsystem> subsystems = new ArrayList<BasicSubsystem>();
1: 		final Map<Region, BasicSubsystem> regionToSubsystem = new HashMap<Region, BasicSubsystem>();
1: 		regionToSubsystem(scopedSubsystem, regionToSubsystem);
1: 		scopedSubsystem.getRegion().visitSubgraph(new RegionDigraphVisitor() {
0: 			private final AtomicBoolean abort = new AtomicBoolean();
0: 			private final Deque<BasicSubsystem> deque = new ArrayDeque<BasicSubsystem>();
1: 			
1: 			@Override
1: 			public void postEdgeTraverse(RegionFilter filter) {
0: 				if (	// The queue will be empty if the necessary sharing 
0: 						// policy updates have already been detected.
0: 						deque.isEmpty() || 
0: 						// This is an edge whose head region was owned by a
0: 						// subsystem that was not a parent of the last processed
0: 						// subsystem.
0: 						abort.getAndSet(false)) {
0: 					// Do nothing.
1: 					return;
1: 				}
0: 				// Add the subsystem to the list indicating a sharing policy
0: 				// update is required.
0: 				subsystems.add(deque.pop());
1: 			}
1: 
1: 			@Override
1: 			public boolean preEdgeTraverse(RegionFilter filter) {
0: 				if (deque.isEmpty()) {
0: 					// The queue will be empty if the necessary sharing policy
0: 					// updates have already been detected.
0: 					// Do not visit the head region of this filter connection.
1: 					return false;
1: 				}
0: 				String dynamicImport = requirement.getPackageName();
0: 				if (!"*".equals(dynamicImport) 
0: 						&& !dynamicImport.endsWith(".*") 
0: 						&& filter.isAllowed(providers.iterator().next())) {
0: 					// The dynamic import does not contain a wildcard and the
0: 					// sharing policy already allows the import.
0: 					// Do not visit the head region of this filter connection.
1: 					return false;
1: 				}
0: 				// Visit the head region of this filter connection
1: 				return true;
1: 			}
1: 
1: 			@Override
1: 			public boolean visit(Region region) {
1: 				BasicSubsystem subsystem = regionToSubsystem.get(region);
1: 				if (subsystem == null) {
0: 					// Neither the subsystem whose subgraph is being visited nor
0: 					// any ancestor in the subsystem tree owns this region.
1: 					return false;
1: 				}
0: 				if (	// The deque will be empty if this is first region visited.
0: 						!deque.isEmpty() && 
0: 						// This region is not owned by the scoped subsystem in
0: 						// the parent region of the last processed subsystem. 
0: 						// We want to traverse up the tree.
0: 						!scopedParent(deque.getFirst()).equals(subsystem)) {
0: 					// Indicate to postEdgeTraverse that it should not add a
0: 					// subsystem to the list.
0: 					abort.set(true);
0: 					// Do not traverse the edges of this region.
1: 					return false;
1: 				}
0: 				// Let postEdgeTraverse see the currently processing subsystem.
0: 				deque.push(subsystem);
0: 				for (BundleCapability provider : providers) {
0: 					BundleRevision br = provider.getResource();
0: 					if (region.contains(br.getBundle()) && !requirement.getPackageName().contains("*")) {
0: 						// The subsystem contains the provider so there is no
0: 						// need to update it's sharing policy. It must be added
0: 						// to the list, however, to serve as a head.
0: 						subsystems.add(deque.pop());
0: 						// Do not traverse the edges of this region.
1: 						return false;
1: 					}
1: 				}
0: 				if (region.getEdges().isEmpty()) {
0: 					// We want to traverse the edges but it has none. This means
0: 					// we will miss a call to postEdgeTraverse resulting in a
0: 					// needed subsystem not being added. Add it here.
0: 					subsystems.add(deque.pop());
1: 				}
0: 				// Traverse the edges of this region.
1: 				return true;
1: 			}
1: 		});
0: 		// The reversal is necessary because the postEdgeTraverse calls in the
0: 		// visitor act as a LIFO queue. We want the order to be tail, head/tail,
0: 		// head/tail, ..., head. In other words, index i is the tail and index
0: 		// i + 1 is the head.
0: 		Collections.reverse(subsystems);
0: 		for (int i = 0; i < subsystems.size()-1; i++) {
0: 			Region tail = subsystems.get(i).getRegion();
0: 			Region head = subsystems.get(i+1).getRegion();
1: 			RegionUpdaterInfo info = updates.get(tail);
1: 			if (info == null) {
1: 				info = new RegionUpdaterInfo(tail, head);
1: 				updates.put(tail, info);
1: 			}
1: 			info.requirement(requirement);
1: 		}
1: 	}
1: 	
1: 	private void regionToSubsystem(BasicSubsystem subsystem, Map<Region, BasicSubsystem> map) {
1: 		map.put(subsystem.getRegion(), subsystem);
1: 		subsystem = scopedParent(subsystem);
1: 		if (subsystem == null) {
1: 		regionToSubsystem(subsystem, map);
1: 	}
1: 	
1: 	private BasicSubsystem scopedParent(BasicSubsystem subsystem) {
1: 		Collection<Subsystem> parents = subsystem.getParents();
1: 		if (parents.isEmpty()) {
1: 			return null;
1: 		subsystem = (BasicSubsystem)parents.iterator().next();
1: 		return scopedSubsystem(subsystem);
1: 	}
1: 	
1: 	private BasicSubsystem scopedSubsystem(BasicSubsystem subsystem) {
1: 		while (!subsystem.isScoped()) {
1: 			subsystem = (BasicSubsystem)subsystem.getParents().iterator().next();
1: 		return subsystem;
commit:7c4fef4
/////////////////////////////////////////////////////////////////////////
0: 		catch (IllegalStateException e) {
0: 			// Something outside of the subsystems implementation has
0: 			// deleted the edge between the parent and child subsystems.
0: 			// Assume the dynamic import sharing policy is being handled
0: 			// elsewhere. See ARIES-1429.
1: 		}
commit:fba8a39
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.security.AccessController;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.EnumSet;
1: import java.util.List;
1: 
1: import org.apache.aries.subsystem.core.archive.DynamicImportPackageHeader;
1: import org.apache.aries.subsystem.core.archive.DynamicImportPackageRequirement;
1: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
1: import org.eclipse.equinox.region.Region;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.hooks.weaving.WovenClass;
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.framework.wiring.FrameworkWiring;
0: import org.osgi.resource.Requirement;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class WovenClassListener implements org.osgi.framework.hooks.weaving.WovenClassListener {
1: 	private final BundleContext context;
1: 	private final Subsystems subsystems;
1: 	
1: 	public WovenClassListener(BundleContext context, Subsystems subsystems) {
1: 		this.context = context;
1: 		this.subsystems = subsystems;
1: 	}
1: 	
0: 	/*
0: 	 * This does not update sharing policies up the chain any further than the
0: 	 * parent. Does not account for providers in child subsystems.
0: 	 */
1: 	@Override
1: 	public void modified(WovenClass wovenClass) {
1: 		if (wovenClass.getState() != WovenClass.TRANSFORMED) {
1: 			// Dynamic package imports must be added when the woven class is in
1: 			// the transformed state in order to ensure the class will load once
1: 			// the defined state is reached.
1: 			return;
1: 		}
1: 		List<String> dynamicImports = wovenClass.getDynamicImports();
1: 		if (dynamicImports.isEmpty()) {
1: 			// Nothing to do if there are no dynamic imports.
1: 			return;
1: 		}
0: 		// Add the dynamic imports to the sharing policy of the scoped subsystem 
0: 		// that contains the bundle whose class was woven as a constituent.
0: 		Bundle wovenBundle = wovenClass.getBundleWiring().getBundle();
0: 		BundleRevision wovenRevision = wovenBundle.adapt(BundleRevision.class);
0: 		BasicSubsystem subsystem = subsystems.getSubsystemsByConstituent(new BundleConstituent(null, wovenRevision)).iterator().next();
1: 		if (subsystem.getSubsystemId() == 0) {
1: 			// The root subsystem needs no sharing policy.
1: 			return;
1: 		}
1: 		if (EnumSet.of(Subsystem.State.INSTALLING, Subsystem.State.INSTALLED).contains(subsystem.getState())) {
0: 			// The subsystem must be resolved before adding dynamic package
0: 			// imports to the sharing policy in order to minimize unpredictable
0: 			// wirings.
0: 			AccessController.doPrivileged(new StartAction(subsystem, subsystem, subsystem, true));
1: 		}
0: 		// Determine the requirements that must be added to the sharing policy.
0: 		Collection<Requirement> requirements = new ArrayList<Requirement>();
1: 		for (String dynamicImport : dynamicImports) {
1: 			DynamicImportPackageHeader header = new DynamicImportPackageHeader(dynamicImport);
0: 			for (DynamicImportPackageRequirement requirement : header.toRequirements(wovenRevision)) {
0: 				String pkg = requirement.getPackageName();
0: 				if (pkg.endsWith(".*")) {
0: 					// Dynamic imports with wildcards must always be added.
0: 					requirements.add(requirement);
1: 				}
0: 				else {
0: 					// Absolute dynamic imports are added to the sharing policy
0: 					// only if they are not satisfied within the subsystem.
0: 					FrameworkWiring fw = context.getBundle(org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION).adapt(FrameworkWiring.class);
0: 					Collection<BundleCapability> providers = fw.findProviders(requirement);
0: 					boolean found = false;
0: 					for (BundleCapability provider : providers) {
0: 						BundleRevision br = provider.getResource();
0: 						if (subsystem.getConstituents().contains(new BundleConstituent(null, br))) {
0: 							// We found a provider that's a constituent of the subsystem.
0: 							found = true;
0: 							break;
1: 						}
1: 					}
0: 					if (!found) {
0: 						requirements.add(requirement);
1: 					}
1: 				}
1: 			}
1: 		}
0: 		if (requirements.isEmpty()) {
0: 			// No wildcards and all dynamic imports were satisfied within the
0: 			// subsystem.
1: 			return;
1: 		}
0: 		// Now update the sharing policy with the necessary requirements.
0: 		Region from = subsystem.getRegion();
0: 		Region to = ((BasicSubsystem)subsystem.getParents().iterator().next()).getRegion();
0: 		RegionUpdater updater = new RegionUpdater(from, to);
0: 		try {
0: 			updater.addRequirements(requirements);
1: 		}
0: 		catch (Exception e) {
0: 			throw new SubsystemException(e);
1: 		}
1: 	}
1: }
============================================================================