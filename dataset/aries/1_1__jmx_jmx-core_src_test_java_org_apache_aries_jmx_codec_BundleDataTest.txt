1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
2:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
30:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.mockito.Mockito.mock;
1:fdf3952: import static org.mockito.Mockito.when;
1:8020538: import static org.osgi.jmx.framework.BundleStateMBean.ACTIVATION_POLICY_USED;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLES_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENT;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.HEADERS;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.HEADERS_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.HEADER_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.HOSTS;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.IMPORTED_PACKAGES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.KEY;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.LOCATION;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRED;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.START_LEVEL;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.STATE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.VALUE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.VERSION;
1:fdf3952: 
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.HashSet;
1:fdf3952: import java.util.Hashtable;
1:fdf3952: import java.util.Map;
1:fdf3952: import java.util.Set;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.BundleData.Header;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.framework.Version;
1:fdf3952: import org.osgi.service.packageadmin.ExportedPackage;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: import org.osgi.service.packageadmin.RequiredBundle;
1:fdf3952: import org.osgi.service.startlevel.StartLevel;
1:fdf3952: 
1:fdf3952: /**
1:8020538:  *
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class BundleDataTest {
1:8020538: 
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testToCompositeData() throws Exception {
1:8020538: 
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         BundleContext context = mock(BundleContext.class);
1:fdf3952:         PackageAdmin packageAdmin = mock(PackageAdmin.class);
1:fdf3952:         StartLevel startLevel = mock(StartLevel.class);
1:8020538: 
1:fdf3952:         Bundle b1 = mock(Bundle.class);
1:fdf3952:         when(b1.getSymbolicName()).thenReturn("b1");
1:fdf3952:         when(b1.getBundleId()).thenReturn(new Long(44));
1:fdf3952:         Bundle b2 = mock(Bundle.class);
1:fdf3952:         when(b2.getSymbolicName()).thenReturn("b2");
1:fdf3952:         when(b2.getBundleId()).thenReturn(new Long(55));
1:fdf3952:         Bundle b3 = mock(Bundle.class);
1:fdf3952:         when(b3.getSymbolicName()).thenReturn("b3");
1:fdf3952:         when(b3.getBundleId()).thenReturn(new Long(66));
1:fdf3952:         when(context.getBundles()).thenReturn(new Bundle[] { bundle, b1, b2, b3 });
1:8020538: 
1:fdf3952:         when(bundle.getSymbolicName()).thenReturn("test");
1:fdf3952:         when(bundle.getVersion()).thenReturn(Version.emptyVersion);
1:fdf3952:         when(bundle.getBundleId()).thenReturn(new Long(1));
1:fdf3952:         when(bundle.getLastModified()).thenReturn(new Long(12345));
1:fdf3952:         when(bundle.getLocation()).thenReturn("location");
1:8020538: 
1:fdf3952:         //headers
1:fdf3952:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:fdf3952:         headers.put(Constants.BUNDLE_SYMBOLICNAME, "test");
1:fdf3952:         headers.put(Constants.BUNDLE_VERSION, "0.0.0");
1:fdf3952:         when(bundle.getHeaders()).thenReturn(headers);
1:8020538: 
1:fdf3952:         //exported packages
1:fdf3952:         ExportedPackage exported = mock(ExportedPackage.class);
1:fdf3952:         when(exported.getName()).thenReturn("org.apache.aries.jmx");
1:fdf3952:         when(exported.getVersion()).thenReturn(new Version("1.0.0"));
1:fdf3952:         when(exported.getExportingBundle()).thenReturn(bundle);
1:fdf3952:         when(packageAdmin.getExportedPackages(bundle)).thenReturn(new ExportedPackage[] { exported });
1:8020538: 
1:fdf3952:         //imported packages
1:fdf3952:         ExportedPackage ep1 = mock(ExportedPackage.class);
1:fdf3952:         when(ep1.getImportingBundles()).thenReturn(new Bundle[] { bundle, b2, b3 });
1:fdf3952:         when(ep1.getName()).thenReturn("org.apache.aries.jmx.b1");
1:fdf3952:         when(ep1.getVersion()).thenReturn(Version.emptyVersion);
1:fdf3952:         when(ep1.getExportingBundle()).thenReturn(b1);
1:fdf3952:         ExportedPackage ep2 = mock(ExportedPackage.class);
1:fdf3952:         when(ep2.getImportingBundles()).thenReturn(new Bundle[] { bundle, b3 });
1:fdf3952:         when(ep2.getName()).thenReturn("org.apache.aries.jmx.b2");
1:fdf3952:         when(ep2.getVersion()).thenReturn(Version.parseVersion("2.0.1"));
1:fdf3952:         when(ep2.getExportingBundle()).thenReturn(b2);
1:fdf3952:         headers.put(Constants.DYNAMICIMPORT_PACKAGE, "*");
1:8020538: 
1:fdf3952:         when(packageAdmin.getExportedPackages(b1)).thenReturn(new ExportedPackage[] { ep1 });
1:fdf3952:         when(packageAdmin.getExportedPackages(b2)).thenReturn(new ExportedPackage[] { ep2 });
1:fdf3952:         when(packageAdmin.getExportedPackages(b3)).thenReturn(null);
1:8020538: 
1:fdf3952:         //required bundles
1:fdf3952:         RequiredBundle rb1 = mock(RequiredBundle.class);
1:fdf3952:         when(rb1.getBundle()).thenReturn(b1);
1:fdf3952:         when(rb1.getRequiringBundles()).thenReturn(new Bundle[] { bundle, b2 });
1:fdf3952:         RequiredBundle rb2 = mock(RequiredBundle.class);
1:fdf3952:         when(rb2.getBundle()).thenReturn(b2);
1:fdf3952:         when(rb2.getRequiringBundles()).thenReturn(new Bundle[] { b1 });
1:fdf3952:         RequiredBundle rb3 = mock(RequiredBundle.class);
1:fdf3952:         when(rb3.getBundle()).thenReturn(b3);
1:fdf3952:         when(rb3.getRequiringBundles()).thenReturn(new Bundle[] { bundle, b1, b2 });
1:fdf3952:         headers.put(Constants.REQUIRE_BUNDLE, "b1;bundle-version=\"1.0.0\",b3;bundle-version=\"2.0.0\"");
1:fdf3952:         when(packageAdmin.getRequiredBundles("b1")).thenReturn(new RequiredBundle[] { rb1 });
1:fdf3952:         when(packageAdmin.getRequiredBundles("b2")).thenReturn(new RequiredBundle[] { rb2 });
1:fdf3952:         when(packageAdmin.getRequiredBundles("b3")).thenReturn(new RequiredBundle[] { rb3 });
1:8020538: 
1:fdf3952:         //services in use
1:fdf3952:         ServiceReference s1 = mock(ServiceReference.class);
1:fdf3952:         when(s1.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(15));
1:fdf3952:         ServiceReference s2 = mock(ServiceReference.class);
1:fdf3952:         when(s2.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(16));
1:fdf3952:         ServiceReference s3 = mock(ServiceReference.class);
1:fdf3952:         when(s3.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(17));
1:8020538: 
1:fdf3952:         when(bundle.getServicesInUse()).thenReturn(new ServiceReference[] { s1, s2, s3 });
1:8020538: 
1:fdf3952:         BundleData b = new BundleData(context, bundle, packageAdmin, startLevel);
1:fdf3952:         CompositeData compositeData = b.toCompositeData();
1:8020538: 
1:fdf3952:         assertEquals("test", compositeData.get(SYMBOLIC_NAME));
1:fdf3952:         assertEquals("0.0.0", compositeData.get(VERSION));
1:fdf3952:         TabularData headerTable = (TabularData) compositeData.get(HEADERS);
1:fdf3952:         assertEquals(4, headerTable.values().size());
1:fdf3952:         CompositeData header = headerTable.get(new Object[]{Constants.BUNDLE_SYMBOLICNAME});
1:fdf3952:         assertNotNull(header);
1:fdf3952:         String value = (String) header.get(VALUE);
1:fdf3952:         assertEquals("test", value);
1:fdf3952:         String key = (String)header.get(KEY);
1:fdf3952:         assertEquals(Constants.BUNDLE_SYMBOLICNAME, key);
1:8020538: 
1:8020538: 
1:fdf3952:         TabularData bundleTable = new TabularDataSupport(BUNDLES_TYPE);
1:fdf3952:         bundleTable.put(b.toCompositeData());
1:8020538: 
1:fdf3952:         CompositeData bundleData = bundleTable.get(new Object[]{Long.valueOf(1)});
1:fdf3952:         assertNotNull(bundleData);
1:fdf3952:         String location = (String) bundleData.get(LOCATION);
1:fdf3952:         assertEquals("location", location);
1:8020538: 
1:fdf3952:         assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , (String[]) compositeData.get(EXPORTED_PACKAGES));
1:fdf3952:         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"}, (String[]) compositeData.get(IMPORTED_PACKAGES));
1:fdf3952:         assertEquals(toSet(new long[] { 44, 55, 66 }), toSet((Long[]) compositeData.get(REQUIRED_BUNDLES)));
1:fdf3952:         assertArrayEquals(new Long[] { new Long(15), new Long(16), new Long(17) },(Long[]) compositeData.get(SERVICES_IN_USE));
1:fdf3952:         assertEquals("UNKNOWN", compositeData.get(STATE)); //default no return stub
1:fdf3952:         assertEquals(0,((Long[]) compositeData.get(HOSTS)).length);
1:fdf3952:         assertEquals(0, ((Long[]) compositeData.get(FRAGMENTS)).length);
1:8020538: 
1:fdf3952:     }
1:8020538: 
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testFromCompositeData() throws Exception {
1:fdf3952: 
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(EXPORTED_PACKAGES, new String[] { "org.apache.aries.jmx;1.0.0"});
1:fdf3952:         items.put(FRAGMENT, false);
1:fdf3952:         items.put(FRAGMENTS, new Long[0]);
1:fdf3952:         items.put(HOSTS, new Long[0]);
1:fdf3952:         items.put(IDENTIFIER, new Long(3));
1:fdf3952:         items.put(IMPORTED_PACKAGES, new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"});
1:fdf3952:         items.put(LAST_MODIFIED, new Long(8797));
1:fdf3952:         items.put(LOCATION, "");
1:8020538:         items.put(ACTIVATION_POLICY_USED, true);
1:fdf3952:         items.put(PERSISTENTLY_STARTED, false);
1:fdf3952:         items.put(REGISTERED_SERVICES, new Long[0]);
1:fdf3952:         items.put(REMOVAL_PENDING, false);
1:fdf3952:         items.put(REQUIRED, true);
1:fdf3952:         items.put(REQUIRED_BUNDLES, new Long[] { new Long(44), new Long(66) });
1:fdf3952:         items.put(REQUIRING_BUNDLES, new Long[0]);
1:fdf3952:         items.put(SERVICES_IN_USE, new Long[] { new Long(15), new Long(16), new Long(17) });
1:fdf3952:         items.put(START_LEVEL, 1);
1:fdf3952:         items.put(STATE, "ACTIVE");
1:fdf3952:         items.put(SYMBOLIC_NAME, "test");
1:fdf3952:         items.put(VERSION, "0.0.0");
1:fdf3952:         TabularData headerTable = new TabularDataSupport(HEADERS_TYPE);
1:fdf3952:         headerTable.put(new Header("a", "a").toCompositeData());
1:fdf3952:         headerTable.put(new Header("b", "b").toCompositeData());
1:fdf3952:         items.put(HEADERS, headerTable);
1:fdf3952:         CompositeData compositeData = new CompositeDataSupport(BUNDLE_TYPE, items);
1:8020538: 
1:fdf3952:         BundleData b = BundleData.from(compositeData);
1:8020538: 
1:fdf3952:         assertEquals("test", b.getSymbolicName());
1:fdf3952:         assertEquals("0.0.0", b.getVersion());
1:fdf3952:         assertEquals(2, b.getHeaders().size());
1:fdf3952:         assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , b.getExportedPackages());
1:fdf3952:         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"}, b.getImportedPackages());
1:fdf3952:         assertArrayEquals(new long[] { 44, 66 }, b.getRequiredBundles());
1:fdf3952:         assertArrayEquals(new long[] { 15, 16, 17 }, b.getServicesInUse());
1:fdf3952:         assertEquals("ACTIVE", b.getState()); //default no return stub
1:fdf3952:         assertEquals(0, b.getHosts().length);
1:fdf3952:         assertEquals(0, b.getFragments().length);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testHeaderToCompositeData() throws Exception{
1:8020538: 
1:fdf3952:         Header h1 = new Header("a", "b");
1:fdf3952:         CompositeData compositeData = h1.toCompositeData();
1:8020538: 
1:fdf3952:         assertEquals("a", compositeData.get(KEY));
1:fdf3952:         assertEquals("b", compositeData.get(VALUE));
1:8020538: 
1:fdf3952:     }
1:8020538: 
1:fdf3952:     @Test
1:fdf3952:     public void testHeaderFromCompositeData() throws Exception {
1:8020538: 
1:fdf3952:         CompositeData compositeData = new CompositeDataSupport(HEADER_TYPE, new String[] { KEY, VALUE } , new String [] { "c", "d" });
1:fdf3952:         Header header = Header.from(compositeData);
1:fdf3952:         assertEquals("c", header.getKey());
1:fdf3952:         assertEquals("d", header.getValue());
1:8020538: 
1:fdf3952:     }
1:8020538: 
1:fdf3952:     private static Set<Long> toSet(long[] array) {
1:fdf3952:         Set<Long> set = new HashSet<Long>();
1:fdf3952:         for (long value : array) {
1:fdf3952:             set.add(value);
1:fdf3952:         }
1:fdf3952:         return set;
1:fdf3952:     }
1:8020538: 
1:fdf3952:     private static Set<Long> toSet(Long[] array) {
1:fdf3952:         Set<Long> set = new HashSet<Long>();
1:fdf3952:         for (Long value : array) {
1:fdf3952:             set.add(value);
1:fdf3952:         }
1:fdf3952:         return set;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:8020538
/////////////////////////////////////////////////////////////////////////
1: import static org.osgi.jmx.framework.BundleStateMBean.ACTIVATION_POLICY_USED;
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         items.put(ACTIVATION_POLICY_USED, true);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.when;
1: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLES_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.BUNDLE_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.EXPORTED_PACKAGES;
1: import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENT;
1: import static org.osgi.jmx.framework.BundleStateMBean.FRAGMENTS;
1: import static org.osgi.jmx.framework.BundleStateMBean.HEADERS;
1: import static org.osgi.jmx.framework.BundleStateMBean.HEADERS_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.HEADER_TYPE;
1: import static org.osgi.jmx.framework.BundleStateMBean.HOSTS;
1: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1: import static org.osgi.jmx.framework.BundleStateMBean.IMPORTED_PACKAGES;
1: import static org.osgi.jmx.framework.BundleStateMBean.KEY;
1: import static org.osgi.jmx.framework.BundleStateMBean.LAST_MODIFIED;
1: import static org.osgi.jmx.framework.BundleStateMBean.LOCATION;
1: import static org.osgi.jmx.framework.BundleStateMBean.PERSISTENTLY_STARTED;
1: import static org.osgi.jmx.framework.BundleStateMBean.REGISTERED_SERVICES;
1: import static org.osgi.jmx.framework.BundleStateMBean.REMOVAL_PENDING;
1: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRED;
1: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRED_BUNDLES;
1: import static org.osgi.jmx.framework.BundleStateMBean.REQUIRING_BUNDLES;
1: import static org.osgi.jmx.framework.BundleStateMBean.SERVICES_IN_USE;
1: import static org.osgi.jmx.framework.BundleStateMBean.START_LEVEL;
1: import static org.osgi.jmx.framework.BundleStateMBean.STATE;
1: import static org.osgi.jmx.framework.BundleStateMBean.SYMBOLIC_NAME;
1: import static org.osgi.jmx.framework.BundleStateMBean.VALUE;
1: import static org.osgi.jmx.framework.BundleStateMBean.VERSION;
1: 
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.apache.aries.jmx.codec.BundleData.Header;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
1: import org.osgi.service.packageadmin.ExportedPackage;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.service.packageadmin.RequiredBundle;
1: import org.osgi.service.startlevel.StartLevel;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class BundleDataTest {
1: 
1:     
1:     @Test
1:     public void testToCompositeData() throws Exception {
1:         
1:         Bundle bundle = mock(Bundle.class);
1:         BundleContext context = mock(BundleContext.class);
1:         PackageAdmin packageAdmin = mock(PackageAdmin.class);
1:         StartLevel startLevel = mock(StartLevel.class);
1:         
1:         Bundle b1 = mock(Bundle.class);
1:         when(b1.getSymbolicName()).thenReturn("b1");
1:         when(b1.getBundleId()).thenReturn(new Long(44));
1:         Bundle b2 = mock(Bundle.class);
1:         when(b2.getSymbolicName()).thenReturn("b2");
1:         when(b2.getBundleId()).thenReturn(new Long(55));
1:         Bundle b3 = mock(Bundle.class);
1:         when(b3.getSymbolicName()).thenReturn("b3");
1:         when(b3.getBundleId()).thenReturn(new Long(66));
1:         when(context.getBundles()).thenReturn(new Bundle[] { bundle, b1, b2, b3 });
1:       
1:         when(bundle.getSymbolicName()).thenReturn("test");
1:         when(bundle.getVersion()).thenReturn(Version.emptyVersion);
1:         when(bundle.getBundleId()).thenReturn(new Long(1));
1:         when(bundle.getLastModified()).thenReturn(new Long(12345));
1:         when(bundle.getLocation()).thenReturn("location");
1:         
1:         //headers
1:         Dictionary<String, String> headers = new Hashtable<String, String>();
1:         headers.put(Constants.BUNDLE_SYMBOLICNAME, "test");
1:         headers.put(Constants.BUNDLE_VERSION, "0.0.0");
1:         when(bundle.getHeaders()).thenReturn(headers);
1:         
1:         //exported packages
1:         ExportedPackage exported = mock(ExportedPackage.class);
1:         when(exported.getName()).thenReturn("org.apache.aries.jmx");
1:         when(exported.getVersion()).thenReturn(new Version("1.0.0"));
1:         when(exported.getExportingBundle()).thenReturn(bundle);
1:         when(packageAdmin.getExportedPackages(bundle)).thenReturn(new ExportedPackage[] { exported });
1:         
1:         //imported packages
1:         ExportedPackage ep1 = mock(ExportedPackage.class);
1:         when(ep1.getImportingBundles()).thenReturn(new Bundle[] { bundle, b2, b3 });
1:         when(ep1.getName()).thenReturn("org.apache.aries.jmx.b1");
1:         when(ep1.getVersion()).thenReturn(Version.emptyVersion);
1:         when(ep1.getExportingBundle()).thenReturn(b1);
1:         ExportedPackage ep2 = mock(ExportedPackage.class);
1:         when(ep2.getImportingBundles()).thenReturn(new Bundle[] { bundle, b3 });
1:         when(ep2.getName()).thenReturn("org.apache.aries.jmx.b2");
1:         when(ep2.getVersion()).thenReturn(Version.parseVersion("2.0.1"));
1:         when(ep2.getExportingBundle()).thenReturn(b2);
1:         headers.put(Constants.DYNAMICIMPORT_PACKAGE, "*");
1:   
1:         when(packageAdmin.getExportedPackages(b1)).thenReturn(new ExportedPackage[] { ep1 });
1:         when(packageAdmin.getExportedPackages(b2)).thenReturn(new ExportedPackage[] { ep2 });
1:         when(packageAdmin.getExportedPackages(b3)).thenReturn(null);
1:         
1:         //required bundles
1:         RequiredBundle rb1 = mock(RequiredBundle.class);
1:         when(rb1.getBundle()).thenReturn(b1);
1:         when(rb1.getRequiringBundles()).thenReturn(new Bundle[] { bundle, b2 });
1:         RequiredBundle rb2 = mock(RequiredBundle.class);
1:         when(rb2.getBundle()).thenReturn(b2);
1:         when(rb2.getRequiringBundles()).thenReturn(new Bundle[] { b1 });
1:         RequiredBundle rb3 = mock(RequiredBundle.class);
1:         when(rb3.getBundle()).thenReturn(b3);
1:         when(rb3.getRequiringBundles()).thenReturn(new Bundle[] { bundle, b1, b2 });
1:         headers.put(Constants.REQUIRE_BUNDLE, "b1;bundle-version=\"1.0.0\",b3;bundle-version=\"2.0.0\"");
1:         when(packageAdmin.getRequiredBundles("b1")).thenReturn(new RequiredBundle[] { rb1 });
1:         when(packageAdmin.getRequiredBundles("b2")).thenReturn(new RequiredBundle[] { rb2 });
1:         when(packageAdmin.getRequiredBundles("b3")).thenReturn(new RequiredBundle[] { rb3 });
1:         
1:         //services in use
1:         ServiceReference s1 = mock(ServiceReference.class);
1:         when(s1.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(15));
1:         ServiceReference s2 = mock(ServiceReference.class);
1:         when(s2.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(16));
1:         ServiceReference s3 = mock(ServiceReference.class);
1:         when(s3.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(17));
1:         
1:         when(bundle.getServicesInUse()).thenReturn(new ServiceReference[] { s1, s2, s3 });
1:         
1:         BundleData b = new BundleData(context, bundle, packageAdmin, startLevel);
1:         CompositeData compositeData = b.toCompositeData();
1:         
1:         assertEquals("test", compositeData.get(SYMBOLIC_NAME));
1:         assertEquals("0.0.0", compositeData.get(VERSION));
1:         TabularData headerTable = (TabularData) compositeData.get(HEADERS);
1:         assertEquals(4, headerTable.values().size());
1:         CompositeData header = headerTable.get(new Object[]{Constants.BUNDLE_SYMBOLICNAME});
1:         assertNotNull(header);
1:         String value = (String) header.get(VALUE);
1:         assertEquals("test", value);
1:         String key = (String)header.get(KEY);
1:         assertEquals(Constants.BUNDLE_SYMBOLICNAME, key);
1:         
1:         
1:         TabularData bundleTable = new TabularDataSupport(BUNDLES_TYPE);
1:         bundleTable.put(b.toCompositeData());
1:    
1:         CompositeData bundleData = bundleTable.get(new Object[]{Long.valueOf(1)});
1:         assertNotNull(bundleData);
1:         String location = (String) bundleData.get(LOCATION);
1:         assertEquals("location", location);
1:         
1:         assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , (String[]) compositeData.get(EXPORTED_PACKAGES));
1:         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"}, (String[]) compositeData.get(IMPORTED_PACKAGES));
1:         assertEquals(toSet(new long[] { 44, 55, 66 }), toSet((Long[]) compositeData.get(REQUIRED_BUNDLES)));
1:         assertArrayEquals(new Long[] { new Long(15), new Long(16), new Long(17) },(Long[]) compositeData.get(SERVICES_IN_USE));
1:         assertEquals("UNKNOWN", compositeData.get(STATE)); //default no return stub
1:         assertEquals(0,((Long[]) compositeData.get(HOSTS)).length);
1:         assertEquals(0, ((Long[]) compositeData.get(FRAGMENTS)).length);
1:         
1:     }
1: 
1:    
1:     @Test
1:     public void testFromCompositeData() throws Exception {
1: 
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(EXPORTED_PACKAGES, new String[] { "org.apache.aries.jmx;1.0.0"});
1:         items.put(FRAGMENT, false);
1:         items.put(FRAGMENTS, new Long[0]);
1:         items.put(HOSTS, new Long[0]);
1:         items.put(IDENTIFIER, new Long(3));
1:         items.put(IMPORTED_PACKAGES, new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"});
1:         items.put(LAST_MODIFIED, new Long(8797));
1:         items.put(LOCATION, "");
1:         items.put(PERSISTENTLY_STARTED, false);
1:         items.put(REGISTERED_SERVICES, new Long[0]);
1:         items.put(REMOVAL_PENDING, false);
1:         items.put(REQUIRED, true);
1:         items.put(REQUIRED_BUNDLES, new Long[] { new Long(44), new Long(66) });
1:         items.put(REQUIRING_BUNDLES, new Long[0]);
1:         items.put(SERVICES_IN_USE, new Long[] { new Long(15), new Long(16), new Long(17) });
1:         items.put(START_LEVEL, 1);
1:         items.put(STATE, "ACTIVE");
1:         items.put(SYMBOLIC_NAME, "test");
1:         items.put(VERSION, "0.0.0");
1:         TabularData headerTable = new TabularDataSupport(HEADERS_TYPE);
1:         headerTable.put(new Header("a", "a").toCompositeData());
1:         headerTable.put(new Header("b", "b").toCompositeData());
1:         items.put(HEADERS, headerTable);
1:         CompositeData compositeData = new CompositeDataSupport(BUNDLE_TYPE, items);
1:         
1:         BundleData b = BundleData.from(compositeData);
1:         
1:         assertEquals("test", b.getSymbolicName());
1:         assertEquals("0.0.0", b.getVersion());
1:         assertEquals(2, b.getHeaders().size());
1:         assertArrayEquals(new String[] { "org.apache.aries.jmx;1.0.0"} , b.getExportedPackages());
1:         assertArrayEquals(new String[] { "org.apache.aries.jmx.b1;0.0.0" , "org.apache.aries.jmx.b2;2.0.1"}, b.getImportedPackages());
1:         assertArrayEquals(new long[] { 44, 66 }, b.getRequiredBundles());
1:         assertArrayEquals(new long[] { 15, 16, 17 }, b.getServicesInUse());
1:         assertEquals("ACTIVE", b.getState()); //default no return stub
1:         assertEquals(0, b.getHosts().length);
1:         assertEquals(0, b.getFragments().length);
1:     }
1: 
1:     @Test
1:     public void testHeaderToCompositeData() throws Exception{
1:         
1:         Header h1 = new Header("a", "b");
1:         CompositeData compositeData = h1.toCompositeData();
1:        
1:         assertEquals("a", compositeData.get(KEY));
1:         assertEquals("b", compositeData.get(VALUE));
1:         
1:     }
1:     
1:     @Test
1:     public void testHeaderFromCompositeData() throws Exception {
1:         
1:         CompositeData compositeData = new CompositeDataSupport(HEADER_TYPE, new String[] { KEY, VALUE } , new String [] { "c", "d" });
1:         Header header = Header.from(compositeData);
1:         assertEquals("c", header.getKey());
1:         assertEquals("d", header.getValue());
1:         
1:     }
1:         
1:     private static Set<Long> toSet(long[] array) {
1:         Set<Long> set = new HashSet<Long>();
1:         for (long value : array) {
1:             set.add(value);
1:         }
1:         return set;
1:     }
1:     
1:     private static Set<Long> toSet(Long[] array) {
1:         Set<Long> set = new HashSet<Long>();
1:         for (Long value : array) {
1:             set.add(value);
1:         }
1:         return set;
1:     }
1: }
============================================================================