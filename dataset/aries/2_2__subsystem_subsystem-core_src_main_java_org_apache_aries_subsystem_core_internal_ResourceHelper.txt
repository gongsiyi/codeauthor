1:ad877b6: /*
1:ad877b6:  * Licensed under the Apache License, Version 2.0 (the "License");
1:ad877b6:  * you may not use this file except in compliance with the License.
1:ad877b6:  * You may obtain a copy of the License at
1:ad877b6:  *
1:ad877b6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ad877b6:  *
1:ad877b6:  * Unless required by applicable law or agreed to in writing, software
1:ad877b6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad877b6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad877b6:  * See the License for the specific language governing permissions and
1:ad877b6:  * limitations under the License.
1:ad877b6:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
1:1c9c28b: 
1:54c8ff7: import java.util.Arrays;
1:ad877b6: import java.util.Collection;
1:b7762c7: import java.util.HashSet;
1:ad877b6: import java.util.List;
1:54c8ff7: import java.util.Map;
1:b7762c7: import java.util.Set;
1:b7762c7: import java.util.regex.Matcher;
1:b7762c7: import java.util.regex.Pattern;
2:ad877b6: 
1:1c9c28b: import org.apache.aries.subsystem.core.archive.TypeAttribute;
1:1c9c28b: import org.osgi.framework.Constants;
1:3a9710b: import org.osgi.framework.Filter;
1:1c9c28b: import org.osgi.framework.FrameworkUtil;
1:1c9c28b: import org.osgi.framework.InvalidSyntaxException;
1:ad877b6: import org.osgi.framework.Version;
1:b7762c7: import org.osgi.framework.namespace.AbstractWiringNamespace;
1:a1c6951: import org.osgi.framework.namespace.IdentityNamespace;
1:47cea41: import org.osgi.framework.wiring.BundleRevision;
1:71fe81a: import org.osgi.resource.Capability;
1:b7762c7: import org.osgi.resource.Namespace;
1:71fe81a: import org.osgi.resource.Requirement;
1:71fe81a: import org.osgi.resource.Resource;
1:1c9c28b: import org.slf4j.Logger;
1:1c9c28b: import org.slf4j.LoggerFactory;
1:ad877b6: 
1:ad877b6: public class ResourceHelper {
1:1c9c28b: 	private static final Logger logger = LoggerFactory.getLogger(ResourceHelper.class);
1:1c9c28b: 	
1:1c9c28b: 	public static boolean areEqual(Resource resource1, Resource resource2) {
1:1c9c28b: 		if (getTypeAttribute(resource1).equals(getTypeAttribute(resource2))) {
1:1c9c28b: 			if (getSymbolicNameAttribute(resource1).equals(getSymbolicNameAttribute(resource2))) {
1:1c9c28b: 				if (getVersionAttribute(resource1).equals(getVersionAttribute(resource2))) {
1:1c9c28b: 					return true;
1:1c9c28b: 				}
1:1c9c28b: 			}
1:1c9c28b: 		}
2:b7762c7: 		return false;
1:1c9c28b: 	}
1:1c9c28b: 	
1:ad877b6: 	public static String getContentAttribute(Resource resource) {
1:ad877b6: 		// TODO Add to constants.
1:ad877b6: 		return (String)getContentAttribute(resource, "osgi.content");
4:ad877b6: 	}
1:ad877b6: 	
1:ad877b6: 	public static Object getContentAttribute(Resource resource, String name) {
1:ad877b6: 		// TODO Add to constants.
1:ad877b6: 		List<Capability> capabilities = resource.getCapabilities("osgi.content");
1:ad877b6: 		Capability capability = capabilities.get(0);
1:ad877b6: 		return capability.getAttributes().get(name);
1:ad877b6: 	}
1:ad877b6: 	
1:ad877b6: 	public static Object getIdentityAttribute(Resource resource, String name) {
1:a1c6951: 		List<Capability> capabilities = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE);
1:ad877b6: 		Capability capability = capabilities.get(0);
1:ad877b6: 		return capability.getAttributes().get(name);
1:ad877b6: 	}
1:ad877b6: 	
1:47cea41: 	public static String getLocation(Resource resource) {
1:47cea41: 		if (resource instanceof BundleResource)
1:47cea41: 			return ((BundleResource)resource).getLocation();
1:47cea41: 		if (resource instanceof BundleRevision)
1:47cea41: 			return ((BundleRevision)resource).getBundle().getLocation();
1:5bd3bf6: 		if (resource instanceof BasicSubsystem)
1:5bd3bf6: 			return ((BasicSubsystem)resource).getLocation();
1:47cea41: 		if (resource instanceof SubsystemResource)
1:47cea41: 			return ((SubsystemResource)resource).getLocation();
1:47cea41: 		if (resource instanceof RawSubsystemResource)
1:47cea41: 			return ((RawSubsystemResource)resource).getLocation().getValue();
1:47cea41: 		return getSymbolicNameAttribute(resource) + '@' + getVersionAttribute(resource);
1:47cea41: 	}
1:47cea41: 	
1:d6eb080: 	public static Resource getResource(Requirement requirement, org.apache.aries.subsystem.core.repository.Repository repository) {
1:54c8ff7: 		Map<Requirement, Collection<Capability>> map = repository.findProviders(Arrays.asList(requirement));
1:54c8ff7: 		Collection<Capability> capabilities = map.get(requirement);
1:ad877b6: 		return capabilities == null ? null : capabilities.size() == 0 ? null : capabilities.iterator().next().getResource();
1:ad877b6: 	}
1:ad877b6: 	
1:ad877b6: 	public static String getSymbolicNameAttribute(Resource resource) {
1:a1c6951: 		return (String)getIdentityAttribute(resource, IdentityNamespace.IDENTITY_NAMESPACE);
1:ad877b6: 	}
1:ad877b6: 	
1:ad877b6: 	public static String getTypeAttribute(Resource resource) {
1:a1c6951: 		String result = (String)getIdentityAttribute(resource, IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
1:1c9c28b: 		if (result == null)
1:1c9c28b: 			result = TypeAttribute.DEFAULT_VALUE;
2:1c9c28b: 		return result;
1:1c9c28b: 	}
1:ad877b6: 	
1:ad877b6: 	public static Version getVersionAttribute(Resource resource) {
1:a1c6951: 		Version result = (Version)getIdentityAttribute(resource, IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE);
1:1c9c28b: 		if (result == null)
1:1c9c28b: 			result = Version.emptyVersion;
1:1c9c28b: 		return result;
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	public static boolean matches(Requirement requirement, Capability capability) {
1:1c9c28b: 		if (requirement == null && capability == null)
1:b7762c7: 			return true;
1:1c9c28b: 		else if (requirement == null || capability == null) 
1:b7762c7: 			return false;
1:1c9c28b: 		else if (!capability.getNamespace().equals(requirement.getNamespace())) 
1:b7762c7: 			return false;
2:1c9c28b: 		else {
1:3a9710b: 		    Filter filter = null;
1:3a9710b: 		    try {
1:3a9710b:     		    if (requirement instanceof AbstractRequirement) {
1:3a9710b:     		        filter = ((AbstractRequirement)requirement).getFilter();
1:3a9710b:     		    }
1:3a9710b:     		    else {
1:3a9710b:     		        String filterStr = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
1:3a9710b:     	            if (filterStr != null) {
1:3a9710b:     	                filter = FrameworkUtil.createFilter(filterStr);
1:3a9710b:     	            }
1:3a9710b:     		    }
1:3a9710b: 		    }
1:3a9710b: 		    catch (InvalidSyntaxException e) {
1:3a9710b:                 logger.debug("Requirement had invalid filter string: " + requirement, e);
1:3a9710b:                 return false;
1:3a9710b:             }
1:3a9710b: 		    if (filter != null && !filter.matches(capability.getAttributes())) {
1:3a9710b:                 return false;
1:3a9710b: 		    }
1:1c9c28b: 		}
1:b7762c7: 		return matchMandatoryDirective(requirement, capability);
1:b7762c7: 	}
1:b7762c7: 	
1:b7762c7: 	private static final String ATTR = "((?:\\s*[^=><~()]\\s*)+)";
1:b7762c7: 	private static final String VALUE = "(?:\\\\\\\\|\\\\\\*|\\\\\\(|\\\\\\)|[^\\*()])+";
1:b7762c7: 	private static final String FINAL = "(?:" + VALUE + ")?";
1:b7762c7: 	private static final String STAR_VALUE = "(?:" + FINAL + "(?:\\*" + FINAL + ")*)";
1:b7762c7: 	private static final String ANY = "(?:\\*" + STAR_VALUE + ")";
1:b7762c7: 	private static final String INITIAL = FINAL;
1:b7762c7: 	private static final String SUBSTRING = "(?:" + ATTR + "=" + INITIAL + ANY + FINAL + ")";
1:b7762c7: 	private static final String PRESENT = "(?:" + ATTR + "=\\*)";
1:b7762c7: 	private static final String LESS_EQ = "(?:<=)";
1:b7762c7: 	private static final String GREATER_EQ = "(?:>=)";
1:b7762c7: 	private static final String APPROX = "(?:~=)";
1:b7762c7: 	private static final String EQUAL = "(?:=)";
1:b7762c7: 	private static final String FILTER_TYPE = "(?:" + EQUAL + "|" + APPROX + "|" + GREATER_EQ + "|" + LESS_EQ + ")";
1:b7762c7: 	private static final String SIMPLE = "(?:" + ATTR + FILTER_TYPE + VALUE + ")";
1:b7762c7: 	private static final String OPERATION = "(?:" + SIMPLE + "|" + PRESENT + "|" + SUBSTRING + ")";
1:b7762c7: 	
1:b7762c7: 	private static final Pattern PATTERN = Pattern.compile(OPERATION);
1:b7762c7: 	
1:b7762c7: 	private static boolean matchMandatoryDirective(Requirement requirement, Capability capability) {
1:b7762c7: 		if (!requirement.getNamespace().startsWith("osgi.wiring."))
1:b7762c7: 			// Mandatory directives only affect osgi.wiring.* namespaces.
1:b7762c7: 			return true;
1:b7762c7: 		String mandatoryDirective = capability.getDirectives().get(AbstractWiringNamespace.CAPABILITY_MANDATORY_DIRECTIVE);
1:b7762c7: 		if (mandatoryDirective == null)
1:b7762c7: 			// There are no mandatory attributes to check.
1:b7762c7: 			return true;
1:b7762c7: 		String filterDirective = requirement.getDirectives().get(Namespace.REQUIREMENT_FILTER_DIRECTIVE);
1:b7762c7: 		if (filterDirective == null)
1:b7762c7: 			// The filter specifies none of the mandatory attributes.
1:b7762c7: 			return false;
1:b7762c7: 		Set<String> attributeNames = new HashSet<String>();
1:b7762c7: 		Matcher matcher = PATTERN.matcher(filterDirective);
1:b7762c7: 		// Collect all of the attribute names from the filter.
1:b7762c7: 		while (matcher.find())
1:b7762c7: 			attributeNames.add(matcher.group(1));
1:b7762c7: 		// Collect all of the mandatory attribute names.
1:b7762c7: 		for (String s : mandatoryDirective.split(","))
1:b7762c7: 			// Although all whitespace appears to be significant in a mandatory
1:b7762c7: 			// directive value according to OSGi syntax (since it must be quoted 
1:b7762c7: 			// due to commas), we'll anticipate issues here and trim off
1:b7762c7: 			// whitespace around the commas.
1:b7762c7: 			if (!attributeNames.contains(s.trim()))
1:b7762c7: 				// The filter does not specify a mandatory attribute.
1:b7762c7: 				return false;
1:b7762c7: 		// The filter specifies all mandatory attributes.
1:b7762c7: 		return true;
1:1c9c28b: 	}
1:1c9c28b: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3a9710b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Filter;
/////////////////////////////////////////////////////////////////////////
1: 		    Filter filter = null;
1: 		    try {
1:     		    if (requirement instanceof AbstractRequirement) {
1:     		        filter = ((AbstractRequirement)requirement).getFilter();
1:     		    }
1:     		    else {
1:     		        String filterStr = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
1:     	            if (filterStr != null) {
1:     	                filter = FrameworkUtil.createFilter(filterStr);
1:     	            }
1:     		    }
1: 		    }
1: 		    catch (InvalidSyntaxException e) {
1:                 logger.debug("Requirement had invalid filter string: " + requirement, e);
1:                 return false;
1:             }
1: 		    if (filter != null && !filter.matches(capability.getAttributes())) {
1:                 return false;
1: 		    }
commit:b7762c7
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: import org.osgi.framework.namespace.AbstractWiringNamespace;
1: import org.osgi.resource.Namespace;
/////////////////////////////////////////////////////////////////////////
1: 			return true;
1: 			return false;
1: 			return false;
0: 			if (filterStr != null) {
0: 					if (!FrameworkUtil.createFilter(filterStr).matches(capability.getAttributes()))
1: 						return false;
1: 					return false;
1: 		return matchMandatoryDirective(requirement, capability);
1: 	}
1: 	
1: 	private static final String ATTR = "((?:\\s*[^=><~()]\\s*)+)";
1: 	private static final String VALUE = "(?:\\\\\\\\|\\\\\\*|\\\\\\(|\\\\\\)|[^\\*()])+";
1: 	private static final String FINAL = "(?:" + VALUE + ")?";
1: 	private static final String STAR_VALUE = "(?:" + FINAL + "(?:\\*" + FINAL + ")*)";
1: 	private static final String ANY = "(?:\\*" + STAR_VALUE + ")";
1: 	private static final String INITIAL = FINAL;
1: 	private static final String SUBSTRING = "(?:" + ATTR + "=" + INITIAL + ANY + FINAL + ")";
1: 	private static final String PRESENT = "(?:" + ATTR + "=\\*)";
1: 	private static final String LESS_EQ = "(?:<=)";
1: 	private static final String GREATER_EQ = "(?:>=)";
1: 	private static final String APPROX = "(?:~=)";
1: 	private static final String EQUAL = "(?:=)";
1: 	private static final String FILTER_TYPE = "(?:" + EQUAL + "|" + APPROX + "|" + GREATER_EQ + "|" + LESS_EQ + ")";
1: 	private static final String SIMPLE = "(?:" + ATTR + FILTER_TYPE + VALUE + ")";
1: 	private static final String OPERATION = "(?:" + SIMPLE + "|" + PRESENT + "|" + SUBSTRING + ")";
1: 	
1: 	private static final Pattern PATTERN = Pattern.compile(OPERATION);
1: 	
1: 	private static boolean matchMandatoryDirective(Requirement requirement, Capability capability) {
1: 		if (!requirement.getNamespace().startsWith("osgi.wiring."))
1: 			// Mandatory directives only affect osgi.wiring.* namespaces.
1: 			return true;
1: 		String mandatoryDirective = capability.getDirectives().get(AbstractWiringNamespace.CAPABILITY_MANDATORY_DIRECTIVE);
1: 		if (mandatoryDirective == null)
1: 			// There are no mandatory attributes to check.
1: 			return true;
1: 		String filterDirective = requirement.getDirectives().get(Namespace.REQUIREMENT_FILTER_DIRECTIVE);
1: 		if (filterDirective == null)
1: 			// The filter specifies none of the mandatory attributes.
1: 			return false;
1: 		Set<String> attributeNames = new HashSet<String>();
1: 		Matcher matcher = PATTERN.matcher(filterDirective);
1: 		// Collect all of the attribute names from the filter.
1: 		while (matcher.find())
1: 			attributeNames.add(matcher.group(1));
1: 		// Collect all of the mandatory attribute names.
1: 		for (String s : mandatoryDirective.split(","))
1: 			// Although all whitespace appears to be significant in a mandatory
1: 			// directive value according to OSGi syntax (since it must be quoted 
1: 			// due to commas), we'll anticipate issues here and trim off
1: 			// whitespace around the commas.
1: 			if (!attributeNames.contains(s.trim()))
1: 				// The filter does not specify a mandatory attribute.
1: 				return false;
1: 		// The filter specifies all mandatory attributes.
1: 		return true;
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 		if (resource instanceof BasicSubsystem)
1: 			return ((BasicSubsystem)resource).getLocation();
commit:47cea41
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRevision;
/////////////////////////////////////////////////////////////////////////
1: 	public static String getLocation(Resource resource) {
1: 		if (resource instanceof BundleResource)
1: 			return ((BundleResource)resource).getLocation();
1: 		if (resource instanceof BundleRevision)
1: 			return ((BundleRevision)resource).getBundle().getLocation();
0: 		if (resource instanceof AriesSubsystem)
0: 			return ((AriesSubsystem)resource).getLocation();
1: 		if (resource instanceof SubsystemResource)
1: 			return ((SubsystemResource)resource).getLocation();
1: 		if (resource instanceof RawSubsystemResource)
1: 			return ((RawSubsystemResource)resource).getLocation().getValue();
1: 		return getSymbolicNameAttribute(resource) + '@' + getVersionAttribute(resource);
1: 	}
1: 	
commit:bc9f4bc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: //		if (logger.isDebugEnabled())
0: //			logger.debug(LOG_ENTRY, "matches", new Object[]{requirement, capability});
/////////////////////////////////////////////////////////////////////////
0: //		logger.debug(LOG_EXIT, "matches", result);
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
commit:a1c6951
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
/////////////////////////////////////////////////////////////////////////
1: 		List<Capability> capabilities = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
1: 		return (String)getIdentityAttribute(resource, IdentityNamespace.IDENTITY_NAMESPACE);
1: 		String result = (String)getIdentityAttribute(resource, IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
1: 		Version result = (Version)getIdentityAttribute(resource, IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE);
commit:54c8ff7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 		Map<Requirement, Collection<Capability>> map = repository.findProviders(Arrays.asList(requirement));
1: 		Collection<Capability> capabilities = map.get(requirement);
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
0: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import org.apache.aries.subsystem.core.archive.TypeAttribute;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger logger = LoggerFactory.getLogger(ResourceHelper.class);
1: 	
1: 	public static boolean areEqual(Resource resource1, Resource resource2) {
1: 		if (getTypeAttribute(resource1).equals(getTypeAttribute(resource2))) {
1: 			if (getSymbolicNameAttribute(resource1).equals(getSymbolicNameAttribute(resource2))) {
1: 				if (getVersionAttribute(resource1).equals(getVersionAttribute(resource2))) {
1: 					return true;
1: 				}
1: 			}
1: 		}
0: 		return false;
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
0: 		String result = (String)getIdentityAttribute(resource, ResourceConstants.IDENTITY_TYPE_ATTRIBUTE);
1: 		if (result == null)
1: 			result = TypeAttribute.DEFAULT_VALUE;
1: 		return result;
0: 		Version result = (Version)getIdentityAttribute(resource, ResourceConstants.IDENTITY_VERSION_ATTRIBUTE);
1: 		if (result == null)
1: 			result = Version.emptyVersion;
1: 		return result;
1: 	}
1: 	
1: 	public static boolean matches(Requirement requirement, Capability capability) {
0: 		if (logger.isDebugEnabled())
0: 			logger.debug(LOG_ENTRY, "matches", new Object[]{requirement, capability});
0: 		boolean result = false;
1: 		if (requirement == null && capability == null)
0: 			result = true;
1: 		else if (requirement == null || capability == null) 
0: 			result = false;
1: 		else if (!capability.getNamespace().equals(requirement.getNamespace())) 
0: 			result = false;
1: 		else {
0: 			String filterStr = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
0: 			if (filterStr == null)
0: 				result = true;
1: 			else {
0: 				try {
0: 					if (FrameworkUtil.createFilter(filterStr).matches(capability.getAttributes()))
0: 						result = true;
1: 				}
0: 				catch (InvalidSyntaxException e) {
0: 					logger.debug("Requirement had invalid filter string: " + requirement, e);
0: 					result = false;
1: 				}
1: 			}
1: 		}
0: 		// TODO Check directives.
0: 		logger.debug(LOG_EXIT, "matches", result);
1: 		return result;
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Requirement;
0: import org.osgi.framework.resource.Resource;
0: import org.osgi.framework.resource.ResourceConstants;
commit:ad877b6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.aries.subsystem.core;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.osgi.framework.Version;
0: import org.osgi.framework.wiring.Capability;
0: import org.osgi.framework.wiring.Requirement;
0: import org.osgi.framework.wiring.Resource;
0: import org.osgi.framework.wiring.ResourceConstants;
0: import org.osgi.service.repository.Repository;
1: 
1: public class ResourceHelper {
1: 	public static String getContentAttribute(Resource resource) {
1: 		// TODO Add to constants.
1: 		return (String)getContentAttribute(resource, "osgi.content");
1: 	}
1: 	
1: 	public static Object getContentAttribute(Resource resource, String name) {
1: 		// TODO Add to constants.
1: 		List<Capability> capabilities = resource.getCapabilities("osgi.content");
1: 		Capability capability = capabilities.get(0);
1: 		return capability.getAttributes().get(name);
1: 	}
1: 	
1: 	public static Object getIdentityAttribute(Resource resource, String name) {
0: 		List<Capability> capabilities = resource.getCapabilities(ResourceConstants.IDENTITY_NAMESPACE);
1: 		Capability capability = capabilities.get(0);
1: 		return capability.getAttributes().get(name);
1: 	}
1: 	
0: 	public static Resource getResource(Requirement requirement, Repository repository) {
0: 		Collection<Capability> capabilities = repository.findProviders(requirement);
1: 		return capabilities == null ? null : capabilities.size() == 0 ? null : capabilities.iterator().next().getResource();
1: 	}
1: 	
1: 	public static String getSymbolicNameAttribute(Resource resource) {
0: 		return (String)getIdentityAttribute(resource, ResourceConstants.IDENTITY_NAMESPACE);
1: 	}
1: 	
1: 	public static String getTypeAttribute(Resource resource) {
0: 		return (String)getIdentityAttribute(resource, ResourceConstants.IDENTITY_TYPE_ATTRIBUTE);
1: 	}
1: 	
1: 	public static Version getVersionAttribute(Resource resource) {
0: 		return (Version)getIdentityAttribute(resource, ResourceConstants.IDENTITY_VERSION_ATTRIBUTE);
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public static Resource getResource(Requirement requirement, org.apache.aries.subsystem.core.repository.Repository repository) {
============================================================================