1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.di;
2:f13c6ac: 
1:f13c6ac: import java.util.AbstractMap;
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Dictionary;
1:f13c6ac: import java.util.LinkedHashMap;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: import java.util.Set;
1:f13c6ac: import java.util.SortedMap;
1:f13c6ac: import java.util.TreeMap;
1:f13c6ac: import java.util.concurrent.ConcurrentHashMap;
1:f13c6ac: import java.util.concurrent.ConcurrentMap;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.utils.ReflectionUtils;
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:5e2bd49: import org.osgi.service.blueprint.container.ReifiedType;
1:f13c6ac: 
1:f13c6ac: /**
1:76b662a:  * @version $Rev$ $Date$
1:f13c6ac:  */
1:f13c6ac: public class MapRecipe extends AbstractRecipe {
1:f13c6ac: 
1:f13c6ac:     private final List<Recipe[]> entries;
1:5e2bd49:     private final Class<?> typeClass;
1:5e2bd49:     private final Object keyType;
1:5e2bd49:     private final Object valueType;
1:5e2bd49:     
1:5e2bd49:     
1:5e2bd49:     public MapRecipe(String name, Class<?> type, Object keyType, Object valueType) {
1:f13c6ac:         super(name);
1:f13c6ac:         if (type == null) throw new NullPointerException("type is null");
1:f13c6ac:         this.typeClass = type;
1:f13c6ac:         this.entries = new ArrayList<Recipe[]>();
1:5e2bd49:         this.keyType = keyType;
1:5e2bd49:         this.valueType = valueType;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<Recipe> getDependencies() {
1:f13c6ac:         List<Recipe> nestedRecipes = new ArrayList<Recipe>(entries.size() * 2);
2:f13c6ac:         for (Recipe[] entry : entries) {
1:f13c6ac:             nestedRecipes.add(entry[0]);
1:f13c6ac:             if (entry[1] != null) {
1:f13c6ac:                 nestedRecipes.add(entry[1]);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         return nestedRecipes;
1:f13c6ac:     }
1:5e2bd49:     
1:5e2bd49:     private ReifiedType getType(Object o) {
1:5e2bd49:     	ReifiedType type;
1:5e2bd49:         if (o instanceof Class) {
1:5e2bd49:             type = new ReifiedType((Class) o);
1:5e2bd49:         } else if (o instanceof String) {
1:5e2bd49:             type = loadType((String) o);
1:5e2bd49:         } else {
1:5e2bd49:             type = new ReifiedType(Object.class);
1:5e2bd49:         }
1:5e2bd49:         return type;
1:5e2bd49:     }
1:f13c6ac: 
1:f13c6ac:     protected Object internalCreate() throws ComponentDefinitionException {
1:5e2bd49:         Class<?> mapType = getMap(typeClass);
1:f13c6ac: 
1:f13c6ac:         if (!ReflectionUtils.hasDefaultConstructor(mapType)) {
1:f13c6ac:             throw new ComponentDefinitionException("Type does not have a default constructor " + mapType.getName());
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         Object o;
1:f13c6ac:         try {
1:f13c6ac:             o = mapType.newInstance();
1:f13c6ac:         } catch (Exception e) {
1:f13c6ac:             throw new ComponentDefinitionException("Error while creating set instance: " + mapType.getName());
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         Map instance;
1:f13c6ac:         if (o instanceof Map) {
1:f13c6ac:             instance = (Map) o;
1:f13c6ac:         } else if (o instanceof Dictionary) {
1:f13c6ac:             instance = new DummyDictionaryAsMap((Dictionary) o);
1:f13c6ac:         } else {
1:f13c6ac:             throw new ComponentDefinitionException("Specified map type does not implement the Map interface: " + mapType.getName());
1:f13c6ac:         }
1:f13c6ac: 
1:515d107:         ReifiedType defaultConvertKeyType = getType(keyType);
1:515d107:         ReifiedType defaultConvertValueType = getType(valueType);
1:515d107:                 
1:f13c6ac:         // add map entries
1:5e2bd49:         try {
1:5e2bd49:             for (Recipe[] entry : entries) {
1:515d107:                 ReifiedType convertKeyType = workOutConversionType(entry[0], defaultConvertKeyType);
1:5e2bd49:                 Object key = convert(entry[0].create(), convertKeyType);
1:515d107:                 // Each entry may have its own types
1:515d107:                 ReifiedType convertValueType = workOutConversionType(entry[1], defaultConvertValueType);
1:5e2bd49:                 Object value = entry[1] != null ? convert(entry[1].create(), convertValueType) : null;
1:5e2bd49:                 instance.put(key, value);
1:5e2bd49:             }
1:5e2bd49:         } catch (Exception e) {
1:5e2bd49:         	throw new ComponentDefinitionException(e);
1:f13c6ac:         }
1:f13c6ac:         return instance;
1:f13c6ac:     }
1:f13c6ac: 
1:515d107:    protected ReifiedType workOutConversionType(Recipe entry, ReifiedType defaultType) {
1:515d107:        if (entry instanceof ValueRecipe)
1:515d107:        {
1:515d107:           return getType(((ValueRecipe) entry).getValueType());
1:515d107:        } else 
1:515d107:        {
1:515d107:           return defaultType;
1:515d107:        }
1:515d107:    }
1:515d107: 
1:f13c6ac:     public void put(Recipe key, Recipe value) {
1:f13c6ac:         if (key == null) throw new NullPointerException("key is null");
1:f13c6ac:         entries.add(new Recipe[] { key, value});
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void putAll(Map<Recipe,Recipe> map) {
1:f13c6ac:         if (map == null) throw new NullPointerException("map is null");
1:f13c6ac:         for (Map.Entry<Recipe,Recipe> entry : map.entrySet()) {
1:f13c6ac:             Recipe key = entry.getKey();
1:f13c6ac:             Recipe value = entry.getValue();
1:f13c6ac:             put(key, value);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:5e2bd49:     public static Class<?> getMap(Class<?> type) {
1:f13c6ac:         if (ReflectionUtils.hasDefaultConstructor(type)) {
1:f13c6ac:             return type;
1:f13c6ac:         } else if (SortedMap.class.isAssignableFrom(type)) {
1:f13c6ac:             return TreeMap.class;
1:f13c6ac:         } else if (ConcurrentMap.class.isAssignableFrom(type)) {
1:f13c6ac:             return ConcurrentHashMap.class;
1:f13c6ac:         } else {
1:f13c6ac:             return LinkedHashMap.class;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public static class DummyDictionaryAsMap extends AbstractMap {
1:f13c6ac: 
1:f13c6ac:         private final Dictionary dictionary;
1:f13c6ac: 
1:f13c6ac:         public DummyDictionaryAsMap(Dictionary dictionary) {
1:f13c6ac:             this.dictionary = dictionary;
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         @Override
1:f13c6ac:         public Object put(Object key, Object value) {
1:f13c6ac:             return dictionary.put(key, value);
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         public Set entrySet() {
1:f13c6ac:             throw new UnsupportedOperationException();
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:515d107
/////////////////////////////////////////////////////////////////////////
1:         ReifiedType defaultConvertKeyType = getType(keyType);
1:         ReifiedType defaultConvertValueType = getType(valueType);
1:                 
1:                 ReifiedType convertKeyType = workOutConversionType(entry[0], defaultConvertKeyType);
1:                 // Each entry may have its own types
1:                 ReifiedType convertValueType = workOutConversionType(entry[1], defaultConvertValueType);
/////////////////////////////////////////////////////////////////////////
1:    protected ReifiedType workOutConversionType(Recipe entry, ReifiedType defaultType) {
1:        if (entry instanceof ValueRecipe)
1:        {
1:           return getType(((ValueRecipe) entry).getValueType());
1:        } else 
1:        {
1:           return defaultType;
1:        }
1:    }
1: 
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:5e2bd49
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.blueprint.container.ReifiedType;
/////////////////////////////////////////////////////////////////////////
1:     private final Class<?> typeClass;
1:     private final Object keyType;
1:     private final Object valueType;
1:     
1:     
1:     public MapRecipe(String name, Class<?> type, Object keyType, Object valueType) {
1:         this.keyType = keyType;
1:         this.valueType = valueType;
/////////////////////////////////////////////////////////////////////////
1:     
1:     private ReifiedType getType(Object o) {
1:     	ReifiedType type;
1:         if (o instanceof Class) {
1:             type = new ReifiedType((Class) o);
1:         } else if (o instanceof String) {
1:             type = loadType((String) o);
1:         } else {
1:             type = new ReifiedType(Object.class);
1:         }
1:         return type;
1:     }
1:         Class<?> mapType = getMap(typeClass);
/////////////////////////////////////////////////////////////////////////
0:         ReifiedType convertKeyType = getType(keyType);
0:         ReifiedType convertValueType = getType(valueType);
1:         try {
1:             for (Recipe[] entry : entries) {
1:                 Object key = convert(entry[0].create(), convertKeyType);
1:                 Object value = entry[1] != null ? convert(entry[1].create(), convertValueType) : null;
1:                 instance.put(key, value);
1:             }
1:         } catch (Exception e) {
1:         	throw new ComponentDefinitionException(e);
/////////////////////////////////////////////////////////////////////////
1:     public static Class<?> getMap(Class<?> type) {
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$ $Date$
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.di;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.utils.ReflectionUtils;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.di;
1: 
1: import java.util.AbstractMap;
1: import java.util.ArrayList;
1: import java.util.Dictionary;
1: import java.util.LinkedHashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.SortedMap;
1: import java.util.TreeMap;
0: import java.util.Hashtable;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: 
0: import org.apache.geronimo.blueprint.utils.ReflectionUtils;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: 
1: /**
0:  * @version $Rev: 6687 $ $Date: 2005-12-28T21:08:56.733437Z $
1:  */
1: public class MapRecipe extends AbstractRecipe {
1: 
1:     private final List<Recipe[]> entries;
0:     private final Class typeClass;
1: 
0:     public MapRecipe(String name, Class type) {
1:         super(name);
1:         if (type == null) throw new NullPointerException("type is null");
1:         this.typeClass = type;
1:         this.entries = new ArrayList<Recipe[]>();
1:     }
1: 
1:     public List<Recipe> getDependencies() {
1:         List<Recipe> nestedRecipes = new ArrayList<Recipe>(entries.size() * 2);
1:         for (Recipe[] entry : entries) {
1:             nestedRecipes.add(entry[0]);
1:             if (entry[1] != null) {
1:                 nestedRecipes.add(entry[1]);
1:             }
1:         }
1:         return nestedRecipes;
1:     }
1: 
1:     protected Object internalCreate() throws ComponentDefinitionException {
0:         Class mapType = getMap(typeClass);
1: 
1:         if (!ReflectionUtils.hasDefaultConstructor(mapType)) {
1:             throw new ComponentDefinitionException("Type does not have a default constructor " + mapType.getName());
1:         }
1: 
1:         Object o;
1:         try {
1:             o = mapType.newInstance();
1:         } catch (Exception e) {
1:             throw new ComponentDefinitionException("Error while creating set instance: " + mapType.getName());
1:         }
1: 
1:         Map instance;
1:         if (o instanceof Map) {
1:             instance = (Map) o;
1:         } else if (o instanceof Dictionary) {
1:             instance = new DummyDictionaryAsMap((Dictionary) o);
1:         } else {
1:             throw new ComponentDefinitionException("Specified map type does not implement the Map interface: " + mapType.getName());
1:         }
1: 
1:         // add map entries
1:         for (Recipe[] entry : entries) {
0:             Object key = entry[0].create();
0:             Object value = entry[1] != null ? entry[1].create() : null;
0:             instance.put(key, value);
1:         }
1:         return instance;
1:     }
1: 
1:     public void put(Recipe key, Recipe value) {
1:         if (key == null) throw new NullPointerException("key is null");
1:         entries.add(new Recipe[] { key, value});
1:     }
1: 
1:     public void putAll(Map<Recipe,Recipe> map) {
1:         if (map == null) throw new NullPointerException("map is null");
1:         for (Map.Entry<Recipe,Recipe> entry : map.entrySet()) {
1:             Recipe key = entry.getKey();
1:             Recipe value = entry.getValue();
1:             put(key, value);
1:         }
1:     }
1: 
0:     public static Class getMap(Class type) {
1:         if (ReflectionUtils.hasDefaultConstructor(type)) {
1:             return type;
1:         } else if (SortedMap.class.isAssignableFrom(type)) {
1:             return TreeMap.class;
1:         } else if (ConcurrentMap.class.isAssignableFrom(type)) {
1:             return ConcurrentHashMap.class;
1:         } else {
1:             return LinkedHashMap.class;
1:         }
1:     }
1: 
1:     public static class DummyDictionaryAsMap extends AbstractMap {
1: 
1:         private final Dictionary dictionary;
1: 
1:         public DummyDictionaryAsMap(Dictionary dictionary) {
1:             this.dictionary = dictionary;
1:         }
1: 
1:         @Override
1:         public Object put(Object key, Object value) {
1:             return dictionary.put(key, value);
1:         }
1: 
1:         public Set entrySet() {
1:             throw new UnsupportedOperationException();
1:         }
1:     }
1: 
1: }
============================================================================