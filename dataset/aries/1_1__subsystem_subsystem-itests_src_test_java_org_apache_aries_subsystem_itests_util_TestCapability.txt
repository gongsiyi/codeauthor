1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:fc759fb: package org.apache.aries.subsystem.itests.util;
1:fc759fb: 
1:fc759fb: import java.util.Collections;
1:fc759fb: import java.util.HashMap;
1:fc759fb: import java.util.Map;
1:fc759fb: 
1:71fe81a: import org.osgi.resource.Capability;
1:71fe81a: import org.osgi.resource.Resource;
1:fc759fb: 
1:fc759fb: public class TestCapability implements Capability {
1:fc759fb: 	public static class Builder {
1:fc759fb: 		private final Map<String, Object> attributes = new HashMap<String, Object>();
1:fc759fb: 		private final Map<String, String> directives = new HashMap<String, String>();
1:fc759fb: 		
1:fc759fb: 		private String namespace;
1:fc759fb: 		private Resource resource;
1:fc759fb: 		
1:fc759fb: 		public Builder attribute(String name, Object value) {
1:fc759fb: 			attributes.put(name,  value);
1:fc759fb: 			return this;
1:fc759fb: 		}
1:fc759fb: 		
1:fc759fb: 		public TestCapability build() {
1:fc759fb: 			return new TestCapability(namespace, attributes, directives, resource);
1:fc759fb: 		}
1:fc759fb: 		
1:fc759fb: 		public Builder directive(String name, String value) {
1:fc759fb: 			directives.put(name, value);
1:fc759fb: 			return this;
1:fc759fb: 		}
1:fc759fb: 		
1:fc759fb: 		public Builder namespace(String value) {
1:fc759fb: 			namespace = value;
1:fc759fb: 			return this;
1:fc759fb: 		}
1:fc759fb: 		
1:fc759fb: 		public Builder resource(Resource value) {
1:fc759fb: 			resource = value;
1:fc759fb: 			return this;
1:fc759fb: 		}
1:fc759fb: 	}
1:fc759fb: 	
1:fc759fb: 	private final Map<String, Object> attributes;
1:fc759fb: 	private final Map<String, String> directives;
1:fc759fb: 	private final String namespace;
1:fc759fb: 	private final Resource resource;
1:fc759fb: 	
1:fc759fb: 	public TestCapability(
1:fc759fb: 			String namespace,
1:fc759fb: 			Map<String, Object> attributes,
1:fc759fb: 			Map<String, String> directives,
1:fc759fb: 			Resource resource) {
1:fc759fb: 		this.namespace = namespace;
1:fc759fb: 		this.attributes = new HashMap<String, Object>(attributes);
1:fc759fb: 		this.directives = new HashMap<String, String>(directives);
1:fc759fb: 		this.resource = resource;
1:fc759fb: 	}
1:fc759fb: 
1:fc759fb: 	@Override
1:fc759fb: 	public Map<String, Object> getAttributes() {
1:fc759fb: 		return Collections.unmodifiableMap(attributes);
1:fc759fb: 	}
1:fc759fb: 
1:fc759fb: 	@Override
1:fc759fb: 	public Map<String, String> getDirectives() {
1:fc759fb: 		return Collections.unmodifiableMap(directives);
1:fc759fb: 	}
1:fc759fb: 
1:fc759fb: 	@Override
1:fc759fb: 	public String getNamespace() {
1:fc759fb: 		return namespace;
1:fc759fb: 	}
1:fc759fb: 
1:fc759fb: 	@Override
1:fc759fb: 	public Resource getResource() {
1:fc759fb: 		return resource;
1:fc759fb: 	}
1:fc759fb: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Resource;
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Resource;
1: 
1: public class TestCapability implements Capability {
1: 	public static class Builder {
1: 		private final Map<String, Object> attributes = new HashMap<String, Object>();
1: 		private final Map<String, String> directives = new HashMap<String, String>();
1: 		
1: 		private String namespace;
1: 		private Resource resource;
1: 		
1: 		public Builder attribute(String name, Object value) {
1: 			attributes.put(name,  value);
1: 			return this;
1: 		}
1: 		
1: 		public TestCapability build() {
1: 			return new TestCapability(namespace, attributes, directives, resource);
1: 		}
1: 		
1: 		public Builder directive(String name, String value) {
1: 			directives.put(name, value);
1: 			return this;
1: 		}
1: 		
1: 		public Builder namespace(String value) {
1: 			namespace = value;
1: 			return this;
1: 		}
1: 		
1: 		public Builder resource(Resource value) {
1: 			resource = value;
1: 			return this;
1: 		}
1: 	}
1: 	
1: 	private final Map<String, Object> attributes;
1: 	private final Map<String, String> directives;
1: 	private final String namespace;
1: 	private final Resource resource;
1: 	
1: 	public TestCapability(
1: 			String namespace,
1: 			Map<String, Object> attributes,
1: 			Map<String, String> directives,
1: 			Resource resource) {
1: 		this.namespace = namespace;
1: 		this.attributes = new HashMap<String, Object>(attributes);
1: 		this.directives = new HashMap<String, String>(directives);
1: 		this.resource = resource;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return Collections.unmodifiableMap(attributes);
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return Collections.unmodifiableMap(directives);
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return namespace;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================