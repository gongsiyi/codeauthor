1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.internal;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:4fec049: 
1:4fec049: import java.util.Collection;
1:4fec049: import java.util.Collections;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.HashSet;
1:4fec049: import java.util.Map;
1:4fec049: import java.util.Set;
1:4fec049: 
1:4fec049: import org.apache.aries.application.modelling.ImportedPackage;
1:58f55bd: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
1:4fec049: import org.slf4j.Logger;
1:4fec049: import org.slf4j.LoggerFactory;
1:4fec049: 
1:4fec049: 
1:4fec049: /**
1:4fec049:  * A class to merge collections of package requirements, such that multiple requirements
1:4fec049:  * for the same package are consolidated to a single requirement with a version constraint
1:4fec049:  * that is the intersection of the original version requirements.
1:4fec049:  */
1:4fec049: public final class PackageRequirementMerger
1:4fec049: {
1:4fec049:   private final Logger logger = LoggerFactory.getLogger(PackageRequirementMerger.class);
1:4fec049:   /** The merged requirements, or null if the merge failed. */
1:4fec049:   private final Collection<ImportedPackage> mergedRequirements;
1:4fec049:   /** Names of packages for which requirements were incompatible. */
1:4fec049:   private final Set<String> invalidRequirements = new HashSet<String>();
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Constructor.
1:4fec049:    * @param requirements the package requirements to be merged.
1:4fec049:    * @throws NullPointerException if the parameter is {@code null}.
1:4fec049:    */
1:4fec049:   public PackageRequirementMerger(Collection<ImportedPackage> requirements)
1:4fec049:   {
1:4fec049:     logger.debug(LOG_ENTRY, "PackageRequirementMerger", requirements);
1:4fec049:     
1:4fec049:     if (requirements == null)
1:4fec049:     {
1:4fec049:       NullPointerException npe = new NullPointerException();
1:4fec049:       logger.debug(LOG_EXIT, "PackageRequirementMerger", npe);
1:4fec049:       throw npe;
1:4fec049:     }
1:4fec049: 
1:4fec049:     // Do the merge.
1:4fec049:     Map<String, ImportedPackage> reqMap = new HashMap<String, ImportedPackage>();
1:4fec049:     for (ImportedPackage req : requirements)
1:4fec049:     {
1:4fec049:       String pkgName = req.getPackageName();
1:4fec049:       ImportedPackage existingReq = reqMap.get(pkgName);
1:4fec049:       if (existingReq == null)
1:4fec049:       {
1:4fec049:         reqMap.put(pkgName, req);
1:4fec049:         continue;
1:4fec049:       }
1:4fec049:       
1:58f55bd:       ImportedPackage intersectReq = ModellingHelperImpl.intersectPackage_(req, existingReq);
1:4fec049:       if (intersectReq != null)
1:4fec049:       {
1:4fec049:         reqMap.put(pkgName, intersectReq);
1:4fec049:         continue;
1:4fec049:       }
1:4fec049: 
1:4fec049:       invalidRequirements.add(pkgName);
1:4fec049:     }
1:4fec049:     
1:4fec049:     mergedRequirements = (invalidRequirements.isEmpty() ? reqMap.values() : null);
1:4fec049:     logger.debug(LOG_EXIT,"PackageRequirementMerger");
1:4fec049:     }
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * Check if the requirements could be successfully merged.
1:4fec049:    * @return true if the merge was successful; false if the requirements were not compatible.
1:4fec049:    */
1:4fec049:   public boolean isMergeSuccessful()
1:4fec049:   {
1:4fec049:     logger.debug(LOG_ENTRY, "isMergeSuccessful");
1:4fec049:     boolean result = mergedRequirements != null;
1:4fec049:     logger.debug(LOG_EXIT, "isMergeSuccessful", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Get the merged package requirements. The result will mirror the input collection,
1:4fec049:    * except that multiple requirements for the same package will be replaced by a single
1:4fec049:    * requirement that is the intersection of all the input requirements.
1:4fec049:    * <p>
1:4fec049:    * The {@code isMergeSuccessful} method should be checked for success prior to calling this method.
1:4fec049:    * @param inputRequirements
1:4fec049:    * @return A collection of package requirements, or {@code null} if the input contained incompatible requirements.
1:4fec049:    * @throws IllegalStateException if the merge was not successful.
1:4fec049:    */
1:4fec049:   public Collection<ImportedPackage> getMergedRequirements()
1:4fec049:   {
1:4fec049:     logger.debug(LOG_ENTRY, "getMergedRequirements");
1:4fec049:     if (mergedRequirements == null)
1:4fec049:     {
1:4fec049:       IllegalStateException ise = new IllegalStateException();
1:4fec049:       logger.debug(LOG_EXIT, "getMergedRequirements", ise);
1:4fec049:       throw ise;
1:4fec049:     }
1:4fec049:     logger.debug(LOG_EXIT, "getMergedRequirements", mergedRequirements);
1:4fec049:     return Collections.unmodifiableCollection(mergedRequirements);
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * Get the names of packages that caused the merge to fail due to their constraints
1:4fec049:    * being mutually exclusive.
1:4fec049:    * @return an unmodifiable set of package names.
1:4fec049:    */
1:4fec049:   public Set<String> getInvalidRequirements()
1:4fec049:   {
1:4fec049:     logger.debug(LOG_ENTRY, "getInvalidRequirements");
1:4fec049:     logger.debug(LOG_EXIT, "getInvalidRequirements", invalidRequirements);
1:4fec049:     return Collections.unmodifiableSet(invalidRequirements);
1:4fec049:   }
1:4fec049: 
1:4fec049: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.utils.impl.ModellingHelperImpl;
/////////////////////////////////////////////////////////////////////////
1:       ImportedPackage intersectReq = ModellingHelperImpl.intersectPackage_(req, existingReq);
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.internal;
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.aries.application.modelling.ImportedPackage;
0: import org.apache.aries.application.modelling.utils.ModellingUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: /**
1:  * A class to merge collections of package requirements, such that multiple requirements
1:  * for the same package are consolidated to a single requirement with a version constraint
1:  * that is the intersection of the original version requirements.
1:  */
1: public final class PackageRequirementMerger
1: {
1:   private final Logger logger = LoggerFactory.getLogger(PackageRequirementMerger.class);
1:   /** The merged requirements, or null if the merge failed. */
1:   private final Collection<ImportedPackage> mergedRequirements;
1:   /** Names of packages for which requirements were incompatible. */
1:   private final Set<String> invalidRequirements = new HashSet<String>();
1:   
1:   /**
1:    * Constructor.
1:    * @param requirements the package requirements to be merged.
1:    * @throws NullPointerException if the parameter is {@code null}.
1:    */
1:   public PackageRequirementMerger(Collection<ImportedPackage> requirements)
1:   {
1:     logger.debug(LOG_ENTRY, "PackageRequirementMerger", requirements);
1:     
1:     if (requirements == null)
1:     {
1:       NullPointerException npe = new NullPointerException();
1:       logger.debug(LOG_EXIT, "PackageRequirementMerger", npe);
1:       throw npe;
1:     }
1: 
1:     // Do the merge.
1:     Map<String, ImportedPackage> reqMap = new HashMap<String, ImportedPackage>();
1:     for (ImportedPackage req : requirements)
1:     {
1:       String pkgName = req.getPackageName();
1:       ImportedPackage existingReq = reqMap.get(pkgName);
1:       if (existingReq == null)
1:       {
1:         reqMap.put(pkgName, req);
1:         continue;
1:       }
1:       
0:       ImportedPackage intersectReq = ModellingUtils.intersectPackage(req, existingReq);
1:       if (intersectReq != null)
1:       {
1:         reqMap.put(pkgName, intersectReq);
1:         continue;
1:       }
1: 
1:       invalidRequirements.add(pkgName);
1:     }
1:     
1:     mergedRequirements = (invalidRequirements.isEmpty() ? reqMap.values() : null);
1:     logger.debug(LOG_EXIT,"PackageRequirementMerger");
1:     }
1: 
1:   /**
1:    * Check if the requirements could be successfully merged.
1:    * @return true if the merge was successful; false if the requirements were not compatible.
1:    */
1:   public boolean isMergeSuccessful()
1:   {
1:     logger.debug(LOG_ENTRY, "isMergeSuccessful");
1:     boolean result = mergedRequirements != null;
1:     logger.debug(LOG_EXIT, "isMergeSuccessful", result);
1:     return result;
1:   }
1:   
1:   /**
1:    * Get the merged package requirements. The result will mirror the input collection,
1:    * except that multiple requirements for the same package will be replaced by a single
1:    * requirement that is the intersection of all the input requirements.
1:    * <p>
1:    * The {@code isMergeSuccessful} method should be checked for success prior to calling this method.
1:    * @param inputRequirements
1:    * @return A collection of package requirements, or {@code null} if the input contained incompatible requirements.
1:    * @throws IllegalStateException if the merge was not successful.
1:    */
1:   public Collection<ImportedPackage> getMergedRequirements()
1:   {
1:     logger.debug(LOG_ENTRY, "getMergedRequirements");
1:     if (mergedRequirements == null)
1:     {
1:       IllegalStateException ise = new IllegalStateException();
1:       logger.debug(LOG_EXIT, "getMergedRequirements", ise);
1:       throw ise;
1:     }
1:     logger.debug(LOG_EXIT, "getMergedRequirements", mergedRequirements);
1:     return Collections.unmodifiableCollection(mergedRequirements);
1:   }
1:   
1:   /**
1:    * Get the names of packages that caused the merge to fail due to their constraints
1:    * being mutually exclusive.
1:    * @return an unmodifiable set of package names.
1:    */
1:   public Set<String> getInvalidRequirements()
1:   {
1:     logger.debug(LOG_ENTRY, "getInvalidRequirements");
1:     logger.debug(LOG_EXIT, "getInvalidRequirements", invalidRequirements);
1:     return Collections.unmodifiableSet(invalidRequirements);
1:   }
1: 
1: }
============================================================================