1:4bf53f2: /*
1:4bf53f2:  * Licensed to the Apache Software Foundation (ASF) under one
1:4bf53f2:  * or more contributor license agreements.  See the NOTICE file
1:4bf53f2:  * distributed with this work for additional information
1:4bf53f2:  * regarding copyright ownership.  The ASF licenses this file
1:4bf53f2:  * to you under the Apache License, Version 2.0 (the
1:4bf53f2:  * "License"); you may not use this file except in compliance
1:4bf53f2:  * with the License.  You may obtain a copy of the License at
1:4bf53f2:  *
1:4bf53f2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4bf53f2:  *
1:4bf53f2:  * Unless required by applicable law or agreed to in writing,
1:4bf53f2:  * software distributed under the License is distributed on an
1:4bf53f2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:4bf53f2:  * KIND, either express or implied.  See the License for the
1:4bf53f2:  * specific language governing permissions and limitations
1:4bf53f2:  * under the License.
1:4bf53f2:  */
1:4bf53f2: package org.apache.aries.jndi;
1:4bf53f2: 
1:4bf53f2: import java.util.Hashtable;
1:4bf53f2: 
1:4bf53f2: import javax.naming.Context;
1:4bf53f2: import javax.naming.NamingException;
1:4bf53f2: import javax.naming.spi.InitialContextFactory;
1:4bf53f2: import javax.naming.spi.InitialContextFactoryBuilder;
1:4bf53f2: 
1:4bf53f2: public class JREInitialContextFactoryBuilder implements InitialContextFactoryBuilder {
1:4bf53f2: 
1:4bf53f2:     public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
1:4bf53f2:         throws NamingException {
1:4bf53f2:         String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
1:4bf53f2:         if (contextFactoryClass != null) {
1:4bf53f2:             try {
1:b756d71:                 @SuppressWarnings("unchecked")
1:b756d71:                 Class<? extends InitialContextFactory> clazz = (Class<? extends InitialContextFactory>) ClassLoader.getSystemClassLoader().loadClass(contextFactoryClass);
1:4bf53f2:                 return InitialContextFactory.class.cast(clazz.newInstance());
1:4bf53f2:             } catch (Exception e) {
1:4bf53f2:                 return null;
1:4bf53f2:             }
1:4bf53f2:         }
1:4bf53f2:         return null;
1:4bf53f2:     }
1:4bf53f2:    
1:4bf53f2: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:b756d71
/////////////////////////////////////////////////////////////////////////
1:                 @SuppressWarnings("unchecked")
1:                 Class<? extends InitialContextFactory> clazz = (Class<? extends InitialContextFactory>) ClassLoader.getSystemClassLoader().loadClass(contextFactoryClass);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:4bf53f2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.spi.InitialContextFactory;
1: import javax.naming.spi.InitialContextFactoryBuilder;
1: 
1: public class JREInitialContextFactoryBuilder implements InitialContextFactoryBuilder {
1: 
1:     public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
1:         throws NamingException {
1:         String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
1:         if (contextFactoryClass != null) {
1:             try {
0:                 Class clazz = ClassLoader.getSystemClassLoader().loadClass(contextFactoryClass);
1:                 return InitialContextFactory.class.cast(clazz.newInstance());
1:             } catch (Exception e) {
1:                 return null;
1:             }
1:         }
1:         return null;
1:     }
1:    
1: }
============================================================================