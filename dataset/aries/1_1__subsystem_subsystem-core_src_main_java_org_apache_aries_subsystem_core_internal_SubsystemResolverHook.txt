1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.internal;
1:1129914: 
1:f1b1384: import java.util.ArrayList;
1:1129914: import java.util.Collection;
1:43e6d7c: import java.util.Iterator;
1:1129914: 
1:f1b1384: import org.apache.aries.subsystem.core.archive.PreferredProviderHeader;
1:1129914: import org.osgi.framework.hooks.resolver.ResolverHook;
1:1129914: import org.osgi.framework.wiring.BundleCapability;
1:1129914: import org.osgi.framework.wiring.BundleRequirement;
1:1129914: import org.osgi.framework.wiring.BundleRevision;
1:f1b1384: import org.osgi.resource.Resource;
1:1129914: import org.osgi.service.subsystem.Subsystem;
1:4717af0: import org.slf4j.Logger;
1:4717af0: import org.slf4j.LoggerFactory;
1:1129914: 
1:1129914: public class SubsystemResolverHook implements ResolverHook {
1:4717af0: 	private static final Logger LOGGER = LoggerFactory.getLogger(SubsystemResolverHook.class);
1:4717af0: 	
1:6abbe8d: 	private final Subsystems subsystems;
1:6abbe8d: 	
1:6abbe8d: 	public SubsystemResolverHook(Subsystems subsystems) {
1:6abbe8d: 		if (subsystems == null)
1:6abbe8d: 			throw new NullPointerException("Missing required parameter: subsystems");
1:6abbe8d: 		this.subsystems = subsystems;
1:6abbe8d: 	}
1:6abbe8d: 	
1:1129914: 	public void end() {
2:1129914: 		// noop
1:1129914: 	}
1:1129914: 
1:1129914: 	public void filterMatches(BundleRequirement requirement, Collection<BundleCapability> candidates) {
1:f1b1384: 		// Filter out candidates that don't come from preferred providers when
1:f1b1384: 		// there is at least one preferred provider.
1:f1b1384: 		// (1) Find the subsystem(s) containing requirement.getResource() as a
1:f1b1384: 		// constituent.
1:5bd3bf6: 		Collection<BasicSubsystem> requirers = subsystems.getSubsystemsReferencing(requirement.getResource());
1:f1b1384: 		// (2) For each candidate, ask each subsystem if the candidate or any of
1:f1b1384: 		// the candidate's containing subsystems is a preferred provider. If at
1:f1b1384: 		// least one preferred provider exists, filter out all other candidates
1:f1b1384: 		// that are not also preferred providers.
1:f1b1384: 		Collection<BundleCapability> preferredProviders = new ArrayList<BundleCapability>(candidates.size());
1:f1b1384: 		for (BundleCapability candidate : candidates)
1:5bd3bf6: 			for (BasicSubsystem subsystem : requirers) {
1:777b216: 				PreferredProviderHeader header = subsystem.getSubsystemManifest().getPreferredProviderHeader();
1:f1b1384: 				if (header != null && (header.contains(candidate.getResource()) || isResourceConstituentOfPreferredSubsystem(candidate.getResource(), subsystem)))
1:f1b1384: 					preferredProviders.add(candidate);
1:f1b1384: 			}
1:f1b1384: 		if (!preferredProviders.isEmpty())
1:f1b1384: 			candidates.retainAll(preferredProviders);
1:1129914: 	}
1:1129914: 
1:1129914: 	public void filterResolvable(Collection<BundleRevision> candidates) {
1:4717af0: 		try {
1:43e6d7c: 			for (Iterator<BundleRevision> iterator = candidates.iterator(); iterator.hasNext();) {
1:7e004f1: 				BundleRevision revision = iterator.next();
1:6ea98a2: 				if (revision.equals(ThreadLocalBundleRevision.get())) {
1:6ea98a2: 					// The candidate is a bundle whose INSTALLED event is
1:6ea98a2: 					// currently being processed on this thread.
1:6ea98a2: 					iterator.remove();
1:6ea98a2: 					continue;
1:6ea98a2: 				}
1:7e004f1: 				if (revision.getSymbolicName().startsWith(Constants.RegionContextBundleSymbolicNamePrefix))
1:7e004f1: 					// Don't want to filter out the region context bundle.
1:7e004f1: 					continue;
1:5bd3bf6: 				Collection<BasicSubsystem> subsystems = this.subsystems.getSubsystemsReferencing(revision);
1:cf8e214: 				if (subsystems.isEmpty() && ThreadLocalSubsystem.get() != null) {
1:9df8274: 				    // This is the revision of a bundle being installed as part of a subsystem installation
1:9df8274: 				    // before it has been added as a reference or constituent.
1:9df8274: 				    iterator.remove();
1:9df8274: 				    continue;
1:9df8274: 				}
1:5bd3bf6: 				for (BasicSubsystem subsystem : subsystems) {
1:4717af0: 					if (subsystem.isFeature()) {
1:4717af0: 						// Feature subsystems require no isolation.
1:4717af0: 						continue;
1:4717af0: 					}
1:4717af0: 					// Otherwise, the candidate is part of an application or composite subsystem requiring isolation.
1:fc759fb: 					// But only when in the INSTALLING state.
1:fc759fb: 					if (Subsystem.State.INSTALLING.equals(subsystem.getState())) {
1:43e6d7c: 						iterator.remove();
1:4717af0: 					}
1:1129914: 				}
1:1129914: 			}
1:1129914: 		}
1:4717af0: 		catch (RuntimeException e) {
1:4717af0: 			// This try/catch block is in place because exceptions occurring here are not showing up in the console during testing.
1:4717af0: 			LOGGER.debug("Unexpected exception while filtering resolution candidates: " + candidates, e);
1:4717af0: 		}
1:1129914: 	}
1:1129914: 
1:1129914: 	public void filterSingletonCollisions(BundleCapability singleton, Collection<BundleCapability> collisionCandidates) {
1:1129914: 		// noop
1:1129914: 	}
1:f1b1384: 	
1:5bd3bf6: 	private boolean isResourceConstituentOfPreferredSubsystem(Resource resource, BasicSubsystem preferer) {
1:5bd3bf6: 		Collection<BasicSubsystem> subsystems = this.subsystems.getSubsystemsReferencing(resource);
1:5bd3bf6: 		for (BasicSubsystem subsystem : subsystems)
1:777b216: 			if (preferer.getSubsystemManifest().getPreferredProviderHeader().contains(subsystem))
1:f1b1384: 				return true;
1:f1b1384: 		return false;
1:f1b1384: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:cf8e214
/////////////////////////////////////////////////////////////////////////
1: 				if (subsystems.isEmpty() && ThreadLocalSubsystem.get() != null) {
commit:6ea98a2
/////////////////////////////////////////////////////////////////////////
1: 				if (revision.equals(ThreadLocalBundleRevision.get())) {
1: 					// The candidate is a bundle whose INSTALLED event is
1: 					// currently being processed on this thread.
1: 					iterator.remove();
1: 					continue;
1: 				}
commit:9df8274
/////////////////////////////////////////////////////////////////////////
0: 				if (subsystems.isEmpty()) {
1: 				    // This is the revision of a bundle being installed as part of a subsystem installation
1: 				    // before it has been added as a reference or constituent.
1: 				    iterator.remove();
1: 				    continue;
1: 				}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 		Collection<BasicSubsystem> requirers = subsystems.getSubsystemsReferencing(requirement.getResource());
1: 			for (BasicSubsystem subsystem : requirers) {
/////////////////////////////////////////////////////////////////////////
1: 				Collection<BasicSubsystem> subsystems = this.subsystems.getSubsystemsReferencing(revision);
1: 				for (BasicSubsystem subsystem : subsystems) {
/////////////////////////////////////////////////////////////////////////
1: 	private boolean isResourceConstituentOfPreferredSubsystem(Resource resource, BasicSubsystem preferer) {
1: 		Collection<BasicSubsystem> subsystems = this.subsystems.getSubsystemsReferencing(resource);
1: 		for (BasicSubsystem subsystem : subsystems)
commit:6abbe8d
/////////////////////////////////////////////////////////////////////////
1: 	private final Subsystems subsystems;
1: 	
1: 	public SubsystemResolverHook(Subsystems subsystems) {
1: 		if (subsystems == null)
1: 			throw new NullPointerException("Missing required parameter: subsystems");
1: 		this.subsystems = subsystems;
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
0: 		Collection<AriesSubsystem> requirers = subsystems.getSubsystemsReferencing(requirement.getResource());
/////////////////////////////////////////////////////////////////////////
0: 				Collection<AriesSubsystem> subsystems = this.subsystems.getSubsystemsReferencing(revision);
/////////////////////////////////////////////////////////////////////////
0: 		Collection<AriesSubsystem> subsystems = this.subsystems.getSubsystemsReferencing(resource);
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: 				PreferredProviderHeader header = subsystem.getSubsystemManifest().getPreferredProviderHeader();
/////////////////////////////////////////////////////////////////////////
1: 			if (preferer.getSubsystemManifest().getPreferredProviderHeader().contains(subsystem))
commit:225bcae
/////////////////////////////////////////////////////////////////////////
0: 		Collection<AriesSubsystem> requirers = Activator.getInstance().getSubsystems().getSubsystemsReferencing(requirement.getResource());
/////////////////////////////////////////////////////////////////////////
0: 				Collection<AriesSubsystem> subsystems = Activator.getInstance().getSubsystems().getSubsystemsReferencing(revision);
/////////////////////////////////////////////////////////////////////////
0: 		Collection<AriesSubsystem> subsystems = Activator.getInstance().getSubsystems().getSubsystemsReferencing(resource);
commit:f1b1384
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import org.apache.aries.subsystem.core.archive.PreferredProviderHeader;
1: import org.osgi.resource.Resource;
/////////////////////////////////////////////////////////////////////////
1: 		// Filter out candidates that don't come from preferred providers when
1: 		// there is at least one preferred provider.
1: 		// (1) Find the subsystem(s) containing requirement.getResource() as a
1: 		// constituent.
0: 		Collection<AriesSubsystem> requirers = AriesSubsystem.getSubsystems(requirement.getResource());
1: 		// (2) For each candidate, ask each subsystem if the candidate or any of
1: 		// the candidate's containing subsystems is a preferred provider. If at
1: 		// least one preferred provider exists, filter out all other candidates
1: 		// that are not also preferred providers.
1: 		Collection<BundleCapability> preferredProviders = new ArrayList<BundleCapability>(candidates.size());
1: 		for (BundleCapability candidate : candidates)
0: 			for (AriesSubsystem subsystem : requirers) {
0: 				PreferredProviderHeader header = subsystem.getArchive().getSubsystemManifest().getPreferredProviderHeader();
1: 				if (header != null && (header.contains(candidate.getResource()) || isResourceConstituentOfPreferredSubsystem(candidate.getResource(), subsystem)))
1: 					preferredProviders.add(candidate);
1: 			}
1: 		if (!preferredProviders.isEmpty())
1: 			candidates.retainAll(preferredProviders);
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	private boolean isResourceConstituentOfPreferredSubsystem(Resource resource, AriesSubsystem preferer) {
0: 		Collection<AriesSubsystem> subsystems = AriesSubsystem.getSubsystems(resource);
0: 		for (AriesSubsystem subsystem : subsystems)
0: 			if (preferer.getArchive().getSubsystemManifest().getPreferredProviderHeader().contains(subsystem))
1: 				return true;
1: 		return false;
1: 	}
commit:7e004f1
/////////////////////////////////////////////////////////////////////////
1: 				BundleRevision revision = iterator.next();
1: 				if (revision.getSymbolicName().startsWith(Constants.RegionContextBundleSymbolicNamePrefix))
1: 					// Don't want to filter out the region context bundle.
1: 					continue;
0: 				Collection<AriesSubsystem> subsystems = AriesSubsystem.getSubsystems(revision);
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 					// But only when in the INSTALLING state.
1: 					if (Subsystem.State.INSTALLING.equals(subsystem.getState())) {
commit:43e6d7c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1: 			for (Iterator<BundleRevision> iterator = candidates.iterator(); iterator.hasNext();) {
0: 				Collection<AriesSubsystem> subsystems = AriesSubsystem.getSubsystems(iterator.next());
/////////////////////////////////////////////////////////////////////////
1: 						iterator.remove();
commit:4717af0
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger LOGGER = LoggerFactory.getLogger(SubsystemResolverHook.class);
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		try {
0: 			for (Resource candidate : candidates) {
0: 				Collection<AriesSubsystem> subsystems = AriesSubsystem.getSubsystems(candidate);
0: 				for (AriesSubsystem subsystem : subsystems) {
1: 					if (subsystem.isFeature()) {
1: 						// Feature subsystems require no isolation.
1: 						continue;
1: 					}
1: 					// Otherwise, the candidate is part of an application or composite subsystem requiring isolation.
0: 					// But only when in the INSTALLING or INSTALLED state.
0: 					if (EnumSet.of(Subsystem.State.INSTALLING, Subsystem.State.INSTALLED).contains(subsystem.getState())) {
0: 						candidates.remove(candidate);
1: 					}
1: 		catch (RuntimeException e) {
1: 			// This try/catch block is in place because exceptions occurring here are not showing up in the console during testing.
1: 			LOGGER.debug("Unexpected exception while filtering resolution candidates: " + candidates, e);
1: 		}
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Collection;
0: import java.util.EnumSet;
1: 
1: import org.osgi.framework.hooks.resolver.ResolverHook;
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRequirement;
1: import org.osgi.framework.wiring.BundleRevision;
0: import org.osgi.framework.wiring.Resource;
1: import org.osgi.service.subsystem.Subsystem;
1: 
1: public class SubsystemResolverHook implements ResolverHook {
1: 	public void end() {
1: 		// noop
1: 	}
1: 
1: 	public void filterMatches(BundleRequirement requirement, Collection<BundleCapability> candidates) {
1: 		// noop
1: 	}
1: 
1: 	public void filterResolvable(Collection<BundleRevision> candidates) {
0: 		SubsystemManager manager = Activator.getSubsystemManager();
0: 		for (Resource candidate : candidates) {
0: 			Collection<AriesSubsystem> subsystems = manager.getSubsystems(candidate);
0: 			for (AriesSubsystem subsystem : subsystems) {
0: 				// TODO Uncomment when features are implemented.
0: //				if (subsystem instanceof FeatureSubsystem) {
0: //					// Feature subsystems require no isolation.
0: //					continue;
0: //				}
0: 				// Otherwise, the candidate is part of an application or composite subsystem requiring isolation.
0: 				// But only when in the INSTALLING or INSTALLED state.
0: 				if (EnumSet.of(Subsystem.State.INSTALLING, Subsystem.State.INSTALLED).contains(subsystem.getState())) {
0: 					candidates.remove(candidate);
1: 				}
1: 			}
1: 		}
1: 	}
1: 
1: 	public void filterSingletonCollisions(BundleCapability singleton, Collection<BundleCapability> collisionCandidates) {
1: 		// noop
1: 	}
1: }
============================================================================