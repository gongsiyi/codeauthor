1:0ac1890: /*
1:0ac1890:  * Licensed to the Apache Software Foundation (ASF) under one
1:0ac1890:  * or more contributor license agreements.  See the NOTICE file
1:0ac1890:  * distributed with this work for additional information
1:0ac1890:  * regarding copyright ownership.  The ASF licenses this file
1:0ac1890:  * to you under the Apache License, Version 2.0 (the
1:0ac1890:  * "License"); you may not use this file except in compliance
1:0ac1890:  * with the License.  You may obtain a copy of the License at
1:0ac1890:  *
1:0ac1890:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0ac1890:  *
1:0ac1890:  * Unless required by applicable law or agreed to in writing,
1:0ac1890:  * software distributed under the License is distributed on an
1:0ac1890:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0ac1890:  * KIND, either express or implied.  See the License for the
1:0ac1890:  * specific language governing permissions and limitations
1:0ac1890:  * under the License.
1:0ac1890:  */
1:0ac1890: package org.apache.aries.proxy.impl.weaving;
1:9a9631e: 
1:9a9631e: import java.lang.reflect.Modifier;
1:9a9631e: 
1:9a9631e: import static org.objectweb.asm.Opcodes.ASM5;
1:9a9631e: import org.objectweb.asm.FieldVisitor;
1:9a9631e: import org.objectweb.asm.Opcodes;
1:9a9631e: import org.objectweb.asm.Type;
1:0ac1890: import org.objectweb.asm.commons.SerialVersionUIDAdder;
1:e6518d7: 
1:0ac1890: class SyntheticSerialVerUIDAdder extends SerialVersionUIDAdder {
1:e6518d7: 
1:0ac1890:   private WovenProxyAdapter wpa;
1:322f373: 
1:322f373:   //copied from superclass, they are now private
1:322f373:   /**
1:322f373:    * Flag that indicates if we need to compute SVUID.
1:322f373:    */
1:322f373:   private boolean computeSVUID;
1:322f373: 
1:322f373:   /**
1:322f373:    * Set to true if the class already has SVUID.
1:322f373:    */
1:9a9631e:   private boolean hasSVUID;
1:9a9631e: 
1:9a9631e:   public SyntheticSerialVerUIDAdder(WovenProxyAdapter cv) {
1:9a9631e:     super(ASM5, cv);
1:9a9631e:     wpa = cv;
1:9a9631e:   }
1:9a9631e: 
1:322f373:   // The following visit and visitField methods are workaround since ASM4 does not supply the javadoced method isHasSVUID() by mistake. 
1:322f373:   // When the method isHasSVUId() or similar methods available, we can remove the following two methods.
1:322f373: 
1:322f373:   @Override
1:322f373:   public void visit(
1:322f373:       final int version,
1:322f373:       final int access,
1:322f373:       final String name,
1:322f373:       final String signature,
1:322f373:       final String superName,
1:322f373:       final String[] interfaces) {
1:322f373:     computeSVUID = (access & Opcodes.ACC_INTERFACE) == 0;
1:322f373:     super.visit(version, access, name, signature, superName, interfaces);
1:322f373:   }
1:322f373: 
1:322f373:   @Override
1:322f373:   public FieldVisitor visitField(
1:322f373:       final int access,
1:322f373:       final String name,
1:322f373:       final String desc,
1:322f373:       final String signature,
1:322f373:       final Object value) {
1:322f373:     if (computeSVUID) {
1:322f373:       if ("serialVersionUID".equals(name) && Modifier.isFinal(access) && Modifier.isStatic(access) && Type.LONG_TYPE.equals(Type.getType(desc))) {
1:322f373:         // since the class already has SVUID, we won't be computing it.
1:322f373:         computeSVUID = false;
1:322f373:         hasSVUID = true;
1:322f373:       }
1:e6518d7:     }
5:e6518d7: 
1:322f373:     return super.visitField(access, name, desc, signature, value);
1:322f373:   }
1:322f373: 
1:322f373:   @Override
1:322f373:   public void visitEnd() {
1:322f373: 
1:322f373:     wpa.setSVUIDGenerated(!!!hasSVUID);
1:322f373:     super.visitEnd();
1:e6518d7:   }
1:e6518d7: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a9631e
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.lang.reflect.Modifier;
1: 
1: import static org.objectweb.asm.Opcodes.ASM5;
1: import org.objectweb.asm.FieldVisitor;
1: import org.objectweb.asm.Opcodes;
1: import org.objectweb.asm.Type;
/////////////////////////////////////////////////////////////////////////
1:   private boolean hasSVUID;
1: 
1:   public SyntheticSerialVerUIDAdder(WovenProxyAdapter cv) {
1:     super(ASM5, cv);
1:     wpa = cv;
1:   }
1: 
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:051eadf
/////////////////////////////////////////////////////////////////////////
0: import static org.objectweb.asm.Opcodes.ASM4;
/////////////////////////////////////////////////////////////////////////
0:     super(ASM4, cv);
author:Emily Jiang
-------------------------------------------------------------------------------
commit:322f373
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.Modifier;
0: import org.objectweb.asm.FieldVisitor;
0: import org.objectweb.asm.Opcodes;
0: import org.objectweb.asm.Type;
1: 
1:   //copied from superclass, they are now private
1:   /**
1:    * Flag that indicates if we need to compute SVUID.
1:    */
1:   private boolean computeSVUID;
1: 
1:   /**
1:    * Set to true if the class already has SVUID.
1:    */
0:   private boolean hasSVUID;
1: 
1:   // The following visit and visitField methods are workaround since ASM4 does not supply the javadoced method isHasSVUID() by mistake. 
1:   // When the method isHasSVUId() or similar methods available, we can remove the following two methods.
1:   @Override
1:   public void visit(
1:       final int version,
1:       final int access,
1:       final String name,
1:       final String signature,
1:       final String superName,
1:       final String[] interfaces) {
1:     computeSVUID = (access & Opcodes.ACC_INTERFACE) == 0;
1:     super.visit(version, access, name, signature, superName, interfaces);
1:   }
1: 
1:   @Override
1:   public FieldVisitor visitField(
1:       final int access,
1:       final String name,
1:       final String desc,
1:       final String signature,
1:       final Object value) {
1:     if (computeSVUID) {
1:       if ("serialVersionUID".equals(name) && Modifier.isFinal(access) && Modifier.isStatic(access) && Type.LONG_TYPE.equals(Type.getType(desc))) {
1:         // since the class already has SVUID, we won't be computing it.
1:         computeSVUID = false;
1:         hasSVUID = true;
1:       }
1:     return super.visitField(access, name, desc, signature, value);
1:   }
1: 
1:   @Override
1:   public void visitEnd() {
1: 
1:     wpa.setSVUIDGenerated(!!!hasSVUID);
1:     super.visitEnd();
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: 
0: import org.apache.aries.proxy.impl.gen.Constants;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:   private static Logger LOGGER = LoggerFactory.getLogger(SyntheticSerialVerUIDAdder.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:    
0:     wpa.setSVUIDGenerated(!!!isHasSVUID());
1:   
0:   private boolean isHasSVUID() {
0:     try {
0:       if (computeSVUID() == 0 ) {
0:         // This means the class has a serial id already
0:         return true;      
0:       } else {
0:         return false;
1:       }
0:     } catch (IOException ioe) {
1:    
0:       LOGGER.debug(Constants.LOG_ENTRY, "cannot.compute.serial.id", new Object[] { ioe });
1: 
0:     } finally {
0:       return false;
1:     }
1: 
1:   }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:0ac1890
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl.weaving;
0: 
1: import org.objectweb.asm.commons.SerialVersionUIDAdder;
0: 
1: class SyntheticSerialVerUIDAdder extends SerialVersionUIDAdder {
0: 
1:   private WovenProxyAdapter wpa;
0:   
0:   public SyntheticSerialVerUIDAdder(WovenProxyAdapter cv) {
0:     super(cv);
0:     wpa = cv;
0:   }
0: 
0:   @Override
0:   public void visitEnd() {
0:     wpa.setSVUIDGenerated(!!!hasSVUID);
0:     super.visitEnd();
0:   }
0: }
============================================================================