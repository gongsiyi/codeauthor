1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
1:96d4e06:  */
1:8f852b6: package org.apache.aries.proxy.impl.common;
6:96d4e06: 
1:475ef33: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.OBJECT_TYPE;
1:82cd139: 
1:96d4e06: import org.objectweb.asm.MethodVisitor;
1:96d4e06: import org.objectweb.asm.Type;
1:96d4e06: import org.objectweb.asm.commons.Method;
1:82cd139: 
1:475ef33: /**
1:475ef33:  * Used to create a delegating method implementation for methods with no body
1:475ef33:  */
1:8f852b6: public final class WovenProxyAbstractMethodAdapter extends AbstractWovenProxyMethodAdapter {
1:8f852b6:  
1:8f852b6:   public WovenProxyAbstractMethodAdapter(MethodVisitor mv, int access, String name,
1:96d4e06:       String desc, String methodStaticFieldName, Method currentTransformMethod,
1:051eadf:       Type typeBeingWoven, Type methodDeclaringType, boolean isMethodDeclaringTypeInterface, boolean isDefaultMethod) {
1:96d4e06:     super(mv, access, name, desc, methodStaticFieldName, currentTransformMethod,
1:051eadf:         typeBeingWoven, methodDeclaringType, isMethodDeclaringTypeInterface, isDefaultMethod);
3:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * We write dispatch code here because we have no real method body
1:96d4e06:    */
3:96d4e06:   @Override
1:96d4e06:   public final void visitCode()
1:96d4e06:   {
1:96d4e06:     //Notify our parent that the method code is starting. This must happen first
1:96d4e06:     mv.visitCode();
1:96d4e06:     
1:96d4e06:     //unwrap for equals if we need to
1:96d4e06:     if(currentTransformMethod.getName().equals("equals") && 
1:96d4e06:         currentTransformMethod.getArgumentTypes().length == 1 && 
1:96d4e06:         currentTransformMethod.getArgumentTypes()[0].equals(OBJECT_TYPE)) {
1:96d4e06:       unwrapEqualsArgument();
1:96d4e06:     }
1:96d4e06:     //No null-check needed
1:96d4e06:     //Write the dispatcher code in here
1:96d4e06:     writeDispatcher();
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   @Override
1:96d4e06:   public final void visitMaxs(int stack, int locals) {
1:96d4e06:     mv.visitMaxs(stack, locals);
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   /**
1:96d4e06:    * We don't get the code and maxs calls for interfaces, so we add them here
1:96d4e06:    */
1:96d4e06:   @Override
1:96d4e06:   public final void visitEnd() {
1:96d4e06:     visitCode();
1:96d4e06:     visitMaxs(0, 0);
1:96d4e06:     mv.visitEnd();
1:96d4e06:   }
1:96d4e06: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:051eadf
/////////////////////////////////////////////////////////////////////////
1:       Type typeBeingWoven, Type methodDeclaringType, boolean isMethodDeclaringTypeInterface, boolean isDefaultMethod) {
1:         typeBeingWoven, methodDeclaringType, isMethodDeclaringTypeInterface, isDefaultMethod);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.impl.common;
/////////////////////////////////////////////////////////////////////////
1: public final class WovenProxyAbstractMethodAdapter extends AbstractWovenProxyMethodAdapter {
1:  
1:   public WovenProxyAbstractMethodAdapter(MethodVisitor mv, int access, String name,
0:         typeBeingWoven, methodDeclaringType, isMethodDeclaringTypeInterface);
/////////////////////////////////////////////////////////////////////////
commit:d014a6c
/////////////////////////////////////////////////////////////////////////
0:   private final Type typeToCastTo;
0:   private final boolean istypeToCastToInterface;
0:       Type typeBeingWoven, Type methodDeclaringType, boolean isMethodDeclaringTypeInterface) {
0:     this.typeToCastTo = methodDeclaringType;
0:     this.istypeToCastToInterface = isMethodDeclaringTypeInterface;
/////////////////////////////////////////////////////////////////////////
0:     return typeToCastTo;
0:     return istypeToCastToInterface;
commit:82cd139
/////////////////////////////////////////////////////////////////////////
1:   
0:   private final boolean isInterfaceType;
1:   
0:     this.isInterfaceType = !!!interfaceType.equals(OBJECT_TYPE);
/////////////////////////////////////////////////////////////////////////
0:     return isInterfaceType;
commit:475ef33
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.proxy.impl.interfaces;
1: import static org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter.OBJECT_TYPE;
0: import org.apache.aries.proxy.impl.common.AbstractWovenProxyMethodAdapter;
1: /**
1:  * Used to create a delegating method implementation for methods with no body
1:  */
0: final class InterfaceUsingWovenProxyMethodAdapter extends AbstractWovenProxyMethodAdapter {
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.proxy.impl.weaving;
1: 
0: import static org.apache.aries.proxy.impl.weaving.AbstractWovenProxyAdapter.OBJECT_TYPE;
1: 
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Type;
1: import org.objectweb.asm.commons.Method;
1: 
0: class InterfaceUsingWovenProxyMethodAdapter extends AbstractWovenProxyMethodAdapter {
1: 
0:   private final Type interfaceType;
0:   public InterfaceUsingWovenProxyMethodAdapter(MethodVisitor mv, int access, String name,
1:       String desc, String methodStaticFieldName, Method currentTransformMethod,
0:       Type typeBeingWoven, Type interfaceType) {
1:     super(mv, access, name, desc, methodStaticFieldName, currentTransformMethod,
0:         typeBeingWoven);
0:     this.interfaceType = interfaceType;
1:   }
1: 
1:   /**
1:    * We write dispatch code here because we have no real method body
1:    */
1:   @Override
1:   public final void visitCode()
1:   {
1:     //Notify our parent that the method code is starting. This must happen first
1:     mv.visitCode();
1:     
1:     //unwrap for equals if we need to
1:     if(currentTransformMethod.getName().equals("equals") && 
1:         currentTransformMethod.getArgumentTypes().length == 1 && 
1:         currentTransformMethod.getArgumentTypes()[0].equals(OBJECT_TYPE)) {
1:       unwrapEqualsArgument();
1:     }
1:     //No null-check needed
1:     //Write the dispatcher code in here
1:     writeDispatcher();
1:   }
1: 
1:   @Override
1:   public final void visitMaxs(int stack, int locals) {
1:     mv.visitMaxs(stack, locals);
1:   }
1:   
1:   /**
1:    * We don't get the code and maxs calls for interfaces, so we add them here
1:    */
1:   @Override
1:   public final void visitEnd() {
1:     visitCode();
1:     visitMaxs(0, 0);
1:     mv.visitEnd();
1:   }
1:   
1:   @Override
0:   protected final Type getTypeToCastTo() {
0:     return interfaceType;
1:   }
1:   
1:   @Override
0:   protected final boolean isTypeToCastToInterface() {
0:     return true;
1:   }
1: }
============================================================================