1:e5c89d2: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:e5c89d2:  *  contributor license agreements.  See the NOTICE file distributed with
1:e5c89d2:  *  this work for additional information regarding copyright ownership.
1:e5c89d2:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:e5c89d2:  *  (the "License"); you may not use this file except in compliance with
1:e5c89d2:  *  the License.  You may obtain a copy of the License at
1:e5c89d2:  *
1:e5c89d2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e5c89d2:  *
1:e5c89d2:  *  Unless required by applicable law or agreed to in writing, software
1:e5c89d2:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:e5c89d2:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e5c89d2:  *  See the License for the specific language governing permissions and
1:e5c89d2:  *  limitations under the License.
1:e5c89d2:  */
1:e5c89d2: package org.apache.aries.jpa.blueprint.aries.itest;
1:e5c89d2: 
1:d5c184f: import java.util.ArrayList;
1:e5c89d2: import java.util.Collection;
1:d5c184f: import java.util.List;
1:d5c184f: import java.util.concurrent.ExecutionException;
1:0d59ccb: import java.util.concurrent.ExecutorService;
1:0d59ccb: import java.util.concurrent.Executors;
1:d5c184f: import java.util.concurrent.Future;
1:0d59ccb: import java.util.concurrent.TimeUnit;
1:e5c89d2: 
1:e5c89d2: import javax.inject.Inject;
1:1cfde06: import javax.transaction.NotSupportedException;
1:1cfde06: import javax.transaction.SystemException;
1:1cfde06: import javax.transaction.UserTransaction;
1:e5c89d2: 
1:e5c89d2: import org.apache.aries.jpa.container.itest.entities.Car;
1:e5c89d2: import org.apache.aries.jpa.container.itest.entities.CarService;
1:98ca24c: import org.apache.aries.jpa.itest.AbstractCarJPAITest;
1:0d59ccb: import org.junit.Assert;
1:e5c89d2: import org.junit.Test;
1:e5c89d2: import org.ops4j.pax.exam.Configuration;
1:e5c89d2: import org.ops4j.pax.exam.Option;
1:0d59ccb: import org.osgi.service.coordinator.Coordination;
1:e5c89d2: import org.osgi.service.coordinator.Coordinator;
1:e5c89d2: 
1:98ca24c: public class BlueprintTest extends AbstractCarJPAITest {
1:e5c89d2:     @Inject
1:e5c89d2:     Coordinator coordinator;
1:e5c89d2:     
1:2cfdf52:     @Inject
1:1cfde06:     UserTransaction ut;
1:e5c89d2:     
1:e5c89d2:     @Test
1:e5c89d2:     public void testCoordination() {
1:e74c870:         assertNoCoordination();
1:e5c89d2:         CarService carService = getCarService("em");
1:e74c870:         assertNoCars(carService);
1:0d59ccb:         for (int c=0; c<100; c++) {
1:0d59ccb:             System.out.println(c);
1:3033c4a:             Coordination coordination = coordinator.begin("testCoordination", 0);
2:0d59ccb:             try {
1:0d59ccb:                 carService.addCar(createBlueCar());
1:0d59ccb:                 Collection<Car> cars = carService.getCars();
1:0d59ccb:                 carService.updateCar(cars.iterator().next());
2:0d59ccb:             } finally {
1:3033c4a:                 coordination.end();
1:0d59ccb:             }
1:901da3a:             carService.deleteCar(BLUE_CAR_PLATE);
1:901da3a:             Assert.assertEquals(0, carService.getCars().size());
1:0d59ccb:         }
1:0d59ccb:     }
1:e5c89d2:     
1:e5c89d2:     @Test
1:e5c89d2:     public void testInjectToMethod() throws Exception {
1:e5c89d2:         carLifecycle(getCarService("method"));
1:e5c89d2:     }
1:e5c89d2: 
1:e5c89d2:     @Test
1:e5c89d2:     public void testMultiAnnotation() throws Exception {
1:e5c89d2:         carLifecycle(getCarService("multiannotation"));
1:e5c89d2:     }
1:e5c89d2: 
1:e5c89d2:     @Test
1:76a5356:     public void testEmf() throws Exception {
1:e5c89d2:         carLifecycle(getCarService("emf"));
1:e5c89d2:     }
1:e5c89d2: 
1:e5c89d2:     @Test
1:76a5356:     public void testEm() throws Exception {
1:e5c89d2:         carLifecycle(getCarService("em"));
1:e5c89d2:     }
1:d5c184f:     
1:d5c184f:     @Test
1:d5c184f:     public void testEmJtaAnn() throws Exception {
1:d5c184f:         carLifecycle(getCarService("emJtaAnn"));
1:d5c184f:     }
1:e5c89d2: 
1:e5c89d2:     @Test
1:76a5356:     public void testSupplier() throws Exception {
1:e5c89d2:         carLifecycle(getCarService("supplier"));
1:e5c89d2:     }
1:3c2556b:     
1:3c2556b:     @Test
1:1cfde06:     public void testRealTransactional() throws Exception {
1:1cfde06:         carRealTransactionalLifecycle(getCarService("emJtaAnn"));
1:e5c89d2:     }
1:e5c89d2:     
1:2cfdf52:     @Test
1:37265e0:     public void testInlined() throws Exception {
1:37265e0:         carRealTransactionalLifecycle(getCarService("emJtaAnnInlined"));
1:37265e0:     }
1:37265e0:     
1:37265e0:     @Test
1:d5c184f:     public void testCoordinationLifecycle() throws InterruptedException, ExecutionException {
1:e74c870:         CarService carService = getCarService("em");
1:e74c870:         assertNoCars(carService);
1:3c2556b:         Runnable carLifeCycle = getService(Runnable.class, "(type=carCoordinated)");
1:e74c870:         carLifeCycle.run();
1:0d59ccb:         ExecutorService exec = Executors.newFixedThreadPool(20);
1:e809e9c:         List<Future<?>> futures = new ArrayList<Future<?>>();
1:0d59ccb:         for (int c=0; c<100; c++) {
1:d5c184f:             futures.add(exec.submit(carLifeCycle));
1:0d59ccb:         }
1:0d59ccb:         exec.shutdown();
1:0d59ccb:         exec.awaitTermination(30, TimeUnit.SECONDS);
1:d5c184f:         for (Future<?> future : futures) {
1:d5c184f:             future.get();
1:d5c184f:         }
1:e74c870:         assertNoCars(carService);
1:3c2556b:     }
1:e5c89d2: 
1:e5c89d2:     private CarService getCarService(String type) {
1:e5c89d2:         return getService(CarService.class, "(type=" + type + ")");
1:e5c89d2:     }
1:e5c89d2: 
1:e5c89d2:     private void carLifecycle(CarService carService) {
1:e74c870:         assertNoCoordination();
1:dbd9491:         if (carService.getCar(BLACK_CAR_PLATE) != null) {
1:dbd9491:             carService.deleteCar(BLUE_CAR_PLATE);
1:dbd9491:         }
1:e5c89d2:         carService.addCar(createBlueCar());
1:e5c89d2:         assertBlueCar(carService.getCar(BLUE_CAR_PLATE));
1:76a5356:         carService.deleteCar(BLUE_CAR_PLATE);
1:e5c89d2:     }
1:e5c89d2:     
1:1cfde06:     private void carRealTransactionalLifecycle(CarService carService) throws IllegalStateException, SystemException, NotSupportedException {
1:1cfde06:         assertNoCoordination();
1:1cfde06:         if (carService.getCar(BLACK_CAR_PLATE) != null) {
1:0d59ccb:             carService.deleteCar(BLUE_CAR_PLATE);
1:e5c89d2:         }
1:1cfde06:         ut.begin();
1:e5c89d2:         carService.addCar(createBlueCar());
1:1cfde06:         ut.rollback();
1:1cfde06:         Assert.assertNull(carService.getCar(BLUE_CAR_PLATE));
1:e5c89d2:     }
7:2cfdf52: 
1:e74c870:     private void assertNoCoordination() {
1:e74c870:         Coordination coord = coordinator.peek();
1:e74c870:         Assert.assertNull("There should not be a coordination on this thread", coord);
1:e74c870:     }
1:e74c870:     
1:e74c870:     private void assertNoCars(CarService carService) {
1:e74c870:         Assert.assertEquals("Invalid number of cars", 0, carService.getCars().size());
1:e74c870:     }
1:e74c870: 
1:e5c89d2:     @Configuration
1:e5c89d2:     public Option[] configuration() {
1:e5c89d2:         return new Option[] {
1:e5c89d2:             baseOptions(), //
1:d5c184f:             jta12Bundles(), //
1:e5c89d2:             ariesJpa20(), //
1:e5c89d2:             hibernate(), //
1:e5c89d2:             derbyDSF(), //
1:0d59ccb:             testBundle(), //
1:e5c89d2:             testBundleBlueprint(),
1:e5c89d2:         // debug()
1:e5c89d2:         };
1:e5c89d2:     }
1:e5c89d2: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:37265e0
/////////////////////////////////////////////////////////////////////////
1:     public void testInlined() throws Exception {
1:         carRealTransactionalLifecycle(getCarService("emJtaAnnInlined"));
1:     }
1:     
1:     @Test
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
1:         List<Future<?>> futures = new ArrayList<Future<?>>();
commit:3033c4a
/////////////////////////////////////////////////////////////////////////
1:             Coordination coordination = coordinator.begin("testCoordination", 0);
1:                 coordination.end();
commit:901da3a
/////////////////////////////////////////////////////////////////////////
1:             carService.deleteCar(BLUE_CAR_PLATE);
1:             Assert.assertEquals(0, carService.getCars().size());
commit:ba3e6e6
/////////////////////////////////////////////////////////////////////////
0:                 coordinator.begin("testCoordination", 0);
0:                 coordinator.pop().end();
0:                 coordinator.begin("testCoordination", 0);
0:                 coordinator.pop().end();
commit:e74c870
/////////////////////////////////////////////////////////////////////////
1:         assertNoCoordination();
1:         assertNoCars(carService);
/////////////////////////////////////////////////////////////////////////
1:         CarService carService = getCarService("em");
1:         assertNoCars(carService);
1:         carLifeCycle.run();
/////////////////////////////////////////////////////////////////////////
1:         assertNoCars(carService);
/////////////////////////////////////////////////////////////////////////
1:         assertNoCoordination();
/////////////////////////////////////////////////////////////////////////
1:     private void assertNoCoordination() {
1:         Coordination coord = coordinator.peek();
1:         Assert.assertNull("There should not be a coordination on this thread", coord);
1:     }
1:     
1:     private void assertNoCars(CarService carService) {
1:         Assert.assertEquals("Invalid number of cars", 0, carService.getCars().size());
1:     }
1: 
commit:dbd9491
/////////////////////////////////////////////////////////////////////////
0:         Coordination coord = coordinator.peek();
0:         Assert.assertNull("There should not be a coordination on this thread", coord);
1:         if (carService.getCar(BLACK_CAR_PLATE) != null) {
1:             carService.deleteCar(BLUE_CAR_PLATE);
1:         }
commit:76a5356
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testEmf() throws Exception {
1:     public void testEm() throws Exception {
1:     public void testSupplier() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         carService.deleteCar(BLUE_CAR_PLATE);
commit:d5c184f
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.Future;
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1:     
0:     @Ignore
1:     @Test
1:     public void testEmJtaAnn() throws Exception {
1:         carLifecycle(getCarService("emJtaAnn"));
1:     }
/////////////////////////////////////////////////////////////////////////
1:     public void testCoordinationLifecycle() throws InterruptedException, ExecutionException {
0:         List<Future<?>> futures = new ArrayList<>();
1:             futures.add(exec.submit(carLifeCycle));
1:         for (Future<?> future : futures) {
1:             future.get();
1:         }
/////////////////////////////////////////////////////////////////////////
1:             jta12Bundles(), //
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import org.junit.Assert;
0: import org.osgi.framework.BundleException;
1: import org.osgi.service.coordinator.Coordination;
/////////////////////////////////////////////////////////////////////////
0:     public void deleteCars() throws BundleException {
0:         resolveBundles();
/////////////////////////////////////////////////////////////////////////
1:         for (int c=0; c<100; c++) {
1:             System.out.println(c);
0:             Coordination coord = null;
1:             try {
0:                 coord = coordinator.begin("testCoordination", 0);
1:                 carService.addCar(createBlueCar());
1:                 Collection<Car> cars = carService.getCars();
1:                 carService.updateCar(cars.iterator().next());
1:             } finally {
0:                 coord.end();
1:             }
0:             // TODO For some reason I need a second coordination here
1:             try {
0:                 coord = coordinator.begin("testCoordination", 0);
1:                 carService.deleteCar(BLUE_CAR_PLATE);
0:                 Assert.assertEquals(0, carService.getCars().size());
1:             } finally {
0:                 coord.end();
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
0:     public void testCoordinationLifecycle() throws InterruptedException {
1:         ExecutorService exec = Executors.newFixedThreadPool(20);
1:         for (int c=0; c<100; c++) {
0:             exec.execute(carLifeCycle);
1:         }
1:         exec.shutdown();
1:         exec.awaitTermination(30, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:             testBundle(), //
commit:98ca24c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jpa.itest.AbstractCarJPAITest;
1: public class BlueprintTest extends AbstractCarJPAITest {
commit:3c2556b
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
0:     public void testCoordinationLifecycle() {
1:         Runnable carLifeCycle = getService(Runnable.class, "(type=carCoordinated)");
0:         carLifeCycle.run();
1:     }
commit:badb034
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jpa.blueprint.aries.itest;
1: 
1: import java.util.Collection;
1: 
1: import javax.inject.Inject;
1: 
1: import org.apache.aries.jpa.container.itest.entities.Car;
1: import org.apache.aries.jpa.container.itest.entities.CarService;
0: import org.apache.aries.jpa.itest.AbstractJPAItest;
0: import org.junit.Before;
0: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.Option;
1: import org.osgi.service.coordinator.Coordinator;
1: 
0: public class BlueprintTest extends AbstractJPAItest {
1:     @Inject
1:     Coordinator coordinator;
1:     
0:     @Before
0:     public void deleteCars() {
0:         CarService carService = getCarService("emf");
0:         if (carService.getCar(BLUE_CAR_PLATE)!=null) {
0:             carService.deleteCar(BLUE_CAR_PLATE);
1:         }
1:     }
1: 
1:     @Test
0:     @Ignore
1:     public void testCoordination() {
1:         CarService carService = getCarService("em");
0:         coordinator.begin("jpa", 0);
1:         carService.addCar(createBlueCar());
0:         Collection<Car> cars = carService.getCars();
0:         carService.updateCar(cars.iterator().next());
0:         carService.deleteCar(BLUE_CAR_PLATE);
0:         coordinator.pop().end();
1:         
1:     }
1:     
1:     @Test
1:     public void testInjectToMethod() throws Exception {
1:         carLifecycle(getCarService("method"));
1:     }
1: 
1:     @Test
1:     public void testMultiAnnotation() throws Exception {
1:         carLifecycle(getCarService("multiannotation"));
1:     }
1: 
1:     @Test
0:     public void testEmfAddQuery() throws Exception {
1:         carLifecycle(getCarService("emf"));
1:     }
1: 
1:     @Test
0:     public void testEmAddQuery() throws Exception {
1:         carLifecycle(getCarService("em"));
1:     }
1: 
1:     @Test
0:     public void testSupplierAddQuery() throws Exception {
1:         carLifecycle(getCarService("supplier"));
1:     }
1: 
1:     private CarService getCarService(String type) {
1:         return getService(CarService.class, "(type=" + type + ")");
1:     }
1: 
1:     private void carLifecycle(CarService carService) {
1:         carService.addCar(createBlueCar());
1:         assertBlueCar(carService.getCar(BLUE_CAR_PLATE));
1:     }
1: 
1:     @Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(), //
1:             ariesJpa20(), //
1:             hibernate(), //
1:             derbyDSF(), //
1:             testBundleBlueprint(),
1:         // debug()
1:         };
1:     }
1: }
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
0: /*  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  */
0: package org.apache.aries.jpa.blueprint.aries.itest;
1: 
0: import javax.inject.Inject;
1: 
0: import org.apache.aries.jpa.itest.AbstractJPAItest;
0: import org.apache.aries.jpa.itest.testbundle.entities.Car;
0: import org.apache.aries.jpa.itest.testbundle.service.CarService;
0: import org.junit.Assert;
0: import org.junit.Test;
0: import org.ops4j.pax.exam.Configuration;
0: import org.ops4j.pax.exam.Option;
1: 
0: public class BlueprintTest extends AbstractJPAItest {
1:     @Inject
0:     CarService carService;
1: 
1:     @Test
0:     public void testAddQuery() throws Exception {
0:         resolveBundles();
0:         Car c = new Car();
0:         c.setColour("Blue");
0:         c.setNumberPlate("AB11CDE");
0:         c.setNumberOfSeats(7);
0:         c.setEngineSize(1900);
1: 
0:         carService.addCar(c);
1: 
0:         Car car2 = carService.getCar("AB11CDE");
0:         Assert.assertEquals(c.getNumberPlate(), car2.getNumberPlate());
0:     }
1: 
0:     @Configuration
0:     public Option[] configuration() {
0:         return new Option[] {
0:             baseOptions(), //
0:             ariesJpa20(), //
0:             hibernate(), //
0:             derbyDSF(), //
0:             testBundleBlueprint(),
0:             //debug()
0:         };
0:     }
0: }
author:Giuseppe Gerla
-------------------------------------------------------------------------------
commit:1cfde06
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.NotSupportedException;
1: import javax.transaction.SystemException;
1: import javax.transaction.UserTransaction;
/////////////////////////////////////////////////////////////////////////
0:     @Inject
1:     UserTransaction ut;
0:     
/////////////////////////////////////////////////////////////////////////
1:     public void testRealTransactional() throws Exception {
1:         carRealTransactionalLifecycle(getCarService("emJtaAnn"));
0:     }
0:     
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     
1:     private void carRealTransactionalLifecycle(CarService carService) throws IllegalStateException, SystemException, NotSupportedException {
1:         assertNoCoordination();
1:         if (carService.getCar(BLACK_CAR_PLATE) != null) {
0:             carService.deleteCar(BLUE_CAR_PLATE);
0:         }
1:         ut.begin();
0:         carService.addCar(createBlueCar());
1:         ut.rollback();
1:         Assert.assertNull(carService.getCar(BLUE_CAR_PLATE));
0:     }
commit:0b001f7
/////////////////////////////////////////////////////////////////////////
============================================================================