1:552587b: /*
1:552587b:  * Licensed under the Apache License, Version 2.0 (the "License");
1:552587b:  * you may not use this file except in compliance with the License.
1:552587b:  * You may obtain a copy of the License at
1:552587b:  *
1:552587b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:552587b:  *
1:552587b:  * Unless required by applicable law or agreed to in writing, software
1:552587b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:552587b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:552587b:  * See the License for the specific language governing permissions and
1:552587b:  * limitations under the License.
1:552587b:  */
1:d462023: package org.apache.aries.subsystem.core.internal;
1:d462023: 
1:d462023: import java.util.Collection;
1:d462023: import java.util.HashMap;
1:d462023: import java.util.Map;
1:d462023: import java.util.Set;
1:d462023: 
1:d462023: import org.eclipse.equinox.region.Region;
1:d462023: import org.eclipse.equinox.region.RegionDigraph;
1:d462023: import org.eclipse.equinox.region.RegionDigraph.FilteredRegion;
1:d462023: import org.eclipse.equinox.region.RegionFilter;
1:d462023: import org.eclipse.equinox.region.RegionFilterBuilder;
1:d462023: import org.osgi.framework.BundleException;
1:d462023: import org.osgi.framework.InvalidSyntaxException;
1:d462023: import org.osgi.framework.namespace.IdentityNamespace;
1:d462023: import org.osgi.namespace.service.ServiceNamespace;
1:d462023: import org.osgi.resource.Requirement;
1:d462023: 
1:d462023: public class RegionUpdater {
1:d462023: 	public static final int MAX_ATTEMPTS_DEFAULT = 10;
1:d462023: 	
1:d462023: 	private final RegionDigraph digraph;
1:d462023: 	private final Region head;
1:d462023: 	private final Region tail;
1:d462023: 	
1:d462023: 	public RegionUpdater(Region tail, Region head) {
1:d462023: 		if (head == null)
1:2aab796: 			throw new NullPointerException();
1:d462023: 		this.tail = tail;
1:d462023: 		this.head = head;
1:d462023: 		digraph = tail.getRegionDigraph();
1:d462023: 	}
1:d462023: 	
1:d462023: 	public void addRequirements(Collection<? extends Requirement> requirements) throws BundleException, InvalidSyntaxException {
1:d462023: 		for (int i = 0; i < MAX_ATTEMPTS_DEFAULT; i++) {
1:d462023: 			RegionDigraph copy = copyDigraph();
1:d462023: 			Region tail = copyTail(copy);
1:d462023: 			Region head = copyHead(copy);
1:d462023: 			Set<Long> bundleIds = copyBundleIds(tail);
1:d462023: 			Map<String, RegionFilterBuilder> heads = copyHeadRegions(tail, copy);
1:d462023: 			Map<String, RegionFilterBuilder> tails = copyTailRegions(tail, copy);
1:d462023: 			copy.removeRegion(tail);
1:d462023: 			tail = copy.createRegion(tail.getName());
1:d462023: 			addBundleIds(bundleIds, tail);
1:7b8119c: 			RegionFilterBuilder builder = heads.get(head.getName());
1:7b8119c: 			if (builder == null) {
1:7b8119c: 				// Something outside of the subsystems implementation has
1:7b8119c: 				// deleted the edge between the parent and child subsystems.
1:7c4fef4: 				// See ARIES-1429.
1:7c4fef4: 				throw new IllegalStateException(
1:7c4fef4: 						new StringBuilder(tail.getName())
1:7c4fef4: 								.append(" not connected to ")
1:7c4fef4: 								.append(head.getName())
1:7c4fef4: 								.toString());
1:7b8119c: 			}
1:a990e32: 			if (requirements == null) {
1:a990e32: 				heads.put(head.getName(), null);
1:a990e32: 			}
1:a990e32: 			else {
1:a990e32: 				addRequirements(requirements, builder);
1:a990e32: 			}
1:d462023: 			addHeadRegions(heads, tail, copy);
1:d462023: 			addTailRegions(tails, tail, copy);
1:d462023: 			// Replace the current digraph.
1:d462023: 			try {
1:d462023: 				digraph.replace(copy);
1:d462023: 			}
1:d462023: 			catch (BundleException e) {
1:d462023: 				// Something modified digraph since the copy was made.
1:d462023: 				if (i < MAX_ATTEMPTS_DEFAULT)
1:d462023: 					// There are more attempts to make.
1:d462023: 					continue;
1:d462023: 				// Number of attempts has been exhausted.
1:d462023: 				throw e;
1:d462023: 			}
1:d462023: 			// Success! No need to continue looping.
1:d462023: 			break;
1:d462023: 		}
1:d462023: 	}
1:d462023: 	
1:d462023: 	private void addBundleIds(Set<Long> ids, Region region) throws BundleException {
1:d462023: 		for (Long id : ids)
1:d462023: 			region.addBundle(id);
1:d462023: 	}
1:d462023: 	
1:d462023: 	private void addHeadRegions(Map<String, RegionFilterBuilder> heads, Region tail, RegionDigraph digraph) throws BundleException {
1:a990e32: 		for (Map.Entry<String, RegionFilterBuilder> entry : heads.entrySet()) {
1:a990e32: 			RegionFilterBuilder builder = entry.getValue();
1:a990e32: 			if (builder == null) {
1:a990e32: 				continue;
1:a990e32: 			}
1:a990e32: 			tail.connectRegion(digraph.getRegion(entry.getKey()), builder.build());
1:a990e32: 		}
1:d462023: 	}
1:d462023: 	
1:d462023: 	private void addTailRegions(Map<String, RegionFilterBuilder> tails, Region head, RegionDigraph digraph) throws BundleException {
1:d462023: 		for (Map.Entry<String, RegionFilterBuilder> entry : tails.entrySet())
1:d462023: 			digraph.getRegion(entry.getKey()).connectRegion(head, entry.getValue().build());
1:d462023: 	}
1:d462023: 	
1:d462023: 	private void addRequirements(Collection<? extends Requirement> requirements, RegionFilterBuilder builder) throws InvalidSyntaxException {
1:d462023: 		for (Requirement requirement : requirements) {
1:d462023: 			String namespace = requirement.getNamespace();
1:d462023: 			// The osgi.service namespace requires translation.
1:d462023: 			if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace))
1:d462023: 				namespace = RegionFilter.VISIBLE_SERVICE_NAMESPACE;
1:d462023: 			String filter = requirement.getDirectives().get(IdentityNamespace.REQUIREMENT_FILTER_DIRECTIVE);
1:d462023: 			// A null filter means import everything from that namespace.
1:d462023: 			if (filter == null)
1:d462023: 				builder.allowAll(namespace);
1:d462023: 			else
1:d462023: 				builder.allow(namespace, filter);
1:d462023: 		}
1:d462023: 	}
1:d462023: 	
1:d462023: 	private Set<Long> copyBundleIds(Region region) {
1:d462023: 		return region.getBundleIds();
1:d462023: 	}
1:d462023: 	
1:d462023: 	private RegionDigraph copyDigraph() throws BundleException {
1:d462023: 		return digraph.copy();
1:d462023: 	}
1:d462023: 	
1:d462023: 	private Region copyHead(RegionDigraph digraph) {
1:d462023: 		return digraph.getRegion(head.getName());
1:d462023: 	}
1:d462023: 	
1:d462023: 	private Map<String, RegionFilterBuilder> copyHeadRegions(Region tail, RegionDigraph digraph) throws InvalidSyntaxException {
1:d462023: 		Map<String, RegionFilterBuilder> result = new HashMap<String, RegionFilterBuilder>();
1:d462023: 		for (FilteredRegion edge : tail.getEdges())
1:d462023: 			result.put(edge.getRegion().getName(), createRegionFilterBuilder(edge.getFilter().getSharingPolicy(), digraph));
1:d462023: 		return result;
1:d462023: 	}
1:d462023: 	
1:d462023: 	private Region copyTail(RegionDigraph digraph) {
1:d462023: 		return digraph.getRegion(tail.getName());
1:d462023: 	}
1:d462023: 	
1:d462023: 	private Map<String, RegionFilterBuilder> copyTailRegions(Region tail, RegionDigraph digraph) throws InvalidSyntaxException {
1:d462023: 		Map<String, RegionFilterBuilder> result = new HashMap<String, RegionFilterBuilder>();
1:d462023: 		for (Region head : digraph.getRegions()) {
1:d462023: 			if (head.equals(tail))
1:d462023: 				continue;
1:d462023: 			for (FilteredRegion edge : head.getEdges())
1:d462023: 				if (edge.getRegion().equals(tail))
1:d462023: 					result.put(head.getName(), createRegionFilterBuilder(edge.getFilter().getSharingPolicy(), digraph));
1:d462023: 		}
1:d462023: 		return result;
1:d462023: 	}
1:d462023: 	
1:d462023: 	private RegionFilterBuilder createRegionFilterBuilder(Map<String, Collection<String>> sharingPolicy, RegionDigraph digraph) throws InvalidSyntaxException {
1:d462023: 		RegionFilterBuilder result = digraph.createRegionFilterBuilder();
1:d462023: 		for (Map.Entry<String, Collection<String>> entry : sharingPolicy.entrySet())
1:d462023: 			for (String filter : entry.getValue())
1:d462023: 				result.allow(entry.getKey(), filter);
1:d462023: 		return result;
1:d462023: 	}
1:d462023: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: 			if (requirements == null) {
1: 				heads.put(head.getName(), null);
1: 			}
1: 			else {
1: 				addRequirements(requirements, builder);
1: 			}
/////////////////////////////////////////////////////////////////////////
1: 		for (Map.Entry<String, RegionFilterBuilder> entry : heads.entrySet()) {
1: 			RegionFilterBuilder builder = entry.getValue();
1: 			if (builder == null) {
1: 				continue;
1: 			}
1: 			tail.connectRegion(digraph.getRegion(entry.getKey()), builder.build());
1: 		}
commit:2aab796
/////////////////////////////////////////////////////////////////////////
1: 			throw new NullPointerException();
commit:7c4fef4
/////////////////////////////////////////////////////////////////////////
1: 				// See ARIES-1429.
1: 				throw new IllegalStateException(
1: 						new StringBuilder(tail.getName())
1: 								.append(" not connected to ")
1: 								.append(head.getName())
1: 								.toString());
commit:7b8119c
/////////////////////////////////////////////////////////////////////////
1: 			RegionFilterBuilder builder = heads.get(head.getName());
1: 			if (builder == null) {
1: 				// Something outside of the subsystems implementation has
1: 				// deleted the edge between the parent and child subsystems.
0: 				// Assume the dynamic import sharing policy is being handled
0: 				// elsewhere. See ARIES-1429.
0: 				return;
1: 			}
0: 			addRequirements(requirements, builder);
commit:552587b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d462023
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.eclipse.equinox.region.Region;
1: import org.eclipse.equinox.region.RegionDigraph;
1: import org.eclipse.equinox.region.RegionDigraph.FilteredRegion;
1: import org.eclipse.equinox.region.RegionFilter;
1: import org.eclipse.equinox.region.RegionFilterBuilder;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.resource.Requirement;
1: 
1: public class RegionUpdater {
1: 	public static final int MAX_ATTEMPTS_DEFAULT = 10;
1: 	
1: 	private final RegionDigraph digraph;
1: 	private final Region head;
1: 	private final Region tail;
1: 	
1: 	public RegionUpdater(Region tail, Region head) {
0: 		if (tail == null)
0: 			throw new NullPointerException("Missing required parameter: tail");
1: 		if (head == null)
0: 			throw new NullPointerException("Missing required parameter: head");
1: 		this.tail = tail;
1: 		this.head = head;
1: 		digraph = tail.getRegionDigraph();
1: 	}
1: 	
1: 	public void addRequirements(Collection<? extends Requirement> requirements) throws BundleException, InvalidSyntaxException {
1: 		for (int i = 0; i < MAX_ATTEMPTS_DEFAULT; i++) {
1: 			RegionDigraph copy = copyDigraph();
1: 			Region tail = copyTail(copy);
1: 			Region head = copyHead(copy);
1: 			Set<Long> bundleIds = copyBundleIds(tail);
1: 			Map<String, RegionFilterBuilder> heads = copyHeadRegions(tail, copy);
1: 			Map<String, RegionFilterBuilder> tails = copyTailRegions(tail, copy);
1: 			copy.removeRegion(tail);
1: 			tail = copy.createRegion(tail.getName());
1: 			addBundleIds(bundleIds, tail);
0: 			addRequirements(requirements, heads.get(head.getName()));
1: 			addHeadRegions(heads, tail, copy);
1: 			addTailRegions(tails, tail, copy);
1: 			// Replace the current digraph.
1: 			try {
1: 				digraph.replace(copy);
1: 			}
1: 			catch (BundleException e) {
1: 				// Something modified digraph since the copy was made.
1: 				if (i < MAX_ATTEMPTS_DEFAULT)
1: 					// There are more attempts to make.
1: 					continue;
1: 				// Number of attempts has been exhausted.
1: 				throw e;
1: 			}
1: 			// Success! No need to continue looping.
1: 			break;
1: 		}
1: 	}
1: 	
1: 	private void addBundleIds(Set<Long> ids, Region region) throws BundleException {
1: 		for (Long id : ids)
1: 			region.addBundle(id);
1: 	}
1: 	
1: 	private void addHeadRegions(Map<String, RegionFilterBuilder> heads, Region tail, RegionDigraph digraph) throws BundleException {
0: 		for (Map.Entry<String, RegionFilterBuilder> entry : heads.entrySet())
0: 			tail.connectRegion(digraph.getRegion(entry.getKey()), entry.getValue().build());
1: 	}
1: 	
1: 	private void addTailRegions(Map<String, RegionFilterBuilder> tails, Region head, RegionDigraph digraph) throws BundleException {
1: 		for (Map.Entry<String, RegionFilterBuilder> entry : tails.entrySet())
1: 			digraph.getRegion(entry.getKey()).connectRegion(head, entry.getValue().build());
1: 	}
1: 	
1: 	private void addRequirements(Collection<? extends Requirement> requirements, RegionFilterBuilder builder) throws InvalidSyntaxException {
1: 		for (Requirement requirement : requirements) {
1: 			String namespace = requirement.getNamespace();
1: 			// The osgi.service namespace requires translation.
1: 			if (ServiceNamespace.SERVICE_NAMESPACE.equals(namespace))
1: 				namespace = RegionFilter.VISIBLE_SERVICE_NAMESPACE;
1: 			String filter = requirement.getDirectives().get(IdentityNamespace.REQUIREMENT_FILTER_DIRECTIVE);
1: 			// A null filter means import everything from that namespace.
1: 			if (filter == null)
1: 				builder.allowAll(namespace);
1: 			else
1: 				builder.allow(namespace, filter);
1: 		}
1: 	}
1: 	
1: 	private Set<Long> copyBundleIds(Region region) {
1: 		return region.getBundleIds();
1: 	}
1: 	
1: 	private RegionDigraph copyDigraph() throws BundleException {
1: 		return digraph.copy();
1: 	}
1: 	
1: 	private Region copyHead(RegionDigraph digraph) {
1: 		return digraph.getRegion(head.getName());
1: 	}
1: 	
1: 	private Map<String, RegionFilterBuilder> copyHeadRegions(Region tail, RegionDigraph digraph) throws InvalidSyntaxException {
1: 		Map<String, RegionFilterBuilder> result = new HashMap<String, RegionFilterBuilder>();
1: 		for (FilteredRegion edge : tail.getEdges())
1: 			result.put(edge.getRegion().getName(), createRegionFilterBuilder(edge.getFilter().getSharingPolicy(), digraph));
1: 		return result;
1: 	}
1: 	
1: 	private Region copyTail(RegionDigraph digraph) {
1: 		return digraph.getRegion(tail.getName());
1: 	}
1: 	
1: 	private Map<String, RegionFilterBuilder> copyTailRegions(Region tail, RegionDigraph digraph) throws InvalidSyntaxException {
1: 		Map<String, RegionFilterBuilder> result = new HashMap<String, RegionFilterBuilder>();
1: 		for (Region head : digraph.getRegions()) {
1: 			if (head.equals(tail))
1: 				continue;
1: 			for (FilteredRegion edge : head.getEdges())
1: 				if (edge.getRegion().equals(tail))
1: 					result.put(head.getName(), createRegionFilterBuilder(edge.getFilter().getSharingPolicy(), digraph));
1: 		}
1: 		return result;
1: 	}
1: 	
1: 	private RegionFilterBuilder createRegionFilterBuilder(Map<String, Collection<String>> sharingPolicy, RegionDigraph digraph) throws InvalidSyntaxException {
1: 		RegionFilterBuilder result = digraph.createRegionFilterBuilder();
1: 		for (Map.Entry<String, Collection<String>> entry : sharingPolicy.entrySet())
1: 			for (String filter : entry.getValue())
1: 				result.allow(entry.getKey(), filter);
1: 		return result;
1: 	}
1: }
============================================================================