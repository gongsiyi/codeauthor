1:a87106f: /**
1:a87106f:  * Licensed to the Apache Software Foundation (ASF) under one
1:a87106f:  * or more contributor license agreements.  See the NOTICE file
1:a87106f:  * distributed with this work for additional information
1:a87106f:  * regarding copyright ownership.  The ASF licenses this file
1:a87106f:  * to you under the Apache License, Version 2.0 (the
1:a87106f:  * "License"); you may not use this file except in compliance
1:a87106f:  * with the License.  You may obtain a copy of the License at
1:a87106f:  *
1:a87106f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a87106f:  *
1:a87106f:  * Unless required by applicable law or agreed to in writing,
1:a87106f:  * software distributed under the License is distributed on an
1:a87106f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a87106f:  * KIND, either express or implied.  See the License for the
1:a87106f:  * specific language governing permissions and limitations
1:a87106f:  * under the License.
1:a87106f:  */
1:3595044: package org.apache.aries.spifly;
2:3595044: 
1:3595044: import java.util.List;
1:3595044: 
1:a87106f: import junit.framework.TestCase;
1:a87106f: 
1:a87106f: import org.junit.Test;
1:a87106f: 
1:3595044: public class HeaderParserTest extends TestCase {
1:3595044: 
1:3595044:     @Test
1:3595044:     public void testMethodWithMultipleParameters() {
1:3595044: 
1:3595044:         String header = "javax.ws.rs.client.FactoryFinder#find(java.lang.String," +
1:3595044:                 "java.lang.String),javax.ws.rs.ext.FactoryFinder#find(java.lang.String,java" +
1:3595044:                 ".lang.String) ,javax.ws.rs.other.FactoryFinder#find(java.lang.String,java" +
1:3595044:                 ".lang.String)";
1:3595044: 
1:3595044:         List<HeaderParser.PathElement> pathElements = HeaderParser.parseHeader(header);
1:3595044:         assertEquals(3, pathElements.size());
1:3595044:         assertEquals(pathElements.get(0).getName(), "javax.ws.rs.client.FactoryFinder#find(java.lang.String,java.lang.String)");
1:3595044:         assertEquals(pathElements.get(1).getName(), "javax.ws.rs.ext.FactoryFinder#find(java.lang.String,java.lang.String)");
1:3595044:         assertEquals(pathElements.get(2).getName(), "javax.ws.rs.other.FactoryFinder#find(java.lang.String,java.lang.String)");
1:3595044:     }
1:3595044: 
1:3595044: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:a87106f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: import junit.framework.TestCase;
1: 
1: import org.junit.Test;
1: 
commit:3595044
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.spifly;
1: 
0: import junit.framework.TestCase;
0: import org.junit.Test;
1: 
1: import java.util.List;
1: 
1: public class HeaderParserTest extends TestCase {
1: 
1:     @Test
1:     public void testMethodWithMultipleParameters() {
1: 
1:         String header = "javax.ws.rs.client.FactoryFinder#find(java.lang.String," +
1:                 "java.lang.String),javax.ws.rs.ext.FactoryFinder#find(java.lang.String,java" +
1:                 ".lang.String) ,javax.ws.rs.other.FactoryFinder#find(java.lang.String,java" +
1:                 ".lang.String)";
1: 
1:         List<HeaderParser.PathElement> pathElements = HeaderParser.parseHeader(header);
1:         assertEquals(3, pathElements.size());
1:         assertEquals(pathElements.get(0).getName(), "javax.ws.rs.client.FactoryFinder#find(java.lang.String,java.lang.String)");
1:         assertEquals(pathElements.get(1).getName(), "javax.ws.rs.ext.FactoryFinder#find(java.lang.String,java.lang.String)");
1:         assertEquals(pathElements.get(2).getName(), "javax.ws.rs.other.FactoryFinder#find(java.lang.String,java.lang.String)");
1:     }
1: 
1: }
============================================================================