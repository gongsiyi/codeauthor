1:a0df2a3: /**
1:a0df2a3:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:a0df2a3:  *  contributor license agreements.  See the NOTICE file distributed with
1:a0df2a3:  *  this work for additional information regarding copyright ownership.
1:a0df2a3:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:a0df2a3:  *  (the "License"); you may not use this file except in compliance with
1:a0df2a3:  *  the License.  You may obtain a copy of the License at
1:a0df2a3:  *
1:a0df2a3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a0df2a3:  *
1:a0df2a3:  *  Unless required by applicable law or agreed to in writing, software
1:a0df2a3:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:a0df2a3:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0df2a3:  *  See the License for the specific language governing permissions and
1:a0df2a3:  *  limitations under the License.
1:a0df2a3:  */
1:a0df2a3: package org.apache.aries.jmx.framework;
1:a0df2a3: 
1:a0df2a3: import org.osgi.framework.BundleContext;
1:a0df2a3: import org.osgi.service.cm.ConfigurationException;
1:a0df2a3: import org.osgi.service.cm.ManagedService;
1:a0df2a3: 
1:a0df2a3: import java.io.IOException;
1:a0df2a3: import java.util.Dictionary;
1:a0df2a3: import java.util.Hashtable;
1:a0df2a3: 
1:a0df2a3: /**
1:a0df2a3:  * Configuration for {@link BundleState} and {@link ServiceState}.
1:a0df2a3:  *
1:a0df2a3:  * @version $Rev$ $Date$
1:a0df2a3:  */
1:a0df2a3: public class StateConfig implements ManagedService {
1:a0df2a3: 
1:a0df2a3:     private static final String PID = StateConfig.class.getName();
1:a0df2a3: 
1:a0df2a3:     private static final String ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED = "attributeChangeNotificationEnabled";
1:a0df2a3:     private static final boolean DEFAULT_ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED = true;
1:a0df2a3: 
1:1570712:     private static final String SERVICE_CHANGE_NOTIFICATION_ENABLED = "serviceChangeNotificationEnabled";
1:1570712:     private static final boolean DEFAULT_SERVICE_CHANGE_NOTIFICATION_ENABLED = true;
1:a0df2a3: 
1:1570712:     private static final String BUNDLE_CHANGE_NOTIFICATION_ENABLED = "bundleChangeNotificationEnabled";
1:1570712:     private static final boolean DEFAULT_BUNDLE_CHANGE_NOTIFICATION_ENABLED = true;
1:1570712: 
1:1570712:     private volatile boolean attributeChangeNotificationEnabled = DEFAULT_ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED;
1:1570712:     private volatile boolean serviceChangeNotificationEnabled = DEFAULT_SERVICE_CHANGE_NOTIFICATION_ENABLED;
1:1570712:     private volatile boolean bundleChangeNotificationEnabled = DEFAULT_BUNDLE_CHANGE_NOTIFICATION_ENABLED;
1:1570712: 
1:1570712:     void setAttributeChangeNotificationEnabled(boolean attributeChangeNotificationEnabled) {
1:1570712:         this.attributeChangeNotificationEnabled = attributeChangeNotificationEnabled;
1:a0df2a3:     }
1:a0df2a3: 
1:1570712:     void setServiceChangeNotificationEnabled(boolean serviceChangeNotificationEnabled) {
1:1570712:         this.serviceChangeNotificationEnabled = serviceChangeNotificationEnabled;
1:1570712:     }
1:1570712: 
1:1570712:     void setBundleChangeNotificationEnabled(boolean bundleChangeNotificationEnabled) {
1:1570712:         this.bundleChangeNotificationEnabled = bundleChangeNotificationEnabled;
1:a0df2a3:     }
1:a0df2a3: 
1:a0df2a3:     /**
1:a0df2a3:      * Registers this service and returns an instance.
1:a0df2a3:      *
1:a0df2a3:      * @param context the bundle context
1:a0df2a3:      * @return the service instance
1:a0df2a3:      * @throws IOException
1:a0df2a3:      */
1:a0df2a3:     public static StateConfig register(BundleContext context) throws IOException {
1:a0df2a3:         Dictionary<String, Object> serviceProps = new Hashtable<String, Object>();
1:a0df2a3:         serviceProps.put("service.pid", PID);
1:a0df2a3: 
1:a0df2a3:         StateConfig stateConfig = new StateConfig();
1:a0df2a3:         context.registerService(ManagedService.class, stateConfig, serviceProps);
1:a0df2a3:         return stateConfig;
1:a0df2a3:     }
1:a0df2a3: 
1:a0df2a3:     @Override
1:a0df2a3:     public void updated(Dictionary<String, ?> dictionary) throws ConfigurationException {
1:a0df2a3:         attributeChangeNotificationEnabled = getBoolean(dictionary, ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED,
1:a0df2a3:                 DEFAULT_ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED);
1:1570712:         serviceChangeNotificationEnabled = getBoolean(dictionary, SERVICE_CHANGE_NOTIFICATION_ENABLED,
1:1570712:                 DEFAULT_SERVICE_CHANGE_NOTIFICATION_ENABLED);
1:1570712:         bundleChangeNotificationEnabled = getBoolean(dictionary, BUNDLE_CHANGE_NOTIFICATION_ENABLED,
1:1570712:                 DEFAULT_BUNDLE_CHANGE_NOTIFICATION_ENABLED);
1:a0df2a3:     }
1:a0df2a3: 
1:a0df2a3:     /**
1:a0df2a3:      * Whether or not JMX attribute change notifications should be triggered when attributes change.
1:a0df2a3:      *
1:a0df2a3:      * @return <code>true</code> if attribute change notifications are enabled
1:a0df2a3:      */
1:a0df2a3:     public boolean isAttributeChangeNotificationEnabled() {
1:a0df2a3:         return attributeChangeNotificationEnabled;
1:a0df2a3:     }
1:a0df2a3: 
1:1570712:     /**
1:1570712:      * Whether or not JMX OSGi service change notifications should be triggered when OSGi service change.
1:1570712:      *
1:1570712:      * @return <code>true</code> if OSGi service change notifications are enabled
1:1570712:      */
1:1570712:     public boolean isServiceChangeNotificationEnabled() {
1:1570712:         return serviceChangeNotificationEnabled;
1:1570712:     }
1:1570712: 
1:1570712:     /**
1:1570712:      * Whether or not JMX bundle change notifications should be triggered when bundle change.
1:1570712:      *
1:1570712:      * @return <code>true</code> if bundle change notifications are enabled
1:1570712:      */
1:1570712:     public boolean isBundleChangeNotificationEnabled() {
1:1570712:         return bundleChangeNotificationEnabled;
1:1570712:     }
1:1570712: 
1:a0df2a3:     private static boolean getBoolean(Dictionary<String, ?> dictionary, String propertyName, boolean defaultValue) {
1:a0df2a3:         Object object = (dictionary != null) ? dictionary.get(propertyName) : null;
1:a0df2a3:         if (object == null) {
1:a0df2a3:             return defaultValue;
1:a0df2a3:         } else if (object instanceof Boolean) {
1:a0df2a3:             return (Boolean) object;
1:a0df2a3:         } else {
1:a0df2a3:             String string = object.toString();
1:a0df2a3:             return !string.isEmpty() ? Boolean.parseBoolean(string) : defaultValue;
1:a0df2a3:         }
1:a0df2a3:     }
1:a0df2a3: 
1:a0df2a3: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:72719d5
/////////////////////////////////////////////////////////////////////////
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1570712
/////////////////////////////////////////////////////////////////////////
1:     private static final String SERVICE_CHANGE_NOTIFICATION_ENABLED = "serviceChangeNotificationEnabled";
1:     private static final boolean DEFAULT_SERVICE_CHANGE_NOTIFICATION_ENABLED = true;
1:     private static final String BUNDLE_CHANGE_NOTIFICATION_ENABLED = "bundleChangeNotificationEnabled";
1:     private static final boolean DEFAULT_BUNDLE_CHANGE_NOTIFICATION_ENABLED = true;
1: 
1:     private volatile boolean attributeChangeNotificationEnabled = DEFAULT_ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED;
1:     private volatile boolean serviceChangeNotificationEnabled = DEFAULT_SERVICE_CHANGE_NOTIFICATION_ENABLED;
1:     private volatile boolean bundleChangeNotificationEnabled = DEFAULT_BUNDLE_CHANGE_NOTIFICATION_ENABLED;
1: 
1:     void setAttributeChangeNotificationEnabled(boolean attributeChangeNotificationEnabled) {
1:         this.attributeChangeNotificationEnabled = attributeChangeNotificationEnabled;
1:     void setServiceChangeNotificationEnabled(boolean serviceChangeNotificationEnabled) {
1:         this.serviceChangeNotificationEnabled = serviceChangeNotificationEnabled;
1:     }
1: 
1:     void setBundleChangeNotificationEnabled(boolean bundleChangeNotificationEnabled) {
1:         this.bundleChangeNotificationEnabled = bundleChangeNotificationEnabled;
/////////////////////////////////////////////////////////////////////////
1:         serviceChangeNotificationEnabled = getBoolean(dictionary, SERVICE_CHANGE_NOTIFICATION_ENABLED,
1:                 DEFAULT_SERVICE_CHANGE_NOTIFICATION_ENABLED);
1:         bundleChangeNotificationEnabled = getBoolean(dictionary, BUNDLE_CHANGE_NOTIFICATION_ENABLED,
1:                 DEFAULT_BUNDLE_CHANGE_NOTIFICATION_ENABLED);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Whether or not JMX OSGi service change notifications should be triggered when OSGi service change.
1:      *
1:      * @return <code>true</code> if OSGi service change notifications are enabled
1:      */
1:     public boolean isServiceChangeNotificationEnabled() {
1:         return serviceChangeNotificationEnabled;
1:     }
1: 
1:     /**
1:      * Whether or not JMX bundle change notifications should be triggered when bundle change.
1:      *
1:      * @return <code>true</code> if bundle change notifications are enabled
1:      */
1:     public boolean isBundleChangeNotificationEnabled() {
1:         return bundleChangeNotificationEnabled;
1:     }
1: 
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:a0df2a3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceReference;
0: import org.osgi.service.cm.Configuration;
0: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedService;
1: 
1: import java.io.IOException;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: /**
1:  * Configuration for {@link BundleState} and {@link ServiceState}.
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class StateConfig implements ManagedService {
1: 
1:     private static final String PID = StateConfig.class.getName();
1: 
1:     private static final String ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED = "attributeChangeNotificationEnabled";
1:     private static final boolean DEFAULT_ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED = true;
1: 
0:     private boolean attributeChangeNotificationEnabled;
1: 
0:     public StateConfig() {
0:         this(DEFAULT_ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED);
1:     }
1: 
0:     StateConfig(boolean attributeChangeNotificationEnabled) {
0:         this.attributeChangeNotificationEnabled = attributeChangeNotificationEnabled;
1:     }
1: 
1:     /**
1:      * Registers this service and returns an instance.
1:      *
1:      * @param context the bundle context
1:      * @return the service instance
1:      * @throws IOException
1:      */
1:     public static StateConfig register(BundleContext context) throws IOException {
1:         Dictionary<String, Object> serviceProps = new Hashtable<String, Object>();
1:         serviceProps.put("service.pid", PID);
1: 
1:         StateConfig stateConfig = new StateConfig();
1:         context.registerService(ManagedService.class, stateConfig, serviceProps);
1:         return stateConfig;
1:     }
1: 
1:     @Override
1:     public void updated(Dictionary<String, ?> dictionary) throws ConfigurationException {
1:         attributeChangeNotificationEnabled = getBoolean(dictionary, ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED,
1:                 DEFAULT_ATTRIBUTE_CHANGE_NOTIFICATION_ENABLED);
1:     }
1: 
1:     /**
1:      * Whether or not JMX attribute change notifications should be triggered when attributes change.
1:      *
1:      * @return <code>true</code> if attribute change notifications are enabled
1:      */
1:     public boolean isAttributeChangeNotificationEnabled() {
1:         return attributeChangeNotificationEnabled;
1:     }
1: 
1:     private static boolean getBoolean(Dictionary<String, ?> dictionary, String propertyName, boolean defaultValue) {
1:         Object object = (dictionary != null) ? dictionary.get(propertyName) : null;
1:         if (object == null) {
1:             return defaultValue;
1:         } else if (object instanceof Boolean) {
1:             return (Boolean) object;
1:         } else {
1:             String string = object.toString();
1:             return !string.isEmpty() ? Boolean.parseBoolean(string) : defaultValue;
1:         }
1:     }
1: 
1: }
============================================================================