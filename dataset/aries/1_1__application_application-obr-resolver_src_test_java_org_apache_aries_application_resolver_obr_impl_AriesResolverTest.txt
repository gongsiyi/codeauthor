1:792f3de: /*
1:792f3de:  * Licensed to the Apache Software Foundation (ASF) under one
1:792f3de:  * or more contributor license agreements.  See the NOTICE file
1:792f3de:  * distributed with this work for additional information
1:792f3de:  * regarding copyright ownership.  The ASF licenses this file
1:792f3de:  * to you under the Apache License, Version 2.0 (the
1:792f3de:  * "License"); you may not use this file except in compliance
1:792f3de:  * with the License.  You may obtain a copy of the License at
1:792f3de:  *
1:792f3de:  *   http://www.apache.org/licenses/LICENSE-2.0
1:792f3de:  *
1:792f3de:  * Unless required by applicable law or agreed to in writing,
1:792f3de:  * software distributed under the License is distributed on an
1:792f3de:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:792f3de:  * KIND, either express or implied.  See the License for the
1:792f3de:  * specific language governing permissions and limitations
1:792f3de:  * under the License.
1:792f3de:  */
1:792f3de: package org.apache.aries.application.resolver.obr.impl;
1:792f3de: 
1:792f3de: 
1:792f3de: import static junit.framework.Assert.assertEquals;
1:792f3de: 
1:792f3de: import java.util.ArrayList;
1:792f3de: import java.util.HashMap;
1:792f3de: import java.util.List;
1:792f3de: import java.util.Map;
1:792f3de: 
1:792f3de: import org.apache.aries.application.resolver.obr.OBRAriesResolver;
1:792f3de: import org.apache.aries.unittest.mocks.Skeleton;
1:792f3de: import org.apache.felix.bundlerepository.Capability;
1:792f3de: import org.apache.felix.bundlerepository.Reason;
1:792f3de: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:792f3de: import org.apache.felix.bundlerepository.Requirement;
1:792f3de: import org.apache.felix.bundlerepository.Resolver;
1:792f3de: import org.apache.felix.bundlerepository.Resource;
1:792f3de: import org.junit.Before;
1:792f3de: import org.junit.Test;
1:792f3de: import org.osgi.framework.Version;
1:792f3de: 
1:792f3de: 
1:792f3de: public class AriesResolverTest extends OBRAriesResolver
1:792f3de: {
1:792f3de:   Resolver resolver;
1:792f3de:   ResolverMock resolverMock;
1:792f3de:   
1:792f3de:   
1:792f3de:   public AriesResolverTest() {
1:792f3de:     super(Skeleton.newMock(RepositoryAdmin.class));
1:792f3de:   }
1:792f3de:   static class ResolverMock {
1:792f3de:     private final List<Resource> resources = new ArrayList<Resource>();
1:792f3de:     private final Map<String, List<Requirement>> requirements = new HashMap<String, List<Requirement>>();
1:792f3de:     private String curRes;
1:792f3de:     private ResourceMock curResMock;
1:792f3de:     private RequirementMock curReqMock;
1:792f3de:     
1:792f3de:     public Reason[] getReason(Resource r)
1:792f3de:     {
1:792f3de:       Requirement[] reqs = requirements.get(r.getSymbolicName() + "_" + r.getVersion()).toArray(new Requirement[0]);
1:792f3de:       
1:792f3de:       Reason[] reasons = new Reason[reqs.length];
1:792f3de:       int i=0;
1:792f3de:       for (Requirement req : reqs) {
1:792f3de:         
1:792f3de:         reasons[i++] = new ReasonMock(r, req);
1:792f3de:       }
1:792f3de:       return reasons;
1:792f3de:     }
1:792f3de:     
1:792f3de:     public Resource[] getRequiredResources()
1:792f3de:     {
1:792f3de:       return resources.toArray(new Resource[0]);
1:792f3de:     }
1:792f3de:     
1:792f3de:     public ResolverMock res(String name, String version)
1:792f3de:     {
1:792f3de:       curRes = name + "_" + version;
1:792f3de:       curResMock = new ResourceMock(name,version);
1:792f3de:       resources.add(Skeleton.newMock(curResMock, Resource.class));
1:792f3de:       requirements.put(curRes, new ArrayList<Requirement>());
1:792f3de:       return this;
1:792f3de:     }
1:792f3de:     
1:792f3de:     public ResolverMock optional() 
1:792f3de:     {
1:792f3de:       curReqMock.optional = true;
1:792f3de:       return this;
1:792f3de:     }
1:792f3de:     
1:792f3de:     public ResolverMock req(String name)
1:792f3de:     {
1:792f3de:       // requirements are based on String, so that we have valid equals and hashCode implementations
1:792f3de:       curReqMock = new RequirementMock(name);
1:792f3de:       requirements.get(curRes).add(Skeleton.newMock(curReqMock, Requirement.class));
1:792f3de:       curResMock.addCapability(name);
1:792f3de:       return this;
1:792f3de:     }
1:792f3de:   }
1:792f3de:   
1:792f3de:   static class CapabilityMock {
1:792f3de:     private final String cap;
1:792f3de:     
1:792f3de:     CapabilityMock(String cap) {
1:792f3de:       this.cap = cap;
1:792f3de:     }
1:792f3de:     
1:792f3de:     @Override
1:792f3de:     public String toString() {
1:792f3de:       return cap;
1:792f3de:     }
1:792f3de:   }
1:792f3de:   
1:792f3de:   static class RequirementMock {
1:792f3de:     private final String req;
1:792f3de:     public boolean optional = false;
1:792f3de:     
1:792f3de:     RequirementMock(String req) {
1:792f3de:       this.req = req;
1:792f3de:     }
1:792f3de:     
1:792f3de:     public boolean isSatisfied(Capability c) {
1:792f3de:       return c.toString().equals(req);
1:792f3de:     }
1:792f3de:     
1:792f3de:     public boolean isOptional() {
1:792f3de:       return optional;
1:792f3de:     }
1:792f3de:   }
1:792f3de:   static class ReasonMock implements Reason{
1:792f3de:     private final Resource res;
1:792f3de:     private final Requirement req;
1:792f3de:     ReasonMock (Resource res, Requirement req) {
1:792f3de:       this.res = res;
1:792f3de:       this.req = req;
1:792f3de:     }
1:792f3de:     
1:792f3de:     public Resource getResource() {
1:792f3de:       return this.res;
1:792f3de:     }
1:792f3de:     public Requirement getRequirement()
1:792f3de:     {
1:792f3de:       return this.req;
1:792f3de:     }
1:792f3de:   }
1:792f3de:   static class ResourceMock {
1:792f3de:     private final String name;
1:792f3de:     private final Version version;
1:792f3de:     private final List<Capability> capabilities;
1:792f3de:     
1:792f3de:     ResourceMock(String name, String version) { 
1:792f3de:       this.name = name; 
1:792f3de:       this.version = new Version(version); 
1:792f3de:       capabilities = new ArrayList<Capability>();
1:792f3de:     }
1:792f3de:     
1:792f3de:     public void addCapability(String cap) {
1:792f3de:       capabilities.add(Skeleton.newMock(new CapabilityMock(cap), Capability.class));
1:792f3de:     }
1:792f3de:     
1:792f3de:     public Capability[] getCapabilities() {
1:792f3de:       return capabilities.toArray(new Capability[0]);
1:792f3de:     }
1:792f3de:     
1:792f3de:     public Version getVersion() { return version; }
1:792f3de:     public String getSymbolicName() { return name; }
1:792f3de:   }
1:792f3de:   
1:792f3de:   @Before
1:792f3de:   public void before()
1:792f3de:   {
1:792f3de:     resolverMock = new ResolverMock();
1:792f3de:     resolver = Skeleton.newMock(resolverMock, Resolver.class);
1:792f3de:   }
1:792f3de:   
1:792f3de:   @Test
1:792f3de:   public void testIncompatible()
1:792f3de:   {
1:792f3de:     resolverMock
1:792f3de:       .res("com.ibm.test", "0.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b")
1:792f3de:       .res("com.ibm.test", "1.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("c");
1:792f3de:     
1:792f3de:     List<Resource> res = retrieveRequiredResources(resolver);
1:792f3de:     assertEquals(2, res.size());
1:792f3de:     assertResource(res.get(0), "com.ibm.test", "0.0.0");
1:792f3de:     assertResource(res.get(1), "com.ibm.test", "1.0.0");
1:792f3de:   }
1:792f3de:   
1:792f3de:   @Test 
1:792f3de:   public void testLeftRedundant()
1:792f3de:   {
1:792f3de:     resolverMock
1:792f3de:       .res("com.ibm.test", "0.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b")
1:792f3de:       .res("com.ibm.test", "1.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b")
1:792f3de:         .req("c");
1:792f3de: 
1:792f3de:     List<Resource> res = retrieveRequiredResources(resolver);
1:792f3de:     assertEquals(1, res.size());
1:792f3de:     assertResource(res.get(0), "com.ibm.test", "1.0.0");
1:792f3de:   }
1:792f3de:   
1:792f3de:   @Test
1:792f3de:   public void testRightRedundant()
1:792f3de:   {
1:792f3de:     resolverMock
1:792f3de:       .res("com.ibm.test", "0.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b")
1:792f3de:         .req("c")
1:792f3de:       .res("com.ibm.test", "1.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("c");
1:792f3de: 
1:792f3de:     List<Resource> res = retrieveRequiredResources(resolver);
1:792f3de:     assertEquals(1, res.size());
1:792f3de:     assertResource(res.get(0), "com.ibm.test", "0.0.0");
1:792f3de:   }
1:792f3de:   
1:792f3de:   @Test
1:792f3de:   public void testEquivalent()
1:792f3de:   {
1:792f3de:     resolverMock
1:792f3de:       .res("com.ibm.test", "0.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b")
1:792f3de:       .res("com.ibm.test", "2.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b")
1:792f3de:       .res("com.ibm.test", "1.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b");
1:792f3de:   
1:792f3de:     List<Resource> res = retrieveRequiredResources(resolver);
1:792f3de:     assertEquals(1, res.size());
1:792f3de:     assertResource(res.get(0), "com.ibm.test", "2.0.0");
1:792f3de:   }
1:792f3de:   
1:792f3de:   @Test
1:792f3de:   public void testEquivalentWithOptionals()
1:792f3de:   {
1:792f3de:     // 1.1.0 and 1.0.0 are incompatible if we leave aside that "c" is optional. 
1:792f3de:     // "bundle" is the downgrade dependency on 1.0.0, "c" is the optional service requirement for the CommentService
1:792f3de:     resolverMock
1:792f3de:       .res("com.ibm.test", "1.0.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b")
1:792f3de:         .req("bundle")
1:792f3de:       .res("com.ibm.test", "1.1.0")
1:792f3de:         .req("a")
1:792f3de:         .req("b")
1:792f3de:         .req("c").optional();
1:792f3de:     
1:792f3de:     List<Resource> res = retrieveRequiredResources(resolver);
1:792f3de:     assertEquals(1, res.size());
1:792f3de:     assertResource(res.get(0), "com.ibm.test", "1.0.0");    
1:792f3de:   }
1:792f3de:   
1:792f3de:   private void assertResource(Resource r, String name, String version)
1:792f3de:   {
1:792f3de:     assertEquals(name, r.getSymbolicName());
1:792f3de:     assertEquals(version, r.getVersion().toString());
1:792f3de:   }
1:792f3de: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:792f3de
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.resolver.obr.impl;
1: 
1: 
1: import static junit.framework.Assert.assertEquals;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.resolver.obr.OBRAriesResolver;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Reason;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.apache.felix.bundlerepository.Resolver;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Version;
1: 
1: 
1: public class AriesResolverTest extends OBRAriesResolver
1: {
1:   Resolver resolver;
1:   ResolverMock resolverMock;
1:   
1:   
1:   public AriesResolverTest() {
1:     super(Skeleton.newMock(RepositoryAdmin.class));
1:   }
1:   static class ResolverMock {
1:     private final List<Resource> resources = new ArrayList<Resource>();
1:     private final Map<String, List<Requirement>> requirements = new HashMap<String, List<Requirement>>();
1:     private String curRes;
1:     private ResourceMock curResMock;
1:     private RequirementMock curReqMock;
1:     
1:     public Reason[] getReason(Resource r)
1:     {
1:       Requirement[] reqs = requirements.get(r.getSymbolicName() + "_" + r.getVersion()).toArray(new Requirement[0]);
1:       
1:       Reason[] reasons = new Reason[reqs.length];
1:       int i=0;
1:       for (Requirement req : reqs) {
1:         
1:         reasons[i++] = new ReasonMock(r, req);
1:       }
1:       return reasons;
1:     }
1:     
1:     public Resource[] getRequiredResources()
1:     {
1:       return resources.toArray(new Resource[0]);
1:     }
1:     
1:     public ResolverMock res(String name, String version)
1:     {
1:       curRes = name + "_" + version;
1:       curResMock = new ResourceMock(name,version);
1:       resources.add(Skeleton.newMock(curResMock, Resource.class));
1:       requirements.put(curRes, new ArrayList<Requirement>());
1:       return this;
1:     }
1:     
1:     public ResolverMock optional() 
1:     {
1:       curReqMock.optional = true;
1:       return this;
1:     }
1:     
1:     public ResolverMock req(String name)
1:     {
1:       // requirements are based on String, so that we have valid equals and hashCode implementations
1:       curReqMock = new RequirementMock(name);
1:       requirements.get(curRes).add(Skeleton.newMock(curReqMock, Requirement.class));
1:       curResMock.addCapability(name);
1:       return this;
1:     }
1:   }
1:   
1:   static class CapabilityMock {
1:     private final String cap;
1:     
1:     CapabilityMock(String cap) {
1:       this.cap = cap;
1:     }
1:     
1:     @Override
1:     public String toString() {
1:       return cap;
1:     }
1:   }
1:   
1:   static class RequirementMock {
1:     private final String req;
1:     public boolean optional = false;
1:     
1:     RequirementMock(String req) {
1:       this.req = req;
1:     }
1:     
1:     public boolean isSatisfied(Capability c) {
1:       return c.toString().equals(req);
1:     }
1:     
1:     public boolean isOptional() {
1:       return optional;
1:     }
1:   }
1:   static class ReasonMock implements Reason{
1:     private final Resource res;
1:     private final Requirement req;
1:     ReasonMock (Resource res, Requirement req) {
1:       this.res = res;
1:       this.req = req;
1:     }
1:     
1:     public Resource getResource() {
1:       return this.res;
1:     }
1:     public Requirement getRequirement()
1:     {
1:       return this.req;
1:     }
1:   }
1:   static class ResourceMock {
1:     private final String name;
1:     private final Version version;
1:     private final List<Capability> capabilities;
1:     
1:     ResourceMock(String name, String version) { 
1:       this.name = name; 
1:       this.version = new Version(version); 
1:       capabilities = new ArrayList<Capability>();
1:     }
1:     
1:     public void addCapability(String cap) {
1:       capabilities.add(Skeleton.newMock(new CapabilityMock(cap), Capability.class));
1:     }
1:     
1:     public Capability[] getCapabilities() {
1:       return capabilities.toArray(new Capability[0]);
1:     }
1:     
1:     public Version getVersion() { return version; }
1:     public String getSymbolicName() { return name; }
1:   }
1:   
1:   @Before
1:   public void before()
1:   {
1:     resolverMock = new ResolverMock();
1:     resolver = Skeleton.newMock(resolverMock, Resolver.class);
1:   }
1:   
1:   @Test
1:   public void testIncompatible()
1:   {
1:     resolverMock
1:       .res("com.ibm.test", "0.0.0")
1:         .req("a")
1:         .req("b")
1:       .res("com.ibm.test", "1.0.0")
1:         .req("a")
1:         .req("c");
1:     
1:     List<Resource> res = retrieveRequiredResources(resolver);
1:     assertEquals(2, res.size());
1:     assertResource(res.get(0), "com.ibm.test", "0.0.0");
1:     assertResource(res.get(1), "com.ibm.test", "1.0.0");
1:   }
1:   
1:   @Test 
1:   public void testLeftRedundant()
1:   {
1:     resolverMock
1:       .res("com.ibm.test", "0.0.0")
1:         .req("a")
1:         .req("b")
1:       .res("com.ibm.test", "1.0.0")
1:         .req("a")
1:         .req("b")
1:         .req("c");
1: 
1:     List<Resource> res = retrieveRequiredResources(resolver);
1:     assertEquals(1, res.size());
1:     assertResource(res.get(0), "com.ibm.test", "1.0.0");
1:   }
1:   
1:   @Test
1:   public void testRightRedundant()
1:   {
1:     resolverMock
1:       .res("com.ibm.test", "0.0.0")
1:         .req("a")
1:         .req("b")
1:         .req("c")
1:       .res("com.ibm.test", "1.0.0")
1:         .req("a")
1:         .req("c");
1: 
1:     List<Resource> res = retrieveRequiredResources(resolver);
1:     assertEquals(1, res.size());
1:     assertResource(res.get(0), "com.ibm.test", "0.0.0");
1:   }
1:   
1:   @Test
1:   public void testEquivalent()
1:   {
1:     resolverMock
1:       .res("com.ibm.test", "0.0.0")
1:         .req("a")
1:         .req("b")
1:       .res("com.ibm.test", "2.0.0")
1:         .req("a")
1:         .req("b")
1:       .res("com.ibm.test", "1.0.0")
1:         .req("a")
1:         .req("b");
1:   
1:     List<Resource> res = retrieveRequiredResources(resolver);
1:     assertEquals(1, res.size());
1:     assertResource(res.get(0), "com.ibm.test", "2.0.0");
1:   }
1:   
1:   @Test
1:   public void testEquivalentWithOptionals()
1:   {
1:     // 1.1.0 and 1.0.0 are incompatible if we leave aside that "c" is optional. 
1:     // "bundle" is the downgrade dependency on 1.0.0, "c" is the optional service requirement for the CommentService
1:     resolverMock
1:       .res("com.ibm.test", "1.0.0")
1:         .req("a")
1:         .req("b")
1:         .req("bundle")
1:       .res("com.ibm.test", "1.1.0")
1:         .req("a")
1:         .req("b")
1:         .req("c").optional();
1:     
1:     List<Resource> res = retrieveRequiredResources(resolver);
1:     assertEquals(1, res.size());
1:     assertResource(res.get(0), "com.ibm.test", "1.0.0");    
1:   }
1:   
1:   private void assertResource(Resource r, String name, String version)
1:   {
1:     assertEquals(name, r.getSymbolicName());
1:     assertEquals(version, r.getVersion().toString());
1:   }
1: }
============================================================================