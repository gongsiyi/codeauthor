2:2b4c46b: /*
1:685a4f3:  * Licensed to the Apache Software Foundation (ASF) under one
1:df2a53a:  * or more contributor license agreements.  See the NOTICE file
1:df2a53a:  * distributed with this work for additional information
1:df2a53a:  * regarding copyright ownership.  The ASF licenses this file
1:df2a53a:  * to you under the Apache License, Version 2.0 (the
1:df2a53a:  * "License"); you may not use this file except in compliance
1:df2a53a:  * with the License.  You may obtain a copy of the License at
1:df2a53a:  *
1:df2a53a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:df2a53a:  *
1:df2a53a:  * Unless required by applicable law or agreed to in writing,
1:df2a53a:  * software distributed under the License is distributed on an
1:df2a53a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:df2a53a:  * KIND, either express or implied.  See the License for the
1:df2a53a:  * specific language governing permissions and limitations
1:df2a53a:  * under the License.
2:ab65edd:  */
1:df2a53a: package org.apache.aries.samples.blog.itests;
21:df2a53a: 
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.maven;
1:df2a53a: 
1:df2a53a: import org.apache.aries.application.management.AriesApplicationContext;
1:df2a53a: import org.junit.Test;
1:b4f040a: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
1:b4f040a: 
1:b4f040a: public class JdbcBlogSampleWithEbaTest extends AbstractBlogIntegrationTest {
1:df2a53a: 
1:df2a53a:     @Test
1:df2a53a:     public void test() throws Exception {
1:b4f040a:         MavenArtifactUrlReference eba = maven()
1:b4f040a:         		.groupId("org.apache.aries.samples.blog")
1:b4f040a:         		.artifactId("org.apache.aries.samples.blog.jdbc.eba")
1:b4f040a:         		.versionAsInProject()
1:b4f040a:         		.type("eba");
1:b4f040a:         AriesApplicationContext ctx = installEba(eba);
1:8767ca9: 
1:2b4c46b: 		/* Check that the Blog Sample bundles are present an started */
1:b4f040a:         assertBundleStarted("org.apache.aries.samples.blog.api");
1:b4f040a:         assertBundleStarted("org.apache.aries.samples.blog.web");
1:b4f040a:         assertBundleStarted("org.apache.aries.samples.blog.biz");
1:b4f040a:         assertBundleStarted("org.apache.aries.samples.blog.persistence.jdbc");
1:df2a53a: 
1:b4f040a:         assertBlogServicesStarted();
1:b4f040a:         checkBlogWebAccess();
1:df2a53a: 
1:df2a53a:         ctx.stop();
1:df2a53a:         manager.uninstall(ctx);
5:df2a53a:     }
1:df2a53a: 
1:df2a53a: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:b4f040a
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.maven;
1: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
1: 
1: public class JdbcBlogSampleWithEbaTest extends AbstractBlogIntegrationTest {
1:         MavenArtifactUrlReference eba = maven()
1:         		.groupId("org.apache.aries.samples.blog")
1:         		.artifactId("org.apache.aries.samples.blog.jdbc.eba")
1:         		.versionAsInProject()
1:         		.type("eba");
1:         AriesApplicationContext ctx = installEba(eba);
1:         assertBundleStarted("org.apache.aries.samples.blog.api");
1:         assertBundleStarted("org.apache.aries.samples.blog.web");
1:         assertBundleStarted("org.apache.aries.samples.blog.biz");
1:         assertBundleStarted("org.apache.aries.samples.blog.persistence.jdbc");
1:         assertBlogServicesStarted();
1:         checkBlogWebAccess();
author:Holly Cummins
-------------------------------------------------------------------------------
commit:2bfa479
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
0:     	Option[] options = testOptions(
/////////////////////////////////////////////////////////////////////////
author:Emily Jiang
-------------------------------------------------------------------------------
commit:b8839d6
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.ow2.asm", "asm-all" ),
commit:685a4f3
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8767ca9
/////////////////////////////////////////////////////////////////////////
0:         waitForStart();
1:       
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:0f6fb8d
/////////////////////////////////////////////////////////////////////////
commit:6380768
/////////////////////////////////////////////////////////////////////////
0:         HttpURLConnection conn = makeConnection("http://localhost:8080/blog/ViewBlog");
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec"),
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
author:Chris Wilkinson
-------------------------------------------------------------------------------
commit:e4379bf
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.felix", "org.apache.felix.fileinstall" ),
/////////////////////////////////////////////////////////////////////////
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:4ff7f4f
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
commit:a0eca03
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.platform.repo"),
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.postresolve.process"),
commit:ab65edd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     	assertTrue("No services registered for " + bbiz.getSymbolicName(), isServiceRegistered(bbiz));
0:     	assertTrue("No services registered for " + bper.getSymbolicName(), isServiceRegistered(bper));
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
/////////////////////////////////////////////////////////////////////////
0:                 /* For debugging, uncomment the next two lines  */
0:                 /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
0:                 waitForFrameworkStartup(),  
1: */
0:                 /* For debugging, add these imports:
0:                 import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:                 import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1:                 */
commit:0cd0c6e
/////////////////////////////////////////////////////////////////////////
0: 		assertEquals(Bundle.ACTIVE, bapi.getState());
0: 		assertEquals(Bundle.ACTIVE, bbiz.getState());
0: 		assertEquals(Bundle.ACTIVE, bper.getState());
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:2b4c46b
/////////////////////////////////////////////////////////////////////////
1: 		/* Check that the Blog Sample bundles are present an started */
0: 		assertEquals(bapi.ACTIVE, bapi.getState());
0: 		assertEquals(bbiz.ACTIVE, bbiz.getState());
0: 		assertEquals(bper.ACTIVE, bper.getState());
0:         /* Require services from biz and persistence - wait for them to register */
0:         waitForServices(bbiz, "org.apache.aries.samples.blog.api.BloggingService");
0:         waitForServices(bper, "org.apache.aries.samples.blog.api.persistence.BlogPersistenceService");
0:        /*Check that they haven't timed out trying to register*/
0:     	assertTrue("No services reistered for " + bbiz.getSymbolicName(), isServiceRegistered(bbiz));
0:     	assertTrue("No services reistered for " + bper.getSymbolicName(), isServiceRegistered(bper));
0: 		/*Check what services are registered - uncomment for additional debug */
1: 		/*
0:     	listBundleServices(bbiz);
0:     	listBundleServices(bper);
0:     	System.out.println("In test and trying to get connection....");
0: 		*/
0: 		/* Uncomment for additional debug */
1: 		/*
0: 		*/
/////////////////////////////////////////////////////////////////////////
0:     	Option[] options = options(
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.felix", "org.apache.felix.fileinstall" ),
commit:df2a53a
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.samples.blog.itests;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.bootDelegationPackages;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1: 
0: import java.net.HttpURLConnection;
0: import java.net.URL;
1: 
0: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
0: import org.apache.aries.application.management.AriesApplicationManager;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.osgi.framework.Bundle;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class JdbcBlogSampleWithEbaTest extends AbstractIntegrationTest {
1: 
1:     @Test
1:     public void test() throws Exception {
1: 
0:         URL urlToEba = getUrlToEba("org.apache.aries.samples.blog", "org.apache.aries.samples.blog.jdbc.eba");
1: 
0:         AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:         AriesApplication app = manager.createApplication(urlToEba);
0:         AriesApplicationContext ctx = manager.install(app);
0:         ctx.start();
1: 
0:         Bundle bapi = getInstalledBundle("org.apache.aries.samples.blog.api");
0:         assertNotNull(bapi);
0:         bapi.start();
1: 
0:         Bundle bweb = getInstalledBundle("org.apache.aries.samples.blog.web");
0:         assertNotNull(bweb);
0:         bweb.start();
1: 
0:         Bundle bbiz = getInstalledBundle("org.apache.aries.samples.blog.biz");
0:         assertNotNull(bbiz);
0:         bbiz.start();
1: 
0:         Bundle bper = getInstalledBundle("org.apache.aries.samples.blog.persistence.jdbc");
0:         assertNotNull(bper);
0:         bper.start();
1: 
0:         Bundle txs = getInstalledBundle("org.apache.aries.transaction.manager");
1: 
0:         waitForServices(bbiz, "org.apache.aries.samples.api.BloggingService");
0:         waitForServices(bper, "org.apache.aries.samples.api.BloggingService");
0:         waitForServices(txs, "javax.transaction.TransactionManager");
1: 
0:         if (!isServiceRegistered(bbiz)) {
0:             System.out.println("ZZZZZ No services registered for "
0:                     + bbiz.getSymbolicName());
1:         }
1: 
0:         if (!isServiceRegistered(bper)) {
0:             System.out.println("ZZZZZ No services registered for "
0:                     + bper.getSymbolicName());
1:         }
1: 
0:         if (!isServiceRegistered(txs)) {
0:             System.out.println("ZZZZZ No services registered for "
0:                     + txs.getSymbolicName());
1:         }
1: 
0:         System.out.println("ZZZZZ in test and trying to get connection....");
0:         HttpURLConnection conn = makeConnection("http://localhost:8080/org.apache.aries.samples.blog.web/ViewBlog");
0:         String response = getHTTPResponse(conn);
0:         System.out.println("ZZZZZ " + response);
0:         System.out.println("ZZZZZ " + conn.getResponseCode());
0:         System.out.println("ZZZZZ " + HttpURLConnection.HTTP_OK);
1: 
0:         assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
1: 
0:         assertTrue("The response did not contain the expected content",
0:                 response.contains("Blog home"));
1: 
1:         ctx.stop();
1:         manager.uninstall(ctx);
1:     }
1: 
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:                 bootDelegationPackages("javax.transaction",
0:                         "javax.transaction.*"),
0:                 vmOption("-Dorg.osgi.framework.system.packages=javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.transaction;partial=true;mandatory:=partial,javax.transaction.xa;partial=true;mandatory:=partial"),
0:                 // Log
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:                 // Felix mvn url handler - do we need this?
0:                 mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
0:                 // this is how you set the default log level when using pax
0:                 // logging (logProfile)
0:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level")
0:                         .value("DEBUG"),
1: 
0:                 // Bundles
0:                 mavenBundle("org.eclipse.equinox", "cm"),
0:                 mavenBundle("org.eclipse.osgi", "services"),
1: 
0:                 mavenBundle("org.ops4j.pax.web", "pax-web-extender-war"),
0:                 mavenBundle("org.ops4j.pax.web", "pax-web-jetty-bundle"),
0:                 mavenBundle("org.ops4j.pax.web", "pax-web-jsp"),
0:                 mavenBundle("org.apache.derby", "derby"),
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec"),
1: 
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec"),
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.5_spec"),
0:                 mavenBundle("org.apache.geronimo.components", "geronimo-transaction"),
0:                 mavenBundle("org.apache.openjpa", "openjpa"),
0:                 mavenBundle("commons-lang", "commons-lang"),
0:                 mavenBundle("commons-collections", "commons-collections"),
0:                 mavenBundle("commons-pool", "commons-pool"),
0:                 mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp"),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint" ),
0:                 mavenBundle("org.apache.aries", "org.apache.aries.util" ),
0:                 mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi" ),
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.install" ),
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api" ),
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management" ),
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime" ),
0:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils" ),
0:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api" ),
0:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container" ),
0:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.aries" ),
0:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context" ),
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager" ),
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint" ),
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.wrappers" ),
0:                 mavenBundle("asm", "asm-all" ),
0:                 equinox().version("3.5.0")
0:         );
0:         options = updateOptions(options);
0:         return options;
1:     }
1: 
1: }
============================================================================