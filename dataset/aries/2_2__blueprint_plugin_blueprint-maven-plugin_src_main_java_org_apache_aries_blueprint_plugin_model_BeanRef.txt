1:d042317: /**
1:d042317:  * Licensed to the Apache Software Foundation (ASF) under one
1:d042317:  * or more contributor license agreements.  See the NOTICE file
1:d042317:  * distributed with this work for additional information
1:d042317:  * regarding copyright ownership.  The ASF licenses this file
1:d042317:  * to you under the Apache License, Version 2.0 (the
1:d042317:  * "License"); you may not use this file except in compliance
1:d042317:  * with the License.  You may obtain a copy of the License at
1:d22e134:  * <p/>
1:d042317:  * http://www.apache.org/licenses/LICENSE-2.0
1:d22e134:  * <p/>
1:d042317:  * Unless required by applicable law or agreed to in writing,
1:d042317:  * software distributed under the License is distributed on an
1:d042317:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d042317:  * KIND, either express or implied.  See the License for the
1:d042317:  * specific language governing permissions and limitations
1:d042317:  * under the License.
1:d042317:  */
1:b5bf406: package org.apache.aries.blueprint.plugin.model;
4:b5bf406: 
1:c201f83: import org.apache.aries.blueprint.plugin.Extensions;
1:c201f83: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
1:218954f: 
1:853c6ee: import java.lang.annotation.Annotation;
1:4f3e047: import java.lang.reflect.AnnotatedElement;
1:b5bf406: import java.lang.reflect.Field;
1:d22e134: import java.lang.reflect.Method;
1:853c6ee: import java.util.HashMap;
1:853c6ee: import java.util.Map;
1:b5bf406: 
1:b5bf406: public class BeanRef implements Comparable<BeanRef> {
1:b5bf406:     public String id;
1:b5bf406:     public Class<?> clazz;
1:218954f:     public Map<Class<? extends Annotation>, Annotation> qualifiers = new HashMap<>();
1:218954f: 
1:b5bf406:     /**
1:b5bf406:      * @param clazz interface or implementation class
1:b5bf406:      */
1:b5bf406:     public BeanRef(Class<?> clazz) {
1:b5bf406:         this.clazz = clazz;
1:b5bf406:     }
1:218954f: 
1:853c6ee:     public BeanRef(Class<?> clazz, String id) {
1:853c6ee:         this(clazz);
1:b5bf406:         this.id = id;
1:b5bf406:     }
1:9b08497: 
1:b5bf406:     public BeanRef(Field field) {
1:853c6ee:         this(field.getType());
1:4f3e047:         parseQualifiers(field);
1:b5bf406:     }
1:b5bf406: 
1:d22e134:     public BeanRef(Method method) {
1:d22e134:         this(method.getParameterTypes()[0]);
1:4f3e047:         parseQualifiers(method);
1:b5bf406:     }
1:b5bf406: 
1:4f3e047:     private void parseQualifiers(AnnotatedElement annotatedElement) {
1:4f3e047:         Annotation[] annotations = annotatedElement.getAnnotations();
1:218954f:         setQualifiersFromAnnotations(annotations);
1:218954f:     }
1:218954f: 
1:218954f:     protected void setQualifiersFromAnnotations(Annotation[] annotations) {
1:218954f:         for (Annotation ann : annotations) {
1:853c6ee:             if (isQualifier(ann) != null) {
1:853c6ee:                 this.qualifiers.put(ann.annotationType(), ann);
1:853c6ee:             }
1:853c6ee:         }
1:b5bf406:     }
1:b5bf406: 
1:6c346ba:     private Object isQualifier(Annotation ann) {
1:6c346ba:         for (Class<? extends Annotation> qualifingAnnotationClass : Extensions.qualifingAnnotationClasses) {
1:6c346ba:             Object annotation = ann.annotationType().getAnnotation(qualifingAnnotationClass);
1:6c346ba:             if (annotation != null) {
1:6c346ba:                 return annotation;
1:6c346ba:             }
1:6c346ba:         }
1:b5bf406:         return null;
1:b5bf406:     }
1:b5bf406: 
1:b5bf406:     public static String getBeanName(Class<?> clazz) {
1:4f3e047:         return getBeanName(clazz, clazz);
1:4f3e047:     }
1:b5bf406: 
1:4f3e047:     public static String getBeanName(Class<?> clazz, AnnotatedElement annotatedElement) {
1:c201f83:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
1:c201f83:             if (annotatedElement.getAnnotation(namedLikeHandler.getAnnotation()) != null) {
1:c201f83:                 String name = namedLikeHandler.getName(clazz, annotatedElement);
1:c201f83:                 if (name != null) {
1:c201f83:                     return name;
1:c201f83:                 }
1:c201f83:             }
1:4f3e047:         }
1:b5bf406:         String name = clazz.getSimpleName();
1:b5bf406:         return getBeanNameFromSimpleName(name);
1:b5bf406:     }
1:b5bf406: 
1:218954f:     protected static String getBeanNameFromSimpleName(String name) {
1:b5bf406:         return name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
1:b5bf406:     }
1:218954f: 
1:b5bf406:     public boolean matches(BeanRef template) {
1:b5bf406:         boolean assignable = template.clazz.isAssignableFrom(this.clazz);
1:d22e134:         if (template.id != null) {
1:d22e134:             return template.id.equals(id);
1:b5bf406:         }
1:853c6ee:         return assignable && qualifiers.values().containsAll(template.qualifiers.values());
1:b5bf406:     }
1:b5bf406: 
1:b5bf406:     @Override
1:b5bf406:     public int compareTo(BeanRef other) {
1:b5bf406:         return this.id.compareTo(other.id);
1:b5bf406:     }
1:218954f: 
1:9b08497:     @Override
1:9b08497:     public String toString() {
1:9b08497:         return this.clazz.getSimpleName() + "(" + this.id + ")";
1:9b08497:     }
1:218954f: 
1:218954f:     public boolean equals(Object o) {
1:218954f:         if (o == this) return true;
1:218954f:         if (!(o instanceof BeanRef)) return false;
1:218954f:         final BeanRef other = (BeanRef) o;
1:218954f:         if (!other.canEqual(this)) return false;
1:218954f:         if (this.id == null ? other.id != null : !this.id.equals(other.id)) return false;
1:218954f:         if (this.clazz == null ? other.clazz != null : !this.clazz.equals(other.clazz)) return false;
1:218954f:         return true;
1:218954f:     }
1:218954f: 
1:218954f:     public int hashCode() {
1:218954f:         final int PRIME = 59;
1:218954f:         int result = 1;
1:218954f:         result = result * PRIME + (this.id == null ? 0 : this.id.hashCode());
1:218954f:         result = result * PRIME + (this.clazz == null ? 0 : this.clazz.hashCode());
1:218954f:         return result;
1:218954f:     }
1:218954f: 
1:218954f:     protected boolean canEqual(Object other) {
1:218954f:         return other instanceof BeanRef;
1:218954f:     }
1:b5bf406: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:d042317
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * <p>
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:218954f
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.stereotype.Component;
1: 
0: import javax.inject.Named;
0: import javax.inject.Qualifier;
1:     public Map<Class<? extends Annotation>, Annotation> qualifiers = new HashMap<>();
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         Annotation[] annotations = field.getAnnotations();
1:         setQualifiersFromAnnotations(annotations);
1:     }
1: 
1:     protected void setQualifiersFromAnnotations(Annotation[] annotations) {
1:         for (Annotation ann : annotations) {
0:     private Qualifier isQualifier(Annotation ann) {
0:         return ann.annotationType().getAnnotation(Qualifier.class);
/////////////////////////////////////////////////////////////////////////
0:             return named.value();
1:     protected static String getBeanNameFromSimpleName(String name) {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public boolean equals(Object o) {
1:         if (o == this) return true;
1:         if (!(o instanceof BeanRef)) return false;
1:         final BeanRef other = (BeanRef) o;
1:         if (!other.canEqual(this)) return false;
1:         if (this.id == null ? other.id != null : !this.id.equals(other.id)) return false;
1:         if (this.clazz == null ? other.clazz != null : !this.clazz.equals(other.clazz)) return false;
1:         return true;
1:     }
1: 
1:     public int hashCode() {
1:         final int PRIME = 59;
1:         int result = 1;
1:         result = result * PRIME + (this.id == null ? 0 : this.id.hashCode());
1:         result = result * PRIME + (this.clazz == null ? 0 : this.clazz.hashCode());
1:         return result;
1:     }
1: 
1:     protected boolean canEqual(Object other) {
1:         return other instanceof BeanRef;
1:     }
commit:853c6ee
/////////////////////////////////////////////////////////////////////////
1: import java.lang.annotation.Annotation;
1: import java.util.HashMap;
1: import java.util.Map;
0:     public Map<Class<? extends Annotation>, Annotation> qualifiers;
/////////////////////////////////////////////////////////////////////////
0:         this.qualifiers = new HashMap<Class<? extends Annotation>, Annotation>();
1:     public BeanRef(Class<?> clazz, String id) {
1:         this(clazz);
1:         this(field.getType());
0:         for (Annotation ann : field.getAnnotations()) {
1:             if (isQualifier(ann) != null) {
1:                 this.qualifiers.put(ann.annotationType(), ann);
1:             }
1:         }
0:     private javax.inject.Qualifier isQualifier(Annotation ann) {
0:         return ann.annotationType().getAnnotation(javax.inject.Qualifier.class);
/////////////////////////////////////////////////////////////////////////
1:         return assignable && qualifiers.values().containsAll(template.qualifiers.values());
commit:9b08497
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Override
1:     public String toString() {
1:         return this.clazz.getSimpleName() + "(" + this.id + ")";
1:     }
commit:b5bf406
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.plugin.model;
1: 
1: import java.lang.reflect.Field;
1: 
0: import javax.inject.Named;
1: 
0: import org.springframework.beans.factory.annotation.Qualifier;
0: import org.springframework.stereotype.Component;
1: 
1: public class BeanRef implements Comparable<BeanRef> {
1:     public String id;
1:     public Class<?> clazz;
1:     
1:     /**
0:      * 
1:      * @param clazz interface or implementation class
1:      */
1:     public BeanRef(Class<?> clazz) {
1:         this.clazz = clazz;
0:         this.id = getBeanName(clazz);
1:     }
1:     
0:     public BeanRef(Class<?> type, String id) {
0:         this.clazz = type;
1:         this.id = id;
1:     }
1: 
1:     public BeanRef(Field field) {
0:         this(field.getType(), getDestinationId(field));
1:     }
1: 
0:     private static String getDestinationId(Field field) {
0:         Named named = field.getAnnotation(Named.class);
0:         if (named != null) {
0:             return named.value();
1:         }
0:         Qualifier qualifier = field.getAnnotation(Qualifier.class);
0:         if (qualifier != null) {
0:             return qualifier.value();
1:         }
1:         return null;
1:     }
1: 
1:     public static String getBeanName(Class<?> clazz) {
0:         Component component = clazz.getAnnotation(Component.class);
0:         Named named = clazz.getAnnotation(Named.class);
0:         if (component != null && !"".equals(component.value())) {
0:             return component.value();
0:         } else if (named != null && !"".equals(named.value())) {
0:             return named.value();    
0:         } else {
1:             String name = clazz.getSimpleName();
1:             return getBeanNameFromSimpleName(name);
1:         }
1:     }
1: 
0:     private static String getBeanNameFromSimpleName(String name) {
1:         return name.substring(0, 1).toLowerCase() + name.substring(1, name.length());
1:     }
1:     
1:     public boolean matches(BeanRef template) {
1:         boolean assignable = template.clazz.isAssignableFrom(this.clazz);
0:         return assignable && ((template.id == null) || id.equals(template.id));
1:     }
1: 
1:     @Override
1:     public int compareTo(BeanRef other) {
1:         return this.id.compareTo(other.id);
1:     }
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:6c346ba
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private Object isQualifier(Annotation ann) {
1:         for (Class<? extends Annotation> qualifingAnnotationClass : Extensions.qualifingAnnotationClasses) {
1:             Object annotation = ann.annotationType().getAnnotation(qualifingAnnotationClass);
1:             if (annotation != null) {
1:                 return annotation;
1:             }
1:         }
0:         return null;
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.Extensions;
1: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
/////////////////////////////////////////////////////////////////////////
1:         for (NamedLikeHandler namedLikeHandler : Extensions.namedLikeHandlers) {
1:             if (annotatedElement.getAnnotation(namedLikeHandler.getAnnotation()) != null) {
1:                 String name = namedLikeHandler.getName(clazz, annotatedElement);
1:                 if (name != null) {
1:                     return name;
1:                 }
1:             }
0:         String name = clazz.getSimpleName();
0:         return getBeanNameFromSimpleName(name);
commit:4f3e047
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.AnnotatedElement;
/////////////////////////////////////////////////////////////////////////
1:         parseQualifiers(field);
1:         parseQualifiers(method);
1:     }
0: 
1:     private void parseQualifiers(AnnotatedElement annotatedElement) {
1:         Annotation[] annotations = annotatedElement.getAnnotations();
/////////////////////////////////////////////////////////////////////////
1:         return getBeanName(clazz, clazz);
1:     }
0: 
1:     public static String getBeanName(Class<?> clazz, AnnotatedElement annotatedElement) {
0:         Component component = annotatedElement.getAnnotation(Component.class);
0:         Named named = annotatedElement.getAnnotation(Named.class);
commit:d22e134
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
1:     public BeanRef(Method method) {
1:         this(method.getParameterTypes()[0]);
0:         Annotation[] annotations = method.getAnnotations();
0:         setQualifiersFromAnnotations(annotations);
0:         Named named = method.getAnnotation(Named.class);
0:         if (named != null) {
0:             id = named.value();
0:         }
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:         if (template.id != null) {
1:             return template.id.equals(id);
0:         }
============================================================================