1:4115fb2: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:4115fb2:  *  contributor license agreements.  See the NOTICE file distributed with
1:4115fb2:  *  this work for additional information regarding copyright ownership.
1:4115fb2:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:4115fb2:  *  (the "License"); you may not use this file except in compliance with
1:4115fb2:  *  the License.  You may obtain a copy of the License at
1:4115fb2:  *
1:4115fb2:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4115fb2:  *
1:4115fb2:  *  Unless required by applicable law or agreed to in writing, software
1:4115fb2:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:4115fb2:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4115fb2:  *  See the License for the specific language governing permissions and
1:4115fb2:  *  limitations under the License.
1:4115fb2:  */
1:4115fb2: package org.apache.aries.ejb.openejb.extender.itest;
27:4115fb2: 
1:4115fb2: import static org.junit.Assert.assertEquals;
1:4115fb2: import static org.junit.Assert.assertNotNull;
1:4115fb2: import static org.junit.Assert.assertNotSame;
1:4115fb2: import static org.junit.Assert.assertNull;
1:4115fb2: import static org.junit.Assert.assertSame;
1:8beabf0: import static org.ops4j.pax.exam.CoreOptions.*;
1:4115fb2: 
1:4115fb2: import java.io.ByteArrayInputStream;
1:4115fb2: import java.io.ByteArrayOutputStream;
1:4115fb2: import java.lang.reflect.Method;
1:4115fb2: import java.util.HashMap;
1:4115fb2: import java.util.zip.ZipOutputStream;
1:4115fb2: 
1:4115fb2: import javax.persistence.EntityManager;
1:4115fb2: import javax.persistence.EntityManagerFactory;
1:4115fb2: import javax.persistence.PersistenceContextType;
1:4115fb2: import javax.transaction.TransactionSynchronizationRegistry;
1:4115fb2: import javax.transaction.UserTransaction;
1:4115fb2: 
1:4115fb2: import org.apache.aries.jpa.container.PersistenceUnitConstants;
1:4115fb2: import org.apache.aries.jpa.container.context.PersistenceContextProvider;
1:8beabf0: import org.junit.Ignore;
1:4115fb2: import org.junit.Test;
1:4115fb2: import org.junit.runner.RunWith;
1:8beabf0: import org.ops4j.pax.exam.Configuration;
1:4115fb2: import org.ops4j.pax.exam.Option;
1:8beabf0: import org.ops4j.pax.exam.junit.PaxExam;
1:8beabf0: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:8beabf0: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:4115fb2: import org.osgi.framework.Bundle;
1:4115fb2: 
1:4115fb2: import beans.integration.Tx;
1:4115fb2: import beans.integration.impl.JPASingleton;
1:4115fb2: import beans.jpa.Laptop;
1:4115fb2: 
1:8beabf0: @RunWith(PaxExam.class)
1:8beabf0: @ExamReactorStrategy(PerClass.class)
1:4115fb2: public class AdvancedEJBBundleTest extends AbstractOpenEJBTest {
1:4115fb2: 
1:8beabf0:     @Configuration
1:8beabf0:     public static Option[] jpaConfig() {
1:8beabf0:         return options(
1:8beabf0:                 mavenBundle("org.apache.derby", "derby").versionAsInProject(),
1:8beabf0:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api").versionAsInProject(),
1:8beabf0:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container").versionAsInProject(),
1:8beabf0:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context").versionAsInProject(),
1:8beabf0:                 mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp").versionAsInProject(),
1:8beabf0:                 mavenBundle("org.apache.openjpa", "openjpa").versionAsInProject(),
1:8beabf0:                 mavenBundle("commons-pool", "commons-pool").versionAsInProject()
1:8beabf0:         );
6:4115fb2:     }
1:4115fb2: 
1:8beabf0:     @Test
1:8beabf0:     @Ignore
1:8beabf0:     public void testTransactionalEJB() throws Exception {
1:8beabf0: 
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "TX_MANIFEST.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "beans/integration/impl/TxSingleton.class");
1:8beabf0:         addToZip(zos, "beans/integration/Tx.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0: 
1:8beabf0:             Object bean = context().getService(context().getServiceReference(Tx.class.getName()));
1:8beabf0:             UserTransaction ut = context().getService(UserTransaction.class);
1:8beabf0: 
1:8beabf0:             Method no = bean.getClass().getMethod("getNoTransactionId");
1:8beabf0:             Method maybe = bean.getClass().getMethod("getMaybeTransactionId");
1:8beabf0:             Method tx = bean.getClass().getMethod("getTransactionId");
1:8beabf0:             Method newTx = bean.getClass().getMethod("getNewTransactionId");
1:8beabf0: 
1:8beabf0:             assertNull(no.invoke(bean));
1:8beabf0:             assertNull(maybe.invoke(bean));
1:8beabf0:             assertNotNull(tx.invoke(bean));
1:8beabf0:             assertNotNull(newTx.invoke(bean));
1:8beabf0: 
1:8beabf0:             ut.begin();
1:8beabf0:             try {
1:8beabf0:                 Object key = context().getService(TransactionSynchronizationRegistry.class).
1:8beabf0:                         getTransactionKey();
1:8beabf0: 
1:8beabf0:                 assertNotNull(key);
1:8beabf0:                 assertNull(no.invoke(bean));
1:8beabf0:                 assertSame(key, maybe.invoke(bean));
1:8beabf0:                 assertSame(key, tx.invoke(bean));
1:8beabf0:                 Object o = newTx.invoke(bean);
1:8beabf0:                 assertNotNull(o);
1:8beabf0:                 assertNotSame(key, o);
1:8beabf0:             } finally {
1:8beabf0:                 ut.commit();
1:8beabf0:             }
1:8beabf0:             test.stop();
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:4115fb2:     }
1:8beabf0: 
1:8beabf0:     @Test
1:8beabf0:     @Ignore
1:8beabf0:     public void testJPAContextSharing() throws Exception {
1:8beabf0: 
1:8beabf0:         System.setProperty("openejb.validation.output.level", "VERBOSE");
1:8beabf0: 
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "JPA_MANIFEST.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "persistence.xml", "META-INF/persistence.xml");
1:8beabf0:         addToZip(zos, "beans/integration/impl/JPASingleton.class");
1:8beabf0:         addToZip(zos, "beans/jpa/Laptop.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0: 
1:8beabf0:             PersistenceContextProvider provider = context().getService(PersistenceContextProvider.class);
1:8beabf0: 
1:8beabf0:             HashMap<String, Object> props = new HashMap<String, Object>();
1:8beabf0:             props.put(PersistenceContextProvider.PERSISTENCE_CONTEXT_TYPE, PersistenceContextType.TRANSACTION);
1:8beabf0:             provider.registerContext("ejb-test", context().getBundle(), props);
1:8beabf0: 
1:8beabf0: 
1:8beabf0:             Object bean = context().getService(context().getServiceReference(JPASingleton.class.getName()));
1:8beabf0:             UserTransaction ut = context().getService(UserTransaction.class);
1:8beabf0: 
1:8beabf0:             Method m = bean.getClass().getMethod("editEntity", String.class);
1:8beabf0: 
1:8beabf0:             EntityManager em = context().getService(EntityManagerFactory.class, "(&(osgi.unit.name=ejb-test)("
1:8beabf0:                     + PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT + "=true)" +
1:8beabf0:                     "(" + PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE + "=*))").createEntityManager();
1:8beabf0: 
1:8beabf0:             ut.begin();
1:8beabf0:             try {
1:8beabf0: 
1:8beabf0:                 Object e = test.loadClass(Laptop.class.getName()).newInstance();
1:8beabf0: 
1:8beabf0:                 e.getClass().getMethod("setSerialNumber", String.class).invoke(e, "ABC123");
1:8beabf0:                 e.getClass().getMethod("setNumberOfCores", int.class).invoke(e, 1);
1:8beabf0: 
1:8beabf0:                 em.persist(e);
1:8beabf0: 
1:8beabf0:                 m.invoke(bean, "ABC123");
1:8beabf0: 
1:8beabf0:                 assertEquals(4, e.getClass().getMethod("getNumberOfCores").invoke(e));
1:8beabf0:                 assertEquals(Integer.MAX_VALUE, e.getClass().getMethod("getHardDiskSize").invoke(e));
1:8beabf0: 
1:8beabf0:             } finally {
1:8beabf0:                 ut.commit();
1:8beabf0:             }
1:8beabf0:             test.stop();
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:8beabf0:     }
1:8beabf0: 
1:4115fb2: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:8beabf0
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1:     @Configuration
1:     public static Option[] jpaConfig() {
1:         return options(
1:                 mavenBundle("org.apache.derby", "derby").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context").versionAsInProject(),
1:                 mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp").versionAsInProject(),
1:                 mavenBundle("org.apache.openjpa", "openjpa").versionAsInProject(),
1:                 mavenBundle("commons-pool", "commons-pool").versionAsInProject()
1:         );
1:     @Test
1:     @Ignore
1:     public void testTransactionalEJB() throws Exception {
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "TX_MANIFEST.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "beans/integration/impl/TxSingleton.class");
1:         addToZip(zos, "beans/integration/Tx.class");
1:         zos.close();
1: 
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1: 
1:             Object bean = context().getService(context().getServiceReference(Tx.class.getName()));
1:             UserTransaction ut = context().getService(UserTransaction.class);
1: 
1:             Method no = bean.getClass().getMethod("getNoTransactionId");
1:             Method maybe = bean.getClass().getMethod("getMaybeTransactionId");
1:             Method tx = bean.getClass().getMethod("getTransactionId");
1:             Method newTx = bean.getClass().getMethod("getNewTransactionId");
1: 
1:             assertNull(no.invoke(bean));
1:             assertNull(maybe.invoke(bean));
1:             assertNotNull(tx.invoke(bean));
1:             assertNotNull(newTx.invoke(bean));
1: 
1:             ut.begin();
1:             try {
1:                 Object key = context().getService(TransactionSynchronizationRegistry.class).
1:                         getTransactionKey();
1: 
1:                 assertNotNull(key);
1:                 assertNull(no.invoke(bean));
1:                 assertSame(key, maybe.invoke(bean));
1:                 assertSame(key, tx.invoke(bean));
1:                 Object o = newTx.invoke(bean);
1:                 assertNotNull(o);
1:                 assertNotSame(key, o);
1:             } finally {
1:                 ut.commit();
1:             }
1:             test.stop();
1:         } finally {
1:             test.uninstall();
1:         }
1: 
1:     @Test
1:     @Ignore
1:     public void testJPAContextSharing() throws Exception {
1: 
1:         System.setProperty("openejb.validation.output.level", "VERBOSE");
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "JPA_MANIFEST.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "persistence.xml", "META-INF/persistence.xml");
1:         addToZip(zos, "beans/integration/impl/JPASingleton.class");
1:         addToZip(zos, "beans/jpa/Laptop.class");
1:         zos.close();
1: 
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1: 
1:             PersistenceContextProvider provider = context().getService(PersistenceContextProvider.class);
1: 
1:             HashMap<String, Object> props = new HashMap<String, Object>();
1:             props.put(PersistenceContextProvider.PERSISTENCE_CONTEXT_TYPE, PersistenceContextType.TRANSACTION);
1:             provider.registerContext("ejb-test", context().getBundle(), props);
1: 
1: 
1:             Object bean = context().getService(context().getServiceReference(JPASingleton.class.getName()));
1:             UserTransaction ut = context().getService(UserTransaction.class);
1: 
1:             Method m = bean.getClass().getMethod("editEntity", String.class);
1: 
1:             EntityManager em = context().getService(EntityManagerFactory.class, "(&(osgi.unit.name=ejb-test)("
1:                     + PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT + "=true)" +
1:                     "(" + PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE + "=*))").createEntityManager();
1: 
1:             ut.begin();
1:             try {
1: 
1:                 Object e = test.loadClass(Laptop.class.getName()).newInstance();
1: 
1:                 e.getClass().getMethod("setSerialNumber", String.class).invoke(e, "ABC123");
1:                 e.getClass().getMethod("setNumberOfCores", int.class).invoke(e, 1);
1: 
1:                 em.persist(e);
1: 
1:                 m.invoke(bean, "ABC123");
1: 
1:                 assertEquals(4, e.getClass().getMethod("getNumberOfCores").invoke(e));
1:                 assertEquals(Integer.MAX_VALUE, e.getClass().getMethod("getHardDiskSize").invoke(e));
1: 
1:             } finally {
1:                 ut.commit();
1:             }
1:             test.stop();
1:         } finally {
1:             test.uninstall();
1:         }
1:     }
1: 
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:035e6f1
/////////////////////////////////////////////////////////////////////////
0: //        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.openejb.extender.itest;
1: 
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNotSame;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertSame;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.lang.reflect.Method;
1: import java.util.HashMap;
1: import java.util.zip.ZipOutputStream;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.PersistenceContextType;
1: import javax.transaction.TransactionSynchronizationRegistry;
1: import javax.transaction.UserTransaction;
1: 
1: import org.apache.aries.jpa.container.PersistenceUnitConstants;
1: import org.apache.aries.jpa.container.context.PersistenceContextProvider;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: 
1: import beans.integration.Tx;
1: import beans.integration.impl.JPASingleton;
1: import beans.jpa.Laptop;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class AdvancedEJBBundleTest extends AbstractOpenEJBTest {
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] jpaConfig() {
0:     return options( 
0:         vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
0:         mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api"),
0:         mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container"),
0:         mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context"),
0:         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp"),
0:         mavenBundle("org.apache.openjpa", "openjpa"),
0:         mavenBundle("commons-pool", "commons-pool"),
0:         mavenBundle("org.apache.derby", "derby")
0:     );
1:   }
1:   
0:   @Test
0:   public void testTransactionalEJB() throws Exception {
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "TX_MANIFEST.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "beans/integration/impl/TxSingleton.class");
0:     addToZip(zos, "beans/integration/Tx.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
0:     try {
0:       test.start();
1:       
0:       Object bean = context().getService(context().getServiceReference(Tx.class.getName()));
0:       UserTransaction ut = context().getService(UserTransaction.class);
1:       
0:       Method no = bean.getClass().getMethod("getNoTransactionId");
0:       Method maybe = bean.getClass().getMethod("getMaybeTransactionId");
0:       Method tx = bean.getClass().getMethod("getTransactionId");
0:       Method newTx = bean.getClass().getMethod("getNewTransactionId");
1:       
0:       assertNull(no.invoke(bean));
0:       assertNull(maybe.invoke(bean));
0:       assertNotNull(tx.invoke(bean));
0:       assertNotNull(newTx.invoke(bean));
1:       
0:       ut.begin();
0:       try {
0:         Object key = context().getService(TransactionSynchronizationRegistry.class).
0:             getTransactionKey();
1:         
0:         assertNotNull(key);
0:         assertNull(no.invoke(bean));
0:         assertSame(key, maybe.invoke(bean));
0:         assertSame(key, tx.invoke(bean));
0:         Object o = newTx.invoke(bean);
0:         assertNotNull(o);
0:         assertNotSame(key, o);
0:       } finally {
0:         ut.commit();
1:       }
0:       test.stop();
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testJPAContextSharing() throws Exception {
1:   
0:     System.setProperty("openejb.validation.output.level", "VERBOSE");
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "JPA_MANIFEST.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "persistence.xml", "META-INF/persistence.xml");
0:     addToZip(zos, "beans/integration/impl/JPASingleton.class");
0:     addToZip(zos, "beans/jpa/Laptop.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
0:     try {
0:       test.start();
1:       
0:       PersistenceContextProvider provider = context().getService(PersistenceContextProvider.class);
1:       
0:       HashMap<String, Object> props = new HashMap<String, Object>();
0:       props.put(PersistenceContextProvider.PERSISTENCE_CONTEXT_TYPE, PersistenceContextType.TRANSACTION);
0:       provider.registerContext("ejb-test", context().getBundle(), props);
1:       
1:       
0:       Object bean = context().getService(context().getServiceReference(JPASingleton.class.getName()));
0:       UserTransaction ut = context().getService(UserTransaction.class);
1:       
0:       Method m = bean.getClass().getMethod("editEntity", String.class);
1:       
0:       EntityManager em = context().getService(EntityManagerFactory.class, "(&(osgi.unit.name=ejb-test)(" 
0:           + PersistenceUnitConstants.CONTAINER_MANAGED_PERSISTENCE_UNIT + "=true)" +
0:         "(" + PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE + "=*))").createEntityManager();
1:       
0:       ut.begin();
0:       try {
1:         
0:         Object e = test.loadClass(Laptop.class.getName()).newInstance();
1:         
0:         e.getClass().getMethod("setSerialNumber", String.class).invoke(e, "ABC123");
0:         e.getClass().getMethod("setNumberOfCores", int.class).invoke(e, 1);
1:         
0:         em.persist(e);
1:         
0:         m.invoke(bean, "ABC123");
1:         
0:         assertEquals(4, e.getClass().getMethod("getNumberOfCores").invoke(e));
0:         assertEquals(Integer.MAX_VALUE, e.getClass().getMethod("getHardDiskSize").invoke(e));
1:         
0:       } finally {
0:         ut.commit();
1:       }
0:       test.stop();
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1: }
============================================================================