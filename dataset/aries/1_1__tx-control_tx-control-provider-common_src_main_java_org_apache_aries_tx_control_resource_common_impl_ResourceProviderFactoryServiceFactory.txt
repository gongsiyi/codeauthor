1:efb3993: /*
1:efb3993:  * Licensed to the Apache Software Foundation (ASF) under one
1:efb3993:  * or more contributor license agreements.  See the NOTICE file
1:efb3993:  * distributed with this work for additional information
1:efb3993:  * regarding copyright ownership.  The ASF licenses this file
1:efb3993:  * to you under the Apache License, Version 2.0 (the
1:efb3993:  * "License"); you may not use this file except in compliance
1:efb3993:  * with the License.  You may obtain a copy of the License at
1:efb3993:  *
1:efb3993:  *   http://www.apache.org/licenses/LICENSE-2.0
1:efb3993:  *
1:efb3993:  * Unless required by applicable law or agreed to in writing,
1:efb3993:  * software distributed under the License is distributed on an
1:efb3993:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:efb3993:  * KIND, either express or implied.  See the License for the
1:efb3993:  * specific language governing permissions and limitations
1:efb3993:  * under the License.
1:efb3993:  */
1:7c388cb: package org.apache.aries.tx.control.resource.common.impl;
1:7c388cb: 
1:7c388cb: import java.util.Set;
1:7c388cb: import java.util.concurrent.CopyOnWriteArraySet;
1:7c388cb: 
1:7c388cb: import org.osgi.framework.Bundle;
1:7c388cb: import org.osgi.framework.ServiceFactory;
1:7c388cb: import org.osgi.framework.ServiceRegistration;
1:7c388cb: 
1:7c388cb: public abstract class ResourceProviderFactoryServiceFactory<R extends AutoCloseable,
1:7c388cb: 	T extends TrackingResourceProviderFactory<R>> implements 
1:7c388cb: 	ServiceFactory<TrackingResourceProviderFactory<R>> {
1:7c388cb: 
1:7c388cb: 	Set<TrackingResourceProviderFactory<R>> factories = new CopyOnWriteArraySet<>();
1:7c388cb: 	
1:7c388cb: 	@Override
1:7c388cb: 	public TrackingResourceProviderFactory<R> getService(Bundle bundle,
1:7c388cb: 			ServiceRegistration<TrackingResourceProviderFactory<R>> registration) {
1:7c388cb: 		TrackingResourceProviderFactory<R> factory = 
1:7c388cb: 						getTrackingResourceManagerProviderFactory();
1:7c388cb: 		factories.add(factory);
1:7c388cb: 		return factory;
1:7c388cb: 	}
1:7c388cb: 
1:7c388cb: 	@Override
1:7c388cb: 	public void ungetService(Bundle bundle, ServiceRegistration<TrackingResourceProviderFactory<R>> registration,
1:7c388cb: 			TrackingResourceProviderFactory<R> service) {
1:7c388cb: 		factories.remove(service);
1:7c388cb: 		service.closeAll();
1:7c388cb: 	}
1:7c388cb: 	
1:7c388cb: 	public void close() {
1:7c388cb: 		factories.stream()
1:7c388cb: 			.forEach(r -> r.closeAll());
1:7c388cb: 	}
1:7c388cb: 	
1:7c388cb: 	protected abstract TrackingResourceProviderFactory<R> 
1:7c388cb: 		getTrackingResourceManagerProviderFactory();
1:7c388cb: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:efb3993
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.resource.common.impl;
1: 
1: import java.util.Set;
1: import java.util.concurrent.CopyOnWriteArraySet;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceFactory;
1: import org.osgi.framework.ServiceRegistration;
1: 
1: public abstract class ResourceProviderFactoryServiceFactory<R extends AutoCloseable,
1: 	T extends TrackingResourceProviderFactory<R>> implements 
1: 	ServiceFactory<TrackingResourceProviderFactory<R>> {
1: 
1: 	Set<TrackingResourceProviderFactory<R>> factories = new CopyOnWriteArraySet<>();
1: 	
1: 	@Override
1: 	public TrackingResourceProviderFactory<R> getService(Bundle bundle,
1: 			ServiceRegistration<TrackingResourceProviderFactory<R>> registration) {
1: 		TrackingResourceProviderFactory<R> factory = 
1: 						getTrackingResourceManagerProviderFactory();
1: 		factories.add(factory);
1: 		return factory;
1: 	}
1: 
1: 	@Override
1: 	public void ungetService(Bundle bundle, ServiceRegistration<TrackingResourceProviderFactory<R>> registration,
1: 			TrackingResourceProviderFactory<R> service) {
1: 		factories.remove(service);
1: 		service.closeAll();
1: 	}
1: 	
1: 	public void close() {
1: 		factories.stream()
1: 			.forEach(r -> r.closeAll());
1: 	}
1: 	
1: 	protected abstract TrackingResourceProviderFactory<R> 
1: 		getTrackingResourceManagerProviderFactory();
1: }
============================================================================