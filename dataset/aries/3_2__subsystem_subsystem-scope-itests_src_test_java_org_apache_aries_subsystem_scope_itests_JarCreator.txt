1:1869a9f: /*
1:1869a9f:  * Licensed to the Apache Software Foundation (ASF) under one
1:1869a9f:  * or more contributor license agreements.  See the NOTICE file
1:1869a9f:  * distributed with this work for additional information
1:1869a9f:  * regarding copyright ownership.  The ASF licenses this file
1:1869a9f:  * to you under the Apache License, Version 2.0 (the
1:1869a9f:  * "License"); you may not use this file except in compliance
1:1869a9f:  * with the License.  You may obtain a copy of the License at
1:1869a9f:  *
1:1869a9f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1869a9f:  *
1:1869a9f:  * Unless required by applicable law or agreed to in writing,
1:1869a9f:  * software distributed under the License is distributed on an
1:1869a9f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1869a9f:  * KIND, either express or implied.  See the License for the
1:1869a9f:  * specific language governing permissions and limitations
1:1869a9f:  * under the License.
1:1869a9f:  */
1:e9f9bca: package org.apache.aries.subsystem.scope.itests;
1:1869a9f: 
1:1869a9f: import java.io.File;
1:1869a9f: import java.io.FileOutputStream;
1:1869a9f: import java.util.jar.Attributes;
1:1869a9f: import java.util.jar.JarInputStream;
1:1869a9f: import java.util.jar.JarOutputStream;
1:1869a9f: import java.util.jar.Manifest;
1:1869a9f: import java.util.zip.ZipEntry;
1:1869a9f: 
1:1869a9f: import org.osgi.framework.Constants;
1:1869a9f: 
1:1869a9f: /**
1:1869a9f:  * create multiple version of the same jars for testing purpose 
1:1869a9f:  * as OSGi require install bundles have unique jar by symbolicname and version.
1:1869a9f:  *
1:1869a9f:  */
1:1869a9f: public class JarCreator
1:1869a9f: {
1:1869a9f:   public static void main(String[] args) throws Exception{
1:1869a9f:     createJar("1.0.0");
1:1869a9f:     createJar("2.0.0");
1:1869a9f:   }
1:1869a9f: 
1:1869a9f:   private static void createJar(String version) throws Exception {
1:e9f9bca:     createJarFromFile("../subsystem-example/subsystem-helloIsolation/target/org.apache.aries.subsystem.example.helloIsolation-0.4-SNAPSHOT.jar", version);
1:e9f9bca:     createJarFromFile("../subsystem-example/subsystem-helloIsolationRef/target/org.apache.aries.subsystem.example.helloIsolationRef-0.4-SNAPSHOT.jar", version);
1:1869a9f:   }
1:1869a9f:   private static void createJarFromFile(String fileName, String version) throws Exception {
1:1869a9f:     JarOutputStream jos = null;
1:1869a9f:     FileOutputStream fos = null;
1:1869a9f:     ZipEntry entry = null;
1:1869a9f:     try {
1:1869a9f:       // let's get hold of jars on disk
1:1869a9f:       File jarFile = new File(fileName);
1:1869a9f:       JarInputStream jarInput = new JarInputStream(jarFile.toURL().openStream());
1:1869a9f:       Manifest manifest = jarInput.getManifest();
1:1869a9f:       
1:1869a9f:       //update manifest, Bundle-Version
1:1869a9f:       Attributes attr = manifest.getMainAttributes();
1:1869a9f:       attr.putValue(Constants.BUNDLE_VERSION, version);
1:1869a9f:       if (fileName.indexOf("helloIsolationRef") < 0) {
1:1869a9f:           attr.putValue(Constants.EXPORT_PACKAGE, "org.apache.aries.subsystem.example.helloIsolation;uses:=\"org.osgi.util.tracker,org.osgi.framework\";version=" + version);
1:1869a9f:       }
1:1869a9f:       
1:1869a9f:       int lastSlash = fileName.lastIndexOf("/");
1:1869a9f:       // trim the path
1:1869a9f:       fileName = fileName.substring(lastSlash + 1);
1:1869a9f:       int loc = fileName.indexOf("-");
1:1869a9f:       String jarFilePath = fileName.substring(0, loc + 1) + version + ".jar";
1:1869a9f:       
1:1869a9f:       if (fileName.indexOf("helloIsolationRef") < 0) {
1:1869a9f:           File directory = new File(System.getProperty("user.home") + "/.m2/repository/org/apache/aries/subsystem/example/org.apache.aries.subsystem.example.helloIsolation/" + version + "/");
1:1869a9f:           if (!directory.exists()) {
1:1869a9f:               directory.mkdir();
1:1869a9f:           }
1:1869a9f:           fos = new FileOutputStream(directory.getAbsolutePath() + "/" + jarFilePath);
1:1869a9f:       } else {
1:1869a9f:           File directory = new File(System.getProperty("user.home") + "/.m2/repository/org/apache/aries/subsystem/example/org.apache.aries.subsystem.example.helloIsolationRef/" + version + "/");
1:1869a9f:           if (!directory.exists()) {
1:1869a9f:               directory.mkdir();
1:1869a9f:           }
1:1869a9f:           fos = new FileOutputStream(directory.getAbsolutePath() + "/" + jarFilePath);  
1:1869a9f:       }
1:1869a9f:       jos = new JarOutputStream(fos, manifest);
1:1869a9f:       
1:1869a9f:       //Copy across all entries from the original jar
1:1869a9f:       int val;
1:1869a9f:       while ((entry = jarInput.getNextEntry()) != null) {
1:1869a9f:         jos.putNextEntry(entry);
1:1869a9f:         byte[] buffer = new byte[4096];
1:1869a9f:         while ((val = jarInput.read(buffer)) != -1)
1:1869a9f:           jos.write(buffer, 0, val);
1:1869a9f:       }
1:1869a9f:       
1:1869a9f:       jos.closeEntry();
1:1869a9f:       jos.finish();
1:1869a9f:       System.out.println("finishing creating jar file: " + jarFilePath + " in local m2 repo");
1:1869a9f:     } finally {
1:1869a9f:       if (jos != null) {
1:1869a9f:         jos.close();
1:1869a9f:       }
1:1869a9f:       if (fos != null) {
1:1869a9f:         fos.close();
1:1869a9f:       }
1:1869a9f:     }
1:1869a9f:   }
1:1869a9f: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
/////////////////////////////////////////////////////////////////////////
1:     createJarFromFile("../subsystem-example/subsystem-helloIsolation/target/org.apache.aries.subsystem.example.helloIsolation-0.4-SNAPSHOT.jar", version);
1:     createJarFromFile("../subsystem-example/subsystem-helloIsolationRef/target/org.apache.aries.subsystem.example.helloIsolationRef-0.4-SNAPSHOT.jar", version);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:ba3e773
/////////////////////////////////////////////////////////////////////////
0:     createJarFromFile("../subsystem-example/subsystem-helloIsolation/target/org.apache.aries.subsystem.example.helloIsolation-0.3-SNAPSHOT.jar", version);
0:     createJarFromFile("../subsystem-example/subsystem-helloIsolationRef/target/org.apache.aries.subsystem.example.helloIsolationRef-0.3-SNAPSHOT.jar", version);
author:Lin Sun
-------------------------------------------------------------------------------
commit:1869a9f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.subsystem.itests;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarInputStream;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: 
1: import org.osgi.framework.Constants;
1: 
1: /**
1:  * create multiple version of the same jars for testing purpose 
1:  * as OSGi require install bundles have unique jar by symbolicname and version.
1:  *
1:  */
1: public class JarCreator
1: {
1:   public static void main(String[] args) throws Exception{
1:     createJar("1.0.0");
1:     createJar("2.0.0");
1:   }
1: 
1:   private static void createJar(String version) throws Exception {
0:     createJarFromFile("../subsystem-example/subsystem-helloIsolation/target/org.apache.aries.subsystem.example.helloIsolation-0.3-incubating-SNAPSHOT.jar", version);
0:     createJarFromFile("../subsystem-example/subsystem-helloIsolationRef/target/org.apache.aries.subsystem.example.helloIsolationRef-0.3-incubating-SNAPSHOT.jar", version);
1:   }
1:   private static void createJarFromFile(String fileName, String version) throws Exception {
1:     JarOutputStream jos = null;
1:     FileOutputStream fos = null;
1:     ZipEntry entry = null;
1:     try {
1:       // let's get hold of jars on disk
1:       File jarFile = new File(fileName);
1:       JarInputStream jarInput = new JarInputStream(jarFile.toURL().openStream());
1:       Manifest manifest = jarInput.getManifest();
1:       
1:       //update manifest, Bundle-Version
1:       Attributes attr = manifest.getMainAttributes();
1:       attr.putValue(Constants.BUNDLE_VERSION, version);
1:       if (fileName.indexOf("helloIsolationRef") < 0) {
1:           attr.putValue(Constants.EXPORT_PACKAGE, "org.apache.aries.subsystem.example.helloIsolation;uses:=\"org.osgi.util.tracker,org.osgi.framework\";version=" + version);
1:       }
1:       
1:       int lastSlash = fileName.lastIndexOf("/");
1:       // trim the path
1:       fileName = fileName.substring(lastSlash + 1);
1:       int loc = fileName.indexOf("-");
1:       String jarFilePath = fileName.substring(0, loc + 1) + version + ".jar";
1:       
1:       if (fileName.indexOf("helloIsolationRef") < 0) {
1:           File directory = new File(System.getProperty("user.home") + "/.m2/repository/org/apache/aries/subsystem/example/org.apache.aries.subsystem.example.helloIsolation/" + version + "/");
1:           if (!directory.exists()) {
1:               directory.mkdir();
1:           }
1:           fos = new FileOutputStream(directory.getAbsolutePath() + "/" + jarFilePath);
1:       } else {
1:           File directory = new File(System.getProperty("user.home") + "/.m2/repository/org/apache/aries/subsystem/example/org.apache.aries.subsystem.example.helloIsolationRef/" + version + "/");
1:           if (!directory.exists()) {
1:               directory.mkdir();
1:           }
1:           fos = new FileOutputStream(directory.getAbsolutePath() + "/" + jarFilePath);  
1:       }
1:       jos = new JarOutputStream(fos, manifest);
1:       
1:       //Copy across all entries from the original jar
1:       int val;
1:       while ((entry = jarInput.getNextEntry()) != null) {
1:         jos.putNextEntry(entry);
1:         byte[] buffer = new byte[4096];
1:         while ((val = jarInput.read(buffer)) != -1)
1:           jos.write(buffer, 0, val);
1:       }
1:       
1:       jos.closeEntry();
1:       jos.finish();
1:       System.out.println("finishing creating jar file: " + jarFilePath + " in local m2 repo");
1:     } finally {
1:       if (jos != null) {
1:         jos.close();
1:       }
1:       if (fos != null) {
1:         fos.close();
1:       }
1:     }
1:   }
1: }
============================================================================