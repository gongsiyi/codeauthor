1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_LOCATION;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_SYMBOLIC_NAME;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.EVENT;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.SERVICE_EVENT_TYPE;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceEvent;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.osgi.jmx.framework.ServiceStateMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  <p>
1:fdf3952:  * <tt>ServiceEventData</tt> represents ServiceEvent Type @see {@link ServiceStateMBean#SERVICE_EVENT_TYPE}.
1:fdf3952:  * It is a codec for the <code>CompositeData</code> representing an OSGi ServiceEvent.
1:fdf3952:  * </p>
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ServiceEventData {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#IDENTIFIER_ITEM
1:fdf3952:      */
1:fdf3952:     private long serviceId;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#OBJECT_CLASS_ITEM
1:fdf3952:      */
1:fdf3952:     private String[] serviceInterfaces;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#BUNDLE_IDENTIFIER_ITEM
1:fdf3952:      */
1:fdf3952:     private long bundleId;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#BUNDLE_LOCATION_ITEM
1:fdf3952:      */
1:fdf3952:     private String bundleLocation;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#BUNDLE_SYMBOLIC_NAME_ITEM
1:fdf3952:      */
1:fdf3952:     private String bundleSymbolicName;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see ServiceStateMBean#EVENT_ITEM
1:fdf3952:      */
1:fdf3952:     private int eventType;
1:fdf3952:     
1:fdf3952:     
1:fdf3952:     private ServiceEventData(){
1:fdf3952:         super();
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public ServiceEventData(ServiceEvent serviceEvent) {
1:b6ff6c1:         @SuppressWarnings("rawtypes")
1:fdf3952:         ServiceReference serviceReference = serviceEvent.getServiceReference();
1:fdf3952:         this.serviceId = (Long) serviceReference.getProperty(Constants.SERVICE_ID);
1:fdf3952:         this.serviceInterfaces = (String[]) serviceReference.getProperty(Constants.OBJECTCLASS);
1:fdf3952:         this.eventType = serviceEvent.getType();
1:b6ff6c1:         Bundle bundle = serviceReference.getBundle();
1:b6ff6c1:         if (bundle != null) {
1:b6ff6c1:             this.bundleId = bundle.getBundleId();
1:b6ff6c1:             this.bundleLocation = bundle.getLocation();
1:b6ff6c1:             this.bundleSymbolicName = bundle.getSymbolicName();
1:b6ff6c1:         }
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Returns CompositeData representing a ServiceEvent typed by {@link ServiceStateMBean#SERVICE_EVENT_TYPE}.
1:fdf3952:      * @return
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         CompositeData result = null;
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(IDENTIFIER, this.serviceId);
1:fdf3952:         items.put(OBJECT_CLASS, this.serviceInterfaces);
1:fdf3952:         items.put(BUNDLE_IDENTIFIER, this.bundleId);
1:fdf3952:         items.put(BUNDLE_LOCATION, this.bundleLocation);
1:fdf3952:         items.put(BUNDLE_SYMBOLIC_NAME, this.bundleSymbolicName);
1:fdf3952:         items.put(EVENT, this.eventType);
1:fdf3952:         try {
1:fdf3952:             result = new CompositeDataSupport(SERVICE_EVENT_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Failed to create CompositeData for ServiceEvent for Service [" + this.serviceId + "]", e);
1:fdf3952:         }
1:fdf3952:         return result;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Returns a <code>ServiceEventData</code> representation of the given compositeData
1:fdf3952:      * @param compositeData
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if the compositeData is null or incorrect type
1:fdf3952:      */
1:fdf3952:     public static ServiceEventData from(CompositeData compositeData) throws IllegalArgumentException {
1:fdf3952:         ServiceEventData serviceEventData = new ServiceEventData();
1:fdf3952:         if ( compositeData == null ) {
1:fdf3952:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:fdf3952:         }
1:fdf3952:         if (!compositeData.getCompositeType().equals(SERVICE_EVENT_TYPE)) {
1:fdf3952:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:fdf3952:         }
1:fdf3952:         serviceEventData.serviceId = (Long) compositeData.get(IDENTIFIER);
1:fdf3952:         serviceEventData.serviceInterfaces = (String[]) compositeData.get(OBJECT_CLASS);
1:fdf3952:         serviceEventData.bundleId = (Long) compositeData.get(BUNDLE_IDENTIFIER);
1:fdf3952:         serviceEventData.bundleLocation = (String) compositeData.get(BUNDLE_LOCATION);
1:fdf3952:         serviceEventData.bundleSymbolicName = (String) compositeData.get(BUNDLE_SYMBOLIC_NAME);
1:fdf3952:         serviceEventData.eventType = (Integer) compositeData.get(EVENT);
1:fdf3952:         return serviceEventData;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public long getServiceId() {
1:fdf3952:         return serviceId;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public String[] getServiceInterfaces() {
1:fdf3952:         return serviceInterfaces;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public long getBundleId() {
1:fdf3952:         return bundleId;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public String getBundleLocation() {
1:fdf3952:         return bundleLocation;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public String getBundleSymbolicName() {
1:fdf3952:         return bundleSymbolicName;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     public int getEventType() {
1:fdf3952:         return eventType;
1:fdf3952:     }
1:fdf3952:     
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:b6ff6c1
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("rawtypes")
1:         Bundle bundle = serviceReference.getBundle();
1:         if (bundle != null) {
1:             this.bundleId = bundle.getBundleId();
1:             this.bundleLocation = bundle.getLocation();
1:             this.bundleSymbolicName = bundle.getSymbolicName();
1:         }
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
1: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_LOCATION;
1: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_SYMBOLIC_NAME;
1: import static org.osgi.jmx.framework.ServiceStateMBean.EVENT;
1: import static org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER;
1: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
1: import static org.osgi.jmx.framework.ServiceStateMBean.SERVICE_EVENT_TYPE;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.jmx.framework.ServiceStateMBean;
1: 
1: /**
1:  <p>
1:  * <tt>ServiceEventData</tt> represents ServiceEvent Type @see {@link ServiceStateMBean#SERVICE_EVENT_TYPE}.
1:  * It is a codec for the <code>CompositeData</code> representing an OSGi ServiceEvent.
1:  * </p>
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ServiceEventData {
1: 
1:     /**
1:      * @see ServiceStateMBean#IDENTIFIER_ITEM
1:      */
1:     private long serviceId;
1:     
1:     /**
1:      * @see ServiceStateMBean#OBJECT_CLASS_ITEM
1:      */
1:     private String[] serviceInterfaces;
1:     
1:     /**
1:      * @see ServiceStateMBean#BUNDLE_IDENTIFIER_ITEM
1:      */
1:     private long bundleId;
1:     
1:     /**
1:      * @see ServiceStateMBean#BUNDLE_LOCATION_ITEM
1:      */
1:     private String bundleLocation;
1:     
1:     /**
1:      * @see ServiceStateMBean#BUNDLE_SYMBOLIC_NAME_ITEM
1:      */
1:     private String bundleSymbolicName;
1:     
1:     /**
1:      * @see ServiceStateMBean#EVENT_ITEM
1:      */
1:     private int eventType;
1:     
1:     
1:     private ServiceEventData(){
1:         super();
1:     }
1:     
1:     public ServiceEventData(ServiceEvent serviceEvent) {
1:         ServiceReference serviceReference = serviceEvent.getServiceReference();
1:         this.serviceId = (Long) serviceReference.getProperty(Constants.SERVICE_ID);
1:         this.serviceInterfaces = (String[]) serviceReference.getProperty(Constants.OBJECTCLASS);
0:         Bundle bundle = serviceReference.getBundle();
0:         this.bundleId = bundle.getBundleId();
0:         this.bundleLocation = bundle.getLocation();
0:         this.bundleSymbolicName = bundle.getSymbolicName();
1:         this.eventType = serviceEvent.getType();
1:     }
1:     
1:     /**
1:      * Returns CompositeData representing a ServiceEvent typed by {@link ServiceStateMBean#SERVICE_EVENT_TYPE}.
1:      * @return
1:      */
1:     public CompositeData toCompositeData() {
1:         CompositeData result = null;
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(IDENTIFIER, this.serviceId);
1:         items.put(OBJECT_CLASS, this.serviceInterfaces);
1:         items.put(BUNDLE_IDENTIFIER, this.bundleId);
1:         items.put(BUNDLE_LOCATION, this.bundleLocation);
1:         items.put(BUNDLE_SYMBOLIC_NAME, this.bundleSymbolicName);
1:         items.put(EVENT, this.eventType);
1:         try {
1:             result = new CompositeDataSupport(SERVICE_EVENT_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Failed to create CompositeData for ServiceEvent for Service [" + this.serviceId + "]", e);
1:         }
1:         return result;
1:     }
1:     
1:     /**
1:      * Returns a <code>ServiceEventData</code> representation of the given compositeData
1:      * @param compositeData
1:      * @return
1:      * @throws IllegalArgumentException if the compositeData is null or incorrect type
1:      */
1:     public static ServiceEventData from(CompositeData compositeData) throws IllegalArgumentException {
1:         ServiceEventData serviceEventData = new ServiceEventData();
1:         if ( compositeData == null ) {
1:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:         }
1:         if (!compositeData.getCompositeType().equals(SERVICE_EVENT_TYPE)) {
1:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:         }
1:         serviceEventData.serviceId = (Long) compositeData.get(IDENTIFIER);
1:         serviceEventData.serviceInterfaces = (String[]) compositeData.get(OBJECT_CLASS);
1:         serviceEventData.bundleId = (Long) compositeData.get(BUNDLE_IDENTIFIER);
1:         serviceEventData.bundleLocation = (String) compositeData.get(BUNDLE_LOCATION);
1:         serviceEventData.bundleSymbolicName = (String) compositeData.get(BUNDLE_SYMBOLIC_NAME);
1:         serviceEventData.eventType = (Integer) compositeData.get(EVENT);
1:         return serviceEventData;
1:     }
1:     
1:     public long getServiceId() {
1:         return serviceId;
1:     }
1:     
1:     public String[] getServiceInterfaces() {
1:         return serviceInterfaces;
1:     }
1:     
1:     public long getBundleId() {
1:         return bundleId;
1:     }
1:     
1:     public String getBundleLocation() {
1:         return bundleLocation;
1:     }
1:     
1:     public String getBundleSymbolicName() {
1:         return bundleSymbolicName;
1:     }
1:     
1:     public int getEventType() {
1:         return eventType;
1:     }
1:     
1: }
============================================================================