1:6aa0635: /*
1:6aa0635:  * Licensed to the Apache Software Foundation (ASF) under one
1:6aa0635:  * or more contributor license agreements.  See the NOTICE file
1:6aa0635:  * distributed with this work for additional information
1:6aa0635:  * regarding copyright ownership.  The ASF licenses this file
1:6aa0635:  * to you under the Apache License, Version 2.0 (the
1:6aa0635:  * "License"); you may not use this file except in compliance
1:6aa0635:  * with the License.  You may obtain a copy of the License at
1:6aa0635:  *
1:6aa0635:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6aa0635:  *
1:6aa0635:  * Unless required by applicable law or agreed to in writing,
1:6aa0635:  * software distributed under the License is distributed on an
1:6aa0635:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6aa0635:  * KIND, either express or implied.  See the License for the
1:6aa0635:  * specific language governing permissions and limitations
1:6aa0635:  * under the License.
2:6aa0635:  */
1:f9b43fb: 
1:6aa0635: package org.apache.aries.versioning.utils;
1:f9b43fb: 
1:f9b43fb: import java.util.Collection;
1:f9b43fb: import java.util.HashMap;
1:f9b43fb: import java.util.Map;
1:f9b43fb: 
1:9d710d0: import org.objectweb.asm.Opcodes;
1:9d710d0: 
1:9822203: public class SemanticVersioningUtils {
1:f9b43fb: 
1:f9b43fb:     public static final String classExt = ".class";
1:f9b43fb:     public static final String javaExt = ".java";
1:f9b43fb:     public static final String schemaExt = ".xsd";
1:f9b43fb:     public static final String jarExt = ".jar";
1:c573eea: 
8:6aa0635:     
1:f9b43fb:     public static final String CONSTRUTOR = "<init>";
1:f9b43fb:     public static final String MAJOR_CHANGE = "major";
1:f9b43fb:     public static final String MINOR_CHANGE = "minor";
1:f9b43fb:     public static final String NO_CHANGE = "no";
1:c573eea:     
1:f9b43fb:     public static final String oneLineBreak = "\r\n";
1:f9b43fb:     public static final String twoLineBreaks = oneLineBreak + oneLineBreak;
1:9822203:     public static final String PROPERTY_FILE_IDENTIFIER = "java/util/ListResourceBundle";
1:9822203:     public static final String CLINIT = "<clinit>";
1:9822203:     public static final String SERIALIZABLE_CLASS_IDENTIFIER = "java/io/Serializable";
1:9822203:     public static final String SERIAL_VERSION_UTD = "serialVersionUID";
1:9822203:     public static final String ENUM_CLASS = "java/lang/Enum";
1:9d710d0:     public static final int ASM4 = Opcodes.ASM4;
1:6aa0635: 
1:6aa0635:     public static boolean isLessAccessible(GenericDeclaration before, GenericDeclaration after) {
1:6aa0635: 
1:6aa0635:         if (before.getAccess() == after.getAccess()) {
1:6aa0635:             return false;
7:6aa0635:         }
1:6aa0635:         //When it reaches here, the two access are different. Let's make sure the whether the after field has less access than the before field.
1:9822203:         if (before.isPublic()) {
1:6aa0635:             if (!!!after.isPublic()) {
1:6aa0635:                 return true;
1:6aa0635:             }
1:6aa0635:         } else if (before.isProtected()) {
1:6aa0635:             if (!!!(after.isPublic() || after.isProtected())) {
1:6aa0635:                 return true;
1:6aa0635:             }
1:6aa0635:         } else {
1:6aa0635:             if (!!!before.isPrivate()) {
1:6aa0635:                 // the field is package level.
1:6aa0635:                 if (after.isPrivate()) {
1:6aa0635:                     return true;
1:6aa0635:                 }
1:6aa0635:             }
1:6aa0635:         }
1:f9b43fb: 
1:6aa0635:         return false;
1:6aa0635:     }
1:6aa0635: 
1:f9b43fb:     /**
1:f9b43fb:      * ASM Type descriptor look up table
1:f9b43fb:      *
1:f9b43fb:      * @author emily
1:f9b43fb:      */
1:f9b43fb:     private enum TypeDescriptor{
1:9822203:         I("int"), Z("boolean"), C("char"), B("byte"),
1:f9b43fb:                 S("short"), F("float"), J("long"), D("double"), V("void");
1:6aa0635: 
1:f9b43fb:         String desc;
1:9822203:         TypeDescriptor(String desc)
2:6aa0635:         {
1:f9b43fb:             this.desc = desc;
1:f9b43fb:         }
1:6aa0635: 
1:9822203:     String getDesc() {
1:f9b43fb:         return desc;
1:f9b43fb:     }
1:6aa0635: 
1:f9b43fb:     private static final Map<String, TypeDescriptor> stringToEnum = new HashMap<String, TypeDescriptor>();
1:6aa0635: 
1:f9b43fb:     static {
1:f9b43fb:         for (TypeDescriptor td : values()) {
1:f9b43fb:             stringToEnum.put(td.toString(), td);
1:f9b43fb:         }
1:f9b43fb:     }
1:6aa0635: 
1:f9b43fb:     public static TypeDescriptor fromString(String symbol) {
1:f9b43fb:         return stringToEnum.get(symbol);
1:f9b43fb:     }
1:f9b43fb: 
1:f9b43fb: }
1:6aa0635: 
2:6aa0635:     /**
1:6aa0635:      * Transform ASM method desc to a human readable form
1:f9b43fb:      * Method declaration in source file Method descriptor
1:029ebe3:      * <pre>
1:029ebe3:      * void m(int i, float f) &lt;= (IF)V
1:029ebe3:      * int m(Object o) &lt;= (Ljava/lang/Object;)I
1:029ebe3:      * int[] m(int i, String s) &lt;= (ILjava/lang/String;)[I
1:029ebe3:      * Object m(int[] i) &lt;= ([I)Ljava/lang/Object;
1:029ebe3:      * </pre>
1:6aa0635:      */
1:9822203:     public static String getReadableMethodSignature(String methodName, String methodDesc) {
1:6aa0635:         // need to find the return type first, which is outside the ()
1:6aa0635:         int lastBrace = methodDesc.lastIndexOf(")");
1:f9b43fb: 
1:6aa0635:         // parameter
1:6aa0635:         StringBuilder methodSignature = new StringBuilder();
1:6aa0635:         if (lastBrace == -1) {
1:f9b43fb:             // this is odd, don't attempt to transform. Just return back. Won't happen unless byte code weaving is not behaving.
1:6aa0635:             return "method " + methodName + methodDesc;
1:6aa0635:         }
1:6aa0635:         String param = methodDesc.substring(1, lastBrace);
1:f9b43fb:         if (CONSTRUTOR.equals(methodName)) {
1:6aa0635:             //This means the method is a constructor. In the binary form, the constructor carries a name 'init'. Let's use the source
1:6aa0635:             // code proper name
1:6aa0635:             methodSignature.append("constructor with parameter list ");
1:6aa0635:         } else {
1:6aa0635:             String returnType = methodDesc.substring(lastBrace + 1);
1:6aa0635:             methodSignature.append("method ");
1:6aa0635:             methodSignature.append(transform(returnType));
1:6aa0635:             methodSignature.append(" ");
1:6aa0635:             methodSignature.append(methodName);
1:6aa0635:         }
1:6aa0635:         // add the paramether list
1:6aa0635:         methodSignature.append("(");
1:6aa0635:         methodSignature.append(transform(param));
1:6aa0635:         methodSignature.append(")");
1:6aa0635:         return methodSignature.toString();
1:6aa0635:     }
1:6aa0635: 
1:9822203:     public static String transform(String asmDesc) {
1:6aa0635:         String separator = ", ";
1:6aa0635:         int brkCount = 0;
1:6aa0635:         StringBuilder returnStr = new StringBuilder();
1:6aa0635:         //remove the '['s
1:f9b43fb: 
1:6aa0635:         while (asmDesc.length() > 0) {
1:9822203:             while (asmDesc.startsWith("[")) {
1:6aa0635:                 asmDesc = asmDesc.substring(1);
1:9822203:                 brkCount++;
1:6aa0635:             }
1:6aa0635:             while (asmDesc.startsWith("L")) {
1:6aa0635:                 //remove the L and ;
1:6aa0635:                 int semiColonIndex = asmDesc.indexOf(";");
1:f9b43fb: 
1:f9b43fb: 
1:f9b43fb:                 if (semiColonIndex == -1) {
1:f9b43fb:                     //This is odd. The asm binary code is invalid. Do not attempt to transform.
1:f9b43fb:                     return asmDesc;
1:f9b43fb:                 }
1:6aa0635:                 returnStr.append(asmDesc.substring(1, semiColonIndex));
1:6aa0635:                 asmDesc = asmDesc.substring(semiColonIndex + 1);
1:9822203:                 for (int index = 0; index < brkCount; index++) {
1:6aa0635:                     returnStr.append("[]");
1:6aa0635:                 }
1:9822203:                 brkCount = 0;
1:6aa0635:                 returnStr.append(separator);
1:6aa0635:             }
1:f9b43fb: 
1:6aa0635:             TypeDescriptor td = null;
1:9822203:             while ((asmDesc.length() > 0) && (td = TypeDescriptor.fromString(asmDesc.substring(0, 1))) != null) {
1:f9b43fb: 
1:6aa0635:                 returnStr.append(td.getDesc());
1:9822203:                 for (int index = 0; index < brkCount; index++) {
1:6aa0635:                     returnStr.append("[]");
1:6aa0635:                 }
1:9822203:                 brkCount = 0;
1:6aa0635:                 returnStr.append(separator);
1:6aa0635:                 asmDesc = asmDesc.substring(1);
1:6aa0635:             }
1:6aa0635: 
1:6aa0635: 
1:6aa0635:         }
1:6aa0635:         String finalStr = returnStr.toString();
1:9822203:         if (finalStr.endsWith(separator)) {
1:6aa0635:             finalStr = finalStr.substring(0, finalStr.lastIndexOf(separator));
1:6aa0635:         }
1:f9b43fb:         //replace "/" with "." as bytecode uses / in the package names
1:f9b43fb:         finalStr = finalStr.replaceAll("/", ".");
1:6aa0635:         return finalStr;
1:6aa0635:     }
1:6aa0635: 
1:f9b43fb:     /**
1:f9b43fb:      * Return whether the binary is property file. If the binary implements the interface of java.util.ListResourceBundle
1:6aa0635:      *
1:f9b43fb:      * @param cd
1:f9b43fb:      * @return
1:f9b43fb:      */
1:9822203:     public static boolean isPropertyFile(ClassDeclaration cd) {
1:f9b43fb:         Collection<String> supers = cd.getAllSupers();
1:f9b43fb:         return (supers.contains(PROPERTY_FILE_IDENTIFIER));
1:f9b43fb:     }
1:f9b43fb: 
1:6aa0635: 
1:6aa0635: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:029ebe3
/////////////////////////////////////////////////////////////////////////
1:      * <pre>
1:      * void m(int i, float f) &lt;= (IF)V
1:      * int m(Object o) &lt;= (Ljava/lang/Object;)I
1:      * int[] m(int i, String s) &lt;= (ILjava/lang/String;)[I
1:      * Object m(int[] i) &lt;= ([I)Ljava/lang/Object;
1:      * </pre>
author:Emily Jiang
-------------------------------------------------------------------------------
commit:c573eea
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     
commit:9d710d0
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.Opcodes;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static final int ASM4 = Opcodes.ASM4;
commit:f9b43fb
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1:  
1:   public static final String classExt = ".class";
1:   public static final String javaExt = ".java";
1:   public static final String schemaExt = ".xsd";
1:   public static final String jarExt = ".jar";
0:   public static final String SEVERITY_2 = "2";
0:   public static final String SEVERITY_3 = "3";
0:   public static final String SEVERITY_4 = "4";
1:   public static final String CONSTRUTOR = "<init>";
1:   public static final String MAJOR_CHANGE = "major";
1:   public static final String MINOR_CHANGE = "minor";
1:   public static final String NO_CHANGE = "no";
0:   public static final String REVERT_CHANGE = "revert the changes";
1:   public static final String oneLineBreak = "\r\n";
0:   public static final String htmlOneLineBreak = "&#13;&#10;";
0:   public static final String htmlTwoLineBreaks = htmlOneLineBreak + htmlOneLineBreak;
1:   public static final String twoLineBreaks = oneLineBreak + oneLineBreak;
0:   public static final String PROPERTY_FILE_IDENTIFIER="java/util/ListResourceBundle";
0:   public static final String CLINIT="<clinit>";
0:   public static final String SERIALIZABLE_CLASS_IDENTIFIER="java/io/Serializable";
0:   public static final String SERIAL_VERSION_UTD="serialVersionUID";
0:   public static final String ENUM_CLASS="java/lang/Enum";
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * ASM Type descriptor look up table
1:    * @author emily
1:    *
1:    */
1:   private enum TypeDescriptor{
0:      I("int"), Z("boolean"),  C("char"), B("byte"), 
1:      S("short"), F("float"), J("long"), D("double"), V("void");
1:      String desc;
0:      TypeDescriptor(String desc) {
1:        this.desc = desc;
1:      }
0:      String getDesc(){
1:        return desc;
1:      }
1:      private static final Map<String, TypeDescriptor> stringToEnum = new HashMap<String, TypeDescriptor>();
1:      static {
1:        for (TypeDescriptor td : values()) {
1:          stringToEnum.put(td.toString(), td);
1:        }
1:      }
1:      public static TypeDescriptor fromString(String symbol) {
1:        return stringToEnum.get(symbol);
1:      }
1:      
1:   }
1:    * Method declaration in source file Method descriptor
0:    * @param methodName
0:    * @param methodDesc
1:    
1:       // this is odd, don't attempt to transform. Just return back. Won't happen unless byte code weaving is not behaving.
1:     if (CONSTRUTOR.equals(methodName)) {
/////////////////////////////////////////////////////////////////////////
0:   public static String transform(String asmDesc)
1:    
/////////////////////////////////////////////////////////////////////////
1:         
1:           
1:        if (semiColonIndex == -1) {
1:          //This is odd. The asm binary code is invalid. Do not attempt to transform.
1:          return asmDesc; 
1:        }
/////////////////////////////////////////////////////////////////////////
1:         
/////////////////////////////////////////////////////////////////////////
1:       
1:     //replace "/" with "." as bytecode uses / in the package names
1:     finalStr = finalStr.replaceAll("/", ".");
1:   /**
1:    * Return whether the binary is property file. If the binary implements the interface of java.util.ListResourceBundle
1:    * @param cd
1:    * @return
1:    */
0:   public static boolean isPropertyFile (ClassDeclaration cd) {
1:     Collection<String> supers = cd.getAllSupers();
1:     return (supers.contains(PROPERTY_FILE_IDENTIFIER));
1:   }
1:   
commit:6aa0635
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.versioning.utils;
1: 
0: import java.util.HashMap;
0: import java.util.Map;
1: 
0: public class SemanticVersioningUtils
1: {
1: 
0:   public static String classExt = ".class";
0:   public static String javaExt = ".java";
0:   public static String schemaExt = ".xsd";
0:   public static String jarExt = ".jar";
1: 
1:   public static boolean isLessAccessible(GenericDeclaration before, GenericDeclaration after) {
1: 
1:     if (before.getAccess() == after.getAccess()) {
1:       return false;
1:     }
1:     //When it reaches here, the two access are different. Let's make sure the whether the after field has less access than the before field.
0:     if (before.isPublic() ){
1:       if (!!!after.isPublic()) {
1:         return true;
1:       } 
1:     } else if (before.isProtected()) {
1:       if (!!!(after.isPublic() || after.isProtected())) {
1:         return true;
1:       }
1:     } else {
1:       if (!!!before.isPrivate()) {
1:         // the field is package level.
1:         if (after.isPrivate()) {
1:           return true;
1:         }
1:       }
1:     }
1: 
1:     return false;
1:   }
1: 
1:   /**
1:    * Transform ASM method desc to a human readable form
0:    * e.g.
0:    * void m(int i, float f) <= (IF)V
0:    * int m(Object o) <= (Ljava/lang/Object;)I
0:    * int[] m(int i, String s) <= (ILjava/lang/String;)[I
0:    * Object m(int[] i) <= ([I)Ljava/lang/Object;
0:    * @param methodName method name
0:    * @param methodDesc binary form method description
0:    * @return
1:    */
0:   public static String getReadableMethodSignature( String methodName, String methodDesc) {
1:     // need to find the return type first, which is outside the ()
1:     int lastBrace = methodDesc.lastIndexOf(")");
0:     String constructorSymbol = "<init>";
1:     // parameter
1:     StringBuilder methodSignature = new StringBuilder();
1:     if (lastBrace == -1) {
0:       // This is odd, don't attempt to transform. Just return back. Won't happen unless byte code weaving is not behaving.
1:       return "method " + methodName + methodDesc;
1:     }
1:     String param = methodDesc.substring(1, lastBrace);
0:     if (constructorSymbol.equals(methodName)) {
1:       //This means the method is a constructor. In the binary form, the constructor carries a name 'init'. Let's use the source
1:       // code proper name
1:       methodSignature.append("constructor with parameter list ");
1:     } else {
1:       String returnType = methodDesc.substring(lastBrace + 1);
1:       methodSignature.append("method ");
1:       methodSignature.append(transform(returnType));
1:       methodSignature.append(" ");
1:       methodSignature.append(methodName);
1:     }
1:     // add the paramether list
1:     methodSignature.append("(");
1:     methodSignature.append(transform(param));
1:     methodSignature.append(")");
1:     return methodSignature.toString();
1:   }
1: 
1:   /**
0:    * ASM Type descriptor look up table
0:    * @author emily
1:    *
1:    */
0:   private enum TypeDescriptor{
0:     I("int"), Z("boolean"),  C("char"), B("byte"), 
0:     S("short"), F("float"), J("long"), D("double"), V("void");
1: 
0:     String desc;
0:     TypeDescriptor(String desc) {
0:       this.desc = desc;
1:     }
0:     String getDesc(){
0:       return desc;
1:     }
0:     private static final Map<String, TypeDescriptor> stringToEnum = new HashMap<String, TypeDescriptor>();
0:     static {
0:       for (TypeDescriptor td : values()) {
0:         stringToEnum.put(td.toString(), td);
1:       }
1:     }
0:     public static TypeDescriptor fromString(String symbol) {
0:       return stringToEnum.get(symbol);
1:     }
1: 
1:   }
0:   private static String transform(String asmDesc)
1:   {
1:     String separator = ", ";
1:     int brkCount = 0;
1:     StringBuilder returnStr = new StringBuilder();
1:     //remove the '['s
1: 
1:     while (asmDesc.length() > 0) {
0:       while(asmDesc.startsWith("[")){
1:         asmDesc = asmDesc.substring(1);
0:         brkCount ++;
1:       }
1:       while (asmDesc.startsWith("L")) {
1:         //remove the L and ;
1:         int semiColonIndex = asmDesc.indexOf(";");
1: 
1: 
1: 
1:         returnStr.append(asmDesc.substring(1, semiColonIndex));
1:         asmDesc = asmDesc.substring(semiColonIndex + 1);
0:         for (int index =0; index < brkCount; index ++) {
1:           returnStr.append("[]");
1:         }
0:         brkCount =0;
1:         returnStr.append(separator);
1:       }
1: 
1:       TypeDescriptor td = null;
0:       while ( (asmDesc.length() > 0) && ( td = TypeDescriptor.fromString(asmDesc.substring(0,1))) != null) {
1: 
1:         returnStr.append(td.getDesc());
0:         for (int index =0; index < brkCount; index ++) {
1:           returnStr.append("[]");
1:         }
0:         brkCount =0;
1:         returnStr.append(separator);
1:         asmDesc = asmDesc.substring(1);
1:       } 
1: 
1: 
1:     }
1:     String finalStr = returnStr.toString();
0:     if (finalStr.endsWith(separator)){
1:       finalStr = finalStr.substring(0, finalStr.lastIndexOf(separator));
1:     }
1:     return finalStr;
1:   }
1: 
1: 
1: 
1: }
author:David Jencks
-------------------------------------------------------------------------------
commit:9822203
/////////////////////////////////////////////////////////////////////////
1: public class SemanticVersioningUtils {
0:     public static final String classExt = ".class";
0:     public static final String javaExt = ".java";
0:     public static final String schemaExt = ".xsd";
0:     public static final String jarExt = ".jar";
0:     public static final String SEVERITY_2 = "2";
0:     public static final String SEVERITY_3 = "3";
0:     public static final String SEVERITY_4 = "4";
0:     public static final String CONSTRUTOR = "<init>";
0:     public static final String MAJOR_CHANGE = "major";
0:     public static final String MINOR_CHANGE = "minor";
0:     public static final String NO_CHANGE = "no";
0:     public static final String REVERT_CHANGE = "revert the changes";
0:     public static final String oneLineBreak = "\r\n";
0:     public static final String htmlOneLineBreak = "&#13;&#10;";
0:     public static final String htmlTwoLineBreaks = htmlOneLineBreak + htmlOneLineBreak;
0:     public static final String twoLineBreaks = oneLineBreak + oneLineBreak;
1:     public static final String PROPERTY_FILE_IDENTIFIER = "java/util/ListResourceBundle";
1:     public static final String CLINIT = "<clinit>";
1:     public static final String SERIALIZABLE_CLASS_IDENTIFIER = "java/io/Serializable";
1:     public static final String SERIAL_VERSION_UTD = "serialVersionUID";
1:     public static final String ENUM_CLASS = "java/lang/Enum";
0: 
0:     public static boolean isLessAccessible(GenericDeclaration before, GenericDeclaration after) {
0: 
0:         if (before.getAccess() == after.getAccess()) {
0:             return false;
0:         //When it reaches here, the two access are different. Let's make sure the whether the after field has less access than the before field.
1:         if (before.isPublic()) {
0:             if (!!!after.isPublic()) {
0:                 return true;
0:             }
0:         } else if (before.isProtected()) {
0:             if (!!!(after.isPublic() || after.isProtected())) {
0:                 return true;
0:             }
0:         } else {
0:             if (!!!before.isPrivate()) {
0:                 // the field is package level.
0:                 if (after.isPrivate()) {
0:                     return true;
0:                 }
0:             }
0:         return false;
0:     }
0: 
0:     /**
0:      * ASM Type descriptor look up table
0:      *
0:      * @author emily
0:      */
0:     private enum TypeDescriptor{
1:         I("int"), Z("boolean"), C("char"), B("byte"),
0:                 S("short"), F("float"), J("long"), D("double"), V("void");
0: 
0:         String desc;
1:         TypeDescriptor(String desc)
0:         {
0:             this.desc = desc;
1:     String getDesc() {
0:         return desc;
0: 
0:     private static final Map<String, TypeDescriptor> stringToEnum = new HashMap<String, TypeDescriptor>();
0: 
0:     static {
0:         for (TypeDescriptor td : values()) {
0:             stringToEnum.put(td.toString(), td);
0:         }
0: 
0:     public static TypeDescriptor fromString(String symbol) {
0:         return stringToEnum.get(symbol);
0:     }
0: 
0: }
0: 
0:     /**
0:      * Transform ASM method desc to a human readable form
0:      * Method declaration in source file Method descriptor
0:      * void m(int i, float f) <= (IF)V
0:      * int m(Object o) <= (Ljava/lang/Object;)I
0:      * int[] m(int i, String s) <= (ILjava/lang/String;)[I
0:      * Object m(int[] i) <= ([I)Ljava/lang/Object;
0:      *
0:      * @param methodName
0:      * @param methodDesc
0:      * @return
0:      */
1:     public static String getReadableMethodSignature(String methodName, String methodDesc) {
0:         // need to find the return type first, which is outside the ()
0:         int lastBrace = methodDesc.lastIndexOf(")");
0: 
0:         // parameter
0:         StringBuilder methodSignature = new StringBuilder();
0:         if (lastBrace == -1) {
0:             // this is odd, don't attempt to transform. Just return back. Won't happen unless byte code weaving is not behaving.
0:             return "method " + methodName + methodDesc;
0:         }
0:         String param = methodDesc.substring(1, lastBrace);
0:         if (CONSTRUTOR.equals(methodName)) {
0:             //This means the method is a constructor. In the binary form, the constructor carries a name 'init'. Let's use the source
0:             // code proper name
0:             methodSignature.append("constructor with parameter list ");
0:         } else {
0:             String returnType = methodDesc.substring(lastBrace + 1);
0:             methodSignature.append("method ");
0:             methodSignature.append(transform(returnType));
0:             methodSignature.append(" ");
0:             methodSignature.append(methodName);
0:         }
0:         // add the paramether list
0:         methodSignature.append("(");
0:         methodSignature.append(transform(param));
0:         methodSignature.append(")");
0:         return methodSignature.toString();
0:     }
0: 
1:     public static String transform(String asmDesc) {
0:         String separator = ", ";
0:         int brkCount = 0;
0:         StringBuilder returnStr = new StringBuilder();
0:         //remove the '['s
0: 
0:         while (asmDesc.length() > 0) {
1:             while (asmDesc.startsWith("[")) {
0:                 asmDesc = asmDesc.substring(1);
1:                 brkCount++;
0:             }
0:             while (asmDesc.startsWith("L")) {
0:                 //remove the L and ;
0:                 int semiColonIndex = asmDesc.indexOf(";");
0: 
0: 
0:                 if (semiColonIndex == -1) {
0:                     //This is odd. The asm binary code is invalid. Do not attempt to transform.
0:                     return asmDesc;
0:                 }
0:                 returnStr.append(asmDesc.substring(1, semiColonIndex));
0:                 asmDesc = asmDesc.substring(semiColonIndex + 1);
1:                 for (int index = 0; index < brkCount; index++) {
0:                     returnStr.append("[]");
0:                 }
1:                 brkCount = 0;
0:                 returnStr.append(separator);
0:             }
0: 
0:             TypeDescriptor td = null;
1:             while ((asmDesc.length() > 0) && (td = TypeDescriptor.fromString(asmDesc.substring(0, 1))) != null) {
0: 
0:                 returnStr.append(td.getDesc());
1:                 for (int index = 0; index < brkCount; index++) {
0:                     returnStr.append("[]");
0:                 }
1:                 brkCount = 0;
0:                 returnStr.append(separator);
0:                 asmDesc = asmDesc.substring(1);
0:             }
0: 
0: 
0:         }
0:         String finalStr = returnStr.toString();
1:         if (finalStr.endsWith(separator)) {
0:             finalStr = finalStr.substring(0, finalStr.lastIndexOf(separator));
0:         }
0:         //replace "/" with "." as bytecode uses / in the package names
0:         finalStr = finalStr.replaceAll("/", ".");
0:         return finalStr;
0:     }
0: 
0:     /**
0:      * Return whether the binary is property file. If the binary implements the interface of java.util.ListResourceBundle
0:      *
0:      * @param cd
0:      * @return
0:      */
1:     public static boolean isPropertyFile(ClassDeclaration cd) {
0:         Collection<String> supers = cd.getAllSupers();
0:         return (supers.contains(PROPERTY_FILE_IDENTIFIER));
0:     }
0: 
============================================================================