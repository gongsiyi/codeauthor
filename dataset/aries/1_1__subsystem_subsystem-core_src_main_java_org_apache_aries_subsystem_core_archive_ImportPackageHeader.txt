1:1129914: /*
1:9c09993:  * Licensed to the Apache Software Foundation (ASF) under one
1:9c09993:  * or more contributor license agreements.  See the NOTICE file
1:9c09993:  * distributed with this work for additional information
1:9c09993:  * regarding copyright ownership.  The ASF licenses this file
1:9c09993:  * to you under the Apache License, Version 2.0 (the
1:9c09993:  * "License"); you may not use this file except in compliance
1:9c09993:  * with the License.  You may obtain a copy of the License at
1:1129914:  *
1:9c09993:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:9c09993:  * Unless required by applicable law or agreed to in writing,
1:9c09993:  * software distributed under the License is distributed on an
1:9c09993:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9c09993:  * KIND, either express or implied.  See the License for the
1:9c09993:  * specific language governing permissions and limitations
1:9c09993:  * under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
24:1129914: 
1:1129914: import java.util.ArrayList;
1:1129914: import java.util.Arrays;
1:1129914: import java.util.Collection;
1:1129914: import java.util.HashMap;
1:df175a6: import java.util.List;
1:1129914: import java.util.Map;
1:deca8ed: 
1:2ffcfb9: import org.apache.aries.subsystem.core.capabilityset.SimpleFilter;
1:1129914: import org.osgi.framework.Constants;
1:fc759fb: import org.osgi.framework.namespace.PackageNamespace;
1:71fe81a: import org.osgi.resource.Requirement;
1:71fe81a: import org.osgi.resource.Resource;
1:1129914: 
1:2ffcfb9: public class ImportPackageHeader extends AbstractClauseBasedHeader<ImportPackageHeader.Clause> implements RequirementHeader<ImportPackageHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:2ffcfb9:     	private static final Collection<Parameter> defaultParameters = 
1:2ffcfb9:     			generateDefaultParameters(VersionRangeAttribute.DEFAULT_VERSION, ResolutionDirective.MANDATORY);
1:2ffcfb9:     	
1:2ffcfb9: 		public static Clause valueOf(Requirement requirement) {
1:2ffcfb9: 			String namespace = requirement.getNamespace();
1:2ffcfb9: 			if (!ImportPackageRequirement.NAMESPACE.equals(namespace)) {
1:2ffcfb9: 				throw new IllegalArgumentException("Invalid namespace:" + namespace);
1:2ffcfb9: 			}
1:c5864b3: 			Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1:c5864b3: 			String filter = null;
1:2ffcfb9: 			Map<String, String> directives = requirement.getDirectives();
1:2ffcfb9: 			for (Map.Entry<String, String> entry : directives.entrySet()) {
1:2ffcfb9: 				String key = entry.getKey();
1:2ffcfb9: 				if (ImportPackageRequirement.DIRECTIVE_FILTER.equals(key)) {
1:c5864b3: 					filter = entry.getValue();
1:2ffcfb9: 				}
1:c5864b3: 				else { 
1:c5864b3: 					parameters.put(key, DirectiveFactory.createDirective(key, entry.getValue()));
1:c5864b3: 				}
1:2ffcfb9: 			}
1:c5864b3: 			Map<String, List<SimpleFilter>> attributes = SimpleFilter.attributes(filter);
1:c5864b3: 			String path = null;
1:c5864b3: 			for (Map.Entry<String, List<SimpleFilter>> entry : attributes.entrySet()) {
1:2ffcfb9: 				String key = entry.getKey();
1:c5864b3: 				List<SimpleFilter> value = entry.getValue();
1:2ffcfb9: 				if (ImportPackageRequirement.NAMESPACE.equals(key)) {
1:c5864b3: 					path = String.valueOf(value.get(0).getValue());
1:2ffcfb9: 				}
1:c5864b3: 				else if (ATTRIBUTE_VERSION.equals(key) || ATTRIBUTE_BUNDLE_VERSION.equals(key)) {
1:c5864b3: 					parameters.put(key, new VersionRangeAttribute(key, parseVersionRange(value)));
1:c5864b3: 				}
1:c5864b3: 				else {
1:c5864b3: 					parameters.put(key, AttributeFactory.createAttribute(key,
1:c5864b3: 							String.valueOf(value.get(0).getValue())));
1:c5864b3: 				}
1:2ffcfb9: 			}
1:2ffcfb9: 			return new Clause(path, parameters, defaultParameters);
1:deca8ed: 		}
1:deca8ed: 		
1:2ffcfb9: 		public Clause(String path, Map<String, Parameter> parameters, Collection<Parameter> defaultParameters) {
1:3d090ca: 			super(path, parameters, defaultParameters == null ? Clause.defaultParameters : defaultParameters);
1:deca8ed: 		}
1:deca8ed: 		
1:1129914: 		public Clause(String clause) {
1:2ffcfb9:             super(
1:2ffcfb9:             		parsePath(clause, Patterns.PACKAGE_NAMES, true),
1:2ffcfb9:             		parseParameters(clause, true), 
1:2ffcfb9:             		defaultParameters);
1:deca8ed: 		}
1:deca8ed: 		
1:1129914: 		public Collection<String> getPackageNames() {
1:2ffcfb9: 			return Arrays.asList(path.split(";"));
1:deca8ed: 		}
1:1129914: 		
1:1129914: 		
1:1129914: 		public VersionRangeAttribute getVersionRangeAttribute() {
1:9c09993: 			return (VersionRangeAttribute)getAttribute(Constants.VERSION_ATTRIBUTE);
1:deca8ed: 		}
1:1129914: 		
1:df175a6: 		public ImportPackageRequirement toRequirement(Resource resource) {
1:df175a6: 			return new ImportPackageRequirement(this, resource);
1:df175a6: 		}
1:deca8ed: 	}
1:df175a6: 	
1:fc759fb: 	public static final String ATTRIBUTE_BUNDLE_SYMBOLICNAME = PackageNamespace.CAPABILITY_BUNDLE_SYMBOLICNAME_ATTRIBUTE;
1:fc759fb: 	public static final String ATTRIBUTE_BUNDLE_VERSION = PackageNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
1:fc759fb: 	public static final String ATTRIBUTE_VERSION = PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE;
1:4717af0: 	public static final String NAME = Constants.IMPORT_PACKAGE;
1:fc759fb: 	public static final String DIRECTIVE_RESOLUTION = PackageNamespace.REQUIREMENT_RESOLUTION_DIRECTIVE;
1:fc759fb: 	public static final String RESOLUTION_MANDATORY = PackageNamespace.RESOLUTION_MANDATORY;
1:fc759fb: 	public static final String RESOLUTION_OPTIONAL = PackageNamespace.RESOLUTION_OPTIONAL;
1:fc759fb: 	
1:deca8ed: 	public ImportPackageHeader(Collection<Clause> clauses) {
1:2ffcfb9: 	    super(clauses);
1:deca8ed: 	}
1:deca8ed: 	
1:2ffcfb9: 	public ImportPackageHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:fc759fb: 	}
1:fc759fb: 	
1:4717af0: 
1:2ffcfb9: 	@Override
1:2ffcfb9:     public String getName() {
1:1129914: 		return Constants.IMPORT_PACKAGE;
1:fc759fb: 	}
1:1129914: 	
1:124d6a3: 	@Override
1:1129914: 	public String getValue() {
1:fc759fb: 		return toString();
1:fc759fb: 	}
1:df175a6: 	
1:df175a6: 	@Override
1:df175a6: 	public List<ImportPackageRequirement> toRequirements(Resource resource) {
1:df175a6: 		Collection<Clause> clauses = getClauses();
1:df175a6: 		List<ImportPackageRequirement> result = new ArrayList<ImportPackageRequirement>(clauses.size());
1:df175a6: 		for (Clause clause : clauses) {
1:3d090ca: 			Collection<String> packageNames = clause.getPackageNames();
1:3d090ca: 			if (packageNames.size() > 1) {
1:3d090ca: 				for (String packageName : packageNames) {
1:3d090ca: 					Collection<Parameter> parameters = clause.getParameters();
1:3d090ca: 					Map<String, Parameter> name2parameter = new HashMap<String, Parameter>(parameters.size());
1:3d090ca: 					for (Parameter parameter : parameters) {
1:3d090ca: 						name2parameter.put(parameter.getName(), parameter);
1:3d090ca: 					}
1:3d090ca: 					result.add(new Clause(packageName, name2parameter, null).toRequirement(resource));
1:3d090ca: 				}
1:3d090ca: 			}
1:3d090ca: 			else {
1:3d090ca: 				result.add(clause.toRequirement(resource));
1:3d090ca: 			}
1:df175a6: 		}
1:df175a6: 		return result;
1:df175a6: 	}
47:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3d090ca
/////////////////////////////////////////////////////////////////////////
1: 			super(path, parameters, defaultParameters == null ? Clause.defaultParameters : defaultParameters);
/////////////////////////////////////////////////////////////////////////
1: 			Collection<String> packageNames = clause.getPackageNames();
1: 			if (packageNames.size() > 1) {
1: 				for (String packageName : packageNames) {
1: 					Collection<Parameter> parameters = clause.getParameters();
1: 					Map<String, Parameter> name2parameter = new HashMap<String, Parameter>(parameters.size());
1: 					for (Parameter parameter : parameters) {
1: 						name2parameter.put(parameter.getName(), parameter);
1: 					}
1: 					result.add(new Clause(packageName, name2parameter, null).toRequirement(resource));
1: 				}
1: 			}
1: 			else {
1: 				result.add(clause.toRequirement(resource));
1: 			}
commit:c5864b3
/////////////////////////////////////////////////////////////////////////
1: 			Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 			String filter = null;
1: 					filter = entry.getValue();
1: 				else { 
1: 					parameters.put(key, DirectiveFactory.createDirective(key, entry.getValue()));
1: 				}
1: 			Map<String, List<SimpleFilter>> attributes = SimpleFilter.attributes(filter);
1: 			String path = null;
1: 			for (Map.Entry<String, List<SimpleFilter>> entry : attributes.entrySet()) {
1: 				List<SimpleFilter> value = entry.getValue();
1: 					path = String.valueOf(value.get(0).getValue());
1: 				else if (ATTRIBUTE_VERSION.equals(key) || ATTRIBUTE_BUNDLE_VERSION.equals(key)) {
1: 					parameters.put(key, new VersionRangeAttribute(key, parseVersionRange(value)));
1: 				}
1: 				else {
1: 					parameters.put(key, AttributeFactory.createAttribute(key,
1: 							String.valueOf(value.get(0).getValue())));
1: 				}
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.capabilityset.SimpleFilter;
1: public class ImportPackageHeader extends AbstractClauseBasedHeader<ImportPackageHeader.Clause> implements RequirementHeader<ImportPackageHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1:     	private static final Collection<Parameter> defaultParameters = 
1:     			generateDefaultParameters(VersionRangeAttribute.DEFAULT_VERSION, ResolutionDirective.MANDATORY);
1:     	
1: 		public static Clause valueOf(Requirement requirement) {
1: 			String namespace = requirement.getNamespace();
1: 			if (!ImportPackageRequirement.NAMESPACE.equals(namespace)) {
1: 				throw new IllegalArgumentException("Invalid namespace:" + namespace);
1: 			}
1: 			Map<String, String> directives = requirement.getDirectives();
0: 			String filter = directives.get(ImportPackageRequirement.DIRECTIVE_FILTER);
0: 			Map<String, Object> attributes = SimpleFilter.attributes(filter);
0: 			Map<String, Parameter> parameters = new HashMap<String, Parameter>(directives.size() + attributes.size());
1: 			for (Map.Entry<String, String> entry : directives.entrySet()) {
1: 				String key = entry.getKey();
1: 				if (ImportPackageRequirement.DIRECTIVE_FILTER.equals(key)) {
0: 					continue;
1: 				}
0: 				parameters.put(key, DirectiveFactory.createDirective(key, entry.getValue()));
1: 			}
0: 			for (Map.Entry<String, Object> entry : attributes.entrySet()) {
1: 				String key = entry.getKey();
1: 				if (ImportPackageRequirement.NAMESPACE.equals(key)) {
0: 					continue;
1: 				}
0: 				parameters.put(key, AttributeFactory.createAttribute(key, String.valueOf(entry.getValue())));
1: 			}
0: 			String path = String.valueOf(attributes.get(ImportPackageRequirement.NAMESPACE));
1: 			return new Clause(path, parameters, defaultParameters);
1: 		public Clause(String path, Map<String, Parameter> parameters, Collection<Parameter> defaultParameters) {
0: 			super(path, parameters, defaultParameters);
1:             super(
1:             		parsePath(clause, Patterns.PACKAGE_NAMES, true),
1:             		parseParameters(clause, true), 
1:             		defaultParameters);
1: 			return Arrays.asList(path.split(";"));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	    super(clauses);
1: 	public ImportPackageHeader(String value) {
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
1: 	@Override
1:     public String getName() {
/////////////////////////////////////////////////////////////////////////
commit:9c09993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
/////////////////////////////////////////////////////////////////////////
1: 			return (VersionRangeAttribute)getAttribute(Constants.VERSION_ATTRIBUTE);
commit:61da82e
/////////////////////////////////////////////////////////////////////////
0: 				myPath = matcher.group().replaceAll("\\s", "");
commit:a68e051
/////////////////////////////////////////////////////////////////////////
0: 		for (String clause : new ClauseTokenizer(header).getClauses())
0: 			clauses.add(new Clause(clause));
commit:fea3a1c
/////////////////////////////////////////////////////////////////////////
0: 				// TODO Revisit the following fix.
0: 				// All version attributes on an ImportPackage header are ranges. The ParameterFactory will return
0: 				// a VersionAttribute when the value is a single version (e.g., version=1.0.0). This causes a
0: 				// ClassCastException in getVersionRangeAttribute().
0: 				if (parameter instanceof VersionAttribute)
0: 					parameter = new VersionRangeAttribute(String.valueOf(parameter.getValue()));
commit:df175a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: public class ImportPackageHeader implements RequirementHeader<ImportPackageHeader.Clause> {
/////////////////////////////////////////////////////////////////////////
1: 		public ImportPackageRequirement toRequirement(Resource resource) {
1: 			return new ImportPackageRequirement(this, resource);
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
1: 	public List<ImportPackageRequirement> toRequirements(Resource resource) {
1: 		Collection<Clause> clauses = getClauses();
1: 		List<ImportPackageRequirement> result = new ArrayList<ImportPackageRequirement>(clauses.size());
1: 		for (Clause clause : clauses) {
0: 			result.add(clause.toRequirement(resource));
1: 		}
1: 		return result;
1: 	}
1: 	
1: 	@Override
commit:12260c5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			return new ImportPackageRequirement(this, resource);
commit:124d6a3
/////////////////////////////////////////////////////////////////////////
1: 		@Override
/////////////////////////////////////////////////////////////////////////
0: 		@Override
/////////////////////////////////////////////////////////////////////////
0: 		@Override
/////////////////////////////////////////////////////////////////////////
0: 		@Override
/////////////////////////////////////////////////////////////////////////
0: 		@Override
0: 		@Override
0: 		@Override
/////////////////////////////////////////////////////////////////////////
0: 		@Override
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
0: 		private static final String REGEX = "\\((" + PackageNamespace.PACKAGE_NAMESPACE + ")(=)([^\\)]+)\\)";
0: 		private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(Constants.VERSION_ATTRIBUTE);
0: 			if (parameter == null)
0: 				parameters.put(Constants.VERSION_ATTRIBUTE, new VersionRangeAttribute());
1: 		}
0: 		public Clause(Requirement requirement) {
0: 			if (!PackageNamespace.PACKAGE_NAMESPACE.equals(requirement.getNamespace()))
0: 				throw new IllegalArgumentException("Requirement must be in the '" + PackageNamespace.PACKAGE_NAMESPACE + "' namespace");
0: 			String filter = requirement.getDirectives().get(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE);
0: 			String packageName = null;
0: 			Matcher matcher = PATTERN.matcher(filter);
0: 			while (matcher.find()) {
0: 				String name = matcher.group(1);
0: 				String operator = matcher.group(2);
0: 				String value = matcher.group(3);
0: 				if (PackageNamespace.PACKAGE_NAMESPACE.equals(name)) {
0: 					packageName = value;
1: 				}
0: 				else if (PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE.equals(name)) {
0: 					// TODO Parse the version range from the filter.
1: 				}
1: 			}
0: 			if (packageName == null)
0: 				throw new IllegalArgumentException("Missing filter key: " + PackageNamespace.PACKAGE_NAMESPACE);
0: 			myPath = packageName;
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
0: 			fillInDefaults(myParameters);
/////////////////////////////////////////////////////////////////////////
0: 	private static Collection<Clause> processHeader(String header) {
0: 		return clauses;
1: 	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	
1: 	public ImportPackageHeader(Collection<Clause> clauses) {
0: 			throw new IllegalArgumentException("An Import-Package header must have at least one clause");
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
1: 	
0: 	public ImportPackageHeader(String header) {
0: 		this(processHeader(header));
/////////////////////////////////////////////////////////////////////////
0: 	@Override
0: 			builder.append(clause).append(',');
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map.Entry;
0: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.PackageNamespace;
0: 		private static final String REGEX1 = '(' + Grammar.PACKAGENAMES + ")(?=;|\\z)";
0: 		private static final String REGEX2 = '(' + Grammar.PARAMETER + ")(?=;|\\z)";
0: 		private static final Pattern PATTERN1 = Pattern.compile(REGEX1);
0: 		private static final Pattern PATTERN2 = Pattern.compile(REGEX2);
0: 			Matcher matcher = PATTERN1.matcher(clause);
0: 			if (matcher.find())
0: 				myPath = matcher.group();
0: 			else
0: 			matcher.usePattern(PATTERN2);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				myParameters.put(parameter.getName(), parameter);
0: //			Attribute attribute = new GenericAttribute(BundleRevision.PACKAGE_NAMESPACE, getPath());
0: //			myParameters.put(attribute.getName(), attribute);
0: //			attribute = getAttribute(Constants.VERSION_ATTRIBUTE);
0: //			if (attribute == null) {
0: //				attribute = new VersionRangeAttribute();
0: //				myParameters.put(attribute.getName(), attribute);
0: //			}
0: //			Directive directive = getDirective(Constants.FILTER_DIRECTIVE);
0: //			if (directive == null) {
0: //				StringBuilder builder = new StringBuilder("(&");
0: //				for (Attribute a : getAttributes()) {
0: //					a.appendToFilter(builder);
0: //				}
0: //				directive = new GenericDirective(Constants.FILTER_DIRECTIVE, builder.append(')').toString());
0: //				myParameters.put(directive.getName(), directive);
0: //			}
/////////////////////////////////////////////////////////////////////////
0: 				@Override
0: 				@Override
0: 					if (result.get(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE) == null) {
0: 						StringBuilder builder = new StringBuilder("(&");
0: 						for (Entry<String, Object> entry : getAttributes().entrySet())
0: 							builder.append('(').append(entry.getKey()).append('=').append(entry.getValue()).append(')');
0: 						result.put(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, builder.append(')').toString());
1: 					}
0: 				@Override
0: 					if (result.get(PackageNamespace.PACKAGE_NAMESPACE) == null) {
0: 						result.put(PackageNamespace.PACKAGE_NAMESPACE, getPath());
1: 					}
0: 					if (result.get(PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE) == null)
0: 						result.put(PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE, Version.emptyVersion.toString());
0: 				@Override
/////////////////////////////////////////////////////////////////////////
1: 	public static final String ATTRIBUTE_BUNDLE_SYMBOLICNAME = PackageNamespace.CAPABILITY_BUNDLE_SYMBOLICNAME_ATTRIBUTE;
1: 	public static final String ATTRIBUTE_BUNDLE_VERSION = PackageNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
1: 	public static final String ATTRIBUTE_VERSION = PackageNamespace.CAPABILITY_VERSION_ATTRIBUTE;
1: 	public static final String DIRECTIVE_RESOLUTION = PackageNamespace.REQUIREMENT_RESOLUTION_DIRECTIVE;
1: 	public static final String RESOLUTION_MANDATORY = PackageNamespace.RESOLUTION_MANDATORY;
1: 	public static final String RESOLUTION_OPTIONAL = PackageNamespace.RESOLUTION_OPTIONAL;
0: 	private static final String REGEX = Grammar.IMPORT + "(?=,|\\z)";
0: //	private static String valueOf(Collection<Clause> clauses) {
0: //		StringBuilder sb = new StringBuilder();
0: //		for (Clause clause : clauses) {
0: //			sb.append(clause).append(',');
0: //		}
0: //		if (sb.length() != 0)
0: //			sb.deleteCharAt(sb.length() - 1);
0: //		return sb.toString();
0: //	}
1: 	
0: 	private final Set<Clause> clauses;
0: //	private final String value;
1: 	
0: 	public ImportPackageHeader(Collection<Clause> clauses) {
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
0: 		Set<Clause> clauses = new HashSet<Clause>();
0: 		while (matcher.find())
0: 			clauses.add(new Clause(matcher.group()));
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("Invalid header syntax -> " + NAME + ": " + header);
0: //		value = header;
0: 		this.clauses = clauses;
/////////////////////////////////////////////////////////////////////////
0: 	@Override
1: 		return toString();
0: 		StringBuilder builder = new StringBuilder();
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Requirement;
0: import org.osgi.framework.resource.Resource;
commit:4717af0
/////////////////////////////////////////////////////////////////////////
0: 					a.appendToFilter(builder);
/////////////////////////////////////////////////////////////////////////
1: 	public static final String NAME = Constants.IMPORT_PACKAGE;
1: 	
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
0: import java.util.Collections;
1: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Constants;
0: import org.osgi.framework.Filter;
0: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.framework.wiring.BundleRevision;
0: import org.osgi.framework.wiring.Capability;
0: import org.osgi.framework.wiring.Requirement;
0: import org.osgi.framework.wiring.Resource;
1: 
0: public class ImportPackageHeader implements Header<ImportPackageHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		private static final String REGEX = '(' + Grammar.PACKAGENAMES + ")(?:\\;(" + Grammar.PARAMETER + "))*";
0: 		private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 		
0: 		private final Map<String, Parameter> myParameters = new HashMap<String, Parameter>();
0: 		private final String myPath;
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN.matcher(clause);
0: 			if (!matcher.matches()) {
0: 				throw new IllegalArgumentException("Invalid " + Constants.IMPORT_PACKAGE + " header clause: " + clause);
1: 			}
0: 			myPath = matcher.group(1);
0: 			for (int i = 2; i <= matcher.groupCount(); i++) {
0: 				String group = matcher.group(i);
0: 				if (group != null) {
0: 					Parameter parameter = ParameterFactory.create(group);
0: 					myParameters.put(parameter.getName(), parameter);
1: 				}
1: 			}
0: 			Attribute attribute = new GenericAttribute(BundleRevision.PACKAGE_NAMESPACE, getPath());
0: 			myParameters.put(attribute.getName(), attribute);
0: 			attribute = getAttribute(Constants.VERSION_ATTRIBUTE);
0: 			if (attribute == null) {
0: 				attribute = new VersionRangeAttribute();
0: 				myParameters.put(attribute.getName(), attribute);
1: 			}
0: 			Directive directive = getDirective(Constants.FILTER_DIRECTIVE);
0: 			if (directive == null) {
0: 				StringBuilder builder = new StringBuilder("(&");
0: 				for (Attribute a : getAttributes()) {
0: 					a.appendToFilter(builder.append('(')).append(')');
1: 				}
0: 				directive = new GenericDirective(Constants.FILTER_DIRECTIVE, builder.append(')').toString());
0: 				myParameters.put(directive.getName(), directive);
1: 			}
1: 		}
1: 		
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = myParameters.get(name);
0: 			if (result instanceof Attribute) {
0: 				return (Attribute)result;
1: 			}
0: 			return null;
1: 		}
1: 		
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(myParameters.size());
0: 			for (Parameter parameter : myParameters.values()) {
0: 				if (parameter instanceof Attribute) {
0: 					attributes.add((Attribute)parameter);
1: 				}
1: 			}
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 		
0: 		public Directive getDirective(String name) {
0: 			Parameter result = myParameters.get(name);
0: 			if (result instanceof Directive) {
0: 				return (Directive)result;
1: 			}
0: 			return null;
1: 		}
1: 		
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(myParameters.size());
0: 			for (Parameter parameter : myParameters.values()) {
0: 				if (parameter instanceof Directive) {
0: 					directives.add((Directive)parameter);
1: 				}
1: 			}
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 		
1: 		public Collection<String> getPackageNames() {
0: 			return Arrays.asList(myPath.split(";"));
1: 		}
1: 		
0: 		public Parameter getParameter(String name) {
0: 			return myParameters.get(name);
1: 		}
1: 		
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(myParameters.values());
1: 		}
1: 		
0: 		public String getPath() {
0: 			return myPath;
1: 		}
1: 		
0: 		public Requirement getRequirement(final Resource resource) {
0: 			return new Requirement() {
0: 				public String getNamespace() {
0: 					return BundleRevision.PACKAGE_NAMESPACE;
1: 				}
1: 
0: 				public Map<String, String> getDirectives() {
0: 					Collection<Directive> directives = Clause.this.getDirectives();
0: 					Map<String, String> result = new HashMap<String, String>(directives.size() + 1);
0: 					for (Directive directive : directives) {
0: 						result.put(directive.getName(), directive.getValue());
1: 					}
0: 					return result;
1: 				}
1: 
0: 				public Map<String, Object> getAttributes() {
0: 					Collection<Attribute> attributes = Clause.this.getAttributes();
0: 					Map<String, Object> result = new HashMap<String, Object>(attributes.size() + 1);
0: 					for (Attribute attribute : attributes) {
0: 						result.put(attribute.getName(), attribute.getValue());
1: 					}
0: 					return result;
1: 				}
1: 
0: 				public Resource getResource() {
0: 					return resource;
1: 				}
1: 
0: 				public boolean matches(Capability capability) {
0: 					if (!getNamespace().equals(capability.getNamespace()))
0: 						return false;
0: 					Filter filter;
0: 					try {
0: 						filter = FrameworkUtil.createFilter(getDirectives().get(Constants.FILTER_DIRECTIVE));
1: 					}
0: 					catch (InvalidSyntaxException e) {
0: 						return false;
1: 					}
0: 					if (!filter.matches(capability.getAttributes()))
0: 							return false;
1: 					
0: 					return true;
1: 				}
0: 			};
1: 		}
1: 		
1: 		public VersionRangeAttribute getVersionRangeAttribute() {
0: 			return (VersionRangeAttribute)myParameters.get(Constants.VERSION_ATTRIBUTE);
1: 		}
1: 		
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 		}
1: 	}
1: 	
0: 	private static final String REGEX = '(' + Grammar.IMPORT + ")(?:\\,(" + Grammar.IMPORT + "))*";
0: 	private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 	
0: 	private final Set<Clause> clauses = new HashSet<Clause>();
0: 	private final String value;
1: 	
0: 	public ImportPackageHeader(String header) {
0: 		Matcher matcher = PATTERN.matcher(header);
0: 		if (!matcher.matches()) {
0: 			throw new IllegalArgumentException("Invalid " + Constants.IMPORT_PACKAGE + " header: " + header);
1: 		}
0: 		for (int i = 1; i <= matcher.groupCount(); i++) {
0: 			String group = matcher.group(i);
0: 			if (group != null) {
0: 				Clause clause = new Clause(group);
0: 				clauses.add(clause);
1: 			}
1: 		}
0: 		value = header;
1: 	}
1: 	
0: 	public Collection<ImportPackageHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
0: 	public String getName() {
1: 		return Constants.IMPORT_PACKAGE;
1: 	}
1: 	
0: 	public Collection<Requirement> getRequirements(Resource resource) {
0: 		Collection<Clause> clauses = getClauses();
0: 		Collection<Requirement> result = new HashSet<Requirement>(clauses.size());
0: 		for (Clause clause : clauses) {
0: 			result.add(clause.getRequirement(resource));
1: 		}
0: 		return result;
1: 	}
1: 	
1: 	public String getValue() {
0: 		return value;
1: 	}
1: 	
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder()
0: 				.append(getName())
0: 				.append(": ");
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause);
1: 		}
0: 		return builder.toString();
1: 	}
1: }
============================================================================