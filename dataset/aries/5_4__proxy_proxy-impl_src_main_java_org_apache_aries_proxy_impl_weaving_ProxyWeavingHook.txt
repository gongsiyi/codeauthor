1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
1:96d4e06:  */
1:96d4e06: package org.apache.aries.proxy.impl.weaving;
1:96d4e06: 
1:48caea3: import java.util.ArrayList;
1:a897b56: import java.util.Dictionary;
1:a897b56: import java.util.Hashtable;
1:96d4e06: import java.util.List;
1:48caea3: import java.util.regex.Pattern;
1:96d4e06: 
1:96d4e06: import org.apache.aries.proxy.UnableToProxyException;
1:ef57cb3: import org.apache.aries.proxy.impl.NLS;
1:bfc9463: import org.apache.aries.proxy.weaving.WovenProxy;
1:bfc9463: import org.apache.aries.proxy.weavinghook.ProxyWeavingController;
1:bfc9463: import org.apache.aries.proxy.weavinghook.WeavingHelper;
1:bfc9463: import org.objectweb.asm.ClassReader;
1:96d4e06: import org.osgi.framework.Bundle;
1:48caea3: import org.osgi.framework.BundleContext;
1:96d4e06: import org.osgi.framework.hooks.weaving.WeavingException;
1:96d4e06: import org.osgi.framework.hooks.weaving.WeavingHook;
1:96d4e06: import org.osgi.framework.hooks.weaving.WovenClass;
1:a897b56: import org.osgi.framework.wiring.BundleWiring;
1:bfc9463: import org.osgi.util.tracker.ServiceTracker;
1:96d4e06: import org.slf4j.Logger;
1:96d4e06: import org.slf4j.LoggerFactory;
1:96d4e06: 
1:bfc9463: public final class ProxyWeavingHook implements WeavingHook, WeavingHelper {
1:96d4e06: 
1:48caea3:   public static final String WEAVING_ENABLED_CLASSES = "org.apache.aries.proxy.weaving.enabled";
1:48caea3:   public static final String WEAVING_DISABLED_CLASSES = "org.apache.aries.proxy.weaving.disabled";
1:48caea3: 
1:48caea3:   public static final String WEAVING_ENABLED_CLASSES_DEFAULT = "*";
1:7a91423:   public static final String WEAVING_DISABLED_CLASSES_DEFAULT = "org.objectweb.asm.*,org.slf4j.*,org.apache.log4j.*,javax.*,ch.qos.logback.*";
1:48caea3: 
1:ef57cb3:   private static final Logger LOGGER = LoggerFactory.getLogger(ProxyWeavingHook.class);
1:96d4e06:   /** An import of the WovenProxy package */
1:96d4e06:   private static final String IMPORT_A = "org.apache.aries.proxy.weaving";
1:96d4e06:   /** 
1:96d4e06:    * An import for the InvocationListener class that we will need.
1:96d4e06:    * This should automatically wire to the right thing because of the uses clause
1:96d4e06:    * on the impl.weaving package
1:96d4e06:    */
1:96d4e06:   private static final String IMPORT_B = "org.apache.aries.proxy";
1:96d4e06: 
1:48caea3:   private final List<Pattern> enabled;
1:48caea3:   private final List<Pattern> disabled;
1:bfc9463:   private final ServiceTracker controllers;
1:96d4e06: 
1:48caea3:   public ProxyWeavingHook(BundleContext context) {
1:a897b56:     String enabledProp = context != null ? context.getProperty(WEAVING_ENABLED_CLASSES) : null;
1:a897b56:     enabled = parseMatchers(enabledProp, WEAVING_ENABLED_CLASSES_DEFAULT);
1:48caea3:     disabled = parseMatchers(context != null ? context.getProperty(WEAVING_DISABLED_CLASSES) : null, WEAVING_DISABLED_CLASSES_DEFAULT);
1:bfc9463:     controllers = new ServiceTracker(context, ProxyWeavingController.class.getName(), null);
1:bfc9463:     controllers.open();
1:a897b56:     
1:a897b56:     if (!"none".equals(enabledProp)) {
1:a897b56:         Dictionary<String,String> props = new Hashtable<String,String>();
1:a897b56:         // SubsystemResource.java also uses this constant. 
1:a897b56:         //   While it could be turned into a static final constant, note that this
1:a897b56:         //   is also a non-standard workaround in the absence of a solution in the spec. 
1:a897b56:         // See the associated OSGi spec bug. 
1:a897b56:         props.put("osgi.woven.packages", "org.apache.aries.proxy.weaving,org.apache.aries.proxy");
1:a897b56:         context.registerService("org.osgi.framework.hooks.weaving.WeavingHook", this, props);
1:a897b56:     }
1:48caea3:   }
1:bfc9463: 
1:96d4e06:   public final void weave(WovenClass wovenClass) {
1:a897b56:     BundleWiring bw = wovenClass.getBundleWiring();
1:96d4e06:     
1:a897b56:     if (bw != null) {
1:a897b56:         Bundle b = bw.getBundle();
1:a897b56:         
1:a897b56:         if(b.getBundleId() == 0 || 
1:a897b56:             b.getSymbolicName().startsWith("org.apache.aries.proxy") ||
1:a897b56:             b.getSymbolicName().startsWith("org.apache.aries.util")) {
1:a897b56:           return;
1:a897b56:         }
1:96d4e06:     }
1:96d4e06: 
1:48caea3:     if (!isEnabled(wovenClass.getClassName()) || isDisabled(wovenClass.getClassName())) {
2:96d4e06:         return;
1:48caea3:     }
1:96d4e06: 
1:bfc9463:     if (shouldWeave(wovenClass)) {
1:96d4e06:       byte[] bytes = null;
1:96d4e06:       
1:96d4e06:       try {
1:96d4e06:         bytes = WovenProxyGenerator.getWovenProxy(wovenClass.getBytes(),
1:bfc9463:                 wovenClass.getBundleWiring().getClassLoader());
1:96d4e06:         
1:96d4e06:       } catch (Exception e) {
1:96d4e06:         if(e instanceof RuntimeException && 
1:96d4e06:             e.getCause() instanceof UnableToProxyException){
1:96d4e06:           //This is a weaving failure that should be logged, but the class
1:96d4e06:           //can still be loaded
1:2743a08:           LOGGER.trace(NLS.MESSAGES.getMessage("cannot.weave", wovenClass.getClassName()), e);
1:96d4e06:         } else {
1:bfc9463:           String failureMessage = NLS.MESSAGES.getMessage("fatal.weaving.failure", wovenClass.getClassName());
1:96d4e06:           //This is a failure that should stop the class loading!
1:bfc9463:           LOGGER.error(failureMessage, e);
1:bfc9463:           throw new WeavingException(failureMessage, e);
1:96d4e06:         }
1:96d4e06:       }
1:96d4e06:       
1:96d4e06:       if(bytes != null && bytes.length != 0) {
1:96d4e06:         wovenClass.setBytes(bytes);
1:96d4e06:         List<String> imports = wovenClass.getDynamicImports();
1:96d4e06:         imports.add(IMPORT_A);
1:96d4e06:         imports.add(IMPORT_B);
1:96d4e06:       }
1:96d4e06:     }
1:96d4e06:   }
1:bfc9463: 
1:48caea3:     private List<Pattern> parseMatchers(String matchers, String def) {
1:48caea3:         String[] strings = (matchers != null ? matchers : def).split(",");
1:48caea3:         List<Pattern> patterns = new ArrayList<Pattern>();
1:48caea3:         for (String str : strings) {
1:48caea3:             str = str.trim();
1:48caea3:             if (str.length() != 0) {
1:48caea3:                 str = str.replaceAll("\\.", "\\\\.");
1:48caea3:                 str = str.replaceAll("\\*", ".*");
1:48caea3:                 Pattern p = Pattern.compile(str);
1:48caea3:                 patterns.add(p);
1:bfc9463:             }
1:bfc9463:         }
1:48caea3:         return patterns;
3:48caea3:     }
1:48caea3: 
1:48caea3:     boolean isEnabled(String className) {
1:48caea3:         return matches(enabled, className);
1:48caea3:     }
1:48caea3: 
1:48caea3:     boolean isDisabled(String className) {
1:48caea3:         return matches(disabled, className);
1:48caea3:     }
1:48caea3: 
1:48caea3:     private boolean matches(List<Pattern> patterns, String className) {
1:48caea3:         for (Pattern p : patterns) {
1:48caea3:             if (p.matcher(className).matches()) {
1:48caea3:                 return true;
1:48caea3:             }
1:48caea3:         }
1:48caea3:         return false;
1:48caea3:     }
1:bfc9463:     
1:bfc9463:     public boolean isWoven(Class<?> clazz)
1:bfc9463:     {
1:bfc9463:       return WovenProxy.class.isAssignableFrom(clazz);
1:bfc9463:     }
3:48caea3: 
1:bfc9463:     public boolean isSuperClassWoven(WovenClass wovenClass)
1:bfc9463:     {
1:bfc9463:       ClassReader cReader = new ClassReader(wovenClass.getBytes());
1:bfc9463:       try {
1:bfc9463:           Class<?> superClass = Class.forName(cReader.getSuperName().replace('/', '.'), false,
1:bfc9463:                   wovenClass.getBundleWiring().getClassLoader());
1:bfc9463:           return WovenProxy.class.isAssignableFrom(superClass);
1:bfc9463:       } catch (ClassNotFoundException e) {
1:bfc9463:           String failureMessage = NLS.MESSAGES.getMessage("fatal.weaving.failure", wovenClass.getClassName());
1:bfc9463:           //This is a failure that should stop the class loading!
1:bfc9463:           LOGGER.error(failureMessage, e);
1:bfc9463:           throw new WeavingException(failureMessage, e);
1:bfc9463:       }
1:bfc9463:     }
1:bfc9463:     
1:bfc9463:   private boolean shouldWeave(WovenClass wovenClass)
1:bfc9463:   {
1:bfc9463:     // assume we weave
1:bfc9463:     boolean result = true;
1:bfc9463:     Object[] cs = controllers.getServices();
1:bfc9463:     
1:bfc9463:     // if we have at least 1 weaving controller
1:bfc9463:     if (cs != null && cs.length > 0) {
1:bfc9463:       // first of all set to false.
1:bfc9463:       result = false;
1:bfc9463:       for (Object obj : cs) {
1:bfc9463:         ProxyWeavingController c = (ProxyWeavingController) obj;
1:bfc9463:         if (c.shouldWeave(wovenClass, this)) {
1:bfc9463:           // exit as soon as we get told to weave, otherwise keep going.
1:bfc9463:           return true;
1:bfc9463:         }
1:bfc9463:       }
1:bfc9463:     } 
1:bfc9463:     
1:bfc9463:     return result;
1:bfc9463:   }
1:bfc9463: 
1:bfc9463: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:a897b56
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
1:     String enabledProp = context != null ? context.getProperty(WEAVING_ENABLED_CLASSES) : null;
1:     enabled = parseMatchers(enabledProp, WEAVING_ENABLED_CLASSES_DEFAULT);
1:     
1:     if (!"none".equals(enabledProp)) {
1:         Dictionary<String,String> props = new Hashtable<String,String>();
1:         // SubsystemResource.java also uses this constant. 
1:         //   While it could be turned into a static final constant, note that this
1:         //   is also a non-standard workaround in the absence of a solution in the spec. 
1:         // See the associated OSGi spec bug. 
1:         props.put("osgi.woven.packages", "org.apache.aries.proxy.weaving,org.apache.aries.proxy");
1:         context.registerService("org.osgi.framework.hooks.weaving.WeavingHook", this, props);
1:     }
1:     BundleWiring bw = wovenClass.getBundleWiring();
1:     if (bw != null) {
1:         Bundle b = bw.getBundle();
1:         
1:         if(b.getBundleId() == 0 || 
1:             b.getSymbolicName().startsWith("org.apache.aries.proxy") ||
1:             b.getSymbolicName().startsWith("org.apache.aries.util")) {
1:           return;
1:         }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7a91423
/////////////////////////////////////////////////////////////////////////
1:   public static final String WEAVING_DISABLED_CLASSES_DEFAULT = "org.objectweb.asm.*,org.slf4j.*,org.apache.log4j.*,javax.*,ch.qos.logback.*";
commit:e554274
/////////////////////////////////////////////////////////////////////////
0:         wovenClass.getClassName().startsWith("org.apache.log4j") ||
0:         wovenClass.getClassName().startsWith("javax."))
commit:2743a08
/////////////////////////////////////////////////////////////////////////
1:         LOGGER.trace(NLS.MESSAGES.getMessage("cannot.weave", wovenClass.getClassName()), e);
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl.weaving;
1: 
1: import java.util.List;
1: 
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.hooks.weaving.WeavingException;
1: import org.osgi.framework.hooks.weaving.WeavingHook;
1: import org.osgi.framework.hooks.weaving.WovenClass;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public final class ProxyWeavingHook implements WeavingHook {
1: 
0:   private static final Logger LOGGER = LoggerFactory
0:   .getLogger(ProxyWeavingHook.class);
1:   /** An import of the WovenProxy package */
1:   private static final String IMPORT_A = "org.apache.aries.proxy.weaving";
1:   /** 
1:    * An import for the InvocationListener class that we will need.
1:    * This should automatically wire to the right thing because of the uses clause
1:    * on the impl.weaving package
1:    */
1:   private static final String IMPORT_B = "org.apache.aries.proxy";
1:   
1:   public final void weave(WovenClass wovenClass) {
1:     
0:     Bundle b = wovenClass.getBundleWiring().getBundle();
1:     
0:     if(b.getBundleId() == 0 || 
0:         b.getSymbolicName().startsWith("org.apache.aries.proxy") ||
0:         b.getSymbolicName().startsWith("org.apache.aries.util")) {
1:       return;
1:     }
1:     
0:     if(wovenClass.getClassName().startsWith("org.objectweb.asm") || 
0:         wovenClass.getClassName().startsWith("org.slf4j") || 
0:         wovenClass.getClassName().startsWith("org.apache.log4j"))
1:       return;
1:     
1:     byte[] bytes = null;
1:     
1:     try {
1:       bytes = WovenProxyGenerator.getWovenProxy(wovenClass.getBytes(),
0:           wovenClass.getClassName(), wovenClass.getBundleWiring().getClassLoader());
1:       
1:     } catch (Exception e) {
1:       if(e instanceof RuntimeException && 
1:           e.getCause() instanceof UnableToProxyException){
1:         //This is a weaving failure that should be logged, but the class
1:         //can still be loaded
0:         LOGGER.info("The class " + wovenClass.getClassName() + " cannot be woven, it may" +
0:         		"not be possible for the runtime to proxy this class. The failure was : ", e);
1:       } else {
1:         //This is a failure that should stop the class loading!
0:         LOGGER.error("There was a serious error trying to weave the class " 
0:             + wovenClass.getClassName(), e);
0:         throw new WeavingException("There was a serious error trying to weave the class " 
0:           + wovenClass.getClassName(), e);
1:       }
1:     }
1:     
1:     if(bytes != null && bytes.length != 0) {
1:       wovenClass.setBytes(bytes);
1:       List<String> imports = wovenClass.getDynamicImports();
1:       imports.add(IMPORT_A);
1:       imports.add(IMPORT_B);
1:     }
1:   }
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:bfc9463
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.weaving.WovenProxy;
1: import org.apache.aries.proxy.weavinghook.ProxyWeavingController;
1: import org.apache.aries.proxy.weavinghook.WeavingHelper;
1: import org.objectweb.asm.ClassReader;
1: import org.osgi.util.tracker.ServiceTracker;
1: public final class ProxyWeavingHook implements WeavingHook, WeavingHelper {
/////////////////////////////////////////////////////////////////////////
1:   private final ServiceTracker controllers;
1:     controllers = new ServiceTracker(context, ProxyWeavingController.class.getName(), null);
1:     controllers.open();
/////////////////////////////////////////////////////////////////////////
1:     if (shouldWeave(wovenClass)) {
0:       byte[] bytes = null;
1:       try {
0:         bytes = WovenProxyGenerator.getWovenProxy(wovenClass.getBytes(),
1:                 wovenClass.getBundleWiring().getClassLoader());
1:         
0:       } catch (Exception e) {
0:         if(e instanceof RuntimeException && 
0:             e.getCause() instanceof UnableToProxyException){
0:           //This is a weaving failure that should be logged, but the class
0:           //can still be loaded
0:           LOGGER.trace(NLS.MESSAGES.getMessage("cannot.weave", wovenClass.getClassName()), e);
0:         } else {
1:           String failureMessage = NLS.MESSAGES.getMessage("fatal.weaving.failure", wovenClass.getClassName());
1:           //This is a failure that should stop the class loading!
1:           LOGGER.error(failureMessage, e);
1:           throw new WeavingException(failureMessage, e);
1:         }
1:       
0:       if(bytes != null && bytes.length != 0) {
0:         wovenClass.setBytes(bytes);
0:         List<String> imports = wovenClass.getDynamicImports();
0:         imports.add(IMPORT_A);
0:         imports.add(IMPORT_B);
1:       }
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isWoven(Class<?> clazz)
1:     {
1:       return WovenProxy.class.isAssignableFrom(clazz);
1:     }
1:     public boolean isSuperClassWoven(WovenClass wovenClass)
1:     {
1:       ClassReader cReader = new ClassReader(wovenClass.getBytes());
0:       try {
1:           Class<?> superClass = Class.forName(cReader.getSuperName().replace('/', '.'), false,
1:                   wovenClass.getBundleWiring().getClassLoader());
1:           return WovenProxy.class.isAssignableFrom(superClass);
1:       } catch (ClassNotFoundException e) {
1:           String failureMessage = NLS.MESSAGES.getMessage("fatal.weaving.failure", wovenClass.getClassName());
0:           //This is a failure that should stop the class loading!
1:           LOGGER.error(failureMessage, e);
1:           throw new WeavingException(failureMessage, e);
1:       }
1:     }
1:     
1:   private boolean shouldWeave(WovenClass wovenClass)
1:   {
1:     // assume we weave
1:     boolean result = true;
1:     Object[] cs = controllers.getServices();
1:     
1:     // if we have at least 1 weaving controller
1:     if (cs != null && cs.length > 0) {
1:       // first of all set to false.
1:       result = false;
1:       for (Object obj : cs) {
1:         ProxyWeavingController c = (ProxyWeavingController) obj;
1:         if (c.shouldWeave(wovenClass, this)) {
1:           // exit as soon as we get told to weave, otherwise keep going.
1:           return true;
1:         }
1:       }
1:     } 
1:     
1:     return result;
1:   }
1: 
1: }
commit:ef57cb3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.NLS;
/////////////////////////////////////////////////////////////////////////
1:   private static final Logger LOGGER = LoggerFactory.getLogger(ProxyWeavingHook.class);
/////////////////////////////////////////////////////////////////////////
0:         LOGGER.info(NLS.MESSAGES.getMessage("cannot.weave", wovenClass.getClassName()), e);
0:         String failureMessage = NLS.MESSAGES.getMessage("fatal.weaving.failure", wovenClass.getClassName());
0:         LOGGER.error(failureMessage, e);
0:         throw new WeavingException(failureMessage, e);
author:David Jencks
-------------------------------------------------------------------------------
commit:f80358e
/////////////////////////////////////////////////////////////////////////
0:               wovenClass.getBundleWiring().getClassLoader());
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:48caea3
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.regex.Pattern;
1: import org.osgi.framework.BundleContext;
/////////////////////////////////////////////////////////////////////////
1:   public static final String WEAVING_ENABLED_CLASSES = "org.apache.aries.proxy.weaving.enabled";
1:   public static final String WEAVING_DISABLED_CLASSES = "org.apache.aries.proxy.weaving.disabled";
1: 
1:   public static final String WEAVING_ENABLED_CLASSES_DEFAULT = "*";
0:   public static final String WEAVING_DISABLED_CLASSES_DEFAULT = "org.objectweb.asm.*,org.slf4j.*,org.apache.log4j.*,javax.*";
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:   private final List<Pattern> enabled;
1:   private final List<Pattern> disabled;
1: 
1:   public ProxyWeavingHook(BundleContext context) {
0:     enabled = parseMatchers(context != null ? context.getProperty(WEAVING_ENABLED_CLASSES) : null, WEAVING_ENABLED_CLASSES_DEFAULT);
1:     disabled = parseMatchers(context != null ? context.getProperty(WEAVING_DISABLED_CLASSES) : null, WEAVING_DISABLED_CLASSES_DEFAULT);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     if (!isEnabled(wovenClass.getClassName()) || isDisabled(wovenClass.getClassName())) {
0:         return;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     private List<Pattern> parseMatchers(String matchers, String def) {
1:         String[] strings = (matchers != null ? matchers : def).split(",");
1:         List<Pattern> patterns = new ArrayList<Pattern>();
1:         for (String str : strings) {
1:             str = str.trim();
1:             if (str.length() != 0) {
1:                 str = str.replaceAll("\\.", "\\\\.");
1:                 str = str.replaceAll("\\*", ".*");
1:                 Pattern p = Pattern.compile(str);
1:                 patterns.add(p);
1:             }
1:         }
1:         return patterns;
1:     }
0: 
1:     boolean isEnabled(String className) {
1:         return matches(enabled, className);
1:     }
0: 
1:     boolean isDisabled(String className) {
1:         return matches(disabled, className);
1:     }
0: 
1:     private boolean matches(List<Pattern> patterns, String className) {
1:         for (Pattern p : patterns) {
1:             if (p.matcher(className).matches()) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
0: 
============================================================================