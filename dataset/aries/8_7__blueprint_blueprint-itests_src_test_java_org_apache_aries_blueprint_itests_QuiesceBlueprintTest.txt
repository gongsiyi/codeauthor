1:da163d0: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:da163d0:  *  contributor license agreements.  See the NOTICE file distributed with
1:da163d0:  *  this work for additional information regarding copyright ownership.
1:da163d0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:da163d0:  *  (the "License"); you may not use this file except in compliance with
1:da163d0:  *  the License.  You may obtain a copy of the License at
1:da163d0:  *
1:da163d0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:da163d0:  *
1:da163d0:  *  Unless required by applicable law or agreed to in writing, software
1:da163d0:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:da163d0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da163d0:  *  See the License for the specific language governing permissions and
1:da163d0:  *  limitations under the License.
1:da163d0:  */
1:da163d0: package org.apache.aries.blueprint.itests;
19:da163d0: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:da163d0: import static org.junit.Assert.assertNotNull;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.bootDelegationPackages;
1:d251156: 
1:da163d0: import java.util.ArrayList;
1:da163d0: import java.util.Collections;
1:da163d0: import java.util.List;
1:109b82f: import java.util.Arrays;
1:da163d0: 
1:da163d0: import junit.framework.Assert;
1:da163d0: 
1:da163d0: import org.apache.aries.blueprint.testquiescebundle.TestBean;
1:da163d0: import org.apache.aries.quiesce.manager.QuiesceCallback;
1:da163d0: import org.apache.aries.quiesce.participant.QuiesceParticipant;
1:da163d0: import org.junit.Test;
1:da163d0: import org.junit.runner.RunWith;
1:d251156: import org.ops4j.pax.exam.Configuration;
1:da163d0: import org.ops4j.pax.exam.CoreOptions;
1:da163d0: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:da163d0: import org.ops4j.pax.exam.options.BootDelegationOption;
1:d251156: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:d251156: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:da163d0: import org.osgi.framework.Bundle;
1:da163d0: import org.osgi.framework.InvalidSyntaxException;
1:da163d0: import org.osgi.framework.ServiceReference;
1:da163d0: import org.osgi.framework.Version;
1:da163d0: 
1:d251156: @RunWith(PaxExam.class)
1:d251156: @ExamReactorStrategy(PerMethod.class)
1:d251156: public class QuiesceBlueprintTest extends AbstractBlueprintIntegrationTest {
1:da163d0: 
1:da163d0:   private static class TestQuiesceCallback implements QuiesceCallback
1:da163d0:   {
1:da163d0:     private int calls = 0;
1:da163d0: 
1:109b82f:   	public synchronized void bundleQuiesced(Bundle... bundlesQuiesced) {
1:109b82f:   		System.out.println("bundleQuiesced "+ Arrays.toString(bundlesQuiesced));
1:109b82f:   	  calls++;
1:109b82f:   	}
1:109b82f:   	
1:109b82f:   	public synchronized int getCalls() {
1:109b82f:   		return calls;
1:109b82f:   	}
14:da163d0:   }
1:da163d0:   
1:d251156:   @SuppressWarnings({ "rawtypes", "unchecked" })
1:d251156: private QuiesceParticipant getParticipant(String bundleName) throws InvalidSyntaxException {
1:da163d0:     ServiceReference[] refs = bundleContext.getServiceReferences(QuiesceParticipant.class.getName(), null);
1:da163d0:     
1:da163d0:     if(refs != null) {
1:da163d0:       for(ServiceReference ref : refs) {
1:da163d0:         if(ref.getBundle().getSymbolicName().equals(bundleName))
1:da163d0:           return (QuiesceParticipant) bundleContext.getService(ref);
1:da163d0:         else System.out.println(ref.getBundle().getSymbolicName());
1:da163d0:       }
1:da163d0:     }
1:da163d0:     
1:da163d0:     
1:da163d0:     return null;
1:da163d0:   }
1:da163d0: 
1:d251156:   @Configuration
1:d251156:   public Option[] configuration() {
1:d251156:     return new Option[] {
1:d251156:             baseOptions(),
1:d251156:             bootDelegationPackages("javax.transaction", "javax.transaction.*"),
1:d251156:             CoreOptions.vmOption("-Dorg.osgi.framework.system.packages=javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.transaction;partial=true;mandatory:=partial,javax.transaction.xa;partial=true;mandatory:=partial"),
1:86224ba:             Helper.blueprintBundles(),
1:c185a5a: 
1:c185a5a:             mvnBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api"),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea", false),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb", false),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testquiescebundle")
1:d251156:     };
1:da163d0:   }
1:da163d0:   
1:da163d0:   
1:da163d0:   protected Bundle getBundle(String symbolicName) {
1:da163d0:     return getBundle(symbolicName, null);
1:da163d0:   }
1:da163d0: 
1:da163d0:   protected Bundle getBundle(String bundleSymbolicName, String version) {
1:da163d0:     Bundle result = null;
1:da163d0:     for (Bundle b : bundleContext.getBundles()) {
1:da163d0:       if (b.getSymbolicName().equals(bundleSymbolicName)) {
1:da163d0:         if (version == null
1:da163d0:             || b.getVersion().equals(Version.parseVersion(version))) {
1:da163d0:           result = b;
1:da163d0:           break;
1:da163d0:         }
1:da163d0:       }
1:da163d0:     }
1:da163d0:     return result;
1:da163d0:   }
1:da163d0: 
1:da163d0:   public static BootDelegationOption bootDelegation() {
1:da163d0:     return new BootDelegationOption("org.apache.aries.unittest.fixture");
1:da163d0:   }
1:da163d0:   
1:da163d0:   @Test
1:da163d0:   public void testBasicQuieseEmptyCounter() throws Exception 
1:da163d0:   {
1:da163d0: 	  //This test checks that a single bundle when called will not quiesce while 
1:da163d0: 	  //there is an active request (method sleeps), but will quiesce after the 
1:da163d0: 	  //request is completed. 
1:da163d0: 	  
1:da163d0: 	System.out.println("In testBasicQuieseEmptyCounter");
1:86224ba: 	Object obj = context().getService(TestBean.class);
1:da163d0: 	
1:da163d0: 	if (obj != null)
1:da163d0: 	{
1:459a551: 	  QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint.core");
1:da163d0: 	  
1:da163d0: 	  if (participant != null)
1:da163d0: 	  {
1:da163d0: 	    System.out.println(obj.getClass().getName());
1:da163d0: 
1:da163d0: 	    TestQuiesceCallback callback = new TestQuiesceCallback();
1:da163d0: 	    
1:da163d0: 	    Bundle bundle = getBundle("org.apache.aries.blueprint.testquiescebundle");
1:da163d0: 	    
1:da163d0: 	    System.out.println("Got the bundle");
1:da163d0: 	    
1:da163d0: 	    List<Bundle> bundles = new ArrayList<Bundle>();
1:da163d0: 	    bundles.add(bundle);
1:da163d0: 	    
1:5254613: 	    Thread t = new Thread(new TestBeanClient((TestBean)obj, 2000));
1:da163d0: 	    t.start();
1:da163d0: 
1:da163d0: 	    System.out.println("Thread Started");
1:da163d0: 	    
2:da163d0: 	    participant.quiesce(callback, bundles);
1:da163d0: 	    
1:da163d0: 	    System.out.println("Called Quiesce");
1:da163d0: 	    
1:da163d0: 	    Thread.sleep(1000);
1:da163d0: 	    
1:da163d0: 	    Assert.assertTrue("Quiesce callback should not have occurred yet; calls should be 0, but it is "+callback.getCalls(), callback.getCalls()==0);
1:da163d0: 	    
1:109b82f: 	    t.join();
1:da163d0: 	    
1:109b82f: 	    System.out.println("After join");
1:da163d0: 	    
1:da163d0: 	    Assert.assertTrue("Quiesce callback should have occurred once; calls should be 1, but it is "+callback.getCalls(), callback.getCalls()==1);
1:da163d0: 	    
1:da163d0:  	  }
1:da163d0:   	  else
1:da163d0: 	  {
1:da163d0: 		throw new Exception("No Quiesce Participant found for the blueprint service");
1:da163d0: 	  }
1:da163d0:   
1:da163d0: 	  System.out.println("done");
1:da163d0: 	}
1:da163d0: 	else
1:da163d0: 	{
1:da163d0: 		throw new Exception("No Service returned for " + TestBean.class);
1:da163d0: 	}
1:da163d0:   }
1:da163d0:   
1:da163d0:   @Test
1:da163d0:   public void testNoServicesQuiesce() throws Exception {
1:da163d0:    
1:da163d0:    //This test covers the case where one of the bundles being asked to quiesce has no 
1:da163d0:    //services. It should be quiesced immediately.
1:da163d0: 	  
1:da163d0:    System.out.println("In testNoServicesQuiesce");
1:86224ba: 	Object obj = context().getService(TestBean.class);
1:da163d0: 	
1:da163d0: 	if (obj != null)
1:da163d0: 	{    
1:459a551: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint.core");
1:da163d0: 		
1:da163d0: 		if (participant != null)
1:da163d0: 		{
1:da163d0: 			TestQuiesceCallback callbackA = new TestQuiesceCallback();
1:da163d0: 			TestQuiesceCallback callbackB = new TestQuiesceCallback();
1:da163d0: 		    
1:da163d0: 			//bundlea provides the ns handlers, bean processors, interceptors etc for this test.
1:da163d0: 	        Bundle bundlea = getBundle("org.apache.aries.blueprint.testbundlea");
1:da163d0: 	        assertNotNull(bundlea);
1:da163d0: 	        bundlea.start();
1:da163d0: 	        
1:da163d0: 	        //bundleb has no services and makes use of the extensions provided by bundlea
1:da163d0: 	        Bundle bundleb = getBundle("org.apache.aries.blueprint.testbundleb");
1:da163d0: 	        assertNotNull(bundleb);
1:da163d0: 	        bundleb.start();
1:109b82f: 	        
1:86224ba: 	        Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.testbundleb");
1:da163d0: 	        
1:da163d0: 			participant.quiesce(callbackB, Collections.singletonList(getBundle(
1:da163d0: 				"org.apache.aries.blueprint.testbundleb")));
1:da163d0: 			
1:da163d0: 		    System.out.println("Called Quiesce");
1:da163d0: 		    
1:da163d0: 		    Thread.sleep(200);
1:da163d0: 		    
1:da163d0: 		    Assert.assertTrue("Quiesce callback B should have occurred; calls should be 1, but it is "+callbackB.getCalls(), callbackB.getCalls()==1);
1:da163d0: 		    Assert.assertTrue("Quiesce callback A should not have occurred yet; calls should be 0, but it is "+callbackA.getCalls(), callbackA.getCalls()==0);
1:da163d0: 		    
1:109b82f: 		    bundleb.stop();
1:109b82f: 		    
1:da163d0: 		    participant.quiesce(callbackA, Collections.singletonList(getBundle(
1:da163d0: 			"org.apache.aries.blueprint.testbundlea")));
1:da163d0: 				    
1:da163d0: 		    Thread.sleep(1000);
1:da163d0: 		    
2:da163d0: 		    System.out.println("After second sleep");
1:da163d0: 		    
1:da163d0: 		    Assert.assertTrue("Quiesce callback A should have occurred once; calls should be 1, but it is "+callbackA.getCalls(), callbackA.getCalls()==1);
1:da163d0: 		    Assert.assertTrue("Quiesce callback B should have occurred once; calls should be 1, but it is "+callbackB.getCalls(), callbackB.getCalls()==1);
1:da163d0: 		    
1:da163d0: 		}else{
1:da163d0: 			throw new Exception("No Quiesce Participant found for the blueprint service");
1:da163d0: 		}
1:da163d0: 	}else{
1:da163d0: 		throw new Exception("No Service returned for " + TestBean.class);
1:da163d0: 	}
1:da163d0:   }
1:da163d0: 
1:da163d0:   @Test
1:da163d0:   public void testMultiBundleQuiesce() throws Exception {
1:da163d0:    
1:da163d0:    //This test covers the case where two bundles are quiesced at the same time. 
1:da163d0:    //Bundle A should quiesce immediately, quiesce bundle should quiesce after the 
1:da163d0:    //request has completed.
1:da163d0: 	  
1:da163d0:    System.out.println("In testMultiBundleQuiesce");
1:86224ba: 	Object obj = context().getService(TestBean.class);
1:da163d0: 	
1:da163d0: 	if (obj != null)
1:da163d0: 	{    
1:459a551: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint.core");
1:da163d0: 		
1:da163d0: 		if (participant != null)
1:da163d0: 		{
1:da163d0: 			TestQuiesceCallback callback = new TestQuiesceCallback();
1:da163d0: 		    
1:da163d0: 			//bundlea provides the ns handlers, bean processors, interceptors etc for this test.
1:da163d0: 	        Bundle bundlea = getBundle("org.apache.aries.blueprint.testbundlea");
1:da163d0: 	        assertNotNull(bundlea);
1:da163d0: 	        bundlea.start();
1:da163d0: 	        
1:da163d0: 	        //quiesce bundle will sleep for a second so will quiesce after that
1:da163d0: 		    Bundle bundleq = getBundle("org.apache.aries.blueprint.testquiescebundle");
1:da163d0: 		    
1:da163d0: 		    System.out.println("Got the bundle");
1:da163d0: 		    
1:da163d0: 		    List<Bundle> bundles = new ArrayList<Bundle>();
1:da163d0: 		    bundles.add(bundlea);
1:da163d0: 		    bundles.add(bundleq);
1:da163d0: 		    
2:da163d0: 		    Thread t = new Thread(new TestBeanClient((TestBean)obj, 1500));
1:da163d0: 		    t.start();
1:8f4d7a3: 		    Thread.sleep(200);
1:da163d0: 	        
1:109b82f: 			  participant.quiesce(callback, bundles);
1:da163d0: 			
1:da163d0: 		    System.out.println("Called Quiesce");
1:da163d0: 		    
1:da163d0: 		    Thread.sleep(500);
1:da163d0: 		    
1:da163d0: 		    Assert.assertTrue("Quiesce callback should have occurred once for bundle a but not for bundle q; calls should be 1, but it is "+callback.getCalls(), callback.getCalls()==1);
1:da163d0: 		    
2:da163d0: 		    Thread.sleep(1500);
1:da163d0: 		    
1:da163d0: 		    System.out.println("After second sleep");
1:da163d0: 		    
1:da163d0: 		    Assert.assertTrue("Quiesce callback should have occurred twice, once for bundle a and q respectively; calls should be 2, but it is "+callback.getCalls(), callback.getCalls()==2);
1:da163d0: 		    
1:da163d0: 		}else{
1:da163d0: 			throw new Exception("No Quiesce Participant found for the blueprint service");
1:da163d0: 		}
1:da163d0: 	}else{
1:da163d0: 		throw new Exception("No Service returned for " + TestBean.class);
1:da163d0: 	}
1:da163d0:   }
1:da163d0:   
1:da163d0:   @Test
1:da163d0:   public void testMultiRequestQuiesce() throws Exception {
1:da163d0:    
1:da163d0:    //This test covers the case where we have two active requests when 
1:da163d0:    //the bundle is being quiesced.
1:da163d0: 	  
1:da163d0:    System.out.println("In testMultiRequestQuiesce");
1:86224ba: 	Object obj = context().getService(TestBean.class);
1:da163d0: 	
1:da163d0: 	if (obj != null)
1:da163d0: 	{    
1:459a551: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint.core");
1:da163d0: 		
1:da163d0: 		if (participant != null)
1:da163d0: 		{
1:da163d0: 			TestQuiesceCallback callback = new TestQuiesceCallback();
1:da163d0: 			TestBeanClient client =  new TestBeanClient((TestBean)obj, 1500);
1:da163d0: 		    
1:da163d0: 
1:da163d0: 	        //quiesce bundle will sleep for a second so will quiesce after that
1:da163d0: 		    Bundle bundle = getBundle("org.apache.aries.blueprint.testquiescebundle");
1:da163d0: 		    
1:da163d0: 		    System.out.println("Got the bundle");
1:da163d0: 		    
1:da163d0: 		    List<Bundle> bundles = new ArrayList<Bundle>();
1:da163d0: 		    bundles.add(bundle);
1:da163d0: 		    
1:da163d0: 		    Thread t = new Thread(client);
1:da163d0: 		    t.start();
1:da163d0: 	        
1:da163d0: 			participant.quiesce(callback, bundles);
1:da163d0: 			
1:da163d0: 		    System.out.println("Called Quiesce, putting in a new request");
1:da163d0: 		    
1:da163d0: 		    Thread t2 = new Thread(client);
1:da163d0: 		    t2.start();
1:da163d0: 		    
1:da163d0: 		    Thread.sleep(5000);
1:da163d0: 		    
1:da163d0: 		    Assert.assertTrue("Quiesce callback should have occurred once; calls should be 1, but it is "+callback.getCalls(), callback.getCalls()==1);
1:da163d0: 		    
1:da163d0:    
1:da163d0: 		}else{
1:da163d0: 			throw new Exception("No Quiesce Participant found for the blueprint service");
1:da163d0: 		}
1:da163d0: 	}else{
1:da163d0: 		throw new Exception("No Service returned for " + TestBean.class);
1:da163d0: 	}
1:da163d0:   }
1:da163d0:   
1:da163d0:   
1:da163d0:   private class TestBeanClient implements Runnable
1:da163d0:   {
1:86224ba:     private final TestBean myService;
1:86224ba:     private final int time;
1:da163d0:     
1:da163d0:     public TestBeanClient(TestBean myService, int time)
1:da163d0:     {
1:da163d0:       this.myService = myService;
1:da163d0:       this.time = time;
1:da163d0:     }
1:da163d0: 	  
1:da163d0: 	public void run() 
1:da163d0: 	{
1:da163d0: 	  try
1:da163d0: 	  {
1:da163d0: 		System.out.println("In Test Bean Client - Sleeping zzzzzzz");
1:da163d0: 		myService.sleep(time);
1:da163d0: 		System.out.println("Woken up");
1:da163d0: 	  }
1:da163d0: 	  catch (InterruptedException ie)
1:da163d0: 	  {
1:da163d0: 		  ie.printStackTrace();
1:da163d0: 	  }
1:da163d0: 	}
1:da163d0: 	  
1:da163d0:   }
1:da163d0: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:             mvnBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api"),
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea", false),
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb", false),
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testquiescebundle")
/////////////////////////////////////////////////////////////////////////
commit:071e3fe
/////////////////////////////////////////////////////////////////////////
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.bootDelegationPackages;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerMethod.class)
1: public class QuiesceBlueprintTest extends AbstractBlueprintIntegrationTest {
/////////////////////////////////////////////////////////////////////////
1:   @SuppressWarnings({ "rawtypes", "unchecked" })
1: private QuiesceParticipant getParticipant(String bundleName) throws InvalidSyntaxException {
/////////////////////////////////////////////////////////////////////////
1:   @Configuration
1:   public Option[] configuration() {
1:     return new Option[] {
1:             baseOptions(),
1:             bootDelegationPackages("javax.transaction", "javax.transaction.*"),
1:             CoreOptions.vmOption("-Dorg.osgi.framework.system.packages=javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.transaction;partial=true;mandatory:=partial,javax.transaction.xa;partial=true;mandatory:=partial"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testquiescebundle")
1:     };
commit:459a551
/////////////////////////////////////////////////////////////////////////
1: 	  QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint.core");
/////////////////////////////////////////////////////////////////////////
1: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint.core");
/////////////////////////////////////////////////////////////////////////
1: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint.core");
/////////////////////////////////////////////////////////////////////////
1: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint.core");
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import static org.apache.aries.itest.ExtraOptions.*;
0: public class QuiesceBlueprintTest extends AbstractIntegrationTest {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     return testOptions(
0:             paxLogging("DEBUG"),
0:             transactionBootDelegation(),
1:             Helper.blueprintBundles(),
0:             mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea").noStart(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb").noStart(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testquiescebundle"),
0:             equinox().version("3.5.0"));
/////////////////////////////////////////////////////////////////////////
1: 	Object obj = context().getService(TestBean.class);
/////////////////////////////////////////////////////////////////////////
1: 	Object obj = context().getService(TestBean.class);
/////////////////////////////////////////////////////////////////////////
1: 	        Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.testbundleb");
/////////////////////////////////////////////////////////////////////////
1: 	Object obj = context().getService(TestBean.class);
/////////////////////////////////////////////////////////////////////////
1: 	Object obj = context().getService(TestBean.class);
/////////////////////////////////////////////////////////////////////////
1:     private final TestBean myService;
1:     private final int time;
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:109b82f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:   	public synchronized void bundleQuiesced(Bundle... bundlesQuiesced) {
1:   		System.out.println("bundleQuiesced "+ Arrays.toString(bundlesQuiesced));
1:   	  calls++;
1:   	}
1:   	
1:   	public synchronized int getCalls() {
1:   		return calls;
1:   	}
/////////////////////////////////////////////////////////////////////////
1: 	    t.join();
1: 	    System.out.println("After join");
/////////////////////////////////////////////////////////////////////////
0: 	        getBlueprintContainerForBundle(bundleContext, "org.apache.aries.blueprint.testbundleb", DEFAULT_TIMEOUT);
1: 	        
/////////////////////////////////////////////////////////////////////////
1: 		    bundleb.stop();
1: 		    
/////////////////////////////////////////////////////////////////////////
1: 			  participant.quiesce(callback, bundles);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:         mavenBundle("asm", "asm-all"),
/////////////////////////////////////////////////////////////////////////
0: //        new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
/////////////////////////////////////////////////////////////////////////
1: 	    Thread t = new Thread(new TestBeanClient((TestBean)obj, 2000));
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:79902ae
/////////////////////////////////////////////////////////////////////////
author:Lin Sun
-------------------------------------------------------------------------------
commit:8f4d7a3
/////////////////////////////////////////////////////////////////////////
0:         //mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.cm"),
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		    Thread.sleep(200);
author:Holly Cummins
-------------------------------------------------------------------------------
commit:da163d0
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import static org.junit.Assert.assertNotNull;
0: import static org.ops4j.pax.exam.CoreOptions.bootDelegationPackages;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
0: import static org.ops4j.pax.exam.OptionUtils.combine;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: import junit.framework.Assert;
1: 
1: import org.apache.aries.blueprint.testquiescebundle.TestBean;
1: import org.apache.aries.quiesce.manager.QuiesceCallback;
1: import org.apache.aries.quiesce.participant.QuiesceParticipant;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Inject;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.options.VMOption;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.ops4j.pax.exam.options.BootDelegationOption;
0: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.Filter;
0: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
0: import org.osgi.util.tracker.ServiceTracker;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class QuiesceBlueprintTest extends AbstractIntegrationTest{
1: 
1:   private static class TestQuiesceCallback implements QuiesceCallback
1:   {
1:     private int calls = 0;
1: 
0: 	public void bundleQuiesced(Bundle... bundlesQuiesced) {
0: 		System.out.println("bundleQuiesced "+ bundlesQuiesced);
0: 	      calls++;
1: 	}
1: 	
0: 	public int getCalls() {
0: 		return calls;
1: 	}
1:   }
1: 
0:   private static final int DEFAULT_TIMEOUT = 30000;
1:   
0:   @Inject
0:   protected BundleContext bundleContext;
1:  
1:   
0:   private QuiesceParticipant getParticipant(String bundleName) throws InvalidSyntaxException {
1:     ServiceReference[] refs = bundleContext.getServiceReferences(QuiesceParticipant.class.getName(), null);
1:     
1:     if(refs != null) {
1:       for(ServiceReference ref : refs) {
1:         if(ref.getBundle().getSymbolicName().equals(bundleName))
1:           return (QuiesceParticipant) bundleContext.getService(ref);
1:         else System.out.println(ref.getBundle().getSymbolicName());
1:       }
1:     }
1:     
1:     
1:     return null;
1:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         bootDelegationPackages("javax.transaction", "javax.transaction.*"),
0:         vmOption("-Dorg.osgi.framework.system.packages=javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.transaction;partial=true;mandatory:=partial,javax.transaction.xa;partial=true;mandatory:=partial"),
1:         
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:         // Bundles
0:         mavenBundle("asm","asm-all"),
0:         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.cglib"),
1:         
0:         mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea").noStart(),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb").noStart(),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testquiescebundle"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.cm"),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
1:         
0:         //new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
1:         
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
1:   }
1:   
1:   
1:   protected Bundle getBundle(String symbolicName) {
1:     return getBundle(symbolicName, null);
1:   }
1: 
1:   protected Bundle getBundle(String bundleSymbolicName, String version) {
1:     Bundle result = null;
1:     for (Bundle b : bundleContext.getBundles()) {
1:       if (b.getSymbolicName().equals(bundleSymbolicName)) {
1:         if (version == null
1:             || b.getVersion().equals(Version.parseVersion(version))) {
1:           result = b;
1:           break;
1:         }
1:       }
1:     }
1:     return result;
1:   }
1: 
1:   public static BootDelegationOption bootDelegation() {
1:     return new BootDelegationOption("org.apache.aries.unittest.fixture");
1:   }
1:   
0:   public static MavenArtifactProvisionOption mavenBundle(String groupId,
0:       String artifactId) {
0:     return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId)
0:         .versionAsInProject();
1:   }
1: 
0:   protected static Option[] updateOptions(Option[] options) {
0:     // We need to add pax-exam-junit here when running with the ibm
0:     // jdk to avoid the following exception during the test run:
0:     // ClassNotFoundException: org.ops4j.pax.exam.junit.Configuration
0:     if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
0:       Option[] ibmOptions = options(wrappedBundle(mavenBundle(
0:           "org.ops4j.pax.exam", "pax-exam-junit")));
0:       options = combine(ibmOptions, options);
1:     }
1: 
0:     return options;
1:   }
1: 
0:   protected <T> T getOsgiService(Class<T> type, long timeout) {
0:     return getOsgiService(type, null, timeout);
1:   }
1: 
0:   protected <T> T getOsgiService(Class<T> type) {
0:     return getOsgiService(type, null, DEFAULT_TIMEOUT);
1:   }
1:   
0:   protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {
0:     return getOsgiService(null, type, filter, timeout);
1:   }
1: 
0:   protected <T> T getOsgiService(BundleContext bc, Class<T> type,
0:       String filter, long timeout) {
0:     ServiceTracker tracker = null;
0:     try {
0:       String flt;
0:       if (filter != null) {
0:         if (filter.startsWith("(")) {
0:           flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")"
0:               + filter + ")";
0:         } else {
0:           flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")("
0:               + filter + "))";
1:         }
0:       } else {
0:         flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:       }
0:       Filter osgiFilter = FrameworkUtil.createFilter(flt);
0:       tracker = new ServiceTracker(bc == null ? bundleContext : bc, osgiFilter,
0:           null);
0:       tracker.open();
0:       // Note that the tracker is not closed to keep the reference
0:       // This is buggy, has the service reference may change i think
0:       Object svc = type.cast(tracker.waitForService(timeout));
0:       if (svc == null) {
0:         throw new RuntimeException("Gave up waiting for service " + flt);
1:       }
0:       return type.cast(svc);
0:     } catch (InvalidSyntaxException e) {
0:       throw new IllegalArgumentException("Invalid filter", e);
0:     } catch (InterruptedException e) {
0:       throw new RuntimeException(e);
1:     }
1:   }
1:   
1:   @Test
1:   public void testBasicQuieseEmptyCounter() throws Exception 
1:   {
1: 	  //This test checks that a single bundle when called will not quiesce while 
1: 	  //there is an active request (method sleeps), but will quiesce after the 
1: 	  //request is completed. 
1: 	  
1: 	System.out.println("In testBasicQuieseEmptyCounter");
0: 	Object obj = getOsgiService(TestBean.class);
1: 	
1: 	if (obj != null)
1: 	{
0: 	  QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint");
1: 	  
1: 	  if (participant != null)
1: 	  {
1: 	    System.out.println(obj.getClass().getName());
1: 
1: 	    TestQuiesceCallback callback = new TestQuiesceCallback();
1: 	    
1: 	    Bundle bundle = getBundle("org.apache.aries.blueprint.testquiescebundle");
1: 	    
1: 	    System.out.println("Got the bundle");
1: 	    
1: 	    List<Bundle> bundles = new ArrayList<Bundle>();
1: 	    bundles.add(bundle);
1: 	    
1: 	    Thread t = new Thread(new TestBeanClient((TestBean)obj, 1500));
1: 	    t.start();
1: 
1: 	    System.out.println("Thread Started");
1: 	    
1: 	    participant.quiesce(callback, bundles);
1: 	    
1: 	    System.out.println("Called Quiesce");
1: 	    
1: 	    Thread.sleep(1000);
1: 	    
1: 	    Assert.assertTrue("Quiesce callback should not have occurred yet; calls should be 0, but it is "+callback.getCalls(), callback.getCalls()==0);
1: 	    
1: 	    Thread.sleep(1500);
1: 	    
1: 	    System.out.println("After second sleep");
1: 	    
1: 	    Assert.assertTrue("Quiesce callback should have occurred once; calls should be 1, but it is "+callback.getCalls(), callback.getCalls()==1);
1: 	    
1:  	  }
1:   	  else
1: 	  {
1: 		throw new Exception("No Quiesce Participant found for the blueprint service");
1: 	  }
1:   
1: 	  System.out.println("done");
1: 	}
1: 	else
1: 	{
1: 		throw new Exception("No Service returned for " + TestBean.class);
1: 	}
1:   }
1:   
1:   @Test
1:   public void testNoServicesQuiesce() throws Exception {
1:    
1:    //This test covers the case where one of the bundles being asked to quiesce has no 
1:    //services. It should be quiesced immediately.
1: 	  
1:    System.out.println("In testNoServicesQuiesce");
0: 	Object obj = getOsgiService(TestBean.class);
1: 	
1: 	if (obj != null)
1: 	{    
0: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint");
1: 		
1: 		if (participant != null)
1: 		{
1: 			TestQuiesceCallback callbackA = new TestQuiesceCallback();
1: 			TestQuiesceCallback callbackB = new TestQuiesceCallback();
1: 		    
1: 			//bundlea provides the ns handlers, bean processors, interceptors etc for this test.
1: 	        Bundle bundlea = getBundle("org.apache.aries.blueprint.testbundlea");
1: 	        assertNotNull(bundlea);
1: 	        bundlea.start();
1: 	        
1: 	        //bundleb has no services and makes use of the extensions provided by bundlea
1: 	        Bundle bundleb = getBundle("org.apache.aries.blueprint.testbundleb");
1: 	        assertNotNull(bundleb);
1: 	        bundleb.start();
1: 	        
1: 			participant.quiesce(callbackB, Collections.singletonList(getBundle(
1: 				"org.apache.aries.blueprint.testbundleb")));
1: 			
1: 		    System.out.println("Called Quiesce");
1: 		    
1: 		    Thread.sleep(200);
1: 		    
1: 		    Assert.assertTrue("Quiesce callback B should have occurred; calls should be 1, but it is "+callbackB.getCalls(), callbackB.getCalls()==1);
1: 		    Assert.assertTrue("Quiesce callback A should not have occurred yet; calls should be 0, but it is "+callbackA.getCalls(), callbackA.getCalls()==0);
1: 		    
1: 		    participant.quiesce(callbackA, Collections.singletonList(getBundle(
1: 			"org.apache.aries.blueprint.testbundlea")));
1: 				    
1: 		    Thread.sleep(1000);
1: 		    
1: 		    System.out.println("After second sleep");
1: 		    
1: 		    Assert.assertTrue("Quiesce callback A should have occurred once; calls should be 1, but it is "+callbackA.getCalls(), callbackA.getCalls()==1);
1: 		    Assert.assertTrue("Quiesce callback B should have occurred once; calls should be 1, but it is "+callbackB.getCalls(), callbackB.getCalls()==1);
1: 		    
1: 		}else{
1: 			throw new Exception("No Quiesce Participant found for the blueprint service");
1: 		}
1: 	}else{
1: 		throw new Exception("No Service returned for " + TestBean.class);
1: 	}
1:   }
1: 
1:   @Test
1:   public void testMultiBundleQuiesce() throws Exception {
1:    
1:    //This test covers the case where two bundles are quiesced at the same time. 
1:    //Bundle A should quiesce immediately, quiesce bundle should quiesce after the 
1:    //request has completed.
1: 	  
1:    System.out.println("In testMultiBundleQuiesce");
0: 	Object obj = getOsgiService(TestBean.class);
1: 	
1: 	if (obj != null)
1: 	{    
0: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint");
1: 		
1: 		if (participant != null)
1: 		{
1: 			TestQuiesceCallback callback = new TestQuiesceCallback();
1: 		    
1: 			//bundlea provides the ns handlers, bean processors, interceptors etc for this test.
1: 	        Bundle bundlea = getBundle("org.apache.aries.blueprint.testbundlea");
1: 	        assertNotNull(bundlea);
1: 	        bundlea.start();
1: 	        
1: 	        //quiesce bundle will sleep for a second so will quiesce after that
1: 		    Bundle bundleq = getBundle("org.apache.aries.blueprint.testquiescebundle");
1: 		    
1: 		    System.out.println("Got the bundle");
1: 		    
1: 		    List<Bundle> bundles = new ArrayList<Bundle>();
1: 		    bundles.add(bundlea);
1: 		    bundles.add(bundleq);
1: 		    
1: 		    Thread t = new Thread(new TestBeanClient((TestBean)obj, 1500));
1: 		    t.start();
1: 	        
1: 			participant.quiesce(callback, bundles);
1: 			
1: 		    System.out.println("Called Quiesce");
1: 		    
1: 		    Thread.sleep(500);
1: 		    
1: 		    Assert.assertTrue("Quiesce callback should have occurred once for bundle a but not for bundle q; calls should be 1, but it is "+callback.getCalls(), callback.getCalls()==1);
1: 		    
1: 		    Thread.sleep(1500);
1: 		    
1: 		    System.out.println("After second sleep");
1: 		    
1: 		    Assert.assertTrue("Quiesce callback should have occurred twice, once for bundle a and q respectively; calls should be 2, but it is "+callback.getCalls(), callback.getCalls()==2);
1: 		    
1: 		}else{
1: 			throw new Exception("No Quiesce Participant found for the blueprint service");
1: 		}
1: 	}else{
1: 		throw new Exception("No Service returned for " + TestBean.class);
1: 	}
1:   }
1:   
1:   @Test
1:   public void testMultiRequestQuiesce() throws Exception {
1:    
1:    //This test covers the case where we have two active requests when 
1:    //the bundle is being quiesced.
1: 	  
1:    System.out.println("In testMultiRequestQuiesce");
0: 	Object obj = getOsgiService(TestBean.class);
1: 	
1: 	if (obj != null)
1: 	{    
0: 		QuiesceParticipant participant = getParticipant("org.apache.aries.blueprint");
1: 		
1: 		if (participant != null)
1: 		{
1: 			TestQuiesceCallback callback = new TestQuiesceCallback();
1: 			TestBeanClient client =  new TestBeanClient((TestBean)obj, 1500);
1: 		    
1: 
1: 	        //quiesce bundle will sleep for a second so will quiesce after that
1: 		    Bundle bundle = getBundle("org.apache.aries.blueprint.testquiescebundle");
1: 		    
1: 		    System.out.println("Got the bundle");
1: 		    
1: 		    List<Bundle> bundles = new ArrayList<Bundle>();
1: 		    bundles.add(bundle);
1: 		    
1: 		    Thread t = new Thread(client);
1: 		    t.start();
1: 	        
1: 			participant.quiesce(callback, bundles);
1: 			
1: 		    System.out.println("Called Quiesce, putting in a new request");
1: 		    
1: 		    Thread t2 = new Thread(client);
1: 		    t2.start();
1: 		    
1: 		    Thread.sleep(5000);
1: 		    
1: 		    Assert.assertTrue("Quiesce callback should have occurred once; calls should be 1, but it is "+callback.getCalls(), callback.getCalls()==1);
1: 		    
1:    
1: 		}else{
1: 			throw new Exception("No Quiesce Participant found for the blueprint service");
1: 		}
1: 	}else{
1: 		throw new Exception("No Service returned for " + TestBean.class);
1: 	}
1:   }
1:   
1:   
1:   private class TestBeanClient implements Runnable
1:   {
0:     private TestBean myService;
0:     private int time;
1:     
1:     public TestBeanClient(TestBean myService, int time)
1:     {
1:       this.myService = myService;
1:       this.time = time;
1:     }
1: 	  
1: 	public void run() 
1: 	{
1: 	  try
1: 	  {
1: 		System.out.println("In Test Bean Client - Sleeping zzzzzzz");
1: 		myService.sleep(time);
1: 		System.out.println("Woken up");
1: 	  }
1: 	  catch (InterruptedException ie)
1: 	  {
1: 		  ie.printStackTrace();
1: 	  }
1: 	}
1: 	  
1:   }
1: }
============================================================================