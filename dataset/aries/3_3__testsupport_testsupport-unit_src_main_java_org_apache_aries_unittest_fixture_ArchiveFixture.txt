1:da5ef0c: /**
1:da5ef0c:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:da5ef0c:  *  contributor license agreements.  See the NOTICE file distributed with
1:da5ef0c:  *  this work for additional information regarding copyright ownership.
1:da5ef0c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:da5ef0c:  *  (the "License"); you may not use this file except in compliance with
1:da5ef0c:  *  the License.  You may obtain a copy of the License at
1:da5ef0c:  *
1:da5ef0c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:da5ef0c:  *
1:da5ef0c:  *  Unless required by applicable law or agreed to in writing, software
1:da5ef0c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:da5ef0c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da5ef0c:  *  See the License for the specific language governing permissions and
1:da5ef0c:  *  limitations under the License.
1:da5ef0c:  */
1:da5ef0c: package org.apache.aries.unittest.fixture;
3:da5ef0c: 
1:da5ef0c: import java.io.ByteArrayInputStream;
1:da5ef0c: import java.io.ByteArrayOutputStream;
1:da5ef0c: import java.io.IOException;
1:da5ef0c: import java.io.InputStream;
1:da5ef0c: import java.io.OutputStream;
1:da5ef0c: import java.util.ArrayList;
1:da5ef0c: import java.util.HashSet;
1:da5ef0c: import java.util.List;
1:da5ef0c: import java.util.Set;
1:da5ef0c: import java.util.jar.Attributes;
1:da5ef0c: import java.util.jar.JarOutputStream;
1:da5ef0c: import java.util.jar.Manifest;
1:da5ef0c: import java.util.zip.ZipEntry;
1:da5ef0c: import java.util.zip.ZipOutputStream;
1:da5ef0c: 
1:da5ef0c: import org.osgi.framework.Constants;
1:da5ef0c: 
1:da5ef0c: /**
1:da5ef0c:  * Utility class for creating archive-based fixtures such as EBA archives, jar files etc.
1:da5ef0c:  * This class provides a flow based api for defining such fixtures. For example, a simple EBA archive could 
1:da5ef0c:  * be defined as such:
1:da5ef0c:  * 
1:da5ef0c:  * <code>
1:da5ef0c:  * ArchiveFixtures.ZipFixture zip = ArchiveFixtures.newZip()
1:da5ef0c:  *   .jar("test.jar")
1:da5ef0c:  *     .manifest()
1:da5ef0c:  *       .symbolicName("com.ibm.test")
1:da5ef0c:  *       .version("2.0.0")
1:da5ef0c:  *     .end()
1:da5ef0c:  *     .file("random.txt", "Some text")
1:da5ef0c:  *   .end();
1:da5ef0c:  * </code>
1:da5ef0c:  * 
1:da5ef0c:  * This defines a zip archive containing a single jar file (hence no application manifest). The jar file itself has
1:da5ef0c:  * a manifest and a text file.
1:da5ef0c:  * 
1:da5ef0c:  * To actually create the physical archive use the <code>writeOut</code> method on the archive fixture.
1:da5ef0c:  */
1:da5ef0c: public class ArchiveFixture
1:da5ef0c: {
1:da5ef0c:   /**
1:da5ef0c:    * Create a new zip file fixture
1:da5ef0c:    * @return
1:da5ef0c:    */
1:da5ef0c:   public static ZipFixture newZip() {
1:da5ef0c:     return new ZipFixture(null);
2:da5ef0c:   }
1:da5ef0c:   
1:da5ef0c:   /**
1:da5ef0c:    * Create a new jar file fixture
1:da5ef0c:    * @return
1:da5ef0c:    */
1:da5ef0c:   public static JarFixture newJar() {
1:da5ef0c:     return new JarFixture(null);
1:da5ef0c:   }
1:da5ef0c:   
1:da5ef0c:   /**
1:da5ef0c:    * Utility to copy an InputStream into an OutputStream. Closes the InputStream afterwards.
1:da5ef0c:    * @param in
1:da5ef0c:    * @param out
1:da5ef0c:    * @throws IOException
1:da5ef0c:    */
1:da5ef0c:   private static void copy(InputStream in, OutputStream out) throws IOException
1:da5ef0c:   {
2:da5ef0c:     try {
1:da5ef0c:       int len;
1:da5ef0c:       byte[] b = new byte[1024];
1:da5ef0c:       while ((len = in.read(b)) != -1)
1:da5ef0c:         out.write(b,0,len);
1:da5ef0c:     }
1:da5ef0c:     finally {
1:da5ef0c:       in.close();
1:da5ef0c:     }
1:da5ef0c:   }
1:da5ef0c: 
1:da5ef0c:   /**
1:da5ef0c:    * Base interface for every fixture.
1:da5ef0c:    */
1:da5ef0c:   public interface Fixture {
1:da5ef0c:     /**
1:da5ef0c:      * Write the physical representation of the fixture to the given OutputStream
1:da5ef0c:      * @param out
1:da5ef0c:      * @throws IOException
1:da5ef0c:      */
1:da5ef0c:     void writeOut(OutputStream out) throws IOException;
1:da5ef0c:   }
1:da5ef0c:   
1:da5ef0c:   /**
1:da5ef0c:    * Abstract base class for fixtures. Archive fixtures are by nature hierarchical.
1:da5ef0c:    */
1:da5ef0c:   public static abstract class AbstractFixture implements Fixture {
1:da5ef0c:     private ZipFixture parent;
1:da5ef0c:     
1:da5ef0c:     protected AbstractFixture(ZipFixture parent) {
1:da5ef0c:       this.parent = parent;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Ends the current flow target and returns the parent flow target. For example, in the
1:da5ef0c:      * following code snippet the <code>end</code> after <code>.version("2.0.0")</code> marks
1:da5ef0c:      * the end of the manifest. Commands after that relate to the parent jar file of the manifest.
1:da5ef0c:      * 
1:da5ef0c:      * <code>
1:da5ef0c:      * ArchiveFixtures.ZipFixture zip = ArchiveFixtures.newZip()
1:da5ef0c:      *   .jar("test.jar")
1:da5ef0c:      *     .manifest()
1:da5ef0c:      *       .symbolicName("com.ibm.test")
1:da5ef0c:      *       .version("2.0.0")
1:da5ef0c:      *     .end()
1:da5ef0c:      *     .file("random.txt", "Some text")
1:da5ef0c:      *   .end();
1:da5ef0c:      * </code>
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ZipFixture end() {
1:11a125a:       return (parent == null) ? (ZipFixture) this : parent;
1:da5ef0c:     }
1:da5ef0c:   }
1:da5ef0c: 
1:da5ef0c:   /**
1:da5ef0c:    * Simple fixture for text files.
1:da5ef0c:    */
1:da5ef0c:   public static class FileFixture extends AbstractFixture {
1:da5ef0c:     private StringBuffer text = new StringBuffer();
1:da5ef0c:     
1:da5ef0c:     protected FileFixture(ZipFixture parent) {
1:da5ef0c:       super(parent);
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Add a line to the file fixture. The EOL character is added automatically.
1:da5ef0c:      * @param line
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public FileFixture line(String line) {
1:da5ef0c:       text.append(line);
1:da5ef0c:       text.append("\n");
1:da5ef0c:       return this;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     public void writeOut(OutputStream out) throws IOException {
1:da5ef0c:       out.write(text.toString().getBytes());
1:da5ef0c:     }
1:da5ef0c:   }
1:da5ef0c:   
1:da5ef0c:   public static class IStreamFixture extends AbstractFixture {
1:da5ef0c:     private byte[] bytes;
1:da5ef0c:     
1:da5ef0c:     protected IStreamFixture(ZipFixture parent, InputStream input) throws IOException {
1:da5ef0c:       super(parent);
1:da5ef0c: 
1:da5ef0c:       ByteArrayOutputStream output = new ByteArrayOutputStream();
1:da5ef0c:       try {
1:da5ef0c:         copy(input, output);
2:da5ef0c:       } finally {
1:da5ef0c:         output.close();
1:da5ef0c:       }
1:da5ef0c:       
1:da5ef0c:       bytes = output.toByteArray();
1:da5ef0c:     }
1:da5ef0c: 
1:da5ef0c:     public void writeOut(OutputStream out) throws IOException {
1:da5ef0c:       copy(new ByteArrayInputStream(bytes), out);
1:da5ef0c:     }
1:da5ef0c:   }
1:da5ef0c:   
1:da5ef0c:   /**
1:da5ef0c:    * Fixture for (bundle) manifests. By default, they contain the lines
1:da5ef0c:    * 
1:da5ef0c:    * <code>
1:da5ef0c:    * Manifest-Version: 1
1:da5ef0c:    * Bundle-ManifestVersion: 2
1:da5ef0c:    * </code>
1:da5ef0c:    */
1:da5ef0c:   public static class ManifestFixture extends AbstractFixture {
1:da5ef0c:     private Manifest mf;
1:da5ef0c:     
1:da5ef0c:     protected Manifest getManifest()
1:da5ef0c:     {
1:da5ef0c:       return mf;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     protected ManifestFixture(ZipFixture parent) {
1:da5ef0c:       super(parent);
1:da5ef0c:       mf = new Manifest();
1:da5ef0c:       mf.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1");
1:da5ef0c:       mf.getMainAttributes().putValue(Constants.BUNDLE_MANIFESTVERSION, "2");
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Set the symbolic name of the bundle
1:da5ef0c:      * @param name
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ManifestFixture symbolicName(String name)
1:da5ef0c:     {
1:da5ef0c:       mf.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, name);
1:da5ef0c:       return this;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Set the version of the bundle
1:da5ef0c:      * @param version
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ManifestFixture version(String version)
1:da5ef0c:     {
1:da5ef0c:       mf.getMainAttributes().putValue(Constants.BUNDLE_VERSION, version);
1:da5ef0c:       return this;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Add a custom attribute to the manifest. Use the more specific methods for symbolic name and version.
1:da5ef0c:      * @param name
1:da5ef0c:      * @param value
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ManifestFixture attribute(String name, String value)
1:da5ef0c:     {
1:da5ef0c:       mf.getMainAttributes().putValue(name, value);
1:da5ef0c:       return this;
1:da5ef0c:     }
1:da5ef0c:     
2:da5ef0c:     public void writeOut(OutputStream out) throws IOException
1:da5ef0c:     {
1:da5ef0c:       mf.write(out);
1:da5ef0c:     }
1:da5ef0c:   }
1:da5ef0c: 
1:da5ef0c:   /**
1:da5ef0c:    * Fixture for a jar archive. It offers the same functionality as zip fixtures.
1:da5ef0c:    * The main difference is that in a jar archive the manifest will be output as the first file,
1:da5ef0c:    * regardless of when it is added.
1:da5ef0c:    */
1:da5ef0c:   public static class JarFixture extends ZipFixture {
1:da5ef0c:     private ManifestFixture mfFixture;
1:da5ef0c:     
1:da5ef0c:     protected JarFixture(ZipFixture parent) {
1:da5ef0c:       super(parent);
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     @Override
1:da5ef0c:     public ManifestFixture manifest()
1:da5ef0c:     {
1:da5ef0c:       if (mfFixture != null)
1:da5ef0c:         throw new IllegalStateException("Only one manifest allowed, you dummy ;)");
1:da5ef0c:       
1:da5ef0c:       mfFixture = new ManifestFixture(this);
1:da5ef0c:       return mfFixture;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     @Override
1:c23b679:     public InputStream getInputStream() throws IOException
1:da5ef0c:     {
2:da5ef0c:       if (bytes == null) {
2:da5ef0c:         ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:da5ef0c:         JarOutputStream jout;
1:da5ef0c:         if (mfFixture != null)
1:da5ef0c:           jout = new JarOutputStream(bout, mfFixture.getManifest());
1:da5ef0c:         else
1:da5ef0c:           jout = new JarOutputStream(bout);
1:da5ef0c:         
1:da5ef0c:         try {
1:da5ef0c:           writeAllEntries(jout);
1:da5ef0c:         } finally {
1:da5ef0c:           jout.close();
1:da5ef0c:         }
1:da5ef0c:         
2:da5ef0c:         bytes = bout.toByteArray();
1:da5ef0c:       }
1:da5ef0c:       
1:c23b679:       return new ByteArrayInputStream(bytes);
1:da5ef0c:     }
1:da5ef0c:   }
1:da5ef0c:   
1:da5ef0c:   /**
1:da5ef0c:    * Base fixture for any kind of zip archive. Zip archives can contain any number of child archives 
1:da5ef0c:    * given by an archive type and a path. The order in which these child archives are added is important
1:da5ef0c:    * because it will be the order in which they are added to the zip.
1:da5ef0c:    */
1:da5ef0c:   public static class ZipFixture extends AbstractFixture {
1:da5ef0c:     protected static class ChildFixture {
1:da5ef0c:       public String path;
1:da5ef0c:       public Fixture fixture;
1:da5ef0c:       
1:da5ef0c:       public ChildFixture(String path, Fixture fixture)
1:da5ef0c:       {
1:da5ef0c:         this.path = path;
1:da5ef0c:         this.fixture = fixture;
1:da5ef0c:       }
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     protected List<ChildFixture> children = new ArrayList<ChildFixture>();
1:da5ef0c:     protected byte[] bytes = null;
1:da5ef0c:     
1:da5ef0c:     protected ZipFixture(ZipFixture parent) {
1:da5ef0c:       super(parent);
1:da5ef0c:     }
1:da5ef0c:         
1:da5ef0c:     /**
1:da5ef0c:      * Create a child zip fixture at the given target.
1:da5ef0c:      * @param path
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ZipFixture zip(String path) {
1:da5ef0c:       ZipFixture res = new ZipFixture(this);
1:da5ef0c:       children.add(new ChildFixture(path, res));
1:da5ef0c:       
1:da5ef0c:       return res;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Create a child jar fixture at the given path.
1:da5ef0c:      * @param path
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ZipFixture jar(String path) {
1:da5ef0c:       JarFixture res = new JarFixture(this);
1:da5ef0c:       children.add(new ChildFixture(path, res));
1:da5ef0c:       
1:da5ef0c:       return res;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Create a complete child file fixture at the given path and with the content.
1:da5ef0c:      * Note: this will return the current zip fixture and not the file fixture.
1:da5ef0c:      * 
1:da5ef0c:      * @param path
1:da5ef0c:      * @param content
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ZipFixture file(String path, String content) 
1:da5ef0c:     {
1:da5ef0c:       return file(path).line(content).end();
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Create an empty file fixture at the given path.
1:da5ef0c:      * 
1:da5ef0c:      * @param path
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public FileFixture file(String path)
1:da5ef0c:     {
1:da5ef0c:       FileFixture res = new FileFixture(this);
1:da5ef0c:       children.add(new ChildFixture(path, res));
1:da5ef0c:       
1:da5ef0c:       return res;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Create a binary file with the content from the input stream
1:da5ef0c:      * @param path
1:da5ef0c:      * @param input
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ZipFixture binary(String path, InputStream input) throws IOException {
1:53ad9ea:       
1:53ad9ea:       if (input == null) throw new IllegalArgumentException("Provided input stream cannot be null");
1:53ad9ea:       
1:da5ef0c:       IStreamFixture child = new IStreamFixture(this, input);
1:da5ef0c:       children.add(new ChildFixture(path, child));
1:da5ef0c:       
1:da5ef0c:       return this;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Create a binary file that is populated from content on the classloader
1:da5ef0c:      * @param path
1:da5ef0c:      * @param resourcePath Path that the resource can be found in the current classloader
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ZipFixture binary(String path, String resourcePath) throws IOException {
1:da5ef0c:       return binary(path, getClass().getClassLoader().getResourceAsStream(resourcePath));
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Create a manifest fixture at the given path.
1:da5ef0c:      * @return
1:da5ef0c:      */
1:da5ef0c:     public ManifestFixture manifest()
1:da5ef0c:     {
1:da5ef0c:       ManifestFixture res = new ManifestFixture(this);
1:da5ef0c:       children.add(new ChildFixture("META-INF/MANIFEST.MF", res));
1:da5ef0c:       
1:da5ef0c:       return res;
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Ensure that the necessary directory entries for the entry are available
1:da5ef0c:      * in the zip file. Newly created entries are added to the set of directories.
1:da5ef0c:      * 
1:da5ef0c:      * @param zout
1:da5ef0c:      * @param entry
1:da5ef0c:      * @param existingDirs
1:da5ef0c:      * @throws IOException
1:da5ef0c:      */
1:da5ef0c:     private void mkDirs(ZipOutputStream zout, String entry, Set<String> existingDirs) throws IOException
1:da5ef0c:     {
1:da5ef0c:       String[] parts = entry.split("/");
1:da5ef0c:       String dirName = "";
1:da5ef0c:       for (int i=0;i<parts.length-1;i++) {
1:da5ef0c:         dirName += parts[i] + "/";
1:da5ef0c:         if (!!!existingDirs.contains(dirName)) {
1:da5ef0c:           ZipEntry ze = new ZipEntry(dirName);
1:da5ef0c:           zout.putNextEntry(ze);
1:da5ef0c:           zout.closeEntry();
1:da5ef0c:           
1:da5ef0c:           existingDirs.add(dirName);
1:da5ef0c:         }
1:da5ef0c:       }
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     /**
1:da5ef0c:      * Add all entries to the ZipOutputStream
1:da5ef0c:      * @param zout
1:da5ef0c:      * @throws IOException
1:da5ef0c:      */
1:da5ef0c:     protected void writeAllEntries(ZipOutputStream zout) throws IOException
1:da5ef0c:     {
1:da5ef0c:       Set<String> dirs = new HashSet<String>();
1:da5ef0c:       
1:da5ef0c:       for (ChildFixture child : children) {
1:da5ef0c:         mkDirs(zout, child.path, dirs);
1:da5ef0c:         
1:da5ef0c:         ZipEntry ze = new ZipEntry(child.path);
1:da5ef0c:         zout.putNextEntry(ze);
1:da5ef0c:         child.fixture.writeOut(zout);
1:da5ef0c:         zout.closeEntry();
1:da5ef0c:       }      
1:da5ef0c:     }
1:da5ef0c:     
1:da5ef0c:     public void writeOut(OutputStream out) throws IOException 
1:da5ef0c:     {
1:c23b679:       copy(getInputStream(), out);
1:c23b679:     }
1:c23b679:     
1:c23b679:     public InputStream getInputStream() throws IOException
1:c23b679:     {
1:da5ef0c:       /*
1:da5ef0c:        * For better reuse this method delegate the writing to writeAllEntries, which
1:da5ef0c:        * can be reused by the JarFixture.
1:da5ef0c:        */
1:11a125a:       ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:11a125a:       ZipOutputStream zout = new ZipOutputStream(bout);
1:11a125a:       try {
1:11a125a:         writeAllEntries(zout);
1:11a125a:       } finally {
1:11a125a:         zout.close();
1:da5ef0c:       }
1:11a125a:       
1:11a125a:       bytes = bout.toByteArray();
1:da5ef0c: 
1:c23b679:       return new ByteArrayInputStream(bytes);
1:da5ef0c:     }
1:da5ef0c:   }
1:da5ef0c: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:c23b679
/////////////////////////////////////////////////////////////////////////
1:     public InputStream getInputStream() throws IOException
/////////////////////////////////////////////////////////////////////////
1:       return new ByteArrayInputStream(bytes);
/////////////////////////////////////////////////////////////////////////
1:       copy(getInputStream(), out);
1:     }
1:     
1:     public InputStream getInputStream() throws IOException
1:     {
/////////////////////////////////////////////////////////////////////////
1:       return new ByteArrayInputStream(bytes);
commit:53ad9ea
/////////////////////////////////////////////////////////////////////////
1:       
1:       if (input == null) throw new IllegalArgumentException("Provided input stream cannot be null");
1:       
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:11a125a
/////////////////////////////////////////////////////////////////////////
1:       return (parent == null) ? (ZipFixture) this : parent;
/////////////////////////////////////////////////////////////////////////
1:       ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:       ZipOutputStream zout = new ZipOutputStream(bout);
1:       try {
1:         writeAllEntries(zout);
1:       } finally {
1:         zout.close();
1:       
1:       bytes = bout.toByteArray();
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:da5ef0c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.unittest.fixture;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
1: import org.osgi.framework.Constants;
1: 
1: /**
1:  * Utility class for creating archive-based fixtures such as EBA archives, jar files etc.
1:  * This class provides a flow based api for defining such fixtures. For example, a simple EBA archive could 
1:  * be defined as such:
1:  * 
1:  * <code>
1:  * ArchiveFixtures.ZipFixture zip = ArchiveFixtures.newZip()
1:  *   .jar("test.jar")
1:  *     .manifest()
1:  *       .symbolicName("com.ibm.test")
1:  *       .version("2.0.0")
1:  *     .end()
1:  *     .file("random.txt", "Some text")
1:  *   .end();
1:  * </code>
1:  * 
1:  * This defines a zip archive containing a single jar file (hence no application manifest). The jar file itself has
1:  * a manifest and a text file.
1:  * 
1:  * To actually create the physical archive use the <code>writeOut</code> method on the archive fixture.
1:  */
1: public class ArchiveFixture
1: {
1:   /**
1:    * Create a new zip file fixture
1:    * @return
1:    */
1:   public static ZipFixture newZip() {
1:     return new ZipFixture(null);
1:   }
1:   
1:   /**
1:    * Create a new jar file fixture
1:    * @return
1:    */
1:   public static JarFixture newJar() {
1:     return new JarFixture(null);
1:   }
1:   
1:   /**
1:    * Utility to copy an InputStream into an OutputStream. Closes the InputStream afterwards.
1:    * @param in
1:    * @param out
1:    * @throws IOException
1:    */
1:   private static void copy(InputStream in, OutputStream out) throws IOException
1:   {
1:     try {
1:       int len;
1:       byte[] b = new byte[1024];
1:       while ((len = in.read(b)) != -1)
1:         out.write(b,0,len);
1:     }
1:     finally {
1:       in.close();
1:     }
1:   }
1: 
1:   /**
1:    * Base interface for every fixture.
1:    */
1:   public interface Fixture {
1:     /**
1:      * Write the physical representation of the fixture to the given OutputStream
1:      * @param out
1:      * @throws IOException
1:      */
1:     void writeOut(OutputStream out) throws IOException;
1:   }
1:   
1:   /**
1:    * Abstract base class for fixtures. Archive fixtures are by nature hierarchical.
1:    */
1:   public static abstract class AbstractFixture implements Fixture {
1:     private ZipFixture parent;
1:     
1:     protected AbstractFixture(ZipFixture parent) {
1:       this.parent = parent;
1:     }
1:     
1:     /**
1:      * Ends the current flow target and returns the parent flow target. For example, in the
1:      * following code snippet the <code>end</code> after <code>.version("2.0.0")</code> marks
1:      * the end of the manifest. Commands after that relate to the parent jar file of the manifest.
1:      * 
1:      * <code>
1:      * ArchiveFixtures.ZipFixture zip = ArchiveFixtures.newZip()
1:      *   .jar("test.jar")
1:      *     .manifest()
1:      *       .symbolicName("com.ibm.test")
1:      *       .version("2.0.0")
1:      *     .end()
1:      *     .file("random.txt", "Some text")
1:      *   .end();
1:      * </code>
1:      * @return
1:      */
1:     public ZipFixture end() {
0:       return parent;
1:     }
1:   }
1: 
1:   /**
1:    * Simple fixture for text files.
1:    */
1:   public static class FileFixture extends AbstractFixture {
1:     private StringBuffer text = new StringBuffer();
1:     
1:     protected FileFixture(ZipFixture parent) {
1:       super(parent);
1:     }
1:     
1:     /**
1:      * Add a line to the file fixture. The EOL character is added automatically.
1:      * @param line
1:      * @return
1:      */
1:     public FileFixture line(String line) {
1:       text.append(line);
1:       text.append("\n");
1:       return this;
1:     }
1:     
1:     public void writeOut(OutputStream out) throws IOException {
1:       out.write(text.toString().getBytes());
1:     }
1:   }
1:   
1:   public static class IStreamFixture extends AbstractFixture {
1:     private byte[] bytes;
1:     
1:     protected IStreamFixture(ZipFixture parent, InputStream input) throws IOException {
1:       super(parent);
1: 
1:       ByteArrayOutputStream output = new ByteArrayOutputStream();
1:       try {
1:         copy(input, output);
1:       } finally {
1:         output.close();
1:       }
1:       
1:       bytes = output.toByteArray();
1:     }
1: 
1:     public void writeOut(OutputStream out) throws IOException {
1:       copy(new ByteArrayInputStream(bytes), out);
1:     }
1:   }
1:   
1:   /**
1:    * Fixture for (bundle) manifests. By default, they contain the lines
1:    * 
1:    * <code>
1:    * Manifest-Version: 1
1:    * Bundle-ManifestVersion: 2
1:    * </code>
1:    */
1:   public static class ManifestFixture extends AbstractFixture {
1:     private Manifest mf;
1:     
1:     protected Manifest getManifest()
1:     {
1:       return mf;
1:     }
1:     
1:     protected ManifestFixture(ZipFixture parent) {
1:       super(parent);
1:       mf = new Manifest();
1:       mf.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1");
1:       mf.getMainAttributes().putValue(Constants.BUNDLE_MANIFESTVERSION, "2");
1:     }
1:     
1:     /**
1:      * Set the symbolic name of the bundle
1:      * @param name
1:      * @return
1:      */
1:     public ManifestFixture symbolicName(String name)
1:     {
1:       mf.getMainAttributes().putValue(Constants.BUNDLE_SYMBOLICNAME, name);
1:       return this;
1:     }
1:     
1:     /**
1:      * Set the version of the bundle
1:      * @param version
1:      * @return
1:      */
1:     public ManifestFixture version(String version)
1:     {
1:       mf.getMainAttributes().putValue(Constants.BUNDLE_VERSION, version);
1:       return this;
1:     }
1:     
1:     /**
1:      * Add a custom attribute to the manifest. Use the more specific methods for symbolic name and version.
1:      * @param name
1:      * @param value
1:      * @return
1:      */
1:     public ManifestFixture attribute(String name, String value)
1:     {
1:       mf.getMainAttributes().putValue(name, value);
1:       return this;
1:     }
1:     
1:     public void writeOut(OutputStream out) throws IOException
1:     {
1:       mf.write(out);
1:     }
1:   }
1: 
1:   /**
1:    * Fixture for a jar archive. It offers the same functionality as zip fixtures.
1:    * The main difference is that in a jar archive the manifest will be output as the first file,
1:    * regardless of when it is added.
1:    */
1:   public static class JarFixture extends ZipFixture {
1:     private ManifestFixture mfFixture;
1:     
1:     protected JarFixture(ZipFixture parent) {
1:       super(parent);
1:     }
1:     
1:     @Override
1:     public ManifestFixture manifest()
1:     {
1:       if (mfFixture != null)
1:         throw new IllegalStateException("Only one manifest allowed, you dummy ;)");
1:       
1:       mfFixture = new ManifestFixture(this);
1:       return mfFixture;
1:     }
1:     
1:     @Override
1:     public void writeOut(OutputStream out) throws IOException
1:     {
1:       if (bytes == null) {
1:         ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:         JarOutputStream jout;
1:         if (mfFixture != null)
1:           jout = new JarOutputStream(bout, mfFixture.getManifest());
1:         else
1:           jout = new JarOutputStream(bout);
1:         
1:         try {
1:           writeAllEntries(jout);
1:         } finally {
1:           jout.close();
1:         }
1:         
1:         bytes = bout.toByteArray();
1:       }
1:       
0:       ByteArrayInputStream bin = new ByteArrayInputStream(bytes);
0:       copy(bin, out);
1:     }
1:   }
1:   
1:   /**
1:    * Base fixture for any kind of zip archive. Zip archives can contain any number of child archives 
1:    * given by an archive type and a path. The order in which these child archives are added is important
1:    * because it will be the order in which they are added to the zip.
1:    */
1:   public static class ZipFixture extends AbstractFixture {
1:     protected static class ChildFixture {
1:       public String path;
1:       public Fixture fixture;
1:       
1:       public ChildFixture(String path, Fixture fixture)
1:       {
1:         this.path = path;
1:         this.fixture = fixture;
1:       }
1:     }
1:     
1:     protected List<ChildFixture> children = new ArrayList<ChildFixture>();
1:     protected byte[] bytes = null;
1:     
1:     protected ZipFixture(ZipFixture parent) {
1:       super(parent);
1:     }
1:         
1:     /**
1:      * Create a child zip fixture at the given target.
1:      * @param path
1:      * @return
1:      */
1:     public ZipFixture zip(String path) {
1:       ZipFixture res = new ZipFixture(this);
1:       children.add(new ChildFixture(path, res));
1:       
1:       return res;
1:     }
1:     
1:     /**
1:      * Create a child jar fixture at the given path.
1:      * @param path
1:      * @return
1:      */
1:     public ZipFixture jar(String path) {
1:       JarFixture res = new JarFixture(this);
1:       children.add(new ChildFixture(path, res));
1:       
1:       return res;
1:     }
1:     
1:     /**
1:      * Create a complete child file fixture at the given path and with the content.
1:      * Note: this will return the current zip fixture and not the file fixture.
1:      * 
1:      * @param path
1:      * @param content
1:      * @return
1:      */
1:     public ZipFixture file(String path, String content) 
1:     {
1:       return file(path).line(content).end();
1:     }
1:     
1:     /**
1:      * Create an empty file fixture at the given path.
1:      * 
1:      * @param path
1:      * @return
1:      */
1:     public FileFixture file(String path)
1:     {
1:       FileFixture res = new FileFixture(this);
1:       children.add(new ChildFixture(path, res));
1:       
1:       return res;
1:     }
1:     
1:     /**
1:      * Create a binary file with the content from the input stream
1:      * @param path
1:      * @param input
1:      * @return
1:      */
1:     public ZipFixture binary(String path, InputStream input) throws IOException {
1:       IStreamFixture child = new IStreamFixture(this, input);
1:       children.add(new ChildFixture(path, child));
1:       
1:       return this;
1:     }
1:     
1:     /**
1:      * Create a binary file that is populated from content on the classloader
1:      * @param path
1:      * @param resourcePath Path that the resource can be found in the current classloader
1:      * @return
1:      */
1:     public ZipFixture binary(String path, String resourcePath) throws IOException {
1:       return binary(path, getClass().getClassLoader().getResourceAsStream(resourcePath));
1:     }
1:     
1:     /**
1:      * Create a manifest fixture at the given path.
1:      * @return
1:      */
1:     public ManifestFixture manifest()
1:     {
1:       ManifestFixture res = new ManifestFixture(this);
1:       children.add(new ChildFixture("META-INF/MANIFEST.MF", res));
1:       
1:       return res;
1:     }
1:     
1:     /**
1:      * Ensure that the necessary directory entries for the entry are available
1:      * in the zip file. Newly created entries are added to the set of directories.
1:      * 
1:      * @param zout
1:      * @param entry
1:      * @param existingDirs
1:      * @throws IOException
1:      */
1:     private void mkDirs(ZipOutputStream zout, String entry, Set<String> existingDirs) throws IOException
1:     {
1:       String[] parts = entry.split("/");
1:       String dirName = "";
1:       for (int i=0;i<parts.length-1;i++) {
1:         dirName += parts[i] + "/";
1:         if (!!!existingDirs.contains(dirName)) {
1:           ZipEntry ze = new ZipEntry(dirName);
1:           zout.putNextEntry(ze);
1:           zout.closeEntry();
1:           
1:           existingDirs.add(dirName);
1:         }
1:       }
1:     }
1:     
1:     /**
1:      * Add all entries to the ZipOutputStream
1:      * @param zout
1:      * @throws IOException
1:      */
1:     protected void writeAllEntries(ZipOutputStream zout) throws IOException
1:     {
1:       Set<String> dirs = new HashSet<String>();
1:       
1:       for (ChildFixture child : children) {
1:         mkDirs(zout, child.path, dirs);
1:         
1:         ZipEntry ze = new ZipEntry(child.path);
1:         zout.putNextEntry(ze);
1:         child.fixture.writeOut(zout);
1:         zout.closeEntry();
1:       }      
1:     }
1:     
1:     public void writeOut(OutputStream out) throws IOException 
1:     {
1:       /*
1:        * For better reuse this method delegate the writing to writeAllEntries, which
1:        * can be reused by the JarFixture.
1:        */
1:       if (bytes == null) {
1:         ByteArrayOutputStream bout = new ByteArrayOutputStream();
0:         ZipOutputStream zout = new ZipOutputStream(bout);
1:         try {
0:           writeAllEntries(zout);
1:         } finally {
0:           zout.close();
1:         }
1:         
1:         bytes = bout.toByteArray();
1:       }
1: 
0:       ByteArrayInputStream bin = new ByteArrayInputStream(bytes);
0:       copy(bin, out);
1:     }
1:   }
1: 
1: }
============================================================================