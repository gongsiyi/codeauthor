1:4243a2b: /**
1:4243a2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4243a2b:  * contributor license agreements.  See the NOTICE file distributed with
1:4243a2b:  * this work for additional information regarding copyright ownership.
1:4243a2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4243a2b:  * (the "License"); you may not use this file except in compliance with
1:4243a2b:  * the License.  You may obtain a copy of the License at
1:4243a2b:  *
1:4243a2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4243a2b:  *
1:4243a2b:  * Unless required by applicable law or agreed to in writing, software
1:4243a2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4243a2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4243a2b:  * See the License for the specific language governing permissions and
1:4243a2b:  * limitations under the License.
1:4243a2b:  */
1:4243a2b: package org.apache.aries.transaction.jms.internal;
1:4243a2b: 
1:4243a2b: /**
1:4243a2b:  * A cache key for the session details
1:4243a2b:  *
1:4243a2b:  * 
1:4243a2b:  */
1:4243a2b: public class SessionKey {
1:4c2ef4a: 
1:4243a2b:     private boolean transacted;
1:4243a2b:     private int ackMode;
1:4c2ef4a: 
1:4243a2b:     private int hash;
1:4243a2b: 
1:4243a2b:     public SessionKey(boolean transacted, int ackMode) {
1:4243a2b:         this.transacted = transacted;
1:4243a2b:         this.ackMode = ackMode;
1:4243a2b:         hash = ackMode;
1:4243a2b:         if (transacted) {
1:4243a2b:             hash = 31 * hash + 1;
1:4243a2b:         }
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public int hashCode() {
1:4243a2b:         return hash;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public boolean equals(Object that) {
1:4243a2b:         if (this == that) {
1:4243a2b:             return true;
1:4243a2b:         }
1:4243a2b:         if (that instanceof SessionKey) {
1:4243a2b:             return equals((SessionKey) that);
1:4243a2b:         }
1:4243a2b:         return false;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public boolean equals(SessionKey that) {
1:4243a2b:         return this.transacted == that.transacted && this.ackMode == that.ackMode;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public boolean isTransacted() {
1:4243a2b:         return transacted;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public int getAckMode() {
1:4243a2b:         return ackMode;
1:4243a2b:     }
1:4243a2b: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4c2ef4a
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:4243a2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.transaction.jms.internal;
1: 
1: /**
1:  * A cache key for the session details
1:  *
1:  * 
1:  */
1: public class SessionKey {
1:     private boolean transacted;
1:     private int ackMode;
1:     private int hash;
1: 
1:     public SessionKey(boolean transacted, int ackMode) {
1:         this.transacted = transacted;
1:         this.ackMode = ackMode;
1:         hash = ackMode;
1:         if (transacted) {
1:             hash = 31 * hash + 1;
1:         }
1:     }
1: 
1:     public int hashCode() {
1:         return hash;
1:     }
1: 
1:     public boolean equals(Object that) {
1:         if (this == that) {
1:             return true;
1:         }
1:         if (that instanceof SessionKey) {
1:             return equals((SessionKey) that);
1:         }
1:         return false;
1:     }
1: 
1:     public boolean equals(SessionKey that) {
1:         return this.transacted == that.transacted && this.ackMode == that.ackMode;
1:     }
1: 
1:     public boolean isTransacted() {
1:         return transacted;
1:     }
1: 
1:     public int getAckMode() {
1:         return ackMode;
1:     }
1: }
============================================================================