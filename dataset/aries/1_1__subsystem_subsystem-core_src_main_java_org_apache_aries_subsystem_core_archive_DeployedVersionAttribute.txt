1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
3:1129914: 
1:1129914: import org.osgi.framework.Version;
1:4b41d3d: import org.osgi.framework.VersionRange;
1:777b216: import org.osgi.service.subsystem.SubsystemConstants;
1:1129914: 
1:1129914: public class DeployedVersionAttribute extends AbstractAttribute {
1:777b216: 	public static final String NAME = SubsystemConstants.DEPLOYED_VERSION_ATTRIBUTE;
1:1129914: 	
1:1129914: 	private final Version deployedVersion;
1:1129914: 	
1:1129914: 	public DeployedVersionAttribute(String value) {
1:1129914: 		super(NAME, value);
1:1129914: 		deployedVersion = Version.parseVersion(value);
4:1129914: 	}
1:4b41d3d: 	
1:4b41d3d: 	@Override
1:4b41d3d: 	public StringBuilder appendToFilter(StringBuilder builder) {
1:4b41d3d: 		VersionRange versionRange = new VersionRange(VersionRange.LEFT_CLOSED, getVersion(), getVersion(), VersionRange.RIGHT_CLOSED);
1:2ffcfb9: 		return builder.append(versionRange.toFilterString(VersionRangeAttribute.NAME_VERSION));
1:4b41d3d: 	}
1:1129914: 
1:1129914: 	public Version getDeployedVersion() {
1:1129914: 		return deployedVersion;
1:1129914: 	}
1:777b216: 	
1:777b216: 	public Version getVersion() {
1:777b216: 		return deployedVersion;
1:777b216: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: 		return builder.append(versionRange.toFilterString(VersionRangeAttribute.NAME_VERSION));
commit:4b41d3d
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.VersionRange;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	@Override
1: 	public StringBuilder appendToFilter(StringBuilder builder) {
1: 		VersionRange versionRange = new VersionRange(VersionRange.LEFT_CLOSED, getVersion(), getVersion(), VersionRange.RIGHT_CLOSED);
0: 		return builder.append(versionRange.toFilterString(VersionRangeAttribute.NAME));
1: 	}
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 	public static final String NAME = SubsystemConstants.DEPLOYED_VERSION_ATTRIBUTE;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	public Version getVersion() {
1: 		return deployedVersion;
1: 	}
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import org.osgi.framework.Version;
1: 
1: public class DeployedVersionAttribute extends AbstractAttribute {
0: 	public static final String NAME = "deployed-version";
1: 	
0: 	public static DeployedVersionAttribute newInstance(String value) {
0: 		if (value == null) {
0: 			return new DeployedVersionAttribute();
1: 		}
0: 		return new DeployedVersionAttribute();
1: 	}
1: 	
1: 	private final Version deployedVersion;
1: 	
0: 	public DeployedVersionAttribute() {
0: 		super(NAME, Version.emptyVersion.toString());
0: 		deployedVersion = Version.emptyVersion;
1: 	}
1: 	
1: 	public DeployedVersionAttribute(String value) {
1: 		super(NAME, value);
1: 		deployedVersion = Version.parseVersion(value);
1: 	}
1: 
1: 	public Version getDeployedVersion() {
1: 		return deployedVersion;
1: 	}
1: }
============================================================================