1:c0dfffa: /**
1:c0dfffa:  * Licensed to the Apache Software Foundation (ASF) under one
1:c0dfffa:  * or more contributor license agreements.  See the NOTICE file
1:c0dfffa:  * distributed with this work for additional information
1:c0dfffa:  * regarding copyright ownership.  The ASF licenses this file
1:c0dfffa:  * to you under the Apache License, Version 2.0 (the
1:c0dfffa:  * "License"); you may not use this file except in compliance
1:c0dfffa:  * with the License.  You may obtain a copy of the License at
1:c0dfffa:  *
1:c0dfffa:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c0dfffa:  *
1:c0dfffa:  * Unless required by applicable law or agreed to in writing,
1:c0dfffa:  * software distributed under the License is distributed on an
1:c0dfffa:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c0dfffa:  * KIND, either express or implied.  See the License for the
1:c0dfffa:  * specific language governing permissions and limitations
1:c0dfffa:  * under the License.
1:c0dfffa:  */
1:c0dfffa: package org.apache.aries.samples.osgijdbc.derby;
1:c0dfffa: 
1:c0dfffa: import java.sql.Driver;
1:c0dfffa: import java.sql.DriverManager;
1:c0dfffa: import java.sql.SQLException;
1:c0dfffa: import java.util.Properties;
1:c0dfffa: 
1:c0dfffa: import javax.sql.ConnectionPoolDataSource;
1:c0dfffa: import javax.sql.DataSource;
1:c0dfffa: import javax.sql.XADataSource;
1:c0dfffa: 
1:c0dfffa: import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource;
1:c0dfffa: import org.apache.derby.jdbc.EmbeddedDataSource;
1:c0dfffa: import org.apache.derby.jdbc.EmbeddedDriver;
1:c0dfffa: import org.apache.derby.jdbc.EmbeddedXADataSource;
1:c0dfffa: import org.osgi.framework.BundleActivator;
1:c0dfffa: import org.osgi.framework.BundleContext;
1:c0dfffa: import org.osgi.service.jdbc.DataSourceFactory;
1:c0dfffa: 
1:c0dfffa: public class DerbyActivator implements DataSourceFactory, BundleActivator {
1:c0dfffa: 
1:c0dfffa: 	public ConnectionPoolDataSource createConnectionPoolDataSource(	Properties props) {
1:c0dfffa: 		EmbeddedConnectionPoolDataSource embeddedCPDataSource = new EmbeddedConnectionPoolDataSource();
1:c0dfffa: 		embeddedCPDataSource.setDataSourceName(props.getProperty(JDBC_DATASOURCE_NAME));
1:c0dfffa: 		embeddedCPDataSource.setDatabaseName(props.getProperty(JDBC_DATABASE_NAME));
1:c0dfffa: 		embeddedCPDataSource.setUser(props.getProperty(JDBC_USER));
1:c0dfffa: 		embeddedCPDataSource.setPassword(props.getProperty(JDBC_PASSWORD));
1:c0dfffa: 		return embeddedCPDataSource;
1:c0dfffa: 	}
1:c0dfffa: 
1:c0dfffa: 	public DataSource createDataSource(Properties props) {
1:c0dfffa: 		EmbeddedDataSource embeddedDataSource = new EmbeddedDataSource();
1:c0dfffa: 		embeddedDataSource.setDataSourceName(props.getProperty(JDBC_DATASOURCE_NAME));
1:c0dfffa: 		embeddedDataSource.setDatabaseName(props.getProperty(JDBC_DATABASE_NAME));
1:c0dfffa: 		embeddedDataSource.setUser(props.getProperty(JDBC_USER));
1:c0dfffa: 		embeddedDataSource.setPassword(props.getProperty(JDBC_PASSWORD));
1:c0dfffa: 		return embeddedDataSource;
1:c0dfffa: 	}
1:c0dfffa: 
1:c0dfffa: 	public XADataSource createXADataSource(Properties props) {
1:c0dfffa: 		EmbeddedXADataSource embeddedXADataSource = new EmbeddedXADataSource();
1:c0dfffa: 		embeddedXADataSource.setDataSourceName(props.getProperty(JDBC_DATASOURCE_NAME));
1:c0dfffa: 		embeddedXADataSource.setDatabaseName(props.getProperty(JDBC_DATABASE_NAME));
1:c0dfffa: 		embeddedXADataSource.setUser(props.getProperty(JDBC_USER));
1:c0dfffa: 		embeddedXADataSource.setPassword(props.getProperty(JDBC_PASSWORD));
1:c0dfffa: 		return embeddedXADataSource;
1:c0dfffa: 	}
1:c0dfffa: 
1:c0dfffa: 	public Driver getDriver(Properties props) {
1:c0dfffa: 		EmbeddedDriver embeddedDriver = new EmbeddedDriver();
1:c0dfffa: 		return embeddedDriver;
1:c0dfffa: 	}
1:c0dfffa: 
1:c0dfffa: 	public void start(BundleContext context) throws Exception {
1:c0dfffa: 		new EmbeddedDriver();	
1:c0dfffa: 		context.registerService(DataSourceFactory.class.getName(), this, new Properties());
1:c0dfffa: 	}
1:c0dfffa: 
1:c0dfffa: 	public void stop(BundleContext context) throws Exception {
1:c0dfffa: 
1:c0dfffa: 		try {
1:c0dfffa: 			DriverManager.getConnection("jdbc:derby:;shutdown=true");
1:c0dfffa: 		} catch (SQLException sqlexception) {
1:c0dfffa: 		}
1:c0dfffa: 	}
1:c0dfffa: 
1:c0dfffa: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
commit:fb2a45a
author:Violeta Georgieva Georgieva
-------------------------------------------------------------------------------
commit:c0dfffa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.osgijdbc.derby;
1: 
1: import java.sql.Driver;
1: import java.sql.DriverManager;
1: import java.sql.SQLException;
1: import java.util.Properties;
1: 
1: import javax.sql.ConnectionPoolDataSource;
1: import javax.sql.DataSource;
1: import javax.sql.XADataSource;
1: 
1: import org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.apache.derby.jdbc.EmbeddedDriver;
1: import org.apache.derby.jdbc.EmbeddedXADataSource;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: 
1: public class DerbyActivator implements DataSourceFactory, BundleActivator {
1: 
1: 	public ConnectionPoolDataSource createConnectionPoolDataSource(	Properties props) {
1: 		EmbeddedConnectionPoolDataSource embeddedCPDataSource = new EmbeddedConnectionPoolDataSource();
1: 		embeddedCPDataSource.setDataSourceName(props.getProperty(JDBC_DATASOURCE_NAME));
1: 		embeddedCPDataSource.setDatabaseName(props.getProperty(JDBC_DATABASE_NAME));
1: 		embeddedCPDataSource.setUser(props.getProperty(JDBC_USER));
1: 		embeddedCPDataSource.setPassword(props.getProperty(JDBC_PASSWORD));
1: 		return embeddedCPDataSource;
1: 	}
1: 
1: 	public DataSource createDataSource(Properties props) {
1: 		EmbeddedDataSource embeddedDataSource = new EmbeddedDataSource();
1: 		embeddedDataSource.setDataSourceName(props.getProperty(JDBC_DATASOURCE_NAME));
1: 		embeddedDataSource.setDatabaseName(props.getProperty(JDBC_DATABASE_NAME));
1: 		embeddedDataSource.setUser(props.getProperty(JDBC_USER));
1: 		embeddedDataSource.setPassword(props.getProperty(JDBC_PASSWORD));
1: 		return embeddedDataSource;
1: 	}
1: 
1: 	public XADataSource createXADataSource(Properties props) {
1: 		EmbeddedXADataSource embeddedXADataSource = new EmbeddedXADataSource();
1: 		embeddedXADataSource.setDataSourceName(props.getProperty(JDBC_DATASOURCE_NAME));
1: 		embeddedXADataSource.setDatabaseName(props.getProperty(JDBC_DATABASE_NAME));
1: 		embeddedXADataSource.setUser(props.getProperty(JDBC_USER));
1: 		embeddedXADataSource.setPassword(props.getProperty(JDBC_PASSWORD));
1: 		return embeddedXADataSource;
1: 	}
1: 
1: 	public Driver getDriver(Properties props) {
1: 		EmbeddedDriver embeddedDriver = new EmbeddedDriver();
1: 		return embeddedDriver;
1: 	}
1: 
1: 	public void start(BundleContext context) throws Exception {
1: 		new EmbeddedDriver();	
1: 		context.registerService(DataSourceFactory.class.getName(), this, new Properties());
1: 	}
1: 
1: 	public void stop(BundleContext context) throws Exception {
1: 
1: 		try {
1: 			DriverManager.getConnection("jdbc:derby:;shutdown=true");
1: 		} catch (SQLException sqlexception) {
1: 		}
1: 	}
1: 
1: }
============================================================================