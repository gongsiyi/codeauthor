1:314564e: /*
1:314564e:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:314564e:  * 
1:314564e:  * Licensed under the Apache License, Version 2.0 (the "License");
1:314564e:  * you may not use this file except in compliance with the License.
1:314564e:  * You may obtain a copy of the License at
1:314564e:  *
1:314564e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:314564e:  *
1:314564e:  * Unless required by applicable law or agreed to in writing, software
1:314564e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:314564e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:314564e:  * See the License for the specific language governing permissions and
1:314564e:  * limitations under the License.
1:314564e:  */
1:314564e: package org.osgi.service.transaction.control;
1:314564e: 
1:314564e: import java.util.ArrayList;
1:314564e: import java.util.Arrays;
1:314564e: import java.util.List;
1:314564e: import java.util.Objects;
1:314564e: 
1:314564e: /**
1:314564e:  * A builder for a piece of transactional work
1:314564e:  */
1:314564e: public abstract class TransactionBuilder implements TransactionStarter {
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The list of {@link Throwable} types that must trigger rollback
1:314564e: 	 */
1:314564e: 	protected final List<Class< ? extends Throwable>>	rollbackFor		= new ArrayList<Class< ? extends Throwable>>();
1:314564e: 	/**
1:314564e: 	 * The list of {@link Throwable} types that must not trigger rollback
1:314564e: 	 */
1:314564e: 	protected final List<Class< ? extends Throwable>>	noRollbackFor	= new ArrayList<Class< ? extends Throwable>>();
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Declare a list of Exception types (and their subtypes) that <em>must</em>
1:314564e: 	 * trigger a rollback. By default the transaction will rollback for all
1:314564e: 	 * {@link Exception}s. If a more specific type is registered using
1:314564e: 	 * {@link #noRollbackFor(Class, Class...)} then that type will not trigger
1:314564e: 	 * rollback. If the same type is registered using both
1:314564e: 	 * {@link #rollbackFor(Class, Class...)} and
1:314564e: 	 * {@link #noRollbackFor(Class, Class...)} then the transaction
1:314564e: 	 * <em>will not</em> begin and will instead throw a
1:314564e: 	 * {@link TransactionException}
1:314564e: 	 * <p>
1:314564e: 	 * Note that the behaviour of this method differs from Java EE and Spring in
1:314564e: 	 * two ways:
1:314564e: 	 * <ul>
1:314564e: 	 * <li>In Java EE and Spring transaction management checked exceptions are
1:314564e: 	 * considered "normal returns" and do not trigger rollback. Using an
1:314564e: 	 * Exception as a normal return value is considered a <em>bad</em> design
1:314564e: 	 * practice. In addition this means that checked Exceptions such as
1:314564e: 	 * java.sql.SQLException do not trigger rollback by default. This, in turn,
1:314564e: 	 * leads to implementation mistakes that break the transactional behaviour
1:314564e: 	 * of applications.</li>
1:314564e: 	 * <li>In Java EE it is legal to specify the same Exception type in
1:314564e: 	 * {@link #rollbackFor} and {@link #noRollbackFor}. Stating that the same
1:314564e: 	 * Exception should both trigger <em>and</em> not trigger rollback is a
1:314564e: 	 * logical impossibility, and clearly indicates an API usage error. This API
1:314564e: 	 * therefore enforces usage by triggering an exception in this invalid case.
1:314564e: 	 * </li>
1:314564e: 	 * </ul>
1:314564e: 	 * 
1:b767d3b: 	 * @param t An exception type that should trigger rollback
1:b767d3b: 	 * @param throwables further exception types that should trigger rollback
1:314564e: 	 * @return this builder
1:314564e: 	 */
1:314564e: 	@SafeVarargs
1:314564e: 	public final TransactionBuilder rollbackFor(Class< ? extends Throwable> t,
1:314564e: 			Class< ? extends Throwable>... throwables) {
1:314564e: 		Objects.requireNonNull(t,
1:314564e: 				"The supplied exception types must be non Null");
1:314564e: 		for (Class< ? extends Throwable> t2 : throwables) {
1:314564e: 			Objects.requireNonNull(t2,
1:314564e: 					"The supplied exception types must be non-null");
1:314564e: 		}
1:314564e: 		rollbackFor.clear();
1:314564e: 		rollbackFor.add(t);
1:314564e: 		rollbackFor.addAll(Arrays.asList(throwables));
1:314564e: 		return this;
1:314564e: 	}
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Declare a list of Exception types (and their subtypes) that
1:314564e: 	 * <em>must not</em> trigger a rollback. By default the transaction will
1:314564e: 	 * rollback for all {@link Exception}s. If an Exception type is registered
1:314564e: 	 * using this method then that type and its subtypes will <em>not</em>
1:314564e: 	 * trigger rollback. If the same type is registered using both
1:314564e: 	 * {@link #rollbackFor(Class, Class...)} and
1:314564e: 	 * {@link #noRollbackFor(Class, Class...)} then the transaction
1:314564e: 	 * <em>will not</em> begin and will instead throw a
1:314564e: 	 * {@link TransactionException}
1:314564e: 	 * <p>
1:314564e: 	 * Note that the behaviour of this method differs from Java EE and Spring in
1:314564e: 	 * two ways:
1:314564e: 	 * <ul>
1:314564e: 	 * <li>In Java EE and Spring transaction management checked exceptions are
1:314564e: 	 * considered "normal returns" and do not trigger rollback. Using an
1:314564e: 	 * Exception as a normal return value is considered a <em>bad</em> design
1:314564e: 	 * practice. In addition this means that checked Exceptions such as
1:314564e: 	 * java.sql.SQLException do not trigger rollback by default. This, in turn,
1:314564e: 	 * leads to implementation mistakes that break the transactional behaviour
1:314564e: 	 * of applications.</li>
1:314564e: 	 * <li>In Java EE it is legal to specify the same Exception type in
1:314564e: 	 * {@link #rollbackFor} and {@link #noRollbackFor}. Stating that the same
1:314564e: 	 * Exception should both trigger <em>and</em> not trigger rollback is a
1:314564e: 	 * logical impossibility, and clearly indicates an API usage error. This API
1:314564e: 	 * therefore enforces usage by triggering an exception in this invalid case.
1:314564e: 	 * </li>
1:314564e: 	 * </ul>
1:314564e: 	 * 
1:314564e: 	 * @param t An exception type that should not trigger rollback
1:314564e: 	 * @param throwables further exception types that should not trigger
1:314564e: 	 *            rollback
1:314564e: 	 * @return this builder
1:314564e: 	 */
1:314564e: 	@SafeVarargs
1:314564e: 	public final TransactionBuilder noRollbackFor(Class< ? extends Throwable> t,
1:314564e: 			Class< ? extends Throwable>... throwables) {
1:314564e: 
1:314564e: 		Objects.requireNonNull(t,
1:314564e: 				"The supplied exception types must be non Null");
1:314564e: 		for (Class< ? extends Throwable> t2 : throwables) {
1:314564e: 			Objects.requireNonNull(t2,
1:314564e: 					"The supplied exception types must be non-null");
1:314564e: 		}
1:314564e: 		noRollbackFor.clear();
1:314564e: 		noRollbackFor.add(t);
1:314564e: 		noRollbackFor.addAll(Arrays.asList(throwables));
1:314564e: 		return this;
1:314564e: 	}
1:661c406: 	
1:661c406: 	/**
1:661c406: 	 * Indicate to the Transaction Control service that this transaction
1:661c406: 	 * will be read-only. This hint may be used by the Transaction Control
1:661c406: 	 * service and associated resources to optimise the transaction.
1:661c406: 	 * 
1:661c406: 	 * <p>
1:661c406: 	 * Note that this method is for optimisation purposes only. The TransactionControl
1:661c406: 	 * service is free to ignore the call if it does not offer read-only optimisation. 
1:661c406: 	 * 
1:661c406: 	 * <p>
1:661c406: 	 * If a transaction is marked read-only and then the scoped work performs a write
1:661c406: 	 * operation on a resource then this is a programming error. The resource is
1:661c406: 	 * free to raise an exception when the write is attempted, or to permit the write 
1:661c406: 	 * operation. As a result the transaction may commit successfully, or may rollback.
1:661c406: 	 * 
1:661c406: 	 * @return this builder
1:661c406: 	 */
1:661c406: 	public abstract TransactionBuilder readOnly();
1:314564e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:b767d3b
/////////////////////////////////////////////////////////////////////////
1: 	 * @param t An exception type that should trigger rollback
1: 	 * @param throwables further exception types that should trigger rollback
commit:661c406
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * Indicate to the Transaction Control service that this transaction
1: 	 * will be read-only. This hint may be used by the Transaction Control
1: 	 * service and associated resources to optimise the transaction.
1: 	 * 
1: 	 * <p>
1: 	 * Note that this method is for optimisation purposes only. The TransactionControl
1: 	 * service is free to ignore the call if it does not offer read-only optimisation. 
1: 	 * 
1: 	 * <p>
1: 	 * If a transaction is marked read-only and then the scoped work performs a write
1: 	 * operation on a resource then this is a programming error. The resource is
1: 	 * free to raise an exception when the write is attempted, or to permit the write 
1: 	 * operation. As a result the transaction may commit successfully, or may rollback.
1: 	 * 
1: 	 * @return this builder
1: 	 */
1: 	public abstract TransactionBuilder readOnly();
commit:314564e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.transaction.control;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.Objects;
1: 
1: /**
1:  * A builder for a piece of transactional work
1:  */
1: public abstract class TransactionBuilder implements TransactionStarter {
1: 
1: 	/**
1: 	 * The list of {@link Throwable} types that must trigger rollback
1: 	 */
1: 	protected final List<Class< ? extends Throwable>>	rollbackFor		= new ArrayList<Class< ? extends Throwable>>();
1: 	/**
1: 	 * The list of {@link Throwable} types that must not trigger rollback
1: 	 */
1: 	protected final List<Class< ? extends Throwable>>	noRollbackFor	= new ArrayList<Class< ? extends Throwable>>();
1: 
1: 	/**
1: 	 * Declare a list of Exception types (and their subtypes) that <em>must</em>
1: 	 * trigger a rollback. By default the transaction will rollback for all
1: 	 * {@link Exception}s. If a more specific type is registered using
1: 	 * {@link #noRollbackFor(Class, Class...)} then that type will not trigger
1: 	 * rollback. If the same type is registered using both
1: 	 * {@link #rollbackFor(Class, Class...)} and
1: 	 * {@link #noRollbackFor(Class, Class...)} then the transaction
1: 	 * <em>will not</em> begin and will instead throw a
1: 	 * {@link TransactionException}
1: 	 * <p>
1: 	 * Note that the behaviour of this method differs from Java EE and Spring in
1: 	 * two ways:
1: 	 * <ul>
1: 	 * <li>In Java EE and Spring transaction management checked exceptions are
1: 	 * considered "normal returns" and do not trigger rollback. Using an
1: 	 * Exception as a normal return value is considered a <em>bad</em> design
1: 	 * practice. In addition this means that checked Exceptions such as
1: 	 * java.sql.SQLException do not trigger rollback by default. This, in turn,
1: 	 * leads to implementation mistakes that break the transactional behaviour
1: 	 * of applications.</li>
1: 	 * <li>In Java EE it is legal to specify the same Exception type in
1: 	 * {@link #rollbackFor} and {@link #noRollbackFor}. Stating that the same
1: 	 * Exception should both trigger <em>and</em> not trigger rollback is a
1: 	 * logical impossibility, and clearly indicates an API usage error. This API
1: 	 * therefore enforces usage by triggering an exception in this invalid case.
1: 	 * </li>
1: 	 * </ul>
1: 	 * 
0: 	 * @param t
0: 	 * @param throwables The Exception types that should trigger rollback
1: 	 * @return this builder
1: 	 */
1: 	@SafeVarargs
1: 	public final TransactionBuilder rollbackFor(Class< ? extends Throwable> t,
1: 			Class< ? extends Throwable>... throwables) {
1: 		Objects.requireNonNull(t,
1: 				"The supplied exception types must be non Null");
1: 		for (Class< ? extends Throwable> t2 : throwables) {
1: 			Objects.requireNonNull(t2,
1: 					"The supplied exception types must be non-null");
1: 		}
1: 		rollbackFor.clear();
1: 		rollbackFor.add(t);
1: 		rollbackFor.addAll(Arrays.asList(throwables));
1: 		return this;
1: 	}
1: 
1: 	/**
1: 	 * Declare a list of Exception types (and their subtypes) that
1: 	 * <em>must not</em> trigger a rollback. By default the transaction will
1: 	 * rollback for all {@link Exception}s. If an Exception type is registered
1: 	 * using this method then that type and its subtypes will <em>not</em>
1: 	 * trigger rollback. If the same type is registered using both
1: 	 * {@link #rollbackFor(Class, Class...)} and
1: 	 * {@link #noRollbackFor(Class, Class...)} then the transaction
1: 	 * <em>will not</em> begin and will instead throw a
1: 	 * {@link TransactionException}
1: 	 * <p>
1: 	 * Note that the behaviour of this method differs from Java EE and Spring in
1: 	 * two ways:
1: 	 * <ul>
1: 	 * <li>In Java EE and Spring transaction management checked exceptions are
1: 	 * considered "normal returns" and do not trigger rollback. Using an
1: 	 * Exception as a normal return value is considered a <em>bad</em> design
1: 	 * practice. In addition this means that checked Exceptions such as
1: 	 * java.sql.SQLException do not trigger rollback by default. This, in turn,
1: 	 * leads to implementation mistakes that break the transactional behaviour
1: 	 * of applications.</li>
1: 	 * <li>In Java EE it is legal to specify the same Exception type in
1: 	 * {@link #rollbackFor} and {@link #noRollbackFor}. Stating that the same
1: 	 * Exception should both trigger <em>and</em> not trigger rollback is a
1: 	 * logical impossibility, and clearly indicates an API usage error. This API
1: 	 * therefore enforces usage by triggering an exception in this invalid case.
1: 	 * </li>
1: 	 * </ul>
1: 	 * 
1: 	 * @param t An exception type that should not trigger rollback
1: 	 * @param throwables further exception types that should not trigger
1: 	 *            rollback
1: 	 * @return this builder
1: 	 */
1: 	@SafeVarargs
1: 	public final TransactionBuilder noRollbackFor(Class< ? extends Throwable> t,
1: 			Class< ? extends Throwable>... throwables) {
1: 
1: 		Objects.requireNonNull(t,
1: 				"The supplied exception types must be non Null");
1: 		for (Class< ? extends Throwable> t2 : throwables) {
1: 			Objects.requireNonNull(t2,
1: 					"The supplied exception types must be non-null");
1: 		}
1: 		noRollbackFor.clear();
1: 		noRollbackFor.add(t);
1: 		noRollbackFor.addAll(Arrays.asList(throwables));
1: 		return this;
1: 	}
1: }
============================================================================