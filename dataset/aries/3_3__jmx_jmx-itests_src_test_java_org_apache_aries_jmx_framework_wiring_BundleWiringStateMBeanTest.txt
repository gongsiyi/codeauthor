1:2d53ea1: /**
1:2d53ea1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:2d53ea1:  *  contributor license agreements.  See the NOTICE file distributed with
1:2d53ea1:  *  this work for additional information regarding copyright ownership.
1:2d53ea1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:2d53ea1:  *  (the "License"); you may not use this file except in compliance with
1:2d53ea1:  *  the License.  You may obtain a copy of the License at
1:2d53ea1:  *
1:2d53ea1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2d53ea1:  *
1:2d53ea1:  *  Unless required by applicable law or agreed to in writing, software
1:2d53ea1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:2d53ea1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2d53ea1:  *  See the License for the specific language governing permissions and
1:2d53ea1:  *  limitations under the License.
1:2d53ea1:  */
1:2d53ea1: package org.apache.aries.jmx.framework.wiring;
11:2d53ea1: 
1:5040e04: import static org.junit.Assert.assertEquals;
1:2d53ea1: 
1:2d53ea1: import java.util.ArrayList;
1:bf86346: import java.util.Arrays;
1:2d53ea1: import java.util.Collection;
1:2d53ea1: import java.util.HashMap;
1:2d53ea1: import java.util.HashSet;
1:5040e04: import java.util.Hashtable;
1:2d53ea1: import java.util.List;
1:2d53ea1: import java.util.Map;
1:2d53ea1: import java.util.Set;
1:2d53ea1: 
1:2d53ea1: import javax.management.ObjectName;
1:2d53ea1: import javax.management.openmbean.CompositeData;
1:2d53ea1: import javax.management.openmbean.TabularData;
1:2d53ea1: 
1:2d53ea1: import org.apache.aries.jmx.AbstractIntegrationTest;
1:2d53ea1: import org.apache.aries.jmx.codec.PropertyData;
1:2d53ea1: import org.junit.Assert;
1:0a8778f: import org.junit.Before;
1:2d53ea1: import org.junit.Test;
1:0a8778f: import org.ops4j.pax.exam.Configuration;
1:2d53ea1: import org.ops4j.pax.exam.CoreOptions;
1:2d53ea1: import org.ops4j.pax.exam.Option;
1:2d53ea1: import org.osgi.framework.Bundle;
1:2d53ea1: import org.osgi.framework.Constants;
1:2d53ea1: import org.osgi.framework.wiring.BundleCapability;
1:2d53ea1: import org.osgi.framework.wiring.BundleRequirement;
1:2d53ea1: import org.osgi.framework.wiring.BundleRevision;
1:62a90a9: import org.osgi.framework.wiring.BundleRevisions;
1:2d53ea1: import org.osgi.framework.wiring.BundleWire;
1:2d53ea1: import org.osgi.framework.wiring.BundleWiring;
1:2d53ea1: import org.osgi.jmx.framework.wiring.BundleWiringStateMBean;
1:2d53ea1: 
1:2d53ea1: public class BundleWiringStateMBeanTest extends AbstractIntegrationTest {
1:0a8778f:     private BundleWiringStateMBean brsMBean;
1:0a8778f: 	private Bundle bundleA;
1:0a8778f: 
1:0a8778f: 	@Configuration
1:0a8778f:     public Option[] configuration() {
1:0a8778f:         return CoreOptions.options(
1:62a90a9:             // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
1:62a90a9:             // new TimeoutOption( 0 ),
1:2d53ea1: 
1:0a8778f:         	jmxRuntime(),
1:0a8778f:             bundlea(),
1:0a8778f:             bundleb(),
1:0a8778f:             fragmentc(),
1:0a8778f:             bundled()
1:2d53ea1:             );
1:2d53ea1:     }
1:2d53ea1: 
1:0a8778f:     @Before
1:2d53ea1:     public void doSetUp() throws Exception {
1:0a8778f:         brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1:0a8778f:         bundleA = getBundleByName("org.apache.aries.jmx.test.bundlea");
1:2d53ea1:     }
1:2d53ea1: 
1:91b6cdf:     @Test
1:5040e04:     public void testObjectName() throws Exception {
1:5040e04:         Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(BundleWiringStateMBean.OBJECTNAME + ",*"), null);
1:5040e04:         assertEquals(1, names.size());
1:5040e04:         ObjectName name = names.iterator().next();
1:5040e04:         Hashtable<String, String> props = name.getKeyPropertyList();
1:5040e04:         assertEquals(context().getProperty(Constants.FRAMEWORK_UUID), props.get("uuid"));
1:5040e04:         assertEquals(context().getBundle(0).getSymbolicName(), props.get("framework"));
1:5040e04:     }
1:5040e04: 
1:5040e04:     @Test
1:334a137:     public void testGetCurrentRevisionDeclaredRequirements() throws Exception {
1:0a8778f:         Bundle a = getBundleByName("org.apache.aries.jmx.test.bundlea");
1:988cc71:         BundleRevision br = (BundleRevision) a.adapt(BundleRevision.class);
1:91b6cdf: 
1:2d53ea1:         List<BundleRequirement> requirements = br.getDeclaredRequirements(BundleRevision.PACKAGE_NAMESPACE);
1:7b6fac5:         CompositeData[] jmxRequirements = brsMBean.getCurrentRevisionDeclaredRequirements(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:2d53ea1:         Assert.assertEquals(requirements.size(), jmxRequirements.length);
1:91b6cdf: 
1:307fdbc:         Map<Map<String, Object>, Map<String, String>> expectedRequirements = requirementsToMap(requirements);
1:307fdbc:         Map<Map<String, Object>, Map<String, String>> actualRequirements = jmxCapReqToMap(jmxRequirements);
1:307fdbc:         Assert.assertEquals(expectedRequirements, actualRequirements);
1:307fdbc:     }
1:62a90a9: 
1:307fdbc:     @Test
1:334a137:     public void testGetCurrentRevisionDeclaredCapabilities() throws Exception {
1:988cc71:         BundleRevision br = (BundleRevision) bundleA.adapt(BundleRevision.class);
1:62a90a9: 
1:307fdbc:         List<BundleCapability> capabilities = br.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE);
1:0a8778f:         CompositeData[] jmxCapabilities = brsMBean.getCurrentRevisionDeclaredCapabilities(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:307fdbc:         Assert.assertEquals(capabilities.size(), jmxCapabilities.length);
1:62a90a9: 
1:307fdbc:         Map<Map<String, Object>, Map<String, String>> expectedCapabilities = capabilitiesToMap(capabilities);
1:307fdbc:         Map<Map<String, Object>, Map<String, String>> actualCapabilities = jmxCapReqToMap(jmxCapabilities);
1:307fdbc:         Assert.assertEquals(expectedCapabilities, actualCapabilities);
1:2d53ea1:     }
1:307fdbc: 
1:2d53ea1:     @Test
1:334a137:     public void testGetRevisionsDeclaredRequirements() throws Exception {
1:988cc71:         BundleRevisions revisions = (BundleRevisions) bundleA.adapt(BundleRevisions.class);
1:307fdbc: 
1:62a90a9:         Assert.assertEquals("Precondition", 1, revisions.getRevisions().size());
1:62a90a9: 
1:0a8778f:         TabularData jmxRequirementsTable = brsMBean.getRevisionsDeclaredRequirements(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:62a90a9:         Assert.assertEquals(1, jmxRequirementsTable.size());
1:62a90a9: 
1:988cc71:         List<BundleRequirement> requirements = ((BundleRevision) revisions.getRevisions().iterator().next()).getDeclaredRequirements(BundleRevision.PACKAGE_NAMESPACE);
1:62a90a9:         CompositeData jmxRevRequirements = (CompositeData) jmxRequirementsTable.values().iterator().next();
1:62a90a9:         CompositeData[] jmxRequirements = (CompositeData[]) jmxRevRequirements.get(BundleWiringStateMBean.REQUIREMENTS);
1:62a90a9: 
1:62a90a9:         Map<Map<String, Object>, Map<String, String>> expectedRequirements = requirementsToMap(requirements);
1:62a90a9:         Map<Map<String, Object>, Map<String, String>> actualRequirements = jmxCapReqToMap(jmxRequirements);
1:62a90a9:         Assert.assertEquals(expectedRequirements, actualRequirements);
1:62a90a9:     }
1:62a90a9: 
1:62a90a9:     @Test
1:334a137:     public void testGetRevisionsDeclaredCapabilities() throws Exception {
1:988cc71:         BundleRevisions revisions = (BundleRevisions) bundleA.adapt(BundleRevisions.class);
1:62a90a9: 
1:62a90a9:         Assert.assertEquals("Precondition", 1, revisions.getRevisions().size());
1:62a90a9: 
1:0a8778f:         TabularData jmxCapabilitiesTable = brsMBean.getRevisionsDeclaredCapabilities(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:62a90a9:         Assert.assertEquals(1, jmxCapabilitiesTable.size());
1:62a90a9: 
1:988cc71:         List<BundleCapability> capabilities = ((BundleRevision) revisions.getRevisions().iterator().next()).getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE);
1:62a90a9:         CompositeData jmxRevCapabilities = (CompositeData) jmxCapabilitiesTable.values().iterator().next();
1:62a90a9:         CompositeData[] jmxCapabilities = (CompositeData[]) jmxRevCapabilities.get(BundleWiringStateMBean.CAPABILITIES);
1:62a90a9: 
1:62a90a9:         Map<Map<String, Object>, Map<String, String>> expectedCapabilities = capabilitiesToMap(capabilities);
1:62a90a9:         Map<Map<String, Object>, Map<String, String>> actualCapabilities = jmxCapReqToMap(jmxCapabilities);
1:62a90a9:         Assert.assertEquals(expectedCapabilities, actualCapabilities);
1:62a90a9:     }
1:62a90a9: 
1:62a90a9:     @Test
1:334a137:     public void testGetCurrentWiring() throws Exception {
1:0a8778f:         CompositeData jmxWiring = brsMBean.getCurrentWiring(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:307fdbc: 
1:2d53ea1:         Assert.assertEquals(BundleWiringStateMBean.BUNDLE_WIRING_TYPE, jmxWiring.getCompositeType());
1:0a8778f:         Assert.assertEquals(bundleA.getBundleId(), jmxWiring.get(BundleWiringStateMBean.BUNDLE_ID));
1:307fdbc: 
1:988cc71:         BundleWiring bw = (BundleWiring) bundleA.adapt(BundleWiring.class);
1:2d53ea1:         assertBundleWiring(bw, jmxWiring);
1:2d53ea1:     }
1:e98589f: 
1:e98589f:     @Test
1:334a137:     public void testRevisionsWiring() throws Exception {
1:0a8778f:         TabularData jmxWiringTable = brsMBean.getRevisionsWiring(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:e98589f: 
1:e98589f:         Assert.assertEquals(1, jmxWiringTable.size());
1:e98589f:         CompositeData jmxWiring = (CompositeData) jmxWiringTable.values().iterator().next();
1:e98589f:         Assert.assertEquals(BundleWiringStateMBean.BUNDLE_WIRING_TYPE, jmxWiring.getCompositeType());
1:0a8778f:         Assert.assertEquals(bundleA.getBundleId(), jmxWiring.get(BundleWiringStateMBean.BUNDLE_ID));
1:e98589f: 
1:988cc71:         BundleWiring bw = (BundleWiring) bundleA.adapt(BundleWiring.class);
1:e98589f:         assertBundleWiring(bw, jmxWiring);
1:e98589f:     }
1:e98589f: 
1:2d53ea1:     private void assertBundleWiring(BundleWiring bundleWiring, CompositeData jmxWiring) {
1:2d53ea1:         CompositeData[] jmxCapabilities = (CompositeData[]) jmxWiring.get(BundleWiringStateMBean.CAPABILITIES);
1:2d53ea1:         List<BundleCapability> capabilities = bundleWiring.getCapabilities(BundleRevision.PACKAGE_NAMESPACE);
1:2d53ea1:         Assert.assertEquals(capabilities.size(), jmxCapabilities.length);
1:307fdbc: 
1:2d53ea1:         Map<Map<String, Object>, Map<String, String>> expectedCapabilities = capabilitiesToMap(capabilities);
1:2d53ea1:         Map<Map<String, Object>, Map<String, String>> actualCapabilities = jmxCapReqToMap(jmxCapabilities);
1:2d53ea1:         Assert.assertEquals(expectedCapabilities, actualCapabilities);
1:2d53ea1: 
1:2d53ea1:         CompositeData[] jmxRequirements = (CompositeData[]) jmxWiring.get(BundleWiringStateMBean.REQUIREMENTS);
1:2d53ea1:         List<BundleRequirement> requirements = bundleWiring.getRequirements(BundleRevision.PACKAGE_NAMESPACE);
1:2d53ea1:         Assert.assertEquals(requirements.size(), jmxRequirements.length);
1:2d53ea1: 
1:2d53ea1:         Map<Map<String, Object>, Map<String, String>> expectedRequirements = requirementsToMap(requirements);
1:2d53ea1:         Map<Map<String, Object>, Map<String, String>> actualRequirements = jmxCapReqToMap(jmxRequirements);
1:2d53ea1:         Assert.assertEquals(expectedRequirements, actualRequirements);
1:2d53ea1: 
1:2d53ea1:         List<BundleWire> requiredWires = bundleWiring.getRequiredWires(BundleRevision.PACKAGE_NAMESPACE);
1:2d53ea1:         CompositeData[] jmxRequiredWires = (CompositeData[]) jmxWiring.get(BundleWiringStateMBean.REQUIRED_WIRES);
1:2d53ea1:         Assert.assertEquals(requiredWires.size(), jmxRequiredWires.length);
1:2d53ea1: 
1:2d53ea1:         Set<List<Object>> expectedRequiredWires = new HashSet<List<Object>>();
1:2d53ea1:         for (BundleWire wire : requiredWires) {
1:2d53ea1:             List<Object> data = new ArrayList<Object>();
1:2d53ea1: 
1:2d53ea1:             data.add(wire.getCapability().getRevision().getBundle().getBundleId());
1:2d53ea1:             data.add(wire.getCapability().getAttributes());
1:2d53ea1:             data.add(wire.getCapability().getDirectives());
1:2d53ea1:             data.add(wire.getRequirement().getRevision().getBundle().getBundleId());
1:2d53ea1:             data.add(wire.getRequirement().getAttributes());
1:2d53ea1:             data.add(wire.getRequirement().getDirectives());
1:2d53ea1:             expectedRequiredWires.add(data);
1:2d53ea1:         }
1:2d53ea1: 
1:2d53ea1:         Set<List<Object>> actualRequiredWires = new HashSet<List<Object>>();
1:2d53ea1:         for (CompositeData wire : jmxRequiredWires) {
1:2d53ea1:             List<Object> data = new ArrayList<Object>();
1:2d53ea1:             data.add(wire.get(BundleWiringStateMBean.PROVIDER_BUNDLE_ID));
1:2d53ea1:             // TODO bundle revision id
1:2d53ea1:             data.add(getJmxAttributes((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_CAPABILITY)));
1:2d53ea1:             data.add(getJmxDirectives((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_CAPABILITY)));
1:2d53ea1:             data.add(wire.get(BundleWiringStateMBean.REQUIRER_BUNDLE_ID));
1:2d53ea1:             data.add(getJmxAttributes((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_REQUIREMENT)));
1:2d53ea1:             data.add(getJmxDirectives((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_REQUIREMENT)));
1:2d53ea1:             actualRequiredWires.add(data);
1:2d53ea1:         }
1:2d53ea1:         Assert.assertEquals(expectedRequiredWires, actualRequiredWires);
1:2d53ea1: 
1:2d53ea1:         List<BundleWire> providedWires = bundleWiring.getProvidedWires(BundleRevision.PACKAGE_NAMESPACE);
1:2d53ea1:         CompositeData[] jmxProvidedWires = (CompositeData []) jmxWiring.get(BundleWiringStateMBean.PROVIDED_WIRES);
1:2d53ea1:         Assert.assertEquals(providedWires.size(), jmxProvidedWires.length);
1:2d53ea1: 
1:2d53ea1:         HashSet<List<Object>> expectedProvidedWires = new HashSet<List<Object>>();
1:2d53ea1:         for (BundleWire wire : providedWires) {
1:2d53ea1:             List<Object> data = new ArrayList<Object>();
1:2d53ea1:             data.add(wire.getCapability().getRevision().getBundle().getBundleId());
1:2d53ea1:             data.add(wire.getCapability().getAttributes());
1:2d53ea1:             data.add(wire.getCapability().getDirectives());
1:2d53ea1:             data.add(wire.getRequirement().getRevision().getBundle().getBundleId());
1:2d53ea1:             data.add(wire.getRequirement().getAttributes());
1:2d53ea1:             data.add(wire.getRequirement().getDirectives());
1:2d53ea1:             expectedProvidedWires.add(data);
1:2d53ea1:         }
1:2d53ea1: 
1:2d53ea1:         Set<List<Object>> actualProvidedWires = new HashSet<List<Object>>();
1:2d53ea1:         for (CompositeData wire : jmxProvidedWires) {
1:2d53ea1:             List<Object> data = new ArrayList<Object>();
1:2d53ea1:             data.add(wire.get(BundleWiringStateMBean.PROVIDER_BUNDLE_ID));
1:2d53ea1:             data.add(getJmxAttributes((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_CAPABILITY)));
1:2d53ea1:             data.add(getJmxDirectives((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_CAPABILITY)));
1:2d53ea1:             data.add(wire.get(BundleWiringStateMBean.REQUIRER_BUNDLE_ID));
1:2d53ea1:             data.add(getJmxAttributes((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_REQUIREMENT)));
1:2d53ea1:             data.add(getJmxDirectives((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_REQUIREMENT)));
1:2d53ea1:             actualProvidedWires.add(data);
1:2d53ea1:         }
1:2d53ea1:         Assert.assertEquals(expectedProvidedWires, actualProvidedWires);
1:2d53ea1:     }
1:2d53ea1: 
1:2d53ea1:     @Test
1:2d53ea1:     public void testCurrentWiringClosure() throws Exception {
1:0a8778f:         TabularData jmxWiringClosure = brsMBean.getCurrentWiringClosure(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:2d53ea1: 
1:0a8778f:         CompositeData jmxWiringA = jmxWiringClosure.get(new Object [] {bundleA.getBundleId(), 0});
1:988cc71:         assertBundleWiring((BundleWiring) bundleA.adapt(BundleWiring.class), jmxWiringA);
1:2d53ea1: 
1:2d53ea1:         Bundle b = context().getBundleByName("org.apache.aries.jmx.test.bundleb");
1:2d53ea1:         int bRevID = findRevisionID(jmxWiringA, b);
1:2d53ea1:         CompositeData jmxWiringB = jmxWiringClosure.get(new Object [] {b.getBundleId(), bRevID});
1:988cc71:         assertBundleWiring((BundleWiring) b.adapt(BundleWiring.class), jmxWiringB);
1:2d53ea1: 
1:2d53ea1:         Bundle cm = context().getBundleByName("org.apache.felix.configadmin");
1:2d53ea1:         int cmRevID = findRevisionID(jmxWiringA, cm);
1:2d53ea1:         CompositeData jmxWiringCM = jmxWiringClosure.get(new Object [] {cm.getBundleId(), cmRevID});
1:988cc71:         assertBundleWiring((BundleWiring) cm.adapt(BundleWiring.class), jmxWiringCM);
1:2d53ea1: 
1:2d53ea1:         Bundle sb = context().getBundle(0);
1:2d53ea1:         int sbRevID = findRevisionID(jmxWiringA, sb);
1:2d53ea1:         CompositeData jmxWiringSB = jmxWiringClosure.get(new Object [] {sb.getBundleId(), sbRevID});
1:988cc71:         assertBundleWiring((BundleWiring) sb.adapt(BundleWiring.class), jmxWiringSB);
1:2d53ea1:     }
1:2d53ea1: 
1:2d53ea1:     @Test
1:91b6cdf:     public void testRevisionsWiringClosure() throws Exception {
1:0a8778f:         TabularData jmxWiringClosure = brsMBean.getRevisionsWiringClosure(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:91b6cdf: 
1:0a8778f:         CompositeData jmxWiringA = jmxWiringClosure.get(new Object [] {bundleA.getBundleId(), 0});
1:988cc71:         assertBundleWiring((BundleWiring) bundleA.adapt(BundleWiring.class), jmxWiringA);
1:91b6cdf: 
1:91b6cdf:         Bundle b = context().getBundleByName("org.apache.aries.jmx.test.bundleb");
1:91b6cdf:         int bRevID = findRevisionID(jmxWiringA, b);
1:91b6cdf:         CompositeData jmxWiringB = jmxWiringClosure.get(new Object [] {b.getBundleId(), bRevID});
1:988cc71:         assertBundleWiring((BundleWiring) b.adapt(BundleWiring.class), jmxWiringB);
1:91b6cdf: 
1:91b6cdf:         Bundle cm = context().getBundleByName("org.apache.felix.configadmin");
1:91b6cdf:         int cmRevID = findRevisionID(jmxWiringA, cm);
1:91b6cdf:         CompositeData jmxWiringCM = jmxWiringClosure.get(new Object [] {cm.getBundleId(), cmRevID});
1:988cc71:         assertBundleWiring((BundleWiring) cm.adapt(BundleWiring.class), jmxWiringCM);
1:91b6cdf: 
1:91b6cdf:         Bundle sb = context().getBundle(0);
1:91b6cdf:         int sbRevID = findRevisionID(jmxWiringA, sb);
1:91b6cdf:         CompositeData jmxWiringSB = jmxWiringClosure.get(new Object [] {sb.getBundleId(), sbRevID});
1:988cc71:         assertBundleWiring((BundleWiring) sb.adapt(BundleWiring.class), jmxWiringSB);
1:91b6cdf:     }
1:2d53ea1: 
1:2d53ea1:     private int findRevisionID(CompositeData jmxWiring, Bundle bundle) {
1:2d53ea1:         CompositeData[] requiredWires = (CompositeData []) jmxWiring.get(BundleWiringStateMBean.REQUIRED_WIRES);
1:2d53ea1:         for (CompositeData req : requiredWires) {
1:2d53ea1:             if (new Long(bundle.getBundleId()).equals(req.get(BundleWiringStateMBean.PROVIDER_BUNDLE_ID))) {
1:2d53ea1:                 return (Integer) req.get(BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID);
1:2d53ea1:             }
1:2d53ea1:         }
1:2d53ea1:         return -1;
1:2d53ea1:     }
1:2d53ea1: 
1:2d53ea1:     private Map<Map<String, Object>, Map<String, String>> capabilitiesToMap(List<BundleCapability> capabilities) {
1:2d53ea1:         Map<Map<String, Object>, Map<String, String>> map = new HashMap<Map<String,Object>, Map<String,String>>();
1:2d53ea1:         for (BundleCapability cap : capabilities) {
1:2d53ea1:             map.put(cap.getAttributes(), cap.getDirectives());
1:2d53ea1:         }
1:2d53ea1:         return map;
1:2d53ea1:     }
1:2d53ea1: 
1:2d53ea1:     private Map<Map<String, Object>, Map<String, String>> requirementsToMap(List<BundleRequirement> requirements) {
1:2d53ea1:         Map<Map<String, Object>, Map<String, String>> map = new HashMap<Map<String,Object>, Map<String,String>>();
1:2d53ea1:         for (BundleRequirement req : requirements) {
1:2d53ea1:             map.put(req.getAttributes(), req.getDirectives());
1:2d53ea1:         }
1:2d53ea1:         return map;
1:2d53ea1:     }
1:2d53ea1: 
1:2d53ea1:     private Map<Map<String, Object>, Map<String, String>> jmxCapReqToMap(CompositeData[] jmxCapabilitiesOrRequirements) {
1:2d53ea1:         Map<Map<String, Object>, Map<String, String>> actualCapabilities = new HashMap<Map<String,Object>, Map<String,String>>();
1:2d53ea1:         for (CompositeData jmxCapReq : jmxCapabilitiesOrRequirements) {
1:2d53ea1:             Map<String, Object> aMap = getJmxAttributes(jmxCapReq);
1:2d53ea1:             Map<String, String> dMap = getJmxDirectives(jmxCapReq);
1:2d53ea1:             actualCapabilities.put(aMap, dMap);
1:2d53ea1:         }
1:2d53ea1:         return actualCapabilities;
1:2d53ea1:     }
1:2d53ea1: 
1:2d53ea1:     @SuppressWarnings("unchecked")
1:2d53ea1:     private Map<String, Object> getJmxAttributes(CompositeData jmxCapReq) {
1:2d53ea1:         TabularData jmxAttributes = (TabularData) jmxCapReq.get(BundleWiringStateMBean.ATTRIBUTES);
1:2d53ea1:         Map<String, Object> aMap = new HashMap<String, Object>();
1:2d53ea1:         for (CompositeData jmxAttr : (Collection<CompositeData>) jmxAttributes.values()) {
1:2d53ea1:             PropertyData<Object> pd = PropertyData.from(jmxAttr);
1:bf86346:             Object val = pd.getValue();
1:bf86346:             if (val instanceof Object[]) {
1:bf86346:                 val = Arrays.asList((Object [])val);
1:bf86346:             }
1:bf86346:             aMap.put(pd.getKey(), val);
1:2d53ea1:         }
1:2d53ea1:         return aMap;
1:2d53ea1:     }
1:2d53ea1: 
1:2d53ea1:     @SuppressWarnings("unchecked")
1:2d53ea1:     private Map<String, String> getJmxDirectives(CompositeData jmxCapReq) {
1:2d53ea1:         TabularData jmxDirectives = (TabularData) jmxCapReq.get(BundleWiringStateMBean.DIRECTIVES);
1:2d53ea1:         Map<String, String> dMap = new HashMap<String, String>();
1:2d53ea1:         for (CompositeData jmxDir : (Collection<CompositeData>) jmxDirectives.values()) {
1:2d53ea1:             dMap.put((String) jmxDir.get(BundleWiringStateMBean.KEY), (String) jmxDir.get(BundleWiringStateMBean.VALUE));
1:2d53ea1:         }
1:2d53ea1:         return dMap;
1:2d53ea1:     }
1:2d53ea1: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:988cc71
/////////////////////////////////////////////////////////////////////////
1:         BundleRevision br = (BundleRevision) a.adapt(BundleRevision.class);
/////////////////////////////////////////////////////////////////////////
1:         BundleRevision br = (BundleRevision) bundleA.adapt(BundleRevision.class);
/////////////////////////////////////////////////////////////////////////
1:         BundleRevisions revisions = (BundleRevisions) bundleA.adapt(BundleRevisions.class);
1:         List<BundleRequirement> requirements = ((BundleRevision) revisions.getRevisions().iterator().next()).getDeclaredRequirements(BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
1:         BundleRevisions revisions = (BundleRevisions) bundleA.adapt(BundleRevisions.class);
1:         List<BundleCapability> capabilities = ((BundleRevision) revisions.getRevisions().iterator().next()).getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
1:         BundleWiring bw = (BundleWiring) bundleA.adapt(BundleWiring.class);
/////////////////////////////////////////////////////////////////////////
1:         BundleWiring bw = (BundleWiring) bundleA.adapt(BundleWiring.class);
/////////////////////////////////////////////////////////////////////////
1:         assertBundleWiring((BundleWiring) bundleA.adapt(BundleWiring.class), jmxWiringA);
1:         assertBundleWiring((BundleWiring) b.adapt(BundleWiring.class), jmxWiringB);
1:         assertBundleWiring((BundleWiring) cm.adapt(BundleWiring.class), jmxWiringCM);
1:         assertBundleWiring((BundleWiring) sb.adapt(BundleWiring.class), jmxWiringSB);
/////////////////////////////////////////////////////////////////////////
1:         assertBundleWiring((BundleWiring) bundleA.adapt(BundleWiring.class), jmxWiringA);
1:         assertBundleWiring((BundleWiring) b.adapt(BundleWiring.class), jmxWiringB);
1:         assertBundleWiring((BundleWiring) cm.adapt(BundleWiring.class), jmxWiringCM);
1:         assertBundleWiring((BundleWiring) sb.adapt(BundleWiring.class), jmxWiringSB);
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.ops4j.pax.exam.Configuration;
/////////////////////////////////////////////////////////////////////////
1:     private BundleWiringStateMBean brsMBean;
1: 	private Bundle bundleA;
1: 
1: 	@Configuration
1:     public Option[] configuration() {
1:         return CoreOptions.options(
1:         	jmxRuntime(),
1:             bundlea(),
1:             bundleb(),
1:             fragmentc(),
1:             bundled()
1:     @Before
1:         brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1:         bundleA = getBundleByName("org.apache.aries.jmx.test.bundlea");
/////////////////////////////////////////////////////////////////////////
1:         Bundle a = getBundleByName("org.apache.aries.jmx.test.bundlea");
/////////////////////////////////////////////////////////////////////////
0:         BundleRevision br = bundleA.adapt(BundleRevision.class);
1:         CompositeData[] jmxCapabilities = brsMBean.getCurrentRevisionDeclaredCapabilities(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         BundleRevisions revisions = bundleA.adapt(BundleRevisions.class);
1:         TabularData jmxRequirementsTable = brsMBean.getRevisionsDeclaredRequirements(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         BundleRevisions revisions = bundleA.adapt(BundleRevisions.class);
1:         TabularData jmxCapabilitiesTable = brsMBean.getRevisionsDeclaredCapabilities(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
1:         CompositeData jmxWiring = brsMBean.getCurrentWiring(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:         Assert.assertEquals(bundleA.getBundleId(), jmxWiring.get(BundleWiringStateMBean.BUNDLE_ID));
0:         BundleWiring bw = bundleA.adapt(BundleWiring.class);
1:         TabularData jmxWiringTable = brsMBean.getRevisionsWiring(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:         Assert.assertEquals(bundleA.getBundleId(), jmxWiring.get(BundleWiringStateMBean.BUNDLE_ID));
0:         BundleWiring bw = bundleA.adapt(BundleWiring.class);
/////////////////////////////////////////////////////////////////////////
1:         TabularData jmxWiringClosure = brsMBean.getCurrentWiringClosure(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:         CompositeData jmxWiringA = jmxWiringClosure.get(new Object [] {bundleA.getBundleId(), 0});
0:         assertBundleWiring(bundleA.adapt(BundleWiring.class), jmxWiringA);
/////////////////////////////////////////////////////////////////////////
1:         TabularData jmxWiringClosure = brsMBean.getRevisionsWiringClosure(bundleA.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
1:         CompositeData jmxWiringA = jmxWiringClosure.get(new Object [] {bundleA.getBundleId(), 0});
0:         assertBundleWiring(bundleA.adapt(BundleWiring.class), jmxWiringA);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:bf86346
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:             CoreOptions.equinox().version("3.8.0.V20120529-1548"),
/////////////////////////////////////////////////////////////////////////
1:             Object val = pd.getValue();
1:             if (val instanceof Object[]) {
1:                 val = Arrays.asList((Object [])val);
1:             }
1:             aMap.put(pd.getKey(), val);
commit:5040e04
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
1:     public void testObjectName() throws Exception {
1:         Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(BundleWiringStateMBean.OBJECTNAME + ",*"), null);
1:         assertEquals(1, names.size());
1:         ObjectName name = names.iterator().next();
1:         Hashtable<String, String> props = name.getKeyPropertyList();
1:         assertEquals(context().getProperty(Constants.FRAMEWORK_UUID), props.get("uuid"));
1:         assertEquals(context().getBundle(0).getSymbolicName(), props.get("framework"));
1:     }
1: 
1:     @Test
commit:7186eab
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         waitForMBean(new ObjectName(BundleWiringStateMBean.OBJECTNAME));
commit:7b6fac5
/////////////////////////////////////////////////////////////////////////
1:         CompositeData[] jmxRequirements = brsMBean.getCurrentRevisionDeclaredRequirements(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         CompositeData[] jmxCapabilities = brsMBean.getCurrentRevisionDeclaredCapabilities(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         TabularData jmxRequirementsTable = brsMBean.getRevisionsDeclaredRequirements(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         TabularData jmxCapabilitiesTable = brsMBean.getRevisionsDeclaredCapabilities(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         CompositeData jmxWiring = brsMBean.getCurrentWiring(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         TabularData jmxWiringTable = brsMBean.getRevisionsWiring(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         TabularData jmxWiringClosure = brsMBean.getCurrentWiringClosure(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
/////////////////////////////////////////////////////////////////////////
0:         TabularData jmxWiringClosure = brsMBean.getRevisionsWiringClosure(a.getBundleId(), BundleRevision.PACKAGE_NAMESPACE);
commit:334a137
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testGetCurrentRevisionDeclaredRequirements() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testGetCurrentRevisionDeclaredCapabilities() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testGetRevisionsDeclaredRequirements() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testGetRevisionsDeclaredCapabilities() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testGetCurrentWiring() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testRevisionsWiring() throws Exception {
commit:91b6cdf
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testRevisionsWiringClosure() throws Exception {
0:         BundleWiringStateMBean brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         TabularData jmxWiringClosure = brsMBean.getRevisionsWiringClosure(a.getBundleId(), BundleWiringStateMBean.PACKAGE_NAMESPACE);
1: 
0:         CompositeData jmxWiringA = jmxWiringClosure.get(new Object [] {a.getBundleId(), 0});
0:         assertBundleWiring(a.adapt(BundleWiring.class), jmxWiringA);
1: 
1:         Bundle b = context().getBundleByName("org.apache.aries.jmx.test.bundleb");
1:         int bRevID = findRevisionID(jmxWiringA, b);
1:         CompositeData jmxWiringB = jmxWiringClosure.get(new Object [] {b.getBundleId(), bRevID});
0:         assertBundleWiring(b.adapt(BundleWiring.class), jmxWiringB);
1: 
1:         Bundle cm = context().getBundleByName("org.apache.felix.configadmin");
1:         int cmRevID = findRevisionID(jmxWiringA, cm);
1:         CompositeData jmxWiringCM = jmxWiringClosure.get(new Object [] {cm.getBundleId(), cmRevID});
0:         assertBundleWiring(cm.adapt(BundleWiring.class), jmxWiringCM);
1: 
1:         Bundle sb = context().getBundle(0);
1:         int sbRevID = findRevisionID(jmxWiringA, sb);
1:         CompositeData jmxWiringSB = jmxWiringClosure.get(new Object [] {sb.getBundleId(), sbRevID});
0:         assertBundleWiring(sb.adapt(BundleWiring.class), jmxWiringSB);
1:     }
1: 
commit:e98589f
/////////////////////////////////////////////////////////////////////////
1:     @Test
0:     public void testRevisionsWiring() throws IOException {
0:         BundleWiringStateMBean brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         TabularData jmxWiringTable = brsMBean.getRevisionsWiring(a.getBundleId(), BundleWiringStateMBean.PACKAGE_NAMESPACE);
1: 
1:         Assert.assertEquals(1, jmxWiringTable.size());
1:         CompositeData jmxWiring = (CompositeData) jmxWiringTable.values().iterator().next();
1:         Assert.assertEquals(BundleWiringStateMBean.BUNDLE_WIRING_TYPE, jmxWiring.getCompositeType());
0:         Assert.assertEquals(a.getBundleId(), jmxWiring.get(BundleWiringStateMBean.BUNDLE_ID));
1: 
0:         BundleWiring bw = a.adapt(BundleWiring.class);
1:         assertBundleWiring(bw, jmxWiring);
1:     }
1: 
commit:62a90a9
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRevisions;
/////////////////////////////////////////////////////////////////////////
1:             // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
1:             // new TimeoutOption( 0 ),
/////////////////////////////////////////////////////////////////////////
0:     public void testGetRevisionsDeclaredRequirements() throws IOException {
0:         BundleWiringStateMBean brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         BundleRevisions revisions = a.adapt(BundleRevisions.class);
1: 
1:         Assert.assertEquals("Precondition", 1, revisions.getRevisions().size());
1: 
0:         TabularData jmxRequirementsTable = brsMBean.getRevisionsDeclaredRequirements(a.getBundleId(), BundleWiringStateMBean.PACKAGE_NAMESPACE);
1:         Assert.assertEquals(1, jmxRequirementsTable.size());
1: 
0:         List<BundleRequirement> requirements = revisions.getRevisions().iterator().next().getDeclaredRequirements(BundleRevision.PACKAGE_NAMESPACE);
1:         CompositeData jmxRevRequirements = (CompositeData) jmxRequirementsTable.values().iterator().next();
1:         CompositeData[] jmxRequirements = (CompositeData[]) jmxRevRequirements.get(BundleWiringStateMBean.REQUIREMENTS);
1: 
1:         Map<Map<String, Object>, Map<String, String>> expectedRequirements = requirementsToMap(requirements);
1:         Map<Map<String, Object>, Map<String, String>> actualRequirements = jmxCapReqToMap(jmxRequirements);
1:         Assert.assertEquals(expectedRequirements, actualRequirements);
1:     }
1: 
1:     @Test
0:     public void testGetRevisionsDeclaredCapabilities() throws IOException {
0:         BundleWiringStateMBean brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         BundleRevisions revisions = a.adapt(BundleRevisions.class);
1: 
1:         Assert.assertEquals("Precondition", 1, revisions.getRevisions().size());
1: 
0:         TabularData jmxCapabilitiesTable = brsMBean.getRevisionsDeclaredCapabilities(a.getBundleId(), BundleWiringStateMBean.PACKAGE_NAMESPACE);
1:         Assert.assertEquals(1, jmxCapabilitiesTable.size());
1: 
0:         List<BundleCapability> capabilities = revisions.getRevisions().iterator().next().getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE);
1:         CompositeData jmxRevCapabilities = (CompositeData) jmxCapabilitiesTable.values().iterator().next();
1:         CompositeData[] jmxCapabilities = (CompositeData[]) jmxRevCapabilities.get(BundleWiringStateMBean.CAPABILITIES);
1: 
1:         Map<Map<String, Object>, Map<String, String>> expectedCapabilities = capabilitiesToMap(capabilities);
1:         Map<Map<String, Object>, Map<String, String>> actualCapabilities = jmxCapReqToMap(jmxCapabilities);
1:         Assert.assertEquals(expectedCapabilities, actualCapabilities);
1:     }
1: 
1:     @Test
commit:307fdbc
/////////////////////////////////////////////////////////////////////////
0:             //new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
0:             //new TimeoutOption( 0 ),
/////////////////////////////////////////////////////////////////////////
1: 
1:         Map<Map<String, Object>, Map<String, String>> expectedRequirements = requirementsToMap(requirements);
1:         Map<Map<String, Object>, Map<String, String>> actualRequirements = jmxCapReqToMap(jmxRequirements);
1:         Assert.assertEquals(expectedRequirements, actualRequirements);
1:     }
1: 
1:     @Test
0:     public void testGetCurrentRevisionDeclaredCapabilities() throws IOException {
0:         BundleWiringStateMBean brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         BundleRevision br = a.adapt(BundleRevision.class);
1: 
1:         List<BundleCapability> capabilities = br.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE);
0:         CompositeData[] jmxCapabilities = brsMBean.getCurrentRevisionDeclaredCapabilities(a.getBundleId(), BundleWiringStateMBean.PACKAGE_NAMESPACE);
1:         Assert.assertEquals(capabilities.size(), jmxCapabilities.length);
1: 
1:         Map<Map<String, Object>, Map<String, String>> expectedCapabilities = capabilitiesToMap(capabilities);
1:         Map<Map<String, Object>, Map<String, String>> actualCapabilities = jmxCapReqToMap(jmxCapabilities);
1:         Assert.assertEquals(expectedCapabilities, actualCapabilities);
commit:2d53ea1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework.wiring;
1: 
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
0: import static org.ops4j.pax.exam.CoreOptions.provision;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.newBundle;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.withBnd;
1: 
0: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.aries.jmx.AbstractIntegrationTest;
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
0: import org.ops4j.pax.exam.junit.Configuration;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleRequirement;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.framework.wiring.BundleWire;
1: import org.osgi.framework.wiring.BundleWiring;
0: import org.osgi.jmx.framework.PackageStateMBean;
1: import org.osgi.jmx.framework.wiring.BundleWiringStateMBean;
1: 
1: public class BundleWiringStateMBeanTest extends AbstractIntegrationTest {
0:     @Configuration
0:     public static Option[] configuration() {
0:         return testOptions(
0:             // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
0:             // new TimeoutOption( 0 ),
1: 
0:             PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0:             CoreOptions.equinox().version("3.7.0.v20110613"),
0:             paxLogging("INFO"),
1: 
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             mavenBundle("org.osgi", "org.osgi.compendium"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.api"),
0:             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard"),
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:             provision(newBundle()
0:                     .add(org.apache.aries.jmx.test.bundlea.Activator.class)
0:                     .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
0:                     .add(org.apache.aries.jmx.test.bundlea.impl.A.class)
0:                     .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlea")
0:                     .set(Constants.BUNDLE_VERSION, "2.0.0")
0:                     .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.bundlea.api;version=2.0.0")
0:                     .set(Constants.IMPORT_PACKAGE,
0:                             "org.osgi.framework;version=1.5.0,org.osgi.util.tracker,org.apache.aries.jmx.test.bundleb.api;version=1.1.0;resolution:=optional" +
0:                             ",org.osgi.service.cm")
0:                     .set(Constants.BUNDLE_ACTIVATOR,
0:                             org.apache.aries.jmx.test.bundlea.Activator.class.getName())
0:                     .build(withBnd())),
0:             provision(newBundle()
0:                     .add(org.apache.aries.jmx.test.bundleb.Activator.class)
0:                     .add(org.apache.aries.jmx.test.bundleb.api.InterfaceB.class)
0:                     .add(org.apache.aries.jmx.test.bundleb.api.MSF.class)
0:                     .add(org.apache.aries.jmx.test.bundleb.impl.B.class)
0:                     .set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.aries.jmx.test.bundleb")
0:                     .set(Constants.BUNDLE_VERSION, "1.0.0")
0:                     .set(Constants.EXPORT_PACKAGE,"org.apache.aries.jmx.test.bundleb.api;version=1.1.0")
0:                     .set(Constants.IMPORT_PACKAGE,"org.osgi.framework;version=1.5.0,org.osgi.util.tracker," +
0:                             "org.osgi.service.cm,org.apache.aries.jmx.test.fragmentc")
0:                     .set(Constants.BUNDLE_ACTIVATOR,
0:                             org.apache.aries.jmx.test.bundleb.Activator.class.getName())
0:                     .build(withBnd())),
0:             provision(newBundle()
0:                     .add(org.apache.aries.jmx.test.fragmentc.C.class)
0:                     .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.fragc")
0:                     .set(Constants.FRAGMENT_HOST, "org.apache.aries.jmx.test.bundlea")
0:                     .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.fragmentc")
0:                     .build(withBnd())),
0:             provision(newBundle()
0:                     .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundled")
0:                     .set(Constants.BUNDLE_VERSION, "3.0.0")
0:                     .set(Constants.REQUIRE_BUNDLE, "org.apache.aries.jmx.test.bundlea;bundle-version=2.0.0")
0:                     .build(withBnd()))
1:             );
1: 
1:     }
1: 
0:     @Override
1:     public void doSetUp() throws Exception {
0:         waitForMBean(new ObjectName(PackageStateMBean.OBJECTNAME));
1:     }
1: 
1:     @Test
0:     public void testGetCurrentRevisionDeclaredRequirements() throws IOException {
0:         BundleWiringStateMBean brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         BundleRevision br = a.adapt(BundleRevision.class);
1: 
1:         List<BundleRequirement> requirements = br.getDeclaredRequirements(BundleRevision.PACKAGE_NAMESPACE);
0:         CompositeData[] jmxRequirements = brsMBean.getCurrentRevisionDeclaredRequirements(a.getBundleId(), BundleWiringStateMBean.PACKAGE_NAMESPACE);
1:         Assert.assertEquals(requirements.size(), jmxRequirements.length);
0:         // TODO more test content
1:     }
1: 
1:     @Test
0:     public void testGetCurrentWiring() throws IOException {
0:         BundleWiringStateMBean brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         CompositeData jmxWiring = brsMBean.getCurrentWiring(a.getBundleId(), BundleWiringStateMBean.PACKAGE_NAMESPACE);
1: 
1:         Assert.assertEquals(BundleWiringStateMBean.BUNDLE_WIRING_TYPE, jmxWiring.getCompositeType());
0:         Assert.assertEquals(a.getBundleId(), jmxWiring.get(BundleWiringStateMBean.BUNDLE_ID));
1: 
0:         BundleWiring bw = a.adapt(BundleWiring.class);
1:         assertBundleWiring(bw, jmxWiring);
1:     }
1: 
1:     private void assertBundleWiring(BundleWiring bundleWiring, CompositeData jmxWiring) {
1:         CompositeData[] jmxCapabilities = (CompositeData[]) jmxWiring.get(BundleWiringStateMBean.CAPABILITIES);
1:         List<BundleCapability> capabilities = bundleWiring.getCapabilities(BundleRevision.PACKAGE_NAMESPACE);
1:         Assert.assertEquals(capabilities.size(), jmxCapabilities.length);
1: 
1:         Map<Map<String, Object>, Map<String, String>> expectedCapabilities = capabilitiesToMap(capabilities);
1:         Map<Map<String, Object>, Map<String, String>> actualCapabilities = jmxCapReqToMap(jmxCapabilities);
1:         Assert.assertEquals(expectedCapabilities, actualCapabilities);
1: 
1:         CompositeData[] jmxRequirements = (CompositeData[]) jmxWiring.get(BundleWiringStateMBean.REQUIREMENTS);
1:         List<BundleRequirement> requirements = bundleWiring.getRequirements(BundleRevision.PACKAGE_NAMESPACE);
1:         Assert.assertEquals(requirements.size(), jmxRequirements.length);
1: 
1:         Map<Map<String, Object>, Map<String, String>> expectedRequirements = requirementsToMap(requirements);
1:         Map<Map<String, Object>, Map<String, String>> actualRequirements = jmxCapReqToMap(jmxRequirements);
1:         Assert.assertEquals(expectedRequirements, actualRequirements);
1: 
1:         List<BundleWire> requiredWires = bundleWiring.getRequiredWires(BundleRevision.PACKAGE_NAMESPACE);
1:         CompositeData[] jmxRequiredWires = (CompositeData[]) jmxWiring.get(BundleWiringStateMBean.REQUIRED_WIRES);
1:         Assert.assertEquals(requiredWires.size(), jmxRequiredWires.length);
1: 
1:         Set<List<Object>> expectedRequiredWires = new HashSet<List<Object>>();
1:         for (BundleWire wire : requiredWires) {
1:             List<Object> data = new ArrayList<Object>();
1: 
1:             data.add(wire.getCapability().getRevision().getBundle().getBundleId());
1:             data.add(wire.getCapability().getAttributes());
1:             data.add(wire.getCapability().getDirectives());
1:             data.add(wire.getRequirement().getRevision().getBundle().getBundleId());
1:             data.add(wire.getRequirement().getAttributes());
1:             data.add(wire.getRequirement().getDirectives());
1:             expectedRequiredWires.add(data);
1:         }
1: 
1:         Set<List<Object>> actualRequiredWires = new HashSet<List<Object>>();
1:         for (CompositeData wire : jmxRequiredWires) {
1:             List<Object> data = new ArrayList<Object>();
1:             data.add(wire.get(BundleWiringStateMBean.PROVIDER_BUNDLE_ID));
1:             // TODO bundle revision id
1:             data.add(getJmxAttributes((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_CAPABILITY)));
1:             data.add(getJmxDirectives((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_CAPABILITY)));
1:             data.add(wire.get(BundleWiringStateMBean.REQUIRER_BUNDLE_ID));
1:             data.add(getJmxAttributes((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_REQUIREMENT)));
1:             data.add(getJmxDirectives((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_REQUIREMENT)));
1:             actualRequiredWires.add(data);
1:         }
1:         Assert.assertEquals(expectedRequiredWires, actualRequiredWires);
1: 
1:         List<BundleWire> providedWires = bundleWiring.getProvidedWires(BundleRevision.PACKAGE_NAMESPACE);
1:         CompositeData[] jmxProvidedWires = (CompositeData []) jmxWiring.get(BundleWiringStateMBean.PROVIDED_WIRES);
1:         Assert.assertEquals(providedWires.size(), jmxProvidedWires.length);
1: 
1:         HashSet<List<Object>> expectedProvidedWires = new HashSet<List<Object>>();
1:         for (BundleWire wire : providedWires) {
1:             List<Object> data = new ArrayList<Object>();
1:             data.add(wire.getCapability().getRevision().getBundle().getBundleId());
1:             data.add(wire.getCapability().getAttributes());
1:             data.add(wire.getCapability().getDirectives());
1:             data.add(wire.getRequirement().getRevision().getBundle().getBundleId());
1:             data.add(wire.getRequirement().getAttributes());
1:             data.add(wire.getRequirement().getDirectives());
1:             expectedProvidedWires.add(data);
1:         }
1: 
1:         Set<List<Object>> actualProvidedWires = new HashSet<List<Object>>();
1:         for (CompositeData wire : jmxProvidedWires) {
1:             List<Object> data = new ArrayList<Object>();
1:             data.add(wire.get(BundleWiringStateMBean.PROVIDER_BUNDLE_ID));
1:             data.add(getJmxAttributes((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_CAPABILITY)));
1:             data.add(getJmxDirectives((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_CAPABILITY)));
1:             data.add(wire.get(BundleWiringStateMBean.REQUIRER_BUNDLE_ID));
1:             data.add(getJmxAttributes((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_REQUIREMENT)));
1:             data.add(getJmxDirectives((CompositeData) wire.get(BundleWiringStateMBean.BUNDLE_REQUIREMENT)));
1:             actualProvidedWires.add(data);
1:         }
1:         Assert.assertEquals(expectedProvidedWires, actualProvidedWires);
1:     }
1: 
1:     @Test
1:     public void testCurrentWiringClosure() throws Exception {
0:         BundleWiringStateMBean brsMBean = getMBean(BundleWiringStateMBean.OBJECTNAME, BundleWiringStateMBean.class);
1: 
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         TabularData jmxWiringClosure = brsMBean.getCurrentWiringClosure(a.getBundleId(), BundleWiringStateMBean.PACKAGE_NAMESPACE);
1: 
0:         CompositeData jmxWiringA = jmxWiringClosure.get(new Object [] {a.getBundleId(), 0});
0:         assertBundleWiring(a.adapt(BundleWiring.class), jmxWiringA);
1: 
1:         Bundle b = context().getBundleByName("org.apache.aries.jmx.test.bundleb");
1:         int bRevID = findRevisionID(jmxWiringA, b);
1:         CompositeData jmxWiringB = jmxWiringClosure.get(new Object [] {b.getBundleId(), bRevID});
0:         assertBundleWiring(b.adapt(BundleWiring.class), jmxWiringB);
1: 
1:         Bundle cm = context().getBundleByName("org.apache.felix.configadmin");
1:         int cmRevID = findRevisionID(jmxWiringA, cm);
1:         CompositeData jmxWiringCM = jmxWiringClosure.get(new Object [] {cm.getBundleId(), cmRevID});
0:         assertBundleWiring(cm.adapt(BundleWiring.class), jmxWiringCM);
1: 
1:         Bundle sb = context().getBundle(0);
1:         int sbRevID = findRevisionID(jmxWiringA, sb);
1:         CompositeData jmxWiringSB = jmxWiringClosure.get(new Object [] {sb.getBundleId(), sbRevID});
0:         assertBundleWiring(sb.adapt(BundleWiring.class), jmxWiringSB);
1:     }
1: 
1:     private int findRevisionID(CompositeData jmxWiring, Bundle bundle) {
1:         CompositeData[] requiredWires = (CompositeData []) jmxWiring.get(BundleWiringStateMBean.REQUIRED_WIRES);
1:         for (CompositeData req : requiredWires) {
1:             if (new Long(bundle.getBundleId()).equals(req.get(BundleWiringStateMBean.PROVIDER_BUNDLE_ID))) {
1:                 return (Integer) req.get(BundleWiringStateMBean.PROVIDER_BUNDLE_REVISION_ID);
1:             }
1:         }
1:         return -1;
1:     }
1: 
1:     private Map<Map<String, Object>, Map<String, String>> capabilitiesToMap(List<BundleCapability> capabilities) {
1:         Map<Map<String, Object>, Map<String, String>> map = new HashMap<Map<String,Object>, Map<String,String>>();
1:         for (BundleCapability cap : capabilities) {
1:             map.put(cap.getAttributes(), cap.getDirectives());
1:         }
1:         return map;
1:     }
1: 
1:     private Map<Map<String, Object>, Map<String, String>> requirementsToMap(List<BundleRequirement> requirements) {
1:         Map<Map<String, Object>, Map<String, String>> map = new HashMap<Map<String,Object>, Map<String,String>>();
1:         for (BundleRequirement req : requirements) {
1:             map.put(req.getAttributes(), req.getDirectives());
1:         }
1:         return map;
1:     }
1: 
1:     private Map<Map<String, Object>, Map<String, String>> jmxCapReqToMap(CompositeData[] jmxCapabilitiesOrRequirements) {
1:         Map<Map<String, Object>, Map<String, String>> actualCapabilities = new HashMap<Map<String,Object>, Map<String,String>>();
1:         for (CompositeData jmxCapReq : jmxCapabilitiesOrRequirements) {
1:             Map<String, Object> aMap = getJmxAttributes(jmxCapReq);
1:             Map<String, String> dMap = getJmxDirectives(jmxCapReq);
1:             actualCapabilities.put(aMap, dMap);
1:         }
1:         return actualCapabilities;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private Map<String, Object> getJmxAttributes(CompositeData jmxCapReq) {
1:         TabularData jmxAttributes = (TabularData) jmxCapReq.get(BundleWiringStateMBean.ATTRIBUTES);
1:         Map<String, Object> aMap = new HashMap<String, Object>();
1:         for (CompositeData jmxAttr : (Collection<CompositeData>) jmxAttributes.values()) {
1:             PropertyData<Object> pd = PropertyData.from(jmxAttr);
0:             aMap.put(pd.getKey(), pd.getValue());
1:         }
1:         return aMap;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private Map<String, String> getJmxDirectives(CompositeData jmxCapReq) {
1:         TabularData jmxDirectives = (TabularData) jmxCapReq.get(BundleWiringStateMBean.DIRECTIVES);
1:         Map<String, String> dMap = new HashMap<String, String>();
1:         for (CompositeData jmxDir : (Collection<CompositeData>) jmxDirectives.values()) {
1:             dMap.put((String) jmxDir.get(BundleWiringStateMBean.KEY), (String) jmxDir.get(BundleWiringStateMBean.VALUE));
1:         }
1:         return dMap;
1:     }
1: }
============================================================================