1:4428c94: /**
1:4428c94:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:4428c94:  *  contributor license agreements.  See the NOTICE file distributed with
1:4428c94:  *  this work for additional information regarding copyright ownership.
1:4428c94:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:4428c94:  *  (the "License"); you may not use this file except in compliance with
1:4428c94:  *  the License.  You may obtain a copy of the License at
1:4428c94:  *
1:4428c94:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4428c94:  *
1:4428c94:  *  Unless required by applicable law or agreed to in writing, software
1:4428c94:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:4428c94:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4428c94:  *  See the License for the specific language governing permissions and
1:4428c94:  *  limitations under the License.
1:4428c94:  */
1:f520fd5: package org.apache.aries.blueprint.jexl.evaluator;
1:b13e703: 
1:b13e703: import java.util.Collection;
1:b13e703: import java.util.Dictionary;
1:b13e703: import java.util.Map;
1:b13e703: import java.util.Set;
1:b13e703: 
1:f520fd5: import org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator;
1:b13e703: import org.slf4j.Logger;
1:b13e703: import org.slf4j.LoggerFactory;
1:b13e703: 
1:b13e703: public class JexlPropertyEvaluator implements PropertyEvaluator {
1:b13e703: 
1:b13e703:     private static final Logger LOGGER = LoggerFactory.getLogger(JexlPropertyEvaluator.class);
1:b13e703:     
1:b13e703:     private JexlExpressionParser jexlParser;
1:b13e703:     private Dictionary<String, String> properties;
1:b13e703:     
1:b13e703:     public String evaluate(String expression, Dictionary<String, String> properties) {
1:b13e703:         JexlExpressionParser parser = getJexlParser();
1:b13e703:         this.properties = properties;
1:b13e703: 
1:b13e703:         Object obj;
1:b13e703:         try {
1:b13e703:             obj = parser.evaluate(expression);
1:b13e703:             if (obj!=null) {
1:b13e703:                 return obj.toString();
1:b13e703:             }
1:b13e703:         } catch (Exception e) {
1:b13e703:             LOGGER.info("Could not evaluate expression: {}", expression);
1:b13e703:             LOGGER.info("Exception:", e);
1:b13e703:         }
1:b13e703:         
1:b13e703:         return null;
1:b13e703:     }
1:b13e703:     
1:b13e703:     private synchronized JexlExpressionParser getJexlParser() {
1:b13e703:         if (jexlParser == null) {
1:b13e703:             jexlParser = new JexlExpressionParser(toMap());
1:b13e703:         }
1:b13e703:         return jexlParser;
1:b13e703:     }
1:b13e703: 
1:b13e703:     private Map<String, Object> toMap() {
1:b13e703:         return new Map<String, Object>() {
1:b13e703:             public boolean containsKey(Object o) {
1:b13e703:                 return properties.get(o) != null;
1:b13e703:             }
1:b13e703:             
1:b13e703:             public Object get(Object o) {
1:b13e703:                 return properties.get(o);
1:b13e703:             }
1:b13e703:             
1:b13e703:             // following are not important
1:b13e703:             public Object put(String s, Object o) {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703:             
1:b13e703:             public int size() {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703: 
1:b13e703:             public boolean isEmpty() {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703: 
1:b13e703:             public boolean containsValue(Object o) {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703: 
1:b13e703:             public Object remove(Object o) {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703: 
1:b13e703:             public void putAll(Map<? extends String, ? extends Object> map) {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703: 
1:b13e703:             public void clear() {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703: 
1:b13e703:             public Set<String> keySet() {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703: 
1:b13e703:             public Collection<Object> values() {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703: 
1:b13e703:             public Set<Entry<String, Object>> entrySet() {
1:b13e703:                 throw new UnsupportedOperationException();
1:b13e703:             }
1:b13e703:         };
1:b13e703:     }
1:b13e703: }
============================================================================
author:J. Daniel Kulp
-------------------------------------------------------------------------------
commit:a28f739
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:4428c94
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:f520fd5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.jexl.evaluator;
1: import org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator;
commit:b13e703
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.ext.evaluator.jexl;
1: 
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.Map;
1: import java.util.Set;
1: 
0: import org.apache.aries.blueprint.ext.PropertyEvaluator;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JexlPropertyEvaluator implements PropertyEvaluator {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(JexlPropertyEvaluator.class);
1:     
1:     private JexlExpressionParser jexlParser;
1:     private Dictionary<String, String> properties;
1:     
0:     @Override
1:     public String evaluate(String expression, Dictionary<String, String> properties) {
1:         JexlExpressionParser parser = getJexlParser();
1:         this.properties = properties;
1: 
1:         Object obj;
1:         try {
1:             obj = parser.evaluate(expression);
1:             if (obj!=null) {
1:                 return obj.toString();
1:             }
1:         } catch (Exception e) {
1:             LOGGER.info("Could not evaluate expression: {}", expression);
1:             LOGGER.info("Exception:", e);
1:         }
1:         
1:         return null;
1:     }
1:     
1:     private synchronized JexlExpressionParser getJexlParser() {
1:         if (jexlParser == null) {
1:             jexlParser = new JexlExpressionParser(toMap());
1:         }
1:         return jexlParser;
1:     }
1: 
1:     private Map<String, Object> toMap() {
1:         return new Map<String, Object>() {
0:             @Override
1:             public boolean containsKey(Object o) {
1:                 return properties.get(o) != null;
1:             }
1:             
0:             @Override
1:             public Object get(Object o) {
1:                 return properties.get(o);
1:             }
1:             
1:             // following are not important
0:             @Override
1:             public Object put(String s, Object o) {
1:                 throw new UnsupportedOperationException();
1:             }
1:             
0:             @Override
1:             public int size() {
1:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             @Override
1:             public boolean isEmpty() {
1:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             @Override
1:             public boolean containsValue(Object o) {
1:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             @Override
1:             public Object remove(Object o) {
1:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             @Override
1:             public void putAll(Map<? extends String, ? extends Object> map) {
1:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             @Override
1:             public void clear() {
1:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             @Override
1:             public Set<String> keySet() {
1:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             @Override
1:             public Collection<Object> values() {
1:                 throw new UnsupportedOperationException();
1:             }
1: 
0:             @Override
1:             public Set<Entry<String, Object>> entrySet() {
1:                 throw new UnsupportedOperationException();
1:             }
1:         };
1:     }
1: }
============================================================================