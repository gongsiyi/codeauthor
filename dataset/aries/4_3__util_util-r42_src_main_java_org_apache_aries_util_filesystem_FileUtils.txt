1:ee05dc9: /**
1:ee05dc9:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:ee05dc9:  *  contributor license agreements.  See the NOTICE file distributed with
1:ee05dc9:  *  this work for additional information regarding copyright ownership.
1:ee05dc9:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:ee05dc9:  *  (the "License"); you may not use this file except in compliance with
1:ee05dc9:  *  the License.  You may obtain a copy of the License at
1:ee05dc9:  *
1:ee05dc9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ee05dc9:  *
1:ee05dc9:  *  Unless required by applicable law or agreed to in writing, software
1:ee05dc9:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:ee05dc9:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee05dc9:  *  See the License for the specific language governing permissions and
1:ee05dc9:  *  limitations under the License.
1:ee05dc9:  */
1:910fec0: package org.apache.aries.util.filesystem;
1:b5cede6: 
1:b5cede6: import java.io.File;
1:b5cede6: import java.io.IOException;
1:b5cede6: import java.net.URI;
1:b5cede6: import java.util.ArrayList;
1:b5cede6: import java.util.List;
1:b5cede6: 
1:910fec0: import org.apache.aries.util.manifest.BundleManifest;
1:b5cede6: 
1:b5cede6: public class FileUtils {
1:7937e00: 
1:b5cede6:   /**
1:b5cede6:    * Check whether a file is a bundle.
1:b5cede6:    * @param file the file path
1:7937e00:    * @return true if the file is a bundle, false else
1:b5cede6:    */
1:b5cede6:   public static boolean isBundle(File file) {
1:b5cede6:     BundleManifest bm = BundleManifest.fromBundle(file);
1:b5cede6:     return ((bm != null) && (bm.isValid()));
1:b5cede6:   }
1:b5cede6: 
1:b5cede6:   /**
1:7937e00:    * Get a list of URLs for the bundles under the parent URL
1:7937e00:    * @param sourceDir The parent URL
1:7937e00:    * @return the list of URLs for the bundles
1:b5cede6:    * @throws IOException
1:b5cede6:    */
1:b5cede6:   public static  List<URI> getBundlesRecursive(URI sourceDir) throws IOException {
1:b5cede6:     List<URI> filesFound = new ArrayList<URI>();
1:b5cede6:     if (sourceDir == null) {
1:b5cede6:       return filesFound;
1:b5cede6:     } if (sourceDir != null) {
1:b5cede6:       File sourceFile = new File(sourceDir);
1:b5cede6:       if (sourceFile.isFile()) {
1:b5cede6:         if (isBundle(sourceFile)) {
1:b5cede6:           filesFound.add(sourceDir);
1:b5cede6:         }
1:b5cede6:       } else if (sourceFile.isDirectory()) {
1:b5cede6:         File[] subFiles = sourceFile.listFiles();
1:b5cede6:         if ((subFiles !=null) && (subFiles.length >0)) {
1:b5cede6:           for (File file : subFiles) {
1:b5cede6:             filesFound.addAll(getBundlesRecursive(file.toURI()));
1:b5cede6:           }
1:b5cede6:         }
1:b5cede6:       }
1:b5cede6:     }
1:b5cede6:     return filesFound;
1:b5cede6:   }
1:b5cede6: 
1:b5cede6: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:7937e00
/////////////////////////////////////////////////////////////////////////
1: 
1:    * @return true if the file is a bundle, false else
/////////////////////////////////////////////////////////////////////////
1:    * Get a list of URLs for the bundles under the parent URL
1:    * @param sourceDir The parent URL
1:    * @return the list of URLs for the bundles
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.BundleManifest;
author:Emily Jiang
-------------------------------------------------------------------------------
commit:ee05dc9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
commit:b5cede6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import org.apache.aries.application.utils.manifest.BundleManifest;
1: 
1: public class FileUtils {
1:   /**
1:    * Check whether a file is a bundle.
1:    * @param file the file path
0:    * @return
1:    */
1:   public static boolean isBundle(File file) {
1:     BundleManifest bm = BundleManifest.fromBundle(file);
1:     return ((bm != null) && (bm.isValid()));
1:   }
1: 
1:   /**
0:    * Get a list of urls for the bundles under the parent url
0:    * @param sourceDir The parent url
0:    * @return
1:    * @throws IOException
1:    */
1:   public static  List<URI> getBundlesRecursive(URI sourceDir) throws IOException {
1:     List<URI> filesFound = new ArrayList<URI>();
1:     if (sourceDir == null) {
1:       return filesFound;
1:     } if (sourceDir != null) {
1:       File sourceFile = new File(sourceDir);
1:       if (sourceFile.isFile()) {
1:         if (isBundle(sourceFile)) {
1:           filesFound.add(sourceDir);
1:         }
1:       } else if (sourceFile.isDirectory()) {
1:         File[] subFiles = sourceFile.listFiles();
1:         if ((subFiles !=null) && (subFiles.length >0)) {
1:           for (File file : subFiles) {
1:             filesFound.addAll(getBundlesRecursive(file.toURI()));
1:           }
1:         }
1:       }
1:     }
1:     return filesFound;
1:   }
1: 
1: }
============================================================================