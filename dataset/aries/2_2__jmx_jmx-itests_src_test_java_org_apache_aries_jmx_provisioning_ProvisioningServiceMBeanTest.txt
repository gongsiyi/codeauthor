1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.provisioning;
25:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.assertNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.options;
1:fdf3952: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG;
1:fdf3952: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE;
1:fdf3952: 
1:fdf3952: import java.io.File;
1:0a8778f: import java.io.FileNotFoundException;
1:fdf3952: import java.io.FileOutputStream;
1:0a8778f: import java.io.IOException;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.jar.JarOutputStream;
1:fdf3952: import java.util.jar.Manifest;
1:fdf3952: import java.util.zip.ZipEntry;
1:fdf3952: 
1:0a8778f: import javax.inject.Inject;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.AbstractIntegrationTest;
1:fdf3952: import org.apache.aries.jmx.codec.PropertyData;
1:fdf3952: import org.junit.Ignore;
1:fdf3952: import org.junit.Test;
1:0a8778f: import org.ops4j.pax.exam.Configuration;
1:fdf3952: import org.ops4j.pax.exam.Option;
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: import org.osgi.jmx.service.provisioning.ProvisioningServiceMBean;
1:fdf3952: import org.osgi.service.provisioning.ProvisioningService;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * 
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ProvisioningServiceMBeanTest extends AbstractIntegrationTest {
1:0a8778f: 	@Inject
1:0a8778f: 	ProvisioningService ps;
1:fdf3952: 
1:fdf3952:     @Configuration
1:0a8778f:     public Option[] configuration() {
1:0a8778f: 		return options(
1:0a8778f: 				jmxRuntime()
1:0a8778f: 				);
3:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Ignore("For now.. Cannot find public repo for org.eclipse.equinox.ip")
1:fdf3952:     @Test
1:0a8778f:     @SuppressWarnings({ "unchecked"})
1:fdf3952:     public void testMBeanInterface() throws Exception {
1:fdf3952:         ProvisioningServiceMBean mbean = getMBean(ProvisioningServiceMBean.OBJECTNAME, ProvisioningServiceMBean.class);
1:fdf3952:         Dictionary<String, Object> info;
1:fdf3952:         
1:fdf3952:         // add information URL (create temp zip file)
1:0a8778f:         File provZip = createProvAgentConfigZip();
1:0a8778f:         mbean.addInformationFromZip(provZip.toURI().toURL().toExternalForm());
1:fdf3952:         
1:0a8778f:         //check the info has been added
1:0a8778f:         info = ps.getInformation();
1:0a8778f:         assertNotNull(info);
1:0a8778f:         assertTrue(info.size() >= 1);
1:0a8778f:         assertProvAgentConfigCorrect(info);
1:0a8778f:         
1:0a8778f:         // test list information
1:0a8778f:         TabularData data = mbean.listInformation();
1:0a8778f:         assertNotNull(data);
1:0a8778f:         assertEquals(JmxConstants.PROPERTIES_TYPE, data.getTabularType());
1:0a8778f:         assertTrue(data.values().size() >= 1);
1:0a8778f:         PropertyData<byte[]> configEntry = PropertyData.from(data.get(new Object[] {PROVISIONING_AGENT_CONFIG }));
1:0a8778f:         assertNotNull(configEntry);
1:0a8778f:         assertArrayEquals(new byte[] { 10, 20, 30 }, configEntry.getValue());
1:0a8778f:         
1:0a8778f:         // test add information
1:0a8778f:         PropertyData<String> reference = PropertyData.newInstance(PROVISIONING_REFERENCE, "rsh://0.0.0.0/provX");
1:0a8778f:         data.put(reference.toCompositeData());
1:0a8778f:         mbean.addInformation(data);
1:0a8778f:         info = ps.getInformation();
1:0a8778f:         assertNotNull(info);
1:0a8778f:         assertTrue(info.size() >= 2);
1:0a8778f:         assertProvAgentConfigCorrect(info);
1:0a8778f:         String ref = (String) info.get(PROVISIONING_REFERENCE);
1:0a8778f:         assertNotNull(ref);
1:0a8778f:         assertEquals("rsh://0.0.0.0/provX", ref);
1:0a8778f:         
1:0a8778f:         // test set information
1:0a8778f:         data.clear();
1:0a8778f:         PropertyData<String> newRef = PropertyData.newInstance(PROVISIONING_REFERENCE, "rsh://0.0.0.0/newProvRef");
1:0a8778f:         data.put(newRef.toCompositeData());
1:0a8778f:         mbean.setInformation(data);
1:0a8778f:         info = ps.getInformation();
1:0a8778f:         assertNotNull(info);
1:0a8778f:         assertTrue(info.size() >= 1);
1:0a8778f:         assertNull(info.get(PROVISIONING_AGENT_CONFIG));
1:0a8778f:         ref = (String) info.get(PROVISIONING_REFERENCE);
1:0a8778f:         assertNotNull(ref);
1:0a8778f:         assertEquals("rsh://0.0.0.0/newProvRef", ref);
1:0a8778f:         
1:0a8778f:     }
1:0a8778f: 
1:0a8778f: 	private void assertProvAgentConfigCorrect(Dictionary<String, Object> info) {
1:0a8778f: 		byte[] config = (byte[]) info.get(PROVISIONING_AGENT_CONFIG);
1:0a8778f:         assertNotNull(config);
1:0a8778f:         assertArrayEquals(new byte[] { 10, 20, 30 }, config);
1:0a8778f: 	}
1:0a8778f: 
1:0a8778f: 	private File createProvAgentConfigZip() throws IOException, FileNotFoundException {
1:0a8778f: 		File  provZip = File.createTempFile("Prov-jmx-itests", ".zip");
1:fdf3952:         Manifest man = new Manifest();
1:fdf3952:         man.getMainAttributes().putValue("Manifest-Version", "1.0");
1:fdf3952:         man.getMainAttributes().putValue("Content-Type", "application/zip");
1:fdf3952:         JarOutputStream jout = new JarOutputStream(new FileOutputStream(provZip), man);
1:fdf3952:         ZipEntry entry = new ZipEntry(PROVISIONING_AGENT_CONFIG);
1:fdf3952:         jout.putNextEntry( entry );
1:fdf3952:         jout.write(new byte[] { 10, 20, 30 });
1:fdf3952:         jout.closeEntry();
1:fdf3952:         jout.flush();
1:fdf3952:         jout.close();
1:fdf3952:         
1:fdf3952:         provZip.deleteOnExit();
1:0a8778f: 		return provZip;
1:0a8778f: 	}
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import javax.inject.Inject;
1: import org.ops4j.pax.exam.Configuration;
/////////////////////////////////////////////////////////////////////////
1: 	@Inject
1: 	ProvisioningService ps;
1:     public Option[] configuration() {
1: 		return options(
1: 				jmxRuntime()
1: 				);
1:     @SuppressWarnings({ "unchecked"})
1:         File provZip = createProvAgentConfigZip();
1:         mbean.addInformationFromZip(provZip.toURI().toURL().toExternalForm());
1:         //check the info has been added
1:         info = ps.getInformation();
1:         assertNotNull(info);
1:         assertTrue(info.size() >= 1);
1:         assertProvAgentConfigCorrect(info);
1:         
1:         // test list information
1:         TabularData data = mbean.listInformation();
1:         assertNotNull(data);
1:         assertEquals(JmxConstants.PROPERTIES_TYPE, data.getTabularType());
1:         assertTrue(data.values().size() >= 1);
1:         PropertyData<byte[]> configEntry = PropertyData.from(data.get(new Object[] {PROVISIONING_AGENT_CONFIG }));
1:         assertNotNull(configEntry);
1:         assertArrayEquals(new byte[] { 10, 20, 30 }, configEntry.getValue());
1:         
1:         // test add information
1:         PropertyData<String> reference = PropertyData.newInstance(PROVISIONING_REFERENCE, "rsh://0.0.0.0/provX");
1:         data.put(reference.toCompositeData());
1:         mbean.addInformation(data);
1:         info = ps.getInformation();
1:         assertNotNull(info);
1:         assertTrue(info.size() >= 2);
1:         assertProvAgentConfigCorrect(info);
1:         String ref = (String) info.get(PROVISIONING_REFERENCE);
1:         assertNotNull(ref);
1:         assertEquals("rsh://0.0.0.0/provX", ref);
1:         
1:         // test set information
1:         data.clear();
1:         PropertyData<String> newRef = PropertyData.newInstance(PROVISIONING_REFERENCE, "rsh://0.0.0.0/newProvRef");
1:         data.put(newRef.toCompositeData());
1:         mbean.setInformation(data);
1:         info = ps.getInformation();
1:         assertNotNull(info);
1:         assertTrue(info.size() >= 1);
1:         assertNull(info.get(PROVISIONING_AGENT_CONFIG));
1:         ref = (String) info.get(PROVISIONING_REFERENCE);
1:         assertNotNull(ref);
1:         assertEquals("rsh://0.0.0.0/newProvRef", ref);
1:         
1:     }
1: 
1: 	private void assertProvAgentConfigCorrect(Dictionary<String, Object> info) {
1: 		byte[] config = (byte[]) info.get(PROVISIONING_AGENT_CONFIG);
1:         assertNotNull(config);
1:         assertArrayEquals(new byte[] { 10, 20, 30 }, config);
1: 	}
1: 
1: 	private File createProvAgentConfigZip() throws IOException, FileNotFoundException {
1: 		File  provZip = File.createTempFile("Prov-jmx-itests", ".zip");
/////////////////////////////////////////////////////////////////////////
1: 		return provZip;
1: 	}
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.provisioning;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_AGENT_CONFIG;
1: import static org.osgi.service.provisioning.ProvisioningService.PROVISIONING_REFERENCE;
1: 
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.util.Dictionary;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: 
0: import javax.management.ObjectName;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.aries.jmx.AbstractIntegrationTest;
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.junit.Ignore;
1: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
1: import org.osgi.jmx.JmxConstants;
1: import org.osgi.jmx.service.provisioning.ProvisioningServiceMBean;
1: import org.osgi.service.provisioning.ProvisioningService;
0: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
1:  * 
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class ProvisioningServiceMBeanTest extends AbstractIntegrationTest {
1: 
1: 
1:     @Configuration
0:     public static Option[] configuration() {
0:         return testOptions(
0:                         CoreOptions.equinox(),
0:                         paxLogging("INFO"),
0:                         mavenBundle("org.osgi", "org.osgi.compendium"), 
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
0:                         mavenBundle("org.apache.aries", "org.apache.aries.util"));
1:     }
1: 
0:     @Override
0:     public void doSetUp() throws Exception {
0:         waitForMBean(new ObjectName(ProvisioningServiceMBean.OBJECTNAME));
1:     }
1: 
1:     @Ignore("For now.. Cannot find public repo for org.eclipse.equinox.ip")
1:     @Test
0:     @SuppressWarnings("unchecked")
1:     public void testMBeanInterface() throws Exception {
1: 
1:         ProvisioningServiceMBean mbean = getMBean(ProvisioningServiceMBean.OBJECTNAME, ProvisioningServiceMBean.class);
0:         assertNotNull(mbean);
1:         
0:         ServiceTracker tracker = new ServiceTracker(bundleContext, ProvisioningService.class.getName(), null);
0:         tracker.open();
0:         ProvisioningService ps = (ProvisioningService) tracker.getService();
0:         assertNotNull(ps);
1:         
1:         Dictionary<String, Object> info;
1:         
1:         // add information URL (create temp zip file)
1:         
0:         File  provZip = File.createTempFile("Prov-jmx-itests", ".zip");
1:         Manifest man = new Manifest();
1:         man.getMainAttributes().putValue("Manifest-Version", "1.0");
1:         man.getMainAttributes().putValue("Content-Type", "application/zip");
1:         JarOutputStream jout = new JarOutputStream(new FileOutputStream(provZip), man);
1:         ZipEntry entry = new ZipEntry(PROVISIONING_AGENT_CONFIG);
1:         jout.putNextEntry( entry );
1:         jout.write(new byte[] { 10, 20, 30 });
1:         jout.closeEntry();
1:         jout.flush();
1:         jout.close();
1:         
1:         provZip.deleteOnExit();
1:         
0:         mbean.addInformationFromZip(provZip.toURL().toExternalForm());
1:         
0:         //check the info has been added
1:         
0:         info = ps.getInformation();
0:         assertNotNull(info);
0:         assertTrue(info.size() >= 1);
0:         byte[] config = (byte[]) info.get(PROVISIONING_AGENT_CONFIG);
0:         assertNotNull(config);
0:         assertArrayEquals(new byte[] { 10, 20, 30 }, config);
1:         
1:         
0:         // test list information
1:         
0:         TabularData data = mbean.listInformation();
0:         assertNotNull(data);
0:         assertEquals(JmxConstants.PROPERTIES_TYPE, data.getTabularType());
0:         assertTrue(data.values().size() >= 1);
0:         PropertyData<byte[]> configEntry = PropertyData.from(data.get(new Object[] {PROVISIONING_AGENT_CONFIG }));
0:         assertNotNull(configEntry);
0:         assertArrayEquals(new byte[] { 10, 20, 30 }, configEntry.getValue());
1: 
1:         
0:         // test add information
1:         
0:         PropertyData<String> reference = PropertyData.newInstance(PROVISIONING_REFERENCE, "rsh://0.0.0.0/provX");
0:         data.put(reference.toCompositeData());
1:         
0:         mbean.addInformation(data);
1:         
0:         info = ps.getInformation();
0:         assertNotNull(info);
0:         assertTrue(info.size() >= 2);
0:         config = (byte[]) info.get(PROVISIONING_AGENT_CONFIG);
0:         assertNotNull(config);
0:         assertArrayEquals(new byte[] { 10, 20, 30 }, config);
0:         String ref = (String) info.get(PROVISIONING_REFERENCE);
0:         assertNotNull(ref);
0:         assertEquals("rsh://0.0.0.0/provX", ref);
1:         
1:         
0:         // test set information
1:         
0:         data.clear();
0:         PropertyData<String> newRef = PropertyData.newInstance(PROVISIONING_REFERENCE, "rsh://0.0.0.0/newProvRef");
0:         data.put(newRef.toCompositeData());
1:         
0:         mbean.setInformation(data);
0:         info = ps.getInformation();
0:         assertNotNull(info);
0:         assertTrue(info.size() >= 1);
0:         assertNull(info.get(PROVISIONING_AGENT_CONFIG));
1:        
0:         ref = (String) info.get(PROVISIONING_REFERENCE);
0:         assertNotNull(ref);
0:         assertEquals("rsh://0.0.0.0/newProvRef", ref);
1:         
1:         
1:     }
1: }
============================================================================