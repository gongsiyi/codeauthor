1:6f4b079: package org.apache.aries.subsystem.scope.impl;
1:6f4b079: 
1:6f4b079: import java.io.DataInputStream;
1:6f4b079: import java.io.DataOutputStream;
1:6f4b079: import java.io.EOFException;
1:6f4b079: import java.io.File;
1:6f4b079: import java.io.FileInputStream;
1:6f4b079: import java.io.FileOutputStream;
1:6f4b079: import java.io.FilenameFilter;
1:6f4b079: import java.io.IOException;
1:6f4b079: import java.util.ArrayList;
1:6f4b079: import java.util.Arrays;
1:6f4b079: import java.util.Collection;
1:6f4b079: import java.util.Collections;
1:6f4b079: import java.util.HashMap;
1:6f4b079: import java.util.List;
1:6f4b079: import java.util.Map;
1:6f4b079: import java.util.SortedMap;
1:6f4b079: import java.util.TreeMap;
1:6f4b079: 
1:6f4b079: import org.apache.aries.subsystem.scope.Scope;
1:6f4b079: import org.apache.aries.subsystem.scope.SharePolicy;
1:6f4b079: import org.osgi.framework.Bundle;
1:6f4b079: import org.osgi.framework.BundleContext;
1:6f4b079: import org.osgi.framework.FrameworkUtil;
1:6f4b079: import org.osgi.framework.InvalidSyntaxException;
1:6f4b079: 
1:6f4b079: public class Scopes {
1:6f4b079: 	private final BundleContext bundleContext;
1:6f4b079: 	private final Map<Bundle, ScopeImpl> bundleToScope = Collections.synchronizedMap(new HashMap<Bundle, ScopeImpl>());
1:6f4b079: 	private final IdGenerator idGenerator;
1:6f4b079: 	private final SortedMap<Long, ScopeImpl> idToScope = Collections.synchronizedSortedMap(new TreeMap<Long, ScopeImpl>());
1:6f4b079: 	
1:6f4b079: 	public Scopes(BundleContext bundleContext) {
1:6f4b079: 		this.bundleContext = bundleContext;
1:6f4b079: 		selectAll();
1:6f4b079: 		for (Bundle bundle : bundleContext.getBundles()) {
1:6f4b079: 			if (contains(bundle)) {
1:6f4b079: 				continue;
1:6f4b079: 			}
1:6f4b079: 			addBundle(bundle);
1:6f4b079: 		}
1:6f4b079: 		if (idToScope.isEmpty()) {
1:6f4b079: 			idGenerator = new IdGenerator(0);
1:6f4b079: 		}
1:6f4b079: 		else {
1:6f4b079: 			idGenerator = new IdGenerator(idToScope.lastKey() + 1);
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void addBundle(Bundle bundle) {
1:6f4b079: 		addBundle(bundle, getRootScope());
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void addBundle(Bundle bundle, ScopeImpl scope) {
1:6f4b079: 		bundleToScope.put(bundle, scope);
1:6f4b079: 		scope.addBundle(bundle);
1:6f4b079: 		insert(scope);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void addScope(ScopeImpl scope) {
1:6f4b079: 		idToScope.put(scope.getId(), scope);
1:6f4b079: 		for (Bundle bundle : scope.getBundles()) {
1:6f4b079: 			bundleToScope.put(bundle, scope);
1:6f4b079: 		}
1:6f4b079: 		ScopeImpl parent = (ScopeImpl)scope.getParent();
1:6f4b079: 		if (parent != null) {
1:6f4b079: 			parent.addChild(scope);
1:6f4b079: 		}
1:6f4b079: 		insert(scope);
1:6f4b079: 		for (Scope child : scope.getChildren()) {
1:6f4b079: 			addScope((ScopeImpl)child);
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void clear() {
1:6f4b079: 		idToScope.clear();
1:6f4b079: 		bundleToScope.clear();
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized boolean contains(Bundle bundle) {
1:6f4b079: 		return bundleToScope.containsKey(bundle);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized ScopeImpl getRootScope() {
1:6f4b079: 		ScopeImpl scope = idToScope.get(0L);
1:6f4b079: 		if (scope == null) {
1:6f4b079: 			scope = new ScopeImpl(0, "root", null, -1, Arrays.asList(bundleContext.getBundles()), new SharePolicies(), this);
1:6f4b079: 			addScope(scope);
1:6f4b079: 		}
1:6f4b079: 		return scope;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized ScopeImpl getScope(Long id) {
1:6f4b079: 		return idToScope.get(id);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized ScopeImpl getScope(Bundle bundle) {
1:6f4b079: 		ScopeImpl scope = bundleToScope.get(bundle);
1:6f4b079: 		if (scope == null) {
1:6f4b079: 			addBundle(bundle);
1:6f4b079: 			scope = getRootScope();
1:6f4b079: 		}
1:6f4b079: 		return scope;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public long nextScopeId() {
1:6f4b079: 		return idGenerator.nextId();
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void removeBundle(Bundle bundle) {
1:6f4b079: 		ScopeImpl scope = bundleToScope.remove(bundle);
1:6f4b079: 		if (scope != null) {
1:6f4b079: 			synchronized (scope) {
1:6f4b079: 				scope.removeBundle(bundle);
1:6f4b079: 			}
1:6f4b079: 			insert(scope);
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	public synchronized void removeScope(ScopeImpl scope) {
1:6f4b079: 		for (Scope child : scope.getChildren()) {
1:6f4b079: 			removeScope((ScopeImpl)child);
1:6f4b079: 		}
1:6f4b079: 		idToScope.remove(scope.getId());
1:6f4b079: 		for (Bundle bundle : scope.getBundles()) {
1:6f4b079: 			bundleToScope.remove(bundle);
1:6f4b079: 		}
1:6f4b079: 		ScopeImpl parent = (ScopeImpl)scope.getParent();
1:6f4b079: 		if (parent != null) {
1:6f4b079: 			parent.removeChild(scope);
1:6f4b079: 		}
1:6f4b079: 		delete(scope);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void delete(ScopeImpl scope) {
1:6f4b079: 		File file = bundleContext.getDataFile("scope" + scope.getId());
1:6f4b079: 		if (file == null) return;
1:6f4b079: 		file.delete();
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void insert(ScopeImpl scope) {
1:6f4b079: 		File file = bundleContext.getDataFile("scope" + scope.getId());
1:6f4b079: 		if (file == null) return;
1:6f4b079: 		DataOutputStream dos = null;
1:6f4b079: 		try {
1:6f4b079: 			dos = new DataOutputStream(new FileOutputStream(file));
1:6f4b079: 			insertScope(scope, dos);
1:6f4b079: 		}
1:6f4b079: 		catch (IOException e) {
1:6f4b079: 			// TODO Log this. Remove print stack trace.
1:6f4b079: 			e.printStackTrace();
1:6f4b079: 		}
1:6f4b079: 		finally {
1:6f4b079: 			if (dos != null) {
1:6f4b079: 				try {
1:6f4b079: 					dos.close();
1:6f4b079: 				}
1:6f4b079: 				catch (IOException e) {}
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void insertBundles(Collection<Bundle> bundles, DataOutputStream dos) throws IOException {
1:6f4b079: 		for (Bundle bundle : bundles) {
1:6f4b079: 			dos.writeLong(bundle.getBundleId());
1:6f4b079: 		}
1:6f4b079: 		dos.writeLong(-1);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void insertScope(ScopeImpl scope, DataOutputStream dos) throws IOException {
1:6f4b079: 		dos.writeLong(scope.getId());
1:6f4b079: 		dos.writeUTF(scope.getName());
1:6f4b079: 		dos.writeUTF(scope.getLocation() == null ? "" : scope.getLocation());
1:6f4b079: 		dos.writeLong(scope.getParent() == null ? -1 : scope.getParent().getId());
1:6f4b079: 		insertBundles(scope.getBundles(), dos);
1:6f4b079: 		insertSharePolicies(scope.getSharePolicies(SharePolicy.TYPE_EXPORT), dos);
1:6f4b079: 		insertSharePolicies(scope.getSharePolicies(SharePolicy.TYPE_IMPORT), dos);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void insertSharePolicies(Map<String, List<SharePolicy>> sharePolicies, DataOutputStream dos) throws IOException {
1:6f4b079: 		for (String namespace : sharePolicies.keySet()) {
1:6f4b079: 			insertSharePolicies(sharePolicies.get(namespace), dos);
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void insertSharePolicies(List<SharePolicy> sharePolicies, DataOutputStream dos) throws IOException {
1:6f4b079: 		for (SharePolicy sharePolicy : sharePolicies) {
1:6f4b079: 			dos.writeUTF(sharePolicy.getType());
1:6f4b079: 			dos.writeUTF(sharePolicy.getNamespace());
1:6f4b079: 			dos.writeUTF(sharePolicy.getFilter().toString());
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private void selectAll() {
1:6f4b079: 		File file = bundleContext.getDataFile("");
1:6f4b079: 		if (file == null) {
1:6f4b079: 			return;
1:6f4b079: 		}
1:6f4b079: 		File[] files = file.listFiles(new FilenameFilter() {
1:6f4b079: 			public boolean accept(File dir, String name) {
1:6f4b079: 				return name.startsWith("scope");
1:6f4b079: 			}
1:6f4b079: 		});
1:6f4b079: 		if (files == null || files.length == 0) {
1:6f4b079: 			return;
1:6f4b079: 		}
1:6f4b079: 		for (File f : files) {
1:6f4b079: 			DataInputStream dis = null; 
1:6f4b079: 			try {
1:6f4b079: 				dis = new DataInputStream(new FileInputStream(f));
1:6f4b079: 				addScope(selectScope(dis, bundleContext));
1:6f4b079: 			}
1:6f4b079: 			catch (Exception e) {
1:6f4b079: 				// TODO Log this. Remove print stack trace.
1:6f4b079: 				e.printStackTrace();
1:6f4b079: 			}
1:6f4b079: 			finally {
1:6f4b079: 				if (dis != null) {
1:6f4b079: 					try {
1:6f4b079: 						dis.close();
1:6f4b079: 					}
1:6f4b079: 					catch (IOException e) {}
1:6f4b079: 				}
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private Collection<Bundle> selectBundles(DataInputStream dis, BundleContext bundleContext) throws IOException {
1:6f4b079: 		Collection<Bundle> bundles = new ArrayList<Bundle>();
1:6f4b079: 		long bundleId;
1:6f4b079: 		while ((bundleId = dis.readLong()) != -1) {
1:6f4b079: 			Bundle bundle = bundleContext.getBundle(bundleId);
1:6f4b079: 			if (bundle != null) {
1:6f4b079: 				bundles.add(bundle);
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return bundles;
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private ScopeImpl selectScope(DataInputStream dis, BundleContext bundleContext) throws InvalidSyntaxException, IOException {
1:6f4b079: 		long id = dis.readLong();
1:6f4b079: 		String name = dis.readUTF();
1:6f4b079: 		String location = dis.readUTF();
1:6f4b079: 		long parentId = dis.readLong();
1:6f4b079: 		Collection<Bundle> bundles = selectBundles(dis, bundleContext);
1:6f4b079: 		SharePolicies sharePolicies = selectSharePolicies(dis);
1:6f4b079: 		return new ScopeImpl(id, name, location, parentId, bundles, sharePolicies, this);
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	private SharePolicies selectSharePolicies(DataInputStream dis) throws InvalidSyntaxException, IOException {
1:6f4b079: 		SharePolicies sharePolicies = new SharePolicies();
1:6f4b079: 		while (true) {
1:6f4b079: 			try {
1:6f4b079: 				String type = dis.readUTF();
1:6f4b079: 				String namespace = dis.readUTF();
1:6f4b079: 				String filter = dis.readUTF();
1:6f4b079: 				sharePolicies.addSharePolicy(new SharePolicy(type, namespace, FrameworkUtil.createFilter(filter)));
1:6f4b079: 			}
1:6f4b079: 			catch (EOFException e) {
1:6f4b079: 				break;
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		return sharePolicies;
1:6f4b079: 	}
1:6f4b079: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.impl;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.EOFException;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.FilenameFilter;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.SortedMap;
1: import java.util.TreeMap;
1: 
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.apache.aries.subsystem.scope.SharePolicy;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: 
1: public class Scopes {
1: 	private final BundleContext bundleContext;
1: 	private final Map<Bundle, ScopeImpl> bundleToScope = Collections.synchronizedMap(new HashMap<Bundle, ScopeImpl>());
1: 	private final IdGenerator idGenerator;
1: 	private final SortedMap<Long, ScopeImpl> idToScope = Collections.synchronizedSortedMap(new TreeMap<Long, ScopeImpl>());
1: 	
1: 	public Scopes(BundleContext bundleContext) {
1: 		this.bundleContext = bundleContext;
1: 		selectAll();
1: 		for (Bundle bundle : bundleContext.getBundles()) {
1: 			if (contains(bundle)) {
1: 				continue;
1: 			}
1: 			addBundle(bundle);
1: 		}
1: 		if (idToScope.isEmpty()) {
1: 			idGenerator = new IdGenerator(0);
1: 		}
1: 		else {
1: 			idGenerator = new IdGenerator(idToScope.lastKey() + 1);
1: 		}
1: 	}
1: 	
1: 	public synchronized void addBundle(Bundle bundle) {
1: 		addBundle(bundle, getRootScope());
1: 	}
1: 	
1: 	public synchronized void addBundle(Bundle bundle, ScopeImpl scope) {
1: 		bundleToScope.put(bundle, scope);
1: 		scope.addBundle(bundle);
1: 		insert(scope);
1: 	}
1: 	
1: 	public synchronized void addScope(ScopeImpl scope) {
1: 		idToScope.put(scope.getId(), scope);
1: 		for (Bundle bundle : scope.getBundles()) {
1: 			bundleToScope.put(bundle, scope);
1: 		}
1: 		ScopeImpl parent = (ScopeImpl)scope.getParent();
1: 		if (parent != null) {
1: 			parent.addChild(scope);
1: 		}
1: 		insert(scope);
1: 		for (Scope child : scope.getChildren()) {
1: 			addScope((ScopeImpl)child);
1: 		}
1: 	}
1: 	
1: 	public synchronized void clear() {
1: 		idToScope.clear();
1: 		bundleToScope.clear();
1: 	}
1: 	
1: 	public synchronized boolean contains(Bundle bundle) {
1: 		return bundleToScope.containsKey(bundle);
1: 	}
1: 	
1: 	public synchronized ScopeImpl getRootScope() {
1: 		ScopeImpl scope = idToScope.get(0L);
1: 		if (scope == null) {
1: 			scope = new ScopeImpl(0, "root", null, -1, Arrays.asList(bundleContext.getBundles()), new SharePolicies(), this);
1: 			addScope(scope);
1: 		}
1: 		return scope;
1: 	}
1: 	
1: 	public synchronized ScopeImpl getScope(Long id) {
1: 		return idToScope.get(id);
1: 	}
1: 	
1: 	public synchronized ScopeImpl getScope(Bundle bundle) {
1: 		ScopeImpl scope = bundleToScope.get(bundle);
1: 		if (scope == null) {
1: 			addBundle(bundle);
1: 			scope = getRootScope();
1: 		}
1: 		return scope;
1: 	}
1: 	
1: 	public long nextScopeId() {
1: 		return idGenerator.nextId();
1: 	}
1: 	
1: 	public synchronized void removeBundle(Bundle bundle) {
1: 		ScopeImpl scope = bundleToScope.remove(bundle);
1: 		if (scope != null) {
1: 			synchronized (scope) {
1: 				scope.removeBundle(bundle);
1: 			}
1: 			insert(scope);
1: 		}
1: 	}
1: 	
1: 	public synchronized void removeScope(ScopeImpl scope) {
1: 		for (Scope child : scope.getChildren()) {
1: 			removeScope((ScopeImpl)child);
1: 		}
1: 		idToScope.remove(scope.getId());
1: 		for (Bundle bundle : scope.getBundles()) {
1: 			bundleToScope.remove(bundle);
1: 		}
1: 		ScopeImpl parent = (ScopeImpl)scope.getParent();
1: 		if (parent != null) {
1: 			parent.removeChild(scope);
1: 		}
1: 		delete(scope);
1: 	}
1: 	
1: 	private void delete(ScopeImpl scope) {
1: 		File file = bundleContext.getDataFile("scope" + scope.getId());
1: 		if (file == null) return;
1: 		file.delete();
1: 	}
1: 	
1: 	private void insert(ScopeImpl scope) {
1: 		File file = bundleContext.getDataFile("scope" + scope.getId());
1: 		if (file == null) return;
1: 		DataOutputStream dos = null;
1: 		try {
1: 			dos = new DataOutputStream(new FileOutputStream(file));
1: 			insertScope(scope, dos);
1: 		}
1: 		catch (IOException e) {
1: 			// TODO Log this. Remove print stack trace.
1: 			e.printStackTrace();
1: 		}
1: 		finally {
1: 			if (dos != null) {
1: 				try {
1: 					dos.close();
1: 				}
1: 				catch (IOException e) {}
1: 			}
1: 		}
1: 	}
1: 	
1: 	private void insertBundles(Collection<Bundle> bundles, DataOutputStream dos) throws IOException {
1: 		for (Bundle bundle : bundles) {
1: 			dos.writeLong(bundle.getBundleId());
1: 		}
1: 		dos.writeLong(-1);
1: 	}
1: 	
1: 	private void insertScope(ScopeImpl scope, DataOutputStream dos) throws IOException {
1: 		dos.writeLong(scope.getId());
1: 		dos.writeUTF(scope.getName());
1: 		dos.writeUTF(scope.getLocation() == null ? "" : scope.getLocation());
1: 		dos.writeLong(scope.getParent() == null ? -1 : scope.getParent().getId());
1: 		insertBundles(scope.getBundles(), dos);
1: 		insertSharePolicies(scope.getSharePolicies(SharePolicy.TYPE_EXPORT), dos);
1: 		insertSharePolicies(scope.getSharePolicies(SharePolicy.TYPE_IMPORT), dos);
1: 	}
1: 	
1: 	private void insertSharePolicies(Map<String, List<SharePolicy>> sharePolicies, DataOutputStream dos) throws IOException {
1: 		for (String namespace : sharePolicies.keySet()) {
1: 			insertSharePolicies(sharePolicies.get(namespace), dos);
1: 		}
1: 	}
1: 	
1: 	private void insertSharePolicies(List<SharePolicy> sharePolicies, DataOutputStream dos) throws IOException {
1: 		for (SharePolicy sharePolicy : sharePolicies) {
1: 			dos.writeUTF(sharePolicy.getType());
1: 			dos.writeUTF(sharePolicy.getNamespace());
1: 			dos.writeUTF(sharePolicy.getFilter().toString());
1: 		}
1: 	}
1: 	
1: 	private void selectAll() {
1: 		File file = bundleContext.getDataFile("");
1: 		if (file == null) {
1: 			return;
1: 		}
1: 		File[] files = file.listFiles(new FilenameFilter() {
1: 			public boolean accept(File dir, String name) {
1: 				return name.startsWith("scope");
1: 			}
1: 		});
1: 		if (files == null || files.length == 0) {
1: 			return;
1: 		}
1: 		for (File f : files) {
1: 			DataInputStream dis = null; 
1: 			try {
1: 				dis = new DataInputStream(new FileInputStream(f));
1: 				addScope(selectScope(dis, bundleContext));
1: 			}
1: 			catch (Exception e) {
1: 				// TODO Log this. Remove print stack trace.
1: 				e.printStackTrace();
1: 			}
1: 			finally {
1: 				if (dis != null) {
1: 					try {
1: 						dis.close();
1: 					}
1: 					catch (IOException e) {}
1: 				}
1: 			}
1: 		}
1: 	}
1: 	
1: 	private Collection<Bundle> selectBundles(DataInputStream dis, BundleContext bundleContext) throws IOException {
1: 		Collection<Bundle> bundles = new ArrayList<Bundle>();
1: 		long bundleId;
1: 		while ((bundleId = dis.readLong()) != -1) {
1: 			Bundle bundle = bundleContext.getBundle(bundleId);
1: 			if (bundle != null) {
1: 				bundles.add(bundle);
1: 			}
1: 		}
1: 		return bundles;
1: 	}
1: 	
1: 	private ScopeImpl selectScope(DataInputStream dis, BundleContext bundleContext) throws InvalidSyntaxException, IOException {
1: 		long id = dis.readLong();
1: 		String name = dis.readUTF();
1: 		String location = dis.readUTF();
1: 		long parentId = dis.readLong();
1: 		Collection<Bundle> bundles = selectBundles(dis, bundleContext);
1: 		SharePolicies sharePolicies = selectSharePolicies(dis);
1: 		return new ScopeImpl(id, name, location, parentId, bundles, sharePolicies, this);
1: 	}
1: 	
1: 	private SharePolicies selectSharePolicies(DataInputStream dis) throws InvalidSyntaxException, IOException {
1: 		SharePolicies sharePolicies = new SharePolicies();
1: 		while (true) {
1: 			try {
1: 				String type = dis.readUTF();
1: 				String namespace = dis.readUTF();
1: 				String filter = dis.readUTF();
1: 				sharePolicies.addSharePolicy(new SharePolicy(type, namespace, FrameworkUtil.createFilter(filter)));
1: 			}
1: 			catch (EOFException e) {
1: 				break;
1: 			}
1: 		}
1: 		return sharePolicies;
1: 	}
1: }
============================================================================