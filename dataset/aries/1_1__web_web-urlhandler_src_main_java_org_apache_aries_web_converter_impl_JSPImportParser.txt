1:0adda31: /*
1:0adda31:  * Licensed to the Apache Software Foundation (ASF) under one
1:0adda31:  * or more contributor license agreements.  See the NOTICE file
1:0adda31:  * distributed with this work for additional information
1:0adda31:  * regarding copyright ownership.  The ASF licenses this file
1:0adda31:  * to you under the Apache License, Version 2.0 (the
1:0adda31:  * "License"); you may not use this file except in compliance
1:0adda31:  * with the License.  You may obtain a copy of the License at
1:0adda31:  *
1:0adda31:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0adda31:  *
1:0adda31:  * Unless required by applicable law or agreed to in writing,
1:0adda31:  * software distributed under the License is distributed on an
1:0adda31:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:0adda31:  * KIND, either express or implied.  See the License for the
1:0adda31:  * specific language governing permissions and limitations
1:0adda31:  * under the License.
1:0adda31:  */
1:d80741a: package org.apache.aries.web.converter.impl;
1:0adda31: 
1:0adda31: import java.io.BufferedReader;
1:0adda31: import java.io.IOException;
1:0adda31: import java.io.InputStream;
1:0adda31: import java.io.InputStreamReader;
1:0adda31: import java.util.Collection;
1:0adda31: import java.util.LinkedList;
1:0adda31: import java.util.regex.Matcher;
1:0adda31: import java.util.regex.Pattern;
1:0adda31: 
1:0adda31: public class JSPImportParser {
1:0adda31: 
1:0adda31:   /**
1:0adda31:    * 
1:0adda31:    * @param is
1:0adda31:    *          An input stream of character-based text. We expect this to be JSP
1:0adda31:    *          source code.
1:0adda31:    * @return Each java package found within valid JSP import tags
1:0adda31:    * @throws IOException
1:0adda31:    */
1:0adda31:   public static Collection<String> getImports (InputStream is) throws IOException {
1:0adda31:     Collection<String> importedPackages = new LinkedList<String>();
1:0adda31:     BufferedReader reader = new BufferedReader(new InputStreamReader(is));
1:0adda31:     String line = null;
1:0adda31:     do { 
1:0adda31:       line = reader.readLine();
1:0adda31:       // searchMatchedGroupForImports could take (line): I've not done that because 
1:0adda31:       // the entry trace, once working, will print out lots of useless information.  
1:0adda31:       if (line != null) { 
1:0adda31:         Matcher hasJSPimport = lineWithJSPimport.matcher(line);
1:0adda31:         if (hasJSPimport.find()) {
1:0adda31:           Collection<String> foundImports = searchMatchedGroupForImports (hasJSPimport.group());
1:0adda31:           for (String found : foundImports) { 
1:0adda31:             if (!importedPackages.contains(found)) { 
1:0adda31:               importedPackages.add(found);
1:0adda31:             }
1:0adda31:           }
1:0adda31:         }
1:0adda31:       }
1:0adda31:     } while (line != null);
1:0adda31:     
1:0adda31:     return importedPackages;
1:0adda31:   }
1:0adda31:   
1:0adda31:   private static final Pattern lineWithJSPimport = Pattern.compile("<%@\\s*page\\s*import.*%>");
1:0adda31:   private static final Pattern stanzaEnd = Pattern.compile("%>");
1:0adda31:   private static final Pattern imports = Pattern.compile("import\\s*=\\s*\"(.*?)\"");
1:0adda31:   
1:0adda31:   /**
1:0adda31:    * 
1:0adda31:    * @param groupExtent a block of text known to contain a JSP import
1:0adda31:    * @return Each package found within valid JSP import tags
1:0adda31:    */
1:0adda31:   private static LinkedList<String> searchMatchedGroupForImports (String groupExtent) {
1:0adda31:     LinkedList<String> packagesFound = new LinkedList<String>();
1:0adda31:     String importStanzas[] = stanzaEnd.split(groupExtent);
1:0adda31:     for (String s: importStanzas){ 
1:0adda31:       Matcher oneImport = imports.matcher(s);
1:0adda31:       if (oneImport.find()) {
1:0adda31:         String thisStanzasImports = oneImport.group();
1:0adda31:         String allPackages = thisStanzasImports.substring(thisStanzasImports.indexOf("\"")+1, 
1:0adda31:             thisStanzasImports.lastIndexOf("\""));
1:0adda31:         String [] imports = allPackages.split(",");
1:0adda31:         for (String p : imports) { 
1:0adda31:           String thisPackage = p.substring(0,p.lastIndexOf('.')).trim();
1:0adda31:           
1:0adda31:           if (!!!thisPackage.startsWith("java."))
1:0adda31:             packagesFound.add(thisPackage);
1:0adda31:         }
1:0adda31:       }
1:0adda31:     }
1:0adda31: 
1:0adda31:     return packagesFound;
1:0adda31:   }
1:0adda31: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:d80741a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.web.converter.impl;
commit:0adda31
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.converters;
1: 
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import java.util.Collection;
1: import java.util.LinkedList;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: public class JSPImportParser {
1: 
1:   /**
1:    * 
1:    * @param is
1:    *          An input stream of character-based text. We expect this to be JSP
1:    *          source code.
1:    * @return Each java package found within valid JSP import tags
1:    * @throws IOException
1:    */
1:   public static Collection<String> getImports (InputStream is) throws IOException {
1:     Collection<String> importedPackages = new LinkedList<String>();
1:     BufferedReader reader = new BufferedReader(new InputStreamReader(is));
1:     String line = null;
1:     do { 
1:       line = reader.readLine();
1:       // searchMatchedGroupForImports could take (line): I've not done that because 
1:       // the entry trace, once working, will print out lots of useless information.  
1:       if (line != null) { 
1:         Matcher hasJSPimport = lineWithJSPimport.matcher(line);
1:         if (hasJSPimport.find()) {
1:           Collection<String> foundImports = searchMatchedGroupForImports (hasJSPimport.group());
1:           for (String found : foundImports) { 
1:             if (!importedPackages.contains(found)) { 
1:               importedPackages.add(found);
1:             }
1:           }
1:         }
1:       }
1:     } while (line != null);
1:     
1:     return importedPackages;
1:   }
1:   
1:   private static final Pattern lineWithJSPimport = Pattern.compile("<%@\\s*page\\s*import.*%>");
1:   private static final Pattern stanzaEnd = Pattern.compile("%>");
1:   private static final Pattern imports = Pattern.compile("import\\s*=\\s*\"(.*?)\"");
1:   
1:   /**
1:    * 
1:    * @param groupExtent a block of text known to contain a JSP import
1:    * @return Each package found within valid JSP import tags
1:    */
1:   private static LinkedList<String> searchMatchedGroupForImports (String groupExtent) {
1:     LinkedList<String> packagesFound = new LinkedList<String>();
1:     String importStanzas[] = stanzaEnd.split(groupExtent);
1:     for (String s: importStanzas){ 
1:       Matcher oneImport = imports.matcher(s);
1:       if (oneImport.find()) {
1:         String thisStanzasImports = oneImport.group();
1:         String allPackages = thisStanzasImports.substring(thisStanzasImports.indexOf("\"")+1, 
1:             thisStanzasImports.lastIndexOf("\""));
1:         String [] imports = allPackages.split(",");
1:         for (String p : imports) { 
1:           String thisPackage = p.substring(0,p.lastIndexOf('.')).trim();
1:           
1:           if (!!!thisPackage.startsWith("java."))
1:             packagesFound.add(thisPackage);
1:         }
1:       }
1:     }
1: 
1:     return packagesFound;
1:   }
1: }
============================================================================