1:3c2556b: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:3c2556b:  *  contributor license agreements.  See the NOTICE file distributed with
1:3c2556b:  *  this work for additional information regarding copyright ownership.
1:3c2556b:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:3c2556b:  *  (the "License"); you may not use this file except in compliance with
1:3c2556b:  *  the License.  You may obtain a copy of the License at
1:3c2556b:  *
1:3c2556b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c2556b:  *
1:3c2556b:  *  Unless required by applicable law or agreed to in writing, software
1:3c2556b:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:3c2556b:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c2556b:  *  See the License for the specific language governing permissions and
1:3c2556b:  *  limitations under the License.
2:3c2556b:  */
1:3c2556b: package org.apache.aries.jpa.container.itest.bundle.blueprint.impl;
5:3c2556b: 
1:e74c870: import java.util.Map;
1:0d59ccb: import java.util.UUID;
1:3c2556b: 
1:e74c870: import javax.persistence.EntityManager;
1:e74c870: import javax.transaction.Transactional;
1:e74c870: 
1:3c2556b: import org.apache.aries.jpa.container.itest.entities.Car;
1:3c2556b: import org.apache.aries.jpa.container.itest.entities.CarService;
1:e74c870: import org.osgi.service.coordinator.Coordination;
1:3c2556b: import org.osgi.service.coordinator.Coordinator;
1:3c2556b: 
2:3c2556b: /**
1:3c2556b:  * Programmatically uses a Coordination to do a series of calls with the 
1:3c2556b:  * same EntityManager
1:3c2556b:  */
1:3c2556b: public class CarLifeCycle implements Runnable {
1:3c2556b:     CarService carService;
1:3c2556b:     Coordinator coordinator;
1:3c2556b:     
1:e74c870:     @Transactional(Transactional.TxType.REQUIRED)
1:3c2556b:     @Override
1:3c2556b:     public void run() {
1:3c2556b:         Car car = new Car();
1:0d59ccb:         UUID uuid = UUID.randomUUID();
1:0d59ccb:         String id = "blue " + uuid.toString();
1:e74c870:         car.setEngineSize(1);
1:0d59ccb:         car.setNumberPlate(id);
1:3c2556b:         carService.addCar(car);
1:e74c870:         EntityManager em = getEmFromCoord();
1:e74c870:         if (!em.contains(car)) {
1:f55b129:             throw new IllegalStateException("Transaction should cause EntityManager to be kept open");
1:e74c870:         }
1:0d59ccb:         readAndUpdate(id);
1:e74c870:         Car car3 = carService.getCar(id);
1:e74c870:         if (car3.getEngineSize() != 100) {
1:e74c870:             throw new IllegalStateException("Engine size should have been changed to 100");
1:e74c870:         }
1:0d59ccb:         carService.deleteCar(id);
1:0d59ccb:         Car car2 = carService.getCar(id);
1:0d59ccb:         if (car2 != null) {
1:ec3ea65:             throw new RuntimeException("Car with id " + id + " should be deleted"); // NOSONAR
1:0d59ccb:         }
2:3c2556b:     }
1:3c2556b: 
1:e74c870:     public void readAndUpdate(String id) {
1:0d59ccb:         Car car = carService.getCar(id);
1:d5c184f:         if (car == null) {
1:d5c184f:             throw new IllegalStateException("Expected a car with id " + id);
1:d5c184f:         }
1:0d59ccb:         car.setEngineSize(100);
1:3c2556b:     }
1:3c2556b:     
1:e74c870:     @SuppressWarnings("unchecked")
1:e74c870:     private EntityManager getEmFromCoord() {
1:e74c870:         Coordination coord = coordinator.peek();
1:e74c870:         if (coord == null) {
1:e74c870:             throw new IllegalStateException("No coordination found");
1:e74c870:         }
1:e74c870:         while (coord != null) {
1:e74c870:             Map<String, EntityManager> emMap = (Map<String, EntityManager>)coord.getVariables().get(EntityManager.class);
1:e74c870:             if (emMap != null) {
1:e74c870:                 return emMap.values().iterator().next();
1:e74c870:             }
1:e74c870:             coord = coord.getEnclosingCoordination();
1:e74c870:         }
1:e74c870:         throw new IllegalStateException("No EntityManager found in coordinations");
1:e74c870:     }
1:e74c870: 
1:3c2556b:     public void setCarService(CarService carService) {
1:3c2556b:         this.carService = carService;
1:3c2556b:     }
1:3c2556b:     
1:3c2556b:     public void setCoordinator(Coordinator coordinator) {
1:3c2556b:         this.coordinator = coordinator;
1:3c2556b:     }
1:3c2556b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:             throw new RuntimeException("Car with id " + id + " should be deleted"); // NOSONAR
commit:f55b129
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalStateException("Transaction should cause EntityManager to be kept open");
/////////////////////////////////////////////////////////////////////////
0:             throw new RuntimeException("Car with id " + id + " should be deleted");
commit:e74c870
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import javax.persistence.EntityManager;
1: import javax.transaction.Transactional;
1: 
1: import org.osgi.service.coordinator.Coordination;
/////////////////////////////////////////////////////////////////////////
1:     @Transactional(Transactional.TxType.REQUIRED)
1:         car.setEngineSize(1);
1:         EntityManager em = getEmFromCoord();
1:         if (!em.contains(car)) {
0:             throw new IllegalStateException("Transaction should case EntityManager to be kept open");
1:         }
1:         Car car3 = carService.getCar(id);
1:         if (car3.getEngineSize() != 100) {
1:             throw new IllegalStateException("Engine size should have been changed to 100");
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void readAndUpdate(String id) {
1:     @SuppressWarnings("unchecked")
1:     private EntityManager getEmFromCoord() {
1:         Coordination coord = coordinator.peek();
1:         if (coord == null) {
1:             throw new IllegalStateException("No coordination found");
1:         }
1:         while (coord != null) {
1:             Map<String, EntityManager> emMap = (Map<String, EntityManager>)coord.getVariables().get(EntityManager.class);
1:             if (emMap != null) {
1:                 return emMap.values().iterator().next();
1:             }
1:             coord = coord.getEnclosingCoordination();
1:         }
1:         throw new IllegalStateException("No EntityManager found in coordinations");
1:     }
1: 
commit:d5c184f
/////////////////////////////////////////////////////////////////////////
1:         if (car == null) {
1:             throw new IllegalStateException("Expected a car with id " + id);
1:         }
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1:         UUID uuid = UUID.randomUUID();
1:         String id = "blue " + uuid.toString();
1:         car.setNumberPlate(id);
0: //        try {
0: //            readAndUpdate(id);
0: //            throw new IllegalStateException("This should not work with an active coordination");
0: //        } catch (Exception e) {
0: //            e.printStackTrace();
0: //        }
1:         readAndUpdate(id);
1:         carService.deleteCar(id);
1:         Car car2 = carService.getCar(id);
1:         if (car2 != null) {
0:             throw new RuntimeException("Car witgh id " + id + " should be deleted");
1:         }
0:      * @param id 
0:     private void readAndUpdate(String id) {
1:         Car car = carService.getCar(id);
1:         car.setEngineSize(100);
0:         carService.updateCar(car);
commit:3c2556b
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jpa.container.itest.bundle.blueprint.impl;
1: 
0: import java.util.Collection;
1: 
1: import org.apache.aries.jpa.container.itest.entities.Car;
1: import org.apache.aries.jpa.container.itest.entities.CarService;
1: import org.osgi.service.coordinator.Coordinator;
1: 
1: /**
1:  * Programmatically uses a Coordination to do a series of calls with the 
1:  * same EntityManager
1:  */
1: public class CarLifeCycle implements Runnable {
1:     CarService carService;
1:     Coordinator coordinator;
1:     
1:     @Override
1:     public void run() {
1:         Car car = new Car();
0:         car.setNumberPlate("blue");
1:         carService.addCar(car);
1:        
0:         try {
0:             readAndUpdate();
0:             throw new IllegalStateException("This should not work with an active coordination");
0:         } catch (Exception e) {
0:             e.printStackTrace();
1:         }
1: 
1:         
0:         coordinator.begin("jpa", 0);
0:         readAndUpdate();
0:         coordinator.pop().end();
1:         
0:         carService.deleteCar("blue");
1:     }
1: 
1:     /**
0:      * These operations only work if the EntityManager stays open
1:      */
0:     private void readAndUpdate() {
0:         Collection<Car> cars = carService.getCars();
0:         carService.updateCar(cars.iterator().next());
1:     }
1:     
1:     public void setCarService(CarService carService) {
1:         this.carService = carService;
1:     }
1:     
1:     public void setCoordinator(Coordinator coordinator) {
1:         this.coordinator = coordinator;
1:     }
1: }
============================================================================