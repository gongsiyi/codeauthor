1:ef7b490: /*
1:ef7b490:  * Licensed to the Apache Software Foundation (ASF) under one
1:ef7b490:  * or more contributor license agreements.  See the NOTICE file
1:ef7b490:  * distributed with this work for additional information
1:ef7b490:  * regarding copyright ownership.  The ASF licenses this file
1:ef7b490:  * to you under the Apache License, Version 2.0 (the
1:ef7b490:  * "License"); you may not use this file except in compliance
1:ef7b490:  * with the License.  You may obtain a copy of the License at
1:ef7b490:  *
1:ef7b490:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ef7b490:  *
1:ef7b490:  * Unless required by applicable law or agreed to in writing,
1:ef7b490:  * software distributed under the License is distributed on an
1:ef7b490:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ef7b490:  * KIND, either express or implied.  See the License for the
1:ef7b490:  * specific language governing permissions and limitations
1:ef7b490:  * under the License.
1:ef7b490:  */
1:ef7b490: package org.apache.aries.blueprint.utils.threading;
1:ef7b490: 
1:ef7b490: import java.util.ArrayList;
1:ef7b490: import java.util.Collection;
1:ef7b490: import java.util.Collections;
1:ef7b490: import java.util.List;
1:ef7b490: import java.util.Queue;
1:ef7b490: import java.util.concurrent.Callable;
1:ef7b490: import java.util.concurrent.ExecutionException;
1:ef7b490: import java.util.concurrent.Future;
1:ef7b490: import java.util.concurrent.LinkedBlockingQueue;
1:ef7b490: import java.util.concurrent.RejectedExecutionException;
1:ef7b490: import java.util.concurrent.ScheduledExecutorService;
1:ef7b490: import java.util.concurrent.ScheduledFuture;
1:ef7b490: import java.util.concurrent.TimeUnit;
1:ef7b490: import java.util.concurrent.TimeoutException;
1:ef7b490: import java.util.concurrent.atomic.AtomicBoolean;
1:ef7b490: import java.util.concurrent.atomic.AtomicInteger;
1:ef7b490: import java.util.concurrent.atomic.AtomicReference;
1:ef7b490: 
1:ef7b490: import org.apache.aries.blueprint.utils.threading.impl.Discardable;
1:ef7b490: import org.apache.aries.blueprint.utils.threading.impl.DiscardableCallable;
1:ef7b490: import org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable;
1:ef7b490: import org.apache.aries.blueprint.utils.threading.impl.WrappedFuture;
1:ef7b490: import org.apache.aries.blueprint.utils.threading.impl.WrappedScheduledFuture;
1:ef7b490: import org.apache.aries.util.tracker.SingleServiceTracker;
1:ef7b490: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1:ef7b490: import org.osgi.framework.BundleContext;
1:ef7b490: import org.osgi.framework.InvalidSyntaxException;
1:ef7b490: 
1:ef7b490: /**
1:ef7b490:  * This class looks like a ScheduledExecutorService to the outside world. Internally it uses either
1:ef7b490:  * a scheduled thread pool with a core size of 3, or it picks one up from the service registry. If
1:ef7b490:  * it picks one up from the service registry then it shuts the internal one down. This doesn't fully meet
1:ef7b490:  * the spec for a SchedueledExecutorService. It does not properly implement shutdownNow, but this isn't used
1:ef7b490:  * by blueprint so for now that should be fine.
1:ef7b490:  * 
1:ef7b490:  * <p>It also wraps the Runnables and Callables so when a task is canceled we quickly clean up memory rather
1:ef7b490:  *   than waiting for the target to get to the task and purge it.
1:ef7b490:  * </p>
1:ef7b490:  */
1:ef7b490: public class ScheduledExecutorServiceWrapper implements ScheduledExecutorService, SingleServiceListener
1:ef7b490: {
1:ef7b490:   public static interface ScheduledExecutorServiceFactory
1:ef7b490:   {
1:ef7b490:     public ScheduledExecutorService create(String name);
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   private final AtomicReference<ScheduledExecutorService> _current = new AtomicReference<ScheduledExecutorService>();
1:ef7b490:   private SingleServiceTracker<ScheduledExecutorService> _tracked;
1:ef7b490:   private final AtomicReference<ScheduledExecutorService> _default = new AtomicReference<ScheduledExecutorService>();
1:ef7b490:   private final AtomicBoolean _shutdown = new AtomicBoolean();
1:ef7b490:   private final Queue<Discardable<Runnable>> _unprocessedWork = new LinkedBlockingQueue<Discardable<Runnable>>();
1:ef7b490:   private final RWLock _lock = new RWLock();
1:ef7b490:   private final AtomicInteger _invokeEntryCount = new AtomicInteger();
1:ef7b490:   private final ScheduledExecutorServiceFactory _factory;
1:ef7b490:   private final String _name;
1:ef7b490:   
1:ef7b490:   public ScheduledExecutorServiceWrapper(BundleContext context, String name, ScheduledExecutorServiceFactory sesf)
1:ef7b490:   {
1:ef7b490:     _name = name;
1:ef7b490:     _factory = sesf;
1:ef7b490:     try {
1:ef7b490:       _tracked = new SingleServiceTracker<ScheduledExecutorService>(context, ScheduledExecutorService.class, "(aries.blueprint.poolName=" + _name + ")", this);
1:ef7b490:       _tracked.open();
1:ef7b490:     } catch (InvalidSyntaxException e) {
1:ef7b490:       // Just ignore and stick with the default one.
1:ef7b490:     }
1:ef7b490: 
1:ef7b490:     if (_current.get() == null) {
1:ef7b490:       _default.set(_factory.create(name));
1:ef7b490:       if (!!!_current.compareAndSet(null, _default.get())) {
1:ef7b490:         _default.getAndSet(null).shutdown();
1:ef7b490:       }
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
1:ef7b490:   {
1:ef7b490:     long timeLeftToWait = unit.toMillis(timeout);
1:ef7b490:     long pausePeriod = timeLeftToWait;
1:ef7b490:     if (pausePeriod > 1000) pausePeriod = 1000;
1:ef7b490:     while (!!!_unprocessedWork.isEmpty() && _invokeEntryCount.get() > 0 && timeLeftToWait > 0) {
1:ef7b490:       Thread.sleep(pausePeriod);
1:ef7b490:       timeLeftToWait -= pausePeriod;
1:ef7b490:       if (timeLeftToWait < pausePeriod) pausePeriod = timeLeftToWait;
1:ef7b490:     }
1:ef7b490:     return _unprocessedWork.isEmpty() && _invokeEntryCount.get() > 0;
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public <T> List<Future<T>> invokeAll(final Collection<? extends Callable<T>> tasks)
1:ef7b490:       throws InterruptedException
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<List<Future<T>>>() {
1:ef7b490: 
1:ef7b490:         public List<Future<T>> call() throws Exception
1:ef7b490:         {
1:ef7b490:           _invokeEntryCount.incrementAndGet();
1:ef7b490:           try {
1:ef7b490:             return _current.get().invokeAll(tasks);
1:ef7b490:           } finally {
1:ef7b490:             _invokeEntryCount.decrementAndGet();
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:         
1:ef7b490:       });
1:ef7b490:     } catch (InterruptedException e) { throw e;
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public <T> List<Future<T>> invokeAll(final Collection<? extends Callable<T>> tasks, 
1:ef7b490:       final long timeout,
1:ef7b490:       final TimeUnit unit) throws InterruptedException
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<List<Future<T>>>() {
1:ef7b490: 
1:ef7b490:         public List<Future<T>> call() throws Exception
1:ef7b490:         {
1:ef7b490:           _invokeEntryCount.incrementAndGet();
1:ef7b490:           try {
1:ef7b490:             return _current.get().invokeAll(tasks, timeout, unit);
1:ef7b490:           } finally {
1:ef7b490:             _invokeEntryCount.decrementAndGet();
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:         
1:ef7b490:       });
1:ef7b490:     } catch (InterruptedException e) { throw e;
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public <T> T invokeAny(final Collection<? extends Callable<T>> tasks) throws InterruptedException,
1:ef7b490:       ExecutionException
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<T>() {
1:ef7b490: 
1:ef7b490:         public T call() throws Exception
1:ef7b490:         {
1:ef7b490:           _invokeEntryCount.incrementAndGet();
1:ef7b490:           try {
1:ef7b490:             return _current.get().invokeAny(tasks);
1:ef7b490:           } finally {
1:ef7b490:             _invokeEntryCount.decrementAndGet();
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:         
1:ef7b490:       });
1:ef7b490:     } catch (InterruptedException e) { throw e;
1:ef7b490:     } catch (ExecutionException e) { throw e;
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public <T> T invokeAny(final Collection<? extends Callable<T>> tasks, final long timeout, final TimeUnit unit)
1:ef7b490:       throws InterruptedException, ExecutionException, TimeoutException
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<T>() {
1:ef7b490: 
1:ef7b490:         public T call() throws Exception
1:ef7b490:         {
1:ef7b490:           _invokeEntryCount.incrementAndGet();
1:ef7b490:           try {
1:ef7b490:             return _current.get().invokeAny(tasks, timeout, unit);
1:ef7b490:           } finally {
1:ef7b490:             _invokeEntryCount.decrementAndGet();
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:         
1:ef7b490:       });
1:ef7b490:     } catch (InterruptedException e) { throw e;
1:ef7b490:     } catch (ExecutionException e) { throw e;
1:ef7b490:     } catch (TimeoutException e) { throw e;
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public boolean isShutdown()
1:ef7b490:   {
1:ef7b490:     return _shutdown.get();
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public boolean isTerminated()
1:ef7b490:   {
1:ef7b490:     if (isShutdown()) return _unprocessedWork.isEmpty();
1:ef7b490:     else return false;
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public void shutdown()
1:ef7b490:   {
1:ef7b490:     _lock.runWriteOperation(new Runnable() {
1:ef7b490:       
1:ef7b490:       public void run()
1:ef7b490:       {
1:ef7b490:         _shutdown.set(true);
1:ef7b490:         ScheduledExecutorService s = _default.get();
1:ef7b490:         
1:ef7b490:         if (s != null) s.shutdown();
1:ef7b490:       }
1:ef7b490:     });
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public List<Runnable> shutdownNow()
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return _lock.runWriteOperation(new Callable<List<Runnable>>() {
1:ef7b490: 
1:ef7b490:         public List<Runnable> call()
1:ef7b490:         {
1:ef7b490:           _shutdown.set(true);
1:ef7b490:           
1:ef7b490:           ScheduledExecutorService s = _default.get();
1:ef7b490:           
1:ef7b490:           if (s != null) s.shutdownNow();
1:ef7b490:           
1:ef7b490:           List<Runnable> runnables = new ArrayList<Runnable>();
1:ef7b490:           
1:ef7b490:           for (Discardable<Runnable> r : _unprocessedWork) {
1:ef7b490:             Runnable newRunnable = r.discard();
1:ef7b490:             if (newRunnable != null) {
1:ef7b490:               runnables.add(newRunnable);
1:ef7b490:             }
1:ef7b490:           }
1:ef7b490:           
1:ef7b490:           return runnables;
1:ef7b490:         }
1:ef7b490:         
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) {
1:ef7b490:       // This wont happen since our callable doesn't throw any exceptions, so we just return an empty list
1:ef7b490:       return Collections.emptyList();
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public <T> Future<T> submit(final Callable<T> task)
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<Future<T>>() {
1:ef7b490: 
1:ef7b490:         public Future<T> call() throws Exception
1:ef7b490:         {
1:ef7b490:           DiscardableCallable<T> t = new DiscardableCallable<T>(task, _unprocessedWork);
1:ef7b490:           try {
1:ef7b490:             return new WrappedFuture<T>(_current.get().submit((Callable<T>)t), t) ;
1:ef7b490:           } catch (RuntimeException e) {
1:ef7b490:             t.discard();
1:ef7b490:             throw e;
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:         
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   @SuppressWarnings({ "unchecked", "rawtypes" })
1:ef7b490:   public Future<?> submit(final Runnable task)
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<Future<?>>() {
1:ef7b490: 
1:ef7b490:         public Future<?> call()
1:ef7b490:         {
1:ef7b490:           DiscardableRunnable t = new DiscardableRunnable(task, _unprocessedWork);
1:ef7b490:           try {
1:ef7b490:             return new WrappedFuture(_current.get().submit(t), t);
1:ef7b490:           } catch (RuntimeException e) {
1:ef7b490:             t.discard();
1:ef7b490:             throw e;
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public <T> Future<T> submit(final Runnable task, final T result)
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<Future<T>>() {
1:ef7b490: 
1:ef7b490:         public Future<T> call()
1:ef7b490:         {
1:ef7b490:           DiscardableRunnable t = new DiscardableRunnable(task, _unprocessedWork);
1:ef7b490:           try {
1:ef7b490:             return new WrappedFuture<T>(_current.get().submit(t, result), t);
1:ef7b490:           } catch (RuntimeException e) {
1:ef7b490:             t.discard();
1:ef7b490:             throw e;
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public void execute(final Runnable command)
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       runUnlessShutdown(new Callable<Object>() {
1:ef7b490: 
1:ef7b490:         public Object call()
1:ef7b490:         {
1:ef7b490:           DiscardableRunnable t = new DiscardableRunnable(command, _unprocessedWork);
1:ef7b490:           try {
1:ef7b490:             _current.get().execute(t);
1:ef7b490:           } catch (RuntimeException e) {
1:ef7b490:             t.discard();
1:ef7b490:             throw e;
1:ef7b490:           }
1:ef7b490:           return null;
1:ef7b490:         }
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   @SuppressWarnings({ "rawtypes", "unchecked" })
1:ef7b490:   public ScheduledFuture<?> schedule(final Runnable command, final long delay, final TimeUnit unit)
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<ScheduledFuture<?>>() {
1:ef7b490: 
1:ef7b490:         public ScheduledFuture<?> call()
1:ef7b490:         {
1:ef7b490:           DiscardableRunnable t = new DiscardableRunnable(command, _unprocessedWork);
1:ef7b490:           try {
1:ef7b490:             return new WrappedScheduledFuture(_current.get().schedule(t, delay, unit), t);
1:ef7b490:           } catch (RuntimeException e) {
1:ef7b490:             t.discard();
1:ef7b490:             throw e;
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public <V> ScheduledFuture<V> schedule(final Callable<V> callable, final long delay, final TimeUnit unit)
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<ScheduledFuture<V>>() {
1:ef7b490: 
1:ef7b490:         public ScheduledFuture<V> call()
1:ef7b490:         {
1:ef7b490:           DiscardableCallable<V> c = new DiscardableCallable<V>(callable, _unprocessedWork);
1:ef7b490:           try {
1:ef7b490:             return new WrappedScheduledFuture<V>(_current.get().schedule((Callable<V>)c, delay, unit), c);
1:ef7b490:           } catch (RuntimeException e) {
1:ef7b490:             c.discard();
1:ef7b490:             throw e;
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   @SuppressWarnings({ "unchecked", "rawtypes" })
1:ef7b490:   public ScheduledFuture<?> scheduleAtFixedRate(final Runnable command, final long initialDelay, final long period,
1:ef7b490:       final TimeUnit unit)
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<ScheduledFuture<?>>() {
1:ef7b490: 
1:ef7b490:         public ScheduledFuture<?> call()
1:ef7b490:         {
1:ef7b490:           DiscardableRunnable t = new DiscardableRunnable(command, _unprocessedWork);
1:ef7b490:           try {
1:ef7b490:             return new WrappedScheduledFuture(_current.get().scheduleAtFixedRate(t, initialDelay, period, unit), t);
1:ef7b490:           } catch (RuntimeException e) {
1:ef7b490:             t.discard();
1:ef7b490:             throw e;
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   @SuppressWarnings({ "unchecked", "rawtypes" })
1:ef7b490:   public ScheduledFuture<?> scheduleWithFixedDelay(final Runnable command, final long initialDelay, final long delay,
1:ef7b490:       final TimeUnit unit)
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return runUnlessShutdown(new Callable<ScheduledFuture<?>>() {
1:ef7b490: 
1:ef7b490:         public ScheduledFuture<?> call()
1:ef7b490:         {
1:ef7b490:           DiscardableRunnable t = new DiscardableRunnable(command, _unprocessedWork);
1:ef7b490:           try {
1:ef7b490:             return new WrappedScheduledFuture(_current.get().scheduleWithFixedDelay(t, initialDelay, delay, unit), t);
1:ef7b490:           } catch (RuntimeException e) {
1:ef7b490:             t.discard();
1:ef7b490:             throw e;
1:ef7b490:           }
1:ef7b490:         }
1:ef7b490:       });
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public void serviceFound()
1:ef7b490:   {
1:ef7b490:     ScheduledExecutorService s = _default.get();
1:ef7b490:     if (_current.compareAndSet(s, _tracked.getService())) {
1:ef7b490:       if (s != null) {
1:ef7b490:         if (_default.compareAndSet(s, null)) {
1:ef7b490:           s.shutdown();
1:ef7b490:         }
1:ef7b490:       }
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   // TODO when lost or replaced we need to move work to the "new" _current. This is a huge change because the futures are not currently stored.
1:ef7b490:   public void serviceLost()
1:ef7b490:   {
1:ef7b490:     ScheduledExecutorService s = _default.get();
1:ef7b490:     
1:ef7b490:     if (s == null) {
1:ef7b490:       s = _factory.create(_name);
1:ef7b490:       if (_default.compareAndSet(null, s)) {
1:ef7b490:         _current.set(s);
1:ef7b490:       }
1:ef7b490:     }
1:ef7b490:   }
1:ef7b490: 
1:ef7b490:   public void serviceReplaced()
1:ef7b490:   {
1:ef7b490:     _current.set(_tracked.getService());
1:ef7b490:   }
1:ef7b490:   
1:ef7b490:   private <T> T runUnlessShutdown(final Callable<T> call) throws InterruptedException, ExecutionException, TimeoutException
1:ef7b490:   {
1:ef7b490:     try {
1:ef7b490:       return _lock.runReadOperation(new Callable<T>() 
1:ef7b490:           {
1:ef7b490:             public T call() throws Exception
1:ef7b490:             {
1:ef7b490:               if (isShutdown()) throw new RejectedExecutionException();
1:ef7b490:               return call.call();
1:ef7b490:             }
1:ef7b490:           });
1:ef7b490:     } catch (InterruptedException e) { throw e; 
1:ef7b490:     } catch (ExecutionException e) { throw e;
1:ef7b490:     } catch (TimeoutException e) { throw e;
1:ef7b490:     } catch (RuntimeException e) { throw e;
1:ef7b490:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:ef7b490:   }
1:ef7b490: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ef7b490
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.utils.threading;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Queue;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.RejectedExecutionException;
1: import java.util.concurrent.ScheduledExecutorService;
1: import java.util.concurrent.ScheduledFuture;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.apache.aries.blueprint.utils.threading.impl.Discardable;
1: import org.apache.aries.blueprint.utils.threading.impl.DiscardableCallable;
1: import org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable;
1: import org.apache.aries.blueprint.utils.threading.impl.WrappedFuture;
1: import org.apache.aries.blueprint.utils.threading.impl.WrappedScheduledFuture;
1: import org.apache.aries.util.tracker.SingleServiceTracker;
1: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: 
1: /**
1:  * This class looks like a ScheduledExecutorService to the outside world. Internally it uses either
1:  * a scheduled thread pool with a core size of 3, or it picks one up from the service registry. If
1:  * it picks one up from the service registry then it shuts the internal one down. This doesn't fully meet
1:  * the spec for a SchedueledExecutorService. It does not properly implement shutdownNow, but this isn't used
1:  * by blueprint so for now that should be fine.
1:  * 
1:  * <p>It also wraps the Runnables and Callables so when a task is canceled we quickly clean up memory rather
1:  *   than waiting for the target to get to the task and purge it.
1:  * </p>
1:  */
1: public class ScheduledExecutorServiceWrapper implements ScheduledExecutorService, SingleServiceListener
1: {
1:   public static interface ScheduledExecutorServiceFactory
1:   {
1:     public ScheduledExecutorService create(String name);
1:   }
1: 
1:   private final AtomicReference<ScheduledExecutorService> _current = new AtomicReference<ScheduledExecutorService>();
1:   private SingleServiceTracker<ScheduledExecutorService> _tracked;
1:   private final AtomicReference<ScheduledExecutorService> _default = new AtomicReference<ScheduledExecutorService>();
1:   private final AtomicBoolean _shutdown = new AtomicBoolean();
1:   private final Queue<Discardable<Runnable>> _unprocessedWork = new LinkedBlockingQueue<Discardable<Runnable>>();
1:   private final RWLock _lock = new RWLock();
1:   private final AtomicInteger _invokeEntryCount = new AtomicInteger();
1:   private final ScheduledExecutorServiceFactory _factory;
1:   private final String _name;
1:   
1:   public ScheduledExecutorServiceWrapper(BundleContext context, String name, ScheduledExecutorServiceFactory sesf)
1:   {
1:     _name = name;
1:     _factory = sesf;
1:     try {
1:       _tracked = new SingleServiceTracker<ScheduledExecutorService>(context, ScheduledExecutorService.class, "(aries.blueprint.poolName=" + _name + ")", this);
1:       _tracked.open();
1:     } catch (InvalidSyntaxException e) {
1:       // Just ignore and stick with the default one.
1:     }
1: 
1:     if (_current.get() == null) {
1:       _default.set(_factory.create(name));
1:       if (!!!_current.compareAndSet(null, _default.get())) {
1:         _default.getAndSet(null).shutdown();
1:       }
1:     }
1:   }
1: 
1:   public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
1:   {
1:     long timeLeftToWait = unit.toMillis(timeout);
1:     long pausePeriod = timeLeftToWait;
1:     if (pausePeriod > 1000) pausePeriod = 1000;
1:     while (!!!_unprocessedWork.isEmpty() && _invokeEntryCount.get() > 0 && timeLeftToWait > 0) {
1:       Thread.sleep(pausePeriod);
1:       timeLeftToWait -= pausePeriod;
1:       if (timeLeftToWait < pausePeriod) pausePeriod = timeLeftToWait;
1:     }
1:     return _unprocessedWork.isEmpty() && _invokeEntryCount.get() > 0;
1:   }
1: 
1:   public <T> List<Future<T>> invokeAll(final Collection<? extends Callable<T>> tasks)
1:       throws InterruptedException
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<List<Future<T>>>() {
1: 
1:         public List<Future<T>> call() throws Exception
1:         {
1:           _invokeEntryCount.incrementAndGet();
1:           try {
1:             return _current.get().invokeAll(tasks);
1:           } finally {
1:             _invokeEntryCount.decrementAndGet();
1:           }
1:         }
1:         
1:       });
1:     } catch (InterruptedException e) { throw e;
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   public <T> List<Future<T>> invokeAll(final Collection<? extends Callable<T>> tasks, 
1:       final long timeout,
1:       final TimeUnit unit) throws InterruptedException
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<List<Future<T>>>() {
1: 
1:         public List<Future<T>> call() throws Exception
1:         {
1:           _invokeEntryCount.incrementAndGet();
1:           try {
1:             return _current.get().invokeAll(tasks, timeout, unit);
1:           } finally {
1:             _invokeEntryCount.decrementAndGet();
1:           }
1:         }
1:         
1:       });
1:     } catch (InterruptedException e) { throw e;
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   public <T> T invokeAny(final Collection<? extends Callable<T>> tasks) throws InterruptedException,
1:       ExecutionException
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<T>() {
1: 
1:         public T call() throws Exception
1:         {
1:           _invokeEntryCount.incrementAndGet();
1:           try {
1:             return _current.get().invokeAny(tasks);
1:           } finally {
1:             _invokeEntryCount.decrementAndGet();
1:           }
1:         }
1:         
1:       });
1:     } catch (InterruptedException e) { throw e;
1:     } catch (ExecutionException e) { throw e;
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   public <T> T invokeAny(final Collection<? extends Callable<T>> tasks, final long timeout, final TimeUnit unit)
1:       throws InterruptedException, ExecutionException, TimeoutException
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<T>() {
1: 
1:         public T call() throws Exception
1:         {
1:           _invokeEntryCount.incrementAndGet();
1:           try {
1:             return _current.get().invokeAny(tasks, timeout, unit);
1:           } finally {
1:             _invokeEntryCount.decrementAndGet();
1:           }
1:         }
1:         
1:       });
1:     } catch (InterruptedException e) { throw e;
1:     } catch (ExecutionException e) { throw e;
1:     } catch (TimeoutException e) { throw e;
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   public boolean isShutdown()
1:   {
1:     return _shutdown.get();
1:   }
1: 
1:   public boolean isTerminated()
1:   {
1:     if (isShutdown()) return _unprocessedWork.isEmpty();
1:     else return false;
1:   }
1: 
1:   public void shutdown()
1:   {
1:     _lock.runWriteOperation(new Runnable() {
1:       
1:       public void run()
1:       {
1:         _shutdown.set(true);
1:         ScheduledExecutorService s = _default.get();
1:         
1:         if (s != null) s.shutdown();
1:       }
1:     });
1:   }
1: 
1:   public List<Runnable> shutdownNow()
1:   {
1:     try {
1:       return _lock.runWriteOperation(new Callable<List<Runnable>>() {
1: 
1:         public List<Runnable> call()
1:         {
1:           _shutdown.set(true);
1:           
1:           ScheduledExecutorService s = _default.get();
1:           
1:           if (s != null) s.shutdownNow();
1:           
1:           List<Runnable> runnables = new ArrayList<Runnable>();
1:           
1:           for (Discardable<Runnable> r : _unprocessedWork) {
1:             Runnable newRunnable = r.discard();
1:             if (newRunnable != null) {
1:               runnables.add(newRunnable);
1:             }
1:           }
1:           
1:           return runnables;
1:         }
1:         
1:       });
1:     } catch (Exception e) {
1:       // This wont happen since our callable doesn't throw any exceptions, so we just return an empty list
1:       return Collections.emptyList();
1:     }
1:   }
1: 
1:   public <T> Future<T> submit(final Callable<T> task)
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<Future<T>>() {
1: 
1:         public Future<T> call() throws Exception
1:         {
1:           DiscardableCallable<T> t = new DiscardableCallable<T>(task, _unprocessedWork);
1:           try {
1:             return new WrappedFuture<T>(_current.get().submit((Callable<T>)t), t) ;
1:           } catch (RuntimeException e) {
1:             t.discard();
1:             throw e;
1:           }
1:         }
1:         
1:       });
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   @SuppressWarnings({ "unchecked", "rawtypes" })
1:   public Future<?> submit(final Runnable task)
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<Future<?>>() {
1: 
1:         public Future<?> call()
1:         {
1:           DiscardableRunnable t = new DiscardableRunnable(task, _unprocessedWork);
1:           try {
1:             return new WrappedFuture(_current.get().submit(t), t);
1:           } catch (RuntimeException e) {
1:             t.discard();
1:             throw e;
1:           }
1:         }
1:       });
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   public <T> Future<T> submit(final Runnable task, final T result)
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<Future<T>>() {
1: 
1:         public Future<T> call()
1:         {
1:           DiscardableRunnable t = new DiscardableRunnable(task, _unprocessedWork);
1:           try {
1:             return new WrappedFuture<T>(_current.get().submit(t, result), t);
1:           } catch (RuntimeException e) {
1:             t.discard();
1:             throw e;
1:           }
1:         }
1:       });
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   public void execute(final Runnable command)
1:   {
1:     try {
1:       runUnlessShutdown(new Callable<Object>() {
1: 
1:         public Object call()
1:         {
1:           DiscardableRunnable t = new DiscardableRunnable(command, _unprocessedWork);
1:           try {
1:             _current.get().execute(t);
1:           } catch (RuntimeException e) {
1:             t.discard();
1:             throw e;
1:           }
1:           return null;
1:         }
1:       });
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   @SuppressWarnings({ "rawtypes", "unchecked" })
1:   public ScheduledFuture<?> schedule(final Runnable command, final long delay, final TimeUnit unit)
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<ScheduledFuture<?>>() {
1: 
1:         public ScheduledFuture<?> call()
1:         {
1:           DiscardableRunnable t = new DiscardableRunnable(command, _unprocessedWork);
1:           try {
1:             return new WrappedScheduledFuture(_current.get().schedule(t, delay, unit), t);
1:           } catch (RuntimeException e) {
1:             t.discard();
1:             throw e;
1:           }
1:         }
1:       });
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   public <V> ScheduledFuture<V> schedule(final Callable<V> callable, final long delay, final TimeUnit unit)
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<ScheduledFuture<V>>() {
1: 
1:         public ScheduledFuture<V> call()
1:         {
1:           DiscardableCallable<V> c = new DiscardableCallable<V>(callable, _unprocessedWork);
1:           try {
1:             return new WrappedScheduledFuture<V>(_current.get().schedule((Callable<V>)c, delay, unit), c);
1:           } catch (RuntimeException e) {
1:             c.discard();
1:             throw e;
1:           }
1:         }
1:       });
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   @SuppressWarnings({ "unchecked", "rawtypes" })
1:   public ScheduledFuture<?> scheduleAtFixedRate(final Runnable command, final long initialDelay, final long period,
1:       final TimeUnit unit)
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<ScheduledFuture<?>>() {
1: 
1:         public ScheduledFuture<?> call()
1:         {
1:           DiscardableRunnable t = new DiscardableRunnable(command, _unprocessedWork);
1:           try {
1:             return new WrappedScheduledFuture(_current.get().scheduleAtFixedRate(t, initialDelay, period, unit), t);
1:           } catch (RuntimeException e) {
1:             t.discard();
1:             throw e;
1:           }
1:         }
1:       });
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   @SuppressWarnings({ "unchecked", "rawtypes" })
1:   public ScheduledFuture<?> scheduleWithFixedDelay(final Runnable command, final long initialDelay, final long delay,
1:       final TimeUnit unit)
1:   {
1:     try {
1:       return runUnlessShutdown(new Callable<ScheduledFuture<?>>() {
1: 
1:         public ScheduledFuture<?> call()
1:         {
1:           DiscardableRunnable t = new DiscardableRunnable(command, _unprocessedWork);
1:           try {
1:             return new WrappedScheduledFuture(_current.get().scheduleWithFixedDelay(t, initialDelay, delay, unit), t);
1:           } catch (RuntimeException e) {
1:             t.discard();
1:             throw e;
1:           }
1:         }
1:       });
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: 
1:   public void serviceFound()
1:   {
1:     ScheduledExecutorService s = _default.get();
1:     if (_current.compareAndSet(s, _tracked.getService())) {
1:       if (s != null) {
1:         if (_default.compareAndSet(s, null)) {
1:           s.shutdown();
1:         }
1:       }
1:     }
1:   }
1: 
1:   // TODO when lost or replaced we need to move work to the "new" _current. This is a huge change because the futures are not currently stored.
1:   public void serviceLost()
1:   {
1:     ScheduledExecutorService s = _default.get();
1:     
1:     if (s == null) {
1:       s = _factory.create(_name);
1:       if (_default.compareAndSet(null, s)) {
1:         _current.set(s);
1:       }
1:     }
1:   }
1: 
1:   public void serviceReplaced()
1:   {
1:     _current.set(_tracked.getService());
1:   }
1:   
1:   private <T> T runUnlessShutdown(final Callable<T> call) throws InterruptedException, ExecutionException, TimeoutException
1:   {
1:     try {
1:       return _lock.runReadOperation(new Callable<T>() 
1:           {
1:             public T call() throws Exception
1:             {
1:               if (isShutdown()) throw new RejectedExecutionException();
1:               return call.call();
1:             }
1:           });
1:     } catch (InterruptedException e) { throw e; 
1:     } catch (ExecutionException e) { throw e;
1:     } catch (TimeoutException e) { throw e;
1:     } catch (RuntimeException e) { throw e;
1:     } catch (Exception e) { throw new RejectedExecutionException(); }
1:   }
1: }
============================================================================