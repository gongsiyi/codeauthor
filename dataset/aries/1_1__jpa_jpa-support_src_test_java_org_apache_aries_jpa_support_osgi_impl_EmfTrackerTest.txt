1:365627f: /*
1:365627f:  * Licensed to the Apache Software Foundation (ASF) under one
1:365627f:  * or more contributor license agreements.  See the NOTICE file
1:365627f:  * distributed with this work for additional information
1:365627f:  * regarding copyright ownership.  The ASF licenses this file
1:365627f:  * to you under the Apache License, Version 2.0 (the
1:365627f:  * "License"); you may not use this file except in compliance
1:365627f:  * with the License.  You may obtain a copy of the License at
1:365627f:  *
1:365627f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:365627f:  *
1:365627f:  * Unless required by applicable law or agreed to in writing,
1:365627f:  * software distributed under the License is distributed on an
1:365627f:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:365627f:  * KIND, either express or implied.  See the License for the
1:365627f:  * specific language governing permissions and limitations
1:365627f:  * under the License.
1:365627f:  */
1:365627f: package org.apache.aries.jpa.support.osgi.impl;
1:365627f: 
1:365627f: import static org.mockito.Mockito.mock;
1:365627f: import static org.mockito.Mockito.times;
1:365627f: import static org.mockito.Mockito.verify;
1:365627f: import static org.mockito.Mockito.when;
1:365627f: import static org.mockito.Mockito.any;
1:6b01678: import static org.mockito.Mockito.doThrow;
1:365627f: 
1:365627f: import java.util.Dictionary;
1:365627f: 
1:6b01678: import javax.persistence.EntityManager;
1:365627f: import javax.persistence.EntityManagerFactory;
1:6b01678: import javax.persistence.PersistenceException;
1:365627f: import javax.persistence.spi.PersistenceUnitTransactionType;
1:365627f: 
1:6b01678: import org.apache.aries.jpa.supplier.EmSupplier;
1:365627f: import org.apache.aries.jpa.support.osgi.impl.EMFTracker;
1:365627f: import org.apache.aries.jpa.support.osgi.impl.EMFTracker.TrackedEmf;
1:365627f: import org.junit.Assert;
1:365627f: import org.junit.Test;
1:365627f: import org.mockito.Mockito;
1:365627f: import org.osgi.framework.Bundle;
1:365627f: import org.osgi.framework.BundleContext;
1:365627f: import org.osgi.framework.ServiceReference;
1:365627f: import org.osgi.framework.ServiceRegistration;
1:365627f: import org.osgi.service.coordinator.Coordinator;
1:365627f: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:365627f: 
1:365627f: public class EmfTrackerTest {
1:365627f: 
1:365627f:     @SuppressWarnings("unchecked")
1:365627f:     @Test
1:365627f:     public void testLifecycle() {
1:365627f:         BundleContext context = mock(BundleContext.class);
1:365627f:         Coordinator coordinator = mock(Coordinator.class);
1:365627f:         EMFTracker tracker = new EMFTracker(context, coordinator);
1:365627f:         ServiceReference<EntityManagerFactory> ref = mock(ServiceReference.class);
1:365627f:         Mockito.when(ref.getProperty(EntityManagerFactoryBuilder.JPA_UNIT_NAME)).thenReturn("testunit");
1:365627f:         Mockito.when(ref.getProperty(PersistenceUnitTransactionType.class.getName())).thenReturn("JTA");
1:365627f:         
1:365627f:         Bundle puBundle = mock(Bundle.class);
1:365627f:         BundleContext puContext = mock(BundleContext.class);
1:365627f:         when(puBundle.getBundleContext()).thenReturn(puContext);
1:365627f:         when(ref.getBundle()).thenReturn(puBundle);
1:365627f:         EntityManagerFactory emf = mock(EntityManagerFactory.class);
1:365627f:         when(puContext.getService(ref)).thenReturn(emf);
1:365627f:         ServiceRegistration<?> emSupplierReg = mock(ServiceRegistration.class, "emSupplierReg");
1:365627f:         ServiceRegistration<?> emProxyReg = mock(ServiceRegistration.class, "emProxyReg");
1:365627f:         when(puContext.registerService(any(Class.class), any(), any(Dictionary.class)))
1:365627f:             .thenReturn(emSupplierReg, emProxyReg);
1:365627f: 
1:365627f:         EMFTracker.TrackedEmf tracked = (TrackedEmf)tracker.addingService(ref);
1:365627f:         Assert.assertEquals(emf, tracked.emf);
1:365627f:         Assert.assertEquals(emSupplierReg, tracked.emSupplierReg);
1:365627f:         Assert.assertEquals(emProxyReg, tracked.emProxyReg);
1:365627f:         Assert.assertNotNull(tracked.tmTracker);
1:365627f:         Assert.assertNull(tracked.rlTxManagerReg);
1:365627f:         
1:365627f:         tracker.removedService(ref, tracked);
1:365627f:         verify(emSupplierReg, times(1)).unregister();
1:365627f:         verify(emProxyReg, times(1)).unregister();
1:365627f:         verify(puContext, times(1)).ungetService(ref);
1:365627f:     }
1:6b01678:     
1:6b01678:     @Test(expected=PersistenceException.class)
1:6b01678:     public void testOriginalExceptionThrown() {
1:6b01678:         EmSupplier emSupplier = mock(EmSupplier.class);
1:6b01678:         EntityManager em = mock(EntityManager.class);
1:6b01678:         when(emSupplier.get()).thenReturn(em);
1:6b01678:         doThrow(new PersistenceException("Message")).when(em).flush();
1:6b01678: 
1:6b01678:         EntityManager emProxy = EMFTracker.createProxy(emSupplier);
1:6b01678:         emProxy.flush();
1:6b01678:     }
1:365627f: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:6b01678
/////////////////////////////////////////////////////////////////////////
1: import static org.mockito.Mockito.doThrow;
1: import javax.persistence.EntityManager;
1: import javax.persistence.PersistenceException;
1: import org.apache.aries.jpa.supplier.EmSupplier;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test(expected=PersistenceException.class)
1:     public void testOriginalExceptionThrown() {
1:         EmSupplier emSupplier = mock(EmSupplier.class);
1:         EntityManager em = mock(EntityManager.class);
1:         when(emSupplier.get()).thenReturn(em);
1:         doThrow(new PersistenceException("Message")).when(em).flush();
1: 
1:         EntityManager emProxy = EMFTracker.createProxy(emSupplier);
1:         emProxy.flush();
1:     }
commit:365627f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.support.osgi.impl;
1: 
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.times;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: import static org.mockito.Mockito.any;
1: 
1: import java.util.Dictionary;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: 
1: import org.apache.aries.jpa.support.osgi.impl.EMFTracker;
1: import org.apache.aries.jpa.support.osgi.impl.EMFTracker.TrackedEmf;
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.mockito.Mockito;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: 
1: public class EmfTrackerTest {
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testLifecycle() {
1:         BundleContext context = mock(BundleContext.class);
1:         Coordinator coordinator = mock(Coordinator.class);
1:         EMFTracker tracker = new EMFTracker(context, coordinator);
1:         ServiceReference<EntityManagerFactory> ref = mock(ServiceReference.class);
1:         Mockito.when(ref.getProperty(EntityManagerFactoryBuilder.JPA_UNIT_NAME)).thenReturn("testunit");
1:         Mockito.when(ref.getProperty(PersistenceUnitTransactionType.class.getName())).thenReturn("JTA");
1:         
1:         Bundle puBundle = mock(Bundle.class);
1:         BundleContext puContext = mock(BundleContext.class);
1:         when(puBundle.getBundleContext()).thenReturn(puContext);
1:         when(ref.getBundle()).thenReturn(puBundle);
1:         EntityManagerFactory emf = mock(EntityManagerFactory.class);
1:         when(puContext.getService(ref)).thenReturn(emf);
1:         ServiceRegistration<?> emSupplierReg = mock(ServiceRegistration.class, "emSupplierReg");
1:         ServiceRegistration<?> emProxyReg = mock(ServiceRegistration.class, "emProxyReg");
1:         when(puContext.registerService(any(Class.class), any(), any(Dictionary.class)))
1:             .thenReturn(emSupplierReg, emProxyReg);
1: 
1:         EMFTracker.TrackedEmf tracked = (TrackedEmf)tracker.addingService(ref);
1:         Assert.assertEquals(emf, tracked.emf);
1:         Assert.assertEquals(emSupplierReg, tracked.emSupplierReg);
1:         Assert.assertEquals(emProxyReg, tracked.emProxyReg);
1:         Assert.assertNotNull(tracked.tmTracker);
1:         Assert.assertNull(tracked.rlTxManagerReg);
1:         
1:         tracker.removedService(ref, tracked);
1:         verify(emSupplierReg, times(1)).unregister();
1:         verify(emProxyReg, times(1)).unregister();
1:         verify(puContext, times(1)).ungetService(ref);
1:     }
1: }
============================================================================