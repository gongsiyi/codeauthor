1:14ceeb1: /*
1:14ceeb1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:14ceeb1:  *
1:14ceeb1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:14ceeb1:  * you may not use this file except in compliance with the License.
1:14ceeb1:  * You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing, software
1:14ceeb1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14ceeb1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14ceeb1:  * See the License for the specific language governing permissions and
1:14ceeb1:  * limitations under the License.
1:14ceeb1:  */
1:0d3d319: package org.osgi.util.promise;
1:0d3d319: 
1:0d3d319: import org.apache.aries.async.promise.PromiseImpl;
1:0d3d319: 
1:0d3d319: /**
1:0d3d319:  * A Deferred Promise resolution.
1:0d3d319:  * <p/>
1:0d3d319:  * Instances of this class can be used to create a Promise that can be resolved in the future. The associated Promise
1:0d3d319:  * can be successfully resolved with resolve(Object) or resolved with a failure with fail(Throwable).
1:0d3d319:  * <p/>
1:0d3d319:  * It can also be resolved with the resolution of another promise using resolveWith(Promise).
1:0d3d319:  * <p/>
1:0d3d319:  * The associated Promise can be provided to anyone, but the Deferred object should be made available only to the party
1:0d3d319:  * that will responsible for resolving the Promise.
1:0d3d319:  *
1:0d3d319:  * @param <T> The value type associated with the created Promise.
1:0d3d319:  */
1:0d3d319: public class Deferred<T> {
1:0d3d319:     private final PromiseImpl<T> promise;
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Create a new Deferred with an associated Promise.
1:0d3d319:      */
1:0d3d319:     public Deferred() {
1:0d3d319:         promise = new PromiseImpl<T>();
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Returns the Promise associated with this Deferred.
1:0d3d319:      *
1:0d3d319:      * @return The Promise associated with this Deferred.
1:0d3d319:      */
1:0d3d319:     public Promise<T> getPromise() {
1:0d3d319:         return promise;
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Successfully resolve the Promise associated with this Deferred.
1:0d3d319:      * <p/>
1:0d3d319:      * After the associated Promise is resolved with the specified value, all registered callbacks are called and any
1:0d3d319:      * chained Promises are resolved.
1:0d3d319:      * <p/>
1:0d3d319:      * Resolving the associated Promise happens-before any registered callback is called. That is, in a registered
1:0d3d319:      * callback, Promise.isDone() must return true and Promise.getValue() and Promise.getFailure() must not block.
1:0d3d319:      *
1:0d3d319:      * @param value The value of the resolved Promise.
1:0d3d319:      * @throws IllegalStateException If the associated Promise was already resolved.
1:0d3d319:      */
1:0d3d319:     public void resolve(T value) {
1:0d3d319:         promise.resolve(value);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Fail the Promise associated with this Deferred.
1:0d3d319:      * <p/>
1:0d3d319:      * After the associated Promise is resolved with the specified failure, all registered callbacks are called and any
1:0d3d319:      * chained Promises are resolved.
1:0d3d319:      * <p/>
1:0d3d319:      * Resolving the associated Promise happens-before any registered callback is called. That is, in a registered
1:0d3d319:      * callback, Promise.isDone() must return true and Promise.getValue() and Promise.getFailure() must not block.
1:0d3d319:      *
1:0d3d319:      * @param failure The failure of the resolved Promise. Must not be null.
1:0d3d319:      * @throws IllegalStateException If the associated Promise was already resolved.
1:0d3d319:      */
1:0d3d319:     public void fail(Throwable failure) {
1:0d3d319:         promise.fail(failure);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Resolve the Promise associated with this Deferred with the specified Promise.
1:0d3d319:      * <p/>
1:0d3d319:      * If the specified Promise is successfully resolved, the associated Promise is resolved with the value of the
1:0d3d319:      * specified Promise. If the specified Promise is resolved with a failure, the associated Promise is resolved with
1:0d3d319:      * the failure of the specified Promise.
1:0d3d319:      * <p/>
1:0d3d319:      * After the associated Promise is resolved with the specified Promise, all registered callbacks are called and any
1:0d3d319:      * chained Promises are resolved.
1:0d3d319:      * <p/>
1:0d3d319:      * Resolving the associated Promise happens-before any registered callback is called. That is, in a registered
1:0d3d319:      * callback, Promise.isDone() must return true and Promise.getValue() and Promise.getFailure() must not block
1:0d3d319:      *
1:0d3d319:      * @param with A Promise whose value or failure will be used to resolve the associated Promise. Must not be null.
1:0d3d319:      * @return A Promise that is resolved only when the associated Promise is resolved by the specified Promise. The
1:0d3d319:      * returned Promise will be successfully resolved, with the value null, if the associated Promise was resolved by
1:0d3d319:      * the specified Promise. The returned Promise will be resolved with a failure of IllegalStateException if the
1:0d3d319:      * associated Promise was already resolved when the specified Promise was resolved.
1:0d3d319:      */
1:0d3d319:     public Promise<Void> resolveWith(Promise<? extends T> with) {
1:0d3d319:         return promise.resolveWith(with);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.osgi.util.promise;
1: 
1: import org.apache.aries.async.promise.PromiseImpl;
1: 
1: /**
1:  * A Deferred Promise resolution.
1:  * <p/>
1:  * Instances of this class can be used to create a Promise that can be resolved in the future. The associated Promise
1:  * can be successfully resolved with resolve(Object) or resolved with a failure with fail(Throwable).
1:  * <p/>
1:  * It can also be resolved with the resolution of another promise using resolveWith(Promise).
1:  * <p/>
1:  * The associated Promise can be provided to anyone, but the Deferred object should be made available only to the party
1:  * that will responsible for resolving the Promise.
1:  *
1:  * @param <T> The value type associated with the created Promise.
1:  */
1: public class Deferred<T> {
1:     private final PromiseImpl<T> promise;
1: 
1:     /**
1:      * Create a new Deferred with an associated Promise.
1:      */
1:     public Deferred() {
1:         promise = new PromiseImpl<T>();
1:     }
1: 
1:     /**
1:      * Returns the Promise associated with this Deferred.
1:      *
1:      * @return The Promise associated with this Deferred.
1:      */
1:     public Promise<T> getPromise() {
1:         return promise;
1:     }
1: 
1:     /**
1:      * Successfully resolve the Promise associated with this Deferred.
1:      * <p/>
1:      * After the associated Promise is resolved with the specified value, all registered callbacks are called and any
1:      * chained Promises are resolved.
1:      * <p/>
1:      * Resolving the associated Promise happens-before any registered callback is called. That is, in a registered
1:      * callback, Promise.isDone() must return true and Promise.getValue() and Promise.getFailure() must not block.
1:      *
1:      * @param value The value of the resolved Promise.
1:      * @throws IllegalStateException If the associated Promise was already resolved.
1:      */
1:     public void resolve(T value) {
1:         promise.resolve(value);
1:     }
1: 
1:     /**
1:      * Fail the Promise associated with this Deferred.
1:      * <p/>
1:      * After the associated Promise is resolved with the specified failure, all registered callbacks are called and any
1:      * chained Promises are resolved.
1:      * <p/>
1:      * Resolving the associated Promise happens-before any registered callback is called. That is, in a registered
1:      * callback, Promise.isDone() must return true and Promise.getValue() and Promise.getFailure() must not block.
1:      *
1:      * @param failure The failure of the resolved Promise. Must not be null.
1:      * @throws IllegalStateException If the associated Promise was already resolved.
1:      */
1:     public void fail(Throwable failure) {
1:         promise.fail(failure);
1:     }
1: 
1:     /**
1:      * Resolve the Promise associated with this Deferred with the specified Promise.
1:      * <p/>
1:      * If the specified Promise is successfully resolved, the associated Promise is resolved with the value of the
1:      * specified Promise. If the specified Promise is resolved with a failure, the associated Promise is resolved with
1:      * the failure of the specified Promise.
1:      * <p/>
1:      * After the associated Promise is resolved with the specified Promise, all registered callbacks are called and any
1:      * chained Promises are resolved.
1:      * <p/>
1:      * Resolving the associated Promise happens-before any registered callback is called. That is, in a registered
1:      * callback, Promise.isDone() must return true and Promise.getValue() and Promise.getFailure() must not block
1:      *
1:      * @param with A Promise whose value or failure will be used to resolve the associated Promise. Must not be null.
1:      * @return A Promise that is resolved only when the associated Promise is resolved by the specified Promise. The
1:      * returned Promise will be successfully resolved, with the value null, if the associated Promise was resolved by
1:      * the specified Promise. The returned Promise will be resolved with a failure of IllegalStateException if the
1:      * associated Promise was already resolved when the specified Promise was resolved.
1:      */
1:     public Promise<Void> resolveWith(Promise<? extends T> with) {
1:         return promise.resolveWith(with);
1:     }
1: 
1: }
============================================================================