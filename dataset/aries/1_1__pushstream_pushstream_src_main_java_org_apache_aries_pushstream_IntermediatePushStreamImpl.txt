1:7fa86e8: /*
1:7fa86e8:  * Licensed to the Apache Software Foundation (ASF) under one
1:7fa86e8:  * or more contributor license agreements.  See the NOTICE file
1:7fa86e8:  * distributed with this work for additional information
1:7fa86e8:  * regarding copyright ownership.  The ASF licenses this file
1:7fa86e8:  * to you under the Apache License, Version 2.0 (the
1:7fa86e8:  * "License"); you may not use this file except in compliance
1:7fa86e8:  * with the License.  You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing,
1:7fa86e8:  * software distributed under the License is distributed on an
1:7fa86e8:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:7fa86e8:  * KIND, either express or implied.  See the License for the
1:7fa86e8:  * specific language governing permissions and limitations
1:7fa86e8:  * under the License.
1:7fa86e8:  */
1:7fa86e8: package org.apache.aries.pushstream;
1:7fa86e8: 
1:7fa86e8: import static org.apache.aries.pushstream.AbstractPushStreamImpl.State.*;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.Executor;
1:7fa86e8: import java.util.concurrent.ScheduledExecutorService;
1:7fa86e8: 
1:7fa86e8: import org.osgi.util.pushstream.PushStream;
1:7fa86e8: import org.osgi.util.pushstream.PushStreamProvider;
1:7fa86e8: 
1:7fa86e8: public class IntermediatePushStreamImpl<T> extends AbstractPushStreamImpl<T>
1:7fa86e8: 		implements PushStream<T> {
1:7fa86e8: 	
1:7fa86e8: 	private final AbstractPushStreamImpl< ? > previous;
1:7fa86e8: 	
1:7fa86e8: 	protected IntermediatePushStreamImpl(PushStreamProvider psp,
1:7fa86e8: 			Executor executor, ScheduledExecutorService scheduler,
1:7fa86e8: 			AbstractPushStreamImpl< ? > previous) {
1:7fa86e8: 		super(psp, executor, scheduler);
1:7fa86e8: 		this.previous = previous;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	protected boolean begin() {
1:7fa86e8: 		if(closed.compareAndSet(BUILDING, STARTED)) {
1:7fa86e8: 			beginning();
1:7fa86e8: 			previous.begin();
1:7fa86e8: 			return true;
1:7fa86e8: 		}
1:7fa86e8: 		return false;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	protected void beginning() {
1:7fa86e8: 		// The base implementation has nothing to do, but
1:7fa86e8: 		// this method is used in windowing
1:7fa86e8: 	}
1:7fa86e8: 	
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.pushstream;
1: 
1: import static org.apache.aries.pushstream.AbstractPushStreamImpl.State.*;
1: 
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.ScheduledExecutorService;
1: 
1: import org.osgi.util.pushstream.PushStream;
1: import org.osgi.util.pushstream.PushStreamProvider;
1: 
1: public class IntermediatePushStreamImpl<T> extends AbstractPushStreamImpl<T>
1: 		implements PushStream<T> {
1: 	
1: 	private final AbstractPushStreamImpl< ? > previous;
1: 	
1: 	protected IntermediatePushStreamImpl(PushStreamProvider psp,
1: 			Executor executor, ScheduledExecutorService scheduler,
1: 			AbstractPushStreamImpl< ? > previous) {
1: 		super(psp, executor, scheduler);
1: 		this.previous = previous;
1: 	}
1: 
1: 	@Override
1: 	protected boolean begin() {
1: 		if(closed.compareAndSet(BUILDING, STARTED)) {
1: 			beginning();
1: 			previous.begin();
1: 			return true;
1: 		}
1: 		return false;
1: 	}
1: 
1: 	protected void beginning() {
1: 		// The base implementation has nothing to do, but
1: 		// this method is used in windowing
1: 	}
1: 	
1: }
============================================================================