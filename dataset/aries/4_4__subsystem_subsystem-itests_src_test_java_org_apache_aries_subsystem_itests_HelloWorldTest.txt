1:69d4847: package org.apache.aries.subsystem.itests;
2:69d4847: 
1:69d4847: import static org.junit.Assert.assertEquals;
1:69d4847: import static org.junit.Assert.fail;
1:69d4847: 
1:69d4847: import java.io.File;
1:69d4847: import java.net.URI;
1:69d4847: import java.util.Dictionary;
1:69d4847: import java.util.Hashtable;
1:69d4847: 
1:57b6627: import org.apache.aries.itest.RichBundleContext;
1:69d4847: import org.apache.aries.subsystem.itests.hello.api.Hello;
1:69d4847: import org.apache.aries.util.filesystem.FileSystem;
1:69d4847: import org.apache.aries.util.filesystem.IDirectory;
1:69d4847: import org.apache.aries.util.filesystem.IDirectoryFinder;
1:69d4847: import org.junit.Test;
1:69d4847: import org.osgi.framework.BundleContext;
1:69d4847: import org.osgi.framework.ServiceRegistration;
1:69d4847: import org.osgi.service.subsystem.Subsystem;
1:69d4847: import org.osgi.service.subsystem.SubsystemException;
1:69d4847: 
1:69d4847: public class HelloWorldTest extends SubsystemTest 
2:69d4847: {
1:69d4847: 
1:69d4847: 	/*
1:69d4847: 	 * An implementation of the IDirectoryFinder interface that provides the
1:69d4847: 	 * IDirectory that corresponds to some id URI. In practice this could come 
1:69d4847: 	 * from anywhere (exploded archive on filesystem, in-memory, IDE etc) but 
1:69d4847: 	 * for the test just use an archive file. 
1:69d4847: 	 */
1:69d4847:   static class TestIDirectoryFinder implements IDirectoryFinder {
1:69d4847:     static final String IDIR_FINDERID_VALUE = "TestIDirectoryFinder";
1:69d4847:     static final String IDIR_DIRECTORYID_VALUE = "hello.esa";
1:69d4847:     static final URI HELLO_ID_URI = 
1:69d4847:      URI.create(IDIR_SCHEME + "://?" + IDIR_FINDERID_KEY + "=" + IDIR_FINDERID_VALUE
1:69d4847:       + "&" + IDIR_DIRECTORYID_KEY + "=" + IDIR_DIRECTORYID_VALUE);
1:69d4847:     static final String HELLO_ID_STRING = HELLO_ID_URI.toString();
1:69d4847:     
1:69d4847:     public IDirectory retrieveIDirectory(URI idirectoryId) {
1:69d4847:       if (HELLO_ID_URI.equals(idirectoryId)) {
1:69d4847:         File helloEsaFile = new File("hello.esa");
1:69d4847:         IDirectory helloEsaIDir = FileSystem.getFSRoot(helloEsaFile);
1:69d4847:         return helloEsaIDir;
1:69d4847:       } else {
1:69d4847:         return null;
2:69d4847:       }
1:69d4847:     }
1:69d4847:   }
1:69d4847: 
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:57b6627: 		createApplication("hello", "helloImpl.jar");
1:69d4847: 	}
1:69d4847: 
1:69d4847: 	void checkHelloSubsystem(Subsystem helloSubsystem) throws Exception
1:69d4847: 	{
1:69d4847:     helloSubsystem.start();
1:69d4847:     BundleContext bc = helloSubsystem.getBundleContext();
1:57b6627:     Hello h = new RichBundleContext(bc).getService(Hello.class);
1:69d4847:     String message = h.saySomething();
1:69d4847:     assertEquals ("Wrong message back", "something", message);
1:69d4847:     helloSubsystem.stop();
1:69d4847: 	}
1:69d4847: 	
1:69d4847: 	@Test
1:69d4847: 	public void testHelloFromFile() throws Exception 
1:69d4847: 	{
1:69d4847: 		Subsystem subsystem = installSubsystemFromFile("hello.esa");
1:69d4847: 		try {
1:69d4847: 		  checkHelloSubsystem(subsystem);
1:69d4847: 		} finally {
1:69d4847: 			uninstallSubsystemSilently(subsystem);
1:69d4847: 		}
1:69d4847: 	} 
1:69d4847: 	
1:69d4847:   @Test
1:69d4847:   public void testHelloFromIDirectory() throws Exception 
1:69d4847:   {
1:69d4847:     // Sanity check, application should not install if no IDirectoryFinder 
1:69d4847:     // services are registered, which should be the case on entry to this test.
1:69d4847:     try {
1:a990e32:       installSubsystem(getRootSubsystem(), TestIDirectoryFinder.HELLO_ID_STRING, null, (Boolean[]) null);
1:69d4847:       fail("installed esa application from idir without an idirfinder service, shouldn't be possible.");
1:69d4847:     } catch (SubsystemException se) {
1:69d4847:       // expected exception
1:69d4847:     }
1:69d4847:     
1:69d4847:     // The root subsystem already exists and has a service tracker for
1:69d4847:     // IDirectoryFinder services, so it will be notified on service registration. 
1:69d4847:     Dictionary<String, String> properties = new Hashtable<String, String>();
1:69d4847:     properties.put(IDirectoryFinder.IDIR_FINDERID_KEY, TestIDirectoryFinder.IDIR_FINDERID_VALUE);
1:11d09f4:     ServiceRegistration serviceRegistration =
1:69d4847:      bundleContext.registerService(IDirectoryFinder.class, new TestIDirectoryFinder(), properties);
1:69d4847:     
1:69d4847:     // Call the SubsystemTest.installSubsystem method that does not create a URL
1:69d4847:     // and stream from the location, as we just need the location string passed 
1:69d4847:     // through to the installing root subsystem.
1:a990e32:     Subsystem subsystem = installSubsystem(getRootSubsystem(), TestIDirectoryFinder.HELLO_ID_STRING, null, (Boolean[]) null);    
1:69d4847:     try {
1:69d4847:       checkHelloSubsystem(subsystem);
1:69d4847:     } finally {
1:69d4847:       uninstallSubsystemSilently(subsystem);
1:69d4847:       if (serviceRegistration!=null)
1:69d4847:         serviceRegistration.unregister();
1:69d4847:     }
1:69d4847:   } 
1:69d4847:   
1:69d4847: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1:       installSubsystem(getRootSubsystem(), TestIDirectoryFinder.HELLO_ID_STRING, null, (Boolean[]) null);
/////////////////////////////////////////////////////////////////////////
1:     Subsystem subsystem = installSubsystem(getRootSubsystem(), TestIDirectoryFinder.HELLO_ID_STRING, null, (Boolean[]) null);    
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:11d09f4
/////////////////////////////////////////////////////////////////////////
1:     ServiceRegistration serviceRegistration =
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.RichBundleContext;
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 		createApplication("hello", "helloImpl.jar");
1:     Hello h = new RichBundleContext(bc).getService(Hello.class);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
commit:69d4847
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.net.URI;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import org.apache.aries.subsystem.itests.hello.api.Hello;
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IDirectoryFinder;
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Inject;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class HelloWorldTest extends SubsystemTest 
1: {
0:   // Get the root subsystem bundle context.
0:   @Inject
0:   protected BundleContext bundleContext;
1: 
0: 	private static boolean _testAppCreated = false;
1: 	
1: 	/*
1: 	 * An implementation of the IDirectoryFinder interface that provides the
1: 	 * IDirectory that corresponds to some id URI. In practice this could come 
1: 	 * from anywhere (exploded archive on filesystem, in-memory, IDE etc) but 
1: 	 * for the test just use an archive file. 
1: 	 */
1:   static class TestIDirectoryFinder implements IDirectoryFinder {
1:     static final String IDIR_FINDERID_VALUE = "TestIDirectoryFinder";
1:     static final String IDIR_DIRECTORYID_VALUE = "hello.esa";
1:     static final URI HELLO_ID_URI = 
1:      URI.create(IDIR_SCHEME + "://?" + IDIR_FINDERID_KEY + "=" + IDIR_FINDERID_VALUE
1:       + "&" + IDIR_DIRECTORYID_KEY + "=" + IDIR_DIRECTORYID_VALUE);
1:     static final String HELLO_ID_STRING = HELLO_ID_URI.toString();
1:     
1:     public IDirectory retrieveIDirectory(URI idirectoryId) {
1:       if (HELLO_ID_URI.equals(idirectoryId)) {
1:         File helloEsaFile = new File("hello.esa");
1:         IDirectory helloEsaIDir = FileSystem.getFSRoot(helloEsaFile);
1:         return helloEsaIDir;
1:       } else {
1:         return null;
1:       }
1:     }
1:   }
1: 
0: 	@Before
0: 	public void installTestApp() throws Exception 
1: 	{
0: 		if (!_testAppCreated) { 
0: 			createApplication("hello", new String[]{"helloImpl.jar"});
0: 			_testAppCreated = true;
1: 		}
1: 	}
1: 
1: 	void checkHelloSubsystem(Subsystem helloSubsystem) throws Exception
1: 	{
1:     helloSubsystem.start();
1:     BundleContext bc = helloSubsystem.getBundleContext();
0:     Hello h = getOsgiService(bc, Hello.class, null, DEFAULT_TIMEOUT);
1:     String message = h.saySomething();
1:     assertEquals ("Wrong message back", "something", message);
1:     helloSubsystem.stop();
1: 	}
1: 	
1: 	@Test
1: 	public void testHelloFromFile() throws Exception 
1: 	{
1: 		Subsystem subsystem = installSubsystemFromFile("hello.esa");
1: 		try {
1: 		  checkHelloSubsystem(subsystem);
1: 		} finally {
1: 			uninstallSubsystemSilently(subsystem);
1: 		}
1: 	} 
1: 	
1:   @Test
1:   public void testHelloFromIDirectory() throws Exception 
1:   {
1:     // Sanity check, application should not install if no IDirectoryFinder 
1:     // services are registered, which should be the case on entry to this test.
1:     try {
0:       installSubsystem(getRootSubsystem(), TestIDirectoryFinder.HELLO_ID_STRING, null);
1:       fail("installed esa application from idir without an idirfinder service, shouldn't be possible.");
1:     } catch (SubsystemException se) {
1:       // expected exception
1:     }
1:     
1:     // The root subsystem already exists and has a service tracker for
1:     // IDirectoryFinder services, so it will be notified on service registration. 
1:     Dictionary<String, String> properties = new Hashtable<String, String>();
1:     properties.put(IDirectoryFinder.IDIR_FINDERID_KEY, TestIDirectoryFinder.IDIR_FINDERID_VALUE);
0:     ServiceRegistration<IDirectoryFinder> serviceRegistration = 
1:      bundleContext.registerService(IDirectoryFinder.class, new TestIDirectoryFinder(), properties);
1:     
1:     // Call the SubsystemTest.installSubsystem method that does not create a URL
1:     // and stream from the location, as we just need the location string passed 
1:     // through to the installing root subsystem.
0:     Subsystem subsystem = installSubsystem(getRootSubsystem(), TestIDirectoryFinder.HELLO_ID_STRING, null);    
1:     try {
1:       checkHelloSubsystem(subsystem);
1:     } finally {
1:       uninstallSubsystemSilently(subsystem);
1:       if (serviceRegistration!=null)
1:         serviceRegistration.unregister();
1:     }
1:   } 
1:   
1: }
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
0: public class HelloWorldTest extends SubsystemTest 
0: {
0: 	private static boolean _testAppCreated = false;
0: 		if (!_testAppCreated) { 
0: 			createApplication("hello", new String[]{"helloImpl.jar"});
0: 			_testAppCreated = true;
0: 		}
commit:98617b0
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.subsystem.itests;
0: 
0: import static org.junit.Assert.assertEquals;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.OptionUtils.combine;
0: 
0: import org.apache.aries.subsystem.itests.hello.api.Hello;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.service.subsystem.Subsystem;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public class HelloWorldTest extends InstallTest {
0: 	
0: 	@Before
0: 	public void installTestApp() throws Exception 
0: 	{
0: 		createApplication("hello", new String[]{"helloImpl.jar"});
0: 	}
0: 
0: 	@Test
0: 	public void testHello() throws Exception 
0: 	{
0: 		Subsystem subsystem = installSubsystemFromFile("hello.esa");
0: 		try {
0: 			subsystem.start();
0: 			BundleContext bc = subsystem.getBundleContext();
0: 			Hello h = getOsgiService(bc, Hello.class, null, DEFAULT_TIMEOUT);
0: 			String message = h.saySomething();
0: 			assertEquals ("Wrong message back", "something", message);
0: 			subsystem.stop();
0: 		}
0: 		finally {
0: 			uninstallSubsystemSilently(subsystem);
0: 		}
0: 	} 
0: 	
0: 	protected static Option[] updateOptions(Option[] options) 
0: 	{
0: 		Option[] helloOptions = options(
0: 				mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.itest.interfaces")
0: //				org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0: 		);
0: 		return combine(helloOptions, options);
0: 	}
0: }
============================================================================