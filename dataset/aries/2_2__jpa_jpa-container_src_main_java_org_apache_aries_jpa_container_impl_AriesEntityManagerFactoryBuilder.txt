1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.impl;
1:2cfdf52: 
1:38cf4cd: import java.util.HashMap;
1:2cfdf52: import java.util.Map;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManagerFactory;
1:2cfdf52: import javax.persistence.spi.PersistenceProvider;
1:143341f: import javax.persistence.spi.PersistenceUnitTransactionType;
1:38cf4cd: import javax.sql.DataSource;
1:2cfdf52: 
1:38cf4cd: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1:2cfdf52: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * FIXME We are currently not configuring a DataSource for the persistence unit.
1:2cfdf52:  * It still works in the tests as the DataSource is defined in the DataSourceTracker or DSFTracker.
1:2cfdf52:  * This not fully correct though.
1:2cfdf52:  */
1:2cfdf52: public class AriesEntityManagerFactoryBuilder implements EntityManagerFactoryBuilder {
1:2cfdf52:     private static final String JAVAX_PERSISTENCE_JDBC_DRIVER = "javax.persistence.jdbc.driver";
1:38cf4cd:     private static final String JAVAX_PERSISTENCE_JTA_DATASOURCE = "javax.persistence.jtaDataSource";
1:38cf4cd:     private static final String JAVAX_PERSISTENCE_NON_JTA_DATASOURCE = "javax.persistence.nonJtaDataSource";
1:143341f:     private static final String JAVAX_PERSISTENCE_TX_TYPE = "javax.persistence.transactionType";
1:2cfdf52: 
1:2cfdf52:     private PersistenceProvider provider;
1:38cf4cd:     private PersistenceUnit persistenceUnit;
1:2cfdf52:     private String driver;
1:38cf4cd:     
1:2cfdf52: 
1:38cf4cd:     public AriesEntityManagerFactoryBuilder(PersistenceProvider provider, PersistenceUnit persistenceUnit) {
1:2cfdf52:         this.provider = provider;
1:2cfdf52:         this.persistenceUnit = persistenceUnit;
1:2cfdf52:         this.driver = (String)persistenceUnit.getProperties().get(JAVAX_PERSISTENCE_JDBC_DRIVER);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public EntityManagerFactory createEntityManagerFactory(Map<String, Object> props) {
1:38cf4cd:         props = new HashMap<String, Object>(props);
1:38cf4cd:     	
1:38cf4cd:     	String newDriver = (String)props.get(JAVAX_PERSISTENCE_JDBC_DRIVER);
1:2cfdf52:         if (driver == null) {
1:2cfdf52:             driver = newDriver;
1:2cfdf52:         } else if (newDriver != null && !newDriver.equals(driver)){
1:2cfdf52:             throw new IllegalArgumentException("Can not rebind to a different database driver");
1:2cfdf52:         }
1:38cf4cd:         
1:38cf4cd:         // Handle overridden datasources in a provider agnostic way
1:38cf4cd:         // This isn't necessary for EclipseLink, but Hibernate and 
1:38cf4cd:         // OpenJPA both need some extra help.
1:38cf4cd:         Object o = props.get(JAVAX_PERSISTENCE_JTA_DATASOURCE);
1:38cf4cd:         if(o instanceof DataSource) {
1:38cf4cd:         	persistenceUnit.setJtaDataSource((DataSource) o);
1:38cf4cd:         	props.remove(JAVAX_PERSISTENCE_JTA_DATASOURCE);
1:38cf4cd:         }
1:38cf4cd: 
1:38cf4cd:         o = props.get(JAVAX_PERSISTENCE_NON_JTA_DATASOURCE);
1:38cf4cd:         if(o instanceof DataSource) {
1:38cf4cd:         	persistenceUnit.setNonJtaDataSource((DataSource) o);
1:38cf4cd:         	props.remove(JAVAX_PERSISTENCE_NON_JTA_DATASOURCE);
1:38cf4cd:         }
1:38cf4cd:         
1:143341f:         o = props.get(JAVAX_PERSISTENCE_TX_TYPE);
1:143341f:         if(o instanceof PersistenceUnitTransactionType) {
1:143341f:         	persistenceUnit.setTransactionType((PersistenceUnitTransactionType) o);
1:143341f:         } else if (o instanceof String) {
1:143341f:         	persistenceUnit.setTransactionType(
1:143341f:         			PersistenceUnitTransactionType.valueOf((String) o));
1:143341f:         }
1:143341f:         
1:2cfdf52:         return provider.createContainerEntityManagerFactory(persistenceUnit, props);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:143341f
/////////////////////////////////////////////////////////////////////////
1: import javax.persistence.spi.PersistenceUnitTransactionType;
/////////////////////////////////////////////////////////////////////////
1:     private static final String JAVAX_PERSISTENCE_TX_TYPE = "javax.persistence.transactionType";
/////////////////////////////////////////////////////////////////////////
1:         o = props.get(JAVAX_PERSISTENCE_TX_TYPE);
1:         if(o instanceof PersistenceUnitTransactionType) {
1:         	persistenceUnit.setTransactionType((PersistenceUnitTransactionType) o);
1:         } else if (o instanceof String) {
1:         	persistenceUnit.setTransactionType(
1:         			PersistenceUnitTransactionType.valueOf((String) o));
1:         }
1:         
commit:38cf4cd
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import javax.sql.DataSource;
1: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
/////////////////////////////////////////////////////////////////////////
1:     private static final String JAVAX_PERSISTENCE_JTA_DATASOURCE = "javax.persistence.jtaDataSource";
1:     private static final String JAVAX_PERSISTENCE_NON_JTA_DATASOURCE = "javax.persistence.nonJtaDataSource";
1:     private PersistenceUnit persistenceUnit;
1:     
1:     public AriesEntityManagerFactoryBuilder(PersistenceProvider provider, PersistenceUnit persistenceUnit) {
/////////////////////////////////////////////////////////////////////////
1:         props = new HashMap<String, Object>(props);
1:     	
1:     	String newDriver = (String)props.get(JAVAX_PERSISTENCE_JDBC_DRIVER);
1:         
1:         // Handle overridden datasources in a provider agnostic way
1:         // This isn't necessary for EclipseLink, but Hibernate and 
1:         // OpenJPA both need some extra help.
1:         Object o = props.get(JAVAX_PERSISTENCE_JTA_DATASOURCE);
1:         if(o instanceof DataSource) {
1:         	persistenceUnit.setJtaDataSource((DataSource) o);
1:         	props.remove(JAVAX_PERSISTENCE_JTA_DATASOURCE);
1:         }
1: 
1:         o = props.get(JAVAX_PERSISTENCE_NON_JTA_DATASOURCE);
1:         if(o instanceof DataSource) {
1:         	persistenceUnit.setNonJtaDataSource((DataSource) o);
1:         	props.remove(JAVAX_PERSISTENCE_NON_JTA_DATASOURCE);
1:         }
1:         
author:Christian Schneider
-------------------------------------------------------------------------------
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.impl;
1: 
1: import java.util.Map;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceProvider;
0: import javax.persistence.spi.PersistenceUnitInfo;
1: 
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: 
1: /**
1:  * FIXME We are currently not configuring a DataSource for the persistence unit.
1:  * It still works in the tests as the DataSource is defined in the DataSourceTracker or DSFTracker.
1:  * This not fully correct though.
1:  */
1: public class AriesEntityManagerFactoryBuilder implements EntityManagerFactoryBuilder {
1:     private static final String JAVAX_PERSISTENCE_JDBC_DRIVER = "javax.persistence.jdbc.driver";
1: 
1:     private PersistenceProvider provider;
0:     private PersistenceUnitInfo persistenceUnit;
1:     private String driver;
1: 
0:     public AriesEntityManagerFactoryBuilder(PersistenceProvider provider, PersistenceUnitInfo persistenceUnit) {
1:         this.provider = provider;
1:         this.persistenceUnit = persistenceUnit;
1:         this.driver = (String)persistenceUnit.getProperties().get(JAVAX_PERSISTENCE_JDBC_DRIVER);
1:     }
1: 
1:     @Override
1:     public EntityManagerFactory createEntityManagerFactory(Map<String, Object> props) {
0:         String newDriver = (String)props.get(JAVAX_PERSISTENCE_JDBC_DRIVER);
1:         if (driver == null) {
1:             driver = newDriver;
1:         } else if (newDriver != null && !newDriver.equals(driver)){
1:             throw new IllegalArgumentException("Can not rebind to a different database driver");
1:         }
1:         return provider.createContainerEntityManagerFactory(persistenceUnit, props);
1:     }
1: 
1: }
============================================================================