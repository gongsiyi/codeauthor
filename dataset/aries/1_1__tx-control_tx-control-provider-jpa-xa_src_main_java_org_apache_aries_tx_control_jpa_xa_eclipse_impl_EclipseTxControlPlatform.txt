1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:e9ade98: package org.apache.aries.tx.control.jpa.xa.eclipse.impl;
1:e9ade98: 
1:e9ade98: import static javax.transaction.Status.STATUS_ACTIVE;
1:e9ade98: import static javax.transaction.Status.STATUS_COMMITTED;
1:e9ade98: import static javax.transaction.Status.STATUS_COMMITTING;
1:e9ade98: import static javax.transaction.Status.STATUS_MARKED_ROLLBACK;
1:e9ade98: import static javax.transaction.Status.STATUS_NO_TRANSACTION;
1:e9ade98: import static javax.transaction.Status.STATUS_PREPARING;
1:e9ade98: import static javax.transaction.Status.STATUS_ROLLEDBACK;
1:e9ade98: import static javax.transaction.Status.STATUS_ROLLING_BACK;
1:e9ade98: import static javax.transaction.Status.STATUS_UNKNOWN;
1:e9ade98: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1:e9ade98: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1:e9ade98: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:e9ade98: import static org.osgi.service.transaction.control.TransactionStatus.PREPARING;
1:e9ade98: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1:e9ade98: 
1:e9ade98: import javax.transaction.HeuristicMixedException;
1:e9ade98: import javax.transaction.HeuristicRollbackException;
1:e9ade98: import javax.transaction.RollbackException;
1:e9ade98: import javax.transaction.Status;
1:e9ade98: import javax.transaction.Synchronization;
1:e9ade98: import javax.transaction.SystemException;
1:e9ade98: import javax.transaction.Transaction;
1:e9ade98: import javax.transaction.xa.XAResource;
1:e9ade98: 
1:e9ade98: import org.eclipse.persistence.internal.sessions.AbstractSession;
1:e9ade98: import org.eclipse.persistence.internal.sessions.UnitOfWorkImpl;
1:e9ade98: import org.eclipse.persistence.platform.server.ServerPlatformBase;
1:e9ade98: import org.eclipse.persistence.sessions.DatabaseSession;
1:e9ade98: import org.eclipse.persistence.transaction.AbstractSynchronizationListener;
1:e9ade98: import org.eclipse.persistence.transaction.AbstractTransactionController;
1:e9ade98: import org.eclipse.persistence.transaction.SynchronizationListenerFactory;
1:e9ade98: import org.osgi.service.transaction.control.TransactionContext;
1:e9ade98: import org.osgi.service.transaction.control.TransactionControl;
1:e9ade98: import org.osgi.service.transaction.control.TransactionException;
1:e9ade98: import org.osgi.service.transaction.control.TransactionStatus;
1:e9ade98: 
1:e9ade98: public class EclipseTxControlPlatform extends ServerPlatformBase {
1:e9ade98: 
1:74e23ff: 	public static void setTransactionControl(ThreadLocal<TransactionControl> txControl) {
1:74e23ff: 		TxControlAdapter.txControlToUse = txControl;
1:e9ade98: 	}
1:e9ade98: 	
1:e9ade98: 	public EclipseTxControlPlatform(DatabaseSession newDatabaseSession) {
1:e9ade98: 		super(newDatabaseSession);
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public Class<?> getExternalTransactionControllerClass() {
1:e9ade98: 		return TxControlAdapter.class;
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	public static class TxControlAdapter extends AbstractTransactionController {
1:e9ade98: 
1:e9ade98: 		/**
1:e9ade98: 		 *  This has to be static because EclipseLink doesn't allow plugins
1:e9ade98: 		 *  to be configured and passed in as instances. It is safe because
1:e9ade98: 		 *  we use a separate ClassLoader every time we create the resource.
1:e9ade98: 		 */
1:74e23ff: 		private static ThreadLocal<TransactionControl> txControlToUse;
1:74e23ff: 		
1:74e23ff: 		public TransactionControl getTxControl() {
1:74e23ff: 			TransactionControl transactionControl = txControlToUse.get();
1:74e23ff: 			if(transactionControl == null) {
1:74e23ff: 				throw new TransactionException("A No Transaction Context could not be created because there is no associated Transaction Control");
1:74e23ff: 			}
1:74e23ff: 			return transactionControl;
1:74e23ff: 		}
1:e9ade98: 		
1:e9ade98: 		public TxControlAdapter() {
1:e9ade98: 			this.listenerFactory = new TxControlListenerFactory();
1:e9ade98: 		}
1:e9ade98: 		
1:e9ade98: 		@Override
1:e9ade98: 		public boolean isRolledBack_impl(Object status) {
1:e9ade98: 			return status == ROLLED_BACK;
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected void registerSynchronization_impl(AbstractSynchronizationListener listener, Object txn)
1:e9ade98: 				throws Exception {
1:e9ade98: 			TransactionContext ctx = ((TransactionWrapper) txn).getContext();
1:e9ade98: 			ctx.preCompletion(listener::beforeCompletion);
1:e9ade98: 			ctx.postCompletion(listener::afterCompletion);
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected Object getTransaction_impl() throws Exception {
1:74e23ff: 			TransactionContext currentContext = getTxControl().getCurrentContext();
1:e9ade98: 			if(currentContext == null || currentContext.getTransactionStatus() == NO_TRANSACTION) {
1:e9ade98: 				return null;
1:e9ade98: 			} else {
1:e9ade98: 				return new TransactionWrapper(currentContext);
1:e9ade98: 			}
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected Object getTransactionKey_impl(Object transaction) throws Exception {
1:e9ade98: 			
1:e9ade98: 			return transaction == null ? null :
1:e9ade98: 				((TransactionWrapper) transaction).getContext().getTransactionKey();
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected Object getTransactionStatus_impl() throws Exception {
1:74e23ff: 			TransactionContext currentContext = getTxControl().getCurrentContext();
1:e9ade98: 			return currentContext == null ? null : currentContext.getTransactionStatus();
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected void beginTransaction_impl() throws Exception {
1:e9ade98: 			throw new TransactionException("Open scoped transactions are not supported");
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected void commitTransaction_impl() throws Exception {
1:e9ade98: 			throw new TransactionException("Open scoped transactions are not supported");
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected void rollbackTransaction_impl() throws Exception {
1:e9ade98: 			throw new TransactionException("Open scoped transactions are not supported");
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected void markTransactionForRollback_impl() throws Exception {
1:74e23ff: 			getTxControl().setRollbackOnly();
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected boolean canBeginTransaction_impl(Object status) {
1:e9ade98: 			return false;
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected boolean canCommitTransaction_impl(Object status) {
1:e9ade98: 			return false;
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected boolean canRollbackTransaction_impl(Object status) {
1:e9ade98: 			return false;
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected boolean canIssueSQLToDatabase_impl(Object status) {
1:e9ade98: 			return status == ACTIVE || status == PREPARING;
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected boolean canMergeUnitOfWork_impl(Object status) {
1:e9ade98: 			return status == COMMITTED;
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		protected String statusToString_impl(Object status) {
1:e9ade98: 			return status == null ? "No scope is active" : status.toString();
1:e9ade98: 		}
1:e9ade98: 	}
1:e9ade98: 	
1:e9ade98: 	/** 
1:e9ade98: 	 * We have to do this as despite its claims, EclipseLink JPA needs the
1:e9ade98: 	 * transaction impl to be a javax.tranasaction.Transaction :(
1:e9ade98: 	 */
1:e9ade98: 	private static class TransactionWrapper implements Transaction {
1:e9ade98: 		private final TransactionContext context;
1:e9ade98: 
1:e9ade98: 		public TransactionWrapper(TransactionContext context) {
1:e9ade98: 			this.context = context;
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		public TransactionContext getContext() {
1:e9ade98: 			return context;
1:e9ade98: 		}
1:e9ade98: 		
1:e9ade98: 		@Override
1:e9ade98: 		public void registerSynchronization(Synchronization synch)
1:e9ade98: 				throws IllegalStateException, RollbackException, SystemException {
1:e9ade98: 			context.preCompletion(synch::beforeCompletion);
1:e9ade98: 			context.postCompletion(status -> synch.afterCompletion(toIntStatus(status)));
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		public void setRollbackOnly() throws IllegalStateException, SystemException {
1:e9ade98: 			context.setRollbackOnly();
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:e9ade98: 			throw new TransactionException("Resources may not be delisted");
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		public boolean enlistResource(XAResource xaRes)
1:e9ade98: 				throws IllegalStateException, RollbackException, SystemException {
1:47a70d3: 			context.registerXAResource(xaRes, null);
1:e9ade98: 			return true;
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		public int getStatus() throws SystemException {
1:e9ade98: 			return toIntStatus(context.getTransactionStatus());
1:e9ade98: 		}
1:e9ade98: 		
1:e9ade98: 		private int toIntStatus(TransactionStatus status) {
1:e9ade98: 			switch(status) {
1:e9ade98: 				case NO_TRANSACTION:
1:e9ade98: 					return STATUS_NO_TRANSACTION;
1:e9ade98: 				case ACTIVE:
1:e9ade98: 					return STATUS_ACTIVE;
1:e9ade98: 				case PREPARING:
1:e9ade98: 					return STATUS_PREPARING;
1:e9ade98: 				case PREPARED:
1:e9ade98: 					return Status.STATUS_PREPARED;
1:e9ade98: 				case COMMITTING:
1:e9ade98: 					return STATUS_COMMITTING;
1:e9ade98: 				case COMMITTED:
1:e9ade98: 					return STATUS_COMMITTED;
1:e9ade98: 				case MARKED_ROLLBACK:
1:e9ade98: 					return STATUS_MARKED_ROLLBACK;
1:e9ade98: 				case ROLLING_BACK:
1:e9ade98: 					return STATUS_ROLLING_BACK;
1:e9ade98: 				case ROLLED_BACK:
1:e9ade98: 					return STATUS_ROLLEDBACK;
1:e9ade98: 				default:
1:e9ade98: 					return STATUS_UNKNOWN;
1:e9ade98: 			}
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException,
1:e9ade98: 				SecurityException, SystemException {
1:e9ade98: 			throw new TransactionException("Open scoped transactions are not supported");
1:e9ade98: 		}
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		public void rollback() throws IllegalStateException, SystemException {
1:e9ade98: 			throw new TransactionException("Open scoped transactions are not supported");
1:e9ade98: 		}
1:e9ade98: 	}
1:e9ade98: 	
1:e9ade98: 	public static class TxControlListenerFactory implements SynchronizationListenerFactory {
1:e9ade98: 
1:e9ade98: 		@Override
1:e9ade98: 		public AbstractSynchronizationListener newSynchronizationListener(UnitOfWorkImpl unitOfWork,
1:e9ade98: 				AbstractSession session, Object transaction, AbstractTransactionController controller) {
1:e9ade98: 			return new TxControlListener(unitOfWork, session, transaction, controller);
1:e9ade98: 		}
1:e9ade98: 		
1:e9ade98: 	}
1:e9ade98: 	
1:e9ade98: 	public static class TxControlListener extends AbstractSynchronizationListener {
1:e9ade98: 
1:e9ade98: 		public TxControlListener(UnitOfWorkImpl unitOfWork, AbstractSession session, Object transaction,
1:e9ade98: 				AbstractTransactionController controller) {
1:e9ade98: 			super(unitOfWork, session, transaction, controller);
1:e9ade98: 		}
1:e9ade98: 	}
1:e9ade98: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:74e23ff
/////////////////////////////////////////////////////////////////////////
1: 	public static void setTransactionControl(ThreadLocal<TransactionControl> txControl) {
1: 		TxControlAdapter.txControlToUse = txControl;
/////////////////////////////////////////////////////////////////////////
1: 		private static ThreadLocal<TransactionControl> txControlToUse;
1: 		
1: 		public TransactionControl getTxControl() {
1: 			TransactionControl transactionControl = txControlToUse.get();
1: 			if(transactionControl == null) {
1: 				throw new TransactionException("A No Transaction Context could not be created because there is no associated Transaction Control");
1: 			}
1: 			return transactionControl;
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 			TransactionContext currentContext = getTxControl().getCurrentContext();
/////////////////////////////////////////////////////////////////////////
1: 			TransactionContext currentContext = getTxControl().getCurrentContext();
/////////////////////////////////////////////////////////////////////////
1: 			getTxControl().setRollbackOnly();
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: 			context.registerXAResource(xaRes, null);
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e9ade98
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.xa.eclipse.impl;
1: 
1: import static javax.transaction.Status.STATUS_ACTIVE;
1: import static javax.transaction.Status.STATUS_COMMITTED;
1: import static javax.transaction.Status.STATUS_COMMITTING;
1: import static javax.transaction.Status.STATUS_MARKED_ROLLBACK;
1: import static javax.transaction.Status.STATUS_NO_TRANSACTION;
1: import static javax.transaction.Status.STATUS_PREPARING;
1: import static javax.transaction.Status.STATUS_ROLLEDBACK;
1: import static javax.transaction.Status.STATUS_ROLLING_BACK;
1: import static javax.transaction.Status.STATUS_UNKNOWN;
1: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: import static org.osgi.service.transaction.control.TransactionStatus.PREPARING;
1: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1: 
1: import javax.transaction.HeuristicMixedException;
1: import javax.transaction.HeuristicRollbackException;
1: import javax.transaction.RollbackException;
1: import javax.transaction.Status;
1: import javax.transaction.Synchronization;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.eclipse.persistence.internal.sessions.AbstractSession;
1: import org.eclipse.persistence.internal.sessions.UnitOfWorkImpl;
1: import org.eclipse.persistence.platform.server.ServerPlatformBase;
1: import org.eclipse.persistence.sessions.DatabaseSession;
1: import org.eclipse.persistence.transaction.AbstractSynchronizationListener;
1: import org.eclipse.persistence.transaction.AbstractTransactionController;
1: import org.eclipse.persistence.transaction.SynchronizationListenerFactory;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
1: import org.osgi.service.transaction.control.TransactionStatus;
1: 
1: public class EclipseTxControlPlatform extends ServerPlatformBase {
1: 
0: 	public static void setTransactionControl(TransactionControl txControl) {
0: 		TxControlAdapter.txControl = txControl;
1: 	}
1: 	
1: 	public EclipseTxControlPlatform(DatabaseSession newDatabaseSession) {
1: 		super(newDatabaseSession);
1: 	}
1: 
1: 	@Override
1: 	public Class<?> getExternalTransactionControllerClass() {
1: 		return TxControlAdapter.class;
1: 	}
1: 
1: 	public static class TxControlAdapter extends AbstractTransactionController {
1: 
1: 		/**
1: 		 *  This has to be static because EclipseLink doesn't allow plugins
1: 		 *  to be configured and passed in as instances. It is safe because
1: 		 *  we use a separate ClassLoader every time we create the resource.
1: 		 */
0: 		private static TransactionControl txControl;
1: 		
1: 		public TxControlAdapter() {
1: 			this.listenerFactory = new TxControlListenerFactory();
1: 		}
1: 		
1: 		@Override
1: 		public boolean isRolledBack_impl(Object status) {
1: 			return status == ROLLED_BACK;
1: 		}
1: 
1: 		@Override
1: 		protected void registerSynchronization_impl(AbstractSynchronizationListener listener, Object txn)
1: 				throws Exception {
1: 			TransactionContext ctx = ((TransactionWrapper) txn).getContext();
1: 			ctx.preCompletion(listener::beforeCompletion);
1: 			ctx.postCompletion(listener::afterCompletion);
1: 		}
1: 
1: 		@Override
1: 		protected Object getTransaction_impl() throws Exception {
0: 			TransactionContext currentContext = txControl.getCurrentContext();
1: 			if(currentContext == null || currentContext.getTransactionStatus() == NO_TRANSACTION) {
1: 				return null;
1: 			} else {
1: 				return new TransactionWrapper(currentContext);
1: 			}
1: 		}
1: 
1: 		@Override
1: 		protected Object getTransactionKey_impl(Object transaction) throws Exception {
1: 			
1: 			return transaction == null ? null :
1: 				((TransactionWrapper) transaction).getContext().getTransactionKey();
1: 		}
1: 
1: 		@Override
1: 		protected Object getTransactionStatus_impl() throws Exception {
0: 			TransactionContext currentContext = txControl.getCurrentContext();
1: 			return currentContext == null ? null : currentContext.getTransactionStatus();
1: 		}
1: 
1: 		@Override
1: 		protected void beginTransaction_impl() throws Exception {
1: 			throw new TransactionException("Open scoped transactions are not supported");
1: 		}
1: 
1: 		@Override
1: 		protected void commitTransaction_impl() throws Exception {
1: 			throw new TransactionException("Open scoped transactions are not supported");
1: 		}
1: 
1: 		@Override
1: 		protected void rollbackTransaction_impl() throws Exception {
1: 			throw new TransactionException("Open scoped transactions are not supported");
1: 		}
1: 
1: 		@Override
1: 		protected void markTransactionForRollback_impl() throws Exception {
0: 			txControl.setRollbackOnly();
1: 		}
1: 
1: 		@Override
1: 		protected boolean canBeginTransaction_impl(Object status) {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		protected boolean canCommitTransaction_impl(Object status) {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		protected boolean canRollbackTransaction_impl(Object status) {
1: 			return false;
1: 		}
1: 
1: 		@Override
1: 		protected boolean canIssueSQLToDatabase_impl(Object status) {
1: 			return status == ACTIVE || status == PREPARING;
1: 		}
1: 
1: 		@Override
1: 		protected boolean canMergeUnitOfWork_impl(Object status) {
1: 			return status == COMMITTED;
1: 		}
1: 
1: 		@Override
1: 		protected String statusToString_impl(Object status) {
1: 			return status == null ? "No scope is active" : status.toString();
1: 		}
1: 	}
1: 	
1: 	/** 
1: 	 * We have to do this as despite its claims, EclipseLink JPA needs the
1: 	 * transaction impl to be a javax.tranasaction.Transaction :(
1: 	 */
1: 	private static class TransactionWrapper implements Transaction {
1: 		private final TransactionContext context;
1: 
1: 		public TransactionWrapper(TransactionContext context) {
1: 			this.context = context;
1: 		}
1: 
1: 		public TransactionContext getContext() {
1: 			return context;
1: 		}
1: 		
1: 		@Override
1: 		public void registerSynchronization(Synchronization synch)
1: 				throws IllegalStateException, RollbackException, SystemException {
1: 			context.preCompletion(synch::beforeCompletion);
1: 			context.postCompletion(status -> synch.afterCompletion(toIntStatus(status)));
1: 		}
1: 
1: 		@Override
1: 		public void setRollbackOnly() throws IllegalStateException, SystemException {
1: 			context.setRollbackOnly();
1: 		}
1: 
1: 		@Override
1: 		public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1: 			throw new TransactionException("Resources may not be delisted");
1: 		}
1: 
1: 		@Override
1: 		public boolean enlistResource(XAResource xaRes)
1: 				throws IllegalStateException, RollbackException, SystemException {
0: 			context.registerXAResource(xaRes);
1: 			return true;
1: 		}
1: 
1: 		@Override
1: 		public int getStatus() throws SystemException {
1: 			return toIntStatus(context.getTransactionStatus());
1: 		}
1: 		
1: 		private int toIntStatus(TransactionStatus status) {
1: 			switch(status) {
1: 				case NO_TRANSACTION:
1: 					return STATUS_NO_TRANSACTION;
1: 				case ACTIVE:
1: 					return STATUS_ACTIVE;
1: 				case PREPARING:
1: 					return STATUS_PREPARING;
1: 				case PREPARED:
1: 					return Status.STATUS_PREPARED;
1: 				case COMMITTING:
1: 					return STATUS_COMMITTING;
1: 				case COMMITTED:
1: 					return STATUS_COMMITTED;
1: 				case MARKED_ROLLBACK:
1: 					return STATUS_MARKED_ROLLBACK;
1: 				case ROLLING_BACK:
1: 					return STATUS_ROLLING_BACK;
1: 				case ROLLED_BACK:
1: 					return STATUS_ROLLEDBACK;
1: 				default:
1: 					return STATUS_UNKNOWN;
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException,
1: 				SecurityException, SystemException {
1: 			throw new TransactionException("Open scoped transactions are not supported");
1: 		}
1: 
1: 		@Override
1: 		public void rollback() throws IllegalStateException, SystemException {
1: 			throw new TransactionException("Open scoped transactions are not supported");
1: 		}
1: 	}
1: 	
1: 	public static class TxControlListenerFactory implements SynchronizationListenerFactory {
1: 
1: 		@Override
1: 		public AbstractSynchronizationListener newSynchronizationListener(UnitOfWorkImpl unitOfWork,
1: 				AbstractSession session, Object transaction, AbstractTransactionController controller) {
1: 			return new TxControlListener(unitOfWork, session, transaction, controller);
1: 		}
1: 		
1: 	}
1: 	
1: 	public static class TxControlListener extends AbstractSynchronizationListener {
1: 
1: 		public TxControlListener(UnitOfWorkImpl unitOfWork, AbstractSession session, Object transaction,
1: 				AbstractTransactionController controller) {
1: 			super(unitOfWork, session, transaction, controller);
1: 		}
1: 	}
1: }
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
0: //package org.apache.aries.tx.control.jpa.xa.eclipse.impl;
0: //
0: //import org.eclipse.persistence.platform.server.ServerPlatformBase;
0: //
0: //public class EclipseTxControlPlatform extends ServerPlatformBase {
0: //
0: //	@Override
0: //	public Class getExternalTransactionControllerClass() {
0: //		// TODO Auto-generated method stub
0: //		return null;
0: //	}
0: //
0: //}
============================================================================