1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.blueprint.impl;
5:2cfdf52: 
1:2cfdf52: import java.net.URL;
1:ec3ea65: import java.util.Collections;
1:2cfdf52: import java.util.Set;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:2cfdf52: import org.apache.aries.blueprint.NamespaceHandler;
1:2cfdf52: import org.apache.aries.blueprint.ParserContext;
1:2cfdf52: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1:2cfdf52: import org.apache.aries.blueprint.mutable.MutablePassThroughMetadata;
1:2cfdf52: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:2cfdf52: import org.osgi.service.blueprint.reflect.Metadata;
1:2cfdf52: import org.w3c.dom.Element;
1:2cfdf52: import org.w3c.dom.Node;
1:2cfdf52: 
1:2cfdf52: public class JpaNsHandler implements NamespaceHandler {
1:2cfdf52: 
1:69fc795:     public static final String NAMESPACE_JPA_20 = "http://aries.apache.org/xmlns/jpa/v2.0.0";
1:3071c3b:     public static final String NAMESPACE_JPAN_10 = "http://aries.apache.org/xmlns/jpan/v1.0.0";
1:3071c3b: 
1:ec3ea65:     private void parseElement(Element elt, ParserContext pc) {
1:2cfdf52:         ComponentDefinitionRegistry cdr = pc.getComponentDefinitionRegistry();
1:2cfdf52: 
1:ec3ea65:         if ("enable".equals(elt.getLocalName()) &&
1:ec3ea65:             !cdr.containsComponentDefinition(JpaComponentProcessor.class.getSimpleName())) {
1:ec3ea65:             MutableBeanMetadata meta = pc.createMetadata(MutableBeanMetadata.class);
1:ec3ea65:             meta.setId(JpaComponentProcessor.class.getSimpleName());
1:ec3ea65:             meta.setRuntimeClass(JpaComponentProcessor.class);
1:ec3ea65:             meta.setProcessor(true);
1:ec3ea65:             meta.addProperty("pc", passThrough(pc, pc));
1:ec3ea65:             cdr.registerComponentDefinition(meta);
5:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private MutablePassThroughMetadata passThrough(ParserContext pc, Object obj) {
1:0d59ccb:         MutablePassThroughMetadata meta = pc.createMetadata(MutablePassThroughMetadata.class);
1:0d59ccb:         meta.setObject(obj);
1:0d59ccb:         return meta;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public ComponentMetadata decorate(Node node, ComponentMetadata cm, ParserContext pc) {
1:2cfdf52:         if (node instanceof Element) {
1:ec3ea65:             parseElement((Element)node, pc);
1:2cfdf52:         }
1:2cfdf52:         return cm;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public Metadata parse(Element elt, ParserContext pc) {
1:ec3ea65:         parseElement(elt, pc);
2:2cfdf52:         return null;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     public URL getSchemaLocation(String namespace) {
1:3071c3b:         if (NAMESPACE_JPAN_10.equals(namespace)) {
1:3071c3b:             // deprecated (remove in jpa 3)
1:3071c3b:             return this.getClass().getResource("/jpan10.xsd");
1:3071c3b:         } else if (NAMESPACE_JPA_20.equals(namespace)) {
1:3071c3b:             return this.getClass().getResource("/jpa20.xsd");
1:3071c3b:         } else {
1:11515bd:             return null;
1:3071c3b:         }
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     @Override
1:2cfdf52:     @SuppressWarnings("rawtypes")
1:2cfdf52:     public Set<Class> getManagedClasses() {
1:ec3ea65:         return Collections.emptySet();
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:11515bd
/////////////////////////////////////////////////////////////////////////
1:             return null;
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:     private void parseElement(Element elt, ParserContext pc) {
1:         if ("enable".equals(elt.getLocalName()) &&
1:             !cdr.containsComponentDefinition(JpaComponentProcessor.class.getSimpleName())) {
1:             MutableBeanMetadata meta = pc.createMetadata(MutableBeanMetadata.class);
1:             meta.setId(JpaComponentProcessor.class.getSimpleName());
1:             meta.setRuntimeClass(JpaComponentProcessor.class);
1:             meta.setProcessor(true);
1:             meta.addProperty("pc", passThrough(pc, pc));
1:             cdr.registerComponentDefinition(meta);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             parseElement((Element)node, pc);
1:     @Override
1:         parseElement(elt, pc);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         return Collections.emptySet();
commit:69fc795
/////////////////////////////////////////////////////////////////////////
1:     public static final String NAMESPACE_JPA_20 = "http://aries.apache.org/xmlns/jpa/v2.0.0";
0:             if (!cdr.containsComponentDefinition(JpaComponentProcessor.class.getSimpleName())) {
0:                 meta.setId(JpaComponentProcessor.class.getSimpleName());
0:                 meta.setRuntimeClass(JpaComponentProcessor.class);
0:                 meta.addProperty("pc", passThrough(pc, pc));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3071c3b
/////////////////////////////////////////////////////////////////////////
0:     public static final String NAMESPACE_JPA_20 = "http://aries.apache.org/xmlns/jpan/v2.0.0";
1:     public static final String NAMESPACE_JPAN_10 = "http://aries.apache.org/xmlns/jpan/v1.0.0";
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (NAMESPACE_JPAN_10.equals(namespace)) {
1:             // deprecated (remove in jpa 3)
1:             return this.getClass().getResource("/jpan10.xsd");
1:         } else if (NAMESPACE_JPA_20.equals(namespace)) {
1:             return this.getClass().getResource("/jpa20.xsd");
1:         } else {
0:             throw new IllegalArgumentException("Unknown namespace for jpa: " + namespace);
1:         }
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:         MutablePassThroughMetadata meta = pc.createMetadata(MutablePassThroughMetadata.class);
1:         meta.setObject(obj);
1:         return meta;
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.blueprint.impl;
1: 
0: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1: 
1: import java.net.URL;
0: import java.util.Collections;
0: import java.util.List;
1: import java.util.Set;
1: 
0: import javax.transaction.TransactionManager;
1: 
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1: import org.apache.aries.blueprint.mutable.MutablePassThroughMetadata;
0: import org.apache.aries.blueprint.mutable.MutableReferenceMetadata;
0: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
0: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
1: public class JpaNsHandler implements NamespaceHandler {
1: 
0:     private void parseElement(Element elt, ComponentMetadata cm, ParserContext pc) {
1:         ComponentDefinitionRegistry cdr = pc.getComponentDefinitionRegistry();
1: 
0:         if ("enable".equals(elt.getLocalName())) {
0:             if (!cdr.containsComponentDefinition(JpaBeanProcessor.JPA_PROCESSOR_BEAN_NAME)) {
0:                 MutableBeanMetadata meta = pc.createMetadata(MutableBeanMetadata.class);
0:                 meta.setId(JpaBeanProcessor.JPA_PROCESSOR_BEAN_NAME);
0:                 meta.setRuntimeClass(JpaBeanProcessor.class);
0:                 meta.setProcessor(true);
0:                 meta.addProperty("cdr", passThrough(pc, cdr));
0:                 cdr.registerComponentDefinition(meta);
1:             }
1:         }
1:     }
1: 
1:     private MutablePassThroughMetadata passThrough(ParserContext pc, Object obj) {
0:         MutablePassThroughMetadata cdrMeta = pc.createMetadata(MutablePassThroughMetadata.class);
0:         cdrMeta.setObject(obj);
0:         return cdrMeta;
1:     }
1: 
1:     public ComponentMetadata decorate(Node node, ComponentMetadata cm, ParserContext pc) {
0:         System.out.println(cm.getId());
1:         if (node instanceof Element) {
0:             Element elt = (Element)node;
0:             parseElement(elt, cm, pc);
1:         }
1:         return cm;
1:     }
1: 
1:     public Metadata parse(Element elt, ParserContext pc) {
0:         parseElement(elt, pc.getEnclosingComponent(), pc);
1:         return null;
1:     }
1: 
1:     public URL getSchemaLocation(String namespace) {
0:         return this.getClass().getResource("/jpa10.xsd");
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:     public Set<Class> getManagedClasses() {
1:         return null;
1:     }
1: 
0:     @SuppressWarnings("unchecked")
0:     ComponentMetadata createEmSupplierRef(ParserContext pc, String unitName) {
0:         final MutableReferenceMetadata refMetadata = pc.createMetadata(MutableReferenceMetadata.class);
0:         refMetadata.setActivation(getDefaultActivation(pc));
0:         refMetadata.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
0:         refMetadata.setRuntimeInterface(EmSupplier.class);
0:         refMetadata.setInterface(EmSupplier.class.getName());
0:         refMetadata.setFilter(String.format("(%s=%s)", JPA_UNIT_NAME, unitName));
0:         refMetadata.setTimeout(Integer.parseInt(pc.getDefaultTimeout()));
0:         refMetadata.setDependsOn((List<String>)Collections.EMPTY_LIST);
0:         refMetadata.setId(pc.generateId());
0:         return refMetadata;
1:     }
1:     
0:     @SuppressWarnings("unchecked")
0:     ComponentMetadata createTransactionManagerRef(ParserContext pc) {
0:         final MutableReferenceMetadata refMetadata = pc.createMetadata(MutableReferenceMetadata.class);
0:         refMetadata.setActivation(getDefaultActivation(pc));
0:         refMetadata.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
0:         refMetadata.setRuntimeInterface(TransactionManager.class);
0:         refMetadata.setInterface(TransactionManager.class.getName());
0:         refMetadata.setTimeout(Integer.parseInt(pc.getDefaultTimeout()));
0:         refMetadata.setDependsOn((List<String>)Collections.EMPTY_LIST);
0:         refMetadata.setId(pc.generateId());
0:         return refMetadata;
1:     }
1: 
0:     private int getDefaultActivation(ParserContext ctx) {
0:         return "ACTIVATION_EAGER".equalsIgnoreCase(ctx.getDefaultActivation())
0:             ? ReferenceMetadata.ACTIVATION_EAGER : ReferenceMetadata.ACTIVATION_LAZY;
1:     }
1: }
============================================================================