1:6461e4c: /*
1:6461e4c:  * Licensed to the Apache Software Foundation (ASF) under one
1:6461e4c:  * or more contributor license agreements.  See the NOTICE file
1:6461e4c:  * distributed with this work for additional information
1:6461e4c:  * regarding copyright ownership.  The ASF licenses this file
1:6461e4c:  * to you under the Apache License, Version 2.0 (the
1:6461e4c:  * "License"); you may not use this file except in compliance
1:6461e4c:  * with the License.  You may obtain a copy of the License at
1:6461e4c:  *
1:6461e4c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6461e4c:  *
1:6461e4c:  * Unless required by applicable law or agreed to in writing,
1:6461e4c:  * software distributed under the License is distributed on an
1:6461e4c:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:6461e4c:  * KIND, either express or implied.  See the License for the
1:6461e4c:  * specific language governing permissions and limitations
1:6461e4c:  * under the License.
1:6461e4c:  */
1:475ef33: package org.apache.aries.proxy.impl.interfaces;
1:475ef33: 
1:538c411: import java.security.AllPermission;
1:538c411: import java.security.PermissionCollection;
1:538c411: import java.security.Permissions;
1:475ef33: import java.security.ProtectionDomain;
1:475ef33: import java.util.HashSet;
1:451a003: import java.util.LinkedHashSet;
1:475ef33: import java.util.Map;
1:fec17a0: import java.util.Set;
1:d014a6c: import java.util.SortedSet;
1:475ef33: import java.util.concurrent.ConcurrentHashMap;
1:475ef33: import java.util.concurrent.ConcurrentMap;
1:fec17a0: import java.util.concurrent.locks.Lock;
1:fec17a0: import java.util.concurrent.locks.ReadWriteLock;
1:fec17a0: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:475ef33: 
1:475ef33: import org.apache.aries.proxy.InvocationListener;
1:475ef33: import org.apache.aries.proxy.UnableToProxyException;
1:475ef33: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
1:475ef33: import org.apache.aries.proxy.weaving.WovenProxy;
1:475ef33: import org.apache.aries.util.AriesFrameworkUtil;
1:475ef33: import org.osgi.framework.Bundle;
1:475ef33: 
1:475ef33: /** An implementation of ClassLoader that will be used to define our proxy class */
1:475ef33: final class ProxyClassLoader extends ClassLoader {
1:475ef33:   
1:538c411:   private static final ProtectionDomain PROXY_PROTECTION_DOMAIN;
1:538c411:   
1:538c411:   static {
1:538c411:     PermissionCollection pc = new Permissions();
1:538c411:     pc.add(new AllPermission());
1:538c411:     PROXY_PROTECTION_DOMAIN = new ProtectionDomain(null, pc);
1:538c411:   }
1:538c411:   
1:475ef33:   /** A {@link Map} of classes we already know */
1:451a003:   private final ConcurrentMap<LinkedHashSet<Class<?>>, String> classes = 
1:451a003:                 new ConcurrentHashMap<LinkedHashSet<Class<?>>, String>();
1:475ef33:   
1:fec17a0:   private final ConcurrentMap<String, Class<?>> locatedClasses = 
1:fec17a0:                 new ConcurrentHashMap<String, Class<?>>();
1:fec17a0:   
1:fec17a0:   private final Set<Class<?>> ifaces = new HashSet<Class<?>>();
1:fec17a0:   
1:fec17a0:   private final ReadWriteLock ifacesLock = new ReentrantReadWriteLock();
1:fec17a0:   
1:475ef33:   public ProxyClassLoader(Bundle bundle) {
1:475ef33:     super(AriesFrameworkUtil.getClassLoader(bundle));
1:475ef33:   }
1:475ef33: 
1:475ef33:   @Override
1:475ef33:   protected Class<?> findClass(String className) {
1:475ef33:     
1:475ef33:     if(WovenProxy.class.getName().equals(className))
1:475ef33:       return WovenProxy.class;
1:475ef33:     else if (InvocationListener.class.getName().equals(className))
1:475ef33:       return InvocationListener.class;
1:fec17a0:     else {
1:fec17a0:       Class<?> c = locatedClasses.get(className);
1:fec17a0:       if(c != null)
1:fec17a0:         return c;
1:fec17a0:       Lock rLock = ifacesLock.readLock();
1:fec17a0:       rLock.lock();
1:fec17a0:       try {
1:fec17a0:         Set<ClassLoader> cls = new HashSet<ClassLoader>();
1:fec17a0:         for(Class<?> iface : ifaces) {
1:fec17a0:           if(cls.add(iface.getClassLoader())) {
1:fec17a0:             try {
1:fec17a0:               c = Class.forName(className, false, iface.getClassLoader());
1:fec17a0:               locatedClasses.put(className, c);
1:fec17a0:               return c;
1:fec17a0:             } catch (ClassNotFoundException e) {
1:fec17a0:               // This is a no-op
1:fec17a0:             }
1:fec17a0:           }
1:fec17a0:         }
1:fec17a0:       } finally {
1:fec17a0:         rLock.unlock();
1:fec17a0:       }
1:fec17a0:     }
1:fec17a0:     return null;
1:475ef33:   }
1:475ef33:   
1:23a140b:   /**
1:23a140b:    * Test whether the classloader is invalidated by the set of classes
1:23a140b:    * @return
1:23a140b:    */
1:23a140b:   public boolean isInvalid(Set<Class<?>> createSet) {
1:23a140b:       for (Class<?> iface : createSet) {
1:23a140b:           try {
1:23a140b:               Class<?> newIFace = Class.forName(iface.getName(), false, this);
1:23a140b:               if (!!!newIFace.equals(iface)) return true;
1:23a140b:           } catch (ClassNotFoundException cnfe) {
1:23a140b:               return true;
1:23a140b:           }
1:23a140b:       }
1:475ef33:       
1:23a140b:       return false;
1:23a140b:   }
1:d014a6c: 
1:8f852b6:   public Class<?> createProxyClass(Class<?> superclass, SortedSet<Class<?>> interfaces) throws UnableToProxyException {
1:23a140b:     
1:d014a6c:     LinkedHashSet<Class<?>> createSet = new LinkedHashSet<Class<?>>(interfaces);
1:d014a6c:     //Even a null superclass helps with key uniqueness
1:d014a6c:     createSet.add(superclass);
1:23a140b:     
1:475ef33:     String className = classes.get(createSet);
1:475ef33:     
1:475ef33:     if(className != null) {
1:475ef33:       try {
1:475ef33:         return Class.forName(className, false, this);
1:475ef33:       } catch (ClassNotFoundException cnfe) {
1:475ef33:         //This is odd, but we should be able to recreate the class, continue
1:475ef33:         classes.remove(createSet);
1:475ef33:       }
1:475ef33:     }
1:475ef33:     
1:fec17a0:     Lock wLock = ifacesLock.writeLock();
1:fec17a0:     wLock.lock();
1:fec17a0:     try {
1:d014a6c:       //We want the superclass, but only if it isn't null
1:d014a6c:       ifaces.addAll(interfaces);
1:d014a6c:       if(superclass != null) ifaces.add(superclass);
1:fec17a0:     } finally {
1:fec17a0:       wLock.unlock();
1:fec17a0:     }
1:fec17a0:     
1:475ef33:     className = "Proxy" + AbstractWovenProxyAdapter.getSanitizedUUIDString();
1:475ef33:     
1:475ef33:     InterfaceCombiningClassAdapter icca = new InterfaceCombiningClassAdapter(
1:d014a6c:         className, this, superclass, interfaces);
1:475ef33:     
1:538c411:     //Use a special protection domain that grants AllPermission to our Proxy
1:538c411:     //object. This is important so that we never get in the way of any security
1:538c411:     //checks. This isn't unsafe because we only add simple dispatch/listener code
1:538c411:     
1:475ef33:     try {
1:475ef33:       byte[] bytes = icca.generateBytes();
1:538c411:       Class<?> c = defineClass(className, bytes, 0, bytes.length, 
1:538c411:           PROXY_PROTECTION_DOMAIN);
1:475ef33:       String old = classes.putIfAbsent(createSet, className);
1:475ef33:       if(old != null) {
1:475ef33:         c = Class.forName(className, false, this);
1:475ef33:       }
1:475ef33:       return c;
1:475ef33:     } catch (ClassFormatError cfe) {
1:475ef33:       throw new UnableToProxyException(createSet.iterator().next(), cfe);
1:475ef33:     } catch (ClassNotFoundException e) {
1:475ef33:       throw new UnableToProxyException(createSet.iterator().next(), e);
1:475ef33:     }
1:475ef33:   }
1:475ef33: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1:   public Class<?> createProxyClass(Class<?> superclass, SortedSet<Class<?>> interfaces) throws UnableToProxyException {
commit:d014a6c
/////////////////////////////////////////////////////////////////////////
1: import java.util.SortedSet;
/////////////////////////////////////////////////////////////////////////
0:   public Class<?> createProxyClass(Class<? extends WovenProxy> superclass, SortedSet<Class<?>> interfaces) throws UnableToProxyException {
1:     
1:     LinkedHashSet<Class<?>> createSet = new LinkedHashSet<Class<?>>(interfaces);
1:     //Even a null superclass helps with key uniqueness
1:     createSet.add(superclass);
/////////////////////////////////////////////////////////////////////////
1:       //We want the superclass, but only if it isn't null
1:       ifaces.addAll(interfaces);
1:       if(superclass != null) ifaces.add(superclass);
/////////////////////////////////////////////////////////////////////////
1:         className, this, superclass, interfaces);
commit:451a003
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedHashSet;
/////////////////////////////////////////////////////////////////////////
1:   private final ConcurrentMap<LinkedHashSet<Class<?>>, String> classes = 
1:                 new ConcurrentHashMap<LinkedHashSet<Class<?>>, String>();
/////////////////////////////////////////////////////////////////////////
0:   public Class<?> createProxyClass(LinkedHashSet<Class<?>> createSet) throws UnableToProxyException {
commit:538c411
/////////////////////////////////////////////////////////////////////////
1: import java.security.AllPermission;
1: import java.security.PermissionCollection;
1: import java.security.Permissions;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private static final ProtectionDomain PROXY_PROTECTION_DOMAIN;
1:   
1:   static {
1:     PermissionCollection pc = new Permissions();
1:     pc.add(new AllPermission());
1:     PROXY_PROTECTION_DOMAIN = new ProtectionDomain(null, pc);
1:   }
1:   
/////////////////////////////////////////////////////////////////////////
1:     //Use a special protection domain that grants AllPermission to our Proxy
1:     //object. This is important so that we never get in the way of any security
1:     //checks. This isn't unsafe because we only add simple dispatch/listener code
1:     
1:       Class<?> c = defineClass(className, bytes, 0, bytes.length, 
1:           PROXY_PROTECTION_DOMAIN);
commit:fec17a0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: import java.util.concurrent.locks.Lock;
1: import java.util.concurrent.locks.ReadWriteLock;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
0: import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
/////////////////////////////////////////////////////////////////////////
1:   private final ConcurrentMap<String, Class<?>> locatedClasses = 
1:                 new ConcurrentHashMap<String, Class<?>>();
1:   
1:   private final Set<Class<?>> ifaces = new HashSet<Class<?>>();
1:   
1:   private final ReadWriteLock ifacesLock = new ReentrantReadWriteLock();
1:   
/////////////////////////////////////////////////////////////////////////
1:     else {
1:       Class<?> c = locatedClasses.get(className);
1:       if(c != null)
1:         return c;
1:       Lock rLock = ifacesLock.readLock();
1:       rLock.lock();
1:       try {
1:         Set<ClassLoader> cls = new HashSet<ClassLoader>();
1:         for(Class<?> iface : ifaces) {
1:           if(cls.add(iface.getClassLoader())) {
1:             try {
1:               c = Class.forName(className, false, iface.getClassLoader());
1:               locatedClasses.put(className, c);
1:               return c;
1:             } catch (ClassNotFoundException e) {
1:               // This is a no-op
1:             }
1:           }
1:         }
1:       } finally {
1:         rLock.unlock();
1:       }
1:     }
1:     return null;
/////////////////////////////////////////////////////////////////////////
1:     Lock wLock = ifacesLock.writeLock();
1:     wLock.lock();
1:     try {
0:       ifaces.addAll(createSet);
1:     } finally {
1:       wLock.unlock();
1:     }
1:     
0:     //Do not use a protection domain the real code will inherit permissions from
0:     //the real class, not the proxy class
0:       Class<?> c = defineClass(className, bytes, 0, bytes.length);
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.impl.interfaces;
1: 
1: import java.security.ProtectionDomain;
0: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: 
1: import org.apache.aries.proxy.InvocationListener;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
1: import org.apache.aries.proxy.weaving.WovenProxy;
1: import org.apache.aries.util.AriesFrameworkUtil;
0: import org.apache.aries.util.BundleToClassLoaderAdapter;
1: import org.osgi.framework.Bundle;
1: 
1: /** An implementation of ClassLoader that will be used to define our proxy class */
1: final class ProxyClassLoader extends ClassLoader {
1:   
1:   /** A {@link Map} of classes we already know */
0:   private final ConcurrentMap<HashSet<Class<?>>, String> classes = 
0:                 new ConcurrentHashMap<HashSet<Class<?>>, String>();
1:   
1:   public ProxyClassLoader(Bundle bundle) {
1:     super(AriesFrameworkUtil.getClassLoader(bundle));
1:   }
1: 
1:   @Override
1:   protected Class<?> findClass(String className) {
1:     
1:     if(WovenProxy.class.getName().equals(className))
1:       return WovenProxy.class;
1:     else if (InvocationListener.class.getName().equals(className))
1:       return InvocationListener.class;
0:     else 
0:       return null;
1:   }
1: 
0:   public Class<?> createProxyClass(HashSet<Class<?>> createSet) throws UnableToProxyException {
1:     
1:     String className = classes.get(createSet);
1:     
1:     if(className != null) {
1:       try {
1:         return Class.forName(className, false, this);
1:       } catch (ClassNotFoundException cnfe) {
1:         //This is odd, but we should be able to recreate the class, continue
1:         classes.remove(createSet);
1:       }
1:     }
1:     
1:     className = "Proxy" + AbstractWovenProxyAdapter.getSanitizedUUIDString();
1:     
1:     InterfaceCombiningClassAdapter icca = new InterfaceCombiningClassAdapter(
0:         className, this, createSet);
1:     
0:     //Use the protection domain of the first interface in the set
1:     try {
1:       byte[] bytes = icca.generateBytes();
0:       ProtectionDomain pd = createSet.iterator().next().getProtectionDomain();
0:       Class<?> c = defineClass(className, bytes, 0, bytes.length, pd);
1:       String old = classes.putIfAbsent(createSet, className);
1:       if(old != null) {
1:         c = Class.forName(className, false, this);
1:       }
1:       return c;
1:     } catch (ClassFormatError cfe) {
1:       throw new UnableToProxyException(createSet.iterator().next(), cfe);
1:     } catch (ClassNotFoundException e) {
1:       throw new UnableToProxyException(createSet.iterator().next(), e);
1:     }
1:   }
1: }
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:6461e4c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:23a140b
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * Test whether the classloader is invalidated by the set of classes
1:    * @return
1:    */
1:   public boolean isInvalid(Set<Class<?>> createSet) {
1:       for (Class<?> iface : createSet) {
1:           try {
1:               Class<?> newIFace = Class.forName(iface.getName(), false, this);
1:               if (!!!newIFace.equals(iface)) return true;
1:           } catch (ClassNotFoundException cnfe) {
1:               return true;
1:           }
1:       }
1:       
1:       return false;
1:   }
============================================================================