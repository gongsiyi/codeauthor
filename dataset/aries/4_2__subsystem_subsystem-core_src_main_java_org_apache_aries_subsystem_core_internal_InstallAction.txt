1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:dc5d52f: package org.apache.aries.subsystem.core.internal;
1:777b216: 
1:d6eb080: import java.io.InputStream;
1:dc5d52f: import java.security.AccessControlContext;
1:dc5d52f: import java.security.AccessController;
1:dc5d52f: import java.security.PrivilegedAction;
1:777b216: 
1:5bd3bf6: import org.apache.aries.util.filesystem.IDirectory;
1:dc5d52f: import org.osgi.service.coordinator.Coordination;
1:dc5d52f: import org.osgi.service.coordinator.CoordinationException;
1:a990e32: import org.osgi.service.subsystem.Subsystem.State;
1:dc5d52f: import org.osgi.service.subsystem.SubsystemException;
1:225bcae: 
1:5bd3bf6: public class InstallAction implements PrivilegedAction<BasicSubsystem> {
1:5bd3bf6: 	private final IDirectory content;
1:dc5d52f: 	private final AccessControlContext context;
1:d6eb080: 	private final InputStream deploymentManifest;
1:dc5d52f: 	private final String location;
1:5bd3bf6: 	private final BasicSubsystem parent;
7:dc5d52f: 	
1:d6eb080: 	public InstallAction(String location, IDirectory content, BasicSubsystem parent, AccessControlContext context, InputStream deploymentManifest) {
1:dc5d52f: 		this.location = location;
1:dc5d52f: 		this.content = content;
1:dc5d52f: 		this.parent = parent;
1:dc5d52f: 		this.context = context;
1:d6eb080: 		this.deploymentManifest = deploymentManifest;
1:547a8ce: 	}
1:777b216: 	
1:777b216: 	@Override
1:5bd3bf6: 	public BasicSubsystem run() {
1:b66ad7c: 		// Doesn't appear to be any need of protecting against re-entry in the
1:b66ad7c: 		// case of installation.
1:5bd3bf6: 		BasicSubsystem result = null;
1:b66ad7c: 		// Acquire the global write lock to prevent all other operations until
1:b66ad7c: 		// the installation is complete. There is no need to hold any other locks.
1:279dba5: 		Activator.getInstance().getLockingStrategy().writeLock();
1:3c826b1: 		try {
1:b66ad7c: 			State state = parent.getState();
1:b66ad7c: 			if (State.INSTALLING.equals(state)) {
1:b66ad7c: 				throw new SubsystemException("A child subsystem may not be installed while the parent is in the INSTALLING state");
1:b66ad7c: 			}
1:b66ad7c: 			// Initialization of a null coordination must be privileged and,
1:b66ad7c: 			// therefore, occur in the run() method rather than in the constructor.
1:b66ad7c: 			Coordination coordination = Utils.createCoordination(parent);
1:b66ad7c: 			try {
1:b66ad7c: 				TargetRegion region = new TargetRegion(parent);
1:b66ad7c: 				SubsystemResource ssr = new SubsystemResource(location, content, parent, coordination);
1:b66ad7c: 				result = Activator.getInstance().getSubsystems().getSubsystemByLocation(location);
1:b66ad7c: 				if (result != null) {
1:b66ad7c: 					if (!region.contains(result))
1:b66ad7c: 						throw new SubsystemException("Location already exists but existing subsystem is not part of target region: " + location);
1:b66ad7c: 					if (!(result.getSymbolicName().equals(ssr.getSubsystemManifest().getSubsystemSymbolicNameHeader().getSymbolicName())
1:b66ad7c: 							&& result.getVersion().equals(ssr.getSubsystemManifest().getSubsystemVersionHeader().getVersion())
1:b66ad7c: 							&& result.getType().equals(ssr.getSubsystemManifest().getSubsystemTypeHeader().getType())))
1:b66ad7c: 						throw new SubsystemException("Location already exists but symbolic name, version, and type are not the same: " + location);
1:b66ad7c: 				}
1:b66ad7c: 				else {
1:b66ad7c: 					result = (BasicSubsystem)region.find(
1:b66ad7c: 							ssr.getSubsystemManifest().getSubsystemSymbolicNameHeader().getSymbolicName(), 
1:b66ad7c: 							ssr.getSubsystemManifest().getSubsystemVersionHeader().getVersion());
1:b66ad7c: 					if (result != null) {
1:b66ad7c: 						if (!result.getType().equals(ssr.getSubsystemManifest().getSubsystemTypeHeader().getType()))
1:b66ad7c: 							throw new SubsystemException("Subsystem already exists in target region but has a different type: " + location);
1:b66ad7c: 					}
1:b66ad7c: 					else {
1:d6eb080: 						result = new BasicSubsystem(ssr, deploymentManifest);
1:b66ad7c: 					}
1:b66ad7c: 				}
3:dc5d52f: 				checkLifecyclePermission(result);
3:5bd3bf6: 				return (BasicSubsystem)ResourceInstaller.newInstance(coordination, result, parent).install();
1:a990e32: 			}
1:b66ad7c: 			catch (Throwable t) {
1:b66ad7c: 				coordination.fail(t);
1:3c826b1: 			}
1:b66ad7c: 			finally {
1:b66ad7c: 				try {
1:b66ad7c: 					coordination.end();
1:b66ad7c: 				}
1:b66ad7c: 				catch (CoordinationException e) {
1:b66ad7c: 					Throwable t = e.getCause();
1:b66ad7c: 					if (t instanceof SubsystemException)
1:b66ad7c: 						throw (SubsystemException)t;
1:b66ad7c: 					if (t instanceof SecurityException)
1:b66ad7c: 						throw (SecurityException)t;
1:b66ad7c: 					throw new SubsystemException(t);
1:b66ad7c: 				}
1:b66ad7c: 			}
1:547a8ce: 		}
1:dc5d52f: 		finally {
1:b66ad7c: 			// Release the global write lock.
1:279dba5: 			Activator.getInstance().getLockingStrategy().writeUnlock();
1:777b216: 		}
2:777b216: 		return result;
1:777b216: 	}
1:777b216: 	
1:5bd3bf6: 	private void checkLifecyclePermission(final BasicSubsystem subsystem) {
1:dc5d52f: 		AccessController.doPrivileged(new PrivilegedAction<Object>() {
1:777b216: 			@Override
1:dc5d52f: 			public Object run() {
1:dc5d52f: 				SecurityManager.checkLifecyclePermission(subsystem);
1:dc5d52f: 				return null;
1:777b216: 			}
1:dc5d52f: 		},
1:dc5d52f: 		context);
1:777b216: 	}
2:225bcae: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:279dba5
/////////////////////////////////////////////////////////////////////////
1: 		Activator.getInstance().getLockingStrategy().writeLock();
/////////////////////////////////////////////////////////////////////////
1: 			Activator.getInstance().getLockingStrategy().writeUnlock();
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
1: 	private final InputStream deploymentManifest;
1: 	public InstallAction(String location, IDirectory content, BasicSubsystem parent, AccessControlContext context, InputStream deploymentManifest) {
1: 		this.deploymentManifest = deploymentManifest;
/////////////////////////////////////////////////////////////////////////
0: 			SubsystemResource ssr = new SubsystemResource(location, content, parent);
/////////////////////////////////////////////////////////////////////////
1: 			result = new BasicSubsystem(ssr, deploymentManifest);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:John Ross
-------------------------------------------------------------------------------
commit:b66ad7c
/////////////////////////////////////////////////////////////////////////
1: 		// Doesn't appear to be any need of protecting against re-entry in the
1: 		// case of installation.
1: 		// Acquire the global write lock to prevent all other operations until
1: 		// the installation is complete. There is no need to hold any other locks.
0: 		LockingStrategy.writeLock();
1: 			State state = parent.getState();
1: 			if (State.INSTALLING.equals(state)) {
1: 				throw new SubsystemException("A child subsystem may not be installed while the parent is in the INSTALLING state");
1: 			}
1: 			// Initialization of a null coordination must be privileged and,
1: 			// therefore, occur in the run() method rather than in the constructor.
1: 			Coordination coordination = Utils.createCoordination(parent);
1: 			try {
1: 				TargetRegion region = new TargetRegion(parent);
1: 				SubsystemResource ssr = new SubsystemResource(location, content, parent, coordination);
1: 				result = Activator.getInstance().getSubsystems().getSubsystemByLocation(location);
1: 				if (result != null) {
1: 					if (!region.contains(result))
1: 						throw new SubsystemException("Location already exists but existing subsystem is not part of target region: " + location);
1: 					if (!(result.getSymbolicName().equals(ssr.getSubsystemManifest().getSubsystemSymbolicNameHeader().getSymbolicName())
1: 							&& result.getVersion().equals(ssr.getSubsystemManifest().getSubsystemVersionHeader().getVersion())
1: 							&& result.getType().equals(ssr.getSubsystemManifest().getSubsystemTypeHeader().getType())))
1: 						throw new SubsystemException("Location already exists but symbolic name, version, and type are not the same: " + location);
1: 				}
1: 				else {
1: 					result = (BasicSubsystem)region.find(
1: 							ssr.getSubsystemManifest().getSubsystemSymbolicNameHeader().getSymbolicName(), 
1: 							ssr.getSubsystemManifest().getSubsystemVersionHeader().getVersion());
1: 					if (result != null) {
1: 						if (!result.getType().equals(ssr.getSubsystemManifest().getSubsystemTypeHeader().getType()))
1: 							throw new SubsystemException("Subsystem already exists in target region but has a different type: " + location);
1: 					}
1: 					else {
0: 						result = new BasicSubsystem(ssr, deploymentManifest);
1: 					}
1: 				}
1: 			catch (Throwable t) {
1: 				coordination.fail(t);
1: 			finally {
1: 				try {
1: 					coordination.end();
1: 				}
1: 				catch (CoordinationException e) {
1: 					Throwable t = e.getCause();
1: 					if (t instanceof SubsystemException)
1: 						throw (SubsystemException)t;
1: 					if (t instanceof SecurityException)
1: 						throw (SecurityException)t;
1: 					throw new SubsystemException(t);
1: 				}
1: 			}
1: 			// Release the global write lock.
0: 			LockingStrategy.writeUnlock();
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.Subsystem.State;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		State state = parent.getState();
0: 	    if (State.INSTALLING.equals(state)) {
0: 	        throw new SubsystemException("A child subsystem may not be installed while the parent is in the INSTALLING state");
1: 	    }
/////////////////////////////////////////////////////////////////////////
commit:3c826b1
/////////////////////////////////////////////////////////////////////////
0: 		Coordination coordination = Utils.createCoordination(parent);
/////////////////////////////////////////////////////////////////////////
1: 			try {
0: 				coordination.end();
1: 			}
0: 			catch (CoordinationException e) {
0: 				Throwable t = e.getCause();
0: 				if (t instanceof SubsystemException)
0: 					throw (SubsystemException)t;
0: 				if (t instanceof SecurityException)
0: 					throw (SecurityException)t;
0: 				throw new SubsystemException(t);
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.IDirectory;
/////////////////////////////////////////////////////////////////////////
1: public class InstallAction implements PrivilegedAction<BasicSubsystem> {
1: 	private final IDirectory content;
1: 	private final BasicSubsystem parent;
0: 	public InstallAction(String location, IDirectory content, BasicSubsystem parent, AccessControlContext context) {
0: 	public InstallAction(String location, IDirectory content, BasicSubsystem parent, AccessControlContext context, Coordination coordination, boolean embedded) {
/////////////////////////////////////////////////////////////////////////
1: 	public BasicSubsystem run() {
1: 		BasicSubsystem result = null;
/////////////////////////////////////////////////////////////////////////
1: 				return (BasicSubsystem)ResourceInstaller.newInstance(coordination, result, parent).install();
0: 			result = (BasicSubsystem)region.find(
1: 				return (BasicSubsystem)ResourceInstaller.newInstance(coordination, result, parent).install();
1: 			return (BasicSubsystem)ResourceInstaller.newInstance(coordination, result, parent).install();
/////////////////////////////////////////////////////////////////////////
1: 	private void checkLifecyclePermission(final BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
0: 	private BasicSubsystem createSubsystem(SubsystemResource resource) throws URISyntaxException, IOException, BundleException, InvalidSyntaxException {
0: 		final BasicSubsystem result = new BasicSubsystem(resource);
0: 	private SubsystemResource createSubsystemResource(String location, IDirectory content, BasicSubsystem parent) throws URISyntaxException, IOException, ResolutionException, BundleException, InvalidSyntaxException, ModellerException {
commit:b75f264
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.modelling.ModellerException;
/////////////////////////////////////////////////////////////////////////
0: 	private SubsystemResource createSubsystemResource(String location, InputStream content, AriesSubsystem parent) throws URISyntaxException, IOException, ResolutionException, BundleException, InvalidSyntaxException, ModellerException {
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:542b8e4
/////////////////////////////////////////////////////////////////////////
0: 		// Initialization of a null coordination must be privileged and,
0: 		// therefore, occur in the run() method rather than in the constructor.
0: 		Coordination coordination = this.coordination;
0: 		if (coordination == null)
0: 			coordination = Utils.createCoordination(parent);
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	private SubsystemResource createSubsystemResource(String location, InputStream content, AriesSubsystem parent) throws URISyntaxException, IOException, ResolutionException, UnsupportedOperationException, BundleException, InvalidSyntaxException {
commit:307d743
/////////////////////////////////////////////////////////////////////////
0: 				return (AriesSubsystem)ResourceInstaller.newInstance(coordination, result, parent).install();
/////////////////////////////////////////////////////////////////////////
0: 				return (AriesSubsystem)ResourceInstaller.newInstance(coordination, result, parent).install();
0: 			return (AriesSubsystem)ResourceInstaller.newInstance(coordination, result, parent).install();
commit:547a8ce
/////////////////////////////////////////////////////////////////////////
0: 			if (!embedded) {
0: 				try {
0: 					coordination.end();
1: 				}
0: 				catch (CoordinationException e) {
0: 					Throwable t = e.getCause();
0: 					if (t instanceof SubsystemException)
0: 						throw (SubsystemException)t;
0: 					if (t instanceof SecurityException)
0: 						throw (SecurityException)t;
0: 					throw new SubsystemException(t);
1: 				}
commit:777b216
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.net.URISyntaxException;
0: import org.osgi.framework.BundleException;
0: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.service.resolver.ResolutionException;
/////////////////////////////////////////////////////////////////////////
0: 		if (coordination == null)
0: 			coordination = Utils.createCoordination(parent);
/////////////////////////////////////////////////////////////////////////
0: 			SubsystemResource ssr = createSubsystemResource(location, content, parent);
/////////////////////////////////////////////////////////////////////////
0: 				return (AriesSubsystem)ResourceInstaller.newInstance(coordination, result, parent, false).install();
/////////////////////////////////////////////////////////////////////////
0: 				return (AriesSubsystem)ResourceInstaller.newInstance(coordination, result, parent, false).install();
0: 			result = createSubsystem(ssr);
0: 			return (AriesSubsystem)ResourceInstaller.newInstance(coordination, result, parent, false).install();
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	private AriesSubsystem createSubsystem(SubsystemResource resource) throws URISyntaxException, IOException, BundleException, InvalidSyntaxException {
0: 		final AriesSubsystem result = new AriesSubsystem(resource);
0: 		coordination.addParticipant(new Participant() {
1: 			@Override
0: 			public void ended(Coordination c) throws Exception {
0: 				// Nothing
1: 			}
1: 
1: 			@Override
0: 			public void failed(Coordination c) throws Exception {
0: 				IOUtils.deleteRecursive(result.getDirectory());
1: 			}
0: 		});
1: 		return result;
1: 		
1: 	}
1: 	
0: 	private SubsystemResource createSubsystemResource(String location, InputStream content, AriesSubsystem parent) throws URISyntaxException, IOException, ResolutionException {
0: 		final SubsystemResource result = new SubsystemResource(location, content, parent);
0: //		coordination.addParticipant(new Participant() {
0: //			@Override
0: //			public void ended(Coordination c) throws Exception {
0: //				// Nothing
0: //			}
0: //
0: //			@Override
0: //			public void failed(Coordination c) throws Exception {
0: //				IOUtils.deleteRecursive(result.getDirectory());
0: //			}
0: //		});
1: 		return result;
1: 	}
commit:225bcae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.io.IOUtils;
0: import org.osgi.service.coordinator.Participant;
/////////////////////////////////////////////////////////////////////////
0: 			final SubsystemResource ssr = new SubsystemResource(location, content, parent);
0: 			coordination.addParticipant(new Participant() {
0: 				@Override
0: 				public void ended(Coordination c) throws Exception {
0: 					// Nothing
1: 				}
1: 
0: 				@Override
0: 				public void failed(Coordination c) throws Exception {
0: 					IOUtils.deleteRecursive(ssr.getDirectory());
1: 				}
0: 			});
0: 			result = Activator.getInstance().getSubsystems().getSubsystemByLocation(location);
/////////////////////////////////////////////////////////////////////////
0: 				parent.installResource(result);
/////////////////////////////////////////////////////////////////////////
0: 				parent.installResource(result);
commit:dc5d52f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
0: import java.io.InputStream;
1: import java.security.AccessControlContext;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: 
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.CoordinationException;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
0: public class InstallAction implements PrivilegedAction<AriesSubsystem> {
0: 	private final InputStream content;
1: 	private final AccessControlContext context;
0: 	private final Coordination coordination;
0: 	private final boolean embedded;
1: 	private final String location;
0: 	private final AriesSubsystem parent;
1: 	
0: 	public InstallAction(String location, InputStream content, AriesSubsystem parent, AccessControlContext context) {
0: 		this(location, content, parent, context, null, false);
0: 	}
1: 	
0: 	public InstallAction(String location, InputStream content, AriesSubsystem parent, AccessControlContext context, Coordination coordination, boolean embedded) {
1: 		this.location = location;
1: 		this.content = content;
1: 		this.parent = parent;
1: 		this.context = context;
0: 		this.coordination = coordination;
0: 		this.embedded = embedded;
0: 	}
1: 	
0: 	@Override
0: 	public AriesSubsystem run() {
0: 		AriesSubsystem result = null;
0: 		Coordination coordination = this.coordination;
0: 		if (coordination == null)
0: 			coordination = Activator.getInstance().getCoordinator().create(parent.getSymbolicName() + '-' + parent.getSubsystemId(), 0);
0: 		try {
0: 			TargetRegion region = new TargetRegion(parent);
0: 			SubsystemResource ssr = new SubsystemResource(location, content, parent);
0: 			result = AriesSubsystem.locationToSubsystem.get(location);
0: 			if (result != null) {
1: 				checkLifecyclePermission(result);
0: 				if (!region.contains(result))
0: 					throw new SubsystemException("Location already exists but existing subsystem is not part of target region: " + location);
0: 				if (!(result.getSymbolicName().equals(ssr.getSubsystemManifest().getSubsystemSymbolicNameHeader().getSymbolicName())
0: 						&& result.getVersion().equals(ssr.getSubsystemManifest().getSubsystemVersionHeader().getVersion())
0: 						&& result.getType().equals(ssr.getSubsystemManifest().getSubsystemTypeHeader().getType())))
0: 					throw new SubsystemException("Location already exists but symbolic name, version, and type are not the same: " + location);
0: 				parent.subsystemInstalling(result);
0: 				parent.subsystemInstalled(result);
0: 				return result;
0: 			}
0: 			result = (AriesSubsystem)region.find(
0: 					ssr.getSubsystemManifest().getSubsystemSymbolicNameHeader().getSymbolicName(), 
0: 					ssr.getSubsystemManifest().getSubsystemVersionHeader().getVersion());
0: 			if (result != null) {
1: 				checkLifecyclePermission(result);
0: 				if (!result.getType().equals(ssr.getSubsystemManifest().getSubsystemTypeHeader().getType()))
0: 					throw new SubsystemException("Subsystem already exists in target region but has a different type: " + location);
0: 				parent.subsystemInstalling(result);
0: 				parent.subsystemInstalled(result);
0: 				return result;
0: 			}
0: 			result = new AriesSubsystem(ssr, parent);
1: 			checkLifecyclePermission(result);
0: 			parent.installResource(result, coordination, false);
0: 		}
0: 		catch (Throwable t) {
0: 			coordination.fail(t);
0: 		}
1: 		finally {
0: 			try {
0: 				coordination.end();
0: 			}
0: 			catch (CoordinationException e) {
0: 				Throwable t = e.getCause();
0: 				if (t instanceof SubsystemException)
0: 					throw (SubsystemException)t;
0: 				if (t instanceof SecurityException)
0: 					throw (SecurityException)t;
0: 				throw new SubsystemException(t);
0: 			}
0: 		}
0: 		return result;
0: 	}
1: 
0: 	private void checkLifecyclePermission(final AriesSubsystem subsystem) {
0: 		if (embedded)
0: 			return;
1: 		AccessController.doPrivileged(new PrivilegedAction<Object>() {
0: 			@Override
1: 			public Object run() {
1: 				SecurityManager.checkLifecyclePermission(subsystem);
1: 				return null;
0: 			}
1: 		},
1: 		context);
0: 	}
0: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:f9b3022
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.filesystem.ICloseableDirectory;
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 	private static final Logger logger = LoggerFactory.getLogger(InstallAction.class);
/////////////////////////////////////////////////////////////////////////
0: 			finally {
0: 				closeContentIfIClosable();
0: 			}
0: 		closeContentIfIClosable();
0: 	private void closeContentIfIClosable() {
0: 		//clean up temp file
0: 		if (content instanceof ICloseableDirectory) {
0: 			try{
0: 				((ICloseableDirectory) content).close();
0: 			}
0: 			catch (IOException ioex) {
0: 				logger.info("Exception calling close for content {}. Exception {}", 
0: 						content, ioex);					
0: 			}
0: 		} 
0: 	}
0: 	
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:9bba779
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	private SubsystemResource createSubsystemResource(String location, IDirectory content, BasicSubsystem parent) throws URISyntaxException, IOException, ResolutionException, BundleException, InvalidSyntaxException {
============================================================================