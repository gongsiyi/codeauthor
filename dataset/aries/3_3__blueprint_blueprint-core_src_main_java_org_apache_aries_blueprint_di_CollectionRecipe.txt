1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.di;
1:f13c6ac: 
1:5e2bd49: import java.lang.reflect.Type;
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Collection;
1:f13c6ac: import java.util.LinkedHashSet;
1:f13c6ac: import java.util.LinkedList;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Queue;
1:f13c6ac: import java.util.Set;
1:f13c6ac: import java.util.SortedSet;
1:f13c6ac: import java.util.TreeSet;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.utils.ReflectionUtils;
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:5e2bd49: import org.osgi.service.blueprint.container.ReifiedType;
1:f13c6ac: 
1:f13c6ac: /**
1:76b662a:  * @version $Rev$ $Date$
1:f13c6ac:  */
1:f13c6ac: public class CollectionRecipe extends AbstractRecipe {
1:f13c6ac: 
1:f13c6ac:     private final List<Recipe> list;
1:5e2bd49:     private final Class<?> collectionTypeClass;
1:5e2bd49:     private final String defaultValueType;
1:f13c6ac: 
1:5e2bd49:     public CollectionRecipe(String name, Class<?> collectionType, String valueType) {
1:f13c6ac:         super(name);
1:5e2bd49:         if (collectionType == null) throw new NullPointerException("type is null");
1:5e2bd49:         this.collectionTypeClass = collectionType;
1:5e2bd49:         this.defaultValueType = (valueType != null) ? valueType : Object.class.getName();
1:f13c6ac:         this.list = new ArrayList<Recipe>();
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<Recipe> getDependencies() {
1:f13c6ac:         List<Recipe> nestedRecipes = new ArrayList<Recipe>(list.size());
1:f13c6ac:         for (Recipe recipe : list) {
1:f13c6ac:             if (recipe != null) {
1:f13c6ac:                 nestedRecipes.add(recipe);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         return nestedRecipes;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     protected Object internalCreate() throws ComponentDefinitionException {
1:5e2bd49:         Class type = getCollection(collectionTypeClass);
1:f13c6ac: 
1:f13c6ac:         if (!ReflectionUtils.hasDefaultConstructor(type)) {
1:f13c6ac:             throw new ComponentDefinitionException("Type does not have a default constructor " + type.getName());
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         // create collection instance
1:f13c6ac:         Object o;
1:f13c6ac:         try {
1:f13c6ac:             o = type.newInstance();
1:f13c6ac:         } catch (Exception e) {
1:f13c6ac:             throw new ComponentDefinitionException("Error while creating collection instance: " + type.getName());
1:f13c6ac:         }
1:f13c6ac:         if (!(o instanceof Collection)) {
1:f13c6ac:             throw new ComponentDefinitionException("Specified collection type does not implement the Collection interface: " + type.getName());
1:f13c6ac:         }
1:f13c6ac:         Collection instance = (Collection) o;
1:f13c6ac: 
1:5e2bd49:         ReifiedType defaultConversionType = loadType(defaultValueType);
1:5e2bd49:         Type conversionType = null;
1:f13c6ac:         for (Recipe recipe : list) {
1:f13c6ac:             Object value;
1:f13c6ac:             if (recipe != null) {
1:f13c6ac:                 try {
1:5e2bd49:                 	conversionType = defaultConversionType.getRawClass();
1:5e2bd49:                     if (recipe instanceof ValueRecipe) {
1:5e2bd49:                     	conversionType = ((ValueRecipe)recipe).getValueType();
1:5e2bd49:                     } 
1:5e2bd49:                     value = convert(recipe.create(), conversionType);
1:f13c6ac:                 } catch (Exception e) {
1:5e2bd49:                     throw new ComponentDefinitionException("Unable to convert value " + recipe + " to type " + conversionType, e);
1:f13c6ac:                 }
1:f13c6ac:             } else {
1:f13c6ac:                 value = null;
1:f13c6ac:             }
1:f13c6ac:             instance.add(value);
1:f13c6ac:         }
1:f13c6ac:         return instance;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void add(Recipe value) {
1:f13c6ac:         list.add(value);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public static Class getCollection(Class type) {
1:f13c6ac:         if (ReflectionUtils.hasDefaultConstructor(type)) {
1:f13c6ac:             return type;
1:f13c6ac:         } else if (SortedSet.class.isAssignableFrom(type)) {
1:f13c6ac:             return TreeSet.class;
1:f13c6ac:         } else if (Set.class.isAssignableFrom(type)) {
1:f13c6ac:             return LinkedHashSet.class;
1:f13c6ac:         } else if (List.class.isAssignableFrom(type)) {
1:f13c6ac:             return ArrayList.class;
1:f13c6ac:         } else if (Queue.class.isAssignableFrom(type)) {
1:f13c6ac:             return LinkedList.class;
1:f13c6ac:         } else {
1:f13c6ac:             return ArrayList.class;
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:5e2bd49
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Type;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.blueprint.container.ReifiedType;
/////////////////////////////////////////////////////////////////////////
1:     private final Class<?> collectionTypeClass;
1:     private final String defaultValueType;
1:     public CollectionRecipe(String name, Class<?> collectionType, String valueType) {
1:         if (collectionType == null) throw new NullPointerException("type is null");
1:         this.collectionTypeClass = collectionType;
1:         this.defaultValueType = (valueType != null) ? valueType : Object.class.getName();
/////////////////////////////////////////////////////////////////////////
1:         Class type = getCollection(collectionTypeClass);
/////////////////////////////////////////////////////////////////////////
1:         ReifiedType defaultConversionType = loadType(defaultValueType);
1:         Type conversionType = null;
1:                 	conversionType = defaultConversionType.getRawClass();
1:                     if (recipe instanceof ValueRecipe) {
1:                     	conversionType = ((ValueRecipe)recipe).getValueType();
1:                     } 
1:                     value = convert(recipe.create(), conversionType);
1:                     throw new ComponentDefinitionException("Unable to convert value " + recipe + " to type " + conversionType, e);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$ $Date$
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.di;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.utils.ReflectionUtils;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.di;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.LinkedHashSet;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Queue;
1: import java.util.Set;
1: import java.util.SortedSet;
1: import java.util.TreeSet;
1: 
0: import org.apache.geronimo.blueprint.utils.ReflectionUtils;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: 
1: /**
0:  * @version $Rev: 6685 $ $Date: 2005-12-28T00:29:37.967210Z $
1:  */
1: public class CollectionRecipe extends AbstractRecipe {
1: 
1:     private final List<Recipe> list;
0:     private final Class typeClass;
1: 
0:     public CollectionRecipe(String name, Class type) {
1:         super(name);
0:         if (type == null) throw new NullPointerException("type is null");
0:         this.typeClass = type;
1:         this.list = new ArrayList<Recipe>();
1:     }
1: 
1:     public List<Recipe> getDependencies() {
1:         List<Recipe> nestedRecipes = new ArrayList<Recipe>(list.size());
1:         for (Recipe recipe : list) {
1:             if (recipe != null) {
1:                 nestedRecipes.add(recipe);
1:             }
1:         }
1:         return nestedRecipes;
1:     }
1: 
1:     protected Object internalCreate() throws ComponentDefinitionException {
0:         Class type = getCollection(typeClass);
1: 
1:         if (!ReflectionUtils.hasDefaultConstructor(type)) {
1:             throw new ComponentDefinitionException("Type does not have a default constructor " + type.getName());
1:         }
1: 
1:         // create collection instance
1:         Object o;
1:         try {
1:             o = type.newInstance();
1:         } catch (Exception e) {
1:             throw new ComponentDefinitionException("Error while creating collection instance: " + type.getName());
1:         }
1:         if (!(o instanceof Collection)) {
1:             throw new ComponentDefinitionException("Specified collection type does not implement the Collection interface: " + type.getName());
1:         }
1:         Collection instance = (Collection) o;
1: 
1:         for (Recipe recipe : list) {
1:             Object value;
1:             if (recipe != null) {
1:                 try {
0:                     value = recipe.create();
1:                 } catch (Exception e) {
0:                     throw new ComponentDefinitionException("Unable to convert value " + recipe + " to type " + type, e);
1:                 }
1:             } else {
1:                 value = null;
1:             }
1:             instance.add(value);
1:         }
1:         return instance;
1:     }
1: 
1:     public void add(Recipe value) {
1:         list.add(value);
1:     }
1: 
1:     public static Class getCollection(Class type) {
1:         if (ReflectionUtils.hasDefaultConstructor(type)) {
1:             return type;
1:         } else if (SortedSet.class.isAssignableFrom(type)) {
1:             return TreeSet.class;
1:         } else if (Set.class.isAssignableFrom(type)) {
1:             return LinkedHashSet.class;
1:         } else if (List.class.isAssignableFrom(type)) {
1:             return ArrayList.class;
1:         } else if (Queue.class.isAssignableFrom(type)) {
1:             return LinkedList.class;
1:         } else {
1:             return ArrayList.class;
1:         }
1:     }
1: }
============================================================================