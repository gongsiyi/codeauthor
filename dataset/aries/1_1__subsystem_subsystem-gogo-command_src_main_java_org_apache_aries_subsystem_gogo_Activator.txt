1:334b6a1: /*
1:334b6a1:  * Licensed under the Apache License, Version 2.0 (the "License").
1:334b6a1:  * You may obtain a copy of the License at
1:334b6a1:  *
1:334b6a1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:334b6a1:  *
1:334b6a1:  * Unless required by applicable law or agreed to in writing, software
1:334b6a1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:334b6a1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:334b6a1:  * See the License for the specific language governing permissions and
1:334b6a1:  * limitations under the License.
1:334b6a1:  */
1:334b6a1: package org.apache.aries.subsystem.gogo;
1:334b6a1: 
1:334b6a1: import java.io.IOException;
1:334b6a1: import java.net.URL;
1:334b6a1: import java.util.Dictionary;
1:334b6a1: import java.util.Hashtable;
1:334b6a1: import java.util.Map;
1:334b6a1: import java.util.TreeMap;
1:334b6a1: 
1:334b6a1: import org.osgi.framework.BundleActivator;
1:334b6a1: import org.osgi.framework.BundleContext;
1:334b6a1: import org.osgi.framework.InvalidSyntaxException;
1:334b6a1: import org.osgi.framework.ServiceReference;
1:334b6a1: import org.osgi.service.subsystem.Subsystem;
1:334b6a1: 
1:334b6a1: public class Activator implements BundleActivator {
1:334b6a1:     private BundleContext bundleContext;
1:334b6a1: 
1:334b6a1:     public void start(BundleContext context) throws Exception {
1:334b6a1:         bundleContext = context;
1:334b6a1: 
1:334b6a1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:334b6a1:         props.put("osgi.command.function", new String[] { "install", "uninstall", "start", "stop", "list" });
1:334b6a1:         props.put("osgi.command.scope", "subsystem");
1:334b6a1:         context.registerService(getClass().getName(), this, props);
1:334b6a1:     }
1:334b6a1: 
1:334b6a1:     public void install(String url) throws IOException {
1:334b6a1:         Subsystem rootSubsystem = getSubsystem(0);
1:334b6a1:         System.out.println("Installing subsystem: " + url);
1:334b6a1:         Subsystem s = rootSubsystem.install(url, new URL(url).openStream());
1:334b6a1:         System.out.println("Subsystem successfully installed: " + s.getSymbolicName() + "; id: " + s.getSubsystemId());
1:334b6a1:     }
1:334b6a1: 
1:334b6a1:     public void uninstall(long id) {
1:334b6a1:         getSubsystem(id).uninstall();
1:334b6a1:     }
1:334b6a1: 
1:334b6a1:     public void start(long id) {
1:334b6a1:         getSubsystem(id).start();
1:334b6a1:     }
1:334b6a1: 
1:334b6a1:     public void stop(long id) {
1:334b6a1:         getSubsystem(id).stop();
1:334b6a1:     }
1:334b6a1: 
1:334b6a1:     public void list() throws InvalidSyntaxException {
1:334b6a1:         Map<Long, String> subsystems = new TreeMap<Long, String>();
1:334b6a1: 
1:334b6a1:         for (ServiceReference<Subsystem> ref : bundleContext.getServiceReferences(Subsystem.class, null)) {
1:334b6a1:             Subsystem s = bundleContext.getService(ref);
1:334b6a1:             if (s != null) {
1:334b6a1:                 subsystems.put(s.getSubsystemId(),
1:334b6a1:                     String.format("%d\t%s\t%s %s", s.getSubsystemId(), s.getState(), s.getSymbolicName(), s.getVersion()));
1:334b6a1:             }
1:334b6a1:         }
1:334b6a1: 
1:334b6a1:         for (String entry : subsystems.values()) {
1:334b6a1:             System.out.println(entry);
1:334b6a1:         }
1:334b6a1:     }
1:334b6a1: 
1:334b6a1:     private Subsystem getSubsystem(long id) {
1:334b6a1:         try {
1:334b6a1:             for (ServiceReference<Subsystem> ref :
1:334b6a1:                     bundleContext.getServiceReferences(Subsystem.class, "(subsystem.id=" + id + ")")) {
1:334b6a1:                 Subsystem svc = bundleContext.getService(ref);
1:334b6a1:                 if (svc != null)
1:334b6a1:                     return svc;
1:334b6a1:             }
1:334b6a1:         } catch (InvalidSyntaxException e) {
1:334b6a1:             throw new RuntimeException(e);
1:334b6a1:         }
1:334b6a1:         throw new RuntimeException("Unable to find subsystem " + id);
1:334b6a1:     }
1:334b6a1: 
1:334b6a1:     public void stop(BundleContext context) throws Exception {
1:334b6a1:     }
1:334b6a1: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:334b6a1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License").
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.gogo;
1: 
1: import java.io.IOException;
1: import java.net.URL;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.Map;
1: import java.util.TreeMap;
1: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.subsystem.Subsystem;
1: 
1: public class Activator implements BundleActivator {
1:     private BundleContext bundleContext;
1: 
1:     public void start(BundleContext context) throws Exception {
1:         bundleContext = context;
1: 
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put("osgi.command.function", new String[] { "install", "uninstall", "start", "stop", "list" });
1:         props.put("osgi.command.scope", "subsystem");
1:         context.registerService(getClass().getName(), this, props);
1:     }
1: 
1:     public void install(String url) throws IOException {
1:         Subsystem rootSubsystem = getSubsystem(0);
1:         System.out.println("Installing subsystem: " + url);
1:         Subsystem s = rootSubsystem.install(url, new URL(url).openStream());
1:         System.out.println("Subsystem successfully installed: " + s.getSymbolicName() + "; id: " + s.getSubsystemId());
1:     }
1: 
1:     public void uninstall(long id) {
1:         getSubsystem(id).uninstall();
1:     }
1: 
1:     public void start(long id) {
1:         getSubsystem(id).start();
1:     }
1: 
1:     public void stop(long id) {
1:         getSubsystem(id).stop();
1:     }
1: 
1:     public void list() throws InvalidSyntaxException {
1:         Map<Long, String> subsystems = new TreeMap<Long, String>();
1: 
1:         for (ServiceReference<Subsystem> ref : bundleContext.getServiceReferences(Subsystem.class, null)) {
1:             Subsystem s = bundleContext.getService(ref);
1:             if (s != null) {
1:                 subsystems.put(s.getSubsystemId(),
1:                     String.format("%d\t%s\t%s %s", s.getSubsystemId(), s.getState(), s.getSymbolicName(), s.getVersion()));
1:             }
1:         }
1: 
1:         for (String entry : subsystems.values()) {
1:             System.out.println(entry);
1:         }
1:     }
1: 
1:     private Subsystem getSubsystem(long id) {
1:         try {
1:             for (ServiceReference<Subsystem> ref :
1:                     bundleContext.getServiceReferences(Subsystem.class, "(subsystem.id=" + id + ")")) {
1:                 Subsystem svc = bundleContext.getService(ref);
1:                 if (svc != null)
1:                     return svc;
1:             }
1:         } catch (InvalidSyntaxException e) {
1:             throw new RuntimeException(e);
1:         }
1:         throw new RuntimeException("Unable to find subsystem " + id);
1:     }
1: 
1:     public void stop(BundleContext context) throws Exception {
1:     }
1: }
============================================================================