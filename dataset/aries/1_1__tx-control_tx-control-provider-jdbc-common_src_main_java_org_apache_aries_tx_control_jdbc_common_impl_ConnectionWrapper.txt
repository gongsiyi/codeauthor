1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:ef9eace: package org.apache.aries.tx.control.jdbc.common.impl;
1:ef9eace: 
1:ef9eace: import java.sql.Array;
1:ef9eace: import java.sql.Blob;
1:ef9eace: import java.sql.CallableStatement;
1:ef9eace: import java.sql.Clob;
1:ef9eace: import java.sql.Connection;
1:ef9eace: import java.sql.DatabaseMetaData;
1:ef9eace: import java.sql.NClob;
1:ef9eace: import java.sql.PreparedStatement;
1:ef9eace: import java.sql.SQLClientInfoException;
1:ef9eace: import java.sql.SQLException;
1:ef9eace: import java.sql.SQLWarning;
1:ef9eace: import java.sql.SQLXML;
1:ef9eace: import java.sql.Savepoint;
1:ef9eace: import java.sql.Statement;
1:ef9eace: import java.sql.Struct;
1:ef9eace: import java.util.Map;
1:ef9eace: import java.util.Properties;
1:ef9eace: import java.util.concurrent.Executor;
1:ef9eace: 
1:ef9eace: public abstract class ConnectionWrapper implements Connection {
1:ef9eace: 
1:ef9eace: 	public <T> T unwrap(Class<T> iface) throws SQLException {
1:ef9eace: 		return getDelegate().unwrap(iface);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public boolean isWrapperFor(Class< ? > iface) throws SQLException {
1:ef9eace: 		return getDelegate().isWrapperFor(iface);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Statement createStatement() throws SQLException {
1:ef9eace: 		return getDelegate().createStatement();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public PreparedStatement prepareStatement(String sql) throws SQLException {
1:ef9eace: 		return getDelegate().prepareStatement(sql);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public CallableStatement prepareCall(String sql) throws SQLException {
1:ef9eace: 		return getDelegate().prepareCall(sql);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public String nativeSQL(String sql) throws SQLException {
1:ef9eace: 		return getDelegate().nativeSQL(sql);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setAutoCommit(boolean autoCommit) throws SQLException {
1:ef9eace: 		getDelegate().setAutoCommit(autoCommit);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public boolean getAutoCommit() throws SQLException {
1:ef9eace: 		return getDelegate().getAutoCommit();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void commit() throws SQLException {
1:ef9eace: 		getDelegate().commit();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void rollback() throws SQLException {
1:ef9eace: 		getDelegate().rollback();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void close() throws SQLException {
1:ef9eace: 		getDelegate().close();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public boolean isClosed() throws SQLException {
1:ef9eace: 		return getDelegate().isClosed();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public DatabaseMetaData getMetaData() throws SQLException {
1:ef9eace: 		return getDelegate().getMetaData();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setReadOnly(boolean readOnly) throws SQLException {
1:ef9eace: 		getDelegate().setReadOnly(readOnly);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public boolean isReadOnly() throws SQLException {
1:ef9eace: 		return getDelegate().isReadOnly();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setCatalog(String catalog) throws SQLException {
1:ef9eace: 		getDelegate().setCatalog(catalog);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public String getCatalog() throws SQLException {
1:ef9eace: 		return getDelegate().getCatalog();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setTransactionIsolation(int level) throws SQLException {
1:ef9eace: 		getDelegate().setTransactionIsolation(level);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public int getTransactionIsolation() throws SQLException {
1:ef9eace: 		return getDelegate().getTransactionIsolation();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public SQLWarning getWarnings() throws SQLException {
1:ef9eace: 		return getDelegate().getWarnings();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void clearWarnings() throws SQLException {
1:ef9eace: 		getDelegate().clearWarnings();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Statement createStatement(int resultSetType,
1:ef9eace: 			int resultSetConcurrency) throws SQLException {
1:ef9eace: 		return getDelegate().createStatement(resultSetType, resultSetConcurrency);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public PreparedStatement prepareStatement(String sql, int resultSetType,
1:ef9eace: 			int resultSetConcurrency) throws SQLException {
1:ef9eace: 		return getDelegate().prepareStatement(sql, resultSetType,
1:ef9eace: 				resultSetConcurrency);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public CallableStatement prepareCall(String sql, int resultSetType,
1:ef9eace: 			int resultSetConcurrency) throws SQLException {
1:ef9eace: 		return getDelegate().prepareCall(sql, resultSetType, resultSetConcurrency);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Map<String,Class< ? >> getTypeMap() throws SQLException {
1:ef9eace: 		return getDelegate().getTypeMap();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setTypeMap(Map<String,Class< ? >> map) throws SQLException {
1:ef9eace: 		getDelegate().setTypeMap(map);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setHoldability(int holdability) throws SQLException {
1:ef9eace: 		getDelegate().setHoldability(holdability);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public int getHoldability() throws SQLException {
1:ef9eace: 		return getDelegate().getHoldability();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Savepoint setSavepoint() throws SQLException {
1:ef9eace: 		return getDelegate().setSavepoint();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Savepoint setSavepoint(String name) throws SQLException {
1:ef9eace: 		return getDelegate().setSavepoint(name);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void rollback(Savepoint savepoint) throws SQLException {
1:ef9eace: 		getDelegate().rollback(savepoint);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
1:ef9eace: 		getDelegate().releaseSavepoint(savepoint);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Statement createStatement(int resultSetType,
1:ef9eace: 			int resultSetConcurrency, int resultSetHoldability)
1:ef9eace: 					throws SQLException {
1:ef9eace: 		return getDelegate().createStatement(resultSetType, resultSetConcurrency,
1:ef9eace: 				resultSetHoldability);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public PreparedStatement prepareStatement(String sql, int resultSetType,
1:ef9eace: 			int resultSetConcurrency, int resultSetHoldability)
1:ef9eace: 					throws SQLException {
1:ef9eace: 		return getDelegate().prepareStatement(sql, resultSetType,
1:ef9eace: 				resultSetConcurrency, resultSetHoldability);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public CallableStatement prepareCall(String sql, int resultSetType,
1:ef9eace: 			int resultSetConcurrency, int resultSetHoldability)
1:ef9eace: 					throws SQLException {
1:ef9eace: 		return getDelegate().prepareCall(sql, resultSetType, resultSetConcurrency,
1:ef9eace: 				resultSetHoldability);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
1:ef9eace: 			throws SQLException {
1:ef9eace: 		return getDelegate().prepareStatement(sql, autoGeneratedKeys);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
1:ef9eace: 			throws SQLException {
1:ef9eace: 		return getDelegate().prepareStatement(sql, columnIndexes);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public PreparedStatement prepareStatement(String sql, String[] columnNames)
1:ef9eace: 			throws SQLException {
1:ef9eace: 		return getDelegate().prepareStatement(sql, columnNames);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Clob createClob() throws SQLException {
1:ef9eace: 		return getDelegate().createClob();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Blob createBlob() throws SQLException {
1:ef9eace: 		return getDelegate().createBlob();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public NClob createNClob() throws SQLException {
1:ef9eace: 		return getDelegate().createNClob();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public SQLXML createSQLXML() throws SQLException {
1:ef9eace: 		return getDelegate().createSQLXML();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public boolean isValid(int timeout) throws SQLException {
1:ef9eace: 		return getDelegate().isValid(timeout);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setClientInfo(String name, String value)
1:ef9eace: 			throws SQLClientInfoException {
1:ef9eace: 		getDelegate().setClientInfo(name, value);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setClientInfo(Properties properties)
1:ef9eace: 			throws SQLClientInfoException {
1:ef9eace: 		getDelegate().setClientInfo(properties);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public String getClientInfo(String name) throws SQLException {
1:ef9eace: 		return getDelegate().getClientInfo(name);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Properties getClientInfo() throws SQLException {
1:ef9eace: 		return getDelegate().getClientInfo();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Array createArrayOf(String typeName, Object[] elements)
1:ef9eace: 			throws SQLException {
1:ef9eace: 		return getDelegate().createArrayOf(typeName, elements);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public Struct createStruct(String typeName, Object[] attributes)
1:ef9eace: 			throws SQLException {
1:ef9eace: 		return getDelegate().createStruct(typeName, attributes);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setSchema(String schema) throws SQLException {
1:ef9eace: 		getDelegate().setSchema(schema);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public String getSchema() throws SQLException {
1:ef9eace: 		return getDelegate().getSchema();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void abort(Executor executor) throws SQLException {
1:ef9eace: 		getDelegate().abort(executor);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public void setNetworkTimeout(Executor executor, int milliseconds)
1:ef9eace: 			throws SQLException {
1:ef9eace: 		getDelegate().setNetworkTimeout(executor, milliseconds);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	public int getNetworkTimeout() throws SQLException {
1:ef9eace: 		return getDelegate().getNetworkTimeout();
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	protected abstract Connection getDelegate();
1:ef9eace: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:2299957
commit:ef9eace
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.common.impl;
1: 
1: import java.sql.Array;
1: import java.sql.Blob;
1: import java.sql.CallableStatement;
1: import java.sql.Clob;
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.NClob;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLClientInfoException;
1: import java.sql.SQLException;
1: import java.sql.SQLWarning;
1: import java.sql.SQLXML;
1: import java.sql.Savepoint;
1: import java.sql.Statement;
1: import java.sql.Struct;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.concurrent.Executor;
1: 
1: public abstract class ConnectionWrapper implements Connection {
1: 
1: 	public <T> T unwrap(Class<T> iface) throws SQLException {
1: 		return getDelegate().unwrap(iface);
1: 	}
1: 
1: 	public boolean isWrapperFor(Class< ? > iface) throws SQLException {
1: 		return getDelegate().isWrapperFor(iface);
1: 	}
1: 
1: 	public Statement createStatement() throws SQLException {
1: 		return getDelegate().createStatement();
1: 	}
1: 
1: 	public PreparedStatement prepareStatement(String sql) throws SQLException {
1: 		return getDelegate().prepareStatement(sql);
1: 	}
1: 
1: 	public CallableStatement prepareCall(String sql) throws SQLException {
1: 		return getDelegate().prepareCall(sql);
1: 	}
1: 
1: 	public String nativeSQL(String sql) throws SQLException {
1: 		return getDelegate().nativeSQL(sql);
1: 	}
1: 
1: 	public void setAutoCommit(boolean autoCommit) throws SQLException {
1: 		getDelegate().setAutoCommit(autoCommit);
1: 	}
1: 
1: 	public boolean getAutoCommit() throws SQLException {
1: 		return getDelegate().getAutoCommit();
1: 	}
1: 
1: 	public void commit() throws SQLException {
1: 		getDelegate().commit();
1: 	}
1: 
1: 	public void rollback() throws SQLException {
1: 		getDelegate().rollback();
1: 	}
1: 
1: 	public void close() throws SQLException {
1: 		getDelegate().close();
1: 	}
1: 
1: 	public boolean isClosed() throws SQLException {
1: 		return getDelegate().isClosed();
1: 	}
1: 
1: 	public DatabaseMetaData getMetaData() throws SQLException {
1: 		return getDelegate().getMetaData();
1: 	}
1: 
1: 	public void setReadOnly(boolean readOnly) throws SQLException {
1: 		getDelegate().setReadOnly(readOnly);
1: 	}
1: 
1: 	public boolean isReadOnly() throws SQLException {
1: 		return getDelegate().isReadOnly();
1: 	}
1: 
1: 	public void setCatalog(String catalog) throws SQLException {
1: 		getDelegate().setCatalog(catalog);
1: 	}
1: 
1: 	public String getCatalog() throws SQLException {
1: 		return getDelegate().getCatalog();
1: 	}
1: 
1: 	public void setTransactionIsolation(int level) throws SQLException {
1: 		getDelegate().setTransactionIsolation(level);
1: 	}
1: 
1: 	public int getTransactionIsolation() throws SQLException {
1: 		return getDelegate().getTransactionIsolation();
1: 	}
1: 
1: 	public SQLWarning getWarnings() throws SQLException {
1: 		return getDelegate().getWarnings();
1: 	}
1: 
1: 	public void clearWarnings() throws SQLException {
1: 		getDelegate().clearWarnings();
1: 	}
1: 
1: 	public Statement createStatement(int resultSetType,
1: 			int resultSetConcurrency) throws SQLException {
1: 		return getDelegate().createStatement(resultSetType, resultSetConcurrency);
1: 	}
1: 
1: 	public PreparedStatement prepareStatement(String sql, int resultSetType,
1: 			int resultSetConcurrency) throws SQLException {
1: 		return getDelegate().prepareStatement(sql, resultSetType,
1: 				resultSetConcurrency);
1: 	}
1: 
1: 	public CallableStatement prepareCall(String sql, int resultSetType,
1: 			int resultSetConcurrency) throws SQLException {
1: 		return getDelegate().prepareCall(sql, resultSetType, resultSetConcurrency);
1: 	}
1: 
1: 	public Map<String,Class< ? >> getTypeMap() throws SQLException {
1: 		return getDelegate().getTypeMap();
1: 	}
1: 
1: 	public void setTypeMap(Map<String,Class< ? >> map) throws SQLException {
1: 		getDelegate().setTypeMap(map);
1: 	}
1: 
1: 	public void setHoldability(int holdability) throws SQLException {
1: 		getDelegate().setHoldability(holdability);
1: 	}
1: 
1: 	public int getHoldability() throws SQLException {
1: 		return getDelegate().getHoldability();
1: 	}
1: 
1: 	public Savepoint setSavepoint() throws SQLException {
1: 		return getDelegate().setSavepoint();
1: 	}
1: 
1: 	public Savepoint setSavepoint(String name) throws SQLException {
1: 		return getDelegate().setSavepoint(name);
1: 	}
1: 
1: 	public void rollback(Savepoint savepoint) throws SQLException {
1: 		getDelegate().rollback(savepoint);
1: 	}
1: 
1: 	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
1: 		getDelegate().releaseSavepoint(savepoint);
1: 	}
1: 
1: 	public Statement createStatement(int resultSetType,
1: 			int resultSetConcurrency, int resultSetHoldability)
1: 					throws SQLException {
1: 		return getDelegate().createStatement(resultSetType, resultSetConcurrency,
1: 				resultSetHoldability);
1: 	}
1: 
1: 	public PreparedStatement prepareStatement(String sql, int resultSetType,
1: 			int resultSetConcurrency, int resultSetHoldability)
1: 					throws SQLException {
1: 		return getDelegate().prepareStatement(sql, resultSetType,
1: 				resultSetConcurrency, resultSetHoldability);
1: 	}
1: 
1: 	public CallableStatement prepareCall(String sql, int resultSetType,
1: 			int resultSetConcurrency, int resultSetHoldability)
1: 					throws SQLException {
1: 		return getDelegate().prepareCall(sql, resultSetType, resultSetConcurrency,
1: 				resultSetHoldability);
1: 	}
1: 
1: 	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
1: 			throws SQLException {
1: 		return getDelegate().prepareStatement(sql, autoGeneratedKeys);
1: 	}
1: 
1: 	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
1: 			throws SQLException {
1: 		return getDelegate().prepareStatement(sql, columnIndexes);
1: 	}
1: 
1: 	public PreparedStatement prepareStatement(String sql, String[] columnNames)
1: 			throws SQLException {
1: 		return getDelegate().prepareStatement(sql, columnNames);
1: 	}
1: 
1: 	public Clob createClob() throws SQLException {
1: 		return getDelegate().createClob();
1: 	}
1: 
1: 	public Blob createBlob() throws SQLException {
1: 		return getDelegate().createBlob();
1: 	}
1: 
1: 	public NClob createNClob() throws SQLException {
1: 		return getDelegate().createNClob();
1: 	}
1: 
1: 	public SQLXML createSQLXML() throws SQLException {
1: 		return getDelegate().createSQLXML();
1: 	}
1: 
1: 	public boolean isValid(int timeout) throws SQLException {
1: 		return getDelegate().isValid(timeout);
1: 	}
1: 
1: 	public void setClientInfo(String name, String value)
1: 			throws SQLClientInfoException {
1: 		getDelegate().setClientInfo(name, value);
1: 	}
1: 
1: 	public void setClientInfo(Properties properties)
1: 			throws SQLClientInfoException {
1: 		getDelegate().setClientInfo(properties);
1: 	}
1: 
1: 	public String getClientInfo(String name) throws SQLException {
1: 		return getDelegate().getClientInfo(name);
1: 	}
1: 
1: 	public Properties getClientInfo() throws SQLException {
1: 		return getDelegate().getClientInfo();
1: 	}
1: 
1: 	public Array createArrayOf(String typeName, Object[] elements)
1: 			throws SQLException {
1: 		return getDelegate().createArrayOf(typeName, elements);
1: 	}
1: 
1: 	public Struct createStruct(String typeName, Object[] attributes)
1: 			throws SQLException {
1: 		return getDelegate().createStruct(typeName, attributes);
1: 	}
1: 
1: 	public void setSchema(String schema) throws SQLException {
1: 		getDelegate().setSchema(schema);
1: 	}
1: 
1: 	public String getSchema() throws SQLException {
1: 		return getDelegate().getSchema();
1: 	}
1: 
1: 	public void abort(Executor executor) throws SQLException {
1: 		getDelegate().abort(executor);
1: 	}
1: 
1: 	public void setNetworkTimeout(Executor executor, int milliseconds)
1: 			throws SQLException {
1: 		getDelegate().setNetworkTimeout(executor, milliseconds);
1: 	}
1: 
1: 	public int getNetworkTimeout() throws SQLException {
1: 		return getDelegate().getNetworkTimeout();
1: 	}
1: 
1: 	protected abstract Connection getDelegate();
1: }
============================================================================