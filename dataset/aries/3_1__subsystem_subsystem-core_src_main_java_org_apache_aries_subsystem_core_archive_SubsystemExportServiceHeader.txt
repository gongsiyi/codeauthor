1:26123d8: /*
1:26123d8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:26123d8:  * you may not use this file except in compliance with the License.
1:26123d8:  * You may obtain a copy of the License at
1:26123d8:  *
1:26123d8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:26123d8:  *
1:26123d8:  * Unless required by applicable law or agreed to in writing, software
1:26123d8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:26123d8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:26123d8:  * See the License for the specific language governing permissions and
1:26123d8:  * limitations under the License.
1:26123d8:  */
1:26123d8: package org.apache.aries.subsystem.core.archive;
18:26123d8: 
1:26123d8: import java.util.ArrayList;
1:df175a6: import java.util.List;
1:26123d8: 
1:26123d8: import org.osgi.framework.Constants;
1:b75f264: import org.osgi.framework.Filter;
1:b75f264: import org.osgi.framework.FrameworkUtil;
1:b75f264: import org.osgi.framework.InvalidSyntaxException;
1:b75f264: import org.osgi.namespace.service.ServiceNamespace;
1:b75f264: import org.osgi.resource.Capability;
1:df175a6: import org.osgi.resource.Resource;
1:26123d8: import org.osgi.service.subsystem.SubsystemConstants;
1:26123d8: 
1:2ffcfb9: public class SubsystemExportServiceHeader extends AbstractClauseBasedHeader<SubsystemExportServiceHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:097d28b: 		public static final String DIRECTIVE_FILTER = Constants.FILTER_DIRECTIVE;
1:26123d8: 
1:26123d8: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9: 	        		parsePath(clause, Patterns.OBJECTCLASS_OR_STAR, false), 
1:2ffcfb9: 	        		parseParameters(clause, false), 
1:2ffcfb9: 	        		generateDefaultParameters());
23:26123d8: 		}
1:b75f264: 
1:097d28b: 		public String getObjectClass() {
1:097d28b: 			return path;
1:df175a6: 		}
1:df175a6: 
1:b75f264: 		public List<Capability> toCapabilities(Resource resource) throws InvalidSyntaxException {
1:b75f264: 			List<Capability> capabilities = resource.getCapabilities(ServiceNamespace.SERVICE_NAMESPACE);
1:b75f264: 			if (capabilities.isEmpty())
1:b75f264: 				return capabilities;
1:b75f264: 			Filter filter = computeFilter();
1:b75f264: 			ArrayList<Capability> result = new ArrayList<Capability>(capabilities.size());
1:b75f264: 			for (Capability capability : capabilities)
1:b75f264: 				if (filter.matches(capability.getAttributes()))
1:b75f264: 					result.add(capability);
1:b75f264: 			result.trimToSize();
1:b75f264: 			return result;
1:26123d8: 		}
1:26123d8: 
1:b75f264: 		private Filter computeFilter() throws InvalidSyntaxException {
1:b75f264: 			return FrameworkUtil.createFilter(computeFilterString());
1:b75f264: 		}
1:b75f264: 
1:b75f264: 		private String computeFilterString() {
1:b75f264: 			Directive directive = getDirective(DIRECTIVE_FILTER);
1:b75f264: 			return new StringBuilder()
1:b75f264: 					.append("(&(")
1:b75f264: 					.append(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE)
1:b75f264: 					.append('=')
1:b75f264: 					.append(path)
1:b75f264: 					.append(')')
1:b75f264: 					.append(directive == null ? "" : directive.getValue())
1:b75f264: 					.append(')')
1:b75f264: 					.toString();
1:b75f264: 		}
1:26123d8: 	}
1:26123d8: 
1:26123d8: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_EXPORTSERVICE;
1:26123d8: 
1:26123d8: 	public SubsystemExportServiceHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:df175a6: 	}
1:df175a6: 
1:df175a6: 	@Override
1:26123d8: 	public String getName() {
1:26123d8: 		return NAME;
1:26123d8: 	}
1:26123d8: 
12:26123d8: 	@Override
1:26123d8: 	public String getValue() {
1:26123d8: 		return toString();
1:26123d8: 	}
1:26123d8: 
1:b75f264: 	public List<Capability> toCapabilities(Resource resource) throws InvalidSyntaxException {
1:b75f264: 		List<Capability> result = new ArrayList<Capability>();
1:df175a6: 		for (Clause clause : clauses)
1:b75f264: 			result.addAll(clause.toCapabilities(resource));
1:df175a6: 		return result;
1:26123d8: 	}
1:26123d8: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class SubsystemExportServiceHeader extends AbstractClauseBasedHeader<SubsystemExportServiceHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1: 			super(
1: 	        		parsePath(clause, Patterns.OBJECTCLASS_OR_STAR, false), 
1: 	        		parseParameters(clause, false), 
1: 	        		generateDefaultParameters());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
/////////////////////////////////////////////////////////////////////////
commit:b75f264
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.resource.Capability;
0: public class SubsystemExportServiceHeader implements Header<SubsystemExportServiceHeader.Clause> {
/////////////////////////////////////////////////////////////////////////
1: 		public List<Capability> toCapabilities(Resource resource) throws InvalidSyntaxException {
1: 			List<Capability> capabilities = resource.getCapabilities(ServiceNamespace.SERVICE_NAMESPACE);
1: 			if (capabilities.isEmpty())
1: 				return capabilities;
1: 			Filter filter = computeFilter();
1: 			ArrayList<Capability> result = new ArrayList<Capability>(capabilities.size());
1: 			for (Capability capability : capabilities)
1: 				if (filter.matches(capability.getAttributes()))
1: 					result.add(capability);
1: 			result.trimToSize();
1: 			return result;
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		private Filter computeFilter() throws InvalidSyntaxException {
1: 			return FrameworkUtil.createFilter(computeFilterString());
1: 		}
1: 		
1: 		private String computeFilterString() {
1: 			Directive directive = getDirective(DIRECTIVE_FILTER);
1: 			return new StringBuilder()
1: 					.append("(&(")
1: 					.append(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE)
1: 					.append('=')
1: 					.append(path)
1: 					.append(')')
1: 					.append(directive == null ? "" : directive.getValue())
1: 					.append(')')
1: 					.toString();
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 	public List<Capability> toCapabilities(Resource resource) throws InvalidSyntaxException {
1: 		List<Capability> result = new ArrayList<Capability>();
1: 			result.addAll(clause.toCapabilities(resource));
commit:df175a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.osgi.resource.Resource;
0: public class SubsystemExportServiceHeader implements CapabilityHeader<SubsystemExportServiceHeader.Clause> {
/////////////////////////////////////////////////////////////////////////
0: 		public SubsystemExportServiceCapability toCapability(Resource resource) {
0: 			return new SubsystemExportServiceCapability(this, resource);
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
0: 	public List<SubsystemExportServiceCapability> toCapabilities(Resource resource) {
0: 		List<SubsystemExportServiceCapability> result = new ArrayList<SubsystemExportServiceCapability>();
1: 		for (Clause clause : clauses)
0: 			result.add(clause.toCapability(resource));
1: 		return result;
1: 	}
1: 	
1: 	@Override
commit:097d28b
/////////////////////////////////////////////////////////////////////////
1: 		public static final String DIRECTIVE_FILTER = Constants.FILTER_DIRECTIVE;
0: 		private static final Pattern PATTERN_OBJECTCLASS = Pattern.compile('(' + Grammar.OBJECTCLASS + ")(?=;|\\z)");
0: 			// No defaults.
0: 			Matcher main = PATTERN_OBJECTCLASS.matcher(clause);
0: 				throw new IllegalArgumentException("Missing objectClass path: " + clause);
/////////////////////////////////////////////////////////////////////////
1: 		public String getObjectClass() {
1: 			return path;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	private static final Pattern PATTERN = Pattern.compile('(' + Grammar.SERVICE + ")(?=,|\\z)");
/////////////////////////////////////////////////////////////////////////
commit:26123d8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Constants;
0: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
0: public class SubsystemExportServiceHeader implements Header<SubsystemExportServiceHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		public static final String ATTRIBUTE_VERSION = Constants.VERSION_ATTRIBUTE;
0: 		public static final String DIRECTIVE_EXCLUDE = Constants.EXCLUDE_DIRECTIVE;
0: 		public static final String DIRECTIVE_INCLUDE = Constants.INCLUDE_DIRECTIVE;
0: 		public static final String DIRECTIVE_MANDATORY = Constants.MANDATORY_DIRECTIVE;
0: 		public static final String DIRECTIVE_USES = Constants.USES_DIRECTIVE;
1: 		
0: 		private static final Pattern PATTERN_PACKAGENAME = Pattern.compile('(' + Grammar.PACKAGENAME + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PACKAGENAMES = Pattern.compile('(' + Grammar.PACKAGENAMES + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(ATTRIBUTE_VERSION);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_VERSION, VersionAttribute.DEFAULT);
1: 		}
1: 		
0: 		private final Collection<String> packageNames = new HashSet<String>();
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher main = PATTERN_PACKAGENAMES.matcher(clause);
0: 			if (!main.find())
0: 				throw new IllegalArgumentException("Missing package names path: " + clause);
0: 			path = main.group();
0: 			Matcher path = PATTERN_PACKAGENAME.matcher(this.path);
0: 			while (path.find())
0: 				packageNames.add(main.group());
0: 			main.usePattern(PATTERN_PARAMETER);
0: 			while (main.find()) {
0: 				Parameter parameter = ParameterFactory.create(main.group());
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute) {
0: 				return (Attribute)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Attribute) {
0: 					attributes.add((Attribute)parameter);
1: 				}
1: 			}
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive) {
0: 				return (Directive)result;
1: 			}
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values()) {
0: 				if (parameter instanceof Directive) {
0: 					directives.add((Directive)parameter);
1: 				}
1: 			}
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 		
0: 		public Collection<String> getPackageNames() {
0: 			return Collections.unmodifiableCollection(packageNames);
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 		
1: 		@Override
0: 		public String getPath() {
0: 			return path;
1: 		}
1: 		
0: 		public Collection<ExportPackageCapability> toCapabilities(Resource resource) {
0: 			Collection<ExportPackageCapability> result = new ArrayList<ExportPackageCapability>(packageNames.size());
0: 			for (String packageName : packageNames)
0: 				result.add(new ExportPackageCapability(packageName, parameters.values(), resource));
0: 			return result;
1: 		}
1: 		
1: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 		}
1: 	}
1: 	
1: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_EXPORTSERVICE;
1: 	
0: 	// TODO Subsystem-ExportService currently does not have its own grammar, but it's similar to Provide-Capability.
0: 	private static final Pattern PATTERN = Pattern.compile('(' + Grammar.CAPABILITY + ")(?=,|\\z)");
1: 	
0: 	private final Set<Clause> clauses = new HashSet<Clause>();
1: 	
1: 	public SubsystemExportServiceHeader(String value) {
0: 		Matcher matcher = PATTERN.matcher(value);
0: 		while (matcher.find())
0: 			clauses.add(new Clause(matcher.group()));
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A " + NAME + " header must have at least one clause");
1: 	}
1: 	
1: 	@Override
0: 	public Collection<SubsystemExportServiceHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
0: 	public Collection<ExportPackageCapability> toCapabilities(Resource resource) {
0: 		Collection<ExportPackageCapability> result = new ArrayList<ExportPackageCapability>();
0: 		for (Clause clause : clauses)
0: 			result.addAll(clause.toCapabilities(resource));
0: 		return result;
1: 	}
1: 	
1: 	@Override
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:6576152
/////////////////////////////////////////////////////////////////////////
0:     private static final Pattern PATTERN = Pattern.compile("(" + Grammar.SERVICE_OR_WILDCARD + ")(?=,|\\z)");
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0afdb06
/////////////////////////////////////////////////////////////////////////
0: 
0: 		private static final Pattern PATTERN_OBJECTCLASS_OR_STAR = Pattern.compile("((" + Grammar.OBJECTCLASS + ")|[*])(?=;|\\z)");
0: 
0: 
0: 
0: 			Matcher main = PATTERN_OBJECTCLASS_OR_STAR.matcher(clause);
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     private static final Pattern PATTERN = Pattern.compile("(" + Grammar.SUBSYSTEM_EXPORTSERVICE + ")(?=,|\\z)");
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
============================================================================