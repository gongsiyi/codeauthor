1:1c43780: /**
1:1c43780:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c43780:  * or more contributor license agreements.  See the NOTICE file
1:1c43780:  * distributed with this work for additional information
1:1c43780:  * regarding copyright ownership.  The ASF licenses this file
1:1c43780:  * to you under the Apache License, Version 2.0 (the
1:1c43780:  * "License"); you may not use this file except in compliance
1:1c43780:  * with the License.  You may obtain a copy of the License at
1:1c43780:  *
1:1c43780:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c43780:  *
1:1c43780:  * Unless required by applicable law or agreed to in writing,
1:1c43780:  * software distributed under the License is distributed on an
1:1c43780:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c43780:  * KIND, either express or implied.  See the License for the
1:1c43780:  * specific language governing permissions and limitations
1:1c43780:  * under the License.
1:1c43780:  */
1:1c43780: package org.apache.aries.spifly;
1:1c43780: 
1:1c43780: import java.util.ArrayList;
1:1c43780: import java.util.HashMap;
1:1c43780: import java.util.List;
1:1c43780: import java.util.Map;
1:1c43780: 
1:1c43780: public class ArgRestrictions {
1:1c43780:     private final Map<Pair<Integer, String>, List<String>> restrictions = 
1:1c43780:             new HashMap<Pair<Integer, String>, List<String>>();
1:1c43780:     
1:1c43780:     public void addRestriction(int argNumber, String className) {
1:1c43780:         addRestriction(argNumber, className, null);
1:1c43780:     }
1:1c43780: 
1:1c43780:     public void addRestriction(int argNumber, String className, String allowedArgValue) {
1:1c43780:         Pair<Integer, String> key = new Pair<Integer, String>(argNumber, className);
1:1c43780:         List<String> allowedValues = restrictions.get(key);
1:1c43780:         if (allowedArgValue != null) {
1:1c43780:             if (allowedValues == null) {
1:1c43780:                 allowedValues = new ArrayList<String>();
1:1c43780:                 restrictions.put(key, allowedValues);
1:1c43780:             }            
1:1c43780:             allowedValues.add(allowedArgValue);            
1:1c43780:         }
1:1c43780:         restrictions.put(key, allowedValues);
1:1c43780:     }
1:1c43780: 
1:1c43780:     public String[] getArgClasses() {
1:1c43780:         List<String> classes = new ArrayList<String>();
1:1c43780:         for (Pair<Integer, String> key : restrictions.keySet()) {
1:1c43780:             classes.add(key.getRight());
1:1c43780:         }
1:1c43780:         
1:1c43780:         if (classes.size() == 0)
1:1c43780:             return null;
1:1c43780:         return classes.toArray(new String [classes.size()]);
1:1c43780:     }
1:1c43780: 
1:1c43780:     public boolean matches(Map<Pair<Integer, String>, String> args) {
1:1c43780:         for (Pair<Integer, String> key : args.keySet()) {
1:1c43780:             if (!restrictions.containsKey(key)) {
1:1c43780:                 return false;
1:1c43780:             }
1:1c43780:             
1:1c43780:             List<String> values = restrictions.get(key);
1:1c43780:             if (values != null) {
1:1c43780:                 String val = args.get(key);
1:1c43780:                 if (!values.contains(val)) {
1:1c43780:                     return false;
1:1c43780:                 }
1:1c43780:             }
1:1c43780:         }
1:1c43780:         return true;        
1:1c43780:     }
1:1c43780: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:1c43780
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: public class ArgRestrictions {
1:     private final Map<Pair<Integer, String>, List<String>> restrictions = 
1:             new HashMap<Pair<Integer, String>, List<String>>();
1:     
1:     public void addRestriction(int argNumber, String className) {
1:         addRestriction(argNumber, className, null);
1:     }
1: 
1:     public void addRestriction(int argNumber, String className, String allowedArgValue) {
1:         Pair<Integer, String> key = new Pair<Integer, String>(argNumber, className);
1:         List<String> allowedValues = restrictions.get(key);
1:         if (allowedArgValue != null) {
1:             if (allowedValues == null) {
1:                 allowedValues = new ArrayList<String>();
1:                 restrictions.put(key, allowedValues);
1:             }            
1:             allowedValues.add(allowedArgValue);            
1:         }
1:         restrictions.put(key, allowedValues);
1:     }
1: 
1:     public String[] getArgClasses() {
1:         List<String> classes = new ArrayList<String>();
1:         for (Pair<Integer, String> key : restrictions.keySet()) {
1:             classes.add(key.getRight());
1:         }
1:         
1:         if (classes.size() == 0)
1:             return null;
1:         return classes.toArray(new String [classes.size()]);
1:     }
1: 
1:     public boolean matches(Map<Pair<Integer, String>, String> args) {
1:         for (Pair<Integer, String> key : args.keySet()) {
1:             if (!restrictions.containsKey(key)) {
1:                 return false;
1:             }
1:             
1:             List<String> values = restrictions.get(key);
1:             if (values != null) {
1:                 String val = args.get(key);
1:                 if (!values.contains(val)) {
1:                     return false;
1:                 }
1:             }
1:         }
1:         return true;        
1:     }
1: }
============================================================================