1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:e9ade98: package org.apache.aries.tx.control.jpa.xa.openjpa.impl;
1:e9ade98: 
1:e9ade98: import static javax.transaction.Status.STATUS_ACTIVE;
1:e9ade98: import static javax.transaction.Status.STATUS_COMMITTED;
1:e9ade98: import static javax.transaction.Status.STATUS_COMMITTING;
1:e9ade98: import static javax.transaction.Status.STATUS_MARKED_ROLLBACK;
1:e9ade98: import static javax.transaction.Status.STATUS_NO_TRANSACTION;
1:e9ade98: import static javax.transaction.Status.STATUS_PREPARING;
1:e9ade98: import static javax.transaction.Status.STATUS_ROLLEDBACK;
1:e9ade98: import static javax.transaction.Status.STATUS_ROLLING_BACK;
1:e9ade98: import static javax.transaction.Status.STATUS_UNKNOWN;
1:e9ade98: 
1:e9ade98: import javax.transaction.HeuristicMixedException;
1:e9ade98: import javax.transaction.HeuristicRollbackException;
1:e9ade98: import javax.transaction.InvalidTransactionException;
1:e9ade98: import javax.transaction.NotSupportedException;
1:e9ade98: import javax.transaction.RollbackException;
1:e9ade98: import javax.transaction.Status;
1:e9ade98: import javax.transaction.Synchronization;
1:e9ade98: import javax.transaction.SystemException;
1:e9ade98: import javax.transaction.Transaction;
1:e9ade98: import javax.transaction.TransactionManager;
1:e9ade98: import javax.transaction.xa.XAResource;
1:e9ade98: 
1:e9ade98: import org.apache.openjpa.ee.ManagedRuntime;
1:e9ade98: import org.osgi.service.transaction.control.TransactionContext;
1:e9ade98: import org.osgi.service.transaction.control.TransactionControl;
1:74e23ff: import org.osgi.service.transaction.control.TransactionException;
1:e9ade98: import org.osgi.service.transaction.control.TransactionStatus;
1:e9ade98: 
1:74e23ff: public class OpenJPATxControlPlatform implements ManagedRuntime, 
1:74e23ff: 	TransactionManager, Transaction {
1:e9ade98: 
1:74e23ff: 	private final ThreadLocal<TransactionControl> txControlToUse;
1:e9ade98: 	
1:74e23ff: 	public OpenJPATxControlPlatform(ThreadLocal<TransactionControl> txControlToUse) {
1:74e23ff: 		this.txControlToUse = txControlToUse;
1:e9ade98: 	}
1:74e23ff: 	
1:74e23ff: 	public TransactionControl getTxControl() {
1:74e23ff: 		TransactionControl transactionControl = txControlToUse.get();
1:74e23ff: 		if(transactionControl == null) {
1:74e23ff: 			throw new TransactionException("A No Transaction Context could not be created because there is no associated Transaction Control");
1:74e23ff: 		}
1:74e23ff: 		return transactionControl;
1:74e23ff: 	}
1:74e23ff: 
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void doNonTransactionalWork(Runnable arg0) throws NotSupportedException {
1:74e23ff: 		
1:74e23ff: 		TransactionControl transactionControl = getTxControl();
1:74e23ff: 		
1:74e23ff: 		transactionControl.notSupported(() -> {
1:e9ade98: 			arg0.run();
1:e9ade98: 			return null;
1:e9ade98: 		});
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public Throwable getRollbackCause() throws Exception {
1:e9ade98: 		return null;
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public Object getTransactionKey() throws Exception, SystemException {
1:74e23ff: 		return getTxControl().getCurrentContext().getTransactionKey();
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public TransactionManager getTransactionManager() throws Exception {
1:e9ade98: 		return this;
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void setRollbackOnly(Throwable arg0) throws Exception {
1:74e23ff: 		getTxControl().setRollbackOnly();
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void setRollbackOnly() throws IllegalStateException, SystemException {
1:74e23ff: 		getTxControl().setRollbackOnly();
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public int getStatus() throws SystemException {
1:74e23ff: 		TransactionContext currentContext = getTxControl().getCurrentContext();
1:e9ade98: 		if(currentContext != null) {
1:e9ade98: 			return toIntStatus(currentContext.getTransactionStatus());
1:e9ade98: 		}
1:e9ade98: 		return STATUS_NO_TRANSACTION;
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	private int toIntStatus(TransactionStatus status) {
1:e9ade98: 		switch(status) {
1:e9ade98: 			case NO_TRANSACTION:
1:e9ade98: 				return STATUS_NO_TRANSACTION;
1:e9ade98: 			case ACTIVE:
1:e9ade98: 				return STATUS_ACTIVE;
1:e9ade98: 			case PREPARING:
1:e9ade98: 				return STATUS_PREPARING;
1:e9ade98: 			case PREPARED:
1:e9ade98: 				return Status.STATUS_PREPARED;
1:e9ade98: 			case COMMITTING:
1:e9ade98: 				return STATUS_COMMITTING;
1:e9ade98: 			case COMMITTED:
1:e9ade98: 				return STATUS_COMMITTED;
1:e9ade98: 			case MARKED_ROLLBACK:
1:e9ade98: 				return STATUS_MARKED_ROLLBACK;
1:e9ade98: 			case ROLLING_BACK:
1:e9ade98: 				return STATUS_ROLLING_BACK;
1:e9ade98: 			case ROLLED_BACK:
1:e9ade98: 				return STATUS_ROLLEDBACK;
1:e9ade98: 			default:
1:e9ade98: 				return STATUS_UNKNOWN;
1:e9ade98: 		}
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public Transaction getTransaction() throws SystemException {
1:e9ade98: 		return this;
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1:e9ade98: 		return false;
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
1:74e23ff: 		getTxControl().getCurrentContext().registerXAResource(xaRes, null);
1:e9ade98: 		return true;
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void registerSynchronization(Synchronization synch)
1:e9ade98: 			throws IllegalStateException, RollbackException, SystemException {
1:74e23ff: 		TransactionContext currentContext = getTxControl().getCurrentContext();
1:e9ade98: 		currentContext.preCompletion(synch::beforeCompletion);
1:e9ade98: 		currentContext.postCompletion(status -> synch.afterCompletion(toIntStatus(status)));
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void begin() throws NotSupportedException, SystemException {
1:e9ade98: 		throw new NotSupportedException("The Transaction contol service does not support open scoped work");
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException,
1:e9ade98: 			RollbackException, SecurityException, SystemException {
1:e9ade98: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1:e9ade98: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void rollback() throws IllegalStateException, SecurityException, SystemException {
1:e9ade98: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public void setTransactionTimeout(int seconds) throws SystemException {
1:e9ade98: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: 	@Override
1:e9ade98: 	public Transaction suspend() throws SystemException {
1:e9ade98: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1:e9ade98: 	}
1:e9ade98: 
1:e9ade98: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:74e23ff
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.transaction.control.TransactionException;
1: public class OpenJPATxControlPlatform implements ManagedRuntime, 
1: 	TransactionManager, Transaction {
1: 	private final ThreadLocal<TransactionControl> txControlToUse;
1: 	public OpenJPATxControlPlatform(ThreadLocal<TransactionControl> txControlToUse) {
1: 		this.txControlToUse = txControlToUse;
1: 	
1: 	public TransactionControl getTxControl() {
1: 		TransactionControl transactionControl = txControlToUse.get();
1: 		if(transactionControl == null) {
1: 			throw new TransactionException("A No Transaction Context could not be created because there is no associated Transaction Control");
1: 		}
1: 		return transactionControl;
1: 	}
1: 
1: 		
1: 		TransactionControl transactionControl = getTxControl();
1: 		
1: 		transactionControl.notSupported(() -> {
/////////////////////////////////////////////////////////////////////////
1: 		return getTxControl().getCurrentContext().getTransactionKey();
/////////////////////////////////////////////////////////////////////////
1: 		getTxControl().setRollbackOnly();
1: 		getTxControl().setRollbackOnly();
1: 		TransactionContext currentContext = getTxControl().getCurrentContext();
/////////////////////////////////////////////////////////////////////////
1: 		getTxControl().getCurrentContext().registerXAResource(xaRes, null);
1: 		TransactionContext currentContext = getTxControl().getCurrentContext();
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
0: 		txControl.getCurrentContext().registerXAResource(xaRes, null);
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:e9ade98
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jpa.xa.openjpa.impl;
1: 
1: import static javax.transaction.Status.STATUS_ACTIVE;
1: import static javax.transaction.Status.STATUS_COMMITTED;
1: import static javax.transaction.Status.STATUS_COMMITTING;
1: import static javax.transaction.Status.STATUS_MARKED_ROLLBACK;
1: import static javax.transaction.Status.STATUS_NO_TRANSACTION;
1: import static javax.transaction.Status.STATUS_PREPARING;
1: import static javax.transaction.Status.STATUS_ROLLEDBACK;
1: import static javax.transaction.Status.STATUS_ROLLING_BACK;
1: import static javax.transaction.Status.STATUS_UNKNOWN;
1: 
1: import javax.transaction.HeuristicMixedException;
1: import javax.transaction.HeuristicRollbackException;
1: import javax.transaction.InvalidTransactionException;
1: import javax.transaction.NotSupportedException;
1: import javax.transaction.RollbackException;
1: import javax.transaction.Status;
1: import javax.transaction.Synchronization;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.openjpa.ee.ManagedRuntime;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionStatus;
1: 
0: public class OpenJPATxControlPlatform implements ManagedRuntime, TransactionManager, Transaction {
1: 
0: 	private final TransactionControl txControl;
1: 	
0: 	public OpenJPATxControlPlatform(TransactionControl txControl) {
0: 		this.txControl = txControl;
1: 	}
1: 
1: 	@Override
1: 	public void doNonTransactionalWork(Runnable arg0) throws NotSupportedException {
0: 		txControl.notSupported(() -> {
1: 			arg0.run();
1: 			return null;
1: 		});
1: 	}
1: 
1: 	@Override
1: 	public Throwable getRollbackCause() throws Exception {
1: 		return null;
1: 	}
1: 
1: 	@Override
1: 	public Object getTransactionKey() throws Exception, SystemException {
0: 		return txControl.getCurrentContext().getTransactionKey();
1: 	}
1: 
1: 	@Override
1: 	public TransactionManager getTransactionManager() throws Exception {
1: 		return this;
1: 	}
1: 
1: 	@Override
1: 	public void setRollbackOnly(Throwable arg0) throws Exception {
0: 		txControl.setRollbackOnly();
1: 	}
1: 
1: 	@Override
1: 	public void setRollbackOnly() throws IllegalStateException, SystemException {
0: 		txControl.setRollbackOnly();
1: 	}
1: 
1: 	@Override
1: 	public int getStatus() throws SystemException {
0: 		TransactionContext currentContext = txControl.getCurrentContext();
1: 		if(currentContext != null) {
1: 			return toIntStatus(currentContext.getTransactionStatus());
1: 		}
1: 		return STATUS_NO_TRANSACTION;
1: 	}
1: 
1: 	private int toIntStatus(TransactionStatus status) {
1: 		switch(status) {
1: 			case NO_TRANSACTION:
1: 				return STATUS_NO_TRANSACTION;
1: 			case ACTIVE:
1: 				return STATUS_ACTIVE;
1: 			case PREPARING:
1: 				return STATUS_PREPARING;
1: 			case PREPARED:
1: 				return Status.STATUS_PREPARED;
1: 			case COMMITTING:
1: 				return STATUS_COMMITTING;
1: 			case COMMITTED:
1: 				return STATUS_COMMITTED;
1: 			case MARKED_ROLLBACK:
1: 				return STATUS_MARKED_ROLLBACK;
1: 			case ROLLING_BACK:
1: 				return STATUS_ROLLING_BACK;
1: 			case ROLLED_BACK:
1: 				return STATUS_ROLLEDBACK;
1: 			default:
1: 				return STATUS_UNKNOWN;
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public Transaction getTransaction() throws SystemException {
1: 		return this;
1: 	}
1: 
1: 	@Override
1: 	public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException {
1: 		return false;
1: 	}
1: 
1: 	@Override
1: 	public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException {
0: 		txControl.getCurrentContext().registerXAResource(xaRes);
1: 		return true;
1: 	}
1: 
1: 	@Override
1: 	public void registerSynchronization(Synchronization synch)
1: 			throws IllegalStateException, RollbackException, SystemException {
0: 		TransactionContext currentContext = txControl.getCurrentContext();
1: 		currentContext.preCompletion(synch::beforeCompletion);
1: 		currentContext.postCompletion(status -> synch.afterCompletion(toIntStatus(status)));
1: 	}
1: 
1: 	@Override
1: 	public void begin() throws NotSupportedException, SystemException {
1: 		throw new NotSupportedException("The Transaction contol service does not support open scoped work");
1: 	}
1: 
1: 	@Override
1: 	public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException,
1: 			RollbackException, SecurityException, SystemException {
1: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1: 	}
1: 
1: 	@Override
1: 	public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException {
1: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1: 	}
1: 
1: 	@Override
1: 	public void rollback() throws IllegalStateException, SecurityException, SystemException {
1: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1: 	}
1: 
1: 	@Override
1: 	public void setTransactionTimeout(int seconds) throws SystemException {
1: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1: 	}
1: 
1: 	@Override
1: 	public Transaction suspend() throws SystemException {
1: 		throw new SystemException("The Transaction contol service does not support open scoped work");
1: 	}
1: 
1: }
============================================================================