1:6715d3d: /**
1:6715d3d:  * Licensed to the Apache Software Foundation (ASF) under one
1:6715d3d:  * or more contributor license agreements.  See the NOTICE file
1:6715d3d:  * distributed with this work for additional information
1:6715d3d:  * regarding copyright ownership.  The ASF licenses this file
1:6715d3d:  * to you under the Apache License, Version 2.0 (the
1:6715d3d:  * "License"); you may not use this file except in compliance
1:6715d3d:  * with the License.  You may obtain a copy of the License at
1:6715d3d:  *
1:6715d3d:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6715d3d:  *
1:6715d3d:  * Unless required by applicable law or agreed to in writing,
1:6715d3d:  * software distributed under the License is distributed on an
1:6715d3d:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6715d3d:  * KIND, either express or implied.  See the License for the
1:6715d3d:  * specific language governing permissions and limitations
1:6715d3d:  * under the License.
1:6715d3d:  */
1:5602448: package org.apache.aries.proxy;
1:5602448: 
1:24455ce: import java.util.Collection;
1:24455ce: import java.util.concurrent.Callable;
1:24455ce: 
1:24455ce: import org.osgi.framework.Bundle;
1:24455ce: 
1:24455ce: /**
1:24455ce:  * The proxy manager service allows clients to generate and manage proxies.
1:24455ce:  */
1:5602448: public interface ProxyManager 
1:5602448: {
1:96d4e06:   /**
1:96d4e06:    * Create a proxy that delegates to an object instance which may change
1:96d4e06:    * over time
1:96d4e06:    * 
1:96d4e06:    * @param clientBundle The bundle providing the class to be proxied
1:96d4e06:    * @param classes  The interfaces and/or classes to be proxied
1:96d4e06:    * @param dispatcher A {@link Callable} that will called each time the proxy 
1:96d4e06:    *                   is invoked to locate the object to delegate to
1:96d4e06:    * @param template A template object for the proxy, may be null if only interfaces
1:96d4e06:    *                 need to be proxied. Supplying a templates typically offer a 
1:96d4e06:    *                 significant performance boost to the resulting proxy.
1:96d4e06:    * @return A proxy object that delegates to real objects under the covers
1:96d4e06:    * @throws UnableToProxyException
1:96d4e06:    */
1:96d4e06:   public Object createDelegatingProxy(Bundle clientBundle, Collection<Class<?>> classes, Callable<Object> dispatcher, Object template) throws UnableToProxyException;
1:96d4e06:   
1:96d4e06:   /**
1:96d4e06:    * Creates a proxy that invokes the supplied {@link InvocationListener} 
1:96d4e06:    * immediately before and after any non-private method is called.
1:96d4e06:    * 
1:96d4e06:    * @param clientBundle
1:96d4e06:    * @param classes
1:96d4e06:    * @param delegate
1:96d4e06:    * @param wrapper
1:96d4e06:    * @return
1:96d4e06:    * @throws UnableToProxyException
1:96d4e06:    */
1:96d4e06:   public Object createInterceptingProxy(Bundle clientBundle, Collection<Class<?>> classes, 
1:96d4e06:       Object delegate, InvocationListener wrapper) throws UnableToProxyException;
1:96d4e06:   
1:96d4e06:   /**
1:96d4e06:    * Creates a single proxy that both delegates and intercepts. See
1:96d4e06:    * {ProxyManager{@link #createDelegatingProxy(Bundle, Collection, Callable)} 
1:96d4e06:    * and {ProxyManager{@link #createInterceptingProxy(Bundle, Collection, Object, InvocationListener)}
1:96d4e06:    * 
1:96d4e06:    * @param clientBundle
1:96d4e06:    * @param classes
1:96d4e06:    * @param dispatcher
1:96d4e06:    * @param template A template object for the proxy, may be null if only interfaces
1:96d4e06:    *                 need to be proxied. Supplying a templates typically offer a 
1:96d4e06:    *                 significant performance boost to the resulting proxy.
1:96d4e06:    * @param wrapper
1:96d4e06:    * @return
1:96d4e06:    * @throws UnableToProxyException
1:96d4e06:    */
1:96d4e06:   public Object createDelegatingInterceptingProxy(Bundle clientBundle, Collection<Class<?>> classes, 
1:96d4e06:       Callable<Object> dispatcher, Object template, InvocationListener wrapper) throws UnableToProxyException;
1:96d4e06:   
1:24455ce:   /**
1:24455ce:    * This method unwraps the provided proxy returning the target object.
1:24455ce:    * 
1:24455ce:    * @param proxy the proxy to unwrap.
1:24455ce:    * @return      the target object.
1:24455ce:    */
1:24455ce:   public Callable<Object> unwrap(Object proxy);
1:24455ce:   /**
1:05ef337:    * Returns true if and only if the specified object was generated by the ProxyManager. See
1:96d4e06:    * {@link ProxyManager#createDelegatingProxy(Bundle,Collection,Callable)} for details on how to create a proxy. 
1:24455ce:    * @param proxy The proxy object to test
1:24455ce:    * @return      true if it is a proxy, false otherwise.
1:24455ce:    */
1:24455ce:   public boolean isProxy(Object proxy);
1:05ef337: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * Create a proxy that delegates to an object instance which may change
1:    * over time
1:    * 
1:    * @param clientBundle The bundle providing the class to be proxied
1:    * @param classes  The interfaces and/or classes to be proxied
1:    * @param dispatcher A {@link Callable} that will called each time the proxy 
1:    *                   is invoked to locate the object to delegate to
1:    * @param template A template object for the proxy, may be null if only interfaces
1:    *                 need to be proxied. Supplying a templates typically offer a 
1:    *                 significant performance boost to the resulting proxy.
1:    * @return A proxy object that delegates to real objects under the covers
1:    * @throws UnableToProxyException
1:    */
1:   public Object createDelegatingProxy(Bundle clientBundle, Collection<Class<?>> classes, Callable<Object> dispatcher, Object template) throws UnableToProxyException;
1:   
1:   /**
1:    * Creates a proxy that invokes the supplied {@link InvocationListener} 
1:    * immediately before and after any non-private method is called.
1:    * 
1:    * @param clientBundle
1:    * @param classes
1:    * @param delegate
1:    * @param wrapper
1:    * @return
1:    * @throws UnableToProxyException
1:    */
1:   public Object createInterceptingProxy(Bundle clientBundle, Collection<Class<?>> classes, 
1:       Object delegate, InvocationListener wrapper) throws UnableToProxyException;
1:   
1:   /**
1:    * Creates a single proxy that both delegates and intercepts. See
1:    * {ProxyManager{@link #createDelegatingProxy(Bundle, Collection, Callable)} 
1:    * and {ProxyManager{@link #createInterceptingProxy(Bundle, Collection, Object, InvocationListener)}
1:    * 
1:    * @param clientBundle
1:    * @param classes
1:    * @param dispatcher
1:    * @param template A template object for the proxy, may be null if only interfaces
1:    *                 need to be proxied. Supplying a templates typically offer a 
1:    *                 significant performance boost to the resulting proxy.
1:    * @param wrapper
1:    * @return
1:    * @throws UnableToProxyException
1:    */
1:   public Object createDelegatingInterceptingProxy(Bundle clientBundle, Collection<Class<?>> classes, 
1:       Callable<Object> dispatcher, Object template, InvocationListener wrapper) throws UnableToProxyException;
1:   
/////////////////////////////////////////////////////////////////////////
1:    * {@link ProxyManager#createDelegatingProxy(Bundle,Collection,Callable)} for details on how to create a proxy. 
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:05ef337
/////////////////////////////////////////////////////////////////////////
1:    * Returns true if and only if the specified object was generated by the ProxyManager. See
0:    * {@link ProxyManager#createProxy(Bundle,Collection,Callable)} for details on how to create a proxy. 
1: }
commit:16f4117
/////////////////////////////////////////////////////////////////////////
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
0: import java.util.List;
1: import java.util.concurrent.Callable;
1: 
1: import org.osgi.framework.Bundle;
1: 
1: /**
1:  * The proxy manager service allows clients to generate and manage proxies.
1:  */
0:   public Object createProxy(Bundle clientBundle, Collection<Class<?>> classes, Callable<Object> dispatcher) throws UnableToProxyException;
0:   public Object createProxy(Bundle clientBundle, Collection<Class<?>> classes, Callable<Object> dispatcher, InvocationHandlerWrapper wrapper) throws UnableToProxyException;
1:   /**
1:    * This method unwraps the provided proxy returning the target object.
1:    * 
1:    * @param proxy the proxy to unwrap.
1:    * @return      the target object.
1:    */
1:   public Callable<Object> unwrap(Object proxy);
1:   /**
0:    * Returns true if and only if the specified object was generated by a ProxyFactory returned by
0:    * a call to {@link ProxyManager#createProxyFactory(boolean)}.
1:    * @param proxy The proxy object to test
1:    * @return      true if it is a proxy, false otherwise.
1:    */
1:   public boolean isProxy(Object proxy);
commit:6715d3d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:5602448
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy;
1: 
1: public interface ProxyManager 
1: {
0:   public ProxyFactory createProxyFactory();
0:   public ProxyFactory createProxyFactory(boolean interfaceProxyingOnly);
0:   public Object unwrap(Object proxy);
0: }
============================================================================