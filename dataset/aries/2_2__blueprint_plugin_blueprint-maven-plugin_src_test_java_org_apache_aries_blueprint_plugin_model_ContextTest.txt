1:46cfc09: /**
1:46cfc09:  * Licensed to the Apache Software Foundation (ASF) under one
1:46cfc09:  * or more contributor license agreements.  See the NOTICE file
1:46cfc09:  * distributed with this work for additional information
1:46cfc09:  * regarding copyright ownership.  The ASF licenses this file
1:46cfc09:  * to you under the Apache License, Version 2.0 (the
1:46cfc09:  * "License"); you may not use this file except in compliance
1:46cfc09:  * with the License.  You may obtain a copy of the License at
1:0d2c0ec:  * <p>
1:0d2c0ec:  * http://www.apache.org/licenses/LICENSE-2.0
1:0d2c0ec:  * <p>
1:46cfc09:  * Unless required by applicable law or agreed to in writing,
1:46cfc09:  * software distributed under the License is distributed on an
1:46cfc09:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:46cfc09:  * KIND, either express or implied.  See the License for the
1:46cfc09:  * specific language governing permissions and limitations
1:46cfc09:  * under the License.
1:46cfc09:  */
1:46cfc09: package org.apache.aries.blueprint.plugin.model;
1:65ec8ae: 
1:0d2c0ec: import org.apache.aries.blueprint.plugin.BlueprintConfigurationImpl;
1:46cfc09: import org.apache.aries.blueprint.plugin.test.MyBean3;
1:b5bf406: import org.apache.aries.blueprint.plugin.test.MyFactoryBean;
1:b5bf406: import org.apache.aries.blueprint.plugin.test.MyProduced;
1:46cfc09: import org.apache.aries.blueprint.plugin.test.ServiceReferences;
1:46cfc09: import org.junit.Assert;
1:46cfc09: import org.junit.Test;
1:65ec8ae: import org.osgi.framework.Bundle;
1:65ec8ae: import org.osgi.framework.BundleContext;
1:65ec8ae: import org.osgi.service.blueprint.container.BlueprintContainer;
1:65ec8ae: import org.osgi.service.blueprint.container.Converter;
1:65ec8ae: 
1:0d2c0ec: import java.util.Arrays;
1:0d2c0ec: import java.util.HashSet;
1:0d2c0ec: import java.util.Set;
1:65ec8ae: 
1:65ec8ae: import static org.junit.Assert.assertEquals;
1:b5bf406: 
1:46cfc09: public class ContextTest {
1:a680609:     private static final String NS_JPA1 = "http://aries.apache.org/xmlns/jpa/v1.0.0";
1:a680609:     private static final String NS_TX1 = "http://aries.apache.org/xmlns/transactions/v1.0.0";
1:b5bf406: 
1:a680609:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(NS_JPA1, NS_TX1));
1:aaf182f:     private final BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null, null);
1:b5bf406: 
2:46cfc09:     @Test
1:0d2c0ec:     public void testLists() {
1:0d2c0ec:         Context context = new Context(blueprintConfiguration, MyBean3.class);
1:46cfc09:         Assert.assertEquals(1, context.getBeans().size());
1:0d2c0ec:         Assert.assertEquals(0, getOsgiServices(context).size());
1:46cfc09:     }
1:3aa60ba: 
1:b5bf406:     @Test
1:0d2c0ec:     public void testLists2() {
1:0d2c0ec:         Context context = new Context(blueprintConfiguration, ServiceReferences.class);
1:853c6ee:         context.resolve();
1:46cfc09:         Assert.assertEquals(1, context.getBeans().size());
1:0d2c0ec:         Assert.assertEquals(3, getOsgiServices(context).size());
1:46cfc09:     }
1:3aa60ba: 
1:0d2c0ec:     private Set<String> getOsgiServices(Context context) {
1:0d2c0ec:         Set<String> blueprintWritersKeys = context.getBlueprintWriters().keySet();
1:0d2c0ec:         Set<String> osgiServices = new HashSet<>();
1:0d2c0ec:         for (String blueprintWritersKey : blueprintWritersKeys) {
1:0d2c0ec:             if (blueprintWritersKey.startsWith("osgiService/")) {
1:0d2c0ec:                 osgiServices.add(blueprintWritersKey);
1:46cfc09:             }
1:46cfc09:         }
1:0d2c0ec:         return osgiServices;
4:0d2c0ec:     }
1:3aa60ba: 
1:65ec8ae:     private void assertSpecialRef(String expectedId, Class<?> clazz) {
1:0d2c0ec:         Context context = new Context(blueprintConfiguration);
1:65ec8ae:         BeanRef ref = context.getMatching(new BeanRef(clazz));
1:65ec8ae:         assertEquals(expectedId, ref.id);
1:65ec8ae:     }
1:3aa60ba: 
1:65ec8ae:     @Test
1:65ec8ae:     public void testSpecialRefs() {
1:65ec8ae:         assertSpecialRef("blueprintBundleContext", BundleContext.class);
1:65ec8ae:         assertSpecialRef("blueprintBundle", Bundle.class);
1:65ec8ae:         assertSpecialRef("blueprintContainer", BlueprintContainer.class);
1:65ec8ae:         assertSpecialRef("blueprintConverter", Converter.class);
1:65ec8ae:     }
1:3aa60ba: 
1:46cfc09:     @Test
1:0d2c0ec:     public void testProduced() throws NoSuchFieldException, SecurityException {
1:0d2c0ec:         Context context = new Context(blueprintConfiguration, MyFactoryBean.class);
1:0d2c0ec:         context.resolve();
1:a2ed671:         BeanFromFactory matching = (BeanFromFactory) context.getMatching(new BeanRef(MyProduced.class));
1:b5bf406:         Assert.assertEquals(MyProduced.class, matching.clazz);
1:853c6ee:         Assert.assertEquals("myFactoryBean", matching.factoryBean.id);
1:b5bf406:         Assert.assertEquals("create", matching.factoryMethod);
1:b5bf406:     }
1:3aa60ba: 
1:0d2c0ec: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:3aa60ba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.test.ServiceReferencesParent;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         BeanRef matching = context.getMatching(new BeanRef(ServiceReferencesParent.class.getDeclaredField("serviceB")));
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:853c6ee
/////////////////////////////////////////////////////////////////////////
0:         Assert.assertEquals(3, context.getServiceRefs().size());
0:         BeanRef matching = context.getMatching(new BeanRef(ServiceReferences.class.getDeclaredField("serviceB")));
0:         Assert.assertEquals("serviceB-typeB1", matching.id);
/////////////////////////////////////////////////////////////////////////
1:         context.resolve();
1:         Assert.assertEquals("myFactoryBean", matching.factoryBean.id);
commit:e214baf
/////////////////////////////////////////////////////////////////////////
0:         Assert.assertEquals(2, context.getServiceRefs().size());
commit:65ec8ae
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: import org.osgi.service.blueprint.container.Converter;
/////////////////////////////////////////////////////////////////////////
1:     private void assertSpecialRef(String expectedId, Class<?> clazz) {
0:         Context context = new Context();
1:         BeanRef ref = context.getMatching(new BeanRef(clazz));
1:         assertEquals(expectedId, ref.id);
1:     }
1:     
1:     @Test
1:     public void testSpecialRefs() {
1:         assertSpecialRef("blueprintBundleContext", BundleContext.class);
1:         assertSpecialRef("blueprintBundle", Bundle.class);
1:         assertSpecialRef("blueprintContainer", BlueprintContainer.class);
1:         assertSpecialRef("blueprintConverter", Converter.class);
1:     }
1:     
commit:b5bf406
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.test.MyFactoryBean;
1: import org.apache.aries.blueprint.plugin.test.MyProduced;
/////////////////////////////////////////////////////////////////////////
0:         BeanRef matching = context.getMatching(new BeanRef(ServiceB.class));
0:         Assert.assertEquals(OsgiServiceRef.class, matching.getClass());
1:     
1:     @Test
0:     public void testProduced() throws NoSuchFieldException, SecurityException  {
0:         Context context = new Context(MyFactoryBean.class);
1:         
0:         ProducedBean matching = (ProducedBean)context.getMatching(new BeanRef(MyProduced.class));
1:         Assert.assertEquals(MyProduced.class, matching.clazz);
0:         Assert.assertEquals("myFactoryBean", matching.factoryBeanId);
1:         Assert.assertEquals("create", matching.factoryMethod);
1:     }
1:     
commit:46cfc09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.model;
0: 
0: import java.lang.reflect.Field;
0: 
0: import org.apache.aries.blueprint.plugin.model.Bean;
0: import org.apache.aries.blueprint.plugin.model.Context;
0: import org.apache.aries.blueprint.plugin.model.OsgiServiceBean;
1: import org.apache.aries.blueprint.plugin.test.MyBean3;
0: import org.apache.aries.blueprint.plugin.test.ServiceB;
1: import org.apache.aries.blueprint.plugin.test.ServiceReferences;
1: import org.junit.Assert;
1: import org.junit.Test;
0: 
1: public class ContextTest {
0: 
1:     @Test
0:     public void testLists()  {
0:         Context context = new Context(MyBean3.class);
1:         Assert.assertEquals(1, context.getBeans().size());
0:         Assert.assertEquals(0, context.getServiceRefs().size());
1:     }
0:     
1:     @Test
0:     public void testLists2()  {
0:         Context context = new Context(ServiceReferences.class);
1:         Assert.assertEquals(1, context.getBeans().size());
0:         Assert.assertEquals(1, context.getServiceRefs().size());
1:     }
0:     
1:     @Test
0:     public void testMatching() throws NoSuchFieldException, SecurityException  {
0:         Context context = new Context(ServiceReferences.class);
0:         Field field = ServiceReferences.class.getDeclaredFields()[0];
0:         Bean matching = context.getMatching(field);
0:         Assert.assertEquals(OsgiServiceBean.class, matching.getClass());
0:         Assert.assertEquals(ServiceB.class, matching.clazz);
0:         Assert.assertEquals("serviceB", matching.id);
1:     }
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:aaf182f
/////////////////////////////////////////////////////////////////////////
1:     private final BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null, null);
commit:a680609
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String NS_JPA1 = "http://aries.apache.org/xmlns/jpa/v1.0.0";
1:     private static final String NS_TX1 = "http://aries.apache.org/xmlns/transactions/v1.0.0";
0: 
1:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(NS_JPA1, NS_TX1));
commit:a2ed671
/////////////////////////////////////////////////////////////////////////
1:         BeanFromFactory matching = (BeanFromFactory) context.getMatching(new BeanRef(MyProduced.class));
commit:64f241a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.javax.PersistenceUnitHandler;
/////////////////////////////////////////////////////////////////////////
0:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(PersistenceUnitHandler.NS_JPA, SpringTransactionalFactory.NS_TX));
commit:119afa3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.spring.SpringTransactionalFactory;
/////////////////////////////////////////////////////////////////////////
0:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(Generator.NS_JPA, SpringTransactionalFactory.NS_TX));
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.BlueprintConfigurationImpl;
0: import org.apache.aries.blueprint.plugin.Generator;
0: import org.apache.aries.blueprint.plugin.test.MyBean3;
0: import org.apache.aries.blueprint.plugin.test.ServiceReferences;
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.Set;
0: 
0:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(Generator.NS_JPA, Generator.NS_TX));
0:     private final BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null);
0:     @Test
1:     public void testLists() {
1:         Context context = new Context(blueprintConfiguration, MyBean3.class);
0:         Assert.assertEquals(1, context.getBeans().size());
1:         Assert.assertEquals(0, getOsgiServices(context).size());
1:     }
0:     @Test
1:     public void testLists2() {
1:         Context context = new Context(blueprintConfiguration, ServiceReferences.class);
1:         context.resolve();
0:         Assert.assertEquals(1, context.getBeans().size());
1:         Assert.assertEquals(3, getOsgiServices(context).size());
1:     }
0: 
1:     private Set<String> getOsgiServices(Context context) {
1:         Set<String> blueprintWritersKeys = context.getBlueprintWriters().keySet();
1:         Set<String> osgiServices = new HashSet<>();
1:         for (String blueprintWritersKey : blueprintWritersKeys) {
1:             if (blueprintWritersKey.startsWith("osgiService/")) {
1:                 osgiServices.add(blueprintWritersKey);
1:             }
1:         }
1:         return osgiServices;
1:     }
1:         Context context = new Context(blueprintConfiguration);
/////////////////////////////////////////////////////////////////////////
1:     public void testProduced() throws NoSuchFieldException, SecurityException {
1:         Context context = new Context(blueprintConfiguration, MyFactoryBean.class);
0:         ProducedBean matching = (ProducedBean) context.getMatching(new BeanRef(MyProduced.class));
commit:868c96f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: 
0: //    @Test
0: //    public void testLists()  {
0: //        Context context = new Context(MyBean3.class);
0: //        Assert.assertEquals(1, context.getBeans().size());
0: //        Assert.assertEquals(0, context.getServiceRefs().size());
0: //    }
0: //
0: //    @Test
0: //    public void testLists2()  {
0: //        Context context = new Context(ServiceReferences.class);
0: //        Assert.assertEquals(1, context.getBeans().size());
0: //        Assert.assertEquals(3, context.getServiceRefs().size());
0: //    }
0: //    @Test
0: //    public void testMatching() throws NoSuchFieldException, SecurityException  {
0: //        Context context = new Context(ServiceReferences.class);
0: //        BeanRef matching = context.getMatching(new BeanRef(ServiceReferencesParent.class.getDeclaredField("serviceB")));
0: //        Assert.assertEquals(OsgiServiceRef.class, matching.getClass());
0: //        Assert.assertEquals(ServiceB.class, matching.clazz);
0: //        Assert.assertEquals("serviceB-typeB1", matching.id);
0: //    }
============================================================================