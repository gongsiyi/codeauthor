1:b75f264: /*
1:b75f264:  * Licensed under the Apache License, Version 2.0 (the "License");
1:b75f264:  * you may not use this file except in compliance with the License.
1:b75f264:  * You may obtain a copy of the License at
1:b75f264:  *
1:b75f264:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b75f264:  *
1:b75f264:  * Unless required by applicable law or agreed to in writing, software
1:b75f264:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b75f264:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b75f264:  * See the License for the specific language governing permissions and
1:b75f264:  * limitations under the License.
1:b75f264:  */
1:b75f264: package org.apache.aries.subsystem.itests.util;
1:b75f264: 
1:b75f264: import org.apache.aries.util.manifest.ManifestHeaderProcessor.GenericMetadata;
1:b75f264: 
1:b75f264: public class GenericMetadataWrapper {
1:b75f264: 	private final GenericMetadata metadata;
1:b75f264: 	
1:b75f264: 	public GenericMetadataWrapper(GenericMetadata metadata) {
1:b75f264: 		if (metadata == null)
1:b75f264: 			throw new NullPointerException();
1:b75f264: 		this.metadata = metadata;
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	public GenericMetadata getGenericMetadata() {
1:b75f264: 		return metadata;
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	@Override
1:b75f264: 	public boolean equals(Object o) {
1:b75f264: 		if (o == this)
1:b75f264: 			return true;
1:b75f264: 		if (!(o instanceof GenericMetadataWrapper))
1:b75f264: 			return false;
1:b75f264: 		GenericMetadataWrapper that = (GenericMetadataWrapper)o;
1:b75f264: 		return metadata.getNamespace().equals(that.metadata.getNamespace())
1:b75f264: 				&& metadata.getAttributes().equals(that.metadata.getAttributes())
1:b75f264: 				&& metadata.getDirectives().equals(that.metadata.getDirectives());
1:b75f264: 	}
1:b75f264: 	
1:b75f264: 	@Override
1:b75f264: 	public int hashCode() {
1:b75f264: 		int result = 17;
1:b75f264: 		result = 31 * result + metadata.getNamespace().hashCode();
1:b75f264: 		result = 31 * result + metadata.getAttributes().hashCode();
1:b75f264: 		result = 31 * result + metadata.getDirectives().hashCode();
1:b75f264: 		return result;
1:b75f264: 	}
1:e1a1f0d: 
1:e1a1f0d:     @Override
1:e1a1f0d:     public String toString() {
1:e1a1f0d:         return "GenericMetadata[" +
1:e1a1f0d:                 "namespace=" + metadata.getNamespace() + ", " +
1:e1a1f0d:                 "directives=" + metadata.getDirectives() + "," +
1:e1a1f0d:                 "attributes=" + metadata.getAttributes() + "," +
1:e1a1f0d:                 "]";
1:e1a1f0d:     }
1:b75f264: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:e1a1f0d
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
1:         return "GenericMetadata[" +
1:                 "namespace=" + metadata.getNamespace() + ", " +
1:                 "directives=" + metadata.getDirectives() + "," +
1:                 "attributes=" + metadata.getAttributes() + "," +
1:                 "]";
1:     }
author:John Ross
-------------------------------------------------------------------------------
commit:b75f264
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor.GenericMetadata;
1: 
1: public class GenericMetadataWrapper {
1: 	private final GenericMetadata metadata;
1: 	
1: 	public GenericMetadataWrapper(GenericMetadata metadata) {
1: 		if (metadata == null)
1: 			throw new NullPointerException();
1: 		this.metadata = metadata;
1: 	}
1: 	
1: 	public GenericMetadata getGenericMetadata() {
1: 		return metadata;
1: 	}
1: 	
1: 	@Override
1: 	public boolean equals(Object o) {
1: 		if (o == this)
1: 			return true;
1: 		if (!(o instanceof GenericMetadataWrapper))
1: 			return false;
1: 		GenericMetadataWrapper that = (GenericMetadataWrapper)o;
1: 		return metadata.getNamespace().equals(that.metadata.getNamespace())
1: 				&& metadata.getAttributes().equals(that.metadata.getAttributes())
1: 				&& metadata.getDirectives().equals(that.metadata.getDirectives());
1: 	}
1: 	
1: 	@Override
1: 	public int hashCode() {
1: 		int result = 17;
1: 		result = 31 * result + metadata.getNamespace().hashCode();
1: 		result = 31 * result + metadata.getAttributes().hashCode();
1: 		result = 31 * result + metadata.getDirectives().hashCode();
1: 		return result;
1: 	}
1: }
============================================================================