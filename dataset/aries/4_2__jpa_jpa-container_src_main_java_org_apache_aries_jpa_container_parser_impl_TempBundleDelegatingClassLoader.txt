1:60c151b: /*
1:60c151b:  * Licensed to the Apache Software Foundation (ASF) under one
1:60c151b:  * or more contributor license agreements.  See the NOTICE file
1:60c151b:  * distributed with this work for additional information
1:60c151b:  * regarding copyright ownership.  The ASF licenses this file
1:60c151b:  * to you under the Apache License, Version 2.0 (the
1:60c151b:  * "License"); you may not use this file except in compliance
1:60c151b:  * with the License.  You may obtain a copy of the License at
1:60c151b:  *
1:60c151b:  *   http://www.apache.org/licenses/LICENSE-2.0
1:60c151b:  *
1:60c151b:  * Unless required by applicable law or agreed to in writing,
1:60c151b:  * software distributed under the License is distributed on an
1:60c151b:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:60c151b:  * KIND, either express or implied.  See the License for the
1:60c151b:  * specific language governing permissions and limitations
1:60c151b:  * under the License.
1:60c151b:  */
1:2cfdf52: package org.apache.aries.jpa.container.parser.impl;
6:6d12882: 
1:60c151b: import java.io.ByteArrayOutputStream;
1:60c151b: import java.io.IOException;
1:60c151b: import java.io.InputStream;
1:60c151b: import java.net.URL;
1:64d7cb6: import java.security.AccessController;
1:64d7cb6: import java.security.PrivilegedAction;
1:64d7cb6: import java.security.PrivilegedActionException;
1:64d7cb6: import java.security.PrivilegedExceptionAction;
1:6d12882: import java.util.Deque;
1:60c151b: import java.util.Enumeration;
1:6d12882: import java.util.LinkedList;
1:6d12882: 
1:60c151b: import org.osgi.framework.Bundle;
1:6d12882: import org.osgi.framework.wiring.BundleRevision;
1:6d12882: import org.osgi.framework.wiring.BundleWire;
1:6d12882: import org.osgi.framework.wiring.BundleWiring;
1:ec3ea65: import org.slf4j.Logger;
1:ec3ea65: import org.slf4j.LoggerFactory;
1:6d12882: 
1:60c151b: /**
1:60c151b:  * This is a simple temporary ClassLoader that delegates to the Bundle,
1:60c151b:  * but does not call loadClass. It is used by the PersistenceUnitInfo
1:60c151b:  */
1:60c151b: public class TempBundleDelegatingClassLoader extends ClassLoader {
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(TempBundleDelegatingClassLoader.class);
1:ec3ea65:     private final Bundle bundle;
1:6d12882: 
1:ec3ea65:     private final ThreadLocal<Deque<Bundle>> currentLoadingBundle = new ThreadLocal<Deque<Bundle>>() {
1:ec3ea65:         @Override
1:ec3ea65:         protected Deque<Bundle> initialValue() {
1:ec3ea65:             return new LinkedList<Bundle>();
1:6d12882:         }
1:ec3ea65:     };
1:6d12882: 
1:ec3ea65:     public TempBundleDelegatingClassLoader(Bundle b, ClassLoader parent) {
1:ec3ea65:         super(parent);
1:ec3ea65:         bundle = b;
11:6d12882:     }
1:ec3ea65: 
1:ec3ea65:     @Override
1:ec3ea65:     protected Class<?> findClass(String className) throws ClassNotFoundException {
1:ec3ea65:         String classResName = className.replace('.', '/').concat(".class");
1:ec3ea65: 
1:ec3ea65:         // Don't use loadClass, just load the bytes and call defineClass
1:ec3ea65:         Bundle currentContext = currentLoadingBundle.get().peek();
1:ec3ea65:         InputStream is;
1:ec3ea65:         if (currentContext == null) {
1:ec3ea65:             is = getResourceAsStream(classResName);
1:ec3ea65:         } else {
1:ec3ea65:             is = getResourceInBundleAsStream(classResName, currentContext);
1:ec3ea65:         }
1:ec3ea65: 
1:ec3ea65:         if (is == null) {
1:ec3ea65:             throw new ClassNotFoundException(className);
1:ec3ea65:         }
1:ec3ea65: 
1:ec3ea65:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:ec3ea65: 
1:ec3ea65:         byte[] buff = new byte[4096];
1:ec3ea65:         try {
1:ec3ea65:             try {
1:ec3ea65:                 int read = is.read(buff);
1:ec3ea65:                 while (read > 0) {
1:ec3ea65:                     baos.write(buff, 0, read);
1:ec3ea65:                     read = is.read(buff);
1:ec3ea65:                 }
1:ec3ea65:             } finally {
1:ec3ea65:                 is.close();
1:ec3ea65:             }
1:ec3ea65:         } catch (IOException ioe) {
1:ec3ea65:             throw new ClassNotFoundException(className, ioe);
1:ec3ea65:         }
1:ec3ea65: 
1:ec3ea65:         buff = baos.toByteArray();
1:ec3ea65: 
1:ec3ea65:         updateContext(currentContext, className);
1:ec3ea65:         try {
1:ec3ea65:             return defineClass(className, buff, 0, buff.length);
1:ec3ea65:         } finally {
1:ec3ea65:             currentLoadingBundle.get().pop();
1:603ac84:         }
1:603ac84:     }
1:6d12882: 
1:ec3ea65:     private void updateContext(Bundle currentContext, String className) {
1:ec3ea65:         Bundle contextToSet = (currentContext == null) ? bundle : currentContext;
1:ec3ea65:         int idx = className.lastIndexOf('.');
1:ec3ea65:         String packageName = (idx == -1) ? "" : className.substring(0, idx);
1:ec3ea65:         BundleWiring wiring = contextToSet.adapt(BundleWiring.class);
1:ec3ea65:         for (BundleWire wire : wiring.getRequiredWires(BundleRevision.PACKAGE_NAMESPACE)) {
1:ec3ea65:             if (wire.getCapability().getAttributes().get(BundleRevision.PACKAGE_NAMESPACE).equals(packageName)) {
1:ec3ea65:                 contextToSet = wire.getProviderWiring().getBundle();
1:ec3ea65:                 break;
1:ec3ea65:             }
1:6d12882:         }
1:ec3ea65:         currentLoadingBundle.get().push(contextToSet);
1:6d12882:     }
1:ec3ea65: 
1:ec3ea65:     @Override
1:ec3ea65:     protected URL findResource(final String resName) {
1:ec3ea65:         return findResourceInBundle(resName, bundle);
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     private URL findResourceInBundle(final String resName, final Bundle inBundle) {
1:ec3ea65:         // Bundle.getResource requires privileges that the client may not have but we need.
1:ec3ea65:         // use a doPriv so that only this bundle needs the privileges
1:ec3ea65:         return AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:ec3ea65:             @Override
1:ec3ea65:             public URL run() {
1:ec3ea65:                 return inBundle.getResource(resName);
1:ec3ea65:             }
1:ec3ea65:         });
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     private InputStream getResourceInBundleAsStream(final String resName, final Bundle inBundle) {
1:ec3ea65:         URL url = findResourceInBundle(resName, inBundle);
1:ec3ea65:         try {
1:ec3ea65:             return (url == null) ? null : url.openStream();
1:ec3ea65:         } catch (IOException e) {
1:ec3ea65:             LOG.debug("Exception on openStream", e);
1:ec3ea65:             return null;
1:ec3ea65:         }
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     @Override
1:ec3ea65:     protected Enumeration<URL> findResources(final String resName) throws IOException {
1:ec3ea65:         return findResourcesInBundle(resName, bundle);
1:ec3ea65:     }
1:ec3ea65: 
1:ec3ea65:     private Enumeration<URL> findResourcesInBundle(final String resName, final Bundle inBundle) throws IOException {
1:ec3ea65:         Enumeration<URL> resources = null;
1:ec3ea65:         try {
1:ec3ea65:             // Bundle.getResources requires privileges that the client may not
1:ec3ea65:             // have but we need
1:ec3ea65:             // use a doPriv so that only this bundle needs the privileges
1:ec3ea65:             resources = AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
1:ec3ea65:                 @Override
1:ec3ea65:                 public Enumeration<URL> run() throws IOException {
1:ec3ea65:                     return inBundle.getResources(resName);
1:ec3ea65:                 }
1:ec3ea65:             });
1:ec3ea65:         } catch (PrivilegedActionException pae) {
1:ec3ea65:             // thrownException can never be a RuntimeException, as that would escape the doPriv normally
1:ec3ea65:             Exception thrownException = pae.getException();
1:ec3ea65:             if (thrownException instanceof IOException) {
1:ec3ea65:                 throw (IOException)thrownException;
1:ec3ea65:             } else {
1:ec3ea65:                 LOG.warn("Exception during findResourcesInBundle", pae);
1:ec3ea65:             }
1:ec3ea65:         }
1:ec3ea65:         return resources;
1:ec3ea65:     }
1:6d12882: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TempBundleDelegatingClassLoader.class);
1:     private final Bundle bundle;
1:     private final ThreadLocal<Deque<Bundle>> currentLoadingBundle = new ThreadLocal<Deque<Bundle>>() {
1:         @Override
1:         protected Deque<Bundle> initialValue() {
1:             return new LinkedList<Bundle>();
1:     };
1:     public TempBundleDelegatingClassLoader(Bundle b, ClassLoader parent) {
1:         super(parent);
1:         bundle = b;
1: 
1:     @Override
1:     protected Class<?> findClass(String className) throws ClassNotFoundException {
1:         String classResName = className.replace('.', '/').concat(".class");
1: 
1:         // Don't use loadClass, just load the bytes and call defineClass
1:         Bundle currentContext = currentLoadingBundle.get().peek();
1:         InputStream is;
1:         if (currentContext == null) {
1:             is = getResourceAsStream(classResName);
1:         } else {
1:             is = getResourceInBundleAsStream(classResName, currentContext);
1:         }
1: 
1:         if (is == null) {
1:             throw new ClassNotFoundException(className);
1:         }
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1: 
1:         byte[] buff = new byte[4096];
1:         try {
1:             try {
1:                 int read = is.read(buff);
1:                 while (read > 0) {
1:                     baos.write(buff, 0, read);
1:                     read = is.read(buff);
1:                 }
1:             } finally {
1:                 is.close();
1:             }
1:         } catch (IOException ioe) {
1:             throw new ClassNotFoundException(className, ioe);
1:         }
1: 
1:         buff = baos.toByteArray();
1: 
1:         updateContext(currentContext, className);
1:         try {
1:             return defineClass(className, buff, 0, buff.length);
1:         } finally {
1:             currentLoadingBundle.get().pop();
1:     private void updateContext(Bundle currentContext, String className) {
1:         Bundle contextToSet = (currentContext == null) ? bundle : currentContext;
1:         int idx = className.lastIndexOf('.');
1:         String packageName = (idx == -1) ? "" : className.substring(0, idx);
1:         BundleWiring wiring = contextToSet.adapt(BundleWiring.class);
1:         for (BundleWire wire : wiring.getRequiredWires(BundleRevision.PACKAGE_NAMESPACE)) {
1:             if (wire.getCapability().getAttributes().get(BundleRevision.PACKAGE_NAMESPACE).equals(packageName)) {
1:                 contextToSet = wire.getProviderWiring().getBundle();
1:                 break;
1:             }
1:         currentLoadingBundle.get().push(contextToSet);
1: 
1:     @Override
1:     protected URL findResource(final String resName) {
1:         return findResourceInBundle(resName, bundle);
1:     }
1: 
1:     private URL findResourceInBundle(final String resName, final Bundle inBundle) {
1:         // Bundle.getResource requires privileges that the client may not have but we need.
1:         // use a doPriv so that only this bundle needs the privileges
1:         return AccessController.doPrivileged(new PrivilegedAction<URL>() {
1:             @Override
1:             public URL run() {
1:                 return inBundle.getResource(resName);
1:             }
1:         });
1:     }
1: 
1:     private InputStream getResourceInBundleAsStream(final String resName, final Bundle inBundle) {
1:         URL url = findResourceInBundle(resName, inBundle);
1:         try {
1:             return (url == null) ? null : url.openStream();
1:         } catch (IOException e) {
1:             LOG.debug("Exception on openStream", e);
1:             return null;
1:         }
1:     }
1: 
1:     @Override
1:     protected Enumeration<URL> findResources(final String resName) throws IOException {
1:         return findResourcesInBundle(resName, bundle);
1:     }
1: 
1:     private Enumeration<URL> findResourcesInBundle(final String resName, final Bundle inBundle) throws IOException {
1:         Enumeration<URL> resources = null;
1:         try {
1:             // Bundle.getResources requires privileges that the client may not
1:             // have but we need
1:             // use a doPriv so that only this bundle needs the privileges
1:             resources = AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
1:                 @Override
1:                 public Enumeration<URL> run() throws IOException {
1:                     return inBundle.getResources(resName);
1:                 }
1:             });
1:         } catch (PrivilegedActionException pae) {
1:             // thrownException can never be a RuntimeException, as that would escape the doPriv normally
1:             Exception thrownException = pae.getException();
1:             if (thrownException instanceof IOException) {
1:                 throw (IOException)thrownException;
1:             } else {
1:                 LOG.warn("Exception during findResourcesInBundle", pae);
1:             }
1:         }
1:         return resources;
1:     }
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.container.parser.impl;
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:603ac84
/////////////////////////////////////////////////////////////////////////
0:       try {
0:         int read = is.read(buff);
0:         while(read >0) {
0:           baos.write(buff, 0, read);
0:           read = is.read(buff);
1:         }
0:       }finally {
0:         is.close();
1:     } 
commit:6d12882
/////////////////////////////////////////////////////////////////////////
1: import java.util.Deque;
1: import java.util.LinkedList;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.framework.wiring.BundleWire;
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
0:   private static final boolean CONTEXT_TRACKING_ENABLED; 
1:   
0:   static {
0: 	boolean enabled = true;
0:     try {
0:     	Class.forName("org.osgi.framework.wiring.BundleWiring");
0:     } catch (ClassNotFoundException cnfe) {
0:     	enabled = false;
1:     }
0:     CONTEXT_TRACKING_ENABLED = enabled;
1:   }
1: 	
1: 
0:   private final ThreadLocal<Deque<Bundle>> currentLoadingBundle = new ThreadLocal<Deque<Bundle>>(){
0: 	@Override
0: 	protected Deque<Bundle> initialValue() {
0: 		return new LinkedList<Bundle>();
1: 	}
0:   };
/////////////////////////////////////////////////////////////////////////
0:     Bundle currentContext = currentLoadingBundle.get().peek();
0:     InputStream is;
0:     if(currentContext == null) {
0:       is = getResourceAsStream(classResName);
0:     } else {
0:       is = getResourceInBundleAsStream(classResName, currentContext);
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
0:     if(CONTEXT_TRACKING_ENABLED) {
0:     	updateContext(currentContext, className);
1:     }
0:     try {
0:     	return defineClass(className, buff, 0, buff.length);
0:     } finally {
0:     	if(CONTEXT_TRACKING_ENABLED) {
0:         	currentLoadingBundle.get().pop();
1:         }
1:     }
0:   private void updateContext(Bundle currentContext, String className) {
0: 	if(currentContext == null) {
0: 		currentContext = bundle;
1: 	}
1: 	
0: 	int idx = className.lastIndexOf('.');
0: 	String packageName = (idx == -1) ? "" : className.substring(0, idx);
1: 	
0: 	Bundle contextToSet = currentContext;
1: 	
0: 	BundleWiring wiring = currentContext.adapt(BundleWiring.class);
0: 	for(BundleWire wire : wiring.getRequiredWires(BundleRevision.PACKAGE_NAMESPACE)) {
0: 	  if(wire.getCapability().getAttributes().get(BundleRevision.PACKAGE_NAMESPACE).equals(packageName)) {
0: 	    contextToSet = wire.getProviderWiring().getBundle();
0: 	    break;
1: 	  }
1: 	}
0: 	currentLoadingBundle.get().push(contextToSet);
1:   }
1: 
0: @Override
0:     return findResourceInBundle(resName, bundle);
1:   }
1:   
0:   protected URL findResourceInBundle(final String resName, final Bundle inBundle)
0:   {
0:         return inBundle.getResource(resName);
0:   private InputStream getResourceInBundleAsStream(final String resName, final Bundle inBundle) {
0: 	  URL url = findResourceInBundle(resName, inBundle);
0: 	  try {
0: 		return (url == null) ? null : url.openStream();
0: 	} catch (IOException e) {
0: 		return null;
1: 	}
1:   }
1:   
0:     return findResourcesInBundle(resName, bundle);
1:   }
1:   
0:   protected Enumeration<URL> findResourcesInBundle(final String resName, final Bundle inBundle) throws IOException
0:   {
/////////////////////////////////////////////////////////////////////////
0:           return inBundle.getResources(resName);
commit:5377b4f
/////////////////////////////////////////////////////////////////////////
0:     //Bundle.getResource requires privileges that the client may not have but we need
0:     //use a doPriv so that only this bundle needs the privileges
/////////////////////////////////////////////////////////////////////////
0:       //Bundle.getResources requires privileges that the client may not have but we need
0:       //use a doPriv so that only this bundle needs the privileges
/////////////////////////////////////////////////////////////////////////
0:       //thrownException can never be a RuntimeException, as that would escape
0:       //the doPriv normally
0:       if (thrownException instanceof IOException) {
0:         // This code should never get called, but we don't
0:         // want to gobble the exception if we see it.
commit:64d7cb6
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.UndeclaredThrowableException;
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
/////////////////////////////////////////////////////////////////////////
0:   protected URL findResource(final String resName)
0:   {
0:     return AccessController.doPrivileged(new PrivilegedAction<URL>() {
0: 
0:       public URL run()
0:       {
0:         return bundle.getResource(resName);
0:       }
0:     });
0:   protected Enumeration<URL> findResources(final String resName) throws IOException
0:   {
0:     Enumeration<URL> resources = null;
0:     try {
0:       resources = AccessController.doPrivileged(new PrivilegedExceptionAction<Enumeration<URL>>() {
0: 
0:         public Enumeration<URL> run() throws IOException
0:         {
0:           return bundle.getResources(resName);
0:         }
0:       });
0:     } catch(PrivilegedActionException pae) {
0:       Exception thrownException = pae.getException();
0:       if (thrownException instanceof RuntimeException) {
0:         throw (RuntimeException)thrownException;
0:       } else if (thrownException instanceof IOException) {
0:         throw (IOException)thrownException;
0:       } else {
0:         // This code should never get called.
0:         throw new UndeclaredThrowableException(thrownException);
0:       }
0:     }
0:     return resources;
commit:8959940
/////////////////////////////////////////////////////////////////////////
0:   @SuppressWarnings("unchecked")
commit:60c151b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.jpa.container.unit.impl;
0: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.Enumeration;
0: 
1: import org.osgi.framework.Bundle;
0: 
1: /**
1:  * This is a simple temporary ClassLoader that delegates to the Bundle,
1:  * but does not call loadClass. It is used by the PersistenceUnitInfo
1:  */
1: public class TempBundleDelegatingClassLoader extends ClassLoader {
0: 
0:   private final Bundle bundle;
0:   
0:   public TempBundleDelegatingClassLoader(Bundle b) {
0:     bundle = b;
0:   }
0:   
0:   @Override
0:   protected Class<?> findClass(String className) throws ClassNotFoundException {
0:     String classResName = className.replace('.', '/').concat(".class");
0:     
0:     //Don't use loadClass, just load the bytes and call defineClass
0:     InputStream is = getResourceAsStream(classResName);
0:     
0:     if(is == null)
0:       throw new ClassNotFoundException(className);
0:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     
0:     byte[] buff = new byte[4096];
0:     try {
0:       int read = is.read(buff);
0:       while(read >0) {
0:         baos.write(buff, 0, read);
0:         read = is.read(buff);
0:       }
0:     } catch (IOException ioe) {
0:       throw new ClassNotFoundException(className, ioe);
0:     }
0:     
0:     buff = baos.toByteArray();
0:     
0:     return defineClass(className, buff, 0, buff.length);
0:   }
0: 
0:   @Override
0:   protected URL findResource(String resName) {
0:     return bundle.getResource(resName);
0:   }
0: 
0:   @Override
0:   protected Enumeration<URL> findResources(String resName) throws IOException {
0:     return bundle.getResources(resName);
0:   }
0: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:fae71f9
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.jpa.container.unit.impl;
0: 
0: import java.io.ByteArrayOutputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.net.URL;
0: import java.util.Enumeration;
0: 
0: import org.osgi.framework.Bundle;
0: 
0: /**
0:  * This is a simple temporary ClassLoader that delegates to the Bundle,
0:  * but does not call loadClass. It is used by the PersistenceUnitInfo
0:  */
0: public class TempBundleDelegatingClassLoader extends ClassLoader {
0: 
0:   private final Bundle bundle;
0:   
0:   public TempBundleDelegatingClassLoader(Bundle b, ClassLoader parent) {
0:     super(parent);
0:     bundle = b;
0:   }
0:   
0:   @Override
0:   protected Class<?> findClass(String className) throws ClassNotFoundException {
0:     String classResName = className.replace('.', '/').concat(".class");
0:     
0:     //Don't use loadClass, just load the bytes and call defineClass
0:     InputStream is = getResourceAsStream(classResName);
0:     
0:     if(is == null)
0:       throw new ClassNotFoundException(className);
0:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     
0:     byte[] buff = new byte[4096];
0:     try {
0:       int read = is.read(buff);
0:       while(read >0) {
0:         baos.write(buff, 0, read);
0:         read = is.read(buff);
0:       }
0:     } catch (IOException ioe) {
0:       throw new ClassNotFoundException(className, ioe);
0:     }
0:     
0:     buff = baos.toByteArray();
0:     
0:     return defineClass(className, buff, 0, buff.length);
0:   }
0: 
0:   @Override
0:   protected URL findResource(String resName) {
0:     return bundle.getResource(resName);
0:   }
0: 
0:   @SuppressWarnings("unchecked")
0:   @Override
0:   protected Enumeration<URL> findResources(String resName) throws IOException {
0:     return bundle.getResources(resName);
0:   }
0: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:902e4f8
/////////////////////////////////////////////////////////////////////////
0:   public TempBundleDelegatingClassLoader(Bundle b, ClassLoader parent) {
0:     super(parent);
============================================================================