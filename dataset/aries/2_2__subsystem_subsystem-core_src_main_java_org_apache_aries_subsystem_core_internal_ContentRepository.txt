1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
7:67ef08f: 
1:67ef08f: import java.util.Collection;
1:67ef08f: import java.util.Collections;
1:67ef08f: import java.util.Map;
1:67ef08f: 
1:3f524ae: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1:67ef08f: import org.osgi.resource.Capability;
1:67ef08f: import org.osgi.resource.Requirement;
1:67ef08f: import org.osgi.resource.Resource;
1:67ef08f: 
1:d6eb080: public class ContentRepository implements org.apache.aries.subsystem.core.repository.Repository {
1:3f524ae: 	private final CapabilitySetRepository installableContent;
1:3f524ae: 	private final CapabilitySetRepository sharedContent;
1:67ef08f: 	
1:67ef08f: 	public ContentRepository(Collection<Resource> installableContent, Collection<Resource> sharedContent) {
1:3f524ae: 	    this.installableContent = new CapabilitySetRepository();
1:3f524ae: 	    for (Resource resource : installableContent) {
1:3f524ae: 	        this.installableContent.addResource(resource);
1:3f524ae: 	    }
1:3f524ae: 	    this.sharedContent = new CapabilitySetRepository();
1:3f524ae: 	    for (Resource resource : sharedContent) {
1:3f524ae: 	        this.sharedContent.addResource(resource);
1:3f524ae: 	    }
7:67ef08f: 	}
1:67ef08f: 	
1:67ef08f: 	@Override
1:67ef08f: 	public Map<Requirement, Collection<Capability>> findProviders(
1:67ef08f: 			Collection<? extends Requirement> requirements) {
1:3f524ae: 	    Map<Requirement, Collection<Capability>> result = sharedContent.findProviders(requirements);
1:3f524ae: 	    for (Map.Entry<Requirement, Collection<Capability>> entry : result.entrySet()) {
1:3f524ae: 	        if (entry.getValue().isEmpty()) {
1:3f524ae: 	            entry.setValue(
1:3f524ae: 	                    installableContent.findProviders(
1:3f524ae: 	                            Collections.singletonList(entry.getKey())).get(entry.getKey()));
1:3f524ae: 	        }
1:3f524ae: 	    }
1:3f524ae: 	    return result;
1:67ef08f: 	}
1:67ef08f: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:3f524ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1: 	private final CapabilitySetRepository installableContent;
1: 	private final CapabilitySetRepository sharedContent;
1: 	    this.installableContent = new CapabilitySetRepository();
1: 	    for (Resource resource : installableContent) {
1: 	        this.installableContent.addResource(resource);
1: 	    }
1: 	    this.sharedContent = new CapabilitySetRepository();
1: 	    for (Resource resource : sharedContent) {
1: 	        this.sharedContent.addResource(resource);
1: 	    }
1: 	    Map<Requirement, Collection<Capability>> result = sharedContent.findProviders(requirements);
1: 	    for (Map.Entry<Requirement, Collection<Capability>> entry : result.entrySet()) {
1: 	        if (entry.getValue().isEmpty()) {
1: 	            entry.setValue(
1: 	                    installableContent.findProviders(
1: 	                            Collections.singletonList(entry.getKey())).get(entry.getKey()));
1: 	        }
1: 	    }
1: 	    return result;
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
0: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.Map;
1: 
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
0: import org.osgi.service.repository.Repository;
1: 
0: public class ContentRepository implements Repository {
0: 	private static void findContent(Requirement requirement, Collection<Capability> capabilities, Collection<Resource> resources) {
0: 		for (Resource resource : resources)
0: 			for (Capability capability : resource.getCapabilities(requirement.getNamespace()))
0: 				if (ResourceHelper.matches(requirement, capability))
0: 					capabilities.add(capability);
1: 	}
1: 	
0: 	private final Collection<Resource> installableContent;
0: 	private final Collection<Resource> sharedContent;
1: 	
1: 	public ContentRepository(Collection<Resource> installableContent, Collection<Resource> sharedContent) {
0: 		this.installableContent = new HashSet<Resource>(installableContent);
0: 		this.sharedContent = new HashSet<Resource>(sharedContent);
1: 	}
1: 	
1: 	@Override
1: 	public Map<Requirement, Collection<Capability>> findProviders(
1: 			Collection<? extends Requirement> requirements) {
0: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
0: 		for (Requirement requirement : requirements)
0: 			result.put(requirement, findProviders(requirement));
0: 		return result;
1: 	}
1: 
0: 	public Collection<Capability> findProviders(Requirement requirement) {
0: 		ArrayList<Capability> result = new ArrayList<Capability>();
0: 		if (findSharedContent(requirement, result))
0: 			return result;
0: 		findInstallableContent(requirement, result);
0: 		result.trimToSize();
0: 		return result;
1: 	}
1: 	
0: 	public Collection<Resource> getInstallableContent() {
0: 		return Collections.unmodifiableCollection(installableContent);
1: 	}
1: 	
0: 	public Collection<Resource> getSharedContent() {
0: 		return Collections.unmodifiableCollection(sharedContent);
1: 	}
1: 	
0: 	private void findInstallableContent(Requirement requirement, Collection<Capability> capabilities) {
0: 		findContent(requirement, capabilities, installableContent);
1: 	}
1: 	
0: 	private boolean findSharedContent(Requirement requirement, Collection<Capability> capabilities) {
0: 		int size = capabilities.size();
0: 		findContent(requirement, capabilities, sharedContent);
0: 		return size < capabilities.size();
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: public class ContentRepository implements org.apache.aries.subsystem.core.repository.Repository {
============================================================================