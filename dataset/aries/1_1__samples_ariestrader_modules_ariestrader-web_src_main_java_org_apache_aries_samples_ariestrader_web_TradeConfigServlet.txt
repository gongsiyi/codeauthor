1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.web;
2:628add4: 
1:628add4: import javax.servlet.*;
1:628add4: import javax.servlet.http.*;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeDBManager;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.RunStatsDataBean;
1:56a6860: import org.apache.aries.samples.ariestrader.util.Log;
1:56a6860: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:628add4: 
1:628add4: import java.io.IOException;
1:628add4: 
1:628add4: /**
1:56a6860:  * TradeConfigServlet provides a servlet interface to adjust AriesTrader runtime parameters.
1:56a6860:  * TradeConfigServlet updates values in the {@link org.apache.aries.samples.ariestrader.web.TradeConfig} JavaBean holding 
1:628add4:  * all configuration and runtime parameters for the Trade application
1:628add4:  *
1:628add4:  */
1:628add4: public class TradeConfigServlet extends HttpServlet {
1:628add4: 	
1:628add4:     private static TradeDBManager tradeDBManager = null;
1:628add4: 
1:628add4:    /**
1:628add4: 	* Servlet initialization method.
1:628add4: 	*/
1:628add4: 	public void init(ServletConfig config) throws ServletException
1:628add4: 	{
1:628add4: 		super.init(config);
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Create the TradeConfig bean and pass it the config.jsp page 
1:628add4: 	 * to display the current Trade runtime configuration
1:628add4: 	 * Creation date: (2/8/2000 3:43:59 PM)
1:628add4: 	 */
1:628add4: 	void doConfigDisplay(
1:628add4: 		HttpServletRequest req, 
1:628add4: 		HttpServletResponse resp, 
1:628add4: 		String results)
1:628add4: 		throws Exception {
1:628add4: 
2:628add4: 		TradeConfig currentConfig = new TradeConfig();
1:628add4: 
1:628add4: 		req.setAttribute("tradeConfig", currentConfig);
1:628add4: 		req.setAttribute("status", results);
1:628add4: 		getServletConfig()
1:628add4: 			.getServletContext()
1:628add4: 			.getRequestDispatcher(TradeConfig.getPage(TradeConfig.CONFIG_PAGE))
1:628add4: 			.include(req, resp); 
1:628add4: 	}
1:628add4: 	
1:628add4: 	void doResetTrade(
1:628add4: 		HttpServletRequest req, 
1:628add4: 		HttpServletResponse resp, 
1:628add4: 		String results)
1:628add4: 		throws Exception
1:628add4: 	{
1:628add4: 		RunStatsDataBean runStatsData = new RunStatsDataBean();
1:628add4: 		TradeConfig currentConfig = new TradeConfig();		
1:628add4: 
1:628add4:                 if (tradeDBManager == null) {
1:628add4:                     tradeDBManager = TradeServiceUtilities.getTradeDBManager();
1:628add4:                 }
1:628add4: 
1:628add4: 		try
1:628add4: 		{
1:628add4: 			runStatsData = tradeDBManager.resetTrade(false);
1:628add4: 			
1:628add4: 			req.setAttribute("runStatsData", runStatsData);
1:628add4: 			req.setAttribute("tradeConfig", currentConfig);
1:628add4: 			results += "Trade Reset completed successfully";						
1:628add4: 			req.setAttribute("status", results);
1:628add4: 
1:628add4: 		}
1:628add4: 		catch (Exception e)
1:628add4: 		{
1:628add4: 			results += "Trade Reset Error  - see log for details";
1:628add4: 			Log.error(e, 	results);
1:628add4: 			throw e;
1:628add4: 		}
1:628add4: 		getServletConfig()
1:628add4: 				.getServletContext()
1:628add4: 				.getRequestDispatcher(TradeConfig.getPage(TradeConfig.STATS_PAGE))
1:628add4: 				.include(req, resp); 			
1:628add4: 		
1:628add4: 	}
1:628add4: 	
1:628add4: 	
1:628add4: 	/**
1:b8c0170: 	 * Update Trade runtime configuration parameters
1:628add4: 	 * Creation date: (2/8/2000 3:44:24 PM)
1:628add4: 	 */
1:628add4: 	void doConfigUpdate(HttpServletRequest req, HttpServletResponse resp)
1:628add4: 		throws Exception {
1:628add4: 
1:628add4: 		String currentConfigStr = "\n\n########## Trade configuration update. Current config:\n\n";
1:628add4: 		String runTimeModeStr = req.getParameter("RunTimeMode");
1:628add4: 		if (runTimeModeStr != null)
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				int i = Integer.parseInt(runTimeModeStr);
1:628add4: 				if ((i >= 0) && (i < TradeConfig.runTimeModeNames.length)) //Input validation
1:628add4:                                 {
1:8ef753d:                                     TradeConfig.setRunTimeMode(TradeConfig.ModeType.values()[i]);
1:628add4:                                 }
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1:628add4: 					"trying to set runtimemode to " + runTimeModeStr, 
1:628add4: 					"reverting to current value");
1:628add4: 
1:628add4: 			} // If the value is bad, simply revert to current
1:628add4: 		}
1:8ef753d: 		currentConfigStr += "\t\tRunTimeMode:\t\t" + TradeConfig.runTimeModeNames[TradeConfig.getRunTimeMode().ordinal()] + "\n";
1:628add4: 		
1:628add4: 		/* Add JPA layer choice to avoid some ugly Hibernate bugs */
1:628add4: 		String jpaLayerStr = req.getParameter("JPALayer");
1:628add4: 		if (jpaLayerStr != null)
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				int i = Integer.parseInt(jpaLayerStr);
1:628add4: 				if ((i >= 0)
1:628add4: 					&& (i < TradeConfig.jpaLayerNames.length)) //Input validation
1:628add4: 					TradeConfig.jpaLayer = i;
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{				
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1:628add4: 					"trying to set JPALayer to " + jpaLayerStr, 
1:628add4: 					"reverting to current value");
1:628add4: 
1:628add4: 			} // If the value is bad, simply revert to current
1:628add4: 		}
1:628add4: 		currentConfigStr += "\t\tJPALayer:\t\t" + TradeConfig.jpaLayerNames[TradeConfig.jpaLayer] + "\n";
1:628add4: 
1:628add4: 		String orderProcessingModeStr = req.getParameter("OrderProcessingMode");
1:628add4: 		if (orderProcessingModeStr != null)
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				int i = Integer.parseInt(orderProcessingModeStr);
1:628add4: 				if ((i >= 0)
1:628add4: 					&& (i < TradeConfig.orderProcessingModeNames.length)) //Input validation
1:628add4: 					TradeConfig.orderProcessingMode = i;
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1:628add4: 					"trying to set orderProcessing to " + orderProcessingModeStr, 
1:628add4: 					"reverting to current value");
1:628add4: 
1:628add4: 			} // If the value is bad, simply revert to current
1:628add4: 		}
1:628add4: 		currentConfigStr += "\t\tOrderProcessingMode:\t" + TradeConfig.orderProcessingModeNames[TradeConfig.orderProcessingMode]  + "\n";		
1:628add4: 		
1:628add4: 		String accessModeStr = req.getParameter("AcessMode");
1:628add4: 		if (accessModeStr != null)
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				int i = Integer.parseInt(accessModeStr);
1:628add4: 				if ((i >= 0)
1:628add4: 					&& (i < TradeConfig.accessModeNames.length) && (i != TradeConfig.getAccessMode())) //Input validation
1:628add4: 					TradeConfig.setAccessMode(i);
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1:628add4: 					"trying to set orderProcessing to " + orderProcessingModeStr, 
1:628add4: 					"reverting to current value");
1:628add4: 
1:628add4: 			} // If the value is bad, simply revert to current
1:628add4: 		}		
1:628add4: 		currentConfigStr += "\t\tAcessMode:\t\t" + TradeConfig.accessModeNames[TradeConfig.getAccessMode()]  + "\n";		
1:628add4: 		
1:628add4: 			
1:628add4: 		String workloadMixStr = req.getParameter("WorkloadMix");
1:628add4: 		if (workloadMixStr != null)
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				int i = Integer.parseInt(workloadMixStr);
1:628add4: 				if ((i >= 0)
1:628add4: 					&& (i < TradeConfig.workloadMixNames.length)) //Input validation
1:628add4: 					TradeConfig.workloadMix = i;
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1:628add4: 					"trying to set workloadMix to " + workloadMixStr, 
1:628add4: 					"reverting to current value");
1:628add4: 			} // If the value is bad, simply revert to current
1:628add4: 		}
1:628add4: 		currentConfigStr += "\t\tWorkload Mix:\t\t" + TradeConfig.workloadMixNames[TradeConfig.workloadMix]  + "\n";		
1:628add4: 		
1:628add4: 		
1:628add4: 		
1:628add4: 		String webInterfaceStr = req.getParameter("WebInterface");
1:628add4: 		if (webInterfaceStr != null)
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				int i = Integer.parseInt(webInterfaceStr);
1:628add4: 				if ((i >= 0)
1:628add4: 					&& (i < TradeConfig.webInterfaceNames.length)) //Input validation
1:628add4: 					TradeConfig.webInterface = i;
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1:628add4: 					"trying to set WebInterface to " + webInterfaceStr, 
1:628add4: 					"reverting to current value");
1:628add4: 
1:628add4: 
1:628add4: 			} // If the value is bad, simply revert to current
1:628add4: 		}
1:628add4: 		currentConfigStr += "\t\tWeb Interface:\t\t" + TradeConfig.webInterfaceNames[TradeConfig.webInterface]  + "\n";		
1:628add4: 		
1:628add4: 		String cachingTypeStr = req.getParameter("CachingType");
1:628add4: 		if (cachingTypeStr != null)
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				int i = Integer.parseInt(cachingTypeStr);
1:628add4: 				if ((i >= 0)
1:628add4: 					&& (i < TradeConfig.cachingTypeNames.length)) //Input validation
1:628add4: 					TradeConfig.cachingType = i;
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1:628add4: 					"trying to set CachingType to " + cachingTypeStr, 
1:628add4: 					"reverting to current value");
1:628add4: 				} // If the value is bad, simply revert to current
1:628add4: 		}
1:628add4: 		currentConfigStr += "\t\tCachingType:\t\t" + TradeConfig.cachingTypeNames[TradeConfig.cachingType]  + "\n";		
1:628add4: 
1:628add4: 		String parm = req.getParameter("SOAP_URL");
1:628add4: 		if ((parm != null) && (parm.length() > 0))
1:628add4: 		{
1:628add4: 			if (!TradeConfig.getSoapURL().equals(parm)) {
1:628add4: 				TradeConfig.setSoapURL(parm);
1:628add4: 			}
1:628add4: 		}
1:628add4: 		else
1:628add4: 		{
1:628add4: 			TradeConfig.setSoapURL(null);
1:628add4: 		}
1:628add4: 
1:628add4: 		parm = req.getParameter("MaxUsers");
1:628add4: 		if ((parm != null) && (parm.length() > 0))
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				TradeConfig.setMAX_USERS(Integer.parseInt(parm));
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1:628add4: 					"Setting maxusers, probably error parsing string to int:" + parm, 
1:628add4: 					"revertying to current value: " + TradeConfig.getMAX_USERS());
1:628add4: 
1:628add4: 			} //On error, revert to saved
1:628add4: 		}
1:628add4: 		parm = req.getParameter("MaxQuotes");
1:628add4: 		if ((parm != null) && (parm.length() > 0))
1:628add4: 		{
1:628add4: 			try
1:628add4: 			{
1:628add4: 				TradeConfig.setMAX_QUOTES(Integer.parseInt(parm));
1:628add4: 			}
1:628add4: 			catch (Exception e)
1:628add4: 			{
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet: minor exception caught", 
1:628add4: 					"trying to set max_quotes, error on parsing int " + parm, 
1:628add4: 					"reverting to current value " + TradeConfig.getMAX_QUOTES());
1:628add4: 
1:628add4: 			} //On error, revert to saved
1:628add4: 		}
1:628add4: 		currentConfigStr += "\t\t#Trade  Users:\t\t" + TradeConfig.getMAX_USERS()  + "\n";		
1:628add4: 		currentConfigStr += "\t\t#Trade Quotes:\t\t" + TradeConfig.getMAX_QUOTES()  + "\n";		
1:628add4: 		
1:628add4:                 parm = req.getParameter("marketSummaryInterval");
1:628add4:                 if ((parm != null) && (parm.length() > 0)) {
1:628add4:                         try {
1:628add4:                                 TradeConfig.setMarketSummaryInterval(Integer.parseInt(parm));
1:628add4:                         }
1:628add4:                         catch (Exception e) {
1:628add4:                                 Log.error(
1:628add4:                                         e, 
1:628add4:                                         "TradeConfigServlet: minor exception caught", 
1:628add4:                                         "trying to set marketSummaryInterval, error on parsing int " + parm, 
1:628add4:                                         "reverting to current value " + TradeConfig.getMarketSummaryInterval());
1:628add4: 
1:628add4:                         }
1:628add4:                 }
1:628add4:                 currentConfigStr += "\t\tMarket Summary Interval:\t\t" + TradeConfig.getMarketSummaryInterval()  + "\n";
1:628add4: 		
1:628add4: 		parm = req.getParameter("primIterations");
1:628add4: 		if ((parm != null) && (parm.length() > 0)) {
1:628add4: 			try {
1:628add4: 				TradeConfig.setPrimIterations(Integer.parseInt(parm));
1:628add4: 			}
1:628add4: 			catch (Exception e) {
1:628add4: 				Log.error(
1:628add4: 					e, 
1:628add4: 					"TradeConfigServlet: minor exception caught", 
1:628add4: 					"trying to set primIterations, error on parsing int " + parm, 
1:628add4: 					"reverting to current value " + TradeConfig.getPrimIterations());
1:628add4: 
1:628add4: 			}
1:628add4: 		}
1:628add4: 		currentConfigStr += "\t\tPrimitive Iterations:\t\t" + TradeConfig.getPrimIterations()  + "\n";
1:628add4:                 
1:628add4: 		String enablePublishQuotePriceChange = req.getParameter("EnablePublishQuotePriceChange");
1:628add4: 		
1:628add4: 		if (enablePublishQuotePriceChange != null)
1:628add4: 			TradeConfig.setPublishQuotePriceChange(true);
1:628add4: 		else 
1:628add4: 			TradeConfig.setPublishQuotePriceChange(false);
1:628add4: 		currentConfigStr += "\t\tTradeStreamer MDB Enabled:\t" + TradeConfig.getPublishQuotePriceChange() + "\n";
1:628add4: 		
1:628add4: 		String enableTrace = req.getParameter("EnableTrace");
1:628add4: 		if (enableTrace != null)
1:628add4: 			Log.setTrace(true);
1:628add4: 		else 
1:628add4: 			Log.setTrace(false);			
1:628add4: 		String enableActionTrace = req.getParameter("EnableActionTrace");
1:628add4: 		if (enableActionTrace != null)
1:628add4: 			Log.setActionTrace(true);
1:628add4: 		else 
1:628add4: 			Log.setActionTrace(false);						
1:628add4: 
1:628add4:         String enableLongRun = req.getParameter("EnableLongRun");
1:628add4:         
1:628add4:         if (enableLongRun != null)
1:628add4:             TradeConfig.setLongRun(true);
1:628add4:         else 
1:628add4:             TradeConfig.setLongRun(false);
1:628add4:         currentConfigStr += "\t\tLong Run Enabled:\t\t" + TradeConfig.getLongRun()  + "\n";
1:628add4: 		
1:628add4: 		
1:628add4: 		System.out.println(currentConfigStr);
1:628add4: 
1:628add4: 	}
1:628add4: 
1:628add4: 	public void service(HttpServletRequest req, HttpServletResponse resp)
1:628add4: 		throws ServletException, IOException {
1:628add4: 
1:628add4: 		String action = null;
1:628add4: 		String result = "";
1:628add4: 		
1:628add4: 		resp.setContentType("text/html");
1:628add4: 		try
1:628add4: 		{
1:628add4: 			action = req.getParameter("action");
1:628add4: 			if (action == null)
1:628add4: 			{
1:56a6860: 				doConfigDisplay(req, resp, result + "<b><br>Current AriesTrader Configuration:</br></b>");
1:628add4: 				return;
1:628add4: 			}
1:628add4: 			else if (action.equals("updateConfig"))
1:628add4: 			{
1:628add4: 				doConfigUpdate(req, resp);
1:56a6860: 				result = "<B><BR>AriesTrader Configuration Updated</BR></B>";
1:628add4: 			}
1:628add4: 			else if (action.equals("resetTrade"))
1:628add4: 			{
1:628add4: 				doResetTrade(req, resp, "");
1:628add4: 				return;
1:628add4: 			}
1:628add4: 			else if (action.equals("buildDB"))
1:628add4: 			{
1:628add4: 				resp.setContentType("text/html");
1:09d6656:                 new TradeBuildDB(resp.getWriter(), false);
1:56a6860: 				result = "AriesTrader Database Built - " + TradeConfig.getMAX_USERS() + "users created";
1:628add4: 			}
1:628add4:             else if (action.equals("buildDBTables"))
1:628add4:             {
1:628add4:                 resp.setContentType("text/html");
1:09d6656:                 new TradeBuildDB(resp.getWriter(), true);
1:628add4:             }
1:56a6860: 			doConfigDisplay(req, resp, result + "Current AriesTrader Configuration:");
1:628add4: 		}
1:628add4: 		catch (Exception e)
1:628add4: 		{
1:628add4: 			Log.error(
1:628add4: 				e, 
1:628add4: 				"TradeConfigServlet.service(...)", 
1:628add4: 				"Exception trying to perform action=" + action);
1:628add4: 
1:628add4: 			resp.sendError(
1:628add4: 				500, 
1:628add4: 				"TradeConfigServlet.service(...)"
1:628add4: 					+ "Exception trying to perform action="
1:628add4: 					+ action
1:628add4:                                         + "\nException details: " + e.toString()); 
1:628add4: 			
1:628add4: 		}
1:628add4: 	}
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:09d6656
/////////////////////////////////////////////////////////////////////////
1:                 new TradeBuildDB(resp.getWriter(), false);
1:                 new TradeBuildDB(resp.getWriter(), true);
commit:3a78a2d
/////////////////////////////////////////////////////////////////////////
0:                 String path = getServletConfig().getServletContext().getRealPath("/");
0:                 if (path == null) path="";  // if there is no real path assume this is Apache Aries in Equinox test harness
0:                 new TradeBuildDB(resp.getWriter(), path);
commit:8ef753d
/////////////////////////////////////////////////////////////////////////
1:                                     TradeConfig.setRunTimeMode(TradeConfig.ModeType.values()[i]);
/////////////////////////////////////////////////////////////////////////
1: 		currentConfigStr += "\t\tRunTimeMode:\t\t" + TradeConfig.runTimeModeNames[TradeConfig.getRunTimeMode().ordinal()] + "\n";
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
1: 	 * Update Trade runtime configuration parameters
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.RunStatsDataBean;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.web;
1: import org.apache.aries.samples.ariestrader.api.TradeDBManager;
1: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
0: import org.apache.aries.samples.ariestrader.persistence.api.RunStatsDataBean;
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:  * TradeConfigServlet provides a servlet interface to adjust AriesTrader runtime parameters.
1:  * TradeConfigServlet updates values in the {@link org.apache.aries.samples.ariestrader.web.TradeConfig} JavaBean holding 
/////////////////////////////////////////////////////////////////////////
1: 				doConfigDisplay(req, resp, result + "<b><br>Current AriesTrader Configuration:</br></b>");
1: 				result = "<B><BR>AriesTrader Configuration Updated</BR></B>";
/////////////////////////////////////////////////////////////////////////
1: 				result = "AriesTrader Database Built - " + TradeConfig.getMAX_USERS() + "users created";
1: 			doConfigDisplay(req, resp, result + "Current AriesTrader Configuration:");
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.web;
0: import org.apache.aries.samples.daytrader.api.TradeDBManager;
0: import org.apache.aries.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.aries.samples.daytrader.persistence.api.RunStatsDataBean;
0: import org.apache.aries.samples.daytrader.util.Log;
0: import org.apache.aries.samples.daytrader.util.TradeConfig;
0:  * TradeConfigServlet updates values in the {@link org.apache.aries.samples.daytrader.web.TradeConfig} JavaBean holding 
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.web;
1: 
1: import javax.servlet.*;
1: import javax.servlet.http.*;
1: 
0: import org.apache.geronimo.samples.daytrader.api.TradeDBManager;
0: import org.apache.geronimo.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.geronimo.samples.daytrader.persistence.api.RunStatsDataBean;
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
1: 
1: import java.io.IOException;
1: 
1: /**
0:  * TradeConfigServlet provides a servlet interface to adjust DayTrader runtime parameters.
0:  * TradeConfigServlet updates values in the {@link org.apache.geronimo.samples.daytrader.web.TradeConfig} JavaBean holding 
1:  * all configuration and runtime parameters for the Trade application
1:  *
1:  */
1: public class TradeConfigServlet extends HttpServlet {
1: 	
1:     private static TradeDBManager tradeDBManager = null;
1: 
1:    /**
1: 	* Servlet initialization method.
1: 	*/
1: 	public void init(ServletConfig config) throws ServletException
1: 	{
1: 		super.init(config);
1: 	}
1: 	/**
1: 	 * Create the TradeConfig bean and pass it the config.jsp page 
1: 	 * to display the current Trade runtime configuration
1: 	 * Creation date: (2/8/2000 3:43:59 PM)
1: 	 */
1: 	void doConfigDisplay(
1: 		HttpServletRequest req, 
1: 		HttpServletResponse resp, 
1: 		String results)
1: 		throws Exception {
1: 
1: 		TradeConfig currentConfig = new TradeConfig();
1: 
1: 		req.setAttribute("tradeConfig", currentConfig);
1: 		req.setAttribute("status", results);
1: 		getServletConfig()
1: 			.getServletContext()
1: 			.getRequestDispatcher(TradeConfig.getPage(TradeConfig.CONFIG_PAGE))
1: 			.include(req, resp); 
1: 	}
1: 	
1: 	void doResetTrade(
1: 		HttpServletRequest req, 
1: 		HttpServletResponse resp, 
1: 		String results)
1: 		throws Exception
1: 	{
1: 		RunStatsDataBean runStatsData = new RunStatsDataBean();
1: 		TradeConfig currentConfig = new TradeConfig();		
1: 
1:                 if (tradeDBManager == null) {
1:                     tradeDBManager = TradeServiceUtilities.getTradeDBManager();
1:                 }
1: 
1: 		try
1: 		{
1: 			runStatsData = tradeDBManager.resetTrade(false);
1: 			
1: 			req.setAttribute("runStatsData", runStatsData);
1: 			req.setAttribute("tradeConfig", currentConfig);
1: 			results += "Trade Reset completed successfully";						
1: 			req.setAttribute("status", results);
1: 
1: 		}
1: 		catch (Exception e)
1: 		{
1: 			results += "Trade Reset Error  - see log for details";
1: 			Log.error(e, 	results);
1: 			throw e;
1: 		}
1: 		getServletConfig()
1: 				.getServletContext()
1: 				.getRequestDispatcher(TradeConfig.getPage(TradeConfig.STATS_PAGE))
1: 				.include(req, resp); 			
1: 		
1: 	}
1: 	
1: 	
1: 	/**
0: 	 * Update Trade runtime configuration paramaters
1: 	 * Creation date: (2/8/2000 3:44:24 PM)
1: 	 */
1: 	void doConfigUpdate(HttpServletRequest req, HttpServletResponse resp)
1: 		throws Exception {
1: 
1: 		TradeConfig currentConfig = new TradeConfig();
1: 
1: 		String currentConfigStr = "\n\n########## Trade configuration update. Current config:\n\n";
1: 		String runTimeModeStr = req.getParameter("RunTimeMode");
1: 		if (runTimeModeStr != null)
1: 		{
1: 			try
1: 			{
1: 				int i = Integer.parseInt(runTimeModeStr);
1: 				if ((i >= 0) && (i < TradeConfig.runTimeModeNames.length)) //Input validation
1:                                 {
0:                                     TradeConfig.setRunTimeMode(i);
1:                                 }
1: 			}
1: 			catch (Exception e)
1: 			{
0: 				//>>rjm
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1: 					"trying to set runtimemode to " + runTimeModeStr, 
1: 					"reverting to current value");
1: 
1: 			} // If the value is bad, simply revert to current
1: 		}
0: 		currentConfigStr += "\t\tRunTimeMode:\t\t" + TradeConfig.runTimeModeNames[TradeConfig.getRunTimeMode()] + "\n";
1: 		
1: 		/* Add JPA layer choice to avoid some ugly Hibernate bugs */
1: 		String jpaLayerStr = req.getParameter("JPALayer");
1: 		if (jpaLayerStr != null)
1: 		{
1: 			try
1: 			{
1: 				int i = Integer.parseInt(jpaLayerStr);
1: 				if ((i >= 0)
1: 					&& (i < TradeConfig.jpaLayerNames.length)) //Input validation
1: 					TradeConfig.jpaLayer = i;
1: 			}
1: 			catch (Exception e)
1: 			{				
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1: 					"trying to set JPALayer to " + jpaLayerStr, 
1: 					"reverting to current value");
1: 
1: 			} // If the value is bad, simply revert to current
1: 		}
1: 		currentConfigStr += "\t\tJPALayer:\t\t" + TradeConfig.jpaLayerNames[TradeConfig.jpaLayer] + "\n";
1: 
1: 		String orderProcessingModeStr = req.getParameter("OrderProcessingMode");
1: 		if (orderProcessingModeStr != null)
1: 		{
1: 			try
1: 			{
1: 				int i = Integer.parseInt(orderProcessingModeStr);
1: 				if ((i >= 0)
1: 					&& (i < TradeConfig.orderProcessingModeNames.length)) //Input validation
1: 					TradeConfig.orderProcessingMode = i;
1: 			}
1: 			catch (Exception e)
1: 			{
0: 				//>>rjm
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1: 					"trying to set orderProcessing to " + orderProcessingModeStr, 
1: 					"reverting to current value");
1: 
1: 			} // If the value is bad, simply revert to current
1: 		}
1: 		currentConfigStr += "\t\tOrderProcessingMode:\t" + TradeConfig.orderProcessingModeNames[TradeConfig.orderProcessingMode]  + "\n";		
1: 		
1: 		String accessModeStr = req.getParameter("AcessMode");
1: 		if (accessModeStr != null)
1: 		{
1: 			try
1: 			{
1: 				int i = Integer.parseInt(accessModeStr);
1: 				if ((i >= 0)
1: 					&& (i < TradeConfig.accessModeNames.length) && (i != TradeConfig.getAccessMode())) //Input validation
1: 					TradeConfig.setAccessMode(i);
1: 			}
1: 			catch (Exception e)
1: 			{
0: 				//>>rjm
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1: 					"trying to set orderProcessing to " + orderProcessingModeStr, 
1: 					"reverting to current value");
1: 
1: 			} // If the value is bad, simply revert to current
1: 		}		
1: 		currentConfigStr += "\t\tAcessMode:\t\t" + TradeConfig.accessModeNames[TradeConfig.getAccessMode()]  + "\n";		
1: 		
1: 			
1: 		String workloadMixStr = req.getParameter("WorkloadMix");
1: 		if (workloadMixStr != null)
1: 		{
1: 			try
1: 			{
1: 				int i = Integer.parseInt(workloadMixStr);
1: 				if ((i >= 0)
1: 					&& (i < TradeConfig.workloadMixNames.length)) //Input validation
1: 					TradeConfig.workloadMix = i;
1: 			}
1: 			catch (Exception e)
1: 			{
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1: 					"trying to set workloadMix to " + workloadMixStr, 
1: 					"reverting to current value");
1: 			} // If the value is bad, simply revert to current
1: 		}
1: 		currentConfigStr += "\t\tWorkload Mix:\t\t" + TradeConfig.workloadMixNames[TradeConfig.workloadMix]  + "\n";		
1: 		
1: 		
1: 		
1: 		String webInterfaceStr = req.getParameter("WebInterface");
1: 		if (webInterfaceStr != null)
1: 		{
1: 			try
1: 			{
1: 				int i = Integer.parseInt(webInterfaceStr);
1: 				if ((i >= 0)
1: 					&& (i < TradeConfig.webInterfaceNames.length)) //Input validation
1: 					TradeConfig.webInterface = i;
1: 			}
1: 			catch (Exception e)
1: 			{
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1: 					"trying to set WebInterface to " + webInterfaceStr, 
1: 					"reverting to current value");
1: 
1: 
1: 			} // If the value is bad, simply revert to current
1: 		}
1: 		currentConfigStr += "\t\tWeb Interface:\t\t" + TradeConfig.webInterfaceNames[TradeConfig.webInterface]  + "\n";		
1: 		
1: 		String cachingTypeStr = req.getParameter("CachingType");
1: 		if (cachingTypeStr != null)
1: 		{
1: 			try
1: 			{
1: 				int i = Integer.parseInt(cachingTypeStr);
1: 				if ((i >= 0)
1: 					&& (i < TradeConfig.cachingTypeNames.length)) //Input validation
1: 					TradeConfig.cachingType = i;
1: 			}
1: 			catch (Exception e)
1: 			{
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1: 					"trying to set CachingType to " + cachingTypeStr, 
1: 					"reverting to current value");
1: 				} // If the value is bad, simply revert to current
1: 		}
1: 		currentConfigStr += "\t\tCachingType:\t\t" + TradeConfig.cachingTypeNames[TradeConfig.cachingType]  + "\n";		
1: 
1: 		String parm = req.getParameter("SOAP_URL");
1: 		if ((parm != null) && (parm.length() > 0))
1: 		{
1: 			if (!TradeConfig.getSoapURL().equals(parm)) {
1: 				TradeConfig.setSoapURL(parm);
1: 			}
1: 		}
1: 		else
1: 		{
1: 			TradeConfig.setSoapURL(null);
1: 		}
1: 
1: 		parm = req.getParameter("MaxUsers");
1: 		if ((parm != null) && (parm.length() > 0))
1: 		{
1: 			try
1: 			{
1: 				TradeConfig.setMAX_USERS(Integer.parseInt(parm));
1: 			}
1: 			catch (Exception e)
1: 			{
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet.doConfigUpdate(..): minor exception caught", 
1: 					"Setting maxusers, probably error parsing string to int:" + parm, 
1: 					"revertying to current value: " + TradeConfig.getMAX_USERS());
1: 
1: 			} //On error, revert to saved
1: 		}
1: 		parm = req.getParameter("MaxQuotes");
1: 		if ((parm != null) && (parm.length() > 0))
1: 		{
1: 			try
1: 			{
1: 				TradeConfig.setMAX_QUOTES(Integer.parseInt(parm));
1: 			}
1: 			catch (Exception e)
1: 			{
0: 				//>>rjm
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet: minor exception caught", 
1: 					"trying to set max_quotes, error on parsing int " + parm, 
1: 					"reverting to current value " + TradeConfig.getMAX_QUOTES());
0: 				//<<rjm
1: 
1: 			} //On error, revert to saved
1: 		}
1: 		currentConfigStr += "\t\t#Trade  Users:\t\t" + TradeConfig.getMAX_USERS()  + "\n";		
1: 		currentConfigStr += "\t\t#Trade Quotes:\t\t" + TradeConfig.getMAX_QUOTES()  + "\n";		
1: 		
1:                 parm = req.getParameter("marketSummaryInterval");
1:                 if ((parm != null) && (parm.length() > 0)) {
1:                         try {
1:                                 TradeConfig.setMarketSummaryInterval(Integer.parseInt(parm));
1:                         }
1:                         catch (Exception e) {
1:                                 Log.error(
1:                                         e, 
1:                                         "TradeConfigServlet: minor exception caught", 
1:                                         "trying to set marketSummaryInterval, error on parsing int " + parm, 
1:                                         "reverting to current value " + TradeConfig.getMarketSummaryInterval());
1: 
1:                         }
1:                 }
1:                 currentConfigStr += "\t\tMarket Summary Interval:\t\t" + TradeConfig.getMarketSummaryInterval()  + "\n";
1: 		
1: 		parm = req.getParameter("primIterations");
1: 		if ((parm != null) && (parm.length() > 0)) {
1: 			try {
1: 				TradeConfig.setPrimIterations(Integer.parseInt(parm));
1: 			}
1: 			catch (Exception e) {
1: 				Log.error(
1: 					e, 
1: 					"TradeConfigServlet: minor exception caught", 
1: 					"trying to set primIterations, error on parsing int " + parm, 
1: 					"reverting to current value " + TradeConfig.getPrimIterations());
1: 
1: 			}
1: 		}
1: 		currentConfigStr += "\t\tPrimitive Iterations:\t\t" + TradeConfig.getPrimIterations()  + "\n";
1:                 
1: 		String enablePublishQuotePriceChange = req.getParameter("EnablePublishQuotePriceChange");
1: 		
1: 		if (enablePublishQuotePriceChange != null)
1: 			TradeConfig.setPublishQuotePriceChange(true);
1: 		else 
1: 			TradeConfig.setPublishQuotePriceChange(false);
1: 		currentConfigStr += "\t\tTradeStreamer MDB Enabled:\t" + TradeConfig.getPublishQuotePriceChange() + "\n";
1: 		
1: 		String enableTrace = req.getParameter("EnableTrace");
1: 		if (enableTrace != null)
1: 			Log.setTrace(true);
1: 		else 
1: 			Log.setTrace(false);			
1: 		String enableActionTrace = req.getParameter("EnableActionTrace");
1: 		if (enableActionTrace != null)
1: 			Log.setActionTrace(true);
1: 		else 
1: 			Log.setActionTrace(false);						
1: 
1:         String enableLongRun = req.getParameter("EnableLongRun");
1:         
1:         if (enableLongRun != null)
1:             TradeConfig.setLongRun(true);
1:         else 
1:             TradeConfig.setLongRun(false);
1:         currentConfigStr += "\t\tLong Run Enabled:\t\t" + TradeConfig.getLongRun()  + "\n";
1: 		
1: 		
1: 		System.out.println(currentConfigStr);
1: 
1: 	}
1: 
1: 	public void service(HttpServletRequest req, HttpServletResponse resp)
1: 		throws ServletException, IOException {
1: 
1: 		String action = null;
1: 		String result = "";
1: 		
1: 		resp.setContentType("text/html");
1: 		try
1: 		{
1: 			action = req.getParameter("action");
1: 			if (action == null)
1: 			{
0: 				doConfigDisplay(req, resp, result + "<b><br>Current DayTrader Configuration:</br></b>");
1: 				return;
1: 			}
1: 			else if (action.equals("updateConfig"))
1: 			{
1: 				doConfigUpdate(req, resp);
0: 				result = "<B><BR>DayTrader Configuration Updated</BR></B>";
1: 			}
1: 			else if (action.equals("resetTrade"))
1: 			{
1: 				doResetTrade(req, resp, "");
1: 				return;
1: 			}
1: 			else if (action.equals("buildDB"))
1: 			{
1: 				resp.setContentType("text/html");
0:                 new TradeBuildDB(resp.getWriter(), null);
0: 				result = "DayTrader Database Built - " + TradeConfig.getMAX_USERS() + "users created";
1: 			}
1:             else if (action.equals("buildDBTables"))
1:             {
1:                 resp.setContentType("text/html");
0:                 new TradeBuildDB(resp.getWriter(), getServletConfig().getServletContext().getRealPath("/"));
1:             }
0: 			doConfigDisplay(req, resp, result + "Current DayTrader Configuration:");
1: 		}
1: 		catch (Exception e)
1: 		{
1: 			Log.error(
1: 				e, 
1: 				"TradeConfigServlet.service(...)", 
1: 				"Exception trying to perform action=" + action);
1: 
1: 			resp.sendError(
1: 				500, 
1: 				"TradeConfigServlet.service(...)"
1: 					+ "Exception trying to perform action="
1: 					+ action
1:                                         + "\nException details: " + e.toString()); 
1: 			
1: 		}
1: 	}
1: }
============================================================================