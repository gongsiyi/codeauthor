1:f46e7d5: /*
1:f46e7d5:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f46e7d5:  * you may not use this file except in compliance with the License.
1:f46e7d5:  * You may obtain a copy of the License at
1:f46e7d5:  *
1:f46e7d5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f46e7d5:  *
1:f46e7d5:  * Unless required by applicable law or agreed to in writing, software
1:f46e7d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f46e7d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f46e7d5:  * See the License for the specific language governing permissions and
1:f46e7d5:  * limitations under the License.
1:f46e7d5:  */
1:f46e7d5: package org.apache.aries.subsystem.core.archive;
1:f46e7d5: 
1:f46e7d5: import static org.junit.Assert.assertEquals;
1:f46e7d5: import static org.junit.Assert.assertNull;
1:f46e7d5: import static org.junit.Assert.assertTrue;
1:f46e7d5: import static org.junit.Assert.fail;
1:f46e7d5: 
1:f46e7d5: import java.util.List;
1:f46e7d5: 
1:f46e7d5: import org.apache.aries.subsystem.core.archive.BundleRequiredExecutionEnvironmentHeader.Clause.ExecutionEnvironment;
1:f46e7d5: import org.apache.aries.subsystem.core.archive.BundleRequiredExecutionEnvironmentHeader.Clause.ExecutionEnvironment.Parser;
1:f46e7d5: import org.apache.aries.subsystem.core.internal.BasicRequirement;
1:f46e7d5: import org.easymock.EasyMock;
1:f46e7d5: import org.junit.Test;
1:f46e7d5: import org.osgi.framework.Constants;
1:f46e7d5: import org.osgi.framework.Version;
1:f46e7d5: import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;
1:f46e7d5: import org.osgi.resource.Requirement;
1:f46e7d5: import org.osgi.resource.Resource;
1:f46e7d5: 
1:f46e7d5: public class BundleRequiredExecutionEnvironmentHeaderTest {
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testClause() {
1:f46e7d5: 		String clauseStr = "CDC-1.0/Foundation-1.0";
1:f46e7d5: 		BundleRequiredExecutionEnvironmentHeader.Clause clause = new BundleRequiredExecutionEnvironmentHeader.Clause(clauseStr);
1:2ffcfb9: 		assertClause(clause, clauseStr, "CDC/Foundation", "1.0", "(&(osgi.ee=CDC/Foundation)(version=1.0.0))");
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testExecutionEnvironment1() {
1:f46e7d5: 		String name = "foo";
1:f46e7d5: 		ExecutionEnvironment ee = new ExecutionEnvironment(name);
1:f46e7d5: 		assertExecutionEnvironmentName(ee, name);
1:f46e7d5: 		assertExecutionEnvironmentVersion(ee, (Version)null);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testExecutionEnvironment2() {
1:f46e7d5: 		String name = "bar";
1:f46e7d5: 		Version version = Version.parseVersion("2.0.0.qualifier");
1:f46e7d5: 		ExecutionEnvironment ee = new ExecutionEnvironment(name, version);
1:f46e7d5: 		assertExecutionEnvironmentName(ee, name);
1:f46e7d5: 		assertExecutionEnvironmentVersion(ee, version);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@SuppressWarnings("deprecation")
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testHeaderWithOneClause() {
1:f46e7d5: 		String value = "OSGi/Minimum-1.2";
1:2ffcfb9: 		String filter = "(&(osgi.ee=OSGi/Minimum)(version=1.2.0))";
1:f46e7d5: 		BundleRequiredExecutionEnvironmentHeader header = new BundleRequiredExecutionEnvironmentHeader(value);
1:f46e7d5: 		assertEquals("Wrong number of clauses", 1, header.getClauses().size());
1:f46e7d5: 		assertClause(header.getClauses().iterator().next(), value, "OSGi/Minimum", "1.2", filter);
1:f46e7d5: 		assertEquals("Wrong name", Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, header.getName());
1:f46e7d5: 		assertEquals("Wrong value", value, header.getValue());
1:f46e7d5: 		Resource resource = EasyMock.createNiceMock(Resource.class);
1:f46e7d5: 		List<? extends Requirement> requirements = header.toRequirements(resource);
1:f46e7d5: 		assertEquals("Wrong number of requirements", 1, requirements.size());
1:f46e7d5: 		assertRequirement(requirements.get(0), filter, resource);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:9bba779:     @SuppressWarnings("deprecation")
1:f46e7d5: 	public void testHeaderWithMultipleClauses() {
1:f46e7d5: 		String value = "CDC-1.0/Foundation-1.0,OSGi/Minimum-1.2,J2SE-1.4,JavaSE-1.6,AA/BB-1.7,V1-1.5/V2-1.6,MyEE-badVersion";
1:f46e7d5: 		String filter = "(|" +
1:f46e7d5: 				"(&(osgi.ee=CDC/Foundation)(version=1.0.0))" +
1:f46e7d5: 				"(&(osgi.ee=OSGi/Minimum)(version=1.2.0))" +
1:f46e7d5: 				"(&(osgi.ee=JavaSE)(version=1.4.0))" +
1:f46e7d5: 				"(&(osgi.ee=JavaSE)(version=1.6.0))" +
1:f46e7d5: 				"(&(osgi.ee=AA/BB)(version=1.7.0))" +
1:2ffcfb9: 				"(osgi.ee=V1-1.5/V2-1.6)" +
1:2ffcfb9: 				"(osgi.ee=MyEE-badVersion))";
1:f46e7d5: 		BundleRequiredExecutionEnvironmentHeader header = new BundleRequiredExecutionEnvironmentHeader(value);
1:f46e7d5: 		assertEquals("Wrong number of clauses", 7, header.getClauses().size());
1:2ffcfb9: 		assertClause(header.getClauses().iterator().next(), "CDC-1.0/Foundation-1.0", "CDC/Foundation", "1.0", "(&(osgi.ee=CDC/Foundation)(version=1.0.0))");
1:f46e7d5: 		assertEquals("Wrong name", Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, header.getName());
1:f46e7d5: 		assertEquals("Wrong value", value, header.getValue());
1:f46e7d5: 		Resource resource = EasyMock.createNiceMock(Resource.class);
1:f46e7d5: 		List<? extends Requirement> requirements = header.toRequirements(resource);
1:f46e7d5: 		assertEquals("Wrong number of requirements", 1, requirements.size());
1:f46e7d5: 		assertRequirement(requirements.get(0), filter, resource);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testParser1() {
1:f46e7d5: 		doTestParser("CDC-1.0/Foundation-1.0", "CDC/Foundation", "1.0");
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testParser2() {
1:f46e7d5: 		doTestParser("OSGi/Minimum-1.2", "OSGi/Minimum", "1.2");
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testParser3() {
1:f46e7d5: 		doTestParser("J2SE-1.4", "JavaSE", "1.4");
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testParser4() {
1:f46e7d5: 		doTestParser("JavaSE-1.6", "JavaSE", "1.6");
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testParser5() {
1:f46e7d5: 		doTestParser("AA/BB-1.7", "AA/BB", "1.7");
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testParser6() {
1:f46e7d5: 		doTestParser("V1-1.5/V2-1.6", "V1-1.5/V2-1.6", (Version)null);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	@Test
1:f46e7d5: 	public void testParser7() {
1:f46e7d5: 		doTestParser("MyEE-badVersion", "MyEE-badVersion", (Version)null);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private void assertClause(BundleRequiredExecutionEnvironmentHeader.Clause clause, String clauseStr, String name, String version, String filter) {
1:f46e7d5: 		assertClause(clause, clauseStr, name, Version.parseVersion(version), filter);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private void assertClause(BundleRequiredExecutionEnvironmentHeader.Clause clause, String clauseStr, String name, Version version, String filter) {
1:f46e7d5: 		assertNull("Attribute should not exist", clause.getAttribute(ExecutionEnvironmentNamespace.CAPABILITY_VERSION_ATTRIBUTE));
1:f46e7d5: 		assertTrue("Should have no attributes", clause.getAttributes().isEmpty());
1:f46e7d5: 		assertNull("Directive should not exist", clause.getDirective(ExecutionEnvironmentNamespace.REQUIREMENT_FILTER_DIRECTIVE));
1:f46e7d5: 		assertExecutionEnvironmentName(clause.getExecutionEnvironment(), name);
1:f46e7d5: 		assertExecutionEnvironmentVersion(clause.getExecutionEnvironment(), version);
1:f46e7d5: 		assertNull("Parameter should not exist", clause.getAttribute(ExecutionEnvironmentNamespace.CAPABILITY_VERSION_ATTRIBUTE));
1:f46e7d5: 		assertTrue("Should have no parameters", clause.getParameters().isEmpty());
1:f46e7d5: 		assertEquals("Wrong path", clauseStr, clause.getPath());
1:f46e7d5: 		assertRequirement(clause, filter);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private void assertExecutionEnvironmentName(ExecutionEnvironment ee, String name) {
1:f46e7d5: 		assertEquals("Wrong name", name, ee.getName());
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private void assertExecutionEnvironmentVersion(ExecutionEnvironment ee, Version version) {
1:f46e7d5: 		assertEquals("Wrong version", version, ee.getVersion());
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private void assertRequirement(BundleRequiredExecutionEnvironmentHeader.Clause clause, String filter) {
1:f46e7d5: 		Resource resource = EasyMock.createNiceMock(Resource.class);
1:f46e7d5: 		assertRequirement(clause.toRequirement(resource), filter, resource);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private void assertRequirement(Requirement requirement, String filter, Resource resource) {
1:f46e7d5: 		Requirement r = new BasicRequirement.Builder()
1:f46e7d5: 				.namespace(ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE)
1:f46e7d5: 				.directive(ExecutionEnvironmentNamespace.REQUIREMENT_FILTER_DIRECTIVE, filter)
1:f46e7d5: 				.resource(resource)
1:f46e7d5: 				.build();
1:f46e7d5: 		assertEquals("Wrong requirement", r, requirement);
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private void doTestParser(String clause, String name, String version) {
1:f46e7d5: 		doTestParser(clause, name, Version.parseVersion(version));
1:f46e7d5: 	}
1:f46e7d5: 	
1:f46e7d5: 	private void doTestParser(String clause, String name, Version version) {
1:f46e7d5: 		ExecutionEnvironment ee = null;
1:f46e7d5: 		try {
1:f46e7d5: 			ee = new Parser().parse(clause);
1:f46e7d5: 		}
1:f46e7d5: 		catch (Exception e) {
1:f46e7d5: 			fail("Unable to parse execution environment from clause " + clause);
1:f46e7d5: 		}
1:f46e7d5: 		assertExecutionEnvironmentName(ee, name);
1:f46e7d5: 		assertExecutionEnvironmentVersion(ee, version);
1:f46e7d5: 	}
1:f46e7d5: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: 		assertClause(clause, clauseStr, "CDC/Foundation", "1.0", "(&(osgi.ee=CDC/Foundation)(version=1.0.0))");
/////////////////////////////////////////////////////////////////////////
1: 		String filter = "(&(osgi.ee=OSGi/Minimum)(version=1.2.0))";
/////////////////////////////////////////////////////////////////////////
1: 				"(osgi.ee=V1-1.5/V2-1.6)" +
1: 				"(osgi.ee=MyEE-badVersion))";
1: 		assertClause(header.getClauses().iterator().next(), "CDC-1.0/Foundation-1.0", "CDC/Foundation", "1.0", "(&(osgi.ee=CDC/Foundation)(version=1.0.0))");
commit:f46e7d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.List;
1: 
1: import org.apache.aries.subsystem.core.archive.BundleRequiredExecutionEnvironmentHeader.Clause.ExecutionEnvironment;
1: import org.apache.aries.subsystem.core.archive.BundleRequiredExecutionEnvironmentHeader.Clause.ExecutionEnvironment.Parser;
1: import org.apache.aries.subsystem.core.internal.BasicRequirement;
1: import org.easymock.EasyMock;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.ExecutionEnvironmentNamespace;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: public class BundleRequiredExecutionEnvironmentHeaderTest {
1: 	@Test
1: 	public void testClause() {
1: 		String clauseStr = "CDC-1.0/Foundation-1.0";
1: 		BundleRequiredExecutionEnvironmentHeader.Clause clause = new BundleRequiredExecutionEnvironmentHeader.Clause(clauseStr);
0: 		assertClause(clause, clauseStr, "CDC/Foundation", "1.0", "(|(&(osgi.ee=CDC/Foundation)(version=1.0.0)))");
1: 	}
1: 	
1: 	@Test
1: 	public void testExecutionEnvironment1() {
1: 		String name = "foo";
1: 		ExecutionEnvironment ee = new ExecutionEnvironment(name);
1: 		assertExecutionEnvironmentName(ee, name);
1: 		assertExecutionEnvironmentVersion(ee, (Version)null);
1: 	}
1: 	
1: 	@Test
1: 	public void testExecutionEnvironment2() {
1: 		String name = "bar";
1: 		Version version = Version.parseVersion("2.0.0.qualifier");
1: 		ExecutionEnvironment ee = new ExecutionEnvironment(name, version);
1: 		assertExecutionEnvironmentName(ee, name);
1: 		assertExecutionEnvironmentVersion(ee, version);
1: 	}
1: 	
1: 	@SuppressWarnings("deprecation")
1: 	@Test
1: 	public void testHeaderWithOneClause() {
1: 		String value = "OSGi/Minimum-1.2";
0: 		String filter = "(|(&(osgi.ee=OSGi/Minimum)(version=1.2.0)))";
1: 		BundleRequiredExecutionEnvironmentHeader header = new BundleRequiredExecutionEnvironmentHeader(value);
1: 		assertEquals("Wrong number of clauses", 1, header.getClauses().size());
1: 		assertClause(header.getClauses().iterator().next(), value, "OSGi/Minimum", "1.2", filter);
1: 		assertEquals("Wrong name", Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, header.getName());
1: 		assertEquals("Wrong value", value, header.getValue());
1: 		Resource resource = EasyMock.createNiceMock(Resource.class);
1: 		List<? extends Requirement> requirements = header.toRequirements(resource);
1: 		assertEquals("Wrong number of requirements", 1, requirements.size());
1: 		assertRequirement(requirements.get(0), filter, resource);
1: 	}
1: 	
1: 	@Test
1: 	public void testHeaderWithMultipleClauses() {
1: 		String value = "CDC-1.0/Foundation-1.0,OSGi/Minimum-1.2,J2SE-1.4,JavaSE-1.6,AA/BB-1.7,V1-1.5/V2-1.6,MyEE-badVersion";
1: 		String filter = "(|" +
1: 				"(&(osgi.ee=CDC/Foundation)(version=1.0.0))" +
1: 				"(&(osgi.ee=OSGi/Minimum)(version=1.2.0))" +
1: 				"(&(osgi.ee=JavaSE)(version=1.4.0))" +
1: 				"(&(osgi.ee=JavaSE)(version=1.6.0))" +
1: 				"(&(osgi.ee=AA/BB)(version=1.7.0))" +
0: 				"(&(osgi.ee=V1-1.5/V2-1.6))" +
0: 				"(&(osgi.ee=MyEE-badVersion)))";
1: 		BundleRequiredExecutionEnvironmentHeader header = new BundleRequiredExecutionEnvironmentHeader(value);
1: 		assertEquals("Wrong number of clauses", 7, header.getClauses().size());
0: 		assertClause(header.getClauses().iterator().next(), "CDC-1.0/Foundation-1.0", "CDC/Foundation", "1.0", "(|(&(osgi.ee=CDC/Foundation)(version=1.0.0)))");
1: 		assertEquals("Wrong name", Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, header.getName());
1: 		assertEquals("Wrong value", value, header.getValue());
1: 		Resource resource = EasyMock.createNiceMock(Resource.class);
1: 		List<? extends Requirement> requirements = header.toRequirements(resource);
1: 		assertEquals("Wrong number of requirements", 1, requirements.size());
1: 		assertRequirement(requirements.get(0), filter, resource);
1: 	}
1: 	
1: 	@Test
1: 	public void testParser1() {
1: 		doTestParser("CDC-1.0/Foundation-1.0", "CDC/Foundation", "1.0");
1: 	}
1: 	
1: 	@Test
1: 	public void testParser2() {
1: 		doTestParser("OSGi/Minimum-1.2", "OSGi/Minimum", "1.2");
1: 	}
1: 	
1: 	@Test
1: 	public void testParser3() {
1: 		doTestParser("J2SE-1.4", "JavaSE", "1.4");
1: 	}
1: 	
1: 	@Test
1: 	public void testParser4() {
1: 		doTestParser("JavaSE-1.6", "JavaSE", "1.6");
1: 	}
1: 	
1: 	@Test
1: 	public void testParser5() {
1: 		doTestParser("AA/BB-1.7", "AA/BB", "1.7");
1: 	}
1: 	
1: 	@Test
1: 	public void testParser6() {
1: 		doTestParser("V1-1.5/V2-1.6", "V1-1.5/V2-1.6", (Version)null);
1: 	}
1: 	
1: 	@Test
1: 	public void testParser7() {
1: 		doTestParser("MyEE-badVersion", "MyEE-badVersion", (Version)null);
1: 	}
1: 	
1: 	private void assertClause(BundleRequiredExecutionEnvironmentHeader.Clause clause, String clauseStr, String name, String version, String filter) {
1: 		assertClause(clause, clauseStr, name, Version.parseVersion(version), filter);
1: 	}
1: 	
1: 	private void assertClause(BundleRequiredExecutionEnvironmentHeader.Clause clause, String clauseStr, String name, Version version, String filter) {
1: 		assertNull("Attribute should not exist", clause.getAttribute(ExecutionEnvironmentNamespace.CAPABILITY_VERSION_ATTRIBUTE));
1: 		assertTrue("Should have no attributes", clause.getAttributes().isEmpty());
1: 		assertNull("Directive should not exist", clause.getDirective(ExecutionEnvironmentNamespace.REQUIREMENT_FILTER_DIRECTIVE));
1: 		assertExecutionEnvironmentName(clause.getExecutionEnvironment(), name);
1: 		assertExecutionEnvironmentVersion(clause.getExecutionEnvironment(), version);
1: 		assertNull("Parameter should not exist", clause.getAttribute(ExecutionEnvironmentNamespace.CAPABILITY_VERSION_ATTRIBUTE));
1: 		assertTrue("Should have no parameters", clause.getParameters().isEmpty());
1: 		assertEquals("Wrong path", clauseStr, clause.getPath());
1: 		assertRequirement(clause, filter);
1: 	}
1: 	
1: 	private void assertExecutionEnvironmentName(ExecutionEnvironment ee, String name) {
1: 		assertEquals("Wrong name", name, ee.getName());
1: 	}
1: 	
1: 	private void assertExecutionEnvironmentVersion(ExecutionEnvironment ee, Version version) {
1: 		assertEquals("Wrong version", version, ee.getVersion());
1: 	}
1: 	
1: 	private void assertRequirement(BundleRequiredExecutionEnvironmentHeader.Clause clause, String filter) {
1: 		Resource resource = EasyMock.createNiceMock(Resource.class);
1: 		assertRequirement(clause.toRequirement(resource), filter, resource);
1: 	}
1: 	
1: 	private void assertRequirement(Requirement requirement, String filter, Resource resource) {
1: 		Requirement r = new BasicRequirement.Builder()
1: 				.namespace(ExecutionEnvironmentNamespace.EXECUTION_ENVIRONMENT_NAMESPACE)
1: 				.directive(ExecutionEnvironmentNamespace.REQUIREMENT_FILTER_DIRECTIVE, filter)
1: 				.resource(resource)
1: 				.build();
1: 		assertEquals("Wrong requirement", r, requirement);
1: 	}
1: 	
1: 	private void doTestParser(String clause, String name, String version) {
1: 		doTestParser(clause, name, Version.parseVersion(version));
1: 	}
1: 	
1: 	private void doTestParser(String clause, String name, Version version) {
1: 		ExecutionEnvironment ee = null;
1: 		try {
1: 			ee = new Parser().parse(clause);
1: 		}
1: 		catch (Exception e) {
1: 			fail("Unable to parse execution environment from clause " + clause);
1: 		}
1: 		assertExecutionEnvironmentName(ee, name);
1: 		assertExecutionEnvironmentVersion(ee, version);
1: 	}
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:9bba779
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("deprecation")
============================================================================