1:f34e6a1: /*
1:d22de55:  * Licensed to the Apache Software Foundation (ASF) under one
1:d22de55:  * or more contributor license agreements.  See the NOTICE file
1:d22de55:  * distributed with this work for additional information
1:d22de55:  * regarding copyright ownership.  The ASF licenses this file
1:d22de55:  * to you under the Apache License, Version 2.0 (the
1:d22de55:  * "License"); you may not use this file except in compliance
1:d22de55:  * with the License.  You may obtain a copy of the License at
1:d22de55:  *
1:d22de55:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d22de55:  *
1:d22de55:  * Unless required by applicable law or agreed to in writing,
1:d22de55:  * software distributed under the License is distributed on an
1:d22de55:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d22de55:  * KIND, either express or implied.  See the License for the
1:d22de55:  * specific language governing permissions and limitations
1:d22de55:  * under the License.
1:f34e6a1:  */
1:d22de55: package org.apache.aries.application.runtime.itests;
1:2ef667c: 
1:d22de55: import static junit.framework.Assert.assertEquals;
1:d22de55: import static org.junit.Assert.assertTrue;
1:0223547: import static org.ops4j.pax.exam.CoreOptions.*;
1:cb3be94: 
1:d22de55: import java.io.BufferedReader;
1:d22de55: import java.io.File;
1:d22de55: import java.io.FileInputStream;
1:d22de55: import java.io.FileOutputStream;
1:d22de55: import java.io.FileReader;
1:d22de55: import java.util.ArrayList;
1:d22de55: import java.util.Collection;
1:de5b346: import java.util.HashMap;
1:d22de55: import java.util.HashSet;
1:d22de55: import java.util.List;
1:de5b346: import java.util.Map;
1:d22de55: import java.util.Set;
1:cb3be94: 
1:d22de55: import javax.xml.parsers.DocumentBuilderFactory;
1:cb3be94: 
1:d22de55: import org.apache.aries.application.Content;
1:d22de55: import org.apache.aries.application.DeploymentContent;
1:d22de55: import org.apache.aries.application.DeploymentMetadata;
1:d22de55: import org.apache.aries.application.management.AriesApplication;
1:d22de55: import org.apache.aries.application.management.AriesApplicationContext;
1:d22de55: import org.apache.aries.application.management.AriesApplicationManager;
1:d22de55: import org.apache.aries.application.management.ResolverException;
1:d22de55: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1:d22de55: import org.apache.aries.application.modelling.ModelledResource;
1:d22de55: import org.apache.aries.application.modelling.ModelledResourceManager;
1:03b34d3: import org.apache.aries.application.modelling.ModellerException;
1:65e113c: import org.apache.aries.application.utils.AppConstants;
1:910fec0: import org.apache.aries.application.utils.manifest.ContentFactory;
1:86224ba: import org.apache.aries.itest.AbstractIntegrationTest;
1:d22de55: import org.apache.aries.sample.HelloWorld;
1:d22de55: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:d22de55: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:d22de55: import org.apache.felix.bundlerepository.Repository;
1:d22de55: import org.apache.felix.bundlerepository.RepositoryAdmin;
1:d22de55: import org.junit.After;
1:d22de55: import org.junit.Before;
1:d22de55: import org.junit.Test;
1:d22de55: import org.junit.runner.RunWith;
1:0223547: import org.ops4j.pax.exam.Configuration;
1:d22de55: import org.ops4j.pax.exam.Option;
1:0223547: import org.ops4j.pax.exam.junit.PaxExam;
1:0223547: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:0223547: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:d22de55: import org.osgi.framework.Bundle;
1:d22de55: import org.osgi.framework.Constants;
1:d22de55: import org.w3c.dom.Document;
1:d22de55: import org.w3c.dom.Element;
1:d22de55: import org.w3c.dom.Node;
1:d22de55: import org.w3c.dom.NodeList;
80:d22de55: 
1:0223547: @RunWith(PaxExam.class)
1:0223547: @ExamReactorStrategy(PerClass.class)
1:0223547: public class OBRResolverAdvancedTest extends AbstractIntegrationTest {
1:d22de55: 
1:0223547:     public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
1:0223547:     public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
1:0223547:     public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
1:0223547:     public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
1:0223547:     public static final String USE_BUNDLE_BY_REFERENCE = "use.bundle.by.reference";
1:0223547:     public static final String REPO_BUNDLE = "aries.bundle1";
1:0223547:     public static final String HELLO_WORLD_CLIENT_BUNDLE = "hello.world.client.bundle";
1:0223547:     public static final String HELLO_WORLD_SERVICE_BUNDLE1 = "hello.world.service.bundle1";
1:0223547:     public static final String HELLO_WORLD_SERVICE_BUNDLE2 = "hello.world.service.bundle2";
1:d22de55: 
1:0223547:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:0223547:      * are created in the paxweb temp directory, and not in the svn tree
1:f34e6a1:      */
1:0223547:     @Before
1:0223547:     public void createApplications() throws Exception {
1:0223547:         ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:b3d67c6: 
1:d22de55: 
1:0223547:         FileOutputStream fout = new FileOutputStream(CORE_BUNDLE_BY_VALUE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:b3d67c6: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(Constants.EXPORT_PACKAGE, "p.q.r")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:0223547: 
1:0223547:         fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(Constants.EXPORT_PACKAGE, "x.y.z")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:0223547: 
1:0223547:         fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(Constants.EXPORT_PACKAGE, "d.e.f")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:0223547: 
1:0223547:         fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(Constants.EXPORT_PACKAGE, "d.e.f").end();
1:0223547: 
1:0223547:         fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547: 
1:0223547:         // jar up a use bundle
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, USE_BUNDLE_BY_REFERENCE)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(Constants.EXPORT_PACKAGE, "a.b.c")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:0223547: 
1:0223547:         fout = new FileOutputStream(USE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547:         // Create the EBA application
1:0223547:         ZipFixture testEba = ArchiveFixture.newZip()
1:0223547:                 .binary("META-INF/APPLICATION.MF",
1:0223547:                         OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/APPLICATION-UseBundle.MF"))
1:0223547:                 .end()
1:0223547:                 .binary(CORE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(CORE_BUNDLE_BY_VALUE + ".jar")).end()
1:0223547:                 .binary(TRANSITIVE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar")).end();
1:0223547: 
1:0223547:         fout = new FileOutputStream("demo.eba");
1:0223547:         testEba.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547: 
1:0223547:         //create the bundle
1:0223547:         bundle = ArchiveFixture.newJar()
1:0223547:                 .binary("META-INF/MANIFEST.MF", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/META-INF/MANIFEST.MF")).end()
1:0223547:                 .binary("OSGI-INF/blueprint/blueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml")).end()
1:0223547:                 .binary("OSGI-INF/blueprint/anotherBlueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/OSGI-INF/blueprint/sample-blueprint.xml")).end();
1:0223547:         fout = new FileOutputStream(REPO_BUNDLE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547: 
1:0223547:         ///////////////////////////////////////////////
1:0223547:         //create an eba with a helloworld client, which get all 'HelloWorld' services
1:0223547:         //create a helloworld client
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_CLIENT_BUNDLE)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute("Import-Package", "org.apache.aries.sample")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
1:0223547:                 .binary("org/apache/aries/application/helloworld/client/HelloWorldClientImpl.class",
1:0223547:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/application/helloworld/client/HelloWorldClientImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/helloClient.xml",
1:0223547:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml"))
1:0223547:                 .end();
1:0223547: 
1:0223547: 
1:0223547:         fout = new FileOutputStream(HELLO_WORLD_CLIENT_BUNDLE + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547: 
1:0223547:         //create two helloworld services
1:0223547:         // create the 1st helloworld service
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_SERVICE_BUNDLE1)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute("Import-Package", "org.apache.aries.sample")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
1:0223547:                 .binary("org/apache/aries/sample/impl/HelloWorldImpl.class",
1:0223547:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:0223547:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
1:0223547:                 .end();
1:0223547: 
1:0223547:         //create the 2nd helloworld service
1:0223547:         fout = new FileOutputStream(HELLO_WORLD_SERVICE_BUNDLE1 + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_SERVICE_BUNDLE2)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute("Import-Package", "org.apache.aries.sample")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
1:0223547:                 .binary("org/apache/aries/sample/impl/HelloWorldImpl.class",
1:0223547:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:0223547:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
1:0223547:                 .end();
1:0223547: 
1:0223547:         fout = new FileOutputStream(HELLO_WORLD_SERVICE_BUNDLE2 + ".jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         //Create a helloworld eba with the client included
1:0223547:         ZipFixture multiServiceHelloEba = ArchiveFixture.newZip()
1:0223547:                 .binary(HELLO_WORLD_CLIENT_BUNDLE + ".jar", new FileInputStream(HELLO_WORLD_CLIENT_BUNDLE + ".jar")).end();
1:0223547: 
1:0223547:         fout = new FileOutputStream("hello.eba");
1:0223547:         multiServiceHelloEba.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:8069959:     }
1:f34e6a1: 
1:0223547:     @Test(expected = ResolverException.class)
1:0223547:     public void testDemoAppResolveFail() throws ResolverException, Exception {
1:0223547:         // do not provision against the local runtime
1:0223547:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:0223547:         generateOBRRepoXML(false, TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar", USE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547: 
1:0223547:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:0223547: 
1:0223547:         Repository[] repos = repositoryAdmin.listRepositories();
1:0223547:         for (Repository repo : repos) {
1:0223547:             repositoryAdmin.removeRepository(repo.getURI());
1:0223547:         }
1:0223547: 
1:0223547:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1:0223547: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("demo.eba")));
1:0223547: 
1:0223547:         app = manager.resolve(app);
1:0223547: 
1:0223547: 
1:f34e6a1:     }
1:8069959: 
1:0223547:     @Test(expected = ModellerException.class)
1:0223547:     public void testModellerException() throws Exception {
1:8069959: 
1:0223547:         ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:0223547:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
1:0223547:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:0223547:                 .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:0223547:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:0223547:         FileOutputStream fout = new FileOutputStream("delete.jar");
1:0223547:         bundle.writeOut(fout);
1:0223547:         fout.close();
1:0223547:         generateOBRRepoXML(false, "delete.jar");
1:0223547:     }
1:8069959: 
1:0223547:     @Test
1:0223547:     public void testDemoApp() throws Exception {
1:0223547:         // do not provision against the local runtime
1:0223547:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:0223547:         generateOBRRepoXML(false, TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar", USE_BUNDLE_BY_REFERENCE + ".jar");
1:0223547: 
1:0223547:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:0223547: 
1:0223547:         Repository[] repos = repositoryAdmin.listRepositories();
1:0223547:         for (Repository repo : repos) {
1:0223547:             repositoryAdmin.removeRepository(repo.getURI());
1:0223547:         }
1:0223547: 
1:0223547:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1:2ef667c: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("demo.eba")));
1:0223547:         //installing requires a valid url for the bundle in repository.xml.
1:0223547: 
1:0223547:         app = manager.resolve(app);
1:0223547: 
1:0223547:         DeploymentMetadata depMeta = app.getDeploymentMetadata();
1:0223547: 
1:0223547:         List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
1:0223547:         Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
1:0223547:         Collection<Content> importPackages = depMeta.getImportPackage();
1:0223547:         assertEquals(provision.toString(), 2, provision.size());
1:0223547:         assertEquals(useBundles.toString(), 1, useBundles.size());
1:0223547:         assertEquals(importPackages.toString(), 4, importPackages.size());
1:0223547: 
1:0223547:         List<String> bundleSymbolicNames = new ArrayList<String>();
1:0223547: 
1:0223547:         for (DeploymentContent dep : provision) {
1:0223547:             bundleSymbolicNames.add(dep.getContentName());
1:0223547:         }
1:0223547: 
1:0223547:         assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
1:0223547:         assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
1:0223547:         bundleSymbolicNames.clear();
1:0223547:         for (DeploymentContent dep : useBundles) {
1:0223547:             bundleSymbolicNames.add(dep.getContentName());
1:0223547:         }
1:0223547:         assertTrue("Bundle " + USE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(USE_BUNDLE_BY_REFERENCE));
1:0223547:         Collection<String> packages = new ArrayList<String>();
1:0223547:         Map<String, String> maps = new HashMap<String, String>();
1:0223547:         maps.put("version", "0.0.0");
1:0223547:         maps.put("bundle-symbolic-name", "use.bundle.by.reference");
1:0223547:         maps.put("bundle-version", "[1.0.0,1.0.0]");
1:0223547:         Content useContent = ContentFactory.parseContent("a.b.c", maps);
1:0223547:         assertTrue("Use Bundle not found in import packags", importPackages.contains(useContent));
1:0223547: 
1:0223547:         for (Content c : importPackages) {
1:0223547:             packages.add(c.getContentName());
1:0223547:         }
1:0223547: 
1:0223547:         assertTrue("package javax.naming not found", packages.contains("javax.naming"));
1:0223547:         assertTrue("package p.q.r not found", packages.contains("p.q.r"));
1:0223547:         assertTrue("package x.y.z not found", packages.contains("x.y.z"));
1:0223547:         assertTrue("package a.b.c not found", packages.contains("a.b.c"));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         Set<Bundle> bundles = ctx.getApplicationContent();
1:0223547: 
1:0223547:         assertEquals("Number of bundles provisioned in the app", 5, bundles.size());
1:0223547: 
1:0223547:         ctx.stop();
1:0223547:         manager.uninstall(ctx);
1:0223547: 
1:0223547:     }
1:0223547: 
1:0223547:     /**
1:0223547:      * This test just verifies whether every entry in the MANIFEST.MF was fed into the repository generator.
1:0223547:      * Since the IBM JRE generates a slightly different repository file from the Sun JRE as far as the order of xml elements is concerned. It is not feasible
1:0223547:      * to perform a file comparison.
1:0223547:      *
1:0223547:      * @throws Exception
1:0223547:      */
1:0223547:     @Test
1:0223547:     public void testRepo() throws Exception {
1:0223547:         // do not provision against the local runtime
1:0223547:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:0223547:         generateOBRRepoXML(true, REPO_BUNDLE + ".jar");
1:0223547:         //print out the repository.xml
1:0223547:         BufferedReader reader = new BufferedReader(new FileReader(new File("repository.xml")));
1:0223547:         String line;
1:0223547:         while ((line = reader.readLine()) != null) {
1:0223547:             System.out.println(line);
1:0223547:         }
1:0223547:         // compare the generated with the expected file
1:0223547:         Document real_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("repository.xml"));
1:0223547:         Document expected_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("/obr/aries.bundle1/expectedRepository.xml"));
1:0223547:         // parse two documents to make sure they have the same number of elements
1:0223547:         Element element_real = real_doc.getDocumentElement();
1:0223547:         Element element_expected = expected_doc.getDocumentElement();
1:0223547:         NodeList nodes_real = element_real.getElementsByTagName("capability");
1:0223547:         NodeList nodes_expected = element_expected.getElementsByTagName("capability");
1:0223547:         assertEquals("The number of capability is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:0223547:         nodes_real = element_real.getElementsByTagName("require");
1:0223547:         nodes_expected = element_expected.getElementsByTagName("require");
1:0223547:         assertEquals("The number of require elements is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:0223547:         nodes_real = element_real.getElementsByTagName("p");
1:0223547:         nodes_expected = element_expected.getElementsByTagName("p");
1:0223547:         assertEquals("The number of properties is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:0223547:         // Let's verify all p elements are shown as expected.
1:0223547:         for (int index = 0; index < nodes_expected.getLength(); index++) {
1:0223547:             Node node = nodes_expected.item(index);
1:0223547:             boolean contains = false;
1:0223547:             // make sure the node exists in the real generated repository
1:0223547:             for (int i = 0; i < nodes_real.getLength(); i++) {
1:0223547:                 Node real_node = nodes_real.item(i);
1:0223547:                 if (node.isEqualNode(real_node)) {
1:0223547:                     contains = true;
1:0223547:                     break;
1:0223547:                 }
1:0223547:             }
1:0223547:             assertTrue("The node " + node.toString() + "should exist.", contains);
1:0223547:         }
1:0223547:     }
1:0223547: 
1:0223547:     @Test
1:0223547:     public void testRepoAgain() throws Exception {
1:0223547:         // do not provision against the local runtime
1:0223547:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:0223547: 
1:0223547:         RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
1:0223547: 
1:0223547:         String fileURI = new File(REPO_BUNDLE + ".jar").toURI().toString();
1:0223547:         File repoXml = new File("repository.xml");
1:0223547:         if (repoXml.exists()) {
1:0223547:             repoXml.delete();
1:0223547:         }
1:0223547:         repositoryGenerator.generateRepository(new String[]{fileURI}, new FileOutputStream(repoXml));
1:0223547: 
1:0223547:         //print out the repository.xml
1:0223547:         BufferedReader reader = new BufferedReader(new FileReader(new File("repository.xml")));
1:0223547:         String line;
1:0223547:         while ((line = reader.readLine()) != null) {
1:0223547:             System.out.println(line);
1:0223547:         }
1:0223547:         // compare the generated with the expected file
1:0223547:         Document real_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("repository.xml"));
1:0223547:         Document expected_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("/obr/aries.bundle1/expectedRepository.xml"));
1:0223547:         // parse two documents to make sure they have the same number of elements
1:0223547:         Element element_real = real_doc.getDocumentElement();
1:0223547:         Element element_expected = expected_doc.getDocumentElement();
1:0223547:         NodeList nodes_real = element_real.getElementsByTagName("capability");
1:0223547:         NodeList nodes_expected = element_expected.getElementsByTagName("capability");
1:0223547:         assertEquals("The number of capability is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:0223547:         nodes_real = element_real.getElementsByTagName("require");
1:0223547:         nodes_expected = element_expected.getElementsByTagName("require");
1:0223547:         assertEquals("The number of require elements is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:0223547:         nodes_real = element_real.getElementsByTagName("p");
1:0223547:         nodes_expected = element_expected.getElementsByTagName("p");
1:0223547:         assertEquals("The number of properties is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:0223547:         // Let's verify all p elements are shown as expected.
1:0223547:         for (int index = 0; index < nodes_expected.getLength(); index++) {
1:0223547:             Node node = nodes_expected.item(index);
1:0223547:             boolean contains = false;
1:0223547:             // make sure the node exists in the real generated repository
1:0223547:             for (int i = 0; i < nodes_real.getLength(); i++) {
1:0223547:                 Node real_node = nodes_real.item(i);
1:0223547:                 if (node.isEqualNode(real_node)) {
1:0223547:                     contains = true;
1:0223547:                     break;
1:0223547:                 }
1:0223547:             }
1:0223547:             assertTrue("The node " + node.toString() + "should exist.", contains);
1:0223547:         }
1:0223547:     }
1:0223547: 
1:0223547:     @Test
1:0223547:     public void testMutlipleServices() throws Exception {
1:0223547:         // provision against the local runtime
1:0223547:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
1:0223547:         generateOBRRepoXML(false, HELLO_WORLD_SERVICE_BUNDLE1 + ".jar", HELLO_WORLD_SERVICE_BUNDLE2 + ".jar");
1:0223547: 
1:0223547:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:0223547: 
1:0223547:         Repository[] repos = repositoryAdmin.listRepositories();
1:0223547:         for (Repository repo : repos) {
1:0223547:             repositoryAdmin.removeRepository(repo.getURI());
1:0223547:         }
1:0223547: 
1:0223547:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1:0223547: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("hello.eba")));
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         // Wait 5 seconds just to give the blueprint-managed beans a chance to come up
1:0223547:         try {
1:0223547:             Thread.sleep(5000);
1:0223547:         } catch (InterruptedException ix) {
1:0223547:         }
1:0223547: 
1:0223547:         HelloWorld hw = context().getService(HelloWorld.class);
1:0223547:         String result = hw.getMessage();
1:0223547:         assertEquals(result, "hello world");
1:0223547: 
1:0223547: 
1:0223547:         // Uncomment the block below after https://issues.apache.org/jira/browse/FELIX-2546,
1:0223547:         // "Only one service is provisioned even when specifying for mulitple services"
1:0223547:         // is fixed. This tracks the problem of provisioning only one service even when we
1:0223547:         // specify multiple services.
1:0223547: 
1:0223547:         /** HelloWorldManager hwm = context().getService(HelloWorldManager.class);
1:0223547:          * int numberOfServices = hwm.getNumOfHelloServices();
1:0223547:          * assertEquals(2, numberOfServices);
1:0223547:          */
1:0223547:         ctx.stop();
1:0223547:         manager.uninstall(ctx);
1:0223547: 
1:0223547:     }
1:0223547: 
1:0223547: 
1:0223547:     private void generateOBRRepoXML(boolean nullURI, String... bundleFiles) throws Exception {
1:0223547:         Set<ModelledResource> mrs = new HashSet<ModelledResource>();
1:0223547:         FileOutputStream fout = new FileOutputStream("repository.xml");
1:0223547:         RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
1:0223547:         ModelledResourceManager modelledResourceManager = context().getService(ModelledResourceManager.class);
1:0223547:         for (String fileName : bundleFiles) {
1:0223547:             File bundleFile = new File(fileName);
1:0223547:             IDirectory jarDir = FileSystem.getFSRoot(bundleFile);
1:0223547:             String uri = "";
1:0223547:             if (!!!nullURI) {
1:0223547:                 uri = bundleFile.toURI().toString();
1:0223547:             }
1:0223547:             if ("delete.jar".equals(fileName)) {
1:0223547:                 jarDir = null;
1:0223547:             }
1:0223547:             mrs.add(modelledResourceManager.getModelledResource(uri, jarDir));
1:0223547:         }
1:0223547:         repositoryGenerator.generateRepository("Test repo description", mrs, fout);
1:0223547:         fout.close();
1:0223547:     }
1:0223547: 
1:0223547:     @After
1:0223547:     public void clearRepository() {
1:0223547:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:0223547:         Repository[] repos = repositoryAdmin.listRepositories();
1:0223547:         if ((repos != null) && (repos.length > 0)) {
1:0223547:             for (Repository repo : repos) {
1:0223547:                 repositoryAdmin.removeRepository(repo.getURI());
1:0223547:             }
1:0223547:         }
1:0223547:     }
1:0223547: 
1:0223547:     @Configuration
1:0223547:     public static Option[] configuration() {
1:0223547:         return options(
1:0223547: 
1:0223547:                 // framework / core bundles
1:0223547:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:0223547: 
1:0223547:                 // Logging
1:0223547:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:0223547: 
1:0223547:                 // Bundles
1:0223547:                 junitBundles(),
1:0223547:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:0223547: 
1:0223547:                 // Bundles
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:0223547:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject());
1:0223547:     }
1:03b34d3: 
1:8069959: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e334773
/////////////////////////////////////////////////////////////////////////
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:0223547
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
/////////////////////////////////////////////////////////////////////////
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public class OBRResolverAdvancedTest extends AbstractIntegrationTest {
1:     public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
1:     public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
1:     public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
1:     public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
1:     public static final String USE_BUNDLE_BY_REFERENCE = "use.bundle.by.reference";
1:     public static final String REPO_BUNDLE = "aries.bundle1";
1:     public static final String HELLO_WORLD_CLIENT_BUNDLE = "hello.world.client.bundle";
1:     public static final String HELLO_WORLD_SERVICE_BUNDLE1 = "hello.world.service.bundle1";
1:     public static final String HELLO_WORLD_SERVICE_BUNDLE2 = "hello.world.service.bundle2";
1:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:      * are created in the paxweb temp directory, and not in the svn tree
1:     @Before
1:     public void createApplications() throws Exception {
1:         ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:         FileOutputStream fout = new FileOutputStream(CORE_BUNDLE_BY_VALUE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(Constants.EXPORT_PACKAGE, "p.q.r")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
1:         fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(Constants.EXPORT_PACKAGE, "x.y.z")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
1:         fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(Constants.EXPORT_PACKAGE, "d.e.f")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
1:         fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(Constants.EXPORT_PACKAGE, "d.e.f").end();
1: 
1:         fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1: 
1:         // jar up a use bundle
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, USE_BUNDLE_BY_REFERENCE)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(Constants.EXPORT_PACKAGE, "a.b.c")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
1:         fout = new FileOutputStream(USE_BUNDLE_BY_REFERENCE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1:         // Create the EBA application
1:         ZipFixture testEba = ArchiveFixture.newZip()
1:                 .binary("META-INF/APPLICATION.MF",
1:                         OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/APPLICATION-UseBundle.MF"))
1:                 .end()
1:                 .binary(CORE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(CORE_BUNDLE_BY_VALUE + ".jar")).end()
1:                 .binary(TRANSITIVE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar")).end();
1: 
1:         fout = new FileOutputStream("demo.eba");
1:         testEba.writeOut(fout);
1:         fout.close();
1: 
1: 
1:         //create the bundle
1:         bundle = ArchiveFixture.newJar()
1:                 .binary("META-INF/MANIFEST.MF", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/META-INF/MANIFEST.MF")).end()
1:                 .binary("OSGI-INF/blueprint/blueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml")).end()
1:                 .binary("OSGI-INF/blueprint/anotherBlueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/OSGI-INF/blueprint/sample-blueprint.xml")).end();
1:         fout = new FileOutputStream(REPO_BUNDLE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1: 
1:         ///////////////////////////////////////////////
1:         //create an eba with a helloworld client, which get all 'HelloWorld' services
1:         //create a helloworld client
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_CLIENT_BUNDLE)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute("Import-Package", "org.apache.aries.sample")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
1:                 .binary("org/apache/aries/application/helloworld/client/HelloWorldClientImpl.class",
1:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/application/helloworld/client/HelloWorldClientImpl.class"))
1:                 .binary("OSGI-INF/blueprint/helloClient.xml",
1:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml"))
1:                 .end();
1: 
1: 
1:         fout = new FileOutputStream(HELLO_WORLD_CLIENT_BUNDLE + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1: 
1:         //create two helloworld services
1:         // create the 1st helloworld service
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_SERVICE_BUNDLE1)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute("Import-Package", "org.apache.aries.sample")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
1:                 .binary("org/apache/aries/sample/impl/HelloWorldImpl.class",
1:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
1:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
1:                 .end();
1: 
1:         //create the 2nd helloworld service
1:         fout = new FileOutputStream(HELLO_WORLD_SERVICE_BUNDLE1 + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1:         bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_SERVICE_BUNDLE2)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute("Import-Package", "org.apache.aries.sample")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
1:                 .binary("org/apache/aries/sample/impl/HelloWorldImpl.class",
1:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
1:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
1:                 .end();
1: 
1:         fout = new FileOutputStream(HELLO_WORLD_SERVICE_BUNDLE2 + ".jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1: 
1:         //Create a helloworld eba with the client included
1:         ZipFixture multiServiceHelloEba = ArchiveFixture.newZip()
1:                 .binary(HELLO_WORLD_CLIENT_BUNDLE + ".jar", new FileInputStream(HELLO_WORLD_CLIENT_BUNDLE + ".jar")).end();
1: 
1:         fout = new FileOutputStream("hello.eba");
1:         multiServiceHelloEba.writeOut(fout);
1:         fout.close();
1: 
1:     @Test(expected = ResolverException.class)
1:     public void testDemoAppResolveFail() throws ResolverException, Exception {
1:         // do not provision against the local runtime
1:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:         generateOBRRepoXML(false, TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar", USE_BUNDLE_BY_REFERENCE + ".jar");
1: 
1:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1: 
1:         Repository[] repos = repositoryAdmin.listRepositories();
1:         for (Repository repo : repos) {
1:             repositoryAdmin.removeRepository(repo.getURI());
1:         }
1: 
1:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("demo.eba")));
1: 
1:         app = manager.resolve(app);
1: 
1: 
1:     @Test(expected = ModellerException.class)
1:     public void testModellerException() throws Exception {
1:         ZipFixture bundle = ArchiveFixture.newJar().manifest()
1:                 .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
1:                 .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
1:                 .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
1:                 .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:         FileOutputStream fout = new FileOutputStream("delete.jar");
1:         bundle.writeOut(fout);
1:         fout.close();
1:         generateOBRRepoXML(false, "delete.jar");
1:     }
1:     @Test
1:     public void testDemoApp() throws Exception {
1:         // do not provision against the local runtime
1:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:         generateOBRRepoXML(false, TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar", USE_BUNDLE_BY_REFERENCE + ".jar");
1:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1: 
1:         Repository[] repos = repositoryAdmin.listRepositories();
1:         for (Repository repo : repos) {
1:             repositoryAdmin.removeRepository(repo.getURI());
1:         }
1: 
1:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("demo.eba")));
1:         //installing requires a valid url for the bundle in repository.xml.
1: 
1:         app = manager.resolve(app);
1: 
1:         DeploymentMetadata depMeta = app.getDeploymentMetadata();
1: 
1:         List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
1:         Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
1:         Collection<Content> importPackages = depMeta.getImportPackage();
1:         assertEquals(provision.toString(), 2, provision.size());
1:         assertEquals(useBundles.toString(), 1, useBundles.size());
1:         assertEquals(importPackages.toString(), 4, importPackages.size());
1: 
1:         List<String> bundleSymbolicNames = new ArrayList<String>();
1: 
1:         for (DeploymentContent dep : provision) {
1:             bundleSymbolicNames.add(dep.getContentName());
1:         }
1: 
1:         assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
1:         assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
1:         bundleSymbolicNames.clear();
1:         for (DeploymentContent dep : useBundles) {
1:             bundleSymbolicNames.add(dep.getContentName());
1:         }
1:         assertTrue("Bundle " + USE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(USE_BUNDLE_BY_REFERENCE));
1:         Collection<String> packages = new ArrayList<String>();
1:         Map<String, String> maps = new HashMap<String, String>();
1:         maps.put("version", "0.0.0");
1:         maps.put("bundle-symbolic-name", "use.bundle.by.reference");
1:         maps.put("bundle-version", "[1.0.0,1.0.0]");
1:         Content useContent = ContentFactory.parseContent("a.b.c", maps);
1:         assertTrue("Use Bundle not found in import packags", importPackages.contains(useContent));
1: 
1:         for (Content c : importPackages) {
1:             packages.add(c.getContentName());
1:         }
1: 
1:         assertTrue("package javax.naming not found", packages.contains("javax.naming"));
1:         assertTrue("package p.q.r not found", packages.contains("p.q.r"));
1:         assertTrue("package x.y.z not found", packages.contains("x.y.z"));
1:         assertTrue("package a.b.c not found", packages.contains("a.b.c"));
1:         AriesApplicationContext ctx = manager.install(app);
1:         ctx.start();
1: 
1:         Set<Bundle> bundles = ctx.getApplicationContent();
1: 
1:         assertEquals("Number of bundles provisioned in the app", 5, bundles.size());
1: 
1:         ctx.stop();
1:         manager.uninstall(ctx);
1: 
1:     }
1: 
1:     /**
1:      * This test just verifies whether every entry in the MANIFEST.MF was fed into the repository generator.
1:      * Since the IBM JRE generates a slightly different repository file from the Sun JRE as far as the order of xml elements is concerned. It is not feasible
1:      * to perform a file comparison.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testRepo() throws Exception {
1:         // do not provision against the local runtime
1:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:         generateOBRRepoXML(true, REPO_BUNDLE + ".jar");
1:         //print out the repository.xml
1:         BufferedReader reader = new BufferedReader(new FileReader(new File("repository.xml")));
1:         String line;
1:         while ((line = reader.readLine()) != null) {
1:             System.out.println(line);
1:         }
1:         // compare the generated with the expected file
1:         Document real_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("repository.xml"));
1:         Document expected_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("/obr/aries.bundle1/expectedRepository.xml"));
1:         // parse two documents to make sure they have the same number of elements
1:         Element element_real = real_doc.getDocumentElement();
1:         Element element_expected = expected_doc.getDocumentElement();
1:         NodeList nodes_real = element_real.getElementsByTagName("capability");
1:         NodeList nodes_expected = element_expected.getElementsByTagName("capability");
1:         assertEquals("The number of capability is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:         nodes_real = element_real.getElementsByTagName("require");
1:         nodes_expected = element_expected.getElementsByTagName("require");
1:         assertEquals("The number of require elements is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:         nodes_real = element_real.getElementsByTagName("p");
1:         nodes_expected = element_expected.getElementsByTagName("p");
1:         assertEquals("The number of properties is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:         // Let's verify all p elements are shown as expected.
1:         for (int index = 0; index < nodes_expected.getLength(); index++) {
1:             Node node = nodes_expected.item(index);
1:             boolean contains = false;
1:             // make sure the node exists in the real generated repository
1:             for (int i = 0; i < nodes_real.getLength(); i++) {
1:                 Node real_node = nodes_real.item(i);
1:                 if (node.isEqualNode(real_node)) {
1:                     contains = true;
1:                     break;
1:                 }
1:             }
1:             assertTrue("The node " + node.toString() + "should exist.", contains);
1:         }
1:     }
1: 
1:     @Test
1:     public void testRepoAgain() throws Exception {
1:         // do not provision against the local runtime
1:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1: 
1:         RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
1: 
1:         String fileURI = new File(REPO_BUNDLE + ".jar").toURI().toString();
1:         File repoXml = new File("repository.xml");
1:         if (repoXml.exists()) {
1:             repoXml.delete();
1:         }
1:         repositoryGenerator.generateRepository(new String[]{fileURI}, new FileOutputStream(repoXml));
1: 
1:         //print out the repository.xml
1:         BufferedReader reader = new BufferedReader(new FileReader(new File("repository.xml")));
1:         String line;
1:         while ((line = reader.readLine()) != null) {
1:             System.out.println(line);
1:         }
1:         // compare the generated with the expected file
1:         Document real_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("repository.xml"));
1:         Document expected_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("/obr/aries.bundle1/expectedRepository.xml"));
1:         // parse two documents to make sure they have the same number of elements
1:         Element element_real = real_doc.getDocumentElement();
1:         Element element_expected = expected_doc.getDocumentElement();
1:         NodeList nodes_real = element_real.getElementsByTagName("capability");
1:         NodeList nodes_expected = element_expected.getElementsByTagName("capability");
1:         assertEquals("The number of capability is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:         nodes_real = element_real.getElementsByTagName("require");
1:         nodes_expected = element_expected.getElementsByTagName("require");
1:         assertEquals("The number of require elements is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:         nodes_real = element_real.getElementsByTagName("p");
1:         nodes_expected = element_expected.getElementsByTagName("p");
1:         assertEquals("The number of properties is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
1:         // Let's verify all p elements are shown as expected.
1:         for (int index = 0; index < nodes_expected.getLength(); index++) {
1:             Node node = nodes_expected.item(index);
1:             boolean contains = false;
1:             // make sure the node exists in the real generated repository
1:             for (int i = 0; i < nodes_real.getLength(); i++) {
1:                 Node real_node = nodes_real.item(i);
1:                 if (node.isEqualNode(real_node)) {
1:                     contains = true;
1:                     break;
1:                 }
1:             }
1:             assertTrue("The node " + node.toString() + "should exist.", contains);
1:         }
1:     }
1: 
1:     @Test
1:     public void testMutlipleServices() throws Exception {
1:         // provision against the local runtime
1:         System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
1:         generateOBRRepoXML(false, HELLO_WORLD_SERVICE_BUNDLE1 + ".jar", HELLO_WORLD_SERVICE_BUNDLE2 + ".jar");
1: 
1:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1: 
1:         Repository[] repos = repositoryAdmin.listRepositories();
1:         for (Repository repo : repos) {
1:             repositoryAdmin.removeRepository(repo.getURI());
1:         }
1: 
1:         repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("hello.eba")));
1:         AriesApplicationContext ctx = manager.install(app);
1:         ctx.start();
1: 
1:         // Wait 5 seconds just to give the blueprint-managed beans a chance to come up
1:         try {
1:             Thread.sleep(5000);
1:         } catch (InterruptedException ix) {
1:         }
1: 
1:         HelloWorld hw = context().getService(HelloWorld.class);
1:         String result = hw.getMessage();
1:         assertEquals(result, "hello world");
1: 
1: 
1:         // Uncomment the block below after https://issues.apache.org/jira/browse/FELIX-2546,
1:         // "Only one service is provisioned even when specifying for mulitple services"
1:         // is fixed. This tracks the problem of provisioning only one service even when we
1:         // specify multiple services.
1: 
1:         /** HelloWorldManager hwm = context().getService(HelloWorldManager.class);
1:          * int numberOfServices = hwm.getNumOfHelloServices();
1:          * assertEquals(2, numberOfServices);
1:          */
1:         ctx.stop();
1:         manager.uninstall(ctx);
1: 
1:     }
1: 
1: 
1:     private void generateOBRRepoXML(boolean nullURI, String... bundleFiles) throws Exception {
1:         Set<ModelledResource> mrs = new HashSet<ModelledResource>();
1:         FileOutputStream fout = new FileOutputStream("repository.xml");
1:         RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
1:         ModelledResourceManager modelledResourceManager = context().getService(ModelledResourceManager.class);
1:         for (String fileName : bundleFiles) {
1:             File bundleFile = new File(fileName);
1:             IDirectory jarDir = FileSystem.getFSRoot(bundleFile);
1:             String uri = "";
1:             if (!!!nullURI) {
1:                 uri = bundleFile.toURI().toString();
1:             }
1:             if ("delete.jar".equals(fileName)) {
1:                 jarDir = null;
1:             }
1:             mrs.add(modelledResourceManager.getModelledResource(uri, jarDir));
1:         }
1:         repositoryGenerator.generateRepository("Test repo description", mrs, fout);
1:         fout.close();
1:     }
1: 
1:     @After
1:     public void clearRepository() {
1:         RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
1:         Repository[] repos = repositoryAdmin.listRepositories();
1:         if ((repos != null) && (repos.length > 0)) {
1:             for (Repository repo : repos) {
1:                 repositoryAdmin.removeRepository(repo.getURI());
1:             }
1:         }
1:     }
1: 
1:     @Configuration
1:     public static Option[] configuration() {
1:         return options(
1: 
1:                 // framework / core bundles
1:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
0:                 mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1: 
1:                 // Logging
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 
1:                 // Bundles
1:                 junitBundles(),
1:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 
1:                 // Bundles
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces").versionAsInProject(),
1:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject());
1:     }
author:John Ross
-------------------------------------------------------------------------------
commit:cffbcb0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
/////////////////////////////////////////////////////////////////////////
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
/////////////////////////////////////////////////////////////////////////
0:   public static Option[] configuration()
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties")        
commit:f34e6a1
/////////////////////////////////////////////////////////////////////////
1:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
1:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
0:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
1:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox38Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.8.0.V20120529-1548")
0: 	          );
1:   }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8069959
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
0:   private static Option[] generalConfiguration() {
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.osgi", "org.osgi.compendium")
/////////////////////////////////////////////////////////////////////////
0:         );
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox35Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 	          equinox().version("3.5.0")
0: 	          );
1:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox37Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.7.0.v20110613")
0: 	          );
1:   }
1: 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:2ef667c
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
1:     
0:     ZipFixture bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0:     FileOutputStream fout = new FileOutputStream("delete.jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0:     generateOBRRepoXML(false, "delete.jar");
1: 
/////////////////////////////////////////////////////////////////////////
0:       if ("delete.jar".equals(fileName)) {
0:         jarDir = null;
0:       }
commit:2b7f337
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
commit:cb3be94
/////////////////////////////////////////////////////////////////////////
0:   public void testRepoAgain() throws Exception {
0:     // do not provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:     
0:     RepositoryGenerator repositoryGenerator = getOsgiService(RepositoryGenerator.class);
1:     
0:     String fileURI = new File(REPO_BUNDLE+".jar").toURI().toString();
0:     File repoXml = new File("repository.xml");
0:     if (repoXml.exists()) {
0:        repoXml.delete();
0:     }
0:     repositoryGenerator.generateRepository(new String[] {fileURI}, new FileOutputStream(repoXml));
1:     
0:     //print out the repository.xml
0:     BufferedReader reader = new BufferedReader(new FileReader(new File("repository.xml")));
0:     String line;
0:     while (( line = reader.readLine()) != null) {
0:         System.out.println(line);
0:     }
0:     // compare the generated with the expected file
0:     Document real_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("repository.xml"));    
0:     Document expected_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("/obr/aries.bundle1/expectedRepository.xml"));
0:     // parse two documents to make sure they have the same number of elements
0:     Element element_real = real_doc.getDocumentElement();
0:     Element element_expected = expected_doc.getDocumentElement();    
0:     NodeList nodes_real = element_real.getElementsByTagName("capability");
0:     NodeList nodes_expected = element_expected.getElementsByTagName("capability");
0:     assertEquals("The number of capability is not expected. ", nodes_expected.getLength(), nodes_real.getLength());    
0:     nodes_real = element_real.getElementsByTagName("require");
0:     nodes_expected = element_expected.getElementsByTagName("require");    
0:     assertEquals("The number of require elements is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
0:     nodes_real = element_real.getElementsByTagName("p");
0:     nodes_expected = element_expected.getElementsByTagName("p");    
0:     assertEquals("The number of properties is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
0:     // Let's verify all p elements are shown as expected.
0:     for (int index=0; index < nodes_expected.getLength(); index++) {
0:       Node node = nodes_expected.item(index);
0:       boolean contains = false;
0:       // make sure the node exists in the real generated repository
0:       for (int i=0; i<nodes_real.getLength(); i++) {
0:         Node real_node = nodes_real.item(i);
0:         if (node.isEqualNode(real_node)) {
0:           contains = true;
0:           break;
0:         }
0:       }
0:       assertTrue("The node " + node.toString() + "should exist.", contains);
0:     }
0:   }
0:   @Test
commit:03b34d3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellerException;
/////////////////////////////////////////////////////////////////////////
0:   @Test(expected=ModellerException.class)
0:   public void testModellerException() throws Exception
0:   {
0:     //aa.jar does not exist
0:     generateOBRRepoXML(false, "aa.jar");
0:   }
1:   
commit:b3d67c6
/////////////////////////////////////////////////////////////////////////
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute(Constants.EXPORT_PACKAGE, "d.e.f").end();
1: 
0:     fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
commit:65e113c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.AppConstants;
/////////////////////////////////////////////////////////////////////////
0:     // do not provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
/////////////////////////////////////////////////////////////////////////
0:     // do not provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
/////////////////////////////////////////////////////////////////////////
0:     // do not provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
/////////////////////////////////////////////////////////////////////////
0:     // provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
/////////////////////////////////////////////////////////////////////////
0:     // provision against the local runtime
0:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
commit:d22de55
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.application.runtime.itests;
1: import static junit.framework.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.FileReader;
0: import java.io.FileWriter;
0: import java.io.InputStreamReader;
0: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import javax.xml.parsers.DocumentBuilderFactory;
1: 
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.DeploymentContent;
1: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.filesystem.IDirectory;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
1: import org.apache.aries.application.management.AriesApplicationManager;
1: import org.apache.aries.application.management.ResolverException;
1: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.modelling.ModelledResourceManager;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
1: import org.apache.aries.sample.HelloWorld;
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.apache.felix.bundlerepository.Repository;
1: import org.apache.felix.bundlerepository.RepositoryAdmin;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.w3c.dom.Document;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: import org.w3c.dom.NodeList;
0: @RunWith(JUnit4TestRunner.class)
0: public class OBRResolverAdvancedTest extends AbstractIntegrationTest 
0: {
0:   public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
0:   public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
0:   public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
0:   public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
0:   public static final String USE_BUNDLE_BY_REFERENCE = "use.bundle.by.reference";
0:   public static final String REPO_BUNDLE = "aries.bundle1";
0:   public static final String HELLO_WORLD_CLIENT_BUNDLE="hello.world.client.bundle";
0:   public static final String HELLO_WORLD_SERVICE_BUNDLE1="hello.world.service.bundle1";
0:   public static final String HELLO_WORLD_SERVICE_BUNDLE2="hello.world.service.bundle2";
1:   
0:   /* Use @Before not @BeforeClass so as to ensure that these resources
0:    * are created in the paxweb temp directory, and not in the svn tree
0:    */
0:   @Before
0:   public static void createApplications() throws Exception 
0:   {
0:     ZipFixture bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
1:     
0:     FileOutputStream fout = new FileOutputStream(CORE_BUNDLE_BY_VALUE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "p.q.r")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
0:     fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "x.y.z")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:     
0:     fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "d.e.f")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1:     
0:     fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1: 
1:     
1:     
0:     // jar up a use bundle
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, USE_BUNDLE_BY_REFERENCE)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute(Constants.EXPORT_PACKAGE, "a.b.c")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
1: 
0:     fout = new FileOutputStream(USE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0:     // Create the EBA application
0:     ZipFixture testEba = ArchiveFixture.newZip()
0:      .binary("META-INF/APPLICATION.MF",
0:         OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/APPLICATION-UseBundle.MF"))
0:         .end()
0:       .binary(CORE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(CORE_BUNDLE_BY_VALUE + ".jar")).end()
0:       .binary(TRANSITIVE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar")).end();
1: 
0:     fout = new FileOutputStream("demo.eba");
0:     testEba.writeOut(fout);
0:     fout.close();
1:     
1: 
0:     //create the bundle
0:     bundle = ArchiveFixture.newJar()
0:     .binary("META-INF/MANIFEST.MF", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/META-INF/MANIFEST.MF")).end()
0:     .binary("OSGI-INF/blueprint/blueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml")).end();
0:     fout = new FileOutputStream(REPO_BUNDLE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1:     
1: 
0:     ///////////////////////////////////////////////
0:     //create an eba with a helloworld client, which get all 'HelloWorld' services
0:     //create a helloworld client
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_CLIENT_BUNDLE)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute("Import-Package", "org.apache.aries.sample")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
0:     .binary("org/apache/aries/application/helloworld/client/HelloWorldClientImpl.class", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/application/helloworld/client/HelloWorldClientImpl.class"))
0:     .binary("OSGI-INF/blueprint/helloClient.xml", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml"))
0:     .end();
1: 
1:     
0:     fout = new FileOutputStream(HELLO_WORLD_CLIENT_BUNDLE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1:     
1:   
0:     //create two helloworld services
0:     // create the 1st helloworld service
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_SERVICE_BUNDLE1)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute("Import-Package", "org.apache.aries.sample")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
0:     .binary("org/apache/aries/sample/impl/HelloWorldImpl.class", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
0:     .binary("OSGI-INF/blueprint/sample-blueprint.xml", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
0:     .end();
1: 
0:     //create the 2nd helloworld service
0:     fout = new FileOutputStream(HELLO_WORLD_SERVICE_BUNDLE1 + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1:     
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_SERVICE_BUNDLE2)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute("Import-Package", "org.apache.aries.sample")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
0:     .binary("org/apache/aries/sample/impl/HelloWorldImpl.class", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
0:     .binary("OSGI-INF/blueprint/sample-blueprint.xml", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
0:     .end();
1: 
0:     fout = new FileOutputStream(HELLO_WORLD_SERVICE_BUNDLE2 + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
1:     
0:     //Create a helloworld eba with the client included
0:     ZipFixture multiServiceHelloEba = ArchiveFixture.newZip()
0:      .binary(HELLO_WORLD_CLIENT_BUNDLE + ".jar", new FileInputStream(HELLO_WORLD_CLIENT_BUNDLE + ".jar")).end();
1:      
0:    fout = new FileOutputStream("hello.eba");
0:    multiServiceHelloEba.writeOut(fout);
0:    fout.close();
1: 
0:   }
1: 
0:   @Test(expected=ResolverException.class)
0:   public void testDemoAppResolveFail() throws ResolverException, Exception
0:   {
0:     generateOBRRepoXML(false, TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar",  USE_BUNDLE_BY_REFERENCE+".jar");
1:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
1:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
1:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("demo.eba")));
1:     
0:     app = manager.resolve(app);
1:     
1:     
0:   }
1:   
0:   @Test
0:   public void testDemoApp() throws Exception 
0:   {
0:     generateOBRRepoXML(false, TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar", USE_BUNDLE_BY_REFERENCE+".jar");
1:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
1:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
1:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("demo.eba")));
0:     //installing requires a valid url for the bundle in repository.xml.
1:     
0:     app = manager.resolve(app);
1:     
0:     DeploymentMetadata depMeta = app.getDeploymentMetadata();
1:     
0:     List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
0:     Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
0:     Collection<Content> importPackages = depMeta.getImportPackage();
0:     assertEquals(provision.toString(), 2, provision.size());
0:     assertEquals(useBundles.toString(), 1, useBundles.size());
0:     assertEquals(importPackages.toString(), 4, importPackages.size());
1:     
0:     List<String> bundleSymbolicNames = new ArrayList<String>();
1:     
0:     for (DeploymentContent dep : provision) {
0:       bundleSymbolicNames.add(dep.getContentName());
0:     }
1:     
0:     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
0:     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
0:     bundleSymbolicNames.clear();
0:     for (DeploymentContent dep : useBundles) {
0:       bundleSymbolicNames.add(dep.getContentName());
0:     }
0:     assertTrue("Bundle " + USE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(USE_BUNDLE_BY_REFERENCE));
0:     Collection<String> packages = new ArrayList<String>();
0:     NameValueMap<String, String> maps = new NameValueMap<String, String>();
0:     maps.put("version", "0.0.0");
0:     maps.put("bundle-symbolic-name", "use.bundle.by.reference");
0:     maps.put("bundle-version", "[1.0.0,1.0.0]");
0:     Content useContent = ManifestHeaderProcessor.parseContent("a.b.c", maps);
0:     assertTrue("Use Bundle not found in import packags", importPackages.contains(useContent));
1:     
0:     for (Content c : importPackages) {
0:       packages.add(c.getContentName());
0:     }
1:     
0:     assertTrue("package javax.naming not found", packages.contains("javax.naming"));
0:     assertTrue("package p.q.r not found", packages.contains("p.q.r"));
0:     assertTrue("package x.y.z not found", packages.contains("x.y.z"));
0:     assertTrue("package a.b.c not found", packages.contains("a.b.c"));
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
1: 
0:     Set<Bundle> bundles = ctx.getApplicationContent();
1:     
0:     assertEquals("Number of bundles provisioned in the app", 5, bundles.size());
1:     
0:     ctx.stop();
0:     manager.uninstall(ctx);
1:     
0:   }
1: 
0:   /**
0:    * This test just verifies whether every entry in the MANIFEST.MF was fed into the repository generator. 
0:    * Since the IBM JRE generates a slightly different repository file from the Sun JRE as far as the order of xml elements is concerned. It is not feasible
0:    * to perform a file comparison. 
0:    * @throws Exception
0:    */
0:   @Test
0:   public void testRepo() throws Exception {
0:     generateOBRRepoXML(true, REPO_BUNDLE+".jar");
0:     //print out the repository.xml
0:     BufferedReader reader = new BufferedReader(new FileReader(new File("repository.xml")));
0:     String line;
0:     while (( line = reader.readLine()) != null) {
0:     	System.out.println(line);
0:     }
0:     // compare the generated with the expected file
0:     Document real_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("repository.xml"));    
0:     Document expected_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("/obr/aries.bundle1/expectedRepository.xml"));
0:     // parse two documents to make sure they have the same number of elements
0:     Element element_real = real_doc.getDocumentElement();
0:     Element element_expected = expected_doc.getDocumentElement();    
0:     NodeList nodes_real = element_real.getElementsByTagName("capability");
0:     NodeList nodes_expected = element_expected.getElementsByTagName("capability");
0:     assertEquals("The number of capability is not expected. ", nodes_expected.getLength(), nodes_real.getLength());    
0:     nodes_real = element_real.getElementsByTagName("require");
0:     nodes_expected = element_expected.getElementsByTagName("require");    
0:     assertEquals("The number of require elements is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
0:     nodes_real = element_real.getElementsByTagName("p");
0:     nodes_expected = element_expected.getElementsByTagName("p");    
0:     assertEquals("The number of properties is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
0:     // Let's verify all p elements are shown as expected.
0:     for (int index=0; index < nodes_expected.getLength(); index++) {
0:       Node node = nodes_expected.item(index);
0:       boolean contains = false;
0:       // make sure the node exists in the real generated repository
0:       for (int i=0; i<nodes_real.getLength(); i++) {
0:         Node real_node = nodes_real.item(i);
0:         if (node.isEqualNode(real_node)) {
0:           contains = true;
0:           break;
0:         }
0:       }
0:       assertTrue("The node " + node.toString() + "should exist.", contains);
0:     }
0:   }
1:   
0:   @Test
0:   public void testMutlipleServices() throws Exception{
0:     generateOBRRepoXML(false, HELLO_WORLD_SERVICE_BUNDLE1 + ".jar", HELLO_WORLD_SERVICE_BUNDLE2 + ".jar");
1:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
1:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
1:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
1: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("hello.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
1:     
0:     // Wait 5 seconds just to give the blueprint-managed beans a chance to come up
0:     try { 
0:     	Thread.sleep(5000);
0:     } catch (InterruptedException ix) {}
1:     
0:     HelloWorld hw = getOsgiService(HelloWorld.class);
0:     String result = hw.getMessage();
0:     assertEquals (result, "hello world");
1:     
1:     
0:     // Uncomment the block below after https://issues.apache.org/jira/browse/FELIX-2546, 
0:     // "Only one service is provisioned even when specifying for mulitple services"
0:     // is fixed. This tracks the problem of provisioning only one service even when we 
0:     // specify multiple services.
1:      
0:      /** HelloWorldManager hwm = getOsgiService(HelloWorldManager.class);
0:      * int numberOfServices = hwm.getNumOfHelloServices();
0:      * assertEquals(2, numberOfServices); 
0:      */
0:     ctx.stop();
0:     manager.uninstall(ctx);
1:    
0:   }
1: 
1: 
1: 
0:   //Test for JIRA-461 which currently fails.
0:   @Test
0:   public void testTwitter() throws Exception
0:   {
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
1: 
1:     
0:     // Use the superclasses' getUrlToEba() method instead of the pax-exam mavenBundle() method because pax-exam is running in a
0:     // diffference bundle which doesn't have visibility to the META-INF/maven/dependencies.properties file used to figure out the
0:     // version of the maven artifact.
0:     URL twitterEbaUrl = getUrlToEba("org.apache.aries.application.itest.twitter",
0:         "org.apache.aries.application.itest.twitter.eba");
0:     URL twitterCommonLangJar_url = getUrlToBundle("commons-lang", "commons-lang");
0:     URL twitterJar_url = getUrlToBundle("org.apache.aries.application", "twitter4j");
1:    
0:     // add the repository xml to the repository admin
0:     StringBuilder repositoryXML = new StringBuilder();
0:     BufferedReader reader = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("/obr/twitter/TwitterRepository.xml")));
0:     String line;
0:     while ((line = reader.readLine()) != null) {
0:       repositoryXML.append(line);
0:       repositoryXML.append("\r\n");
0:     }
0:   //replace the jar file url with the real url related to the environment
0:     String repo = repositoryXML.toString().replaceAll("commons.lang.location", twitterCommonLangJar_url.toExternalForm());
0:     repo = repo.replaceAll("twitter4j.location", twitterJar_url.toExternalForm());
1:     
0:     FileWriter writer = new FileWriter("twitterRepo.xml");
0:     writer.write(repo);
0:     writer.close();
0:     repositoryAdmin.addRepository(new File("twitterRepo.xml").toURI().toURL());
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(twitterEbaUrl);
0:     app = manager.resolve(app);
0:     DeploymentMetadata depMeta = app.getDeploymentMetadata();
0:     List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
0:     Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
0:     Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
0:     // We cannot be sure whether there are two or three provision bundles pulled in by Felix OBR as there is an outstanding defect
0:     // https://issues.apache.org/jira/browse/FELIX-2672
0:     // The workaround is to check we get the two bundles we are looking for, instead of insisting on just having two bundles.
1:     
0:     List<String> provisionBundleSymbolicNames = new ArrayList<String>();
0:     for (DeploymentContent dep : provision) {
0:        provisionBundleSymbolicNames.add(dep.getContentName());
0:     }
0:     String provision_bundle1 = "org.apache.commons.lang";
0:     String provision_bundle2 = "twitter4j";
0:     assertTrue("Bundle " + provision_bundle1 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle1));
0:     assertTrue("Bundle " + provision_bundle2 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle2));
0:     assertEquals(useBundles.toString(), 0, useBundles.size());
0:     assertEquals(appContent.toString(), 1, appContent.size());
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
0:   }
1:   
0:   private void generateOBRRepoXML(boolean nullURI, String ... bundleFiles) throws Exception
0:   {
0:     Set<ModelledResource> mrs = new HashSet<ModelledResource>();
0:     FileOutputStream fout = new FileOutputStream("repository.xml");
0:     RepositoryGenerator repositoryGenerator = getOsgiService(RepositoryGenerator.class);
0:     ModelledResourceManager modelledResourceManager = getOsgiService(ModelledResourceManager.class);
0:     for (String fileName : bundleFiles) {
0:       File bundleFile = new File(fileName);
0:       IDirectory jarDir = FileSystem.getFSRoot(bundleFile);
0:       String uri = "";
0:       if (!!!nullURI) {
0:         uri = bundleFile.toURI().toString();
0:       }
0:       mrs.add(modelledResourceManager.getModelledResource(uri, jarDir));
0:     }
0:     repositoryGenerator.generateRepository("Test repo description", mrs, fout);
0:     fout.close();
0:   }
1: 
0:   @After
0:   public void clearRepository() {
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     if ((repos != null) && (repos.length >0)) {
0:       for (Repository repo : repos) {
0:         repositoryAdmin.removeRepository(repo.getURI());
0:       }
0:     }
0:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.platform.repo"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.postresolve.process"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
0:         mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0:         /* For debugging, uncomment the next two lines  */
0:         /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
0:         waitForFrameworkStartup(),  */
1: 
0:         /* For debugging, add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:         */
1: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4db0d92
/////////////////////////////////////////////////////////////////////////
0:     .binary("OSGI-INF/blueprint/blueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml")).end()
0:     .binary("OSGI-INF/blueprint/anotherBlueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/OSGI-INF/blueprint/sample-blueprint.xml")).end();
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: 
0: import static org.apache.aries.itest.ExtraOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:     RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     HelloWorld hw = context().getService(HelloWorld.class);
/////////////////////////////////////////////////////////////////////////
0:      /** HelloWorldManager hwm = context().getService(HelloWorldManager.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryGenerator repositoryGenerator = context().getService(RepositoryGenerator.class);
0:     ModelledResourceManager modelledResourceManager = context().getService(ModelledResourceManager.class);
/////////////////////////////////////////////////////////////////////////
0:     RepositoryAdmin repositoryAdmin = context().getService(RepositoryAdmin.class);
/////////////////////////////////////////////////////////////////////////
0:     return testOptions(
0:         paxLogging("DEBUG"),
0:         
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
commit:de5b346
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     Map<String, String> maps = new HashMap<String, String>();
commit:910fec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.manifest.ContentFactory;
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
/////////////////////////////////////////////////////////////////////////
0:     Content useContent = ContentFactory.parseContent("a.b.c", maps);
commit:89f804e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.spi.repository.RepositoryGenerator;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:f7d1169
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:be6ac25
/////////////////////////////////////////////////////////////////////////
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:08cffeb
/////////////////////////////////////////////////////////////////////////
0:      * assertEquals(2, numberOfServices); 
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     // We cannot be sure whether there are two or three provision bundles pulled in by Felix OBR as there is an outstanding defect
0:     // https://issues.apache.org/jira/browse/FELIX-2672
0:     // The workaround is to check we get the two bunldes we are looking for, instead of insisting on just having two bundles.
0:     
0:     List<String> provisionBundleSymbolicNames = new ArrayList<String>();
0:     for (DeploymentContent dep : provision) {
0:        provisionBundleSymbolicNames.add(dep.getContentName());
0:     }
0:     String provision_bundle1 = "com.springsource.org.apache.commons.lang";
0:     String provision_bundle2 = "twitter4j";
0:     assertTrue("Bundle " + provision_bundle1 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle1));
0:     assertTrue("Bundle " + provision_bundle2 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle2));
commit:d3efe20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
commit:a0eca03
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.platform.repo"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.postresolve.process"),
commit:d04041b
/////////////////////////////////////////////////////////////////////////
0: import javax.xml.parsers.DocumentBuilderFactory;
0: 
/////////////////////////////////////////////////////////////////////////
0: import org.w3c.dom.Document;
0: import org.w3c.dom.Element;
0: import org.w3c.dom.Node;
0: import org.w3c.dom.NodeList;
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * This test just verifies whether every entry in the MANIFEST.MF was fed into the repository generator. 
0:    * Since the IBM JRE generates a slightly different repository file from the Sun JRE as far as the order of xml elements is concerned. It is not feasible
0:    * to perform a file comparison. 
0:    * @throws Exception
0:     //print out the repository.xml
0:     String line;
0:     while (( line = reader.readLine()) != null) {
0:     	System.out.println(line);
0:     // compare the generated with the expected file
0:     Document real_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("repository.xml"));    
0:     Document expected_doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("/obr/aries.bundle1/expectedRepository.xml"));
0:     // parse two documents to make sure they have the same number of elements
0:     Element element_real = real_doc.getDocumentElement();
0:     Element element_expected = expected_doc.getDocumentElement();    
0:     NodeList nodes_real = element_real.getElementsByTagName("capability");
0:     NodeList nodes_expected = element_expected.getElementsByTagName("capability");
0:     assertEquals("The number of capability is not expected. ", nodes_expected.getLength(), nodes_real.getLength());    
0:     nodes_real = element_real.getElementsByTagName("require");
0:     nodes_expected = element_expected.getElementsByTagName("require");    
0:     assertEquals("The number of require elements is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
0:     nodes_real = element_real.getElementsByTagName("p");
0:     nodes_expected = element_expected.getElementsByTagName("p");    
0:     assertEquals("The number of properties is not expected. ", nodes_expected.getLength(), nodes_real.getLength());
0:     // Let's verify all p elements are shown as expected.
0:     for (int index=0; index < nodes_expected.getLength(); index++) {
0:     	Node node = nodes_expected.item(index);
0:     	boolean contains = false;
0:     	// make sure the node exists in the real generated repository
0:     	for (int i=0; i<nodes_real.getLength(); i++) {
0:     		Node real_node = nodes_real.item(i);
0:     		if (node.isEqualNode(real_node)) {
0:     			contains = true;
0:     			break;
0:     		}
0:     	}
0:     	assertTrue("The node " + node.toString() + "should exist.", contains);
0:     }
/////////////////////////////////////////////////////////////////////////
0:         /* For debugging, uncomment the next two lines  */
0:         /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
0:         waitForFrameworkStartup(),  */
commit:d457c58
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         /* For debugging, uncomment the next two lines  
0:         waitForFrameworkStartup(), */ 
commit:a72f766
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:   /* MN: This test generates a new repository.xml and compares it with one we made earlier. 
0:    * The problem is, the one we made earlier used an IBM JRE, which results in the elements
0:    * of the repository.xml coming out in a completely different order to those seen on a Sun
0:    * JRE. The test needs rework if it is going to work correctly on both JREs. 
0:    */
0:   @Ignore
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         /* For debugging, uncomment the next two lines */ 
0:         waitForFrameworkStartup(), 
commit:6cde333
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         /* For debugging, uncomment the next two lines 
0:         waitForFrameworkStartup(), */
commit:d018fdd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0: import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0: 
/////////////////////////////////////////////////////////////////////////
0:     // Wait 5 seconds just to give the blueprint-managed beans a chance to come up
0:     try { 
0:     	Thread.sleep(5000);
0:     } catch (InterruptedException ix) {}
0:     
/////////////////////////////////////////////////////////////////////////
0:         vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
0: 
commit:92429ff
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.application.runtime.itests;
0: import static junit.framework.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: 
0: import java.io.BufferedReader;
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.io.FileReader;
0: import java.io.InputStreamReader;
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Set;
0: 
0: import org.apache.aries.application.Content;
0: import org.apache.aries.application.DeploymentContent;
0: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.AriesApplicationContext;
0: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.management.RepositoryGenerator;
0: import org.apache.aries.application.management.ResolverException;
0: import org.apache.aries.application.modelling.ModelledResource;
0: import org.apache.aries.application.modelling.ModelledResourceManager;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
0: import org.apache.aries.sample.HelloWorld;
0: import org.apache.aries.sample.HelloWorldManager;
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
0: import org.apache.felix.bundlerepository.Repository;
0: import org.apache.felix.bundlerepository.RepositoryAdmin;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.Constants;
0: @RunWith(JUnit4TestRunner.class)
0: public class OBRResolverAdvancedTest extends AbstractIntegrationTest 
0: {
0:   public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
0:   public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
0:   public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
0:   public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
0:   public static final String USE_BUNDLE_BY_REFERENCE = "use.bundle.by.reference";
0:   public static final String REPO_BUNDLE = "aries.bundle1";
0:   public static final String HELLO_WORLD_CLIENT_BUNDLE="hello.world.client.bundle";
0:   public static final String HELLO_WORLD_SERVICE_BUNDLE1="hello.world.service.bundle1";
0:   public static final String HELLO_WORLD_SERVICE_BUNDLE2="hello.world.service.bundle2";
0:   
0:   /* Use @Before not @BeforeClass so as to ensure that these resources
0:    * are created in the paxweb temp directory, and not in the svn tree
0:    */
0:   @Before
0:   public static void createApplications() throws Exception 
0:   {
0:     ZipFixture bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_VALUE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.IMPORT_PACKAGE, "a.b.c, p.q.r, x.y.z, javax.naming")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0: 
0:     
0:     FileOutputStream fout = new FileOutputStream(CORE_BUNDLE_BY_VALUE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_VALUE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "p.q.r")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0: 
0:     fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, TRANSITIVE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "x.y.z")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0:     
0:     fout = new FileOutputStream(TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0: 
0:     bundle = ArchiveFixture.newJar().manifest()
0:                             .attribute(Constants.BUNDLE_SYMBOLICNAME, CORE_BUNDLE_BY_REFERENCE)
0:                             .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:                             .attribute(Constants.EXPORT_PACKAGE, "d.e.f")
0:                             .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0:     
0:     fout = new FileOutputStream(CORE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0: 
0:     
0:     
0:     // jar up a use bundle
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, USE_BUNDLE_BY_REFERENCE)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute(Constants.EXPORT_PACKAGE, "a.b.c")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end();
0: 
0:     fout = new FileOutputStream(USE_BUNDLE_BY_REFERENCE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0:     // Create the EBA application
0:     ZipFixture testEba = ArchiveFixture.newZip()
0:      .binary("META-INF/APPLICATION.MF",
0:         OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/APPLICATION-UseBundle.MF"))
0:         .end()
0:       .binary(CORE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(CORE_BUNDLE_BY_VALUE + ".jar")).end()
0:       .binary(TRANSITIVE_BUNDLE_BY_VALUE + ".jar", new FileInputStream(TRANSITIVE_BUNDLE_BY_VALUE + ".jar")).end();
0: 
0:     fout = new FileOutputStream("demo.eba");
0:     testEba.writeOut(fout);
0:     fout.close();
0:     
0: 
0:     //create the bundle
0:     bundle = ArchiveFixture.newJar()
0:     .binary("META-INF/MANIFEST.MF", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/aries.bundle1/META-INF/MANIFEST.MF")).end()
0:     .binary("OSGI-INF/blueprint/blueprint.xml", OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml")).end();
0:     fout = new FileOutputStream(REPO_BUNDLE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0:     
0: 
0:     ///////////////////////////////////////////////
0:     //create an eba with a helloworld client, which get all 'HelloWorld' services
0:     //create a helloworld client
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_CLIENT_BUNDLE)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute("Import-Package", "org.apache.aries.sample")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
0:     .binary("org/apache/aries/application/helloworld/client/HelloWorldClientImpl.class", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/application/helloworld/client/HelloWorldClientImpl.class"))
0:     .binary("OSGI-INF/blueprint/helloClient.xml", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("obr/hello-world-client.xml"))
0:     .end();
0: 
0:     
0:     fout = new FileOutputStream(HELLO_WORLD_CLIENT_BUNDLE + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0:     
0:   
0:     //create two helloworld services
0:     // create the 1st helloworld service
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_SERVICE_BUNDLE1)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute("Import-Package", "org.apache.aries.sample")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
0:     .binary("org/apache/aries/sample/impl/HelloWorldImpl.class", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
0:     .binary("OSGI-INF/blueprint/sample-blueprint.xml", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
0:     .end();
0: 
0:     //create the 2nd helloworld service
0:     fout = new FileOutputStream(HELLO_WORLD_SERVICE_BUNDLE1 + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0:     
0:     bundle = ArchiveFixture.newJar().manifest()
0:     .attribute(Constants.BUNDLE_SYMBOLICNAME, HELLO_WORLD_SERVICE_BUNDLE2)
0:     .attribute(Constants.BUNDLE_MANIFESTVERSION, "2")
0:     .attribute("Import-Package", "org.apache.aries.sample")
0:     .attribute(Constants.BUNDLE_VERSION, "1.0.0").end()
0:     .binary("org/apache/aries/sample/impl/HelloWorldImpl.class", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
0:     .binary("OSGI-INF/blueprint/sample-blueprint.xml", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
0:     .end();
0: 
0:     fout = new FileOutputStream(HELLO_WORLD_SERVICE_BUNDLE2 + ".jar");
0:     bundle.writeOut(fout);
0:     fout.close();
0:     
0:     //Create a helloworld eba with the client included
0:     ZipFixture multiServiceHelloEba = ArchiveFixture.newZip()
0:      .binary(HELLO_WORLD_CLIENT_BUNDLE + ".jar", new FileInputStream(HELLO_WORLD_CLIENT_BUNDLE + ".jar")).end();
0:      
0:    fout = new FileOutputStream("hello.eba");
0:    multiServiceHelloEba.writeOut(fout);
0:    fout.close();
0: 
0:   }
0: 
0:   @Test(expected=ResolverException.class)
0:   public void testDemoAppResolveFail() throws ResolverException, Exception
0:   {
0:     startApplicationRuntimeBundle();
0: 
0:     generateOBRRepoXML(false, TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + "_0.0.0.jar",  USE_BUNDLE_BY_REFERENCE+".jar");
0:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
0:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
0: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("demo.eba")));
0:     
0:     app = manager.resolve(app);
0:     
0:     
0:   }
0:   
0:   @Test
0:   public void testDemoApp() throws Exception 
0:   {
0:     startApplicationRuntimeBundle();
0: 
0:     generateOBRRepoXML(false, TRANSITIVE_BUNDLE_BY_REFERENCE + ".jar", CORE_BUNDLE_BY_REFERENCE + ".jar", USE_BUNDLE_BY_REFERENCE+".jar");
0:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
0:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
0: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("demo.eba")));
0:     //installing requires a valid url for the bundle in repository.xml.
0:     
0:     app = manager.resolve(app);
0:     
0:     DeploymentMetadata depMeta = app.getDeploymentMetadata();
0:     
0:     List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
0:     Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
0:     Collection<Content> importPackages = depMeta.getImportPackage();
0:     assertEquals(provision.toString(), 2, provision.size());
0:     assertEquals(useBundles.toString(), 1, useBundles.size());
0:     assertEquals(importPackages.toString(), 4, importPackages.size());
0:     
0:     List<String> bundleSymbolicNames = new ArrayList<String>();
0:     
0:     for (DeploymentContent dep : provision) {
0:       bundleSymbolicNames.add(dep.getContentName());
0:     }
0:     
0:     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_REFERENCE));
0:     assertTrue("Bundle " + TRANSITIVE_BUNDLE_BY_VALUE + " not found.", bundleSymbolicNames.contains(TRANSITIVE_BUNDLE_BY_VALUE));
0:     bundleSymbolicNames.clear();
0:     for (DeploymentContent dep : useBundles) {
0:       bundleSymbolicNames.add(dep.getContentName());
0:     }
0:     assertTrue("Bundle " + USE_BUNDLE_BY_REFERENCE + " not found.", bundleSymbolicNames.contains(USE_BUNDLE_BY_REFERENCE));
0:     Collection<String> packages = new ArrayList<String>();
0:     NameValueMap<String, String> maps = new NameValueMap<String, String>();
0:     maps.put("version", "0.0.0");
0:     maps.put("bundle-symbolic-name", "use.bundle.by.reference");
0:     maps.put("bundle-version", "[1.0.0,1.0.0]");
0:     Content useContent = ManifestHeaderProcessor.parseContent("a.b.c", maps);
0:     assertTrue("Use Bundle not found in import packags", importPackages.contains(useContent));
0:     
0:     for (Content c : importPackages) {
0:       packages.add(c.getContentName());
0:     }
0:     
0:     assertTrue("package javax.naming not found", packages.contains("javax.naming"));
0:     assertTrue("package p.q.r not found", packages.contains("p.q.r"));
0:     assertTrue("package x.y.z not found", packages.contains("x.y.z"));
0:     assertTrue("package a.b.c not found", packages.contains("a.b.c"));
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
0: 
0:     Set<Bundle> bundles = ctx.getApplicationContent();
0:     
0:     assertEquals("Number of bundles provisioned in the app", 5, bundles.size());
0:     
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:     
0:   }
0: 
0:   @Test
0:   public void testRepo() throws Exception {
0:     startApplicationRuntimeBundle();
0: 
0:     generateOBRRepoXML(true, REPO_BUNDLE+".jar");
0:     
0:     // compare the generated with the expected file
0:     BufferedReader expectedFileReader = new BufferedReader(new InputStreamReader(OBRResolverAdvancedTest.class.getClassLoader().getResourceAsStream("/obr/aries.bundle1/expectedRepository.xml")));
0: 
0:     // read out the temp file
0:     BufferedReader reader = new BufferedReader(new FileReader(new File("repository.xml")));
0: 
0:     try {
0:       String tempFileline, expectedFileLine;
0:       
0:       while (((tempFileline = reader.readLine()) != null)
0:           && ((expectedFileLine = expectedFileReader.readLine()) != null)) {
0: 
0:         if (!(tempFileline.contains("lastmodified"))) {
0:           assertEquals("The result is not expected.", expectedFileLine, tempFileline);
0:         }
0: 
0:       }
0:     } finally {
0:       expectedFileReader.close();
0:       reader.close();
0:     }
0:   
0:   }
0:   
0:   @Test
0:   public void testMutlipleServices() throws Exception{
0:     startApplicationRuntimeBundle();
0:     generateOBRRepoXML(false, HELLO_WORLD_SERVICE_BUNDLE1 + ".jar", HELLO_WORLD_SERVICE_BUNDLE2 + ".jar");
0:     
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
0:     
0:     repositoryAdmin.addRepository(new File("repository.xml").toURI().toURL());
0: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("hello.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
0:     
0:     HelloWorld hw = getOsgiService(HelloWorld.class);
0:     String result = hw.getMessage();
0:     assertEquals (result, "hello world");
0:     
0:     
0:     // Uncomment the block below after https://issues.apache.org/jira/browse/FELIX-2546, 
0:     // "Only one service is provisioned even when specifying for mulitple services"
0:     // is fixed. This tracks the problem of provisioning only one service even when we 
0:     // specify multiple services.
0:     /* 
0:      * HelloWorldManager hwm = getOsgiService(HelloWorldManager.class);
0:      * int numberOfServices = hwm.getNumOfHelloServices();
0:      * assertEquals(numberOfServices, 2); 
0:      */
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:    
0:   }
0: 
0:   private void generateOBRRepoXML(boolean nullURI, String ... bundleFiles) throws Exception
0:   {
0:     Set<ModelledResource> mrs = new HashSet<ModelledResource>();
0:     FileOutputStream fout = new FileOutputStream("repository.xml");
0:     RepositoryGenerator repositoryGenerator = getOsgiService(RepositoryGenerator.class);
0:     ModelledResourceManager modelledResourceManager = getOsgiService(ModelledResourceManager.class);
0:     for (String fileName : bundleFiles) {
0:       File bundleFile = new File(fileName);
0:       IDirectory jarDir = FileSystem.getFSRoot(bundleFile);
0:       String uri = "";
0:       if (!!!nullURI) {
0:         uri = bundleFile.toURI().toString();
0:       }
0:       mrs.add(modelledResourceManager.getModelledResource(uri, jarDir));
0:     }
0:     repositoryGenerator.generateRepository("Test repo description", mrs, fout);
0:     fout.close();
0:   }
0: 
0:   @After
0:   public void clearRepository() {
0: 	  RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0: 	  Repository[] repos = repositoryAdmin.listRepositories();
0: 	  if ((repos != null) && (repos.length >0)) {
0: 		  for (Repository repo : repos) {
0: 			  repositoryAdmin.removeRepository(repo.getURI());
0: 		  }
0: 	  }
0:   }
0: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").noStart(),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
0:         mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0: 
0:         /* For debugging, uncomment the next two lines */
0:         /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
0:         waitForFrameworkStartup(),
0: */
0:         /* For debugging, add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:         */
0: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
0: }
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:c198264
/////////////////////////////////////////////////////////////////////////
0:   @Test
0:   public void testTwitter() throws Exception
0:   {
0:     RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0:     Repository[] repos = repositoryAdmin.listRepositories();
0:     for (Repository repo : repos) {
0:       repositoryAdmin.removeRepository(repo.getURI());
0:     }
0: 
0:     // Use the superclasses' getUrlToEba() method instead of the pax-exam mavenBundle() method because pax-exam is running in a
0:     // diffference bundle which doesn't have visibility to the META-INF/maven/dependencies.properties file used to figure out the
0:     // version of the maven artifact.
0:     URL twitterEbaUrl = getUrlToEba("org.apache.aries.application.itest.twitter",
0:         "org.apache.aries.application.itest.twitter.eba");
0: 
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     repositoryAdmin.addRepository("http://sigil.codecauldron.org/spring-external.obr");
0:     AriesApplication app = manager.createApplication(twitterEbaUrl);
0:     //installing requires a valid url for the bundle in repository.xml
0: 
0:     app = manager.resolve(app);
0: 
0:     DeploymentMetadata depMeta = app.getDeploymentMetadata();
0:     List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
0:     Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
0:     Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
0:     assertEquals(provision.toString(), 2, provision.size());
0:     assertEquals(useBundles.toString(), 0, useBundles.size());
0:     assertEquals(appContent.toString(), 1, appContent.size());
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
0:   }
commit:e93bff0
/////////////////////////////////////////////////////////////////////////
0: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:   //Test for JIRA-461 which currently fails.
0: //  @Test
0: //  public void testTwitter() throws Exception
0: //  {
0: //    RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
0: //    Repository[] repos = repositoryAdmin.listRepositories();
0: //    for (Repository repo : repos) {
0: //      repositoryAdmin.removeRepository(repo.getURI());
0: //    }
0: //
0: //    // Use the superclasses' getUrlToEba() method instead of the pax-exam mavenBundle() method because pax-exam is running in a
0: //    // diffference bundle which doesn't have visibility to the META-INF/maven/dependencies.properties file used to figure out the
0: //    // version of the maven artifact.
0: //    URL twitterEbaUrl = getUrlToEba("org.apache.aries.application.itest.twitter",
0: //        "org.apache.aries.application.itest.twitter.eba");
0: //
0: //    AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0: //    repositoryAdmin.addRepository("http://sigil.codecauldron.org/spring-external.obr");
0: //    AriesApplication app = manager.createApplication(twitterEbaUrl);
0: //    //installing requires a valid url for the bundle in repository.xml
0: //
0: //    app = manager.resolve(app);
0: //
0: //    DeploymentMetadata depMeta = app.getDeploymentMetadata();
0: //    List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
0: //    Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
0: //    Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
0: //    assertEquals(provision.toString(), 2, provision.size());
0: //    assertEquals(useBundles.toString(), 0, useBundles.size());
0: //    assertEquals(appContent.toString(), 1, appContent.size());
0: //    AriesApplicationContext ctx = manager.install(app);
0: //    ctx.start();
0: //  }
0:   
============================================================================