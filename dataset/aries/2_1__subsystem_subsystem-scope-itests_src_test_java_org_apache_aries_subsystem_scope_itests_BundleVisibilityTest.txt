1:de98171: package org.apache.aries.subsystem.scope.itests;
1:de98171: 
1:de98171: import static org.junit.Assert.assertEquals;
1:de98171: import static org.junit.Assert.assertFalse;
1:de98171: import static org.junit.Assert.assertNotNull;
1:de98171: import static org.junit.Assert.assertNull;
1:de98171: import static org.junit.Assert.assertTrue;
1:de98171: 
1:de98171: import java.net.URL;
1:de98171: import java.util.Arrays;
1:de98171: import java.util.Collection;
1:de98171: 
1:de98171: import org.apache.aries.subsystem.scope.InstallInfo;
1:de98171: import org.apache.aries.subsystem.scope.Scope;
1:de98171: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:de98171: import org.junit.Test;
1:de98171: import org.osgi.framework.Bundle;
1:de98171: import org.osgi.framework.ServiceReference;
1:de98171: 
1:de98171: /**
1:de98171:  * Bundles may only see other bundles within the same scope. The one exception
1:de98171:  * is the system bundle, which may be seen by all bundles regardless of scope.
1:de98171:  */
1:de98171: public class BundleVisibilityTest extends AbstractTest {
1:de98171: 	/**
1:de98171: 	 * Install a bundle into the same scope as this one. Both bundles should be
1:de98171: 	 * able to see each other.
1:de98171: 	 * @throws Exception
1:de98171: 	 */
1:de98171: 	@Test
1:de98171: 	public void test1() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:de98171: 		assertTrue(scope.getBundles().contains(bundleContext.getBundle()));
1:de98171: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1:de98171: 		String location = getBundleLocation("tb-4.jar");
1:de98171: 		assertNull(bundleContext.getBundle(location));
1:de98171: 		URL url = new URL(location);
1:de98171: 		InstallInfo installInfo = new InstallInfo(location, url.openStream());
1:de98171: 		scopeUpdate.getBundlesToInstall().add(installInfo);
1:de98171: 		scopeUpdate.commit();
1:de98171: 		Bundle bundle = bundleContext.getBundle(location);
1:de98171: 		assertTrue(scope.getBundles().contains(bundle));
1:de98171: 		bundle.start();
1:de98171: 		ServiceReference<BundleProvider> bundleProviderRef = bundleContext.getServiceReference(BundleProvider.class);
1:de98171: 		BundleProvider bundleProvider = bundleContext.getService(bundleProviderRef);
1:de98171: 		assertTrue(bundleProvider.getBundles().contains(bundleContext.getBundle()));
1:de98171: 		assertTrue(Arrays.asList(bundleContext.getBundles()).contains(bundle));
1:de98171: 		assertNotNull(bundleContext.getBundle(bundle.getBundleId()));
1:de98171: 		assertNotNull(bundleProvider.getBundle(bundle.getBundleId()));
1:de98171: 		bundleContext.ungetService(bundleProviderRef);
1:de98171: 		bundle.uninstall();
1:de98171: 	}
1:de98171: 	
1:de98171: 	/**
1:de98171: 	 * Install a bundle into a different scope than this one. Neither bundle
1:de98171: 	 * should be able to see the other.
1:de98171: 	 * @throws Exception
1:de98171: 	 */
1:de98171: 	@Test
1:de98171: 	public void test2() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:de98171: 		assertTrue(scope.getBundles().contains(bundleContext.getBundle()));
1:de98171: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1:de98171: 		ScopeUpdate child = scopeUpdate.newChild("tb4");
1:de98171: 		scopeUpdate.getChildren().add(child);
1:de98171: 		String location = getBundleLocation("tb-4.jar");
1:de98171: 		assertNull(bundleContext.getBundle(location));
1:de98171: 		URL url = new URL(location);
1:de98171: 		InstallInfo installInfo = new InstallInfo(location, url.openStream());
1:de98171: 		child.getBundlesToInstall().add(installInfo);
1:de98171: 		addPackageImportPolicy("org.osgi.framework", child);
1:de98171: 		addPackageImportPolicy("org.apache.aries.subsystem.scope", child);
1:de98171: 		addPackageImportPolicy("org.apache.aries.subsystem.scope.itests", child);
1:de98171: 		addServiceExportPolicy(BundleProvider.class, child);
1:de98171: 		scopeUpdate.commit();
1:de98171: 		Bundle bundle = bundleContext.getBundle(location);
1:de98171: 		assertNotNull(bundle);
1:de98171: 		Collection<Scope> childScopes = scope.getChildren();
1:de98171: 		assertEquals(1, childScopes.size());
1:de98171: 		assertTrue(childScopes.iterator().next().getBundles().contains(bundle));
1:de98171: 		bundle.start();
1:de98171: 		ServiceReference<BundleProvider> bundleProviderRef = bundleContext.getServiceReference(BundleProvider.class);
1:de98171: 		BundleProvider bundleProvider = bundleContext.getService(bundleProviderRef);
1:de98171: 		assertFalse(Arrays.asList(bundleContext.getBundles()).contains(bundle));
1:de98171: 		assertNull(bundleContext.getBundle(bundle.getBundleId()));
1:de98171: 		assertFalse(bundleProvider.getBundles().contains(bundleContext.getBundle()));
1:de98171: 		assertNull(bundleProvider.getBundle(bundleContext.getBundle().getBundleId()));
1:de98171: 		bundleContext.ungetService(bundleProviderRef);
1:de98171: 		bundle.uninstall();
1:de98171: 	}
1:de98171: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5bdb2b8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: 		Scope scope = getScope();
/////////////////////////////////////////////////////////////////////////
1: 		Scope scope = getScope();
commit:de98171
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URL;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.aries.subsystem.scope.InstallInfo;
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceReference;
1: 
1: /**
1:  * Bundles may only see other bundles within the same scope. The one exception
1:  * is the system bundle, which may be seen by all bundles regardless of scope.
1:  */
0: @RunWith(JUnit4TestRunner.class)
1: public class BundleVisibilityTest extends AbstractTest {
1: 	/**
1: 	 * Install a bundle into the same scope as this one. Both bundles should be
1: 	 * able to see each other.
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test1() throws Exception {
1: 		assertTrue(scope.getBundles().contains(bundleContext.getBundle()));
1: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1: 		String location = getBundleLocation("tb-4.jar");
1: 		assertNull(bundleContext.getBundle(location));
1: 		URL url = new URL(location);
1: 		InstallInfo installInfo = new InstallInfo(location, url.openStream());
1: 		scopeUpdate.getBundlesToInstall().add(installInfo);
1: 		scopeUpdate.commit();
1: 		Bundle bundle = bundleContext.getBundle(location);
1: 		assertTrue(scope.getBundles().contains(bundle));
1: 		bundle.start();
1: 		ServiceReference<BundleProvider> bundleProviderRef = bundleContext.getServiceReference(BundleProvider.class);
1: 		BundleProvider bundleProvider = bundleContext.getService(bundleProviderRef);
1: 		assertTrue(bundleProvider.getBundles().contains(bundleContext.getBundle()));
1: 		assertTrue(Arrays.asList(bundleContext.getBundles()).contains(bundle));
1: 		assertNotNull(bundleContext.getBundle(bundle.getBundleId()));
1: 		assertNotNull(bundleProvider.getBundle(bundle.getBundleId()));
1: 		bundleContext.ungetService(bundleProviderRef);
1: 		bundle.uninstall();
1: 	}
1: 	
1: 	/**
1: 	 * Install a bundle into a different scope than this one. Neither bundle
1: 	 * should be able to see the other.
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test2() throws Exception {
1: 		assertTrue(scope.getBundles().contains(bundleContext.getBundle()));
1: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1: 		ScopeUpdate child = scopeUpdate.newChild("tb4");
1: 		scopeUpdate.getChildren().add(child);
1: 		String location = getBundleLocation("tb-4.jar");
1: 		assertNull(bundleContext.getBundle(location));
1: 		URL url = new URL(location);
1: 		InstallInfo installInfo = new InstallInfo(location, url.openStream());
1: 		child.getBundlesToInstall().add(installInfo);
1: 		addPackageImportPolicy("org.osgi.framework", child);
1: 		addPackageImportPolicy("org.apache.aries.subsystem.scope", child);
1: 		addPackageImportPolicy("org.apache.aries.subsystem.scope.itests", child);
1: 		addServiceExportPolicy(BundleProvider.class, child);
1: 		scopeUpdate.commit();
1: 		Bundle bundle = bundleContext.getBundle(location);
1: 		assertNotNull(bundle);
1: 		Collection<Scope> childScopes = scope.getChildren();
1: 		assertEquals(1, childScopes.size());
1: 		assertTrue(childScopes.iterator().next().getBundles().contains(bundle));
1: 		bundle.start();
1: 		ServiceReference<BundleProvider> bundleProviderRef = bundleContext.getServiceReference(BundleProvider.class);
1: 		BundleProvider bundleProvider = bundleContext.getService(bundleProviderRef);
1: 		assertFalse(Arrays.asList(bundleContext.getBundles()).contains(bundle));
1: 		assertNull(bundleContext.getBundle(bundle.getBundleId()));
1: 		assertFalse(bundleProvider.getBundles().contains(bundleContext.getBundle()));
1: 		assertNull(bundleProvider.getBundle(bundleContext.getBundle().getBundleId()));
1: 		bundleContext.ungetService(bundleProviderRef);
1: 		bundle.uninstall();
1: 	}
1: }
============================================================================