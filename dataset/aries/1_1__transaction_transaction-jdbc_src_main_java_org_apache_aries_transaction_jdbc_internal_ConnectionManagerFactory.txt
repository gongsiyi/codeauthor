1:db3b209: /*
1:db3b209:  * Licensed to the Apache Software Foundation (ASF) under one
1:db3b209:  * or more contributor license agreements.  See the NOTICE file
1:db3b209:  * distributed with this work for additional information
1:db3b209:  * regarding copyright ownership.  The ASF licenses this file
1:db3b209:  * to you under the Apache License, Version 2.0 (the
1:db3b209:  * "License"); you may not use this file except in compliance
1:db3b209:  * with the License.  You may obtain a copy of the License at
1:db3b209:  *
1:db3b209:  *   http://www.apache.org/licenses/LICENSE-2.0
1:db3b209:  *
1:db3b209:  * Unless required by applicable law or agreed to in writing,
1:db3b209:  * software distributed under the License is distributed on an
1:db3b209:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:db3b209:  * KIND, either express or implied.  See the License for the
1:db3b209:  * specific language governing permissions and limitations
1:db3b209:  * under the License.
1:db3b209:  */
1:db3b209: package org.apache.aries.transaction.jdbc.internal;
1:db3b209: 
1:db3b209: import org.apache.aries.transaction.AriesTransactionManager;
1:db3b209: import org.apache.geronimo.connector.outbound.GenericConnectionManager;
1:db3b209: import org.apache.geronimo.connector.outbound.SubjectSource;
1:db3b209: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.LocalTransactions;
1:db3b209: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.NoPool;
1:db3b209: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.NoTransactions;
1:db3b209: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.PartitionedPool;
1:db3b209: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.PoolingSupport;
1:db3b209: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.SinglePool;
1:db3b209: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.TransactionSupport;
1:db3b209: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.XATransactions;
1:db3b209: import org.apache.geronimo.connector.outbound.connectiontracking.ConnectionTrackingCoordinator;
1:db3b209: import org.apache.geronimo.connector.outbound.connectiontracking.GeronimoTransactionListener;
1:db3b209: import org.apache.geronimo.transaction.manager.TransactionManagerMonitor;
1:48ad380: import org.tranql.connector.UserPasswordManagedConnectionFactory;
1:db3b209: 
1:db3b209: import javax.resource.spi.ConnectionManager;
1:db3b209: import javax.resource.spi.ManagedConnectionFactory;
1:db3b209: 
1:db3b209: public class ConnectionManagerFactory {
1:db3b209: 
1:db3b209:     private AriesTransactionManager transactionManager;
1:db3b209:     private ManagedConnectionFactory managedConnectionFactory;
1:db3b209: 
1:8a65caa:     private String name;
1:8a65caa: 
1:db3b209:     private TransactionSupport transactionSupport;
1:db3b209:     private String transaction;
1:db3b209: 
1:db3b209:     private PoolingSupport poolingSupport;
1:db3b209:     private boolean pooling = true;
1:db3b209:     private String partitionStrategy; //: none, by-subject, by-connector-properties
1:db3b209:     private int poolMaxSize = 10;
1:db3b209:     private int poolMinSize = 0;
1:db3b209:     private boolean allConnectionsEqual = true;
1:db3b209:     private int connectionMaxWaitMilliseconds = 5000;
1:db3b209:     private int connectionMaxIdleMinutes = 15;
1:db3b209: 
1:48ad380:     private boolean validateOnMatch = true;
1:48ad380:     private boolean backgroundValidation = false;
1:48ad380:     private int backgroundValidationMilliseconds = 600000;
1:48ad380: 
1:db3b209:     private SubjectSource subjectSource;
1:db3b209: 
1:db3b209:     private ConnectionTrackingCoordinator connectionTracker;
1:db3b209:     private TransactionManagerMonitor transactionManagerMonitor;
1:db3b209:     private GenericConnectionManager connectionManager;
1:db3b209: 
1:db3b209:     public ConnectionManager getConnectionManager() {
1:db3b209:         return connectionManager;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void init() throws Exception {
1:94c60fb:         if (transactionManager == null && ("xa".equals(transaction) || "local".equals(transaction))) {
1:db3b209:             throw new IllegalArgumentException("transactionManager must be set");
1:db3b209:         }
1:db3b209:         if (managedConnectionFactory == null) {
1:db3b209:             throw new IllegalArgumentException("managedConnectionFactory must be set");
1:db3b209:         }
1:db3b209:         // Apply the default value for property if necessary
1:db3b209:         if (transactionSupport == null) {
1:db3b209:             // No transaction
1:9e6b429:             if ("local".equalsIgnoreCase(transaction)) {
1:db3b209:                 transactionSupport = LocalTransactions.INSTANCE;
1:db3b209:             } else if ("none".equalsIgnoreCase(transaction)) {
1:db3b209:                 transactionSupport = NoTransactions.INSTANCE;
1:db3b209:             } else if ("xa".equalsIgnoreCase(transaction)) {
1:db3b209:                 transactionSupport = new XATransactions(true, false);
1:db3b209:             } else {
1:db3b209:                 throw new IllegalArgumentException("Unknown transaction type " + transaction + " (must be local, none or xa)");
1:db3b209:             }
1:db3b209:         }
1:db3b209:         if (poolingSupport == null) {
1:db3b209:             // No pool
1:db3b209:             if (!pooling) {
1:db3b209:                 poolingSupport = new NoPool();
1:db3b209:             } else {
1:db3b209:                 if (partitionStrategy == null || "none".equalsIgnoreCase(partitionStrategy)) {
1:db3b209: 
1:db3b209:                     // unpartitioned pool
1:db3b209:                     poolingSupport = new SinglePool(poolMaxSize,
1:db3b209:                             poolMinSize,
1:db3b209:                             connectionMaxWaitMilliseconds,
1:db3b209:                             connectionMaxIdleMinutes,
1:db3b209:                             allConnectionsEqual,
1:db3b209:                             !allConnectionsEqual,
1:db3b209:                             false);
1:db3b209: 
1:db3b209:                 } else if ("by-connector-properties".equalsIgnoreCase(partitionStrategy)) {
1:db3b209: 
1:db3b209:                     // partition by connector properties such as username and password on a jdbc connection
1:db3b209:                     poolingSupport = new PartitionedPool(poolMaxSize,
1:db3b209:                             poolMinSize,
1:db3b209:                             connectionMaxWaitMilliseconds,
1:db3b209:                             connectionMaxIdleMinutes,
1:db3b209:                             allConnectionsEqual,
1:db3b209:                             !allConnectionsEqual,
1:db3b209:                             false,
1:db3b209:                             true,
1:db3b209:                             false);
1:db3b209:                 } else if ("by-subject".equalsIgnoreCase(partitionStrategy)) {
1:db3b209: 
1:db3b209:                     // partition by caller subject
1:db3b209:                     poolingSupport = new PartitionedPool(poolMaxSize,
1:db3b209:                             poolMinSize,
1:db3b209:                             connectionMaxWaitMilliseconds,
1:db3b209:                             connectionMaxIdleMinutes,
1:db3b209:                             allConnectionsEqual,
1:db3b209:                             !allConnectionsEqual,
1:db3b209:                             false,
1:db3b209:                             false,
1:db3b209:                             true);
1:db3b209:                 } else {
1:db3b209:                     throw new IllegalArgumentException("Unknown partition strategy " + partitionStrategy + " (must be none, by-connector-properties or by-subject)");
1:db3b209:                 }
1:db3b209:             }
1:db3b209:         }
1:db3b209:         if (connectionTracker == null) {
1:db3b209:             connectionTracker = new ConnectionTrackingCoordinator();
1:db3b209:         }
1:94c60fb:         if (transactionManagerMonitor == null && transactionManager != null) {
1:db3b209:             transactionManagerMonitor = new GeronimoTransactionListener(connectionTracker);
1:db3b209:             transactionManager.addTransactionAssociationListener(transactionManagerMonitor);
1:db3b209:         }
1:db3b209:         if (connectionManager == null) {
1:48ad380:             if (validateOnMatch || backgroundValidation) {
1:48ad380:                 // Wrap the original ManagedConnectionFactory to add validation capability
1:48ad380:                 managedConnectionFactory = new ValidatingDelegatingManagedConnectionFactory((UserPasswordManagedConnectionFactory) managedConnectionFactory);
1:48ad380:             }
1:48ad380:             if (backgroundValidation) {
1:48ad380:                 // Instantiate the Validating Connection Manager
1:48ad380:                 connectionManager = new ValidatingGenericConnectionManager(
1:48ad380:                         transactionSupport,
1:48ad380:                         poolingSupport,
1:48ad380:                         subjectSource,
1:48ad380:                         connectionTracker,
1:48ad380:                         transactionManager,
1:48ad380:                         managedConnectionFactory,
1:8a65caa:                         name != null ? name : getClass().getName(),
1:48ad380:                         getClass().getClassLoader(),
1:48ad380:                         backgroundValidationMilliseconds);
1:48ad380:             } else {
1:48ad380:                 // Instantiate the Geronimo Connection Manager
1:48ad380:                 connectionManager = new GenericConnectionManager(
1:48ad380:                         transactionSupport,
1:48ad380:                         poolingSupport,
1:48ad380:                         subjectSource,
1:48ad380:                         connectionTracker,
1:48ad380:                         transactionManager,
1:48ad380:                         managedConnectionFactory,
1:8a65caa:                         name != null ? name : getClass().getName(),
1:48ad380:                         getClass().getClassLoader());
1:48ad380:             }
1:db3b209: 
1:db3b209:             connectionManager.doStart();
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void destroy() throws Exception {
1:db3b209:         if (connectionManager != null) {
1:db3b209:             connectionManager.doStop();
1:db3b209:             connectionManager = null;
1:db3b209:         }
1:db3b209:         if (transactionManagerMonitor != null && transactionManager != null) {
1:db3b209:             transactionManager.removeTransactionAssociationListener(transactionManagerMonitor);
1:db3b209:         }
1:db3b209:     }
1:db3b209: 
1:db3b209:     public AriesTransactionManager getTransactionManager() {
1:db3b209:         return transactionManager;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setTransactionManager(AriesTransactionManager transactionManager) {
1:db3b209:         this.transactionManager = transactionManager;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public ManagedConnectionFactory getManagedConnectionFactory() {
1:db3b209:         return managedConnectionFactory;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setManagedConnectionFactory(ManagedConnectionFactory managedConnectionFactory) {
1:db3b209:         this.managedConnectionFactory = managedConnectionFactory;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public TransactionSupport getTransactionSupport() {
1:db3b209:         return transactionSupport;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setTransactionSupport(TransactionSupport transactionSupport) {
1:db3b209:         this.transactionSupport = transactionSupport;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public String getTransaction() {
1:db3b209:         return transaction;
1:db3b209:     }
1:db3b209: 
1:8a65caa:     public String getName() {
1:8a65caa:         return name;
1:8a65caa:     }
1:8a65caa: 
1:8a65caa:     public void setName(String name) {
1:8a65caa:         this.name = name;
1:8a65caa:     }
1:8a65caa: 
1:db3b209:     public void setTransaction(String transaction) {
1:db3b209:         this.transaction = transaction;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public PoolingSupport getPoolingSupport() {
1:db3b209:         return poolingSupport;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setPoolingSupport(PoolingSupport poolingSupport) {
1:db3b209:         this.poolingSupport = poolingSupport;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public boolean isPooling() {
1:db3b209:         return pooling;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setPooling(boolean pooling) {
1:db3b209:         this.pooling = pooling;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public String getPartitionStrategy() {
1:db3b209:         return partitionStrategy;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setPartitionStrategy(String partitionStrategy) {
1:db3b209:         this.partitionStrategy = partitionStrategy;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public int getPoolMaxSize() {
1:db3b209:         return poolMaxSize;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setPoolMaxSize(int poolMaxSize) {
1:db3b209:         this.poolMaxSize = poolMaxSize;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public int getPoolMinSize() {
1:db3b209:         return poolMinSize;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setPoolMinSize(int poolMinSize) {
1:db3b209:         this.poolMinSize = poolMinSize;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public boolean isAllConnectionsEqual() {
1:db3b209:         return allConnectionsEqual;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setAllConnectionsEqual(boolean allConnectionsEqual) {
1:db3b209:         this.allConnectionsEqual = allConnectionsEqual;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public int getConnectionMaxWaitMilliseconds() {
1:db3b209:         return connectionMaxWaitMilliseconds;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setConnectionMaxWaitMilliseconds(int connectionMaxWaitMilliseconds) {
1:db3b209:         this.connectionMaxWaitMilliseconds = connectionMaxWaitMilliseconds;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public int getConnectionMaxIdleMinutes() {
1:db3b209:         return connectionMaxIdleMinutes;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setConnectionMaxIdleMinutes(int connectionMaxIdleMinutes) {
1:db3b209:         this.connectionMaxIdleMinutes = connectionMaxIdleMinutes;
1:db3b209:     }
1:db3b209: 
1:48ad380:     public boolean isValidateOnMatch() {
1:48ad380:         return validateOnMatch;
1:48ad380:     }
1:48ad380: 
1:48ad380:     public void setValidateOnMatch(boolean validateOnMatch) {
1:48ad380:         this.validateOnMatch = validateOnMatch;
1:48ad380:     }
1:48ad380: 
1:48ad380:     public boolean isBackgroundValidation() {
1:48ad380:         return backgroundValidation;
1:48ad380:     }
1:48ad380: 
1:48ad380:     public void setBackgroundValidation(boolean backgroundValidation) {
1:48ad380:         this.backgroundValidation = backgroundValidation;
1:48ad380:     }
1:48ad380: 
1:48ad380:     public int getBackgroundValidationMilliseconds() {
1:48ad380:         return backgroundValidationMilliseconds;
1:48ad380:     }
1:48ad380: 
1:48ad380:     public void setBackgroundValidationMilliseconds(int backgroundValidationMilliseconds) {
1:48ad380:         this.backgroundValidationMilliseconds = backgroundValidationMilliseconds;
1:48ad380:     }
1:48ad380: 
1:db3b209:     public SubjectSource getSubjectSource() {
1:db3b209:         return subjectSource;
1:db3b209:     }
1:db3b209: 
1:db3b209:     public void setSubjectSource(SubjectSource subjectSource) {
1:db3b209:         this.subjectSource = subjectSource;
1:db3b209:     }
1:db3b209: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:9e6b429
/////////////////////////////////////////////////////////////////////////
1:             if ("local".equalsIgnoreCase(transaction)) {
commit:94c60fb
/////////////////////////////////////////////////////////////////////////
1:         if (transactionManager == null && ("xa".equals(transaction) || "local".equals(transaction))) {
/////////////////////////////////////////////////////////////////////////
1:         if (transactionManagerMonitor == null && transactionManager != null) {
commit:8a65caa
/////////////////////////////////////////////////////////////////////////
1:     private String name;
1: 
/////////////////////////////////////////////////////////////////////////
1:                         name != null ? name : getClass().getName(),
/////////////////////////////////////////////////////////////////////////
1:                         name != null ? name : getClass().getName(),
/////////////////////////////////////////////////////////////////////////
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
commit:48ad380
/////////////////////////////////////////////////////////////////////////
1: import org.tranql.connector.UserPasswordManagedConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     private boolean validateOnMatch = true;
1:     private boolean backgroundValidation = false;
1:     private int backgroundValidationMilliseconds = 600000;
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (validateOnMatch || backgroundValidation) {
1:                 // Wrap the original ManagedConnectionFactory to add validation capability
1:                 managedConnectionFactory = new ValidatingDelegatingManagedConnectionFactory((UserPasswordManagedConnectionFactory) managedConnectionFactory);
1:             }
1:             if (backgroundValidation) {
1:                 // Instantiate the Validating Connection Manager
1:                 connectionManager = new ValidatingGenericConnectionManager(
1:                         transactionSupport,
1:                         poolingSupport,
1:                         subjectSource,
1:                         connectionTracker,
1:                         transactionManager,
1:                         managedConnectionFactory,
0:                         getClass().getName(),
1:                         getClass().getClassLoader(),
1:                         backgroundValidationMilliseconds);
1:             } else {
1:                 // Instantiate the Geronimo Connection Manager
1:                 connectionManager = new GenericConnectionManager(
1:                         transactionSupport,
1:                         poolingSupport,
1:                         subjectSource,
1:                         connectionTracker,
1:                         transactionManager,
1:                         managedConnectionFactory,
0:                         getClass().getName(),
1:                         getClass().getClassLoader());
1:             }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidateOnMatch() {
1:         return validateOnMatch;
1:     }
1: 
1:     public void setValidateOnMatch(boolean validateOnMatch) {
1:         this.validateOnMatch = validateOnMatch;
1:     }
1: 
1:     public boolean isBackgroundValidation() {
1:         return backgroundValidation;
1:     }
1: 
1:     public void setBackgroundValidation(boolean backgroundValidation) {
1:         this.backgroundValidation = backgroundValidation;
1:     }
1: 
1:     public int getBackgroundValidationMilliseconds() {
1:         return backgroundValidationMilliseconds;
1:     }
1: 
1:     public void setBackgroundValidationMilliseconds(int backgroundValidationMilliseconds) {
1:         this.backgroundValidationMilliseconds = backgroundValidationMilliseconds;
1:     }
1: 
commit:db3b209
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc.internal;
1: 
1: import org.apache.aries.transaction.AriesTransactionManager;
1: import org.apache.geronimo.connector.outbound.GenericConnectionManager;
1: import org.apache.geronimo.connector.outbound.SubjectSource;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.LocalTransactions;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.NoPool;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.NoTransactions;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.PartitionedPool;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.PoolingSupport;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.SinglePool;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.TransactionSupport;
1: import org.apache.geronimo.connector.outbound.connectionmanagerconfig.XATransactions;
1: import org.apache.geronimo.connector.outbound.connectiontracking.ConnectionTrackingCoordinator;
1: import org.apache.geronimo.connector.outbound.connectiontracking.GeronimoTransactionListener;
1: import org.apache.geronimo.transaction.manager.TransactionManagerMonitor;
1: 
1: import javax.resource.spi.ConnectionManager;
1: import javax.resource.spi.ManagedConnectionFactory;
1: 
1: public class ConnectionManagerFactory {
1: 
1:     private AriesTransactionManager transactionManager;
1:     private ManagedConnectionFactory managedConnectionFactory;
1: 
1:     private TransactionSupport transactionSupport;
1:     private String transaction;
1: 
1:     private PoolingSupport poolingSupport;
1:     private boolean pooling = true;
1:     private String partitionStrategy; //: none, by-subject, by-connector-properties
1:     private int poolMaxSize = 10;
1:     private int poolMinSize = 0;
1:     private boolean allConnectionsEqual = true;
1:     private int connectionMaxWaitMilliseconds = 5000;
1:     private int connectionMaxIdleMinutes = 15;
1: 
1:     private SubjectSource subjectSource;
1: 
1:     private ConnectionTrackingCoordinator connectionTracker;
1:     private TransactionManagerMonitor transactionManagerMonitor;
1:     private GenericConnectionManager connectionManager;
1: 
1:     public ConnectionManager getConnectionManager() {
1:         return connectionManager;
1:     }
1: 
1:     public void init() throws Exception {
0:         if (transactionManager == null) {
1:             throw new IllegalArgumentException("transactionManager must be set");
1:         }
1:         if (managedConnectionFactory == null) {
1:             throw new IllegalArgumentException("managedConnectionFactory must be set");
1:         }
1:         // Apply the default value for property if necessary
1:         if (transactionSupport == null) {
1:             // No transaction
0:             if (transaction == null || "local".equalsIgnoreCase(transaction)) {
1:                 transactionSupport = LocalTransactions.INSTANCE;
1:             } else if ("none".equalsIgnoreCase(transaction)) {
1:                 transactionSupport = NoTransactions.INSTANCE;
1:             } else if ("xa".equalsIgnoreCase(transaction)) {
1:                 transactionSupport = new XATransactions(true, false);
1:             } else {
1:                 throw new IllegalArgumentException("Unknown transaction type " + transaction + " (must be local, none or xa)");
1:             }
1:         }
1:         if (poolingSupport == null) {
1:             // No pool
1:             if (!pooling) {
1:                 poolingSupport = new NoPool();
1:             } else {
1:                 if (partitionStrategy == null || "none".equalsIgnoreCase(partitionStrategy)) {
1: 
1:                     // unpartitioned pool
1:                     poolingSupport = new SinglePool(poolMaxSize,
1:                             poolMinSize,
1:                             connectionMaxWaitMilliseconds,
1:                             connectionMaxIdleMinutes,
1:                             allConnectionsEqual,
1:                             !allConnectionsEqual,
1:                             false);
1: 
1:                 } else if ("by-connector-properties".equalsIgnoreCase(partitionStrategy)) {
1: 
1:                     // partition by connector properties such as username and password on a jdbc connection
1:                     poolingSupport = new PartitionedPool(poolMaxSize,
1:                             poolMinSize,
1:                             connectionMaxWaitMilliseconds,
1:                             connectionMaxIdleMinutes,
1:                             allConnectionsEqual,
1:                             !allConnectionsEqual,
1:                             false,
1:                             true,
1:                             false);
1:                 } else if ("by-subject".equalsIgnoreCase(partitionStrategy)) {
1: 
1:                     // partition by caller subject
1:                     poolingSupport = new PartitionedPool(poolMaxSize,
1:                             poolMinSize,
1:                             connectionMaxWaitMilliseconds,
1:                             connectionMaxIdleMinutes,
1:                             allConnectionsEqual,
1:                             !allConnectionsEqual,
1:                             false,
1:                             false,
1:                             true);
1:                 } else {
1:                     throw new IllegalArgumentException("Unknown partition strategy " + partitionStrategy + " (must be none, by-connector-properties or by-subject)");
1:                 }
1:             }
1:         }
1:         if (connectionTracker == null) {
1:             connectionTracker = new ConnectionTrackingCoordinator();
1:         }
0:         if (transactionManagerMonitor == null) {
1:             transactionManagerMonitor = new GeronimoTransactionListener(connectionTracker);
1:             transactionManager.addTransactionAssociationListener(transactionManagerMonitor);
1:         }
1:         if (connectionManager == null) {
0:             // Instantiate the Geronimo Connection Manager
0:             connectionManager = new GenericConnectionManager(
0:                     transactionSupport,
0:                     poolingSupport,
0:                     subjectSource,
0:                     connectionTracker,
0:                     transactionManager,
0:                     managedConnectionFactory,
0:                     getClass().getName(),
0:                     getClass().getClassLoader());
1: 
1:             connectionManager.doStart();
1:         }
1:     }
1: 
1:     public void destroy() throws Exception {
1:         if (connectionManager != null) {
1:             connectionManager.doStop();
1:             connectionManager = null;
1:         }
1:         if (transactionManagerMonitor != null && transactionManager != null) {
1:             transactionManager.removeTransactionAssociationListener(transactionManagerMonitor);
1:         }
1:     }
1: 
1:     public AriesTransactionManager getTransactionManager() {
1:         return transactionManager;
1:     }
1: 
1:     public void setTransactionManager(AriesTransactionManager transactionManager) {
1:         this.transactionManager = transactionManager;
1:     }
1: 
1:     public ManagedConnectionFactory getManagedConnectionFactory() {
1:         return managedConnectionFactory;
1:     }
1: 
1:     public void setManagedConnectionFactory(ManagedConnectionFactory managedConnectionFactory) {
1:         this.managedConnectionFactory = managedConnectionFactory;
1:     }
1: 
1:     public TransactionSupport getTransactionSupport() {
1:         return transactionSupport;
1:     }
1: 
1:     public void setTransactionSupport(TransactionSupport transactionSupport) {
1:         this.transactionSupport = transactionSupport;
1:     }
1: 
1:     public String getTransaction() {
1:         return transaction;
1:     }
1: 
1:     public void setTransaction(String transaction) {
1:         this.transaction = transaction;
1:     }
1: 
1:     public PoolingSupport getPoolingSupport() {
1:         return poolingSupport;
1:     }
1: 
1:     public void setPoolingSupport(PoolingSupport poolingSupport) {
1:         this.poolingSupport = poolingSupport;
1:     }
1: 
1:     public boolean isPooling() {
1:         return pooling;
1:     }
1: 
1:     public void setPooling(boolean pooling) {
1:         this.pooling = pooling;
1:     }
1: 
1:     public String getPartitionStrategy() {
1:         return partitionStrategy;
1:     }
1: 
1:     public void setPartitionStrategy(String partitionStrategy) {
1:         this.partitionStrategy = partitionStrategy;
1:     }
1: 
1:     public int getPoolMaxSize() {
1:         return poolMaxSize;
1:     }
1: 
1:     public void setPoolMaxSize(int poolMaxSize) {
1:         this.poolMaxSize = poolMaxSize;
1:     }
1: 
1:     public int getPoolMinSize() {
1:         return poolMinSize;
1:     }
1: 
1:     public void setPoolMinSize(int poolMinSize) {
1:         this.poolMinSize = poolMinSize;
1:     }
1: 
1:     public boolean isAllConnectionsEqual() {
1:         return allConnectionsEqual;
1:     }
1: 
1:     public void setAllConnectionsEqual(boolean allConnectionsEqual) {
1:         this.allConnectionsEqual = allConnectionsEqual;
1:     }
1: 
1:     public int getConnectionMaxWaitMilliseconds() {
1:         return connectionMaxWaitMilliseconds;
1:     }
1: 
1:     public void setConnectionMaxWaitMilliseconds(int connectionMaxWaitMilliseconds) {
1:         this.connectionMaxWaitMilliseconds = connectionMaxWaitMilliseconds;
1:     }
1: 
1:     public int getConnectionMaxIdleMinutes() {
1:         return connectionMaxIdleMinutes;
1:     }
1: 
1:     public void setConnectionMaxIdleMinutes(int connectionMaxIdleMinutes) {
1:         this.connectionMaxIdleMinutes = connectionMaxIdleMinutes;
1:     }
1: 
1:     public SubjectSource getSubjectSource() {
1:         return subjectSource;
1:     }
1: 
1:     public void setSubjectSource(SubjectSource subjectSource) {
1:         this.subjectSource = subjectSource;
1:     }
1: }
============================================================================