1:5c15102: /*
1:5c15102:  * Licensed to the Apache Software Foundation (ASF) under one
1:5c15102:  * or more contributor license agreements.  See the NOTICE file
1:5c15102:  * distributed with this work for additional information
1:5c15102:  * regarding copyright ownership.  The ASF licenses this file
1:5c15102:  * to you under the Apache License, Version 2.0 (the
1:5c15102:  * "License"); you may not use this file except in compliance
1:5c15102:  * with the License.  You may obtain a copy of the License at
1:5c15102:  *
1:5c15102:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5c15102:  *
1:5c15102:  * Unless required by applicable law or agreed to in writing,
1:5c15102:  * software distributed under the License is distributed on an
1:5c15102:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5c15102:  * KIND, either express or implied.  See the License for the
1:5c15102:  * specific language governing permissions and limitations
1:5c15102:  * under the License.
1:5c15102:  */
1:5c15102: package org.apache.aries.transaction.test.impl;
28:5c15102: 
1:5c15102: import java.sql.SQLException;
1:5c15102: 
1:5c15102: import org.apache.aries.transaction.test.TestBean;
1:5c15102: 
1:5c15102: public class TestBeanImpl implements TestBean {
1:a44e725:     private Connector connector;
1:5c15102:     private TestBean bean;
1:a44e725: 
1:2ad9527:     @Override
1:5c15102:     public void insertRow(String name, int value, Exception e) throws SQLException {
1:bd98451:         connector.insertRow(name, value);
1:bd98451:         if (e instanceof SQLException) { 
1:5c15102:             throw (SQLException) e;
1:bd98451:         } else if (e instanceof RuntimeException) {
1:5c15102:             throw (RuntimeException) e;
2:70e39b6:         }
1:bd98451:     }
1:70e39b6: 
1:2ad9527:     @Override
1:a44e725:     public void delegateInsertRow(String name, int value) throws SQLException {
1:bd98451:         bean.insertRow(name, value, null);
1:a44e725:     }
1:70e39b6: 
1:2ad9527:     @Override
1:5c15102:     public void throwApplicationException() throws SQLException {
1:5c15102:         throw new SQLException("Test exception");
1:a44e725:     }
1:5c15102: 
1:2ad9527:     @Override
1:5c15102:     public void throwRuntimeException() {
1:2ad9527:         throw new RuntimeException("Test exception"); // NOSONAR
1:70e39b6:     }
1:5c15102: 
1:5c15102:     public void setTestBean(TestBean bean) {
1:5c15102:         this.bean = bean;
1:70e39b6:     }
1:70e39b6:     
1:a44e725:     public void setConnector(Connector connector) {
1:a44e725:         this.connector = connector;
1:70e39b6:     }
1:70e39b6: 
1:70e39b6: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:2ad9527
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:         throw new RuntimeException("Test exception"); // NOSONAR
commit:bd98451
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         connector.insertRow(name, value);
1:         if (e instanceof SQLException) { 
1:         } else if (e instanceof RuntimeException) {
1:         }
1:         bean.insertRow(name, value, null);
commit:a44e725
/////////////////////////////////////////////////////////////////////////
1:     private Connector connector;
0:         Connection conn = null;
0:         PreparedStatement stmt = null;
1: 
0:         try {
0:             conn = connector.connect();
0:             stmt = conn.prepareStatement("INSERT INTO TESTTABLE VALUES (?, ?)");
0:             stmt.setString(1, name);
0:             stmt.setInt(2, value);
0:             stmt.executeUpdate();
1:         }
0:         finally {
0:             connector.safeClose(stmt);
0:             connector.safeClose(conn);
1:         }
0:         insertRow(name, value);
/////////////////////////////////////////////////////////////////////////
1:     public void delegateInsertRow(String name, int value) throws SQLException {
0:         bean.insertRow(name, value);
/////////////////////////////////////////////////////////////////////////
0:             conn = connector.connect();
/////////////////////////////////////////////////////////////////////////
0:             connector.safeClose(stmt);
0:             connector.safeClose(conn);
/////////////////////////////////////////////////////////////////////////
1:     public void setConnector(Connector connector) {
1:         this.connector = connector;
commit:70e39b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             // Ignore
0:             safeClose(stmt);
0:             safeClose(conn);
/////////////////////////////////////////////////////////////////////////
0:             // Ignore
0:             safeClose(stmt);
0:             safeClose(conn);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:                 safeClose(stmt);
0:                 safeClose(conn);
/////////////////////////////////////////////////////////////////////////
0:             safeClose(stmt);
0:             safeClose(conn);
/////////////////////////////////////////////////////////////////////////
1:     
0:     private void safeClose(Connection conn) {
0:         if (conn == null) {
0:             return;
1:         }
0:         try {
0:             conn.close();
0:         } catch (SQLException e) {
0:             // Ignore
1:         }
1:     }
1: 
0:     private void safeClose(Statement stmt) {
0:         if (stmt == null) {
0:             return;
1:         }
0:         try {
0:             stmt.close();
0:         } catch (SQLException e) {
0:             // Ignore
1:         }
1:     }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:5c15102
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.test.impl;
1: 
0: import java.sql.Connection;
0: import java.sql.PreparedStatement;
0: import java.sql.ResultSet;
1: import java.sql.SQLException;
0: import java.sql.Statement;
1: 
0: import javax.sql.DataSource;
1: 
1: import org.apache.aries.transaction.test.TestBean;
1: 
1: public class TestBeanImpl implements TestBean {
0:     private DataSource xads;
1: 
0:     private DataSource ds;
1: 
0:     private String user;
1: 
0:     private String password;
1:     
1:     private TestBean bean;
1: 
0:     public TestBeanImpl() {
0:     }
1: 
0:     public void initialize() {
0:         Connection conn = null;
0:         Statement stmt = null;
1: 
0:         try {
0:             conn = ds.getConnection(user, password);
0:             conn.setAutoCommit(true);
0:             stmt = conn.createStatement();
0:             stmt.executeUpdate("DROP TABLE TESTTABLE");
0:         }
0:         catch (Exception e) {
0:             e.printStackTrace();
0:         }
0:         finally {
0:             try {
0:                 if (stmt != null)
0:                     stmt.close();
0:             } catch (SQLException e) {
0:                 // TODO Auto-generated catch block
0:                 e.printStackTrace();
0:             }
1: 
0:             try {
0:                 if (conn != null)
0:                     conn.close();
0:             } catch (SQLException e) {
0:                 // TODO Auto-generated catch block
0:                 e.printStackTrace();
0:             }
0:         }
1: 
0:         try {
0:             conn = ds.getConnection(user, password);
0:             conn.setAutoCommit(true);
0:             stmt = conn.createStatement();
0:             stmt.executeUpdate("CREATE TABLE TESTTABLE (NAME VARCHAR(64), VALUE INTEGER, PRIMARY KEY(NAME, VALUE))");
0:         }
0:         catch (Exception e) {
0:             e.printStackTrace();
0:         }
0:         finally {
0:             try {
0:                 if (stmt != null)
0:                     stmt.close();
0:             } catch (SQLException e) {
0:                 // TODO Auto-generated catch block
0:                 e.printStackTrace();
0:             }
1: 
0:             try {
0:                 if (conn != null)
0:                     conn.close();
0:             } catch (SQLException e) {
0:                 // TODO Auto-generated catch block
0:                 e.printStackTrace();
0:             }
0:         }
0:     }
1: 
0:     public void insertRow(String name, int value) throws SQLException {
0:         insertRow(name, value, false);
0:     }
1: 
1:     public void insertRow(String name, int value, Exception e) throws SQLException {
0:         insertRow(name, value, false);
1:         
0:         if (e instanceof SQLException)
1:             throw (SQLException) e;
0:         else if (e instanceof RuntimeException)
1:             throw (RuntimeException) e;
0:     }
1: 
0:     public void insertRow(String name, int value, boolean delegate) throws SQLException {
0:         if (delegate) {
0:             bean.insertRow(name, value);
0:         }
0:         else {
0:             Connection conn = null;
0:             PreparedStatement stmt = null;
1: 
0:             try {
0:                 conn = xads.getConnection(user, password);
0:                 stmt = conn.prepareStatement("INSERT INTO TESTTABLE VALUES (?, ?)");
0:                 stmt.setString(1, name);
0:                 stmt.setInt(2, value);
0:                 stmt.executeUpdate();
0:             }
0:             finally {
0:                 if (stmt != null)
0:                     stmt.close();
1: 
0:                 if (conn != null)
0:                     conn.close();
0:             }
0:         }
0:     }
1: 
0:     public int countRows() throws SQLException {
0:         Connection conn = null;
0:         PreparedStatement stmt = null;
0:         ResultSet rs = null;
0:         int count = -1;
1: 
0:         try {
0:             conn = ds.getConnection(user, password);
0:             stmt = conn.prepareStatement("SELECT * FROM TESTTABLE", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
0:             rs = stmt.executeQuery();
0:             rs.last();
0:             count = rs.getRow();
0:         }
0:         finally {
0:             if (rs != null)
0:                 rs.close();
1: 
0:             if (stmt != null)
0:                 stmt.close();
1: 
0:             if (conn != null)
0:                 conn.close();
0:         }
1: 
0:         return count;
0:     }
1: 
1:     public void throwApplicationException() throws SQLException {
1:         throw new SQLException("Test exception");
0:     }
1: 
1:     public void throwRuntimeException() {
0:         throw new RuntimeException("Test exception");
0:     }
1: 
0:     public void setEnlistingDataSource(DataSource xads) {
0:         this.xads = xads;
0:     }
1: 
0:     public void setDataSource(DataSource ds) {
0:         this.ds = ds;
0:     }
1: 
0:     public void setUser(String user) {
0:         this.user = user;
0:     }
1: 
0:     public void setPassword(String password) {
0:         this.password = password;
0:     }
1:     
1:     public void setTestBean(TestBean bean) {
1:         this.bean = bean;
0:     }
0: }
============================================================================