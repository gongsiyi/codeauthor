1:4243a2b: /**
1:4243a2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4243a2b:  * contributor license agreements.  See the NOTICE file distributed with
1:4243a2b:  * this work for additional information regarding copyright ownership.
1:4243a2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4243a2b:  * (the "License"); you may not use this file except in compliance with
1:4243a2b:  * the License.  You may obtain a copy of the License at
1:4243a2b:  *
1:4243a2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4243a2b:  *
1:4243a2b:  * Unless required by applicable law or agreed to in writing, software
1:4243a2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4243a2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4243a2b:  * See the License for the specific language governing permissions and
1:4243a2b:  * limitations under the License.
1:4243a2b:  */
1:4243a2b: package org.apache.aries.transaction.jms.internal;
1:4243a2b: 
1:4243a2b: import javax.jms.Destination;
1:4243a2b: import javax.jms.JMSException;
1:4243a2b: import javax.jms.Message;
1:4243a2b: import javax.jms.Queue;
1:4243a2b: import javax.jms.QueueSender;
1:4243a2b: 
1:4243a2b: /**
1:4243a2b:  * 
1:4243a2b:  */
1:4243a2b: public class PooledQueueSender extends PooledProducer implements QueueSender {
1:4243a2b: 
1:4243a2b:     public PooledQueueSender(QueueSender messageProducer, Destination destination) throws JMSException {
1:4243a2b:         super(messageProducer, destination);
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void send(Queue queue, Message message, int i, int i1, long l) throws JMSException {
1:4243a2b:         getQueueSender().send(queue, message, i, i1, l);
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void send(Queue queue, Message message) throws JMSException {
1:4243a2b:         getQueueSender().send(queue, message);
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public Queue getQueue() throws JMSException {
1:4243a2b:         return getQueueSender().getQueue();
1:4243a2b:     }
1:4243a2b: 
1:4243a2b: 
1:4243a2b:     protected QueueSender getQueueSender() {
1:4243a2b:         return (QueueSender) getMessageProducer();
1:4243a2b:     }
1:4243a2b: 
1:4243a2b: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4243a2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.transaction.jms.internal;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Queue;
1: import javax.jms.QueueSender;
1: 
1: /**
1:  * 
1:  */
1: public class PooledQueueSender extends PooledProducer implements QueueSender {
1: 
1:     public PooledQueueSender(QueueSender messageProducer, Destination destination) throws JMSException {
1:         super(messageProducer, destination);
1:     }
1: 
1:     public void send(Queue queue, Message message, int i, int i1, long l) throws JMSException {
1:         getQueueSender().send(queue, message, i, i1, l);
1:     }
1: 
1:     public void send(Queue queue, Message message) throws JMSException {
1:         getQueueSender().send(queue, message);
1:     }
1: 
1:     public Queue getQueue() throws JMSException {
1:         return getQueueSender().getQueue();
1:     }
1: 
1: 
1:     protected QueueSender getQueueSender() {
1:         return (QueueSender) getMessageProducer();
1:     }
1: 
1: }
============================================================================