1:3c38842: /*
1:3c38842:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c38842:  * or more contributor license agreements.  See the NOTICE file
1:3c38842:  * distributed with this work for additional information
1:3c38842:  * regarding copyright ownership.  The ASF licenses this file
1:3c38842:  * to you under the Apache License, Version 2.0 (the
1:3c38842:  * "License"); you may not use this file except in compliance
1:3c38842:  * with the License.  You may obtain a copy of the License at
3:3c38842:  *
1:3c38842:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3c38842:  *
1:3c38842:  * Unless required by applicable law or agreed to in writing,
1:3c38842:  * software distributed under the License is distributed on an
1:3c38842:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:3c38842:  * KIND, either express or implied.  See the License for the
1:3c38842:  * specific language governing permissions and limitations
1:3c38842:  * under the License.
1:3c38842:  */
1:e62fca9: 
1:910fec0: package org.apache.aries.util.filesystem.impl;
1:72345ab: 
1:3c38842: import java.io.File;
1:3c38842: import java.io.IOException;
1:3c38842: import java.io.InputStream;
1:3c38842: import java.net.MalformedURLException;
1:3c38842: import java.net.URL;
1:3c38842: import java.util.zip.ZipEntry;
1:3c38842: import java.util.zip.ZipException;
1:3c38842: import java.util.zip.ZipFile;
1:e62fca9: 
1:8ab18a7: import org.apache.aries.util.IORuntimeException;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
28:3c38842: 
1:3c38842: /**
1:3c38842:  * An implementation of IFile that represents a file entry in a zip.
1:3c38842:  */
1:3c38842: public class ZipFileImpl implements IFile
1:3c38842: {
1:3c38842:   /** The name of the file */
1:e62fca9:   private String name;
1:3c38842:   /** The size of the file */
1:3c38842:   private final long size;
1:3c38842:   /** The last time the file was updated */
1:3c38842:   private final long lastModified;
1:3c38842:   /** The zip file this is contained in */
1:e62fca9:   protected final File zip;
1:3c38842:   /** The entry in the zip this IFile represents */
1:e62fca9:   protected final ZipEntry entry;
1:3c38842:   /** The parent directory */
1:e62fca9:   private final IDirectory parent;
1:3c38842:   /** The URL of the zip file we are looking inside of */
1:3c38842:   private final String url;
1:e62fca9:   /** The path of the zip archive to the VFS root */
1:e62fca9:   private final String zipPathToRoot;
1:72345ab:   /** The closeable directory that caches the open ZipFile */
1:72345ab:   protected final ZipCloseableDirectory cache;
1:8ab18a7: 
1:3c38842:   /**
1:3c38842:    * This constructor is used to create a file entry within the zip.
1:8ab18a7:    *
1:3c38842:    * @param zip1    the zip file the entry is in.
1:3c38842:    * @param entry1  the entry this IFile represents.
1:3c38842:    * @param parent1 the parent directory.
1:3c38842:    */
1:72345ab:   public ZipFileImpl(File zip1, ZipEntry entry1, ZipDirectory parent1, ZipCloseableDirectory cache)
1:3c38842:   {
1:3c38842:     this.zip = zip1;
1:3c38842:     this.entry = entry1;
1:8ab18a7: 
1:e62fca9:     this.zipPathToRoot = parent1.getZipPathToRoot();
1:228f370: 
1:e62fca9:     name = zipPathToRoot + entry1.getName();
1:8ab18a7: 
1:3c38842:     if (entry1.isDirectory()) name = name.substring(0, name.length() - 1);
1:8ab18a7: 
1:3c38842:     lastModified = entry1.getTime();
1:3c38842:     size = entry1.getSize();
1:8ab18a7: 
1:3c38842:     url = ((ZipFileImpl)parent1).url;
1:8ab18a7: 
1:3c38842:     this.parent = parent1;
1:72345ab:     this.cache = cache;
5:3c38842:   }
1:8ab18a7: 
1:3c38842:   /**
1:3c38842:    * This is called to construct the root directory of the zip.
1:8ab18a7:    *
1:3c38842:    * @param zip1 the zip file this represents.
1:3c38842:    * @param fs   the file on the fs.
1:e62fca9:    * @param rootName the name of this zipfile relative to the IFile filesystem root
1:3c38842:    * @throws MalformedURLException
1:3c38842:    */
1:72345ab:   protected ZipFileImpl(File zip1, IDirectory parent) throws MalformedURLException
1:3c38842:   {
1:3c38842:     this.zip = zip1;
1:3c38842:     this.entry = null;
1:8ab18a7: 
1:e62fca9:     if (parent == null) {
1:e62fca9:         name = "";
1:e62fca9:         zipPathToRoot = "";
1:e62fca9:         this.parent = null;
1:e62fca9:     } else {
1:e62fca9:     	this.parent = parent;
1:e62fca9:     	name = parent.getName() + "/" + zip1.getName();
1:e62fca9:     	zipPathToRoot = name+"/";
1:e62fca9:     }
1:8ab18a7: 
1:72345ab:     lastModified = zip1.lastModified();
1:72345ab:     size = zip1.length();
1:72345ab:     url = zip1.toURI().toURL().toExternalForm();
1:72345ab:     this.cache = null;
1:72345ab:   }
1:8ab18a7: 
1:72345ab:   public ZipFileImpl(ZipFileImpl other, ZipCloseableDirectory cache) {
1:72345ab: 	  name = other.name;
1:72345ab: 	  size = other.size;
1:72345ab: 	  lastModified = other.lastModified;
1:72345ab: 	  zip = other.zip;
1:72345ab: 	  entry = other.entry;
1:72345ab: 	  parent = other.parent;
1:72345ab: 	  url = other.url;
1:72345ab: 	  zipPathToRoot = other.zipPathToRoot;
1:72345ab: 	  this.cache = cache;
1:3c38842:   }
1:f2492f7: 
1:e62fca9:   /**
1:e62fca9:    * Obtain the path of the zip file to the VFS root
1:e62fca9:    */
1:e62fca9:   public String getZipPathToRoot() {
1:e62fca9: 	  return zipPathToRoot;
1:e62fca9:   }
1:8ab18a7: 
1:3c38842:   public IDirectory convert()
1:3c38842:   {
1:e62fca9:     return null;
1:3c38842:   }
1:8ab18a7: 
1:f2492f7:   public IDirectory convertNested() {
1:f2492f7: 	  if (isDirectory()) return convert();
1:8ab18a7: 	  else if (FileSystemImpl.isValidZip(this)) return new NestedZipDirectory(this);
1:f2492f7: 	  else return null;
1:8ab18a7:   }
1:7a2a976: 
1:3c38842:   public long getLastModified()
1:3c38842:   {
1:3c38842:     return lastModified;
1:3c38842:   }
1:e62fca9: 
1:3c38842:   public String getName()
1:3c38842:   {
1:3c38842:     return name;
1:3c38842:   }
1:8ab18a7: 
1:8ab18a7:   public String getNameInZip()
1:7a2a976:   {
1:7a2a976: 	  if (entry == null) return "";
1:7a2a976: 	  else {
1:7a2a976: 		  String name = entry.getName();
1:7a2a976: 		  if (isDirectory()) return name.substring(0, name.length()-1);
1:7a2a976: 		  else return name;
1:7a2a976: 	  }
1:7a2a976:   }
1:228f370: 
1:3c38842:   public IDirectory getParent()
1:3c38842:   {
1:3c38842:     return parent;
1:3c38842:   }
1:e62fca9: 
1:3c38842:   public long getSize()
1:3c38842:   {
1:3c38842:     return size;
1:3c38842:   }
1:e62fca9: 
1:3c38842:   public boolean isDirectory()
1:3c38842:   {
1:3c38842:     return false;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public boolean isFile()
1:3c38842:   {
1:3c38842:     return true;
1:3c38842:   }
1:3c38842: 
1:3c38842:   public InputStream open() throws IOException
1:3c38842:   {
1:3c38842:     InputStream is = new SpecialZipInputStream(entry);
1:3c38842:     return is;
1:3c38842:   }
1:8ab18a7: 
1:3c38842:   public IDirectory getRoot()
1:3c38842:   {
1:e62fca9:     return parent.getRoot();
1:3c38842:   }
1:3c38842: 
1:3c38842:   public URL toURL() throws MalformedURLException
1:3c38842:   {
1:228f370:     URL result;
1:8ab18a7: 
1:228f370:     if(name.equals(zipPathToRoot))
1:228f370:       result = new URL(url);
1:228f370:     else {
1:8ab18a7: 
1:228f370:       String entryURL = "jar:" + url + "!/";
1:228f370:       if(entry != null)
1:228f370:         entryURL += entry.getName();
1:228f370:       else {
1:228f370:         entryURL += name.substring(zipPathToRoot.length());
1:228f370:       }
1:228f370:       result = new URL(entryURL);
1:228f370:     }
1:8ab18a7: 
1:3c38842:     return result;
1:3c38842:   }
1:228f370: 
1:f2492f7:   @Override
1:3c38842:   public boolean equals(Object obj)
1:3c38842:   {
1:3c38842:     if (obj == null) return false;
1:3c38842:     if (obj == this) return true;
1:8ab18a7: 
1:3c38842:     if (obj.getClass() == getClass()) {
1:3c38842:       return toString().equals(obj.toString());
1:f2492f7:     }
1:8ab18a7: 
1:3c38842:     return false;
1:e62fca9:   }
1:3c38842: 
7:e62fca9:   @Override
1:3c38842:   public int hashCode()
1:3c38842:   {
1:3c38842:     return toString().hashCode();
1:3c38842:   }
1:3c38842: 
1:e62fca9:   @Override
1:3c38842:   public String toString()
1:3c38842:   {
1:a0ebbc7: 	  if (name != null && name.length() != 0) return url.substring(5)+ "/" + name;
1:e62fca9: 	  else return url.substring(5);
1:3c38842:   }
1:8ab18a7: 
1:3c38842:   ZipFile openZipFile(){
1:3c38842:     ZipFile z = null;
1:72345ab: 
1:72345ab:     if (cache != null && !!!cache.isClosed()) {
1:72345ab:     	z = cache.getZipFile();
1:72345ab:     } else {
1:72345ab: 	    try {
1:72345ab: 	      z = new ZipFile(zip);
1:72345ab: 	    } catch (IOException e) {
1:8ab18a7: 	      throw new IORuntimeException("IOException in ZipFileImpl.openZipFile", e);
1:72345ab: 	    }
1:3c38842:     }
1:3c38842:     return z;
1:3c38842:   }
1:8ab18a7: 
1:3c38842:   void closeZipFile(ZipFile z){
1:72345ab: 	  if (cache != null && cache.getZipFile() == z) {
1:72345ab: 		  // do nothing
1:72345ab: 	  } else {
1:72345ab: 		  try{
1:72345ab: 			  z.close();
1:72345ab: 		  }
1:72345ab: 		  catch (IOException e) {
1:8ab18a7: 			  throw new IORuntimeException("IOException in ZipFileImpl.closeZipFile", e);
1:72345ab: 		  }
1:72345ab: 	  }
1:3c38842:   }
1:8ab18a7: 
1:3c38842:   /**
1:3c38842:    * A simple class to delegate to the InputStream of the constructor
1:3c38842:    * and to call close on the zipFile when we close the stream.
1:3c38842:    *
1:3c38842:    */
1:3c38842:   private class SpecialZipInputStream extends InputStream{
1:3c38842: 
1:3c38842:     private ZipFile zipFile;
1:3c38842:     private InputStream is;
1:8ab18a7: 
1:3c38842:     public SpecialZipInputStream(ZipEntry anEntry){
2:3c38842:       try{
1:3c38842:       this.zipFile = openZipFile();
1:3c38842:       this.is = zipFile.getInputStream(anEntry);
1:3c38842:       }
1:3c38842:       catch (ZipException e) {
1:8ab18a7:         throw new IORuntimeException("ZipException in SpecialZipInputStream()", e);
2:3c38842:       } catch (IOException e) {
1:8ab18a7:         throw new IORuntimeException("IOException in SpecialZipInputStream()", e);
1:3c38842:       }
1:3c38842:     }
1:8ab18a7: 
1:e62fca9:     @Override
1:203afea:     public int read(byte[] b) throws IOException {
1:203afea:       return is.read(b);
1:203afea:     }
1:203afea: 
1:203afea:     @Override
1:203afea:     public int read(byte[] b, int off, int len) throws IOException {
1:203afea:       return is.read(b, off, len);
1:203afea:     }
1:203afea: 
1:203afea:     @Override
1:3c38842:     public int read() throws IOException
1:3c38842:     {
1:3c38842:       return is.read();
1:3c38842:     }
1:8ab18a7: 
1:e62fca9:     @Override
1:3c38842:     public void close() throws IOException{
1:3c38842:         //call close on the input stream, probably does nothing
1:3c38842:         is.close();
1:3c38842:         //call close on the zip file, important for tidying up
1:3c38842:         closeZipFile(zipFile);
1:3c38842:     }
1:8ab18a7: 
1:3c38842:   }
1:3c38842: 
1:3c38842: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:203afea
/////////////////////////////////////////////////////////////////////////
1:     public int read(byte[] b) throws IOException {
1:       return is.read(b);
1:     }
1: 
1:     @Override
1:     public int read(byte[] b, int off, int len) throws IOException {
1:       return is.read(b, off, len);
1:     }
1: 
1:     @Override
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:8ab18a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.IORuntimeException;
/////////////////////////////////////////////////////////////////////////
1: 
1:    *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1:    *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 	  else if (FileSystemImpl.isValidZip(this)) return new NestedZipDirectory(this);
1:   }
/////////////////////////////////////////////////////////////////////////
1: 
1:   public String getNameInZip()
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 	      throw new IORuntimeException("IOException in ZipFileImpl.openZipFile", e);
1: 
/////////////////////////////////////////////////////////////////////////
1: 			  throw new IORuntimeException("IOException in ZipFileImpl.closeZipFile", e);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         throw new IORuntimeException("ZipException in SpecialZipInputStream()", e);
1:         throw new IORuntimeException("IOException in SpecialZipInputStream()", e);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:228f370
/////////////////////////////////////////////////////////////////////////
1:     URL result;
1:     
1:     if(name.equals(zipPathToRoot))
1:       result = new URL(url);
1:     else {
1:       
1:       String entryURL = "jar:" + url + "!/";
1:       if(entry != null)
1:         entryURL += entry.getName();
1:       else {
1:         entryURL += name.substring(zipPathToRoot.length());
1:       }
1:       result = new URL(entryURL);
1:     }
1:       
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:f8e6603
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a0ebbc7
/////////////////////////////////////////////////////////////////////////
1: 	  if (name != null && name.length() != 0) return url.substring(5)+ "/" + name;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
/////////////////////////////////////////////////////////////////////////
0:   private static final Logger logger = LoggerFactory.getLogger(ZipFileImpl.class.getName());
commit:72345ab
/////////////////////////////////////////////////////////////////////////
1:   /** The closeable directory that caches the open ZipFile */
1:   protected final ZipCloseableDirectory cache;
/////////////////////////////////////////////////////////////////////////
1:   public ZipFileImpl(File zip1, ZipEntry entry1, ZipDirectory parent1, ZipCloseableDirectory cache)
/////////////////////////////////////////////////////////////////////////
1:     this.cache = cache;
/////////////////////////////////////////////////////////////////////////
1:   protected ZipFileImpl(File zip1, IDirectory parent) throws MalformedURLException
/////////////////////////////////////////////////////////////////////////
1:     lastModified = zip1.lastModified();
1:     size = zip1.length();
1:     url = zip1.toURI().toURL().toExternalForm();
1:     this.cache = null;
1:   }
1:   
1:   public ZipFileImpl(ZipFileImpl other, ZipCloseableDirectory cache) {
1: 	  name = other.name;
1: 	  size = other.size;
1: 	  lastModified = other.lastModified;
1: 	  zip = other.zip;
1: 	  entry = other.entry;
1: 	  parent = other.parent;
1: 	  url = other.url;
1: 	  zipPathToRoot = other.zipPathToRoot;
1: 	  this.cache = cache;
/////////////////////////////////////////////////////////////////////////
1: 
1:     if (cache != null && !!!cache.isClosed()) {
1:     	z = cache.getZipFile();
1:     } else {
1: 	    try {
1: 	      z = new ZipFile(zip);
0: 	    } catch (ZipException e) {
0: 	      logger.error ("ZipException in ZipFileImpl.openZipFile", e);
1: 	    } catch (IOException e) {
0: 	      logger.error ("IOException in ZipFileImpl.openZipFile", e);
1: 	    }
1: 	  if (cache != null && cache.getZipFile() == z) {
1: 		  // do nothing
1: 	  } else {
1: 		  try{
1: 			  z.close();
1: 		  }
1: 		  catch (IOException e) {
0: 			  logger.error ("IOException in ZipFileImpl.closeZipFile", e);
1: 		  }
1: 	  }
commit:f2492f7
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Override
1:   public IDirectory convertNested() {
1: 	  if (isDirectory()) return convert();
0: 	  else if (FileSystemImpl.isValidZip(this)) return new NestedZipDirectory(this); 
1: 	  else return null;
1:   }	
/////////////////////////////////////////////////////////////////////////
commit:7a2a976
/////////////////////////////////////////////////////////////////////////
1:   
0:   public String getNameInZip() 
1:   {
1: 	  if (entry == null) return "";
1: 	  else {
1: 		  String name = entry.getName();
1: 		  if (isDirectory()) return name.substring(0, name.length()-1);
1: 		  else return name;
1: 	  }
1:   }
commit:e62fca9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   private String name;
1:   protected final File zip;
1:   protected final ZipEntry entry;
1:   private final IDirectory parent;
1:   /** The path of the zip archive to the VFS root */
1:   private final String zipPathToRoot;
/////////////////////////////////////////////////////////////////////////
1:     this.zipPathToRoot = parent1.getZipPathToRoot();
1: 
1:     name = zipPathToRoot + entry1.getName();
/////////////////////////////////////////////////////////////////////////
1:    * @param rootName the name of this zipfile relative to the IFile filesystem root
0:   protected ZipFileImpl(File zip1, File fs, IDirectory parent) throws MalformedURLException
1:     
1:     if (parent == null) {
1:         name = "";
1:         zipPathToRoot = "";
1:         this.parent = null;
1:     } else {
1:     	this.parent = parent;
1:     	name = parent.getName() + "/" + zip1.getName();
1:     	zipPathToRoot = name+"/";
1:     }
1:     
1:   /**
1:    * Obtain the path of the zip file to the VFS root
1:    */
1:   public String getZipPathToRoot() {
1: 	  return zipPathToRoot;
1:   }
1:   
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:   @Override
1:     return parent.getRoot();
1:   @Override
0:     String entryURL = "jar:" + url + "!/" + entry.getName();
/////////////////////////////////////////////////////////////////////////
0: 	  if (name != null && !!!name.isEmpty()) return url.substring(5)+ "/" + name;
1: 	  else return url.substring(5);
/////////////////////////////////////////////////////////////////////////
1: 
0:   @Override
0:   public IDirectory convertNested() {
0: 	// TODO Auto-generated method stub
1: 	return null;
1:   }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:ce7ec25
/////////////////////////////////////////////////////////////////////////
0:     String entryURL = "jar:" + url + "!/" + getName();
commit:5481a62
/////////////////////////////////////////////////////////////////////////
0:     url = fs.toURI().toURL().toExternalForm();
commit:4febb9f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.filesystem.impl;
commit:3c38842
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.filesystem.utils.impl;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipException;
1: import java.util.zip.ZipFile;
1: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.utils.AppConstants;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * An implementation of IFile that represents a file entry in a zip.
1:  */
1: public class ZipFileImpl implements IFile
1: {
0:   /** A logger */
0:   private static final Logger logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
1: 
1:   /** The name of the file */
0:   private String name = "";
1:   /** The size of the file */
1:   private final long size;
1:   /** The last time the file was updated */
1:   private final long lastModified;
1:   /** The zip file this is contained in */
0:   protected File zip;
1:   /** The entry in the zip this IFile represents */
0:   protected ZipEntry entry;
1:   /** The parent directory */
0:   private ZipDirectory parent;
1:   /** The URL of the zip file we are looking inside of */
1:   private final String url;
1:   
1:   /**
1:    * This constructor is used to create a file entry within the zip.
1:    * 
1:    * @param zip1    the zip file the entry is in.
1:    * @param entry1  the entry this IFile represents.
1:    * @param parent1 the parent directory.
1:    */
0:   public ZipFileImpl(File zip1, ZipEntry entry1, ZipDirectory parent1)
1:   {
1:     this.zip = zip1;
1:     this.entry = entry1;
1:     
0:     name = entry1.getName();
1:     
1:     if (entry1.isDirectory()) name = name.substring(0, name.length() - 1);
1:     
1:     lastModified = entry1.getTime();
1:     size = entry1.getSize();
1:     
1:     url = ((ZipFileImpl)parent1).url;
1:     
1:     this.parent = parent1;
1:   }
1:   
1:   /**
1:    * This is called to construct the root directory of the zip.
1:    * 
1:    * @param zip1 the zip file this represents.
1:    * @param fs   the file on the fs.
1:    * @throws MalformedURLException
1:    */
0:   protected ZipFileImpl(File zip1, File fs) throws MalformedURLException
1:   {
1:     this.zip = zip1;
1:     this.entry = null;
0:     name = "";
0:     lastModified = fs.lastModified();
0:     size = fs.length();
0:     url = fs.toURL().toExternalForm();
1:   }
1: 
1:   public IDirectory convert()
1:   {
0:     return null;
1:   }
1: 
1:   public long getLastModified()
1:   {
1:     return lastModified;
1:   }
1: 
1:   public String getName()
1:   {
1:     return name;
1:   }
1: 
1:   public IDirectory getParent()
1:   {
1:     return parent;
1:   }
1: 
1:   public long getSize()
1:   {
1:     return size;
1:   }
1: 
1:   public boolean isDirectory()
1:   {
1:     return false;
1:   }
1: 
1:   public boolean isFile()
1:   {
1:     return true;
1:   }
1: 
1:   public InputStream open() throws IOException
1:   {
1:     InputStream is = new SpecialZipInputStream(entry);
1:     return is;
1:   }
1:   
1:   public IDirectory getRoot()
1:   {
0:     IDirectory root = parent.getRoot();
0:     return root;
1:   }
1: 
1:   public URL toURL() throws MalformedURLException
1:   {
0:     String entryURL = "jar:" + url + "!/" + getParent().getName() + getName();
0:     URL result = new URL(entryURL);
1:     return result;
1:   }
1: 
0:   @Override
1:   public boolean equals(Object obj)
1:   {
1:     if (obj == null) return false;
1:     if (obj == this) return true;
1:     
1:     if (obj.getClass() == getClass()) {
1:       return toString().equals(obj.toString());
1:     }
1:     
1:     return false;
1:   }
1: 
0:   @Override
1:   public int hashCode()
1:   {
1:     return toString().hashCode();
1:   }
1: 
0:   @Override
1:   public String toString()
1:   {
0:     return url.substring(5)+ "/" + name;
1:   }
1:   
1:   ZipFile openZipFile(){
1:     ZipFile z = null;
0:     try {
0:       z = new ZipFile(zip);
0:     } catch (ZipException e) {
0:       logger.error ("ZipException in ZipFileImpl.openZipFile", e);
1:     } catch (IOException e) {
0:       logger.error ("IOException in ZipFileImpl.openZipFile", e);
1:     }
1:     return z;
1:   }
1:   
1:   void closeZipFile(ZipFile z){
1:     try{
0:       z.close();
1:     }
0:     catch (IOException e) {
0:       logger.error ("IOException in ZipFileImpl.closeZipFile", e);
1:     }
1:   }
1:   
1:   /**
1:    * A simple class to delegate to the InputStream of the constructor
1:    * and to call close on the zipFile when we close the stream.
1:    *
1:    */
1:   private class SpecialZipInputStream extends InputStream{
1: 
1:     private ZipFile zipFile;
1:     private InputStream is;
1:     
1:     public SpecialZipInputStream(ZipEntry anEntry){
1:       try{
1:       this.zipFile = openZipFile();
1:       this.is = zipFile.getInputStream(anEntry);
1:       }
1:       catch (ZipException e) {
0:         logger.error ("ZipException in SpecialZipInputStream()", e);
1:       } catch (IOException e) {
0:         logger.error ("IOException in SpecialZipInputStream()", e);        
1:       }
1:     }
1:     
0:     @Override
1:     public int read() throws IOException
1:     {
1:       return is.read();
1:     }
1:     
0:     @Override
1:     public void close() throws IOException{
1:         //call close on the input stream, probably does nothing
1:         is.close();
1:         //call close on the zip file, important for tidying up
1:         closeZipFile(zipFile);
1:     }
1:     
1:   }
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.utils.filesystem.impl;
0: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.net.MalformedURLException;
0: import java.net.URL;
0: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipException;
0: import java.util.zip.ZipFile;
0: 
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.utils.AppConstants;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * An implementation of IFile that represents a file entry in a zip.
0:  */
0: public class ZipFileImpl implements IFile
0: {
0:   /** A logger */
0:   private static final Logger logger = LoggerFactory.getLogger("org.apache.aries.application.utils");
0: 
0:   /** The name of the file */
0:   private String name = "";
0:   /** The size of the file */
0:   private final long size;
0:   /** The last time the file was updated */
0:   private final long lastModified;
0:   /** The zip file this is contained in */
0:   protected File zip;
0:   /** The entry in the zip this IFile represents */
0:   protected ZipEntry entry;
0:   /** The parent directory */
0:   private ZipDirectory parent;
0:   /** The URL of the zip file we are looking inside of */
0:   private final String url;
0:   
0:   /**
0:    * This constructor is used to create a file entry within the zip.
0:    * 
0:    * @param zip1    the zip file the entry is in.
0:    * @param entry1  the entry this IFile represents.
0:    * @param parent1 the parent directory.
0:    */
0:   public ZipFileImpl(File zip1, ZipEntry entry1, ZipDirectory parent1)
0:   {
0:     this.zip = zip1;
0:     this.entry = entry1;
0:     
0:     name = entry1.getName();
0:     
0:     if (entry1.isDirectory()) name = name.substring(0, name.length() - 1);
0:     
0:     lastModified = entry1.getTime();
0:     size = entry1.getSize();
0:     
0:     url = ((ZipFileImpl)parent1).url;
0:     
0:     this.parent = parent1;
0:   }
0:   
0:   /**
0:    * This is called to construct the root directory of the zip.
0:    * 
0:    * @param zip1 the zip file this represents.
0:    * @param fs   the file on the fs.
0:    * @throws MalformedURLException
0:    */
0:   protected ZipFileImpl(File zip1, File fs) throws MalformedURLException
0:   {
0:     this.zip = zip1;
0:     this.entry = null;
0:     name = "";
0:     lastModified = fs.lastModified();
0:     size = fs.length();
0:     url = fs.toURL().toExternalForm();
0:   }
0: 
0:   public IDirectory convert()
0:   {
0:     return null;
0:   }
0: 
0:   public long getLastModified()
0:   {
0:     return lastModified;
0:   }
0: 
0:   public String getName()
0:   {
0:     return name;
0:   }
0: 
0:   public IDirectory getParent()
0:   {
0:     return parent;
0:   }
0: 
0:   public long getSize()
0:   {
0:     return size;
0:   }
0: 
0:   public boolean isDirectory()
0:   {
0:     return false;
0:   }
0: 
0:   public boolean isFile()
0:   {
0:     return true;
0:   }
0: 
0:   public InputStream open() throws IOException
0:   {
0:     InputStream is = new SpecialZipInputStream(entry);
0:     return is;
0:   }
0:   
0:   public IDirectory getRoot()
0:   {
0:     IDirectory root = parent.getRoot();
0:     return root;
0:   }
0: 
0:   public URL toURL() throws MalformedURLException
0:   {
0:     String entryURL = "jar:" + url + "!/" + getParent().getName() + getName();
0:     URL result = new URL(entryURL);
0:     return result;
0:   }
0: 
0:   @Override
0:   public boolean equals(Object obj)
0:   {
0:     if (obj == null) return false;
0:     if (obj == this) return true;
0:     
0:     if (obj.getClass() == getClass()) {
0:       return toString().equals(obj.toString());
0:     }
0:     
0:     return false;
0:   }
0: 
0:   @Override
0:   public int hashCode()
0:   {
0:     return toString().hashCode();
0:   }
0: 
0:   @Override
0:   public String toString()
0:   {
0:     return url.substring(5)+ "/" + name;
0:   }
0:   
0:   ZipFile openZipFile(){
0:     ZipFile z = null;
0:     try {
0:       z = new ZipFile(zip);
0:     } catch (ZipException e) {
0:       logger.error ("ZipException in ZipFileImpl.openZipFile", e);
0:     } catch (IOException e) {
0:       logger.error ("IOException in ZipFileImpl.openZipFile", e);
0:     }
0:     return z;
0:   }
0:   
0:   void closeZipFile(ZipFile z){
0:     try{
0:       z.close();
0:     }
0:     catch (IOException e) {
0:       logger.error ("IOException in ZipFileImpl.closeZipFile", e);
0:     }
0:   }
0:   
0:   /**
0:    * A simple class to delegate to the InputStream of the constructor
0:    * and to call close on the zipFile when we close the stream.
0:    *
0:    */
0:   private class SpecialZipInputStream extends InputStream{
0: 
0:     private ZipFile zipFile;
0:     private InputStream is;
0:     
0:     public SpecialZipInputStream(ZipEntry anEntry){
0:       try{
0:       this.zipFile = openZipFile();
0:       this.is = zipFile.getInputStream(anEntry);
0:       }
0:       catch (ZipException e) {
0:         logger.error ("ZipException in SpecialZipInputStream()", e);
0:       } catch (IOException e) {
0:         logger.error ("IOException in SpecialZipInputStream()", e);        
0:       }
0:     }
0:     
0:     @Override
0:     public int read() throws IOException
0:     {
0:       return is.read();
0:     }
0:     
0:     @Override
0:     public void close() throws IOException{
0:         //call close on the input stream, probably does nothing
0:         is.close();
0:         //call close on the zip file, important for tidying up
0:         closeZipFile(zipFile);
0:     }
0:     
0:   }
0: }
============================================================================