1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
3:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
15:fdf3952: 
1:fdf3952: import static org.junit.Assert.assertArrayEquals;
1:fdf3952: import static org.junit.Assert.assertEquals;
1:282cfcd: import static org.junit.Assert.assertTrue;
1:282cfcd: import static org.junit.Assert.fail;
1:fdf3952: import static org.mockito.Mockito.mock;
1:fdf3952: import static org.mockito.Mockito.when;
1:282cfcd: import static org.osgi.jmx.JmxConstants.BOOLEAN;
1:282cfcd: import static org.osgi.jmx.JmxConstants.KEY;
1:282cfcd: import static org.osgi.jmx.JmxConstants.LONG;
1:282cfcd: import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
1:282cfcd: import static org.osgi.jmx.JmxConstants.STRING;
1:282cfcd: import static org.osgi.jmx.JmxConstants.TYPE;
1:282cfcd: import static org.osgi.jmx.JmxConstants.VALUE;
1:fdf3952: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
1:282cfcd: import static org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE;
1:fdf3952: import static org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES;
1:fdf3952: 
1:282cfcd: import java.util.Collection;
1:fdf3952: import java.util.HashMap;
1:282cfcd: import java.util.List;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:282cfcd: import javax.management.openmbean.TabularData;
1:282cfcd: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:282cfcd: import org.osgi.jmx.JmxConstants;
1:282cfcd: import org.osgi.jmx.framework.ServiceStateMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class ServiceDataTest {
1:fdf3952:     @Test
1:fdf3952:     public void testToCompositeData() throws Exception {
1:282cfcd:         ServiceReference<?> reference = mock(ServiceReference.class);
1:fdf3952:         Bundle bundle = mock(Bundle.class);
1:fdf3952:         String[] interfaces = new String[] { "org.apache.aries.jmx.Test", "org.apache.aries.jmx.Mock" };
1:282cfcd: 
1:fdf3952:         Bundle b1 = mock(Bundle.class);
1:fdf3952:         when(b1.getBundleId()).thenReturn(new Long(6));
1:fdf3952:         Bundle b2 = mock(Bundle.class);
1:fdf3952:         when(b2.getBundleId()).thenReturn(new Long(9));
1:282cfcd: 
1:282cfcd: 
1:fdf3952:         when(reference.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(98));
1:fdf3952:         when(reference.getBundle()).thenReturn(bundle);
1:fdf3952:         when(bundle.getBundleId()).thenReturn(new Long(34));
1:fdf3952:         when(reference.getProperty(Constants.OBJECTCLASS)).thenReturn(interfaces);
1:fdf3952:         when(reference.getUsingBundles()).thenReturn(new Bundle[] { b1, b2 });
1:fdf3952:         when(reference.getPropertyKeys()).thenReturn( new String[] {"x.vendor", "x.domain", "x.index", "x.optimized" } );
1:fdf3952:         when(reference.getProperty("x.vendor")).thenReturn("aries");
1:fdf3952:         when(reference.getProperty("x.domain")).thenReturn("test");
1:fdf3952:         when(reference.getProperty("x.index")).thenReturn(new Long(67));
1:fdf3952:         when(reference.getProperty("x.optimized")).thenReturn(true);
1:282cfcd: 
1:282cfcd: 
1:fdf3952:         ServiceData serviceData = new ServiceData(reference);
1:282cfcd: 
1:fdf3952:         CompositeData compositeData = serviceData.toCompositeData();
1:fdf3952:         assertEquals(new Long(98), compositeData.get(IDENTIFIER));
1:fdf3952:         assertEquals(new Long(34), compositeData.get(BUNDLE_IDENTIFIER));
1:fdf3952:         assertArrayEquals( new Long[] {new Long(6), new Long(9)}, (Long[]) compositeData.get(USING_BUNDLES));
1:fdf3952:         assertArrayEquals(interfaces, (String[]) compositeData.get(OBJECT_CLASS));
1:282cfcd: 
1:282cfcd:         TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
1:282cfcd: 
1:282cfcd:         @SuppressWarnings("unchecked")
1:282cfcd:         Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
1:282cfcd: 
1:282cfcd:         assertEquals(4, propertyData.size());
1:282cfcd:         for (CompositeData propertyRow: propertyData) {
1:282cfcd:             String key = (String) propertyRow.get(KEY);
1:282cfcd:             if (key.equals("x.vendor")) {
1:282cfcd:                 assertEquals("aries", propertyRow.get(VALUE));
1:282cfcd:                 assertEquals(STRING, propertyRow.get(TYPE));
1:282cfcd:             } else if (key.equals("x.domain")) {
1:282cfcd:                 assertEquals("test", propertyRow.get(VALUE));
1:282cfcd:                 assertEquals(STRING, propertyRow.get(TYPE));
1:282cfcd:             } else if (key.equals("x.index")) {
1:282cfcd:                 assertEquals("67", propertyRow.get(VALUE));
1:282cfcd:                 assertEquals(LONG, propertyRow.get(TYPE));
1:282cfcd:             } else if (key.equals("x.optimized")) {
1:282cfcd:                 assertEquals("true", propertyRow.get(VALUE));
1:282cfcd:                 assertEquals(BOOLEAN, propertyRow.get(TYPE));
1:282cfcd:             } else {
1:282cfcd:                 fail("unknown key parsed from properties");
1:282cfcd:             }
1:282cfcd:         }
2:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testFromCompositeData() throws Exception {
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(IDENTIFIER, new Long(99));
1:fdf3952:         items.put(BUNDLE_IDENTIFIER, new Long(5));
1:fdf3952:         items.put(USING_BUNDLES, new Long[] { new Long(10), new Long(11) });
1:fdf3952:         items.put(OBJECT_CLASS, new String[] { "org.apache.aries.jmx.Test", "org.apache.aries.jmx.Mock" });
1:282cfcd:         TabularData propertyTable = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:282cfcd:         propertyTable.put(PropertyData.newInstance("a", true).toCompositeData());
1:282cfcd:         propertyTable.put(PropertyData.newInstance("b", "value").toCompositeData());
1:282cfcd:         propertyTable.put(PropertyData.newInstance("c", new int[] {1, 2}).toCompositeData());
1:282cfcd:         propertyTable.put(PropertyData.newInstance("d", new Long[] {new Long(3), new Long(4)}).toCompositeData());
1:282cfcd:         items.put(ServiceStateMBean.PROPERTIES, propertyTable);
1:fdf3952:         CompositeData compositeData = new CompositeDataSupport(SERVICE_TYPE, items);
1:282cfcd: 
1:fdf3952:         ServiceData data = ServiceData.from(compositeData);
1:fdf3952:         assertEquals(99, data.getServiceId());
1:fdf3952:         assertEquals(5, data.getBundleId());
1:fdf3952:         assertArrayEquals(new long[] {10, 11}, data.getUsingBundles());
1:fdf3952:         assertArrayEquals(new String[] { "org.apache.aries.jmx.Test", "org.apache.aries.jmx.Mock" }, data.getServiceInterfaces());
1:fdf3952: 
1:282cfcd:         List<PropertyData<? extends Object>> properties = data.getProperties();
1:282cfcd:         assertEquals(4, properties.size());
1:282cfcd: 
1:282cfcd:         for (PropertyData<? extends Object> property: properties) {
1:282cfcd:             if (property.getKey().equals("a")) {
1:282cfcd:                 assertTrue((Boolean) property.getValue());
1:282cfcd:                 assertEquals(P_BOOLEAN, property.getEncodedType());
1:282cfcd:             } else if (property.getKey().equals("b")) {
1:282cfcd:                 assertEquals("value", property.getValue());
1:282cfcd:                 assertEquals(STRING, property.getEncodedType());
1:282cfcd:             } else if (property.getKey().equals("c")) {
1:282cfcd:                 assertArrayEquals(new int[] { 1, 2 }, (int[]) property.getValue());
1:282cfcd:                 assertEquals("Array of int", property.getEncodedType());
1:282cfcd:                 assertEquals("1,2", property.getEncodedValue());
1:282cfcd:             } else if (property.getKey().equals("d")) {
1:282cfcd:                 assertArrayEquals(new Long[] {new Long(3), new Long(4) }, (Long[]) property.getValue());
1:282cfcd:                 assertEquals("Array of Long", property.getEncodedType());
1:282cfcd:                 assertEquals("3,4", property.getEncodedValue());
1:282cfcd:             } else {
1:282cfcd:                 fail("unknown key parsed from properties");
1:282cfcd:             }
1:282cfcd:         }
1:282cfcd:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:282cfcd
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: import static org.osgi.jmx.JmxConstants.BOOLEAN;
1: import static org.osgi.jmx.JmxConstants.KEY;
1: import static org.osgi.jmx.JmxConstants.LONG;
1: import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
1: import static org.osgi.jmx.JmxConstants.STRING;
1: import static org.osgi.jmx.JmxConstants.TYPE;
1: import static org.osgi.jmx.JmxConstants.VALUE;
1: import static org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES;
1: import java.util.Collection;
1: import java.util.List;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: import org.osgi.jmx.JmxConstants;
1: import org.osgi.jmx.framework.ServiceStateMBean;
1:         ServiceReference<?> reference = mock(ServiceReference.class);
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
1: 
1:         @SuppressWarnings("unchecked")
1:         Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
1: 
1:         assertEquals(4, propertyData.size());
1:         for (CompositeData propertyRow: propertyData) {
1:             String key = (String) propertyRow.get(KEY);
1:             if (key.equals("x.vendor")) {
1:                 assertEquals("aries", propertyRow.get(VALUE));
1:                 assertEquals(STRING, propertyRow.get(TYPE));
1:             } else if (key.equals("x.domain")) {
1:                 assertEquals("test", propertyRow.get(VALUE));
1:                 assertEquals(STRING, propertyRow.get(TYPE));
1:             } else if (key.equals("x.index")) {
1:                 assertEquals("67", propertyRow.get(VALUE));
1:                 assertEquals(LONG, propertyRow.get(TYPE));
1:             } else if (key.equals("x.optimized")) {
1:                 assertEquals("true", propertyRow.get(VALUE));
1:                 assertEquals(BOOLEAN, propertyRow.get(TYPE));
1:             } else {
1:                 fail("unknown key parsed from properties");
1:             }
1:         }
1:         TabularData propertyTable = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:         propertyTable.put(PropertyData.newInstance("a", true).toCompositeData());
1:         propertyTable.put(PropertyData.newInstance("b", "value").toCompositeData());
1:         propertyTable.put(PropertyData.newInstance("c", new int[] {1, 2}).toCompositeData());
1:         propertyTable.put(PropertyData.newInstance("d", new Long[] {new Long(3), new Long(4)}).toCompositeData());
1:         items.put(ServiceStateMBean.PROPERTIES, propertyTable);
1: 
1:         List<PropertyData<? extends Object>> properties = data.getProperties();
1:         assertEquals(4, properties.size());
1: 
1:         for (PropertyData<? extends Object> property: properties) {
1:             if (property.getKey().equals("a")) {
1:                 assertTrue((Boolean) property.getValue());
1:                 assertEquals(P_BOOLEAN, property.getEncodedType());
1:             } else if (property.getKey().equals("b")) {
1:                 assertEquals("value", property.getValue());
1:                 assertEquals(STRING, property.getEncodedType());
1:             } else if (property.getKey().equals("c")) {
1:                 assertArrayEquals(new int[] { 1, 2 }, (int[]) property.getValue());
1:                 assertEquals("Array of int", property.getEncodedType());
1:                 assertEquals("1,2", property.getEncodedValue());
1:             } else if (property.getKey().equals("d")) {
1:                 assertArrayEquals(new Long[] {new Long(3), new Long(4) }, (Long[]) property.getValue());
1:                 assertEquals("Array of Long", property.getEncodedType());
1:                 assertEquals("3,4", property.getEncodedValue());
1:             } else {
1:                 fail("unknown key parsed from properties");
1:             }
1:         }
1:     }
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.junit.Assert.assertArrayEquals;
1: import static org.junit.Assert.assertEquals;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.when;
1: import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
1: import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
1: import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
1: import static org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE;
1: import static org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: 
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ServiceDataTest {
1: 
1:    
1:     @Test
1:     public void testToCompositeData() throws Exception {
1: 
0:         ServiceReference reference = mock(ServiceReference.class);
1:         Bundle bundle = mock(Bundle.class);
1:         String[] interfaces = new String[] { "org.apache.aries.jmx.Test", "org.apache.aries.jmx.Mock" };
1:        
1:         Bundle b1 = mock(Bundle.class);
1:         when(b1.getBundleId()).thenReturn(new Long(6));
1:         Bundle b2 = mock(Bundle.class);
1:         when(b2.getBundleId()).thenReturn(new Long(9));
1:         
1:      
1:         when(reference.getProperty(Constants.SERVICE_ID)).thenReturn(new Long(98));
1:         when(reference.getBundle()).thenReturn(bundle);
1:         when(bundle.getBundleId()).thenReturn(new Long(34));
1:         when(reference.getProperty(Constants.OBJECTCLASS)).thenReturn(interfaces);
1:         when(reference.getUsingBundles()).thenReturn(new Bundle[] { b1, b2 });
1:         when(reference.getPropertyKeys()).thenReturn( new String[] {"x.vendor", "x.domain", "x.index", "x.optimized" } );
1:         when(reference.getProperty("x.vendor")).thenReturn("aries");
1:         when(reference.getProperty("x.domain")).thenReturn("test");
1:         when(reference.getProperty("x.index")).thenReturn(new Long(67));
1:         when(reference.getProperty("x.optimized")).thenReturn(true);
1:         
1:         
1:         ServiceData serviceData = new ServiceData(reference);
1:         
1:         CompositeData compositeData = serviceData.toCompositeData();
1:         assertEquals(new Long(98), compositeData.get(IDENTIFIER));
1:         assertEquals(new Long(34), compositeData.get(BUNDLE_IDENTIFIER));
1:         assertArrayEquals( new Long[] {new Long(6), new Long(9)}, (Long[]) compositeData.get(USING_BUNDLES));
1:         assertArrayEquals(interfaces, (String[]) compositeData.get(OBJECT_CLASS));
0:         // keep Properties for next version
0:         //TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
0:         //Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
0:         //assertEquals(4, propertyData.size());
0:         //for (CompositeData propertyRow: propertyData) {
0:         //    String key = (String) propertyRow.get(KEY);
0:         //    if (key.equals("x.vendor")) {
0:         //        assertEquals("aries", propertyRow.get(VALUE));
0:         //        assertEquals(STRING, propertyRow.get(TYPE));
0:         //    } else if (key.equals("x.domain")) {
0:         //        assertEquals("test", propertyRow.get(VALUE));
0:         //        assertEquals(STRING, propertyRow.get(TYPE));
0:         //    } else if (key.equals("x.index")) {
0:         //        assertEquals("67", propertyRow.get(VALUE));
0:         //        assertEquals(LONG, propertyRow.get(TYPE));
0:         //    } else if (key.equals("x.optimized")) {
0:         //        assertEquals("true", propertyRow.get(VALUE));
0:         //        assertEquals(BOOLEAN, propertyRow.get(TYPE));
0:         //    } else {
0:         //        fail("unknown key parsed from properties");
0:         //    }
0:         //}
1:     }
1: 
1:    
1:     @Test
1:     public void testFromCompositeData() throws Exception {
1:         
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(IDENTIFIER, new Long(99));
1:         items.put(BUNDLE_IDENTIFIER, new Long(5));
1:         items.put(USING_BUNDLES, new Long[] { new Long(10), new Long(11) });
1:         items.put(OBJECT_CLASS, new String[] { "org.apache.aries.jmx.Test", "org.apache.aries.jmx.Mock" });
0:         //TabularData propertyTable = new TabularDataSupport(PROPERTIES_TYPE);
0:         //propertyTable.put(PropertyData.newInstance("a", true).toCompositeData());
0:         //propertyTable.put(PropertyData.newInstance("b", "value").toCompositeData());
0:         //propertyTable.put(PropertyData.newInstance("c", new int[] {1, 2}).toCompositeData());
0:         //propertyTable.put(PropertyData.newInstance("d", new Long[] {new Long(3), new Long(4)}).toCompositeData());
0:         //items.put(PROPERTIES, propertyTable);
1:         CompositeData compositeData = new CompositeDataSupport(SERVICE_TYPE, items);
1:         
1:         ServiceData data = ServiceData.from(compositeData);
1:         assertEquals(99, data.getServiceId());
1:         assertEquals(5, data.getBundleId());
1:         assertArrayEquals(new long[] {10, 11}, data.getUsingBundles());
1:         assertArrayEquals(new String[] { "org.apache.aries.jmx.Test", "org.apache.aries.jmx.Mock" }, data.getServiceInterfaces());
1:         
0:         //List<PropertyData<? extends Object>> properties = data.getProperties();
0:         //assertEquals(4, properties.size());
1:         
0:         //for (PropertyData<? extends Object> property: properties) {
0:         //    if (property.getKey().equals("a")) {
0:         //        assertTrue((Boolean) property.getValue());
0:         //        assertEquals(P_BOOLEAN, property.getEncodedType());
0:         //    } else if (property.getKey().equals("b")) {
0:         //        assertEquals("value", property.getValue());
0:         //        assertEquals(STRING, property.getEncodedType());
0:         //    } else if (property.getKey().equals("c")) {
0:         //        assertArrayEquals(new int[] { 1, 2 }, (int[]) property.getValue());
0:         //        assertEquals("Array of int", property.getEncodedType());
0:         //        assertEquals("1,2", property.getEncodedValue());
0:         //    } else if (property.getKey().equals("d")) {
0:         //        assertArrayEquals(new Long[] {new Long(3), new Long(4) }, (Long[]) property.getValue());
0:         //        assertEquals("Array of Long", property.getEncodedType());
0:         //        assertEquals("3,4", property.getEncodedValue());
0:         //    } else {
0:         //        fail("unknown key parsed from properties");
0:         //    }
0:         //}       
1:     }
1: 
1: }
============================================================================