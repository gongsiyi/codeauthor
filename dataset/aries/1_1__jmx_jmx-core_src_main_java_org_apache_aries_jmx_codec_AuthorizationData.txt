1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1:fdf3952: import org.osgi.service.useradmin.Authorization;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>AuthorizationData</tt> represents Authorization Type @see {@link UserAdminMBean#AUTORIZATION_TYPE}.It is a codec
1:fdf3952:  * for the <code>CompositeData</code> representing an Authorization .
1:fdf3952:  * </p>
1:fdf3952:  * 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class AuthorizationData {
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * authorization context name.
1:fdf3952:      */
1:fdf3952:     private String name;
1:fdf3952:     /**
1:fdf3952:      * roles implied by authorization context.
1:fdf3952:      */
1:fdf3952:     private String[] roles;
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Constructs new AuthorizationData from Authorization. 
1:fdf3952:      * @param auth {@link Authorization} instance.
1:fdf3952:      */
1:fdf3952:     public AuthorizationData(Authorization auth){
1:fdf3952:         this.name = auth.getName();
1:fdf3952:         this.roles = auth.getRoles();
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * Constructs new AuthorizationData.
1:fdf3952:      * 
1:fdf3952:      * @param name of authorization context.
1:fdf3952:      * @param roles implied by authorization context.
1:fdf3952:      */
1:fdf3952:     public AuthorizationData(String name, String[] roles){
1:fdf3952:         this.name = name;
1:fdf3952:         this.roles = roles;
1:fdf3952:     }
1:fdf3952:     /**
1:fdf3952:      * Translates AuthorizationData to CompositeData represented by
1:fdf3952:      * compositeType {@link UserAdminMBean#AUTORIZATION_TYPE}.
1:fdf3952:      * 
1:fdf3952:      * @return translated AuthorizationData to compositeData.
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         try {
1:fdf3952:             Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:             items.put(UserAdminMBean.NAME, name);
1:fdf3952:             items.put(UserAdminMBean.ROLES, roles);
1:fdf3952:             return new CompositeDataSupport(UserAdminMBean.AUTORIZATION_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Can't create CompositeData" + e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method to create AuthorizationData from CompositeData object.
1:fdf3952:      * 
1:fdf3952:      * @param data {@link CompositeData} instance.
1:fdf3952:      * @return AuthorizationData instance.
1:fdf3952:      */
1:fdf3952:     public static AuthorizationData from(CompositeData data) {
1:fdf3952:         if(data == null){
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         String name = (String) data.get(UserAdminMBean.NAME);
1:fdf3952:         String[] roles = (String[]) data.get(UserAdminMBean.ROLES);
1:fdf3952:         return new AuthorizationData(name, roles);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the name
1:fdf3952:      */
1:fdf3952:     public String getName() {
1:fdf3952:         return name;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @return the roles
1:fdf3952:      */
1:fdf3952:     public String[] getRoles() {
1:fdf3952:         return roles;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1: import org.osgi.service.useradmin.Authorization;
1: 
1: /**
1:  * <p>
1:  * <tt>AuthorizationData</tt> represents Authorization Type @see {@link UserAdminMBean#AUTORIZATION_TYPE}.It is a codec
1:  * for the <code>CompositeData</code> representing an Authorization .
1:  * </p>
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class AuthorizationData {
1:     
1:     /**
1:      * authorization context name.
1:      */
1:     private String name;
1:     /**
1:      * roles implied by authorization context.
1:      */
1:     private String[] roles;
1:     
1:     /**
1:      * Constructs new AuthorizationData from Authorization. 
1:      * @param auth {@link Authorization} instance.
1:      */
1:     public AuthorizationData(Authorization auth){
1:         this.name = auth.getName();
1:         this.roles = auth.getRoles();
1:     }
1:     
1:     /**
1:      * Constructs new AuthorizationData.
1:      * 
1:      * @param name of authorization context.
1:      * @param roles implied by authorization context.
1:      */
1:     public AuthorizationData(String name, String[] roles){
1:         this.name = name;
1:         this.roles = roles;
1:     }
1:     /**
1:      * Translates AuthorizationData to CompositeData represented by
1:      * compositeType {@link UserAdminMBean#AUTORIZATION_TYPE}.
1:      * 
1:      * @return translated AuthorizationData to compositeData.
1:      */
1:     public CompositeData toCompositeData() {
1:         try {
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(UserAdminMBean.NAME, name);
1:             items.put(UserAdminMBean.ROLES, roles);
1:             return new CompositeDataSupport(UserAdminMBean.AUTORIZATION_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData" + e);
1:         }
1:     }
1: 
1:     /**
1:      * Static factory method to create AuthorizationData from CompositeData object.
1:      * 
1:      * @param data {@link CompositeData} instance.
1:      * @return AuthorizationData instance.
1:      */
1:     public static AuthorizationData from(CompositeData data) {
1:         if(data == null){
1:             return null;
1:         }
1:         String name = (String) data.get(UserAdminMBean.NAME);
1:         String[] roles = (String[]) data.get(UserAdminMBean.ROLES);
1:         return new AuthorizationData(name, roles);
1:     }
1: 
1:     /**
1:      * @return the name
1:      */
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     /**
1:      * @return the roles
1:      */
1:     public String[] getRoles() {
1:         return roles;
1:     }
1: 
1: }
============================================================================