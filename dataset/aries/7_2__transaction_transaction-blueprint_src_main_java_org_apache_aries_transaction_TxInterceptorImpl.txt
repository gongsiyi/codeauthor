1:6f219fd: /*
1:6f219fd:  * Licensed to the Apache Software Foundation (ASF) under one
1:6f219fd:  * or more contributor license agreements.  See the NOTICE file
1:6f219fd:  * distributed with this work for additional information
1:6f219fd:  * regarding copyright ownership.  The ASF licenses this file
1:6f219fd:  * to you under the Apache License, Version 2.0 (the
1:6f219fd:  * "License"); you may not use this file except in compliance
1:6f219fd:  * with the License.  You may obtain a copy of the License at
1:6f219fd:  *
1:6f219fd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6f219fd:  *
1:6f219fd:  * Unless required by applicable law or agreed to in writing,
1:6f219fd:  * software distributed under the License is distributed on an
1:6f219fd:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6f219fd:  * KIND, either express or implied.  See the License for the
1:6f219fd:  * specific language governing permissions and limitations
1:6f219fd:  * under the License.
1:6f219fd:  */
1:6f219fd: package org.apache.aries.transaction;
2:e04c7d6: 
1:6f219fd: import java.lang.reflect.Method;
1:835913e: 
1:bd98451: import javax.transaction.RollbackException;
1:6f219fd: import javax.transaction.Transaction;
1:6f219fd: import javax.transaction.TransactionManager;
1:bd98451: import javax.transaction.Transactional.TxType;
1:3fef792: 
1:6f219fd: import org.apache.aries.blueprint.Interceptor;
1:6f219fd: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:706f1c1: import org.osgi.service.coordinator.Coordination;
1:835913e: import org.osgi.service.coordinator.Coordinator;
1:6f219fd: import org.slf4j.Logger;
1:6f219fd: import org.slf4j.LoggerFactory;
1:3fef792: 
1:6f219fd: public class TxInterceptorImpl implements Interceptor {
1:e91e2c8:     private static final Logger LOGGER = LoggerFactory.getLogger(TxInterceptorImpl.class);
1:e04c7d6: 
1:6f219fd:     private TransactionManager tm;
1:835913e:     private Coordinator coordinator;
1:bd98451:     private ComponentTxData txData;
1:bd98451: 
1:bd98451:     public TxInterceptorImpl(TransactionManager tm, Coordinator coordinator, ComponentTxData txData) {
1:bd98451:         this.tm = tm;
1:bd98451:         this.coordinator = coordinator;
1:bd98451:         this.txData = txData;
1:bd98451:     }
1:e91e2c8: 
1:2ad9527:     @Override
1:e91e2c8:     public int getRank() {
1:e91e2c8:         return 1; // Higher rank than jpa interceptor to make sure transaction is started first
1:835913e:     }
1:e91e2c8: 
1:2ad9527:     @Override
1:e91e2c8:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable {
1:bd98451:         final TxType type = txData.getEffectiveType(m);
1:e91e2c8:         if (type == null) {
1:bd98451:             // No transaction
1:e91e2c8:             return null;
1:e91e2c8:         }
1:e91e2c8:         TransactionAttribute txAttribute = TransactionAttribute.fromValue(type);
1:e91e2c8: 
1:e91e2c8:         LOGGER.debug("PreCall for bean {}, method {} with tx strategy {}.", getCmId(cm), m.getName(), txAttribute);
1:e91e2c8:         TransactionToken token = txAttribute.begin(tm);
1:706f1c1:         String coordName = "txInterceptor." + m.getDeclaringClass().getName() + "." + m.getName();
1:706f1c1:         Coordination coord = coordinator.begin(coordName , 0);
1:706f1c1:         token.setCoordination(coord);
1:e91e2c8:         return token;
1:835913e:     }
1:e91e2c8: 
1:2ad9527:     @Override
1:e91e2c8:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) {
1:e91e2c8:         if (!(preCallToken instanceof TransactionToken)) {
1:e91e2c8:             return;
1:835913e:         }
1:bd98451:         LOGGER.debug("PostCallWithException for bean {}, method {}.", getCmId(cm), m.getName(), ex);
1:e91e2c8:         final TransactionToken token = (TransactionToken)preCallToken;
1:628523f:         safeEndCoordination(token);
1:28b7f4b:         try {
1:e91e2c8:             Transaction tran = token.getActiveTransaction();
1:e91e2c8:             if (tran != null && isRollBackException(ex)) {
1:e91e2c8:                 tran.setRollbackOnly();
1:459e3d9:                 LOGGER.debug("Setting transaction to rollback only because of exception ", ex);
1:e91e2c8:             }
2:e91e2c8:             token.getTransactionAttribute().finish(tm, token);
3:e91e2c8:         } catch (Exception e) {
1:e91e2c8:             // we do not throw the exception since there already is one, but we need to log it
1:e91e2c8:             LOGGER.warn("Exception during transaction cleanup", e);
1:e91e2c8:         }
1:e91e2c8:     }
1:e91e2c8: 
1:2ad9527:     @Override
1:e91e2c8:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken)
1:e91e2c8:         throws Exception {
1:e91e2c8:         LOGGER.debug("PostCallWithReturn for bean {}, method {}.", getCmId(cm), m);
1:e91e2c8:         // it is possible transaction is not involved at all
1:e91e2c8:         if (preCallToken == null) {
1:e91e2c8:             return;
1:e91e2c8:         }
1:2ad9527:         if (!(preCallToken instanceof TransactionToken)) {
1:2ad9527:             throw new IllegalStateException("Expected a TransactionToken from preCall but got " + preCallToken);
1:2ad9527:         }
1:2ad9527:         final TransactionToken token = (TransactionToken)preCallToken;
1:628523f:         safeEndCoordination(token);
1:2ad9527:         try {
1:2ad9527:             token.getTransactionAttribute().finish(tm, token);
1:2ad9527:         } catch (Exception e) {
1:2ad9527:             // We are throwing an exception, so we don't error it out
1:2ad9527:             LOGGER.debug("Exception while completing transaction.", e);
1:2ad9527:             RollbackException rbe = new javax.transaction.RollbackException();
1:2ad9527:             rbe.addSuppressed(e);
1:2ad9527:             throw rbe;
1:e91e2c8:         }
1:e91e2c8:     }
1:628523f: 
1:628523f:     private void safeEndCoordination(final TransactionToken token) {
1:628523f:         try {
1:628523f:             if (token != null && token.getCoordination() != null) {
1:628523f:                 token.getCoordination().end();
1:628523f:             }
1:628523f:         } catch (Exception e){
1:628523f:             LOGGER.debug(e.getMessage(), e);
1:628523f:         }
1:628523f:     }
1:2ad9527:     
1:2ad9527:     private static String getCmId(ComponentMetadata cm) {
1:2ad9527:         return cm == null ? null : cm.getId();
1:2ad9527:     }
1:e91e2c8: 
1:2ad9527:     private static boolean isRollBackException(Throwable ex) {
1:835913e:         return ex instanceof RuntimeException || ex instanceof Error;
1:28b7f4b:     }
1:835913e: 
1:835913e: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:628523f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         safeEndCoordination(token);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         safeEndCoordination(token);
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void safeEndCoordination(final TransactionToken token) {
1:         try {
1:             if (token != null && token.getCoordination() != null) {
1:                 token.getCoordination().end();
1:             }
1:         } catch (Exception e){
1:             LOGGER.debug(e.getMessage(), e);
1:         }
1:     }
commit:2ad9527
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         if (!(preCallToken instanceof TransactionToken)) {
1:             throw new IllegalStateException("Expected a TransactionToken from preCall but got " + preCallToken);
1:         }
1:         final TransactionToken token = (TransactionToken)preCallToken;
0:         token.getCoordination().end();
1:         try {
1:             token.getTransactionAttribute().finish(tm, token);
1:         } catch (Exception e) {
1:             // We are throwing an exception, so we don't error it out
1:             LOGGER.debug("Exception while completing transaction.", e);
1:             RollbackException rbe = new javax.transaction.RollbackException();
1:             rbe.addSuppressed(e);
1:             throw rbe;
1:     
1:     private static String getCmId(ComponentMetadata cm) {
1:         return cm == null ? null : cm.getId();
1:     }
1:     private static boolean isRollBackException(Throwable ex) {
commit:459e3d9
/////////////////////////////////////////////////////////////////////////
1:                 LOGGER.debug("Setting transaction to rollback only because of exception ", ex);
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.RollbackException;
1: import javax.transaction.Transactional.TxType;
/////////////////////////////////////////////////////////////////////////
1:     private ComponentTxData txData;
1: 
1:     public TxInterceptorImpl(TransactionManager tm, Coordinator coordinator, ComponentTxData txData) {
1:         this.tm = tm;
1:         this.coordinator = coordinator;
1:         this.txData = txData;
1:     }
1:         final TxType type = txData.getEffectiveType(m);
1:             // No transaction
/////////////////////////////////////////////////////////////////////////
1:         LOGGER.debug("PostCallWithException for bean {}, method {}.", getCmId(cm), m.getName(), ex);
/////////////////////////////////////////////////////////////////////////
0:                 LOGGER.info("Setting transaction to rollback only because of exception ", ex);
/////////////////////////////////////////////////////////////////////////
0:                 RollbackException rbe = new javax.transaction.RollbackException();
0:                 rbe.addSuppressed(e);
0:                 throw rbe;
/////////////////////////////////////////////////////////////////////////
commit:32aa11b
/////////////////////////////////////////////////////////////////////////
0:                 LOGGER.debug("Exception while completing transaction.", e);
commit:28b7f4b
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.coordinator.CoordinationException;
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             token.getCoordination().end();
0:         } catch (CoordinationException e){
0:             LOGGER.debug(e.getMessage(), e);
1:         }
commit:706f1c1
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordination;
/////////////////////////////////////////////////////////////////////////
1:         String coordName = "txInterceptor." + m.getDeclaringClass().getName() + "." + m.getName();
1:         Coordination coord = coordinator.begin(coordName , 0);
1:         token.setCoordination(coord);
/////////////////////////////////////////////////////////////////////////
0:         token.getCoordination().end();
/////////////////////////////////////////////////////////////////////////
0:             token.getCoordination().end();
/////////////////////////////////////////////////////////////////////////
commit:1bfa1d3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         coordinator.begin("txInterceptor." + m.getDeclaringClass().getName() + "." + m.getName() , 0);
/////////////////////////////////////////////////////////////////////////
0:             coordinator.pop().end();
commit:3e293b7
/////////////////////////////////////////////////////////////////////////
0:     // Workaround for bug in coordinator 1.0.0 where coordinations are considered orhpaned sometimes
0:     private ThreadLocal<Coordination> localCoordination = new ThreadLocal<Coordination>();
/////////////////////////////////////////////////////////////////////////
0:         localCoordination.set(coordinator.begin("txInterceptor." + m.getDeclaringClass().getName() + "." + m.getName() , 0));
/////////////////////////////////////////////////////////////////////////
0:             localCoordination.set(null);
commit:e91e2c8
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOGGER = LoggerFactory.getLogger(TxInterceptorImpl.class);
1: 
1:     public int getRank() {
1:         return 1; // Higher rank than jpa interceptor to make sure transaction is started first
1:     public Object preCall(ComponentMetadata cm, Method m, Object... parameters) throws Throwable {
0:         final String methodName = m.getName();
0:         final TransactionPropagationType type = metaDataHelper.getComponentMethodTxAttribute(cm, methodName);
1: 
0:         // attribute could be null here which means no transaction
1:         if (type == null) {
1:             return null;
1:         }
1:         TransactionAttribute txAttribute = TransactionAttribute.fromValue(type);
1: 
1:         LOGGER.debug("PreCall for bean {}, method {} with tx strategy {}.", getCmId(cm), m.getName(), txAttribute);
1:         TransactionToken token = txAttribute.begin(tm);
0:         coordinator.begin("txInterceptor", 0);
1:         return token;
1:     public void postCallWithException(ComponentMetadata cm, Method m, Throwable ex, Object preCallToken) {
0:         LOGGER.debug("PostCallWithException for bean {}, method {}.", getCmId(cm), m.getName(), ex);
1:         if (!(preCallToken instanceof TransactionToken)) {
1:             return;
0:         try {
1:             Transaction tran = token.getActiveTransaction();
1:             if (tran != null && isRollBackException(ex)) {
1:                 tran.setRollbackOnly();
1:             }
1:             token.getTransactionAttribute().finish(tm, token);
1:         } catch (Exception e) {
1:             // we do not throw the exception since there already is one, but we need to log it
1:             LOGGER.warn("Exception during transaction cleanup", e);
1:     }
1: 
0:     private String getCmId(ComponentMetadata cm) {
0:         return cm == null ? null : cm.getId();
1:     }
1: 
1:     public void postCallWithReturn(ComponentMetadata cm, Method m, Object returnType, Object preCallToken)
1:         throws Exception {
1:         LOGGER.debug("PostCallWithReturn for bean {}, method {}.", getCmId(cm), m);
1:         // it is possible transaction is not involved at all
1:         if (preCallToken == null) {
1:             return;
0:         endCoordination();
0:         if (preCallToken instanceof TransactionToken) {
1:             final TransactionToken token = (TransactionToken)preCallToken;
0:             try {
1:                 token.getTransactionAttribute().finish(tm, token);
1:             } catch (Exception e) {
0:                 // We are throwing an exception, so we don't error it out
0:                 LOGGER.debug(Constants.MESSAGES.getMessage("exception.during.tx.finish"), e);
0:                 throw new TransactionRollbackException(e);
1:             }
0:         } else {
0:             // TODO: what now?
1:         }
0:             Coordination coord = coordinator.pop();
0:             coord.end();
1:         } catch (Exception e) {
0:             LOGGER.warn("Error ending coordination ", e);
1:         }
0:     public final void setTransactionManager(TransactionManager manager) {
0:         tm = manager;
1: 
0:     public void setCoordinator(Coordinator coordinator) {
0:     public final void setTxMetaDataHelper(TxComponentMetaDataHelper transactionEnhancer) {
0:         this.metaDataHelper = transactionEnhancer;
commit:835913e
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Coordinator;
/////////////////////////////////////////////////////////////////////////
1:     private Coordinator coordinator;
/////////////////////////////////////////////////////////////////////////
0:       TransactionToken token = txAttribute.begin(tm);
0:       coordinator.begin("txInterceptor", 0);
0:       return token;
/////////////////////////////////////////////////////////////////////////
0:          return;
0:        endCoordination();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         endCoordination();
/////////////////////////////////////////////////////////////////////////
0:     private void endCoordination() {
0:         try {
0:              Coordination coord = coordinator.pop();
0:              coord.end();
0:            } catch (Exception e) {
0:              LOGGER.warn("Error ending coordination ", e);
1:            }
1:     }
1: 
0:     private boolean isRollBackException(Throwable ex) {
1:         return ex instanceof RuntimeException || ex instanceof Error;
1:     }
1:     
0:     public void setCoordinator(Coordinator coordinator)
0:     {
0:         this.coordinator = coordinator;
1:     }
commit:3fef792
/////////////////////////////////////////////////////////////////////////
0:       return 1; // Higher rank than jpa interceptor to make sure transaction is started first
/////////////////////////////////////////////////////////////////////////
0:       if (LOGGER.isDebugEnabled()) {
0:           LOGGER.debug("Calling begin for method {} with tx strategy {}.", m, txAttribute);
0:       }
0:        if (!(preCallToken instanceof TransactionToken))
0:            return;
0:        final TransactionToken token = (TransactionToken)preCallToken;
0:        try { 
0:          Transaction tran = token.getActiveTransaction();
0:          if (tran != null && isRollBackException(ex)) {
0:              tran.setRollbackOnly();
0:          }
1: 
0:          token.getTransactionAttribute().finish(tm, token);
0:        }
0:        catch (Exception e)
0:        {
0:          // we do not throw the exception since there already is one, but we need to log it
0:          LOGGER.warn(Constants.MESSAGES.getMessage("exception.during.tx.cleanup"), e);
0:        }
0:     }
1: 
0:     private boolean isRollBackException(Throwable ex) {
0:         return ex instanceof RuntimeException || ex instanceof Error;
commit:e04c7d6
/////////////////////////////////////////////////////////////////////////
0:     public Object preCall(ComponentMetadata cm, Method m,
0:         Object... parameters) throws Throwable  {
0:       final String methodName = m.getName();
0:       final TransactionPropagationType type = metaDataHelper.getComponentMethodTxAttribute(cm, methodName);
1:       
0:       // attribute could be null here which means no transaction
0:       if (type == null) {
0:           return null;
0:       }
0:       TransactionAttribute txAttribute = TransactionAttribute.fromValue(type);
1:       
0:       if (LOGGER.isDebugEnabled())
0:           LOGGER.debug("Method: " + m + ", has transaction strategy: " + txAttribute);
0:       return txAttribute.begin(tm);
0:     }
1:     
/////////////////////////////////////////////////////////////////////////
commit:aa15c54
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.transaction.annotations.TransactionPropagationType;
/////////////////////////////////////////////////////////////////////////
0:       final TransactionPropagationType type = metaDataHelper.getComponentMethodTxAttribute(cm, methodName);
0:       if (type == null) {
0:       TransactionAttribute txAttribute = TransactionAttribute.fromValue(type);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:d014f6c
/////////////////////////////////////////////////////////////////////////
0:            LOGGER.warn(Constants.MESSAGES.getMessage("exception.during.tx.cleanup"), e);
/////////////////////////////////////////////////////////////////////////
0:           LOGGER.debug(Constants.MESSAGES.getMessage("exception.during.tx.finish"), e);
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:e190694
/////////////////////////////////////////////////////////////////////////
0:            LOGGER.warn("An exception occurred during transaction clean up, which will be discared in favour of an exception" +
0:            		" already thrown.", e);
commit:20de94a
/////////////////////////////////////////////////////////////////////////
0:           // We are throwing an exception, so we don't error it out
0:           LOGGER.debug("An exception has occured.", e);
commit:b664100
/////////////////////////////////////////////////////////////////////////
0:         Throwable ex, Object preCallToken)
/////////////////////////////////////////////////////////////////////////
0:                  if (ex instanceof RuntimeException || ex instanceof Error) {
0:                  } else {
0:                      //declared exception, we don't set rollback
0:                  }
commit:5c15102
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOGGER =
0:         LoggerFactory.getLogger(TxInterceptorImpl.class);
/////////////////////////////////////////////////////////////////////////
0:              Transaction tran = token.getActiveTransaction();
0:              if (tran != null) {
0:                  Class<?> exceptionClass = ex.getClass();
0:                  boolean isAppException = false;
0: 
0:                  for (Class<?> cls : m.getExceptionTypes()) {
0:                      isAppException = cls.isAssignableFrom(exceptionClass);
0:                      
0:                      if (isAppException)
0:                          break;
0:                  }
0: 
0:                  if (!isAppException)
0:                      tran.setRollbackOnly();
0:              }
0: 
0:              token.getTransactionStrategy().finish(tm, token);
0:            LOGGER.error("An exception has occured.", e);
/////////////////////////////////////////////////////////////////////////
0:            token.getTransactionStrategy().finish(tm, token);
0:           LOGGER.error("An exception has occured.", e);
/////////////////////////////////////////////////////////////////////////
0:       
0:       if (LOGGER.isDebugEnabled())
0:           LOGGER.debug("Method: " + m + ", has transaction strategy: " + txStrategy);
0:       return txStrategy.begin(tm);
/////////////////////////////////////////////////////////////////////////
author:Lin Sun
-------------------------------------------------------------------------------
commit:c34631b
/////////////////////////////////////////////////////////////////////////
0:         // it is possible transaction is not involved at all
0:         if (preCallToken == null) {
0:             return;          
0:         }
0:         
/////////////////////////////////////////////////////////////////////////
0:       // attribute could be null here which means no transaction
0:       if (attribute == null) {
0:           return null;
0:       }
commit:92e371f
/////////////////////////////////////////////////////////////////////////
0:              token.getTransactionAttribute().finish(tm, token);
/////////////////////////////////////////////////////////////////////////
0:            token.getTransactionAttribute().finish(tm, token);
/////////////////////////////////////////////////////////////////////////
0:       final String attribute = metaDataHelper.getComponentMethodTxAttribute(cm, methodName);
0:       TransactionAttribute txAttribute = TransactionAttribute.fromValue(attribute);
0:           LOGGER.debug("Method: " + m + ", has transaction strategy: " + txAttribute);
0:       return txAttribute.begin(tm);
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:207e21d
/////////////////////////////////////////////////////////////////////////
0:                  if (!RuntimeException.class.isAssignableFrom(exceptionClass)) {
0:                      for (Class<?> cls : m.getExceptionTypes()) {
0:                          isAppException = cls.isAssignableFrom(exceptionClass);
0: 
0:                          if (isAppException)
0:                              break;
0:                      }
commit:6f219fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction;
0: 
1: import java.lang.reflect.Method;
0: 
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
0: 
1: import org.apache.aries.blueprint.Interceptor;
0: import org.apache.aries.transaction.exception.TransactionRollbackException;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 
0: 
1: public class TxInterceptorImpl implements Interceptor {
0:     private static final Logger _logger =
0:         LoggerFactory.getLogger("org.apache.aries.transaction");
0: 
1:     private TransactionManager tm;
0:     private TxComponentMetaDataHelper metaDataHelper;
0: 
0:     public int getRank()
0:     {
0:       // TODO Auto-generated method stub
0:       return 0;
0:     }
0: 
0:     public void postCallWithException(ComponentMetadata cm, Method m,
0:         Exception ex, Object preCallToken)
0:      {
0:        if (preCallToken instanceof TransactionToken)
0:        {
0:          final TransactionToken token = (TransactionToken)preCallToken;
0:          try { 
0:             token.ts.finish(tm, token.t);
0:          }
0:          catch (Exception e)
0:          {
0:            // we do not throw the exception since there already is one, but we need to log it
0:            _logger.error("An exception has occured.", e);
0:          }
0:        } else {
0:          // TODO: what now?
0:        }
0:     }
0: 
0:     public void postCallWithReturn(ComponentMetadata cm, Method m,
0:         Object returnType, Object preCallToken) throws Exception
0:     {
0:       if (preCallToken instanceof TransactionToken)
0:       {
0:         final TransactionToken token = (TransactionToken)preCallToken;
0:         try { 
0:            token.ts.finish(tm, token.t);
0:         }
0:         catch (Exception e)
0:         {
0:           _logger.error("An exception has occured.", e);
0:           throw new TransactionRollbackException(e);
0:         }
0:       }
0:       else {
0:         // TODO: what now?
0:       }
0:     }
0: 
0:     public Object preCall(ComponentMetadata cm, Method m,
0:         Object... parameters) throws Throwable  {
0:       // extract bundleId, componentName and method name
0:       // then lookup using metadatahelper
0:       // build transtrategy and call begin
0:       // store resulting tx and strategy in return object
0:       // which will be passed to postInvoke call
0:       final String methodName = m.getName();
0:         
0:       final String strategy = metaDataHelper.getComponentMethodTxStrategy(cm, methodName);
0: 
0:       Transaction t;
0:       TransactionStrategy txStrategy = TransactionStrategy.REQUIRED;
0:       if (strategy != null)
0:       {
0:         txStrategy = TransactionStrategy.fromValue(strategy);
0:       }
0: 
0:       t = txStrategy.begin(tm);
0: 
0:       // now construct return object from txStrategy and t
0:       return new TransactionToken(t, txStrategy);
0:     }
0: 
0:     public final void setTransactionManager(TransactionManager manager)
0:     {
0:       tm = manager;
0:     }
0: 
0:     public final void setTxMetaDataHelper(TxComponentMetaDataHelper transactionEnhancer)
0:     {
0:       this.metaDataHelper = transactionEnhancer;
0:     }  
0: 
0:     private static class TransactionToken
0:     {
0:        private Transaction t;
0:        private TransactionStrategy ts;
0:        private TransactionToken(Transaction t, TransactionStrategy ts)
0:        {
0:          this.t = t;
0:          this.ts = ts;
0:        }
0:     }
0: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:951731d
/////////////////////////////////////////////////////////////////////////
0:       
0:       TransactionStrategy txStrategy = TransactionStrategy.fromValue(strategy);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:3fbf745
============================================================================