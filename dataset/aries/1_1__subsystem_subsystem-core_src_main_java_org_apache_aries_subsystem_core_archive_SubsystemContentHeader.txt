1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
7:547a8ce: 
1:1129914: import java.util.ArrayList;
1:1129914: import java.util.Collection;
1:4717af0: import java.util.List;
1:547a8ce: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1:1129914: import org.osgi.framework.Version;
1:deca8ed: import org.osgi.framework.VersionRange;
1:3b4e485: import org.osgi.framework.namespace.IdentityNamespace;
1:3b4e485: import org.osgi.resource.Capability;
1:428e9f1: import org.osgi.resource.Requirement;
1:71fe81a: import org.osgi.resource.Resource;
1:875a6d6: import org.osgi.service.subsystem.SubsystemConstants;
1:547a8ce: 
1:2ffcfb9: public class SubsystemContentHeader extends AbstractClauseBasedHeader<SubsystemContentHeader.Clause> implements RequirementHeader<SubsystemContentHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:2ffcfb9: 		public static final String ATTRIBUTE_VERSION = VersionRangeAttribute.NAME_VERSION;
1:547a8ce: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
1:547a8ce: 		public static final String DIRECTIVE_RESOLUTION = ResolutionDirective.NAME;
1:547a8ce: 		public static final String DIRECTIVE_STARTORDER = StartOrderDirective.NAME;
1:547a8ce: 		
1:3b4e485: 		private static final Collection<Parameter> defaultParameters = generateDefaultParameters(
1:3b4e485: 				// A default value for the type attribute is not included here
1:3b4e485: 				// because we need to determine in the constructor whether or 
1:3b4e485: 				// not it was specified as part of the original value.
1:3b4e485: 				// See ARIES-1425.
1:3b4e485: 				VersionRangeAttribute.DEFAULT_VERSION,
1:3b4e485: 				ResolutionDirective.MANDATORY,
1:3b4e485: 				// This is an implementation specific start-order directive
1:3b4e485: 				// value. The specification states there is no default value.
1:3b4e485: 				new StartOrderDirective("0"));
1:3b4e485: 		
1:3b4e485: 		// Was the type attribute specified as part of the original value?
1:3b4e485: 		private final boolean isTypeSpecified;
1:3b4e485: 		private final String originalValue;
1:3b4e485: 		
1:547a8ce: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9: 					parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:2ffcfb9: 					parseParameters(clause, true),
1:3b4e485: 					defaultParameters);
1:3b4e485: 			if (parameters.get(TypeAttribute.NAME) == null) {
1:3b4e485: 				// The resource type was not specified.
1:3b4e485: 				isTypeSpecified = false;
1:3b4e485: 				// Add the default type.
1:3b4e485: 				parameters.put(TypeAttribute.NAME, TypeAttribute.DEFAULT);
1:3b4e485: 			}
1:3b4e485: 			else {
1:3b4e485: 				// The resource type was specified.
1:3b4e485: 				isTypeSpecified = true;
1:3b4e485: 			}
1:3b4e485: 			originalValue = clause;
2:547a8ce: 		}
1:547a8ce: 		
1:547a8ce: 		public String getSymbolicName() {
2:547a8ce: 			return path;
1:547a8ce: 		}
1:547a8ce: 		
1:4717af0: 		public int getStartOrder() {
1:547a8ce: 			return ((StartOrderDirective)getDirective(DIRECTIVE_STARTORDER)).getStartOrder();
1:547a8ce: 		}
1:547a8ce: 		
1:1129914: 		public String getType() {
1:547a8ce: 			return ((TypeAttribute)getAttribute(ATTRIBUTE_TYPE)).getType();
1:547a8ce: 		}
1:547a8ce: 		
1:226c63f: 		public VersionRange getVersionRange() {
1:547a8ce: 			return ((VersionRangeAttribute)getAttribute(ATTRIBUTE_VERSION)).getVersionRange();
1:547a8ce: 		}
1:547a8ce: 		
1:1129914: 		public boolean isMandatory() {
1:547a8ce: 			return ((ResolutionDirective)getDirective(DIRECTIVE_RESOLUTION)).isMandatory();
1:547a8ce: 		}
1:547a8ce: 		
1:3b4e485: 		public boolean isTypeSpecified() {
1:3b4e485: 			return isTypeSpecified;
1:3b4e485: 		}
1:3b4e485: 		
1:4b41d3d: 		public SubsystemContentRequirement toRequirement(Resource resource) {
1:4b41d3d: 			return new SubsystemContentRequirement(this, resource);
1:547a8ce: 		}
1:3b4e485: 		
1:3b4e485: 		@Override
1:3b4e485: 	    public String toString() {
1:3b4e485: 	        return originalValue;
1:3b4e485: 	    }
1:547a8ce: 	}
1:547a8ce: 	
1:875a6d6: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_CONTENT;
1:547a8ce: 	
1:547a8ce: 	public static SubsystemContentHeader newInstance(Collection<Resource> resources) {
2:547a8ce: 		StringBuilder builder = new StringBuilder();
1:875a6d6: 		for (Resource resource : resources) {
1:547a8ce: 			appendResource(resource, builder);
1:547a8ce: 			builder.append(',');
1:547a8ce: 		}
1:875a6d6: 		// Remove the trailing comma.
1:547a8ce: 		// TODO Intentionally letting the exception propagate since there must be at least one resource.
2:547a8ce: 		builder.deleteCharAt(builder.length() - 1);
1:547a8ce: 		return new SubsystemContentHeader(builder.toString());
1:547a8ce: 	}
1:547a8ce: 	
1:547a8ce: 	private static StringBuilder appendResource(Resource resource, StringBuilder builder) {
1:547a8ce: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:547a8ce: 		Version version = ResourceHelper.getVersionAttribute(resource);
1:547a8ce: 		String type = ResourceHelper.getTypeAttribute(resource);
1:547a8ce: 		builder.append(symbolicName)
2:547a8ce: 			.append(';')
1:547a8ce: 			.append(Clause.ATTRIBUTE_VERSION)
1:a990e32: 			.append("=\"[")
1:547a8ce: 			.append(version.toString())
1:a990e32: 			.append(',')
1:a990e32: 			.append(version.toString())
1:a990e32: 			.append("]\";")
1:547a8ce: 			.append(Clause.ATTRIBUTE_TYPE)
2:547a8ce: 			.append('=')
1:547a8ce: 			.append(type);
1:547a8ce: 		return builder;
1:547a8ce: 	}
1:547a8ce: 	
1:3b4e485: 	private final String originalValue;
1:547a8ce: 	
1:547a8ce: 	public SubsystemContentHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:3b4e485: 		originalValue = value;
1:547a8ce: 	}
1:547a8ce: 	
2:547a8ce: 	public boolean contains(Resource resource) {
1:547a8ce: 		return getClause(resource) != null;
1:547a8ce: 	}
1:547a8ce: 	
1:547a8ce: 	public Clause getClause(Resource resource) {
1:3b4e485: 		Capability capability = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0);
1:547a8ce: 		for (Clause clause : clauses) {
1:3b4e485: 			Requirement requirement = clause.toRequirement(resource);
1:3b4e485: 			if (ResourceHelper.matches(requirement, capability)) {
1:547a8ce: 				return clause;
1:3b4e485: 			}
1:547a8ce: 		}
1:3b4e485: 		return null;		
1:547a8ce: 	}
1:547a8ce: 	
1:23d86e6: 	public boolean isMandatory(Resource resource) {
1:547a8ce: 		Clause clause = getClause(resource);
1:547a8ce: 		if (clause == null)
1:547a8ce: 			return false;
1:547a8ce: 		return clause.isMandatory();
1:547a8ce: 	}
1:547a8ce: 
11:547a8ce: 	@Override
1:547a8ce: 	public String getName() {
1:547a8ce: 		return NAME;
1:547a8ce: 	}
1:547a8ce: 
1:547a8ce: 	@Override
1:547a8ce: 	public String getValue() {
1:3b4e485: 		return originalValue;
1:547a8ce: 	}
1:547a8ce: 
1:547a8ce: 	@Override
1:547a8ce: 	public List<Requirement> toRequirements(Resource resource) {
1:547a8ce: 		List<Requirement> requirements = new ArrayList<Requirement>(clauses.size());
1:547a8ce: 		for (Clause clause : clauses)
1:547a8ce: 			requirements.add(clause.toRequirement(resource));
1:547a8ce: 		return requirements;
1:3b4e485: 	}
1:3b4e485: 	
1:3b4e485: 	@Override
1:3b4e485:     public String toString() {
1:3b4e485:         return originalValue;
1:547a8ce:     }
1:547a8ce: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: 			.append("=\"[")
1: 			.append(',')
1: 			.append(version.toString())
1: 			.append("]\";")
commit:3b4e485
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Capability;
/////////////////////////////////////////////////////////////////////////
1: 		private static final Collection<Parameter> defaultParameters = generateDefaultParameters(
1: 				// A default value for the type attribute is not included here
1: 				// because we need to determine in the constructor whether or 
1: 				// not it was specified as part of the original value.
1: 				// See ARIES-1425.
1: 				VersionRangeAttribute.DEFAULT_VERSION,
1: 				ResolutionDirective.MANDATORY,
1: 				// This is an implementation specific start-order directive
1: 				// value. The specification states there is no default value.
1: 				new StartOrderDirective("0"));
1: 		
1: 		// Was the type attribute specified as part of the original value?
1: 		private final boolean isTypeSpecified;
1: 		private final String originalValue;
1: 		
1: 					defaultParameters);
1: 			if (parameters.get(TypeAttribute.NAME) == null) {
1: 				// The resource type was not specified.
1: 				isTypeSpecified = false;
1: 				// Add the default type.
1: 				parameters.put(TypeAttribute.NAME, TypeAttribute.DEFAULT);
1: 			}
1: 			else {
1: 				// The resource type was specified.
1: 				isTypeSpecified = true;
1: 			}
1: 			originalValue = clause;
/////////////////////////////////////////////////////////////////////////
1: 		public boolean isTypeSpecified() {
1: 			return isTypeSpecified;
1: 		}
1: 		
1: 		
1: 		@Override
1: 	    public String toString() {
1: 	        return originalValue;
1: 	    }
/////////////////////////////////////////////////////////////////////////
1: 	private final String originalValue;
/////////////////////////////////////////////////////////////////////////
1: 		originalValue = value;
/////////////////////////////////////////////////////////////////////////
1: 		Capability capability = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0);
1: 			Requirement requirement = clause.toRequirement(resource);
1: 			if (ResourceHelper.matches(requirement, capability)) {
1: 			}
1: 		return null;		
/////////////////////////////////////////////////////////////////////////
1: 		return originalValue;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	@Override
1:     public String toString() {
1:         return originalValue;
1:     }
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class SubsystemContentHeader extends AbstractClauseBasedHeader<SubsystemContentHeader.Clause> implements RequirementHeader<SubsystemContentHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1: 		public static final String ATTRIBUTE_VERSION = VersionRangeAttribute.NAME_VERSION;
1: 			super(
1: 					parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1: 					parseParameters(clause, true),
0: 					generateDefaultParameters(
0: 							TypeAttribute.DEFAULT,
0: 							VersionRangeAttribute.DEFAULT_VERSION,
0: 							ResolutionDirective.MANDATORY,
0: 							// This is an implementation specific start-order directive
0: 							// value. The specification states there is no default value.
0: 							new StartOrderDirective("0")));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		super(clauses);
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
0: 		for (String clause : clauseStrs)
commit:4b41d3d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		public SubsystemContentRequirement toRequirement(Resource resource) {
1: 			return new SubsystemContentRequirement(this, resource);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:547a8ce
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
0: public class SubsystemContentHeader implements RequirementHeader<SubsystemContentHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		public static final String ATTRIBUTE_VERSION = VersionRangeAttribute.NAME;
1: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
1: 		public static final String DIRECTIVE_RESOLUTION = ResolutionDirective.NAME;
1: 		public static final String DIRECTIVE_STARTORDER = StartOrderDirective.NAME;
0: 		private static final Pattern PATTERN_SYMBOLICNAME = Pattern.compile('(' + Grammar.SYMBOLICNAME + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(ATTRIBUTE_TYPE);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_TYPE, TypeAttribute.DEFAULT);
0: 			parameter = parameters.get(ATTRIBUTE_VERSION);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_VERSION, VersionRangeAttribute.DEFAULT);
0: 			parameter = parameters.get(DIRECTIVE_RESOLUTION);
0: 			if (parameter == null)
0: 				parameters.put(DIRECTIVE_RESOLUTION, ResolutionDirective.MANDATORY);
0: 			parameter = parameters.get(DIRECTIVE_STARTORDER);
0: 			if (parameter == null)
0: 				// This is an implementation specific start-order directive
0: 				// value. The specification states there is no default value.
0: 				parameters.put(DIRECTIVE_STARTORDER, new StartOrderDirective("0"));
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_SYMBOLICNAME.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Missing symbolic name path: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				if (parameter instanceof VersionAttribute)
0: 					parameter = new VersionRangeAttribute(new VersionRange(String.valueOf(parameter.getValue())));
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
0: 		public Clause(Resource resource) {
0: 			this(appendResource(resource, new StringBuilder()).toString());
1: 		}
1: 		
1: 		public boolean contains(Resource resource) {
0: 			return getSymbolicName().equals(
0: 					ResourceHelper.getSymbolicNameAttribute(resource))
0: 					&& getVersionRange().includes(
0: 							ResourceHelper.getVersionAttribute(resource))
0: 					&& getType().equals(
0: 							ResourceHelper.getTypeAttribute(resource));
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute)
0: 				return (Attribute)result;
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values())
0: 				if (parameter instanceof Attribute)
0: 					attributes.add((Attribute)parameter);
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive)
0: 				return (Directive)result;
0: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values())
0: 				if (parameter instanceof Directive)
0: 					directives.add((Directive)parameter);
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 
1: 		@Override
0: 		public String getPath() {
1: 			return path;
1: 		}
1: 		
1: 		public String getSymbolicName() {
1: 			return path;
1: 			return ((StartOrderDirective)getDirective(DIRECTIVE_STARTORDER)).getStartOrder();
1: 			return ((TypeAttribute)getAttribute(ATTRIBUTE_TYPE)).getType();
1: 			return ((VersionRangeAttribute)getAttribute(ATTRIBUTE_VERSION)).getVersionRange();
1: 			return ((ResolutionDirective)getDirective(DIRECTIVE_RESOLUTION)).isMandatory();
0: 		public OsgiIdentityRequirement toRequirement(Resource resource) {
0: 			return new OsgiIdentityRequirement(getSymbolicName(), getVersionRange(), getType(), false);
1: 		@Override
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
0: //	public static class Content {
0: //		private final boolean mandatory;
0: //		private final String name;
0: //		private final int startOrder;
0: //		private final String type;
0: //		private final VersionRange versionRange;
0: //		
0: //		public Content(boolean mandatory, String name, String type, VersionRange versionRange, int startOrder) {
0: //			this.mandatory = mandatory;
0: //			this.name = name;
0: //			this.type = type;
0: //			this.versionRange = versionRange;
0: //			this.startOrder = startOrder;
0: //		}
0: //		
0: //		public String getName() {
0: //			return name;
0: //		}
0: //		
0: //		public int getStartOrder() {
0: //			return startOrder;
0: //		}
0: //		
0: //		public String getType() {
0: //			return type;
0: //		}
0: //		
0: //		public VersionRange getVersionRange() {
0: //			return versionRange;
0: //		}
0: //		
0: //		public boolean isMandatory() {
0: //			return mandatory;
0: //		}
0: //		
0: //		public Requirement toRequirement() {
0: //			return new OsgiIdentityRequirement(name, versionRange, type, false);
0: //		}
0: //		
0: //		public String toString() {
0: //			return new StringBuilder(getName())
0: //				.append(';')
0: //				.append(VersionAttribute.NAME)
0: //				.append('=')
0: //				.append(getVersionRange())
0: //				.append(';')
0: //				.append(TypeAttribute.NAME)
0: //				.append("=")
0: //				.append(getType())
0: //				.append(';')
0: //				.append(ResolutionDirective.NAME)
0: //				.append(":=")
0: //				.append(isMandatory())
0: //				.append(';')
0: //				.append(StartOrderDirective.NAME)
0: //				.append(":=")
0: //				.append(getStartOrder())
0: //				.toString();
0: //		}
0: //	}
1: 	
1: 	public static SubsystemContentHeader newInstance(Collection<Resource> resources) {
1: 		StringBuilder builder = new StringBuilder();
1: 			appendResource(resource, builder);
1: 			builder.append(',');
1: 		// TODO Intentionally letting the exception propagate since there must be at least one resource.
1: 		builder.deleteCharAt(builder.length() - 1);
1: 		return new SubsystemContentHeader(builder.toString());
1: 	private static StringBuilder appendResource(Resource resource, StringBuilder builder) {
1: 		builder.append(symbolicName)
1: 			.append(';')
1: 			.append(Clause.ATTRIBUTE_VERSION)
1: 			.append('=')
1: 			.append(version.toString())
1: 			.append(';')
1: 			.append(Clause.ATTRIBUTE_TYPE)
1: 			.append('=')
1: 			.append(type);
1: 		return builder;
1: 	}
1: 	
0: 	private static Collection<Clause> processHeader(String value) {
0: 		Collection<String> clauseStrs = new ClauseTokenizer(value).getClauses();
0: 		Set<Clause> clauses = new HashSet<Clause>(clauseStrs.size());
0: 		for (String clause : new ClauseTokenizer(value).getClauses())
0: 			clauses.add(new Clause(clause));
0: 		return clauses;
1: 	}
1: 	
0: //	private static String processResources(Collection<Resource> resources) {
0: //		if (resources.isEmpty())
0: //			throw new IllegalArgumentException("At least one resource must be specified");
0: //		StringBuilder sb = new StringBuilder();
0: //		for (Resource resource : resources) {
0: //			Capability c = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0);
0: //			Map<String, Object> a = c.getAttributes();
0: //			String s = (String)a.get(IdentityNamespace.IDENTITY_NAMESPACE);
0: //			Version v = (Version)a.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE);
0: //			String t = (String)a.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
0: //			sb.append(s).append(';')
0: //				.append(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE).append('=').append(v).append(';')
0: //				.append(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE).append('=').append(t).append(',');
0: //		}
0: //		// Remove the trailing comma.
0: //		sb.deleteCharAt(sb.length() - 1);
0: //		return sb.toString();
0: //	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	
0: 	public SubsystemContentHeader(Collection<Clause> clauses) {
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A " + NAME + " header must have at least one clause");
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
1: 	
1: 	public SubsystemContentHeader(String value) {
0: 		this(processHeader(value));
1: 	}
1: 	
0: //	public SubsystemContentHeader(Collection<Resource> resources) {
0: //		this(processResources(resources));
0: //	}
1: 	
1: 	public boolean contains(Resource resource) {
1: 		return getClause(resource) != null;
1: 	}
1: 	
1: 	public Clause getClause(Resource resource) {
1: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1: 		Version version = ResourceHelper.getVersionAttribute(resource);
1: 		String type = ResourceHelper.getTypeAttribute(resource);
1: 		for (Clause clause : clauses) {
0: 			if (symbolicName.equals(clause.getPath())
0: 					&& clause.getVersionRange().includes(version)
0: 					&& type.equals(clause.getType()))
1: 				return clause;
1: 	
1: 	@Override
0: 	public Collection<SubsystemContentHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
0: //	public Content getContent(Resource resource) {
0: //		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
0: //		Version version = ResourceHelper.getVersionAttribute(resource);
0: //		String type = ResourceHelper.getTypeAttribute(resource);
0: //		for (Content content : contents) {
0: //			if (symbolicName.equals(content.getName())
0: //					&& content.getVersionRange().includes(version)
0: //					&& type.equals(content.getType()))
0: //				return content;
0: //		}
0: //		return null;
0: //	}
0: //
0: //	public Collection<Content> getContents() {
0: //		return Collections.unmodifiableCollection(contents);
0: //	}
1: 	
1: 		Clause clause = getClause(resource);
1: 		if (clause == null)
1: 			return false;
1: 		return clause.isMandatory();
0: //		Content content = getContent(resource);
0: //		return content == null ? false : content.isMandatory();
0: //	public List<Requirement> toRequirements() {
0: //		ArrayList<Requirement> result = new ArrayList<Requirement>(contents.size());
0: //		for (Content content : contents)
0: //			result.add(content.toRequirement());
0: //		return result;
0: //	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
0: 		return toString();
1: 	}
1: 
1: 	@Override
1: 	public List<Requirement> toRequirements(Resource resource) {
1: 		List<Requirement> requirements = new ArrayList<Requirement>(clauses.size());
1: 		for (Clause clause : clauses)
1: 			requirements.add(clause.toRequirement(resource));
1: 		return requirements;
1: 	}
1: 	
1: 	@Override
0: 	public String toString() {
1: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
1: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
commit:2ac6b1a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 			int startOrder = -1;
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public Content getContent(Resource resource) {
0: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
0: 		Version version = ResourceHelper.getVersionAttribute(resource);
0: 		String type = ResourceHelper.getTypeAttribute(resource);
0: 		for (Content content : contents) {
0: 			if (symbolicName.equals(content.getName())
0: 					&& content.getVersionRange().includes(version)
0: 					&& type.equals(content.getType()))
0: 				return content;
0: 		}
0: 		return null;
0: 	}
/////////////////////////////////////////////////////////////////////////
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.ResourceHelper;
commit:23d86e6
/////////////////////////////////////////////////////////////////////////
0: 		return getContent(resource) != null;
1: 	public boolean isMandatory(Resource resource) {
0: 		Content content = getContent(resource);
0: 		return content == null ? false : content.isMandatory();
0: 	}
0: 	
0: 	
0: 	private Content getContent(Resource resource) {
0: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
0: 		Version version = ResourceHelper.getVersionAttribute(resource);
0: 		String type = ResourceHelper.getTypeAttribute(resource);
0: 		for (Content content : contents) {
0: 			if (symbolicName.equals(content.getName())
0: 					&& content.getVersionRange().includes(version)
0: 					&& type.equals(content.getType()))
0: 				return content;
0: 		}
0: 		return null;
0: 	}
commit:428e9f1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.internal.OsgiIdentityRequirement;
1: import org.osgi.resource.Requirement;
/////////////////////////////////////////////////////////////////////////
0: 		public Requirement toRequirement() {
0: 			return new OsgiIdentityRequirement(name, versionRange, type, false);
0: 		}
0: 		
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public List<Requirement> toRequirements() {
0: 		ArrayList<Requirement> result = new ArrayList<Requirement>(contents.size());
0: 		for (Content content : contents)
0: 			result.add(content.toRequirement());
0: 		return result;
0: 	}
commit:875a6d6
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import org.osgi.framework.namespace.IdentityNamespace;
0: import org.osgi.resource.Capability;
1: import org.osgi.service.subsystem.SubsystemConstants;
/////////////////////////////////////////////////////////////////////////
1: 	public static final String NAME = SubsystemConstants.SUBSYSTEM_CONTENT;
0: 	
0: 	private static String processResources(Collection<Resource> resources) {
0: 		if (resources.isEmpty())
0: 			throw new IllegalArgumentException("At least one resource must be specified");
0: 		StringBuilder sb = new StringBuilder();
1: 		for (Resource resource : resources) {
0: 			Capability c = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0);
0: 			Map<String, Object> a = c.getAttributes();
0: 			String s = (String)a.get(IdentityNamespace.IDENTITY_NAMESPACE);
0: 			Version v = (Version)a.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE);
0: 			String t = (String)a.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
0: 			sb.append(s).append(';')
0: 				.append(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE).append('=').append(v).append(';')
0: 				.append(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE).append('=').append(t).append(',');
0: 		}
1: 		// Remove the trailing comma.
0: 		sb.deleteCharAt(sb.length() - 1);
0: 		return sb.toString();
0: 	}
/////////////////////////////////////////////////////////////////////////
0: 	public SubsystemContentHeader(Collection<Resource> resources) {
0: 		this(processResources(resources));
0: 	}
0: 	
commit:26123d8
/////////////////////////////////////////////////////////////////////////
0: 				versionRange = new VersionRange(String.valueOf(attribute.getValue()));
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.VersionRange;
/////////////////////////////////////////////////////////////////////////
0: 					&& content.getVersionRange().includes(version)
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.ResourceHelper;
0: import org.osgi.framework.resource.Resource;
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public boolean contains(Resource resource) {
0: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
0: 		Version version = ResourceHelper.getVersionAttribute(resource);
0: 		String type = ResourceHelper.getTypeAttribute(resource);
0: 		for (Content content : contents) {
0: 			if (symbolicName.equals(content.getName())
0: 					&& content.getVersionRange().matches(version)
0: 					&& type.equals(content.getType()))
0: 				return true;
0: 		}
0: 		return false;
0: 	}
commit:732a67a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.VersionRange;
commit:4717af0
/////////////////////////////////////////////////////////////////////////
0: import java.util.Comparator;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: 		private final int startOrder;
0: 		public Content(boolean mandatory, String name, String type, VersionRange versionRange, int startOrder) {
0: 			this.startOrder = startOrder;
1: 		public int getStartOrder() {
0: 			return startOrder;
0: 		}
0: 		
/////////////////////////////////////////////////////////////////////////
0: 				.append(';')
0: 				.append(StartOrderDirective.NAME)
0: 				.append(":=")
0: 				.append(getStartOrder())
/////////////////////////////////////////////////////////////////////////
0: 	private final List<Content> contents;
/////////////////////////////////////////////////////////////////////////
0: 			int startOrder = StartOrderDirective.DEFAULT_VALUE;
0: 			directive = clause.getDirective(StartOrderDirective.NAME);
0: 			if (directive != null)
0: 				startOrder = ((StartOrderDirective)directive).getStartOrder();
0: 			contents.add(new Content(mandatory, name, type, versionRange, startOrder));
0: 		Collections.sort(contents, new Comparator<Content>() {
0: 			@Override
0: 			public int compare(Content content1, Content content2) {
0: 				return ((Integer)content1.getStartOrder()).compareTo(content2.getStartOrder());
0: 			}
0: 		});
commit:226c63f
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.VersionRange;
0: 		private final VersionRange versionRange;
0: 		public Content(boolean mandatory, String name, String type, VersionRange versionRange) {
0: 			this.versionRange = versionRange;
/////////////////////////////////////////////////////////////////////////
1: 		public VersionRange getVersionRange() {
0: 			return versionRange;
/////////////////////////////////////////////////////////////////////////
0: 				.append(getVersionRange())
/////////////////////////////////////////////////////////////////////////
0: 			VersionRange versionRange = new VersionRange(Version.emptyVersion.toString());
0: 			if (attribute != null) {
0: 				versionRange = new VersionRange(attribute.getValue());
0: 			}
0: 			contents.add(new Content(mandatory, name, type, versionRange));
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
0: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Collections;
0: 
0: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
0: 
0: public class SubsystemContentHeader extends AbstractHeader {
0: 	public static class Content {
0: 		private final boolean mandatory;
0: 		private final String name;
0: 		private final String type;
0: 		private final Version version;
0: 		
0: 		public Content(boolean mandatory, String name, String type, Version version) {
0: 			this.mandatory = mandatory;
0: 			this.name = name;
0: 			this.type = type;
0: 			this.version = version;
0: 		}
0: 		
0: 		public String getName() {
0: 			return name;
0: 		}
0: 		
1: 		public String getType() {
0: 			return type;
0: 		}
0: 		
0: 		public Version getVersion() {
0: 			return version;
0: 		}
0: 		
1: 		public boolean isMandatory() {
0: 			return mandatory;
0: 		}
0: 		
0: 		public String toString() {
0: 			return new StringBuilder(getName())
0: 				.append(';')
0: 				.append(VersionAttribute.NAME)
0: 				.append('=')
0: 				.append(getVersion())
0: 				.append(';')
0: 				.append(TypeAttribute.NAME)
0: 				.append("=")
0: 				.append(getType())
0: 				.append(';')
0: 				.append(ResolutionDirective.NAME)
0: 				.append(":=")
0: 				.append(isMandatory())
0: 				.toString();
0: 		}
0: 	}
0: 	
0: 	// TODO Add to constants.
0: 	public static final String NAME = "Subsystem-Content";
0: 	
0: 	private final Collection<Content> contents;
0: 	
0: 	public SubsystemContentHeader(String value) {
0: 		super(NAME, value);
0: 		contents = new ArrayList<Content>(clauses.size());
0: 		for (Clause clause : clauses) {
0: 			boolean mandatory = true;
0: 			Directive directive = clause.getDirective(ResolutionDirective.NAME);
0: 			if (directive != null)
0: 				mandatory = ((ResolutionDirective)directive).isMandatory();
0: 			String name = clause.getPath();
0: 			// TODO Assumes all resources are bundles.
0: 			String type = TypeAttribute.DEFAULT_VALUE;
0: 			Attribute attribute = clause.getAttribute(TypeAttribute.NAME);
0: 			if (attribute != null)
0: 				type = ((TypeAttribute)attribute).getType();
0: 			Version version = Version.emptyVersion;
0: 			attribute = clause.getAttribute(Constants.VERSION_ATTRIBUTE);
0: 			if (attribute != null)
0: 				version = ((VersionAttribute)attribute).getVersion();
0: 			contents.add(new Content(mandatory, name, type, version));
0: 		}
0: 	}
0: 
0: 	public Collection<Content> getContents() {
0: 		return Collections.unmodifiableCollection(contents);
0: 	}
0: }
============================================================================