1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
2:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
21:fdf3952: 
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.fromString;
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.primitiveTypes;
1:fdf3952: import static org.apache.aries.jmx.util.TypeUtils.types;
1:fdf3952: import static org.osgi.jmx.JmxConstants.ARRAY_OF;
1:fdf3952: import static org.osgi.jmx.JmxConstants.KEY;
1:fdf3952: import static org.osgi.jmx.JmxConstants.PROPERTY_TYPE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_BYTE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_CHAR;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_DOUBLE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_FLOAT;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_INT;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_LONG;
1:fdf3952: import static org.osgi.jmx.JmxConstants.TYPE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.VALUE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.VECTOR_OF;
1:fdf3952: 
1:fdf3952: import java.lang.reflect.Array;
1:fdf3952: import java.util.HashMap;
1:255bc84: import java.util.List;
1:fdf3952: import java.util.Map;
1:fdf3952: import java.util.StringTokenizer;
1:fdf3952: import java.util.Vector;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>PropertyData</tt> represents Property Type @see {@link JmxConstants#PROPERTY_TYPE}. It is a codec for the
1:fdf3952:  * <code>CompositeData</code> representing a Property with an associated Type and Value.
1:fdf3952:  * </p>
1:255bc84:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class PropertyData<T> {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see JmxConstants#KEY_ITEM
1:fdf3952:      */
1:fdf3952:     private String key;
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * @see JmxConstants#SCALAR
1:fdf3952:      */
1:fdf3952:     private T value;
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * @see JmxConstants#VALUE_ITEM
1:fdf3952:      */
1:fdf3952:     private String encodedValue;
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * @see JmxConstants#TYPE_ITEM
1:fdf3952:      */
1:fdf3952:     private String encodedType;
1:255bc84: 
1:fdf3952:     private PropertyData() {
1:fdf3952:         super();
1:fdf3952:     }
1:255bc84: 
1:255bc84: 
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     private PropertyData(String key, T value, String preservedBaseType) throws IllegalArgumentException {
1:fdf3952:         if (key == null) {
1:fdf3952:             throw new IllegalArgumentException("Argument key cannot be null");
1:fdf3952:         }
1:fdf3952:         if (value == null) {
1:fdf3952:             throw new IllegalArgumentException("Argument value cannot be null");
1:fdf3952:         }
1:fdf3952:         this.key = key;
1:fdf3952:         this.value = value;
1:fdf3952:         Class<T> type = (Class<T>) value.getClass();
1:fdf3952:         if (type.isArray()) {
1:fdf3952:             this.encodedType = ARRAY_OF + type.getComponentType().getSimpleName();
1:fdf3952:             StringBuilder builder = new StringBuilder();
1:fdf3952:             int length = Array.getLength(value);
1:fdf3952:             boolean useDelimiter = false;
1:fdf3952:             for (int i = 0; i < length; i++) {
1:fdf3952:                 if (useDelimiter) {
1:fdf3952:                     builder.append(",");
1:fdf3952:                 } else {
1:fdf3952:                     useDelimiter = true;
1:fdf3952:                 }
1:fdf3952:                 builder.append(Array.get(value, i));
1:fdf3952:             }
1:fdf3952:             this.encodedValue = builder.toString();
1:fdf3952:         } else if (type.equals(Vector.class)) {
1:255bc84:             Vector<?> vector = (Vector<?>) value;
1:fdf3952:             Class<? extends Object> componentType = Object.class;
1:fdf3952:             if (vector.size() > 0) {
1:fdf3952:                 componentType = vector.firstElement().getClass();
1:fdf3952:             }
1:fdf3952:             this.encodedType = VECTOR_OF + componentType.getSimpleName();
1:fdf3952:             StringBuilder builder = new StringBuilder();
1:255bc84:             Vector<?> valueVector = (Vector<?>) value;
1:fdf3952:             boolean useDelimiter = false;
1:255bc84:             for (Object val : valueVector) {
1:fdf3952:                 if (useDelimiter) {
1:fdf3952:                     builder.append(",");
1:fdf3952:                 } else {
1:fdf3952:                     useDelimiter = true;
1:fdf3952:                 }
1:fdf3952:                 builder.append(val);
1:fdf3952:             }
1:fdf3952:             this.encodedValue = builder.toString();
1:255bc84:         } else if (List.class.isAssignableFrom(type)) {
1:255bc84:             // Lists are encoded as Arrays...
1:255bc84:             List<?> list = (List<?>) value;
1:255bc84:             Class<?> componentType = Object.class;
1:255bc84:             if (list.size() > 0)
1:255bc84:                 componentType = list.get(0).getClass();
1:255bc84: 
1:255bc84:             this.encodedType = ARRAY_OF + componentType.getSimpleName();
1:255bc84:             StringBuilder builder = new StringBuilder();
1:255bc84:             boolean useDelimiter = false;
1:255bc84:             for (Object o : list) {
1:255bc84:                 if (useDelimiter) {
1:255bc84:                     builder.append(",");
1:255bc84:                 } else {
1:255bc84:                     useDelimiter = true;
1:255bc84:                 }
1:255bc84:                 builder.append(o);
1:255bc84:             }
1:255bc84:             this.encodedValue = builder.toString();
1:fdf3952:         } else {
1:fdf3952:             this.encodedType = (preservedBaseType == null) ? type.getSimpleName() : preservedBaseType;
1:fdf3952:             this.encodedValue = value.toString();
1:fdf3952:         }
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method for <code>PropertyData</code> instance parameterized by value's type
1:fdf3952:      * @param <T>
1:fdf3952:      * @param key
1:fdf3952:      * @param value an instance of {@link JmxConstants#SCALAR}
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:fdf3952:      */
1:fdf3952:     public static <T> PropertyData<T> newInstance(String key, T value) throws IllegalArgumentException {
1:fdf3952:         return new PropertyData<T>(key, value, null);
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
1:255bc84:      * information for primitive int type
1:fdf3952:      * @param key
1:fdf3952:      * @param value
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:fdf3952:      */
1:fdf3952:     public static PropertyData<Integer> newInstance(String key, int value) throws IllegalArgumentException {
1:fdf3952:         return new PropertyData<Integer>(key, value, P_INT);
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
1:255bc84:      * information for primitive long type
1:fdf3952:      * @param key
1:fdf3952:      * @param value
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:fdf3952:      */
1:fdf3952:     public static PropertyData<Long> newInstance(String key, long value) throws IllegalArgumentException {
1:fdf3952:         return new PropertyData<Long>(key, value, P_LONG);
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
1:255bc84:      * information for primitive float type
1:fdf3952:      * @param key
1:fdf3952:      * @param value
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:fdf3952:      */
1:fdf3952:     public static PropertyData<Float> newInstance(String key, float value) throws IllegalArgumentException {
1:fdf3952:         return new PropertyData<Float>(key, value, P_FLOAT);
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
1:255bc84:      * information for primitive double type
1:fdf3952:      * @param key
1:fdf3952:      * @param value
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:fdf3952:      */
1:fdf3952:     public static PropertyData<Double> newInstance(String key, double value) throws IllegalArgumentException {
1:fdf3952:         return new PropertyData<Double>(key, value, P_DOUBLE);
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
1:255bc84:      * information for primitive byte type
1:fdf3952:      * @param key
1:fdf3952:      * @param value
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:fdf3952:      */
1:fdf3952:     public static PropertyData<Byte> newInstance(String key, byte value) throws IllegalArgumentException {
1:fdf3952:         return new PropertyData<Byte>(key, value, P_BYTE);
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
1:255bc84:      * information for primitive char type
1:fdf3952:      * @param key
1:fdf3952:      * @param value
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:fdf3952:      */
1:fdf3952:     public static PropertyData<Character> newInstance(String key, char value) throws IllegalArgumentException {
1:fdf3952:         return new PropertyData<Character>(key, value, P_CHAR);
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
1:255bc84:      * information for primitive boolean type
1:fdf3952:      * @param key
1:fdf3952:      * @param value
1:fdf3952:      * @return
1:fdf3952:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:fdf3952:      */
1:fdf3952:     public static PropertyData<Boolean> newInstance(String key, boolean value) throws IllegalArgumentException {
1:fdf3952:         return new PropertyData<Boolean>(key, value, P_BOOLEAN);
1:fdf3952:     }
1:255bc84: 
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Returns CompositeData representing a Property typed by {@link JmxConstants#PROPERTY_TYPE}.
1:fdf3952:      * @return
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         CompositeData result = null;
1:fdf3952:         Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:         items.put(KEY, this.key);
1:fdf3952:         items.put(VALUE, this.encodedValue);
1:fdf3952:         items.put(TYPE, this.encodedType);
1:fdf3952:         try {
1:fdf3952:             result = new CompositeDataSupport(PROPERTY_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Failed to create CompositeData for Property [" + this.key + ":" + this.value + "]", e);
1:fdf3952:         }
1:fdf3952:         return result;
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     /**
1:fdf3952:      * Constructs a <code>PropertyData</code> object from the given <code>CompositeData</code>
1:fdf3952:      * @param compositeData
1:fdf3952:      * @return
1:fdf3952:      * @throws IlleglArgumentException if compositeData is null or not of type {@link JmxConstants#PROPERTY_TYPE}
1:fdf3952:      */
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     public static <T> PropertyData<T> from(CompositeData compositeData) throws IllegalArgumentException {
1:fdf3952:         if ( compositeData == null ) {
1:fdf3952:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:fdf3952:         }
1:fdf3952:         if (!compositeData.getCompositeType().equals(PROPERTY_TYPE)) {
1:fdf3952:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:fdf3952:         }
1:fdf3952:         PropertyData propertyData = new PropertyData();
1:fdf3952:         propertyData.key = (String) compositeData.get(KEY);
1:fdf3952:         propertyData.encodedType = (String) compositeData.get(TYPE);
1:fdf3952:         propertyData.encodedValue = (String) compositeData.get(VALUE);
1:fdf3952:         if (propertyData.encodedType == null || propertyData.encodedType.length() < 1) {
1:fdf3952:             throw new IllegalArgumentException ("Cannot determine type from compositeData : " + compositeData);
1:fdf3952:         }
1:fdf3952:         StringTokenizer values = new StringTokenizer(propertyData.encodedValue, ",");
1:fdf3952:         int valuesLength = values.countTokens();
1:fdf3952:         if (propertyData.encodedType.startsWith(ARRAY_OF)) {
1:fdf3952:             String[] arrayTypeParts = propertyData.encodedType.split("\\s");
1:fdf3952:             if (arrayTypeParts.length < 3) {
1:fdf3952:                 throw new IllegalArgumentException("Cannot parse Array type from type item : " + propertyData.encodedType);
1:fdf3952:             }
1:fdf3952:             String arrayTypeName = arrayTypeParts[2].trim();
1:fdf3952:             if (!types.containsKey(arrayTypeName)) {
1:fdf3952:                 throw new IllegalArgumentException ("Cannot determine type from value : " + arrayTypeName);
1:fdf3952:             }
1:fdf3952:             Class<? extends Object> arrayType = types.get(arrayTypeName);
1:fdf3952:             propertyData.value = Array.newInstance(arrayType, valuesLength);
1:fdf3952:             int index = 0;
1:fdf3952:             while (values.hasMoreTokens()) {
1:fdf3952:                 Array.set(propertyData.value, index++, fromString(arrayType, values.nextToken()));
1:fdf3952:             }
1:fdf3952:         } else if (propertyData.encodedType.startsWith(VECTOR_OF)) {
1:fdf3952:             String[] vectorTypeParts = propertyData.encodedType.split("\\s");
1:fdf3952:             if (vectorTypeParts.length < 3) {
1:fdf3952:                 throw new IllegalArgumentException("Cannot parse Array type from type item : " + propertyData.encodedType);
1:fdf3952:             }
1:fdf3952:             String vectorTypeName = vectorTypeParts[2].trim();
1:fdf3952:             if (!types.containsKey(vectorTypeName)) {
1:fdf3952:                 throw new IllegalArgumentException ("Cannot determine type from value : " + vectorTypeName);
1:fdf3952:             }
1:fdf3952:             Class<? extends Object> vectorType = types.get(vectorTypeName);
1:fdf3952:             Vector vector = new Vector();
1:fdf3952:             while (values.hasMoreTokens()) {
1:fdf3952:                 vector.add(fromString(vectorType, values.nextToken()));
1:fdf3952:             }
1:fdf3952:             propertyData.value = vector;
1:fdf3952:         } else {
1:fdf3952:             if (!types.containsKey(propertyData.encodedType)) {
1:fdf3952:                 throw new IllegalArgumentException ("Cannot determine type from value : " + propertyData.encodedType);
1:fdf3952:             }
1:fdf3952:             Class<? extends Object> valueType = types.get(propertyData.encodedType);
1:fdf3952:             propertyData.value = fromString(valueType, propertyData.encodedValue);
1:fdf3952:         }
1:fdf3952:         return propertyData;
1:fdf3952:     }
1:255bc84: 
1:255bc84: 
1:fdf3952:     public String getKey() {
1:fdf3952:         return key;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public T getValue() {
1:fdf3952:         return value;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String getEncodedType() {
1:fdf3952:         return encodedType;
1:fdf3952:     }
1:255bc84: 
1:fdf3952:     public String getEncodedValue() {
1:fdf3952:         return encodedValue;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public boolean isEncodingPrimitive() {
1:fdf3952:         return primitiveTypes.containsKey(encodedType);
1:fdf3952:     }
1:255bc84: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:255bc84
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             Vector<?> vector = (Vector<?>) value;
1:             Vector<?> valueVector = (Vector<?>) value;
1:             for (Object val : valueVector) {
/////////////////////////////////////////////////////////////////////////
1:         } else if (List.class.isAssignableFrom(type)) {
1:             // Lists are encoded as Arrays...
1:             List<?> list = (List<?>) value;
1:             Class<?> componentType = Object.class;
1:             if (list.size() > 0)
1:                 componentType = list.get(0).getClass();
1: 
1:             this.encodedType = ARRAY_OF + componentType.getSimpleName();
1:             StringBuilder builder = new StringBuilder();
1:             boolean useDelimiter = false;
1:             for (Object o : list) {
1:                 if (useDelimiter) {
1:                     builder.append(",");
1:                 } else {
1:                     useDelimiter = true;
1:                 }
1:                 builder.append(o);
1:             }
1:             this.encodedValue = builder.toString();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * information for primitive int type
/////////////////////////////////////////////////////////////////////////
1: 
1:      * information for primitive long type
/////////////////////////////////////////////////////////////////////////
1: 
1:      * information for primitive float type
/////////////////////////////////////////////////////////////////////////
1: 
1:      * information for primitive double type
/////////////////////////////////////////////////////////////////////////
1: 
1:      * information for primitive byte type
/////////////////////////////////////////////////////////////////////////
1: 
1:      * information for primitive char type
/////////////////////////////////////////////////////////////////////////
1: 
1:      * information for primitive boolean type
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import static org.apache.aries.jmx.util.TypeUtils.fromString;
1: import static org.apache.aries.jmx.util.TypeUtils.primitiveTypes;
1: import static org.apache.aries.jmx.util.TypeUtils.types;
1: import static org.osgi.jmx.JmxConstants.ARRAY_OF;
1: import static org.osgi.jmx.JmxConstants.KEY;
1: import static org.osgi.jmx.JmxConstants.PROPERTY_TYPE;
1: import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
1: import static org.osgi.jmx.JmxConstants.P_BYTE;
1: import static org.osgi.jmx.JmxConstants.P_CHAR;
1: import static org.osgi.jmx.JmxConstants.P_DOUBLE;
1: import static org.osgi.jmx.JmxConstants.P_FLOAT;
1: import static org.osgi.jmx.JmxConstants.P_INT;
1: import static org.osgi.jmx.JmxConstants.P_LONG;
1: import static org.osgi.jmx.JmxConstants.TYPE;
1: import static org.osgi.jmx.JmxConstants.VALUE;
1: import static org.osgi.jmx.JmxConstants.VECTOR_OF;
1: 
1: import java.lang.reflect.Array;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.StringTokenizer;
1: import java.util.Vector;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.jmx.JmxConstants;
1: 
1: /**
1:  * <p>
1:  * <tt>PropertyData</tt> represents Property Type @see {@link JmxConstants#PROPERTY_TYPE}. It is a codec for the
1:  * <code>CompositeData</code> representing a Property with an associated Type and Value.
1:  * </p>
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class PropertyData<T> {
1: 
1:     /**
1:      * @see JmxConstants#KEY_ITEM
1:      */
1:     private String key;
1:     
1:     /**
1:      * @see JmxConstants#SCALAR
1:      */
1:     private T value;
1:     
1:     /**
1:      * @see JmxConstants#VALUE_ITEM
1:      */
1:     private String encodedValue;
1:     
1:     /**
1:      * @see JmxConstants#TYPE_ITEM
1:      */
1:     private String encodedType;
1:     
1:     private PropertyData() {
1:         super();
1:     }
1:     
1:     
1:     @SuppressWarnings("unchecked")
1:     private PropertyData(String key, T value, String preservedBaseType) throws IllegalArgumentException {
1:         if (key == null) {
1:             throw new IllegalArgumentException("Argument key cannot be null");
1:         }
1:         if (value == null) {
1:             throw new IllegalArgumentException("Argument value cannot be null");
1:         }
1:         this.key = key;
1:         this.value = value;
1:         Class<T> type = (Class<T>) value.getClass();
1:         if (type.isArray()) {
1:             this.encodedType = ARRAY_OF + type.getComponentType().getSimpleName();
1:             StringBuilder builder = new StringBuilder();
1:             int length = Array.getLength(value);
1:             boolean useDelimiter = false;
1:             for (int i = 0; i < length; i++) {
1:                 if (useDelimiter) {
1:                     builder.append(",");
1:                 } else {
1:                     useDelimiter = true;
1:                 }
1:                 builder.append(Array.get(value, i));
1:             }
1:             this.encodedValue = builder.toString();
1:         } else if (type.equals(Vector.class)) {
0:             Vector vector = (Vector) value;
1:             Class<? extends Object> componentType = Object.class;
1:             if (vector.size() > 0) {
1:                 componentType = vector.firstElement().getClass();
1:             }
1:             this.encodedType = VECTOR_OF + componentType.getSimpleName();
1:             StringBuilder builder = new StringBuilder();
0:             Vector valueVector = (Vector) value;
1:             boolean useDelimiter = false;
0:             for (Object val: valueVector) {
1:                 if (useDelimiter) {
1:                     builder.append(",");
1:                 } else {
1:                     useDelimiter = true;
1:                 }
1:                 builder.append(val);
1:             }
1:             this.encodedValue = builder.toString();
1:         } else {
1:             this.encodedType = (preservedBaseType == null) ? type.getSimpleName() : preservedBaseType;
1:             this.encodedValue = value.toString();
1:         }
1:     }
1:     
1:     /**
1:      * Static factory method for <code>PropertyData</code> instance parameterized by value's type
1:      * @param <T>
1:      * @param key
1:      * @param value an instance of {@link JmxConstants#SCALAR}
1:      * @return
1:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:      */
1:     public static <T> PropertyData<T> newInstance(String key, T value) throws IllegalArgumentException {
1:         return new PropertyData<T>(key, value, null);
1:     }
1:     
1:     /**
1:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
0:      * information for primitive int type 
1:      * @param key
1:      * @param value
1:      * @return
1:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:      */
1:     public static PropertyData<Integer> newInstance(String key, int value) throws IllegalArgumentException {
1:         return new PropertyData<Integer>(key, value, P_INT);
1:     }
1:     
1:     /**
1:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
0:      * information for primitive long type 
1:      * @param key
1:      * @param value
1:      * @return
1:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:      */
1:     public static PropertyData<Long> newInstance(String key, long value) throws IllegalArgumentException {
1:         return new PropertyData<Long>(key, value, P_LONG);
1:     }
1:   
1:     /**
1:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
0:      * information for primitive float type 
1:      * @param key
1:      * @param value
1:      * @return
1:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:      */
1:     public static PropertyData<Float> newInstance(String key, float value) throws IllegalArgumentException {
1:         return new PropertyData<Float>(key, value, P_FLOAT);
1:     }
1:     
1:     /**
1:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
0:      * information for primitive double type 
1:      * @param key
1:      * @param value
1:      * @return
1:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:      */
1:     public static PropertyData<Double> newInstance(String key, double value) throws IllegalArgumentException {
1:         return new PropertyData<Double>(key, value, P_DOUBLE);
1:     }
1:     
1:     /**
1:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
0:      * information for primitive byte type 
1:      * @param key
1:      * @param value
1:      * @return
1:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:      */
1:     public static PropertyData<Byte> newInstance(String key, byte value) throws IllegalArgumentException {
1:         return new PropertyData<Byte>(key, value, P_BYTE);
1:     }
1:     
1:     /**
1:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
0:      * information for primitive char type 
1:      * @param key
1:      * @param value
1:      * @return
1:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:      */
1:     public static PropertyData<Character> newInstance(String key, char value) throws IllegalArgumentException {
1:         return new PropertyData<Character>(key, value, P_CHAR);
1:     }
1:     
1:     /**
1:      * Static factory method for <code>PropertyData</code> instance which preserves encoded type
0:      * information for primitive boolean type 
1:      * @param key
1:      * @param value
1:      * @return
1:      * @throws IllegalArgumentException if key or value are null or value's type cannot be encoded
1:      */
1:     public static PropertyData<Boolean> newInstance(String key, boolean value) throws IllegalArgumentException {
1:         return new PropertyData<Boolean>(key, value, P_BOOLEAN);
1:     }
1:     
1: 
1:     /**
1:      * Returns CompositeData representing a Property typed by {@link JmxConstants#PROPERTY_TYPE}.
1:      * @return
1:      */
1:     public CompositeData toCompositeData() {
1:         CompositeData result = null;
1:         Map<String, Object> items = new HashMap<String, Object>();
1:         items.put(KEY, this.key);
1:         items.put(VALUE, this.encodedValue);
1:         items.put(TYPE, this.encodedType);
1:         try {
1:             result = new CompositeDataSupport(PROPERTY_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Failed to create CompositeData for Property [" + this.key + ":" + this.value + "]", e);
1:         }
1:         return result;
1:     }
1:     
1:     /**
1:      * Constructs a <code>PropertyData</code> object from the given <code>CompositeData</code>
1:      * @param compositeData
1:      * @return
1:      * @throws IlleglArgumentException if compositeData is null or not of type {@link JmxConstants#PROPERTY_TYPE}
1:      */
1:     @SuppressWarnings("unchecked")
1:     public static <T> PropertyData<T> from(CompositeData compositeData) throws IllegalArgumentException {
1:         if ( compositeData == null ) {
1:             throw new IllegalArgumentException("Argument compositeData cannot be null");
1:         }
1:         if (!compositeData.getCompositeType().equals(PROPERTY_TYPE)) {
1:             throw new IllegalArgumentException("Invalid CompositeType [" + compositeData.getCompositeType() + "]");
1:         }
1:         PropertyData propertyData = new PropertyData();
1:         propertyData.key = (String) compositeData.get(KEY);
1:         propertyData.encodedType = (String) compositeData.get(TYPE);
1:         propertyData.encodedValue = (String) compositeData.get(VALUE);
1:         if (propertyData.encodedType == null || propertyData.encodedType.length() < 1) {
1:             throw new IllegalArgumentException ("Cannot determine type from compositeData : " + compositeData);
1:         }
1:         StringTokenizer values = new StringTokenizer(propertyData.encodedValue, ",");
1:         int valuesLength = values.countTokens();
1:         if (propertyData.encodedType.startsWith(ARRAY_OF)) {
1:             String[] arrayTypeParts = propertyData.encodedType.split("\\s");
1:             if (arrayTypeParts.length < 3) {
1:                 throw new IllegalArgumentException("Cannot parse Array type from type item : " + propertyData.encodedType);
1:             }
1:             String arrayTypeName = arrayTypeParts[2].trim();
1:             if (!types.containsKey(arrayTypeName)) {
1:                 throw new IllegalArgumentException ("Cannot determine type from value : " + arrayTypeName);
1:             }
1:             Class<? extends Object> arrayType = types.get(arrayTypeName);
1:             propertyData.value = Array.newInstance(arrayType, valuesLength);
1:             int index = 0;
1:             while (values.hasMoreTokens()) {
1:                 Array.set(propertyData.value, index++, fromString(arrayType, values.nextToken()));
1:             }
1:         } else if (propertyData.encodedType.startsWith(VECTOR_OF)) {
1:             String[] vectorTypeParts = propertyData.encodedType.split("\\s");
1:             if (vectorTypeParts.length < 3) {
1:                 throw new IllegalArgumentException("Cannot parse Array type from type item : " + propertyData.encodedType);
1:             }
1:             String vectorTypeName = vectorTypeParts[2].trim();
1:             if (!types.containsKey(vectorTypeName)) {
1:                 throw new IllegalArgumentException ("Cannot determine type from value : " + vectorTypeName);
1:             }
1:             Class<? extends Object> vectorType = types.get(vectorTypeName);
1:             Vector vector = new Vector();
1:             while (values.hasMoreTokens()) {
1:                 vector.add(fromString(vectorType, values.nextToken()));
1:             }
1:             propertyData.value = vector;
1:         } else {
1:             if (!types.containsKey(propertyData.encodedType)) {
1:                 throw new IllegalArgumentException ("Cannot determine type from value : " + propertyData.encodedType);
1:             }
1:             Class<? extends Object> valueType = types.get(propertyData.encodedType);
1:             propertyData.value = fromString(valueType, propertyData.encodedValue);
1:         }
1:         return propertyData;
1:     }
1:  
1:     
1:     public String getKey() {
1:         return key;
1:     }
1: 
1:     public T getValue() {
1:         return value;
1:     }
1: 
1:     public String getEncodedType() {
1:         return encodedType;
1:     }
1:     
1:     public String getEncodedValue() {
1:         return encodedValue;
1:     }
1: 
1:     public boolean isEncodingPrimitive() {
1:         return primitiveTypes.containsKey(encodedType);
1:     }
1:     
1: }
============================================================================