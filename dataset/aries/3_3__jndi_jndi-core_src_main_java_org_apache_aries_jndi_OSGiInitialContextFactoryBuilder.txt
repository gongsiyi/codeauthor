1:fc02f66: /*
1:fc02f66:  * Licensed to the Apache Software Foundation (ASF) under one
1:fc02f66:  * or more contributor license agreements.  See the NOTICE file
1:fc02f66:  * distributed with this work for additional information
1:fc02f66:  * regarding copyright ownership.  The ASF licenses this file
1:fc02f66:  * to you under the Apache License, Version 2.0 (the
1:fc02f66:  * "License"); you may not use this file except in compliance
1:fc02f66:  * with the License.  You may obtain a copy of the License at
1:fc02f66:  *
1:fc02f66:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fc02f66:  *
1:fc02f66:  * Unless required by applicable law or agreed to in writing,
1:fc02f66:  * software distributed under the License is distributed on an
1:3c19a77:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fc02f66:  * KIND, either express or implied.  See the License for the
1:fc02f66:  * specific language governing permissions and limitations
1:fc02f66:  * under the License.
1:fc02f66:  */
1:fc02f66: package org.apache.aries.jndi;
5:696374b: 
1:fc02f66: import java.util.Hashtable;
1:696374b: 
1:fc02f66: import javax.naming.Context;
1:7b2544b: import javax.naming.InitialContext;
1:fc02f66: import javax.naming.NamingException;
1:7b2544b: import javax.naming.NoInitialContextException;
1:fc02f66: import javax.naming.spi.InitialContextFactory;
1:fc02f66: import javax.naming.spi.InitialContextFactoryBuilder;
1:696374b: 
1:fc02f66: import org.osgi.framework.BundleContext;
1:696374b: 
1:696374b: public class OSGiInitialContextFactoryBuilder implements InitialContextFactoryBuilder, InitialContextFactory {
1:696374b: 
1:696374b: 	public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment) 
3:696374b: 	    throws NamingException {
1:696374b: 	    return this;
1:7b2544b: 	}
1:696374b:   
1:696374b: 	public Context getInitialContext(Hashtable<?, ?> environment) 
1:696374b: 	    throws NamingException {
1:5140ce3: 	    
1:d90eeba: 	    AugmenterInvokerImpl.getInstance().augmentEnvironment(environment);
1:696374b: 	  
1:a1d48ad: 	    BundleContext context = Utils.getBundleContext(environment, InitialContext.class);	    
2:7b2544b: 	    if (context == null) {
1:9c42dfb:             throw new NoInitialContextException(Utils.MESSAGES.getMessage("cannot.find.callers.bundlecontext"));
1:7b2544b: 	    }
1:7b2544b: 	    	    
1:d90eeba:       AugmenterInvokerImpl.getInstance().unaugmentEnvironment(environment);
1:d90eeba: 
1:7b2544b: 	    return ContextHelper.getInitialContext(context, environment);
1:d90eeba: 	}
1:a1d48ad: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:d90eeba
/////////////////////////////////////////////////////////////////////////
1: 	    AugmenterInvokerImpl.getInstance().augmentEnvironment(environment);
1:       AugmenterInvokerImpl.getInstance().unaugmentEnvironment(environment);
1: 
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:9c42dfb
/////////////////////////////////////////////////////////////////////////
1:             throw new NoInitialContextException(Utils.MESSAGES.getMessage("cannot.find.callers.bundlecontext"));
commit:a1d48ad
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	    BundleContext context = Utils.getBundleContext(environment, InitialContext.class);	    
0:             throw new NoInitialContextException("Unable to determine caller's BundleContext");
1: }
commit:5140ce3
/////////////////////////////////////////////////////////////////////////
0: 	    Utils.augmentEnvironment(environment);
1: 	  
commit:b756d71
/////////////////////////////////////////////////////////////////////////
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.InitialContext;
1: import javax.naming.NoInitialContextException;
0: import javax.naming.directory.InitialDirContext;
/////////////////////////////////////////////////////////////////////////
0: 	    BundleContext context = Utils.getBundleContext(environment, InitialContext.class.getName());	    
1: 	    if (context == null) {
0: 	        context = Utils.getBundleContext(environment, InitialDirContext.class.getName());
1: 	        if (context == null) {
0: 	            throw new NoInitialContextException("Unable to determine caller's BundleContext");
1: 	        }
1: 	    }
1: 	    	    
1: 	    return ContextHelper.getInitialContext(context, environment);
commit:4bf53f2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	    return ContextHelper.getInitialContext(_context, environment);
commit:696374b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import javax.naming.NoInitialContextException;
0: import org.osgi.framework.InvalidSyntaxException;
1: public class OSGiInitialContextFactoryBuilder implements InitialContextFactoryBuilder, InitialContextFactory {
0: 	public OSGiInitialContextFactoryBuilder(BundleContext context) {	
1: 	public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment) 
1: 	    throws NamingException {
1: 	    return this;
0: 	}
1:   
1: 	public Context getInitialContext(Hashtable<?, ?> environment) 
1: 	    throws NamingException {
1: 	    
0: 	    // TODO: use caller's bundle context
1: 	    
0: 	    Context initialContext = null;
1: 	    
0: 	    String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
0: 	    if (contextFactoryClass == null) {
0: 	        // 1. get ContextFactory using builder
0: 	        initialContext = getInitialContextUsingBuilder(_context, environment);
1: 	        
0: 	        // 2. lookup all ContextFactory services
0: 	        if (initialContext == null) {
0: 	            String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory))";
0: 	            ServiceReference[] references = null;
0: 	            try {
0: 	                references = _context.getAllServiceReferences(InitialContextFactory.class.getName(), filter);
0: 	            } catch (InvalidSyntaxException e) {
0: 	                NamingException ex = new NamingException("Bad filter: " + filter);
0: 	                ex.initCause(e);    
0: 	                throw ex;
0: 	            }
0: 	            if (references != null) {
0: 	                for (int i = 0; i < references.length && initialContext == null; i++) {
0: 	                    ServiceReference reference = references[i];	                    
0: 	                    InitialContextFactory factory = (InitialContextFactory) _context.getService(reference);
0: 	                    try {
0: 	                        initialContext = factory.getInitialContext(environment);
0: 	                    } finally {	                  
0: 	                        _context.ungetService(reference);
0: 	                    }
0: 	                }
0: 	            }
0: 	        }
1: 	        
0: 	        if (initialContext == null) {
0: 	            // TODO: only url based lookups are allowed
0: 	            return new DelegateContext(environment);
0: 	        } else {
0: 	            return new DelegateContext(initialContext);
0: 	        }
0: 	    } else {
0: 	        // 1. lookup ContextFactory using the factory class
0: 	        String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory)(objectClass=" + contextFactoryClass + "))";
0: 	        ServiceReference[] references = null;
0: 	        try {
0: 	            references = _context.getServiceReferences(InitialContextFactory.class.getName(), filter);
0: 	        } catch (InvalidSyntaxException e) {
0: 	            NamingException ex = new NamingException("Bad filter: " + filter);
0: 	            ex.initCause(e);    
0: 	            throw ex;
0: 	        }
1: 	        
0: 	        if (references != null && references.length > 0) {
0: 	            Arrays.sort(references);
0: 	            ServiceReference factoryReference = references[0];
0: 	            InitialContextFactory factory = (InitialContextFactory)_context.getService(factoryReference);
0: 	            try {
0: 	                initialContext = factory.getInitialContext(environment);
0: 	            } finally {
0: 	                _context.ungetService(factoryReference);
0: 	            }
0: 	        }	        
1: 	        
0: 	        // 2. get ContextFactory using builder
0: 	        if (initialContext == null) {
0: 	            initialContext = getInitialContextUsingBuilder(_context, environment);
0: 	        }
1: 	        
0: 	        if (initialContext == null) {
0: 	            throw new NoInitialContextException("We could not find an InitialContextFactory to use");
0: 	        } else {
0: 	            return new DelegateContext(initialContext);
0: 	        }
0: 	    }	   
0: 	}
1: 	
0: 	private static Context getInitialContextUsingBuilder(BundleContext context, Hashtable<?, ?> environment) 
1:         throws NamingException {
0: 	    InitialContextFactory factory = getInitialContextFactoryBuilder(context, environment);
0: 	    return (factory == null) ? null : factory.getInitialContext(environment);
0: 	}
1: 	
0: 	private static InitialContextFactory getInitialContextFactoryBuilder(BundleContext context, Hashtable<?, ?> environment) 
1: 	    throws NamingException {
0: 	    InitialContextFactory factory = null;
0: 	    try {
0: 	        ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
0: 	        if (refs != null) {
0: 	            Arrays.sort(refs);
0: 	            for (int i = 0; i < refs.length && factory == null; i++) {
0: 	                ServiceReference ref = refs[i];	                
0: 	                InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
0: 	                try {
0: 	                    factory = builder.createInitialContextFactory(environment);
0: 	                } finally {	              
0: 	                    context.ungetService(ref);
0: 	                }
0: 	            }
0: 	        }	        
0: 	    } catch (InvalidSyntaxException e) {
0: 	        // ignore - should never happen
0: 	    }
0: 	    return factory;
0: 	}
commit:3c19a77
/////////////////////////////////////////////////////////////////////////
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
commit:e6f69cc
commit:fc02f66
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
0: 
1: import java.util.Hashtable;
0: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.spi.InitialContextFactory;
1: import javax.naming.spi.InitialContextFactoryBuilder;
0: 
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceReference;
0: 
0: 
0: public class OSGiInitialContextFactoryBuilder implements InitialContextFactoryBuilder,
0:   InitialContextFactory
0: {
0: 	private BundleContext _context;
0: 	
0: 	public OSGiInitialContextFactoryBuilder(BundleContext context)
0: 	{
0: 		_context = context;
0: 	}
0: 	
0:   public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
0:       throws NamingException
0:   {
0:     return this;
0:   }
0:   public Context getInitialContext(Hashtable<?, ?> environment) throws NamingException
0:   {
0:   	Context toReturn = null;
0:   	
0:   	ServiceReference ref = _context.getServiceReference(DelegateContextFactory.class.getName());
0:   	
0:   	//TODO: is the custom interface DelegateContextFactory the right way to go about things
0:   	//  or is there a more generic way in RFC 142
0:   	if (ref != null) {
0:   	  try {
0:     		DelegateContextFactory dcf = (DelegateContextFactory) _context.getService(ref);
0:     		
0:     		if (dcf != null) {
0:     			toReturn = dcf.getInitialContext(environment);
0:     		}
0:   	  }
0:   	  finally {
0:   	    _context.ungetService(ref);
0:   	  }
0:   	}
0:   	
0:   	if (toReturn == null) {
0:   		toReturn  = new DelegateContext(environment);
0:   	}
0:   	
0:     return toReturn;
0:   }
0: }
commit:1a3015d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.jndi;
0: 
0: import java.util.Hashtable;
0: 
0: import javax.naming.Context;
0: import javax.naming.NamingException;
0: import javax.naming.spi.InitialContextFactory;
0: import javax.naming.spi.InitialContextFactoryBuilder;
0: 
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceReference;
0: 
0: 
0: public class OSGiInitialContextFactoryBuilder implements InitialContextFactoryBuilder,
0:   InitialContextFactory
0: {
0: 	private BundleContext _context;
0: 	
0: 	public OSGiInitialContextFactoryBuilder(BundleContext context)
0: 	{
0: 		_context = context;
0: 	}
0: 	
0:   public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
0:       throws NamingException
0:   {
0:     return this;
0:   }
0:   public Context getInitialContext(Hashtable<?, ?> environment) throws NamingException
0:   {
0:   	Context toReturn = null;
0:   	
0:   	ServiceReference ref = _context.getServiceReference(DelegateContextFactory.class.getName());
0:   	
0:   	//TODO: is the custom interface DelegateContextFactory the right way to go about things
0:   	//  or is there a more generic way in RFC 142
0:   	if (ref != null) {
0:   	  try {
0:     		DelegateContextFactory dcf = (DelegateContextFactory) _context.getService(ref);
0:     		
0:     		if (dcf != null) {
0:     			toReturn = dcf.getInitialContext(environment);
0:     		}
0:   	  }
0:   	  finally {
0:   	    _context.ungetService(ref);
0:   	  }
0:   	}
0:   	
0:   	if (toReturn == null) {
0:   		toReturn  = new DelegateContext(environment);
0:   	}
0:   	
0:     return toReturn;
0:   }
0: }
============================================================================