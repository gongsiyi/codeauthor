1:ad877b6: /*
1:ad877b6:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad877b6:  * or more contributor license agreements.  See the NOTICE file
1:ad877b6:  * distributed with this work for additional information
1:ad877b6:  * regarding copyright ownership.  The ASF licenses this file
1:ad877b6:  * to you under the Apache License, Version 2.0 (the
1:ad877b6:  * "License"); you may not use this file except in compliance
1:ad877b6:  * with the License.  You may obtain a copy of the License at
1:ad877b6:  *
1:ad877b6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ad877b6:  *
1:ad877b6:  * Unless required by applicable law or agreed to in writing,
1:ad877b6:  * software distributed under the License is distributed on an
1:ad877b6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ad877b6:  * KIND, either express or implied.  See the License for the
1:ad877b6:  * specific language governing permissions and limitations
1:ad877b6:  * under the License.
1:ad877b6:  */
1:ad877b6: package org.apache.aries.subsystem.itests.util;
1:ad877b6: 
1:ad877b6: import java.util.Collection;
1:ad877b6: import java.util.Map;
1:ad877b6: import java.util.Set;
1:ad877b6: 
1:ad877b6: import javax.xml.parsers.DocumentBuilderFactory;
1:ad877b6: import javax.xml.parsers.ParserConfigurationException;
1:ad877b6: 
1:ad877b6: import org.apache.aries.application.Content;
1:ad877b6: import org.apache.aries.application.management.BundleInfo;
1:67ef08f: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1:ad877b6: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:ad877b6: import org.apache.felix.bundlerepository.Resource;
1:ad877b6: import org.osgi.framework.Constants;
1:ad877b6: import org.osgi.framework.wiring.BundleRevision;
1:71fe81a: import org.osgi.resource.Requirement;
1:ad877b6: import org.w3c.dom.Document;
1:ad877b6: import org.w3c.dom.Element;
1:ad877b6: 
1:ad877b6: // copy from application obr with modification, intend to put this in common util folder when trunk becomes stable
1:ad877b6: public final class RepositoryDescriptorGenerator
1:ad877b6: {
1:ad877b6:   public static Document generateRepositoryDescriptor(String name, Set<BundleInfo> bundles) throws ParserConfigurationException
1:ad877b6:   {
1:ad877b6:     Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
1:ad877b6:     Element root = doc.createElement("repository");
1:ad877b6:     
1:ad877b6:     root.setAttribute("name", name);
1:ad877b6:     doc.appendChild(root);
1:ad877b6:     
1:ad877b6:     for (BundleInfo info : bundles) {
1:ad877b6:       Element resource = doc.createElement("resource");
1:ad877b6:       resource.setAttribute(Resource.VERSION, info.getVersion().toString());
1:ad877b6:       resource.setAttribute("uri", info.getLocation());
1:ad877b6:       resource.setAttribute(Resource.SYMBOLIC_NAME, info.getSymbolicName());
1:ad877b6:       resource.setAttribute(Resource.PRESENTATION_NAME, info.getHeaders().get(Constants.BUNDLE_NAME));
1:ad877b6:       resource.setAttribute(Resource.ID, info.getSymbolicName() + "/" + info.getVersion());
1:ad877b6:       root.appendChild(resource);
1:ad877b6:       
1:ad877b6:       addBundleCapability(doc, resource, info);
1:ad877b6:       
1:ad877b6:       for (Content p : info.getExportPackage()) {
1:ad877b6:         addPackageCapability(doc, resource, info, p);
1:ad877b6:       }
1:ad877b6:       
1:ad877b6:       for (Content p : info.getImportPackage()) {
1:ad877b6:         addPackageRequirement(doc, resource, info, p);
1:ad877b6:       }
1:ad877b6:       
1:ad877b6:       for (Content p : info.getRequireBundle()) {
1:ad877b6:         addBundleRequirement(doc, resource, info, p);
1:ad877b6:       }
1:ad877b6:       
1:ad877b6:     }
1:ad877b6:     
1:ad877b6:     return doc;
1:ad877b6:   }
1:ad877b6:   
1:71fe81a:   public static Document generateRepositoryDescriptor(String name, Collection<org.osgi.resource.Resource> resources) throws ParserConfigurationException {
1:ad877b6: 	  Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
1:ad877b6: 	  Element rootElement = document.createElement("repository");
1:ad877b6: 	  rootElement.setAttribute("name", name);
1:ad877b6: 	  document.appendChild(rootElement);
1:71fe81a: 	  for (org.osgi.resource.Resource resource : resources) {
1:ad877b6: 		  Element element = document.createElement("resource");
1:ad877b6: 		  String version = String.valueOf(ResourceHelper.getVersionAttribute(resource));
1:ad877b6: 	      element.setAttribute(Resource.VERSION, version);
1:ad877b6: 	      element.setAttribute("uri", ResourceHelper.getContentAttribute(resource));
1:ad877b6: 	      String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:ad877b6: 	      element.setAttribute(Resource.SYMBOLIC_NAME, symbolicName);
1:ad877b6: 	      element.setAttribute(Resource.PRESENTATION_NAME, symbolicName);
1:ad877b6: 	      element.setAttribute(Resource.ID, symbolicName + "/" + version);
1:ad877b6: 	      rootElement.appendChild(element);
1:ad877b6: 	      addRequirements(document, element, resource);
1:ad877b6: 	  }
1:ad877b6: 	  return document;
1:ad877b6:   }
1:ad877b6:   
1:71fe81a:   private static void addRequirements(Document document, Element rootElement, org.osgi.resource.Resource resource) {
1:ad877b6: 	  for (Requirement requirement : resource.getRequirements(null))
1:ad877b6: 		  addRequirement(document, rootElement, requirement);
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   private static void addRequirement(Document document, Element rootElement, Requirement requirement) {
1:ad877b6: 	  Element element = document.createElement("require");
1:ad877b6: 	  if (requirement.getNamespace().equals(BundleRevision.PACKAGE_NAMESPACE)) {
1:ad877b6: 		  addPackageRequirement(element, requirement);
1:ad877b6: 	  }
1:ad877b6: 	  else {
1:ad877b6: 		  throw new IllegalArgumentException("Unsupported requirement namespace: " + requirement.getNamespace());
1:ad877b6: 	  }
1:ad877b6: 	  rootElement.appendChild(element);
1:ad877b6:   }
1:ad877b6:   
1:ad877b6:   private static void addPackageRequirement(Element element, Requirement requirement) {
1:ad877b6: 	  element.setAttribute("name", "package");
1:ad877b6: 	  element.setAttribute("filter", requirement.getDirectives().get(Constants.FILTER_DIRECTIVE).replaceAll(BundleRevision.PACKAGE_NAMESPACE, "package"));
1:ad877b6:   }
1:ad877b6: 
1:ad877b6:   private static void addBundleRequirement(Document doc, Element resource, BundleInfo info, Content p)
1:ad877b6:   {
1:ad877b6:     Element requirement = doc.createElement("require");
1:ad877b6:     requirement.setAttribute("name", "bundle");
1:ad877b6:     
1:ad877b6:     requirement.setAttribute("extend", "false");
1:ad877b6:     requirement.setAttribute("multiple", "false");
1:ad877b6:     requirement.setAttribute("optional", "false");
1:ad877b6:     
1:ad877b6:     requirement.setAttribute("filter", ManifestHeaderProcessor.generateFilter("bundle", p.getContentName(), p.getAttributes()));
1:ad877b6:     
1:ad877b6:     resource.appendChild(requirement);
1:ad877b6:   }
1:ad877b6: 
1:ad877b6:   private static void addPackageRequirement(Document doc, Element resource, BundleInfo info, Content p)
1:ad877b6:   {
1:ad877b6:     Element requirement = doc.createElement("require");
1:ad877b6:     requirement.setAttribute("name", "package");
1:ad877b6:     
1:ad877b6:     requirement.setAttribute("extend", "false");
1:ad877b6:     requirement.setAttribute("multiple", "false");
1:ad877b6:     
1:ad877b6:     String optional = p.getDirective("optional");
1:ad877b6:     if (optional == null) optional = "false";
1:ad877b6:     
1:ad877b6:     requirement.setAttribute("optional", optional);
1:ad877b6:     
1:ad877b6:     requirement.setAttribute("filter", ManifestHeaderProcessor.generateFilter("package", p.getContentName(), p.getAttributes()));
1:ad877b6:     
1:ad877b6:     resource.appendChild(requirement);
1:ad877b6:   }
1:ad877b6: 
1:ad877b6:   private static void addPackageCapability(Document doc, Element resource, BundleInfo info, Content p)
1:ad877b6:   {
1:ad877b6:     Element capability = doc.createElement("capability");
1:ad877b6:     capability.setAttribute("name", "package");
1:ad877b6:     resource.appendChild(capability);
1:ad877b6:     
1:ad877b6:     addProperty(doc, capability, "package", p.getContentName(), null);
1:ad877b6:     addProperty(doc, capability, Constants.VERSION_ATTRIBUTE, p.getVersion().toString(), "version");
1:ad877b6:     addProperty(doc, capability, Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE, info.getSymbolicName(), null);
1:ad877b6:     addProperty(doc, capability, Constants.BUNDLE_VERSION_ATTRIBUTE, info.getVersion().toString(), "version");
1:ad877b6:     
1:ad877b6:     for (Map.Entry<String, String> entry : p.getAttributes().entrySet()) {
1:ad877b6:       if (!!!Constants.VERSION_ATTRIBUTE.equals(entry.getKey())) {
1:ad877b6:         addProperty(doc, capability, entry.getKey(), entry.getValue(), null);
1:ad877b6:       }
1:ad877b6:     }
1:ad877b6:     
1:ad877b6:     String mandatory = p.getDirective(Constants.MANDATORY_DIRECTIVE);
1:ad877b6:     if (mandatory == null) mandatory = "";
1:ad877b6:     addProperty(doc, capability, Constants.MANDATORY_DIRECTIVE, mandatory, "set");
1:ad877b6:   }
1:ad877b6: 
1:ad877b6:   private static void addBundleCapability(Document doc, Element resource, BundleInfo info)
1:ad877b6:   {
1:ad877b6:     Element capability = doc.createElement("capability");
1:ad877b6:     capability.setAttribute("name", "bundle");
1:ad877b6:     resource.appendChild(capability);
1:ad877b6:     
1:ad877b6:     addProperty(doc, capability, Resource.SYMBOLIC_NAME, info.getSymbolicName(), null);
1:ad877b6:     addProperty(doc, capability, Constants.VERSION_ATTRIBUTE, info.getVersion().toString(), "version");
1:ad877b6:     addProperty(doc, capability, Resource.PRESENTATION_NAME, info.getHeaders().get(Constants.BUNDLE_NAME), null);
1:ad877b6:     addProperty(doc, capability, Constants.BUNDLE_MANIFESTVERSION, "2", "version");
1:ad877b6:     addProperty(doc, capability, Constants.FRAGMENT_ATTACHMENT_DIRECTIVE, info.getBundleDirectives().get(Constants.FRAGMENT_ATTACHMENT_DIRECTIVE), null);
1:ad877b6:     addProperty(doc, capability, Constants.SINGLETON_DIRECTIVE, info.getBundleDirectives().get(Constants.SINGLETON_DIRECTIVE), null);
1:ad877b6:   }
1:ad877b6: 
1:ad877b6:   private static void addProperty(Document doc, Element capability, String name,
1:ad877b6:       String value, String type)
1:ad877b6:   {
1:ad877b6:     Element p = doc.createElement("p");
1:ad877b6:     p.setAttribute("n", name);
1:ad877b6:     p.setAttribute("v", value);
1:ad877b6:     if (type != null) p.setAttribute("t", type);
1:ad877b6:     capability.appendChild(p);
1:ad877b6:   }
1:ad877b6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.ResourceHelper;
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Requirement;
/////////////////////////////////////////////////////////////////////////
1:   public static Document generateRepositoryDescriptor(String name, Collection<org.osgi.resource.Resource> resources) throws ParserConfigurationException {
1: 	  for (org.osgi.resource.Resource resource : resources) {
/////////////////////////////////////////////////////////////////////////
1:   private static void addRequirements(Document document, Element rootElement, org.osgi.resource.Resource resource) {
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Requirement;
/////////////////////////////////////////////////////////////////////////
0:   public static Document generateRepositoryDescriptor(String name, Collection<org.osgi.framework.resource.Resource> resources) throws ParserConfigurationException {
0: 	  for (org.osgi.framework.resource.Resource resource : resources) {
/////////////////////////////////////////////////////////////////////////
0:   private static void addRequirements(Document document, Element rootElement, org.osgi.framework.resource.Resource resource) {
commit:ad877b6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.util;
1: 
1: import java.util.Collection;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.xml.parsers.DocumentBuilderFactory;
1: import javax.xml.parsers.ParserConfigurationException;
1: 
1: import org.apache.aries.application.Content;
1: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.subsystem.core.ResourceHelper;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.wiring.BundleRevision;
0: import org.osgi.framework.wiring.Requirement;
1: import org.w3c.dom.Document;
1: import org.w3c.dom.Element;
1: 
1: // copy from application obr with modification, intend to put this in common util folder when trunk becomes stable
1: public final class RepositoryDescriptorGenerator
1: {
1:   public static Document generateRepositoryDescriptor(String name, Set<BundleInfo> bundles) throws ParserConfigurationException
1:   {
1:     Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
1:     Element root = doc.createElement("repository");
1:     
1:     root.setAttribute("name", name);
1:     doc.appendChild(root);
1:     
1:     for (BundleInfo info : bundles) {
1:       Element resource = doc.createElement("resource");
1:       resource.setAttribute(Resource.VERSION, info.getVersion().toString());
1:       resource.setAttribute("uri", info.getLocation());
1:       resource.setAttribute(Resource.SYMBOLIC_NAME, info.getSymbolicName());
1:       resource.setAttribute(Resource.PRESENTATION_NAME, info.getHeaders().get(Constants.BUNDLE_NAME));
1:       resource.setAttribute(Resource.ID, info.getSymbolicName() + "/" + info.getVersion());
1:       root.appendChild(resource);
1:       
1:       addBundleCapability(doc, resource, info);
1:       
1:       for (Content p : info.getExportPackage()) {
1:         addPackageCapability(doc, resource, info, p);
1:       }
1:       
1:       for (Content p : info.getImportPackage()) {
1:         addPackageRequirement(doc, resource, info, p);
1:       }
1:       
1:       for (Content p : info.getRequireBundle()) {
1:         addBundleRequirement(doc, resource, info, p);
1:       }
1:       
1:     }
1:     
1:     return doc;
1:   }
1:   
0:   public static Document generateRepositoryDescriptor(String name, Collection<org.osgi.framework.wiring.Resource> resources) throws ParserConfigurationException {
1: 	  Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
1: 	  Element rootElement = document.createElement("repository");
1: 	  rootElement.setAttribute("name", name);
1: 	  document.appendChild(rootElement);
0: 	  for (org.osgi.framework.wiring.Resource resource : resources) {
1: 		  Element element = document.createElement("resource");
1: 		  String version = String.valueOf(ResourceHelper.getVersionAttribute(resource));
1: 	      element.setAttribute(Resource.VERSION, version);
1: 	      element.setAttribute("uri", ResourceHelper.getContentAttribute(resource));
1: 	      String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1: 	      element.setAttribute(Resource.SYMBOLIC_NAME, symbolicName);
1: 	      element.setAttribute(Resource.PRESENTATION_NAME, symbolicName);
1: 	      element.setAttribute(Resource.ID, symbolicName + "/" + version);
1: 	      rootElement.appendChild(element);
1: 	      addRequirements(document, element, resource);
1: 	  }
1: 	  return document;
1:   }
1:   
0:   private static void addRequirements(Document document, Element rootElement, org.osgi.framework.wiring.Resource resource) {
1: 	  for (Requirement requirement : resource.getRequirements(null))
1: 		  addRequirement(document, rootElement, requirement);
1:   }
1:   
1:   private static void addRequirement(Document document, Element rootElement, Requirement requirement) {
1: 	  Element element = document.createElement("require");
1: 	  if (requirement.getNamespace().equals(BundleRevision.PACKAGE_NAMESPACE)) {
1: 		  addPackageRequirement(element, requirement);
1: 	  }
1: 	  else {
1: 		  throw new IllegalArgumentException("Unsupported requirement namespace: " + requirement.getNamespace());
1: 	  }
1: 	  rootElement.appendChild(element);
1:   }
1:   
1:   private static void addPackageRequirement(Element element, Requirement requirement) {
1: 	  element.setAttribute("name", "package");
1: 	  element.setAttribute("filter", requirement.getDirectives().get(Constants.FILTER_DIRECTIVE).replaceAll(BundleRevision.PACKAGE_NAMESPACE, "package"));
1:   }
1: 
1:   private static void addBundleRequirement(Document doc, Element resource, BundleInfo info, Content p)
1:   {
1:     Element requirement = doc.createElement("require");
1:     requirement.setAttribute("name", "bundle");
1:     
1:     requirement.setAttribute("extend", "false");
1:     requirement.setAttribute("multiple", "false");
1:     requirement.setAttribute("optional", "false");
1:     
1:     requirement.setAttribute("filter", ManifestHeaderProcessor.generateFilter("bundle", p.getContentName(), p.getAttributes()));
1:     
1:     resource.appendChild(requirement);
1:   }
1: 
1:   private static void addPackageRequirement(Document doc, Element resource, BundleInfo info, Content p)
1:   {
1:     Element requirement = doc.createElement("require");
1:     requirement.setAttribute("name", "package");
1:     
1:     requirement.setAttribute("extend", "false");
1:     requirement.setAttribute("multiple", "false");
1:     
1:     String optional = p.getDirective("optional");
1:     if (optional == null) optional = "false";
1:     
1:     requirement.setAttribute("optional", optional);
1:     
1:     requirement.setAttribute("filter", ManifestHeaderProcessor.generateFilter("package", p.getContentName(), p.getAttributes()));
1:     
1:     resource.appendChild(requirement);
1:   }
1: 
1:   private static void addPackageCapability(Document doc, Element resource, BundleInfo info, Content p)
1:   {
1:     Element capability = doc.createElement("capability");
1:     capability.setAttribute("name", "package");
1:     resource.appendChild(capability);
1:     
1:     addProperty(doc, capability, "package", p.getContentName(), null);
1:     addProperty(doc, capability, Constants.VERSION_ATTRIBUTE, p.getVersion().toString(), "version");
1:     addProperty(doc, capability, Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE, info.getSymbolicName(), null);
1:     addProperty(doc, capability, Constants.BUNDLE_VERSION_ATTRIBUTE, info.getVersion().toString(), "version");
1:     
1:     for (Map.Entry<String, String> entry : p.getAttributes().entrySet()) {
1:       if (!!!Constants.VERSION_ATTRIBUTE.equals(entry.getKey())) {
1:         addProperty(doc, capability, entry.getKey(), entry.getValue(), null);
1:       }
1:     }
1:     
1:     String mandatory = p.getDirective(Constants.MANDATORY_DIRECTIVE);
1:     if (mandatory == null) mandatory = "";
1:     addProperty(doc, capability, Constants.MANDATORY_DIRECTIVE, mandatory, "set");
1:   }
1: 
1:   private static void addBundleCapability(Document doc, Element resource, BundleInfo info)
1:   {
1:     Element capability = doc.createElement("capability");
1:     capability.setAttribute("name", "bundle");
1:     resource.appendChild(capability);
1:     
1:     addProperty(doc, capability, Resource.SYMBOLIC_NAME, info.getSymbolicName(), null);
1:     addProperty(doc, capability, Constants.VERSION_ATTRIBUTE, info.getVersion().toString(), "version");
1:     addProperty(doc, capability, Resource.PRESENTATION_NAME, info.getHeaders().get(Constants.BUNDLE_NAME), null);
1:     addProperty(doc, capability, Constants.BUNDLE_MANIFESTVERSION, "2", "version");
1:     addProperty(doc, capability, Constants.FRAGMENT_ATTACHMENT_DIRECTIVE, info.getBundleDirectives().get(Constants.FRAGMENT_ATTACHMENT_DIRECTIVE), null);
1:     addProperty(doc, capability, Constants.SINGLETON_DIRECTIVE, info.getBundleDirectives().get(Constants.SINGLETON_DIRECTIVE), null);
1:   }
1: 
1:   private static void addProperty(Document doc, Element capability, String name,
1:       String value, String type)
1:   {
1:     Element p = doc.createElement("p");
1:     p.setAttribute("n", name);
1:     p.setAttribute("v", value);
1:     if (type != null) p.setAttribute("t", type);
1:     capability.appendChild(p);
1:   }
1: }
============================================================================