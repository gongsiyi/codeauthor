1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.support.osgi.impl;
1:2cfdf52: 
1:2cfdf52: import java.util.Dictionary;
1:2cfdf52: import java.util.Hashtable;
1:2cfdf52: 
1:2cfdf52: import javax.transaction.TransactionManager;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.supplier.EmSupplier;
1:2cfdf52: import org.apache.aries.jpa.support.impl.XAJpaTemplate;
1:2cfdf52: import org.apache.aries.jpa.template.JpaTemplate;
1:2cfdf52: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.ServiceReference;
1:2cfdf52: import org.osgi.framework.ServiceRegistration;
1:0d59ccb: import org.osgi.service.coordinator.Coordinator;
1:2cfdf52: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:2cfdf52: import org.osgi.util.tracker.ServiceTracker;
1:ec3ea65: import org.slf4j.Logger;
1:ec3ea65: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * Is created for an EntityManagerFactory with JTA transactions and creates
1:2cfdf52:  * an XaJpaTemplate for it as soon as the TransactionManager service is present.
1:2cfdf52:  */
1:2cfdf52: @SuppressWarnings("rawtypes")
1:2cfdf52: public class TMTracker extends ServiceTracker<TransactionManager, ServiceRegistration> {
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(TMTracker.class);
1:2cfdf52:     static final String TRANSACTION_TYPE = "transaction.type";
1:2cfdf52: 
1:2cfdf52:     private final EmSupplier emSupplier;
1:2cfdf52:     private final String unitName;
1:2cfdf52: 
1:0d59ccb:     private Coordinator coordinator;
1:0d59ccb: 
1:0d59ccb:     public TMTracker(BundleContext context, EmSupplier emSupplier, String unitName, Coordinator coordinator) {
1:2cfdf52:         super(context, TransactionManager.class, null);
1:2cfdf52:         this.emSupplier = emSupplier;
1:2cfdf52:         this.unitName = unitName;
1:0d59ccb:         this.coordinator = coordinator;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public ServiceRegistration addingService(ServiceReference<TransactionManager> ref) {
1:2cfdf52:         TransactionManager tm = context.getService(ref);
1:0d59ccb:         XAJpaTemplate txManager = new XAJpaTemplate(emSupplier, tm, coordinator);
1:2cfdf52:         return context.registerService(JpaTemplate.class, txManager, xaTxManProps(unitName));
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private static Dictionary<String, String> xaTxManProps(String unitName) {
1:ec3ea65:         Dictionary<String, String> txmanProperties = new Hashtable<String, String>(); // NOSONAR
1:2cfdf52:         txmanProperties.put(EntityManagerFactoryBuilder.JPA_UNIT_NAME, unitName);
1:2cfdf52:         txmanProperties.put(TRANSACTION_TYPE, "JTA");
1:2cfdf52:         return txmanProperties;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void removedService(ServiceReference<TransactionManager> reference, ServiceRegistration reg) {
1:2cfdf52:         try {
1:2cfdf52:             reg.unregister();
1:2cfdf52:             context.ungetService(reference);
1:2cfdf52:         } catch (Exception e) {
1:ec3ea65:             LOG.debug("Exception during unregister", e);
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TMTracker.class);
/////////////////////////////////////////////////////////////////////////
1:     private static Dictionary<String, String> xaTxManProps(String unitName) {
1:         Dictionary<String, String> txmanProperties = new Hashtable<String, String>(); // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Exception during unregister", e);
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String, String> txmanProperties = new Hashtable<String, String>();
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordinator;
/////////////////////////////////////////////////////////////////////////
1:     private Coordinator coordinator;
1: 
1:     public TMTracker(BundleContext context, EmSupplier emSupplier, String unitName, Coordinator coordinator) {
1:         this.coordinator = coordinator;
1:         XAJpaTemplate txManager = new XAJpaTemplate(emSupplier, tm, coordinator);
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.support.osgi.impl;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.transaction.TransactionManager;
1: 
1: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.apache.aries.jpa.support.impl.XAJpaTemplate;
1: import org.apache.aries.jpa.template.JpaTemplate;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
1:  * Is created for an EntityManagerFactory with JTA transactions and creates
1:  * an XaJpaTemplate for it as soon as the TransactionManager service is present.
1:  */
1: @SuppressWarnings("rawtypes")
1: public class TMTracker extends ServiceTracker<TransactionManager, ServiceRegistration> {
1:     static final String TRANSACTION_TYPE = "transaction.type";
1: 
1:     private final EmSupplier emSupplier;
1:     private final String unitName;
1: 
0:     public TMTracker(BundleContext context, EmSupplier emSupplier, String unitName) {
1:         super(context, TransactionManager.class, null);
1:         this.emSupplier = emSupplier;
1:         this.unitName = unitName;
1:     }
1: 
1:     @Override
1:     public ServiceRegistration addingService(ServiceReference<TransactionManager> ref) {
1:         TransactionManager tm = context.getService(ref);
0:         XAJpaTemplate txManager = new XAJpaTemplate(emSupplier, tm);
1:         return context.registerService(JpaTemplate.class, txManager, xaTxManProps(unitName));
1:     }
1: 
0:     private Dictionary<String, String> xaTxManProps(String unitName) {
0:         Dictionary<String, String> txmanProperties = new Hashtable<>();
1:         txmanProperties.put(EntityManagerFactoryBuilder.JPA_UNIT_NAME, unitName);
1:         txmanProperties.put(TRANSACTION_TYPE, "JTA");
1:         return txmanProperties;
1:     }
1: 
1:     @Override
1:     public void removedService(ServiceReference<TransactionManager> reference, ServiceRegistration reg) {
1:         try {
1:             reg.unregister();
1:             context.ungetService(reference);
1:         } catch (Exception e) {
0:             // Ignore. May happen if persistence unit bundle is unloaded / updated
1:         }
1:     }
1: 
1: }
============================================================================