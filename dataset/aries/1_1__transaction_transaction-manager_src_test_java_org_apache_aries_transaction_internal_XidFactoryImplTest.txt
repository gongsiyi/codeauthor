1:1751b0a: /**
1:1751b0a:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:1751b0a:  *  contributor license agreements.  See the NOTICE file distributed with
1:1751b0a:  *  this work for additional information regarding copyright ownership.
1:1751b0a:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:1751b0a:  *  (the "License"); you may not use this file except in compliance with
1:1751b0a:  *  the License.  You may obtain a copy of the License at
1:1751b0a:  *
1:1751b0a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1751b0a:  *
1:1751b0a:  *  Unless required by applicable law or agreed to in writing, software
1:1751b0a:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:1751b0a:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1751b0a:  *  See the License for the specific language governing permissions and
1:1751b0a:  *  limitations under the License.
1:1751b0a:  */
1:1751b0a: 
1:6d5ae4f: package org.apache.aries.transaction.internal;
1:1751b0a: 
1:1751b0a: import java.util.concurrent.TimeUnit;
1:1751b0a: import javax.transaction.xa.Xid;
1:1751b0a: 
1:6d5ae4f: import org.apache.aries.transaction.internal.XidFactoryImpl;
1:1751b0a: import org.apache.geronimo.transaction.manager.XidFactory;
1:1751b0a: import org.junit.Test;
1:1751b0a: 
1:1751b0a: import static org.junit.Assert.assertEquals;
1:1751b0a: import static org.junit.Assert.assertFalse;
1:1751b0a: import static org.junit.Assert.assertTrue;
1:1751b0a: 
1:1751b0a: public class XidFactoryImplTest {
1:1751b0a: 
1:1751b0a:     @Test
1:1751b0a:     public void testLong() {
1:1751b0a:         byte[] buffer = new byte[64];
1:1751b0a:         long l1 = 1343120074022l;
1:1751b0a:         XidFactoryImpl.insertLong(l1, buffer, 4);
1:1751b0a:         long l2 = XidFactoryImpl.extractLong(buffer, 4);
1:1751b0a:         assertEquals(l1, l2);
1:1751b0a: 
1:1751b0a:         l1 = 1343120074022l - TimeUnit.DAYS.toMillis(15);
1:1751b0a:         XidFactoryImpl.insertLong(l1, buffer, 4);
1:1751b0a:         l2 = XidFactoryImpl.extractLong(buffer, 4);
1:1751b0a:         assertEquals(l1, l2);
1:1751b0a:     }
1:1751b0a: 
1:1751b0a:     @Test
1:1751b0a:     public void testAriesFactory() throws Exception {
1:1751b0a:         XidFactory factory = new XidFactoryImpl("hi".getBytes());
1:1751b0a:         Xid id1 = factory.createXid();
1:1751b0a:         Xid id2 = factory.createXid();
1:1751b0a: 
1:1751b0a:         assertFalse("Should not match new: " + id1, factory.matchesGlobalId(id1.getGlobalTransactionId()));
1:1751b0a:         assertFalse("Should not match new: " + id2, factory.matchesGlobalId(id2.getGlobalTransactionId()));
1:1751b0a: 
1:1751b0a:         Xid b_id1 = factory.createBranch(id1, 1);
1:1751b0a:         Xid b_id2 = factory.createBranch(id2, 1);
1:1751b0a: 
1:1751b0a:         assertFalse("Should not match new branch: " + b_id1, factory.matchesBranchId(b_id1.getBranchQualifier()));
1:1751b0a:         assertFalse("Should not match new branch: " + b_id2, factory.matchesBranchId(b_id2.getBranchQualifier()));
1:1751b0a: 
1:1751b0a:         Thread.sleep(5);
1:1751b0a: 
1:1751b0a:         XidFactory factory2 = new XidFactoryImpl("hi".getBytes());
1:1751b0a:         assertTrue("Should match old: " + id1, factory2.matchesGlobalId(id1.getGlobalTransactionId()));
1:1751b0a:         assertTrue("Should match old: " + id2, factory2.matchesGlobalId(id2.getGlobalTransactionId()));
1:1751b0a: 
1:1751b0a:         assertTrue("Should match old branch: " + b_id1, factory2.matchesBranchId(b_id1.getBranchQualifier()));
1:1751b0a:         assertTrue("Should match old branch: " + b_id2, factory2.matchesBranchId(b_id2.getBranchQualifier()));
1:1751b0a:     }
1:1751b0a: 
1:1751b0a: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:6d5ae4f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.transaction.internal;
1: import org.apache.aries.transaction.internal.XidFactoryImpl;
commit:1751b0a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
0: package org.apache.aries.transaction;
1: 
1: import java.util.concurrent.TimeUnit;
1: import javax.transaction.xa.Xid;
1: 
1: import org.apache.geronimo.transaction.manager.XidFactory;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class XidFactoryImplTest {
1: 
1:     @Test
1:     public void testLong() {
1:         byte[] buffer = new byte[64];
1:         long l1 = 1343120074022l;
1:         XidFactoryImpl.insertLong(l1, buffer, 4);
1:         long l2 = XidFactoryImpl.extractLong(buffer, 4);
1:         assertEquals(l1, l2);
1: 
1:         l1 = 1343120074022l - TimeUnit.DAYS.toMillis(15);
1:         XidFactoryImpl.insertLong(l1, buffer, 4);
1:         l2 = XidFactoryImpl.extractLong(buffer, 4);
1:         assertEquals(l1, l2);
1:     }
1: 
1:     @Test
1:     public void testAriesFactory() throws Exception {
1:         XidFactory factory = new XidFactoryImpl("hi".getBytes());
1:         Xid id1 = factory.createXid();
1:         Xid id2 = factory.createXid();
1: 
1:         assertFalse("Should not match new: " + id1, factory.matchesGlobalId(id1.getGlobalTransactionId()));
1:         assertFalse("Should not match new: " + id2, factory.matchesGlobalId(id2.getGlobalTransactionId()));
1: 
1:         Xid b_id1 = factory.createBranch(id1, 1);
1:         Xid b_id2 = factory.createBranch(id2, 1);
1: 
1:         assertFalse("Should not match new branch: " + b_id1, factory.matchesBranchId(b_id1.getBranchQualifier()));
1:         assertFalse("Should not match new branch: " + b_id2, factory.matchesBranchId(b_id2.getBranchQualifier()));
1: 
1:         Thread.sleep(5);
1: 
1:         XidFactory factory2 = new XidFactoryImpl("hi".getBytes());
1:         assertTrue("Should match old: " + id1, factory2.matchesGlobalId(id1.getGlobalTransactionId()));
1:         assertTrue("Should match old: " + id2, factory2.matchesGlobalId(id2.getGlobalTransactionId()));
1: 
1:         assertTrue("Should match old branch: " + b_id1, factory2.matchesBranchId(b_id1.getBranchQualifier()));
1:         assertTrue("Should match old branch: " + b_id2, factory2.matchesBranchId(b_id2.getBranchQualifier()));
1:     }
1: 
1: }
============================================================================