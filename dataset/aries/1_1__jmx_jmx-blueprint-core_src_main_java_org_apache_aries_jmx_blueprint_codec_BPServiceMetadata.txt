1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.codec;
1:fdf3952: 
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1:fdf3952: import org.osgi.service.blueprint.reflect.MapEntry;
1:fdf3952: import org.osgi.service.blueprint.reflect.RegistrationListener;
1:fdf3952: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1:fdf3952: 
1:fdf3952: public class BPServiceMetadata extends BPComponentMetadata {
1:fdf3952: 
1:fdf3952:     private int autoExport;
1:fdf3952: 
1:fdf3952:     private String[] interfaces;
1:fdf3952: 
1:fdf3952:     private int ranking;
1:fdf3952: 
1:fdf3952:     private BPRegistrationListener[] listeners;
1:fdf3952: 
1:fdf3952:     private BPMapEntry[] properties;
1:fdf3952: 
1:fdf3952:     private BPTarget serviceComponent;
1:fdf3952: 
1:fdf3952:     public BPServiceMetadata(CompositeData service) {
1:fdf3952:         super(service);
1:fdf3952:         autoExport = (Integer) service.get(BlueprintMetadataMBean.AUTO_EXPORT);
1:fdf3952:         interfaces = (String[]) service.get(BlueprintMetadataMBean.INTERFACES);
1:fdf3952:         ranking = (Integer) service.get(BlueprintMetadataMBean.RANKING);
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_listeners = (CompositeData[]) service.get(BlueprintMetadataMBean.REGISTRATION_LISTENERS);
1:fdf3952:         listeners = new BPRegistrationListener[cd_listeners.length];
1:fdf3952:         for (int i = 0; i < listeners.length; i++) {
1:fdf3952:             listeners[i] = new BPRegistrationListener(cd_listeners[i]);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_props = (CompositeData[]) service.get(BlueprintMetadataMBean.SERVICE_PROPERTIES);
1:fdf3952:         properties = new BPMapEntry[cd_props.length];
1:fdf3952:         for (int i = 0; i < properties.length; i++) {
1:fdf3952:             properties[i] = new BPMapEntry(cd_props[i]);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         Byte[] buf = (Byte[]) service.get(BlueprintMetadataMBean.SERVICE_COMPONENT);
1:fdf3952:         serviceComponent = (BPTarget) Util.boxedBinary2BPMetadata(buf);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPServiceMetadata(ServiceMetadata service) {
1:fdf3952:         super(service);
1:fdf3952:         autoExport = service.getAutoExport();
1:fdf3952:         interfaces = (String[])service.getInterfaces().toArray(new String[0]);
1:fdf3952:         ranking = service.getRanking();
1:fdf3952: 
1:fdf3952:         listeners = new BPRegistrationListener[service.getRegistrationListeners().size()];
1:fdf3952:         int i = 0;
1:fdf3952:         for (Object listener : service.getRegistrationListeners()) {
1:fdf3952:             listeners[i++] = new BPRegistrationListener((RegistrationListener) listener);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         properties = new BPMapEntry[service.getServiceProperties().size()];
1:fdf3952:         i = 0;
1:fdf3952:         for (Object prop : service.getServiceProperties()) {
1:fdf3952:             properties[i++] = new BPMapEntry((MapEntry) prop);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         serviceComponent = (BPTarget) Util.metadata2BPMetadata(service.getServiceComponent());
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected Map<String, Object> getItemsMap() {
1:fdf3952:         Map<String, Object> items = super.getItemsMap();
1:fdf3952:         items.put(BlueprintMetadataMBean.AUTO_EXPORT, autoExport);
1:fdf3952:         items.put(BlueprintMetadataMBean.INTERFACES, interfaces);
1:fdf3952:         items.put(BlueprintMetadataMBean.RANKING, ranking);
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_listeners = new CompositeData[listeners.length];
1:fdf3952:         for (int i = 0; i < listeners.length; i++) {
1:fdf3952:             cd_listeners[i] = listeners[i].asCompositeData();
1:fdf3952:         }
1:fdf3952:         items.put(BlueprintMetadataMBean.REGISTRATION_LISTENERS, cd_listeners);
1:fdf3952: 
1:fdf3952:         CompositeData[] cd_props = new CompositeData[properties.length];
1:fdf3952:         for (int i = 0; i < properties.length; i++) {
1:fdf3952:             cd_props[i] = properties[i].asCompositeData();
1:fdf3952:         }
1:fdf3952:         items.put(BlueprintMetadataMBean.SERVICE_PROPERTIES, cd_props);
1:fdf3952: 
1:fdf3952:         items.put(BlueprintMetadataMBean.SERVICE_COMPONENT, Util.bpMetadata2BoxedBinary(serviceComponent));
1:fdf3952: 
1:fdf3952:         return items;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public CompositeData asCompositeData() {
1:fdf3952:         try {
1:fdf3952:             return new CompositeDataSupport(BlueprintMetadataMBean.SERVICE_METADATA_TYPE, getItemsMap());
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new RuntimeException(e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public int getAutoExport() {
1:fdf3952:         return autoExport;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public String[] getInterfaces() {
1:fdf3952:         return interfaces;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public int getRanking() {
1:fdf3952:         return ranking;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPRegistrationListener[] getRegistrationListeners() {
1:fdf3952:         return listeners;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPTarget getServiceComponent() {
1:fdf3952:         return serviceComponent;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public BPMapEntry[] getServiceProperties() {
1:fdf3952:         return properties;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.codec;
1: 
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintMetadataMBean;
1: import org.osgi.service.blueprint.reflect.MapEntry;
1: import org.osgi.service.blueprint.reflect.RegistrationListener;
1: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1: 
1: public class BPServiceMetadata extends BPComponentMetadata {
1: 
1:     private int autoExport;
1: 
1:     private String[] interfaces;
1: 
1:     private int ranking;
1: 
1:     private BPRegistrationListener[] listeners;
1: 
1:     private BPMapEntry[] properties;
1: 
1:     private BPTarget serviceComponent;
1: 
1:     public BPServiceMetadata(CompositeData service) {
1:         super(service);
1:         autoExport = (Integer) service.get(BlueprintMetadataMBean.AUTO_EXPORT);
1:         interfaces = (String[]) service.get(BlueprintMetadataMBean.INTERFACES);
1:         ranking = (Integer) service.get(BlueprintMetadataMBean.RANKING);
1: 
1:         CompositeData[] cd_listeners = (CompositeData[]) service.get(BlueprintMetadataMBean.REGISTRATION_LISTENERS);
1:         listeners = new BPRegistrationListener[cd_listeners.length];
1:         for (int i = 0; i < listeners.length; i++) {
1:             listeners[i] = new BPRegistrationListener(cd_listeners[i]);
1:         }
1: 
1:         CompositeData[] cd_props = (CompositeData[]) service.get(BlueprintMetadataMBean.SERVICE_PROPERTIES);
1:         properties = new BPMapEntry[cd_props.length];
1:         for (int i = 0; i < properties.length; i++) {
1:             properties[i] = new BPMapEntry(cd_props[i]);
1:         }
1: 
1:         Byte[] buf = (Byte[]) service.get(BlueprintMetadataMBean.SERVICE_COMPONENT);
1:         serviceComponent = (BPTarget) Util.boxedBinary2BPMetadata(buf);
1:     }
1: 
1:     public BPServiceMetadata(ServiceMetadata service) {
1:         super(service);
1:         autoExport = service.getAutoExport();
1:         interfaces = (String[])service.getInterfaces().toArray(new String[0]);
1:         ranking = service.getRanking();
1: 
1:         listeners = new BPRegistrationListener[service.getRegistrationListeners().size()];
1:         int i = 0;
1:         for (Object listener : service.getRegistrationListeners()) {
1:             listeners[i++] = new BPRegistrationListener((RegistrationListener) listener);
1:         }
1: 
1:         properties = new BPMapEntry[service.getServiceProperties().size()];
1:         i = 0;
1:         for (Object prop : service.getServiceProperties()) {
1:             properties[i++] = new BPMapEntry((MapEntry) prop);
1:         }
1: 
1:         serviceComponent = (BPTarget) Util.metadata2BPMetadata(service.getServiceComponent());
1:     }
1: 
1:     protected Map<String, Object> getItemsMap() {
1:         Map<String, Object> items = super.getItemsMap();
1:         items.put(BlueprintMetadataMBean.AUTO_EXPORT, autoExport);
1:         items.put(BlueprintMetadataMBean.INTERFACES, interfaces);
1:         items.put(BlueprintMetadataMBean.RANKING, ranking);
1: 
1:         CompositeData[] cd_listeners = new CompositeData[listeners.length];
1:         for (int i = 0; i < listeners.length; i++) {
1:             cd_listeners[i] = listeners[i].asCompositeData();
1:         }
1:         items.put(BlueprintMetadataMBean.REGISTRATION_LISTENERS, cd_listeners);
1: 
1:         CompositeData[] cd_props = new CompositeData[properties.length];
1:         for (int i = 0; i < properties.length; i++) {
1:             cd_props[i] = properties[i].asCompositeData();
1:         }
1:         items.put(BlueprintMetadataMBean.SERVICE_PROPERTIES, cd_props);
1: 
1:         items.put(BlueprintMetadataMBean.SERVICE_COMPONENT, Util.bpMetadata2BoxedBinary(serviceComponent));
1: 
1:         return items;
1:     }
1: 
1:     public CompositeData asCompositeData() {
1:         try {
1:             return new CompositeDataSupport(BlueprintMetadataMBean.SERVICE_METADATA_TYPE, getItemsMap());
1:         } catch (OpenDataException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     public int getAutoExport() {
1:         return autoExport;
1:     }
1: 
1:     public String[] getInterfaces() {
1:         return interfaces;
1:     }
1: 
1:     public int getRanking() {
1:         return ranking;
1:     }
1: 
1:     public BPRegistrationListener[] getRegistrationListeners() {
1:         return listeners;
1:     }
1: 
1:     public BPTarget getServiceComponent() {
1:         return serviceComponent;
1:     }
1: 
1:     public BPMapEntry[] getServiceProperties() {
1:         return properties;
1:     }
1: }
============================================================================