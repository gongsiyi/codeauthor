1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6bd0f94: package org.apache.aries.blueprint.parser;
1:79e9d13: 
1:bb726ca: import java.util.ArrayList;
1:f13c6ac: import java.util.Collections;
1:bb726ca: import java.util.Comparator;
1:bb726ca: import java.util.HashMap;
1:f13c6ac: import java.util.LinkedHashMap;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: import java.util.Set;
1:f13c6ac: import java.util.concurrent.CopyOnWriteArrayList;
1:79e9d13: 
1:6414875: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:6414875: import org.apache.aries.blueprint.ComponentNameAlreadyInUseException;
1:bb726ca: import org.apache.aries.blueprint.Interceptor;
1:2f55d71: import org.apache.aries.blueprint.reflect.PassThroughMetadataImpl;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Target;
7:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * ComponentDefinitionRegistry implementation.
1:f13c6ac:  *
1:f13c6ac:  * This implementation uses concurrent lists and maps to store components and converters metadata
1:f13c6ac:  * to allow its use by concurrent threads. 
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class ComponentDefinitionRegistryImpl implements ComponentDefinitionRegistry {
1:c1dc516: 
1:f13c6ac:     private final Map<String, ComponentMetadata> components;
1:f13c6ac:     private final List<Target> typeConverters;
1:bb726ca:     private final Map<ComponentMetadata, List<Interceptor>> interceptors;
1:f13c6ac: 
1:c1dc516:     public ComponentDefinitionRegistryImpl() {
1:f13c6ac:         // Use a linked hash map to keep the declaration order 
1:f13c6ac:         components = Collections.synchronizedMap(new LinkedHashMap<String, ComponentMetadata>());
1:f13c6ac:         typeConverters = new CopyOnWriteArrayList<Target>();
1:bb726ca:         interceptors = Collections.synchronizedMap(new HashMap<ComponentMetadata, List<Interceptor>>());
1:f13c6ac:     }
1:79e9d13: 
1:f492016:     public void reset() {
1:f492016:         components.clear();
1:f492016:         typeConverters.clear();
1:f492016:         interceptors.clear();
1:79e9d13:     }
1:79e9d13: 
1:f13c6ac:     public boolean containsComponentDefinition(String name) {
1:f13c6ac:         return components.containsKey(name);
1:79e9d13:     }
1:79e9d13: 
1:f13c6ac:     public ComponentMetadata getComponentDefinition(String name) {
1:f13c6ac:         return components.get(name);
1:79e9d13:     }
1:79e9d13: 
1:f13c6ac:     public Set<String> getComponentDefinitionNames() {
1:f13c6ac:         return Collections.unmodifiableSet(components.keySet());
1:f492016:     }
1:79e9d13: 
1:f13c6ac:     public void registerComponentDefinition(ComponentMetadata component) {
1:f13c6ac:         String id = component.getId();
1:f13c6ac:         if (id == null) {
1:f13c6ac:             // TODO: should we generate a unique name?
1:f13c6ac:             throw new IllegalArgumentException("Component must have a valid id");
1:f13c6ac:         }
1:2f55d71:         if (id.startsWith("blueprint") && !(component instanceof PassThroughMetadataImpl)) {
1:f13c6ac:             // TODO: log a warning
1:f13c6ac:         }
1:f13c6ac:         // TODO: perform other validation: scope, class/runtimeClass/factoryMethod, etc...
1:f13c6ac:         if (components.containsKey(id)) {
1:f13c6ac:             throw new ComponentNameAlreadyInUseException(id);
1:f13c6ac:         }
1:f13c6ac:         components.put(id, component);
1:f13c6ac:     }
1:f492016: 
1:f13c6ac:     public void removeComponentDefinition(String name) {
1:bb726ca:         ComponentMetadata removed = components.remove(name);
1:bb726ca:         if(removed!=null){
1:bb726ca:             interceptors.remove(removed);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void registerTypeConverter(Target component) {
1:f13c6ac:         typeConverters.add(component);
1:f13c6ac:         if (component instanceof ComponentMetadata) {
1:f13c6ac:             registerComponentDefinition((ComponentMetadata) component);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<Target> getTypeConverters() {
1:f13c6ac:         return typeConverters;
1:f13c6ac:     }
1:f13c6ac: 
1:bb726ca:     public void registerInterceptorWithComponent(ComponentMetadata component, Interceptor interceptor) {
1:bb726ca:         if(interceptor!=null){
1:bb726ca:             List<Interceptor> componentInterceptorList = interceptors.get(component);
1:bb726ca:             if(componentInterceptorList==null){
1:bb726ca:                 componentInterceptorList = new ArrayList<Interceptor>();
1:bb726ca:                 interceptors.put(component, componentInterceptorList);
1:f13c6ac:             }
1:bb726ca:             if(!componentInterceptorList.contains(interceptor)){
1:bb726ca:                 componentInterceptorList.add(interceptor);
1:bb726ca:                 Collections.sort(componentInterceptorList, new Comparator<Interceptor>(){
1:bb726ca:                     public int compare(Interceptor object1, Interceptor object2) {
1:bb726ca:                         //invert the order so higher ranks are sorted 1st
1:bb726ca:                         return object2.getRank() - object1.getRank();
1:f13c6ac:                     }
1:bb726ca:                 });
1:f13c6ac:             }
1:bb726ca:         }
5:bb726ca:     }
1:f13c6ac: 
1:bb726ca:     public List<Interceptor> getInterceptors(ComponentMetadata component) {
1:5dbb0fc:         List<Interceptor> result = interceptors.get(component);
1:5dbb0fc:         return (result == null) ? Collections.<Interceptor>emptyList() : result;
1:79e9d13:     }
1:f13c6ac:     
1:bb726ca: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:6bd0f94
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.parser;
commit:5dbb0fc
/////////////////////////////////////////////////////////////////////////
1:         List<Interceptor> result = interceptors.get(component);
1:         return (result == null) ? Collections.<Interceptor>emptyList() : result;
commit:c1dc516
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     public ComponentDefinitionRegistryImpl() {
/////////////////////////////////////////////////////////////////////////
commit:79e9d13
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.PassThroughMetadata;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.service.blueprint.container.BlueprintContainer;
0: import org.osgi.service.blueprint.container.Converter;
/////////////////////////////////////////////////////////////////////////
1:     
0:     private static final String COMP_ID_BLUEPRINT_CONVERTER = "blueprintConverter";
0:     private static final String COMP_ID_BLUEPRINT_BUNDLE_CONTEXT = "blueprintBundleContext";
0:     private static final String COMP_ID_BLUEPRINT_BUNDLE = "blueprintBundle";
0:     private static final String COMP_ID_BLUEPRINT_CONTAINER = "blueprintContainer";
1:     
0:     public ComponentDefinitionRegistryImpl(BlueprintContainer container, 
0:             BundleContext applicationBundleContext, Converter blueprintConverter) {
1: 
0:         registerComponentDefinition(
0:                 new PassThroughMetadataImpl(COMP_ID_BLUEPRINT_CONTAINER, container));
0:         registerComponentDefinition(
0:                 new PassThroughMetadataImpl(COMP_ID_BLUEPRINT_BUNDLE, applicationBundleContext.getBundle()));
0:         registerComponentDefinition(
0:                 new PassThroughMetadataImpl(COMP_ID_BLUEPRINT_BUNDLE_CONTEXT, applicationBundleContext));
0:         registerComponentDefinition(
0:                 new PassThroughMetadataImpl(COMP_ID_BLUEPRINT_CONVERTER, blueprintConverter));
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Bundle getBlueprintBundle() {
0:         PassThroughMetadata meta = (PassThroughMetadata) components.get(COMP_ID_BLUEPRINT_BUNDLE);
0:         return (Bundle) meta.getObject();
1:     }
1: 
0:     public BundleContext getBlueprintBundleContext() {
0:         PassThroughMetadata meta = (PassThroughMetadata) components.get(COMP_ID_BLUEPRINT_BUNDLE_CONTEXT);
0:         return (BundleContext) meta.getObject();
1:     }
1: 
0:     public BlueprintContainer getBlueprintContainer() {
0:         PassThroughMetadata meta = (PassThroughMetadata) components.get(COMP_ID_BLUEPRINT_CONTAINER);
0:         return (BlueprintContainer) meta.getObject();
1:     }
1: 
0:     public Converter getBlueprintConverter() {
0:         PassThroughMetadata meta = (PassThroughMetadata) components.get(COMP_ID_BLUEPRINT_CONVERTER);
0:         return (Converter) meta.getObject();
1:     }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f492016
/////////////////////////////////////////////////////////////////////////
1:     public void reset() {
1:         components.clear();
1:         typeConverters.clear();
1:         interceptors.clear();
1:     }
1: 
commit:2f55d71
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.reflect.PassThroughMetadataImpl;
/////////////////////////////////////////////////////////////////////////
1:         if (id.startsWith("blueprint") && !(component instanceof PassThroughMetadataImpl)) {
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.namespace;
1: 
1: import java.util.Collections;
1: import java.util.LinkedHashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
0: import org.apache.geronimo.blueprint.ComponentDefinitionRegistry;
0: import org.apache.geronimo.blueprint.ComponentNameAlreadyInUseException;
0: import org.apache.geronimo.blueprint.reflect.EnvironmentMetadataImpl;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Target;
0: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: 
1: /**
1:  * ComponentDefinitionRegistry implementation.
1:  *
1:  * This implementation uses concurrent lists and maps to store components and converters metadata
1:  * to allow its use by concurrent threads. 
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 760378 $, $Date: 2009-03-31 11:31:38 +0200 (Tue, 31 Mar 2009) $
1:  */
1: public class ComponentDefinitionRegistryImpl implements ComponentDefinitionRegistry {
1: 
1:     private final Map<String, ComponentMetadata> components;
1:     private final List<Target> typeConverters;
1: 
0:     public ComponentDefinitionRegistryImpl() {
1:         // Use a linked hash map to keep the declaration order 
1:         components = Collections.synchronizedMap(new LinkedHashMap<String, ComponentMetadata>());
1:         typeConverters = new CopyOnWriteArrayList<Target>();
1:     }
1: 
1:     public boolean containsComponentDefinition(String name) {
1:         return components.containsKey(name);
1:     }
1: 
1:     public ComponentMetadata getComponentDefinition(String name) {
1:         return components.get(name);
1:     }
1: 
1:     public Set<String> getComponentDefinitionNames() {
1:         return Collections.unmodifiableSet(components.keySet());
1:     }
1: 
1:     public void registerComponentDefinition(ComponentMetadata component) {
1:         String id = component.getId();
1:         if (id == null) {
1:             // TODO: should we generate a unique name?
1:             throw new IllegalArgumentException("Component must have a valid id");
1:         }
0:         if (id.startsWith("blueprint") && !(component instanceof EnvironmentMetadataImpl)) {
1:             // TODO: log a warning
1:         }
1:         // TODO: perform other validation: scope, class/runtimeClass/factoryMethod, etc...
1:         if (components.containsKey(id)) {
1:             throw new ComponentNameAlreadyInUseException(id);
1:         }
1:         components.put(id, component);
1:     }
1: 
1:     public void removeComponentDefinition(String name) {
0:         components.remove(name);
1:     }
1: 
1:     public void registerTypeConverter(Target component) {
1:         typeConverters.add(component);
1:         if (component instanceof ComponentMetadata) {
1:             registerComponentDefinition((ComponentMetadata) component);
1:         }
1:     }
1: 
1:     public List<Target> getTypeConverters() {
1:         return typeConverters;
1:     }
1:     
1: }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.namespace;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.ComponentNameAlreadyInUseException;
0: import org.apache.aries.blueprint.reflect.EnvironmentMetadataImpl;
author:Andrew Osborne
-------------------------------------------------------------------------------
commit:bb726ca
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Comparator;
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.Interceptor;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<ComponentMetadata, List<Interceptor>> interceptors;
1:         interceptors = Collections.synchronizedMap(new HashMap<ComponentMetadata, List<Interceptor>>());
/////////////////////////////////////////////////////////////////////////
1:         ComponentMetadata removed = components.remove(name);
1:         if(removed!=null){
1:             interceptors.remove(removed);
1:         }
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void registerInterceptorWithComponent(ComponentMetadata component, Interceptor interceptor) {
1:         if(interceptor!=null){
1:             List<Interceptor> componentInterceptorList = interceptors.get(component);
1:             if(componentInterceptorList==null){
1:                 componentInterceptorList = new ArrayList<Interceptor>();
1:                 interceptors.put(component, componentInterceptorList);
1:             }
1:             if(!componentInterceptorList.contains(interceptor)){
1:                 componentInterceptorList.add(interceptor);
1:                 Collections.sort(componentInterceptorList, new Comparator<Interceptor>(){
1:                     public int compare(Interceptor object1, Interceptor object2) {
1:                         //invert the order so higher ranks are sorted 1st
1:                         return object2.getRank() - object1.getRank();
1:                     }
1:                 });
1:             }
1:         }
1:     }
0: 
1:     public List<Interceptor> getInterceptors(ComponentMetadata component) {
0:         return interceptors.get(component);
1:     }
============================================================================