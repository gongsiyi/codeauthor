1:46cfc09: /**
1:46cfc09:  * Licensed to the Apache Software Foundation (ASF) under one
1:46cfc09:  * or more contributor license agreements.  See the NOTICE file
1:46cfc09:  * distributed with this work for additional information
1:46cfc09:  * regarding copyright ownership.  The ASF licenses this file
1:46cfc09:  * to you under the Apache License, Version 2.0 (the
1:46cfc09:  * "License"); you may not use this file except in compliance
1:46cfc09:  * with the License.  You may obtain a copy of the License at
1:218954f:  * <p>
1:218954f:  * http://www.apache.org/licenses/LICENSE-2.0
1:218954f:  * <p>
1:46cfc09:  * Unless required by applicable law or agreed to in writing,
1:46cfc09:  * software distributed under the License is distributed on an
1:46cfc09:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:46cfc09:  * KIND, either express or implied.  See the License for the
1:46cfc09:  * specific language governing permissions and limitations
1:46cfc09:  * under the License.
1:46cfc09:  */
1:46cfc09: package org.apache.aries.blueprint.plugin.model;
1:fff2e99: 
1:2d488d5: import static junit.framework.Assert.assertFalse;
1:2d488d5: import static org.junit.Assert.assertEquals;
1:2d488d5: import static org.junit.Assert.assertTrue;
1:2d488d5: 
1:2d488d5: import java.util.Arrays;
1:2d488d5: import java.util.HashSet;
1:2d488d5: import java.util.Set;
1:2d488d5: 
1:2d488d5: import javax.inject.Named;
1:2d488d5: 
1:0d2c0ec: import org.apache.aries.blueprint.plugin.BlueprintConfigurationImpl;
1:d1eab6d: import org.apache.aries.blueprint.plugin.bad.BadBean1;
1:d1eab6d: import org.apache.aries.blueprint.plugin.bad.BadBean2;
1:fff2e99: import org.apache.aries.blueprint.plugin.bad.BadBean3;
1:3aa60ba: import org.apache.aries.blueprint.plugin.bad.BadFieldBean1;
1:3aa60ba: import org.apache.aries.blueprint.plugin.bad.BadFieldBean2;
1:3aa60ba: import org.apache.aries.blueprint.plugin.bad.BadFieldBean3;
1:3aa60ba: import org.apache.aries.blueprint.plugin.bad.FieldBean4;
1:2d488d5: import org.apache.aries.blueprint.plugin.test.BeanWithConfig;
1:46cfc09: import org.apache.aries.blueprint.plugin.test.MyBean1;
1:46cfc09: import org.apache.aries.blueprint.plugin.test.MyBean3;
1:65ec8ae: import org.apache.aries.blueprint.plugin.test.MyBean4;
1:218954f: import org.apache.aries.blueprint.plugin.test.MyBean5;
1:46cfc09: import org.apache.aries.blueprint.plugin.test.ServiceAImpl1;
1:46cfc09: import org.junit.Test;
1:218954f: 
1:2d488d5: import com.google.common.collect.Sets;
2:46cfc09: 
1:46cfc09: public class BeanTest {
1:a680609:     private static final String NS_JPA1 = "http://aries.apache.org/xmlns/jpa/v1.1.0";
1:a680609:     private static final String NS_TX1 = "http://aries.apache.org/xmlns/transactions/v1.1.0";
1:46cfc09:     
1:a680609:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(NS_JPA1, NS_TX1));
1:aaf182f:     private final BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null, null);
1:0d2c0ec:     private final Context context = new Context(blueprintConfiguration);
1:46cfc09: 
1:46cfc09:     @Test
1:46cfc09:     public void testParseMyBean1() {
1:0d2c0ec:         Bean bean = new Bean(MyBean1.class, context);
1:0d2c0ec:         bean.resolve(context);
1:46cfc09:         assertEquals(MyBean1.class, bean.clazz);
1:46cfc09:         assertEquals("myBean1", bean.id); // Name derived from class name
1:64f241a:         assertEquals(2, getPersistenceFields(bean).size());
1:64f241a:         assertEquals(Sets.newHashSet("em", "emf"), getPersistenceFields(bean));
1:46cfc09:         assertEquals(1, bean.properties.size());
1:f36cef0:         assertFalse(bean.isPrototype);
1:46cfc09:         Property prop = bean.properties.iterator().next();
1:46cfc09:         assertEquals("bean2", prop.name);
1:46cfc09:         assertEquals("serviceA", prop.ref);
1:fff2e99: 
1:fff2e99:         Set<TransactionalDef> expectedTxs = Sets.newHashSet(new TransactionalDef("*", "RequiresNew"),
1:218954f:             new TransactionalDef("txNotSupported", "NotSupported"),
1:218954f:             new TransactionalDef("txMandatory", "Mandatory"),
1:218954f:             new TransactionalDef("txNever", "Never"),
1:218954f:             new TransactionalDef("txRequired", "Required"),
1:218954f:             new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
1:218954f:             new TransactionalDef("txSupports", "Supports"));
1:0d2c0ec:         assertEquals(expectedTxs, getTransactionalDefs(bean));
1:46cfc09:     }
1:218954f: 
1:46cfc09:     @Test
1:46cfc09:     public void testParseMyBean3() {
1:0d2c0ec:         Bean bean = new Bean(MyBean3.class, context);
1:0d2c0ec:         bean.resolve(context);
1:46cfc09:         assertEquals(MyBean3.class, bean.clazz);
1:46cfc09:         assertEquals("myBean3", bean.id); // Name derived from class name
1:64f241a:         assertEquals("There should be no persistence fields", 0, getPersistenceFields(bean).size());
1:e214baf:         assertEquals(5, bean.properties.size());
1:f36cef0:         assertTrue(bean.isPrototype);
1:fff2e99: 
1:fff2e99:         Set<TransactionalDef> expectedTxs = Sets.newHashSet(new TransactionalDef("*", "RequiresNew"),
1:218954f:             new TransactionalDef("txNotSupported", "NotSupported"),
1:218954f:             new TransactionalDef("txMandatory", "Mandatory"),
1:218954f:             new TransactionalDef("txNever", "Never"),
1:218954f:             new TransactionalDef("txRequired", "Required"),
1:218954f:             new TransactionalDef("txRequiresNew", "RequiresNew"),
1:218954f:             new TransactionalDef("txSupports", "Supports"));
1:0d2c0ec:         assertEquals(expectedTxs, getTransactionalDefs(bean));
1:46cfc09:     }
1:46cfc09: 
1:46cfc09:     @Test
1:46cfc09:     public void testParseNamedBean() {
1:0d2c0ec:         Bean bean = new Bean(ServiceAImpl1.class, context);
1:0d2c0ec:         bean.resolve(context);
1:46cfc09:         String definedName = ServiceAImpl1.class.getAnnotation(Named.class).value();
1:46cfc09:         assertEquals("my1", definedName);
1:46cfc09:         assertEquals("Name should be defined using @Named", definedName, bean.id);
1:64f241a:         assertEquals("There should be no persistence fields", 0,getPersistenceFields(bean).size());
1:0d2c0ec:         assertTrue("There should be no transaction definition", getTransactionalDefs(bean).isEmpty());
1:46cfc09:         assertEquals("There should be no properties", 0, bean.properties.size());
1:f36cef0:         assertTrue(bean.isPrototype);
1:46cfc09:     }
1:65ec8ae: 
1:65ec8ae:     @Test
1:65ec8ae:     public void testBlueprintBundleContext() {
1:0d2c0ec:         Bean bean = new Bean(MyBean4.class, context);
1:0d2c0ec:         bean.resolve(context);
1:65ec8ae:         Property bcProp = bean.properties.iterator().next();
1:65ec8ae:         assertEquals("bundleContext", bcProp.name);
1:65ec8ae:         assertEquals("blueprintBundleContext", bcProp.ref);
1:f36cef0:         assertFalse(bean.isPrototype);
1:fff2e99: 
1:fff2e99:         Set<TransactionalDef> expectedTxs = Sets.newHashSet(new TransactionalDef("txWithoutClassAnnotation", "Supports"));
1:0d2c0ec:         assertEquals(expectedTxs, getTransactionalDefs(bean));
1:65ec8ae:     }
1:46cfc09: 
1:0d2c0ec:     private Set<TransactionalDef> getTransactionalDefs(Bean bean) {
1:0d2c0ec:         Set<String> beanWriters = bean.beanContentWriters.keySet();
1:0d2c0ec:         Set<TransactionalDef> transactionalDefs = new HashSet<>();
1:0d2c0ec:         for (String beanWriter : beanWriters) {
1:0d2c0ec:             if (beanWriter.startsWith("javax.transactional.method/")) {
1:0d2c0ec:                 String[] splitId = beanWriter.split("/");
1:0d2c0ec:                 transactionalDefs.add(new TransactionalDef(splitId[2], splitId[3]));
1:46cfc09:             }
1:0d2c0ec:         }
1:0d2c0ec:         return transactionalDefs;
1:0d2c0ec:     }
1:46cfc09: 
1:64f241a:     private Set<String> getPersistenceFields(Bean bean) {
1:64f241a:         Set<String> beanWriters = bean.beanContentWriters.keySet();
1:64f241a:         Set<String> persistenceFields = new HashSet<>();
1:64f241a:         for (String beanWriter : beanWriters) {
1:64f241a:             if (beanWriter.startsWith("javax.persistence.field.")) {
1:64f241a:                 persistenceFields.add(beanWriter.split("/")[1]);
1:64f241a:             }
1:64f241a:         }
1:64f241a:         return persistenceFields;
1:64f241a:     }
1:46cfc09: 
1:d1eab6d:     @Test(expected = IllegalArgumentException.class)
1:d1eab6d:     public void testMultipleInitMethods() {
1:0d2c0ec:         new Bean(BadBean1.class, context);
1:0d2c0ec:     }
1:46cfc09: 
1:d1eab6d:     @Test(expected = IllegalArgumentException.class)
1:d1eab6d:     public void testMultipleDestroyMethods() {
1:0d2c0ec:         new Bean(BadBean2.class, context);
1:d1eab6d:     }
1:fff2e99: 
1:fff2e99:     @Test(expected = UnsupportedOperationException.class)
1:fff2e99:     public void testSpringNestedTransactionNotSupported() {
1:0d2c0ec:         new Bean(BadBean3.class, context);
1:fff2e99:     }
1:3aa60ba: 
1:3aa60ba:     @Test(expected = UnsupportedOperationException.class)
1:3aa60ba:     public void testBadFieldBean1() {
1:0d2c0ec:         new Context(blueprintConfiguration, BadFieldBean1.class).resolve();
1:3aa60ba:     }
1:3aa60ba: 
1:3aa60ba:     @Test(expected = UnsupportedOperationException.class)
1:3aa60ba:     public void testBadFieldBean2() {
1:0d2c0ec:         new Context(blueprintConfiguration, BadFieldBean2.class).resolve();
1:3aa60ba:     }
1:3aa60ba: 
1:3aa60ba:     @Test(expected = UnsupportedOperationException.class)
1:3aa60ba:     public void testBadFieldBean3() {
1:0d2c0ec:         new Context(blueprintConfiguration, BadFieldBean3.class).resolve();
1:3aa60ba:     }
1:3aa60ba: 
1:3aa60ba:     @Test
1:3aa60ba:     public void testFieldBean4() {
1:0d2c0ec:         new Context(blueprintConfiguration, FieldBean4.class).resolve();
1:3aa60ba:     }
1:218954f: 
1:218954f:     @Test
1:218954f:     public void testParseBeanWithConstructorInject() {
1:0d2c0ec:         Bean bean = new Bean(MyBean5.class, context);
1:0d2c0ec:         bean.resolve(context);
1:218954f:         assertEquals(MyBean5.class, bean.clazz);
1:218954f:         assertEquals("myBean5", bean.id); // Name derived from class name
1:64f241a:         assertTrue("There should be no persistenceUnit", getPersistenceFields(bean).isEmpty());
1:218954f:         assertEquals(0, bean.properties.size());
1:59217b2:         assertEquals(8, bean.constructorArguments.size());
1:218954f:         assertEquals("my2", bean.constructorArguments.get(0).getRef());
1:218954f:         assertEquals("serviceA", bean.constructorArguments.get(1).getRef());
1:218954f:         assertEquals("serviceB", bean.constructorArguments.get(2).getRef());
1:218954f:         assertEquals("100", bean.constructorArguments.get(3).getValue());
1:218954f:         assertEquals("ser1", bean.constructorArguments.get(4).getRef());
1:218954f:         assertEquals("ser2", bean.constructorArguments.get(5).getRef());
1:218954f:         assertEquals("serviceA", bean.constructorArguments.get(6).getRef());
1:59217b2:         assertEquals("produced2", bean.constructorArguments.get(7).getRef());
1:218954f:     }
1:2d488d5:     
1:2d488d5:     @Test
1:2d488d5:     public void testParseBeanWithConfig() {
1:2d488d5:         Bean bean = new Bean(BeanWithConfig.class, context);
1:2d488d5:         bean.resolve(context);
1:2d488d5:         assertEquals("There should be a property", 1, bean.properties.size());
1:2d488d5:         Property prop = bean.properties.iterator().next();
1:2d488d5:         assertEquals("title", prop.name);
1:2e5722d:         assertEquals("$[title]", prop.value);
1:2d488d5:     }
1:d1eab6d: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:2e5722d
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("$[title]", prop.value);
commit:2d488d5
/////////////////////////////////////////////////////////////////////////
1: import static junit.framework.Assert.assertFalse;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import javax.inject.Named;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.test.BeanWithConfig;
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testParseBeanWithConfig() {
1:         Bean bean = new Bean(BeanWithConfig.class, context);
1:         bean.resolve(context);
1:         assertEquals("There should be a property", 1, bean.properties.size());
1:         Property prop = bean.properties.iterator().next();
1:         assertEquals("title", prop.name);
0:         assertEquals("${title}", prop.value);
1:     }
commit:59217b2
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(8, bean.constructorArguments.size());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("produced2", bean.constructorArguments.get(7).getRef());
commit:218954f
/////////////////////////////////////////////////////////////////////////
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.test.MyBean5;
0: import javax.inject.Named;
0: import java.util.Set;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertNull;
0: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:                 new TransactionalDef("txNotSupported", "NotSupported"),
1:                 new TransactionalDef("txMandatory", "Mandatory"),
1:                 new TransactionalDef("txNever", "Never"),
1:                 new TransactionalDef("txRequired", "Required"),
1:                 new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
1:                 new TransactionalDef("txSupports", "Supports"));
/////////////////////////////////////////////////////////////////////////
1:                 new TransactionalDef("txNotSupported", "NotSupported"),
1:                 new TransactionalDef("txMandatory", "Mandatory"),
1:                 new TransactionalDef("txNever", "Never"),
1:                 new TransactionalDef("txRequired", "Required"),
1:                 new TransactionalDef("txRequiresNew", "RequiresNew"),
1:                 new TransactionalDef("txSupports", "Supports"));
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testParseBeanWithConstructorInject() {
0:         Bean bean = new Bean(MyBean5.class);
0:         bean.resolve(new Context());
1:         assertEquals(MyBean5.class, bean.clazz);
1:         assertEquals("myBean5", bean.id); // Name derived from class name
0:         assertNull("There should be no initMethod", bean.initMethod);
0:         assertNull("There should be no destroyMethod", bean.destroyMethod);
0:         assertTrue("There should be no persistenceUnit", bean.persistenceFields.isEmpty());
1:         assertEquals(0, bean.properties.size());
0:         assertEquals(7, bean.constructorArguments.size());
1:         assertEquals("my2", bean.constructorArguments.get(0).getRef());
1:         assertEquals("serviceA", bean.constructorArguments.get(1).getRef());
1:         assertEquals("serviceB", bean.constructorArguments.get(2).getRef());
1:         assertEquals("100", bean.constructorArguments.get(3).getValue());
1:         assertEquals("ser1", bean.constructorArguments.get(4).getRef());
1:         assertEquals("ser2", bean.constructorArguments.get(5).getRef());
1:         assertEquals("serviceA", bean.constructorArguments.get(6).getRef());
1:     }
1: 
commit:3aa60ba
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.bad.BadFieldBean1;
1: import org.apache.aries.blueprint.plugin.bad.BadFieldBean2;
1: import org.apache.aries.blueprint.plugin.bad.BadFieldBean3;
1: import org.apache.aries.blueprint.plugin.bad.FieldBean4;
/////////////////////////////////////////////////////////////////////////
0:         Assert.assertEquals(2, bean.persistenceFields.size());
0:         assertEquals("em", bean.persistenceFields.get(0).getName());
0:         assertEquals("emf", bean.persistenceFields.get(1).getName());
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("There should be no persistence fields", 0, bean.persistenceFields.size());
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("There should be no persistence fields", 0, bean.persistenceFields.size());
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(expected = UnsupportedOperationException.class)
1:     public void testBadFieldBean1() {
0:         new Context(BadFieldBean1.class).resolve();
1:     }
1: 
1:     @Test(expected = UnsupportedOperationException.class)
1:     public void testBadFieldBean2() {
0:         new Context(BadFieldBean2.class).resolve();
1:     }
1: 
1:     @Test(expected = UnsupportedOperationException.class)
1:     public void testBadFieldBean3() {
0:         new Context(BadFieldBean3.class).resolve();
1:     }
1: 
1:     @Test
1:     public void testFieldBean4() {
0:         new Context(FieldBean4.class).resolve();
1:     }
commit:fff2e99
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.plugin.bad.BadBean3;
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1: 
1:         Set<TransactionalDef> expectedTxs = Sets.newHashSet(new TransactionalDef("*", "RequiresNew"),
0:                                                             new TransactionalDef("txNotSupported", "NotSupported"),
0:                                                             new TransactionalDef("txMandatory", "Mandatory"),
0:                                                             new TransactionalDef("txNever", "Never"),
0:                                                             new TransactionalDef("txRequired", "Required"),
0:                                                             new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
0:                                                             new TransactionalDef("txSupports", "Supports"));
0:         assertEquals(expectedTxs, bean.transactionDefs);
/////////////////////////////////////////////////////////////////////////
1: 
1:         Set<TransactionalDef> expectedTxs = Sets.newHashSet(new TransactionalDef("*", "RequiresNew"),
0:                                                             new TransactionalDef("txNotSupported", "NotSupported"),
0:                                                             new TransactionalDef("txMandatory", "Mandatory"),
0:                                                             new TransactionalDef("txNever", "Never"),
0:                                                             new TransactionalDef("txRequired", "Required"),
0:                                                             new TransactionalDef("txRequiresNew", "RequiresNew"),
0:                                                             new TransactionalDef("txSupports", "Supports"));
0:         assertEquals(expectedTxs, bean.transactionDefs);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("There should be no transaction definition", bean.transactionDefs.isEmpty());
/////////////////////////////////////////////////////////////////////////
1: 
1:         Set<TransactionalDef> expectedTxs = Sets.newHashSet(new TransactionalDef("txWithoutClassAnnotation", "Supports"));
0:         assertEquals(expectedTxs, bean.transactionDefs);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(expected = UnsupportedOperationException.class)
1:     public void testSpringNestedTransactionNotSupported() {
0:         new Bean(BadBean3.class);
1:     }
commit:f36cef0
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(bean.isPrototype);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bean.isPrototype);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(bean.isPrototype);
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(bean.isPrototype);
commit:e214baf
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(5, bean.properties.size());
commit:65ec8ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.test.MyBean4;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testBlueprintBundleContext() {
0:         Bean bean = new Bean(MyBean4.class);
0:         bean.resolve(new Context());
1:         Property bcProp = bean.properties.iterator().next();
1:         assertEquals("bundleContext", bcProp.name);
1:         assertEquals("blueprintBundleContext", bcProp.ref);
1:     }
commit:b5bf406
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(4, bean.properties.size());
commit:66fc490
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
0:         Assert.assertEquals(2, bean.persistenceFields.length);
0:         assertEquals("em", bean.persistenceFields[0].getName());
0:         assertEquals("emf", bean.persistenceFields[1].getName());
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("There should be no persistence fields", 0, bean.persistenceFields.length);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("There should be no persistence fields", 0, bean.persistenceFields.length);
commit:46cfc09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.model;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNull;
1: 
0: import javax.inject.Named;
1: 
1: import org.apache.aries.blueprint.plugin.test.MyBean1;
1: import org.apache.aries.blueprint.plugin.test.MyBean3;
1: import org.apache.aries.blueprint.plugin.test.ServiceAImpl1;
1: import org.junit.Test;
1: 
1: 
1: public class BeanTest {
1:     
1:     @Test
1:     public void testParseMyBean1() {
0:         Bean bean = new Bean(MyBean1.class);
0:         bean.resolve(new Context());
1:         assertEquals(MyBean1.class, bean.clazz);
1:         assertEquals("myBean1", bean.id); // Name derived from class name
0:         assertEquals("init", bean.initMethod);
0:         assertEquals("destroy", bean.destroyMethod);
0:         assertEquals("em", bean.persistenceUnitField.getName());
0:         assertEquals("*", bean.transactionDef.getMethod());
0:         assertEquals("Required", bean.transactionDef.getType());
1:         assertEquals(1, bean.properties.size());
1:         Property prop = bean.properties.iterator().next();
1:         assertEquals("bean2", prop.name);
1:         assertEquals("serviceA", prop.ref);
1:     }
1:     
1:     @Test
1:     public void testParseMyBean3() {
0:         Bean bean = new Bean(MyBean3.class);
0:         bean.resolve(new Context());
1:         assertEquals(MyBean3.class, bean.clazz);
1:         assertEquals("myBean3", bean.id); // Name derived from class name
0:         assertNull("There should be no initMethod", bean.initMethod);
0:         assertNull("There should be no destroyMethod", bean.destroyMethod);
0:         assertNull("There should be no persistenceUnit", bean.persistenceUnitField);
0:         assertEquals("*", bean.transactionDef.getMethod());
0:         assertEquals("RequiresNew", bean.transactionDef.getType());
0:         assertEquals(3, bean.properties.size());
1:     }
1:     
1:     @Test
1:     public void testParseNamedBean() {
0:         Bean bean = new Bean(ServiceAImpl1.class);
0:         bean.resolve(new Context());
1:         String definedName = ServiceAImpl1.class.getAnnotation(Named.class).value();
1:         assertEquals("my1", definedName);
1:         assertEquals("Name should be defined using @Named", definedName, bean.id);
0:         assertNull("There should be no initMethod", bean.initMethod);
0:         assertNull("There should be no destroyMethod", bean.destroyMethod);
0:         assertNull("There should be no persistenceUnit", bean.persistenceUnitField);
0:         assertNull("There should be no transaction definition", bean.transactionDef);
1:         assertEquals("There should be no properties", 0, bean.properties.size());
1:     }
1: 
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:aaf182f
/////////////////////////////////////////////////////////////////////////
1:     private final BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null, null);
commit:a680609
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String NS_JPA1 = "http://aries.apache.org/xmlns/jpa/v1.1.0";
1:     private static final String NS_TX1 = "http://aries.apache.org/xmlns/transactions/v1.1.0";
0:     
1:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(NS_JPA1, NS_TX1));
commit:64f241a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.javax.PersistenceUnitHandler;
/////////////////////////////////////////////////////////////////////////
0:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(PersistenceUnitHandler.NS_JPA, JavaxTransactionFactory.NS_TX));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(2, getPersistenceFields(bean).size());
1:         assertEquals(Sets.newHashSet("em", "emf"), getPersistenceFields(bean));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("There should be no persistence fields", 0, getPersistenceFields(bean).size());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("There should be no persistence fields", 0,getPersistenceFields(bean).size());
/////////////////////////////////////////////////////////////////////////
1:     private Set<String> getPersistenceFields(Bean bean) {
1:         Set<String> beanWriters = bean.beanContentWriters.keySet();
1:         Set<String> persistenceFields = new HashSet<>();
1:         for (String beanWriter : beanWriters) {
1:             if (beanWriter.startsWith("javax.persistence.field.")) {
1:                 persistenceFields.add(beanWriter.split("/")[1]);
1:             }
1:         }
1:         return persistenceFields;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("There should be no persistenceUnit", getPersistenceFields(bean).isEmpty());
commit:119afa3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.javax.JavaxTransactionFactory;
/////////////////////////////////////////////////////////////////////////
0:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(Generator.NS_JPA, JavaxTransactionFactory.NS_TX));
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.BlueprintConfigurationImpl;
0: import org.apache.aries.blueprint.plugin.Generator;
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.HashSet;
0: import static junit.framework.Assert.assertFalse;
0:     private final Set<String> namespaces = new HashSet<String>(Arrays.asList(Generator.NS_JPA, Generator.NS_TX));
0:     private final BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null);
1:     private final Context context = new Context(blueprintConfiguration);
1:         Bean bean = new Bean(MyBean1.class, context);
1:         bean.resolve(context);
0:         assertEquals(2, bean.persistenceFields.size());
/////////////////////////////////////////////////////////////////////////
0:             new TransactionalDef("txNotSupported", "NotSupported"),
0:             new TransactionalDef("txMandatory", "Mandatory"),
0:             new TransactionalDef("txNever", "Never"),
0:             new TransactionalDef("txRequired", "Required"),
0:             new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
0:             new TransactionalDef("txSupports", "Supports"));
1:         assertEquals(expectedTxs, getTransactionalDefs(bean));
1:         Bean bean = new Bean(MyBean3.class, context);
1:         bean.resolve(context);
/////////////////////////////////////////////////////////////////////////
0:             new TransactionalDef("txNotSupported", "NotSupported"),
0:             new TransactionalDef("txMandatory", "Mandatory"),
0:             new TransactionalDef("txNever", "Never"),
0:             new TransactionalDef("txRequired", "Required"),
0:             new TransactionalDef("txRequiresNew", "RequiresNew"),
0:             new TransactionalDef("txSupports", "Supports"));
1:         assertEquals(expectedTxs, getTransactionalDefs(bean));
1:         Bean bean = new Bean(ServiceAImpl1.class, context);
1:         bean.resolve(context);
1:         assertTrue("There should be no transaction definition", getTransactionalDefs(bean).isEmpty());
1:         Bean bean = new Bean(MyBean4.class, context);
1:         bean.resolve(context);
1:         assertEquals(expectedTxs, getTransactionalDefs(bean));
1:     private Set<TransactionalDef> getTransactionalDefs(Bean bean) {
1:         Set<String> beanWriters = bean.beanContentWriters.keySet();
1:         Set<TransactionalDef> transactionalDefs = new HashSet<>();
1:         for (String beanWriter : beanWriters) {
1:             if (beanWriter.startsWith("javax.transactional.method/")) {
1:                 String[] splitId = beanWriter.split("/");
1:                 transactionalDefs.add(new TransactionalDef(splitId[2], splitId[3]));
1:             }
1:         }
1:         return transactionalDefs;
1:     }
0: 
0: 
1:         new Bean(BadBean1.class, context);
1:         new Bean(BadBean2.class, context);
1:         new Bean(BadBean3.class, context);
1:         new Context(blueprintConfiguration, BadFieldBean1.class).resolve();
1:         new Context(blueprintConfiguration, BadFieldBean2.class).resolve();
1:         new Context(blueprintConfiguration, BadFieldBean3.class).resolve();
1:         new Context(blueprintConfiguration, FieldBean4.class).resolve();
1:         Bean bean = new Bean(MyBean5.class, context);
1:         bean.resolve(context);
/////////////////////////////////////////////////////////////////////////
commit:a04c623
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:asf-sync-process
-------------------------------------------------------------------------------
commit:d1eab6d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.bad.BadBean1;
1: import org.apache.aries.blueprint.plugin.bad.BadBean2;
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testMultipleInitMethods() {
0:         new Bean(BadBean1.class);
1:     }
0: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void testMultipleDestroyMethods() {
0:         new Bean(BadBean2.class);
1:     }
============================================================================