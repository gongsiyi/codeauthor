1:1c72f1f: /**
1:1c72f1f:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c72f1f:  * or more contributor license agreements.  See the NOTICE file
1:1c72f1f:  * distributed with this work for additional information
1:1c72f1f:  * regarding copyright ownership.  The ASF licenses this file
1:1c72f1f:  * to you under the Apache License, Version 2.0 (the
1:1c72f1f:  * "License"); you may not use this file except in compliance
1:1c72f1f:  * with the License.  You may obtain a copy of the License at
1:1c72f1f:  *
1:1c72f1f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c72f1f:  *
1:1c72f1f:  * Unless required by applicable law or agreed to in writing,
1:1c72f1f:  * software distributed under the License is distributed on an
1:1c72f1f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c72f1f:  * KIND, either express or implied.  See the License for the
1:1c72f1f:  * specific language governing permissions and limitations
1:1c72f1f:  * under the License.
1:1c72f1f:  */
1:01524e7: package org.apache.aries.blueprint.authorization.impl;
1:01524e7: 
1:01524e7: import java.lang.annotation.Annotation;
1:01524e7: import java.lang.reflect.AnnotatedElement;
1:01524e7: import java.lang.reflect.Method;
1:01524e7: 
1:01524e7: import javax.annotation.security.DenyAll;
1:01524e7: import javax.annotation.security.PermitAll;
1:01524e7: import javax.annotation.security.RolesAllowed;
1:01524e7: 
1:01524e7: /**
1:01524e7:  * Evaluates JEE security annotations 
1:01524e7:  * @see PermitAll
1:01524e7:  * @see DenyAll
1:01524e7:  * @see RolesAllowed
1:01524e7:  */
1:01524e7: class SecurityAnotationParser {
1:01524e7: 
1:01524e7:     /**
1:01524e7:      * Get the effective annotation regarding method annotations override class annotations.
1:01524e7:      * DenyAll has highest priority then RolesAllowed and in the end PermitAll. 
1:86e60ab:      * So the most restrictive annotation is preferred.
1:01524e7:      * 
1:01524e7:      * @param m Method to check
1:01524e7:      * @return effective annotation (either DenyAll, PermitAll or RolesAllowed)
1:01524e7:      */
1:ed14de6:     Annotation getEffectiveAnnotation(Class<?> beanClass, Method m) {
1:ed14de6:         Annotation classLevel = getAuthAnnotation(beanClass);
1:ed14de6:         try {
1:ed14de6:             Method beanMethod = beanClass.getMethod(m.getName(), m.getParameterTypes());
1:ed14de6:             Annotation methodLevel = getAuthAnnotation(beanMethod);
1:ed14de6:             return (methodLevel != null) ? methodLevel : classLevel;
1:ed14de6:         } catch (Exception e) {
1:ed14de6:             throw new IllegalStateException(e);
1:ed14de6:         }
1:01524e7:     }
1:01524e7: 
1:01524e7:     private Annotation getAuthAnnotation(AnnotatedElement element) {
1:01524e7:         Annotation ann = null;
1:01524e7:         ann = element.getAnnotation(DenyAll.class);
1:01524e7:         if (ann == null) {
1:01524e7:             ann = element.getAnnotation(RolesAllowed.class);
1:01524e7:         }
1:01524e7:         if (ann == null) {
1:01524e7:             ann = element.getAnnotation(PermitAll.class);
1:01524e7:         }
1:01524e7:         return ann;
1:01524e7:     }
1:01524e7: 
1:3f62ee0:     /**
1:3f62ee0:      * A class is secured if either the class or one of its methods is secured.
1:3f62ee0:      * An AnnotatedElement is secured if @RolesAllowed or @DenyAll is present.
1:3f62ee0:      * 
1:3f62ee0:      * @param clazz
1:3f62ee0:      * @return
1:3f62ee0:      */
1:3f62ee0:     public boolean isSecured(Class<?> clazz) {
1:3f62ee0:         if (clazz == Object.class) {
1:3f62ee0:             return false;
1:3f62ee0:         }
1:3f62ee0:         if (isSecuredEl(clazz)) {
1:3f62ee0:             return true;
1:3f62ee0:         }
1:3f62ee0:         for (Method m : clazz.getMethods()) {
1:3f62ee0:             if (isSecuredEl(m)) {
1:3f62ee0:                 return true;
1:3f62ee0:             }
1:3f62ee0: 
1:3f62ee0:         }
1:3f62ee0:         return false;
1:3f62ee0:     }
1:3f62ee0:     
1:3f62ee0:     private boolean isSecuredEl(AnnotatedElement element) {
1:3f62ee0:         return element.isAnnotationPresent(RolesAllowed.class) || element.isAnnotationPresent(DenyAll.class); 
1:3f62ee0:     }
1:ed14de6: 
1:01524e7: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ed14de6
/////////////////////////////////////////////////////////////////////////
1:     Annotation getEffectiveAnnotation(Class<?> beanClass, Method m) {
1:         Annotation classLevel = getAuthAnnotation(beanClass);
1:         try {
1:             Method beanMethod = beanClass.getMethod(m.getName(), m.getParameterTypes());
1:             Annotation methodLevel = getAuthAnnotation(beanMethod);
1:             return (methodLevel != null) ? methodLevel : classLevel;
1:         } catch (Exception e) {
1:             throw new IllegalStateException(e);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
commit:86e60ab
/////////////////////////////////////////////////////////////////////////
1:      * So the most restrictive annotation is preferred.
commit:3f62ee0
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * A class is secured if either the class or one of its methods is secured.
1:      * An AnnotatedElement is secured if @RolesAllowed or @DenyAll is present.
1:      * 
1:      * @param clazz
1:      * @return
1:      */
1:     public boolean isSecured(Class<?> clazz) {
1:         if (clazz == Object.class) {
1:             return false;
1:         }
1:         if (isSecuredEl(clazz)) {
1:             return true;
1:         }
1:         for (Method m : clazz.getMethods()) {
1:             if (isSecuredEl(m)) {
1:                 return true;
1:             }
1: 
1:         }
1:         return false;
1:     }
1:     
1:     private boolean isSecuredEl(AnnotatedElement element) {
1:         return element.isAnnotationPresent(RolesAllowed.class) || element.isAnnotationPresent(DenyAll.class); 
1:     }
commit:1c72f1f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:01524e7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.authorization.impl;
1: 
1: import java.lang.annotation.Annotation;
1: import java.lang.reflect.AnnotatedElement;
1: import java.lang.reflect.Method;
1: 
1: import javax.annotation.security.DenyAll;
1: import javax.annotation.security.PermitAll;
1: import javax.annotation.security.RolesAllowed;
1: 
1: /**
1:  * Evaluates JEE security annotations 
1:  * @see PermitAll
1:  * @see DenyAll
1:  * @see RolesAllowed
1:  */
1: class SecurityAnotationParser {
1: 
1:     /**
1:      * Get the effective annotation regarding method annotations override class annotations.
1:      * DenyAll has highest priority then RolesAllowed and in the end PermitAll. 
0:      * So the most restrictive annotation is pereferred.
1:      * 
1:      * @param m Method to check
1:      * @return effective annotation (either DenyAll, PermitAll or RolesAllowed)
1:      */
0:     Annotation getEffectiveAnnotation(Method m) {
0:         Annotation classLevel = getAuthAnnotation(m.getDeclaringClass());
0:         Annotation methodLevel = getAuthAnnotation(m);
0:         return (methodLevel != null) ? methodLevel : classLevel;
1:     }
1: 
1:     private Annotation getAuthAnnotation(AnnotatedElement element) {
1:         Annotation ann = null;
1:         ann = element.getAnnotation(DenyAll.class);
1:         if (ann == null) {
1:             ann = element.getAnnotation(RolesAllowed.class);
1:         }
1:         if (ann == null) {
1:             ann = element.getAnnotation(PermitAll.class);
1:         }
1:         return ann;
1:     }
1: 
1: }
============================================================================