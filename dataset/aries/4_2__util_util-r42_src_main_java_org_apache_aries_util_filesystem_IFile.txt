1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
1:8914925: 
1:910fec0: package org.apache.aries.util.filesystem;
1:8914925: 
1:8914925: import java.io.IOException;
1:8914925: import java.io.InputStream;
1:8914925: import java.net.MalformedURLException;
1:8914925: import java.net.URL;
1:8914925: 
1:8914925: /**
1:8914925:  * A virtual file on the virtual file system. This may represent a file or a
1:8914925:  * directory.
1:8914925:  */
1:8914925: public interface IFile
1:8914925: {
1:8914925:   /**
1:04290f8:    * @return the name of the file relative to the root of the virtual FS. This will return a '/' separated path
1:04290f8:    * indepedent of underlying filesystem
1:8914925:    */
1:8914925:   public String getName();
1:8914925:   /**
1:8914925:    * @return true iff this IFile is also an IDirectory
1:8914925:    */
1:8914925:   public boolean isDirectory();
1:8914925:   /**
1:8914925:    * @return true iff this IFile is not an IDirectory
1:8914925:    */
1:8914925:   public boolean isFile();
1:8914925:   /**
1:8914925:    * @return the last modified date of the file.
1:8914925:    */
1:8914925:   public long getLastModified();
1:8914925:   /**
1:8914925:    * @return the size of the file.
1:8914925:    */
1:8914925:   public long getSize();
1:8914925:   
1:8914925:   /**
1:8914925:    * @return if this is a directory return this as an IDirectory, otherwise return null.
1:8914925:    */
1:8914925:   public IDirectory convert();
1:8914925:   
1:8914925:   /**
1:e62fca9:    * @return if this is a directory or an archive, returns the opened IDirectory
1:e62fca9:    */
1:e62fca9:   public IDirectory convertNested();
1:e62fca9:   
1:e62fca9:   /**
1:8914925:    * @return returns the parent directory of this IFile, or null if this is the root.
1:8914925:    */
1:8914925:   public IDirectory getParent();
1:8914925:   
1:8914925:   /**
1:8914925:    * The input stream returned by this method should always be closed after use.
1:8914925:    * 
1:8914925:    * @return An InputStream to read the file from.
1:8914925:    * 
1:8914925:    * @throws IOException
1:8914925:    * @throws UnsupportedOperationException If the IFile is also an IDirectory.
1:8914925:    */
1:8914925:   public InputStream open() throws IOException, UnsupportedOperationException;
1:8914925:   
1:8914925:   /**
1:8914925:    * @return the root of this file system.
1:8914925:    */
1:8914925:   public IDirectory getRoot();
1:8914925:   /**
1:8914925:    * @return a URL that can be used to get at this file at a later date.
1:8914925:    * @throws MalformedURLException 
1:8914925:    */
1:8914925:   public URL toURL() throws MalformedURLException ;
1:8914925: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:04290f8
/////////////////////////////////////////////////////////////////////////
1:    * @return the name of the file relative to the root of the virtual FS. This will return a '/' separated path
1:    * indepedent of underlying filesystem
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.filesystem;
commit:e62fca9
/////////////////////////////////////////////////////////////////////////
1:    * @return if this is a directory or an archive, returns the opened IDirectory
1:    */
1:   public IDirectory convertNested();
1:   
1:   /**
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.filesystem;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: 
1: /**
1:  * A virtual file on the virtual file system. This may represent a file or a
1:  * directory.
1:  */
1: public interface IFile
1: {
1:   /**
0:    * @return the name of the file relative to the root of the virtual FS.
1:    */
1:   public String getName();
1:   /**
1:    * @return true iff this IFile is also an IDirectory
1:    */
1:   public boolean isDirectory();
1:   /**
1:    * @return true iff this IFile is not an IDirectory
1:    */
1:   public boolean isFile();
1:   /**
1:    * @return the last modified date of the file.
1:    */
1:   public long getLastModified();
1:   /**
1:    * @return the size of the file.
1:    */
1:   public long getSize();
1:   
1:   /**
1:    * @return if this is a directory return this as an IDirectory, otherwise return null.
1:    */
1:   public IDirectory convert();
1:   
1:   /**
1:    * @return returns the parent directory of this IFile, or null if this is the root.
1:    */
1:   public IDirectory getParent();
1:   
1:   /**
1:    * The input stream returned by this method should always be closed after use.
1:    * 
1:    * @return An InputStream to read the file from.
1:    * 
1:    * @throws IOException
1:    * @throws UnsupportedOperationException If the IFile is also an IDirectory.
1:    */
1:   public InputStream open() throws IOException, UnsupportedOperationException;
1:   
1:   /**
1:    * @return the root of this file system.
1:    */
1:   public IDirectory getRoot();
1:   /**
1:    * @return a URL that can be used to get at this file at a later date.
1:    * @throws MalformedURLException 
1:    */
1:   public URL toURL() throws MalformedURLException ;
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:3c38842
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.filesystem;
0: 
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.net.MalformedURLException;
0: import java.net.URL;
0: 
0: /**
0:  * A virtual file on the virtual file system. This may represent a file or a
0:  * directory.
0:  */
0: public interface IFile
0: {
0:   /**
0:    * @return the name of the file relative to the root of the virtual FS.
0:    */
0:   public String getName();
0:   /**
0:    * @return true iff this IFile is also an IDirectory
0:    */
0:   public boolean isDirectory();
0:   /**
0:    * @return true iff this IFile is not an IDirectory
0:    */
0:   public boolean isFile();
0:   /**
0:    * @return the last modified date of the file.
0:    */
0:   public long getLastModified();
0:   /**
0:    * @return the size of the file.
0:    */
0:   public long getSize();
0:   
0:   /**
0:    * @return if this is a directory return this as an IDirectory, otherwise return null.
0:    */
0:   public IDirectory convert();
0:   
0:   /**
0:    * @return returns the parent directory of this IFile, or null if this is the root.
0:    */
0:   public IDirectory getParent();
0:   
0:   /**
0:    * The input stream returned by this method should always be closed after use.
0:    * 
0:    * @return An InputStream to read the file from.
0:    * 
0:    * @throws IOException
0:    * @throws UnsupportedOperationException If the IFile is also an IDirectory.
0:    */
0:   public InputStream open() throws IOException, UnsupportedOperationException;
0:   
0:   /**
0:    * @return the root of this file system.
0:    */
0:   public IDirectory getRoot();
0:   /**
0:    * @return a URL that can be used to get at this file at a later date.
0:    * @throws MalformedURLException 
0:    */
0:   public URL toURL() throws MalformedURLException ;
0: }
============================================================================