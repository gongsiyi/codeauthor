1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
1:6c69a67:  */
1:7a834c3: package org.apache.aries.subsystem.util.felix;
1:6c69a67: 
1:6c69a67: import java.io.InputStream;
1:6c69a67: import java.net.URL;
1:6c69a67: import java.util.ArrayList;
1:6c69a67: import java.util.Collections;
1:6c69a67: import java.util.List;
1:6c69a67: import java.util.Map;
1:6c69a67: 
1:7a834c3: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
1:7a834c3: import org.apache.aries.subsystem.obr.internal.ResourceHelper;
1:eb467d6: import org.osgi.framework.namespace.HostNamespace;
1:6c69a67: import org.osgi.framework.namespace.IdentityNamespace;
1:6c69a67: import org.osgi.resource.Capability;
1:6c69a67: import org.osgi.resource.Requirement;
1:6c69a67: import org.osgi.resource.Resource;
1:6c69a67: import org.osgi.service.repository.RepositoryContent;
1:6c69a67: 
1:6c69a67: public class FelixResourceAdapter implements Resource, RepositoryContent {
1:6c69a67: 	private final org.apache.felix.bundlerepository.Resource resource;
1:6c69a67: 	
1:6c69a67: 	public FelixResourceAdapter(final org.apache.felix.bundlerepository.Resource resource) {
1:6c69a67: 		this.resource = resource;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	public boolean equals(Object o) {
1:6c69a67: 		if (o == this) 
1:6c69a67: 			return true;
1:11df25a: 		if (!(o instanceof FelixResourceAdapter)) 
1:6c69a67: 			return false;
1:11df25a: 		FelixResourceAdapter that = (FelixResourceAdapter)o;
1:6c69a67: 		if (!ResourceHelper.getTypeAttribute(that).equals(ResourceHelper.getTypeAttribute(this))) 
1:6c69a67: 			return false;
1:6c69a67: 		if (!ResourceHelper.getSymbolicNameAttribute(that).equals(ResourceHelper.getSymbolicNameAttribute(this)))
1:6c69a67: 			return false;
1:6c69a67: 		if (!ResourceHelper.getVersionAttribute(that).equals(ResourceHelper.getVersionAttribute(this)))
1:6c69a67: 			return false;
1:6c69a67: 		return true;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	public int hashCode() {
1:6c69a67: 		int result = 17;
1:6c69a67: 		result = 31 * result + ResourceHelper.getTypeAttribute(this).hashCode();
1:6c69a67: 		result = 31 * result + ResourceHelper.getSymbolicNameAttribute(this).hashCode();
1:6c69a67: 		result = 31 * result + ResourceHelper.getVersionAttribute(this).hashCode();
2:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	public List<Capability> getCapabilities(String namespace) {
1:e7c43cd: 	    ArrayList<Capability> result = new ArrayList<Capability>();
1:6c69a67: 		namespace = NamespaceTranslator.translate(namespace);
1:6c69a67: 		if (namespace == null || namespace.equals(IdentityNamespace.IDENTITY_NAMESPACE)) {
1:e7c43cd: 			result.add(new OsgiIdentityCapability(this, resource.getSymbolicName(), resource.getVersion()));
1:e7c43cd: 			if (namespace != null)  {
1:e7c43cd: 				result.trimToSize();
1:e7c43cd: 			    return Collections.unmodifiableList(result);
1:e7c43cd: 			}
1:6c69a67: 		}
1:6c69a67: 		// TODO Add to constants.
1:e7c43cd: 		if (namespace == null || namespace.equals("osgi.content")) {
1:e7c43cd: 			result.add(new OsgiContentCapability(this, resource.getURI()));
1:e7c43cd: 			if (namespace != null) {
1:e7c43cd: 				result.trimToSize();
1:e7c43cd: 			    return Collections.unmodifiableList(result);
1:e7c43cd: 			}
1:6c69a67: 		}
1:eb467d6: 		if (namespace == null || namespace.equals(HostNamespace.HOST_NAMESPACE)) {
1:eb467d6: 			result.add(new OsgiWiringHostCapability(this, resource.getSymbolicName(), resource.getVersion()));
1:eb467d6: 			if (namespace != null) {
1:eb467d6: 				result.trimToSize();
1:eb467d6: 			    return Collections.unmodifiableList(result);
1:eb467d6: 			}
1:eb467d6: 		}
1:6c69a67: 		org.apache.felix.bundlerepository.Capability[] capabilities = resource.getCapabilities();
1:6c69a67: 		for (org.apache.felix.bundlerepository.Capability capability : capabilities) {
1:e7c43cd: 			if (namespace == null || capability.getName().equals(namespace)) {
1:e7c43cd: 			    result.add(new FelixCapabilityAdapter(capability, this));
1:e7c43cd: 			}
1:6c69a67: 		}
1:6c69a67: 		result.trimToSize();
1:e7c43cd: 		return Collections.unmodifiableList(result);
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	@Override
1:6c69a67: 	public InputStream getContent() {
1:6c69a67: 		try {
1:6c69a67: 			return new URL(resource.getURI()).openStream();
1:6c69a67: 		}
1:6c69a67: 		catch (Exception e) {
1:6c69a67: 			throw new RuntimeException(e);
1:6c69a67: 		}
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public List<Requirement> getRequirements(String namespace) {
1:6c69a67: 		namespace = NamespaceTranslator.translate(namespace);
1:6c69a67: 		org.apache.felix.bundlerepository.Requirement[] requirements = resource.getRequirements();
1:6c69a67: 		ArrayList<Requirement> result = new ArrayList<Requirement>(requirements.length);
1:6c69a67: 		for (final org.apache.felix.bundlerepository.Requirement requirement : requirements) {
1:6c69a67: 			if (namespace == null || requirement.getName().equals(namespace)) 
1:6c69a67: 				result.add(new FelixRequirementAdapter(requirement, this));
1:6c69a67: 		}
1:6c69a67: 		result.trimToSize();
1:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: 	
1:6c69a67: 	@Override
1:6c69a67: 	public String toString() {
1:6c69a67: 		Capability c = getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE)
1:6c69a67: 				.iterator().next();
1:6c69a67: 		Map<String, Object> atts = c.getAttributes();
1:6c69a67: 		return new StringBuilder()
1:6c69a67: 				.append(atts.get(IdentityNamespace.IDENTITY_NAMESPACE))
1:6c69a67: 				.append(';')
1:6c69a67: 				.append(atts
1:6c69a67: 						.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE))
1:6c69a67: 				.append(';')
1:6c69a67: 				.append(atts.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE))
1:6c69a67: 				.toString();
1:6c69a67: 	}
1:6c69a67: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:11df25a
/////////////////////////////////////////////////////////////////////////
1: 		if (!(o instanceof FelixResourceAdapter)) 
1: 		FelixResourceAdapter that = (FelixResourceAdapter)o;
author:John Ross
-------------------------------------------------------------------------------
commit:eb467d6
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.HostNamespace;
/////////////////////////////////////////////////////////////////////////
1: 		if (namespace == null || namespace.equals(HostNamespace.HOST_NAMESPACE)) {
1: 			result.add(new OsgiWiringHostCapability(this, resource.getSymbolicName(), resource.getVersion()));
1: 			if (namespace != null) {
1: 				result.trimToSize();
1: 			    return Collections.unmodifiableList(result);
1: 			}
1: 		}
commit:e7c43cd
/////////////////////////////////////////////////////////////////////////
1: 	    ArrayList<Capability> result = new ArrayList<Capability>();
1: 			result.add(new OsgiIdentityCapability(this, resource.getSymbolicName(), resource.getVersion()));
1: 			if (namespace != null)  {
1: 				result.trimToSize();
1: 			    return Collections.unmodifiableList(result);
1: 			}
1: 		if (namespace == null || namespace.equals("osgi.content")) {
1: 			result.add(new OsgiContentCapability(this, resource.getURI()));
1: 			if (namespace != null) {
1: 				result.trimToSize();
1: 			    return Collections.unmodifiableList(result);
1: 			}
1: 			if (namespace == null || capability.getName().equals(namespace)) {
1: 			    result.add(new FelixCapabilityAdapter(capability, this));
1: 			}
1: 		return Collections.unmodifiableList(result);
commit:9731fd6
/////////////////////////////////////////////////////////////////////////
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.aries.subsystem.obr.internal;
1: 
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.internal.OsgiContentCapability;
0: import org.apache.aries.subsystem.core.internal.OsgiIdentityCapability;
0: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.repository.RepositoryContent;
1: 
1: public class FelixResourceAdapter implements Resource, RepositoryContent {
1: 	private final org.apache.felix.bundlerepository.Resource resource;
1: 	
1: 	public FelixResourceAdapter(final org.apache.felix.bundlerepository.Resource resource) {
1: 		this.resource = resource;
1: 	}
1: 	
1: 	public boolean equals(Object o) {
1: 		if (o == this) 
1: 			return true;
0: 		if (!(o instanceof Resource)) 
1: 			return false;
0: 		Resource that = (Resource)o;
1: 		if (!ResourceHelper.getTypeAttribute(that).equals(ResourceHelper.getTypeAttribute(this))) 
1: 			return false;
1: 		if (!ResourceHelper.getSymbolicNameAttribute(that).equals(ResourceHelper.getSymbolicNameAttribute(this)))
1: 			return false;
1: 		if (!ResourceHelper.getVersionAttribute(that).equals(ResourceHelper.getVersionAttribute(this)))
1: 			return false;
1: 		return true;
1: 	}
1: 	
1: 	public int hashCode() {
1: 		int result = 17;
1: 		result = 31 * result + ResourceHelper.getTypeAttribute(this).hashCode();
1: 		result = 31 * result + ResourceHelper.getSymbolicNameAttribute(this).hashCode();
1: 		result = 31 * result + ResourceHelper.getVersionAttribute(this).hashCode();
1: 		return result;
1: 	}
1: 	
1: 	public List<Capability> getCapabilities(String namespace) {
1: 		namespace = NamespaceTranslator.translate(namespace);
1: 		if (namespace == null || namespace.equals(IdentityNamespace.IDENTITY_NAMESPACE)) {
0: 			Capability c = new OsgiIdentityCapability(this, resource.getSymbolicName(), resource.getVersion());
0: 			return Collections.singletonList(c);
1: 		}
1: 		// TODO Add to constants.
0: 		if (namespace.equals("osgi.content")) {
0: 			Capability c = new OsgiContentCapability(this, resource.getURI());
0: 			return Collections.singletonList(c);
1: 		}
1: 		org.apache.felix.bundlerepository.Capability[] capabilities = resource.getCapabilities();
0: 		ArrayList<Capability> result = new ArrayList<Capability>(capabilities.length);
1: 		for (org.apache.felix.bundlerepository.Capability capability : capabilities) {
0: 			if (namespace != null && !capability.getName().equals(namespace)) continue;
0: 			result.add(new FelixCapabilityAdapter(capability, this));
1: 		}
1: 		result.trimToSize();
1: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public InputStream getContent() {
1: 		try {
1: 			return new URL(resource.getURI()).openStream();
1: 		}
1: 		catch (Exception e) {
1: 			throw new RuntimeException(e);
1: 		}
1: 	}
1: 
1: 	public List<Requirement> getRequirements(String namespace) {
1: 		namespace = NamespaceTranslator.translate(namespace);
1: 		org.apache.felix.bundlerepository.Requirement[] requirements = resource.getRequirements();
1: 		ArrayList<Requirement> result = new ArrayList<Requirement>(requirements.length);
1: 		for (final org.apache.felix.bundlerepository.Requirement requirement : requirements) {
1: 			if (namespace == null || requirement.getName().equals(namespace)) 
1: 				result.add(new FelixRequirementAdapter(requirement, this));
1: 		}
1: 		result.trimToSize();
1: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public String toString() {
1: 		Capability c = getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE)
1: 				.iterator().next();
1: 		Map<String, Object> atts = c.getAttributes();
1: 		return new StringBuilder()
1: 				.append(atts.get(IdentityNamespace.IDENTITY_NAMESPACE))
1: 				.append(';')
1: 				.append(atts
1: 						.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE))
1: 				.append(';')
1: 				.append(atts.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE))
1: 				.toString();
1: 	}
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.util.felix;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
1: import org.apache.aries.subsystem.obr.internal.ResourceHelper;
============================================================================