1:5320c0f: /*
1:5320c0f:  * Licensed to the Apache Software Foundation (ASF) under one
1:5320c0f:  * or more contributor license agreements.  See the NOTICE file
1:5320c0f:  * distributed with this work for additional information
1:5320c0f:  * regarding copyright ownership.  The ASF licenses this file
1:5320c0f:  * to you under the Apache License, Version 2.0 (the
1:5320c0f:  * "License"); you may not use this file except in compliance
1:5320c0f:  * with the License.  You may obtain a copy of the License at
1:5320c0f:  *
1:5320c0f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5320c0f:  *
1:5320c0f:  * Unless required by applicable law or agreed to in writing,
1:5320c0f:  * software distributed under the License is distributed on an
1:5320c0f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5320c0f:  * KIND, either express or implied.  See the License for the
1:5320c0f:  * specific language governing permissions and limitations
1:5320c0f:  * under the License.
1:5320c0f:  */
1:5320c0f: package org.apache.aries.subsystem.itests.performance;
1:5320c0f: 
1:5320c0f: import java.io.IOException;
1:5320c0f: import java.io.InputStream;
1:5320c0f: import java.io.OutputStream;
1:5320c0f: import java.util.ArrayList;
1:5320c0f: import java.util.Collection;
1:5320c0f: import java.util.concurrent.Callable;
1:5320c0f: import java.util.concurrent.ExecutorService;
1:5320c0f: import java.util.concurrent.Executors;
1:5320c0f: import java.util.concurrent.Future;
1:5320c0f: import java.util.zip.ZipEntry;
1:5320c0f: import java.util.zip.ZipOutputStream;
1:5320c0f: 
1:5320c0f: import org.apache.aries.subsystem.itests.SubsystemTest;
1:5320c0f: import org.easymock.internal.matchers.Null;
1:5320c0f: import org.ops4j.pax.tinybundles.core.TinyBundle;
1:5320c0f: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:5320c0f: import org.osgi.framework.Constants;
1:5320c0f: import org.osgi.service.subsystem.Subsystem;
1:5320c0f: 
1:5320c0f: public abstract class AbstractPerformanceTest extends SubsystemTest {
1:5320c0f:     protected static final int ARRAY_SIZE_BYTES = 2048;
1:5320c0f:     protected static final int BUNDLE_COUNT = 25;
1:5320c0f:     protected static final int PACKAGE_COUNT = 10;
1:5320c0f:     protected static final int THREAD_COUNT = 1;
1:5320c0f:     protected static final int TRIAL_COUNT = 1;
1:5320c0f:     
1:5320c0f:     protected final ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);
1:5320c0f:     
1:5320c0f:     protected void addBundles(ZipOutputStream zos, String symbolicNamePrefix, String packageNamePrefix, String importOrExport) throws IOException {
1:5320c0f:         for (int i = 0; i < BUNDLE_COUNT; i++) {
1:5320c0f:             String symbolicName = symbolicNamePrefix + i;
1:5320c0f:             zos.putNextEntry(new ZipEntry(symbolicName + ".jar"));
1:5320c0f:             InputStream is = createBundle(symbolicName, packageNamePrefix, importOrExport);
1:5320c0f:             copy(is, zos);
1:5320c0f:             is.close();
1:5320c0f:             zos.closeEntry();
1:5320c0f:         }
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     protected static double average(long[] values) {
1:5320c0f:         double sum = 0;
1:5320c0f:         for (long value : values) {
1:5320c0f:             sum += value;
1:5320c0f:         }
1:5320c0f:         return sum / values.length;
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     protected static void copy(InputStream is, OutputStream os) throws IOException {
1:5320c0f:         byte[] bytes = new byte[ARRAY_SIZE_BYTES];
1:5320c0f:         int read;
1:5320c0f:         while ((read = is.read(bytes)) != -1) {
1:5320c0f:             os.write(bytes, 0, read);
1:5320c0f:         }
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     protected InputStream createBundle(String symbolicName, String packageNamePrefix, String importOrExport) {
1:5320c0f:         TinyBundle tinyBundle = TinyBundles.bundle();
1:5320c0f:         tinyBundle.set(Constants.BUNDLE_SYMBOLICNAME, symbolicName);
1:5320c0f:         StringBuilder builder = new StringBuilder(packageNamePrefix + 0);
1:5320c0f:         for (int i = 1; i < PACKAGE_COUNT; i++) {
1:5320c0f:             builder.append(',');
1:5320c0f:             builder.append(packageNamePrefix + i);
1:5320c0f:         }
1:5320c0f:         tinyBundle.set(importOrExport, builder.toString());
1:5320c0f:         InputStream is = tinyBundle.build();
1:5320c0f:         return is;
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     protected static Collection<Callable<Null>> createUninstallSubsystemCallables(Collection<Future<Subsystem>> futures) {
1:5320c0f:         Collection<Callable<Null>> callables = new ArrayList<Callable<Null>>(futures.size());
1:5320c0f:         for (Future<Subsystem> future : futures) {
1:5320c0f:             try {
1:5320c0f:                 final Subsystem subsystem = future.get();
1:5320c0f:                 callables.add(new Callable<Null>() {
1:5320c0f:                     @Override
1:5320c0f:                     public Null call() throws Exception {
1:5320c0f:                         subsystem.uninstall();
1:5320c0f:                         return null;
1:5320c0f:                     }
1:5320c0f:                 });
1:5320c0f:             }
1:5320c0f:             catch (Exception e) {}
1:5320c0f:         }
1:5320c0f:         return callables;
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     protected void runTrials(Collection<Callable<Subsystem>> callables) throws InterruptedException {
1:5320c0f:         long[] times = new long[TRIAL_COUNT];
1:5320c0f:         for (int i = 0; i < TRIAL_COUNT; i++) {
1:5320c0f:             long start = System.currentTimeMillis();
1:5320c0f:             Collection<Future<Subsystem>> futures = executor.invokeAll(callables);
1:5320c0f:             long end = System.currentTimeMillis();
1:5320c0f:             times[i] = end - start;
1:5320c0f:             System.out.println("Trial " + i + " took " + times[i] + " ms");
1:5320c0f:             uninstallSubsystems(futures);
1:5320c0f:         }
1:5320c0f:         System.out.println("Average time across " + TRIAL_COUNT + " trials: " + average(times) + " ms");
1:5320c0f:         executor.shutdownNow();
1:5320c0f:     }
1:5320c0f:     
1:5320c0f:     protected void uninstallSubsystems(Collection<Future<Subsystem>> futures) throws InterruptedException {
1:5320c0f:         Collection<Callable<Null>> callables = createUninstallSubsystemCallables(futures);
1:5320c0f:         executor.invokeAll(callables);
1:5320c0f:     }
1:5320c0f: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:5320c0f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.performance;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.easymock.internal.matchers.Null;
1: import org.ops4j.pax.tinybundles.core.TinyBundle;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: 
1: public abstract class AbstractPerformanceTest extends SubsystemTest {
1:     protected static final int ARRAY_SIZE_BYTES = 2048;
1:     protected static final int BUNDLE_COUNT = 25;
1:     protected static final int PACKAGE_COUNT = 10;
1:     protected static final int THREAD_COUNT = 1;
1:     protected static final int TRIAL_COUNT = 1;
1:     
1:     protected final ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);
1:     
1:     protected void addBundles(ZipOutputStream zos, String symbolicNamePrefix, String packageNamePrefix, String importOrExport) throws IOException {
1:         for (int i = 0; i < BUNDLE_COUNT; i++) {
1:             String symbolicName = symbolicNamePrefix + i;
1:             zos.putNextEntry(new ZipEntry(symbolicName + ".jar"));
1:             InputStream is = createBundle(symbolicName, packageNamePrefix, importOrExport);
1:             copy(is, zos);
1:             is.close();
1:             zos.closeEntry();
1:         }
1:     }
1:     
1:     protected static double average(long[] values) {
1:         double sum = 0;
1:         for (long value : values) {
1:             sum += value;
1:         }
1:         return sum / values.length;
1:     }
1:     
1:     protected static void copy(InputStream is, OutputStream os) throws IOException {
1:         byte[] bytes = new byte[ARRAY_SIZE_BYTES];
1:         int read;
1:         while ((read = is.read(bytes)) != -1) {
1:             os.write(bytes, 0, read);
1:         }
1:     }
1:     
1:     protected InputStream createBundle(String symbolicName, String packageNamePrefix, String importOrExport) {
1:         TinyBundle tinyBundle = TinyBundles.bundle();
1:         tinyBundle.set(Constants.BUNDLE_SYMBOLICNAME, symbolicName);
1:         StringBuilder builder = new StringBuilder(packageNamePrefix + 0);
1:         for (int i = 1; i < PACKAGE_COUNT; i++) {
1:             builder.append(',');
1:             builder.append(packageNamePrefix + i);
1:         }
1:         tinyBundle.set(importOrExport, builder.toString());
1:         InputStream is = tinyBundle.build();
1:         return is;
1:     }
1:     
1:     protected static Collection<Callable<Null>> createUninstallSubsystemCallables(Collection<Future<Subsystem>> futures) {
1:         Collection<Callable<Null>> callables = new ArrayList<Callable<Null>>(futures.size());
1:         for (Future<Subsystem> future : futures) {
1:             try {
1:                 final Subsystem subsystem = future.get();
1:                 callables.add(new Callable<Null>() {
1:                     @Override
1:                     public Null call() throws Exception {
1:                         subsystem.uninstall();
1:                         return null;
1:                     }
1:                 });
1:             }
1:             catch (Exception e) {}
1:         }
1:         return callables;
1:     }
1:     
1:     protected void runTrials(Collection<Callable<Subsystem>> callables) throws InterruptedException {
1:         long[] times = new long[TRIAL_COUNT];
1:         for (int i = 0; i < TRIAL_COUNT; i++) {
1:             long start = System.currentTimeMillis();
1:             Collection<Future<Subsystem>> futures = executor.invokeAll(callables);
1:             long end = System.currentTimeMillis();
1:             times[i] = end - start;
1:             System.out.println("Trial " + i + " took " + times[i] + " ms");
1:             uninstallSubsystems(futures);
1:         }
1:         System.out.println("Average time across " + TRIAL_COUNT + " trials: " + average(times) + " ms");
1:         executor.shutdownNow();
1:     }
1:     
1:     protected void uninstallSubsystems(Collection<Future<Subsystem>> futures) throws InterruptedException {
1:         Collection<Callable<Null>> callables = createUninstallSubsystemCallables(futures);
1:         executor.invokeAll(callables);
1:     }
1: }
============================================================================