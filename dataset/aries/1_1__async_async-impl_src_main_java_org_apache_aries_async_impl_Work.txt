1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:39cd3f4: package org.apache.aries.async.impl;
1:39cd3f4: 
1:39cd3f4: import java.lang.reflect.InvocationTargetException;
1:39cd3f4: import java.security.AccessControlContext;
1:39cd3f4: import java.security.AccessController;
1:39cd3f4: import java.security.PrivilegedActionException;
1:39cd3f4: import java.security.PrivilegedExceptionAction;
1:39cd3f4: 
1:a038667: import org.apache.aries.async.promise.PromiseImpl;
1:39cd3f4: 
1:39cd3f4: public class Work<T> implements Runnable {
1:39cd3f4: 
1:39cd3f4: 	private final MethodCall methodCall;
1:39cd3f4: 	
1:a038667: 	private final PromiseImpl<T> promiseImpl;
1:39cd3f4: 
1:39cd3f4: 	private final AccessControlContext acc;
1:39cd3f4: 	
1:a038667: 	public Work(MethodCall methodCall, PromiseImpl<T> promiseImpl) {
1:39cd3f4: 		this.methodCall = methodCall;
1:a038667: 		this.promiseImpl = promiseImpl;
1:39cd3f4: 		this.acc = AccessController.getContext();
1:39cd3f4: 	}
1:39cd3f4: 
1:39cd3f4: 
1:39cd3f4: 	public void run() {
1:39cd3f4: 		try {
1:39cd3f4: 			final Object service = methodCall.getService();
1:39cd3f4: 			// This is necessary for non public methods. The original mediator call must
1:39cd3f4: 			// have been allowed to happen, so this should always be safe.
1:39cd3f4: 			methodCall.method.setAccessible(true);
1:39cd3f4: 			
1:39cd3f4: 			@SuppressWarnings("unchecked")
1:39cd3f4: 			T returnValue = AccessController.doPrivileged(new PrivilegedExceptionAction<T>() {
1:39cd3f4: 				public T run() throws Exception {
1:39cd3f4: 					return (T) methodCall.method.invoke(service, methodCall.arguments);
1:39cd3f4: 				}
1:39cd3f4: 			}, acc);
1:39cd3f4: 			
1:a038667: 			promiseImpl.resolve(returnValue);
1:39cd3f4: 			
1:39cd3f4: 		} catch (PrivilegedActionException pae) {
1:39cd3f4: 			Throwable targetException = pae.getCause();
1:39cd3f4: 			if(targetException instanceof InvocationTargetException) {
1:39cd3f4: 				targetException = ((InvocationTargetException) targetException).getTargetException();
1:39cd3f4: 			}
1:a038667: 			promiseImpl.fail(targetException);
1:39cd3f4: 		} catch (Exception e) {
1:a038667: 			promiseImpl.fail(e);
1:39cd3f4: 		} finally {
1:39cd3f4: 			methodCall.releaseService();
1:39cd3f4: 		}
1:39cd3f4: 	}
1:39cd3f4: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:a038667
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.async.promise.PromiseImpl;
1: 	private final PromiseImpl<T> promiseImpl;
1: 	public Work(MethodCall methodCall, PromiseImpl<T> promiseImpl) {
1: 		this.promiseImpl = promiseImpl;
/////////////////////////////////////////////////////////////////////////
1: 			promiseImpl.resolve(returnValue);
1: 			promiseImpl.fail(targetException);
1: 			promiseImpl.fail(e);
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:39cd3f4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.impl;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: import java.security.AccessControlContext;
1: import java.security.AccessController;
1: import java.security.PrivilegedActionException;
1: import java.security.PrivilegedExceptionAction;
1: 
0: import org.osgi.util.promise.Deferred;
1: 
1: public class Work<T> implements Runnable {
1: 
1: 	private final MethodCall methodCall;
1: 	
0: 	private final Deferred<T> deferred;
1: 
1: 	private final AccessControlContext acc;
1: 	
0: 	public Work(MethodCall methodCall, Deferred<T> deferred) {
1: 		this.methodCall = methodCall;
0: 		this.deferred = deferred;
1: 		this.acc = AccessController.getContext();
1: 	}
1: 
1: 
1: 	public void run() {
1: 		try {
1: 			final Object service = methodCall.getService();
1: 			// This is necessary for non public methods. The original mediator call must
1: 			// have been allowed to happen, so this should always be safe.
1: 			methodCall.method.setAccessible(true);
1: 			
1: 			@SuppressWarnings("unchecked")
1: 			T returnValue = AccessController.doPrivileged(new PrivilegedExceptionAction<T>() {
1: 				public T run() throws Exception {
1: 					return (T) methodCall.method.invoke(service, methodCall.arguments);
1: 				}
1: 			}, acc);
1: 			
0: 			deferred.resolve(returnValue);
1: 			
1: 		} catch (PrivilegedActionException pae) {
1: 			Throwable targetException = pae.getCause();
1: 			if(targetException instanceof InvocationTargetException) {
1: 				targetException = ((InvocationTargetException) targetException).getTargetException();
1: 			}
0: 			deferred.fail(targetException);
1: 		} catch (Exception e) {
0: 			deferred.fail(e);
1: 		} finally {
1: 			methodCall.releaseService();
1: 		}
1: 	}
1: }
============================================================================