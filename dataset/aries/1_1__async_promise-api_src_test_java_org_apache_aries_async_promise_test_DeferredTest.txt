1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:0d3d319: package org.apache.aries.async.promise.test;
1:0d3d319: 
1:0d3d319: import org.osgi.util.promise.Deferred;
1:0d3d319: import org.osgi.util.promise.Promise;
1:0d3d319: import org.junit.Test;
1:0d3d319: 
1:0d3d319: import java.lang.reflect.InvocationTargetException;
1:0d3d319: 
1:0d3d319: import static org.junit.Assert.*;
1:0d3d319: 
1:0d3d319: public class DeferredTest {
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testResolve() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         Promise<String> promise = def.getPromise();
1:0d3d319:         assertFalse("Initial Promise not resolved", promise.isDone());
1:0d3d319: 
1:0d3d319:         def.resolve("Hello");
1:0d3d319:         assertTrue("Promise resolved", promise.isDone());
1:0d3d319:         assertEquals("Value matches", "Hello", promise.getValue());
1:0d3d319:         assertNull("Failure is null", promise.getFailure());
1:0d3d319: 
1:0d3d319:         try {
1:0d3d319:             def.resolve("Again");
1:0d3d319:             fail("Already resolved didn't throw IllegalStateException");
1:0d3d319:         } catch (IllegalStateException e) {
1:0d3d319:             // suppress empty catch block warning
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testResolveWithSuccess() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         Promise<String> promise = def.getPromise();
1:0d3d319: 
1:0d3d319:         Deferred<String> with = new Deferred<String>();
1:0d3d319:         Promise<Void> resolvedWith = def.resolveWith(with.getPromise());
1:0d3d319: 
1:0d3d319:         // If the specified Promise is successfully resolved,
1:0d3d319:         // the associated Promise is resolved with the value of the specified Promise.
1:0d3d319:         with.resolve("resolveWith");
1:0d3d319:         assertTrue("Promise resolved", promise.isDone());
1:0d3d319:         assertEquals("Value matches", "resolveWith", promise.getValue());
1:0d3d319: 
1:0d3d319:         // The returned Promise will be successfully resolved, with the value null,
1:0d3d319:         // if the associated Promise was resolved by the specified Promise.
1:0d3d319:         assertNull("resolveWith null", resolvedWith.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testResolveWithAlreadyResolved() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         Deferred<String> with = new Deferred<String>();
1:0d3d319:         Promise<Void> resolvedWith = def.resolveWith(with.getPromise());
1:0d3d319: 
1:0d3d319:         // The returned Promise will be resolved with a failure of IllegalStateException
1:0d3d319:         // if the associated Promise was already resolved when the specified Promise was resolved.
1:0d3d319:         def.resolve("Already resolved");
1:0d3d319:         with.resolve("resolveWith");
1:0d3d319:         @SuppressWarnings({"not thrown", "all"})
1:0d3d319:         Throwable failure = resolvedWith.getFailure();
1:0d3d319:         assertTrue("resolveWith IllegalStateException", failure instanceof IllegalStateException);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testResolveWithAlreadyFailed() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         Deferred<String> with = new Deferred<String>();
1:0d3d319:         Promise<Void> resolvedWith = def.resolveWith(with.getPromise());
1:0d3d319: 
1:0d3d319:         // The returned Promise will be resolved with a failure of IllegalStateException
1:0d3d319:         // if the associated Promise was already resolved when the specified Promise was resolved.
1:0d3d319:         def.resolve("Already resolved");
1:0d3d319:         with.fail(new Throwable("failed"));
1:0d3d319:         @SuppressWarnings({"not thrown", "all"})
1:0d3d319:         Throwable failure = resolvedWith.getFailure();
1:0d3d319:         assertTrue("resolveWith IllegalStateException", failure instanceof IllegalStateException);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testResolveWithFailure() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         Promise<String> promise = def.getPromise();
1:0d3d319: 
1:0d3d319:         Deferred<String> def2 = new Deferred<String>();
1:0d3d319:         Promise<String> promise2 = def2.getPromise();
1:0d3d319:         Promise<Void> with = def.resolveWith(promise2);
1:0d3d319: 
1:0d3d319:         // If the specified Promise is resolved with a failure,
1:0d3d319:         // the associated Promise is resolved with the failure of the specified Promise.
1:0d3d319:         Exception failure = new Exception("resolveWithFailure");
1:0d3d319:         def2.fail(failure);
1:0d3d319:         assertTrue("Promise resolved", promise.isDone());
1:0d3d319:         assertEquals("Failure matches", failure, promise.getFailure());
1:0d3d319: 
1:0d3d319:         // The returned Promise will be successfully resolved, with the value null,
1:0d3d319:         // if the associated Promise was resolved by the specified Promise.
1:0d3d319:         assertNull("resolveWith null", with.getValue());
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testFail() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         Promise<String> promise = def.getPromise();
1:0d3d319:         Exception failure = new Exception("Oops");
1:0d3d319: 
1:0d3d319:         def.fail(failure);
1:0d3d319:         assertTrue("Promise resolved", promise.isDone());
1:0d3d319:         assertEquals("Failure matches", failure, promise.getFailure());
1:0d3d319: 
1:0d3d319:         try {
1:0d3d319:             promise.getValue();
1:0d3d319:             fail("getValue didn't throw InvocationTargetException");
1:0d3d319:         } catch (InvocationTargetException e) {
1:0d3d319:             assertEquals("Failure matches", failure, e.getCause());
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         try {
1:0d3d319:             def.fail(failure);
1:0d3d319:             fail("Already failed didn't throw IllegalStateException");
1:0d3d319:         } catch (IllegalStateException e) {
1:0d3d319:             assertNotNull(e);
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319: 
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.promise.test;
1: 
1: import org.osgi.util.promise.Deferred;
1: import org.osgi.util.promise.Promise;
1: import org.junit.Test;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class DeferredTest {
1: 
1:     @Test
1:     public void testResolve() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         Promise<String> promise = def.getPromise();
1:         assertFalse("Initial Promise not resolved", promise.isDone());
1: 
1:         def.resolve("Hello");
1:         assertTrue("Promise resolved", promise.isDone());
1:         assertEquals("Value matches", "Hello", promise.getValue());
1:         assertNull("Failure is null", promise.getFailure());
1: 
1:         try {
1:             def.resolve("Again");
1:             fail("Already resolved didn't throw IllegalStateException");
1:         } catch (IllegalStateException e) {
1:             // suppress empty catch block warning
1:         }
1:     }
1: 
1:     @Test
1:     public void testResolveWithSuccess() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         Promise<String> promise = def.getPromise();
1: 
1:         Deferred<String> with = new Deferred<String>();
1:         Promise<Void> resolvedWith = def.resolveWith(with.getPromise());
1: 
1:         // If the specified Promise is successfully resolved,
1:         // the associated Promise is resolved with the value of the specified Promise.
1:         with.resolve("resolveWith");
1:         assertTrue("Promise resolved", promise.isDone());
1:         assertEquals("Value matches", "resolveWith", promise.getValue());
1: 
1:         // The returned Promise will be successfully resolved, with the value null,
1:         // if the associated Promise was resolved by the specified Promise.
1:         assertNull("resolveWith null", resolvedWith.getValue());
1:     }
1: 
1:     @Test
1:     public void testResolveWithAlreadyResolved() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         Deferred<String> with = new Deferred<String>();
1:         Promise<Void> resolvedWith = def.resolveWith(with.getPromise());
1: 
1:         // The returned Promise will be resolved with a failure of IllegalStateException
1:         // if the associated Promise was already resolved when the specified Promise was resolved.
1:         def.resolve("Already resolved");
1:         with.resolve("resolveWith");
1:         @SuppressWarnings({"not thrown", "all"})
1:         Throwable failure = resolvedWith.getFailure();
1:         assertTrue("resolveWith IllegalStateException", failure instanceof IllegalStateException);
1:     }
1: 
1:     @Test
1:     public void testResolveWithAlreadyFailed() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         Deferred<String> with = new Deferred<String>();
1:         Promise<Void> resolvedWith = def.resolveWith(with.getPromise());
1: 
1:         // The returned Promise will be resolved with a failure of IllegalStateException
1:         // if the associated Promise was already resolved when the specified Promise was resolved.
1:         def.resolve("Already resolved");
1:         with.fail(new Throwable("failed"));
1:         @SuppressWarnings({"not thrown", "all"})
1:         Throwable failure = resolvedWith.getFailure();
1:         assertTrue("resolveWith IllegalStateException", failure instanceof IllegalStateException);
1:     }
1: 
1:     @Test
1:     public void testResolveWithFailure() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         Promise<String> promise = def.getPromise();
1: 
1:         Deferred<String> def2 = new Deferred<String>();
1:         Promise<String> promise2 = def2.getPromise();
1:         Promise<Void> with = def.resolveWith(promise2);
1: 
1:         // If the specified Promise is resolved with a failure,
1:         // the associated Promise is resolved with the failure of the specified Promise.
1:         Exception failure = new Exception("resolveWithFailure");
1:         def2.fail(failure);
1:         assertTrue("Promise resolved", promise.isDone());
1:         assertEquals("Failure matches", failure, promise.getFailure());
1: 
1:         // The returned Promise will be successfully resolved, with the value null,
1:         // if the associated Promise was resolved by the specified Promise.
1:         assertNull("resolveWith null", with.getValue());
1:     }
1: 
1:     @Test
1:     public void testFail() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         Promise<String> promise = def.getPromise();
1:         Exception failure = new Exception("Oops");
1: 
1:         def.fail(failure);
1:         assertTrue("Promise resolved", promise.isDone());
1:         assertEquals("Failure matches", failure, promise.getFailure());
1: 
1:         try {
1:             promise.getValue();
1:             fail("getValue didn't throw InvocationTargetException");
1:         } catch (InvocationTargetException e) {
1:             assertEquals("Failure matches", failure, e.getCause());
1:         }
1: 
1:         try {
1:             def.fail(failure);
1:             fail("Already failed didn't throw IllegalStateException");
1:         } catch (IllegalStateException e) {
1:             assertNotNull(e);
1:         }
1:     }
1: 
1: 
1: }
============================================================================