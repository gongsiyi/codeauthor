1:c59073f: /*
1:c59073f:  * Licensed to the Apache Software Foundation (ASF) under one
1:c59073f:  * or more contributor license agreements.  See the NOTICE file
1:c59073f:  * distributed with this work for additional information
1:c59073f:  * regarding copyright ownership.  The ASF licenses this file
1:c59073f:  * to you under the Apache License, Version 2.0 (the
1:c59073f:  * "License"); you may not use this file except in compliance
1:c59073f:  * with the License.  You may obtain a copy of the License at
1:c59073f:  *
1:c59073f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c59073f:  *
1:c59073f:  * Unless required by applicable law or agreed to in writing,
1:c59073f:  * software distributed under the License is distributed on an
1:c59073f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c59073f:  * KIND, either express or implied.  See the License for the
1:c59073f:  * specific language governing permissions and limitations
1:c59073f:  * under the License.
1:c59073f:  */
1:c59073f: package org.apache.aries.subsystem.itests.defect;
1:c59073f: 
1:c59073f: import static org.junit.Assert.assertEquals;
1:c59073f: import static org.junit.Assert.assertFalse;
1:c59073f: import static org.junit.Assert.assertNull;
1:c59073f: 
1:c59073f: import java.io.IOException;
1:c59073f: import java.util.Collection;
1:c59073f: import java.util.Dictionary;
1:c59073f: import java.util.HashMap;
1:c59073f: import java.util.Hashtable;
1:c59073f: import java.util.Map;
1:c59073f: 
1:c59073f: import org.apache.aries.subsystem.core.archive.GenericHeader;
1:c59073f: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1:c59073f: import org.apache.aries.subsystem.itests.SubsystemTest;
1:c59073f: import org.junit.Test;
1:c59073f: import org.osgi.framework.BundleContext;
1:c59073f: import org.osgi.framework.Constants;
1:c59073f: import org.osgi.framework.ServiceReference;
1:c59073f: import org.osgi.framework.ServiceRegistration;
1:c59073f: import org.osgi.service.coordinator.Coordinator;
1:c59073f: import org.osgi.service.subsystem.Subsystem;
1:c59073f: import org.osgi.service.subsystem.SubsystemConstants;
1:c59073f: 
1:c59073f: /*
1:c59073f:  * https://issues.apache.org/jira/browse/ARIES-1426
1:c59073f:  * 
1:c59073f:  * Implementation specific subsystem header Application-ImportService should not 
1:c59073f:  * affect the sharing policy.
1:c59073f:  */
1:c59073f: public class Aries1426Test extends SubsystemTest {
1:c59073f: 	/*
1:c59073f: 	 * Subsystem-SymbolicName: application.a.esa
1:c59073f: 	 * Application-ImportService: org.osgi.service.coordinator.Coordinator
1:c59073f: 	 * 
1:c59073f: 	 * Included In Archive
1:c59073f: 	 * 		bundle.a.jar
1:c59073f: 	 */
1:c59073f: 	private static final String APPLICATION_A = "application.a.esa";
1:c59073f: 	/*
1:c59073f: 	 * Subsystem-SymbolicName: application.b.esa
1:c59073f: 	 * 
1:c59073f: 	 * Included In Archive
1:c59073f: 	 * 		bundle.b.jar
1:c59073f: 	 */
1:c59073f: 	private static final String APPLICATION_B = "application.b.esa";
1:c59073f: 	/*
1:c59073f: 	 * Bundle-SymbolicName: bundle.a.jar
1:c59073f: 	 * Require-Capability: osgi.service;filter:="(objectClass=org.osgi.service.coordinator.Coordinator)"
1:c59073f: 	 */
1:c59073f: 	private static final String BUNDLE_A = "bundle.a.jar";
1:c59073f: 	/*
1:c59073f: 	 * Bundle-SymbolicName: bundle.b.jar
1:c59073f: 	 * Require-Capability: osgi.service;filter:="(&(objectClass=java.lang.Object)(a=b))";resolution:=optional
1:c59073f: 	 */
1:c59073f: 	private static final String BUNDLE_B = "bundle.b.jar";
1:c59073f: 	
1:c59073f: 	private void createApplicationA() throws IOException {
1:c59073f: 		createApplicationAManifest();
1:c59073f: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1:c59073f: 	}
1:c59073f: 	
1:c59073f: 	private void createApplicationAManifest() throws IOException {
1:c59073f: 		Map<String, String> attributes = new HashMap<String, String>();
1:c59073f: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:c59073f: 		attributes.put("Application-ImportService", "org.osgi.service.coordinator.Coordinator");
1:c59073f: 		createManifest(APPLICATION_A + ".mf", attributes);
1:c59073f: 	}
1:c59073f: 	
1:c59073f: 	private void createApplicationB() throws IOException {
1:c59073f: 		createApplicationBManifest();
1:c59073f: 		createSubsystem(APPLICATION_B, BUNDLE_B);
1:c59073f: 	}
1:c59073f: 	
1:c59073f: 	private void createApplicationBManifest() throws IOException {
1:c59073f: 		Map<String, String> attributes = new HashMap<String, String>();
1:c59073f: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:c59073f: 		createManifest(APPLICATION_B + ".mf", attributes);
1:c59073f: 	}
1:c59073f: 	
1:c59073f: 	@Override
1:c59073f: 	public void createApplications() throws Exception {
1:c59073f: 		createBundleA();
1:c59073f: 		createBundleB();
1:c59073f: 		createApplicationA();
1:c59073f: 		createApplicationB();
1:c59073f: 	}
1:c59073f: 	
1:c59073f: 	private void createBundleA() throws IOException {
1:c59073f: 		createBundle(name(BUNDLE_A), requireCapability("osgi.service;"
1:c59073f: 				+ "filter:=\"(objectClass=org.osgi.service.coordinator.Coordinator)\""));
1:c59073f: 	}
1:c59073f: 	
1:c59073f: 	private void createBundleB() throws IOException {
1:c59073f: 		createBundle(name(BUNDLE_B), requireCapability("osgi.service;"
1:c59073f: 				+ "filter:=\"(&(objectClass=java.lang.Object)(a=b))\";resolution:=optional"));
1:c59073f: 	}
1:c59073f: 	
1:c59073f: 	@Test
1:c59073f: 	public void testNoEffectOnSharingPolicy() throws Exception {
1:c59073f: 		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:c59073f: 		try {
1:c59073f: 			Map<String, String> headers = applicationA.getDeploymentHeaders();
1:c59073f: 			// There should be no subsystem Require-Capability header because 
1:c59073f: 			// the Application-ImportService header included the only relevant
1:c59073f: 			// bundle clause.
1:c59073f: 			assertNull("Wrong Require-Capability", headers.get(Constants.REQUIRE_CAPABILITY));
1:c59073f: 			// There should be no subsystem Subsystem-ImportService header 
1:c59073f: 			// because the Application-ImportService header included the only 
1:c59073f: 			// relevant bundle clause.
1:c59073f: 			assertNull("Wrong Subsystem-ImportService", headers.get(SubsystemConstants.SUBSYSTEM_IMPORTSERVICE));
1:c59073f: 			org.apache.aries.subsystem.core.archive.Header<?> expected = 
1:a990e32: 					new SubsystemContentHeader("bundle.a.jar;version=\"[0,0]\"");
1:c59073f: 			org.apache.aries.subsystem.core.archive.Header<?> actual = 
1:c59073f: 					new SubsystemContentHeader(headers.get(SubsystemConstants.SUBSYSTEM_CONTENT));
1:c59073f: 			// The Subsystem-Content header should not include any synthesized
1:c59073f: 			// resources used to process Application-ImportService.
1:c59073f: 			assertEquals("Wrong Subsystem-Content", expected, actual);
1:c59073f: 			expected = new GenericHeader("Application-ImportService", "org.osgi.service.coordinator.Coordinator");
1:c59073f: 			actual = new GenericHeader("Application-ImportService", headers.get("Application-ImportService"));
1:c59073f: 			// The Application-ImportService header should be included in the
1:c59073f: 			// deployment manifest.
1:c59073f: 			assertEquals("Wrong Application-ImportService", expected, actual);
1:c59073f: 			BundleContext context = applicationA.getBundleContext();
1:c59073f: 			// The Coordinator service should not be visible to the application
1:c59073f: 			// region because Application-ImportService does not affect the
1:c59073f: 			// sharing policy and nothing outside of the subsystems 
1:c59073f: 			// implementation made it visible.
1:c59073f: 			assertNull("Coordinator service should not be visible", context.getServiceReference(Coordinator.class));
1:c59073f: 		}
1:c59073f: 		finally {
1:c59073f: 			uninstallSubsystemSilently(applicationA);
1:c59073f: 		}
1:c59073f: 	}
1:c59073f: 	
1:c59073f: 	@Test
1:c59073f: 	public void testIncludeUnsatisfiedOptionalServiceDependencyInSharingPolicy() throws Exception {
1:c59073f: 		Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:c59073f: 		try {
1:c59073f: 			BundleContext context = getRootSubsystem().getBundleContext();
1:c59073f: 			Dictionary<String, String> properties = new Hashtable<String, String>();
1:c59073f: 			properties.put("a", "b");
1:c59073f: 			ServiceRegistration<Object> registration = context.registerService(Object.class, new Object(), properties);
1:c59073f: 			try {
1:c59073f: 				context = applicationB.getBundleContext();
1:c59073f: 				Collection<ServiceReference<Object>> references = context.getServiceReferences(Object.class, "(a=b)");
1:c59073f: 				assertFalse("Service not visible", references.isEmpty());
1:c59073f: 			}
1:c59073f: 			finally {
1:c59073f: 				registration.unregister();
1:c59073f: 			}
1:c59073f: 		}
1:c59073f: 		finally {
1:c59073f: 			uninstallSubsystemSilently(applicationB);
1:c59073f: 		}
1:c59073f: 	}
1:c59073f: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: 					new SubsystemContentHeader("bundle.a.jar;version=\"[0,0]\"");
commit:c59073f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.io.IOException;
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.archive.GenericHeader;
1: import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1426
1:  * 
1:  * Implementation specific subsystem header Application-ImportService should not 
1:  * affect the sharing policy.
1:  */
1: public class Aries1426Test extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Application-ImportService: org.osgi.service.coordinator.Coordinator
1: 	 * 
1: 	 * Included In Archive
1: 	 * 		bundle.a.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: application.b.esa
1: 	 * 
1: 	 * Included In Archive
1: 	 * 		bundle.b.jar
1: 	 */
1: 	private static final String APPLICATION_B = "application.b.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Require-Capability: osgi.service;filter:="(objectClass=org.osgi.service.coordinator.Coordinator)"
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Require-Capability: osgi.service;filter:="(&(objectClass=java.lang.Object)(a=b))";resolution:=optional
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	
1: 	private void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
1: 	private void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		attributes.put("Application-ImportService", "org.osgi.service.coordinator.Coordinator");
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
1: 	private void createApplicationB() throws IOException {
1: 		createApplicationBManifest();
1: 		createSubsystem(APPLICATION_B, BUNDLE_B);
1: 	}
1: 	
1: 	private void createApplicationBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1: 		createManifest(APPLICATION_B + ".mf", attributes);
1: 	}
1: 	
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 		createBundleA();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createApplicationB();
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), requireCapability("osgi.service;"
1: 				+ "filter:=\"(objectClass=org.osgi.service.coordinator.Coordinator)\""));
1: 	}
1: 	
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), requireCapability("osgi.service;"
1: 				+ "filter:=\"(&(objectClass=java.lang.Object)(a=b))\";resolution:=optional"));
1: 	}
1: 	
1: 	@Test
1: 	public void testNoEffectOnSharingPolicy() throws Exception {
1: 		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1: 		try {
1: 			Map<String, String> headers = applicationA.getDeploymentHeaders();
1: 			// There should be no subsystem Require-Capability header because 
1: 			// the Application-ImportService header included the only relevant
1: 			// bundle clause.
1: 			assertNull("Wrong Require-Capability", headers.get(Constants.REQUIRE_CAPABILITY));
1: 			// There should be no subsystem Subsystem-ImportService header 
1: 			// because the Application-ImportService header included the only 
1: 			// relevant bundle clause.
1: 			assertNull("Wrong Subsystem-ImportService", headers.get(SubsystemConstants.SUBSYSTEM_IMPORTSERVICE));
1: 			org.apache.aries.subsystem.core.archive.Header<?> expected = 
0: 					new SubsystemContentHeader("bundle.a.jar");
1: 			org.apache.aries.subsystem.core.archive.Header<?> actual = 
1: 					new SubsystemContentHeader(headers.get(SubsystemConstants.SUBSYSTEM_CONTENT));
1: 			// The Subsystem-Content header should not include any synthesized
1: 			// resources used to process Application-ImportService.
1: 			assertEquals("Wrong Subsystem-Content", expected, actual);
1: 			expected = new GenericHeader("Application-ImportService", "org.osgi.service.coordinator.Coordinator");
1: 			actual = new GenericHeader("Application-ImportService", headers.get("Application-ImportService"));
1: 			// The Application-ImportService header should be included in the
1: 			// deployment manifest.
1: 			assertEquals("Wrong Application-ImportService", expected, actual);
1: 			BundleContext context = applicationA.getBundleContext();
1: 			// The Coordinator service should not be visible to the application
1: 			// region because Application-ImportService does not affect the
1: 			// sharing policy and nothing outside of the subsystems 
1: 			// implementation made it visible.
1: 			assertNull("Coordinator service should not be visible", context.getServiceReference(Coordinator.class));
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(applicationA);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testIncludeUnsatisfiedOptionalServiceDependencyInSharingPolicy() throws Exception {
1: 		Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1: 		try {
1: 			BundleContext context = getRootSubsystem().getBundleContext();
1: 			Dictionary<String, String> properties = new Hashtable<String, String>();
1: 			properties.put("a", "b");
1: 			ServiceRegistration<Object> registration = context.registerService(Object.class, new Object(), properties);
1: 			try {
1: 				context = applicationB.getBundleContext();
1: 				Collection<ServiceReference<Object>> references = context.getServiceReferences(Object.class, "(a=b)");
1: 				assertFalse("Service not visible", references.isEmpty());
1: 			}
1: 			finally {
1: 				registration.unregister();
1: 			}
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(applicationB);
1: 		}
1: 	}
1: }
============================================================================