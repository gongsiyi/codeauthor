1:5b39862: /**
1:5b39862:  * Licensed to the Apache Software Foundation (ASF) under one
1:5b39862:  * or more contributor license agreements. See the NOTICE file
1:5b39862:  * distributed with this work for additional information
1:5b39862:  * regarding copyright ownership. The ASF licenses this file
1:5b39862:  * to you under the Apache License, Version 2.0 (the
1:5b39862:  * "License"); you may not use this file except in compliance
1:5b39862:  * with the License. You may obtain a copy of the License at
1:5b39862:  *
1:5b39862:  * http://www.apache.org/licenses/LICENSE-2.0
1:5b39862:  *
1:5b39862:  * Unless required by applicable law or agreed to in writing,
1:5b39862:  * software distributed under the License is distributed on an
1:5b39862:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5b39862:  * KIND, either express or implied. See the License for the
1:5b39862:  * specific language governing permissions and limitations
1:5b39862:  * under the License.
1:5b39862:  */
1:5b39862: 
1:5b39862: package org.apache.aries.web.converter.impl;
1:5b39862: 
1:5b39862: import java.io.BufferedOutputStream;
1:5b39862: import java.io.ByteArrayInputStream;
1:5b39862: import java.io.ByteArrayOutputStream;
1:5b39862: import java.io.File;
1:5b39862: import java.io.FileInputStream;
1:5b39862: import java.io.FileNotFoundException;
1:5b39862: import java.io.FileOutputStream;
1:5b39862: import java.io.IOException;
1:5b39862: import java.io.InputStream;
1:5b39862: import java.io.OutputStream;
1:5b39862: import java.util.ArrayList;
1:5b39862: import java.util.List;
1:5b39862: 
1:5b39862: public class CachedOutputStream extends OutputStream {
1:5b39862: 
1:5b39862:     private static final int DEFAULT_THRESHOLD = 64 * 1024;
1:5b39862:     
1:5b39862:     private OutputStream currentStream;
1:5b39862:     private long threshold;
1:5b39862:     private int totalLength;
1:5b39862:     private boolean inmem;
1:5b39862:     private List<InputStream> streams;
1:5b39862:     private File tempFile;
1:5b39862:     private File outputDir;
1:5b39862: 
1:5b39862:     public CachedOutputStream() {
1:5b39862:         this(DEFAULT_THRESHOLD, null);
1:5b39862:     }
1:5b39862: 
1:5b39862:     public CachedOutputStream(long threshold, File outputDir) {
1:5b39862:         this.threshold = threshold; 
1:5b39862:         this.outputDir = outputDir;
1:5b39862:         this.currentStream = new ByteArrayOutputStream(2048);
1:5b39862:         this.inmem = true;
1:5b39862:         this.streams = new ArrayList<InputStream>(1);
1:5b39862:     }
1:5b39862: 
1:5b39862:     public void flush() throws IOException {
1:5b39862:         currentStream.flush();
1:5b39862:     }
1:5b39862:     
1:5b39862:     public void close() throws IOException {
1:5b39862:         currentStream.flush();       
1:5b39862:         currentStream.close();
1:5b39862:     }
1:5b39862: 
1:5b39862:     public void write(byte[] b) throws IOException {
1:5b39862:         write(b, 0, b.length);
1:5b39862:     }
1:5b39862:     
1:5b39862:     public void write(byte[] b, int off, int len) throws IOException {
1:5b39862:         totalLength += len;
1:5b39862:         if (inmem && totalLength > threshold) {
1:5b39862:             createFileOutputStream();
1:5b39862:         }
1:5b39862:         currentStream.write(b, off, len);
1:5b39862:     }
1:5b39862: 
1:5b39862:     public void write(int b) throws IOException {
1:5b39862:         totalLength++;
1:5b39862:         if (inmem && totalLength > threshold) {
1:5b39862:             createFileOutputStream();
1:5b39862:         }
1:5b39862:         currentStream.write(b);
1:5b39862:     }
1:5b39862: 
1:5b39862:     private void createFileOutputStream() throws IOException {
1:5b39862:         ByteArrayOutputStream bout = (ByteArrayOutputStream) currentStream;
1:5b39862:         if (outputDir == null) {
1:5b39862:             tempFile = File.createTempFile("cos", "tmp");
1:5b39862:         } else {
1:5b39862:             tempFile = File.createTempFile("cos", "tmp", outputDir);
1:5b39862:         }
1:5b39862:         
1:5b39862:         currentStream = new BufferedOutputStream(new FileOutputStream(tempFile));
1:5b39862:         bout.writeTo(currentStream);
1:5b39862:         inmem = false;
1:5b39862:     }
1:5b39862: 
1:5b39862:     public void destroy() {
1:5b39862:         streams.clear();
1:5b39862:         if (tempFile != null) {
1:5b39862:             tempFile.delete();
1:5b39862:         }
1:5b39862:     }
1:5b39862:     
1:5b39862:     public int size() {
1:5b39862:         return totalLength;
1:5b39862:     }
1:5b39862:     
1:5b39862:     public InputStream getInputStream() throws IOException {
1:5b39862:         close();
1:5b39862:         if (inmem) {
1:5b39862:             return new ByteArrayInputStream(((ByteArrayOutputStream) currentStream).toByteArray());
1:5b39862:         } else {
1:5b39862:             try {
1:5b39862:                 FileInputStream fileInputStream = new FileInputStream(tempFile) {
1:5b39862:                     public void close() throws IOException {
1:5b39862:                         super.close();
1:5b39862:                         maybeDeleteTempFile(this);
1:5b39862:                     }
1:5b39862:                 };
1:5b39862:                 streams.add(fileInputStream);
1:5b39862:                 return fileInputStream;
1:5b39862:             } catch (FileNotFoundException e) {
1:5b39862:                 throw new IOException("Cached file was deleted, " + e.toString());
1:5b39862:             }
1:5b39862:         }
1:5b39862:     }
1:5b39862:     
1:5b39862:     private void maybeDeleteTempFile(Object stream) {
1:5b39862:         streams.remove(stream);
1:5b39862:         if (tempFile != null && streams.isEmpty()) {
1:5b39862:             tempFile.delete();
1:5b39862:             tempFile = null;
1:5b39862:         }
1:5b39862:     }
1:5b39862: 
1:5b39862: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:5b39862
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements. See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership. The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License. You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied. See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.web.converter.impl;
1: 
1: import java.io.BufferedOutputStream;
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileNotFoundException;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: public class CachedOutputStream extends OutputStream {
1: 
1:     private static final int DEFAULT_THRESHOLD = 64 * 1024;
1:     
1:     private OutputStream currentStream;
1:     private long threshold;
1:     private int totalLength;
1:     private boolean inmem;
1:     private List<InputStream> streams;
1:     private File tempFile;
1:     private File outputDir;
1: 
1:     public CachedOutputStream() {
1:         this(DEFAULT_THRESHOLD, null);
1:     }
1: 
1:     public CachedOutputStream(long threshold, File outputDir) {
1:         this.threshold = threshold; 
1:         this.outputDir = outputDir;
1:         this.currentStream = new ByteArrayOutputStream(2048);
1:         this.inmem = true;
1:         this.streams = new ArrayList<InputStream>(1);
1:     }
1: 
1:     public void flush() throws IOException {
1:         currentStream.flush();
1:     }
1:     
1:     public void close() throws IOException {
1:         currentStream.flush();       
1:         currentStream.close();
1:     }
1: 
1:     public void write(byte[] b) throws IOException {
1:         write(b, 0, b.length);
1:     }
1:     
1:     public void write(byte[] b, int off, int len) throws IOException {
1:         totalLength += len;
1:         if (inmem && totalLength > threshold) {
1:             createFileOutputStream();
1:         }
1:         currentStream.write(b, off, len);
1:     }
1: 
1:     public void write(int b) throws IOException {
1:         totalLength++;
1:         if (inmem && totalLength > threshold) {
1:             createFileOutputStream();
1:         }
1:         currentStream.write(b);
1:     }
1: 
1:     private void createFileOutputStream() throws IOException {
1:         ByteArrayOutputStream bout = (ByteArrayOutputStream) currentStream;
1:         if (outputDir == null) {
1:             tempFile = File.createTempFile("cos", "tmp");
1:         } else {
1:             tempFile = File.createTempFile("cos", "tmp", outputDir);
1:         }
1:         
1:         currentStream = new BufferedOutputStream(new FileOutputStream(tempFile));
1:         bout.writeTo(currentStream);
1:         inmem = false;
1:     }
1: 
1:     public void destroy() {
1:         streams.clear();
1:         if (tempFile != null) {
1:             tempFile.delete();
1:         }
1:     }
1:     
1:     public int size() {
1:         return totalLength;
1:     }
1:     
1:     public InputStream getInputStream() throws IOException {
1:         close();
1:         if (inmem) {
1:             return new ByteArrayInputStream(((ByteArrayOutputStream) currentStream).toByteArray());
1:         } else {
1:             try {
1:                 FileInputStream fileInputStream = new FileInputStream(tempFile) {
1:                     public void close() throws IOException {
1:                         super.close();
1:                         maybeDeleteTempFile(this);
1:                     }
1:                 };
1:                 streams.add(fileInputStream);
1:                 return fileInputStream;
1:             } catch (FileNotFoundException e) {
1:                 throw new IOException("Cached file was deleted, " + e.toString());
1:             }
1:         }
1:     }
1:     
1:     private void maybeDeleteTempFile(Object stream) {
1:         streams.remove(stream);
1:         if (tempFile != null && streams.isEmpty()) {
1:             tempFile.delete();
1:             tempFile = null;
1:         }
1:     }
1: 
1: }
============================================================================