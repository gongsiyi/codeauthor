1:9bba779: /*
1:9bba779:  * Licensed under the Apache License, Version 2.0 (the "License");
1:9bba779:  * you may not use this file except in compliance with the License.
1:9bba779:  * You may obtain a copy of the License at
1:9bba779:  *
1:9bba779:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9bba779:  *
1:9bba779:  * Unless required by applicable law or agreed to in writing, software
1:9bba779:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9bba779:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9bba779:  * See the License for the specific language governing permissions and
1:9bba779:  * limitations under the License.
1:9bba779:  */
1:9bba779: package org.apache.aries.subsystem.core.internal;
1:9bba779: 
1:9bba779: import java.util.ArrayList;
1:9bba779: import java.util.List;
1:9bba779: 
1:9bba779: import org.apache.aries.application.modelling.ExportedService;
1:9bba779: import org.apache.aries.application.modelling.ImportedService;
1:9bba779: import org.apache.aries.application.modelling.ModelledResourceManager;
1:9bba779: import org.apache.aries.application.modelling.ModellerException;
1:9bba779: import org.apache.aries.application.modelling.ParsedServiceElements;
1:9bba779: import org.apache.aries.util.filesystem.IDirectory;
1:9bba779: import org.osgi.namespace.service.ServiceNamespace;
1:9bba779: import org.osgi.resource.Capability;
1:9bba779: import org.osgi.resource.Namespace;
1:9bba779: import org.osgi.resource.Requirement;
1:9bba779: import org.osgi.resource.Resource;
1:9bba779: import org.osgi.service.subsystem.SubsystemException;
1:9bba779: 
1:9bba779: public class ApplicationServiceModeller implements ServiceModeller {
1:9bba779: 
1:9bba779:     private final ModelledResourceManager manager;
1:9bba779: 
1:9bba779:     public ApplicationServiceModeller(Object manager) {
1:9bba779:         this.manager = (ModelledResourceManager) manager;
1:9bba779:     }
1:9bba779: 
1:9bba779:     @Override
1:9bba779:     public ServiceModel computeRequirementsAndCapabilities(Resource resource, IDirectory directory) throws SubsystemException {
1:9bba779:         try {
1:9bba779:             ServiceModelImpl model = new ServiceModelImpl();
1:9bba779:             ParsedServiceElements elements = manager.getServiceElements(directory);
1:9bba779:             for (ExportedService service : elements.getServices()) {
1:9bba779:                 model.capabilities.add(new BasicCapability.Builder()
2:9bba779:                         .namespace(ServiceNamespace.SERVICE_NAMESPACE)
1:9bba779:                         .attribute(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, new ArrayList<String>(service.getInterfaces()))
1:9bba779:                         .attributes(service.getServiceProperties())
2:9bba779:                         .resource(resource)
2:9bba779:                         .build());
1:9bba779:             }
1:9bba779:             for (ImportedService service : elements.getReferences()) {
1:cce92c3:                 StringBuilder builder = new StringBuilder();
1:cce92c3:                 String serviceInterface = service.getInterface();
1:cce92c3:                 String filter = service.getFilter();
1:cce92c3: 
1:cce92c3:                 if (serviceInterface != null && filter != null) {
1:cce92c3:                 	builder.append("(&");
1:cce92c3:                 }
1:cce92c3:                 if (serviceInterface != null) {
1:cce92c3:                 	builder.append('(')
1:9bba779:                         .append(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE)
1:9bba779:                         .append('=')
1:cce92c3:                         .append(serviceInterface)
1:9bba779:                         .append(')');
1:cce92c3:                 }
1:cce92c3: 
1:9bba779:                 if (filter != null)
1:9bba779:                     builder.append(filter);
1:cce92c3:                 if (serviceInterface != null && filter != null) {
1:cce92c3:                 	builder.append(')');
1:cce92c3:                 }
1:cce92c3:                 if (builder.length() > 0) {
1:cce92c3: 	                model.requirements.add(new BasicRequirement.Builder()
1:cce92c3: 	                        .namespace(ServiceNamespace.SERVICE_NAMESPACE)
1:cce92c3: 	                        .directive(Namespace.REQUIREMENT_FILTER_DIRECTIVE, builder.toString())
1:cce92c3: 	                        .directive(
1:cce92c3: 	                                Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE,
1:cce92c3: 	                                service.isOptional() ? Namespace.RESOLUTION_OPTIONAL : Namespace.RESOLUTION_MANDATORY)
1:cce92c3: 	                        .directive(
1:cce92c3: 	                                Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE,
1:cce92c3: 	                                service.isMultiple() ? Namespace.CARDINALITY_MULTIPLE : Namespace.CARDINALITY_SINGLE)
1:cce92c3: 	                        .resource(resource)
1:cce92c3: 	                        .build());
1:cce92c3:                 }
1:9bba779:             }
1:9bba779:             return model;
1:9bba779:         } catch (ModellerException e) {
1:9bba779:             throw new SubsystemException(e);
1:9bba779:         }
1:9bba779:     }
1:9bba779: 
1:9bba779:     static class ServiceModelImpl implements ServiceModel {
1:9bba779:         final List<Requirement> requirements = new ArrayList<Requirement>();
1:9bba779:         final List<Capability> capabilities = new ArrayList<Capability>();
1:9bba779:         @Override
1:9bba779:         public List<Requirement> getServiceRequirements() {
1:9bba779:             return requirements;
1:9bba779:         }
1:9bba779: 
1:9bba779:         @Override
1:9bba779:         public List<Capability> getServiceCapabilities() {
1:9bba779:             return capabilities;
1:9bba779:         }
1:9bba779:     }
1:9bba779: 
1:9bba779: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:cce92c3
/////////////////////////////////////////////////////////////////////////
1:                 StringBuilder builder = new StringBuilder();
1:                 String serviceInterface = service.getInterface();
1:                 String filter = service.getFilter();
1: 
1:                 if (serviceInterface != null && filter != null) {
1:                 	builder.append("(&");
1:                 }
1:                 if (serviceInterface != null) {
1:                 	builder.append('(')
1:                         .append(serviceInterface)
1:                 }
1: 
1:                 if (serviceInterface != null && filter != null) {
1:                 	builder.append(')');
1:                 }
1:                 if (builder.length() > 0) {
1: 	                model.requirements.add(new BasicRequirement.Builder()
1: 	                        .namespace(ServiceNamespace.SERVICE_NAMESPACE)
1: 	                        .directive(Namespace.REQUIREMENT_FILTER_DIRECTIVE, builder.toString())
1: 	                        .directive(
1: 	                                Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE,
1: 	                                service.isOptional() ? Namespace.RESOLUTION_OPTIONAL : Namespace.RESOLUTION_MANDATORY)
1: 	                        .directive(
1: 	                                Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE,
1: 	                                service.isMultiple() ? Namespace.CARDINALITY_MULTIPLE : Namespace.CARDINALITY_SINGLE)
1: 	                        .resource(resource)
1: 	                        .build());
1:                 }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:9bba779
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.ImportedService;
1: import org.apache.aries.application.modelling.ModelledResourceManager;
1: import org.apache.aries.application.modelling.ModellerException;
1: import org.apache.aries.application.modelling.ParsedServiceElements;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Namespace;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class ApplicationServiceModeller implements ServiceModeller {
1: 
1:     private final ModelledResourceManager manager;
1: 
1:     public ApplicationServiceModeller(Object manager) {
1:         this.manager = (ModelledResourceManager) manager;
1:     }
1: 
1:     @Override
1:     public ServiceModel computeRequirementsAndCapabilities(Resource resource, IDirectory directory) throws SubsystemException {
1:         try {
1:             ServiceModelImpl model = new ServiceModelImpl();
1:             ParsedServiceElements elements = manager.getServiceElements(directory);
1:             for (ExportedService service : elements.getServices()) {
1:                 model.capabilities.add(new BasicCapability.Builder()
1:                         .namespace(ServiceNamespace.SERVICE_NAMESPACE)
1:                         .attribute(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE, new ArrayList<String>(service.getInterfaces()))
1:                         .attributes(service.getServiceProperties())
1:                         .resource(resource)
1:                         .build());
1:             }
1:             for (ImportedService service : elements.getReferences()) {
0:                 StringBuilder builder = new StringBuilder("(&(")
1:                         .append(ServiceNamespace.CAPABILITY_OBJECTCLASS_ATTRIBUTE)
1:                         .append('=')
0:                         .append(service.getInterface())
1:                         .append(')');
0:                 String filter = service.getFilter();
1:                 if (filter != null)
1:                     builder.append(filter);
0:                 builder.append(')');
0:                 model.requirements.add(new BasicRequirement.Builder()
1:                         .namespace(ServiceNamespace.SERVICE_NAMESPACE)
0:                         .directive(Namespace.REQUIREMENT_FILTER_DIRECTIVE, builder.toString())
0:                         .directive(
0:                                 Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE,
0:                                 service.isOptional() ? Namespace.RESOLUTION_OPTIONAL : Namespace.RESOLUTION_MANDATORY)
0:                         .directive(
0:                                 Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE,
0:                                 service.isMultiple() ? Namespace.CARDINALITY_MULTIPLE : Namespace.CARDINALITY_SINGLE)
1:                         .resource(resource)
1:                         .build());
1:             }
1:             return model;
1:         } catch (ModellerException e) {
1:             throw new SubsystemException(e);
1:         }
1:     }
1: 
1:     static class ServiceModelImpl implements ServiceModel {
1:         final List<Requirement> requirements = new ArrayList<Requirement>();
1:         final List<Capability> capabilities = new ArrayList<Capability>();
1:         @Override
1:         public List<Requirement> getServiceRequirements() {
1:             return requirements;
1:         }
1: 
1:         @Override
1:         public List<Capability> getServiceCapabilities() {
1:             return capabilities;
1:         }
1:     }
1: 
1: }
============================================================================