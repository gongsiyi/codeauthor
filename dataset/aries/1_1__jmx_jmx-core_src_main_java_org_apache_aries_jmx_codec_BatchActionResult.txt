1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
1:fdf3952: 
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.framework.FrameworkMBean;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>BatchInstallResult</tt> represents codec for resulting CompositeData of batch operations
1:fdf3952:  * made on bundle via FrameworkMBean.
1:fdf3952:  * It's converting batch install results to CompositeData {@link #toCompositeData()}
1:fdf3952:  * and from CompositeData to this BatchActionResult {@link #from(CompositeData)}.
1:fdf3952:  * It provides also constructors to build BatchActionResult.  
1:fdf3952:  * Structure of compositeData is as defined in compositeType @see {@link FrameworkMBean#BATCH_ACTION_RESULT_TYPE}.
1:fdf3952:  * </p>
1:fdf3952:  * @see BatchResult
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class BatchActionResult extends BatchResult{
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see FrameworkMBean#REMAINING_ID_ITEM
1:fdf3952:      * @see FrameworkMBean#REMAINING_LOCATION_ITEM
1:fdf3952:      */
1:fdf3952: 	private long[] remainingItems;
1:fdf3952: 	/**
1:fdf3952: 	 * @see FrameworkMBean#BUNDLE_IN_ERROR_ID_ITEM
1:fdf3952: 	 * @see FrameworkMBean#BUNDLE_IN_ERROR
1:fdf3952: 	 */
1:fdf3952: 	private long bundleInError;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Constructs new BatchActionResult with completedItems array.
1:fdf3952:      * Newly created object represents successful batch result.
1:fdf3952:      * @param completedItems containing the list of bundles completing the batch operation.
1:fdf3952: 	 */
1:fdf3952: 	public BatchActionResult(long[] completedItems){
1:fdf3952: 		this.completed = completedItems;
1:fdf3952: 		success = true;
1:fdf3952: 	}
1:fdf3952: 	
1:fdf3952: 	 /**
1:fdf3952:      * Constructs new BatchActionResult with error message.
1:fdf3952:      * Newly created object represents failed batch result.
1:fdf3952:      * @param error containing the error message of the batch operation.
1:fdf3952:      */
1:fdf3952:     public BatchActionResult(String error){
1:fdf3952:         this.error = error;
1:fdf3952:         success = false;
1:fdf3952:     }
1:fdf3952: 	
1:fdf3952: 	/**
1:fdf3952: 	 * Constructs new BatchActionResult.
1:fdf3952:      * Newly created object represents failed batch result.
1:fdf3952:      * 
1:fdf3952:      * @param completedItems containing the list of bundles completing the batch operation.
1:fdf3952:      * @param error containing the error message of the batch operation.
1:fdf3952:      * @param remainingItems remaining bundles unprocessed by the
1:fdf3952:      * failing batch operation.
1:fdf3952:      * @param bundleInError containing the bundle which caused the error during the batch
1:fdf3952:      * operation.
1:fdf3952: 	 */
1:fdf3952: 	public BatchActionResult(long[] completedItems, String error, long[] remainingItems, long bundleInError){
1:fdf3952: 		this(completedItems,error,remainingItems,false,bundleInError);
1:fdf3952: 	}
1:fdf3952: 	
1:fdf3952: 	/**
1:fdf3952: 	 * Constructs new BatchActionResult.
1:fdf3952:      * 
1:fdf3952:      * @param completedItems containing the list of bundles completing the batch operation.
1:fdf3952:      * @param error containing the error message of the batch operation.
1:fdf3952:      * @param remainingItems remaining bundles unprocessed by the
1:fdf3952:      * failing batch operation.
1:fdf3952:      * @param success indicates if this operation was successful.
1:fdf3952:      * @param bundleInError containing the bundle which caused the error during the batch
1:fdf3952:      * operation.
1:fdf3952: 	 */
1:fdf3952: 	public BatchActionResult(long[] completedItems, String error, long[] remainingItems, boolean success, long bundleInError){
1:fdf3952: 		this.bundleInError = bundleInError;
1:fdf3952: 		this.completed = completedItems;
1:fdf3952: 		this.error = error;
1:fdf3952: 		this.remainingItems = remainingItems;
1:fdf3952: 		this.success = success;
1:fdf3952: 	}
1:fdf3952: 	
1:fdf3952: 	/**
1:fdf3952: 	 * Translates BatchActionResult to CompositeData represented by
1:fdf3952:      * compositeType {@link FrameworkMBean#BATCH_ACTION_RESULT_TYPE}.
1:fdf3952:      * 
1:fdf3952: 	 * @return translated BatchActionResult  to compositeData.
1:fdf3952: 	 */
1:fdf3952: 	public CompositeData toCompositeData(){
1:fdf3952: 		try {
1:fdf3952: 			Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952: 			items.put(FrameworkMBean.BUNDLE_IN_ERROR, bundleInError);
1:fdf3952: 			items.put(FrameworkMBean.COMPLETED, toLongArray(completed));
1:fdf3952: 			items.put(FrameworkMBean.ERROR, error);
1:fdf3952: 			items.put(FrameworkMBean.REMAINING, toLongArray(remainingItems));
1:fdf3952: 			items.put(FrameworkMBean.SUCCESS, success);
1:fdf3952: 			return new CompositeDataSupport(FrameworkMBean.BATCH_ACTION_RESULT_TYPE, items);
1:fdf3952: 		} catch (OpenDataException e) {
1:fdf3952: 			throw new IllegalStateException("Can't create CompositeData" + e);
1:fdf3952: 		}
1:fdf3952: 	}
1:fdf3952: 	
1:fdf3952: 	/**
1:fdf3952: 	 * Static factory method to create BatchActionResult from CompositeData object.
1:fdf3952: 	 * 
1:fdf3952: 	 * @param data {@link CompositeData} instance.
1:fdf3952: 	 * @return BatchActionResult instance.
1:fdf3952: 	 */
1:fdf3952: 	public static BatchActionResult from(CompositeData data){
1:fdf3952: 	    if(data == null){
1:fdf3952: 	        return null;
1:fdf3952: 	    }
1:fdf3952: 		long bundleInError = (Long) data.get(FrameworkMBean.BUNDLE_IN_ERROR);
1:fdf3952: 		// need to convert primitive array to wrapper type array
1:fdf3952: 		// compositeData accept only wrapper type array
1:fdf3952: 		long[] completedItems = toLongPrimitiveArray((Long[])data.get(FrameworkMBean.COMPLETED));
1:fdf3952: 		long[] remainingItems = toLongPrimitiveArray((Long[]) data.get(FrameworkMBean.REMAINING));
1:fdf3952: 		String error = (String) data.get(FrameworkMBean.ERROR);
1:fdf3952: 		Boolean success = (Boolean) data.get(FrameworkMBean.SUCCESS);
1:fdf3952: 		return new BatchActionResult(completedItems, error, remainingItems, success, bundleInError);
1:fdf3952: 	}
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Gets remaining items id's.
1:fdf3952: 	 * @return the remainingItems.
1:fdf3952: 	 */
1:fdf3952: 	public long[] getRemainingItems() {
1:fdf3952: 		return remainingItems;
1:fdf3952: 	}
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Gets bundle in error id.
1:fdf3952: 	 * @return the bundleInError.
1:fdf3952: 	 */
1:fdf3952: 	public long getBundleInError() {
1:fdf3952: 		return bundleInError;
1:fdf3952: 	}
1:fdf3952: 	
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.jmx.framework.FrameworkMBean;
1: 
1: /**
1:  * <p>
1:  * <tt>BatchInstallResult</tt> represents codec for resulting CompositeData of batch operations
1:  * made on bundle via FrameworkMBean.
1:  * It's converting batch install results to CompositeData {@link #toCompositeData()}
1:  * and from CompositeData to this BatchActionResult {@link #from(CompositeData)}.
1:  * It provides also constructors to build BatchActionResult.  
1:  * Structure of compositeData is as defined in compositeType @see {@link FrameworkMBean#BATCH_ACTION_RESULT_TYPE}.
1:  * </p>
1:  * @see BatchResult
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class BatchActionResult extends BatchResult{
1: 
1:     /**
1:      * @see FrameworkMBean#REMAINING_ID_ITEM
1:      * @see FrameworkMBean#REMAINING_LOCATION_ITEM
1:      */
1: 	private long[] remainingItems;
1: 	/**
1: 	 * @see FrameworkMBean#BUNDLE_IN_ERROR_ID_ITEM
1: 	 * @see FrameworkMBean#BUNDLE_IN_ERROR
1: 	 */
1: 	private long bundleInError;
1: 
1: 	/**
1: 	 * Constructs new BatchActionResult with completedItems array.
1:      * Newly created object represents successful batch result.
1:      * @param completedItems containing the list of bundles completing the batch operation.
1: 	 */
1: 	public BatchActionResult(long[] completedItems){
1: 		this.completed = completedItems;
1: 		success = true;
1: 	}
1: 	
1: 	 /**
1:      * Constructs new BatchActionResult with error message.
1:      * Newly created object represents failed batch result.
1:      * @param error containing the error message of the batch operation.
1:      */
1:     public BatchActionResult(String error){
1:         this.error = error;
1:         success = false;
1:     }
1: 	
1: 	/**
1: 	 * Constructs new BatchActionResult.
1:      * Newly created object represents failed batch result.
1:      * 
1:      * @param completedItems containing the list of bundles completing the batch operation.
1:      * @param error containing the error message of the batch operation.
1:      * @param remainingItems remaining bundles unprocessed by the
1:      * failing batch operation.
1:      * @param bundleInError containing the bundle which caused the error during the batch
1:      * operation.
1: 	 */
1: 	public BatchActionResult(long[] completedItems, String error, long[] remainingItems, long bundleInError){
1: 		this(completedItems,error,remainingItems,false,bundleInError);
1: 	}
1: 	
1: 	/**
1: 	 * Constructs new BatchActionResult.
1:      * 
1:      * @param completedItems containing the list of bundles completing the batch operation.
1:      * @param error containing the error message of the batch operation.
1:      * @param remainingItems remaining bundles unprocessed by the
1:      * failing batch operation.
1:      * @param success indicates if this operation was successful.
1:      * @param bundleInError containing the bundle which caused the error during the batch
1:      * operation.
1: 	 */
1: 	public BatchActionResult(long[] completedItems, String error, long[] remainingItems, boolean success, long bundleInError){
1: 		this.bundleInError = bundleInError;
1: 		this.completed = completedItems;
1: 		this.error = error;
1: 		this.remainingItems = remainingItems;
1: 		this.success = success;
1: 	}
1: 	
1: 	/**
1: 	 * Translates BatchActionResult to CompositeData represented by
1:      * compositeType {@link FrameworkMBean#BATCH_ACTION_RESULT_TYPE}.
1:      * 
1: 	 * @return translated BatchActionResult  to compositeData.
1: 	 */
1: 	public CompositeData toCompositeData(){
1: 		try {
1: 			Map<String, Object> items = new HashMap<String, Object>();
1: 			items.put(FrameworkMBean.BUNDLE_IN_ERROR, bundleInError);
1: 			items.put(FrameworkMBean.COMPLETED, toLongArray(completed));
1: 			items.put(FrameworkMBean.ERROR, error);
1: 			items.put(FrameworkMBean.REMAINING, toLongArray(remainingItems));
1: 			items.put(FrameworkMBean.SUCCESS, success);
1: 			return new CompositeDataSupport(FrameworkMBean.BATCH_ACTION_RESULT_TYPE, items);
1: 		} catch (OpenDataException e) {
1: 			throw new IllegalStateException("Can't create CompositeData" + e);
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Static factory method to create BatchActionResult from CompositeData object.
1: 	 * 
1: 	 * @param data {@link CompositeData} instance.
1: 	 * @return BatchActionResult instance.
1: 	 */
1: 	public static BatchActionResult from(CompositeData data){
1: 	    if(data == null){
1: 	        return null;
1: 	    }
1: 		long bundleInError = (Long) data.get(FrameworkMBean.BUNDLE_IN_ERROR);
1: 		// need to convert primitive array to wrapper type array
1: 		// compositeData accept only wrapper type array
1: 		long[] completedItems = toLongPrimitiveArray((Long[])data.get(FrameworkMBean.COMPLETED));
1: 		long[] remainingItems = toLongPrimitiveArray((Long[]) data.get(FrameworkMBean.REMAINING));
1: 		String error = (String) data.get(FrameworkMBean.ERROR);
1: 		Boolean success = (Boolean) data.get(FrameworkMBean.SUCCESS);
1: 		return new BatchActionResult(completedItems, error, remainingItems, success, bundleInError);
1: 	}
1: 
1: 	/**
1: 	 * Gets remaining items id's.
1: 	 * @return the remainingItems.
1: 	 */
1: 	public long[] getRemainingItems() {
1: 		return remainingItems;
1: 	}
1: 
1: 	/**
1: 	 * Gets bundle in error id.
1: 	 * @return the bundleInError.
1: 	 */
1: 	public long getBundleInError() {
1: 		return bundleInError;
1: 	}
1: 	
1: }
============================================================================