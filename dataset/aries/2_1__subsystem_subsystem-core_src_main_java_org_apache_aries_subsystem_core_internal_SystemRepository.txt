1:a14f2fd: /*
1:9df8274:  * Licensed to the Apache Software Foundation (ASF) under one
1:9df8274:  * or more contributor license agreements.  See the NOTICE file
1:9df8274:  * distributed with this work for additional information
1:9df8274:  * regarding copyright ownership.  The ASF licenses this file
1:9df8274:  * to you under the Apache License, Version 2.0 (the
1:9df8274:  * "License"); you may not use this file except in compliance
1:9df8274:  * with the License.  You may obtain a copy of the License at
1:a14f2fd:  *
1:9df8274:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:9df8274:  * Unless required by applicable law or agreed to in writing,
1:9df8274:  * software distributed under the License is distributed on an
1:9df8274:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9df8274:  * KIND, either express or implied.  See the License for the
1:9df8274:  * specific language governing permissions and limitations
1:9df8274:  * under the License.
1:a14f2fd:  */
1:02302eb: package org.apache.aries.subsystem.core.internal;
5:02302eb: 
1:02302eb: import java.util.Collection;
1:02302eb: import java.util.Map;
1:9df8274: import java.util.concurrent.atomic.AtomicReference;
1:02302eb: 
1:9df8274: import org.apache.aries.subsystem.AriesSubsystem;
1:9df8274: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1:9df8274: import org.apache.aries.subsystem.core.repository.Repository;
1:9df8274: import org.osgi.framework.Bundle;
1:9df8274: import org.osgi.framework.BundleContext;
1:9df8274: import org.osgi.framework.BundleEvent;
1:9df8274: import org.osgi.framework.ServiceReference;
1:9df8274: import org.osgi.framework.wiring.BundleRevision;
1:02302eb: import org.osgi.resource.Capability;
1:02302eb: import org.osgi.resource.Requirement;
1:9df8274: import org.osgi.util.tracker.BundleTrackerCustomizer;
1:9df8274: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:02302eb: 
1:9df8274: public class SystemRepository 
1:9df8274:         implements 
1:9df8274:                 Repository,
1:9df8274:                 BundleTrackerCustomizer<AtomicReference<BundleRevisionResource>>,
1:9df8274:                 ServiceTrackerCustomizer<AriesSubsystem, BasicSubsystem> {
1:9df8274:     
1:9df8274:     private final BundleContext bundleContext;
1:9df8274:     private final CapabilitySetRepository repository;
1:02302eb: 
1:9df8274:     public SystemRepository(BundleContext bundleContext) {
1:9df8274:         this.bundleContext = bundleContext;
1:9df8274:         repository = new CapabilitySetRepository();
1:9df8274:     }
1:9df8274: 
1:9df8274:     @Override
1:9df8274:     public AtomicReference<BundleRevisionResource> addingBundle(Bundle bundle, BundleEvent event) {
1:9df8274:         // The state mask must guarantee this will only be called when the bundle is in the INSTALLED state.
1:9df8274:         BundleRevision revision = bundle.adapt(BundleRevision.class);
1:9df8274:         BundleRevisionResource resource = new BundleRevisionResource(revision);
1:6ea98a2:         if (ThreadLocalSubsystem.get() == null) {
1:6ea98a2:         	// This is an explicitly installed bundle. It must be prevented
1:6ea98a2:         	// from resolving as part of adding it to the repository. Searching
1:6ea98a2:         	// for service requirements and capabilities will result in a call
1:6ea98a2:         	// to findEntries which will cause the framework to attempt a
1:6ea98a2:         	// resolution.
1:6ea98a2:         	ThreadLocalBundleRevision.set(revision);
1:6ea98a2:         	try {
1:6ea98a2:         		repository.addResource(resource);
1:6ea98a2:         	}
1:6ea98a2:         	finally {
1:6ea98a2:         		ThreadLocalBundleRevision.remove();
1:6ea98a2:         	}
1:6ea98a2:         }
1:6ea98a2:         else {
1:6ea98a2:         	// If this is a bundle being installed as part of a subsystem
1:6ea98a2:         	// installation, it is already protected.
1:6ea98a2:         	repository.addResource(resource);
1:6ea98a2:         }
1:9df8274:         return new AtomicReference<BundleRevisionResource>(resource);
1:9df8274:     }
1:9df8274: 
1:9df8274:     @Override
1:9df8274:     public BasicSubsystem addingService(ServiceReference<AriesSubsystem> reference) {
1:9df8274:         // Intentionally letting the ClassCastException propagate. Everything received should be a BasicSubsystem.
1:9df8274:         BasicSubsystem subsystem = (BasicSubsystem)bundleContext.getService(reference);
1:9df8274:         repository.addResource(subsystem);
1:9df8274:         return subsystem;
1:9df8274:     }
1:9df8274: 
1:9df8274:     @Override
1:9df8274:     public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:9df8274:         return repository.findProviders(requirements);
1:9df8274:     }
1:9df8274: 
1:9df8274:     @Override
1:9df8274:     public void modifiedBundle(Bundle bundle, BundleEvent event, AtomicReference<BundleRevisionResource> object) {
1:9df8274:         if (BundleEvent.UPDATED == event.getType()) {
1:9df8274:             BundleRevision revision = bundle.adapt(BundleRevision.class);
1:9df8274:             BundleRevisionResource resource = new BundleRevisionResource(revision);
1:9df8274:             repository.removeResource(object.getAndSet(resource));
2:9df8274:             repository.addResource(resource);
1:9df8274:         }
1:9df8274:     }
1:9df8274: 
1:9df8274:     @Override
1:9df8274:     public void modifiedService(ServiceReference<AriesSubsystem> reference, BasicSubsystem service) {
1:9df8274:         // Nothing.
1:9df8274:     }
1:9df8274: 
1:9df8274:     @Override
1:9df8274:     public void removedBundle(Bundle bundle, BundleEvent event, AtomicReference<BundleRevisionResource> object) {
1:9df8274:         // The state mask must guarantee this will only be called when the bundle is in the UNINSTALLED state.
1:9df8274:         repository.removeResource(object.get());
1:9df8274:     }
1:9df8274: 
1:9df8274:     @Override
1:9df8274:     public void removedService(ServiceReference<AriesSubsystem> reference, BasicSubsystem service) {
1:9df8274:         repository.removeResource(service);
1:9df8274:     }
7:07912ab: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:6ea98a2
/////////////////////////////////////////////////////////////////////////
1:         if (ThreadLocalSubsystem.get() == null) {
1:         	// This is an explicitly installed bundle. It must be prevented
1:         	// from resolving as part of adding it to the repository. Searching
1:         	// for service requirements and capabilities will result in a call
1:         	// to findEntries which will cause the framework to attempt a
1:         	// resolution.
1:         	ThreadLocalBundleRevision.set(revision);
1:         	try {
1:         		repository.addResource(resource);
1:         	}
1:         	finally {
1:         		ThreadLocalBundleRevision.remove();
1:         	}
1:         }
1:         else {
1:         	// If this is a bundle being installed as part of a subsystem
1:         	// installation, it is already protected.
1:         	repository.addResource(resource);
1:         }
commit:9df8274
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1: import java.util.concurrent.atomic.AtomicReference;
1: import org.apache.aries.subsystem.AriesSubsystem;
1: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1: import org.apache.aries.subsystem.core.repository.Repository;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.util.tracker.BundleTrackerCustomizer;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: public class SystemRepository 
1:         implements 
1:                 Repository,
1:                 BundleTrackerCustomizer<AtomicReference<BundleRevisionResource>>,
1:                 ServiceTrackerCustomizer<AriesSubsystem, BasicSubsystem> {
1:     
1:     private final BundleContext bundleContext;
1:     private final CapabilitySetRepository repository;
1:     public SystemRepository(BundleContext bundleContext) {
1:         this.bundleContext = bundleContext;
1:         repository = new CapabilitySetRepository();
1:     }
1: 
1:     @Override
1:     public AtomicReference<BundleRevisionResource> addingBundle(Bundle bundle, BundleEvent event) {
1:         // The state mask must guarantee this will only be called when the bundle is in the INSTALLED state.
1:         BundleRevision revision = bundle.adapt(BundleRevision.class);
1:         BundleRevisionResource resource = new BundleRevisionResource(revision);
1:         repository.addResource(resource);
1:         return new AtomicReference<BundleRevisionResource>(resource);
1:     }
1: 
1:     @Override
1:     public BasicSubsystem addingService(ServiceReference<AriesSubsystem> reference) {
1:         // Intentionally letting the ClassCastException propagate. Everything received should be a BasicSubsystem.
1:         BasicSubsystem subsystem = (BasicSubsystem)bundleContext.getService(reference);
1:         repository.addResource(subsystem);
1:         return subsystem;
1:     }
1: 
1:     @Override
1:     public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:         return repository.findProviders(requirements);
1:     }
1: 
1:     @Override
1:     public void modifiedBundle(Bundle bundle, BundleEvent event, AtomicReference<BundleRevisionResource> object) {
1:         if (BundleEvent.UPDATED == event.getType()) {
1:             BundleRevision revision = bundle.adapt(BundleRevision.class);
1:             BundleRevisionResource resource = new BundleRevisionResource(revision);
1:             repository.removeResource(object.getAndSet(resource));
1:             repository.addResource(resource);
1:         }
1:     }
1: 
1:     @Override
1:     public void modifiedService(ServiceReference<AriesSubsystem> reference, BasicSubsystem service) {
1:         // Nothing.
1:     }
1: 
1:     @Override
1:     public void removedBundle(Bundle bundle, BundleEvent event, AtomicReference<BundleRevisionResource> object) {
1:         // The state mask must guarantee this will only be called when the bundle is in the UNINSTALLED state.
1:         repository.removeResource(object.get());
1:     }
1: 
1:     @Override
1:     public void removedService(ServiceReference<AriesSubsystem> reference, BasicSubsystem service) {
1:         repository.removeResource(service);
1:     }
commit:07912ab
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
/////////////////////////////////////////////////////////////////////////
0: 		findProviders(requirement, result, root, new HashSet<Resource>());
0: 	private void findProviders(
0: 	        Requirement requirement, 
0: 	        Collection<Capability> capabilities, 
0: 	        BasicSubsystem subsystem,
0: 	        Set<Resource> processedResources) {
0: 		for (Capability capability : subsystem.getCapabilities(requirement.getNamespace())) {
0: 			if (ResourceHelper.matches(requirement, capability)) {
1: 			}
1: 		}
0: 		    if (processedResources.contains(constituent)) {
0: 		        continue;
1: 		    }
0: 		    processedResources.add(constituent);
0: 			if (constituent instanceof BasicSubsystem) {
0: 				findProviders(requirement, capabilities, (BasicSubsystem)constituent, processedResources);
1: 			}
0: 			else {
0: 				for (Capability capability : constituent.getCapabilities(requirement.getNamespace())) {
0: 					if (ResourceHelper.matches(requirement, capability)) {
1: 					}
1: 				}
0: 				processedResources.add(constituent);
1: 			}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
0: 	private final BasicSubsystem root;
0: 	public SystemRepository(BasicSubsystem root) {
/////////////////////////////////////////////////////////////////////////
0: 	private void findProviders(Requirement requirement, Collection<Capability> capabilities, BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
0: 			if (constituent instanceof BasicSubsystem)
0: 				findProviders(requirement, capabilities, (BasicSubsystem)constituent);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
commit:307d743
/////////////////////////////////////////////////////////////////////////
0: 		// Need to examine capabilities offered by the subsystem itself.
0: 		// For example, the requirement might be an osgi.identity
0: 		// requirement for a preferred provider that's a subsystem.
0: 		for (Capability capability : subsystem.getCapabilities(requirement.getNamespace()))
0: 			if (ResourceHelper.matches(requirement, capability))
0: 				capabilities.add(capability);
0: 			else
0: 				for (Capability capability : constituent.getCapabilities(requirement.getNamespace()))
0: 					if (ResourceHelper.matches(requirement, capability))
0: 						capabilities.add(capability);
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
0: 	private final AriesSubsystem root;
0: 	public SystemRepository(AriesSubsystem root) {
0: 		this.root = root;
/////////////////////////////////////////////////////////////////////////
0: 		findProviders(requirement, result, root);
0: 	private void findProviders(Requirement requirement, Collection<Capability> capabilities, AriesSubsystem subsystem) {
0: 		for (Resource constituent : subsystem.getConstituents()) {
0: 			if (constituent instanceof AriesSubsystem)
0: 				findProviders(requirement, capabilities, (AriesSubsystem)constituent);
0: 			for (Capability capability : constituent.getCapabilities(requirement.getNamespace()))
commit:02302eb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Collection;
0: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.ResourceHelper;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
0: import org.osgi.resource.Resource;
0: import org.osgi.service.repository.Repository;
0: import org.osgi.service.subsystem.Subsystem;
1: 
0: public class SystemRepository implements Repository {
0: 	private final AriesSubsystem subsystem;
1: 	
0: 	public SystemRepository(AriesSubsystem subsystem) {
0: 		this.subsystem = subsystem;
0: 	}
1: 
0: 	@Override
0: 	public Map<Requirement, Collection<Capability>> findProviders(
0: 			Collection<? extends Requirement> requirements) {
0: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
0: 		for (Requirement requirement : requirements)
0: 			result.put(requirement, findProviders(requirement));
0: 		return result;
0: 	}
1: 	
0: 	public Collection<Capability> findProviders(Requirement requirement) {
0: 		Collection<Capability> result = new HashSet<Capability>();
0: 		findProviders(requirement, result);
0: 		return result;
0: 	}
1: 	
0: 	private void findProviders(Requirement requirement, Collection<Capability> capabilities) {
0: 		AriesSubsystem subsystem = this.subsystem;
0: 		if (requirement instanceof OsgiIdentityRequirement) {
0: 			// We only want to return providers from the same region as the subsystem.
0: 			// Find the one and only one scoped subsystem in the region, which
0: 			// will be either the current subsystem or one of its parents.
0: 			do {
0: 				subsystem = (AriesSubsystem)subsystem.getParents().iterator().next();
0: 			} while (!(subsystem.isApplication() || subsystem.isComposite()));
0: 			// Now search the one and only one scoped parent within the same region
0: 			// and all children that are also in the same region for a provider.
0: 			findProviders(subsystem, requirement, capabilities);
0: 			return;
0: 		}
0: 		while (!subsystem.getParents().isEmpty())
0: 			subsystem = (AriesSubsystem)subsystem.getParents().iterator().next();
0: 		findProviders(subsystem, requirement, capabilities);
0: 	}
1: 	
0: 	private void findProviders(AriesSubsystem subsystem, Requirement requirement, Collection<Capability> capabilities) {
0: 		// Because constituent providers are already provisioned resources, the
0: 		// sharing policy check must be between the requiring subsystem and the
0: 		// offering subsystem, not the subsystem the resource would be
0: 		// provisioned to as in the other methods.
0: 		SharingPolicyValidator validator = new SharingPolicyValidator(subsystem.getRegion(), this.subsystem.getRegion());
0: 		for (Resource resource : subsystem.getConstituents()) {
0: 			for (Capability capability : resource.getCapabilities(requirement.getNamespace())) {
0: 				// Filter out capabilities offered by dependencies that will be
0: 				// or already are provisioned to an out of scope region. This
0: 				// filtering does not apply to osgi.identity requirements within
0: 				// the same region.
0: 				if (!(requirement instanceof OsgiIdentityRequirement) && !validator.isValid(capability))
0: 					continue;
0: 				if (ResourceHelper.matches(requirement, capability))
0: 					capabilities.add(capability);
0: 			}
0: 		}
0: 		for (Subsystem child : subsystem.getChildren()) {
0: 			// If the requirement is osgi.identity and the child is not in the
0: 			// same region as the parent, we do not want to search it.
0: 			if (requirement instanceof OsgiIdentityRequirement
0: 					&& !subsystem.getRegion().equals(((AriesSubsystem)child).getRegion()))
0: 				continue;
0: 			findProviders((AriesSubsystem)child, requirement, capabilities);
0: 		}
0: 	}
0: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
0: public class SystemRepository implements org.apache.aries.subsystem.core.repository.Repository {
============================================================================