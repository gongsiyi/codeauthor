1:2d488d5: /**
1:2d488d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:2d488d5:  * or more contributor license agreements.  See the NOTICE file
1:2d488d5:  * distributed with this work for additional information
1:2d488d5:  * regarding copyright ownership.  The ASF licenses this file
1:2d488d5:  * to you under the Apache License, Version 2.0 (the
1:2d488d5:  * "License"); you may not use this file except in compliance
1:2d488d5:  * with the License.  You may obtain a copy of the License at
1:2d488d5:  *
1:2d488d5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2d488d5:  *
1:2d488d5:  * Unless required by applicable law or agreed to in writing,
1:2d488d5:  * software distributed under the License is distributed on an
1:2d488d5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2d488d5:  * KIND, either express or implied.  See the License for the
1:2d488d5:  * specific language governing permissions and limitations
1:2d488d5:  * under the License.
1:2d488d5:  */
1:79d7cbe: package org.apache.aries.blueprint.plugin.config;
1:2d488d5: 
1:2d488d5: import java.lang.reflect.AnnotatedElement;
1:2d488d5: 
1:808409a: import org.apache.aries.blueprint.annotation.config.Config;
1:2d488d5: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1:2d488d5: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1:2d488d5: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1:2d488d5: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1:2d488d5: 
1:2d488d5: public class ConfigAnnotationHandler implements BeanAnnotationHandler<Config>{
1:2d488d5: 
1:2d488d5:     @Override
1:2d488d5:     public Class<Config> getAnnotation() {
1:2d488d5:         return Config.class;
1:2d488d5:     }
1:2d488d5: 
1:2d488d5:     @Override
1:2d488d5:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, String id,
1:2d488d5:                                      ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:2d488d5:         Config config = annotatedElement.getAnnotation(Config.class);
1:2d488d5:         XmlWriter writer = new ConfigWriter(config);
1:2d488d5:         contextEnricher.addBlueprintContentWriter("config", writer);
1:2d488d5:         contextEnricher.getBlueprintConfiguration().getNamespaces().add(ConfigWriter.CONFIG_NS);
1:2d488d5:         
1:2d488d5:     }
1:2d488d5: 
1:2d488d5: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.annotation.config.Config;
commit:79d7cbe
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.plugin.config;
commit:2d488d5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.blueprint.plugin.javax;
1: 
1: import java.lang.reflect.AnnotatedElement;
1: 
0: import org.apache.aries.blueprint.api.config.Config;
1: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1: 
1: public class ConfigAnnotationHandler implements BeanAnnotationHandler<Config>{
1: 
1:     @Override
1:     public Class<Config> getAnnotation() {
1:         return Config.class;
1:     }
1: 
1:     @Override
1:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, String id,
1:                                      ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:         Config config = annotatedElement.getAnnotation(Config.class);
1:         XmlWriter writer = new ConfigWriter(config);
1:         contextEnricher.addBlueprintContentWriter("config", writer);
1:         contextEnricher.getBlueprintConfiguration().getNamespaces().add(ConfigWriter.CONFIG_NS);
1:         
1:     }
1: 
1: }
============================================================================