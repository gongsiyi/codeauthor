1:382bf57: /**
1:382bf57:  * Licensed to the Apache Software Foundation (ASF) under one
1:382bf57:  * or more contributor license agreements.  See the NOTICE file
1:382bf57:  * distributed with this work for additional information
1:382bf57:  * regarding copyright ownership.  The ASF licenses this file
1:382bf57:  * to you under the Apache License, Version 2.0 (the
1:382bf57:  * "License"); you may not use this file except in compliance
1:382bf57:  * with the License.  You may obtain a copy of the License at
1:382bf57:  *
1:382bf57:  *   http://www.apache.org/licenses/LICENSE-2.0
1:382bf57:  *
1:382bf57:  * Unless required by applicable law or agreed to in writing,
1:382bf57:  * software distributed under the License is distributed on an
1:382bf57:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:382bf57:  * KIND, either express or implied.  See the License for the
1:382bf57:  * specific language governing permissions and limitations
1:382bf57:  * under the License.
1:382bf57:  */
1:382bf57: package org.apache.aries.blueprint.ext;
1:382bf57: 
1:382bf57: import static org.junit.Assert.assertEquals;
1:382bf57: 
1:382bf57: import java.util.HashMap;
1:382bf57: import java.util.Map;
1:382bf57: 
1:382bf57: import org.junit.Before;
1:382bf57: import org.junit.Test;
1:382bf57: import org.osgi.service.blueprint.reflect.ValueMetadata;
1:382bf57: 
1:382bf57: public class PropertyPlaceholderTest extends PropertyPlaceholder {
1:382bf57:     private final Map<String,String> values = new HashMap<String,String>();
1:382bf57:     private LateBindingValueMetadata sut;
1:382bf57: 
1:382bf57:     @Before
1:382bf57:     public void setup() {
1:382bf57:         values.clear();
1:382bf57:         bind("prop1","hello");
1:382bf57:         bind("prop2","world");
1:382bf57:         bind("prop3","10");
1:382bf57:         bind("prop4","20");
1:382bf57:         bind("prop5","nested");
1:382bf57:         bind("prop-nested","hello nested world!");
1:382bf57:         bind("prop-recursive-1","${prop-recursive-2}");
1:382bf57:         bind("prop-recursive-2","${prop-recursive-3}");
1:382bf57:         bind("prop-recursive-3","recursive-3");
1:382bf57: 
1:382bf57:         bind("animal", "quick brown fox");
1:382bf57:         bind("target", "lazy dog");
1:382bf57:         bind("animal.1", "fox");
1:382bf57:         bind("animal.2", "mouse");
1:382bf57:         bind("species", "2");
1:382bf57:     }
1:382bf57: 
1:382bf57:     @Test
1:382bf57:     public void singleProp() {
1:382bf57:         sut = makeProperty("${prop1}");
1:382bf57:         assertEquals("hello", sut.getStringValue());
1:382bf57:     }
1:382bf57: 
1:382bf57:     @Test
1:382bf57:     public void multipleProps() {
1:382bf57:         sut = makeProperty("say ${prop1} ${prop2}");
1:382bf57:         assertEquals("say hello world", sut.getStringValue());
1:382bf57:     }
1:382bf57: 
1:382bf57:     @Test
1:382bf57:     public void nestedProps() {
1:382bf57:         sut = makeProperty("${prop-${prop5}}");
1:382bf57:         assertEquals("hello nested world!", sut.getStringValue());
1:382bf57:     }
1:382bf57: 
1:382bf57:     @Test
1:382bf57:     public void nestedProps2() {
1:382bf57:         sut = makeProperty("The ${animal.${species}} jumps over the ${target}.");
1:382bf57:         assertEquals("The mouse jumps over the lazy dog.", sut.getStringValue());
1:382bf57:     }
1:382bf57: 
1:382bf57:     @Test
1:382bf57:     public void nestedProps3() {
1:382bf57:         sut = makeProperty("The ${animal.${species}} jumps over the ${target}.");
1:382bf57:         bind("species", "1");
1:382bf57:         assertEquals("The fox jumps over the lazy dog.", sut.getStringValue());
1:382bf57:     }
1:382bf57: 
1:382bf57:     @Test
1:382bf57:     public void recursiveProps() {
1:382bf57:         sut = makeProperty("${prop-recursive-1}");
1:382bf57:         assertEquals("recursive-3", sut.getStringValue());
1:382bf57:     }
1:382bf57: 
1:382bf57:     @Test
1:382bf57:     public void plainText() {
1:382bf57:         sut = makeProperty("plain text");
1:382bf57:         assertEquals("plain text", sut.getStringValue());
1:382bf57:     }
1:382bf57: 
1:382bf57: //    @Test
1:382bf57: //    public void evaluateStringProps() {
1:382bf57: //        sut = makeProperty("${prop1+prop2}");
1:382bf57: //        assertEquals("helloworld", sut.getStringValue());
1:382bf57: //    }
1:382bf57: //
1:382bf57: //    @Test
1:382bf57: //    public void evaluateIntProps() {
1:382bf57: //        sut = makeProperty("${prop3+prop4}");
1:382bf57: //        assertEquals("30", sut.getStringValue());
1:382bf57: //    }
1:382bf57: 
1:382bf57: 
1:382bf57: 
1:382bf57:     /*
1:382bf57:      * Test helper methods
1:382bf57:      */
1:382bf57: 
1:382bf57:     // Override to simulate actual property retrieval
1:382bf57:     protected String getProperty(String prop) {
1:382bf57:         return values.get(prop);
1:382bf57:     }
1:382bf57: 
1:382bf57:     private void bind(String prop, String val) {
1:382bf57:         values.put(prop, val);
1:382bf57:     }
1:382bf57: 
1:382bf57:     private LateBindingValueMetadata makeProperty(final String prop) {
1:382bf57:         return new LateBindingValueMetadata(new ValueMetadata() {
1:382bf57:             public String getType() {
1:382bf57:                 return null;
1:382bf57:             }
1:382bf57: 
1:382bf57:             public String getStringValue() {
1:382bf57:                 return prop;
1:382bf57:             }
1:382bf57:         });
1:382bf57:     }
1:382bf57: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:382bf57
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.ext;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.service.blueprint.reflect.ValueMetadata;
1: 
1: public class PropertyPlaceholderTest extends PropertyPlaceholder {
1:     private final Map<String,String> values = new HashMap<String,String>();
1:     private LateBindingValueMetadata sut;
1: 
1:     @Before
1:     public void setup() {
1:         values.clear();
1:         bind("prop1","hello");
1:         bind("prop2","world");
1:         bind("prop3","10");
1:         bind("prop4","20");
1:         bind("prop5","nested");
1:         bind("prop-nested","hello nested world!");
1:         bind("prop-recursive-1","${prop-recursive-2}");
1:         bind("prop-recursive-2","${prop-recursive-3}");
1:         bind("prop-recursive-3","recursive-3");
1: 
1:         bind("animal", "quick brown fox");
1:         bind("target", "lazy dog");
1:         bind("animal.1", "fox");
1:         bind("animal.2", "mouse");
1:         bind("species", "2");
1:     }
1: 
1:     @Test
1:     public void singleProp() {
1:         sut = makeProperty("${prop1}");
1:         assertEquals("hello", sut.getStringValue());
1:     }
1: 
1:     @Test
1:     public void multipleProps() {
1:         sut = makeProperty("say ${prop1} ${prop2}");
1:         assertEquals("say hello world", sut.getStringValue());
1:     }
1: 
1:     @Test
1:     public void nestedProps() {
1:         sut = makeProperty("${prop-${prop5}}");
1:         assertEquals("hello nested world!", sut.getStringValue());
1:     }
1: 
1:     @Test
1:     public void nestedProps2() {
1:         sut = makeProperty("The ${animal.${species}} jumps over the ${target}.");
1:         assertEquals("The mouse jumps over the lazy dog.", sut.getStringValue());
1:     }
1: 
1:     @Test
1:     public void nestedProps3() {
1:         sut = makeProperty("The ${animal.${species}} jumps over the ${target}.");
1:         bind("species", "1");
1:         assertEquals("The fox jumps over the lazy dog.", sut.getStringValue());
1:     }
1: 
1:     @Test
1:     public void recursiveProps() {
1:         sut = makeProperty("${prop-recursive-1}");
1:         assertEquals("recursive-3", sut.getStringValue());
1:     }
1: 
1:     @Test
1:     public void plainText() {
1:         sut = makeProperty("plain text");
1:         assertEquals("plain text", sut.getStringValue());
1:     }
1: 
1: //    @Test
1: //    public void evaluateStringProps() {
1: //        sut = makeProperty("${prop1+prop2}");
1: //        assertEquals("helloworld", sut.getStringValue());
1: //    }
1: //
1: //    @Test
1: //    public void evaluateIntProps() {
1: //        sut = makeProperty("${prop3+prop4}");
1: //        assertEquals("30", sut.getStringValue());
1: //    }
1: 
1: 
1: 
1:     /*
1:      * Test helper methods
1:      */
1: 
1:     // Override to simulate actual property retrieval
1:     protected String getProperty(String prop) {
1:         return values.get(prop);
1:     }
1: 
1:     private void bind(String prop, String val) {
1:         values.put(prop, val);
1:     }
1: 
1:     private LateBindingValueMetadata makeProperty(final String prop) {
1:         return new LateBindingValueMetadata(new ValueMetadata() {
1:             public String getType() {
1:                 return null;
1:             }
1: 
1:             public String getStringValue() {
1:                 return prop;
1:             }
1:         });
1:     }
1: }
============================================================================