1:d251156: /*
1:d251156:  * Licensed to the Apache Software Foundation (ASF) under one
1:d251156:  * or more contributor license agreements.  See the NOTICE file
1:d251156:  * distributed with this work for additional information
1:d251156:  * regarding copyright ownership.  The ASF licenses this file
1:d251156:  * to you under the Apache License, Version 2.0 (the
1:d251156:  * "License"); you may not use this file except in compliance
1:d251156:  * with the License.  You may obtain a copy of the License at
1:d251156:  *
1:d251156:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d251156:  *
1:d251156:  * Unless required by applicable law or agreed to in writing,
1:d251156:  * software distributed under the License is distributed on an
1:d251156:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d251156:  * KIND, either express or implied.  See the License for the
1:d251156:  * specific language governing permissions and limitations
1:d251156:  * under the License.
1:d251156:  */
1:d251156: package org.apache.aries.blueprint.itests;
3:d251156: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:d251156: import static org.junit.Assert.assertNotNull;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.composite;
1:d251156: 
1:d251156: import java.io.ByteArrayInputStream;
1:d251156: import java.io.InputStream;
1:d251156: import java.io.UnsupportedEncodingException;
1:d251156: import java.util.ArrayList;
1:d251156: import java.util.HashSet;
1:d251156: import java.util.List;
1:d251156: 
1:d251156: import org.apache.aries.blueprint.itests.comp.ListFactory;
1:d251156: import org.apache.aries.blueprint.itests.comp.Listener;
1:d251156: import org.junit.Test;
1:d251156: import org.ops4j.pax.exam.CoreOptions;
1:d251156: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:d251156: import org.osgi.framework.Bundle;
1:d251156: import org.osgi.framework.Constants;
1:d251156: 
1:d251156: public class DeadLockTest extends AbstractBlueprintIntegrationTest {
1:d251156: 
1:d251156:     private static final int TOTAL_REF_TEST_BUNDLES = 10;
1:d251156: 
1:d251156:     @Test
1:d251156:     public void testReferenceListenerDeadlock() throws Exception {
1:d251156:         for (int i=0; i < TOTAL_REF_TEST_BUNDLES; i++) {
1:d251156:             Bundle b = context().getBundleByName("sample" + i);
1:d251156:             b.start();
1:d251156:         }
1:d251156: 
1:d251156:         // every blueprint container should be up
1:d251156:         for (int i=0; i < TOTAL_REF_TEST_BUNDLES; i++) {
1:d251156:             assertNotNull(Helper.getBlueprintContainerForBundle(context(), "sample" + i));
1:d251156:         }
1:d251156:     }
1:d251156:     
1:d251156:     private InputStream getTestBundle(int no, int total) {
1:d251156:         StringBuilder blueprint = new StringBuilder();
1:d251156:         blueprint.append("<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">");
1:d251156:         blueprint.append("<bean id=\"listener\" class=\"" + Listener.class.getName() + "\" />");
1:d251156:         
1:d251156:         for (int i=0; i<total; i++) {
1:d251156:             if (i==no) {
1:d251156:                 blueprint.append("<service interface=\"java.util.List\">");
1:d251156:                 blueprint.append("<service-properties><entry key=\"no\" value=\""+i+"\" /></service-properties>");
1:d251156:                 blueprint.append("<bean class=\"" + ListFactory.class.getName() + "\" factory-method=\"create\">");
1:d251156:                 blueprint.append("<argument value=\""+i+"\" />");
1:d251156:                 blueprint.append("</bean>");
1:d251156:                 blueprint.append("</service>");
1:d251156:             } else {
1:d251156:                 blueprint.append("<reference availability=\"optional\" id=\"ref"+i+"\" interface=\"java.util.List\" filter=\"(no="+i+")\">");
1:d251156:                 blueprint.append("<reference-listener ref=\"listener\" bind-method=\"bind\" unbind-method=\"unbind\" />");
1:d251156:                 blueprint.append("</reference>");
1:d251156:             }
1:d251156:         }
1:d251156:         blueprint.append("</blueprint>");
1:d251156:         
1:d251156:         try {
1:d251156:             InputStream is = new ByteArrayInputStream(blueprint.toString().getBytes("UTF-8"));
1:d251156:             return TinyBundles.bundle()
1:d251156:                     .add(Listener.class)
1:d251156:                     .add(ListFactory.class)
1:d251156:                     .add("OSGI-INF/blueprint/blueprint.xml", is)
1:d251156:                     .set(Constants.IMPORT_PACKAGE, "org.osgi.framework")
1:d251156:                     .set(Constants.BUNDLE_SYMBOLICNAME, "sample" + no).build();
1:d251156:         } catch (UnsupportedEncodingException e) {
1:d251156:             throw new IllegalArgumentException(e.getMessage(), e);
1:d251156:         }
1:d251156:         
1:d251156:         
1:d251156:     }
1:d251156:     
1:d251156:     private Option[] getRefTestBundles() {
1:d251156:         List<Option> refTestBundles = new ArrayList<Option>();
1:d251156:         for (int c=0;c < TOTAL_REF_TEST_BUNDLES; c++) {
1:d251156:             refTestBundles.add(CoreOptions.provision(getTestBundle(c, TOTAL_REF_TEST_BUNDLES)));
1:d251156:         }
1:d251156:         return refTestBundles.toArray(new Option[]{});
1:d251156:     }
1:d251156:     
1:d251156:     @Test
1:d251156:     public void testDeadlock() throws Exception {
1:d251156:       bundleContext.registerService("java.util.Set",new HashSet<Object>(), null);
1:d251156:       
1:bc2c036:       Bundle bundle = getSampleBundle();
1:d251156:       bundle.start();
1:d251156:       
1:d251156:       Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
1:d251156:       
1:d251156:       // no actual assertions, we just don't want to deadlock
1:d251156:     }
1:bc2c036: 
1:bc2c036: 	@org.ops4j.pax.exam.Configuration
1:d251156:     public Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:             baseOptions(),
1:d251156:             Helper.blueprintBundles(),
1:c185a5a:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample", false),
1:d251156:             composite(getRefTestBundles()),
1:d251156:         };
1:d251156:     }
1:d251156: 
1:d251156: 
1:d251156: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bc2c036
/////////////////////////////////////////////////////////////////////////
1:       Bundle bundle = getSampleBundle();
1: 
1: 	@org.ops4j.pax.exam.Configuration
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
1:             mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample", false),
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.ops4j.pax.exam.CoreOptions.composite;
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.InputStream;
1: import java.io.UnsupportedEncodingException;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: 
1: import org.apache.aries.blueprint.itests.comp.ListFactory;
1: import org.apache.aries.blueprint.itests.comp.Listener;
1: import org.junit.Test;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: 
1: public class DeadLockTest extends AbstractBlueprintIntegrationTest {
1: 
1:     private static final int TOTAL_REF_TEST_BUNDLES = 10;
1: 
1:     @Test
1:     public void testReferenceListenerDeadlock() throws Exception {
1:         for (int i=0; i < TOTAL_REF_TEST_BUNDLES; i++) {
1:             Bundle b = context().getBundleByName("sample" + i);
1:             b.start();
1:         }
1: 
1:         // every blueprint container should be up
1:         for (int i=0; i < TOTAL_REF_TEST_BUNDLES; i++) {
1:             assertNotNull(Helper.getBlueprintContainerForBundle(context(), "sample" + i));
1:         }
1:     }
1:     
1:     private InputStream getTestBundle(int no, int total) {
1:         StringBuilder blueprint = new StringBuilder();
1:         blueprint.append("<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">");
1:         blueprint.append("<bean id=\"listener\" class=\"" + Listener.class.getName() + "\" />");
1:         
1:         for (int i=0; i<total; i++) {
1:             if (i==no) {
1:                 blueprint.append("<service interface=\"java.util.List\">");
1:                 blueprint.append("<service-properties><entry key=\"no\" value=\""+i+"\" /></service-properties>");
1:                 blueprint.append("<bean class=\"" + ListFactory.class.getName() + "\" factory-method=\"create\">");
1:                 blueprint.append("<argument value=\""+i+"\" />");
1:                 blueprint.append("</bean>");
1:                 blueprint.append("</service>");
1:             } else {
1:                 blueprint.append("<reference availability=\"optional\" id=\"ref"+i+"\" interface=\"java.util.List\" filter=\"(no="+i+")\">");
1:                 blueprint.append("<reference-listener ref=\"listener\" bind-method=\"bind\" unbind-method=\"unbind\" />");
1:                 blueprint.append("</reference>");
1:             }
1:         }
1:         blueprint.append("</blueprint>");
1:         
1:         try {
1:             InputStream is = new ByteArrayInputStream(blueprint.toString().getBytes("UTF-8"));
1:             return TinyBundles.bundle()
1:                     .add(Listener.class)
1:                     .add(ListFactory.class)
1:                     .add("OSGI-INF/blueprint/blueprint.xml", is)
1:                     .set(Constants.IMPORT_PACKAGE, "org.osgi.framework")
1:                     .set(Constants.BUNDLE_SYMBOLICNAME, "sample" + no).build();
1:         } catch (UnsupportedEncodingException e) {
1:             throw new IllegalArgumentException(e.getMessage(), e);
1:         }
1:         
1:         
1:     }
1:     
1:     private Option[] getRefTestBundles() {
1:         List<Option> refTestBundles = new ArrayList<Option>();
1:         for (int c=0;c < TOTAL_REF_TEST_BUNDLES; c++) {
1:             refTestBundles.add(CoreOptions.provision(getTestBundle(c, TOTAL_REF_TEST_BUNDLES)));
1:         }
1:         return refTestBundles.toArray(new Option[]{});
1:     }
1:     
1:     @Test
1:     public void testDeadlock() throws Exception {
1:       bundleContext.registerService("java.util.Set",new HashSet<Object>(), null);
1:       
0:       Bundle bundle = context().getBundleByName("org.apache.aries.blueprint.sample");
0:       assertNotNull(bundle);
1: 
1:       bundle.start();
1:       
1:       Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
1:       
1:       // no actual assertions, we just don't want to deadlock
1:     }
1:     
0:     @org.ops4j.pax.exam.Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
1:             baseOptions(),
1:             Helper.blueprintBundles(),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
1:             composite(getRefTestBundles()),
1:         };
1:     }
1: 
1: 
1: }
============================================================================