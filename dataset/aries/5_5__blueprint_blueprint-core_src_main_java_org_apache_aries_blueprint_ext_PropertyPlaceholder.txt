1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:be8e9c5: package org.apache.aries.blueprint.ext;
1:f13c6ac: 
1:f13c6ac: import java.io.IOException;
1:f13c6ac: import java.io.InputStream;
1:f13c6ac: import java.net.URL;
1:b13e703: import java.util.Dictionary;
1:b13e703: import java.util.Enumeration;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: import java.util.Properties;
1:f13c6ac: 
1:f520fd5: import org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Property placeholder that looks for properties in the System properties.
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class PropertyPlaceholder extends AbstractPropertyPlaceholder {
1:f13c6ac: 
1:f13c6ac:     public enum SystemProperties {
1:f13c6ac:         never,
1:f13c6ac:         fallback,
1:f13c6ac:         override
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(PropertyPlaceholder.class);
1:f13c6ac: 
1:f13c6ac:     private Map defaultProperties;
1:f13c6ac:     private Properties properties;
1:f13c6ac:     private List<URL> locations;
1:f13c6ac:     private boolean ignoreMissingLocations;
1:f13c6ac:     private SystemProperties systemProperties = SystemProperties.fallback;
1:b13e703:     private PropertyEvaluator evaluator = null;
1:f13c6ac: 
1:f13c6ac:     public Map getDefaultProperties() {
1:f13c6ac:         return defaultProperties;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setDefaultProperties(Map defaultProperties) {
1:f13c6ac:         this.defaultProperties = defaultProperties;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public List<URL> getLocations() {
1:f13c6ac:         return locations;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setLocations(List<URL> locations) {
1:f13c6ac:         this.locations = locations;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public boolean isIgnoreMissingLocations() {
1:f13c6ac:         return ignoreMissingLocations;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setIgnoreMissingLocations(boolean ignoreMissingLocations) {
1:f13c6ac:         this.ignoreMissingLocations = ignoreMissingLocations;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public SystemProperties getSystemProperties() {
1:f13c6ac:         return systemProperties;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setSystemProperties(SystemProperties systemProperties) {
1:f13c6ac:         this.systemProperties = systemProperties;
1:f13c6ac:     }
1:f13c6ac: 
1:b13e703:     public PropertyEvaluator getEvaluator() {
1:b13e703:         return evaluator;
1:b13e703:     }
1:b13e703: 
1:b13e703:     public void setEvaluator(PropertyEvaluator evaluator) {
1:b13e703:         this.evaluator = evaluator;
1:b13e703:     }
1:b13e703: 
1:f13c6ac:     public void init() throws Exception {
1:f13c6ac:         properties = new Properties();
1:f13c6ac:         if (locations != null) {
1:f13c6ac:             for (URL url : locations) {
1:f13c6ac:                 InputStream is = null;
1:f13c6ac:                 try {
1:f13c6ac:                     is = url.openStream();
1:f13c6ac:                 } catch (IOException e) {
1:f13c6ac:                     if (ignoreMissingLocations) {
1:a0b2cd5:                         LOGGER.debug("Unable to load properties from url " + url + " while ignoreMissingLocations is set to true");
1:f13c6ac:                     } else {
1:f13c6ac:                         throw e;
1:f13c6ac:                     }
1:f13c6ac:                 }
1:f13c6ac:                 if (is != null) {
1:f13c6ac:                     try {
1:f13c6ac:                         properties.load(is);
1:f13c6ac:                     } finally {
1:f13c6ac:                         is.close();
1:f13c6ac:                     }
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     protected String getProperty(String val) {
1:f13c6ac:         LOGGER.debug("Retrieving property {}", val);
1:f13c6ac:         Object v = null;
1:f13c6ac:         if (v == null && systemProperties == SystemProperties.override) {
1:4274b92:             v = getSystemProperty(val);
1:f13c6ac:             if (v != null) {
1:f13c6ac:                 LOGGER.debug("Found system property {} with value {}", val, v);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         if (v == null && properties != null) {
1:f13c6ac:             v = properties.getProperty(val);
1:f13c6ac:             if (v != null) {
1:f13c6ac:                 LOGGER.debug("Found property {} from locations with value {}", val, v);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         if (v == null && systemProperties == SystemProperties.fallback) {
1:4274b92:             v = getSystemProperty(val);
1:f13c6ac:             if (v != null) {
1:f13c6ac:                 LOGGER.debug("Found system property {} with value {}", val, v);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         if (v == null && defaultProperties != null) {
1:f13c6ac:             v = defaultProperties.get(val);
1:f13c6ac:             if (v != null) {
1:f13c6ac:                 LOGGER.debug("Retrieved property {} value from defaults {}", val, v);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         if (v == null) {
1:f13c6ac:             LOGGER.debug("Property {} not found", val);
1:f13c6ac:         }
1:f13c6ac:         return v != null ? v.toString() : null;
1:f13c6ac:     }
1:f13c6ac: 
1:4274b92:     protected String getSystemProperty(String val) {
1:4274b92:         if (val.startsWith("env:")) {
1:4274b92:             return System.getenv(val.substring("env:".length()));
1:4274b92:         }
1:4274b92:         return System.getProperty(val);
1:4274b92:     }
1:4274b92: 
13:03b9eab:     @Override
1:03b9eab:     protected String retrieveValue(String expression) {
1:03b9eab:         LOGGER.debug("Retrieving Value from expression: {}", expression);
1:b13e703:         
1:b13e703:         if (evaluator == null) {
1:b13e703:             return super.retrieveValue(expression);
1:b13e703:         } else {
1:b13e703:             return evaluator.evaluate(expression, new Dictionary<String, String>(){
1:b13e703:                 @Override
1:b13e703:                 public String get(Object key) {
1:b13e703:                     return getProperty((String) key);
1:f13c6ac:                 }
1:b13e703: 
1:b13e703:                 // following are not important
1:b13e703:                 @Override
1:b13e703:                 public String put(String key, String value) {
1:b13e703:                     throw new UnsupportedOperationException();
1:b13e703:                 }
1:b13e703:                 
1:b13e703:                 @Override
1:b13e703:                 public Enumeration<String> elements() {
1:b13e703:                     throw new UnsupportedOperationException();
1:b13e703:                 }
1:b13e703:                 
1:b13e703:                 @Override
1:b13e703:                 public boolean isEmpty() {
1:b13e703:                     throw new UnsupportedOperationException();
1:b13e703:                 }
1:b13e703: 
1:b13e703:                 @Override
1:b13e703:                 public Enumeration<String> keys() {
1:b13e703:                     throw new UnsupportedOperationException();
1:b13e703:                 }
1:b13e703: 
1:b13e703:                 @Override
1:b13e703:                 public String remove(Object key) {
1:b13e703:                     throw new UnsupportedOperationException();
1:b13e703:                 }
1:b13e703: 
1:b13e703:                 @Override
1:b13e703:                 public int size() {
1:b13e703:                     throw new UnsupportedOperationException();
1:b13e703:                 }
1:b13e703:                 
1:b13e703:             });
18:03b9eab:         }
1:b13e703: 
1:03b9eab:     }
1:b13e703:     
1:03b9eab:    
1:03b9eab: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4274b92
/////////////////////////////////////////////////////////////////////////
1:             v = getSystemProperty(val);
/////////////////////////////////////////////////////////////////////////
1:             v = getSystemProperty(val);
/////////////////////////////////////////////////////////////////////////
1:     protected String getSystemProperty(String val) {
1:         if (val.startsWith("env:")) {
1:             return System.getenv(val.substring("env:".length()));
1:         }
1:         return System.getProperty(val);
1:     }
1: 
commit:be8e9c5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.ext;
/////////////////////////////////////////////////////////////////////////
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.ext;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Property placeholder that looks for properties in the System properties.
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 766508 $, $Date: 2009-04-19 22:09:27 +0200 (Sun, 19 Apr 2009) $
1:  */
1: public class PropertyPlaceholder extends AbstractPropertyPlaceholder {
1: 
1:     public enum SystemProperties {
1:         never,
1:         fallback,
1:         override
1:     }
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(PropertyPlaceholder.class);
1: 
1:     private Map defaultProperties;
1:     private Properties properties;
1:     private List<URL> locations;
1:     private boolean ignoreMissingLocations;
1:     private SystemProperties systemProperties = SystemProperties.fallback;
1: 
1:     public Map getDefaultProperties() {
1:         return defaultProperties;
1:     }
1: 
1:     public void setDefaultProperties(Map defaultProperties) {
1:         this.defaultProperties = defaultProperties;
1:     }
1: 
1:     public List<URL> getLocations() {
1:         return locations;
1:     }
1: 
1:     public void setLocations(List<URL> locations) {
1:         this.locations = locations;
1:     }
1: 
1:     public boolean isIgnoreMissingLocations() {
1:         return ignoreMissingLocations;
1:     }
1: 
1:     public void setIgnoreMissingLocations(boolean ignoreMissingLocations) {
1:         this.ignoreMissingLocations = ignoreMissingLocations;
1:     }
1: 
1:     public SystemProperties getSystemProperties() {
1:         return systemProperties;
1:     }
1: 
1:     public void setSystemProperties(SystemProperties systemProperties) {
1:         this.systemProperties = systemProperties;
1:     }
1: 
1:     public void init() throws Exception {
1:         properties = new Properties();
1:         if (locations != null) {
1:             for (URL url : locations) {
1:                 InputStream is = null;
1:                 try {
1:                     is = url.openStream();
1:                 } catch (IOException e) {
1:                     if (ignoreMissingLocations) {
0:                         LOGGER.info("Unable to load properties from url " + url, e);
1:                     } else {
1:                         throw e;
1:                     }
1:                 }
1:                 if (is != null) {
1:                     try {
1:                         properties.load(is);
1:                     } finally {
1:                         is.close();
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     protected String getProperty(String val) {
1:         LOGGER.debug("Retrieving property {}", val);
1:         Object v = null;
1:         if (v == null && systemProperties == SystemProperties.override) {
0:             v = System.getProperty(val);
1:             if (v != null) {
1:                 LOGGER.debug("Found system property {} with value {}", val, v);
1:             }
1:         }
1:         if (v == null && properties != null) {
1:             v = properties.getProperty(val);
1:             if (v != null) {
1:                 LOGGER.debug("Found property {} from locations with value {}", val, v);
1:             }
1:         }
1:         if (v == null && systemProperties == SystemProperties.fallback) {
0:             v = System.getProperty(val);
1:             if (v != null) {
1:                 LOGGER.debug("Found system property {} with value {}", val, v);
1:             }
1:         }
1:         if (v == null && defaultProperties != null) {
1:             v = defaultProperties.get(val);
1:             if (v != null) {
1:                 LOGGER.debug("Retrieved property {} value from defaults {}", val, v);
1:             }
1:         }
1:         if (v == null) {
1:             LOGGER.debug("Property {} not found", val);
1:         }
1:         return v != null ? v.toString() : null;
1:     }
1: 
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:e2445d0
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.utils;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
commit:f520fd5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.ext.evaluator.PropertyEvaluator;
commit:b13e703
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
1: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
1:     private PropertyEvaluator evaluator = null;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public PropertyEvaluator getEvaluator() {
1:         return evaluator;
1:     }
1: 
1:     public void setEvaluator(PropertyEvaluator evaluator) {
1:         this.evaluator = evaluator;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (evaluator == null) {
1:             return super.retrieveValue(expression);
1:         } else {
1:             return evaluator.evaluate(expression, new Dictionary<String, String>(){
1:                 @Override
1:                 public String get(Object key) {
1:                     return getProperty((String) key);
1: 
1:                 // following are not important
1:                 @Override
1:                 public String put(String key, String value) {
1:                     throw new UnsupportedOperationException();
1:                 }
1:                 
1:                 @Override
1:                 public Enumeration<String> elements() {
1:                     throw new UnsupportedOperationException();
1:                 }
1:                 
1:                 @Override
1:                 public boolean isEmpty() {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public Enumeration<String> keys() {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public String remove(Object key) {
1:                     throw new UnsupportedOperationException();
1:                 }
1: 
1:                 @Override
1:                 public int size() {
1:                     throw new UnsupportedOperationException();
1:                 }
1:                 
1:             });
1: 
1:    
author:Lei Wang
-------------------------------------------------------------------------------
commit:03b9eab
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collection;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:     private transient JexlExpressionParser jexlParser;
1:     
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected String retrieveValue(String expression) {
1:         LOGGER.debug("Retrieving Value from expression: {}", expression);
0:         String result = super.retrieveValue(expression);
0:         
0:         if (result == null){
0:             try {
0:                 Class.forName("org.apache.commons.jexl2.JexlEngine");
0:                 JexlExpressionParser parser = getJexlParser();
0:                 try {
0:                     Object obj = parser.evaluate(expression);
0:                     if (obj!=null) {
0:                         result = obj.toString();
1:                     }
0:                 } catch (Exception e) {
0:                     LOGGER.info("Could not evaluate expression: {}", expression);
0:                     LOGGER.info("Exception:", e);
1:                 }
0:             } catch (ClassNotFoundException e) {
0:                 LOGGER.info("Could not evaluate expression: {}", expression);
0:                 LOGGER.info("Exception:", e);
1:             }
1:         }
0:         return result;
1:     }
0:     
0:     private synchronized JexlExpressionParser getJexlParser() {
0:         if (jexlParser == null) {
0:             jexlParser = new JexlExpressionParser(toMap());
1:         }
0:         return jexlParser;
1:     }
0: 
0:     private Map<String, Object> toMap() {
0:         return new Map<String, Object>() {
1:             @Override
0:             public boolean containsKey(Object o) {
0:                 return getProperty((String) o) != null;
1:             }
0:             
1:             @Override
0:             public Object get(Object o) {
0:                 return getProperty((String) o);
1:             }
0:             
0:             // following are not important
1:             @Override
0:             public Object put(String s, Object o) {
0:                 throw new UnsupportedOperationException();
1:             }
0:             
1:             @Override
0:             public int size() {
0:                 throw new UnsupportedOperationException();
1:             }
0: 
1:             @Override
0:             public boolean isEmpty() {
0:                 throw new UnsupportedOperationException();
1:             }
0: 
1:             @Override
0:             public boolean containsValue(Object o) {
0:                 throw new UnsupportedOperationException();
1:             }
0: 
1:             @Override
0:             public Object remove(Object o) {
0:                 throw new UnsupportedOperationException();
1:             }
0: 
1:             @Override
0:             public void putAll(Map<? extends String, ? extends Object> map) {
0:                 throw new UnsupportedOperationException();
1:             }
0: 
1:             @Override
0:             public void clear() {
0:                 throw new UnsupportedOperationException();
1:             }
0: 
1:             @Override
0:             public Set<String> keySet() {
0:                 throw new UnsupportedOperationException();
1:             }
0: 
1:             @Override
0:             public Collection<Object> values() {
0:                 throw new UnsupportedOperationException();
1:             }
0: 
1:             @Override
0:             public Set<Entry<String, Object>> entrySet() {
0:                 throw new UnsupportedOperationException();
1:             }
0:         };
1:     }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.ext;
author:Lin Sun
-------------------------------------------------------------------------------
commit:a0b2cd5
/////////////////////////////////////////////////////////////////////////
1:                         LOGGER.debug("Unable to load properties from url " + url + " while ignoreMissingLocations is set to true");
============================================================================