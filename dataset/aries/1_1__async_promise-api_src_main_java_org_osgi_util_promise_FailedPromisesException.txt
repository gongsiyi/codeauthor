1:14ceeb1: /*
1:14ceeb1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:14ceeb1:  *
1:14ceeb1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:14ceeb1:  * you may not use this file except in compliance with the License.
1:14ceeb1:  * You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing, software
1:14ceeb1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14ceeb1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14ceeb1:  * See the License for the specific language governing permissions and
1:14ceeb1:  * limitations under the License.
1:14ceeb1:  */
1:0d3d319: package org.osgi.util.promise;
1:0d3d319: 
1:0d3d319: import java.util.Collection;
1:0d3d319: import java.util.Collections;
1:0d3d319: 
1:0d3d319: /**
1:0d3d319:  * Promise failure exception for a collection of failed Promises.
1:0d3d319:  */
1:0d3d319: public class FailedPromisesException extends RuntimeException {
1:0d3d319: 
1:0d3d319:     private final Collection<Promise<?>> failed;
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Create a new FailedPromisesException with the specified Promises.
1:0d3d319:      *
1:0d3d319:      * @param failed A collection of Promises that have been resolved with a failure. Must not be null.
1:0d3d319:      */
1:0d3d319:     public FailedPromisesException(Collection<Promise<?>> failed) {
1:0d3d319:         this(failed, null);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Create a new FailedPromisesException with the specified Promises.
1:0d3d319:      *
1:0d3d319:      * @param failed A collection of Promises that have been resolved with a failure. Must not be null.
1:0d3d319:      * @param cause  the cause (which is saved for later retrieval by the {@link #getCause()} method).  (A <tt>null</tt>
1:0d3d319:      *               value is permitted, and indicates that the cause is nonexistent or unknown.)
1:0d3d319:      */
1:0d3d319:     public FailedPromisesException(Collection<Promise<?>> failed, Throwable cause) {
1:0d3d319:         super(cause);
1:0d3d319:         assert failed != null;
1:0d3d319:         this.failed = failed;
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     /**
1:0d3d319:      * Returns the collection of Promises that have been resolved with a failure.
1:0d3d319:      *
1:0d3d319:      * @return The collection of Promises that have been resolved with a failure. The returned collection is
1:0d3d319:      * unmodifiable.
1:0d3d319:      */
1:0d3d319:     public Collection<Promise<?>> getFailedPromises() {
1:0d3d319:         return Collections.unmodifiableCollection(failed);
1:0d3d319:     }
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.osgi.util.promise;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: 
1: /**
1:  * Promise failure exception for a collection of failed Promises.
1:  */
1: public class FailedPromisesException extends RuntimeException {
1: 
1:     private final Collection<Promise<?>> failed;
1: 
1:     /**
1:      * Create a new FailedPromisesException with the specified Promises.
1:      *
1:      * @param failed A collection of Promises that have been resolved with a failure. Must not be null.
1:      */
1:     public FailedPromisesException(Collection<Promise<?>> failed) {
1:         this(failed, null);
1:     }
1: 
1:     /**
1:      * Create a new FailedPromisesException with the specified Promises.
1:      *
1:      * @param failed A collection of Promises that have been resolved with a failure. Must not be null.
1:      * @param cause  the cause (which is saved for later retrieval by the {@link #getCause()} method).  (A <tt>null</tt>
1:      *               value is permitted, and indicates that the cause is nonexistent or unknown.)
1:      */
1:     public FailedPromisesException(Collection<Promise<?>> failed, Throwable cause) {
1:         super(cause);
1:         assert failed != null;
1:         this.failed = failed;
1:     }
1: 
1:     /**
1:      * Returns the collection of Promises that have been resolved with a failure.
1:      *
1:      * @return The collection of Promises that have been resolved with a failure. The returned collection is
1:      * unmodifiable.
1:      */
1:     public Collection<Promise<?>> getFailedPromises() {
1:         return Collections.unmodifiableCollection(failed);
1:     }
1: }
============================================================================