1:314564e: /*
1:314564e:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:314564e:  * 
1:314564e:  * Licensed under the Apache License, Version 2.0 (the "License");
1:314564e:  * you may not use this file except in compliance with the License.
1:314564e:  * You may obtain a copy of the License at
1:314564e:  *
1:314564e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:314564e:  *
1:314564e:  * Unless required by applicable law or agreed to in writing, software
1:314564e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:314564e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:314564e:  * See the License for the specific language governing permissions and
1:314564e:  * limitations under the License.
1:314564e:  */
1:314564e: package org.osgi.service.transaction.control.jpa;
1:314564e: 
1:314564e: import java.util.Map;
1:314564e: 
1:314564e: import javax.persistence.EntityManager;
1:314564e: import javax.persistence.EntityManagerFactory;
1:314564e: 
1:314564e: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:314564e: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1:314564e: 
1:314564e: /**
1:e55f0fd:  * A factory for creating JPAEntityManagerProvider instances
1:314564e:  * <p>
1:e55f0fd:  * This factory can be used if the {@link JPAEntityManagerProvider} should not be
1:314564e:  * a public service, for example to protect a username/password.
1:314564e:  */
1:314564e: public interface JPAEntityManagerProviderFactory {
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to determine whether XA enlistment is enabled for this
1:314564e: 	 * resource provider
1:314564e: 	 */
1:314564e: 	public static final String	XA_ENLISTMENT_ENABLED		= "osgi.xa.enabled";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to determine whether local enlistment is enabled for
1:314564e: 	 * this resource provider
1:314564e: 	 */
1:314564e: 	public static final String	LOCAL_ENLISTMENT_ENABLED	= "osgi.local.enabled";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to provide a {@link JDBCConnectionProvider} to the
1:314564e: 	 * resource provider. This will be converted into a DataSource by the
1:314564e: 	 * factory, and passed to the {@link EntityManagerFactoryBuilder} using the
1:314564e: 	 * javax.persistence.jtaDataSource property
1:314564e: 	 */
1:314564e: 	public static final String	TRANSACTIONAL_DB_CONNECTION	= "osgi.jdbc.provider";
1:4c0430e: 	
1:4c0430e: 	/**
1:4c0430e: 	 * The property used to indicate that database connections will be automatically
1:4c0430e: 	 * enlisted in ongoing transactions without intervention from the JPA provider
1:4c0430e: 	 */
1:4c0430e: 	public static final String  PRE_ENLISTED_DB_CONNECTION = "osgi.jdbc.enlisted";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Create a private {@link JPAEntityManagerProvider} using an
1:314564e: 	 * {@link EntityManagerFactoryBuilder}
1:314564e: 	 * 
1:b767d3b: 	 * @param emfb The {@link EntityManagerFactoryBuilder} to create JPA resources with
2:314564e: 	 * @param jpaProperties The properties to pass to the
1:314564e: 	 *            {@link EntityManagerFactoryBuilder} in order to create the
1:314564e: 	 *            underlying {@link EntityManagerFactory} and
2:314564e: 	 *            {@link EntityManager} instances
1:314564e: 	 * @param resourceProviderProperties Configuration properties to pass to the
1:314564e: 	 *            JPA Resource Provider runtime
1:314564e: 	 * @return A {@link JPAEntityManagerProvider} that can be used in
1:314564e: 	 *         transactions
1:314564e: 	 */
1:314564e: 	JPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb,
2:314564e: 			Map<String,Object> jpaProperties,
1:314564e: 			Map<String,Object> resourceProviderProperties);
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Create a private {@link JPAEntityManagerProvider} using an existing
1:314564e: 	 * {@link EntityManagerFactory}.
1:314564e: 	 * 
1:b767d3b: 	 * @param emf The {@link EntityManagerFactory} to use in the {@link JPAEntityManagerProvider}
1:314564e: 	 * @param resourceProviderProperties Configuration properties to pass to the
1:314564e: 	 *            JDBC Resource Provider runtime
1:314564e: 	 * @return A {@link JPAEntityManagerProvider} that can be used in
1:314564e: 	 *         transactions
1:314564e: 	 */
1:314564e: 	JPAEntityManagerProvider getProviderFor(EntityManagerFactory emf,
1:314564e: 			Map<String,Object> resourceProviderProperties);
1:314564e: 
1:314564e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:e55f0fd
/////////////////////////////////////////////////////////////////////////
1:  * A factory for creating JPAEntityManagerProvider instances
1:  * This factory can be used if the {@link JPAEntityManagerProvider} should not be
commit:b767d3b
/////////////////////////////////////////////////////////////////////////
1: 	 * @param emfb The {@link EntityManagerFactoryBuilder} to create JPA resources with
/////////////////////////////////////////////////////////////////////////
1: 	 * @param emf The {@link EntityManagerFactory} to use in the {@link JPAEntityManagerProvider}
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * The property used to indicate that database connections will be automatically
1: 	 * enlisted in ongoing transactions without intervention from the JPA provider
1: 	 */
1: 	public static final String  PRE_ENLISTED_DB_CONNECTION = "osgi.jdbc.enlisted";
/////////////////////////////////////////////////////////////////////////
commit:314564e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.transaction.control.jpa;
1: 
1: import java.util.Map;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: 
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1: 
1: /**
0:  * A factory for creating JDBCConnectionProvider instances
1:  * <p>
0:  * This factory can be used if the {@link JDBCConnectionProvider} should not be
1:  * a public service, for example to protect a username/password.
1:  */
1: public interface JPAEntityManagerProviderFactory {
1: 
1: 	/**
1: 	 * The property used to determine whether XA enlistment is enabled for this
1: 	 * resource provider
1: 	 */
1: 	public static final String	XA_ENLISTMENT_ENABLED		= "osgi.xa.enabled";
1: 
1: 	/**
1: 	 * The property used to determine whether local enlistment is enabled for
1: 	 * this resource provider
1: 	 */
1: 	public static final String	LOCAL_ENLISTMENT_ENABLED	= "osgi.local.enabled";
1: 
1: 	/**
1: 	 * The property used to provide a {@link JDBCConnectionProvider} to the
1: 	 * resource provider. This will be converted into a DataSource by the
1: 	 * factory, and passed to the {@link EntityManagerFactoryBuilder} using the
1: 	 * javax.persistence.jtaDataSource property
1: 	 */
1: 	public static final String	TRANSACTIONAL_DB_CONNECTION	= "osgi.jdbc.provider";
1: 
1: 	/**
1: 	 * Create a private {@link JPAEntityManagerProvider} using an
1: 	 * {@link EntityManagerFactoryBuilder}
1: 	 * 
0: 	 * @param emfb
1: 	 * @param jpaProperties The properties to pass to the
1: 	 *            {@link EntityManagerFactoryBuilder} in order to create the
1: 	 *            underlying {@link EntityManagerFactory} and
1: 	 *            {@link EntityManager} instances
1: 	 * @param resourceProviderProperties Configuration properties to pass to the
1: 	 *            JPA Resource Provider runtime
1: 	 * @return A {@link JPAEntityManagerProvider} that can be used in
1: 	 *         transactions
1: 	 */
1: 	JPAEntityManagerProvider getProviderFor(EntityManagerFactoryBuilder emfb,
1: 			Map<String,Object> jpaProperties,
1: 			Map<String,Object> resourceProviderProperties);
1: 
1: 	/**
1: 	 * Create a private {@link JPAEntityManagerProvider} using an existing
1: 	 * {@link EntityManagerFactory}.
1: 	 * 
0: 	 * @param emf
1: 	 * @param jpaProperties The properties to pass to the
0: 	 *            {@link EntityManagerFactory} in order to create the underlying
1: 	 *            {@link EntityManager} instances
1: 	 * @param resourceProviderProperties Configuration properties to pass to the
1: 	 *            JDBC Resource Provider runtime
1: 	 * @return A {@link JPAEntityManagerProvider} that can be used in
1: 	 *         transactions
1: 	 */
1: 	JPAEntityManagerProvider getProviderFor(EntityManagerFactory emf,
1: 			Map<String,Object> jpaProperties,
1: 			Map<String,Object> resourceProviderProperties);
1: 
1: }
============================================================================