1:46cfc09: /**
1:46cfc09:  * Licensed to the Apache Software Foundation (ASF) under one
1:46cfc09:  * or more contributor license agreements.  See the NOTICE file
1:46cfc09:  * distributed with this work for additional information
1:46cfc09:  * regarding copyright ownership.  The ASF licenses this file
1:46cfc09:  * to you under the Apache License, Version 2.0 (the
1:46cfc09:  * "License"); you may not use this file except in compliance
1:46cfc09:  * with the License.  You may obtain a copy of the License at
1:d22e134:  * <p/>
1:218954f:  * http://www.apache.org/licenses/LICENSE-2.0
1:d22e134:  * <p/>
1:46cfc09:  * Unless required by applicable law or agreed to in writing,
1:46cfc09:  * software distributed under the License is distributed on an
1:46cfc09:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:46cfc09:  * KIND, either express or implied.  See the License for the
1:46cfc09:  * specific language governing permissions and limitations
1:46cfc09:  * under the License.
1:46cfc09:  */
1:46cfc09: package org.apache.aries.blueprint.plugin;
1:fff2e99: 
1:218954f: import com.google.common.collect.Sets;
1:46cfc09: import org.apache.aries.blueprint.plugin.model.Context;
1:fff2e99: import org.apache.aries.blueprint.plugin.model.TransactionalDef;
1:46cfc09: import org.apache.aries.blueprint.plugin.test.MyBean1;
1:ac69b8b: import org.apache.aries.blueprint.plugin.test.MyProduced;
1:7782f21: import org.apache.aries.blueprint.plugin.test.ServiceA;
1:7782f21: import org.apache.aries.blueprint.plugin.test.ServiceB;
1:66fc490: import org.apache.commons.io.output.ByteArrayOutputStream;
1:46cfc09: import org.apache.xbean.finder.ClassFinder;
1:218954f: import org.junit.BeforeClass;
1:46cfc09: import org.junit.Test;
1:66fc490: import org.w3c.dom.Document;
1:66fc490: import org.w3c.dom.Node;
1:fff2e99: import org.w3c.dom.NodeList;
1:66fc490: import org.xml.sax.SAXException;
1:7782f21: 
1:218954f: import javax.xml.parsers.DocumentBuilder;
1:218954f: import javax.xml.parsers.DocumentBuilderFactory;
1:218954f: import javax.xml.parsers.ParserConfigurationException;
1:218954f: import javax.xml.xpath.XPath;
1:218954f: import javax.xml.xpath.XPathConstants;
1:218954f: import javax.xml.xpath.XPathExpressionException;
1:218954f: import javax.xml.xpath.XPathFactory;
1:218954f: import java.io.ByteArrayInputStream;
1:218954f: import java.io.IOException;
1:218954f: import java.io.InputStream;
1:218954f: import java.util.Arrays;
1:218954f: import java.util.Collections;
1:aaf182f: import java.util.HashMap;
1:218954f: import java.util.HashSet;
1:aaf182f: import java.util.Map;
1:218954f: import java.util.Set;
1:218954f: 
1:218954f: import static org.apache.aries.blueprint.plugin.FilteredClassFinder.findClasses;
1:218954f: import static org.junit.Assert.assertEquals;
1:7782f21: 
1:46cfc09: public class GeneratorTest {
1:7782f21: 
1:a680609:     private static final String NS_JPA = "http://aries.apache.org/xmlns/jpa/v1.1.0";
1:a680609:     private static final String NS_TX1 = "http://aries.apache.org/xmlns/transactions/v1.2.0";
1:fff2e99: 
1:218954f:     private static XPath xpath;
1:218954f:     private static Document document;
1:66fc490: 
1:218954f:     @BeforeClass
1:218954f:     public static void setUp() throws Exception {
1:218954f:         ClassFinder classFinder = new ClassFinder(GeneratorTest.class.getClassLoader());
1:46cfc09:         String packageName = MyBean1.class.getPackage().getName();
1:218954f:         Set<Class<?>> beanClasses = findClasses(classFinder, Collections.singletonList(packageName));
1:a680609:         Set<String> namespaces = new HashSet<String>(Arrays.asList(NS_JPA, NS_TX1));
1:aaf182f:         Map<String,String> customParameters = new HashMap<>();
1:aaf182f:         customParameters.put("ex.t", "1");
1:aaf182f:         customParameters.put("example.p1", "v1");
1:aaf182f:         customParameters.put("example.p2", "v2");
1:aaf182f:         BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null, customParameters);
1:0d2c0ec:         Context context = new Context(blueprintConfiguration, beanClasses);
1:46cfc09:         context.resolve();
1:66fc490:         ByteArrayOutputStream os = new ByteArrayOutputStream();
1:0d2c0ec:         new Generator(context, os, blueprintConfiguration).generate();
1:66fc490:         System.out.println(os.toString("UTF-8"));
1:66fc490: 
1:66fc490:         document = readToDocument(os);
1:66fc490:         xpath = XPathFactory.newInstance().newXPath();
1:218954f:     }
1:66fc490: 
1:5ab57d7:     @Test
1:218954f:     public void testGenerateBeanWithInitDestroyAndfieldInjection() throws Exception {
1:218954f:         Node bean1 = getBeanById("myBean1");
1:218954f: 
1:4f3e047:         assertXpathEquals(bean1, "@class", MyBean1.class.getName());
1:4f3e047:         assertXpathEquals(bean1, "@init-method", "init");
1:4f3e047:         assertXpathEquals(bean1, "@destroy-method", "destroy");
1:4f3e047:         assertXpathEquals(bean1, "@field-injection", "true");
1:4f3e047:         assertXpathDoesNotExist(bean1, "@scope");
1:218954f:     }
1:66fc490: 
1:59217b2:     @Test
1:218954f:     public void testGenerateTransactional() throws Exception {
1:218954f:         Node bean1 = getBeanById("myBean1");
1:218954f: 
1:fff2e99:         NodeList txs = (NodeList) xpath.evaluate("transaction", bean1, XPathConstants.NODESET);
1:fff2e99:         Set<TransactionalDef> defs = new HashSet<TransactionalDef>();
1:fff2e99:         for (int i = 0; i < txs.getLength(); ++i) {
1:fff2e99:             Node tx = txs.item(i);
1:fff2e99:             defs.add(new TransactionalDef(xpath.evaluate("@method", tx), xpath.evaluate("@value", tx)));
1:fff2e99:         }
1:fff2e99:         Set<TransactionalDef> expectedDefs = Sets.newHashSet(new TransactionalDef("*", "RequiresNew"),
1:218954f:             new TransactionalDef("txNotSupported", "NotSupported"),
1:218954f:             new TransactionalDef("txMandatory", "Mandatory"),
1:218954f:             new TransactionalDef("txNever", "Never"),
1:218954f:             new TransactionalDef("txRequired", "Required"),
1:218954f:             new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
1:218954f:             new TransactionalDef("txSupports", "Supports"));
1:218954f:         assertEquals(expectedDefs, defs);
1:218954f:     }
1:fff2e99: 
1:218954f:     @Test
1:3e3b598:     public void testGenerateCDITransactional() throws Exception {
1:3e3b598:         Node bean1 = getBeanById("cdiTransactionalAnnotatedBean");
1:fff2e99: 
1:3e3b598:         NodeList txs = (NodeList) xpath.evaluate("transaction", bean1, XPathConstants.NODESET);
1:3e3b598:         Set<TransactionalDef> defs = new HashSet<TransactionalDef>();
1:3e3b598:         for (int i = 0; i < txs.getLength(); ++i) {
1:3e3b598:             Node tx = txs.item(i);
1:3e3b598:             defs.add(new TransactionalDef(xpath.evaluate("@method", tx), xpath.evaluate("@value", tx)));
1:46cfc09:         }
1:3e3b598:         Set<TransactionalDef> expectedDefs = Sets.newHashSet(new TransactionalDef("*", "RequiresNew"),
1:fff2e99:             new TransactionalDef("txNotSupported", "NotSupported"),
1:fff2e99:             new TransactionalDef("txMandatory", "Mandatory"),
1:fff2e99:             new TransactionalDef("txNever", "Never"),
1:fff2e99:             new TransactionalDef("txRequired", "Required"),
1:fff2e99:             new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
1:fff2e99:             new TransactionalDef("txSupports", "Supports"));
1:3e3b598:         assertEquals(expectedDefs, defs);
1:46cfc09:     }
1:66fc490: 
1:218954f:     @Test
1:218954f:     public void testGeneratePersistenceContext() throws Exception {
1:218954f:         Node bean1 = getBeanById("myBean1");
1:66fc490: 
1:4f3e047:         assertXpathEquals(bean1, "context/@unitname", "person");
1:4f3e047:         assertXpathEquals(bean1, "context/@property", "em");
1:218954f:     }
1:66fc490: 
1:218954f:     @Test
1:218954f:     public void testGeneratePersistenceUnit() throws Exception {
1:218954f:         Node bean1 = getBeanById("myBean1");
1:66fc490: 
1:4f3e047:         assertXpathEquals(bean1, "unit/@unitname", "person");
1:4f3e047:         assertXpathEquals(bean1, "unit/@property", "emf");
1:218954f:     }
1:66fc490: 
1:218954f:     @Test
1:218954f:     public void testGenerateAutowiredBean() throws Exception {
1:218954f:         Node bean1 = getBeanById("myBean1");
1:218954f: 
1:4f3e047:         assertXpathEquals(bean1, "property[@name='bean2']/@ref", "my1");
1:218954f:     }
1:66fc490: 
1:218954f:     @Test
1:218954f:     public void testGenerateServiceWithOneInterface() throws Exception {
1:218954f:         Node serviceAImpl2 = getServiceByRef("my2");
1:4f3e047:         assertXpathEquals(serviceAImpl2, "@interface", ServiceA.class.getName());
1:4f3e047:         assertXpathDoesNotExist(serviceAImpl2, "@auto-export");
1:4f3e047:         assertXpathDoesNotExist(serviceAImpl2, "interfaces");
1:218954f:     }
1:218954f: 
1:218954f:     @Test
1:218954f:     public void testGenerateServiceWithAutoExport() throws Exception {
1:218954f:         Node serviceAImpl3 = getServiceByRef("serviceAImpl3");
1:4f3e047:         assertXpathDoesNotExist(serviceAImpl3, "@interface");
1:4f3e047:         assertXpathEquals(serviceAImpl3, "@auto-export", "interfaces");
1:4f3e047:         assertXpathDoesNotExist(serviceAImpl3, "interfaces");
1:218954f:     }
1:218954f: 
1:218954f:     @Test
1:218954f:     public void testGenerateServiceWith2Interfaces() throws Exception {
1:218954f:         Node serviceABImpl = getServiceByRef("serviceABImpl");
1:66fc490: 
1:4f3e047:         assertXpathDoesNotExist(serviceABImpl, "@interface");
1:4f3e047:         assertXpathDoesNotExist(serviceABImpl, "@auto-export");
1:66fc490: 
1:7782f21:         NodeList interfaceValues = (NodeList) xpath.evaluate("interfaces/value", serviceABImpl, XPathConstants.NODESET);
1:7782f21:         Set<String> interfaceNames = new HashSet<String>();
1:7782f21:         for (int i = 0; i < interfaceValues.getLength(); ++i) {
1:7782f21:             Node interfaceValue = interfaceValues.item(i);
1:7782f21:             interfaceNames.add(interfaceValue.getTextContent());
1:7782f21:         }
1:218954f:         assertEquals(Sets.newHashSet(ServiceA.class.getName(), ServiceB.class.getName()),
1:218954f:             interfaceNames);
1:3e3b598:     }
1:46cfc09: 
1:218954f:     @Test
1:218954f:     public void testGenerateBeanWithConstructorInjection() throws Exception {
1:218954f:         // Bean with constructor injection
1:218954f:         Node myBean5 = getBeanById("myBean5");
1:9632b7d:         assertXpathDoesNotExist(myBean5, "@field-injection");
1:4f3e047:         assertXpathEquals(myBean5, "argument[1]/@ref", "my2");
1:4f3e047:         assertXpathEquals(myBean5, "argument[2]/@ref", "my1");
1:4f3e047:         assertXpathEquals(myBean5, "argument[3]/@ref", "serviceABImpl");
1:4f3e047:         assertXpathEquals(myBean5, "argument[4]/@value", "100");
1:4f3e047:         assertXpathEquals(myBean5, "argument[5]/@ref", "ser1");
1:4f3e047:         assertXpathEquals(myBean5, "argument[6]/@ref", "ser2");
1:4f3e047:         assertXpathEquals(myBean5, "argument[7]/@ref", "serviceAImplQualified");
1:218954f:     }
1:218954f: 
1:218954f:     @Test
1:aeab80c:     public void testGenerateBeanWithConstructorInjectionWithoutInjectAnnotation() throws Exception {
1:aeab80c:         // Bean with constructor injection
1:aeab80c:         Node myBean6 = getBeanById("myBean6");
1:4f3e047:         assertXpathEquals(myBean6, "argument[1]/@ref", "my2");
1:aeab80c:     }
1:aeab80c: 
1:aeab80c:     @Test
1:218954f:     public void testGenerateReferenceWithComponentName() throws Exception {
1:218954f:         Node ser1 = getReferenceById("ser1");
1:4f3e047:         assertXpathEquals(ser1, "@component-name", "myRef");
1:4f3e047:         assertXpathDoesNotExist(ser1, "@filter");
1:218954f:     }
1:218954f: 
1:218954f:     @Test
1:218954f:     public void testGenerateReferenceWithFilter() throws Exception {
1:218954f:         Node ser2 = getReferenceById("ser2");
1:4f3e047:         assertXpathDoesNotExist(ser2, "@component-name");
1:4f3e047:         assertXpathEquals(ser2, "@filter", "(mode=123)");
1:218954f:     }
1:218954f: 
1:218954f:     @Test
1:59217b2:     public void testProducesNamedBeans() throws Exception {
1:59217b2:         Node bean1 = getBeanById("produced1");
1:4f3e047:         assertXpathEquals(bean1, "@class", "org.apache.aries.blueprint.plugin.test.MyProduced");
1:4f3e047:         assertXpathEquals(bean1, "@factory-ref", "myFactoryNamedBean");
1:4f3e047:         assertXpathEquals(bean1, "@factory-method", "createBean1");
1:4f3e047:         assertXpathEquals(bean1, "@scope", "prototype");
1:59217b2: 
1:59217b2:         Node bean2 = getBeanById("produced2");
1:4f3e047:         assertXpathEquals(bean1, "@class", "org.apache.aries.blueprint.plugin.test.MyProduced");
1:4f3e047:         assertXpathEquals(bean2, "@factory-ref", "myFactoryNamedBean");
1:4f3e047:         assertXpathEquals(bean2, "@factory-method", "createBean2");
1:4f3e047:         assertXpathDoesNotExist(bean2, "@scope");
1:59217b2: 
1:59217b2:         Node myBean5 = getBeanById("myBean5");
1:4f3e047:         assertXpathEquals(myBean5, "argument[8]/@ref", "produced2");
1:59217b2:     }
1:59217b2: 
1:46cfc09:     @Test
1:5ab57d7:     public void testProducesBeanUsingParametersNotConstructor() throws Exception {
1:5ab57d7:         Node bean1 = getBeanById("myProducedWithConstructor");
1:4f3e047:         assertXpathEquals(bean1, "@class", "org.apache.aries.blueprint.plugin.test.MyProducedWithConstructor");
1:4f3e047:         assertXpathEquals(bean1, "@factory-ref", "myFactoryBean");
1:4f3e047:         assertXpathEquals(bean1, "@factory-method", "createBeanWithParameters");
1:4f3e047:         assertXpathEquals(bean1, "argument[1]/@ref", "myBean1");
1:4f3e047:         assertXpathEquals(bean1, "argument[2]/@value", "100");
1:4f3e047:         assertXpathEquals(bean1, "argument[3]/@ref", "ser1");
1:5ab57d7:     }
1:5ab57d7: 
1:3e3b598:     @Test
1:ac69b8b:     public void testExposeProducedBeanAsServiceWithAutoExport() throws Exception {
1:ac69b8b:         Node service = getServiceByRef("producedForService");
1:4f3e047:         assertXpathEquals(service, "@auto-export", "interfaces");
1:4f3e047:         assertXpathDoesNotExist(service, "@interface");
1:4f3e047:         assertXpathDoesNotExist(service, "interfaces");
1:4f3e047:         assertXpathDoesNotExist(service, "service-properties");
1:3e3b598:     }
1:46cfc09: 
1:7583a4c:     @Test
1:ac69b8b:     public void testExposeProducedBeanAsServiceWithOneInterface() throws Exception {
1:ac69b8b:         Node service = getServiceByRef("producedForServiceWithOneInterface");
1:4f3e047:         assertXpathDoesNotExist(service, "@auto-export");
1:4f3e047:         assertXpathEquals(service, "@interface", MyProduced.class.getName());
1:4f3e047:         assertXpathDoesNotExist(service, "interfaces");
1:4f3e047:         assertXpathDoesNotExist(service, "service-properties");
1:ac69b8b:     }
1:46cfc09: 
1:d22e134:     @Test
1:ac69b8b:     public void testExposeProducedBeanAsServiceWithTwoInterfaces() throws Exception {
1:ac69b8b:         Node service = getServiceByRef("producedForServiceWithTwoInterfaces");
1:4f3e047:         assertXpathDoesNotExist(service, "@auto-export");
1:4f3e047:         assertXpathDoesNotExist(service, "@interface");
1:4f3e047:         assertXpathEquals(service, "count(interfaces/value)", "2");
1:4f3e047:         assertXpathEquals(service, "interfaces/value[1]", MyProduced.class.getName());
1:4f3e047:         assertXpathEquals(service, "interfaces/value[2]", ServiceA.class.getName());
1:4f3e047:         assertXpathDoesNotExist(service, "service-properties");
1:ac69b8b:     }
1:46cfc09: 
2:ac69b8b:     @Test
1:ac69b8b:     public void testExposeProducedBeanAsServiceWithServiceProperties() throws Exception {
1:ac69b8b:         Node service = getServiceByRef("producedForServiceWithProperties");
1:4f3e047:         assertXpathEquals(service, "@auto-export", "interfaces");
1:4f3e047:         assertXpathDoesNotExist(service, "@interface");
1:4f3e047:         assertXpathDoesNotExist(service, "interfaces");
1:4f3e047:         assertXpathEquals(service, "count(service-properties/entry)", "2");
1:4f3e047:         assertXpathEquals(service, "service-properties/entry[@key='n1']/@value", "v1");
1:4f3e047:         assertXpathEquals(service, "service-properties/entry[@key='n2']/@value", "v2");
1:ac69b8b:     }
1:46cfc09: 
1:ac69b8b:     @Test
1:d22e134:     public void testSetterInjection() throws Exception {
1:d22e134:         Node bean1 = getBeanById("beanWithSetters");
1:9632b7d:         assertXpathDoesNotExist(bean1, "@field-injection");
1:46cfc09: 
1:4f3e047:         assertXpathDoesNotExist(bean1, "property[@name='useless']");
1:4f3e047:         assertXpathDoesNotExist(bean1, "property[@name='iOnlyHaveSetPrefix']");
1:4f3e047:         assertXpathDoesNotExist(bean1, "property[@name='ihaveMoreThenOneParameter']");
1:4f3e047:         assertXpathDoesNotExist(bean1, "property[@name='iOnlyHaveSetPrefixValue']");
1:4f3e047:         assertXpathDoesNotExist(bean1, "property[@name='ihaveMoreThenOneParameterValue']");
1:3e3b598: 
1:4f3e047:         assertXpathEquals(bean1, "property[@name='myValue']/@value", "test");
1:4f3e047:         assertXpathEquals(bean1, "property[@name='serviceA1']/@ref", "my1");
1:868c96f:         assertXpathEquals(bean1, "property[@name='serviceA2']/@ref", "my2");
1:4f3e047:         assertXpathEquals(bean1, "property[@name='serviceB']/@ref", "serviceABImpl");
1:4f3e047:         assertXpathEquals(bean1, "property[@name='serviceB2']/@ref", "serviceB2Id");
1:4f3e047:         assertXpathEquals(bean1, "property[@name='serviceBRef']/@ref", "serviceB-typeB1Ref");
1:4f3e047:         assertXpathEquals(bean1, "property[@name='serviceB2Ref']/@ref", "serviceB2IdRef");
1:4f3e047:         assertXpathEquals(bean1, "property[@name='serviceB3Ref']/@ref", "serviceB-B3Ref");
1:3e3b598: 
1:d22e134:         Node reference1 = getReferenceById("serviceB-typeB1Ref");
1:4f3e047:         assertXpathEquals(reference1, "@interface", ServiceB.class.getName());
1:4f3e047:         assertXpathEquals(reference1, "@filter", "(type=B1Ref)");
1:a680609: 
1:d22e134:         Node reference2 = getReferenceById("serviceB2IdRef");
1:4f3e047:         assertXpathEquals(reference2, "@interface", ServiceB.class.getName());
1:4f3e047:         assertXpathEquals(reference2, "@filter", "(type=B2Ref)");
1:4f3e047: 
1:d22e134:         Node reference3 = getReferenceById("serviceB-B3Ref");
1:4f3e047:         assertXpathEquals(reference3, "@interface", ServiceB.class.getName());
1:4f3e047:         assertXpathEquals(reference3, "@component-name", "B3Ref");
1:4f3e047:     }
1:4f3e047: 
1:7583a4c:     @Test
1:7583a4c:     public void testLazyWithTrueBeanHasActivationEager() throws Exception {
1:7583a4c:         Node bean = getBeanById("beanWithSetters");
1:7583a4c: 
1:7583a4c:         assertXpathEquals(bean, "@activation", "eager");
1:7583a4c:     }
1:7583a4c: 
1:0eb5481:     @Test
1:7583a4c:     public void testLazyBeanHasActivationLazy() throws Exception {
1:7583a4c:         Node bean = getBeanById("myBean1");
1:7583a4c: 
1:7583a4c:         assertXpathEquals(bean, "@activation", "lazy");
1:7583a4c:     }
1:7583a4c: 
1:7583a4c:     @Test
1:7583a4c:     public void testBeanWithoutLazyAnnotationHasNotActivationAttribute() throws Exception {
1:7583a4c:         Node bean1 = getBeanById("myBean3");
1:7583a4c: 
1:7583a4c:         assertXpathDoesNotExist(bean1, "@activation");
1:7583a4c:     }
1:7583a4c: 
1:7583a4c:     @Test
1:7583a4c:     public void testLazyProducedBeanOverriddenByFactoryMethodAnnotation() throws Exception {
1:7583a4c:         Node bean = getBeanById("producedEager");
1:7583a4c: 
1:7583a4c:         assertXpathEquals(bean, "@activation", "eager");
1:7583a4c:     }
1:7583a4c: 
1:ac69b8b:     @Test
1:0eb5481:     public void testBeanWithoutDependsOnHasNotDependsOnAttribute() throws Exception {
1:0eb5481:         Node bean = getBeanById("beanWithSetters");
1:0eb5481: 
1:0eb5481:         assertXpathDoesNotExist(bean, "@depends-on");
1:0eb5481:     }
1:0eb5481: 
1:0eb5481:     @Test
1:0eb5481:     public void testBeanWithEmptyDependsOnHasNotDependsOnAttribute() throws Exception {
1:0eb5481:         Node bean = getBeanById("myBean6");
1:0eb5481: 
1:0eb5481:         assertXpathDoesNotExist(bean, "@depends-on");
1:0eb5481:     }
1:0eb5481: 
1:0eb5481:     @Test
1:0eb5481:     public void testBeanWithOneIdInDependsOnHasDependsOnAttribute() throws Exception {
1:0eb5481:         Node bean = getBeanById("myBean5");
1:0eb5481: 
1:0eb5481:         assertXpathEquals(bean, "@depends-on", "myBean6");
1:0eb5481:     }
1:0eb5481: 
1:0eb5481:     @Test
1:0eb5481:     public void testBeanWithTwoIdInDependsOnHasDependsOnAttribute() throws Exception {
1:0eb5481:         Node bean = getBeanById("myBean4");
1:0eb5481: 
1:0eb5481:         assertXpathEquals(bean, "@depends-on", "myBean5 myBean6");
1:0eb5481:     }
1:0eb5481: 
1:0eb5481:     @Test
1:0eb5481:     public void testProducedBeanMetohodWithoutDependsOnHasNotDependsOnAttribute() throws Exception {
1:0eb5481:         Node bean = getBeanById("produced1");
1:0eb5481: 
1:0eb5481:         assertXpathDoesNotExist(bean, "@depends-on");
1:0eb5481:     }
1:0eb5481: 
1:0eb5481:     @Test
1:0eb5481:     public void testProducedBeanMethodWithDependsOnHasDependsOnAttribute() throws Exception {
1:0eb5481:         Node bean = getBeanById("produced2");
1:0eb5481: 
1:0eb5481:         assertXpathEquals(bean, "@depends-on", "produced1");
1:0eb5481:     }
1:0eb5481: 
1:aaf182f:     @Test
1:aaf182f:     public void testInitContextHandler() throws Exception {
1:aaf182f:         Node example1 = (Node) xpath.evaluate("/blueprint/example[@id='p1']", document, XPathConstants.NODE);
1:aaf182f:         Node example2 = (Node) xpath.evaluate("/blueprint/example[@id='p2']", document, XPathConstants.NODE);
1:aaf182f: 
1:aaf182f:         assertXpathEquals(example1, "@value", "v1");
1:aaf182f:         assertXpathEquals(example2, "@value", "v2");
1:aaf182f:     }
1:aaf182f: 
1:4f3e047:     private void assertXpathDoesNotExist(Node node, String xpathExpression) throws XPathExpressionException {
1:4f3e047:         assertXpathEquals(node, "count(" + xpathExpression + ")", "0");
1:4f3e047:     }
1:4f3e047: 
1:4f3e047:     private void assertXpathEquals(Node node, String xpathExpression, String expected) throws XPathExpressionException {
1:4f3e047:         assertEquals(expected, xpath.evaluate(xpathExpression, node));
1:d22e134:     }
6:d22e134: 
1:218954f:     private static Document readToDocument(ByteArrayOutputStream os) throws ParserConfigurationException,
1:218954f:         SAXException, IOException {
1:66fc490:         InputStream is = new ByteArrayInputStream(os.toByteArray());
1:66fc490:         DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
1:66fc490:         DocumentBuilder builder = builderFactory.newDocumentBuilder();
1:66fc490:         return builder.parse(is);
1:66fc490:     }
1:66fc490: 
1:218954f:     private static Node getBeanById(String id) throws XPathExpressionException {
1:218954f:         return (Node) xpath.evaluate("/blueprint/bean[@id='" + id + "']", document, XPathConstants.NODE);
1:218954f:     }
1:218954f: 
1:218954f:     private static Node getServiceByRef(String id) throws XPathExpressionException {
1:218954f:         return (Node) xpath.evaluate("/blueprint/service[@ref='" + id + "']", document, XPathConstants.NODE);
1:218954f:     }
1:218954f: 
1:218954f:     private static Node getReferenceById(String id) throws XPathExpressionException {
1:218954f:         return (Node) xpath.evaluate("/blueprint/reference[@id='" + id + "']", document, XPathConstants.NODE);
1:218954f:     }
1:218954f: 
1:ac69b8b: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:5ab57d7
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testProducesBeanUsingParametersNotConstructor() throws Exception {
1:         Node bean1 = getBeanById("myProducedWithConstructor");
0:         assertEquals("org.apache.aries.blueprint.plugin.test.MyProducedWithConstructor", xpath.evaluate("@class", bean1));
0:         assertEquals("myFactoryBean", xpath.evaluate("@factory-ref", bean1));
0:         assertEquals("createBeanWithParameters", xpath.evaluate("@factory-method", bean1));
0:         assertEquals("myBean1", xpath.evaluate("argument[1]/@ref", bean1));
0:         assertEquals("100", xpath.evaluate("argument[2]/@value", bean1));
0:         assertEquals("ser1", xpath.evaluate("argument[3]/@ref", bean1));
1:     }
1: 
commit:aeab80c
/////////////////////////////////////////////////////////////////////////
1:     public void testGenerateBeanWithConstructorInjectionWithoutInjectAnnotation() throws Exception {
1:         // Bean with constructor injection
1:         Node myBean6 = getBeanById("myBean6");
0:         assertEquals("my2", xpath.evaluate("argument[1]/@ref", myBean6));
1:     }
1: 
1:     @Test
commit:59217b2
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testProducesNamedBeans() throws Exception {
1:         Node bean1 = getBeanById("produced1");
0:         assertEquals("org.apache.aries.blueprint.plugin.test.MyProduced", xpath.evaluate("@class", bean1));
0:         assertEquals("myFactoryNamedBean", xpath.evaluate("@factory-ref", bean1));
0:         assertEquals("createBean1", xpath.evaluate("@factory-method", bean1));
0:         assertEquals("prototype", xpath.evaluate("@scope", bean1));
1: 
1:         Node bean2 = getBeanById("produced2");
0:         assertEquals("org.apache.aries.blueprint.plugin.test.MyProduced", xpath.evaluate("@class", bean1));
0:         assertEquals("myFactoryNamedBean", xpath.evaluate("@factory-ref", bean2));
0:         assertEquals("createBean2", xpath.evaluate("@factory-method", bean2));
0:         assertEquals("", xpath.evaluate("@scope", bean2));
1: 
1:         Node myBean5 = getBeanById("myBean5");
0:         assertEquals("produced2", xpath.evaluate("argument[8]/@ref", myBean5));
1:     }
1: 
commit:218954f
/////////////////////////////////////////////////////////////////////////
0:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * <p>
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Sets;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import javax.xml.parsers.DocumentBuilder;
1: import javax.xml.parsers.DocumentBuilderFactory;
1: import javax.xml.parsers.ParserConfigurationException;
1: import javax.xml.xpath.XPath;
1: import javax.xml.xpath.XPathConstants;
1: import javax.xml.xpath.XPathExpressionException;
1: import javax.xml.xpath.XPathFactory;
1: import java.io.ByteArrayInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import static org.apache.aries.blueprint.plugin.FilteredClassFinder.findClasses;
1: import static org.junit.Assert.assertEquals;
1:     private static XPath xpath;
1:     private static Document document;
1:     @BeforeClass
1:     public static void setUp() throws Exception {
1:         ClassFinder classFinder = new ClassFinder(GeneratorTest.class.getClassLoader());
1:         Set<Class<?>> beanClasses = findClasses(classFinder, Collections.singletonList(packageName));
/////////////////////////////////////////////////////////////////////////
1:     }
1:     @Test
1:     public void testGenerateBeanWithInitDestroyAndfieldInjection() throws Exception {
1:         Node bean1 = getBeanById("myBean1");
0:         assertEquals(MyBean1.class.getName(), xpath.evaluate("@class", bean1));
0:         assertEquals("init", xpath.evaluate("@init-method", bean1));
0:         assertEquals("destroy", xpath.evaluate("@destroy-method", bean1));
0:         assertEquals("true", xpath.evaluate("@field-injection", bean1));
0:         assertEquals("", xpath.evaluate("@scope", bean1));
1:     }
1: 
1:     @Test
1:     public void testGenerateTransactional() throws Exception {
1:         Node bean1 = getBeanById("myBean1");
1: 
/////////////////////////////////////////////////////////////////////////
1:                 new TransactionalDef("txNotSupported", "NotSupported"),
1:                 new TransactionalDef("txMandatory", "Mandatory"),
1:                 new TransactionalDef("txNever", "Never"),
1:                 new TransactionalDef("txRequired", "Required"),
1:                 new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
1:                 new TransactionalDef("txSupports", "Supports"));
1:         assertEquals(expectedDefs, defs);
1:     }
1:     @Test
1:     public void testGeneratePersistenceContext() throws Exception {
1:         Node bean1 = getBeanById("myBean1");
0:         assertEquals("person", xpath.evaluate("context/@unitname", bean1));
0:         assertEquals("em", xpath.evaluate("context/@property", bean1));
1:     }
1:     @Test
1:     public void testGeneratePersistenceUnit() throws Exception {
1:         Node bean1 = getBeanById("myBean1");
0:         assertEquals("person", xpath.evaluate("unit/@unitname", bean1));
0:         assertEquals("emf", xpath.evaluate("unit/@property", bean1));
1:     }
1:     @Test
1:     public void testGenerateAutowiredBean() throws Exception {
1:         Node bean1 = getBeanById("myBean1");
0:         assertEquals("my1", xpath.evaluate("property[@name='bean2']/@ref", bean1));
1:     }
1: 
1:     @Test
1:     public void testGenerateServiceWithOneInterface() throws Exception {
1:         Node serviceAImpl2 = getServiceByRef("my2");
0:         assertEquals(ServiceA.class.getName(), xpath.evaluate("@interface", serviceAImpl2));
0:         assertEquals("", xpath.evaluate("@auto-export", serviceAImpl2));
0:         assertEquals("", xpath.evaluate("interfaces", serviceAImpl2));
1:     }
1: 
1:     @Test
1:     public void testGenerateServiceWithAutoExport() throws Exception {
1:         Node serviceAImpl3 = getServiceByRef("serviceAImpl3");
0:         assertEquals("", xpath.evaluate("@interface", serviceAImpl3));
0:         assertEquals("interfaces", xpath.evaluate("@auto-export", serviceAImpl3));
0:         assertEquals("", xpath.evaluate("interfaces", serviceAImpl3));
1:     }
1: 
1:     @Test
1:     public void testGenerateServiceWith2Interfaces() throws Exception {
1:         Node serviceABImpl = getServiceByRef("serviceABImpl");
0:         assertEquals("", xpath.evaluate("@interface", serviceABImpl));
0:         assertEquals("", xpath.evaluate("@auto-export", serviceABImpl));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(Sets.newHashSet(ServiceA.class.getName(), ServiceB.class.getName()),
1:                 interfaceNames);
1:     @Test
1:     public void testGenerateBeanWithConstructorInjection() throws Exception {
1:         // Bean with constructor injection
1:         Node myBean5 = getBeanById("myBean5");
0:         assertEquals("my2", xpath.evaluate("argument[1]/@ref", myBean5));
0:         assertEquals("my1", xpath.evaluate("argument[2]/@ref", myBean5));
0:         assertEquals("serviceABImpl", xpath.evaluate("argument[3]/@ref", myBean5));
0:         assertEquals("100", xpath.evaluate("argument[4]/@value", myBean5));
0:         assertEquals("ser1", xpath.evaluate("argument[5]/@ref", myBean5));
0:         assertEquals("ser2", xpath.evaluate("argument[6]/@ref", myBean5));
0:         assertEquals("serviceAImplQualified", xpath.evaluate("argument[7]/@ref", myBean5));
1:     }
1: 
1:     @Test
1:     public void testGenerateReferenceWithComponentName() throws Exception {
1:         Node ser1 = getReferenceById("ser1");
0:         assertEquals("myRef", xpath.evaluate("@component-name", ser1));
0:         assertEquals("", xpath.evaluate("@filter", ser1));
1:     }
1: 
1:     @Test
1:     public void testGenerateReferenceWithFilter() throws Exception {
1:         Node ser2 = getReferenceById("ser2");
0:         assertEquals("", xpath.evaluate("@component-name", ser2));
0:         assertEquals("(mode=123)", xpath.evaluate("@filter", ser2));
1:     }
1: 
1:     private static Document readToDocument(ByteArrayOutputStream os) throws ParserConfigurationException,
1:             SAXException, IOException {
1:     private static Node getBeanById(String id) throws XPathExpressionException {
1:         return (Node) xpath.evaluate("/blueprint/bean[@id='" + id + "']", document, XPathConstants.NODE);
1:     }
1: 
1:     private static Node getServiceByRef(String id) throws XPathExpressionException {
1:         return (Node) xpath.evaluate("/blueprint/service[@ref='" + id + "']", document, XPathConstants.NODE);
1:     }
1: 
1:     private static Node getReferenceById(String id) throws XPathExpressionException {
1:         return (Node) xpath.evaluate("/blueprint/reference[@id='" + id + "']", document, XPathConstants.NODE);
1:     }
1: 
commit:7782f21
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.test.ServiceA;
1: import org.apache.aries.blueprint.plugin.test.ServiceB;
/////////////////////////////////////////////////////////////////////////
0:         // Service with 1 interface
0:         Node serviceAImpl2 = (Node) xpath.evaluate("/blueprint/service[@ref='my2']", document, XPathConstants.NODE);
0:         Assert.assertEquals(ServiceA.class.getName(), xpath.evaluate("@interface", serviceAImpl2));
0:         Assert.assertEquals("", xpath.evaluate("@auto-export", serviceAImpl2));
0:         Assert.assertEquals("", xpath.evaluate("interfaces", serviceAImpl2));
1: 
0:         // Service with 0 interfaces (using auto-export=interfaces instead)
0:         Node serviceAImpl3 = (Node) xpath.evaluate("/blueprint/service[@ref='serviceAImpl3']", document, XPathConstants.NODE);
0:         Assert.assertEquals("", xpath.evaluate("@interface", serviceAImpl3));
0:         Assert.assertEquals("interfaces", xpath.evaluate("@auto-export", serviceAImpl3));
0:         Assert.assertEquals("", xpath.evaluate("interfaces", serviceAImpl3));
1: 
0:         // Service with 2 interfaces (using <interfaces><value>ServiceA</value><value>ServiceB</value></interfaces>
0:         Node serviceABImpl = (Node) xpath.evaluate("/blueprint/service[@ref='serviceABImpl']", document, XPathConstants.NODE);
0:         Assert.assertEquals("", xpath.evaluate("@interface", serviceABImpl));
0:         Assert.assertEquals("", xpath.evaluate("@auto-export", serviceABImpl));
1: 
1:         NodeList interfaceValues = (NodeList) xpath.evaluate("interfaces/value", serviceABImpl, XPathConstants.NODESET);
1:         Set<String> interfaceNames = new HashSet<String>();
1:         for (int i = 0; i < interfaceValues.getLength(); ++i) {
1:             Node interfaceValue = interfaceValues.item(i);
1:             interfaceNames.add(interfaceValue.getTextContent());
1:         }
0:         Assert.assertEquals(Sets.newHashSet(ServiceA.class.getName(), ServiceB.class.getName()),
0:                             interfaceNames);
commit:fff2e99
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.model.TransactionalDef;
/////////////////////////////////////////////////////////////////////////
1: import org.w3c.dom.NodeList;
0: import com.google.common.collect.Sets;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         NodeList txs = (NodeList) xpath.evaluate("transaction", bean1, XPathConstants.NODESET);
1:         Set<TransactionalDef> defs = new HashSet<TransactionalDef>();
1:         for (int i = 0; i < txs.getLength(); ++i) {
1:             Node tx = txs.item(i);
1:             defs.add(new TransactionalDef(xpath.evaluate("@method", tx), xpath.evaluate("@value", tx)));
1:         }
1:         Set<TransactionalDef> expectedDefs = Sets.newHashSet(new TransactionalDef("*", "RequiresNew"),
1:                                                              new TransactionalDef("txNotSupported", "NotSupported"),
1:                                                              new TransactionalDef("txMandatory", "Mandatory"),
1:                                                              new TransactionalDef("txNever", "Never"),
1:                                                              new TransactionalDef("txRequired", "Required"),
1:                                                              new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
1:                                                              new TransactionalDef("txSupports", "Supports"));
0:         Assert.assertEquals(expectedDefs, defs);
1: 
1: 
commit:f36cef0
/////////////////////////////////////////////////////////////////////////
0:         Assert.assertEquals("", xpath.evaluate("@scope", bean1));
commit:89994b6
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
0:         Set<String> namespaces = new HashSet<String>(Arrays.asList(Generator.NS_JPA, Generator.NS_TX));
0:         new Generator(context, os, namespaces).generate();
/////////////////////////////////////////////////////////////////////////
commit:ca31962
/////////////////////////////////////////////////////////////////////////
0:         new Generator(context, os, false).generate();
commit:66fc490
/////////////////////////////////////////////////////////////////////////
0: import java.io.ByteArrayInputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import javax.xml.parsers.DocumentBuilder;
0: import javax.xml.parsers.DocumentBuilderFactory;
0: import javax.xml.parsers.ParserConfigurationException;
0: import javax.xml.xpath.XPath;
0: import javax.xml.xpath.XPathConstants;
0: import javax.xml.xpath.XPathFactory;
1: 
1: import org.apache.commons.io.output.ByteArrayOutputStream;
0: import org.junit.Assert;
1: import org.w3c.dom.Document;
1: import org.w3c.dom.Node;
1: import org.xml.sax.SAXException;
1: 
0:     private XPath xpath;
0:     private Document document;
1: 
/////////////////////////////////////////////////////////////////////////
1:         ByteArrayOutputStream os = new ByteArrayOutputStream();
0:         new Generator(context, os).generate();
1:         System.out.println(os.toString("UTF-8"));
1: 
1:         document = readToDocument(os);
1:         xpath = XPathFactory.newInstance().newXPath();
0:         //xpath.setNamespaceContext(new NameSpaces(document));
0:         Node bean1 = (Node) xpath.evaluate("/blueprint/bean[@id='myBean1']", document, XPathConstants.NODE);
1: 
0:         // Bean
0:         Assert.assertEquals(MyBean1.class.getName(), xpath.evaluate("@class", bean1));
0:         Assert.assertEquals("init", xpath.evaluate("@init-method", bean1));
0:         Assert.assertEquals("destroy", xpath.evaluate("@destroy-method", bean1));
0:         Assert.assertEquals("true", xpath.evaluate("@field-injection", bean1));
1:         
0:         // @Transactional
0:         Assert.assertEquals("*", xpath.evaluate("transaction/@method", bean1));
0:         Assert.assertEquals("Required", xpath.evaluate("transaction/@value", bean1));
1: 
0:         // @PersistenceContext
0:         Assert.assertEquals("person", xpath.evaluate("context/@unitname", bean1));
0:         Assert.assertEquals("em", xpath.evaluate("context/@property", bean1));
1:         
0:         // @PersistenceUnit
0:         Assert.assertEquals("person", xpath.evaluate("unit/@unitname", bean1));
0:         Assert.assertEquals("emf", xpath.evaluate("unit/@property", bean1));
1:         
0:         // @Autowired
0:         Assert.assertEquals("my1", xpath.evaluate("property[@name='bean2']/@ref", bean1));
1: 
1: 
1: 
0:     private Document readToDocument(ByteArrayOutputStream os) throws ParserConfigurationException,
0:         SAXException, IOException {
1:         InputStream is = new ByteArrayInputStream(os.toByteArray());
1:         DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
1:         DocumentBuilder builder = builderFactory.newDocumentBuilder();
1:         return builder.parse(is);
1:     }
1: 
commit:46cfc09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin;
1: 
0: import static java.util.Arrays.asList;
0: import static org.apache.aries.blueprint.plugin.FilteredClassFinder.findClasses;
1: 
0: import java.util.Set;
1: 
0: import org.apache.aries.blueprint.plugin.Generator;
1: import org.apache.aries.blueprint.plugin.model.Context;
1: import org.apache.aries.blueprint.plugin.test.MyBean1;
1: import org.apache.xbean.finder.ClassFinder;
1: import org.junit.Test;
1: 
1: 
1: public class GeneratorTest {
1:     @Test
0:     public void testGenerate() throws Exception {
0:         ClassFinder classFinder = new ClassFinder(this.getClass().getClassLoader());
1:         String packageName = MyBean1.class.getPackage().getName();
0:         Set<Class<?>> beanClasses = findClasses(classFinder, asList(packageName));
0:         Context context = new Context(beanClasses);
1:         context.resolve();
0:         new Generator(context, System.out).generate();
1:     }
1:     
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:aaf182f
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:         Map<String,String> customParameters = new HashMap<>();
1:         customParameters.put("ex.t", "1");
1:         customParameters.put("example.p1", "v1");
1:         customParameters.put("example.p2", "v2");
1:         BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null, customParameters);
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testInitContextHandler() throws Exception {
1:         Node example1 = (Node) xpath.evaluate("/blueprint/example[@id='p1']", document, XPathConstants.NODE);
1:         Node example2 = (Node) xpath.evaluate("/blueprint/example[@id='p2']", document, XPathConstants.NODE);
1: 
1:         assertXpathEquals(example1, "@value", "v1");
1:         assertXpathEquals(example2, "@value", "v2");
1:     }
1: 
commit:3e3b598
/////////////////////////////////////////////////////////////////////////
1:     public void testGenerateCDITransactional() throws Exception {
1:         Node bean1 = getBeanById("cdiTransactionalAnnotatedBean");
1: 
1:         NodeList txs = (NodeList) xpath.evaluate("transaction", bean1, XPathConstants.NODESET);
1:         Set<TransactionalDef> defs = new HashSet<TransactionalDef>();
1:         for (int i = 0; i < txs.getLength(); ++i) {
1:             Node tx = txs.item(i);
1:             defs.add(new TransactionalDef(xpath.evaluate("@method", tx), xpath.evaluate("@value", tx)));
1:         }
1:         Set<TransactionalDef> expectedDefs = Sets.newHashSet(new TransactionalDef("*", "RequiresNew"),
0:             new TransactionalDef("txNotSupported", "NotSupported"),
0:             new TransactionalDef("txMandatory", "Mandatory"),
0:             new TransactionalDef("txNever", "Never"),
0:             new TransactionalDef("txRequired", "Required"),
0:             new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
0:             new TransactionalDef("txSupports", "Supports"));
1:         assertEquals(expectedDefs, defs);
1:     }
1: 
1:     @Test
commit:a680609
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String NS_JPA = "http://aries.apache.org/xmlns/jpa/v1.1.0";
1:     private static final String NS_TX1 = "http://aries.apache.org/xmlns/transactions/v1.2.0";
1: 
/////////////////////////////////////////////////////////////////////////
1:         Set<String> namespaces = new HashSet<String>(Arrays.asList(NS_JPA, NS_TX1));
commit:64f241a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.javax.PersistenceContextHandler;
/////////////////////////////////////////////////////////////////////////
0:         Set<String> namespaces = new HashSet<String>(Arrays.asList(PersistenceContextHandler.NS_JPA, SpringTransactionalFactory.NS_TX));
commit:119afa3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.spring.SpringTransactionalFactory;
/////////////////////////////////////////////////////////////////////////
0:         Set<String> namespaces = new HashSet<String>(Arrays.asList(Generator.NS_JPA, SpringTransactionalFactory.NS_TX));
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
0:         Set<String> namespaces = new HashSet<String>(Arrays.asList(Generator.NS_JPA, Generator.NS_TX));
0:         BlueprintConfigurationImpl blueprintConfiguration = new BlueprintConfigurationImpl(namespaces, null);
1:         Context context = new Context(blueprintConfiguration, beanClasses);
1:         new Generator(context, os, blueprintConfiguration).generate();
commit:868c96f
/////////////////////////////////////////////////////////////////////////
1:         assertXpathEquals(bean1, "property[@name='serviceA2']/@ref", "my2");
commit:0eb5481
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testBeanWithoutDependsOnHasNotDependsOnAttribute() throws Exception {
1:         Node bean = getBeanById("beanWithSetters");
1: 
1:         assertXpathDoesNotExist(bean, "@depends-on");
1:     }
1: 
1:     @Test
1:     public void testBeanWithEmptyDependsOnHasNotDependsOnAttribute() throws Exception {
1:         Node bean = getBeanById("myBean6");
1: 
1:         assertXpathDoesNotExist(bean, "@depends-on");
1:     }
1: 
1:     @Test
1:     public void testBeanWithOneIdInDependsOnHasDependsOnAttribute() throws Exception {
1:         Node bean = getBeanById("myBean5");
1: 
1:         assertXpathEquals(bean, "@depends-on", "myBean6");
1:     }
1: 
1:     @Test
1:     public void testBeanWithTwoIdInDependsOnHasDependsOnAttribute() throws Exception {
1:         Node bean = getBeanById("myBean4");
1: 
1:         assertXpathEquals(bean, "@depends-on", "myBean5 myBean6");
1:     }
1: 
1:     @Test
1:     public void testProducedBeanMetohodWithoutDependsOnHasNotDependsOnAttribute() throws Exception {
1:         Node bean = getBeanById("produced1");
1: 
1:         assertXpathDoesNotExist(bean, "@depends-on");
1:     }
1: 
1:     @Test
1:     public void testProducedBeanMethodWithDependsOnHasDependsOnAttribute() throws Exception {
1:         Node bean = getBeanById("produced2");
1: 
1:         assertXpathEquals(bean, "@depends-on", "produced1");
1:     }
1: 
commit:7583a4c
/////////////////////////////////////////////////////////////////////////
0:         new Generator(context, os, namespaces, null).generate();
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testLazyWithTrueBeanHasActivationEager() throws Exception {
1:         Node bean = getBeanById("beanWithSetters");
1: 
1:         assertXpathEquals(bean, "@activation", "eager");
1:     }
1: 
1:     @Test
1:     public void testLazyBeanHasActivationLazy() throws Exception {
1:         Node bean = getBeanById("myBean1");
1: 
1:         assertXpathEquals(bean, "@activation", "lazy");
1:     }
1: 
1:     @Test
1:     public void testBeanWithoutLazyAnnotationHasNotActivationAttribute() throws Exception {
1:         Node bean1 = getBeanById("myBean3");
1: 
1:         assertXpathDoesNotExist(bean1, "@activation");
1:     }
1: 
1:     @Test
1:     public void testLazyProducedBeanOverriddenByFactoryMethodAnnotation() throws Exception {
1:         Node bean = getBeanById("producedEager");
1: 
1:         assertXpathEquals(bean, "@activation", "eager");
1:     }
1: 
commit:9632b7d
/////////////////////////////////////////////////////////////////////////
1:         assertXpathDoesNotExist(myBean5, "@field-injection");
/////////////////////////////////////////////////////////////////////////
1:         assertXpathDoesNotExist(bean1, "@field-injection");
commit:4f3e047
/////////////////////////////////////////////////////////////////////////
1:         assertXpathEquals(bean1, "@class", MyBean1.class.getName());
1:         assertXpathEquals(bean1, "@init-method", "init");
1:         assertXpathEquals(bean1, "@destroy-method", "destroy");
1:         assertXpathEquals(bean1, "@field-injection", "true");
1:         assertXpathDoesNotExist(bean1, "@scope");
/////////////////////////////////////////////////////////////////////////
1:         assertXpathEquals(bean1, "context/@unitname", "person");
1:         assertXpathEquals(bean1, "context/@property", "em");
1:         assertXpathEquals(bean1, "unit/@unitname", "person");
1:         assertXpathEquals(bean1, "unit/@property", "emf");
1:         assertXpathEquals(bean1, "property[@name='bean2']/@ref", "my1");
1:         assertXpathEquals(serviceAImpl2, "@interface", ServiceA.class.getName());
1:         assertXpathDoesNotExist(serviceAImpl2, "@auto-export");
1:         assertXpathDoesNotExist(serviceAImpl2, "interfaces");
1:         assertXpathDoesNotExist(serviceAImpl3, "@interface");
1:         assertXpathEquals(serviceAImpl3, "@auto-export", "interfaces");
1:         assertXpathDoesNotExist(serviceAImpl3, "interfaces");
1: 
1:         assertXpathDoesNotExist(serviceABImpl, "@interface");
1:         assertXpathDoesNotExist(serviceABImpl, "@auto-export");
/////////////////////////////////////////////////////////////////////////
1:         assertXpathEquals(myBean5, "argument[1]/@ref", "my2");
1:         assertXpathEquals(myBean5, "argument[2]/@ref", "my1");
1:         assertXpathEquals(myBean5, "argument[3]/@ref", "serviceABImpl");
1:         assertXpathEquals(myBean5, "argument[4]/@value", "100");
1:         assertXpathEquals(myBean5, "argument[5]/@ref", "ser1");
1:         assertXpathEquals(myBean5, "argument[6]/@ref", "ser2");
1:         assertXpathEquals(myBean5, "argument[7]/@ref", "serviceAImplQualified");
1:         assertXpathEquals(myBean6, "argument[1]/@ref", "my2");
1:         assertXpathEquals(ser1, "@component-name", "myRef");
1:         assertXpathDoesNotExist(ser1, "@filter");
1:         assertXpathDoesNotExist(ser2, "@component-name");
1:         assertXpathEquals(ser2, "@filter", "(mode=123)");
1:         assertXpathEquals(bean1, "@class", "org.apache.aries.blueprint.plugin.test.MyProduced");
1:         assertXpathEquals(bean1, "@factory-ref", "myFactoryNamedBean");
1:         assertXpathEquals(bean1, "@factory-method", "createBean1");
1:         assertXpathEquals(bean1, "@scope", "prototype");
1:         assertXpathEquals(bean1, "@class", "org.apache.aries.blueprint.plugin.test.MyProduced");
1:         assertXpathEquals(bean2, "@factory-ref", "myFactoryNamedBean");
1:         assertXpathEquals(bean2, "@factory-method", "createBean2");
1:         assertXpathDoesNotExist(bean2, "@scope");
1:         assertXpathEquals(myBean5, "argument[8]/@ref", "produced2");
1:         assertXpathEquals(bean1, "@class", "org.apache.aries.blueprint.plugin.test.MyProducedWithConstructor");
1:         assertXpathEquals(bean1, "@factory-ref", "myFactoryBean");
1:         assertXpathEquals(bean1, "@factory-method", "createBeanWithParameters");
1:         assertXpathEquals(bean1, "argument[1]/@ref", "myBean1");
1:         assertXpathEquals(bean1, "argument[2]/@value", "100");
1:         assertXpathEquals(bean1, "argument[3]/@ref", "ser1");
1:         assertXpathEquals(service, "@auto-export", "interfaces");
1:         assertXpathDoesNotExist(service, "@interface");
1:         assertXpathDoesNotExist(service, "interfaces");
1:         assertXpathDoesNotExist(service, "service-properties");
1:         assertXpathDoesNotExist(service, "@auto-export");
1:         assertXpathEquals(service, "@interface", MyProduced.class.getName());
1:         assertXpathDoesNotExist(service, "interfaces");
1:         assertXpathDoesNotExist(service, "service-properties");
1:         assertXpathDoesNotExist(service, "@auto-export");
1:         assertXpathDoesNotExist(service, "@interface");
1:         assertXpathEquals(service, "count(interfaces/value)", "2");
1:         assertXpathEquals(service, "interfaces/value[1]", MyProduced.class.getName());
1:         assertXpathEquals(service, "interfaces/value[2]", ServiceA.class.getName());
1:         assertXpathDoesNotExist(service, "service-properties");
1:         assertXpathEquals(service, "@auto-export", "interfaces");
1:         assertXpathDoesNotExist(service, "@interface");
1:         assertXpathDoesNotExist(service, "interfaces");
1:         assertXpathEquals(service, "count(service-properties/entry)", "2");
1:         assertXpathEquals(service, "service-properties/entry[@key='n1']/@value", "v1");
1:         assertXpathEquals(service, "service-properties/entry[@key='n2']/@value", "v2");
1:         assertXpathDoesNotExist(bean1, "property[@name='useless']");
1:         assertXpathDoesNotExist(bean1, "property[@name='iOnlyHaveSetPrefix']");
1:         assertXpathDoesNotExist(bean1, "property[@name='ihaveMoreThenOneParameter']");
1:         assertXpathDoesNotExist(bean1, "property[@name='iOnlyHaveSetPrefixValue']");
1:         assertXpathDoesNotExist(bean1, "property[@name='ihaveMoreThenOneParameterValue']");
1:         assertXpathEquals(bean1, "property[@name='myValue']/@value", "test");
1:         assertXpathEquals(bean1, "property[@name='serviceA1']/@ref", "my1");
0:         assertXpathEquals(bean1, "property[@name='serviceA2']/@ref", "my1");
1:         assertXpathEquals(bean1, "property[@name='serviceB']/@ref", "serviceABImpl");
1:         assertXpathEquals(bean1, "property[@name='serviceB2']/@ref", "serviceB2Id");
1:         assertXpathEquals(bean1, "property[@name='serviceBRef']/@ref", "serviceB-typeB1Ref");
1:         assertXpathEquals(bean1, "property[@name='serviceB2Ref']/@ref", "serviceB2IdRef");
1:         assertXpathEquals(bean1, "property[@name='serviceB3Ref']/@ref", "serviceB-B3Ref");
1:         assertXpathEquals(reference1, "@interface", ServiceB.class.getName());
1:         assertXpathEquals(reference1, "@filter", "(type=B1Ref)");
1:         assertXpathEquals(reference2, "@interface", ServiceB.class.getName());
1:         assertXpathEquals(reference2, "@filter", "(type=B2Ref)");
1:         assertXpathEquals(reference3, "@interface", ServiceB.class.getName());
1:         assertXpathEquals(reference3, "@component-name", "B3Ref");
1:     }
1: 
1:     private void assertXpathDoesNotExist(Node node, String xpathExpression) throws XPathExpressionException {
1:         assertXpathEquals(node, "count(" + xpathExpression + ")", "0");
1:     }
1: 
1:     private void assertXpathEquals(Node node, String xpathExpression, String expected) throws XPathExpressionException {
1:         assertEquals(expected, xpath.evaluate(xpathExpression, node));
commit:d22e134
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
0:             new TransactionalDef("txNotSupported", "NotSupported"),
0:             new TransactionalDef("txMandatory", "Mandatory"),
0:             new TransactionalDef("txNever", "Never"),
0:             new TransactionalDef("txRequired", "Required"),
0:             new TransactionalDef("txOverridenWithRequiresNew", "RequiresNew"),
0:             new TransactionalDef("txSupports", "Supports"));
/////////////////////////////////////////////////////////////////////////
0:             interfaceNames);
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testSetterInjection() throws Exception {
1:         Node bean1 = getBeanById("beanWithSetters");
1: 
0:         assertEquals("0", xpath.evaluate("count(property[@name='useless'])", bean1));
0:         assertEquals("0", xpath.evaluate("count(property[@name='iOnlyHaveSetPrefix'])", bean1));
0:         assertEquals("0", xpath.evaluate("count(property[@name='ihaveMoreThenOneParameter'])", bean1));
0:         assertEquals("0", xpath.evaluate("count(property[@name='iOnlyHaveSetPrefixValue'])", bean1));
0:         assertEquals("0", xpath.evaluate("count(property[@name='ihaveMoreThenOneParameterValue'])", bean1));
1: 
0:         assertEquals("test", xpath.evaluate("property[@name='myValue']/@value", bean1));
0:         assertEquals("my1", xpath.evaluate("property[@name='serviceA1']/@ref", bean1));
0:         assertEquals("my1", xpath.evaluate("property[@name='serviceA2']/@ref", bean1));
0:         assertEquals("serviceABImpl", xpath.evaluate("property[@name='serviceB']/@ref", bean1));
0:         assertEquals("serviceB2Id", xpath.evaluate("property[@name='serviceB2']/@ref", bean1));
0:         assertEquals("serviceB-typeB1Ref", xpath.evaluate("property[@name='serviceBRef']/@ref", bean1));
0:         assertEquals("serviceB2IdRef", xpath.evaluate("property[@name='serviceB2Ref']/@ref", bean1));
0:         assertEquals("serviceB-B3Ref", xpath.evaluate("property[@name='serviceB3Ref']/@ref", bean1));
1: 
1:         Node reference1 = getReferenceById("serviceB-typeB1Ref");
0:         assertEquals(ServiceB.class.getName(), xpath.evaluate("@interface", reference1));
0:         assertEquals("(type=B1Ref)", xpath.evaluate("@filter", reference1));
1: 
1:         Node reference2 = getReferenceById("serviceB2IdRef");
0:         assertEquals(ServiceB.class.getName(), xpath.evaluate("@interface", reference2));
0:         assertEquals("(type=B2Ref)", xpath.evaluate("@filter", reference2));
1: 
1:         Node reference3 = getReferenceById("serviceB-B3Ref");
0:         assertEquals(ServiceB.class.getName(), xpath.evaluate("@interface", reference3));
0:         assertEquals("B3Ref", xpath.evaluate("@component-name", reference3));
1:     }
1: 
0:         SAXException, IOException {
commit:ac69b8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.test.MyProduced;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testExposeProducedBeanAsServiceWithAutoExport() throws Exception {
1:         Node service = getServiceByRef("producedForService");
0:         assertEquals("interfaces", xpath.evaluate("@auto-export", service));
0:         assertEquals("", xpath.evaluate("@interface", service));
0:         assertEquals("0", xpath.evaluate("count(interfaces)", service));
0:         assertEquals("0", xpath.evaluate("count(service-properties)", service));
1:     }
0: 
1:     @Test
1:     public void testExposeProducedBeanAsServiceWithOneInterface() throws Exception {
1:         Node service = getServiceByRef("producedForServiceWithOneInterface");
0:         assertEquals("", xpath.evaluate("@auto-export", service));
0:         assertEquals(MyProduced.class.getName(), xpath.evaluate("@interface", service));
0:         assertEquals("0", xpath.evaluate("count(interfaces)", service));
0:         assertEquals("0", xpath.evaluate("count(service-properties)", service));
1:     }
0: 
1:     @Test
1:     public void testExposeProducedBeanAsServiceWithTwoInterfaces() throws Exception {
1:         Node service = getServiceByRef("producedForServiceWithTwoInterfaces");
0:         assertEquals("", xpath.evaluate("@auto-export", service));
0:         assertEquals("", xpath.evaluate("@interface", service));
0:         assertEquals("2", xpath.evaluate("count(interfaces/value)", service));
0:         assertEquals(MyProduced.class.getName(), xpath.evaluate("interfaces/value[1]", service));
0:         assertEquals(ServiceA.class.getName(), xpath.evaluate("interfaces/value[2]", service));
0:         assertEquals("0", xpath.evaluate("count(service-properties)", service));
1:     }
0: 
1:     @Test
1:     public void testExposeProducedBeanAsServiceWithServiceProperties() throws Exception {
1:         Node service = getServiceByRef("producedForServiceWithProperties");
0:         assertEquals("interfaces", xpath.evaluate("@auto-export", service));
0:         assertEquals("", xpath.evaluate("@interface", service));
0:         assertEquals("0", xpath.evaluate("count(interfaces)", service));
0:         assertEquals("2", xpath.evaluate("count(service-properties/entry)", service));
0:         assertEquals("v1", xpath.evaluate("service-properties/entry[@key='n1']/@value", service));
0:         assertEquals("v2", xpath.evaluate("service-properties/entry[@key='n2']/@value", service));
1:     }
0: 
============================================================================