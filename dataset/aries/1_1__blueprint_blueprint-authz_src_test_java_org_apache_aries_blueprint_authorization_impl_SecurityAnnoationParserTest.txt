1:1c72f1f: /**
1:1c72f1f:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c72f1f:  * or more contributor license agreements.  See the NOTICE file
1:1c72f1f:  * distributed with this work for additional information
1:1c72f1f:  * regarding copyright ownership.  The ASF licenses this file
1:1c72f1f:  * to you under the Apache License, Version 2.0 (the
1:1c72f1f:  * "License"); you may not use this file except in compliance
1:1c72f1f:  * with the License.  You may obtain a copy of the License at
1:1c72f1f:  *
1:1c72f1f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c72f1f:  *
1:1c72f1f:  * Unless required by applicable law or agreed to in writing,
1:1c72f1f:  * software distributed under the License is distributed on an
1:1c72f1f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c72f1f:  * KIND, either express or implied.  See the License for the
1:1c72f1f:  * specific language governing permissions and limitations
1:1c72f1f:  * under the License.
1:1c72f1f:  */
1:01524e7: package org.apache.aries.blueprint.authorization.impl;
1:01524e7: 
1:01524e7: import java.lang.annotation.Annotation;
1:01524e7: 
1:01524e7: import javax.annotation.security.DenyAll;
1:01524e7: import javax.annotation.security.PermitAll;
1:01524e7: import javax.annotation.security.RolesAllowed;
1:01524e7: 
1:01524e7: import org.apache.aries.blueprint.authorization.impl.test.SecuredClass;
1:01524e7: import org.junit.Assert;
1:01524e7: import org.junit.Test;
1:01524e7: 
1:01524e7: public class SecurityAnnoationParserTest {
1:01524e7: 
1:01524e7:     private SecurityAnotationParser annParser;
1:01524e7:     
1:01524e7:     public SecurityAnnoationParserTest() {
1:01524e7:         annParser = new SecurityAnotationParser();
1:01524e7:     }
1:3f62ee0:     
1:3f62ee0:     @Test
1:3f62ee0:     public void testIsSecured() {
1:3f62ee0:         Assert.assertTrue(annParser.isSecured(SecuredClass.class));
1:3f62ee0:         Assert.assertFalse(annParser.isSecured(Object.class));
1:3f62ee0:         Assert.assertFalse(annParser.isSecured(Activator.class));
1:3f62ee0:     }
1:01524e7: 
1:01524e7:     @Test
1:01524e7:     public void testAnnotationType() throws NoSuchMethodException, SecurityException {
1:01524e7:         Assert.assertTrue(getEffective("admin") instanceof RolesAllowed);
1:01524e7:         Assert.assertTrue(getEffective("user") instanceof RolesAllowed);
1:01524e7:         Assert.assertTrue(getEffective("anon") instanceof PermitAll);
1:01524e7:         Assert.assertTrue(getEffective("closed") instanceof DenyAll);
1:01524e7:     }
1:01524e7:     
1:01524e7:     @Test
1:01524e7:     public void testRoles() throws NoSuchMethodException, SecurityException {
1:01524e7:         Assert.assertArrayEquals(new String[]{"admin"}, getRoles("admin"));
1:01524e7:         Assert.assertArrayEquals(new String[]{"user"}, getRoles("user"));
1:01524e7:     }
1:01524e7: 
1:01524e7:     private Annotation getEffective(String methodName) throws NoSuchMethodException {
1:ed14de6:         return annParser.getEffectiveAnnotation(SecuredClass.class, SecuredClass.class.getMethod(methodName));
1:01524e7:     }
1:01524e7:     
1:01524e7:     private String[] getRoles(String methodName) throws NoSuchMethodException {
1:01524e7:         Annotation ann = getEffective(methodName);
1:01524e7:         Assert.assertTrue(ann instanceof RolesAllowed);
1:01524e7:         return ((RolesAllowed)ann).value();
1:01524e7:     }
1:3f62ee0: 
1:01524e7: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ed14de6
/////////////////////////////////////////////////////////////////////////
1:         return annParser.getEffectiveAnnotation(SecuredClass.class, SecuredClass.class.getMethod(methodName));
commit:3f62ee0
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testIsSecured() {
1:         Assert.assertTrue(annParser.isSecured(SecuredClass.class));
1:         Assert.assertFalse(annParser.isSecured(Object.class));
1:         Assert.assertFalse(annParser.isSecured(Activator.class));
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
commit:1c72f1f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:01524e7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.authorization.impl;
1: 
1: import java.lang.annotation.Annotation;
1: 
1: import javax.annotation.security.DenyAll;
1: import javax.annotation.security.PermitAll;
1: import javax.annotation.security.RolesAllowed;
1: 
1: import org.apache.aries.blueprint.authorization.impl.test.SecuredClass;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class SecurityAnnoationParserTest {
1: 
1:     private SecurityAnotationParser annParser;
1:     
1:     public SecurityAnnoationParserTest() {
1:         annParser = new SecurityAnotationParser();
1:     }
1: 
1:     @Test
1:     public void testAnnotationType() throws NoSuchMethodException, SecurityException {
1:         Assert.assertTrue(getEffective("admin") instanceof RolesAllowed);
1:         Assert.assertTrue(getEffective("user") instanceof RolesAllowed);
1:         Assert.assertTrue(getEffective("anon") instanceof PermitAll);
1:         Assert.assertTrue(getEffective("closed") instanceof DenyAll);
1:     }
1:     
1:     @Test
1:     public void testRoles() throws NoSuchMethodException, SecurityException {
1:         Assert.assertArrayEquals(new String[]{"admin"}, getRoles("admin"));
1:         Assert.assertArrayEquals(new String[]{"user"}, getRoles("user"));
1:     }
1: 
1:     private Annotation getEffective(String methodName) throws NoSuchMethodException {
0:         return annParser.getEffectiveAnnotation(SecuredClass.class.getMethod(methodName));
1:     }
1:     
1:     private String[] getRoles(String methodName) throws NoSuchMethodException {
1:         Annotation ann = getEffective(methodName);
1:         Assert.assertTrue(ann instanceof RolesAllowed);
1:         return ((RolesAllowed)ann).value();
1:     }
1: }
============================================================================