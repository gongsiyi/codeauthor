1:6f219fd: /*
1:6f219fd:  * Licensed to the Apache Software Foundation (ASF) under one
1:6f219fd:  * or more contributor license agreements.  See the NOTICE file
1:6f219fd:  * distributed with this work for additional information
1:6f219fd:  * regarding copyright ownership.  The ASF licenses this file
1:6f219fd:  * to you under the Apache License, Version 2.0 (the
1:6f219fd:  * "License"); you may not use this file except in compliance
1:6f219fd:  * with the License.  You may obtain a copy of the License at
1:6f219fd:  *
1:6f219fd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6f219fd:  *
1:6f219fd:  * Unless required by applicable law or agreed to in writing,
1:6f219fd:  * software distributed under the License is distributed on an
1:6f219fd:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:6f219fd:  * KIND, either express or implied.  See the License for the
1:6f219fd:  * specific language governing permissions and limitations
1:6f219fd:  * under the License.
1:6f219fd:  */
1:6f219fd: package org.apache.aries.transaction;
6:6f219fd: 
1:6f219fd: import javax.transaction.HeuristicMixedException;
1:6f219fd: import javax.transaction.HeuristicRollbackException;
1:6f219fd: import javax.transaction.InvalidTransactionException;
1:6f219fd: import javax.transaction.NotSupportedException;
1:6f219fd: import javax.transaction.RollbackException;
1:6f219fd: import javax.transaction.Status;
1:6f219fd: import javax.transaction.SystemException;
1:6f219fd: import javax.transaction.Transaction;
1:6f219fd: import javax.transaction.TransactionManager;
1:bd98451: import javax.transaction.Transactional.TxType;
1:aa15c54: 
1:2ad9527: /**
1:2ad9527:  * TODO This is copied from aries transaction. We could share this code
1:2ad9527:  */
1:bb00f0a: public enum TransactionAttribute {
1:6f219fd:     MANDATORY
1:6f219fd:     {
1:2ad9527:       @Override
1:5c15102:       public TransactionToken begin(TransactionManager man) throws SystemException
1:6f219fd:       {
1:6f219fd:         if (man.getStatus() == Status.STATUS_NO_TRANSACTION) {
1:32aa11b:           throw new IllegalStateException("No transaction present when calling method that mandates a transaction.");
2:6f219fd:         }
1:6f219fd: 
1:5c15102:         return new TransactionToken(man.getTransaction(), null, MANDATORY);
1:6f219fd:       }
1:6f219fd:     },
1:6f219fd:     NEVER
1:6f219fd:     {
1:2ad9527:       @Override
1:5c15102:       public TransactionToken begin(TransactionManager man) throws SystemException
1:6f219fd:       {
2:6f219fd:         if (man.getStatus() == Status.STATUS_ACTIVE) {
1:32aa11b:           throw new IllegalStateException("Transaction present when calling method that forbids a transaction.");
1:6f219fd:         }
1:6f219fd: 
1:5c15102:         return new TransactionToken(null, null, NEVER);
1:6f219fd:       }
1:6f219fd:     },
1:bd98451:     NOT_SUPPORTED
1:6f219fd:     {
1:2ad9527:       @Override
1:5c15102:       public TransactionToken begin(TransactionManager man) throws SystemException
1:6f219fd:       {
1:6f219fd:         if (man.getStatus() == Status.STATUS_ACTIVE) {
1:5c15102:           return new TransactionToken(null, man.suspend(), this);
1:6f219fd:         }
1:6f219fd: 
1:bd98451:         return new TransactionToken(null, null, NOT_SUPPORTED);
1:6f219fd:       }
1:6f219fd: 
1:2ad9527:       @Override
1:5c15102:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:2ad9527:           InvalidTransactionException
1:6f219fd:       {
1:5c15102:         Transaction tran = tranToken.getSuspendedTransaction();
2:6f219fd:         if (tran != null) {
1:6f219fd:           man.resume(tran);
1:6f219fd:         }
1:6f219fd:       }
1:6f219fd:     },
1:6f219fd:     REQUIRED
1:6f219fd:     {
1:2ad9527:       @Override
1:5c15102:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException
1:6f219fd:       {
1:6f219fd:         if (man.getStatus() == Status.STATUS_NO_TRANSACTION) {
1:6f219fd:           man.begin();
1:5c15102:           return new TransactionToken(man.getTransaction(), null, REQUIRED, true);
1:6f219fd:         }
1:5c15102: 
1:5c15102:         return new TransactionToken(man.getTransaction(), null, REQUIRED);
1:6f219fd:       }
1:6f219fd: 
1:2ad9527:       @Override
1:5c15102:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:2ad9527:           InvalidTransactionException, RollbackException,
1:6f219fd:           HeuristicMixedException, HeuristicRollbackException
1:6f219fd:       {
1:5c15102:         if (tranToken.isCompletionAllowed()) {
2:6f219fd:           if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
2:6f219fd:             man.rollback();
3:6f219fd:           } else {
2:6f219fd:             man.commit();
1:6f219fd:           }
1:6f219fd:         }
1:6f219fd:       }
1:6f219fd:     },
1:bd98451:     REQUIRES_NEW
1:6f219fd:     {
1:2ad9527:       @Override
2:5c15102:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
1:2ad9527:           InvalidTransactionException
1:6f219fd:       {
1:aa15c54:          Transaction suspendedTransaction = (man.getStatus() == Status.STATUS_ACTIVE) ? man.suspend() : null;
1:5c15102: 
1:6f219fd:         try {
1:6f219fd:           man.begin();
1:6f219fd:         } catch (SystemException e) {
1:aa15c54:           man.resume(suspendedTransaction);
1:6f219fd:           throw e;
1:6f219fd:         } catch (NotSupportedException e) {
1:aa15c54:           man.resume(suspendedTransaction);
1:6f219fd:           throw e;
1:5c15102:         }
1:bd98451:         return new TransactionToken(man.getTransaction(), suspendedTransaction, REQUIRES_NEW, true);
1:5c15102:       }
1:5c15102: 
1:2ad9527:       @Override
2:5c15102:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:2ad9527:           InvalidTransactionException, RollbackException,
1:6f219fd:           HeuristicMixedException, HeuristicRollbackException
1:5c15102:       {
1:5c15102:         if (tranToken.isCompletionAllowed()) {
1:5c15102:           if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:5c15102:             man.rollback();
1:5c15102:           } else {
1:5c15102:             man.commit();
1:6f219fd:           }
1:6f219fd:         }
1:6f219fd: 
1:5c15102:         Transaction tran = tranToken.getSuspendedTransaction();
1:6f219fd:         if (tran != null) {
1:6f219fd:           man.resume(tran);
1:6f219fd:         }
1:6f219fd:       }
1:6f219fd:     },
1:5c15102:     SUPPORTS
1:5c15102:     {
1:2ad9527:       @Override
1:5c15102:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
1:2ad9527:           InvalidTransactionException
1:6f219fd:       {
1:5c15102:           if (man.getStatus() == Status.STATUS_ACTIVE) {
1:5c15102:               return new TransactionToken(man.getTransaction(), null, SUPPORTS);
1:6f219fd:           }
1:6f219fd: 
1:5c15102:           return new TransactionToken(null, null, SUPPORTS);
1:5c15102:       }
1:5c15102:     };
1:6f219fd: 
1:bd98451:     public static TransactionAttribute fromValue(TxType type)
1:6f219fd:     {
1:bd98451:       return valueOf(type.name());
1:6f219fd:     }
1:2ad9527:     
1:2ad9527:     public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException, InvalidTransactionException // NOSONAR
1:6f219fd:     {
5:6f219fd:       return null;
1:6f219fd:     }
1:6f219fd: 
1:2ad9527:     public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException, // NOSONAR
1:2ad9527:         InvalidTransactionException, RollbackException,
1:6f219fd:         HeuristicMixedException, HeuristicRollbackException
1:6f219fd:     {
1:2ad9527:         // No operation by default
1:6f219fd:     }
1:6f219fd: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:2ad9527
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * TODO This is copied from aries transaction. We could share this code
1:  */
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException, RollbackException,
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException, RollbackException,
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException
/////////////////////////////////////////////////////////////////////////
1:     
1:     public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException, InvalidTransactionException // NOSONAR
1:     public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException, // NOSONAR
1:         InvalidTransactionException, RollbackException,
1:         // No operation by default
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: import javax.transaction.Transactional.TxType;
/////////////////////////////////////////////////////////////////////////
1:     NOT_SUPPORTED
/////////////////////////////////////////////////////////////////////////
1:         return new TransactionToken(null, null, NOT_SUPPORTED);
/////////////////////////////////////////////////////////////////////////
1:     REQUIRES_NEW
/////////////////////////////////////////////////////////////////////////
1:         return new TransactionToken(man.getTransaction(), suspendedTransaction, REQUIRES_NEW, true);
/////////////////////////////////////////////////////////////////////////
1:     public static TransactionAttribute fromValue(TxType type)
1:       return valueOf(type.name());
commit:32aa11b
/////////////////////////////////////////////////////////////////////////
1:           throw new IllegalStateException("No transaction present when calling method that mandates a transaction.");
/////////////////////////////////////////////////////////////////////////
1:           throw new IllegalStateException("Transaction present when calling method that forbids a transaction.");
commit:aa15c54
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.transaction.annotations.TransactionPropagationType;
1: 
/////////////////////////////////////////////////////////////////////////
1:          Transaction suspendedTransaction = (man.getStatus() == Status.STATUS_ACTIVE) ? man.suspend() : null;
1:           man.resume(suspendedTransaction);
1:           man.resume(suspendedTransaction);
0:         return new TransactionToken(man.getTransaction(), suspendedTransaction, REQUIRESNEW, true);
/////////////////////////////////////////////////////////////////////////
0:     public static TransactionAttribute fromValue(TransactionPropagationType type)
0:       return valueOf(type.name().toUpperCase());
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:d014f6c
/////////////////////////////////////////////////////////////////////////
0:           throw new IllegalStateException(Constants.MESSAGES.getMessage("tran.not.found"));
/////////////////////////////////////////////////////////////////////////
0:           throw new IllegalStateException(Constants.MESSAGES.getMessage("tran.found.never"));
author:Lin Sun
-------------------------------------------------------------------------------
commit:bb00f0a
/////////////////////////////////////////////////////////////////////////
1: public enum TransactionAttribute {
/////////////////////////////////////////////////////////////////////////
0:     public static TransactionAttribute fromValue(String value)
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:5c15102
/////////////////////////////////////////////////////////////////////////
1:       public TransactionToken begin(TransactionManager man) throws SystemException
0:           throw new IllegalStateException("No transaction on the thread");
1:         return new TransactionToken(man.getTransaction(), null, MANDATORY);
1:       public TransactionToken begin(TransactionManager man) throws SystemException
0:           throw new IllegalStateException("Transaction on the thread");
1:         return new TransactionToken(null, null, NEVER);
0:     NOTSUPPORTED
1:       public TransactionToken begin(TransactionManager man) throws SystemException
1:           return new TransactionToken(null, man.suspend(), this);
0:         return new TransactionToken(null, null, NOTSUPPORTED);
1:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:         Transaction tran = tranToken.getSuspendedTransaction();
/////////////////////////////////////////////////////////////////////////
1:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException
1:           return new TransactionToken(man.getTransaction(), null, REQUIRED, true);
1:         return new TransactionToken(man.getTransaction(), null, REQUIRED);
1:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:         if (tranToken.isCompletionAllowed()) {
/////////////////////////////////////////////////////////////////////////
0:     REQUIRESNEW
1:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
0:         TransactionToken tranToken;
0:           tranToken = new TransactionToken(null, man.suspend(), REQUIRESNEW);
0:           tranToken = new TransactionToken(null, null, REQUIRESNEW);
0:           man.resume(tranToken.getSuspendedTransaction());
0:           man.resume(tranToken.getSuspendedTransaction());
1:         
0:         tranToken.setActiveTransaction(man.getTransaction());
0:         tranToken.setCompletionAllowed(true);
1:         
0:         return tranToken;
1:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:         if (tranToken.isCompletionAllowed()) {
1:           if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:             man.rollback();
1:           } else {
1:             man.commit();
1:           }
1:         Transaction tran = tranToken.getSuspendedTransaction();
1:     SUPPORTS
1:     {
1:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
0:           InvalidTransactionException, IllegalStateException
1:       {
1:           if (man.getStatus() == Status.STATUS_ACTIVE) {
1:               return new TransactionToken(man.getTransaction(), null, SUPPORTS);
1:           }
1: 
1:           return new TransactionToken(null, null, SUPPORTS);
1:       }
1:     };
1:     public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
1:     public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:3fbf745
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:6f219fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction;
1: 
1: import javax.transaction.HeuristicMixedException;
1: import javax.transaction.HeuristicRollbackException;
1: import javax.transaction.InvalidTransactionException;
1: import javax.transaction.NotSupportedException;
1: import javax.transaction.RollbackException;
1: import javax.transaction.Status;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: 
0: public enum TransactionStrategy {
1:     MANDATORY
1:     {
0:       public Transaction begin(TransactionManager man) throws SystemException
1:       {
1:         if (man.getStatus() == Status.STATUS_NO_TRANSACTION) {
0:           throw new IllegalStateException("No tran on thread");
1:         }
1: 
1:         return null;
1:       }
1:     },
1:     NEVER
1:     {
0:       public Transaction begin(TransactionManager man) throws SystemException
1:       {
1:         if (man.getStatus() == Status.STATUS_ACTIVE) {
0:           throw new IllegalStateException("Tran on thread");
1:         }
1: 
1:         return null;
1:       }
1:     },
0:     NOT_SUPPORTED
1:     {
0:       public Transaction begin(TransactionManager man) throws SystemException
1:       {
1:         if (man.getStatus() == Status.STATUS_ACTIVE) {
0:           return man.suspend();
1:         }
1: 
1:         return null;
1:       }
1: 
0:       public void finish(TransactionManager man, Transaction tran) throws SystemException,
0:           InvalidTransactionException, IllegalStateException
1:       {
1:         if (tran != null) {
1:           man.resume(tran);
1:         }
1:       }
1:     },
1:     REQUIRED
1:     {
0:       public Transaction begin(TransactionManager man) throws SystemException, NotSupportedException
1:       {
1:         if (man.getStatus() == Status.STATUS_NO_TRANSACTION) {
1:           man.begin();
0:           return man.getTransaction();
1:         }
1: 
1:         return null;
1:       }
1: 
0:       public void finish(TransactionManager man, Transaction tran) throws SystemException,
0:           InvalidTransactionException, IllegalStateException, SecurityException, RollbackException,
1:           HeuristicMixedException, HeuristicRollbackException
1:       {
1:         if (tran != null) {
1:           if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:             man.rollback();
1:           } else {
1:             man.commit();
1:           }
1:         }
1:       }
1:     },
0:     REQUIRES_NEW
1:     {
0:       public Transaction begin(TransactionManager man) throws SystemException, NotSupportedException,
0:           InvalidTransactionException, IllegalStateException
1:       {
0:         Transaction result;
1:         if (man.getStatus() == Status.STATUS_ACTIVE) {
0:           result = man.suspend();
1:         } else {
0:           result = null;
1:         }
1: 
1:         try {
1:           man.begin();
1:         } catch (SystemException e) {
0:           man.resume(result);
1:           throw e;
1:         } catch (NotSupportedException e) {
0:           man.resume(result);
1:           throw e;
1:         }
0:         return result;
1:       }
1: 
0:       public void finish(TransactionManager man, Transaction tran) throws SystemException,
0:           InvalidTransactionException, IllegalStateException, SecurityException, RollbackException,
1:           HeuristicMixedException, HeuristicRollbackException
1:       {
1:         if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:           man.rollback();
1:         } else {
1:           man.commit();
1:         }
1: 
1:         if (tran != null) {
1:           man.resume(tran);
1:         }
1:       }
1:     },
0:     SUPPORTS;
1: 
0:     public static TransactionStrategy fromValue(String value)
1:     {
0:       return valueOf(value.toUpperCase());
1:     }
1: 
0:     public Transaction begin(TransactionManager man) throws SystemException, NotSupportedException,
0:         InvalidTransactionException, IllegalStateException
1:     {
1:       return null;
1:     }
1: 
0:     public void finish(TransactionManager man, Transaction tran) throws SystemException,
0:         InvalidTransactionException, IllegalStateException, SecurityException, RollbackException,
1:         HeuristicMixedException, HeuristicRollbackException
1:     {
1: 
1:     }
1: }
============================================================================