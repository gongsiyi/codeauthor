1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.api;
1:628add4: 
1:628add4: 
1:628add4: import java.math.BigDecimal;
1:628add4: import java.rmi.Remote;
1:628add4: import java.rmi.RemoteException;
1:628add4: import java.util.Collection;
1:628add4: 
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountProfileDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.MarketSummaryDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
1:8ef753d: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:628add4: 
1:628add4: /**
1:628add4:   * TradeServices interface specifies the business methods provided by the Trade online broker application.
1:628add4:   * These business methods represent the features and operations that can be performed by customers of 
1:628add4:   * the brokerage such as login, logout, get a stock quote, buy or sell a stock, etc.
1:628add4:   * This interface is implemented by {@link Trade} providing an EJB implementation of these
1:628add4:   * business methods and also by {@link TradeDirect} providing a JDBC implementation.
1:628add4:   *
1:628add4:   * @see Trade
1:628add4:   * @see TradeDirect
1:628add4:   *
1:628add4:   */ 
1:628add4: public interface TradeServices extends Remote {
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Compute and return a snapshot of the current market conditions
1:628add4: 	 * This includes the TSIA - an index of the price of the top 100 Trade stock quotes
1:628add4: 	 * The openTSIA ( the index at the open)
1:628add4: 	 * The volume of shares traded,
1:628add4: 	 * Top Stocks gain and loss
1:628add4: 	 *
1:628add4: 	 * @return A snapshot of the current market summary
1:628add4: 	 */
1:628add4: 	public MarketSummaryDataBean getMarketSummary() throws Exception, RemoteException;
1:628add4: 
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Purchase a stock and create a new holding for the given user.
1:628add4: 	 * Given a stock symbol and quantity to purchase, retrieve the current quote price,
1:628add4: 	 * debit the user's account balance, and add holdings to user's portfolio.
1:628add4: 	 * buy/sell are asynchronous, using J2EE messaging, 
1:628add4: 	 * A new order is created and submitted for processing to the TradeBroker
1:628add4: 	 *
1:628add4: 	 * @param userID the customer requesting the stock purchase
1:628add4: 	 * @param symbol the symbol of the stock being purchased
1:628add4: 	 * @param quantity the quantity of shares to purchase	 
1:628add4: 	 * @return OrderDataBean providing the status of the newly created buy order
1:628add4: 	 */
1:628add4: 
1:628add4: 
1:628add4: 	public OrderDataBean buy(String userID, String symbol, double quantity, int orderProcessingMode) throws Exception, RemoteException;
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Sell a stock holding and removed the holding for the given user.
1:628add4: 	 * Given a Holding, retrieve current quote, credit user's account,
1:628add4: 	 * and reduce holdings in user's portfolio.
1:628add4: 	 *
1:628add4: 	 * @param userID the customer requesting the sell
1:628add4:  	 * @param holdingID the users holding to be sold
1:628add4: 	 * @return OrderDataBean providing the status of the newly created sell order
1:628add4: 	 */
1:628add4: 	public OrderDataBean sell(String userID, Integer holdingID, int orderProcessingMode) throws Exception, RemoteException;
1:628add4: 
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Queue the Order identified by orderID to be processed 
1:628add4: 	 * 
1:628add4: 	 * Orders are submitted through JMS to a Trading Broker
1:628add4: 	 * and completed asynchronously. This method queues the order for processing
1:628add4: 	 * 
1:628add4: 	 * The boolean twoPhase specifies to the server implementation whether or not the
1:628add4: 	 * method is to participate in a global transaction
1:628add4: 	 *
1:628add4: 	 * @param orderID the Order being queued for processing
1:628add4: 	 * @return OrderDataBean providing the status of the completed order
1:628add4: 	 */
1:628add4: 	public void queueOrder(Integer orderID, boolean twoPhase) throws Exception, RemoteException;
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Complete the Order identefied by orderID
1:628add4: 	 * Orders are submitted through JMS to a Trading agent
1:628add4: 	 * and completed asynchronously. This method completes the order
1:628add4: 	 * For a buy, the stock is purchased creating a holding and the users account is debited
1:628add4: 	 * For a sell, the stock holding is removed and the users account is credited with the proceeds
1:628add4: 	 * 
1:628add4: 	 * The boolean twoPhase specifies to the server implementation whether or not the
1:628add4: 	 * method is to participate in a global transaction
1:628add4: 	 *
1:628add4: 	 * @param orderID the Order to complete
1:628add4: 	 * @return OrderDataBean providing the status of the completed order
1:628add4: 	 */
1:628add4: 	public OrderDataBean completeOrder(Integer orderID, boolean twoPhase) throws Exception, RemoteException;
1:628add4: 	
1:628add4:    /**
1:628add4: 	 * Cancel the Order identefied by orderID
1:628add4: 	 * 
1:628add4: 	 * The boolean twoPhase specifies to the server implementation whether or not the
1:628add4: 	 * method is to participate in a global transaction
1:628add4: 	 *
1:628add4: 	 * @param orderID the Order to complete
1:628add4: 	 * @return OrderDataBean providing the status of the completed order
1:628add4: 	 */
1:628add4: 	public void cancelOrder(Integer orderID, boolean twoPhase) throws Exception, RemoteException;
1:628add4: 
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Signify an order has been completed for the given userID
1:628add4: 	 * 
1:628add4: 	 * @param userID the user for which an order has completed
1:628add4: 	 * @param orderID the order which has completed
1:628add4: 	 * 
1:628add4: 	 */
1:628add4: 	public void orderCompleted(String userID, Integer orderID) throws Exception, RemoteException;
1:628add4: 	
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Get the collection of all orders for a given account
1:628add4: 	 *
1:628add4: 	 * @param userID the customer account to retrieve orders for
1:628add4: 	 * @return Collection OrderDataBeans providing detailed order information
1:628add4: 	 */
1:628add4: 	public Collection getOrders(String userID) throws Exception, RemoteException;
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Get the collection of completed orders for a given account that need to be alerted to the user
1:628add4: 	 *
1:628add4: 	 * @param userID the customer account to retrieve orders for
1:628add4: 	 * @return Collection OrderDataBeans providing detailed order information
1:628add4: 	 */
1:628add4: 	public Collection getClosedOrders(String userID) throws Exception, RemoteException;
1:628add4: 
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Given a market symbol, price, and details, create and return a new {@link QuoteDataBean}
1:628add4: 	 *
1:628add4: 	 * @param symbol the symbol of the stock
1:628add4: 	 * @param price the current stock price
1:628add4: 	 * @param details a short description of the stock or company
1:628add4: 	 * @return a new QuoteDataBean or null if Quote could not be created
1:628add4: 	 */
1:628add4: 	public QuoteDataBean createQuote(String symbol, String companyName, BigDecimal price) throws Exception, RemoteException;
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Return a {@link QuoteDataBean} describing a current quote for the given stock symbol
1:628add4: 	 *
1:628add4: 	 * @param symbol the stock symbol to retrieve the current Quote
1:628add4: 	 * @return the QuoteDataBean
1:628add4: 	 */
1:628add4: 	public QuoteDataBean getQuote(String symbol) throws Exception, RemoteException;
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Return a {@link java.util.Collection} of {@link QuoteDataBean} 
1:628add4: 	 * describing all current quotes
1:628add4: 	 * @return A collection of  QuoteDataBean
1:628add4: 	 */
1:628add4: 	public Collection getAllQuotes() throws Exception, RemoteException;
1:628add4: 
1:628add4:    /**
1:628add4: 	 * Update the stock quote price and volume for the specified stock symbol
1:628add4: 	 *
1:628add4: 	 * @param symbol for stock quote to update
1:628add4: 	 * @param price the updated quote price
1:628add4: 	 * @return the QuoteDataBean describing the stock
1:628add4: 	 */
1:628add4: 	public QuoteDataBean updateQuotePriceVolume(String symbol, BigDecimal newPrice, double sharesTraded) throws Exception, RemoteException;
1:628add4: 
1:628add4: 		
1:628add4:    /**
1:628add4: 	 * Return the portfolio of stock holdings for the specified customer
1:628add4: 	 * as a collection of HoldingDataBeans
1:628add4: 	 *
1:628add4: 	 * @param userID the customer requesting the portfolio	 
1:628add4: 	 * @return Collection of the users portfolio of stock holdings
1:628add4: 	 */
1:628add4: 	public Collection getHoldings(String userID) throws Exception, RemoteException;
1:628add4: 
1:628add4:    /**
1:b8c0170: 	 * Return a specific user stock holding identified by the holdingID
1:628add4: 	 *
1:628add4: 	 * @param holdingID the holdingID to return	 
1:628add4: 	 * @return a HoldingDataBean describing the holding
1:628add4: 	 */
1:628add4: 	public HoldingDataBean getHolding(Integer holdingID) throws Exception, RemoteException;
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Return an AccountDataBean object for userID describing the account
1:628add4: 	 *
1:628add4: 	 * @param userID the account userID to lookup
1:628add4: 	 * @return User account data in AccountDataBean
1:628add4: 	 */	
1:628add4:    public AccountDataBean getAccountData(String userID) 
1:628add4:    		throws Exception, RemoteException;                              
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Return an AccountProfileDataBean for userID providing the users profile
1:628add4: 	 *
1:628add4: 	 * @param userID the account userID to lookup
1:628add4: 	 * @param User account profile data in AccountProfileDataBean
1:628add4: 	 */
1:628add4:    public AccountProfileDataBean getAccountProfileData(String userID) throws Exception, RemoteException;                              
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Update userID's account profile information using the provided AccountProfileDataBean object
1:628add4: 	 *
1:628add4: 	 * @param userID the account userID to lookup
1:628add4:          * @param password the updated password
1:628add4:          * @param fullName the updated fullName
1:628add4:          * @param address the updated address
1:628add4:          * @param address the updated email
1:628add4:          * @param the updated creditcard
1:628add4: 	 */
1:628add4:    public AccountProfileDataBean updateAccountProfile(String userID, String password, String fullName, String address, String email, String creditcard) throws Exception, RemoteException;                              
1:628add4: 
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Attempt to authenticate and login a user with the given password
1:628add4: 	 *
1:628add4: 	 * @param userID the customer to login
1:628add4: 	 * @param password the password entered by the customer for authentication
1:628add4: 	 * @return User account data in AccountDataBean
1:628add4: 	 */
1:628add4:    public AccountDataBean login(String userID, String password) throws Exception, RemoteException;                              
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Logout the given user
1:628add4: 	 *
1:628add4: 	 * @param userID the customer to logout 
1:628add4: 	 * @return the login status
1:628add4: 	 */
1:628add4: 
1:628add4:    public void logout(String userID) throws Exception, RemoteException; 
1:628add4:                                             
1:628add4: 	/**
1:628add4: 	 * Register a new Trade customer.
1:628add4: 	 * Create a new user profile, user registry entry, account with initial balance,
1:628add4: 	 * and empty portfolio.
1:628add4: 	 *
1:628add4: 	 * @param userID the new customer to register
1:628add4: 	 * @param password the customers password
1:628add4: 	 * @param fullname the customers fullname
1:628add4: 	 * @param address  the customers street address
1:628add4: 	 * @param email    the customers email address
1:628add4: 	 * @param creditcard the customers creditcard number
1:628add4: 	 * @param initialBalance the amount to charge to the customers credit to open the account and set the initial balance
1:628add4: 	 * @return the userID if successful, null otherwise
1:628add4: 	 */
1:628add4: 	public AccountDataBean register(String userID,
1:628add4: 								  String password,
1:628add4: 								  String fullname,
1:628add4: 								  String address,
1:628add4: 								  String email,
1:628add4: 								  String creditcard,
1:628add4: 								  BigDecimal openBalance) throws Exception, RemoteException;  
1:628add4: 
1:628add4:    /**
1:628add4:     * Get mode - returns the persistence mode
1:628add4:     * (TradeConfig.JDBC, JPA, etc...)
1:628add4:     *
1:8ef753d:     * @return TradeConfig.ModeType
1:628add4:     */
1:8ef753d:     public TradeConfig.ModeType getMode();
1:628add4: 
1:628add4: }   
1:628add4: 
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:8ef753d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
/////////////////////////////////////////////////////////////////////////
1:     * @return TradeConfig.ModeType
1:     public TradeConfig.ModeType getMode();
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
1: 	 * Return a specific user stock holding identified by the holdingID
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountProfileDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.MarketSummaryDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.api;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountProfileDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.MarketSummaryDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.OrderDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.QuoteDataBean;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.api;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.AccountProfileDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.MarketSummaryDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.OrderDataBean;
0: import org.apache.aries.samples.daytrader.persistence.api.QuoteDataBean;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.api;
1: 
1: 
1: import java.math.BigDecimal;
1: import java.rmi.Remote;
1: import java.rmi.RemoteException;
1: import java.util.Collection;
1: 
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountProfileDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.MarketSummaryDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.OrderDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.QuoteDataBean;
1: 
1: /**
1:   * TradeServices interface specifies the business methods provided by the Trade online broker application.
1:   * These business methods represent the features and operations that can be performed by customers of 
1:   * the brokerage such as login, logout, get a stock quote, buy or sell a stock, etc.
1:   * This interface is implemented by {@link Trade} providing an EJB implementation of these
1:   * business methods and also by {@link TradeDirect} providing a JDBC implementation.
1:   *
1:   * @see Trade
1:   * @see TradeDirect
1:   *
1:   */ 
1: public interface TradeServices extends Remote {
1: 
1:    /**
1: 	 * Compute and return a snapshot of the current market conditions
1: 	 * This includes the TSIA - an index of the price of the top 100 Trade stock quotes
1: 	 * The openTSIA ( the index at the open)
1: 	 * The volume of shares traded,
1: 	 * Top Stocks gain and loss
1: 	 *
1: 	 * @return A snapshot of the current market summary
1: 	 */
1: 	public MarketSummaryDataBean getMarketSummary() throws Exception, RemoteException;
1: 
1: 
1:    /**
1: 	 * Purchase a stock and create a new holding for the given user.
1: 	 * Given a stock symbol and quantity to purchase, retrieve the current quote price,
1: 	 * debit the user's account balance, and add holdings to user's portfolio.
1: 	 * buy/sell are asynchronous, using J2EE messaging, 
1: 	 * A new order is created and submitted for processing to the TradeBroker
1: 	 *
1: 	 * @param userID the customer requesting the stock purchase
1: 	 * @param symbol the symbol of the stock being purchased
1: 	 * @param quantity the quantity of shares to purchase	 
1: 	 * @return OrderDataBean providing the status of the newly created buy order
1: 	 */
1: 
1: 
1: 	public OrderDataBean buy(String userID, String symbol, double quantity, int orderProcessingMode) throws Exception, RemoteException;
1: 
1:    /**
1: 	 * Sell a stock holding and removed the holding for the given user.
1: 	 * Given a Holding, retrieve current quote, credit user's account,
1: 	 * and reduce holdings in user's portfolio.
1: 	 *
1: 	 * @param userID the customer requesting the sell
1:  	 * @param holdingID the users holding to be sold
1: 	 * @return OrderDataBean providing the status of the newly created sell order
1: 	 */
1: 	public OrderDataBean sell(String userID, Integer holdingID, int orderProcessingMode) throws Exception, RemoteException;
1: 
1: 
1:    /**
1: 	 * Queue the Order identified by orderID to be processed 
1: 	 * 
1: 	 * Orders are submitted through JMS to a Trading Broker
1: 	 * and completed asynchronously. This method queues the order for processing
1: 	 * 
1: 	 * The boolean twoPhase specifies to the server implementation whether or not the
1: 	 * method is to participate in a global transaction
1: 	 *
1: 	 * @param orderID the Order being queued for processing
1: 	 * @return OrderDataBean providing the status of the completed order
1: 	 */
1: 	public void queueOrder(Integer orderID, boolean twoPhase) throws Exception, RemoteException;
1: 
1:    /**
1: 	 * Complete the Order identefied by orderID
1: 	 * Orders are submitted through JMS to a Trading agent
1: 	 * and completed asynchronously. This method completes the order
1: 	 * For a buy, the stock is purchased creating a holding and the users account is debited
1: 	 * For a sell, the stock holding is removed and the users account is credited with the proceeds
1: 	 * 
1: 	 * The boolean twoPhase specifies to the server implementation whether or not the
1: 	 * method is to participate in a global transaction
1: 	 *
1: 	 * @param orderID the Order to complete
1: 	 * @return OrderDataBean providing the status of the completed order
1: 	 */
1: 	public OrderDataBean completeOrder(Integer orderID, boolean twoPhase) throws Exception, RemoteException;
1: 	
1:    /**
1: 	 * Cancel the Order identefied by orderID
1: 	 * 
1: 	 * The boolean twoPhase specifies to the server implementation whether or not the
1: 	 * method is to participate in a global transaction
1: 	 *
1: 	 * @param orderID the Order to complete
1: 	 * @return OrderDataBean providing the status of the completed order
1: 	 */
1: 	public void cancelOrder(Integer orderID, boolean twoPhase) throws Exception, RemoteException;
1: 
1: 
1:    /**
1: 	 * Signify an order has been completed for the given userID
1: 	 * 
1: 	 * @param userID the user for which an order has completed
1: 	 * @param orderID the order which has completed
1: 	 * 
1: 	 */
1: 	public void orderCompleted(String userID, Integer orderID) throws Exception, RemoteException;
1: 	
1: 
1:    /**
1: 	 * Get the collection of all orders for a given account
1: 	 *
1: 	 * @param userID the customer account to retrieve orders for
1: 	 * @return Collection OrderDataBeans providing detailed order information
1: 	 */
1: 	public Collection getOrders(String userID) throws Exception, RemoteException;
1: 
1:    /**
1: 	 * Get the collection of completed orders for a given account that need to be alerted to the user
1: 	 *
1: 	 * @param userID the customer account to retrieve orders for
1: 	 * @return Collection OrderDataBeans providing detailed order information
1: 	 */
1: 	public Collection getClosedOrders(String userID) throws Exception, RemoteException;
1: 
1: 
1: 	/**
1: 	 * Given a market symbol, price, and details, create and return a new {@link QuoteDataBean}
1: 	 *
1: 	 * @param symbol the symbol of the stock
1: 	 * @param price the current stock price
1: 	 * @param details a short description of the stock or company
1: 	 * @return a new QuoteDataBean or null if Quote could not be created
1: 	 */
1: 	public QuoteDataBean createQuote(String symbol, String companyName, BigDecimal price) throws Exception, RemoteException;
1: 
1:    /**
1: 	 * Return a {@link QuoteDataBean} describing a current quote for the given stock symbol
1: 	 *
1: 	 * @param symbol the stock symbol to retrieve the current Quote
1: 	 * @return the QuoteDataBean
1: 	 */
1: 	public QuoteDataBean getQuote(String symbol) throws Exception, RemoteException;
1: 
1:    /**
1: 	 * Return a {@link java.util.Collection} of {@link QuoteDataBean} 
1: 	 * describing all current quotes
1: 	 * @return A collection of  QuoteDataBean
1: 	 */
1: 	public Collection getAllQuotes() throws Exception, RemoteException;
1: 
1:    /**
1: 	 * Update the stock quote price and volume for the specified stock symbol
1: 	 *
1: 	 * @param symbol for stock quote to update
1: 	 * @param price the updated quote price
1: 	 * @return the QuoteDataBean describing the stock
1: 	 */
1: 	public QuoteDataBean updateQuotePriceVolume(String symbol, BigDecimal newPrice, double sharesTraded) throws Exception, RemoteException;
1: 
1: 		
1:    /**
1: 	 * Return the portfolio of stock holdings for the specified customer
1: 	 * as a collection of HoldingDataBeans
1: 	 *
1: 	 * @param userID the customer requesting the portfolio	 
1: 	 * @return Collection of the users portfolio of stock holdings
1: 	 */
1: 	public Collection getHoldings(String userID) throws Exception, RemoteException;
1: 
1:    /**
0: 	 * Return a specific user stock holding identifed by the holdingID
1: 	 *
1: 	 * @param holdingID the holdingID to return	 
1: 	 * @return a HoldingDataBean describing the holding
1: 	 */
1: 	public HoldingDataBean getHolding(Integer holdingID) throws Exception, RemoteException;
1: 
1: 	/**
1: 	 * Return an AccountDataBean object for userID describing the account
1: 	 *
1: 	 * @param userID the account userID to lookup
1: 	 * @return User account data in AccountDataBean
1: 	 */	
1:    public AccountDataBean getAccountData(String userID) 
1:    		throws Exception, RemoteException;                              
1: 
1: 	/**
1: 	 * Return an AccountProfileDataBean for userID providing the users profile
1: 	 *
1: 	 * @param userID the account userID to lookup
1: 	 * @param User account profile data in AccountProfileDataBean
1: 	 */
1:    public AccountProfileDataBean getAccountProfileData(String userID) throws Exception, RemoteException;                              
1: 
1: 	/**
1: 	 * Update userID's account profile information using the provided AccountProfileDataBean object
1: 	 *
1: 	 * @param userID the account userID to lookup
1:          * @param password the updated password
1:          * @param fullName the updated fullName
1:          * @param address the updated address
1:          * @param address the updated email
1:          * @param the updated creditcard
1: 	 */
1:    public AccountProfileDataBean updateAccountProfile(String userID, String password, String fullName, String address, String email, String creditcard) throws Exception, RemoteException;                              
1: 
1: 
1: 	/**
1: 	 * Attempt to authenticate and login a user with the given password
1: 	 *
1: 	 * @param userID the customer to login
1: 	 * @param password the password entered by the customer for authentication
1: 	 * @return User account data in AccountDataBean
1: 	 */
1:    public AccountDataBean login(String userID, String password) throws Exception, RemoteException;                              
1: 
1: 	/**
1: 	 * Logout the given user
1: 	 *
1: 	 * @param userID the customer to logout 
1: 	 * @return the login status
1: 	 */
1: 
1:    public void logout(String userID) throws Exception, RemoteException; 
1:                                             
1: 	/**
1: 	 * Register a new Trade customer.
1: 	 * Create a new user profile, user registry entry, account with initial balance,
1: 	 * and empty portfolio.
1: 	 *
1: 	 * @param userID the new customer to register
1: 	 * @param password the customers password
1: 	 * @param fullname the customers fullname
1: 	 * @param address  the customers street address
1: 	 * @param email    the customers email address
1: 	 * @param creditcard the customers creditcard number
1: 	 * @param initialBalance the amount to charge to the customers credit to open the account and set the initial balance
1: 	 * @return the userID if successful, null otherwise
1: 	 */
1: 	public AccountDataBean register(String userID,
1: 								  String password,
1: 								  String fullname,
1: 								  String address,
1: 								  String email,
1: 								  String creditcard,
1: 								  BigDecimal openBalance) throws Exception, RemoteException;  
1: 
1:    /**
1:     * Get mode - returns the persistence mode
1:     * (TradeConfig.JDBC, JPA, etc...)
1:     *
0:     * @return int mode
1:     */
0:     public int getMode();
1: 
1: }   
1: 
============================================================================