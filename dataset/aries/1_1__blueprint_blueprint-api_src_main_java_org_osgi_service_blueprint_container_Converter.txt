1:f13c6ac: /*
1:f13c6ac:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:f13c6ac:  *
1:f13c6ac:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f13c6ac:  * you may not use this file except in compliance with the License.
1:f13c6ac:  * You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:f13c6ac: package org.osgi.service.blueprint.container;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Type converter to convert an object to a target type.
1:f13c6ac:  * 
1:f13c6ac:  * @ThreadSafe
1:f13c6ac:  * @version $Revision$
1:f13c6ac:  */
1:f13c6ac: public interface Converter {
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return if this converter is able to convert the specified object to the
1:f13c6ac: 	 * specified type.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @param sourceObject The source object <code>s</code> to convert.
1:f13c6ac: 	 * @param targetType The target type <code>T</code>.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return <code>true</code> if the conversion is possible,
1:f13c6ac: 	 *         <code>false</code> otherwise.
1:f13c6ac: 	 */
1:f13c6ac: 	boolean canConvert(Object sourceObject, ReifiedType targetType);
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Convert the specified object to an instance of the specified type.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @param sourceObject The source object <code>s</code> to convert.
1:f13c6ac: 	 * @param targetType The target type <code>T</code>.
1:f13c6ac: 	 * @return An instance with a type that is assignable from targetType's raw
1:f13c6ac: 	 *         class
1:f13c6ac: 	 * @throws Exception If the conversion cannot succeed. This exception should
1:f13c6ac: 	 *         not be thrown when the {@link #canConvert canConvert} method has
1:f13c6ac: 	 *         returned <code>true</code>.
1:f13c6ac: 	 */
1:f13c6ac: 	Object convert(Object sourceObject, ReifiedType targetType)
1:f13c6ac: 			throws Exception;
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.blueprint.container;
1: 
1: /**
1:  * Type converter to convert an object to a target type.
1:  * 
1:  * @ThreadSafe
1:  * @version $Revision$
1:  */
1: public interface Converter {
1: 
1: 	/**
1: 	 * Return if this converter is able to convert the specified object to the
1: 	 * specified type.
1: 	 * 
1: 	 * @param sourceObject The source object <code>s</code> to convert.
1: 	 * @param targetType The target type <code>T</code>.
1: 	 * 
1: 	 * @return <code>true</code> if the conversion is possible,
1: 	 *         <code>false</code> otherwise.
1: 	 */
1: 	boolean canConvert(Object sourceObject, ReifiedType targetType);
1: 
1: 	/**
1: 	 * Convert the specified object to an instance of the specified type.
1: 	 * 
1: 	 * @param sourceObject The source object <code>s</code> to convert.
1: 	 * @param targetType The target type <code>T</code>.
1: 	 * @return An instance with a type that is assignable from targetType's raw
1: 	 *         class
1: 	 * @throws Exception If the conversion cannot succeed. This exception should
1: 	 *         not be thrown when the {@link #canConvert canConvert} method has
1: 	 *         returned <code>true</code>.
1: 	 */
1: 	Object convert(Object sourceObject, ReifiedType targetType)
1: 			throws Exception;
1: }
============================================================================