1:6110b39: /**
1:6110b39:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6110b39:  * contributor license agreements.  See the NOTICE file distributed with
1:6110b39:  * this work for additional information regarding copyright ownership.
1:6110b39:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6110b39:  * (the "License"); you may not use this file except in compliance with
1:6110b39:  * the License.  You may obtain a copy of the License at
1:6110b39:  *
1:6110b39:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6110b39:  *
1:6110b39:  * Unless required by applicable law or agreed to in writing, software
1:6110b39:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6110b39:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6110b39:  * See the License for the specific language governing permissions and
1:6110b39:  * limitations under the License.
1:6110b39:  */
1:c18101e: package org.apache.aries.blueprint.services;
1:c18101e: 
1:c89ef70: import java.net.URI;
1:c89ef70: import java.util.Collection;
1:c18101e: import java.util.List;
1:c18101e: 
1:c18101e: import org.osgi.framework.Bundle;
1:c18101e: import org.osgi.service.blueprint.container.BlueprintContainer;
1:c18101e: 
1:c18101e: public interface BlueprintExtenderService {
1:c18101e: 
1:c18101e:     /**
1:c18101e:      * Create Blueprint container for the application bundle 
1:c18101e:      * @param bundle the application bundle
1:c18101e:      * @return container
2:c18101e:      */
1:c18101e:     BlueprintContainer createContainer(Bundle bundle);
1:c18101e: 
1:c18101e:     /**
1:c18101e:      * Create Blueprint container for the application bundle using a list of Blueprint resources 
1:c18101e:      * @param bundle the application bundle
1:c18101e:      * @param blueprintPaths the application blueprint resources
1:c18101e:      * @return container
1:c89ef70:      */
1:c18101e:     BlueprintContainer createContainer(Bundle bundle, List<Object> blueprintPaths);
1:c18101e: 
1:c18101e:     /**
1:c89ef70:      * Create Blueprint container for the application bundle using a list of Blueprint resources
1:c89ef70:      * @param bundle the application bundle
1:c89ef70:      * @param blueprintPaths the application blueprint resources
1:c89ef70:      * @param namespaces additional namespaces to force reference to
1:c89ef70:      * @return container
1:c89ef70:      */
1:c89ef70:     BlueprintContainer createContainer(Bundle bundle, List<Object> blueprintPaths, Collection<URI> namespaces);
1:c89ef70: 
1:c89ef70:     /**
1:c18101e:      * Get an existing container for the application bundle
1:c18101e:      * @param bundle the application bundle
1:c18101e:      * @return container
1:c18101e:      */
1:c18101e:     BlueprintContainer getContainer(Bundle bundle);
1:c18101e: 
1:c18101e:     /**
1:c18101e:      * Destroy Blueprint container for the application bundle
1:c18101e:      * @param bundle the application bundle
1:c18101e:      * @param container the container
1:c18101e:      */
1:c18101e:     void destroyContainer(Bundle bundle, BlueprintContainer container);
1:c18101e: }
1:c18101e: 
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c89ef70
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:      */
1:      * Create Blueprint container for the application bundle using a list of Blueprint resources
1:      * @param bundle the application bundle
1:      * @param blueprintPaths the application blueprint resources
1:      * @param namespaces additional namespaces to force reference to
1:      * @return container
1:      */
1:     BlueprintContainer createContainer(Bundle bundle, List<Object> blueprintPaths, Collection<URI> namespaces);
1: 
1:     /**
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:6110b39
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Sergey Beryozkin
-------------------------------------------------------------------------------
commit:c18101e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.services;
1: 
1: import java.util.List;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
1: public interface BlueprintExtenderService {
1: 
1:     /**
1:      * Create Blueprint container for the application bundle 
1:      * @param bundle the application bundle
1:      * @return container
1:      */
1:     BlueprintContainer createContainer(Bundle bundle);
1: 
1:     /**
1:      * Create Blueprint container for the application bundle using a list of Blueprint resources 
1:      * @param bundle the application bundle
1:      * @param blueprintPaths the application blueprint resources
1:      * @return container
1:      */    
1:     BlueprintContainer createContainer(Bundle bundle, List<Object> blueprintPaths);
1: 
1:     /**
1:      * Get an existing container for the application bundle
1:      * @param bundle the application bundle
1:      * @return container
1:      */
1:     BlueprintContainer getContainer(Bundle bundle);
1: 
1:     /**
1:      * Destroy Blueprint container for the application bundle
1:      * @param bundle the application bundle
1:      * @param container the container
1:      */
1:     void destroyContainer(Bundle bundle, BlueprintContainer container);
1: }
1: 
============================================================================