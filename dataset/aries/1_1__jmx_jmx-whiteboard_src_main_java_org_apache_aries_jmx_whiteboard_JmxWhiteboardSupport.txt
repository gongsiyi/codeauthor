1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.whiteboard;
1:fdf3952: 
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.Arrays;
1:fdf3952: import java.util.IdentityHashMap;
1:fdf3952: 
1:fdf3952: import javax.management.MBeanRegistration;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.MalformedObjectNameException;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: 
1:fdf3952: import org.osgi.framework.ServiceReference;
1:fdf3952: import org.slf4j.Logger;
1:fdf3952: import org.slf4j.LoggerFactory;
1:fdf3952: 
1:fdf3952: class JmxWhiteboardSupport {
1:fdf3952: 
1:fdf3952:     static final String PROP_OBJECT_NAME = "jmx.objectname";
1:fdf3952: 
1:fdf3952:     /** default log */
1:fdf3952:     private final Logger log = LoggerFactory.getLogger(getClass());
1:fdf3952: 
1:fdf3952:     private MBeanServer[] mbeanServers = new MBeanServer[0];
1:fdf3952: 
1:fdf3952:     // mapping registered MBean services to their MBeanHolder objects
1:fdf3952:     private final IdentityHashMap<Object, MBeanHolder> mbeans = new IdentityHashMap<Object, MBeanHolder>();
1:fdf3952: 
1:fdf3952:     protected synchronized void addMBeanServer(final MBeanServer mbeanServer) {
1:fdf3952: 
1:fdf3952:         log.debug("addMBeanServer: Adding MBeanServer {}", mbeanServer);
1:fdf3952: 
1:fdf3952:         ArrayList<MBeanServer> serverList = new ArrayList<MBeanServer>(
1:fdf3952:             Arrays.asList(mbeanServers));
1:fdf3952:         serverList.add(mbeanServer);
1:fdf3952:         mbeanServers = serverList.toArray(new MBeanServer[serverList.size()]);
1:fdf3952: 
1:fdf3952:         // register all mbeans with the new server
1:fdf3952:         for (MBeanHolder mbean : mbeans.values()) {
1:fdf3952:             mbean.register(mbeanServer);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected synchronized void removeMBeanServer(final MBeanServer mbeanServer) {
1:fdf3952: 
1:fdf3952:         log.debug("removeMBeanServer: Removing MBeanServer {}", mbeanServer);
1:fdf3952: 
1:fdf3952:         // remove all dynamically registered mbeans from the server
1:fdf3952:         for (MBeanHolder mbean : mbeans.values()) {
1:fdf3952:             mbean.unregister(mbeanServer);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         ArrayList<MBeanServer> serverList = new ArrayList<MBeanServer>(
1:fdf3952:             Arrays.asList(mbeanServers));
1:fdf3952:         serverList.remove(mbeanServer);
1:fdf3952:         mbeanServers = serverList.toArray(new MBeanServer[serverList.size()]);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected synchronized void registerMBean(Object mbean, final ServiceReference props) {
1:fdf3952: 
1:fdf3952:         log.debug("registerMBean: Adding MBean {}", mbean);
1:fdf3952: 
1:fdf3952:         ObjectName objectName = getObjectName(props);
1:fdf3952:         if (objectName != null || mbean instanceof MBeanRegistration) {
1:fdf3952:             MBeanHolder holder = MBeanHolder.create(mbean, objectName);
1:fdf3952:             if (holder != null) {
1:fdf3952:                 MBeanServer[] mbeanServers = this.mbeanServers;
1:fdf3952:                 for (MBeanServer mbeanServer : mbeanServers) {
1:fdf3952:                     holder.register(mbeanServer);
1:fdf3952:                 }
1:fdf3952:                 mbeans.put(mbean, holder);
1:fdf3952:             } else {
1:fdf3952:                 log.error(
1:fdf3952:                     "registerMBean: Cannot register MBean service {} with MBean servers: Not an instanceof DynamicMBean or not MBean spec compliant standard MBean",
1:fdf3952:                     mbean);
1:fdf3952:             }
1:fdf3952:         } else {
1:fdf3952:             log.error(
1:fdf3952:                 "registerMBean: MBean service {} not registered with valid jmx.objectname propety and not implementing MBeanRegistration interface; not registering with MBean servers",
1:fdf3952:                 mbean);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected synchronized void unregisterMBean(Object mbean) {
1:fdf3952: 
1:fdf3952:         log.debug("unregisterMBean: Removing MBean {}", mbean);
1:fdf3952: 
1:fdf3952:         final MBeanHolder holder = mbeans.remove(mbean);
1:fdf3952:         if (holder != null) {
1:fdf3952:             holder.unregister();
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private ObjectName getObjectName(final ServiceReference props) {
1:fdf3952:         Object oName = props.getProperty(PROP_OBJECT_NAME);
1:fdf3952:         if (oName instanceof ObjectName) {
1:fdf3952:             return (ObjectName) oName;
1:fdf3952:         } else if (oName instanceof String) {
1:fdf3952:             try {
1:fdf3952:                 return new ObjectName((String) oName);
1:fdf3952:             } catch (MalformedObjectNameException e) {
1:fdf3952:                 log.error("getObjectName: Provided ObjectName property "
1:fdf3952:                     + oName + " cannot be used as an ObjectName", e);
1:fdf3952:             }
1:fdf3952:         } else {
1:fdf3952:             log.info(
1:fdf3952:                 "getObjectName: Missing {} service property (or wrong type); registering if MBean is MBeanRegistration implementation",
1:fdf3952:                 PROP_OBJECT_NAME);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.whiteboard;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.IdentityHashMap;
1: 
1: import javax.management.MBeanRegistration;
1: import javax.management.MBeanServer;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.osgi.framework.ServiceReference;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: class JmxWhiteboardSupport {
1: 
1:     static final String PROP_OBJECT_NAME = "jmx.objectname";
1: 
1:     /** default log */
1:     private final Logger log = LoggerFactory.getLogger(getClass());
1: 
1:     private MBeanServer[] mbeanServers = new MBeanServer[0];
1: 
1:     // mapping registered MBean services to their MBeanHolder objects
1:     private final IdentityHashMap<Object, MBeanHolder> mbeans = new IdentityHashMap<Object, MBeanHolder>();
1: 
1:     protected synchronized void addMBeanServer(final MBeanServer mbeanServer) {
1: 
1:         log.debug("addMBeanServer: Adding MBeanServer {}", mbeanServer);
1: 
1:         ArrayList<MBeanServer> serverList = new ArrayList<MBeanServer>(
1:             Arrays.asList(mbeanServers));
1:         serverList.add(mbeanServer);
1:         mbeanServers = serverList.toArray(new MBeanServer[serverList.size()]);
1: 
1:         // register all mbeans with the new server
1:         for (MBeanHolder mbean : mbeans.values()) {
1:             mbean.register(mbeanServer);
1:         }
1:     }
1: 
1:     protected synchronized void removeMBeanServer(final MBeanServer mbeanServer) {
1: 
1:         log.debug("removeMBeanServer: Removing MBeanServer {}", mbeanServer);
1: 
1:         // remove all dynamically registered mbeans from the server
1:         for (MBeanHolder mbean : mbeans.values()) {
1:             mbean.unregister(mbeanServer);
1:         }
1: 
1:         ArrayList<MBeanServer> serverList = new ArrayList<MBeanServer>(
1:             Arrays.asList(mbeanServers));
1:         serverList.remove(mbeanServer);
1:         mbeanServers = serverList.toArray(new MBeanServer[serverList.size()]);
1:     }
1: 
1:     protected synchronized void registerMBean(Object mbean, final ServiceReference props) {
1: 
1:         log.debug("registerMBean: Adding MBean {}", mbean);
1: 
1:         ObjectName objectName = getObjectName(props);
1:         if (objectName != null || mbean instanceof MBeanRegistration) {
1:             MBeanHolder holder = MBeanHolder.create(mbean, objectName);
1:             if (holder != null) {
1:                 MBeanServer[] mbeanServers = this.mbeanServers;
1:                 for (MBeanServer mbeanServer : mbeanServers) {
1:                     holder.register(mbeanServer);
1:                 }
1:                 mbeans.put(mbean, holder);
1:             } else {
1:                 log.error(
1:                     "registerMBean: Cannot register MBean service {} with MBean servers: Not an instanceof DynamicMBean or not MBean spec compliant standard MBean",
1:                     mbean);
1:             }
1:         } else {
1:             log.error(
1:                 "registerMBean: MBean service {} not registered with valid jmx.objectname propety and not implementing MBeanRegistration interface; not registering with MBean servers",
1:                 mbean);
1:         }
1:     }
1: 
1:     protected synchronized void unregisterMBean(Object mbean) {
1: 
1:         log.debug("unregisterMBean: Removing MBean {}", mbean);
1: 
1:         final MBeanHolder holder = mbeans.remove(mbean);
1:         if (holder != null) {
1:             holder.unregister();
1:         }
1:     }
1: 
1:     private ObjectName getObjectName(final ServiceReference props) {
1:         Object oName = props.getProperty(PROP_OBJECT_NAME);
1:         if (oName instanceof ObjectName) {
1:             return (ObjectName) oName;
1:         } else if (oName instanceof String) {
1:             try {
1:                 return new ObjectName((String) oName);
1:             } catch (MalformedObjectNameException e) {
1:                 log.error("getObjectName: Provided ObjectName property "
1:                     + oName + " cannot be used as an ObjectName", e);
1:             }
1:         } else {
1:             log.info(
1:                 "getObjectName: Missing {} service property (or wrong type); registering if MBean is MBeanRegistration implementation",
1:                 PROP_OBJECT_NAME);
1:         }
1: 
1:         return null;
1:     }
1: }
============================================================================