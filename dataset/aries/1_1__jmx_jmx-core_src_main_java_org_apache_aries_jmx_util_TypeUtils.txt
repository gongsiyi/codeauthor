1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
6:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.util;
1:fdf3952: 
1:fdf3952: import static org.osgi.jmx.JmxConstants.BIGDECIMAL;
1:fdf3952: import static org.osgi.jmx.JmxConstants.BIGINTEGER;
1:fdf3952: import static org.osgi.jmx.JmxConstants.BOOLEAN;
1:fdf3952: import static org.osgi.jmx.JmxConstants.BYTE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.CHARACTER;
1:fdf3952: import static org.osgi.jmx.JmxConstants.DOUBLE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.FLOAT;
1:fdf3952: import static org.osgi.jmx.JmxConstants.INTEGER;
1:fdf3952: import static org.osgi.jmx.JmxConstants.LONG;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_BYTE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_CHAR;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_DOUBLE;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_FLOAT;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_INT;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_LONG;
1:fdf3952: import static org.osgi.jmx.JmxConstants.P_SHORT;
1:fdf3952: import static org.osgi.jmx.JmxConstants.SHORT;
1:fdf3952: import static org.osgi.jmx.JmxConstants.STRING;
1:65b0a8e: import static org.osgi.jmx.JmxConstants.VERSION;
1:fdf3952: 
1:fdf3952: import java.lang.reflect.Constructor;
1:fdf3952: import java.lang.reflect.InvocationTargetException;
1:fdf3952: import java.lang.reflect.Method;
1:fdf3952: import java.math.BigDecimal;
1:fdf3952: import java.math.BigInteger;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Enumeration;
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:65b0a8e: import org.osgi.framework.Version;
1:65b0a8e: 
1:fdf3952: /**
1:fdf3952:  * This class provides common utilities related to type conversions for the MBean implementations
1:65b0a8e:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class TypeUtils {
1:fdf3952: 
1:fdf3952:     private TypeUtils() {
1:fdf3952:         super();
2:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public static Map<String, Class<? extends Object>> primitiveTypes = new HashMap<String, Class<? extends Object>>();
1:fdf3952:     public static Map<String, Class<? extends Object>> wrapperTypes = new HashMap<String, Class<? extends Object>>();
1:fdf3952:     public static Map<String, Class<? extends Object>> mathTypes = new HashMap<String, Class<? extends Object>>();
1:fdf3952:     public static Map<Class<? extends Object>, Class<? extends Object>> primitiveToWrapper = new HashMap<Class<? extends Object>, Class<? extends Object>>();
1:fdf3952:     public static Map<String, Class<? extends Object>> types = new HashMap<String, Class<? extends Object>>();
1:fdf3952: 
1:fdf3952:     static {
1:fdf3952:         primitiveTypes.put(P_FLOAT, Float.TYPE);
1:fdf3952:         primitiveTypes.put(P_INT, Integer.TYPE);
1:fdf3952:         primitiveTypes.put(P_LONG, Long.TYPE);
1:fdf3952:         primitiveTypes.put(P_DOUBLE, Double.TYPE);
1:fdf3952:         primitiveTypes.put(P_BYTE, Byte.TYPE);
1:fdf3952:         primitiveTypes.put(P_SHORT, Short.TYPE);
1:fdf3952:         primitiveTypes.put(P_CHAR, Character.TYPE);
1:fdf3952:         primitiveTypes.put(P_BOOLEAN, Boolean.TYPE);
1:fdf3952:         primitiveToWrapper.put(Float.TYPE, Float.class);
1:fdf3952:         primitiveToWrapper.put(Integer.TYPE, Integer.class);
1:fdf3952:         primitiveToWrapper.put(Long.TYPE, Long.class);
1:fdf3952:         primitiveToWrapper.put(Double.TYPE, Double.class);
1:fdf3952:         primitiveToWrapper.put(Byte.TYPE, Byte.class);
1:fdf3952:         primitiveToWrapper.put(Short.TYPE, Short.class);
1:fdf3952:         primitiveToWrapper.put(Boolean.TYPE, Boolean.class);
1:fdf3952:         wrapperTypes.put(INTEGER, Integer.class);
1:fdf3952:         wrapperTypes.put(FLOAT, Float.class);
1:fdf3952:         wrapperTypes.put(LONG, Long.class);
1:fdf3952:         wrapperTypes.put(DOUBLE, Double.class);
1:fdf3952:         wrapperTypes.put(BYTE, Byte.class);
1:fdf3952:         wrapperTypes.put(SHORT, Short.class);
1:fdf3952:         wrapperTypes.put(BOOLEAN, Boolean.class);
1:fdf3952:         wrapperTypes.put(CHARACTER, Character.class);
1:65b0a8e:         wrapperTypes.put(VERSION, Version.class);
1:fdf3952:         mathTypes.put(BIGDECIMAL, BigDecimal.class);
1:fdf3952:         mathTypes.put(BIGINTEGER, BigInteger.class);
1:fdf3952:         types.put(STRING, String.class);
1:fdf3952:         types.putAll(primitiveTypes);
1:fdf3952:         types.putAll(wrapperTypes);
1:fdf3952:         types.putAll(mathTypes);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Converts a <code>Dictionary</code> object to a <code>Map</code>
1:65b0a8e:      *
1:fdf3952:      * @param dictionary
1:fdf3952:      * @return
1:fdf3952:      */
1:fdf3952:     public static Map<String, String> fromDictionary(Dictionary<String, String> dictionary) {
1:fdf3952:         Map<String, String> result = new HashMap<String, String>();
1:fdf3952:         Enumeration<String> keys = dictionary.keys();
1:fdf3952:         while (keys.hasMoreElements()) {
1:fdf3952:             String key = keys.nextElement();
1:fdf3952:             result.put(key, dictionary.get(key));
1:fdf3952:         }
1:fdf3952:         return result;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Converts primitive long[] array to Long[]
1:65b0a8e:      *
1:fdf3952:      * @param array
1:fdf3952:      * @return
1:fdf3952:      */
1:fdf3952:     public static Long[] toLong(long[] array) {
1:fdf3952:         Long[] toArray = (array == null) ? new Long[0] : new Long[array.length];
1:fdf3952:         for (int i = 0; i < toArray.length; i++) {
1:fdf3952:             toArray[i] = array[i];
1:fdf3952:         }
1:fdf3952:         return toArray;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Converts Long[] array to primitive
1:65b0a8e:      *
1:fdf3952:      * @param array
1:fdf3952:      * @return
1:fdf3952:      */
1:fdf3952:     public static long[] toPrimitive(Long[] array) {
1:fdf3952:         long[] toArray = (array == null) ? new long[0] : new long[array.length];
1:fdf3952:         for (int i = 0; i < toArray.length; i++) {
1:fdf3952:             toArray[i] = array[i];
1:fdf3952:         }
1:fdf3952:         return toArray;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Converts a String value to an Object of the specified type
1:65b0a8e:      *
1:fdf3952:      * @param type
1:fdf3952:      *            one of types listed in {@link #types}
1:fdf3952:      * @param value
1:fdf3952:      * @return instance of class <code>type</code>
1:fdf3952:      * @throws IllegalArgumentException
1:fdf3952:      *             if type or value are null or if the Class type does not support a valueOf() or cannot be converted to
1:fdf3952:      *             a wrapper type
1:fdf3952:      */
1:fdf3952:     @SuppressWarnings("unchecked")
1:fdf3952:     public static <T> T fromString(Class<T> type, String value) {
1:fdf3952:         if (type == null || !types.containsValue(type)) {
1:fdf3952:             throw new IllegalArgumentException("Cannot convert to type argument : " + type);
1:fdf3952:         }
1:fdf3952:         if (value == null || value.length() < 1) {
1:fdf3952:             throw new IllegalArgumentException("Argument value cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         T result = null;
1:fdf3952:         try {
1:fdf3952:             if (type.equals(String.class)) {
1:fdf3952:                 result = (T) value;
1:fdf3952:             } else if (type.equals(Character.class) || type.equals(Character.TYPE)) {
1:fdf3952:                 result = (T) Character.valueOf(value.charAt(0));
1:fdf3952:             } else if (wrapperTypes.containsValue(type) || mathTypes.containsValue(type)) {
1:fdf3952:                 Constructor<? extends Object> constructor = type.getConstructor(String.class);
1:fdf3952:                 result = (T) constructor.newInstance(value);
1:fdf3952:             } else if (primitiveToWrapper.containsKey(type)) { // attempt to promote to wrapper and resolve to the base
1:fdf3952:                                                                // type
1:fdf3952:                 Class<? extends Object> promotedType = primitiveToWrapper.get(type);
1:fdf3952:                 char[] simpleTypeName = type.getName().toCharArray();
1:fdf3952:                 simpleTypeName[0] = Character.toUpperCase(simpleTypeName[0]);
1:fdf3952:                 String parseMethodName = "parse" + new String(simpleTypeName);
1:fdf3952:                 Method parseMethod = promotedType.getDeclaredMethod(parseMethodName, String.class);
1:fdf3952:                 result = (T) parseMethod.invoke(null, value);
1:65b0a8e:             }
1:fdf3952:         } catch (SecurityException e) {
1:fdf3952:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:fdf3952:         } catch (NoSuchMethodException e) {
1:fdf3952:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:fdf3952:         } catch (IllegalArgumentException e) {
1:fdf3952:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:fdf3952:         } catch (IllegalAccessException e) {
1:fdf3952:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:fdf3952:         } catch (InvocationTargetException e) {
1:fdf3952:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:fdf3952:         } catch (InstantiationException e) {
1:fdf3952:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:fdf3952:         }
1:fdf3952:         return result;
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:65b0a8e
/////////////////////////////////////////////////////////////////////////
1: import static org.osgi.jmx.JmxConstants.VERSION;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Version;
1: 
1:  *
/////////////////////////////////////////////////////////////////////////
1:         wrapperTypes.put(VERSION, Version.class);
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:             }
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.util;
1: 
1: import static org.osgi.jmx.JmxConstants.BIGDECIMAL;
1: import static org.osgi.jmx.JmxConstants.BIGINTEGER;
1: import static org.osgi.jmx.JmxConstants.BOOLEAN;
1: import static org.osgi.jmx.JmxConstants.BYTE;
1: import static org.osgi.jmx.JmxConstants.CHARACTER;
1: import static org.osgi.jmx.JmxConstants.DOUBLE;
1: import static org.osgi.jmx.JmxConstants.FLOAT;
1: import static org.osgi.jmx.JmxConstants.INTEGER;
1: import static org.osgi.jmx.JmxConstants.LONG;
1: import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
1: import static org.osgi.jmx.JmxConstants.P_BYTE;
1: import static org.osgi.jmx.JmxConstants.P_CHAR;
1: import static org.osgi.jmx.JmxConstants.P_DOUBLE;
1: import static org.osgi.jmx.JmxConstants.P_FLOAT;
1: import static org.osgi.jmx.JmxConstants.P_INT;
1: import static org.osgi.jmx.JmxConstants.P_LONG;
1: import static org.osgi.jmx.JmxConstants.P_SHORT;
1: import static org.osgi.jmx.JmxConstants.SHORT;
1: import static org.osgi.jmx.JmxConstants.STRING;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
1:  * This class provides common utilities related to type conversions for the MBean implementations
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class TypeUtils {
1: 
1:     private TypeUtils() {
1:         super();
1:     }
1: 
1:     public static Map<String, Class<? extends Object>> primitiveTypes = new HashMap<String, Class<? extends Object>>();
1:     public static Map<String, Class<? extends Object>> wrapperTypes = new HashMap<String, Class<? extends Object>>();
1:     public static Map<String, Class<? extends Object>> mathTypes = new HashMap<String, Class<? extends Object>>();
1:     public static Map<Class<? extends Object>, Class<? extends Object>> primitiveToWrapper = new HashMap<Class<? extends Object>, Class<? extends Object>>();
1:     public static Map<String, Class<? extends Object>> types = new HashMap<String, Class<? extends Object>>();
1: 
1:     static {
1:         primitiveTypes.put(P_FLOAT, Float.TYPE);
1:         primitiveTypes.put(P_INT, Integer.TYPE);
1:         primitiveTypes.put(P_LONG, Long.TYPE);
1:         primitiveTypes.put(P_DOUBLE, Double.TYPE);
1:         primitiveTypes.put(P_BYTE, Byte.TYPE);
1:         primitiveTypes.put(P_SHORT, Short.TYPE);
1:         primitiveTypes.put(P_CHAR, Character.TYPE);
1:         primitiveTypes.put(P_BOOLEAN, Boolean.TYPE);
1:         primitiveToWrapper.put(Float.TYPE, Float.class);
1:         primitiveToWrapper.put(Integer.TYPE, Integer.class);
1:         primitiveToWrapper.put(Long.TYPE, Long.class);
1:         primitiveToWrapper.put(Double.TYPE, Double.class);
1:         primitiveToWrapper.put(Byte.TYPE, Byte.class);
1:         primitiveToWrapper.put(Short.TYPE, Short.class);
1:         primitiveToWrapper.put(Boolean.TYPE, Boolean.class);
1:         wrapperTypes.put(INTEGER, Integer.class);
1:         wrapperTypes.put(FLOAT, Float.class);
1:         wrapperTypes.put(LONG, Long.class);
1:         wrapperTypes.put(DOUBLE, Double.class);
1:         wrapperTypes.put(BYTE, Byte.class);
1:         wrapperTypes.put(SHORT, Short.class);
1:         wrapperTypes.put(BOOLEAN, Boolean.class);
1:         wrapperTypes.put(CHARACTER, Character.class);
1:         mathTypes.put(BIGDECIMAL, BigDecimal.class);
1:         mathTypes.put(BIGINTEGER, BigInteger.class);
1:         types.put(STRING, String.class);
1:         types.putAll(primitiveTypes);
1:         types.putAll(wrapperTypes);
1:         types.putAll(mathTypes);
1:     }
1: 
1:     /**
1:      * Converts a <code>Dictionary</code> object to a <code>Map</code>
1:      * 
1:      * @param dictionary
1:      * @return
1:      */
1:     public static Map<String, String> fromDictionary(Dictionary<String, String> dictionary) {
1:         Map<String, String> result = new HashMap<String, String>();
1:         Enumeration<String> keys = dictionary.keys();
1:         while (keys.hasMoreElements()) {
1:             String key = keys.nextElement();
1:             result.put(key, dictionary.get(key));
1:         }
1:         return result;
1:     }
1: 
1:     /**
1:      * Converts primitive long[] array to Long[]
1:      * 
1:      * @param array
1:      * @return
1:      */
1:     public static Long[] toLong(long[] array) {
1:         Long[] toArray = (array == null) ? new Long[0] : new Long[array.length];
1:         for (int i = 0; i < toArray.length; i++) {
1:             toArray[i] = array[i];
1:         }
1:         return toArray;
1:     }
1: 
1:     /**
1:      * Converts Long[] array to primitive
1:      * 
1:      * @param array
1:      * @return
1:      */
1:     public static long[] toPrimitive(Long[] array) {
1:         long[] toArray = (array == null) ? new long[0] : new long[array.length];
1:         for (int i = 0; i < toArray.length; i++) {
1:             toArray[i] = array[i];
1:         }
1:         return toArray;
1:     }
1: 
1:     /**
1:      * Converts a String value to an Object of the specified type
1:      * 
1:      * @param type
1:      *            one of types listed in {@link #types}
1:      * @param value
1:      * @return instance of class <code>type</code>
1:      * @throws IllegalArgumentException
1:      *             if type or value are null or if the Class type does not support a valueOf() or cannot be converted to
1:      *             a wrapper type
1:      */
1:     @SuppressWarnings("unchecked")
1:     public static <T> T fromString(Class<T> type, String value) {
1:         if (type == null || !types.containsValue(type)) {
1:             throw new IllegalArgumentException("Cannot convert to type argument : " + type);
1:         }
1:         if (value == null || value.length() < 1) {
1:             throw new IllegalArgumentException("Argument value cannot be null or empty");
1:         }
1:         T result = null;
1:         try {
1:             if (type.equals(String.class)) {
1:                 result = (T) value;
1:             } else if (type.equals(Character.class) || type.equals(Character.TYPE)) {
1:                 result = (T) Character.valueOf(value.charAt(0));
1:             } else if (wrapperTypes.containsValue(type) || mathTypes.containsValue(type)) {
1:                 Constructor<? extends Object> constructor = type.getConstructor(String.class);
1:                 result = (T) constructor.newInstance(value);
1:             } else if (primitiveToWrapper.containsKey(type)) { // attempt to promote to wrapper and resolve to the base
1:                                                                // type
1:                 Class<? extends Object> promotedType = primitiveToWrapper.get(type);
1:                 char[] simpleTypeName = type.getName().toCharArray();
1:                 simpleTypeName[0] = Character.toUpperCase(simpleTypeName[0]);
1:                 String parseMethodName = "parse" + new String(simpleTypeName);
1:                 Method parseMethod = promotedType.getDeclaredMethod(parseMethodName, String.class);
1:                 result = (T) parseMethod.invoke(null, value);
1:             } 
1:         } catch (SecurityException e) {
1:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:         } catch (NoSuchMethodException e) {
1:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:         } catch (IllegalArgumentException e) {
1:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:         } catch (IllegalAccessException e) {
1:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:         } catch (InvocationTargetException e) {
1:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:         } catch (InstantiationException e) {
1:             throw new IllegalArgumentException("Cannot convert value [" + value + "] to type [" + type + "]", e);
1:         }
1:         return result;
1:     }
1: }
============================================================================