1:8ad6b99: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:8ad6b99:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8ad6b99:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:8ad6b99:  */
1:8ad6b99: package org.apache.aries.subsystem.core.archive;
1:8ad6b99: 
1:8ad6b99: import java.util.Collection;
1:8ad6b99: import java.util.Collections;
1:8ad6b99: import java.util.HashMap;
1:8ad6b99: import java.util.Map;
1:8ad6b99: 
1:8ad6b99: import org.apache.aries.subsystem.core.internal.AbstractCapability;
1:8ad6b99: import org.osgi.framework.namespace.HostNamespace;
1:8ad6b99: import org.osgi.resource.Resource;
1:8ad6b99: 
1:8ad6b99: public class FragmentHostCapability extends AbstractCapability {
1:8ad6b99: 	public static final String ATTRIBUTE_BUNDLE_VERSION = HostNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
1:8ad6b99: 	public static final String NAMESPACE = HostNamespace.HOST_NAMESPACE;
1:8ad6b99: 	
1:8ad6b99: 	private static Map<String, Object> initializeAttributes(BundleSymbolicNameHeader bsn, BundleVersionHeader version) {
1:8ad6b99: 		if (version == null) {
1:8ad6b99: 			version = new BundleVersionHeader();
1:8ad6b99: 		}
1:8ad6b99: 		Clause clause = bsn.getClauses().get(0);
1:8ad6b99: 		Collection<Attribute> attributes = clause.getAttributes();
1:8ad6b99: 		Map<String, Object> result = new HashMap<String, Object>(attributes.size() + 2);
1:8ad6b99: 		result.put(NAMESPACE, clause.getPath());
1:4a9e033: 		result.put(ATTRIBUTE_BUNDLE_VERSION, version.getVersion());
1:8ad6b99: 		for (Attribute attribute : attributes) {
1:8ad6b99: 			result.put(attribute.getName(), attribute.getValue());
1:8ad6b99: 		}
1:8ad6b99: 		return Collections.unmodifiableMap(result);
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	private static Map<String, String> initializeDirectives(Collection<Directive> directives) {
1:8ad6b99: 		if (directives.isEmpty())
1:8ad6b99: 			return Collections.emptyMap();
1:8ad6b99: 		Map<String, String> result = new HashMap<String, String>(directives.size());
1:8ad6b99: 		for (Directive directive : directives) {
1:8ad6b99: 			result.put(directive.getName(), directive.getValue());
1:8ad6b99: 		}
1:8ad6b99: 		return Collections.unmodifiableMap(result);
1:8ad6b99: 	}
1:8ad6b99: 	
1:8ad6b99: 	private final Map<String, Object> attributes;
1:8ad6b99: 	private final Map<String, String> directives;
1:8ad6b99: 	private final Resource resource;
1:8ad6b99: 	
1:8ad6b99: 	public FragmentHostCapability(BundleSymbolicNameHeader bsn, BundleVersionHeader version, Resource resource) {
1:8ad6b99: 		if (resource == null)
1:8ad6b99: 			throw new NullPointerException("Missing required parameter: resource");
1:8ad6b99: 		this.resource = resource;
1:8ad6b99: 		attributes = initializeAttributes(bsn, version);
1:8ad6b99: 		directives = initializeDirectives(bsn.getClauses().get(0).getDirectives());
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Map<String, Object> getAttributes() {
1:8ad6b99: 		return attributes;
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Map<String, String> getDirectives() {
1:8ad6b99: 		return directives;
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public String getNamespace() {
1:8ad6b99: 		return NAMESPACE;
1:8ad6b99: 	}
1:8ad6b99: 
1:8ad6b99: 	@Override
1:8ad6b99: 	public Resource getResource() {
1:8ad6b99: 		return resource;
1:8ad6b99: 	}
1:8ad6b99: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:4a9e033
/////////////////////////////////////////////////////////////////////////
1: 		result.put(ATTRIBUTE_BUNDLE_VERSION, version.getVersion());
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.internal.AbstractCapability;
1: import org.osgi.framework.namespace.HostNamespace;
1: import org.osgi.resource.Resource;
1: 
1: public class FragmentHostCapability extends AbstractCapability {
1: 	public static final String ATTRIBUTE_BUNDLE_VERSION = HostNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE;
1: 	public static final String NAMESPACE = HostNamespace.HOST_NAMESPACE;
1: 	
1: 	private static Map<String, Object> initializeAttributes(BundleSymbolicNameHeader bsn, BundleVersionHeader version) {
1: 		if (version == null) {
1: 			version = new BundleVersionHeader();
1: 		}
1: 		Clause clause = bsn.getClauses().get(0);
1: 		Collection<Attribute> attributes = clause.getAttributes();
1: 		Map<String, Object> result = new HashMap<String, Object>(attributes.size() + 2);
1: 		result.put(NAMESPACE, clause.getPath());
0: 		result.put(ATTRIBUTE_BUNDLE_VERSION, version.getValue());
1: 		for (Attribute attribute : attributes) {
1: 			result.put(attribute.getName(), attribute.getValue());
1: 		}
1: 		return Collections.unmodifiableMap(result);
1: 	}
1: 	
1: 	private static Map<String, String> initializeDirectives(Collection<Directive> directives) {
1: 		if (directives.isEmpty())
1: 			return Collections.emptyMap();
1: 		Map<String, String> result = new HashMap<String, String>(directives.size());
1: 		for (Directive directive : directives) {
1: 			result.put(directive.getName(), directive.getValue());
1: 		}
1: 		return Collections.unmodifiableMap(result);
1: 	}
1: 	
1: 	private final Map<String, Object> attributes;
1: 	private final Map<String, String> directives;
1: 	private final Resource resource;
1: 	
1: 	public FragmentHostCapability(BundleSymbolicNameHeader bsn, BundleVersionHeader version, Resource resource) {
1: 		if (resource == null)
1: 			throw new NullPointerException("Missing required parameter: resource");
1: 		this.resource = resource;
1: 		attributes = initializeAttributes(bsn, version);
1: 		directives = initializeDirectives(bsn.getClauses().get(0).getDirectives());
1: 	}
1: 
1: 	@Override
1: 	public Map<String, Object> getAttributes() {
1: 		return attributes;
1: 	}
1: 
1: 	@Override
1: 	public Map<String, String> getDirectives() {
1: 		return directives;
1: 	}
1: 
1: 	@Override
1: 	public String getNamespace() {
1: 		return NAMESPACE;
1: 	}
1: 
1: 	@Override
1: 	public Resource getResource() {
1: 		return resource;
1: 	}
1: }
============================================================================