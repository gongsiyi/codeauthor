1:2960c84: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:2960c84:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
2:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
2:2960c84:  */
1:96d4e06: package org.apache.aries.proxy.impl.weaving;
1:2960c84: 
1:96d4e06: import static org.objectweb.asm.Opcodes.ACC_ANNOTATION;
1:96d4e06: import static org.objectweb.asm.Opcodes.ACC_ENUM;
1:96d4e06: import static org.objectweb.asm.Opcodes.ACC_INTERFACE;
1:2960c84: 
1:475ef33: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
1:e6518d7: import org.apache.aries.proxy.impl.common.OSGiFriendlyClassVisitor;
1:475ef33: import org.apache.aries.proxy.impl.common.OSGiFriendlyClassWriter;
1:e182908: import org.objectweb.asm.ClassReader;
1:e182908: import org.objectweb.asm.ClassVisitor;
1:e182908: import org.objectweb.asm.ClassWriter;
1:2960c84: 
2:2960c84: /**
1:96d4e06:  * This class is used to weave the bytes of a class into a proxyable class
1:2960c84:  */
1:96d4e06: public final class WovenProxyGenerator
1:96d4e06: {
1:f80358e:   public static final byte[] getWovenProxy(byte[] original, ClassLoader loader){
1:96d4e06:     ClassReader cReader = new ClassReader(original);
1:96d4e06:     //Don't weave interfaces, enums or annotations
1:96d4e06:     if((cReader.getAccess() & (ACC_INTERFACE | ACC_ANNOTATION | ACC_ENUM)) != 0)
1:96d4e06:       return null;
1:2960c84:     
1:96d4e06:     //If we are Java 1.6 + compiled then we need to compute stack frames, otherwise
1:96d4e06:     //maxs are fine (and faster)
1:e6518d7:     int computeVal = AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? 
1:e6518d7:         ClassWriter.COMPUTE_FRAMES : ClassWriter.COMPUTE_MAXS;
1:f80358e:     ClassWriter cWriter = new OSGiFriendlyClassWriter(cReader, computeVal, loader);
1:e6518d7:     ClassVisitor cv = new OSGiFriendlyClassVisitor(cWriter, computeVal );
1:8f4b919:     //Wrap our outer layer to add the original SerialVersionUID if it was previously being defaulted
1:0ac1890:     ClassVisitor weavingAdapter = new SyntheticSerialVerUIDAdder(
1:f80358e:                                new WovenProxyAdapter(cv, cReader.getClassName(), loader));
1:2960c84:     
1:96d4e06:     // If we are Java 1.6 + then we need to skip frames as they will be recomputed
1:475ef33:     cReader.accept(weavingAdapter, AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? ClassReader.SKIP_FRAMES : 0);
1:2960c84:     
1:96d4e06:     return cWriter.toByteArray();
5:2960c84:   }
1:2960c84: }
============================================================================
author:David Jencks
-------------------------------------------------------------------------------
commit:f80358e
/////////////////////////////////////////////////////////////////////////
1:   public static final byte[] getWovenProxy(byte[] original, ClassLoader loader){
/////////////////////////////////////////////////////////////////////////
1:     ClassWriter cWriter = new OSGiFriendlyClassWriter(cReader, computeVal, loader);
1:                                new WovenProxyAdapter(cv, cReader.getClassName(), loader));
commit:2960c84
/////////////////////////////////////////////////////////////////////////
0: import org.objectweb.asm.*;
/////////////////////////////////////////////////////////////////////////
0:     weavingAdapter = new MySerialVersionUIDAdder(weavingAdapter);
1: 
1:   /**
0:    * same as the ASM class it extends except marks the new SerialVersionUID filed synthetic
1:    */
0:   private static class MySerialVersionUIDAdder extends SerialVersionUIDAdder {
1:     /**
0:      * Creates a new {@link org.objectweb.asm.commons.SerialVersionUIDAdder}.
1:      *
0:      * @param cv a {@link org.objectweb.asm.ClassVisitor} to which this visitor will delegate
0:      *           calls.
1:      */
0:     public MySerialVersionUIDAdder(ClassVisitor cv) {
0:       super(cv);
1:     }
1: 
1:     /*
0:     * Add the SVUID if class doesn't have one
1:     */
0:     public void visitEnd() {
0:       // compute SVUID and add it to the class
0:       if (computeSVUID && !hasSVUID) {
0:         try {
0:           cv.visitField(Opcodes.ACC_FINAL + Opcodes.ACC_STATIC + Opcodes.ACC_SYNTHETIC,
0:               "serialVersionUID",
0:               "J",
0:               null,
0:               new Long(computeSVUID()));
0:         } catch (Throwable e) {
0:           throw new RuntimeException("Error while computing SVUID for "
0:               + name, e);
1:         }
1:       }
0:       computeSVUID = false;
0:       super.visitEnd();
1:     }
1: 
1: 
1:   }
1: 
1: 
1: }
author:Emily Jiang
-------------------------------------------------------------------------------
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.common.OSGiFriendlyClassVisitor;
/////////////////////////////////////////////////////////////////////////
1:     int computeVal = AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? 
1:         ClassWriter.COMPUTE_FRAMES : ClassWriter.COMPUTE_MAXS;
0:     ClassWriter cWriter = new OSGiFriendlyClassWriter(cReader, computeVal, loader, cReader.getClassName(), cReader.getSuperName());
1:     ClassVisitor cv = new OSGiFriendlyClassVisitor(cWriter, computeVal );
0:                                new WovenProxyAdapter(cv, className, loader));
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:0ac1890
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     ClassVisitor weavingAdapter = new SyntheticSerialVerUIDAdder(
0:                                new WovenProxyAdapter(cWriter, className, loader));
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
1: import org.apache.aries.proxy.impl.common.OSGiFriendlyClassWriter;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     ClassWriter cWriter = new OSGiFriendlyClassWriter(cReader, AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? 
/////////////////////////////////////////////////////////////////////////
1:     cReader.accept(weavingAdapter, AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? ClassReader.SKIP_FRAMES : 0);
commit:e182908
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.ClassReader;
1: import org.objectweb.asm.ClassVisitor;
1: import org.objectweb.asm.ClassWriter;
0: import org.objectweb.asm.Opcodes;
/////////////////////////////////////////////////////////////////////////
0:     weavingAdapter = new SerialVersionUIDAdder(weavingAdapter);
0: }
commit:8f4b919
/////////////////////////////////////////////////////////////////////////
0: import org.objectweb.asm.commons.SerialVersionUIDAdder;
/////////////////////////////////////////////////////////////////////////
0:     
1:     //Wrap our outer layer to add the original SerialVersionUID if it was previously being defaulted
0:     weavingAdapter = new SerialVersionUIDAdder(weavingAdapter);
0:     
commit:2d7219c
/////////////////////////////////////////////////////////////////////////
0:     ClassWriter cWriter = new OSGiFriendlyClassWriter(cReader, IS_AT_LEAST_JAVA_6 ? 
0:             ClassWriter.COMPUTE_FRAMES : ClassWriter.COMPUTE_MAXS, loader);
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.proxy.impl.weaving;
0: 
1: import static org.objectweb.asm.Opcodes.ACC_ANNOTATION;
1: import static org.objectweb.asm.Opcodes.ACC_ENUM;
1: import static org.objectweb.asm.Opcodes.ACC_INTERFACE;
0: 
0: import org.objectweb.asm.ClassReader;
0: import org.objectweb.asm.ClassVisitor;
0: import org.objectweb.asm.ClassWriter;
0: import org.objectweb.asm.Opcodes;
0: 
0: /**
1:  * This class is used to weave the bytes of a class into a proxyable class
0:  */
1: public final class WovenProxyGenerator
1: {
0:   public static final byte[] getWovenProxy(byte[] original, String className, ClassLoader loader){
1:     ClassReader cReader = new ClassReader(original);
1:     //Don't weave interfaces, enums or annotations
1:     if((cReader.getAccess() & (ACC_INTERFACE | ACC_ANNOTATION | ACC_ENUM)) != 0)
1:       return null;
0:     
0:     //We need to know the class version, but ASM won't tell us yet!
0:     int version = ((0xFF & original[6]) << 8) + (0xFF & original[7]);
0:     
1:     //If we are Java 1.6 + compiled then we need to compute stack frames, otherwise
1:     //maxs are fine (and faster)
0:     ClassWriter cWriter = new ClassWriter(cReader, (version > Opcodes.V1_5) ?
0:         ClassWriter.COMPUTE_FRAMES : ClassWriter.COMPUTE_MAXS);
0:     ClassVisitor weavingAdapter = new WovenProxyAdapter(cWriter, className, loader);
1:     // If we are Java 1.6 + then we need to skip frames as they will be recomputed
0:     cReader.accept(weavingAdapter, (version > Opcodes.V1_5) ? ClassReader.SKIP_FRAMES : 0);
0:     
1:     return cWriter.toByteArray();
0:   }
0: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:bef949f
/////////////////////////////////////////////////////////////////////////
0: import java.math.BigDecimal;
0: 
/////////////////////////////////////////////////////////////////////////
0:   public static final int JAVA_CLASS_VERSION = new BigDecimal(System.getProperty("java.class.version")).intValue();
0:   public static final boolean IS_AT_LEAST_JAVA_6 = JAVA_CLASS_VERSION >= Opcodes.V1_6;
0:     
0:     ClassWriter cWriter = new ClassWriter(cReader, IS_AT_LEAST_JAVA_6 ? 
0:             ClassWriter.COMPUTE_FRAMES : ClassWriter.COMPUTE_MAXS);
0:     cReader.accept(weavingAdapter, IS_AT_LEAST_JAVA_6 ? ClassReader.SKIP_FRAMES : 0);
============================================================================