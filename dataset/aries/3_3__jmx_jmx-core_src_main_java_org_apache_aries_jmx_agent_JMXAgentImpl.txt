7:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:bf5a863:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
6:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
7:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.agent;
13:fdf3952: 
1:2b5d821: import java.util.IdentityHashMap;
1:7871c8f: import java.util.Map;
1:0a8778f: 
1:fdf3952: import javax.management.InstanceAlreadyExistsException;
1:fdf3952: import javax.management.InstanceNotFoundException;
1:fdf3952: import javax.management.MBeanRegistrationException;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.MalformedObjectNameException;
1:fdf3952: import javax.management.NotCompliantMBeanException;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.StandardMBean;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.Logger;
1:fdf3952: import org.apache.aries.jmx.MBeanHandler;
1:fdf3952: import org.apache.aries.jmx.MBeanServiceTracker;
1:fdf3952: import org.apache.aries.jmx.cm.ConfigurationAdminMBeanHandler;
1:fdf3952: import org.apache.aries.jmx.framework.BundleStateMBeanHandler;
1:fdf3952: import org.apache.aries.jmx.framework.FrameworkMBeanHandler;
1:fdf3952: import org.apache.aries.jmx.framework.PackageStateMBeanHandler;
1:fdf3952: import org.apache.aries.jmx.framework.ServiceStateMBeanHandler;
1:a0df2a3: import org.apache.aries.jmx.framework.StateConfig;
1:1dbcef9: import org.apache.aries.jmx.framework.wiring.BundleWiringStateMBeanHandler;
1:fdf3952: import org.apache.aries.jmx.permissionadmin.PermissionAdminMBeanHandler;
1:fdf3952: import org.apache.aries.jmx.provisioning.ProvisioningServiceMBeanHandler;
1:fdf3952: import org.apache.aries.jmx.useradmin.UserAdminMBeanHandler;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.service.log.LogService;
1:fdf3952: import org.osgi.util.tracker.ServiceTracker;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * Represent agent for MBeanServers registered in ServiceRegistry. Providing registration and unregistration methods.
1:fdf3952:  * </p>
1:bf5a863:  *
1:fdf3952:  * @see JMXAgent
1:bf5a863:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class JMXAgentImpl implements JMXAgent {
1:fdf3952: 
1:0a8778f:     @SuppressWarnings("rawtypes")
1:0a8778f: 	private ServiceTracker mbeanServiceTracker;
1:fdf3952:     /**
1:fdf3952:      * {@link MBeanHandler} store.
1:fdf3952:      */
1:2b5d821:     private Map<MBeanServer, Boolean> mbeanServers;
1:7871c8f:     private Map<MBeanHandler, Boolean> mbeansHandlers;
1:a0df2a3:     private StateConfig stateConfig;
1:f5398b2:     private BundleContext context;
1:fdf3952:     private Logger logger;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new JMXAgent.
1:bf5a863:      *
1:a0df2a3:      * @param stateConfig
1:fdf3952:      * @param logger @see org.apache.aries.jmx.Logger
1:fdf3952:      */
1:a0df2a3:     public JMXAgentImpl(BundleContext context, StateConfig stateConfig, Logger logger) {
1:f5398b2:         this.context = context;
1:a0df2a3:         this.stateConfig = stateConfig;
1:fdf3952:         this.logger = logger;
1:2b5d821:         this.mbeanServers = new IdentityHashMap<MBeanServer, Boolean>();
1:2b5d821:         this.mbeansHandlers = new IdentityHashMap<MBeanHandler, Boolean>();
11:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.apache.aries.jmx.agent.JMXAgent#start()
1:7871c8f:      */
1:7871c8f:     public synchronized void start() {
1:fdf3952:         logger.log(LogService.LOG_INFO, "Starting JMX OSGi agent");
1:f5398b2:         // Initialize static handlers
1:f5398b2:         // Those handlers do not track dependencies
1:f5398b2:         JMXAgentContext agentContext = new JMXAgentContext(context, this, logger);
1:f5398b2:         MBeanHandler frameworkHandler = new FrameworkMBeanHandler(agentContext);
1:7871c8f:         mbeansHandlers.put(frameworkHandler, Boolean.FALSE);
1:fdf3952:         frameworkHandler.open();
1:a0df2a3:         MBeanHandler bundleStateHandler = new BundleStateMBeanHandler(agentContext, stateConfig);
1:7871c8f:         mbeansHandlers.put(bundleStateHandler, Boolean.FALSE);
1:fdf3952:         bundleStateHandler.open();
1:f5398b2:         MBeanHandler revisionsStateHandler = new BundleWiringStateMBeanHandler(agentContext);
1:7871c8f:         mbeansHandlers.put(revisionsStateHandler, Boolean.FALSE);
1:bf5a863:         revisionsStateHandler.open();
1:a0df2a3:         MBeanHandler serviceStateHandler = new ServiceStateMBeanHandler(agentContext, stateConfig);
1:7871c8f:         mbeansHandlers.put(serviceStateHandler, Boolean.FALSE);
1:fdf3952:         serviceStateHandler.open();
1:f5398b2:         MBeanHandler packageStateHandler = new PackageStateMBeanHandler(agentContext);
1:7871c8f:         mbeansHandlers.put(packageStateHandler, Boolean.FALSE);
1:fdf3952:         packageStateHandler.open();
1:fdf3952:         MBeanHandler permissionAdminHandler = new PermissionAdminMBeanHandler(agentContext);
1:7871c8f:         mbeansHandlers.put(permissionAdminHandler, Boolean.FALSE);
1:fdf3952:         permissionAdminHandler.open();
1:fdf3952:         MBeanHandler userAdminHandler = new UserAdminMBeanHandler(agentContext);
1:7871c8f:         mbeansHandlers.put(userAdminHandler, Boolean.FALSE);
1:fdf3952:         userAdminHandler.open();
1:fdf3952:         MBeanHandler configAdminHandler = new ConfigurationAdminMBeanHandler(agentContext);
1:7871c8f:         mbeansHandlers.put(configAdminHandler, Boolean.FALSE);
1:fdf3952:         configAdminHandler.open();
1:fdf3952:         MBeanHandler provServiceHandler = new ProvisioningServiceMBeanHandler(agentContext);
1:7871c8f:         mbeansHandlers.put(provServiceHandler, Boolean.FALSE);
1:fdf3952:         provServiceHandler.open();
1:f5398b2:         // Track mbean servers
1:fdf3952:         mbeanServiceTracker = new MBeanServiceTracker(agentContext);
1:fdf3952:         mbeanServiceTracker.open();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.apache.aries.jmx.agent.JMXAgent#registerMBeans(javax.management.MBeanServer)
1:fdf3952:      */
1:7871c8f:     public synchronized void registerMBeans(final MBeanServer server) {
1:7871c8f:         for (MBeanHandler mbeanHandler : mbeansHandlers.keySet()) {
1:f5398b2:             if (mbeansHandlers.get(mbeanHandler) == Boolean.TRUE) {
1:7871c8f:                 String name = mbeanHandler.getName();
1:7871c8f:                 StandardMBean mbean = mbeanHandler.getMbean();
1:7871c8f:                 if (mbean != null) {
1:7871c8f:                     try {
1:7871c8f:                         logger.log(LogService.LOG_INFO, "Registering " + mbean.getMBeanInterface().getName()
1:7871c8f:                                 + " to MBeanServer " + server + " with name " + name);
1:7871c8f:                         server.registerMBean(mbean, new ObjectName(name));
1:7871c8f:                     } catch (InstanceAlreadyExistsException e) {
1:7871c8f:                         logger.log(LogService.LOG_ERROR, "MBean is already registered", e);
1:7871c8f:                     } catch (MBeanRegistrationException e) {
1:7871c8f:                         logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
1:7871c8f:                     } catch (NotCompliantMBeanException e) {
1:7871c8f:                         logger.log(LogService.LOG_ERROR, "MBean is not compliant MBean", e);
1:7871c8f:                     } catch (MalformedObjectNameException e) {
1:7871c8f:                         logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname", e);
1:7871c8f:                     } catch (NullPointerException e) {
1:7871c8f:                         logger.log(LogService.LOG_ERROR, "Name of objectname can't be null", e);
1:7871c8f:                     }
1:fdf3952:                 }
1:fdf3952:             }
1:fdf3952:         }
1:2b5d821:         mbeanServers.put(server, Boolean.TRUE);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBeans(javax.management.MBeanServer)
1:fdf3952:      */
1:7871c8f:     public synchronized void unregisterMBeans(final MBeanServer server) {
1:7871c8f:         for (MBeanHandler mBeanHandler : mbeansHandlers.keySet()) {
1:7871c8f:             if (mbeansHandlers.get(mBeanHandler) == Boolean.TRUE) {
1:7871c8f:                 try {
1:7871c8f:                     String name = mBeanHandler.getName();
1:7871c8f:                     StandardMBean mbean = mBeanHandler.getMbean();
1:7871c8f:                     if (mbean != null) {
1:7871c8f:                         logger.log(LogService.LOG_INFO, "Unregistering " + mbean.getMBeanInterface().getName()
1:7871c8f:                                 + " to MBeanServer " + server + " with name " + name);
1:7871c8f:                         server.unregisterMBean(new ObjectName(name));
1:7871c8f:                     }
1:7871c8f:                 } catch (MBeanRegistrationException e) {
1:7871c8f:                     logger.log(LogService.LOG_ERROR, "Can't unregister MBean", e);
1:7871c8f:                 } catch (InstanceNotFoundException e) {
1:7871c8f:                     logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
1:7871c8f:                 } catch (MalformedObjectNameException e) {
1:7871c8f:                     logger.log(LogService.LOG_ERROR, "Try to unregister with no valid objectname", e);
1:7871c8f:                 } catch (NullPointerException e) {
1:7871c8f:                     logger.log(LogService.LOG_ERROR, "Name of objectname can't be null ", e);
1:7871c8f:                 } catch (Exception e) {
1:7871c8f:                     logger.log(LogService.LOG_ERROR, "Cannot unregister MBean: " + mBeanHandler, e);
1:bf5a863:                 }
1:fdf3952:             }
1:fdf3952:         }
1:f5398b2:         mbeanServers.remove(server);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.apache.aries.jmx.agent.JMXAgent#registerMBean(org.apache.aries.jmx.MBeanHandler)
1:fdf3952:      */
1:7871c8f:     public synchronized void registerMBean(final MBeanHandler mBeanHandler) {
1:2b5d821:         for (MBeanServer server : mbeanServers.keySet()) {
2:fdf3952:             String name = mBeanHandler.getName();
2:fdf3952:             StandardMBean mbean = mBeanHandler.getMbean();
2:fdf3952:             try {
2:fdf3952:                 logger.log(LogService.LOG_INFO, "Registering " + mbean.getMBeanInterface().getName()
3:fdf3952:                         + " to MBeanServer " + server + " with name " + name);
1:fdf3952:                 server.registerMBean(mbean, new ObjectName(name));
1:fdf3952: 
2:fdf3952:             } catch (InstanceAlreadyExistsException e) {
2:fdf3952:                 logger.log(LogService.LOG_ERROR, "MBean is already registered", e);
4:fdf3952:             } catch (MBeanRegistrationException e) {
3:fdf3952:                 logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
2:fdf3952:             } catch (NotCompliantMBeanException e) {
1:fdf3952:                 logger.log(LogService.LOG_ERROR, "MBean is not compliant MBean, Stopping registration", e);
4:fdf3952:                 return;
4:fdf3952:             } catch (MalformedObjectNameException e) {
2:fdf3952:                 logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname, Stopping registration", e);
1:7871c8f:                 return;
4:fdf3952:             } catch (NullPointerException e) {
2:fdf3952:                 logger.log(LogService.LOG_ERROR, "Name of objectname can't be null, Stopping registration", e);
1:fdf3952:                 return;
1:7871c8f:             }
1:fdf3952:         }
1:7871c8f:         mbeansHandlers.put(mBeanHandler, Boolean.TRUE);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:7871c8f:      * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBean(org.apache.aries.jmx.MBeanHandler)
1:fdf3952:      */
1:7871c8f:     public synchronized void unregisterMBean(final MBeanHandler mBeanHandler) {
1:2b5d821:         for (MBeanServer server : mbeanServers.keySet()) {
1:7871c8f:             String name = mBeanHandler.getName();
1:fdf3952:             try {
1:7871c8f:                 logger.log(LogService.LOG_INFO, "Unregistering mbean " + " to MBeanServer " + server + " with name "
1:7871c8f:                         + name);
1:fdf3952:                 server.unregisterMBean(new ObjectName(name));
1:7871c8f:             } catch (MBeanRegistrationException e) {
1:7871c8f:                 logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
1:7871c8f:             } catch (InstanceNotFoundException e) {
1:7871c8f:                 logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
1:7871c8f:             } catch (MalformedObjectNameException e) {
1:7871c8f:                 logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname, Stopping registration", e);
1:7871c8f:                 return;
1:7871c8f:             } catch (NullPointerException e) {
1:7871c8f:                 logger.log(LogService.LOG_ERROR, "Name of objectname can't be null, Stopping registration", e);
1:fdf3952:                 return;
1:7871c8f:             }
1:7871c8f:         }
1:7871c8f:         mbeansHandlers.put(mBeanHandler, Boolean.FALSE);
1:7871c8f:     }
1:7871c8f: 
1:7871c8f:     /**
1:fdf3952:      * @see org.apache.aries.jmx.agent.JMXAgent#stop()
1:fdf3952:      */
1:fdf3952:     public void stop() {
1:fdf3952:         logger.log(LogService.LOG_INFO, "Stopping JMX OSGi agent");
1:5b4d5d2:         synchronized (this) {
1:fdf3952:             mbeanServiceTracker.close();
1:7871c8f:             for (MBeanHandler mBeanHandler : mbeansHandlers.keySet()) {
1:fdf3952:                 mBeanHandler.close();
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:72719d5
/////////////////////////////////////////////////////////////////////////
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1: 	private ServiceTracker mbeanServiceTracker;
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:a0df2a3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.framework.StateConfig;
/////////////////////////////////////////////////////////////////////////
1:     private StateConfig stateConfig;
1:      * @param stateConfig
1:     public JMXAgentImpl(BundleContext context, StateConfig stateConfig, Logger logger) {
1:         this.stateConfig = stateConfig;
/////////////////////////////////////////////////////////////////////////
1:         MBeanHandler bundleStateHandler = new BundleStateMBeanHandler(agentContext, stateConfig);
1:         MBeanHandler serviceStateHandler = new ServiceStateMBeanHandler(agentContext, stateConfig);
commit:0273964
commit:7871c8f
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private Map<MBeanHandler, Boolean> mbeansHandlers;
/////////////////////////////////////////////////////////////////////////
0:         this.mbeansHandlers = new HashMap<MBeanHandler, Boolean>();
1:     public synchronized void start() {
1:         mbeansHandlers.put(frameworkHandler, Boolean.FALSE);
1:         mbeansHandlers.put(bundleStateHandler, Boolean.FALSE);
1:         mbeansHandlers.put(revisionsStateHandler, Boolean.FALSE);
1:         mbeansHandlers.put(serviceStateHandler, Boolean.FALSE);
1:         mbeansHandlers.put(packageStateHandler, Boolean.FALSE);
1:         mbeansHandlers.put(permissionAdminHandler, Boolean.FALSE);
1:         mbeansHandlers.put(userAdminHandler, Boolean.FALSE);
1:         mbeansHandlers.put(configAdminHandler, Boolean.FALSE);
1:         mbeansHandlers.put(provServiceHandler, Boolean.FALSE);
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void registerMBeans(final MBeanServer server) {
1:         for (MBeanHandler mbeanHandler : mbeansHandlers.keySet()) {
0:             if (mbeansHandlers.get(mbeanHandler) == Boolean.FALSE) {
1:                 String name = mbeanHandler.getName();
1:                 StandardMBean mbean = mbeanHandler.getMbean();
1:                 if (mbean != null) {
1:                     try {
1:                         logger.log(LogService.LOG_INFO, "Registering " + mbean.getMBeanInterface().getName()
1:                                 + " to MBeanServer " + server + " with name " + name);
1:                         server.registerMBean(mbean, new ObjectName(name));
0:                         mbeansHandlers.put(mbeanHandler, Boolean.TRUE);
1:                     } catch (InstanceAlreadyExistsException e) {
1:                         logger.log(LogService.LOG_ERROR, "MBean is already registered", e);
1:                     } catch (MBeanRegistrationException e) {
1:                         logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
1:                     } catch (NotCompliantMBeanException e) {
1:                         logger.log(LogService.LOG_ERROR, "MBean is not compliant MBean", e);
1:                     } catch (MalformedObjectNameException e) {
1:                         logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname", e);
1:                     } catch (NullPointerException e) {
1:                         logger.log(LogService.LOG_ERROR, "Name of objectname can't be null", e);
1:                     }
1:     public synchronized void unregisterMBeans(final MBeanServer server) {
1:         for (MBeanHandler mBeanHandler : mbeansHandlers.keySet()) {
1:             if (mbeansHandlers.get(mBeanHandler) == Boolean.TRUE) {
0:                 try
0:                 {
1:                    String name = mBeanHandler.getName();
1:                    StandardMBean mbean = mBeanHandler.getMbean();
1:                    if (mbean != null) {
1:                        logger.log(LogService.LOG_INFO, "Unregistering " + mbean.getMBeanInterface().getName()
1:                              + " to MBeanServer " + server + " with name " + name);
1:                        server.unregisterMBean(new ObjectName(name));
1:                        mbeansHandlers.put(mBeanHandler, Boolean.FALSE);
1:                    }
1:                 } catch (MBeanRegistrationException e) {
1:                    logger.log(LogService.LOG_ERROR, "Can't unregister MBean", e);
1:                 } catch (InstanceNotFoundException e) {
1:                    logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
1:                 } catch (MalformedObjectNameException e) {
1:                    logger.log(LogService.LOG_ERROR, "Try to unregister with no valid objectname", e);
1:                 } catch (NullPointerException e) {
1:                    logger.log(LogService.LOG_ERROR, "Name of objectname can't be null ", e);
1:                 } catch (Exception e) {
1:                    logger.log(LogService.LOG_ERROR, "Cannot unregister MBean: " + mBeanHandler, e);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void registerMBean(final MBeanHandler mBeanHandler) {
/////////////////////////////////////////////////////////////////////////
1:                 mbeansHandlers.put(mBeanHandler, Boolean.TRUE);
/////////////////////////////////////////////////////////////////////////
1:      * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBean(org.apache.aries.jmx.MBeanHandler)
1:     public synchronized void unregisterMBean(final MBeanHandler mBeanHandler) {
1:             String name = mBeanHandler.getName();
0:                 mbeansHandlers.put(mBeanHandler, Boolean.FALSE);
1:                 logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
/////////////////////////////////////////////////////////////////////////
0:      * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBean(java.lang.String)
1:      */
0:     public synchronized void unregisterMBean(final String name) {
0:         Object[] servers = getMBeanServers();
0:         for (Object server : servers) {
1:             try {
1:                 logger.log(LogService.LOG_INFO, "Unregistering mbean " + " to MBeanServer " + server + " with name "
1:                         + name);
0:                 ((MBeanServer) server).unregisterMBean(new ObjectName(name));
1:             } catch (MBeanRegistrationException e) {
1:                 logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
1:             } catch (InstanceNotFoundException e) {
0:                 logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
1:             } catch (MalformedObjectNameException e) {
1:                 logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname, Stopping registration", e);
1:                 return;
1:             } catch (NullPointerException e) {
1:                 logger.log(LogService.LOG_ERROR, "Name of objectname can't be null, Stopping registration", e);
1:                 return;
1:             }
1:         }
1:     }
1: 
1:     /**
0:     public synchronized void stop() {
1:         for (MBeanHandler mBeanHandler : mbeansHandlers.keySet()) {
commit:1dbcef9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.framework.wiring.BundleWiringStateMBeanHandler;
/////////////////////////////////////////////////////////////////////////
0:         MBeanHandler revisionsStateHandler = new BundleWiringStateMBeanHandler(bc, logger);
commit:9cde9a6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jmx.framework.wiring.BundleRevisionsStateMBeanHandler;
commit:bf5a863
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jmx.framework.BundleRevisionsStateMBeanHandler;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:         MBeanHandler revisionsStateHandler = new BundleRevisionsStateMBeanHandler(bc, logger);
1:         revisionsStateHandler.open();
0:         mbeansHandlers.add(revisionsStateHandler);
/////////////////////////////////////////////////////////////////////////
1:             }
/////////////////////////////////////////////////////////////////////////
1:      *
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.agent;
1: 
0: import java.util.HashSet;
0: import java.util.Set;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
1: 
1: import javax.management.InstanceAlreadyExistsException;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.MBeanRegistrationException;
1: import javax.management.MBeanServer;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.ObjectName;
1: import javax.management.StandardMBean;
1: 
0: import org.apache.aries.jmx.JMXThreadFactory;
1: import org.apache.aries.jmx.Logger;
1: import org.apache.aries.jmx.MBeanHandler;
1: import org.apache.aries.jmx.MBeanServiceTracker;
1: import org.apache.aries.jmx.cm.ConfigurationAdminMBeanHandler;
1: import org.apache.aries.jmx.framework.BundleStateMBeanHandler;
1: import org.apache.aries.jmx.framework.FrameworkMBeanHandler;
1: import org.apache.aries.jmx.framework.PackageStateMBeanHandler;
1: import org.apache.aries.jmx.framework.ServiceStateMBeanHandler;
1: import org.apache.aries.jmx.permissionadmin.PermissionAdminMBeanHandler;
1: import org.apache.aries.jmx.provisioning.ProvisioningServiceMBeanHandler;
1: import org.apache.aries.jmx.useradmin.UserAdminMBeanHandler;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.log.LogService;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
1:  * <p>
1:  * Represent agent for MBeanServers registered in ServiceRegistry. Providing registration and unregistration methods.
1:  * </p>
1:  * 
1:  * @see JMXAgent
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class JMXAgentImpl implements JMXAgent {
1: 
0:     private ServiceTracker mbeanServiceTracker;
1:     /**
1:      * {@link MBeanHandler} store.
1:      */
0:     private Set<MBeanHandler> mbeansHandlers;
0:     private JMXAgentContext agentContext;
1:     private Logger logger;
1: 
1:     /**
0:      * Registration {@link ExecutorService}.
1:      */
0:     private ExecutorService registrationExecutor;
1: 
1:     /**
1:      * Constructs new JMXAgent.
1:      * 
1:      * @param logger @see org.apache.aries.jmx.Logger
1:      */
0:     public JMXAgentImpl(Logger logger) {
1:         this.logger = logger;
0:         this.mbeansHandlers = new HashSet<MBeanHandler>();
0:         this.registrationExecutor = Executors.newSingleThreadExecutor(new JMXThreadFactory("JMX OSGi Agent"));
1:     }
1: 
1:     /**
1:      * @see org.apache.aries.jmx.agent.JMXAgent#start()
1:      */
0:     public void start() {
1:         logger.log(LogService.LOG_INFO, "Starting JMX OSGi agent");
0:         BundleContext bc = agentContext.getBundleContext();
0:         MBeanHandler frameworkHandler = new FrameworkMBeanHandler(bc, logger);
1:         frameworkHandler.open();
0:         mbeansHandlers.add(frameworkHandler);
0:         MBeanHandler bundleStateHandler = new BundleStateMBeanHandler(bc, logger);
1:         bundleStateHandler.open();
0:         mbeansHandlers.add(bundleStateHandler);
0:         MBeanHandler serviceStateHandler = new ServiceStateMBeanHandler(bc, logger);
1:         serviceStateHandler.open();
0:         mbeansHandlers.add(serviceStateHandler);
0:         MBeanHandler packageStateHandler = new PackageStateMBeanHandler(bc, logger);
1:         packageStateHandler.open();
0:         mbeansHandlers.add(packageStateHandler);
1:         MBeanHandler permissionAdminHandler = new PermissionAdminMBeanHandler(agentContext);
1:         permissionAdminHandler.open();
0:         mbeansHandlers.add(permissionAdminHandler);
1:         MBeanHandler userAdminHandler = new UserAdminMBeanHandler(agentContext);
1:         userAdminHandler.open();
0:         mbeansHandlers.add(userAdminHandler);
1:         MBeanHandler configAdminHandler = new ConfigurationAdminMBeanHandler(agentContext);
1:         configAdminHandler.open();
0:         mbeansHandlers.add(configAdminHandler);
1:         MBeanHandler provServiceHandler = new ProvisioningServiceMBeanHandler(agentContext);
1:         provServiceHandler.open();
0:         mbeansHandlers.add(provServiceHandler);
1:         mbeanServiceTracker = new MBeanServiceTracker(agentContext);
1:         mbeanServiceTracker.open();
1:     }
1: 
1:     /**
1:      * @see org.apache.aries.jmx.agent.JMXAgent#registerMBeans(javax.management.MBeanServer)
1:      */
0:     public void registerMBeans(final MBeanServer server) {
0:         for (MBeanHandler mbeanHandler : mbeansHandlers) {
0:             String name = mbeanHandler.getName();
0:             StandardMBean mbean = mbeanHandler.getMbean();
0:             if (mbean != null) {
1:                 try {
1:                     logger.log(LogService.LOG_INFO, "Registering " + mbean.getMBeanInterface().getName()
1:                             + " to MBeanServer " + server + " with name " + name);
1:                     server.registerMBean(mbean, new ObjectName(name));
1:                 } catch (InstanceAlreadyExistsException e) {
1:                     logger.log(LogService.LOG_ERROR, "MBean is already registered", e);
1:                 } catch (MBeanRegistrationException e) {
1:                     logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
1:                 } catch (NotCompliantMBeanException e) {
0:                     logger.log(LogService.LOG_ERROR, "MBean is not compliant MBean", e);
1:                 } catch (MalformedObjectNameException e) {
0:                     logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname", e);
1:                 } catch (NullPointerException e) {
0:                     logger.log(LogService.LOG_ERROR, "Name of objectname can't be null", e);
1:                 }
1:             }
1:         }
1: 
1:     }
1: 
1:     /**
1:      * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBeans(javax.management.MBeanServer)
1:      */
0:     public void unregisterMBeans(final MBeanServer server) {
0:         for (MBeanHandler mBeanHandler : mbeansHandlers) {
0:             try
0:             {
1:                String name = mBeanHandler.getName();
1:                StandardMBean mbean = mBeanHandler.getMbean();
0:                if (mbean != null) {
0:                    logger.log(LogService.LOG_INFO, "Unregistering " + mbean.getMBeanInterface().getName()
1:                          + " to MBeanServer " + server + " with name " + name);
1:                    server.unregisterMBean(new ObjectName(name));
1:                }
1:             } catch (MBeanRegistrationException e) {
0:                logger.log(LogService.LOG_ERROR, "Can't unregister MBean", e);
0:             } catch (InstanceNotFoundException e) {
0:                logger.log(LogService.LOG_ERROR, "Mbena doesn't exist in the repository", e);
1:             } catch (MalformedObjectNameException e) {
0:                logger.log(LogService.LOG_ERROR, "Try to unregister with no valid objectname", e);
1:             } catch (NullPointerException e) {
0:                logger.log(LogService.LOG_ERROR, "Name of objectname can't be null ", e);
0:             } catch (Exception e) {
0:                logger.log(LogService.LOG_ERROR, "Cannot unregister MBean: " + mBeanHandler, e);
1:             } 
1:         }
1:     }
1: 
1:     /**
1:      * @see org.apache.aries.jmx.agent.JMXAgent#registerMBean(org.apache.aries.jmx.MBeanHandler)
1:      */
0:     public void registerMBean(final MBeanHandler mBeanHandler) {
0:         Object[] servers = getMBeanServers();
0:         if (servers == null) {
0:             logger.log(LogService.LOG_WARNING, "There are no MBean servers registred, can't register MBeans");
1:             return;
1:         }
1: 
0:         for (Object server : servers) {
1:             String name = mBeanHandler.getName();
1:             StandardMBean mbean = mBeanHandler.getMbean();
1:             try {
1:                 logger.log(LogService.LOG_INFO, "Registering " + mbean.getMBeanInterface().getName()
1:                         + " to MBeanServer " + server + " with name " + name);
0:                 ((MBeanServer) server).registerMBean(mbean, new ObjectName(name));
1: 
1:             } catch (InstanceAlreadyExistsException e) {
1:                 logger.log(LogService.LOG_ERROR, "MBean is already registered", e);
1:             } catch (MBeanRegistrationException e) {
1:                 logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
1:             } catch (NotCompliantMBeanException e) {
1:                 logger.log(LogService.LOG_ERROR, "MBean is not compliant MBean, Stopping registration", e);
1:                 return;
1:             } catch (MalformedObjectNameException e) {
1:                 logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname, Stopping registration", e);
1:                 return;
1:             } catch (NullPointerException e) {
1:                 logger.log(LogService.LOG_ERROR, "Name of objectname can't be null, Stopping registration", e);
1:                 return;
1:             }
1:         }
1: 
1:     }
1: 
1:     /**
0:      * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBean(java.lang.String)
1:      */
0:     public void unregisterMBean(final String name) {
0:         Object[] servers = getMBeanServers();
0:         for (Object server : servers) {
1: 
1:             try {
0:                 logger.log(LogService.LOG_INFO, "Unregistering mbean " + " to MBeanServer " + server + " with name "
0:                         + name);
0:                 ((MBeanServer) server).unregisterMBean(new ObjectName(name));
1:             } catch (MBeanRegistrationException e) {
1:                 logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
0:             } catch (InstanceNotFoundException e) {
0:                 logger.log(LogService.LOG_ERROR, "Mbena doesn't exist in the repository", e);
1:             } catch (MalformedObjectNameException e) {
1:                 logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname, Stopping registration", e);
1:                 return;
1:             } catch (NullPointerException e) {
1:                 logger.log(LogService.LOG_ERROR, "Name of objectname can't be null, Stopping registration", e);
1:                 return;
1:             }
1: 
1:         }
1:     }
1: 
1:     /**
1:      * @see org.apache.aries.jmx.agent.JMXAgent#stop()
1:      */
1:     public void stop() {
1:         logger.log(LogService.LOG_INFO, "Stopping JMX OSGi agent");
1:         mbeanServiceTracker.close();
0:         for (MBeanHandler mBeanHandler : mbeansHandlers) {
1:             mBeanHandler.close();
1:         }
0:         if (registrationExecutor != null && !registrationExecutor.isShutdown()) {
0:             registrationExecutor.shutdown();
1:         }
1:     }
1: 
1:     /**
0:      * @see org.apache.aries.jmx.agent.JMXAgent#getAgentContext()
1:      */
0:     public JMXAgentContext getAgentContext() {
0:         return agentContext;
1:     }
1: 
1:     /**
0:      * @see org.apache.aries.jmx.agent.JMXAgent#setAgentContext(org.apache.aries.jmx.agent.JMXAgentContext)
1:      */
0:     public void setAgentContext(JMXAgentContext agentContext) {
0:         this.agentContext = agentContext;
1:     }
1: 
1:     /**
0:      * Gets all MBeanServers from MBeanServiceTracker.
1:      * 
0:      * @return array of MBean servers.
1:      */
0:     private Object[] getMBeanServers() {
0:         return mbeanServiceTracker.getServices();
1:     }
1: 
1:     /**
0:      * @see org.apache.aries.jmx.agent.JMXAgent#getRegistrationExecutor()
1:      */
0:     public ExecutorService getRegistrationExecutor() {
0:         return registrationExecutor;
1:     }
1: 
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2b5d821
/////////////////////////////////////////////////////////////////////////
1: import java.util.IdentityHashMap;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     private Map<MBeanServer, Boolean> mbeanServers;
/////////////////////////////////////////////////////////////////////////
1:         this.mbeanServers = new IdentityHashMap<MBeanServer, Boolean>();
1:         this.mbeansHandlers = new IdentityHashMap<MBeanHandler, Boolean>();
/////////////////////////////////////////////////////////////////////////
1:         mbeanServers.put(server, Boolean.TRUE);
/////////////////////////////////////////////////////////////////////////
0:                 try {
0:                     String name = mBeanHandler.getName();
0:                     StandardMBean mbean = mBeanHandler.getMbean();
0:                     if (mbean != null) {
0:                         logger.log(LogService.LOG_INFO, "Unregistering " + mbean.getMBeanInterface().getName()
0:                                 + " to MBeanServer " + server + " with name " + name);
0:                         server.unregisterMBean(new ObjectName(name));
0:                     }
0:                     logger.log(LogService.LOG_ERROR, "Can't unregister MBean", e);
0:                     logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
0:                     logger.log(LogService.LOG_ERROR, "Try to unregister with no valid objectname", e);
0:                     logger.log(LogService.LOG_ERROR, "Name of objectname can't be null ", e);
0:                     logger.log(LogService.LOG_ERROR, "Cannot unregister MBean: " + mBeanHandler, e);
/////////////////////////////////////////////////////////////////////////
1:         for (MBeanServer server : mbeanServers.keySet()) {
/////////////////////////////////////////////////////////////////////////
1:         for (MBeanServer server : mbeanServers.keySet()) {
commit:f5398b2
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:     private List<MBeanServer> mbeanServers;
1:     private BundleContext context;
0:     public JMXAgentImpl(BundleContext context, Logger logger) {
1:         this.context = context;
0:         this.mbeanServers = new ArrayList<MBeanServer>();
/////////////////////////////////////////////////////////////////////////
1:         // Initialize static handlers
1:         // Those handlers do not track dependencies
1:         JMXAgentContext agentContext = new JMXAgentContext(context, this, logger);
1:         MBeanHandler frameworkHandler = new FrameworkMBeanHandler(agentContext);
0:         MBeanHandler bundleStateHandler = new BundleStateMBeanHandler(agentContext);
1:         MBeanHandler revisionsStateHandler = new BundleWiringStateMBeanHandler(agentContext);
0:         MBeanHandler serviceStateHandler = new ServiceStateMBeanHandler(agentContext);
1:         MBeanHandler packageStateHandler = new PackageStateMBeanHandler(agentContext);
/////////////////////////////////////////////////////////////////////////
1:         // Track mbean servers
/////////////////////////////////////////////////////////////////////////
1:             if (mbeansHandlers.get(mbeanHandler) == Boolean.TRUE) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         mbeanServers.add(server);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         mbeanServers.remove(server);
0:         for (MBeanServer server : mbeanServers) {
0:                 server.registerMBean(mbean, new ObjectName(name));
/////////////////////////////////////////////////////////////////////////
0:         mbeansHandlers.put(mBeanHandler, Boolean.TRUE);
0:         for (MBeanServer server : mbeanServers) {
0:                 server.unregisterMBean(new ObjectName(name));
/////////////////////////////////////////////////////////////////////////
0:         mbeansHandlers.put(mBeanHandler, Boolean.FALSE);
/////////////////////////////////////////////////////////////////////////
commit:5b4d5d2
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void stop() {
1:         synchronized (this) {
0:             mbeanServiceTracker.close();
0:             for (MBeanHandler mBeanHandler : mbeansHandlers.keySet()) {
0:                 mBeanHandler.close();
0:             }
0:             try {
0:                 registrationExecutor.awaitTermination(5 * 60, TimeUnit.SECONDS);
0:             } catch (InterruptedException e) {
0:                 logger.log(LogService.LOG_WARNING, "Interrupted while waiting for executor shutdown", e);
0:             }
/////////////////////////////////////////////////////////////////////////
0:         Object[] servers = mbeanServiceTracker.getServices();
0:         return servers != null ? servers : new Object[0];
============================================================================