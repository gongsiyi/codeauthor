1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:8a2da19: package org.apache.aries.tx.control.service.local.impl;
17:8a2da19: 
1:8a2da19: import java.util.Dictionary;
1:8a2da19: import java.util.Hashtable;
1:8a2da19: 
1:7f1e7ab: import org.osgi.framework.BundleActivator;
1:7f1e7ab: import org.osgi.framework.BundleContext;
1:7f1e7ab: import org.osgi.framework.Constants;
1:2906477: import org.osgi.framework.ServiceRegistration;
1:8a2da19: import org.osgi.service.transaction.control.TransactionControl;
1:7f1e7ab: import org.slf4j.Logger;
1:7f1e7ab: import org.slf4j.LoggerFactory;
1:78dd69f: 
1:7f1e7ab: public class Activator implements BundleActivator {
1:8a2da19: 
1:2906477: 	private static final Logger logger = LoggerFactory.getLogger(Activator.class);
1:2906477: 	private TransactionControlImpl service;
1:2906477: 	private ServiceRegistration<TransactionControl> reg;
1:8a2da19: 	
5:8a2da19: 	@Override
1:7f1e7ab: 	public void start(BundleContext context) throws Exception {
1:7f1e7ab: 		Dictionary<String, Object> properties = getProperties();
1:7f1e7ab: 		logger.info("Registering a new Local TransactionControl service with properties {}", properties);
1:2906477: 		service = new TransactionControlImpl();
1:2906477: 		reg = context.registerService(TransactionControl.class, 
1:2906477: 				service, properties);
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	@Override
1:2906477: 	public void stop(BundleContext context) throws Exception {
1:2906477: 		if(reg != null) {
1:2906477: 			try {
1:2906477: 				reg.unregister();
1:2906477: 			} catch (IllegalStateException ise) { }
1:2906477: 		}
1:2906477: 		service.close();
1:2906477: 	}
1:7f1e7ab: 
1:7f1e7ab: 	private Dictionary<String, Object> getProperties() {
1:8a2da19: 		Dictionary<String, Object> props = new Hashtable<>();
1:8a2da19: 		props.put("osgi.local.enabled", Boolean.TRUE);
1:7f1e7ab: 		props.put(Constants.SERVICE_DESCRIPTION, "The Apache Aries Transaction Control Service for Local Transactions");
1:7f1e7ab: 		props.put(Constants.SERVICE_VENDOR, "Apache Aries");
1:8a2da19: 		return props;
17:8a2da19: 	}
1:8a2da19: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceRegistration;
1: 	private static final Logger logger = LoggerFactory.getLogger(Activator.class);
1: 	private TransactionControlImpl service;
1: 	private ServiceRegistration<TransactionControl> reg;
1: 		service = new TransactionControlImpl();
1: 		reg = context.registerService(TransactionControl.class, 
1: 				service, properties);
1: 	public void stop(BundleContext context) throws Exception {
1: 		if(reg != null) {
1: 			try {
1: 				reg.unregister();
1: 			} catch (IllegalStateException ise) { }
1: 		}
1: 		service.close();
1: 	}
commit:7f1e7ab
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public class Activator implements BundleActivator {
0: private static final Logger logger = LoggerFactory.getLogger(Activator.class);
1: 	public void start(BundleContext context) throws Exception {
1: 		Dictionary<String, Object> properties = getProperties();
1: 		logger.info("Registering a new Local TransactionControl service with properties {}", properties);
0: 		context.registerService(TransactionControl.class, 
0: 				new TransactionControlImpl(), properties);
1: 	}
1: 
1: 	@Override
0: 	public void stop(BundleContext context) throws Exception { }
1: 
1: 	private Dictionary<String, Object> getProperties() {
1: 		props.put(Constants.SERVICE_DESCRIPTION, "The Apache Aries Transaction Control Service for Local Transactions");
1: 		props.put(Constants.SERVICE_VENDOR, "Apache Aries");
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
0: 	protected TransactionControl getTransactionControl() {
0: 		return new TransactionControlImpl();
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.tx.control.service.common.activator.AbstractActivator;
0: public class Activator extends AbstractActivator {
0: 	protected TransactionControl getTransactionControl(Coordinator c) {
0: 		return new TransactionControlImpl(c);
1: 	
0: 	protected Dictionary<String, Object> getProperties() {
commit:8a2da19
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.local.impl;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
0: import java.util.Optional;
1: 
0: import org.osgi.framework.BundleActivator;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceReference;
0: import org.osgi.framework.ServiceRegistration;
0: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.service.transaction.control.TransactionControl;
0: import org.osgi.util.tracker.ServiceTracker;
0: import org.osgi.util.tracker.ServiceTrackerCustomizer;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: public class Activator implements BundleActivator, ServiceTrackerCustomizer<Coordinator, Coordinator> {
1: 
0: 	private static final Logger logger = LoggerFactory.getLogger(Activator.class);
1: 	
0: 	private BundleContext context;
1: 	
0: 	private ServiceTracker<Coordinator, Coordinator> tracker;
1: 	
0: 	private Coordinator inUse;
0: 	private ServiceRegistration<TransactionControl> reg;
1: 	
0: 	private Object lock = new Object();
1: 	
1: 	@Override
0: 	public void start(BundleContext context) throws Exception {
0: 		this.context = context;
0: 		tracker = new ServiceTracker<>(context, Coordinator.class, this);
0: 		tracker.open();
1: 	}
1: 
1: 	@Override
0: 	public void stop(BundleContext context) throws Exception {
0: 		tracker.close();
1: 	}
1: 
1: 	@Override
0: 	public Coordinator addingService(ServiceReference<Coordinator> reference) {
0: 		Coordinator c = context.getService(reference);
0: 		checkAndRegister(c);
0: 		return c;
1: 	}
1: 
0: 	private void checkAndRegister(Coordinator c) {
0: 		boolean register = false;
0: 		synchronized (lock) {
0: 			if(inUse == null) {
0: 				inUse = c;
0: 				register = true;
1: 			}
1: 		}
1: 		
0: 		if(register) {
0: 			logger.info("Registering a new local-only TransactionControl service");
0: 			ServiceRegistration<TransactionControl> reg = context.registerService(
0: 					TransactionControl.class, new TransactionControlImpl(c), getProperties());
0: 			synchronized (lock) {
0: 				this.reg = reg;
1: 			}
1: 		}
1: 	}
1: 
0: 	private Dictionary<String, Object> getProperties() {
1: 		Dictionary<String, Object> props = new Hashtable<>();
1: 		props.put("osgi.local.enabled", Boolean.TRUE);
1: 		return props;
1: 	}
1: 
1: 	@Override
0: 	public void modifiedService(ServiceReference<Coordinator> reference, Coordinator service) {
1: 	}
1: 
1: 	@Override
0: 	public void removedService(ServiceReference<Coordinator> reference, Coordinator service) {
0: 		ServiceRegistration<TransactionControl> toUnregister = null;
0: 		synchronized (lock) {
0: 			if(inUse == service) {
0: 				inUse = null;
0: 				toUnregister = reg;
0: 				reg = null;
1: 			}
1: 		}
1: 		
0: 		if(toUnregister != null) {
0: 			try {
0: 				toUnregister.unregister();
0: 			} catch (IllegalStateException ise) {
0: 				logger.debug("An exception occurred when unregistering the Transaction Control service", ise);
1: 			}
1: 			
0: 			Optional<?> check = tracker.getTracked().values().stream()
0: 				.filter(c -> {
0: 					checkAndRegister(c);
0: 					synchronized (lock) {
0: 						return reg != null;
1: 					}
0: 				}).findFirst();
1: 			
0: 			if(!check.isPresent()) {
0: 				logger.info("No replacement Coordinator service was available. The Transaction Control service will remain unavailable until a new Coordinator can be found");
1: 			}
1: 		}
0: 		context.ungetService(reference);
1: 	}
1: 
1: }
============================================================================