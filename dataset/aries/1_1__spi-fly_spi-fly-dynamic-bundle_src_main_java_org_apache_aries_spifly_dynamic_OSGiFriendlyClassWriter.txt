1:c7183ef: /*
1:c7183ef:  * Licensed to the Apache Software Foundation (ASF) under one
1:c7183ef:  * or more contributor license agreements.  See the NOTICE file
1:c7183ef:  * distributed with this work for additional information
1:c7183ef:  * regarding copyright ownership.  The ASF licenses this file
1:c7183ef:  * to you under the Apache License, Version 2.0 (the
1:c7183ef:  * "License"); you may not use this file except in compliance
1:c7183ef:  * with the License.  You may obtain a copy of the License at
1:c7183ef:  *
1:c7183ef:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c7183ef:  *
1:c7183ef:  * Unless required by applicable law or agreed to in writing,
1:c7183ef:  * software distributed under the License is distributed on an
1:c7183ef:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c7183ef:  * KIND, either express or implied.  See the License for the
1:c7183ef:  * specific language governing permissions and limitations
1:c7183ef:  * under the License.
3:c7183ef:  */
1:c7183ef: package org.apache.aries.spifly.dynamic;
13:c7183ef: 
1:c7183ef: import java.io.IOException;
1:c7183ef: import java.io.InputStream;
1:c7183ef: import java.util.HashSet;
1:c7183ef: import java.util.Set;
1:c7183ef: 
1:c7183ef: import org.objectweb.asm.ClassReader;
1:c7183ef: import org.objectweb.asm.ClassWriter;
3:c7183ef: /**
1:ef1ad16:  * We need to override ASM's default behaviour in {@link #getCommonSuperClass(String, String)}
1:ef1ad16:  * so that it doesn't load classes (which it was doing on the wrong {@link ClassLoader}
1:ef1ad16:  * anyway...)
1:c7183ef:  *
1:c7183ef:  * Taken from the org.apache.aries.proxy.impl module.
1:c7183ef:  */
1:c7183ef: public final class OSGiFriendlyClassWriter extends ClassWriter {
1:c7183ef: 
1:ef1ad16:   private static final String OBJECT_INTERNAL_NAME = "java/lang/Object";
1:ef1ad16:   private final ClassLoader loader;
1:ef1ad16: 
1:c7183ef: 
1:ef1ad16:   public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader) {
1:ef1ad16:     super(arg0, arg1);
1:ef1ad16: 
1:ef1ad16:     this.loader = loader;
1:ef1ad16:   }
1:ef1ad16: 
1:ef1ad16:   public OSGiFriendlyClassWriter(int arg0, ClassLoader loader) {
1:ef1ad16:     super(arg0);
1:ef1ad16: 
1:ef1ad16:     this.loader = loader;
1:ef1ad16:   }
1:ef1ad16: 
1:ef1ad16:   /**
1:ef1ad16:    * We provide an implementation that doesn't cause class loads to occur. It may
1:ef1ad16:    * not be sufficient because it expects to find the common parent using a single
1:ef1ad16:    * classloader, though in fact the common parent may only be loadable by another
1:ef1ad16:    * bundle from which an intermediate class is loaded
1:ef1ad16:    *
1:ef1ad16:    * precondition: arg0 and arg1 are not equal. (checked before this method is called)
1:ef1ad16:    */
1:ef1ad16:   @Override
1:ef1ad16:   protected final String getCommonSuperClass(String arg0, String arg1) {
1:ef1ad16:     //If either is Object, then Object must be the answer
1:ef1ad16:     if(arg0.equals(OBJECT_INTERNAL_NAME) || arg1.equals(OBJECT_INTERNAL_NAME)) {
1:ef1ad16:       return OBJECT_INTERNAL_NAME;
8:c7183ef:     }
1:ef1ad16:     Set<String> names = new HashSet<String>();
1:ef1ad16:     names.add(arg0);
1:ef1ad16:     names.add(arg1);
1:ef1ad16:     //Try loading the class (in ASM not for real)
1:ef1ad16:     try {
1:ef1ad16:       boolean bRunning = true;
1:ef1ad16:       boolean aRunning = true;
1:ef1ad16:       InputStream is;
1:ef1ad16:       String arg00 = arg0;
1:ef1ad16:       String arg11 = arg1;
1:ef1ad16:       while(aRunning || bRunning ) {
1:ef1ad16:         if(aRunning) {
1:ef1ad16:           is = loader.getResourceAsStream(arg00 + ".class");
1:ef1ad16:           if(is != null) {
1:ef1ad16:             ClassReader cr = new ClassReader(is);
1:ef1ad16:             arg00 = cr.getSuperName();
1:ef1ad16:             if(arg00 == null) {
1:ef1ad16:               if (names.size() == 2) {
1:ef1ad16:                 return OBJECT_INTERNAL_NAME; //arg0 is an interface
1:ef1ad16:               }
1:ef1ad16:               aRunning = false; //old arg00 was java.lang.Object
1:ef1ad16:             } else if(!!!names.add(arg00)) {
1:ef1ad16:               return arg00;
1:c7183ef:             }
1:ef1ad16:           } else {
1:ef1ad16:             //The class file isn't visible on this ClassLoader
1:ef1ad16:             aRunning = false;
1:ef1ad16:           }
1:c7183ef:         }
1:ef1ad16:         if(bRunning) {
1:ef1ad16:           is = loader.getResourceAsStream(arg11 + ".class");
1:ef1ad16:           if(is != null) {
1:ef1ad16:             ClassReader cr = new ClassReader(is);
1:ef1ad16:             arg11 = cr.getSuperName();
1:ef1ad16:             if(arg11 == null) {
1:ef1ad16:               if (names.size() == 3) {
1:ef1ad16:                 return OBJECT_INTERNAL_NAME;  //arg1 is an interface
1:ef1ad16:               }
1:ef1ad16:               bRunning = false; //old arg11 was java.lang.Object
1:ef1ad16:             } else if(!!!names.add(arg11)) {
1:ef1ad16:               return arg11;
1:ef1ad16:             }
1:ef1ad16:           } else {
1:ef1ad16:             bRunning = false;
1:ef1ad16:           }
1:ef1ad16:         }
1:ef1ad16:       }
1:ef1ad16: 
1:ef1ad16:       throw new RuntimeException("No Common Superclass:" + arg0 + " " + arg1);
1:ef1ad16:     } catch (IOException e) {
1:ef1ad16:       throw new RuntimeException(e);
1:ef1ad16:     }
1:c7183ef:   }
1:c7183ef: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:ef1ad16
/////////////////////////////////////////////////////////////////////////
1:  * We need to override ASM's default behaviour in {@link #getCommonSuperClass(String, String)}
1:  * so that it doesn't load classes (which it was doing on the wrong {@link ClassLoader}
1:  * anyway...)
1:   private static final String OBJECT_INTERNAL_NAME = "java/lang/Object";
1:   private final ClassLoader loader;
1: 
1:   public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader) {
1:     super(arg0, arg1);
1: 
1:     this.loader = loader;
1:   }
1: 
1:   public OSGiFriendlyClassWriter(int arg0, ClassLoader loader) {
1:     super(arg0);
1: 
1:     this.loader = loader;
1:   }
1: 
1:   /**
1:    * We provide an implementation that doesn't cause class loads to occur. It may
1:    * not be sufficient because it expects to find the common parent using a single
1:    * classloader, though in fact the common parent may only be loadable by another
1:    * bundle from which an intermediate class is loaded
1:    *
1:    * precondition: arg0 and arg1 are not equal. (checked before this method is called)
1:    */
1:   @Override
1:   protected final String getCommonSuperClass(String arg0, String arg1) {
1:     //If either is Object, then Object must be the answer
1:     if(arg0.equals(OBJECT_INTERNAL_NAME) || arg1.equals(OBJECT_INTERNAL_NAME)) {
1:       return OBJECT_INTERNAL_NAME;
1:     Set<String> names = new HashSet<String>();
1:     names.add(arg0);
1:     names.add(arg1);
1:     //Try loading the class (in ASM not for real)
1:     try {
1:       boolean bRunning = true;
1:       boolean aRunning = true;
1:       InputStream is;
1:       String arg00 = arg0;
1:       String arg11 = arg1;
1:       while(aRunning || bRunning ) {
1:         if(aRunning) {
1:           is = loader.getResourceAsStream(arg00 + ".class");
1:           if(is != null) {
1:             ClassReader cr = new ClassReader(is);
1:             arg00 = cr.getSuperName();
1:             if(arg00 == null) {
1:               if (names.size() == 2) {
1:                 return OBJECT_INTERNAL_NAME; //arg0 is an interface
1:               }
1:               aRunning = false; //old arg00 was java.lang.Object
1:             } else if(!!!names.add(arg00)) {
1:               return arg00;
1:           } else {
1:             //The class file isn't visible on this ClassLoader
1:             aRunning = false;
1:           }
1:         if(bRunning) {
1:           is = loader.getResourceAsStream(arg11 + ".class");
1:           if(is != null) {
1:             ClassReader cr = new ClassReader(is);
1:             arg11 = cr.getSuperName();
1:             if(arg11 == null) {
1:               if (names.size() == 3) {
1:                 return OBJECT_INTERNAL_NAME;  //arg1 is an interface
1:               }
1:               bRunning = false; //old arg11 was java.lang.Object
1:             } else if(!!!names.add(arg11)) {
1:               return arg11;
1:             }
1:           } else {
1:             bRunning = false;
1:           }
1:         }
1:       }
1: 
1:       throw new RuntimeException("No Common Superclass:" + arg0 + " " + arg1);
1:     } catch (IOException e) {
1:       throw new RuntimeException(e);
1:   }
commit:c7183ef
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly.dynamic;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import org.objectweb.asm.ClassReader;
1: import org.objectweb.asm.ClassWriter;
0: import org.objectweb.asm.MethodVisitor;
0: import org.objectweb.asm.commons.JSRInlinerAdapter;
1: 
1: 
1: /**
0:  * We need to override ASM's default behaviour in
0:  * {@link #getCommonSuperClass(String, String)} so that it doesn't load classes
0:  * (which it was doing on the wrong {@link ClassLoader} anyway...)
1:  *
1:  * Taken from the org.apache.aries.proxy.impl module.
1:  */
1: public final class OSGiFriendlyClassWriter extends ClassWriter {
1: 
0:     private static final String OBJECT_INTERNAL_NAME = "java/lang/Object";
0:     private final ClassLoader loader;
0:     private String currentClassInternalName;
0:     private String currentSuperClassInternalName;
0:     private final boolean inlineJSR;
1: 
0:     public OSGiFriendlyClassWriter(ClassReader arg0, int arg1, ClassLoader loader) {
0:         super(arg0, arg1);
0:         inlineJSR = arg1 == COMPUTE_FRAMES;
0:         this.loader = loader;
1:     }
1: 
0:     public OSGiFriendlyClassWriter(int arg0, ClassLoader loader) {
0:         super(arg0);
0:         inlineJSR = arg0 == COMPUTE_FRAMES;
0:         this.loader = loader;
1:     }
1: 
1:     /**
0:      * We provide an implementation that doesn't cause class loads to occur. It
0:      * may not be sufficient because it expects to find the common parent using
0:      * a single classloader, though in fact the common parent may only be
0:      * loadable by another bundle from which an intermediate class is loaded
1:      */
0:     @Override
0:     protected final String getCommonSuperClass(String arg0, String arg1) {
0:         // If the two are equal then return either
0:         if (arg0.equals(arg1))
0:             return arg0;
1: 
0:         // If either is Object, then Object must be the answer
0:         if (arg0.equals(OBJECT_INTERNAL_NAME) || arg1.equals(OBJECT_INTERNAL_NAME))
0:             return OBJECT_INTERNAL_NAME;
1: 
0:         // If either of these class names are the current class then we can
0:         // short
0:         // circuit to the superclass (which we already know)
0:         if (arg0.equals(currentClassInternalName))
0:             getCommonSuperClass(currentSuperClassInternalName, arg1);
0:         else if (arg1.equals(currentClassInternalName))
0:             getCommonSuperClass(arg0, currentSuperClassInternalName);
1: 
0:         Set<String> names = new HashSet<String>();
0:         names.add(arg0);
0:         names.add(arg1);
0:         // Try loading the class (in ASM not for real)
0:         try {
0:             boolean bRunning = true;
0:             boolean aRunning = true;
0:             InputStream is;
0:             String arg00 = arg0;
0:             String arg11 = arg1;
0:             String unable = null;
0:             while (aRunning || bRunning) {
0:                 if (aRunning) {
0:                     is = loader.getResourceAsStream(arg00 + ".class");
0:                     if (is != null) {
0:                         ClassReader cr = new ClassReader(is);
0:                         arg00 = cr.getSuperName();
0:                         if (arg00 == null)
0:                             aRunning = false;
0:                         else if (!!!names.add(arg00))
0:                             return arg00;
0:                     } else {
0:                         // The class file isn't visible on this ClassLoader
0:                         unable = arg0;
0:                         aRunning = false;
1:                     }
1:                 }
0:                 if (bRunning) {
0:                     is = loader.getResourceAsStream(arg11 + ".class");
0:                     if (is != null) {
0:                         ClassReader cr = new ClassReader(is);
0:                         arg11 = cr.getSuperName();
0:                         if (arg11 == null)
0:                             bRunning = false;
0:                         else if (!!!names.add(arg11))
0:                             return arg11;
0:                     } else {
0:                         unable = arg1;
0:                         bRunning = false;
1:                     }
1:                 }
1:             }
1: 
0:             throw new RuntimeException("No Common Supperclass:" + arg0 + " " + arg1);
0:         } catch (IOException e) {
0:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     /**
0:      * We need access to the super's name and our class name
1:      */
0:     @Override
0:     public final void visit(int arg0, int arg1, String arg2, String arg3, String arg4, String[] arg5) {
0:         currentClassInternalName = arg2;
0:         currentSuperClassInternalName = arg4;
0:         super.visit(arg0, arg1, arg2, arg3, arg4, arg5);
1:     }
1: 
0:     @Override
0:     public MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String[] arg4) {
0:         MethodVisitor mv = super.visitMethod(arg0, arg1, arg2, arg3, arg4);
1: 
0:         if (inlineJSR)
0:             mv = new JSRInlinerAdapter(mv, arg0, arg1, arg2, arg3, arg4);
1: 
0:         return mv;
1:     }
1: }
============================================================================