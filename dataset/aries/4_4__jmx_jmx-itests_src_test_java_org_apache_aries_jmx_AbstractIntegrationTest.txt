3:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:7186eab:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
3:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
3:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx;
1:7186eab: 
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.composite;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.provision;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.when;
1:0a8778f: import static org.ops4j.pax.tinybundles.core.TinyBundles.bundle;
1:0a8778f: import static org.ops4j.pax.tinybundles.core.TinyBundles.withBnd;
1:7186eab: 
1:0a8778f: import java.io.ByteArrayInputStream;
1:0a8778f: import java.io.ByteArrayOutputStream;
1:0a8778f: import java.io.IOException;
1:0a8778f: import java.io.InputStream;
1:0a8778f: import java.util.Properties;
1:7186eab: import java.util.Set;
1:7186eab: 
1:0a8778f: import javax.inject.Inject;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.MBeanServerInvocationHandler;
1:fdf3952: import javax.management.ObjectName;
1:7186eab: 
1:0a8778f: import org.apache.aries.jmx.test.MbeanServerActivator;
1:fdf3952: import org.junit.runner.RunWith;
1:0a8778f: import org.ops4j.pax.exam.Option;
1:0a8778f: import org.ops4j.pax.exam.junit.PaxExam;
1:0a8778f: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1:0a8778f: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:0a8778f: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:0a8778f: import org.osgi.framework.Bundle;
1:0a8778f: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:0a8778f: 
1:0a8778f: /**
1:fdf3952:  * @version $Rev$ $Date$
1:0a8778f:  */
1:0a8778f: @RunWith(PaxExam.class)
1:0a8778f: @ExamReactorStrategy(PerClass.class)
1:0a8778f: public abstract class AbstractIntegrationTest extends org.apache.aries.itest.AbstractIntegrationTest {
1:988cc71:     protected ServiceReference reference;
1:0a8778f:     
1:0a8778f:     @Inject
1:fdf3952:     protected MBeanServer mbeanServer;
1:0a8778f: 
1:0a8778f: 	public Option baseOptions() {
1:0a8778f:         String localRepo = System.getProperty("maven.repo.local");
1:0a8778f:         if (localRepo == null) {
1:0a8778f:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:0a8778f:         }
1:0a8778f:         return composite(
1:0a8778f:                 junitBundles(),
1:0a8778f:                 // this is how you set the default log level when using pax
1:0a8778f:                 // logging (logProfile)
1:0a8778f:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:0a8778f:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:0a8778f:          );
1:0a8778f:     }
1:ed135dd: 
1:0a8778f: 	protected Option jmxRuntime() {
1:0a8778f: 		return composite(
1:0a8778f: 				baseOptions(),
1:0a8778f: 				mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:e5ac2fd:                 mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx").versionAsInProject(),
1:e5ac2fd:                 mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.core.whiteboard").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.api").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard").versionAsInProject(),
1:0a8778f: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:0a8778f: 				mbeanServerBundle()
1:0a8778f: 				);
1:0a8778f: 	}
1:ed135dd: 
1:0a8778f: 	protected Option mbeanServerBundle() {
1:0a8778f: 		return provision(bundle()
1:0a8778f: 		        .add(MbeanServerActivator.class)
1:0a8778f: 		        .set(Constants.BUNDLE_ACTIVATOR, MbeanServerActivator.class.getName())
1:0a8778f: 		        .build(withBnd()));
1:0a8778f: 	}
1:0a8778f: 	
1:0a8778f: 	protected Option bundlea() {
1:0a8778f: 		return provision(bundle()
1:0a8778f: 		        .add(org.apache.aries.jmx.test.bundlea.Activator.class)
1:0a8778f: 		        .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
1:0a8778f: 		        .add(org.apache.aries.jmx.test.bundlea.impl.A.class)
1:0a8778f: 		        .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlea")
1:0a8778f: 		        .set(Constants.BUNDLE_VERSION, "2.0.0")
1:0a8778f: 		        .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.bundlea.api;version=2.0.0")
1:0a8778f: 		        .set(Constants.IMPORT_PACKAGE,
1:0a8778f: 		                "org.osgi.framework;version=1.5.0,org.osgi.util.tracker,org.apache.aries.jmx.test.bundleb.api;version=1.1.0;resolution:=optional" +
1:0a8778f: 		                ",org.osgi.service.cm")
1:0a8778f: 		        .set(Constants.BUNDLE_ACTIVATOR,
1:0a8778f: 		                org.apache.aries.jmx.test.bundlea.Activator.class.getName())
1:0a8778f: 		        .build(withBnd()));
1:0a8778f: 	}
1:0a8778f:     
1:0a8778f: 	protected Option bundleb() {
1:0a8778f: 		return provision(bundle()
1:0a8778f: 		        .add(org.apache.aries.jmx.test.bundleb.Activator.class)
1:0a8778f: 		        .add(org.apache.aries.jmx.test.bundleb.api.InterfaceB.class)
1:0a8778f: 		        .add(org.apache.aries.jmx.test.bundleb.api.MSF.class)
1:0a8778f: 		        .add(org.apache.aries.jmx.test.bundleb.impl.B.class)
1:0a8778f: 		        .set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.aries.jmx.test.bundleb")
1:0a8778f: 		        .set(Constants.BUNDLE_VERSION, "1.0.0")
1:0a8778f: 		        .set(Constants.EXPORT_PACKAGE,"org.apache.aries.jmx.test.bundleb.api;version=1.1.0")
1:0a8778f: 		        .set(Constants.IMPORT_PACKAGE,"org.osgi.framework;version=1.5.0,org.osgi.util.tracker," +
1:0a8778f: 		        		"org.osgi.service.cm,org.apache.aries.jmx.test.fragmentc")
1:0a8778f: 		        .set(Constants.BUNDLE_ACTIVATOR,
1:0a8778f: 		                org.apache.aries.jmx.test.bundleb.Activator.class.getName())
1:0a8778f: 		        .build(withBnd()));
1:0a8778f: 	}
1:0a8778f:     
1:0a8778f: 	protected Option fragmentc() {
1:0a8778f: 		return streamBundle(bundle()
1:0a8778f: 		        .add(org.apache.aries.jmx.test.fragmentc.C.class)
1:0a8778f: 		        .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.fragc")
1:0a8778f: 		        .set(Constants.FRAGMENT_HOST, "org.apache.aries.jmx.test.bundlea")
1:0a8778f: 		        .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.fragmentc")
1:0a8778f: 		        .build(withBnd())).noStart();
1:0a8778f: 	}
1:0a8778f: 	
1:0a8778f: 	protected Option bundled() {
1:0a8778f: 		return provision(bundle()
1:0a8778f: 		        .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundled")
1:0a8778f: 		        .set(Constants.BUNDLE_VERSION, "3.0.0")
1:0a8778f: 		        .set(Constants.REQUIRE_BUNDLE, "org.apache.aries.jmx.test.bundlea;bundle-version=2.0.0")
1:0a8778f: 		        .build(withBnd()));
1:0a8778f: 	}
1:0a8778f: 	
1:0a8778f: 	protected Option bundlee() {
1:0a8778f: 		return provision(bundle()
1:0a8778f: 		        .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlee")
1:0a8778f: 		        .set(Constants.BUNDLE_DESCRIPTION, "%desc")
1:0a8778f: 		        .add("OSGI-INF/l10n/bundle.properties", getBundleProps("desc", "Description"))
1:0a8778f: 		        .add("OSGI-INF/l10n/bundle_nl.properties", getBundleProps("desc", "Omschrijving"))
1:0a8778f: 		        .build(withBnd()));
1:0a8778f: 	}
1:0a8778f: 
1:0a8778f:     private InputStream getBundleProps(String key, String value) {
1:0a8778f:         try {
1:0a8778f:             Properties p = new Properties();
1:0a8778f:             p.put(key, value);
1:0a8778f:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:0a8778f:             p.store(baos, "");
1:0a8778f:             return new ByteArrayInputStream(baos.toByteArray());
1:0a8778f:         } catch (IOException e) {
1:0a8778f:             throw new RuntimeException(e);
1:0a8778f:         }
1:0a8778f:     }
1:0a8778f: 	
1:0a8778f:     protected ObjectName waitForMBean(String name) {
1:ed135dd:         return waitForMBean(name, 20);
8:fdf3952:     }
1:0a8778f: 
1:0a8778f:     protected ObjectName waitForMBean(String name, int timeoutInSeconds) {
1:fdf3952:         int i=0;
1:fdf3952:         while (true) {
1:0a8778f:             ObjectName queryName;
1:0a8778f: 			try {
1:0a8778f: 				queryName = new ObjectName(name.toString() + ",*");
1:0a8778f: 			} catch (Exception e) {
1:0a8778f: 				throw new IllegalArgumentException("Invalid name " + name, e);
1:0a8778f: 			}
1:7186eab:             Set<ObjectName> result = mbeanServer.queryNames(queryName, null);
1:7186eab:             if (result.size() > 0)
1:7186eab:                 return result.iterator().next();
8:7186eab: 
1:0a8778f:             if (i == timeoutInSeconds * 10)
1:0a8778f:                 throw new RuntimeException(name + " mbean is not available after waiting " + timeoutInSeconds + " seconds");
1:7186eab: 
1:fdf3952:             i++;
1:0a8778f:             try {
1:0a8778f: 				Thread.sleep(100);
1:0a8778f: 			} catch (InterruptedException e) {
1:0a8778f: 			}
1:7186eab:         }
1:fdf3952:     }
1:7186eab: 
1:fdf3952:     protected <T> T getMBean(String name, Class<T> type) {
1:0a8778f:         ObjectName objectName = waitForMBean(name);
1:0a8778f:         return getMBean(objectName, type);
1:7186eab:     }
1:7186eab: 
1:7186eab:     protected <T> T getMBean(ObjectName objectName, Class<T> type) {
1:0a8778f:         return MBeanServerInvocationHandler.newProxyInstance(mbeanServer, objectName, type, false);
1:0a8778f:     }
1:0a8778f:     
1:0a8778f:     protected Bundle getBundleByName(String symName) {
1:0a8778f:     	Bundle b = context().getBundleByName(symName);
1:0a8778f:         assertNotNull("Bundle " + symName + "should be installed", b);
1:0a8778f:         return b;
1:7186eab:     }
1:fdf3952: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:e5ac2fd
/////////////////////////////////////////////////////////////////////////
1:                 mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.core.whiteboard").versionAsInProject(),
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:ed135dd
/////////////////////////////////////////////////////////////////////////
1: 
0:                 mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx").version("1.1.2-SNAPSHOT"),
0:                 mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.core.whiteboard").version("1.1.2-SNAPSHOT"),
1: 
/////////////////////////////////////////////////////////////////////////
1:         return waitForMBean(name, 20);
commit:988cc71
/////////////////////////////////////////////////////////////////////////
1:     protected ServiceReference reference;
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.provision;
1: import static org.ops4j.pax.exam.CoreOptions.streamBundle;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: import static org.ops4j.pax.tinybundles.core.TinyBundles.bundle;
1: import static org.ops4j.pax.tinybundles.core.TinyBundles.withBnd;
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Properties;
1: import javax.inject.Inject;
1: import org.apache.aries.jmx.test.MbeanServerActivator;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public abstract class AbstractIntegrationTest extends org.apache.aries.itest.AbstractIntegrationTest {
0:     protected ServiceReference<MBeanServer> reference;
1:     
1:     @Inject
1: 	public Option baseOptions() {
1:         String localRepo = System.getProperty("maven.repo.local");
1:         if (localRepo == null) {
1:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:         }
1:         return composite(
1:                 junitBundles(),
1:                 // this is how you set the default log level when using pax
1:                 // logging (logProfile)
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:          );
1:     
1: 	protected Option jmxRuntime() {
1: 		return composite(
1: 				baseOptions(),
1: 				mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1: 				mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
0: 				jmxBundle(),
1: 				mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.api").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				mbeanServerBundle()
1: 				);
1: 	}
1:     
1: 	/**
0: 	 * jmx bundle to provision. Override this with jmxWhiteBoardBundle for the whiteboard tests
0: 	 * @return
1: 	 */
0: 	protected MavenArtifactProvisionOption jmxBundle() {
0: 		return mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx").version("1.1.2-SNAPSHOT");
1: 	}
1: 	
0: 	protected MavenArtifactProvisionOption jmxWhiteBoardBundle() {
0: 		return mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.core.whiteboard").version("1.1.2-SNAPSHOT");
1: 	}
1: 	
1: 	protected Option mbeanServerBundle() {
1: 		return provision(bundle()
1: 		        .add(MbeanServerActivator.class)
1: 		        .set(Constants.BUNDLE_ACTIVATOR, MbeanServerActivator.class.getName())
1: 		        .build(withBnd()));
1: 	}
1: 	
1: 	protected Option bundlea() {
1: 		return provision(bundle()
1: 		        .add(org.apache.aries.jmx.test.bundlea.Activator.class)
1: 		        .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
1: 		        .add(org.apache.aries.jmx.test.bundlea.impl.A.class)
1: 		        .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlea")
1: 		        .set(Constants.BUNDLE_VERSION, "2.0.0")
1: 		        .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.bundlea.api;version=2.0.0")
1: 		        .set(Constants.IMPORT_PACKAGE,
1: 		                "org.osgi.framework;version=1.5.0,org.osgi.util.tracker,org.apache.aries.jmx.test.bundleb.api;version=1.1.0;resolution:=optional" +
1: 		                ",org.osgi.service.cm")
1: 		        .set(Constants.BUNDLE_ACTIVATOR,
1: 		                org.apache.aries.jmx.test.bundlea.Activator.class.getName())
1: 		        .build(withBnd()));
1: 	}
1:     
1: 	protected Option bundleb() {
1: 		return provision(bundle()
1: 		        .add(org.apache.aries.jmx.test.bundleb.Activator.class)
1: 		        .add(org.apache.aries.jmx.test.bundleb.api.InterfaceB.class)
1: 		        .add(org.apache.aries.jmx.test.bundleb.api.MSF.class)
1: 		        .add(org.apache.aries.jmx.test.bundleb.impl.B.class)
1: 		        .set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.aries.jmx.test.bundleb")
1: 		        .set(Constants.BUNDLE_VERSION, "1.0.0")
1: 		        .set(Constants.EXPORT_PACKAGE,"org.apache.aries.jmx.test.bundleb.api;version=1.1.0")
1: 		        .set(Constants.IMPORT_PACKAGE,"org.osgi.framework;version=1.5.0,org.osgi.util.tracker," +
1: 		        		"org.osgi.service.cm,org.apache.aries.jmx.test.fragmentc")
1: 		        .set(Constants.BUNDLE_ACTIVATOR,
1: 		                org.apache.aries.jmx.test.bundleb.Activator.class.getName())
1: 		        .build(withBnd()));
1: 	}
1:     
1: 	protected Option fragmentc() {
1: 		return streamBundle(bundle()
1: 		        .add(org.apache.aries.jmx.test.fragmentc.C.class)
1: 		        .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.fragc")
1: 		        .set(Constants.FRAGMENT_HOST, "org.apache.aries.jmx.test.bundlea")
1: 		        .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.fragmentc")
1: 		        .build(withBnd())).noStart();
1: 	}
1: 	
1: 	protected Option bundled() {
1: 		return provision(bundle()
1: 		        .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundled")
1: 		        .set(Constants.BUNDLE_VERSION, "3.0.0")
1: 		        .set(Constants.REQUIRE_BUNDLE, "org.apache.aries.jmx.test.bundlea;bundle-version=2.0.0")
1: 		        .build(withBnd()));
1: 	}
1: 	
1: 	protected Option bundlee() {
1: 		return provision(bundle()
1: 		        .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlee")
1: 		        .set(Constants.BUNDLE_DESCRIPTION, "%desc")
1: 		        .add("OSGI-INF/l10n/bundle.properties", getBundleProps("desc", "Description"))
1: 		        .add("OSGI-INF/l10n/bundle_nl.properties", getBundleProps("desc", "Omschrijving"))
1: 		        .build(withBnd()));
1: 	}
1:     private InputStream getBundleProps(String key, String value) {
1:         try {
1:             Properties p = new Properties();
1:             p.put(key, value);
1:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:             p.store(baos, "");
1:             return new ByteArrayInputStream(baos.toByteArray());
1:         } catch (IOException e) {
1:             throw new RuntimeException(e);
1:         }
1: 	
1:     protected ObjectName waitForMBean(String name) {
1:     protected ObjectName waitForMBean(String name, int timeoutInSeconds) {
1:             ObjectName queryName;
1: 			try {
1: 				queryName = new ObjectName(name.toString() + ",*");
1: 			} catch (Exception e) {
1: 				throw new IllegalArgumentException("Invalid name " + name, e);
1: 			}
1:             if (i == timeoutInSeconds * 10)
1:                 throw new RuntimeException(name + " mbean is not available after waiting " + timeoutInSeconds + " seconds");
1:             try {
1: 				Thread.sleep(100);
1: 			} catch (InterruptedException e) {
1: 			}
1:         ObjectName objectName = waitForMBean(name);
1:         return getMBean(objectName, type);
1:         return MBeanServerInvocationHandler.newProxyInstance(mbeanServer, objectName, type, false);
1:     }
1:     
1:     protected Bundle getBundleByName(String symName) {
1:     	Bundle b = context().getBundleByName(symName);
1:         assertNotNull("Bundle " + symName + "should be installed", b);
1:         return b;
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:7186eab
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      *
1: 
1: 
0:     protected ObjectName waitForMBean(ObjectName name) throws Exception {
0:         return waitForMBean(name, 10);
1: 
0:     protected ObjectName waitForMBean(ObjectName name, int timeoutInSeconds) throws Exception {
0:             ObjectName queryName = new ObjectName(name.toString() + ",*");
1:             Set<ObjectName> result = mbeanServer.queryNames(queryName, null);
1:             if (result.size() > 0)
1:                 return result.iterator().next();
1: 
0:             if (i == timeoutInSeconds)
0:                 throw new Exception(name + " mbean is not available after waiting " + timeoutInSeconds + " seconds");
1: 
1: 
0:             objectName = new ObjectName(name + ",*");
1: 
0:         Set<ObjectName> names = mbeanServer.queryNames(objectName, null);
0:         if (names.size() == 0) {
0:             fail("Object name not found: " + objectName);
1:         }
1: 
0:         T mbean = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, names.iterator().next(),
1:     }
1: 
1:     protected <T> T getMBean(ObjectName objectName, Class<T> type) {
0:         T mbean = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, objectName, type, false);
0:         return mbean;
1:     }
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx;
0: 
1: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.fail;
0: import javax.management.InstanceNotFoundException;
1: import javax.management.MBeanServer;
0: import javax.management.MBeanServerFactory;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.ObjectName;
0: 
0: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.ServiceReference;
0: import org.osgi.framework.ServiceRegistration;
0: 
1: /**
1:  * @version $Rev$ $Date$
1:  */
0: @RunWith(JUnit4TestRunner.class)
0: public class AbstractIntegrationTest extends org.apache.aries.itest.AbstractIntegrationTest {
0:     
0:     ServiceRegistration registration;
0:     ServiceReference reference;
1:     protected MBeanServer mbeanServer;
0: 
0:     @Before
0:     public void setUp() throws Exception {
0:         mbeanServer = MBeanServerFactory.createMBeanServer();
0: 
0:         registration = bundleContext.registerService(MBeanServer.class
0:                 .getCanonicalName(), mbeanServer, null);
0:             
0:         String key = MBeanServer.class.getCanonicalName();
0:         System.out.println(key);
0: 
0:         reference = bundleContext.getServiceReference(key);
0:         assertNotNull(reference);
0:         MBeanServer mbeanService = (MBeanServer) bundleContext.getService(reference);
0:         assertNotNull(mbeanService);
0:         
0:         doSetUp();
1:     }
0:     
1:     /**
0:      * A hook for subclasses.
1:      * 
0:      * @throws Exception
1:      */
0:     protected void doSetUp() throws Exception {}
0:     
0:     @After
0:     public void tearDown() throws Exception {
0:         bundleContext.ungetService(reference);
0:         //plainRegistration.unregister();
1:     }
0:     
0:     protected void waitForMBean(ObjectName name) throws Exception {
0:         waitForMBean(name, 10);        
1:     }
0:     
0:     protected void waitForMBean(ObjectName name, int timeoutInSeconds) throws Exception {
1:         int i=0;
1:         while (true) {
0:             try {
0:                 mbeanServer.getObjectInstance(name);
0:                 break;
0:             } catch (InstanceNotFoundException e) {
0:                 if (i == timeoutInSeconds) {
0:                     throw new Exception(name + " mbean is not available after waiting " + timeoutInSeconds + " seconds");
1:                 }
1:             }
1:             i++;
0:             Thread.sleep(1000);
1:         }
1:     }
0:     
0:     @SuppressWarnings("unchecked")
1:     protected <T> T getMBean(String name, Class<T> type) {
0:         ObjectName objectName = null;
0:         try {
0:             objectName = new ObjectName(name);
0:         } catch (Exception e) {
0:             fail(e.toString());
1:         }
0:         assertNotNull(mbeanServer);
0:         assertNotNull(objectName);
0:         T mbean = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, objectName,
0:                 type, false);
0:         return mbean;
1:     }    
1: }
============================================================================