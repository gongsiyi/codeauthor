1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
1:428e9f1: 
1:428e9f1: import java.util.Arrays;
1:428e9f1: import java.util.Collection;
1:428e9f1: import java.util.Collections;
1:428e9f1: import java.util.HashMap;
1:428e9f1: import java.util.HashSet;
1:428e9f1: import java.util.Map;
1:428e9f1: import java.util.Set;
1:428e9f1: 
1:428e9f1: import org.osgi.resource.Capability;
1:428e9f1: import org.osgi.resource.Requirement;
1:428e9f1: 
1:d6eb080: public class CompositeRepository implements org.apache.aries.subsystem.core.repository.Repository {
1:d6eb080: 	private final Collection<org.apache.aries.subsystem.core.repository.Repository> repositories;
1:428e9f1: 	
1:d6eb080: 	public CompositeRepository(org.apache.aries.subsystem.core.repository.Repository...repositories) {
1:428e9f1: 		this(Arrays.asList(repositories));
1:428e9f1: 	}
1:428e9f1: 	
1:d6eb080: 	public CompositeRepository(Collection<org.apache.aries.subsystem.core.repository.Repository> repositories) {
1:428e9f1: 		this.repositories = repositories;
1:428e9f1: 	}
1:428e9f1: 	
1:428e9f1: 	public Collection<Capability> findProviders(Requirement requirement) {
1:428e9f1: 		Set<Capability> result = new HashSet<Capability>();
1:d6eb080: 		for (org.apache.aries.subsystem.core.repository.Repository repository : repositories) {
1:428e9f1: 			Map<Requirement, Collection<Capability>> map = repository.findProviders(Collections.singleton(requirement));
1:428e9f1: 			Collection<Capability> capabilities = map.get(requirement);
1:428e9f1: 			if (capabilities == null)
1:428e9f1: 				continue;
1:428e9f1: 			result.addAll(capabilities);
1:428e9f1: 		}
1:428e9f1: 		return result;	
1:428e9f1: 	}
1:428e9f1: 	
1:428e9f1: 	@Override
1:428e9f1: 	public Map<Requirement, Collection<Capability>> findProviders(
1:428e9f1: 			Collection<? extends Requirement> requirements) {
1:428e9f1: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
1:428e9f1: 		for (Requirement requirement : requirements)
1:428e9f1: 			result.put(requirement, findProviders(requirement));
1:428e9f1: 		return result;
1:428e9f1: 	}
1:428e9f1: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: public class CompositeRepository implements org.apache.aries.subsystem.core.repository.Repository {
1: 	private final Collection<org.apache.aries.subsystem.core.repository.Repository> repositories;
1: 	public CompositeRepository(org.apache.aries.subsystem.core.repository.Repository...repositories) {
1: 	public CompositeRepository(Collection<org.apache.aries.subsystem.core.repository.Repository> repositories) {
1: 		for (org.apache.aries.subsystem.core.repository.Repository repository : repositories) {
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
commit:428e9f1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.subsystem.core.resource;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
0: import org.osgi.service.repository.Repository;
1: 
0: public class CompositeRepository implements Repository {
0: 	private final Collection<Repository> repositories;
1: 	
0: 	public CompositeRepository(Repository...repositories) {
1: 		this(Arrays.asList(repositories));
1: 	}
1: 	
0: 	public CompositeRepository(Collection<Repository> repositories) {
1: 		this.repositories = repositories;
1: 	}
1: 	
1: 	public Collection<Capability> findProviders(Requirement requirement) {
1: 		Set<Capability> result = new HashSet<Capability>();
0: 		for (Repository repository : repositories) {
1: 			Map<Requirement, Collection<Capability>> map = repository.findProviders(Collections.singleton(requirement));
1: 			Collection<Capability> capabilities = map.get(requirement);
1: 			if (capabilities == null)
1: 				continue;
1: 			result.addAll(capabilities);
1: 		}
1: 		return result;	
1: 	}
1: 	
1: 	@Override
1: 	public Map<Requirement, Collection<Capability>> findProviders(
1: 			Collection<? extends Requirement> requirements) {
1: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
1: 		for (Requirement requirement : requirements)
1: 			result.put(requirement, findProviders(requirement));
1: 		return result;
1: 	}
1: }
============================================================================