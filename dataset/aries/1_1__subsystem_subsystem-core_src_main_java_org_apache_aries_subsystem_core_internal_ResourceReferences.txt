1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:df175a6: package org.apache.aries.subsystem.core.internal;
1:df175a6: 
1:df175a6: import java.util.ArrayList;
1:df175a6: import java.util.Collection;
1:df175a6: import java.util.Collections;
1:df175a6: import java.util.HashMap;
1:df175a6: import java.util.HashSet;
1:df175a6: import java.util.Map;
1:df175a6: import java.util.Set;
1:df175a6: 
1:df175a6: import org.osgi.resource.Resource;
1:df175a6: 
1:df175a6: public class ResourceReferences {
1:5bd3bf6: 	private final Map<Resource, Set<BasicSubsystem>> resourceToSubsystems = new HashMap<Resource, Set<BasicSubsystem>>();
1:5bd3bf6: 	private final Map<BasicSubsystem, Set<Resource>> subsystemToResources = new HashMap<BasicSubsystem, Set<Resource>>();
1:df175a6: 	
1:5bd3bf6: 	public synchronized void addReference(BasicSubsystem subsystem, Resource resource) {
1:df175a6: 		addSubsystemToResource(subsystem, resource);
1:df175a6: 		addResourceToSubsystem(subsystem, resource);
1:df175a6: 	}
1:df175a6: 	
1:5bd3bf6: 	public synchronized Collection<Resource> getResources(BasicSubsystem subsystem) {
1:df175a6: 		Collection<Resource> result = subsystemToResources.get(subsystem);
1:df175a6: 		if (result == null)
1:df175a6: 			result = Collections.emptyList();
1:df175a6: 		return Collections.unmodifiableCollection(new ArrayList<Resource>(result));
1:df175a6: 	}
1:df175a6: 	
1:5bd3bf6: 	public synchronized Collection<BasicSubsystem> getSubsystems(Resource resource) {
1:5bd3bf6: 		Collection<BasicSubsystem> result = resourceToSubsystems.get(resource);
1:df175a6: 		if (result == null)
1:df175a6: 			result = Collections.emptyList();
1:5bd3bf6: 		return Collections.unmodifiableCollection(new ArrayList<BasicSubsystem>(result));
1:df175a6: 	}
1:df175a6: 	
1:5bd3bf6: 	public synchronized void removeReference(BasicSubsystem subsystem, Resource resource) {
1:df175a6: 		removeResourceToSubsystem(subsystem, resource);
1:df175a6: 		removeSubsystemToResource(subsystem, resource);
1:df175a6: 	}
1:df175a6: 	
1:5bd3bf6: 	private void addResourceToSubsystem(BasicSubsystem subsystem, Resource resource) {
1:5bd3bf6: 		Set<BasicSubsystem> subsystems = resourceToSubsystems.get(resource);
1:df175a6: 		if (subsystems == null) {
1:5bd3bf6: 			subsystems = new HashSet<BasicSubsystem>();
1:df175a6: 			resourceToSubsystems.put(resource, subsystems);
1:df175a6: 		}
1:df175a6: 		subsystems.add(subsystem);
1:df175a6: 	}
1:df175a6: 	
1:5bd3bf6: 	private void addSubsystemToResource(BasicSubsystem subsystem, Resource resource) {
1:df175a6: 		Set<Resource> resources = subsystemToResources.get(subsystem);
1:df175a6: 		if (resources == null) {
1:df175a6: 			resources = new HashSet<Resource>();
1:df175a6: 			subsystemToResources.put(subsystem, resources);
1:df175a6: 		}
1:df175a6: 		resources.add(resource);
1:df175a6: 	}
1:df175a6: 	
1:5bd3bf6: 	private void removeResourceToSubsystem(BasicSubsystem subsystem, Resource resource) {
1:5bd3bf6: 		Set<BasicSubsystem> subsystems = resourceToSubsystems.get(resource);
1:df175a6: 		if (subsystems == null)
1:df175a6: 			return;
1:df175a6: 		subsystems.remove(subsystem);
1:df175a6: 		if (subsystems.isEmpty())
1:df175a6: 			resourceToSubsystems.remove(resource);
1:df175a6: 	}
1:df175a6: 	
1:5bd3bf6: 	private void removeSubsystemToResource(BasicSubsystem subsystem, Resource resource) {
1:df175a6: 		Set<Resource> resources = subsystemToResources.get(subsystem);
1:df175a6: 		if (resources == null)
1:df175a6: 			return;
1:df175a6: 		resources.remove(resource);
1:df175a6: 		if (resources.isEmpty())
1:df175a6: 			subsystemToResources.remove(subsystem);
1:df175a6: 	}
1:df175a6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	private final Map<Resource, Set<BasicSubsystem>> resourceToSubsystems = new HashMap<Resource, Set<BasicSubsystem>>();
1: 	private final Map<BasicSubsystem, Set<Resource>> subsystemToResources = new HashMap<BasicSubsystem, Set<Resource>>();
1: 	public synchronized void addReference(BasicSubsystem subsystem, Resource resource) {
1: 	public synchronized Collection<Resource> getResources(BasicSubsystem subsystem) {
1: 	public synchronized Collection<BasicSubsystem> getSubsystems(Resource resource) {
1: 		Collection<BasicSubsystem> result = resourceToSubsystems.get(resource);
1: 		return Collections.unmodifiableCollection(new ArrayList<BasicSubsystem>(result));
1: 	public synchronized void removeReference(BasicSubsystem subsystem, Resource resource) {
1: 	private void addResourceToSubsystem(BasicSubsystem subsystem, Resource resource) {
1: 		Set<BasicSubsystem> subsystems = resourceToSubsystems.get(resource);
1: 			subsystems = new HashSet<BasicSubsystem>();
1: 	private void addSubsystemToResource(BasicSubsystem subsystem, Resource resource) {
/////////////////////////////////////////////////////////////////////////
1: 	private void removeResourceToSubsystem(BasicSubsystem subsystem, Resource resource) {
1: 		Set<BasicSubsystem> subsystems = resourceToSubsystems.get(resource);
/////////////////////////////////////////////////////////////////////////
1: 	private void removeSubsystemToResource(BasicSubsystem subsystem, Resource resource) {
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:225bcae
/////////////////////////////////////////////////////////////////////////
0: 	private final Map<Resource, Set<AriesSubsystem>> resourceToSubsystems = new HashMap<Resource, Set<AriesSubsystem>>();
0: 	private final Map<AriesSubsystem, Set<Resource>> subsystemToResources = new HashMap<AriesSubsystem, Set<Resource>>();
0: 	public synchronized void addReference(AriesSubsystem subsystem, Resource resource) {
0: 	public synchronized Collection<Resource> getResources(AriesSubsystem subsystem) {
0: 	public synchronized Collection<AriesSubsystem> getSubsystems(Resource resource) {
0: 		Collection<AriesSubsystem> result = resourceToSubsystems.get(resource);
0: 		return Collections.unmodifiableCollection(new ArrayList<AriesSubsystem>(result));
0: 	public synchronized void removeReference(AriesSubsystem subsystem, Resource resource) {
0: 	private void addResourceToSubsystem(AriesSubsystem subsystem, Resource resource) {
0: 		Set<AriesSubsystem> subsystems = resourceToSubsystems.get(resource);
0: 			subsystems = new HashSet<AriesSubsystem>();
0: 	private void addSubsystemToResource(AriesSubsystem subsystem, Resource resource) {
/////////////////////////////////////////////////////////////////////////
0: 	private void removeResourceToSubsystem(AriesSubsystem subsystem, Resource resource) {
0: 		Set<AriesSubsystem> subsystems = resourceToSubsystems.get(resource);
/////////////////////////////////////////////////////////////////////////
0: 	private void removeSubsystemToResource(AriesSubsystem subsystem, Resource resource) {
commit:df175a6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.osgi.resource.Resource;
0: import org.osgi.service.subsystem.Subsystem;
1: 
1: public class ResourceReferences {
0: 	private final Map<Resource, Set<Subsystem>> resourceToSubsystems = new HashMap<Resource, Set<Subsystem>>();
0: 	private final Map<Subsystem, Set<Resource>> subsystemToResources = new HashMap<Subsystem, Set<Resource>>();
1: 	
0: 	public synchronized void addReference(Subsystem subsystem, Resource resource) {
1: 		addSubsystemToResource(subsystem, resource);
1: 		addResourceToSubsystem(subsystem, resource);
1: 	}
1: 	
0: 	public synchronized Collection<Resource> getResources(Subsystem subsystem) {
1: 		Collection<Resource> result = subsystemToResources.get(subsystem);
1: 		if (result == null)
1: 			result = Collections.emptyList();
1: 		return Collections.unmodifiableCollection(new ArrayList<Resource>(result));
1: 	}
1: 	
0: 	public synchronized Collection<Subsystem> getSubsystems(Resource resource) {
0: 		Collection<Subsystem> result = resourceToSubsystems.get(resource);
1: 		if (result == null)
1: 			result = Collections.emptyList();
0: 		return Collections.unmodifiableCollection(new ArrayList<Subsystem>(result));
1: 	}
1: 	
0: 	public synchronized void removeReference(Subsystem subsystem, Resource resource) {
1: 		removeResourceToSubsystem(subsystem, resource);
1: 		removeSubsystemToResource(subsystem, resource);
1: 	}
1: 	
0: 	private void addResourceToSubsystem(Subsystem subsystem, Resource resource) {
0: 		Set<Subsystem> subsystems = resourceToSubsystems.get(resource);
1: 		if (subsystems == null) {
0: 			subsystems = new HashSet<Subsystem>();
1: 			resourceToSubsystems.put(resource, subsystems);
1: 		}
1: 		subsystems.add(subsystem);
1: 	}
1: 	
0: 	private void addSubsystemToResource(Subsystem subsystem, Resource resource) {
1: 		Set<Resource> resources = subsystemToResources.get(subsystem);
1: 		if (resources == null) {
1: 			resources = new HashSet<Resource>();
1: 			subsystemToResources.put(subsystem, resources);
1: 		}
1: 		resources.add(resource);
1: 	}
1: 	
0: 	private void removeResourceToSubsystem(Subsystem subsystem, Resource resource) {
0: 		Set<Subsystem> subsystems = resourceToSubsystems.get(resource);
1: 		if (subsystems == null)
1: 			return;
1: 		subsystems.remove(subsystem);
1: 		if (subsystems.isEmpty())
1: 			resourceToSubsystems.remove(resource);
1: 	}
1: 	
0: 	private void removeSubsystemToResource(Subsystem subsystem, Resource resource) {
1: 		Set<Resource> resources = subsystemToResources.get(subsystem);
1: 		if (resources == null)
1: 			return;
1: 		resources.remove(resource);
1: 		if (resources.isEmpty())
1: 			subsystemToResources.remove(subsystem);
1: 	}
1: }
============================================================================