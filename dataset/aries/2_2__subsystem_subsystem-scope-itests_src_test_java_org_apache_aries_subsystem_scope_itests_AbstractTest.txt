1:e9f9bca: package org.apache.aries.subsystem.scope.itests;
11:e9f9bca: 
1:e9f9bca: import static org.junit.Assert.assertFalse;
1:e9f9bca: import static org.junit.Assert.assertNotNull;
1:e9f9bca: import static org.junit.Assert.assertTrue;
1:5bdb2b8: import static org.ops4j.pax.exam.CoreOptions.composite;
1:5bdb2b8: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:5bdb2b8: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:e9f9bca: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:5bdb2b8: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:5bdb2b8: import static org.ops4j.pax.exam.CoreOptions.when;
1:e9f9bca: 
1:e9f9bca: import java.io.InputStream;
1:e9f9bca: import java.net.URL;
1:e9f9bca: import java.util.ArrayList;
1:e9f9bca: import java.util.Arrays;
1:e9f9bca: import java.util.Collection;
1:e9f9bca: import java.util.Iterator;
1:e9f9bca: import java.util.List;
1:e9f9bca: import java.util.Map;
1:e9f9bca: 
1:5bdb2b8: import javax.inject.Inject;
1:5bdb2b8: 
1:5bdb2b8: import org.apache.aries.itest.AbstractIntegrationTest;
1:e9f9bca: import org.apache.aries.subsystem.scope.InstallInfo;
1:e9f9bca: import org.apache.aries.subsystem.scope.Scope;
1:e9f9bca: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:e9f9bca: import org.apache.aries.subsystem.scope.SharePolicy;
1:5bdb2b8: import org.junit.runner.RunWith;
1:5bdb2b8: import org.ops4j.pax.exam.Configuration;
1:5bdb2b8: import org.ops4j.pax.exam.CoreOptions;
1:e9f9bca: import org.ops4j.pax.exam.Option;
1:5bdb2b8: import org.ops4j.pax.exam.ProbeBuilder;
1:5bdb2b8: import org.ops4j.pax.exam.TestProbeBuilder;
1:5bdb2b8: import org.ops4j.pax.exam.junit.PaxExam;
1:5bdb2b8: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:5bdb2b8: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:5bdb2b8: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:5bdb2b8: import org.ops4j.pax.tinybundles.core.TinyBundles;
1:e9f9bca: import org.osgi.framework.Bundle;
1:e9f9bca: import org.osgi.framework.BundleException;
1:e9f9bca: import org.osgi.framework.Constants;
1:e9f9bca: import org.osgi.framework.Filter;
1:e9f9bca: import org.osgi.framework.InvalidSyntaxException;
1:e9f9bca: 
1:5bdb2b8: @RunWith(PaxExam.class)
1:5bdb2b8: @ExamReactorStrategy(PerMethod.class)
1:6f4b079: public abstract class AbstractTest extends AbstractIntegrationTest {
1:5bdb2b8: 	@Inject
1:5bdb2b8: 	Scope scope;
1:e9f9bca: 	
1:e9f9bca: 	protected void addPackageExportPolicy(String packageName, ScopeUpdate scopeUpdate) throws InvalidSyntaxException {
1:e9f9bca: 		Filter filter = bundleContext.createFilter("(osgi.wiring.package=" + packageName + ')');
1:e9f9bca: 		SharePolicy policy = new SharePolicy(SharePolicy.TYPE_EXPORT, "osgi.wiring.package", filter);
1:e9f9bca: 		Map<String, List<SharePolicy>> policyMap = scopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1:e9f9bca: 		List<SharePolicy> policies = policyMap.get("osgi.wiring.package");
1:e9f9bca: 		if (policies == null) {
1:e9f9bca: 			policies = new ArrayList<SharePolicy>();
1:e9f9bca: 			policyMap.put("osgi.wiring.package", policies);
5:e9f9bca: 		}
1:e9f9bca: 		policies.add(policy);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void addPackageImportPolicy(String packageName, ScopeUpdate scopeUpdate) throws InvalidSyntaxException {
1:e9f9bca: 		Filter filter = bundleContext.createFilter("(osgi.wiring.package=" + packageName + ')');
1:e9f9bca: 		SharePolicy policy = new SharePolicy(SharePolicy.TYPE_IMPORT, "osgi.wiring.package", filter);
1:e9f9bca: 		Map<String, List<SharePolicy>> policyMap = scopeUpdate.getSharePolicies(SharePolicy.TYPE_IMPORT);
1:e9f9bca: 		List<SharePolicy> policies = policyMap.get("osgi.wiring.package");
1:e9f9bca: 		if (policies == null) {
1:e9f9bca: 			policies = new ArrayList<SharePolicy>();
1:e9f9bca: 			policyMap.put("osgi.wiring.package", policies);
1:e9f9bca: 		}
1:e9f9bca: 		policies.add(policy);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void addServiceExportPolicy(Class<?> clazz, ScopeUpdate scopeUpdate) throws InvalidSyntaxException {
1:e9f9bca: 		Filter filter = bundleContext.createFilter('(' + Constants.OBJECTCLASS + '=' + clazz.getName() + ')');
1:e9f9bca: 		SharePolicy policy = new SharePolicy(SharePolicy.TYPE_EXPORT, "scope.share.service", filter);
1:e9f9bca: 		Map<String, List<SharePolicy>> policyMap = scopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1:e9f9bca: 		List<SharePolicy> policies = policyMap.get("scope.share.service");
1:e9f9bca: 		if (policies == null) {
1:e9f9bca: 			policies = new ArrayList<SharePolicy>();
1:e9f9bca: 			policyMap.put("scope.share.service", policies);
1:e9f9bca: 		}
1:e9f9bca: 		policies.add(policy);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void addServiceImportPolicy(Class<?> clazz, ScopeUpdate scopeUpdate) throws InvalidSyntaxException {
1:e9f9bca: 		Filter filter = bundleContext.createFilter('(' + Constants.OBJECTCLASS + '=' + clazz.getName() + ')');
1:e9f9bca: 		SharePolicy policy = new SharePolicy(SharePolicy.TYPE_IMPORT, "scope.share.service", filter);
1:e9f9bca: 		Map<String, List<SharePolicy>> policyMap = scopeUpdate.getSharePolicies(SharePolicy.TYPE_IMPORT);
1:e9f9bca: 		List<SharePolicy> policies = policyMap.get("scope.share.service");
1:e9f9bca: 		if (policies == null) {
1:e9f9bca: 			policies = new ArrayList<SharePolicy>();
1:e9f9bca: 			policyMap.put("scope.share.service", policies);
1:e9f9bca: 		}
1:e9f9bca: 		policies.add(policy);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void assertEmpty(Collection<?> c) {
1:e9f9bca: 		assertNotNull(c);
1:e9f9bca: 		assertTrue(c.isEmpty());
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void assertEmpty(Map<?, ?> m) {
1:e9f9bca: 		assertNotNull(m);
1:e9f9bca: 		assertTrue(m.isEmpty());
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void assertCollectionEquals(Collection<?> c1, Collection<?> c2) {
1:e9f9bca: 		assertFalse((c1 == null && c2 != null) || (c1 != null && c2 == null));
1:e9f9bca: 		assertTrue(c1.size() == c2.size());
1:e9f9bca: 		for (Iterator<?> i = c2.iterator(); i.hasNext();) {
1:e9f9bca: 			assertTrue(c2.contains(i.next()));
1:e9f9bca: 		}
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	protected Bundle findBundle(String symbolicName) {
1:6f4b079: 		return Utils.findBundle(symbolicName, bundleContext);
1:6f4b079: 	}
1:6f4b079: 	
1:e9f9bca: 	protected Bundle findBundle(String symbolicName, Scope scope) {
1:e9f9bca: 		return Utils.findBundle(symbolicName, scope);
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected Bundle findBundleInRootScope(String symbolicName) {
1:6f4b079: 		return findBundle(symbolicName, getScope());
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	protected Scope findChildScope(String name, Scope parent) {
1:6f4b079: 		assertNotNull(name);
1:6f4b079: 		assertNotNull(parent);
1:6f4b079: 		Scope result = null;
1:6f4b079: 		for (Scope child : parent.getChildren()) {
1:6f4b079: 			if (name.equals(child.getName())) {
1:6f4b079: 				result = child;
1:6f4b079: 				break;
1:6f4b079: 			}
1:6f4b079: 		}
1:6f4b079: 		assertNotNull(result);
1:6f4b079: 		return result;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected ScopeUpdate findChildUpdate(String name, ScopeUpdate parent) {
1:e9f9bca: 		assertNotNull(name);
1:e9f9bca: 		assertNotNull(parent);
1:e9f9bca: 		ScopeUpdate result = null;
1:e9f9bca: 		for (ScopeUpdate child : parent.getChildren()) {
1:e9f9bca: 			if (name.equals(child.getName())) {
1:e9f9bca: 				result = child;
1:e9f9bca: 				break;
1:e9f9bca: 			}
1:e9f9bca: 		}
1:e9f9bca: 		assertNotNull(result);
1:e9f9bca: 		return result;
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected String getBundleLocation(String bundle) {
1:e9f9bca: 		URL url = AbstractTest.class.getClassLoader().getResource(bundle);
1:e9f9bca: 		return url.toExternalForm();
1:e9f9bca: 	}
1:e9f9bca: 	
1:6f4b079: 	protected Scope getScope() {
1:5bdb2b8: 		return scope;
1:6f4b079: 	}
1:6f4b079: 	
1:e9f9bca: 	protected Bundle installBundle(String name) throws BundleException {
1:e9f9bca: 		URL url = AbstractTest.class.getClassLoader().getResource(name);
1:e9f9bca: 		return bundleContext.installBundle(url.toExternalForm());
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void installBundles(Scope scope, String[] bundleNames) throws Exception {
1:e9f9bca: 		installBundles(scope, Arrays.asList(bundleNames));
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void installBundles(Scope scope, Collection<String> bundleNames) throws Exception {
1:e9f9bca: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1:e9f9bca: 		for (String bundleName : bundleNames) {
1:e9f9bca: 			URL url = AbstractTest.class.getClassLoader().getResource(bundleName);
1:e9f9bca: 			InstallInfo installInfo = new InstallInfo(url.toExternalForm(), url.openStream());
1:e9f9bca: 			scopeUpdate.getBundlesToInstall().add(installInfo);
1:e9f9bca: 		}
1:e9f9bca: 		scopeUpdate.commit();
1:e9f9bca: 	}
1:e9f9bca: 	
1:e9f9bca: 	protected void uninstallQuietly(Bundle bundle) {
1:e9f9bca: 		Utils.uninstallQuietly(bundle);
1:e9f9bca: 	}
1:e9f9bca: 	
1:5bdb2b8: 	protected Option baseOptions() {
1:5bdb2b8:         String localRepo = System.getProperty("maven.repo.local");
1:5bdb2b8:      
1:5bdb2b8:         if (localRepo == null) {
1:5bdb2b8:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:5bdb2b8:         }
1:5bdb2b8:         return composite(
1:5bdb2b8:                 junitBundles(),
1:5bdb2b8:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:5bdb2b8:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1:5bdb2b8:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:5bdb2b8:                 // this is how you set the default log level when using pax
1:5bdb2b8:                 // logging (logProfile)
1:5bdb2b8:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:5bdb2b8:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:5bdb2b8:          );
1:5bdb2b8:     }
1:5bdb2b8: 	
1:5bdb2b8: 	@ProbeBuilder
1:5bdb2b8: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:5bdb2b8: 		probe.setHeader(Constants.EXPORT_PACKAGE, this.getClass().getPackage().getName());
1:5bdb2b8: 		return probe;
1:5bdb2b8: 	}
1:5bdb2b8: 	
1:5bdb2b8: 	@Configuration
1:5bdb2b8:     public Option[] subsystemScope() {
1:5bdb2b8:         //InputStream itestBundle = TinyBundles.bundle().add();
1:5bdb2b8: 		return CoreOptions.options(
1:5bdb2b8:         		baseOptions(),
1:5bdb2b8:             mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:5bdb2b8:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:5bdb2b8:             mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:5bdb2b8:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:5bdb2b8:             mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:5bdb2b8:             mavenBundle("org.eclipse.equinox", "org.eclipse.equinox.coordinator").versionAsInProject(),
1:5bdb2b8:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.api").versionAsInProject(),
1:5bdb2b8:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.api").versionAsInProject(),
1:5bdb2b8:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl").versionAsInProject()
1:5bdb2b8:             //CoreOptions.streamBundle(itestBundle )
1:e9f9bca:         );
1:e9f9bca:     }
1:e9f9bca: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5bdb2b8
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
1: 
1: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.ProbeBuilder;
1: import org.ops4j.pax.exam.TestProbeBuilder;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: import org.ops4j.pax.tinybundles.core.TinyBundles;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerMethod.class)
1: 	@Inject
1: 	Scope scope;
/////////////////////////////////////////////////////////////////////////
1: 		return scope;
/////////////////////////////////////////////////////////////////////////
1: 	protected Option baseOptions() {
1:         String localRepo = System.getProperty("maven.repo.local");
1:      
1:         if (localRepo == null) {
1:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:         }
1:         return composite(
1:                 junitBundles(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:                 // this is how you set the default log level when using pax
1:                 // logging (logProfile)
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:          );
1:     }
1: 	
1: 	@ProbeBuilder
1: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1: 		probe.setHeader(Constants.EXPORT_PACKAGE, this.getClass().getPackage().getName());
1: 		return probe;
1: 	}
1: 	
1: 	@Configuration
1:     public Option[] subsystemScope() {
1:         //InputStream itestBundle = TinyBundles.bundle().add();
1: 		return CoreOptions.options(
1:         		baseOptions(),
1:             mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:             mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:             mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:             mavenBundle("org.eclipse.equinox", "org.eclipse.equinox.coordinator").versionAsInProject(),
1:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.api").versionAsInProject(),
1:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.api").versionAsInProject(),
1:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl").versionAsInProject()
1:             //CoreOptions.streamBundle(itestBundle )
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.util.tracker.ServiceTracker;
1: public abstract class AbstractTest extends AbstractIntegrationTest {
0: 	protected ServiceTracker scopeTracker;
/////////////////////////////////////////////////////////////////////////
1: 	protected Bundle findBundle(String symbolicName) {
1: 		return Utils.findBundle(symbolicName, bundleContext);
1: 	}
1: 	
1: 		return findBundle(symbolicName, getScope());
1: 	}
1: 	
1: 	protected Scope findChildScope(String name, Scope parent) {
1: 		assertNotNull(name);
1: 		assertNotNull(parent);
1: 		Scope result = null;
1: 		for (Scope child : parent.getChildren()) {
1: 			if (name.equals(child.getName())) {
1: 				result = child;
1: 				break;
1: 			}
1: 		}
1: 		assertNotNull(result);
1: 		return result;
/////////////////////////////////////////////////////////////////////////
1: 	protected Scope getScope() {
0: 		return (Scope)scopeTracker.getService();
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
0: 		scopeTracker = new ServiceTracker(
0: 				bundleContext, 
0: 				Scope.class.getName(), 
0: 				null);
0: 		scopeTracker.open();
0: 		scopeTracker.close();
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.eclipse.equinox", "coordinator"),
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
0: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.scope.InstallInfo;
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.apache.aries.subsystem.scope.SharePolicy;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.ops4j.pax.exam.Customizer;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
0: import org.ops4j.pax.swissbox.tinybundles.core.TinyBundles;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.framework.ServiceReference;
1: 
0: public class AbstractTest extends AbstractIntegrationTest {
0: 	protected Scope scope;
1: 	
0: 	private ServiceReference<Scope> scopeRef;
1: 	
1: 	protected void addPackageExportPolicy(String packageName, ScopeUpdate scopeUpdate) throws InvalidSyntaxException {
1: 		Filter filter = bundleContext.createFilter("(osgi.wiring.package=" + packageName + ')');
1: 		SharePolicy policy = new SharePolicy(SharePolicy.TYPE_EXPORT, "osgi.wiring.package", filter);
1: 		Map<String, List<SharePolicy>> policyMap = scopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1: 		List<SharePolicy> policies = policyMap.get("osgi.wiring.package");
1: 		if (policies == null) {
1: 			policies = new ArrayList<SharePolicy>();
1: 			policyMap.put("osgi.wiring.package", policies);
1: 		}
1: 		policies.add(policy);
1: 	}
1: 	
1: 	protected void addPackageImportPolicy(String packageName, ScopeUpdate scopeUpdate) throws InvalidSyntaxException {
1: 		Filter filter = bundleContext.createFilter("(osgi.wiring.package=" + packageName + ')');
1: 		SharePolicy policy = new SharePolicy(SharePolicy.TYPE_IMPORT, "osgi.wiring.package", filter);
1: 		Map<String, List<SharePolicy>> policyMap = scopeUpdate.getSharePolicies(SharePolicy.TYPE_IMPORT);
1: 		List<SharePolicy> policies = policyMap.get("osgi.wiring.package");
1: 		if (policies == null) {
1: 			policies = new ArrayList<SharePolicy>();
1: 			policyMap.put("osgi.wiring.package", policies);
1: 		}
1: 		policies.add(policy);
1: 	}
1: 	
1: 	protected void addServiceExportPolicy(Class<?> clazz, ScopeUpdate scopeUpdate) throws InvalidSyntaxException {
1: 		Filter filter = bundleContext.createFilter('(' + Constants.OBJECTCLASS + '=' + clazz.getName() + ')');
1: 		SharePolicy policy = new SharePolicy(SharePolicy.TYPE_EXPORT, "scope.share.service", filter);
1: 		Map<String, List<SharePolicy>> policyMap = scopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1: 		List<SharePolicy> policies = policyMap.get("scope.share.service");
1: 		if (policies == null) {
1: 			policies = new ArrayList<SharePolicy>();
1: 			policyMap.put("scope.share.service", policies);
1: 		}
1: 		policies.add(policy);
1: 	}
1: 	
1: 	protected void addServiceImportPolicy(Class<?> clazz, ScopeUpdate scopeUpdate) throws InvalidSyntaxException {
1: 		Filter filter = bundleContext.createFilter('(' + Constants.OBJECTCLASS + '=' + clazz.getName() + ')');
1: 		SharePolicy policy = new SharePolicy(SharePolicy.TYPE_IMPORT, "scope.share.service", filter);
1: 		Map<String, List<SharePolicy>> policyMap = scopeUpdate.getSharePolicies(SharePolicy.TYPE_IMPORT);
1: 		List<SharePolicy> policies = policyMap.get("scope.share.service");
1: 		if (policies == null) {
1: 			policies = new ArrayList<SharePolicy>();
1: 			policyMap.put("scope.share.service", policies);
1: 		}
1: 		policies.add(policy);
1: 	}
1: 	
1: 	protected void assertEmpty(Collection<?> c) {
1: 		assertNotNull(c);
1: 		assertTrue(c.isEmpty());
1: 	}
1: 	
1: 	protected void assertEmpty(Map<?, ?> m) {
1: 		assertNotNull(m);
1: 		assertTrue(m.isEmpty());
1: 	}
1: 	
1: 	protected void assertCollectionEquals(Collection<?> c1, Collection<?> c2) {
1: 		assertFalse((c1 == null && c2 != null) || (c1 != null && c2 == null));
1: 		assertTrue(c1.size() == c2.size());
1: 		for (Iterator<?> i = c2.iterator(); i.hasNext();) {
1: 			assertTrue(c2.contains(i.next()));
1: 		}
1: 	}
1: 	
1: 	protected Bundle findBundle(String symbolicName, Scope scope) {
1: 		return Utils.findBundle(symbolicName, scope);
1: 	}
1: 	
1: 	protected Bundle findBundleInRootScope(String symbolicName) {
0: 		return findBundle(symbolicName, scope);
1: 	}
1: 	
1: 	protected ScopeUpdate findChildUpdate(String name, ScopeUpdate parent) {
1: 		assertNotNull(name);
1: 		assertNotNull(parent);
1: 		ScopeUpdate result = null;
1: 		for (ScopeUpdate child : parent.getChildren()) {
1: 			if (name.equals(child.getName())) {
1: 				result = child;
1: 				break;
1: 			}
1: 		}
1: 		assertNotNull(result);
1: 		return result;
1: 	}
1: 	
1: 	protected String getBundleLocation(String bundle) {
1: 		URL url = AbstractTest.class.getClassLoader().getResource(bundle);
1: 		return url.toExternalForm();
1: 	}
1: 	
1: 	protected Bundle installBundle(String name) throws BundleException {
1: 		URL url = AbstractTest.class.getClassLoader().getResource(name);
1: 		return bundleContext.installBundle(url.toExternalForm());
1: 	}
1: 	
1: 	protected void installBundles(Scope scope, String[] bundleNames) throws Exception {
1: 		installBundles(scope, Arrays.asList(bundleNames));
1: 	}
1: 	
1: 	protected void installBundles(Scope scope, Collection<String> bundleNames) throws Exception {
1: 		ScopeUpdate scopeUpdate = scope.newScopeUpdate();
1: 		for (String bundleName : bundleNames) {
1: 			URL url = AbstractTest.class.getClassLoader().getResource(bundleName);
1: 			InstallInfo installInfo = new InstallInfo(url.toExternalForm(), url.openStream());
1: 			scopeUpdate.getBundlesToInstall().add(installInfo);
1: 		}
1: 		scopeUpdate.commit();
1: 	}
1: 	
0: 	@Before
0: 	public void before() throws Exception {
0: 		assertNotNull(bundleContext);
0: 		scopeRef = bundleContext.getServiceReference(Scope.class);
0: 		assertNotNull(scopeRef);
0: 		scope = bundleContext.getService(scopeRef);
0: 		assertNotNull(scope);
1: 	}
1: 
0: 	@After
0: 	public void after() throws Exception {
1: 	}
1: 	
1: 	protected void uninstallQuietly(Bundle bundle) {
1: 		Utils.uninstallQuietly(bundle);
1: 	}
1: 	
0: 	@org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:             // Log
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:             // Felix Config Admin
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             // Felix mvn url handler
0:             mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
1: 
0:             // this is how you set the default log level when using pax logging (logProfile)
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:             // Bundles
0:             mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:             mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.api"),
0:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.api"),
0:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl"),
1: 
0:             // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 
0:             PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
1: 
0:             equinox().version("3.7.0.v20110221"),
1:             
0:             new Customizer() {
0:             	@Override
0:                 public InputStream customizeTestProbe(InputStream testProbe) throws IOException {
0:                     return TinyBundles.modifyBundle(testProbe).
0:                                       removeHeader(Constants.EXPORT_PACKAGE)
0:                                       .set(Constants.EXPORT_PACKAGE, "org.apache.aries.subsystem.scope.itests")
0:                                       .build();
1:                 }
1:             }
1:         );
0:         options = updateOptions(options);
0:         return options;
1:     }
1: }
============================================================================