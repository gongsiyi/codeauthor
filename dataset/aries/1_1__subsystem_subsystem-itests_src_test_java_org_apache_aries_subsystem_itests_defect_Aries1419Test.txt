1:d93afd1: /*
1:d93afd1:  * Licensed to the Apache Software Foundation (ASF) under one
1:d93afd1:  * or more contributor license agreements.  See the NOTICE file
1:d93afd1:  * distributed with this work for additional information
1:d93afd1:  * regarding copyright ownership.  The ASF licenses this file
1:d93afd1:  * to you under the Apache License, Version 2.0 (the
1:d93afd1:  * "License"); you may not use this file except in compliance
1:d93afd1:  * with the License.  You may obtain a copy of the License at
1:d93afd1:  *
1:d93afd1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d93afd1:  *
1:d93afd1:  * Unless required by applicable law or agreed to in writing,
1:d93afd1:  * software distributed under the License is distributed on an
1:d93afd1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d93afd1:  * KIND, either express or implied.  See the License for the
1:d93afd1:  * specific language governing permissions and limitations
1:d93afd1:  * under the License.
1:d93afd1:  */
1:d93afd1: package org.apache.aries.subsystem.itests.defect;
1:d93afd1: 
1:d93afd1: import static org.junit.Assert.assertEquals;
1:d93afd1: import static org.junit.Assert.fail;
1:d93afd1: 
1:d93afd1: import java.io.IOException;
1:d93afd1: import java.util.HashMap;
1:d93afd1: import java.util.Map;
1:d93afd1: 
1:d93afd1: import org.apache.aries.subsystem.core.archive.RequireCapabilityHeader;
1:d93afd1: import org.apache.aries.subsystem.core.internal.BasicSubsystem;
1:d93afd1: import org.apache.aries.subsystem.itests.SubsystemTest;
1:d93afd1: import org.junit.Before;
1:d93afd1: import org.junit.Test;
1:d93afd1: import org.osgi.framework.Bundle;
1:d93afd1: import org.osgi.service.subsystem.Subsystem;
1:d93afd1: import org.osgi.service.subsystem.SubsystemConstants;
1:d93afd1: import org.osgi.service.subsystem.SubsystemException;
1:d93afd1: 
1:d93afd1: import aQute.bnd.osgi.Constants;
1:d93afd1: 
1:d93afd1: /*
1:d93afd1:  * https://issues.apache.org/jira/browse/ARIES-1419
1:d93afd1:  * 
1:d93afd1:  * Provide-Capability header parser does not support typed attributes.
1:d93afd1:  */
1:d93afd1: public class Aries1419Test extends SubsystemTest {
1:d93afd1:     /*
1:d93afd1:      * Subsystem-SymbolicName: application.a.esa
1:d93afd1:      * 
1:d93afd1: 	 * Included In Archive
1:d93afd1: 	 * 		bundle.a.jar
1:d93afd1:      */
1:d93afd1:     private static final String APPLICATION_A = "application.a.esa";
1:d93afd1:     /*
1:d93afd1:      * Subsystem-SymbolicName: application.b.esa
1:d93afd1:      * 
1:d93afd1: 	 * Included In Archive
1:d93afd1: 	 * 		bundle.c.jar
1:d93afd1:      */
1:d93afd1:     private static final String APPLICATION_B = "application.b.esa";
1:d93afd1: 	/*
1:d93afd1: 	 * Bundle-SymbolicName: bundle.a.jar
1:d93afd1: 	 * Require-Capability: "a;resolution:=optional;filter:=\"(b=c)\";d=e;
1:d93afd1: 	 *  f:String=g;h:Long=21474836470;i:Double=3.4028234663852886E39;
1:d93afd1: 	 *  j:Version=2.1;k:List=\"foo,bar,acme\";l:List<Version>=\"1.1,2.2,3.3\""
1:d93afd1: 	 */
1:d93afd1: 	private static final String BUNDLE_A = "bundle.a.jar";
1:d93afd1: 	/*
1:d93afd1: 	 * Bundle-SymbolicName: bundle.b.jar
1:d93afd1: 	 * Provide-Capability: "a;d=e;f:String=g;h:Long=21474836470;
1:d93afd1: 	 *  i:Double=3.4028234663852886E39;j:Version=2.1;k:List=\"foo,bar,acme\";
1:d93afd1: 	 *  l:List<Version>=\"1.1,2.2,3.3\""
1:d93afd1: 	 */
1:d93afd1: 	private static final String BUNDLE_B = "bundle.b.jar";
1:d93afd1: 	/*
1:d93afd1: 	 * Bundle-SymbolicName: bundle.c.jar
1:d93afd1: 	 * Require-Capability: "a;filter:="(d=e)"
1:d93afd1: 	 */
1:d93afd1: 	private static final String BUNDLE_C = "bundle.c.jar";
1:d93afd1: 	
1:d93afd1: 	private static boolean createdTestFiles;
1:d93afd1: 	
1:d93afd1: 	@Before
1:d93afd1: 	public void createTestFiles() throws Exception {
1:d93afd1: 		if (createdTestFiles)
1:d93afd1: 			return;
1:d93afd1: 		createBundleA();
1:d93afd1: 		createBundleB();
1:d93afd1: 		createBundleC();
1:d93afd1: 		createApplicationA();
1:d93afd1: 		createApplicationB();
1:d93afd1: 		createdTestFiles = true;
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	private void createBundleA() throws IOException {
1:d93afd1: 		createBundle(
1:d93afd1: 				name(BUNDLE_A), 
1:d93afd1: 				requireCapability("a;resolution:=optional;filter:=\"(b=c)\"" 
1:d93afd1: 						+ ";d=e;f:String=g;h:Long=21474836470;i:Double=3.4028234663852886E39"
1:d93afd1: 						+ ";j:Version=2.1;k:List=\"foo,bar,acme\";l:List<Version>=\"1.1,2.2,3.3\""));
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	private void createBundleB() throws IOException {
1:d93afd1: 		createBundle(
1:d93afd1: 				name(BUNDLE_B), 
1:d93afd1: 				provideCapability("a;b=c;d=e;f:String=g;h:Long=21474836470"
1:d93afd1: 						+ ";i:Double=3.4028234663852886E39;j:Version=2.1;"
1:d93afd1: 						+ "k:List=\"foo,bar,acme\";l:List<Version>=\"1.1,2.2,3.3\""));
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	private void createBundleC() throws IOException {
1:d93afd1: 		createBundle(
1:d93afd1: 				name(BUNDLE_C), 
1:d93afd1: 				requireCapability("a;filter:=\"(&(b=c)(d=e)(f=g)(h<=21474836470)"
1:d93afd1: 						+ "(!(i>=3.4028234663852886E40))(&(j>=2)(!(version>=3)))"
1:d93afd1: 						+ "(|(k=foo)(k=bar)(k=acme))(&(l=1.1.0)(l=2.2)))\""));
1:d93afd1: 	}
1:d93afd1: 	
1:d93afd1: 	private static void createApplicationA() throws IOException {
1:d93afd1:         createApplicationAManifest();
1:d93afd1:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:d93afd1:     }
1:d93afd1:     
1:d93afd1:     private static void createApplicationAManifest() throws IOException {
1:d93afd1:         Map<String, String> attributes = new HashMap<String, String>();
1:d93afd1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:d93afd1:         createManifest(APPLICATION_A + ".mf", attributes);
1:d93afd1:     }
1:d93afd1:     
1:d93afd1:     private static void createApplicationB() throws IOException {
1:d93afd1:         createApplicationBManifest();
1:d93afd1:         createSubsystem(APPLICATION_B, BUNDLE_C);
1:d93afd1:     }
1:d93afd1:     
1:d93afd1:     private static void createApplicationBManifest() throws IOException {
1:d93afd1:         Map<String, String> attributes = new HashMap<String, String>();
1:d93afd1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:d93afd1:         createManifest(APPLICATION_B + ".mf", attributes);
1:d93afd1:     }
1:d93afd1:     
1:d93afd1:     @Test
1:d93afd1:     public void testRequireCapability() throws Exception {
1:d93afd1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:d93afd1:     	try {
1:d93afd1:     		Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, null);
1:d93afd1:     		String expectedStr = bundleA.getHeaders().get(Constants.REQUIRE_CAPABILITY);
1:d93afd1:     		RequireCapabilityHeader expected = new RequireCapabilityHeader(expectedStr);
1:d93afd1:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:d93afd1:     		String actualStr = headers.get(Constants.REQUIRE_CAPABILITY);
1:d93afd1:     		RequireCapabilityHeader actual = new RequireCapabilityHeader(actualStr);
1:d93afd1:     		assertEquals("Wrong header", expected, actual);
1:d93afd1:     	}
1:d93afd1:     	finally {
1:d93afd1:     		uninstallSubsystemSilently(applicationA);
1:d93afd1:     	}
1:d93afd1:     }
1:d93afd1:     
1:d93afd1:     @Test
1:d93afd1:     public void testProvideCapability() throws Exception {
1:d93afd1:     	Bundle bundleB = installBundleFromFile(BUNDLE_B);
1:d93afd1:     	try {
1:d93afd1:     		Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:d93afd1:     		uninstallSubsystemSilently(applicationB);
1:d93afd1:     	}
1:d93afd1:     	catch (SubsystemException e) {
1:d93afd1:     		e.printStackTrace();
1:d93afd1:     		fail("Subsystem should have installed");
1:d93afd1:     	}
1:d93afd1:     	finally {
1:d93afd1:     		uninstallSilently(bundleB);
1:d93afd1:     	}
1:d93afd1:     }
1:d93afd1: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.archive.RequireCapabilityHeader;
1: import org.apache.aries.subsystem.core.internal.BasicSubsystem;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: import aQute.bnd.osgi.Constants;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1419
1:  * 
1:  * Provide-Capability header parser does not support typed attributes.
1:  */
1: public class Aries1419Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * 
1: 	 * Included In Archive
1: 	 * 		bundle.a.jar
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1:     /*
1:      * Subsystem-SymbolicName: application.b.esa
1:      * 
1: 	 * Included In Archive
1: 	 * 		bundle.c.jar
1:      */
1:     private static final String APPLICATION_B = "application.b.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Require-Capability: "a;resolution:=optional;filter:=\"(b=c)\";d=e;
1: 	 *  f:String=g;h:Long=21474836470;i:Double=3.4028234663852886E39;
1: 	 *  j:Version=2.1;k:List=\"foo,bar,acme\";l:List<Version>=\"1.1,2.2,3.3\""
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Provide-Capability: "a;d=e;f:String=g;h:Long=21474836470;
1: 	 *  i:Double=3.4028234663852886E39;j:Version=2.1;k:List=\"foo,bar,acme\";
1: 	 *  l:List<Version>=\"1.1,2.2,3.3\""
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.c.jar
1: 	 * Require-Capability: "a;filter:="(d=e)"
1: 	 */
1: 	private static final String BUNDLE_C = "bundle.c.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createBundleC();
1: 		createApplicationA();
1: 		createApplicationB();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(
1: 				name(BUNDLE_A), 
1: 				requireCapability("a;resolution:=optional;filter:=\"(b=c)\"" 
1: 						+ ";d=e;f:String=g;h:Long=21474836470;i:Double=3.4028234663852886E39"
1: 						+ ";j:Version=2.1;k:List=\"foo,bar,acme\";l:List<Version>=\"1.1,2.2,3.3\""));
1: 	}
1: 	
1: 	private void createBundleB() throws IOException {
1: 		createBundle(
1: 				name(BUNDLE_B), 
1: 				provideCapability("a;b=c;d=e;f:String=g;h:Long=21474836470"
1: 						+ ";i:Double=3.4028234663852886E39;j:Version=2.1;"
1: 						+ "k:List=\"foo,bar,acme\";l:List<Version>=\"1.1,2.2,3.3\""));
1: 	}
1: 	
1: 	private void createBundleC() throws IOException {
1: 		createBundle(
1: 				name(BUNDLE_C), 
1: 				requireCapability("a;filter:=\"(&(b=c)(d=e)(f=g)(h<=21474836470)"
1: 						+ "(!(i>=3.4028234663852886E40))(&(j>=2)(!(version>=3)))"
1: 						+ "(|(k=foo)(k=bar)(k=acme))(&(l=1.1.0)(l=2.2)))\""));
1: 	}
1: 	
1: 	private static void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:     }
1:     
1:     private static void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1:     
1:     private static void createApplicationB() throws IOException {
1:         createApplicationBManifest();
1:         createSubsystem(APPLICATION_B, BUNDLE_C);
1:     }
1:     
1:     private static void createApplicationBManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:         createManifest(APPLICATION_B + ".mf", attributes);
1:     }
1:     
1:     @Test
1:     public void testRequireCapability() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, null);
1:     		String expectedStr = bundleA.getHeaders().get(Constants.REQUIRE_CAPABILITY);
1:     		RequireCapabilityHeader expected = new RequireCapabilityHeader(expectedStr);
1:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:     		String actualStr = headers.get(Constants.REQUIRE_CAPABILITY);
1:     		RequireCapabilityHeader actual = new RequireCapabilityHeader(actualStr);
1:     		assertEquals("Wrong header", expected, actual);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testProvideCapability() throws Exception {
1:     	Bundle bundleB = installBundleFromFile(BUNDLE_B);
1:     	try {
1:     		Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:     		uninstallSubsystemSilently(applicationB);
1:     	}
1:     	catch (SubsystemException e) {
1:     		e.printStackTrace();
1:     		fail("Subsystem should have installed");
1:     	}
1:     	finally {
1:     		uninstallSilently(bundleB);
1:     	}
1:     }
1: }
============================================================================