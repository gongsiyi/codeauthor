1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:56a6860: package org.apache.aries.samples.ariestrader.web.prims;
1:628add4: 
1:628add4: import java.io.*;
1:628add4: import javax.servlet.*;
1:628add4: import javax.servlet.http.*;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1:56a6860: import org.apache.aries.samples.ariestrader.api.TradeServices;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.*;
1:56a6860: import org.apache.aries.samples.ariestrader.util.*;
1:628add4: 
1:628add4: /**
1:628add4:  * 
1:628add4:  * PingJDBCReadPrepStmt uses a prepared statement for database read access. 
1:56a6860:  * This primative uses {@link org.apache.aries.samples.ariestrader.direct.TradeJEEDirect} to set the price of a random stock
1:56a6860:  * (generated by {@link org.apache.aries.samples.ariestrader.Trade_Config}) through the use of prepared statements. 
1:628add4:  * 
1:628add4:  */
1:628add4: 
1:628add4: public class PingJDBCRead extends HttpServlet
1:628add4: {
1:628add4: 
1:628add4: 	private static String initTime;
1:628add4: 	private static int hitCount;
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * forwards post requests to the doGet method
1:628add4: 	 * Creation date: (11/6/2000 10:52:39 AM)
1:628add4: 	 * @param res javax.servlet.http.HttpServletRequest
1:628add4: 	 * @param res2 javax.servlet.http.HttpServletResponse
1:628add4: 	 */
1:628add4: 	public void doPost(HttpServletRequest req, HttpServletResponse res)
1:628add4: 		throws ServletException, IOException
1:628add4: 	{
1:628add4: 		doGet(req, res);
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	* this is the main method of the servlet that will service all get requests.
1:628add4: 	* @param request HttpServletRequest
1:628add4: 	* @param responce HttpServletResponce
1:628add4: 	**/
1:628add4: 	public void doGet(HttpServletRequest req, HttpServletResponse res)
1:628add4: 		throws ServletException, IOException
1:628add4: 	{
1:628add4: 		res.setContentType("text/html");
1:628add4: 		java.io.PrintWriter out = res.getWriter();
1:628add4: 		String symbol=null;
1:628add4: 		StringBuffer output = new StringBuffer(100);
1:628add4: 
1:628add4: 		try
1:628add4: 			{
1:af24676: 			//TradeJdbc (via TradeServices) uses prepared statements so I am going to make use of it's code.
1:8ef753d:                         TradeServices tradeServices = TradeServiceUtilities.getTradeServices("(mode=JDBC)");
1:628add4: 			symbol = TradeConfig.rndSymbol();
1:628add4: 			
1:628add4: 			QuoteDataBean quoteData = null;
1:628add4: 			int iter = TradeConfig.getPrimIterations();
1:628add4: 			for (int ii = 0; ii < iter; ii++) {
1:628add4: 				quoteData = tradeServices.getQuote(symbol);
1:628add4: 			}
1:628add4: 
1:628add4: 			output.append(
1:628add4: 				"<html><head><title>Ping JDBC Read w/ Prepared Stmt.</title></head>"
1:628add4: 					+ "<body><HR><FONT size=\"+2\" color=\"#000066\">Ping JDBC Read w/ Prep Stmt:</FONT><HR><FONT size=\"-1\" color=\"#000066\">Init time : "
1:628add4: 					+ initTime);
1:628add4:                         hitCount++;
1:628add4: 			output.append("<BR>Hit Count: " + hitCount);
1:628add4: 			output.append(
1:628add4: 				"<HR>Quote Information <BR><BR>: "
1:628add4: 					+ quoteData.toHTML());
1:628add4: 			output.append("<HR></body></html>");
1:628add4: 			out.println(output.toString());
1:628add4: 		}
1:628add4: 		catch (Exception e)
1:628add4: 		{
1:628add4: 			Log.error(
1:628add4: 				e,
1:628add4: 				"PingJDBCRead w/ Prep Stmt -- error getting quote for symbol",
1:628add4: 				symbol);
1:628add4: 			res.sendError(500, "PingJDBCRead Exception caught: " + e.toString());
1:628add4: 		}
1:628add4: 
1:628add4: 	}
1:628add4: 	/** 
1:628add4: 	 * returns a string of information about the servlet
1:628add4: 	 * @return info String: contains info about the servlet
1:628add4: 	 **/
1:628add4: 	public String getServletInfo()
1:628add4: 	{
1:af24676: 		return "Basic JDBC Read using a prepared statment, makes use of TradeJdbc class via TradeServices";
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	* called when the class is loaded to initialize the servlet
1:628add4: 	* @param config ServletConfig:
1:628add4: 	**/
1:628add4: 	public void init(ServletConfig config) throws ServletException
1:628add4: 	{
1:628add4: 		super.init(config);
1:628add4: 		hitCount = 0;
1:628add4: 		initTime = new java.util.Date().toString();
1:628add4: 	}
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:8ef753d
/////////////////////////////////////////////////////////////////////////
1:                         TradeServices tradeServices = TradeServiceUtilities.getTradeServices("(mode=JDBC)");
commit:39f53f6
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.*;
commit:989ba4e
commit:af24676
/////////////////////////////////////////////////////////////////////////
1: 			//TradeJdbc (via TradeServices) uses prepared statements so I am going to make use of it's code.
/////////////////////////////////////////////////////////////////////////
1: 		return "Basic JDBC Read using a prepared statment, makes use of TradeJdbc class via TradeServices";
commit:56a6860
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.web.prims;
1: import org.apache.aries.samples.ariestrader.api.TradeServiceUtilities;
1: import org.apache.aries.samples.ariestrader.api.TradeServices;
0: import org.apache.aries.samples.ariestrader.persistence.api.*;
1: import org.apache.aries.samples.ariestrader.util.*;
1:  * This primative uses {@link org.apache.aries.samples.ariestrader.direct.TradeJEEDirect} to set the price of a random stock
1:  * (generated by {@link org.apache.aries.samples.ariestrader.Trade_Config}) through the use of prepared statements. 
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.web.prims;
0: import org.apache.aries.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.aries.samples.daytrader.api.TradeServices;
0: import org.apache.aries.samples.daytrader.persistence.api.*;
0: import org.apache.aries.samples.daytrader.util.*;
0:  * This primative uses {@link org.apache.aries.samples.daytrader.direct.TradeJEEDirect} to set the price of a random stock
0:  * (generated by {@link org.apache.aries.samples.daytrader.Trade_Config}) through the use of prepared statements. 
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.web.prims;
1: 
1: import java.io.*;
1: import javax.servlet.*;
1: import javax.servlet.http.*;
1: 
0: import org.apache.geronimo.samples.daytrader.api.TradeServiceUtilities;
0: import org.apache.geronimo.samples.daytrader.api.TradeServices;
0: import org.apache.geronimo.samples.daytrader.persistence.api.*;
0: import org.apache.geronimo.samples.daytrader.util.*;
1: 
1: /**
1:  * 
1:  * PingJDBCReadPrepStmt uses a prepared statement for database read access. 
0:  * This primative uses {@link org.apache.geronimo.samples.daytrader.direct.TradeJEEDirect} to set the price of a random stock
0:  * (generated by {@link org.apache.geronimo.samples.daytrader.Trade_Config}) through the use of prepared statements. 
1:  * 
1:  */
1: 
1: public class PingJDBCRead extends HttpServlet
1: {
1: 
1: 	private static String initTime;
1: 	private static int hitCount;
1: 
1: 	/**
1: 	 * forwards post requests to the doGet method
1: 	 * Creation date: (11/6/2000 10:52:39 AM)
1: 	 * @param res javax.servlet.http.HttpServletRequest
1: 	 * @param res2 javax.servlet.http.HttpServletResponse
1: 	 */
1: 	public void doPost(HttpServletRequest req, HttpServletResponse res)
1: 		throws ServletException, IOException
1: 	{
1: 		doGet(req, res);
1: 	}
1: 	/**
1: 	* this is the main method of the servlet that will service all get requests.
1: 	* @param request HttpServletRequest
1: 	* @param responce HttpServletResponce
1: 	**/
1: 	public void doGet(HttpServletRequest req, HttpServletResponse res)
1: 		throws ServletException, IOException
1: 	{
1: 		res.setContentType("text/html");
1: 		java.io.PrintWriter out = res.getWriter();
1: 		String symbol=null;
1: 		StringBuffer output = new StringBuffer(100);
1: 
1: 		try
1: 			{
0: 			//TradeJDBCDirect (via TradeServices) uses prepared statements so I am going to make use of it's code.
0:                         TradeServices tradeServices = TradeServiceUtilities.getTradeServices("(mode=jdbc)");
1: 			symbol = TradeConfig.rndSymbol();
1: 			
1: 			QuoteDataBean quoteData = null;
1: 			int iter = TradeConfig.getPrimIterations();
1: 			for (int ii = 0; ii < iter; ii++) {
1: 				quoteData = tradeServices.getQuote(symbol);
1: 			}
1: 
1: 			output.append(
1: 				"<html><head><title>Ping JDBC Read w/ Prepared Stmt.</title></head>"
1: 					+ "<body><HR><FONT size=\"+2\" color=\"#000066\">Ping JDBC Read w/ Prep Stmt:</FONT><HR><FONT size=\"-1\" color=\"#000066\">Init time : "
1: 					+ initTime);
1:                         hitCount++;
1: 			output.append("<BR>Hit Count: " + hitCount);
1: 			output.append(
1: 				"<HR>Quote Information <BR><BR>: "
1: 					+ quoteData.toHTML());
1: 			output.append("<HR></body></html>");
1: 			out.println(output.toString());
1: 		}
1: 		catch (Exception e)
1: 		{
1: 			Log.error(
1: 				e,
1: 				"PingJDBCRead w/ Prep Stmt -- error getting quote for symbol",
1: 				symbol);
1: 			res.sendError(500, "PingJDBCRead Exception caught: " + e.toString());
1: 		}
1: 
1: 	}
1: 	/** 
1: 	 * returns a string of information about the servlet
1: 	 * @return info String: contains info about the servlet
1: 	 **/
1: 	public String getServletInfo()
1: 	{
0: 		return "Basic JDBC Read using a prepared statment, makes use of TradeJDBCDirect class via TradeServices";
1: 	}
1: 	/**
1: 	* called when the class is loaded to initialize the servlet
1: 	* @param config ServletConfig:
1: 	**/
1: 	public void init(ServletConfig config) throws ServletException
1: 	{
1: 		super.init(config);
1: 		hitCount = 0;
1: 		initTime = new java.util.Date().toString();
1: 	}
1: }
============================================================================