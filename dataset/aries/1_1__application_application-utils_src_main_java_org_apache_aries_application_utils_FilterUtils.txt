1:9c133a0: /*
1:6cff8dd:  * Licensed to the Apache Software Foundation (ASF) under one
1:6cff8dd:  * or more contributor license agreements.  See the NOTICE file
1:6cff8dd:  * distributed with this work for additional information
1:6cff8dd:  * regarding copyright ownership.  The ASF licenses this file
1:6cff8dd:  * to you under the Apache License, Version 2.0 (the
1:6cff8dd:  * "License"); you may not use this file except in compliance
1:6cff8dd:  * with the License.  You may obtain a copy of the License at
3:9c133a0:  *
1:6cff8dd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9c133a0:  *
1:6cff8dd:  * Unless required by applicable law or agreed to in writing,
1:6cff8dd:  * software distributed under the License is distributed on an
1:6cff8dd:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:6cff8dd:  * KIND, either express or implied.  See the License for the
1:6cff8dd:  * specific language governing permissions and limitations
1:6cff8dd:  * under the License.
1:9c133a0:  */
1:9c133a0: package org.apache.aries.application.utils;
1:9c133a0: 
1:9c133a0: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:9c133a0: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:9c133a0: 
1:9c133a0: import java.util.regex.Pattern;
1:9c133a0: 
1:9c133a0: import org.slf4j.Logger;
1:9c133a0: import org.slf4j.LoggerFactory;
1:9c133a0: public class FilterUtils
1:9c133a0: {
1:9c133a0:   private static final Pattern regexp = Pattern.compile("\\(mandatory:.*?\\)");
1:9c133a0: 
1:9c133a0:   private static final  Logger logger = LoggerFactory.getLogger(FilterUtils.class);
1:9c133a0:   /**
1:9c133a0:    * Filters we generate may contain stanzas like (mandatory:<*symbolicname)
1:9c133a0:    * These are for OBR, and are not OSGi friendly!!! This method removes them.
1:9c133a0:    * 
1:9c133a0:    * @param filter
1:9c133a0:    * @return A filter with the mandatory stanzas removed or null if a null filter is supplied
1:9c133a0:    */
1:9c133a0:   public static String removeMandatoryFilterToken(String filter) {
1:9c133a0:     logger.debug(LOG_ENTRY, "areMandatoryAttributesPresent", new Object[]{filter});
1:9c133a0:     if(filter != null) {
1:9c133a0:       filter = regexp.matcher(filter).replaceAll("");
1:9c133a0:     
1:9c133a0:       int openBraces = 0;
1:9c133a0:       for (int i=0; openBraces < 3; i++) {
1:9c133a0:         i = filter.indexOf('(', i);
1:9c133a0:         if (i == -1) { 
1:9c133a0:           break;
1:9c133a0:         } else { 
1:9c133a0:           openBraces++;
1:9c133a0:         }
1:9c133a0:       }
1:9c133a0:       // Need to prune (& or (| off front and ) off end
1:9c133a0:       if (openBraces < 3 && 
1:9c133a0:           (filter.startsWith("(&") || filter.startsWith("(|"))) { 
1:9c133a0:         filter = filter.substring(2, filter.length() - 1);
1:9c133a0:       }
1:9c133a0:     }
1:9c133a0:     logger.debug(LOG_EXIT, "removeMandatoryFilterToken", filter);
1:9c133a0:     return filter;
1:9c133a0:   }
1:9c133a0: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:6cff8dd
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
commit:9c133a0
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * @start_prolog@
0:  * ============================================================================
0:  * IBM Confidential OCO Source Materials
1:  *
0:  * 5724-J08, 5724-I63, 5724-H88, 5724-H89, 5655-N02, 5733-W70 Copyright IBM Corp. 2010
1:  *
0:  * The source code for this program is not published or otherwise divested
0:  * of its trade secrets, irrespective of what has been deposited with the
0:  * U.S. Copyright Office.
0:  * ============================================================================
0:  * @end_prolog@
1:  * 
0:  * Change activity:
1:  * 
0:  * Issue       Date        Name        Description
0:  * ----------- ----------- --------    ------------------------------------
1:  */
1: package org.apache.aries.application.utils;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.regex.Pattern;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public class FilterUtils
1: {
1:   private static final Pattern regexp = Pattern.compile("\\(mandatory:.*?\\)");
1: 
1:   private static final  Logger logger = LoggerFactory.getLogger(FilterUtils.class);
1:   /**
1:    * Filters we generate may contain stanzas like (mandatory:<*symbolicname)
1:    * These are for OBR, and are not OSGi friendly!!! This method removes them.
1:    * 
1:    * @param filter
1:    * @return A filter with the mandatory stanzas removed or null if a null filter is supplied
1:    */
1:   public static String removeMandatoryFilterToken(String filter) {
1:     logger.debug(LOG_ENTRY, "areMandatoryAttributesPresent", new Object[]{filter});
1:     if(filter != null) {
1:       filter = regexp.matcher(filter).replaceAll("");
1:     
1:       int openBraces = 0;
1:       for (int i=0; openBraces < 3; i++) {
1:         i = filter.indexOf('(', i);
1:         if (i == -1) { 
1:           break;
1:         } else { 
1:           openBraces++;
1:         }
1:       }
1:       // Need to prune (& or (| off front and ) off end
1:       if (openBraces < 3 && 
1:           (filter.startsWith("(&") || filter.startsWith("(|"))) { 
1:         filter = filter.substring(2, filter.length() - 1);
1:       }
1:     }
1:     logger.debug(LOG_EXIT, "removeMandatoryFilterToken", filter);
1:     return filter;
1:   }
1: }
============================================================================