1:1129914: /*
1:8ad6b99:  * Licensed to the Apache Software Foundation (ASF) under one
1:8ad6b99:  * or more contributor license agreements.  See the NOTICE file
1:8ad6b99:  * distributed with this work for additional information
1:8ad6b99:  * regarding copyright ownership.  The ASF licenses this file
1:8ad6b99:  * to you under the Apache License, Version 2.0 (the
1:8ad6b99:  * "License"); you may not use this file except in compliance
1:8ad6b99:  * with the License.  You may obtain a copy of the License at
1:1129914:  *
1:8ad6b99:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:8ad6b99:  * Unless required by applicable law or agreed to in writing,
1:8ad6b99:  * software distributed under the License is distributed on an
1:8ad6b99:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8ad6b99:  * KIND, either express or implied.  See the License for the
1:8ad6b99:  * specific language governing permissions and limitations
1:8ad6b99:  * under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
2:1129914: 
1:1129914: public class HeaderFactory {
1:1129914: //	public static final String APPLICATIONCONTENT_HEADER = ApplicationContentHeader.NAME;
1:1129914: //	public static final String APPLICATIONSYMBOLICNAME_HEADER = ApplicationSymbolicNameHeader.NAME;
1:1129914: //	public static final String APPLICATIONVERSION_HEADER = ApplicationVersionHeader.NAME;
1:1129914: //	public static final String FEATURECONTENT_HEADER = FeatureContentHeader.NAME;
1:1129914: //	public static final String FEATURESYMBOLICNAME_HEADER = FeatureSymbolicNameHeader.NAME;
1:1129914: //	public static final String FEATUREVERSION_HEADER = FeatureVersionHeader.NAME;
1:1129914: //	
1:1129914: //	private static final String REGEX = '(' + Grammar.NAME + "):\\ (" + Grammar.CLAUSE + ")(?:,(" + Grammar.CLAUSE + "))*";
1:1129914: //	private static final Pattern PATTERN = Pattern.compile(REGEX);
1:1129914: 	
1:1129914: //	public static Header createHeader(String header) {
1:1129914: //		Matcher matcher = PATTERN.matcher(header);
1:1129914: //		if (!matcher.matches())
1:1129914: //			throw new IllegalArgumentException("Invalid header: " + header);
1:1129914: //		String name = matcher.group(1);
1:1129914: //		Collection<Clause> clauses = new HashSet<Clause>(matcher.groupCount());
1:1129914: //		for (int i = 2; i <= matcher.groupCount(); i++) {
1:1129914: //			String group = matcher.group(i);
1:1129914: //			if (group == null) continue;
1:1129914: //			AbstractClause clause = new AbstractClause(group);
1:1129914: //			clauses.add(clause);
1:1129914: //		}
1:1129914: //		if (FEATURESYMBOLICNAME_HEADER.equals(name))
1:1129914: //			return new FeatureSymbolicNameHeader(clauses);
1:1129914: //		if (FEATUREVERSION_HEADER.equals(name))
1:1129914: //			return new FeatureVersionHeader(clauses);
1:1129914: //		if (FEATURECONTENT_HEADER.equals(name))
1:1129914: //			return new FeatureContentHeader(clauses);
1:1129914: //		if (APPLICATIONSYMBOLICNAME_HEADER.equals(name))
1:1129914: //			return new ApplicationSymbolicNameHeader(clauses);
1:1129914: //		if (APPLICATIONVERSION_HEADER.equals(name))
1:1129914: //			return new ApplicationVersionHeader(clauses);
1:1129914: //		if (APPLICATIONCONTENT_HEADER.equals(name))
1:1129914: //			return new ApplicationContentHeader(clauses);
1:1129914: //		return new GenericHeader(name, clauses);
1:1129914: //	}
1:1129914: 	
1:1129914: //	private static final String REGEX = '(' + Grammar.CLAUSE + ")(?:,(" + Grammar.CLAUSE + "))*";
1:1129914: //	private static final Pattern PATTERN = Pattern.compile(REGEX);
1:1129914: 	
1:124d6a3: 	public static Header<?> createHeader(String name, String value) {
1:1129914: //		Matcher matcher = PATTERN.matcher(value);
1:1129914: //		if (!matcher.matches())
1:1129914: //			throw new IllegalArgumentException("Invalid header: " + name + ": " + value);
1:1129914: //		Collection<Clause> clauses = new HashSet<Clause>(matcher.groupCount());
1:1129914: //		for (int i = 2; i <= matcher.groupCount(); i++) {
1:1129914: //			String group = matcher.group(i);
1:1129914: //			if (group == null) continue;
1:1129914: //			AbstractClause clause = new AbstractClause(group);
1:1129914: //			clauses.add(clause);
1:1129914: //		}
1:1129914: //		if (name.equals(SubsystemConstants.FEATURE_SYMBOLICNAME))
1:1129914: //			return new FeatureSymbolicNameHeader(value);
1:1129914: //		if (name.equals(SubsystemConstants.FEATURE_VERSION))
1:1129914: //			return new FeatureVersionHeader(value);
1:1129914: //		if (name.equals(SubsystemConstants.FEATURE_CONTENT))
1:1129914: //			return new FeatureContentHeader(value);
1:1129914: //		if (name.equals(SubsystemConstants.APPLICATION_SYMBOLICNAME))
1:1129914: //			return new ApplicationSymbolicNameHeader(value);
1:1129914: //		if (name.equals(SubsystemConstants.APPLICATION_VERSION))
1:1129914: //			return new ApplicationVersionHeader(value);
1:1129914: //		if (name.equals(SubsystemConstants.APPLICATION_CONTENT))
1:1129914: //			return new ApplicationContentHeader(value);
1:1129914: 		if (name.equals(SubsystemSymbolicNameHeader.NAME))
1:1129914: 			return new SubsystemSymbolicNameHeader(value);
1:1129914: 		if (name.equals(SubsystemVersionHeader.NAME))
1:1129914: 			return new SubsystemVersionHeader(value);
1:1129914: 		if (name.equals(SubsystemContentHeader.NAME))
1:1129914: 			return new SubsystemContentHeader(value);
1:1129914: 		if (name.equals(SubsystemTypeHeader.NAME))
1:1129914: 			return new SubsystemTypeHeader(value);
1:4717af0: 		if (ExportPackageHeader.NAME.equals(name))
1:4717af0: 			return new ExportPackageHeader(value);
1:4717af0: 		if (ImportPackageHeader.NAME.equals(name))
1:4717af0: 			return new ImportPackageHeader(value);
1:1c9c28b: 		if (DeployedContentHeader.NAME.equals(name))
1:1c9c28b: 			return new DeployedContentHeader(value);
1:1c9c28b: 		if (ProvisionResourceHeader.NAME.equals(name))
1:1c9c28b: 			return new ProvisionResourceHeader(value);
1:bd2f017: 		if (SubsystemManifestVersionHeader.NAME.equals(name))
1:bd2f017: 			return new SubsystemManifestVersionHeader(value);
1:c1afebc: 		if (RequireCapabilityHeader.NAME.equals(name))
1:c1afebc: 			return new RequireCapabilityHeader(value);
1:124d6a3: 		if (SubsystemImportServiceHeader.NAME.equals(name))
1:124d6a3: 			return new SubsystemImportServiceHeader(value);
1:47d9366: 		if (RequireBundleHeader.NAME.equals(name))
1:47d9366: 			return new RequireBundleHeader(value);
1:26123d8: 		if (ProvideCapabilityHeader.NAME.equals(name))
1:26123d8: 			return new ProvideCapabilityHeader(value);
1:097d28b: 		if (SubsystemExportServiceHeader.NAME.equals(name))
1:097d28b: 			return new SubsystemExportServiceHeader(value);
1:12260c5: 		if (BundleSymbolicNameHeader.NAME.equals(name))
1:12260c5: 			return new BundleSymbolicNameHeader(value);
1:12260c5: 		if (BundleVersionHeader.NAME.equals(name))
1:12260c5: 			return new BundleVersionHeader(value);
1:f1b1384: 		if (PreferredProviderHeader.NAME.equals(name))
1:f1b1384: 			return new PreferredProviderHeader(value);
1:307d743: 		if (AriesSubsystemParentsHeader.NAME.equals(name))
1:307d743: 			return new AriesSubsystemParentsHeader(value);
1:f46e7d5: 		if (BundleRequiredExecutionEnvironmentHeader.NAME.equals(name))
1:f46e7d5: 			return new BundleRequiredExecutionEnvironmentHeader(value);
1:d6eb080: 		if (SubsystemLocalizationHeader.NAME.equals(name))
1:d6eb080: 			return new SubsystemLocalizationHeader(value);
1:8ad6b99: 		if (FragmentHostHeader.NAME.equals(name))
1:8ad6b99: 		    return new FragmentHostHeader(value);
1:69fd7d4: 		if (AriesSubsystemLocationHeader.NAME.equals(value))
1:69fd7d4: 			return new AriesSubsystemLocationHeader(value);
1:1129914: 		return new GenericHeader(name, value);
1:1129914: 			
1:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:69fd7d4
/////////////////////////////////////////////////////////////////////////
1: 		if (AriesSubsystemLocationHeader.NAME.equals(value))
1: 			return new AriesSubsystemLocationHeader(value);
commit:8ad6b99
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
/////////////////////////////////////////////////////////////////////////
1: 		if (FragmentHostHeader.NAME.equals(name))
1: 		    return new FragmentHostHeader(value);
commit:f46e7d5
/////////////////////////////////////////////////////////////////////////
1: 		if (BundleRequiredExecutionEnvironmentHeader.NAME.equals(name))
1: 			return new BundleRequiredExecutionEnvironmentHeader(value);
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: 		if (AriesSubsystemParentsHeader.NAME.equals(name))
1: 			return new AriesSubsystemParentsHeader(value);
commit:f1b1384
/////////////////////////////////////////////////////////////////////////
1: 		if (PreferredProviderHeader.NAME.equals(name))
1: 			return new PreferredProviderHeader(value);
commit:12260c5
/////////////////////////////////////////////////////////////////////////
1: 		if (BundleSymbolicNameHeader.NAME.equals(name))
1: 			return new BundleSymbolicNameHeader(value);
1: 		if (BundleVersionHeader.NAME.equals(name))
1: 			return new BundleVersionHeader(value);
commit:097d28b
/////////////////////////////////////////////////////////////////////////
1: 		if (SubsystemExportServiceHeader.NAME.equals(name))
1: 			return new SubsystemExportServiceHeader(value);
commit:26123d8
/////////////////////////////////////////////////////////////////////////
1: 		if (ProvideCapabilityHeader.NAME.equals(name))
1: 			return new ProvideCapabilityHeader(value);
commit:47d9366
/////////////////////////////////////////////////////////////////////////
1: 		if (RequireBundleHeader.NAME.equals(name))
1: 			return new RequireBundleHeader(value);
commit:124d6a3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public static Header<?> createHeader(String name, String value) {
/////////////////////////////////////////////////////////////////////////
1: 		if (SubsystemImportServiceHeader.NAME.equals(name))
1: 			return new SubsystemImportServiceHeader(value);
commit:c1afebc
/////////////////////////////////////////////////////////////////////////
1: 		if (RequireCapabilityHeader.NAME.equals(name))
1: 			return new RequireCapabilityHeader(value);
commit:bd2f017
/////////////////////////////////////////////////////////////////////////
1: 		if (SubsystemManifestVersionHeader.NAME.equals(name))
1: 			return new SubsystemManifestVersionHeader(value);
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
1: 		if (DeployedContentHeader.NAME.equals(name))
1: 			return new DeployedContentHeader(value);
1: 		if (ProvisionResourceHeader.NAME.equals(name))
1: 			return new ProvisionResourceHeader(value);
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
commit:4717af0
/////////////////////////////////////////////////////////////////////////
1: 		if (ExportPackageHeader.NAME.equals(name))
1: 			return new ExportPackageHeader(value);
1: 		if (ImportPackageHeader.NAME.equals(name))
1: 			return new ImportPackageHeader(value);
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
0: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: public class HeaderFactory {
1: //	public static final String APPLICATIONCONTENT_HEADER = ApplicationContentHeader.NAME;
1: //	public static final String APPLICATIONSYMBOLICNAME_HEADER = ApplicationSymbolicNameHeader.NAME;
1: //	public static final String APPLICATIONVERSION_HEADER = ApplicationVersionHeader.NAME;
1: //	public static final String FEATURECONTENT_HEADER = FeatureContentHeader.NAME;
1: //	public static final String FEATURESYMBOLICNAME_HEADER = FeatureSymbolicNameHeader.NAME;
1: //	public static final String FEATUREVERSION_HEADER = FeatureVersionHeader.NAME;
1: //	
1: //	private static final String REGEX = '(' + Grammar.NAME + "):\\ (" + Grammar.CLAUSE + ")(?:,(" + Grammar.CLAUSE + "))*";
1: //	private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 	
1: //	public static Header createHeader(String header) {
1: //		Matcher matcher = PATTERN.matcher(header);
1: //		if (!matcher.matches())
1: //			throw new IllegalArgumentException("Invalid header: " + header);
1: //		String name = matcher.group(1);
1: //		Collection<Clause> clauses = new HashSet<Clause>(matcher.groupCount());
1: //		for (int i = 2; i <= matcher.groupCount(); i++) {
1: //			String group = matcher.group(i);
1: //			if (group == null) continue;
1: //			AbstractClause clause = new AbstractClause(group);
1: //			clauses.add(clause);
1: //		}
1: //		if (FEATURESYMBOLICNAME_HEADER.equals(name))
1: //			return new FeatureSymbolicNameHeader(clauses);
1: //		if (FEATUREVERSION_HEADER.equals(name))
1: //			return new FeatureVersionHeader(clauses);
1: //		if (FEATURECONTENT_HEADER.equals(name))
1: //			return new FeatureContentHeader(clauses);
1: //		if (APPLICATIONSYMBOLICNAME_HEADER.equals(name))
1: //			return new ApplicationSymbolicNameHeader(clauses);
1: //		if (APPLICATIONVERSION_HEADER.equals(name))
1: //			return new ApplicationVersionHeader(clauses);
1: //		if (APPLICATIONCONTENT_HEADER.equals(name))
1: //			return new ApplicationContentHeader(clauses);
1: //		return new GenericHeader(name, clauses);
1: //	}
1: 	
1: //	private static final String REGEX = '(' + Grammar.CLAUSE + ")(?:,(" + Grammar.CLAUSE + "))*";
1: //	private static final Pattern PATTERN = Pattern.compile(REGEX);
1: 	
0: 	public static Header createHeader(String name, String value) {
1: //		Matcher matcher = PATTERN.matcher(value);
1: //		if (!matcher.matches())
1: //			throw new IllegalArgumentException("Invalid header: " + name + ": " + value);
1: //		Collection<Clause> clauses = new HashSet<Clause>(matcher.groupCount());
1: //		for (int i = 2; i <= matcher.groupCount(); i++) {
1: //			String group = matcher.group(i);
1: //			if (group == null) continue;
1: //			AbstractClause clause = new AbstractClause(group);
1: //			clauses.add(clause);
1: //		}
1: //		if (name.equals(SubsystemConstants.FEATURE_SYMBOLICNAME))
1: //			return new FeatureSymbolicNameHeader(value);
1: //		if (name.equals(SubsystemConstants.FEATURE_VERSION))
1: //			return new FeatureVersionHeader(value);
1: //		if (name.equals(SubsystemConstants.FEATURE_CONTENT))
1: //			return new FeatureContentHeader(value);
1: //		if (name.equals(SubsystemConstants.APPLICATION_SYMBOLICNAME))
1: //			return new ApplicationSymbolicNameHeader(value);
1: //		if (name.equals(SubsystemConstants.APPLICATION_VERSION))
1: //			return new ApplicationVersionHeader(value);
1: //		if (name.equals(SubsystemConstants.APPLICATION_CONTENT))
1: //			return new ApplicationContentHeader(value);
1: 		if (name.equals(SubsystemSymbolicNameHeader.NAME))
1: 			return new SubsystemSymbolicNameHeader(value);
1: 		if (name.equals(SubsystemVersionHeader.NAME))
1: 			return new SubsystemVersionHeader(value);
1: 		if (name.equals(SubsystemContentHeader.NAME))
1: 			return new SubsystemContentHeader(value);
0: 		// TODO Add to constants.
1: 		if (name.equals(SubsystemTypeHeader.NAME))
1: 			return new SubsystemTypeHeader(value);
1: 		return new GenericHeader(name, value);
1: 			
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: 		if (SubsystemLocalizationHeader.NAME.equals(name))
1: 			return new SubsystemLocalizationHeader(value);
============================================================================