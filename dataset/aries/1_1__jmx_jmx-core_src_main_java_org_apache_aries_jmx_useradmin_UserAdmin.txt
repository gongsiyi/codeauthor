1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.useradmin;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.Dictionary;
1:fdf3952: import java.util.Enumeration;
1:fdf3952: import java.util.List;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.AuthorizationData;
1:fdf3952: import org.apache.aries.jmx.codec.GroupData;
1:fdf3952: import org.apache.aries.jmx.codec.PropertyData;
1:fdf3952: import org.apache.aries.jmx.codec.RoleData;
1:fdf3952: import org.apache.aries.jmx.codec.UserData;
1:fdf3952: import org.osgi.framework.InvalidSyntaxException;
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1:fdf3952: import org.osgi.service.useradmin.Authorization;
1:fdf3952: import org.osgi.service.useradmin.Group;
1:fdf3952: import org.osgi.service.useradmin.Role;
1:fdf3952: import org.osgi.service.useradmin.User;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>UserAdmin</tt> represents {@link UserAdminMBean} implementation.
1:fdf3952:  * </p>
1:fdf3952:  * 
1:fdf3952:  * @see UserAdminMBean
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class UserAdmin implements UserAdminMBean {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.service.useradmin.UserAdmin service reference;
1:fdf3952:      */
1:fdf3952:     private org.osgi.service.useradmin.UserAdmin userAdmin;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new UserAdmin MBean.
1:fdf3952:      * 
1:fdf3952:      * @param userAdmin
1:fdf3952:      *            {@link UserAdmin} service reference.
1:fdf3952:      */
1:fdf3952:     public UserAdmin(org.osgi.service.useradmin.UserAdmin userAdmin) {
1:fdf3952:         this.userAdmin = userAdmin;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Validate Role against roleType.
1:fdf3952:      * 
1:fdf3952:      * @see Role#USER
1:fdf3952:      * @see Role#GROUP
1:fdf3952:      * @see Role#USER_ANYONE
1:fdf3952:      * 
1:fdf3952:      * @param role
1:fdf3952:      *            Role instance.
1:fdf3952:      * @param roleType
1:fdf3952:      *            role type.
1:fdf3952:      */
1:fdf3952:     private void validateRoleType(Role role, int roleType) throws IOException {
1:fdf3952:         if (role.getType() != roleType) {
1:fdf3952:             throw new IOException("Unexpected role type. Expected " + roleType + " but got " + role.getType());
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addCredential(java.lang.String, byte[], java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void addCredential(String key, byte[] value, String username) throws IOException {
1:fdf3952:         addCredential(key, (Object)value, username);
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addCredentialString(String, String, String)
1:fdf3952:      */
1:fdf3952:     public void addCredentialString(String key, String value, String username) throws IOException {
1:fdf3952:         addCredential(key, (Object)value, username);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private void addCredential(String key, Object value, String username) throws IOException {
1:fdf3952:         if (username == null) {
1:fdf3952:             throw new IOException("User name cannot be null");
1:fdf3952:         }
1:fdf3952:         if (key == null) {
1:fdf3952:             throw new IOException("Credential key cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(username);
1:fdf3952:         if (role == null) {
1:fdf3952:             throw new IOException("Operation fails user with provided username = [" + username + "] doesn't exist");
1:fdf3952:         }
1:fdf3952:         validateRoleType(role, Role.USER);
1:fdf3952:         Dictionary<String, Object> credentials = ((User) role).getCredentials();
1:fdf3952:         if (credentials != null) {
1:fdf3952:             credentials.put(key, value);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addMember(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public boolean addMember(String groupname, String rolename) throws IOException {
1:fdf3952:         if (groupname == null) {
1:fdf3952:             throw new IOException("Group name cannot be null");
1:fdf3952:         }
1:fdf3952:         if (rolename == null) {
1:fdf3952:             throw new IOException("Role name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role group = userAdmin.getRole(groupname);
1:fdf3952:         Role member = userAdmin.getRole(rolename);
1:fdf3952:         if (group == null) {
1:fdf3952:             throw new IOException("Operation fails role with provided groupname = [" + groupname + "] doesn't exist");
1:fdf3952:         }
1:fdf3952:         validateRoleType(group, Role.GROUP);
1:fdf3952:         return ((Group) group).addMember(member);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addPropertyString(String, String, String)
1:fdf3952:      */
1:fdf3952:     public void addPropertyString(String key, String value, String rolename) throws IOException {
1:fdf3952:         addRoleProperty(key, value, rolename);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addProperty(java.lang.String, byte[], java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void addProperty(String key, byte[] value, String rolename) throws IOException {
1:fdf3952:         addRoleProperty(key, value, rolename); 
1:fdf3952:     }
1:fdf3952:     
1:fdf3952:     /**
1:fdf3952:      * @see UserAdminMBean#addProperty(String, byte[], String)
1:fdf3952:      * @see UserAdminMBean#addProperty(String, String, String)
1:fdf3952:      */
1:fdf3952:     private void addRoleProperty(String key, Object value, String rolename) throws IOException {
1:fdf3952:         if (rolename == null) {
1:fdf3952:             throw new IOException("Role name cannot be null");
1:fdf3952:         }
1:fdf3952:         if (key == null) {
1:fdf3952:             throw new IOException("Property key cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(rolename);
1:fdf3952:         if (role == null) {
1:fdf3952:             throw new IOException("Operation fails role with provided rolename = [" + rolename + "] doesn't exist");
1:fdf3952:         }
1:fdf3952:         Dictionary<String, Object>  properties = role.getProperties();
1:fdf3952:         if (properties != null) {
1:fdf3952:             properties.put(key, value);
1:fdf3952:         }        
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addRequiredMember(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public boolean addRequiredMember(String groupname, String rolename) throws IOException {
1:fdf3952:         if (groupname == null) {
1:fdf3952:             throw new IOException("Group name cannot be null");
1:fdf3952:         }
1:fdf3952:         if (rolename == null) {
1:fdf3952:             throw new IOException("Role name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role group = userAdmin.getRole(groupname);
1:fdf3952:         Role member = userAdmin.getRole(rolename);
1:fdf3952:         if (group == null) {
1:fdf3952:             throw new IOException("Operation fails role with provided groupname = [" + groupname + "] doesn't exist");
1:fdf3952:         }
1:fdf3952:         validateRoleType(group, Role.GROUP);
1:fdf3952:         return ((Group) group).addRequiredMember(member);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#createGroup(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void createGroup(String name) throws IOException {
1:fdf3952:         if (name == null) {
1:fdf3952:             throw new IOException("Group name cannot be null");
1:fdf3952:         }
1:fdf3952:         userAdmin.createRole(name, Role.GROUP);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#createRole(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void createRole(String name) throws IOException {
1:fdf3952:         throw new IOException("Deprecated: use createGroup or createUser");
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#createUser(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void createUser(String name) throws IOException {
1:fdf3952:         if (name == null) {
1:fdf3952:             throw new IOException("User name cannot be null");
1:fdf3952:         }
1:fdf3952:         userAdmin.createRole(name, Role.USER);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getAuthorization(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public CompositeData getAuthorization(String username) throws IOException {
1:fdf3952:         if (username== null) {
1:fdf3952:             throw new IOException("User name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(username);
1:fdf3952:         if (role == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         validateRoleType(role, Role.USER);
1:fdf3952:         Authorization auth = userAdmin.getAuthorization((User) role);
1:fdf3952:         if (auth == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return new AuthorizationData(auth).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getCredentials(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public TabularData getCredentials(String username) throws IOException {
1:fdf3952:         if (username == null) {
1:fdf3952:             throw new IOException("User name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(username);
1:fdf3952:         if (role == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         validateRoleType(role, Role.USER);
1:fdf3952:         Dictionary<String, Object> credentials = ((User) role).getCredentials();
1:fdf3952:         if (credentials == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         TabularData data = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:fdf3952:         for (Enumeration<String> keys = credentials.keys(); keys.hasMoreElements();) {
1:fdf3952:             String key = keys.nextElement();
1:fdf3952:             data.put(PropertyData.newInstance(key, credentials.get(key)).toCompositeData());
1:fdf3952:         }
1:fdf3952:         return data;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getGroup(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public CompositeData getGroup(String groupname) throws IOException {
1:fdf3952:         if (groupname == null) {
1:fdf3952:             throw new IOException("Group name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(groupname);
1:fdf3952:         if (role == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         validateRoleType(role, Role.GROUP);
1:fdf3952:         return new GroupData((Group) role).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getGroups(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[] getGroups(String filter) throws IOException {
1:fdf3952:         Role[] roles = null;
1:fdf3952:         try {
1:fdf3952:             roles = userAdmin.getRoles(filter);
1:fdf3952:         } catch (InvalidSyntaxException ise) {
1:fdf3952:             IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
1:fdf3952:             ioex.initCause(ise);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         if (roles == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return getRoleByType(roles, Role.GROUP);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getImpliedRoles(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[] getImpliedRoles(String username) throws IOException {
1:fdf3952:         if (username == null) {
1:fdf3952:             throw new IOException("User name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(username);
1:fdf3952:         if (role != null) {
1:fdf3952:             validateRoleType(role, Role.USER);
1:fdf3952:             Authorization auth = userAdmin.getAuthorization((User) role);
1:fdf3952:             if (auth != null) {
1:fdf3952:                 return auth.getRoles();
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getMembers(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[] getMembers(String groupname) throws IOException {
1:fdf3952:         if (groupname == null) {
1:fdf3952:             throw new IOException("Group name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(groupname);
1:fdf3952:         if (role != null) {
1:fdf3952:             validateRoleType(role, Role.GROUP);
1:fdf3952:             Role[] roles = ((Group) role).getMembers();
1:fdf3952:             if (roles != null) {
1:fdf3952:                 String[] members = new String[roles.length];
1:fdf3952:                 for (int i = 0; i < roles.length; i++) {
1:fdf3952:                     members[i] = roles[i].getName();
1:fdf3952:                 }
1:fdf3952:                 return members;
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getProperties(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public TabularData getProperties(String rolename) throws IOException {
1:fdf3952:         if (rolename == null) {
1:fdf3952:             throw new IOException("Role name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(rolename);
1:fdf3952:         if (role == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         Dictionary<String, Object> properties = role.getProperties();
1:fdf3952:         if (properties == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         TabularData data = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:fdf3952:         for (Enumeration<String> keys = properties.keys(); keys.hasMoreElements();) {
1:fdf3952:             String key = keys.nextElement();
1:fdf3952:             data.put(PropertyData.newInstance(key, properties.get(key)).toCompositeData());
1:fdf3952:         }
1:fdf3952:         return data;
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getRequiredMembers(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[] getRequiredMembers(String groupname) throws IOException {
1:fdf3952:         if (groupname == null) {
1:fdf3952:             throw new IOException("Group name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(groupname);
1:fdf3952:         if (role != null) {
1:fdf3952:             validateRoleType(role, Role.GROUP);
1:fdf3952:             Role[] roles = ((Group) role).getRequiredMembers();
1:fdf3952:             if (roles != null) {
1:fdf3952:                 String[] reqMembers = new String[roles.length];
1:fdf3952:                 for (int i = 0; i < roles.length; i++) {
1:fdf3952:                     reqMembers[i] = roles[i].getName();
1:fdf3952:                 }
1:fdf3952:                 return reqMembers;
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getRole(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public CompositeData getRole(String name) throws IOException {
1:fdf3952:         if (name == null) {
1:fdf3952:             throw new IOException("Role name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(name);
1:fdf3952:         if (role == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         return new RoleData(role).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getRoles(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[] getRoles(String filter) throws IOException {
1:fdf3952:         Role[] roles = null;
1:fdf3952:         try {
1:fdf3952:             roles = userAdmin.getRoles(filter);
1:fdf3952:         } catch (InvalidSyntaxException ise) {
1:fdf3952:             IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
1:fdf3952:             ioex.initCause(ise);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:         if (roles == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         return getRoleByType(roles, Role.ROLE);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getUser(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public CompositeData getUser(String username) throws IOException {
1:fdf3952:         if (username == null) {
1:fdf3952:             throw new IOException("User name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(username);
1:fdf3952:         if (role == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         validateRoleType(role, Role.USER);
1:fdf3952:         return new UserData((User) role).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getUserWithProperty(String, String)
1:fdf3952:      */
1:fdf3952:     public String getUserWithProperty(String key, String value) throws IOException {
1:fdf3952:         if (key == null) {
1:fdf3952:             throw new IOException("Property key cannot be null");
1:fdf3952:         }
1:fdf3952:         User user = userAdmin.getUser(key, value);
1:fdf3952:         if (user == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         return user.getName();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getUsers(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public String[] getUsers(String filter) throws IOException {
1:fdf3952:         Role[] roles = null;
1:fdf3952:         try {
1:fdf3952:             roles = userAdmin.getRoles(filter);
1:fdf3952:         } catch (InvalidSyntaxException ise) {
1:fdf3952:             IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
1:fdf3952:             ioex.initCause(ise);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:         if (roles == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         return getRoleByType(roles, Role.USER);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#listGroups()
1:fdf3952:      */
1:fdf3952:     public String[] listGroups() throws IOException {
1:fdf3952:         Role[] roles = null;
1:fdf3952:         try {
1:fdf3952:             roles = userAdmin.getRoles(null);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             // shouldn't happened we are not using filter
1:fdf3952:         }
1:fdf3952:         if (roles == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         return getRoleByType(roles, Role.GROUP);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#listRoles()
1:fdf3952:      */
1:fdf3952:     public String[] listRoles() throws IOException {
1:fdf3952:         Role[] roles = null;
1:fdf3952:         try {
1:fdf3952:             roles = userAdmin.getRoles(null);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             // shouldn't happened we are not using filter
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         if (roles == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return getRoleByType(roles, Role.ROLE);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#listUsers()
1:fdf3952:      */
1:fdf3952:     public String[] listUsers() throws IOException {
1:fdf3952:         Role[] roles = null;
1:fdf3952:         try {
1:fdf3952:             roles = userAdmin.getRoles(null);
1:fdf3952:         } catch (InvalidSyntaxException e) {
1:fdf3952:             // shouldn't happened we are not using filter
1:fdf3952:         }
1:fdf3952:         if (roles == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         return getRoleByType(roles, Role.USER);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Gets role names by type from provided roles array.
1:fdf3952:      * 
1:fdf3952:      * @param roles
1:fdf3952:      *            array of Role's.
1:fdf3952:      * @param roleType
1:fdf3952:      *            role Type.
1:fdf3952:      * @return array of role names.
1:fdf3952:      */
1:fdf3952:     private String[] getRoleByType(Role[] roles, int roleType) {
1:fdf3952:         List<String> rs = new ArrayList<String>();
1:fdf3952:         for (Role role : roles) {
1:fdf3952:             if (roleType == Role.ROLE) {
1:fdf3952:                 rs.add(role.getName());
1:fdf3952:                 continue;
1:fdf3952:             }
1:fdf3952: 
1:fdf3952:             if (role.getType() == roleType) {
1:fdf3952:                 rs.add(role.getName());
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return rs.toArray(new String[rs.size()]);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeCredential(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void removeCredential(String key, String username) throws IOException {
1:fdf3952:         if (username == null) {
1:fdf3952:             throw new IOException("User name cannot be null");
1:fdf3952:         }
1:fdf3952:         if (key == null) {
1:fdf3952:             throw new IOException("Credential key cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(username);
1:fdf3952:         if (role == null) {
1:fdf3952:             throw new IOException("Operation fails can't find user with username = [" + username + "] doesn't exist");
1:fdf3952:         }
1:fdf3952:         validateRoleType(role, Role.USER);
1:fdf3952:         ((User) role).getCredentials().remove(key);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeGroup(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public boolean removeGroup(String name) throws IOException {
1:fdf3952:         if (name == null) {
1:fdf3952:             throw new IOException("Group name cannot be null");
1:fdf3952:         }
1:fdf3952:         return userAdmin.removeRole(name);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeMember(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public boolean removeMember(String groupname, String rolename) throws IOException {
1:fdf3952:         if (groupname == null) {
1:fdf3952:             throw new IOException("Group name cannot be null");
1:fdf3952:         }
1:fdf3952:         if (rolename == null) {
1:fdf3952:             throw new IOException("Role name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role group = userAdmin.getRole(groupname);
1:fdf3952:         Role member = userAdmin.getRole(rolename);
1:fdf3952:         if (group == null) {
1:fdf3952:             throw new IOException("Operation fails role with provided groupname = [" + groupname + "] doesn't exist");
1:fdf3952:         }
1:fdf3952:         validateRoleType(group, Role.GROUP);
1:fdf3952:         return ((Group) group).removeMember(member);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeProperty(java.lang.String, java.lang.String)
1:fdf3952:      */
1:fdf3952:     public void removeProperty(String key, String rolename) throws IOException {
1:fdf3952:         if (rolename == null) {
1:fdf3952:             throw new IOException("Role name cannot be null");
1:fdf3952:         }
1:fdf3952:         Role role = userAdmin.getRole(rolename);
1:fdf3952:         if (role == null) {
1:fdf3952:             throw new IOException("Operation fails role with provided rolename = [" + rolename + "] doesn't exist");
1:fdf3952:         }
1:fdf3952:         role.getProperties().remove(key);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeRole(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public boolean removeRole(String name) throws IOException {
1:fdf3952:         if (name == null) {
1:fdf3952:             throw new IOException("Role name cannot be null");
1:fdf3952:         }
1:fdf3952:         return userAdmin.removeRole(name);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeUser(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public boolean removeUser(String name) throws IOException {
1:fdf3952:         if (name == null) {
1:fdf3952:             throw new IOException("User name cannot be null");
1:fdf3952:         }
1:fdf3952:         return userAdmin.removeRole(name);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.useradmin;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.List;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.apache.aries.jmx.codec.AuthorizationData;
1: import org.apache.aries.jmx.codec.GroupData;
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.apache.aries.jmx.codec.RoleData;
1: import org.apache.aries.jmx.codec.UserData;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.jmx.JmxConstants;
1: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1: import org.osgi.service.useradmin.Authorization;
1: import org.osgi.service.useradmin.Group;
1: import org.osgi.service.useradmin.Role;
1: import org.osgi.service.useradmin.User;
1: 
1: /**
1:  * <p>
1:  * <tt>UserAdmin</tt> represents {@link UserAdminMBean} implementation.
1:  * </p>
1:  * 
1:  * @see UserAdminMBean
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class UserAdmin implements UserAdminMBean {
1: 
1:     /**
1:      * @see org.osgi.service.useradmin.UserAdmin service reference;
1:      */
1:     private org.osgi.service.useradmin.UserAdmin userAdmin;
1: 
1:     /**
1:      * Constructs new UserAdmin MBean.
1:      * 
1:      * @param userAdmin
1:      *            {@link UserAdmin} service reference.
1:      */
1:     public UserAdmin(org.osgi.service.useradmin.UserAdmin userAdmin) {
1:         this.userAdmin = userAdmin;
1:     }
1: 
1:     /**
1:      * Validate Role against roleType.
1:      * 
1:      * @see Role#USER
1:      * @see Role#GROUP
1:      * @see Role#USER_ANYONE
1:      * 
1:      * @param role
1:      *            Role instance.
1:      * @param roleType
1:      *            role type.
1:      */
1:     private void validateRoleType(Role role, int roleType) throws IOException {
1:         if (role.getType() != roleType) {
1:             throw new IOException("Unexpected role type. Expected " + roleType + " but got " + role.getType());
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addCredential(java.lang.String, byte[], java.lang.String)
1:      */
1:     public void addCredential(String key, byte[] value, String username) throws IOException {
1:         addCredential(key, (Object)value, username);
1:     }
1:     
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addCredentialString(String, String, String)
1:      */
1:     public void addCredentialString(String key, String value, String username) throws IOException {
1:         addCredential(key, (Object)value, username);
1:     }
1: 
1:     private void addCredential(String key, Object value, String username) throws IOException {
1:         if (username == null) {
1:             throw new IOException("User name cannot be null");
1:         }
1:         if (key == null) {
1:             throw new IOException("Credential key cannot be null");
1:         }
1:         Role role = userAdmin.getRole(username);
1:         if (role == null) {
1:             throw new IOException("Operation fails user with provided username = [" + username + "] doesn't exist");
1:         }
1:         validateRoleType(role, Role.USER);
1:         Dictionary<String, Object> credentials = ((User) role).getCredentials();
1:         if (credentials != null) {
1:             credentials.put(key, value);
1:         }
1:     }
1:     
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addMember(java.lang.String, java.lang.String)
1:      */
1:     public boolean addMember(String groupname, String rolename) throws IOException {
1:         if (groupname == null) {
1:             throw new IOException("Group name cannot be null");
1:         }
1:         if (rolename == null) {
1:             throw new IOException("Role name cannot be null");
1:         }
1:         Role group = userAdmin.getRole(groupname);
1:         Role member = userAdmin.getRole(rolename);
1:         if (group == null) {
1:             throw new IOException("Operation fails role with provided groupname = [" + groupname + "] doesn't exist");
1:         }
1:         validateRoleType(group, Role.GROUP);
1:         return ((Group) group).addMember(member);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addPropertyString(String, String, String)
1:      */
1:     public void addPropertyString(String key, String value, String rolename) throws IOException {
1:         addRoleProperty(key, value, rolename);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addProperty(java.lang.String, byte[], java.lang.String)
1:      */
1:     public void addProperty(String key, byte[] value, String rolename) throws IOException {
1:         addRoleProperty(key, value, rolename); 
1:     }
1:     
1:     /**
1:      * @see UserAdminMBean#addProperty(String, byte[], String)
1:      * @see UserAdminMBean#addProperty(String, String, String)
1:      */
1:     private void addRoleProperty(String key, Object value, String rolename) throws IOException {
1:         if (rolename == null) {
1:             throw new IOException("Role name cannot be null");
1:         }
1:         if (key == null) {
1:             throw new IOException("Property key cannot be null");
1:         }
1:         Role role = userAdmin.getRole(rolename);
1:         if (role == null) {
1:             throw new IOException("Operation fails role with provided rolename = [" + rolename + "] doesn't exist");
1:         }
1:         Dictionary<String, Object>  properties = role.getProperties();
1:         if (properties != null) {
1:             properties.put(key, value);
1:         }        
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#addRequiredMember(java.lang.String, java.lang.String)
1:      */
1:     public boolean addRequiredMember(String groupname, String rolename) throws IOException {
1:         if (groupname == null) {
1:             throw new IOException("Group name cannot be null");
1:         }
1:         if (rolename == null) {
1:             throw new IOException("Role name cannot be null");
1:         }
1:         Role group = userAdmin.getRole(groupname);
1:         Role member = userAdmin.getRole(rolename);
1:         if (group == null) {
1:             throw new IOException("Operation fails role with provided groupname = [" + groupname + "] doesn't exist");
1:         }
1:         validateRoleType(group, Role.GROUP);
1:         return ((Group) group).addRequiredMember(member);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#createGroup(java.lang.String)
1:      */
1:     public void createGroup(String name) throws IOException {
1:         if (name == null) {
1:             throw new IOException("Group name cannot be null");
1:         }
1:         userAdmin.createRole(name, Role.GROUP);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#createRole(java.lang.String)
1:      */
1:     public void createRole(String name) throws IOException {
1:         throw new IOException("Deprecated: use createGroup or createUser");
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#createUser(java.lang.String)
1:      */
1:     public void createUser(String name) throws IOException {
1:         if (name == null) {
1:             throw new IOException("User name cannot be null");
1:         }
1:         userAdmin.createRole(name, Role.USER);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getAuthorization(java.lang.String)
1:      */
1:     public CompositeData getAuthorization(String username) throws IOException {
1:         if (username== null) {
1:             throw new IOException("User name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(username);
1:         if (role == null) {
1:             return null;
1:         }
1:         validateRoleType(role, Role.USER);
1:         Authorization auth = userAdmin.getAuthorization((User) role);
1:         if (auth == null) {
1:             return null;
1:         }
1: 
1:         return new AuthorizationData(auth).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getCredentials(java.lang.String)
1:      */
1:     public TabularData getCredentials(String username) throws IOException {
1:         if (username == null) {
1:             throw new IOException("User name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(username);
1:         if (role == null) {
1:             return null;
1:         }
1:         validateRoleType(role, Role.USER);
1:         Dictionary<String, Object> credentials = ((User) role).getCredentials();
1:         if (credentials == null) {
1:             return null;
1:         }
1:         TabularData data = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:         for (Enumeration<String> keys = credentials.keys(); keys.hasMoreElements();) {
1:             String key = keys.nextElement();
1:             data.put(PropertyData.newInstance(key, credentials.get(key)).toCompositeData());
1:         }
1:         return data;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getGroup(java.lang.String)
1:      */
1:     public CompositeData getGroup(String groupname) throws IOException {
1:         if (groupname == null) {
1:             throw new IOException("Group name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(groupname);
1:         if (role == null) {
1:             return null;
1:         }
1:         validateRoleType(role, Role.GROUP);
1:         return new GroupData((Group) role).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getGroups(java.lang.String)
1:      */
1:     public String[] getGroups(String filter) throws IOException {
1:         Role[] roles = null;
1:         try {
1:             roles = userAdmin.getRoles(filter);
1:         } catch (InvalidSyntaxException ise) {
1:             IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
1:             ioex.initCause(ise);
1:             throw ioex;
1:         }
1: 
1:         if (roles == null) {
1:             return null;
1:         }
1: 
1:         return getRoleByType(roles, Role.GROUP);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getImpliedRoles(java.lang.String)
1:      */
1:     public String[] getImpliedRoles(String username) throws IOException {
1:         if (username == null) {
1:             throw new IOException("User name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(username);
1:         if (role != null) {
1:             validateRoleType(role, Role.USER);
1:             Authorization auth = userAdmin.getAuthorization((User) role);
1:             if (auth != null) {
1:                 return auth.getRoles();
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getMembers(java.lang.String)
1:      */
1:     public String[] getMembers(String groupname) throws IOException {
1:         if (groupname == null) {
1:             throw new IOException("Group name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(groupname);
1:         if (role != null) {
1:             validateRoleType(role, Role.GROUP);
1:             Role[] roles = ((Group) role).getMembers();
1:             if (roles != null) {
1:                 String[] members = new String[roles.length];
1:                 for (int i = 0; i < roles.length; i++) {
1:                     members[i] = roles[i].getName();
1:                 }
1:                 return members;
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getProperties(java.lang.String)
1:      */
1:     public TabularData getProperties(String rolename) throws IOException {
1:         if (rolename == null) {
1:             throw new IOException("Role name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(rolename);
1:         if (role == null) {
1:             return null;
1:         }
1:         Dictionary<String, Object> properties = role.getProperties();
1:         if (properties == null) {
1:             return null;
1:         }
1:         TabularData data = new TabularDataSupport(JmxConstants.PROPERTIES_TYPE);
1:         for (Enumeration<String> keys = properties.keys(); keys.hasMoreElements();) {
1:             String key = keys.nextElement();
1:             data.put(PropertyData.newInstance(key, properties.get(key)).toCompositeData());
1:         }
1:         return data;
1: 
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getRequiredMembers(java.lang.String)
1:      */
1:     public String[] getRequiredMembers(String groupname) throws IOException {
1:         if (groupname == null) {
1:             throw new IOException("Group name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(groupname);
1:         if (role != null) {
1:             validateRoleType(role, Role.GROUP);
1:             Role[] roles = ((Group) role).getRequiredMembers();
1:             if (roles != null) {
1:                 String[] reqMembers = new String[roles.length];
1:                 for (int i = 0; i < roles.length; i++) {
1:                     reqMembers[i] = roles[i].getName();
1:                 }
1:                 return reqMembers;
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getRole(java.lang.String)
1:      */
1:     public CompositeData getRole(String name) throws IOException {
1:         if (name == null) {
1:             throw new IOException("Role name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(name);
1:         if (role == null) {
1:             return null;
1:         }
1:         return new RoleData(role).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getRoles(java.lang.String)
1:      */
1:     public String[] getRoles(String filter) throws IOException {
1:         Role[] roles = null;
1:         try {
1:             roles = userAdmin.getRoles(filter);
1:         } catch (InvalidSyntaxException ise) {
1:             IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
1:             ioex.initCause(ise);
1:             throw ioex;
1:         }
1:         if (roles == null) {
1:             return null;
1:         }
1:         return getRoleByType(roles, Role.ROLE);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getUser(java.lang.String)
1:      */
1:     public CompositeData getUser(String username) throws IOException {
1:         if (username == null) {
1:             throw new IOException("User name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(username);
1:         if (role == null) {
1:             return null;
1:         }
1:         validateRoleType(role, Role.USER);
1:         return new UserData((User) role).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getUserWithProperty(String, String)
1:      */
1:     public String getUserWithProperty(String key, String value) throws IOException {
1:         if (key == null) {
1:             throw new IOException("Property key cannot be null");
1:         }
1:         User user = userAdmin.getUser(key, value);
1:         if (user == null) {
1:             return null;
1:         }
1:         return user.getName();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#getUsers(java.lang.String)
1:      */
1:     public String[] getUsers(String filter) throws IOException {
1:         Role[] roles = null;
1:         try {
1:             roles = userAdmin.getRoles(filter);
1:         } catch (InvalidSyntaxException ise) {
1:             IOException ioex = new IOException("Operation fails illegal filter provided: " + filter);
1:             ioex.initCause(ise);
1:             throw ioex;
1:         }
1:         if (roles == null) {
1:             return null;
1:         }
1:         return getRoleByType(roles, Role.USER);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#listGroups()
1:      */
1:     public String[] listGroups() throws IOException {
1:         Role[] roles = null;
1:         try {
1:             roles = userAdmin.getRoles(null);
1:         } catch (InvalidSyntaxException e) {
1:             // shouldn't happened we are not using filter
1:         }
1:         if (roles == null) {
1:             return null;
1:         }
1:         return getRoleByType(roles, Role.GROUP);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#listRoles()
1:      */
1:     public String[] listRoles() throws IOException {
1:         Role[] roles = null;
1:         try {
1:             roles = userAdmin.getRoles(null);
1:         } catch (InvalidSyntaxException e) {
1:             // shouldn't happened we are not using filter
1:         }
1: 
1:         if (roles == null) {
1:             return null;
1:         }
1: 
1:         return getRoleByType(roles, Role.ROLE);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#listUsers()
1:      */
1:     public String[] listUsers() throws IOException {
1:         Role[] roles = null;
1:         try {
1:             roles = userAdmin.getRoles(null);
1:         } catch (InvalidSyntaxException e) {
1:             // shouldn't happened we are not using filter
1:         }
1:         if (roles == null) {
1:             return null;
1:         }
1:         return getRoleByType(roles, Role.USER);
1:     }
1: 
1:     /**
1:      * Gets role names by type from provided roles array.
1:      * 
1:      * @param roles
1:      *            array of Role's.
1:      * @param roleType
1:      *            role Type.
1:      * @return array of role names.
1:      */
1:     private String[] getRoleByType(Role[] roles, int roleType) {
1:         List<String> rs = new ArrayList<String>();
1:         for (Role role : roles) {
1:             if (roleType == Role.ROLE) {
1:                 rs.add(role.getName());
1:                 continue;
1:             }
1: 
1:             if (role.getType() == roleType) {
1:                 rs.add(role.getName());
1:             }
1:         }
1:         return rs.toArray(new String[rs.size()]);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeCredential(java.lang.String, java.lang.String)
1:      */
1:     public void removeCredential(String key, String username) throws IOException {
1:         if (username == null) {
1:             throw new IOException("User name cannot be null");
1:         }
1:         if (key == null) {
1:             throw new IOException("Credential key cannot be null");
1:         }
1:         Role role = userAdmin.getRole(username);
1:         if (role == null) {
1:             throw new IOException("Operation fails can't find user with username = [" + username + "] doesn't exist");
1:         }
1:         validateRoleType(role, Role.USER);
1:         ((User) role).getCredentials().remove(key);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeGroup(java.lang.String)
1:      */
1:     public boolean removeGroup(String name) throws IOException {
1:         if (name == null) {
1:             throw new IOException("Group name cannot be null");
1:         }
1:         return userAdmin.removeRole(name);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeMember(java.lang.String, java.lang.String)
1:      */
1:     public boolean removeMember(String groupname, String rolename) throws IOException {
1:         if (groupname == null) {
1:             throw new IOException("Group name cannot be null");
1:         }
1:         if (rolename == null) {
1:             throw new IOException("Role name cannot be null");
1:         }
1:         Role group = userAdmin.getRole(groupname);
1:         Role member = userAdmin.getRole(rolename);
1:         if (group == null) {
1:             throw new IOException("Operation fails role with provided groupname = [" + groupname + "] doesn't exist");
1:         }
1:         validateRoleType(group, Role.GROUP);
1:         return ((Group) group).removeMember(member);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeProperty(java.lang.String, java.lang.String)
1:      */
1:     public void removeProperty(String key, String rolename) throws IOException {
1:         if (rolename == null) {
1:             throw new IOException("Role name cannot be null");
1:         }
1:         Role role = userAdmin.getRole(rolename);
1:         if (role == null) {
1:             throw new IOException("Operation fails role with provided rolename = [" + rolename + "] doesn't exist");
1:         }
1:         role.getProperties().remove(key);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeRole(java.lang.String)
1:      */
1:     public boolean removeRole(String name) throws IOException {
1:         if (name == null) {
1:             throw new IOException("Role name cannot be null");
1:         }
1:         return userAdmin.removeRole(name);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.service.useradmin.UserAdminMBean#removeUser(java.lang.String)
1:      */
1:     public boolean removeUser(String name) throws IOException {
1:         if (name == null) {
1:             throw new IOException("User name cannot be null");
1:         }
1:         return userAdmin.removeRole(name);
1:     }
1: 
1: }
============================================================================