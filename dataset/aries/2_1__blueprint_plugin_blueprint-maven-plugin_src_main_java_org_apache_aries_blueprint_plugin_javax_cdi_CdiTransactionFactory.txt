1:3e3b598: /**
1:3e3b598:  * Licensed to the Apache Software Foundation (ASF) under one
1:3e3b598:  * or more contributor license agreements.  See the NOTICE file
1:3e3b598:  * distributed with this work for additional information
1:3e3b598:  * regarding copyright ownership.  The ASF licenses this file
1:3e3b598:  * to you under the Apache License, Version 2.0 (the
1:3e3b598:  * "License"); you may not use this file except in compliance
1:3e3b598:  * with the License.  You may obtain a copy of the License at
1:3e3b598:  * <p/>
1:3e3b598:  * http://www.apache.org/licenses/LICENSE-2.0
1:3e3b598:  * <p/>
1:3e3b598:  * Unless required by applicable law or agreed to in writing,
1:3e3b598:  * software distributed under the License is distributed on an
1:3e3b598:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3e3b598:  * KIND, either express or implied.  See the License for the
1:3e3b598:  * specific language governing permissions and limitations
1:3e3b598:  * under the License.
1:3e3b598:  */
1:1aa3efb: package org.apache.aries.blueprint.plugin.javax.cdi;
1:3e3b598: 
1:3e3b598: import com.google.common.base.CaseFormat;
1:3e3b598: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1:3e3b598: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1:3e3b598: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1:3e3b598: import org.apache.aries.blueprint.plugin.spi.MethodAnnotationHandler;
1:3e3b598: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1:3e3b598: 
1:3e3b598: import javax.transaction.cdi.Transactional;
1:3e3b598: import javax.xml.stream.XMLStreamException;
1:3e3b598: import javax.xml.stream.XMLStreamWriter;
1:3e3b598: import java.lang.reflect.AnnotatedElement;
1:3e3b598: import java.lang.reflect.Method;
1:3e3b598: import java.util.List;
1:3e3b598: import java.util.Set;
1:3e3b598: 
1:3e3b598: public class CdiTransactionFactory implements BeanAnnotationHandler<Transactional>, MethodAnnotationHandler<Transactional> {
1:3e3b598:     private static final String PATTERN_NS_TX1 = "http\\:\\/\\/aries\\.apache\\.org\\/xmlns\\/transactions\\/v1\\.(.)\\.(.)";
1:3e3b598:     private static final String PATTERN_NS_TX2 = "http\\:\\/\\/aries\\.apache\\.org\\/xmlns\\/transactions\\/v2\\.(.)\\.(.)";
1:3e3b598: 
1:3e3b598:     private String getTransactionTypeName(Transactional transactional) {
1:3e3b598:         return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, transactional.value().name());
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Override
1:3e3b598:     public Class<Transactional> getAnnotation() {
1:3e3b598:         return Transactional.class;
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Override
1:3e3b598:     public void handleMethodAnnotation(Class<?> clazz, List<Method> methods, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:3e3b598:         final String nsTx1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:3e3b598:         if (nsTx1 != null) {
1:3e3b598:             enableAnnotations(contextEnricher, nsTx1);
1:3e3b598:             for (final Method method : methods) {
1:3e3b598:                 final Transactional transactional = method.getAnnotation(Transactional.class);
1:3e3b598:                 final String transactionTypeName = getTransactionTypeName(transactional);
1:3e3b598:                 final String name = method.getName();
1:3e3b598:                 beanEnricher.addBeanContentWriter("javax.transactional.method/" + clazz.getName() + "/" + name + "/" + transactionTypeName, new XmlWriter() {
1:3e3b598:                     @Override
1:3e3b598:                     public void write(XMLStreamWriter writer) throws XMLStreamException {
1:3e3b598:                         writer.writeEmptyElement("transaction");
1:3e3b598:                         writer.writeDefaultNamespace(nsTx1);
1:3e3b598:                         writer.writeAttribute("method", name);
1:3e3b598:                         writer.writeAttribute("value", transactionTypeName);
1:3e3b598:                     }
1:3e3b598:                 });
1:3e3b598:             }
1:3e3b598:         }
1:3e3b598:         final String nsTx2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX2);
1:3e3b598:         if (nsTx2 != null) {
1:3e3b598:             enableTransactionsTx2(contextEnricher, nsTx2);
1:3e3b598:         }
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     private void enableAnnotations(ContextEnricher contextEnricher, final String namespace) {
1:3e3b598:         contextEnricher.addBlueprintContentWriter("transaction/ennable-annotation", new XmlWriter() {
1:3e3b598:             @Override
1:3e3b598:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:3e3b598:                 writer.writeEmptyElement("enable-annotations");
1:3e3b598:                 writer.writeDefaultNamespace(namespace);
1:3e3b598:             }
1:3e3b598:         });
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Override
1:3e3b598:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, String id, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:3e3b598:         final String nsTx1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:3e3b598:         if (nsTx1 != null) {
1:3e3b598:             enableAnnotations(contextEnricher, nsTx1);
1:3e3b598:             final Transactional transactional = annotatedElement.getAnnotation(Transactional.class);
1:3e3b598:             final String transactionTypeName = getTransactionTypeName(transactional);
1:3e3b598:             beanEnricher.addBeanContentWriter("javax.transactional.method/" + annotatedElement + "/*/" + transactionTypeName, new XmlWriter() {
1:3e3b598:                 @Override
1:3e3b598:                 public void write(XMLStreamWriter writer) throws XMLStreamException {
1:3e3b598:                     writer.writeEmptyElement("transaction");
1:3e3b598:                     writer.writeDefaultNamespace(nsTx1);
1:3e3b598:                     writer.writeAttribute("method", "*");
1:3e3b598:                     writer.writeAttribute("value", transactionTypeName);
1:3e3b598:                 }
1:3e3b598:             });
1:3e3b598:         }
1:3e3b598:         final String nsTx2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX2);
1:3e3b598:         if (nsTx2 != null) {
1:3e3b598:             enableTransactionsTx2(contextEnricher, nsTx2);
1:3e3b598:         }
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     private void enableTransactionsTx2(ContextEnricher contextEnricher, final String namespace) {
1:3e3b598:         contextEnricher.addBlueprintContentWriter("transaction/ennable-annotation", new XmlWriter() {
1:3e3b598:             @Override
1:3e3b598:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:3e3b598:                 writer.writeEmptyElement("enable");
1:3e3b598:                 writer.writeDefaultNamespace(namespace);
1:3e3b598:             }
1:3e3b598:         });
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     private String getNamespaceByPattern(Set<String> namespaces, String pattern) {
1:3e3b598:         for (String namespace : namespaces) {
1:3e3b598:             if (namespace.matches(pattern)) {
1:3e3b598:                 return namespace;
1:3e3b598:             }
1:3e3b598:         }
1:3e3b598:         return null;
1:3e3b598:     }
1:3e3b598: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:1aa3efb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.plugin.javax.cdi;
commit:3e3b598
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.blueprint.plugin.cdi;
1: 
1: import com.google.common.base.CaseFormat;
1: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1: import org.apache.aries.blueprint.plugin.spi.BeanEnricher;
1: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1: import org.apache.aries.blueprint.plugin.spi.MethodAnnotationHandler;
1: import org.apache.aries.blueprint.plugin.spi.XmlWriter;
1: 
1: import javax.transaction.cdi.Transactional;
1: import javax.xml.stream.XMLStreamException;
1: import javax.xml.stream.XMLStreamWriter;
1: import java.lang.reflect.AnnotatedElement;
1: import java.lang.reflect.Method;
1: import java.util.List;
1: import java.util.Set;
1: 
1: public class CdiTransactionFactory implements BeanAnnotationHandler<Transactional>, MethodAnnotationHandler<Transactional> {
1:     private static final String PATTERN_NS_TX1 = "http\\:\\/\\/aries\\.apache\\.org\\/xmlns\\/transactions\\/v1\\.(.)\\.(.)";
1:     private static final String PATTERN_NS_TX2 = "http\\:\\/\\/aries\\.apache\\.org\\/xmlns\\/transactions\\/v2\\.(.)\\.(.)";
1: 
1:     private String getTransactionTypeName(Transactional transactional) {
1:         return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, transactional.value().name());
1:     }
1: 
1:     @Override
1:     public Class<Transactional> getAnnotation() {
1:         return Transactional.class;
1:     }
1: 
1:     @Override
1:     public void handleMethodAnnotation(Class<?> clazz, List<Method> methods, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:         final String nsTx1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:         if (nsTx1 != null) {
1:             enableAnnotations(contextEnricher, nsTx1);
1:             for (final Method method : methods) {
1:                 final Transactional transactional = method.getAnnotation(Transactional.class);
1:                 final String transactionTypeName = getTransactionTypeName(transactional);
1:                 final String name = method.getName();
1:                 beanEnricher.addBeanContentWriter("javax.transactional.method/" + clazz.getName() + "/" + name + "/" + transactionTypeName, new XmlWriter() {
1:                     @Override
1:                     public void write(XMLStreamWriter writer) throws XMLStreamException {
1:                         writer.writeEmptyElement("transaction");
1:                         writer.writeDefaultNamespace(nsTx1);
1:                         writer.writeAttribute("method", name);
1:                         writer.writeAttribute("value", transactionTypeName);
1:                     }
1:                 });
1:             }
1:         }
1:         final String nsTx2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX2);
1:         if (nsTx2 != null) {
1:             enableTransactionsTx2(contextEnricher, nsTx2);
1:         }
1:     }
1: 
1:     private void enableAnnotations(ContextEnricher contextEnricher, final String namespace) {
1:         contextEnricher.addBlueprintContentWriter("transaction/ennable-annotation", new XmlWriter() {
1:             @Override
1:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:                 writer.writeEmptyElement("enable-annotations");
1:                 writer.writeDefaultNamespace(namespace);
1:             }
1:         });
1:     }
1: 
1:     @Override
1:     public void handleBeanAnnotation(AnnotatedElement annotatedElement, String id, ContextEnricher contextEnricher, BeanEnricher beanEnricher) {
1:         final String nsTx1 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX1);
1:         if (nsTx1 != null) {
1:             enableAnnotations(contextEnricher, nsTx1);
1:             final Transactional transactional = annotatedElement.getAnnotation(Transactional.class);
1:             final String transactionTypeName = getTransactionTypeName(transactional);
1:             beanEnricher.addBeanContentWriter("javax.transactional.method/" + annotatedElement + "/*/" + transactionTypeName, new XmlWriter() {
1:                 @Override
1:                 public void write(XMLStreamWriter writer) throws XMLStreamException {
1:                     writer.writeEmptyElement("transaction");
1:                     writer.writeDefaultNamespace(nsTx1);
1:                     writer.writeAttribute("method", "*");
1:                     writer.writeAttribute("value", transactionTypeName);
1:                 }
1:             });
1:         }
1:         final String nsTx2 = getNamespaceByPattern(contextEnricher.getBlueprintConfiguration().getNamespaces(), PATTERN_NS_TX2);
1:         if (nsTx2 != null) {
1:             enableTransactionsTx2(contextEnricher, nsTx2);
1:         }
1:     }
1: 
1:     private void enableTransactionsTx2(ContextEnricher contextEnricher, final String namespace) {
1:         contextEnricher.addBlueprintContentWriter("transaction/ennable-annotation", new XmlWriter() {
1:             @Override
1:             public void write(XMLStreamWriter writer) throws XMLStreamException {
1:                 writer.writeEmptyElement("enable");
1:                 writer.writeDefaultNamespace(namespace);
1:             }
1:         });
1:     }
1: 
1:     private String getNamespaceByPattern(Set<String> namespaces, String pattern) {
1:         for (String namespace : namespaces) {
1:             if (namespace.matches(pattern)) {
1:                 return namespace;
1:             }
1:         }
1:         return null;
1:     }
1: }
============================================================================