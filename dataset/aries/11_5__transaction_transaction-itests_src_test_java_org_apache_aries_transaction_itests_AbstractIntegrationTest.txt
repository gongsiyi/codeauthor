1:5c15102: /*
1:5c15102:  * Licensed to the Apache Software Foundation (ASF) under one
1:5c15102:  * or more contributor license agreements.  See the NOTICE file
1:5c15102:  * distributed with this work for additional information
1:5c15102:  * regarding copyright ownership.  The ASF licenses this file
1:5c15102:  * to you under the Apache License, Version 2.0 (the
1:5c15102:  * "License"); you may not use this file except in compliance
1:5c15102:  * with the License.  You may obtain a copy of the License at
1:5c15102:  *
1:5c15102:  *   http://www.apache.org/licenses/LICENSE-2.0
1:5c15102:  *
1:5c15102:  * Unless required by applicable law or agreed to in writing,
1:5c15102:  * software distributed under the License is distributed on an
1:5c15102:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5c15102:  * KIND, either express or implied.  See the License for the
1:5c15102:  * specific language governing permissions and limitations
1:5c15102:  * under the License.
1:5c15102:  */
1:5c15102: package org.apache.aries.transaction.itests;
1:f2e7057: 
1:4854ac3: import static org.junit.Assert.assertEquals;
1:70e39b6: import static org.junit.Assert.fail;
1:5d2c3a1: import static org.ops4j.pax.exam.CoreOptions.composite;
1:5d2c3a1: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1:5d2c3a1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:f39248a: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:5c15102: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:5d2c3a1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:5d2c3a1: import static org.ops4j.pax.exam.CoreOptions.when;
1:febc5c2: 
1:70e39b6: import java.sql.SQLException;
1:70e39b6: 
1:febc5c2: import javax.inject.Inject;
1:70e39b6: import javax.transaction.RollbackException;
1:febc5c2: import javax.transaction.UserTransaction;
1:70e39b6: 
1:bd98451: import org.apache.aries.transaction.test.Counter;
1:70e39b6: import org.apache.aries.transaction.test.TestBean;
1:4854ac3: import org.junit.Assert;
1:5c15102: import org.junit.runner.RunWith;
1:5d2c3a1: import org.ops4j.pax.exam.Configuration;
1:74c780f: import org.ops4j.pax.exam.CoreOptions;
1:5c15102: import org.ops4j.pax.exam.Option;
1:5d2c3a1: import org.ops4j.pax.exam.junit.PaxExam;
1:5d2c3a1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:70e39b6: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:4854ac3: import org.osgi.framework.Bundle;
1:febc5c2: import org.osgi.framework.BundleContext;
1:4854ac3: import org.osgi.framework.BundleException;
1:5d2c3a1: 
1:5d2c3a1: @RunWith(PaxExam.class)
1:70e39b6: @ExamReactorStrategy(PerClass.class)
1:febc5c2: public abstract class AbstractIntegrationTest {
1:febc5c2:     @Inject
1:febc5c2:     BundleContext bundleContext;
1:febc5c2:     
1:febc5c2:     @Inject
1:febc5c2:     UserTransaction tran;
1:bd98451:     
1:bd98451:     @Inject
1:bd98451:     Counter counter;
1:febc5c2: 
1:70e39b6:     protected boolean clientTransaction = true;
1:70e39b6: 
1:febc5c2:     public Option baseOptions() {
1:5d2c3a1:         String localRepo = System.getProperty("maven.repo.local");
1:5d2c3a1:         if (localRepo == null) {
1:5d2c3a1:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:5d2c3a1:         }
1:5d2c3a1:         return composite(
1:5d2c3a1:                 junitBundles(),
1:5c15102:                 // this is how you set the default log level when using pax
1:5c15102:                 // logging (logProfile)
1:5d2c3a1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:5d2c3a1:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:74c780f:          );
1:5d2c3a1:     }
1:70e39b6: 
1:5d2c3a1:     @Configuration
1:5d2c3a1:     public Option[] configuration() {
1:5d2c3a1:         return new Option[] {
1:febc5c2:                 baseOptions(),
1:5d2c3a1:                 frameworkProperty("org.osgi.framework.system.packages")
1:febc5c2:                     .value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
1:f39248a:                 systemProperty("org.apache.aries.proxy.weaving.enabled").value("none"),
1:5d2c3a1: 
1:5c15102:                 // Bundles
1:4854ac3:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
1:4854ac3:                 
1:4854ac3:                 mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.6_spec").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.geronimo.specs", "geronimo-validation_1.0_spec").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.geronimo.components", "geronimo-connector").versionAsInProject(),
1:4854ac3: 
1:4854ac3:                 mavenBundle("org.apache.derby", "derby").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api").versionAsInProject(),
1:4854ac3:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl").versionAsInProject(),
1:74c780f:                 jta12Bundles(),
1:cab5d91:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager").versionAsInProject(),
1:cab5d91:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint").versionAsInProject(),
1:cab5d91:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.jdbc").versionAsInProject(),
1:cab5d91:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.testbundle").versionAsInProject(),
1:cab5d91:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.testds").versionAsInProject(),
1:86224ba: 
1:bd98451:                 //debug(),
1:5c15102:                 //new TimeoutOption( 0 ),
1:5d2c3a1:         };
21:5c15102:     }
1:74c780f: 
1:bd98451:     protected Option debug() {
1:bd98451:         return vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005");
1:bd98451:     }
1:bd98451: 
1:febc5c2:     private Option jta12Bundles() {
1:febc5c2:             return CoreOptions.composite(
1:05c0a80:                 mavenBundle("javax.interceptor", "javax.interceptor-api").versionAsInProject(),
1:05c0a80:                 mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javax-inject").versionAsInProject(),
1:05c0a80:                 mavenBundle("javax.el", "javax.el-api").versionAsInProject(),
1:05c0a80:                 mavenBundle("javax.enterprise", "cdi-api").versionAsInProject(),
1:05c0a80:                 mavenBundle("javax.transaction", "javax.transaction-api").versionAsInProject()
1:febc5c2:             );
1:febc5c2:     }
1:4854ac3:     
1:4854ac3:     /**
1:4854ac3:      * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
1:4854ac3:      * 
1:4854ac3:      * @throws BundleException
1:4854ac3:      */
1:4854ac3:     public void resolveBundles() throws BundleException {
1:4854ac3:         System.out.println("Checking for bundles");
1:4854ac3:         Bundle[] bundles = bundleContext.getBundles();
1:4854ac3:         for (Bundle bundle : bundles) {
1:4854ac3:             if (bundle.getState() == Bundle.INSTALLED) {
1:4854ac3:                 System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":"
1:4854ac3:                     + bundle.getSymbolicName() + ":" + bundle.getVersion());
1:4854ac3:                 bundle.start();
1:4854ac3:             }
1:4854ac3:         }
1:4854ac3:     }
1:febc5c2: 
1:70e39b6:     // Test with client transaction and runtime exception - the user transaction is rolled back
1:70e39b6:     protected void assertInsertWithRuntimeExceptionRolledBack() throws Exception {
1:70e39b6:         TestBean bean = getBean();
1:bd98451:         int initialRows = counter.countRows();
1:70e39b6: 
1:70e39b6:         if (clientTransaction) {
2:70e39b6:             tran.begin();
1:70e39b6:         }
1:bd98451:         bean.insertRow("testWithClientTranAndWithRuntimeException", 1, null);
1:70e39b6:         try {
1:70e39b6:             bean.insertRow("testWithClientTranAndWithRuntimeException", 2, new RuntimeException("Dummy exception"));
1:70e39b6:         } catch (RuntimeException e) {
1:70e39b6:             Assert.assertEquals("Dummy exception", e.getMessage());
1:70e39b6:         }
1:70e39b6:         if (clientTransaction) {
1:70e39b6:             try {
2:70e39b6:                 tran.commit();
1:70e39b6:                 fail("RollbackException not thrown");
1:70e39b6:             } catch (RollbackException e) {
1:70e39b6:                 // Ignore expected
1:70e39b6:             }
1:70e39b6:         }
1:70e39b6: 
1:bd98451:         int finalRows = counter.countRows();
1:70e39b6:         // In case of client transaction both are rolled back
1:70e39b6:         // In case of container transaction only second insert is rolled back
1:70e39b6:         assertEquals("Added rows", clientTransaction ? 0 : 1, finalRows - initialRows);
1:70e39b6:     }
1:70e39b6: 
1:70e39b6:     protected void assertInsertWithAppExceptionCommitted() throws Exception {
1:70e39b6:         TestBean bean = getBean();
1:bd98451:         int initialRows = counter.countRows();
1:70e39b6:         if (clientTransaction) {
1:70e39b6:             tran.begin();
1:70e39b6:         }
1:bd98451:         bean.insertRow("testWithClientTranAndWithAppException", 1, null);
1:70e39b6:         try {
1:70e39b6:             bean.insertRow("testWithClientTranAndWithAppException", 2, new SQLException("Dummy exception"));
1:70e39b6:         } catch (SQLException e) {
1:70e39b6:             Assert.assertEquals("Dummy exception", e.getMessage());
1:70e39b6:         }
1:70e39b6:         if (clientTransaction) {
1:70e39b6:             tran.commit();
1:70e39b6:         }
1:70e39b6: 
1:bd98451:         int finalRows = counter.countRows();
1:70e39b6:         assertEquals("Added rows", 2, finalRows - initialRows);
1:70e39b6:     }
1:70e39b6: 
1:70e39b6:     protected void assertInsertSuccesful() throws Exception {
1:70e39b6:         TestBean bean = getBean();
1:bd98451:         int initialRows = counter.countRows();
1:70e39b6: 
1:70e39b6:         if (clientTransaction ) {
1:70e39b6:             tran.begin();
1:70e39b6:         }
1:bd98451:         bean.insertRow("testWithClientTran", 1, null);
1:70e39b6:         if (clientTransaction ) {
1:70e39b6:             tran.commit();
1:70e39b6:         }
1:bd98451:         int finalRows = counter.countRows();
1:70e39b6:         assertEquals("Added rows", 1, finalRows - initialRows);
1:70e39b6:     }
1:70e39b6: 
1:a44e725:     protected void assertInsertFails() throws Exception {
1:70e39b6:         TestBean bean = getBean();
1:bd98451:         int initialRows = counter.countRows();
1:a44e725:         if (clientTransaction ) {
1:a44e725:             tran.begin();
1:a44e725:         }
1:70e39b6:         try {
1:bd98451:             bean.insertRow("testWithClientTran", 1, null);
1:70e39b6:             fail("IllegalStateException not thrown");
1:70e39b6:         } catch (IllegalStateException e) {
1:70e39b6:             // Ignore Expected
1:a44e725:         }
1:a44e725:         if (clientTransaction ) {
1:a44e725:             tran.commit();
1:70e39b6:         }
1:bd98451:         int finalRows = counter.countRows();
1:70e39b6:         assertEquals("Added rows", 0, finalRows - initialRows);
1:70e39b6:     }
1:70e39b6:     
1:70e39b6:     // Test without client transaction - the insert fails because the bean delegates to another
1:70e39b6:     // bean with a transaction strategy of Mandatory, and no transaction is available
1:a44e725:     protected void assertDelegateInsertFails() throws Exception {
1:70e39b6:         TestBean bean = getBean();
1:bd98451:         int initialRows = counter.countRows();
1:70e39b6: 
1:a44e725:         if (clientTransaction ) {
1:a44e725:             tran.begin();
1:a44e725:         }
1:70e39b6:         try {
1:a44e725:             bean.delegateInsertRow("testWithoutClientTran", 1);
1:70e39b6:             fail("IllegalStateException not thrown");
1:70e39b6:         } catch (IllegalStateException e) {
1:70e39b6:             // Ignore expected
1:a44e725:         }
1:a44e725:         if (clientTransaction ) {
1:a44e725:             tran.commit();
1:70e39b6:         }
1:bd98451:         int finalRows = counter.countRows();
1:70e39b6:         assertEquals("Added rows", 0, finalRows - initialRows);
1:70e39b6:     }
1:70e39b6: 
1:70e39b6:     // Test without client transaction - an exception is thrown because a transaction is mandatory
1:70e39b6:     protected void assertMandatoryTransaction() throws SQLException {
1:70e39b6:           try {
1:bd98451:               getBean().insertRow("testWithoutClientTran", 1, null);
1:70e39b6:               fail("IllegalStateException not thrown");
1:70e39b6:           } catch (IllegalStateException e) {
1:70e39b6:               // Ignore expected
1:70e39b6:           }
1:70e39b6:     }
1:70e39b6:     
1:70e39b6:     protected abstract TestBean getBean();
1:a44e725: 
1:a44e725:     protected void assertDelegateInsert() throws Exception {
1:a44e725:         TestBean bean = getBean();
1:bd98451:         int initialRows = counter.countRows();
1:a44e725:     
1:a44e725:         tran.begin();
1:a44e725:         bean.delegateInsertRow("testWithClientTran", 1);
1:a44e725:         tran.commit();
1:a44e725:     
1:bd98451:         int finalRows = counter.countRows();
1:a44e725:         assertEquals("Added rows", 1, finalRows - initialRows);
1:a44e725:     }
1:74c780f: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.transaction.test.Counter;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Inject
1:     Counter counter;
/////////////////////////////////////////////////////////////////////////
1:                 //debug(),
1:     protected Option debug() {
1:         return vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005");
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         int initialRows = counter.countRows();
1:         bean.insertRow("testWithClientTranAndWithRuntimeException", 1, null);
/////////////////////////////////////////////////////////////////////////
1:         int finalRows = counter.countRows();
/////////////////////////////////////////////////////////////////////////
1:         int initialRows = counter.countRows();
1:         bean.insertRow("testWithClientTranAndWithAppException", 1, null);
/////////////////////////////////////////////////////////////////////////
1:         int finalRows = counter.countRows();
1:         int initialRows = counter.countRows();
1:         bean.insertRow("testWithClientTran", 1, null);
1:         int finalRows = counter.countRows();
1:         int initialRows = counter.countRows();
1:             bean.insertRow("testWithClientTran", 1, null);
/////////////////////////////////////////////////////////////////////////
1:         int finalRows = counter.countRows();
/////////////////////////////////////////////////////////////////////////
1:         int initialRows = counter.countRows();
/////////////////////////////////////////////////////////////////////////
1:         int finalRows = counter.countRows();
1:               getBean().insertRow("testWithoutClientTran", 1, null);
/////////////////////////////////////////////////////////////////////////
1:         int initialRows = counter.countRows();
1:         int finalRows = counter.countRows();
commit:4854ac3
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
/////////////////////////////////////////////////////////////////////////
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:                 mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:                 mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
1:                 
1:                 mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.6_spec").versionAsInProject(),
1:                 mavenBundle("org.apache.geronimo.specs", "geronimo-validation_1.0_spec").versionAsInProject(),
1:                 mavenBundle("org.apache.geronimo.components", "geronimo-connector").versionAsInProject(),
1: 
1:                 mavenBundle("org.apache.derby", "derby").versionAsInProject(),
1:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl").versionAsInProject(),
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
1:      * 
1:      * @throws BundleException
1:      */
1:     public void resolveBundles() throws BundleException {
1:         System.out.println("Checking for bundles");
1:         Bundle[] bundles = bundleContext.getBundles();
1:         for (Bundle bundle : bundles) {
1:             if (bundle.getState() == Bundle.INSTALLED) {
1:                 System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":"
1:                     + bundle.getSymbolicName() + ":" + bundle.getVersion());
1:                 bundle.start();
1:             }
1:         }
1:     }
commit:05c0a80
/////////////////////////////////////////////////////////////////////////
1:                 mavenBundle("javax.interceptor", "javax.interceptor-api").versionAsInProject(),
1:                 mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javax-inject").versionAsInProject(),
1:                 mavenBundle("javax.el", "javax.el-api").versionAsInProject(),
1:                 mavenBundle("javax.enterprise", "cdi-api").versionAsInProject(),
1:                 mavenBundle("javax.transaction", "javax.transaction-api").versionAsInProject()
commit:835913e
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.felix", "org.apache.felix.coordinator"),
commit:a44e725
/////////////////////////////////////////////////////////////////////////
1:     protected void assertInsertFails() throws Exception {
1:         if (clientTransaction ) {
1:             tran.begin();
1:         }
1:         if (clientTransaction ) {
1:             tran.commit();
1:         }
1:     protected void assertDelegateInsertFails() throws Exception {
1:         if (clientTransaction ) {
1:             tran.begin();
1:         }
1:             bean.delegateInsertRow("testWithoutClientTran", 1);
1:         if (clientTransaction ) {
1:             tran.commit();
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void assertDelegateInsert() throws Exception {
1:         TestBean bean = getBean();
0:         int initialRows = bean.countRows();
1:     
1:         tran.begin();
1:         bean.delegateInsertRow("testWithClientTran", 1);
1:         tran.commit();
1:     
0:         int finalRows = bean.countRows();
1:         assertEquals("Added rows", 1, finalRows - initialRows);
1:     }
commit:9d55bb4
/////////////////////////////////////////////////////////////////////////
commit:70e39b6
/////////////////////////////////////////////////////////////////////////
0: import static junit.framework.Assert.assertEquals;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLException;
1: 
1: import javax.transaction.RollbackException;
0: import junit.framework.Assert;
1: 
1: import org.apache.aries.transaction.test.TestBean;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @ExamReactorStrategy(PerClass.class)
/////////////////////////////////////////////////////////////////////////
1:     protected boolean clientTransaction = true;
1: 
/////////////////////////////////////////////////////////////////////////
1:     // Test with client transaction and runtime exception - the user transaction is rolled back
1:     protected void assertInsertWithRuntimeExceptionRolledBack() throws Exception {
1:         TestBean bean = getBean();
0:         int initialRows = bean.countRows();
1: 
1:         if (clientTransaction) {
1:             tran.begin();
1:         }
0:         bean.insertRow("testWithClientTranAndWithRuntimeException", 1);
1:         try {
1:             bean.insertRow("testWithClientTranAndWithRuntimeException", 2, new RuntimeException("Dummy exception"));
1:         } catch (RuntimeException e) {
1:             Assert.assertEquals("Dummy exception", e.getMessage());
1:         }
1:         if (clientTransaction) {
1:             try {
1:                 tran.commit();
1:                 fail("RollbackException not thrown");
1:             } catch (RollbackException e) {
1:                 // Ignore expected
1:             }
1:         }
1: 
0:         int finalRows = bean.countRows();
1:         // In case of client transaction both are rolled back
1:         // In case of container transaction only second insert is rolled back
1:         assertEquals("Added rows", clientTransaction ? 0 : 1, finalRows - initialRows);
1:     }
1: 
1:     protected void assertInsertWithAppExceptionCommitted() throws Exception {
1:         TestBean bean = getBean();
0:         int initialRows = bean.countRows();
1:         if (clientTransaction) {
1:             tran.begin();
1:         }
0:         bean.insertRow("testWithClientTranAndWithAppException", 1);
1:         try {
1:             bean.insertRow("testWithClientTranAndWithAppException", 2, new SQLException("Dummy exception"));
1:         } catch (SQLException e) {
1:             Assert.assertEquals("Dummy exception", e.getMessage());
1:         }
1:         if (clientTransaction) {
1:             tran.commit();
1:         }
1: 
0:         int finalRows = bean.countRows();
1:         assertEquals("Added rows", 2, finalRows - initialRows);
1:     }
1: 
1:     protected void assertInsertSuccesful() throws Exception {
1:         TestBean bean = getBean();
0:         int initialRows = bean.countRows();
1: 
1:         if (clientTransaction ) {
1:             tran.begin();
1:         }
0:         bean.insertRow("testWithClientTran", 1);
1:         if (clientTransaction ) {
1:             tran.commit();
1:         }
0:         int finalRows = bean.countRows();
1:         assertEquals("Added rows", 1, finalRows - initialRows);
1:     }
1: 
0:     // Test with client transaction - an exception is thrown because transactions are not allowed
0:     protected void assertInsertWithTranFails() throws Exception {
1:         TestBean bean = getBean();
0:         int initialRows = bean.countRows();
1:         tran.begin();
1:         try {
0:             bean.insertRow("testWithClientTran", 1);
1:             fail("IllegalStateException not thrown");
1:         } catch (IllegalStateException e) {
1:             // Ignore Expected
1:         }
1:         tran.commit();
0:         int finalRows = bean.countRows();
1:         assertEquals("Added rows", 0, finalRows - initialRows);
1:     }
1:     
1:     // Test without client transaction - the insert fails because the bean delegates to another
1:     // bean with a transaction strategy of Mandatory, and no transaction is available
0:     protected void assertDelegatedInsertWithoutTranFails() throws SQLException {
1:         TestBean bean = getBean();
0:         int initialRows = bean.countRows();
1: 
1:         try {
0:             bean.insertRow("testWithoutClientTran", 1, true);
1:             fail("IllegalStateException not thrown");
1:         } catch (IllegalStateException e) {
1:             // Ignore expected
1:         }
1: 
0:         int finalRows = bean.countRows();
1:         assertEquals("Added rows", 0, finalRows - initialRows);
1:     }
1: 
1:     // Test without client transaction - an exception is thrown because a transaction is mandatory
1:     protected void assertMandatoryTransaction() throws SQLException {
1:           try {
0:               getBean().insertRow("testWithoutClientTran", 1);
1:               fail("IllegalStateException not thrown");
1:           } catch (IllegalStateException e) {
1:               // Ignore expected
1:           }
1:     }
1:     
1:     protected abstract TestBean getBean();
commit:febc5c2
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
1: import javax.transaction.UserTransaction;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1: public abstract class AbstractIntegrationTest {
1:     @Inject
1:     BundleContext bundleContext;
1:     
1:     @Inject
1:     UserTransaction tran;
1: 
1:     public Option baseOptions() {
/////////////////////////////////////////////////////////////////////////
1:                 baseOptions(),
1:                     .value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
/////////////////////////////////////////////////////////////////////////
1:     private Option jta12Bundles() {
1:             return CoreOptions.composite(
1:             );
1:     }
1: 
commit:74c780f
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.CoreOptions;
/////////////////////////////////////////////////////////////////////////
1:                 jta12Bundles(),
/////////////////////////////////////////////////////////////////////////
1: 
0: 	private Option jta12Bundles() {
0: 		return CoreOptions.composite(
0:                 mavenBundle("javax.interceptor", "javax.interceptor-api", "1.2"),
0:                 mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javax-inject", "1_2"),
0:                 mavenBundle("javax.el", "javax.el-api", "3.0.0"),
0:                 mavenBundle("javax.enterprise", "cdi-api", "1.2"),
0:                 mavenBundle("javax.transaction", "javax.transaction-api", "1.2")
1: 				);
1: 	}
commit:95f5130
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("javax.interceptor", "javax.interceptor-api", "1.2"),
0:                 mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javax-inject", "1_2"),
0:                 mavenBundle("javax.el", "javax.el-api", "3.0.0"),
0:                 mavenBundle("javax.enterprise", "cdi-api", "1.2"),
0:                 mavenBundle("javax.transaction", "javax.transaction-api", "1.2"),
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:39df0c9
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.6_spec"),
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-validation_1.0_spec"),
0:                 mavenBundle("org.apache.geronimo.components", "geronimo-connector"),
commit:cab5d91
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:                 mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec"),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api"),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core"),
0:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api"),
0:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl"),
1:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.jdbc").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.testbundle").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.testds").versionAsInProject(),
commit:f39248a
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
/////////////////////////////////////////////////////////////////////////
1:                 systemProperty("org.apache.aries.proxy.weaving.enabled").value("none"),
0:                 //mavenBundle("org.ow2.asm", "asm-all"),
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.jdbc"),
commit:a3dbb09
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.*;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
/////////////////////////////////////////////////////////////////////////
0:                 bootDelegationPackages("javax.transaction", "javax.transaction.*"),
0:                 vmOption("-Dorg.osgi.framework.system.packages=javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers,javax.transaction;partial=true;mandatory:=partial,javax.transaction.xa;partial=true;mandatory:=partial"),
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager"),
/////////////////////////////////////////////////////////////////////////
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:5d2c3a1
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
0: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
0: import org.ops4j.pax.exam.spi.reactors.PerSuite;
1: @RunWith(PaxExam.class)
0: @ExamReactorStrategy(PerSuite.class)
1: 	
0: 	public Option baseOptions() {
1:         String localRepo = System.getProperty("maven.repo.local");
1:         if (localRepo == null) {
1:             localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:         }
1:         return composite(
1:                 junitBundles(),
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:                 when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
0:          );
1:     }
1: 
1:     @Configuration
1:     public Option[] configuration() {
1:         return new Option[] {
0:         		baseOptions(),
1:                 frameworkProperty("org.osgi.framework.system.packages")
0:                 	.value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
0:         		mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
/////////////////////////////////////////////////////////////////////////
1:         };
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:9d6a9cc
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
author:Emily Jiang
-------------------------------------------------------------------------------
commit:b8839d6
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.ow2.asm", "asm-all"),
0:                // mavenBundle("asm", "asm-all"),
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:d4c2b25
/////////////////////////////////////////////////////////////////////////
0:                 equinox().version("3.7.0.v20110613"));
commit:f2e7057
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
0:                 PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0:                 equinox().version("3.5.0"),
0:                 equinox().version("3.7.0.v20110304"));
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
0: public abstract class AbstractIntegrationTest extends org.apache.aries.itest.AbstractIntegrationTest {
0:         return testOptions(
/////////////////////////////////////////////////////////////////////////
commit:5c15102
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.itests;
0: 
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
0: import static org.ops4j.pax.exam.OptionUtils.combine;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.modifyBundle;
0: 
0: import java.io.IOException;
0: import java.io.InputStream;
0: 
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Customizer;
0: import org.ops4j.pax.exam.Inject;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.options.VMOption;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.ops4j.pax.exam.options.BootClasspathLibraryOption;
0: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
0: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
0: import org.ops4j.pax.exam.options.TimeoutOption;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.Constants;
0: import org.osgi.framework.Filter;
0: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.framework.Version;
0: import org.osgi.util.tracker.ServiceTracker;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public abstract class AbstractIntegrationTest {
0: 
0:     public static final long DEFAULT_TIMEOUT = 30000;
0:     
0:     @Inject
0:     protected BundleContext bundleContext;
0: 
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:                 customizer(),
0:                 bootClasspathLibrary("org.apache.geronimo.specs", "geronimo-jta_1.1_spec"),
0: 
0:                 // Log
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0: 
1:                 // this is how you set the default log level when using pax
1:                 // logging (logProfile)
0:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
1:                 // Bundles
0:                 mavenBundle("org.osgi", "org.osgi.compendium"),
0:                 mavenBundle("asm", "asm-all"),
0:                 mavenBundle("org.apache.derby", "derby"),
0:                 mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager"),
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint"),
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.testbundle"),
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.testds"),
0: 
0:                 //new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
1:                 //new TimeoutOption( 0 ),
0: 
0:                 equinox().version("3.5.0"));
0:         options = updateOptions(options);
0:         return options;
1:     }
0: 
0:     public static Customizer customizer() {
0:         return new Customizer()
0:         {
0:             @Override
0:             public InputStream customizeTestProbe( InputStream testProbe )
0:             throws IOException
0:             {
0:                 return modifyBundle( testProbe )
0:                 .set( Constants.IMPORT_PACKAGE, "javax.transaction;version=\"[0.0.0,1.1.0)\"" )
0:                 .build();
1:             }
0:         };
1:     }
0: 
0:     protected static BootClasspathLibraryOption bootClasspathLibrary(String groupId, String artifactId) {
0:           MavenArtifactUrlReference maur =
0:               new MavenArtifactUrlReference().groupId(groupId).artifactId(artifactId)
0:               .versionAsInProject();
0:           return new BootClasspathLibraryOption(maur);
1:       }
0: 
0:     protected static MavenArtifactProvisionOption mavenBundle(String groupId, String artifactId) {
0:         return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId)
0:             .versionAsInProject();
1:       }
0: 
0:     protected Bundle getBundle(String symbolicName) {
0:         return getBundle(symbolicName, null);
1:       }
0: 
0:     protected Bundle getBundle(String bundleSymbolicName, String version) {
0:         Bundle result = null;
0:         for (Bundle b : bundleContext.getBundles()) {
0:           if (b.getSymbolicName().equals(bundleSymbolicName)) {
0:             if (version == null
0:                 || b.getVersion().equals(Version.parseVersion(version))) {
0:               result = b;
0:               break;
1:             }
1:           }
1:         }
0:         return result;
1:       }
0: 
0:     protected static Option[] updateOptions(Option[] options) {
0:         // We need to add pax-exam-junit here when running with the ibm
0:         // jdk to avoid the following exception during the test run:
0:         // ClassNotFoundException: org.ops4j.pax.exam.junit.Configuration
0:         if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
0:           Option[] ibmOptions = options(wrappedBundle(mavenBundle(
0:               "org.ops4j.pax.exam", "pax-exam-junit")));
0:           options = combine(ibmOptions, options);
1:         }
0:     
0:         return options;
1:       }
0: 
0:     protected <T> T getOsgiService(Class<T> type, long timeout) {
0:         return getOsgiService(type, null, timeout);
1:       }
0: 
0:     protected <T> T getOsgiService(Class<T> type) {
0:         return getOsgiService(type, null, DEFAULT_TIMEOUT);
1:       }
0: 
0:     protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {
0:         return getOsgiService(null, type, filter, timeout);
1:       }
0: 
0:     protected <T> T getOsgiService(BundleContext bc, Class<T> type, String filter,
0:             long timeout) {
0:                 ServiceTracker tracker = null;
0:                 try {
0:                   String flt;
0:                   if (filter != null) {
0:                     if (filter.startsWith("(")) {
0:                       flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")"
0:                           + filter + ")";
0:                     } else {
0:                       flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")("
0:                           + filter + "))";
1:                     }
0:                   } else {
0:                     flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:                   }
0:                   Filter osgiFilter = FrameworkUtil.createFilter(flt);
0:                   tracker = new ServiceTracker(bc == null ? bundleContext : bc, osgiFilter,
0:                       null);
0:                   tracker.open();
0:                   // Note that the tracker is not closed to keep the reference
0:                   // This is buggy, has the service reference may change i think
0:                   Object svc = type.cast(tracker.waitForService(timeout));
0:                   if (svc == null) {
0:                     throw new RuntimeException("Gave up waiting for service " + flt);
1:                   }
0:                   return type.cast(svc);
0:                 } catch (InvalidSyntaxException e) {
0:                   throw new IllegalArgumentException("Invalid filter", e);
0:                 } catch (InterruptedException e) {
0:                   throw new RuntimeException(e);
1:                 }
1:               }
0: 
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:                 mavenBundle("asm", "asm-all"),
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:79902ae
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.options.VMOption;
0: import org.ops4j.pax.exam.options.TimeoutOption;
0: 
/////////////////////////////////////////////////////////////////////////
0:     public static final long DEFAULT_TIMEOUT = 60000;
0: //    public static final long DEFAULT_TIMEOUT = 0;
author:Lin Sun
-------------------------------------------------------------------------------
commit:92e371f
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.bootDelegationPackages;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
/////////////////////////////////////////////////////////////////////////
commit:e5f3248
/////////////////////////////////////////////////////////////////////////
0:     public void tearDown() throws Exception {
0:         closeServiceTrackers();
0:     }
0:     
0:     private void closeServiceTrackers() {
/////////////////////////////////////////////////////////////////////////
0:     protected <T> T getOsgiService(BundleContext bc, Class<T> type,
0:             String filter, long timeout) {
0:         // close out all service trackers
0:         closeServiceTrackers();
0: 
0:         ServiceTracker tracker = null;
0:         try {
0:             String flt;
0:             if (filter != null) {
0:                 if (filter.startsWith("(")) {
0:                     flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName()
0:                             + ")" + filter + ")";
0:                 } else {
0:                     flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName()
0:                             + ")(" + filter + "))";
0:             } else {
0:                 flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
0:             }
0:             Filter osgiFilter = FrameworkUtil.createFilter(flt);
0:             tracker = new ServiceTracker(bc == null ? bundleContext : bc,
0:                     osgiFilter, null);
0:             tracker.open();
0: 
0:             // add tracker to the list of trackers we close at tear down
0:             srs.add(tracker);
0: 
0:             Object svc = type.cast(tracker.waitForService(timeout));
0:             if (svc == null) {
0:                 throw new RuntimeException("Gave up waiting for service " + flt);
0:             }
0:             return type.cast(svc);
0:         } catch (InvalidSyntaxException e) {
0:             throw new IllegalArgumentException("Invalid filter", e);
0:         } catch (InterruptedException e) {
0:             throw new RuntimeException(e);
0:         }
0:     }
commit:9a14bff
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
0: import org.junit.After;
0: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
0:     private List<ServiceTracker> srs;
0: 
0:     @Before
0:     public void setUp() {
0:         srs = new ArrayList<ServiceTracker>();
0:     }
0:     
0:     @After
0:     public void tearDown() throws Exception{
0:         for (ServiceTracker st : srs) {
0:             if (st != null) {
0:                 st.close();
0:             }  
0:         }
0:     }
0:     
/////////////////////////////////////////////////////////////////////////
0:                   
0:                   // add tracker to the list of trackers we close at tear down
0:                   srs.add(tracker);
0:                   
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:c87b16f
/////////////////////////////////////////////////////////////////////////
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager"),
0:                 mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.wrappers"),
============================================================================