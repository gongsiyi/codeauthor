1:29c4662: /*
1:29c4662:  * Licensed to the Apache Software Foundation (ASF) under one
1:29c4662:  * or more contributor license agreements.  See the NOTICE file
1:29c4662:  * distributed with this work for additional information
1:29c4662:  * regarding copyright ownership.  The ASF licenses this file
1:29c4662:  * to you under the Apache License, Version 2.0 (the
1:29c4662:  * "License"); you may not use this file except in compliance
1:29c4662:  * with the License.  You may obtain a copy of the License at
1:29c4662:  *
1:29c4662:  *   http://www.apache.org/licenses/LICENSE-2.0
1:29c4662:  *
1:29c4662:  * Unless required by applicable law or agreed to in writing,
1:29c4662:  * software distributed under the License is distributed on an
1:29c4662:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:29c4662:  * KIND, either express or implied.  See the License for the
1:29c4662:  * specific language governing permissions and limitations
1:29c4662:  * under the License.
1:29c4662:  */
1:29c4662: package org.apache.aries.jndi.url;
1:29c4662: 
1:29c4662: import javax.naming.InvalidNameException;
1:29c4662: import javax.naming.Name;
1:29c4662: import javax.naming.NameParser;
1:29c4662: import javax.naming.NamingException;
1:29c4662: 
1:29c4662: /**
1:29c4662:  * A parser for the aries namespace
1:29c4662:  */
1:29c4662: public final class BlueprintNameParser implements NameParser
1:29c4662: {
1:29c4662:   private static final String BLUEPRINT_SCHEME = "blueprint";
1:29c4662:   private static final String COMP_PATH = "comp";
1:29c4662:   
1:29c4662:   @Override
1:29c4662:   public Name parse(String name) throws NamingException
1:29c4662:   {
1:29c4662:     BlueprintName result = new BlueprintName(name);
1:29c4662:     String urlScheme = result.getScheme();
1:29c4662:     String schemePath = result.getSchemePath();
1:29c4662:     
1:29c4662:     if (!BLUEPRINT_SCHEME.equals(urlScheme) || !COMP_PATH.equals(schemePath)) {
1:29c4662:       throw new InvalidNameException(name);
1:29c4662:     }
1:29c4662:     return result;
1:29c4662:   }
1:29c4662: 
1:29c4662:   @Override
1:29c4662:   public boolean equals(Object other)
1:29c4662:   {
1:29c4662:     return other instanceof OsgiNameParser;
1:29c4662:   }
1:29c4662:   
1:29c4662:   @Override
1:29c4662:   public int hashCode()
1:29c4662:   {
1:29c4662:     return 100004;
1:29c4662:   }
1:29c4662: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:29c4662
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi.url;
1: 
1: import javax.naming.InvalidNameException;
1: import javax.naming.Name;
1: import javax.naming.NameParser;
1: import javax.naming.NamingException;
1: 
1: /**
1:  * A parser for the aries namespace
1:  */
1: public final class BlueprintNameParser implements NameParser
1: {
1:   private static final String BLUEPRINT_SCHEME = "blueprint";
1:   private static final String COMP_PATH = "comp";
1:   
1:   @Override
1:   public Name parse(String name) throws NamingException
1:   {
1:     BlueprintName result = new BlueprintName(name);
1:     String urlScheme = result.getScheme();
1:     String schemePath = result.getSchemePath();
1:     
1:     if (!BLUEPRINT_SCHEME.equals(urlScheme) || !COMP_PATH.equals(schemePath)) {
1:       throw new InvalidNameException(name);
1:     }
1:     return result;
1:   }
1: 
1:   @Override
1:   public boolean equals(Object other)
1:   {
1:     return other instanceof OsgiNameParser;
1:   }
1:   
1:   @Override
1:   public int hashCode()
1:   {
1:     return 100004;
1:   }
1: }
============================================================================