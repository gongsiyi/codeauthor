1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.HashSet;
1:fdf3952: import java.util.List;
1:fdf3952: import java.util.Set;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.PackageData;
1:fdf3952: import org.apache.aries.jmx.util.FrameworkUtils;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.Version;
1:fdf3952: import org.osgi.jmx.framework.PackageStateMBean;
1:fdf3952: import org.osgi.service.packageadmin.ExportedPackage;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>PackageState</tt> represents implementation of PackageStateMBean.
1:fdf3952:  * </p>
1:fdf3952:  * 
1:fdf3952:  * @see PackageStateMBean
1:fdf3952:  * 
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class PackageState implements PackageStateMBean {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * {@link PackageAdmin} service reference.
1:fdf3952:      */
1:fdf3952:     private PackageAdmin packageAdmin;
1:fdf3952:     private BundleContext context;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new PackagesState MBean.
1:fdf3952:      * 
1:fdf3952:      * @param context bundle context.
1:fdf3952:      * @param packageAdmin {@link PackageAdmin} service reference.
1:fdf3952:      */
1:fdf3952:     public PackageState(BundleContext context, PackageAdmin packageAdmin) {
1:fdf3952:         this.context = context;
1:fdf3952:         this.packageAdmin = packageAdmin;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.PackageStateMBean#getExportingBundles(String, String)
1:fdf3952:      */
1:fdf3952:     public long[] getExportingBundles(String packageName, String version) throws IOException {
1:fdf3952:         if (packageName == null || packageName.length() < 1) {
1:fdf3952:             throw new IOException("Package name cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
1:fdf3952:         if (exportedPackages != null) {
1:fdf3952:             Version ver = Version.parseVersion(version);
1:fdf3952:             List<Bundle> exportingBundles = new ArrayList<Bundle>();
1:fdf3952:             for (ExportedPackage exportedPackage : exportedPackages) {
1:fdf3952:                 if (exportedPackage.getVersion().equals(ver)) {
1:fdf3952:                     Bundle bundle  = exportedPackage.getExportingBundle();
1:fdf3952:                     exportingBundles.add(bundle);
1:fdf3952:                 }
1:fdf3952:             }
1:fdf3952:             
1:fdf3952:             return FrameworkUtils.getBundleIds(exportingBundles);
1:fdf3952:         }
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.PackageStateMBean#getImportingBundles(String, String, long)
1:fdf3952:      */
1:fdf3952:     public long[] getImportingBundles(String packageName, String version, long exportingBundle) throws IOException {
1:fdf3952:         if (packageName == null || packageName.length() < 1) {
1:fdf3952:             throw new IOException("Package name cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
1:fdf3952:         if (exportedPackages != null) {
1:fdf3952:             Version ver = Version.parseVersion(version);
1:fdf3952:             for (ExportedPackage exportedPackage : exportedPackages) {
1:fdf3952:                 if (exportedPackage.getVersion().equals(ver)
1:fdf3952:                         && exportedPackage.getExportingBundle().getBundleId() == exportingBundle) {
1:fdf3952:                     Bundle[] bundles = exportedPackage.getImportingBundles();
1:fdf3952:                     if (bundles != null) {
1:fdf3952:                         return FrameworkUtils.getBundleIds(bundles);
1:fdf3952:                     }
1:fdf3952:                 }
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.PackageStateMBean#isRemovalPending(String, String, long)
1:fdf3952:      */
1:fdf3952:     public boolean isRemovalPending(String packageName, String version, long exportingBundle) throws IOException {
1:fdf3952:         if (packageName == null || packageName.length() < 1) {
1:fdf3952:             throw new IOException("Package name cannot be null or empty");
1:fdf3952:         }
1:fdf3952:         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
1:fdf3952:         if (exportedPackages != null) {
1:fdf3952:             Version ver = Version.parseVersion(version);
1:fdf3952:             for (ExportedPackage exportedPackage : exportedPackages) {
1:fdf3952:                 if (exportedPackage.getVersion().equals(ver)
1:fdf3952:                         && exportedPackage.getExportingBundle().getBundleId() == exportingBundle
1:fdf3952:                         && exportedPackage.isRemovalPending()) {
1:fdf3952:                     return true;
1:fdf3952:                 }
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return false;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.PackageStateMBean#listPackages()
1:fdf3952:      */
1:fdf3952:     public TabularData listPackages() throws IOException {
1:fdf3952:         Set<PackageData> packages = new HashSet<PackageData>();
1:fdf3952:         for (Bundle bundle : context.getBundles()) {
1:fdf3952:             ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(bundle);
1:fdf3952:             if (exportedPackages != null) {
1:fdf3952:                 for (ExportedPackage exportedPackage : exportedPackages) {
1:fdf3952:                     packages.add(new PackageData(exportedPackage));
1:fdf3952:                 }
1:fdf3952:             }
1:fdf3952: 
1:fdf3952:         }
1:fdf3952:         return PackageData.tableFrom(packages);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.aries.jmx.codec.PackageData;
1: import org.apache.aries.jmx.util.FrameworkUtils;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Version;
1: import org.osgi.jmx.framework.PackageStateMBean;
1: import org.osgi.service.packageadmin.ExportedPackage;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: 
1: /**
1:  * <p>
1:  * <tt>PackageState</tt> represents implementation of PackageStateMBean.
1:  * </p>
1:  * 
1:  * @see PackageStateMBean
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class PackageState implements PackageStateMBean {
1: 
1:     /**
1:      * {@link PackageAdmin} service reference.
1:      */
1:     private PackageAdmin packageAdmin;
1:     private BundleContext context;
1: 
1:     /**
1:      * Constructs new PackagesState MBean.
1:      * 
1:      * @param context bundle context.
1:      * @param packageAdmin {@link PackageAdmin} service reference.
1:      */
1:     public PackageState(BundleContext context, PackageAdmin packageAdmin) {
1:         this.context = context;
1:         this.packageAdmin = packageAdmin;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.PackageStateMBean#getExportingBundles(String, String)
1:      */
1:     public long[] getExportingBundles(String packageName, String version) throws IOException {
1:         if (packageName == null || packageName.length() < 1) {
1:             throw new IOException("Package name cannot be null or empty");
1:         }
1:         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
1:         if (exportedPackages != null) {
1:             Version ver = Version.parseVersion(version);
1:             List<Bundle> exportingBundles = new ArrayList<Bundle>();
1:             for (ExportedPackage exportedPackage : exportedPackages) {
1:                 if (exportedPackage.getVersion().equals(ver)) {
1:                     Bundle bundle  = exportedPackage.getExportingBundle();
1:                     exportingBundles.add(bundle);
1:                 }
1:             }
1:             
1:             return FrameworkUtils.getBundleIds(exportingBundles);
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.PackageStateMBean#getImportingBundles(String, String, long)
1:      */
1:     public long[] getImportingBundles(String packageName, String version, long exportingBundle) throws IOException {
1:         if (packageName == null || packageName.length() < 1) {
1:             throw new IOException("Package name cannot be null or empty");
1:         }
1:         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
1:         if (exportedPackages != null) {
1:             Version ver = Version.parseVersion(version);
1:             for (ExportedPackage exportedPackage : exportedPackages) {
1:                 if (exportedPackage.getVersion().equals(ver)
1:                         && exportedPackage.getExportingBundle().getBundleId() == exportingBundle) {
1:                     Bundle[] bundles = exportedPackage.getImportingBundles();
1:                     if (bundles != null) {
1:                         return FrameworkUtils.getBundleIds(bundles);
1:                     }
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.PackageStateMBean#isRemovalPending(String, String, long)
1:      */
1:     public boolean isRemovalPending(String packageName, String version, long exportingBundle) throws IOException {
1:         if (packageName == null || packageName.length() < 1) {
1:             throw new IOException("Package name cannot be null or empty");
1:         }
1:         ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(packageName);
1:         if (exportedPackages != null) {
1:             Version ver = Version.parseVersion(version);
1:             for (ExportedPackage exportedPackage : exportedPackages) {
1:                 if (exportedPackage.getVersion().equals(ver)
1:                         && exportedPackage.getExportingBundle().getBundleId() == exportingBundle
1:                         && exportedPackage.isRemovalPending()) {
1:                     return true;
1:                 }
1:             }
1:         }
1:         return false;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.PackageStateMBean#listPackages()
1:      */
1:     public TabularData listPackages() throws IOException {
1:         Set<PackageData> packages = new HashSet<PackageData>();
1:         for (Bundle bundle : context.getBundles()) {
1:             ExportedPackage[] exportedPackages = packageAdmin.getExportedPackages(bundle);
1:             if (exportedPackages != null) {
1:                 for (ExportedPackage exportedPackage : exportedPackages) {
1:                     packages.add(new PackageData(exportedPackage));
1:                 }
1:             }
1: 
1:         }
1:         return PackageData.tableFrom(packages);
1:     }
1: 
1: }
============================================================================