1:46cfc09: /**
1:46cfc09:  * Licensed to the Apache Software Foundation (ASF) under one
1:46cfc09:  * or more contributor license agreements.  See the NOTICE file
1:46cfc09:  * distributed with this work for additional information
1:46cfc09:  * regarding copyright ownership.  The ASF licenses this file
1:46cfc09:  * to you under the Apache License, Version 2.0 (the
1:46cfc09:  * "License"); you may not use this file except in compliance
1:46cfc09:  * with the License.  You may obtain a copy of the License at
1:c201f83:  * <p/>
1:c201f83:  * http://www.apache.org/licenses/LICENSE-2.0
1:c201f83:  * <p/>
1:46cfc09:  * Unless required by applicable law or agreed to in writing,
1:46cfc09:  * software distributed under the License is distributed on an
1:46cfc09:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:46cfc09:  * KIND, either express or implied.  See the License for the
1:46cfc09:  * specific language governing permissions and limitations
1:46cfc09:  * under the License.
1:46cfc09:  */
1:46cfc09: package org.apache.aries.blueprint.plugin;
3:46cfc09: 
1:668a9d9: import org.apache.xbean.finder.ClassFinder;
1:668a9d9: 
1:46cfc09: import java.lang.annotation.Annotation;
1:46cfc09: import java.util.Collection;
1:46cfc09: import java.util.HashSet;
1:46cfc09: import java.util.Set;
1:46cfc09: 
1:46cfc09: public class FilteredClassFinder {
1:46cfc09: 
1:46cfc09:     @SuppressWarnings("unchecked")
1:46cfc09:     public static Set<Class<?>> findClasses(ClassFinder finder, Collection<String> packageNames) {
1:c201f83:         return findClasses(finder, packageNames, Extensions.beanMarkingAnnotationClasses.toArray(new Class[Extensions.beanMarkingAnnotationClasses.size()]));
1:46cfc09:     }
1:46cfc09: 
1:46cfc09:     public static Set<Class<?>> findClasses(ClassFinder finder, Collection<String> packageNames, Class<? extends Annotation>[] annotations) {
1:46cfc09:         Set<Class<?>> rawClasses = new HashSet<Class<?>>();
1:46cfc09:         for (Class<? extends Annotation> annotation : annotations) {
1:46cfc09:             rawClasses.addAll(finder.findAnnotatedClasses(annotation));
1:46cfc09:         }
1:46cfc09:         return filterByBasePackages(rawClasses, packageNames);
1:46cfc09:     }
1:46cfc09:     
1:46cfc09:     private static Set<Class<?>> filterByBasePackages(Set<Class<?>> rawClasses, Collection<String> packageNames) {
1:46cfc09:         Set<Class<?>> filteredClasses = new HashSet<Class<?>>();
1:46cfc09:         for (Class<?> clazz : rawClasses) {
1:46cfc09:             for (String packageName : packageNames) {
1:46cfc09:                 if (clazz.getPackage().getName().startsWith(packageName)) {
1:46cfc09:                     filteredClasses.add(clazz);
1:46cfc09:                 }
1:46cfc09:             }
1:46cfc09:         }
1:46cfc09:         return filteredClasses;
1:46cfc09:     }
1:46cfc09: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:668a9d9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.xbean.finder.ClassFinder;
0: import org.springframework.stereotype.Component;
1: 
0: import javax.inject.Named;
0: import javax.inject.Singleton;
/////////////////////////////////////////////////////////////////////////
commit:f36cef0
/////////////////////////////////////////////////////////////////////////
0: import javax.inject.Named;
/////////////////////////////////////////////////////////////////////////
0:         return findClasses(finder, packageNames, new Class[]{ Singleton.class, Component.class, Named.class});
commit:46cfc09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin;
1: 
1: import java.lang.annotation.Annotation;
1: import java.util.Collection;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
0: import javax.inject.Singleton;
1: 
0: import org.apache.xbean.finder.ClassFinder;
0: import org.springframework.stereotype.Component;
1: 
1: public class FilteredClassFinder {
1:     
1:     @SuppressWarnings("unchecked")
1:     public static Set<Class<?>> findClasses(ClassFinder finder, Collection<String> packageNames) {
0:         return findClasses(finder, packageNames, new Class[]{Singleton.class, Component.class});
1:     }
1: 
1:     public static Set<Class<?>> findClasses(ClassFinder finder, Collection<String> packageNames, Class<? extends Annotation>[] annotations) {
1:         Set<Class<?>> rawClasses = new HashSet<Class<?>>();
1:         for (Class<? extends Annotation> annotation : annotations) {
1:             rawClasses.addAll(finder.findAnnotatedClasses(annotation));
1:         }
1:         return filterByBasePackages(rawClasses, packageNames);
1:     }
1:     
1:     private static Set<Class<?>> filterByBasePackages(Set<Class<?>> rawClasses, Collection<String> packageNames) {
1:         Set<Class<?>> filteredClasses = new HashSet<Class<?>>();
1:         for (Class<?> clazz : rawClasses) {
1:             for (String packageName : packageNames) {
1:                 if (clazz.getPackage().getName().startsWith(packageName)) {
1:                     filteredClasses.add(clazz);
0:                     continue;
1:                 }
1:             }
1:         }
0:         //System.out.println("Raw: " + rawClasses);
0:         //System.out.println("Filtered: " + beanClasses);
1:         return filteredClasses;
1:     }
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
0: 
1:         return findClasses(finder, packageNames, Extensions.beanMarkingAnnotationClasses.toArray(new Class[Extensions.beanMarkingAnnotationClasses.size()]));
============================================================================