1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
2:67ef08f: 
1:67ef08f: 
1:69d4847: import static org.apache.aries.util.filesystem.IDirectoryFinder.IDIR_SCHEME;
1:67ef08f: 
1:27f76f6: import java.io.File;
1:67ef08f: import java.io.IOException;
1:67ef08f: import java.net.MalformedURLException;
1:69d4847: import java.net.URI;
1:67ef08f: import java.net.URISyntaxException;
1:67ef08f: import java.net.URL;
1:69d4847: import java.util.Collection;
1:67ef08f: 
1:27f76f6: import org.apache.aries.util.filesystem.FileSystem;
1:27f76f6: import org.apache.aries.util.filesystem.IDirectory;
1:69d4847: import org.apache.aries.util.filesystem.IDirectoryFinder;
1:67ef08f: import org.osgi.framework.Version;
1:67ef08f: 
1:67ef08f: public class Location {
1:69d4847:   enum LocationType {
1:6abbe8d:     SUBSYSTEM("subsystem", "subsystem"), IDIRFINDER(IDIR_SCHEME, IDIR_SCHEME), URL("url", null), UNKNOWN("unknown", null);
1:69d4847:     final String toString;
1:69d4847:     final String scheme;
1:69d4847:     LocationType(String toString, String scheme) {this.toString = toString; this.scheme = scheme;}
1:186eb2a:     @Override
1:69d4847:     public String toString() {return toString;}
1:69d4847:   };
1:186eb2a: 
1:69d4847:   private final LocationType type;
1:67ef08f:   private final String value;
1:69d4847:   private final URI uri;
1:67ef08f:   private final URL url;
1:69d4847:   private final SubsystemUri subsystemUri;
1:bce0ce7:   private final IllegalArgumentException subsystemUriException;
1:67ef08f: 
1:69d4847:   /*
1:69d4847:    * type, value, uri are always set to some non-null value, url and
1:69d4847:    * subsystemUri depend on the type.
1:69d4847:    */
1:67ef08f:   public Location(String location) throws MalformedURLException, URISyntaxException {
1:67ef08f:     value = location;
1:186eb2a:     URI locationUri = null;
1:186eb2a:     try {
1:186eb2a:         locationUri = new URI(location);
1:186eb2a:     } catch ( URISyntaxException urise ) {
1:186eb2a:         // ignore
1:186eb2a:     }
1:186eb2a:     if (locationUri == null) {
1:186eb2a:         type = LocationType.UNKNOWN;
1:186eb2a:         url = null;
1:186eb2a:         uri = null;
1:186eb2a:         subsystemUri = null;
1:186eb2a:         subsystemUriException = null;
1:186eb2a: 
1:186eb2a:     } else if (locationUri.isAbsolute()) {  // i.e. looks like scheme:something
1:69d4847:       String scheme = locationUri.getScheme();
1:69d4847:       if (LocationType.SUBSYSTEM.scheme.equals(scheme)) {
1:69d4847:         type = LocationType.SUBSYSTEM;
1:4a4beb2:         SubsystemUri ssUri;
1:bce0ce7:         IllegalArgumentException ssUriException = null;
1:4a4beb2:         try {
1:4a4beb2:           ssUri = new SubsystemUri(location);
1:bce0ce7:         } catch (IllegalArgumentException ex) {
1:4a4beb2:           // In some cases the SubsystemUri can't be parsed by the SubsystemUri parser.
1:4a4beb2:           ssUri = null;
1:bce0ce7:           ssUriException = ex;
1:4a4beb2:         }
1:4a4beb2:         subsystemUri = ssUri;
1:bce0ce7:         subsystemUriException = ssUriException;
1:4a4beb2:         if (subsystemUri != null) {
1:4a4beb2:           url = subsystemUri.getURL(); // subsystem uris may contain a nested url.
1:4a4beb2:           uri = (url==null) ? null : url.toURI();
1:4a4beb2:         } else {
1:4a4beb2:           url = null;
1:4a4beb2:           uri = locationUri;
1:4a4beb2:         }
1:69d4847:       } else if (LocationType.IDIRFINDER.scheme.equals(scheme)) {
1:69d4847:         type = LocationType.IDIRFINDER;
1:6abbe8d:         subsystemUri = null;
1:bce0ce7:         subsystemUriException = null;
1:6abbe8d:         url = null;
1:69d4847:         uri = locationUri;
1:69d4847:       } else {                       // otherwise will only accept a url, (a url
1:186eb2a:         type = LocationType.URL;     // always has a scheme, so fine to have
1:69d4847:         subsystemUri = null;         // this inside the 'if isAbsolute' block).
1:bce0ce7:         subsystemUriException = null;
1:186eb2a:         URL localUrl = null;
1:186eb2a:         try {
1:186eb2a:             localUrl = locationUri.toURL();
1:186eb2a:         } catch ( final MalformedURLException mue) {
1:186eb2a:             // ignore
1:186eb2a:         }
1:186eb2a:         url = localUrl;
1:69d4847:         uri = locationUri;
1:67ef08f:       }
1:69d4847:     } else {
1:6abbe8d:     	type = LocationType.UNKNOWN;
1:69d4847:     	url = null;
1:6abbe8d:     	uri = null;
1:69d4847:     	subsystemUri = null;
1:bce0ce7:     	subsystemUriException = null;
1:67ef08f:     }
7:69d4847:   }
1:186eb2a: 
1:67ef08f:   public String getValue() {
1:67ef08f:     return value;
1:69d4847:   }
1:186eb2a: 
1:67ef08f:   public String getSymbolicName() {
1:bce0ce7:     if (subsystemUriException != null) {
1:bce0ce7:       throw subsystemUriException;
1:bce0ce7:     }
1:4a4beb2:     return (subsystemUri!=null) ? subsystemUri.getSymbolicName() : null;
1:67ef08f:   }
1:186eb2a: 
1:67ef08f:   public Version getVersion() {
1:bce0ce7:     if (subsystemUriException != null) {
1:bce0ce7:       throw subsystemUriException;
1:bce0ce7:     }
1:4a4beb2:     return (subsystemUri!=null) ? subsystemUri.getVersion() : null;
1:67ef08f:   }
1:04f6783: 
1:27f76f6:   public IDirectory open() throws IOException, URISyntaxException {
1:69d4847:     switch (type) {
1:69d4847:       case IDIRFINDER :
1:69d4847:         return retrieveIDirectory();
1:69d4847:       case SUBSYSTEM : // drop through to share 'case url' code
1:69d4847:       case URL :
1:27f76f6:         if ("file".equals(url.getProtocol()))
1:69d4847:           return FileSystem.getFSRoot(new File(uri));
1:225bcae:         else
1:27f76f6:           return FileSystem.getFSRoot(url.openStream());
1:6abbe8d:       case UNKNOWN:
1:6abbe8d:     	  // Only try to create a URL with the location value here. If the
1:6abbe8d:     	  // location was just a string and an InputStream was provided, this
1:6abbe8d:     	  // method will never be called.
1:6abbe8d:     	  return FileSystem.getFSRoot(new URL(value).openStream());
1:69d4847:       default : // should never get here as switch should cover all types
1:186eb2a:         throw new UnsupportedOperationException("cannot open location of type " + type);
1:67ef08f:     }
1:67ef08f:   }
1:186eb2a: 
1:69d4847:   /*
1:186eb2a:    * Although the uri should contain information about the directory finder
1:69d4847:    * service to use to retrieve the directory, there are not expected to be
1:186eb2a:    * many such services in use (typically one), so a simple list of all
1:69d4847:    * directory finders is maintained by the activator and we loop over them in
1:69d4847:    * turn until the desired directory is retrieved or there are no more finders
1:69d4847:    * left to call.
1:69d4847:    */
1:69d4847:   private IDirectory retrieveIDirectory() throws IOException {
1:69d4847:     Collection<IDirectoryFinder> iDirectoryFinders = Activator.getInstance().getIDirectoryFinders();
1:69d4847:     for(IDirectoryFinder iDirectoryFinder : iDirectoryFinders) {
1:69d4847:       IDirectory directory = iDirectoryFinder.retrieveIDirectory(uri);
1:69d4847:       if (directory!=null)
1:69d4847:         return directory;
1:69d4847:     }
1:69d4847:     throw new IOException("cannot find IDirectory corresponding to id " + uri);
1:4a4beb2:   }
1:186eb2a: 
1:04f6783:   @Override
1:04f6783:   public String toString() {
1:04f6783: 	  return value;
1:04f6783:   }
1:67ef08f: 
1:69d4847: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:186eb2a
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
/////////////////////////////////////////////////////////////////////////
1:     URI locationUri = null;
1:     try {
1:         locationUri = new URI(location);
1:     } catch ( URISyntaxException urise ) {
1:         // ignore
1:     }
1:     if (locationUri == null) {
1:         type = LocationType.UNKNOWN;
1:         url = null;
1:         uri = null;
1:         subsystemUri = null;
1:         subsystemUriException = null;
1: 
1:     } else if (locationUri.isAbsolute()) {  // i.e. looks like scheme:something
/////////////////////////////////////////////////////////////////////////
1:         type = LocationType.URL;     // always has a scheme, so fine to have
1:         URL localUrl = null;
1:         try {
1:             localUrl = locationUri.toURL();
1:         } catch ( final MalformedURLException mue) {
1:             // ignore
1:         }
1:         url = localUrl;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         throw new UnsupportedOperationException("cannot open location of type " + type);
1: 
1:    * Although the uri should contain information about the directory finder
1:    * many such services in use (typically one), so a simple list of all
/////////////////////////////////////////////////////////////////////////
1: 
commit:4a4beb2
/////////////////////////////////////////////////////////////////////////
1:         SubsystemUri ssUri;
1:         try {
1:           ssUri = new SubsystemUri(location);
0:         } catch (Exception ex) {
1:           // In some cases the SubsystemUri can't be parsed by the SubsystemUri parser.
1:           ssUri = null;
1:         }
1:         subsystemUri = ssUri;
1:         if (subsystemUri != null) {
1:           url = subsystemUri.getURL(); // subsystem uris may contain a nested url.
1:           uri = (url==null) ? null : url.toURI();
1:         } else {
1:           url = null;
1:           uri = locationUri;
1:         }
/////////////////////////////////////////////////////////////////////////
1:     return (subsystemUri!=null) ? subsystemUri.getSymbolicName() : null;
1:     return (subsystemUri!=null) ? subsystemUri.getVersion() : null;
/////////////////////////////////////////////////////////////////////////
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:bce0ce7
/////////////////////////////////////////////////////////////////////////
1:   private final IllegalArgumentException subsystemUriException;
/////////////////////////////////////////////////////////////////////////
1:         IllegalArgumentException ssUriException = null;
1:         } catch (IllegalArgumentException ex) {
1:           ssUriException = ex;
1:         subsystemUriException = ssUriException;
/////////////////////////////////////////////////////////////////////////
1:         subsystemUriException = null;
1:         subsystemUriException = null;
/////////////////////////////////////////////////////////////////////////
1:     	subsystemUriException = null;
/////////////////////////////////////////////////////////////////////////
1:     if (subsystemUriException != null) {
1:       throw subsystemUriException;
1:     }
1:     if (subsystemUriException != null) {
1:       throw subsystemUriException;
1:     }
author:John Ross
-------------------------------------------------------------------------------
commit:04f6783
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Override
1:   public String toString() {
1: 	  return value;
1:   }
commit:6abbe8d
/////////////////////////////////////////////////////////////////////////
1:     SUBSYSTEM("subsystem", "subsystem"), IDIRFINDER(IDIR_SCHEME, IDIR_SCHEME), URL("url", null), UNKNOWN("unknown", null);
/////////////////////////////////////////////////////////////////////////
1:     	type = LocationType.UNKNOWN;
1:     	url = null;
1:     	uri = null;
1:     	subsystemUri = null;
/////////////////////////////////////////////////////////////////////////
1:       case UNKNOWN:
1:     	  // Only try to create a URL with the location value here. If the
1:     	  // location was just a string and an InputStream was provided, this
1:     	  // method will never be called.
1:     	  return FileSystem.getFSRoot(new URL(value).openStream());
commit:27f76f6
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
/////////////////////////////////////////////////////////////////////////
1: 	public IDirectory open() throws IOException, URISyntaxException {
0: 		URL url = uri == null ? new URL(value) : uri.getURL();
1: 		if ("file".equals(url.getProtocol()))
0: 			return FileSystem.getFSRoot(new File(url.toURI()));
1: 		return FileSystem.getFSRoot(url.openStream());
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:225bcae
/////////////////////////////////////////////////////////////////////////
0: 	private final SubsystemUri uri;
1: 		else
0: 			uri = null;
0: 		return uri == null ? null : uri.getSymbolicName();
/////////////////////////////////////////////////////////////////////////
0: 		return uri == null ? null : uri.getVersion();
0: 		return uri == null ? new URL(value).openStream() : uri.getURL().openStream();
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.io.IOException;
0: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URISyntaxException;
1: import java.net.URL;
1: 
1: import org.osgi.framework.Version;
1: 
1: public class Location {
0: 	private final String symbolicName;
1: 	private final URL url;
1: 	private final String value;
0: 	private final Version version;
1: 	
1: 	public Location(String location) throws MalformedURLException, URISyntaxException {
1: 		value = location;
0: 		SubsystemUri uri = null;
0: 		if (location.startsWith("subsystem://"))
0: 			uri = new SubsystemUri(location);
0: 		symbolicName = uri == null ? null : uri.getSymbolicName();
0: 		url = uri == null ? null : uri.getURL();
0: 		version = uri == null ? null : uri.getVersion();
1: 	}
1: 	
1: 	public String getSymbolicName() {
0: 		return symbolicName;
1: 	}
1: 	
1: 	public String getValue() {
1: 		return value;
1: 	}
1: 	
1: 	public Version getVersion() {
0: 		return version;
1: 	}
1: 	
0: 	public InputStream open() throws IOException {
0: 		return url == null ? new URL(value).openStream() : url.openStream();
1: 	}
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:69d4847
/////////////////////////////////////////////////////////////////////////
0: 
1: import static org.apache.aries.util.filesystem.IDirectoryFinder.IDIR_SCHEME;
0: 
1: import java.net.URI;
1: import java.util.Collection;
1: import org.apache.aries.util.filesystem.IDirectoryFinder;
1:   enum LocationType {
0:     SUBSYSTEM("subsystem", "subsystem"), IDIRFINDER(IDIR_SCHEME, IDIR_SCHEME), URL("url", null);
1:     final String toString;
1:     final String scheme;
1:     LocationType(String toString, String scheme) {this.toString = toString; this.scheme = scheme;}
1:     public String toString() {return toString;}
1:   };
0:     
1:   private final LocationType type;
0:   private final String value;
1:   private final URI uri;
0:   private final URL url;
1:   private final SubsystemUri subsystemUri;
0: 
1:   /*
1:    * type, value, uri are always set to some non-null value, url and
1:    * subsystemUri depend on the type.
1:    */
0:   public Location(String location) throws MalformedURLException, URISyntaxException {
0:     value = location;
0:     URI locationUri = new URI(location);
0:     if (locationUri.isAbsolute()) {  // i.e. looks like scheme:something
1:       String scheme = locationUri.getScheme();
1:       if (LocationType.SUBSYSTEM.scheme.equals(scheme)) {
1:         type = LocationType.SUBSYSTEM;
0:         subsystemUri = new SubsystemUri(location);
0:         url = subsystemUri.getURL(); // subsystem uris may contain a nested url.
0:         uri = (url==null) ? null : url.toURI(); 
1:       } else if (LocationType.IDIRFINDER.scheme.equals(scheme)) {
1:         type = LocationType.IDIRFINDER;
1:         subsystemUri = null;
1:         url = null;
1:         uri = locationUri;
1:       } else {                       // otherwise will only accept a url, (a url
0:         type = LocationType.URL;     // always has a scheme, so fine to have 
1:         subsystemUri = null;         // this inside the 'if isAbsolute' block).
0:         url = locationUri.toURL();
1:         uri = locationUri;
1:       }
1:     } else {
0:       throw new IllegalArgumentException(location + " is not an absolute uri");
1:     }
1:   }
0:     
0:   public String getValue() {
0:     return value;
1:   }
0:     
0:   public String getSymbolicName() {
0:     return (type==LocationType.SUBSYSTEM) ? subsystemUri.getSymbolicName() : null;
1:   }
0:     
0:   public Version getVersion() {
0:     return (type==LocationType.SUBSYSTEM) ? subsystemUri.getVersion() : null;
1:   }
0: 
0:   public IDirectory open() throws IOException, URISyntaxException {
1:     switch (type) {
1:       case IDIRFINDER :
1:         return retrieveIDirectory();
1:       case SUBSYSTEM : // drop through to share 'case url' code
1:       case URL :
0:         if ("file".equals(url.getProtocol()))
1:           return FileSystem.getFSRoot(new File(uri));
0:         else
0:           return FileSystem.getFSRoot(url.openStream());
1:       default : // should never get here as switch should cover all types
0:         throw new UnsupportedOperationException("cannot open location of type " + type); 
1:     }
1:   }
0:   
1:   /*
0:    * Although the uri should contain information about the directory finder 
1:    * service to use to retrieve the directory, there are not expected to be
0:    * many such services in use (typically one), so a simple list of all 
1:    * directory finders is maintained by the activator and we loop over them in
1:    * turn until the desired directory is retrieved or there are no more finders
1:    * left to call.
1:    */
1:   private IDirectory retrieveIDirectory() throws IOException {
1:     Collection<IDirectoryFinder> iDirectoryFinders = Activator.getInstance().getIDirectoryFinders();
1:     for(IDirectoryFinder iDirectoryFinder : iDirectoryFinders) {
1:       IDirectory directory = iDirectoryFinder.retrieveIDirectory(uri);
1:       if (directory!=null)
1:         return directory;
1:     }
1:     throw new IOException("cannot find IDirectory corresponding to id " + uri);
1:   }
0: 
============================================================================