1:c5864b3: /*
1:c5864b3:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5864b3:  * or more contributor license agreements.  See the NOTICE file
1:c5864b3:  * distributed with this work for additional information
1:c5864b3:  * regarding copyright ownership.  The ASF licenses this file
1:c5864b3:  * to you under the Apache License, Version 2.0 (the
1:c5864b3:  * "License"); you may not use this file except in compliance
1:c5864b3:  * with the License.  You may obtain a copy of the License at
1:c5864b3:  *
1:c5864b3:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c5864b3:  *
1:c5864b3:  * Unless required by applicable law or agreed to in writing,
1:c5864b3:  * software distributed under the License is distributed on an
1:c5864b3:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c5864b3:  * KIND, either express or implied.  See the License for the
1:c5864b3:  * specific language governing permissions and limitations
1:c5864b3:  * under the License.
1:c5864b3:  */
1:c5864b3: package org.apache.aries.subsystem.itests.defect;
1:c5864b3: 
1:c5864b3: import static org.junit.Assert.assertEquals;
1:c5864b3: 
1:c5864b3: import java.io.IOException;
1:c5864b3: import java.util.HashMap;
1:c5864b3: import java.util.Map;
1:c5864b3: 
1:c5864b3: import org.apache.aries.subsystem.core.archive.ImportPackageHeader;
1:c5864b3: import org.apache.aries.subsystem.core.archive.RequireBundleHeader;
1:c5864b3: import org.apache.aries.subsystem.core.archive.RequireCapabilityHeader;
1:c5864b3: import org.apache.aries.subsystem.core.archive.SubsystemImportServiceHeader;
1:c5864b3: import org.apache.aries.subsystem.core.internal.BasicSubsystem;
1:c5864b3: import org.apache.aries.subsystem.itests.SubsystemTest;
1:c5864b3: import org.junit.Before;
1:c5864b3: import org.junit.Test;
1:c5864b3: import org.osgi.framework.Bundle;
1:c5864b3: import org.osgi.service.subsystem.Subsystem;
1:c5864b3: import org.osgi.service.subsystem.SubsystemConstants;
1:c5864b3: 
1:c5864b3: import aQute.bnd.osgi.Constants;
1:c5864b3: 
1:c5864b3: /*
1:c5864b3:  * https://issues.apache.org/jira/browse/ARIES-1421
1:c5864b3:  * 
1:c5864b3:  * SimpleFilter attribute extraction can not handle version ranges.
1:c5864b3:  */
1:c5864b3: public class Aries1421Test extends SubsystemTest {
1:c5864b3:     /*
1:c5864b3:      * Subsystem-SymbolicName: application.a.esa
1:c5864b3:      * 
1:c5864b3: 	 * Included In Archive
1:c5864b3: 	 * 		bundle.a.jar
1:c5864b3:      */
1:c5864b3:     private static final String APPLICATION_A = "application.a.esa";
1:c5864b3: 	/*
1:c5864b3: 	 * Bundle-SymbolicName: bundle.a.jar
1:c5864b3: 	 * Import-Package: org.osgi.framework;version="[1.7,2)",
1:c5864b3: 	 *  org.osgi.service.coordinator,
1:c5864b3: 	 *  org.osgi.service.resolver;version=1;bundle-version="[0,10)"
1:c5864b3: 	 * Require-Bundle: org.apache.aries.subsystem;bundle-version="[1,1000)";visibility:=private;resolution:=optional,
1:c5864b3: 	 *  org.eclipse.equinox.region,
1:c5864b3: 	 *  org.eclipse.equinox.coordinator;version=1;resolution:=mandatory
1:c5864b3: 	 * Require-Capability: osgi.service;filter:="(objectClass=foo)";effective:=active;resolution:=optional,
1:c5864b3: 	 *  osgi.service;filter:="(&(objectClass=bar)(a=b))";resolution:=optional;effective:=active
1:c5864b3: 	 */
1:c5864b3: 	private static final String BUNDLE_A = "bundle.a.jar";
1:c5864b3: 	
1:c5864b3: 	private static boolean createdTestFiles;
1:c5864b3: 	
1:c5864b3: 	@Before
1:c5864b3: 	public void createTestFiles() throws Exception {
1:c5864b3: 		if (createdTestFiles)
1:c5864b3: 			return;
1:c5864b3: 		createBundleA();
1:c5864b3: 		createApplicationA();
1:c5864b3: 		createdTestFiles = true;
1:c5864b3: 	}
1:c5864b3: 	
1:c5864b3: 	private void createBundleA() throws IOException {
1:c5864b3: 		createBundle(
1:c5864b3: 				name(BUNDLE_A), 
1:c5864b3: 				importPackage("org.osgi.framework;version=\"[1.7,2)\"" 
1:c5864b3: 						+ ", org.osgi.service.coordinator"
1:c5864b3: 						+ ", org.osgi.service.resolver;version=1;bundle-version=\"[0,10)\""),
1:c5864b3: 				requireBundle("org.apache.aries.subsystem;bundle-version=\"[1,1000)\""
1:c5864b3: 						+ ";visibility:=private;resolution:=optional,"
1:c5864b3: 						+ "org.eclipse.equinox.region,"
1:c5864b3: 						+ "org.eclipse.equinox.coordinator;bundle-version=1;resolution:=mandatory"),
1:c5864b3: 				requireCapability("osgi.service;filter:=\"(objectClass=foo)\";effective:=active;resolution:=optional,"
1:c5864b3: 						+ "osgi.service;filter:=\"(&(objectClass=bar)(a=b))\";resolution:=optional;effective:=active"));
1:c5864b3: 	}
1:c5864b3: 	
1:c5864b3: 	private static void createApplicationA() throws IOException {
1:c5864b3:         createApplicationAManifest();
1:c5864b3:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:c5864b3:     }
1:c5864b3:     
1:c5864b3:     private static void createApplicationAManifest() throws IOException {
1:c5864b3:         Map<String, String> attributes = new HashMap<String, String>();
1:c5864b3:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:c5864b3:         createManifest(APPLICATION_A + ".mf", attributes);
1:c5864b3:     }
1:c5864b3:     
1:c5864b3:     @Test
1:c5864b3:     public void testImportPackageVersionRanges() throws Exception {
1:c5864b3:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:c5864b3:     	try {
1:c5864b3:     		Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, null);
1:c5864b3:     		String expectedStr = bundleA.getHeaders().get(Constants.IMPORT_PACKAGE);
1:c5864b3:     		ImportPackageHeader expected = new ImportPackageHeader(expectedStr);
1:c5864b3:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:c5864b3:     		String actualStr = headers.get(Constants.IMPORT_PACKAGE);
1:c5864b3:     		ImportPackageHeader actual = new ImportPackageHeader(actualStr);
1:c5864b3:     		assertEquals("Wrong header", expected, actual);
1:c5864b3:     	}
1:c5864b3:     	finally {
1:c5864b3:     		uninstallSubsystemSilently(applicationA);
1:c5864b3:     	}
1:c5864b3:     }
1:c5864b3:     
1:c5864b3:     @Test
1:c5864b3:     public void testRequireBundleVersionRanges() throws Exception {
1:c5864b3:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:c5864b3:     	try {
1:c5864b3:     		Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, null);
1:c5864b3:     		String expectedStr = bundleA.getHeaders().get(Constants.REQUIRE_BUNDLE);
1:c5864b3:     		RequireBundleHeader expected = new RequireBundleHeader(expectedStr);
1:c5864b3:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:c5864b3:     		String actualStr = headers.get(Constants.REQUIRE_BUNDLE);
1:c5864b3:     		RequireBundleHeader actual = new RequireBundleHeader(actualStr);
1:c5864b3:     		assertEquals("Wrong header", expected, actual);
1:c5864b3:     	}
1:c5864b3:     	finally {
1:c5864b3:     		uninstallSubsystemSilently(applicationA);
1:c5864b3:     	}
1:c5864b3:     }
1:c5864b3:     
1:c5864b3:     @Test
1:c5864b3:     public void testSubsystemImportService() throws Exception {
1:c5864b3:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:c5864b3:     	try {
1:c5864b3:     		String expectedStr = "foo;resolution:=optional,bar;filter:=\"(a=b)\";resolution:=optional";
1:c5864b3:     		SubsystemImportServiceHeader expected = new SubsystemImportServiceHeader(expectedStr);
1:c5864b3:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:c5864b3:     		String actualStr = headers.get(SubsystemConstants.SUBSYSTEM_IMPORTSERVICE);
1:c5864b3:     		SubsystemImportServiceHeader actual = new SubsystemImportServiceHeader(actualStr);
1:c5864b3:     		assertEquals("Wrong header", expected, actual);
1:c5864b3:     	}
1:c5864b3:     	finally {
1:c5864b3:     		uninstallSubsystemSilently(applicationA);
1:c5864b3:     	}
1:c5864b3:     }
1:c5864b3:     
1:c5864b3:     @Test
1:c5864b3:     public void testRequireCapability() throws Exception {
1:c5864b3:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:c5864b3:     	try {
1:c5864b3:     		Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, null);
1:c5864b3:     		String expectedStr = bundleA.getHeaders().get(Constants.REQUIRE_CAPABILITY);
1:c5864b3:     		RequireCapabilityHeader expected = new RequireCapabilityHeader(expectedStr);
1:c5864b3:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:c5864b3:     		String actualStr = headers.get(Constants.REQUIRE_CAPABILITY);
1:c5864b3:     		RequireCapabilityHeader actual = new RequireCapabilityHeader(actualStr);
1:c5864b3:     		assertEquals("Wrong header", expected, actual);
1:c5864b3:     	}
1:c5864b3:     	finally {
1:c5864b3:     		uninstallSubsystemSilently(applicationA);
1:c5864b3:     	}
1:c5864b3:     }
1:c5864b3: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:c5864b3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.archive.ImportPackageHeader;
1: import org.apache.aries.subsystem.core.archive.RequireBundleHeader;
1: import org.apache.aries.subsystem.core.archive.RequireCapabilityHeader;
1: import org.apache.aries.subsystem.core.archive.SubsystemImportServiceHeader;
1: import org.apache.aries.subsystem.core.internal.BasicSubsystem;
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: import aQute.bnd.osgi.Constants;
1: 
1: /*
1:  * https://issues.apache.org/jira/browse/ARIES-1421
1:  * 
1:  * SimpleFilter attribute extraction can not handle version ranges.
1:  */
1: public class Aries1421Test extends SubsystemTest {
1:     /*
1:      * Subsystem-SymbolicName: application.a.esa
1:      * 
1: 	 * Included In Archive
1: 	 * 		bundle.a.jar
1:      */
1:     private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Import-Package: org.osgi.framework;version="[1.7,2)",
1: 	 *  org.osgi.service.coordinator,
1: 	 *  org.osgi.service.resolver;version=1;bundle-version="[0,10)"
1: 	 * Require-Bundle: org.apache.aries.subsystem;bundle-version="[1,1000)";visibility:=private;resolution:=optional,
1: 	 *  org.eclipse.equinox.region,
1: 	 *  org.eclipse.equinox.coordinator;version=1;resolution:=mandatory
1: 	 * Require-Capability: osgi.service;filter:="(objectClass=foo)";effective:=active;resolution:=optional,
1: 	 *  osgi.service;filter:="(&(objectClass=bar)(a=b))";resolution:=optional;effective:=active
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	
1: 	private static boolean createdTestFiles;
1: 	
1: 	@Before
1: 	public void createTestFiles() throws Exception {
1: 		if (createdTestFiles)
1: 			return;
1: 		createBundleA();
1: 		createApplicationA();
1: 		createdTestFiles = true;
1: 	}
1: 	
1: 	private void createBundleA() throws IOException {
1: 		createBundle(
1: 				name(BUNDLE_A), 
1: 				importPackage("org.osgi.framework;version=\"[1.7,2)\"" 
1: 						+ ", org.osgi.service.coordinator"
1: 						+ ", org.osgi.service.resolver;version=1;bundle-version=\"[0,10)\""),
1: 				requireBundle("org.apache.aries.subsystem;bundle-version=\"[1,1000)\""
1: 						+ ";visibility:=private;resolution:=optional,"
1: 						+ "org.eclipse.equinox.region,"
1: 						+ "org.eclipse.equinox.coordinator;bundle-version=1;resolution:=mandatory"),
1: 				requireCapability("osgi.service;filter:=\"(objectClass=foo)\";effective:=active;resolution:=optional,"
1: 						+ "osgi.service;filter:=\"(&(objectClass=bar)(a=b))\";resolution:=optional;effective:=active"));
1: 	}
1: 	
1: 	private static void createApplicationA() throws IOException {
1:         createApplicationAManifest();
1:         createSubsystem(APPLICATION_A, BUNDLE_A);
1:     }
1:     
1:     private static void createApplicationAManifest() throws IOException {
1:         Map<String, String> attributes = new HashMap<String, String>();
1:         attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:         createManifest(APPLICATION_A + ".mf", attributes);
1:     }
1:     
1:     @Test
1:     public void testImportPackageVersionRanges() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, null);
1:     		String expectedStr = bundleA.getHeaders().get(Constants.IMPORT_PACKAGE);
1:     		ImportPackageHeader expected = new ImportPackageHeader(expectedStr);
1:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:     		String actualStr = headers.get(Constants.IMPORT_PACKAGE);
1:     		ImportPackageHeader actual = new ImportPackageHeader(actualStr);
1:     		assertEquals("Wrong header", expected, actual);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testRequireBundleVersionRanges() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, null);
1:     		String expectedStr = bundleA.getHeaders().get(Constants.REQUIRE_BUNDLE);
1:     		RequireBundleHeader expected = new RequireBundleHeader(expectedStr);
1:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:     		String actualStr = headers.get(Constants.REQUIRE_BUNDLE);
1:     		RequireBundleHeader actual = new RequireBundleHeader(actualStr);
1:     		assertEquals("Wrong header", expected, actual);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testSubsystemImportService() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		String expectedStr = "foo;resolution:=optional,bar;filter:=\"(a=b)\";resolution:=optional";
1:     		SubsystemImportServiceHeader expected = new SubsystemImportServiceHeader(expectedStr);
1:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:     		String actualStr = headers.get(SubsystemConstants.SUBSYSTEM_IMPORTSERVICE);
1:     		SubsystemImportServiceHeader actual = new SubsystemImportServiceHeader(actualStr);
1:     		assertEquals("Wrong header", expected, actual);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1:     
1:     @Test
1:     public void testRequireCapability() throws Exception {
1:     	Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		Bundle bundleA = getConstituentAsBundle(applicationA, BUNDLE_A, null, null);
1:     		String expectedStr = bundleA.getHeaders().get(Constants.REQUIRE_CAPABILITY);
1:     		RequireCapabilityHeader expected = new RequireCapabilityHeader(expectedStr);
1:     		Map<String, String> headers = ((BasicSubsystem)applicationA).getDeploymentHeaders();
1:     		String actualStr = headers.get(Constants.REQUIRE_CAPABILITY);
1:     		RequireCapabilityHeader actual = new RequireCapabilityHeader(actualStr);
1:     		assertEquals("Wrong header", expected, actual);
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(applicationA);
1:     	}
1:     }
1: }
============================================================================