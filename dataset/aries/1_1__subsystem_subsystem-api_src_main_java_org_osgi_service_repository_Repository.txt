1:7d296ee: /*
1:7d296ee:  * Copyright (c) OSGi Alliance (2006, 2012). All Rights Reserved.
1:7d296ee:  *
1:7d296ee:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7d296ee:  * you may not use this file except in compliance with the License.
1:7d296ee:  * You may obtain a copy of the License at
1:7d296ee:  *
1:7d296ee:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7d296ee:  *
1:7d296ee:  * Unless required by applicable law or agreed to in writing, software
1:7d296ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d296ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d296ee:  * See the License for the specific language governing permissions and
1:7d296ee:  * limitations under the License.
1:7d296ee:  */
1:7d296ee: 
1:7d296ee: // This document is an experimental draft to enable interoperability
1:7d296ee: // between bundle repositories. There is currently no commitment to 
1:7d296ee: // turn this draft into an official specification.  
1:7d296ee: 
1:7d296ee: package org.osgi.service.repository;
1:7d296ee: 
1:7d296ee: import java.util.Collection;
1:7d296ee: import java.util.Map;
1:7d296ee: import org.osgi.resource.Capability;
1:7d296ee: import org.osgi.resource.Requirement;
1:7d296ee: import org.osgi.resource.Resource;
1:7d296ee: 
1:7d296ee: /**
1:7d296ee:  * A repository service that contains {@link Resource resources}.
1:7d296ee:  * 
1:7d296ee:  * <p>
1:7d296ee:  * Repositories may be registered as services and may be used as by a resolve
1:7d296ee:  * context during resolver operations.
1:7d296ee:  * 
1:7d296ee:  * <p>
1:7d296ee:  * Repositories registered as services may be filtered using standard service
1:7d296ee:  * properties.
1:7d296ee:  * 
1:7d296ee:  * @ThreadSafe
1:7d296ee:  * @noimplement
1:7d296ee:  * @version $Id$
1:7d296ee:  */
1:7d296ee: public interface Repository {
1:7d296ee: 	/**
1:7d296ee: 	 * Service property to provide URLs related to this repository.
1:7d296ee: 	 * 
1:7d296ee: 	 * <p>
1:7d296ee: 	 * The value of this property must be of type {@code String},
1:7d296ee: 	 * {@code String[]}, or {@code Collection<String>}.
1:7d296ee: 	 */
1:7d296ee: 	String	URL	= "repository.url";
1:7d296ee: 
1:7d296ee: 	/**
1:7d296ee: 	 * Find the capabilities that match the specified requirements.
1:7d296ee: 	 * 
1:7d296ee: 	 * @param requirements The requirements for which matching capabilities
1:7d296ee: 	 *        should be returned. Must not be {@code null}.
1:7d296ee: 	 * @return A map of matching capabilities for the specified requirements.
1:7d296ee: 	 *         Each specified requirement must appear as a key in the map. If
1:7d296ee: 	 *         there are no matching capabilities for a specified requirement,
1:7d296ee: 	 *         then the value in the map for the specified requirement must be
1:7d296ee: 	 *         an empty collection. The returned map is the property of the
1:7d296ee: 	 *         caller and can be modified by the caller.
1:7d296ee: 	 */
1:7d296ee: 	Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements);
1:7d296ee: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:7d296ee
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2006, 2012). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: // This document is an experimental draft to enable interoperability
1: // between bundle repositories. There is currently no commitment to 
1: // turn this draft into an official specification.  
1: 
1: package org.osgi.service.repository;
1: 
1: import java.util.Collection;
1: import java.util.Map;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: 
1: /**
1:  * A repository service that contains {@link Resource resources}.
1:  * 
1:  * <p>
1:  * Repositories may be registered as services and may be used as by a resolve
1:  * context during resolver operations.
1:  * 
1:  * <p>
1:  * Repositories registered as services may be filtered using standard service
1:  * properties.
1:  * 
1:  * @ThreadSafe
1:  * @noimplement
1:  * @version $Id$
1:  */
1: public interface Repository {
1: 	/**
1: 	 * Service property to provide URLs related to this repository.
1: 	 * 
1: 	 * <p>
1: 	 * The value of this property must be of type {@code String},
1: 	 * {@code String[]}, or {@code Collection<String>}.
1: 	 */
1: 	String	URL	= "repository.url";
1: 
1: 	/**
1: 	 * Find the capabilities that match the specified requirements.
1: 	 * 
1: 	 * @param requirements The requirements for which matching capabilities
1: 	 *        should be returned. Must not be {@code null}.
1: 	 * @return A map of matching capabilities for the specified requirements.
1: 	 *         Each specified requirement must appear as a key in the map. If
1: 	 *         there are no matching capabilities for a specified requirement,
1: 	 *         then the value in the map for the specified requirement must be
1: 	 *         an empty collection. The returned map is the property of the
1: 	 *         caller and can be modified by the caller.
1: 	 */
1: 	Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements);
1: }
commit:ec9e430
/////////////////////////////////////////////////////////////////////////
commit:452554c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  * @noimplement
0:  * @version $Id: 7c1e9f0758f6dc1530645699c62843182c84dc1e $
0: 	 * Service property to provide URLs related to this repository.
0: 	 * 
0: 	 * <p>
0: 	 * The value of this property must be of type {@code String},
0: 	 * {@code String[]}, or {@code Collection<String>}.
/////////////////////////////////////////////////////////////////////////
0: 	Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements);
commit:aac6a2a
/////////////////////////////////////////////////////////////////////////
0:  * A repository service that contains {@link Resource resources}.
0:  * Repositories may be registered as services and may be used as by a resolve
0:  * context during resolver operations.
0:  * @version $Id: 556d89153e612c5188c74e62004fdcacdd62949e $
/////////////////////////////////////////////////////////////////////////
0: 	 * Find the capabilities that match the specified requirements.
0: 	 * @param requirements The requirements for which matching capabilities
0: 	 *        should be returned. Must not be {@code null}.
0: 	 * @return A map of matching capabilities for the specified requirements.
0: 	 *         Each specified requirement must appear as a key in the map. If
0: 	 *         there are no matching capabilities for a specified requirement,
0: 	 *         then the value in the map for the specified requirement must be
0: 	 *         an empty collection. The returned map is the property of the
0: 	 *         caller and can be modified by the caller.
commit:8ee8aac
/////////////////////////////////////////////////////////////////////////
0:  * @version $Id: ed526d7ce615bed833c679eb154f1b2ee57ff8fa $
0: 	 * Service property to provide an optional URL related to this repository
0: 	String	URL	= "repository.url";
/////////////////////////////////////////////////////////////////////////
0: 	 * 
0: 	 * ### is it guaranteed that each Requirement given is in the returned map?
0: 	 * 
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.resource.Capability;
0: import org.osgi.resource.Requirement;
0: import org.osgi.resource.Resource;
commit:a1c6951
/////////////////////////////////////////////////////////////////////////
0:  * Repositories may be registered as services and may be used as inputs to
0:  * resolver operations.
0:  * @version $Id: c8ac56d5b6e0376018c8a3bb872010596fc8087a $
0: 	/**
0: 	 * Service attribute to uniquely identify this repository
0: 	 */
0: 	String	ID				= "repository.id";
0: 	/**
0: 	 * Service attribute to define the name of this repository
0: 	 */
0: 	String	NAME			= "repository.name";
0: 	/**
0: 	 * Service attribute to provide a human readable name for this repository
0: 	 */
0: 	String	DISPLAY_NAME	= "repository.displayName";
0: 	/**
0: 	 * Find any capabilities that match the supplied requirements.
0: 	 * 
0: 	 * <p>
0: 	 * See the Resolver specification for a discussion on matching.
0: 	 * 
0: 	 * @param requirements the requirements that should be matched
0: 	 * 
0: 	 * @return A map of requirements to capabilities that match the supplied
0: 	 *         requirements
0: 	 * 
0: 	 * @throws NullPointerException if requirements is null
0: 	 */
0: 	Map<Requirement, Collection<Capability>> findProviders(
0: 			Collection< ? extends Requirement> requirements);
commit:54c8ff7
/////////////////////////////////////////////////////////////////////////
0:  * Copyright (c) OSGi Alliance (2006, 2012). All Rights Reserved.
/////////////////////////////////////////////////////////////////////////
0:  * @version $Id: eb3d63491b6a021133bbec533295ad07ca88a348 $
/////////////////////////////////////////////////////////////////////////
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0:  * Copyright (c) OSGi Alliance (2006, 2011). All Rights Reserved.
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:  * @version $Id: 95cb10e57c1262d6aae8e3bb5e9d3fa4f8d1cd64 $
0:    * Service attribute to uniquely identify this repository
0:    */
0:   final String ID = "repository.id";
0: 
0:   /**
0:    * Service attribute to define the name of this repository
0:    */
0:   final String NAME = "repository.name";
0: 
0:   /**
0:    * Service attribute to provide a human readable name for this repository
0:    */
0:   final String DISPLAY_NAME = "repository.displayName";
0: 
0:   /**
0:    * Find any capabilities that match the supplied requirement.
0:    * 
0:    * <p>
0:    * See {@link Environment#findProviders} for a discussion on matching.
/////////////////////////////////////////////////////////////////////////
0:    * Find any capabilities that match the supplied requirements.
0:    * See {@link Environment#findProviders} for a discussion on matching.
0:    * @param requirements the requirements that should be matched
0:    *
0:    * @return A map of requirements to capabilites that match the supplied requirements
0:    * 
0:    * @throws NullPointerException if requirements is null
0:   Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements);
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Requirement;
0: import org.osgi.framework.resource.Resource;
0: import org.osgi.service.resolver.Environment;
0:  * {@link Environment#findProviders(Requirement)} operation.
0:  * @version $Id: bd0cfbdace9a99e3a9d2b16208d7169d3cc6d993 $
/////////////////////////////////////////////////////////////////////////
0:   Collection<Capability> findProviders(Requirement requirement);
/////////////////////////////////////////////////////////////////////////
0:   URL getContent(Resource resource);
commit:b1d7587
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright (c) OSGi Alliance (2006, 2009). All Rights Reserved.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: // This document is an experimental draft to enable interoperability
0: // between bundle repositories. There is currently no commitment to 
0: // turn this draft into an official specification.  
0: 
0: package org.osgi.service.repository;
0: 
0: import java.net.URL;
0: import java.util.Collection;
0: 
0: import org.osgi.framework.wiring.Capability;
0: import org.osgi.framework.wiring.Requirement;
0: import org.osgi.framework.wiring.Resource;
0: 
0: /**
0:  * Represents a repository that contains {@link Resource resources}.
0:  * 
0:  * <p>
0:  * Repositories may be registered as services and may be used as inputs to an
0:  * {@link org.osgi.service.resolver.Environment#findProviders(Requirement)} operation.
0:  * 
0:  * <p>
0:  * Repositories registered as services may be filtered using standard service
0:  * properties.
0:  * 
0:  * @ThreadSafe
0:  * @version $Id: f4cc0fc98cdf67253d3fbca9b39f6a2d6e1464f5 $
0:  */
0: public interface Repository {
0:   /**
0:    * Find any capabilities that {@link Requirement#matches(Capability) match} 
0:    * the supplied requirement.
0:    * 
0:    * @param requirement The requirement that should be matched
0:    * 
0:    * @return A collection of capabilities that match the supplied requirement
0:    *  
0:    * @throws NullPointerException if the requirement is null
0:    */
0:   Collection<Capability> findProviders(Requirement requirement) throws NullPointerException;
0: 
0:   /**
0:    * Lookup the URL where the supplied resource may be accessed, if any.
0:    * 
0:    * <p>
0:    * Successive calls to this method do not have to return the same value this
0:    * allows for mirroring behaviors to be built into a repository.
0:    * 
0:    * @param resource
0:    *          - The resource whose content is desired.
0:    * @return The URL for the supplied resource or null if this resource has no
0:    *         binary content or is not accessible for any reason
0:    *         
0:    * @throws NullPointerException if the resource is null 
0:    */
0:   URL getContent(Resource resource) throws NullPointerException;
0: }
============================================================================