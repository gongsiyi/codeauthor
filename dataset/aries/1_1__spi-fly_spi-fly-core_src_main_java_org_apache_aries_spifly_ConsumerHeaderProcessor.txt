1:43cb4c6: /**
1:43cb4c6:  * Licensed to the Apache Software Foundation (ASF) under one
1:43cb4c6:  * or more contributor license agreements.  See the NOTICE file
1:43cb4c6:  * distributed with this work for additional information
1:43cb4c6:  * regarding copyright ownership.  The ASF licenses this file
1:43cb4c6:  * to you under the Apache License, Version 2.0 (the
1:43cb4c6:  * "License"); you may not use this file except in compliance
1:43cb4c6:  * with the License.  You may obtain a copy of the License at
3:43cb4c6:  *
1:43cb4c6:  *   http://www.apache.org/licenses/LICENSE-2.0
1:43cb4c6:  *
1:43cb4c6:  * Unless required by applicable law or agreed to in writing,
1:43cb4c6:  * software distributed under the License is distributed on an
1:43cb4c6:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:43cb4c6:  * KIND, either express or implied.  See the License for the
1:43cb4c6:  * specific language governing permissions and limitations
1:43cb4c6:  * under the License.
2:43cb4c6:  */
1:43cb4c6: package org.apache.aries.spifly;
1:f886534: 
1:43cb4c6: import java.util.ArrayList;
1:a166d95: import java.util.Collection;
1:a166d95: import java.util.Dictionary;
1:43cb4c6: import java.util.HashSet;
1:a166d95: import java.util.Hashtable;
1:43cb4c6: import java.util.List;
1:43cb4c6: import java.util.ServiceLoader;
1:43cb4c6: import java.util.Set;
10:43cb4c6: 
1:43cb4c6: import org.apache.aries.spifly.HeaderParser.PathElement;
1:6591ac7: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:6591ac7: import org.apache.aries.util.manifest.ManifestHeaderProcessor.GenericMetadata;
1:0028427: import org.osgi.framework.Filter;
1:0028427: import org.osgi.framework.FrameworkUtil;
1:0028427: import org.osgi.framework.InvalidSyntaxException;
1:43cb4c6: import org.osgi.framework.Version;
1:43cb4c6: 
1:43cb4c6: public class ConsumerHeaderProcessor {
1:a166d95:     private static final Dictionary<String, String> PROCESSOR_FILTER_MATCH;
1:a166d95: 
1:a166d95:     static {
1:a166d95:         PROCESSOR_FILTER_MATCH = new Hashtable<String, String>();
1:8d934f9:         PROCESSOR_FILTER_MATCH.put(SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE, SpiFlyConstants.PROCESSOR_EXTENDER_NAME);
1:a166d95:     }
1:a166d95: 
1:43cb4c6:     /**
1:43cb4c6:      * Parses headers of the following syntax:
1:43cb4c6:      * <ul>
1:f886534:      * <li><tt>org.acme.MyClass#myMethod</tt> - apply the weaving to all overloads of <tt>myMethod()</tt>
1:43cb4c6:      * in <tt>MyClass</tt>
1:f886534:      * <li><tt>org.acme.MyClass#myMethod(java.lang.String, java.util.List)</tt> - apply the weaving only
1:43cb4c6:      * to the <tt>myMethod(String, List)</tt> overload in <tt>MyClass</tt>
1:f886534:      * <li><tt>org.acme.MyClass#myMethod()</tt> - apply the weaving only to the noarg overload of
1:43cb4c6:      * <tt>myMethod()</tt>
1:43cb4c6:      * <li><b>true</b> - equivalent to <tt>java.util.ServiceLoader#load(java.lang.Class)</tt>
1:43cb4c6:      * </ul>
1:f886534:      * Additionally, it registers the consumer's constraints with the consumer registry in the activator, if the
1:43cb4c6:      * consumer is only constrained to a certain set of bundles.<p/>
1:f886534:      *
1:43cb4c6:      * The following attributes are supported:
1:43cb4c6:      * <ul>
1:f886534:      * <li><tt>bundle</tt> - restrict wiring to the bundle with the specifies Symbolic Name. The attribute value
1:43cb4c6:      * is a list of bundle identifiers separated by a '|' sign. The bundle identifier starts with the Symbolic name
1:f886534:      * and can optionally contain a version suffix. E.g. bundle=impl2:version=1.2.3 or bundle=impl2|impl4.
1:f886534:      * <li><tt>bundleId</tt> - restrict wiring to the bundle with the specified bundle ID. Typically used when
1:6591ac7:      * the service should be forcibly picked up from the system bundle (<tt>bundleId=0</tt>). Multiple bundle IDs
1:f886534:      * can be specified separated by a '|' sign.
1:43cb4c6:      * </ul>
1:f886534:      *
1:6591ac7:      * @param consumerHeaderName the name of the header (either Require-Capability or SPI-Consumer)
1:43cb4c6:      * @param consumerHeader the <tt>SPI-Consumer</tt> header.
1:43cb4c6:      * @return an instance of the {@link WeavingData} class.
1:43cb4c6:      */
1:a166d95:     public static Set<WeavingData> processHeader(String consumerHeaderName, String consumerHeader) throws Exception {
1:6591ac7:         if (SpiFlyConstants.REQUIRE_CAPABILITY.equals(consumerHeaderName)) {
1:6591ac7:             return processRequireCapabilityHeader(consumerHeader);
1:6591ac7:         }
1:a166d95: 
1:43cb4c6:         Set<WeavingData> weavingData = new HashSet<WeavingData>();
1:a166d95: 
1:43cb4c6:         for (PathElement element : HeaderParser.parseHeader(consumerHeader)) {
1:5e6f679:             List<BundleDescriptor> allowedBundles = new ArrayList<BundleDescriptor>();
1:43cb4c6:             String name = element.getName().trim();
1:6591ac7: 
1:43cb4c6:             String className;
1:43cb4c6:             String methodName;
1:43cb4c6:             MethodRestriction methodRestriction;
1:6591ac7: 
1:43cb4c6:             int hashIdx = name.indexOf('#');
1:f886534:             if (hashIdx > 0) {
1:43cb4c6:                 className = name.substring(0, hashIdx);
1:43cb4c6:                 int braceIdx = name.substring(hashIdx).indexOf('(');
1:43cb4c6:                 if (braceIdx > 0) {
1:43cb4c6:                     methodName = name.substring(hashIdx + 1, hashIdx + braceIdx);
1:43cb4c6:                     ArgRestrictions argRestrictions = new ArgRestrictions();
1:43cb4c6:                     int closeIdx = name.substring(hashIdx).indexOf(')');
1:43cb4c6:                     if (closeIdx > 0) {
1:43cb4c6:                         String classes = name.substring(hashIdx + braceIdx + 1, hashIdx + closeIdx).trim();
1:43cb4c6:                         if (classes.length() > 0) {
1:43cb4c6:                             if (classes.indexOf('[') > 0) {
1:43cb4c6:                                 int argNumber = 0;
1:43cb4c6:                                 for (String s : classes.split(",")) {
1:43cb4c6:                                     int idx = s.indexOf('[');
1:43cb4c6:                                     int end = s.indexOf(']', idx);
1:43cb4c6:                                     if (idx > 0 && end > idx) {
1:43cb4c6:                                         argRestrictions.addRestriction(argNumber, s.substring(0, idx), s.substring(idx + 1, end));
1:43cb4c6:                                     } else {
1:43cb4c6:                                         argRestrictions.addRestriction(argNumber, s);
1:6591ac7:                                     }
1:43cb4c6:                                     argNumber++;
1:6591ac7:                                 }
1:43cb4c6:                             } else {
1:43cb4c6:                                 String[] classNames = classes.split(",");
1:43cb4c6:                                 for (int i = 0; i < classNames.length; i++) {
1:43cb4c6:                                     argRestrictions.addRestriction(i, classNames[i]);
8:43cb4c6:                                 }
1:43cb4c6:                             }
1:43cb4c6:                         } else {
1:43cb4c6:                             argRestrictions = null;
1:43cb4c6:                         }
1:43cb4c6:                     }
1:43cb4c6:                     methodRestriction = new MethodRestriction(methodName, argRestrictions);
1:43cb4c6:                 } else {
1:43cb4c6:                     methodName = name.substring(hashIdx + 1);
1:43cb4c6:                     methodRestriction = new MethodRestriction(methodName);
1:43cb4c6:                 }
1:43cb4c6:             } else {
1:43cb4c6:                 if ("*".equalsIgnoreCase(name)) {
1:43cb4c6:                     className = ServiceLoader.class.getName();
1:43cb4c6:                     methodName = "load";
1:43cb4c6:                     ArgRestrictions argRestrictions = new ArgRestrictions();
1:43cb4c6:                     argRestrictions.addRestriction(0, Class.class.getName());
1:43cb4c6:                     methodRestriction = new MethodRestriction(methodName, argRestrictions);
1:43cb4c6:                 } else {
1:43cb4c6:                     throw new IllegalArgumentException("Must at least specify class name and method name: " + name);
1:f886534:                 }
1:43cb4c6:             }
1:f886534: 
1:f886534: 
1:43cb4c6:             String bsn = element.getAttribute("bundle");
1:43cb4c6:             if (bsn != null) {
1:43cb4c6:                 bsn = bsn.trim();
1:43cb4c6:                 if (bsn.length() > 0) {
1:43cb4c6:                     for (String s : bsn.split("\\|")) {
1:43cb4c6:                         int colonIdx = s.indexOf(':');
1:43cb4c6:                         if (colonIdx > 0) {
1:43cb4c6:                             String sn = s.substring(0, colonIdx);
1:43cb4c6:                             String versionSfx = s.substring(colonIdx + 1);
1:43cb4c6:                             if (versionSfx.startsWith("version=")) {
1:f886534:                                 allowedBundles.add(new BundleDescriptor(sn,
1:43cb4c6:                                         Version.parseVersion(versionSfx.substring("version=".length()))));
1:43cb4c6:                             } else {
1:43cb4c6:                                 allowedBundles.add(new BundleDescriptor(sn));
1:43cb4c6:                             }
1:43cb4c6:                         } else {
1:43cb4c6:                             allowedBundles.add(new BundleDescriptor(s));
1:43cb4c6:                         }
1:43cb4c6:                     }
1:43cb4c6:                 }
1:43cb4c6:             }
1:f886534: 
1:43cb4c6:             String bid = element.getAttribute("bundleId");
1:43cb4c6:             if (bid != null) {
1:43cb4c6:                 bid = bid.trim();
1:43cb4c6:                 if (bid.length() > 0) {
1:43cb4c6:                     for (String s : bid.split("\\|")) {
1:f886534:                         allowedBundles.add(new BundleDescriptor(Long.parseLong(s)));
1:43cb4c6:                     }
1:43cb4c6:                 }
1:43cb4c6:             }
1:f886534: 
1:6591ac7:             weavingData.add(createWeavingData(className, methodName, methodRestriction, allowedBundles));
1:6591ac7:         }
1:b1379cb:         return weavingData;
1:6591ac7:     }
1:6591ac7: 
1:a166d95:     private static Set<WeavingData> processRequireCapabilityHeader(String consumerHeader) throws InvalidSyntaxException {
1:6591ac7:         Set<WeavingData> weavingData = new HashSet<WeavingData>();
1:6591ac7: 
1:6591ac7:         List<GenericMetadata> requirements = ManifestHeaderProcessor.parseRequirementString(consumerHeader);
1:8d934f9:         GenericMetadata extenderRequirement = findRequirement(requirements, SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE, SpiFlyConstants.PROCESSOR_EXTENDER_NAME);
1:a166d95:         Collection<GenericMetadata> serviceLoaderRequirements = findAllMetadata(requirements, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE);
1:6591ac7: 
1:a166d95:         if (extenderRequirement != null) {
1:a166d95:             ArgRestrictions ar = new ArgRestrictions();
1:a166d95:             ar.addRestriction(0, Class.class.getName());
1:a166d95:             MethodRestriction mr = new MethodRestriction("load", ar);
1:6591ac7: 
1:a166d95:             List<BundleDescriptor> allowedBundles = new ArrayList<BundleDescriptor>();
1:a166d95:             for (GenericMetadata req : serviceLoaderRequirements) {
1:a166d95:                 String slFilterString = req.getDirectives().get(SpiFlyConstants.FILTER_DIRECTIVE);
1:a166d95:                 if (slFilterString != null) {
1:a166d95:                     Filter slFilter = FrameworkUtil.createFilter(slFilterString);
1:a166d95:                     allowedBundles.add(new BundleDescriptor(slFilter));
1:5e6f679:                 }
1:0028427:             }
1:a166d95: 
1:a166d95:             weavingData.add(createWeavingData(ServiceLoader.class.getName(), "load", mr, allowedBundles));
1:5e6f679:         }
1:6591ac7: 
1:6591ac7:         return weavingData;
1:0028427:     }
1:6591ac7: 
1:6591ac7:     private static WeavingData createWeavingData(String className, String methodName,
1:6591ac7:             MethodRestriction methodRestriction, List<BundleDescriptor> allowedBundles) {
1:6591ac7:         ConsumerRestriction restriction = new ConsumerRestriction(className, methodRestriction);
1:6591ac7: 
1:6591ac7:         // TODO is this correct? Why is it added to a set?
1:6591ac7:         Set<ConsumerRestriction> restrictions = new HashSet<ConsumerRestriction>();
1:6591ac7:         restrictions.add(restriction);
1:6591ac7: 
1:6591ac7:         // TODO this can be done in the WeavingData itself?
1:6591ac7:         String[] argClasses = restriction.getMethodRestriction(methodName).getArgClasses();
1:6591ac7: 
1:6591ac7:         return new WeavingData(className, methodName, argClasses, restrictions,
1:6591ac7:                 allowedBundles.size() == 0 ? null : allowedBundles);
1:6591ac7:     }
1:a166d95: 
1:a166d95:     private static GenericMetadata findRequirement(List<GenericMetadata> requirements, String namespace, String type) throws InvalidSyntaxException {
1:a166d95:         Dictionary<String, String> nsAttr = new Hashtable<String, String>();
1:a166d95:         nsAttr.put(namespace, type);
1:a166d95: 
2:a166d95:         for (GenericMetadata req : requirements) {
2:a166d95:             if (namespace.equals(req.getNamespace())) {
1:a166d95:                 String filterString = req.getDirectives().get(SpiFlyConstants.FILTER_DIRECTIVE);
1:a166d95:                 if (filterString != null) {
1:a166d95:                     Filter filter = FrameworkUtil.createFilter(filterString);
1:a166d95:                     if (filter.match(nsAttr)) {
1:a166d95:                         return req;
1:a166d95:                     }
1:a166d95:                 }
1:a166d95:             }
1:a166d95:         }
1:a166d95:         return null;
1:a166d95:     }
1:a166d95: 
1:782066c:     private static Collection<GenericMetadata> findAllMetadata(List<GenericMetadata> metadata, String namespace) {
1:782066c:         List<GenericMetadata> matching = new ArrayList<ManifestHeaderProcessor.GenericMetadata>();
1:782066c:         for (GenericMetadata md : metadata) {
1:782066c:             if (namespace.equals(md.getNamespace())) {
1:782066c:                 matching.add(md);
1:a166d95:             }
1:a166d95:         }
1:782066c:         return matching;
1:a166d95:     }
1:43cb4c6: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:e9a5257
/////////////////////////////////////////////////////////////////////////
commit:782066c
/////////////////////////////////////////////////////////////////////////
1:     private static Collection<GenericMetadata> findAllMetadata(List<GenericMetadata> metadata, String namespace) {
1:         List<GenericMetadata> matching = new ArrayList<ManifestHeaderProcessor.GenericMetadata>();
1:         for (GenericMetadata md : metadata) {
1:             if (namespace.equals(md.getNamespace())) {
1:                 matching.add(md);
1:         return matching;
commit:8d934f9
/////////////////////////////////////////////////////////////////////////
1:         PROCESSOR_FILTER_MATCH.put(SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE, SpiFlyConstants.PROCESSOR_EXTENDER_NAME);
/////////////////////////////////////////////////////////////////////////
1:         GenericMetadata extenderRequirement = findRequirement(requirements, SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE, SpiFlyConstants.PROCESSOR_EXTENDER_NAME);
commit:a166d95
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
1:     private static final Dictionary<String, String> PROCESSOR_FILTER_MATCH;
1: 
1:     static {
1:         PROCESSOR_FILTER_MATCH = new Hashtable<String, String>();
0:         PROCESSOR_FILTER_MATCH.put(SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE, SpiFlyConstants.CLIENT_EXTENDER_NAME);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static Set<WeavingData> processHeader(String consumerHeaderName, String consumerHeader) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     private static Set<WeavingData> processRequireCapabilityHeader(String consumerHeader) throws InvalidSyntaxException {
0:         GenericMetadata extenderRequirement = findRequirement(requirements, SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE, SpiFlyConstants.CLIENT_EXTENDER_NAME);
1:         Collection<GenericMetadata> serviceLoaderRequirements = findAllMetadata(requirements, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE);
1:         if (extenderRequirement != null) {
1:             ArgRestrictions ar = new ArgRestrictions();
1:             ar.addRestriction(0, Class.class.getName());
1:             MethodRestriction mr = new MethodRestriction("load", ar);
1:             List<BundleDescriptor> allowedBundles = new ArrayList<BundleDescriptor>();
1:             for (GenericMetadata req : serviceLoaderRequirements) {
1:                 String slFilterString = req.getDirectives().get(SpiFlyConstants.FILTER_DIRECTIVE);
1:                 if (slFilterString != null) {
1:                     Filter slFilter = FrameworkUtil.createFilter(slFilterString);
1:                     allowedBundles.add(new BundleDescriptor(slFilter));
1: 
1:             weavingData.add(createWeavingData(ServiceLoader.class.getName(), "load", mr, allowedBundles));
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static GenericMetadata findRequirement(List<GenericMetadata> requirements, String namespace, String type) throws InvalidSyntaxException {
1:         Dictionary<String, String> nsAttr = new Hashtable<String, String>();
1:         nsAttr.put(namespace, type);
1: 
1:         for (GenericMetadata req : requirements) {
1:             if (namespace.equals(req.getNamespace())) {
1:                 String filterString = req.getDirectives().get(SpiFlyConstants.FILTER_DIRECTIVE);
1:                 if (filterString != null) {
1:                     Filter filter = FrameworkUtil.createFilter(filterString);
1:                     if (filter.match(nsAttr)) {
1:                         return req;
1:                     }
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1: 
1: 
0: //    private static GenericMetadata findMetadata(List<GenericMetadata> requirements, String namespace, String type) {
0: //        for (GenericMetadata req : requirements) {
0: //            if (namespace.equals(req.getNamespace())) {
0: //                if (type.equals(req.getAttributes().get(namespace))) {
0: //                    return req;
0: //                }
0: //            }
0: //        }
0: //        return null;
0: //    }
1: 
0:     private static Collection<GenericMetadata> findAllMetadata(List<GenericMetadata> requirements, String namespace) {
0:         List<GenericMetadata> reqs = new ArrayList<ManifestHeaderProcessor.GenericMetadata>();
1:         for (GenericMetadata req : requirements) {
1:             if (namespace.equals(req.getNamespace())) {
0:                 reqs.add(req);
1:             }
1:         }
0:         return reqs;
1:     }
commit:5e6f679
/////////////////////////////////////////////////////////////////////////
0:             if (SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE.equals(req.getNamespace())) {
0:                 if (SpiFlyConstants.CLIENT_EXTENDER_NAME.equals(req.getAttributes().get(SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE))) {
0:                     ArgRestrictions ar = new ArgRestrictions();
0:                     ar.addRestriction(0, Class.class.getName());
0:                     MethodRestriction mr = new MethodRestriction("load", ar);
1:                     List<BundleDescriptor> allowedBundles = new ArrayList<BundleDescriptor>();
0:                     String filterString = req.getDirectives().get(SpiFlyConstants.PROVIDER_FILTER_DIRECTIVE);
0:                     if (filterString != null) {
0:                         try {
0:                             Filter filter = FrameworkUtil.createFilter(filterString);
0:                             allowedBundles.add(new BundleDescriptor(filter));
0:                         } catch (InvalidSyntaxException e) {
0:                             throw new IllegalArgumentException("Syntax error in filter " + filterString + " which appears in " + consumerHeader);
1:                         }
0:                     weavingData.add(createWeavingData(ServiceLoader.class.getName(), "load", mr, allowedBundles));
1:                 }
commit:0028427
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
/////////////////////////////////////////////////////////////////////////
0:                 List<BundleDescriptor> allowedBundles = new ArrayList<BundleDescriptor>();
0:                 String filterString = req.getDirectives().get("filter");
0:                 if (filterString != null) {
0:                     try {
0:                         Filter filter = FrameworkUtil.createFilter(filterString);
0:                         allowedBundles.add(new BundleDescriptor(filter));
0:                     } catch (InvalidSyntaxException e) {
0:                         throw new IllegalArgumentException("Syntax error in filter " + filterString + " which appears in " + consumerHeader);
1:                     }
1:                 }
commit:6591ac7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import org.apache.aries.spifly.api.SpiFlyConstants;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor.GenericMetadata;
/////////////////////////////////////////////////////////////////////////
1:      * the service should be forcibly picked up from the system bundle (<tt>bundleId=0</tt>). Multiple bundle IDs
1:      * @param consumerHeaderName the name of the header (either Require-Capability or SPI-Consumer)
0:     public static Set<WeavingData> processHeader(String consumerHeaderName, String consumerHeader) {
1:         if (SpiFlyConstants.REQUIRE_CAPABILITY.equals(consumerHeaderName)) {
1:             return processRequireCapabilityHeader(consumerHeader);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             weavingData.add(createWeavingData(className, methodName, methodRestriction, allowedBundles));
1: 
0:     private static Set<WeavingData> processRequireCapabilityHeader(String consumerHeader) {
1:         Set<WeavingData> weavingData = new HashSet<WeavingData>();
1: 
1:         List<GenericMetadata> requirements = ManifestHeaderProcessor.parseRequirementString(consumerHeader);
0:         for (GenericMetadata req : requirements) {
0:             if (SpiFlyConstants.SPI_CAPABILITY_NAMESPACE.equals(req.getNamespace())) {
0:                 if (!"active".equals(req.getDirectives().get("effective"))) {
0:                     continue;
1:                 }
1: 
0:                 ArgRestrictions ar = new ArgRestrictions();
0:                 ar.addRestriction(0, Class.class.getName());
0:                 MethodRestriction mr = new MethodRestriction("load", ar);
1: 
0:                 List<BundleDescriptor> allowedBundles = Collections.emptyList();
1: 
0:                 weavingData.add(createWeavingData(ServiceLoader.class.getName(), "load", mr, allowedBundles));
1:             }
1:         }
1: 
1:         return weavingData;
1:     }
1: 
1:     private static WeavingData createWeavingData(String className, String methodName,
1:             MethodRestriction methodRestriction, List<BundleDescriptor> allowedBundles) {
1:         ConsumerRestriction restriction = new ConsumerRestriction(className, methodRestriction);
1: 
1:         // TODO is this correct? Why is it added to a set?
1:         Set<ConsumerRestriction> restrictions = new HashSet<ConsumerRestriction>();
1:         restrictions.add(restriction);
1: 
1:         // TODO this can be done in the WeavingData itself?
1:         String[] argClasses = restriction.getMethodRestriction(methodName).getArgClasses();
1: 
1:         return new WeavingData(className, methodName, argClasses, restrictions,
1:                 allowedBundles.size() == 0 ? null : allowedBundles);
1:     }
commit:3aef914
/////////////////////////////////////////////////////////////////////////
0:             // TODO is this correct? Why is it added to a set?
/////////////////////////////////////////////////////////////////////////
0:             WeavingData wd = new WeavingData(className, methodName, argClasses, restrictions,
0:                     allowedBundles.size() == 0 ? null : allowedBundles);
0:             weavingData.add(wd);
commit:f886534
/////////////////////////////////////////////////////////////////////////
1:      * <li><tt>org.acme.MyClass#myMethod</tt> - apply the weaving to all overloads of <tt>myMethod()</tt>
1:      * <li><tt>org.acme.MyClass#myMethod(java.lang.String, java.util.List)</tt> - apply the weaving only
1:      * <li><tt>org.acme.MyClass#myMethod()</tt> - apply the weaving only to the noarg overload of
1:      * Additionally, it registers the consumer's constraints with the consumer registry in the activator, if the
1:      *
1:      * <li><tt>bundle</tt> - restrict wiring to the bundle with the specifies Symbolic Name. The attribute value
1:      * and can optionally contain a version suffix. E.g. bundle=impl2:version=1.2.3 or bundle=impl2|impl4.
1:      * <li><tt>bundleId</tt> - restrict wiring to the bundle with the specified bundle ID. Typically used when
0:      * the service should be forceably picked up from the system bundle (<tt>bundleId=0</tt>). Multiple bundle IDs
1:      * can be specified separated by a '|' sign.
1:      *
0:     public static Set<WeavingData> processHeader(String consumerHeader) {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (hashIdx > 0) {
/////////////////////////////////////////////////////////////////////////
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:                                 allowedBundles.add(new BundleDescriptor(sn,
/////////////////////////////////////////////////////////////////////////
1: 
1:                         allowedBundles.add(new BundleDescriptor(Long.parseLong(s)));
1: 
0:             weavingData.add(new WeavingData(className, methodName, argClasses, restrictions,
commit:b1379cb
/////////////////////////////////////////////////////////////////////////
0:     public static Set<WeavingData> processHeader(/* Bundle consumerBundle, */String consumerHeader) {
/////////////////////////////////////////////////////////////////////////
1:         return weavingData;
commit:43cb4c6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.ServiceLoader;
1: import java.util.Set;
1: 
1: import org.apache.aries.spifly.HeaderParser.PathElement;
1: import org.osgi.framework.Version;
1: 
1: public class ConsumerHeaderProcessor {
1:     /**
1:      * Parses headers of the following syntax:
1:      * <ul>
0:      * <li><tt>org.acme.MyClass#myMethod</tt> - apply the weaving to all overloads of <tt>myMethod()</tt> 
1:      * in <tt>MyClass</tt>
0:      * <li><tt>org.acme.MyClass#myMethod(java.lang.String, java.util.List)</tt> - apply the weaving only 
1:      * to the <tt>myMethod(String, List)</tt> overload in <tt>MyClass</tt>
0:      * <li><tt>org.acme.MyClass#myMethod()</tt> - apply the weaving only to the noarg overload of 
1:      * <tt>myMethod()</tt>
1:      * <li><b>true</b> - equivalent to <tt>java.util.ServiceLoader#load(java.lang.Class)</tt>
1:      * </ul>
0:      * Additionally, it registers the consumer's constraints with the consumer registry in the activator, if the 
1:      * consumer is only constrained to a certain set of bundles.<p/>
1:      * 
1:      * The following attributes are supported:
1:      * <ul>
0:      * <li><tt>bundle</tt> - restrict wiring to the bundle with the specifies Symbolic Name. The attribute value 
1:      * is a list of bundle identifiers separated by a '|' sign. The bundle identifier starts with the Symbolic name
0:      * and can optionally contain a version suffix. E.g. bundle=impl2:version=1.2.3 or bundle=impl2|impl4.  
0:      * <li><tt>bundleId</tt> - restrict wiring to the bundle with the specified bundle ID. Typically used when 
0:      * the service should be forceably picked up from the system bundle (<tt>bundleId=0</tt>). Multiple bundle IDs 
0:      * can be specified separated by a '|' sign. 
1:      * </ul>
1:      * 
0:      * @param consumerBundle the consuming bundle.
1:      * @param consumerHeader the <tt>SPI-Consumer</tt> header.
1:      * @return an instance of the {@link WeavingData} class.
1:      */
0:     public static WeavingData[] processHeader(/* Bundle consumerBundle, */String consumerHeader) {
1:         Set<WeavingData> weavingData = new HashSet<WeavingData>();
1:         
1:         for (PathElement element : HeaderParser.parseHeader(consumerHeader)) {
0:             List<BundleDescriptor> allowedBundles = new ArrayList<BundleDescriptor>();
1:             String name = element.getName().trim();
1: 
1:             String className;
1:             String methodName;
1:             MethodRestriction methodRestriction;
1:             
1:             int hashIdx = name.indexOf('#');
0:             if (hashIdx > 0) {                
1:                 className = name.substring(0, hashIdx);
1:                 int braceIdx = name.substring(hashIdx).indexOf('(');
1:                 if (braceIdx > 0) {
1:                     methodName = name.substring(hashIdx + 1, hashIdx + braceIdx);
1:                     ArgRestrictions argRestrictions = new ArgRestrictions();
1:                     int closeIdx = name.substring(hashIdx).indexOf(')');
1:                     if (closeIdx > 0) {
1:                         String classes = name.substring(hashIdx + braceIdx + 1, hashIdx + closeIdx).trim();
1:                         if (classes.length() > 0) {
1:                             if (classes.indexOf('[') > 0) {
1:                                 int argNumber = 0;
1:                                 for (String s : classes.split(",")) {
1:                                     int idx = s.indexOf('[');
1:                                     int end = s.indexOf(']', idx);
1:                                     if (idx > 0 && end > idx) {
1:                                         argRestrictions.addRestriction(argNumber, s.substring(0, idx), s.substring(idx + 1, end));
1:                                     } else {
1:                                         argRestrictions.addRestriction(argNumber, s);
1:                                     }
1:                                     argNumber++;
1:                                 }
1:                             } else {
1:                                 String[] classNames = classes.split(",");
1:                                 for (int i = 0; i < classNames.length; i++) {
1:                                     argRestrictions.addRestriction(i, classNames[i]);
1:                                 }
1:                             }
1:                         } else {
1:                             argRestrictions = null;
1:                         }
1:                     }
1:                     methodRestriction = new MethodRestriction(methodName, argRestrictions);
1:                 } else {
1:                     methodName = name.substring(hashIdx + 1);
1:                     methodRestriction = new MethodRestriction(methodName);
1:                 }
1:             } else {
1:                 if ("*".equalsIgnoreCase(name)) {
1:                     className = ServiceLoader.class.getName();
1:                     methodName = "load";
1:                     ArgRestrictions argRestrictions = new ArgRestrictions();
1:                     argRestrictions.addRestriction(0, Class.class.getName());
1:                     methodRestriction = new MethodRestriction(methodName, argRestrictions);
1:                 } else {
1:                     throw new IllegalArgumentException("Must at least specify class name and method name: " + name);
1:                 }
1:             }  
0:             ConsumerRestriction restriction = new ConsumerRestriction(className, methodRestriction);
1: 
0:             Set<ConsumerRestriction> restrictions = new HashSet<ConsumerRestriction>();
0:             restrictions.add(restriction);
1:                 
1:             String bsn = element.getAttribute("bundle");
1:             if (bsn != null) {
1:                 bsn = bsn.trim();
1:                 if (bsn.length() > 0) {
1:                     for (String s : bsn.split("\\|")) {
1:                         int colonIdx = s.indexOf(':');
1:                         if (colonIdx > 0) {
1:                             String sn = s.substring(0, colonIdx);
1:                             String versionSfx = s.substring(colonIdx + 1);
1:                             if (versionSfx.startsWith("version=")) {
0:                                 allowedBundles.add(new BundleDescriptor(sn, 
1:                                         Version.parseVersion(versionSfx.substring("version=".length()))));
1:                             } else {
1:                                 allowedBundles.add(new BundleDescriptor(sn));
1:                             }
1:                         } else {
1:                             allowedBundles.add(new BundleDescriptor(s));
1:                         }
1:                     }
1:                 }
1:             }
1:                         
0:             // TODO this cannot be done this way with static weaving...
0:             /*
1:             String bid = element.getAttribute("bundleId");
1:             if (bid != null) {
1:                 bid = bid.trim();
1:                 if (bid.length() > 0) {
1:                     for (String s : bid.split("\\|")) {
0:                         for (Bundle b : consumerBundle.getBundleContext().getBundles()) {
0:                             if (("" + b.getBundleId()).equals(s)) {                       
0:                                 allowedBundles.add(new BundleDescriptor(b.getSymbolicName()));
0:                                 break;                        
1:                             }
1:                         }                        
1:                     }
1:                 }
1:             }
1:             */
1:                                     
0: //            Activator.activator.registerConsumerBundle(consumerBundle, restrictions, 
0: //                    allowedBundles.size() == 0 ? null : allowedBundles);
0:             // TODO this can be done in the WeavingData itself?
0:             String[] argClasses = restriction.getMethodRestriction(methodName).getArgClasses();
1: 
0:             weavingData.add(new WeavingData(className, methodName, argClasses, restrictions, 
0:                     allowedBundles.size() == 0 ? null : allowedBundles));
1:         }
0:         return weavingData.toArray(new WeavingData [weavingData.size()]);
1:     }
1: }
============================================================================