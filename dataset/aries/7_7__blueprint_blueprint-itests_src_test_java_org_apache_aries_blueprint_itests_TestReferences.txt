1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.itests;
1:f13c6ac: 
1:c185a5a: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
1:f13c6ac: import static org.junit.Assert.assertEquals;
1:f13c6ac: import static org.junit.Assert.assertNotNull;
1:f13c6ac: import static org.junit.Assert.assertNull;
1:f13c6ac: import static org.junit.Assert.assertTrue;
1:f13c6ac: import static org.junit.Assert.fail;
1:d251156: 
1:f13c6ac: import java.util.Hashtable;
1:f13c6ac: import java.util.List;
1:d251156: import java.util.concurrent.atomic.AtomicBoolean;
1:f13c6ac: 
1:d251156: import junit.framework.Assert;
1:d251156: 
1:2b87d24: import org.apache.aries.blueprint.sample.BindingListener;
1:e104a3b: import org.apache.aries.blueprint.sample.DefaultRunnable;
1:d15fd00: import org.apache.aries.blueprint.sample.DestroyTest;
1:2b87d24: import org.apache.aries.blueprint.sample.InterfaceA;
1:f13c6ac: import org.junit.Test;
1:f13c6ac: import org.junit.runner.RunWith;
1:d251156: import org.ops4j.pax.exam.Configuration;
1:d251156: import org.ops4j.pax.exam.CoreOptions;
1:f13c6ac: import org.ops4j.pax.exam.Option;
1:d251156: import org.ops4j.pax.exam.junit.PaxExam;
1:d15fd00: import org.osgi.framework.Bundle;
1:f13c6ac: import org.osgi.framework.Constants;
1:f13c6ac: import org.osgi.framework.ServiceRegistration;
1:f13c6ac: import org.osgi.service.blueprint.container.BlueprintContainer;
1:f13c6ac: import org.osgi.service.blueprint.container.ServiceUnavailableException;
1:f13c6ac: 
1:d251156: @RunWith(PaxExam.class)
1:d251156: public class TestReferences extends AbstractBlueprintIntegrationTest {
1:f13c6ac: 
1:d251156:     @SuppressWarnings("rawtypes")
1:f13c6ac:     @Test
1:f13c6ac:     public void testUnaryReference() throws Exception {
1:86224ba:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
1:f13c6ac:         assertNotNull(blueprintContainer);
1:f13c6ac: 
1:f13c6ac:         BindingListener listener = (BindingListener) blueprintContainer.getComponentInstance("bindingListener");
1:f13c6ac:         assertNull(listener.getA());
1:f13c6ac:         assertNull(listener.getReference());
1:f13c6ac: 
1:f13c6ac:         InterfaceA a = (InterfaceA) blueprintContainer.getComponentInstance("ref2");
1:f13c6ac:         try {
1:f13c6ac:             a.hello("world");
1:f13c6ac:             fail("A ServiceUnavailableException should have been thrown");
1:f13c6ac:         } catch (ServiceUnavailableException e) {
1:f13c6ac:             // Ignore, expected
1:f13c6ac:         }
1:f13c6ac: 
2:f13c6ac:         ServiceRegistration reg1 = bundleContext.registerService(InterfaceA.class.getName(), new InterfaceA() {
1:f13c6ac:             public String hello(String msg) {
1:f13c6ac:                 return "Hello " + msg + "!";
1:f13c6ac:             }
2:f13c6ac:         }, null);
1:cff3c76:         waitForAsynchronousHandling();
1:cff3c76: 
1:f13c6ac:         assertNotNull(listener.getA());
1:f13c6ac:         assertNotNull(listener.getReference());
1:f13c6ac:         assertEquals("Hello world!", a.hello("world"));
1:f13c6ac: 
1:d251156:         Hashtable<String, Object> props = new Hashtable<String, Object>();
1:f13c6ac:         props.put(Constants.SERVICE_RANKING, Integer.valueOf(1));
1:f13c6ac:         ServiceRegistration reg2 = bundleContext.registerService(InterfaceA.class.getName(), new InterfaceA() {
1:f13c6ac:             public String hello(String msg) {
1:f13c6ac:                 return "Good morning " + msg + "!";
1:f13c6ac:             }
1:f13c6ac:         }, props);
1:f13c6ac: 
1:cff3c76:         waitForAsynchronousHandling();
1:f13c6ac: 
1:f13c6ac:         assertNotNull(listener.getA());
1:f13c6ac:         assertNotNull(listener.getReference());
1:f13c6ac:         assertEquals("Hello world!", a.hello("world"));
1:cff3c76: 
1:f13c6ac:         reg1.unregister();
1:cff3c76:         waitForAsynchronousHandling();
1:f13c6ac:         assertNotNull(listener.getA());
1:f13c6ac:         assertNotNull(listener.getReference());
1:f13c6ac:         assertEquals("Good morning world!", a.hello("world"));
1:f13c6ac: 
1:f13c6ac:         reg2.unregister();
1:cff3c76:         waitForAsynchronousHandling();
1:f13c6ac: 
1:f13c6ac:         assertNull(listener.getA());
1:f13c6ac:         assertNull(listener.getReference());
1:f13c6ac:         try {
1:f13c6ac:             a.hello("world");
1:f13c6ac:             fail("A ServiceUnavailableException should have been thrown");
1:f13c6ac:         } catch (ServiceUnavailableException e) {
1:f13c6ac:             // Ignore, expected
1:f13c6ac:         }
1:f13c6ac:     }
1:cff3c76: 
1:f13c6ac:     @Test
1:f13c6ac:     public void testListReferences() throws Exception {
1:86224ba:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
1:f13c6ac:         assertNotNull(blueprintContainer);
1:f13c6ac: 
1:f13c6ac:         BindingListener listener = (BindingListener) blueprintContainer.getComponentInstance("listBindingListener");
1:f13c6ac:         assertNull(listener.getA());
1:f13c6ac:         assertNull(listener.getReference());
1:f13c6ac: 
1:d251156:         List<?> refs = (List<?>) blueprintContainer.getComponentInstance("ref-list");
1:f13c6ac:         assertNotNull(refs);
1:f13c6ac:         assertTrue(refs.isEmpty());
1:f13c6ac: 
1:d251156:         InterfaceA testService = new InterfaceA() {
1:f13c6ac:             public String hello(String msg) {
1:f13c6ac:                 return "Hello " + msg + "!";
1:f13c6ac:             }
1:d251156:         };
1:d251156:         bundleContext.registerService(InterfaceA.class.getName(), testService, null);
1:cff3c76:     
1:cff3c76:         waitForAsynchronousHandling();
1:f13c6ac:         assertNotNull(listener.getA());
1:f13c6ac:         assertNotNull(listener.getReference());
1:f13c6ac:         assertEquals(1, refs.size());
1:f13c6ac:         InterfaceA a = (InterfaceA) refs.get(0);
1:f13c6ac:         assertNotNull(a);
1:f13c6ac:         assertEquals("Hello world!", a.hello("world"));
1:f13c6ac: 
1:f13c6ac:     }
1:f13c6ac:     
1:d251156:     @SuppressWarnings("rawtypes")
1:e104a3b:     @Test
1:e104a3b:     public void testDefaultReference() throws Exception {
1:86224ba:       BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
1:e104a3b:       assertNotNull(blueprintContainer);
1:f13c6ac: 
1:e104a3b:       Runnable refRunnable = (Runnable) blueprintContainer.getComponentInstance("refWithDefault");
1:e104a3b:       DefaultRunnable defaultRunnable = (DefaultRunnable) blueprintContainer.getComponentInstance("defaultRunnable");
1:e104a3b:       refRunnable.run();
1:cff3c76:       waitForAsynchronousHandling();
1:cff3c76:       Thread.sleep(2000);
1:f13c6ac:       
1:e104a3b:       assertEquals("The default runnable was not called", 1, defaultRunnable.getCount());
1:f13c6ac:       
1:d251156:       final AtomicBoolean called = new AtomicBoolean(false);
1:d251156:       Runnable mockService = new Runnable() {
1:d251156:         public void run() {
1:d251156:             called.set(true);
1:d251156:         }
1:d251156:       };
1:f13c6ac:       
1:e104a3b:       ServiceRegistration reg = bundleContext.registerService(Runnable.class.getName(), mockService, null);
1:cff3c76:       waitForAsynchronousHandling();
1:cff3c76:       Thread.sleep(2000);
1:cff3c76: 
1:e104a3b:       refRunnable.run();
1:86224ba:       
1:e104a3b:       assertEquals("The default runnable was called when a service was bound", 1, defaultRunnable.getCount());
1:86224ba:       
1:d251156:       Assert.assertTrue("Service should have been called", called.get());
9:e104a3b:       
1:e104a3b:       reg.unregister();
1:cff3c76:       waitForAsynchronousHandling();
1:cff3c76:       Thread.sleep(2000);
1:cff3c76: 
1:e104a3b:       refRunnable.run();
1:e104a3b:       
1:e104a3b:       assertEquals("The default runnable was not called", 2, defaultRunnable.getCount());
1:e104a3b:     }
1:d15fd00:     
1:d15fd00:     @Test
1:d15fd00:     public void testReferencesCallableInDestroy() throws Exception {
1:d15fd00:       bundleContext.registerService(Runnable.class.getName(), new Thread(), null);
1:d15fd00:       
1:86224ba:       BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
1:d15fd00:       assertNotNull(blueprintContainer);
1:d15fd00:       
1:d15fd00:       DestroyTest dt = (DestroyTest) blueprintContainer.getComponentInstance("destroyCallingReference");
1:d15fd00:       
1:d15fd00:       Bundle b = findBundle("org.apache.aries.blueprint.sample");
1:d15fd00:       assertNotNull(b);
1:d15fd00:       b.stop();
1:d15fd00:       
1:d15fd00:       assertTrue("The destroy method was called", dt.waitForDestruction(1000));
1:d15fd00:       
1:d15fd00:       Exception e = dt.getDestroyFailure();
1:d15fd00:       
1:d15fd00:       if (e != null) throw e;
1:d15fd00:     }
1:d15fd00: 
1:d15fd00:     private Bundle findBundle(String bsn)
1:d15fd00:     {
1:d15fd00:       for (Bundle b : bundleContext.getBundles()) {
1:d15fd00:         if (bsn.equals(b.getSymbolicName())) return b;
1:d15fd00:       }
1:d15fd00:       
1:d15fd00:       return null;
1:d15fd00:     }
1:e104a3b: 
1:cff3c76:     private void waitForAsynchronousHandling() throws InterruptedException {
1:cff3c76:       // Since service events are handled asynchronously in AbstractServiceReferenceRecipe, pause
1:cff3c76:        Thread.sleep(200);
1:cff3c76:       
1:cff3c76:    }
1:cff3c76: 
1:d251156:    @Configuration
1:f13c6ac:     public static Option[] configuration() {
1:d251156:         return new Option[] {
1:d251156:                 CoreOptions.junitBundles(),
1:86224ba:                 Helper.blueprintBundles(),
1:c185a5a:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample")
1:d251156:         };
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.blueprint.itests.Helper.mvnBundle;
/////////////////////////////////////////////////////////////////////////
1:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample")
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.itests;
1: 
1: import java.util.Hashtable;
1: import java.util.List;
1: 
0: import org.apache.geronimo.blueprint.sample.BindingListener;
0: import org.apache.geronimo.blueprint.sample.InterfaceA;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import static org.ops4j.pax.exam.CoreOptions.felix;
0: import static org.ops4j.pax.exam.CoreOptions.mavenConfiguration;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.customFramework;
1: import org.ops4j.pax.exam.Option;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.profile;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.rawPaxRunnerOption;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: import org.osgi.service.blueprint.container.ServiceUnavailableException;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class TestReferences extends AbstractIntegrationTest {
1: 
1:     @Test
1:     public void testUnaryReference() throws Exception {
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.geronimo.blueprint.sample");
1:         assertNotNull(blueprintContainer);
1: 
1:         BindingListener listener = (BindingListener) blueprintContainer.getComponentInstance("bindingListener");
1:         assertNull(listener.getA());
1:         assertNull(listener.getReference());
1: 
1:         InterfaceA a = (InterfaceA) blueprintContainer.getComponentInstance("ref2");
1:         try {
1:             a.hello("world");
1:             fail("A ServiceUnavailableException should have been thrown");
1:         } catch (ServiceUnavailableException e) {
1:             // Ignore, expected
1:         }
1: 
1:         ServiceRegistration reg1 = bundleContext.registerService(InterfaceA.class.getName(), new InterfaceA() {
1:             public String hello(String msg) {
1:                 return "Hello " + msg + "!";
1:             }
1:         }, null);
1:         assertNotNull(listener.getA());
1:         assertNotNull(listener.getReference());
1:         assertEquals("Hello world!", a.hello("world"));
1: 
0:         Hashtable props = new Hashtable();
1:         props.put(Constants.SERVICE_RANKING, Integer.valueOf(1));
1:         ServiceRegistration reg2 = bundleContext.registerService(InterfaceA.class.getName(), new InterfaceA() {
1:             public String hello(String msg) {
1:                 return "Good morning " + msg + "!";
1:             }
1:         }, props);
1: 
1:         assertNotNull(listener.getA());
1:         assertNotNull(listener.getReference());
1:         assertEquals("Hello world!", a.hello("world"));
1: 
1:         reg1.unregister();
1:         assertNotNull(listener.getA());
1:         assertNotNull(listener.getReference());
1:         assertEquals("Good morning world!", a.hello("world"));
1: 
1:         reg2.unregister();
1:         assertNull(listener.getA());
1:         assertNull(listener.getReference());
1:         try {
1:             a.hello("world");
1:             fail("A ServiceUnavailableException should have been thrown");
1:         } catch (ServiceUnavailableException e) {
1:             // Ignore, expected
1:         }
1:     }
1: 
1:     @Test
1:     public void testListReferences() throws Exception {
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.geronimo.blueprint.sample");
1:         assertNotNull(blueprintContainer);
1: 
1:         BindingListener listener = (BindingListener) blueprintContainer.getComponentInstance("listBindingListener");
1:         assertNull(listener.getA());
1:         assertNull(listener.getReference());
1: 
0:         List refs = (List) blueprintContainer.getComponentInstance("ref-list");
1:         assertNotNull(refs);
1:         assertTrue(refs.isEmpty());
1: 
1:         ServiceRegistration reg1 = bundleContext.registerService(InterfaceA.class.getName(), new InterfaceA() {
1:             public String hello(String msg) {
1:                 return "Hello " + msg + "!";
1:             }
1:         }, null);
1:         assertNotNull(listener.getA());
1:         assertNotNull(listener.getReference());
1:         assertEquals(1, refs.size());
1:         InterfaceA a = (InterfaceA) refs.get(0);
1:         assertNotNull(a);
1:         assertEquals("Hello world!", a.hello("world"));
1: 
1:     }
1: 
0:     @org.ops4j.pax.exam.junit.Configuration
1:     public static Option[] configuration() {
0:         Option[] options = options(
0:             // Log
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:             // Felix Config Admin
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             // Felix mvn url handler
0:             mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
0:             // this is how you set the default log level when using pax logging (logProfile)
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 
0:             // Bundles
0:             mavenBundle("org.apache.geronimo.blueprint", "geronimo-blueprint"),
0:             mavenBundle("org.apache.geronimo.blueprint", "org.apache.geronimo.blueprint.sample"),
1: 
0: //            org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 
0:             equinox().version("3.5.0")
0:         );
0:         return options;
1:     }
1: 
1: }
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import junit.framework.Assert;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: @RunWith(PaxExam.class)
1: public class TestReferences extends AbstractBlueprintIntegrationTest {
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:         Hashtable<String, Object> props = new Hashtable<String, Object>();
/////////////////////////////////////////////////////////////////////////
1:         List<?> refs = (List<?>) blueprintContainer.getComponentInstance("ref-list");
1:         InterfaceA testService = new InterfaceA() {
1:         };
1:         bundleContext.registerService(InterfaceA.class.getName(), testService, null);
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:       final AtomicBoolean called = new AtomicBoolean(false);
1:       Runnable mockService = new Runnable() {
1:         public void run() {
1:             called.set(true);
1:         }
1:       };
/////////////////////////////////////////////////////////////////////////
1:       Assert.assertTrue("Service should have been called", called.get());
/////////////////////////////////////////////////////////////////////////
1:    @Configuration
1:         return new Option[] {
1:                 CoreOptions.junitBundles(),
0:                 CoreOptions.mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample")
1:         };
author:Holly Cummins
-------------------------------------------------------------------------------
commit:cff3c76
/////////////////////////////////////////////////////////////////////////
1:         waitForAsynchronousHandling();
1: 
/////////////////////////////////////////////////////////////////////////
1:         waitForAsynchronousHandling();
1: 
1:         waitForAsynchronousHandling();
1:         waitForAsynchronousHandling();
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:         waitForAsynchronousHandling();
/////////////////////////////////////////////////////////////////////////
1:       waitForAsynchronousHandling();
1:       Thread.sleep(2000);
1:       waitForAsynchronousHandling();
1:       Thread.sleep(2000);
1: 
/////////////////////////////////////////////////////////////////////////
1:       waitForAsynchronousHandling();
1:       Thread.sleep(2000);
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void waitForAsynchronousHandling() throws InterruptedException {
1:       // Since service events are handled asynchronously in AbstractServiceReferenceRecipe, pause
1:        Thread.sleep(200);
1:       
1:    }
1: 
0:    @org.ops4j.pax.exam.junit.Configuration
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
1: 
1:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
1:         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
1:       BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
1:       BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:         return testOptions(
0:                 paxLogging("INFO"),
0:                 equinox().version("3.5.0"),
1:                 Helper.blueprintBundles(),
1:                 
0:                 bundles("org.apache.aries.blueprint/org.apache.aries.blueprint.sample")
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:d15fd00
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.sample.DestroyTest;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testReferencesCallableInDestroy() throws Exception {
1:       bundleContext.registerService(Runnable.class.getName(), new Thread(), null);
1:       
0:       BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample");
1:       assertNotNull(blueprintContainer);
1:       
1:       DestroyTest dt = (DestroyTest) blueprintContainer.getComponentInstance("destroyCallingReference");
1:       
1:       Bundle b = findBundle("org.apache.aries.blueprint.sample");
1:       assertNotNull(b);
1:       b.stop();
1:       
1:       assertTrue("The destroy method was called", dt.waitForDestruction(1000));
1:       
1:       Exception e = dt.getDestroyFailure();
1:       
1:       if (e != null) throw e;
1:     }
1: 
1:     private Bundle findBundle(String bsn)
1:     {
1:       for (Bundle b : bundleContext.getBundles()) {
1:         if (bsn.equals(b.getSymbolicName())) return b;
1:       }
1:       
1:       return null;
1:     }
commit:e104a3b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.sample.DefaultRunnable;
0: import org.apache.aries.unittest.mocks.MethodCall;
0: import org.apache.aries.unittest.mocks.Skeleton;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testDefaultReference() throws Exception {
0:       BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample");
1:       assertNotNull(blueprintContainer);
1: 
1:       Runnable refRunnable = (Runnable) blueprintContainer.getComponentInstance("refWithDefault");
1:       DefaultRunnable defaultRunnable = (DefaultRunnable) blueprintContainer.getComponentInstance("defaultRunnable");
1:       refRunnable.run();
1:       
1:       assertEquals("The default runnable was not called", 1, defaultRunnable.getCount());
1:       
0:       Runnable mockService = Skeleton.newMock(Runnable.class);
1:       
1:       ServiceRegistration reg = bundleContext.registerService(Runnable.class.getName(), mockService, null);
1:       
1:       refRunnable.run();
1:       
1:       assertEquals("The default runnable was called when a service was bound", 1, defaultRunnable.getCount());
1:       
0:       Skeleton.getSkeleton(mockService).assertCalled(new MethodCall(Runnable.class, "run"));
1:       
1:       reg.unregister();
1:       
1:       refRunnable.run();
1:       
1:       assertEquals("The default runnable was not called", 2, defaultRunnable.getCount());
1:     }
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:             mavenBundle("asm", "asm-all"),
commit:cdc5675
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.osgi", "org.osgi.compendium"),
/////////////////////////////////////////////////////////////////////////
0: }
author:Lin Sun
-------------------------------------------------------------------------------
commit:2b87d24
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: 
0: import java.util.Hashtable;
0: import java.util.List;
0: 
1: import org.apache.aries.blueprint.sample.BindingListener;
1: import org.apache.aries.blueprint.sample.InterfaceA;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
commit:f263a8e
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:440effc
/////////////////////////////////////////////////////////////////////////
0:         options = updateOptions(options);
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.itests;
0: import org.apache.aries.blueprint.sample.BindingListener;
0: import org.apache.aries.blueprint.sample.InterfaceA;
commit:118f5f9
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample");
/////////////////////////////////////////////////////////////////////////
0:             mavenBundle("org.apache.aries.blueprint", "aries-blueprint"),
0:             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample"),
============================================================================