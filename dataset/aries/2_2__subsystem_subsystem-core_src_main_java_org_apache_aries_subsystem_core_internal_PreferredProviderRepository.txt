1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
7:67ef08f: 
1:67ef08f: import java.util.Collection;
1:67ef08f: import java.util.Collections;
1:67ef08f: import java.util.Map;
1:67ef08f: 
1:67ef08f: import org.apache.aries.subsystem.core.archive.PreferredProviderHeader;
1:67ef08f: import org.apache.aries.subsystem.core.archive.PreferredProviderRequirement;
1:8679657: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1:48255a0: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
1:8679657: import org.apache.aries.subsystem.core.repository.Repository;
1:48255a0: import org.osgi.framework.wiring.BundleRevision;
1:67ef08f: import org.osgi.resource.Capability;
1:67ef08f: import org.osgi.resource.Requirement;
1:48255a0: import org.osgi.resource.Resource;
1:67ef08f: 
1:d6eb080: public class PreferredProviderRepository implements org.apache.aries.subsystem.core.repository.Repository {
1:8679657:     private final CapabilitySetRepository repository;
1:67ef08f: 	private final SubsystemResource resource;
1:67ef08f: 	
1:67ef08f: 	public PreferredProviderRepository(SubsystemResource resource) {
1:67ef08f: 		this.resource = resource;
1:8679657: 		repository = new CapabilitySetRepository();
1:8679657: 		PreferredProviderHeader header = resource.getSubsystemManifest().getPreferredProviderHeader();
1:8679657: 		if (header != null) {
1:8679657: 		    Collection<PreferredProviderRequirement> requirements = header.toRequirements(resource);
1:8679657: 	        for (PreferredProviderRequirement requirement : requirements) {
1:8679657: 	            if (!addProviders(requirement, Activator.getInstance().getSystemRepository(), true)) {
1:8679657: 	                if (!addProviders(requirement, resource.getLocalRepository(), false)) {
1:8679657: 	                    addProviders(requirement, new RepositoryServiceRepository(), false);
1:8679657: 	                }
1:8679657: 	            }
1:8679657: 	        }
1:8679657: 		}
7:67ef08f: 	}
1:67ef08f: 
1:67ef08f: 	@Override
1:8679657: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1:8679657: 		return repository.findProviders(requirements);
1:67ef08f: 	}
1:67ef08f: 	
1:8679657: 	private boolean addProviders(Requirement requirement, Repository repository, boolean checkValid) {
1:8679657: 	    boolean result = false;
1:67ef08f: 		Map<Requirement, Collection<Capability>> map = repository.findProviders(Collections.singleton(requirement));
1:67ef08f: 		Collection<Capability> capabilities = map.get(requirement);
1:8679657: 		for (Capability capability : capabilities) {
1:8679657: 		    if (checkValid ? isValid(capability) : true) {
1:8679657: 		        this.repository.addResource(capability.getResource());
1:8679657: 		        result = true;
1:8679657: 		    }
1:67ef08f: 		}
2:67ef08f: 		return result;
1:67ef08f: 	}
1:67ef08f: 	
1:48255a0: 	/*
1:48255a0: 	 * This check is only done on capabilities provided by resources in the
1:48255a0: 	 * system repository. This currently includes only BasicSubsystem and
1:48255a0: 	 * BundleRevision.
1:48255a0: 	 */
1:67ef08f: 	private boolean isValid(Capability capability) {
1:8679657: 		for (BasicSubsystem parent : resource.getParents()) {
1:48255a0: 			Resource provider = capability.getResource();
1:48255a0: 			if (provider instanceof BundleRevision) {
1:48255a0: 				// To keep the optimization below, wrap bundle revisions with
1:48255a0: 				// a bundle constituent so that the comparison works.
1:48255a0: 				provider = new BundleConstituent(null, (BundleRevision)provider);
1:48255a0: 			}
1:48255a0: 			// Optimization from ARIES-1397. Perform a contains operation on the
1:48255a0: 			// parent constituents rather than use ResourceHelper.
1:48255a0: 		    if (parent.getConstituents().contains(provider)) {
1:8679657: 		        return true;
1:8679657: 		    }
1:8679657: 		}
1:307d743: 		return false;
1:67ef08f: 	}
1:67ef08f: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:48255a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.resource.Resource;
/////////////////////////////////////////////////////////////////////////
1: 	/*
1: 	 * This check is only done on capabilities provided by resources in the
1: 	 * system repository. This currently includes only BasicSubsystem and
1: 	 * BundleRevision.
1: 	 */
1: 			Resource provider = capability.getResource();
1: 			if (provider instanceof BundleRevision) {
1: 				// To keep the optimization below, wrap bundle revisions with
1: 				// a bundle constituent so that the comparison works.
1: 				provider = new BundleConstituent(null, (BundleRevision)provider);
1: 			}
1: 			// Optimization from ARIES-1397. Perform a contains operation on the
1: 			// parent constituents rather than use ResourceHelper.
1: 		    if (parent.getConstituents().contains(provider)) {
commit:8679657
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1: import org.apache.aries.subsystem.core.repository.Repository;
1:     private final CapabilitySetRepository repository;
1: 		repository = new CapabilitySetRepository();
1: 		PreferredProviderHeader header = resource.getSubsystemManifest().getPreferredProviderHeader();
1: 		if (header != null) {
1: 		    Collection<PreferredProviderRequirement> requirements = header.toRequirements(resource);
1: 	        for (PreferredProviderRequirement requirement : requirements) {
1: 	            if (!addProviders(requirement, Activator.getInstance().getSystemRepository(), true)) {
1: 	                if (!addProviders(requirement, resource.getLocalRepository(), false)) {
1: 	                    addProviders(requirement, new RepositoryServiceRepository(), false);
1: 	                }
1: 	            }
1: 	        }
1: 		}
1: 	public Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {
1: 		return repository.findProviders(requirements);
1: 	private boolean addProviders(Requirement requirement, Repository repository, boolean checkValid) {
1: 	    boolean result = false;
1: 		for (Capability capability : capabilities) {
1: 		    if (checkValid ? isValid(capability) : true) {
1: 		        this.repository.addResource(capability.getResource());
1: 		        result = true;
1: 		    }
1: 		for (BasicSubsystem parent : resource.getParents()) {
0: 		    if (parent.getConstituents().contains(resource)) {
1: 		        return true;
1: 		    }
1: 		}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
0: 		for (BasicSubsystem parent : resource.getParents())
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:307d743
/////////////////////////////////////////////////////////////////////////
0: 		for (AriesSubsystem parent : resource.getParents())
0: 			for (Resource constituent : parent.getConstituents())
0: 				if (ResourceHelper.areEqual(constituent, capability.getResource()))
0: 					return true;
1: 		return false;
commit:777b216
/////////////////////////////////////////////////////////////////////////
0: 		return resource.getParents().iterator().next().getConstituents().contains(capability.getResource());
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
0: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.core.archive.PreferredProviderHeader;
1: import org.apache.aries.subsystem.core.archive.PreferredProviderRequirement;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
0: import org.osgi.resource.Resource;
0: import org.osgi.service.repository.Repository;
1: 
0: public class PreferredProviderRepository implements Repository {
0: 	// @GuardedBy("this")
0: 	private boolean initialized;
1: 	
0: 	private final Repository localRepository;
0: 	private final Repository repositoryServiceRepository = new RepositoryServiceRepository();
1: 	private final SubsystemResource resource;
0: 	private final Collection<Resource> resources = new HashSet<Resource>();
0: 	private final Repository systemRepository = Activator.getInstance().getSystemRepository();
1: 	
1: 	public PreferredProviderRepository(SubsystemResource resource) {
1: 		this.resource = resource;
0: 		localRepository = resource.getLocalRepository();
1: 	}
1: 
1: 	@Override
0: 	public Map<Requirement, Collection<Capability>> findProviders(
0: 			Collection<? extends Requirement> requirements) {
0: 		synchronized (this) {
0: 			if (!initialized)
0: 				initialize();
1: 		}
0: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
0: 		for (Requirement requirement : requirements)
0: 			result.put(requirement, findProviders(requirement));
1: 		return result;
1: 	}
1: 	
0: 	private boolean addLocalRepositoryProviders(Requirement requirement) {
0: 		return addProviders(requirement, localRepository, false);
1: 	}
1: 	
0: 	private boolean addProviders(Requirement requirement, Repository repository, boolean checkValid) {
1: 		Map<Requirement, Collection<Capability>> map = repository.findProviders(Collections.singleton(requirement));
1: 		Collection<Capability> capabilities = map.get(requirement);
0: 		if (capabilities == null || capabilities.isEmpty())
0: 			return false;
0: 		for (Capability capability : map.get(requirement)) {
0: 			if (checkValid && !isValid(capability))
0: 				continue;
0: 			resources.add(capability.getResource());
1: 		}
0: 		return true;
1: 	}
1: 	
0: 	private boolean addRepositoryServiceProviders(Requirement requirement) {
0: 		return addProviders(requirement, repositoryServiceRepository, false);
1: 	}
1: 	
0: 	private boolean addSystemRepositoryProviders(Requirement requirement) {
0: 		return addProviders(requirement, systemRepository, true);
1: 	}
1: 	
0: 	private Collection<Capability> findProviders(Requirement requirement) {
0: 		ArrayList<Capability> result = new ArrayList<Capability>(resources.size());
0: 		for (Resource resource : resources)
0: 			for (Capability capability : resource.getCapabilities(requirement.getNamespace()))
0: 				if (ResourceHelper.matches(requirement, capability))
0: 					result.add(capability);
0: 		result.trimToSize();
1: 		return result;
1: 	}
1: 	
0: 	private void initialize() {
0: 		PreferredProviderHeader header = resource.getSubsystemManifest().getPreferredProviderHeader();
0: 		if (header == null)
0: 			return;
0: 		Collection<PreferredProviderRequirement> requirements = header.toRequirements(resource);
0: 		for (PreferredProviderRequirement requirement : requirements)
0: 			if (!addSystemRepositoryProviders(requirement))
0: 				if (!addLocalRepositoryProviders(requirement))
0: 					addRepositoryServiceProviders(requirement);
1: 	}
1: 	
1: 	private boolean isValid(Capability capability) {
0: 		return resource.getParent().getConstituents().contains(capability.getResource());
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: public class PreferredProviderRepository implements org.apache.aries.subsystem.core.repository.Repository {
0: 	private final org.apache.aries.subsystem.core.repository.Repository repositoryServiceRepository = new RepositoryServiceRepository();
0: 	private final org.apache.aries.subsystem.core.repository.Repository systemRepository = Activator.getInstance().getSystemRepository();
0: 			if (!initialized) {
0: 				initialized = true;
0: 			}
/////////////////////////////////////////////////////////////////////////
0: 		return addProviders(requirement, resource.getLocalRepository(), false);
0: 	private boolean addProviders(Requirement requirement, org.apache.aries.subsystem.core.repository.Repository repository, boolean checkValid) {
============================================================================