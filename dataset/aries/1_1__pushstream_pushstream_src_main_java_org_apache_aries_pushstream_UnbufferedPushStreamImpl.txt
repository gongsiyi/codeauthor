1:7fa86e8: /*
1:7fa86e8:  * Licensed to the Apache Software Foundation (ASF) under one
1:7fa86e8:  * or more contributor license agreements.  See the NOTICE file
1:7fa86e8:  * distributed with this work for additional information
1:7fa86e8:  * regarding copyright ownership.  The ASF licenses this file
1:7fa86e8:  * to you under the Apache License, Version 2.0 (the
1:7fa86e8:  * "License"); you may not use this file except in compliance
1:7fa86e8:  * with the License.  You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing,
1:7fa86e8:  * software distributed under the License is distributed on an
1:7fa86e8:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:7fa86e8:  * KIND, either express or implied.  See the License for the
1:7fa86e8:  * specific language governing permissions and limitations
1:7fa86e8:  * under the License.
1:7fa86e8:  */
1:7fa86e8: package org.apache.aries.pushstream;
1:7fa86e8: 
1:7fa86e8: import static java.util.Optional.ofNullable;
1:7fa86e8: import static org.apache.aries.pushstream.AbstractPushStreamImpl.State.*;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: import java.util.concurrent.Executor;
1:7fa86e8: import java.util.concurrent.ScheduledExecutorService;
1:7fa86e8: import java.util.concurrent.atomic.AtomicReference;
1:7fa86e8: import java.util.function.Function;
1:7fa86e8: 
1:7fa86e8: import org.osgi.util.pushstream.PushEvent;
1:7fa86e8: import org.osgi.util.pushstream.PushEventConsumer;
1:7fa86e8: import org.osgi.util.pushstream.PushStream;
1:7fa86e8: import org.osgi.util.pushstream.PushStreamProvider;
1:7fa86e8: 
1:7fa86e8: public class UnbufferedPushStreamImpl<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1:7fa86e8: 	extends AbstractPushStreamImpl<T> implements PushStream<T> {
1:7fa86e8: 	
1:7fa86e8: 	protected final Function<PushEventConsumer<T>,AutoCloseable>	connector;
1:7fa86e8: 	
1:7fa86e8: 	protected final AtomicReference<AutoCloseable>					upstream	= new AtomicReference<AutoCloseable>();
1:7fa86e8: 	
1:7fa86e8: 	public UnbufferedPushStreamImpl(PushStreamProvider psp,
1:7fa86e8: 			Executor executor, ScheduledExecutorService scheduler,
1:7fa86e8: 			Function<PushEventConsumer<T>,AutoCloseable> connector) {
1:7fa86e8: 		super(psp, executor, scheduler);
1:7fa86e8: 		this.connector = connector;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	protected boolean close(PushEvent<T> event) {
1:7fa86e8: 		if(super.close(event)) {
1:7fa86e8: 			ofNullable(upstream.getAndSet(() -> {
1:7fa86e8: 				// This block doesn't need to do anything, but the presence
1:7fa86e8: 				// of the Closable is needed to prevent duplicate begins
1:7fa86e8: 			})).ifPresent(c -> {
1:7fa86e8: 					try {
1:7fa86e8: 						c.close();
1:7fa86e8: 					} catch (Exception e) {
1:7fa86e8: 						// TODO Auto-generated catch block
1:7fa86e8: 						e.printStackTrace();
1:7fa86e8: 					}
1:7fa86e8: 				});
1:7fa86e8: 			return true;
1:7fa86e8: 		}
1:7fa86e8: 		return false;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	protected boolean begin() {
1:7fa86e8: 		if(closed.compareAndSet(BUILDING, STARTED)) {
1:7fa86e8: 			AutoCloseable toClose = connector.apply(this::handleEvent);
1:7fa86e8: 			if(!upstream.compareAndSet(null,toClose)) {
1:7fa86e8: 				//TODO log that we tried to connect twice...
1:7fa86e8: 				try {
1:7fa86e8: 					toClose.close();
1:7fa86e8: 				} catch (Exception e) {
1:7fa86e8: 					// TODO Auto-generated catch block
1:7fa86e8: 					e.printStackTrace();
1:7fa86e8: 				}
1:7fa86e8: 			}
1:7fa86e8: 
1:7fa86e8: 			if (closed.get() == CLOSED
1:7fa86e8: 					&& upstream.compareAndSet(toClose, null)) {
1:7fa86e8: 				// We closed before setting the upstream - close it now
1:7fa86e8: 				try {
1:7fa86e8: 					toClose.close();
1:7fa86e8: 				} catch (Exception e) {
1:7fa86e8: 					// TODO Auto-generated catch block
1:7fa86e8: 					e.printStackTrace();
1:7fa86e8: 				}
1:7fa86e8: 			}
1:7fa86e8: 			return true;
1:7fa86e8: 		}
1:7fa86e8: 		return false;
1:7fa86e8: 	}
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.pushstream;
1: 
1: import static java.util.Optional.ofNullable;
1: import static org.apache.aries.pushstream.AbstractPushStreamImpl.State.*;
1: 
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.ScheduledExecutorService;
1: import java.util.concurrent.atomic.AtomicReference;
1: import java.util.function.Function;
1: 
1: import org.osgi.util.pushstream.PushEvent;
1: import org.osgi.util.pushstream.PushEventConsumer;
1: import org.osgi.util.pushstream.PushStream;
1: import org.osgi.util.pushstream.PushStreamProvider;
1: 
1: public class UnbufferedPushStreamImpl<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1: 	extends AbstractPushStreamImpl<T> implements PushStream<T> {
1: 	
1: 	protected final Function<PushEventConsumer<T>,AutoCloseable>	connector;
1: 	
1: 	protected final AtomicReference<AutoCloseable>					upstream	= new AtomicReference<AutoCloseable>();
1: 	
1: 	public UnbufferedPushStreamImpl(PushStreamProvider psp,
1: 			Executor executor, ScheduledExecutorService scheduler,
1: 			Function<PushEventConsumer<T>,AutoCloseable> connector) {
1: 		super(psp, executor, scheduler);
1: 		this.connector = connector;
1: 	}
1: 
1: 	@Override
1: 	protected boolean close(PushEvent<T> event) {
1: 		if(super.close(event)) {
1: 			ofNullable(upstream.getAndSet(() -> {
1: 				// This block doesn't need to do anything, but the presence
1: 				// of the Closable is needed to prevent duplicate begins
1: 			})).ifPresent(c -> {
1: 					try {
1: 						c.close();
1: 					} catch (Exception e) {
1: 						// TODO Auto-generated catch block
1: 						e.printStackTrace();
1: 					}
1: 				});
1: 			return true;
1: 		}
1: 		return false;
1: 	}
1: 
1: 	@Override
1: 	protected boolean begin() {
1: 		if(closed.compareAndSet(BUILDING, STARTED)) {
1: 			AutoCloseable toClose = connector.apply(this::handleEvent);
1: 			if(!upstream.compareAndSet(null,toClose)) {
1: 				//TODO log that we tried to connect twice...
1: 				try {
1: 					toClose.close();
1: 				} catch (Exception e) {
1: 					// TODO Auto-generated catch block
1: 					e.printStackTrace();
1: 				}
1: 			}
1: 
1: 			if (closed.get() == CLOSED
1: 					&& upstream.compareAndSet(toClose, null)) {
1: 				// We closed before setting the upstream - close it now
1: 				try {
1: 					toClose.close();
1: 				} catch (Exception e) {
1: 					// TODO Auto-generated catch block
1: 					e.printStackTrace();
1: 				}
1: 			}
1: 			return true;
1: 		}
1: 		return false;
1: 	}
1: }
============================================================================