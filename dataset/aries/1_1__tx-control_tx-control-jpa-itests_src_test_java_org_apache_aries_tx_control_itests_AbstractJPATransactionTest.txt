1:e7c1ea5: /*
1:e7c1ea5:  * Licensed to the Apache Software Foundation (ASF) under one
1:e7c1ea5:  * or more contributor license agreements.  See the NOTICE file
1:e7c1ea5:  * distributed with this work for additional information
1:e7c1ea5:  * regarding copyright ownership.  The ASF licenses this file
1:e7c1ea5:  * to you under the Apache License, Version 2.0 (the
1:e7c1ea5:  * "License"); you may not use this file except in compliance
1:e7c1ea5:  * with the License.  You may obtain a copy of the License at
1:e7c1ea5:  *
1:e7c1ea5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e7c1ea5:  *
1:e7c1ea5:  * Unless required by applicable law or agreed to in writing,
1:e7c1ea5:  * software distributed under the License is distributed on an
1:e7c1ea5:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:e7c1ea5:  * KIND, either express or implied.  See the License for the
1:e7c1ea5:  * specific language governing permissions and limitations
1:e7c1ea5:  * under the License.
1:e7c1ea5:  */
1:e7c1ea5: package org.apache.aries.tx.control.itests;
3:e7c1ea5: 
1:4c0430e: import static java.lang.Boolean.getBoolean;
1:e7c1ea5: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:e7c1ea5: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:e7c1ea5: import static org.ops4j.pax.exam.CoreOptions.options;
1:e7c1ea5: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:e7c1ea5: import static org.ops4j.pax.exam.CoreOptions.when;
1:e7c1ea5: 
1:e7c1ea5: import java.io.File;
1:e7c1ea5: import java.io.IOException;
1:f6f7de7: import java.util.ArrayList;
1:e7c1ea5: import java.util.Dictionary;
1:e7c1ea5: import java.util.Hashtable;
1:f6f7de7: import java.util.List;
1:f6f7de7: import java.util.NoSuchElementException;
1:e7c1ea5: 
1:f6f7de7: import javax.inject.Inject;
1:e7c1ea5: import javax.persistence.EntityManager;
1:e7c1ea5: 
1:e7c1ea5: import org.h2.tools.Server;
1:e7c1ea5: import org.junit.After;
1:e7c1ea5: import org.junit.Before;
1:e7c1ea5: import org.junit.runner.RunWith;
1:e7c1ea5: import org.ops4j.pax.exam.Configuration;
1:e7c1ea5: import org.ops4j.pax.exam.CoreOptions;
1:e7c1ea5: import org.ops4j.pax.exam.Option;
1:e7c1ea5: import org.ops4j.pax.exam.ProbeBuilder;
1:e7c1ea5: import org.ops4j.pax.exam.TestProbeBuilder;
1:e7c1ea5: import org.ops4j.pax.exam.junit.PaxExam;
1:e7c1ea5: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:e7c1ea5: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:f6f7de7: import org.osgi.framework.BundleContext;
1:f6f7de7: import org.osgi.framework.Filter;
1:f6f7de7: import org.osgi.framework.FrameworkUtil;
1:f6f7de7: import org.osgi.framework.InvalidSyntaxException;
1:f6f7de7: import org.osgi.framework.ServiceReference;
1:e7c1ea5: import org.osgi.service.cm.ConfigurationAdmin;
1:e7c1ea5: import org.osgi.service.jdbc.DataSourceFactory;
1:e7c1ea5: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:e7c1ea5: import org.osgi.service.transaction.control.TransactionControl;
1:e7c1ea5: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1:f6f7de7: import org.osgi.util.tracker.ServiceTracker;
1:e7c1ea5: 
1:e7c1ea5: @RunWith(PaxExam.class)
1:e7c1ea5: @ExamReactorStrategy(PerClass.class)
1:f6f7de7: public abstract class AbstractJPATransactionTest {
1:e7c1ea5: 
1:4c0430e: 	protected static final String TX_CONTROL_FILTER = "tx.control.filter";
1:96a0efa: 	protected static final String ARIES_EMF_BUILDER_TARGET_FILTER = "aries.emf.builder.target.filter";
1:4c0430e: 	protected static final String IS_XA = "aries.test.is.xa";
1:96a0efa: 
1:f6f7de7: 	@Inject
1:f6f7de7: 	BundleContext context;
1:f6f7de7: 	
1:e7c1ea5: 	protected TransactionControl txControl;
1:e7c1ea5: 
1:e7c1ea5: 	protected EntityManager em;
1:e7c1ea5: 
1:e7c1ea5: 	private Server server;
1:f6f7de7: 	
1:f6f7de7: 	private final List<ServiceTracker<?,?>> trackers = new ArrayList<>();
1:e7c1ea5: 
1:e7c1ea5: 	@Before
1:e7c1ea5: 	public void setUp() throws Exception {
1:e7c1ea5: 		
1:f6f7de7: 		txControl = getService(TransactionControl.class, System.getProperty(TX_CONTROL_FILTER), 5000);
1:e7c1ea5: 		
1:e7c1ea5: 		server = Server.createTcpServer("-tcpPort", "0");
1:e7c1ea5: 		server.start();
1:e7c1ea5: 		
1:e7c1ea5: 		String jdbcUrl = "jdbc:h2:tcp://127.0.0.1:" + server.getPort() + "/" + getRemoteDBPath();
1:e7c1ea5: 		
1:e7c1ea5: 		em = configuredEntityManager(jdbcUrl);
2:e7c1ea5: 	}
1:b73433a: 
1:74e23ff: 	protected <T> T getService(Class<T> clazz, long timeout) {
1:f6f7de7: 		try {
1:f6f7de7: 			return getService(clazz, null, timeout);
1:f6f7de7: 		} catch (InvalidSyntaxException e) {
1:f6f7de7: 			throw new IllegalArgumentException(e);
1:f6f7de7: 		}
1:f6f7de7: 	}
1:f6f7de7: 
1:74e23ff: 	protected <T> T getService(Class<T> clazz, String filter, long timeout) throws InvalidSyntaxException {
1:f6f7de7: 		Filter f = FrameworkUtil.createFilter(filter == null ? "(|(foo=bar)(!(foo=bar)))" : filter); 
1:f6f7de7: 		
1:f6f7de7: 		ServiceTracker<T, T> tracker = new ServiceTracker<T, T>(context, clazz, null) {
1:f6f7de7: 			@Override
1:f6f7de7: 			public T addingService(ServiceReference<T> reference) {
1:f6f7de7: 				return f.match(reference) ? super.addingService(reference) : null;
1:f6f7de7: 			}
1:f6f7de7: 		};
1:f6f7de7: 
1:f6f7de7: 		tracker.open();
1:f6f7de7: 		try {
1:f6f7de7: 			T t = tracker.waitForService(timeout);
1:f6f7de7: 			if(t == null) {
1:f6f7de7: 				throw new NoSuchElementException(clazz.getName());
1:f6f7de7: 			}
1:f6f7de7: 			return t;
1:f6f7de7: 		} catch (InterruptedException e) {
1:f6f7de7: 			throw new RuntimeException("Error waiting for service " + clazz.getName(), e);
1:f6f7de7: 		} finally {
1:f6f7de7: 			trackers.add(tracker);
1:f6f7de7: 		}
1:f6f7de7: 	}
1:f6f7de7: 	
1:e7c1ea5: 	private String getRemoteDBPath() {
1:e7c1ea5: 		String fullResourceName = getClass().getName().replace('.', '/') + ".class";
1:e7c1ea5: 		
1:374d886: 		String resourcePath = getClass().getClassLoader().getResource(fullResourceName).getPath();
1:e7c1ea5: 		
1:e7c1ea5: 		File testClassesDir = new File(resourcePath.substring(0, resourcePath.length() - fullResourceName.length()));
1:e7c1ea5: 		
1:374d886: 		return new File(testClassesDir.getParentFile(), "testdb/db1").getAbsolutePath();
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	private EntityManager configuredEntityManager(String jdbcUrl) throws IOException {
1:e7c1ea5: 		
1:b73433a: 		Dictionary<String, Object> props = getBaseProperties();
1:e7c1ea5: 		
1:e7c1ea5: 		props.put(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS, "org.h2.Driver");
1:e7c1ea5: 		props.put(DataSourceFactory.JDBC_URL, jdbcUrl);
1:e7c1ea5: 		props.put(EntityManagerFactoryBuilder.JPA_UNIT_NAME, "test-unit");
1:e7c1ea5: 		
1:96a0efa: 		String filter = System.getProperty(ARIES_EMF_BUILDER_TARGET_FILTER);
1:96a0efa: 		
1:96a0efa: 		if(filter != null) {
1:96a0efa: 			props.put(ARIES_EMF_BUILDER_TARGET_FILTER, filter);
1:96a0efa: 		}
1:96a0efa: 		
1:f6f7de7: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:e7c1ea5: 		
1:4c0430e: 		String pid = getBoolean(IS_XA) ? "org.apache.aries.tx.control.jpa.xa" :
1:4c0430e: 				"org.apache.aries.tx.control.jpa.local"; 
1:e7c1ea5: 		
1:e7c1ea5: 		System.out.println("Configuring connection provider with pid " + pid);
1:e7c1ea5: 		
1:e7c1ea5: 		org.osgi.service.cm.Configuration config = cm.createFactoryConfiguration(
1:e7c1ea5: 				pid, null);
1:e7c1ea5: 		config.update(props);
1:e7c1ea5: 		
1:f6f7de7: 		return getService(JPAEntityManagerProvider.class, 5000).getResource(txControl);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:b73433a: 	protected Dictionary<String, Object> getBaseProperties() {
1:b73433a: 		return new Hashtable<>();
1:b73433a: 	}
1:e7c1ea5: 	
1:e7c1ea5: 	@After
1:e7c1ea5: 	public void tearDown() {
1:e7c1ea5: 
1:e7c1ea5: 		clearConfiguration();
1:e7c1ea5: 		
1:e7c1ea5: 		if(server != null) {
1:e7c1ea5: 			server.stop();
1:e7c1ea5: 		}
1:e7c1ea5: 
1:f6f7de7: 		trackers.stream().forEach(ServiceTracker::close);
1:f6f7de7: 		
1:e7c1ea5: 		em = null;
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	private void clearConfiguration() {
1:f6f7de7: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:e7c1ea5: 		org.osgi.service.cm.Configuration[] cfgs = null;
2:e7c1ea5: 		try {
1:e7c1ea5: 			cfgs = cm.listConfigurations(null);
1:e7c1ea5: 		} catch (Exception e1) {
1:e7c1ea5: 			// TODO Auto-generated catch block
1:e7c1ea5: 			e1.printStackTrace();
1:e7c1ea5: 		}
1:e7c1ea5: 		
1:e7c1ea5: 		if(cfgs != null) {
1:e7c1ea5: 			for(org.osgi.service.cm.Configuration cfg : cfgs) {
1:e7c1ea5: 				try {
1:e7c1ea5: 					cfg.delete();
1:e7c1ea5: 				} catch (Exception e) {}
1:e7c1ea5: 			}
1:e7c1ea5: 			try {
1:e7c1ea5: 				Thread.sleep(250);
1:e7c1ea5: 			} catch (InterruptedException e) {
1:e7c1ea5: 				// TODO Auto-generated catch block
2:e7c1ea5: 				e.printStackTrace();
1:e7c1ea5: 			}
1:e7c1ea5: 		}
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	@ProbeBuilder
1:e7c1ea5: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1:e7c1ea5: 	    // makes sure the generated Test-Bundle contains this import!
1:e7c1ea5: 	    probe.setHeader("Meta-Persistence", "META-INF/persistence.xml");
1:e7c1ea5: 	    return probe;
1:e7c1ea5: 	}
1:e7c1ea5: 	
1:e7c1ea5: 	@Configuration
1:e7c1ea5: 	public Option[] localTxConfiguration() {
1:e7c1ea5: 		String localRepo = System.getProperty("maven.repo.local");
1:e7c1ea5: 		if (localRepo == null) {
1:e7c1ea5: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:e7c1ea5: 		}
1:e7c1ea5: 		
1:e7c1ea5: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:e7c1ea5: 				when(localRepo != null)
1:e7c1ea5: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:e7c1ea5: 				localTxControlService(),
1:e7c1ea5: 				localJpaResourceProviderWithH2(),
1:96a0efa: 				jpaProvider(),
1:e7c1ea5: 				ariesJPA(),
1:e7c1ea5: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:e7c1ea5: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:e7c1ea5: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:e7c1ea5: 				
1:4c0430e: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:4c0430e: 				);
1:4c0430e: 	}
1:4c0430e: 
1:4c0430e: 	@Configuration
1:4c0430e: 	public Option[] xaTxConfiguration() {
1:4c0430e: 		String localRepo = System.getProperty("maven.repo.local");
1:4c0430e: 		if (localRepo == null) {
1:4c0430e: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:4c0430e: 		}
1:4c0430e: 		
1:4c0430e: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:4c0430e: 				when(localRepo != null)
1:4c0430e: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:4c0430e: 				systemProperty(IS_XA).value(Boolean.TRUE.toString()),
1:4c0430e: 				xaTxControlService(),
1:4c0430e: 				xaJpaResourceProviderWithH2(),
1:4c0430e: 				jpaProvider(),
1:4c0430e: 				ariesJPA(),
1:4c0430e: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1:4c0430e: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:4c0430e: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:4c0430e: 				
1:4c0430e: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1:e7c1ea5: 				);
1:e7c1ea5: 	}
1:e7c1ea5: 
1:e7c1ea5: 	public Option localTxControlService() {
2:e7c1ea5: 		return CoreOptions.composite(
1:4c0430e: 				systemProperty(TX_CONTROL_FILTER).value("(osgi.local.enabled=true)"),
1:e7c1ea5: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-local").versionAsInProject());
1:e7c1ea5: 	}
1:e7c1ea5: 
1:4c0430e: 	public Option xaTxControlService() {
1:4c0430e: 		return CoreOptions.composite(
1:4c0430e: 				systemProperty(TX_CONTROL_FILTER).value("(osgi.xa.enabled=true)"),
1:4c0430e: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-xa").versionAsInProject());
1:4c0430e: 	}
1:4c0430e: 
1:e7c1ea5: 	public Option localJpaResourceProviderWithH2() {
1:e7c1ea5: 		return CoreOptions.composite(
1:e7c1ea5: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1:e7c1ea5: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jpa-local").versionAsInProject());
1:e7c1ea5: 	}
1:e7c1ea5: 	
1:4c0430e: 	public Option xaJpaResourceProviderWithH2() {
1:4c0430e: 		return CoreOptions.composite(
1:4c0430e: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1:4c0430e: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jpa-xa").versionAsInProject());
1:4c0430e: 	}
1:4c0430e: 	
1:96a0efa: 	public Option ariesJPA() {
1:96a0efa: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container", ariesJPAVersion());
1:e7c1ea5: 	}
1:e7c1ea5: 
1:96a0efa: 	protected String ariesJPAVersion() {
1:96a0efa: 		return "2.3.0";
1:e7c1ea5: 	}
1:96a0efa: 	
1:96a0efa: 	protected abstract Option jpaProvider();
1:e7c1ea5: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:74e23ff
/////////////////////////////////////////////////////////////////////////
1: 	protected <T> T getService(Class<T> clazz, long timeout) {
/////////////////////////////////////////////////////////////////////////
1: 	protected <T> T getService(Class<T> clazz, String filter, long timeout) throws InvalidSyntaxException {
commit:f6f7de7
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.NoSuchElementException;
1: import javax.inject.Inject;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.util.tracker.ServiceTracker;
1: public abstract class AbstractJPATransactionTest {
1: 	@Inject
1: 	BundleContext context;
1: 	
1: 	
1: 	private final List<ServiceTracker<?,?>> trackers = new ArrayList<>();
1: 		txControl = getService(TransactionControl.class, System.getProperty(TX_CONTROL_FILTER), 5000);
/////////////////////////////////////////////////////////////////////////
0: 	private <T> T getService(Class<T> clazz, long timeout) {
1: 		try {
1: 			return getService(clazz, null, timeout);
1: 		} catch (InvalidSyntaxException e) {
1: 			throw new IllegalArgumentException(e);
1: 		}
1: 	}
1: 
0: 	private <T> T getService(Class<T> clazz, String filter, long timeout) throws InvalidSyntaxException {
1: 		Filter f = FrameworkUtil.createFilter(filter == null ? "(|(foo=bar)(!(foo=bar)))" : filter); 
1: 		
1: 		ServiceTracker<T, T> tracker = new ServiceTracker<T, T>(context, clazz, null) {
1: 			@Override
1: 			public T addingService(ServiceReference<T> reference) {
1: 				return f.match(reference) ? super.addingService(reference) : null;
1: 			}
1: 		};
1: 
1: 		tracker.open();
1: 		try {
1: 			T t = tracker.waitForService(timeout);
1: 			if(t == null) {
1: 				throw new NoSuchElementException(clazz.getName());
1: 			}
1: 			return t;
1: 		} catch (InterruptedException e) {
1: 			throw new RuntimeException("Error waiting for service " + clazz.getName(), e);
1: 		} finally {
1: 			trackers.add(tracker);
1: 		}
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
/////////////////////////////////////////////////////////////////////////
1: 		return getService(JPAEntityManagerProvider.class, 5000).getResource(txControl);
/////////////////////////////////////////////////////////////////////////
1: 		trackers.stream().forEach(ServiceTracker::close);
1: 		
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:374d886
/////////////////////////////////////////////////////////////////////////
1: 		String resourcePath = getClass().getClassLoader().getResource(fullResourceName).getPath();
1: 		return new File(testClassesDir.getParentFile(), "testdb/db1").getAbsolutePath();
commit:f87416c
/////////////////////////////////////////////////////////////////////////
commit:4c0430e
/////////////////////////////////////////////////////////////////////////
1: import static java.lang.Boolean.getBoolean;
/////////////////////////////////////////////////////////////////////////
1: 	protected static final String TX_CONTROL_FILTER = "tx.control.filter";
1: 	protected static final String IS_XA = "aries.test.is.xa";
/////////////////////////////////////////////////////////////////////////
0: 		txControl = context().getService(TransactionControl.class, System.getProperty(TX_CONTROL_FILTER), 5000);
/////////////////////////////////////////////////////////////////////////
1: 		String pid = getBoolean(IS_XA) ? "org.apache.aries.tx.control.jpa.xa" :
1: 				"org.apache.aries.tx.control.jpa.local"; 
/////////////////////////////////////////////////////////////////////////
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
1: 
1: 	@Configuration
1: 	public Option[] xaTxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				systemProperty(IS_XA).value(Boolean.TRUE.toString()),
1: 				xaTxControlService(),
1: 				xaJpaResourceProviderWithH2(),
1: 				jpaProvider(),
1: 				ariesJPA(),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
1: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				systemProperty(TX_CONTROL_FILTER).value("(osgi.local.enabled=true)"),
1: 	public Option xaTxControlService() {
1: 		return CoreOptions.composite(
1: 				systemProperty(TX_CONTROL_FILTER).value("(osgi.xa.enabled=true)"),
0: 				mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-xa").versionAsInProject());
1: 	}
1: 
1: 	public Option xaJpaResourceProviderWithH2() {
1: 		return CoreOptions.composite(
1: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jpa-xa").versionAsInProject());
1: 	}
1: 	
commit:b73433a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		Dictionary<String, Object> props = getBaseProperties();
/////////////////////////////////////////////////////////////////////////
1: 
1: 	protected Dictionary<String, Object> getBaseProperties() {
1: 		return new Hashtable<>();
1: 	}
/////////////////////////////////////////////////////////////////////////
0: 				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
commit:6ff7105
/////////////////////////////////////////////////////////////////////////
0: import javax.persistence.criteria.CriteriaBuilder;
0: import javax.persistence.criteria.CriteriaDelete;
/////////////////////////////////////////////////////////////////////////
0: 				{
0: 					CriteriaBuilder cb = em.getCriteriaBuilder();
0: 					CriteriaDelete<Message> delete = cb.createCriteriaDelete(Message.class);
0: 					delete.from(Message.class);
0: 					return em.createQuery(delete).executeUpdate();
0: 				});
commit:96a0efa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	protected static final String ARIES_EMF_BUILDER_TARGET_FILTER = "aries.emf.builder.target.filter";
1: 
/////////////////////////////////////////////////////////////////////////
1: 		String filter = System.getProperty(ARIES_EMF_BUILDER_TARGET_FILTER);
1: 		
1: 		if(filter != null) {
1: 			props.put(ARIES_EMF_BUILDER_TARGET_FILTER, filter);
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
1: 				jpaProvider(),
/////////////////////////////////////////////////////////////////////////
1: 	public Option ariesJPA() {
1: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container", ariesJPAVersion());
1: 	protected String ariesJPAVersion() {
1: 		return "2.3.0";
1: 	
1: 	protected abstract Option jpaProvider();
commit:e7c1ea5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
0: import static org.ops4j.pax.exam.CoreOptions.bootClasspathLibrary;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemPackage;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.persistence.EntityManager;
1: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import org.apache.aries.tx.control.itests.entity.Message;
1: import org.h2.tools.Server;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.ProbeBuilder;
1: import org.ops4j.pax.exam.TestProbeBuilder;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
0: public abstract class AbstractJPATransactionTest extends AbstractIntegrationTest {
1: 
1: 	protected TransactionControl txControl;
1: 
1: 	protected EntityManager em;
1: 
1: 	private Server server;
1: 
1: 	@Before
1: 	public void setUp() throws Exception {
1: 		
0: 		txControl = context().getService(TransactionControl.class, 5000);
1: 		
1: 		server = Server.createTcpServer("-tcpPort", "0");
1: 		server.start();
1: 		
1: 		String jdbcUrl = "jdbc:h2:tcp://127.0.0.1:" + server.getPort() + "/" + getRemoteDBPath();
1: 		
1: 		em = configuredEntityManager(jdbcUrl);
1: 	}
1: 
1: 	private String getRemoteDBPath() {
1: 		String fullResourceName = getClass().getName().replace('.', '/') + ".class";
1: 		
0: 		String resourcePath = getClass().getResource(getClass().getSimpleName() + ".class").getPath();
1: 		
1: 		File testClassesDir = new File(resourcePath.substring(0, resourcePath.length() - fullResourceName.length()));
1: 		
0: 		String dbPath = new File(testClassesDir.getParentFile(), "testdb/db1").getAbsolutePath();
0: 		return dbPath;
1: 	}
1: 
1: 	private EntityManager configuredEntityManager(String jdbcUrl) throws IOException {
1: 		
0: 		Dictionary<String, Object> props = new Hashtable<>();
1: 		
1: 		props.put(DataSourceFactory.OSGI_JDBC_DRIVER_CLASS, "org.h2.Driver");
1: 		props.put(DataSourceFactory.JDBC_URL, jdbcUrl);
1: 		props.put(EntityManagerFactoryBuilder.JPA_UNIT_NAME, "test-unit");
1: 		
0: 		ConfigurationAdmin cm = context().getService(ConfigurationAdmin.class, 5000);
1: 		
0: 		String pid = "org.apache.aries.tx.control.jpa.local"; 
1: 		
1: 		System.out.println("Configuring connection provider with pid " + pid);
1: 		
1: 		org.osgi.service.cm.Configuration config = cm.createFactoryConfiguration(
1: 				pid, null);
1: 		config.update(props);
1: 		
0: 		return context().getService(JPAEntityManagerProvider.class, 5000).getResource(txControl);
1: 	}
1: 	
1: 	@After
1: 	public void tearDown() {
1: 
1: 		try {
0: 			txControl.required(() -> 
0: 				em.createQuery(
0: 						em.getCriteriaBuilder().createCriteriaDelete(Message.class)
0: 				).executeUpdate());
0: 		} catch (Exception e) {
1: 			e.printStackTrace();
1: 		}
1: 		
1: 		
1: 		clearConfiguration();
1: 		
1: 		if(server != null) {
1: 			server.stop();
1: 		}
1: 
1: 		em = null;
1: 	}
1: 
1: 	private void clearConfiguration() {
0: 		ConfigurationAdmin cm = context().getService(ConfigurationAdmin.class, 5000);
1: 		org.osgi.service.cm.Configuration[] cfgs = null;
1: 		try {
1: 			cfgs = cm.listConfigurations(null);
1: 		} catch (Exception e1) {
1: 			// TODO Auto-generated catch block
1: 			e1.printStackTrace();
1: 		}
1: 		
1: 		if(cfgs != null) {
1: 			for(org.osgi.service.cm.Configuration cfg : cfgs) {
1: 				try {
1: 					cfg.delete();
1: 				} catch (Exception e) {}
1: 			}
1: 			try {
1: 				Thread.sleep(250);
1: 			} catch (InterruptedException e) {
1: 				// TODO Auto-generated catch block
1: 				e.printStackTrace();
1: 			}
1: 		}
1: 	}
1: 
1: 	@ProbeBuilder
1: 	public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {
1: 	    // makes sure the generated Test-Bundle contains this import!
1: 	    probe.setHeader("Meta-Persistence", "META-INF/persistence.xml");
1: 	    return probe;
1: 	}
1: 	
1: 	@Configuration
1: 	public Option[] localTxConfiguration() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		
1: 		return options(junitBundles(), systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null)
1: 				.useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
0: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				localTxControlService(),
1: 				localJpaResourceProviderWithH2(),
0: 				eclipseLink2_3_0(),
1: 				ariesJPA(),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1: 				
0: //				,CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")
1: 				);
1: 	}
1: 
1: 	public Option localTxControlService() {
1: 		return CoreOptions.composite(
0: 				mavenBundle("org.apache.felix", "org.apache.felix.coordinator").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-service-local").versionAsInProject());
1: 	}
1: 
1: 	public Option localJpaResourceProviderWithH2() {
1: 		return CoreOptions.composite(
1: 				mavenBundle("com.h2database", "h2").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.tx-control", "tx-control-provider-jpa-local").versionAsInProject());
1: 	}
1: 	
0: 	public Option eclipseLink2_3_0() {
1: 		return CoreOptions.composite(
0: 				systemPackage("javax.transaction;version=1.1"),
0: 				systemPackage("javax.transaction.xa;version=1.1"),
0: 				bootClasspathLibrary(mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec", "1.1.1")),
0: 				mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa", "2.6.0"),
0: 				mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.core", "2.6.0"),
0: 				mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.asm", "2.6.0"),
0: 				mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.antlr", "2.6.0"),
0: 				mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.jpa.jpql", "2.6.0"),
0: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.eclipselink.adapter", "2.3.0"));
1: 	}
1: 
0: 	public Option ariesJPA() {
0: 		return mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container", "2.3.0");
1: 	}
1: }
============================================================================