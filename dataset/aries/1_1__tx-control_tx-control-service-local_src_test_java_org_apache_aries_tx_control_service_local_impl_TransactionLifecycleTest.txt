1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:8a2da19: package org.apache.aries.tx.control.service.local.impl;
9:8a2da19: 
1:8a2da19: import static org.junit.Assert.assertEquals;
1:8a2da19: import static org.junit.Assert.assertFalse;
1:8a2da19: import static org.junit.Assert.assertNull;
1:8a2da19: import static org.junit.Assert.assertTrue;
1:8a2da19: 
1:8a2da19: import org.junit.Before;
1:8a2da19: import org.junit.Test;
1:8a2da19: import org.junit.runner.RunWith;
1:8a2da19: import org.mockito.Mock;
1:8a2da19: import org.mockito.runners.MockitoJUnitRunner;
1:8a2da19: import org.osgi.service.transaction.control.LocalResource;
1:8a2da19: import org.osgi.service.transaction.control.ResourceProvider;
1:8a2da19: 
1:8a2da19: @RunWith(MockitoJUnitRunner.class)
1:8a2da19: public class TransactionLifecycleTest {
1:8a2da19: 
4:8a2da19: 	@Mock
1:8a2da19: 	ResourceProvider<Object> testProvider;
1:8a2da19: 	@Mock
1:8a2da19: 	LocalResource testResource;
1:8a2da19: 
1:8a2da19: 	TransactionControlImpl txControl;
1:8a2da19: 
1:8a2da19: 	@Before
1:8a2da19: 	public void setUp() {
1:f87416c: 		txControl = new TransactionControlImpl();
2:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testRequired() {
1:8a2da19: 
1:8a2da19: 		txControl.required(() -> {
1:8a2da19: 
1:8a2da19: 			assertTrue(txControl.activeTransaction());
1:8a2da19: 
5:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testNestedRequired() {
1:8a2da19: 
1:8a2da19: 		txControl.required(() -> {
1:8a2da19: 
1:8a2da19: 			assertTrue(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:8a2da19: 			txControl.getCurrentContext().putScopedValue("visible", Boolean.TRUE);
1:8a2da19: 
1:8a2da19: 			txControl.required(() -> {
1:8a2da19: 				assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1:8a2da19: 				assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1:8a2da19: 				txControl.getCurrentContext().putScopedValue("visible", Boolean.FALSE);
1:8a2da19: 				return null;
1:8a2da19: 			});
1:8a2da19: 
1:8a2da19: 			assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1:8a2da19: 			assertEquals(Boolean.FALSE, txControl.getCurrentContext().getScopedValue("visible"));
1:8a2da19: 			
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testNestedRequiredFromNoTran() {
1:8a2da19: 
1:8a2da19: 		txControl.supports(() -> {
1:8a2da19: 
1:8a2da19: 			assertFalse(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			txControl.getCurrentContext().putScopedValue("invisible", Boolean.TRUE);
1:8a2da19: 
1:8a2da19: 			txControl.required(() -> {
1:8a2da19: 				assertTrue(txControl.activeTransaction());
1:8a2da19: 				assertNull(txControl.getCurrentContext().getScopedValue("invisible"));
1:8a2da19: 				txControl.getCurrentContext().putScopedValue("invisible", Boolean.FALSE);
1:8a2da19: 				return null;
1:8a2da19: 			});
1:8a2da19: 
1:8a2da19: 			assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("invisible"));
1:8a2da19: 			
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testRequiresNew() {
1:8a2da19: 
1:8a2da19: 		txControl.requiresNew(() -> {
1:8a2da19: 
1:8a2da19: 			assertTrue(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testNestedRequiresNew() {
1:8a2da19: 
1:8a2da19: 		txControl.required(() -> {
1:8a2da19: 
1:8a2da19: 			assertTrue(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:8a2da19: 			txControl.getCurrentContext().putScopedValue("invisible", Boolean.TRUE);
1:8a2da19: 
1:8a2da19: 			txControl.requiresNew(() -> {
1:8a2da19: 				assertFalse("Parent key " + key + " Child Key " + txControl.getCurrentContext().getTransactionKey(),
1:8a2da19: 						key.equals(txControl.getCurrentContext().getTransactionKey()));
1:8a2da19: 				assertNull(txControl.getCurrentContext().getScopedValue("invisible"));
1:8a2da19: 				txControl.getCurrentContext().putScopedValue("invisible", Boolean.FALSE);
1:8a2da19: 				return null;
1:8a2da19: 			});
1:8a2da19: 
1:8a2da19: 			assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1:8a2da19: 			assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("invisible"));
1:8a2da19: 			
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testSupports() {
1:8a2da19: 
1:8a2da19: 		txControl.supports(() -> {
1:8a2da19: 
1:8a2da19: 			assertFalse(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testNestedSupports() {
1:8a2da19: 
1:8a2da19: 		txControl.supports(() -> {
1:8a2da19: 
1:8a2da19: 			assertFalse(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			txControl.getCurrentContext().putScopedValue("visible", Boolean.TRUE);
1:8a2da19: 
1:8a2da19: 			txControl.supports(() -> {
1:8a2da19: 				assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1:8a2da19: 				txControl.getCurrentContext().putScopedValue("visible", Boolean.FALSE);
1:8a2da19: 				return null;
1:8a2da19: 			});
1:8a2da19: 			
1:8a2da19: 			assertEquals(Boolean.FALSE, txControl.getCurrentContext().getScopedValue("visible"));
1:8a2da19: 
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testNestedSupportsInActiveTran() {
1:8a2da19: 
1:8a2da19: 		txControl.required(() -> {
1:8a2da19: 
1:8a2da19: 			assertTrue(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:8a2da19: 			txControl.getCurrentContext().putScopedValue("visible", Boolean.TRUE);
1:8a2da19: 
1:8a2da19: 			txControl.supports(() -> {
1:8a2da19: 				assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1:8a2da19: 				assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1:8a2da19: 				txControl.getCurrentContext().putScopedValue("visible", Boolean.FALSE);
1:8a2da19: 				return null;
1:8a2da19: 			});
1:8a2da19: 			
1:8a2da19: 			assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1:8a2da19: 			assertEquals(Boolean.FALSE, txControl.getCurrentContext().getScopedValue("visible"));
1:8a2da19: 
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 	
1:8a2da19: 	@Test
1:8a2da19: 	public void testNotSupported() {
1:8a2da19: 
1:8a2da19: 		txControl.notSupported(() -> {
1:8a2da19: 
1:8a2da19: 			assertFalse(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testNestedNotSupported() {
1:8a2da19: 
1:8a2da19: 		txControl.notSupported(() -> {
1:8a2da19: 
1:8a2da19: 			assertFalse(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			txControl.getCurrentContext().putScopedValue("visible", Boolean.TRUE);
1:8a2da19: 
1:8a2da19: 			txControl.notSupported(() -> {
1:8a2da19: 				assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1:8a2da19: 				return null;
1:8a2da19: 			});
1:8a2da19: 			
1:8a2da19: 			assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1:8a2da19: 
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Test
1:8a2da19: 	public void testNestedNotSupportedInActiveTran() {
1:8a2da19: 
1:8a2da19: 		txControl.required(() -> {
1:8a2da19: 
1:8a2da19: 			assertTrue(txControl.activeTransaction());
1:8a2da19: 
1:8a2da19: 			Object key = txControl.getCurrentContext().getTransactionKey();
1:8a2da19: 			txControl.getCurrentContext().putScopedValue("invisible", Boolean.TRUE);
1:8a2da19: 
1:8a2da19: 			txControl.notSupported(() -> {
1:8a2da19: 				assertFalse(txControl.activeTransaction());
1:8a2da19: 				assertNull(txControl.getCurrentContext().getScopedValue("invisible"));
1:8a2da19: 				txControl.getCurrentContext().putScopedValue("invisible", Boolean.FALSE);
1:8a2da19: 				
1:8a2da19: 				return null;
1:8a2da19: 			});
1:8a2da19: 			
1:8a2da19: 			assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1:8a2da19: 			assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("invisible"));
1:8a2da19: 
1:8a2da19: 			return null;
1:8a2da19: 		});
1:8a2da19: 
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		txControl = new TransactionControlImpl();
commit:8a2da19
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.local.impl;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
0: import java.util.HashMap;
0: import java.util.Map;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.Mock;
0: import org.mockito.Mockito;
1: import org.mockito.runners.MockitoJUnitRunner;
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.ResourceProvider;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class TransactionLifecycleTest {
1: 
1: 	@Mock
0: 	Coordinator coordinator;
1: 	@Mock
0: 	Coordination coordination1;
1: 	@Mock
0: 	Coordination coordination2;
1: 
1: 	@Mock
1: 	ResourceProvider<Object> testProvider;
1: 	@Mock
1: 	LocalResource testResource;
1: 
1: 	TransactionControlImpl txControl;
1: 
0: 	Map<Class<?>, Object> variables1;
0: 	Map<Class<?>, Object> variables2;
1: 
1: 	@Before
1: 	public void setUp() {
0: 		variables1 = new HashMap<>();
0: 		variables2 = new HashMap<>();
1: 
0: 		setupCoordinations();
1: 
0: 		txControl = new TransactionControlImpl(coordinator);
1: 	}
1: 
0: 	/**
0: 	 * Allow up to two Coordinations to be happening
0: 	 */
0: 	private void setupCoordinations() {
0: 		Mockito.when(coordinator.begin(Mockito.anyString(), Mockito.anyLong())).then(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(coordination1);
0: 			return coordination1;
0: 		}).then(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(coordination2);
0: 			return coordination2;
0: 		}).thenThrow(new IllegalStateException("Only two coordinations at a time in the test"));
1: 
0: 		Mockito.when(coordination1.getVariables()).thenReturn(variables1);
0: 		Mockito.when(coordination1.getId()).thenReturn(42L);
0: 		Mockito.doAnswer(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(null);
1: 			return null;
0: 		}).when(coordination1).end();
0: 		Mockito.doAnswer(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(null);
1: 			return null;
0: 		}).when(coordination1).fail(Mockito.any(Throwable.class));
1: 
0: 		Mockito.when(coordination2.getVariables()).thenReturn(variables2);
0: 		Mockito.when(coordination2.getId()).thenReturn(43L);
0: 		Mockito.doAnswer(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(coordination1);
1: 			return null;
0: 		}).when(coordination2).end();
0: 		Mockito.doAnswer(i -> {
0: 			Mockito.when(coordinator.peek()).thenReturn(coordination1);
1: 			return null;
0: 		}).when(coordination2).fail(Mockito.any(Throwable.class));
1: 	}
1: 
1: 	@Test
1: 	public void testRequired() {
1: 
1: 		txControl.required(() -> {
1: 
1: 			assertTrue(txControl.activeTransaction());
1: 
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testNestedRequired() {
1: 
1: 		txControl.required(() -> {
1: 
1: 			assertTrue(txControl.activeTransaction());
1: 
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			txControl.getCurrentContext().putScopedValue("visible", Boolean.TRUE);
1: 
1: 			txControl.required(() -> {
1: 				assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1: 				assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1: 				txControl.getCurrentContext().putScopedValue("visible", Boolean.FALSE);
1: 				return null;
1: 			});
1: 
1: 			assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1: 			assertEquals(Boolean.FALSE, txControl.getCurrentContext().getScopedValue("visible"));
1: 			
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testNestedRequiredFromNoTran() {
1: 
1: 		txControl.supports(() -> {
1: 
1: 			assertFalse(txControl.activeTransaction());
1: 
1: 			txControl.getCurrentContext().putScopedValue("invisible", Boolean.TRUE);
1: 
1: 			txControl.required(() -> {
1: 				assertTrue(txControl.activeTransaction());
1: 				assertNull(txControl.getCurrentContext().getScopedValue("invisible"));
1: 				txControl.getCurrentContext().putScopedValue("invisible", Boolean.FALSE);
1: 				return null;
1: 			});
1: 
1: 			assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("invisible"));
1: 			
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testRequiresNew() {
1: 
1: 		txControl.requiresNew(() -> {
1: 
1: 			assertTrue(txControl.activeTransaction());
1: 
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testNestedRequiresNew() {
1: 
1: 		txControl.required(() -> {
1: 
1: 			assertTrue(txControl.activeTransaction());
1: 
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			txControl.getCurrentContext().putScopedValue("invisible", Boolean.TRUE);
1: 
1: 			txControl.requiresNew(() -> {
1: 				assertFalse("Parent key " + key + " Child Key " + txControl.getCurrentContext().getTransactionKey(),
1: 						key.equals(txControl.getCurrentContext().getTransactionKey()));
1: 				assertNull(txControl.getCurrentContext().getScopedValue("invisible"));
1: 				txControl.getCurrentContext().putScopedValue("invisible", Boolean.FALSE);
1: 				return null;
1: 			});
1: 
1: 			assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1: 			assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("invisible"));
1: 			
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testSupports() {
1: 
1: 		txControl.supports(() -> {
1: 
1: 			assertFalse(txControl.activeTransaction());
1: 
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testNestedSupports() {
1: 
1: 		txControl.supports(() -> {
1: 
1: 			assertFalse(txControl.activeTransaction());
1: 
1: 			txControl.getCurrentContext().putScopedValue("visible", Boolean.TRUE);
1: 
1: 			txControl.supports(() -> {
1: 				assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1: 				txControl.getCurrentContext().putScopedValue("visible", Boolean.FALSE);
1: 				return null;
1: 			});
1: 			
1: 			assertEquals(Boolean.FALSE, txControl.getCurrentContext().getScopedValue("visible"));
1: 
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testNestedSupportsInActiveTran() {
1: 
1: 		txControl.required(() -> {
1: 
1: 			assertTrue(txControl.activeTransaction());
1: 
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			txControl.getCurrentContext().putScopedValue("visible", Boolean.TRUE);
1: 
1: 			txControl.supports(() -> {
1: 				assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1: 				assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1: 				txControl.getCurrentContext().putScopedValue("visible", Boolean.FALSE);
1: 				return null;
1: 			});
1: 			
1: 			assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1: 			assertEquals(Boolean.FALSE, txControl.getCurrentContext().getScopedValue("visible"));
1: 
1: 			return null;
1: 		});
1: 
1: 	}
1: 	
1: 	@Test
1: 	public void testNotSupported() {
1: 
1: 		txControl.notSupported(() -> {
1: 
1: 			assertFalse(txControl.activeTransaction());
1: 
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testNestedNotSupported() {
1: 
1: 		txControl.notSupported(() -> {
1: 
1: 			assertFalse(txControl.activeTransaction());
1: 
1: 			txControl.getCurrentContext().putScopedValue("visible", Boolean.TRUE);
1: 
1: 			txControl.notSupported(() -> {
1: 				assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1: 				return null;
1: 			});
1: 			
1: 			assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("visible"));
1: 
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: 	@Test
1: 	public void testNestedNotSupportedInActiveTran() {
1: 
1: 		txControl.required(() -> {
1: 
1: 			assertTrue(txControl.activeTransaction());
1: 
1: 			Object key = txControl.getCurrentContext().getTransactionKey();
1: 			txControl.getCurrentContext().putScopedValue("invisible", Boolean.TRUE);
1: 
1: 			txControl.notSupported(() -> {
1: 				assertFalse(txControl.activeTransaction());
1: 				assertNull(txControl.getCurrentContext().getScopedValue("invisible"));
1: 				txControl.getCurrentContext().putScopedValue("invisible", Boolean.FALSE);
1: 				
1: 				return null;
1: 			});
1: 			
1: 			assertEquals(key, txControl.getCurrentContext().getTransactionKey());
1: 			assertEquals(Boolean.TRUE, txControl.getCurrentContext().getScopedValue("invisible"));
1: 
1: 			return null;
1: 		});
1: 
1: 	}
1: 
1: }
============================================================================