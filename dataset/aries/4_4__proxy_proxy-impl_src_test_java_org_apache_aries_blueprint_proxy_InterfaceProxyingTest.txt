1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
1:96d4e06:  */
1:96d4e06: package org.apache.aries.blueprint.proxy;
1:96d4e06: 
1:96d4e06: import static org.junit.Assert.assertEquals;
1:96d4e06: import static org.junit.Assert.assertNotNull;
1:96d4e06: import static org.junit.Assert.assertNull;
1:96d4e06: import static org.junit.Assert.assertSame;
1:96d4e06: import static org.junit.Assert.assertTrue;
1:96d4e06: import static org.junit.Assert.fail;
1:96d4e06: 
1:ce3df3d: import java.io.ByteArrayOutputStream;
1:96d4e06: import java.io.Closeable;
1:760dac8: import java.io.File;
1:23a140b: import java.io.InputStream;
1:96d4e06: import java.util.ArrayList;
1:96d4e06: import java.util.Arrays;
1:96d4e06: import java.util.Collection;
1:760dac8: import java.util.Dictionary;
1:475ef33: import java.util.Hashtable;
1:ec0e1f2: import java.util.List;
1:96d4e06: import java.util.Map;
1:96d4e06: import java.util.concurrent.Callable;
1:96d4e06: 
1:96d4e06: import org.apache.aries.blueprint.proxy.AbstractProxyTest.TestListener;
1:475ef33: import org.apache.aries.mocks.BundleMock;
1:475ef33: import org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator;
1:23a140b: import org.apache.aries.unittest.mocks.MethodCall;
1:475ef33: import org.apache.aries.unittest.mocks.Skeleton;
1:23a140b: import org.apache.aries.util.ClassLoaderProxy;
1:475ef33: import org.junit.Before;
1:96d4e06: import org.junit.Test;
1:475ef33: import org.osgi.framework.Bundle;
1:760dac8: import org.osgi.framework.BundleException;
1:760dac8: import org.osgi.framework.wiring.BundleRevision;
1:760dac8: import org.osgi.framework.wiring.BundleWiring;
1:96d4e06: 
1:96d4e06: 
1:96d4e06: public class InterfaceProxyingTest {
1:96d4e06: 
1:96d4e06:   public final static class TestCallable implements Callable<Object> {
1:96d4e06:     
1:96d4e06:     private Object list = new Callable<Object>() {
1:e6518d7: 
1:96d4e06: 
5:96d4e06:       public Object call() throws Exception {
5:96d4e06:         return null;
1:96d4e06:       }
1:96d4e06:     };
1:475ef33:     
1:96d4e06:     public Object call() throws Exception {
1:96d4e06:       return list;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public void setReturn(Object o) {
1:96d4e06:       list = o;
1:96d4e06:     }
1:96d4e06:   }
1:760dac8: 
1:475ef33:   private Bundle testBundle;
1:760dac8: 
1:760dac8:   /**
1:760dac8:    * Extended BundleMock which handles update() and adapt() methods
1:760dac8:    */
1:760dac8:   public static class BundleMockEx extends BundleMock {
1:760dac8:     private BundleWiring currentWiring = Skeleton.newMock(BundleWiring.class);
1:760dac8: 
1:760dac8:     public BundleMockEx(String name, Dictionary<?, ?> properties) {
1:760dac8:       super(name, properties);
1:760dac8:     }
1:760dac8: 
1:760dac8:     public <A> A adapt(Class<A> type) {
1:760dac8:       if (type == BundleWiring.class) {
1:760dac8:         return (A) currentWiring;
1:760dac8:       }
1:760dac8:       return null;
1:760dac8:     }
1:760dac8: 
1:760dac8:     public void update() throws BundleException {
1:760dac8:       this.currentWiring = Skeleton.newMock(BundleWiring.class);
1:760dac8:     }
1:760dac8:   }
1:760dac8: 
1:475ef33:   @Before
1:475ef33:   public void setup() {
1:760dac8:     testBundle = Skeleton.newMock(new BundleMockEx("test",
1:475ef33:         new Hashtable<Object, Object>()), Bundle.class);
1:475ef33:   }
1:475ef33:   
1:96d4e06:   @Test
1:96d4e06:   public void testGetProxyInstance1() throws Exception{
1:96d4e06:     
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class));
1:96d4e06:     
1:d014a6c:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(null), null);
1:96d4e06:     
1:96d4e06:     assertTrue(o instanceof Closeable);
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   @Test
1:96d4e06:   public void testGetProxyInstance2() throws Exception{
1:96d4e06:     
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class,
1:96d4e06:         Iterable.class, Map.class));
1:96d4e06:     
1:d014a6c:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(null), null);
1:96d4e06:     
1:96d4e06:     assertTrue(o instanceof Closeable);
1:96d4e06:     assertTrue(o instanceof Iterable);
1:96d4e06:     assertTrue(o instanceof Map);
1:96d4e06:     
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * Test a class whose super couldn't be woven
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testDelegationAndInterception() throws Exception
1:96d4e06:   {
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Callable.class));
1:96d4e06:     TestListener tl = new TestListener();
1:96d4e06:     TestCallable tc = new TestCallable();
1:96d4e06:     
1:475ef33:     Callable o = (Callable) InterfaceProxyGenerator.getProxyInstance(testBundle, 
1:d014a6c:         null, classes, tc, tl);
1:96d4e06:     
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     assertNull(null, o.call());
1:96d4e06:     
1:96d4e06:     assertCalled(tl, true, true, false);
1:96d4e06:     
1:96d4e06:     assertEquals(Callable.class.getMethod("call"), 
1:96d4e06:         tl.getLastMethod());
1:96d4e06: 
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     tc.setReturn(new Callable<Object>() {
1:e6518d7: 
1:e6518d7:  
1:e1814b2:       public Object call() throws Exception {
1:96d4e06:         throw new RuntimeException();
1:96d4e06:       }
1:96d4e06:     });
1:96d4e06:     try {
1:96d4e06:       o.call();
1:96d4e06:       fail("Should throw an exception");
1:96d4e06:     } catch (RuntimeException re) {
1:96d4e06:       assertCalled(tl, true, false, true);
1:96d4e06:       assertSame(re, tl.getLastThrowable());
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     tc.setReturn(new Callable<Object>() {
1:96d4e06: 
1:96d4e06:      
1:96d4e06:       public Object call() throws Exception {
1:96d4e06:         try {
1:96d4e06:           throw new RuntimeException();
1:96d4e06:         } catch (RuntimeException re) {
1:96d4e06:           return new Object();
1:96d4e06:         }
1:96d4e06:       }
1:96d4e06:     });
1:96d4e06:     
1:96d4e06:     
1:96d4e06:     try {
1:96d4e06:       assertNotNull(o.call());
1:96d4e06:     } finally {
1:96d4e06:       assertCalled(tl, true, true, false);
1:96d4e06:     }
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   @Test
1:96d4e06:   public void testCaching() throws Exception {
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class));
1:96d4e06:     
1:d014a6c:     Object o1 = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(null), null);
1:d014a6c:     Object o2 = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(null), null);
1:96d4e06:     
1:96d4e06:     assertSame(o1.getClass(), o2.getClass());
1:96d4e06:   }
1:96d4e06:   
1:e1814b2:   @Test
1:e1814b2:   public void testComplexInterface() throws Exception {
1:e1814b2:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(ProxyTestInterface.class));
1:e1814b2:     
1:e1814b2:     final TestCallable tc = new TestCallable();
1:e1814b2:     tc.setReturn(5);
1:e1814b2:     
1:d014a6c:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(tc), null);
1:e1814b2:     
1:e1814b2:     assertTrue(o instanceof ProxyTestInterface);
1:e1814b2:     
1:e1814b2:     assertTrue(o instanceof Callable);
1:e1814b2:     
1:e1814b2:     assertEquals(5, ((Callable)o).call());
1:e1814b2:   }
1:e1814b2:   
1:ec0e1f2:   @Test
1:ec0e1f2:   public void testHandlesObjectMethods() throws Exception {
1:82cd139:       TestListener listener = new TestListener();
1:ec0e1f2:       List<String> list = Arrays.asList("one", "two", "three");
1:d014a6c:       Object proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, null, Arrays.<Class<?>>asList(List.class), constantly(list), listener);
1:e1814b2:       
1:d014a6c:       // obeys hashCode and equals, they *are* on the interface (actually they're
1:d014a6c:       // on several interfaces, we process them in alphabetical order, so Collection
1:d014a6c:       // comes ahead of List.
1:ec0e1f2:       assertTrue(proxied.equals(Arrays.asList("one", "two", "three")));
1:d014a6c:       assertEquals(Collection.class.getMethod("equals", Object.class), listener.getLastMethod());
1:82cd139:       listener.clear();
1:ec0e1f2:       assertEquals(Arrays.asList("one", "two", "three").hashCode(), proxied.hashCode());
1:d014a6c:       assertEquals(Collection.class.getMethod("hashCode"), listener.getLastMethod());
1:82cd139:       listener.clear();
1:ec0e1f2:       // and toString
1:ec0e1f2:       assertEquals(list.toString(), proxied.toString());
1:82cd139:       assertEquals(Object.class.getMethod("toString"), listener.getLastMethod());
1:82cd139:       listener.clear();
1:96d4e06:       
1:ec0e1f2:       Runnable runnable = new Runnable() {
1:ec0e1f2:         public void run() {}
1:ec0e1f2:       };
1:d014a6c:       proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, null, Arrays.<Class<?>>asList(Runnable.class), constantly(runnable), listener);
1:96d4e06:       
1:ec0e1f2:       // obeys hashCode and equals, they *are not* on the interface
1:ec0e1f2:       assertTrue(proxied.equals(runnable));
1:82cd139:       assertEquals(Object.class.getMethod("equals", Object.class), listener.getLastMethod());
1:82cd139:       listener.clear();
1:ec0e1f2:       assertEquals(runnable.hashCode(), proxied.hashCode());
1:82cd139:       assertEquals(Object.class.getMethod("hashCode"), listener.getLastMethod());
1:82cd139:       listener.clear();
1:e1814b2:   }
1:96d4e06:   
1:23a140b:   private static class TestClassLoader extends ClassLoader {
1:23a140b:       public TestClassLoader() throws Exception {
1:96d4e06:           
1:23a140b:           InputStream is = TestClassLoader.class.getClassLoader().getResourceAsStream("org/apache/aries/blueprint/proxy/TestInterface.class");
1:23a140b:           ByteArrayOutputStream bout = new ByteArrayOutputStream();
1:96d4e06: 
1:23a140b:           int b;
1:23a140b:           while ((b = is.read()) != -1) {
1:23a140b:               bout.write(b);
1:96d4e06:           }
1:96d4e06:           
1:23a140b:           is.close();
1:23a140b:           
1:23a140b:           byte[] bytes = bout.toByteArray();
1:23a140b:           defineClass("org.apache.aries.blueprint.proxy.TestInterface", bytes, 0, bytes.length);
1:96d4e06:       }
1:96d4e06:   }
7:23a140b:   
1:23a140b:   @Test
1:23a140b:   public void testNoStaleProxiesForRefreshedBundle() throws Exception {
1:23a140b:       Bundle bundle = (Bundle) Skeleton.newMock(new Class<?>[] { Bundle.class, ClassLoaderProxy.class });      
1:23a140b:       Skeleton skel = Skeleton.getSkeleton(bundle);
1:23a140b:       
1:23a140b:       TestClassLoader loader = new TestClassLoader();
1:23a140b:       skel.setReturnValue(new MethodCall(ClassLoaderProxy.class, "getClassLoader"), loader);
1:23a140b:       skel.setReturnValue(new MethodCall(Bundle.class, "getLastModified"), 10l);
1:760dac8:       skel.setReturnValue(new MethodCall(Bundle.class, "adapt", BundleWiring.class), Skeleton.newMock(BundleWiring.class));
1:760dac8: 
1:23a140b:       Class<?> clazz = loader.loadClass("org.apache.aries.blueprint.proxy.TestInterface");
1:23a140b:       
1:d014a6c:       Object proxy = InterfaceProxyGenerator.getProxyInstance(bundle, null, Arrays.<Class<?>>asList(clazz), constantly(null), null);
1:23a140b:       assertTrue(clazz.isInstance(proxy));
1:760dac8: 
1:760dac8:       ClassLoader parent1 = proxy.getClass().getClassLoader().getParent();
1:23a140b:       
1:23a140b:       /* Now again but with a changed classloader as if the bundle had refreshed */
1:23a140b:       
1:23a140b:       TestClassLoader loaderToo = new TestClassLoader();
1:23a140b:       skel.setReturnValue(new MethodCall(ClassLoaderProxy.class, "getClassLoader"), loaderToo);
1:23a140b:       skel.setReturnValue(new MethodCall(Bundle.class, "getLastModified"), 20l);
1:760dac8: 
1:760dac8:       // let's change the returned revision
1:760dac8:       skel.setReturnValue(new MethodCall(Bundle.class, "adapt", BundleWiring.class), Skeleton.newMock(BundleWiring.class));
1:23a140b:       
1:23a140b:       Class<?> clazzToo = loaderToo.loadClass("org.apache.aries.blueprint.proxy.TestInterface");
1:23a140b:       
1:d014a6c:       Object proxyToo = InterfaceProxyGenerator.getProxyInstance(bundle, null, Arrays.<Class<?>>asList(clazzToo), constantly(null), null);
1:23a140b:       assertTrue(clazzToo.isInstance(proxyToo));
1:760dac8: 
1:760dac8:       ClassLoader parent2= proxyToo.getClass().getClassLoader().getParent();
1:760dac8: 
1:760dac8:       // parents should be different, as the are the classloaders of different bundle revisions
1:760dac8:       assertTrue(parent1 != parent2);
1:96d4e06:   }
1:760dac8: 
1:96d4e06:   protected void assertCalled(TestListener listener, boolean pre, boolean post, boolean ex) {
1:96d4e06:     assertEquals(pre, listener.preInvoke);
1:96d4e06:     assertEquals(post, listener.postInvoke);
1:96d4e06:     assertEquals(ex, listener.postInvokeExceptionalReturn);
1:96d4e06:   }
1:23a140b:   
1:ec0e1f2:   private Callable<Object> constantly(final Object result) {
1:ec0e1f2:       return new Callable<Object>() {
1:96d4e06:           public Object call() throws Exception {
1:ec0e1f2:               return result;
1:96d4e06:           }             
1:ec0e1f2:         };
3:23a140b:   }
1:23a140b: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:760dac8
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.wiring.BundleRevision;
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:   /**
1:    * Extended BundleMock which handles update() and adapt() methods
1:    */
1:   public static class BundleMockEx extends BundleMock {
1:     private BundleWiring currentWiring = Skeleton.newMock(BundleWiring.class);
1: 
1:     public BundleMockEx(String name, Dictionary<?, ?> properties) {
1:       super(name, properties);
1:     }
1: 
1:     public <A> A adapt(Class<A> type) {
1:       if (type == BundleWiring.class) {
1:         return (A) currentWiring;
1:       }
1:       return null;
1:     }
1: 
1:     public void update() throws BundleException {
1:       this.currentWiring = Skeleton.newMock(BundleWiring.class);
1:     }
1:   }
1: 
1:     testBundle = Skeleton.newMock(new BundleMockEx("test",
/////////////////////////////////////////////////////////////////////////
1:       skel.setReturnValue(new MethodCall(Bundle.class, "adapt", BundleWiring.class), Skeleton.newMock(BundleWiring.class));
1: 
1: 
1:       ClassLoader parent1 = proxy.getClass().getClassLoader().getParent();
1: 
1:       // let's change the returned revision
1:       skel.setReturnValue(new MethodCall(Bundle.class, "adapt", BundleWiring.class), Skeleton.newMock(BundleWiring.class));
1: 
1:       ClassLoader parent2= proxyToo.getClass().getClassLoader().getParent();
1: 
1:       // parents should be different, as the are the classloaders of different bundle revisions
1:       assertTrue(parent1 != parent2);
1: 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  
/////////////////////////////////////////////////////////////////////////
1:      
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:d014a6c
/////////////////////////////////////////////////////////////////////////
1:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(null), null);
/////////////////////////////////////////////////////////////////////////
1:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(null), null);
/////////////////////////////////////////////////////////////////////////
1:         null, classes, tc, tl);
/////////////////////////////////////////////////////////////////////////
1:     Object o1 = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(null), null);
1:     Object o2 = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(null), null);
/////////////////////////////////////////////////////////////////////////
1:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, null, classes, constantly(tc), null);
/////////////////////////////////////////////////////////////////////////
1:       Object proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, null, Arrays.<Class<?>>asList(List.class), constantly(list), listener);
1:       // obeys hashCode and equals, they *are* on the interface (actually they're
1:       // on several interfaces, we process them in alphabetical order, so Collection
1:       // comes ahead of List.
1:       assertEquals(Collection.class.getMethod("equals", Object.class), listener.getLastMethod());
1:       assertEquals(Collection.class.getMethod("hashCode"), listener.getLastMethod());
/////////////////////////////////////////////////////////////////////////
1:       proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, null, Arrays.<Class<?>>asList(Runnable.class), constantly(runnable), listener);
/////////////////////////////////////////////////////////////////////////
1:       Object proxy = InterfaceProxyGenerator.getProxyInstance(bundle, null, Arrays.<Class<?>>asList(clazz), constantly(null), null);
/////////////////////////////////////////////////////////////////////////
1:       Object proxyToo = InterfaceProxyGenerator.getProxyInstance(bundle, null, Arrays.<Class<?>>asList(clazzToo), constantly(null), null);
commit:451a003
/////////////////////////////////////////////////////////////////////////
0:       assertEquals(List.class.getMethod("equals", Object.class), listener.getLastMethod());
0:       assertEquals(List.class.getMethod("hashCode"), listener.getLastMethod());
commit:82cd139
/////////////////////////////////////////////////////////////////////////
1:       TestListener listener = new TestListener();
0:       Object proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(List.class), constantly(list), listener);
0:       assertEquals(Collection.class.getMethod("equals", Object.class), listener.getLastMethod());
1:       listener.clear();
0:       assertEquals(Collection.class.getMethod("hashCode"), listener.getLastMethod());
1:       listener.clear();
1:       assertEquals(Object.class.getMethod("toString"), listener.getLastMethod());
1:       listener.clear();
0:       proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(Runnable.class), constantly(runnable), listener);
1:       assertEquals(Object.class.getMethod("equals", Object.class), listener.getLastMethod());
1:       listener.clear();
1:       assertEquals(Object.class.getMethod("hashCode"), listener.getLastMethod());
1:       listener.clear();
commit:475ef33
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
1: import org.apache.aries.mocks.BundleMock;
1: import org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.junit.Before;
1: import org.osgi.framework.Bundle;
/////////////////////////////////////////////////////////////////////////
1:   private Bundle testBundle;
1:   
1:   @Before
1:   public void setup() {
0:     testBundle = Skeleton.newMock(new BundleMock("test", 
1:         new Hashtable<Object, Object>()), Bundle.class);
1:   }
1:   
0:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
/////////////////////////////////////////////////////////////////////////
0:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
/////////////////////////////////////////////////////////////////////////
1:     Callable o = (Callable) InterfaceProxyGenerator.getProxyInstance(testBundle, 
0:         classes, tc, tl);
/////////////////////////////////////////////////////////////////////////
0:     Object o1 = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
/////////////////////////////////////////////////////////////////////////
0:     Object o2 = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
/////////////////////////////////////////////////////////////////////////
0:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, 
commit:e1814b2
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testComplexInterface() throws Exception {
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(ProxyTestInterface.class));
1:     
1:     final TestCallable tc = new TestCallable();
1:     tc.setReturn(5);
1:     
0:     Object o = InterfaceCombiningClassAdapter.getProxyInstance(classes, 
0:         new Callable<Object>() {
1: 
0:           @Override
1:           public Object call() throws Exception {
0:             return tc;
1:           }
0:     }, null);
1:     
1:     assertTrue(o instanceof ProxyTestInterface);
1:     
1:     assertTrue(o instanceof Callable);
1:     
1:     assertEquals(5, ((Callable)o).call());
1:   }
1:   
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.proxy;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.Closeable;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Map;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.aries.blueprint.proxy.AbstractProxyTest.TestListener;
0: import org.apache.aries.proxy.impl.weaving.InterfaceCombiningClassAdapter;
1: import org.junit.Test;
1: 
1: public class InterfaceProxyingTest {
1: 
1:   public final static class TestCallable implements Callable<Object> {
1:     
1:     private Object list = new Callable<Object>() {
1: 
0:       @Override
1:       public Object call() throws Exception {
1:         return null;
1:       }
1:     };
1:     
1:     public Object call() throws Exception {
1:       return list;
1:     }
1:     
1:     public void setReturn(Object o) {
1:       list = o;
1:     }
1:   }
1:   
1:   @Test
1:   public void testGetProxyInstance1() throws Exception{
1:     
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class));
1:     
0:     Object o = InterfaceCombiningClassAdapter.getProxyInstance(classes, 
0:         new Callable<Object>() {
1: 
0:           @Override
1:           public Object call() throws Exception {
1:             return null;
1:           }
0:     }, null);
1:     
1:     assertTrue(o instanceof Closeable);
1:   }
1:   
1:   @Test
1:   public void testGetProxyInstance2() throws Exception{
1:     
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class,
1:         Iterable.class, Map.class));
1:     
0:     Object o = InterfaceCombiningClassAdapter.getProxyInstance(classes, 
0:         new Callable<Object>() {
1: 
0:           @Override
1:           public Object call() throws Exception {
1:             return null;
1:           }
0:     }, null);
1:     
1:     assertTrue(o instanceof Closeable);
1:     assertTrue(o instanceof Iterable);
1:     assertTrue(o instanceof Map);
1:     
1:   }
1: 
1:   /**
1:    * Test a class whose super couldn't be woven
1:    */
1:   @Test
1:   public void testDelegationAndInterception() throws Exception
1:   {
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Callable.class));
1:     TestListener tl = new TestListener();
1:     TestCallable tc = new TestCallable();
1:     
0:     Callable o = (Callable) InterfaceCombiningClassAdapter.getProxyInstance(classes, tc, tl);
1:     
1:     assertCalled(tl, false, false, false);
1:     
1:     assertNull(null, o.call());
1:     
1:     assertCalled(tl, true, true, false);
1:     
1:     assertEquals(Callable.class.getMethod("call"), 
1:         tl.getLastMethod());
1: 
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     tc.setReturn(new Callable<Object>() {
1: 
0:       @Override
1:       public Object call() throws Exception {
1:         throw new RuntimeException();
1:       }
1:     });
1:     try {
1:       o.call();
1:       fail("Should throw an exception");
1:     } catch (RuntimeException re) {
1:       assertCalled(tl, true, false, true);
1:       assertSame(re, tl.getLastThrowable());
1:     }
1:     
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     tc.setReturn(new Callable<Object>() {
1: 
0:       @Override
1:       public Object call() throws Exception {
1:         try {
1:           throw new RuntimeException();
1:         } catch (RuntimeException re) {
1:           return new Object();
1:         }
1:       }
1:     });
1:     
1:     
1:     try {
1:       assertNotNull(o.call());
1:     } finally {
1:       assertCalled(tl, true, true, false);
1:     }
1:   }
1:   
1:   @Test
1:   public void testCaching() throws Exception {
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>(Arrays.asList(Closeable.class));
1:     
0:     Object o1 = InterfaceCombiningClassAdapter.getProxyInstance(classes, 
0:         new Callable<Object>() {
1: 
0:           @Override
1:           public Object call() throws Exception {
1:             return null;
1:           }
0:     }, null);
1:     
0:     Object o2 = InterfaceCombiningClassAdapter.getProxyInstance(classes, 
0:         new Callable<Object>() {
1: 
0:           @Override
1:           public Object call() throws Exception {
1:             return null;
1:           }
0:     }, null);
1:     
1:     assertSame(o1.getClass(), o2.getClass());
1:   }
1:   
1:   protected void assertCalled(TestListener listener, boolean pre, boolean post, boolean ex) {
1:     assertEquals(pre, listener.preInvoke);
1:     assertEquals(post, listener.postInvoke);
1:     assertEquals(ex, listener.postInvokeExceptionalReturn);
1:   }
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:ce3df3d
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayOutputStream;
/////////////////////////////////////////////////////////////////////////
commit:23a140b
/////////////////////////////////////////////////////////////////////////
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.util.ClassLoaderProxy;
0: import com.ibm.jvm.util.ByteArrayOutputStream;
1: 
/////////////////////////////////////////////////////////////////////////
1:   private static class TestClassLoader extends ClassLoader {
1:       public TestClassLoader() throws Exception {
1:           
1:           InputStream is = TestClassLoader.class.getClassLoader().getResourceAsStream("org/apache/aries/blueprint/proxy/TestInterface.class");
1:           ByteArrayOutputStream bout = new ByteArrayOutputStream();
1: 
1:           int b;
1:           while ((b = is.read()) != -1) {
1:               bout.write(b);
1:           }
1:           
1:           is.close();
1:           
1:           byte[] bytes = bout.toByteArray();
1:           defineClass("org.apache.aries.blueprint.proxy.TestInterface", bytes, 0, bytes.length);
1:       }
1:   }
1:   
1:   @Test
1:   public void testNoStaleProxiesForRefreshedBundle() throws Exception {
1:       Bundle bundle = (Bundle) Skeleton.newMock(new Class<?>[] { Bundle.class, ClassLoaderProxy.class });      
1:       Skeleton skel = Skeleton.getSkeleton(bundle);
1:       
1:       TestClassLoader loader = new TestClassLoader();
1:       skel.setReturnValue(new MethodCall(ClassLoaderProxy.class, "getClassLoader"), loader);
1:       skel.setReturnValue(new MethodCall(Bundle.class, "getLastModified"), 10l);
1:       
1:       Class<?> clazz = loader.loadClass("org.apache.aries.blueprint.proxy.TestInterface");
1:       
0:       Object proxy = InterfaceProxyGenerator.getProxyInstance(bundle, Arrays.<Class<?>>asList(clazz), constantly(null), null);
1:       assertTrue(clazz.isInstance(proxy));
1:       
1:       /* Now again but with a changed classloader as if the bundle had refreshed */
1:       
1:       TestClassLoader loaderToo = new TestClassLoader();
1:       skel.setReturnValue(new MethodCall(ClassLoaderProxy.class, "getClassLoader"), loaderToo);
1:       skel.setReturnValue(new MethodCall(Bundle.class, "getLastModified"), 20l);
1:       
1:       Class<?> clazzToo = loaderToo.loadClass("org.apache.aries.blueprint.proxy.TestInterface");
1:       
0:       Object proxyToo = InterfaceProxyGenerator.getProxyInstance(bundle, Arrays.<Class<?>>asList(clazzToo), constantly(null), null);
1:       assertTrue(clazzToo.isInstance(proxyToo));
1:   }
1:   
1:   
commit:ec0e1f2
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(null), null);
/////////////////////////////////////////////////////////////////////////
0:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(null), null);
/////////////////////////////////////////////////////////////////////////
0:     Object o1 = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(null), null);
0:     Object o2 = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(null), null);
/////////////////////////////////////////////////////////////////////////
0:     Object o = InterfaceProxyGenerator.getProxyInstance(testBundle, classes, constantly(tc), null);
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testHandlesObjectMethods() throws Exception {
1:       List<String> list = Arrays.asList("one", "two", "three");
0:       Object proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(List.class), constantly(list), null);
0:       
0:       // obeys hashCode and equals, they *are* on the interface
1:       assertTrue(proxied.equals(Arrays.asList("one", "two", "three")));
1:       assertEquals(Arrays.asList("one", "two", "three").hashCode(), proxied.hashCode());
0:       
1:       // and toString
1:       assertEquals(list.toString(), proxied.toString());
0:       
1:       Runnable runnable = new Runnable() {
1:         public void run() {}
1:       };
0:       proxied = InterfaceProxyGenerator.getProxyInstance(testBundle, Arrays.<Class<?>>asList(Runnable.class), constantly(runnable), null);
0:       
1:       // obeys hashCode and equals, they *are not* on the interface
1:       assertTrue(proxied.equals(runnable));
1:       assertEquals(runnable.hashCode(), proxied.hashCode());
0:   }
0:   
0:   
1:   private Callable<Object> constantly(final Object result) {
1:       return new Callable<Object>() {
0:           public Object call() throws Exception {
1:               return result;
0:           }             
1:         };
0:   }
============================================================================