1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
1:6c69a67:  */
1:7a834c3: package org.apache.aries.subsystem.util.felix;
1:6c69a67: 
1:6c69a67: import java.util.ArrayList;
1:6c69a67: import java.util.Collection;
1:6c69a67: import java.util.Collections;
1:6c69a67: import java.util.Map;
1:6c69a67: 
1:7a834c3: import org.apache.aries.subsystem.obr.internal.ResourceHelper;
1:6c69a67: import org.apache.felix.bundlerepository.Capability;
1:6c69a67: import org.apache.felix.bundlerepository.Requirement;
1:6c69a67: import org.apache.felix.bundlerepository.Resource;
1:6c69a67: import org.osgi.framework.Version;
1:6c69a67: 
1:6c69a67: // TODO Need to distinguish between resources that have already been deployed (local) and those that have not.
1:6c69a67: public class OsgiResourceAdapter implements Resource {
1:6c69a67: 	private final org.osgi.resource.Resource resource;
1:6c69a67: 	
1:6c69a67: 	public OsgiResourceAdapter(org.osgi.resource.Resource resource) {
1:6c69a67: 		if (resource == null)
1:6c69a67: 			throw new NullPointerException("Missing required parameter: resource");
1:6c69a67: 		this.resource = resource;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Capability[] getCapabilities() {
1:6c69a67: 		Collection<org.osgi.resource.Capability> capabilities = resource.getCapabilities(null);
1:6c69a67: 		Collection<Capability> result = new ArrayList<Capability>(capabilities.size());
1:6c69a67: 		for (org.osgi.resource.Capability capability : capabilities)
1:6c69a67: 			result.add(new OsgiCapabilityAdapter(capability));
1:6c69a67: 		return result.toArray(new Capability[result.size()]);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String[] getCategories() {
1:6c69a67: 		return new String[0];
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getId() {
1:6c69a67: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:6c69a67: 		Version version = ResourceHelper.getVersionAttribute(resource);
1:6c69a67: 		return symbolicName + ";version=" + version;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getPresentationName() {
1:6c69a67: 		return ResourceHelper.getSymbolicNameAttribute(resource);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Map getProperties() {
1:6c69a67: 		return Collections.emptyMap();
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Requirement[] getRequirements() {
1:6c69a67: 		Collection<org.osgi.resource.Requirement> requirements = resource.getRequirements(null);
1:6c69a67: 		Collection<Requirement> result = new ArrayList<Requirement>(requirements.size());
1:6c69a67: 		for (org.osgi.resource.Requirement requirement : requirements)
1:6c69a67: 			result.add(new OsgiRequirementAdapter(requirement));
1:6c69a67: 		return result.toArray(new Requirement[result.size()]);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Long getSize() {
1:6c69a67: 		return -1L;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getSymbolicName() {
1:6c69a67: 		return ResourceHelper.getSymbolicNameAttribute(resource);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getURI() {
1:6c69a67: 		return ResourceHelper.getContentAttribute(resource);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public Version getVersion() {
1:6c69a67: 		return ResourceHelper.getVersionAttribute(resource);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public boolean isLocal() {
1:6c69a67: 		return false;
1:6c69a67: 	}
1:6c69a67: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.util.felix;
1: import org.apache.aries.subsystem.obr.internal.ResourceHelper;
author:John Ross
-------------------------------------------------------------------------------
commit:9731fd6
/////////////////////////////////////////////////////////////////////////
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.aries.subsystem.obr.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.osgi.framework.Version;
1: 
1: // TODO Need to distinguish between resources that have already been deployed (local) and those that have not.
1: public class OsgiResourceAdapter implements Resource {
1: 	private final org.osgi.resource.Resource resource;
1: 	
1: 	public OsgiResourceAdapter(org.osgi.resource.Resource resource) {
1: 		if (resource == null)
1: 			throw new NullPointerException("Missing required parameter: resource");
1: 		this.resource = resource;
1: 	}
1: 
1: 	public Capability[] getCapabilities() {
1: 		Collection<org.osgi.resource.Capability> capabilities = resource.getCapabilities(null);
1: 		Collection<Capability> result = new ArrayList<Capability>(capabilities.size());
1: 		for (org.osgi.resource.Capability capability : capabilities)
1: 			result.add(new OsgiCapabilityAdapter(capability));
1: 		return result.toArray(new Capability[result.size()]);
1: 	}
1: 
1: 	public String[] getCategories() {
1: 		return new String[0];
1: 	}
1: 
1: 	public String getId() {
1: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1: 		Version version = ResourceHelper.getVersionAttribute(resource);
1: 		return symbolicName + ";version=" + version;
1: 	}
1: 
1: 	public String getPresentationName() {
1: 		return ResourceHelper.getSymbolicNameAttribute(resource);
1: 	}
1: 
1: 	public Map getProperties() {
1: 		return Collections.emptyMap();
1: 	}
1: 
1: 	public Requirement[] getRequirements() {
1: 		Collection<org.osgi.resource.Requirement> requirements = resource.getRequirements(null);
1: 		Collection<Requirement> result = new ArrayList<Requirement>(requirements.size());
1: 		for (org.osgi.resource.Requirement requirement : requirements)
1: 			result.add(new OsgiRequirementAdapter(requirement));
1: 		return result.toArray(new Requirement[result.size()]);
1: 	}
1: 
1: 	public Long getSize() {
1: 		return -1L;
1: 	}
1: 
1: 	public String getSymbolicName() {
1: 		return ResourceHelper.getSymbolicNameAttribute(resource);
1: 	}
1: 
1: 	public String getURI() {
1: 		return ResourceHelper.getContentAttribute(resource);
1: 	}
1: 
1: 	public Version getVersion() {
1: 		return ResourceHelper.getVersionAttribute(resource);
1: 	}
1: 
1: 	public boolean isLocal() {
1: 		return false;
1: 	}
1: }
============================================================================