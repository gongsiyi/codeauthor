1:314564e: /*
1:314564e:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:314564e:  * 
1:314564e:  * Licensed under the Apache License, Version 2.0 (the "License");
1:314564e:  * you may not use this file except in compliance with the License.
1:314564e:  * You may obtain a copy of the License at
1:314564e:  *
1:314564e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:314564e:  *
1:314564e:  * Unless required by applicable law or agreed to in writing, software
1:314564e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:314564e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:314564e:  * See the License for the specific language governing permissions and
1:314564e:  * limitations under the License.
1:314564e:  */
1:314564e: 
1:314564e: package org.osgi.service.transaction.control;
1:314564e: 
1:314564e: /**
1:314564e:  * The interface used by clients to control the active transaction context
1:314564e:  */
1:314564e: public interface TransactionControl extends TransactionStarter {
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Build a transaction context to surround a piece of transactional work
1:314564e: 	 * 
1:314564e: 	 * @return A builder to complete the creation of the transaction
1:314564e: 	 */
1:314564e: 	TransactionBuilder build();
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * @return true if a transaction is currently active
1:314564e: 	 */
1:314564e: 	boolean activeTransaction();
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * @return true if a transaction is currently active, or if there is a
1:314564e: 	 *         "no transaction" context active
1:314564e: 	 */
1:314564e: 	boolean activeScope();
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * @return The current transaction context, which may be a "no transaction"
1:314564e: 	 *         context, or null if there is no active context
1:314564e: 	 */
1:314564e: 	TransactionContext getCurrentContext();
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Gets the rollback status of the active transaction
1:314564e: 	 * 
1:314564e: 	 * @return true if the transaction is marked for rollback
1:314564e: 	 * @throws IllegalStateException if no transaction is active
1:314564e: 	 */
1:314564e: 	boolean getRollbackOnly() throws IllegalStateException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Marks the current transaction to be rolled back
1:314564e: 	 * 
1:314564e: 	 * @throws IllegalStateException if no transaction is active
1:314564e: 	 */
1:314564e: 	void setRollbackOnly() throws IllegalStateException;
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Marks that the current transaction should not be rolled back if the
1:314564e: 	 * supplied Exception is thrown by the current transactional work
1:314564e: 	 * 
1:314564e: 	 * @param t The exception to ignore
1:314564e: 	 * @throws IllegalStateException if no transaction is active
1:314564e: 	 */
1:314564e: 	void ignoreException(Throwable t) throws IllegalStateException;
1:314564e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:b767d3b
/////////////////////////////////////////////////////////////////////////
commit:314564e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.service.transaction.control;
1: 
1: /**
1:  * The interface used by clients to control the active transaction context
1:  */
1: public interface TransactionControl extends TransactionStarter {
1: 
1: 	/**
1: 	 * Build a transaction context to surround a piece of transactional work
1: 	 * 
0: 	 * @param propagation The transaction propagation to use
1: 	 * @return A builder to complete the creation of the transaction
1: 	 */
1: 	TransactionBuilder build();
1: 
1: 	/**
1: 	 * @return true if a transaction is currently active
1: 	 */
1: 	boolean activeTransaction();
1: 
1: 	/**
1: 	 * @return true if a transaction is currently active, or if there is a
1: 	 *         "no transaction" context active
1: 	 */
1: 	boolean activeScope();
1: 
1: 	/**
1: 	 * @return The current transaction context, which may be a "no transaction"
1: 	 *         context, or null if there is no active context
1: 	 */
1: 	TransactionContext getCurrentContext();
1: 
1: 	/**
1: 	 * Gets the rollback status of the active transaction
1: 	 * 
1: 	 * @return true if the transaction is marked for rollback
1: 	 * @throws IllegalStateException if no transaction is active
1: 	 */
1: 	boolean getRollbackOnly() throws IllegalStateException;
1: 
1: 	/**
1: 	 * Marks the current transaction to be rolled back
1: 	 * 
1: 	 * @throws IllegalStateException if no transaction is active
1: 	 */
1: 	void setRollbackOnly() throws IllegalStateException;
1: 
1: 	/**
1: 	 * Marks that the current transaction should not be rolled back if the
1: 	 * supplied Exception is thrown by the current transactional work
1: 	 * 
1: 	 * @param t The exception to ignore
1: 	 * @throws IllegalStateException if no transaction is active
1: 	 */
1: 	void ignoreException(Throwable t) throws IllegalStateException;
1: }
============================================================================