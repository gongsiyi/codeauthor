1:71814f4: /**
1:71814f4:  * Licensed to the Apache Software Foundation (ASF) under one
1:71814f4:  * or more contributor license agreements.  See the NOTICE file
1:71814f4:  * distributed with this work for additional information
1:71814f4:  * regarding copyright ownership.  The ASF licenses this file
1:71814f4:  * to you under the Apache License, Version 2.0 (the
1:71814f4:  * "License"); you may not use this file except in compliance
1:71814f4:  * with the License.  You may obtain a copy of the License at
1:71814f4:  *
1:71814f4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:71814f4:  *
1:71814f4:  * Unless required by applicable law or agreed to in writing,
1:71814f4:  * software distributed under the License is distributed on an
1:71814f4:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:71814f4:  * KIND, either express or implied.  See the License for the
1:71814f4:  * specific language governing permissions and limitations
1:71814f4:  * under the License.
1:71814f4:  */
1:71814f4: package org.apache.aries.spifly.statictool;
1:71814f4: 
1:71814f4: import java.io.File;
1:71814f4: import java.io.FileOutputStream;
1:71814f4: import java.net.URL;
1:71814f4: import java.util.Arrays;
1:71814f4: import java.util.jar.Attributes;
1:71814f4: import java.util.jar.JarFile;
1:71814f4: import java.util.jar.JarOutputStream;
1:71814f4: import java.util.jar.Manifest;
1:71814f4: import java.util.zip.ZipEntry;
1:71814f4: 
1:e9a5257: import org.apache.aries.spifly.SpiFlyConstants;
1:71814f4: import org.apache.aries.spifly.Streams;
1:71814f4: import org.apache.aries.spifly.statictool.bundle.Test2Class;
1:c9a84c5: import org.apache.aries.spifly.statictool.bundle.Test3Class;
1:71814f4: import org.apache.aries.spifly.statictool.bundle.TestClass;
1:71814f4: import org.junit.Assert;
1:71814f4: import org.junit.Test;
1:71814f4: 
1:71814f4: public class ConsumerTest {
1:71814f4:     @Test
1:71814f4:     public void testConsumerBundle() throws Exception {
1:71814f4:         String testClassFileName = TestClass.class.getName().replace('.', '/') + ".class";
1:71814f4:         URL testClassURL = getClass().getResource("/" + testClassFileName);
1:71814f4:         String test2ClassFileName = Test2Class.class.getName().replace('.', '/') + ".class";
1:71814f4:         URL test2ClassURL = getClass().getResource("/" + test2ClassFileName);
1:c9a84c5:         String test3ClassFileName = Test3Class.class.getName().replace('.', '/') + ".class";
1:c9a84c5:         URL test3ClassURL = getClass().getResource("/" + test3ClassFileName);
1:71814f4: 
1:71814f4:         File jarFile = new File(System.getProperty("java.io.tmpdir") + "/testjar_" + System.currentTimeMillis() + ".jar");
1:71814f4:         File expectedFile = null;
1:71814f4:         try {
1:71814f4:             // Create the jarfile to be used for testing
1:71814f4:             Manifest mf = new Manifest();
1:71814f4:             Attributes mainAttributes = mf.getMainAttributes();
1:71814f4:             mainAttributes.putValue("Manifest-Version", "1.0");
1:71814f4:             mainAttributes.putValue("Bundle-ManifestVersion", "2.0");
1:71814f4:             mainAttributes.putValue("Bundle-SymbolicName", "testbundle");
1:71814f4:             mainAttributes.putValue("Foo", "Bar Bar");
1:71814f4:             mainAttributes.putValue(SpiFlyConstants.SPI_CONSUMER_HEADER, Test2Class.class.getName() + "#getTCCL()");
1:c9a84c5: 
1:71814f4:             JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile), mf);
1:71814f4:             jos.putNextEntry(new ZipEntry(testClassFileName));
1:71814f4:             Streams.pump(testClassURL.openStream(), jos);
1:71814f4:             jos.putNextEntry(new ZipEntry(test2ClassFileName));
1:71814f4:             Streams.pump(test2ClassURL.openStream(), jos);
1:c9a84c5:             jos.putNextEntry(new ZipEntry(test3ClassFileName));
1:c9a84c5:             Streams.pump(test3ClassURL.openStream(), jos);
1:71814f4:             jos.close();
1:71814f4: 
1:71814f4:             Main.main(jarFile.getCanonicalPath());
1:71814f4: 
1:71814f4:             expectedFile = new File(jarFile.getParent(), jarFile.getName().replaceAll("[.]jar", "_spifly.jar"));
1:71814f4:             Assert.assertTrue("A processed separate bundle should have been created", expectedFile.exists());
1:71814f4: 
1:71814f4:             // Check manifest in generated bundle.
1:71814f4:             JarFile transformedJarFile = new JarFile(expectedFile);
1:71814f4:             Manifest expectedMF = transformedJarFile.getManifest();
1:71814f4:             Assert.assertEquals("1.0", expectedMF.getMainAttributes().getValue("Manifest-Version"));
1:71814f4:             Assert.assertEquals("2.0", expectedMF.getMainAttributes().getValue("Bundle-ManifestVersion"));
1:71814f4:             Assert.assertEquals("testbundle", expectedMF.getMainAttributes().getValue("Bundle-SymbolicName"));
1:71814f4:             Assert.assertEquals("Bar Bar", expectedMF.getMainAttributes().getValue("Foo"));
1:c9a84c5:             Assert.assertEquals("org.apache.aries.spifly;version=\"[1.0.0,1.1.0)\"", expectedMF.getMainAttributes().getValue("Import-Package"));
1:71814f4:             Assert.assertNull(expectedMF.getMainAttributes().get(SpiFlyConstants.SPI_CONSUMER_HEADER));
1:71814f4: 
1:71814f4:             JarFile initialJarFile = new JarFile(jarFile);
1:71814f4:             byte[] orgBytes = Streams.suck(initialJarFile.getInputStream(new ZipEntry(testClassFileName)));
1:71814f4:             byte[] transBytes = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(testClassFileName)));
1:71814f4:             Assert.assertFalse("The transformed class should be different", Arrays.equals(orgBytes, transBytes));
1:71814f4: 
1:71814f4:             byte[] orgBytes2 = Streams.suck(initialJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
1:c9a84c5:             byte[] nonTransBytes2 = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
1:c9a84c5:             Assert.assertArrayEquals(orgBytes2, nonTransBytes2);
1:c9a84c5: 
1:c9a84c5:             byte[] orgBytes3 = Streams.suck(initialJarFile.getInputStream(new ZipEntry(test3ClassFileName)));
1:c9a84c5:             byte[] nonTransBytes3 = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test3ClassFileName)));
1:c9a84c5:             Assert.assertArrayEquals(orgBytes3, nonTransBytes3);
1:71814f4: 
1:71814f4:             initialJarFile.close();
1:71814f4:             transformedJarFile.close();
1:71814f4:         } finally {
1:71814f4:             jarFile.delete();
1:71814f4: 
1:71814f4:             if (expectedFile != null)
1:71814f4:                 expectedFile.delete();
1:71814f4:         }
1:71814f4:     }
1:71814f4: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:c9a84c5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.spifly.statictool.bundle.Test3Class;
/////////////////////////////////////////////////////////////////////////
1:         String test3ClassFileName = Test3Class.class.getName().replace('.', '/') + ".class";
1:         URL test3ClassURL = getClass().getResource("/" + test3ClassFileName);
/////////////////////////////////////////////////////////////////////////
1: 
1:             jos.putNextEntry(new ZipEntry(test3ClassFileName));
1:             Streams.pump(test3ClassURL.openStream(), jos);
/////////////////////////////////////////////////////////////////////////
1:             Assert.assertEquals("org.apache.aries.spifly;version=\"[1.0.0,1.1.0)\"", expectedMF.getMainAttributes().getValue("Import-Package"));
/////////////////////////////////////////////////////////////////////////
1:             byte[] nonTransBytes2 = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
1:             Assert.assertArrayEquals(orgBytes2, nonTransBytes2);
1: 
1:             byte[] orgBytes3 = Streams.suck(initialJarFile.getInputStream(new ZipEntry(test3ClassFileName)));
1:             byte[] nonTransBytes3 = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test3ClassFileName)));
1:             Assert.assertArrayEquals(orgBytes3, nonTransBytes3);
commit:e9a5257
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.spifly.SpiFlyConstants;
commit:71814f4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly.statictool;
1: 
0: import java.io.ByteArrayOutputStream;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.net.URL;
1: import java.util.Arrays;
1: import java.util.jar.Attributes;
1: import java.util.jar.JarFile;
1: import java.util.jar.JarOutputStream;
1: import java.util.jar.Manifest;
1: import java.util.zip.ZipEntry;
1: 
1: import org.apache.aries.spifly.Streams;
0: import org.apache.aries.spifly.api.SpiFlyConstants;
1: import org.apache.aries.spifly.statictool.bundle.Test2Class;
1: import org.apache.aries.spifly.statictool.bundle.TestClass;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class ConsumerTest {
1:     @Test
1:     public void testConsumerBundle() throws Exception {
1:         String testClassFileName = TestClass.class.getName().replace('.', '/') + ".class";
1:         URL testClassURL = getClass().getResource("/" + testClassFileName);
1:         String test2ClassFileName = Test2Class.class.getName().replace('.', '/') + ".class";
1:         URL test2ClassURL = getClass().getResource("/" + test2ClassFileName);
1: 
1:         File jarFile = new File(System.getProperty("java.io.tmpdir") + "/testjar_" + System.currentTimeMillis() + ".jar");
1:         File expectedFile = null;
1:         try {
1:             // Create the jarfile to be used for testing
1:             Manifest mf = new Manifest();
1:             Attributes mainAttributes = mf.getMainAttributes();
1:             mainAttributes.putValue("Manifest-Version", "1.0");
1:             mainAttributes.putValue("Bundle-ManifestVersion", "2.0");
1:             mainAttributes.putValue("Bundle-SymbolicName", "testbundle");
1:             mainAttributes.putValue("Foo", "Bar Bar");
1:             mainAttributes.putValue(SpiFlyConstants.SPI_CONSUMER_HEADER, Test2Class.class.getName() + "#getTCCL()");
0:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:             mf.write(baos);
1:             JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile), mf);
1:             jos.putNextEntry(new ZipEntry(testClassFileName));
1:             Streams.pump(testClassURL.openStream(), jos);
1:             jos.putNextEntry(new ZipEntry(test2ClassFileName));
1:             Streams.pump(test2ClassURL.openStream(), jos);
1:             jos.close();
1: 
1:             Main.main(jarFile.getCanonicalPath());
1: 
1:             expectedFile = new File(jarFile.getParent(), jarFile.getName().replaceAll("[.]jar", "_spifly.jar"));
1:             Assert.assertTrue("A processed separate bundle should have been created", expectedFile.exists());
1: 
1:             // Check manifest in generated bundle.
1:             JarFile transformedJarFile = new JarFile(expectedFile);
1:             Manifest expectedMF = transformedJarFile.getManifest();
1:             Assert.assertEquals("1.0", expectedMF.getMainAttributes().getValue("Manifest-Version"));
1:             Assert.assertEquals("2.0", expectedMF.getMainAttributes().getValue("Bundle-ManifestVersion"));
1:             Assert.assertEquals("testbundle", expectedMF.getMainAttributes().getValue("Bundle-SymbolicName"));
1:             Assert.assertEquals("Bar Bar", expectedMF.getMainAttributes().getValue("Foo"));
1:             Assert.assertNull(expectedMF.getMainAttributes().get(SpiFlyConstants.SPI_CONSUMER_HEADER));
1: 
1:             JarFile initialJarFile = new JarFile(jarFile);
1:             byte[] orgBytes = Streams.suck(initialJarFile.getInputStream(new ZipEntry(testClassFileName)));
1:             byte[] transBytes = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(testClassFileName)));
1:             Assert.assertFalse("The transformed class should be different", Arrays.equals(orgBytes, transBytes));
1: 
1:             byte[] orgBytes2 = Streams.suck(initialJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
0:             byte[] nonTransBytes = Streams.suck(transformedJarFile.getInputStream(new ZipEntry(test2ClassFileName)));
0:             Assert.assertArrayEquals(orgBytes2, nonTransBytes);
1: 
1:             initialJarFile.close();
1:             transformedJarFile.close();
1:         } finally {
1:             jarFile.delete();
1: 
1:             if (expectedFile != null)
1:                 expectedFile.delete();
1:         }
1:     }
1: }
============================================================================