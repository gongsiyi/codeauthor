1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:2299957: package org.apache.aries.tx.control.jdbc.xa.impl;
6:2299957: 
1:2299957: import java.util.Dictionary;
1:2299957: import java.util.Hashtable;
1:2906477: 
1:7c388cb: import org.apache.aries.tx.control.jdbc.common.impl.AbstractJDBCConnectionProvider;
1:7c388cb: import org.apache.aries.tx.control.jdbc.common.impl.ResourceTrackingJDBCConnectionProviderFactory;
1:7c388cb: import org.apache.aries.tx.control.resource.common.impl.ConfigurationDefinedResourceFactory;
1:7c388cb: import org.apache.aries.tx.control.resource.common.impl.ResourceActivator;
1:7c388cb: import org.apache.aries.tx.control.resource.common.impl.ResourceProviderFactoryServiceFactory;
1:7c388cb: import org.apache.aries.tx.control.resource.common.impl.TrackingResourceProviderFactory;
1:2299957: import org.osgi.framework.BundleContext;
1:2299957: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1:2299957: 
1:7c388cb: public class Activator extends ResourceActivator<AbstractJDBCConnectionProvider, ResourceTrackingJDBCConnectionProviderFactory> {
1:2299957: 
1:2299957: 	
1:2299957: 	@Override
1:7c388cb: 	protected ResourceProviderFactoryServiceFactory<AbstractJDBCConnectionProvider, ResourceTrackingJDBCConnectionProviderFactory> getServiceFactory(
1:7c388cb: 			BundleContext context) {
1:7c388cb: 		return new ResourceProviderFactoryServiceFactory<AbstractJDBCConnectionProvider, ResourceTrackingJDBCConnectionProviderFactory>() {
1:2906477: 			@Override
1:7c388cb: 			protected TrackingResourceProviderFactory<AbstractJDBCConnectionProvider> getTrackingResourceManagerProviderFactory() {
1:7c388cb: 				return new ResourceTrackingJDBCConnectionProviderFactory(
1:7c388cb: 						new JDBCConnectionProviderFactoryImpl());
1:2906477: 			}
1:2906477: 		};
1:2906477: 	}
1:2906477: 
1:2299957: 	@Override
1:7c388cb: 	protected Class<? super ResourceTrackingJDBCConnectionProviderFactory> getAdvertisedInterface() {
1:7c388cb: 		return JDBCConnectionProviderFactory.class;
2:2299957: 	}
1:2906477: 
1:7c388cb: 	@Override
1:7c388cb: 	protected Dictionary<String, Object> getServiceProperties() {
2:2299957: 		Dictionary<String, Object> props = new Hashtable<>();
1:2299957: 		props.put("osgi.local.enabled", Boolean.TRUE);
1:2299957: 		props.put("osgi.xa.enabled", Boolean.TRUE);
2:2299957: 		return props;
1:2299957: 	}
1:2299957: 
1:7c388cb: 	@Override
1:7c388cb: 	protected ConfigurationDefinedResourceFactory getConfigurationDefinedResourceFactory(BundleContext context) {
1:7c388cb: 		return new ManagedServiceFactoryImpl(context);
1:2299957: 	}
1:2299957: 
1:7c388cb: 	@Override
1:7c388cb: 	protected String getMSFPid() {
1:7c388cb: 		return "org.apache.aries.tx.control.jdbc.xa";
1:7c388cb: 	}
1:2299957: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jdbc.common.impl.AbstractJDBCConnectionProvider;
1: import org.apache.aries.tx.control.jdbc.common.impl.ResourceTrackingJDBCConnectionProviderFactory;
1: import org.apache.aries.tx.control.resource.common.impl.ConfigurationDefinedResourceFactory;
1: import org.apache.aries.tx.control.resource.common.impl.ResourceActivator;
1: import org.apache.aries.tx.control.resource.common.impl.ResourceProviderFactoryServiceFactory;
1: import org.apache.aries.tx.control.resource.common.impl.TrackingResourceProviderFactory;
1: public class Activator extends ResourceActivator<AbstractJDBCConnectionProvider, ResourceTrackingJDBCConnectionProviderFactory> {
1: 	protected ResourceProviderFactoryServiceFactory<AbstractJDBCConnectionProvider, ResourceTrackingJDBCConnectionProviderFactory> getServiceFactory(
1: 			BundleContext context) {
1: 		return new ResourceProviderFactoryServiceFactory<AbstractJDBCConnectionProvider, ResourceTrackingJDBCConnectionProviderFactory>() {
1: 			protected TrackingResourceProviderFactory<AbstractJDBCConnectionProvider> getTrackingResourceManagerProviderFactory() {
1: 				return new ResourceTrackingJDBCConnectionProviderFactory(
1: 						new JDBCConnectionProviderFactoryImpl());
1: 	protected Class<? super ResourceTrackingJDBCConnectionProviderFactory> getAdvertisedInterface() {
1: 		return JDBCConnectionProviderFactory.class;
1: 	@Override
1: 	protected Dictionary<String, Object> getServiceProperties() {
1: 	@Override
1: 	protected ConfigurationDefinedResourceFactory getConfigurationDefinedResourceFactory(BundleContext context) {
1: 		return new ManagedServiceFactoryImpl(context);
1: 	@Override
1: 	protected String getMSFPid() {
1: 		return "org.apache.aries.tx.control.jdbc.xa";
1: 	}
commit:2906477
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.tx.control.jdbc.common.impl.InternalJDBCConnectionProviderFactory;
0: import org.apache.aries.tx.control.jdbc.common.impl.JDBCConnectionProviderFactoryServiceFactory;
/////////////////////////////////////////////////////////////////////////
0: 	private JDBCConnectionProviderFactoryServiceFactory service;
0: 	private ManagedServiceFactoryImpl msf;
0: 		InternalJDBCConnectionProviderFactory ijcpf = new JDBCConnectionProviderFactoryImpl();
1: 		
0: 		service = new JDBCConnectionProviderFactoryServiceFactory() {
1: 			@Override
0: 			protected InternalJDBCConnectionProviderFactory getInternalJDBCConnectionProviderFactory() {
0: 				return ijcpf;
1: 			}
1: 		};
1: 		
0: 		msf = new ManagedServiceFactoryImpl(context);
0: 				msf, getMSFProperties());
0: 		safeUnregister(reg);
0: 		safeUnregister(factoryReg);
0: 		service.close();
0: 		msf.stop();
0: 	private void safeUnregister(ServiceRegistration<?> reg) {
0: 		try {
0: 			reg.unregister();
0: 		} catch (IllegalStateException ise) {}
1: 	}
1: 	
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:2299957
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.xa.impl;
1: 
0: import static org.osgi.framework.Constants.SERVICE_PID;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
0: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceRegistration;
0: import org.osgi.service.cm.ManagedServiceFactory;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: 
0: public class Activator implements BundleActivator {
1: 
0: 	private ServiceRegistration<JDBCConnectionProviderFactory> reg;
0: 	private ServiceRegistration<ManagedServiceFactory> factoryReg;
1: 	
1: 	@Override
0: 	public void start(BundleContext context) throws Exception {
0: 		reg = context.registerService(JDBCConnectionProviderFactory.class, 
0: 				new JDBCConnectionProviderFactoryImpl(), getProperties());
1: 		
0: 		factoryReg = context.registerService(ManagedServiceFactory.class, 
0: 				new ManagedServiceFactoryImpl(context), getMSFProperties());
1: 	}
1: 
1: 	@Override
0: 	public void stop(BundleContext context) throws Exception {
0: 		reg.unregister();
0: 		factoryReg.unregister();
1: 	}
1: 
0: 	private Dictionary<String, Object> getProperties() {
1: 		Dictionary<String, Object> props = new Hashtable<>();
1: 		props.put("osgi.local.enabled", Boolean.TRUE);
1: 		props.put("osgi.xa.enabled", Boolean.TRUE);
1: 		return props;
1: 	}
1: 
0: 	private Dictionary<String, ?> getMSFProperties() {
1: 		Dictionary<String, Object> props = new Hashtable<>();
0: 		props.put(SERVICE_PID, "org.apache.aries.tx.control.jdbc.xa");
1: 		return props;
1: 	}
1: 
1: }
============================================================================