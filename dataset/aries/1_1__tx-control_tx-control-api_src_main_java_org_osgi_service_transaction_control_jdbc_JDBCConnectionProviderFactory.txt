1:314564e: /*
1:314564e:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:314564e:  * 
1:314564e:  * Licensed under the Apache License, Version 2.0 (the "License");
1:314564e:  * you may not use this file except in compliance with the License.
1:314564e:  * You may obtain a copy of the License at
1:314564e:  *
1:314564e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:314564e:  *
1:314564e:  * Unless required by applicable law or agreed to in writing, software
1:314564e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:314564e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:314564e:  * See the License for the specific language governing permissions and
1:314564e:  * limitations under the License.
1:314564e:  */
1:314564e: package org.osgi.service.transaction.control.jdbc;
1:314564e: 
1:b767d3b: import java.sql.Connection;
1:314564e: import java.sql.Driver;
1:314564e: import java.util.Map;
1:314564e: import java.util.Properties;
1:314564e: 
1:314564e: import javax.sql.DataSource;
1:314564e: import javax.sql.XADataSource;
1:314564e: 
1:314564e: import org.osgi.service.jdbc.DataSourceFactory;
1:314564e: 
1:314564e: /**
1:314564e:  * A factory for creating JDBCConnectionProvider instances
1:314564e:  * <p>
1:314564e:  * This factory can be used if the {@link JDBCConnectionProvider} should not be
1:314564e:  * a public service, for example to protect a username/password.
1:314564e:  */
1:314564e: public interface JDBCConnectionProviderFactory {
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to determine whether XA enlistment is enabled for this
1:314564e: 	 * resource provider
1:314564e: 	 */
1:314564e: 	public static final String	XA_ENLISTMENT_ENABLED		= "osgi.xa.enabled";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to determine whether local enlistment is enabled for
1:314564e: 	 * this resource provider
1:314564e: 	 */
1:314564e: 	public static final String	LOCAL_ENLISTMENT_ENABLED	= "osgi.local.enabled";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to determine whether connection pooling is enabled for
1:314564e: 	 * this resource provider
1:314564e: 	 */
1:314564e: 	public static final String	CONNECTION_POOLING_ENABLED	= "osgi.connection.pooling.enabled";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to set the maximum amount of time that the pool should
1:314564e: 	 * wait for a connection
1:314564e: 	 */
1:314564e: 	public static final String	CONNECTION_TIMEOUT			= "osgi.connection.timeout";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to set the maximum amount of time that connections in
1:314564e: 	 * the pool should remain idle before being closed
1:314564e: 	 */
1:314564e: 	public static final String	IDLE_TIMEOUT				= "osgi.idle.timeout";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to set the maximum amount of time that connections in
1:314564e: 	 * the pool should remain open
1:314564e: 	 */
1:314564e: 	public static final String	CONNECTION_LIFETIME			= "osgi.connection.lifetime";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to set the minimum number of connections that should be
1:314564e: 	 * held in the pool
1:314564e: 	 */
1:314564e: 	public static final String	MIN_CONNECTIONS				= "osgi.connection.min";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to set the maximum number of connections that should be
1:314564e: 	 * held in the pool
1:314564e: 	 */
1:314564e: 	public static final String	MAX_CONNECTIONS				= "osgi.connection.max";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * The property used to set the maximum number of connections that should be
1:314564e: 	 * held in the pool
1:314564e: 	 */
1:314564e: 	public static final String	USE_DRIVER					= "osgi.use.driver";
1:80b5875: 	
1:80b5875: 	/**
1:80b5875: 	 * The property used to set the recovery identifier that should be used
1:80b5875: 	 */
1:80b5875: 	public static String OSGI_RECOVERY_IDENTIFIER = "osgi.recovery.identifier";
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Create a private {@link JDBCConnectionProvider} using a
1:314564e: 	 * DataSourceFactory.
1:314564e: 	 * 
1:b767d3b: 	 * @param dsf The {@link DataSourceFactory} that provides access to the database
1:314564e: 	 * @param jdbcProperties The properties to pass to the
1:314564e: 	 *            {@link DataSourceFactory} in order to create the underlying
1:314564e: 	 *            {@link DataSource}
1:314564e: 	 * @param resourceProviderProperties Configuration properties to pass to the
1:314564e: 	 *            JDBC Resource Provider runtime
1:314564e: 	 * @return A {@link JDBCConnectionProvider} that can be used in transactions
1:314564e: 	 */
1:314564e: 	JDBCConnectionProvider getProviderFor(DataSourceFactory dsf,
1:314564e: 			Properties jdbcProperties,
1:314564e: 			Map<String,Object> resourceProviderProperties);
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Create a private {@link JDBCConnectionProvider} using an existing
1:314564e: 	 * {@link DataSource}.
1:314564e: 	 * 
1:b767d3b: 	 * @param ds The {@link DataSource} that provides access to the database
1:314564e: 	 * @param resourceProviderProperties Configuration properties to pass to the
1:314564e: 	 *            JDBC Resource Provider runtime
1:314564e: 	 * @return A {@link JDBCConnectionProvider} that can be used in transactions
1:314564e: 	 */
1:314564e: 	JDBCConnectionProvider getProviderFor(DataSource ds,
1:314564e: 			Map<String,Object> resourceProviderProperties);
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Create a private {@link JDBCConnectionProvider} using an existing
1:314564e: 	 * {@link Driver}.
1:314564e: 	 * 
1:b767d3b: 	 * @param driver The {@link Driver} that provides access to the database
1:ef9eace: 	 * @param jdbcProperties The properties to pass to the {@link Driver} in
1:ef9eace: 	 *            order to create a {@link Connection}
1:314564e: 	 * @param resourceProviderProperties Configuration properties to pass to the
1:314564e: 	 *            JDBC Resource Provider runtime
1:314564e: 	 * @return A {@link JDBCConnectionProvider} that can be used in transactions
1:314564e: 	 */
1:314564e: 	JDBCConnectionProvider getProviderFor(Driver driver,
1:ef9eace: 			Properties jdbcProperties,
1:314564e: 			Map<String,Object> resourceProviderProperties);
1:314564e: 
1:314564e: 	/**
1:314564e: 	 * Create a private {@link JDBCConnectionProvider} using an existing
1:314564e: 	 * {@link XADataSource}.
1:314564e: 	 * 
1:b767d3b: 	 * @param ds The {@link XADataSource} that provides access to the database
1:314564e: 	 * @param resourceProviderProperties Configuration properties to pass to the
1:314564e: 	 *            JDBC Resource Provider runtime
1:314564e: 	 * @return A {@link JDBCConnectionProvider} that can be used in transactions
1:314564e: 	 */
1:314564e: 	JDBCConnectionProvider getProviderFor(XADataSource ds,
1:314564e: 			Map<String,Object> resourceProviderProperties);
1:314564e: 
1:314564e: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:80b5875
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * The property used to set the recovery identifier that should be used
1: 	 */
1: 	public static String OSGI_RECOVERY_IDENTIFIER = "osgi.recovery.identifier";
commit:b767d3b
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
/////////////////////////////////////////////////////////////////////////
1: 	 * @param dsf The {@link DataSourceFactory} that provides access to the database
/////////////////////////////////////////////////////////////////////////
1: 	 * @param ds The {@link DataSource} that provides access to the database
/////////////////////////////////////////////////////////////////////////
1: 	 * @param driver The {@link Driver} that provides access to the database
/////////////////////////////////////////////////////////////////////////
1: 	 * @param ds The {@link XADataSource} that provides access to the database
commit:ef9eace
/////////////////////////////////////////////////////////////////////////
1: 	 * @param jdbcProperties The properties to pass to the {@link Driver} in
1: 	 *            order to create a {@link Connection}
1: 			Properties jdbcProperties,
commit:314564e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.transaction.control.jdbc;
1: 
1: import java.sql.Driver;
1: import java.util.Map;
1: import java.util.Properties;
1: 
1: import javax.sql.DataSource;
1: import javax.sql.XADataSource;
1: 
1: import org.osgi.service.jdbc.DataSourceFactory;
1: 
1: /**
1:  * A factory for creating JDBCConnectionProvider instances
1:  * <p>
1:  * This factory can be used if the {@link JDBCConnectionProvider} should not be
1:  * a public service, for example to protect a username/password.
1:  */
1: public interface JDBCConnectionProviderFactory {
1: 
1: 	/**
1: 	 * The property used to determine whether XA enlistment is enabled for this
1: 	 * resource provider
1: 	 */
1: 	public static final String	XA_ENLISTMENT_ENABLED		= "osgi.xa.enabled";
1: 
1: 	/**
1: 	 * The property used to determine whether local enlistment is enabled for
1: 	 * this resource provider
1: 	 */
1: 	public static final String	LOCAL_ENLISTMENT_ENABLED	= "osgi.local.enabled";
1: 
1: 	/**
1: 	 * The property used to determine whether connection pooling is enabled for
1: 	 * this resource provider
1: 	 */
1: 	public static final String	CONNECTION_POOLING_ENABLED	= "osgi.connection.pooling.enabled";
1: 
1: 	/**
1: 	 * The property used to set the maximum amount of time that the pool should
1: 	 * wait for a connection
1: 	 */
1: 	public static final String	CONNECTION_TIMEOUT			= "osgi.connection.timeout";
1: 
1: 	/**
1: 	 * The property used to set the maximum amount of time that connections in
1: 	 * the pool should remain idle before being closed
1: 	 */
1: 	public static final String	IDLE_TIMEOUT				= "osgi.idle.timeout";
1: 
1: 	/**
1: 	 * The property used to set the maximum amount of time that connections in
1: 	 * the pool should remain open
1: 	 */
1: 	public static final String	CONNECTION_LIFETIME			= "osgi.connection.lifetime";
1: 
1: 	/**
1: 	 * The property used to set the minimum number of connections that should be
1: 	 * held in the pool
1: 	 */
1: 	public static final String	MIN_CONNECTIONS				= "osgi.connection.min";
1: 
1: 	/**
1: 	 * The property used to set the maximum number of connections that should be
1: 	 * held in the pool
1: 	 */
1: 	public static final String	MAX_CONNECTIONS				= "osgi.connection.max";
1: 
1: 	/**
1: 	 * The property used to set the maximum number of connections that should be
1: 	 * held in the pool
1: 	 */
1: 	public static final String	USE_DRIVER					= "osgi.use.driver";
1: 
1: 	/**
1: 	 * Create a private {@link JDBCConnectionProvider} using a
1: 	 * DataSourceFactory.
1: 	 * 
0: 	 * @param dsf
1: 	 * @param jdbcProperties The properties to pass to the
1: 	 *            {@link DataSourceFactory} in order to create the underlying
1: 	 *            {@link DataSource}
1: 	 * @param resourceProviderProperties Configuration properties to pass to the
1: 	 *            JDBC Resource Provider runtime
1: 	 * @return A {@link JDBCConnectionProvider} that can be used in transactions
1: 	 */
1: 	JDBCConnectionProvider getProviderFor(DataSourceFactory dsf,
1: 			Properties jdbcProperties,
1: 			Map<String,Object> resourceProviderProperties);
1: 
1: 	/**
1: 	 * Create a private {@link JDBCConnectionProvider} using an existing
1: 	 * {@link DataSource}.
1: 	 * 
0: 	 * @param ds
1: 	 * @param resourceProviderProperties Configuration properties to pass to the
1: 	 *            JDBC Resource Provider runtime
1: 	 * @return A {@link JDBCConnectionProvider} that can be used in transactions
1: 	 */
1: 	JDBCConnectionProvider getProviderFor(DataSource ds,
1: 			Map<String,Object> resourceProviderProperties);
1: 
1: 	/**
1: 	 * Create a private {@link JDBCConnectionProvider} using an existing
1: 	 * {@link Driver}.
1: 	 * 
0: 	 * @param driver
1: 	 * @param resourceProviderProperties Configuration properties to pass to the
1: 	 *            JDBC Resource Provider runtime
1: 	 * @return A {@link JDBCConnectionProvider} that can be used in transactions
1: 	 */
1: 	JDBCConnectionProvider getProviderFor(Driver driver,
1: 			Map<String,Object> resourceProviderProperties);
1: 
1: 	/**
1: 	 * Create a private {@link JDBCConnectionProvider} using an existing
1: 	 * {@link XADataSource}.
1: 	 * 
0: 	 * @param ds
1: 	 * @param resourceProviderProperties Configuration properties to pass to the
1: 	 *            JDBC Resource Provider runtime
1: 	 * @return A {@link JDBCConnectionProvider} that can be used in transactions
1: 	 */
1: 	JDBCConnectionProvider getProviderFor(XADataSource ds,
1: 			Map<String,Object> resourceProviderProperties);
1: 
1: }
============================================================================