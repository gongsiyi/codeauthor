1:3fa6eb7: /**
1:3fa6eb7:  * Licensed to the Apache Software Foundation (ASF) under one
1:3fa6eb7:  * or more contributor license agreements.  See the NOTICE file
1:3fa6eb7:  * distributed with this work for additional information
1:3fa6eb7:  * regarding copyright ownership.  The ASF licenses this file
1:3fa6eb7:  * to you under the Apache License, Version 2.0 (the
1:3fa6eb7:  * "License"); you may not use this file except in compliance
1:3fa6eb7:  * with the License.  You may obtain a copy of the License at
1:3fa6eb7:  *
1:3fa6eb7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3fa6eb7:  *
1:3fa6eb7:  * Unless required by applicable law or agreed to in writing,
1:3fa6eb7:  * software distributed under the License is distributed on an
1:3fa6eb7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3fa6eb7:  * KIND, either express or implied.  See the License for the
1:3fa6eb7:  * specific language governing permissions and limitations
1:3fa6eb7:  * under the License.
1:3fa6eb7:  */
1:92d0499: package org.apache.aries.ejb.modelling.impl;
1:92d0499: 
1:92d0499: import java.io.ByteArrayOutputStream;
1:92d0499: import java.io.IOException;
1:92d0499: import java.io.InputStream;
1:92d0499: import java.net.MalformedURLException;
1:92d0499: import java.net.URL;
1:92d0499: import java.util.List;
1:92d0499: 
1:92d0499: import org.apache.aries.application.modelling.ModellerException;
1:92d0499: import org.apache.aries.util.filesystem.IDirectory;
1:92d0499: import org.apache.aries.util.filesystem.IFile;
1:92d0499: import org.apache.aries.util.io.IOUtils;
1:92d0499: import org.apache.xbean.finder.AbstractFinder;
1:92d0499: import org.slf4j.Logger;
1:92d0499: import org.slf4j.LoggerFactory;
1:92d0499: 
1:92d0499: public class IDirectoryFinder extends AbstractFinder {
1:92d0499: 
1:92d0499:   private static final Logger logger = LoggerFactory.getLogger(IDirectoryFinder.class);
1:92d0499:   
1:92d0499:   private final List<IDirectory> cpEntries;
1:92d0499:   
1:92d0499:   private final ClassLoader loader;
1:92d0499:   
1:92d0499:   public IDirectoryFinder(ClassLoader parent, List<IDirectory> cp) throws ModellerException {
1:92d0499:     cpEntries = cp;
1:92d0499:     loader = new ResourceClassLoader(parent, cpEntries);
1:92d0499:     
1:92d0499:     for(IDirectory entry : cpEntries) {
1:92d0499:       for(IFile f : entry.listAllFiles()) {
1:92d0499:         if(f.getName().endsWith(".class")) {
1:92d0499:           try {
1:92d0499:             readClassDef(f.open());
1:92d0499:           } catch (Exception e) {
1:92d0499:             throw new ModellerException(e);
1:92d0499:           }
1:92d0499:         }
1:92d0499:       }
1:92d0499:     }
1:92d0499:   }
1:92d0499:   
1:92d0499:   @Override
1:92d0499:   protected URL getResource(String arg0) {
1:92d0499:     return loader.getResource(arg0);
1:92d0499:   }
1:92d0499: 
1:92d0499:   @Override
1:92d0499:   protected Class<?> loadClass(String arg0) throws ClassNotFoundException {
1:92d0499:     return loader.loadClass(arg0);
1:92d0499:   }
1:92d0499: 
1:92d0499:   
1:92d0499:   /**
1:92d0499:    * A ClassLoader used by OpenEJB in annotation scanning
1:92d0499:    */
1:92d0499:   public static class ResourceClassLoader extends ClassLoader {
1:92d0499:   
1:92d0499:     private final List<IDirectory> classpath;
1:92d0499:     public ResourceClassLoader(ClassLoader cl, List<IDirectory> cpEntries) {
1:92d0499:       super(cl);
1:92d0499:       classpath = cpEntries;
1:92d0499:     }
1:92d0499:     
1:92d0499:     @Override
1:92d0499:     protected URL findResource(String resName) {
1:92d0499:       for(IDirectory id : classpath) {
1:92d0499:         IFile f = id.getFile(resName);
1:92d0499:         if(f != null)
1:92d0499:           try {
1:92d0499:             return f.toURL();
1:92d0499:           } catch (MalformedURLException e) {
1:92d0499:             logger.error("Error getting URL for file " + f, e);
1:92d0499:           }
1:92d0499:       }
1:92d0499:       return null;
1:92d0499:     }
1:92d0499:   
1:92d0499:     @Override
1:92d0499:     protected Class<?> findClass(String className)
1:92d0499:         throws ClassNotFoundException {
1:92d0499:       ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:92d0499:       
1:92d0499:       try {
1:92d0499:         InputStream is = getResourceAsStream(
1:92d0499:                 className.replace('.', '/') + ".class");
1:92d0499:         if(is == null)
1:92d0499:           throw new ClassNotFoundException(className);
1:92d0499:         IOUtils.copy(is, baos);
1:92d0499:         
1:92d0499:         return defineClass(className, baos.toByteArray(), 0, baos.size());
1:92d0499:       } catch (IOException e) {
1:92d0499:         throw new ClassNotFoundException(className, e);
1:92d0499:       }
1:92d0499:     }
1:92d0499:   }
1:92d0499: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:3fa6eb7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:92d0499
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.List;
1: 
1: import org.apache.aries.application.modelling.ModellerException;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
1: import org.apache.aries.util.io.IOUtils;
1: import org.apache.xbean.finder.AbstractFinder;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class IDirectoryFinder extends AbstractFinder {
1: 
1:   private static final Logger logger = LoggerFactory.getLogger(IDirectoryFinder.class);
1:   
1:   private final List<IDirectory> cpEntries;
1:   
1:   private final ClassLoader loader;
1:   
1:   public IDirectoryFinder(ClassLoader parent, List<IDirectory> cp) throws ModellerException {
1:     cpEntries = cp;
1:     loader = new ResourceClassLoader(parent, cpEntries);
1:     
1:     for(IDirectory entry : cpEntries) {
1:       for(IFile f : entry.listAllFiles()) {
1:         if(f.getName().endsWith(".class")) {
1:           try {
1:             readClassDef(f.open());
1:           } catch (Exception e) {
1:             throw new ModellerException(e);
1:           }
1:         }
1:       }
1:     }
1:   }
1:   
1:   @Override
1:   protected URL getResource(String arg0) {
1:     return loader.getResource(arg0);
1:   }
1: 
1:   @Override
1:   protected Class<?> loadClass(String arg0) throws ClassNotFoundException {
1:     return loader.loadClass(arg0);
1:   }
1: 
1:   
1:   /**
1:    * A ClassLoader used by OpenEJB in annotation scanning
1:    */
1:   public static class ResourceClassLoader extends ClassLoader {
1:   
1:     private final List<IDirectory> classpath;
1:     public ResourceClassLoader(ClassLoader cl, List<IDirectory> cpEntries) {
1:       super(cl);
1:       classpath = cpEntries;
1:     }
1:     
1:     @Override
1:     protected URL findResource(String resName) {
1:       for(IDirectory id : classpath) {
1:         IFile f = id.getFile(resName);
1:         if(f != null)
1:           try {
1:             return f.toURL();
1:           } catch (MalformedURLException e) {
1:             logger.error("Error getting URL for file " + f, e);
1:           }
1:       }
1:       return null;
1:     }
1:   
1:     @Override
1:     protected Class<?> findClass(String className)
1:         throws ClassNotFoundException {
1:       ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:       
1:       try {
1:         InputStream is = getResourceAsStream(
1:                 className.replace('.', '/') + ".class");
1:         if(is == null)
1:           throw new ClassNotFoundException(className);
1:         IOUtils.copy(is, baos);
1:         
1:         return defineClass(className, baos.toByteArray(), 0, baos.size());
1:       } catch (IOException e) {
1:         throw new ClassNotFoundException(className, e);
1:       }
1:     }
1:   }
1: }
============================================================================