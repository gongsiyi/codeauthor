1:b4f040a: /*
1:b4f040a:  * Licensed to the Apache Software Foundation (ASF) under one
1:b4f040a:  * or more contributor license agreements.  See the NOTICE file
1:b4f040a:  * distributed with this work for additional information
1:b4f040a:  * regarding copyright ownership.  The ASF licenses this file
1:b4f040a:  * to you under the Apache License, Version 2.0 (the
1:b4f040a:  * "License"); you may not use this file except in compliance
1:b4f040a:  * with the License.  You may obtain a copy of the License at
1:b4f040a:  *
1:b4f040a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b4f040a:  *
1:b4f040a:  * Unless required by applicable law or agreed to in writing,
1:b4f040a:  * software distributed under the License is distributed on an
1:b4f040a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b4f040a:  * KIND, either express or implied.  See the License for the
1:b4f040a:  * specific language governing permissions and limitations
1:b4f040a:  * under the License.
1:b4f040a:  */
1:b4f040a: package org.apache.aries.samples.blog.itests;
1:b4f040a: 
1:b4f040a: import static org.junit.Assert.assertEquals;
1:b4f040a: import static org.junit.Assert.assertNotNull;
1:b4f040a: import static org.junit.Assert.assertTrue;
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.composite;
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.options;
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:b4f040a: import static org.ops4j.pax.exam.CoreOptions.when;
1:b4f040a: 
1:b4f040a: import java.io.BufferedReader;
1:b4f040a: import java.io.IOException;
1:b4f040a: import java.io.InputStreamReader;
1:b4f040a: import java.net.HttpURLConnection;
1:b4f040a: import java.net.URL;
1:b4f040a: 
1:b4f040a: import javax.inject.Inject;
1:b4f040a: import javax.sql.XADataSource;
1:b4f040a: import javax.transaction.TransactionManager;
1:b4f040a: 
1:b4f040a: import org.apache.aries.application.management.AriesApplication;
1:b4f040a: import org.apache.aries.application.management.AriesApplicationContext;
1:b4f040a: import org.apache.aries.application.management.AriesApplicationManager;
1:b4f040a: import org.apache.aries.samples.blog.api.BloggingService;
1:b4f040a: import org.apache.aries.samples.blog.api.persistence.BlogPersistenceService;
1:b4f040a: import org.junit.runner.RunWith;
1:b4f040a: import org.ops4j.pax.exam.Configuration;
1:b4f040a: import org.ops4j.pax.exam.Option;
1:b4f040a: import org.ops4j.pax.exam.junit.PaxExam;
1:b4f040a: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
1:b4f040a: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:b4f040a: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:b4f040a: import org.osgi.framework.Bundle;
1:b4f040a: import org.osgi.framework.ServiceReference;
1:b4f040a: 
1:b4f040a: @RunWith(PaxExam.class)
1:b4f040a: @ExamReactorStrategy(PerClass.class)
1:b4f040a: public abstract class AbstractBlogIntegrationTest extends org.apache.aries.itest.AbstractIntegrationTest {
1:b4f040a: 
1:b4f040a: 	private static final int CONNECTION_TIMEOUT = 30000;
1:b4f040a: 	public static final long DEFAULT_TIMEOUT = 60000;
1:b4f040a: 
1:b4f040a: 	@Inject
1:b4f040a: 	AriesApplicationManager manager;
1:b4f040a: 
1:b4f040a: 	protected AriesApplicationContext installEba(MavenArtifactUrlReference eba) throws Exception {
1:b4f040a: 		AriesApplication app = manager.createApplication(new URL(eba.getURL()));
1:b4f040a: 		AriesApplicationContext ctx = manager.install(app);
1:b4f040a: 		ctx.start();
1:b4f040a: 		return ctx;
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	protected Bundle assertBundleStarted(String symName) {
1:b4f040a: 		Bundle bundle = context().getBundleByName(symName);
1:b4f040a: 		assertNotNull("Bundle " + symName + " not found", bundle);
1:b4f040a: 		assertEquals(Bundle.ACTIVE, bundle.getState());
1:b4f040a: 		return bundle;
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	protected void assertActive(Bundle bundle) {
1:b4f040a: 		assertTrue("Bundle " + bundle.getSymbolicName() + " should be ACTIVE but is in state " + bundle.getState(), bundle.getState() == Bundle.ACTIVE);
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	protected void assertResolved(Bundle bundle) {
1:b4f040a: 		assertTrue("Bundle " + bundle.getSymbolicName() + " should be ACTIVE but is in state " + bundle.getState(), bundle.getState() == Bundle.RESOLVED);
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	@SuppressWarnings("rawtypes")
1:b4f040a: 	protected void listBundleServices(Bundle b) {
1:b4f040a: 		ServiceReference []srb = b.getRegisteredServices();
1:b4f040a: 		for(ServiceReference sr:srb){
1:b4f040a: 			System.out.println(b.getSymbolicName() + " SERVICE: "+sr);
1:b4f040a: 		}	
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	@SuppressWarnings("rawtypes")
1:b4f040a: 	protected Boolean isServiceRegistered(Bundle b) {
1:b4f040a: 		ServiceReference []srb = b.getRegisteredServices();
1:b4f040a: 		if(srb == null) {
1:b4f040a: 			return false;
1:b4f040a: 		}
1:b4f040a: 		return true;
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	protected void checkBlogWebAccess() throws IOException, InterruptedException {
1:b4f040a: 		Thread.sleep(1000);
1:b4f040a: 		HttpURLConnection conn = makeConnection("http://localhost:8080/blog/ViewBlog");
1:b4f040a: 		String response = getHTTPResponse(conn);
1:b4f040a: 
1:b4f040a: 		/* Uncomment for additional debug */
1:b4f040a: 		/*
1:b4f040a: 		System.out.println("ZZZZZ " + response);
1:b4f040a: 		System.out.println("ZZZZZ " + conn.getResponseCode());
1:b4f040a: 		System.out.println("ZZZZZ " + HttpURLConnection.HTTP_OK);
1:b4f040a: 		 */
1:b4f040a: 
1:b4f040a: 		assertEquals(HttpURLConnection.HTTP_OK,
1:b4f040a: 				conn.getResponseCode());
1:b4f040a: 
1:b4f040a: 		assertTrue("The response did not contain the expected content", response.contains("Blog home"));
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	public static String getHTTPResponse(HttpURLConnection conn) throws IOException
1:b4f040a: 	{
1:b4f040a: 		StringBuilder response = new StringBuilder();
1:b4f040a: 		BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(),
1:b4f040a: 				"ISO-8859-1"));
1:b4f040a: 		try {
1:b4f040a: 			for (String s = reader.readLine(); s != null; s = reader.readLine()) {
1:b4f040a: 				response.append(s).append("\r\n");
1:b4f040a: 			}
1:b4f040a: 		} finally {
1:b4f040a: 			reader.close();
1:b4f040a: 		}
1:b4f040a: 
1:b4f040a: 		return response.toString();
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	public static HttpURLConnection makeConnection(String contextPath) throws IOException
1:b4f040a: 	{
1:b4f040a: 		URL url = new URL(contextPath);
1:b4f040a: 		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
1:b4f040a: 
1:b4f040a: 		conn.setConnectTimeout(CONNECTION_TIMEOUT);
1:b4f040a: 		conn.connect();
1:b4f040a: 
1:b4f040a: 		return conn;
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	protected Option baseOptions() {
1:b4f040a: 		String localRepo = System.getProperty("maven.repo.local");
1:b4f040a: 
1:b4f040a: 		if (localRepo == null) {
1:b4f040a: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:b4f040a: 		}
1:b4f040a: 		return composite(
1:b4f040a: 				junitBundles(),
1:b4f040a: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1:b4f040a: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1:b4f040a: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:b4f040a: 				// this is how you set the default log level when using pax
1:b4f040a: 				// logging (logProfile)
1:b4f040a: 				systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:b4f040a: 				when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1:b4f040a: 				);
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	@Configuration
1:b4f040a: 	public Option[] configuration() {
1:b4f040a: 		return options(
1:b4f040a: 				baseOptions(),
1:b4f040a: 				frameworkProperty("org.osgi.framework.system.packages")
1:b4f040a: 				.value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
1:b4f040a: 				// Log
1:b4f040a: 				//mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:b4f040a: 				//mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:b4f040a: 				// Felix mvn url handler - do we need this?
1:b4f040a: 				//mavenBundle("org.ops4j.pax.url", "pax-url-aether").versionAsInProject(),
1:b4f040a: 
1:b4f040a: 				mavenBundle("org.eclipse.equinox", "cm").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.eclipse.osgi", "services").versionAsInProject(),
1:b4f040a: 
1:b4f040a: 				mavenBundle("org.apache.xbean", "xbean-asm4-shaded").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.xbean", "xbean-finder-shaded").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.ops4j.pax.web", "pax-web-jetty-bundle").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.ops4j.pax.web", "pax-web-extender-war").versionAsInProject(),
1:b4f040a: 
1:b4f040a: 				//mavenBundle("org.ops4j.pax.web", "pax-web-jsp").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.derby", "derby").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec").versionAsInProject(),
1:b4f040a: 
1:b4f040a: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.5_spec").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.geronimo.components", "geronimo-transaction").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.openjpa", "openjpa").versionAsInProject(),
1:b4f040a: 				mavenBundle("commons-lang", "commons-lang").versionAsInProject(),
1:b4f040a: 				mavenBundle("commons-collections", "commons-collections").versionAsInProject(),
1:b4f040a: 				mavenBundle("commons-pool", "commons-pool").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api").versionAsInProject(),
1:b4f040a: 	            mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.manager").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries", "org.apache.aries.util" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.felix", "org.apache.felix.fileinstall" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.install" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.api" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.management" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.aries" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.wrappers" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.ow2.asm", "asm-all" ).versionAsInProject(),
1:b4f040a: 				mavenBundle("org.apache.aries.samples.blog", "org.apache.aries.samples.blog.datasource" ).versionAsInProject()
1:b4f040a: 				///vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
1:b4f040a: 				);
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: 	protected void assertBlogServicesStarted() {
1:b4f040a: 		context().getService(BloggingService.class);
1:b4f040a: 		context().getService(BlogPersistenceService.class);
1:b4f040a: 		context().getService(XADataSource.class);
1:b4f040a: 		context().getService(TransactionManager.class);
1:b4f040a: 	}
1:b4f040a: 
1:b4f040a: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:b4f040a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blog.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.frameworkProperty;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: 
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.InputStreamReader;
1: import java.net.HttpURLConnection;
1: import java.net.URL;
1: 
1: import javax.inject.Inject;
1: import javax.sql.XADataSource;
1: import javax.transaction.TransactionManager;
1: 
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
1: import org.apache.aries.application.management.AriesApplicationManager;
1: import org.apache.aries.samples.blog.api.BloggingService;
1: import org.apache.aries.samples.blog.api.persistence.BlogPersistenceService;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.options.MavenArtifactUrlReference;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceReference;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public abstract class AbstractBlogIntegrationTest extends org.apache.aries.itest.AbstractIntegrationTest {
1: 
1: 	private static final int CONNECTION_TIMEOUT = 30000;
1: 	public static final long DEFAULT_TIMEOUT = 60000;
1: 
1: 	@Inject
1: 	AriesApplicationManager manager;
1: 
1: 	protected AriesApplicationContext installEba(MavenArtifactUrlReference eba) throws Exception {
1: 		AriesApplication app = manager.createApplication(new URL(eba.getURL()));
1: 		AriesApplicationContext ctx = manager.install(app);
1: 		ctx.start();
1: 		return ctx;
1: 	}
1: 
1: 	protected Bundle assertBundleStarted(String symName) {
1: 		Bundle bundle = context().getBundleByName(symName);
1: 		assertNotNull("Bundle " + symName + " not found", bundle);
1: 		assertEquals(Bundle.ACTIVE, bundle.getState());
1: 		return bundle;
1: 	}
1: 
1: 	protected void assertActive(Bundle bundle) {
1: 		assertTrue("Bundle " + bundle.getSymbolicName() + " should be ACTIVE but is in state " + bundle.getState(), bundle.getState() == Bundle.ACTIVE);
1: 	}
1: 
1: 	protected void assertResolved(Bundle bundle) {
1: 		assertTrue("Bundle " + bundle.getSymbolicName() + " should be ACTIVE but is in state " + bundle.getState(), bundle.getState() == Bundle.RESOLVED);
1: 	}
1: 
1: 	@SuppressWarnings("rawtypes")
1: 	protected void listBundleServices(Bundle b) {
1: 		ServiceReference []srb = b.getRegisteredServices();
1: 		for(ServiceReference sr:srb){
1: 			System.out.println(b.getSymbolicName() + " SERVICE: "+sr);
1: 		}	
1: 	}
1: 
1: 	@SuppressWarnings("rawtypes")
1: 	protected Boolean isServiceRegistered(Bundle b) {
1: 		ServiceReference []srb = b.getRegisteredServices();
1: 		if(srb == null) {
1: 			return false;
1: 		}
1: 		return true;
1: 	}
1: 
1: 	protected void checkBlogWebAccess() throws IOException, InterruptedException {
1: 		Thread.sleep(1000);
1: 		HttpURLConnection conn = makeConnection("http://localhost:8080/blog/ViewBlog");
1: 		String response = getHTTPResponse(conn);
1: 
1: 		/* Uncomment for additional debug */
1: 		/*
1: 		System.out.println("ZZZZZ " + response);
1: 		System.out.println("ZZZZZ " + conn.getResponseCode());
1: 		System.out.println("ZZZZZ " + HttpURLConnection.HTTP_OK);
1: 		 */
1: 
1: 		assertEquals(HttpURLConnection.HTTP_OK,
1: 				conn.getResponseCode());
1: 
1: 		assertTrue("The response did not contain the expected content", response.contains("Blog home"));
1: 	}
1: 
1: 	public static String getHTTPResponse(HttpURLConnection conn) throws IOException
1: 	{
1: 		StringBuilder response = new StringBuilder();
1: 		BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(),
1: 				"ISO-8859-1"));
1: 		try {
1: 			for (String s = reader.readLine(); s != null; s = reader.readLine()) {
1: 				response.append(s).append("\r\n");
1: 			}
1: 		} finally {
1: 			reader.close();
1: 		}
1: 
1: 		return response.toString();
1: 	}
1: 
1: 	public static HttpURLConnection makeConnection(String contextPath) throws IOException
1: 	{
1: 		URL url = new URL(contextPath);
1: 		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
1: 
1: 		conn.setConnectTimeout(CONNECTION_TIMEOUT);
1: 		conn.connect();
1: 
1: 		return conn;
1: 	}
1: 
1: 	protected Option baseOptions() {
1: 		String localRepo = System.getProperty("maven.repo.local");
1: 
1: 		if (localRepo == null) {
1: 			localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1: 		}
1: 		return composite(
1: 				junitBundles(),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api", "1.7.2"),
1: 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service", "1.7.2"),
1: 				mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1: 				// this is how you set the default log level when using pax
1: 				// logging (logProfile)
1: 				systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null).useOptions(vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo))
1: 				);
1: 	}
1: 
1: 	@Configuration
1: 	public Option[] configuration() {
1: 		return options(
1: 				baseOptions(),
1: 				frameworkProperty("org.osgi.framework.system.packages")
1: 				.value("javax.accessibility,javax.activation,javax.activity,javax.annotation,javax.annotation.processing,javax.crypto,javax.crypto.interfaces,javax.crypto.spec,javax.imageio,javax.imageio.event,javax.imageio.metadata,javax.imageio.plugins.bmp,javax.imageio.plugins.jpeg,javax.imageio.spi,javax.imageio.stream,javax.jws,javax.jws.soap,javax.lang.model,javax.lang.model.element,javax.lang.model.type,javax.lang.model.util,javax.management,javax.management.loading,javax.management.modelmbean,javax.management.monitor,javax.management.openmbean,javax.management.relation,javax.management.remote,javax.management.remote.rmi,javax.management.timer,javax.naming,javax.naming.directory,javax.naming.event,javax.naming.ldap,javax.naming.spi,javax.net,javax.net.ssl,javax.print,javax.print.attribute,javax.print.attribute.standard,javax.print.event,javax.rmi,javax.rmi.CORBA,javax.rmi.ssl,javax.script,javax.security.auth,javax.security.auth.callback,javax.security.auth.kerberos,javax.security.auth.login,javax.security.auth.spi,javax.security.auth.x500,javax.security.cert,javax.security.sasl,javax.sound.midi,javax.sound.midi.spi,javax.sound.sampled,javax.sound.sampled.spi,javax.sql,javax.sql.rowset,javax.sql.rowset.serial,javax.sql.rowset.spi,javax.swing,javax.swing.border,javax.swing.colorchooser,javax.swing.event,javax.swing.filechooser,javax.swing.plaf,javax.swing.plaf.basic,javax.swing.plaf.metal,javax.swing.plaf.multi,javax.swing.plaf.synth,javax.swing.table,javax.swing.text,javax.swing.text.html,javax.swing.text.html.parser,javax.swing.text.rtf,javax.swing.tree,javax.swing.undo,javax.tools,javax.xml,javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.bind.attachment,javax.xml.bind.helpers,javax.xml.bind.util,javax.xml.crypto,javax.xml.crypto.dom,javax.xml.crypto.dsig,javax.xml.crypto.dsig.dom,javax.xml.crypto.dsig.keyinfo,javax.xml.crypto.dsig.spec,javax.xml.datatype,javax.xml.namespace,javax.xml.parsers,javax.xml.soap,javax.xml.stream,javax.xml.stream.events,javax.xml.stream.util,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform.sax,javax.xml.transform.stax,javax.xml.transform.stream,javax.xml.validation,javax.xml.ws,javax.xml.ws.handler,javax.xml.ws.handler.soap,javax.xml.ws.http,javax.xml.ws.soap,javax.xml.ws.spi,javax.xml.xpath,org.ietf.jgss,org.omg.CORBA,org.omg.CORBA.DynAnyPackage,org.omg.CORBA.ORBPackage,org.omg.CORBA.TypeCodePackage,org.omg.CORBA.portable,org.omg.CORBA_2_3,org.omg.CORBA_2_3.portable,org.omg.CosNaming,org.omg.CosNaming.NamingContextExtPackage,org.omg.CosNaming.NamingContextPackage,org.omg.Dynamic,org.omg.DynamicAny,org.omg.DynamicAny.DynAnyFactoryPackage,org.omg.DynamicAny.DynAnyPackage,org.omg.IOP,org.omg.IOP.CodecFactoryPackage,org.omg.IOP.CodecPackage,org.omg.Messaging,org.omg.PortableInterceptor,org.omg.PortableInterceptor.ORBInitInfoPackage,org.omg.PortableServer,org.omg.PortableServer.CurrentPackage,org.omg.PortableServer.POAManagerPackage,org.omg.PortableServer.POAPackage,org.omg.PortableServer.ServantLocatorPackage,org.omg.PortableServer.portable,org.omg.SendingContext,org.omg.stub.java.rmi,org.w3c.dom,org.w3c.dom.bootstrap,org.w3c.dom.css,org.w3c.dom.events,org.w3c.dom.html,org.w3c.dom.ls,org.w3c.dom.ranges,org.w3c.dom.stylesheets,org.w3c.dom.traversal,org.w3c.dom.views,org.xml.sax,org.xml.sax.ext,org.xml.sax.helpers"),
1: 				// Log
1: 				//mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1: 				//mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1: 				// Felix mvn url handler - do we need this?
1: 				//mavenBundle("org.ops4j.pax.url", "pax-url-aether").versionAsInProject(),
1: 
1: 				mavenBundle("org.eclipse.equinox", "cm").versionAsInProject(),
1: 				mavenBundle("org.eclipse.osgi", "services").versionAsInProject(),
1: 
1: 				mavenBundle("org.apache.xbean", "xbean-asm4-shaded").versionAsInProject(),
1: 				mavenBundle("org.apache.xbean", "xbean-finder-shaded").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.web", "pax-web-jetty-bundle").versionAsInProject(),
1: 				mavenBundle("org.ops4j.pax.web", "pax-web-extender-war").versionAsInProject(),
1: 
1: 				//mavenBundle("org.ops4j.pax.web", "pax-web-jsp").versionAsInProject(),
1: 				mavenBundle("org.apache.derby", "derby").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec").versionAsInProject(),
1: 
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.5_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_2.5_spec").versionAsInProject(),
1: 				mavenBundle("org.apache.geronimo.components", "geronimo-transaction").versionAsInProject(),
1: 				mavenBundle("org.apache.openjpa", "openjpa").versionAsInProject(),
1: 				mavenBundle("commons-lang", "commons-lang").versionAsInProject(),
1: 				mavenBundle("commons-collections", "commons-collections").versionAsInProject(),
1: 				mavenBundle("commons-pool", "commons-pool").versionAsInProject(),
1: 				mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api").versionAsInProject(),
1: 	            mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.manager").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject(),
1: 				mavenBundle("org.apache.aries", "org.apache.aries.util" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.jndi", "org.apache.aries.jndi" ).versionAsInProject(),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.fileinstall" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.install" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.api" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.management" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.api" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.aries" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.context" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.blueprint" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.wrappers" ).versionAsInProject(),
1: 				mavenBundle("org.ow2.asm", "asm-all" ).versionAsInProject(),
1: 				mavenBundle("org.apache.aries.samples.blog", "org.apache.aries.samples.blog.datasource" ).versionAsInProject()
1: 				///vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
1: 				);
1: 	}
1: 
1: 	protected void assertBlogServicesStarted() {
1: 		context().getService(BloggingService.class);
1: 		context().getService(BlogPersistenceService.class);
1: 		context().getService(XADataSource.class);
1: 		context().getService(TransactionManager.class);
1: 	}
1: 
1: }
============================================================================