2:e8a0b01: /*
1:e8a0b01:  * Licensed to the Apache Software Foundation (ASF) under one
1:e8a0b01:  * or more contributor license agreements.  See the NOTICE file
1:e8a0b01:  * distributed with this work for additional information
1:e8a0b01:  * regarding copyright ownership.  The ASF licenses this file
1:e8a0b01:  * to you under the Apache License, Version 2.0 (the
1:e8a0b01:  * "License"); you may not use this file except in compliance
1:e8a0b01:  * with the License.  You may obtain a copy of the License at
1:e8a0b01:  *
1:e8a0b01:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e8a0b01:  *
1:e8a0b01:  * Unless required by applicable law or agreed to in writing,
1:e8a0b01:  * software distributed under the License is distributed on an
1:e8a0b01:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e8a0b01:  * KIND, either express or implied.  See the License for the
1:e8a0b01:  * specific language governing permissions and limitations
1:e8a0b01:  * under the License.
2:e8a0b01:  */
1:e8a0b01: package org.apache.aries.subsystem.itests;
1:f1ff8f8: 
1:e8a0b01: import org.junit.Test;
1:f1ff8f8: import org.osgi.framework.Version;
1:e8a0b01: import org.osgi.service.subsystem.Subsystem;
1:f1ff8f8: import org.osgi.service.subsystem.SubsystemConstants;
1:f1ff8f8: 
1:e8a0b01: public class BasicTest extends SubsystemTest {
1:f1ff8f8: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:f1ff8f8: 		createApplication("emptyFeature", new String[]{});
1:f1ff8f8: 		createApplication("emptySubsystem", new String[]{});
6:f1ff8f8: 	}
1:f1ff8f8: 	
1:f1ff8f8:     @Test
1:f1ff8f8:     public void testEmptyFeature() throws Exception {
1:0d95583:     	Subsystem emptyFeature = installSubsystemFromFile("emptyFeature.esa");
1:f1ff8f8: 		AssertionError error = null;
1:f1ff8f8: 		try {
1:f1ff8f8: 			assertSymbolicName("org.apache.aries.subsystem.itests.feature.empty", emptyFeature);
1:f1ff8f8: 			assertVersion("1.1.2", emptyFeature);
1:f1ff8f8: 			assertType(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE, emptyFeature);
1:f1ff8f8: 			assertConstituents(0, emptyFeature);
1:f1ff8f8: 			assertChildren(0, emptyFeature);
1:f1ff8f8: 			startSubsystem(emptyFeature);
1:f1ff8f8: 			stopSubsystem(emptyFeature);
1:f1ff8f8: 		}
1:f1ff8f8: 		catch (AssertionError e) {
1:f1ff8f8: 			error = e;
1:f1ff8f8: 			throw e;
1:f1ff8f8: 		}
1:f1ff8f8: 		finally {
1:f1ff8f8: 			try {
1:574fba9: 				uninstallSubsystemSilently(emptyFeature);
1:f1ff8f8: 			}
1:f1ff8f8: 			catch (AssertionError e) {
1:f1ff8f8: 				if (error == null)
1:f1ff8f8: 					throw e;
1:f1ff8f8: 				e.printStackTrace();
1:f1ff8f8: 			}
1:f1ff8f8: 		}
1:f1ff8f8:     }
1:f1ff8f8:     
1:f1ff8f8:     /*
1:f1ff8f8:      * This tests a subsystem containing only a subsystem manifest which, in
1:f1ff8f8:      * turn, contains only a Subsystem-SymbolicName header.
1:f1ff8f8:      */
1:f1ff8f8:     @Test
1:f1ff8f8:     public void testEmptySubsystem() throws Exception {
1:0d95583:     	Subsystem emptySubsystem = installSubsystemFromFile("emptySubsystem.esa");
1:f1ff8f8: 		AssertionError error = null;
3:f1ff8f8: 		try {
1:f1ff8f8: 			assertSymbolicName("org.apache.aries.subsystem.itests.subsystem.empty", emptySubsystem);
1:f1ff8f8: 			// The version should be the default version.
1:f1ff8f8: 			assertVersion(Version.emptyVersion, emptySubsystem);
1:f1ff8f8: 			// The type should be the default type.
1:f1ff8f8: 			assertType(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION, emptySubsystem);
1:f1ff8f8: 			// Since the default type is application, which is a scoped subsystem, there will
1:f1ff8f8: 			// be one constituent representing the region context bundle.
1:f1ff8f8: 			assertConstituents(1, emptySubsystem);
1:f1ff8f8: 			assertChildren(0, emptySubsystem);
1:f1ff8f8: 			startSubsystem(emptySubsystem);
1:f1ff8f8: 			stopSubsystem(emptySubsystem);
1:f1ff8f8: 		}
1:f1ff8f8: 		catch (AssertionError e) {
1:f1ff8f8: 			error = e;
1:f1ff8f8: 			throw e;
1:f1ff8f8: 		}
1:f1ff8f8: 		finally {
1:f1ff8f8: 			try {
1:574fba9: 				uninstallSubsystemSilently(emptySubsystem);
1:f1ff8f8: 			}
1:f1ff8f8: 			catch (AssertionError e) {
1:f1ff8f8: 				if (error == null)
1:f1ff8f8: 					throw e;
1:f1ff8f8: 				e.printStackTrace();
1:f1ff8f8: 			}
1:f1ff8f8: 		}
1:f1ff8f8:     }
1:f1ff8f8: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:7c69962
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:11d09f4
/////////////////////////////////////////////////////////////////////////
0:     	ServiceReference serviceReference = bundleContext.getServiceReference(Subsystem.class);
0:     	Subsystem subsystem = (Subsystem) bundleContext.getService(serviceReference);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:John Ross
-------------------------------------------------------------------------------
commit:574fba9
/////////////////////////////////////////////////////////////////////////
1: 				uninstallSubsystemSilently(emptyFeature);
/////////////////////////////////////////////////////////////////////////
1: 				uninstallSubsystemSilently(emptySubsystem);
commit:0d95583
/////////////////////////////////////////////////////////////////////////
0: 		FileOutputStream fos = new FileOutputStream(name + ".esa");
/////////////////////////////////////////////////////////////////////////
1:     	Subsystem emptyFeature = installSubsystemFromFile("emptyFeature.esa");
/////////////////////////////////////////////////////////////////////////
1:     	Subsystem emptySubsystem = installSubsystemFromFile("emptySubsystem.esa");
commit:a677a53
/////////////////////////////////////////////////////////////////////////
0: 				uninstallUnscopedSubsystem(emptyFeature);
/////////////////////////////////////////////////////////////////////////
0: 				uninstallScopedSubsystem(emptySubsystem);
commit:f1ff8f8
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
1: 
0: import org.apache.aries.subsystem.itests.util.Utils;
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
0: import org.junit.Before;
1: import org.osgi.framework.Version;
1: import org.osgi.service.subsystem.SubsystemConstants;
0: 	private static void createApplication(String name, String[] content) throws Exception {
0: 		ZipFixture feature = ArchiveFixture
0: 				.newZip()
0: 				.binary("OSGI-INF/SUBSYSTEM.MF",
0: 						FeatureTest.class.getClassLoader().getResourceAsStream(
0: 								name + "/OSGI-INF/SUBSYSTEM.MF"));
0: 		for (String s : content) {
1: 			try {
0: 				feature.binary(s,
0: 						FeatureTest.class.getClassLoader().getResourceAsStream(
0: 								name + '/' + s));
1: 			}
0: 			catch (Exception e) {
0: 				feature.binary(s, new FileInputStream(new File(s)));
1: 			}
1: 		}
0: 		feature.end();
0: 		FileOutputStream fos = new FileOutputStream(name + ".ssa");
1: 		try {
0: 			feature.writeOut(fos);
0: 		} finally {
0: 			Utils.closeQuietly(fos);
1: 		}
1: 	}
1: 	
0: 	@Before
0: 	public static void createApplications() throws Exception {
0: 		if (createdApplications) {
0: 			return;
1: 		}
1: 		createApplication("emptyFeature", new String[]{});
1: 		createApplication("emptySubsystem", new String[]{});
0: 		createdApplications = true;
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testEmptyFeature() throws Exception {
0:     	Subsystem emptyFeature = installSubsystemFromFile("emptyFeature.ssa");
1: 		AssertionError error = null;
1: 		try {
1: 			assertSymbolicName("org.apache.aries.subsystem.itests.feature.empty", emptyFeature);
1: 			assertVersion("1.1.2", emptyFeature);
1: 			assertType(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE, emptyFeature);
1: 			assertConstituents(0, emptyFeature);
1: 			assertChildren(0, emptyFeature);
1: 			startSubsystem(emptyFeature);
1: 			stopSubsystem(emptyFeature);
1: 		}
1: 		catch (AssertionError e) {
1: 			error = e;
1: 			throw e;
1: 		}
1: 		finally {
1: 			try {
0: 				uninstallSubsystem(emptyFeature);
1: 			}
1: 			catch (AssertionError e) {
1: 				if (error == null)
1: 					throw e;
1: 				e.printStackTrace();
1: 			}
1: 		}
1:     }
1:     
1:     /*
1:      * This tests a subsystem containing only a subsystem manifest which, in
1:      * turn, contains only a Subsystem-SymbolicName header.
1:      */
1:     @Test
1:     public void testEmptySubsystem() throws Exception {
0:     	Subsystem emptySubsystem = installSubsystemFromFile("emptySubsystem.ssa");
1: 		AssertionError error = null;
1: 		try {
1: 			assertSymbolicName("org.apache.aries.subsystem.itests.subsystem.empty", emptySubsystem);
1: 			// The version should be the default version.
1: 			assertVersion(Version.emptyVersion, emptySubsystem);
1: 			// The type should be the default type.
1: 			assertType(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION, emptySubsystem);
1: 			// Since the default type is application, which is a scoped subsystem, there will
1: 			// be one constituent representing the region context bundle.
1: 			assertConstituents(1, emptySubsystem);
1: 			assertChildren(0, emptySubsystem);
1: 			startSubsystem(emptySubsystem);
1: 			stopSubsystem(emptySubsystem);
1: 		}
1: 		catch (AssertionError e) {
1: 			error = e;
1: 			throw e;
1: 		}
1: 		finally {
1: 			try {
0: 				uninstallSubsystem(emptySubsystem);
1: 			}
1: 			catch (AssertionError e) {
1: 				if (error == null)
1: 					throw e;
1: 				e.printStackTrace();
1: 			}
1: 		}
1:     }
commit:e8a0b01
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
0: 
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertTrue;
0: 
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.subsystem.Subsystem;
0: 
0: @RunWith(JUnit4TestRunner.class)
1: public class BasicTest extends SubsystemTest {
1: 	/*
0: 	 * When the subsystems implementation bundle is installed, there should be
0: 	 * a Subsystem service available.
1: 	 */
0:     @Test
0:     public void test1() throws Exception {
0:     	Bundle[] bundles = bundleContext.getBundles();
0:     	boolean found = false;
0:     	for (Bundle bundle : bundles) {
0:     		if ("org.apache.aries.subsystem.core".equals(bundle.getSymbolicName())) {
0:     			found = true;
0:     			break;
0:     		}
0:     	}
0:     	assertTrue("Subsystems implementation bundle not found", found);
0:     	ServiceReference<Subsystem> serviceReference = bundleContext.getServiceReference(Subsystem.class);
0:     	assertNotNull("Reference to subsystem service not found", serviceReference);
0:     	Subsystem subsystem = bundleContext.getService(serviceReference);
0:     	assertNotNull("Subsystem service not found", subsystem);
0:     }
0: }
============================================================================