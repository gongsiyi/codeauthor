1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.impl;
1:bbcf8d2: import static org.apache.aries.application.modelling.ResourceType.PACKAGE;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:4fec049: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
4:4fec049: 
1:4fec049: import java.util.Collections;
1:4fec049: import java.util.HashMap;
1:4fec049: import java.util.Map;
1:bbcf8d2: import java.util.Map.Entry;
1:4fec049: 
1:4fec049: import org.apache.aries.application.modelling.ExportedPackage;
1:4fec049: import org.apache.aries.application.modelling.ModelledResource;
1:4fec049: import org.apache.aries.application.modelling.ResourceType;
1:4fec049: import org.osgi.framework.Constants;
1:4fec049: import org.osgi.framework.Version;
1:4fec049: import org.slf4j.Logger;
1:4fec049: import org.slf4j.LoggerFactory;
1:4fec049: 
1:4fec049: public class ExportedPackageImpl implements ExportedPackage
1:4fec049: {
1:4fec049:   
1:4fec049:   @SuppressWarnings("deprecation")
1:4fec049:   private static final String PACKAGE_SPECIFICATION_VERSION = Constants.PACKAGE_SPECIFICATION_VERSION;
1:4fec049:   private final Map<String, Object> _attributes;
1:4fec049:   private final String _packageName;
1:4fec049:   private final String _version;
1:4fec049:   private final ModelledResource _bundle;
1:4fec049:   private final Logger logger = LoggerFactory.getLogger(ExportedPackageImpl.class);
1:4fec049:   /**
1:4fec049:    * 
1:4fec049:    * @param mr                 The {@link ModelledResource} exporting this package. Never null.  
1:4fec049:    * @param pkg                The fully qualified name of the package being exported
1:4fec049:    * @param attributes         The package attributes. If no version is present, will be defaulted to 0.0.0. 
1:4fec049:    *                           
1:4fec049:    */
1:4fec049:   public ExportedPackageImpl (ModelledResource mr, String pkg, Map<String, Object> attributes) {
1:4fec049:     logger.debug(LOG_ENTRY, "ExportedPackageImpl", new Object[]{mr, pkg, attributes});
1:4fec049:     _attributes = new HashMap<String, Object> (attributes);
1:4fec049:     _packageName = pkg;
1:4fec049:     _attributes.put (PACKAGE.toString(), _packageName);
1:4fec049:     String version = (String) attributes.get(Constants.VERSION_ATTRIBUTE);
1:4fec049:     if (version == null || "".equals(version)) { 
1:4fec049:       _version = Version.emptyVersion.toString();
1:4fec049:     } else { 
1:4fec049:       _version = version;
1:4fec049:     }
1:4fec049:     _attributes.put(Constants.VERSION_ATTRIBUTE, _version); 
1:4fec049:     _attributes.put (Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE, mr.getSymbolicName());
1:4fec049:     _attributes.put (Constants.BUNDLE_VERSION_ATTRIBUTE, mr.getVersion());
1:4fec049:     _bundle = mr;
1:4fec049:     logger.debug(LOG_EXIT, "ExportedPackageImpl");
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public Map<String, Object> getAttributes() {
1:4fec049:     logger.debug(LOG_ENTRY, "getAttributes");
1:4fec049:     logger.debug(LOG_EXIT, "getAttributes", _attributes);
1:4fec049:     return Collections.unmodifiableMap(_attributes);
1:4fec049:   }
1:4fec049: 
1:4fec049: 
1:4fec049:   public ResourceType getType() {
1:4fec049:     logger.debug(LOG_ENTRY, "getType");
1:4fec049:     logger.debug(LOG_EXIT, "getType", PACKAGE);
1:4fec049:     return PACKAGE;
1:4fec049:   }
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * Get the name of the exported package
1:4fec049:    * @return package name
1:4fec049:    */
1:4fec049:   public String getPackageName() { 
1:4fec049:     logger.debug(LOG_ENTRY, "getPackageName");
1:4fec049:     logger.debug(LOG_EXIT, "getPackageName", _packageName);
1:4fec049:     return _packageName;
1:4fec049:   }
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * This will never be null. 
1:4fec049:    * @return Version as String, or 0.0.0
1:4fec049:    */
1:4fec049:   public String getVersion() {
1:4fec049:     logger.debug(LOG_ENTRY, "getVersion");
1:4fec049:     logger.debug(LOG_EXIT, "getVersion", _version);
1:4fec049:     return _version;
1:4fec049:   }
1:4fec049:   
1:4fec049:   /**
1:4fec049:    * This method turns an {@link ExportedPackageImpl} into a string suitable for a 
1:4fec049:    * Use-Bundle style package import. We do NOT lock down package versions, only bundle versions. 
1:4fec049:    */
1:4fec049:   public String toDeploymentString() {
1:4fec049:     logger.debug(LOG_ENTRY, "toDeploymentString");
1:4fec049:     StringBuilder sb = new StringBuilder(_packageName);
1:4fec049:     for (Map.Entry<String, Object> entry : _attributes.entrySet()) {
1:4fec049:       String key = entry.getKey();
1:4fec049:       Object objectValue = entry.getValue(); 
1:4fec049:       // While attributes can be arrays, especially for services, they should never be arrays for packages
1:4fec049:       // If the values are not arrays, they are Strings
1:4fec049:       if (!objectValue.getClass().isArray()) {  
1:4fec049:         String value = String.valueOf(objectValue);
1:4fec049:         if (key != null && !key.equals(PACKAGE.toString()) 
1:4fec049:             && !key.equals(PACKAGE_SPECIFICATION_VERSION))
1:4fec049:         {
1:4fec049:           if (key.equals(Constants.BUNDLE_VERSION_ATTRIBUTE)) { 
1:4fec049:             value = "[" + value + "," + value + "]";
1:4fec049:           }
1:4fec049:           // No Export-Package directives are valid on Import-Package, so strip out all 
1:4fec049:           // directives. Never print out a null or empty key or value. 
1:4fec049:           if (key.equals("") || key.endsWith(":") || value==null || value.equals("")) {
1:4fec049:             
1:4fec049:             logger.debug("ExportedPackageImpl.toDeploymentString ignored " + key + "=" + value);
1:4fec049:           } else { 
1:4fec049:             sb.append (";").append (key).append("=\"").append(value).append('"');
1:4fec049:           }
1:4fec049:         } else { 
1:4fec049:           logger.debug("ExportedPackageImpl.toDeploymentString() ignoring attribute " + key + "->" + value);
1:4fec049:         }
1:4fec049:       }
1:4fec049:     }
1:4fec049:     String result = sb.toString();
1:4fec049:     logger.debug(LOG_EXIT, "toDeploymentString", result);
1:4fec049:     return result;
1:4fec049:   }
1:4fec049: 
1:4fec049:   public ModelledResource getBundle() {
1:4fec049:     logger.debug(LOG_ENTRY, "getBundle");
1:4fec049:     logger.debug(LOG_EXIT, "getBundle", _bundle);
1:4fec049:     return _bundle;
1:4fec049:   }
1:4fec049:   
1:4fec049:   @Override
1:4fec049:   public String toString() {
1:4fec049:     return toDeploymentString();
1:4fec049:   }
1:bbcf8d2:   
1:bbcf8d2: 	@Override
1:bbcf8d2: 	public boolean equals(Object thing) {
1:bbcf8d2: 		if (thing == this) {
1:bbcf8d2: 			return true;
1:bbcf8d2: 		} else {
1:bbcf8d2: 			if (thing instanceof ExportedPackage) {
1:bbcf8d2: 				ExportedPackage otherPackage = (ExportedPackage) thing;
1:bbcf8d2: 				if (!this.getPackageName()
1:bbcf8d2: 						.equals(otherPackage.getPackageName())) {
1:bbcf8d2: 					return false;
1:bbcf8d2: 				}
1:bbcf8d2: 				if (!this.getVersion().equals(otherPackage.getVersion())) {
1:bbcf8d2: 					return false;
1:bbcf8d2: 				}
1:bbcf8d2: 				if (!this.getPackageName()
1:bbcf8d2: 						.equals(otherPackage.getPackageName())) {
1:bbcf8d2: 					return false;
1:bbcf8d2: 				}
1:bbcf8d2: 				
1:bbcf8d2: 				// We'll pick up the bundle comparisons in the attributes
1:bbcf8d2: 				Map<String, Object> otherAttributes = otherPackage
1:bbcf8d2: 						.getAttributes();
1:bbcf8d2: 
1:bbcf8d2: 				if (!attributesAreEqual(otherAttributes)) {
1:bbcf8d2: 					return false;
1:bbcf8d2: 				}
1:bbcf8d2: 			}
1:bbcf8d2: 			return true;
1:bbcf8d2: 
1:bbcf8d2: 		}
1:bbcf8d2: 	}
1:bbcf8d2: 
1:bbcf8d2: 	private boolean attributesAreEqual(Map<String, Object> otherAttributes) {
1:bbcf8d2: 		// We better have the same number of attributes
1:bbcf8d2: 		if (this.getAttributes().size() != otherAttributes.size()) {
1:bbcf8d2: 			return false;
1:bbcf8d2: 		}
1:bbcf8d2: 
1:bbcf8d2: 		for (Entry<String, Object> entry : getAttributes().entrySet()) {
1:bbcf8d2: 			String key = entry.getKey();
1:bbcf8d2: 			if (otherAttributes != null && otherAttributes.containsKey(key)) {
1:bbcf8d2: 				Object otherValue = otherAttributes.get(key);
1:bbcf8d2: 				Object value = entry.getValue();
1:bbcf8d2: 				if (value == null) {
1:bbcf8d2: 					if (otherValue != null) {
1:bbcf8d2: 						return false;
1:bbcf8d2: 					}
1:bbcf8d2: 				} else {
1:bbcf8d2: 					if (!value.equals(otherValue)) {
1:bbcf8d2: 						return false;
1:bbcf8d2: 					}
1:bbcf8d2: 				}
1:bbcf8d2: 			} else {
1:bbcf8d2: 				// We insist every value be present on both sides
1:bbcf8d2: 				return false;
1:bbcf8d2: 			}
1:bbcf8d2: 		}
1:bbcf8d2: 
1:bbcf8d2: 		return true;
1:bbcf8d2: 	}
1:bbcf8d2:   
1:bbcf8d2:   @Override
1:bbcf8d2:   public int hashCode()
1:bbcf8d2:   {
1:bbcf8d2: 	  return getPackageName().hashCode();
1:bbcf8d2:   }
1:4fec049: 
1:4fec049: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:bbcf8d2
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.aries.application.modelling.ResourceType.PACKAGE;
1: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   
1: 	@Override
1: 	public boolean equals(Object thing) {
1: 		if (thing == this) {
1: 			return true;
1: 		} else {
1: 			if (thing instanceof ExportedPackage) {
1: 				ExportedPackage otherPackage = (ExportedPackage) thing;
1: 				if (!this.getPackageName()
1: 						.equals(otherPackage.getPackageName())) {
1: 					return false;
1: 				}
1: 				if (!this.getVersion().equals(otherPackage.getVersion())) {
1: 					return false;
1: 				}
1: 				if (!this.getPackageName()
1: 						.equals(otherPackage.getPackageName())) {
1: 					return false;
1: 				}
1: 				
1: 				// We'll pick up the bundle comparisons in the attributes
1: 				Map<String, Object> otherAttributes = otherPackage
1: 						.getAttributes();
1: 
1: 				if (!attributesAreEqual(otherAttributes)) {
1: 					return false;
1: 				}
1: 			}
1: 			return true;
1: 
1: 		}
1: 	}
1: 
1: 	private boolean attributesAreEqual(Map<String, Object> otherAttributes) {
1: 		// We better have the same number of attributes
1: 		if (this.getAttributes().size() != otherAttributes.size()) {
1: 			return false;
1: 		}
1: 
1: 		for (Entry<String, Object> entry : getAttributes().entrySet()) {
1: 			String key = entry.getKey();
1: 			if (otherAttributes != null && otherAttributes.containsKey(key)) {
1: 				Object otherValue = otherAttributes.get(key);
1: 				Object value = entry.getValue();
1: 				if (value == null) {
1: 					if (otherValue != null) {
1: 						return false;
1: 					}
1: 				} else {
1: 					if (!value.equals(otherValue)) {
1: 						return false;
1: 					}
1: 				}
1: 			} else {
1: 				// We insist every value be present on both sides
1: 				return false;
1: 			}
1: 		}
1: 
1: 		return true;
1: 	}
1:   
1:   @Override
1:   public int hashCode()
1:   {
1: 	  return getPackageName().hashCode();
1:   }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.impl;
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
0: import static org.apache.aries.application.modelling.ResourceType.PACKAGE;
1: 
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.modelling.ExportedPackage;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.modelling.ResourceType;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Version;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: 
1: 
1: public class ExportedPackageImpl implements ExportedPackage
1: {
1:   
1:   @SuppressWarnings("deprecation")
1:   private static final String PACKAGE_SPECIFICATION_VERSION = Constants.PACKAGE_SPECIFICATION_VERSION;
1:   private final Map<String, Object> _attributes;
1:   private final String _packageName;
1:   private final String _version;
1:   private final ModelledResource _bundle;
1:   private final Logger logger = LoggerFactory.getLogger(ExportedPackageImpl.class);
1:   /**
1:    * 
1:    * @param mr                 The {@link ModelledResource} exporting this package. Never null.  
1:    * @param pkg                The fully qualified name of the package being exported
1:    * @param attributes         The package attributes. If no version is present, will be defaulted to 0.0.0. 
1:    *                           
1:    */
1:   public ExportedPackageImpl (ModelledResource mr, String pkg, Map<String, Object> attributes) {
1:     logger.debug(LOG_ENTRY, "ExportedPackageImpl", new Object[]{mr, pkg, attributes});
1:     _attributes = new HashMap<String, Object> (attributes);
1:     _packageName = pkg;
1:     _attributes.put (PACKAGE.toString(), _packageName);
1:     String version = (String) attributes.get(Constants.VERSION_ATTRIBUTE);
1:     if (version == null || "".equals(version)) { 
1:       _version = Version.emptyVersion.toString();
1:     } else { 
1:       _version = version;
1:     }
1:     _attributes.put(Constants.VERSION_ATTRIBUTE, _version); 
1:     _attributes.put (Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE, mr.getSymbolicName());
1:     _attributes.put (Constants.BUNDLE_VERSION_ATTRIBUTE, mr.getVersion());
1:     _bundle = mr;
1:     logger.debug(LOG_EXIT, "ExportedPackageImpl");
1:   }
1: 
1: 
1:   public Map<String, Object> getAttributes() {
1:     logger.debug(LOG_ENTRY, "getAttributes");
1:     logger.debug(LOG_EXIT, "getAttributes", _attributes);
1:     return Collections.unmodifiableMap(_attributes);
1:   }
1: 
1: 
1:   public ResourceType getType() {
1:     logger.debug(LOG_ENTRY, "getType");
1:     logger.debug(LOG_EXIT, "getType", PACKAGE);
1:     return PACKAGE;
1:   }
1: 
1:   /**
1:    * Get the name of the exported package
1:    * @return package name
1:    */
1:   public String getPackageName() { 
1:     logger.debug(LOG_ENTRY, "getPackageName");
1:     logger.debug(LOG_EXIT, "getPackageName", _packageName);
1:     return _packageName;
1:   }
1: 
1:   /**
1:    * This will never be null. 
1:    * @return Version as String, or 0.0.0
1:    */
1:   public String getVersion() {
1:     logger.debug(LOG_ENTRY, "getVersion");
1:     logger.debug(LOG_EXIT, "getVersion", _version);
1:     return _version;
1:   }
1:   
1:   /**
1:    * This method turns an {@link ExportedPackageImpl} into a string suitable for a 
1:    * Use-Bundle style package import. We do NOT lock down package versions, only bundle versions. 
1:    */
1:   public String toDeploymentString() {
1:     logger.debug(LOG_ENTRY, "toDeploymentString");
1:     StringBuilder sb = new StringBuilder(_packageName);
1:     for (Map.Entry<String, Object> entry : _attributes.entrySet()) {
1:       String key = entry.getKey();
1:       Object objectValue = entry.getValue(); 
1:       // While attributes can be arrays, especially for services, they should never be arrays for packages
1:       // If the values are not arrays, they are Strings
1:       if (!objectValue.getClass().isArray()) {  
1:         String value = String.valueOf(objectValue);
1:         if (key != null && !key.equals(PACKAGE.toString()) 
1:             && !key.equals(PACKAGE_SPECIFICATION_VERSION))
1:         {
1:           if (key.equals(Constants.BUNDLE_VERSION_ATTRIBUTE)) { 
1:             value = "[" + value + "," + value + "]";
1:           }
1:           // No Export-Package directives are valid on Import-Package, so strip out all 
1:           // directives. Never print out a null or empty key or value. 
1:           if (key.equals("") || key.endsWith(":") || value==null || value.equals("")) {
1:             
1:             logger.debug("ExportedPackageImpl.toDeploymentString ignored " + key + "=" + value);
1:           } else { 
1:             sb.append (";").append (key).append("=\"").append(value).append('"');
1:           }
1:         } else { 
1:           logger.debug("ExportedPackageImpl.toDeploymentString() ignoring attribute " + key + "->" + value);
1:         }
1:       }
1:     }
1:     String result = sb.toString();
1:     logger.debug(LOG_EXIT, "toDeploymentString", result);
1:     return result;
1:   }
1: 
1:   public ModelledResource getBundle() {
1:     logger.debug(LOG_ENTRY, "getBundle");
1:     logger.debug(LOG_EXIT, "getBundle", _bundle);
1:     return _bundle;
1:   }
1:   
1:   @Override
1:   public String toString() {
1:     return toDeploymentString();
1:   }
1: 
1: }
============================================================================