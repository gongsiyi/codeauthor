1:955bf91: /**
1:955bf91:  * Licensed to the Apache Software Foundation (ASF) under one
1:955bf91:  * or more contributor license agreements.  See the NOTICE file
1:955bf91:  * distributed with this work for additional information
1:955bf91:  * regarding copyright ownership.  The ASF licenses this file
1:955bf91:  * to you under the Apache License, Version 2.0 (the
1:955bf91:  * "License"); you may not use this file except in compliance
1:955bf91:  * with the License.  You may obtain a copy of the License at
1:955bf91:  *
1:955bf91:  *   http://www.apache.org/licenses/LICENSE-2.0
1:955bf91:  *
1:955bf91:  * Unless required by applicable law or agreed to in writing,
1:955bf91:  * software distributed under the License is distributed on an
1:955bf91:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:955bf91:  * KIND, either express or implied.  See the License for the
1:955bf91:  * specific language governing permissions and limitations
1:955bf91:  * under the License.
1:955bf91:  */
1:4b48331: package org.apache.aries.jndi.tracker;
11:31b19f1: 
1:4b48331: import java.util.ArrayList;
1:4b48331: import java.util.Arrays;
1:4b48331: import java.util.Collections;
1:4b48331: import java.util.List;
1:4b48331: import java.util.concurrent.ConcurrentHashMap;
1:4b48331: import java.util.concurrent.ConcurrentMap;
1:31b19f1: 
1:4b48331: import javax.naming.spi.InitialContextFactory;
1:31b19f1: 
1:4b48331: import org.osgi.framework.Constants;
1:4b48331: import org.osgi.framework.ServiceReference;
1:4b48331: import org.osgi.service.jndi.JNDIConstants;
1:4b48331: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:31b19f1: 
1:31b19f1: 
1:4b48331: public class ServiceTrackerCustomizers 
1:4b48331: {
1:4b48331:   public static interface CachingServiceTracker extends ServiceTrackerCustomizer {
1:4b48331:     public ServiceReference find(String identifier);
1:31b19f1:   }
1:31b19f1:   
1:4b48331:   private static abstract class BaseCachingServiceTracker implements CachingServiceTracker {
1:4b48331:     /** The cached references */
1:4b48331:     protected ConcurrentMap<String, ServiceReference> cache = new ConcurrentHashMap<String, ServiceReference>();
1:4b48331:     /** A list of service references that are being tracked */
1:4b48331:     protected List<ServiceReference> trackedReferences = new ArrayList<ServiceReference>();
1:31b19f1: 
1:4b48331:     public ServiceReference find(String identifier) 
1:4b48331:     {
1:4b48331:       return cache.get(identifier);
1:31b19f1:     }
1:31b19f1: 
1:4b48331:     public synchronized Object addingService(ServiceReference reference) 
1:4b48331:     {
1:4b48331:       List<String> cacheKeys = getProperty(reference);
1:31b19f1:       
1:4b48331:       for (String key : cacheKeys) { 
1:4b48331:         cache.putIfAbsent(key, reference);
1:31b19f1:       }
1:31b19f1:       
1:4b48331:       trackedReferences.add(reference);
1:31b19f1:       
1:4b48331:       return reference;
1:31b19f1:     }
1:31b19f1: 
1:4b48331:     protected abstract List<String> getProperty(ServiceReference reference);
1:31b19f1: 
1:4b48331:     public synchronized void removedService(ServiceReference reference, Object service) 
1:4b48331:     {
1:4b48331:       trackedReferences.remove(reference);
1:31b19f1:       
1:4b48331:       List<String> keysToProcess = new ArrayList<String>(getProperty(reference));
1:31b19f1:       
1:4b48331:       refLoop: for (ServiceReference ref : trackedReferences) {
1:4b48331:         List<String> refInt = getProperty(ref);
1:4b48331:         for (String interfaceName : refInt) {
1:4b48331:           int index = keysToProcess.indexOf(interfaceName);
1:4b48331:           if (index >= 0) {
1:4b48331:             keysToProcess.remove(index);
1:4b48331:             if (cache.replace(interfaceName, reference, ref)) {
1:4b48331:               if (keysToProcess.isEmpty()) break refLoop;
1:31b19f1:             }
1:31b19f1:           }
1:31b19f1:         }
37:31b19f1:       }
1:31b19f1:       
1:4b48331:       for (String interfaceName : keysToProcess) {
1:4b48331:         cache.remove(interfaceName, reference);
1:31b19f1:       }
1:31b19f1:     }
1:31b19f1: 
1:4b48331:     public void modifiedService(ServiceReference reference, Object service) { }
1:31b19f1:   }
1:31b19f1:   
1:4b48331:   public static final ServiceTrackerCustomizer LAZY = new ServiceTrackerCustomizer() {
1:4b48331:     public Object addingService(ServiceReference reference) 
1:4b48331:     {
1:4b48331:       return reference;
1:31b19f1:     }
1:4b48331:     public void modifiedService(ServiceReference reference, Object service)  { }
1:4b48331:     public void removedService(ServiceReference reference, Object service)  { }
1:4b48331:   };
1:31b19f1: 
1:4b48331:   public static final CachingServiceTracker ICF_CACHE = new BaseCachingServiceTracker() {
1:4b48331:     public List<String> getProperty(ServiceReference ref)
1:4b48331:     {
1:4b48331:       String[] interfaces = (String[]) ref.getProperty(Constants.OBJECTCLASS);
1:4b48331:       List<String> resultList = new ArrayList<String>();
1:4b48331:       for (String interfaceName : interfaces) {
1:4b48331:         if (!!!InitialContextFactory.class.getName().equals(interfaceName)) {
1:4b48331:           resultList.add(interfaceName);
1:31b19f1:         }
1:31b19f1:       }
1:31b19f1:       
1:4b48331:       return resultList;
1:31b19f1:     }
1:4b48331:   };
1:31b19f1:   
1:4b48331:   // TODO we should probably cope with the url.scheme property changing.
1:4b48331:   public static final CachingServiceTracker URL_FACTORY_CACHE = new BaseCachingServiceTracker() {
2:31b19f1:     protected List<String> getProperty(ServiceReference reference) {
1:4b48331:       Object scheme = reference.getProperty(JNDIConstants.JNDI_URLSCHEME);
1:4b48331:       List<String> result;
1:31b19f1:       
1:4b48331:       if (scheme instanceof String) {
1:4b48331:         result = new ArrayList<String>();
1:4b48331:         result.add((String) scheme);
1:4b48331:       } else if (scheme instanceof String[]) {
1:4b48331:         result = Arrays.asList((String[])scheme);
5:31b19f1:       } else {
1:4b48331:         result = Collections.emptyList();
1:31b19f1:       }
1:31b19f1:       
1:4b48331:       return result;
1:31b19f1:     }
1:4b48331:   };
1:31b19f1: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:7f6baa5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:31b19f1
/////////////////////////////////////////////////////////////////////////
0: import java.lang.IllegalStateException;
0: import java.security.PrivilegedExceptionAction;
0: import java.util.concurrent.CopyOnWriteArrayList;
0: import java.util.logging.Level;
0: import java.util.logging.Logger;
0: import org.apache.aries.jndi.Utils;
0: import org.apache.aries.jndi.startup.Activator;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.BundleEvent;
0: import org.osgi.util.tracker.BundleTrackerCustomizer;
0: import org.osgi.util.tracker.ServiceTracker;
0:   private static final Logger LOGGER = Logger.getLogger(ServiceTrackerCustomizers.class.getName());
1:   
0:     public Object getServiceFromRef(BundleContext bCtx, ServiceReference ref);
/////////////////////////////////////////////////////////////////////////
0:     protected ConcurrentHashMap<BundleContext, ConcurrentHashMap<ServiceReference,Object>> ctxServiceRefServiceCache =
0:         new ConcurrentHashMap<BundleContext, ConcurrentHashMap<ServiceReference,Object>>();
1:     
0:     private void clearCache(Bundle b) {
0:       for (BundleContext bCtx : ctxServiceRefServiceCache.keySet()) {
0:         Bundle cacheB = null;
0:         try {
0:           cacheB = bCtx.getBundle();
0:         } catch (IllegalStateException ise) {
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("BaseCachingServiceTracker.clearCache IllegalStateException caught getting bundle on " + bCtx);
1:         }
0:         if (cacheB == null || cacheB.equals(b)) {
0:           Object removedObj = ctxServiceRefServiceCache.remove(bCtx);
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("BaseCachingServiceTracker.clearCache Removed " + removedObj);
1:         }
1:       }
1:     }
1:     
0:     public Object getServiceFromRef(BundleContext bCtx, ServiceReference ref) {
0:       if (ctxServiceRefServiceCache.get(bCtx) == null) {
0:         ctxServiceRefServiceCache.put(bCtx, new ConcurrentHashMap<ServiceReference,Object>());
1:       }
0:       ConcurrentHashMap<ServiceReference,Object> ctxServiceCache = ctxServiceRefServiceCache.get(bCtx);
0:       Object service = ctxServiceCache.get(ref);
0:       if (service == null) {
0:         service = Utils.getServicePrivileged(bCtx,ref);
0:         ctxServiceCache.put(ref, service);
1:       }
0:       return service;
1:     }
/////////////////////////////////////////////////////////////////////////
0:       //Work through the contexts to clear out this serviceref
0:       for (BundleContext bCtx : ctxServiceRefServiceCache.keySet())  {
0:         ctxServiceRefServiceCache.get(bCtx).remove(reference);
1:       }
/////////////////////////////////////////////////////////////////////////
0:   //An empty BaseCachingServiceTracker, just to use the caching.
0:   public static final CachingServiceTracker ICFB_CACHE = new BaseCachingServiceTracker() {
0:     @Override
1:     protected List<String> getProperty(ServiceReference reference) {
0:       return new ArrayList<String>();
0:     }};
1:   
0:   //An empty BaseCachingServiceTracker, just to use the caching.
0:   public static final CachingServiceTracker URLOBJFACTORYFINDER_CACHE = new BaseCachingServiceTracker() {
0:     @Override
1:     protected List<String> getProperty(ServiceReference reference) {
0:       return new ArrayList<String>();
0:     }};
1:     
1:   
/////////////////////////////////////////////////////////////////////////
1:   
0: //Links between the BundleContext, the classes they have registered an interest in, and the service references from those.
0:   private static ConcurrentHashMap<BundleContext,ConcurrentHashMap<String,CopyOnWriteArrayList<ServiceReference>>> srCache 
0:             = new ConcurrentHashMap<BundleContext, ConcurrentHashMap<String,CopyOnWriteArrayList<ServiceReference>>>();
1:   
0:   //Links between references and services
0:   private static ConcurrentHashMap<ServiceReference, Object> refToService = new ConcurrentHashMap<ServiceReference, Object>();
1:   
0:   //Links between BundleContexts and the classes they have registered an interest in, and the ServiceTrackerCustomizers 
0:   //running for those classes.
0:   private static ConcurrentHashMap<BundleContext, ConcurrentHashMap<String,ContextServiceTrackerCustomizer>> serviceTrackerCustomizerCache 
0:               = new ConcurrentHashMap<BundleContext, ConcurrentHashMap<String,ContextServiceTrackerCustomizer>>();
1:   
0:   //Maintain a list of service trackers created, so they can be closed off.
0:   private static ConcurrentHashMap<ServiceTrackerCustomizer, ServiceTracker> serviceTrackers = new ConcurrentHashMap<ServiceTrackerCustomizer, ServiceTracker>();
1:   
0:   public static ContextServiceTrackerCustomizer getOrRegisterServiceTracker(BundleContext ctx,String clazz) {
1:     
0:     ConcurrentHashMap<String,ContextServiceTrackerCustomizer> stCacheForCtx = serviceTrackerCustomizerCache.get(ctx);
0:     if (stCacheForCtx == null) {
0:       synchronized (serviceTrackerCustomizerCache) {
0:         //Check the ctx is still not known, and not set by another thread.
0:         stCacheForCtx = serviceTrackerCustomizerCache.get(ctx);
0:         if (stCacheForCtx == null) {
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("Creating cache details for context " + ctx);
0:           stCacheForCtx = new ConcurrentHashMap<String, ServiceTrackerCustomizers.ContextServiceTrackerCustomizer>();
0:           serviceTrackerCustomizerCache.put(ctx, stCacheForCtx);
1:         }
1:       }
1:     }
1: 
0:     ContextServiceTrackerCustomizer stc = stCacheForCtx.get(clazz);
0:     if (stc == null) {
0:       synchronized (stCacheForCtx) {
0:         stc = stCacheForCtx.get(clazz);
0:         if (stc == null) {
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Creating " + clazz + " tracker for " + ctx);
0:           final BundleContext _ctx = ctx;
0:           stc = new ServiceTrackerCustomizers.ContextServiceTrackerCustomizer(_ctx, clazz);
0:           ServiceTracker st = new ServiceTracker(
0:               _ctx,
0:               clazz,
0:               stc);
0:           serviceTrackers.put(stc, st);
0:           stCacheForCtx.put(clazz,stc);
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Opening " + clazz + " tracker " + st);
0:           final ServiceTracker _st = st;
0:           try {
0:             Utils.doPrivileged(new PrivilegedExceptionAction<Object>() {
0:               public Object run() throws Exception {
0:                   _st.open(true);
0:                   return null;
1:               }            
0:             });
1:             
0:           } catch (Exception e) {
0:             if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Exception opening " + clazz + " tracker " + e.getMessage());       
1:           }
1:         }
1:       }
1:     }
0:     return stc;
1:     
1:   }
1:   
0:   //Class to track services for a given context
0:   public static class ContextServiceTrackerCustomizer implements ServiceTrackerCustomizer {
1:     
0:     private String clazz;
0:     final BundleContext _callerContext;
1:     
0:     public BundleContext getCallerContext() {
0:       return _callerContext;
1:     }
1:     
0:     private ConcurrentHashMap<String,ServiceReference> classToSR = new ConcurrentHashMap<String,ServiceReference>();
1:     
0:     public ContextServiceTrackerCustomizer(BundleContext _callerContext, String clazz) {
0:       this._callerContext = _callerContext;
0:       this.clazz = clazz;
1:     }
1:     
0:     public Object addingService(ServiceReference reference) {
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "addingService: " + reference + " for context " + _callerContext + " class " + clazz);
0:       Object service = null;
0:       //Get the appropriate cache for references
0:       ConcurrentHashMap<String,CopyOnWriteArrayList<ServiceReference>> ctxCache = srCache.get(_callerContext);
0:       if(ctxCache == null) {
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Creating cache for " + _callerContext);
0:       ctxCache = new ConcurrentHashMap<String,CopyOnWriteArrayList<ServiceReference>>();
0:         srCache.put(_callerContext,ctxCache);
1:       }
1:       
0:       if (!ctxCache.contains(clazz)) {
0:         if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Creating class based cache for " + clazz);
0:           ctxCache.put(clazz,new CopyOnWriteArrayList<ServiceReference>());
1:       }
0:       CopyOnWriteArrayList<ServiceReference> cache = ctxCache.get(clazz);
0:       //Now see if the cache already has the ServiceReference (presumably it shouldn't)
0:       if (!cache.contains(reference)) {
0:         cache.add(reference);
0:         service = _callerContext.getService(reference);
0:         refToService.put(reference, service);
0:         if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Storing reference in cache: " + reference + " and service " + service);
1:       } else {
0:       service = refToService.get(reference);
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Reference already in cache: " + reference + " returning service " + service);
1:       }
0:       //Get a list of the classNames the service is registered under, and add to the class -> ServiceReference list
0:       String[] classNames = (String[]) reference.getProperty(Constants.OBJECTCLASS);
0:       if (classNames != null) {
0:         for (String cl : classNames) {
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("Storing link from class " + cl + " to reference " + reference);
0:           classToSR.put(cl, reference);
1:         }
1:       }
0:       //Presumably we'll always want to track this reference.
0:       return service;
1:     }
0:     public void modifiedService(ServiceReference reference,
0:         java.lang.Object service) {
0:       //TODO do anything here??
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "modifiedService: " + reference);
1:     }
1:     
0:     public void removedService(ServiceReference reference,
0:         java.lang.Object service) {
0:       //Unget the service to maintain the count correctly (got in addingService)
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "removedService: " + reference + " object: " + service);
0:       try {
0:         _callerContext.ungetService(reference);
0:       } catch (IllegalStateException e) {
0:         //Shouldn't matter that we get an IllegalStateException here.
0:         if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "IllegalStateException ungetting " + reference + " from " + _callerContext);
1:       }
0:       Object removedService = refToService.remove(reference);
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "refToService removed: " + removedService);
0:       //Get the appropriate cache for references
0:       if(srCache.containsKey(_callerContext)) {
0:         CopyOnWriteArrayList<ServiceReference> cache = srCache.get(_callerContext).get(clazz);
0:         if (cache != null && cache.contains(reference)) {
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "removing reference from cache");
0:           cache.remove(reference);
1:         } else {
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "cache did not contain reference to remove");
1:         }
1:       } else {
0:         if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "removedService: no cache for callerContext: " + _callerContext);
1:       }
1:     }
1:     
0:     public ServiceReference getServiceRef(String clazz) {
0:       ServiceReference retObj = classToSR.get(clazz);
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("getServiceRef: Returning " + retObj);
0:       return retObj;
1:     }
1:     
1:     
0:     public ServiceReference[] getServiceRefs() {
0:       ServiceReference[] refs = null;
0:       if (srCache.containsKey(_callerContext)) {
0:         CopyOnWriteArrayList<ServiceReference> cache = srCache.get(_callerContext).get(clazz);
0:         if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Getting service refs from " + cache  + " for " + _callerContext);
0:         if (cache != null) {
0:         refs = cache.toArray(new ServiceReference[cache.size()]); 
0:         if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Found refs: " + refs.length);
1:         } else {
0:           if (LOGGER.isLoggable(Level.FINE))LOGGER.log(Level.FINE, "Cache for class " + clazz + " in context " + _callerContext + " does not exist");
1:         }
1:       } else {
0:         if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "Cache for context " + _callerContext + " does not exist");
1:       }
0:       return refs;
1:     }
1:     
1:     
0:     public Object getService(ServiceReference ref) {
0:       Object obj = refToService.get(ref);
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "getService returning: " + obj);
0:       return obj; 
1:     }
1:   }
1:   
0:   public static class CacheBundleTrackerCustomizer implements BundleTrackerCustomizer {
1: 
0:     @Override
0:     public Object addingBundle(Bundle arg0, BundleEvent arg1) {
0:       //Request that all bundles are tracked, as even if it's not in the cache, it might be later...
0:       return arg0;
1:     }
1: 
0:     @Override
0:     public void modifiedBundle(Bundle arg0, BundleEvent arg1, Object arg2) {
1:       
1:     }
1: 
0:     @Override
0:     public void removedBundle(Bundle arg0, BundleEvent arg1, Object arg2) {
0:       //Work through srCache to find the bundle by matching to the context
0:       if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("removedBundle: Bundle " + arg0);
0:       for (BundleContext bCtx : srCache.keySet()) {
0:         Bundle cacheB = null;
0:         try {
0:           cacheB = bCtx.getBundle();
0:         } catch (IllegalStateException ise) {
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("CacheBundleTrackerCustomizer.removedBundle IllegalStateException caught getting bundle on " + bCtx);
1:         }
0:         //If we found no bundle on the context, or one that matches, then remove it.
0:         if (cacheB == null || cacheB.equals(arg0)) {
0:           if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("Found matching bundleContext " + bCtx);
0:           //Removing the bundle in the cache, so clear it out.
0:           ConcurrentHashMap<String,CopyOnWriteArrayList<ServiceReference>> classesCached = srCache.remove(bCtx);
0:           if (classesCached != null) {
0:             for (String clazz : classesCached.keySet()) {
0:               CopyOnWriteArrayList<ServiceReference> serviceRefs = classesCached.get(clazz);
0:               //Now work through the serviceRefs, and clear out the refsToService cache
0:               if (serviceRefs != null) {
0:                 for (ServiceReference serviceRef : serviceRefs.toArray(new ServiceReference[serviceRefs.size()])) {
0:                   Object service = refToService.remove(serviceRef);
0:                   //Unget the service from the framework, as it won't be required now
0:                   if (service != null) {
0:                     try {
0:                       bCtx.ungetService(serviceRef);
0:                     } catch (IllegalStateException e) {
0:                       //Shouldn't matter that we get an IllegalStateException here.
0:                       if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, "CacheBundleTrackerCustomizer.removedBundle IllegalStateException ungetting " + serviceRef + " from " + bCtx);
1:                     }
1:                   }
1:                 }
1:               }
1:             }
1:           }
0:           //Remove the service tracker customizer and stop the service tracker
0:           ConcurrentHashMap<String,ContextServiceTrackerCustomizer> trackedClasses = serviceTrackerCustomizerCache.remove(bCtx);
0:           if (trackedClasses != null) {
0:             for (String classes : trackedClasses.keySet()) {
0:               ServiceTracker st = serviceTrackers.remove(trackedClasses.get(classes));
0:               if (st != null) {
0:                 final ServiceTracker _st = st;
0:                 try {
0:                   if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("Closing ServiceTracker " + st);
0:                   Utils.doPrivileged(new PrivilegedExceptionAction<Object>() {
0:                     public Object run() throws Exception {
0:                         _st.close();
0:                         return null;
1:                     }            
0:                   });
0:                 } catch (Exception e) {
0:                   //TODO logging?       
1:                 }
1:               }
1:             }
1:           }
1:         }
1:       }
0:       //Remove bundle from BaseCachingServiceTrackers
0:       ((BaseCachingServiceTracker) ICF_CACHE).clearCache(arg0);
0:       ((BaseCachingServiceTracker) ICFB_CACHE).clearCache(arg0);
0:       ((BaseCachingServiceTracker) URL_FACTORY_CACHE).clearCache(arg0);
0:       ((BaseCachingServiceTracker) URLOBJFACTORYFINDER_CACHE).clearCache(arg0);
1:     }
1:   }
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:955bf91
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:4b48331
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jndi.tracker;
0: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
0: 
1: import javax.naming.spi.InitialContextFactory;
0: 
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.jndi.JNDIConstants;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
0: 
0: 
1: public class ServiceTrackerCustomizers 
1: {
1:   public static interface CachingServiceTracker extends ServiceTrackerCustomizer {
1:     public ServiceReference find(String identifier);
0:   }
0:   
1:   private static abstract class BaseCachingServiceTracker implements CachingServiceTracker {
1:     /** The cached references */
1:     protected ConcurrentMap<String, ServiceReference> cache = new ConcurrentHashMap<String, ServiceReference>();
1:     /** A list of service references that are being tracked */
1:     protected List<ServiceReference> trackedReferences = new ArrayList<ServiceReference>();
0: 
1:     public ServiceReference find(String identifier) 
1:     {
1:       return cache.get(identifier);
0:     }
0: 
1:     public synchronized Object addingService(ServiceReference reference) 
1:     {
1:       List<String> cacheKeys = getProperty(reference);
0:       
1:       for (String key : cacheKeys) { 
1:         cache.putIfAbsent(key, reference);
0:       }
0:       
1:       trackedReferences.add(reference);
0:       
1:       return reference;
0:     }
0: 
1:     protected abstract List<String> getProperty(ServiceReference reference);
0: 
1:     public synchronized void removedService(ServiceReference reference, Object service) 
1:     {
1:       trackedReferences.remove(reference);
0:       
1:       List<String> keysToProcess = new ArrayList<String>(getProperty(reference));
0:       
1:       refLoop: for (ServiceReference ref : trackedReferences) {
1:         List<String> refInt = getProperty(ref);
1:         for (String interfaceName : refInt) {
1:           int index = keysToProcess.indexOf(interfaceName);
1:           if (index >= 0) {
1:             keysToProcess.remove(index);
1:             if (cache.replace(interfaceName, reference, ref)) {
1:               if (keysToProcess.isEmpty()) break refLoop;
0:             }
0:           }
0:         }
0:       }
0:       
1:       for (String interfaceName : keysToProcess) {
1:         cache.remove(interfaceName, reference);
0:       }
0:     }
0: 
1:     public void modifiedService(ServiceReference reference, Object service) { }
0:   }
0:   
1:   public static final ServiceTrackerCustomizer LAZY = new ServiceTrackerCustomizer() {
1:     public Object addingService(ServiceReference reference) 
1:     {
1:       return reference;
0:     }
1:     public void modifiedService(ServiceReference reference, Object service)  { }
1:     public void removedService(ServiceReference reference, Object service)  { }
1:   };
0: 
1:   public static final CachingServiceTracker ICF_CACHE = new BaseCachingServiceTracker() {
1:     public List<String> getProperty(ServiceReference ref)
1:     {
1:       String[] interfaces = (String[]) ref.getProperty(Constants.OBJECTCLASS);
1:       List<String> resultList = new ArrayList<String>();
1:       for (String interfaceName : interfaces) {
1:         if (!!!InitialContextFactory.class.getName().equals(interfaceName)) {
1:           resultList.add(interfaceName);
0:         }
0:       }
0:       
1:       return resultList;
0:     }
1:   };
0:   
1:   // TODO we should probably cope with the url.scheme property changing.
1:   public static final CachingServiceTracker URL_FACTORY_CACHE = new BaseCachingServiceTracker() {
0:     protected List<String> getProperty(ServiceReference reference) {
1:       Object scheme = reference.getProperty(JNDIConstants.JNDI_URLSCHEME);
1:       List<String> result;
0:       
1:       if (scheme instanceof String) {
1:         result = new ArrayList<String>();
1:         result.add((String) scheme);
1:       } else if (scheme instanceof String[]) {
1:         result = Arrays.asList((String[])scheme);
0:       } else {
1:         result = Collections.emptyList();
0:       }
0:       
1:       return result;
0:     }
1:   };
0: }
============================================================================