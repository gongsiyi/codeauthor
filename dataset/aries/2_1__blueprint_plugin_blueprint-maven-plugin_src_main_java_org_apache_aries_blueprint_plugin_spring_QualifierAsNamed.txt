1:c201f83: /**
1:c201f83:  * Licensed to the Apache Software Foundation (ASF) under one
1:c201f83:  * or more contributor license agreements.  See the NOTICE file
1:c201f83:  * distributed with this work for additional information
1:c201f83:  * regarding copyright ownership.  The ASF licenses this file
1:c201f83:  * to you under the Apache License, Version 2.0 (the
1:c201f83:  * "License"); you may not use this file except in compliance
1:c201f83:  * with the License.  You may obtain a copy of the License at
1:c201f83:  *
1:c201f83:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c201f83:  *
1:c201f83:  * Unless required by applicable law or agreed to in writing,
1:c201f83:  * software distributed under the License is distributed on an
1:c201f83:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c201f83:  * KIND, either express or implied.  See the License for the
1:c201f83:  * specific language governing permissions and limitations
1:c201f83:  * under the License.
1:c201f83:  */
1:c201f83: package org.apache.aries.blueprint.plugin.spring;
1:c201f83: 
1:c201f83: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
1:c201f83: import org.springframework.beans.factory.annotation.Qualifier;
1:c201f83: 
1:c201f83: import java.lang.reflect.AnnotatedElement;
1:c201f83: 
1:c201f83: public class QualifierAsNamed implements NamedLikeHandler {
1:c201f83:     @Override
1:c201f83:     public Class getAnnotation() {
1:c201f83:         return Qualifier.class;
1:c201f83:     }
1:c201f83: 
1:c201f83:     @Override
1:c201f83:     public String getName(Class clazz, AnnotatedElement annotatedElement) {
1:c201f83:         Qualifier annotation = annotatedElement.getAnnotation(Qualifier.class);
1:c201f83:         if (annotation != null && annotation.value() != null && !"".equals(annotation.value())) {
1:c201f83:             return annotation.value();
1:c201f83:         }
1:c201f83:         return null;
1:c201f83:     }
1:c201f83: 
1:c201f83:     @Override
1:c201f83:     public String getName(Object annotation) {
1:c201f83:         Qualifier qualifier = Qualifier.class.cast(annotation);
1:c201f83:         if (qualifier != null && qualifier.value() != null && !"".equals(qualifier.value())) {
1:c201f83:             return qualifier.value();
1:c201f83:         }
1:c201f83:         return null;
1:c201f83:     }
1:c201f83: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.spring;
1: 
1: import org.apache.aries.blueprint.plugin.spi.NamedLikeHandler;
1: import org.springframework.beans.factory.annotation.Qualifier;
1: 
1: import java.lang.reflect.AnnotatedElement;
1: 
1: public class QualifierAsNamed implements NamedLikeHandler {
1:     @Override
1:     public Class getAnnotation() {
1:         return Qualifier.class;
1:     }
1: 
1:     @Override
1:     public String getName(Class clazz, AnnotatedElement annotatedElement) {
1:         Qualifier annotation = annotatedElement.getAnnotation(Qualifier.class);
1:         if (annotation != null && annotation.value() != null && !"".equals(annotation.value())) {
1:             return annotation.value();
1:         }
1:         return null;
1:     }
1: 
1:     @Override
1:     public String getName(Object annotation) {
1:         Qualifier qualifier = Qualifier.class.cast(annotation);
1:         if (qualifier != null && qualifier.value() != null && !"".equals(qualifier.value())) {
1:             return qualifier.value();
1:         }
1:         return null;
1:     }
1: }
============================================================================