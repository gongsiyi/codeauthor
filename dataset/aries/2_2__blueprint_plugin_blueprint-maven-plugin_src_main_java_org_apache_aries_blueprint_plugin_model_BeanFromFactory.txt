1:d042317: /**
1:d042317:  * Licensed to the Apache Software Foundation (ASF) under one
1:d042317:  * or more contributor license agreements.  See the NOTICE file
1:d042317:  * distributed with this work for additional information
1:d042317:  * regarding copyright ownership.  The ASF licenses this file
1:d042317:  * to you under the Apache License, Version 2.0 (the
1:d042317:  * "License"); you may not use this file except in compliance
1:d042317:  * with the License.  You may obtain a copy of the License at
1:5ab57d7:  * <p/>
1:d042317:  * http://www.apache.org/licenses/LICENSE-2.0
1:5ab57d7:  * <p/>
1:d042317:  * Unless required by applicable law or agreed to in writing,
1:d042317:  * software distributed under the License is distributed on an
1:d042317:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:d042317:  * KIND, either express or implied.  See the License for the
1:d042317:  * specific language governing permissions and limitations
1:d042317:  * under the License.
1:d042317:  */
1:b5bf406: package org.apache.aries.blueprint.plugin.model;
1:b5bf406: 
1:b5bf406: 
1:c201f83: import org.apache.aries.blueprint.plugin.Extensions;
1:a04c623: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
1:0d2c0ec: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
1:0eb5481: 
1:5ab57d7: import java.lang.reflect.Method;
1:5ab57d7: 
1:a2ed671: public class BeanFromFactory extends Bean {
1:b5bf406:     public String factoryMethod;
1:853c6ee:     public BeanRef factoryBean;
1:5ab57d7:     private Method producingMethod;
1:59217b2: 
1:a2ed671:     public BeanFromFactory(Class<?> clazz, BeanRef factoryBean, Method factoryMethod, ContextEnricher contextEnricher) {
1:0d2c0ec:         this(clazz, null, factoryBean, factoryMethod, contextEnricher);
1:b5bf406:     }
1:b5bf406: 
1:a2ed671:     public BeanFromFactory(Class<?> clazz, String id, BeanRef factoryBean, Method factoryMethod, ContextEnricher contextEnricher) {
1:0d2c0ec:         super(clazz, contextEnricher);
1:c201f83:         if (id != null) {
1:59217b2:             this.id = id;
1:b5bf406:         }
1:59217b2:         this.factoryBean = factoryBean;
2:5ab57d7:         this.factoryMethod = factoryMethod.getName();
2:5ab57d7:         this.producingMethod = factoryMethod;
1:a04c623:         handleCustomBeanAnnotations();
1:59217b2:     }
1:59217b2: 
1:a04c623:     private void handleCustomBeanAnnotations() {
1:a04c623:         for (BeanAnnotationHandler beanAnnotationHandler : Extensions.BEAN_ANNOTATION_HANDLERs) {
1:a04c623:             Object annotation = AnnotationHelper.findAnnotation(producingMethod.getAnnotations(), beanAnnotationHandler.getAnnotation());
1:a04c623:             if (annotation != null) {
1:0d2c0ec:                 beanAnnotationHandler.handleBeanAnnotation(producingMethod, id, contextEnricher, this);
1:c201f83:             }
1:0eb5481:         }
1:0eb5481:     }
1:b5bf406: 
1:5ab57d7:     public void setSingleton() {
1:59217b2:         this.isPrototype = false;
1:59217b2:     }
1:5ab57d7: 
1:5ab57d7:     @Override
1:a2ed671:     protected void resolveArguments(BlueprintRegister matcher) {
1:7f12763:         resolveArguments(matcher, producingMethod.getParameterTypes(), producingMethod.getParameterAnnotations());
1:5ab57d7:     }
1:0eb5481: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:7f12763
/////////////////////////////////////////////////////////////////////////
0:     protected void resolveArguments(Matcher matcher) {
1:         resolveArguments(matcher, producingMethod.getParameterTypes(), producingMethod.getParameterAnnotations());
commit:5ab57d7
/////////////////////////////////////////////////////////////////////////
1:  * <p/>
1:  * <p/>
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Method;
1: 
1:     private Method producingMethod;
0:     public ProducedBean(Class<?> clazz, BeanRef factoryBean, Method factoryMethod) {
1:         this.factoryMethod = factoryMethod.getName();
1:         this.producingMethod = factoryMethod;
0:     public ProducedBean(Class<?> clazz, String id, BeanRef factoryBean, Method factoryMethod) {
1:         this.factoryMethod = factoryMethod.getName();
1:         this.producingMethod = factoryMethod;
1:     public void setSingleton() {
1: 
1:     @Override
0:     protected void resolveConstructorArguments(Matcher matcher) {
0:         resolveParametersForConstructor(matcher, producingMethod.getParameterTypes(), producingMethod.getParameterAnnotations());
1:     }
commit:d042317
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * <p>
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:59217b2
/////////////////////////////////////////////////////////////////////////
1: 
0:     public ProducedBean(Class<?> clazz, String id, BeanRef factoryBean, String factoryMethod) {
0:         super(clazz);
1:         this.id = id;
1:         this.factoryBean = factoryBean;
0:         this.factoryMethod = factoryMethod;
1:     }
1: 
0:     public void setSingleton(){
1:         this.isPrototype = false;
1:     }
commit:853c6ee
/////////////////////////////////////////////////////////////////////////
1:     public BeanRef factoryBean;
0:     public ProducedBean(Class<?> clazz, BeanRef factoryBean, String factoryMethod) {
0:         this.factoryBean = factoryBean;
commit:b5bf406
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.plugin.model;
1: 
1: 
0: public class ProducedBean extends Bean {
1:     public String factoryMethod;
0:     public String factoryBeanId;
1:     
0:     public ProducedBean(Class<?> clazz, String factoryBeanId, String factoryMethod) {
0:         super(clazz);
0:         this.factoryBeanId = factoryBeanId;
0:         this.factoryMethod = factoryMethod;
1:     }
1: 
1: }
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:a2ed671
/////////////////////////////////////////////////////////////////////////
1: public class BeanFromFactory extends Bean {
1:     public BeanFromFactory(Class<?> clazz, BeanRef factoryBean, Method factoryMethod, ContextEnricher contextEnricher) {
1:     public BeanFromFactory(Class<?> clazz, String id, BeanRef factoryBean, Method factoryMethod, ContextEnricher contextEnricher) {
/////////////////////////////////////////////////////////////////////////
1:     protected void resolveArguments(BlueprintRegister matcher) {
commit:0d2c0ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.ContextEnricher;
/////////////////////////////////////////////////////////////////////////
0:     public ProducedBean(Class<?> clazz, BeanRef factoryBean, Method factoryMethod, ContextEnricher contextEnricher) {
1:         this(clazz, null, factoryBean, factoryMethod, contextEnricher);
0:     public ProducedBean(Class<?> clazz, String id, BeanRef factoryBean, Method factoryMethod, ContextEnricher contextEnricher) {
1:         super(clazz, contextEnricher);
/////////////////////////////////////////////////////////////////////////
1:                 beanAnnotationHandler.handleBeanAnnotation(producingMethod, id, contextEnricher, this);
commit:a04c623
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.spi.BeanAnnotationHandler;
/////////////////////////////////////////////////////////////////////////
1:         handleCustomBeanAnnotations();
1:     private void handleCustomBeanAnnotations() {
1:         for (BeanAnnotationHandler beanAnnotationHandler : Extensions.BEAN_ANNOTATION_HANDLERs) {
1:             Object annotation = AnnotationHelper.findAnnotation(producingMethod.getAnnotations(), beanAnnotationHandler.getAnnotation());
1:             if (annotation != null) {
0:                 beanAnnotationHandler.handleBeanAnnotation(producingMethod, id, this, this);
commit:868c96f
/////////////////////////////////////////////////////////////////////////
0:     protected void resolveArguments(BlueprinRegister matcher) {
commit:c201f83
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.plugin.Extensions;
0: import org.apache.aries.blueprint.plugin.spi.BeanAttributesResolver;
/////////////////////////////////////////////////////////////////////////
0:         this(clazz, null, factoryBean, factoryMethod);
1:         if (id != null) {
0:         resolveBeanAttributes();
0:     private void resolveBeanAttributes() {
0:         for (BeanAttributesResolver beanAttributesResolver : Extensions.beanAttributesResolvers) {
0:             if (producingMethod.getAnnotation(beanAttributesResolver.getAnnotation()) != null) {
0:                 attributes.putAll(beanAttributesResolver.resolveAttributes(clazz, producingMethod));
1:             }
commit:0eb5481
/////////////////////////////////////////////////////////////////////////
0:         this(clazz, null, factoryBean,factoryMethod);
0:         if(id != null) {
0:             this.id = id;
1:         }
0:         overrideDependsOnIfNeeded(factoryMethod);
/////////////////////////////////////////////////////////////////////////
0:     private void overrideDependsOnIfNeeded(Method factoryMethod) {
0:         String dependsOn = getDependsOn(factoryMethod);
0:         if (dependsOn != null) {
0:             this.dependsOn = dependsOn;
1:         }
1:     }
1: 
commit:7583a4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.plugin.Activation;
0: 
/////////////////////////////////////////////////////////////////////////
0:         overrideActivationIfNeeded(factoryMethod);
/////////////////////////////////////////////////////////////////////////
0:         overrideActivationIfNeeded(factoryMethod);
0:     }
0: 
0:     private void overrideActivationIfNeeded(Method factoryMethod) {
0:         Activation methodActivation = getActivation(factoryMethod);
0:         if (methodActivation != null) {
0:             this.activation = methodActivation;
0:         }
============================================================================