1:307d743: /*
1:307d743:  * Licensed under the Apache License, Version 2.0 (the "License");
1:307d743:  * you may not use this file except in compliance with the License.
1:307d743:  * You may obtain a copy of the License at
1:307d743:  *
1:307d743:  *      http://www.apache.org/licenses/LICENSE-2.0
1:307d743:  *
1:307d743:  * Unless required by applicable law or agreed to in writing, software
1:307d743:  * distributed under the License is distributed on an "AS IS" BASIS,
1:307d743:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:307d743:  * See the License for the specific language governing permissions and
1:307d743:  * limitations under the License.
1:307d743:  */
1:307d743: package org.apache.aries.subsystem.core.archive;
18:307d743: 
1:307d743: import java.util.ArrayList;
1:307d743: import java.util.Collection;
1:307d743: import java.util.List;
1:307d743: 
1:5bd3bf6: import org.apache.aries.subsystem.core.internal.BasicSubsystem;
1:307d743: import org.apache.aries.subsystem.core.internal.OsgiIdentityRequirement;
1:307d743: import org.osgi.framework.Version;
1:307d743: import org.osgi.resource.Requirement;
1:307d743: import org.osgi.resource.Resource;
1:307d743: import org.osgi.service.subsystem.SubsystemConstants;
1:307d743: 
1:2ffcfb9: public class AriesSubsystemParentsHeader extends AbstractClauseBasedHeader<AriesSubsystemParentsHeader.Clause> implements RequirementHeader<AriesSubsystemParentsHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:2ffcfb9: 		public static final String ATTRIBUTE_VERSION = VersionRangeAttribute.NAME_VERSION;
1:307d743: 		public static final String ATTRIBUTE_RESOURCEID = "resourceId";
1:307d743: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
1:307d743: 		
1:307d743: 		public Clause(String clause) {
1:2ffcfb9: 			super(
1:2ffcfb9: 					parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:2ffcfb9: 					parseParameters(clause, true), 
1:2ffcfb9: 					generateDefaultParameters(
1:2ffcfb9: 							TypeAttribute.newInstance(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION),
1:2ffcfb9: 							VersionRangeAttribute.DEFAULT_VERSION));
18:307d743: 		}
1:307d743: 		
1:5bd3bf6: 		public Clause(BasicSubsystem subsystem, boolean referenceCount) {
1:307d743: 			this(appendSubsystem(subsystem, new StringBuilder(), referenceCount).toString());
1:307d743: 		}
1:307d743: 		
1:5bd3bf6: 		public boolean contains(BasicSubsystem subsystem) {
1:307d743: 			return getSymbolicName().equals(
1:307d743: 					subsystem.getSymbolicName())
1:307d743: 					&& getVersion().equals(
1:307d743: 							subsystem.getVersion())
1:307d743: 					&& getType().equals(
1:307d743: 							subsystem.getType());
1:307d743: 		}
1:307d743: 
1:307d743: 		public long getId() {
1:307d743: 			Attribute attribute = getAttribute(ATTRIBUTE_RESOURCEID);
1:307d743: 			if (attribute == null)
1:307d743: 				return -1;
1:307d743: 			return Long.valueOf(String.valueOf(attribute.getValue()));
1:307d743: 		}
1:307d743: 
1:307d743: 		public String getSymbolicName() {
2:307d743: 			return path;
1:307d743: 		}
1:307d743: 		
1:307d743: 		public String getType() {
1:307d743: 			return ((TypeAttribute)getAttribute(ATTRIBUTE_TYPE)).getType();
1:307d743: 		}
1:307d743: 		
1:307d743: 		public Version getVersion() {
1:307d743: 			return ((VersionAttribute)getAttribute(ATTRIBUTE_VERSION)).getVersion();
1:307d743: 		}
1:307d743: 		
1:307d743: 		public OsgiIdentityRequirement toRequirement(Resource resource) {
1:307d743: 			return new OsgiIdentityRequirement(getSymbolicName(), getVersion(), getType(), false);
1:307d743: 		}
1:307d743: 	}
1:307d743: 	
1:307d743: 	public static final String NAME = "AriesSubsystem-Parents";
1:307d743: 	
1:5bd3bf6: 	private static StringBuilder appendSubsystem(BasicSubsystem subsystem, StringBuilder builder, boolean referenceCount) {
1:307d743: 		String symbolicName = subsystem.getSymbolicName();
1:307d743: 		Version version = subsystem.getVersion();
1:307d743: 		String type = subsystem.getType();
1:307d743: 		builder.append(symbolicName)
2:307d743: 			.append(';')
1:307d743: 			.append(Clause.ATTRIBUTE_VERSION)
1:307d743: 			.append('=')
1:307d743: 			.append(version.toString())
1:307d743: 			.append(';')
1:307d743: 			.append(Clause.ATTRIBUTE_TYPE)
1:307d743: 			.append('=')
1:307d743: 			.append(type)
1:307d743: 			.append(';')
1:307d743: 			.append(Clause.ATTRIBUTE_RESOURCEID)
1:307d743: 			.append('=')
1:391a1aa: 			.append(subsystem.getSubsystemId());
1:307d743: 		return builder;
1:307d743: 	}
1:307d743: 	
1:307d743: 	public AriesSubsystemParentsHeader(Collection<Clause> clauses) {
1:2ffcfb9: 		super(clauses);
1:307d743: 	}
1:307d743: 	
1:307d743: 	public AriesSubsystemParentsHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:307d743: 	}
1:307d743: 	
1:5bd3bf6: 	public boolean contains(BasicSubsystem subsystem) {
1:307d743: 		return getClause(subsystem) != null;
1:307d743: 	}
1:307d743: 	
1:5bd3bf6: 	public Clause getClause(BasicSubsystem subsystem) {
1:307d743: 		String symbolicName = subsystem.getSymbolicName();
1:307d743: 		Version version = subsystem.getVersion();
1:307d743: 		String type = subsystem.getType();
1:307d743: 		for (Clause clause : clauses) {
1:307d743: 			if (symbolicName.equals(clause.getPath())
1:307d743: 					&& clause.getVersion().equals(version)
1:307d743: 					&& type.equals(clause.getType()))
1:307d743: 				return clause;
1:307d743: 		}
3:307d743: 		return null;
1:307d743: 	}
1:307d743: 	
11:307d743: 	@Override
1:307d743: 	public String getName() {
1:307d743: 		return NAME;
1:307d743: 	}
1:307d743: 
1:307d743: 	@Override
1:307d743: 	public String getValue() {
1:307d743: 		return toString();
1:307d743: 	}
1:307d743: 
1:307d743: 	@Override
1:307d743: 	public List<Requirement> toRequirements(Resource resource) {
1:307d743: 		List<Requirement> requirements = new ArrayList<Requirement>(clauses.size());
1:307d743: 		for (Clause clause : clauses)
1:307d743: 			requirements.add(clause.toRequirement(resource));
1:307d743: 		return requirements;
1:307d743: 	}
1:307d743: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public class AriesSubsystemParentsHeader extends AbstractClauseBasedHeader<AriesSubsystemParentsHeader.Clause> implements RequirementHeader<AriesSubsystemParentsHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1: 		public static final String ATTRIBUTE_VERSION = VersionRangeAttribute.NAME_VERSION;
1: 			super(
1: 					parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1: 					parseParameters(clause, true), 
1: 					generateDefaultParameters(
1: 							TypeAttribute.newInstance(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION),
1: 							VersionRangeAttribute.DEFAULT_VERSION));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 		super(clauses);
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.BasicSubsystem;
/////////////////////////////////////////////////////////////////////////
1: 		public Clause(BasicSubsystem subsystem, boolean referenceCount) {
1: 		public boolean contains(BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	private static StringBuilder appendSubsystem(BasicSubsystem subsystem, StringBuilder builder, boolean referenceCount) {
/////////////////////////////////////////////////////////////////////////
1: 	public boolean contains(BasicSubsystem subsystem) {
1: 	public Clause getClause(BasicSubsystem subsystem) {
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			.append(subsystem.getSubsystemId());
/////////////////////////////////////////////////////////////////////////
commit:307d743
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
0: import org.apache.aries.subsystem.core.internal.AriesSubsystem;
1: import org.apache.aries.subsystem.core.internal.OsgiIdentityRequirement;
1: import org.osgi.framework.Version;
0: import org.osgi.framework.VersionRange;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
0: public class AriesSubsystemParentsHeader implements RequirementHeader<AriesSubsystemParentsHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		public static final String ATTRIBUTE_VERSION = VersionRangeAttribute.NAME;
1: 		public static final String ATTRIBUTE_RESOURCEID = "resourceId";
1: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
0: 		public static final String DIRECTIVE_REFERENCECOUNT = ReferenceCountDirective.NAME;
1: 		
0: 		private static final Pattern PATTERN_SYMBOLICNAME = Pattern.compile('(' + Grammar.SYMBOLICNAME + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(ATTRIBUTE_TYPE);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_TYPE, TypeAttribute.newInstance(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION));
0: 			parameter = parameters.get(ATTRIBUTE_VERSION);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_VERSION, VersionAttribute.DEFAULT);
1: 		}
1: 		
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_SYMBOLICNAME.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Missing symbolic name path: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				if (parameter instanceof VersionAttribute)
0: 					parameter = new VersionRangeAttribute(new VersionRange(String.valueOf(parameter.getValue())));
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
0: 		public Clause(AriesSubsystem subsystem, boolean referenceCount) {
1: 			this(appendSubsystem(subsystem, new StringBuilder(), referenceCount).toString());
1: 		}
1: 		
0: 		public boolean contains(AriesSubsystem subsystem) {
1: 			return getSymbolicName().equals(
1: 					subsystem.getSymbolicName())
1: 					&& getVersion().equals(
1: 							subsystem.getVersion())
1: 					&& getType().equals(
1: 							subsystem.getType());
1: 		}
1: 		
1: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute)
0: 				return (Attribute)result;
1: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values())
0: 				if (parameter instanceof Attribute)
0: 					attributes.add((Attribute)parameter);
0: 			attributes.trimToSize();
0: 			return attributes;
1: 		}
1: 
1: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive)
0: 				return (Directive)result;
1: 			return null;
1: 		}
1: 
1: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values())
0: 				if (parameter instanceof Directive)
0: 					directives.add((Directive)parameter);
0: 			directives.trimToSize();
0: 			return directives;
1: 		}
1: 		
1: 		public long getId() {
1: 			Attribute attribute = getAttribute(ATTRIBUTE_RESOURCEID);
1: 			if (attribute == null)
1: 				return -1;
1: 			return Long.valueOf(String.valueOf(attribute.getValue()));
1: 		}
1: 
1: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 
1: 		@Override
0: 		public String getPath() {
1: 			return path;
1: 		}
1: 		
1: 		public String getSymbolicName() {
1: 			return path;
1: 		}
1: 		
1: 		public String getType() {
1: 			return ((TypeAttribute)getAttribute(ATTRIBUTE_TYPE)).getType();
1: 		}
1: 		
1: 		public Version getVersion() {
1: 			return ((VersionAttribute)getAttribute(ATTRIBUTE_VERSION)).getVersion();
1: 		}
1: 		
0: 		public boolean isIncrementReferenceCount() {
0: 			return ((ReferenceCountDirective)getDirective(DIRECTIVE_REFERENCECOUNT)).isIncrement();
1: 		}
1: 		
1: 		public OsgiIdentityRequirement toRequirement(Resource resource) {
1: 			return new OsgiIdentityRequirement(getSymbolicName(), getVersion(), getType(), false);
1: 		}
1: 		
1: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
0: 			return builder.toString();
1: 		}
1: 	}
1: 	
1: 	public static final String NAME = "AriesSubsystem-Parents";
1: 	
0: 	private static StringBuilder appendSubsystem(AriesSubsystem subsystem, StringBuilder builder, boolean referenceCount) {
1: 		String symbolicName = subsystem.getSymbolicName();
1: 		Version version = subsystem.getVersion();
1: 		String type = subsystem.getType();
1: 		builder.append(symbolicName)
1: 			.append(';')
1: 			.append(Clause.ATTRIBUTE_VERSION)
1: 			.append('=')
1: 			.append(version.toString())
1: 			.append(';')
1: 			.append(Clause.ATTRIBUTE_TYPE)
1: 			.append('=')
1: 			.append(type)
1: 			.append(';')
1: 			.append(Clause.ATTRIBUTE_RESOURCEID)
1: 			.append('=')
0: 			.append(subsystem.getSubsystemId())
1: 			.append(';')
0: 			.append(Clause.DIRECTIVE_REFERENCECOUNT)
0: 			.append(":=")
0: 			.append(referenceCount);
1: 		return builder;
1: 	}
1: 	
0: 	private static Collection<Clause> processHeader(String value) {
0: 		Collection<String> clauseStrs = new ClauseTokenizer(value).getClauses();
0: 		Set<Clause> clauses = new HashSet<Clause>(clauseStrs.size());
0: 		for (String clause : new ClauseTokenizer(value).getClauses())
0: 			clauses.add(new Clause(clause));
0: 		return clauses;
1: 	}
1: 	
0: 	private final Set<Clause> clauses;
1: 	
1: 	public AriesSubsystemParentsHeader(Collection<Clause> clauses) {
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A " + NAME + " header must have at least one clause");
0: 		this.clauses = new HashSet<Clause>(clauses);
1: 	}
1: 	
1: 	public AriesSubsystemParentsHeader(String value) {
0: 		this(processHeader(value));
1: 	}
1: 	
0: 	public boolean contains(AriesSubsystem subsystem) {
1: 		return getClause(subsystem) != null;
1: 	}
1: 	
0: 	public Clause getClause(AriesSubsystem subsystem) {
1: 		String symbolicName = subsystem.getSymbolicName();
1: 		Version version = subsystem.getVersion();
1: 		String type = subsystem.getType();
1: 		for (Clause clause : clauses) {
1: 			if (symbolicName.equals(clause.getPath())
1: 					&& clause.getVersion().equals(version)
1: 					&& type.equals(clause.getType()))
1: 				return clause;
1: 		}
1: 		return null;
1: 	}
1: 	
1: 	@Override
0: 	public Collection<AriesSubsystemParentsHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 	
0: 	public boolean isIncrementReferenceCount(AriesSubsystem subsystem) {
0: 		Clause clause = getClause(subsystem);
0: 		if (clause == null)
0: 			return false;
0: 		return clause.isIncrementReferenceCount();
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 
1: 	@Override
1: 	public List<Requirement> toRequirements(Resource resource) {
1: 		List<Requirement> requirements = new ArrayList<Requirement>(clauses.size());
1: 		for (Clause clause : clauses)
1: 			requirements.add(clause.toRequirement(resource));
1: 		return requirements;
1: 	}
1: 	
1: 	@Override
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
1: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
1: 	}
1: }
============================================================================