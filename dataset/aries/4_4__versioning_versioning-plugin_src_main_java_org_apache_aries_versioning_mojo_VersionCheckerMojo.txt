1:cee3393: /*
1:cee3393:  * Copyright 20012 The Apache Software Foundation.
2:c573eea:  *
1:cee3393:  * Licensed under the Apache License, Version 2.0 (the "License");
1:cee3393:  * you may not use this file except in compliance with the License.
1:cee3393:  * You may obtain a copy of the License at
1:c573eea:  *
1:cee3393:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c573eea:  *
1:cee3393:  * Unless required by applicable law or agreed to in writing, software
1:cee3393:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cee3393:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cee3393:  * See the License for the specific language governing permissions and
1:cee3393:  * limitations under the License.
7:c573eea:  */
6:274c21b: 
1:cee3393: package org.apache.aries.versioning.mojo;
1:c3c5192: 
1:c573eea: import java.io.File;
1:c573eea: import java.io.FileWriter;
1:c573eea: import java.io.IOException;
1:c573eea: import java.net.MalformedURLException;
1:c573eea: import java.net.URL;
1:c573eea: import java.net.URLClassLoader;
1:c3177de: import java.util.List;
1:c573eea: import java.util.Map;
1:c573eea: 
1:cee3393: import org.apache.aries.util.manifest.BundleManifest;
1:cee3393: import org.apache.aries.versioning.check.BundleCompatibility;
1:cee3393: import org.apache.aries.versioning.check.BundleInfo;
1:c3c5192: import org.apache.aries.versioning.check.VersionChange;
1:417a21a: import org.apache.maven.artifact.Artifact;
1:417a21a: import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;
1:417a21a: import org.apache.maven.execution.MavenSession;
1:cee3393: import org.apache.maven.plugin.AbstractMojo;
1:cee3393: import org.apache.maven.plugin.MojoExecutionException;
1:417a21a: import org.apache.maven.plugins.annotations.Component;
1:417a21a: import org.apache.maven.plugins.annotations.LifecyclePhase;
1:417a21a: import org.apache.maven.plugins.annotations.Mojo;
1:417a21a: import org.apache.maven.plugins.annotations.Parameter;
1:417a21a: import org.apache.maven.project.MavenProject;
1:417a21a: import org.apache.maven.repository.RepositorySystem;
1:ceb8f07: import org.osgi.framework.Version;
1:274c21b: 
8:c573eea: /**
1:417a21a:  * Check semantic version changes between an explicitly named old artifact and
1:417a21a:  * the project output artifact. Optionally write packageinfo files for wrong
1:417a21a:  * package versions.
1:c573eea:  */
1:417a21a: @Mojo(name = "version-check", defaultPhase = LifecyclePhase.VERIFY)
1:417a21a: public class VersionCheckerMojo extends AbstractMojo {
1:c3c5192: 
1:417a21a:     /**
1:417a21a:      * name of old artifact in
1:417a21a:      * groupId:artifactId[:extension[:classifier]]:version notation
1:417a21a:      */
1:3b6e4b4:     @Parameter(property="aries.oldArtifact")
1:417a21a:     private String oldArtifact;
1:91d658b:     
1:91d658b:     @Parameter(property="aries.skip.version.check", defaultValue = "false")
1:91d658b:     private boolean skip;
1:274c21b: 
1:417a21a:     /**
1:ceb8f07:      * Location of the file (defaults to main project artifact).
1:417a21a:      */
1:ceb8f07:     @Parameter
1:417a21a:     private File newFile;
1:c3c5192: 
1:417a21a:     /**
1:417a21a:      * whether to write packageinfo files into source tree
1:417a21a:      */
1:417a21a:     @Parameter(property="writePackageInfos", defaultValue="false")
1:417a21a:     private boolean writePackageinfos = false;
1:c573eea: 
1:417a21a:     /**
1:417a21a:      * source tree location
1:417a21a:      */
1:417a21a:     @Parameter(defaultValue="${project.basedir}/src/main/java")
1:417a21a:     private File source;
1:c573eea: 
1:c3177de:     @Parameter
1:c3177de:     private List<String> excludes;
1:c3177de:     
1:417a21a:     @Component
1:417a21a:     private RepositorySystem repository;
1:417a21a:     
1:417a21a:     @Component
1:417a21a:     protected MavenProject project;
1:417a21a:     
1:417a21a:     @Component
1:417a21a:     private MavenSession session;
1:417a21a:     
1:417a21a:     public void execute() throws MojoExecutionException {
1:91d658b:         if (skip) {
1:91d658b:             return;
1:91d658b:         }
1:91d658b:         if ("pom".equals(project.getPackaging())) {
1:91d658b:             return;
1:91d658b:         }
1:ceb8f07:         if (newFile == null) {
1:ceb8f07:             newFile = project.getArtifact().getFile();
1:ceb8f07:         }
1:417a21a:         if (oldArtifact != null) {
1:417a21a:             try {
1:417a21a:                 BundleInfo newBundle = getBundleInfo(newFile);
1:e5b9f1e:                 if (newBundle == null || newBundle.getBundleManifest() == null) {
1:e5b9f1e:                     //not a bundle type, just return
1:e5b9f1e:                     getLog().info(newFile + " is not an OSGi bundle, skipping.");
1:e5b9f1e:                     return;
1:e5b9f1e:                 }
1:ceb8f07:                 if (null == newBundle.getBundleManifest().getManifestVersion()
1:ceb8f07:                     && null == newBundle.getBundleManifest().getSymbolicName()
1:ceb8f07:                     && Version.emptyVersion.equals(newBundle.getBundleManifest().getVersion())) {
1:ceb8f07:                     //not a bundle type, just return
1:ceb8f07:                     getLog().info(newFile + " is not an OSGi bundle, skipping.");
1:ceb8f07:                     return;
1:ceb8f07:                 }
1:ceb8f07: 
1:ceb8f07:                 BundleInfo oldBundle = getBundleInfo(resolve(oldArtifact));
1:417a21a:                 String bundleSymbolicName = newBundle.getBundleManifest().getSymbolicName();
1:417a21a:                 URLClassLoader oldClassLoader = new URLClassLoader(new URL[] {oldBundle.getBundle().toURI()
1:417a21a:                     .toURL()});
1:417a21a:                 URLClassLoader newClassLoader = new URLClassLoader(new URL[] {newBundle.getBundle().toURI()
1:417a21a:                     .toURL()});
1:417a21a:                 BundleCompatibility bundleCompatibility = new BundleCompatibility(bundleSymbolicName,
1:417a21a:                                                                                   newBundle, oldBundle,
1:417a21a:                                                                                   oldClassLoader,
1:c3177de:                                                                                   newClassLoader,
1:c3177de:                                                                                   excludes);
1:417a21a:                 bundleCompatibility.invoke();
1:417a21a:                 String bundleElement = bundleCompatibility.getBundleElement();
1:417a21a:                 String pkgElement = bundleCompatibility.getPkgElements().toString();
1:417a21a:                 
1:417a21a:                 boolean failed = false;
1:417a21a:                 if ((bundleElement != null) && (bundleElement.trim().length() > 0)) {
1:417a21a:                     getLog().error(bundleElement + "\r\n");
1:417a21a:                     failed = true;
1:417a21a:                 }
1:417a21a:                 if ((pkgElement != null) && (pkgElement.trim().length() > 0)) {
1:417a21a:                     getLog().error(pkgElement);
1:417a21a:                     failed = true;
1:417a21a:                 }
1:c573eea: 
1:417a21a:                 if (writePackageinfos) {
1:417a21a:                     writePackageInfos(bundleCompatibility);
1:417a21a:                 }
1:417a21a:                 if (failed) {
1:417a21a:                     throw new RuntimeException("Semantic Versioning incorrect");
1:417a21a:                 } else {
1:417a21a:                     getLog().info("All package or bundle versions are semanticly versioned correctly.");
1:417a21a:                 }
1:417a21a:             } catch (MalformedURLException e) {
1:417a21a:                 throw new MojoExecutionException("Problem analyzing sources");
1:417a21a:             } catch (IOException e) {
1:417a21a:                 throw new MojoExecutionException("Problem analyzing sources");
1:417a21a:             }
10:c573eea:         }
1:c573eea:     }
1:c573eea: 
1:417a21a:     private void writePackageInfos(BundleCompatibility bundleCompatibility) {
1:417a21a:         Map<String, VersionChange> packages = bundleCompatibility.getPackageChanges();
1:417a21a:         for (Map.Entry<String, VersionChange> packageChange : packages.entrySet()) {
1:417a21a:             VersionChange versionChange = packageChange.getValue();
1:417a21a:             if (!versionChange.isCorrect()) {
1:417a21a:                 String packageName = packageChange.getKey();
1:417a21a:                 String[] bits = packageName.split("\\.");
1:417a21a:                 File packageInfo = source;
1:417a21a:                 for (String bit : bits) {
1:417a21a:                     packageInfo = new File(packageInfo, bit);
1:417a21a:                 }
1:417a21a:                 packageInfo.mkdirs();
1:417a21a:                 packageInfo = new File(packageInfo, "packageinfo");
1:417a21a:                 try {
1:417a21a:                     FileWriter w = new FileWriter(packageInfo);
1:417a21a:                     try {
1:417a21a:                         w.append("# generated by Apache Aries semantic versioning tool\n");
1:417a21a:                         w.append("version " + versionChange.getRecommendedNewVersion().toString() + "\n");
1:417a21a:                         w.flush();
1:417a21a:                     } finally {
1:417a21a:                         w.close();
1:417a21a:                     }
1:417a21a:                 } catch (IOException e) {
1:417a21a:                     getLog().error("Could not write packageinfo for package " + packageName, e);
1:417a21a:                 }
1:417a21a:             }
1:417a21a:         }
1:417a21a:     }
1:c573eea: 
1:417a21a:     private File resolve(String artifactDescriptor) {
1:417a21a:         String[] s = artifactDescriptor.split(":");
1:417a21a: 
1:417a21a:         String type = (s.length >= 4 ? s[3] : "jar");
1:417a21a:         Artifact artifact = repository.createArtifact(s[0], s[1], s[2], type);
1:417a21a: 
1:417a21a:         ArtifactResolutionRequest request = new ArtifactResolutionRequest();
1:417a21a:         request.setArtifact(artifact);
1:417a21a:         
1:417a21a:         request.setResolveRoot(true).setResolveTransitively(false);
1:417a21a:         request.setServers( session.getRequest().getServers() );
1:417a21a:         request.setMirrors( session.getRequest().getMirrors() );
1:417a21a:         request.setProxies( session.getRequest().getProxies() );
1:417a21a:         request.setLocalRepository(session.getLocalRepository());
1:417a21a:         request.setRemoteRepositories(session.getRequest().getRemoteRepositories());
1:417a21a:         repository.resolve(request);
1:417a21a:         return artifact.getFile();
1:417a21a:     }
1:417a21a: 
1:417a21a:     private BundleInfo getBundleInfo(File f) {
1:417a21a:         BundleManifest bundleManifest = BundleManifest.fromBundle(f);
1:417a21a:         return new BundleInfo(bundleManifest, f);
1:417a21a:     }
1:c573eea: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:c3177de
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     @Parameter
1:     private List<String> excludes;
1:     
/////////////////////////////////////////////////////////////////////////
1:                                                                                   newClassLoader,
1:                                                                                   excludes);
commit:22a1793
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:e5b9f1e
/////////////////////////////////////////////////////////////////////////
1:                 if (newBundle == null || newBundle.getBundleManifest() == null) {
1:                     //not a bundle type, just return
1:                     getLog().info(newFile + " is not an OSGi bundle, skipping.");
1:                     return;
1:                 }
commit:ceb8f07
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Version;
/////////////////////////////////////////////////////////////////////////
1:      * Location of the file (defaults to main project artifact).
1:     @Parameter
/////////////////////////////////////////////////////////////////////////
1:         if (newFile == null) {
1:             newFile = project.getArtifact().getFile();
1:         }
1:                 if (null == newBundle.getBundleManifest().getManifestVersion()
1:                     && null == newBundle.getBundleManifest().getSymbolicName()
1:                     && Version.emptyVersion.equals(newBundle.getBundleManifest().getVersion())) {
1:                     //not a bundle type, just return
1:                     getLog().info(newFile + " is not an OSGi bundle, skipping.");
1:                     return;
1:                 }
1: 
1:                 BundleInfo oldBundle = getBundleInfo(resolve(oldArtifact));
commit:91d658b
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Parameter(property="aries.skip.version.check", defaultValue = "false")
1:     private boolean skip;
/////////////////////////////////////////////////////////////////////////
1:         if (skip) {
1:             return;
1:         }
1:         if ("pom".equals(project.getPackaging())) {
1:             return;
1:         }
commit:3b6e4b4
/////////////////////////////////////////////////////////////////////////
1:     @Parameter(property="aries.oldArtifact")
commit:417a21a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.maven.artifact.Artifact;
1: import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;
1: import org.apache.maven.execution.MavenSession;
1: import org.apache.maven.plugins.annotations.Component;
1: import org.apache.maven.plugins.annotations.LifecyclePhase;
1: import org.apache.maven.plugins.annotations.Mojo;
1: import org.apache.maven.plugins.annotations.Parameter;
1: import org.apache.maven.project.MavenProject;
1: import org.apache.maven.repository.RepositorySystem;
1:  * Check semantic version changes between an explicitly named old artifact and
1:  * the project output artifact. Optionally write packageinfo files for wrong
1:  * package versions.
1: @Mojo(name = "version-check", defaultPhase = LifecyclePhase.VERIFY)
1: public class VersionCheckerMojo extends AbstractMojo {
1:     /**
1:      * name of old artifact in
1:      * groupId:artifactId[:extension[:classifier]]:version notation
1:      */
0:     @Parameter(defaultValue="${oldArtifact")
1:     private String oldArtifact;
1:     /**
0:      * Location of the file.
1:      */
0:     @Parameter(required = true, defaultValue = "${project.build.directory}/${project.build.finalName}.jar")
1:     private File newFile;
1:     /**
1:      * whether to write packageinfo files into source tree
1:      */
1:     @Parameter(property="writePackageInfos", defaultValue="false")
1:     private boolean writePackageinfos = false;
1:     /**
1:      * source tree location
1:      */
1:     @Parameter(defaultValue="${project.basedir}/src/main/java")
1:     private File source;
1:     @Component
1:     private RepositorySystem repository;
1:     
1:     @Component
1:     protected MavenProject project;
1:     
1:     @Component
1:     private MavenSession session;
1:     
1:     public void execute() throws MojoExecutionException {
1:         if (oldArtifact != null) {
1:             try {
0:                 BundleInfo oldBundle = getBundleInfo(resolve(oldArtifact));
1:                 BundleInfo newBundle = getBundleInfo(newFile);
1:                 String bundleSymbolicName = newBundle.getBundleManifest().getSymbolicName();
1:                 URLClassLoader oldClassLoader = new URLClassLoader(new URL[] {oldBundle.getBundle().toURI()
1:                     .toURL()});
1:                 URLClassLoader newClassLoader = new URLClassLoader(new URL[] {newBundle.getBundle().toURI()
1:                     .toURL()});
1:                 BundleCompatibility bundleCompatibility = new BundleCompatibility(bundleSymbolicName,
1:                                                                                   newBundle, oldBundle,
1:                                                                                   oldClassLoader,
0:                                                                                   newClassLoader);
1:                 bundleCompatibility.invoke();
1:                 String bundleElement = bundleCompatibility.getBundleElement();
1:                 String pkgElement = bundleCompatibility.getPkgElements().toString();
1:                 
1:                 boolean failed = false;
1:                 if ((bundleElement != null) && (bundleElement.trim().length() > 0)) {
1:                     getLog().error(bundleElement + "\r\n");
1:                     failed = true;
1:                 }
1:                 if ((pkgElement != null) && (pkgElement.trim().length() > 0)) {
1:                     getLog().error(pkgElement);
1:                     failed = true;
1:                 }
1:                 if (writePackageinfos) {
1:                     writePackageInfos(bundleCompatibility);
1:                 }
1:                 if (failed) {
1:                     throw new RuntimeException("Semantic Versioning incorrect");
1:                 } else {
1:                     getLog().info("All package or bundle versions are semanticly versioned correctly.");
1:                 }
1:             } catch (MalformedURLException e) {
1:                 throw new MojoExecutionException("Problem analyzing sources");
1:             } catch (IOException e) {
1:                 throw new MojoExecutionException("Problem analyzing sources");
1:             }
1:     private void writePackageInfos(BundleCompatibility bundleCompatibility) {
1:         Map<String, VersionChange> packages = bundleCompatibility.getPackageChanges();
1:         for (Map.Entry<String, VersionChange> packageChange : packages.entrySet()) {
1:             VersionChange versionChange = packageChange.getValue();
1:             if (!versionChange.isCorrect()) {
1:                 String packageName = packageChange.getKey();
1:                 String[] bits = packageName.split("\\.");
1:                 File packageInfo = source;
1:                 for (String bit : bits) {
1:                     packageInfo = new File(packageInfo, bit);
1:                 }
1:                 packageInfo.mkdirs();
1:                 packageInfo = new File(packageInfo, "packageinfo");
1:                 try {
1:                     FileWriter w = new FileWriter(packageInfo);
1:                     try {
1:                         w.append("# generated by Apache Aries semantic versioning tool\n");
1:                         w.append("version " + versionChange.getRecommendedNewVersion().toString() + "\n");
1:                         w.flush();
1:                     } finally {
1:                         w.close();
1:                     }
1:                 } catch (IOException e) {
1:                     getLog().error("Could not write packageinfo for package " + packageName, e);
1:                 }
1:             }
1:         }
1:     }
1:     private File resolve(String artifactDescriptor) {
1:         String[] s = artifactDescriptor.split(":");
1: 
1:         String type = (s.length >= 4 ? s[3] : "jar");
1:         Artifact artifact = repository.createArtifact(s[0], s[1], s[2], type);
1: 
1:         ArtifactResolutionRequest request = new ArtifactResolutionRequest();
1:         request.setArtifact(artifact);
1:         
1:         request.setResolveRoot(true).setResolveTransitively(false);
1:         request.setServers( session.getRequest().getServers() );
1:         request.setMirrors( session.getRequest().getMirrors() );
1:         request.setProxies( session.getRequest().getProxies() );
1:         request.setLocalRepository(session.getLocalRepository());
1:         request.setRemoteRepositories(session.getRequest().getRemoteRepositories());
1:         repository.resolve(request);
1:         return artifact.getFile();
1:     }
1: 
1:     private BundleInfo getBundleInfo(File f) {
1:         BundleManifest bundleManifest = BundleManifest.fromBundle(f);
1:         return new BundleInfo(bundleManifest, f);
1:     }
commit:6cd1656
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.aether.RepositorySystem;
0: import org.eclipse.aether.RepositorySystemSession;
0: import org.eclipse.aether.artifact.Artifact;
0: import org.eclipse.aether.artifact.DefaultArtifact;
0: import org.eclipse.aether.repository.RemoteRepository;
0: import org.eclipse.aether.resolution.ArtifactRequest;
0: import org.eclipse.aether.resolution.ArtifactResult;
/////////////////////////////////////////////////////////////////////////
0:     } catch (org.eclipse.aether.resolution.ArtifactResolutionException e) {
author:Emily Jiang
-------------------------------------------------------------------------------
commit:10d1a6c
/////////////////////////////////////////////////////////////////////////
0:         if ((bundleElement != null) && (bundleElement.trim().length() >0)){
0:         if ((pkgElement != null) && (pkgElement.trim().length() >0 )) {
commit:c573eea
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.net.URLClassLoader;
0: import java.util.List;
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: extends AbstractMojo
1:   /**
0:    * name of old artifact in <groupId>:<artifactId>[:<extension>[:<classifier>]]:<version> notation
0:    * @parameter expression="${oldArtifact}"
1:    */
0:   private String oldArtifact;
0:   //    * @parameter expression="${project.artifact.file}"
1:   /**
0:    * Location of the file.
0:    * @parameter expression="${project.build.directory}/${project.build.finalName}.jar"
0:    * @required
1:    */
0:   private File newFile;
1:   /**
0:    * whether to write packageinfo files into source tree
0:    * @parameter expression="${writePackageInfos}" default-value="false"
1:    */
0:   private boolean writePackageinfos = false;
1:   /**
0:    * source tree location
0:    * @parameter expression="${project.basedir}/src/main/java"
1:    */
0:   private File source;
1:   /**
0:    * The entry point to Aether, i.e. the component doing all the work.
1:    *
0:    * @component
0:    * @required
0:    * @readonly
1:    */
0:   private RepositorySystem repoSystem;
1:   /**
0:    * The current repository/network configuration of Maven.
1:    *
0:    * @parameter default-value="${repositorySystemSession}"
0:    * @required
0:    * @readonly
1:    */
0:   private RepositorySystemSession repoSession;
1:   /**
0:    * The project's remote repositories to use for the resolution of project dependencies.
1:    *
0:    * @parameter default-value="${project.remoteProjectRepositories}"
0:    * @readonly
1:    */
0:   private List<RemoteRepository> projectRepos;
1:   /**
0:    * The project's remote repositories to use for the resolution of plugins and their dependencies.
1:    *
0:    * @parameter default-value="${project.remotePluginRepositories}"
0:    * @required
0:    * @readonly
1:    */
0:   private List<RemoteRepository> pluginRepos;
0:   public void execute()
0:   throws MojoExecutionException
0:   {
0:     if (oldArtifact != null) {
0:       try {
0:         BundleInfo oldBundle = getBundleInfo(resolve(oldArtifact));
0:         BundleInfo newBundle = getBundleInfo(newFile);
0:         String bundleSymbolicName = newBundle.getBundleManifest().getSymbolicName();
0:         URLClassLoader oldClassLoader = new URLClassLoader(new URL[] {oldBundle.getBundle().toURI().toURL()});
0:         URLClassLoader newClassLoader = new URLClassLoader(new URL[] {newBundle.getBundle().toURI().toURL()});
0:         BundleCompatibility bundleCompatibility = new BundleCompatibility(bundleSymbolicName, newBundle, oldBundle, oldClassLoader, newClassLoader);
0:         bundleCompatibility.invoke();
0:         String bundleElement = bundleCompatibility.getBundleElement();
0:         String pkgElement = bundleCompatibility.getPkgElements().toString();
0:         boolean failed = false;
0:         if (bundleElement.trim().length() >0){
0:           getLog().error(bundleElement + "\r\n");
0:           failed = true;
0:         if (pkgElement.trim().length() >0 ) {
0:           getLog().error(pkgElement);
0:           failed = true;
1: 
0:         if (writePackageinfos) {
0:           writePackageInfos(bundleCompatibility);
1:         }
0:         if (failed){
0:           throw new RuntimeException ("Semantic Versioning incorrect");
0:         } else {
0:           getLog().info("All package or bundle versions are semanticly versioned correctly.");
1:         }
0:       } catch (MalformedURLException e) {
0:         throw new MojoExecutionException("Problem analyzing sources");
0:       } catch (IOException e) {
0:         throw new MojoExecutionException("Problem analyzing sources");
1:       }
1:   }
0:   private void writePackageInfos(BundleCompatibility bundleCompatibility) {
0:     Map<String, VersionChange> packages = bundleCompatibility.getPackageChanges();
0:     for (Map.Entry<String, VersionChange> packageChange: packages.entrySet()) {
0:       VersionChange versionChange = packageChange.getValue();
0:       if (!versionChange.isCorrect()) {
0:         String packageName = packageChange.getKey();
0:         String[] bits = packageName.split("\\.");
0:         File packageInfo = source;
0:         for (String bit: bits) {
0:           packageInfo = new File(packageInfo, bit);
1:         }
0:         packageInfo.mkdirs();
0:         packageInfo = new File(packageInfo, "packageinfo");
0:           FileWriter w = new FileWriter(packageInfo);
0:           try {
0:             w.append("# generated by Apache Aries semantic versioning tool\n");
0:             w.append("version " + versionChange.getRecommendedNewVersion().toString() + "\n");
0:             w.flush();
0:           } finally {
0:             w.close();
1:           }
0:         } catch (IOException e) {
0:           getLog().error("Could not write packageinfo for package " + packageName, e);
1:       }
1:     }
1:   }
0:   private File resolve(String oldArtifact) {
0:     Artifact artifact = new DefaultArtifact(oldArtifact);
0:     return resolve(artifact);
1:   }
1: 
0:   private File resolve(Artifact artifact) {
0:     ArtifactRequest request = new ArtifactRequest();
0:     request.setArtifact(artifact);
0:     request.setRepositories(projectRepos);
1: 
0:     getLog().debug("Resolving artifact " + artifact +
0:         " from " + projectRepos);
1: 
0:     ArtifactResult result;
0:     try {
0:       result = repoSystem.resolveArtifact(repoSession, request);
0:     } catch (org.sonatype.aether.resolution.ArtifactResolutionException e) {
0:       getLog().warn("could not resolve " + artifact, e);
0:       return null;
0:     getLog().debug("Resolved artifact " + artifact + " to " +
0:         result.getArtifact().getFile() + " from "
0:         + result.getRepository());
0:     return result.getArtifact().getFile();
1:   }
1: 
0:   private BundleInfo getBundleInfo(File f) {
0:     BundleManifest bundleManifest = BundleManifest.fromBundle(f);
0:     return new BundleInfo(bundleManifest, f);
1:   }
author:David Jencks
-------------------------------------------------------------------------------
commit:a1cfeee
/////////////////////////////////////////////////////////////////////////
0:  * Check semantic version changes between an explicitly named old artifact and the project output artifact.
0:  * Optionally write packageinfo files for wrong package versions.
0:  * @phase verify
/////////////////////////////////////////////////////////////////////////
0:      * @parameter expression="${oldArtifact}"
0: //    * @parameter expression="${project.artifact.file}"
0:      * @parameter expression="${project.build.directory}/${project.build.finalName}.jar"
0:      * @parameter expression="${writePackageInfos}" default-value="true"
/////////////////////////////////////////////////////////////////////////
0:         if (oldArtifact != null) {
0:             try {
0:                 BundleInfo oldBundle = getBundleInfo(resolve(oldArtifact));
0:                 BundleInfo newBundle = getBundleInfo(newFile);
0:                 String bundleSymbolicName = newBundle.getBundleManifest().getSymbolicName();
0:                 URLClassLoader oldClassLoader = new URLClassLoader(new URL[] {oldBundle.getBundle().toURI().toURL()});
0:                 URLClassLoader newClassLoader = new URLClassLoader(new URL[] {newBundle.getBundle().toURI().toURL()});
0:                 BundleCompatibility bundleCompatibility = new BundleCompatibility(bundleSymbolicName, newBundle, oldBundle, oldClassLoader, newClassLoader);
0:                 bundleCompatibility.invoke();
0:                 getLog().info(bundleCompatibility.getBundleElement());
0:                 getLog().info(bundleCompatibility.getPkgElements());
0:                 if (writePackageinfos) {
0:                     writePackageInfos(bundleCompatibility);
0:                 }
0:             } catch (MalformedURLException e) {
0:                 throw new MojoExecutionException("Problem analyzing sources");
0:             } catch (IOException e) {
0:                 throw new MojoExecutionException("Problem analyzing sources");
commit:c3c5192
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.versioning.check.VersionChange;
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      * whether to write packageinfo files into source tree
0:      * @parameter
0:      */
0:     private boolean writePackageinfos = true;
1: 
0:     /**
0:      * source tree location
0:      * @parameter expression="${project.basedir}/src/main/java"
0:      */
0:     private File source;
1: 
0:     /**
/////////////////////////////////////////////////////////////////////////
0:             if (writePackageinfos) {
0:                 writePackageInfos(bundleCompatibility);
0:             }
/////////////////////////////////////////////////////////////////////////
0:     private void writePackageInfos(BundleCompatibility bundleCompatibility) {
0:         Map<String, VersionChange> packages = bundleCompatibility.getPackageChanges();
0:         for (Map.Entry<String, VersionChange> packageChange: packages.entrySet()) {
0:             VersionChange versionChange = packageChange.getValue();
0:             if (!versionChange.isCorrect()) {
0:                 String packageName = packageChange.getKey();
0:                 String[] bits = packageName.split("\\.");
0:                 File packageInfo = source;
0:                 for (String bit: bits) {
0:                     packageInfo = new File(packageInfo, bit);
0:                 }
0:                 packageInfo.mkdirs();
0:                 packageInfo = new File(packageInfo, "packageinfo");
0:                 try {
0:                     FileWriter w = new FileWriter(packageInfo);
0:                     try {
0:                         w.append("# generated by Apache Aries semantic versioning tool\n");
0:                         w.append("version " + versionChange.getRecommendedNewVersion().toString() + "\n");
0:                         w.flush();
0:                     } finally {
0:                         w.close();
0:                     }
0:                 } catch (IOException e) {
0:                     getLog().error("Could not write packageinfo for package " + packageName, e);
0:                 }
0:             }
0:         }
0:     }
1: 
commit:274c21b
/////////////////////////////////////////////////////////////////////////
0: import org.sonatype.aether.RepositorySystem;
0: import org.sonatype.aether.RepositorySystemSession;
0: import org.sonatype.aether.artifact.Artifact;
0: import org.sonatype.aether.repository.RemoteRepository;
0: import org.sonatype.aether.resolution.ArtifactRequest;
0: import org.sonatype.aether.resolution.ArtifactResult;
0: import org.sonatype.aether.util.artifact.DefaultArtifact;
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: //    /**
0: //     * Location of the file.
0: //     * @parameter expression="${project.build.directory}/classes"
0: //     * @required
0: //     */
0: //    private File oldFile;
1: 
0:      * name of old artifact in <groupId>:<artifactId>[:<extension>[:<classifier>]]:<version> notation
0:      * @parameter
0:     private String oldArtifact;
1: 
0:      * @parameter expression="${project.artifact.file}"
0:     /**
0:      * The entry point to Aether, i.e. the component doing all the work.
0:      *
0:      * @component
0:      * @required
0:      * @readonly
0:      */
0:     private RepositorySystem repoSystem;
1: 
0:     /**
0:      * The current repository/network configuration of Maven.
0:      *
0:      * @parameter default-value="${repositorySystemSession}"
0:      * @required
0:      * @readonly
0:      */
0:     private RepositorySystemSession repoSession;
1: 
0:     /**
0:      * The project's remote repositories to use for the resolution of project dependencies.
0:      *
0:      * @parameter default-value="${project.remoteProjectRepositories}"
0:      * @readonly
0:      */
0:     private List<RemoteRepository> projectRepos;
1: 
0:     /**
0:      * The project's remote repositories to use for the resolution of plugins and their dependencies.
0:      *
0:      * @parameter default-value="${project.remotePluginRepositories}"
0:      * @required
0:      * @readonly
0:      */
0:     private List<RemoteRepository> pluginRepos;
1: 
1: 
1: 
0:             BundleInfo oldBundle = getBundleInfo(resolve(oldArtifact));
/////////////////////////////////////////////////////////////////////////
0:     }
0:     private File resolve(String oldArtifact) {
0:         Artifact artifact = new DefaultArtifact(oldArtifact);
0:         return resolve(artifact);
0:     }
0:     private File resolve(Artifact artifact) {
0:         ArtifactRequest request = new ArtifactRequest();
0:         request.setArtifact(artifact);
0:         request.setRepositories(projectRepos);
0: 
0:         getLog().debug("Resolving artifact " + artifact +
0:                 " from " + projectRepos);
0: 
0:         ArtifactResult result;
0:         try {
0:             result = repoSystem.resolveArtifact(repoSession, request);
0:         } catch (org.sonatype.aether.resolution.ArtifactResolutionException e) {
0:             getLog().warn("could not resolve " + artifact, e);
0:             return null;
0:         }
0: 
0:         getLog().debug("Resolved artifact " + artifact + " to " +
0:                 result.getArtifact().getFile() + " from "
0:                 + result.getRepository());
0:         return result.getArtifact().getFile();
commit:cee3393
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 20012 The Apache Software Foundation.
0:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
0: 
1: package org.apache.aries.versioning.mojo;
0: 
1: import org.apache.aries.util.manifest.BundleManifest;
1: import org.apache.aries.versioning.check.BundleCompatibility;
1: import org.apache.aries.versioning.check.BundleInfo;
1: import org.apache.maven.plugin.AbstractMojo;
1: import org.apache.maven.plugin.MojoExecutionException;
0: 
0: import java.io.File;
0: import java.io.FileWriter;
0: import java.io.IOException;
0: import java.net.MalformedURLException;
0: import java.net.URL;
0: import java.net.URLClassLoader;
0: 
0: /**
0:  * Goal which touches a timestamp file.
0:  *
0:  * @goal version-check
0:  * 
0:  * @phase install
0:  */
0: public class VersionCheckerMojo
0:     extends AbstractMojo
0: {
0:     /**
0:      * Location of the file.
0:      * @parameter expression="${project.build.directory}/classes"
0:      * @required
0:      */
0:     private File oldFile;
0:     /**
0:      * Location of the file.
0:      * @parameter expression="${project.build.directory}/classes"
0:      * @required
0:      */
0:     private File newFile;
0: 
0:     public void execute()
0:         throws MojoExecutionException
0:     {
0:         try {
0:             BundleInfo oldBundle = getBundleInfo(oldFile);
0:             BundleInfo newBundle = getBundleInfo(newFile);
0:             String bundleSymbolicName = newBundle.getBundleManifest().getSymbolicName();
0:             URLClassLoader oldClassLoader = new URLClassLoader(new URL[] {oldBundle.getBundle().toURI().toURL()});
0:             URLClassLoader newClassLoader = new URLClassLoader(new URL[] {newBundle.getBundle().toURI().toURL()});
0:             BundleCompatibility bundleCompatibility = new BundleCompatibility(bundleSymbolicName, newBundle, oldBundle, oldClassLoader, newClassLoader);
0:             bundleCompatibility.invoke();
0:             getLog().info(bundleCompatibility.getBundleElement());
0:             getLog().info(bundleCompatibility.getPkgElements());
0:         } catch (MalformedURLException e) {
0: 
0:         } catch (IOException e) {
0: 
0:         }
0: 
0: 
0:     }
0: 
0:     private BundleInfo getBundleInfo(File f) {
0:         BundleManifest bundleManifest = BundleManifest.fromBundle(f);
0:         return new BundleInfo(bundleManifest, f);
0:     }
0: }
============================================================================