1:f13c6ac: /**
1:f13c6ac:  *
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.container;
1:f13c6ac: 
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Collection;
1:f13c6ac: import java.util.Iterator;
1:f13c6ac: import java.util.LinkedHashMap;
1:f13c6ac: import java.util.LinkedList;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.di.CircularDependencyException;
1:6414875: import org.apache.aries.blueprint.di.Recipe;
1:6414875: import org.apache.aries.blueprint.di.RefRecipe;
1:f13c6ac: import org.osgi.service.blueprint.container.NoSuchComponentException;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: public class DependencyGraph {
1:f13c6ac: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(DependencyGraph.class);
1:f13c6ac: 
1:f13c6ac:     private BlueprintRepository repository;
1:f13c6ac:     
1:f13c6ac:     public DependencyGraph(BlueprintRepository repository) {
1:f13c6ac:         this.repository = repository;        
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public LinkedHashMap<String, Recipe> getSortedRecipes(Collection<String> names) {
1:f13c6ac:         // construct the graph
1:f13c6ac:         Map<String, Node> nodes = new LinkedHashMap<String, Node>();
1:f13c6ac:         for (String name : names) {
1:f13c6ac:             Object object = repository.getObject(name);
1:f13c6ac:             if (object == null) {
1:f13c6ac:                 throw new NoSuchComponentException(name);
1:f13c6ac:             }
1:f13c6ac:             if (object instanceof Recipe) {
1:f13c6ac:                 Recipe recipe = (Recipe) object;
1:f13c6ac:                 if (!recipe.getName().equals(name)) {
1:f13c6ac:                     throw new RuntimeException("Recipe '" + name + "' returned from the repository has name '" + name + "'");
1:f13c6ac:                 }
1:f13c6ac:                 createNode(name, recipe,  nodes);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         // find all initial leaf nodes (and islands)
1:f13c6ac:         List<Node> sortedNodes = new ArrayList<Node>(nodes.size());
1:f13c6ac:         LinkedList<Node> leafNodes = new LinkedList<Node>();
1:f13c6ac:         for (Node n : nodes.values()) {
1:f13c6ac:             if (n.referenceCount == 0) {
1:f13c6ac:                 // if the node is totally isolated (no in or out refs),
1:f13c6ac:                 // move it directly to the finished list, so they are first
1:f13c6ac:                 if (n.references.size() == 0) {
1:f13c6ac:                     sortedNodes.add(n);
1:f13c6ac:                 } else {
1:f13c6ac:                     leafNodes.add(n);
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         // pluck the leaves until there are no leaves remaining
1:f13c6ac:         while (!leafNodes.isEmpty()) {
1:f13c6ac:             Node node = leafNodes.removeFirst();
1:f13c6ac:             sortedNodes.add(node);
1:f13c6ac:             for (Node ref : node.references) {
1:f13c6ac:                 ref.referenceCount--;
1:f13c6ac:                 if (ref.referenceCount == 0) {
1:f13c6ac:                     leafNodes.add(ref);
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         // There are no more leaves so if there are there still
1:f13c6ac:         // unprocessed nodes in the graph, we have one or more curcuits
1:f13c6ac:         if (sortedNodes.size() != nodes.size()) {
1:f13c6ac:             findCircuit(nodes.values().iterator().next(), new ArrayList<Recipe>(nodes.size()));
1:f13c6ac:             // find circuit should never fail, if it does there is a programming error
1:f13c6ac:             throw new RuntimeException("Internal Error: expected a CircularDependencyException");
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         // return the recipes
1:f13c6ac:         LinkedHashMap<String, Recipe> sortedRecipes = new LinkedHashMap<String, Recipe>();
1:f13c6ac:         for (Node node : sortedNodes) {
1:f13c6ac:             sortedRecipes.put(node.name, node.recipe);
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         return sortedRecipes;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private void findCircuit(Node node, ArrayList<Recipe> stack) {
1:f13c6ac:         if (stack.contains(node.recipe)) {
1:f13c6ac:             ArrayList<Recipe> circularity = new ArrayList<Recipe>(stack.subList(stack.indexOf(node.recipe), stack.size()));
1:f13c6ac: 
1:f13c6ac:             // remove anonymous nodes from circularity list
1:f13c6ac:             for (Iterator<Recipe> iterator = circularity.iterator(); iterator.hasNext();) {
1:f13c6ac:                 Recipe recipe = iterator.next();
1:f13c6ac:                 if (recipe != node.recipe && recipe.getName() == null) {
1:f13c6ac:                     iterator.remove();
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac: 
1:f13c6ac:             // add ending node to list so a full circuit is shown
1:f13c6ac:             circularity.add(node.recipe);
1:f13c6ac:             
1:f13c6ac:             throw new CircularDependencyException(circularity);
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         stack.add(node.recipe);
1:f13c6ac:         for (Node reference : node.references) {
1:f13c6ac:             findCircuit(reference, stack);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private Node createNode(String name, Recipe recipe, Map<String, Node> nodes) {
1:f13c6ac:         // if node already exists, verify that the exact same recipe instnace is used for both
1:f13c6ac:         if (nodes.containsKey(name)) {
1:f13c6ac:             Node node = nodes.get(name);
1:f13c6ac:             if (node.recipe != recipe) {
1:f13c6ac:                 throw new RuntimeException("The name '" + name +"' is assigned to multiple recipies");
1:f13c6ac:             }
1:f13c6ac:             return node;
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:         // create the node
1:f13c6ac:         Node node = new Node();
1:f13c6ac:         node.name = name;
1:f13c6ac:         node.recipe = recipe;
1:f13c6ac:         nodes.put(name, node);
1:f13c6ac: 
1:f13c6ac:         // link in the references
1:f13c6ac:         LinkedList<Recipe> constructorRecipes = new LinkedList<Recipe>(recipe.getConstructorDependencies());
1:f13c6ac:         while (!constructorRecipes.isEmpty()) {
1:f13c6ac:             Recipe nestedRecipe = constructorRecipes.removeFirst();            
1:f13c6ac:             if (nestedRecipe instanceof RefRecipe) {
1:f13c6ac:                 nestedRecipe =  nestedRecipe.getDependencies().get(0);
1:f13c6ac:                 String nestedName = nestedRecipe.getName();
1:f13c6ac:                 Node nestedNode = createNode(nestedName, nestedRecipe, nodes);
1:f13c6ac:                 node.referenceCount++;
1:f13c6ac:                 nestedNode.references.add(node);                
1:f13c6ac:             } else {
1:f13c6ac:                 constructorRecipes.addAll(nestedRecipe.getDependencies());
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         return node;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private class Node {
1:f13c6ac:         String name;
1:f13c6ac:         Recipe recipe;
1:f13c6ac:         final List<Node> references = new ArrayList<Node>();
1:f13c6ac:         int referenceCount;
1:f13c6ac:         
1:f13c6ac:         public String toString() {
1:f13c6ac:             StringBuffer buf = new StringBuffer();
1:f13c6ac:             buf.append("Node[").append(name);
1:f13c6ac:             if (references.size() > 0) {
1:f13c6ac:                 buf.append(" <- ");
1:f13c6ac:                 Iterator<Node> iter = references.iterator();
1:f13c6ac:                 while(iter.hasNext()) {
1:f13c6ac:                     buf.append(iter.next().name);
1:f13c6ac:                     if (iter.hasNext()) {
1:f13c6ac:                         buf.append(", ");
1:f13c6ac:                     }
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:             buf.append("]");
1:f13c6ac:             return buf.toString();
1:f13c6ac:         }
1:f13c6ac: 
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.container;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.di.CircularDependencyException;
1: import org.apache.aries.blueprint.di.Recipe;
1: import org.apache.aries.blueprint.di.RefRecipe;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.container;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.LinkedHashMap;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.geronimo.blueprint.di.CircularDependencyException;
0: import org.apache.geronimo.blueprint.di.Recipe;
0: import org.apache.geronimo.blueprint.di.RefRecipe;
1: import org.osgi.service.blueprint.container.NoSuchComponentException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DependencyGraph {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(DependencyGraph.class);
1: 
1:     private BlueprintRepository repository;
1:     
1:     public DependencyGraph(BlueprintRepository repository) {
1:         this.repository = repository;        
1:     }
1:     
1:     public LinkedHashMap<String, Recipe> getSortedRecipes(Collection<String> names) {
1:         // construct the graph
1:         Map<String, Node> nodes = new LinkedHashMap<String, Node>();
1:         for (String name : names) {
1:             Object object = repository.getObject(name);
1:             if (object == null) {
1:                 throw new NoSuchComponentException(name);
1:             }
1:             if (object instanceof Recipe) {
1:                 Recipe recipe = (Recipe) object;
1:                 if (!recipe.getName().equals(name)) {
1:                     throw new RuntimeException("Recipe '" + name + "' returned from the repository has name '" + name + "'");
1:                 }
1:                 createNode(name, recipe,  nodes);
1:             }
1:         }
1: 
1:         // find all initial leaf nodes (and islands)
1:         List<Node> sortedNodes = new ArrayList<Node>(nodes.size());
1:         LinkedList<Node> leafNodes = new LinkedList<Node>();
1:         for (Node n : nodes.values()) {
1:             if (n.referenceCount == 0) {
1:                 // if the node is totally isolated (no in or out refs),
1:                 // move it directly to the finished list, so they are first
1:                 if (n.references.size() == 0) {
1:                     sortedNodes.add(n);
1:                 } else {
1:                     leafNodes.add(n);
1:                 }
1:             }
1:         }
1: 
1:         // pluck the leaves until there are no leaves remaining
1:         while (!leafNodes.isEmpty()) {
1:             Node node = leafNodes.removeFirst();
1:             sortedNodes.add(node);
1:             for (Node ref : node.references) {
1:                 ref.referenceCount--;
1:                 if (ref.referenceCount == 0) {
1:                     leafNodes.add(ref);
1:                 }
1:             }
1:         }
1: 
1:         // There are no more leaves so if there are there still
1:         // unprocessed nodes in the graph, we have one or more curcuits
1:         if (sortedNodes.size() != nodes.size()) {
1:             findCircuit(nodes.values().iterator().next(), new ArrayList<Recipe>(nodes.size()));
1:             // find circuit should never fail, if it does there is a programming error
1:             throw new RuntimeException("Internal Error: expected a CircularDependencyException");
1:         }
1:         
1:         // return the recipes
1:         LinkedHashMap<String, Recipe> sortedRecipes = new LinkedHashMap<String, Recipe>();
1:         for (Node node : sortedNodes) {
1:             sortedRecipes.put(node.name, node.recipe);
1:         }
1:         
1:         return sortedRecipes;
1:     }
1: 
1:     private void findCircuit(Node node, ArrayList<Recipe> stack) {
1:         if (stack.contains(node.recipe)) {
1:             ArrayList<Recipe> circularity = new ArrayList<Recipe>(stack.subList(stack.indexOf(node.recipe), stack.size()));
1: 
1:             // remove anonymous nodes from circularity list
1:             for (Iterator<Recipe> iterator = circularity.iterator(); iterator.hasNext();) {
1:                 Recipe recipe = iterator.next();
1:                 if (recipe != node.recipe && recipe.getName() == null) {
1:                     iterator.remove();
1:                 }
1:             }
1: 
1:             // add ending node to list so a full circuit is shown
1:             circularity.add(node.recipe);
1:             
1:             throw new CircularDependencyException(circularity);
1:         }
1: 
1:         stack.add(node.recipe);
1:         for (Node reference : node.references) {
1:             findCircuit(reference, stack);
1:         }
1:     }
1: 
1:     private Node createNode(String name, Recipe recipe, Map<String, Node> nodes) {
1:         // if node already exists, verify that the exact same recipe instnace is used for both
1:         if (nodes.containsKey(name)) {
1:             Node node = nodes.get(name);
1:             if (node.recipe != recipe) {
1:                 throw new RuntimeException("The name '" + name +"' is assigned to multiple recipies");
1:             }
1:             return node;
1:         }
1: 
1:         // create the node
1:         Node node = new Node();
1:         node.name = name;
1:         node.recipe = recipe;
1:         nodes.put(name, node);
1: 
1:         // link in the references
1:         LinkedList<Recipe> constructorRecipes = new LinkedList<Recipe>(recipe.getConstructorDependencies());
1:         while (!constructorRecipes.isEmpty()) {
1:             Recipe nestedRecipe = constructorRecipes.removeFirst();            
1:             if (nestedRecipe instanceof RefRecipe) {
1:                 nestedRecipe =  nestedRecipe.getDependencies().get(0);
1:                 String nestedName = nestedRecipe.getName();
1:                 Node nestedNode = createNode(nestedName, nestedRecipe, nodes);
1:                 node.referenceCount++;
1:                 nestedNode.references.add(node);                
1:             } else {
1:                 constructorRecipes.addAll(nestedRecipe.getDependencies());
1:             }
1:         }
1:         
1:         return node;
1:     }
1: 
1:     private class Node {
1:         String name;
1:         Recipe recipe;
1:         final List<Node> references = new ArrayList<Node>();
1:         int referenceCount;
1:         
1:         public String toString() {
1:             StringBuffer buf = new StringBuffer();
1:             buf.append("Node[").append(name);
1:             if (references.size() > 0) {
1:                 buf.append(" <- ");
1:                 Iterator<Node> iter = references.iterator();
1:                 while(iter.hasNext()) {
1:                     buf.append(iter.next().name);
1:                     if (iter.hasNext()) {
1:                         buf.append(", ");
1:                     }
1:                 }
1:             }
1:             buf.append("]");
1:             return buf.toString();
1:         }
1: 
1:     }
1: }
============================================================================