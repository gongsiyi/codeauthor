1:bd98451: /**
1:bd98451:  * Licensed to the Apache Software Foundation (ASF) under one
1:bd98451:  * or more contributor license agreements.  See the NOTICE file
1:bd98451:  * distributed with this work for additional information
1:bd98451:  * regarding copyright ownership.  The ASF licenses this file
1:bd98451:  * to you under the Apache License, Version 2.0 (the
1:bd98451:  * "License"); you may not use this file except in compliance
1:bd98451:  * with the License.  You may obtain a copy of the License at
1:bd98451:  *
1:bd98451:  *   http://www.apache.org/licenses/LICENSE-2.0
1:bd98451:  *
1:bd98451:  * Unless required by applicable law or agreed to in writing,
1:bd98451:  * software distributed under the License is distributed on an
1:bd98451:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bd98451:  * KIND, either express or implied.  See the License for the
1:bd98451:  * specific language governing permissions and limitations
1:bd98451:  * under the License.
1:bd98451:  */
1:bd98451: package org.apache.aries.transaction;
1:bd98451: 
1:bd98451: import static org.junit.Assert.assertEquals;
1:bd98451: 
1:bd98451: import java.lang.reflect.Method;
1:bd98451: 
1:bd98451: import javax.transaction.Transactional.TxType;
1:bd98451: 
1:bd98451: import org.apache.aries.transaction.pojo.BadlyAnnotatedPojo1;
1:bd98451: import org.apache.aries.transaction.pojo.AnnotatedPojo;
1:bd98451: import org.apache.aries.transaction.pojo.ExtendedPojo;
1:bd98451: import org.apache.aries.transaction.pojo.ExtendedPojo2;
1:bd98451: import org.apache.aries.transaction.pojo.ExtendedPojo3;
1:bd98451: import org.junit.Assert;
1:bd98451: import org.junit.Test;
1:bd98451: 
1:bd98451: public class ComponentTxDataTest {
1:bd98451: 
1:bd98451:     @Test
1:bd98451:     public void testFindAnnotation() throws NoSuchMethodException, SecurityException {
1:bd98451:         ComponentTxData txData = new ComponentTxData(AnnotatedPojo.class);
1:bd98451:         Assert.assertTrue(txData.isTransactional());
1:bd98451:         assertEquals(TxType.REQUIRED, getType(txData, "increment"));
1:bd98451:         assertEquals(TxType.SUPPORTS, getType(txData, "checkValue"));
1:bd98451:         assertEquals(TxType.MANDATORY, getType(txData, "getRealObject"));
1:bd98451:     }
1:bd98451:     
1:bd98451:     @Test
1:bd98451:     public void testFindAnnotationExtended() throws Exception {
1:bd98451:         ComponentTxData txData = new ComponentTxData(ExtendedPojo.class);
1:bd98451:         assertEquals(TxType.REQUIRED, getType(txData, "defaultType"));
1:bd98451:         assertEquals(TxType.SUPPORTS, getType(txData, "supports"));
1:bd98451:     }
1:bd98451: 
1:bd98451:     
1:bd98451:     @Test
1:bd98451:     public void testFindAnnotationExtended2() throws Exception {
1:bd98451:         ComponentTxData txData = new ComponentTxData(ExtendedPojo2.class);
1:bd98451:         assertEquals(TxType.MANDATORY, getType(txData, "defaultType"));
1:bd98451:         assertEquals(TxType.SUPPORTS, getType(txData, "supports"));
1:bd98451:     }
1:bd98451:     
1:bd98451:     @Test
1:bd98451:     public void testFindAnnotationExtended3() throws Exception {
1:bd98451:         ComponentTxData txData = new ComponentTxData(ExtendedPojo3.class);
1:bd98451:         assertEquals(TxType.MANDATORY, getType(txData, "defaultType"));
1:bd98451:         assertEquals(TxType.REQUIRED, getType(txData, "supports"));
1:bd98451:     }
1:bd98451: 
1:bd98451:     @Test(expected=IllegalArgumentException.class)
1:bd98451:     public void testNoPrivateAnnotation() {
1:bd98451:         new ComponentTxData(BadlyAnnotatedPojo1.class);
1:bd98451:     }
1:bd98451: 
1:bd98451:     @Test(expected=IllegalArgumentException.class)
1:bd98451:     public void testNoStaticAnnotation() {
1:bd98451:         new ComponentTxData(BadlyAnnotatedPojo1.class);
1:bd98451:     }
1:bd98451:     
1:bd98451:     private TxType getType(ComponentTxData txData, String methodName) {
1:bd98451:         Class<?> c = txData.getBeanClass();
1:bd98451:         Method m;
1:bd98451:         try {
1:bd98451:             m = c.getDeclaredMethod(methodName, String.class);
1:bd98451:         } catch (NoSuchMethodException e) {
1:bd98451:             try {
1:bd98451:                 m = c.getMethod(methodName, String.class);
1:bd98451:             } catch (NoSuchMethodException e1) {
1:bd98451:                 throw new IllegalArgumentException(e1);
1:bd98451:             }
1:bd98451:         }
1:bd98451:         return txData.getEffectiveType(m);
1:bd98451:     }
1:bd98451: 
1:bd98451: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.lang.reflect.Method;
1: 
1: import javax.transaction.Transactional.TxType;
1: 
1: import org.apache.aries.transaction.pojo.BadlyAnnotatedPojo1;
1: import org.apache.aries.transaction.pojo.AnnotatedPojo;
1: import org.apache.aries.transaction.pojo.ExtendedPojo;
1: import org.apache.aries.transaction.pojo.ExtendedPojo2;
1: import org.apache.aries.transaction.pojo.ExtendedPojo3;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class ComponentTxDataTest {
1: 
1:     @Test
1:     public void testFindAnnotation() throws NoSuchMethodException, SecurityException {
1:         ComponentTxData txData = new ComponentTxData(AnnotatedPojo.class);
1:         Assert.assertTrue(txData.isTransactional());
1:         assertEquals(TxType.REQUIRED, getType(txData, "increment"));
1:         assertEquals(TxType.SUPPORTS, getType(txData, "checkValue"));
1:         assertEquals(TxType.MANDATORY, getType(txData, "getRealObject"));
1:     }
1:     
1:     @Test
1:     public void testFindAnnotationExtended() throws Exception {
1:         ComponentTxData txData = new ComponentTxData(ExtendedPojo.class);
1:         assertEquals(TxType.REQUIRED, getType(txData, "defaultType"));
1:         assertEquals(TxType.SUPPORTS, getType(txData, "supports"));
1:     }
1: 
1:     
1:     @Test
1:     public void testFindAnnotationExtended2() throws Exception {
1:         ComponentTxData txData = new ComponentTxData(ExtendedPojo2.class);
1:         assertEquals(TxType.MANDATORY, getType(txData, "defaultType"));
1:         assertEquals(TxType.SUPPORTS, getType(txData, "supports"));
1:     }
1:     
1:     @Test
1:     public void testFindAnnotationExtended3() throws Exception {
1:         ComponentTxData txData = new ComponentTxData(ExtendedPojo3.class);
1:         assertEquals(TxType.MANDATORY, getType(txData, "defaultType"));
1:         assertEquals(TxType.REQUIRED, getType(txData, "supports"));
1:     }
1: 
1:     @Test(expected=IllegalArgumentException.class)
1:     public void testNoPrivateAnnotation() {
1:         new ComponentTxData(BadlyAnnotatedPojo1.class);
1:     }
1: 
1:     @Test(expected=IllegalArgumentException.class)
1:     public void testNoStaticAnnotation() {
1:         new ComponentTxData(BadlyAnnotatedPojo1.class);
1:     }
1:     
1:     private TxType getType(ComponentTxData txData, String methodName) {
1:         Class<?> c = txData.getBeanClass();
1:         Method m;
1:         try {
1:             m = c.getDeclaredMethod(methodName, String.class);
1:         } catch (NoSuchMethodException e) {
1:             try {
1:                 m = c.getMethod(methodName, String.class);
1:             } catch (NoSuchMethodException e1) {
1:                 throw new IllegalArgumentException(e1);
1:             }
1:         }
1:         return txData.getEffectiveType(m);
1:     }
1: 
1: }
============================================================================