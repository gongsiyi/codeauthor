1:4243a2b: /**
1:4243a2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4243a2b:  * contributor license agreements.  See the NOTICE file distributed with
1:4243a2b:  * this work for additional information regarding copyright ownership.
1:4243a2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4243a2b:  * (the "License"); you may not use this file except in compliance with
1:4243a2b:  * the License.  You may obtain a copy of the License at
3:4243a2b:  *
1:4243a2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4243a2b:  *
1:4243a2b:  * Unless required by applicable law or agreed to in writing, software
1:4243a2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4243a2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4243a2b:  * See the License for the specific language governing permissions and
1:4243a2b:  * limitations under the License.
1:4243a2b:  */
1:4243a2b: package org.apache.aries.transaction.jms.internal;
2:4243a2b: 
1:4243a2b: import javax.jms.Destination;
1:4c2ef4a: import javax.jms.InvalidDestinationException;
1:4243a2b: import javax.jms.JMSException;
1:4243a2b: import javax.jms.Message;
1:4243a2b: import javax.jms.MessageProducer;
1:4243a2b: 
1:4243a2b: /**
1:4243a2b:  * A pooled {@link MessageProducer}
1:4243a2b:  */
1:4243a2b: public class PooledProducer implements MessageProducer {
1:4c2ef4a: 
1:4c2ef4a:     private final MessageProducer messageProducer;
1:4c2ef4a:     private final Destination destination;
1:4c2ef4a: 
1:4243a2b:     private int deliveryMode;
1:4243a2b:     private boolean disableMessageID;
1:4243a2b:     private boolean disableMessageTimestamp;
1:4243a2b:     private int priority;
1:4243a2b:     private long timeToLive;
1:4c2ef4a:     private boolean anonymous = true;
1:4243a2b: 
1:4243a2b:     public PooledProducer(MessageProducer messageProducer, Destination destination) throws JMSException {
1:4243a2b:         this.messageProducer = messageProducer;
1:4243a2b:         this.destination = destination;
1:4c2ef4a:         this.anonymous = messageProducer.getDestination() == null;
1:4243a2b: 
1:4243a2b:         this.deliveryMode = messageProducer.getDeliveryMode();
1:4243a2b:         this.disableMessageID = messageProducer.getDisableMessageID();
1:4243a2b:         this.disableMessageTimestamp = messageProducer.getDisableMessageTimestamp();
1:4243a2b:         this.priority = messageProducer.getPriority();
1:4243a2b:         this.timeToLive = messageProducer.getTimeToLive();
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void close() throws JMSException {
1:4c2ef4a:         if (!anonymous) {
1:4c2ef4a:             this.messageProducer.close();
1:4c2ef4a:         }
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void send(Destination destination, Message message) throws JMSException {
1:4243a2b:         send(destination, message, getDeliveryMode(), getPriority(), getTimeToLive());
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void send(Message message) throws JMSException {
1:4243a2b:         send(destination, message, getDeliveryMode(), getPriority(), getTimeToLive());
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:4243a2b:         send(destination, message, deliveryMode, priority, timeToLive);
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:4c2ef4a: 
1:4243a2b:         if (destination == null) {
1:4c2ef4a:             if (messageProducer.getDestination() == null) {
1:4c2ef4a:                 throw new UnsupportedOperationException("A destination must be specified.");
1:4c2ef4a:             }
1:4c2ef4a:             throw new InvalidDestinationException("Don't understand null destinations");
1:4243a2b:         }
1:4c2ef4a: 
1:4243a2b:         MessageProducer messageProducer = getMessageProducer();
1:4243a2b: 
1:4243a2b:         // just in case let only one thread send at once
1:4243a2b:         synchronized (messageProducer) {
1:4c2ef4a: 
1:4c2ef4a:             if (anonymous && this.destination != null && !this.destination.equals(destination)) {
1:4c2ef4a:                 throw new UnsupportedOperationException("This producer can only send messages to: " + this.destination);
1:4c2ef4a:             }
1:4c2ef4a: 
1:4c2ef4a:             // Producer will do it's own Destination validation so always use the destination
1:4c2ef4a:             // based send method otherwise we might violate a JMS rule.
1:4243a2b:             messageProducer.send(destination, message, deliveryMode, priority, timeToLive);
1:4243a2b:         }
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public Destination getDestination() {
1:4243a2b:         return destination;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public int getDeliveryMode() {
1:4243a2b:         return deliveryMode;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void setDeliveryMode(int deliveryMode) {
1:4243a2b:         this.deliveryMode = deliveryMode;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public boolean getDisableMessageID() {
1:4243a2b:         return disableMessageID;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void setDisableMessageID(boolean disableMessageID) {
1:4243a2b:         this.disableMessageID = disableMessageID;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public boolean getDisableMessageTimestamp() {
1:4243a2b:         return disableMessageTimestamp;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void setDisableMessageTimestamp(boolean disableMessageTimestamp) {
1:4243a2b:         this.disableMessageTimestamp = disableMessageTimestamp;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public int getPriority() {
1:4243a2b:         return priority;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void setPriority(int priority) {
1:4243a2b:         this.priority = priority;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public long getTimeToLive() {
1:4243a2b:         return timeToLive;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     @Override
1:4243a2b:     public void setTimeToLive(long timeToLive) {
1:4243a2b:         this.timeToLive = timeToLive;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     // Implementation methods
1:4243a2b:     // -------------------------------------------------------------------------
1:4243a2b:     protected MessageProducer getMessageProducer() {
1:4243a2b:         return messageProducer;
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     protected boolean isAnonymous() {
1:4c2ef4a:         return anonymous;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     @Override
1:4243a2b:     public String toString() {
1:4243a2b:         return "PooledProducer { " + messageProducer + " }";
1:4243a2b:     }
1:4243a2b: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4c2ef4a
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidDestinationException;
1: 
1:     private final MessageProducer messageProducer;
1:     private final Destination destination;
1: 
1:     private boolean anonymous = true;
1:         this.anonymous = messageProducer.getDestination() == null;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         if (!anonymous) {
1:             this.messageProducer.close();
1:         }
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:             if (messageProducer.getDestination() == null) {
1:                 throw new UnsupportedOperationException("A destination must be specified.");
1:             }
1:             throw new InvalidDestinationException("Don't understand null destinations");
1: 
1: 
1:             if (anonymous && this.destination != null && !this.destination.equals(destination)) {
1:                 throw new UnsupportedOperationException("This producer can only send messages to: " + this.destination);
1:             }
1: 
1:             // Producer will do it's own Destination validation so always use the destination
1:             // based send method otherwise we might violate a JMS rule.
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isAnonymous() {
1:         return anonymous;
1:     }
1: 
1:     @Override
commit:4243a2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.transaction.jms.internal;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: 
1: /**
1:  * A pooled {@link MessageProducer}
1:  * 
1:  * 
1:  */
1: public class PooledProducer implements MessageProducer {
0:     private MessageProducer messageProducer;
0:     private Destination destination;
1:     private int deliveryMode;
1:     private boolean disableMessageID;
1:     private boolean disableMessageTimestamp;
1:     private int priority;
1:     private long timeToLive;
1: 
1:     public PooledProducer(MessageProducer messageProducer, Destination destination) throws JMSException {
1:         this.messageProducer = messageProducer;
1:         this.destination = destination;
1: 
1:         this.deliveryMode = messageProducer.getDeliveryMode();
1:         this.disableMessageID = messageProducer.getDisableMessageID();
1:         this.disableMessageTimestamp = messageProducer.getDisableMessageTimestamp();
1:         this.priority = messageProducer.getPriority();
1:         this.timeToLive = messageProducer.getTimeToLive();
1:     }
1: 
1:     public void close() throws JMSException {
1:     }
1: 
1:     public void send(Destination destination, Message message) throws JMSException {
1:         send(destination, message, getDeliveryMode(), getPriority(), getTimeToLive());
1:     }
1: 
1:     public void send(Message message) throws JMSException {
1:         send(destination, message, getDeliveryMode(), getPriority(), getTimeToLive());
1:     }
1: 
1:     public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:         send(destination, message, deliveryMode, priority, timeToLive);
1:     }
1: 
1:     public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:         if (destination == null) {
0:             destination = this.destination;
1:         }
1:         MessageProducer messageProducer = getMessageProducer();
1: 
1:         // just in case let only one thread send at once
1:         synchronized (messageProducer) {
1:             messageProducer.send(destination, message, deliveryMode, priority, timeToLive);
1:         }
1:     }
1: 
1:     public Destination getDestination() {
1:         return destination;
1:     }
1: 
1:     public int getDeliveryMode() {
1:         return deliveryMode;
1:     }
1: 
1:     public void setDeliveryMode(int deliveryMode) {
1:         this.deliveryMode = deliveryMode;
1:     }
1: 
1:     public boolean getDisableMessageID() {
1:         return disableMessageID;
1:     }
1: 
1:     public void setDisableMessageID(boolean disableMessageID) {
1:         this.disableMessageID = disableMessageID;
1:     }
1: 
1:     public boolean getDisableMessageTimestamp() {
1:         return disableMessageTimestamp;
1:     }
1: 
1:     public void setDisableMessageTimestamp(boolean disableMessageTimestamp) {
1:         this.disableMessageTimestamp = disableMessageTimestamp;
1:     }
1: 
1:     public int getPriority() {
1:         return priority;
1:     }
1: 
1:     public void setPriority(int priority) {
1:         this.priority = priority;
1:     }
1: 
1:     public long getTimeToLive() {
1:         return timeToLive;
1:     }
1: 
1:     public void setTimeToLive(long timeToLive) {
1:         this.timeToLive = timeToLive;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1:     protected MessageProducer getMessageProducer() {
1:         return messageProducer;
1:     }
1: 
1:     public String toString() {
1:         return "PooledProducer { " + messageProducer + " }";
1:     }
1: 
1: }
============================================================================