1:4243a2b: /**
1:4243a2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4243a2b:  * contributor license agreements.  See the NOTICE file distributed with
1:4243a2b:  * this work for additional information regarding copyright ownership.
1:4243a2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4243a2b:  * (the "License"); you may not use this file except in compliance with
1:4243a2b:  * the License.  You may obtain a copy of the License at
1:4243a2b:  *
1:4243a2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4243a2b:  *
1:4243a2b:  * Unless required by applicable law or agreed to in writing, software
1:4243a2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4243a2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4243a2b:  * See the License for the specific language governing permissions and
1:4243a2b:  * limitations under the License.
1:4243a2b:  */
1:4243a2b: package org.apache.aries.transaction.jms.internal;
1:4243a2b: 
1:4243a2b: import java.io.IOException;
1:4243a2b: import javax.jms.ConnectionFactory;
1:4243a2b: import javax.jms.XAConnection;
1:4243a2b: import javax.jms.XAConnectionFactory;
1:4243a2b: import javax.jms.XASession;
1:4243a2b: import javax.transaction.SystemException;
1:4243a2b: import javax.transaction.TransactionManager;
1:4243a2b: import javax.transaction.xa.XAResource;
1:4243a2b: 
1:4243a2b: import org.apache.geronimo.transaction.manager.NamedXAResource;
1:4243a2b: import org.apache.geronimo.transaction.manager.NamedXAResourceFactory;
1:4243a2b: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
1:4243a2b: import org.apache.geronimo.transaction.manager.WrapperNamedXAResource;
1:4243a2b: import org.slf4j.Logger;
1:4243a2b: import org.slf4j.LoggerFactory;
1:4243a2b: 
1:4243a2b: 
1:4243a2b: public class GenericResourceManager {
1:4243a2b: 
1:4243a2b:     private static final Logger LOGGER = LoggerFactory.getLogger(GenericResourceManager.class);
1:4243a2b: 
1:4243a2b:     private String resourceName;
1:4243a2b: 
1:4c2ef4a:     private String userName;
1:4c2ef4a:     private String password;
1:4c2ef4a: 
1:4243a2b:     private TransactionManager transactionManager;
1:4243a2b: 
1:4243a2b:     private ConnectionFactory connectionFactory;
1:4243a2b: 
1:4243a2b:     public GenericResourceManager() {
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public GenericResourceManager(String resourceName, TransactionManager transactionManager, ConnectionFactory connectionFactory) {
1:4243a2b:         this.resourceName = resourceName;
1:4243a2b:         this.transactionManager = transactionManager;
1:4243a2b:         this.connectionFactory = connectionFactory;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void recoverResource() {
1:4243a2b:         try {
1:4243a2b:             if (!Recovery.recover(this)) {
1:4243a2b:                 LOGGER.info("Resource manager is unrecoverable");
1:4243a2b:             }
1:4243a2b:         } catch (NoClassDefFoundError e) {
1:4243a2b:             LOGGER.info("Resource manager is unrecoverable due to missing classes: " + e);
1:4243a2b:         } catch (Throwable e) {
1:4243a2b:             LOGGER.warn("Error while recovering resource manager", e);
1:4243a2b:         }
1:4243a2b:     }
1:4243a2b: 
1:4c2ef4a:     public String getPassword() {
1:4c2ef4a:         return password;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public void setPassword(String password) {
1:4c2ef4a:         this.password = password;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public String getUserName() {
1:4c2ef4a:         return userName;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4c2ef4a:     public void setUserName(String userName) {
1:4c2ef4a:         this.userName = userName;
1:4c2ef4a:     }
1:4c2ef4a: 
1:4243a2b:     public String getResourceName() {
1:4243a2b:         return resourceName;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void setResourceName(String resourceName) {
1:4243a2b:         this.resourceName = resourceName;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public TransactionManager getTransactionManager() {
1:4243a2b:         return transactionManager;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void setTransactionManager(TransactionManager transactionManager) {
1:4243a2b:         this.transactionManager = transactionManager;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public ConnectionFactory getConnectionFactory() {
1:4243a2b:         return connectionFactory;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void setConnectionFactory(ConnectionFactory connectionFactory) {
1:4243a2b:         this.connectionFactory = connectionFactory;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     /**
1:4243a2b:      * This class will ensure the broker is properly recovered when wired with
1:4243a2b:      * the Geronimo transaction manager.
1:4243a2b:      */
1:4243a2b:     public static class Recovery {
1:4243a2b: 
1:4243a2b:         public static boolean isRecoverable(GenericResourceManager rm) {
1:4243a2b:             return  rm.getConnectionFactory() instanceof XAConnectionFactory &&
1:4243a2b:                     rm.getTransactionManager() instanceof RecoverableTransactionManager &&
1:4243a2b:                     rm.getResourceName() != null && !"".equals(rm.getResourceName());
1:4243a2b:         }
1:4243a2b: 
1:4243a2b:         public static boolean recover(final GenericResourceManager rm) throws IOException {
1:4243a2b:             if (isRecoverable(rm)) {
1:4243a2b:                 final XAConnectionFactory connFactory = (XAConnectionFactory) rm.getConnectionFactory();
1:4243a2b: 
1:4243a2b:                 RecoverableTransactionManager rtxManager = (RecoverableTransactionManager) rm.getTransactionManager();
1:4243a2b:                 rtxManager.registerNamedXAResourceFactory(new NamedXAResourceFactory() {
1:4243a2b: 
1:4243a2b:                     public String getName() {
1:4243a2b:                         return rm.getResourceName();
1:4243a2b:                     }
1:4243a2b: 
1:4243a2b:                     public NamedXAResource getNamedXAResource() throws SystemException {
1:4243a2b:                         try {
1:4c2ef4a:                             final XAConnection xaConnection;
1:4c2ef4a:                             if (rm.getUserName() != null && rm.getPassword() != null) {
1:4c2ef4a:                                 xaConnection = connFactory.createXAConnection(rm.getUserName(), rm.getPassword());
1:4c2ef4a:                             } else {
1:4c2ef4a:                                 xaConnection = connFactory.createXAConnection();
1:4c2ef4a:                             }
1:4c2ef4a:                             final XASession session = xaConnection.createXASession();
1:4c2ef4a:                             xaConnection.start();
1:4c2ef4a:                             LOGGER.debug("new namedXAResource's connection: " + xaConnection);
1:4243a2b: 
1:4c2ef4a:                             return new ConnectionAndWrapperNamedXAResource(session.getXAResource(), getName(), xaConnection);
1:4243a2b:                         } catch (Exception e) {
1:4243a2b:                             SystemException se =  new SystemException("Failed to create ConnectionAndWrapperNamedXAResource, " + e.getLocalizedMessage());
1:4243a2b:                             se.initCause(e);
1:4243a2b:                             LOGGER.error(se.getLocalizedMessage(), se);
1:4243a2b:                             throw se;
1:4243a2b:                         }
1:4243a2b:                     }
1:4243a2b: 
1:4243a2b:                     public void returnNamedXAResource(NamedXAResource namedXaResource) {
1:4243a2b:                         if (namedXaResource instanceof ConnectionAndWrapperNamedXAResource) {
1:4243a2b:                             try {
1:4243a2b:                                 LOGGER.debug("closing returned namedXAResource's connection: " + ((ConnectionAndWrapperNamedXAResource)namedXaResource).connection);
1:4243a2b:                                 ((ConnectionAndWrapperNamedXAResource)namedXaResource).connection.close();
1:4243a2b:                             } catch (Exception ignored) {
1:4243a2b:                                 LOGGER.debug("failed to close returned namedXAResource: " + namedXaResource, ignored);
1:4243a2b:                             }
1:4243a2b:                         }
1:4243a2b:                     }
1:4243a2b:                 });
1:4243a2b:                 return true;
1:4243a2b:             } else {
1:4243a2b:                 return false;
1:4243a2b:             }
1:4243a2b:         }
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public static class ConnectionAndWrapperNamedXAResource extends WrapperNamedXAResource {
1:4243a2b:         final XAConnection connection;
1:4243a2b:         public ConnectionAndWrapperNamedXAResource(XAResource xaResource, String name, XAConnection connection) {
1:4243a2b:             super(xaResource, name);
1:4243a2b:             this.connection = connection;
1:4243a2b:         }
1:4243a2b:     }
1:4243a2b: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4c2ef4a
/////////////////////////////////////////////////////////////////////////
1:     private String userName;
1:     private String password;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getPassword() {
1:         return password;
1:     }
1: 
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1:     public String getUserName() {
1:         return userName;
1:     }
1: 
1:     public void setUserName(String userName) {
1:         this.userName = userName;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                             final XAConnection xaConnection;
1:                             if (rm.getUserName() != null && rm.getPassword() != null) {
1:                                 xaConnection = connFactory.createXAConnection(rm.getUserName(), rm.getPassword());
1:                             } else {
1:                                 xaConnection = connFactory.createXAConnection();
1:                             }
1:                             final XASession session = xaConnection.createXASession();
1:                             xaConnection.start();
1:                             LOGGER.debug("new namedXAResource's connection: " + xaConnection);
1:                             return new ConnectionAndWrapperNamedXAResource(session.getXAResource(), getName(), xaConnection);
commit:4243a2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.transaction.jms.internal;
1: 
1: import java.io.IOException;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.XAConnection;
1: import javax.jms.XAConnectionFactory;
1: import javax.jms.XASession;
1: import javax.transaction.SystemException;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.geronimo.transaction.manager.NamedXAResource;
1: import org.apache.geronimo.transaction.manager.NamedXAResourceFactory;
1: import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
1: import org.apache.geronimo.transaction.manager.WrapperNamedXAResource;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: public class GenericResourceManager {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(GenericResourceManager.class);
1: 
1:     private String resourceName;
1: 
1:     private TransactionManager transactionManager;
1: 
1:     private ConnectionFactory connectionFactory;
1: 
1:     public GenericResourceManager() {
1:     }
1: 
1:     public GenericResourceManager(String resourceName, TransactionManager transactionManager, ConnectionFactory connectionFactory) {
1:         this.resourceName = resourceName;
1:         this.transactionManager = transactionManager;
1:         this.connectionFactory = connectionFactory;
1:     }
1: 
1:     public void recoverResource() {
1:         try {
1:             if (!Recovery.recover(this)) {
1:                 LOGGER.info("Resource manager is unrecoverable");
1:             }
1:         } catch (NoClassDefFoundError e) {
1:             LOGGER.info("Resource manager is unrecoverable due to missing classes: " + e);
1:         } catch (Throwable e) {
1:             LOGGER.warn("Error while recovering resource manager", e);
1:         }
1:     }
1: 
1:     public String getResourceName() {
1:         return resourceName;
1:     }
1: 
1:     public void setResourceName(String resourceName) {
1:         this.resourceName = resourceName;
1:     }
1: 
1:     public TransactionManager getTransactionManager() {
1:         return transactionManager;
1:     }
1: 
1:     public void setTransactionManager(TransactionManager transactionManager) {
1:         this.transactionManager = transactionManager;
1:     }
1: 
1:     public ConnectionFactory getConnectionFactory() {
1:         return connectionFactory;
1:     }
1: 
1:     public void setConnectionFactory(ConnectionFactory connectionFactory) {
1:         this.connectionFactory = connectionFactory;
1:     }
1: 
1:     /**
1:      * This class will ensure the broker is properly recovered when wired with
1:      * the Geronimo transaction manager.
1:      */
1:     public static class Recovery {
1: 
1:         public static boolean isRecoverable(GenericResourceManager rm) {
1:             return  rm.getConnectionFactory() instanceof XAConnectionFactory &&
1:                     rm.getTransactionManager() instanceof RecoverableTransactionManager &&
1:                     rm.getResourceName() != null && !"".equals(rm.getResourceName());
1:         }
1: 
1:         public static boolean recover(final GenericResourceManager rm) throws IOException {
1:             if (isRecoverable(rm)) {
1:                 final XAConnectionFactory connFactory = (XAConnectionFactory) rm.getConnectionFactory();
1: 
1:                 RecoverableTransactionManager rtxManager = (RecoverableTransactionManager) rm.getTransactionManager();
1:                 rtxManager.registerNamedXAResourceFactory(new NamedXAResourceFactory() {
1: 
1:                     public String getName() {
1:                         return rm.getResourceName();
1:                     }
1: 
1:                     public NamedXAResource getNamedXAResource() throws SystemException {
1:                         try {
0:                             final XAConnection activeConn = (XAConnection)connFactory.createXAConnection();
0:                             final XASession session = (XASession)activeConn.createXASession();
0:                             activeConn.start();
0:                             LOGGER.debug("new namedXAResource's connection: " + activeConn);
1: 
0:                             return new ConnectionAndWrapperNamedXAResource(session.getXAResource(), getName(), activeConn);
1:                         } catch (Exception e) {
1:                             SystemException se =  new SystemException("Failed to create ConnectionAndWrapperNamedXAResource, " + e.getLocalizedMessage());
1:                             se.initCause(e);
1:                             LOGGER.error(se.getLocalizedMessage(), se);
1:                             throw se;
1:                         }
1:                     }
1: 
1:                     public void returnNamedXAResource(NamedXAResource namedXaResource) {
1:                         if (namedXaResource instanceof ConnectionAndWrapperNamedXAResource) {
1:                             try {
1:                                 LOGGER.debug("closing returned namedXAResource's connection: " + ((ConnectionAndWrapperNamedXAResource)namedXaResource).connection);
1:                                 ((ConnectionAndWrapperNamedXAResource)namedXaResource).connection.close();
1:                             } catch (Exception ignored) {
1:                                 LOGGER.debug("failed to close returned namedXAResource: " + namedXaResource, ignored);
1:                             }
1:                         }
1:                     }
1:                 });
1:                 return true;
1:             } else {
1:                 return false;
1:             }
1:         }
1:     }
1: 
1:     public static class ConnectionAndWrapperNamedXAResource extends WrapperNamedXAResource {
1:         final XAConnection connection;
1:         public ConnectionAndWrapperNamedXAResource(XAResource xaResource, String name, XAConnection connection) {
1:             super(xaResource, name);
1:             this.connection = connection;
1:         }
1:     }
1: }
============================================================================