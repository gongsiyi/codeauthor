1:8aedaf5: /**
1:8aedaf5:  * Licensed to the Apache Software Foundation (ASF) under one
1:8aedaf5:  * or more contributor license agreements.  See the NOTICE file
1:8aedaf5:  * distributed with this work for additional information
1:8aedaf5:  * regarding copyright ownership.  The ASF licenses this file
1:8aedaf5:  * to you under the Apache License, Version 2.0 (the
1:8aedaf5:  * "License"); you may not use this file except in compliance
1:8aedaf5:  * with the License.  You may obtain a copy of the License at
1:8aedaf5:  *
1:8aedaf5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8aedaf5:  *
1:8aedaf5:  * Unless required by applicable law or agreed to in writing,
1:8aedaf5:  * software distributed under the License is distributed on an
1:8aedaf5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:8aedaf5:  * KIND, either express or implied.  See the License for the
1:8aedaf5:  * specific language governing permissions and limitations
1:8aedaf5:  * under the License.
1:8aedaf5:  */
1:e0beeec: package org.apache.aries.samples.blog.biz;
1:8aedaf5: 
1:8aedaf5: import java.lang.reflect.Constructor;
1:8aedaf5: import java.lang.reflect.InvocationTargetException;
1:8aedaf5: import java.util.Collection;
1:8aedaf5: import java.util.Iterator;
1:8aedaf5: import java.util.List;
1:8aedaf5: import java.util.ListIterator;
1:8aedaf5: 
1:8aedaf5: public class BlogListAdapter<F, B> implements List<F> {
1:8aedaf5: 
1:8aedaf5: 	private List<? extends B> backendList;
1:8aedaf5: 	private Class<? extends F> frontendClazz;
1:8aedaf5: 	private Class<B> backendClazz;
1:8aedaf5: 
1:8aedaf5: 	public BlogListAdapter(List<? extends B> backendList,
1:8aedaf5: 			Class<? extends F> frontendClazz, Class<B> backendClazz) {
1:8aedaf5: 		this.backendList = backendList;
1:8aedaf5: 		this.frontendClazz = frontendClazz;
1:8aedaf5: 		this.backendClazz = backendClazz;
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public void add() {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean add(F e) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public void add(int index, F element) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean addAll(Collection<? extends F> c) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean addAll(int index, Collection<? extends F> c) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public void clear() {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean contains(Object o) {
1:8aedaf5: 		throw new UnsupportedOperationException("Contains() is not supported");
1:8aedaf5: 
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean containsAll(Collection<?> c) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"ContainsAll() is not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public F get(int index) {
1:8aedaf5: 		Constructor<F> c;
1:8aedaf5: 		try {
1:8aedaf5: 			c = (Constructor<F>) frontendClazz.getConstructor(backendClazz);
1:8aedaf5: 			return c.newInstance(backendList.get(index));
1:8aedaf5: 		} catch (Exception e) {
1:8aedaf5: 			// TODO Auto-generated catch block
1:8aedaf5: 			e.printStackTrace();
1:8aedaf5: 		} 
1:8aedaf5: 		return null;
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public int indexOf(Object o) {
1:8aedaf5: 		throw new UnsupportedOperationException("IndexOf() is not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean isEmpty() {
1:8aedaf5: 		return backendList.isEmpty();
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public Iterator iterator() {
1:8aedaf5: 		return new BlogListIterator(backendList.listIterator(), frontendClazz,
1:8aedaf5: 				backendClazz);
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public int lastIndexOf(Object o) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"lastIndexOf() is not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public ListIterator listIterator() {
1:8aedaf5: 		return new BlogListIterator(backendList.listIterator(), frontendClazz,
1:8aedaf5: 				backendClazz);
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public ListIterator listIterator(int index) {
1:8aedaf5: 		return new BlogListIterator(backendList.listIterator(index),
1:8aedaf5: 				frontendClazz, backendClazz);
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean remove(Object o) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public F remove(int index) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean removeAll(Collection c) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public boolean retainAll(Collection c) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public Object set(int index, Object element) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"Modifications to the list are not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public int size() {
1:8aedaf5: 		return backendList.size();
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public List subList(int fromIndex, int toIndex) {
1:8aedaf5: 		throw new UnsupportedOperationException("subList() is not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public Object[] toArray() {
1:8aedaf5: 		throw new UnsupportedOperationException("toArray() is not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: 	public Object[] toArray(Object[] a) {
1:8aedaf5: 		throw new UnsupportedOperationException(
1:8aedaf5: 				"toArray(Object[] a) is not supported");
1:8aedaf5: 	}
1:8aedaf5: 
1:8aedaf5: }
1:8aedaf5: 
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.blog.biz;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:8aedaf5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.samples.blog;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.InvocationTargetException;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.ListIterator;
1: 
1: public class BlogListAdapter<F, B> implements List<F> {
1: 
1: 	private List<? extends B> backendList;
1: 	private Class<? extends F> frontendClazz;
1: 	private Class<B> backendClazz;
1: 
1: 	public BlogListAdapter(List<? extends B> backendList,
1: 			Class<? extends F> frontendClazz, Class<B> backendClazz) {
1: 		this.backendList = backendList;
1: 		this.frontendClazz = frontendClazz;
1: 		this.backendClazz = backendClazz;
1: 	}
1: 
1: 	public void add() {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public boolean add(F e) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public void add(int index, F element) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public boolean addAll(Collection<? extends F> c) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public boolean addAll(int index, Collection<? extends F> c) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public void clear() {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 
1: 	}
1: 
1: 	public boolean contains(Object o) {
1: 		throw new UnsupportedOperationException("Contains() is not supported");
1: 
1: 	}
1: 
1: 	public boolean containsAll(Collection<?> c) {
1: 		throw new UnsupportedOperationException(
1: 				"ContainsAll() is not supported");
1: 	}
1: 
1: 	public F get(int index) {
1: 		Constructor<F> c;
1: 		try {
1: 			c = (Constructor<F>) frontendClazz.getConstructor(backendClazz);
1: 			return c.newInstance(backendList.get(index));
1: 		} catch (Exception e) {
1: 			// TODO Auto-generated catch block
1: 			e.printStackTrace();
1: 		} 
1: 		return null;
1: 	}
1: 
1: 	public int indexOf(Object o) {
1: 		throw new UnsupportedOperationException("IndexOf() is not supported");
1: 	}
1: 
1: 	public boolean isEmpty() {
1: 		return backendList.isEmpty();
1: 	}
1: 
1: 	public Iterator iterator() {
1: 		return new BlogListIterator(backendList.listIterator(), frontendClazz,
1: 				backendClazz);
1: 	}
1: 
1: 	public int lastIndexOf(Object o) {
1: 		throw new UnsupportedOperationException(
1: 				"lastIndexOf() is not supported");
1: 	}
1: 
1: 	public ListIterator listIterator() {
1: 		return new BlogListIterator(backendList.listIterator(), frontendClazz,
1: 				backendClazz);
1: 	}
1: 
1: 	public ListIterator listIterator(int index) {
1: 		return new BlogListIterator(backendList.listIterator(index),
1: 				frontendClazz, backendClazz);
1: 	}
1: 
1: 	public boolean remove(Object o) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public F remove(int index) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public boolean removeAll(Collection c) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public boolean retainAll(Collection c) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public Object set(int index, Object element) {
1: 		throw new UnsupportedOperationException(
1: 				"Modifications to the list are not supported");
1: 	}
1: 
1: 	public int size() {
1: 		return backendList.size();
1: 	}
1: 
1: 	public List subList(int fromIndex, int toIndex) {
1: 		throw new UnsupportedOperationException("subList() is not supported");
1: 	}
1: 
1: 	public Object[] toArray() {
1: 		throw new UnsupportedOperationException("toArray() is not supported");
1: 	}
1: 
1: 	public Object[] toArray(Object[] a) {
1: 		throw new UnsupportedOperationException(
1: 				"toArray(Object[] a) is not supported");
1: 	}
1: 
1: }
1: 
============================================================================