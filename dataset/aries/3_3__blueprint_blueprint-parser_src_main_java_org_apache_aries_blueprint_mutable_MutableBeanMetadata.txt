1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.mutable;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanArgument;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanProperty;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Metadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Target;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * A mutable version of the <code>BeanMetadata</code> that allows modifications.
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public interface MutableBeanMetadata extends ExtendedBeanMetadata, MutableComponentMetadata {
1:f13c6ac: 
1:f13c6ac:     void setClassName(String className);
1:f13c6ac: 
1:f13c6ac:     void setInitMethod(String initMethodName);
1:f13c6ac: 
1:f13c6ac:     void setDestroyMethod(String destroyMethodName);
1:f13c6ac: 
1:f13c6ac:     void addArgument(BeanArgument argument);
1:f13c6ac: 
1:f13c6ac:     BeanArgument addArgument(Metadata value, String valueType, int index);
1:f13c6ac: 
1:f13c6ac:     void removeArgument(BeanArgument argument);
1:f13c6ac: 
1:f13c6ac:     void addProperty(BeanProperty property);
1:f13c6ac: 
1:f13c6ac:     BeanProperty addProperty(String name, Metadata value);
1:f13c6ac: 
1:f13c6ac:     void removeProperty(BeanProperty property);
1:f13c6ac: 
1:f13c6ac:     void setFactoryMethod(String factoryMethodName);
1:f13c6ac: 
1:f13c6ac:     void setFactoryComponent(Target factoryComponent);
1:f13c6ac: 
1:f13c6ac:     void setScope(String scope);
1:f13c6ac: 
1:f13c6ac:     void setRuntimeClass(Class runtimeClass);
1:f13c6ac: 
1:f13c6ac:     void setProcessor(boolean processor);
1:d08aba3:     
1:d08aba3:     void setFieldInjection(boolean allowFieldInjection);
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
commit:d08aba3
/////////////////////////////////////////////////////////////////////////
1:     
1:     void setFieldInjection(boolean allowFieldInjection);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.mutable;
1: import org.apache.aries.blueprint.ExtendedBeanMetadata;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.mutable;
1: 
0: import org.apache.geronimo.blueprint.ExtendedBeanMetadata;
1: import org.osgi.service.blueprint.reflect.BeanArgument;
1: import org.osgi.service.blueprint.reflect.BeanProperty;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.Target;
1: 
1: /**
1:  * A mutable version of the <code>BeanMetadata</code> that allows modifications.
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 766508 $, $Date: 2009-04-19 22:09:27 +0200 (Sun, 19 Apr 2009) $
1:  */
1: public interface MutableBeanMetadata extends ExtendedBeanMetadata, MutableComponentMetadata {
1: 
1:     void setClassName(String className);
1: 
1:     void setInitMethod(String initMethodName);
1: 
1:     void setDestroyMethod(String destroyMethodName);
1: 
1:     void addArgument(BeanArgument argument);
1: 
1:     BeanArgument addArgument(Metadata value, String valueType, int index);
1: 
1:     void removeArgument(BeanArgument argument);
1: 
1:     void addProperty(BeanProperty property);
1: 
1:     BeanProperty addProperty(String name, Metadata value);
1: 
1:     void removeProperty(BeanProperty property);
1: 
1:     void setFactoryMethod(String factoryMethodName);
1: 
1:     void setFactoryComponent(Target factoryComponent);
1: 
1:     void setScope(String scope);
1: 
1:     void setRuntimeClass(Class runtimeClass);
1: 
1:     void setProcessor(boolean processor);
1: 
1: }
============================================================================