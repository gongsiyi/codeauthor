1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
2:96d4e06:  */
1:8f852b6: package org.apache.aries.proxy.impl.common;
7:96d4e06: 
1:96d4e06: import java.util.Map;
1:96d4e06: import java.util.Set;
1:96d4e06: 
1:96d4e06: import org.apache.aries.proxy.FinalModifierException;
1:96d4e06: import org.apache.aries.proxy.UnableToProxyException;
1:ef57cb3: import org.apache.aries.proxy.impl.NLS;
1:96d4e06: import org.objectweb.asm.AnnotationVisitor;
1:96d4e06: import org.objectweb.asm.Attribute;
1:96d4e06: import org.objectweb.asm.ClassReader;
1:96d4e06: import org.objectweb.asm.ClassVisitor;
1:96d4e06: import org.objectweb.asm.MethodVisitor;
1:96d4e06: import org.objectweb.asm.Opcodes;
1:96d4e06: import org.objectweb.asm.Type;
1:8f852b6: import org.objectweb.asm.commons.GeneratorAdapter;
1:96d4e06: import org.objectweb.asm.commons.Method;
1:96d4e06: 
2:96d4e06: /**
1:8f852b6:  * This class is used to copy concrete methods from a super-class into a sub-class, 
1:8f852b6:  * but then delegate up to the super-class implementation. We expect to be called
1:96d4e06:  * with {@link ClassReader#SKIP_CODE}. This class is used when we can't weave
1:96d4e06:  * all the way up the Class hierarchy and need to override methods on the first
1:96d4e06:  * subclass we can weave.
1:96d4e06:  */
1:322f373: final class MethodCopyingClassAdapter extends ClassVisitor implements Opcodes {
1:96d4e06:   /** The super-class to copy from */
1:96d4e06:   private final Class<?> superToCopy;
1:96d4e06:   /** Is the sub-class in the same package as the super */
1:96d4e06:   private final boolean samePackage;
1:96d4e06:   /** The ASM {@link Type} of the sub-class */
1:96d4e06:   private final Type overridingClassType;
1:96d4e06:   /** 
1:96d4e06:    * The Set of {@link Method}s that exist in the sub-class. This set must be
1:96d4e06:    * live so modifications will be reflected in the parent and prevent clashes 
1:96d4e06:    */
1:96d4e06:   private final Set<Method> knownMethods;
1:96d4e06:   /**
1:96d4e06:    * The map of field names to methods being added
1:96d4e06:    */
1:96d4e06:   private final Map<String, TypeMethod> transformedMethods;
1:96d4e06:   
1:8f852b6:   private final AbstractWovenProxyAdapter wovenProxyAdapter;
1:8f852b6:   
1:9a9631e:   public MethodCopyingClassAdapter(AbstractWovenProxyAdapter awpa, ClassLoader definingLoader,
1:9a9631e:       Class<?> superToCopy, Type overridingClassType, Set<Method> knownMethods, 
1:9a9631e:       Map<String, TypeMethod> transformedMethods) {
1:9a9631e:     super(Opcodes.ASM5);
1:9a9631e:     this.wovenProxyAdapter = awpa;
1:9a9631e:     this.superToCopy = superToCopy;
1:9a9631e:     this.overridingClassType = overridingClassType;
1:96d4e06:     this.knownMethods = knownMethods;
1:96d4e06:     this.transformedMethods = transformedMethods;
1:96d4e06:     
1:8f852b6:     //To be in the same package they must be loaded by the same classloader and be in the same package!
1:8f852b6:     if(definingLoader != superToCopy.getClassLoader()) {
1:8f852b6:     	samePackage = false;
1:8f852b6:     } else {
1:96d4e06:     
1:8f852b6:       String overridingClassName = overridingClassType.getClassName();
1:8f852b6:       int lastIndex1 = superToCopy.getName().lastIndexOf('.');
1:8f852b6:       int lastIndex2 = overridingClassName.lastIndexOf('.');
1:8f852b6:       
1:8f852b6:       if(lastIndex1 != lastIndex2) {
1:8f852b6:         samePackage = false;
1:8f852b6:       } else if (lastIndex1 == -1) {
1:8f852b6:         samePackage = true;
1:8f852b6:       } else {
1:8f852b6:         samePackage = superToCopy.getName().substring(0, lastIndex1)
1:8f852b6:          .equals(overridingClassName.substring(0, lastIndex2));
1:8f852b6:       }
1:8f852b6:     }
5:96d4e06:   }
1:96d4e06:   
1:96d4e06:   @Override
1:96d4e06:   public final MethodVisitor visitMethod(final int access, String name, String desc,
1:96d4e06:       String sig, String[] exceptions) {
1:96d4e06:     
1:96d4e06:     MethodVisitor mv = null;
1:8f852b6:     //As in WovenProxyAdapter, we only care about "real" methods, but also not
1:8f852b6:     //abstract ones!.
1:96d4e06:     if (!!!name.equals("<init>") && !!!name.equals("<clinit>")
1:96d4e06:         && (access & (ACC_STATIC | ACC_PRIVATE | ACC_SYNTHETIC | ACC_ABSTRACT
1:96d4e06:             | ACC_NATIVE | ACC_BRIDGE)) == 0) {
1:96d4e06: 
1:96d4e06:       // identify the target method parameters and return type
1:96d4e06:       Method currentTransformMethod = new Method(name, desc);
1:96d4e06:       // We don't want to duplicate a method we already overrode! 
1:96d4e06:       if(!!!knownMethods.add(currentTransformMethod))
1:96d4e06:         return null;
1:96d4e06:       
1:96d4e06:       // found a method we should weave
1:96d4e06:       // We can't override a final method
1:96d4e06:       if((access & ACC_FINAL) != 0)
1:96d4e06:         throw new RuntimeException(new FinalModifierException(
1:96d4e06:             superToCopy, name));
1:8f852b6:       // We can't call up to a default access method if we aren't in the same
1:96d4e06:       // package
1:96d4e06:       if((access & (ACC_PUBLIC | ACC_PROTECTED | ACC_PRIVATE)) == 0) {
1:96d4e06:         if(!!!samePackage)
1:ef57cb3:           throw new RuntimeException(NLS.MESSAGES.getMessage("method.from.superclass.is.hidden", name, superToCopy.getName(), overridingClassType.getClassName()),
1:ef57cb3:                                      new UnableToProxyException(superToCopy));
1:96d4e06:       }
1:96d4e06:       //Safe to copy a call to this method!
1:96d4e06:       Type superType = Type.getType(superToCopy);
1:96d4e06:       
1:96d4e06:       // identify the target method parameters and return type
1:475ef33:       String methodStaticFieldName = "methodField" + AbstractWovenProxyAdapter.getSanitizedUUIDString();
1:96d4e06:       transformedMethods.put(methodStaticFieldName, new TypeMethod(
1:96d4e06:           superType, currentTransformMethod));  
1:96d4e06:       
1:96d4e06:       //Remember we need to copy the fake method *and* weave it, use a 
1:96d4e06:       //WovenProxyMethodAdapter as well as a CopyingMethodAdapter
1:8f852b6:       
1:8f852b6:       MethodVisitor weaver = wovenProxyAdapter.getWeavingMethodVisitor(
1:8f852b6:               access, name, desc, sig, exceptions, currentTransformMethod, 
1:8f852b6:               methodStaticFieldName, superType, false);
1:8f852b6:       
1:8f852b6:       if(weaver instanceof AbstractWovenProxyMethodAdapter) {
1:8f852b6:         //If we are weaving this method then we might have a problem. If it's a protected method and we
1:8f852b6:         //aren't in the same package then we can't dispatch the call to another object. This may sound
1:8f852b6:         //odd, but if class Super has a protected method foo(), then class Sub, that extends Super, cannot
1:8f852b6:         //call ((Super)o).foo() in code (it can call super.foo()). If we are in the same package then this
1:8f852b6:     	//gets around the problem, but if not the class will fail verification.
1:8f852b6:         if(!samePackage && (access & ACC_PROTECTED) != 0)
1:8f852b6:           throw new RuntimeException(NLS.MESSAGES.getMessage("method.from.superclass.is.hidden", name, superToCopy.getName(), overridingClassType.getClassName()),
1:8f852b6:                 new UnableToProxyException(superToCopy));
1:8f852b6:         mv = new CopyingMethodAdapter((GeneratorAdapter) weaver, superType, currentTransformMethod);
1:8f852b6:       }
1:8f852b6:       else {
1:8f852b6:         //For whatever reason we aren't weaving this method. The call to super.xxx() will always work
1:8f852b6:         mv = new CopyingMethodAdapter(new GeneratorAdapter(access, currentTransformMethod, mv), 
1:8f852b6:              superType, currentTransformMethod);
1:8f852b6:       }
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     return mv;
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   /**
1:96d4e06:    * This class is used to prevent any method body being copied, instead replacing
1:96d4e06:    * the body with a call to the super-types implementation. The original annotations
1:96d4e06:    * attributes etc are all copied.
1:96d4e06:    */
1:e6518d7:   private static final class CopyingMethodAdapter extends MethodVisitor {
1:96d4e06:     /** The visitor to delegate to */
1:8f852b6:     private final GeneratorAdapter mv;
1:96d4e06:     /** The type that declares this method (not the one that will override it) */
1:96d4e06:     private final Type superType;
1:96d4e06:     /** The method we are weaving */
1:96d4e06:     private final Method currentTransformMethod;
1:9a9631e:     
1:9a9631e:     public CopyingMethodAdapter(GeneratorAdapter mv, Type superType, 
1:9a9631e:         Method currentTransformMethod) {
1:9a9631e:       super(Opcodes.ASM5);
1:9a9631e:       this.mv = mv;
1:9a9631e:       this.superType = superType;
1:9a9631e:       this.currentTransformMethod = currentTransformMethod;
1:96d4e06:     }
1:96d4e06: 
1:e6518d7:     //TODO might not work for attributes
1:96d4e06:     @Override
1:96d4e06:     public final AnnotationVisitor visitAnnotation(String arg0, boolean arg1) {
1:96d4e06:       return mv.visitAnnotation(arg0, arg1);
1:96d4e06:     }
1:96d4e06: 
1:96d4e06:     @Override
1:96d4e06:     public final AnnotationVisitor visitAnnotationDefault() {
1:96d4e06:       return mv.visitAnnotationDefault();
1:96d4e06:     }
1:96d4e06: 
1:96d4e06:     @Override
1:96d4e06:     public final AnnotationVisitor visitParameterAnnotation(int arg0, String arg1,
1:96d4e06:         boolean arg2) {
1:96d4e06:       return mv.visitParameterAnnotation(arg0, arg1, arg2);
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     @Override
1:96d4e06:     public final void visitAttribute(Attribute attr) {
1:96d4e06:       mv.visitAttribute(attr);
1:96d4e06:     }
1:96d4e06: 
1:96d4e06:     /**
1:96d4e06:      * We skip code for speed when processing super-classes, this means we
1:96d4e06:      * need to manually drive some methods here!
1:96d4e06:      */
1:96d4e06:     @Override
1:96d4e06:     public final void visitEnd() {
1:96d4e06:       mv.visitCode();
1:8f852b6:       
1:8f852b6:       //Equivalent to return super.method(args);
1:8f852b6:       mv.loadThis();
1:8f852b6: 	  mv.loadArgs();
1:8f852b6: 	  mv.visitMethodInsn(INVOKESPECIAL, superType.getInternalName(),
1:8f852b6: 	      currentTransformMethod.getName(), currentTransformMethod.getDescriptor());
1:8f852b6: 	  mv.returnValue();
1:8f852b6: 
1:8f852b6: 	  mv.visitMaxs(currentTransformMethod.getArgumentTypes().length + 1, 0);
1:96d4e06:       mv.visitEnd();
1:96d4e06:     }
1:96d4e06:   }
1:96d4e06: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:9a9631e
/////////////////////////////////////////////////////////////////////////
1:   public MethodCopyingClassAdapter(AbstractWovenProxyAdapter awpa, ClassLoader definingLoader,
1:       Class<?> superToCopy, Type overridingClassType, Set<Method> knownMethods, 
1:       Map<String, TypeMethod> transformedMethods) {
1:     super(Opcodes.ASM5);
1:     this.wovenProxyAdapter = awpa;
1:     this.superToCopy = superToCopy;
1:     this.overridingClassType = overridingClassType;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public CopyingMethodAdapter(GeneratorAdapter mv, Type superType, 
1:         Method currentTransformMethod) {
1:       super(Opcodes.ASM5);
1:       this.mv = mv;
1:       this.superType = superType;
1:       this.currentTransformMethod = currentTransformMethod;
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.impl.common;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.objectweb.asm.commons.GeneratorAdapter;
1:  * This class is used to copy concrete methods from a super-class into a sub-class, 
1:  * but then delegate up to the super-class implementation. We expect to be called
/////////////////////////////////////////////////////////////////////////
1:   private final AbstractWovenProxyAdapter wovenProxyAdapter;
1:   
0:   public MethodCopyingClassAdapter(AbstractWovenProxyAdapter awpa, ClassLoader definingLoader,
0:       Class<?> superToCopy, Type overridingClassType, Set<Method> knownMethods, 
0:     this.wovenProxyAdapter = awpa;
1:     //To be in the same package they must be loaded by the same classloader and be in the same package!
1:     if(definingLoader != superToCopy.getClassLoader()) {
1:     	samePackage = false;
1:     } else {
1:       String overridingClassName = overridingClassType.getClassName();
1:       int lastIndex1 = superToCopy.getName().lastIndexOf('.');
1:       int lastIndex2 = overridingClassName.lastIndexOf('.');
1:       
1:       if(lastIndex1 != lastIndex2) {
1:         samePackage = false;
1:       } else if (lastIndex1 == -1) {
1:         samePackage = true;
1:       } else {
1:         samePackage = superToCopy.getName().substring(0, lastIndex1)
1:          .equals(overridingClassName.substring(0, lastIndex2));
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:     //As in WovenProxyAdapter, we only care about "real" methods, but also not
1:     //abstract ones!.
/////////////////////////////////////////////////////////////////////////
1:       // We can't call up to a default access method if we aren't in the same
/////////////////////////////////////////////////////////////////////////
1:       
1:       MethodVisitor weaver = wovenProxyAdapter.getWeavingMethodVisitor(
1:               access, name, desc, sig, exceptions, currentTransformMethod, 
1:               methodStaticFieldName, superType, false);
1:       
1:       if(weaver instanceof AbstractWovenProxyMethodAdapter) {
1:         //If we are weaving this method then we might have a problem. If it's a protected method and we
1:         //aren't in the same package then we can't dispatch the call to another object. This may sound
1:         //odd, but if class Super has a protected method foo(), then class Sub, that extends Super, cannot
1:         //call ((Super)o).foo() in code (it can call super.foo()). If we are in the same package then this
1:     	//gets around the problem, but if not the class will fail verification.
1:         if(!samePackage && (access & ACC_PROTECTED) != 0)
1:           throw new RuntimeException(NLS.MESSAGES.getMessage("method.from.superclass.is.hidden", name, superToCopy.getName(), overridingClassType.getClassName()),
1:                 new UnableToProxyException(superToCopy));
1:         mv = new CopyingMethodAdapter((GeneratorAdapter) weaver, superType, currentTransformMethod);
1:       }
1:       else {
1:         //For whatever reason we aren't weaving this method. The call to super.xxx() will always work
1:         mv = new CopyingMethodAdapter(new GeneratorAdapter(access, currentTransformMethod, mv), 
1:              superType, currentTransformMethod);
1:       }
/////////////////////////////////////////////////////////////////////////
1:     private final GeneratorAdapter mv;
0:     public CopyingMethodAdapter(GeneratorAdapter mv, Type superType, 
/////////////////////////////////////////////////////////////////////////
1:       
1:       //Equivalent to return super.method(args);
1:       mv.loadThis();
1: 	  mv.loadArgs();
1: 	  mv.visitMethodInsn(INVOKESPECIAL, superType.getInternalName(),
1: 	      currentTransformMethod.getName(), currentTransformMethod.getDescriptor());
1: 	  mv.returnValue();
1: 
1: 	  mv.visitMaxs(currentTransformMethod.getArgumentTypes().length + 1, 0);
commit:475ef33
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
0: import org.apache.aries.proxy.impl.common.TypeMethod;
/////////////////////////////////////////////////////////////////////////
1:       String methodStaticFieldName = "methodField" + AbstractWovenProxyAdapter.getSanitizedUUIDString();
commit:2d7219c
/////////////////////////////////////////////////////////////////////////
0:           access, name, desc, sig, exceptions), access, name, desc, exceptions,
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.proxy.impl.weaving;
1: 
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.aries.proxy.FinalModifierException;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.objectweb.asm.AnnotationVisitor;
1: import org.objectweb.asm.Attribute;
1: import org.objectweb.asm.ClassReader;
1: import org.objectweb.asm.ClassVisitor;
1: import org.objectweb.asm.MethodVisitor;
1: import org.objectweb.asm.Opcodes;
1: import org.objectweb.asm.Type;
0: import org.objectweb.asm.commons.EmptyVisitor;
1: import org.objectweb.asm.commons.Method;
1: 
1: /**
0:  * This class is used to copy methods from a super-class into a sub-class, but
0:  * then delegate up to the super-class implementation. We expect to be called
1:  * with {@link ClassReader#SKIP_CODE}. This class is used when we can't weave
1:  * all the way up the Class hierarchy and need to override methods on the first
1:  * subclass we can weave.
1:  */
0: final class MethodCopyingClassAdapter extends EmptyVisitor implements Opcodes {
0:   /** The sub-class visitor to write to */
0:   private final ClassVisitor cv;
1:   /** The super-class to copy from */
1:   private final Class<?> superToCopy;
1:   /** Is the sub-class in the same package as the super */
1:   private final boolean samePackage;
1:   /** The ASM {@link Type} of the sub-class */
1:   private final Type overridingClassType;
1:   /** 
1:    * The Set of {@link Method}s that exist in the sub-class. This set must be
1:    * live so modifications will be reflected in the parent and prevent clashes 
1:    */
1:   private final Set<Method> knownMethods;
1:   /**
1:    * The map of field names to methods being added
1:    */
1:   private final Map<String, TypeMethod> transformedMethods;
1:   
0:   public MethodCopyingClassAdapter(ClassVisitor cv, Class<?> superToCopy,
0:       Type overridingClassType, Set<Method> knownMethods, 
0:       Map<String, TypeMethod> transformedMethods) {
0:     this.cv = cv;
0:     this.superToCopy = superToCopy;
0:     this.overridingClassType = overridingClassType;
1:     this.knownMethods = knownMethods;
1:     this.transformedMethods = transformedMethods;
1:     
0:     String overridingClassName = overridingClassType.getClassName();
0:     int lastIndex1 = superToCopy.getName().lastIndexOf('.');
0:     int lastIndex2 = overridingClassName.lastIndexOf('.');
1:     
0:     samePackage = (lastIndex1 == lastIndex2) &&
0:        superToCopy.getName().substring(0, (lastIndex1 == -1)? 1 : lastIndex1)
0:        .equals(overridingClassName.substring(0, (lastIndex2 == -1)? 1 : lastIndex2));
1:   }
1:   
1:   @Override
1:   public final MethodVisitor visitMethod(final int access, String name, String desc,
1:       String sig, String[] exceptions) {
1:     
1:     MethodVisitor mv = null;
0:     //As in WovenProxyAdapter, we only care about "real" methods.
1:     if (!!!name.equals("<init>") && !!!name.equals("<clinit>")
1:         && (access & (ACC_STATIC | ACC_PRIVATE | ACC_SYNTHETIC | ACC_ABSTRACT
1:             | ACC_NATIVE | ACC_BRIDGE)) == 0) {
1: 
1:       // identify the target method parameters and return type
1:       Method currentTransformMethod = new Method(name, desc);
1:       // We don't want to duplicate a method we already overrode! 
1:       if(!!!knownMethods.add(currentTransformMethod))
1:         return null;
1:       
1:       // found a method we should weave
1:       // We can't override a final method
1:       if((access & ACC_FINAL) != 0)
1:         throw new RuntimeException(new FinalModifierException(
1:             superToCopy, name));
0:       // We can't call up to a package protected method if we aren't in the same
1:       // package
1:       if((access & (ACC_PUBLIC | ACC_PROTECTED | ACC_PRIVATE)) == 0) {
1:         if(!!!samePackage)
0:           throw new RuntimeException("The method " + name + " in class " + 
0:               superToCopy.getName() + " cannot be called by " + overridingClassType.getClassName()
0:               + " because it is in a different package", new UnableToProxyException(superToCopy));
1:       }
1:       //Safe to copy a call to this method!
1:       Type superType = Type.getType(superToCopy);
1:       
1:       // identify the target method parameters and return type
0:       String methodStaticFieldName = "methodField" + WovenProxyAdapter.getSanitizedUUIDString();
1:       transformedMethods.put(methodStaticFieldName, new TypeMethod(
1:           superType, currentTransformMethod));  
1:       
1:       //Remember we need to copy the fake method *and* weave it, use a 
1:       //WovenProxyMethodAdapter as well as a CopyingMethodAdapter
0:       mv = new CopyingMethodAdapter(new WovenProxyMethodAdapter(cv.visitMethod(
0:           access, name, desc, sig, exceptions), access, name, desc,
0:           methodStaticFieldName, currentTransformMethod, overridingClassType),
0:           superType, currentTransformMethod);
1:     }
1:     
1:     return mv;
1:   }
1:   
1:   /**
1:    * This class is used to prevent any method body being copied, instead replacing
1:    * the body with a call to the super-types implementation. The original annotations
1:    * attributes etc are all copied.
1:    */
0:   private static final class CopyingMethodAdapter extends EmptyVisitor {
1:     /** The visitor to delegate to */
0:     private final MethodVisitor mv;
1:     /** The type that declares this method (not the one that will override it) */
1:     private final Type superType;
1:     /** The method we are weaving */
1:     private final Method currentTransformMethod;
1:     
0:     public CopyingMethodAdapter(MethodVisitor mv, Type superType, 
0:         Method currentTransformMethod) {
0:       this.mv = mv;
0:       this.superType = superType;
0:       this.currentTransformMethod = currentTransformMethod;
1:     }
1: 
1:     @Override
1:     public final AnnotationVisitor visitAnnotation(String arg0, boolean arg1) {
1:       return mv.visitAnnotation(arg0, arg1);
1:     }
1: 
1:     @Override
1:     public final AnnotationVisitor visitAnnotationDefault() {
1:       return mv.visitAnnotationDefault();
1:     }
1: 
1:     @Override
1:     public final AnnotationVisitor visitParameterAnnotation(int arg0, String arg1,
1:         boolean arg2) {
1:       return mv.visitParameterAnnotation(arg0, arg1, arg2);
1:     }
1:     
1:     @Override
1:     public final void visitAttribute(Attribute attr) {
1:       mv.visitAttribute(attr);
1:     }
1: 
1:     /**
1:      * We skip code for speed when processing super-classes, this means we
1:      * need to manually drive some methods here!
1:      */
1:     @Override
1:     public final void visitEnd() {
1:       mv.visitCode();
0:       writeBody();
0:       mv.visitMaxs(currentTransformMethod.getArgumentTypes().length + 1, 0);
1:       mv.visitEnd();
1:     }
1:     
1:     /**
0:      * This method loads this, any args, then invokes the super version of this
1:      */
0:     private final void writeBody() {
0:       mv.visitVarInsn(ALOAD, 0);
1:       
0:       int nargs = currentTransformMethod.getArgumentTypes().length;
1:       
0:       for(int i = 1 ; i <= nargs ; i++) {
0:         switch(currentTransformMethod.
0:                getArgumentTypes()[i - 1].getSort()) {
0:           case (Type.BOOLEAN) :
0:           case (Type.BYTE) :
0:           case (Type.CHAR) :
0:           case (Type.SHORT) :
0:           case (Type.INT) :
0:             mv.visitVarInsn(ILOAD, i);
0:             break;
0:           case (Type.FLOAT) :
0:             mv.visitVarInsn(FLOAD, i);
0:             break;
0:           case (Type.DOUBLE) :
0:             mv.visitVarInsn(DLOAD, i);
0:             break;
0:           case (Type.LONG) :
0:             mv.visitVarInsn(LLOAD, i);
0:             break;
0:           default :
0:             mv.visitVarInsn(ALOAD, i);
1:         }
1:       }
1:       
0:       mv.visitMethodInsn(INVOKESPECIAL, superType.getInternalName(),
0:           currentTransformMethod.getName(), currentTransformMethod.getDescriptor());
1:       
0:       switch(currentTransformMethod.getReturnType().getSort()) {
0:         case (Type.BOOLEAN) :
0:         case (Type.BYTE) :
0:         case (Type.CHAR) :
0:         case (Type.SHORT) :
0:         case (Type.INT) :
0:           mv.visitInsn(IRETURN);
0:           break;
0:         case (Type.VOID) :
0:           mv.visitInsn(RETURN);
0:           break;
0:         case (Type.FLOAT) :
0:           mv.visitInsn(FRETURN);
0:           break;
0:         case (Type.DOUBLE) :
0:           mv.visitInsn(DRETURN);
0:           break;
0:         case (Type.LONG) :
0:           mv.visitInsn(LRETURN);
0:           break;
0:         default :
0:           mv.visitInsn(ARETURN);
1:       }
1:     }
1:   }
1: }
author:Emily Jiang
-------------------------------------------------------------------------------
commit:322f373
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: final class MethodCopyingClassAdapter extends ClassVisitor implements Opcodes {
/////////////////////////////////////////////////////////////////////////
0:     super(Opcodes.ASM4);
/////////////////////////////////////////////////////////////////////////
0:       super(Opcodes.ASM4);
commit:e6518d7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.proxy.impl.gen.Constants;
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:     super(Constants.ASM4);
/////////////////////////////////////////////////////////////////////////
1:   private static final class CopyingMethodAdapter extends MethodVisitor {
/////////////////////////////////////////////////////////////////////////
0:       super(Constants.ASM4);
1:     //TODO might not work for attributes
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ef57cb3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.impl.NLS;
/////////////////////////////////////////////////////////////////////////
1:           throw new RuntimeException(NLS.MESSAGES.getMessage("method.from.superclass.is.hidden", name, superToCopy.getName(), overridingClassType.getClassName()),
1:                                      new UnableToProxyException(superToCopy));
============================================================================