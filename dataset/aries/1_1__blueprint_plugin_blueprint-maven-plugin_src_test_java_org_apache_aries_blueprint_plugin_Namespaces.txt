1:66fc490: /**
1:66fc490:  * Licensed to the Apache Software Foundation (ASF) under one
1:66fc490:  * or more contributor license agreements.  See the NOTICE file
1:66fc490:  * distributed with this work for additional information
1:66fc490:  * regarding copyright ownership.  The ASF licenses this file
1:66fc490:  * to you under the Apache License, Version 2.0 (the
1:66fc490:  * "License"); you may not use this file except in compliance
1:66fc490:  * with the License.  You may obtain a copy of the License at
1:66fc490:  *
1:66fc490:  *   http://www.apache.org/licenses/LICENSE-2.0
1:66fc490:  *
1:66fc490:  * Unless required by applicable law or agreed to in writing,
1:66fc490:  * software distributed under the License is distributed on an
1:66fc490:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:66fc490:  * KIND, either express or implied.  See the License for the
1:66fc490:  * specific language governing permissions and limitations
1:66fc490:  * under the License.
1:66fc490:  */
1:66fc490: package org.apache.aries.blueprint.plugin;
1:66fc490: 
1:66fc490: import java.util.Iterator;
1:66fc490: 
1:66fc490: import javax.xml.XMLConstants;
1:66fc490: import javax.xml.namespace.NamespaceContext;
1:66fc490: 
1:66fc490: import org.w3c.dom.Document;
1:66fc490: 
1:66fc490: 
1:66fc490: public class Namespaces implements NamespaceContext {
1:66fc490:     private Document doc;
1:66fc490: 
1:66fc490:     public Namespaces(Document doc) {
1:66fc490:         this.doc = doc;
1:66fc490:     }
1:66fc490: 
1:66fc490:     @Override
1:66fc490:     public String getNamespaceURI(String prefix) {
1:66fc490:         if (prefix.equals(XMLConstants.DEFAULT_NS_PREFIX)) {
1:66fc490:             return doc.lookupNamespaceURI(null);
1:66fc490:         } else {
1:66fc490:             return doc.lookupNamespaceURI(prefix);
1:66fc490:         }
1:66fc490:     }
1:66fc490: 
1:66fc490:     @Override
1:66fc490:     public String getPrefix(String namespaceURI) {
1:66fc490:         return doc.lookupPrefix(namespaceURI);
1:66fc490:     }
1:66fc490: 
1:66fc490:     @Override
1:66fc490:     public Iterator<String> getPrefixes(String namespaceURI) {
1:66fc490:         return null;
1:66fc490:     }
1:66fc490: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
commit:66fc490
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin;
1: 
1: import java.util.Iterator;
1: 
1: import javax.xml.XMLConstants;
1: import javax.xml.namespace.NamespaceContext;
1: 
1: import org.w3c.dom.Document;
1: 
1: 
1: public class Namespaces implements NamespaceContext {
1:     private Document doc;
1: 
1:     public Namespaces(Document doc) {
1:         this.doc = doc;
1:     }
1: 
1:     @Override
1:     public String getNamespaceURI(String prefix) {
1:         if (prefix.equals(XMLConstants.DEFAULT_NS_PREFIX)) {
1:             return doc.lookupNamespaceURI(null);
1:         } else {
1:             return doc.lookupNamespaceURI(prefix);
1:         }
1:     }
1: 
1:     @Override
1:     public String getPrefix(String namespaceURI) {
1:         return doc.lookupPrefix(namespaceURI);
1:     }
1: 
1:     @Override
1:     public Iterator<String> getPrefixes(String namespaceURI) {
1:         return null;
1:     }
1: }
============================================================================