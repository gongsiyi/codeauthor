1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
1:96d4e06:  */
1:96d4e06: package org.apache.aries.blueprint.proxy;
2:96d4e06: 
1:96d4e06: import static org.junit.Assert.assertEquals;
1:96d4e06: import static org.junit.Assert.assertFalse;
1:96d4e06: import static org.junit.Assert.assertNotNull;
1:96d4e06: import static org.junit.Assert.assertTrue;
1:96d4e06: import static org.junit.Assert.fail;
1:96d4e06: 
1:96d4e06: import java.lang.reflect.InvocationTargetException;
1:96d4e06: import java.lang.reflect.Method;
1:96d4e06: import java.util.concurrent.Callable;
1:96d4e06: 
1:88359ce: import org.apache.aries.blueprint.proxy.ProxyTestClassInnerClasses.ProxyTestClassInner;
1:88359ce: import org.apache.aries.blueprint.proxy.ProxyTestClassInnerClasses.ProxyTestClassStaticInner;
1:96d4e06: import org.apache.aries.proxy.InvocationListener;
1:96d4e06: import org.apache.aries.proxy.impl.SingleInstanceDispatcher;
1:96d4e06: import org.junit.Test;
1:96d4e06: 
1:96d4e06: public abstract class AbstractProxyTest {
1:96d4e06: 
1:96d4e06:   protected static class TestListener implements InvocationListener {
1:96d4e06:   
1:96d4e06:     boolean preInvoke = false;
1:96d4e06:     boolean postInvoke = false;
1:96d4e06:     boolean postInvokeExceptionalReturn = false;
1:96d4e06:     private Method m;
1:96d4e06:     private Object token;
1:96d4e06:     private Throwable e;
1:96d4e06:     
1:96d4e06:     public Object preInvoke(Object proxy, Method m, Object[] args)
1:96d4e06:         throws Throwable {
1:96d4e06:       preInvoke = true;
1:96d4e06:       token = new Object();
1:96d4e06:       this.m = m;
1:96d4e06:       return token;
2:96d4e06:     }
1:96d4e06:   
1:96d4e06:     public void postInvoke(Object token, Object proxy, Method m,
1:96d4e06:         Object returnValue) throws Throwable {
1:96d4e06:       postInvoke = this.token == token && this.m == m;
1:96d4e06:     }
1:96d4e06:   
1:96d4e06:     public void postInvokeExceptionalReturn(Object token, Object proxy,
1:96d4e06:         Method m, Throwable exception) throws Throwable {
1:96d4e06:       postInvokeExceptionalReturn = this.token == token && this.m == m;
1:96d4e06:       e = exception;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public void clear() {
1:96d4e06:       preInvoke = false;
1:96d4e06:       postInvoke = false;
1:96d4e06:       postInvokeExceptionalReturn = false;
1:96d4e06:       token = null;
1:96d4e06:       m = null;
1:96d4e06:       e = null;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public Method getLastMethod() {
1:96d4e06:       return m;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public Throwable getLastThrowable() {
1:96d4e06:       return e;
1:96d4e06:     }
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   protected abstract Object getProxyInstance(Class<?> proxyClass);
1:96d4e06:   protected abstract Object getProxyInstance(Class<?> proxyClass, InvocationListener listener);
1:96d4e06:   protected abstract Class<?> getProxyClass(Class<?> clazz);
1:96d4e06:   protected abstract Object setDelegate(Object proxy, Callable<Object> dispatcher);
1:96d4e06:   
1:8f852b6:   protected Class<?> getTestClass() {
1:8f852b6: 	  return ProxyTestClassGeneral.class;
1:8f852b6:   }
1:8f852b6:   
1:8f852b6:   protected Method getDeclaredMethod(Class<?> testClass, String name,
1:8f852b6: 		Class<?>... classes) throws Exception {
1:8f852b6: 	return getProxyClass(testClass).getDeclaredMethod(name, classes);
1:8f852b6:   }
1:8f852b6:   
1:8f852b6: /**
1:96d4e06:    * This test uses the ProxySubclassGenerator to generate and load a subclass
1:8f852b6:    * of the specified getTestClass().
1:96d4e06:    * 
1:96d4e06:    * Once the subclass is generated we check that it wasn't null. We check
1:96d4e06:    * that the InvocationHandler constructor doesn't return a null object
1:96d4e06:    * either
1:96d4e06:    * 
1:96d4e06:    * Test method for
1:96d4e06:    * {@link org.apache.aries.proxy.impl.ProxySubclassGenerator#generateAndLoadSubclass()}
1:96d4e06:    * .
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testGenerateAndLoadProxy() throws Exception
1:96d4e06:   {
1:8f852b6:     assertNotNull("Generated proxy subclass was null", getProxyClass(getTestClass()));
1:8f852b6:     assertNotNull("Generated proxy subclass instance was null", getProxyInstance(getProxyClass(getTestClass())));
1:96d4e06:   }
2:96d4e06:   /**
1:96d4e06:    * Test a basic method invocation on the proxy subclass
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testMethodInvocation() throws Exception {
1:8f852b6:     Method m = getDeclaredMethod(getTestClass(), "testMethod", String.class,
1:8f852b6:         int.class, Object.class);
1:96d4e06:     String x = "x";
1:8f852b6:     String returned = (String) m.invoke(getProxyInstance(getProxyClass(getTestClass())), x, 1, new Object());
1:96d4e06:     assertEquals("Object returned from invocation was not correct.", x, returned);
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   /**
1:96d4e06:    * Test different argument types on a method invocation
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testMethodArgs() throws Exception
1:96d4e06:   {
1:8f852b6:     Method m = getDeclaredMethod(getTestClass(), "testArgs", double.class,
1:8f852b6:         short.class, long.class, char.class, byte.class, boolean.class);
1:96d4e06:     Character xc = Character.valueOf('x');
1:96d4e06:     String x = xc.toString();
1:8f852b6:     String returned = (String) m.invoke(getProxyInstance(getProxyClass(getTestClass())), Double.MAX_VALUE, Short.MIN_VALUE, Long.MAX_VALUE, xc
1:96d4e06:         .charValue(), Byte.MIN_VALUE, false);
1:96d4e06:     assertEquals("Object returned from invocation was not correct.", x, returned);
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   /**
1:96d4e06:    * Test a method that returns void
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testReturnVoid() throws Exception
1:96d4e06:   {
1:8f852b6:     Method m = getDeclaredMethod(getTestClass(), "testReturnVoid");
1:96d4e06:     //for these weaving tests we are loading the woven test classes on a different classloader
1:96d4e06:     //to this class so we need to set the method accessible
1:96d4e06:     m.setAccessible(true);
1:8f852b6:     m.invoke(getProxyInstance(getProxyClass(getTestClass())));
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * Test a method that returns an int
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testReturnInt() throws Exception
1:96d4e06:   {
1:8f852b6:     Method m = getDeclaredMethod(getTestClass(), "testReturnInt");
1:96d4e06:     //for these weaving tests we are loading the woven test classes on a different classloader
1:96d4e06:     //to this class so we need to set the method accessible
1:96d4e06:     m.setAccessible(true);
1:8f852b6:     Integer returned = (Integer) m.invoke(getProxyInstance(getProxyClass(getTestClass())));
1:96d4e06:     assertEquals("Expected object was not returned from invocation", Integer.valueOf(17), returned);
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * Test a method that returns an Integer
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testReturnInteger() throws Exception
1:96d4e06:   {
1:8f852b6:     Method m = getDeclaredMethod(getTestClass(), "testReturnInteger");
1:8f852b6:     Integer returned = (Integer) m.invoke(getProxyInstance(getProxyClass(getTestClass())));
1:96d4e06:     assertEquals("Expected object was not returned from invocation", Integer.valueOf(1), returned);
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * Test a public method declared higher up the superclass hierarchy
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testPublicHierarchyMethod() throws Exception
1:96d4e06:   {
1:96d4e06:     Method m = null;
2:96d4e06:     try {
1:8f852b6:       m = getDeclaredMethod(getTestClass(), "bMethod");
2:96d4e06:     } catch (NoSuchMethodException nsme) {
1:8f852b6:       m = getProxyClass(getTestClass()).getSuperclass().getDeclaredMethod("bMethod");
1:96d4e06:     }
1:8f852b6:     m.invoke(getProxyInstance(getProxyClass(getTestClass())));
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * Test a protected method declared higher up the superclass hierarchy
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testProtectedHierarchyMethod() throws Exception
1:96d4e06:   {
1:96d4e06:     Method m = null;
1:96d4e06:     try {
1:8f852b6:       m = getDeclaredMethod(getTestClass(), "bProMethod");
1:96d4e06:     } catch (NoSuchMethodException nsme) {
1:8f852b6:       m = getProxyClass(getTestClass()).getSuperclass().getDeclaredMethod("bProMethod");
1:96d4e06:     }
1:96d4e06:     //for these weaving tests we are loading the woven test classes on a different classloader
1:96d4e06:     //to this class so we need to set the method accessible
1:96d4e06:     m.setAccessible(true);
1:8f852b6:     m.invoke(getProxyInstance(getProxyClass(getTestClass())));
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   /**
1:96d4e06:    * Test a default method declared higher up the superclass hierarchy
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testDefaultHierarchyMethod() throws Exception
1:96d4e06:   {
1:96d4e06:     Method m = null;
1:96d4e06:     try {
1:8f852b6:       m = getDeclaredMethod(getTestClass(), "bDefMethod");
1:96d4e06:     } catch (NoSuchMethodException nsme) {
1:8f852b6:       m = getProxyClass(getTestClass()).getSuperclass().getDeclaredMethod("bDefMethod", new Class[] {});
1:96d4e06:     }
1:96d4e06:     //for these weaving tests we are loading the woven test classes on a different classloader
1:96d4e06:     //to this class so we need to set the method accessible
1:96d4e06:     m.setAccessible(true);
1:8f852b6:     m.invoke(getProxyInstance(getProxyClass(getTestClass())));
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * Test a covariant override method
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testCovariant() throws Exception
1:96d4e06:   {
1:96d4e06:     Class<?> proxy = getProxyClass(ProxyTestClassCovariantOverride.class);
1:96d4e06:     
1:8f852b6:     Method m = getDeclaredMethod(ProxyTestClassCovariantOverride.class, "getCovariant");
1:96d4e06:     Object returned = m.invoke(getProxyInstance(proxy));
1:96d4e06:     assertTrue("Object was of wrong type: " + returned.getClass().getSimpleName(),
1:96d4e06:         proxy.isInstance(returned));
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   /**
1:96d4e06:    * Test a method with generics
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testGenerics() throws Exception
1:96d4e06:   {
1:96d4e06:     Class<?> proxy = getProxyClass(ProxyTestClassGeneric.class);
1:96d4e06:     
1:96d4e06:     Object o = getProxyInstance(proxy);
1:8f852b6:     Method m = getDeclaredMethod(ProxyTestClassGeneric.class, "setSomething", String.class);
1:96d4e06:     m.invoke(o, "aString");
1:96d4e06:     
1:8f852b6:     if(getClass() == WovenProxyGeneratorTest.class)
1:8f852b6:     	m = getDeclaredMethod(ProxyTestClassGeneric.class.getSuperclass(), "getSomething");
1:8f852b6:     else 
1:8f852b6:         m = getDeclaredMethod(ProxyTestClassGeneric.class, "getSomething");
1:8f852b6: 
1:96d4e06:     Object returned = m.invoke(o);
1:96d4e06:     assertTrue("Object was of wrong type", String.class.isInstance(returned));
1:96d4e06:     assertEquals("String had wrong value", "aString", returned);
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   /**
1:96d4e06:    * Test that we don't generate classes twice
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void testRetrieveClass() throws Exception
1:96d4e06:   {
1:8f852b6:     Class<?> retrieved = getProxyClass(getTestClass());
1:96d4e06:     assertNotNull("The new class was null", retrieved);
1:8f852b6:     assertEquals("The same class was not returned", retrieved, getProxyClass(getTestClass()));
1:96d4e06: 
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   @Test
1:8f852b6:   public void testEquals() throws Exception {
1:8f852b6:     Object p1 = getProxyInstance(getProxyClass(getTestClass()));
1:8f852b6:     Object p2 = getProxyInstance(getProxyClass(getTestClass()));
1:96d4e06:     
1:96d4e06:     assertFalse("Should not be equal", p1.equals(p2));
1:96d4e06:     
1:96d4e06:     Object p3 = getP3();
1:96d4e06:     
1:96d4e06:     p1 = setDelegate(p1, new SingleInstanceDispatcher(p3));
1:96d4e06:     p2 = setDelegate(p2, new SingleInstanceDispatcher(p3));
1:96d4e06:     
1:96d4e06:     assertTrue("Should be equal", p1.equals(p2));
1:96d4e06:     
1:8f852b6:     Object p4 = getProxyInstance(getProxyClass(getTestClass()));
1:8f852b6:     Object p5 = getProxyInstance(getProxyClass(getTestClass()));
1:96d4e06:     
1:96d4e06:     p4 = setDelegate(p4, new SingleInstanceDispatcher(p1));
1:96d4e06:     p5 = setDelegate(p5, new SingleInstanceDispatcher(p2));
1:96d4e06:     
1:96d4e06:     assertTrue("Should be equal", p4.equals(p5));
1:96d4e06:   }
1:96d4e06:   
1:8f852b6:   protected abstract Object getP3() throws Exception;
1:96d4e06:   
1:96d4e06:   @Test
1:96d4e06:   public void testInterception() throws Throwable {
1:96d4e06:     
1:96d4e06:     TestListener tl = new TestListener();
1:8f852b6:     Object obj = getProxyInstance(getProxyClass(getTestClass()), tl);
1:96d4e06:     
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:8f852b6:     Method m = getDeclaredMethod(getTestClass(), "testReturnInteger", new Class[] {});
1:96d4e06:     m.invoke(obj);
1:96d4e06:     
1:96d4e06:     assertCalled(tl, true, true, false);
1:96d4e06:     
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:8f852b6:     m = getDeclaredMethod(getTestClass(), "testException", new Class[] {});
1:96d4e06:     try {
1:96d4e06:       m.invoke(obj);
1:96d4e06:       fail("Should throw an exception");
1:96d4e06:     } catch (InvocationTargetException re) {
1:96d4e06:       if(!!!re.getTargetException().getClass().equals(RuntimeException.class))
1:96d4e06:         throw re.getTargetException();
1:96d4e06:       assertCalled(tl, true, false, true);
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:8f852b6:     m = getDeclaredMethod(getTestClass(), "testInternallyCaughtException", new Class[] {});
1:96d4e06:     try {
1:96d4e06:       m.invoke(obj);
1:96d4e06:     } finally {
1:96d4e06:       assertCalled(tl, true, true, false);
1:96d4e06:     }
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   protected void assertCalled(TestListener listener, boolean pre, boolean post, boolean ex) {
1:96d4e06:     assertEquals(pre, listener.preInvoke);
1:96d4e06:     assertEquals(post, listener.postInvoke);
1:96d4e06:     assertEquals(ex, listener.postInvokeExceptionalReturn);
1:96d4e06:   }
1:88359ce:   @Test
1:88359ce:   public void testStaticInner() throws Exception {
1:88359ce:     assertNotNull(getProxyInstance(getProxyClass(ProxyTestClassStaticInner.class)));
1:88359ce:   }
1:88359ce:   @Test
1:88359ce:   public void testInner() throws Exception {
1:88359ce:     //An inner class has no no-args (the parent gets added as an arg) so we can't
1:88359ce:     //get an instance
1:88359ce:     assertNotNull(getProxyClass(ProxyTestClassInner.class));
1:88359ce:   }
1:d014a6c:   
1:d014a6c:   /**
1:d014a6c:    * Test an abstract class
1:d014a6c:    */
1:d014a6c:   @Test
1:d014a6c:   public void testAbstractClass() throws Exception
1:d014a6c:   {
1:d014a6c:     Object ptca = getProxyInstance(getProxyClass(ProxyTestClassAbstract.class));
1:d014a6c:     ptca = setDelegate(ptca, new Callable<Object>() {
1:d014a6c: 
1:d014a6c:       public Object call() throws Exception {
1:d014a6c:         //We have to use a proxy instance here because we need it to be a subclass
1:d014a6c:         //of the one from the weaving loader in the weaving test...
1:d014a6c:         return getProxyInstance(ProxyTestClassChildOfAbstract.class);
1:d014a6c:       }
1:d014a6c:     });
1:d014a6c:     
1:d014a6c:     Method m = ptca.getClass().getDeclaredMethod("getMessage");
1:d014a6c:     assertEquals("Working", m.invoke(ptca));
1:d014a6c:   }
1:96d4e06: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:8f852b6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   protected Class<?> getTestClass() {
1: 	  return ProxyTestClassGeneral.class;
1:   }
1:   
1:   protected Method getDeclaredMethod(Class<?> testClass, String name,
1: 		Class<?>... classes) throws Exception {
1: 	return getProxyClass(testClass).getDeclaredMethod(name, classes);
1:   }
1:   
1: /**
1:    * of the specified getTestClass().
/////////////////////////////////////////////////////////////////////////
1:     assertNotNull("Generated proxy subclass was null", getProxyClass(getTestClass()));
1:     assertNotNull("Generated proxy subclass instance was null", getProxyInstance(getProxyClass(getTestClass())));
1:     Method m = getDeclaredMethod(getTestClass(), "testMethod", String.class,
1:         int.class, Object.class);
1:     String returned = (String) m.invoke(getProxyInstance(getProxyClass(getTestClass())), x, 1, new Object());
/////////////////////////////////////////////////////////////////////////
1:     Method m = getDeclaredMethod(getTestClass(), "testArgs", double.class,
1:         short.class, long.class, char.class, byte.class, boolean.class);
1:     String returned = (String) m.invoke(getProxyInstance(getProxyClass(getTestClass())), Double.MAX_VALUE, Short.MIN_VALUE, Long.MAX_VALUE, xc
/////////////////////////////////////////////////////////////////////////
1:     Method m = getDeclaredMethod(getTestClass(), "testReturnVoid");
1:     m.invoke(getProxyInstance(getProxyClass(getTestClass())));
/////////////////////////////////////////////////////////////////////////
1:     Method m = getDeclaredMethod(getTestClass(), "testReturnInt");
1:     Integer returned = (Integer) m.invoke(getProxyInstance(getProxyClass(getTestClass())));
/////////////////////////////////////////////////////////////////////////
1:     Method m = getDeclaredMethod(getTestClass(), "testReturnInteger");
1:     Integer returned = (Integer) m.invoke(getProxyInstance(getProxyClass(getTestClass())));
/////////////////////////////////////////////////////////////////////////
1:       m = getDeclaredMethod(getTestClass(), "bMethod");
1:       m = getProxyClass(getTestClass()).getSuperclass().getDeclaredMethod("bMethod");
1:     m.invoke(getProxyInstance(getProxyClass(getTestClass())));
/////////////////////////////////////////////////////////////////////////
1:       m = getDeclaredMethod(getTestClass(), "bProMethod");
1:       m = getProxyClass(getTestClass()).getSuperclass().getDeclaredMethod("bProMethod");
1:     m.invoke(getProxyInstance(getProxyClass(getTestClass())));
/////////////////////////////////////////////////////////////////////////
1:       m = getDeclaredMethod(getTestClass(), "bDefMethod");
1:       m = getProxyClass(getTestClass()).getSuperclass().getDeclaredMethod("bDefMethod", new Class[] {});
1:     m.invoke(getProxyInstance(getProxyClass(getTestClass())));
/////////////////////////////////////////////////////////////////////////
1:     Method m = getDeclaredMethod(ProxyTestClassCovariantOverride.class, "getCovariant");
/////////////////////////////////////////////////////////////////////////
1:     Method m = getDeclaredMethod(ProxyTestClassGeneric.class, "setSomething", String.class);
1:     if(getClass() == WovenProxyGeneratorTest.class)
1:     	m = getDeclaredMethod(ProxyTestClassGeneric.class.getSuperclass(), "getSomething");
1:     else 
1:         m = getDeclaredMethod(ProxyTestClassGeneric.class, "getSomething");
1: 
/////////////////////////////////////////////////////////////////////////
1:     Class<?> retrieved = getProxyClass(getTestClass());
1:     assertEquals("The same class was not returned", retrieved, getProxyClass(getTestClass()));
1:   public void testEquals() throws Exception {
1:     Object p1 = getProxyInstance(getProxyClass(getTestClass()));
1:     Object p2 = getProxyInstance(getProxyClass(getTestClass()));
/////////////////////////////////////////////////////////////////////////
1:     Object p4 = getProxyInstance(getProxyClass(getTestClass()));
1:     Object p5 = getProxyInstance(getProxyClass(getTestClass()));
/////////////////////////////////////////////////////////////////////////
1:   protected abstract Object getP3() throws Exception;
1:     Object obj = getProxyInstance(getProxyClass(getTestClass()), tl);
1:     Method m = getDeclaredMethod(getTestClass(), "testReturnInteger", new Class[] {});
/////////////////////////////////////////////////////////////////////////
1:     m = getDeclaredMethod(getTestClass(), "testException", new Class[] {});
/////////////////////////////////////////////////////////////////////////
1:     m = getDeclaredMethod(getTestClass(), "testInternallyCaughtException", new Class[] {});
commit:d014a6c
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.InvocationHandler;
/////////////////////////////////////////////////////////////////////////
1:   
1:   /**
1:    * Test an abstract class
1:    */
1:   @Test
1:   public void testAbstractClass() throws Exception
1:   {
1:     Object ptca = getProxyInstance(getProxyClass(ProxyTestClassAbstract.class));
1:     ptca = setDelegate(ptca, new Callable<Object>() {
1: 
1:       public Object call() throws Exception {
1:         //We have to use a proxy instance here because we need it to be a subclass
1:         //of the one from the weaving loader in the weaving test...
1:         return getProxyInstance(ProxyTestClassChildOfAbstract.class);
1:       }
1:     });
1:     
1:     Method m = ptca.getClass().getDeclaredMethod("getMessage");
1:     assertEquals("Working", m.invoke(ptca));
1:   }
commit:88359ce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.proxy.ProxyTestClassInnerClasses.ProxyTestClassInner;
1: import org.apache.aries.blueprint.proxy.ProxyTestClassInnerClasses.ProxyTestClassStaticInner;
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testStaticInner() throws Exception {
1:     assertNotNull(getProxyInstance(getProxyClass(ProxyTestClassStaticInner.class)));
1:   }
1:   @Test
1:   public void testInner() throws Exception {
1:     //An inner class has no no-args (the parent gets added as an arg) so we can't
1:     //get an instance
1:     assertNotNull(getProxyClass(ProxyTestClassInner.class));
1:   }
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.proxy;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.aries.proxy.InvocationListener;
1: import org.apache.aries.proxy.impl.SingleInstanceDispatcher;
1: import org.junit.Test;
1: 
1: public abstract class AbstractProxyTest {
1: 
1:   protected static class TestListener implements InvocationListener {
1:   
1:     boolean preInvoke = false;
1:     boolean postInvoke = false;
1:     boolean postInvokeExceptionalReturn = false;
1:     private Method m;
1:     private Object token;
1:     private Throwable e;
1:     
1:     public Object preInvoke(Object proxy, Method m, Object[] args)
1:         throws Throwable {
1:       preInvoke = true;
1:       token = new Object();
1:       this.m = m;
1:       return token;
1:     }
1:   
1:     public void postInvoke(Object token, Object proxy, Method m,
1:         Object returnValue) throws Throwable {
1:       postInvoke = this.token == token && this.m == m;
1:     }
1:   
1:     public void postInvokeExceptionalReturn(Object token, Object proxy,
1:         Method m, Throwable exception) throws Throwable {
1:       postInvokeExceptionalReturn = this.token == token && this.m == m;
1:       e = exception;
1:     }
1:     
1:     public void clear() {
1:       preInvoke = false;
1:       postInvoke = false;
1:       postInvokeExceptionalReturn = false;
1:       token = null;
1:       m = null;
1:       e = null;
1:     }
1:     
1:     public Method getLastMethod() {
1:       return m;
1:     }
1:     
1:     public Throwable getLastThrowable() {
1:       return e;
1:     }
1:   }
1: 
0:   protected static final Class<?> TEST_CLASS = ProxyTestClassGeneral.class;
1:   
1:   protected abstract Object getProxyInstance(Class<?> proxyClass);
1:   protected abstract Object getProxyInstance(Class<?> proxyClass, InvocationListener listener);
1:   protected abstract Class<?> getProxyClass(Class<?> clazz);
1:   protected abstract Object setDelegate(Object proxy, Callable<Object> dispatcher);
1:   
1:   /**
1:    * This test uses the ProxySubclassGenerator to generate and load a subclass
0:    * of the specified TEST_CLASS.
1:    * 
1:    * Once the subclass is generated we check that it wasn't null. We check
1:    * that the InvocationHandler constructor doesn't return a null object
1:    * either
1:    * 
1:    * Test method for
1:    * {@link org.apache.aries.proxy.impl.ProxySubclassGenerator#generateAndLoadSubclass()}
1:    * .
1:    */
1:   @Test
1:   public void testGenerateAndLoadProxy() throws Exception
1:   {
0:     assertNotNull("Generated proxy subclass was null", getProxyClass(TEST_CLASS));
0:     assertNotNull("Generated proxy subclass instance was null", getProxyInstance(getProxyClass(TEST_CLASS)));
1:   }
1:   /**
1:    * Test a basic method invocation on the proxy subclass
1:    */
1:   @Test
1:   public void testMethodInvocation() throws Exception {
0:     Method m = getProxyClass(TEST_CLASS).getDeclaredMethod("testMethod", new Class[] { String.class,
0:         int.class, Object.class });
1:     String x = "x";
0:     String returned = (String) m.invoke(getProxyInstance(getProxyClass(TEST_CLASS)), x, 1, new Object());
1:     assertEquals("Object returned from invocation was not correct.", x, returned);
1:   }
1:   
1:   /**
1:    * Test different argument types on a method invocation
1:    */
1:   @Test
1:   public void testMethodArgs() throws Exception
1:   {
0:     Method m = getProxyClass(TEST_CLASS).getDeclaredMethod("testArgs", new Class[] { double.class,
0:         short.class, long.class, char.class, byte.class, boolean.class });
1:     Character xc = Character.valueOf('x');
1:     String x = xc.toString();
0:     String returned = (String) m.invoke(getProxyInstance(getProxyClass(TEST_CLASS)), Double.MAX_VALUE, Short.MIN_VALUE, Long.MAX_VALUE, xc
1:         .charValue(), Byte.MIN_VALUE, false);
1:     assertEquals("Object returned from invocation was not correct.", x, returned);
1:   }
1:   
1:   /**
1:    * Test a method that returns void
1:    */
1:   @Test
1:   public void testReturnVoid() throws Exception
1:   {
0:     Method m = getProxyClass(TEST_CLASS).getDeclaredMethod("testReturnVoid", new Class[] {});
1:     //for these weaving tests we are loading the woven test classes on a different classloader
1:     //to this class so we need to set the method accessible
1:     m.setAccessible(true);
0:     m.invoke(getProxyInstance(getProxyClass(TEST_CLASS)));
1:   }
1: 
1:   /**
1:    * Test a method that returns an int
1:    */
1:   @Test
1:   public void testReturnInt() throws Exception
1:   {
0:     Method m = getProxyClass(TEST_CLASS).getDeclaredMethod("testReturnInt", new Class[] {});
1:     //for these weaving tests we are loading the woven test classes on a different classloader
1:     //to this class so we need to set the method accessible
1:     m.setAccessible(true);
0:     Integer returned = (Integer) m.invoke(getProxyInstance(getProxyClass(TEST_CLASS)));
1:     assertEquals("Expected object was not returned from invocation", Integer.valueOf(17), returned);
1:   }
1: 
1:   /**
1:    * Test a method that returns an Integer
1:    */
1:   @Test
1:   public void testReturnInteger() throws Exception
1:   {
0:     Method m = getProxyClass(TEST_CLASS).getDeclaredMethod("testReturnInteger", new Class[] {});
0:     Integer returned = (Integer) m.invoke(getProxyInstance(getProxyClass(TEST_CLASS)));
1:     assertEquals("Expected object was not returned from invocation", Integer.valueOf(1), returned);
1:   }
1: 
1:   /**
1:    * Test a public method declared higher up the superclass hierarchy
1:    */
1:   @Test
1:   public void testPublicHierarchyMethod() throws Exception
1:   {
1:     Method m = null;
1:     try {
0:       m = getProxyClass(TEST_CLASS).getDeclaredMethod("bMethod", new Class[] {});
1:     } catch (NoSuchMethodException nsme) {
0:       m = getProxyClass(TEST_CLASS).getSuperclass().getDeclaredMethod("bMethod", new Class[] {});
1:     }
0:     m.invoke(getProxyInstance(getProxyClass(TEST_CLASS)));
1:   }
1: 
1:   /**
1:    * Test a protected method declared higher up the superclass hierarchy
1:    */
1:   @Test
1:   public void testProtectedHierarchyMethod() throws Exception
1:   {
1:     Method m = null;
1:     try {
0:       m = getProxyClass(TEST_CLASS).getDeclaredMethod("bProMethod", new Class[] {});
1:     } catch (NoSuchMethodException nsme) {
0:       m = getProxyClass(TEST_CLASS).getSuperclass().getDeclaredMethod("bProMethod", new Class[] {});
1:     }
1:     //for these weaving tests we are loading the woven test classes on a different classloader
1:     //to this class so we need to set the method accessible
1:     m.setAccessible(true);
0:     m.invoke(getProxyInstance(getProxyClass(TEST_CLASS)));
1:   }
1:   
1:   /**
1:    * Test a default method declared higher up the superclass hierarchy
1:    */
1:   @Test
1:   public void testDefaultHierarchyMethod() throws Exception
1:   {
1:     Method m = null;
1:     try {
0:       m = getProxyClass(TEST_CLASS).getDeclaredMethod("bDefMethod", new Class[] {});
1:     } catch (NoSuchMethodException nsme) {
0:       m = getProxyClass(TEST_CLASS).getSuperclass().getDeclaredMethod("bDefMethod", new Class[] {});
1:     }
1:     //for these weaving tests we are loading the woven test classes on a different classloader
1:     //to this class so we need to set the method accessible
1:     m.setAccessible(true);
0:     m.invoke(getProxyInstance(getProxyClass(TEST_CLASS)));
1:   }
1: 
1:   /**
1:    * Test a covariant override method
1:    */
1:   @Test
1:   public void testCovariant() throws Exception
1:   {
1:     Class<?> proxy = getProxyClass(ProxyTestClassCovariantOverride.class);
1:     
0:     Method m = proxy.getDeclaredMethod("getCovariant", new Class[] {});
1:     Object returned = m.invoke(getProxyInstance(proxy));
1:     assertTrue("Object was of wrong type: " + returned.getClass().getSimpleName(),
1:         proxy.isInstance(returned));
1:   }
1: 
1:   /**
1:    * Test a method with generics
1:    */
1:   @Test
1:   public void testGenerics() throws Exception
1:   {
1:     Class<?> proxy = getProxyClass(ProxyTestClassGeneric.class);
1:     
1:     Object o = getProxyInstance(proxy);
0:     Method m = proxy.getDeclaredMethod("setSomething",
0:         new Class[] { String.class });
1:     m.invoke(o, "aString");
1:     
1:     try {
0:       m = proxy.getDeclaredMethod("getSomething", new Class[] {});
1:     } catch (NoSuchMethodException nsme) {
0:       m = proxy.getSuperclass().getDeclaredMethod("getSomething", new Class[] {});
1:     }
1:     Object returned = m.invoke(o);
1:     assertTrue("Object was of wrong type", String.class.isInstance(returned));
1:     assertEquals("String had wrong value", "aString", returned);
1:   }
1:   
1:   /**
1:    * Test that we don't generate classes twice
1:    */
1:   @Test
1:   public void testRetrieveClass() throws Exception
1:   {
0:     Class<?> retrieved = getProxyClass(TEST_CLASS);
1:     assertNotNull("The new class was null", retrieved);
0:     assertEquals("The same class was not returned", retrieved, getProxyClass(TEST_CLASS));
1: 
1:   }
1:   
1:   @Test
0:   public void testEquals() throws IllegalAccessException, InstantiationException {
0:     Object p1 = getProxyInstance(getProxyClass(TEST_CLASS));
0:     Object p2 = getProxyInstance(getProxyClass(TEST_CLASS));
1:     
1:     assertFalse("Should not be equal", p1.equals(p2));
1:     
1:     Object p3 = getP3();
1:     
1:     p1 = setDelegate(p1, new SingleInstanceDispatcher(p3));
1:     p2 = setDelegate(p2, new SingleInstanceDispatcher(p3));
1:     
1:     assertTrue("Should be equal", p1.equals(p2));
1:     
0:     Object p4 = getProxyInstance(getProxyClass(TEST_CLASS));
0:     Object p5 = getProxyInstance(getProxyClass(TEST_CLASS));
1:     
1:     p4 = setDelegate(p4, new SingleInstanceDispatcher(p1));
1:     p5 = setDelegate(p5, new SingleInstanceDispatcher(p2));
1:     
1:     assertTrue("Should be equal", p4.equals(p5));
1:   }
1:   
0:   protected abstract Object getP3();
1:   
1:   @Test
1:   public void testInterception() throws Throwable {
1:     
1:     TestListener tl = new TestListener();
0:     Object obj = getProxyInstance(getProxyClass(TEST_CLASS), tl);
1:     
1:     assertCalled(tl, false, false, false);
1:     
0:     Method m = getProxyClass(TEST_CLASS).getDeclaredMethod("testReturnInteger", new Class[] {});
1:     m.invoke(obj);
1:     
1:     assertCalled(tl, true, true, false);
1:     
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
0:     m = getProxyClass(TEST_CLASS).getDeclaredMethod("testException", new Class[] {});
1:     try {
1:       m.invoke(obj);
1:       fail("Should throw an exception");
1:     } catch (InvocationTargetException re) {
1:       if(!!!re.getTargetException().getClass().equals(RuntimeException.class))
1:         throw re.getTargetException();
1:       assertCalled(tl, true, false, true);
1:     }
1:     
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
0:     m = getProxyClass(TEST_CLASS).getDeclaredMethod("testInternallyCaughtException", new Class[] {});
1:     try {
1:       m.invoke(obj);
1:     } finally {
1:       assertCalled(tl, true, true, false);
1:     }
1:   }
1:   
1:   protected void assertCalled(TestListener listener, boolean pre, boolean post, boolean ex) {
1:     assertEquals(pre, listener.preInvoke);
1:     assertEquals(post, listener.postInvoke);
1:     assertEquals(ex, listener.postInvokeExceptionalReturn);
1:   }
1: }
============================================================================