1:792f3de: /*
1:792f3de:  * Licensed to the Apache Software Foundation (ASF) under one
1:792f3de:  * or more contributor license agreements.  See the NOTICE file
1:792f3de:  * distributed with this work for additional information
1:792f3de:  * regarding copyright ownership.  The ASF licenses this file
1:792f3de:  * to you under the Apache License, Version 2.0 (the
1:792f3de:  * "License"); you may not use this file except in compliance
1:792f3de:  * with the License.  You may obtain a copy of the License at
1:792f3de:  *
1:792f3de:  *   http://www.apache.org/licenses/LICENSE-2.0
1:792f3de:  *
1:792f3de:  * Unless required by applicable law or agreed to in writing,
1:792f3de:  * software distributed under the License is distributed on an
1:792f3de:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:792f3de:  * KIND, either express or implied.  See the License for the
1:792f3de:  * specific language governing permissions and limitations
1:792f3de:  * under the License.
1:792f3de:  */
1:17170a0: package org.apache.aries.application.resolver.obr.ext;
1:792f3de: 
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:792f3de: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:792f3de: 
1:792f3de: import java.util.ArrayList;
1:792f3de: import java.util.Arrays;
1:792f3de: import java.util.Collection;
1:792f3de: import java.util.Collections;
1:792f3de: import java.util.HashMap;
1:792f3de: import java.util.HashSet;
1:792f3de: import java.util.List;
1:792f3de: import java.util.Map;
1:792f3de: 
1:89f804e: import org.apache.aries.application.InvalidAttributeException;
1:792f3de: import org.apache.aries.application.modelling.ExportedBundle;
1:792f3de: import org.apache.aries.application.modelling.ExportedPackage;
1:792f3de: import org.apache.aries.application.modelling.ExportedService;
1:792f3de: import org.apache.aries.application.modelling.ImportedBundle;
1:792f3de: import org.apache.aries.application.modelling.ImportedPackage;
1:792f3de: import org.apache.aries.application.modelling.ImportedService;
1:792f3de: import org.apache.aries.application.modelling.ModelledResource;
1:ab65edd: import org.apache.aries.application.modelling.ModellingConstants;
1:58f55bd: import org.apache.aries.application.modelling.ModellingManager;
1:792f3de: import org.apache.aries.application.modelling.ResourceType;
1:58f55bd: import org.apache.aries.application.modelling.utils.ModellingHelper;
1:792f3de: import org.apache.aries.application.resolver.internal.MessageUtil;
1:792f3de: import org.apache.aries.application.utils.AppConstants;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:792f3de: import org.apache.felix.bundlerepository.Capability;
1:792f3de: import org.apache.felix.bundlerepository.Property;
1:792f3de: import org.apache.felix.bundlerepository.Requirement;
1:792f3de: import org.apache.felix.bundlerepository.Resource;
1:792f3de: import org.osgi.framework.Constants;
1:792f3de: import org.slf4j.Logger;
1:792f3de: import org.slf4j.LoggerFactory;
1:792f3de: 
1:792f3de: public class ModelledBundleResource implements ModelledResource {  
1:792f3de:   private final Resource resource;
1:792f3de:   private final ExportedBundle exportedBundle;
1:792f3de:   private final Collection<ImportedPackage> packageRequirements;
1:792f3de:   private final Collection<ImportedService> serviceRequirements;
1:792f3de:   private final Collection<ExportedPackage> packageCapabilities;
1:792f3de:   private final Collection<ExportedService> serviceCapabilties;
1:792f3de:   private final Collection<ImportedBundle> bundleRequirements;
1:792f3de:   private final ResourceType type;
1:58f55bd:   private final ModellingManager modellingManager;
1:58f55bd:   private final ModellingHelper modellingHelper;
1:792f3de:   private final Logger logger = LoggerFactory.getLogger(ModelledBundleResource.class);
1:792f3de: 
1:58f55bd:   public ModelledBundleResource (Resource r, ModellingManager mm, ModellingHelper mh) throws InvalidAttributeException { 
1:792f3de: 
1:58f55bd:     logger.debug(LOG_ENTRY, "ModelledBundleResource", new Object[]{r, mm, mh});
1:792f3de:     resource = r;
1:58f55bd:     modellingManager = mm;
1:58f55bd:     modellingHelper = mh;
1:792f3de:     List<ExportedBundle> exportedBundles = new ArrayList<ExportedBundle>();
1:792f3de:     ResourceType thisResourceType = ResourceType.BUNDLE;
1:792f3de: 
1:792f3de:     // We'll iterate through our Capabilities a second time below. We do this since we later
1:792f3de:     // build an ExportedPackageImpl for which 'this' is the ModelledResource. 
1:792f3de:     for (Capability cap : r.getCapabilities()) { 
1:792f3de:       String capName = cap.getName();
1:792f3de:       if (capName.equals(ResourceType.BUNDLE.toString())) { 
1:792f3de:         @SuppressWarnings("unchecked")
1:792f3de:         Property[] props = cap.getProperties();
1:792f3de: 
1:792f3de:         Map<String,String> sanitizedMap = new HashMap<String, String>();
1:792f3de:         for(Property entry : props) {
1:792f3de:           sanitizedMap.put(entry.getName(), entry.getValue());
1:792f3de:         }
1:58f55bd:         exportedBundles.add (modellingManager.getExportedBundle(sanitizedMap, modellingHelper.buildFragmentHost(
1:792f3de:             sanitizedMap.get(Constants.FRAGMENT_HOST))));
1:792f3de:       } else if (cap.getName().equals(ResourceType.COMPOSITE.toString())) { 
1:792f3de:         thisResourceType = ResourceType.COMPOSITE;
1:792f3de:       }
1:792f3de:     }
1:792f3de:     type = thisResourceType;
1:792f3de: 
1:792f3de: 
1:792f3de:     if (exportedBundles.size() == 0) {
1:792f3de:       throw new InvalidAttributeException(MessageUtil.getMessage("NO_EXPORTED_BUNDLE", new Object[0]));
1:792f3de:     } else if (exportedBundles.size() == 1) { 
1:792f3de:       exportedBundle = exportedBundles.get(0);
2:792f3de:     } else {  
1:792f3de:       throw new InvalidAttributeException(MessageUtil.getMessage("TOO_MANY_EXPORTED_BUNDLES",
1:792f3de:           new Object[0]));
1:792f3de:     }   
1:792f3de: 
1:792f3de:     packageCapabilities = new HashSet<ExportedPackage>();
1:792f3de:     packageRequirements = new HashSet<ImportedPackage>();
1:792f3de:     serviceCapabilties = new HashSet<ExportedService>();
1:792f3de:     serviceRequirements = new HashSet<ImportedService>();
1:792f3de:     bundleRequirements = new HashSet<ImportedBundle>();
1:792f3de: 
1:792f3de:     for (Requirement requirement : r.getRequirements())
1:792f3de:     {
1:792f3de:       String reqName = requirement.getName();
1:792f3de:       // Build ImportedPackageImpl, ImportedServiceImpl objects from the Resource's requirments. 
1:792f3de:       // Parse the Requirement's filter and remove from the parsed Map all the entries
1:792f3de:       // that we will pass in as explicit parameters to the ImportedServiceImpl or ImportedPackageImpl
1:792f3de:       // constructor. 
1:792f3de:       // (This does mean that we remove 'package=package.name' entries but not 'service=service' - 
1:792f3de:       // the latter is not very useful :)
1:792f3de:       if (ResourceType.PACKAGE.toString().equals(reqName))
1:792f3de:       {
1:792f3de:         Map<String, String> filter = ManifestHeaderProcessor.parseFilter(requirement.getFilter());
1:792f3de:         // Grab and remove the package name, leaving only additional attributes.
1:792f3de:         String name = filter.remove(ResourceType.PACKAGE.toString());
1:792f3de:         if (requirement.isOptional()) { 
1:792f3de:           filter.put(Constants.RESOLUTION_DIRECTIVE + ":", Constants.RESOLUTION_OPTIONAL);
1:792f3de:         }
1:58f55bd:         ImportedPackage info = modellingManager.getImportedPackage(name, filter);
1:792f3de:         packageRequirements.add(info);
1:792f3de:       } else if (ResourceType.SERVICE.toString().equals(requirement.getName())) {
1:792f3de:         boolean optional = requirement.isOptional();
1:792f3de:         String iface;
1:792f3de:         String componentName;
1:792f3de:         String blueprintFilter;
1:792f3de:         String id = null;
1:792f3de:         boolean isMultiple = requirement.isMultiple();
1:792f3de: 
1:792f3de:         /* It would be much better to pull these keys out of ImportedServiceImpl, 
1:792f3de:          * or even values via static methods
1:792f3de:          */
1:792f3de:         Map<String, String> attrs = ManifestHeaderProcessor.parseFilter(requirement.getFilter());
1:792f3de:         iface = attrs.get(Constants.OBJECTCLASS);
1:792f3de:         componentName = attrs.get ("osgi.service.blueprint.compname");
1:792f3de:         blueprintFilter = requirement.getFilter();
1:792f3de: 
1:58f55bd:         ImportedService svc = modellingManager.getImportedService(optional, iface, componentName,
1:792f3de:             blueprintFilter, id, isMultiple);
1:792f3de:         serviceRequirements.add(svc);
1:792f3de:       } else if (ResourceType.BUNDLE.toString().equals(requirement.getName())) {
1:792f3de:         String filter =requirement.getFilter();
1:792f3de:         Map<String,String> atts = ManifestHeaderProcessor.parseFilter(filter);
1:792f3de:         if (requirement.isOptional()) { 
1:792f3de:           atts.put(Constants.RESOLUTION_DIRECTIVE + ":", Constants.RESOLUTION_OPTIONAL);
1:792f3de:         }
1:58f55bd:         bundleRequirements.add(modellingManager.getImportedBundle(filter, atts));
1:792f3de:       }
1:792f3de:     }
1:792f3de: 
1:792f3de:     for (Capability capability : r.getCapabilities())
1:792f3de:     {
1:792f3de:       Map<String, Object> props = new HashMap<String, Object>();
1:792f3de:       Property[] properties = capability.getProperties();
1:792f3de:       for (Property prop : properties) {
1:792f3de:         props.put(prop.getName(), prop.getValue());
1:792f3de:       }
1:792f3de:       if (ResourceType.PACKAGE.toString().equals(capability.getName())) 
1:792f3de:       {
1:792f3de:         // Grab and remove the package name, leaving only additional attributes.
1:792f3de:         Object pkg = props.remove(ResourceType.PACKAGE.toString());
1:792f3de:         // bundle symbolic name and version will be in additionalProps, so do not 
1:792f3de:         // need to be passed in separately. 
1:58f55bd:         ExportedPackage info = modellingManager.getExportedPackage(this, pkg.toString(), props);
1:792f3de:         packageCapabilities.add(info);
1:792f3de:       } else if (ResourceType.SERVICE.toString().equals(capability.getName())) { 
1:792f3de:         String name = null;   // we've lost this irretrievably
1:792f3de:         int ranking = 0;
1:792f3de:         Collection<String> ifaces;
1:792f3de:         String rankingText = (String) props.remove(Constants.SERVICE_RANKING);
1:792f3de:         if (rankingText != null) ranking = Integer.parseInt(rankingText);
1:792f3de:         // objectClass may come out as a String or String[]
1:792f3de:         Object rawObjectClass = props.remove (Constants.OBJECTCLASS);
1:ab65edd:         if (rawObjectClass == null) {
1:ab65edd:         	// get it from service
1:ab65edd:         	ifaces = Arrays.asList((String)props.get(ModellingConstants.OBR_SERVICE));
1:ab65edd:         } else {
1:ab65edd:         	if (rawObjectClass.getClass().isArray()) { 
1:ab65edd:         		ifaces = Arrays.asList((String[])rawObjectClass);
1:ab65edd:         	} else { 
1:ab65edd:         		ifaces = Arrays.asList((String)rawObjectClass);
1:ab65edd:         	}
1:792f3de:         }
1:792f3de: 
1:58f55bd:         ExportedService svc = modellingManager.getExportedService(name, ranking, ifaces, props);
1:792f3de:         serviceCapabilties.add(svc);
1:792f3de: 
1:792f3de:       }
1:792f3de:     }
1:792f3de:     logger.debug(LOG_EXIT, "ModelledBundleResource");
1:792f3de: 
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public ExportedBundle getExportedBundle() {
1:792f3de:     logger.debug(LOG_ENTRY, "AbstractExportedBundle");
1:792f3de:     logger.debug(LOG_EXIT, "AbstractExportedBundle",exportedBundle );
1:792f3de:     return exportedBundle;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public Collection<? extends ExportedPackage> getExportedPackages() {
1:792f3de:     logger.debug(LOG_ENTRY, "getExportedPackages");
1:792f3de:     logger.debug(LOG_EXIT,  "getExportedPackages", packageCapabilities );
1:792f3de:     return Collections.unmodifiableCollection(packageCapabilities);
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public Collection<? extends ExportedService> getExportedServices() {
1:792f3de:     logger.debug(LOG_ENTRY, "getExportedServices");
1:792f3de:     logger.debug(LOG_EXIT,  "getExportedServices", serviceCapabilties );
1:792f3de: 
1:792f3de:     return Collections.unmodifiableCollection(serviceCapabilties);
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public Collection<? extends ImportedPackage> getImportedPackages() {
1:792f3de:     logger.debug(LOG_ENTRY, "getImportedPackages");
1:792f3de:     logger.debug(LOG_EXIT,  "getImportedPackages", packageRequirements );
1:792f3de:     return Collections.unmodifiableCollection(packageRequirements);
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public Collection<? extends ImportedService> getImportedServices() {
1:792f3de:     logger.debug(LOG_ENTRY, "getImportedServices");
1:792f3de:     logger.debug(LOG_EXIT,  "getImportedServices", serviceRequirements );    
1:792f3de:     return Collections.unmodifiableCollection(serviceRequirements);
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public Collection<? extends ImportedBundle> getRequiredBundles() {
1:792f3de:     logger.debug(LOG_ENTRY, "getRequiredBundles");
1:792f3de:     logger.debug(LOG_EXIT,  "getRequiredBundles", bundleRequirements );    
1:792f3de:     return Collections.unmodifiableCollection(bundleRequirements);
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String getSymbolicName() {
1:792f3de:     logger.debug(LOG_ENTRY, "getSymbolicName");   
1:792f3de:     String result = resource.getSymbolicName();
1:792f3de:     logger.debug(LOG_EXIT,  "getSymbolicName", result );
1:792f3de: 
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String getLocation() {
1:792f3de:     logger.debug(LOG_ENTRY, "getLocation");   
1:792f3de:     logger.debug(LOG_EXIT,  "getLocation", resource.getURI());
1:792f3de:     return resource.getURI();
1:792f3de: 
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String getVersion() {
1:792f3de:     logger.debug(LOG_ENTRY, "getVersion");
1:792f3de:     String result = resource.getVersion().toString();
1:792f3de:     logger.debug(LOG_EXIT,  "getVersion", result);
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String toDeploymentString() {
1:792f3de:     logger.debug(LOG_ENTRY, "toDeploymentString");   
1:792f3de:     String result = getSymbolicName() + ";" + AppConstants.DEPLOYMENT_BUNDLE_VERSION + "=" + getVersion();
1:792f3de:     logger.debug(LOG_EXIT,  "toDeploymentString", result);
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public String toString() { 
1:792f3de:     logger.debug(LOG_ENTRY, "toString");
1:792f3de:     String result = toDeploymentString() + " uri=" + getLocation();
1:792f3de:     logger.debug(LOG_EXIT,  "toString", result);
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public ResourceType getType() {
1:792f3de:     logger.debug(LOG_ENTRY, "getType");   
1:792f3de:     logger.debug(LOG_EXIT,  "getType", type);
1:792f3de:     return type;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public ImportedBundle getFragmentHost() {
1:792f3de:     logger.debug(LOG_ENTRY, "getFragmentHost");
1:792f3de:     ImportedBundle result = exportedBundle.getFragmentHost();
1:792f3de:     logger.debug(LOG_EXIT,  "getFragmentHost", result);
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de:   public boolean isFragment() {
1:792f3de:     logger.debug(LOG_ENTRY, "isFragment");
1:792f3de:     boolean result = exportedBundle.isFragment();
1:792f3de:     logger.debug(LOG_EXIT,  "isFragment", result);
1:792f3de:     return result;
1:792f3de:   }
1:792f3de: 
1:792f3de: 
1:792f3de: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.InvalidAttributeException;
author:Holly Cummins
-------------------------------------------------------------------------------
commit:17170a0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.application.resolver.obr.ext;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:ab65edd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingConstants;
/////////////////////////////////////////////////////////////////////////
1:         if (rawObjectClass == null) {
1:         	// get it from service
1:         	ifaces = Arrays.asList((String)props.get(ModellingConstants.OBR_SERVICE));
1:         } else {
1:         	if (rawObjectClass.getClass().isArray()) { 
1:         		ifaces = Arrays.asList((String[])rawObjectClass);
1:         	} else { 
1:         		ifaces = Arrays.asList((String)rawObjectClass);
1:         	}
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingManager;
1: import org.apache.aries.application.modelling.utils.ModellingHelper;
/////////////////////////////////////////////////////////////////////////
1:   private final ModellingManager modellingManager;
1:   private final ModellingHelper modellingHelper;
1:   public ModelledBundleResource (Resource r, ModellingManager mm, ModellingHelper mh) throws InvalidAttributeException { 
1:     logger.debug(LOG_ENTRY, "ModelledBundleResource", new Object[]{r, mm, mh});
1:     modellingManager = mm;
1:     modellingHelper = mh;
/////////////////////////////////////////////////////////////////////////
1:         exportedBundles.add (modellingManager.getExportedBundle(sanitizedMap, modellingHelper.buildFragmentHost(
/////////////////////////////////////////////////////////////////////////
1:         ImportedPackage info = modellingManager.getImportedPackage(name, filter);
/////////////////////////////////////////////////////////////////////////
1:         ImportedService svc = modellingManager.getImportedService(optional, iface, componentName,
/////////////////////////////////////////////////////////////////////////
1:         bundleRequirements.add(modellingManager.getImportedBundle(filter, atts));
/////////////////////////////////////////////////////////////////////////
1:         ExportedPackage info = modellingManager.getExportedPackage(this, pkg.toString(), props);
/////////////////////////////////////////////////////////////////////////
1:         ExportedService svc = modellingManager.getExportedService(name, ranking, ifaces, props);
commit:792f3de
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.resolver.obr.impl;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: 
0: import org.apache.aries.application.management.InvalidAttributeException;
1: import org.apache.aries.application.modelling.ExportedBundle;
1: import org.apache.aries.application.modelling.ExportedPackage;
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.ImportedBundle;
1: import org.apache.aries.application.modelling.ImportedPackage;
1: import org.apache.aries.application.modelling.ImportedService;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.modelling.ResourceType;
0: import org.apache.aries.application.modelling.utils.ModellingManager;
0: import org.apache.aries.application.modelling.utils.ModellingUtils;
1: import org.apache.aries.application.resolver.internal.MessageUtil;
1: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Property;
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.apache.felix.bundlerepository.Resource;
1: import org.osgi.framework.Constants;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ModelledBundleResource implements ModelledResource {  
1:   private final Resource resource;
1:   private final ExportedBundle exportedBundle;
1:   private final Collection<ImportedPackage> packageRequirements;
1:   private final Collection<ImportedService> serviceRequirements;
1:   private final Collection<ExportedPackage> packageCapabilities;
1:   private final Collection<ExportedService> serviceCapabilties;
1:   private final Collection<ImportedBundle> bundleRequirements;
1:   private final ResourceType type;
1:   private final Logger logger = LoggerFactory.getLogger(ModelledBundleResource.class);
1: 
0:   public ModelledBundleResource (Resource r) throws InvalidAttributeException { 
1: 
0:     logger.debug(LOG_ENTRY, "ModelledBundleResource", r);
1:     resource = r;
1:     List<ExportedBundle> exportedBundles = new ArrayList<ExportedBundle>();
1:     ResourceType thisResourceType = ResourceType.BUNDLE;
1: 
1:     // We'll iterate through our Capabilities a second time below. We do this since we later
1:     // build an ExportedPackageImpl for which 'this' is the ModelledResource. 
1:     for (Capability cap : r.getCapabilities()) { 
1:       String capName = cap.getName();
1:       if (capName.equals(ResourceType.BUNDLE.toString())) { 
1:         @SuppressWarnings("unchecked")
1:         Property[] props = cap.getProperties();
1: 
1:         Map<String,String> sanitizedMap = new HashMap<String, String>();
1:         for(Property entry : props) {
1:           sanitizedMap.put(entry.getName(), entry.getValue());
1:         }
0:         exportedBundles.add (ModellingManager.getExportedBundle(sanitizedMap, ModellingUtils.buildFragmentHost(
1:             sanitizedMap.get(Constants.FRAGMENT_HOST))));
1:       } else if (cap.getName().equals(ResourceType.COMPOSITE.toString())) { 
1:         thisResourceType = ResourceType.COMPOSITE;
1:       }
1:     }
1:     type = thisResourceType;
1: 
1: 
1:     if (exportedBundles.size() == 0) {
1:       throw new InvalidAttributeException(MessageUtil.getMessage("NO_EXPORTED_BUNDLE", new Object[0]));
1:     } else if (exportedBundles.size() == 1) { 
1:       exportedBundle = exportedBundles.get(0);
1:     } else {  
1:       throw new InvalidAttributeException(MessageUtil.getMessage("TOO_MANY_EXPORTED_BUNDLES",
1:           new Object[0]));
1:     }   
1: 
1:     packageCapabilities = new HashSet<ExportedPackage>();
1:     packageRequirements = new HashSet<ImportedPackage>();
1:     serviceCapabilties = new HashSet<ExportedService>();
1:     serviceRequirements = new HashSet<ImportedService>();
1:     bundleRequirements = new HashSet<ImportedBundle>();
1: 
1:     for (Requirement requirement : r.getRequirements())
1:     {
1:       String reqName = requirement.getName();
1:       // Build ImportedPackageImpl, ImportedServiceImpl objects from the Resource's requirments. 
1:       // Parse the Requirement's filter and remove from the parsed Map all the entries
1:       // that we will pass in as explicit parameters to the ImportedServiceImpl or ImportedPackageImpl
1:       // constructor. 
1:       // (This does mean that we remove 'package=package.name' entries but not 'service=service' - 
1:       // the latter is not very useful :)
1:       if (ResourceType.PACKAGE.toString().equals(reqName))
1:       {
1:         Map<String, String> filter = ManifestHeaderProcessor.parseFilter(requirement.getFilter());
1:         // Grab and remove the package name, leaving only additional attributes.
1:         String name = filter.remove(ResourceType.PACKAGE.toString());
1:         if (requirement.isOptional()) { 
1:           filter.put(Constants.RESOLUTION_DIRECTIVE + ":", Constants.RESOLUTION_OPTIONAL);
1:         }
0:         ImportedPackage info = ModellingManager.getImportedPackage(name, filter);
1:         packageRequirements.add(info);
1:       } else if (ResourceType.SERVICE.toString().equals(requirement.getName())) {
1:         boolean optional = requirement.isOptional();
1:         String iface;
1:         String componentName;
1:         String blueprintFilter;
1:         String id = null;
1:         boolean isMultiple = requirement.isMultiple();
1: 
1:         /* It would be much better to pull these keys out of ImportedServiceImpl, 
1:          * or even values via static methods
1:          */
1:         Map<String, String> attrs = ManifestHeaderProcessor.parseFilter(requirement.getFilter());
1:         iface = attrs.get(Constants.OBJECTCLASS);
1:         componentName = attrs.get ("osgi.service.blueprint.compname");
1:         blueprintFilter = requirement.getFilter();
1: 
0:         ImportedService svc = ModellingManager.getImportedService(optional, iface, componentName,
1:             blueprintFilter, id, isMultiple);
1:         serviceRequirements.add(svc);
1:       } else if (ResourceType.BUNDLE.toString().equals(requirement.getName())) {
1:         String filter =requirement.getFilter();
1:         Map<String,String> atts = ManifestHeaderProcessor.parseFilter(filter);
1:         if (requirement.isOptional()) { 
1:           atts.put(Constants.RESOLUTION_DIRECTIVE + ":", Constants.RESOLUTION_OPTIONAL);
1:         }
0:         bundleRequirements.add(ModellingManager.getImportedBundle(filter, atts));
1:       }
1:     }
1: 
1:     for (Capability capability : r.getCapabilities())
1:     {
1:       Map<String, Object> props = new HashMap<String, Object>();
1:       Property[] properties = capability.getProperties();
1:       for (Property prop : properties) {
1:         props.put(prop.getName(), prop.getValue());
1:       }
1:       if (ResourceType.PACKAGE.toString().equals(capability.getName())) 
1:       {
1:         // Grab and remove the package name, leaving only additional attributes.
1:         Object pkg = props.remove(ResourceType.PACKAGE.toString());
1:         // bundle symbolic name and version will be in additionalProps, so do not 
1:         // need to be passed in separately. 
0:         ExportedPackage info = ModellingManager.getExportedPackage(this, pkg.toString(), props);
1:         packageCapabilities.add(info);
1:       } else if (ResourceType.SERVICE.toString().equals(capability.getName())) { 
1:         String name = null;   // we've lost this irretrievably
1:         int ranking = 0;
1:         Collection<String> ifaces;
1:         String rankingText = (String) props.remove(Constants.SERVICE_RANKING);
1:         if (rankingText != null) ranking = Integer.parseInt(rankingText);
1:         // objectClass may come out as a String or String[]
1:         Object rawObjectClass = props.remove (Constants.OBJECTCLASS);
0:         if (rawObjectClass.getClass().isArray()) { 
0:           ifaces = Arrays.asList((String[])rawObjectClass);
1:         } else { 
0:           ifaces = Arrays.asList((String)rawObjectClass);
1:         }
1: 
0:         ExportedService svc = ModellingManager.getExportedService(name, ranking, ifaces, props);
1:         serviceCapabilties.add(svc);
1: 
1:       }
1:     }
1:     logger.debug(LOG_EXIT, "ModelledBundleResource");
1: 
1:   }
1: 
1: 
1:   public ExportedBundle getExportedBundle() {
1:     logger.debug(LOG_ENTRY, "AbstractExportedBundle");
1:     logger.debug(LOG_EXIT, "AbstractExportedBundle",exportedBundle );
1:     return exportedBundle;
1:   }
1: 
1: 
1:   public Collection<? extends ExportedPackage> getExportedPackages() {
1:     logger.debug(LOG_ENTRY, "getExportedPackages");
1:     logger.debug(LOG_EXIT,  "getExportedPackages", packageCapabilities );
1:     return Collections.unmodifiableCollection(packageCapabilities);
1:   }
1: 
1: 
1:   public Collection<? extends ExportedService> getExportedServices() {
1:     logger.debug(LOG_ENTRY, "getExportedServices");
1:     logger.debug(LOG_EXIT,  "getExportedServices", serviceCapabilties );
1: 
1:     return Collections.unmodifiableCollection(serviceCapabilties);
1:   }
1: 
1: 
1:   public Collection<? extends ImportedPackage> getImportedPackages() {
1:     logger.debug(LOG_ENTRY, "getImportedPackages");
1:     logger.debug(LOG_EXIT,  "getImportedPackages", packageRequirements );
1:     return Collections.unmodifiableCollection(packageRequirements);
1:   }
1: 
1: 
1:   public Collection<? extends ImportedService> getImportedServices() {
1:     logger.debug(LOG_ENTRY, "getImportedServices");
1:     logger.debug(LOG_EXIT,  "getImportedServices", serviceRequirements );    
1:     return Collections.unmodifiableCollection(serviceRequirements);
1:   }
1: 
1: 
1:   public Collection<? extends ImportedBundle> getRequiredBundles() {
1:     logger.debug(LOG_ENTRY, "getRequiredBundles");
1:     logger.debug(LOG_EXIT,  "getRequiredBundles", bundleRequirements );    
1:     return Collections.unmodifiableCollection(bundleRequirements);
1:   }
1: 
1: 
1:   public String getSymbolicName() {
1:     logger.debug(LOG_ENTRY, "getSymbolicName");   
1:     String result = resource.getSymbolicName();
1:     logger.debug(LOG_EXIT,  "getSymbolicName", result );
1: 
1:     return result;
1:   }
1: 
1: 
1:   public String getLocation() {
1:     logger.debug(LOG_ENTRY, "getLocation");   
1:     logger.debug(LOG_EXIT,  "getLocation", resource.getURI());
1:     return resource.getURI();
1: 
1:   }
1: 
1: 
1:   public String getVersion() {
1:     logger.debug(LOG_ENTRY, "getVersion");
1:     String result = resource.getVersion().toString();
1:     logger.debug(LOG_EXIT,  "getVersion", result);
1:     return result;
1:   }
1: 
1: 
1:   public String toDeploymentString() {
1:     logger.debug(LOG_ENTRY, "toDeploymentString");   
1:     String result = getSymbolicName() + ";" + AppConstants.DEPLOYMENT_BUNDLE_VERSION + "=" + getVersion();
1:     logger.debug(LOG_EXIT,  "toDeploymentString", result);
1:     return result;
1:   }
1: 
1: 
1:   public String toString() { 
1:     logger.debug(LOG_ENTRY, "toString");
1:     String result = toDeploymentString() + " uri=" + getLocation();
1:     logger.debug(LOG_EXIT,  "toString", result);
1:     return result;
1:   }
1: 
1: 
1:   public ResourceType getType() {
1:     logger.debug(LOG_ENTRY, "getType");   
1:     logger.debug(LOG_EXIT,  "getType", type);
1:     return type;
1:   }
1: 
1: 
1:   public ImportedBundle getFragmentHost() {
1:     logger.debug(LOG_ENTRY, "getFragmentHost");
1:     ImportedBundle result = exportedBundle.getFragmentHost();
1:     logger.debug(LOG_EXIT,  "getFragmentHost", result);
1:     return result;
1:   }
1: 
1: 
1:   public boolean isFragment() {
1:     logger.debug(LOG_ENTRY, "isFragment");
1:     boolean result = exportedBundle.isFragment();
1:     logger.debug(LOG_EXIT,  "isFragment", result);
1:     return result;
1:   }
1: 
1: 
1: }
============================================================================