1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:dc5d52f: package org.apache.aries.subsystem.core.internal;
1:dc5d52f: 
1:d6eb080: import java.io.File;
1:d6eb080: import java.io.IOException;
1:d6eb080: import java.net.MalformedURLException;
1:d6eb080: import java.net.URI;
1:d6eb080: import java.net.URL;
1:d6eb080: import java.net.URLClassLoader;
1:dc5d52f: import java.security.PrivilegedAction;
1:dc5d52f: import java.util.HashMap;
1:d6eb080: import java.util.Locale;
1:dc5d52f: import java.util.Map;
1:dc5d52f: import java.util.Map.Entry;
1:d6eb080: import java.util.ResourceBundle;
1:dc5d52f: 
1:dc5d52f: import org.apache.aries.subsystem.core.archive.Header;
1:dc5d52f: 
1:dc5d52f: public class GetSubsystemHeadersAction implements PrivilegedAction<Map<String, String>> {
1:d6eb080: 	private final Locale locale;
1:5bd3bf6: 	private final BasicSubsystem subsystem;
1:dc5d52f: 	
1:d6eb080: 	public GetSubsystemHeadersAction(BasicSubsystem subsystem, Locale locale) {
1:dc5d52f: 		this.subsystem = subsystem;
1:d6eb080: 		this.locale = locale;
1:dc5d52f: 	}
1:dc5d52f: 	
1:dc5d52f: 	@Override
1:dc5d52f: 	public Map<String, String> run() {
1:777b216: 		Map<String, Header<?>> headers = subsystem.getSubsystemManifest().getHeaders();
1:dc5d52f: 		Map<String, String> result = new HashMap<String, String>(headers.size());
1:dc5d52f: 		for (Entry<String, Header<?>> entry: headers.entrySet()) {
1:dc5d52f: 			Header<?> value = entry.getValue();
1:d6eb080: 			result.put(entry.getKey(), translate(value.getValue()));
1:dc5d52f: 		}
1:dc5d52f: 		return result;
1:dc5d52f: 	}
1:dc5d52f: 
1:d6eb080: 	private String translate(String value) {
1:d6eb080: 		if (locale == null || value == null || !value.startsWith("%"))
1:d6eb080: 			return value;
1:d6eb080: 		String localizationStr = subsystem.getSubsystemManifest().getSubsystemLocalizationHeader().getValue();
1:d6eb080: 		File rootDir;
1:d6eb080: 		File localizationFile;
1:d6eb080: 		try {
1:d6eb080: 			rootDir = subsystem.getDirectory().getCanonicalFile();
1:d6eb080: 			localizationFile = new File(rootDir, localizationStr).getCanonicalFile();
1:d6eb080: 		}
1:d6eb080: 		catch (IOException e) {
1:d6eb080: 			// TODO Log this. Particularly a problem if rootDir throws an
1:d6eb080: 			// exception as corruption has occurred. May want to let that
1:d6eb080: 			// propagate as a runtime exception.
1:d6eb080: 			return value;
1:d6eb080: 		}
1:d6eb080: 		URI rootUri = rootDir.toURI();
1:d6eb080: 		// The last segment of the Subsystem-Localization header value is the
1:d6eb080: 		// base file name. The directory is its parent.
1:d6eb080: 		URI localizationUri = localizationFile.getParentFile().toURI();
1:d6eb080: 		if (rootUri.relativize(localizationUri).equals(localizationUri))
1:d6eb080: 			// TODO Log this. The value of the Subsystem-Localization header
1:d6eb080: 			// is not relative to the subsystem root directory.
1:d6eb080: 			return value;
1:d6eb080: 		URL localizationUrl;
1:d6eb080: 		try {
1:d6eb080: 			localizationUrl = localizationUri.toURL();
1:d6eb080: 		}
1:d6eb080: 		catch (MalformedURLException e) {
1:d6eb080: 			// TODO Should never happen but log it anyway.
1:d6eb080: 			return value;
1:d6eb080: 		}
1:d6eb080: 		URLClassLoader classLoader = new URLClassLoader(new URL[]{localizationUrl});
1:d6eb080: 		try {
1:d6eb080: 			ResourceBundle rb = ResourceBundle.getBundle(localizationFile.getName(), locale, classLoader);
1:d6eb080: 			return rb.getString(value.substring(1));
1:d6eb080: 		}
1:d6eb080: 		catch (Exception e) {
1:d6eb080: 			return value;
1:d6eb080: 		}
1:d6eb080: 	}
1:dc5d52f: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import java.net.URI;
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.util.Locale;
1: import java.util.ResourceBundle;
1: 	private final Locale locale;
1: 	public GetSubsystemHeadersAction(BasicSubsystem subsystem, Locale locale) {
1: 		this.locale = locale;
/////////////////////////////////////////////////////////////////////////
1: 			result.put(entry.getKey(), translate(value.getValue()));
1: 	private String translate(String value) {
1: 		if (locale == null || value == null || !value.startsWith("%"))
1: 			return value;
1: 		String localizationStr = subsystem.getSubsystemManifest().getSubsystemLocalizationHeader().getValue();
1: 		File rootDir;
1: 		File localizationFile;
1: 		try {
1: 			rootDir = subsystem.getDirectory().getCanonicalFile();
1: 			localizationFile = new File(rootDir, localizationStr).getCanonicalFile();
1: 		}
1: 		catch (IOException e) {
1: 			// TODO Log this. Particularly a problem if rootDir throws an
1: 			// exception as corruption has occurred. May want to let that
1: 			// propagate as a runtime exception.
1: 			return value;
1: 		}
1: 		URI rootUri = rootDir.toURI();
1: 		// The last segment of the Subsystem-Localization header value is the
1: 		// base file name. The directory is its parent.
1: 		URI localizationUri = localizationFile.getParentFile().toURI();
1: 		if (rootUri.relativize(localizationUri).equals(localizationUri))
1: 			// TODO Log this. The value of the Subsystem-Localization header
1: 			// is not relative to the subsystem root directory.
1: 			return value;
1: 		URL localizationUrl;
1: 		try {
1: 			localizationUrl = localizationUri.toURL();
1: 		}
1: 		catch (MalformedURLException e) {
1: 			// TODO Should never happen but log it anyway.
1: 			return value;
1: 		}
1: 		URLClassLoader classLoader = new URLClassLoader(new URL[]{localizationUrl});
1: 		try {
1: 			ResourceBundle rb = ResourceBundle.getBundle(localizationFile.getName(), locale, classLoader);
1: 			return rb.getString(value.substring(1));
1: 		}
1: 		catch (Exception e) {
1: 			return value;
1: 		}
1: 	}
author:John Ross
-------------------------------------------------------------------------------
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: 	private final BasicSubsystem subsystem;
0: 	public GetSubsystemHeadersAction(BasicSubsystem subsystem) {
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: 		Map<String, Header<?>> headers = subsystem.getSubsystemManifest().getHeaders();
commit:dc5d52f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.security.PrivilegedAction;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: 
1: import org.apache.aries.subsystem.core.archive.Header;
1: 
1: public class GetSubsystemHeadersAction implements PrivilegedAction<Map<String, String>> {
0: 	private final AriesSubsystem subsystem;
1: 	
0: 	public GetSubsystemHeadersAction(AriesSubsystem subsystem) {
1: 		this.subsystem = subsystem;
1: 	}
1: 	
1: 	@Override
1: 	public Map<String, String> run() {
0: 		Map<String, Header<?>> headers = subsystem.getArchive().getSubsystemManifest().getHeaders();
1: 		Map<String, String> result = new HashMap<String, String>(headers.size());
1: 		for (Entry<String, Header<?>> entry: headers.entrySet()) {
1: 			Header<?> value = entry.getValue();
0: 			result.put(entry.getKey(), value.getValue());
1: 		}
1: 		return result;
1: 	}
1: 
1: }
============================================================================