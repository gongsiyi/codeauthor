1:dbcd0ed: package org.apache.aries.subsystem.ctt.itests;
2:36b1234: 
1:35a1b63: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_SYMBOLICNAME;
1:36b1234: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE;
1:36b1234: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION;
1:36b1234: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE;
1:36b1234: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_FEATURE;
1:36b1234: 
1:35a1b63: import java.io.File;
1:35a1b63: import java.util.Collection;
1:35a1b63: import java.util.HashMap;
1:35a1b63: import java.util.Map;
1:36b1234: 
1:dbcd0ed: import org.junit.Test;
1:dbcd0ed: import org.osgi.framework.Constants;
1:35a1b63: import org.osgi.framework.namespace.IdentityNamespace;
1:dbcd0ed: import org.osgi.service.subsystem.Subsystem;
1:dbcd0ed: import org.osgi.service.subsystem.SubsystemConstants;
1:36b1234: 
2:dbcd0ed: /*
1:dbcd0ed:  *  E) Test acceptDependencies policy
2:dbcd0ed:     1. Root is the only acceptDependencies policy
4:dbcd0ed:        a. - Register repository R2
4:dbcd0ed:           - Using the Root subsystem, install a composite subsystem S1 with 
4:dbcd0ed:             - no content bundles 
2:dbcd0ed:             - imports package x, requires bundle A and requires capability y
4:dbcd0ed:           - Using the subsystem S1, install an application S2 with
4:dbcd0ed:             - content bundles C, D and E
2:dbcd0ed:           - Verify that bundles A and B got installed into the Root Subsystem
3:dbcd0ed:           - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
3:dbcd0ed:           - Repeat test with S2 as a composite that imports package x, requires bundle A and required capability y
4:dbcd0ed:           - Repeat test with S2 as a feature
2:dbcd0ed:        b. - same as 4E1a except S2 is a content resource of S1
3:dbcd0ed:           - There are 6 combinations to test
3:dbcd0ed:             - app_app, app_comp, app_feat, comp_app, comp_comp, comp_feat
1:35a1b63:     
2:dbcd0ed:  */
1:35a1b63: public class SubsystemDependency_4E1Test extends SubsystemDependencyTestBase 
2:dbcd0ed: {
1:36b1234: 	private static final String SUBSYSTEM_4E_S1_COMP = "sdt_composite4e_s1.esa";
1:36b1234: 	private static final String SUBSYSTEM_4E_S2_APP = "sdt_application4e_s2.esa";
1:36b1234: 	private static final String SUBSYSTEM_4E_S2_COMP = "sdt_composite4e_s2.esa";
1:36b1234: 	private static final String SUBSYSTEM_4E_S2_FEATURE = "sdt_feature4e_s2.esa";
1:36b1234: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception
1:dbcd0ed: 	{
1:57b6627: 		super.createApplications();
1:57b6627: 		createComposite4E_S1();
1:57b6627: 		createApplication4E_S2();
1:57b6627: 		createComposite4E_S2();
1:57b6627: 		createFeature4E_S2();
1:dbcd0ed: 		registerRepositoryR2();
1:36b1234: 	}
1:36b1234: 	
1:dbcd0ed: 	/*
1:dbcd0ed: 	 * Using the subsystem S1, install an application S2 with
1:dbcd0ed:          - content bundles C, D and E
1:dbcd0ed:        - Verify that bundles A and B got installed into the Root Subsystem
1:dbcd0ed: 	 */
1:dbcd0ed: 	@Test
1:dbcd0ed: 	public void verifyBundlesAandBInstalledIntoRootSubsystem() throws Exception
1:dbcd0ed: 	{
1:36b1234: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1_COMP);
1:dbcd0ed: 		startSubsystem(s1);
1:36b1234: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2_APP);
1:dbcd0ed: 		startSubsystem(s2);
1:36b1234: 		
1:dbcd0ed: 		verifyBundlesInstalled (bundleContext, "Root", BUNDLE_A, BUNDLE_B);
1:36b1234: 		
1:36b1234: 		stop(s1, s2);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	
1:36b1234: 	@Test
1:36b1234: 	public void verifyExpectedWiringsForS2_App() throws Exception
1:36b1234: 	{
1:36b1234: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1_COMP);
1:36b1234: 		startSubsystem(s1);
1:36b1234: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2_APP);
1:36b1234: 		startSubsystem(s2);
1:36b1234: 		
3:36b1234: 		// - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1:36b1234: 		verifySinglePackageWiring (s2, BUNDLE_C, "x", BUNDLE_A);
2:36b1234: 		verifyRequireBundleWiring (s2, BUNDLE_D, BUNDLE_A);
1:36b1234: 		verifyCapabilityWiring (s2, BUNDLE_E, "y", BUNDLE_B);
1:36b1234: 
1:36b1234: 		stop(s1, s2);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	// - Repeat test with S2 as a composite that 
1:36b1234: 	//     imports package x, requires bundle A and required capability y
1:36b1234: 	@Test
1:36b1234: 	public void verifyExpectedWiringsForS2_Composite() throws Exception
1:36b1234: 	{
1:36b1234: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1_COMP);
1:36b1234: 		startSubsystem(s1);
1:36b1234: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2_COMP);
1:36b1234: 		startSubsystem(s2);
1:35a1b63: 		checkBundlesCDandEWiredToAandB(s2);
1:36b1234: 		stop(s1, s2);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	// - Repeat test with S2 as a feature
1:36b1234: 	@Test
1:36b1234: 	public void verifyExpectedWiringsForS2_Feature() throws Exception
1:36b1234: 	{
1:36b1234: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1_COMP);
1:36b1234: 		startSubsystem(s1);
1:36b1234: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2_FEATURE);
1:36b1234: 		startSubsystem(s2);
1:35a1b63: 		checkBundlesCDandEWiredToAandB (s2);
1:36b1234: 		stop(s1, s2);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	// b. - same as 4E1a except S2 is a content resource of S1
1:36b1234:     //  - There are 6 combinations to test
1:36b1234:     //   - app_app, app_comp, app_feat, comp_app, comp_comp, comp_feat
1:36b1234: 
1:36b1234: 	@Test
1:36b1234: 	public void FourE1b_App_App() throws Exception
1:36b1234: 	{
1:36b1234: 		combinationTest ("4eS1_App_App.esa", SUBSYSTEM_TYPE_APPLICATION, SUBSYSTEM_4E_S2_APP, SUBSYSTEM_TYPE_APPLICATION);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	@Test
1:36b1234: 	public void FourE1b_App_Comp() throws Exception
1:36b1234: 	{
1:36b1234: 		combinationTest ("4eS1_App_Comp.esa", SUBSYSTEM_TYPE_APPLICATION, SUBSYSTEM_4E_S2_COMP, SUBSYSTEM_TYPE_COMPOSITE);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	@Test
1:36b1234: 	public void FourE1b_App_Feature() throws Exception
1:36b1234: 	{
1:36b1234: 		combinationTest ("4eS1_App_Feature.esa", SUBSYSTEM_TYPE_APPLICATION, SUBSYSTEM_4E_S2_FEATURE, SUBSYSTEM_TYPE_FEATURE);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	@Test
1:36b1234: 	public void FourE1b_Comp_App() throws Exception
1:36b1234: 	{
1:36b1234: 		combinationTest ("4eS1_Comp_App.esa", SUBSYSTEM_TYPE_COMPOSITE, SUBSYSTEM_4E_S2_APP, SUBSYSTEM_TYPE_APPLICATION);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	@Test
1:36b1234: 	public void FourE1b_Comp_Comp() throws Exception
1:36b1234: 	{
1:36b1234: 		combinationTest ("4eS1_Comp_Comp.esa", SUBSYSTEM_TYPE_COMPOSITE, SUBSYSTEM_4E_S2_COMP, SUBSYSTEM_TYPE_COMPOSITE);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	@Test
1:36b1234: 	public void FourE1b_Comp_Feature() throws Exception
1:36b1234: 	{
1:36b1234: 		combinationTest ("4eS1_Comp_Feature.esa", SUBSYSTEM_TYPE_COMPOSITE, SUBSYSTEM_4E_S2_FEATURE, SUBSYSTEM_TYPE_FEATURE);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	/*
1:36b1234: 	 * Build a subsystem called combinedSubsystemName with a parent of parentType and a child of childType
1:36b1234: 	 * Start the subsystem
1:36b1234: 	 * runChecks on the comination
1:36b1234: 	 * Stop and uninstall the combination
1:36b1234: 	 */
1:36b1234: 	private void combinationTest (String combinedSubsystemName, String parentType, String childName, String childType) throws Exception
1:36b1234: 	{
1:36b1234: 		createCombinedSubsystem (combinedSubsystemName, parentType, childName, childType);
1:36b1234: 		Subsystem s = installSubsystemFromFile(combinedSubsystemName);
1:36b1234: 		startSubsystem(s);
1:36b1234: 		
1:36b1234: 		Collection<Subsystem> children = s.getChildren();  
1:36b1234: 		// we only expect one child
1:36b1234: 		Subsystem child = children.iterator().next();
1:35a1b63: 		checkBundlesCDandEWiredToAandB (child);
1:36b1234: 		
1:36b1234: 		stopSubsystem(s);
1:36b1234: 		uninstallSubsystem(s);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	/*
1:36b1234: 	 * Create a nested parent/child subsystem with symbolicName, where parent is of type and child is the 
1:36b1234: 	 * previously-created childSubsystem
1:36b1234: 	 */
1:36b1234: 	private void createCombinedSubsystem (String symbolicName, String parentType, String childSubsystem, String childSubsystemType) throws Exception
1:36b1234: 	{
1:35a1b63: 		File f = new File (symbolicName);
1:35a1b63: 		if (!f.exists()) { 
1:35a1b63: 			Map<String, String> attributes = new HashMap<String, String>();
1:35a1b63: 			attributes.put(SUBSYSTEM_SYMBOLICNAME, symbolicName);
1:35a1b63: 			attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1:35a1b63: 			attributes.put(SUBSYSTEM_TYPE, parentType);
1:35a1b63: 			if (parentType == SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE) { 
1:35a1b63: 				attributes.put(Constants.IMPORT_PACKAGE, "x");
1:35a1b63: 				attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
1:35a1b63: 				attributes.put(Constants.REQUIRE_CAPABILITY, "y");
1:35a1b63: 			}
1:35a1b63: 			StringBuffer subsystemContent = new StringBuffer();
1:35a1b63: 			subsystemContent.append (childSubsystem + ";" + Constants.VERSION_ATTRIBUTE 
1:35a1b63: 					+ "=\"[1.0.0,1.0.0]\";");
1:35a1b63: 			// I'm not sure that this is the best "type" attribute to use, but it will do. 
1:35a1b63: 			subsystemContent.append(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE + "=");
1:35a1b63: 			subsystemContent.append(childSubsystemType);
1:35a1b63: 			attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, subsystemContent.toString());
1:35a1b63: 			createManifest(symbolicName + ".mf", attributes);
1:35a1b63: 			createSubsystem(symbolicName, childSubsystem);
1:36b1234: 		}
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	private void stop(Subsystem s1, Subsystem s2) throws Exception
1:36b1234: 	{
1:dbcd0ed: 		stopSubsystem(s2);
1:dbcd0ed: 		stopSubsystem(s1);
1:dbcd0ed: 		uninstallSubsystem(s2);
1:dbcd0ed: 		uninstallSubsystem(s1);
3:dbcd0ed: 	}
1:36b1234: 	
1:36b1234: 	
1:dbcd0ed: 	/*
1:dbcd0ed: 	 * a composite subsystem S1 with 
1:dbcd0ed:          - no content bundles 
1:dbcd0ed:          - imports package x, requires bundle A and requires capability y
1:dbcd0ed: 	 */
1:dbcd0ed: 	private static void createComposite4E_S1() throws Exception
1:36b1234: 	{
1:36b1234: 		Map<String, String> attributes = new HashMap<String, String>();
1:36b1234: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S1_COMP);
1:36b1234: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1:36b1234: 		attributes.put(SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:36b1234: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1:36b1234: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
1:36b1234: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y"); 
1:36b1234: 		createManifest(SUBSYSTEM_4E_S1_COMP + ".mf", attributes);
1:36b1234: 		createSubsystem(SUBSYSTEM_4E_S1_COMP);
1:dbcd0ed: 	}
1:36b1234: 
1:dbcd0ed: 	/* an application S2 with
1:dbcd0ed:     - content bundles C, D and E */
1:dbcd0ed: 	private static void createApplication4E_S2() throws Exception
1:dbcd0ed: 	{
2:dbcd0ed: 		Map<String, String> attributes = new HashMap<String, String>();
1:36b1234: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S2_APP);
1:36b1234: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1:36b1234: 		attributes.put(SUBSYSTEM_TYPE, SUBSYSTEM_TYPE_APPLICATION);
1:dbcd0ed: 		String appContent = BUNDLE_C + ", " + BUNDLE_D + ", " + BUNDLE_E;
1:dbcd0ed: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1:36b1234: 		createManifest(SUBSYSTEM_4E_S2_APP + ".mf", attributes);
1:36b1234: 		createSubsystem(SUBSYSTEM_4E_S2_APP);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	/* a feature S2 with
1:36b1234:     - content bundles C, D and E */
1:36b1234: 	private static void createFeature4E_S2() throws Exception
1:36b1234: 	{
1:36b1234: 		Map<String, String> attributes = new HashMap<String, String>();
1:36b1234: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S2_FEATURE);
2:36b1234: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1:36b1234: 		attributes.put(SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:36b1234: 		String appContent = BUNDLE_C + ", " + BUNDLE_D + ", " + BUNDLE_E;
1:36b1234: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1:36b1234: 		createManifest(SUBSYSTEM_4E_S2_FEATURE + ".mf", attributes);
1:36b1234: 		createSubsystem(SUBSYSTEM_4E_S2_FEATURE);
1:36b1234: 	}
1:36b1234: 	
1:36b1234: 	/* a composite S2 that 
1:36b1234: 	//     imports package x, requires bundle A and required capability y */
1:36b1234: 	private static void createComposite4E_S2() throws Exception
1:36b1234: 	{
1:36b1234: 		Map<String, String> attributes = new HashMap<String, String>();
1:36b1234: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S2_COMP);
1:36b1234: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1:36b1234: 		attributes.put(SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:36b1234: 		String appContent = BUNDLE_C + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1:36b1234: 			+ ", " + BUNDLE_D + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1:36b1234: 			+ ", " + BUNDLE_E + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\"";
1:36b1234: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1:36b1234: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1:36b1234: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
1:36b1234: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y"); 
1:36b1234: 		createManifest(SUBSYSTEM_4E_S2_COMP + ".mf", attributes);
1:36b1234: 		createSubsystem(SUBSYSTEM_4E_S2_COMP);
1:dbcd0ed: 	}
1:dbcd0ed: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception
1: 		super.createApplications();
1: 		createComposite4E_S1();
1: 		createApplication4E_S2();
1: 		createComposite4E_S2();
1: 		createFeature4E_S2();
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:35a1b63
/////////////////////////////////////////////////////////////////////////
1: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_SYMBOLICNAME;
1: import java.io.File;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: import org.osgi.framework.namespace.IdentityNamespace;
/////////////////////////////////////////////////////////////////////////
1:     
1: public class SubsystemDependency_4E1Test extends SubsystemDependencyTestBase 
/////////////////////////////////////////////////////////////////////////
1: 		checkBundlesCDandEWiredToAandB(s2);
/////////////////////////////////////////////////////////////////////////
1: 		checkBundlesCDandEWiredToAandB (s2);
/////////////////////////////////////////////////////////////////////////
1: 		checkBundlesCDandEWiredToAandB (child);
1: 		File f = new File (symbolicName);
1: 		if (!f.exists()) { 
1: 			Map<String, String> attributes = new HashMap<String, String>();
1: 			attributes.put(SUBSYSTEM_SYMBOLICNAME, symbolicName);
1: 			attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1: 			attributes.put(SUBSYSTEM_TYPE, parentType);
1: 			if (parentType == SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE) { 
1: 				attributes.put(Constants.IMPORT_PACKAGE, "x");
1: 				attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
1: 				attributes.put(Constants.REQUIRE_CAPABILITY, "y");
1: 			}
1: 			StringBuffer subsystemContent = new StringBuffer();
1: 			subsystemContent.append (childSubsystem + ";" + Constants.VERSION_ATTRIBUTE 
1: 					+ "=\"[1.0.0,1.0.0]\";");
1: 			// I'm not sure that this is the best "type" attribute to use, but it will do. 
1: 			subsystemContent.append(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE + "=");
1: 			subsystemContent.append(childSubsystemType);
1: 			attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, subsystemContent.toString());
1: 			createManifest(symbolicName + ".mf", attributes);
1: 			createSubsystem(symbolicName, childSubsystem);
/////////////////////////////////////////////////////////////////////////
commit:36b1234
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collection;
1: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE;
1: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION;
1: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE;
1: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_TYPE_FEATURE;
0: import static org.osgi.service.subsystem.SubsystemConstants.SUBSYSTEM_SYMBOLICNAME;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 	private static final String SUBSYSTEM_4E_S1_COMP = "sdt_composite4e_s1.esa";
1: 	private static final String SUBSYSTEM_4E_S2_APP = "sdt_application4e_s2.esa";
1: 	private static final String SUBSYSTEM_4E_S2_COMP = "sdt_composite4e_s2.esa";
1: 	private static final String SUBSYSTEM_4E_S2_FEATURE = "sdt_feature4e_s2.esa";
/////////////////////////////////////////////////////////////////////////
0: 			createComposite4E_S2();
0: 			createFeature4E_S2();
/////////////////////////////////////////////////////////////////////////
1: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1_COMP);
1: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2_APP);
1: 		stop(s1, s2);
1: 	}
1: 	
1: 	
1: 	@Test
1: 	public void verifyExpectedWiringsForS2_App() throws Exception
1: 	{
1: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1_COMP);
1: 		startSubsystem(s1);
1: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2_APP);
1: 		startSubsystem(s2);
1: 		
1: 		// - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1: 		verifySinglePackageWiring (s2, BUNDLE_C, "x", BUNDLE_A);
1: 		verifyRequireBundleWiring (s2, BUNDLE_D, BUNDLE_A);
1: 		verifyCapabilityWiring (s2, BUNDLE_E, "y", BUNDLE_B);
1: 
1: 		stop(s1, s2);
1: 	}
1: 	
1: 	// - Repeat test with S2 as a composite that 
1: 	//     imports package x, requires bundle A and required capability y
1: 	@Test
1: 	public void verifyExpectedWiringsForS2_Composite() throws Exception
1: 	{
1: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1_COMP);
1: 		startSubsystem(s1);
1: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2_COMP);
1: 		startSubsystem(s2);
1: 		
1: 		// - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
0: 		/*verifySinglePackageWiring (s2, BUNDLE_C, "x", BUNDLE_A);
1: 		verifyRequireBundleWiring (s2, BUNDLE_D, BUNDLE_A);
0: 		verifyCapabilityWiring (s2, BUNDLE_E, "y", BUNDLE_B);*/
0: 		runChecks(s2);
1: 		
1: 		stop(s1, s2);
1: 	}
1: 	
1: 	// - Repeat test with S2 as a feature
1: 	@Test
1: 	public void verifyExpectedWiringsForS2_Feature() throws Exception
1: 	{
1: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1_COMP);
1: 		startSubsystem(s1);
1: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2_FEATURE);
1: 		startSubsystem(s2);
0: 		runChecks (s2);
1: 		stop(s1, s2);
1: 	}
1: 	
1: 	// b. - same as 4E1a except S2 is a content resource of S1
1:     //  - There are 6 combinations to test
1:     //   - app_app, app_comp, app_feat, comp_app, comp_comp, comp_feat
1: 
1: 	@Test
1: 	public void FourE1b_App_App() throws Exception
1: 	{
1: 		combinationTest ("4eS1_App_App.esa", SUBSYSTEM_TYPE_APPLICATION, SUBSYSTEM_4E_S2_APP, SUBSYSTEM_TYPE_APPLICATION);
1: 	}
1: 	
1: 	@Test
1: 	public void FourE1b_App_Comp() throws Exception
1: 	{
1: 		combinationTest ("4eS1_App_Comp.esa", SUBSYSTEM_TYPE_APPLICATION, SUBSYSTEM_4E_S2_COMP, SUBSYSTEM_TYPE_COMPOSITE);
1: 	}
1: 	
1: 	@Test
1: 	public void FourE1b_App_Feature() throws Exception
1: 	{
1: 		combinationTest ("4eS1_App_Feature.esa", SUBSYSTEM_TYPE_APPLICATION, SUBSYSTEM_4E_S2_FEATURE, SUBSYSTEM_TYPE_FEATURE);
1: 	}
1: 	
1: 	@Test
1: 	public void FourE1b_Comp_App() throws Exception
1: 	{
1: 		combinationTest ("4eS1_Comp_App.esa", SUBSYSTEM_TYPE_COMPOSITE, SUBSYSTEM_4E_S2_APP, SUBSYSTEM_TYPE_APPLICATION);
1: 	}
1: 	
1: 	@Test
1: 	public void FourE1b_Comp_Comp() throws Exception
1: 	{
1: 		combinationTest ("4eS1_Comp_Comp.esa", SUBSYSTEM_TYPE_COMPOSITE, SUBSYSTEM_4E_S2_COMP, SUBSYSTEM_TYPE_COMPOSITE);
1: 	}
1: 	
1: 	@Test
1: 	public void FourE1b_Comp_Feature() throws Exception
1: 	{
1: 		combinationTest ("4eS1_Comp_Feature.esa", SUBSYSTEM_TYPE_COMPOSITE, SUBSYSTEM_4E_S2_FEATURE, SUBSYSTEM_TYPE_FEATURE);
1: 	}
1: 	
1: 	/*
1: 	 * Build a subsystem called combinedSubsystemName with a parent of parentType and a child of childType
1: 	 * Start the subsystem
1: 	 * runChecks on the comination
1: 	 * Stop and uninstall the combination
1: 	 */
1: 	private void combinationTest (String combinedSubsystemName, String parentType, String childName, String childType) throws Exception
1: 	{
1: 		createCombinedSubsystem (combinedSubsystemName, parentType, childName, childType);
1: 		Subsystem s = installSubsystemFromFile(combinedSubsystemName);
1: 		startSubsystem(s);
1: 		
1: 		Collection<Subsystem> children = s.getChildren();  
1: 		// we only expect one child
1: 		Subsystem child = children.iterator().next();
0: 		runChecks (child);
1: 		
1: 		stopSubsystem(s);
1: 		uninstallSubsystem(s);
1: 	}
1: 	
1: 	
0: 	private void runChecks (Subsystem child) 
1: 	{
1: 		// - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
0: 		verifySinglePackageWiring (child, BUNDLE_C, "x", BUNDLE_A);
0: 		verifyRequireBundleWiring (child, BUNDLE_D, BUNDLE_A);
0: 		verifyCapabilityWiring (child, BUNDLE_E, "y", BUNDLE_B);
1: 	}
1: 	
1: 
1: 	/*
1: 	 * Create a nested parent/child subsystem with symbolicName, where parent is of type and child is the 
1: 	 * previously-created childSubsystem
1: 	 */
1: 	private void createCombinedSubsystem (String symbolicName, String parentType, String childSubsystem, String childSubsystemType) throws Exception
1: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
0: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, symbolicName);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
0: 		attributes.put(SUBSYSTEM_TYPE, parentType);
1: 		
0: 		if (parentType == SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE) { 
1: 			attributes.put(Constants.IMPORT_PACKAGE, "x");
1: 			attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
1: 			attributes.put(Constants.REQUIRE_CAPABILITY, "y");
1: 		}
1: 		
0: 		StringBuffer subsystemContent = new StringBuffer();
0: 		subsystemContent.append (childSubsystem + ";" + Constants.VERSION_ATTRIBUTE 
0: 				+ "=\"[1.0.0,1.0.0]\";");
0: 		// TODO: possible spec bug - subsystem-content needs a ;type= attribute
0: 		// but there's no constant for TYPE_ATTRIBUTE ...?
0: 		subsystemContent.append("type=");
0: 		subsystemContent.append(childSubsystemType);
0: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, subsystemContent.toString());
1: 		
0: 		createManifest(symbolicName + ".mf", attributes);
0: 		createSubsystem(symbolicName, childSubsystem);
1: 	}
1: 
1: 	
1: 	private void stop(Subsystem s1, Subsystem s2) throws Exception
1: 	{
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S1_COMP);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1: 		attributes.put(SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		createManifest(SUBSYSTEM_4E_S1_COMP + ".mf", attributes);
1: 		createSubsystem(SUBSYSTEM_4E_S1_COMP);
/////////////////////////////////////////////////////////////////////////
1: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S2_APP);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1: 		attributes.put(SUBSYSTEM_TYPE, SUBSYSTEM_TYPE_APPLICATION);
1: 		createManifest(SUBSYSTEM_4E_S2_APP + ".mf", attributes);
1: 		createSubsystem(SUBSYSTEM_4E_S2_APP);
1: 	}
1: 	
1: 	/* a feature S2 with
1:     - content bundles C, D and E */
1: 	private static void createFeature4E_S2() throws Exception
1: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S2_FEATURE);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1: 		attributes.put(SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 		String appContent = BUNDLE_C + ", " + BUNDLE_D + ", " + BUNDLE_E;
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1: 		createManifest(SUBSYSTEM_4E_S2_FEATURE + ".mf", attributes);
1: 		createSubsystem(SUBSYSTEM_4E_S2_FEATURE);
1: 	}
1: 	
1: 	/* a composite S2 that 
1: 	//     imports package x, requires bundle A and required capability y */
1: 	private static void createComposite4E_S2() throws Exception
1: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S2_COMP);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_VERSION, "1.0.0");
1: 		attributes.put(SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		String appContent = BUNDLE_C + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1: 			+ ", " + BUNDLE_D + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\""
1: 			+ ", " + BUNDLE_E + ";" + Constants.VERSION_ATTRIBUTE + "=\"[1.0.0,1.0.0]\"";
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
1: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y"); 
1: 		createManifest(SUBSYSTEM_4E_S2_COMP + ".mf", attributes);
1: 		createSubsystem(SUBSYSTEM_4E_S2_COMP);
commit:dbcd0ed
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.ctt.itests;
0: 
0: import java.util.HashMap;
0: import java.util.Map;
0: 
0: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
0: 
1: /*
1:  *  E) Test acceptDependencies policy
1:     1. Root is the only acceptDependencies policy
1:        a. - Register repository R2
1:           - Using the Root subsystem, install a composite subsystem S1 with 
1:             - no content bundles 
1:             - imports package x, requires bundle A and requires capability y
1:           - Using the subsystem S1, install an application S2 with
1:             - content bundles C, D and E
1:           - Verify that bundles A and B got installed into the Root Subsystem
1:           - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1:           - Repeat test with S2 as a composite that imports package x, requires bundle A and required capability y
1:           - Repeat test with S2 as a feature
1:        b. - same as 4E1a except S2 is a content resource of S1
1:           - There are 6 combinations to test
1:             - app_app, app_comp, app_feat, comp_app, comp_comp, comp_feat
0:     2. A non-Root subsystem has acceptDependencies policy
1:        a. - Register repository R2
1:           - Using the Root subsystem, install a composite subsystem S1 with 
1:             - no content bundles 
0:             - acceptTransitive policy
0:             - no sharing policy
1:           - Using the subsystem S1, install an application S2 with
1:             - content bundles C, D and E
0:             - note sharing policy gets computed
0:           - Verify that bundles A and B got installed into the S1 Subsystem
1:           - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1:           - Repeat test with S2 as a composite that imports package x, requires bundle A and required capability y
1:           - Repeat test with S2 as a feature
0:        b. - same as 4E2a except S2 is a content resource of S1
1:           - There are 6 combinations to test
1:             - app_app, app_comp, app_feat, comp_app, comp_comp, comp_feat
0:     3. Invalid sharing policy prevents dependency installation
1:        a. - Register repository R2
1:           - Using the Root subsystem, install a composite subsystem S1 with 
1:             - no content bundles 
0:             - NO acceptDependency policy
0:             - no sharing policy
1:           - Using the subsystem S1, install an application S2 with
1:             - content bundles C, D and E
0:             - note the sharing policy gets computed
0:           - Verify the installation of S2 fails because there is no valid place to install the 
0:             required transitive resources A and B that allow S2 constituents to have access.
0:           - Verify resources A and B are not installed in the Root subsystem.
0:           - Repeat test with S2 as a composite that imports package x, requires bundle A and requires capability y.
1:           - Repeat test with S2 as a feature
0:        c. - same as 4E3a except S1 is a composite that has S2 in its Subsystem-Content; S1 fails to install
1:  */
0: public class SubsystemDependency_4ETest extends SubsystemDependencyTestBase 
1: {
1: 	/*
1: 	1. Root is the only acceptDependencies policy
1:     a. - Register repository R2
1:        - Using the Root subsystem, install a composite subsystem S1 with 
1:          - no content bundles 
1:          - imports package x, requires bundle A and requires capability y
1:        - Using the subsystem S1, install an application S2 with
1:          - content bundles C, D and E
1:        - Verify that bundles A and B got installed into the Root Subsystem
1:        - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1:        - Repeat test with S2 as a composite that imports package x, requires bundle A and required capability y
1:        - Repeat test with S2 as a feature
1:     b. - same as 4E1a except S2 is a content resource of S1
1:        - There are 6 combinations to test
1:          - app_app, app_comp, app_feat, comp_app, comp_comp, comp_feat
1: 	*/
0: 	private static final String SUBSYSTEM_4E_S1 = "sdt_composite4e_s1.esa";
0: 	private static final String SUBSYSTEM_4E_S2 = "sdt_application4e_s1.esa";
0: 	private static boolean _testSubsystemsCreated = false;
0: 	private Subsystem subsystem_s1;
0: 	
0: 	@Before
0: 	public void setUp() throws Exception
1: 	{
0: 		super.setUp();
0: 		if (!_testSubsystemsCreated) { 
0: 			createComposite4E_S1();
0: 			createApplication4E_S2();
1: 		}
1: 		registerRepositoryR2();
1: 	}
0: 	
1: 	/*
1: 	 * Using the subsystem S1, install an application S2 with
1:          - content bundles C, D and E
1:        - Verify that bundles A and B got installed into the Root Subsystem
1: 	 */
1: 	@Test
1: 	public void verifyBundlesAandBInstalledIntoRootSubsystem() throws Exception
1: 	{
0: 		Subsystem s1 = installSubsystemFromFile(SUBSYSTEM_4E_S1);
1: 		startSubsystem(s1);
0: 		
0: 		Subsystem s2 = installSubsystemFromFile(s1, SUBSYSTEM_4E_S2);
1: 		startSubsystem(s2);
0: 		
1: 		verifyBundlesInstalled (bundleContext, "Root", BUNDLE_A, BUNDLE_B);
0: 		
1: 		stopSubsystem(s2);
1: 		stopSubsystem(s1);
1: 		uninstallSubsystem(s2);
1: 		uninstallSubsystem(s1);
0: 		
1: 	}
0: 	
1: 	/*
1: 	 * a composite subsystem S1 with 
1:          - no content bundles 
1:          - imports package x, requires bundle A and requires capability y
1: 	 */
1: 	private static void createComposite4E_S1() throws Exception
1: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
0: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S1);
0: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
0: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
0: 		attributes.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
0: 		attributes.put(Constants.REQUIRE_CAPABILITY, "y"); 
0: 		createManifest(SUBSYSTEM_4E_S1 + ".mf", attributes);
0: 		createSubsystem(SUBSYSTEM_4E_S1);
1: 	}
0: 
1: 	/* an application S2 with
1:     - content bundles C, D and E */
1: 	private static void createApplication4E_S2() throws Exception
1: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
0: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4E_S2);
0: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 		String appContent = BUNDLE_C + ", " + BUNDLE_D + ", " + BUNDLE_E;
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
0: 		createManifest(SUBSYSTEM_4E_S2 + ".mf", attributes);
0: 		createSubsystem(SUBSYSTEM_4E_S2);
1: 	}
0: 
0: 
0: 	
1: }
============================================================================