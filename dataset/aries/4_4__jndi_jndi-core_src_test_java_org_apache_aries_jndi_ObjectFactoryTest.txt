1:87e8fb4: /*
1:87e8fb4:  * Licensed to the Apache Software Foundation (ASF) under one
1:87e8fb4:  * or more contributor license agreements.  See the NOTICE file
1:87e8fb4:  * distributed with this work for additional information
1:87e8fb4:  * regarding copyright ownership.  The ASF licenses this file
1:87e8fb4:  * to you under the Apache License, Version 2.0 (the
1:87e8fb4:  * "License"); you may not use this file except in compliance
1:87e8fb4:  * with the License.  You may obtain a copy of the License at
1:87e8fb4:  *
1:87e8fb4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:87e8fb4:  *
1:87e8fb4:  * Unless required by applicable law or agreed to in writing,
1:87e8fb4:  * software distributed under the License is distributed on an
1:3c19a77:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:87e8fb4:  * KIND, either express or implied.  See the License for the
1:87e8fb4:  * specific language governing permissions and limitations
1:87e8fb4:  * under the License.
1:87e8fb4:  */
1:87e8fb4: package org.apache.aries.jndi;
6:87e8fb4: 
1:87e8fb4: import static org.junit.Assert.assertEquals;
1:87e8fb4: import static org.junit.Assert.assertSame;
1:2b1b14d: import static org.junit.Assert.assertTrue;
1:87e8fb4: 
1:b49a314: import java.util.Dictionary;
1:87e8fb4: import java.util.Hashtable;
1:87e8fb4: import java.util.Properties;
1:87e8fb4: 
1:87e8fb4: import javax.naming.Context;
1:87e8fb4: import javax.naming.Name;
1:87e8fb4: import javax.naming.Reference;
1:87e8fb4: import javax.naming.StringRefAddr;
1:87e8fb4: import javax.naming.spi.NamingManager;
1:87e8fb4: import javax.naming.spi.ObjectFactory;
1:2b1b14d: 
1:3a658a8: import org.apache.aries.jndi.startup.Activator;
1:3a658a8: import org.apache.aries.jndi.urls.URLObjectFactoryFinder;
1:3a658a8: import org.apache.aries.mocks.BundleContextMock;
1:3a658a8: import org.apache.aries.unittest.mocks.MethodCall;
1:3a658a8: import org.apache.aries.unittest.mocks.Skeleton;
1:87e8fb4: import org.junit.After;
1:87e8fb4: import org.junit.Before;
1:87e8fb4: import org.junit.Test;
1:87e8fb4: import org.osgi.framework.BundleContext;
1:7b2544b: import org.osgi.service.jndi.JNDIConstants;
1:87e8fb4: 
1:87e8fb4: public class ObjectFactoryTest
1:87e8fb4: {
1:3a658a8:   private Activator activator;
1:87e8fb4:   private BundleContext bc;
1:3a658a8:   private Hashtable<Object,Object> env;
1:87e8fb4: 
1:87e8fb4:   /**
1:87e8fb4:    * This method does the setup .
1:87e8fb4:    * @throws NoSuchFieldException 
1:87e8fb4:    * @throws SecurityException 
1:87e8fb4:    * @throws IllegalAccessException 
1:87e8fb4:    * @throws IllegalArgumentException 
1:87e8fb4:    */
1:87e8fb4:   @Before
1:87e8fb4:   public void setup() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException
1:87e8fb4:   {
1:87e8fb4:     bc =  Skeleton.newMock(new BundleContextMock(), BundleContext.class);
1:3a658a8:     activator = new Activator();
1:3a658a8:     activator.start(bc);
1:7b2544b:         
1:3a658a8:     env = new Hashtable<Object, Object>();
1:7b2544b:     env.put(JNDIConstants.BUNDLE_CONTEXT, bc);
2:87e8fb4:   }
1:87e8fb4: 
1:87e8fb4:   /**
1:87e8fb4:    * Make sure we clear the caches out before the next test.
1:87e8fb4:    */
1:87e8fb4:   @After
1:87e8fb4:   public void teardown()
1:87e8fb4:   {
1:3a658a8:     activator.stop(bc);
1:87e8fb4:     BundleContextMock.clear();
1:87e8fb4:   }
1:87e8fb4: 
1:87e8fb4:   @Test
1:87e8fb4:   public void testURLReferenceWithNoMatchingHandler() throws Exception
1:87e8fb4:   {
1:87e8fb4:     Reference ref = new Reference(null);
1:87e8fb4:     ref.add(new StringRefAddr("URL", "wibble"));
1:7b2544b:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:87e8fb4: 
1:87e8fb4:     assertSame("The naming manager should have returned the reference object", ref, obj);
1:2b1b14d:   }
1:2b1b14d: 
1:7bee809:   @Test
1:87e8fb4:   public void testURLReferenceWithMatchingHandler() throws Exception
1:87e8fb4:   {
1:87e8fb4:     String testObject = "Test object";
1:87e8fb4:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:87e8fb4:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1:2b1b14d: 
1:87e8fb4:     Properties props = new Properties();
1:87e8fb4:     props.setProperty("osgi.jndi.urlScheme", "wibble");
1:87e8fb4: 
1:b49a314:     bc.registerService(ObjectFactory.class.getName(), factory, (Dictionary) props);
1:87e8fb4: 
1:87e8fb4:     Reference ref = new Reference(null);
1:87e8fb4:     ref.add(new StringRefAddr("URL", "wibble"));
1:2b1b14d:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:87e8fb4:     
1:87e8fb4:     assertEquals("The naming manager should have returned the test object", testObject, obj);
1:87e8fb4:   }
1:87e8fb4: 
1:87e8fb4:   @Test
1:3a658a8:   public void testURLReferenceUsingURLObjectFactoryFinder() throws Exception
1:3a658a8:   {
1:3a658a8:     String testObject = "Test object";
1:3a658a8:     URLObjectFactoryFinder factory = Skeleton.newMock(URLObjectFactoryFinder.class);
1:3a658a8:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1:3a658a8: 
1:b49a314:     bc.registerService(URLObjectFactoryFinder.class.getName(), factory, (Dictionary) new Properties());
1:3a658a8: 
1:3a658a8:     Reference ref = new Reference(null);
1:3a658a8:     ref.add(new StringRefAddr("URL", "wibble"));
1:3a658a8:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:3a658a8:     
1:3a658a8:     assertEquals("The naming manager should have returned the test object", testObject, obj);
1:3a658a8:   }
1:3a658a8: 
1:3a658a8:   @Test
1:87e8fb4:   public void testReferenceWithNoClassName() throws Exception
1:87e8fb4:   {
1:87e8fb4:     String testObject = "Test object";
1:87e8fb4:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:87e8fb4:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1:87e8fb4: 
1:87e8fb4:     bc.registerService(ObjectFactory.class.getName(), factory, null);
1:87e8fb4: 
1:87e8fb4:     Reference ref = new Reference(null);
1:7b2544b:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:87e8fb4:     
1:87e8fb4:     assertEquals("The naming manager should have returned the test object", testObject, obj);
1:87e8fb4:   }
1:87e8fb4: 
1:87e8fb4:   @Test
1:87e8fb4:   public void testSpecifiedFactoryWithMatchingFactory() throws Exception
1:87e8fb4:   {
1:87e8fb4:     String testObject = "Test object";
1:87e8fb4:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:87e8fb4:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1:87e8fb4: 
1:87e8fb4:     Reference ref = new Reference("dummy.class.name", factory.getClass().getName(), "");
1:87e8fb4: 
1:87e8fb4:     bc.registerService(new String[] {ObjectFactory.class.getName(), factory.getClass().getName()}, 
1:87e8fb4:                        factory, null);
1:87e8fb4: 
1:7b2544b:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:87e8fb4:     
1:87e8fb4:     assertEquals("The naming manager should have returned the test object", testObject, obj);
1:87e8fb4:   }
1:87e8fb4: 
1:87e8fb4:   @Test
1:87e8fb4:   public void testSpecifiedFactoryWithRegisteredButNotMatchingFactory() throws Exception
1:87e8fb4:   {
1:87e8fb4:     String testObject = "Test object";
1:87e8fb4:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:87e8fb4:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1:87e8fb4: 
1:87e8fb4:     Reference ref = new Reference("dummy.class.name", "dummy.factory.class.name", "");
1:87e8fb4: 
1:87e8fb4:     bc.registerService(new String[] {ObjectFactory.class.getName(), factory.getClass().getName()}, 
1:87e8fb4:                        factory, null);
1:87e8fb4: 
1:7b2544b:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:87e8fb4: 
1:87e8fb4:     assertSame("The naming manager should have returned the reference object", ref, obj);
1:87e8fb4:   }
1:87e8fb4: 
1:87e8fb4:   @Test
1:87e8fb4:   public void testSpecifiedFactoryWithNoMatchingFactory() throws Exception
1:87e8fb4:   {
1:87e8fb4:     Reference ref = new Reference("dummy.class.name");
1:87e8fb4: 
1:7b2544b:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:87e8fb4: 
1:87e8fb4:     assertSame("The naming manager should have returned the reference object", ref, obj);
1:87e8fb4:   }
1:87e8fb4:   
1:87e8fb4:   @Test
1:7bee809:   public void testFactoriesThatDoUnsafeCastsAreIgnored() throws Exception {
1:7bee809:     Hashtable<String, Object> props = new Hashtable<String, Object>();
1:7bee809:     props.put("aries.object.factory.requires.reference", Boolean.TRUE);
1:7bee809:     bc.registerService(ObjectFactory.class.getName(), new ObjectFactory() {
1:7bee809:       
1:7bee809:       public Object getObjectInstance(Object arg0, Name arg1, Context arg2, Hashtable<?, ?> arg3)
1:7bee809:           throws Exception
1:7bee809:       {
1:7bee809:         return (Reference)arg0;
1:7bee809:       }
1:7bee809:     }, props);
1:7bee809: 
1:7bee809:     NamingManager.getObjectInstance("Some dummy data", null, null, env);
1:7bee809:   }
1:7bee809:   
1:2b1b14d:   public static class DummyObjectFactory implements ObjectFactory {
1:2b1b14d: 
1:7bee809:         public Object getObjectInstance(Object obj, Name name, Context nameCtx,
1:7bee809:                 Hashtable<?, ?> environment) throws Exception {
1:7bee809:             // TODO Auto-generated method stub
1:7bee809:             return new String ("pass");
1:7bee809:         }
1:2b1b14d:   }
1:7bee809:       
1:2b1b14d:   @Test
1:2b1b14d:   public void testContextDotObjectFactories() throws Exception { 
1:7bee809:       env.put(Context.OBJECT_FACTORIES, "org.apache.aries.jndi.ObjectFactoryTest$DummyObjectFactory");
1:7bee809:       Reference ref = new Reference("anything");
1:7bee809:       Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:7bee809:       assertTrue (obj instanceof String);
1:7bee809:       assertEquals ((String)obj, "pass");
1:7bee809:       env.remove(Context.OBJECT_FACTORIES);
1:2b1b14d:   }
1:2b1b14d: 
1:87e8fb4: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:b49a314
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
1:     bc.registerService(ObjectFactory.class.getName(), factory, (Dictionary) props);
/////////////////////////////////////////////////////////////////////////
1:     bc.registerService(URLObjectFactoryFinder.class.getName(), factory, (Dictionary) new Properties());
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:7bee809
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   @Test
1:   public void testFactoriesThatDoUnsafeCastsAreIgnored() throws Exception {
1:     Hashtable<String, Object> props = new Hashtable<String, Object>();
1:     props.put("aries.object.factory.requires.reference", Boolean.TRUE);
1:     bc.registerService(ObjectFactory.class.getName(), new ObjectFactory() {
1:       
1:       public Object getObjectInstance(Object arg0, Name arg1, Context arg2, Hashtable<?, ?> arg3)
1:           throws Exception
1:       {
1:         return (Reference)arg0;
1:       }
1:     }, props);
1: 
1:     NamingManager.getObjectInstance("Some dummy data", null, null, env);
1:   }
1:   
1:         public Object getObjectInstance(Object obj, Name name, Context nameCtx,
1:                 Hashtable<?, ?> environment) throws Exception {
1:             // TODO Auto-generated method stub
1:             return new String ("pass");
1:         }
1:       
1:       env.put(Context.OBJECT_FACTORIES, "org.apache.aries.jndi.ObjectFactoryTest$DummyObjectFactory");
1:       Reference ref = new Reference("anything");
1:       Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:       assertTrue (obj instanceof String);
1:       assertEquals ((String)obj, "pass");
1:       env.remove(Context.OBJECT_FACTORIES);
commit:3a658a8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jndi.startup.Activator;
1: import org.apache.aries.jndi.urls.URLObjectFactoryFinder;
1: import org.apache.aries.mocks.BundleContextMock;
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1:   private Activator activator;
1:   private Hashtable<Object,Object> env;
/////////////////////////////////////////////////////////////////////////
1:     activator = new Activator();
1:     activator.start(bc);
1:     env = new Hashtable<Object, Object>();
/////////////////////////////////////////////////////////////////////////
1:     activator.stop(bc);
/////////////////////////////////////////////////////////////////////////
1:   public void testURLReferenceUsingURLObjectFactoryFinder() throws Exception
1:   {
1:     String testObject = "Test object";
1:     URLObjectFactoryFinder factory = Skeleton.newMock(URLObjectFactoryFinder.class);
1:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1: 
0:     bc.registerService(URLObjectFactoryFinder.class.getName(), factory, new Properties());
1: 
1:     Reference ref = new Reference(null);
1:     ref.add(new StringRefAddr("URL", "wibble"));
1:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
1:     
1:     assertEquals("The naming manager should have returned the test object", testObject, obj);
1:   }
1: 
1:   @Test
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:2b1b14d
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
0: import javax.naming.InitialContext;
0: import javax.naming.NamingException;
0: import junit.framework.Assert;
1: 
/////////////////////////////////////////////////////////////////////////
1:   
1:   public static class DummyObjectFactory implements ObjectFactory {
1: 
0: 		public Object getObjectInstance(Object obj, Name name, Context nameCtx,
0: 				Hashtable<?, ?> environment) throws Exception {
0: 			// TODO Auto-generated method stub
0: 			return new String ("pass");
1: 		}
1:   }
1: 	  
1:   @Test
1:   public void testContextDotObjectFactories() throws Exception { 
0: 	  env.put(Context.OBJECT_FACTORIES, "org.apache.aries.jndi.ObjectFactoryTest$DummyObjectFactory");
0: 	  Reference ref = new Reference("anything");
1: 	  Object obj = NamingManager.getObjectInstance(ref, null, null, env);
0: 	  assertTrue (obj instanceof String);
0: 	  assertEquals ((String)obj, "pass");
0: 	  env.remove(Context.OBJECT_FACTORIES);
1:   }
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.jndi.JNDIConstants;
/////////////////////////////////////////////////////////////////////////
0:   private Hashtable env;
/////////////////////////////////////////////////////////////////////////
1:         
0:     env = new Hashtable();
1:     env.put(JNDIConstants.BUNDLE_CONTEXT, bc);
/////////////////////////////////////////////////////////////////////////
1:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
/////////////////////////////////////////////////////////////////////////
1:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
/////////////////////////////////////////////////////////////////////////
1:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
/////////////////////////////////////////////////////////////////////////
1:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
/////////////////////////////////////////////////////////////////////////
1:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
/////////////////////////////////////////////////////////////////////////
0:     Object obj = NamingManager.getObjectInstance(ref, null, null, env);
commit:9e140bf
/////////////////////////////////////////////////////////////////////////
0:     OSGiObjectFactoryBuilder.setBundleContext(bc);
commit:3c19a77
/////////////////////////////////////////////////////////////////////////
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
commit:87e8fb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertSame;
1: 
0: import java.lang.reflect.Field;
1: import java.util.Hashtable;
1: import java.util.Properties;
1: 
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.Reference;
1: import javax.naming.StringRefAddr;
1: import javax.naming.spi.NamingManager;
1: import javax.naming.spi.ObjectFactory;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: 
0: import org.apache.aries.unittest.mocks.MethodCall;
0: import org.apache.aries.unittest.mocks.Skeleton;
0: import org.apache.aries.jndi.ContextHelper;
0: import org.apache.aries.jndi.OSGiObjectFactoryBuilder;
0: import org.apache.aries.jndi.startup.Activator;
0: import org.apache.aries.mocks.BundleContextMock;
1: 
1: public class ObjectFactoryTest
1: {
1:   private BundleContext bc;
1: 
1:   /**
1:    * This method does the setup .
1:    * @throws NoSuchFieldException 
1:    * @throws SecurityException 
1:    * @throws IllegalAccessException 
1:    * @throws IllegalArgumentException 
1:    */
1:   @Before
1:   public void setup() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException
1:   {
1:     bc =  Skeleton.newMock(new BundleContextMock(), BundleContext.class);
0:     new Activator().start(bc);
1:     
0:     Field f = ContextHelper.class.getDeclaredField("context");
0:     f.setAccessible(true);
0:     f.set(null, bc);
0:     f = OSGiObjectFactoryBuilder.class.getDeclaredField("context");
0:     f.setAccessible(true);
0:     f.set(null, bc);
1: 
1:   }
1: 
1:   /**
1:    * Make sure we clear the caches out before the next test.
1:    */
1:   @After
1:   public void teardown()
1:   {
0:     new Activator().stop(bc);
1:     BundleContextMock.clear();
1:   }
1: 
1:   @Test
1:   public void testURLReferenceWithNoMatchingHandler() throws Exception
1:   {
1:     Reference ref = new Reference(null);
1:     ref.add(new StringRefAddr("URL", "wibble"));
0:     Object obj = NamingManager.getObjectInstance(ref, null, null, null);
1: 
1:     assertSame("The naming manager should have returned the reference object", ref, obj);
1:   }
1: 
1:   @Test
1:   public void testURLReferenceWithMatchingHandler() throws Exception
1:   {
1:     String testObject = "Test object";
1:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1: 
1:     Properties props = new Properties();
1:     props.setProperty("osgi.jndi.urlScheme", "wibble");
1: 
0:     bc.registerService(ObjectFactory.class.getName(), factory, props);
1: 
1:     Reference ref = new Reference(null);
1:     ref.add(new StringRefAddr("URL", "wibble"));
0:     Object obj = NamingManager.getObjectInstance(ref, null, null, null);
1:     
1:     assertEquals("The naming manager should have returned the test object", testObject, obj);
1:   }
1: 
1:   @Test
1:   public void testReferenceWithNoClassName() throws Exception
1:   {
1:     String testObject = "Test object";
1:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1: 
1:     bc.registerService(ObjectFactory.class.getName(), factory, null);
1: 
1:     Reference ref = new Reference(null);
0:     Object obj = NamingManager.getObjectInstance(ref, null, null, null);
1:     
1:     assertEquals("The naming manager should have returned the test object", testObject, obj);
1:   }
1: 
1:   @Test
1:   public void testSpecifiedFactoryWithMatchingFactory() throws Exception
1:   {
1:     String testObject = "Test object";
1:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1: 
1:     Reference ref = new Reference("dummy.class.name", factory.getClass().getName(), "");
1: 
1:     bc.registerService(new String[] {ObjectFactory.class.getName(), factory.getClass().getName()}, 
1:                        factory, null);
1: 
0:     Object obj = NamingManager.getObjectInstance(ref, null, null, null);
1:     
1:     assertEquals("The naming manager should have returned the test object", testObject, obj);
1:   }
1: 
1:   @Test
1:   public void testSpecifiedFactoryWithRegisteredButNotMatchingFactory() throws Exception
1:   {
1:     String testObject = "Test object";
1:     ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
1:     Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
1: 
1:     Reference ref = new Reference("dummy.class.name", "dummy.factory.class.name", "");
1: 
1:     bc.registerService(new String[] {ObjectFactory.class.getName(), factory.getClass().getName()}, 
1:                        factory, null);
1: 
0:     Object obj = NamingManager.getObjectInstance(ref, null, null, null);
1: 
1:     assertSame("The naming manager should have returned the reference object", ref, obj);
1:   }
1: 
1:   @Test
1:   public void testSpecifiedFactoryWithNoMatchingFactory() throws Exception
1:   {
1:     Reference ref = new Reference("dummy.class.name");
1: 
0:     Object obj = NamingManager.getObjectInstance(ref, null, null, null);
1: 
1:     assertSame("The naming manager should have returned the reference object", ref, obj);
1:   }
1: }
commit:e6f69cc
commit:fc02f66
/////////////////////////////////////////////////////////////////////////
0: ///*
0: // * Licensed to the Apache Software Foundation (ASF) under one
0: // * or more contributor license agreements.  See the NOTICE file
0: // * distributed with this work for additional information
0: // * regarding copyright ownership.  The ASF licenses this file
0: // * to you under the Apache License, Version 2.0 (the
0: // * "License"); you may not use this file except in compliance
0: // * with the License.  You may obtain a copy of the License at
0: // *
0: // *   http://www.apache.org/licenses/LICENSE-2.0
0: // *
0: // * Unless required by applicable law or agreed to in writing,
0: // * software distributed under the License is distributed on an
0: // * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0: // * KIND, either express or implied.  See the License for the
0: // * specific language governing permissions and limitations
0: // * under the License.
0: // */
0: //package org.apache.aries.jndi;
0: //
0: //import static org.junit.Assert.assertEquals;
0: //import static org.junit.Assert.assertSame;
0: //
0: //import java.lang.reflect.Field;
0: //import java.util.Hashtable;
0: //import java.util.Properties;
0: //
0: //import javax.naming.Context;
0: //import javax.naming.Name;
0: //import javax.naming.Reference;
0: //import javax.naming.StringRefAddr;
0: //import javax.naming.spi.NamingManager;
0: //import javax.naming.spi.ObjectFactory;
0: //
0: //import mocks.BundleContextMock;
0: //
0: //import org.junit.After;
0: //import org.junit.Before;
0: //import org.junit.Test;
0: //import org.osgi.framework.BundleContext;
0: //
0: //import com.ibm.aries.unittest.mocks.MethodCall;
0: //import com.ibm.aries.unittest.mocks.Skeleton;
0: //import org.apache.aries.jndi.ContextHelper;
0: //import org.apache.aries.jndi.OSGiObjectFactoryBuilder;
0: //import org.apache.aries.jndi.startup.Activator;
0: //
0: //public class ObjectFactoryTest
0: //{
0: //  private BundleContext bc;
0: //
0: //  /**
0: //   * This method does the setup .
0: //   * @throws NoSuchFieldException 
0: //   * @throws SecurityException 
0: //   * @throws IllegalAccessException 
0: //   * @throws IllegalArgumentException 
0: //   */
0: //  @Before
0: //  public void setup() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException
0: //  {
0: //    bc =  Skeleton.newMock(new BundleContextMock(), BundleContext.class);
0: //    new Activator().start(bc);
0: //    
0: //    Field f = ContextHelper.class.getDeclaredField("context");
0: //    f.setAccessible(true);
0: //    f.set(null, bc);
0: //    f = OSGiObjectFactoryBuilder.class.getDeclaredField("context");
0: //    f.setAccessible(true);
0: //    f.set(null, bc);
0: //
0: //  }
0: //
0: //  /**
0: //   * Make sure we clear the caches out before the next test.
0: //   */
0: //  @After
0: //  public void teardown()
0: //  {
0: //    new Activator().stop(bc);
0: //    BundleContextMock.clear();
0: //  }
0: //
0: //  @Test
0: //  public void testURLReferenceWithNoMatchingHandler() throws Exception
0: //  {
0: //    Reference ref = new Reference(null);
0: //    ref.add(new StringRefAddr("URL", "wibble"));
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //
0: //    assertSame("The naming manager should have returned the reference object", ref, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testURLReferenceWithMatchingHandler() throws Exception
0: //  {
0: //    String testObject = "Test object";
0: //    ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
0: //    Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
0: //
0: //    Properties props = new Properties();
0: //    props.setProperty("osgi.jndi.urlScheme", "wibble");
0: //
0: //    bc.registerService(ObjectFactory.class.getName(), factory, props);
0: //
0: //    Reference ref = new Reference(null);
0: //    ref.add(new StringRefAddr("URL", "wibble"));
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //    
0: //    assertEquals("The naming manager should have returned the test object", testObject, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testReferenceWithNoClassName() throws Exception
0: //  {
0: //    String testObject = "Test object";
0: //    ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
0: //    Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
0: //
0: //    bc.registerService(ObjectFactory.class.getName(), factory, null);
0: //
0: //    Reference ref = new Reference(null);
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //    
0: //    assertEquals("The naming manager should have returned the test object", testObject, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testSpecifiedFactoryWithMatchingFactory() throws Exception
0: //  {
0: //    String testObject = "Test object";
0: //    ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
0: //    Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
0: //
0: //    Reference ref = new Reference("dummy.class.name", factory.getClass().getName(), "");
0: //
0: //    bc.registerService(new String[] {ObjectFactory.class.getName(), factory.getClass().getName()}, 
0: //                       factory, null);
0: //
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //    
0: //    assertEquals("The naming manager should have returned the test object", testObject, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testSpecifiedFactoryWithRegisteredButNotMatchingFactory() throws Exception
0: //  {
0: //    String testObject = "Test object";
0: //    ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
0: //    Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
0: //
0: //    Reference ref = new Reference("dummy.class.name", "dummy.factory.class.name", "");
0: //
0: //    bc.registerService(new String[] {ObjectFactory.class.getName(), factory.getClass().getName()}, 
0: //                       factory, null);
0: //
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //
0: //    assertSame("The naming manager should have returned the reference object", ref, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testSpecifiedFactoryWithNoMatchingFactory() throws Exception
0: //  {
0: //    Reference ref = new Reference("dummy.class.name");
0: //
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //
0: //    assertSame("The naming manager should have returned the reference object", ref, obj);
0: //  }
commit:1a3015d
/////////////////////////////////////////////////////////////////////////
0: ///*
0: // * Licensed to the Apache Software Foundation (ASF) under one
0: // * or more contributor license agreements.  See the NOTICE file
0: // * distributed with this work for additional information
0: // * regarding copyright ownership.  The ASF licenses this file
0: // * to you under the Apache License, Version 2.0 (the
0: // * "License"); you may not use this file except in compliance
0: // * with the License.  You may obtain a copy of the License at
0: // *
0: // *   http://www.apache.org/licenses/LICENSE-2.0
0: // *
0: // * Unless required by applicable law or agreed to in writing,
0: // * software distributed under the License is distributed on an
0: // * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0: // * KIND, either express or implied.  See the License for the
0: // * specific language governing permissions and limitations
0: // * under the License.
0: // */
0: //package org.apache.aries.jndi;
0: //
0: //import static org.junit.Assert.assertEquals;
0: //import static org.junit.Assert.assertSame;
0: //
0: //import java.lang.reflect.Field;
0: //import java.util.Hashtable;
0: //import java.util.Properties;
0: //
0: //import javax.naming.Context;
0: //import javax.naming.Name;
0: //import javax.naming.Reference;
0: //import javax.naming.StringRefAddr;
0: //import javax.naming.spi.NamingManager;
0: //import javax.naming.spi.ObjectFactory;
0: //
0: //import mocks.BundleContextMock;
0: //
0: //import org.junit.After;
0: //import org.junit.Before;
0: //import org.junit.Test;
0: //import org.osgi.framework.BundleContext;
0: //
0: //import com.ibm.aries.unittest.mocks.MethodCall;
0: //import com.ibm.aries.unittest.mocks.Skeleton;
0: //import org.apache.aries.jndi.ContextHelper;
0: //import org.apache.aries.jndi.OSGiObjectFactoryBuilder;
0: //import org.apache.aries.jndi.startup.Activator;
0: //
0: //public class ObjectFactoryTest
0: //{
0: //  private BundleContext bc;
0: //
0: //  /**
0: //   * This method does the setup .
0: //   * @throws NoSuchFieldException 
0: //   * @throws SecurityException 
0: //   * @throws IllegalAccessException 
0: //   * @throws IllegalArgumentException 
0: //   */
0: //  @Before
0: //  public void setup() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException
0: //  {
0: //    bc =  Skeleton.newMock(new BundleContextMock(), BundleContext.class);
0: //    new Activator().start(bc);
0: //    
0: //    Field f = ContextHelper.class.getDeclaredField("context");
0: //    f.setAccessible(true);
0: //    f.set(null, bc);
0: //    f = OSGiObjectFactoryBuilder.class.getDeclaredField("context");
0: //    f.setAccessible(true);
0: //    f.set(null, bc);
0: //
0: //  }
0: //
0: //  /**
0: //   * Make sure we clear the caches out before the next test.
0: //   */
0: //  @After
0: //  public void teardown()
0: //  {
0: //    new Activator().stop(bc);
0: //    BundleContextMock.clear();
0: //  }
0: //
0: //  @Test
0: //  public void testURLReferenceWithNoMatchingHandler() throws Exception
0: //  {
0: //    Reference ref = new Reference(null);
0: //    ref.add(new StringRefAddr("URL", "wibble"));
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //
0: //    assertSame("The naming manager should have returned the reference object", ref, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testURLReferenceWithMatchingHandler() throws Exception
0: //  {
0: //    String testObject = "Test object";
0: //    ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
0: //    Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
0: //
0: //    Properties props = new Properties();
0: //    props.setProperty("osgi.jndi.urlScheme", "wibble");
0: //
0: //    bc.registerService(ObjectFactory.class.getName(), factory, props);
0: //
0: //    Reference ref = new Reference(null);
0: //    ref.add(new StringRefAddr("URL", "wibble"));
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //    
0: //    assertEquals("The naming manager should have returned the test object", testObject, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testReferenceWithNoClassName() throws Exception
0: //  {
0: //    String testObject = "Test object";
0: //    ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
0: //    Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
0: //
0: //    bc.registerService(ObjectFactory.class.getName(), factory, null);
0: //
0: //    Reference ref = new Reference(null);
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //    
0: //    assertEquals("The naming manager should have returned the test object", testObject, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testSpecifiedFactoryWithMatchingFactory() throws Exception
0: //  {
0: //    String testObject = "Test object";
0: //    ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
0: //    Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
0: //
0: //    Reference ref = new Reference("dummy.class.name", factory.getClass().getName(), "");
0: //
0: //    bc.registerService(new String[] {ObjectFactory.class.getName(), factory.getClass().getName()}, 
0: //                       factory, null);
0: //
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //    
0: //    assertEquals("The naming manager should have returned the test object", testObject, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testSpecifiedFactoryWithRegisteredButNotMatchingFactory() throws Exception
0: //  {
0: //    String testObject = "Test object";
0: //    ObjectFactory factory = Skeleton.newMock(ObjectFactory.class);
0: //    Skeleton.getSkeleton(factory).setReturnValue(new MethodCall(ObjectFactory.class, "getObjectInstance", Object.class, Name.class, Context.class, Hashtable.class), testObject);
0: //
0: //    Reference ref = new Reference("dummy.class.name", "dummy.factory.class.name", "");
0: //
0: //    bc.registerService(new String[] {ObjectFactory.class.getName(), factory.getClass().getName()}, 
0: //                       factory, null);
0: //
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //
0: //    assertSame("The naming manager should have returned the reference object", ref, obj);
0: //  }
0: //
0: //  @Test
0: //  public void testSpecifiedFactoryWithNoMatchingFactory() throws Exception
0: //  {
0: //    Reference ref = new Reference("dummy.class.name");
0: //
0: //    Object obj = NamingManager.getObjectInstance(ref, null, null, null);
0: //
0: //    assertSame("The naming manager should have returned the reference object", ref, obj);
0: //  }
0: //}
============================================================================