1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
2:428e9f1: 
1:428e9f1: import java.util.Collection;
1:428e9f1: import java.util.Map;
1:428e9f1: 
1:3f524ae: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1:428e9f1: import org.osgi.resource.Capability;
1:428e9f1: import org.osgi.resource.Requirement;
1:428e9f1: import org.osgi.resource.Resource;
1:428e9f1: 
1:d6eb080: public class LocalRepository implements org.apache.aries.subsystem.core.repository.Repository {
1:3f524ae: 	private final CapabilitySetRepository repository;
1:428e9f1: 	
1:428e9f1: 	public LocalRepository(Collection<Resource> resources) {
1:3f524ae: 		repository = new CapabilitySetRepository();
1:a990e32: 		addResources(resources);
1:3f524ae: 	}
1:428e9f1: 	
1:428e9f1: 	@Override
1:428e9f1: 	public Map<Requirement, Collection<Capability>> findProviders(
1:428e9f1: 			Collection<? extends Requirement> requirements) {
1:3f524ae: 		return repository.findProviders(requirements);
3:428e9f1: 	}
1:a990e32: 	
1:a990e32: 	private void addResources(Collection<Resource> resources) {
1:a990e32: 		for (Resource resource : resources) {
1:a990e32: 			addResource(resource);
1:a990e32: 		}
1:a990e32: 	}
1:a990e32: 	
1:a990e32: 	private void addResource(Resource resource) {
1:a990e32: 		repository.addResource(resource);
1:a990e32: 		if (resource instanceof RawSubsystemResource) {
1:a990e32: 			addResources(((RawSubsystemResource)resource).getResources());
1:a990e32: 		}
1:a990e32: 	}
1:428e9f1: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: 		addResources(resources);
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private void addResources(Collection<Resource> resources) {
1: 		for (Resource resource : resources) {
1: 			addResource(resource);
1: 		}
1: 	}
1: 	
1: 	private void addResource(Resource resource) {
1: 		repository.addResource(resource);
1: 		if (resource instanceof RawSubsystemResource) {
1: 			addResources(((RawSubsystemResource)resource).getResources());
1: 		}
1: 	}
commit:3f524ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.capabilityset.CapabilitySetRepository;
1: 	private final CapabilitySetRepository repository;
1: 		repository = new CapabilitySetRepository();
0: 		for (Resource resource : resources) {
0: 		    repository.addResource(resource);
1: 		}
1: 		return repository.findProviders(requirements);
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
commit:428e9f1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.subsystem.core.resource;
1: 
0: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.apache.aries.subsystem.core.ResourceHelper;
1: import org.osgi.resource.Capability;
1: import org.osgi.resource.Requirement;
1: import org.osgi.resource.Resource;
0: import org.osgi.service.repository.Repository;
1: 
0: public class LocalRepository implements Repository {
0: 	private final Collection<Resource> resources;
1: 	
1: 	public LocalRepository(Collection<Resource> resources) {
0: 		this.resources = resources;
1: 	}
1: 	
0: 	public Collection<Capability> findProviders(Requirement requirement) {
0: 		ArrayList<Capability> result = new ArrayList<Capability>();
0: 		for (Resource resource : resources)
0: 			for (Capability capability : resource.getCapabilities(requirement.getNamespace()))
0: 				if (ResourceHelper.matches(requirement, capability))
0: 					result.add(capability);
0: 		result.trimToSize();
0: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public Map<Requirement, Collection<Capability>> findProviders(
1: 			Collection<? extends Requirement> requirements) {
0: 		Map<Requirement, Collection<Capability>> result = new HashMap<Requirement, Collection<Capability>>();
0: 		for (Requirement requirement : requirements)
0: 			result.put(requirement, findProviders(requirement));
0: 		return result;
1: 	}
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: public class LocalRepository implements org.apache.aries.subsystem.core.repository.Repository {
============================================================================