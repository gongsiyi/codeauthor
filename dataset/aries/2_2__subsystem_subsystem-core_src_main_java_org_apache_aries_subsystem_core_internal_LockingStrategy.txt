1:b66ad7c: package org.apache.aries.subsystem.core.internal;
2:b66ad7c: 
1:b66ad7c: import java.util.ArrayList;
1:b66ad7c: import java.util.Collection;
1:b66ad7c: import java.util.HashMap;
1:b66ad7c: import java.util.HashSet;
1:b66ad7c: import java.util.Map;
1:b66ad7c: import java.util.Set;
1:b66ad7c: import java.util.concurrent.TimeUnit;
1:b66ad7c: import java.util.concurrent.locks.Condition;
1:b66ad7c: import java.util.concurrent.locks.ReentrantLock;
1:b66ad7c: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:b66ad7c: 
1:b66ad7c: import org.osgi.service.subsystem.Subsystem;
1:b66ad7c: import org.osgi.service.subsystem.SubsystemException;
1:b66ad7c: 
1:b66ad7c: public class LockingStrategy {
1:279dba5: 	private final int TRY_LOCK_TIME;
1:279dba5: 	private final TimeUnit TRY_LOCK_TIME_UNIT = TimeUnit.SECONDS;
1:279dba5: 
1:279dba5: 	public LockingStrategy(String tryLockTime) {
1:279dba5: 		int value = 600; // ten mins by default
1:279dba5: 		if (tryLockTime != null) {
1:279dba5: 			try {
1:279dba5: 				value = Integer.parseInt(tryLockTime);
1:279dba5: 			} catch (NumberFormatException e) {
1:279dba5: 				// ignore, the default will be used
1:279dba5: 			}
1:279dba5: 		}
1:279dba5: 		TRY_LOCK_TIME = value;
1:279dba5: 	}
1:279dba5: 
1:b66ad7c: 	/*
1:b66ad7c: 	 * A mutual exclusion lock used when acquiring the state change locks of
1:b66ad7c: 	 * a collection of subsystems in order to prevent cycle deadlocks.
1:b66ad7c: 	 */
1:279dba5: 	private final ReentrantLock lock = new ReentrantLock();
1:b66ad7c: 	/*
1:b66ad7c: 	 * Used when the state change lock of a subsystem cannot be acquired. All
1:b66ad7c: 	 * other state change locks are released while waiting. The condition is met
1:b66ad7c: 	 * whenever the state change lock of one or more subsystems is released.
1:b66ad7c: 	 */
1:279dba5: 	private final Condition condition = lock.newCondition();
1:b66ad7c: 	
1:b66ad7c: 	/*
1:b66ad7c: 	 * Allow only one of the following operations to be executing at the same 
1:b66ad7c: 	 * time.
1:b66ad7c: 	 * 
1:b66ad7c: 	 * (1) Install
1:b66ad7c: 	 * (2) Install Dependencies
1:b66ad7c: 	 * (3) Uninstall
1:b66ad7c: 	 * 
1:b66ad7c: 	 * Allow any number of the following operations to be executing at the same
1:b66ad7c: 	 * time.
1:b66ad7c: 	 * 
1:b66ad7c: 	 * (1) Resolve
1:b66ad7c: 	 * (2) Start
1:b66ad7c: 	 * (3) Stop
1:b66ad7c: 	 */
1:279dba5: 	private final ReentrantReadWriteLock rwlock = new ReentrantReadWriteLock();
1:b66ad7c: 	
1:279dba5: 	private final ThreadLocal<Map<Subsystem.State, Set<BasicSubsystem>>> local = new ThreadLocal<Map<Subsystem.State, Set<BasicSubsystem>>>() {
1:b66ad7c: 		@Override
1:b66ad7c: 		protected Map<Subsystem.State, Set<BasicSubsystem>> initialValue() {
1:b66ad7c: 			return new HashMap<Subsystem.State, Set<BasicSubsystem>>();
1:b66ad7c: 		}
1:b66ad7c: 	};
1:b66ad7c: 	
1:279dba5: 	public void lock() {
1:b66ad7c: 		try {
1:b66ad7c: 			if (!lock.tryLock(TRY_LOCK_TIME, TRY_LOCK_TIME_UNIT)) {
1:b66ad7c: 				throw new SubsystemException("Unable to acquire the global mutual exclusion lock in time.");
1:b66ad7c: 			}
1:b66ad7c: 		}
1:b66ad7c: 		catch (InterruptedException e) {
1:b66ad7c: 			throw new SubsystemException(e);
1:b66ad7c: 		}
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public void unlock() {
1:b66ad7c: 		lock.unlock();
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public void lock(Collection<BasicSubsystem> subsystems) {
1:b66ad7c: 		Collection<BasicSubsystem> locked = new ArrayList<BasicSubsystem>(subsystems.size());
1:b66ad7c: 		try {
1:b66ad7c: 			while (locked.size() < subsystems.size()) {
1:b66ad7c: 				for (BasicSubsystem subsystem : subsystems) {
1:b66ad7c: 					if (!subsystem.stateChangeLock().tryLock()) {
1:b66ad7c: 						unlock(locked);
1:b66ad7c: 						locked.clear();
1:279dba5: 						if (!condition.await(TRY_LOCK_TIME, TimeUnit.SECONDS)) {
1:b66ad7c: 							throw new SubsystemException("Unable to acquire the state change lock in time: " + subsystem);
1:b66ad7c: 						}
1:b66ad7c: 						break;
1:b66ad7c: 					}
1:b66ad7c: 					locked.add(subsystem);
1:b66ad7c: 				}
1:b66ad7c: 			}
1:b66ad7c: 		}
1:b66ad7c: 		catch (InterruptedException e) {
1:b66ad7c: 			unlock(locked);
1:b66ad7c: 			throw new SubsystemException(e);
1:b66ad7c: 		}
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public void unlock(Collection<BasicSubsystem> subsystems) {
1:b66ad7c: 		for (BasicSubsystem subsystem : subsystems) {
1:b66ad7c: 			subsystem.stateChangeLock().unlock();
1:b66ad7c: 		}
1:b66ad7c: 		signalAll();
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	private void signalAll() {
1:b66ad7c: 		lock();
1:b66ad7c: 		try {
1:b66ad7c: 			condition.signalAll();
1:b66ad7c: 		}
1:b66ad7c: 		finally {
1:b66ad7c: 			unlock();
1:b66ad7c: 		}
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public boolean set(Subsystem.State state, BasicSubsystem subsystem) {
1:b66ad7c: 		Map<Subsystem.State, Set<BasicSubsystem>> map = local.get();
1:b66ad7c: 		Set<BasicSubsystem> subsystems = map.get(state);
1:b66ad7c: 		if (subsystems == null) {
1:b66ad7c: 			subsystems = new HashSet<BasicSubsystem>();
1:b66ad7c: 			map.put(state, subsystems);
1:b66ad7c: 			local.set(map);
1:b66ad7c: 		}
1:b66ad7c: 		if (subsystems.contains(subsystem)) {
1:b66ad7c: 			return false;
1:b66ad7c: 		}
1:b66ad7c: 		subsystems.add(subsystem);
1:b66ad7c: 		return true;
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public void unset(Subsystem.State state, BasicSubsystem subsystem) {
1:b66ad7c: 		Map<Subsystem.State, Set<BasicSubsystem>> map = local.get();
1:b66ad7c: 		Set<BasicSubsystem> subsystems = map.get(state);
1:b66ad7c: 		if (subsystems != null) {
1:b66ad7c: 			subsystems.remove(subsystem);
1:b66ad7c: 		}
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public void readLock() {
1:b66ad7c: 		try {
1:b66ad7c: 			if (!rwlock.readLock().tryLock(TRY_LOCK_TIME, TRY_LOCK_TIME_UNIT)) {
1:b66ad7c: 				throw new SubsystemException("Unable to acquire the global read lock in time.");
1:b66ad7c: 			}
1:b66ad7c: 		}
1:b66ad7c: 		catch (InterruptedException e) {
1:b66ad7c: 			throw new SubsystemException(e);
1:b66ad7c: 		}
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public void readUnlock() {
1:b66ad7c: 		rwlock.readLock().unlock();
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public void writeLock() {
1:b66ad7c: 		try {
1:b66ad7c: 			if (!rwlock.writeLock().tryLock(TRY_LOCK_TIME, TRY_LOCK_TIME_UNIT)) {
1:b66ad7c: 				throw new SubsystemException("Unable to acquire the global write lock in time.");
1:b66ad7c: 			}
1:b66ad7c: 		}
1:b66ad7c: 		catch (InterruptedException e) {
1:b66ad7c: 			throw new SubsystemException(e);
1:b66ad7c: 		}
1:b66ad7c: 	}
1:b66ad7c: 	
1:279dba5: 	public void writeUnlock() {
1:b66ad7c: 		rwlock.writeLock().unlock();
1:b66ad7c: 	}
1:b66ad7c: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:279dba5
/////////////////////////////////////////////////////////////////////////
1: 	private final int TRY_LOCK_TIME;
1: 	private final TimeUnit TRY_LOCK_TIME_UNIT = TimeUnit.SECONDS;
1: 
1: 	public LockingStrategy(String tryLockTime) {
1: 		int value = 600; // ten mins by default
1: 		if (tryLockTime != null) {
1: 			try {
1: 				value = Integer.parseInt(tryLockTime);
1: 			} catch (NumberFormatException e) {
1: 				// ignore, the default will be used
1: 			}
1: 		}
1: 		TRY_LOCK_TIME = value;
1: 	}
1: 
1: 	private final ReentrantLock lock = new ReentrantLock();
1: 	private final Condition condition = lock.newCondition();
/////////////////////////////////////////////////////////////////////////
1: 	private final ReentrantReadWriteLock rwlock = new ReentrantReadWriteLock();
1: 	private final ThreadLocal<Map<Subsystem.State, Set<BasicSubsystem>>> local = new ThreadLocal<Map<Subsystem.State, Set<BasicSubsystem>>>() {
1: 	public void lock() {
/////////////////////////////////////////////////////////////////////////
1: 	public void unlock() {
1: 	public void lock(Collection<BasicSubsystem> subsystems) {
/////////////////////////////////////////////////////////////////////////
1: 						if (!condition.await(TRY_LOCK_TIME, TimeUnit.SECONDS)) {
/////////////////////////////////////////////////////////////////////////
1: 	public void unlock(Collection<BasicSubsystem> subsystems) {
1: 	private void signalAll() {
/////////////////////////////////////////////////////////////////////////
1: 	public boolean set(Subsystem.State state, BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	public void unset(Subsystem.State state, BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	public void readLock() {
/////////////////////////////////////////////////////////////////////////
1: 	public void readUnlock() {
1: 	public void writeLock() {
/////////////////////////////////////////////////////////////////////////
1: 	public void writeUnlock() {
author:John Ross
-------------------------------------------------------------------------------
commit:b66ad7c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.locks.Condition;
1: import java.util.concurrent.locks.ReentrantLock;
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
1: 
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class LockingStrategy {
0: 	private static final int TRY_LOCK_TIME = 30000;
0: 	private static final TimeUnit TRY_LOCK_TIME_UNIT = TimeUnit.MILLISECONDS;
1: 	
1: 	/*
1: 	 * A mutual exclusion lock used when acquiring the state change locks of
1: 	 * a collection of subsystems in order to prevent cycle deadlocks.
1: 	 */
0: 	private static final ReentrantLock lock = new ReentrantLock();
1: 	/*
1: 	 * Used when the state change lock of a subsystem cannot be acquired. All
1: 	 * other state change locks are released while waiting. The condition is met
1: 	 * whenever the state change lock of one or more subsystems is released.
1: 	 */
0: 	private static final Condition condition = lock.newCondition();
1: 	
1: 	/*
1: 	 * Allow only one of the following operations to be executing at the same 
1: 	 * time.
1: 	 * 
1: 	 * (1) Install
1: 	 * (2) Install Dependencies
1: 	 * (3) Uninstall
1: 	 * 
1: 	 * Allow any number of the following operations to be executing at the same
1: 	 * time.
1: 	 * 
1: 	 * (1) Resolve
1: 	 * (2) Start
1: 	 * (3) Stop
1: 	 */
0: 	private static final ReentrantReadWriteLock rwlock = new ReentrantReadWriteLock();
1: 	
0: 	private static final ThreadLocal<Map<Subsystem.State, Set<BasicSubsystem>>> local = new ThreadLocal<Map<Subsystem.State, Set<BasicSubsystem>>>() {
1: 		@Override
1: 		protected Map<Subsystem.State, Set<BasicSubsystem>> initialValue() {
1: 			return new HashMap<Subsystem.State, Set<BasicSubsystem>>();
1: 		}
1: 	};
1: 	
0: 	public static void lock() {
1: 		try {
1: 			if (!lock.tryLock(TRY_LOCK_TIME, TRY_LOCK_TIME_UNIT)) {
1: 				throw new SubsystemException("Unable to acquire the global mutual exclusion lock in time.");
1: 			}
1: 		}
1: 		catch (InterruptedException e) {
1: 			throw new SubsystemException(e);
1: 		}
1: 	}
1: 	
0: 	public static void unlock() {
1: 		lock.unlock();
1: 	}
1: 	
0: 	public static void lock(Collection<BasicSubsystem> subsystems) {
1: 		Collection<BasicSubsystem> locked = new ArrayList<BasicSubsystem>(subsystems.size());
1: 		try {
1: 			while (locked.size() < subsystems.size()) {
1: 				for (BasicSubsystem subsystem : subsystems) {
1: 					if (!subsystem.stateChangeLock().tryLock()) {
1: 						unlock(locked);
1: 						locked.clear();
0: 						if (!LockingStrategy.condition.await(TRY_LOCK_TIME, TimeUnit.SECONDS)) {
1: 							throw new SubsystemException("Unable to acquire the state change lock in time: " + subsystem);
1: 						}
1: 						break;
1: 					}
1: 					locked.add(subsystem);
1: 				}
1: 			}
1: 		}
1: 		catch (InterruptedException e) {
1: 			unlock(locked);
1: 			throw new SubsystemException(e);
1: 		}
1: 	}
1: 	
0: 	public static void unlock(Collection<BasicSubsystem> subsystems) {
1: 		for (BasicSubsystem subsystem : subsystems) {
1: 			subsystem.stateChangeLock().unlock();
1: 		}
1: 		signalAll();
1: 	}
1: 	
0: 	private static void signalAll() {
1: 		lock();
1: 		try {
1: 			condition.signalAll();
1: 		}
1: 		finally {
1: 			unlock();
1: 		}
1: 	}
1: 	
0: 	public static boolean set(Subsystem.State state, BasicSubsystem subsystem) {
1: 		Map<Subsystem.State, Set<BasicSubsystem>> map = local.get();
1: 		Set<BasicSubsystem> subsystems = map.get(state);
1: 		if (subsystems == null) {
1: 			subsystems = new HashSet<BasicSubsystem>();
1: 			map.put(state, subsystems);
1: 			local.set(map);
1: 		}
1: 		if (subsystems.contains(subsystem)) {
1: 			return false;
1: 		}
1: 		subsystems.add(subsystem);
1: 		return true;
1: 	}
1: 	
0: 	public static void unset(Subsystem.State state, BasicSubsystem subsystem) {
1: 		Map<Subsystem.State, Set<BasicSubsystem>> map = local.get();
1: 		Set<BasicSubsystem> subsystems = map.get(state);
1: 		if (subsystems != null) {
1: 			subsystems.remove(subsystem);
1: 		}
1: 	}
1: 	
0: 	public static void readLock() {
1: 		try {
1: 			if (!rwlock.readLock().tryLock(TRY_LOCK_TIME, TRY_LOCK_TIME_UNIT)) {
1: 				throw new SubsystemException("Unable to acquire the global read lock in time.");
1: 			}
1: 		}
1: 		catch (InterruptedException e) {
1: 			throw new SubsystemException(e);
1: 		}
1: 	}
1: 	
0: 	public static void readUnlock() {
1: 		rwlock.readLock().unlock();
1: 	}
1: 	
0: 	public static void writeLock() {
1: 		try {
1: 			if (!rwlock.writeLock().tryLock(TRY_LOCK_TIME, TRY_LOCK_TIME_UNIT)) {
1: 				throw new SubsystemException("Unable to acquire the global write lock in time.");
1: 			}
1: 		}
1: 		catch (InterruptedException e) {
1: 			throw new SubsystemException(e);
1: 		}
1: 	}
1: 	
0: 	public static void writeUnlock() {
1: 		rwlock.writeLock().unlock();
1: 	}
1: }
============================================================================