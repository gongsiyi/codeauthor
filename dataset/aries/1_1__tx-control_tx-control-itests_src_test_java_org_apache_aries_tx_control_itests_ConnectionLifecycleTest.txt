1:2906477: /*
1:2906477:  * Licensed to the Apache Software Foundation (ASF) under one
1:2906477:  * or more contributor license agreements.  See the NOTICE file
1:2906477:  * distributed with this work for additional information
1:2906477:  * regarding copyright ownership.  The ASF licenses this file
1:2906477:  * to you under the Apache License, Version 2.0 (the
1:2906477:  * "License"); you may not use this file except in compliance
1:2906477:  * with the License.  You may obtain a copy of the License at
1:2906477:  *
1:2906477:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2906477:  *
1:2906477:  * Unless required by applicable law or agreed to in writing,
1:2906477:  * software distributed under the License is distributed on an
1:2906477:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2906477:  * KIND, either express or implied.  See the License for the
1:2906477:  * specific language governing permissions and limitations
1:2906477:  * under the License.
1:2906477:  */
1:2906477: package org.apache.aries.tx.control.itests;
30:2906477: 
1:2906477: import static java.util.stream.Collectors.toList;
1:2906477: import static org.junit.Assert.assertEquals;
1:2906477: import static org.junit.Assert.assertNotNull;
1:2906477: import static org.junit.Assert.assertTrue;
1:2906477: import static org.junit.Assert.fail;
1:2906477: 
1:2906477: import java.sql.ResultSet;
1:2906477: import java.util.Arrays;
1:dff4924: import java.util.HashMap;
1:dff4924: import java.util.HashSet;
1:2906477: import java.util.List;
1:dff4924: import java.util.Map;
1:dff4924: import java.util.Set;
1:dff4924: import java.util.TreeSet;
1:2906477: import java.util.function.Predicate;
1:dff4924: import java.util.stream.Collectors;
1:2906477: 
1:2906477: import org.junit.Assume;
1:2906477: import org.junit.Test;
1:2906477: import org.junit.runner.RunWith;
1:2906477: import org.ops4j.pax.exam.junit.PaxExam;
1:2906477: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:2906477: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:2906477: import org.osgi.framework.Bundle;
1:2906477: import org.osgi.framework.BundleException;
1:2906477: import org.osgi.service.cm.Configuration;
1:2906477: import org.osgi.service.cm.ConfigurationAdmin;
1:2906477: import org.osgi.service.transaction.control.ScopedWorkException;
1:2906477: import org.osgi.service.transaction.control.TransactionException;
1:2906477: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1:2906477: 
1:2906477: @RunWith(PaxExam.class)
1:2906477: @ExamReactorStrategy(PerClass.class)
1:2906477: public class ConnectionLifecycleTest extends AbstractTransactionTest {
1:2906477: 
1:dff4924: 	private static final long LIFETIME = 30000;
1:dff4924: 	
1:dff4924: 	private static final int CONNECTIONS = 17;
1:dff4924: 	
1:dff4924: 	@Override
1:dff4924: 	protected Map<String, Object> resourceProviderConfig() {
1:dff4924: 		// Set a short lifecycle for pooled connections and force a non-standard number
1:dff4924: 		Map<String, Object> config = new HashMap<>();
1:dff4924: 		config.put(JDBCConnectionProviderFactory.IDLE_TIMEOUT, LIFETIME/2);
1:dff4924: 		config.put(JDBCConnectionProviderFactory.CONNECTION_LIFETIME, LIFETIME);
1:dff4924: 		config.put(JDBCConnectionProviderFactory.MAX_CONNECTIONS, CONNECTIONS);
1:dff4924: 		config.put(JDBCConnectionProviderFactory.MIN_CONNECTIONS, CONNECTIONS);
1:dff4924: 		
1:dff4924: 		return config;
1:dff4924: 	}
1:dff4924: 
1:2906477: 	@Test
1:2906477: 	public void testStopOfTxControlBundle() {
1:2906477: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-service"),
1:2906477: 				"The transaction control service is closed");
1:2906477: 	}
1:2906477: 
1:2906477: 	@Test
1:2906477: 	public void testStopOfJDBCBundle() {
1:dff4924: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-provider-jdbc"),
1:2906477: 				"There was a problem getting hold of a database connection");
1:2906477: 	}
1:2906477: 
1:2906477: 	private void doBundleStoppingTest(Predicate<Bundle> p, String exceptionMessage) {
1:dff4924: 		txControl.required(
1:dff4924: 				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1:2906477: 
1:2906477: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1:dff4924: 			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:2906477: 			rs.next();
1:2906477: 			return rs.getString(1);
1:2906477: 		}));
1:dff4924: 
1:dff4924: 		List<Bundle> toStop = Arrays.stream(context.getBundles()).filter(p).collect(toList());
1:dff4924: 
1:2906477: 		System.out.println(toStop);
1:dff4924: 
3:2906477: 		try {
1:dff4924: 			toStop.stream().forEach(b -> {
1:dff4924: 				System.out.println("Stopping " + b.getSymbolicName());
1:dff4924: 				try {
1:dff4924: 					b.stop();
1:dff4924: 				} catch (BundleException e) {
1:dff4924: 				}
1:dff4924: 			});
1:dff4924: 
1:2906477: 			try {
1:2906477: 				assertEquals("Hello World!", txControl.notSupported(() -> {
1:dff4924: 					ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:2906477: 					rs.next();
1:2906477: 					return rs.getString(1);
1:2906477: 				}));
1:2906477: 				fail("Should not be accessible");
1:2906477: 			} catch (ScopedWorkException swe) {
1:2906477: 				assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1:2906477: 				assertEquals(exceptionMessage, swe.getCause().getMessage());
1:2906477: 			} catch (TransactionException te) {
1:2906477: 				assertEquals(exceptionMessage, te.getMessage());
1:2906477: 			}
1:2906477: 		} finally {
1:dff4924: 			toStop.stream().forEach(b -> {
1:dff4924: 				try {
1:dff4924: 					b.start();
1:dff4924: 				} catch (BundleException e) {
1:dff4924: 				}
1:dff4924: 			});
1:2906477: 		}
1:2906477: 	}
1:2906477: 
1:2906477: 	@Test
1:2906477: 	public void testDeleteOfConfig() throws Exception {
1:2906477: 		Assume.assumeTrue("Not a configuration test", isConfigured());
1:dff4924: 
1:dff4924: 		txControl.required(
1:dff4924: 				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1:dff4924: 
1:2906477: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1:dff4924: 			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:2906477: 			rs.next();
1:2906477: 			return rs.getString(1);
1:2906477: 		}));
1:dff4924: 
1:2906477: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:dff4924: 
1:dff4924: 		Configuration[] configurations = cm
1:dff4924: 				.listConfigurations("(service.factoryPid=org.apache.aries.tx.control.jdbc.*)");
1:dff4924: 
1:2906477: 		assertNotNull(configurations);
1:2906477: 		assertEquals(1, configurations.length);
1:dff4924: 
1:2906477: 		configurations[0].delete();
1:dff4924: 
1:2906477: 		Thread.sleep(2000);
1:dff4924: 
1:2906477: 		try {
1:2906477: 			assertEquals("Hello World!", txControl.notSupported(() -> {
1:dff4924: 				ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:2906477: 				rs.next();
1:2906477: 				return rs.getString(1);
1:2906477: 			}));
1:2906477: 			fail("Should not be accessible");
1:2906477: 		} catch (ScopedWorkException swe) {
1:2906477: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1:2906477: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1:2906477: 		}
1:2906477: 	}
1:dff4924: 
1:dff4924: 	@Test
1:2906477: 	public void testUpdateOfConfig() throws Exception {
1:2906477: 		Assume.assumeTrue("Not a configuration test", isConfigured());
1:dff4924: 
1:dff4924: 		txControl.required(
1:dff4924: 				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1:dff4924: 
1:2906477: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1:dff4924: 			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:2906477: 			rs.next();
1:2906477: 			return rs.getString(1);
1:2906477: 		}));
1:dff4924: 
1:2906477: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:dff4924: 
1:dff4924: 		Configuration[] configurations = cm
1:dff4924: 				.listConfigurations("(service.factoryPid=org.apache.aries.tx.control.jdbc.*)");
1:dff4924: 
1:2906477: 		assertNotNull(configurations);
1:2906477: 		assertEquals(1, configurations.length);
1:2906477: 
1:2906477: 		configurations[0].update();
1:dff4924: 
1:2906477: 		Thread.sleep(2000);
1:dff4924: 
1:2906477: 		try {
1:2906477: 			assertEquals("Hello World!", txControl.notSupported(() -> {
1:dff4924: 				ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:2906477: 				rs.next();
1:2906477: 				return rs.getString(1);
1:2906477: 			}));
1:2906477: 			fail("Should not be accessible");
1:2906477: 		} catch (ScopedWorkException swe) {
1:2906477: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1:2906477: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1:2906477: 		}
1:2906477: 	}
1:2906477: 
1:2906477: 	@Test
1:2906477: 	public void testReleaseOfFactoryService() {
1:2906477: 		Assume.assumeFalse("Not a factory test", isConfigured());
1:dff4924: 
1:dff4924: 		txControl.required(
1:dff4924: 				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1:dff4924: 
1:2906477: 		assertEquals("Hello World!", txControl.notSupported(() -> {
1:dff4924: 			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:2906477: 			rs.next();
1:2906477: 			return rs.getString(1);
1:2906477: 		}));
1:2906477: 
1:dff4924: 		trackers.stream().filter(t -> t.getService() instanceof JDBCConnectionProviderFactory).findFirst().get()
1:dff4924: 				.close();
1:dff4924: 		;
1:dff4924: 
1:2906477: 		try {
1:2906477: 			assertEquals("Hello World!", txControl.notSupported(() -> {
1:dff4924: 				ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:2906477: 				rs.next();
1:2906477: 				return rs.getString(1);
1:2906477: 			}));
1:2906477: 			fail("Should not be accessible");
1:2906477: 		} catch (ScopedWorkException swe) {
1:2906477: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1:2906477: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1:2906477: 		}
1:2906477: 	}
1:2906477: 
1:2906477: 	@Test
1:dff4924: 	public void testPoolLifecycle() throws Exception {
1:dff4924: 		Set<String> allIds = new TreeSet<>();
1:dff4924: 
1:dff4924: 		for(int i = 0; i < 100; i++) {
1:dff4924: 			Set<String> ids = txControl.notSupported(() -> {
1:dff4924: 				Set<String> sessionIds = new HashSet<>();
1:dff4924: 				
1:dff4924: 				ResultSet rs = connection.createStatement()
1:dff4924: 						.executeQuery("Select ID, SESSION_START from INFORMATION_SCHEMA.SESSIONS");
1:dff4924: 				while(rs.next()) {
1:dff4924: 					String connectionId = rs.getString(1);
1:dff4924: 					if(connectionId.length() == 1) {
1:dff4924: 						connectionId = "0" + connectionId;
1:dff4924: 					}
1:dff4924: 					sessionIds.add(connectionId + "-"
1:dff4924: 							+ rs.getString(2));
1:dff4924: 				}
1:dff4924: 				return sessionIds;
1:dff4924: 			});
1:dff4924: 			
1:dff4924: 			Set<String> newIds = ids.stream()
1:dff4924: 						.filter(id -> !allIds.contains(id))
1:dff4924: 						.collect(Collectors.toSet());
1:dff4924: 			
1:dff4924: 			allIds.addAll(ids);
1:dff4924: 			System.out.println("Currently there are " + ids.size() + " connections");
1:dff4924: 			System.out.println("In total there have been " + allIds.size() + " connections");
1:dff4924: 			
1:dff4924: 			int currentConnections = ids.size();
1:dff4924: 			
1:dff4924: 			if(currentConnections > CONNECTIONS) {
1:dff4924: 				if((currentConnections - newIds.size()) <= CONNECTIONS) {
1:dff4924: 					System.out.println("The number of connections is too high at " + currentConnections +
1:dff4924: 							", but " + newIds.size() + " new connections have just been added. The previous connections may be in the process of being closed and so this loop will not fail.");
1:dff4924: 				} else {
1:dff4924: 					fail("Too many sessions " + currentConnections);
1:dff4924: 				}
1:dff4924: 			}
1:dff4924: 				
1:dff4924: 			Thread.sleep(500);
1:dff4924: 		}
1:dff4924: 		
1:dff4924: 		int size = allIds.size();
1:dff4924: 		if(size <= CONNECTIONS + 1) {
1:dff4924: 			assertEquals("Expected 34 sessions, but found " + size + " " + allIds, 34, size);
1:dff4924: 		} else if(size <= (2 * CONNECTIONS)) {
1:dff4924: 			System.out.println("We really should have 34 sessions, but " + size  + 
1:dff4924: 					" is probably enough ");
1:dff4924: 		} else {
1:dff4924: 			fail("There should not need to be more than " + (2 * CONNECTIONS) + " connections");
1:dff4924: 		}
1:dff4924: 	}
1:2906477: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:dff4924
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.TreeSet;
1: import java.util.stream.Collectors;
/////////////////////////////////////////////////////////////////////////
1: 	private static final long LIFETIME = 30000;
1: 	
1: 	private static final int CONNECTIONS = 17;
1: 	
1: 	@Override
1: 	protected Map<String, Object> resourceProviderConfig() {
1: 		// Set a short lifecycle for pooled connections and force a non-standard number
1: 		Map<String, Object> config = new HashMap<>();
1: 		config.put(JDBCConnectionProviderFactory.IDLE_TIMEOUT, LIFETIME/2);
1: 		config.put(JDBCConnectionProviderFactory.CONNECTION_LIFETIME, LIFETIME);
1: 		config.put(JDBCConnectionProviderFactory.MAX_CONNECTIONS, CONNECTIONS);
1: 		config.put(JDBCConnectionProviderFactory.MIN_CONNECTIONS, CONNECTIONS);
1: 		
1: 		return config;
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
1: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-provider-jdbc"),
1: 		txControl.required(
1: 				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1: 
1: 		List<Bundle> toStop = Arrays.stream(context.getBundles()).filter(p).collect(toList());
1: 
1: 
1: 			toStop.stream().forEach(b -> {
1: 				System.out.println("Stopping " + b.getSymbolicName());
1: 				try {
1: 					b.stop();
1: 				} catch (BundleException e) {
1: 				}
1: 			});
1: 
1: 					ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
/////////////////////////////////////////////////////////////////////////
1: 			toStop.stream().forEach(b -> {
1: 				try {
1: 					b.start();
1: 				} catch (BundleException e) {
1: 				}
1: 			});
1: 
1: 		txControl.required(
1: 				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1: 
1: 
1: 		Configuration[] configurations = cm
1: 				.listConfigurations("(service.factoryPid=org.apache.aries.tx.control.jdbc.*)");
1: 
1: 
1: 
1: 
1: 				ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
/////////////////////////////////////////////////////////////////////////
1: 
1: 		txControl.required(
1: 				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1: 
1: 
1: 		Configuration[] configurations = cm
1: 				.listConfigurations("(service.factoryPid=org.apache.aries.tx.control.jdbc.*)");
1: 
1: 
1: 
1: 
1: 				ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 		txControl.required(
1: 				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1: 
1: 		trackers.stream().filter(t -> t.getService() instanceof JDBCConnectionProviderFactory).findFirst().get()
1: 				.close();
1: 		;
1: 
1: 				ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Test
1: 	public void testPoolLifecycle() throws Exception {
1: 		Set<String> allIds = new TreeSet<>();
1: 
1: 		for(int i = 0; i < 100; i++) {
1: 			Set<String> ids = txControl.notSupported(() -> {
1: 				Set<String> sessionIds = new HashSet<>();
1: 				
1: 				ResultSet rs = connection.createStatement()
1: 						.executeQuery("Select ID, SESSION_START from INFORMATION_SCHEMA.SESSIONS");
1: 				while(rs.next()) {
1: 					String connectionId = rs.getString(1);
1: 					if(connectionId.length() == 1) {
1: 						connectionId = "0" + connectionId;
1: 					}
1: 					sessionIds.add(connectionId + "-"
1: 							+ rs.getString(2));
1: 				}
1: 				return sessionIds;
1: 			});
1: 			
1: 			Set<String> newIds = ids.stream()
1: 						.filter(id -> !allIds.contains(id))
1: 						.collect(Collectors.toSet());
1: 			
1: 			allIds.addAll(ids);
1: 			System.out.println("Currently there are " + ids.size() + " connections");
1: 			System.out.println("In total there have been " + allIds.size() + " connections");
1: 			
1: 			int currentConnections = ids.size();
1: 			
1: 			if(currentConnections > CONNECTIONS) {
1: 				if((currentConnections - newIds.size()) <= CONNECTIONS) {
1: 					System.out.println("The number of connections is too high at " + currentConnections +
1: 							", but " + newIds.size() + " new connections have just been added. The previous connections may be in the process of being closed and so this loop will not fail.");
1: 				} else {
1: 					fail("Too many sessions " + currentConnections);
1: 				}
1: 			}
1: 				
1: 			Thread.sleep(500);
1: 		}
1: 		
1: 		int size = allIds.size();
1: 		if(size <= CONNECTIONS + 1) {
1: 			assertEquals("Expected 34 sessions, but found " + size + " " + allIds, 34, size);
1: 		} else if(size <= (2 * CONNECTIONS)) {
1: 			System.out.println("We really should have 34 sessions, but " + size  + 
1: 					" is probably enough ");
1: 		} else {
1: 			fail("There should not need to be more than " + (2 * CONNECTIONS) + " connections");
1: 		}
1: 	}
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static java.util.stream.Collectors.toList;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.sql.ResultSet;
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.function.Predicate;
1: 
1: import org.junit.Assume;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.transaction.control.ScopedWorkException;
1: import org.osgi.service.transaction.control.TransactionException;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public class ConnectionLifecycleTest extends AbstractTransactionTest {
1: 
1: 	@Test
1: 	public void testStopOfTxControlBundle() {
1: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-service"),
1: 				"The transaction control service is closed");
1: 	}
1: 
1: 	@Test
1: 	public void testStopOfJDBCBundle() {
0: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-provider-jdbc"), 
1: 				"There was a problem getting hold of a database connection");
1: 	}
1: 
1: 	private void doBundleStoppingTest(Predicate<Bundle> p, String exceptionMessage) {
0: 		txControl.required(() -> connection.createStatement()
0: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 
1: 		assertEquals("Hello World!", txControl.notSupported(() -> {
0: 			ResultSet rs = connection.createStatement()
0: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getString(1);
1: 		}));
1: 		
1: 		
0: 		List<Bundle> toStop = Arrays.stream(context.getBundles())
0: 			.filter(p)
0: 			.collect(toList());
1: 		
1: 		System.out.println(toStop);
1: 		
1: 		try {
0: 			toStop.stream()
0: 				.forEach(b -> {
0: 					System.out.println("Stopping " + b.getSymbolicName());
1: 					try {
0: 						b.stop();
0: 					} catch (BundleException e) {}
0: 				});
1: 		
1: 			try {
1: 				assertEquals("Hello World!", txControl.notSupported(() -> {
0: 					ResultSet rs = connection.createStatement()
0: 							.executeQuery("Select * from TEST_TABLE");
1: 					rs.next();
1: 					return rs.getString(1);
1: 				}));
1: 				fail("Should not be accessible");
1: 			} catch (ScopedWorkException swe) {
1: 				assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1: 				assertEquals(exceptionMessage, swe.getCause().getMessage());
1: 			} catch (TransactionException te) {
1: 				assertEquals(exceptionMessage, te.getMessage());
1: 			}
1: 		} finally {
0: 			toStop.stream()
0: 				.forEach(b -> {
1: 					try {
0: 						b.start();
0: 					} catch (BundleException e) {}
0: 				});
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void testDeleteOfConfig() throws Exception {
1: 		Assume.assumeTrue("Not a configuration test", isConfigured());
1: 		
1: 		
0: 		txControl.required(() -> connection.createStatement()
0: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 
1: 		assertEquals("Hello World!", txControl.notSupported(() -> {
0: 			ResultSet rs = connection.createStatement()
0: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getString(1);
1: 		}));
1: 		
1: 		
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1: 		
0: 		Configuration[] configurations = cm.listConfigurations(
0: 				"(service.factoryPid=org.apache.aries.tx.control.jdbc.*)");
1: 		
1: 		assertNotNull(configurations);
1: 		assertEquals(1, configurations.length);
1: 		
1: 		configurations[0].delete();
1: 		
1: 		Thread.sleep(2000);
1: 		
1: 		try {
1: 			assertEquals("Hello World!", txControl.notSupported(() -> {
0: 				ResultSet rs = connection.createStatement()
0: 						.executeQuery("Select * from TEST_TABLE");
1: 				rs.next();
1: 				return rs.getString(1);
1: 			}));
1: 			fail("Should not be accessible");
1: 		} catch (ScopedWorkException swe) {
1: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void testUpdateOfConfig() throws Exception {
1: 		Assume.assumeTrue("Not a configuration test", isConfigured());
1: 		
1: 		
0: 		txControl.required(() -> connection.createStatement()
0: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 
1: 		assertEquals("Hello World!", txControl.notSupported(() -> {
0: 			ResultSet rs = connection.createStatement()
0: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getString(1);
1: 		}));
1: 		
1: 		
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1: 		
0: 		Configuration[] configurations = cm.listConfigurations(
0: 				"(service.factoryPid=org.apache.aries.tx.control.jdbc.*)");
1: 		
1: 		assertNotNull(configurations);
1: 		assertEquals(1, configurations.length);
1: 		
1: 		configurations[0].update();
1: 		
1: 		Thread.sleep(2000);
1: 		
1: 		try {
1: 			assertEquals("Hello World!", txControl.notSupported(() -> {
0: 				ResultSet rs = connection.createStatement()
0: 						.executeQuery("Select * from TEST_TABLE");
1: 				rs.next();
1: 				return rs.getString(1);
1: 			}));
1: 			fail("Should not be accessible");
1: 		} catch (ScopedWorkException swe) {
1: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testReleaseOfFactoryService() {
1: 		Assume.assumeFalse("Not a factory test", isConfigured());
1: 		
0: 		txControl.required(() -> connection.createStatement()
0: 				.execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: 
1: 		assertEquals("Hello World!", txControl.notSupported(() -> {
0: 			ResultSet rs = connection.createStatement()
0: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			return rs.getString(1);
1: 		}));
1: 		
1: 		
0: 		trackers.stream()
0: 			.filter(t -> t.getService() instanceof JDBCConnectionProviderFactory)
0: 			.findFirst()
0: 			.get().close();;
1: 		
1: 		
1: 		try {
1: 			assertEquals("Hello World!", txControl.notSupported(() -> {
0: 				ResultSet rs = connection.createStatement()
0: 						.executeQuery("Select * from TEST_TABLE");
1: 				rs.next();
1: 				return rs.getString(1);
1: 			}));
1: 			fail("Should not be accessible");
1: 		} catch (ScopedWorkException swe) {
1: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1: 		}
1: 	}
1: }
============================================================================