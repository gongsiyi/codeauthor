1:537d4ee: /**
1:537d4ee:  * Licensed to the Apache Software Foundation (ASF) under one
1:537d4ee:  * or more contributor license agreements.  See the NOTICE file
1:537d4ee:  * distributed with this work for additional information
1:537d4ee:  * regarding copyright ownership.  The ASF licenses this file
1:537d4ee:  * to you under the Apache License, Version 2.0 (the
1:537d4ee:  * "License"); you may not use this file except in compliance
1:537d4ee:  * with the License.  You may obtain a copy of the License at
1:537d4ee:  *
1:537d4ee:  *   http://www.apache.org/licenses/LICENSE-2.0
1:537d4ee:  *
1:537d4ee:  * Unless required by applicable law or agreed to in writing,
1:537d4ee:  * software distributed under the License is distributed on an
1:537d4ee:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:537d4ee:  * KIND, either express or implied.  See the License for the
1:537d4ee:  * specific language governing permissions and limitations
1:537d4ee:  * under the License.
1:537d4ee:  */
1:537d4ee: 
1:537d4ee: package org.apache.aries.util.tracker;
1:537d4ee: 
1:537d4ee: import java.util.List;
1:30172c1: import java.util.concurrent.ConcurrentHashMap;
1:30172c1: import java.util.concurrent.ConcurrentMap;
1:537d4ee: 
1:537d4ee: import org.osgi.framework.Bundle;
1:537d4ee: import org.osgi.framework.BundleContext;
1:537d4ee: import org.osgi.framework.BundleEvent;
1:537d4ee: import org.osgi.service.framework.CompositeBundle;
1:537d4ee: import org.osgi.util.tracker.BundleTracker;
1:537d4ee: import org.osgi.util.tracker.BundleTrackerCustomizer;
1:537d4ee: 
1:537d4ee: /**
1:537d4ee:  * A BundleTracker which will track bundles in the given context, and also 
1:537d4ee:  * bundles in any child contexts. This should be used instead of the
1:537d4ee:  * normal non-recursive BundleTracker when registering bundle tracker
1:537d4ee:  * customizers.
1:537d4ee:  */
1:537d4ee: public class InternalRecursiveBundleTracker extends BundleTracker
1:537d4ee: {
1:537d4ee:   private final int mask;
1:537d4ee: 
1:30172c1:   private final ConcurrentMap<String,String> alreadyRecursedContexts = new ConcurrentHashMap<String, String>();
1:537d4ee: 
1:537d4ee:   private final BundleTrackerCustomizer customizer;
1:537d4ee: 
1:8069959:   private final boolean nested;
1:8069959: 
1:537d4ee:   public InternalRecursiveBundleTracker(BundleContext context, int stateMask,
1:8069959:       BundleTrackerCustomizer customizer, boolean nested)
1:537d4ee:   {
1:537d4ee:     super(context, stateMask, null);
1:537d4ee:     mask = stateMask;
1:537d4ee:     this.customizer = customizer;
1:8069959:     this.nested = nested;
1:537d4ee:   }
1:537d4ee: 
1:537d4ee:   /*
1:537d4ee:   * (non-Javadoc)
1:537d4ee:   * @see org.osgi.util.tracker.BundleTracker#addingBundle(org.osgi.framework.Bundle, org.osgi.framework.BundleEvent)
1:537d4ee:   */
1:537d4ee:   @Override
1:537d4ee:   public Object addingBundle(Bundle b, BundleEvent event)
1:537d4ee:   {
1:537d4ee:     Object o = null;
1:537d4ee: 
1:537d4ee:     if (b instanceof CompositeBundle) {
1:c924499:       customizedProcessBundle(this, b, event, false);
1:537d4ee:       o = b;
1:8069959:     } else if (nested) {
1:537d4ee:       // Delegate to our customizer for normal bundles
1:537d4ee:       if (customizer != null) {
1:537d4ee:         o = customizer.addingBundle(b, event);
1:537d4ee:       }
1:537d4ee:     }
1:537d4ee: 
1:537d4ee:     return o;
1:537d4ee:   }
1:537d4ee: 
1:537d4ee:   /*
1:537d4ee:    * (non-Javadoc)
1:537d4ee:    * @see org.osgi.util.tracker.BundleTracker#modifiedBundle(org.osgi.framework.Bundle, org.osgi.framework.BundleEvent, java.lang.Object)
1:537d4ee:    */
1:537d4ee:   @Override
1:537d4ee:   public void modifiedBundle(Bundle b, BundleEvent event, Object object)
1:537d4ee:   {
1:537d4ee:     if (b instanceof CompositeBundle) {
1:c924499:       customizedProcessBundle(this, b, event, false);
2:537d4ee:     } else {
1:537d4ee:       // Delegate to our customizer for normal bundles
1:537d4ee:       if (customizer != null) {
1:537d4ee:         customizer.modifiedBundle(b, event, object);
1:537d4ee:       }
1:537d4ee:     }
1:537d4ee:   }
1:537d4ee: 
1:537d4ee:   /*
1:537d4ee:    * (non-Javadoc)
1:537d4ee:    * @see org.osgi.util.tracker.BundleTracker#removedBundle(org.osgi.framework.Bundle, org.osgi.framework.BundleEvent, java.lang.Object)
1:537d4ee:    */
1:537d4ee:   @Override
1:537d4ee:   public void removedBundle(Bundle b, BundleEvent event, Object object)
1:537d4ee:   {
1:537d4ee:     if (b instanceof CompositeBundle) {
1:c924499:       customizedProcessBundle(this, b, event, true);
1:537d4ee:     } else {
1:537d4ee:       if (customizer != null) {
1:537d4ee:         customizer.removedBundle(b, event, object);
1:537d4ee:       }
1:537d4ee:     }
1:537d4ee:   }
1:537d4ee: 
1:c924499:   protected void customizedProcessBundle(BundleTrackerCustomizer btc, Bundle b, BundleEvent event, boolean removing)
1:537d4ee:   {
1:537d4ee:     if (b instanceof CompositeBundle) {
1:537d4ee:       CompositeBundle cb = (CompositeBundle) b;
1:537d4ee:       // check if the compositeBundle is already tracked in the
1:537d4ee:       // BundleTrackerFactory
1:537d4ee:       String bundleScope = cb.getSymbolicName() + "_" + cb.getVersion().toString();
1:537d4ee:       List<BundleTracker> btList = BundleTrackerFactory.getBundleTrackerList(bundleScope);
1:537d4ee: 
1:537d4ee:       // bundle is already active and there is no event associated
1:c924499:       // this can happen when bundle is first time added to the tracker 
1:c924499:       // or when the tracker is being closed.
1:c924499:       if (event == null && !!!removing) {
1:537d4ee:         if (cb.getState() == Bundle.INSTALLED || cb.getState() == Bundle.RESOLVED || cb.getState() == Bundle.STARTING || cb.getState() == Bundle.ACTIVE) {
1:537d4ee:           openTracker(btc, cb, bundleScope, mask);
1:537d4ee:         }
1:537d4ee:       } else {
1:c924499:         // if we are removing, or the event is of the right type then we need to shutdown.
1:c924499:         if (removing || event.getType() == BundleEvent.STOPPED || event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {
1:537d4ee:           // if CompositeBundle is being stopped, let's remove the bundle
1:537d4ee:           // tracker(s) associated with the composite bundle
1:30172c1:           String bundleId = b.getSymbolicName()+"/"+b.getVersion();
1:30172c1:           alreadyRecursedContexts.remove(bundleId);
1:30172c1:           
1:537d4ee:           if (btList != null) {
1:537d4ee:             // unregister the bundlescope off the factory and close
1:537d4ee:             // bundle trackers
1:537d4ee:             BundleTrackerFactory.unregisterAndCloseBundleTracker(bundleScope);
1:537d4ee:           }
1:886154c:         } else if (event.getType() == BundleEvent.INSTALLED || event.getType() == BundleEvent.RESOLVED || event.getType() == BundleEvent.STARTING) {
1:537d4ee:           openTracker(btc, cb, bundleScope, mask);
1:537d4ee:         }
1:537d4ee:       }
1:537d4ee:     }
1:537d4ee:   }
1:537d4ee: 
1:537d4ee:   private synchronized void openTracker(BundleTrackerCustomizer btc, CompositeBundle cb,
1:537d4ee:       String bundleScope, int stateMask)
1:537d4ee:   {
1:537d4ee:     // let's process each of the bundle in the CompositeBundle
1:537d4ee:     BundleContext compositeBundleContext = cb.getCompositeFramework().getBundleContext();
1:30172c1:     
1:30172c1:     String bundleId = cb.getSymbolicName()+"/"+cb.getVersion();
1:30172c1:     if (alreadyRecursedContexts.putIfAbsent(bundleId, bundleId) == null) {
1:537d4ee: 
1:537d4ee:       // let's track each of the bundle in the CompositeBundle
1:537d4ee:       BundleTracker bt = new InternalRecursiveBundleTracker(compositeBundleContext, stateMask,
1:8069959:           customizer, true);
1:537d4ee:       bt.open();
1:537d4ee:       BundleTrackerFactory.registerBundleTracker(bundleScope, bt);
1:537d4ee:     }
1:537d4ee:   }
1:537d4ee: }
============================================================================
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8069959
/////////////////////////////////////////////////////////////////////////
1:   private final boolean nested;
1: 
1:       BundleTrackerCustomizer customizer, boolean nested)
1:     this.nested = nested;
/////////////////////////////////////////////////////////////////////////
1:     } else if (nested) {
/////////////////////////////////////////////////////////////////////////
1:           customizer, true);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:c924499
/////////////////////////////////////////////////////////////////////////
1:       customizedProcessBundle(this, b, event, false);
/////////////////////////////////////////////////////////////////////////
1:       customizedProcessBundle(this, b, event, false);
/////////////////////////////////////////////////////////////////////////
1:       customizedProcessBundle(this, b, event, true);
/////////////////////////////////////////////////////////////////////////
1:   protected void customizedProcessBundle(BundleTrackerCustomizer btc, Bundle b, BundleEvent event, boolean removing)
/////////////////////////////////////////////////////////////////////////
1:       // this can happen when bundle is first time added to the tracker 
1:       // or when the tracker is being closed.
1:       if (event == null && !!!removing) {
1:         // if we are removing, or the event is of the right type then we need to shutdown.
1:         if (removing || event.getType() == BundleEvent.STOPPED || event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:886154c
/////////////////////////////////////////////////////////////////////////
0:         if (event.getType() == BundleEvent.STOPPED || event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {
/////////////////////////////////////////////////////////////////////////
1:         } else if (event.getType() == BundleEvent.INSTALLED || event.getType() == BundleEvent.RESOLVED || event.getType() == BundleEvent.STARTING) {
commit:30172c1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:   private final ConcurrentMap<String,String> alreadyRecursedContexts = new ConcurrentHashMap<String, String>();
/////////////////////////////////////////////////////////////////////////
1:           String bundleId = b.getSymbolicName()+"/"+b.getVersion();
1:           alreadyRecursedContexts.remove(bundleId);
1:           
/////////////////////////////////////////////////////////////////////////
1:     
1:     String bundleId = cb.getSymbolicName()+"/"+cb.getVersion();
1:     if (alreadyRecursedContexts.putIfAbsent(bundleId, bundleId) == null) {
commit:530e211
/////////////////////////////////////////////////////////////////////////
0:       customizedProcessBundle(this, b, event);
/////////////////////////////////////////////////////////////////////////
0:         if (event.getType() == BundleEvent.STOPPED) {
author:Lin Sun
-------------------------------------------------------------------------------
commit:537d4ee
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.util.tracker;
1: 
0: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Set;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.service.framework.CompositeBundle;
1: import org.osgi.util.tracker.BundleTracker;
1: import org.osgi.util.tracker.BundleTrackerCustomizer;
1: 
1: /**
1:  * A BundleTracker which will track bundles in the given context, and also 
1:  * bundles in any child contexts. This should be used instead of the
1:  * normal non-recursive BundleTracker when registering bundle tracker
1:  * customizers.
1:  */
1: public class InternalRecursiveBundleTracker extends BundleTracker
1: {
1:   private final int mask;
1: 
0:   private final Set<BundleContext> alreadyRecursedContexts = new HashSet<BundleContext>();
1: 
1:   private final BundleTrackerCustomizer customizer;
1: 
1:   public InternalRecursiveBundleTracker(BundleContext context, int stateMask,
0:       BundleTrackerCustomizer customizer)
1:   {
1:     super(context, stateMask, null);
1:     mask = stateMask;
1:     this.customizer = customizer;
1:   }
1: 
1:   /*
1:   * (non-Javadoc)
1:   * @see org.osgi.util.tracker.BundleTracker#addingBundle(org.osgi.framework.Bundle, org.osgi.framework.BundleEvent)
1:   */
1:   @Override
1:   public Object addingBundle(Bundle b, BundleEvent event)
1:   {
1:     Object o = null;
1: 
1:     if (b instanceof CompositeBundle) {
0:       customizedProcessBundle(this, b, event);
1:       o = b;
1:     } else {
1:       // Delegate to our customizer for normal bundles
1:       if (customizer != null) {
1:         o = customizer.addingBundle(b, event);
1:       }
1:     }
1: 
1:     return o;
1:   }
1: 
1:   /*
1:    * (non-Javadoc)
1:    * @see org.osgi.util.tracker.BundleTracker#modifiedBundle(org.osgi.framework.Bundle, org.osgi.framework.BundleEvent, java.lang.Object)
1:    */
1:   @Override
1:   public void modifiedBundle(Bundle b, BundleEvent event, Object object)
1:   {
1:     if (b instanceof CompositeBundle) {
0:       customizedProcessBundle(this, b, event);
1:     } else {
1:       // Delegate to our customizer for normal bundles
1:       if (customizer != null) {
1:         customizer.modifiedBundle(b, event, object);
1:       }
1:     }
1:   }
1: 
1:   /*
1:    * (non-Javadoc)
1:    * @see org.osgi.util.tracker.BundleTracker#removedBundle(org.osgi.framework.Bundle, org.osgi.framework.BundleEvent, java.lang.Object)
1:    */
1:   @Override
1:   public void removedBundle(Bundle b, BundleEvent event, Object object)
1:   {
1:     if (b instanceof CompositeBundle) {
0:       // We should have already picked up the stopping event on the CBA itself
1:     } else {
1:       if (customizer != null) {
1:         customizer.removedBundle(b, event, object);
1:       }
1:     }
1:   }
1: 
0:   protected void customizedProcessBundle(BundleTrackerCustomizer btc, Bundle b, BundleEvent event)
1:   {
1:     if (b instanceof CompositeBundle) {
1:       CompositeBundle cb = (CompositeBundle) b;
1:       // check if the compositeBundle is already tracked in the
1:       // BundleTrackerFactory
1:       String bundleScope = cb.getSymbolicName() + "_" + cb.getVersion().toString();
1:       List<BundleTracker> btList = BundleTrackerFactory.getBundleTrackerList(bundleScope);
1: 
1:       // bundle is already active and there is no event associated
0:       // this can happen when bundle is first time added to the tracker
0:       if (event == null) {
1:         if (cb.getState() == Bundle.INSTALLED || cb.getState() == Bundle.RESOLVED || cb.getState() == Bundle.STARTING || cb.getState() == Bundle.ACTIVE) {
1:           openTracker(btc, cb, bundleScope, mask);
1:         }
1:       } else {
0:         if (event.getType() == BundleEvent.STOPPING) {
1:           // if CompositeBundle is being stopped, let's remove the bundle
1:           // tracker(s) associated with the composite bundle
0:           BundleContext compositeBundleContext = ((CompositeBundle) b).getCompositeFramework()
0:               .getBundleContext();
0:           alreadyRecursedContexts.remove(compositeBundleContext);
1:           if (btList != null) {
1:             // unregister the bundlescope off the factory and close
1:             // bundle trackers
1:             BundleTrackerFactory.unregisterAndCloseBundleTracker(bundleScope);
1:           }
0:         } else if (event.getType() == BundleEvent.INSTALLED
0:             || event.getType() == BundleEvent.STARTING) {
1:           openTracker(btc, cb, bundleScope, mask);
1:         }
1:       }
1:     }
1:   }
1: 
1:   private synchronized void openTracker(BundleTrackerCustomizer btc, CompositeBundle cb,
1:       String bundleScope, int stateMask)
1:   {
1:     // let's process each of the bundle in the CompositeBundle
1:     BundleContext compositeBundleContext = cb.getCompositeFramework().getBundleContext();
0:     if (!alreadyRecursedContexts.contains(compositeBundleContext)) {
0:       alreadyRecursedContexts.add(compositeBundleContext);
1: 
1:       // let's track each of the bundle in the CompositeBundle
1:       BundleTracker bt = new InternalRecursiveBundleTracker(compositeBundleContext, stateMask,
0:           customizer);
1:       bt.open();
1:       BundleTrackerFactory.registerBundleTracker(bundleScope, bt);
1:     }
1:   }
1: }
============================================================================