1:3ed12df: /**
1:3ed12df:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:3ed12df:  *  contributor license agreements.  See the NOTICE file distributed with
1:3ed12df:  *  this work for additional information regarding copyright ownership.
1:3ed12df:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:3ed12df:  *  (the "License"); you may not use this file except in compliance with
1:3ed12df:  *  the License.  You may obtain a copy of the License at
1:3ed12df:  *
1:3ed12df:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3ed12df:  *
1:3ed12df:  *  Unless required by applicable law or agreed to in writing, software
1:3ed12df:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:3ed12df:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3ed12df:  *  See the License for the specific language governing permissions and
1:3ed12df:  *  limitations under the License.
1:3ed12df:  */
1:3ed12df: package org.apache.aries.blueprint.sample;
1:3ed12df: 
1:3ed12df: import java.util.Set;
1:3ed12df: import java.util.Map;
1:3ed12df: 
1:3ed12df: import org.osgi.framework.BundleContext;
1:3ed12df: import org.osgi.framework.ServiceReference;
1:3ed12df: 
1:3ed12df: public class DodgyListener {
1:3ed12df:   private BundleContext ctx;
1:3ed12df:   
1:3ed12df:   public void setBundleContext(BundleContext ctx) {
1:3ed12df:     this.ctx = ctx;
1:3ed12df:   }
1:3ed12df:   
1:3ed12df:   public void bind(Set a, Map props) {
1:3ed12df:     System.out.println("Attempting to provoke deadlock");
1:3ed12df:     
1:3ed12df:     Thread t = new Thread() {
1:3ed12df:       public void run() {
1:3ed12df:     	// we pretend to be another bundle (otherwise we'll deadlock in Equinox itself :(
1:3ed12df:     	BundleContext otherCtx = ctx.getBundle(0).getBundleContext();  
1:3ed12df:     	  
1:3ed12df:         ServiceReference ref = otherCtx.getServiceReference("java.util.List");
1:3ed12df:         otherCtx.getService(ref);
1:3ed12df:       }
1:3ed12df:     };
1:3ed12df:     t.start();
1:3ed12df:     
1:3ed12df:     // let the other thread go first
1:3ed12df:     try {
1:3ed12df:       Thread.sleep(100);
1:3ed12df:     } catch (Exception e) {}
1:3ed12df:     
1:3ed12df:     ServiceReference ref = ctx.getServiceReference("java.util.List");
1:3ed12df:     ctx.getService(ref);
1:3ed12df:   }
1:3ed12df: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:3ed12df
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.sample;
1: 
1: import java.util.Set;
1: import java.util.Map;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: 
1: public class DodgyListener {
1:   private BundleContext ctx;
1:   
1:   public void setBundleContext(BundleContext ctx) {
1:     this.ctx = ctx;
1:   }
1:   
1:   public void bind(Set a, Map props) {
1:     System.out.println("Attempting to provoke deadlock");
1:     
1:     Thread t = new Thread() {
1:       public void run() {
1:     	// we pretend to be another bundle (otherwise we'll deadlock in Equinox itself :(
1:     	BundleContext otherCtx = ctx.getBundle(0).getBundleContext();  
1:     	  
1:         ServiceReference ref = otherCtx.getServiceReference("java.util.List");
1:         otherCtx.getService(ref);
1:       }
1:     };
1:     t.start();
1:     
1:     // let the other thread go first
1:     try {
1:       Thread.sleep(100);
1:     } catch (Exception e) {}
1:     
1:     ServiceReference ref = ctx.getServiceReference("java.util.List");
1:     ctx.getService(ref);
1:   }
1: }
============================================================================