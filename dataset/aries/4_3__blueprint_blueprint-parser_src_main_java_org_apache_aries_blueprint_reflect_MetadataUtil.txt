1:f13c6ac: /**
1:f13c6ac:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  *  contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  *  this work for additional information regarding copyright ownership.
1:f13c6ac:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  *  (the "License"); you may not use this file except in compliance with
1:f13c6ac:  *  the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
1:f13c6ac:  */
1:f13c6ac: 
1:6414875: package org.apache.aries.blueprint.reflect;
1:f13c6ac: 
1:f13c6ac: import java.io.Serializable;
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Collections;
1:f13c6ac: import java.util.Comparator;
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:2f55d71: import org.apache.aries.blueprint.PassThroughMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanArgument;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.CollectionMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.IdRefMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.MapMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Metadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.NullMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.PropsMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.RefMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Target;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ValueMetadata;
1:f13c6ac: 
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * A utility class that handles cloning various polymorphic
1:f13c6ac:  * bits of metadata into concrete class implementations.
1:f13c6ac:  *
1:f13c6ac:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class MetadataUtil {
1:f13c6ac: 
1:f13c6ac:     public static final Comparator<BeanArgument> BEAN_COMPARATOR = new BeanArgumentComparator();
1:f13c6ac:     
1:f13c6ac:     static public Metadata cloneMetadata(Metadata source) {
1:f13c6ac:         if (source == null) {
1:f13c6ac:             return null;
1:f13c6ac:         } 
1:f13c6ac:         else if (source instanceof MapMetadata) {
1:f13c6ac:             return new MapMetadataImpl((MapMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof NullMetadata) {
1:f13c6ac:             return NullMetadata.NULL;
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof PropsMetadata) {
1:f13c6ac:             return new PropsMetadataImpl((PropsMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof RefMetadata) {
1:f13c6ac:             return new RefMetadataImpl((RefMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof IdRefMetadata) {
1:f13c6ac:             return new IdRefMetadataImpl((IdRefMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof ValueMetadata) {
1:f13c6ac:             return new ValueMetadataImpl((ValueMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof BeanMetadata) {
1:f13c6ac:             return new BeanMetadataImpl((BeanMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof ReferenceListMetadata) {
1:f13c6ac:             return new ReferenceListMetadataImpl((ReferenceListMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof ServiceMetadata) {
1:f13c6ac:             return new ServiceMetadataImpl((ServiceMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof ReferenceMetadata) {
1:f13c6ac:             return new ReferenceMetadataImpl((ReferenceMetadata)source);
1:f13c6ac:         }
1:f13c6ac:         else if (source instanceof CollectionMetadata) {
1:f13c6ac:             return new CollectionMetadataImpl((CollectionMetadata)source);
1:f13c6ac:         }
1:2f55d71:         else if (source instanceof PassThroughMetadata) {
1:2f55d71:             return new PassThroughMetadataImpl((PassThroughMetadata)source);
1:2f55d71:         }
1:f13c6ac: 
1:f13c6ac:         throw new RuntimeException("Unknown Metadata type received: " + source.getClass().getName());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Clone a component metadata item, returning a mutable
1:f13c6ac:      * instance.
1:f13c6ac:      *
1:f13c6ac:      * @param source The source metadata item.
1:f13c6ac:      *
1:f13c6ac:      * @return A mutable instance of this metadata item.
1:f13c6ac:      */
1:f13c6ac:     static public ComponentMetadata cloneComponentMetadata(ComponentMetadata source) {
1:f13c6ac:         return (ComponentMetadata) cloneMetadata(source);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Clone a target item, returning a mutable
1:f13c6ac:      * instance.
1:f13c6ac:      *
1:f13c6ac:      * @param source The source target item.
1:f13c6ac:      *
1:f13c6ac:      * @return A mutable instance of this target item.
1:f13c6ac:      */
1:f13c6ac:     static public Target cloneTarget(Target source) {
1:f13c6ac:         return (Target) cloneMetadata(source);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Create a new metadata instance of the given type
1:f13c6ac:      *
1:f13c6ac:      * @param type the class of the Metadata object to create
1:f13c6ac:      * @param <T>
1:f13c6ac:      * @return a new instance
1:f13c6ac:      */
1:f13c6ac:     public static <T extends Metadata> T createMetadata(Class<T> type) {
1:f13c6ac:         if (MapMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new MapMetadataImpl());
1:f13c6ac:         } else if (NullMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(NullMetadata.NULL);
1:f13c6ac:         } else if (PropsMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new PropsMetadataImpl());
1:f13c6ac:         } else if (RefMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new RefMetadataImpl());
1:f13c6ac:         } else if (IdRefMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new IdRefMetadataImpl());
1:f13c6ac:         } else if (ValueMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new ValueMetadataImpl());
1:f13c6ac:         } else if (BeanMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new BeanMetadataImpl());
1:f13c6ac:         } else if (ReferenceListMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new ReferenceListMetadataImpl());
1:f13c6ac:         } else if (ServiceMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new ServiceMetadataImpl());
1:f13c6ac:         } else if (ReferenceMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new ReferenceMetadataImpl());
1:f13c6ac:         } else if (CollectionMetadata.class.isAssignableFrom(type)) {
1:f13c6ac:             return type.cast(new CollectionMetadataImpl());
1:a2bebca:         } else if (PassThroughMetadata.class.isAssignableFrom(type)) {
1:2f55d71:             return type.cast(new PassThroughMetadataImpl());
1:f13c6ac:         } else {
1:f13c6ac:             throw new IllegalArgumentException("Unsupport metadata type: " + (type != null ? type.getName() : null));
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public static List<BeanArgument> validateBeanArguments(List<BeanArgument> arguments) {
1:f13c6ac:         if (arguments == null || arguments.isEmpty()) {
1:f13c6ac:             return arguments;
1:f13c6ac:         }
1:f13c6ac:         // check if all or none arguments have index attribute
1:f13c6ac:         boolean hasIndexFirst = (arguments.get(0).getIndex() > -1);
1:f13c6ac:         for (int i = 1; i < arguments.size(); i++) {
1:f13c6ac:             boolean hasIndex = (arguments.get(i).getIndex() > -1);
1:f13c6ac:             if ( (hasIndexFirst && !hasIndex) ||
1:f13c6ac:                  (!hasIndexFirst && hasIndex) ) {
1:f13c6ac:                 throw new IllegalArgumentException("Index attribute must be specified either on all or none constructor arguments");
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         if (hasIndexFirst) {
1:f13c6ac:             // sort the arguments
1:f13c6ac:             List<BeanArgument> argumentsCopy = new ArrayList<BeanArgument>(arguments);
1:f13c6ac:             Collections.sort(argumentsCopy, MetadataUtil.BEAN_COMPARATOR);
1:f13c6ac:             arguments = argumentsCopy;
1:f13c6ac:             
1:f13c6ac:             // check if the indexes are sequential
1:f13c6ac:             for (int i = 0; i < arguments.size(); i++) {
1:f13c6ac:                 int index = arguments.get(i).getIndex();
1:f13c6ac:                 if (index > i) {
1:f13c6ac:                     throw new IllegalArgumentException("Missing attribute index");                    
1:f13c6ac:                 } else if (index < i) {
1:f13c6ac:                     throw new IllegalArgumentException("Duplicate attribute index");
1:f13c6ac:                 } // must be the same
1:f13c6ac:             }            
1:f13c6ac:         }
1:f13c6ac:         
1:f13c6ac:         return arguments;
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public static boolean isPrototypeScope(BeanMetadata metadata) {
1:f13c6ac:         return (BeanMetadata.SCOPE_PROTOTYPE.equals(metadata.getScope()) || 
1:f13c6ac:                 (metadata.getScope() == null && metadata.getId() == null));
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public static boolean isSingletonScope(BeanMetadata metadata) {
1:f13c6ac:         return (BeanMetadata.SCOPE_SINGLETON.equals(metadata.getScope())  ||
1:f13c6ac:                 (metadata.getScope() == null && metadata.getId() != null));
1:f13c6ac:     }
1:f13c6ac:     
1:b4fc651:     public static boolean isCustomScope(BeanMetadata metadata) {
1:b4fc651:         return (metadata.getScope() != null &&
1:b4fc651:                 !BeanMetadata.SCOPE_PROTOTYPE.equals(metadata.getScope()) &&
1:b4fc651:                 !BeanMetadata.SCOPE_SINGLETON.equals(metadata.getScope()));
1:b4fc651:     }
1:b4fc651:     
1:f13c6ac:     private static class BeanArgumentComparator implements Comparator<BeanArgument>, Serializable {
1:f13c6ac:         public int compare(BeanArgument object1, BeanArgument object2) {
1:f13c6ac:             return object1.getIndex() - object2.getIndex();
1:f13c6ac:         }        
1:f13c6ac:     }
1:f13c6ac:        
1:f13c6ac: }
1:f13c6ac: 
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:b4fc651
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isCustomScope(BeanMetadata metadata) {
1:         return (metadata.getScope() != null &&
1:                 !BeanMetadata.SCOPE_PROTOTYPE.equals(metadata.getScope()) &&
1:                 !BeanMetadata.SCOPE_SINGLETON.equals(metadata.getScope()));
1:     }
1:     
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:a2bebca
/////////////////////////////////////////////////////////////////////////
1:         } else if (PassThroughMetadata.class.isAssignableFrom(type)) {
commit:2f55d71
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.PassThroughMetadata;
/////////////////////////////////////////////////////////////////////////
1:         else if (source instanceof PassThroughMetadata) {
1:             return new PassThroughMetadataImpl((PassThroughMetadata)source);
1:         }
/////////////////////////////////////////////////////////////////////////
0:         } else if (PassThroughMetadataImpl.class.isAssignableFrom(type)) {
1:             return type.cast(new PassThroughMetadataImpl());
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
0: package org.apache.geronimo.blueprint.reflect;
1: 
1: import java.io.Serializable;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.List;
1: 
1: import org.osgi.service.blueprint.reflect.BeanArgument;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.CollectionMetadata;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.IdRefMetadata;
1: import org.osgi.service.blueprint.reflect.MapMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.NullMetadata;
1: import org.osgi.service.blueprint.reflect.PropsMetadata;
1: import org.osgi.service.blueprint.reflect.ReferenceListMetadata;
1: import org.osgi.service.blueprint.reflect.RefMetadata;
1: import org.osgi.service.blueprint.reflect.ReferenceMetadata;
1: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1: import org.osgi.service.blueprint.reflect.Target;
1: import org.osgi.service.blueprint.reflect.ValueMetadata;
1: 
1: 
1: /**
1:  * A utility class that handles cloning various polymorphic
1:  * bits of metadata into concrete class implementations.
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
1:  * @version $Rev$, $Date$
1:  */
1: public class MetadataUtil {
1: 
1:     public static final Comparator<BeanArgument> BEAN_COMPARATOR = new BeanArgumentComparator();
1:     
1:     static public Metadata cloneMetadata(Metadata source) {
1:         if (source == null) {
1:             return null;
1:         } 
1:         else if (source instanceof MapMetadata) {
1:             return new MapMetadataImpl((MapMetadata)source);
1:         }
1:         else if (source instanceof NullMetadata) {
1:             return NullMetadata.NULL;
1:         }
1:         else if (source instanceof PropsMetadata) {
1:             return new PropsMetadataImpl((PropsMetadata)source);
1:         }
1:         else if (source instanceof RefMetadata) {
1:             return new RefMetadataImpl((RefMetadata)source);
1:         }
1:         else if (source instanceof IdRefMetadata) {
1:             return new IdRefMetadataImpl((IdRefMetadata)source);
1:         }
1:         else if (source instanceof ValueMetadata) {
1:             return new ValueMetadataImpl((ValueMetadata)source);
1:         }
1:         else if (source instanceof BeanMetadata) {
1:             return new BeanMetadataImpl((BeanMetadata)source);
1:         }
1:         else if (source instanceof ReferenceListMetadata) {
1:             return new ReferenceListMetadataImpl((ReferenceListMetadata)source);
1:         }
1:         else if (source instanceof ServiceMetadata) {
1:             return new ServiceMetadataImpl((ServiceMetadata)source);
1:         }
1:         else if (source instanceof ReferenceMetadata) {
1:             return new ReferenceMetadataImpl((ReferenceMetadata)source);
1:         }
1:         else if (source instanceof CollectionMetadata) {
1:             return new CollectionMetadataImpl((CollectionMetadata)source);
1:         }
1: 
1:         throw new RuntimeException("Unknown Metadata type received: " + source.getClass().getName());
1:     }
1: 
1: 
1:     /**
1:      * Clone a component metadata item, returning a mutable
1:      * instance.
1:      *
1:      * @param source The source metadata item.
1:      *
1:      * @return A mutable instance of this metadata item.
1:      */
1:     static public ComponentMetadata cloneComponentMetadata(ComponentMetadata source) {
1:         return (ComponentMetadata) cloneMetadata(source);
1:     }
1: 
1:     /**
1:      * Clone a target item, returning a mutable
1:      * instance.
1:      *
1:      * @param source The source target item.
1:      *
1:      * @return A mutable instance of this target item.
1:      */
1:     static public Target cloneTarget(Target source) {
1:         return (Target) cloneMetadata(source);
1:     }
1: 
1:     /**
1:      * Create a new metadata instance of the given type
1:      *
1:      * @param type the class of the Metadata object to create
1:      * @param <T>
1:      * @return a new instance
1:      */
1:     public static <T extends Metadata> T createMetadata(Class<T> type) {
1:         if (MapMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new MapMetadataImpl());
1:         } else if (NullMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(NullMetadata.NULL);
1:         } else if (PropsMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new PropsMetadataImpl());
1:         } else if (RefMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new RefMetadataImpl());
1:         } else if (IdRefMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new IdRefMetadataImpl());
1:         } else if (ValueMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new ValueMetadataImpl());
1:         } else if (BeanMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new BeanMetadataImpl());
1:         } else if (ReferenceListMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new ReferenceListMetadataImpl());
1:         } else if (ServiceMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new ServiceMetadataImpl());
1:         } else if (ReferenceMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new ReferenceMetadataImpl());
1:         } else if (CollectionMetadata.class.isAssignableFrom(type)) {
1:             return type.cast(new CollectionMetadataImpl());
1:         } else {
1:             throw new IllegalArgumentException("Unsupport metadata type: " + (type != null ? type.getName() : null));
1:         }
1:     }
1:     
1:     public static List<BeanArgument> validateBeanArguments(List<BeanArgument> arguments) {
1:         if (arguments == null || arguments.isEmpty()) {
1:             return arguments;
1:         }
1:         // check if all or none arguments have index attribute
1:         boolean hasIndexFirst = (arguments.get(0).getIndex() > -1);
1:         for (int i = 1; i < arguments.size(); i++) {
1:             boolean hasIndex = (arguments.get(i).getIndex() > -1);
1:             if ( (hasIndexFirst && !hasIndex) ||
1:                  (!hasIndexFirst && hasIndex) ) {
1:                 throw new IllegalArgumentException("Index attribute must be specified either on all or none constructor arguments");
1:             }
1:         }
1:         if (hasIndexFirst) {
1:             // sort the arguments
1:             List<BeanArgument> argumentsCopy = new ArrayList<BeanArgument>(arguments);
1:             Collections.sort(argumentsCopy, MetadataUtil.BEAN_COMPARATOR);
1:             arguments = argumentsCopy;
1:             
1:             // check if the indexes are sequential
1:             for (int i = 0; i < arguments.size(); i++) {
1:                 int index = arguments.get(i).getIndex();
1:                 if (index > i) {
1:                     throw new IllegalArgumentException("Missing attribute index");                    
1:                 } else if (index < i) {
1:                     throw new IllegalArgumentException("Duplicate attribute index");
1:                 } // must be the same
1:             }            
1:         }
1:         
1:         return arguments;
1:     }
1:     
1:     public static boolean isPrototypeScope(BeanMetadata metadata) {
1:         return (BeanMetadata.SCOPE_PROTOTYPE.equals(metadata.getScope()) || 
1:                 (metadata.getScope() == null && metadata.getId() == null));
1:     }
1:     
1:     public static boolean isSingletonScope(BeanMetadata metadata) {
1:         return (BeanMetadata.SCOPE_SINGLETON.equals(metadata.getScope())  ||
1:                 (metadata.getScope() == null && metadata.getId() != null));
1:     }
1:     
1:     private static class BeanArgumentComparator implements Comparator<BeanArgument>, Serializable {
1:         public int compare(BeanArgument object1, BeanArgument object2) {
1:             return object1.getIndex() - object2.getIndex();
1:         }        
1:     }
1:        
1: }
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.reflect;
============================================================================