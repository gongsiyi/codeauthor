1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.whiteboard;
1:fdf3952: 
1:fdf3952: import java.util.IdentityHashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: import java.util.Map.Entry;
1:fdf3952: 
1:fdf3952: import javax.management.DynamicMBean;
1:fdf3952: import javax.management.InstanceAlreadyExistsException;
1:fdf3952: import javax.management.InstanceNotFoundException;
1:fdf3952: import javax.management.MBeanRegistrationException;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.NotCompliantMBeanException;
1:fdf3952: import javax.management.ObjectInstance;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.StandardMBean;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.util.shared.RegistrableStandardEmitterMBean;
1:fdf3952: import org.slf4j.Logger;
1:fdf3952: import org.slf4j.LoggerFactory;
1:fdf3952: 
1:fdf3952: final class MBeanHolder {
1:fdf3952: 
1:fdf3952:     /** default log */
1:fdf3952:     private final Logger log = LoggerFactory.getLogger(getClass());
1:fdf3952: 
1:fdf3952:     private final Object mbean;
1:fdf3952: 
1:fdf3952:     private final ObjectName requestedObjectName;
1:fdf3952: 
1:fdf3952:     private final Map<MBeanServer, ObjectName> registrations;
1:fdf3952: 
1:fdf3952:     static <T> MBeanHolder create(final T mbean,
1:fdf3952:             final ObjectName requestedObjectName) {
1:fdf3952:         if (mbean instanceof DynamicMBean) {
1:fdf3952:             return new MBeanHolder(mbean, requestedObjectName);
1:fdf3952:         } else if (mbean == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         Class<?> mbeanClass = mbean.getClass();
1:fdf3952:         @SuppressWarnings("unchecked") // This is all in aid of getting new StandardMBean to work.
1:fdf3952:         Class<T> mbeanInterface = (Class<T>) getMBeanInterface(mbeanClass);
1:fdf3952:         if (mbeanInterface == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         if (mbeanInterface.getName().equals(
1:fdf3952:             mbeanClass.getName().concat("MBean"))) {
1:fdf3952:             return new MBeanHolder(mbean, requestedObjectName);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         try {
1:fdf3952:             StandardMBean stdMbean = new RegistrableStandardEmitterMBean(mbean, mbeanInterface);
1:fdf3952:             return new MBeanHolder(stdMbean, requestedObjectName);
1:fdf3952:         } catch (NotCompliantMBeanException e) {
1:fdf3952:             LoggerFactory.getLogger(MBeanHolder.class).error(
1:fdf3952:                 "create: Cannot create StandardMBean for " + mbean
1:fdf3952:                     + " of type " + mbeanClass + " for interface "
1:fdf3952:                     + mbeanInterface, e);
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private static Class<?> getMBeanInterface(final Class<?> mbeanClass) {
1:fdf3952:         if (mbeanClass == null) {
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         for (Class<?> i : mbeanClass.getInterfaces()) {
1:fdf3952:             if (i.getName().endsWith("MBean")) {
1:fdf3952:                 return i;
1:fdf3952:             }
1:fdf3952: 
1:fdf3952:             Class<?> mbeanInterface = getMBeanInterface(i);
1:fdf3952:             if (mbeanInterface != null) {
1:fdf3952:                 return mbeanInterface;
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         if (mbeanClass.getSuperclass() != null) {
1:fdf3952:             return getMBeanInterface(mbeanClass.getSuperclass());
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return null;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private MBeanHolder(final Object mbean, final ObjectName requestedObjectName) {
1:fdf3952:         this.mbean = mbean;
1:fdf3952:         this.requestedObjectName = requestedObjectName;
1:fdf3952:         this.registrations = new IdentityHashMap<MBeanServer, ObjectName>();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     void register(final MBeanServer server) {
1:fdf3952:         ObjectInstance instance;
1:fdf3952:         try {
1:fdf3952:             instance = server.registerMBean(mbean, requestedObjectName);
1:fdf3952:             registrations.put(server, instance.getObjectName());
1:fdf3952:         } catch (InstanceAlreadyExistsException e) {
1:fdf3952:             log.error("register: Failure registering MBean " + mbean, e);
1:fdf3952:         } catch (MBeanRegistrationException e) {
1:fdf3952:             log.error("register: Failure registering MBean " + mbean, e);
1:fdf3952:         } catch (NotCompliantMBeanException e) {
1:fdf3952:             log.error("register: Failure registering MBean " + mbean, e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     void unregister(final MBeanServer server) {
1:fdf3952:         final ObjectName registeredName = registrations.remove(server);
1:fdf3952:         if (registeredName != null) {
1:fdf3952:             unregister(server, registeredName);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     void unregister() {
1:fdf3952:         for (Entry<MBeanServer, ObjectName> entry : registrations.entrySet()) {
1:fdf3952:             unregister(entry.getKey(), entry.getValue());
1:fdf3952:         }
1:fdf3952:         registrations.clear();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private void unregister(final MBeanServer server, final ObjectName name) {
1:fdf3952:         try {
1:fdf3952:             server.unregisterMBean(name);
1:fdf3952:         } catch (MBeanRegistrationException e) {
1:fdf3952:             log.error("unregister: preDeregister of " + name
1:fdf3952:                 + " threw an exception", e);
1:fdf3952:         } catch (InstanceNotFoundException e) {
1:fdf3952:             // not really expected !
1:fdf3952:             log.error("unregister: Unexpected unregistration problem of MBean "
1:fdf3952:                 + name, e);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.whiteboard;
1: 
1: import java.util.IdentityHashMap;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: 
1: import javax.management.DynamicMBean;
1: import javax.management.InstanceAlreadyExistsException;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.MBeanRegistrationException;
1: import javax.management.MBeanServer;
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: import javax.management.StandardMBean;
1: 
1: import org.apache.aries.jmx.util.shared.RegistrableStandardEmitterMBean;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: final class MBeanHolder {
1: 
1:     /** default log */
1:     private final Logger log = LoggerFactory.getLogger(getClass());
1: 
1:     private final Object mbean;
1: 
1:     private final ObjectName requestedObjectName;
1: 
1:     private final Map<MBeanServer, ObjectName> registrations;
1: 
1:     static <T> MBeanHolder create(final T mbean,
1:             final ObjectName requestedObjectName) {
1:         if (mbean instanceof DynamicMBean) {
1:             return new MBeanHolder(mbean, requestedObjectName);
1:         } else if (mbean == null) {
1:             return null;
1:         }
1: 
1:         Class<?> mbeanClass = mbean.getClass();
1:         @SuppressWarnings("unchecked") // This is all in aid of getting new StandardMBean to work.
1:         Class<T> mbeanInterface = (Class<T>) getMBeanInterface(mbeanClass);
1:         if (mbeanInterface == null) {
1:             return null;
1:         }
1: 
1:         if (mbeanInterface.getName().equals(
1:             mbeanClass.getName().concat("MBean"))) {
1:             return new MBeanHolder(mbean, requestedObjectName);
1:         }
1: 
1:         try {
1:             StandardMBean stdMbean = new RegistrableStandardEmitterMBean(mbean, mbeanInterface);
1:             return new MBeanHolder(stdMbean, requestedObjectName);
1:         } catch (NotCompliantMBeanException e) {
1:             LoggerFactory.getLogger(MBeanHolder.class).error(
1:                 "create: Cannot create StandardMBean for " + mbean
1:                     + " of type " + mbeanClass + " for interface "
1:                     + mbeanInterface, e);
1:             return null;
1:         }
1:     }
1: 
1:     private static Class<?> getMBeanInterface(final Class<?> mbeanClass) {
1:         if (mbeanClass == null) {
1:             return null;
1:         }
1: 
1:         for (Class<?> i : mbeanClass.getInterfaces()) {
1:             if (i.getName().endsWith("MBean")) {
1:                 return i;
1:             }
1: 
1:             Class<?> mbeanInterface = getMBeanInterface(i);
1:             if (mbeanInterface != null) {
1:                 return mbeanInterface;
1:             }
1:         }
1: 
1:         if (mbeanClass.getSuperclass() != null) {
1:             return getMBeanInterface(mbeanClass.getSuperclass());
1:         }
1: 
1:         return null;
1:     }
1: 
1:     private MBeanHolder(final Object mbean, final ObjectName requestedObjectName) {
1:         this.mbean = mbean;
1:         this.requestedObjectName = requestedObjectName;
1:         this.registrations = new IdentityHashMap<MBeanServer, ObjectName>();
1:     }
1: 
1:     void register(final MBeanServer server) {
1:         ObjectInstance instance;
1:         try {
1:             instance = server.registerMBean(mbean, requestedObjectName);
1:             registrations.put(server, instance.getObjectName());
1:         } catch (InstanceAlreadyExistsException e) {
1:             log.error("register: Failure registering MBean " + mbean, e);
1:         } catch (MBeanRegistrationException e) {
1:             log.error("register: Failure registering MBean " + mbean, e);
1:         } catch (NotCompliantMBeanException e) {
1:             log.error("register: Failure registering MBean " + mbean, e);
1:         }
1:     }
1: 
1:     void unregister(final MBeanServer server) {
1:         final ObjectName registeredName = registrations.remove(server);
1:         if (registeredName != null) {
1:             unregister(server, registeredName);
1:         }
1:     }
1: 
1:     void unregister() {
1:         for (Entry<MBeanServer, ObjectName> entry : registrations.entrySet()) {
1:             unregister(entry.getKey(), entry.getValue());
1:         }
1:         registrations.clear();
1:     }
1: 
1:     private void unregister(final MBeanServer server, final ObjectName name) {
1:         try {
1:             server.unregisterMBean(name);
1:         } catch (MBeanRegistrationException e) {
1:             log.error("unregister: preDeregister of " + name
1:                 + " threw an exception", e);
1:         } catch (InstanceNotFoundException e) {
1:             // not really expected !
1:             log.error("unregister: Unexpected unregistration problem of MBean "
1:                 + name, e);
1:         }
1:     }
1: }
============================================================================