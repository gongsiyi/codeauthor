1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:d299aa1: package org.apache.aries.subsystem.core.internal;
4:d299aa1: 
1:52b079f: import java.util.Collection;
1:52b079f: import java.util.Collections;
1:d299aa1: import java.util.Dictionary;
1:d299aa1: import java.util.HashMap;
1:52b079f: import java.util.HashSet;
1:d299aa1: import java.util.Hashtable;
1:d299aa1: import java.util.Map;
1:d299aa1: 
1:5bd3bf6: import org.apache.aries.subsystem.AriesSubsystem;
1:52b079f: import org.eclipse.equinox.region.Region;
1:d299aa1: import org.osgi.framework.BundleContext;
1:d299aa1: import org.osgi.framework.ServiceRegistration;
1:d299aa1: import org.osgi.service.subsystem.Subsystem;
1:d299aa1: import org.osgi.service.subsystem.SubsystemConstants;
1:d299aa1: 
1:d299aa1: public class SubsystemServiceRegistrar {
1:d299aa1: 	private final BundleContext context;
1:5bd3bf6: 	private final Map<Subsystem, ServiceRegistration<?>> map = new HashMap<Subsystem, ServiceRegistration<?>>();
1:d299aa1: 	
1:d299aa1: 	public SubsystemServiceRegistrar(BundleContext context) {
1:d299aa1: 		if (context == null)
1:d299aa1: 			throw new NullPointerException("Missing required parameter: context");
1:d299aa1: 		this.context = context;
4:d299aa1: 	}
1:d299aa1: 	
1:8cd5520: 	public void addRegion(BasicSubsystem subsystem, Region region) {
1:8cd5520: 		ServiceRegistration<?> registration;
1:8cd5520: 		Dictionary<String, Object> properties;
1:8cd5520: 		synchronized (this) {
1:8cd5520: 			registration = map.get(subsystem);
1:8cd5520: 			if (registration == null)
1:8cd5520: 				throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
1:8cd5520: 			Collection<String> currentRegions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
1:8cd5520: 			String regionName = region.getName();
1:8cd5520: 			if (currentRegions.contains(regionName))
1:8cd5520: 				return;
1:8cd5520: 			Collection<String> newRegions = new HashSet<String>(currentRegions.size() + 1);
1:8cd5520: 			newRegions.addAll(currentRegions);
1:8cd5520: 			newRegions.add(regionName);
1:8cd5520: 			properties = properties(subsystem);
1:8cd5520: 			properties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(newRegions));
1:8cd5520: 		}
1:52b079f: 		registration.setProperties(properties);
1:52b079f: 	}
1:52b079f: 	
1:5bd3bf6: 	public synchronized Subsystem getSubsystemService(BasicSubsystem subsystem) {
1:5bd3bf6: 		ServiceRegistration<?> registration = map.get(subsystem);
1:2b13b05: 		if (registration == null)
1:2b13b05: 			return null;
1:5bd3bf6: 		return (Subsystem)Activator.getInstance().getBundleContext().getService(registration.getReference());
1:2b13b05: 	}
1:2b13b05: 	
1:8cd5520: 	public void register(BasicSubsystem child, BasicSubsystem parent) {
1:8cd5520: 		Dictionary<String, Object> properties;
1:8cd5520: 		synchronized (this) {
1:8cd5520: 			if (map.containsKey(child))
1:8cd5520: 				return;
1:8cd5520: 			map.put(child, null);
1:8cd5520: 			properties = properties(child, parent);
1:8cd5520: 		}
1:8cd5520: 		ServiceRegistration<?> registration = null;
1:8cd5520: 		try {
1:8cd5520: 			registration = context.registerService(
1:5bd3bf6: 				new String[] {Subsystem.class.getName(), AriesSubsystem.class.getName()}, 
1:5bd3bf6: 				child, properties);
1:8cd5520: 		}
1:8cd5520: 		finally {
1:8cd5520: 			synchronized (this) {
1:8cd5520: 				if (registration == null)
1:8cd5520: 					map.remove(child);
1:8cd5520: 				else
1:8cd5520: 					map.put(child, registration);
1:8cd5520: 			}
1:52b079f: 		}
1:d299aa1: 	}
1:52b079f: 	
1:8cd5520: 	public void removeRegion(BasicSubsystem subsystem, Region region) {
1:8cd5520: 		ServiceRegistration<?> registration;
1:8cd5520: 		Dictionary<String, Object> properties;
1:8cd5520: 		synchronized (this) {
1:8cd5520: 			registration = map.get(subsystem);
1:8cd5520: 			if (registration == null)
1:8cd5520: 				return;
1:8cd5520: 			Collection<String> regions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
1:8cd5520: 			String regionName = region.getName();
1:8cd5520: 			if (regions == null || !regions.contains(regionName))
1:8cd5520: 				return;
1:8cd5520: 			regions = new HashSet<String>(regions);
1:8cd5520: 			regions.remove(regionName);
1:8cd5520: 			properties = properties(subsystem);
1:8cd5520: 			properties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(regions));
1:8cd5520: 		}
1:8cd5520: 		registration.setProperties(properties);
1:8cd5520: 	}
1:8cd5520: 	
1:8cd5520: 	public void unregister(Subsystem subsystem) {
1:8cd5520: 		ServiceRegistration<?> registration;
1:8cd5520: 		synchronized (this) {
1:8cd5520: 			registration = map.remove(subsystem);
1:8cd5520: 			if (registration == null)
1:8cd5520: 				throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
1:8cd5520: 		}
1:8cd5520: 		registration.unregister();
1:8cd5520: 	}
1:8cd5520: 	
1:8cd5520: 	public void update(BasicSubsystem subsystem) {
1:8cd5520: 		ServiceRegistration<?> registration;
1:8cd5520: 		Dictionary<String, Object> properties;
1:8cd5520: 		synchronized (this) {
1:8cd5520: 			registration = map.get(subsystem);
1:8cd5520: 			if (registration == null)
1:8cd5520: 				throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
1:8cd5520: 			properties = properties(subsystem, registration);
1:8cd5520: 		}
1:52b079f: 		registration.setProperties(properties);
1:d299aa1: 	}
1:d299aa1: 	
1:5bd3bf6: 	private Dictionary<String, Object> properties(BasicSubsystem subsystem) {
1:52b079f: 		Dictionary<String, Object> result = new Hashtable<String, Object>();
1:52b079f: 		result.put(SubsystemConstants.SUBSYSTEM_ID_PROPERTY, subsystem.getSubsystemId());
1:52b079f: 		result.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY, subsystem.getSymbolicName());
1:52b079f: 		result.put(SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY, subsystem.getVersion());
1:52b079f: 		result.put(SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY, subsystem.getType());
1:52b079f: 		result.put(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY, subsystem.getState());
1:2b13b05: 		result.put(Constants.SubsystemServicePropertyRegions, Collections.singleton(subsystem.getRegionName()));
1:52b079f: 		return result;
1:52b079f: 	}
1:52b079f: 	
1:5bd3bf6: 	private Dictionary<String, Object> properties(BasicSubsystem child, BasicSubsystem parent) {
1:52b079f: 		Dictionary<String, Object> result = properties(child);
1:52b079f: 		if (parent == null)
1:52b079f: 			return result;
1:52b079f: 		Collection<String> currentRegions = (Collection<String>)result.get(Constants.SubsystemServicePropertyRegions);
1:52b079f: 		Collection<String> newRegions = new HashSet<String>(currentRegions.size() + 1);
1:52b079f: 		newRegions.addAll(currentRegions);
1:52b079f: 		newRegions.add(parent.getRegion().getName());
1:52b079f: 		result.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(newRegions));
1:52b079f: 		return result;
1:52b079f: 	}
1:52b079f: 	
1:5bd3bf6: 	private Dictionary<String, Object> properties(BasicSubsystem subsystem, ServiceRegistration<?> registration) {
1:52b079f: 		Dictionary<String, Object> result = properties(subsystem);
1:52b079f: 		Collection<String> regions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
1:52b079f: 		if (regions == null)
1:52b079f: 			return result;
1:52b079f: 		result.put(Constants.SubsystemServicePropertyRegions, regions);
1:52b079f: 		return result;
1:d299aa1: 	}
1:d299aa1: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:8cd5520
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public void addRegion(BasicSubsystem subsystem, Region region) {
1: 		ServiceRegistration<?> registration;
1: 		Dictionary<String, Object> properties;
1: 		synchronized (this) {
1: 			registration = map.get(subsystem);
1: 			if (registration == null)
1: 				throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
1: 			Collection<String> currentRegions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
1: 			String regionName = region.getName();
1: 			if (currentRegions.contains(regionName))
1: 				return;
1: 			Collection<String> newRegions = new HashSet<String>(currentRegions.size() + 1);
1: 			newRegions.addAll(currentRegions);
1: 			newRegions.add(regionName);
1: 			properties = properties(subsystem);
1: 			properties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(newRegions));
1: 		}
/////////////////////////////////////////////////////////////////////////
1: 	public void register(BasicSubsystem child, BasicSubsystem parent) {
1: 		Dictionary<String, Object> properties;
1: 		synchronized (this) {
1: 			if (map.containsKey(child))
1: 				return;
1: 			map.put(child, null);
1: 			properties = properties(child, parent);
1: 		}
1: 		ServiceRegistration<?> registration = null;
1: 		try {
1: 			registration = context.registerService(
1: 		}
1: 		finally {
1: 			synchronized (this) {
1: 				if (registration == null)
1: 					map.remove(child);
1: 				else
1: 					map.put(child, registration);
1: 			}
1: 	public void removeRegion(BasicSubsystem subsystem, Region region) {
1: 		ServiceRegistration<?> registration;
1: 		Dictionary<String, Object> properties;
1: 		synchronized (this) {
1: 			registration = map.get(subsystem);
1: 			if (registration == null)
1: 				return;
1: 			Collection<String> regions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
1: 			String regionName = region.getName();
1: 			if (regions == null || !regions.contains(regionName))
1: 				return;
1: 			regions = new HashSet<String>(regions);
1: 			regions.remove(regionName);
1: 			properties = properties(subsystem);
1: 			properties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(regions));
1: 		}
1: 		registration.setProperties(properties);
1: 	}
1: 	
1: 	public void unregister(Subsystem subsystem) {
1: 		ServiceRegistration<?> registration;
1: 		synchronized (this) {
1: 			registration = map.remove(subsystem);
1: 			if (registration == null)
1: 				throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
1: 		}
1: 		registration.unregister();
1: 	}
1: 	
1: 	public void update(BasicSubsystem subsystem) {
1: 		ServiceRegistration<?> registration;
1: 		Dictionary<String, Object> properties;
1: 		synchronized (this) {
1: 			registration = map.get(subsystem);
1: 			if (registration == null)
1: 				throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
1: 			properties = properties(subsystem, registration);
1: 		}
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.AriesSubsystem;
/////////////////////////////////////////////////////////////////////////
1: 	private final Map<Subsystem, ServiceRegistration<?>> map = new HashMap<Subsystem, ServiceRegistration<?>>();
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized void addRegion(BasicSubsystem subsystem, Region region) {
1: 		ServiceRegistration<?> registration = map.get(subsystem);
/////////////////////////////////////////////////////////////////////////
1: 	public synchronized Subsystem getSubsystemService(BasicSubsystem subsystem) {
0: 		ServiceRegistration<?> registration = map.get(subsystem);
1: 		return (Subsystem)Activator.getInstance().getBundleContext().getService(registration.getReference());
0: 	public synchronized void register(BasicSubsystem child, BasicSubsystem parent) {
0: 		ServiceRegistration<?> registration = context.registerService(
1: 				new String[] {Subsystem.class.getName(), AriesSubsystem.class.getName()}, 
1: 				child, properties);
0: 	public synchronized void removeRegion(BasicSubsystem subsystem, Region region) {
0: 		ServiceRegistration<?> registration = map.get(subsystem);
/////////////////////////////////////////////////////////////////////////
0: 		ServiceRegistration<?> registration = map.remove(subsystem);
0: 		for (Iterator<ServiceRegistration<?>> i = map.values().iterator(); i.hasNext();) {
0: 			ServiceRegistration<?> registration = i.next();
0: 	public synchronized void update(BasicSubsystem subsystem) {
0: 		ServiceRegistration<?> registration = map.get(subsystem);
1: 	private Dictionary<String, Object> properties(BasicSubsystem subsystem) {
/////////////////////////////////////////////////////////////////////////
1: 	private Dictionary<String, Object> properties(BasicSubsystem child, BasicSubsystem parent) {
/////////////////////////////////////////////////////////////////////////
1: 	private Dictionary<String, Object> properties(BasicSubsystem subsystem, ServiceRegistration<?> registration) {
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized Subsystem getSubsystemService(AriesSubsystem subsystem) {
0: 		ServiceRegistration<Subsystem> registration = map.get(subsystem);
1: 		if (registration == null)
1: 			return null;
0: 		return Activator.getInstance().getBundleContext().getService(registration.getReference());
1: 	}
1: 	
/////////////////////////////////////////////////////////////////////////
1: 		result.put(Constants.SubsystemServicePropertyRegions, Collections.singleton(subsystem.getRegionName()));
commit:777b216
/////////////////////////////////////////////////////////////////////////
0: 			return;
commit:52b079f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import org.eclipse.equinox.region.Region;
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized void addRegion(AriesSubsystem subsystem, Region region) {
0: 		ServiceRegistration<Subsystem> registration = map.get(subsystem);
0: 		if (registration == null)
0: 			throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
0: 		Collection<String> currentRegions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
0: 		String regionName = region.getName();
0: 		if (currentRegions.contains(regionName))
0: 			return;
1: 		Collection<String> newRegions = new HashSet<String>(currentRegions.size() + 1);
1: 		newRegions.addAll(currentRegions);
0: 		newRegions.add(regionName);
0: 		properties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(newRegions));
1: 		registration.setProperties(properties);
1: 	}
1: 	
0: 	public synchronized void register(AriesSubsystem child, AriesSubsystem parent) {
0: 		if (map.containsKey(child))
0: 			throw new IllegalStateException("Subsystem '" + child + "' already has service registration '" + map.get(child) + "'");
0: 		Dictionary<String, Object> properties = properties(child, parent);
0: 		ServiceRegistration<Subsystem> registration = context.registerService(Subsystem.class, child, properties);
0: 		map.put(child, registration);
1: 	}
1: 	
0: 	public synchronized void removeRegion(AriesSubsystem subsystem, Region region) {
0: 		ServiceRegistration<Subsystem> registration = map.get(subsystem);
0: 		if (registration == null)
0: 			return;
1: 		Collection<String> regions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
0: 		String regionName = region.getName();
0: 		if (regions == null || !regions.contains(regionName))
0: 			return;
0: 		regions = new HashSet<String>(regions);
0: 		regions.remove(regionName);
0: 		Dictionary<String, Object> properties = properties(subsystem);
0: 		properties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(regions));
1: 		registration.setProperties(properties);
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized void update(AriesSubsystem subsystem) {
0: 		Dictionary<String, Object> properties = properties(subsystem, registration);
0: 	private Dictionary<String, Object> properties(AriesSubsystem subsystem) {
1: 		Dictionary<String, Object> result = new Hashtable<String, Object>();
1: 		result.put(SubsystemConstants.SUBSYSTEM_ID_PROPERTY, subsystem.getSubsystemId());
1: 		result.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY, subsystem.getSymbolicName());
1: 		result.put(SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY, subsystem.getVersion());
1: 		result.put(SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY, subsystem.getType());
1: 		result.put(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY, subsystem.getState());
0: 		result.put(Constants.SubsystemServicePropertyRegions, Collections.singleton(subsystem.getRegion().getName()));
1: 		return result;
1: 	}
1: 	
0: 	private Dictionary<String, Object> properties(AriesSubsystem child, AriesSubsystem parent) {
1: 		Dictionary<String, Object> result = properties(child);
1: 		if (parent == null)
1: 			return result;
1: 		Collection<String> currentRegions = (Collection<String>)result.get(Constants.SubsystemServicePropertyRegions);
0: 		Collection<String> newRegions = new HashSet<String>(currentRegions.size() + 1);
0: 		newRegions.addAll(currentRegions);
1: 		newRegions.add(parent.getRegion().getName());
1: 		result.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(newRegions));
1: 		return result;
1: 	}
1: 	
0: 	private Dictionary<String, Object> properties(AriesSubsystem subsystem, ServiceRegistration<Subsystem> registration) {
1: 		Dictionary<String, Object> result = properties(subsystem);
0: 		Collection<String> regions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
1: 		if (regions == null)
1: 			return result;
1: 		result.put(Constants.SubsystemServicePropertyRegions, regions);
1: 		return result;
commit:35094c6
/////////////////////////////////////////////////////////////////////////
0: 			throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
/////////////////////////////////////////////////////////////////////////
0: 			throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
commit:74f2d79
/////////////////////////////////////////////////////////////////////////
0: 			throw new IllegalStateException("Subsystem '" + subsystem + "' already has service registration '" + map.get(subsystem) + "'");
commit:d299aa1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import java.util.Dictionary;
1: import java.util.HashMap;
1: import java.util.Hashtable;
0: import java.util.Iterator;
1: import java.util.Map;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: public class SubsystemServiceRegistrar {
1: 	private final BundleContext context;
0: 	private final Map<Subsystem, ServiceRegistration<Subsystem>> map = new HashMap<Subsystem, ServiceRegistration<Subsystem>>();
1: 	
1: 	public SubsystemServiceRegistrar(BundleContext context) {
1: 		if (context == null)
1: 			throw new NullPointerException("Missing required parameter: context");
1: 		this.context = context;
1: 	}
1: 	
0: 	public synchronized void register(Subsystem subsystem) {
0: 		if (map.containsKey(subsystem))
0: 			throw new IllegalArgumentException("Subsystem '" + subsystem + "' already has service registration '" + map.get(subsystem) + "'");
0: 		Dictionary<String, Object> properties = properties(subsystem);
0: 		ServiceRegistration<Subsystem> registration = context.registerService(Subsystem.class, subsystem, properties);
0: 		map.put(subsystem, registration);
1: 	}
1: 	
0: 	public synchronized void unregister(Subsystem subsystem) {
0: 		ServiceRegistration<Subsystem> registration = map.remove(subsystem);
0: 		if (registration == null)
0: 			throw new IllegalArgumentException("Subsystem '" + subsystem + "' is not registered");
0: 		registration.unregister();
1: 	}
1: 	
0: 	public synchronized void unregisterAll() {
0: 		for (Iterator<ServiceRegistration<Subsystem>> i = map.values().iterator(); i.hasNext();) {
0: 			ServiceRegistration<Subsystem> registration = i.next();
0: 			registration.unregister();
0: 			i.remove();
1: 		}
1: 	}
1: 	
0: 	public synchronized void update(Subsystem subsystem) {
0: 		ServiceRegistration<Subsystem> registration = map.get(subsystem);
0: 		if (registration == null)
0: 			throw new IllegalArgumentException("Subsystem '" + subsystem + "' is not registered");
0: 		Dictionary<String, Object> properties = properties(subsystem);
0: 		registration.setProperties(properties);
1: 	}
1: 	
0: 	private Dictionary<String, Object> properties(Subsystem subsystem) {
0: 		Dictionary<String, Object> properties = new Hashtable<String, Object>();
0: 		properties.put(SubsystemConstants.SUBSYSTEM_ID_PROPERTY, subsystem.getSubsystemId());
0: 		properties.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY, subsystem.getSymbolicName());
0: 		properties.put(SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY, subsystem.getVersion());
0: 		properties.put(SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY, subsystem.getType());
0: 		properties.put(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY, subsystem.getState());
0: 		return properties;
1: 	}
1: }
============================================================================