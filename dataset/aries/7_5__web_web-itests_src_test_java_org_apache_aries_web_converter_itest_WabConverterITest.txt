1:da5ef0c: /**
1:da5ef0c:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:da5ef0c:  *  contributor license agreements.  See the NOTICE file distributed with
1:da5ef0c:  *  this work for additional information regarding copyright ownership.
1:da5ef0c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:da5ef0c:  *  (the "License"); you may not use this file except in compliance with
1:da5ef0c:  *  the License.  You may obtain a copy of the License at
1:da5ef0c:  *
1:da5ef0c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:da5ef0c:  *
1:da5ef0c:  *  Unless required by applicable law or agreed to in writing, software
1:da5ef0c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:da5ef0c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da5ef0c:  *  See the License for the specific language governing permissions and
1:da5ef0c:  *  limitations under the License.
1:da5ef0c:  */
1:da5ef0c: package org.apache.aries.web.converter.itest;
1:6371a7a: 
1:da5ef0c: import static org.junit.Assert.assertEquals;
1:da5ef0c: import static org.junit.Assert.assertNotNull;
1:da5ef0c: import static org.junit.Assert.assertTrue;
1:05434a5: import static org.ops4j.pax.exam.CoreOptions.composite;
1:05434a5: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:da5ef0c: import static org.ops4j.pax.exam.CoreOptions.options;
1:da5ef0c: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:05434a5: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1:05434a5: import static org.ops4j.pax.exam.CoreOptions.when;
1:6371a7a: 
1:da5ef0c: import java.io.File;
1:da5ef0c: import java.io.FileOutputStream;
1:05434a5: import java.io.IOException;
1:6371a7a: import java.net.MalformedURLException;
1:6371a7a: import java.net.URL;
1:da5ef0c: import java.util.Dictionary;
24:da5ef0c: 
1:05434a5: import javax.inject.Inject;
1:05434a5: 
1:05434a5: import org.apache.aries.itest.AbstractIntegrationTest;
1:da5ef0c: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:da5ef0c: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1:da5ef0c: import org.junit.Test;
1:da5ef0c: import org.junit.runner.RunWith;
1:05434a5: import org.ops4j.pax.exam.Configuration;
1:da5ef0c: import org.ops4j.pax.exam.CoreOptions;
1:da5ef0c: import org.ops4j.pax.exam.Option;
1:05434a5: import org.ops4j.pax.exam.junit.PaxExam;
1:da5ef0c: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1:05434a5: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:05434a5: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:da5ef0c: import org.osgi.framework.Bundle;
1:da5ef0c: import org.osgi.framework.BundleContext;
1:da5ef0c: import org.osgi.framework.Constants;
1:da5ef0c: 
1:05434a5: @RunWith(PaxExam.class)
1:05434a5: @ExamReactorStrategy(PerClass.class)
1:05434a5: public class WabConverterITest extends AbstractIntegrationTest {
1:05434a5: 	@Inject
1:05434a5: 	protected BundleContext bundleContext;
1:6371a7a: 
1:05434a5: 	private void createTestWar(File warFile) throws IOException {
1:05434a5: 		ZipFixture testWar = ArchiveFixture.newJar().binary(
1:05434a5: 				"WEB-INF/classes/org/apache/aries/web/test/TestClass.class",
1:05434a5: 				getClass().getClassLoader().getResourceAsStream(
1:05434a5: 						"org/apache/aries/web/test/TestClass.class"));
1:6371a7a: 
1:05434a5: 		FileOutputStream fout = new FileOutputStream(warFile);
1:05434a5: 		testWar.writeOut(fout);
1:05434a5: 		fout.close();
1:05434a5: 	}
1:da5ef0c: 
1:05434a5: 	@Test
1:05434a5: 	public void getStarted() throws Exception {
1:05434a5: 		File testWar = File.createTempFile("test", ".war");
1:05434a5: 		createTestWar(testWar);
1:05434a5: 		String baseUrl = "webbundle:"
1:05434a5: 				+ testWar.toURI().toURL().toExternalForm();
1:05434a5: 		assertTrue("Time out waiting for webbundle URL handler",
1:05434a5: 				waitForURLHandler(baseUrl));
1:6371a7a: 
1:05434a5: 		Bundle converted = bundleContext.installBundle(baseUrl
1:05434a5: 				+ "?Bundle-SymbolicName=test.war.bundle&Web-ContextPath=foo");
1:6371a7a: 
1:05434a5: 		assertNotNull(converted);
1:05434a5: 		Dictionary<String, String> man = converted.getHeaders();
1:05fb0e0: 
1:05434a5: 		assertEquals("test.war.bundle", man.get(Constants.BUNDLE_SYMBOLICNAME));
1:05434a5: 		assertEquals("/foo", man.get("Web-ContextPath"));
1:05434a5: 		assertTrue(man.get(Constants.IMPORT_PACKAGE).contains("javax.naming"));
1:05434a5: 		new File("test.war").delete();
1:05434a5: 	}
1:da5ef0c: 
1:05434a5: 	private boolean waitForURLHandler(String url) {
1:05434a5: 		int maxRepetition = 100;
1:05434a5: 		for (int i = 0; i < maxRepetition; i++) {
1:05434a5: 			try {
1:05434a5: 				new URL(url);
1:05434a5: 				return true;
1:05434a5: 			} catch (MalformedURLException e) {
1:05434a5: 				try {
1:05434a5: 					Thread.sleep(100);
1:05434a5: 				} catch (InterruptedException ee) {
1:05434a5: 					return false;
1:05434a5: 				}
1:05434a5: 			}
1:05434a5: 		}
1:05434a5: 		return false;
1:05434a5: 	}
1:6371a7a: 
1:05434a5: 	public Option baseOptions() {
1:05434a5: 		String localRepo = getLocalRepo();
1:05434a5: 		return composite(
1:05434a5: 				junitBundles(),
1:05434a5: 				systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:05434a5: 				when(localRepo != null).useOptions(
1:05434a5: 						vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)));
1:05434a5: 	}
1:05fb0e0: 
1:05434a5: 	@Configuration
1:05434a5: 	public Option[] configuration() {
1:05434a5: 		return options(
1:05434a5: 				// bootDelegation(),
1:05434a5: 				baseOptions(),
1:05434a5: 				mavenBundle("org.osgi", "org.osgi.compendium"),
1:05434a5: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
1:da5ef0c: 
1:05434a5: 				// Bundles
1:05434a5: 				mavenBundle("org.apache.aries.web", "org.apache.aries.web.urlhandler"),
1:05434a5: 				mavenBundle("org.apache.aries", "org.apache.aries.util"),
1:8cb9a5f: 				mavenBundle("org.ow2.asm", "asm-debug-all"),
1:05434a5: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
1:05434a5: 				mavenBundle("org.apache.aries.testsupport",	"org.apache.aries.testsupport.unit"));
1:05434a5: 	}
1:9d710d0: 
1:05434a5: 	private MavenArtifactProvisionOption mavenBundle(String groupId,
1:05434a5: 			String artifactId) {
1:05434a5: 		return CoreOptions.mavenBundle().groupId(groupId)
1:05434a5: 				.artifactId(artifactId).versionAsInProject();
1:05434a5: 	}
1:da5ef0c: 
2:6371a7a: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:f593843
/////////////////////////////////////////////////////////////////////////
commit:05434a5
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.vmOption;
1: import static org.ops4j.pax.exam.CoreOptions.when;
1: import java.io.IOException;
1: import javax.inject.Inject;
1: 
1: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public class WabConverterITest extends AbstractIntegrationTest {
1: 	@Inject
1: 	protected BundleContext bundleContext;
1: 	private void createTestWar(File warFile) throws IOException {
1: 		ZipFixture testWar = ArchiveFixture.newJar().binary(
1: 				"WEB-INF/classes/org/apache/aries/web/test/TestClass.class",
1: 				getClass().getClassLoader().getResourceAsStream(
1: 						"org/apache/aries/web/test/TestClass.class"));
1: 		FileOutputStream fout = new FileOutputStream(warFile);
1: 		testWar.writeOut(fout);
1: 		fout.close();
1: 	}
1: 	@Test
1: 	public void getStarted() throws Exception {
1: 		File testWar = File.createTempFile("test", ".war");
1: 		createTestWar(testWar);
1: 		String baseUrl = "webbundle:"
1: 				+ testWar.toURI().toURL().toExternalForm();
1: 		assertTrue("Time out waiting for webbundle URL handler",
1: 				waitForURLHandler(baseUrl));
1: 		Bundle converted = bundleContext.installBundle(baseUrl
1: 				+ "?Bundle-SymbolicName=test.war.bundle&Web-ContextPath=foo");
1: 		assertNotNull(converted);
1: 		Dictionary<String, String> man = converted.getHeaders();
1: 		assertEquals("test.war.bundle", man.get(Constants.BUNDLE_SYMBOLICNAME));
1: 		assertEquals("/foo", man.get("Web-ContextPath"));
1: 		assertTrue(man.get(Constants.IMPORT_PACKAGE).contains("javax.naming"));
1: 		new File("test.war").delete();
1: 	}
1: 	private boolean waitForURLHandler(String url) {
1: 		int maxRepetition = 100;
1: 		for (int i = 0; i < maxRepetition; i++) {
1: 			try {
1: 				new URL(url);
1: 				return true;
1: 			} catch (MalformedURLException e) {
1: 				try {
1: 					Thread.sleep(100);
1: 				} catch (InterruptedException ee) {
1: 					return false;
1: 				}
1: 			}
1: 		}
1: 		return false;
1: 	}
1: 	public Option baseOptions() {
1: 		String localRepo = getLocalRepo();
1: 		return composite(
1: 				junitBundles(),
1: 				systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1: 				when(localRepo != null).useOptions(
1: 						vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)));
1: 	}
1: 	@Configuration
1: 	public Option[] configuration() {
1: 		return options(
1: 				// bootDelegation(),
1: 				baseOptions(),
1: 				mavenBundle("org.osgi", "org.osgi.compendium"),
1: 				mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
1: 				// Bundles
1: 				mavenBundle("org.apache.aries.web", "org.apache.aries.web.urlhandler"),
1: 				mavenBundle("org.apache.aries", "org.apache.aries.util"),
0: 				mavenBundle("org.ow2.asm", "asm-all"),
1: 				mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0: 				mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
1: 				mavenBundle("org.apache.aries.testsupport",	"org.apache.aries.testsupport.unit"));
1: 	}
1: 	private MavenArtifactProvisionOption mavenBundle(String groupId,
1: 			String artifactId) {
1: 		return CoreOptions.mavenBundle().groupId(groupId)
1: 				.artifactId(artifactId).versionAsInProject();
1: 	}
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:8cb9a5f
/////////////////////////////////////////////////////////////////////////
1: 				mavenBundle("org.ow2.asm", "asm-debug-all"),
author:Emily Jiang
-------------------------------------------------------------------------------
commit:9d710d0
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
1:        
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:79902ae
/////////////////////////////////////////////////////////////////////////
0:   public static final long DEFAULT_TIMEOUT = 60000;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6371a7a
/////////////////////////////////////////////////////////////////////////
1: import java.net.MalformedURLException;
1: import java.net.URL;
0: import java.util.ArrayList;
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   
0:   private List<ServiceTracker> srs;
0:     srs = new ArrayList<ServiceTracker>();
1:     
0:     fout.close();
0:     for (ServiceTracker st : srs) {
0:         if (st != null) {
0:             st.close();
1:         }  
1:     }
0:     String baseUrl = "webbundle:" + testWar.toURI().toURL().toExternalForm() ;
1: 
0:     assertTrue("Time out waiting for webbundle URL handler", waitForURLHandler(baseUrl));
1:     
0:     Bundle converted = bundleContext.installBundle(baseUrl + "?Bundle-SymbolicName=test.war.bundle&Web-ContextPath=foo");
/////////////////////////////////////////////////////////////////////////
0:   private boolean waitForURLHandler(String url) {
0:       int maxRepetition = 100;
0:       for (int i = 0; i < maxRepetition; i++) {
0:           try {
0:               new URL(url);
0:               return true;
0:           } catch (MalformedURLException e) {
0:               try {
0:                   Thread.sleep(100);
0:               } catch (InterruptedException ee) {
0:                   return false;
0:               }
0:           }
0:       }
0:       return false;
0:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:       
0:       // add tracker to the list of trackers we close at tear down
0:       srs.add(tracker);
1:       
commit:043e0a4
/////////////////////////////////////////////////////////////////////////
0:         + "?Bundle-SymbolicName=test.war.bundle&Web-ContextPath=foo");
0:     assertEquals("test.war.bundle", man.get(Constants.BUNDLE_SYMBOLICNAME)); 
0:     assertEquals("/foo", man.get("Web-ContextPath"));
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:05fb0e0
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.ServiceReference;
0: import org.osgi.service.url.URLStreamHandlerService;
/////////////////////////////////////////////////////////////////////////
0:   public void getStarted() throws Exception {
0:     // wait for the blueprint container to do its work
0:     int maxRepetition = 100;
0:     while (maxRepetition-- > 0) {
0:       ServiceReference[] ref = bundleContext.getServiceReferences(URLStreamHandlerService.class.getName(),
0:           "(url.handler.protocol=webbundle)");
0:       if (ref != null)
0:         break;
1:       
0:       Thread.sleep(100);
0:     }
1:     
commit:da5ef0c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.web.converter.itest;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
0: import static org.ops4j.pax.exam.OptionUtils.combine;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.util.Dictionary;
1: 
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
0: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Inject;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.ops4j.pax.exam.options.BootDelegationOption;
1: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
0: import org.osgi.framework.Filter;
0: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.framework.InvalidSyntaxException;
0: import org.osgi.framework.Version;
0: import org.osgi.util.tracker.ServiceTracker;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class WabConverterITest {
0:   public static final long DEFAULT_TIMEOUT = 30000;
1: 
0:   @Inject
0:   protected BundleContext bundleContext;
1: 
0:   @Before
0:   public void setUp() throws Exception {
0:     ZipFixture testWar = ArchiveFixture.newJar()
0:       .binary("WEB-INF/classes/org/apache/aries/web/test/TestClass.class", 
0:         getClass().getClassLoader().getResourceAsStream("org/apache/aries/web/test/TestClass.class"));
1:     
0:     FileOutputStream fout = new FileOutputStream("test.war");
0:     testWar.writeOut(fout);
0:   }
1: 
0:   @After
0:   public void tearDown() throws Exception {
0:     new File("test.war").delete();
0:   }
1: 
1:   
0:   @Test
0:   public void getStarted() throws Exception {    
0:     Bundle warConverter = getBundle("org.apache.aries.web.urlhandler");
0:     assertEquals(Bundle.ACTIVE, warConverter.getState());
1:     
0:     File testWar = new File("test.war");
0:     Bundle converted = bundleContext.installBundle("webbundle:"+testWar.toURL().toExternalForm() 
0:         + "?Bundle-SymbolicName=test.war.bundle");
1:     
0:     assertNotNull(converted);
0:     Dictionary<String,String> man = converted.getHeaders();
1:     
0:     assertEquals("test.war.bundle", man.get(Constants.BUNDLE_SYMBOLICNAME));   
0:     assertTrue(man.get(Constants.IMPORT_PACKAGE).contains("javax.naming"));
0:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         bootDelegation(),
1:         
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.web","org.apache.aries.web.urlhandler"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0:         mavenBundle("asm","asm-all"),
1: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
1:   
1:   
0:   protected Bundle getBundle(String symbolicName) {
0:     return getBundle(symbolicName, null);
0:   }
1: 
0:   protected Bundle getBundle(String bundleSymbolicName, String version) {
0:     Bundle result = null;
0:     for (Bundle b : bundleContext.getBundles()) {
0:       if (b.getSymbolicName().equals(bundleSymbolicName)) {
0:         if (version == null
0:             || b.getVersion().equals(Version.parseVersion(version))) {
0:           result = b;
0:           break;
0:         }
0:       }
0:     }
0:     return result;
0:   }
1: 
0:   public static BootDelegationOption bootDelegation() {
0:     return new BootDelegationOption("org.apache.aries.unittest.fixture");
0:   }
1:   
0:   public static MavenArtifactProvisionOption mavenBundle(String groupId,
0:       String artifactId) {
0:     return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId)
0:         .versionAsInProject();
0:   }
1: 
0:   protected static Option[] updateOptions(Option[] options) {
0:     // We need to add pax-exam-junit here when running with the ibm
0:     // jdk to avoid the following exception during the test run:
0:     // ClassNotFoundException: org.ops4j.pax.exam.junit.Configuration
0:     if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
0:       Option[] ibmOptions = options(wrappedBundle(mavenBundle(
0:           "org.ops4j.pax.exam", "pax-exam-junit")));
0:       options = combine(ibmOptions, options);
0:     }
1: 
0:     return options;
0:   }
1: 
0:   protected <T> T getOsgiService(Class<T> type, long timeout) {
0:     return getOsgiService(type, null, timeout);
0:   }
1: 
0:   protected <T> T getOsgiService(Class<T> type) {
0:     return getOsgiService(type, null, DEFAULT_TIMEOUT);
0:   }
1:   
0:   protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {
0:     return getOsgiService(null, type, filter, timeout);
0:   }
1: 
0:   protected <T> T getOsgiService(BundleContext bc, Class<T> type,
0:       String filter, long timeout) {
0:     ServiceTracker tracker = null;
0:     try {
0:       String flt;
0:       if (filter != null) {
0:         if (filter.startsWith("(")) {
0:           flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")"
0:               + filter + ")";
0:         } else {
0:           flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")("
0:               + filter + "))";
0:         }
0:       } else {
0:         flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
0:       }
0:       Filter osgiFilter = FrameworkUtil.createFilter(flt);
0:       tracker = new ServiceTracker(bc == null ? bundleContext : bc, osgiFilter,
0:           null);
0:       tracker.open();
0:       // Note that the tracker is not closed to keep the reference
0:       // This is buggy, has the service reference may change i think
0:       Object svc = type.cast(tracker.waitForService(timeout));
0:       if (svc == null) {
0:         throw new RuntimeException("Gave up waiting for service " + flt);
0:       }
0:       return type.cast(svc);
0:     } catch (InvalidSyntaxException e) {
0:       throw new IllegalArgumentException("Invalid filter", e);
0:     } catch (InterruptedException e) {
0:       throw new RuntimeException(e);
0:     }
0:   }
0: }
============================================================================