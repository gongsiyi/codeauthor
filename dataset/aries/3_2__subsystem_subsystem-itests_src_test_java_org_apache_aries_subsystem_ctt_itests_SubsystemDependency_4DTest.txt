1:50c405c: package org.apache.aries.subsystem.ctt.itests;
1:50c405c: 
1:50c405c: import static org.junit.Assert.assertTrue;
1:50c405c: 
1:50c405c: import java.util.HashMap;
1:50c405c: import java.util.Map;
1:50c405c: 
1:50c405c: import org.junit.Test;
1:50c405c: import org.osgi.framework.Bundle;
1:50c405c: import org.osgi.service.subsystem.Subsystem;
1:50c405c: import org.osgi.service.subsystem.SubsystemConstants;
1:50c405c: 
1:50c405c: /*
1:50c405c:  *  D) Test that Local Repository takes priority over registered repositories
1:50c405c:      - Register repository R2
1:50c405c:      - Using the Root subsystem, install a scoped subsystem with the following content bundles
1:50c405c:        - Bundle C
1:50c405c:        - Bundle E
1:50c405c:        and the following resources in the Local Repository
1:50c405c:        - Bundle F
1:50c405c:        - Bundle G
1:50c405c:      - Verify that bundles F and G got installed into the Root Subsystem
1:50c405c:      - Verify the wiring of C and E wire to F->x and G->y respectively
1:50c405c:      - Verify that bundles A and B did not get installed into the Root Subsystem
1:50c405c:  */
1:50c405c: 
1:50c405c: public class SubsystemDependency_4DTest extends SubsystemDependencyTestBase 
2:50c405c: {
1:50c405c: 	private static final String SUBSYSTEM_4D = "sdt_application4d.esa";
1:50c405c: 	private Subsystem subsystem;
1:50c405c: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:57b6627: 		super.createApplications();
1:57b6627: 		createApplication4d();
1:50c405c: 		registerRepositoryR2();
3:50c405c: 	}
1:50c405c: 	
1:50c405c: 	//  - Verify that bundles F and G got installed into the Root Subsystem
1:50c405c: 	@Test
1:50c405c: 	public void verifyBundesFandGinstalledIntoRootSubsystem() throws Exception
1:50c405c: 	{
1:50c405c: 		startSubsystem();
1:dbcd0ed: 		verifyBundlesInstalled (bundleContext, "Root", BUNDLE_F, BUNDLE_G);
1:50c405c: 		stopSubsystem();
1:50c405c: 	}
1:dbcd0ed: 	
1:dbcd0ed: 
1:50c405c: 	
1:50c405c: 	// - Verify the wiring of C and E wire to F->x and G->y respectively
1:50c405c: 	@Test
1:50c405c: 	public void verifyBundleCWiredToPackageXFromBundleF() throws Exception
1:50c405c: 	{
1:50c405c: 		startSubsystem();
1:50c405c: 		verifySinglePackageWiring (subsystem, BUNDLE_C, "x", BUNDLE_F);
1:50c405c: 		stopSubsystem();
1:50c405c: 	}
1:50c405c: 	
1:50c405c: 	@Test
1:50c405c: 	public void verifyBundleEWiredToCapability_yFromBundleG() throws Exception
1:50c405c: 	{
1:50c405c: 		startSubsystem();
1:50c405c: 		verifyCapabilityWiring (subsystem, BUNDLE_E, "y", BUNDLE_G);
1:50c405c: 		stopSubsystem();
1:50c405c: 	}
1:50c405c: 	
1:50c405c: 	// - Verify that bundles A and B did not get installed into the Root Subsystem
1:50c405c: 	@Test
1:50c405c: 	public void verifyBundlesAandBNotInstalledInRootSubsystem() throws Exception
1:50c405c: 	{
1:50c405c: 		startSubsystem();
1:50c405c: 		Bundle[] bundles = bundleContext.getBundles();
1:50c405c: 		for (Bundle b: bundles) {
1:50c405c: 			assertTrue ("Bundle A should not have been provisioned!", !b.getSymbolicName().equals(BUNDLE_A));
1:50c405c: 			assertTrue ("Bundle B should not have been provisioned!", !b.getSymbolicName().equals(BUNDLE_B));
1:50c405c: 		}
1:50c405c: 		stopSubsystem();
1:50c405c: 	}
1:50c405c: 	
1:50c405c: 	// doing this within @Before doesn't work :(
1:50c405c: 	private void startSubsystem() throws Exception
1:50c405c: 	{ 
1:50c405c: 		subsystem = installSubsystemFromFile(SUBSYSTEM_4D);
1:50c405c: 		startSubsystem(subsystem);
1:50c405c: 	}
1:50c405c: 	
1:50c405c: 	private void stopSubsystem() throws Exception
1:50c405c: 	{
1:50c405c: 		stopSubsystem(subsystem);
1:50c405c: 		uninstallSubsystem(subsystem);
1:50c405c: 	}
1:50c405c: 	
1:50c405c: 	private static void createApplication4d() throws Exception
1:50c405c: 	{
1:50c405c: 		Map<String, String> attributes = new HashMap<String, String>();
1:50c405c: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4D);
1:50c405c: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:50c405c: 		String appContent = BUNDLE_C + "," + BUNDLE_E;
1:50c405c: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1:50c405c: 		createManifest(SUBSYSTEM_4D + ".mf", attributes);
1:50c405c: 		createSubsystem(SUBSYSTEM_4D, BUNDLE_F, BUNDLE_G);
1:50c405c: 	}
1:50c405c: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 		super.createApplications();
1: 		createApplication4d();
author:John Ross
-------------------------------------------------------------------------------
commit:47cea41
/////////////////////////////////////////////////////////////////////////
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:dbcd0ed
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.BundleContext;
/////////////////////////////////////////////////////////////////////////
1: 		verifyBundlesInstalled (bundleContext, "Root", BUNDLE_F, BUNDLE_G);
1: 
1: 	
commit:50c405c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.ctt.itests;
1: 
0: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: /*
1:  *  D) Test that Local Repository takes priority over registered repositories
1:      - Register repository R2
1:      - Using the Root subsystem, install a scoped subsystem with the following content bundles
1:        - Bundle C
1:        - Bundle E
1:        and the following resources in the Local Repository
1:        - Bundle F
1:        - Bundle G
1:      - Verify that bundles F and G got installed into the Root Subsystem
1:      - Verify the wiring of C and E wire to F->x and G->y respectively
1:      - Verify that bundles A and B did not get installed into the Root Subsystem
1:  */
1: 
1: public class SubsystemDependency_4DTest extends SubsystemDependencyTestBase 
1: {
1: 	private static final String SUBSYSTEM_4D = "sdt_application4d.esa";
0: 	private static boolean _testSubsystemCreated = false;
1: 	private Subsystem subsystem;
1: 	
0: 	@Before
0: 	public void setUp() throws Exception
1: 	{
0: 		super.setUp();
0: 		if (!_testSubsystemCreated) { 
0: 			createApplication4d();
1: 		}
1: 		registerRepositoryR2();
1: 	}
1: 	
1: 	//  - Verify that bundles F and G got installed into the Root Subsystem
1: 	@Test
1: 	public void verifyBundesFandGinstalledIntoRootSubsystem() throws Exception
1: 	{
1: 		startSubsystem();
0: 		Bundle[] rootBundles = bundleContext.getBundles();
0: 		boolean bundleFinstalled = false;
0: 		boolean bundleGinstalled = false;
0: 		for (Bundle b : rootBundles) { 
0: 			if (b.getSymbolicName().equals(BUNDLE_F)) bundleFinstalled = true;
0: 			if (b.getSymbolicName().equals(BUNDLE_G)) bundleGinstalled = true;
1: 		}
0: 		assertTrue ("Bundle F not found in root subsystem", bundleFinstalled);
0: 		assertTrue ("Bundle G not found in root subsystem", bundleGinstalled);
1: 		stopSubsystem();
1: 	}
1: 	
1: 	// - Verify the wiring of C and E wire to F->x and G->y respectively
1: 	@Test
1: 	public void verifyBundleCWiredToPackageXFromBundleF() throws Exception
1: 	{
1: 		startSubsystem();
1: 		verifySinglePackageWiring (subsystem, BUNDLE_C, "x", BUNDLE_F);
1: 		stopSubsystem();
1: 	}
1: 	
1: 	@Test
1: 	public void verifyBundleEWiredToCapability_yFromBundleG() throws Exception
1: 	{
1: 		startSubsystem();
1: 		verifyCapabilityWiring (subsystem, BUNDLE_E, "y", BUNDLE_G);
1: 		stopSubsystem();
1: 	}
1: 	
1: 	// - Verify that bundles A and B did not get installed into the Root Subsystem
1: 	@Test
1: 	public void verifyBundlesAandBNotInstalledInRootSubsystem() throws Exception
1: 	{
1: 		startSubsystem();
1: 		Bundle[] bundles = bundleContext.getBundles();
1: 		for (Bundle b: bundles) {
1: 			assertTrue ("Bundle A should not have been provisioned!", !b.getSymbolicName().equals(BUNDLE_A));
1: 			assertTrue ("Bundle B should not have been provisioned!", !b.getSymbolicName().equals(BUNDLE_B));
1: 		}
1: 		stopSubsystem();
1: 	}
1: 	
1: 	// doing this within @Before doesn't work :(
1: 	private void startSubsystem() throws Exception
1: 	{ 
1: 		subsystem = installSubsystemFromFile(SUBSYSTEM_4D);
1: 		startSubsystem(subsystem);
1: 	}
1: 	
1: 	private void stopSubsystem() throws Exception
1: 	{
1: 		stopSubsystem(subsystem);
1: 		uninstallSubsystem(subsystem);
1: 	}
1: 	
1: 	private static void createApplication4d() throws Exception
1: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, SUBSYSTEM_4D);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 		String appContent = BUNDLE_C + "," + BUNDLE_E;
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1: 		createManifest(SUBSYSTEM_4D + ".mf", attributes);
1: 		createSubsystem(SUBSYSTEM_4D, BUNDLE_F, BUNDLE_G);
1: 	}
1: }
============================================================================