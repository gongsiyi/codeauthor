1:b1379cb: /**
1:b1379cb:  * Licensed to the Apache Software Foundation (ASF) under one
1:b1379cb:  * or more contributor license agreements.  See the NOTICE file
1:b1379cb:  * distributed with this work for additional information
1:b1379cb:  * regarding copyright ownership.  The ASF licenses this file
1:b1379cb:  * to you under the Apache License, Version 2.0 (the
1:b1379cb:  * "License"); you may not use this file except in compliance
1:b1379cb:  * with the License.  You may obtain a copy of the License at
1:b1379cb:  *
1:b1379cb:  *   http://www.apache.org/licenses/LICENSE-2.0
1:b1379cb:  *
1:b1379cb:  * Unless required by applicable law or agreed to in writing,
1:b1379cb:  * software distributed under the License is distributed on an
1:b1379cb:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:b1379cb:  * KIND, either express or implied.  See the License for the
1:b1379cb:  * specific language governing permissions and limitations
1:b1379cb:  * under the License.
1:b1379cb:  */
1:b1379cb: package org.apache.aries.spifly.dynamic;
7:b1379cb: 
1:b1379cb: import java.util.Set;
1:b1379cb: 
1:b1379cb: import org.apache.aries.spifly.Util;
1:b1379cb: import org.apache.aries.spifly.WeavingData;
1:4b6c670: import org.apache.aries.spifly.weaver.TCCLSetterVisitor;
1:b1379cb: import org.objectweb.asm.ClassReader;
1:b1379cb: import org.objectweb.asm.ClassWriter;
1:b1379cb: import org.osgi.framework.Bundle;
1:b1379cb: import org.osgi.framework.BundleContext;
1:b1379cb: import org.osgi.framework.hooks.weaving.WeavingHook;
1:b1379cb: import org.osgi.framework.hooks.weaving.WovenClass;
1:b1379cb: import org.osgi.service.log.LogService;
1:b1379cb: 
1:b1379cb: public class ClientWeavingHook implements WeavingHook {
1:b1379cb:     private final String addedImport;
1:b1379cb:     private final DynamicWeavingActivator activator;
1:f886534: 
1:b1379cb:     ClientWeavingHook(BundleContext context, DynamicWeavingActivator dwActivator) {
1:b1379cb:         activator = dwActivator;
1:f886534: 
1:b1379cb:         Bundle b = context.getBundle();
1:b1379cb:         String bver = b.getVersion().toString();
1:b1379cb:         String bsn = b.getSymbolicName();
1:f886534: 
1:f886534:         addedImport = Util.class.getPackage().getName() +
1:f886534:             ";bundle-symbolic-name=" + bsn +
1:b1379cb:             ";bundle-version=" + bver;
2:b1379cb:     }
1:f886534: 
1:b1379cb: 	@Override
1:b1379cb: 	public void weave(WovenClass wovenClass) {
1:b1379cb: 	    Bundle consumerBundle = wovenClass.getBundleWiring().getBundle();
1:b1379cb:         Set<WeavingData> wd = activator.getWeavingData(consumerBundle);
1:b1379cb:         if (wd != null) {
1:f886534: 	        activator.log(LogService.LOG_DEBUG, "Weaving class " + wovenClass.getClassName());
1:f886534: 
1:c7183ef:             ClassReader cr = new ClassReader(wovenClass.getBytes());
1:c7183ef:             ClassWriter cw = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES,
1:c7183ef:                 wovenClass.getBundleWiring().getClassLoader());
1:b1379cb: 	        TCCLSetterVisitor tsv = new TCCLSetterVisitor(cw, wovenClass.getClassName(), wd);
1:e4e3ae2: 	        cr.accept(tsv, ClassReader.SKIP_FRAMES);
1:e9a5257: 	        if (tsv.isWoven()) {
1:e9a5257:     	        wovenClass.setBytes(cw.toByteArray());
1:e9a5257:     	        if (tsv.additionalImportRequired())
1:e9a5257:     	            wovenClass.getDynamicImports().add(addedImport);
1:e9a5257: 	        }
1:f886534: 	    }
1:b1379cb: 	}
1:b1379cb: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:e9a5257
/////////////////////////////////////////////////////////////////////////
1: 	        if (tsv.isWoven()) {
1:     	        wovenClass.setBytes(cw.toByteArray());
1:     	        if (tsv.additionalImportRequired())
1:     	            wovenClass.getDynamicImports().add(addedImport);
1: 	        }
commit:c7183ef
/////////////////////////////////////////////////////////////////////////
1:             ClassReader cr = new ClassReader(wovenClass.getBytes());
1:             ClassWriter cw = new OSGiFriendlyClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES,
1:                 wovenClass.getBundleWiring().getClassLoader());
commit:e4e3ae2
/////////////////////////////////////////////////////////////////////////
1: 	        cr.accept(tsv, ClassReader.SKIP_FRAMES);
commit:f886534
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         addedImport = Util.class.getPackage().getName() +
1:             ";bundle-symbolic-name=" + bsn +
1: 
1: 	        activator.log(LogService.LOG_DEBUG, "Weaving class " + wovenClass.getClassName());
1: 
0: 	        cr.accept(tsv, 0);
1: 	    }
commit:4b6c670
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.spifly.weaver.TCCLSetterVisitor;
commit:b1379cb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly.dynamic;
1: 
1: import java.util.Set;
1: 
0: import org.apache.aries.spifly.TCCLSetterVisitor;
1: import org.apache.aries.spifly.Util;
1: import org.apache.aries.spifly.WeavingData;
1: import org.objectweb.asm.ClassReader;
1: import org.objectweb.asm.ClassWriter;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.hooks.weaving.WeavingHook;
1: import org.osgi.framework.hooks.weaving.WovenClass;
1: import org.osgi.service.log.LogService;
1: 
1: public class ClientWeavingHook implements WeavingHook {
1:     private final String addedImport;
1:     private final DynamicWeavingActivator activator;
1:     
1:     ClientWeavingHook(BundleContext context, DynamicWeavingActivator dwActivator) {
1:         activator = dwActivator;
1:         
1:         Bundle b = context.getBundle();
1:         String bver = b.getVersion().toString();
1:         String bsn = b.getSymbolicName();
1:         
0:         addedImport = Util.class.getPackage().getName() + 
0:             ";bundle-symbolic-name=" + bsn + 
1:             ";bundle-version=" + bver;
1:     }
1:     
1: 	@Override
1: 	public void weave(WovenClass wovenClass) {
1: 	    Bundle consumerBundle = wovenClass.getBundleWiring().getBundle();
1:         Set<WeavingData> wd = activator.getWeavingData(consumerBundle);
1:         if (wd != null) {
0: 	        activator.log(LogService.LOG_DEBUG, "Weaving class " + wovenClass.getClassName());            
1:             
0: //            WeavingData[] wd = ConsumerHeaderProcessor.processHeader(consumerBundle, consumerHeader);
1: 	        
0: 	        ClassReader cr = new ClassReader(wovenClass.getBytes());
0: 	        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
1: 	        TCCLSetterVisitor tsv = new TCCLSetterVisitor(cw, wovenClass.getClassName(), wd);
0: 	        cr.accept(tsv, 0);	        
0: 	        wovenClass.setBytes(cw.toByteArray());
0: 	        if (tsv.additionalImportRequired())
0: 	            wovenClass.getDynamicImports().add(addedImport);
1: 	    }			
1: 	}
1: }
============================================================================