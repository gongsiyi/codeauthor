5:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
2:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
5:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.agent;
6:fdf3952: 
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.MBeanHandler;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>This <tt>JMXAgent</tt> class represent agent for MBeanServers registered in ServiceRegistry.
1:fdf3952:  * It's responsible for registration and unregistration MBeans with available MBeanServers.
1:fdf3952:  * </p>
1:7871c8f:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public interface JMXAgent {
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * This method starts JMX agent.
1:7871c8f:      * Creates and starting all MBean Handlers and MBeanServiceTracker.
1:fdf3952:      */
1:fdf3952:     void start();
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Registers MBeans with provided MBeanServer.
1:7871c8f:      * @param server MBeanServer with which MBeans are going to be registered
1:fdf3952:      */
1:fdf3952:     void registerMBeans(final MBeanServer server);
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Unregisters MBeans with provided MBeanServer.
1:fdf3952:      * @param server MBeanServer with which MBeans are going to be unregistered.
1:fdf3952:      */
1:fdf3952:     void unregisterMBeans(final MBeanServer server);
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Registers MBean with all available MBeanServers.
1:7871c8f:      * @param mBeanHandler handler which contains MBean info.
1:7871c8f:      */
1:fdf3952:     void registerMBean(final MBeanHandler mBeanHandler);
1:fdf3952: 
1:fdf3952:     /**
1:7871c8f:      * Unregisters MBean with all available MBeanServers.
1:fdf3952:      * @param mBeanHandler handler which contains MBean info.
1:fdf3952:      */
1:7871c8f:     void unregisterMBean(final MBeanHandler mBeanHandler);
1:7871c8f: 
1:7871c8f:     /**
1:fdf3952:      * Stops JMXAgent.
1:fdf3952:      * This method stops MBeanServiceTracker and all MBean handlers.
1:fdf3952:      */
1:fdf3952:     void stop();
1:fdf3952: 
1:fdf3952: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f5398b2
/////////////////////////////////////////////////////////////////////////
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:7871c8f
/////////////////////////////////////////////////////////////////////////
1:  *
1:      * Creates and starting all MBean Handlers and MBeanServiceTracker.
1:      * @param server MBeanServer with which MBeans are going to be registered
/////////////////////////////////////////////////////////////////////////
1:      * @param mBeanHandler handler which contains MBean info.
1:      */
1:     void unregisterMBean(final MBeanHandler mBeanHandler);
1: 
1:     /**
1:      * Unregisters MBean with all available MBeanServers.
0:      * @deprecated
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.agent;
1: 
0: import java.util.concurrent.ExecutorService;
1: 
1: import javax.management.MBeanServer;
1: 
1: import org.apache.aries.jmx.MBeanHandler;
1: 
1: /**
1:  * <p>This <tt>JMXAgent</tt> class represent agent for MBeanServers registered in ServiceRegistry.
1:  * It's responsible for registration and unregistration MBeans with available MBeanServers.
1:  * </p>
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public interface JMXAgent {
1: 
1:     /**
1:      * This method starts JMX agent.
0:      * Creates and starting all MBean Handlers and MBeanServiceTracker. 
1:      */
1:     void start();
1: 
1:     /**
1:      * Registers MBeans with provided MBeanServer.
0:      * @param server MBeanServer with which MBeans are going to be registered 
1:      */
1:     void registerMBeans(final MBeanServer server);
1: 
1:     /**
1:      * Unregisters MBeans with provided MBeanServer.
1:      * @param server MBeanServer with which MBeans are going to be unregistered.
1:      */
1:     void unregisterMBeans(final MBeanServer server);
1: 
1:     /**
1:      * Registers MBean with all available MBeanServers.
1:      * @param mBeanHandler handler which contains MBean info.
1:      */
1:     void registerMBean(final MBeanHandler mBeanHandler);
1: 
1:     /**
0:      * Unregisters MBean with all available MBeanServers.
0:      * @param name of MBean to be unregistered.
1:      */
0:     void unregisterMBean(final String name);
1: 
1:     /**
1:      * Stops JMXAgent.
1:      * This method stops MBeanServiceTracker and all MBean handlers.
1:      */
1:     void stop();
1: 
1:     /**
0:      * Gets JMXAgentContext @see {@link JMXAgentContext}.
0:      * @return JMXAgentContext instance.
1:      */
0:     JMXAgentContext getAgentContext();
1: 
1:     /**
0:      * Sets JMXAgentContext for this agent.
0:      * @param agentContext JMXAgentContext instance created for this agent.
1:      */
0:     void setAgentContext(JMXAgentContext agentContext);
1: 
1:     /**
0:      * Gets registration {@link ExecutorService}.
0:      * @return registration executor.
1:      */
0:     ExecutorService getRegistrationExecutor();
1: 
1: }
============================================================================