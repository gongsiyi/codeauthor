1:541fd79: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:541fd79:  *  contributor license agreements.  See the NOTICE file distributed with
1:541fd79:  *  this work for additional information regarding copyright ownership.
1:541fd79:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:541fd79:  *  (the "License"); you may not use this file except in compliance with
1:541fd79:  *  the License.  You may obtain a copy of the License at
1:541fd79:  *
1:541fd79:  *     http://www.apache.org/licenses/LICENSE-2.0
1:541fd79:  *
1:541fd79:  *  Unless required by applicable law or agreed to in writing, software
1:541fd79:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:541fd79:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:541fd79:  *  See the License for the specific language governing permissions and
1:541fd79:  *  limitations under the License.
1:541fd79:  */
1:541fd79: package org.apache.aries.ejb.openejb.extender.itest;
50:541fd79: 
1:541fd79: import static org.junit.Assert.assertEquals;
1:541fd79: import static org.junit.Assert.assertNotNull;
1:541fd79: import static org.junit.Assert.assertNull;
1:541fd79: 
1:541fd79: import java.io.ByteArrayInputStream;
1:541fd79: import java.io.ByteArrayOutputStream;
1:541fd79: import java.util.zip.ZipOutputStream;
1:4115fb2: 
1:541fd79: import org.junit.Test;
1:541fd79: import org.junit.runner.RunWith;
1:8beabf0: import org.ops4j.pax.exam.junit.PaxExam;
1:8beabf0: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:8beabf0: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:541fd79: import org.osgi.framework.Bundle;
1:541fd79: import org.osgi.framework.ServiceReference;
1:541fd79: 
1:541fd79: import beans.StatelessSessionBean;
1:541fd79: import beans.xml.LocalIface;
1:541fd79: import beans.xml.RemoteIface;
1:541fd79: 
1:8beabf0: @RunWith(PaxExam.class)
1:8beabf0: @ExamReactorStrategy(PerClass.class)
1:4115fb2: public class EJBBundleTest extends AbstractOpenEJBTest {
1:541fd79: 
1:8beabf0:     private void assertXML(Bundle test, boolean exists) throws Exception {
1:8beabf0:         ServiceReference[] local = context().getAllServiceReferences(LocalIface.class.getName(),
1:8beabf0:                 "(&(ejb.name=XML)(ejb.type=Singleton))");
1:8beabf0:         if (exists) {
1:8beabf0:             assertNotNull(local);
1:8beabf0:             assertEquals(1, local.length);
1:8beabf0:             Object svc = context().getService(local[0]);
1:8beabf0:             assertNotNull(svc);
1:8beabf0:             assertEquals("A Local Call", svc.getClass().getMethod("getLocalString").invoke(svc));
1:8beabf0:         } else {
1:8beabf0:             assertNull(local);
1:8beabf0:         }
1:8beabf0: 
1:8beabf0:         ServiceReference[] remote = context().getAllServiceReferences(RemoteIface.class.getName(),
1:8beabf0:                 "(&(ejb.name=XML)(ejb.type=Singleton))");
1:8beabf0:         if (exists) {
1:8beabf0:             assertNotNull(remote);
1:8beabf0:             assertEquals(1, remote.length);
1:8beabf0:             Object svc = context().getService(remote[0]);
1:8beabf0:             assertNotNull(svc);
1:8beabf0:             assertEquals("A Remote Call", svc.getClass().getMethod("getRemoteString").invoke(svc));
1:8beabf0:         } else {
1:8beabf0:             assertNull(remote);
1:8beabf0:         }
20:541fd79:     }
1:8beabf0: 
1:8beabf0:     private void assertAnnotations(Bundle test, boolean exists) throws Exception {
1:8beabf0:         ServiceReference[] stateless = context().getAllServiceReferences(StatelessSessionBean.class.getName(),
1:8beabf0:                 "(&(ejb.name=Annotated)(ejb.type=Stateless))");
1:8beabf0:         if (exists) {
1:8beabf0:             assertNotNull(stateless);
1:8beabf0:             assertEquals(1, stateless.length);
1:8beabf0:             Object svc = context().getService(stateless[0]);
1:8beabf0:             assertNotNull(svc);
1:8beabf0:             assertEquals("A Stateless Call", svc.getClass().getMethod("getStatelessString").invoke(svc));
1:8beabf0:         } else {
1:8beabf0:             assertNull(stateless);
1:8beabf0:         }
1:541fd79:     }
1:8beabf0: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARInZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, true);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARAndAnnotatedInZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class");
1:8beabf0:         addToZip(zos, "beans/StatelessSessionBean.class");
1:8beabf0:         addToZip(zos, "beans/StatefulSessionBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, true);
1:8beabf0:             assertAnnotations(test, true);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testAnnotatedOnlyInZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class");
1:8beabf0:         addToZip(zos, "beans/StatelessSessionBean.class");
1:8beabf0:         addToZip(zos, "beans/StatefulSessionBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, true);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARAndAnnotatedNotOnClasspathInZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
1:8beabf0:         addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
1:8beabf0:         addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, true);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARAndAnnotatedOnClasspathInZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
1:8beabf0:         addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
1:8beabf0:         addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, true);
1:8beabf0:             assertAnnotations(test, true);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:541fd79: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARInWebZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:541fd79: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, true);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:541fd79: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARInWrongPlaceWebZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:541fd79: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARAndAnnotatedInWebZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class");
1:8beabf0:         addToZip(zos, "beans/StatelessSessionBean.class");
1:8beabf0:         addToZip(zos, "beans/StatefulSessionBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, true);
1:8beabf0:             assertAnnotations(test, true);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:541fd79: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testAnnotatedOnlyInWebZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class");
1:8beabf0:         addToZip(zos, "beans/StatelessSessionBean.class");
1:8beabf0:         addToZip(zos, "beans/StatefulSessionBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, true);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:541fd79: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:541fd79:     }
1:541fd79: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARAndAnnotatedNotOnClasspathInWebZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
1:8beabf0:         addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
1:8beabf0:         addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, true);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:8beabf0:     }
1:8beabf0: 
1:8beabf0:     @Test
1:8beabf0:     public void testEJBJARAndAnnotatedOnClasspathInWebZip() throws Exception {
1:8beabf0:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:8beabf0:         ZipOutputStream zos = new ZipOutputStream(baos);
1:8beabf0:         addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
1:8beabf0:         addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:8beabf0:         addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
1:8beabf0:         addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
1:8beabf0:         addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
1:8beabf0:         addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
1:8beabf0:         zos.close();
1:8beabf0: 
1:8beabf0:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:8beabf0: 
1:8beabf0:         try {
1:8beabf0:             test.start();
1:8beabf0:             assertXML(test, true);
1:8beabf0:             assertAnnotations(test, true);
1:8beabf0:             test.stop();
1:8beabf0:             assertXML(test, false);
1:8beabf0:             assertAnnotations(test, false);
1:8beabf0: 
1:8beabf0:         } finally {
1:8beabf0:             test.uninstall();
1:8beabf0:         }
1:8beabf0:     }
1:541fd79: 
1:541fd79: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:8beabf0
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1:     private void assertXML(Bundle test, boolean exists) throws Exception {
1:         ServiceReference[] local = context().getAllServiceReferences(LocalIface.class.getName(),
1:                 "(&(ejb.name=XML)(ejb.type=Singleton))");
1:         if (exists) {
1:             assertNotNull(local);
1:             assertEquals(1, local.length);
1:             Object svc = context().getService(local[0]);
1:             assertNotNull(svc);
1:             assertEquals("A Local Call", svc.getClass().getMethod("getLocalString").invoke(svc));
1:         } else {
1:             assertNull(local);
1:         }
1: 
1:         ServiceReference[] remote = context().getAllServiceReferences(RemoteIface.class.getName(),
1:                 "(&(ejb.name=XML)(ejb.type=Singleton))");
1:         if (exists) {
1:             assertNotNull(remote);
1:             assertEquals(1, remote.length);
1:             Object svc = context().getService(remote[0]);
1:             assertNotNull(svc);
1:             assertEquals("A Remote Call", svc.getClass().getMethod("getRemoteString").invoke(svc));
1:         } else {
1:             assertNull(remote);
1:         }
1: 
1:     private void assertAnnotations(Bundle test, boolean exists) throws Exception {
1:         ServiceReference[] stateless = context().getAllServiceReferences(StatelessSessionBean.class.getName(),
1:                 "(&(ejb.name=Annotated)(ejb.type=Stateless))");
1:         if (exists) {
1:             assertNotNull(stateless);
1:             assertEquals(1, stateless.length);
1:             Object svc = context().getService(stateless[0]);
1:             assertNotNull(svc);
1:             assertEquals("A Stateless Call", svc.getClass().getMethod("getStatelessString").invoke(svc));
1:         } else {
1:             assertNull(stateless);
1:         }
1: 
1:     @Test
1:     public void testEJBJARInZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class");
1:         zos.close();
1: 
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, true);
1:             test.stop();
1:             assertXML(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     @Test
1:     public void testEJBJARAndAnnotatedInZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class");
1:         addToZip(zos, "beans/StatelessSessionBean.class");
1:         addToZip(zos, "beans/StatefulSessionBean.class");
1:         zos.close();
1: 
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, true);
1:             assertAnnotations(test, true);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     @Test
1:     public void testAnnotatedOnlyInZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class");
1:         addToZip(zos, "beans/StatelessSessionBean.class");
1:         addToZip(zos, "beans/StatefulSessionBean.class");
1:         zos.close();
1: 
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, false);
1:             assertAnnotations(test, true);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     @Test
1:     public void testEJBJARAndAnnotatedNotOnClasspathInZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
1:         addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
1:         addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
1:         zos.close();
1: 
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, true);
1:             assertAnnotations(test, false);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     @Test
1:     public void testEJBJARAndAnnotatedOnClasspathInZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
1:         addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
1:         addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
1:         zos.close();
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, true);
1:             assertAnnotations(test, true);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     @Test
1:     public void testEJBJARInWebZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class");
1:         zos.close();
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:         try {
1:             test.start();
1:             assertXML(test, true);
1:             assertAnnotations(test, false);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     @Test
1:     public void testEJBJARInWrongPlaceWebZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class");
1:         zos.close();
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     @Test
1:     public void testEJBJARAndAnnotatedInWebZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class");
1:         addToZip(zos, "beans/StatelessSessionBean.class");
1:         addToZip(zos, "beans/StatefulSessionBean.class");
1:         zos.close();
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, true);
1:             assertAnnotations(test, true);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     @Test
1:     public void testAnnotatedOnlyInWebZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class");
1:         addToZip(zos, "beans/StatelessSessionBean.class");
1:         addToZip(zos, "beans/StatefulSessionBean.class");
1:         zos.close();
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:         try {
1:             test.start();
1:             assertXML(test, false);
1:             assertAnnotations(test, true);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1:         } finally {
1:             test.uninstall();
1:         }
1: 
1:     @Test
1:     public void testEJBJARAndAnnotatedNotOnClasspathInWebZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
1:         addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
1:         addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
1:         zos.close();
1: 
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, true);
1:             assertAnnotations(test, false);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     }
1: 
1:     @Test
1:     public void testEJBJARAndAnnotatedOnClasspathInWebZip() throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         ZipOutputStream zos = new ZipOutputStream(baos);
1:         addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
1:         addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:         addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
1:         addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
1:         addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
1:         addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
1:         addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
1:         zos.close();
1: 
1:         Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
1:         try {
1:             test.start();
1:             assertXML(test, true);
1:             assertAnnotations(test, true);
1:             test.stop();
1:             assertXML(test, false);
1:             assertAnnotations(test, false);
1: 
1:         } finally {
1:             test.uninstall();
1:         }
1:     }
1: 
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertNotSame;
0: import static org.junit.Assert.assertSame;
0: import java.lang.reflect.Method;
0: import javax.transaction.TransactionSynchronizationRegistry;
0: import javax.transaction.UserTransaction;
1: 
0: import beans.integration.Tx;
1: public class EJBBundleTest extends AbstractOpenEJBTest {
/////////////////////////////////////////////////////////////////////////
commit:541fd79
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.openejb.extender.itest;
1: 
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
0: import static org.apache.aries.itest.ExtraOptions.transactionBootDelegation;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
0: import java.io.IOException;
0: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
0: import org.apache.aries.itest.AbstractIntegrationTest;
0: import org.apache.aries.util.io.IOUtils;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.ServiceReference;
1: 
1: import beans.StatelessSessionBean;
1: import beans.xml.LocalIface;
1: import beans.xml.RemoteIface;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class EJBBundleTest extends AbstractIntegrationTest {
1: 
0:   private void assertXML(Bundle test, boolean exists) throws Exception {
0:     ServiceReference[] local = context().getAllServiceReferences(LocalIface.class.getName(), 
0:         "(&(ejb.name=XML)(ejb.type=Singleton))");
0:     if(exists) {
0:       assertNotNull(local);
0:       assertEquals(1, local.length);
0:       Object svc = context().getService(local[0]);
0:       assertNotNull(svc);
0:       assertEquals("A Local Call", svc.getClass().getMethod("getLocalString").invoke(svc));
0:     } else {
0:       assertNull(local);
1:     }
1:     
0:     ServiceReference[] remote = context().getAllServiceReferences(RemoteIface.class.getName(), 
0:     "(&(ejb.name=XML)(ejb.type=Singleton))");
0:     if(exists) {
0:       assertNotNull(remote);
0:       assertEquals(1, remote.length);
0:       Object svc = context().getService(remote[0]);
0:       assertNotNull(svc);
0:       assertEquals("A Remote Call", svc.getClass().getMethod("getRemoteString").invoke(svc));
0:     } else {
0:       assertNull(remote);
1:     }
1:   }
1:   
0:   private void assertAnnotations(Bundle test, boolean exists) throws Exception {
0:     ServiceReference[] stateless = context().getAllServiceReferences(StatelessSessionBean.class.getName(), 
0:         "(&(ejb.name=Annotated)(ejb.type=Stateless))");
0:     if(exists) {
0:       assertNotNull(stateless);
0:       assertEquals(1, stateless.length);
0:       Object svc = context().getService(stateless[0]);
0:       assertNotNull(svc);
0:       assertEquals("A Stateless Call", svc.getClass().getMethod("getStatelessString").invoke(svc));
0:     } else {
0:       assertNull(stateless);
1:     }
1:   }
1:   
0:   @Test
0:   public void testEJBJARInZip() throws Exception {
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
0:     try {
0:       test.start();
0:       assertXML(test, true);
0:       test.stop();
0:       assertXML(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedInZip() throws Exception {
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class");
0:     addToZip(zos, "beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
0:     try {
0:       test.start();
0:       assertXML(test, true);
0:       assertAnnotations(test, true);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testAnnotatedOnlyInZip() throws Exception {
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class");
0:     addToZip(zos, "beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
0:     try {
0:       test.start();
0:       assertXML(test, false);
0:       assertAnnotations(test, true);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedNotOnClasspathInZip() throws Exception {
1: 
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
0:     addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
0:     try {
0:       test.start();
0:       assertXML(test, true);
0:       assertAnnotations(test, false);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1: 
0:   @Test
0:   public void testEJBJARAndAnnotatedOnClasspathInZip() throws Exception {
1: 
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
0:     addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
0:     try {
0:       test.start();
0:       assertXML(test, true);
0:       assertAnnotations(test, true);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testEJBJARInWebZip() throws Exception {
1: 
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1: 
0:     try {
0:       test.start();
0:       assertXML(test, true);
0:       assertAnnotations(test, false);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1: 
0:   @Test
0:   public void testEJBJARInWrongPlaceWebZip() throws Exception {
1: 
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:     
0:     try {
0:       test.start();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedInWebZip() throws Exception {
1: 
1:     
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class");
0:     addToZip(zos, "beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:     
0:     try {
0:       test.start();
0:       assertXML(test, true);
0:       assertAnnotations(test, true);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testAnnotatedOnlyInWebZip() throws Exception {
1: 
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class");
0:     addToZip(zos, "beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:     
0:     try {
0:       test.start();
0:       assertXML(test, false);
0:       assertAnnotations(test, true);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedNotOnClasspathInWebZip() throws Exception {
1: 
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
0:     addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:     
0:     try {
0:       test.start();
0:       assertXML(test, true);
0:       assertAnnotations(test, false);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   @Test
0:   public void testEJBJARAndAnnotatedOnClasspathInWebZip() throws Exception {
1: 
0:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
0:     ZipOutputStream zos = new ZipOutputStream(baos);
0:     addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
0:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
0:     addToZip(zos, "beans/xml/LocalIface.class", "yes/beans/xml/LocalIface.class");
0:     addToZip(zos, "beans/xml/RemoteIface.class", "yes/beans/xml/RemoteIface.class");
0:     addToZip(zos, "beans/xml/XMLBean.class", "yes/beans/xml/XMLBean.class");
0:     addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
0:     addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
0:     zos.close();
1:     
0:     Bundle test = context().installBundle("", new ByteArrayInputStream(baos.toByteArray()));
1:     
0:     try {
0:       test.start();
0:       assertXML(test, true);
0:       assertAnnotations(test, true);
0:       test.stop();
0:       assertXML(test, false);
0:       assertAnnotations(test, false);
1:       
0:     } finally {
0:       test.uninstall();
1:     }
1:   }
1:   
0:   private void addToZip(ZipOutputStream zos, String src) throws IOException {
0:     addToZip(zos, src, src);
1:   }
1:   
0:   private void addToZip(ZipOutputStream zos, String src, String outLocation) throws IOException {
0:     zos.putNextEntry(new ZipEntry(outLocation));
0:     IOUtils.copy(getClass().getClassLoader().
0:         getResourceAsStream(src), zos);
0:     zos.closeEntry();
1:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     return testOptions(
0:         paxLogging("DEBUG"),
0:         transactionBootDelegation(),
0:         vmOption("-Dorg.osgi.framework.system.packages.extra=sun.misc,javax.xml.namespace;version=1.1"),
0:         // Bundles
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:         mavenBundle("org.apache.aries.transaction", "org.apache.aries.transaction.manager"),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.ejb", "org.apache.aries.ejb.openejb.extender"),
0:         mavenBundle("org.apache.openejb", "openejb-core"),
0:         mavenBundle("org.apache.openejb", "openejb-api"),
0:         mavenBundle("org.apache.openejb", "openejb-javaagent"),
0:         mavenBundle("org.apache.openejb", "openejb-jee"),
0:         mavenBundle("org.apache.openejb", "openejb-loader"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-impl"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-spi"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-ee"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-ejb"),
0:         mavenBundle("org.apache.openwebbeans", "openwebbeans-web"),
0:         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.javassist"),
0:         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.wsdl4j-1.6.1"),
0:         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.jaxb-impl"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-annotation_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-ejb_3.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jcdi_1.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-el_2.2_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaxrpc_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-atinject_1.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-servlet_3.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jsp_2.2_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-interceptor_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-saaj_1.3_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-activation_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-management_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jpa_2.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-j2ee-connector_1.6_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jacc_1.4_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-validation_1.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaxrs_1.1_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-ws-metadata_2.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaspic_1.0_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaxb_2.2_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-stax-api_1.2_spec"),
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jaxws_2.2_spec"),
0:         //JMS is non optional if *any* EJBs are going to work, not just ones that use it :/
0:         mavenBundle("org.apache.geronimo.specs", "geronimo-jms_1.1_spec"),
0:         mavenBundle("commons-cli", "commons-cli"),
0:         mavenBundle("commons-lang", "commons-lang"),
0:         mavenBundle("commons-beanutils", "commons-beanutils"),
0:         mavenBundle("commons-collections", "commons-collections"),
0:         mavenBundle("org.apache.geronimo.components", "geronimo-connector"),
0:         mavenBundle("org.apache.geronimo.components", "geronimo-transaction"),
0:         mavenBundle("org.apache.geronimo.bundles", "scannotation"),
0:         mavenBundle("org.apache.xbean", "xbean-asm-shaded"),
0:         mavenBundle("org.apache.xbean", "xbean-finder-shaded"),
0:         mavenBundle("org.apache.xbean", "xbean-naming"),
0:         mavenBundle("org.apache.xbean", "xbean-reflect"),
0: //        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
0: //        waitForFrameworkStartup(),
1:         
1: 
0:         PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0:         equinox().version("3.7.0.v20110613"));
1:   }
1: 
1: }
============================================================================