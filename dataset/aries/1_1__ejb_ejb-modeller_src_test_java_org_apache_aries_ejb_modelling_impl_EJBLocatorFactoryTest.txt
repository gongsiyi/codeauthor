1:0d78661: /**
1:0d78661:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:0d78661:  *  contributor license agreements.  See the NOTICE file distributed with
1:0d78661:  *  this work for additional information regarding copyright ownership.
1:0d78661:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:0d78661:  *  (the "License"); you may not use this file except in compliance with
1:0d78661:  *  the License.  You may obtain a copy of the License at
1:0d78661:  *
1:0d78661:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d78661:  *
1:0d78661:  *  Unless required by applicable law or agreed to in writing, software
1:0d78661:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:0d78661:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d78661:  *  See the License for the specific language governing permissions and
1:0d78661:  *  limitations under the License.
1:0d78661:  */
1:0d78661: package org.apache.aries.ejb.modelling.impl;
1:0d78661: 
1:0d78661: import static org.junit.Assert.assertNotNull;
1:0d78661: import static org.junit.Assert.assertTrue;
1:0d78661: 
1:0d78661: import java.io.ByteArrayOutputStream;
1:0d78661: import java.io.IOException;
1:0d78661: 
1:0d78661: import org.apache.aries.ejb.modelling.EJBLocator;
1:0d78661: import org.apache.aries.util.io.IOUtils;
1:0d78661: import org.junit.Test;
1:0d78661: 
1:0d78661: public class EJBLocatorFactoryTest {
1:0d78661: 
1:0d78661:   @Test
1:0d78661:   public void testGetEJBLocator() {
1:0d78661:     EJBLocator locator = EJBLocatorFactory.getEJBLocator();
1:0d78661:     
1:0d78661:     assertNotNull(locator);
1:0d78661:     assertTrue(locator.getClass().getName(), locator instanceof OpenEJBLocator);
1:0d78661:   }
1:0d78661: 
1:0d78661:   
1:0d78661:   @Test
1:0d78661:   public void testGetEJBLocatorNoOpenEJB() throws Exception {
1:0d78661:     Class<?> elf = new ClassLoader(getClass().getClassLoader()) {
1:0d78661: 
1:0d78661:       @Override
1:0d78661:       public Class<?> loadClass(String className) throws ClassNotFoundException {
1:0d78661:         if(className.startsWith("org.apache.openejb"))
1:0d78661:           throw new ClassNotFoundException(className);
1:0d78661:         
1:0d78661:         if(className.equals(EJBLocatorFactory.class.getName())) {
1:0d78661:           ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:0d78661:           try {
1:0d78661:             IOUtils.copy(getResourceAsStream(className.replace('.', '/') + ".class"), baos);
1:0d78661:           } catch (IOException e) {
1:0d78661:             throw new ClassNotFoundException(className, e);
1:0d78661:           }
1:0d78661:           return defineClass(className, baos.toByteArray(), 0, baos.size());
1:0d78661:         }
1:0d78661:         
1:0d78661:         return super.loadClass(className);
1:0d78661:       } 
1:0d78661:       
1:0d78661:     }.loadClass(EJBLocatorFactory.class.getName());
1:0d78661:     
1:0d78661:     EJBLocator locator = (EJBLocator) elf.getMethod("getEJBLocator").invoke(null);
1:0d78661:     
1:0d78661:     assertNotNull(locator);
1:0d78661:     assertTrue(locator.getClass().getName(), locator instanceof EJBLocationUnavailable);
1:0d78661:   }
1:0d78661: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:0d78661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.aries.ejb.modelling.EJBLocator;
1: import org.apache.aries.util.io.IOUtils;
1: import org.junit.Test;
1: 
1: public class EJBLocatorFactoryTest {
1: 
1:   @Test
1:   public void testGetEJBLocator() {
1:     EJBLocator locator = EJBLocatorFactory.getEJBLocator();
1:     
1:     assertNotNull(locator);
1:     assertTrue(locator.getClass().getName(), locator instanceof OpenEJBLocator);
1:   }
1: 
1:   
1:   @Test
1:   public void testGetEJBLocatorNoOpenEJB() throws Exception {
1:     Class<?> elf = new ClassLoader(getClass().getClassLoader()) {
1: 
1:       @Override
1:       public Class<?> loadClass(String className) throws ClassNotFoundException {
1:         if(className.startsWith("org.apache.openejb"))
1:           throw new ClassNotFoundException(className);
1:         
1:         if(className.equals(EJBLocatorFactory.class.getName())) {
1:           ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:           try {
1:             IOUtils.copy(getResourceAsStream(className.replace('.', '/') + ".class"), baos);
1:           } catch (IOException e) {
1:             throw new ClassNotFoundException(className, e);
1:           }
1:           return defineClass(className, baos.toByteArray(), 0, baos.size());
1:         }
1:         
1:         return super.loadClass(className);
1:       } 
1:       
1:     }.loadClass(EJBLocatorFactory.class.getName());
1:     
1:     EJBLocator locator = (EJBLocator) elf.getMethod("getEJBLocator").invoke(null);
1:     
1:     assertNotNull(locator);
1:     assertTrue(locator.getClass().getName(), locator instanceof EJBLocationUnavailable);
1:   }
1: }
============================================================================