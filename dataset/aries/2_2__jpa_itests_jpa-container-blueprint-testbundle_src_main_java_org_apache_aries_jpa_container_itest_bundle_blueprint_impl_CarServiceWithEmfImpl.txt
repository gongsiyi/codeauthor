1:0b001f7: /*
1:0b001f7:  * Licensed to the Apache Software Foundation (ASF) under one
1:0b001f7:  * or more contributor license agreements.  See the NOTICE file
1:0b001f7:  * distributed with this work for additional information
1:0b001f7:  * regarding copyright ownership.  The ASF licenses this file
1:0b001f7:  * to you under the Apache License, Version 2.0 (the
1:0b001f7:  * "License"); you may not use this file except in compliance
1:0b001f7:  * with the License.  You may obtain a copy of the License at
1:0b001f7:  *
1:0b001f7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0b001f7:  *
1:0b001f7:  * Unless required by applicable law or agreed to in writing,
1:0b001f7:  * software distributed under the License is distributed on an
1:0b001f7:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:0b001f7:  * KIND, either express or implied.  See the License for the
1:0b001f7:  * specific language governing permissions and limitations
1:0b001f7:  * under the License.
1:0b001f7:  */
1:e5c89d2: package org.apache.aries.jpa.container.itest.bundle.blueprint.impl;
4:0b001f7: 
1:0b001f7: import java.util.Collection;
1:0b001f7: 
1:0b001f7: import javax.persistence.EntityManager;
1:0b001f7: import javax.persistence.EntityManagerFactory;
1:0b001f7: import javax.persistence.PersistenceUnit;
1:0b001f7: 
1:e5c89d2: import org.apache.aries.jpa.container.itest.entities.Car;
1:e5c89d2: import org.apache.aries.jpa.container.itest.entities.CarService;
1:0b001f7: 
1:0b001f7: public class CarServiceWithEmfImpl implements CarService {
1:0b001f7: 
1:0d59ccb:     @PersistenceUnit(unitName = "xa-test-unit")
1:bdbf3e8:     EntityManagerFactory emf;
1:0b001f7: 
1:bdbf3e8:     @Override
1:bdbf3e8:     public Car getCar(String id) {
2:bdbf3e8:         EntityManager em = emf.createEntityManager();
1:e5c89d2:         try {
1:e5c89d2:             return em.find(Car.class, id);
1:e5c89d2:         } finally {
1:e5c89d2:             em.close();
1:e5c89d2:         }
1:bdbf3e8:     }
1:0b001f7: 
1:ec3ea65:     @Override
1:bdbf3e8:     public void addCar(Car car) {
1:bdbf3e8:         EntityManager em = emf.createEntityManager();
1:bdbf3e8:         em.persist(car);
1:bdbf3e8:         em.flush();
1:e5c89d2:         em.close();
1:bdbf3e8:     }
1:0b001f7: 
1:bdbf3e8:     @Override
1:bdbf3e8:     public Collection<Car> getCars() {
1:ec3ea65:         EntityManager em = emf.createEntityManager();
1:e5c89d2:         try {
1:e5c89d2:             return em.createQuery("select c from Car c", Car.class).getResultList();
1:e5c89d2:         } finally {
1:e5c89d2:             em.close();
1:e5c89d2:         }
1:bdbf3e8:     }
1:0b001f7: 
1:bdbf3e8:     @Override
1:bdbf3e8:     public void updateCar(Car car) {
1:bdbf3e8:         EntityManager em = emf.createEntityManager();
1:bdbf3e8:         em.persist(car);
1:e5c89d2:         em.close();
1:bdbf3e8:     }
1:0b001f7: 
1:bdbf3e8:     @Override
1:bdbf3e8:     public void deleteCar(String id) {
1:bdbf3e8:         EntityManager em = emf.createEntityManager();
1:e5c89d2:         em.remove(em.find(Car.class, id));
1:e5c89d2:         em.close();
1:bdbf3e8:     }
1:bdbf3e8: 
1:bdbf3e8:     public void setEmf(EntityManagerFactory emf) {
1:bdbf3e8:         this.emf = emf;
1:bdbf3e8:     }
1:bdbf3e8: 
7:0b001f7: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         EntityManager em = emf.createEntityManager();
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:     @PersistenceUnit(unitName = "xa-test-unit")
commit:e5c89d2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.container.itest.bundle.blueprint.impl;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jpa.container.itest.entities.Car;
1: import org.apache.aries.jpa.container.itest.entities.CarService;
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             return em.find(Car.class, id);
1:         } finally {
1:             em.close();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         em.close();
0:         EntityManager em = null;
1:         try {
0:             em = emf.createEntityManager();
1:             return em.createQuery("select c from Car c", Car.class).getResultList();
1:         } finally {
1:             em.close();
1:         }
1:         em.close();
1:         em.remove(em.find(Car.class, id));
1:         em.close();
author:Giuseppe Gerla
-------------------------------------------------------------------------------
commit:bdbf3e8
/////////////////////////////////////////////////////////////////////////
0:     @PersistenceUnit(unitName = "test_unit_blueprint")
1:     EntityManagerFactory emf;
1:     @Override
1:     public Car getCar(String id) {
1:         EntityManager em = emf.createEntityManager();
0:         return em.find(Car.class, id);
1:     }
1:     @Override
1:     public void addCar(Car car) {
1:         EntityManager em = emf.createEntityManager();
1:         em.persist(car);
1:         em.flush();
1:     }
1:     public Collection<Car> getCars() {
1:         EntityManager em = emf.createEntityManager();
0:         return em.createQuery("select c from Car c", Car.class).getResultList();
1:     }
1:     @Override
1:     public void updateCar(Car car) {
1:         EntityManager em = emf.createEntityManager();
1:         em.persist(car);
1:     }
1:     @Override
1:     public void deleteCar(String id) {
1:         EntityManager em = emf.createEntityManager();
0:         em.remove(getCar(id));
1:     }
1: 
1:     public void setEmf(EntityManagerFactory emf) {
1:         this.emf = emf;
1:     }
1: 
commit:0b001f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.jpa.itest.testbundle.service.impl;
1: 
1: import java.util.Collection;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.PersistenceUnit;
1: 
0: import org.apache.aries.jpa.itest.testbundle.entities.Car;
0: import org.apache.aries.jpa.itest.testbundle.service.CarService;
1: 
1: 
1: public class CarServiceWithEmfImpl implements CarService {
1: 
0: 	@PersistenceUnit(unitName="test_unit_blueprint")
0: 	EntityManagerFactory emf;
1: 	
0: 	@Override
0: 	public Car getCar(String id) {
0: 		EntityManager em = emf.createEntityManager();
0: 		return em.find(Car.class, id);
1: 	}
1: 
0: 	@Override
0: 	public void addCar(Car car) {
0: 		EntityManager em = emf.createEntityManager();
0: 		em.persist(car);
0: 		em.flush();
1: 	}
1: 
0: 	public Collection<Car> getCars() {
0: 		EntityManager em = emf.createEntityManager();
0: 		return em.createQuery("select c from Car c", Car.class)
0: 			.getResultList();
1: 	}
1: 
0: 	@Override
0: 	public void updateCar(Car car) {
0: 		EntityManager em = emf.createEntityManager();
0: 		em.persist(car);
1: 	}
1: 
0: 	@Override
0: 	public void deleteCar(String id) {
0: 		EntityManager em = emf.createEntityManager();
0: 		em.remove(getCar(id));
1: 	}
1: 
0: 	public void setEmf(EntityManagerFactory emf) {
0: 		this.emf = emf;
1: 	}
1: 	
1: }
============================================================================