1:2ffcfb9: /*
1:2ffcfb9:  * Licensed under the Apache License, Version 2.0 (the "License");
1:2ffcfb9:  * you may not use this file except in compliance with the License.
1:2ffcfb9:  * You may obtain a copy of the License at
1:2ffcfb9:  *
1:2ffcfb9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2ffcfb9:  *
1:2ffcfb9:  * Unless required by applicable law or agreed to in writing, software
1:2ffcfb9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ffcfb9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ffcfb9:  * See the License for the specific language governing permissions and
1:2ffcfb9:  * limitations under the License.
1:2ffcfb9:  */
1:2ffcfb9: package org.apache.aries.subsystem.core.archive;
1:2ffcfb9: 
1:2ffcfb9: import java.util.ArrayList;
1:2ffcfb9: import java.util.Collection;
1:2ffcfb9: import java.util.Collections;
1:2ffcfb9: import java.util.HashMap;
1:2ffcfb9: import java.util.Map;
1:2ffcfb9: import java.util.regex.Matcher;
1:2ffcfb9: import java.util.regex.Pattern;
1:2ffcfb9: 
1:2ffcfb9: import org.osgi.framework.VersionRange;
1:2ffcfb9: 
1:2ffcfb9: public abstract class AbstractClause implements Clause {
1:2ffcfb9: 	protected static Collection<Parameter> generateDefaultParameters(Parameter... parameters) {
1:2ffcfb9: 		if (parameters == null || parameters.length == 0) {
1:2ffcfb9: 			return Collections.emptyList();
1:2ffcfb9: 		}
1:2ffcfb9: 		Collection<Parameter> defaults = new ArrayList<Parameter>(parameters.length);
1:2ffcfb9: 		for (Parameter parameter : parameters) {
1:2ffcfb9: 			defaults.add(parameter);
1:2ffcfb9: 		}
1:2ffcfb9: 		return defaults;
1:2ffcfb9: 	}
1:2ffcfb9: 	
1:2ffcfb9: 	protected static Map<String, Parameter> parseParameters(String clause, boolean replaceVersionWithVersionRange) {
1:2ffcfb9:     	Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1:2ffcfb9: 		Matcher matcher = Patterns.PARAMETER.matcher(clause);
1:2ffcfb9: 		while (matcher.find()) {
1:2ffcfb9:             Parameter parameter = ParameterFactory.create(matcher.group());
1:2ffcfb9:             if (replaceVersionWithVersionRange && (parameter instanceof VersionAttribute)) {
1:2ffcfb9:                 parameter = new VersionRangeAttribute(new VersionRange(String.valueOf(parameter.getValue())));
1:2ffcfb9:             }
1:2ffcfb9:             parameters.put(parameter.getName(), parameter);
1:2ffcfb9:         }
1:2ffcfb9: 		return parameters;
1:2ffcfb9:     }
1:d93afd1: 	
1:d93afd1: 	protected static Map<String, Parameter> parseTypedParameters(String clause) {
1:d93afd1:     	Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1:d93afd1: 		Matcher matcher = Patterns.TYPED_PARAMETER.matcher(clause);
1:d93afd1: 		while (matcher.find()) {
1:d93afd1:         	if (":=".equals(matcher.group(2))) {
1:d93afd1:         		// This is a directive.
1:d93afd1:         		parameters.put(matcher.group(1), DirectiveFactory.createDirective(matcher.group(1), removeQuotes(matcher.group(3))));
1:d93afd1:         	}
1:d93afd1:         	else if (":".equals(matcher.group(5))) {
1:d93afd1:         		// This is a typed attribute with a declared version.
1:d93afd1:         		parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), removeQuotes(matcher.group(7)), matcher.group(6)));
1:d93afd1:         	}
1:d93afd1:         	else {
1:d93afd1:         		// This is a typed attribute without a declared version.
1:d93afd1:         		parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), removeQuotes(matcher.group(7)), "String"));
1:d93afd1:         	}
1:d93afd1:         }
1:d93afd1: 		return parameters;
1:d93afd1:     }
1:d93afd1: 	
1:d93afd1: 	protected static String removeQuotes(String value) {
1:d93afd1: 		if (value == null)
1:d93afd1: 			return null;
1:d93afd1: 		if (value.startsWith("\"") && value.endsWith("\""))
1:d93afd1: 			return value.substring(1, value.length() - 1);
1:d93afd1: 		return value;
1:d93afd1: 	}
1:2ffcfb9:     
1:2ffcfb9:     protected static String parsePath(String clause, Pattern pattern, boolean replaceAllWhitespace) {
1:2ffcfb9:     	Matcher matcher = pattern.matcher(clause);
1:2ffcfb9:         if (!matcher.find())
1:2ffcfb9:             throw new IllegalArgumentException("Invalid path: " + clause);
1:2ffcfb9:         String path = matcher.group();
1:2ffcfb9:         if (replaceAllWhitespace) {
1:2ffcfb9:         	path = path.replaceAll("\\s", "");
1:2ffcfb9:         }
1:2ffcfb9:         return path;
1:2ffcfb9:     }
1:2ffcfb9: 	
1:2ffcfb9: 	protected final Map<String, Parameter> parameters;
1:2ffcfb9: 	protected final String path;
1:2ffcfb9:     
1:2ffcfb9:     public AbstractClause(String path, Map<String, Parameter> parameters, Collection<Parameter> defaultParameters) {
1:2ffcfb9:     	if (path == null) {
1:2ffcfb9:     		throw new NullPointerException();
1:2ffcfb9:     	}
1:2ffcfb9:     	for (Parameter parameter : defaultParameters) {
1:2ffcfb9:         	String name = parameter.getName();
1:2ffcfb9:         	if (parameters.containsKey(name)) {
1:2ffcfb9:         		continue;
1:2ffcfb9:         	}
1:2ffcfb9:         	parameters.put(name, parameter);
1:2ffcfb9:     	}
1:2ffcfb9:     	this.path = path;
1:2ffcfb9:     	this.parameters = Collections.synchronizedMap(parameters);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public Attribute getAttribute(String name) {
1:2ffcfb9:         Parameter result = parameters.get(name);
1:2ffcfb9:         if (result instanceof Attribute) {
1:2ffcfb9:             return (Attribute) result;
1:2ffcfb9:         }
1:2ffcfb9:         return null;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public Collection<Attribute> getAttributes() {
1:2ffcfb9:         ArrayList<Attribute> attributes = new ArrayList<Attribute>(
1:2ffcfb9:                 parameters.size());
1:2ffcfb9:         for (Parameter parameter : parameters.values()) {
1:2ffcfb9:             if (parameter instanceof Attribute) {
1:2ffcfb9:                 attributes.add((Attribute) parameter);
1:2ffcfb9:             }
1:2ffcfb9:         }
1:2ffcfb9:         attributes.trimToSize();
1:2ffcfb9:         return attributes;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public Directive getDirective(String name) {
1:2ffcfb9:         Parameter result = parameters.get(name);
1:2ffcfb9:         if (result instanceof Directive) {
1:2ffcfb9:             return (Directive) result;
1:2ffcfb9:         }
1:2ffcfb9:         return null;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public Collection<Directive> getDirectives() {
1:2ffcfb9:         ArrayList<Directive> directives = new ArrayList<Directive>(
1:2ffcfb9:                 parameters.size());
1:2ffcfb9:         for (Parameter parameter : parameters.values()) {
1:2ffcfb9:             if (parameter instanceof Directive) {
1:2ffcfb9:                 directives.add((Directive) parameter);
1:2ffcfb9:             }
1:2ffcfb9:         }
1:2ffcfb9:         directives.trimToSize();
1:2ffcfb9:         return directives;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public Parameter getParameter(String name) {
1:2ffcfb9:         return parameters.get(name);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public Collection<Parameter> getParameters() {
1:2ffcfb9:         return Collections.unmodifiableCollection(parameters.values());
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public String getPath() {
1:2ffcfb9:         return path;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public int hashCode() {
1:2ffcfb9:         int result = 17;
1:2ffcfb9:         result = 31 * result + path.hashCode();
1:2ffcfb9:         result = 31 * result + parameters.hashCode();
1:2ffcfb9:         return result;
1:2ffcfb9:     }
1:2ffcfb9:     
1:2ffcfb9:     @Override
1:2ffcfb9:     public boolean equals(Object o) {
1:2ffcfb9:     	if (o == this) {
1:2ffcfb9:     		return true;
1:2ffcfb9:     	}
1:2ffcfb9:     	if (!(o instanceof AbstractClause)) {
1:2ffcfb9:     		return false;
1:2ffcfb9:     	}
1:2ffcfb9:     	AbstractClause that = (AbstractClause)o;
1:2ffcfb9:     	return that.path.equals(this.path)
1:2ffcfb9:     			&& that.parameters.equals(this.parameters);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public String toString() {
1:2ffcfb9:         StringBuilder builder = new StringBuilder().append(getPath());
1:2ffcfb9:         for (Parameter parameter : getParameters()) {
1:2ffcfb9:             builder.append(';').append(parameter);
1:2ffcfb9:         }
1:2ffcfb9:         return builder.toString();
1:2ffcfb9:     }
1:2ffcfb9: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	protected static Map<String, Parameter> parseTypedParameters(String clause) {
1:     	Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		Matcher matcher = Patterns.TYPED_PARAMETER.matcher(clause);
1: 		while (matcher.find()) {
1:         	if (":=".equals(matcher.group(2))) {
1:         		// This is a directive.
1:         		parameters.put(matcher.group(1), DirectiveFactory.createDirective(matcher.group(1), removeQuotes(matcher.group(3))));
1:         	}
1:         	else if (":".equals(matcher.group(5))) {
1:         		// This is a typed attribute with a declared version.
1:         		parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), removeQuotes(matcher.group(7)), matcher.group(6)));
1:         	}
1:         	else {
1:         		// This is a typed attribute without a declared version.
1:         		parameters.put(matcher.group(4), new TypedAttribute(matcher.group(4), removeQuotes(matcher.group(7)), "String"));
1:         	}
1:         }
1: 		return parameters;
1:     }
1: 	
1: 	protected static String removeQuotes(String value) {
1: 		if (value == null)
1: 			return null;
1: 		if (value.startsWith("\"") && value.endsWith("\""))
1: 			return value.substring(1, value.length() - 1);
1: 		return value;
1: 	}
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.VersionRange;
1: 
1: public abstract class AbstractClause implements Clause {
1: 	protected static Collection<Parameter> generateDefaultParameters(Parameter... parameters) {
1: 		if (parameters == null || parameters.length == 0) {
1: 			return Collections.emptyList();
1: 		}
1: 		Collection<Parameter> defaults = new ArrayList<Parameter>(parameters.length);
1: 		for (Parameter parameter : parameters) {
1: 			defaults.add(parameter);
1: 		}
1: 		return defaults;
1: 	}
1: 	
1: 	protected static Map<String, Parameter> parseParameters(String clause, boolean replaceVersionWithVersionRange) {
1:     	Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		Matcher matcher = Patterns.PARAMETER.matcher(clause);
1: 		while (matcher.find()) {
1:             Parameter parameter = ParameterFactory.create(matcher.group());
1:             if (replaceVersionWithVersionRange && (parameter instanceof VersionAttribute)) {
1:                 parameter = new VersionRangeAttribute(new VersionRange(String.valueOf(parameter.getValue())));
1:             }
1:             parameters.put(parameter.getName(), parameter);
1:         }
1: 		return parameters;
1:     }
1:     
1:     protected static String parsePath(String clause, Pattern pattern, boolean replaceAllWhitespace) {
1:     	Matcher matcher = pattern.matcher(clause);
1:         if (!matcher.find())
1:             throw new IllegalArgumentException("Invalid path: " + clause);
1:         String path = matcher.group();
1:         if (replaceAllWhitespace) {
1:         	path = path.replaceAll("\\s", "");
1:         }
1:         return path;
1:     }
1: 	
1: 	protected final Map<String, Parameter> parameters;
1: 	protected final String path;
1:     
1:     public AbstractClause(String path, Map<String, Parameter> parameters, Collection<Parameter> defaultParameters) {
1:     	if (path == null) {
1:     		throw new NullPointerException();
1:     	}
1:     	for (Parameter parameter : defaultParameters) {
1:         	String name = parameter.getName();
1:         	if (parameters.containsKey(name)) {
1:         		continue;
1:         	}
1:         	parameters.put(name, parameter);
1:     	}
1:     	this.path = path;
1:     	this.parameters = Collections.synchronizedMap(parameters);
1:     }
1: 
1:     @Override
1:     public Attribute getAttribute(String name) {
1:         Parameter result = parameters.get(name);
1:         if (result instanceof Attribute) {
1:             return (Attribute) result;
1:         }
1:         return null;
1:     }
1: 
1:     @Override
1:     public Collection<Attribute> getAttributes() {
1:         ArrayList<Attribute> attributes = new ArrayList<Attribute>(
1:                 parameters.size());
1:         for (Parameter parameter : parameters.values()) {
1:             if (parameter instanceof Attribute) {
1:                 attributes.add((Attribute) parameter);
1:             }
1:         }
1:         attributes.trimToSize();
1:         return attributes;
1:     }
1: 
1:     @Override
1:     public Directive getDirective(String name) {
1:         Parameter result = parameters.get(name);
1:         if (result instanceof Directive) {
1:             return (Directive) result;
1:         }
1:         return null;
1:     }
1: 
1:     @Override
1:     public Collection<Directive> getDirectives() {
1:         ArrayList<Directive> directives = new ArrayList<Directive>(
1:                 parameters.size());
1:         for (Parameter parameter : parameters.values()) {
1:             if (parameter instanceof Directive) {
1:                 directives.add((Directive) parameter);
1:             }
1:         }
1:         directives.trimToSize();
1:         return directives;
1:     }
1: 
1:     @Override
1:     public Parameter getParameter(String name) {
1:         return parameters.get(name);
1:     }
1: 
1:     @Override
1:     public Collection<Parameter> getParameters() {
1:         return Collections.unmodifiableCollection(parameters.values());
1:     }
1: 
1:     @Override
1:     public String getPath() {
1:         return path;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         int result = 17;
1:         result = 31 * result + path.hashCode();
1:         result = 31 * result + parameters.hashCode();
1:         return result;
1:     }
1:     
1:     @Override
1:     public boolean equals(Object o) {
1:     	if (o == this) {
1:     		return true;
1:     	}
1:     	if (!(o instanceof AbstractClause)) {
1:     		return false;
1:     	}
1:     	AbstractClause that = (AbstractClause)o;
1:     	return that.path.equals(this.path)
1:     			&& that.parameters.equals(this.parameters);
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         StringBuilder builder = new StringBuilder().append(getPath());
1:         for (Parameter parameter : getParameters()) {
1:             builder.append(';').append(parameter);
1:         }
1:         return builder.toString();
1:     }
1: }
============================================================================