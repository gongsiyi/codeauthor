1:9f94bb4: /*
1:9f94bb4:  * Licensed under the Apache License, Version 2.0 (the "License");
1:9f94bb4:  * you may not use this file except in compliance with the License.
1:9f94bb4:  * You may obtain a copy of the License at
1:9f94bb4:  *
1:9f94bb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f94bb4:  *
1:9f94bb4:  * Unless required by applicable law or agreed to in writing, software
1:9f94bb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f94bb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f94bb4:  * See the License for the specific language governing permissions and
1:9f94bb4:  * limitations under the License.
1:9f94bb4:  */
1:9f94bb4: package org.apache.aries.subsystem.itests;
2:9f94bb4: 
1:9f94bb4: import java.io.IOException;
1:9f94bb4: import java.util.HashMap;
1:9f94bb4: import java.util.Map;
1:9f94bb4: 
1:9f94bb4: import org.junit.Test;
1:9f94bb4: import org.osgi.framework.Bundle;
1:9f94bb4: import org.osgi.service.subsystem.Subsystem;
1:9f94bb4: import org.osgi.service.subsystem.SubsystemConstants;
1:9f94bb4: 
1:9f94bb4: public class SharedResourceTest extends SubsystemTest {
1:9f94bb4: 	/*
1:9f94bb4: 	 * Subsystem-SymbolicName: application.a.esa
1:9f94bb4: 	 * Subsystem-Content: bundle.a.jar
1:9f94bb4: 	 */
1:9f94bb4: 	private static final String APPLICATION_A = "application.a.esa";
1:9f94bb4: 	/*
1:9f94bb4: 	 * Subsystem-SymbolicName: application.b.esa
1:9f94bb4: 	 * Subsystem-Content: bundle.b.jar
1:9f94bb4: 	 */
1:9f94bb4: 	private static final String APPLICATION_B = "application.b.esa";
1:9f94bb4: 	/*
1:9f94bb4: 	 * Bundle-SymbolicName: bundle.a.jar
1:9f94bb4: 	 * Import-Package: x
1:9f94bb4: 	 */
1:9f94bb4: 	private static final String BUNDLE_A = "bundle.a.jar";
1:9f94bb4: 	/*
1:9f94bb4: 	 * Bundle-SymbolicName: bundle.b.jar
1:9f94bb4: 	 * Import-Package: x
1:9f94bb4: 	 */
1:9f94bb4: 	private static final String BUNDLE_B = "bundle.b.jar";
1:9f94bb4: 	/*
1:9f94bb4: 	 * Bundle-SymbolicName: bundle.c.jar
1:9f94bb4: 	 * Export-Package: x
1:9f94bb4: 	 */
1:9f94bb4: 	private static final String BUNDLE_C = "bundle.c.jar";
1:9f94bb4: 
1:9f94bb4: 	
1:9f94bb4: 	private static void createApplicationA() throws IOException {
1:9f94bb4: 		createApplicationAManifest();
1:9f94bb4: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1:9f94bb4: 	}
1:9f94bb4: 	
1:9f94bb4: 	private static void createApplicationAManifest() throws IOException {
1:9f94bb4: 		Map<String, String> attributes = new HashMap<String, String>();
1:9f94bb4: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:9f94bb4: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:9f94bb4: 		createManifest(APPLICATION_A + ".mf", attributes);
1:9f94bb4: 	}
1:9f94bb4: 	
1:9f94bb4: 	private static void createApplicationB() throws IOException {
1:9f94bb4: 		createApplicationBManifest();
1:9f94bb4: 		createSubsystem(APPLICATION_B, BUNDLE_B);
1:9f94bb4: 	}
1:9f94bb4: 	
1:9f94bb4: 	private static void createApplicationBManifest() throws IOException {
1:9f94bb4: 		Map<String, String> attributes = new HashMap<String, String>();
1:9f94bb4: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:9f94bb4: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B);
1:9f94bb4: 		createManifest(APPLICATION_B + ".mf", attributes);
1:9f94bb4: 	}
1:9f94bb4: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), importPackage("x"));
1:9f94bb4: 	}
1:9f94bb4: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B), importPackage("x"));
1:9f94bb4: 	}
1:9f94bb4: 	
1:57b6627: 	private void createBundleC() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_C), exportPackage("x"));
1:9f94bb4: 	}
1:9f94bb4: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:9f94bb4: 		createBundleA();
1:9f94bb4: 		createBundleB();
1:9f94bb4: 		createBundleC();
1:9f94bb4: 		createApplicationA();
1:9f94bb4: 		createApplicationB();
1:9f94bb4: 	}
1:9f94bb4: 	
1:9f94bb4: 	public void setUp() throws Exception {
1:9f94bb4: 		super.setUp();
1:9f94bb4: 		registerRepositoryService(BUNDLE_C);
1:9f94bb4: 	}
1:9f94bb4: 	
1:9f94bb4: 	@Test
1:9f94bb4: 	public void testSharedBundleNotUninstalledWhileStillReferenced() throws Exception {
1:9f94bb4: 		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1:9f94bb4: 		try {
1:9f94bb4: 			startSubsystem(applicationA);
1:9f94bb4: 			Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1:9f94bb4: 			try {
1:9f94bb4: 				startSubsystem(applicationB);
1:9f94bb4: 				stopSubsystem(applicationA);
1:9f94bb4: 				uninstallSubsystem(applicationA);
1:9f94bb4: 				assertBundleState(Bundle.ACTIVE, BUNDLE_C, getRootSubsystem());
1:9f94bb4: 			}
1:9f94bb4: 			finally {
1:9f94bb4: 				stopAndUninstallSubsystemSilently(applicationB);
1:9f94bb4: 			}
1:9f94bb4: 		}
1:9f94bb4: 		finally {
1:9f94bb4: 			stopAndUninstallSubsystemSilently(applicationA);
1:9f94bb4: 		}
1:9f94bb4: 	}
1:9f94bb4: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), importPackage("x"));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), importPackage("x"));
1: 	private void createBundleC() throws IOException {
1: 		createBundle(name(BUNDLE_C), exportPackage("x"));
1: 	@Override
1: 	public void createApplications() throws Exception {
author:John Ross
-------------------------------------------------------------------------------
commit:9f94bb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
0: import aQute.lib.osgi.Constants;
1: 
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
1: public class SharedResourceTest extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: application.b.esa
1: 	 * Subsystem-Content: bundle.b.jar
1: 	 */
1: 	private static final String APPLICATION_B = "application.b.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Import-Package: x
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Import-Package: x
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.c.jar
1: 	 * Export-Package: x
1: 	 */
1: 	private static final String BUNDLE_C = "bundle.c.jar";
1: 
1: 	
1: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
1: 	private static void createApplicationB() throws IOException {
1: 		createApplicationBManifest();
1: 		createSubsystem(APPLICATION_B, BUNDLE_B);
1: 	}
1: 	
1: 	private static void createApplicationBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B);
1: 		createManifest(APPLICATION_B + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_A, headers);
1: 	}
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_B, headers);
1: 	}
1: 	
0: 	private static void createBundleC() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.EXPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_C, headers);
1: 	}
1: 	
0: 	private static boolean createdTestFiles;
0: 	@Before
0: 	public static void createTestFiles() throws Exception {
0: 		if (createdTestFiles)
0: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createBundleC();
1: 		createApplicationA();
1: 		createApplicationB();
0: 		createdTestFiles = true;
1: 	}
1: 	
1: 	public void setUp() throws Exception {
1: 		super.setUp();
1: 		registerRepositoryService(BUNDLE_C);
1: 	}
1: 	
1: 	@Test
1: 	public void testSharedBundleNotUninstalledWhileStillReferenced() throws Exception {
1: 		Subsystem applicationA = installSubsystemFromFile(APPLICATION_A);
1: 		try {
1: 			startSubsystem(applicationA);
1: 			Subsystem applicationB = installSubsystemFromFile(APPLICATION_B);
1: 			try {
1: 				startSubsystem(applicationB);
1: 				stopSubsystem(applicationA);
1: 				uninstallSubsystem(applicationA);
1: 				assertBundleState(Bundle.ACTIVE, BUNDLE_C, getRootSubsystem());
1: 			}
1: 			finally {
1: 				stopAndUninstallSubsystemSilently(applicationB);
1: 			}
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(applicationA);
1: 		}
1: 	}
1: }
============================================================================