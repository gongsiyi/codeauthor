1:f13c6ac: /*
1:f13c6ac:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:f13c6ac:  *
1:f13c6ac:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f13c6ac:  * you may not use this file except in compliance with the License.
1:f13c6ac:  * You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:f13c6ac: package org.osgi.service.blueprint.reflect;
1:f13c6ac: 
1:f13c6ac: import java.util.Collection;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Metadata for a reference to an OSGi service. This is the base type for
1:f13c6ac:  * {@link ReferenceListMetadata} and {@link ReferenceMetadata}.
1:f13c6ac:  * 
1:f13c6ac:  * @ThreadSafe
1:f13c6ac:  * @version $Revision$
1:f13c6ac:  */
1:f13c6ac: public interface ServiceReferenceMetadata extends ComponentMetadata {
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * A matching service is required at all times.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @see #getAvailability()
1:f13c6ac: 	 */
1:f13c6ac: 	static final int	AVAILABILITY_MANDATORY	= 1;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * A matching service is not required to be present.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @see #getAvailability()
1:f13c6ac: 	 */
1:f13c6ac: 	static final int	AVAILABILITY_OPTIONAL	= 2;
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return whether or not a matching service is required at all times.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified in the <code>availability</code> attribute of the
1:f13c6ac: 	 * service reference.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return Whether or not a matching service is required at all times.
1:f13c6ac: 	 * @see #AVAILABILITY_MANDATORY
1:f13c6ac: 	 * @see #AVAILABILITY_OPTIONAL
1:f13c6ac: 	 */
1:f13c6ac: 	int getAvailability();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the name of the interface type that a matching service must
1:f13c6ac: 	 * support.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified in the <code>interface</code> attribute of the service
1:f13c6ac: 	 * reference.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The name of the interface type that a matching service must
1:f13c6ac: 	 *         support or <code>null</code> when no interface name is specified.
1:f13c6ac: 	 */
1:f13c6ac: 	String getInterface();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the value of the <code>component-name</code> attribute of the
1:f13c6ac: 	 * service reference. This specifies the id of a component that is
1:f13c6ac: 	 * registered in the service registry. This will create an automatic filter,
1:f13c6ac: 	 * appended with the filter if set, to select this component based on its
1:f13c6ac: 	 * automatic <code>id</code> attribute.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The value of the <code>component-name</code> attribute of the
1:f13c6ac: 	 *         service reference or <code>null</code> if the attribute is not
1:f13c6ac: 	 *         specified.
1:f13c6ac: 	 */
1:f13c6ac: 	String getComponentName();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the filter expression that a matching service must match.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>filter</code> attribute of the service
1:f13c6ac: 	 * reference.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return The filter expression that a matching service must match or
1:f13c6ac: 	 *         <code>null</code> if a filter is not specified.
1:f13c6ac: 	 */
1:f13c6ac: 	String getFilter();
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Return the reference listeners to receive bind and unbind events.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * This is specified by the <code>reference-listener</code> elements of the
1:f13c6ac: 	 * service reference.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @return An immutable Collection of {@link ReferenceListener} objects to
1:f13c6ac: 	 *         receive bind and unbind events. The Collection is empty if no
1:f13c6ac: 	 *         reference listeners are specified for the service reference.
1:f13c6ac: 	 */
1:f13c6ac: 	Collection<ReferenceListener> getReferenceListeners();
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.blueprint.reflect;
1: 
1: import java.util.Collection;
1: 
1: /**
1:  * Metadata for a reference to an OSGi service. This is the base type for
1:  * {@link ReferenceListMetadata} and {@link ReferenceMetadata}.
1:  * 
1:  * @ThreadSafe
1:  * @version $Revision$
1:  */
1: public interface ServiceReferenceMetadata extends ComponentMetadata {
1: 
1: 	/**
1: 	 * A matching service is required at all times.
1: 	 * 
1: 	 * @see #getAvailability()
1: 	 */
1: 	static final int	AVAILABILITY_MANDATORY	= 1;
1: 
1: 	/**
1: 	 * A matching service is not required to be present.
1: 	 * 
1: 	 * @see #getAvailability()
1: 	 */
1: 	static final int	AVAILABILITY_OPTIONAL	= 2;
1: 
1: 	/**
1: 	 * Return whether or not a matching service is required at all times.
1: 	 * 
1: 	 * This is specified in the <code>availability</code> attribute of the
1: 	 * service reference.
1: 	 * 
1: 	 * @return Whether or not a matching service is required at all times.
1: 	 * @see #AVAILABILITY_MANDATORY
1: 	 * @see #AVAILABILITY_OPTIONAL
1: 	 */
1: 	int getAvailability();
1: 
1: 	/**
1: 	 * Return the name of the interface type that a matching service must
1: 	 * support.
1: 	 * 
1: 	 * This is specified in the <code>interface</code> attribute of the service
1: 	 * reference.
1: 	 * 
1: 	 * @return The name of the interface type that a matching service must
1: 	 *         support or <code>null</code> when no interface name is specified.
1: 	 */
1: 	String getInterface();
1: 
1: 	/**
1: 	 * Return the value of the <code>component-name</code> attribute of the
1: 	 * service reference. This specifies the id of a component that is
1: 	 * registered in the service registry. This will create an automatic filter,
1: 	 * appended with the filter if set, to select this component based on its
1: 	 * automatic <code>id</code> attribute.
1: 	 * 
1: 	 * @return The value of the <code>component-name</code> attribute of the
1: 	 *         service reference or <code>null</code> if the attribute is not
1: 	 *         specified.
1: 	 */
1: 	String getComponentName();
1: 
1: 	/**
1: 	 * Return the filter expression that a matching service must match.
1: 	 * 
1: 	 * This is specified by the <code>filter</code> attribute of the service
1: 	 * reference.
1: 	 * 
1: 	 * @return The filter expression that a matching service must match or
1: 	 *         <code>null</code> if a filter is not specified.
1: 	 */
1: 	String getFilter();
1: 
1: 	/**
1: 	 * Return the reference listeners to receive bind and unbind events.
1: 	 * 
1: 	 * This is specified by the <code>reference-listener</code> elements of the
1: 	 * service reference.
1: 	 * 
1: 	 * @return An immutable Collection of {@link ReferenceListener} objects to
1: 	 *         receive bind and unbind events. The Collection is empty if no
1: 	 *         reference listeners are specified for the service reference.
1: 	 */
1: 	Collection<ReferenceListener> getReferenceListeners();
1: }
============================================================================