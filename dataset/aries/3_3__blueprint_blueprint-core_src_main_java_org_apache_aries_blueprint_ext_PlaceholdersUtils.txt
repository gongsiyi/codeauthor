1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:be8e9c5: package org.apache.aries.blueprint.ext;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:6414875: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1:e2445d0: import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
1:6414875: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.BeanProperty;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ValueMetadata;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Utility for placeholders parsing / validation
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public class PlaceholdersUtils {
1:f13c6ac: 
1:f13c6ac:     public static void validatePlaceholder(MutableBeanMetadata metadata, ComponentDefinitionRegistry registry) {
1:f13c6ac:         String prefix = getPlaceholderProperty(metadata, "placeholderPrefix");
1:f13c6ac:         String suffix = getPlaceholderProperty(metadata, "placeholderSuffix");
1:f13c6ac:         for (String id : registry.getComponentDefinitionNames()) {
1:f13c6ac:             ComponentMetadata component = registry.getComponentDefinition(id);
1:f13c6ac:             if (component instanceof ExtendedBeanMetadata) {
1:f13c6ac:                 ExtendedBeanMetadata bean = (ExtendedBeanMetadata) component;
1:f13c6ac:                 if (bean.getRuntimeClass() != null && AbstractPropertyPlaceholder.class.isAssignableFrom(bean.getRuntimeClass())) {
1:f13c6ac:                     String otherPrefix = getPlaceholderProperty(bean, "placeholderPrefix");
1:f13c6ac:                     String otherSuffix = getPlaceholderProperty(bean, "placeholderSuffix");
1:f13c6ac:                     if (prefix.equals(otherPrefix) && suffix.equals(otherSuffix)) {
1:f13c6ac:                         throw new ComponentDefinitionException("Multiple placeholders with the same prefix and suffix are not allowed");
1:f13c6ac:                     }
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     private static String getPlaceholderProperty(BeanMetadata bean, String name) {
1:f13c6ac:         for (BeanProperty property : bean.getProperties()) {
1:f13c6ac:             if (name.equals(property.getName())) {
1:f13c6ac:                 ValueMetadata value = (ValueMetadata) property.getValue();
1:f13c6ac:                 return value.getStringValue();
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         return null;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:be8e9c5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.ext;
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.ext;
1: 
0: import org.apache.geronimo.blueprint.ComponentDefinitionRegistry;
0: import org.apache.geronimo.blueprint.ExtendedBeanMetadata;
0: import org.apache.geronimo.blueprint.mutable.MutableBeanMetadata;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.BeanProperty;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.ValueMetadata;
1: 
1: /**
1:  * Utility for placeholders parsing / validation
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 766508 $, $Date: 2009-04-19 22:09:27 +0200 (Sun, 19 Apr 2009) $
1:  */
1: public class PlaceholdersUtils {
1: 
1:     public static void validatePlaceholder(MutableBeanMetadata metadata, ComponentDefinitionRegistry registry) {
1:         String prefix = getPlaceholderProperty(metadata, "placeholderPrefix");
1:         String suffix = getPlaceholderProperty(metadata, "placeholderSuffix");
1:         for (String id : registry.getComponentDefinitionNames()) {
1:             ComponentMetadata component = registry.getComponentDefinition(id);
1:             if (component instanceof ExtendedBeanMetadata) {
1:                 ExtendedBeanMetadata bean = (ExtendedBeanMetadata) component;
1:                 if (bean.getRuntimeClass() != null && AbstractPropertyPlaceholder.class.isAssignableFrom(bean.getRuntimeClass())) {
1:                     String otherPrefix = getPlaceholderProperty(bean, "placeholderPrefix");
1:                     String otherSuffix = getPlaceholderProperty(bean, "placeholderSuffix");
1:                     if (prefix.equals(otherPrefix) && suffix.equals(otherSuffix)) {
1:                         throw new ComponentDefinitionException("Multiple placeholders with the same prefix and suffix are not allowed");
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private static String getPlaceholderProperty(BeanMetadata bean, String name) {
1:         for (BeanProperty property : bean.getProperties()) {
1:             if (name.equals(property.getName())) {
1:                 ValueMetadata value = (ValueMetadata) property.getValue();
1:                 return value.getStringValue();
1:             }
1:         }
1:         return null;
1:     }
1: 
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:e2445d0
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.utils;
1: import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.blueprint.ext;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.blueprint.ExtendedBeanMetadata;
1: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
============================================================================