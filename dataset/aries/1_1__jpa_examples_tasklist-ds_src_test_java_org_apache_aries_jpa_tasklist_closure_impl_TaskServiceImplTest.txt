1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.tasklist.closure.impl;
1:2cfdf52: 
1:2cfdf52: import java.util.HashMap;
1:2cfdf52: import java.util.Map;
1:2cfdf52: 
1:798ba3b: import javax.persistence.EntityManager;
1:2cfdf52: import javax.persistence.EntityManagerFactory;
1:2cfdf52: import javax.persistence.Persistence;
1:2cfdf52: 
1:9483663: import org.apache.aries.jpa.example.tasklist.ds.impl.TaskServiceImpl;
1:2cfdf52: import org.apache.aries.jpa.example.tasklist.model.Task;
1:798ba3b: import org.apache.aries.jpa.supplier.EmSupplier;
1:2cfdf52: import org.apache.aries.jpa.support.impl.ResourceLocalJpaTemplate;
1:2cfdf52: import org.apache.aries.jpa.template.JpaTemplate;
1:2cfdf52: import org.junit.Assert;
1:2cfdf52: import org.junit.Test;
1:2cfdf52: 
1:2cfdf52: public class TaskServiceImplTest {
1:2cfdf52:     @Test
1:2cfdf52:     public void testPersistence() {
1:0d59ccb:         /*
1:2cfdf52:         TaskServiceImpl taskService = new TaskServiceImpl();
1:2cfdf52:         EntityManagerFactory emf = createTestEMF();
1:798ba3b:         EmSupplier emSupplier = createEmSupplier(emf);
1:2cfdf52:         JpaTemplate txManager = new ResourceLocalJpaTemplate(emSupplier);
1:2cfdf52:         taskService.setJpaTemplate(txManager);
1:2cfdf52: 
1:2cfdf52:         Task task = new Task();
1:2cfdf52:         task.setId(1);
1:2cfdf52:         task.setTitle("test");
1:2cfdf52:         taskService.addTask(task);
1:2cfdf52: 
1:2cfdf52:         Task task2 = taskService.getTask(1);
1:2cfdf52:         Assert.assertEquals(task.getTitle(), task2.getTitle());
1:0d59ccb:         */
1:2cfdf52:     }
1:2cfdf52: 
1:798ba3b:     private EmSupplier createEmSupplier(EntityManagerFactory emf) {
1:798ba3b:         final EntityManager em = emf.createEntityManager();
1:798ba3b:         EmSupplier emSupplier = new EmSupplier() {
1:798ba3b:             public void preCall() {
1:798ba3b:             }
1:798ba3b: 
1:798ba3b:             public EntityManager get() {
1:798ba3b:                 return em;
1:798ba3b:             }
1:798ba3b: 
1:798ba3b:             public void postCall() {
1:798ba3b:             }
1:798ba3b:         };
1:798ba3b:         return emSupplier;
1:798ba3b:     }
1:798ba3b: 
1:2cfdf52:     private EntityManagerFactory createTestEMF() {
1:e809e9c:         Map<String, String> properties = new HashMap<String, String>();
1:2cfdf52:         properties.put("javax.persistence.jdbc.driver", "org.apache.derby.jdbc.EmbeddedDriver");
1:2cfdf52:         properties.put("javax.persistence.jdbc.url", "jdbc:derby:target/test;create=true");
1:2cfdf52:         EntityManagerFactory emf = Persistence.createEntityManagerFactory("tasklist", properties);
1:2cfdf52:         return emf;
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
1:         Map<String, String> properties = new HashMap<String, String>();
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:         /*
/////////////////////////////////////////////////////////////////////////
1:         */
commit:798ba3b
/////////////////////////////////////////////////////////////////////////
1: import javax.persistence.EntityManager;
1: import org.apache.aries.jpa.supplier.EmSupplier;
/////////////////////////////////////////////////////////////////////////
1:         EmSupplier emSupplier = createEmSupplier(emf);
/////////////////////////////////////////////////////////////////////////
1:     private EmSupplier createEmSupplier(EntityManagerFactory emf) {
1:         final EntityManager em = emf.createEntityManager();
1:         EmSupplier emSupplier = new EmSupplier() {
1:             public void preCall() {
1:             }
1: 
1:             public EntityManager get() {
1:                 return em;
1:             }
1: 
1:             public void postCall() {
1:             }
1:         };
1:         return emSupplier;
1:     }
1: 
commit:9483663
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jpa.example.tasklist.ds.impl.TaskServiceImpl;
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.tasklist.closure.impl;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.Persistence;
1: 
1: import org.apache.aries.jpa.example.tasklist.model.Task;
0: import org.apache.aries.jpa.support.impl.EMSupplierImpl;
1: import org.apache.aries.jpa.support.impl.ResourceLocalJpaTemplate;
1: import org.apache.aries.jpa.template.JpaTemplate;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: public class TaskServiceImplTest {
1:     @Test
1:     public void testPersistence() {
1:         TaskServiceImpl taskService = new TaskServiceImpl();
1:         EntityManagerFactory emf = createTestEMF();
0:         EMSupplierImpl emSupplier = new EMSupplierImpl(emf);
1:         JpaTemplate txManager = new ResourceLocalJpaTemplate(emSupplier);
1:         taskService.setJpaTemplate(txManager);
1: 
1:         Task task = new Task();
1:         task.setId(1);
1:         task.setTitle("test");
1:         taskService.addTask(task);
1: 
1:         Task task2 = taskService.getTask(1);
1:         Assert.assertEquals(task.getTitle(), task2.getTitle());
1:     }
1: 
1:     private EntityManagerFactory createTestEMF() {
0:         Map<String, String> properties = new HashMap<>();
1:         properties.put("javax.persistence.jdbc.driver", "org.apache.derby.jdbc.EmbeddedDriver");
1:         properties.put("javax.persistence.jdbc.url", "jdbc:derby:target/test;create=true");
1:         EntityManagerFactory emf = Persistence.createEntityManagerFactory("tasklist", properties);
1:         return emf;
1:     }
1: }
============================================================================