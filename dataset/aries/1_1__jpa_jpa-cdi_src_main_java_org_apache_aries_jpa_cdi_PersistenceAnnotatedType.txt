1:5a4dcb4: /*
1:5a4dcb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a4dcb4:  * contributor license agreements.  See the NOTICE file distributed with
1:5a4dcb4:  * this work for additional information regarding copyright ownership.
1:5a4dcb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a4dcb4:  * (the "License"); you may not use this file except in compliance with
1:5a4dcb4:  * the License.  You may obtain a copy of the License at
1:5a4dcb4:  *
1:5a4dcb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a4dcb4:  *
1:5a4dcb4:  * Unless required by applicable law or agreed to in writing, software
1:5a4dcb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a4dcb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a4dcb4:  * See the License for the specific language governing permissions and
1:5a4dcb4:  * limitations under the License.
1:5a4dcb4:  */
1:5a4dcb4: package org.apache.aries.jpa.cdi;
1:5a4dcb4: 
1:5a4dcb4: import javax.enterprise.context.Dependent;
1:5a4dcb4: import javax.enterprise.context.spi.CreationalContext;
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedField;
1:5a4dcb4: import javax.enterprise.inject.spi.AnnotatedType;
1:5a4dcb4: import javax.enterprise.inject.spi.Bean;
1:5a4dcb4: import javax.enterprise.inject.spi.BeanManager;
1:5a4dcb4: import javax.persistence.EntityManager;
1:5a4dcb4: import javax.persistence.EntityManagerFactory;
1:5a4dcb4: import javax.persistence.PersistenceContext;
1:5a4dcb4: import javax.persistence.PersistenceUnit;
1:5a4dcb4: import java.lang.annotation.Annotation;
1:5a4dcb4: import java.util.ArrayList;
1:5a4dcb4: import java.util.Collection;
1:5a4dcb4: import java.util.Collections;
1:5a4dcb4: import java.util.HashSet;
1:5a4dcb4: import java.util.List;
1:5a4dcb4: import java.util.Set;
1:5a4dcb4: 
1:5a4dcb4: import org.apache.aries.jpa.cdi.support.FilterLiteral;
1:5a4dcb4: import org.apache.aries.jpa.cdi.support.ForwardingAnnotatedType;
1:5a4dcb4: import org.apache.aries.jpa.cdi.support.InjectLiteral;
1:5a4dcb4: import org.apache.aries.jpa.cdi.support.ServiceLiteral;
1:5a4dcb4: import org.apache.aries.jpa.cdi.support.SimpleBean;
1:5a4dcb4: import org.apache.aries.jpa.cdi.support.SyntheticAnnotatedField;
1:5a4dcb4: import org.apache.aries.jpa.cdi.support.UniqueIdentifier;
1:5a4dcb4: import org.apache.aries.jpa.cdi.support.UniqueIdentifierLitteral;
1:5a4dcb4: import org.apache.aries.jpa.template.JpaTemplate;
1:5a4dcb4: import org.ops4j.pax.cdi.extension2.api.OsgiExtension;
1:5a4dcb4: 
1:5a4dcb4: import static java.util.Collections.unmodifiableSet;
1:5a4dcb4: 
1:5a4dcb4: public class PersistenceAnnotatedType<T> extends ForwardingAnnotatedType<T> {
1:5a4dcb4: 
1:5a4dcb4:     private final BeanManager manager;
1:5a4dcb4:     private final Set<AnnotatedField<? super T>> fields;
1:5a4dcb4:     private final List<Bean<?>> beans = new ArrayList<>();
1:5a4dcb4: 
1:5a4dcb4:     public PersistenceAnnotatedType(BeanManager manager, AnnotatedType<T> delegate) {
1:5a4dcb4:         super(delegate);
1:5a4dcb4:         this.manager = manager;
1:5a4dcb4:         this.fields = new HashSet<>();
1:5a4dcb4:         for (AnnotatedField<? super T> field : delegate.getFields()) {
1:5a4dcb4:             if (field.isAnnotationPresent(PersistenceContext.class)) {
1:5a4dcb4:                 field = decorateContext(field);
1:5a4dcb4:             } else if (field.isAnnotationPresent(PersistenceUnit.class)) {
1:5a4dcb4:                 field = decorateUnit(field);
1:5a4dcb4:             }
1:5a4dcb4:             this.fields.add(field);
1:5a4dcb4:         }
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     private boolean hasUnitName(PersistenceContext pc) {
1:5a4dcb4:         return !pc.unitName().isEmpty();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     private boolean hasUnitName(PersistenceUnit pu) {
1:5a4dcb4:         return !pu.unitName().isEmpty();
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     private <X> AnnotatedField<X> decorateContext(AnnotatedField<X> field) {
1:5a4dcb4:         final PersistenceContext persistenceContext = field.getAnnotation(PersistenceContext.class);
1:5a4dcb4:         final UniqueIdentifier identifier = UniqueIdentifierLitteral.random();
1:5a4dcb4: 
1:5a4dcb4:         Set<Annotation> templateQualifiers = new HashSet<>();
1:5a4dcb4:         templateQualifiers.add(ServiceLiteral.SERVICE);
1:5a4dcb4:         if (hasUnitName(persistenceContext)) {
1:5a4dcb4:             templateQualifiers.add(new FilterLiteral("(osgi.unit.name=" + persistenceContext.unitName() + ")"));
1:5a4dcb4:         }
1:5a4dcb4:         Bean<JpaTemplate> bean = manager.getExtension(OsgiExtension.class)
1:5a4dcb4:                 .globalDependency(JpaTemplate.class, templateQualifiers);
1:5a4dcb4: 
1:5a4dcb4:         Set<Annotation> qualifiers = new HashSet<>();
1:5a4dcb4:         qualifiers.add(identifier);
1:5a4dcb4:         Bean<EntityManager> b = new SimpleBean<>(EntityManager.class, Dependent.class, Collections.singleton(EntityManager.class), qualifiers, () -> {
1:5a4dcb4:             CreationalContext<JpaTemplate> context = manager.createCreationalContext(bean);
1:5a4dcb4:             JpaTemplate template = (JpaTemplate) manager.getReference(bean, JpaTemplate.class, context);
1:5a4dcb4:             return EntityManagerProducer.create(template);
1:5a4dcb4:         });
1:5a4dcb4:         beans.add(b);
1:5a4dcb4: 
1:5a4dcb4:         Set<Annotation> fieldAnnotations = new HashSet<>();
1:5a4dcb4:         fieldAnnotations.add(InjectLiteral.INJECT);
1:5a4dcb4:         fieldAnnotations.add(identifier);
1:5a4dcb4:         return new SyntheticAnnotatedField<>(field, fieldAnnotations);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     private <X> AnnotatedField<X> decorateUnit(AnnotatedField<X> field) {
1:5a4dcb4:         final PersistenceUnit persistenceUnit = field.getAnnotation(PersistenceUnit.class);
1:5a4dcb4:         final UniqueIdentifier identifier = UniqueIdentifierLitteral.random();
1:5a4dcb4: 
1:5a4dcb4:         Set<Annotation> templateQualifiers = new HashSet<>();
1:5a4dcb4:         templateQualifiers.add(ServiceLiteral.SERVICE);
1:5a4dcb4:         if (hasUnitName(persistenceUnit)) {
1:5a4dcb4:             templateQualifiers.add(new FilterLiteral("(osgi.unit.name=" + persistenceUnit.unitName() + ")"));
1:5a4dcb4:         }
1:5a4dcb4:         Bean<EntityManagerFactory> bean = manager.getExtension(OsgiExtension.class)
1:5a4dcb4:                 .globalDependency(EntityManagerFactory.class, templateQualifiers);
1:5a4dcb4: 
1:5a4dcb4:         Set<Annotation> qualifiers = new HashSet<>();
1:5a4dcb4:         qualifiers.add(identifier);
1:5a4dcb4:         Bean<EntityManagerFactory> b = new SimpleBean<>(EntityManagerFactory.class, Dependent.class, Collections.singleton(EntityManagerFactory.class), qualifiers, () -> {
1:5a4dcb4:             CreationalContext<EntityManagerFactory> context = manager.createCreationalContext(bean);
1:5a4dcb4:             return (EntityManagerFactory) manager.getReference(bean, EntityManagerFactory.class, context);
1:5a4dcb4:         });
1:5a4dcb4:         beans.add(b);
1:5a4dcb4: 
1:5a4dcb4:         Set<Annotation> fieldAnnotations = new HashSet<>();
1:5a4dcb4:         fieldAnnotations.add(InjectLiteral.INJECT);
1:5a4dcb4:         fieldAnnotations.add(identifier);
1:5a4dcb4:         return new SyntheticAnnotatedField<>(field, fieldAnnotations);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     @Override
1:5a4dcb4:     public Set<AnnotatedField<? super T>> getFields() {
1:5a4dcb4:         return unmodifiableSet(fields);
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4:     public Collection<? extends Bean<?>> getProducers() {
1:5a4dcb4:         return beans;
1:5a4dcb4:     }
1:5a4dcb4: 
1:5a4dcb4: 
1:5a4dcb4: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5a4dcb4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.jpa.cdi;
1: 
1: import javax.enterprise.context.Dependent;
1: import javax.enterprise.context.spi.CreationalContext;
1: import javax.enterprise.inject.spi.AnnotatedField;
1: import javax.enterprise.inject.spi.AnnotatedType;
1: import javax.enterprise.inject.spi.Bean;
1: import javax.enterprise.inject.spi.BeanManager;
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.PersistenceContext;
1: import javax.persistence.PersistenceUnit;
1: import java.lang.annotation.Annotation;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.jpa.cdi.support.FilterLiteral;
1: import org.apache.aries.jpa.cdi.support.ForwardingAnnotatedType;
1: import org.apache.aries.jpa.cdi.support.InjectLiteral;
1: import org.apache.aries.jpa.cdi.support.ServiceLiteral;
1: import org.apache.aries.jpa.cdi.support.SimpleBean;
1: import org.apache.aries.jpa.cdi.support.SyntheticAnnotatedField;
1: import org.apache.aries.jpa.cdi.support.UniqueIdentifier;
1: import org.apache.aries.jpa.cdi.support.UniqueIdentifierLitteral;
1: import org.apache.aries.jpa.template.JpaTemplate;
1: import org.ops4j.pax.cdi.extension2.api.OsgiExtension;
1: 
1: import static java.util.Collections.unmodifiableSet;
1: 
1: public class PersistenceAnnotatedType<T> extends ForwardingAnnotatedType<T> {
1: 
1:     private final BeanManager manager;
1:     private final Set<AnnotatedField<? super T>> fields;
1:     private final List<Bean<?>> beans = new ArrayList<>();
1: 
1:     public PersistenceAnnotatedType(BeanManager manager, AnnotatedType<T> delegate) {
1:         super(delegate);
1:         this.manager = manager;
1:         this.fields = new HashSet<>();
1:         for (AnnotatedField<? super T> field : delegate.getFields()) {
1:             if (field.isAnnotationPresent(PersistenceContext.class)) {
1:                 field = decorateContext(field);
1:             } else if (field.isAnnotationPresent(PersistenceUnit.class)) {
1:                 field = decorateUnit(field);
1:             }
1:             this.fields.add(field);
1:         }
1:     }
1: 
1:     private boolean hasUnitName(PersistenceContext pc) {
1:         return !pc.unitName().isEmpty();
1:     }
1: 
1:     private boolean hasUnitName(PersistenceUnit pu) {
1:         return !pu.unitName().isEmpty();
1:     }
1: 
1:     private <X> AnnotatedField<X> decorateContext(AnnotatedField<X> field) {
1:         final PersistenceContext persistenceContext = field.getAnnotation(PersistenceContext.class);
1:         final UniqueIdentifier identifier = UniqueIdentifierLitteral.random();
1: 
1:         Set<Annotation> templateQualifiers = new HashSet<>();
1:         templateQualifiers.add(ServiceLiteral.SERVICE);
1:         if (hasUnitName(persistenceContext)) {
1:             templateQualifiers.add(new FilterLiteral("(osgi.unit.name=" + persistenceContext.unitName() + ")"));
1:         }
1:         Bean<JpaTemplate> bean = manager.getExtension(OsgiExtension.class)
1:                 .globalDependency(JpaTemplate.class, templateQualifiers);
1: 
1:         Set<Annotation> qualifiers = new HashSet<>();
1:         qualifiers.add(identifier);
1:         Bean<EntityManager> b = new SimpleBean<>(EntityManager.class, Dependent.class, Collections.singleton(EntityManager.class), qualifiers, () -> {
1:             CreationalContext<JpaTemplate> context = manager.createCreationalContext(bean);
1:             JpaTemplate template = (JpaTemplate) manager.getReference(bean, JpaTemplate.class, context);
1:             return EntityManagerProducer.create(template);
1:         });
1:         beans.add(b);
1: 
1:         Set<Annotation> fieldAnnotations = new HashSet<>();
1:         fieldAnnotations.add(InjectLiteral.INJECT);
1:         fieldAnnotations.add(identifier);
1:         return new SyntheticAnnotatedField<>(field, fieldAnnotations);
1:     }
1: 
1:     private <X> AnnotatedField<X> decorateUnit(AnnotatedField<X> field) {
1:         final PersistenceUnit persistenceUnit = field.getAnnotation(PersistenceUnit.class);
1:         final UniqueIdentifier identifier = UniqueIdentifierLitteral.random();
1: 
1:         Set<Annotation> templateQualifiers = new HashSet<>();
1:         templateQualifiers.add(ServiceLiteral.SERVICE);
1:         if (hasUnitName(persistenceUnit)) {
1:             templateQualifiers.add(new FilterLiteral("(osgi.unit.name=" + persistenceUnit.unitName() + ")"));
1:         }
1:         Bean<EntityManagerFactory> bean = manager.getExtension(OsgiExtension.class)
1:                 .globalDependency(EntityManagerFactory.class, templateQualifiers);
1: 
1:         Set<Annotation> qualifiers = new HashSet<>();
1:         qualifiers.add(identifier);
1:         Bean<EntityManagerFactory> b = new SimpleBean<>(EntityManagerFactory.class, Dependent.class, Collections.singleton(EntityManagerFactory.class), qualifiers, () -> {
1:             CreationalContext<EntityManagerFactory> context = manager.createCreationalContext(bean);
1:             return (EntityManagerFactory) manager.getReference(bean, EntityManagerFactory.class, context);
1:         });
1:         beans.add(b);
1: 
1:         Set<Annotation> fieldAnnotations = new HashSet<>();
1:         fieldAnnotations.add(InjectLiteral.INJECT);
1:         fieldAnnotations.add(identifier);
1:         return new SyntheticAnnotatedField<>(field, fieldAnnotations);
1:     }
1: 
1:     @Override
1:     public Set<AnnotatedField<? super T>> getFields() {
1:         return unmodifiableSet(fields);
1:     }
1: 
1:     public Collection<? extends Bean<?>> getProducers() {
1:         return beans;
1:     }
1: 
1: 
1: }
============================================================================