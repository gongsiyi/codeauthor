1:445abc4: /*
1:445abc4:  * Licensed to the Apache Software Foundation (ASF) under one
1:445abc4:  * or more contributor license agreements.  See the NOTICE file
1:445abc4:  * distributed with this work for additional information
1:445abc4:  * regarding copyright ownership.  The ASF licenses this file
1:445abc4:  * to you under the Apache License, Version 2.0 (the
1:445abc4:  * "License"); you may not use this file except in compliance
1:445abc4:  * with the License.  You may obtain a copy of the License at
1:445abc4:  *
1:445abc4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:445abc4:  *
1:445abc4:  * Unless required by applicable law or agreed to in writing,
1:445abc4:  * software distributed under the License is distributed on an
1:445abc4:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:445abc4:  * KIND, either express or implied.  See the License for the
1:445abc4:  * specific language governing permissions and limitations
1:445abc4:  * under the License.
1:445abc4:  */
1:445abc4: package org.apache.aries.subsystem.itests.defect;
1:445abc4: 
1:445abc4: import static org.junit.Assert.fail;
1:445abc4: 
1:445abc4: import java.io.IOException;
1:445abc4: import java.io.InputStream;
1:445abc4: 
1:445abc4: import org.apache.aries.subsystem.itests.SubsystemTest;
1:445abc4: import org.apache.aries.subsystem.itests.util.BundleArchiveBuilder;
1:445abc4: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1:445abc4: import org.apache.aries.subsystem.itests.util.TestCapability;
1:445abc4: import org.apache.aries.subsystem.itests.util.TestRepository;
1:445abc4: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1:445abc4: import org.apache.aries.subsystem.itests.util.TestRequirement;
1:445abc4: import org.junit.Test;
1:445abc4: import org.osgi.framework.Constants;
1:445abc4: import org.osgi.framework.FrameworkListener;
1:445abc4: import org.osgi.framework.Version;
1:445abc4: import org.osgi.framework.namespace.IdentityNamespace;
1:445abc4: import org.osgi.framework.namespace.PackageNamespace;
1:445abc4: import org.osgi.namespace.service.ServiceNamespace;
1:445abc4: import org.osgi.service.repository.Repository;
1:445abc4: import org.osgi.service.subsystem.Subsystem;
1:445abc4: import org.osgi.service.subsystem.SubsystemConstants;
1:445abc4: import org.osgi.service.subsystem.SubsystemException;
1:445abc4: 
1:445abc4: public class Aries1445Test extends SubsystemTest {
1:445abc4: 	@Test
1:445abc4: 	public void testFeatureFeature() throws Exception {
1:445abc4: 		test(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:445abc4: 	}
1:445abc4: 	
1:445abc4: 	@Test
1:445abc4: 	public void testApplicationApplication() throws Exception {
1:445abc4: 		test(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:445abc4: 	}
1:445abc4: 	
1:445abc4: 	@Test
1:445abc4: 	public void testCompositeComposite() throws Exception {
1:445abc4: 		test(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:445abc4: 	}
1:445abc4: 	
1:445abc4: 	@Test
1:445abc4: 	public void testFeatureApplication() throws Exception {
1:445abc4: 		test(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:445abc4: 	}
1:445abc4: 	
1:445abc4: 	@Test
1:445abc4: 	public void testCompositeFeature() throws Exception {
1:445abc4: 		test(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:445abc4: 	}
1:445abc4: 	
1:445abc4:     private void test(String type1, String type2) throws Exception {
1:445abc4: 		serviceRegistrations.add(bundleContext.registerService(
1:445abc4: 				Repository.class,
1:445abc4: 				new TestRepository.Builder()
1:445abc4: 		        		.resource(new TestRepositoryContent.Builder()
1:445abc4: 		                		.capability(new TestCapability.Builder()
1:445abc4: 		                        		.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.IDENTITY_NAMESPACE, 
1:445abc4: 		                        				"b")
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1:445abc4: 		                        				Version.emptyVersion)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,
1:445abc4: 		                        				IdentityNamespace.TYPE_BUNDLE))
1:445abc4: 		                        .capability(new TestCapability.Builder()
1:445abc4: 		                        		.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				PackageNamespace.PACKAGE_NAMESPACE, 
1:445abc4: 		                        				"b.package")
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1:445abc4: 		                        				Version.emptyVersion))
1:445abc4: 		                        .requirement(new TestRequirement.Builder()
1:445abc4: 		                        		.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:445abc4: 		                        		.directive(
1:445abc4: 		                        				PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1:445abc4: 		                        				"(osgi.wiring.package=c.package)"))
1:445abc4: 		                        .requirement(new TestRequirement.Builder()
1:445abc4: 		                        		.namespace(ServiceNamespace.SERVICE_NAMESPACE)
1:445abc4: 		                        		.directive(
1:445abc4: 		                        				ServiceNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
1:445abc4: 		                        				"(objectClass=foo.Bar)")
1:445abc4: 		                        		.directive(
1:445abc4: 		                        				ServiceNamespace.REQUIREMENT_EFFECTIVE_DIRECTIVE, 
1:445abc4: 		                        				ServiceNamespace.EFFECTIVE_ACTIVE))
1:445abc4: 		                        .content(new BundleArchiveBuilder()
1:445abc4: 		                        		.symbolicName("b")
1:445abc4: 		                        		.exportPackage("b.package")
1:445abc4: 		                        		.importPackage("c.package")
1:445abc4: 		                        		.requireCapability("osgi.service;filter:=\"(objectClass=foo.Bar)\";effective:=active")
1:445abc4: 		                        		.buildAsBytes())
1:445abc4: 		                        .build())
1:445abc4: 		                .resource(new TestRepositoryContent.Builder()
1:445abc4: 		                		.capability(new TestCapability.Builder()
1:445abc4: 		                        		.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.IDENTITY_NAMESPACE, 
1:445abc4: 		                        				"c")
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1:445abc4: 		                        				Version.emptyVersion)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,
1:445abc4: 		                        				IdentityNamespace.TYPE_BUNDLE))
1:445abc4: 		                        .capability(new TestCapability.Builder()
1:445abc4: 		                        		.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				PackageNamespace.PACKAGE_NAMESPACE, 
1:445abc4: 		                        				"c.package")
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1:445abc4: 		                        				Version.emptyVersion))
1:445abc4: 		                        .content(new BundleArchiveBuilder()
1:445abc4: 		                        		.symbolicName("c")
1:445abc4: 		                        		.exportPackage("c.package")
1:445abc4: 		                        		.buildAsBytes())
1:445abc4: 		                        .build())
1:445abc4: 		                .resource(new TestRepositoryContent.Builder()
1:445abc4: 		                		.capability(new TestCapability.Builder()
1:445abc4: 		                        		.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.IDENTITY_NAMESPACE, 
1:445abc4: 		                        				"d")
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1:445abc4: 		                        				Version.emptyVersion)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,
1:445abc4: 		                        				IdentityNamespace.TYPE_BUNDLE))
1:445abc4: 		                        .capability(new TestCapability.Builder()
1:445abc4: 		                        		.namespace(ServiceNamespace.SERVICE_NAMESPACE)
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				Constants.OBJECTCLASS, 
1:445abc4: 		                        				"foo.Bar")
1:445abc4: 		                        		.attribute(
1:445abc4: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1:445abc4: 		                        				Version.emptyVersion)
1:445abc4: 		                        		.directive(
1:445abc4: 		                        				ServiceNamespace.CAPABILITY_EFFECTIVE_DIRECTIVE, 
1:445abc4: 		                        				ServiceNamespace.EFFECTIVE_ACTIVE))
1:445abc4: 		                        .content(new BundleArchiveBuilder()
1:445abc4: 		                        		.symbolicName("d")
1:445abc4: 		                        		.provideCapability("osgi.service;objectClass=foo.Bar;effective:=active")
1:445abc4: 		                        		.buildAsBytes())
1:445abc4: 		                        .build())
1:445abc4: 		        		.build(),
1:445abc4:                 null));
1:445abc4: 		Subsystem root = getRootSubsystem();
1:445abc4: 		Subsystem s1 = installSubsystem(
1:445abc4: 				root, 
1:445abc4: 				"s1", 
1:445abc4: 				buildSubsystem(root, "s1", type1));
1:445abc4: 		uninstallableSubsystems.add(s1);
1:445abc4: 		startSubsystem(s1);
1:445abc4: 		stoppableSubsystems.add(s1);
1:445abc4: 		Subsystem s2 = installSubsystem(
1:445abc4: 				root, 
1:445abc4: 				"s2", 
1:445abc4: 				buildSubsystem(root, "s2", type2));
1:445abc4: 		uninstallableSubsystems.add(s2);
1:445abc4: 		stopSubsystem(s1);
1:445abc4: 		stoppableSubsystems.remove(s1);
1:445abc4: 		uninstallSubsystem(s1);
1:445abc4: 		uninstallableSubsystems.remove(s1);
1:445abc4: 		getSystemBundleAsFrameworkWiring().refreshBundles(null, (FrameworkListener)null);
1:445abc4: 		try {
1:445abc4: 			s2.start();
1:445abc4: 			stoppableSubsystems.add(s2);
1:445abc4: 		}
1:445abc4: 		catch (SubsystemException e) {
1:445abc4: 			e.printStackTrace();
1:445abc4: 			fail("Subsystem should have started");
1:445abc4: 		}
1:445abc4: 		// Test the effective:=active service capability and requirement. Bundle
1:445abc4: 		// D should have had a reference count of 2 and not uninstalled as part
1:445abc4: 		// of S1. Because effective:=active does not effect runtime resolution,
1:445abc4: 		// we must ensure it is still a constituent of root.
1:445abc4: 		assertConstituent(root, "d");
1:445abc4:     }
1:445abc4: 	
1:445abc4: 	private InputStream buildSubsystem(Subsystem parent, String symbolicName, String type) throws IOException {
1:445abc4: 		SubsystemArchiveBuilder builder = new SubsystemArchiveBuilder();
1:445abc4: 		builder.symbolicName(symbolicName);
1:445abc4: 		builder.type(type);
1:445abc4: 		if (SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)) {
1:445abc4: 			builder.importPackage("b.package");
1:445abc4: 		}
1:445abc4: 		builder.bundle(
1:445abc4: 				"a", 
1:445abc4: 				new BundleArchiveBuilder()
1:445abc4: 						.symbolicName("a")
1:445abc4: 						.importPackage("b.package")
1:445abc4: 						.build());
1:445abc4: 		return builder.build();
1:445abc4: 	}
1:445abc4: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:445abc4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests.defect;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
1: import org.apache.aries.subsystem.itests.util.BundleArchiveBuilder;
1: import org.apache.aries.subsystem.itests.util.SubsystemArchiveBuilder;
1: import org.apache.aries.subsystem.itests.util.TestCapability;
1: import org.apache.aries.subsystem.itests.util.TestRepository;
1: import org.apache.aries.subsystem.itests.util.TestRepositoryContent;
1: import org.apache.aries.subsystem.itests.util.TestRequirement;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.FrameworkListener;
1: import org.osgi.framework.Version;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.framework.namespace.PackageNamespace;
1: import org.osgi.namespace.service.ServiceNamespace;
1: import org.osgi.service.repository.Repository;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
1: public class Aries1445Test extends SubsystemTest {
1: 	@Test
1: 	public void testFeatureFeature() throws Exception {
1: 		test(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 	}
1: 	
1: 	@Test
1: 	public void testApplicationApplication() throws Exception {
1: 		test(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 	}
1: 	
1: 	@Test
1: 	public void testCompositeComposite() throws Exception {
1: 		test(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 	}
1: 	
1: 	@Test
1: 	public void testFeatureApplication() throws Exception {
1: 		test(SubsystemConstants.SUBSYSTEM_TYPE_FEATURE, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 	}
1: 	
1: 	@Test
1: 	public void testCompositeFeature() throws Exception {
1: 		test(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 	}
1: 	
1:     private void test(String type1, String type2) throws Exception {
1: 		serviceRegistrations.add(bundleContext.registerService(
1: 				Repository.class,
1: 				new TestRepository.Builder()
1: 		        		.resource(new TestRepositoryContent.Builder()
1: 		                		.capability(new TestCapability.Builder()
1: 		                        		.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.IDENTITY_NAMESPACE, 
1: 		                        				"b")
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1: 		                        				Version.emptyVersion)
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,
1: 		                        				IdentityNamespace.TYPE_BUNDLE))
1: 		                        .capability(new TestCapability.Builder()
1: 		                        		.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 		                        		.attribute(
1: 		                        				PackageNamespace.PACKAGE_NAMESPACE, 
1: 		                        				"b.package")
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1: 		                        				Version.emptyVersion))
1: 		                        .requirement(new TestRequirement.Builder()
1: 		                        		.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 		                        		.directive(
1: 		                        				PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
1: 		                        				"(osgi.wiring.package=c.package)"))
1: 		                        .requirement(new TestRequirement.Builder()
1: 		                        		.namespace(ServiceNamespace.SERVICE_NAMESPACE)
1: 		                        		.directive(
1: 		                        				ServiceNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
1: 		                        				"(objectClass=foo.Bar)")
1: 		                        		.directive(
1: 		                        				ServiceNamespace.REQUIREMENT_EFFECTIVE_DIRECTIVE, 
1: 		                        				ServiceNamespace.EFFECTIVE_ACTIVE))
1: 		                        .content(new BundleArchiveBuilder()
1: 		                        		.symbolicName("b")
1: 		                        		.exportPackage("b.package")
1: 		                        		.importPackage("c.package")
1: 		                        		.requireCapability("osgi.service;filter:=\"(objectClass=foo.Bar)\";effective:=active")
1: 		                        		.buildAsBytes())
1: 		                        .build())
1: 		                .resource(new TestRepositoryContent.Builder()
1: 		                		.capability(new TestCapability.Builder()
1: 		                        		.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.IDENTITY_NAMESPACE, 
1: 		                        				"c")
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1: 		                        				Version.emptyVersion)
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,
1: 		                        				IdentityNamespace.TYPE_BUNDLE))
1: 		                        .capability(new TestCapability.Builder()
1: 		                        		.namespace(PackageNamespace.PACKAGE_NAMESPACE)
1: 		                        		.attribute(
1: 		                        				PackageNamespace.PACKAGE_NAMESPACE, 
1: 		                        				"c.package")
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1: 		                        				Version.emptyVersion))
1: 		                        .content(new BundleArchiveBuilder()
1: 		                        		.symbolicName("c")
1: 		                        		.exportPackage("c.package")
1: 		                        		.buildAsBytes())
1: 		                        .build())
1: 		                .resource(new TestRepositoryContent.Builder()
1: 		                		.capability(new TestCapability.Builder()
1: 		                        		.namespace(IdentityNamespace.IDENTITY_NAMESPACE)
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.IDENTITY_NAMESPACE, 
1: 		                        				"d")
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1: 		                        				Version.emptyVersion)
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,
1: 		                        				IdentityNamespace.TYPE_BUNDLE))
1: 		                        .capability(new TestCapability.Builder()
1: 		                        		.namespace(ServiceNamespace.SERVICE_NAMESPACE)
1: 		                        		.attribute(
1: 		                        				Constants.OBJECTCLASS, 
1: 		                        				"foo.Bar")
1: 		                        		.attribute(
1: 		                        				IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE, 
1: 		                        				Version.emptyVersion)
1: 		                        		.directive(
1: 		                        				ServiceNamespace.CAPABILITY_EFFECTIVE_DIRECTIVE, 
1: 		                        				ServiceNamespace.EFFECTIVE_ACTIVE))
1: 		                        .content(new BundleArchiveBuilder()
1: 		                        		.symbolicName("d")
1: 		                        		.provideCapability("osgi.service;objectClass=foo.Bar;effective:=active")
1: 		                        		.buildAsBytes())
1: 		                        .build())
1: 		        		.build(),
1:                 null));
1: 		Subsystem root = getRootSubsystem();
1: 		Subsystem s1 = installSubsystem(
1: 				root, 
1: 				"s1", 
1: 				buildSubsystem(root, "s1", type1));
1: 		uninstallableSubsystems.add(s1);
1: 		startSubsystem(s1);
1: 		stoppableSubsystems.add(s1);
1: 		Subsystem s2 = installSubsystem(
1: 				root, 
1: 				"s2", 
1: 				buildSubsystem(root, "s2", type2));
1: 		uninstallableSubsystems.add(s2);
1: 		stopSubsystem(s1);
1: 		stoppableSubsystems.remove(s1);
1: 		uninstallSubsystem(s1);
1: 		uninstallableSubsystems.remove(s1);
1: 		getSystemBundleAsFrameworkWiring().refreshBundles(null, (FrameworkListener)null);
1: 		try {
1: 			s2.start();
1: 			stoppableSubsystems.add(s2);
1: 		}
1: 		catch (SubsystemException e) {
1: 			e.printStackTrace();
1: 			fail("Subsystem should have started");
1: 		}
1: 		// Test the effective:=active service capability and requirement. Bundle
1: 		// D should have had a reference count of 2 and not uninstalled as part
1: 		// of S1. Because effective:=active does not effect runtime resolution,
1: 		// we must ensure it is still a constituent of root.
1: 		assertConstituent(root, "d");
1:     }
1: 	
1: 	private InputStream buildSubsystem(Subsystem parent, String symbolicName, String type) throws IOException {
1: 		SubsystemArchiveBuilder builder = new SubsystemArchiveBuilder();
1: 		builder.symbolicName(symbolicName);
1: 		builder.type(type);
1: 		if (SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE.equals(type)) {
1: 			builder.importPackage("b.package");
1: 		}
1: 		builder.bundle(
1: 				"a", 
1: 				new BundleArchiveBuilder()
1: 						.symbolicName("a")
1: 						.importPackage("b.package")
1: 						.build());
1: 		return builder.build();
1: 	}
1: }
============================================================================