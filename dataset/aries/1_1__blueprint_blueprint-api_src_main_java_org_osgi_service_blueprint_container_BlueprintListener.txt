1:f13c6ac: /*
1:f13c6ac:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:f13c6ac:  *
1:f13c6ac:  * Licensed under the Apache License, Version 2.0 (the "License");
1:f13c6ac:  * you may not use this file except in compliance with the License.
1:f13c6ac:  * You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  * See the License for the specific language governing permissions and
1:f13c6ac:  * limitations under the License.
1:f13c6ac:  */
1:f13c6ac: package org.osgi.service.blueprint.container;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * A <code>BlueprintEvent</code> Listener.
1:f13c6ac:  * 
1:f13c6ac:  * <p>
1:f13c6ac:  * To receive Blueprint Events, a bundle must register a Blueprint Listener
1:f13c6ac:  * service.
1:f13c6ac:  * 
1:f13c6ac:  * After a Blueprint Listener is registered, the Blueprint extender must
1:f13c6ac:  * synchronously send to this Blueprint Listener the last Blueprint Event for
1:f13c6ac:  * each ready Blueprint bundle managed by this extender. This replay of
1:f13c6ac:  * Blueprint Events is designed so that the new Blueprint Listener can be
1:f13c6ac:  * informed of the state of each Blueprint bundle. Blueprint Events sent during
1:f13c6ac:  * this replay will have the {@link BlueprintEvent#isReplay() isReplay()} flag
1:f13c6ac:  * set. The Blueprint extender must ensure that this replay phase does not
1:f13c6ac:  * interfere with new Blueprint Events so that the chronological order of all
1:f13c6ac:  * Blueprint Events received by the Blueprint Listener is preserved. If the last
1:f13c6ac:  * Blueprint Event for a given Blueprint bundle is
1:f13c6ac:  * {@link BlueprintEvent#DESTROYED DESTROYED}, the extender must not send it
1:f13c6ac:  * during this replay phase.
1:f13c6ac:  * 
1:f13c6ac:  * @see BlueprintEvent
1:f13c6ac:  * @ThreadSafe
1:f13c6ac:  * @version $Revision$
1:f13c6ac:  */
1:f13c6ac: public interface BlueprintListener {
1:f13c6ac: 
1:f13c6ac: 	/**
1:f13c6ac: 	 * Receives notifications of a Blueprint Event.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * Implementers should quickly process the event and return.
1:f13c6ac: 	 * 
1:f13c6ac: 	 * @param event The {@link BlueprintEvent}.
1:f13c6ac: 	 */
1:f13c6ac: 	void blueprintEvent(BlueprintEvent event);
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008, 2009). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.blueprint.container;
1: 
1: /**
1:  * A <code>BlueprintEvent</code> Listener.
1:  * 
1:  * <p>
1:  * To receive Blueprint Events, a bundle must register a Blueprint Listener
1:  * service.
1:  * 
1:  * After a Blueprint Listener is registered, the Blueprint extender must
1:  * synchronously send to this Blueprint Listener the last Blueprint Event for
1:  * each ready Blueprint bundle managed by this extender. This replay of
1:  * Blueprint Events is designed so that the new Blueprint Listener can be
1:  * informed of the state of each Blueprint bundle. Blueprint Events sent during
1:  * this replay will have the {@link BlueprintEvent#isReplay() isReplay()} flag
1:  * set. The Blueprint extender must ensure that this replay phase does not
1:  * interfere with new Blueprint Events so that the chronological order of all
1:  * Blueprint Events received by the Blueprint Listener is preserved. If the last
1:  * Blueprint Event for a given Blueprint bundle is
1:  * {@link BlueprintEvent#DESTROYED DESTROYED}, the extender must not send it
1:  * during this replay phase.
1:  * 
1:  * @see BlueprintEvent
1:  * @ThreadSafe
1:  * @version $Revision$
1:  */
1: public interface BlueprintListener {
1: 
1: 	/**
1: 	 * Receives notifications of a Blueprint Event.
1: 	 * 
1: 	 * Implementers should quickly process the event and return.
1: 	 * 
1: 	 * @param event The {@link BlueprintEvent}.
1: 	 */
1: 	void blueprintEvent(BlueprintEvent event);
1: }
============================================================================