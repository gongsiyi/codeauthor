1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.support.osgi.impl;
1:2cfdf52: 
1:2cfdf52: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1:2cfdf52: 
1:0d59ccb: import java.lang.reflect.Proxy;
1:2cfdf52: import java.util.Dictionary;
1:2cfdf52: import java.util.Hashtable;
1:2cfdf52: 
1:0d59ccb: import javax.persistence.EntityManager;
1:2cfdf52: import javax.persistence.EntityManagerFactory;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.supplier.EmSupplier;
1:2cfdf52: import org.apache.aries.jpa.support.impl.EMSupplierImpl;
1:2cfdf52: import org.apache.aries.jpa.support.impl.ResourceLocalJpaTemplate;
1:2cfdf52: import org.apache.aries.jpa.template.JpaTemplate;
1:2cfdf52: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.ServiceReference;
1:2cfdf52: import org.osgi.framework.ServiceRegistration;
1:798ba3b: import org.osgi.service.coordinator.Coordinator;
1:2cfdf52: import org.osgi.util.tracker.ServiceTracker;
1:aaefd3e: import org.slf4j.Logger;
1:aaefd3e: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: /**
1:465647f:  * Tracks EntityManagerFactory services and publishes a Supplier&lt;EntityManager&gt; for each.
1:2cfdf52:  * IF the persistence unit uses JTA a TMTracker is created. If it uses RESOURCE_LOCAL as 
1:2cfdf52:  * ResourceLocalJpaTemplate is created.
1:2cfdf52:  */
1:2cfdf52: @SuppressWarnings("rawtypes")
1:2cfdf52: public class EMFTracker extends ServiceTracker {
1:ec3ea65:     private static final Logger LOG = LoggerFactory.getLogger(EMFTracker.class);
1:2cfdf52: 
1:798ba3b:     private Coordinator coordinator;
1:798ba3b: 
2:2cfdf52:     @SuppressWarnings("unchecked")
1:798ba3b:     public EMFTracker(BundleContext context, Coordinator coordinator) {
1:2cfdf52:         super(context, EntityManagerFactory.class, null);
1:798ba3b:         this.coordinator = coordinator;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @SuppressWarnings("unchecked")
1:2cfdf52:     @Override
1:2cfdf52:     public Object addingService(ServiceReference reference) {
1:2cfdf52:         String unitName = (String)reference.getProperty(JPA_UNIT_NAME);
1:2cfdf52:         if (unitName == null) {
1:2cfdf52:             return null;
1:2cfdf52:         }
1:365627f:         BundleContext puContext = reference.getBundle().getBundleContext();
1:2cfdf52:         TrackedEmf tracked = new TrackedEmf();
1:365627f:         tracked.emf = (EntityManagerFactory)puContext.getService(reference);
1:0d59ccb:         tracked.emSupplier = new EMSupplierImpl(unitName, tracked.emf, coordinator);
1:365627f:         tracked.emSupplierReg = puContext.registerService(EmSupplier.class, tracked.emSupplier,
1:2cfdf52:                                                          getEmSupplierProps(unitName));
1:2cfdf52: 
1:0d59ccb:         EntityManager emProxy = createProxy(tracked.emSupplier);
1:365627f:         tracked.emProxyReg = puContext.registerService(EntityManager.class, emProxy,
1:0d59ccb:                                                          getEmSupplierProps(unitName));
1:0d59ccb:         
1:2cfdf52:         if (getTransactionType(tracked.emf) == PersistenceUnitTransactionType.RESOURCE_LOCAL) {
1:0d59ccb:             JpaTemplate txManager = new ResourceLocalJpaTemplate(tracked.emSupplier, coordinator);
1:365627f:             tracked.rlTxManagerReg = puContext.registerService(JpaTemplate.class, txManager,
1:2cfdf52:                                                           rlTxManProps(unitName));
2:2cfdf52:         } else {
1:365627f:             tracked.tmTracker = new TMTracker(puContext, tracked.emSupplier, unitName, coordinator);
1:2cfdf52:             tracked.tmTracker.open();
1:2cfdf52:         }
1:2cfdf52:         return tracked;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * 
1:465647f:      * @param emf to get type from
1:2cfdf52:      * @return
1:2cfdf52:      */
1:2cfdf52:     private PersistenceUnitTransactionType getTransactionType(EntityManagerFactory emf) {
1:aaefd3e:         try {
1:aaefd3e:             PersistenceUnitTransactionType transactionType = (PersistenceUnitTransactionType) emf.getProperties().get(PersistenceUnitTransactionType.class.getName());
1:aaefd3e:             if (transactionType == PersistenceUnitTransactionType.RESOURCE_LOCAL) {
1:aaefd3e:                 return PersistenceUnitTransactionType.RESOURCE_LOCAL;
1:aaefd3e:             }
1:aaefd3e:         } catch (Exception e) {
1:aaefd3e:             LOG.warn("Error while determining the transaction type. Falling back to JTA.", e);
1:2cfdf52:         }
1:aaefd3e:         return PersistenceUnitTransactionType.JTA;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private static Dictionary<String, String> getEmSupplierProps(String unitName) {
1:ec3ea65:         Dictionary<String, String> props = new Hashtable<String, String>(); // NOSONAR
1:2cfdf52:         props.put(JPA_UNIT_NAME, unitName);
1:2cfdf52:         return props;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private static Dictionary<String, String> rlTxManProps(String unitName) {
1:ec3ea65:         Dictionary<String, String> props = new Hashtable<String, String>(); // NOSONAR
1:2cfdf52:         props.put(JPA_UNIT_NAME, unitName);
1:2cfdf52:         props.put(TMTracker.TRANSACTION_TYPE, "RESOURCE_LOCAL");
1:2cfdf52:         return props;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void removedService(ServiceReference reference, Object trackedO) {
1:2cfdf52:         TrackedEmf tracked = (TrackedEmf)trackedO;
1:2cfdf52:         if (tracked.tmTracker != null) {
1:2cfdf52:             tracked.tmTracker.close();
1:2cfdf52:         }
1:2cfdf52:         if (tracked.rlTxManagerReg != null) {
1:2cfdf52:             tracked.rlTxManagerReg.unregister();
1:2cfdf52:         }
1:2cfdf52:         tracked.emSupplierReg.unregister();
1:365627f:         tracked.emProxyReg.unregister();
1:365627f:         tracked.emSupplier.close();
1:365627f:         reference.getBundle().getBundleContext().ungetService(reference);
1:2cfdf52:     }
1:0d59ccb:     
1:0d59ccb:     public static EntityManager createProxy(final EmSupplier emSupplier) {
1:0d59ccb:         ClassLoader loader = EntityManager.class.getClassLoader();
1:0d59ccb:         Class<?>[] ifAr = {
1:0d59ccb:             EntityManager.class
1:0d59ccb:         };
1:0d59ccb:         return (EntityManager)Proxy.newProxyInstance(loader, ifAr, new EmProxy(emSupplier));
1:0d59ccb:     }
1:2cfdf52: 
1:2cfdf52:     static class TrackedEmf {
1:0d59ccb:         ServiceRegistration emProxyReg;
1:2cfdf52:         ServiceRegistration emSupplierReg;
1:2cfdf52:         EMSupplierImpl emSupplier;
1:2cfdf52:         ServiceRegistration rlTxManagerReg;
1:2cfdf52:         EntityManagerFactory emf;
1:2cfdf52:         TMTracker tmTracker;
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:465647f
/////////////////////////////////////////////////////////////////////////
1:  * Tracks EntityManagerFactory services and publishes a Supplier&lt;EntityManager&gt; for each.
/////////////////////////////////////////////////////////////////////////
1:      * @param emf to get type from
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(EMFTracker.class);
/////////////////////////////////////////////////////////////////////////
1:     private static Dictionary<String, String> getEmSupplierProps(String unitName) {
1:         Dictionary<String, String> props = new Hashtable<String, String>(); // NOSONAR
1:     private static Dictionary<String, String> rlTxManProps(String unitName) {
1:         Dictionary<String, String> props = new Hashtable<String, String>(); // NOSONAR
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String, String> props = new Hashtable<String, String>();
0:         Dictionary<String, String> props = new Hashtable<String, String>();
commit:aaefd3e
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static Logger LOG = LoggerFactory.getLogger(EMFTracker.class);
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             PersistenceUnitTransactionType transactionType = (PersistenceUnitTransactionType) emf.getProperties().get(PersistenceUnitTransactionType.class.getName());
1:             if (transactionType == PersistenceUnitTransactionType.RESOURCE_LOCAL) {
1:                 return PersistenceUnitTransactionType.RESOURCE_LOCAL;
1:             }
1:         } catch (Exception e) {
1:             LOG.warn("Error while determining the transaction type. Falling back to JTA.", e);
1:         return PersistenceUnitTransactionType.JTA;
commit:365627f
/////////////////////////////////////////////////////////////////////////
1:         BundleContext puContext = reference.getBundle().getBundleContext();
1:         tracked.emf = (EntityManagerFactory)puContext.getService(reference);
1:         tracked.emSupplierReg = puContext.registerService(EmSupplier.class, tracked.emSupplier,
1:         tracked.emProxyReg = puContext.registerService(EntityManager.class, emProxy,
1:             tracked.rlTxManagerReg = puContext.registerService(JpaTemplate.class, txManager,
1:             tracked.tmTracker = new TMTracker(puContext, tracked.emSupplier, unitName, coordinator);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         tracked.emProxyReg.unregister();
1:         tracked.emSupplier.close();
1:         reference.getBundle().getBundleContext().ungetService(reference);
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Proxy;
1: import javax.persistence.EntityManager;
/////////////////////////////////////////////////////////////////////////
1:         tracked.emSupplier = new EMSupplierImpl(unitName, tracked.emf, coordinator);
1:         EntityManager emProxy = createProxy(tracked.emSupplier);
0:         tracked.emSupplierReg = bContext.registerService(EntityManager.class, emProxy,
1:                                                          getEmSupplierProps(unitName));
1:         
1:             JpaTemplate txManager = new ResourceLocalJpaTemplate(tracked.emSupplier, coordinator);
0:             tracked.tmTracker = new TMTracker(bContext, tracked.emSupplier, unitName, coordinator);
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static EntityManager createProxy(final EmSupplier emSupplier) {
1:         ClassLoader loader = EntityManager.class.getClassLoader();
1:         Class<?>[] ifAr = {
1:             EntityManager.class
1:         };
1:         return (EntityManager)Proxy.newProxyInstance(loader, ifAr, new EmProxy(emSupplier));
1:     }
1:         ServiceRegistration emProxyReg;
commit:798ba3b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordinator;
/////////////////////////////////////////////////////////////////////////
1:     private Coordinator coordinator;
1: 
1:     public EMFTracker(BundleContext context, Coordinator coordinator) {
1:         this.coordinator = coordinator;
/////////////////////////////////////////////////////////////////////////
0:         tracked.emSupplier = new EMSupplierImpl(tracked.emf, coordinator);
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.support.osgi.impl;
1: 
1: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: 
1: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.apache.aries.jpa.support.impl.EMSupplierImpl;
1: import org.apache.aries.jpa.support.impl.ResourceLocalJpaTemplate;
1: import org.apache.aries.jpa.template.JpaTemplate;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
0:  * Tracks EntityManagerFactory services and publishes a Supplier<EntityManager> for each.
1:  * IF the persistence unit uses JTA a TMTracker is created. If it uses RESOURCE_LOCAL as 
1:  * ResourceLocalJpaTemplate is created.
1:  */
1: @SuppressWarnings("rawtypes")
1: public class EMFTracker extends ServiceTracker {
1: 
1:     @SuppressWarnings("unchecked")
0:     public EMFTracker(BundleContext context) {
1:         super(context, EntityManagerFactory.class, null);
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     @Override
1:     public Object addingService(ServiceReference reference) {
1:         String unitName = (String)reference.getProperty(JPA_UNIT_NAME);
1:         if (unitName == null) {
1:             return null;
1:         }
0:         BundleContext bContext = reference.getBundle().getBundleContext();
1:         TrackedEmf tracked = new TrackedEmf();
0:         tracked.emf = (EntityManagerFactory)bContext.getService(reference);
0:         tracked.emSupplier = new EMSupplierImpl(tracked.emf);
0:         tracked.emSupplierReg = bContext.registerService(EmSupplier.class, tracked.emSupplier,
1:                                                          getEmSupplierProps(unitName));
1: 
1:         if (getTransactionType(tracked.emf) == PersistenceUnitTransactionType.RESOURCE_LOCAL) {
0:             JpaTemplate txManager = new ResourceLocalJpaTemplate(tracked.emSupplier);
0:             tracked.rlTxManagerReg = bContext.registerService(JpaTemplate.class, txManager,
1:                                                           rlTxManProps(unitName));
1:         } else {
0:             tracked.tmTracker = new TMTracker(bContext, tracked.emSupplier, unitName);
1:             tracked.tmTracker.open();
1:         }
1:         return tracked;
1:     }
1: 
1:     /**
1:      * 
0:      * @param emf
1:      * @return
1:      */
1:     private PersistenceUnitTransactionType getTransactionType(EntityManagerFactory emf) {
0:         PersistenceUnitTransactionType transactionType = (PersistenceUnitTransactionType) emf.getProperties()
0:         		.get(PersistenceUnitTransactionType.class.getName());
0:         if(transactionType == PersistenceUnitTransactionType.RESOURCE_LOCAL) {
0:         	return PersistenceUnitTransactionType.RESOURCE_LOCAL;
1:         } else {
0:         	return PersistenceUnitTransactionType.JTA;
1:         }
1:     }
1: 
0:     private Dictionary<String, String> getEmSupplierProps(String unitName) {
0:         Dictionary<String, String> props = new Hashtable<>();
1:         props.put(JPA_UNIT_NAME, unitName);
1:         return props;
1:     }
1: 
0:     private Dictionary<String, String> rlTxManProps(String unitName) {
0:         Dictionary<String, String> props = new Hashtable<>();
1:         props.put(JPA_UNIT_NAME, unitName);
1:         props.put(TMTracker.TRANSACTION_TYPE, "RESOURCE_LOCAL");
1:         return props;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     @Override
1:     public void removedService(ServiceReference reference, Object trackedO) {
1:         TrackedEmf tracked = (TrackedEmf)trackedO;
1:         if (tracked.tmTracker != null) {
1:             tracked.tmTracker.close();
1:         }
1:         if (tracked.rlTxManagerReg != null) {
1:             tracked.rlTxManagerReg.unregister();
1:         }
0:         tracked.emSupplier.close();
1:         tracked.emSupplierReg.unregister();
0:         super.removedService(reference, tracked.emf);
1:     }
1: 
1:     static class TrackedEmf {
1:         ServiceRegistration emSupplierReg;
1:         EMSupplierImpl emSupplier;
1:         ServiceRegistration rlTxManagerReg;
1:         EntityManagerFactory emf;
1:         TMTracker tmTracker;
1:     }
1: }
============================================================================