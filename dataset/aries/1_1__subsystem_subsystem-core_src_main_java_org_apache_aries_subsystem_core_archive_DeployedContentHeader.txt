1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
11:777b216: 
1:1129914: import java.util.ArrayList;
1:1129914: import java.util.Collection;
1:4b41d3d: import java.util.List;
1:4b41d3d: 
1:777b216: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1:777b216: import org.apache.aries.subsystem.core.internal.Utils;
1:1129914: import org.osgi.framework.Version;
1:4b41d3d: import org.osgi.resource.Requirement;
1:71fe81a: import org.osgi.resource.Resource;
1:777b216: import org.osgi.service.subsystem.SubsystemConstants;
1:777b216: 
1:2ffcfb9: public class DeployedContentHeader
1:2ffcfb9:         extends AbstractClauseBasedHeader<DeployedContentHeader.Clause>
1:2ffcfb9:         implements RequirementHeader<DeployedContentHeader.Clause> {
1:777b216: 
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:2ffcfb9:         public static final String ATTRIBUTE_DEPLOYEDVERSION = DeployedVersionAttribute.NAME;
1:2ffcfb9:         public static final String ATTRIBUTE_RESOURCEID = "resourceId";
1:2ffcfb9:         public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
1:2ffcfb9:         public static final String DIRECTIVE_REFERENCE = ReferenceDirective.NAME;
1:2ffcfb9:         public static final String DIRECTIVE_STARTORDER = StartOrderDirective.NAME;
1:777b216: 
1:2ffcfb9:         public Clause(String clause) {
1:2ffcfb9:             super( 
1:2ffcfb9:             		parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:2ffcfb9:             		parseParameters(clause, false), 
1:2ffcfb9:             		generateDefaultParameters(
1:2ffcfb9:             				TypeAttribute.DEFAULT,
1:2ffcfb9:             				ReferenceDirective.TRUE));
1:2ffcfb9:         }
1:2b251bb: 
1:2ffcfb9:         public Clause(Resource resource) {
1:2ffcfb9:             this(resource, true);
1:2ffcfb9:         }
1:2b251bb: 
1:2ffcfb9:         public Clause(Resource resource, boolean referenced) {
1:2ffcfb9:             this(appendResource(resource, new StringBuilder(), referenced)
1:2ffcfb9:                     .toString());
1:2ffcfb9:         }
1:391a1aa: 
1:2ffcfb9:         public boolean contains(Resource resource) {
1:2ffcfb9:             return getSymbolicName()
1:2ffcfb9:                     .equals(ResourceHelper.getSymbolicNameAttribute(resource))
1:2ffcfb9:                     && getDeployedVersion().equals(
1:2ffcfb9:                             ResourceHelper.getVersionAttribute(resource))
1:2ffcfb9:                     && getType()
1:2ffcfb9:                             .equals(ResourceHelper.getTypeAttribute(resource));
1:2ffcfb9:         }
1:391a1aa: 
1:2ffcfb9:         public Version getDeployedVersion() {
1:2ffcfb9:             return ((DeployedVersionAttribute) getAttribute(
1:2ffcfb9:                     ATTRIBUTE_DEPLOYEDVERSION)).getVersion();
1:2ffcfb9:         }
1:391a1aa: 
1:2ffcfb9:         public String getSymbolicName() {
1:2ffcfb9:             return path;
1:2ffcfb9:         }
1:4b41d3d: 
1:2ffcfb9:         public int getStartOrder() {
1:2ffcfb9:             return ((StartOrderDirective) getAttribute(DIRECTIVE_STARTORDER))
1:2ffcfb9:                     .getStartOrder();
1:2ffcfb9:         }
1:2ffcfb9: 
1:2ffcfb9:         public String getType() {
1:2ffcfb9:             return ((TypeAttribute) getAttribute(ATTRIBUTE_TYPE)).getType();
1:2ffcfb9:         }
1:2ffcfb9: 
1:2ffcfb9:         public boolean isReferenced() {
1:2ffcfb9:             return ((ReferenceDirective) getDirective(DIRECTIVE_REFERENCE))
1:2ffcfb9:                     .isReferenced();
1:2ffcfb9:         }
1:2ffcfb9: 
1:2ffcfb9:         public DeployedContentRequirement toRequirement(Resource resource) {
1:2ffcfb9:             return new DeployedContentRequirement(this, resource);
1:2ffcfb9:         }
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     public static final String NAME = SubsystemConstants.DEPLOYED_CONTENT;
1:2ffcfb9: 
1:2ffcfb9:     public static DeployedContentHeader newInstance(
1:2ffcfb9:             Collection<Resource> resources) {
1:2ffcfb9:         StringBuilder builder = new StringBuilder();
1:2ffcfb9:         for (Resource resource : resources) {
1:2ffcfb9:             appendResource(resource, builder, true);
1:2ffcfb9:             builder.append(',');
1:2ffcfb9:         }
1:2ffcfb9:         // Remove the trailing comma.
1:2ffcfb9:         // TODO Intentionally letting the exception propagate since there must
1:2ffcfb9:         // be at least one resource.
1:2ffcfb9:         builder.deleteCharAt(builder.length() - 1);
1:2ffcfb9:         return new DeployedContentHeader(builder.toString());
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     private static StringBuilder appendResource(Resource resource,
1:2ffcfb9:             StringBuilder builder, boolean referenced) {
1:2ffcfb9:         String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:2ffcfb9:         Version version = ResourceHelper.getVersionAttribute(resource);
1:2ffcfb9:         String type = ResourceHelper.getTypeAttribute(resource);
1:2ffcfb9:         builder.append(symbolicName).append(';')
1:2ffcfb9:                 .append(Clause.ATTRIBUTE_DEPLOYEDVERSION).append('=')
1:2ffcfb9:                 .append(version.toString()).append(';')
1:2ffcfb9:                 .append(Clause.ATTRIBUTE_TYPE).append('=').append(type)
1:2ffcfb9:                 .append(';').append(Clause.ATTRIBUTE_RESOURCEID).append('=')
1:2ffcfb9:                 .append(Utils.getId(resource)).append(';')
1:2ffcfb9:                 .append(Clause.DIRECTIVE_REFERENCE).append(":=")
1:2ffcfb9:                 .append(referenced);
1:2ffcfb9:         return builder;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     public DeployedContentHeader(Collection<Clause> clauses) {
1:2ffcfb9:         super(clauses);
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     public DeployedContentHeader(String value) {
1:2ffcfb9:     	super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     public boolean contains(Resource resource) {
1:2ffcfb9:         for (Clause clause : getClauses())
1:2ffcfb9:             if (clause.contains(resource))
1:2ffcfb9:                 return true;
1:2ffcfb9:         return false;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     public Clause getClause(Resource resource) {
1:2ffcfb9:         String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:2ffcfb9:         Version version = ResourceHelper.getVersionAttribute(resource);
1:2ffcfb9:         String type = ResourceHelper.getTypeAttribute(resource);
1:2ffcfb9:         for (Clause clause : clauses) {
1:2ffcfb9:             if (symbolicName.equals(clause.getPath())
1:2ffcfb9:                     && clause.getDeployedVersion().equals(version)
1:2ffcfb9:                     && type.equals(clause.getType()))
1:2ffcfb9:                 return clause;
1:2ffcfb9:         }
1:2ffcfb9:         return null;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public String getName() {
1:2ffcfb9:         return NAME;
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public String getValue() {
1:2ffcfb9:         return toString();
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     public boolean isReferenced(Resource resource) {
1:2ffcfb9:         DeployedContentHeader.Clause clause = getClause(resource);
1:2ffcfb9:         if (clause == null)
1:2ffcfb9:             return false;
1:2ffcfb9:         return clause.isReferenced();
1:2ffcfb9:     }
1:2ffcfb9: 
1:2ffcfb9:     @Override
1:2ffcfb9:     public List<Requirement> toRequirements(Resource resource) {
1:2ffcfb9:         List<Requirement> requirements = new ArrayList<Requirement>(
1:2ffcfb9:                 clauses.size());
1:2ffcfb9:         for (Clause clause : clauses)
1:2ffcfb9:             requirements.add(clause.toRequirement(resource));
1:2ffcfb9:         return requirements;
1:2ffcfb9:     }
2:2b251bb: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class DeployedContentHeader
1:         extends AbstractClauseBasedHeader<DeployedContentHeader.Clause>
1:         implements RequirementHeader<DeployedContentHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1:         public static final String ATTRIBUTE_DEPLOYEDVERSION = DeployedVersionAttribute.NAME;
1:         public static final String ATTRIBUTE_RESOURCEID = "resourceId";
1:         public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
1:         public static final String DIRECTIVE_REFERENCE = ReferenceDirective.NAME;
1:         public static final String DIRECTIVE_STARTORDER = StartOrderDirective.NAME;
1:         public Clause(String clause) {
1:             super( 
1:             		parsePath(clause, Patterns.SYMBOLIC_NAME, false), 
1:             		parseParameters(clause, false), 
1:             		generateDefaultParameters(
1:             				TypeAttribute.DEFAULT,
1:             				ReferenceDirective.TRUE));
1:         }
1:         public Clause(Resource resource) {
1:             this(resource, true);
1:         }
1:         public Clause(Resource resource, boolean referenced) {
1:             this(appendResource(resource, new StringBuilder(), referenced)
1:                     .toString());
1:         }
1:         public boolean contains(Resource resource) {
1:             return getSymbolicName()
1:                     .equals(ResourceHelper.getSymbolicNameAttribute(resource))
1:                     && getDeployedVersion().equals(
1:                             ResourceHelper.getVersionAttribute(resource))
1:                     && getType()
1:                             .equals(ResourceHelper.getTypeAttribute(resource));
1:         }
1:         public Version getDeployedVersion() {
1:             return ((DeployedVersionAttribute) getAttribute(
1:                     ATTRIBUTE_DEPLOYEDVERSION)).getVersion();
1:         }
1:         public String getSymbolicName() {
1:             return path;
1:         }
1:         public int getStartOrder() {
1:             return ((StartOrderDirective) getAttribute(DIRECTIVE_STARTORDER))
1:                     .getStartOrder();
1:         }
1: 
1:         public String getType() {
1:             return ((TypeAttribute) getAttribute(ATTRIBUTE_TYPE)).getType();
1:         }
1: 
1:         public boolean isReferenced() {
1:             return ((ReferenceDirective) getDirective(DIRECTIVE_REFERENCE))
1:                     .isReferenced();
1:         }
1: 
1:         public DeployedContentRequirement toRequirement(Resource resource) {
1:             return new DeployedContentRequirement(this, resource);
1:         }
1:     }
1: 
1:     public static final String NAME = SubsystemConstants.DEPLOYED_CONTENT;
1: 
1:     public static DeployedContentHeader newInstance(
1:             Collection<Resource> resources) {
1:         StringBuilder builder = new StringBuilder();
1:         for (Resource resource : resources) {
1:             appendResource(resource, builder, true);
1:             builder.append(',');
1:         }
1:         // Remove the trailing comma.
1:         // TODO Intentionally letting the exception propagate since there must
1:         // be at least one resource.
1:         builder.deleteCharAt(builder.length() - 1);
1:         return new DeployedContentHeader(builder.toString());
1:     }
1: 
1:     private static StringBuilder appendResource(Resource resource,
1:             StringBuilder builder, boolean referenced) {
1:         String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:         Version version = ResourceHelper.getVersionAttribute(resource);
1:         String type = ResourceHelper.getTypeAttribute(resource);
1:         builder.append(symbolicName).append(';')
1:                 .append(Clause.ATTRIBUTE_DEPLOYEDVERSION).append('=')
1:                 .append(version.toString()).append(';')
1:                 .append(Clause.ATTRIBUTE_TYPE).append('=').append(type)
1:                 .append(';').append(Clause.ATTRIBUTE_RESOURCEID).append('=')
1:                 .append(Utils.getId(resource)).append(';')
1:                 .append(Clause.DIRECTIVE_REFERENCE).append(":=")
1:                 .append(referenced);
1:         return builder;
1:     }
1: 
1:     public DeployedContentHeader(Collection<Clause> clauses) {
1:         super(clauses);
1:     }
1: 
1:     public DeployedContentHeader(String value) {
1:     	super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
1:     }
1: 
1:     public boolean contains(Resource resource) {
1:         for (Clause clause : getClauses())
1:             if (clause.contains(resource))
1:                 return true;
1:         return false;
1:     }
1: 
1:     public Clause getClause(Resource resource) {
1:         String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
1:         Version version = ResourceHelper.getVersionAttribute(resource);
1:         String type = ResourceHelper.getTypeAttribute(resource);
1:         for (Clause clause : clauses) {
1:             if (symbolicName.equals(clause.getPath())
1:                     && clause.getDeployedVersion().equals(version)
1:                     && type.equals(clause.getType()))
1:                 return clause;
1:         }
1:         return null;
1:     }
1: 
1:     @Override
1:     public String getName() {
1:         return NAME;
1:     }
1: 
1:     @Override
1:     public String getValue() {
1:         return toString();
1:     }
1: 
1:     public boolean isReferenced(Resource resource) {
1:         DeployedContentHeader.Clause clause = getClause(resource);
1:         if (clause == null)
1:             return false;
1:         return clause.isReferenced();
1:     }
1: 
1:     @Override
1:     public List<Requirement> toRequirements(Resource resource) {
1:         List<Requirement> requirements = new ArrayList<Requirement>(
1:                 clauses.size());
1:         for (Clause clause : clauses)
1:             requirements.add(clause.toRequirement(resource));
1:         return requirements;
1:     }
commit:2b251bb
/////////////////////////////////////////////////////////////////////////
0: 		public boolean equals(Object o) {
0: 			if (o == this)
0: 				return true;
0: 			if (!(o instanceof Clause))
0: 				return false;
0: 			Clause that = (Clause)o;
0: 			return getSymbolicName().equals(that.getSymbolicName())
0: 					&& getDeployedVersion().equals(that.getDeployedVersion())
0: 					&& getType().equals(that.getType());
1: 		}
1: 		
0: 		@Override
0: 		public int hashCode() {
0: 			int result = 17;
0: 			result = 31 * result + getSymbolicName().hashCode();
0: 			result = 31 * result + getDeployedVersion().hashCode();
0: 			result = 31 * result + getType().hashCode();
0: 			return result;
1: 		}
1: 		
0: 		@Override
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
0: 		public static final String DIRECTIVE_REFERENCE = ReferenceDirective.NAME;
/////////////////////////////////////////////////////////////////////////
0: 			parameter = parameters.get(DIRECTIVE_REFERENCE);
0: 			if (parameter == null)
0: 				parameters.put(DIRECTIVE_REFERENCE, ReferenceDirective.TRUE);
/////////////////////////////////////////////////////////////////////////
0: 			this(resource, true);
0: 		}
1: 		
0: 		public Clause(Resource resource, boolean referenced) {
0: 			this(appendResource(resource, new StringBuilder(), referenced).toString());
/////////////////////////////////////////////////////////////////////////
0: 		public boolean isReferenced() {
0: 			return ((ReferenceDirective)getDirective(DIRECTIVE_REFERENCE)).isReferenced();
0: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
0: 			appendResource(resource, builder, true);
/////////////////////////////////////////////////////////////////////////
0: 	private static StringBuilder appendResource(Resource resource, StringBuilder builder, boolean referenced) {
/////////////////////////////////////////////////////////////////////////
0: 			.append(Utils.getId(resource))
0: 			.append(';')
0: 			.append(Clause.DIRECTIVE_REFERENCE)
0: 			.append(":=")
0: 			.append(referenced);
/////////////////////////////////////////////////////////////////////////
0: 	public boolean isReferenced(Resource resource) {
0: 		DeployedContentHeader.Clause clause = getClause(resource);
0: 		if (clause == null)
0: 			return false;
0: 		return clause.isReferenced();
0: 	}
1: 	
commit:4b41d3d
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Requirement;
0: public class DeployedContentHeader implements RequirementHeader<DeployedContentHeader.Clause> {
/////////////////////////////////////////////////////////////////////////
0: 		public DeployedContentRequirement toRequirement(Resource resource) {
0: 			return new DeployedContentRequirement(this, resource);
0: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
0: 	public List<Requirement> toRequirements(Resource resource) {
0: 		List<Requirement> requirements = new ArrayList<Requirement>(clauses.size());
0: 		for (Clause clause : clauses)
0: 			requirements.add(clause.toRequirement(resource));
0: 		return requirements;
0: 	}
1: 	
0: 	@Override
commit:547a8ce
/////////////////////////////////////////////////////////////////////////
0: 		Collection<String> clauseStrs = new ClauseTokenizer(value).getClauses();
0: 		Set<Clause> clauses = new HashSet<Clause>(clauseStrs.size());
0: 		for (String clause : new ClauseTokenizer(value).getClauses())
0: 			clauses.add(new Clause(clause));
commit:777b216
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1: import org.apache.aries.subsystem.core.internal.Utils;
1: import org.osgi.service.subsystem.SubsystemConstants;
0: public class DeployedContentHeader implements Header<DeployedContentHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
0: 		public static final String ATTRIBUTE_DEPLOYEDVERSION = DeployedVersionAttribute.NAME;
0: 		public static final String ATTRIBUTE_RESOURCEID = "resourceId";
0: 		public static final String ATTRIBUTE_TYPE = TypeAttribute.NAME;
0: 		public static final String DIRECTIVE_STARTORDER = StartOrderDirective.NAME;
0: 		private static final Pattern PATTERN_SYMBOLICNAME = Pattern.compile('(' + Grammar.SYMBOLICNAME + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(ATTRIBUTE_TYPE);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_TYPE, TypeAttribute.DEFAULT);
0: 		}
1: 		
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
0: 		public Clause(String clause) {
0: 			Matcher matcher = PATTERN_SYMBOLICNAME.matcher(clause);
0: 			if (!matcher.find())
0: 				throw new IllegalArgumentException("Missing symbolic name path: " + clause);
0: 			path = matcher.group();
0: 			matcher.usePattern(PATTERN_PARAMETER);
0: 			while (matcher.find()) {
0: 				Parameter parameter = ParameterFactory.create(matcher.group());
0: 				parameters.put(parameter.getName(), parameter);
0: 			}
0: 			fillInDefaults(parameters);
0: 		}
1: 		
0: 		public Clause(Resource resource) {
0: 			this(appendResource(resource, new StringBuilder()).toString());
0: 		}
1: 		
0: 		public boolean contains(Resource resource) {
0: 			return getSymbolicName().equals(
0: 					ResourceHelper.getSymbolicNameAttribute(resource))
0: 					&& getDeployedVersion().equals(
0: 							ResourceHelper.getVersionAttribute(resource))
0: 					&& getType().equals(
0: 							ResourceHelper.getTypeAttribute(resource));
0: 		}
1: 		
0: 		@Override
0: 		public Attribute getAttribute(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Attribute)
0: 				return (Attribute)result;
0: 			return null;
0: 		}
1: 
0: 		@Override
0: 		public Collection<Attribute> getAttributes() {
0: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
0: 			for (Parameter parameter : parameters.values())
0: 				if (parameter instanceof Attribute)
0: 					attributes.add((Attribute)parameter);
0: 			attributes.trimToSize();
0: 			return attributes;
0: 			return ((DeployedVersionAttribute)getAttribute(ATTRIBUTE_DEPLOYEDVERSION)).getVersion();
0: 		}
1: 
0: 		@Override
0: 		public Directive getDirective(String name) {
0: 			Parameter result = parameters.get(name);
0: 			if (result instanceof Directive)
0: 				return (Directive)result;
0: 			return null;
0: 		}
1: 
0: 		@Override
0: 		public Collection<Directive> getDirectives() {
0: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
0: 			for (Parameter parameter : parameters.values())
0: 				if (parameter instanceof Directive)
0: 					directives.add((Directive)parameter);
0: 			directives.trimToSize();
0: 			return directives;
0: 		}
1: 
0: 		@Override
0: 		public Parameter getParameter(String name) {
0: 			return parameters.get(name);
0: 		}
1: 
0: 		@Override
0: 		public Collection<Parameter> getParameters() {
0: 			return Collections.unmodifiableCollection(parameters.values());
0: 		}
1: 
0: 		@Override
0: 		public String getPath() {
0: 			return path;
0: 		public String getSymbolicName() {
0: 			return path;
0: 		public int getStartOrder() {
0: 			return ((StartOrderDirective)getAttribute(DIRECTIVE_STARTORDER)).getStartOrder();
0: 		}
1: 		
0: 		public String getType() {
0: 			return ((TypeAttribute)getAttribute(ATTRIBUTE_TYPE)).getType();
0: 		}
1: 		
0: 		@Override
0: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
0: 			}
0: 			return builder.toString();
0: 	public static final String NAME = SubsystemConstants.DEPLOYED_CONTENT;
/////////////////////////////////////////////////////////////////////////
0: 	private static StringBuilder appendResource(Resource resource, StringBuilder builder) {
0: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
0: 		Version version = ResourceHelper.getVersionAttribute(resource);
0: 		String type = ResourceHelper.getTypeAttribute(resource);
0: 		builder.append(symbolicName)
0: 			.append(';')
0: 			.append(Clause.ATTRIBUTE_DEPLOYEDVERSION)
0: 			.append('=')
0: 			.append(version.toString())
0: 			.append(';')
0: 			.append(Clause.ATTRIBUTE_TYPE)
0: 			.append('=')
0: 			.append(type)
0: 			.append(';')
0: 			.append(Clause.ATTRIBUTE_RESOURCEID)
0: 			.append('=')
0: 			.append(Utils.getId(resource));
0: 		return builder;
0: 	}
0: 	
0: 	private static Collection<Clause> processHeader(String value) {
0: 		int numOfChars = value.length();
0: 		StringBuilder builder = new StringBuilder(numOfChars);
0: 		int numOfQuotes = 0;
0: 		Set<Clause> clauses = new HashSet<Clause>();
0: 		for (char c : value.toCharArray()) {
0: 			numOfChars--;
0: 			if (c == ',') {
0: 				if (numOfQuotes % 2 == 0) {
0: 					clauses.add(new Clause(builder.toString()));
0: 					builder = new StringBuilder(numOfChars);
0: 				}
0: 				else
0: 					builder.append(c);
0: 			}
0: 			else if (c == '"')
0: 				numOfQuotes++;
0: 			else
0: 				builder.append(c);
0: 		}
0: 		clauses.add(new Clause(builder.toString()));
0: 		return clauses;
0: 	}
0: 	
0: 	private final Set<Clause> clauses;
0: 	
0: 	public DeployedContentHeader(Collection<Clause> clauses) {
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("A " + NAME + " header must have at least one clause");
0: 		this.clauses = new HashSet<Clause>(clauses);
0: 	}
0: 		this(processHeader(value));
0: 	}
0: 	
0: 	public boolean contains(Resource resource) {
0: 		for (Clause clause : getClauses())
0: 			if (clause.contains(resource))
0: 				return true;
0: 		return false;
0: 	}
0: 	
0: 	public Clause getClause(Resource resource) {
0: 		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
0: 		Version version = ResourceHelper.getVersionAttribute(resource);
0: 		String type = ResourceHelper.getTypeAttribute(resource);
0: 			if (symbolicName.equals(clause.getPath())
0: 					&& clause.getDeployedVersion().equals(version)
0: 					&& type.equals(clause.getType()))
0: 				return clause;
0: 		return null;
0: 	}
0: 	
0: 	@Override
0: 	public Collection<DeployedContentHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
0: 	@Override
0: 	public String getName() {
0: 		return NAME;
0: 	}
0: 
0: 	@Override
0: 	public String getValue() {
0: 		return toString();
0: 	}
0: 	
0: 	@Override
0: 	public String toString() {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Clause clause : getClauses()) {
0: 			builder.append(clause).append(',');
0: 		}
0: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return builder.toString();
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Resource;
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
0: 
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.Collections;
0: import java.util.List;
0: 
1: import org.osgi.framework.Version;
0: import org.osgi.framework.wiring.Resource;
0: 
0: public class DeployedContentHeader extends AbstractHeader {
0: 	public static class DeployedContent {
0: 		private final Version deployedVersion;
0: 		private final String name;
0: 		private final String namespace;
0: 		
0: 		public DeployedContent(String name, Version deployedVersion, String namespace) {
0: 			this.name = name;
0: 			this.deployedVersion = deployedVersion;
0: 			this.namespace = namespace;
0: 		}
0: 		
0: 		public Version getDeployedVersion() {
0: 			return deployedVersion;
0: 		}
0: 		
0: 		public String getName() {
0: 			return name;
0: 		}
0: 		
0: 		public String getNamespace() {
0: 			return namespace;
0: 		}
0: 	}
0: 	
0: 	// TODO Needs to be added to SubsystemConstants.
0: 	public static final String NAME = "Deployed-Content";
0: 	
0: 	public static DeployedContentHeader newInstance(Collection<Resource> resources) {
0: 		StringBuilder builder = new StringBuilder();
0: 		for (Resource resource : resources) {
0: 			appendResource(resource, builder);
0: 			builder.append(',');
0: 		}
0: 		// Remove the trailing comma.
0: 		// TODO Intentionally letting the exception propagate since there must be at least one resource.
0: 		builder.deleteCharAt(builder.length() - 1);
0: 		return new DeployedContentHeader(builder.toString());
0: 	}
0: 	
0: 	private final List<DeployedContent> deployedContents;
0: 	
0: 	public DeployedContentHeader(String value) {
0: 		super(NAME, value);
0: 		deployedContents = new ArrayList<DeployedContent>(clauses.size());
0: 		for (Clause clause : clauses) {
0: 			DeployedVersionAttribute attribute = (DeployedVersionAttribute)clause.getAttribute(DeployedVersionAttribute.NAME);
0: 			TypeAttribute typeAttribute = (TypeAttribute)clause.getAttribute(TypeAttribute.NAME);
0: 			deployedContents.add(
0: 					new DeployedContent(
0: 							clause.getPath(),
0: 							attribute == null ? Version.emptyVersion : attribute.getDeployedVersion(),
0: 							typeAttribute == null ? TypeAttribute.DEFAULT_VALUE : typeAttribute.getType()));
0: 		}
0: 	}
0: 
0: 	public List<DeployedContent> getDeployedContents() {
0: 		return Collections.unmodifiableList(deployedContents);
0: 	}
0: }
============================================================================