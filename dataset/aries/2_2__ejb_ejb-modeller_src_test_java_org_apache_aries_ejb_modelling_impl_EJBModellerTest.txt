1:0d78661: /**
1:0d78661:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:0d78661:  *  contributor license agreements.  See the NOTICE file distributed with
1:0d78661:  *  this work for additional information regarding copyright ownership.
1:0d78661:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:0d78661:  *  (the "License"); you may not use this file except in compliance with
1:0d78661:  *  the License.  You may obtain a copy of the License at
1:0d78661:  *
1:0d78661:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0d78661:  *
1:0d78661:  *  Unless required by applicable law or agreed to in writing, software
1:0d78661:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:0d78661:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d78661:  *  See the License for the specific language governing permissions and
1:0d78661:  *  limitations under the License.
1:0d78661:  */
1:0d78661: package org.apache.aries.ejb.modelling.impl;
1:0d78661: 
1:0d78661: import java.util.jar.Attributes;
1:0d78661: import java.util.jar.Manifest;
1:0d78661: 
1:0d78661: import org.apache.aries.application.modelling.ModellerException;
1:0d78661: import org.apache.aries.ejb.modelling.EJBLocator;
1:0d78661: import org.apache.aries.unittest.mocks.MethodCall;
1:0d78661: import org.apache.aries.unittest.mocks.Skeleton;
1:0d78661: import org.apache.aries.util.filesystem.IDirectory;
1:0d78661: import org.apache.aries.util.manifest.BundleManifest;
1:0d78661: import org.junit.Before;
1:0d78661: import org.junit.Test;
1:0d78661: import org.osgi.framework.Constants;
1:0d78661: 
1:0d78661: public class EJBModellerTest {
1:0d78661: 
1:0d78661:   private EJBModeller modeller;
1:0d78661:   private Skeleton ejbLocator; 
1:0d78661:   
1:0d78661:   private IDirectory bundleLocation;
1:0d78661:   
1:0d78661:   @Before
1:0d78661:   public void setup() {
1:0d78661:     modeller = new EJBModeller();
1:0d78661: 
1:0d78661:     EJBLocator locator = Skeleton.newMock(EJBLocator.class);
1:0d78661:     modeller.setLocator(locator);
1:0d78661:     
1:0d78661:     ejbLocator = Skeleton.getSkeleton(locator);
1:0d78661:     
1:0d78661:     bundleLocation = Skeleton.newMock(IDirectory.class);
1:0d78661:   }
1:0d78661:   
1:0d78661:   @Test
1:0d78661:   public void testModelServicesNoExportEJB() throws ModellerException {
1:0d78661:     Manifest man = new Manifest();
1:0d78661:     setBasicHeaders(man);
1:0d78661:     modeller.modelServices(new BundleManifest(man), bundleLocation);
2:0d78661:     ejbLocator.assertSkeletonNotCalled();
1:0d78661:   }
1:0d78661:   
1:0d78661:   @Test
1:0d78661:   public void testModelServicesEmptyExportEJB() throws ModellerException {
1:0d78661:     Manifest man = new Manifest();
1:0d78661:     setBasicHeaders(man);
1:0d78661:     man.getMainAttributes().putValue("Export-EJB", "");
1:0d78661:     modeller.modelServices(new BundleManifest(man), bundleLocation);
1:f8bfaf6:     ejbLocator.assertCalled(new MethodCall(EJBLocator.class, "findEJBs", BundleManifest.class,
1:f8bfaf6:             bundleLocation, ParsedEJBServices.class));
1:0d78661:   }
1:0d78661:   
1:0d78661:   @Test
1:0d78661:   public void testModelServicesNoneExportEJB() throws ModellerException {
1:0d78661:     Manifest man = new Manifest();
1:0d78661:     setBasicHeaders(man);
1:0d78661:     man.getMainAttributes().putValue("Export-EJB", "NONE,anEJB , another");
1:0d78661:     modeller.modelServices(new BundleManifest(man), bundleLocation);
1:0d78661:     ejbLocator.assertSkeletonNotCalled();
1:0d78661:   }
1:0d78661:   
1:0d78661:   @Test
1:0d78661:   public void testModelServicesExportEJB() throws ModellerException {
1:0d78661:     Manifest man = new Manifest();
1:0d78661:     setBasicHeaders(man);
1:0d78661:     man.getMainAttributes().putValue("Export-EJB", "anEJB , another");
1:0d78661:     modeller.modelServices(new BundleManifest(man), bundleLocation);
1:0d78661:     ejbLocator.assertCalled(new MethodCall(EJBLocator.class, "findEJBs", BundleManifest.class,
1:0d78661:         bundleLocation, ParsedEJBServices.class));
1:0d78661:   }
1:0d78661: 
1:0d78661:   private void setBasicHeaders(Manifest man) {
1:0d78661:     Attributes att = man.getMainAttributes();
1:0d78661:     att.putValue(Constants.BUNDLE_MANIFESTVERSION, "2");
1:0d78661:     att.putValue(Constants.BUNDLE_SYMBOLICNAME, "testBundle");
1:0d78661:   }
1:0d78661: 
1:0d78661: }
============================================================================
author:Emily Jiang
-------------------------------------------------------------------------------
commit:f8bfaf6
/////////////////////////////////////////////////////////////////////////
1:     ejbLocator.assertCalled(new MethodCall(EJBLocator.class, "findEJBs", BundleManifest.class,
1:             bundleLocation, ParsedEJBServices.class));
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:0d78661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.modelling.impl;
1: 
1: import java.util.jar.Attributes;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.application.modelling.ModellerException;
1: import org.apache.aries.ejb.modelling.EJBLocator;
1: import org.apache.aries.unittest.mocks.MethodCall;
1: import org.apache.aries.unittest.mocks.Skeleton;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.manifest.BundleManifest;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.osgi.framework.Constants;
1: 
1: public class EJBModellerTest {
1: 
1:   private EJBModeller modeller;
1:   private Skeleton ejbLocator; 
1:   
1:   private IDirectory bundleLocation;
1:   
1:   @Before
1:   public void setup() {
1:     modeller = new EJBModeller();
1: 
1:     EJBLocator locator = Skeleton.newMock(EJBLocator.class);
1:     modeller.setLocator(locator);
1:     
1:     ejbLocator = Skeleton.getSkeleton(locator);
1:     
1:     bundleLocation = Skeleton.newMock(IDirectory.class);
1:   }
1:   
1:   @Test
1:   public void testModelServicesNoExportEJB() throws ModellerException {
1:     Manifest man = new Manifest();
1:     setBasicHeaders(man);
1:     modeller.modelServices(new BundleManifest(man), bundleLocation);
1:     ejbLocator.assertSkeletonNotCalled();
1:   }
1:   
1:   @Test
1:   public void testModelServicesEmptyExportEJB() throws ModellerException {
1:     Manifest man = new Manifest();
1:     setBasicHeaders(man);
1:     man.getMainAttributes().putValue("Export-EJB", "");
1:     modeller.modelServices(new BundleManifest(man), bundleLocation);
1:     ejbLocator.assertSkeletonNotCalled();
1:   }
1:   
1:   @Test
1:   public void testModelServicesNoneExportEJB() throws ModellerException {
1:     Manifest man = new Manifest();
1:     setBasicHeaders(man);
1:     man.getMainAttributes().putValue("Export-EJB", "NONE,anEJB , another");
1:     modeller.modelServices(new BundleManifest(man), bundleLocation);
1:     ejbLocator.assertSkeletonNotCalled();
1:   }
1:   
1:   @Test
1:   public void testModelServicesExportEJB() throws ModellerException {
1:     Manifest man = new Manifest();
1:     setBasicHeaders(man);
1:     man.getMainAttributes().putValue("Export-EJB", "anEJB , another");
1:     modeller.modelServices(new BundleManifest(man), bundleLocation);
1:     ejbLocator.assertCalled(new MethodCall(EJBLocator.class, "findEJBs", BundleManifest.class,
1:         bundleLocation, ParsedEJBServices.class));
1:   }
1: 
1:   private void setBasicHeaders(Manifest man) {
1:     Attributes att = man.getMainAttributes();
1:     att.putValue(Constants.BUNDLE_MANIFESTVERSION, "2");
1:     att.putValue(Constants.BUNDLE_SYMBOLICNAME, "testBundle");
1:   }
1: 
1: }
============================================================================