1:3e3b598: /**
1:3e3b598:  * Licensed to the Apache Software Foundation (ASF) under one
1:3e3b598:  * or more contributor license agreements.  See the NOTICE file
1:3e3b598:  * distributed with this work for additional information
1:3e3b598:  * regarding copyright ownership.  The ASF licenses this file
1:3e3b598:  * to you under the Apache License, Version 2.0 (the
1:3e3b598:  * "License"); you may not use this file except in compliance
1:3e3b598:  * with the License.  You may obtain a copy of the License at
1:3e3b598:  *
1:3e3b598:  *   http://www.apache.org/licenses/LICENSE-2.0
1:3e3b598:  *
1:3e3b598:  * Unless required by applicable law or agreed to in writing,
1:3e3b598:  * software distributed under the License is distributed on an
1:3e3b598:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:3e3b598:  * KIND, either express or implied.  See the License for the
1:3e3b598:  * specific language governing permissions and limitations
1:3e3b598:  * under the License.
1:3e3b598:  */
1:3e3b598: package org.apache.aries.blueprint.plugin.test;
1:3e3b598: 
1:3e3b598: import org.springframework.context.annotation.Lazy;
1:3e3b598: 
1:3e3b598: import javax.annotation.PostConstruct;
1:3e3b598: import javax.inject.Singleton;
1:3e3b598: import javax.transaction.cdi.Transactional;
1:3e3b598: import javax.transaction.cdi.Transactional.TxType;
1:3e3b598: 
1:3e3b598: @Singleton
1:3e3b598: @Transactional(value=TxType.REQUIRES_NEW)
1:3e3b598: @Lazy
1:3e3b598: public class CdiTransactionalAnnotatedBean extends ParentBean {
1:3e3b598: 
1:3e3b598:     public void overridenInit() {
1:3e3b598:         // By overriding the method and removing the annotation, this method has lost its
1:3e3b598:         // @PostConstruct method because it isn't @Inherited
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @PostConstruct
1:3e3b598:     public void init() {
1:3e3b598: 
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Transactional(TxType.NOT_SUPPORTED)
1:3e3b598:     public void txNotSupported() {
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Transactional(TxType.MANDATORY)
1:3e3b598:     public void txMandatory() {
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Transactional(TxType.NEVER)
1:3e3b598:     public void txNever() {
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Transactional(TxType.REQUIRED)
1:3e3b598:     public void txRequired() {
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Override
1:3e3b598:     public void txOverridenWithoutTransactional() {
1:3e3b598:     }
1:3e3b598: 
1:3e3b598:     @Transactional(TxType.REQUIRES_NEW)
1:3e3b598:     public void txOverridenWithRequiresNew() {
1:3e3b598:     }
1:3e3b598: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:808409a
author:Dominik Przybysz
-------------------------------------------------------------------------------
commit:3e3b598
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.plugin.test;
1: 
1: import org.springframework.context.annotation.Lazy;
1: 
1: import javax.annotation.PostConstruct;
1: import javax.inject.Singleton;
1: import javax.transaction.cdi.Transactional;
1: import javax.transaction.cdi.Transactional.TxType;
1: 
1: @Singleton
1: @Transactional(value=TxType.REQUIRES_NEW)
1: @Lazy
1: public class CdiTransactionalAnnotatedBean extends ParentBean {
1: 
1:     public void overridenInit() {
1:         // By overriding the method and removing the annotation, this method has lost its
1:         // @PostConstruct method because it isn't @Inherited
1:     }
1: 
1:     @PostConstruct
1:     public void init() {
1: 
1:     }
1: 
1:     @Transactional(TxType.NOT_SUPPORTED)
1:     public void txNotSupported() {
1:     }
1: 
1:     @Transactional(TxType.MANDATORY)
1:     public void txMandatory() {
1:     }
1: 
1:     @Transactional(TxType.NEVER)
1:     public void txNever() {
1:     }
1: 
1:     @Transactional(TxType.REQUIRED)
1:     public void txRequired() {
1:     }
1: 
1:     @Override
1:     public void txOverridenWithoutTransactional() {
1:     }
1: 
1:     @Transactional(TxType.REQUIRES_NEW)
1:     public void txOverridenWithRequiresNew() {
1:     }
1: }
============================================================================