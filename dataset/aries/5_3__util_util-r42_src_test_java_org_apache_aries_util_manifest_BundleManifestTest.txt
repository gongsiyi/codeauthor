1:c6af0d5: /*
1:c6af0d5:  * Licensed to the Apache Software Foundation (ASF) under one
1:c6af0d5:  * or more contributor license agreements.  See the NOTICE file
1:c6af0d5:  * distributed with this work for additional information
1:c6af0d5:  * regarding copyright ownership.  The ASF licenses this file
1:c6af0d5:  * to you under the Apache License, Version 2.0 (the
1:c6af0d5:  * "License"); you may not use this file except in compliance
1:c6af0d5:  * with the License.  You may obtain a copy of the License at
1:c6af0d5:  *
1:c6af0d5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:c6af0d5:  *
1:c6af0d5:  * Unless required by applicable law or agreed to in writing,
1:c6af0d5:  * software distributed under the License is distributed on an
1:c6af0d5:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:c6af0d5:  * KIND, either express or implied.  See the License for the
1:c6af0d5:  * specific language governing permissions and limitations
1:c6af0d5:  * under the License.
1:c6af0d5:  */
4:c6af0d5: 
1:910fec0: package org.apache.aries.util.manifest;
1:2227f26: 
1:c6af0d5: import static org.junit.Assert.assertEquals;
1:c6af0d5: import static org.junit.Assert.assertNull;
1:c6af0d5: 
1:c6af0d5: import java.io.File;
1:c6af0d5: import java.io.FileInputStream;
1:be36ee1: import java.io.FileNotFoundException;
1:c6af0d5: import java.io.FileOutputStream;
1:be36ee1: import java.io.IOException;
1:c6af0d5: import java.util.jar.JarInputStream;
1:c6af0d5: import java.util.zip.ZipEntry;
1:c6af0d5: import java.util.zip.ZipOutputStream;
1:c6af0d5: 
1:be36ee1: import org.apache.aries.util.filesystem.FileSystem;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:c6af0d5: import org.junit.AfterClass;
1:c6af0d5: import org.junit.BeforeClass;
1:c6af0d5: import org.junit.Test;
1:c6af0d5: 
1:c6af0d5: public class BundleManifestTest
1:c6af0d5: {
1:be36ee1:   private static final String EXPECTED_VERSION = "1.0.0";
1:be36ee1:   private static final String EXPECTED_SYMBOLIC_NAME = "com.ibm.test";
1:be36ee1:   private static File BUNDLE_WITHOUT_NAME_HEADER;
1:be36ee1:   private static File BUNDLE_WITH_NAME_HEADER;
1:be36ee1: 
1:c6af0d5:   @BeforeClass
1:c6af0d5:   public static void setup() throws Exception
1:c6af0d5:   {
1:be36ee1:     BUNDLE_WITHOUT_NAME_HEADER = new File ("./bundleManifestTest/nonExploded.jar");
1:be36ee1:     BUNDLE_WITHOUT_NAME_HEADER.getParentFile().mkdirs();
1:be36ee1:     BUNDLE_WITH_NAME_HEADER = new File ("./bundleManifestTest/nonExplodedWithName.jar");
1:be36ee1:     BUNDLE_WITH_NAME_HEADER.getParentFile().mkdirs();
1:2227f26:     
1:be36ee1:     createZippedJar(BUNDLE_WITHOUT_NAME_HEADER, "exploded.jar");
1:be36ee1:     createZippedJar(BUNDLE_WITH_NAME_HEADER, "exploded-jar-with-name.jar");
1:be36ee1:     
1:be36ee1:   }
1:be36ee1: 
1:be36ee1:   private static void createZippedJar(File outputFile, String inputFolderName) throws FileNotFoundException, IOException {
1:be36ee1: 	ZipOutputStream out = new ZipOutputStream(new FileOutputStream(outputFile));
1:c6af0d5:     ZipEntry ze = new ZipEntry("META-INF/");
1:c6af0d5:     out.putNextEntry(ze);
1:c6af0d5:     
1:be36ee1:     File f = new File("../src/test/resources/bundles/" + inputFolderName + "/META-INF/beforeManifest.file");
1:c6af0d5:     ze = new ZipEntry("META-INF/beforeManifest.file");
1:c6af0d5:     ze.setSize(f.length());
1:c6af0d5:     out.putNextEntry(ze);
1:c6af0d5:     IOUtils.copy(new FileInputStream(f), out);
1:c6af0d5:     
1:be36ee1:     f = new File("../src/test/resources/bundles/" + inputFolderName + "/META-INF/MANIFEST.MF");
1:c6af0d5:     ze = new ZipEntry("META-INF/MANIFEST.MF");
1:c6af0d5:     ze.setSize(f.length());
1:c6af0d5:     out.putNextEntry(ze);
1:c6af0d5:     IOUtils.copy(new FileInputStream(f), out);    
1:c6af0d5:     
1:c6af0d5:     out.close();
1:be36ee1: }
1:c6af0d5:   
1:c6af0d5:   @AfterClass
1:c6af0d5:   public static void cleanup()
1:c6af0d5:   {
1:be36ee1:     IOUtils.deleteRecursive(new File("bundleManifestTest/"));
2:c6af0d5:   }
1:be36ee1: 
1:c6af0d5:   @Test
1:c6af0d5:   public void testExploded()
1:c6af0d5:   {
1:c6af0d5:     BundleManifest sut = BundleManifest.fromBundle(new File("../src/test/resources/bundles/exploded.jar"));
1:be36ee1:     assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:be36ee1:     assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:c6af0d5:   }
1:be36ee1: 
1:be36ee1:   @Test
1:be36ee1:   public void testExplodedFromIDirectory()
1:be36ee1:   {
1:be36ee1: 	  BundleManifest sut = BundleManifest.fromBundle(FileSystem.getFSRoot(
1:be36ee1: 			  new File("../src/test/resources/bundles/exploded.jar")));
1:be36ee1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:be36ee1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:be36ee1:   }
1:be36ee1: 
1:be36ee1:   @Test
1:be36ee1:   public void testExplodedWithName()
1:be36ee1:   {
1:be36ee1: 	  BundleManifest sut = BundleManifest.fromBundle(new File("../src/test/resources/bundles/exploded-jar-with-name.jar"));
1:be36ee1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:be36ee1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:be36ee1:   }
1:be36ee1: 
1:be36ee1:   @Test
1:be36ee1:   public void testExplodedWithNameFromIDirectory()
1:be36ee1:   {
1:be36ee1: 	  BundleManifest sut = BundleManifest.fromBundle(FileSystem.getFSRoot(
1:be36ee1: 			  new File("../src/test/resources/bundles/exploded-jar-with-name.jar")));
1:be36ee1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:be36ee1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:be36ee1:   }
1:be36ee1: 
1:c6af0d5:   @Test
1:c6af0d5:   public void testZip() throws Exception
1:c6af0d5:   {
1:c6af0d5:     // make sure that the manifest is not the first file in the jar archive
1:be36ee1:     JarInputStream jarIs = new JarInputStream(new FileInputStream(BUNDLE_WITHOUT_NAME_HEADER));
1:c6af0d5:     assertNull(jarIs.getManifest());
1:c6af0d5:     jarIs.close();
1:c6af0d5:     
1:be36ee1:     BundleManifest sut = BundleManifest.fromBundle(BUNDLE_WITHOUT_NAME_HEADER);
1:be36ee1:     assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:be36ee1:     assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:c6af0d5:   }
1:be36ee1: 
1:be36ee1:   @Test
1:be36ee1:   public void testZipFromIDirectory() throws Exception
1:be36ee1:   {
1:be36ee1: 	  // make sure that the manifest is not the first file in the jar archive
1:be36ee1: 	  JarInputStream jarIs = new JarInputStream(new FileInputStream(BUNDLE_WITHOUT_NAME_HEADER));
1:be36ee1: 	  assertNull(jarIs.getManifest());
1:be36ee1: 	  jarIs.close();
1:be36ee1: 	  
1:be36ee1: 	  BundleManifest sut = BundleManifest.fromBundle(
1:be36ee1: 			  FileSystem.getFSRoot(BUNDLE_WITHOUT_NAME_HEADER));
1:be36ee1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:be36ee1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:be36ee1:   }
1:be36ee1: 
1:be36ee1:   @Test
1:be36ee1:   public void testZipWithName() throws Exception
1:be36ee1:   {
1:be36ee1: 	  // make sure that the manifest is not the first file in the jar archive
1:be36ee1: 	  JarInputStream jarIs = new JarInputStream(new FileInputStream(BUNDLE_WITH_NAME_HEADER));
1:be36ee1: 	  assertNull(jarIs.getManifest());
1:be36ee1: 	  jarIs.close();
1:be36ee1: 	  
1:be36ee1: 	  BundleManifest sut = BundleManifest.fromBundle(BUNDLE_WITH_NAME_HEADER);
1:be36ee1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:be36ee1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:be36ee1:   }
1:be36ee1:   
1:be36ee1:   @Test
1:be36ee1:   public void testZipWithNameFromIDirectory() throws Exception
1:be36ee1:   {
1:be36ee1: 	  // make sure that the manifest is not the first file in the jar archive
1:be36ee1: 	  JarInputStream jarIs = new JarInputStream(new FileInputStream(BUNDLE_WITH_NAME_HEADER));
1:be36ee1: 	  assertNull(jarIs.getManifest());
1:be36ee1: 	  jarIs.close();
1:be36ee1: 	  
1:be36ee1: 	  BundleManifest sut = BundleManifest.fromBundle(
1:be36ee1: 			  FileSystem.getFSRoot(BUNDLE_WITH_NAME_HEADER));
1:be36ee1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:be36ee1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:be36ee1:   }
1:be36ee1: 
1:c6af0d5: }
1:c6af0d5: 
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:be36ee1
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: import org.apache.aries.util.filesystem.FileSystem;
1:   private static final String EXPECTED_VERSION = "1.0.0";
1:   private static final String EXPECTED_SYMBOLIC_NAME = "com.ibm.test";
1:   private static File BUNDLE_WITHOUT_NAME_HEADER;
1:   private static File BUNDLE_WITH_NAME_HEADER;
1: 
1:     BUNDLE_WITHOUT_NAME_HEADER = new File ("./bundleManifestTest/nonExploded.jar");
1:     BUNDLE_WITHOUT_NAME_HEADER.getParentFile().mkdirs();
1:     BUNDLE_WITH_NAME_HEADER = new File ("./bundleManifestTest/nonExplodedWithName.jar");
1:     BUNDLE_WITH_NAME_HEADER.getParentFile().mkdirs();
1:     createZippedJar(BUNDLE_WITHOUT_NAME_HEADER, "exploded.jar");
1:     createZippedJar(BUNDLE_WITH_NAME_HEADER, "exploded-jar-with-name.jar");
1:     
1:   }
1: 
1:   private static void createZippedJar(File outputFile, String inputFolderName) throws FileNotFoundException, IOException {
1: 	ZipOutputStream out = new ZipOutputStream(new FileOutputStream(outputFile));
1:     File f = new File("../src/test/resources/bundles/" + inputFolderName + "/META-INF/beforeManifest.file");
1:     f = new File("../src/test/resources/bundles/" + inputFolderName + "/META-INF/MANIFEST.MF");
1: }
1:     IOUtils.deleteRecursive(new File("bundleManifestTest/"));
1: 
1:     assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:     assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1: 
1:   @Test
1:   public void testExplodedFromIDirectory()
1:   {
1: 	  BundleManifest sut = BundleManifest.fromBundle(FileSystem.getFSRoot(
1: 			  new File("../src/test/resources/bundles/exploded.jar")));
1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:   }
1: 
1:   @Test
1:   public void testExplodedWithName()
1:   {
1: 	  BundleManifest sut = BundleManifest.fromBundle(new File("../src/test/resources/bundles/exploded-jar-with-name.jar"));
1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:   }
1: 
1:   @Test
1:   public void testExplodedWithNameFromIDirectory()
1:   {
1: 	  BundleManifest sut = BundleManifest.fromBundle(FileSystem.getFSRoot(
1: 			  new File("../src/test/resources/bundles/exploded-jar-with-name.jar")));
1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:   }
1: 
1:     JarInputStream jarIs = new JarInputStream(new FileInputStream(BUNDLE_WITHOUT_NAME_HEADER));
1:     BundleManifest sut = BundleManifest.fromBundle(BUNDLE_WITHOUT_NAME_HEADER);
1:     assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1:     assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1: 
1:   @Test
1:   public void testZipFromIDirectory() throws Exception
1:   {
1: 	  // make sure that the manifest is not the first file in the jar archive
1: 	  JarInputStream jarIs = new JarInputStream(new FileInputStream(BUNDLE_WITHOUT_NAME_HEADER));
1: 	  assertNull(jarIs.getManifest());
1: 	  jarIs.close();
1: 	  
1: 	  BundleManifest sut = BundleManifest.fromBundle(
1: 			  FileSystem.getFSRoot(BUNDLE_WITHOUT_NAME_HEADER));
1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:   }
1: 
1:   @Test
1:   public void testZipWithName() throws Exception
1:   {
1: 	  // make sure that the manifest is not the first file in the jar archive
1: 	  JarInputStream jarIs = new JarInputStream(new FileInputStream(BUNDLE_WITH_NAME_HEADER));
1: 	  assertNull(jarIs.getManifest());
1: 	  jarIs.close();
1: 	  
1: 	  BundleManifest sut = BundleManifest.fromBundle(BUNDLE_WITH_NAME_HEADER);
1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:   }
1:   
1:   @Test
1:   public void testZipWithNameFromIDirectory() throws Exception
1:   {
1: 	  // make sure that the manifest is not the first file in the jar archive
1: 	  JarInputStream jarIs = new JarInputStream(new FileInputStream(BUNDLE_WITH_NAME_HEADER));
1: 	  assertNull(jarIs.getManifest());
1: 	  jarIs.close();
1: 	  
1: 	  BundleManifest sut = BundleManifest.fromBundle(
1: 			  FileSystem.getFSRoot(BUNDLE_WITH_NAME_HEADER));
1: 	  assertEquals(EXPECTED_SYMBOLIC_NAME, sut.getSymbolicName());
1: 	  assertEquals(EXPECTED_VERSION, sut.getVersion().toString());
1:   }
1: 
author:David Jencks
-------------------------------------------------------------------------------
commit:6df3ad3
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.util.manifest;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.filesystem.IOUtils;
0: import org.apache.aries.util.manifest.BundleManifest;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:d04041b
/////////////////////////////////////////////////////////////////////////
0: 	  IOUtils.deleteRecursive(new File("bundleManifestTest/"));
commit:2227f26
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.application.utils.manifest;
/////////////////////////////////////////////////////////////////////////
0:   private static File _testfile;
1:   
0:     _testfile = new File ("./bundleManifestTest/nonExploded.jar");
0:     _testfile.getParentFile().mkdirs();
1:     
0:     ZipOutputStream out = new ZipOutputStream(new FileOutputStream(_testfile));
/////////////////////////////////////////////////////////////////////////
0:     _testfile.delete();
/////////////////////////////////////////////////////////////////////////
0:     JarInputStream jarIs = new JarInputStream(new FileInputStream(_testfile));
0:     BundleManifest sut = BundleManifest.fromBundle(_testfile);
commit:c6af0d5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.aries.application.utils.manifest.test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.util.jar.JarInputStream;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: public class BundleManifestTest
1: {
1:   @BeforeClass
1:   public static void setup() throws Exception
1:   {
0:     ZipOutputStream out = new ZipOutputStream(new FileOutputStream("../src/test/resources/bundles/nonExploded.jar"));
1:     ZipEntry ze = new ZipEntry("META-INF/");
1:     out.putNextEntry(ze);
1:     
0:     File f = new File("../src/test/resources/bundles/exploded.jar/META-INF/beforeManifest.file");
1:     ze = new ZipEntry("META-INF/beforeManifest.file");
1:     ze.setSize(f.length());
1:     out.putNextEntry(ze);
1:     IOUtils.copy(new FileInputStream(f), out);
1:     
0:     f = new File("../src/test/resources/bundles/exploded.jar/META-INF/MANIFEST.MF");
1:     ze = new ZipEntry("META-INF/MANIFEST.MF");
1:     ze.setSize(f.length());
1:     out.putNextEntry(ze);
1:     IOUtils.copy(new FileInputStream(f), out);    
1:     
1:     out.close();
1:   }
1:   
1:   @AfterClass
1:   public static void cleanup()
1:   {
0:     new File("../src/test/resources/bundles/nonExploded.jar").delete();
1:   }
1:   
1:   @Test
1:   public void testExploded()
1:   {
1:     BundleManifest sut = BundleManifest.fromBundle(new File("../src/test/resources/bundles/exploded.jar"));
0:     assertEquals("com.ibm.test", sut.getSymbolicName());
0:     assertEquals("1.0.0", sut.getVersion().toString());
1:   }
1:   
1:   @Test
1:   public void testZip() throws Exception
1:   {
1:     // make sure that the manifest is not the first file in the jar archive
0:     JarInputStream jarIs = new JarInputStream(new FileInputStream("../src/test/resources/bundles/nonExploded.jar"));
1:     assertNull(jarIs.getManifest());
1:     jarIs.close();
1:     
0:     BundleManifest sut = BundleManifest.fromBundle(new File("../src/test/resources/bundles/nonExploded.jar"));
0:     assertEquals("com.ibm.test", sut.getSymbolicName());
0:     assertEquals("1.0.0", sut.getVersion().toString());
1:   }
1: }
1: 
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.utils.manifest;
0: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNull;
0: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.util.jar.JarInputStream;
0: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipOutputStream;
0: 
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
0: import org.junit.AfterClass;
0: import org.junit.BeforeClass;
0: import org.junit.Test;
0: 
0: public class BundleManifestTest
0: {
0:   private static File _testfile;
0:   
0:   @BeforeClass
0:   public static void setup() throws Exception
0:   {
0:     _testfile = new File ("./bundleManifestTest/nonExploded.jar");
0:     _testfile.getParentFile().mkdirs();
0:     
0:     ZipOutputStream out = new ZipOutputStream(new FileOutputStream(_testfile));
0:     ZipEntry ze = new ZipEntry("META-INF/");
0:     out.putNextEntry(ze);
0:     
0:     File f = new File("../src/test/resources/bundles/exploded.jar/META-INF/beforeManifest.file");
0:     ze = new ZipEntry("META-INF/beforeManifest.file");
0:     ze.setSize(f.length());
0:     out.putNextEntry(ze);
0:     IOUtils.copy(new FileInputStream(f), out);
0:     
0:     f = new File("../src/test/resources/bundles/exploded.jar/META-INF/MANIFEST.MF");
0:     ze = new ZipEntry("META-INF/MANIFEST.MF");
0:     ze.setSize(f.length());
0:     out.putNextEntry(ze);
0:     IOUtils.copy(new FileInputStream(f), out);    
0:     
0:     out.close();
0:   }
0:   
0:   @AfterClass
0:   public static void cleanup()
0:   {
0:     _testfile.delete();
0:   }
0:   
0:   @Test
0:   public void testExploded()
0:   {
0:     BundleManifest sut = BundleManifest.fromBundle(new File("../src/test/resources/bundles/exploded.jar"));
0:     assertEquals("com.ibm.test", sut.getSymbolicName());
0:     assertEquals("1.0.0", sut.getVersion().toString());
0:   }
0:   
0:   @Test
0:   public void testZip() throws Exception
0:   {
0:     // make sure that the manifest is not the first file in the jar archive
0:     JarInputStream jarIs = new JarInputStream(new FileInputStream(_testfile));
0:     assertNull(jarIs.getManifest());
0:     jarIs.close();
0:     
0:     BundleManifest sut = BundleManifest.fromBundle(_testfile);
0:     assertEquals("com.ibm.test", sut.getSymbolicName());
0:     assertEquals("1.0.0", sut.getVersion().toString());
0:   }
0: }
0: 
============================================================================