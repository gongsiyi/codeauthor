1:285f3a8: /*
1:285f3a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:285f3a8:  * or more contributor license agreements.  See the NOTICE file
1:285f3a8:  * distributed with this work for additional information
1:285f3a8:  * regarding copyright ownership.  The ASF licenses this file
1:285f3a8:  * to you under the Apache License, Version 2.0 (the
1:285f3a8:  * "License"); you may not use this file except in compliance
1:285f3a8:  * with the License.  You may obtain a copy of the License at
4:285f3a8:  *
1:285f3a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:285f3a8:  *
1:285f3a8:  * Unless required by applicable law or agreed to in writing,
1:285f3a8:  * software distributed under the License is distributed on an
1:285f3a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:285f3a8:  * KIND, either express or implied.  See the License for the
1:285f3a8:  * specific language governing permissions and limitations
1:285f3a8:  * under the License.
1:285f3a8:  */
1:285f3a8: package org.apache.aries.blueprint.proxy;
1:285f3a8: 
1:285f3a8: import java.io.Serializable;
1:285f3a8: import java.lang.reflect.Method;
1:285f3a8: 
1:285f3a8: import org.apache.aries.blueprint.Interceptor;
1:285f3a8: import org.apache.aries.proxy.InvocationListener;
1:285f3a8: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:285f3a8: import org.slf4j.Logger;
1:285f3a8: import org.slf4j.LoggerFactory;
1:285f3a8: 
1:285f3a8: /**
1:285f3a8:  * A collaborator which ensures preInvoke and postInvoke occur before and after
1:285f3a8:  * method invocation
1:285f3a8:  */
1:285f3a8: public class SingleInterceptorCollaborator implements InvocationListener, Serializable {
1:285f3a8: 
1:285f3a8:     /** Serial version UID for this class */
1:285f3a8:     private static final long serialVersionUID = -58189302118314469L;
1:285f3a8: 
1:285f3a8:     private static final Logger LOGGER = LoggerFactory
1:285f3a8:             .getLogger(Collaborator.class);
1:285f3a8: 
1:285f3a8:     private transient Interceptor interceptor;
1:285f3a8:     private transient ComponentMetadata cm;
1:285f3a8: 
1:285f3a8:     private static final Object NON_INVOKED = new Object();
1:285f3a8: 
1:285f3a8:     public SingleInterceptorCollaborator(ComponentMetadata cm, Interceptor interceptor) {
1:285f3a8:         this.cm = cm;
1:285f3a8:         this.interceptor = interceptor;
1:285f3a8:     }
1:285f3a8: 
1:285f3a8:     /**
1:285f3a8:      * Invoke the preCall method on the interceptor
1:285f3a8:      */
1:285f3a8:     public Object preInvoke(Object o, Method m, Object[] parameters)
1:285f3a8:             throws Throwable {
1:285f3a8:         Object callToken = NON_INVOKED;
1:285f3a8:         try {
1:285f3a8:               callToken = interceptor.preCall(cm, m, parameters);
1:285f3a8:         } catch (Throwable t) {
1:285f3a8:             postInvokeExceptionalReturn(callToken, o, m, t);
1:285f3a8:             throw t;
1:285f3a8:         }
1:285f3a8:         return callToken;
1:285f3a8:     }
1:285f3a8: 
1:285f3a8:     /**
1:285f3a8:      * Called when the method is called and returned normally
1:285f3a8:      */
1:285f3a8:     public void postInvoke(Object token, Object o, Method method, 
1:285f3a8:          Object returnType) throws Throwable {
1:285f3a8: 
1:285f3a8:         if(token != NON_INVOKED) {
1:285f3a8:             try {
1:285f3a8:                 interceptor.postCallWithReturn(cm, method, returnType, token);
1:285f3a8:             } catch (Throwable t) {
1:285f3a8:                 LOGGER.debug("postCallInterceptorWithReturn", t);
1:285f3a8:                 throw t;
1:285f3a8:             }
1:285f3a8:         }
1:285f3a8:     }
1:285f3a8: 
1:285f3a8:     /**
1:285f3a8:      * Called when the method is called and returned with an exception
1:285f3a8:      */
1:285f3a8:     public void postInvokeExceptionalReturn(Object token, Object o, Method method,
1:285f3a8:                  Throwable exception) throws Throwable {
1:285f3a8:         try {
1:285f3a8:             interceptor.postCallWithException(cm, method, exception, token);
1:285f3a8:         } catch (Throwable t) {
1:285f3a8:             // log the exception
1:285f3a8:             LOGGER.debug("postCallInterceptorWithException", t);
1:285f3a8:             throw t;
1:285f3a8:         }
1:285f3a8:     }
1:285f3a8: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:8980414
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:285f3a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.proxy;
1: 
1: import java.io.Serializable;
1: import java.lang.reflect.Method;
1: 
1: import org.apache.aries.blueprint.Interceptor;
1: import org.apache.aries.proxy.InvocationListener;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * A collaborator which ensures preInvoke and postInvoke occur before and after
1:  * method invocation
1:  */
1: public class SingleInterceptorCollaborator implements InvocationListener, Serializable {
1: 
1:     /** Serial version UID for this class */
1:     private static final long serialVersionUID = -58189302118314469L;
1: 
1:     private static final Logger LOGGER = LoggerFactory
1:             .getLogger(Collaborator.class);
1: 
1:     private transient Interceptor interceptor;
1:     private transient ComponentMetadata cm;
1: 
1:     private static final Object NON_INVOKED = new Object();
1: 
1:     public SingleInterceptorCollaborator(ComponentMetadata cm, Interceptor interceptor) {
1:         this.cm = cm;
1:         this.interceptor = interceptor;
1:     }
1: 
1:     /**
1:      * Invoke the preCall method on the interceptor
1:      * 
0:      * @param o
0:      *            : The Object being invoked
0:      * @param m
0:      *            : method
0:      * @param parameters
0:      *            : method paramters
0:      * @throws Throwable
1:      */
1:     public Object preInvoke(Object o, Method m, Object[] parameters)
1:             throws Throwable {
1:         Object callToken = NON_INVOKED;
1:         try {
1:               callToken = interceptor.preCall(cm, m, parameters);
1:         } catch (Throwable t) {
1:             postInvokeExceptionalReturn(callToken, o, m, t);
1:             throw t;
1:         }
1:         return callToken;
1:     }
1: 
1:     /**
1:      * Called when the method is called and returned normally
1:      * 
0:      * @param cm
0:      *            : component metadata
0:      * @param method
0:      *            : method
0:      * @param returnType
0:      *            : return type
0:      * @throws Throwable
1:      */
1:     public void postInvoke(Object token, Object o, Method method, 
1:          Object returnType) throws Throwable {
1: 
1:         if(token != NON_INVOKED) {
1:             try {
1:                 interceptor.postCallWithReturn(cm, method, returnType, token);
1:             } catch (Throwable t) {
1:                 LOGGER.debug("postCallInterceptorWithReturn", t);
1:                 throw t;
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Called when the method is called and returned with an exception
1:      * 
0:      * @param cm
0:      *            : component metadata
0:      * @param method
0:      *            : method
0:      * @param exception
0:      *            : exception thrown
1:      */
1:     public void postInvokeExceptionalReturn(Object token, Object o, Method method,
1:                  Throwable exception) throws Throwable {
1:         try {
1:             interceptor.postCallWithException(cm, method, exception, token);
1:         } catch (Throwable t) {
1:             // log the exception
1:             LOGGER.debug("postCallInterceptorWithException", t);
1:             throw t;
1:         }
1:     }
1: }
============================================================================