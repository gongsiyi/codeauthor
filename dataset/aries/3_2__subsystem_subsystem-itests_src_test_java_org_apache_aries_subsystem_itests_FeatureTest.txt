1:35094c6: /*
1:e8a0b01:  * Licensed to the Apache Software Foundation (ASF) under one
1:e8a0b01:  * or more contributor license agreements.  See the NOTICE file
1:e8a0b01:  * distributed with this work for additional information
1:e8a0b01:  * regarding copyright ownership.  The ASF licenses this file
1:e8a0b01:  * to you under the Apache License, Version 2.0 (the
1:e8a0b01:  * "License"); you may not use this file except in compliance
1:e8a0b01:  * with the License.  You may obtain a copy of the License at
1:e8a0b01:  *
1:e8a0b01:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e8a0b01:  *
1:e8a0b01:  * Unless required by applicable law or agreed to in writing,
1:e8a0b01:  * software distributed under the License is distributed on an
1:e8a0b01:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e8a0b01:  * KIND, either express or implied.  See the License for the
1:e8a0b01:  * specific language governing permissions and limitations
1:e8a0b01:  * under the License.
1:35094c6:  */
1:e8a0b01: package org.apache.aries.subsystem.itests;
1:e8a0b01: 
1:1c9c28b: import java.util.Collection;
1:e8a0b01: 
1:1c9c28b: import junit.framework.AssertionFailedError;
1:1c9c28b: 
1:67ef08f: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1:1c9c28b: import org.junit.Assert;
1:e8a0b01: import org.junit.Test;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:1c9c28b: import org.osgi.framework.Bundle;
1:0c3bb10: import org.osgi.framework.Version;
1:a1c6951: import org.osgi.framework.namespace.IdentityNamespace;
1:71fe81a: import org.osgi.resource.Resource;
1:e8a0b01: import org.osgi.service.subsystem.Subsystem;
1:e8a0b01: 
1:57b6627: @ExamReactorStrategy(PerMethod.class)
1:e8a0b01: public class FeatureTest extends SubsystemTest {
1:e8a0b01: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:0c3bb10: 		createApplication("feature2", new String[]{"tb2.jar", "tb3.jar"});
1:0d95583: 		createApplication("feature1", new String[]{"tb1.jar", "feature2.esa", "tb3.jar"});
1:1c9c28b: 		createApplication("feature3", new String[]{"tb3.jar"});
7:e8a0b01: 	}
1:1c9c28b: 
1:777b216: 	@Test
1:e8a0b01: 	public void testFeature1() throws Exception {
1:0d95583: 		Subsystem feature1 = installSubsystemFromFile("feature1.esa");
1:0c3bb10: 		Subsystem feature2 = null;
1:4717af0: 		AssertionError error = null;
3:e8a0b01: 		try {
1:0c3bb10: 			assertSymbolicName("org.apache.aries.subsystem.feature1", feature1);
1:0c3bb10: 			assertVersion("1.0.0", feature1);
1:d4676a1: 			assertConstituents(3, feature1);
1:0c3bb10: 			assertChildren(1, feature1);
1:0c3bb10: 			feature2 = feature1.getChildren().iterator().next();
1:d299aa1: 			assertEvent(feature2, Subsystem.State.INSTALLING, 5000);
1:d299aa1: 			assertEvent(feature2, Subsystem.State.INSTALLED, 5000);
1:0c3bb10: 			assertSymbolicName("org.apache.aries.subsystem.feature2", feature2);
1:0c3bb10: 			assertVersion("1.0.0", feature2);
1:a1c6951: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb2", Version.parseVersion("2.0.0"), IdentityNamespace.TYPE_BUNDLE);
1:a1c6951: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
1:0c3bb10: 			assertConstituents(2, feature2);
1:0c3bb10: 			assertChildren(0, feature2);
1:0c3bb10: 			startSubsystem(feature1);
1:d299aa1: 			assertEvent(feature2, Subsystem.State.RESOLVING, 5000);
1:d299aa1: 			assertEvent(feature2, Subsystem.State.RESOLVED, 5000);
1:d299aa1: 			assertEvent(feature2, Subsystem.State.STARTING, 5000);
1:d299aa1: 			assertEvent(feature2, Subsystem.State.ACTIVE, 5000);
1:0c3bb10: 			stopSubsystem(feature1);
1:d299aa1: 			assertEvent(feature2, Subsystem.State.STOPPING, 5000);
1:d299aa1: 			assertEvent(feature2, Subsystem.State.RESOLVED, 5000);
1:4717af0: 		}
1:4717af0: 		catch (AssertionError e) {
1:4717af0: 			error = e;
1:4717af0: 			throw e;
1:4717af0: 		}
1:e8a0b01: 		finally {
1:4717af0: 			try {
1:574fba9: 				uninstallSubsystem(feature1);
1:0c3bb10: 				if (feature2 != null) {
1:52b079f: 					assertEvent(feature2, Subsystem.State.INSTALLED, 5000);
1:d299aa1: 					assertEvent(feature2, Subsystem.State.UNINSTALLING, 5000);
1:d299aa1: 					assertEvent(feature2, Subsystem.State.UNINSTALLED, 5000);
1:0c3bb10: 					assertNotChild(feature1, feature2);
1:0c3bb10: 				}
1:0c3bb10: 			}
1:0c3bb10: 			catch (AssertionError e) {
1:0c3bb10: 				if (error == null)
1:0c3bb10: 					throw e;
1:0c3bb10: 				e.printStackTrace();
1:0c3bb10: 			}
1:0c3bb10: 		}
1:0c3bb10: 	}
1:0c3bb10: 	
1:0c3bb10: 	@Test
1:1c9c28b: 	public void testPersistence() throws Exception {
1:0d95583: 		Subsystem feature3Before = installSubsystemFromFile("feature3.esa");
1:1c9c28b: 		Subsystem feature3After = null;
1:1c9c28b: 		AssertionError error = null;
1:1c9c28b: 		try {
1:1c9c28b: 			assertFeature3(feature3Before);
1:1c9c28b: 			// Uninstall then reinstall the subsystem for a more robust test of the subsystem ID persistence.
1:574fba9: 			uninstallSubsystem(feature3Before);
1:0d95583: 			feature3Before = installSubsystemFromFile("feature3.esa");
1:1c9c28b: 			assertLastId(2);
1:1c9c28b: 			assertFeature3(feature3Before);
1:1c9c28b: 			Bundle bundle = getSubsystemCoreBundle();
1:1c9c28b: 			bundle.stop();
1:71ee087: 			resetLastId();
1:1c9c28b: 			bundle.start();
1:1c9c28b: 			Subsystem root = getRootSubsystem();
1:1c9c28b: 			assertChildren(1, root);
1:1c9c28b: 			feature3After = root.getChildren().iterator().next();
1:1c9c28b: 			assertLastId(2);
1:1c9c28b: 			assertFeature3(feature3After);
1:1c9c28b: 		}
1:1c9c28b: 		catch (AssertionError e) {
1:1c9c28b: 			error = e;
1:1c9c28b: 			throw e;
1:1c9c28b: 		}
1:1c9c28b: 		finally {
1:1c9c28b: 			try {
1:d299aa1: 				if (feature3After != null) {
1:574fba9: 					uninstallSubsystem(feature3After);
1:d299aa1: 				}
1:1c9c28b: 			}
1:1c9c28b: 			catch (AssertionError e) {
1:1c9c28b: 				if (error == null)
1:1c9c28b: 					throw e;
1:1c9c28b: 				e.printStackTrace();
1:1c9c28b: 			}
1:1c9c28b: 		}
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	@Test
1:1c9c28b: 	public void testSharedContent() throws Exception {
1:0d95583: 		Subsystem feature1 = installSubsystemFromFile("feature1.esa");
1:0c3bb10: 		AssertionError error = null;
1:0c3bb10: 		try {
1:a1c6951: 			assertConstituent(feature1, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
1:0c3bb10: 			Subsystem feature2 = feature1.getChildren().iterator().next();
1:0c3bb10: 			// TODO This needs to be better implemented and put into a utility method on the superclass.
1:0c3bb10: 			while (!feature2.getState().equals(Subsystem.State.INSTALLED))
1:0c3bb10: 				Thread.sleep(100);
1:a1c6951: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
1:574fba9: 			uninstallSubsystem(feature2);
1:0c3bb10: 			assertNotChild(feature1, feature2);
1:a1c6951: 			assertConstituent(feature1, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
1:0c3bb10: 		}
1:0c3bb10: 		catch (AssertionError e) {
1:0c3bb10: 			error = e;
1:0c3bb10: 			throw e;
1:0c3bb10: 		}
1:0c3bb10: 		finally {
1:0c3bb10: 			try {
1:574fba9: 				uninstallSubsystem(feature1);
1:4717af0: 			}
1:4717af0: 			catch (AssertionError e) {
1:4717af0: 				if (error == null)
1:4717af0: 					throw e;
1:4717af0: 				e.printStackTrace();
1:e8a0b01: 			}
1:e8a0b01: 		}
1:e8a0b01: 	}
1:e8a0b01: 	
1:1c9c28b: 	private void assertContainsConstituent(Collection<Resource> constituents, Resource constituent) {
1:1c9c28b: 		for (Resource resource : constituents) {
1:1c9c28b: 			if (ResourceHelper.areEqual(constituent, resource))
1:1c9c28b: 				return;
1:1c9c28b: 		}
1:1c9c28b: 		Assert.fail("Constituent not found");
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	private void assertContainsChild(Collection<Subsystem> children, Subsystem child) {
1:1c9c28b: 		for (Subsystem subsystem : children) {
1:1c9c28b: 			try {
1:1c9c28b: 				assertEquals(child, subsystem);
1:1c9c28b: 				return;
1:1c9c28b: 			}
1:1c9c28b: 			catch (AssertionError e) {}
1:1c9c28b: 		}
1:1c9c28b: 		Assert.fail("Child not found");
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	private void assertEquals(Subsystem subsystem1, Subsystem subsystem2) {
1:1c9c28b: 		assertChildrenEqual(subsystem1.getChildren(), subsystem2.getChildren());
1:1c9c28b: 		assertConstituentsEqual(subsystem1.getConstituents(), subsystem2.getConstituents());
1:1c9c28b: 		Assert.assertEquals("Headers were not equal", subsystem1.getSubsystemHeaders(null), subsystem2.getSubsystemHeaders(null));
1:1c9c28b: 		Assert.assertEquals("Locations were not equal", subsystem1.getLocation(), subsystem2.getLocation());
1:1c9c28b: 		assertParentsEqual(subsystem1.getParents(), subsystem2.getParents());
1:1c9c28b: 		Assert.assertEquals("States were not equal", subsystem1.getState(), subsystem2.getState());
1:1c9c28b: 		Assert.assertEquals("IDs were not equal", subsystem1.getSubsystemId(), subsystem2.getSubsystemId());
1:1c9c28b: 		Assert.assertEquals("Symbolic names were not equal", subsystem1.getSymbolicName(), subsystem2.getSymbolicName());
1:1c9c28b: 		Assert.assertEquals("Versions were not equal", subsystem1.getVersion(), subsystem2.getVersion());
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	private void assertParentsEqual(Subsystem parent1, Subsystem parent2) {
1:1c9c28b: 		if (parent1 == null || parent2 == null) {
1:1c9c28b: 			Assert.assertTrue("Parents were not equal", parent1 == null && parent2 == null);
1:1c9c28b: 			return;
1:1c9c28b: 		}
1:1c9c28b: 		assertConstituentsEqual(parent1.getConstituents(), parent2.getConstituents());
1:1c9c28b: 		Assert.assertEquals("Headers were not equal", parent1.getSubsystemHeaders(null), parent2.getSubsystemHeaders(null));
1:1c9c28b: 		Assert.assertEquals("Locations were not equal", parent1.getLocation(), parent2.getLocation());
1:1c9c28b: 		assertParentsEqual(parent1.getParents(), parent2.getParents());
1:1c9c28b: 		Assert.assertEquals("States were not equal", parent1.getState(), parent2.getState());
1:1c9c28b: 		Assert.assertEquals("IDs were not equal", parent1.getSubsystemId(), parent2.getSubsystemId());
1:1c9c28b: 		Assert.assertEquals("Symbolic names were not equal", parent1.getSymbolicName(), parent2.getSymbolicName());
1:1c9c28b: 		Assert.assertEquals("Versions were not equal", parent1.getVersion(), parent2.getVersion());
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	private void assertParentsEqual(Subsystem parent1, Collection<Subsystem> parents2) {
1:1c9c28b: 		for (Subsystem parent2 : parents2) {
1:1c9c28b: 			try {
1:1c9c28b: 				assertParentsEqual(parent1, parent2);
1:1c9c28b: 				return;
1:1c9c28b: 			}
1:1c9c28b: 			catch (AssertionFailedError e) {}
1:1c9c28b: 		}
1:1c9c28b: 		Assert.fail("Parent not found: " + parent1.getSymbolicName());
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	private void assertParentsEqual(Collection<Subsystem> parents1, Collection<Subsystem> parents2) {
1:1c9c28b: 		Assert.assertEquals("Size not equal", parents1.size(), parents2.size());
1:1c9c28b: 		for (Subsystem parent1 : parents1) {
1:1c9c28b: 			assertParentsEqual(parent1, parents2);
1:1c9c28b: 		}
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	private void assertConstituentsEqual(Collection<Resource> resources1, Collection<Resource> resources2) {
1:1c9c28b: 		Assert.assertEquals("Constituent size does not match", resources1.size(), resources2.size());
1:1c9c28b: 		for (Resource resource : resources1) {
1:1c9c28b: 			assertContainsConstituent(resources2, resource);
1:1c9c28b: 		}
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	private void assertChildrenEqual(Collection<Subsystem> subsystems1, Collection<Subsystem> subsystems2) {
1:1c9c28b: 		Assert.assertEquals("Children size does not match", subsystems1.size(), subsystems2.size());
1:1c9c28b: 		for (Subsystem subsystem : subsystems1) {
1:1c9c28b: 			assertContainsChild(subsystems2, subsystem);
1:1c9c28b: 		}
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	private void assertFeature3(Subsystem subsystem) {
1:1c9c28b: 		assertChildren(0, subsystem);
1:1c9c28b: 		assertConstituents(1, subsystem);
1:a1c6951: 		assertConstituent(subsystem, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
1:1c9c28b: //		subsystem.getHeaders();
1:1c9c28b: //		subsystem.getHeaders("");
1:1c9c28b: //		subsystem.getState();
1:1c9c28b: 		assertSymbolicName("org.apache.aries.subsystem.feature3", subsystem);
1:1c9c28b: 		assertVersion("0.0.0", subsystem);
1:1c9c28b: 	}
1:e8a0b01: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: @ExamReactorStrategy(PerMethod.class)
1: 	@Override
1: 	public void createApplications() throws Exception {
author:John Ross
-------------------------------------------------------------------------------
commit:71ee087
/////////////////////////////////////////////////////////////////////////
1: 			resetLastId();
commit:d4676a1
/////////////////////////////////////////////////////////////////////////
1: 			assertConstituents(3, feature1);
commit:2b13b05
/////////////////////////////////////////////////////////////////////////
commit:777b216
/////////////////////////////////////////////////////////////////////////
1: 	@Test
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.core.internal.ResourceHelper;
commit:52b079f
/////////////////////////////////////////////////////////////////////////
1: 					assertEvent(feature2, Subsystem.State.INSTALLED, 5000);
commit:35094c6
/////////////////////////////////////////////////////////////////////////
1: 	/*
0: 	 * Persistence needs to be refactored based on directory structure changes.
1: 	 */
0: 	//@Test
commit:574fba9
/////////////////////////////////////////////////////////////////////////
1: 				uninstallSubsystem(feature1);
/////////////////////////////////////////////////////////////////////////
1: 			uninstallSubsystem(feature3Before);
/////////////////////////////////////////////////////////////////////////
1: 					uninstallSubsystem(feature3After);
/////////////////////////////////////////////////////////////////////////
1: 			uninstallSubsystem(feature2);
/////////////////////////////////////////////////////////////////////////
1: 				uninstallSubsystem(feature1);
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:a1c6951
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
/////////////////////////////////////////////////////////////////////////
1: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb2", Version.parseVersion("2.0.0"), IdentityNamespace.TYPE_BUNDLE);
1: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
/////////////////////////////////////////////////////////////////////////
1: 			assertConstituent(feature1, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
1: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
1: 			assertConstituent(feature1, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
/////////////////////////////////////////////////////////////////////////
1: 		assertConstituent(subsystem, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), IdentityNamespace.TYPE_BUNDLE);
commit:0d95583
/////////////////////////////////////////////////////////////////////////
0: 		FileOutputStream fos = new FileOutputStream(name + ".esa");
/////////////////////////////////////////////////////////////////////////
1: 		createApplication("feature1", new String[]{"tb1.jar", "feature2.esa", "tb3.jar"});
1: 		Subsystem feature1 = installSubsystemFromFile("feature1.esa");
/////////////////////////////////////////////////////////////////////////
1: 		Subsystem feature3Before = installSubsystemFromFile("feature3.esa");
1: 			feature3Before = installSubsystemFromFile("feature3.esa");
/////////////////////////////////////////////////////////////////////////
1: 		Subsystem feature1 = installSubsystemFromFile("feature1.esa");
commit:a677a53
/////////////////////////////////////////////////////////////////////////
0: 				uninstallUnscopedSubsystem(feature1);
/////////////////////////////////////////////////////////////////////////
0: 			uninstallUnscopedSubsystem(feature3Before);
/////////////////////////////////////////////////////////////////////////
0: 					uninstallUnscopedSubsystem(feature3After);
/////////////////////////////////////////////////////////////////////////
0: 			uninstallUnscopedSubsystem(feature2);
/////////////////////////////////////////////////////////////////////////
0: 				uninstallUnscopedSubsystem(feature1);
commit:d299aa1
/////////////////////////////////////////////////////////////////////////
1: 			assertEvent(feature2, Subsystem.State.INSTALLING, 5000);
1: 			assertEvent(feature2, Subsystem.State.INSTALLED, 5000);
1: 			assertEvent(feature2, Subsystem.State.RESOLVING, 5000);
1: 			assertEvent(feature2, Subsystem.State.RESOLVED, 5000);
1: 			assertEvent(feature2, Subsystem.State.STARTING, 5000);
1: 			assertEvent(feature2, Subsystem.State.ACTIVE, 5000);
1: 			assertEvent(feature2, Subsystem.State.STOPPING, 5000);
1: 			assertEvent(feature2, Subsystem.State.RESOLVED, 5000);
/////////////////////////////////////////////////////////////////////////
1: 					assertEvent(feature2, Subsystem.State.UNINSTALLING, 5000);
1: 					assertEvent(feature2, Subsystem.State.UNINSTALLED, 5000);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				if (feature3After != null) {
0: 					stopSubsystem(feature3After);
1: 				}
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import junit.framework.AssertionFailedError;
1: 
0: import org.apache.aries.subsystem.core.ResourceHelper;
1: import org.junit.Assert;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.resource.Resource;
/////////////////////////////////////////////////////////////////////////
1: 		createApplication("feature3", new String[]{"tb3.jar"});
/////////////////////////////////////////////////////////////////////////
0: //			assertEvent(feature2, Subsystem.State.INSTALLING, 5000);
0: //			assertEvent(feature2, Subsystem.State.INSTALLED, 5000);
0: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb2", Version.parseVersion("2.0.0"), ResourceConstants.IDENTITY_TYPE_BUNDLE);
0: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), ResourceConstants.IDENTITY_TYPE_BUNDLE);
0: //			assertEvent(feature2, Subsystem.State.RESOLVING, 5000);
0: //			assertEvent(feature2, Subsystem.State.RESOLVED, 5000);
0: //			assertEvent(feature2, Subsystem.State.STARTING, 5000);
0: //			assertEvent(feature2, Subsystem.State.ACTIVE, 5000);
0: //			assertEvent(feature2, Subsystem.State.STOPPING, 5000);
0: //			assertEvent(feature2, Subsystem.State.RESOLVED, 5000);
/////////////////////////////////////////////////////////////////////////
0: //					assertEvent(feature2, Subsystem.State.UNINSTALLING, 5000);
0: //					assertEvent(feature2, Subsystem.State.UNINSTALLED, 5000);
/////////////////////////////////////////////////////////////////////////
1: 	public void testPersistence() throws Exception {
0: 		Subsystem feature3Before = installSubsystemFromFile("feature3.ssa");
1: 		Subsystem feature3After = null;
1: 		AssertionError error = null;
1: 		try {
1: 			assertFeature3(feature3Before);
1: 			// Uninstall then reinstall the subsystem for a more robust test of the subsystem ID persistence.
0: 			uninstallSubsystem(feature3Before);
0: 			feature3Before = installSubsystemFromFile("feature3.ssa");
1: 			assertLastId(2);
1: 			assertFeature3(feature3Before);
1: 			Bundle bundle = getSubsystemCoreBundle();
1: 			bundle.stop();
1: 			bundle.start();
1: 			Subsystem root = getRootSubsystem();
1: 			assertChildren(1, root);
1: 			feature3After = root.getChildren().iterator().next();
1: 			assertLastId(2);
1: 			assertFeature3(feature3After);
0: 			assertEquals(feature3Before, feature3After);
1: 		}
1: 		catch (AssertionError e) {
1: 			error = e;
1: 			throw e;
1: 		}
1: 		finally {
1: 			try {
0: 				if (feature3After != null)
0: 					uninstallSubsystem(feature3After);
1: 			}
1: 			catch (AssertionError e) {
1: 				if (error == null)
1: 					throw e;
1: 				e.printStackTrace();
1: 			}
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testSharedContent() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private void assertContainsConstituent(Collection<Resource> constituents, Resource constituent) {
1: 		for (Resource resource : constituents) {
1: 			if (ResourceHelper.areEqual(constituent, resource))
1: 				return;
1: 		}
1: 		Assert.fail("Constituent not found");
1: 	}
1: 	
1: 	private void assertContainsChild(Collection<Subsystem> children, Subsystem child) {
1: 		for (Subsystem subsystem : children) {
1: 			try {
1: 				assertEquals(child, subsystem);
1: 				return;
1: 			}
1: 			catch (AssertionError e) {}
1: 		}
1: 		Assert.fail("Child not found");
1: 	}
1: 	
1: 	private void assertEquals(Subsystem subsystem1, Subsystem subsystem2) {
1: 		assertChildrenEqual(subsystem1.getChildren(), subsystem2.getChildren());
1: 		assertConstituentsEqual(subsystem1.getConstituents(), subsystem2.getConstituents());
1: 		Assert.assertEquals("Headers were not equal", subsystem1.getSubsystemHeaders(null), subsystem2.getSubsystemHeaders(null));
1: 		Assert.assertEquals("Locations were not equal", subsystem1.getLocation(), subsystem2.getLocation());
1: 		assertParentsEqual(subsystem1.getParents(), subsystem2.getParents());
1: 		Assert.assertEquals("States were not equal", subsystem1.getState(), subsystem2.getState());
1: 		Assert.assertEquals("IDs were not equal", subsystem1.getSubsystemId(), subsystem2.getSubsystemId());
1: 		Assert.assertEquals("Symbolic names were not equal", subsystem1.getSymbolicName(), subsystem2.getSymbolicName());
1: 		Assert.assertEquals("Versions were not equal", subsystem1.getVersion(), subsystem2.getVersion());
1: 	}
1: 	
1: 	private void assertParentsEqual(Subsystem parent1, Subsystem parent2) {
1: 		if (parent1 == null || parent2 == null) {
1: 			Assert.assertTrue("Parents were not equal", parent1 == null && parent2 == null);
1: 			return;
1: 		}
1: 		assertConstituentsEqual(parent1.getConstituents(), parent2.getConstituents());
1: 		Assert.assertEquals("Headers were not equal", parent1.getSubsystemHeaders(null), parent2.getSubsystemHeaders(null));
1: 		Assert.assertEquals("Locations were not equal", parent1.getLocation(), parent2.getLocation());
1: 		assertParentsEqual(parent1.getParents(), parent2.getParents());
1: 		Assert.assertEquals("States were not equal", parent1.getState(), parent2.getState());
1: 		Assert.assertEquals("IDs were not equal", parent1.getSubsystemId(), parent2.getSubsystemId());
1: 		Assert.assertEquals("Symbolic names were not equal", parent1.getSymbolicName(), parent2.getSymbolicName());
1: 		Assert.assertEquals("Versions were not equal", parent1.getVersion(), parent2.getVersion());
1: 	}
1: 	
1: 	private void assertParentsEqual(Subsystem parent1, Collection<Subsystem> parents2) {
1: 		for (Subsystem parent2 : parents2) {
1: 			try {
1: 				assertParentsEqual(parent1, parent2);
1: 				return;
1: 			}
1: 			catch (AssertionFailedError e) {}
1: 		}
1: 		Assert.fail("Parent not found: " + parent1.getSymbolicName());
1: 	}
1: 	
1: 	private void assertParentsEqual(Collection<Subsystem> parents1, Collection<Subsystem> parents2) {
1: 		Assert.assertEquals("Size not equal", parents1.size(), parents2.size());
1: 		for (Subsystem parent1 : parents1) {
1: 			assertParentsEqual(parent1, parents2);
1: 		}
1: 	}
1: 	
1: 	private void assertConstituentsEqual(Collection<Resource> resources1, Collection<Resource> resources2) {
1: 		Assert.assertEquals("Constituent size does not match", resources1.size(), resources2.size());
1: 		for (Resource resource : resources1) {
1: 			assertContainsConstituent(resources2, resource);
1: 		}
1: 	}
1: 	
1: 	private void assertChildrenEqual(Collection<Subsystem> subsystems1, Collection<Subsystem> subsystems2) {
1: 		Assert.assertEquals("Children size does not match", subsystems1.size(), subsystems2.size());
1: 		for (Subsystem subsystem : subsystems1) {
1: 			assertContainsChild(subsystems2, subsystem);
1: 		}
1: 	}
1: 	
1: 	private void assertFeature3(Subsystem subsystem) {
1: 		assertChildren(0, subsystem);
1: 		assertConstituents(1, subsystem);
0: 		assertConstituent(subsystem, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), ResourceConstants.IDENTITY_TYPE_BUNDLE);
1: //		subsystem.getHeaders();
1: //		subsystem.getHeaders("");
1: //		subsystem.getState();
1: 		assertSymbolicName("org.apache.aries.subsystem.feature3", subsystem);
1: 		assertVersion("0.0.0", subsystem);
1: 	}
commit:0c3bb10
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Version;
0: import org.osgi.framework.resource.ResourceConstants;
/////////////////////////////////////////////////////////////////////////
1: 		createApplication("feature2", new String[]{"tb2.jar", "tb3.jar"});
0: 		createApplication("feature1", new String[]{"tb1.jar", "feature2.ssa", "tb3.jar"});
0: 		Subsystem feature1 = installSubsystemFromFile("feature1.ssa");
1: 		Subsystem feature2 = null;
1: 			assertSymbolicName("org.apache.aries.subsystem.feature1", feature1);
1: 			assertVersion("1.0.0", feature1);
0: 			assertConstituents(5, feature1);
1: 			assertChildren(1, feature1);
1: 			feature2 = feature1.getChildren().iterator().next();
0: 			assertEvent(feature2, Subsystem.State.INSTALLING, SubsystemConstants.EVENT_TYPE.INSTALLING, 5000);
0: 			assertEvent(feature2, Subsystem.State.INSTALLED, SubsystemConstants.EVENT_TYPE.INSTALLED, 5000);
1: 			assertSymbolicName("org.apache.aries.subsystem.feature2", feature2);
1: 			assertVersion("1.0.0", feature2);
1: 			assertConstituents(2, feature2);
1: 			assertChildren(0, feature2);
1: 			startSubsystem(feature1);
0: 			assertEvent(feature2, Subsystem.State.RESOLVING, SubsystemConstants.EVENT_TYPE.RESOLVING, 5000);
0: 			assertEvent(feature2, Subsystem.State.RESOLVED, SubsystemConstants.EVENT_TYPE.RESOLVED, 5000);
0: 			assertEvent(feature2, Subsystem.State.STARTING, SubsystemConstants.EVENT_TYPE.STARTING, 5000);
0: 			assertEvent(feature2, Subsystem.State.ACTIVE, SubsystemConstants.EVENT_TYPE.STARTED, 5000);
1: 			stopSubsystem(feature1);
0: 			assertEvent(feature2, Subsystem.State.STOPPING, SubsystemConstants.EVENT_TYPE.STOPPING, 5000);
0: 			assertEvent(feature2, Subsystem.State.RESOLVED, SubsystemConstants.EVENT_TYPE.STOPPED, 5000);
/////////////////////////////////////////////////////////////////////////
0: 				uninstallSubsystem(feature1);
1: 				if (feature2 != null) {
0: 					assertEvent(feature2, Subsystem.State.UNINSTALLING, SubsystemConstants.EVENT_TYPE.UNINSTALLING, 5000);
0: 					assertEvent(feature2, Subsystem.State.UNINSTALLED, SubsystemConstants.EVENT_TYPE.UNINSTALLED, 5000);
0: 					// TODO Test internal events for uninstalling.
1: 					assertNotChild(feature1, feature2);
1: 				}
1: 			}
1: 			catch (AssertionError e) {
1: 				if (error == null)
1: 					throw e;
1: 				e.printStackTrace();
1: 			}
1: 		}
1: 	}
1: 	
1: 	@Test
0: 	public void testSharedFeatureResource() throws Exception {
0: 		Subsystem feature1 = installSubsystemFromFile("feature1.ssa");
1: 		AssertionError error = null;
1: 		try {
0: 			assertConstituent(feature1, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), ResourceConstants.IDENTITY_TYPE_BUNDLE);
1: 			Subsystem feature2 = feature1.getChildren().iterator().next();
1: 			// TODO This needs to be better implemented and put into a utility method on the superclass.
1: 			while (!feature2.getState().equals(Subsystem.State.INSTALLED))
1: 				Thread.sleep(100);
0: 			assertConstituent(feature2, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), ResourceConstants.IDENTITY_TYPE_BUNDLE);
0: 			uninstallSubsystem(feature2);
1: 			assertNotChild(feature1, feature2);
0: 			assertConstituent(feature1, "org.apache.aries.subsystem.itests.tb3", Version.parseVersion("1.0.0"), ResourceConstants.IDENTITY_TYPE_BUNDLE);
1: 		}
1: 		catch (AssertionError e) {
1: 			error = e;
1: 			throw e;
1: 		}
1: 		finally {
1: 			try {
0: 				uninstallSubsystem(feature1);
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.INSTALLING, SubsystemConstants.EVENT_TYPE.INSTALLING, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.INSTALLED, SubsystemConstants.EVENT_TYPE.INSTALLED, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.RESOLVING, SubsystemConstants.EVENT_TYPE.RESOLVING, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.RESOLVED, SubsystemConstants.EVENT_TYPE.RESOLVED, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.STARTING, SubsystemConstants.EVENT_TYPE.STARTING, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.ACTIVE, SubsystemConstants.EVENT_TYPE.STARTED, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.STOPPING, SubsystemConstants.EVENT_TYPE.STOPPING, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.RESOLVED, SubsystemConstants.EVENT_TYPE.STOPPED, 5000);
/////////////////////////////////////////////////////////////////////////
0: 				assertEvent(child, Subsystem.State.UNINSTALLING, SubsystemConstants.EVENT_TYPE.UNINSTALLING, 5000);
0: 				assertEvent(child, Subsystem.State.UNINSTALLED, SubsystemConstants.EVENT_TYPE.UNINSTALLED, 5000);
commit:4717af0
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.service.subsystem.SubsystemConstants;
/////////////////////////////////////////////////////////////////////////
1: 		AssertionError error = null;
0: 			assertConstituents(4, subsystem);
0: 			assertChildren(1, subsystem);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.INSTALLING, SubsystemConstants.EventType.INSTALLING, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.INSTALLED, SubsystemConstants.EventType.INSTALLED, 5000);
0: 			assertSymbolicName("org.apache.aries.subsystem.feature2", subsystem.getChildren().iterator().next());
0: 			assertVersion("1.0.0", subsystem.getChildren().iterator().next());
0: 			assertConstituents(1, subsystem.getChildren().iterator().next());
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.RESOLVING, SubsystemConstants.EventType.RESOLVING, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.RESOLVED, SubsystemConstants.EventType.RESOLVED, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.STARTING, SubsystemConstants.EventType.STARTING, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.ACTIVE, SubsystemConstants.EventType.STARTED, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.STOPPING, SubsystemConstants.EventType.STOPPING, 5000);
0: 			assertEvent(subsystem.getChildren().iterator().next(), Subsystem.State.RESOLVED, SubsystemConstants.EventType.STOPPED, 5000);
1: 		catch (AssertionError e) {
1: 			error = e;
1: 			throw e;
1: 		}
1: 			try {
0: 				Subsystem child = subsystem.getChildren().iterator().next();
0: 				uninstallSubsystem(subsystem);
0: 				assertEvent(child, Subsystem.State.UNINSTALLING, SubsystemConstants.EventType.UNINSTALLING, 5000);
0: 				assertEvent(child, Subsystem.State.UNINSTALLED, SubsystemConstants.EventType.UNINSTALLED, 5000);
0: 				// TODO Test internal events for uninstalling.
0: 				assertNotChild(subsystem, child);
1: 			}
1: 			catch (AssertionError e) {
1: 				if (error == null)
1: 					throw e;
1: 				e.printStackTrace();
1: 			}
commit:226c63f
/////////////////////////////////////////////////////////////////////////
0: 			assertConstituents(3, subsystem);
commit:e6bf465
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.itests.util.Utils;
/////////////////////////////////////////////////////////////////////////
0: 			assertConstituents(2, subsystem);
commit:e8a0b01
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.subsystem.itests;
1: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
1: 
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.service.subsystem.Subsystem;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class FeatureTest extends SubsystemTest {
0: 	private static void createApplication(String name, String[] content) throws Exception {
0: 		ZipFixture feature = ArchiveFixture
0: 				.newZip()
0: 				.binary("OSGI-INF/SUBSYSTEM.MF",
0: 						FeatureTest.class.getClassLoader().getResourceAsStream(
0: 								name + "/OSGI-INF/SUBSYSTEM.MF"));
0: 		for (String s : content) {
1: 			try {
0: 				feature.binary(s,
0: 						FeatureTest.class.getClassLoader().getResourceAsStream(
0: 								name + '/' + s));
1: 			}
0: 			catch (Exception e) {
0: 				feature.binary(s, new FileInputStream(new File(s)));
1: 			}
1: 		}
0: 		feature.end();
0: 		FileOutputStream fos = new FileOutputStream(name + ".ssa");
1: 		try {
0: 			feature.writeOut(fos);
0: 		} finally {
0: 			Utils.closeQuietly(fos);
1: 		}
1: 	}
1: 	
0: 	@Before
0: 	public static void createApplications() throws Exception {
0: 		if (createdApplications) {
0: 			return;
1: 		}
0: 		createApplication("feature2", new String[]{"tb2.jar"});
0: 		createApplication("feature1", new String[]{"tb1.jar", "feature2.ssa"});
0: 		createdApplications = true;
1: 	}
1: 
0: 	@Test
1: 	public void testFeature1() throws Exception {
0: 		Subsystem subsystem = installSubsystemFromFile("feature1.ssa");
1: 		try {
0: 			assertSymbolicName("org.apache.aries.subsystem.feature1", subsystem);
0: 			assertVersion("1.0.0", subsystem);
0: 			assertConstituents(1, subsystem);
0: 			// TODO Test internal events for installation.
0: 			startSubsystem(subsystem);
0: 			// TODO Test internal events for starting.
0: 			stopSubsystem(subsystem);
0: 			// TODO Test internal events for stopping.
1: 		}
1: 		finally {
0: 			uninstallSubsystem(subsystem);
0: 			// TODO Test internal events for uninstalling.
1: 		}
1: 	}
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================