1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
2:1129914: 
1:a990e32: import java.util.HashMap;
1:a990e32: import java.util.Map;
1:a990e32: 
1:1129914: public class DirectiveFactory {
1:a990e32: 	private interface Creator {
1:a990e32: 		Directive create(String value);
1:a990e32: 	}
1:a990e32: 	
1:a990e32: 	private static final Map<String, Creator> map = new HashMap<String, Creator>();
1:a990e32: 	
1:a990e32: 	static {
1:a990e32: 		map.put(AriesProvisionDependenciesDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return AriesProvisionDependenciesDirective.getInstance(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 		map.put(CardinalityDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return CardinalityDirective.getInstance(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 		map.put(EffectiveDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return EffectiveDirective.getInstance(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 		map.put(FilterDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return new FilterDirective(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 		map.put(ProvisionPolicyDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return ProvisionPolicyDirective.getInstance(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 		map.put(ReferenceDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return ReferenceDirective.getInstance(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 		map.put(ResolutionDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return ResolutionDirective.getInstance(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 		map.put(StartOrderDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return new StartOrderDirective(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 		map.put(VisibilityDirective.NAME, new Creator() {
1:a990e32: 			@Override
1:a990e32: 			public Directive create(String value) {
1:a990e32: 				return VisibilityDirective.getInstance(value);
1:a990e32: 			}
1:a990e32: 		});
1:a990e32: 	}
1:a990e32: 	
1:1129914: 	public static Directive createDirective(String name, String value) {
1:a990e32: 		Creator creator = map.get(name);
1:a990e32: 		if (creator == null) {
1:a990e32: 			return new GenericDirective(name, value);
1:a990e32: 		}
1:a990e32: 		return creator.create(value);
2:1129914: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: 	private interface Creator {
1: 		Directive create(String value);
1: 	}
1: 	
1: 	private static final Map<String, Creator> map = new HashMap<String, Creator>();
1: 	
1: 	static {
1: 		map.put(AriesProvisionDependenciesDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return AriesProvisionDependenciesDirective.getInstance(value);
1: 			}
1: 		});
1: 		map.put(CardinalityDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return CardinalityDirective.getInstance(value);
1: 			}
1: 		});
1: 		map.put(EffectiveDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return EffectiveDirective.getInstance(value);
1: 			}
1: 		});
1: 		map.put(FilterDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return new FilterDirective(value);
1: 			}
1: 		});
1: 		map.put(ProvisionPolicyDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return ProvisionPolicyDirective.getInstance(value);
1: 			}
1: 		});
1: 		map.put(ReferenceDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return ReferenceDirective.getInstance(value);
1: 			}
1: 		});
1: 		map.put(ResolutionDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return ResolutionDirective.getInstance(value);
1: 			}
1: 		});
1: 		map.put(StartOrderDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return new StartOrderDirective(value);
1: 			}
1: 		});
1: 		map.put(VisibilityDirective.NAME, new Creator() {
1: 			@Override
1: 			public Directive create(String value) {
1: 				return VisibilityDirective.getInstance(value);
1: 			}
1: 		});
1: 	}
1: 	
1: 		Creator creator = map.get(name);
1: 		if (creator == null) {
1: 			return new GenericDirective(name, value);
1: 		}
1: 		return creator.create(value);
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
0: 		if (CardinalityDirective.NAME.equals(name))
0: 			return CardinalityDirective.getInstance(value);
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
0: 		if (ReferenceDirective.NAME.equals(name))
0: 			return ReferenceDirective.getInstance(value);
commit:875a6d6
/////////////////////////////////////////////////////////////////////////
0: 		if (ProvisionPolicyDirective.NAME.equals(name))
0: 			return ProvisionPolicyDirective.getInstance(value);
commit:47d9366
/////////////////////////////////////////////////////////////////////////
0: 		if (VisibilityDirective.NAME.equals(name))
0: 			return VisibilityDirective.getInstance(value);
commit:c1afebc
/////////////////////////////////////////////////////////////////////////
0: 		if (EffectiveDirective.NAME.equals(name))
0: 			return EffectiveDirective.getInstance(value);
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
0: 		if (FilterDirective.NAME.equals(name))
0: 			return new FilterDirective(value);
commit:4717af0
/////////////////////////////////////////////////////////////////////////
0: 		if (ResolutionDirective.NAME.equals(name))
0: 		if (StartOrderDirective.NAME.equals(name))
0: 			return new StartOrderDirective(value);
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
0: import org.osgi.framework.Constants;
1: 
1: public class DirectiveFactory {
1: 	public static Directive createDirective(String name, String value) {
0: 		if (Constants.RESOLUTION_DIRECTIVE.equals(name)) {
0: 			return ResolutionDirective.getInstance(value);
1: 		}
0: 		return new GenericDirective(name, value);
1: 	}
1: }
============================================================================