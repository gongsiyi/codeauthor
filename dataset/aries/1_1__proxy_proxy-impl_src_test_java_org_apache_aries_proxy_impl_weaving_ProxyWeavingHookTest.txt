1:48caea3: /*
1:48caea3:  * Licensed to the Apache Software Foundation (ASF) under one
1:48caea3:  * or more contributor license agreements.  See the NOTICE file
1:48caea3:  * distributed with this work for additional information
1:48caea3:  * regarding copyright ownership.  The ASF licenses this file
1:48caea3:  * to you under the Apache License, Version 2.0 (the
1:48caea3:  * "License"); you may not use this file except in compliance
1:48caea3:  * with the License.  You may obtain a copy of the License at
1:48caea3:  *
1:48caea3:  *   http://www.apache.org/licenses/LICENSE-2.0
1:48caea3:  *
1:48caea3:  * Unless required by applicable law or agreed to in writing,
1:48caea3:  * software distributed under the License is distributed on an
1:48caea3:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:48caea3:  * KIND, either express or implied.  See the License for the
1:48caea3:  * specific language governing permissions and limitations
1:48caea3:  * under the License.
1:48caea3:  */
1:48caea3: package org.apache.aries.proxy.impl.weaving;
1:48caea3: 
1:48caea3: import java.lang.reflect.InvocationHandler;
1:48caea3: import java.lang.reflect.Method;
1:48caea3: import java.lang.reflect.Proxy;
1:48caea3: 
1:48caea3: import org.junit.Test;
1:48caea3: import org.osgi.framework.BundleContext;
1:48caea3: 
1:48caea3: import static org.junit.Assert.assertFalse;
1:48caea3: import static org.junit.Assert.assertTrue;
1:48caea3: 
1:48caea3: public class ProxyWeavingHookTest {
1:48caea3: 
1:48caea3:     @Test
1:48caea3:     public void tesDefault() {
1:48caea3:         BundleContext ctx = (BundleContext) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { BundleContext.class },
1:48caea3:                 new InvocationHandler() {
1:48caea3:                     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
1:48caea3:                         return null;
1:48caea3:                     }
1:48caea3:                 });
1:48caea3:         ProxyWeavingHook hook = new ProxyWeavingHook(ctx);
1:48caea3:         assertTrue(hook.isEnabled("org.apache.foo.Bar"));
1:48caea3:         assertTrue(hook.isDisabled("javax.foo.Bar"));
1:48caea3:     }
1:48caea3: 
1:48caea3:     @Test
1:48caea3:     public void testFilters() {
1:48caea3:         BundleContext ctx = (BundleContext) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { BundleContext.class },
1:48caea3:                 new InvocationHandler() {
1:48caea3:                     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
1:48caea3:                         if (method.getName().equals("getProperty")) {
1:48caea3:                             if (ProxyWeavingHook.WEAVING_ENABLED_CLASSES.equals(args[0])) {
1:48caea3:                                 return "";
1:48caea3:                             }
1:48caea3:                             if (ProxyWeavingHook.WEAVING_DISABLED_CLASSES.equals(args[0])) {
1:48caea3:                                 return "org.apache.foo.*";
1:48caea3:                             }
1:48caea3:                         }
1:48caea3:                         return null;
1:48caea3:                     }
1:48caea3:                 });
1:48caea3:         ProxyWeavingHook hook = new ProxyWeavingHook(ctx);
1:48caea3:         assertFalse(hook.isEnabled("org.apache.foo.Bar"));
1:48caea3:         assertTrue(hook.isDisabled("org.apache.foo.Bar"));
1:48caea3:         assertTrue(hook.isDisabled("org.apache.foo.bar.Bar"));
1:48caea3:         assertFalse(hook.isDisabled("org.apache.fooBar"));
1:48caea3:         assertFalse(hook.isDisabled("orgXapache.foo.Bar"));
1:48caea3:     }
1:48caea3: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:48caea3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl.weaving;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.Method;
1: import java.lang.reflect.Proxy;
1: 
1: import org.junit.Test;
1: import org.osgi.framework.BundleContext;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class ProxyWeavingHookTest {
1: 
1:     @Test
1:     public void tesDefault() {
1:         BundleContext ctx = (BundleContext) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { BundleContext.class },
1:                 new InvocationHandler() {
1:                     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
1:                         return null;
1:                     }
1:                 });
1:         ProxyWeavingHook hook = new ProxyWeavingHook(ctx);
1:         assertTrue(hook.isEnabled("org.apache.foo.Bar"));
1:         assertTrue(hook.isDisabled("javax.foo.Bar"));
1:     }
1: 
1:     @Test
1:     public void testFilters() {
1:         BundleContext ctx = (BundleContext) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { BundleContext.class },
1:                 new InvocationHandler() {
1:                     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
1:                         if (method.getName().equals("getProperty")) {
1:                             if (ProxyWeavingHook.WEAVING_ENABLED_CLASSES.equals(args[0])) {
1:                                 return "";
1:                             }
1:                             if (ProxyWeavingHook.WEAVING_DISABLED_CLASSES.equals(args[0])) {
1:                                 return "org.apache.foo.*";
1:                             }
1:                         }
1:                         return null;
1:                     }
1:                 });
1:         ProxyWeavingHook hook = new ProxyWeavingHook(ctx);
1:         assertFalse(hook.isEnabled("org.apache.foo.Bar"));
1:         assertTrue(hook.isDisabled("org.apache.foo.Bar"));
1:         assertTrue(hook.isDisabled("org.apache.foo.bar.Bar"));
1:         assertFalse(hook.isDisabled("org.apache.fooBar"));
1:         assertFalse(hook.isDisabled("orgXapache.foo.Bar"));
1:     }
1: }
============================================================================