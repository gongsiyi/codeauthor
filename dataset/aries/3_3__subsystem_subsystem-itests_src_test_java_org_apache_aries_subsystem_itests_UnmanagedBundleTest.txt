1:56040b4: /*
1:56040b4:  * Licensed to the Apache Software Foundation (ASF) under one
1:56040b4:  * or more contributor license agreements.  See the NOTICE file
1:56040b4:  * distributed with this work for additional information
1:56040b4:  * regarding copyright ownership.  The ASF licenses this file
1:56040b4:  * to you under the Apache License, Version 2.0 (the
1:56040b4:  * "License"); you may not use this file except in compliance
1:56040b4:  * with the License.  You may obtain a copy of the License at
1:56040b4:  *
1:56040b4:  *   http://www.apache.org/licenses/LICENSE-2.0
1:56040b4:  *
1:56040b4:  * Unless required by applicable law or agreed to in writing,
1:56040b4:  * software distributed under the License is distributed on an
1:56040b4:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:56040b4:  * KIND, either express or implied.  See the License for the
1:56040b4:  * specific language governing permissions and limitations
1:56040b4:  * under the License.
1:56040b4:  */
1:56040b4: package org.apache.aries.subsystem.itests;
1:56040b4: 
1:56040b4: import java.io.FileInputStream;
1:56040b4: import java.io.IOException;
1:56040b4: 
1:56040b4: import org.junit.Test;
1:56040b4: import org.osgi.framework.Bundle;
1:74ef56e: import org.osgi.service.subsystem.Subsystem;
1:56040b4: 
1:56040b4: /*
1:56040b4:  * Contains a series of tests for unmanaged bundles. An unmanaged bundle is a
1:56040b4:  * bundle that was installed outside of the Subsystems API.
1:56040b4:  */
1:56040b4: public class UnmanagedBundleTest extends SubsystemTest {
1:56040b4: 	/*
1:56040b4: 	 * Bundle-SymbolicName: bundle.a.jar
1:56040b4: 	 */
1:56040b4: 	private static final String BUNDLE_A = "bundle.a.jar";
1:56040b4: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:56040b4: 		createBundleA();
1:56040b4: 	}
1:5c35e50: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A));
1:56040b4: 	}
1:56040b4: 	
1:5c35e50: 	/*
1:56040b4: 	 * Test that an unmanaged bundle is detected as a constituent in the root
1:56040b4: 	 * subsystem when the subsystems core bundle is active.
1:56040b4: 	 */
1:56040b4: 	@Test
1:56040b4: 	public void testInstallWhileImplBundleActive() throws Exception {
1:56040b4: 		Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1:56040b4: 		try {
1:74ef56e: 			assertConstituent(getRootSubsystemInState(Subsystem.State.ACTIVE, 5000L), BUNDLE_A);
1:56040b4: 		}
1:56040b4: 		finally {
1:56040b4: 			uninstallSilently(a);
1:56040b4: 		}
1:56040b4: 	}
1:56040b4: 	
1:56040b4: 	/*
1:56040b4: 	 * Test that an unmanaged bundle is detected as a constituent in the root
1:56040b4: 	 * subsystem when the subsystems core bundle is stopped. This ensures that
1:56040b4: 	 * persistence isn't interfering with detection.
1:56040b4: 	 */
1:56040b4: 	@Test
1:56040b4: 	public void testInstallWhileImplBundleStopped() throws Exception {
1:56040b4: 		Bundle core = getSubsystemCoreBundle();
1:56040b4: 		core.stop();
1:56040b4: 		try {
1:56040b4: 			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1:56040b4: 			try {
1:56040b4: 				core.start();
2:56040b4: 				assertConstituent(getRootSubsystem(), BUNDLE_A);
1:56040b4: 			}
1:56040b4: 			finally {
1:56040b4: 				uninstallSilently(a);
1:56040b4: 			}
1:56040b4: 		}
1:56040b4: 		finally {
1:56040b4: 			core.start();
1:56040b4: 		}
1:56040b4: 	}
1:56040b4: 	
1:56040b4: 	/*
1:56040b4: 	 * Test that an unmanaged bundle is detected as a constituent in the root
1:56040b4: 	 * subsystem when the subsystems core bundle is uninstalled.
1:56040b4: 	 */
1:56040b4: 	@Test
1:56040b4: 	public void testInstallWhileImplBundleUninstalled() throws Exception {
1:56040b4: 		Bundle core = getSubsystemCoreBundle();
1:56040b4: 		core.uninstall();
1:56040b4: 		try {
1:56040b4: 			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1:56040b4: 			try {
1:d6eb080: 				core = bundleContext.installBundle(normalizeBundleLocation(core));
1:56040b4: 				core.start();
1:56040b4: 				assertConstituent(getRootSubsystem(), BUNDLE_A);
1:56040b4: 			}
1:56040b4: 			finally {
1:56040b4: 				uninstallSilently(a);
1:56040b4: 			}
1:56040b4: 		}
1:56040b4: 		finally {
1:56040b4: 			if (core.getState() == Bundle.UNINSTALLED) {
1:d6eb080: 				core = bundleContext.installBundle(normalizeBundleLocation(core));
1:56040b4: 				core.start();
1:56040b4: 			}
1:56040b4: 		}
1:56040b4: 	}
1:56040b4: 	
1:56040b4: 	/*
1:5c35e50: 	 * Test that bundles installed when the bundle event hook is unavailable
1:5c35e50: 	 * (i.e. when the subsystems core bundle is stopped) are handled properly
1:5c35e50: 	 * by the hook when uninstalled.
1:5c35e50: 	 * 
1:5c35e50: 	 * See https://issues.apache.org/jira/browse/ARIES-967.
1:5c35e50: 	 */
1:5c35e50: 	@Test
1:5c35e50: 	public void testBundleEventHook() throws Exception {
1:5c35e50: 		Bundle core = getSubsystemCoreBundle();
1:5c35e50: 		// Stop the subsystems core bundle so the bundle event hook is not registered.
1:5c35e50: 		core.stop();
1:5c35e50: 		try {
1:5c35e50: 			// Install an unmanaged bundle that will not be seen by the bundle event hook.
1:5c35e50: 			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1:5c35e50: 			try {
1:5c35e50: 				// Restart the subsystems core bundle.
1:5c35e50: 				core.start();
1:5c35e50: 				// Bundle A should be detected as a constituent of the root subsystem.
1:5c35e50: 				assertConstituent(getRootSubsystem(), BUNDLE_A);
1:5c35e50: 				// Uninstall bundle A so that it is seen by the bundle event hook.
1:5c35e50: 				a.uninstall();
1:5c35e50: 				// Bundle A should no longer be a constituent of the root subsystem.
1:5c35e50: 				assertNotConstituent(getRootSubsystem(), BUNDLE_A);
1:5c35e50: 			}
1:5c35e50: 			finally {
1:5c35e50: 				uninstallSilently(a);
1:5c35e50: 			}
1:5c35e50: 		}
1:5c35e50: 		finally {
1:5c35e50: 			try {
1:5c35e50: 				core.start();
1:5c35e50: 			}
1:5c35e50: 			catch (Exception e) {}
1:5c35e50: 		}
1:5c35e50: 	}
1:56040b4: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: 				core = bundleContext.installBundle(normalizeBundleLocation(core));
/////////////////////////////////////////////////////////////////////////
1: 				core = bundleContext.installBundle(normalizeBundleLocation(core));
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A));
author:John Ross
-------------------------------------------------------------------------------
commit:74ef56e
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.Subsystem;
/////////////////////////////////////////////////////////////////////////
1: 			assertConstituent(getRootSubsystemInState(Subsystem.State.ACTIVE, 5000L), BUNDLE_A);
commit:5c35e50
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/*
1: 	 * Test that bundles installed when the bundle event hook is unavailable
1: 	 * (i.e. when the subsystems core bundle is stopped) are handled properly
1: 	 * by the hook when uninstalled.
1: 	 * 
1: 	 * See https://issues.apache.org/jira/browse/ARIES-967.
1: 	 */
1: 	@Test
1: 	public void testBundleEventHook() throws Exception {
1: 		Bundle core = getSubsystemCoreBundle();
1: 		// Stop the subsystems core bundle so the bundle event hook is not registered.
1: 		core.stop();
1: 		try {
1: 			// Install an unmanaged bundle that will not be seen by the bundle event hook.
1: 			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1: 			try {
1: 				// Restart the subsystems core bundle.
1: 				core.start();
1: 				// Bundle A should be detected as a constituent of the root subsystem.
1: 				assertConstituent(getRootSubsystem(), BUNDLE_A);
1: 				// Uninstall bundle A so that it is seen by the bundle event hook.
1: 				a.uninstall();
1: 				// Bundle A should no longer be a constituent of the root subsystem.
1: 				assertNotConstituent(getRootSubsystem(), BUNDLE_A);
1: 			}
1: 			finally {
1: 				uninstallSilently(a);
1: 			}
1: 		}
1: 		finally {
1: 			try {
1: 				core.start();
1: 			}
1: 			catch (Exception e) {}
1: 		}
1: 	}
commit:56040b4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import java.io.FileInputStream;
1: import java.io.IOException;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: 
1: /*
1:  * Contains a series of tests for unmanaged bundles. An unmanaged bundle is a
1:  * bundle that was installed outside of the Subsystems API.
1:  */
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
1: public class UnmanagedBundleTest extends SubsystemTest {
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	
0: 	@Before
0: 	public static void createApplications() throws Exception {
0: 		if (createdApplications) {
0: 			return;
0: 		};
1: 		createBundleA();
0: 		createdApplications = true;
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		createBundle(BUNDLE_A);
1: 	}
1: 	
1: 	/*
1: 	 * Test that an unmanaged bundle is detected as a constituent in the root
1: 	 * subsystem when the subsystems core bundle is active.
1: 	 */
1: 	@Test
1: 	public void testInstallWhileImplBundleActive() throws Exception {
1: 		Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1: 		try {
1: 			assertConstituent(getRootSubsystem(), BUNDLE_A);
1: 		}
1: 		finally {
1: 			uninstallSilently(a);
1: 		}
1: 	}
1: 	
1: 	/*
1: 	 * Test that an unmanaged bundle is detected as a constituent in the root
1: 	 * subsystem when the subsystems core bundle is stopped. This ensures that
1: 	 * persistence isn't interfering with detection.
1: 	 */
1: 	@Test
1: 	public void testInstallWhileImplBundleStopped() throws Exception {
1: 		Bundle core = getSubsystemCoreBundle();
1: 		core.stop();
1: 		try {
1: 			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1: 			try {
1: 				core.start();
1: 				assertConstituent(getRootSubsystem(), BUNDLE_A);
1: 			}
1: 			finally {
1: 				uninstallSilently(a);
1: 			}
1: 		}
1: 		finally {
1: 			core.start();
1: 		}
1: 	}
1: 	
1: 	/*
1: 	 * Test that an unmanaged bundle is detected as a constituent in the root
1: 	 * subsystem when the subsystems core bundle is uninstalled.
1: 	 */
1: 	@Test
1: 	public void testInstallWhileImplBundleUninstalled() throws Exception {
1: 		Bundle core = getSubsystemCoreBundle();
1: 		core.uninstall();
1: 		try {
1: 			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
1: 			try {
0: 				core = bundleContext.installBundle(core.getLocation());
1: 				core.start();
1: 				assertConstituent(getRootSubsystem(), BUNDLE_A);
1: 			}
1: 			finally {
1: 				uninstallSilently(a);
1: 			}
1: 		}
1: 		finally {
1: 			if (core.getState() == Bundle.UNINSTALLED) {
0: 				core = bundleContext.installBundle(core.getLocation());
1: 				core.start();
1: 			}
1: 		}
1: 	}
1: }
============================================================================