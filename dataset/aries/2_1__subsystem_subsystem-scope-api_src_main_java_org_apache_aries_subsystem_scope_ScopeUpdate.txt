1:643420c: /*
1:643420c:  * Licensed to the Apache Software Foundation (ASF) under one
1:643420c:  * or more contributor license agreements.  See the NOTICE file
1:643420c:  * distributed with this work for additional information
1:643420c:  * regarding copyright ownership.  The ASF licenses this file
1:643420c:  * to you under the Apache License, Version 2.0 (the
1:643420c:  * "License"); you may not use this file except in compliance
1:643420c:  * with the License.  You may obtain a copy of the License at
1:643420c:  *
1:643420c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:643420c:  *
1:643420c:  * Unless required by applicable law or agreed to in writing,
1:643420c:  * software distributed under the License is distributed on an
1:643420c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:643420c:  * KIND, either express or implied.  See the License for the
1:643420c:  * specific language governing permissions and limitations
1:643420c:  * under the License.
2:643420c:  */
1:643420c: package org.apache.aries.subsystem.scope;
2:643420c: 
1:643420c: import java.util.Collection;
1:643420c: import java.util.List;
1:643420c: import java.util.Map;
1:643420c: 
1:643420c: import org.osgi.framework.Bundle;
1:643420c: import org.osgi.framework.BundleException;
1:643420c: 
2:643420c: /**
1:643420c:  * A scope update represents a snapshot of a scope and its children.
1:643420c:  * The get methods return modifiable collections or maps that represent the
1:643420c:  * bundles contained in the scope, the sharing policies, the
1:643420c:  * children scopes, and optionally what bundles to install.
1:643420c:  * The collections and maps may be modified with changes that will be 
1:643420c:  * committed when the commit method is called.
1:643420c:  */
1:643420c: public interface ScopeUpdate {
1:643420c: 	/**
1:643420c: 	 * Returns the name of the scope represented by this scope update.
1:643420c: 	 * @return the name of the scope.
1:643420c: 	 * @see Scope#getName()
1:643420c: 	 */
1:643420c: 	String getName();
1:643420c: 	
1:643420c: 	/**
1:643420c: 	 * Returns the collection of bundles contained in this scope.
1:643420c: 	 * Bundles may be added or removed from this collection.
1:643420c: 	 * <p>
1:643420c: 	 * Adding a bundle to the collection will add the bundle
1:643420c: 	 * to this scope when commit is called.  A bundle
1:643420c: 	 * must belong to one and only one scope at a time.
1:643420c: 	 * If a bundle is contained in multiple scopes 
1:643420c: 	 * when commit is called then the commit will fail
1:643420c: 	 * with an exception.
1:643420c: 	 * <p>
1:643420c: 	 * Removing a bundle from the collection will remove the
1:643420c: 	 * bundle from this scope when commit is called.
1:643420c: 	 * If a bundle is removed from this collection and is
1:643420c: 	 * not added to the collection of another scope then the
1:643420c: 	 * bundle will be uninstalled when commit is called.
1:643420c: 	 * @return the collection of bundles contained in this scope.
1:643420c: 	 */
1:643420c: 	Collection<Bundle> getBundles();
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Returns a map containing the sharing policies for this scope.
1:643420c: 	 * The key is the name space of the policy and the value is the
1:643420c: 	 * list of policies with the same name space.  
1:643420c: 	 * <p>
1:643420c: 	 * Policies may be removed or added to the lists.  If adding a 
1:643420c: 	 * policy then the policy must have the same name space as the 
1:643420c: 	 * other policies in the list.  A new name space list may also be 
1:643420c: 	 * added to the map.  The same rules apply to lists being 
1:643420c: 	 * added, each policy in an added list must have the same 
1:643420c: 	 * name space name space key being added.
1:643420c: 	 * <p>
1:643420c: 	 * The map will be check for validity on commit.  If invalid then
1:643420c: 	 * the commit will fail with an exception.
1:643420c: 	 * @param type the type of policy to return.  Must be
1:643420c: 	 *        of type {@link SharePolicy#TYPE_EXPORT EXPORT} or
1:643420c: 	 *        {@link SharePolicy#TYPE_IMPORT IMPORT}.  Any other type
1:643420c: 	 *        results in an exception.
1:643420c: 	 * @return a map containing the sharing policies of this scope.
1:643420c: 	 * @throws IllegalArgumentException if the type is not
1:643420c: 	 *         {@link SharePolicy#TYPE_EXPORT EXPORT} or
1:643420c: 	 *         {@link SharePolicy#TYPE_IMPORT IMPORT}.
1:643420c: 	 */
1:643420c: 	Map<String, List<SharePolicy>> getSharePolicies(String type);
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Returns the collection of children scopes.
1:643420c: 	 * The children scope updates can be used to update
1:643420c: 	 * children scopes when the root scope is committed.
1:643420c: 	 * <p>
1:643420c: 	 * Note that only the root scope update (the one
1:643420c: 	 * returned by {@link ScopeAdmin#createUpdate() createUpdate}
1:643420c: 	 * may be used to commit changes.
1:643420c: 	 * <p>
1:643420c: 	 * Scope updates may be added or removed from this collection.
1:643420c: 	 * Adding a scope to the collection will add the scope
1:643420c: 	 * to the list of children of this scope when commit is called.
1:643420c: 	 * A scope must be a child to one and only one scope at a time
1:643420c: 	 * except the scope with id zero, this scope has no parent.
1:643420c: 	 * If a scope is a child of multiple scopes 
1:643420c: 	 * when commit is called then the commit will fail
1:643420c: 	 * with an exception.
1:643420c: 	 * <p>
1:643420c: 	 * Removing a scope from the list will remove the
1:643420c: 	 * scope as a child of this scope when commit is called.
1:643420c: 	 * If a scope is removed from this list and is
1:643420c: 	 * not added to the children of another scope then the
1:643420c: 	 * scope will be uninstalled when commit is called.  
1:643420c: 	 * This will result in all bundles and children scopes
1:643420c: 	 * of the removed scope to be uninstalled.
1:643420c: 	 * @return the collection of children scopes.
1:643420c: 	 */
1:643420c: 	Collection<ScopeUpdate> getChildren();
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Returns the list of install infos for bundles
1:643420c: 	 * that will be installed into this scope when
1:643420c: 	 * commit is called.  Initially this list is empty
1:643420c: 	 * @return the list of install infos.
1:643420c: 	 */
1:643420c: 	List<InstallInfo> getBundlesToInstall();
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Creates a new child scope update for this scope.  To
1:643420c: 	 * add the returned child scope to this scope the child
1:643420c: 	 * scope must be added to the collection 
1:643420c: 	 * of children returned by {@link ScopeUpdate#getChildren()
1:643420c: 	 * getChildren} before calling {@link #commit() commit} on
1:643420c: 	 * this scope update.
1:643420c: 	 * @param name the name to assign the new child scope.
1:643420c: 	 * @return a scope update for a child scope.
1:643420c: 	 */
1:643420c: 	ScopeUpdate newChild(String name);
1:643420c: 	
1:643420c: 	   /**
1:643420c:      * Creates a new child scope update for this scope.  To
1:643420c:      * add the returned child scope to this scope the child
1:643420c:      * scope must be added to the collection 
1:643420c:      * of children returned by {@link ScopeUpdate#getChildren()
1:643420c:      * getChildren} before calling {@link #commit() commit} on
1:643420c:      * this scope update.
1:643420c:      * @param name the name to assign the new child scope.
1:643420c:      * @return a scope update for a child scope.
1:643420c:      */
1:643420c:     ScopeUpdate newChild(String name, String location);
1:643420c: 
1:643420c: 	/**
1:643420c: 	 * Commit this update. If no changes have been made to the scopes
1:643420c: 	 * since this update was created, then this method will
1:643420c: 	 * update the scopes for the system. This method may only be 
1:643420c: 	 * successfully called once on this object.
1:643420c: 	 * <p>
1:643420c: 	 * The following steps will be done to commit this scope:
1:643420c: 	 * <ul>
1:643420c: 	 *   <li> If this update was not one returned by {@link
1:643420c: 	 *   ScopeAdmin#newScopeUpdate()} then an {@link
1:643420c: 	 *   UnsupportedOperationException} is thrown.</li>
1:643420c: 	 *   <li> If this update is not valid then an
1:643420c: 	 *   {@link IllegalStateException} is thrown.
1:643420c: 	 *   //TODO need to fill in the details of illegal state
1:643420c: 	 *   </li>
1:643420c: 	 *   <li> All currently unresolved bundles are disabled from
1:643420c: 	 *   resolving until the end of the commit operation.
1:643420c: 	 *   </li>
1:643420c: 	 *   <li> Any bundle installs or uninstalls are performed.
1:643420c: 	 *   Any bundles installed will be disabled from resolving
1:643420c: 	 *   until the end of the commit operation.  If a 
1:643420c: 	 *   {@link BundleException} is thrown during a bundle install
1:643420c: 	 *   or uninstall then the commit operation is terminated and
1:643420c: 	 *   the exception is propagated to the caller.  Any bundle operations
1:643420c: 	 *   that may have succeeded are left in place and not rolled back.
1:643420c: 	 *   </li>
1:643420c: 	 *   <li> Scope uninstallation is performed.  If a scope is uninstalled
1:643420c: 	 *   then all of its bundles are uninstalled and all of its children
1:643420c: 	 *   scopes are uninstalled.  If a {@link BundleException} is thrown
1:643420c: 	 *   during a bundle uninstall operation then the commit operation
1:643420c: 	 *   is terminated and the exception is propagated to the caller.
1:643420c: 	 *   </li>
1:643420c: 	 *   <li> Scope installation is performed.  If a {@link BundleException}
1:643420c: 	 *   is thrown during a bundle install operation then the commit 
1:643420c: 	 *   operation is terminated and the exception is propagated to the
1:643420c: 	 *   caller.  Any bundle operations that may have succeeded are left
1:643420c: 	 *   in place and not rolled back.
1:643420c: 	 *   </li>
1:643420c: 	 *   <li> This scope's sharing policy is updated.
1:643420c: 	 *   </li>
1:643420c: 	 *   <li> Bundles enabled for resolution.  Not this must happen
1:643420c: 	 *   even on exception.
1:643420c: 	 *   </li>
1:643420c: 	 * </ul>
1:643420c: 	 * <p>
1:643420c: 	 * This method returns <code>false</code> if the commit did not occur
1:643420c: 	 * because another scope commit has been performed since the
1:643420c: 	 * creation of this update.
1:643420c: 	 * 
1:643420c: 	 * @return <code>true</code> if the commit was successful.
1:643420c: 	 *         <code>false</code> if the commit did not occur because another
1:643420c: 	 *         update has been committed since the creation of this update.
1:643420c: 	 * @throws SecurityException If the caller does not have the necessary
1:643420c: 	 *         permission to perform the update.  For example, if the 
1:643420c: 	 *         update involves installing or uninstalling bundles.
1:643420c: 	 * @throws IllegalStateException If this update's state is 
1:643420c: 	 *         not valid or inconsistent. For example, this update tries to
1:643420c: 	 *         place a bundle in multiple scopes.
1:643420c: 	 * @throws UnsupportedOperationException If this update was not one
1:643420c: 	 *         returned by {@link ScopeAdmin#newScopeUpdate()}.
1:643420c: 	 * @throws BundleException if a bundle lifecycle operation failed.
1:643420c: 	 */
1:643420c: 	boolean commit() throws BundleException;
1:643420c: 	
1:643420c: 	/**
1:643420c: 	 * Returns the scope it is updating
1:643420c: 	 * @return   the scope it is updating
1:643420c: 	 */
1:643420c: 	public Scope getScope();
1:643420c: }
============================================================================
author:Graham Charters
-------------------------------------------------------------------------------
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
author:Lin Sun
-------------------------------------------------------------------------------
commit:643420c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.scope;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: 
1: /**
1:  * A scope update represents a snapshot of a scope and its children.
1:  * The get methods return modifiable collections or maps that represent the
1:  * bundles contained in the scope, the sharing policies, the
1:  * children scopes, and optionally what bundles to install.
1:  * The collections and maps may be modified with changes that will be 
1:  * committed when the commit method is called.
1:  */
1: public interface ScopeUpdate {
1: 	/**
1: 	 * Returns the name of the scope represented by this scope update.
1: 	 * @return the name of the scope.
1: 	 * @see Scope#getName()
1: 	 */
1: 	String getName();
1: 	
1: 	/**
1: 	 * Returns the collection of bundles contained in this scope.
1: 	 * Bundles may be added or removed from this collection.
1: 	 * <p>
1: 	 * Adding a bundle to the collection will add the bundle
1: 	 * to this scope when commit is called.  A bundle
1: 	 * must belong to one and only one scope at a time.
1: 	 * If a bundle is contained in multiple scopes 
1: 	 * when commit is called then the commit will fail
1: 	 * with an exception.
1: 	 * <p>
1: 	 * Removing a bundle from the collection will remove the
1: 	 * bundle from this scope when commit is called.
1: 	 * If a bundle is removed from this collection and is
1: 	 * not added to the collection of another scope then the
1: 	 * bundle will be uninstalled when commit is called.
1: 	 * @return the collection of bundles contained in this scope.
1: 	 */
1: 	Collection<Bundle> getBundles();
1: 
1: 	/**
1: 	 * Returns a map containing the sharing policies for this scope.
1: 	 * The key is the name space of the policy and the value is the
1: 	 * list of policies with the same name space.  
1: 	 * <p>
1: 	 * Policies may be removed or added to the lists.  If adding a 
1: 	 * policy then the policy must have the same name space as the 
1: 	 * other policies in the list.  A new name space list may also be 
1: 	 * added to the map.  The same rules apply to lists being 
1: 	 * added, each policy in an added list must have the same 
1: 	 * name space name space key being added.
1: 	 * <p>
1: 	 * The map will be check for validity on commit.  If invalid then
1: 	 * the commit will fail with an exception.
1: 	 * @param type the type of policy to return.  Must be
1: 	 *        of type {@link SharePolicy#TYPE_EXPORT EXPORT} or
1: 	 *        {@link SharePolicy#TYPE_IMPORT IMPORT}.  Any other type
1: 	 *        results in an exception.
1: 	 * @return a map containing the sharing policies of this scope.
1: 	 * @throws IllegalArgumentException if the type is not
1: 	 *         {@link SharePolicy#TYPE_EXPORT EXPORT} or
1: 	 *         {@link SharePolicy#TYPE_IMPORT IMPORT}.
1: 	 */
1: 	Map<String, List<SharePolicy>> getSharePolicies(String type);
1: 
1: 	/**
1: 	 * Returns the collection of children scopes.
1: 	 * The children scope updates can be used to update
1: 	 * children scopes when the root scope is committed.
1: 	 * <p>
1: 	 * Note that only the root scope update (the one
1: 	 * returned by {@link ScopeAdmin#createUpdate() createUpdate}
1: 	 * may be used to commit changes.
1: 	 * <p>
1: 	 * Scope updates may be added or removed from this collection.
1: 	 * Adding a scope to the collection will add the scope
1: 	 * to the list of children of this scope when commit is called.
1: 	 * A scope must be a child to one and only one scope at a time
1: 	 * except the scope with id zero, this scope has no parent.
1: 	 * If a scope is a child of multiple scopes 
1: 	 * when commit is called then the commit will fail
1: 	 * with an exception.
1: 	 * <p>
1: 	 * Removing a scope from the list will remove the
1: 	 * scope as a child of this scope when commit is called.
1: 	 * If a scope is removed from this list and is
1: 	 * not added to the children of another scope then the
1: 	 * scope will be uninstalled when commit is called.  
1: 	 * This will result in all bundles and children scopes
1: 	 * of the removed scope to be uninstalled.
1: 	 * @return the collection of children scopes.
1: 	 */
1: 	Collection<ScopeUpdate> getChildren();
1: 
1: 	/**
1: 	 * Returns the list of install infos for bundles
1: 	 * that will be installed into this scope when
1: 	 * commit is called.  Initially this list is empty
1: 	 * @return the list of install infos.
1: 	 */
1: 	List<InstallInfo> getBundlesToInstall();
1: 
1: 	/**
1: 	 * Creates a new child scope update for this scope.  To
1: 	 * add the returned child scope to this scope the child
1: 	 * scope must be added to the collection 
1: 	 * of children returned by {@link ScopeUpdate#getChildren()
1: 	 * getChildren} before calling {@link #commit() commit} on
1: 	 * this scope update.
1: 	 * @param name the name to assign the new child scope.
1: 	 * @return a scope update for a child scope.
1: 	 */
1: 	ScopeUpdate newChild(String name);
1: 	
1: 	   /**
1:      * Creates a new child scope update for this scope.  To
1:      * add the returned child scope to this scope the child
1:      * scope must be added to the collection 
1:      * of children returned by {@link ScopeUpdate#getChildren()
1:      * getChildren} before calling {@link #commit() commit} on
1:      * this scope update.
1:      * @param name the name to assign the new child scope.
1:      * @return a scope update for a child scope.
1:      */
1:     ScopeUpdate newChild(String name, String location);
1: 
1: 	/**
1: 	 * Commit this update. If no changes have been made to the scopes
1: 	 * since this update was created, then this method will
1: 	 * update the scopes for the system. This method may only be 
1: 	 * successfully called once on this object.
1: 	 * <p>
1: 	 * The following steps will be done to commit this scope:
1: 	 * <ul>
1: 	 *   <li> If this update was not one returned by {@link
1: 	 *   ScopeAdmin#newScopeUpdate()} then an {@link
1: 	 *   UnsupportedOperationException} is thrown.</li>
1: 	 *   <li> If this update is not valid then an
1: 	 *   {@link IllegalStateException} is thrown.
1: 	 *   //TODO need to fill in the details of illegal state
1: 	 *   </li>
1: 	 *   <li> All currently unresolved bundles are disabled from
1: 	 *   resolving until the end of the commit operation.
1: 	 *   </li>
1: 	 *   <li> Any bundle installs or uninstalls are performed.
1: 	 *   Any bundles installed will be disabled from resolving
1: 	 *   until the end of the commit operation.  If a 
1: 	 *   {@link BundleException} is thrown during a bundle install
1: 	 *   or uninstall then the commit operation is terminated and
1: 	 *   the exception is propagated to the caller.  Any bundle operations
1: 	 *   that may have succeeded are left in place and not rolled back.
1: 	 *   </li>
1: 	 *   <li> Scope uninstallation is performed.  If a scope is uninstalled
1: 	 *   then all of its bundles are uninstalled and all of its children
1: 	 *   scopes are uninstalled.  If a {@link BundleException} is thrown
1: 	 *   during a bundle uninstall operation then the commit operation
1: 	 *   is terminated and the exception is propagated to the caller.
1: 	 *   </li>
1: 	 *   <li> Scope installation is performed.  If a {@link BundleException}
1: 	 *   is thrown during a bundle install operation then the commit 
1: 	 *   operation is terminated and the exception is propagated to the
1: 	 *   caller.  Any bundle operations that may have succeeded are left
1: 	 *   in place and not rolled back.
1: 	 *   </li>
1: 	 *   <li> This scope's sharing policy is updated.
1: 	 *   </li>
1: 	 *   <li> Bundles enabled for resolution.  Not this must happen
1: 	 *   even on exception.
1: 	 *   </li>
1: 	 * </ul>
1: 	 * <p>
1: 	 * This method returns <code>false</code> if the commit did not occur
1: 	 * because another scope commit has been performed since the
1: 	 * creation of this update.
1: 	 * 
1: 	 * @return <code>true</code> if the commit was successful.
1: 	 *         <code>false</code> if the commit did not occur because another
1: 	 *         update has been committed since the creation of this update.
1: 	 * @throws SecurityException If the caller does not have the necessary
1: 	 *         permission to perform the update.  For example, if the 
1: 	 *         update involves installing or uninstalling bundles.
1: 	 * @throws IllegalStateException If this update's state is 
1: 	 *         not valid or inconsistent. For example, this update tries to
1: 	 *         place a bundle in multiple scopes.
1: 	 * @throws UnsupportedOperationException If this update was not one
1: 	 *         returned by {@link ScopeAdmin#newScopeUpdate()}.
1: 	 * @throws BundleException if a bundle lifecycle operation failed.
1: 	 */
1: 	boolean commit() throws BundleException;
1: 	
1: 	/**
0: 	 * Returns the children scope to be removed
0: 	 * @return   the to be removed children.   
1: 	 */
0: 	Collection<Scope> getToBeRemovedChildren();
1: 	
1: 	/**
1: 	 * Returns the scope it is updating
1: 	 * @return   the scope it is updating
1: 	 */
1: 	public Scope getScope();
1: }
============================================================================