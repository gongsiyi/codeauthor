1:7f1e7ab: /*
1:7f1e7ab:  * Licensed to the Apache Software Foundation (ASF) under one
1:7f1e7ab:  * or more contributor license agreements.  See the NOTICE file
1:7f1e7ab:  * distributed with this work for additional information
1:7f1e7ab:  * regarding copyright ownership.  The ASF licenses this file
1:7f1e7ab:  * to you under the Apache License, Version 2.0 (the
1:7f1e7ab:  * "License"); you may not use this file except in compliance
1:7f1e7ab:  * with the License.  You may obtain a copy of the License at
1:7f1e7ab:  *
1:7f1e7ab:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7f1e7ab:  *
1:7f1e7ab:  * Unless required by applicable law or agreed to in writing,
1:7f1e7ab:  * software distributed under the License is distributed on an
1:7f1e7ab:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:7f1e7ab:  * KIND, either express or implied.  See the License for the
1:7f1e7ab:  * specific language governing permissions and limitations
1:7f1e7ab:  * under the License.
1:7f1e7ab:  */
1:7f1e7ab: package org.apache.aries.tx.control.service.xa.impl;
2:7f1e7ab: 
1:47a70d3: import static javax.transaction.xa.XAResource.XA_OK;
1:7f1e7ab: import static org.junit.Assert.assertEquals;
1:7f1e7ab: import static org.junit.Assert.assertFalse;
1:47a70d3: import static org.junit.Assert.assertTrue;
1:47a70d3: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1:7f1e7ab: 
1:47a70d3: import java.io.File;
1:3bca813: import java.lang.reflect.Field;
1:7f1e7ab: import java.sql.Connection;
1:7f1e7ab: import java.sql.ResultSet;
1:7f1e7ab: import java.sql.SQLException;
1:7f1e7ab: import java.sql.Statement;
1:7f1e7ab: import java.util.HashMap;
1:7f1e7ab: import java.util.Map;
1:47a70d3: import java.util.concurrent.atomic.AtomicReference;
1:47a70d3: import java.util.function.BiConsumer;
1:7f1e7ab: 
1:7f1e7ab: import javax.sql.XAConnection;
1:47a70d3: import javax.transaction.xa.XAResource;
1:7f1e7ab: 
1:3bca813: import org.apache.geronimo.transaction.log.HOWLLog;
1:7f1e7ab: import org.h2.jdbcx.JdbcDataSource;
1:47a70d3: import org.h2.tools.Server;
1:7f1e7ab: import org.junit.After;
1:7f1e7ab: import org.junit.Before;
1:7f1e7ab: import org.junit.Test;
1:7f1e7ab: import org.junit.runner.RunWith;
1:47a70d3: import org.mockito.ArgumentCaptor;
1:47a70d3: import org.mockito.Mock;
1:47a70d3: import org.mockito.Mockito;
1:7f1e7ab: import org.mockito.runners.MockitoJUnitRunner;
1:47a70d3: import org.osgi.framework.BundleContext;
1:47a70d3: import org.osgi.framework.ServiceEvent;
1:47a70d3: import org.osgi.framework.ServiceListener;
1:47a70d3: import org.osgi.framework.ServiceReference;
1:47a70d3: import org.osgi.service.transaction.control.TransactionException;
1:47a70d3: import org.osgi.service.transaction.control.TransactionRolledBackException;
1:47a70d3: import org.osgi.service.transaction.control.TransactionStatus;
1:47a70d3: import org.osgi.service.transaction.control.recovery.RecoverableXAResource;
1:7f1e7ab: 
1:47a70d3: /**
1:47a70d3:  * The tests in this class look a little odd because we're using an
1:47a70d3:  * unmanaged resource. This is to avoid creating a dependency on a
1:47a70d3:  * JDBCResourceProvider just for the tests, and to give explicit
1:47a70d3:  * control of when things get registered
1:47a70d3:  *
1:47a70d3:  */
1:7f1e7ab: @RunWith(MockitoJUnitRunner.class)
1:7f1e7ab: public class TransactionLogTest {
1:7f1e7ab: 
1:47a70d3: 	@Mock
1:47a70d3: 	BundleContext ctx;
1:47a70d3: 
1:47a70d3: 	@Mock
1:47a70d3: 	ServiceReference<RecoverableXAResource> serviceRef;
1:47a70d3: 	
1:7f1e7ab: 	TransactionControlImpl txControl;
1:7f1e7ab: 	
1:7f1e7ab: 	JdbcDataSource dataSource;
1:47a70d3: 	
1:47a70d3: 	Server server;
1:47a70d3: 	
1:7f1e7ab: 	@Before
1:7f1e7ab: 	public void setUp() throws Exception {
1:7f1e7ab: 		Map<String, Object> config = new HashMap<>();
1:47a70d3: 		config.put("recovery.log.enabled", true);
1:47a70d3: 		config.put("recovery.log.dir", "target/recovery-test/recoverylog");
1:7f1e7ab: 		
1:47a70d3: 		txControl = new TransactionControlImpl(ctx, config);
1:7f1e7ab: 		
1:47a70d3: 		setupServerAndDataSource();
1:7f1e7ab: 		
1:7f1e7ab: 		try (Connection conn = dataSource.getConnection()) {
1:7f1e7ab: 			Statement s = conn.createStatement();
1:7f1e7ab: 			try {s.execute("DROP TABLE TEST_TABLE");} catch (SQLException sqle) {}
1:7f1e7ab: 			s.execute("CREATE TABLE TEST_TABLE ( message varchar(255) )");
1:7f1e7ab: 		}
1:7f1e7ab: 	}
1:47a70d3: 
1:47a70d3: 	private void setupServerAndDataSource() throws SQLException {
1:47a70d3: 		server = Server.createTcpServer("-tcpPort", "0");
1:47a70d3: 		server.start();
1:47a70d3: 		
1:47a70d3: 		File dbPath = new File("target/recovery-test/database");
1:47a70d3: 		
1:47a70d3: 		dataSource = new JdbcDataSource();
1:47a70d3: 		dataSource.setUrl("jdbc:h2:tcp://127.0.0.1:" + server.getPort() + "/" + dbPath.getAbsolutePath());
1:47a70d3: 	}
1:7f1e7ab: 	
1:7f1e7ab: 	@After
1:3bca813: 	public void destroy() throws Exception {
1:2906477: 		txControl.close();
1:3bca813: 		
1:3bca813: 		checkLogClosed(txControl);
1:47a70d3: 		try (Connection conn = dataSource.getConnection()) {
1:47a70d3: 			conn.createStatement().execute("shutdown immediately");
1:47a70d3: 		} catch (SQLException e) {
1:47a70d3: 			// TODO Auto-generated catch block
1:47a70d3: 			e.printStackTrace();
1:47a70d3: 		}
1:47a70d3: 		
1:47a70d3: 		delete(new File("target/recovery-test"));
1:47a70d3: 	}
1:47a70d3: 
1:3bca813: 	private void checkLogClosed(TransactionControlImpl toCheck) throws Exception {
1:3bca813: 		
1:3bca813: 		Field f = TransactionControlImpl.class.getDeclaredField("log");
1:3bca813: 		f.setAccessible(true);
1:3bca813: 		HOWLLog log = (HOWLLog) f.get(toCheck);
1:3bca813: 		
1:3bca813: 		f = HOWLLog.class.getDeclaredField("logger");
1:3bca813: 		f.setAccessible(true);
1:3bca813: 		org.objectweb.howl.log.Logger howlLogger = (org.objectweb.howl.log.Logger) f.get(log);
1:3bca813: 		
1:3bca813: 		f = org.objectweb.howl.log.Logger.class.getDeclaredField("bmgr");
1:3bca813: 		f.setAccessible(true);
1:3bca813: 		Object logBufferManager = f.get(howlLogger);
1:3bca813: 		
1:3bca813: 		f = logBufferManager.getClass().getDeclaredField("flushManager");
1:3bca813: 		f.setAccessible(true);
1:3bca813: 		Thread flushThread = (Thread) f.get(logBufferManager);
1:3bca813: 		
1:3bca813: 		assertFalse(flushThread.isAlive());
1:3bca813: 		
1:3bca813: 		f = org.objectweb.howl.log.Logger.class.getDeclaredField("lfmgr");
1:3bca813: 		f.setAccessible(true);
1:3bca813: 		Object logFileManager = f.get(howlLogger);
1:3bca813: 		
1:3bca813: 		f = logFileManager.getClass().getDeclaredField("eventManagerThread");
1:3bca813: 		f.setAccessible(true);
1:3bca813: 		Thread eventManagerThread = (Thread) f.get(logFileManager);
1:3bca813: 		
1:3bca813: 		assertFalse(eventManagerThread.isAlive());
1:3bca813: 	}
1:3bca813: 
1:47a70d3: 	private void delete(File file) {
1:47a70d3: 		if(file.isDirectory()) {
1:47a70d3: 			for(File f : file.listFiles()) {
1:47a70d3: 				delete(f);
1:47a70d3: 			}
1:47a70d3: 		} 
1:47a70d3: 		file.delete();
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	@Test
1:47a70d3: 	public void testRequiredNoRecovery() throws Exception {
1:7f1e7ab: 		XAConnection xaConn = dataSource.getXAConnection();
1:7f1e7ab: 		try {
1:7f1e7ab: 			txControl.required(() -> {
1:7f1e7ab: 	
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource(), null);
1:7f1e7ab: 	
1:7f1e7ab: 				Connection conn = xaConn.getConnection();
1:47a70d3: 				// conn.setAutoCommit(false);
1:7f1e7ab: 				
1:7f1e7ab: 				return conn.createStatement()
1:7f1e7ab: 					.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:7f1e7ab: 			});	
1:7f1e7ab: 		} finally {
1:7f1e7ab: 			xaConn.close();
1:7f1e7ab: 		}
1:7f1e7ab: 
1:7f1e7ab: 		try (Connection conn = dataSource.getConnection()) {
1:7f1e7ab: 			ResultSet rs = conn.createStatement()
1:7f1e7ab: 					.executeQuery("Select * from TEST_TABLE");
1:7f1e7ab: 			rs.next();
1:7f1e7ab: 			assertEquals("Hello World!", rs.getString(1));
1:47a70d3: 			assertFalse(rs.next());
1:7f1e7ab: 		}
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: 	@Test
1:47a70d3: 	public void testRequired2PCNoRecovery() throws Exception {
1:47a70d3: 		XAConnection xaConn = dataSource.getXAConnection();
1:47a70d3: 		XAConnection xaConn2 = dataSource.getXAConnection();
1:47a70d3: 		try {
1:47a70d3: 			txControl.required(() -> {
1:47a70d3: 				
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource(), null);
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(xaConn2.getXAResource(), null);
1:47a70d3: 				
1:47a70d3: 				Connection conn = xaConn.getConnection();
1:47a70d3: 				// conn.setAutoCommit(false);
1:47a70d3: 				Connection conn2 = xaConn2.getConnection();
1:47a70d3: 				conn2.setAutoCommit(false);
1:47a70d3: 				
1:47a70d3: 				conn.createStatement()
1:47a70d3: 						.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:47a70d3: 				return conn2.createStatement()
1:47a70d3: 						.execute("Insert into TEST_TABLE values ( 'Hello World 2!' )");
1:47a70d3: 			});	
1:47a70d3: 		} finally {
1:47a70d3: 			xaConn.close();
1:47a70d3: 		}
1:47a70d3: 		
1:47a70d3: 		try (Connection conn = dataSource.getConnection()) {
1:47a70d3: 			ResultSet rs = conn.createStatement()
1:47a70d3: 					.executeQuery("Select * from TEST_TABLE order by message DESC");
1:47a70d3: 			rs.next();
1:47a70d3: 			assertEquals("Hello World!", rs.getString(1));
1:47a70d3: 			rs.next();
1:47a70d3: 			assertEquals("Hello World 2!", rs.getString(1));
1:47a70d3: 			assertFalse(rs.next());
1:47a70d3: 		}
1:47a70d3: 	}
1:47a70d3: 
1:47a70d3: 	@Test
1:47a70d3: 	public void testRequiredRecoverable() throws Exception {
1:47a70d3: 		XAConnection xaConn = dataSource.getXAConnection();
1:47a70d3: 		try {
1:47a70d3: 			txControl.required(() -> {
1:47a70d3: 				
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource(), "foo");
1:47a70d3: 				
1:47a70d3: 				Connection conn = xaConn.getConnection();
1:47a70d3: 				// conn.setAutoCommit(false);
1:47a70d3: 				
1:47a70d3: 				return conn.createStatement()
1:47a70d3: 						.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:47a70d3: 			});	
1:47a70d3: 		} finally {
1:47a70d3: 			xaConn.close();
1:47a70d3: 		}
1:47a70d3: 		
1:47a70d3: 		try (Connection conn = dataSource.getConnection()) {
1:47a70d3: 			ResultSet rs = conn.createStatement()
1:47a70d3: 					.executeQuery("Select * from TEST_TABLE");
1:47a70d3: 			rs.next();
1:47a70d3: 			assertEquals("Hello World!", rs.getString(1));
1:47a70d3: 		}
1:47a70d3: 	}
1:47a70d3: 
1:47a70d3: 	@Test
1:47a70d3: 	public void testRequiredRecoveryRequiredPrePrepare() throws Exception {
1:47a70d3: 		doRecoveryRequired((good, poison) -> {
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(poison, null);
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(good, "foo");
1:47a70d3: 			}, TransactionStatus.ROLLED_BACK);
1:47a70d3: 		
1:47a70d3: 		boolean success = false;
1:47a70d3: 		XAConnection conn = dataSource.getXAConnection();
1:47a70d3: 		for(int i=0; i < 5; i++) {
1:47a70d3: 			if(conn.getXAResource().recover(XAResource.TMSTARTRSCAN).length == 0) {
1:47a70d3: 				success = true;
1:47a70d3: 				break;
1:47a70d3: 			} else {
1:47a70d3: 				// Wait for recovery to happen!
1:47a70d3: 				Thread.sleep(500);
1:47a70d3: 			}
1:47a70d3: 		}
1:47a70d3: 		
1:47a70d3: 		assertTrue("No recovery in time", success);
1:47a70d3: 	}
1:47a70d3: 	
1:47a70d3: 	@Test
1:47a70d3: 	public void testRequiredRecoveryRequiredPostPrepare() throws Exception {
1:47a70d3: 		doRecoveryRequired((good, poison) -> {
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(good, "foo");
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(poison, null);
1:47a70d3: 			}, TransactionStatus.COMMITTED);
1:47a70d3: 		
1:47a70d3: 		boolean success = false;
1:47a70d3: 		for(int i=0; i < 5; i++) {
1:47a70d3: 			try (Connection conn = dataSource.getConnection()) {
1:47a70d3: 				ResultSet rs = conn.createStatement()
1:47a70d3: 						.executeQuery("Select * from TEST_TABLE");
1:47a70d3: 				if(rs.next()) {
1:47a70d3: 					assertEquals("Hello World!", rs.getString(1));
1:47a70d3: 					success = true;
1:47a70d3: 					break;
1:47a70d3: 				} else {
1:47a70d3: 					// Wait for recovery to happen!
1:47a70d3: 					Thread.sleep(500);
1:47a70d3: 				}
1:47a70d3: 			}
1:47a70d3: 		}
1:47a70d3: 		
1:47a70d3: 		assertTrue("No recovery in time", success);
1:47a70d3: 	}
1:47a70d3: 	
1:47a70d3: 	public void doRecoveryRequired(BiConsumer<XAResource, XAResource> ordering, 
1:47a70d3: 			TransactionStatus expectedFinalState) throws Exception {
1:47a70d3: 		
1:47a70d3: 		//Register the recoverable resource
1:47a70d3: 		ArgumentCaptor<ServiceListener> captor = ArgumentCaptor.forClass(ServiceListener.class);
1:47a70d3: 		Mockito.verify(ctx).addServiceListener(captor.capture(), Mockito.anyString());
1:47a70d3: 		Mockito.when(ctx.getService(serviceRef)).thenReturn(new TestRecoverableResource("foo", dataSource));
1:47a70d3: 		
1:47a70d3: 		captor.getValue().serviceChanged(new ServiceEvent(ServiceEvent.REGISTERED, serviceRef));
1:47a70d3: 		
1:47a70d3: 		XAConnection xaConn = dataSource.getXAConnection();
1:47a70d3: 		AtomicReference<TransactionStatus> ref = new AtomicReference<TransactionStatus>();
1:47a70d3: 		try {
1:47a70d3: 			txControl.required(() -> {
1:47a70d3: 				
1:47a70d3: 				txControl.getCurrentContext().postCompletion(ref::set);
1:47a70d3: 				
1:47a70d3: 				Connection conn = xaConn.getConnection();
1:47a70d3: 				// conn.setAutoCommit(false);
1:47a70d3: 				
1:47a70d3: 				XAResource dsResource = xaConn.getXAResource();
1:47a70d3: 				
1:47a70d3: 				XAResource poison = Mockito.mock(XAResource.class);
1:47a70d3: 				Mockito.when(poison.prepare(Mockito.any())).thenAnswer(i -> {
1:47a70d3: 					// Now kill the db server before it commits!
1:47a70d3: 					conn.createStatement().execute("shutdown immediately");
1:47a70d3: 					Thread.sleep(1000);
1:47a70d3: 					return XA_OK;	
1:47a70d3: 				});
1:47a70d3: 
1:47a70d3: 				ordering.accept(dsResource, poison);
1:47a70d3: 				
1:47a70d3: 				return conn.createStatement()
1:47a70d3: 						.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:47a70d3: 			});	
1:47a70d3: 		} catch (TransactionException te) {
1:47a70d3: 			assertEquals(expectedFinalState, ref.get());
1:47a70d3: 			assertEquals(expectedFinalState == ROLLED_BACK, te instanceof TransactionRolledBackException);
1:47a70d3: 		} finally {
1:47a70d3: 			try {
1:47a70d3: 				xaConn.close();
1:47a70d3: 			} catch (SQLException sqle) {}
1:47a70d3: 		}
1:47a70d3: 		
1:47a70d3: 		setupServerAndDataSource();
1:47a70d3: 		
1:47a70d3: 	}
1:47a70d3: 
1:47a70d3: 	static class TestRecoverableResource implements RecoverableXAResource {
1:47a70d3: 
1:47a70d3: 		private final String id;
1:47a70d3: 		
1:47a70d3: 		private final JdbcDataSource dataSource;
1:47a70d3: 		
1:47a70d3: 		public TestRecoverableResource(String id, JdbcDataSource dataSource) {
1:47a70d3: 			this.id = id;
1:47a70d3: 			this.dataSource = dataSource;
1:47a70d3: 		}
1:47a70d3: 
1:47a70d3: 		@Override
1:47a70d3: 		public String getId() {
1:47a70d3: 			return id;
1:47a70d3: 		}
1:47a70d3: 
1:47a70d3: 		@Override
1:47a70d3: 		public XAResource getXAResource() throws Exception {
1:47a70d3: 			XAConnection xaConnection = dataSource.getXAConnection();
1:47a70d3: 			if(xaConnection.getConnection().isValid(2)) {
1:47a70d3: 				return xaConnection.getXAResource();
1:47a70d3: 			} else {
1:47a70d3: 				return null;
1:47a70d3: 			}
1:47a70d3: 		}
1:47a70d3: 
1:47a70d3: 		@Override
1:47a70d3: 		public void releaseXAResource(XAResource xaRes) {
1:47a70d3: 			// This is valid for H2;
1:47a70d3: 			try {
1:47a70d3: 				((XAConnection) xaRes).close();
1:47a70d3: 			} catch (SQLException e) {
1:47a70d3: 				// TODO Auto-generated catch block
1:47a70d3: 				e.printStackTrace();
1:47a70d3: 			}
1:47a70d3: 		}
1:47a70d3: 		
1:47a70d3: 	}
1:47a70d3: 	
1:47a70d3: 	@Test
1:7f1e7ab: 	public void testRequiredWithRollback() throws Exception {
1:7f1e7ab: 		XAConnection xaConn = dataSource.getXAConnection();
1:7f1e7ab: 		try {
1:7f1e7ab: 			txControl.required(() -> {
1:7f1e7ab: 				
1:47a70d3: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource(), null);
1:7f1e7ab: 				
1:7f1e7ab: 				Connection conn = xaConn.getConnection();
1:47a70d3: 				// conn.setAutoCommit(false);
1:7f1e7ab: 				
1:7f1e7ab: 				conn.createStatement()
1:7f1e7ab: 						.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1:7f1e7ab: 				
1:7f1e7ab: 				txControl.setRollbackOnly();
1:7f1e7ab: 				return null;
1:7f1e7ab: 			});	
1:7f1e7ab: 		} finally {
1:7f1e7ab: 			xaConn.close();
1:7f1e7ab: 		}
1:7f1e7ab: 		
1:7f1e7ab: 		try (Connection conn = dataSource.getConnection()) {
1:7f1e7ab: 			ResultSet rs = conn.createStatement()
1:7f1e7ab: 					.executeQuery("Select * from TEST_TABLE");
1:7f1e7ab: 			assertFalse(rs.next());
1:7f1e7ab: 		}
1:7f1e7ab: 	}
1:7f1e7ab: 
1:7f1e7ab: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:3bca813
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Field;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.geronimo.transaction.log.HOWLLog;
/////////////////////////////////////////////////////////////////////////
1: 	public void destroy() throws Exception {
1: 		
1: 		checkLogClosed(txControl);
/////////////////////////////////////////////////////////////////////////
1: 	private void checkLogClosed(TransactionControlImpl toCheck) throws Exception {
1: 		
1: 		Field f = TransactionControlImpl.class.getDeclaredField("log");
1: 		f.setAccessible(true);
1: 		HOWLLog log = (HOWLLog) f.get(toCheck);
1: 		
1: 		f = HOWLLog.class.getDeclaredField("logger");
1: 		f.setAccessible(true);
1: 		org.objectweb.howl.log.Logger howlLogger = (org.objectweb.howl.log.Logger) f.get(log);
1: 		
1: 		f = org.objectweb.howl.log.Logger.class.getDeclaredField("bmgr");
1: 		f.setAccessible(true);
1: 		Object logBufferManager = f.get(howlLogger);
1: 		
1: 		f = logBufferManager.getClass().getDeclaredField("flushManager");
1: 		f.setAccessible(true);
1: 		Thread flushThread = (Thread) f.get(logBufferManager);
1: 		
1: 		assertFalse(flushThread.isAlive());
1: 		
1: 		f = org.objectweb.howl.log.Logger.class.getDeclaredField("lfmgr");
1: 		f.setAccessible(true);
1: 		Object logFileManager = f.get(howlLogger);
1: 		
1: 		f = logFileManager.getClass().getDeclaredField("eventManagerThread");
1: 		f.setAccessible(true);
1: 		Thread eventManagerThread = (Thread) f.get(logFileManager);
1: 		
1: 		assertFalse(eventManagerThread.isAlive());
1: 	}
1: 
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: 		txControl.close();
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: import static javax.transaction.xa.XAResource.XA_OK;
1: import static org.junit.Assert.assertTrue;
1: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1: import java.io.File;
1: import java.util.concurrent.atomic.AtomicReference;
1: import java.util.function.BiConsumer;
1: import javax.transaction.xa.XAResource;
1: import org.h2.tools.Server;
1: import org.mockito.ArgumentCaptor;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceEvent;
1: import org.osgi.framework.ServiceListener;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.transaction.control.TransactionException;
1: import org.osgi.service.transaction.control.TransactionRolledBackException;
1: import org.osgi.service.transaction.control.TransactionStatus;
1: import org.osgi.service.transaction.control.recovery.RecoverableXAResource;
1: /**
1:  * The tests in this class look a little odd because we're using an
1:  * unmanaged resource. This is to avoid creating a dependency on a
1:  * JDBCResourceProvider just for the tests, and to give explicit
1:  * control of when things get registered
1:  *
1:  */
1: 	@Mock
1: 	BundleContext ctx;
1: 
1: 	@Mock
1: 	ServiceReference<RecoverableXAResource> serviceRef;
1: 	
1: 	
1: 	Server server;
1: 	
1: 		config.put("recovery.log.enabled", true);
1: 		config.put("recovery.log.dir", "target/recovery-test/recoverylog");
1: 		txControl = new TransactionControlImpl(ctx, config);
1: 		setupServerAndDataSource();
/////////////////////////////////////////////////////////////////////////
1: 
1: 	private void setupServerAndDataSource() throws SQLException {
1: 		server = Server.createTcpServer("-tcpPort", "0");
1: 		server.start();
1: 		
1: 		File dbPath = new File("target/recovery-test/database");
1: 		
1: 		dataSource = new JdbcDataSource();
1: 		dataSource.setUrl("jdbc:h2:tcp://127.0.0.1:" + server.getPort() + "/" + dbPath.getAbsolutePath());
1: 	}
1: 		try (Connection conn = dataSource.getConnection()) {
1: 			conn.createStatement().execute("shutdown immediately");
1: 		} catch (SQLException e) {
1: 			// TODO Auto-generated catch block
1: 			e.printStackTrace();
1: 		}
1: 		
1: 		delete(new File("target/recovery-test"));
1: 	}
1: 
1: 	private void delete(File file) {
1: 		if(file.isDirectory()) {
1: 			for(File f : file.listFiles()) {
1: 				delete(f);
1: 			}
1: 		} 
1: 		file.delete();
1: 	public void testRequiredNoRecovery() throws Exception {
1: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource(), null);
1: 				// conn.setAutoCommit(false);
/////////////////////////////////////////////////////////////////////////
1: 			assertFalse(rs.next());
1: 	public void testRequired2PCNoRecovery() throws Exception {
1: 		XAConnection xaConn = dataSource.getXAConnection();
1: 		XAConnection xaConn2 = dataSource.getXAConnection();
1: 		try {
1: 			txControl.required(() -> {
1: 				
1: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource(), null);
1: 				txControl.getCurrentContext().registerXAResource(xaConn2.getXAResource(), null);
1: 				
1: 				Connection conn = xaConn.getConnection();
1: 				// conn.setAutoCommit(false);
1: 				Connection conn2 = xaConn2.getConnection();
1: 				conn2.setAutoCommit(false);
1: 				
1: 				conn.createStatement()
1: 						.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 				return conn2.createStatement()
1: 						.execute("Insert into TEST_TABLE values ( 'Hello World 2!' )");
1: 			});	
1: 		} finally {
1: 			xaConn.close();
1: 		}
1: 		
1: 		try (Connection conn = dataSource.getConnection()) {
1: 			ResultSet rs = conn.createStatement()
1: 					.executeQuery("Select * from TEST_TABLE order by message DESC");
1: 			rs.next();
1: 			assertEquals("Hello World!", rs.getString(1));
1: 			rs.next();
1: 			assertEquals("Hello World 2!", rs.getString(1));
1: 			assertFalse(rs.next());
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void testRequiredRecoverable() throws Exception {
1: 		XAConnection xaConn = dataSource.getXAConnection();
1: 		try {
1: 			txControl.required(() -> {
1: 				
1: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource(), "foo");
1: 				
1: 				Connection conn = xaConn.getConnection();
1: 				// conn.setAutoCommit(false);
1: 				
1: 				return conn.createStatement()
1: 						.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			});	
1: 		} finally {
1: 			xaConn.close();
1: 		}
1: 		
1: 		try (Connection conn = dataSource.getConnection()) {
1: 			ResultSet rs = conn.createStatement()
1: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			assertEquals("Hello World!", rs.getString(1));
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void testRequiredRecoveryRequiredPrePrepare() throws Exception {
1: 		doRecoveryRequired((good, poison) -> {
1: 				txControl.getCurrentContext().registerXAResource(poison, null);
1: 				txControl.getCurrentContext().registerXAResource(good, "foo");
1: 			}, TransactionStatus.ROLLED_BACK);
1: 		
1: 		boolean success = false;
1: 		XAConnection conn = dataSource.getXAConnection();
1: 		for(int i=0; i < 5; i++) {
1: 			if(conn.getXAResource().recover(XAResource.TMSTARTRSCAN).length == 0) {
1: 				success = true;
1: 				break;
1: 			} else {
1: 				// Wait for recovery to happen!
1: 				Thread.sleep(500);
1: 			}
1: 		}
1: 		
1: 		assertTrue("No recovery in time", success);
1: 	}
1: 	
1: 	@Test
1: 	public void testRequiredRecoveryRequiredPostPrepare() throws Exception {
1: 		doRecoveryRequired((good, poison) -> {
1: 				txControl.getCurrentContext().registerXAResource(good, "foo");
1: 				txControl.getCurrentContext().registerXAResource(poison, null);
1: 			}, TransactionStatus.COMMITTED);
1: 		
1: 		boolean success = false;
1: 		for(int i=0; i < 5; i++) {
1: 			try (Connection conn = dataSource.getConnection()) {
1: 				ResultSet rs = conn.createStatement()
1: 						.executeQuery("Select * from TEST_TABLE");
1: 				if(rs.next()) {
1: 					assertEquals("Hello World!", rs.getString(1));
1: 					success = true;
1: 					break;
1: 				} else {
1: 					// Wait for recovery to happen!
1: 					Thread.sleep(500);
1: 				}
1: 			}
1: 		}
1: 		
1: 		assertTrue("No recovery in time", success);
1: 	}
1: 	
1: 	public void doRecoveryRequired(BiConsumer<XAResource, XAResource> ordering, 
1: 			TransactionStatus expectedFinalState) throws Exception {
1: 		
1: 		//Register the recoverable resource
1: 		ArgumentCaptor<ServiceListener> captor = ArgumentCaptor.forClass(ServiceListener.class);
1: 		Mockito.verify(ctx).addServiceListener(captor.capture(), Mockito.anyString());
1: 		Mockito.when(ctx.getService(serviceRef)).thenReturn(new TestRecoverableResource("foo", dataSource));
1: 		
1: 		captor.getValue().serviceChanged(new ServiceEvent(ServiceEvent.REGISTERED, serviceRef));
1: 		
1: 		XAConnection xaConn = dataSource.getXAConnection();
1: 		AtomicReference<TransactionStatus> ref = new AtomicReference<TransactionStatus>();
1: 		try {
1: 			txControl.required(() -> {
1: 				
1: 				txControl.getCurrentContext().postCompletion(ref::set);
1: 				
1: 				Connection conn = xaConn.getConnection();
1: 				// conn.setAutoCommit(false);
1: 				
1: 				XAResource dsResource = xaConn.getXAResource();
1: 				
1: 				XAResource poison = Mockito.mock(XAResource.class);
1: 				Mockito.when(poison.prepare(Mockito.any())).thenAnswer(i -> {
1: 					// Now kill the db server before it commits!
1: 					conn.createStatement().execute("shutdown immediately");
1: 					Thread.sleep(1000);
1: 					return XA_OK;	
1: 				});
1: 
1: 				ordering.accept(dsResource, poison);
1: 				
1: 				return conn.createStatement()
1: 						.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			});	
1: 		} catch (TransactionException te) {
1: 			assertEquals(expectedFinalState, ref.get());
1: 			assertEquals(expectedFinalState == ROLLED_BACK, te instanceof TransactionRolledBackException);
1: 		} finally {
1: 			try {
1: 				xaConn.close();
1: 			} catch (SQLException sqle) {}
1: 		}
1: 		
1: 		setupServerAndDataSource();
1: 		
1: 	}
1: 
1: 	static class TestRecoverableResource implements RecoverableXAResource {
1: 
1: 		private final String id;
1: 		
1: 		private final JdbcDataSource dataSource;
1: 		
1: 		public TestRecoverableResource(String id, JdbcDataSource dataSource) {
1: 			this.id = id;
1: 			this.dataSource = dataSource;
1: 		}
1: 
1: 		@Override
1: 		public String getId() {
1: 			return id;
1: 		}
1: 
1: 		@Override
1: 		public XAResource getXAResource() throws Exception {
1: 			XAConnection xaConnection = dataSource.getXAConnection();
1: 			if(xaConnection.getConnection().isValid(2)) {
1: 				return xaConnection.getXAResource();
1: 			} else {
1: 				return null;
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public void releaseXAResource(XAResource xaRes) {
1: 			// This is valid for H2;
1: 			try {
1: 				((XAConnection) xaRes).close();
1: 			} catch (SQLException e) {
1: 				// TODO Auto-generated catch block
1: 				e.printStackTrace();
1: 			}
1: 		}
1: 		
1: 	}
1: 	
1: 	@Test
1: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource(), null);
1: 				// conn.setAutoCommit(false);
commit:7f1e7ab
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.service.xa.impl;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: 
1: import java.sql.Connection;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.sql.XAConnection;
1: 
1: import org.h2.jdbcx.JdbcDataSource;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.runners.MockitoJUnitRunner;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class TransactionLogTest {
1: 
1: 	TransactionControlImpl txControl;
1: 	
1: 	JdbcDataSource dataSource;
1: 
1: 	@Before
1: 	public void setUp() throws Exception {
1: 		Map<String, Object> config = new HashMap<>();
0: 		config.put("recovery.enabled", true);
0: 		config.put("recovery.log.dir", "target/generated/recoverylog");
1: 		
0: 		txControl = new TransactionControlImpl(null, config);
1: 		
0: 		dataSource = new JdbcDataSource();
0: 		dataSource.setUrl("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
1: 		
1: 		try (Connection conn = dataSource.getConnection()) {
1: 			Statement s = conn.createStatement();
1: 			try {s.execute("DROP TABLE TEST_TABLE");} catch (SQLException sqle) {}
1: 			s.execute("CREATE TABLE TEST_TABLE ( message varchar(255) )");
1: 		}
1: 	}
1: 	
1: 	@After
0: 	public void destroy() {
0: 		txControl.destroy();
1: 	}
1: 
1: 	@Test
0: 	public void testRequired() throws Exception {
1: 		XAConnection xaConn = dataSource.getXAConnection();
1: 		try {
1: 			txControl.required(() -> {
1: 	
0: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource());
1: 	
1: 				Connection conn = xaConn.getConnection();
1: 				
1: 				return conn.createStatement()
1: 					.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 			});	
1: 		} finally {
1: 			xaConn.close();
1: 		}
1: 
1: 		try (Connection conn = dataSource.getConnection()) {
1: 			ResultSet rs = conn.createStatement()
1: 					.executeQuery("Select * from TEST_TABLE");
1: 			rs.next();
1: 			assertEquals("Hello World!", rs.getString(1));
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void testRequiredWithRollback() throws Exception {
1: 		XAConnection xaConn = dataSource.getXAConnection();
1: 		try {
1: 			txControl.required(() -> {
1: 				
0: 				txControl.getCurrentContext().registerXAResource(xaConn.getXAResource());
1: 				
1: 				Connection conn = xaConn.getConnection();
1: 				
1: 				conn.createStatement()
1: 						.execute("Insert into TEST_TABLE values ( 'Hello World!' )");
1: 				
1: 				txControl.setRollbackOnly();
1: 				return null;
1: 			});	
1: 		} finally {
1: 			xaConn.close();
1: 		}
1: 		
1: 		try (Connection conn = dataSource.getConnection()) {
1: 			ResultSet rs = conn.createStatement()
1: 					.executeQuery("Select * from TEST_TABLE");
1: 			assertFalse(rs.next());
1: 		}
1: 	}
1: 
1: }
============================================================================