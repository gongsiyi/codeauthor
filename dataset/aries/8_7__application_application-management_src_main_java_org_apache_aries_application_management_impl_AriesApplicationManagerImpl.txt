1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
1:8914925: 
1:8914925: package org.apache.aries.application.management.impl;
1:8914925: 
1:8914925: import java.io.File;
1:8914925: import java.io.FileOutputStream;
1:8914925: import java.io.IOException;
1:8914925: import java.io.InputStream;
1:8914925: import java.io.OutputStream;
1:b5022f7: import java.net.JarURLConnection;
1:8914925: import java.net.URL;
1:8914925: import java.util.Collections;
1:c70a567: import java.util.Dictionary;
1:8914925: import java.util.HashMap;
1:8914925: import java.util.HashSet;
1:c70a567: import java.util.Hashtable;
1:8914925: import java.util.Iterator;
1:8914925: import java.util.List;
1:8914925: import java.util.Map;
1:8914925: import java.util.Set;
1:8914925: import java.util.jar.Manifest;
1:8914925: 
1:8914925: import org.apache.aries.application.ApplicationMetadata;
1:beeb1d7: import org.apache.aries.application.ApplicationMetadataFactory;
1:8914925: import org.apache.aries.application.DeploymentMetadata;
1:8914925: import org.apache.aries.application.DeploymentMetadataFactory;
1:8914925: import org.apache.aries.application.management.AriesApplication;
1:948b72b: import org.apache.aries.application.management.AriesApplicationContext;
1:948b72b: import org.apache.aries.application.management.AriesApplicationListener;
1:8914925: import org.apache.aries.application.management.AriesApplicationManager;
1:8914925: import org.apache.aries.application.management.BundleInfo;
1:8914925: import org.apache.aries.application.management.ManagementException;
1:8914925: import org.apache.aries.application.management.ResolveConstraint;
1:43be66f: import org.apache.aries.application.management.ResolverException;
1:8151f8c: import org.apache.aries.application.management.UpdateException;
1:8914925: import org.apache.aries.application.management.internal.MessageUtil;
1:c70a567: import org.apache.aries.application.management.repository.ApplicationRepository;
1:89f804e: import org.apache.aries.application.management.spi.convert.BundleConversion;
1:89f804e: import org.apache.aries.application.management.spi.convert.BundleConverter;
1:89f804e: import org.apache.aries.application.management.spi.convert.ConversionException;
1:89f804e: import org.apache.aries.application.management.spi.repository.BundleRepository;
1:89f804e: import org.apache.aries.application.management.spi.resolve.DeploymentManifestManager;
1:89f804e: import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
1:89f804e: import org.apache.aries.application.management.spi.runtime.LocalPlatform;
1:8914925: import org.apache.aries.application.utils.AppConstants;
1:ba73ed7: import org.apache.aries.application.utils.management.SimpleBundleInfo;
1:8914925: import org.apache.aries.application.utils.manifest.ManifestDefaultsInjector;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:910fec0: import org.apache.aries.util.filesystem.IDirectory;
1:910fec0: import org.apache.aries.util.filesystem.IFile;
1:c6cb34d: import org.apache.aries.util.io.IOUtils;
1:910fec0: import org.apache.aries.util.manifest.BundleManifest;
1:910fec0: import org.apache.aries.util.manifest.ManifestProcessor;
1:c70a567: import org.osgi.framework.BundleContext;
1:8914925: import org.osgi.framework.BundleException;
1:dd6fe13: import org.osgi.framework.InvalidSyntaxException;
1:8914925: import org.osgi.framework.ServiceException;
1:dd6fe13: import org.osgi.framework.ServiceReference;
1:a507420: import org.osgi.framework.ServiceRegistration;
1:8914925: import org.slf4j.Logger;
1:8914925: import org.slf4j.LoggerFactory;
1:8914925: 
1:8914925: public class AriesApplicationManagerImpl implements AriesApplicationManager {
1:8914925: 
1:beeb1d7:   private ApplicationMetadataFactory _applicationMetadataFactory;
1:8914925:   private DeploymentMetadataFactory _deploymentMetadataFactory;
1:8914925:   private List<BundleConverter> _bundleConverters;
1:8914925: 
1:8914925:   private LocalPlatform _localPlatform;
1:948b72b:   private AriesApplicationContextManager _applicationContextManager;
1:c70a567:   private BundleContext _bundleContext;
1:8914925: 
1:5258897:   private DeploymentManifestManager deploymentManifestManager;
1:8914925:   
1:a507420:   private Map<AriesApplication, ServiceRegistration> serviceRegistrations = new HashMap<AriesApplication, ServiceRegistration>();
1:a507420:   
1:8914925:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management.impl");
1:8914925: 
1:beeb1d7:   public void setApplicationMetadataFactory (ApplicationMetadataFactory amf) { 
1:beeb1d7:     _applicationMetadataFactory = amf;
1:8914925:   }
1:8914925:   
1:8914925:   public void setDeploymentMetadataFactory (DeploymentMetadataFactory dmf) { 
1:8914925:     _deploymentMetadataFactory = dmf;
1:8914925:   }
1:8914925:   
1:8914925:   public void setBundleConverters (List<BundleConverter> bcs) { 
1:8914925:     _bundleConverters = bcs;
1:8914925:   }
1:8914925:   
1:5258897:   public void setDeploymentManifestManager(DeploymentManifestManager dm) {
1:5258897:     this.deploymentManifestManager = dm;
1:8914925:   }
1:8914925: 
1:8914925:   public void setLocalPlatform (LocalPlatform lp) { 
1:8914925:     _localPlatform = lp;
1:8914925:   }
1:8914925:   
1:948b72b:   public void setApplicationContextManager (AriesApplicationContextManager acm) { 
1:8914925:     _applicationContextManager = acm;
1:8914925:   }
1:8914925:   
1:c70a567:   public void setBundleContext(BundleContext b)
1:c70a567:   {
1:c70a567:     _bundleContext = b;
1:c70a567:   }
1:8914925:   
1:8914925:   
1:8914925:   /**
1:8914925:    * Create an AriesApplication from a .eba file: a zip file with a '.eba' extension
1:8914925:    */
1:8914925:   public AriesApplication createApplication(IDirectory ebaFile) throws ManagementException {
1:8914925:     ApplicationMetadata applicationMetadata = null;
1:8914925:     DeploymentMetadata deploymentMetadata = null;
1:9a6f681:     Map<String, BundleConversion> modifiedBundles = new HashMap<String, BundleConversion>();
1:8914925:     AriesApplicationImpl application = null;
1:f3f9577:     String appPath = ebaFile.toString();
1:8914925:     try {   
1:f3f9577:       // try to read the app name out of the application.mf
1:8914925:       Manifest applicationManifest = parseApplicationManifest (ebaFile);
1:f3f9577:       String appName = applicationManifest.getMainAttributes().getValue(AppConstants.APPLICATION_NAME);
1:8914925: 
1:7e2bed4:       //If the application name is null, we will try to get the file name.
1:f3f9577:       if (appName == null || appName.isEmpty()) {
1:f3f9577:           String fullPath = appPath;
1:f3f9577:           if (fullPath.endsWith("/")) {
1:7e2bed4:             fullPath = fullPath.substring(0, fullPath.length() -1);  
1:8914925:           }
1:8914925:               
1:7e2bed4:           int last_slash = fullPath.lastIndexOf("/");
1:7e2bed4:           appName = fullPath.substring(last_slash + 1, fullPath.length()); 
1:8914925:       }
1:0a7ee24:                   
1:8914925:       IFile deploymentManifest = ebaFile.getFile(AppConstants.DEPLOYMENT_MF);
1:8914925:       /* We require that all other .jar and .war files included by-value be valid bundles
1:8914925:        * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
1:8914925:        * wars to wabs, plain jars to bundles
1:8914925:        */
1:8914925:       Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
1:8914925:       for (IFile f : ebaFile) { 
1:8914925:         if (f.isDirectory()) { 
1:8914925:           continue;
1:8914925:         }
1:8914925:         BundleManifest bm = getBundleManifest (f);
1:8914925:         if (bm != null) {
1:8914925:           if (bm.isValid()) {
1:9217d9f:             _logger.debug("File {} is a valid bundle. Adding it to bundle list.", f.getName());
1:c70a567:             extraBundlesInfo.add(new SimpleBundleInfo(bm, f.toURL().toExternalForm()));
1:0a7ee24:           } else if (deploymentManifest == null) { 
1:9217d9f:             _logger.debug("File {} is not a valid bundle. Attempting to convert it.", f.getName());
1:8914925:             // We have a jar that needs converting to a bundle, or a war to migrate to a WAB 
1:d1e30f3:             // We only do this if a DEPLOYMENT.MF does not exist.
1:7e2bed4:             BundleConversion convertedBinary = null;
1:8914925:             Iterator<BundleConverter> converters = _bundleConverters.iterator();
1:8914925:             List<ConversionException> conversionExceptions = Collections.emptyList();
1:8914925:             while (converters.hasNext() && convertedBinary == null) { 
1:8914925:               try {
1:9217d9f:             	BundleConverter converter = converters.next();
1:9217d9f:             	_logger.debug("Converting file using {} converter", converter);
1:9217d9f:                 convertedBinary = converter.convert(ebaFile, f);
1:8914925:               } catch (ServiceException sx) {
1:8914925:                 // We'll get this if our optional BundleConverter has not been injected. 
1:8914925:               } catch (ConversionException cx) { 
1:8914925:                 conversionExceptions.add(cx);
1:8914925:               }
1:8914925:             }
1:8914925:             if (conversionExceptions.size() > 0) {
1:8914925:               for (ConversionException cx : conversionExceptions) { 
1:d1e30f3:                 _logger.error("APPMANAGEMENT0004E", new Object[]{f.getName(), appName, cx});
1:8914925:               }
1:d1e30f3:               throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0005E", appName));
1:8914925:             }
1:8914925:             if (convertedBinary != null) { 
1:9217d9f:               _logger.debug("File {} was successfully converted. Adding it to bundle list.", f.getName());
1:0a7ee24:               modifiedBundles.put (f.getName(), convertedBinary);             
1:c70a567:               extraBundlesInfo.add(convertedBinary.getBundleInfo());
1:9217d9f:             } else {
1:9217d9f:               _logger.debug("File {} was not converted.", f.getName());
1:9217d9f:             }
1:9217d9f:           } else {
1:9217d9f:             _logger.debug("File {} was ignored. It is not a valid bundle and DEPLOYMENT.MF is present", f.getName());
1:8914925:           }
1:9217d9f:         } else {
1:9217d9f:           _logger.debug("File {} was ignored. It has no manifest file.", f.getName());
1:9217d9f:         }
1:8914925:       }
1:8914925:  
1:0a7ee24:       // if Application-Content header was not specified build it based on the bundles included by value
1:0a7ee24:       if (applicationManifest.getMainAttributes().getValue(AppConstants.APPLICATION_CONTENT) == null) {
1:0a7ee24:           String appContent = buildAppContent(extraBundlesInfo);
1:0a7ee24:           applicationManifest.getMainAttributes().putValue(AppConstants.APPLICATION_CONTENT, appContent);
1:0a7ee24:       }
1:0a7ee24:       
1:7e2bed4:       ManifestDefaultsInjector.updateManifest(applicationManifest, appName, ebaFile); 
1:beeb1d7:       applicationMetadata = _applicationMetadataFactory.createApplicationMetadata(applicationManifest);
1:8914925:       
1:8914925:       if (deploymentManifest != null) { 
1:c70a567:         deploymentMetadata = _deploymentMetadataFactory.parseDeploymentMetadata(deploymentManifest);
1:8914925:         
1:8914925:         // Validate: symbolic names must match
1:8914925:         String appSymbolicName = applicationMetadata.getApplicationSymbolicName();
1:31f6f18:         String depSymbolicName = deploymentMetadata.getApplicationSymbolicName();
1:8914925:         if (!appSymbolicName.equals(depSymbolicName)) {
1:d1e30f3:           throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0002E", appName, appSymbolicName, depSymbolicName));
1:8914925:         }
1:8914925:       }
1:8914925: 
1:8914925:       application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
1:8914925:       application.setDeploymentMetadata(deploymentMetadata);
1:8914925:       // Store a reference to any modified bundles
1:8914925:       application.setModifiedBundles (modifiedBundles);
1:8914925:     } catch (IOException iox) {
1:f3f9577:       _logger.error ("APPMANAGEMENT0006E", new Object []{appPath, iox});
1:8914925:       throw new ManagementException(iox);
1:8914925:     }
1:8914925:     return application;
1:8914925:   }
1:8914925: 
1:0a7ee24:   private String buildAppContent(Set<BundleInfo> bundleInfos) {
1:0a7ee24:       StringBuilder builder = new StringBuilder();
1:0a7ee24:       Iterator<BundleInfo> iterator = bundleInfos.iterator();
1:0a7ee24:       while (iterator.hasNext()) {
1:0a7ee24:           BundleInfo info = iterator.next();
1:0a7ee24:           builder.append(info.getSymbolicName());
1:0a7ee24: 
1:0a7ee24:           // bundle version is not a required manifest header
1:0a7ee24:           if (info.getVersion() != null) {
1:0a7ee24:               String version = info.getVersion().toString();
1:0a7ee24:               builder.append(";version=\"[");
1:0a7ee24:               builder.append(version);
1:0a7ee24:               builder.append(',');
1:0a7ee24:               builder.append(version);
1:0a7ee24:               builder.append("]\"");
1:0a7ee24:           }
1:0a7ee24: 
1:0a7ee24:           if (iterator.hasNext()) {
1:0a7ee24:               builder.append(",");
1:0a7ee24:           }
1:0a7ee24:       }
1:0a7ee24:       return builder.toString();
1:0a7ee24:   }
1:0a7ee24:   
1:8914925:   /**
1:8914925:    * Create an application from a URL. 
1:8914925:    * The first version of this method isn't smart enough to check whether
1:8914925:    * the input URL is file://
1:8914925:    */
1:8914925:   public AriesApplication createApplication(URL url) throws ManagementException {
1:8914925:     OutputStream os = null;
1:8914925:     AriesApplication app = null;
1:8914925:     try { 
1:8914925:       File tempFile = _localPlatform.getTemporaryFile();
1:8914925:       InputStream is = url.openStream();
1:8914925:       os = new FileOutputStream (tempFile);
1:8914925:       IOUtils.copy(is, os);
1:8914925:       IDirectory downloadedSource = FileSystem.getFSRoot(tempFile);
1:8914925:       app = createApplication (downloadedSource);
1:8914925:     } catch (IOException iox) {
1:8914925:       throw new ManagementException (iox);
1:8914925:     }
1:8914925:       finally { 
1:8914925:       IOUtils.close(os);
1:8914925:     }
1:8914925:     return app;
1:8914925:   }
1:8914925: 
1:3b38bc2:   public AriesApplication resolve(AriesApplication originalApp, ResolveConstraint... constraints) throws ResolverException {
1:3b38bc2:     AriesApplicationImpl application = new AriesApplicationImpl(originalApp.getApplicationMetadata(), originalApp.getBundleInfo(), _localPlatform);
1:5258897:     Manifest deploymentManifest = deploymentManifestManager.generateDeploymentManifest(originalApp, constraints);
1:5258897:     try {
1:5258897:       application.setDeploymentMetadata(_deploymentMetadataFactory.createDeploymentMetadata(deploymentManifest));
1:5258897:     } catch (IOException ioe) {
1:5258897:       throw new ResolverException(ioe);
1:8914925:     }
1:ffe1828:     // Store a reference to any modified bundles
1:3b38bc2:     if (originalApp instanceof AriesApplicationImpl) {
1:5258897:       // TODO: are we really passing streams around ?
1:5258897:       application.setModifiedBundles(((AriesApplicationImpl) originalApp).getModifiedBundles());
1:8914925:     }
1:0f3010e:     return application;
1:8914925:   } 
1:8914925: 
1:948b72b:   public AriesApplicationContext install(AriesApplication app) throws BundleException, ManagementException, ResolverException {
1:8914925:     
1:3b38bc2:     if (!app.isResolved()) {
1:dd6fe13:       app = resolve(app);
1:dd6fe13:     }
1:dd6fe13:   
1:dd6fe13:     // Register an Application Repository for this application if none exists
1:dd6fe13:     String appScope = app.getApplicationMetadata().getApplicationScope();    
1:dd6fe13:     ServiceReference[] ref = null;
1:dd6fe13:     try {
1:dd6fe13:         String filter = "(" + BundleRepository.REPOSITORY_SCOPE + "=" + appScope + ")";
1:dd6fe13:         ref = _bundleContext.getServiceReferences(BundleRepository.class.getName(),filter);
1:dd6fe13:     } 
1:dd6fe13:     catch (InvalidSyntaxException e) {
1:dd6fe13:         // Something went wrong attempting to find a service so we will act as if 
1:dd6fe13:         // there is no existing service.
1:5258897:     }
1:dd6fe13:     
1:dd6fe13:     if (ref == null || ref.length == 0) {
1:dd6fe13:         Dictionary dict = new Hashtable();
1:dd6fe13:         dict.put(BundleRepository.REPOSITORY_SCOPE, appScope);
1:a507420:         ServiceRegistration serviceReg = _bundleContext.registerService(BundleRepository.class.getName(), 
1:dd6fe13:             new ApplicationRepository(app), 
1:dd6fe13:             dict);
1:a507420:         serviceRegistrations.put(app, serviceReg);
1:dd6fe13:     }
1:dd6fe13:   
1:948b72b:     AriesApplicationContext result = _applicationContextManager.getApplicationContext(app);
1:b5022f7:     
1:b5022f7:     // When installing bundles in the .eba file we use the jar url scheme. This results in a
1:b5022f7:     // JarFile being held open, which is bad as on windows we cannot delete the .eba file
1:b5022f7:     // so as a work around we open a url connection to one of the bundles in the eba and
1:b5022f7:     // if it is a jar url we close the associated JarFile.
1:b5022f7:     
1:b5022f7:     Iterator<BundleInfo> bi = app.getBundleInfo().iterator();
1:b5022f7:     
1:b5022f7:     if (bi.hasNext()) {
1:b5022f7:       String location = bi.next().getLocation();
1:b5022f7:       if (location.startsWith("jar")) {
1:b5022f7:         try {
1:b5022f7:           URL url = new URL(location);
1:b5022f7:           JarURLConnection urlc = (JarURLConnection) url.openConnection();
1:052d7e0:           
1:052d7e0:           // Make sure that we pick up the cached version rather than creating a new one
1:052d7e0:           urlc.setUseCaches(true);
1:b5022f7:           urlc.getJarFile().close();
1:b5022f7:         } catch (IOException e) {
1:b5022f7:           // TODO Auto-generated catch block
1:b5022f7:           e.printStackTrace();
1:b5022f7:         }
1:b5022f7:       }
1:b5022f7:     }
1:b5022f7:     
1:8914925:     return result;
1:8914925:   }
1:8914925:   
1:a507420:   public void uninstall(AriesApplicationContext appContext) throws BundleException 
1:1caf596:   {
1:a507420:     _applicationContextManager.remove(appContext);
1:a507420:     
1:a507420:     // Also unregister the service if we added one for it
1:a507420:     AriesApplication app = appContext.getApplication();
1:a507420:     if (app != null) {
1:a507420:       ServiceRegistration reg = serviceRegistrations.remove(app);
1:a507420:       if (reg != null) 
1:a507420:         try {
1:a507420:           reg.unregister();
1:a507420:         } catch (IllegalStateException e) {
1:a507420:           // Must be already unregistered - ignore
1:a507420:         }
1:a507420:     }
1:8914925:   }
1:8914925: 
1:948b72b:   public void addApplicationListener(AriesApplicationListener l) {
1:8914925:     // Need application listener lifecycle support
1:8914925:   }
1:8914925: 
1:948b72b:   public void removeApplicationListener(AriesApplicationListener l) {
2:8914925:     // TODO Auto-generated method stub
1:8914925: 
1:8914925:   }
1:8914925: 
1:8914925: 
1:8914925: 
1:8914925:   /**
1:8914925:    * Locate and parse an application.mf in an eba
1:8914925:    * @param source An aries application file
1:c2aad37:    * @return parsed manifest, or an empty Manifest
1:8914925:    * @throws IOException
1:8914925:    */
1:8914925:   private Manifest parseApplicationManifest (IDirectory source) throws IOException {
1:17bf358:     Manifest result = new Manifest();
1:8914925:     IFile f = source.getFile(AppConstants.APPLICATION_MF);
1:8914925:     if (f != null) { 
1:8914925:       InputStream is = null;
1:8914925:       try { 
1:8914925:         is = f.open();
1:8914925:         result = ManifestProcessor.parseManifest(is);
1:8914925:       } catch (IOException iox) { 
1:8914925:         _logger.error ("APPMANAGEMENT0007E", new Object[]{source.getName(), iox});
1:8914925:         throw iox;
1:8914925:       } finally { 
1:8914925:         IOUtils.close(is);
1:8914925:       }
1:8914925:     }
1:8914925:     return result;
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Extract a bundle manifest from an IFile representing a bundle
1:8914925:    * @param file The bundle to extract the manifest from
1:8914925:    * @return bundle manifest
1:8914925:    */
1:8914925:   private BundleManifest getBundleManifest(IFile file) throws IOException {
1:8914925:     BundleManifest mf = null;
1:8914925:     InputStream in = null;
1:8914925:     try { 
1:8914925:       in = file.open();
1:8914925:       mf = BundleManifest.fromBundle(in);
1:8914925:     } finally { 
1:8914925:       IOUtils.close(in);
1:8914925:     }    
1:8914925:     return mf;
1:8914925:   }
1:8914925: 
1:8151f8c:   public AriesApplicationContext update(AriesApplication app, DeploymentMetadata depMf) throws UpdateException {
1:8151f8c:     if (!(app instanceof AriesApplicationImpl)) throw new IllegalArgumentException("Argument is not AriesApplication created by this manager");
1:8151f8c:     
1:8151f8c:     if (!!!app.getApplicationMetadata().getApplicationSymbolicName().equals(depMf.getApplicationSymbolicName())
1:8151f8c:         || !!!app.getApplicationMetadata().getApplicationVersion().equals(depMf.getApplicationVersion())) {
1:8151f8c:       throw new IllegalArgumentException("The deployment metadata does not match the application.");
1:8151f8c:     }
1:8151f8c:     
1:8151f8c:     DeploymentMetadata oldMetadata = app.getDeploymentMetadata();
1:8151f8c:     
1:8151f8c:     AriesApplicationContext foundCtx = null;
1:8151f8c:     for (AriesApplicationContext ctx : _applicationContextManager.getApplicationContexts()) {
1:8151f8c:       if (ctx.getApplication().equals(app)) {
1:8151f8c:         foundCtx = ctx;
1:8151f8c:         break;
1:8151f8c:       }
1:8151f8c:     }
1:8151f8c:     
1:8151f8c:     ((AriesApplicationImpl) app).setDeploymentMetadata(depMf);
1:8151f8c:     
1:8151f8c:     if (foundCtx != null) {
1:8151f8c:       try {
1:8151f8c:         return _applicationContextManager.update(app, oldMetadata);
1:8151f8c:       } catch (UpdateException ue) {
1:8151f8c:         if (ue.hasRolledBack()) {
1:8151f8c:           ((AriesApplicationImpl) app).setDeploymentMetadata(oldMetadata);
1:8151f8c:         }
1:8151f8c:         
1:8151f8c:         throw ue;
1:8151f8c:       }
1:8151f8c:     } else {
1:8151f8c:       return null;
1:8151f8c:     }
1:8151f8c:   }
1:8914925: }
============================================================================
author:Emily Jiang
-------------------------------------------------------------------------------
commit:a507420
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceRegistration;
/////////////////////////////////////////////////////////////////////////
1:   private Map<AriesApplication, ServiceRegistration> serviceRegistrations = new HashMap<AriesApplication, ServiceRegistration>();
1:   
/////////////////////////////////////////////////////////////////////////
1:         ServiceRegistration serviceReg = _bundleContext.registerService(BundleRepository.class.getName(), 
1:         serviceRegistrations.put(app, serviceReg);
/////////////////////////////////////////////////////////////////////////
1:   public void uninstall(AriesApplicationContext appContext) throws BundleException 
1:     _applicationContextManager.remove(appContext);
1:     
1:     // Also unregister the service if we added one for it
1:     AriesApplication app = appContext.getApplication();
1:     if (app != null) {
1:       ServiceRegistration reg = serviceRegistrations.remove(app);
1:       if (reg != null) 
1:         try {
1:           reg.unregister();
1:         } catch (IllegalStateException e) {
1:           // Must be already unregistered - ignore
1:         }
1:     }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:052d7e0
/////////////////////////////////////////////////////////////////////////
1:           
1:           // Make sure that we pick up the cached version rather than creating a new one
1:           urlc.setUseCaches(true);
commit:b5022f7
/////////////////////////////////////////////////////////////////////////
1: import java.net.JarURLConnection;
0: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
1:     
1:     // When installing bundles in the .eba file we use the jar url scheme. This results in a
1:     // JarFile being held open, which is bad as on windows we cannot delete the .eba file
1:     // so as a work around we open a url connection to one of the bundles in the eba and
1:     // if it is a jar url we close the associated JarFile.
1:     
1:     Iterator<BundleInfo> bi = app.getBundleInfo().iterator();
1:     
1:     if (bi.hasNext()) {
1:       String location = bi.next().getLocation();
1:       if (location.startsWith("jar")) {
1:         try {
1:           URL url = new URL(location);
1:           JarURLConnection urlc = (JarURLConnection) url.openConnection();
1:           urlc.getJarFile().close();
1:         } catch (IOException e) {
1:           // TODO Auto-generated catch block
1:           e.printStackTrace();
1:         }
1:       }
1:     }
1:     
commit:31f6f18
/////////////////////////////////////////////////////////////////////////
1:         String depSymbolicName = deploymentMetadata.getApplicationSymbolicName();
commit:1caf596
/////////////////////////////////////////////////////////////////////////
0:   public void uninstall(ApplicationContext app) throws BundleException 
1:   {
0:     _applicationContextManager.remove(app);
commit:55a9b56
/////////////////////////////////////////////////////////////////////////
0:   public ApplicationContext install(AriesApplication app) throws BundleException, ManagementException {
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:c6cb34d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.io.IOUtils;
commit:910fec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.filesystem.IFile;
0: import org.apache.aries.util.filesystem.IOUtils;
1: import org.apache.aries.util.manifest.BundleManifest;
1: import org.apache.aries.util.manifest.ManifestProcessor;
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.convert.BundleConversion;
1: import org.apache.aries.application.management.spi.convert.BundleConverter;
1: import org.apache.aries.application.management.spi.convert.ConversionException;
1: import org.apache.aries.application.management.spi.repository.BundleRepository;
1: import org.apache.aries.application.management.spi.resolve.DeploymentManifestManager;
1: import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
1: import org.apache.aries.application.management.spi.runtime.LocalPlatform;
commit:8151f8c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.UpdateException;
/////////////////////////////////////////////////////////////////////////
0:     dict.put(BundleRepository.REPOSITORY_SCOPE, app.getApplicationMetadata().getApplicationScope());
/////////////////////////////////////////////////////////////////////////
1:   public AriesApplicationContext update(AriesApplication app, DeploymentMetadata depMf) throws UpdateException {
1:     if (!(app instanceof AriesApplicationImpl)) throw new IllegalArgumentException("Argument is not AriesApplication created by this manager");
1:     
1:     if (!!!app.getApplicationMetadata().getApplicationSymbolicName().equals(depMf.getApplicationSymbolicName())
1:         || !!!app.getApplicationMetadata().getApplicationVersion().equals(depMf.getApplicationVersion())) {
1:       throw new IllegalArgumentException("The deployment metadata does not match the application.");
1:     }
1:     
1:     DeploymentMetadata oldMetadata = app.getDeploymentMetadata();
1:     
1:     AriesApplicationContext foundCtx = null;
1:     for (AriesApplicationContext ctx : _applicationContextManager.getApplicationContexts()) {
1:       if (ctx.getApplication().equals(app)) {
1:         foundCtx = ctx;
1:         break;
1:       }
1:     }
1:     
1:     ((AriesApplicationImpl) app).setDeploymentMetadata(depMf);
1:     
1:     if (foundCtx != null) {
1:       try {
1:         return _applicationContextManager.update(app, oldMetadata);
1:       } catch (UpdateException ue) {
1:         if (ue.hasRolledBack()) {
1:           ((AriesApplicationImpl) app).setDeploymentMetadata(oldMetadata);
1:         }
1:         
1:         throw ue;
1:       }
1:     } else {
1:       return null;
1:     }
1:   }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:9217d9f
/////////////////////////////////////////////////////////////////////////
1:             _logger.debug("File {} is a valid bundle. Adding it to bundle list.", f.getName());
1:             _logger.debug("File {} is not a valid bundle. Attempting to convert it.", f.getName());
/////////////////////////////////////////////////////////////////////////
1:             	BundleConverter converter = converters.next();
1:             	_logger.debug("Converting file using {} converter", converter);
1:                 convertedBinary = converter.convert(ebaFile, f);
/////////////////////////////////////////////////////////////////////////
1:               _logger.debug("File {} was successfully converted. Adding it to bundle list.", f.getName());
1:             } else {
1:               _logger.debug("File {} was not converted.", f.getName());
1:             }
1:           } else {
1:             _logger.debug("File {} was ignored. It is not a valid bundle and DEPLOYMENT.MF is present", f.getName());
1:         } else {
1:           _logger.debug("File {} was ignored. It has no manifest file.", f.getName());
1:         }
commit:0a7ee24
/////////////////////////////////////////////////////////////////////////
1:                   
/////////////////////////////////////////////////////////////////////////
1:           } else if (deploymentManifest == null) { 
/////////////////////////////////////////////////////////////////////////
1:               modifiedBundles.put (f.getName(), convertedBinary);             
0:               extraBundlesInfo.add(convertedBinary.getBundleInfo(_applicationMetadataFactory));
1:       // if Application-Content header was not specified build it based on the bundles included by value
1:       if (applicationManifest.getMainAttributes().getValue(AppConstants.APPLICATION_CONTENT) == null) {
1:           String appContent = buildAppContent(extraBundlesInfo);
1:           applicationManifest.getMainAttributes().putValue(AppConstants.APPLICATION_CONTENT, appContent);
1:       }
1:       
/////////////////////////////////////////////////////////////////////////
1:   private String buildAppContent(Set<BundleInfo> bundleInfos) {
1:       StringBuilder builder = new StringBuilder();
1:       Iterator<BundleInfo> iterator = bundleInfos.iterator();
1:       while (iterator.hasNext()) {
1:           BundleInfo info = iterator.next();
1:           builder.append(info.getSymbolicName());
1: 
1:           // bundle version is not a required manifest header
1:           if (info.getVersion() != null) {
1:               String version = info.getVersion().toString();
1:               builder.append(";version=\"[");
1:               builder.append(version);
1:               builder.append(',');
1:               builder.append(version);
1:               builder.append("]\"");
1:           }
1: 
1:           if (iterator.hasNext()) {
1:               builder.append(",");
1:           }
1:       }
1:       return builder.toString();
1:   }
1:   
commit:948b72b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.AriesApplicationContext;
0: import org.apache.aries.application.management.AriesApplicationContextManager;
1: import org.apache.aries.application.management.AriesApplicationListener;
/////////////////////////////////////////////////////////////////////////
1:   private AriesApplicationContextManager _applicationContextManager;
/////////////////////////////////////////////////////////////////////////
1:   public void setApplicationContextManager (AriesApplicationContextManager acm) { 
/////////////////////////////////////////////////////////////////////////
1:   public AriesApplicationContext install(AriesApplication app) throws BundleException, ManagementException, ResolverException {
1:     AriesApplicationContext result = _applicationContextManager.getApplicationContext(app);
0:   public void uninstall(AriesApplicationContext app) throws BundleException 
1:   public void addApplicationListener(AriesApplicationListener l) {
1:   public void removeApplicationListener(AriesApplicationListener l) {
commit:ba73ed7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.management.SimpleBundleInfo;
/////////////////////////////////////////////////////////////////////////
0:             extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.toURL().toExternalForm()));
/////////////////////////////////////////////////////////////////////////
0:               extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.getName()));
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.management.impl;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.net.URL;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.jar.Manifest;
1: 
1: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.ApplicationMetadataManager;
1: import org.apache.aries.application.DeploymentMetadata;
1: import org.apache.aries.application.DeploymentMetadataFactory;
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.management.ApplicationContext;
0: import org.apache.aries.application.management.ApplicationContextManager;
0: import org.apache.aries.application.management.ApplicationListener;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.management.AriesApplicationResolver;
0: import org.apache.aries.application.management.BundleConverter;
1: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.management.ConversionException;
0: import org.apache.aries.application.management.LocalPlatform;
1: import org.apache.aries.application.management.ManagementException;
1: import org.apache.aries.application.management.ResolveConstraint;
1: import org.apache.aries.application.management.internal.MessageUtil;
1: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
1: import org.apache.aries.application.utils.manifest.ManifestDefaultsInjector;
0: import org.apache.aries.application.utils.manifest.ManifestProcessor;
0: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.ServiceException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AriesApplicationManagerImpl implements AriesApplicationManager {
1: 
0:   private ApplicationMetadataManager _applicationMetadataManager;
1:   private DeploymentMetadataFactory _deploymentMetadataFactory;
1:   private List<BundleConverter> _bundleConverters;
0:   private AriesApplicationResolver _resolver;
1:   private LocalPlatform _localPlatform;
0:   private ApplicationContextManager _applicationContextManager;
1: 
1:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management.impl");
1: 
0:   public void setApplicationMetadataManager (ApplicationMetadataManager amm) { 
0:     _applicationMetadataManager = amm;
1:   }
1:   
1:   public void setDeploymentMetadataFactory (DeploymentMetadataFactory dmf) { 
1:     _deploymentMetadataFactory = dmf;
1:   }
1:   
1:   public void setBundleConverters (List<BundleConverter> bcs) { 
1:     _bundleConverters = bcs;
1:   }
1:   
0:   public void setResolver (AriesApplicationResolver resolver) { 
0:     _resolver = resolver;
1:   }
1: 
1:   public void setLocalPlatform (LocalPlatform lp) { 
1:     _localPlatform = lp;
1:   }
1:   
0:   public void setApplicationContextManager (ApplicationContextManager acm) { 
1:     _applicationContextManager = acm;
1:   }
1:   
1:   
1:   /**
1:    * Create an AriesApplication from a .eba file: a zip file with a '.eba' extension
0:    * as per http://incubator.apache.org/aries/applications.html 
1:    */
1:   public AriesApplication createApplication(IDirectory ebaFile) throws ManagementException {
1:     ApplicationMetadata applicationMetadata = null;
1:     DeploymentMetadata deploymentMetadata = null;
0:     Map<String, InputStream> modifiedBundles = new HashMap<String, InputStream>();
1:     AriesApplicationImpl application = null;
1:     
1:     try { 
1:       Manifest applicationManifest = parseApplicationManifest (ebaFile);
0:       ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
0:       applicationMetadata = _applicationMetadataManager.createApplicationMetadata(applicationManifest);
1: 
1:       IFile deploymentManifest = ebaFile.getFile(AppConstants.DEPLOYMENT_MF);
1:       if (deploymentManifest != null) { 
0:         deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(deploymentManifest);
1:         
1:         // Validate: symbolic names must match
1:         String appSymbolicName = applicationMetadata.getApplicationSymbolicName();
0:         String depSymbolicName = applicationMetadata.getApplicationSymbolicName();
1:         if (!appSymbolicName.equals(depSymbolicName)) {
0:           throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0002E", ebaFile.getName(), appSymbolicName, depSymbolicName));
1:         }
1:       }
1:       
1:       /* We require that all other .jar and .war files included by-value be valid bundles
1:        * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
1:        * wars to wabs, plain jars to bundles
1:        */
1:         
1:       Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
1:       for (IFile f : ebaFile) { 
1:         if (f.isDirectory()) { 
1:           continue;
1:         }
1:         
1:         BundleManifest bm = getBundleManifest (f);
1:         if (bm != null) {
1:           if (bm.isValid()) {
0:             extraBundlesInfo.add(new BundleInfoImpl(bm, f.toURL().toExternalForm()));
0:           } else if (deploymentMetadata != null) {
0:             throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0003E", f.getName(), ebaFile.getName()));
0:           } else { 
1:             // We have a jar that needs converting to a bundle, or a war to migrate to a WAB
0:             InputStream convertedBinary = null;
1:             Iterator<BundleConverter> converters = _bundleConverters.iterator();
1:             List<ConversionException> conversionExceptions = Collections.emptyList();
1:             while (converters.hasNext() && convertedBinary == null) { 
1:               try { 
0:                 convertedBinary = converters.next().convert(ebaFile, f);
1:               } catch (ServiceException sx) {
1:                 // We'll get this if our optional BundleConverter has not been injected. 
1:               } catch (ConversionException cx) { 
1:                 conversionExceptions.add(cx);
1:               }
1:             }
1:             if (conversionExceptions.size() > 0) {
1:               for (ConversionException cx : conversionExceptions) { 
0:                 _logger.error("APPMANAGEMENT0004E", new Object[]{f.getName(), ebaFile.getName(), cx});
1:               }
0:               throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0005E", ebaFile.getName()));
1:             }
1:             if (convertedBinary != null) { 
0:               modifiedBundles.put (f.getName(), convertedBinary);
0:               bm = BundleManifest.fromBundle(f);
0:               extraBundlesInfo.add(new BundleInfoImpl(bm, f.getName()));
1:             }
1:           }
1:         } 
0:         if (deploymentMetadata != null) { 
0:           application = new AriesApplicationImpl (applicationMetadata, deploymentMetadata, extraBundlesInfo, _localPlatform);
0:         } else { 
1:           application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
0:           Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application);
0:           deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
1:           application.setDeploymentMetadata(deploymentMetadata);
1:         
1:           // Store a reference to any modified bundles
1:           application.setModifiedBundles (modifiedBundles);
1:         }
1:         
1:       }
1:     } catch (IOException iox) { 
0:       _logger.error ("APPMANAGEMENT0006E", new Object []{ebaFile.getName(), iox});
1:       throw new ManagementException(iox);
1:     }
1:     
1:     return application;
1:   }
1: 
1:   /**
1:    * Create an application from a URL. 
1:    * The first version of this method isn't smart enough to check whether
1:    * the input URL is file://
1:    */
1:   public AriesApplication createApplication(URL url) throws ManagementException {
1:     OutputStream os = null;
1:     AriesApplication app = null;
1:     try { 
1:       File tempFile = _localPlatform.getTemporaryFile();
1:       InputStream is = url.openStream();
1:       os = new FileOutputStream (tempFile);
1:       IOUtils.copy(is, os);
1:       IDirectory downloadedSource = FileSystem.getFSRoot(tempFile);
1:       app = createApplication (downloadedSource);
1:     } catch (IOException iox) {
1:       throw new ManagementException (iox);
1:     }
1:       finally { 
1:       IOUtils.close(os);
1:     }
1:     return app;
1:   }
1: 
0:   public AriesApplication resolve(AriesApplication originalApp,
0:       ResolveConstraint... constraints) {
1:     // TODO Auto-generated method stub
0:     return null;
1:   } 
1: 
0:   public ApplicationContext install(AriesApplication app) {
0:     ApplicationContext result = _applicationContextManager.getApplicationContext(app);
1:     return result;
1:   }
1:   
0:   public void uninstall(ApplicationContext app) throws BundleException {
0:     Set<Bundle> bundles = app.getApplicationContent();
0:     for (Bundle b : bundles) { 
0:       b.uninstall();
1:     }
1: 
1:   }
1: 
0:   public void addApplicationListener(ApplicationListener l) {
1:     // Need application listener lifecycle support
1:   }
1: 
0:   public void removeApplicationListener(ApplicationListener l) {
1:     // TODO Auto-generated method stub
1: 
1:   }
1: 
1: 
1: 
1:   /**
1:    * Locate and parse an application.mf in an eba
1:    * @param source An aries application file
0:    * @return parsed manifest, or null
1:    * @throws IOException
1:    */
1:   private Manifest parseApplicationManifest (IDirectory source) throws IOException {
0:     Manifest result = null;
1:     IFile f = source.getFile(AppConstants.APPLICATION_MF);
1:     if (f != null) { 
1:       InputStream is = null;
1:       try { 
1:         is = f.open();
1:         result = ManifestProcessor.parseManifest(is);
1:       } catch (IOException iox) { 
1:         _logger.error ("APPMANAGEMENT0007E", new Object[]{source.getName(), iox});
1:         throw iox;
1:       } finally { 
1:         IOUtils.close(is);
1:       }
1:     }
1:     return result;
1:   }
1:   
1:   /**
1:    * Extract a bundle manifest from an IFile representing a bundle
1:    * @param file The bundle to extract the manifest from
1:    * @return bundle manifest
1:    */
1:   private BundleManifest getBundleManifest(IFile file) throws IOException {
1:     BundleManifest mf = null;
1:     InputStream in = null;
1:     try { 
1:       in = file.open();
1:       mf = BundleManifest.fromBundle(in);
1:     } finally { 
1:       IOUtils.close(in);
1:     }    
1:     return mf;
1:   }
1: 
1: }
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:152f64a
/////////////////////////////////////////////////////////////////////////
commit:04e1814
/////////////////////////////////////////////////////////////////////////
0:    * as per http://aries.apache.org/applications.html 
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:dd6fe13
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
/////////////////////////////////////////////////////////////////////////
1:     
1:       app = resolve(app);
1:     }
1:   
1:     // Register an Application Repository for this application if none exists
1:     String appScope = app.getApplicationMetadata().getApplicationScope();    
1:     ServiceReference[] ref = null;
1:     try {
1:         String filter = "(" + BundleRepository.REPOSITORY_SCOPE + "=" + appScope + ")";
1:         ref = _bundleContext.getServiceReferences(BundleRepository.class.getName(),filter);
1:     } 
1:     catch (InvalidSyntaxException e) {
1:         // Something went wrong attempting to find a service so we will act as if 
1:         // there is no existing service.
1:     if (ref == null || ref.length == 0) {
1:         Dictionary dict = new Hashtable();
1:         dict.put(BundleRepository.REPOSITORY_SCOPE, appScope);
0:         _bundleContext.registerService(BundleRepository.class.getName(), 
1:             new ApplicationRepository(app), 
1:             dict);
1:     }
1:   
commit:5258897
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.DeploymentManifestManager;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
1:   private DeploymentManifestManager deploymentManifestManager;
0:   
/////////////////////////////////////////////////////////////////////////
1:   public void setDeploymentManifestManager(DeploymentManifestManager dm) {
1:     this.deploymentManifestManager = dm;
/////////////////////////////////////////////////////////////////////////
1:     Manifest deploymentManifest = deploymentManifestManager.generateDeploymentManifest(originalApp, constraints);
1:     try {
1:       application.setDeploymentMetadata(_deploymentMetadataFactory.createDeploymentMetadata(deploymentManifest));
1:     } catch (IOException ioe) {
1:       throw new ResolverException(ioe);
1:     }
1:       // TODO: are we really passing streams around ?
1:       application.setModifiedBundles(((AriesApplicationImpl) originalApp).getModifiedBundles());
commit:0907e54
/////////////////////////////////////////////////////////////////////////
0:         new ApplicationRepository(app), 
commit:c70a567
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.BundleRepository;
1: import org.apache.aries.application.management.repository.ApplicationRepository;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1:   private BundleContext _bundleContext;
/////////////////////////////////////////////////////////////////////////
1:   public void setBundleContext(BundleContext b)
1:   {
1:     _bundleContext = b;
1:   }
0:   
/////////////////////////////////////////////////////////////////////////
1:             extraBundlesInfo.add(new SimpleBundleInfo(bm, f.toURL().toExternalForm()));
/////////////////////////////////////////////////////////////////////////
1:               extraBundlesInfo.add(convertedBinary.getBundleInfo());
/////////////////////////////////////////////////////////////////////////
1:         deploymentMetadata = _deploymentMetadataFactory.parseDeploymentMetadata(deploymentManifest);
/////////////////////////////////////////////////////////////////////////
0:     
0:     // Register an Application Repository for this application
0:     Dictionary dict = new Hashtable();
0:     dict.put(ApplicationRepository.REPOSITORY_SCOPE, app.getApplicationMetadata().getApplicationScope());
0:     _bundleContext.registerService(BundleRepository.class.getName(), 
0:         new ApplicationRepository(_resolver), 
0:         dict);
0:     
commit:7e2bed4
/////////////////////////////////////////////////////////////////////////
0:     	
0:         /* We require that all other .jar and .war files included by-value be valid bundles
0:          * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
0:          * wars to wabs, plain jars to bundles
0:          */
0:           
0:         Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
0:         for (IFile f : ebaFile) { 
0:           if (f.isDirectory()) { 
0:             continue;
0:           }
0:           
0:           BundleManifest bm = getBundleManifest (f);
0:           if (bm != null) {
0:             if (bm.isValid()) {
0:               extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.toURL().toExternalForm()));
0:             } else if (deploymentMetadata != null) {
0:               throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0003E", f.getName(), ebaFile.getName()));
0:             } else { 
0:               // We have a jar that needs converting to a bundle, or a war to migrate to a WAB             
1:            	  BundleConversion convertedBinary = null;
0:               Iterator<BundleConverter> converters = _bundleConverters.iterator();
0:               List<ConversionException> conversionExceptions = Collections.emptyList();
0:               while (converters.hasNext() && convertedBinary == null) { 
0:                 try {                 	
0:                   convertedBinary = converters.next().convert(ebaFile, f);
0:                 } catch (ServiceException sx) {
0:                   // We'll get this if our optional BundleConverter has not been injected. 
0:                 } catch (ConversionException cx) { 
0:                   conversionExceptions.add(cx);
0:                 }
0:               }
0:               if (conversionExceptions.size() > 0) {
0:                 for (ConversionException cx : conversionExceptions) { 
0:                   _logger.error("APPMANAGEMENT0004E", new Object[]{f.getName(), ebaFile.getName(), cx});
0:                 }
0:                 throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0005E", ebaFile.getName()));
0:               }
0:               if (convertedBinary != null) { 
0:                 modifiedBundles.put (f.getName(), convertedBinary);
0:                 bm = BundleManifest.fromBundle(f);
0:                 extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.getName()));
0:               }
0:             }
0:           } 
0:         }
0:       Manifest applicationManifest = parseApplicationManifest (ebaFile); 
0:       String appName = ebaFile.getName();
1:       //If the application name is null, we will try to get the file name.
0:       if ((appName == null) || (appName.isEmpty())) {
0:     	  String fullPath = ebaFile.toString();
0:     	  if (fullPath.endsWith("/"))
1:     		  fullPath = fullPath.substring(0, fullPath.length() -1);
1:           int last_slash = fullPath.lastIndexOf("/");
1:           appName = fullPath.substring(last_slash + 1, fullPath.length()); 
0:       }
0:       
0:      
1:       ManifestDefaultsInjector.updateManifest(applicationManifest, appName, ebaFile); 
/////////////////////////////////////////////////////////////////////////
0: 
commit:9a6f681
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.BundleConversion;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     Map<String, BundleConversion> modifiedBundles = new HashMap<String, BundleConversion>();
/////////////////////////////////////////////////////////////////////////
0:             BundleConversion convertedBinary = null;
commit:c2aad37
/////////////////////////////////////////////////////////////////////////
1:    * @return parsed manifest, or an empty Manifest
commit:43be66f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.ResolverException;
/////////////////////////////////////////////////////////////////////////
0:     } catch (ResolverException rx) { 
0:       _logger.error ("APPMANAGEMENT0008E", new Object []{ebaFile.getName(), rx});
0:       throw new ManagementException(rx);
commit:beeb1d7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.ApplicationMetadataFactory;
/////////////////////////////////////////////////////////////////////////
1:   private ApplicationMetadataFactory _applicationMetadataFactory;
/////////////////////////////////////////////////////////////////////////
1:   public void setApplicationMetadataFactory (ApplicationMetadataFactory amf) { 
1:     _applicationMetadataFactory = amf;
/////////////////////////////////////////////////////////////////////////
1:       applicationMetadata = _applicationMetadataFactory.createApplicationMetadata(applicationManifest);
/////////////////////////////////////////////////////////////////////////
0:             extraBundlesInfo.add(new BundleInfoImpl(_applicationMetadataFactory, bm, f.toURL().toExternalForm()));
/////////////////////////////////////////////////////////////////////////
0:               extraBundlesInfo.add(new BundleInfoImpl(_applicationMetadataFactory, bm, f.getName()));
commit:17bf358
/////////////////////////////////////////////////////////////////////////
1:     Manifest result = new Manifest();
commit:734efc2
/////////////////////////////////////////////////////////////////////////
0:             extraBundlesInfo.add(new BundleInfoImpl(_applicationMetadataManager, bm, f.toURL().toExternalForm()));
/////////////////////////////////////////////////////////////////////////
0:               extraBundlesInfo.add(new BundleInfoImpl(_applicationMetadataManager, bm, f.getName()));
commit:20c52b6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.ApplicationContextManager;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.internal.MessageUtil;
0: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleException;
/////////////////////////////////////////////////////////////////////////
0:   private ApplicationContextManager _applicationContextManager;
/////////////////////////////////////////////////////////////////////////
0:   public void setApplicationContextManager (ApplicationContextManager acm) { 
0:     _applicationContextManager = acm;
0:   }
0:   
/////////////////////////////////////////////////////////////////////////
0:         
0:         // Validate: symbolic names must match
0:         String appSymbolicName = applicationMetadata.getApplicationSymbolicName();
0:         String depSymbolicName = applicationMetadata.getApplicationSymbolicName();
0:         if (!appSymbolicName.equals(depSymbolicName)) {
0:           throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0002E", ebaFile.getName(), appSymbolicName, depSymbolicName));
0:         }
/////////////////////////////////////////////////////////////////////////
0:             throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0003E", f.getName(), ebaFile.getName()));
/////////////////////////////////////////////////////////////////////////
0:                 _logger.error("APPMANAGEMENT0004E", new Object[]{f.getName(), ebaFile.getName(), cx});
0:               throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0005E", ebaFile.getName()));
/////////////////////////////////////////////////////////////////////////
0:       _logger.error ("APPMANAGEMENT0006E", new Object []{ebaFile.getName(), iox});
/////////////////////////////////////////////////////////////////////////
0: 
0:     ApplicationContext result = _applicationContextManager.getApplicationContext(app);
0:     return result;
0:   public void uninstall(ApplicationContext app) throws BundleException {
0:     Set<Bundle> bundles = app.getApplicationContent();
0:     for (Bundle b : bundles) { 
0:       b.uninstall();
0:     }
/////////////////////////////////////////////////////////////////////////
0:         _logger.error ("APPMANAGEMENT0007E", new Object[]{source.getName(), iox});
commit:be01f1d
/////////////////////////////////////////////////////////////////////////
commit:902d663
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.ConversionException;
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management.impl");
0: 
/////////////////////////////////////////////////////////////////////////
0:       
0:       // TODO: validate
0:       
/////////////////////////////////////////////////////////////////////////
0:             List<ConversionException> conversionExceptions = Collections.emptyList();
0:               } catch (ConversionException cx) { 
0:                 conversionExceptions.add(cx);
0:             if (conversionExceptions.size() > 0) {
0:               for (ConversionException cx : conversionExceptions) { 
0:                 _logger.error("Conversion failure", cx);
0:               }
0:               throw new ManagementException ("createApplication failed due to conversion failures: see log for details");
0:             }
/////////////////////////////////////////////////////////////////////////
0:       _logger.error ("createApplication failed", iox);
commit:ffe1828
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.FileOutputStream;
0: import java.io.OutputStream;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.ResolveConstraint;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
/////////////////////////////////////////////////////////////////////////
0:     ApplicationMetadata applicationMetadata = null;
0:     DeploymentMetadata deploymentMetadata = null;
0:       Manifest applicationManifest = parseApplicationManifest (ebaFile);
0:       IFile deploymentManifest = ebaFile.getFile(AppConstants.DEPLOYMENT_MF);
0:       if (deploymentManifest != null) { 
0:         deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(deploymentManifest);
0:       }
0:       /* We require that all other .jar and .war files included by-value be valid bundles
0:        * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
0:        * wars to wabs, plain jars to bundles
0:        */
0:       Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
0:       for (IFile f : ebaFile) { 
0:         if (f.isDirectory()) { 
0:           continue;
0:         }
0:         
0:         BundleManifest bm = getBundleManifest (f);
0:         if (bm != null) {
0:           if (bm.isValid()) {
0:             extraBundlesInfo.add(new BundleInfoImpl(bm, f.toURL().toExternalForm()));
0:           } else if (deploymentMetadata != null) {
0:             throw new ManagementException ("Invalid bundle " + f.getName() + " found when DEPLOYMENT.MF present");
0:           } else { 
0:             // We have a jar that needs converting to a bundle, or a war to migrate to a WAB
0:             InputStream convertedBinary = null;
0:             Iterator<BundleConverter> converters = _bundleConverters.iterator();
0:             while (converters.hasNext() && convertedBinary == null) { 
0:               try { 
0:                 // WarToWabConverter can extract application.xml via
0:                 // eba.getFile(AppConstants.APPLICATION_XML);
0:                 convertedBinary = converters.next().convert(ebaFile, f);
0:               } catch (ServiceException sx) {
0:                 // We'll get this if our optional BundleConverter has not been injected. 
0:             if (convertedBinary != null) { 
0:               modifiedBundles.put (f.getName(), convertedBinary);
0:               bm = BundleManifest.fromBundle(f);
0:               extraBundlesInfo.add(new BundleInfoImpl(bm, f.getName()));
0:             }
0:           }
0:         } 
0:         if (deploymentMetadata != null) { 
0:           application = new AriesApplicationImpl (applicationMetadata, deploymentMetadata, extraBundlesInfo, _localPlatform);
0:         } else { 
0:           application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
0:           Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application);
0:           deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
0:           application.setDeploymentMetadata(deploymentMetadata);
1:           // Store a reference to any modified bundles
0:           application.setModifiedBundles (modifiedBundles);
0:         }
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * Create an application from a URL. 
0:    * The first version of this method isn't smart enough to check whether
0:    * the input URL is file://
0:    */
0:     OutputStream os = null;
0:     AriesApplication app = null;
0:     try { 
0:       File tempFile = _localPlatform.getTemporaryFile();
0:       InputStream is = url.openStream();
0:       os = new FileOutputStream (tempFile);
0:       IOUtils.copy(is, os);
0:       IDirectory downloadedSource = FileSystem.getFSRoot(tempFile);
0:       app = createApplication (downloadedSource);
0:     } catch (IOException iox) {
0:       throw new ManagementException (iox);
0:     }
0:       finally { 
0:       IOUtils.close(os);
0:     }
0:     return app;
0:   public AriesApplication resolve(AriesApplication originalApp,
0:       ResolveConstraint... constraints) {
0:     // TODO Auto-generated method stub
0:     return null;
0:   } 
0:   
/////////////////////////////////////////////////////////////////////////
0:    * Locate and parse an application.mf in an eba
0:    * @param source An aries application file
0:   private Manifest parseApplicationManifest (IDirectory source) throws IOException {
0:     IFile f = source.getFile(AppConstants.APPLICATION_MF);
/////////////////////////////////////////////////////////////////////////
0:   }
0: 
commit:813de26
/////////////////////////////////////////////////////////////////////////
0:               InputStream convertedBinary = null;
0:               Iterator<BundleConverter> converters = _bundleConverters.iterator();
0:               while (converters.hasNext() && convertedBinary == null) { 
0:                 try { 
0:                   // WarToWabConverter can extract application.xml via
0:                   // eba.getFile(AppConstants.APPLICATION_XML);
0:                   convertedBinary = converters.next().convert(ebaFile, f);
0:                 } catch (ServiceException sx) {
0:                   // We'll get this if our optional BundleConverter has not been injected. 
0:               }
0:               if (convertedBinary != null) { 
0:                 modifiedBundles.put (f.getName(), convertedBinary);
0:                 InputStream is = null;
0:                 try { 
0:                   is = f.open();
0:                 } finally { 
0:                   IOUtils.close(is);
0:                 extraBundlesInfo.add(new BundleInfoImpl(bm, f.getName()));
commit:70eed80
/////////////////////////////////////////////////////////////////////////
0:                     convertedBinary = converters.next().convert(is, ebaFile, f.getName());
commit:bbb186b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.LocalPlatform;
0: import org.apache.aries.application.utils.filesystem.IOUtils;
/////////////////////////////////////////////////////////////////////////
0:   private LocalPlatform _localPlatform;
/////////////////////////////////////////////////////////////////////////
0: 
0:   public void setLocalPlatform (LocalPlatform lp) { 
0:     _localPlatform = lp;
0:   }
/////////////////////////////////////////////////////////////////////////
0:     /* Locate META-INF/APPLICATION.MF and ensure that the 
0:      * manifest has the necessary fields set
0:      */
0:       ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
0:         // TODO: Implement this bit
/////////////////////////////////////////////////////////////////////////
0:               extraBundlesInfo.add(new BundleInfoImpl(bm, f.toURL().toExternalForm()));
/////////////////////////////////////////////////////////////////////////
0:                   extraBundlesInfo.add(new BundleInfoImpl(bm, f.getName()));
0:                 IOUtils.close(is);
0:         application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
0:         // Store a reference to any modified bundles
/////////////////////////////////////////////////////////////////////////
0:         IOUtils.close(is);
/////////////////////////////////////////////////////////////////////////
0:       IOUtils.close(in);
commit:5297b83
/////////////////////////////////////////////////////////////////////////
0:    * Create an AriesApplication from a .eba file: a zip file with a '.eba' extension
0:    * as per http://incubator.apache.org/aries/applications.html 
0:   public AriesApplication createApplication(IDirectory ebaFile) throws ManagementException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
0:         for (IFile f : ebaFile) { 
0:           if (f.isDirectory()) { 
0:             continue;
0:           }
0:           System.out.println ("Call getBundleManifest on " + f.getName());
0:           
0:               extraBundlesInfo.add(new BundleInfoImpl(bm, null));
/////////////////////////////////////////////////////////////////////////
0:                     convertedBinary = converters.next().convert(is, ebaFile);
/////////////////////////////////////////////////////////////////////////
0:                   extraBundlesInfo.add(new BundleInfoImpl(bm, null));
/////////////////////////////////////////////////////////////////////////
0:                
0:         application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo);
/////////////////////////////////////////////////////////////////////////
0:     // If URL isn't file://, we need to download the asset from that url and 
0:     // then call createApplication(File)
/////////////////////////////////////////////////////////////////////////
0:   private Manifest parseManifest (IDirectory source, String fileName) throws IOException {
0:     IFile f = source.getFile(fileName);
0:     if (f != null) { 
0:       InputStream is = null;
0:       try { 
0:         is = f.open();
0:         result = ManifestProcessor.parseManifest(is);
0:         is.close();
0:       } catch (IOException iox) { 
0:         // TODO: log error
0:         throw iox;
0:       } finally { 
0:           if (is != null) is.close();
0:         } catch (IOException iox) {}
commit:0e0fd84
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     boolean manifestChanged = false;
/////////////////////////////////////////////////////////////////////////
0:       manifestChanged = ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
0:         //  -- Process any other files in the .eba, i.e. migrate wars to wabs, plain jars to bundles
0:         
/////////////////////////////////////////////////////////////////////////
0:                     // WarToWabConverter can extract application.xml via
0:                     // eba.getFile(AppConstants.APPLICATION_XML);
0:                     convertedBinary = converters.next().convert(is, eba);
0:                   modifiedBundles.put (f.getName(), convertedBinary); 
/////////////////////////////////////////////////////////////////////////
0:           } 
0:         Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application);
0:         deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
0:         
0:         // We may have changed parts of its content. The application's store()
0:         // method needs to be able to work. Do something with modifiedBundles 
0:         // and manifestChanged. We'll save them in the application for now. 
0:         application.setApplicationManifestChanged (manifestChanged);
0:         application.setModifiedBundles (modifiedBundles);
0:         
0:       // Log an error
commit:0f3010e
/////////////////////////////////////////////////////////////////////////
0: import java.io.InputStream;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Iterator;
0: import java.util.Map;
0: import java.util.jar.Attributes;
0: import org.apache.aries.application.DeploymentMetadata;
0: import org.apache.aries.application.DeploymentMetadataFactory;
0: import org.apache.aries.application.filesystem.IDirectory;
0: import org.apache.aries.application.filesystem.IFile;
0: import org.apache.aries.application.management.AriesApplicationResolver;
0: import org.apache.aries.application.management.BundleConverter;
0: import org.apache.aries.application.management.BundleInfo;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.application.utils.manifest.BundleManifest;
0: import org.osgi.framework.ServiceException;
0:   private DeploymentMetadataFactory _deploymentMetadataFactory;
0:   private List<BundleConverter> _bundleConverters;
0:   private AriesApplicationResolver _resolver;
0:   public void setDeploymentMetadataFactory (DeploymentMetadataFactory dmf) { 
0:     _deploymentMetadataFactory = dmf;
0:   }
0:   
0:   public void setBundleConverters (List<BundleConverter> bcs) { 
0:     _bundleConverters = bcs;
0:   }
0:   
0:   public void setResolver (AriesApplicationResolver resolver) { 
0:     _resolver = resolver;
0:   }
0:   
/////////////////////////////////////////////////////////////////////////
0:     DeploymentMetadata deploymentMetadata;
0:     Map<String, InputStream> modifiedBundles = new HashMap<String, InputStream>();
0:     AriesApplicationImpl application = null;
0:         // TODO: NLS this, and implement create-from-directory
0:       // Locate META-INF/APPLICATION.MF and ensure that the 
0:       // manifest has the necessary fields set 
0:       Manifest applicationManifest = parseManifest (ebaFile, AppConstants.APPLICATION_MF);
0: 
0:       Manifest deploymentManifest = parseManifest (ebaFile, AppConstants.DEPLOYMENT_MF);
0:       if (deploymentManifest != null) {
0:         // If there's a deployment.mf present, check it matches applicationManifest, and if so, use it
0:       } else { 
0:         //   -- Look for application.xml to support .war file migration
0:         //   -- Process any other files in the .eba, i.e. migrate wars to wabs, plain jars to bundles
0:         IDirectory eba = FileSystem.getFSRoot(ebaFile);
0:         IFile appXml = eba.getFile(AppConstants.APPLICATION_XML);
0:         Set<BundleInfo> bundleInfo = new HashSet<BundleInfo>();
0:         for (IFile f : eba) { 
0:           BundleManifest bm = getBundleManifest (f);
0:           if (bm != null) {
0:             Attributes bundleAttributes;
0:             if (bm.isValid()) {
0:               bundleInfo.add(new BundleInfoImpl(bm, null));
0:             } else { 
0:               // We have a jar that needs converting to a bundle, or a war to migrate to a WAB
0:               InputStream is = null;
0:               try { 
0:                 is = f.open();
0:                 InputStream convertedBinary = null;
0:                 Iterator<BundleConverter> converters = _bundleConverters.iterator();
0:                 while (converters.hasNext() && convertedBinary == null) { 
0:                   try { 
0:                     convertedBinary = converters.next().convert(is, f.getName());
0:                   } catch (ServiceException sx) {
0:                     // We'll get this if our optional BundleConverter has not been injected. 
0:                   }
0:                 }
0:                 if (convertedBinary != null) { 
0:                   modifiedBundles.put (f.getName(), convertedBinary); // I expect I'll need the filename in a bit
0:                   bm = BundleManifest.fromBundle(is);
0:                   bundleInfo.add(new BundleInfoImpl(bm, null));
0:                 }
0:               } finally { 
0:                 try { 
0:                   if (is != null) is.close();
0:                 } catch (IOException iox) {}
0:               }
0:             }
0:           }
0:         }
0:         application = new AriesApplicationImpl (applicationMetadata, bundleInfo);
0:         Set<BundleInfo> resolvedBundles = _resolver.resolve(application);
0:         deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, resolvedBundles);
0:         application.setDeploymentMetadata(deploymentMetadata);
0:       }
0:       // We may have changed parts of its content. The application's store()
0:       // method needs to be able to work. Do something with modifiedBundles 
0:       // and manifestChanged
1:     return application;
/////////////////////////////////////////////////////////////////////////
0:   /**
0:    * Locate and parse an application or deployment.mf in an eba
0:    * @param ebaFile An aries application file
0:    * @param fileName META-INF/APPLICATION.MF or META-INF/DEPLOYMENT.MF
0:    * @return parsed manifest, or null
0:    * @throws IOException
0:    */
0:   private Manifest parseManifest (File ebaFile, String fileName) throws IOException {
0:     Manifest result = null;
0:     IDirectory eba = FileSystem.getFSRoot(ebaFile);
0:     List<IFile> files = eba.listFiles();
0:     for (IFile f : files) { 
0:       if (f.getName().equalsIgnoreCase(fileName)) {
0:         InputStream is = null;
0:         try { 
0:           is = f.open();
0:           result = ManifestProcessor.parseManifest(is);
0:           is.close();
0:         } catch (IOException iox) { 
0:           // TODO: log error
0:           throw iox;
0:         } finally { 
0:           try { 
0:             if (is != null) is.close();
0:           } catch (IOException iox) {}
0:         }
0:         break;
0:       }
0:     }
0:     return result;
0:   }
0:   
0:   /**
0:    * Extract a bundle manifest from an IFile representing a bundle
0:    * @param file The bundle to extract the manifest from
0:    * @return bundle manifest
0:    */
0:   private BundleManifest getBundleManifest(IFile file) throws IOException {
0:     BundleManifest mf = null;
0:     InputStream in = null;
0:     try { 
0:       in = file.open();
0:       mf = BundleManifest.fromBundle(in);
0:     } finally { 
0:       try { 
0:         if (in != null) in.close();
0:       } catch (IOException iox) {}
0:     }    
0:     return mf;
0:   } 
0:   
0:   
commit:27f3ecd
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.management.impl;
0: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.net.URL;
0: import java.util.Enumeration;
0: import java.util.List;
0: import java.util.Set;
0: import java.util.jar.Manifest;
0: import java.util.zip.ZipEntry;
0: import java.util.zip.ZipFile;
0: 
0: import org.apache.aries.application.ApplicationMetadata;
0: import org.apache.aries.application.ApplicationMetadataManager;
0: import org.apache.aries.application.management.ApplicationContext;
0: import org.apache.aries.application.management.ApplicationListener;
0: import org.apache.aries.application.management.AriesApplication;
0: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.management.ManagementException;
0: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.manifest.ManifestDefaultsInjector;
0: import org.apache.aries.application.utils.manifest.ManifestProcessor;
0: import org.osgi.framework.Bundle;
0: 
0: public class AriesApplicationManagerImpl implements AriesApplicationManager {
0: 
0:   private ApplicationMetadataManager _applicationMetadataManager;
0: 
0:   public void setApplicationMetadataManager (ApplicationMetadataManager amm) { 
0:     _applicationMetadataManager = amm;
0:   }
0:   
0:   
0:   
0:   /**
0:    * Create an AriesApplication from a .eba file
0:    */
0:   public AriesApplication createApplication(File ebaFile) throws ManagementException {
0:     /* 
0:      * ebaFile should be a zip file with a '.eba' extension 
0:      * as per http://incubator.apache.org/aries/applications.html
0:      */    
0: 
0:     ApplicationMetadata applicationMetadata;
0:     List<Bundle> bundlesInEba;
0:     
0:     try { 
0:       if (!ebaFile.isFile()) { 
0:         throw new ManagementException ("Cannot create .eba from directory yet");
0:       }
0:       ZipFile zipFile = new ZipFile(ebaFile);
0:       Manifest applicationManifest = new Manifest();
0:       
0:       // TODO: If there's a deployment.mf we can ignore the rest of the content
0:       
0:       // Locate META-INF/APPLICATION.MF
0:       ZipEntry entry = null;
0:       Enumeration<? extends ZipEntry> entries = zipFile.entries();
0:       while (entries.hasMoreElements()) {
0:         entry = entries.nextElement();
0:         if (entry.getName().replace("\\", "/").equalsIgnoreCase(AppConstants.APPLICATION_MF)) {
0:           applicationManifest = ManifestProcessor.parseManifest(zipFile.getInputStream(entry));
0:           break;
0:         }
0:         // Also look for application.xml to support .war file migration
0:       }
0: 
0:       // Ensure that the manifest has the necessary fields set 
0:       boolean manifestChanged = ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
0:       
0:       applicationMetadata = _applicationMetadataManager.createApplicationMetadata(applicationManifest);
0:       
0:       // Process any other files in the .eba
0:       // i.e. migrate wars to wabs
0:       
0:       // Validate contents
0:       
0:       // Perform provisioning
0:       
0:       // Create deployment.mf if missing
0:       
0:       // Write out updated .eba if we changed its contents
0:       
0:     } catch (IOException iox) { 
0:       throw new ManagementException(iox);
0:     }
0:     
0:     
0:     // AriesApplication ariesApp = new AriesApplicationImpl (appMeta, bundlesInEba);
0:     return null; // ariesApp
0:   }
0: 
0:   public AriesApplication createApplication(URL url) throws ManagementException {
0:     return null;
0:   }
0: 
0:   public ApplicationContext getApplicationContext(AriesApplication app) {
0:     // TODO Auto-generated method stub
0:     return null;
0:   }
0: 
0:   public Set<ApplicationContext> getApplicationContexts() {
0:     // TODO Auto-generated method stub
0:     return null;
0:   }
0: 
0:   public ApplicationContext install(AriesApplication app) {
0:     // TODO Auto-generated method stub
0:     return null;
0:   }
0:   
0:   public void uninstall(ApplicationContext app) {
0:     // TODO Auto-generated method stub
0: 
0:   }
0: 
0:   public void addApplicationListener(ApplicationListener l) {
0:     // Need application listener lifecycle support
0:   }
0: 
0:   public void removeApplicationListener(ApplicationListener l) {
0:     // TODO Auto-generated method stub
0: 
0:   }
0: 
0: 
0: 
0: }
author:Lin Sun
-------------------------------------------------------------------------------
commit:f3f9577
/////////////////////////////////////////////////////////////////////////
1:     String appPath = ebaFile.toString();
0:     try {   
1:       // try to read the app name out of the application.mf
0:       Manifest applicationManifest = parseApplicationManifest (ebaFile);
1:       String appName = applicationManifest.getMainAttributes().getValue(AppConstants.APPLICATION_NAME);
0: 
0:       //If the application name is null, we will try to get the file name.
1:       if (appName == null || appName.isEmpty()) {
1:           String fullPath = appPath;
1:           if (fullPath.endsWith("/")) {
0:             fullPath = fullPath.substring(0, fullPath.length() -1);  
0:           }
0:               
0:           int last_slash = fullPath.lastIndexOf("/");
0:           appName = fullPath.substring(last_slash + 1, fullPath.length()); 
0:       }
0:       
/////////////////////////////////////////////////////////////////////////
0:  
/////////////////////////////////////////////////////////////////////////
1:       _logger.error ("APPMANAGEMENT0006E", new Object []{appPath, iox});
commit:d1e30f3
/////////////////////////////////////////////////////////////////////////
0:     String appName = ebaFile.getName();
0:     //If the application name is null, we will try to get the file name.
0:     if ((appName == null) || (appName.isEmpty())) {
0:         String fullPath = ebaFile.toString();
0:         if (fullPath.endsWith("/"))
0:             fullPath = fullPath.substring(0, fullPath.length() -1);
0:         int last_slash = fullPath.lastIndexOf("/");
0:         appName = fullPath.substring(last_slash + 1, fullPath.length()); 
0:     }
0:       IFile deploymentManifest = ebaFile.getFile(AppConstants.DEPLOYMENT_MF);
0:       /* We require that all other .jar and .war files included by-value be valid bundles
0:        * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
0:        * wars to wabs, plain jars to bundles
0:        */
0:       Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
0:       for (IFile f : ebaFile) { 
0:         if (f.isDirectory()) { 
0:           continue;
0:         }
0:         BundleManifest bm = getBundleManifest (f);
0:         if (bm != null) {
0:           if (bm.isValid()) {
0:             extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.toURL().toExternalForm()));
0:           } else if (deploymentManifest == null){ 
0:             // We have a jar that needs converting to a bundle, or a war to migrate to a WAB 
1:             // We only do this if a DEPLOYMENT.MF does not exist.
0:             BundleConversion convertedBinary = null;
0:             Iterator<BundleConverter> converters = _bundleConverters.iterator();
0:             List<ConversionException> conversionExceptions = Collections.emptyList();
0:             while (converters.hasNext() && convertedBinary == null) { 
0:               try {
0:                 convertedBinary = converters.next().convert(ebaFile, f);
0:               } catch (ServiceException sx) {
0:                 // We'll get this if our optional BundleConverter has not been injected. 
0:               } catch (ConversionException cx) { 
0:                 conversionExceptions.add(cx);
0:             if (conversionExceptions.size() > 0) {
0:               for (ConversionException cx : conversionExceptions) { 
1:                 _logger.error("APPMANAGEMENT0004E", new Object[]{f.getName(), appName, cx});
0:               }
1:               throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0005E", appName));
0:             }
0:             if (convertedBinary != null) { 
0:               modifiedBundles.put (f.getName(), convertedBinary);
0:               bm = BundleManifest.fromBundle(f);
0:               extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.getName()));
0:             } 
0:           }
0:         } 
0:       Manifest applicationManifest = parseApplicationManifest (ebaFile); 
0:       
/////////////////////////////////////////////////////////////////////////
1:           throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0002E", appName, appSymbolicName, depSymbolicName));
0:       _logger.error ("APPMANAGEMENT0006E", new Object []{appName, iox});
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:ee759f2
/////////////////////////////////////////////////////////////////////////
0:     Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application, constraints);
commit:e328c1b
/////////////////////////////////////////////////////////////////////////
commit:d9bfe63
/////////////////////////////////////////////////////////////////////////
commit:3b38bc2
/////////////////////////////////////////////////////////////////////////
1:   public AriesApplication resolve(AriesApplication originalApp, ResolveConstraint... constraints) throws ResolverException {
1:     AriesApplicationImpl application = new AriesApplicationImpl(originalApp.getApplicationMetadata(), originalApp.getBundleInfo(), _localPlatform);
0:     Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application);
0:     DeploymentMetadata deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
0:     application.setDeploymentMetadata(deploymentMetadata);
0:     // Store a reference to any modified bundles
1:     if (originalApp instanceof AriesApplicationImpl) {
0:         // TODO: are we really passing streams around ?
0:         application.setModifiedBundles(((AriesApplicationImpl) originalApp).getModifiedBundles());
0:     }
0:     return application;
0:   public ApplicationContext install(AriesApplication app) throws BundleException, ManagementException, ResolverException {
1:     if (!app.isResolved()) {
0:         app = resolve(app);
0:     }
commit:7958a54
/////////////////////////////////////////////////////////////////////////
0:       application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
0:       if (deploymentMetadata == null) {
0:       application.setDeploymentMetadata(deploymentMetadata);
0:       // Store a reference to any modified bundles
0:       application.setModifiedBundles (modifiedBundles);
commit:dca33e3
/////////////////////////////////////////////////////////////////////////
0: 
0:       if (deploymentMetadata != null) { 
0:         application = new AriesApplicationImpl (applicationMetadata, deploymentMetadata, extraBundlesInfo, _localPlatform);
0:       } else {
0:         application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
0:         Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application);
0:         deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
0:         application.setDeploymentMetadata(deploymentMetadata);
0: 
0:         // Store a reference to any modified bundles
0:         application.setModifiedBundles (modifiedBundles);
0:       }
0:     } catch (IOException iox) {
============================================================================