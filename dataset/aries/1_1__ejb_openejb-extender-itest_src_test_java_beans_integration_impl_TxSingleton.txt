1:a5517f3: /**
1:a5517f3:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:a5517f3:  *  contributor license agreements.  See the NOTICE file distributed with
1:a5517f3:  *  this work for additional information regarding copyright ownership.
1:a5517f3:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:a5517f3:  *  (the "License"); you may not use this file except in compliance with
1:a5517f3:  *  the License.  You may obtain a copy of the License at
1:a5517f3:  *
1:a5517f3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a5517f3:  *
1:a5517f3:  *  Unless required by applicable law or agreed to in writing, software
1:a5517f3:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:a5517f3:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a5517f3:  *  See the License for the specific language governing permissions and
1:a5517f3:  *  limitations under the License.
1:a5517f3:  */
1:4115fb2: package beans.integration.impl;
1:4115fb2: 
1:4115fb2: import javax.ejb.Singleton;
1:4115fb2: import javax.ejb.TransactionAttribute;
1:4115fb2: import javax.ejb.TransactionAttributeType;
1:4115fb2: import javax.naming.InitialContext;
1:4115fb2: import javax.transaction.TransactionSynchronizationRegistry;
1:4115fb2: 
1:4115fb2: import org.osgi.framework.BundleContext;
1:4115fb2: import org.osgi.framework.FrameworkUtil;
1:4115fb2: 
1:4115fb2: import beans.integration.Tx;
1:4115fb2: 
1:4115fb2: @Singleton
1:4115fb2: public class TxSingleton implements Tx {
1:4115fb2: 
1:4115fb2:   private TransactionSynchronizationRegistry getTSR() {
1:4115fb2:     BundleContext ctx = FrameworkUtil.getBundle(TxSingleton.class).getBundleContext();
1:4115fb2:     return (TransactionSynchronizationRegistry) ctx.getService(
1:4115fb2:         ctx.getServiceReference("javax.transaction.TransactionSynchronizationRegistry"));
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
1:4115fb2:   public Object getNoTransactionId() throws Exception {
1:4115fb2:     return getTSR().getTransactionKey();
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   @TransactionAttribute(TransactionAttributeType.SUPPORTS)
1:4115fb2:   public Object getMaybeTransactionId() throws Exception {
1:4115fb2:     return getTSR().getTransactionKey();
1:4115fb2:   }
1:4115fb2:   
1:4115fb2:   @TransactionAttribute(TransactionAttributeType.REQUIRED)
1:4115fb2:   public Object getTransactionId() throws Exception {
1:4115fb2:     return getTSR().getTransactionKey();
1:4115fb2:   }
1:4115fb2: 
1:4115fb2:   @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
1:4115fb2:   public Object getNewTransactionId() throws Exception {
1:4115fb2:     return getTSR().getTransactionKey();
1:4115fb2:   }
1:4115fb2: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:a5517f3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
commit:4115fb2
/////////////////////////////////////////////////////////////////////////
1: package beans.integration.impl;
1: 
1: import javax.ejb.Singleton;
1: import javax.ejb.TransactionAttribute;
1: import javax.ejb.TransactionAttributeType;
1: import javax.naming.InitialContext;
1: import javax.transaction.TransactionSynchronizationRegistry;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.FrameworkUtil;
1: 
1: import beans.integration.Tx;
1: 
1: @Singleton
1: public class TxSingleton implements Tx {
1: 
1:   private TransactionSynchronizationRegistry getTSR() {
1:     BundleContext ctx = FrameworkUtil.getBundle(TxSingleton.class).getBundleContext();
1:     return (TransactionSynchronizationRegistry) ctx.getService(
1:         ctx.getServiceReference("javax.transaction.TransactionSynchronizationRegistry"));
1:   }
1:   
1:   @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
1:   public Object getNoTransactionId() throws Exception {
1:     return getTSR().getTransactionKey();
1:   }
1:   
1:   @TransactionAttribute(TransactionAttributeType.SUPPORTS)
1:   public Object getMaybeTransactionId() throws Exception {
1:     return getTSR().getTransactionKey();
1:   }
1:   
1:   @TransactionAttribute(TransactionAttributeType.REQUIRED)
1:   public Object getTransactionId() throws Exception {
1:     return getTSR().getTransactionKey();
1:   }
1: 
1:   @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
1:   public Object getNewTransactionId() throws Exception {
1:     return getTSR().getTransactionKey();
1:   }
1: }
============================================================================