1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:8a2da19: package org.apache.aries.tx.control.service.local.impl;
19:8a2da19: 
1:f377acd: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
1:8a2da19: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1:8a2da19: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTING;
1:8a2da19: import static org.osgi.service.transaction.control.TransactionStatus.MARKED_ROLLBACK;
1:8a2da19: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1:8a2da19: import static org.osgi.service.transaction.control.TransactionStatus.ROLLING_BACK;
1:8a2da19: 
1:8a2da19: import java.util.ArrayList;
1:8a2da19: import java.util.List;
1:f377acd: import java.util.concurrent.atomic.AtomicReference;
1:8a2da19: import java.util.function.Consumer;
1:8a2da19: 
1:8a2da19: import javax.transaction.xa.XAResource;
1:8a2da19: 
1:78dd69f: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
1:8a2da19: import org.osgi.service.transaction.control.LocalResource;
1:8a2da19: import org.osgi.service.transaction.control.TransactionContext;
1:8a2da19: import org.osgi.service.transaction.control.TransactionStatus;
1:8a2da19: 
1:f377acd: public class TransactionContextImpl extends AbstractTransactionContextImpl implements TransactionContext {
1:8a2da19: 
1:f377acd: 	final List<LocalResource> resources = new ArrayList<>();
1:8a2da19: 
1:661c406: 	private final boolean readOnly;
1:661c406: 
1:f377acd: 	private AtomicReference<TransactionStatus> tranStatus = new AtomicReference<>(ACTIVE);
1:661c406: 
1:f87416c: 	private Object txId;
1:8a2da19: 
1:f87416c: 	public TransactionContextImpl(Object txId, boolean readOnly) {
1:f87416c: 		this.txId = txId;
1:661c406: 		this.readOnly = readOnly;
13:8a2da19: 	}
1:8a2da19: 
3:8a2da19: 	@Override
1:8a2da19: 	public Object getTransactionKey() {
1:f87416c: 		return txId;
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public boolean getRollbackOnly() throws IllegalStateException {
1:f377acd: 		switch (tranStatus.get()) {
1:f377acd: 			case MARKED_ROLLBACK:
1:f377acd: 			case ROLLING_BACK:
1:f377acd: 			case ROLLED_BACK:
1:8a2da19: 				return true;
1:f377acd: 			default:
1:8a2da19: 				return false;
1:8a2da19: 		}
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public void setRollbackOnly() throws IllegalStateException {
1:f377acd: 		TransactionStatus status = tranStatus.get();
1:f377acd: 		switch (status) {
1:f377acd: 			case ACTIVE:
1:f377acd: 			case MARKED_ROLLBACK:
1:f377acd: 				if(!tranStatus.compareAndSet(status, MARKED_ROLLBACK))
1:f377acd: 					setRollbackOnly();
1:8a2da19: 				break;
1:f377acd: 			case COMMITTING:
1:8a2da19: 				// TODO something here? If it's the first resource then it might
1:8a2da19: 				// be ok to roll back?
1:f377acd: 				throw new IllegalStateException("The transaction is already being committed");
1:f377acd: 			case COMMITTED:
1:f377acd: 				throw new IllegalStateException("The transaction is already committed");
1:f377acd: 	
1:f377acd: 			case ROLLING_BACK:
1:f377acd: 			case ROLLED_BACK:
1:8a2da19: 				// A no op
1:8a2da19: 				break;
1:f377acd: 			default:
1:f377acd: 				throw new IllegalStateException("The transaction is in an unkown state");
1:f377acd: 		}
1:f377acd: 	}
1:f377acd: 	
1:f377acd: 	@Override
1:f377acd: 	protected void safeSetRollbackOnly() {
1:f377acd: 		TransactionStatus status = tranStatus.get();
1:f377acd: 		switch (status) {
1:f377acd: 			case ACTIVE:
1:f377acd: 			case MARKED_ROLLBACK:
1:f377acd: 				if(!tranStatus.compareAndSet(status, MARKED_ROLLBACK))
1:f377acd: 					safeSetRollbackOnly();
1:f377acd: 				break;
1:f377acd: 			default:
1:f377acd: 				break;
1:8a2da19: 		}
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public TransactionStatus getTransactionStatus() {
1:f377acd: 		return tranStatus.get();
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public void preCompletion(Runnable job) throws IllegalStateException {
1:f377acd: 		if (tranStatus.get().compareTo(MARKED_ROLLBACK) > 0) {
1:f377acd: 			throw new IllegalStateException("The current transaction is in state " + tranStatus);
1:8a2da19: 		}
1:8a2da19: 
1:8a2da19: 		preCompletion.add(job);
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:f377acd: 	public void postCompletion(Consumer<TransactionStatus> job) throws IllegalStateException {
1:f377acd: 		TransactionStatus status = tranStatus.get();
1:f377acd: 		if (status == COMMITTED || status == ROLLED_BACK) {
1:f377acd: 			throw new IllegalStateException("The current transaction is in state " + tranStatus);
1:8a2da19: 		}
1:8a2da19: 
1:8a2da19: 		postCompletion.add(job);
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:47a70d3: 	public void registerXAResource(XAResource resource, String name) {
1:8a2da19: 		throw new IllegalStateException("Not an XA manager");
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public void registerLocalResource(LocalResource resource) {
1:f377acd: 		if (tranStatus.get().compareTo(MARKED_ROLLBACK) > 0) {
1:f377acd: 			throw new IllegalStateException("The current transaction is in state " + tranStatus);
1:8a2da19: 		}
1:8a2da19: 		resources.add(resource);
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public boolean supportsXA() {
1:8a2da19: 		return false;
1:8a2da19: 	}
1:8a2da19: 
1:8a2da19: 	@Override
1:8a2da19: 	public boolean supportsLocal() {
1:8a2da19: 		return true;
1:8a2da19: 	}
1:f377acd: 
1:f377acd: 	@Override
1:661c406: 	public boolean isReadOnly() {
1:661c406: 		return readOnly;
1:661c406: 	}
1:661c406: 
1:661c406: 	@Override
1:f377acd: 	protected boolean isAlive() {
1:f377acd: 		TransactionStatus status = tranStatus.get();
1:f377acd: 		return status != COMMITTED && status != ROLLED_BACK;
1:f377acd: 	}
1:f377acd: 
1:f377acd: 	@Override
1:f377acd: 	public void finish() {
1:f377acd: 		
1:f377acd: 		beforeCompletion(() -> setRollbackOnly());
1:f377acd: 
1:f377acd: 		TransactionStatus status;
1:f377acd: 
1:f377acd: 		if (getRollbackOnly()) {
1:f377acd: 			vanillaRollback();
1:f377acd: 			status = ROLLED_BACK;
1:f377acd: 		} else {
1:f377acd: 			tranStatus.set(COMMITTING);
1:f377acd: 
1:f377acd: 			List<LocalResource> committed = new ArrayList<>(resources.size());
1:f377acd: 			List<LocalResource> rolledback = new ArrayList<>(0);
1:f377acd: 
1:f377acd: 			resources.stream().forEach(lr -> {
1:f377acd: 				try {
1:f377acd: 					if (getRollbackOnly()) {
1:f377acd: 						lr.rollback();
1:f377acd: 						rolledback.add(lr);
1:f377acd: 					} else {
1:f377acd: 						lr.commit();
1:f377acd: 						committed.add(lr);
1:f377acd: 					}
1:f377acd: 				} catch (Exception e) {
1:f377acd: 					firstUnexpectedException.compareAndSet(null, e);
1:f377acd: 					if (committed.isEmpty()) {
1:f377acd: 						tranStatus.set(ROLLING_BACK);
1:f377acd: 					}
1:f377acd: 					rolledback.add(lr);
1:f377acd: 				}
1:f377acd: 			});
1:f377acd: 			status = tranStatus.updateAndGet(ts -> ts == ROLLING_BACK ? ROLLED_BACK : COMMITTED);
1:f377acd: 		}
1:f377acd: 		afterCompletion(status);
1:f377acd: 	}
1:f377acd: 	
1:f377acd: 	private void vanillaRollback() {
1:f377acd: 		
1:f377acd: 		tranStatus.set(ROLLING_BACK);
1:f377acd: 	
1:f377acd: 		resources.stream().forEach(lr -> {
1:f377acd: 				try {
1:f377acd: 					lr.rollback();
1:f377acd: 				} catch (Exception e) {
1:f377acd: 					// TODO log this
1:f377acd: 					recordFailure(e);
1:f377acd: 				}
1:f377acd: 			});
1:f377acd: 		
1:f377acd: 		tranStatus.set(ROLLED_BACK);
1:f377acd: 	}
1:8a2da19: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: 	public void registerXAResource(XAResource resource, String name) {
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	private Object txId;
1: 	public TransactionContextImpl(Object txId, boolean readOnly) {
1: 		this.txId = txId;
1: 		return txId;
commit:661c406
/////////////////////////////////////////////////////////////////////////
1: 	private final boolean readOnly;
1: 
1: 
0: 	public TransactionContextImpl(Coordination coordination, boolean readOnly) {
1: 		this.readOnly = readOnly;
/////////////////////////////////////////////////////////////////////////
1: 	public boolean isReadOnly() {
1: 		return readOnly;
1: 	}
1: 
1: 	@Override
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.service.common.impl.AbstractTransactionContextImpl;
commit:f377acd
/////////////////////////////////////////////////////////////////////////
1: import static org.osgi.service.transaction.control.TransactionStatus.ACTIVE;
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
1: public class TransactionContextImpl extends AbstractTransactionContextImpl implements TransactionContext {
1: 	final List<LocalResource> resources = new ArrayList<>();
1: 	private AtomicReference<TransactionStatus> tranStatus = new AtomicReference<>(ACTIVE);
/////////////////////////////////////////////////////////////////////////
1: 		switch (tranStatus.get()) {
1: 			case MARKED_ROLLBACK:
1: 			case ROLLING_BACK:
1: 			case ROLLED_BACK:
1: 			default:
1: 		TransactionStatus status = tranStatus.get();
1: 		switch (status) {
1: 			case ACTIVE:
1: 			case MARKED_ROLLBACK:
1: 				if(!tranStatus.compareAndSet(status, MARKED_ROLLBACK))
1: 					setRollbackOnly();
1: 			case COMMITTING:
1: 				throw new IllegalStateException("The transaction is already being committed");
1: 			case COMMITTED:
1: 				throw new IllegalStateException("The transaction is already committed");
1: 	
1: 			case ROLLING_BACK:
1: 			case ROLLED_BACK:
1: 			default:
1: 				throw new IllegalStateException("The transaction is in an unkown state");
1: 		}
1: 	}
1: 	
1: 	@Override
1: 	protected void safeSetRollbackOnly() {
1: 		TransactionStatus status = tranStatus.get();
1: 		switch (status) {
1: 			case ACTIVE:
1: 			case MARKED_ROLLBACK:
1: 				if(!tranStatus.compareAndSet(status, MARKED_ROLLBACK))
1: 					safeSetRollbackOnly();
1: 				break;
1: 			default:
1: 				break;
1: 		return tranStatus.get();
1: 		if (tranStatus.get().compareTo(MARKED_ROLLBACK) > 0) {
1: 			throw new IllegalStateException("The current transaction is in state " + tranStatus);
1: 	public void postCompletion(Consumer<TransactionStatus> job) throws IllegalStateException {
1: 		TransactionStatus status = tranStatus.get();
1: 		if (status == COMMITTED || status == ROLLED_BACK) {
1: 			throw new IllegalStateException("The current transaction is in state " + tranStatus);
/////////////////////////////////////////////////////////////////////////
1: 		if (tranStatus.get().compareTo(MARKED_ROLLBACK) > 0) {
1: 			throw new IllegalStateException("The current transaction is in state " + tranStatus);
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Override
1: 	protected boolean isAlive() {
1: 		TransactionStatus status = tranStatus.get();
1: 		return status != COMMITTED && status != ROLLED_BACK;
1: 	}
1: 
1: 	@Override
1: 	public void finish() {
1: 		
1: 		beforeCompletion(() -> setRollbackOnly());
1: 
1: 		TransactionStatus status;
1: 
1: 		if (getRollbackOnly()) {
1: 			vanillaRollback();
1: 			status = ROLLED_BACK;
1: 		} else {
1: 			tranStatus.set(COMMITTING);
1: 
1: 			List<LocalResource> committed = new ArrayList<>(resources.size());
1: 			List<LocalResource> rolledback = new ArrayList<>(0);
1: 
1: 			resources.stream().forEach(lr -> {
1: 				try {
1: 					if (getRollbackOnly()) {
1: 						lr.rollback();
1: 						rolledback.add(lr);
1: 					} else {
1: 						lr.commit();
1: 						committed.add(lr);
1: 					}
1: 				} catch (Exception e) {
1: 					firstUnexpectedException.compareAndSet(null, e);
1: 					if (committed.isEmpty()) {
1: 						tranStatus.set(ROLLING_BACK);
1: 					}
1: 					rolledback.add(lr);
1: 				}
1: 			});
1: 			status = tranStatus.updateAndGet(ts -> ts == ROLLING_BACK ? ROLLED_BACK : COMMITTED);
1: 		}
1: 		afterCompletion(status);
1: 	}
1: 	
1: 	private void vanillaRollback() {
1: 		
1: 		tranStatus.set(ROLLING_BACK);
1: 	
1: 		resources.stream().forEach(lr -> {
1: 				try {
1: 					lr.rollback();
1: 				} catch (Exception e) {
1: 					// TODO log this
1: 					recordFailure(e);
1: 				}
1: 			});
1: 		
1: 		tranStatus.set(ROLLED_BACK);
1: 	}
commit:25e28f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 				TransactionContextImpl.this.beforeCompletion(() -> setRollbackOnly());
/////////////////////////////////////////////////////////////////////////
0: 						firstUnexpectedException.compareAndSet(null, e);
/////////////////////////////////////////////////////////////////////////
0: 							firstUnexpectedException.compareAndSet(null, e);
commit:8a2da19
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.local.impl;
1: 
1: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTED;
1: import static org.osgi.service.transaction.control.TransactionStatus.COMMITTING;
1: import static org.osgi.service.transaction.control.TransactionStatus.MARKED_ROLLBACK;
1: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1: import static org.osgi.service.transaction.control.TransactionStatus.ROLLING_BACK;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.function.Consumer;
1: 
1: import javax.transaction.xa.XAResource;
1: 
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.Participant;
1: import org.osgi.service.transaction.control.LocalResource;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionStatus;
1: 
0: public class TransactionContextImpl extends AbstractTransactionContextImpl
0: 		implements TransactionContext {
1: 
0: 	final List<LocalResource>				resources			= new ArrayList<>();
1: 
0: 	final List<Runnable>					preCompletion		= new ArrayList<>();
0: 	final List<Consumer<TransactionStatus>>	postCompletion		= new ArrayList<>();
1: 
0: 	private volatile TransactionStatus		tranStatus;
1: 
0: 	public TransactionContextImpl(Coordination coordination) {
0: 		super(coordination);
1: 
0: 		tranStatus = TransactionStatus.ACTIVE;
1: 
0: 		coordination.addParticipant(new Participant() {
1: 
1: 			@Override
0: 			public void failed(Coordination coordination) throws Exception {
0: 				setRollbackOnly();
1: 
0: 				beforeCompletion();
1: 
0: 				vanillaRollback();
1: 
0: 				afterCompletion();
1: 			}
1: 
0: 			private void vanillaRollback() {
1: 
0: 				tranStatus = ROLLING_BACK;
1: 
0: 				resources.stream().forEach(lr -> {
0: 					try {
0: 						lr.rollback();
0: 					} catch (Exception e) {
0: 						// TODO log this
1: 					}
0: 				});
1: 
0: 				tranStatus = ROLLED_BACK;
1: 			}
1: 
0: 			private void beforeCompletion() {
0: 				preCompletion.stream().forEach(r -> {
0: 					try {
0: 						r.run();
0: 					} catch (Exception e) {
0: 						unexpectedException.compareAndSet(null, e);
0: 						setRollbackOnly();
0: 						// TODO log this
1: 					}
0: 				});
1: 			}
1: 
0: 			private void afterCompletion() {
0: 				postCompletion.stream().forEach(c -> {
0: 					try {
0: 						c.accept(tranStatus);
0: 					} catch (Exception e) {
0: 						unexpectedException.compareAndSet(null, e);
0: 						// TODO log this
1: 					}
0: 				});
1: 			}
1: 
1: 			@Override
0: 			public void ended(Coordination coordination) throws Exception {
0: 				beforeCompletion();
1: 
0: 				if (getRollbackOnly()) {
0: 					vanillaRollback();
0: 				} else {
0: 					tranStatus = COMMITTING;
1: 
0: 					List<LocalResource> committed = new ArrayList<>(
0: 							resources.size());
0: 					List<LocalResource> rolledback = new ArrayList<>(0);
1: 
0: 					resources.stream().forEach(lr -> {
0: 						try {
0: 							if (getRollbackOnly()) {
0: 								lr.rollback();
0: 								rolledback.add(lr);
0: 							} else {
0: 								lr.commit();
0: 								committed.add(lr);
1: 							}
0: 						} catch (Exception e) {
0: 							unexpectedException.compareAndSet(null, e);
0: 							if (committed.isEmpty()) {
0: 								tranStatus = ROLLING_BACK;
1: 							}
0: 							rolledback.add(lr);
1: 						}
0: 					});
0: 					tranStatus = tranStatus == ROLLING_BACK ? ROLLED_BACK
0: 							: COMMITTED;
1: 				}
0: 				afterCompletion();
1: 			}
0: 		});
1: 	}
1: 
1: 	@Override
1: 	public Object getTransactionKey() {
0: 		return coordination.getId();
1: 	}
1: 
1: 	@Override
1: 	public boolean getRollbackOnly() throws IllegalStateException {
0: 		switch (tranStatus) {
0: 			case MARKED_ROLLBACK :
0: 			case ROLLING_BACK :
0: 			case ROLLED_BACK :
1: 				return true;
0: 			default :
1: 				return false;
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public void setRollbackOnly() throws IllegalStateException {
0: 		switch (tranStatus) {
0: 			case ACTIVE :
0: 			case MARKED_ROLLBACK :
0: 				tranStatus = MARKED_ROLLBACK;
1: 				break;
0: 			case COMMITTING :
1: 				// TODO something here? If it's the first resource then it might
1: 				// be ok to roll back?
0: 				throw new IllegalStateException(
0: 						"The transaction is already being committed");
0: 			case COMMITTED :
0: 				throw new IllegalStateException(
0: 						"The transaction is already committed");
1: 
0: 			case ROLLING_BACK :
0: 			case ROLLED_BACK :
1: 				// A no op
1: 				break;
0: 			default :
0: 				throw new IllegalStateException(
0: 						"The transaction is in an unkown state");
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public TransactionStatus getTransactionStatus() {
0: 		return tranStatus;
1: 	}
1: 
1: 	@Override
1: 	public void preCompletion(Runnable job) throws IllegalStateException {
0: 		if (tranStatus.compareTo(MARKED_ROLLBACK) > 0) {
0: 			throw new IllegalStateException(
0: 					"The current transaction is in state " + tranStatus);
1: 		}
1: 
1: 		preCompletion.add(job);
1: 	}
1: 
1: 	@Override
0: 	public void postCompletion(Consumer<TransactionStatus> job)
0: 			throws IllegalStateException {
0: 		if (tranStatus == COMMITTED || tranStatus == ROLLED_BACK) {
0: 			throw new IllegalStateException(
0: 					"The current transaction is in state " + tranStatus);
1: 		}
1: 
1: 		postCompletion.add(job);
1: 	}
1: 
1: 	@Override
0: 	public void registerXAResource(XAResource resource) {
1: 		throw new IllegalStateException("Not an XA manager");
1: 	}
1: 
1: 	@Override
1: 	public void registerLocalResource(LocalResource resource) {
0: 		if (tranStatus.compareTo(MARKED_ROLLBACK) > 0) {
0: 			throw new IllegalStateException(
0: 					"The current transaction is in state " + tranStatus);
1: 		}
1: 		resources.add(resource);
1: 	}
1: 
1: 	@Override
1: 	public boolean supportsXA() {
1: 		return false;
1: 	}
1: 
1: 	@Override
1: 	public boolean supportsLocal() {
1: 		return true;
1: 	}
1: }
============================================================================