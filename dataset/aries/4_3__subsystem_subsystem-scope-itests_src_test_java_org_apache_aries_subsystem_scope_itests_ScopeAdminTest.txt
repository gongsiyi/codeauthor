1:1869a9f: /*
1:1869a9f:  * Licensed to the Apache Software Foundation (ASF) under one
1:1869a9f:  * or more contributor license agreements.  See the NOTICE file
1:1869a9f:  * distributed with this work for additional information
1:1869a9f:  * regarding copyright ownership.  The ASF licenses this file
1:1869a9f:  * to you under the Apache License, Version 2.0 (the
1:1869a9f:  * "License"); you may not use this file except in compliance
1:1869a9f:  * with the License.  You may obtain a copy of the License at
1:1869a9f:  *
1:1869a9f:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1869a9f:  *
1:1869a9f:  * Unless required by applicable law or agreed to in writing,
1:1869a9f:  * software distributed under the License is distributed on an
1:1869a9f:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1869a9f:  * KIND, either express or implied.  See the License for the
1:1869a9f:  * specific language governing permissions and limitations
1:1869a9f:  * under the License.
1:1869a9f:  */
1:e9f9bca: package org.apache.aries.subsystem.scope.itests;
17:1869a9f: 
1:1869a9f: import static org.junit.Assert.assertEquals;
1:e9f9bca: import static org.junit.Assert.assertFalse;
1:1869a9f: import static org.junit.Assert.assertNotNull;
1:1869a9f: import static org.junit.Assert.assertTrue;
1:1869a9f: import static org.junit.Assert.fail;
1:1869a9f: 
1:e9f9bca: import java.io.IOException;
1:1869a9f: import java.net.MalformedURLException;
1:1869a9f: import java.net.URL;
1:1869a9f: import java.util.ArrayList;
1:1869a9f: import java.util.Collection;
1:1869a9f: import java.util.List;
1:1869a9f: import java.util.Map;
1:1869a9f: 
1:1869a9f: import org.apache.aries.subsystem.example.helloIsolation.HelloIsolation;
1:1869a9f: import org.apache.aries.subsystem.scope.InstallInfo;
1:1869a9f: import org.apache.aries.subsystem.scope.Scope;
1:1869a9f: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:1869a9f: import org.apache.aries.subsystem.scope.SharePolicy;
1:1869a9f: import org.junit.After;
1:9c15542: import org.junit.Ignore;
1:5bdb2b8: import org.junit.Test;
1:1869a9f: import org.osgi.framework.Bundle;
1:1869a9f: import org.osgi.framework.BundleEvent;
1:1869a9f: import org.osgi.framework.BundleException;
1:1869a9f: import org.osgi.framework.Filter;
1:1869a9f: import org.osgi.framework.FrameworkUtil;
1:1869a9f: import org.osgi.framework.InvalidSyntaxException;
1:1869a9f: import org.osgi.framework.ServiceReference;
1:e9f9bca: import org.osgi.framework.wiring.BundleRevision;
1:1869a9f: import org.osgi.util.tracker.BundleTracker;
1:1869a9f: import org.osgi.util.tracker.BundleTrackerCustomizer;
1:1869a9f: 
1:1869a9f: 
1:6f4b079: public class ScopeAdminTest extends AbstractTest {
1:1869a9f: 
1:1869a9f:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:1869a9f:      * are created in the paxweb temp directory, and not in the svn tree 
1:1869a9f:      */
1:1869a9f:     static boolean createdApplications = false;
1:1869a9f:     BundleTracker bt;
1:1869a9f:     int addEventCount;
1:1869a9f:     int modifyEventCount;
1:1869a9f:     int removeEventCount;
1:1869a9f:     
1:1869a9f:     @After
1:1869a9f:     public void tearDown() throws Exception {
1:1869a9f:         if (bt != null) {
1:1869a9f:             bt.close();
6:1869a9f:         }
1:1869a9f:     }
1:1869a9f:     
1:1869a9f:     @Test
1:1869a9f:     public void testBundleServiceIsolation() throws Exception {
2:1869a9f:         // make sure we are using a framework that provides composite admin service
1:5bdb2b8:         assertNotNull("scope admin should not be null", scope);
3:1869a9f:         System.out.println("able to get scope admin service");
1:1869a9f: 
1:1869a9f:         bt = new BundleTracker(bundleContext, Bundle.INSTALLED | Bundle.UNINSTALLED | Bundle.ACTIVE, new BundleTrackerCustomizer() {
1:1869a9f: 
1:1869a9f:             public synchronized Object addingBundle(Bundle bundle, BundleEvent event) {
1:1869a9f:                 if (event == null) {
1:1869a9f:                     System.out.println("ScopeAdminTest - adding Bundle: " + bundle.getSymbolicName() + " event: null");
1:1869a9f:                 } else {
1:1869a9f:                     System.out.println("ScopeAdminTest - adding Bundle: " + bundle.getSymbolicName() + " event: " + event.getType());
1:1869a9f:                     addEventCount++;
1:1869a9f:                 }
1:1869a9f:                 return bundle;
1:1869a9f:             }
1:1869a9f: 
1:1869a9f:             public synchronized void modifiedBundle(Bundle bundle, BundleEvent event,
1:1869a9f:                     Object object) {
1:1869a9f:                 if (event == null) {
1:1869a9f:                     System.out.println("ScopeAdminTest - modifying Bundle: " + bundle.getSymbolicName() + " event: null");
1:1869a9f:                 } else {
1:1869a9f:                     System.out.println("ScopeAdminTest - modifying Bundle: " + bundle.getSymbolicName() + " event: " + event.getType());
1:1869a9f:                     modifyEventCount++;
1:1869a9f:                 }
1:1869a9f:                 
1:1869a9f:                 
1:1869a9f:             }
1:1869a9f: 
1:1869a9f:             public synchronized void removedBundle(Bundle bundle, BundleEvent event,
1:1869a9f:                     Object object) {
1:1869a9f:                 if (event == null) {
1:1869a9f:                     System.out.println("ScopeAdminTest - removing Bundle: " + bundle.getSymbolicName() + " event: null");
1:1869a9f:                 } else {
1:1869a9f:                     System.out.println("ScopeAdminTest - removing Bundle: " + bundle.getSymbolicName() + " event: " + event.getType());
1:1869a9f:                     removeEventCount++;
1:1869a9f:                 }
1:1869a9f:             }
1:1869a9f:             
1:1869a9f:         });
1:1869a9f:         bt.open();
1:1869a9f:         
1:5bdb2b8:         ScopeUpdate su = scope.newScopeUpdate();
1:1869a9f:         
1:1869a9f:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:e9f9bca:         su.getChildren().add(childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.util.tracker", childScopeUpdate);
1:1869a9f:         
1:1869a9f:         // build up installInfo object for the scope
1:9c15542:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT"));
1:9c15542:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
1:1869a9f: 
1:1869a9f:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:1869a9f:         bundlesToInstall.add(info1);
1:1869a9f:         bundlesToInstall.add(info2);
1:1869a9f:         
1:1869a9f:         // add bundles to be installed, based on subsystem content
1:1869a9f:         su.commit();
1:1869a9f:         
1:1869a9f:         assertEquals("add event count should be 0 since 0 bundles are installed in root scope", 0, addEventCount);
1:1869a9f:         assertEquals("modify event count should be 0", 0, modifyEventCount);
1:1869a9f:         assertEquals("remove event count should be 0", 0, removeEventCount);
1:1869a9f:         // start all bundles in the scope scope_test1
1:e9f9bca:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
1:1869a9f:         for (Bundle b : bundlesToStart) {
1:1869a9f:             b.start();
1:1869a9f:             
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         assertEquals("add event count should be 0 since 0 bundles are installed in root scope", 0, addEventCount);
1:1869a9f:         assertEquals("modify event count should be 0", 0, modifyEventCount);
1:1869a9f:         assertEquals("remove event count should be 0", 0, removeEventCount);
1:1869a9f:         
5:1869a9f:         try {
1:1869a9f:             ServiceReference sr = bundleContext.getServiceReference(HelloIsolation.class.getName());
1:1869a9f:             fail("should not be able to get the sr for HelloIsolation service");
5:1869a9f:         } catch (Exception ex) {
1:1869a9f:             // expected 
1:1869a9f:         } catch (Error er) {
1:1869a9f:             // expected
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         // test bundle find hooks
1:1869a9f:         Bundle[] bundles = bundleContext.getBundles();
1:1869a9f:         for (Bundle b : bundles) {
1:1869a9f:             System.out.println("Bundle is " + b.getBundleId() + ": " + b.getSymbolicName());
1:1869a9f:             if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1) {
1:1869a9f:                 fail("bundles with name starts with org.apache.aries.subsystem.example.helloIsolation should be in a different scope");
1:1869a9f:             }
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         // test bundle service find hook
1:1869a9f:         //ServiceReference sr = bundleContext.getServiceReference(HelloIsolation.class.getName());
1:1869a9f:         //assertNull("sr should be null", sr);
1:5bdb2b8:         Collection<Scope> children = scope.getChildren();
1:1869a9f:         assertEquals(1, children.size());
1:1869a9f:         
1:1869a9f:         for (Scope child : children) {
1:1869a9f:             if (child.getName().equals("scope_test1")) {
1:1869a9f:                 Collection<Bundle> buns = child.getBundles();
1:1869a9f:                 assertEquals(2, buns.size());
1:1869a9f:                 assertEquals(0, child.getChildren().size());
1:1869a9f:                 for (Bundle b : buns) {
1:1869a9f:                     assertTrue(b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1);
1:1869a9f:                 }
1:1869a9f:                 
1:1869a9f:             }
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         // install a test bundle in the root scope
1:1869a9f:         URL url = new URL("mvn:org.apache.felix/org.apache.felix.fileinstall/2.0.8");
1:1869a9f:         bundleContext.installBundle("org.apache.felix.fileinstall-rootScope", url.openStream());
1:1869a9f:         assertEquals("add event count should be 1 since 1 bundles are installed", 1, addEventCount);
1:1869a9f:         assertEquals("modify event count should be 0", 0, modifyEventCount);
1:1869a9f:         assertEquals("remove event count should be 0", 0, removeEventCount);
1:1869a9f:         
1:1869a9f:         
1:1869a9f:         // remove child scope
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca: //        Collection<Scope> scopes = su.getToBeRemovedChildren();
1:e9f9bca:         Collection<ScopeUpdate> scopes = su.getChildren();
1:e9f9bca:         childScopeUpdate = scopes.iterator().next();
1:1869a9f:         
1:1869a9f:         // obtain child scope admin from service registry
1:e9f9bca: //        String filter = "ScopeName=scope_test1";
1:5bdb2b8: //        Scope childscope = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:e9f9bca:         Scope childScopeAdmin = childScopeUpdate.getScope();
1:5bdb2b8:         assertEquals(scope, childScopeAdmin.getParent());
1:e9f9bca: //        scopes.add(childScopeAdmin);
1:e9f9bca:         scopes.remove(childScopeUpdate);
1:1869a9f:         su.commit();
1:1869a9f:         
1:5bdb2b8:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:e9f9bca:         
1:e9f9bca: //        childScopeAdmin = null;
1:e9f9bca: //        try {
1:e9f9bca: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:e9f9bca: //        } catch (Exception ex) {
1:e9f9bca: //            // ignore
1:e9f9bca: //        }
1:e9f9bca: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:e9f9bca:         
1:1869a9f:     }
1:1869a9f:     
1:1869a9f:     @Test
1:9c15542:     @Ignore
1:1869a9f:     public void testPackageIsolation() throws Exception {
1:1869a9f:         // make sure we are using a framework that provides composite admin service
1:5bdb2b8:         assertNotNull("scope admin should not be null", scope);
1:1869a9f:         System.out.println("able to get scope admin service");
1:1869a9f: 
1:5bdb2b8:         ScopeUpdate su = scope.newScopeUpdate();
1:1869a9f:         
1:1869a9f:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:e9f9bca:         su.getChildren().add(childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.util.tracker", childScopeUpdate);
1:1869a9f:         // build up installInfo object for the scope
1:9c15542:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT"));
1:9c15542:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
1:1869a9f: 
1:1869a9f:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:1869a9f:         bundlesToInstall.add(info1);
1:1869a9f:         bundlesToInstall.add(info2);
1:1869a9f:         
1:1869a9f:         // add bundles to be installed, based on subsystem content
1:1869a9f:         su.commit();
1:1869a9f:         
1:1869a9f:         // start all bundles in the scope scope_test1
1:e9f9bca:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
1:1869a9f:         for (Bundle b : bundlesToStart) {
1:1869a9f:             b.start();
1:1869a9f:             
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         // install helloIsolationRef1 bundle in the root scope
1:9c15542:         URL url1 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT");
1:1869a9f:         Bundle helloIsolationRef = bundleContext.installBundle("helloIsolationRef1-rootScope", url1.openStream());
1:1869a9f:    
1:1869a9f:         try {
1:1869a9f:             helloIsolationRef.start();
1:1869a9f:             fail("should not be able to start helloIsolationRef since missing import packages");
1:1869a9f:         } catch (Exception ex) {
1:1869a9f:             // expect resolving error
1:1869a9f:         }
1:1869a9f:         
1:9c15542:         URL url2 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT");
1:1869a9f:         Bundle helloIsolation = bundleContext.installBundle("helloIsolation1-rootScope", url2.openStream());
1:1869a9f:  
1:1869a9f:         helloIsolation.start();
1:1869a9f:         
1:1869a9f:         // should be able to start the bundle now.
1:1869a9f:         helloIsolationRef.start();
1:1869a9f:                
1:1869a9f:         // remove helloIsolationRef & helloIsolation
1:1869a9f:         helloIsolationRef.uninstall();
1:1869a9f:         helloIsolation.uninstall();
1:e9f9bca:         
1:1869a9f:         // remove child scope
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca: //        Collection<Scope> scopes = su.getToBeRemovedChildren();
1:e9f9bca:         Collection<ScopeUpdate> scopes = su.getChildren();
1:e9f9bca:         childScopeUpdate = scopes.iterator().next();
1:1869a9f:         // obtain child scope admin from service registry
1:e9f9bca: //        String filter = "ScopeName=scope_test1";
1:e9f9bca: //        Scope childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:e9f9bca:         Scope childScopeAdmin = childScopeUpdate.getScope();
1:5bdb2b8:         assertEquals(scope, childScopeAdmin.getParent());
1:e9f9bca: //        scopes.add(childScopeAdmin);
1:e9f9bca:         scopes.remove(childScopeUpdate);
1:1869a9f:         su.commit();
1:e9f9bca:         
1:5bdb2b8:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:1869a9f:         
1:e9f9bca: //        childScopeAdmin = null;
1:e9f9bca: //        try {
1:e9f9bca: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:e9f9bca: //        } catch (Exception ex) {
1:e9f9bca: //            // ignore
1:e9f9bca: //        }
1:e9f9bca: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:1869a9f:         
1:1869a9f:     }
1:1869a9f:     
1:1869a9f:     // test sharing the helloIsolation package from the test scope.
1:1869a9f:     @Test
1:9c15542:     @Ignore
1:1869a9f:     public void testPackageSharingFromTestScope() throws Exception {
1:1869a9f:         // make sure we are using a framework that provides composite admin service
1:5bdb2b8:         assertNotNull("scope admin should not be null", scope);
1:1869a9f:         System.out.println("able to get scope admin service");
1:1869a9f: 
1:5bdb2b8:         ScopeUpdate su = scope.newScopeUpdate();
1:1869a9f:         
1:1869a9f:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:e9f9bca:         su.getChildren().add(childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.util.tracker", childScopeUpdate);
1:1869a9f:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1:1869a9f:         final Filter filter1 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
1:e9f9bca:                   "(osgi.wiring.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:1869a9f:                 ")");
1:1869a9f:         final Filter filter2 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
1:e9f9bca:                   "(scope.share.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:1869a9f:                 ")");
1:e9f9bca:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:1869a9f:         if (packagePolicies == null) {
1:1869a9f:             packagePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE, packagePolicies);
1:1869a9f:         }
1:e9f9bca:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:e9f9bca:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:1869a9f:         if (servicePolicies == null) {
1:1869a9f:             servicePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put("scope.share.service", servicePolicies);
1:1869a9f:         }
1:e9f9bca:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, "scope.share.service", filter2));
1:1869a9f: 
1:1869a9f: 
1:1869a9f:         // build up installInfo object for the scope
1:9c15542:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT"));
1:9c15542:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
1:1869a9f: 
1:1869a9f:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:1869a9f:         bundlesToInstall.add(info1);
1:1869a9f:         bundlesToInstall.add(info2);
1:1869a9f:         
1:1869a9f:         // add bundles to be installed, based on subsystem content
1:1869a9f:         su.commit();
1:1869a9f:         
1:1869a9f:         // start all bundles in the scope scope_test1
1:e9f9bca:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
1:1869a9f:         for (Bundle b : bundlesToStart) {
1:1869a9f:             b.start();
1:1869a9f:             
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         // install helloIsolationRef1 bundle in the root scope
1:9c15542:         URL url1 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT");
1:1869a9f:         Bundle helloIsolationRef = bundleContext.installBundle("helloIsolationRef1-rootScope", url1.openStream());
1:1869a9f:    
1:1869a9f:         try {
1:1869a9f:             helloIsolationRef.start();
1:1869a9f:         } catch (Exception ex) {
1:1869a9f:             fail("should be able to start helloIsolationRef by import packages from scope_test1");
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         // remove helloIsolationRef
1:1869a9f:         helloIsolationRef.uninstall();
1:1869a9f:         // remove child scope
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         Collection<ScopeUpdate> scopes = su.getChildren();
1:e9f9bca:         childScopeUpdate = scopes.iterator().next();
1:1869a9f:         // obtain child scope admin from service registry
1:e9f9bca: //        String filter = "ScopeName=scope_test1";
1:e9f9bca:         Scope childScopeAdmin = childScopeUpdate.getScope();
1:5bdb2b8:         assertEquals(scope, childScopeAdmin.getParent());
1:e9f9bca:         scopes.remove(childScopeUpdate);
1:1869a9f:         su.commit();
1:1869a9f:         
1:5bdb2b8:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:1869a9f:         
1:e9f9bca: //        childScopeAdmin = null;
1:e9f9bca: //        try {
1:e9f9bca: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:e9f9bca: //        } catch (Exception ex) {
1:e9f9bca: //            // ignore
1:e9f9bca: //        }
1:e9f9bca: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:1869a9f:         
1:1869a9f:     }
1:1869a9f: 
1:1869a9f:     // test sharing the helloIsolation package & service from the root scope.
1:1869a9f:     @Test
1:1869a9f:     public void testPackageSharingFromRootScope() throws Exception {
1:1869a9f:         // install helloIsolationRef1 bundle in the root scope
1:9c15542:         URL url1 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT");
1:1869a9f:         Bundle helloIsolation = bundleContext.installBundle("helloIsolation1-rootScope", url1.openStream());
1:1869a9f:    
1:1869a9f:         try {
1:1869a9f:             helloIsolation.start();
1:1869a9f:         } catch (Exception ex) {
1:1869a9f:             fail("should be able to start helloIsolation");
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         // make sure we are using a framework that provides composite admin service
1:5bdb2b8:         ScopeUpdate su = scope.newScopeUpdate();
1:1869a9f:         
1:1869a9f:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:e9f9bca:         su.getChildren().add(childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:1869a9f:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_IMPORT);
1:1869a9f:         final Filter filter1 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
1:e9f9bca:                   "(osgi.wiring.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:1869a9f:                 ")");
1:1869a9f:         final Filter filter2 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
1:e9f9bca:                   "(scope.share.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:1869a9f:                 ")");
1:e9f9bca:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:1869a9f:         if (packagePolicies == null) {
1:1869a9f:             packagePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE,packagePolicies);
1:1869a9f:         }
1:e9f9bca:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:e9f9bca:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:1869a9f:         if (servicePolicies == null) {
1:1869a9f:             servicePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put("scope.share.service", servicePolicies);
1:1869a9f:         }
1:e9f9bca:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, "scope.share.service", filter2));
1:1869a9f: 
1:1869a9f: 
1:1869a9f:         // build up installInfo object for the scope
1:9c15542:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
1:1869a9f: 
1:1869a9f:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:1869a9f:         bundlesToInstall.add(info2);
1:1869a9f:         
1:1869a9f:         // add bundles to be installed, based on subsystem content
1:1869a9f:         su.commit();
1:1869a9f:         
1:1869a9f:         // start all bundles in the scope scope_test1
1:e9f9bca:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
1:1869a9f:         for (Bundle b : bundlesToStart) {
1:1869a9f:             try {
1:1869a9f:                 b.start();
1:1869a9f:             } catch (Exception ex) {
1:e9f9bca:             	ex.printStackTrace();
1:1869a9f:                 fail("should be able to start helloIsolationRef in scope_test1");
1:1869a9f:             }
1:1869a9f:             
1:1869a9f:         }
1:1869a9f:  
1:1869a9f:         // remove helloIsolation in root scope
1:1869a9f:         helloIsolation.uninstall();
1:1869a9f:         
1:1869a9f:         // remove child scope
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         Collection<ScopeUpdate> scopes = su.getChildren();
1:e9f9bca:         childScopeUpdate = scopes.iterator().next();
1:1869a9f:         // obtain child scope admin from service registry
1:e9f9bca: //        String filter = "ScopeName=scope_test1";
1:e9f9bca:         Scope childScopeAdmin = childScopeUpdate.getScope();
1:5bdb2b8:         assertEquals(scope, childScopeAdmin.getParent());
1:e9f9bca:         scopes.remove(childScopeUpdate);
1:1869a9f:         su.commit();
1:1869a9f:         
1:5bdb2b8:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:1869a9f:         
1:e9f9bca: //        childScopeAdmin = null;
1:e9f9bca: //        try {
1:e9f9bca: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:e9f9bca: //        } catch (Exception ex) {
1:e9f9bca: //            // ignore
1:e9f9bca: //        }
1:e9f9bca: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:1869a9f:     }
1:1869a9f:     
1:1869a9f:     // test ability to select the helloIsolation package from which scope it wants to use
1:1869a9f:     // not necessarily the highest version one by default.
1:1869a9f:     @Test
1:9c15542:     @Ignore
1:1869a9f:     public void testScopeAffinity() throws Exception {
1:1869a9f:         // install helloIsolation 0.3 in scope_test1
1:5bdb2b8:         Scope scope1 = createScope(scope, "scope_test1", 
1:9c15542:                 "mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT",
1:1869a9f:                 "0.3");
1:1869a9f:         
1:1869a9f:         // install helloIsolation 2.0 in scope_test2
1:5bdb2b8:         Scope scope2 = createScope(scope, "scope_test2", 
1:9c15542:                 "mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT",
1:1869a9f:                 "2.0");
1:1869a9f:         
1:1869a9f:         // install helloIsolationRef 2.0 in scope_test3
1:5bdb2b8:         ScopeUpdate su = scope.newScopeUpdate();
1:1869a9f:         
1:1869a9f:         ScopeUpdate childScopeUpdate = su.newChild("scope_test3");
1:e9f9bca:         su.getChildren().add(childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:1869a9f:         Scope scope3 = childScopeUpdate.getScope();
1:1869a9f:         
1:1869a9f:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_IMPORT);
1:1869a9f:         /*final Filter filter1 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
5:1869a9f:                   "(osgi.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:1869a9f:                   "(bundle-symbolic-name=org.apache.aries.subsystem.example.helloIsolation)" + 
1:1869a9f:                   "(bundle-version<=1.1)" + 
1:1869a9f:                 ")");*/
1:1869a9f:         final Filter filter1 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
1:e9f9bca:                   "(osgi.wiring.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:1869a9f:                   //"(scopeName=scope_test1)" +  
1:1869a9f:                 ")");
1:1869a9f:         final Filter filter2 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
1:e9f9bca:                   "(scope.share.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:1869a9f:                 ")");
1:e9f9bca:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:1869a9f:         if (packagePolicies == null) {
1:1869a9f:             packagePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE,packagePolicies);
1:1869a9f:         }
1:e9f9bca:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:e9f9bca:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:1869a9f:         if (servicePolicies == null) {
1:1869a9f:             servicePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put("scope.share.service", servicePolicies);
1:1869a9f:         }
1:e9f9bca:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, "scope.share.service", filter2));
1:1869a9f: 
1:1869a9f: 
1:1869a9f:         // build up installInfo object for the scope
1:9c15542:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
1:1869a9f: 
1:1869a9f:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:1869a9f:         bundlesToInstall.add(info2);
1:1869a9f:         
1:1869a9f:         // add bundles to be installed, based on subsystem content
1:1869a9f:         su.commit();
1:1869a9f:         
1:1869a9f:         // start all bundles in the scope scope_test3
1:e9f9bca:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
1:1869a9f:         for (Bundle b : bundlesToStart) {
1:1869a9f:             try {
1:1869a9f:                 b.start();
1:1869a9f:             } catch (Exception ex) {
1:e9f9bca:             	ex.printStackTrace();
1:1869a9f:                 fail("should be able to start helloIsolationRef in scope_test1");
1:1869a9f:             }
1:1869a9f:             
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         /*  // install helloIsolationRef in root scope
1:9c15542:         URL url1 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT");
1:1869a9f:         Bundle helloIsolationRef = bundleContext.installBundle("helloIsolationRef1-rootScope", url1.openStream());
1:1869a9f:    
1:1869a9f:         try {
1:1869a9f:             helloIsolationRef.start();
1:1869a9f:         } catch (Exception ex) {
1:1869a9f:             fail("should be able to start helloIsolationRef");
1:1869a9f:         }*/
1:1869a9f:         
1:1869a9f:         // remove child scope - cleanup
1:5bdb2b8:         su = scope.newScopeUpdate();
1:e9f9bca:         Collection<ScopeUpdate> scopes = su.getChildren();
1:e9f9bca:         scopes.clear();
1:e9f9bca: //        scopes.add(scope1);
1:e9f9bca: //        scopes.add(scope2);
1:e9f9bca: //        scopes.add(scope3);
1:1869a9f:         su.commit();
1:5bdb2b8:         assertTrue(scope.getChildren().isEmpty());
1:5bdb2b8:         assertTrue(scope.newScopeUpdate().getChildren().isEmpty());
1:1869a9f:     }
1:1869a9f:     
1:6f4b079: //    @org.ops4j.pax.exam.junit.Configuration
1:6f4b079: //    public static Option[] configuration() {
1:6f4b079: //        Option[] options = options(
1:6f4b079: //            // Log
1:6f4b079: //            mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
1:6f4b079: //            mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
1:6f4b079: //            // Felix Config Admin
1:6f4b079: //            mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
1:6f4b079: //            // Felix mvn url handler
1:6f4b079: //            mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1:6f4b079: //
1:6f4b079: //
1:6f4b079: //            // this is how you set the default log level when using pax logging (logProfile)
1:6f4b079: //            systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1:6f4b079: //
1:6f4b079: //            // Bundles
1:6f4b079: //            mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
1:6f4b079: //            mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
1:6f4b079: //            mavenBundle("org.apache.aries", "org.apache.aries.util"),
1:6f4b079: //            mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
1:6f4b079: //            mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
1:6f4b079: //            mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.api"),
1:6f4b079: //            mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.api"),
1:6f4b079: //            mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl"),
1:6f4b079: //
1:6f4b079: //            // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1:6f4b079: //
1:6f4b079: //            PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
1:6f4b079: //
1:6f4b079: //            equinox().version("3.7.0.v20110221")
1:6f4b079: //        );
1:6f4b079: //        options = updateOptions(options);
1:6f4b079: //        return options;
1:6f4b079: //    }
1:1869a9f: 
1:5bdb2b8:     private Scope createScope(Scope scope, String scopeName, String loc, String version) throws MalformedURLException, InvalidSyntaxException, BundleException, IOException {
1:5bdb2b8:         ScopeUpdate su = scope.newScopeUpdate();
1:1869a9f:         
1:1869a9f:         ScopeUpdate childScopeUpdate = su.newChild(scopeName);
1:e9f9bca:         su.getChildren().add(childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:e9f9bca:         addPackageImportPolicy("org.osgi.util.tracker", childScopeUpdate);
1:1869a9f:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1:1869a9f:         final Filter filter1 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
1:e9f9bca:                   "(osgi.wiring.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:1869a9f:                   "(version=" + version + ")" +
1:1869a9f:                 ")");
1:1869a9f:         final Filter filter2 = FrameworkUtil.createFilter(
1:1869a9f:                 "(&" + 
1:e9f9bca:                   "(scope.share.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:1869a9f:                 ")");
1:e9f9bca:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:1869a9f:         if (packagePolicies == null) {
1:1869a9f:             packagePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE, packagePolicies);
1:1869a9f:         }
1:e9f9bca:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:e9f9bca:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:1869a9f:         if (servicePolicies == null) {
1:1869a9f:             servicePolicies = new ArrayList<SharePolicy>();
1:e9f9bca:             sharePolicies.put("scope.share.service", servicePolicies);
1:1869a9f:         }
1:e9f9bca:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, "scope.share.service", filter2));
1:1869a9f: 
1:1869a9f: 
1:1869a9f:         // build up installInfo object for the scope
1:e9f9bca:         InstallInfo info1 = new InstallInfo("helloIsolation_" + scopeName, new URL(loc));
1:1869a9f: 
1:1869a9f:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:1869a9f:         bundlesToInstall.add(info1);
1:1869a9f:         
1:1869a9f:         // add bundles to be installed, based on subsystem content
1:1869a9f:         su.commit();
1:1869a9f:         
1:1869a9f:         // start all bundles in the scope scope_test1
1:e9f9bca:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
1:1869a9f:         for (Bundle b : bundlesToStart) {
1:1869a9f:             b.start();
1:1869a9f:         }
1:1869a9f:         
1:1869a9f:         return childScopeUpdate.getScope();
1:1869a9f:     }
1:1869a9f: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5bdb2b8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("scope admin should not be null", scope);
/////////////////////////////////////////////////////////////////////////
1:         ScopeUpdate su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         Collection<Scope> children = scope.getChildren();
/////////////////////////////////////////////////////////////////////////
1:         su = scope.newScopeUpdate();
1: //        Scope childscope = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:         assertEquals(scope, childScopeAdmin.getParent());
1:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:         su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("scope admin should not be null", scope);
1:         ScopeUpdate su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(scope, childScopeAdmin.getParent());
1:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:         su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("scope admin should not be null", scope);
1:         ScopeUpdate su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         su = scope.newScopeUpdate();
1:         assertEquals(scope, childScopeAdmin.getParent());
1:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:         su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         ScopeUpdate su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         su = scope.newScopeUpdate();
1:         assertEquals(scope, childScopeAdmin.getParent());
1:         assertFalse(scope.getChildren().contains(childScopeAdmin));
1:         su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         Scope scope1 = createScope(scope, "scope_test1", 
1:         Scope scope2 = createScope(scope, "scope_test2", 
1:         ScopeUpdate su = scope.newScopeUpdate();
/////////////////////////////////////////////////////////////////////////
1:         su = scope.newScopeUpdate();
1:         assertTrue(scope.getChildren().isEmpty());
1:         assertTrue(scope.newScopeUpdate().getChildren().isEmpty());
/////////////////////////////////////////////////////////////////////////
1:     private Scope createScope(Scope scope, String scopeName, String loc, String version) throws MalformedURLException, InvalidSyntaxException, BundleException, IOException {
1:         ScopeUpdate su = scope.newScopeUpdate();
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: public class ScopeAdminTest extends AbstractTest {
/////////////////////////////////////////////////////////////////////////
1: //    @org.ops4j.pax.exam.junit.Configuration
1: //    public static Option[] configuration() {
1: //        Option[] options = options(
1: //            // Log
1: //            mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
1: //            mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
1: //            // Felix Config Admin
1: //            mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
1: //            // Felix mvn url handler
1: //            mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: //
1: //
1: //            // this is how you set the default log level when using pax logging (logProfile)
1: //            systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: //
1: //            // Bundles
1: //            mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
1: //            mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
1: //            mavenBundle("org.apache.aries", "org.apache.aries.util"),
1: //            mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
1: //            mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
1: //            mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.api"),
1: //            mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.api"),
1: //            mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl"),
1: //
1: //            // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: //
1: //            PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
1: //
1: //            equinox().version("3.7.0.v20110221")
1: //        );
1: //        options = updateOptions(options);
1: //        return options;
1: //    }
commit:9c15542
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT"));
1:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:     @Ignore
/////////////////////////////////////////////////////////////////////////
1:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT"));
1:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:         URL url1 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT");
/////////////////////////////////////////////////////////////////////////
1:         URL url2 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT");
/////////////////////////////////////////////////////////////////////////
1:     @Ignore
/////////////////////////////////////////////////////////////////////////
1:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT"));
1:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:         URL url1 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT");
/////////////////////////////////////////////////////////////////////////
1:         URL url1 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT");
/////////////////////////////////////////////////////////////////////////
1:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:     @Ignore
/////////////////////////////////////////////////////////////////////////
1:                 "mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT",
1:                 "mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolation/0.1-SNAPSHOT",
/////////////////////////////////////////////////////////////////////////
1:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:         URL url1 = new URL("mvn:org.apache.aries.subsystem/org.apache.aries.subsystem.example.helloIsolationRef/0.1-SNAPSHOT");
commit:e9f9bca
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
1: import static org.junit.Assert.assertFalse;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleRevision;
/////////////////////////////////////////////////////////////////////////
0:         Scope scopeAdmin = getOsgiService(Scope.class);
/////////////////////////////////////////////////////////////////////////
1:         su.getChildren().add(childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.util.tracker", childScopeUpdate);
0:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.4-SNAPSHOT"));
0:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
/////////////////////////////////////////////////////////////////////////
0:         Collection<Scope> children = scopeAdmin.getChildren();
/////////////////////////////////////////////////////////////////////////
1: //        Collection<Scope> scopes = su.getToBeRemovedChildren();
1:         Collection<ScopeUpdate> scopes = su.getChildren();
1:         childScopeUpdate = scopes.iterator().next();
1: //        String filter = "ScopeName=scope_test1";
1: //        Scope childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:         Scope childScopeAdmin = childScopeUpdate.getScope();
0:         assertEquals(scopeAdmin, childScopeAdmin.getParent());
1: //        scopes.add(childScopeAdmin);
1:         scopes.remove(childScopeUpdate);
0:         assertFalse(scopeAdmin.getChildren().contains(childScopeAdmin));
0:         su = scopeAdmin.newScopeUpdate();
1:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:         
1: //        childScopeAdmin = null;
1: //        try {
1: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1: //        } catch (Exception ex) {
1: //            // ignore
1: //        }
1: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
0:         Scope scopeAdmin = getOsgiService(Scope.class);
1:         su.getChildren().add(childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.util.tracker", childScopeUpdate);
0:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.4-SNAPSHOT"));
0:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
/////////////////////////////////////////////////////////////////////////
1: //        Collection<Scope> scopes = su.getToBeRemovedChildren();
1:         Collection<ScopeUpdate> scopes = su.getChildren();
1:         childScopeUpdate = scopes.iterator().next();
1: //        String filter = "ScopeName=scope_test1";
0: //        Scope childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1:         Scope childScopeAdmin = childScopeUpdate.getScope();
0:         assertEquals(scopeAdmin, childScopeAdmin.getParent());
1: //        scopes.add(childScopeAdmin);
1:         scopes.remove(childScopeUpdate);
0:         assertFalse(scopeAdmin.getChildren().contains(childScopeAdmin));
0:         su = scopeAdmin.newScopeUpdate();
1:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:         
1: //        childScopeAdmin = null;
1: //        try {
1: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1: //        } catch (Exception ex) {
1: //            // ignore
1: //        }
1: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
/////////////////////////////////////////////////////////////////////////
0:         Scope scopeAdmin = getOsgiService(Scope.class);
1:         su.getChildren().add(childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.util.tracker", childScopeUpdate);
1:                   "(osgi.wiring.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                   "(scope.share.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE, packagePolicies);
1:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:             sharePolicies.put("scope.share.service", servicePolicies);
1:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, "scope.share.service", filter2));
0:         InstallInfo info1 = new InstallInfo("helloIsolation", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.4-SNAPSHOT"));
0:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
/////////////////////////////////////////////////////////////////////////
1:         Collection<ScopeUpdate> scopes = su.getChildren();
1:         childScopeUpdate = scopes.iterator().next();
1: //        String filter = "ScopeName=scope_test1";
1:         Scope childScopeAdmin = childScopeUpdate.getScope();
0:         assertEquals(scopeAdmin, childScopeAdmin.getParent());
1:         scopes.remove(childScopeUpdate);
0:         assertFalse(scopeAdmin.getChildren().contains(childScopeAdmin));
0:         su = scopeAdmin.newScopeUpdate();
1:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:         
1: //        childScopeAdmin = null;
1: //        try {
1: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1: //        } catch (Exception ex) {
1: //            // ignore
1: //        }
1: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
/////////////////////////////////////////////////////////////////////////
0:         Scope scopeAdmin = getOsgiService(Scope.class);
1:         su.getChildren().add(childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:                   "(osgi.wiring.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                   "(scope.share.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE,packagePolicies);
1:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:             sharePolicies.put("scope.share.service", servicePolicies);
1:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, "scope.share.service", filter2));
0:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
1:             	ex.printStackTrace();
/////////////////////////////////////////////////////////////////////////
1:         Collection<ScopeUpdate> scopes = su.getChildren();
1:         childScopeUpdate = scopes.iterator().next();
1: //        String filter = "ScopeName=scope_test1";
1:         Scope childScopeAdmin = childScopeUpdate.getScope();
0:         assertEquals(scopeAdmin, childScopeAdmin.getParent());
1:         scopes.remove(childScopeUpdate);
0:         assertFalse(scopeAdmin.getChildren().contains(childScopeAdmin));
0:         su = scopeAdmin.newScopeUpdate();
1:         assertFalse(su.getChildren().contains(childScopeUpdate));
1:         
1: //        childScopeAdmin = null;
1: //        try {
1: //            childScopeAdmin = getOsgiService(Scope.class, filter, DEFAULT_TIMEOUT);
1: //        } catch (Exception ex) {
1: //            // ignore
1: //        }
1: //        assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
/////////////////////////////////////////////////////////////////////////
0:         Scope scopeAdmin = getOsgiService(Scope.class);
0:                 "mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.4-SNAPSHOT",
/////////////////////////////////////////////////////////////////////////
1:         su.getChildren().add(childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
/////////////////////////////////////////////////////////////////////////
1:                   "(osgi.wiring.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                   "(scope.share.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE,packagePolicies);
1:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:             sharePolicies.put("scope.share.service", servicePolicies);
1:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, "scope.share.service", filter2));
0:         InstallInfo info2 = new InstallInfo("helloIsolationRef", new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.4-SNAPSHOT"));
/////////////////////////////////////////////////////////////////////////
1:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
1:             	ex.printStackTrace();
/////////////////////////////////////////////////////////////////////////
1:         Collection<ScopeUpdate> scopes = su.getChildren();
1:         scopes.clear();
1: //        scopes.add(scope1);
1: //        scopes.add(scope2);
1: //        scopes.add(scope3);
0:         assertTrue(scopeAdmin.getChildren().isEmpty());
0:         assertTrue(scopeAdmin.newScopeUpdate().getChildren().isEmpty());
/////////////////////////////////////////////////////////////////////////
0:             // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0:             equinox().version("3.7.0.v20110221")
0:     private Scope createScope(Scope scopeAdmin, String scopeName, String loc, String version) throws MalformedURLException, InvalidSyntaxException, BundleException, IOException {
1:         su.getChildren().add(childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.framework", childScopeUpdate);
1:         addPackageImportPolicy("org.osgi.util.tracker", childScopeUpdate);
1:                   "(osgi.wiring.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                   "(scope.share.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:         List<SharePolicy> packagePolicies = sharePolicies.get(BundleRevision.PACKAGE_NAMESPACE);
1:             sharePolicies.put(BundleRevision.PACKAGE_NAMESPACE, packagePolicies);
1:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, BundleRevision.PACKAGE_NAMESPACE, filter1));
1:         List<SharePolicy> servicePolicies = sharePolicies.get("scope.share.service");
1:             sharePolicies.put("scope.share.service", servicePolicies);
1:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, "scope.share.service", filter2));
1:         InstallInfo info1 = new InstallInfo("helloIsolation_" + scopeName, new URL(loc));
/////////////////////////////////////////////////////////////////////////
1:         Collection<Bundle> bundlesToStart = childScopeUpdate.getScope().getBundles();
commit:c83680a
/////////////////////////////////////////////////////////////////////////
0:             equinox().version("3.7.0.v20101022")
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:ba3e773
/////////////////////////////////////////////////////////////////////////
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-SNAPSHOT"), "helloIsolationRef");
/////////////////////////////////////////////////////////////////////////
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-SNAPSHOT"), "helloIsolationRef");
/////////////////////////////////////////////////////////////////////////
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-SNAPSHOT"), "helloIsolationRef");
/////////////////////////////////////////////////////////////////////////
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-SNAPSHOT"), "helloIsolationRef");
/////////////////////////////////////////////////////////////////////////
0:                 "mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-SNAPSHOT",
/////////////////////////////////////////////////////////////////////////
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-SNAPSHOT"), "helloIsolationRef");
author:Lin Sun
-------------------------------------------------------------------------------
commit:1869a9f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
0: import java.io.FileOutputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.example.helloIsolation.HelloIsolation;
1: import org.apache.aries.subsystem.scope.InstallInfo;
1: import org.apache.aries.subsystem.scope.Scope;
0: import org.apache.aries.subsystem.scope.ScopeAdmin;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.apache.aries.subsystem.scope.SharePolicy;
0: import org.apache.aries.subsystem.scope.impl.ScopeAdminServiceFactory;
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
0: import org.osgi.framework.wiring.Capability;
1: import org.osgi.util.tracker.BundleTracker;
1: import org.osgi.util.tracker.BundleTrackerCustomizer;
1: 
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class ScopeAdminTest extends AbstractIntegrationTest {
1: 
1:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:      * are created in the paxweb temp directory, and not in the svn tree 
1:      */
1:     static boolean createdApplications = false;
1:     BundleTracker bt;
1:     int addEventCount;
1:     int modifyEventCount;
1:     int removeEventCount;
1:     
1:     @After
1:     public void tearDown() throws Exception {
1:         if (bt != null) {
1:             bt.close();
1:         }
1:     }
1:     
1:     @Test
1:     public void testBundleServiceIsolation() throws Exception {
1:         // make sure we are using a framework that provides composite admin service
0:         ScopeAdmin scopeAdmin = getOsgiService(ScopeAdmin.class);
0:         assertNotNull("scope admin should not be null", scopeAdmin);
1:         System.out.println("able to get scope admin service");
1: 
1:         bt = new BundleTracker(bundleContext, Bundle.INSTALLED | Bundle.UNINSTALLED | Bundle.ACTIVE, new BundleTrackerCustomizer() {
1: 
1:             public synchronized Object addingBundle(Bundle bundle, BundleEvent event) {
1:                 if (event == null) {
1:                     System.out.println("ScopeAdminTest - adding Bundle: " + bundle.getSymbolicName() + " event: null");
1:                 } else {
1:                     System.out.println("ScopeAdminTest - adding Bundle: " + bundle.getSymbolicName() + " event: " + event.getType());
1:                     addEventCount++;
1:                 }
1:                 return bundle;
1:             }
1: 
1:             public synchronized void modifiedBundle(Bundle bundle, BundleEvent event,
1:                     Object object) {
1:                 if (event == null) {
1:                     System.out.println("ScopeAdminTest - modifying Bundle: " + bundle.getSymbolicName() + " event: null");
1:                 } else {
1:                     System.out.println("ScopeAdminTest - modifying Bundle: " + bundle.getSymbolicName() + " event: " + event.getType());
1:                     modifyEventCount++;
1:                 }
1:                 
1:                 
1:             }
1: 
1:             public synchronized void removedBundle(Bundle bundle, BundleEvent event,
1:                     Object object) {
1:                 if (event == null) {
1:                     System.out.println("ScopeAdminTest - removing Bundle: " + bundle.getSymbolicName() + " event: null");
1:                 } else {
1:                     System.out.println("ScopeAdminTest - removing Bundle: " + bundle.getSymbolicName() + " event: " + event.getType());
1:                     removeEventCount++;
1:                 }
1:             }
1:             
1:         });
1:         bt.open();
1:         
0:         ScopeUpdate su = scopeAdmin.newScopeUpdate();
1:         
1:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:         
1:         // build up installInfo object for the scope
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-incubating-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-incubating-SNAPSHOT"), "helloIsolationRef");
1: 
1:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:         bundlesToInstall.add(info1);
1:         bundlesToInstall.add(info2);
1:         
1:         // add bundles to be installed, based on subsystem content
1:         su.commit();
1:         
1:         assertEquals("add event count should be 0 since 0 bundles are installed in root scope", 0, addEventCount);
1:         assertEquals("modify event count should be 0", 0, modifyEventCount);
1:         assertEquals("remove event count should be 0", 0, removeEventCount);
1:         // start all bundles in the scope scope_test1
0:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:         for (Bundle b : bundlesToStart) {
1:             b.start();
1:             
1:         }
1:         
1:         assertEquals("add event count should be 0 since 0 bundles are installed in root scope", 0, addEventCount);
1:         assertEquals("modify event count should be 0", 0, modifyEventCount);
1:         assertEquals("remove event count should be 0", 0, removeEventCount);
1:         
1:         try {
1:             ServiceReference sr = bundleContext.getServiceReference(HelloIsolation.class.getName());
1:             fail("should not be able to get the sr for HelloIsolation service");
1:         } catch (Exception ex) {
1:             // expected 
1:         } catch (Error er) {
1:             // expected
1:         }
1:         
1:         // test bundle find hooks
1:         Bundle[] bundles = bundleContext.getBundles();
1:         for (Bundle b : bundles) {
1:             System.out.println("Bundle is " + b.getBundleId() + ": " + b.getSymbolicName());
1:             if (b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1) {
1:                 fail("bundles with name starts with org.apache.aries.subsystem.example.helloIsolation should be in a different scope");
1:             }
1:         }
1:         
1:         // test bundle service find hook
1:         //ServiceReference sr = bundleContext.getServiceReference(HelloIsolation.class.getName());
1:         //assertNull("sr should be null", sr);
0:         Collection<Scope> children = scopeAdmin.getScope().getChildren();
1:         assertEquals(1, children.size());
1:         
1:         for (Scope child : children) {
1:             if (child.getName().equals("scope_test1")) {
1:                 Collection<Bundle> buns = child.getBundles();
1:                 assertEquals(2, buns.size());
1:                 assertEquals(0, child.getChildren().size());
1:                 for (Bundle b : buns) {
1:                     assertTrue(b.getSymbolicName().indexOf("org.apache.aries.subsystem.example.helloIsolation") > -1);
1:                 }
1:                 
1:             }
1:         }
1:         
1:         // install a test bundle in the root scope
1:         URL url = new URL("mvn:org.apache.felix/org.apache.felix.fileinstall/2.0.8");
1:         bundleContext.installBundle("org.apache.felix.fileinstall-rootScope", url.openStream());
1:         assertEquals("add event count should be 1 since 1 bundles are installed", 1, addEventCount);
1:         assertEquals("modify event count should be 0", 0, modifyEventCount);
1:         assertEquals("remove event count should be 0", 0, removeEventCount);
1:         
1:         
1:         // remove child scope
0:         su = scopeAdmin.newScopeUpdate();
0:         Collection<Scope> scopes = su.getToBeRemovedChildren();
1:         
1:         // obtain child scope admin from service registry
0:         String filter = "ScopeName=scope_test1";
0:         ScopeAdmin childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
0:         assertEquals(scopeAdmin.getScope(), childScopeAdmin.getParentScope());
0:         scopes.add(childScopeAdmin.getScope());
1:         su.commit();
1:         
0:         childScopeAdmin = null;
1:         try {
0:             childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
1:         } catch (Exception ex) {
0:             // ignore
1:         }
0:         assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:         
1:     }
1:     
1:     @Test
1:     public void testPackageIsolation() throws Exception {
1:         // make sure we are using a framework that provides composite admin service
0:         ScopeAdmin scopeAdmin = getOsgiService(ScopeAdmin.class);
0:         assertNotNull("scope admin should not be null", scopeAdmin);
1:         System.out.println("able to get scope admin service");
1: 
0:         ScopeUpdate su = scopeAdmin.newScopeUpdate();
1:         
1:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:         
1:         // build up installInfo object for the scope
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-incubating-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-incubating-SNAPSHOT"), "helloIsolationRef");
1: 
1:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:         bundlesToInstall.add(info1);
1:         bundlesToInstall.add(info2);
1:         
1:         // add bundles to be installed, based on subsystem content
1:         su.commit();
1:         
1:         // start all bundles in the scope scope_test1
0:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:         for (Bundle b : bundlesToStart) {
1:             b.start();
1:             
1:         }
1:         
1:         // install helloIsolationRef1 bundle in the root scope
0:         URL url1 = new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/1.0.0");
1:         Bundle helloIsolationRef = bundleContext.installBundle("helloIsolationRef1-rootScope", url1.openStream());
1:    
1:         try {
1:             helloIsolationRef.start();
1:             fail("should not be able to start helloIsolationRef since missing import packages");
1:         } catch (Exception ex) {
1:             // expect resolving error
1:         }
1:         
0:         URL url2 = new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/1.0.0");
1:         Bundle helloIsolation = bundleContext.installBundle("helloIsolation1-rootScope", url2.openStream());
1:  
1:         helloIsolation.start();
1:         
1:         // should be able to start the bundle now.
1:         helloIsolationRef.start();
1:                
1:         // remove helloIsolationRef & helloIsolation
1:         helloIsolationRef.uninstall();
1:         helloIsolation.uninstall();
1:         
1:         // remove child scope
0:         su = scopeAdmin.newScopeUpdate();
0:         Collection<Scope> scopes = su.getToBeRemovedChildren();
1:         
1:         // obtain child scope admin from service registry
0:         String filter = "ScopeName=scope_test1";
0:         ScopeAdmin childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
0:         assertEquals(scopeAdmin.getScope(), childScopeAdmin.getParentScope());
0:         scopes.add(childScopeAdmin.getScope());
1:         su.commit();
1:         
0:         childScopeAdmin = null;
1:         try {
0:             childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
1:         } catch (Exception ex) {
0:             // ignore
1:         }
0:         assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:         
1:     }
1:     
1:     // test sharing the helloIsolation package from the test scope.
1:     @Test
1:     public void testPackageSharingFromTestScope() throws Exception {
1:         // make sure we are using a framework that provides composite admin service
0:         ScopeAdmin scopeAdmin = getOsgiService(ScopeAdmin.class);
0:         assertNotNull("scope admin should not be null", scopeAdmin);
1:         System.out.println("able to get scope admin service");
1: 
0:         ScopeUpdate su = scopeAdmin.newScopeUpdate();
1:         
1:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:         
1:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1:         final Filter filter1 = FrameworkUtil.createFilter(
1:                 "(&" + 
1:                   "(osgi.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                 ")");
1:         final Filter filter2 = FrameworkUtil.createFilter(
1:                 "(&" + 
0:                   "(osgi.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:                 ")");
0:         List<SharePolicy> packagePolicies = sharePolicies.get(Capability.PACKAGE_CAPABILITY);
1:         if (packagePolicies == null) {
1:             packagePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(Capability.PACKAGE_CAPABILITY, packagePolicies);
1:         }
0:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, Capability.PACKAGE_CAPABILITY, filter1));
0:         List<SharePolicy> servicePolicies = sharePolicies.get(ScopeAdminServiceFactory.SERVICE_CAPABILITY);
1:         if (servicePolicies == null) {
1:             servicePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(ScopeAdminServiceFactory.SERVICE_CAPABILITY, servicePolicies);
1:         }
0:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, ScopeAdminServiceFactory.SERVICE_CAPABILITY, filter2));
1: 
1: 
1:         // build up installInfo object for the scope
0:         InstallInfo info1 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-incubating-SNAPSHOT"), "helloIsolation");
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-incubating-SNAPSHOT"), "helloIsolationRef");
1: 
1:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:         bundlesToInstall.add(info1);
1:         bundlesToInstall.add(info2);
1:         
1:         // add bundles to be installed, based on subsystem content
1:         su.commit();
1:         
1:         // start all bundles in the scope scope_test1
0:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:         for (Bundle b : bundlesToStart) {
1:             b.start();
1:             
1:         }
1:         
1:         // install helloIsolationRef1 bundle in the root scope
0:         URL url1 = new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/1.0.0");
1:         Bundle helloIsolationRef = bundleContext.installBundle("helloIsolationRef1-rootScope", url1.openStream());
1:    
1:         try {
1:             helloIsolationRef.start();
1:         } catch (Exception ex) {
1:             fail("should be able to start helloIsolationRef by import packages from scope_test1");
1:         }
1:         
1:         // remove helloIsolationRef
1:         helloIsolationRef.uninstall();
1:         // remove child scope
0:         su = scopeAdmin.newScopeUpdate();
0:         Collection<Scope> scopes = su.getToBeRemovedChildren();
1:         
1:         // obtain child scope admin from service registry
0:         String filter = "ScopeName=scope_test1";
0:         ScopeAdmin childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
0:         assertEquals(scopeAdmin.getScope(), childScopeAdmin.getParentScope());
0:         scopes.add(childScopeAdmin.getScope());
1:         su.commit();
1:         
0:         childScopeAdmin = null;
1:         try {
0:             childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
1:         } catch (Exception ex) {
0:             // ignore
1:         }
0:         assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:         
1:     }
1: 
1:     // test sharing the helloIsolation package & service from the root scope.
1:     @Test
1:     public void testPackageSharingFromRootScope() throws Exception {
1:         // install helloIsolationRef1 bundle in the root scope
0:         URL url1 = new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/1.0.0");
1:         Bundle helloIsolation = bundleContext.installBundle("helloIsolation1-rootScope", url1.openStream());
1:    
1:         try {
1:             helloIsolation.start();
1:         } catch (Exception ex) {
1:             fail("should be able to start helloIsolation");
1:         }
1:         
1:         // make sure we are using a framework that provides composite admin service
0:         ScopeAdmin scopeAdmin = getOsgiService(ScopeAdmin.class);
0:         assertNotNull("scope admin should not be null", scopeAdmin);
1:         System.out.println("able to get scope admin service");
1: 
0:         ScopeUpdate su = scopeAdmin.newScopeUpdate();
1:         
1:         ScopeUpdate childScopeUpdate = su.newChild("scope_test1");
1:         
1:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_IMPORT);
1:         final Filter filter1 = FrameworkUtil.createFilter(
1:                 "(&" + 
1:                   "(osgi.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                 ")");
1:         final Filter filter2 = FrameworkUtil.createFilter(
1:                 "(&" + 
0:                   "(osgi.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:                 ")");
0:         List<SharePolicy> packagePolicies = sharePolicies.get(Capability.PACKAGE_CAPABILITY);
1:         if (packagePolicies == null) {
1:             packagePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(Capability.PACKAGE_CAPABILITY,packagePolicies);
1:         }
0:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, Capability.PACKAGE_CAPABILITY, filter1));
0:         List<SharePolicy> servicePolicies = sharePolicies.get(ScopeAdminServiceFactory.SERVICE_CAPABILITY);
1:         if (servicePolicies == null) {
1:             servicePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(ScopeAdminServiceFactory.SERVICE_CAPABILITY, servicePolicies);
1:         }
0:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, ScopeAdminServiceFactory.SERVICE_CAPABILITY, filter2));
1: 
1: 
1:         // build up installInfo object for the scope
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-incubating-SNAPSHOT"), "helloIsolationRef");
1: 
1:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:         bundlesToInstall.add(info2);
1:         
1:         // add bundles to be installed, based on subsystem content
1:         su.commit();
1:         
1:         // start all bundles in the scope scope_test1
0:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:         for (Bundle b : bundlesToStart) {
1:             try {
1:                 b.start();
1:             } catch (Exception ex) {
1:                 fail("should be able to start helloIsolationRef in scope_test1");
1:             }
1:             
1:         }
1:  
1:         // remove helloIsolation in root scope
1:         helloIsolation.uninstall();
1:         
1:         // remove child scope
0:         su = scopeAdmin.newScopeUpdate();
0:         Collection<Scope> scopes = su.getToBeRemovedChildren();
1:         
1:         // obtain child scope admin from service registry
0:         String filter = "ScopeName=scope_test1";
0:         ScopeAdmin childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
0:         assertEquals(scopeAdmin.getScope(), childScopeAdmin.getParentScope());
0:         scopes.add(childScopeAdmin.getScope());
1:         su.commit();
1:         
0:         childScopeAdmin = null;
1:         try {
0:             childScopeAdmin = getOsgiService(ScopeAdmin.class, filter, DEFAULT_TIMEOUT);
1:         } catch (Exception ex) {
0:             // ignore
1:         }
0:         assertNull("scope admin service for the scope should be unregistered", childScopeAdmin);
1:     }
1:     
1:     // test ability to select the helloIsolation package from which scope it wants to use
1:     // not necessarily the highest version one by default.
1:     @Test
1:     public void testScopeAffinity() throws Exception {
1:         // make sure we are using a framework that provides composite admin service
0:         ScopeAdmin scopeAdmin = getOsgiService(ScopeAdmin.class);
0:         assertNotNull("scope admin should not be null", scopeAdmin);
1:         System.out.println("able to get scope admin service");
1: 
1:         // install helloIsolation 0.3 in scope_test1
0:         Scope scope1 = createScope(scopeAdmin, "scope_test1", 
0:                 "mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/0.3-incubating-SNAPSHOT",
1:                 "0.3");
1:         
1:         // install helloIsolation 2.0 in scope_test2
0:         Scope scope2 = createScope(scopeAdmin, "scope_test2", 
0:                 "mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolation/2.0.0",
1:                 "2.0");
1:         
1:         // install helloIsolationRef 2.0 in scope_test3
0:         ScopeUpdate su = scopeAdmin.newScopeUpdate();
1:         
1:         ScopeUpdate childScopeUpdate = su.newChild("scope_test3");
1:         Scope scope3 = childScopeUpdate.getScope();
1:         
1:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_IMPORT);
1:         /*final Filter filter1 = FrameworkUtil.createFilter(
1:                 "(&" + 
1:                   "(osgi.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                   "(bundle-symbolic-name=org.apache.aries.subsystem.example.helloIsolation)" + 
1:                   "(bundle-version<=1.1)" + 
1:                 ")");*/
1:         final Filter filter1 = FrameworkUtil.createFilter(
1:                 "(&" + 
1:                   "(osgi.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                   //"(scopeName=scope_test1)" +  
1:                 ")");
1:         final Filter filter2 = FrameworkUtil.createFilter(
1:                 "(&" + 
0:                   "(osgi.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:                 ")");
0:         List<SharePolicy> packagePolicies = sharePolicies.get(Capability.PACKAGE_CAPABILITY);
1:         if (packagePolicies == null) {
1:             packagePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(Capability.PACKAGE_CAPABILITY,packagePolicies);
1:         }
0:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, Capability.PACKAGE_CAPABILITY, filter1));
0:         List<SharePolicy> servicePolicies = sharePolicies.get(ScopeAdminServiceFactory.SERVICE_CAPABILITY);
1:         if (servicePolicies == null) {
1:             servicePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(ScopeAdminServiceFactory.SERVICE_CAPABILITY, servicePolicies);
1:         }
0:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_IMPORT, ScopeAdminServiceFactory.SERVICE_CAPABILITY, filter2));
1: 
1: 
1:         // build up installInfo object for the scope
0:         InstallInfo info2 = new InstallInfo(new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/0.3-incubating-SNAPSHOT"), "helloIsolationRef");
1: 
1:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:         bundlesToInstall.add(info2);
1:         
1:         // add bundles to be installed, based on subsystem content
1:         su.commit();
1:         
1:         // start all bundles in the scope scope_test3
0:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:         for (Bundle b : bundlesToStart) {
1:             try {
1:                 b.start();
1:             } catch (Exception ex) {
1:                 fail("should be able to start helloIsolationRef in scope_test1");
1:             }
1:             
1:         }
1:         
1:         /*  // install helloIsolationRef in root scope
0:         URL url1 = new URL("mvn:org.apache.aries.subsystem.example/org.apache.aries.subsystem.example.helloIsolationRef/1.0.0");
1:         Bundle helloIsolationRef = bundleContext.installBundle("helloIsolationRef1-rootScope", url1.openStream());
1:    
1:         try {
1:             helloIsolationRef.start();
1:         } catch (Exception ex) {
1:             fail("should be able to start helloIsolationRef");
1:         }*/
1:         
1:         // remove child scope - cleanup
0:         su = scopeAdmin.newScopeUpdate();
0:         Collection<Scope> scopes = su.getToBeRemovedChildren();
0:         scopes.add(scope1);
0:         scopes.add(scope2);
0:         scopes.add(scope3);
1:         su.commit();
1:         
1:     }
1:     
0:     @org.ops4j.pax.exam.junit.Configuration
0:     public static Option[] configuration() {
0:         Option[] options = options(
0:             // Log
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:             // Felix Config Admin
0:             mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:             // Felix mvn url handler
0:             mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
1: 
1: 
0:             // this is how you set the default log level when using pax logging (logProfile)
0:             systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
0:             // Bundles
0:             mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:             mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:             mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:             mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.api"),
0:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.api"),
0:             mavenBundle("org.apache.aries.subsystem", "org.apache.aries.subsystem.scope.impl"),
1: 
0:             //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 
0:             PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
1: 
0:             equinox().version("3.7.0.v20100910")
0:         );
0:         options = updateOptions(options);
0:         return options;
1:     }
1: 
0:     private Scope createScope(ScopeAdmin scopeAdmin, String scopeName, String loc, String version) throws MalformedURLException, InvalidSyntaxException, BundleException {
0:         ScopeUpdate su = scopeAdmin.newScopeUpdate();
1:         
1:         ScopeUpdate childScopeUpdate = su.newChild(scopeName);
1:         
1:         Map<String, List<SharePolicy>> sharePolicies = childScopeUpdate.getSharePolicies(SharePolicy.TYPE_EXPORT);
1:         final Filter filter1 = FrameworkUtil.createFilter(
1:                 "(&" + 
1:                   "(osgi.package=org.apache.aries.subsystem.example.helloIsolation)" +
1:                   "(version=" + version + ")" +
1:                 ")");
1:         final Filter filter2 = FrameworkUtil.createFilter(
1:                 "(&" + 
0:                   "(osgi.service=org.apache.aries.subsystem.example.helloIsolation.HelloIsolation)" +
1:                 ")");
0:         List<SharePolicy> packagePolicies = sharePolicies.get(Capability.PACKAGE_CAPABILITY);
1:         if (packagePolicies == null) {
1:             packagePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(Capability.PACKAGE_CAPABILITY, packagePolicies);
1:         }
0:         packagePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, Capability.PACKAGE_CAPABILITY, filter1));
0:         List<SharePolicy> servicePolicies = sharePolicies.get(ScopeAdminServiceFactory.SERVICE_CAPABILITY);
1:         if (servicePolicies == null) {
1:             servicePolicies = new ArrayList<SharePolicy>();
0:             sharePolicies.put(ScopeAdminServiceFactory.SERVICE_CAPABILITY, servicePolicies);
1:         }
0:         servicePolicies.add(new SharePolicy(SharePolicy.TYPE_EXPORT, ScopeAdminServiceFactory.SERVICE_CAPABILITY, filter2));
1: 
1: 
1:         // build up installInfo object for the scope
0:         InstallInfo info1 = new InstallInfo(new URL(loc), "helloIsolation_" + scopeName);
1: 
1:         List<InstallInfo> bundlesToInstall = childScopeUpdate.getBundlesToInstall();
1:         bundlesToInstall.add(info1);
1:         
1:         // add bundles to be installed, based on subsystem content
1:         su.commit();
1:         
1:         // start all bundles in the scope scope_test1
0:         Collection<Bundle> bundlesToStart = childScopeUpdate.getBundles();
1:         for (Bundle b : bundlesToStart) {
1:             b.start();
1:         }
1:         
1:         return childScopeUpdate.getScope();
1:     }
1: }
============================================================================