1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:ef9eace: package org.apache.aries.tx.control.jdbc.local.impl;
1:ef9eace: 
1:08d0d7a: import static java.util.Optional.ofNullable;
1:ef9eace: import static java.util.concurrent.TimeUnit.HOURS;
1:ef9eace: import static java.util.concurrent.TimeUnit.SECONDS;
1:ef9eace: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_URL;
1:ef9eace: 
1:ef9eace: import java.sql.Driver;
1:ef9eace: import java.sql.SQLException;
1:ef9eace: import java.util.Map;
1:ef9eace: import java.util.Properties;
1:ef9eace: import java.util.concurrent.TimeUnit;
1:ef9eace: 
1:ef9eace: import javax.sql.DataSource;
1:ef9eace: import javax.sql.XADataSource;
1:ef9eace: 
1:2906477: import org.apache.aries.tx.control.jdbc.common.impl.AbstractJDBCConnectionProvider;
1:ef9eace: import org.apache.aries.tx.control.jdbc.common.impl.DriverDataSource;
1:2906477: import org.apache.aries.tx.control.jdbc.common.impl.InternalJDBCConnectionProviderFactory;
1:ef9eace: import org.osgi.service.jdbc.DataSourceFactory;
1:ef9eace: import org.osgi.service.transaction.control.TransactionException;
1:ef9eace: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1:ef9eace: 
1:ef9eace: import com.zaxxer.hikari.HikariConfig;
1:ef9eace: import com.zaxxer.hikari.HikariDataSource;
1:ef9eace: 
1:2906477: public class JDBCConnectionProviderFactoryImpl implements JDBCConnectionProviderFactory, InternalJDBCConnectionProviderFactory {
1:ef9eace: 
1:ef9eace: 	@Override
1:2906477: 	public AbstractJDBCConnectionProvider getProviderFor(DataSourceFactory dsf, Properties jdbcProperties,
1:ef9eace: 			Map<String, Object> resourceProviderProperties) {
1:ef9eace: 
1:ef9eace: 		checkEnlistment(resourceProviderProperties);
1:ef9eace: 
1:ef9eace: 		DataSource unpooled;
1:ef9eace: 		try {
1:08d0d7a: 			if (toBoolean(resourceProviderProperties, USE_DRIVER, false)) {
1:ef9eace: 				unpooled = new DriverDataSource(dsf.createDriver(null), jdbcProperties.getProperty(JDBC_URL),
1:ef9eace: 						jdbcProperties);
1:ef9eace: 			} else {
1:ef9eace: 				unpooled = dsf.createDataSource(jdbcProperties);
1:ef9eace: 			}
1:ef9eace: 		} catch (SQLException sqle) {
1:ef9eace: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1:ef9eace: 		}
1:ef9eace: 
1:ef9eace: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, unpooled);
1:ef9eace: 
1:ef9eace: 		return new JDBCConnectionProviderImpl(toUse);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Override
1:2906477: 	public AbstractJDBCConnectionProvider getProviderFor(DataSource ds, Map<String, Object> resourceProviderProperties) {
1:ef9eace: 		checkEnlistment(resourceProviderProperties);
1:ef9eace: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, ds);
1:ef9eace: 
1:ef9eace: 		return new JDBCConnectionProviderImpl(toUse);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Override
1:2906477: 	public AbstractJDBCConnectionProvider getProviderFor(Driver driver, Properties jdbcProperties, 
1:ef9eace: 			Map<String, Object> resourceProviderProperties) {
1:ef9eace: 		checkEnlistment(resourceProviderProperties);
1:ef9eace: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, 
1:ef9eace: 				new DriverDataSource(driver, jdbcProperties.getProperty(JDBC_URL), jdbcProperties));
1:ef9eace: 		
1:ef9eace: 		return new JDBCConnectionProviderImpl(toUse);
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	@Override
1:2906477: 	public AbstractJDBCConnectionProvider getProviderFor(XADataSource ds, Map<String, Object> resourceProviderProperties) {
1:ef9eace: 		checkEnlistment(resourceProviderProperties);
1:ef9eace: 		
1:ef9eace: 		DataSource unpooled;
1:ef9eace: 		
1:ef9eace: 		if(ds instanceof DataSource) {
1:ef9eace: 			unpooled = (DataSource) ds;
1:ef9eace: 		} else {
1:ef9eace: 			throw new TransactionException("This resource Provider does not support XA transactions, and the supplied XADataSource is not a DataSource");
1:ef9eace: 		}
1:ef9eace: 		
1:ef9eace: 		return new JDBCConnectionProviderImpl(poolIfNecessary(resourceProviderProperties, unpooled));
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	private void checkEnlistment(Map<String, Object> resourceProviderProperties) {
1:08d0d7a: 		if (toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, false)) {
1:ef9eace: 			throw new TransactionException("This Resource Provider does not support XA transactions");
1:08d0d7a: 		} else if (!toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true)) {
1:ef9eace: 			throw new TransactionException(
1:ef9eace: 					"This Resource Provider always enlists in local transactions as it does not support XA");
1:ef9eace: 		}
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: 	private DataSource poolIfNecessary(Map<String, Object> resourceProviderProperties, DataSource unpooled) {
1:ef9eace: 		DataSource toUse;
1:ef9eace: 
1:08d0d7a: 		if (toBoolean(resourceProviderProperties, CONNECTION_POOLING_ENABLED, true)) {
1:ef9eace: 			HikariConfig hcfg = new HikariConfig();
1:ef9eace: 			hcfg.setDataSource(unpooled);
1:ef9eace: 
1:ef9eace: 			// Sizes
1:08d0d7a: 			hcfg.setMaximumPoolSize(toInt(resourceProviderProperties, MAX_CONNECTIONS, 10));
1:08d0d7a: 			hcfg.setMinimumIdle(toInt(resourceProviderProperties, MIN_CONNECTIONS, 10));
1:ef9eace: 
1:ef9eace: 			// Timeouts
1:08d0d7a: 			hcfg.setConnectionTimeout(toLong(resourceProviderProperties, CONNECTION_TIMEOUT, SECONDS.toMillis(30)));
1:08d0d7a: 			hcfg.setIdleTimeout(toLong(resourceProviderProperties, IDLE_TIMEOUT, TimeUnit.MINUTES.toMillis(3)));
1:08d0d7a: 			hcfg.setMaxLifetime(toLong(resourceProviderProperties, CONNECTION_LIFETIME, HOURS.toMillis(3)));
1:ef9eace: 
1:ef9eace: 			toUse = new HikariDataSource(hcfg);
1:ef9eace: 
1:ef9eace: 		} else {
1:ef9eace: 			toUse = unpooled;
1:ef9eace: 		}
1:ef9eace: 		return toUse;
1:ef9eace: 	}
1:ef9eace: 
1:08d0d7a: 	private boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1:08d0d7a: 		Object o =  ofNullable(props)
1:08d0d7a: 			.map(m -> m.get(key))
1:08d0d7a: 			.orElse(defaultValue);
1:08d0d7a: 		
1:ef9eace: 		if (o instanceof Boolean) {
1:ef9eace: 			return ((Boolean) o).booleanValue();
1:08d0d7a: 		} else if(o instanceof String) {
1:ef9eace: 			return Boolean.parseBoolean((String) o);
1:08d0d7a: 		} else {
1:08d0d7a: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1:ef9eace: 		}
1:ef9eace: 	}
1:ef9eace: 
1:08d0d7a: 	private int toInt(Map<String, Object> props, String key, int defaultValue) {
1:08d0d7a: 		
1:08d0d7a: 		Object o =  ofNullable(props)
1:08d0d7a: 				.map(m -> m.get(key))
1:08d0d7a: 				.orElse(defaultValue);
1:08d0d7a: 		
1:ef9eace: 		if (o instanceof Number) {
1:ef9eace: 			return ((Number) o).intValue();
1:08d0d7a: 		} else if(o instanceof String) {
1:ef9eace: 			return Integer.parseInt((String) o);
1:08d0d7a: 		} else {
1:08d0d7a: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to an int");
1:ef9eace: 		}
1:ef9eace: 	}
1:ef9eace: 
1:08d0d7a: 	private long toLong(Map<String, Object> props, String key, long defaultValue) {
1:08d0d7a: 		
1:08d0d7a: 		Object o =  ofNullable(props)
1:08d0d7a: 				.map(m -> m.get(key))
1:08d0d7a: 				.orElse(defaultValue);
1:08d0d7a: 		
1:ef9eace: 		if (o instanceof Number) {
1:ef9eace: 			return ((Number) o).longValue();
1:08d0d7a: 		} else if(o instanceof String) {
1:ef9eace: 			return Long.parseLong((String) o);
1:08d0d7a: 		} else {
1:08d0d7a: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a long");
1:ef9eace: 		}
1:ef9eace: 	}
1:ef9eace: 
1:ef9eace: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jdbc.common.impl.AbstractJDBCConnectionProvider;
1: import org.apache.aries.tx.control.jdbc.common.impl.InternalJDBCConnectionProviderFactory;
1: public class JDBCConnectionProviderFactoryImpl implements JDBCConnectionProviderFactory, InternalJDBCConnectionProviderFactory {
1: 	public AbstractJDBCConnectionProvider getProviderFor(DataSourceFactory dsf, Properties jdbcProperties,
/////////////////////////////////////////////////////////////////////////
1: 	public AbstractJDBCConnectionProvider getProviderFor(DataSource ds, Map<String, Object> resourceProviderProperties) {
/////////////////////////////////////////////////////////////////////////
1: 	public AbstractJDBCConnectionProvider getProviderFor(Driver driver, Properties jdbcProperties, 
/////////////////////////////////////////////////////////////////////////
1: 	public AbstractJDBCConnectionProvider getProviderFor(XADataSource ds, Map<String, Object> resourceProviderProperties) {
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:08d0d7a
/////////////////////////////////////////////////////////////////////////
1: import static java.util.Optional.ofNullable;
/////////////////////////////////////////////////////////////////////////
1: 			if (toBoolean(resourceProviderProperties, USE_DRIVER, false)) {
/////////////////////////////////////////////////////////////////////////
1: 		if (toBoolean(resourceProviderProperties, XA_ENLISTMENT_ENABLED, false)) {
1: 		} else if (!toBoolean(resourceProviderProperties, LOCAL_ENLISTMENT_ENABLED, true)) {
/////////////////////////////////////////////////////////////////////////
1: 		if (toBoolean(resourceProviderProperties, CONNECTION_POOLING_ENABLED, true)) {
1: 			hcfg.setMaximumPoolSize(toInt(resourceProviderProperties, MAX_CONNECTIONS, 10));
1: 			hcfg.setMinimumIdle(toInt(resourceProviderProperties, MIN_CONNECTIONS, 10));
1: 			hcfg.setConnectionTimeout(toLong(resourceProviderProperties, CONNECTION_TIMEOUT, SECONDS.toMillis(30)));
1: 			hcfg.setIdleTimeout(toLong(resourceProviderProperties, IDLE_TIMEOUT, TimeUnit.MINUTES.toMillis(3)));
1: 			hcfg.setMaxLifetime(toLong(resourceProviderProperties, CONNECTION_LIFETIME, HOURS.toMillis(3)));
/////////////////////////////////////////////////////////////////////////
1: 	private boolean toBoolean(Map<String, Object> props, String key, boolean defaultValue) {
1: 		Object o =  ofNullable(props)
1: 			.map(m -> m.get(key))
1: 			.orElse(defaultValue);
1: 		
1: 		} else if(o instanceof String) {
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a boolean");
1: 	private int toInt(Map<String, Object> props, String key, int defaultValue) {
1: 		
1: 		Object o =  ofNullable(props)
1: 				.map(m -> m.get(key))
1: 				.orElse(defaultValue);
1: 		
1: 		} else if(o instanceof String) {
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to an int");
1: 	private long toLong(Map<String, Object> props, String key, long defaultValue) {
1: 		
1: 		Object o =  ofNullable(props)
1: 				.map(m -> m.get(key))
1: 				.orElse(defaultValue);
1: 		
1: 		} else if(o instanceof String) {
1: 		} else {
1: 			throw new IllegalArgumentException("The property " + key + " cannot be converted to a long");
commit:ef9eace
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.local.impl;
1: 
1: import static java.util.concurrent.TimeUnit.HOURS;
1: import static java.util.concurrent.TimeUnit.SECONDS;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_URL;
1: 
1: import java.sql.Driver;
1: import java.sql.SQLException;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.sql.DataSource;
1: import javax.sql.XADataSource;
1: 
1: import org.apache.aries.tx.control.jdbc.common.impl.DriverDataSource;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.service.transaction.control.TransactionException;
0: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: 
1: import com.zaxxer.hikari.HikariConfig;
1: import com.zaxxer.hikari.HikariDataSource;
1: 
0: public class JDBCConnectionProviderFactoryImpl implements JDBCConnectionProviderFactory {
1: 
1: 	@Override
0: 	public JDBCConnectionProvider getProviderFor(DataSourceFactory dsf, Properties jdbcProperties,
1: 			Map<String, Object> resourceProviderProperties) {
1: 
1: 		checkEnlistment(resourceProviderProperties);
1: 
1: 		DataSource unpooled;
1: 		try {
0: 			if (toBoolean(resourceProviderProperties.get(USE_DRIVER), false)) {
1: 				unpooled = new DriverDataSource(dsf.createDriver(null), jdbcProperties.getProperty(JDBC_URL),
1: 						jdbcProperties);
1: 			} else {
1: 				unpooled = dsf.createDataSource(jdbcProperties);
1: 			}
1: 		} catch (SQLException sqle) {
1: 			throw new TransactionException("Unable to create the JDBC resource provider", sqle);
1: 		}
1: 
1: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, unpooled);
1: 
1: 		return new JDBCConnectionProviderImpl(toUse);
1: 	}
1: 
1: 	@Override
0: 	public JDBCConnectionProvider getProviderFor(DataSource ds, Map<String, Object> resourceProviderProperties) {
1: 		checkEnlistment(resourceProviderProperties);
1: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, ds);
1: 
1: 		return new JDBCConnectionProviderImpl(toUse);
1: 	}
1: 
1: 	@Override
0: 	public JDBCConnectionProvider getProviderFor(Driver driver, Properties jdbcProperties, 
1: 			Map<String, Object> resourceProviderProperties) {
1: 		checkEnlistment(resourceProviderProperties);
1: 		DataSource toUse = poolIfNecessary(resourceProviderProperties, 
1: 				new DriverDataSource(driver, jdbcProperties.getProperty(JDBC_URL), jdbcProperties));
1: 		
1: 		return new JDBCConnectionProviderImpl(toUse);
1: 	}
1: 
1: 	@Override
0: 	public JDBCConnectionProvider getProviderFor(XADataSource ds, Map<String, Object> resourceProviderProperties) {
1: 		checkEnlistment(resourceProviderProperties);
1: 		
1: 		DataSource unpooled;
1: 		
1: 		if(ds instanceof DataSource) {
1: 			unpooled = (DataSource) ds;
1: 		} else {
1: 			throw new TransactionException("This resource Provider does not support XA transactions, and the supplied XADataSource is not a DataSource");
1: 		}
1: 		
1: 		return new JDBCConnectionProviderImpl(poolIfNecessary(resourceProviderProperties, unpooled));
1: 	}
1: 
1: 	private void checkEnlistment(Map<String, Object> resourceProviderProperties) {
0: 		if (toBoolean(resourceProviderProperties.get(XA_ENLISTMENT_ENABLED), false)) {
1: 			throw new TransactionException("This Resource Provider does not support XA transactions");
0: 		} else if (!toBoolean(resourceProviderProperties.get(LOCAL_ENLISTMENT_ENABLED), true)) {
1: 			throw new TransactionException(
1: 					"This Resource Provider always enlists in local transactions as it does not support XA");
1: 		}
1: 	}
1: 
1: 	private DataSource poolIfNecessary(Map<String, Object> resourceProviderProperties, DataSource unpooled) {
1: 		DataSource toUse;
1: 
0: 		if (toBoolean(resourceProviderProperties.get(CONNECTION_POOLING_ENABLED), true)) {
1: 			HikariConfig hcfg = new HikariConfig();
1: 			hcfg.setDataSource(unpooled);
1: 
1: 			// Sizes
0: 			hcfg.setMaximumPoolSize(toInt(resourceProviderProperties.get(MAX_CONNECTIONS), 10));
0: 			hcfg.setMinimumIdle(toInt(resourceProviderProperties.get(MIN_CONNECTIONS), 10));
1: 
1: 			// Timeouts
0: 			hcfg.setConnectionTimeout(toLong(resourceProviderProperties.get(CONNECTION_TIMEOUT), SECONDS.toMillis(30)));
0: 			hcfg.setIdleTimeout(toLong(resourceProviderProperties.get(IDLE_TIMEOUT), TimeUnit.MINUTES.toMillis(3)));
0: 			hcfg.setMaxLifetime(toLong(resourceProviderProperties.get(CONNECTION_LIFETIME), HOURS.toMillis(3)));
1: 
1: 			toUse = new HikariDataSource(hcfg);
1: 
1: 		} else {
1: 			toUse = unpooled;
1: 		}
1: 		return toUse;
1: 	}
1: 
0: 	private boolean toBoolean(Object o, boolean defaultValue) {
1: 		if (o instanceof Boolean) {
1: 			return ((Boolean) o).booleanValue();
0: 		} else if (o instanceof String) {
1: 			return Boolean.parseBoolean((String) o);
0: 		} else if (o == null) {
0: 			return defaultValue;
1: 		}
0: 		throw new IllegalArgumentException("The value " + o + " cannot be converted to a boolean");
1: 	}
1: 
0: 	private int toInt(Object o, int defaultValue) {
1: 		if (o instanceof Number) {
1: 			return ((Number) o).intValue();
0: 		} else if (o instanceof String) {
1: 			return Integer.parseInt((String) o);
0: 		} else if (o == null) {
0: 			return defaultValue;
1: 		}
0: 		throw new IllegalArgumentException("The value " + o + " cannot be converted to an int");
1: 	}
1: 
0: 	private long toLong(Object o, long defaultValue) {
1: 		if (o instanceof Number) {
1: 			return ((Number) o).longValue();
0: 		} else if (o instanceof String) {
1: 			return Long.parseLong((String) o);
0: 		} else if (o == null) {
0: 			return defaultValue;
1: 		}
0: 		throw new IllegalArgumentException("The value " + o + " cannot be converted to a long");
1: 	}
1: 
1: }
============================================================================