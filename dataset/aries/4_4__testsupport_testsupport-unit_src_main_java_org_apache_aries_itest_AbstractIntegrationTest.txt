1:86224ba: /*
1:86224ba:  * Licensed to the Apache Software Foundation (ASF) under one
1:86224ba:  * or more contributor license agreements.  See the NOTICE file
1:86224ba:  * distributed with this work for additional information
1:86224ba:  * regarding copyright ownership.  The ASF licenses this file
1:86224ba:  * to you under the Apache License, Version 2.0 (the
1:86224ba:  * "License"); you may not use this file except in compliance
1:86224ba:  * with the License.  You may obtain a copy of the License at
1:86224ba:  *
1:86224ba:  *   http://www.apache.org/licenses/LICENSE-2.0
1:86224ba:  *
1:86224ba:  * Unless required by applicable law or agreed to in writing,
1:86224ba:  * software distributed under the License is distributed on an
1:86224ba:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:86224ba:  * KIND, either express or implied.  See the License for the
1:86224ba:  * specific language governing permissions and limitations
1:86224ba:  * under the License.
1:86224ba:  */
1:86224ba: package org.apache.aries.itest;
1:86224ba: 
1:8b6ac4e: import javax.inject.Inject;
1:8b6ac4e: 
1:5de25af: import org.osgi.framework.Bundle;
1:86224ba: import org.osgi.framework.BundleContext;
1:5de25af: import org.osgi.framework.BundleException;
1:86224ba: 
1:86224ba: /**
1:86224ba:  * Base class for Pax Exam 1.2.x based unit tests
1:86224ba:  * 
1:86224ba:  * Contains the injection point and various utilities used in most tests
1:86224ba:  */
1:86224ba: public abstract class AbstractIntegrationTest {
1:86224ba: 
1:86224ba:     /** Gateway to the test OSGi framework */
1:86224ba:     @Inject
1:86224ba:     protected BundleContext bundleContext;
1:86224ba:     
1:86224ba:     /**
1:86224ba:      * Get a richer version of {@link BundleContext}
1:86224ba:      */
1:86224ba:     public RichBundleContext context() {
1:86224ba:         return new RichBundleContext(bundleContext);
1:86224ba:     }
1:05434a5:     
1:05434a5:     public String getLocalRepo() {
1:05434a5:     	String localRepo = System.getProperty("maven.repo.local");
1:05434a5:     	if (localRepo == null) {
1:05434a5:     		localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:05434a5:     	}
1:05434a5:     	return localRepo;
1:05434a5:     }
1:5de25af:     
1:5de25af: 	
1:5de25af: 	/**
1:5de25af: 	 * Help to diagnose bundles that did not start
1:5de25af: 	 * 
1:5de25af: 	 * @throws BundleException
1:5de25af: 	 */
1:d0ffd3e: 	public void showBundles() throws BundleException {
1:5de25af: 		Bundle[] bundles = bundleContext.getBundles();
1:5de25af: 		for (Bundle bundle : bundles) {
1:5de25af: 			System.out.println(bundle.getBundleId() + ":" + bundle.getSymbolicName() + ":" + bundle.getVersion() + ":" + bundle.getState());
1:5de25af: 		}
1:5de25af: 	}
1:5de25af: 	
1:5de25af: 	/**
1:5de25af: 	 * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
1:5de25af: 	 * 
1:5de25af: 	 * @throws BundleException
1:5de25af: 	 */
1:d0ffd3e: 	public void resolveBundles() throws BundleException {
1:5de25af: 		Bundle[] bundles = bundleContext.getBundles();
1:5de25af: 		for (Bundle bundle : bundles) {
1:5de25af: 			if (bundle.getState() == Bundle.INSTALLED) {
1:5de25af: 				System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":" + bundle.getSymbolicName() + ":" + bundle.getVersion());
1:5de25af: 				bundle.start();
1:5de25af: 			}
1:5de25af: 		}
1:5de25af: 	}
1:86224ba: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:d0ffd3e
/////////////////////////////////////////////////////////////////////////
1: 	public void showBundles() throws BundleException {
/////////////////////////////////////////////////////////////////////////
1: 	public void resolveBundles() throws BundleException {
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5de25af
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
/////////////////////////////////////////////////////////////////////////
1:     
1: 	
1: 	/**
1: 	 * Help to diagnose bundles that did not start
1: 	 * 
1: 	 * @throws BundleException
1: 	 */
0: 	protected void showBundles() throws BundleException {
1: 		Bundle[] bundles = bundleContext.getBundles();
1: 		for (Bundle bundle : bundles) {
1: 			System.out.println(bundle.getBundleId() + ":" + bundle.getSymbolicName() + ":" + bundle.getVersion() + ":" + bundle.getState());
1: 		}
1: 	}
1: 	
1: 	/**
1: 	 * Helps to diagnose bundles that are not resolved as it will throw a detailed exception
1: 	 * 
1: 	 * @throws BundleException
1: 	 */
0: 	protected void resolveBundles() throws BundleException {
1: 		Bundle[] bundles = bundleContext.getBundles();
1: 		for (Bundle bundle : bundles) {
1: 			if (bundle.getState() == Bundle.INSTALLED) {
1: 				System.out.println("Found non resolved bundle " + bundle.getBundleId() + ":" + bundle.getSymbolicName() + ":" + bundle.getVersion());
1: 				bundle.start();
1: 			}
1: 		}
1: 	}
commit:05434a5
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String getLocalRepo() {
1:     	String localRepo = System.getProperty("maven.repo.local");
1:     	if (localRepo == null) {
1:     		localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:     	}
1:     	return localRepo;
1:     }
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:8b6ac4e
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
1: 
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.itest;
1: 
0: import org.ops4j.pax.exam.Inject;
1: import org.osgi.framework.BundleContext;
1: 
1: /**
1:  * Base class for Pax Exam 1.2.x based unit tests
1:  * 
1:  * Contains the injection point and various utilities used in most tests
1:  */
1: public abstract class AbstractIntegrationTest {
1: 
1:     /** Gateway to the test OSGi framework */
1:     @Inject
1:     protected BundleContext bundleContext;
1:     
1:     /**
1:      * Get a richer version of {@link BundleContext}
1:      */
1:     public RichBundleContext context() {
1:         return new RichBundleContext(bundleContext);
1:     }
1: }
============================================================================