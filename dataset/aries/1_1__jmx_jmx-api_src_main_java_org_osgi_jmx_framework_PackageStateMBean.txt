1:fdf3952: /*
1:fdf3952:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:fdf3952:  * 
1:fdf3952:  * Licensed under the Apache License, Version 2.0 (the "License");
1:fdf3952:  * you may not use this file except in compliance with the License.
1:fdf3952:  * You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing, software
1:fdf3952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  * See the License for the specific language governing permissions and
1:fdf3952:  * limitations under the License.
1:fdf3952:  */
1:fdf3952: 
1:fdf3952: package org.osgi.jmx.framework;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeType;
1:fdf3952: import javax.management.openmbean.SimpleType;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularType;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.Item;
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * This MBean provides information about the package state of the framework.
1:fdf3952:  * 
1:fdf3952:  * @version $Revision$
1:fdf3952:  * @ThreadSafe
1:fdf3952:  */
1:fdf3952: public interface PackageStateMBean {
1:fdf3952: 	/**
1:fdf3952: 	 * The fully qualified object name of this MBean.
1:fdf3952: 	 */
1:fdf3952: 	String			OBJECTNAME				= JmxConstants.OSGI_CORE
1:fdf3952: 													+ ":type=packageState,version=1.5";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key EXPORTING_BUNDLE, used in {@link #EXPORTING_BUNDLES_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String			EXPORTING_BUNDLES		= "ExportingBundles";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the bundle identifier in {@link #PACKAGE_TYPE}. The
1:fdf3952: 	 * key is {@link #EXPORTING_BUNDLES} and the type is
1:fdf3952: 	 * {@link JmxConstants#LONG_ARRAY_TYPE}.
1:fdf3952: 	 */
1:fdf3952: 	Item			EXPORTING_BUNDLES_ITEM	= new Item(
1:fdf3952: 													EXPORTING_BUNDLES,
1:fdf3952: 													"The bundles the package belongs to",
1:fdf3952: 													JmxConstants.LONG_ARRAY_TYPE);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key IMPORTING_BUNDLES, used in {@link #IMPORTING_BUNDLES_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String			IMPORTING_BUNDLES		= "ImportingBundles";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the bundle identifier in {@link #PACKAGE_TYPE}. The
1:fdf3952: 	 * key is {@link #IMPORTING_BUNDLES} and the type is {@link JmxConstants#LONG_ARRAY_TYPE}.
1:fdf3952: 	 */
1:fdf3952: 	Item			IMPORTING_BUNDLES_ITEM	= new Item(
1:fdf3952: 													IMPORTING_BUNDLES,
1:fdf3952: 													"The importing bundles of the package",
1:fdf3952: 													JmxConstants.LONG_ARRAY_TYPE);
1:fdf3952: 
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The key NAME, used in {@link #NAME_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String			NAME					= "Name";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the name of the package in {@link #PACKAGE_TYPE}.
1:fdf3952: 	 * The key is {@link #NAME} and the type is {@link SimpleType#LONG}.
1:fdf3952: 	 */
1:fdf3952: 	Item			NAME_ITEM				= new Item(NAME,
1:fdf3952: 													"The package name",
1:fdf3952: 													SimpleType.STRING);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The name of the item containing the pending removal status of the package
1:fdf3952: 	 * in the CompositeData. Used
1:fdf3952: 	 */
1:fdf3952: 	String			REMOVAL_PENDING			= "RemovalPending";
1:fdf3952: 	/**
1:fdf3952: 	 * The item representing the removal pending status of a package. The key is
1:fdf3952: 	 * {@link #REMOVAL_PENDING} and the type is {@link SimpleType#BOOLEAN}.
1:fdf3952: 	 */
1:fdf3952: 	Item			REMOVAL_PENDING_ITEM	= new Item(
1:fdf3952: 													REMOVAL_PENDING,
1:fdf3952: 													"Whether the package is pending removal",
1:fdf3952: 													SimpleType.BOOLEAN);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The name of the item containing the package version in the CompositeData.
1:fdf3952: 	 * Used in {@link #VERSION_ITEM}.
1:fdf3952: 	 */
1:fdf3952: 	String			VERSION					= "Version";
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The item containing the version of the package in {@link #PACKAGE_TYPE}.
1:fdf3952: 	 * The key is {@link #VERSION} and the type is {@link SimpleType#STRING}.
1:fdf3952: 	 */
1:fdf3952: 	Item			VERSION_ITEM			= new Item(
1:fdf3952: 													VERSION,
1:fdf3952: 													"The identifier of the bundle the service belongs to",
1:fdf3952: 													SimpleType.STRING);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The Composite Type for a CompositeData representing a package. This type
1:fdf3952: 	 * consists of:
1:fdf3952: 	 * <ul>
1:fdf3952: 	 * <li>{@link #EXPORTING_BUNDLES_ITEM}</li>
1:fdf3952: 	 * <li>{@link #IMPORTING_BUNDLES_ITEM}</li>
1:fdf3952: 	 * <li>{@link #NAME_ITEM}</li>
1:fdf3952: 	 * <li>{@link #REMOVAL_PENDING_ITEM}</li>
1:fdf3952: 	 * <li>{@link #VERSION_ITEM}</li>
1:fdf3952: 	 * </ul>
1:fdf3952: 	 * The key is defined as {@link #NAME} and {@link #EXPORTING_BUNDLES}
1:fdf3952: 	 */
1:fdf3952: 	CompositeType	PACKAGE_TYPE			= Item
1:fdf3952: 													.compositeType(
1:fdf3952: 															"PACKAGE",
1:fdf3952: 															"This type encapsulates an OSGi package",
1:fdf3952: 															EXPORTING_BUNDLES_ITEM,
1:fdf3952: 															IMPORTING_BUNDLES_ITEM,
1:fdf3952: 															NAME_ITEM,
1:fdf3952: 															REMOVAL_PENDING_ITEM,
1:fdf3952: 															VERSION_ITEM);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * The Tabular Type used in {@link #listPackages()}. They key is
1:fdf3952: 	 * {@link #NAME}, {@link #VERSION}, and {@link #EXPORTING_BUNDLES}.
1:fdf3952: 	 */
1:fdf3952: 	TabularType		PACKAGES_TYPE			= Item.tabularType("PACKAGES",
1:fdf3952: 													"A table of packages",
1:fdf3952: 													PACKAGE_TYPE, NAME,
1:fdf3952: 													VERSION, EXPORTING_BUNDLES);
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the identifier of the bundle exporting the package
1:fdf3952: 	 * 
1:fdf3952: 	 * @param packageName - the package name
1:fdf3952: 	 * @param version - the version of the package
1:fdf3952: 	 * @return the bundle identifiers exporting such a package
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 * @throws IllegalArgumentException if the package indicated does not exist
1:fdf3952: 	 */
1:fdf3952: 	long[] getExportingBundles(String packageName, String version)
1:fdf3952: 			throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the list of identifiers of the bundles importing the package
1:fdf3952: 	 * 
1:fdf3952: 	 * @param packageName The package name
1:fdf3952: 	 * @param version The version of the package
1:fdf3952: 	 * @param exportingBundle The exporting bundle for the given package
1:fdf3952: 	 * @return the list of bundle identifiers
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 * @throws IllegalArgumentException if the package indicated does not exist
1:fdf3952: 	 * 
1:fdf3952: 	 */
1:fdf3952: 	long[] getImportingBundles(String packageName, String version,
1:fdf3952: 			long exportingBundle) throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer the package state of the system in tabular form
1:fdf3952: 	 * 
1:fdf3952: 	 * The Tabular Data is typed by {@link #PACKAGES_TYPE}, which has
1:fdf3952: 	 * {@link #PACKAGE_TYPE} as its Composite Type.
1:fdf3952: 	 * 
1:fdf3952: 	 * @return the tabular representation of the package state
1:fdf3952: 	 * @throws IOException When fails
1:fdf3952: 	 */
1:fdf3952: 	TabularData listPackages() throws IOException;
1:fdf3952: 
1:fdf3952: 	/**
1:fdf3952: 	 * Answer if this package is exported by a bundle which has been updated or
1:fdf3952: 	 * uninstalled
1:fdf3952: 	 * 
1:fdf3952: 	 * @param packageName The package name
1:fdf3952: 	 * @param version The version of the package
1:fdf3952: 	 * @param exportingBundle The bundle exporting the package
1:fdf3952: 	 * @return true if this package is being exported by a bundle that has been
1:fdf3952: 	 *         updated or uninstalled.
1:fdf3952: 	 * @throws IOException if the operation fails
1:fdf3952: 	 * @throws IllegalArgumentException if the package indicated does not exist
1:fdf3952: 	 */
1:fdf3952: 	boolean isRemovalPending(String packageName, String version, long exportingBundle)
1:fdf3952: 			throws IOException;
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.jmx.framework;
1: 
1: import java.io.IOException;
1: 
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.SimpleType;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularType;
1: 
1: import org.osgi.jmx.Item;
1: import org.osgi.jmx.JmxConstants;
1: 
1: /**
1:  * This MBean provides information about the package state of the framework.
1:  * 
1:  * @version $Revision$
1:  * @ThreadSafe
1:  */
1: public interface PackageStateMBean {
1: 	/**
1: 	 * The fully qualified object name of this MBean.
1: 	 */
1: 	String			OBJECTNAME				= JmxConstants.OSGI_CORE
1: 													+ ":type=packageState,version=1.5";
1: 
1: 	/**
1: 	 * The key EXPORTING_BUNDLE, used in {@link #EXPORTING_BUNDLES_ITEM}.
1: 	 */
1: 	String			EXPORTING_BUNDLES		= "ExportingBundles";
1: 
1: 	/**
1: 	 * The item containing the bundle identifier in {@link #PACKAGE_TYPE}. The
1: 	 * key is {@link #EXPORTING_BUNDLES} and the type is
1: 	 * {@link JmxConstants#LONG_ARRAY_TYPE}.
1: 	 */
1: 	Item			EXPORTING_BUNDLES_ITEM	= new Item(
1: 													EXPORTING_BUNDLES,
1: 													"The bundles the package belongs to",
1: 													JmxConstants.LONG_ARRAY_TYPE);
1: 
1: 	/**
1: 	 * The key IMPORTING_BUNDLES, used in {@link #IMPORTING_BUNDLES_ITEM}.
1: 	 */
1: 	String			IMPORTING_BUNDLES		= "ImportingBundles";
1: 
1: 	/**
1: 	 * The item containing the bundle identifier in {@link #PACKAGE_TYPE}. The
1: 	 * key is {@link #IMPORTING_BUNDLES} and the type is {@link JmxConstants#LONG_ARRAY_TYPE}.
1: 	 */
1: 	Item			IMPORTING_BUNDLES_ITEM	= new Item(
1: 													IMPORTING_BUNDLES,
1: 													"The importing bundles of the package",
1: 													JmxConstants.LONG_ARRAY_TYPE);
1: 
1: 
1: 	/**
1: 	 * The key NAME, used in {@link #NAME_ITEM}.
1: 	 */
1: 	String			NAME					= "Name";
1: 
1: 	/**
1: 	 * The item containing the name of the package in {@link #PACKAGE_TYPE}.
1: 	 * The key is {@link #NAME} and the type is {@link SimpleType#LONG}.
1: 	 */
1: 	Item			NAME_ITEM				= new Item(NAME,
1: 													"The package name",
1: 													SimpleType.STRING);
1: 
1: 	/**
1: 	 * The name of the item containing the pending removal status of the package
1: 	 * in the CompositeData. Used
1: 	 */
1: 	String			REMOVAL_PENDING			= "RemovalPending";
1: 	/**
1: 	 * The item representing the removal pending status of a package. The key is
1: 	 * {@link #REMOVAL_PENDING} and the type is {@link SimpleType#BOOLEAN}.
1: 	 */
1: 	Item			REMOVAL_PENDING_ITEM	= new Item(
1: 													REMOVAL_PENDING,
1: 													"Whether the package is pending removal",
1: 													SimpleType.BOOLEAN);
1: 
1: 	/**
1: 	 * The name of the item containing the package version in the CompositeData.
1: 	 * Used in {@link #VERSION_ITEM}.
1: 	 */
1: 	String			VERSION					= "Version";
1: 
1: 	/**
1: 	 * The item containing the version of the package in {@link #PACKAGE_TYPE}.
1: 	 * The key is {@link #VERSION} and the type is {@link SimpleType#STRING}.
1: 	 */
1: 	Item			VERSION_ITEM			= new Item(
1: 													VERSION,
1: 													"The identifier of the bundle the service belongs to",
1: 													SimpleType.STRING);
1: 
1: 	/**
1: 	 * The Composite Type for a CompositeData representing a package. This type
1: 	 * consists of:
1: 	 * <ul>
1: 	 * <li>{@link #EXPORTING_BUNDLES_ITEM}</li>
1: 	 * <li>{@link #IMPORTING_BUNDLES_ITEM}</li>
1: 	 * <li>{@link #NAME_ITEM}</li>
1: 	 * <li>{@link #REMOVAL_PENDING_ITEM}</li>
1: 	 * <li>{@link #VERSION_ITEM}</li>
1: 	 * </ul>
1: 	 * The key is defined as {@link #NAME} and {@link #EXPORTING_BUNDLES}
1: 	 */
1: 	CompositeType	PACKAGE_TYPE			= Item
1: 													.compositeType(
1: 															"PACKAGE",
1: 															"This type encapsulates an OSGi package",
1: 															EXPORTING_BUNDLES_ITEM,
1: 															IMPORTING_BUNDLES_ITEM,
1: 															NAME_ITEM,
1: 															REMOVAL_PENDING_ITEM,
1: 															VERSION_ITEM);
1: 
1: 	/**
1: 	 * The Tabular Type used in {@link #listPackages()}. They key is
1: 	 * {@link #NAME}, {@link #VERSION}, and {@link #EXPORTING_BUNDLES}.
1: 	 */
1: 	TabularType		PACKAGES_TYPE			= Item.tabularType("PACKAGES",
1: 													"A table of packages",
1: 													PACKAGE_TYPE, NAME,
1: 													VERSION, EXPORTING_BUNDLES);
1: 
1: 	/**
1: 	 * Answer the identifier of the bundle exporting the package
1: 	 * 
1: 	 * @param packageName - the package name
1: 	 * @param version - the version of the package
1: 	 * @return the bundle identifiers exporting such a package
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the package indicated does not exist
1: 	 */
1: 	long[] getExportingBundles(String packageName, String version)
1: 			throws IOException;
1: 
1: 	/**
1: 	 * Answer the list of identifiers of the bundles importing the package
1: 	 * 
1: 	 * @param packageName The package name
1: 	 * @param version The version of the package
1: 	 * @param exportingBundle The exporting bundle for the given package
1: 	 * @return the list of bundle identifiers
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the package indicated does not exist
1: 	 * 
1: 	 */
1: 	long[] getImportingBundles(String packageName, String version,
1: 			long exportingBundle) throws IOException;
1: 
1: 	/**
1: 	 * Answer the package state of the system in tabular form
1: 	 * 
1: 	 * The Tabular Data is typed by {@link #PACKAGES_TYPE}, which has
1: 	 * {@link #PACKAGE_TYPE} as its Composite Type.
1: 	 * 
1: 	 * @return the tabular representation of the package state
1: 	 * @throws IOException When fails
1: 	 */
1: 	TabularData listPackages() throws IOException;
1: 
1: 	/**
1: 	 * Answer if this package is exported by a bundle which has been updated or
1: 	 * uninstalled
1: 	 * 
1: 	 * @param packageName The package name
1: 	 * @param version The version of the package
1: 	 * @param exportingBundle The bundle exporting the package
1: 	 * @return true if this package is being exported by a bundle that has been
1: 	 *         updated or uninstalled.
1: 	 * @throws IOException if the operation fails
1: 	 * @throws IllegalArgumentException if the package indicated does not exist
1: 	 */
1: 	boolean isRemovalPending(String packageName, String version, long exportingBundle)
1: 			throws IOException;
1: 
1: }
============================================================================