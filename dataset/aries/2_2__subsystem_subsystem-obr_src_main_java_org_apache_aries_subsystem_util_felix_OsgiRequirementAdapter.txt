1:6c69a67: /*
1:6c69a67:  * Licensed under the Apache License, Version 2.0 (the "License");
1:6c69a67:  * you may not use this file except in compliance with the License.
1:6c69a67:  * You may obtain a copy of the License at
1:6c69a67:  *
1:6c69a67:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c69a67:  *
1:6c69a67:  * Unless required by applicable law or agreed to in writing, software
1:6c69a67:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c69a67:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c69a67:  * See the License for the specific language governing permissions and
1:6c69a67:  * limitations under the License.
1:6c69a67:  */
1:7a834c3: package org.apache.aries.subsystem.util.felix;
1:6c69a67: 
1:6c69a67: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:6c69a67: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:6c69a67: 
1:7a834c3: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
1:7a834c3: import org.apache.aries.subsystem.obr.internal.ResourceHelper;
1:6c69a67: import org.apache.felix.bundlerepository.Capability;
1:6c69a67: import org.apache.felix.bundlerepository.Requirement;
1:6c69a67: import org.osgi.framework.Constants;
1:40e70c5: import org.osgi.resource.Namespace;
1:6c69a67: import org.slf4j.Logger;
1:6c69a67: import org.slf4j.LoggerFactory;
1:6c69a67: 
1:6c69a67: public class OsgiRequirementAdapter implements Requirement {
1:6c69a67: 	private static final Logger logger = LoggerFactory.getLogger(OsgiRequirementAdapter.class);
1:6c69a67: 	
1:6c69a67: 	private final org.osgi.resource.Requirement requirement;
1:6c69a67: 	
1:6c69a67: 	public OsgiRequirementAdapter(org.osgi.resource.Requirement requirement) {
1:6c69a67: 		if (requirement == null)
1:6c69a67: 			throw new NullPointerException("Missing required parameter: requirement");
1:6c69a67: 		this.requirement = requirement;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getComment() {
1:6c69a67: 		return null;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getFilter() {
1:6c69a67: 		return requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public String getName() {
1:6c69a67: 		return NamespaceTranslator.translate(requirement.getNamespace());
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public boolean isExtend() {
2:6c69a67: 		return false;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public boolean isMultiple() {
1:40e70c5: 		String multiple = requirement.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE);
1:40e70c5: 		return Namespace.CARDINALITY_MULTIPLE.equals(multiple);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public boolean isOptional() {
1:6c69a67: 		String resolution = requirement.getDirectives().get(Constants.RESOLUTION_DIRECTIVE);
1:6c69a67: 		return Constants.RESOLUTION_OPTIONAL.equals(resolution);
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: 	public boolean isSatisfied(Capability capability) {
1:6c69a67: 		logger.debug(LOG_ENTRY, "isSatisfied", capability);
1:6c69a67: 		boolean result = ResourceHelper.matches(requirement, new FelixCapabilityAdapter(capability, null));
1:6c69a67: 		logger.debug(LOG_EXIT, "isSatisfied", result);
1:6c69a67: 		return result;
1:6c69a67: 	}
1:6c69a67: 
1:6c69a67: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:7a834c3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.util.felix;
1: import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;
1: import org.apache.aries.subsystem.obr.internal.ResourceHelper;
author:John Ross
-------------------------------------------------------------------------------
commit:40e70c5
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Namespace;
/////////////////////////////////////////////////////////////////////////
1: 		String multiple = requirement.getDirectives().get(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE);
1: 		return Namespace.CARDINALITY_MULTIPLE.equals(multiple);
commit:9731fd6
/////////////////////////////////////////////////////////////////////////
commit:6c69a67
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.aries.subsystem.obr.internal;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: 
0: import org.apache.aries.subsystem.core.internal.ResourceHelper;
1: import org.apache.felix.bundlerepository.Capability;
1: import org.apache.felix.bundlerepository.Requirement;
1: import org.osgi.framework.Constants;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class OsgiRequirementAdapter implements Requirement {
1: 	private static final Logger logger = LoggerFactory.getLogger(OsgiRequirementAdapter.class);
1: 	
1: 	private final org.osgi.resource.Requirement requirement;
1: 	
1: 	public OsgiRequirementAdapter(org.osgi.resource.Requirement requirement) {
1: 		if (requirement == null)
1: 			throw new NullPointerException("Missing required parameter: requirement");
1: 		this.requirement = requirement;
1: 	}
1: 
1: 	public String getComment() {
1: 		return null;
1: 	}
1: 
1: 	public String getFilter() {
1: 		return requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
1: 	}
1: 
1: 	public String getName() {
1: 		return NamespaceTranslator.translate(requirement.getNamespace());
1: 	}
1: 
1: 	public boolean isExtend() {
1: 		return false;
1: 	}
1: 
1: 	public boolean isMultiple() {
1: 		return false;
1: 	}
1: 
1: 	public boolean isOptional() {
1: 		String resolution = requirement.getDirectives().get(Constants.RESOLUTION_DIRECTIVE);
1: 		return Constants.RESOLUTION_OPTIONAL.equals(resolution);
1: 	}
1: 
1: 	public boolean isSatisfied(Capability capability) {
1: 		logger.debug(LOG_ENTRY, "isSatisfied", capability);
1: 		boolean result = ResourceHelper.matches(requirement, new FelixCapabilityAdapter(capability, null));
1: 		logger.debug(LOG_EXIT, "isSatisfied", result);
1: 		return result;
1: 	}
1: 
1: }
============================================================================