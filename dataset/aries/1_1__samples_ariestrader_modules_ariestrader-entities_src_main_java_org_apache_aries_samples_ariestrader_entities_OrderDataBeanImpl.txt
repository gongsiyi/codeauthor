1:aa4dd7c: /**
1:aa4dd7c:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:aa4dd7c:  *  contributor license agreements.  See the NOTICE file distributed with
1:aa4dd7c:  *  this work for additional information regarding copyright ownership.
1:aa4dd7c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:aa4dd7c:  *  (the "License"); you may not use this file except in compliance with
1:aa4dd7c:  *  the License.  You may obtain a copy of the License at
1:aa4dd7c:  *
1:aa4dd7c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:aa4dd7c:  *
1:aa4dd7c:  *  Unless required by applicable law or agreed to in writing, software
1:aa4dd7c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:aa4dd7c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa4dd7c:  *  See the License for the specific language governing permissions and
1:aa4dd7c:  *  limitations under the License.
1:aa4dd7c:  */
1:3364e3f: package org.apache.aries.samples.ariestrader.entities;
1:aa4dd7c: 
1:aa4dd7c: import java.io.Serializable;
1:aa4dd7c: import java.math.BigDecimal;
1:aa4dd7c: import java.util.Date;
1:aa4dd7c: 
1:aa4dd7c: import javax.persistence.Column;
1:aa4dd7c: import javax.persistence.Entity;
1:aa4dd7c: import javax.persistence.FetchType;
1:aa4dd7c: import javax.persistence.GeneratedValue;
1:aa4dd7c: import javax.persistence.GenerationType;
1:aa4dd7c: import javax.persistence.Id;
1:aa4dd7c: import javax.persistence.JoinColumn;
1:aa4dd7c: import javax.persistence.ManyToOne;
1:aa4dd7c: import javax.persistence.NamedQueries;
1:aa4dd7c: import javax.persistence.NamedQuery;
1:aa4dd7c: import javax.persistence.OneToOne;
1:aa4dd7c: import javax.persistence.Table;
1:aa4dd7c: import javax.persistence.TableGenerator;
1:aa4dd7c: import javax.persistence.Temporal;
1:aa4dd7c: import javax.persistence.TemporalType;
1:aa4dd7c: import javax.persistence.Transient;
1:aa4dd7c: 
1:61d7f67: import org.apache.aries.samples.ariestrader.util.Log;
1:61d7f67: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
1:aa4dd7c: 
1:aa4dd7c: @Entity(name = "orderejb")
1:aa4dd7c: @Table(name = "orderejb")
1:aa4dd7c: @NamedQueries( {
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByOrderfee", query = "SELECT o FROM orderejb o WHERE o.orderFee = :orderfee"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByCompletiondate", query = "SELECT o FROM orderejb o WHERE o.completionDate = :completiondate"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByOrdertype", query = "SELECT o FROM orderejb o WHERE o.orderType = :ordertype"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByOrderstatus", query = "SELECT o FROM orderejb o WHERE o.orderStatus = :orderstatus"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByPrice", query = "SELECT o FROM orderejb o WHERE o.price = :price"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByQuantity", query = "SELECT o FROM orderejb o WHERE o.quantity = :quantity"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByOpendate", query = "SELECT o FROM orderejb o WHERE o.openDate = :opendate"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByOrderid", query = "SELECT o FROM orderejb o WHERE o.orderID = :orderid"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByAccountAccountid", query = "SELECT o FROM orderejb o WHERE o.account.accountID = :accountAccountid"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByQuoteSymbol", query = "SELECT o FROM orderejb o WHERE o.quote.symbol = :quoteSymbol"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.findByHoldingHoldingid", query = "SELECT o FROM orderejb o WHERE o.holding.holdingID = :holdingHoldingid"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.closedOrders", query = "SELECT o FROM orderejb o WHERE o.orderStatus = 'closed' AND o.account.profile.userID  = :userID"),
1:aa4dd7c:     @NamedQuery(name = "orderejb.completeClosedOrders", query = "UPDATE orderejb o SET o.orderStatus = 'completed' WHERE o.orderStatus = 'closed' AND o.account.profile.userID  = :userID")
1:aa4dd7c: })
1:aa4dd7c: 
1:aa4dd7c: public class OrderDataBeanImpl implements OrderDataBean, Serializable {
1:aa4dd7c: 
1:aa4dd7c: 	@TableGenerator(name = "orderIdGen", table = "KEYGENEJB", pkColumnName = "KEYNAME", valueColumnName = "KEYVAL", pkColumnValue = "order", allocationSize = 1000)
1:aa4dd7c: 	@Id
1:aa4dd7c: 	@GeneratedValue(strategy = GenerationType.TABLE, generator = "orderIdGen")
1:aa4dd7c: 	@Column(name = "ORDERID", nullable = false)
1:aa4dd7c: 	private Integer orderID; /* orderID */
1:aa4dd7c: 
1:09d6656: 	@Column(name = "ORDERTYPE", length = 255)
1:aa4dd7c: 	private String orderType; /* orderType (buy, sell, etc.) */
1:aa4dd7c: 
1:09d6656: 	@Column(name = "ORDERSTATUS", length = 255)
1:aa4dd7c: 	private String orderStatus; /*
1:aa4dd7c: 								 * orderStatus (open, processing, completed,
1:b8c0170: 								 * closed, canceled)
1:aa4dd7c: 								 */
1:aa4dd7c: 	@Column(name = "OPENDATE")
1:aa4dd7c: 	@Temporal(TemporalType.TIMESTAMP)
1:aa4dd7c: 	private Date openDate; /* openDate (when the order was entered) */
1:aa4dd7c: 
1:aa4dd7c: 	@Column(name = "COMPLETIONDATE")
1:aa4dd7c:     @Temporal(TemporalType.TIMESTAMP)
1:aa4dd7c: 	private Date completionDate; /* completionDate */
1:aa4dd7c: 
1:aa4dd7c: 	@Column(name = "QUANTITY", nullable = false)
1:aa4dd7c:     	private double quantity; /* quantity */
1:aa4dd7c: 
1:aa4dd7c: 	@Column(name = "PRICE")
1:aa4dd7c:     private BigDecimal price; /* price */
1:aa4dd7c: 
1:aa4dd7c: 	@Column(name = "ORDERFEE")
1:aa4dd7c:     private BigDecimal orderFee; /* price */
1:aa4dd7c: 
1:aa4dd7c: 	@ManyToOne(fetch = FetchType.LAZY)
1:aa4dd7c: 	@JoinColumn(name="ACCOUNT_ACCOUNTID")
1:aa4dd7c:     private AccountDataBeanImpl account;
1:aa4dd7c: 
1:aa4dd7c: 	@ManyToOne(fetch = FetchType.EAGER)
1:09d6656: 	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(255)")
1:aa4dd7c:     private QuoteDataBeanImpl quote;
1:aa4dd7c: 
1:aa4dd7c: 	@OneToOne(fetch = FetchType.LAZY)
1:aa4dd7c: 	@JoinColumn(name = "HOLDING_HOLDINGID")
1:aa4dd7c:     private HoldingDataBeanImpl holding;
1:aa4dd7c: 	
1:aa4dd7c: 
1:aa4dd7c: 	 @Transient
1:aa4dd7c: 	private String symbol;
1:aa4dd7c: 
1:aa4dd7c: 	public OrderDataBeanImpl() {
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public OrderDataBeanImpl(Integer orderID, String orderType, String orderStatus,
1:aa4dd7c: 			Date openDate, Date completionDate, double quantity,
1:aa4dd7c: 			BigDecimal price, BigDecimal orderFee, String symbol) {
1:aa4dd7c: 		setOrderID(orderID);
1:aa4dd7c: 		setOrderType(orderType);
1:aa4dd7c: 		setOrderStatus(orderStatus);
1:aa4dd7c: 		setOpenDate(openDate);
1:aa4dd7c: 		setCompletionDate(completionDate);
1:aa4dd7c: 		setQuantity(quantity);
1:aa4dd7c: 		setPrice(price);
1:aa4dd7c: 		setOrderFee(orderFee);
1:aa4dd7c: 		setSymbol(symbol);
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public OrderDataBeanImpl(String orderType, String orderStatus, Date openDate,
1:aa4dd7c: 			Date completionDate, double quantity, BigDecimal price,
1:aa4dd7c: 			BigDecimal orderFee, AccountDataBean account, QuoteDataBean quote,
1:aa4dd7c: 			HoldingDataBean holding) {
1:aa4dd7c: 		setOrderType(orderType);
1:aa4dd7c: 		setOrderStatus(orderStatus);
1:aa4dd7c: 		setOpenDate(openDate);
1:aa4dd7c: 		setCompletionDate(completionDate);
1:aa4dd7c: 		setQuantity(quantity);
1:aa4dd7c: 		setPrice(price);
1:aa4dd7c: 		setOrderFee(orderFee);
1:aa4dd7c: 		setAccount(account);
1:aa4dd7c: 		setQuote(quote);
1:aa4dd7c: 		setHolding(holding);
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public static OrderDataBean getRandomInstance() {
1:aa4dd7c: 		return new OrderDataBeanImpl(new Integer(TradeConfig.rndInt(100000)),
1:aa4dd7c: 				TradeConfig.rndBoolean() ? "buy" : "sell", "open",
1:aa4dd7c: 				new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
1:aa4dd7c: 				new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
1:aa4dd7c: 				TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f),
1:aa4dd7c: 				TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public String toString() {
1:aa4dd7c: 		return "Order " + getOrderID() + "\n\t      orderType: "
1:aa4dd7c: 				+ getOrderType() + "\n\t    orderStatus: " + getOrderStatus()
1:aa4dd7c: 				+ "\n\t       openDate: " + getOpenDate()
1:aa4dd7c: 				+ "\n\t completionDate: " + getCompletionDate()
1:aa4dd7c: 				+ "\n\t       quantity: " + getQuantity()
1:aa4dd7c: 				+ "\n\t          price: " + getPrice()
1:aa4dd7c: 				+ "\n\t       orderFee: " + getOrderFee()
1:aa4dd7c: 				+ "\n\t         symbol: " + getSymbol();
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public String toHTML() {
1:aa4dd7c: 		return "<BR>Order <B>" + getOrderID() + "</B>"
1:aa4dd7c: 				+ "<LI>      orderType: " + getOrderType() + "</LI>"
1:aa4dd7c: 				+ "<LI>    orderStatus: " + getOrderStatus() + "</LI>"
1:aa4dd7c: 				+ "<LI>       openDate: " + getOpenDate() + "</LI>"
1:aa4dd7c: 				+ "<LI> completionDate: " + getCompletionDate() + "</LI>"
1:aa4dd7c: 				+ "<LI>       quantity: " + getQuantity() + "</LI>"
1:aa4dd7c: 				+ "<LI>          price: " + getPrice() + "</LI>"
1:aa4dd7c: 				+ "<LI>       orderFee: " + getOrderFee() + "</LI>"
1:aa4dd7c: 				+ "<LI>         symbol: " + getSymbol() + "</LI>";
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void print() {
1:aa4dd7c: 		Log.log(this.toString());
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public Integer getOrderID() {
1:aa4dd7c: 		return orderID;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setOrderID(Integer orderID) {
1:aa4dd7c: 		this.orderID = orderID;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public String getOrderType() {
1:aa4dd7c: 		return orderType;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setOrderType(String orderType) {
1:aa4dd7c: 		this.orderType = orderType;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public String getOrderStatus() {
1:aa4dd7c: 		return orderStatus;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setOrderStatus(String orderStatus) {
1:aa4dd7c: 		this.orderStatus = orderStatus;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public Date getOpenDate() {
1:aa4dd7c: 		return openDate;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setOpenDate(Date openDate) {
1:aa4dd7c: 		this.openDate = openDate;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public Date getCompletionDate() {
1:aa4dd7c: 		return completionDate;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setCompletionDate(Date completionDate) {
1:aa4dd7c: 		this.completionDate = completionDate;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public double getQuantity() {
1:aa4dd7c: 		return quantity;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setQuantity(double quantity) {
1:aa4dd7c: 		this.quantity = quantity;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public BigDecimal getPrice() {
1:aa4dd7c: 		return price;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setPrice(BigDecimal price) {
1:aa4dd7c: 		this.price = price;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public BigDecimal getOrderFee() {
1:aa4dd7c: 		return orderFee;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setOrderFee(BigDecimal orderFee) {
1:aa4dd7c: 		this.orderFee = orderFee;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public String getSymbol() {
1:aa4dd7c: 		if (quote != null) {
1:aa4dd7c: 			return quote.getSymbol();
1:aa4dd7c: 		}
1:aa4dd7c: 		return symbol;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setSymbol(String symbol) {
1:aa4dd7c: 		this.symbol = symbol;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public AccountDataBean getAccount() {
1:aa4dd7c: 		return account;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setAccount(AccountDataBean account) {
1:aa4dd7c: 		this.account = (AccountDataBeanImpl) account;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public QuoteDataBean getQuote() {
1:aa4dd7c: 		return quote;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setQuote(QuoteDataBean quote) {
1:aa4dd7c: 		this.quote = (QuoteDataBeanImpl) quote;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public HoldingDataBean getHolding() {
1:aa4dd7c: 		return holding;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void setHolding(HoldingDataBean holding) {
1:aa4dd7c: 		this.holding = (HoldingDataBeanImpl) holding;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public boolean isBuy() {
1:aa4dd7c: 		String orderType = getOrderType();
1:aa4dd7c: 		if (orderType.compareToIgnoreCase("buy") == 0)
1:aa4dd7c: 			return true;
1:aa4dd7c: 		return false;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public boolean isSell() {
1:aa4dd7c: 		String orderType = getOrderType();
1:aa4dd7c: 		if (orderType.compareToIgnoreCase("sell") == 0)
1:aa4dd7c: 			return true;
1:aa4dd7c: 		return false;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public boolean isOpen() {
1:aa4dd7c: 		String orderStatus = getOrderStatus();
1:aa4dd7c: 		if ((orderStatus.compareToIgnoreCase("open") == 0)
1:aa4dd7c: 				|| (orderStatus.compareToIgnoreCase("processing") == 0))
1:aa4dd7c: 			return true;
1:aa4dd7c: 		return false;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public boolean isCompleted() {
1:aa4dd7c: 		String orderStatus = getOrderStatus();
1:aa4dd7c: 		if ((orderStatus.compareToIgnoreCase("completed") == 0)
1:aa4dd7c: 				|| (orderStatus.compareToIgnoreCase("alertcompleted") == 0)
1:aa4dd7c: 				|| (orderStatus.compareToIgnoreCase("cancelled") == 0))
1:aa4dd7c: 			return true;
1:aa4dd7c: 		return false;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public boolean isCancelled() {
1:aa4dd7c: 		String orderStatus = getOrderStatus();
1:aa4dd7c: 		if (orderStatus.compareToIgnoreCase("cancelled") == 0)
1:aa4dd7c: 			return true;
1:aa4dd7c: 		return false;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	public void cancel() {
1:aa4dd7c: 		setOrderStatus("cancelled");
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	@Override
1:aa4dd7c: 	public int hashCode() {
1:aa4dd7c: 		int hash = 0;
1:aa4dd7c: 		hash += (this.orderID != null ? this.orderID.hashCode() : 0);
1:aa4dd7c: 		return hash;
1:aa4dd7c: 	}
1:aa4dd7c: 
1:aa4dd7c: 	@Override
1:aa4dd7c: 	public boolean equals(Object object) {
1:aa4dd7c: 		// TODO: Warning - this method won't work in the case the id fields are
1:aa4dd7c: 		// not set
1:aa4dd7c: 		if (!(object instanceof OrderDataBeanImpl)) {
1:aa4dd7c: 			return false;
1:aa4dd7c: 		}
1:aa4dd7c: 		OrderDataBeanImpl other = (OrderDataBeanImpl) object;
1:aa4dd7c: 		if (this.orderID != other.orderID
1:aa4dd7c: 				&& (this.orderID == null || !this.orderID.equals(other.orderID)))
1:aa4dd7c: 			return false;
1:aa4dd7c: 		return true;
1:aa4dd7c: 	}
1:aa4dd7c: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:09d6656
/////////////////////////////////////////////////////////////////////////
1: 	@Column(name = "ORDERTYPE", length = 255)
1: 	@Column(name = "ORDERSTATUS", length = 255)
/////////////////////////////////////////////////////////////////////////
1: 	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(255)")
commit:3ed5a02
/////////////////////////////////////////////////////////////////////////
0: 	@Column(name = "ORDERTYPE", length = 250)
0: 	@Column(name = "ORDERSTATUS", length = 250)
/////////////////////////////////////////////////////////////////////////
0: 	@JoinColumn(name = "QUOTE_SYMBOL", columnDefinition="VARCHAR(250)")
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
1: 								 * closed, canceled)
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.AccountDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.HoldingDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.OrderDataBean;
1: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
commit:989ba4e
commit:3364e3f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.entities;
commit:f336ad3
commit:61d7f67
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.ariestrader.beans;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
0: import org.apache.aries.samples.ariestrader.persistence.api.AccountDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.HoldingDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.OrderDataBean;
0: import org.apache.aries.samples.ariestrader.persistence.api.QuoteDataBean;
commit:4eb010a
commit:aa4dd7c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.beans;
1: 
1: import java.io.Serializable;
1: import java.math.BigDecimal;
1: import java.util.Date;
1: 
1: import javax.persistence.Column;
1: import javax.persistence.Entity;
1: import javax.persistence.FetchType;
1: import javax.persistence.GeneratedValue;
1: import javax.persistence.GenerationType;
1: import javax.persistence.Id;
1: import javax.persistence.JoinColumn;
1: import javax.persistence.ManyToOne;
1: import javax.persistence.NamedQueries;
1: import javax.persistence.NamedQuery;
1: import javax.persistence.OneToOne;
1: import javax.persistence.Table;
1: import javax.persistence.TableGenerator;
1: import javax.persistence.Temporal;
1: import javax.persistence.TemporalType;
1: import javax.persistence.Transient;
1: 
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
0: import org.apache.geronimo.samples.daytrader.persistence.api.AccountDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.HoldingDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.OrderDataBean;
0: import org.apache.geronimo.samples.daytrader.persistence.api.QuoteDataBean;
1: 
1: @Entity(name = "orderejb")
1: @Table(name = "orderejb")
1: @NamedQueries( {
1:     @NamedQuery(name = "orderejb.findByOrderfee", query = "SELECT o FROM orderejb o WHERE o.orderFee = :orderfee"),
1:     @NamedQuery(name = "orderejb.findByCompletiondate", query = "SELECT o FROM orderejb o WHERE o.completionDate = :completiondate"),
1:     @NamedQuery(name = "orderejb.findByOrdertype", query = "SELECT o FROM orderejb o WHERE o.orderType = :ordertype"),
1:     @NamedQuery(name = "orderejb.findByOrderstatus", query = "SELECT o FROM orderejb o WHERE o.orderStatus = :orderstatus"),
1:     @NamedQuery(name = "orderejb.findByPrice", query = "SELECT o FROM orderejb o WHERE o.price = :price"),
1:     @NamedQuery(name = "orderejb.findByQuantity", query = "SELECT o FROM orderejb o WHERE o.quantity = :quantity"),
1:     @NamedQuery(name = "orderejb.findByOpendate", query = "SELECT o FROM orderejb o WHERE o.openDate = :opendate"),
1:     @NamedQuery(name = "orderejb.findByOrderid", query = "SELECT o FROM orderejb o WHERE o.orderID = :orderid"),
1:     @NamedQuery(name = "orderejb.findByAccountAccountid", query = "SELECT o FROM orderejb o WHERE o.account.accountID = :accountAccountid"),
1:     @NamedQuery(name = "orderejb.findByQuoteSymbol", query = "SELECT o FROM orderejb o WHERE o.quote.symbol = :quoteSymbol"),
1:     @NamedQuery(name = "orderejb.findByHoldingHoldingid", query = "SELECT o FROM orderejb o WHERE o.holding.holdingID = :holdingHoldingid"),
1:     @NamedQuery(name = "orderejb.closedOrders", query = "SELECT o FROM orderejb o WHERE o.orderStatus = 'closed' AND o.account.profile.userID  = :userID"),
1:     @NamedQuery(name = "orderejb.completeClosedOrders", query = "UPDATE orderejb o SET o.orderStatus = 'completed' WHERE o.orderStatus = 'closed' AND o.account.profile.userID  = :userID")
1: })
1: 
1: public class OrderDataBeanImpl implements OrderDataBean, Serializable {
1: 
1: 	@TableGenerator(name = "orderIdGen", table = "KEYGENEJB", pkColumnName = "KEYNAME", valueColumnName = "KEYVAL", pkColumnValue = "order", allocationSize = 1000)
1: 	@Id
1: 	@GeneratedValue(strategy = GenerationType.TABLE, generator = "orderIdGen")
1: 	@Column(name = "ORDERID", nullable = false)
1: 	private Integer orderID; /* orderID */
1: 
0: 	@Column(name = "ORDERTYPE")
1: 	private String orderType; /* orderType (buy, sell, etc.) */
1: 
0: 	@Column(name = "ORDERSTATUS")
1: 	private String orderStatus; /*
1: 								 * orderStatus (open, processing, completed,
0: 								 * closed, cancelled)
1: 								 */
1: 	@Column(name = "OPENDATE")
1: 	@Temporal(TemporalType.TIMESTAMP)
1: 	private Date openDate; /* openDate (when the order was entered) */
1: 
1: 	@Column(name = "COMPLETIONDATE")
1:     @Temporal(TemporalType.TIMESTAMP)
1: 	private Date completionDate; /* completionDate */
1: 
1: 	@Column(name = "QUANTITY", nullable = false)
1:     	private double quantity; /* quantity */
1: 
1: 	@Column(name = "PRICE")
1:     private BigDecimal price; /* price */
1: 
1: 	@Column(name = "ORDERFEE")
1:     private BigDecimal orderFee; /* price */
1: 
1: 	@ManyToOne(fetch = FetchType.LAZY)
1: 	@JoinColumn(name="ACCOUNT_ACCOUNTID")
1:     private AccountDataBeanImpl account;
1: 
1: 	@ManyToOne(fetch = FetchType.EAGER)
0: 	@JoinColumn(name = "QUOTE_SYMBOL")
1:     private QuoteDataBeanImpl quote;
1: 
1: 	@OneToOne(fetch = FetchType.LAZY)
1: 	@JoinColumn(name = "HOLDING_HOLDINGID")
1:     private HoldingDataBeanImpl holding;
1: 	
1: 
1: 	 @Transient
1: 	private String symbol;
1: 
1: 	public OrderDataBeanImpl() {
1: 	}
1: 
1: 	public OrderDataBeanImpl(Integer orderID, String orderType, String orderStatus,
1: 			Date openDate, Date completionDate, double quantity,
1: 			BigDecimal price, BigDecimal orderFee, String symbol) {
1: 		setOrderID(orderID);
1: 		setOrderType(orderType);
1: 		setOrderStatus(orderStatus);
1: 		setOpenDate(openDate);
1: 		setCompletionDate(completionDate);
1: 		setQuantity(quantity);
1: 		setPrice(price);
1: 		setOrderFee(orderFee);
1: 		setSymbol(symbol);
1: 	}
1: 
1: 	public OrderDataBeanImpl(String orderType, String orderStatus, Date openDate,
1: 			Date completionDate, double quantity, BigDecimal price,
1: 			BigDecimal orderFee, AccountDataBean account, QuoteDataBean quote,
1: 			HoldingDataBean holding) {
1: 		setOrderType(orderType);
1: 		setOrderStatus(orderStatus);
1: 		setOpenDate(openDate);
1: 		setCompletionDate(completionDate);
1: 		setQuantity(quantity);
1: 		setPrice(price);
1: 		setOrderFee(orderFee);
1: 		setAccount(account);
1: 		setQuote(quote);
1: 		setHolding(holding);
1: 	}
1: 
1: 	public static OrderDataBean getRandomInstance() {
1: 		return new OrderDataBeanImpl(new Integer(TradeConfig.rndInt(100000)),
1: 				TradeConfig.rndBoolean() ? "buy" : "sell", "open",
1: 				new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
1: 				new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
1: 				TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f),
1: 				TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
1: 	}
1: 
1: 	public String toString() {
1: 		return "Order " + getOrderID() + "\n\t      orderType: "
1: 				+ getOrderType() + "\n\t    orderStatus: " + getOrderStatus()
1: 				+ "\n\t       openDate: " + getOpenDate()
1: 				+ "\n\t completionDate: " + getCompletionDate()
1: 				+ "\n\t       quantity: " + getQuantity()
1: 				+ "\n\t          price: " + getPrice()
1: 				+ "\n\t       orderFee: " + getOrderFee()
1: 				+ "\n\t         symbol: " + getSymbol();
1: 	}
1: 
1: 	public String toHTML() {
1: 		return "<BR>Order <B>" + getOrderID() + "</B>"
1: 				+ "<LI>      orderType: " + getOrderType() + "</LI>"
1: 				+ "<LI>    orderStatus: " + getOrderStatus() + "</LI>"
1: 				+ "<LI>       openDate: " + getOpenDate() + "</LI>"
1: 				+ "<LI> completionDate: " + getCompletionDate() + "</LI>"
1: 				+ "<LI>       quantity: " + getQuantity() + "</LI>"
1: 				+ "<LI>          price: " + getPrice() + "</LI>"
1: 				+ "<LI>       orderFee: " + getOrderFee() + "</LI>"
1: 				+ "<LI>         symbol: " + getSymbol() + "</LI>";
1: 	}
1: 
1: 	public void print() {
1: 		Log.log(this.toString());
1: 	}
1: 
1: 	public Integer getOrderID() {
1: 		return orderID;
1: 	}
1: 
1: 	public void setOrderID(Integer orderID) {
1: 		this.orderID = orderID;
1: 	}
1: 
1: 	public String getOrderType() {
1: 		return orderType;
1: 	}
1: 
1: 	public void setOrderType(String orderType) {
1: 		this.orderType = orderType;
1: 	}
1: 
1: 	public String getOrderStatus() {
1: 		return orderStatus;
1: 	}
1: 
1: 	public void setOrderStatus(String orderStatus) {
1: 		this.orderStatus = orderStatus;
1: 	}
1: 
1: 	public Date getOpenDate() {
1: 		return openDate;
1: 	}
1: 
1: 	public void setOpenDate(Date openDate) {
1: 		this.openDate = openDate;
1: 	}
1: 
1: 	public Date getCompletionDate() {
1: 		return completionDate;
1: 	}
1: 
1: 	public void setCompletionDate(Date completionDate) {
1: 		this.completionDate = completionDate;
1: 	}
1: 
1: 	public double getQuantity() {
1: 		return quantity;
1: 	}
1: 
1: 	public void setQuantity(double quantity) {
1: 		this.quantity = quantity;
1: 	}
1: 
1: 	public BigDecimal getPrice() {
1: 		return price;
1: 	}
1: 
1: 	public void setPrice(BigDecimal price) {
1: 		this.price = price;
1: 	}
1: 
1: 	public BigDecimal getOrderFee() {
1: 		return orderFee;
1: 	}
1: 
1: 	public void setOrderFee(BigDecimal orderFee) {
1: 		this.orderFee = orderFee;
1: 	}
1: 
1: 	public String getSymbol() {
1: 		if (quote != null) {
1: 			return quote.getSymbol();
1: 		}
1: 		return symbol;
1: 	}
1: 
1: 	public void setSymbol(String symbol) {
1: 		this.symbol = symbol;
1: 	}
1: 
1: 	public AccountDataBean getAccount() {
1: 		return account;
1: 	}
1: 
1: 	public void setAccount(AccountDataBean account) {
1: 		this.account = (AccountDataBeanImpl) account;
1: 	}
1: 
1: 	public QuoteDataBean getQuote() {
1: 		return quote;
1: 	}
1: 
1: 	public void setQuote(QuoteDataBean quote) {
1: 		this.quote = (QuoteDataBeanImpl) quote;
1: 	}
1: 
1: 	public HoldingDataBean getHolding() {
1: 		return holding;
1: 	}
1: 
1: 	public void setHolding(HoldingDataBean holding) {
1: 		this.holding = (HoldingDataBeanImpl) holding;
1: 	}
1: 
1: 	public boolean isBuy() {
1: 		String orderType = getOrderType();
1: 		if (orderType.compareToIgnoreCase("buy") == 0)
1: 			return true;
1: 		return false;
1: 	}
1: 
1: 	public boolean isSell() {
1: 		String orderType = getOrderType();
1: 		if (orderType.compareToIgnoreCase("sell") == 0)
1: 			return true;
1: 		return false;
1: 	}
1: 
1: 	public boolean isOpen() {
1: 		String orderStatus = getOrderStatus();
1: 		if ((orderStatus.compareToIgnoreCase("open") == 0)
1: 				|| (orderStatus.compareToIgnoreCase("processing") == 0))
1: 			return true;
1: 		return false;
1: 	}
1: 
1: 	public boolean isCompleted() {
1: 		String orderStatus = getOrderStatus();
1: 		if ((orderStatus.compareToIgnoreCase("completed") == 0)
1: 				|| (orderStatus.compareToIgnoreCase("alertcompleted") == 0)
1: 				|| (orderStatus.compareToIgnoreCase("cancelled") == 0))
1: 			return true;
1: 		return false;
1: 	}
1: 
1: 	public boolean isCancelled() {
1: 		String orderStatus = getOrderStatus();
1: 		if (orderStatus.compareToIgnoreCase("cancelled") == 0)
1: 			return true;
1: 		return false;
1: 	}
1: 
1: 	public void cancel() {
1: 		setOrderStatus("cancelled");
1: 	}
1: 
1: 	@Override
1: 	public int hashCode() {
1: 		int hash = 0;
1: 		hash += (this.orderID != null ? this.orderID.hashCode() : 0);
1: 		return hash;
1: 	}
1: 
1: 	@Override
1: 	public boolean equals(Object object) {
1: 		// TODO: Warning - this method won't work in the case the id fields are
1: 		// not set
1: 		if (!(object instanceof OrderDataBeanImpl)) {
1: 			return false;
1: 		}
1: 		OrderDataBeanImpl other = (OrderDataBeanImpl) object;
1: 		if (this.orderID != other.orderID
1: 				&& (this.orderID == null || !this.orderID.equals(other.orderID)))
1: 			return false;
1: 		return true;
1: 	}
1: }
============================================================================