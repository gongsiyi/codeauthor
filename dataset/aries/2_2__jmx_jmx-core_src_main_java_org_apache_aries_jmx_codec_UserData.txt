2:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
5:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
2:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.codec;
4:fdf3952: 
1:32a99b9: import java.util.ArrayList;
1:0356de4: import java.util.Dictionary;
1:32a99b9: import java.util.Enumeration;
1:fdf3952: import java.util.HashMap;
1:32a99b9: import java.util.List;
1:fdf3952: import java.util.Map;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.CompositeDataSupport;
1:fdf3952: import javax.management.openmbean.OpenDataException;
1:0356de4: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1:fdf3952: import org.osgi.service.useradmin.User;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>UserData</tt> represents User Type @see {@link UserAdminMBean#USER_TYPE}.It is a codec
1:fdf3952:  * for the <code>CompositeData</code> representing a User.
1:fdf3952:  * </p>
1:fdf3952:  * @see RoleData
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class UserData extends RoleData {
1:fdf3952: 
1:fdf3952:     /**
1:32a99b9:      * user credentials.
1:32a99b9:      */
1:32a99b9:     protected List<PropertyData<? extends Object>> credentials = new ArrayList<PropertyData<? extends Object>>();
1:32a99b9: 
1:32a99b9:     /**
1:fdf3952:      * Constructs new UserData from {@link User} object.
1:0356de4:      *
1:fdf3952:      * @param user {@link User} instance.
1:fdf3952:      */
1:fdf3952:     public UserData(User user){
1:32a99b9:         this(user.getName(), user.getType(), user.getProperties(), user.getCredentials());
2:fdf3952:     }
1:a7846d3:     
1:a7846d3:     
1:a7846d3:     /**
1:a7846d3:      * Constructs new UserData.
1:a7846d3:      *
1:a7846d3:      * @param name user name.
1:a7846d3:      * @param type role type.
1:a7846d3:      */
1:a7846d3:     public UserData(String name, int type){
1:a7846d3:         super(name, type);
1:a7846d3:     }    
1:0356de4: 
1:0356de4:     /**
1:0356de4:      * Constructs new UserData.
1:0356de4:      *
1:0356de4:      * @param name user name.
1:0356de4:      * @param type role type.
1:0356de4:      * @param properties user properties.
1:32a99b9:      * @param credentials user credentials.
1:0356de4:      */
1:32a99b9:     public UserData(String name, int type, Dictionary properties, Dictionary credentials) {
1:0356de4:         super(name, type, properties);
1:32a99b9: 
1:32a99b9:         if (credentials != null) {
1:32a99b9:             for (Enumeration e = credentials.keys(); e.hasMoreElements(); ) {
1:32a99b9:                 String key = e.nextElement().toString();
1:32a99b9:                 this.credentials.add(PropertyData.newInstance(key, credentials.get(key)));
1:32a99b9:             }
1:32a99b9:         }
1:0356de4:     }
1:0356de4: 
1:fdf3952:     /**
1:fdf3952:      * Translates UserData to CompositeData represented by
1:fdf3952:      * compositeType {@link UserAdminMBean#USER_TYPE}.
1:0356de4:      *
1:fdf3952:      * @return translated UserData to compositeData.
1:fdf3952:      */
1:fdf3952:     public CompositeData toCompositeData() {
1:fdf3952:         try {
1:fdf3952:             Map<String, Object> items = new HashMap<String, Object>();
1:fdf3952:             items.put(UserAdminMBean.NAME, name);
1:fdf3952:             items.put(UserAdminMBean.TYPE, type);
1:540df86:             // items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
1:540df86:             // items.put(UserAdminMBean.CREDENTIALS, getCredentialsTable());
1:fdf3952:             return new CompositeDataSupport(UserAdminMBean.USER_TYPE, items);
1:fdf3952:         } catch (OpenDataException e) {
1:fdf3952:             throw new IllegalStateException("Can't create CompositeData" + e);
1:fdf3952:         }
1:fdf3952:     }
1:0356de4: 
1:32a99b9:     protected TabularData getCredentialsTable() {
1:32a99b9:         return getPropertiesTable(credentials);
1:32a99b9:     }
1:32a99b9: 
1:fdf3952:     /**
1:fdf3952:      * Static factory method to create UserData from CompositeData object.
1:0356de4:      *
1:fdf3952:      * @param data {@link CompositeData} instance.
1:fdf3952:      * @return UserData instance.
1:fdf3952:      */
1:fdf3952:     public static UserData from(CompositeData data) {
1:fdf3952:         if(data == null){
1:fdf3952:             return null;
1:fdf3952:         }
1:fdf3952:         String name = (String) data.get(UserAdminMBean.NAME);
1:fdf3952:         int type = (Integer)data.get(UserAdminMBean.TYPE);
1:540df86:         // Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1:540df86:         // Dictionary<String, Object> credentials = propertiesFrom((TabularData) data.get(UserAdminMBean.CREDENTIALS));
1:540df86:         return new UserData(name, type, null, null /* props, credentials */);
1:fdf3952:     }
1:fdf3952: }
============================================================================
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:a7846d3
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:     /**
1:      * Constructs new UserData.
1:      *
1:      * @param name user name.
1:      * @param type role type.
1:      */
1:     public UserData(String name, int type){
1:         super(name, type);
1:     }    
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:540df86
/////////////////////////////////////////////////////////////////////////
1:             // items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
1:             // items.put(UserAdminMBean.CREDENTIALS, getCredentialsTable());
/////////////////////////////////////////////////////////////////////////
1:         // Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1:         // Dictionary<String, Object> credentials = propertiesFrom((TabularData) data.get(UserAdminMBean.CREDENTIALS));
1:         return new UserData(name, type, null, null /* props, credentials */);
commit:32a99b9
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:      * user credentials.
1:      */
1:     protected List<PropertyData<? extends Object>> credentials = new ArrayList<PropertyData<? extends Object>>();
1: 
1:     /**
1:         this(user.getName(), user.getType(), user.getProperties(), user.getCredentials());
/////////////////////////////////////////////////////////////////////////
1:      * @param credentials user credentials.
1:     public UserData(String name, int type, Dictionary properties, Dictionary credentials) {
1: 
1:         if (credentials != null) {
1:             for (Enumeration e = credentials.keys(); e.hasMoreElements(); ) {
1:                 String key = e.nextElement().toString();
1:                 this.credentials.add(PropertyData.newInstance(key, credentials.get(key)));
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
0:             items.put(UserAdminMBean.CREDENTIALS, getCredentialsTable());
1:     protected TabularData getCredentialsTable() {
1:         return getPropertiesTable(credentials);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String, Object> credentials = propertiesFrom((TabularData) data.get(UserAdminMBean.CREDENTIALS));
0:         return new UserData(name, type, props, credentials);
commit:0356de4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
1: import javax.management.openmbean.TabularData;
/////////////////////////////////////////////////////////////////////////
1:      *
0:         super(user.getName(), user.getType(), user.getProperties());
1: 
1:     /**
1:      * Constructs new UserData.
1:      *
1:      * @param name user name.
1:      * @param type role type.
1:      * @param properties user properties.
1:      */
0:     public UserData(String name, int type, Dictionary properties) {
1:         super(name, type, properties);
1:     }
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
0:             items.put(UserAdminMBean.PROPERTIES, getPropertiesTable());
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String, Object> props = propertiesFrom((TabularData) data.get(UserAdminMBean.PROPERTIES));
1: 
0:         return new UserData(name, type, props);
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.codec;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.OpenDataException;
1: 
1: import org.osgi.jmx.service.useradmin.UserAdminMBean;
1: import org.osgi.service.useradmin.User;
1: 
1: /**
1:  * <p>
1:  * <tt>UserData</tt> represents User Type @see {@link UserAdminMBean#USER_TYPE}.It is a codec
1:  * for the <code>CompositeData</code> representing a User.
1:  * </p>
1:  * @see RoleData
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class UserData extends RoleData {
1: 
1:     /**
0:      * Constructs new UserData.
1:      * 
0:      * @param name user name.
0:      * @param type role type.
1:      */
0:     public UserData(String name, int type){
0:         super(name, type);
1:     }
1:     
1:     /**
1:      * Constructs new UserData from {@link User} object.
1:      * 
1:      * @param user {@link User} instance.
1:      */
1:     public UserData(User user){
0:         this(user.getName(), user.getType());
1:     }
1:     
1:     /**
1:      * Translates UserData to CompositeData represented by
1:      * compositeType {@link UserAdminMBean#USER_TYPE}.
1:      * 
1:      * @return translated UserData to compositeData.
1:      */
1:     public CompositeData toCompositeData() {
1:         try {
1:             Map<String, Object> items = new HashMap<String, Object>();
1:             items.put(UserAdminMBean.NAME, name);
1:             items.put(UserAdminMBean.TYPE, type);
1:             return new CompositeDataSupport(UserAdminMBean.USER_TYPE, items);
1:         } catch (OpenDataException e) {
1:             throw new IllegalStateException("Can't create CompositeData" + e);
1:         }
1:     }
1: 
1:     /**
1:      * Static factory method to create UserData from CompositeData object.
1:      * 
1:      * @param data {@link CompositeData} instance.
1:      * @return UserData instance.
1:      */
1:     public static UserData from(CompositeData data) {
1:         if(data == null){
1:             return null;
1:         }
1:         String name = (String) data.get(UserAdminMBean.NAME);
1:         int type = (Integer)data.get(UserAdminMBean.TYPE);
0:         return new UserData(name, type);
1:     }
1: }
============================================================================