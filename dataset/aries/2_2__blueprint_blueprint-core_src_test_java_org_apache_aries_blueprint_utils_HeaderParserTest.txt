1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.utils;
1:f13c6ac: 
1:f13c6ac: import java.util.List;
1:f13c6ac: 
1:f13c6ac: import junit.framework.TestCase;
1:6414875: import org.apache.aries.blueprint.utils.HeaderParser.PathElement;
1:f13c6ac: 
1:f13c6ac: public class HeaderParserTest extends TestCase {
1:f13c6ac: 
1:f13c6ac:     public void testSimple() throws Exception {
1:f13c6ac:         List<PathElement> paths = HeaderParser.parseHeader("/foo.xml, /foo/bar.xml");
1:f13c6ac:         assertEquals(2, paths.size());
1:f13c6ac:         assertEquals("/foo.xml", paths.get(0).getName());
1:f13c6ac:         assertEquals(0, paths.get(0).getAttributes().size());
1:f13c6ac:         assertEquals(0, paths.get(0).getDirectives().size());
1:f13c6ac:         assertEquals("/foo/bar.xml", paths.get(1).getName());
1:f13c6ac:         assertEquals(0, paths.get(1).getAttributes().size());
1:f13c6ac:         assertEquals(0, paths.get(1).getDirectives().size());
1:f13c6ac:     }
1:f13c6ac:     
1:f13c6ac:     public void testComplex() throws Exception {
1:f13c6ac:         List<PathElement> paths = HeaderParser.parseHeader("OSGI-INF/blueprint/comp1_named.xml;ignored-directive:=true,OSGI-INF/blueprint/comp2_named.xml;some-other-attribute=1");
1:f13c6ac:         assertEquals(2, paths.size());
1:f13c6ac:         assertEquals("OSGI-INF/blueprint/comp1_named.xml", paths.get(0).getName());
1:f13c6ac:         assertEquals(0, paths.get(0).getAttributes().size());
1:f13c6ac:         assertEquals(1, paths.get(0).getDirectives().size());
1:f13c6ac:         assertEquals("true", paths.get(0).getDirective("ignored-directive"));
1:f13c6ac:         assertEquals("OSGI-INF/blueprint/comp2_named.xml", paths.get(1).getName());
1:f13c6ac:         assertEquals(1, paths.get(1).getAttributes().size());
1:f13c6ac:         assertEquals("1", paths.get(1).getAttribute("some-other-attribute"));
1:f13c6ac:         assertEquals(0, paths.get(1).getDirectives().size());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void testPaths() throws Exception {
1:f13c6ac:         List<PathElement> paths = HeaderParser.parseHeader("OSGI-INF/blueprint/comp1_named.xml;ignored-directive:=true,OSGI-INF/blueprint/comp2_named.xml;foo.xml;a=b;1:=2;c:=d;4=5");
1:f13c6ac:         assertEquals(3, paths.size());
1:f13c6ac:         assertEquals("OSGI-INF/blueprint/comp1_named.xml", paths.get(0).getName());
1:f13c6ac:         assertEquals(0, paths.get(0).getAttributes().size());
1:f13c6ac:         assertEquals(1, paths.get(0).getDirectives().size());
1:f13c6ac:         assertEquals("true", paths.get(0).getDirective("ignored-directive"));
1:f13c6ac:         assertEquals("OSGI-INF/blueprint/comp2_named.xml", paths.get(1).getName());
1:f13c6ac:         assertEquals(0, paths.get(1).getAttributes().size());
1:f13c6ac:         assertEquals(0, paths.get(1).getDirectives().size());
1:f13c6ac:         assertEquals("foo.xml", paths.get(2).getName());
1:f13c6ac:         assertEquals(2, paths.get(2).getAttributes().size());
1:f13c6ac:         assertEquals("b", paths.get(2).getAttribute("a"));
1:f13c6ac:         assertEquals("5", paths.get(2).getAttribute("4"));
1:f13c6ac:         assertEquals(2, paths.get(2).getDirectives().size());
1:f13c6ac:         assertEquals("d", paths.get(2).getDirective("c"));
1:f13c6ac:         assertEquals("2", paths.get(2).getDirective("1"));
1:f13c6ac:     }
1:f13c6ac: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.utils;
1: import org.apache.aries.blueprint.utils.HeaderParser.PathElement;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.utils;
1: 
1: import java.util.List;
1: 
1: import junit.framework.TestCase;
0: import org.apache.geronimo.blueprint.utils.HeaderParser.PathElement;
1: 
1: public class HeaderParserTest extends TestCase {
1: 
1:     public void testSimple() throws Exception {
1:         List<PathElement> paths = HeaderParser.parseHeader("/foo.xml, /foo/bar.xml");
1:         assertEquals(2, paths.size());
1:         assertEquals("/foo.xml", paths.get(0).getName());
1:         assertEquals(0, paths.get(0).getAttributes().size());
1:         assertEquals(0, paths.get(0).getDirectives().size());
1:         assertEquals("/foo/bar.xml", paths.get(1).getName());
1:         assertEquals(0, paths.get(1).getAttributes().size());
1:         assertEquals(0, paths.get(1).getDirectives().size());
1:     }
1:     
1:     public void testComplex() throws Exception {
1:         List<PathElement> paths = HeaderParser.parseHeader("OSGI-INF/blueprint/comp1_named.xml;ignored-directive:=true,OSGI-INF/blueprint/comp2_named.xml;some-other-attribute=1");
1:         assertEquals(2, paths.size());
1:         assertEquals("OSGI-INF/blueprint/comp1_named.xml", paths.get(0).getName());
1:         assertEquals(0, paths.get(0).getAttributes().size());
1:         assertEquals(1, paths.get(0).getDirectives().size());
1:         assertEquals("true", paths.get(0).getDirective("ignored-directive"));
1:         assertEquals("OSGI-INF/blueprint/comp2_named.xml", paths.get(1).getName());
1:         assertEquals(1, paths.get(1).getAttributes().size());
1:         assertEquals("1", paths.get(1).getAttribute("some-other-attribute"));
1:         assertEquals(0, paths.get(1).getDirectives().size());
1:     }
1: 
1:     public void testPaths() throws Exception {
1:         List<PathElement> paths = HeaderParser.parseHeader("OSGI-INF/blueprint/comp1_named.xml;ignored-directive:=true,OSGI-INF/blueprint/comp2_named.xml;foo.xml;a=b;1:=2;c:=d;4=5");
1:         assertEquals(3, paths.size());
1:         assertEquals("OSGI-INF/blueprint/comp1_named.xml", paths.get(0).getName());
1:         assertEquals(0, paths.get(0).getAttributes().size());
1:         assertEquals(1, paths.get(0).getDirectives().size());
1:         assertEquals("true", paths.get(0).getDirective("ignored-directive"));
1:         assertEquals("OSGI-INF/blueprint/comp2_named.xml", paths.get(1).getName());
1:         assertEquals(0, paths.get(1).getAttributes().size());
1:         assertEquals(0, paths.get(1).getDirectives().size());
1:         assertEquals("foo.xml", paths.get(2).getName());
1:         assertEquals(2, paths.get(2).getAttributes().size());
1:         assertEquals("b", paths.get(2).getAttribute("a"));
1:         assertEquals("5", paths.get(2).getAttribute("4"));
1:         assertEquals(2, paths.get(2).getDirectives().size());
1:         assertEquals("d", paths.get(2).getDirective("c"));
1:         assertEquals("2", paths.get(2).getDirective("1"));
1:     }
1: }
============================================================================