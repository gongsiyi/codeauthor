1:79b20bc: /*
1:79b20bc:  * Licensed under the Apache License, Version 2.0 (the "License");
1:79b20bc:  * you may not use this file except in compliance with the License.
1:79b20bc:  * You may obtain a copy of the License at
1:79b20bc:  *
1:79b20bc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:79b20bc:  *
1:79b20bc:  * Unless required by applicable law or agreed to in writing, software
1:79b20bc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:79b20bc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:79b20bc:  * See the License for the specific language governing permissions and
1:79b20bc:  * limitations under the License.
1:79b20bc:  */
1:79b20bc: package org.apache.aries.subsystem.core.content;
1:79b20bc: 
1:79b20bc: import java.io.IOException;
1:79b20bc: import java.io.InputStream;
1:79b20bc: import java.util.Dictionary;
1:79b20bc: import java.util.Map;
1:79b20bc: import java.util.Properties;
1:79b20bc: import java.util.concurrent.ConcurrentHashMap;
1:79b20bc: 
1:79b20bc: import org.apache.aries.subsystem.ContentHandler;
1:79b20bc: import org.osgi.framework.BundleContext;
1:bc6dcc9: import org.osgi.framework.InvalidSyntaxException;
1:79b20bc: import org.osgi.service.cm.Configuration;
1:79b20bc: import org.osgi.service.cm.ConfigurationAdmin;
1:79b20bc: import org.osgi.service.coordinator.Coordination;
1:79b20bc: import org.osgi.service.subsystem.Subsystem;
1:79b20bc: import org.osgi.util.tracker.ServiceTracker;
1:79b20bc: 
1:79b20bc: public class ConfigAdminContentHandler implements ContentHandler {
1:79b20bc:     public static final String FELIXCM_CONTENT_TYPE = "felix.cm.config";
1:79b20bc:     public static final String PROPERTIES_CONTENT_TYPE = "osgi.config.properties";
1:79b20bc:     public static final String[] CONTENT_TYPES = {PROPERTIES_CONTENT_TYPE, FELIXCM_CONTENT_TYPE};
1:79b20bc: 
1:79b20bc:     private final ServiceTracker<ConfigurationAdmin,ConfigurationAdmin> cmTracker;
1:bc6dcc9:     private final BundleContext ctx;
1:79b20bc:     private Map<String, Dictionary<String, Object>> configurations = new ConcurrentHashMap<String, Dictionary<String, Object>>();
1:79b20bc: 
1:79b20bc:     public ConfigAdminContentHandler(BundleContext ctx) {
1:bc6dcc9:         this.ctx = ctx;
1:79b20bc:         cmTracker = new ServiceTracker<ConfigurationAdmin, ConfigurationAdmin>(
1:79b20bc:                 ctx, ConfigurationAdmin.class, null);
1:79b20bc:         cmTracker.open();
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     public void shutDown() {
1:79b20bc:         cmTracker.close();
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override @SuppressWarnings({ "unchecked", "rawtypes" })
1:79b20bc:     public void install(InputStream is, String symbolicName, String contentType, Subsystem subsystem, Coordination coordination) {
1:79b20bc:         Dictionary configuration = null;
1:79b20bc:         try {
1:79b20bc:             if (PROPERTIES_CONTENT_TYPE.equals(contentType)) {
1:79b20bc:                 Properties p = new Properties();
1:79b20bc:                 p.load(is);
1:79b20bc:                 configuration = p;
1:79b20bc:             } else if (FELIXCM_CONTENT_TYPE.equals(contentType)) {
1:79b20bc:                 configuration = ConfigurationHandler.read(is);
1:79b20bc:             }
1:79b20bc:         } catch (IOException e) {
1:79b20bc:             coordination.fail(new Exception("Problem loading configuration " +
1:79b20bc:                     symbolicName + " for subsystem " + subsystem.getSymbolicName(), e));
1:79b20bc:             return;
1:79b20bc:         } finally {
1:79b20bc:             try { is.close(); } catch (IOException ioe) {}
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         if (configuration != null) {
1:79b20bc:             configurations.put(symbolicName, configuration);
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     public void start(String symbolicName, String contentType, Subsystem subsystem, Coordination coordination) {
1:79b20bc:         Dictionary<String, Object> configuration = configurations.get(symbolicName);
1:79b20bc:         if (configuration == null) {
1:79b20bc:             coordination.fail(new Exception("Cannot start configuration " + symbolicName + " for subsystem " + subsystem.getSymbolicName() +
1:79b20bc:                     " it was not previously loaded"));
1:79b20bc:             return;
1:79b20bc:         }
1:79b20bc: 
1:79b20bc:         try {
1:79b20bc:             ConfigurationAdmin cm = cmTracker.getService();
1:79b20bc:             if (cm == null) {
1:79b20bc:                 coordination.fail(new Exception("No Configuration Admin Service found. Cannot apply configuration " +
1:79b20bc:                         symbolicName + " to subsystem " + subsystem.getSymbolicName()));
1:79b20bc:                 return;
1:79b20bc:             }
1:bc6dcc9:             Configuration[] matchingConfs = cm.listConfigurations(
1:bc6dcc9:                     ctx.createFilter("(service.pid=" + symbolicName + ")").toString());
1:bc6dcc9:             if(matchingConfs == null || matchingConfs.length == 0) {
1:bc6dcc9:                 // No configuration exists: create a new one.
1:bc6dcc9:                 Configuration conf = cm.getConfiguration(symbolicName, "?");
1:bc6dcc9:                 conf.update(configuration);
1:bc6dcc9:             }
1:79b20bc: 
1:79b20bc:             // Update has happened, we can forget the configuration data now
1:79b20bc:             configurations.remove(symbolicName);
1:bc6dcc9:         } catch(InvalidSyntaxException e) {
1:bc6dcc9:             // Unlikely to happen.
1:bc6dcc9:             coordination.fail(new Exception("Failed to list existing configurations for " + symbolicName + " in subsystem " +
1:bc6dcc9:                     subsystem.getSymbolicName(), e));
1:79b20bc:         } catch (IOException e) {
1:79b20bc:             coordination.fail(new Exception("Problem applying configuration " + symbolicName + " in subsystem " +
1:79b20bc:                     subsystem.getSymbolicName(), e));
1:79b20bc:         }
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     public void stop(String symbolicName, String contentType, Subsystem subsystem) {
1:79b20bc:         // We don't remove the configuration on stop, as this is generally not desired.
1:79b20bc:         // Specifically, other changes may have been made to the configuration that we
1:79b20bc:         // don't want to wipe out.
1:79b20bc:     }
1:79b20bc: 
1:79b20bc:     @Override
1:79b20bc:     public void uninstall(String symbolicName, String contentType, Subsystem subsystem) {
1:79b20bc:         // Nothing to uninstall
1:79b20bc:     }
1:79b20bc: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:bc6dcc9
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.InvalidSyntaxException;
/////////////////////////////////////////////////////////////////////////
1:     private final BundleContext ctx;
1:         this.ctx = ctx;
/////////////////////////////////////////////////////////////////////////
1:             Configuration[] matchingConfs = cm.listConfigurations(
1:                     ctx.createFilter("(service.pid=" + symbolicName + ")").toString());
1:             if(matchingConfs == null || matchingConfs.length == 0) {
1:                 // No configuration exists: create a new one.
1:                 Configuration conf = cm.getConfiguration(symbolicName, "?");
1:                 conf.update(configuration);
1:             }
1:         } catch(InvalidSyntaxException e) {
1:             // Unlikely to happen.
1:             coordination.fail(new Exception("Failed to list existing configurations for " + symbolicName + " in subsystem " +
1:                     subsystem.getSymbolicName(), e));
commit:79b20bc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.content;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Dictionary;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.aries.subsystem.ContentHandler;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: public class ConfigAdminContentHandler implements ContentHandler {
1:     public static final String FELIXCM_CONTENT_TYPE = "felix.cm.config";
1:     public static final String PROPERTIES_CONTENT_TYPE = "osgi.config.properties";
1:     public static final String[] CONTENT_TYPES = {PROPERTIES_CONTENT_TYPE, FELIXCM_CONTENT_TYPE};
1: 
1:     private final ServiceTracker<ConfigurationAdmin,ConfigurationAdmin> cmTracker;
1:     private Map<String, Dictionary<String, Object>> configurations = new ConcurrentHashMap<String, Dictionary<String, Object>>();
1: 
1:     public ConfigAdminContentHandler(BundleContext ctx) {
1:         cmTracker = new ServiceTracker<ConfigurationAdmin, ConfigurationAdmin>(
1:                 ctx, ConfigurationAdmin.class, null);
1:         cmTracker.open();
1:     }
1: 
1:     public void shutDown() {
1:         cmTracker.close();
1:     }
1: 
1:     @Override @SuppressWarnings({ "unchecked", "rawtypes" })
1:     public void install(InputStream is, String symbolicName, String contentType, Subsystem subsystem, Coordination coordination) {
1:         Dictionary configuration = null;
1:         try {
1:             if (PROPERTIES_CONTENT_TYPE.equals(contentType)) {
1:                 Properties p = new Properties();
1:                 p.load(is);
1:                 configuration = p;
1:             } else if (FELIXCM_CONTENT_TYPE.equals(contentType)) {
1:                 configuration = ConfigurationHandler.read(is);
1:             }
1:         } catch (IOException e) {
1:             coordination.fail(new Exception("Problem loading configuration " +
1:                     symbolicName + " for subsystem " + subsystem.getSymbolicName(), e));
1:             return;
1:         } finally {
1:             try { is.close(); } catch (IOException ioe) {}
1:         }
1: 
1:         if (configuration != null) {
1:             configurations.put(symbolicName, configuration);
1:         }
1:     }
1: 
1:     @Override
1:     public void start(String symbolicName, String contentType, Subsystem subsystem, Coordination coordination) {
1:         Dictionary<String, Object> configuration = configurations.get(symbolicName);
1:         if (configuration == null) {
1:             coordination.fail(new Exception("Cannot start configuration " + symbolicName + " for subsystem " + subsystem.getSymbolicName() +
1:                     " it was not previously loaded"));
1:             return;
1:         }
1: 
1:         try {
1:             ConfigurationAdmin cm = cmTracker.getService();
1:             if (cm == null) {
1:                 coordination.fail(new Exception("No Configuration Admin Service found. Cannot apply configuration " +
1:                         symbolicName + " to subsystem " + subsystem.getSymbolicName()));
1:                 return;
1:             }
0:             Configuration conf = cm.getConfiguration(symbolicName, null);
0:             conf.update(configuration);
1: 
1:             // Update has happened, we can forget the configuration data now
1:             configurations.remove(symbolicName);
1:         } catch (IOException e) {
1:             coordination.fail(new Exception("Problem applying configuration " + symbolicName + " in subsystem " +
1:                     subsystem.getSymbolicName(), e));
1:         }
1:     }
1: 
1:     @Override
1:     public void stop(String symbolicName, String contentType, Subsystem subsystem) {
1:         // We don't remove the configuration on stop, as this is generally not desired.
1:         // Specifically, other changes may have been made to the configuration that we
1:         // don't want to wipe out.
1:     }
1: 
1:     @Override
1:     public void uninstall(String symbolicName, String contentType, Subsystem subsystem) {
1:         // Nothing to uninstall
1:     }
1: }
============================================================================