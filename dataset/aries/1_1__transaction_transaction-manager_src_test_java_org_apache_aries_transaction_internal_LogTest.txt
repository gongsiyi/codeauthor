1:8259fea: /**
1:8259fea:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:8259fea:  *  contributor license agreements.  See the NOTICE file distributed with
1:8259fea:  *  this work for additional information regarding copyright ownership.
1:8259fea:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:8259fea:  *  (the "License"); you may not use this file except in compliance with
1:8259fea:  *  the License.  You may obtain a copy of the License at
1:8259fea:  *
1:8259fea:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8259fea:  *
1:8259fea:  *  Unless required by applicable law or agreed to in writing, software
1:8259fea:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:8259fea:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8259fea:  *  See the License for the specific language governing permissions and
1:8259fea:  *  limitations under the License.
1:8259fea:  */
1:8259fea: 
1:6d5ae4f: package org.apache.aries.transaction.internal;
1:8259fea: 
1:8259fea: import java.io.File;
1:8259fea: import javax.transaction.SystemException;
1:8259fea: import javax.transaction.Transaction;
1:8259fea: import javax.transaction.TransactionManager;
1:8259fea: import javax.transaction.xa.XAException;
1:8259fea: import javax.transaction.xa.XAResource;
1:8259fea: import javax.transaction.xa.Xid;
1:8259fea: 
1:c391965: import org.apache.geronimo.transaction.log.HOWLLog;
1:8259fea: import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
1:8259fea: import org.apache.geronimo.transaction.manager.NamedXAResource;
1:8259fea: import org.apache.geronimo.transaction.manager.NamedXAResourceFactory;
1:8259fea: import org.apache.geronimo.transaction.manager.XidFactory;
1:8259fea: import org.junit.Before;
1:8259fea: import org.junit.Ignore;
1:8259fea: import org.junit.Test;
1:8259fea: 
1:8259fea: public class LogTest {
1:8259fea: 
1:8259fea:     int minThreads = 100;
1:8259fea:     int maxThreads = 100;
1:8259fea:     int minTxPerThread = 1000;
1:8259fea:     int maxTxPerThread = 1000;
1:8259fea: 
1:8259fea:     @Before
1:8259fea:     public void setUp() {
1:8259fea:         System.setProperty("org.slf4j.simplelogger.defaultlog", "error");
1:8259fea:     }
1:8259fea: 
1:8259fea:     @Test
1:8259fea:     @Ignore
1:8259fea:     public void testGeronimo() throws Exception {
1:8259fea:         System.err.println("Geronimo");
1:8259fea:         XidFactory xidFactory = new XidFactoryImpl("hi".getBytes());
1:8259fea:         HOWLLog txLog = new HOWLLog("org.objectweb.howl.log.BlockLogBuffer",
1:8259fea:                 4,
1:8259fea:                 true,
1:8259fea:                 true,
1:8259fea:                 50,
1:8259fea:                 new File(".").getAbsolutePath(),
1:8259fea:                 "log",
1:8259fea:                 "geronimo",
1:8259fea:                 512,
1:8259fea:                 0,
1:8259fea:                 2,
1:8259fea:                 4,
1:8259fea:                 -1,
1:8259fea:                 true,
1:8259fea:                 xidFactory,
1:8259fea:                 null);
1:8259fea:         txLog.doStart();
1:8259fea:         GeronimoTransactionManager tm = new GeronimoTransactionManager(600, xidFactory, txLog);
1:8259fea:         XAResource xar1 = new TestXAResource("res1");
1:8259fea:         XAResource xar2 = new TestXAResource("res2");
1:8259fea:         tm.registerNamedXAResourceFactory(new TestXAResourceFactory("res1"));
1:8259fea:         tm.registerNamedXAResourceFactory(new TestXAResourceFactory("res2"));
1:8259fea:         for (int i = minThreads; i <= maxThreads; i *= 10) {
1:8259fea:             for (int j = minTxPerThread; j <= maxTxPerThread; j *= 10) {
1:8259fea:                 long ms = testThroughput(tm, xar1, xar2, i, j);
1:8259fea:                 System.err.println("TPS (" + i + " threads, " + j + " tx) = " + ((i * j) / (ms / 1000.0)));
1:8259fea:             }
1:8259fea:         }
1:8259fea:         txLog.doStop();
1:8259fea:         System.err.println();
1:8259fea:         System.err.flush();
1:8259fea:     }
1:8259fea: 
1:8259fea:     public long testThroughput(final TransactionManager tm, final XAResource xar1, final XAResource xar2, final int nbThreads, final int nbTxPerThread) throws Exception {
1:8259fea:         Thread[] threads = new Thread[nbThreads];
1:8259fea:         for (int thIdx = 0; thIdx < nbThreads; thIdx++) {
1:8259fea:             threads[thIdx] = new Thread() {
1:8259fea:                 @Override
1:8259fea:                 public void run() {
1:8259fea:                     try {
1:8259fea:                         for (int txIdx = 0; txIdx < nbTxPerThread; txIdx++) {
1:8259fea:                             tm.begin();
1:8259fea:                             Transaction tx = tm.getTransaction();
1:8259fea:                             tx.enlistResource(xar1);
1:8259fea:                             tx.enlistResource(xar2);
1:8259fea:                             tx.commit();
1:8259fea:                         }
1:8259fea:                     } catch (Throwable t) {
1:8259fea:                         t.printStackTrace();
1:8259fea:                     }
1:8259fea:                 }
1:8259fea:             };
1:8259fea:         }
1:8259fea:         long t0 = System.currentTimeMillis();
1:8259fea:         for (int thIdx = 0; thIdx < nbThreads; thIdx++) {
1:8259fea:             threads[thIdx].start();
1:8259fea:         }
1:8259fea:         for (int thIdx = 0; thIdx < nbThreads; thIdx++) {
1:8259fea:             threads[thIdx].join();
1:8259fea:         }
1:8259fea:         long t1 = System.currentTimeMillis();
1:8259fea:         return t1 - t0;
1:8259fea:     }
1:8259fea: 
1:8259fea:     public static class TestXAResourceFactory implements NamedXAResourceFactory {
1:8259fea:         private final String name;
1:8259fea:         public TestXAResourceFactory(String name) {
1:8259fea:             this.name = name;
1:8259fea:         }
1:8259fea:         public String getName() {
1:8259fea:             return name;
1:8259fea:         }
1:8259fea:         public NamedXAResource getNamedXAResource() throws SystemException {
1:8259fea:             return new TestXAResource(name);
1:8259fea:         }
1:8259fea:         public void returnNamedXAResource(NamedXAResource namedXAResource) {
1:8259fea:         }
1:8259fea:     }
1:8259fea: 
1:8259fea:     public static class TestXAResource implements XAResource, NamedXAResource {
1:8259fea:         private final String name;
1:8259fea:         public TestXAResource(String name) {
1:8259fea:             this.name = name;
1:8259fea:         }
1:8259fea:         public String getName() {
1:8259fea:             return name;
1:8259fea:         }
1:8259fea:         public void commit(Xid xid, boolean b) throws XAException {
1:8259fea:         }
1:8259fea:         public void end(Xid xid, int i) throws XAException {
1:8259fea:         }
1:8259fea:         public void forget(Xid xid) throws XAException {
1:8259fea:         }
1:8259fea:         public int getTransactionTimeout() throws XAException {
1:8259fea:             return 0;
1:8259fea:         }
1:8259fea:         public boolean isSameRM(XAResource xaResource) throws XAException {
1:8259fea:             return xaResource instanceof TestXAResource && ((TestXAResource) xaResource).name.equals(name);
1:8259fea:         }
1:8259fea:         public int prepare(Xid xid) throws XAException {
1:8259fea:             return 0;
1:8259fea:         }
1:8259fea:         public Xid[] recover(int i) throws XAException {
1:8259fea:             return new Xid[0];
1:8259fea:         }
1:8259fea:         public void rollback(Xid xid) throws XAException {
1:8259fea:         }
1:8259fea:         public boolean setTransactionTimeout(int i) throws XAException {
1:8259fea:             return false;
1:8259fea:         }
1:8259fea:         public void start(Xid xid, int i) throws XAException {
1:8259fea:         }
1:8259fea:     }
1:8259fea: 
1:8259fea: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c391965
/////////////////////////////////////////////////////////////////////////
1: import org.apache.geronimo.transaction.log.HOWLLog;
commit:6d5ae4f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.transaction.internal;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.transaction.internal.HOWLLog;
0: import org.apache.aries.transaction.internal.XidFactoryImpl;
commit:8259fea
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: 
0: package org.apache.aries.transaction;
1: 
1: import java.io.File;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
1: import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
1: import org.apache.geronimo.transaction.manager.NamedXAResource;
1: import org.apache.geronimo.transaction.manager.NamedXAResourceFactory;
1: import org.apache.geronimo.transaction.manager.XidFactory;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: 
1: public class LogTest {
1: 
1:     int minThreads = 100;
1:     int maxThreads = 100;
1:     int minTxPerThread = 1000;
1:     int maxTxPerThread = 1000;
1: 
1:     @Before
1:     public void setUp() {
1:         System.setProperty("org.slf4j.simplelogger.defaultlog", "error");
1:     }
1: 
1:     @Test
1:     @Ignore
1:     public void testGeronimo() throws Exception {
1:         System.err.println("Geronimo");
1:         XidFactory xidFactory = new XidFactoryImpl("hi".getBytes());
1:         HOWLLog txLog = new HOWLLog("org.objectweb.howl.log.BlockLogBuffer",
1:                 4,
1:                 true,
1:                 true,
1:                 50,
1:                 new File(".").getAbsolutePath(),
1:                 "log",
1:                 "geronimo",
1:                 512,
1:                 0,
1:                 2,
1:                 4,
1:                 -1,
1:                 true,
1:                 xidFactory,
1:                 null);
1:         txLog.doStart();
1:         GeronimoTransactionManager tm = new GeronimoTransactionManager(600, xidFactory, txLog);
1:         XAResource xar1 = new TestXAResource("res1");
1:         XAResource xar2 = new TestXAResource("res2");
1:         tm.registerNamedXAResourceFactory(new TestXAResourceFactory("res1"));
1:         tm.registerNamedXAResourceFactory(new TestXAResourceFactory("res2"));
1:         for (int i = minThreads; i <= maxThreads; i *= 10) {
1:             for (int j = minTxPerThread; j <= maxTxPerThread; j *= 10) {
1:                 long ms = testThroughput(tm, xar1, xar2, i, j);
1:                 System.err.println("TPS (" + i + " threads, " + j + " tx) = " + ((i * j) / (ms / 1000.0)));
1:             }
1:         }
1:         txLog.doStop();
1:         System.err.println();
1:         System.err.flush();
1:     }
1: 
1:     public long testThroughput(final TransactionManager tm, final XAResource xar1, final XAResource xar2, final int nbThreads, final int nbTxPerThread) throws Exception {
1:         Thread[] threads = new Thread[nbThreads];
1:         for (int thIdx = 0; thIdx < nbThreads; thIdx++) {
1:             threads[thIdx] = new Thread() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         for (int txIdx = 0; txIdx < nbTxPerThread; txIdx++) {
1:                             tm.begin();
1:                             Transaction tx = tm.getTransaction();
1:                             tx.enlistResource(xar1);
1:                             tx.enlistResource(xar2);
1:                             tx.commit();
1:                         }
1:                     } catch (Throwable t) {
1:                         t.printStackTrace();
1:                     }
1:                 }
1:             };
1:         }
1:         long t0 = System.currentTimeMillis();
1:         for (int thIdx = 0; thIdx < nbThreads; thIdx++) {
1:             threads[thIdx].start();
1:         }
1:         for (int thIdx = 0; thIdx < nbThreads; thIdx++) {
1:             threads[thIdx].join();
1:         }
1:         long t1 = System.currentTimeMillis();
1:         return t1 - t0;
1:     }
1: 
1:     public static class TestXAResourceFactory implements NamedXAResourceFactory {
1:         private final String name;
1:         public TestXAResourceFactory(String name) {
1:             this.name = name;
1:         }
1:         public String getName() {
1:             return name;
1:         }
1:         public NamedXAResource getNamedXAResource() throws SystemException {
1:             return new TestXAResource(name);
1:         }
1:         public void returnNamedXAResource(NamedXAResource namedXAResource) {
1:         }
1:     }
1: 
1:     public static class TestXAResource implements XAResource, NamedXAResource {
1:         private final String name;
1:         public TestXAResource(String name) {
1:             this.name = name;
1:         }
1:         public String getName() {
1:             return name;
1:         }
1:         public void commit(Xid xid, boolean b) throws XAException {
1:         }
1:         public void end(Xid xid, int i) throws XAException {
1:         }
1:         public void forget(Xid xid) throws XAException {
1:         }
1:         public int getTransactionTimeout() throws XAException {
1:             return 0;
1:         }
1:         public boolean isSameRM(XAResource xaResource) throws XAException {
1:             return xaResource instanceof TestXAResource && ((TestXAResource) xaResource).name.equals(name);
1:         }
1:         public int prepare(Xid xid) throws XAException {
1:             return 0;
1:         }
1:         public Xid[] recover(int i) throws XAException {
1:             return new Xid[0];
1:         }
1:         public void rollback(Xid xid) throws XAException {
1:         }
1:         public boolean setTransactionTimeout(int i) throws XAException {
1:             return false;
1:         }
1:         public void start(Xid xid, int i) throws XAException {
1:         }
1:     }
1: 
1: }
============================================================================