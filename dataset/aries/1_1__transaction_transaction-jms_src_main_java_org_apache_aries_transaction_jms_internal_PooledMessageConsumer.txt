1:4243a2b: /**
1:4243a2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4243a2b:  * contributor license agreements.  See the NOTICE file distributed with
1:4243a2b:  * this work for additional information regarding copyright ownership.
1:4243a2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4243a2b:  * (the "License"); you may not use this file except in compliance with
1:4243a2b:  * the License.  You may obtain a copy of the License at
1:4243a2b:  *
1:4243a2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4243a2b:  *
1:4243a2b:  * Unless required by applicable law or agreed to in writing, software
1:4243a2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4243a2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4243a2b:  * See the License for the specific language governing permissions and
1:4243a2b:  * limitations under the License.
1:4243a2b:  */
1:4243a2b: package org.apache.aries.transaction.jms.internal;
1:4243a2b: 
1:4243a2b: import javax.jms.JMSException;
1:4243a2b: import javax.jms.Message;
1:4243a2b: import javax.jms.MessageConsumer;
1:4243a2b: import javax.jms.MessageListener;
1:4243a2b: 
1:4243a2b: /**
1:4243a2b:  * A {@link MessageConsumer} which was created by {@link PooledSession}.
1:4243a2b:  */
1:4243a2b: public class PooledMessageConsumer implements MessageConsumer {
1:4243a2b: 
1:4243a2b:     private final PooledSession session;
1:4243a2b:     private final MessageConsumer delegate;
1:4243a2b: 
1:4243a2b:     /**
1:4243a2b:      * Wraps the message consumer.
1:4243a2b:      *
1:4243a2b:      * @param session  the pooled session
1:4243a2b:      * @param delegate the created consumer to wrap
1:4243a2b:      */
1:4243a2b:     public PooledMessageConsumer(PooledSession session, MessageConsumer delegate) {
1:4243a2b:         this.session = session;
1:4243a2b:         this.delegate = delegate;
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void close() throws JMSException {
1:4243a2b:         // ensure session removes consumer as its closed now
1:4243a2b:         session.onConsumerClose(delegate);
1:4243a2b:         delegate.close();
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public MessageListener getMessageListener() throws JMSException {
1:4243a2b:         return delegate.getMessageListener();
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public String getMessageSelector() throws JMSException {
1:4243a2b:         return delegate.getMessageSelector();
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public Message receive() throws JMSException {
1:4243a2b:         return delegate.receive();
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public Message receive(long timeout) throws JMSException {
1:4243a2b:         return delegate.receive(timeout);
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public Message receiveNoWait() throws JMSException {
1:4243a2b:         return delegate.receiveNoWait();
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public void setMessageListener(MessageListener listener) throws JMSException {
1:4243a2b:         delegate.setMessageListener(listener);
1:4243a2b:     }
1:4243a2b: 
1:4243a2b:     public String toString() {
1:4243a2b:         return delegate.toString();
1:4243a2b:     }
1:4243a2b: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:4243a2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.transaction.jms.internal;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: 
1: /**
1:  * A {@link MessageConsumer} which was created by {@link PooledSession}.
1:  */
1: public class PooledMessageConsumer implements MessageConsumer {
1: 
1:     private final PooledSession session;
1:     private final MessageConsumer delegate;
1: 
1:     /**
1:      * Wraps the message consumer.
1:      *
1:      * @param session  the pooled session
1:      * @param delegate the created consumer to wrap
1:      */
1:     public PooledMessageConsumer(PooledSession session, MessageConsumer delegate) {
1:         this.session = session;
1:         this.delegate = delegate;
1:     }
1: 
1:     public void close() throws JMSException {
1:         // ensure session removes consumer as its closed now
1:         session.onConsumerClose(delegate);
1:         delegate.close();
1:     }
1: 
1:     public MessageListener getMessageListener() throws JMSException {
1:         return delegate.getMessageListener();
1:     }
1: 
1:     public String getMessageSelector() throws JMSException {
1:         return delegate.getMessageSelector();
1:     }
1: 
1:     public Message receive() throws JMSException {
1:         return delegate.receive();
1:     }
1: 
1:     public Message receive(long timeout) throws JMSException {
1:         return delegate.receive(timeout);
1:     }
1: 
1:     public Message receiveNoWait() throws JMSException {
1:         return delegate.receiveNoWait();
1:     }
1: 
1:     public void setMessageListener(MessageListener listener) throws JMSException {
1:         delegate.setMessageListener(listener);
1:     }
1: 
1:     public String toString() {
1:         return delegate.toString();
1:     }
1: }
============================================================================