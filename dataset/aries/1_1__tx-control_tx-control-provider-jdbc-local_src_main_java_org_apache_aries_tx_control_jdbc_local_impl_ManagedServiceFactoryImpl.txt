1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:f92844b: package org.apache.aries.tx.control.jdbc.local.impl;
11:f92844b: 
1:f92844b: import static java.util.Arrays.asList;
1:f92844b: import static org.osgi.framework.Constants.OBJECTCLASS;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_DATABASE_NAME;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_DATASOURCE_NAME;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_DESCRIPTION;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_NETWORK_PROTOCOL;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_PASSWORD;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_PORT_NUMBER;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_ROLE_NAME;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_SERVER_NAME;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_URL;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_USER;
1:f92844b: import static org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS;
1:f92844b: 
1:f92844b: import java.util.Arrays;
1:f92844b: import java.util.Collection;
1:f92844b: import java.util.Dictionary;
1:f92844b: import java.util.Hashtable;
1:f92844b: import java.util.List;
1:f92844b: import java.util.Map;
1:f92844b: import java.util.Properties;
1:f92844b: import java.util.concurrent.atomic.AtomicReference;
1:f92844b: 
1:2906477: import org.apache.aries.tx.control.jdbc.common.impl.AbstractJDBCConnectionProvider;
1:7c388cb: import org.apache.aries.tx.control.resource.common.impl.ConfigurationDefinedResourceFactory;
1:7c388cb: import org.apache.aries.tx.control.resource.common.impl.LifecycleAware;
1:f92844b: import org.osgi.framework.BundleContext;
1:f92844b: import org.osgi.framework.InvalidSyntaxException;
1:f92844b: import org.osgi.framework.ServiceReference;
1:f92844b: import org.osgi.framework.ServiceRegistration;
1:f92844b: import org.osgi.service.cm.ConfigurationException;
1:f92844b: import org.osgi.service.jdbc.DataSourceFactory;
1:f92844b: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1:f92844b: import org.osgi.util.tracker.ServiceTracker;
1:f92844b: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1:dc32551: import org.slf4j.Logger;
1:dc32551: import org.slf4j.LoggerFactory;
1:f92844b: 
1:7c388cb: public class ManagedServiceFactoryImpl extends ConfigurationDefinedResourceFactory {
1:f92844b: 
1:dc32551: 	private static final Logger LOG = LoggerFactory.getLogger(ManagedServiceFactoryImpl.class);
1:dc32551: 	
1:f92844b: 	private static final String DSF_TARGET_FILTER = "aries.dsf.target.filter";
1:f92844b: 	private static final String JDBC_PROP_NAMES = "aries.jdbc.property.names";
1:f92844b: 	private static final List<String> JDBC_PROPERTIES = asList(JDBC_DATABASE_NAME, JDBC_DATASOURCE_NAME,
1:f92844b: 			JDBC_DESCRIPTION, JDBC_NETWORK_PROTOCOL, JDBC_PASSWORD, JDBC_PORT_NUMBER, JDBC_ROLE_NAME, JDBC_SERVER_NAME,
1:f92844b: 			JDBC_URL, JDBC_USER);
1:f92844b: 
1:f92844b: 	public ManagedServiceFactoryImpl(BundleContext context) {
1:7c388cb: 		super(context);
4:f92844b: 	}
1:f92844b: 
2:f92844b: 	@Override
1:f92844b: 	public String getName() {
1:f92844b: 		return "Aries JDBCConnectionProvider (Local only) service";
1:f92844b: 	}
1:f92844b: 
1:f92844b: 	@Override
1:7c388cb: 	protected LifecycleAware getConfigurationDrivenResource(BundleContext context, 
1:7c388cb: 			String pid, Map<String, Object> properties) throws Exception {
1:7c388cb: 		Properties jdbcProps = getJdbcProps(pid, properties);
1:7c388cb: 	
1:f92844b: 		try {
1:7c388cb: 			return new ManagedJDBCResourceProvider(context, pid, jdbcProps, properties);
1:f92844b: 		} catch (InvalidSyntaxException e) {
1:dc32551: 			LOG.error("The configuration {} contained an invalid target filter {}", pid, e.getFilter());
1:f92844b: 			throw new ConfigurationException(DSF_TARGET_FILTER, "The target filter was invalid", e);
1:f92844b: 		}
1:f92844b: 	}
1:f92844b: 
1:f92844b: 	@SuppressWarnings("unchecked")
1:dc32551: 	private Properties getJdbcProps(String pid, Map<String, Object> properties) throws ConfigurationException {
1:f92844b: 
1:f92844b: 		Object object = properties.getOrDefault(JDBC_PROP_NAMES, JDBC_PROPERTIES);
1:f92844b: 		Collection<String> propnames;
1:f92844b: 		if (object instanceof String) {
1:f92844b: 			propnames = Arrays.asList(((String) object).split(","));
1:f92844b: 		} else if (object instanceof String[]) {
1:f92844b: 			propnames = Arrays.asList((String[]) object);
1:f92844b: 		} else if (object instanceof Collection) {
1:f92844b: 			propnames = (Collection<String>) object;
1:f92844b: 		} else {
1:dc32551: 			LOG.error("The configuration {} contained an invalid list of JDBC property names", pid, object);
1:f92844b: 			throw new ConfigurationException(JDBC_PROP_NAMES,
1:f92844b: 					"The jdbc property names must be a String+ or comma-separated String");
1:f92844b: 		}
1:f92844b: 
1:f92844b: 		Properties p = new Properties();
1:f92844b: 
1:f92844b: 		propnames.stream().filter(properties::containsKey)
1:f92844b: 				.forEach(s -> p.setProperty(s, String.valueOf(properties.get(s))));
1:f92844b: 
1:f92844b: 		return p;
1:f92844b: 	}
1:f92844b: 
1:f92844b: 	private static class ManagedJDBCResourceProvider
1:7c388cb: 			implements ServiceTrackerCustomizer<DataSourceFactory, DataSourceFactory>, LifecycleAware {
1:f92844b: 
2:f92844b: 		private final BundleContext context;
1:dc32551: 		private final String pid;
1:f92844b: 		private final Properties jdbcProperties;
1:f92844b: 		private final Map<String, Object> providerProperties;
1:f92844b: 		private final ServiceTracker<DataSourceFactory, DataSourceFactory> dsfTracker;
1:f92844b: 
1:f92844b: 		private final AtomicReference<DataSourceFactory> activeDsf = new AtomicReference<>();
1:f92844b: 		private final AtomicReference<ServiceRegistration<JDBCConnectionProvider>> serviceReg = new AtomicReference<>();
1:2906477: 		private final AtomicReference<AbstractJDBCConnectionProvider> providerObject = new AtomicReference<>();
1:f92844b: 
1:dc32551: 		public ManagedJDBCResourceProvider(BundleContext context, String pid, Properties jdbcProperties,
1:f92844b: 				Map<String, Object> providerProperties) throws InvalidSyntaxException, ConfigurationException {
2:f92844b: 			this.context = context;
1:dc32551: 			this.pid = pid;
1:f92844b: 			this.jdbcProperties = jdbcProperties;
1:f92844b: 			this.providerProperties = providerProperties;
1:f92844b: 
1:f92844b: 			String targetFilter = (String) providerProperties.get(DSF_TARGET_FILTER);
1:f92844b: 			if (targetFilter == null) {
1:f92844b: 				String driver = (String) providerProperties.get(OSGI_JDBC_DRIVER_CLASS);
1:f92844b: 				if (driver == null) {
1:dc32551: 					LOG.error("The configuration {} must specify a target filter or a JDBC driver class", pid);
1:f92844b: 					throw new ConfigurationException(OSGI_JDBC_DRIVER_CLASS,
1:f92844b: 							"The configuration must specify either a target filter or a JDBC driver class");
1:f92844b: 				}
1:8adb3c5: 				targetFilter = "(&(" + OBJECTCLASS + "=" + DataSourceFactory.class.getName() + ")(" + OSGI_JDBC_DRIVER_CLASS + "=" + driver + "))";
1:f92844b: 			}
1:f92844b: 
1:f92844b: 			targetFilter = "(&(" + OBJECTCLASS + "=" + DataSourceFactory.class.getName() + ")" + targetFilter + ")";
1:f92844b: 
1:f92844b: 			this.dsfTracker = new ServiceTracker<>(context, context.createFilter(targetFilter), this);
1:f92844b: 		}
1:f92844b: 
1:f92844b: 		public void start() {
1:f92844b: 			dsfTracker.open();
1:f92844b: 		}
1:f92844b: 
2:f92844b: 		public void stop() {
1:f92844b: 			dsfTracker.close();
1:f92844b: 		}
1:f92844b: 
1:f92844b: 		@Override
1:f92844b: 		public DataSourceFactory addingService(ServiceReference<DataSourceFactory> reference) {
1:f92844b: 			DataSourceFactory service = context.getService(reference);
1:f92844b: 
1:f92844b: 			updateService(service);
1:f92844b: 			return service;
1:f92844b: 		}
1:f92844b: 
1:f92844b: 		private void updateService(DataSourceFactory service) {
1:f92844b: 			boolean setDsf;
1:f92844b: 			synchronized (this) {
1:f92844b: 				setDsf = activeDsf.compareAndSet(null, service);
1:f92844b: 			}
1:f92844b: 
1:f92844b: 			if (setDsf) {
1:2906477: 				AbstractJDBCConnectionProvider provider = null;
1:2906477: 				ServiceRegistration<JDBCConnectionProvider> reg = null;
1:f92844b: 				try {
1:2906477: 					provider = new JDBCConnectionProviderFactoryImpl().getProviderFor(service,
1:f92844b: 							jdbcProperties, providerProperties);
1:2906477: 					reg = context.registerService(JDBCConnectionProvider.class, 
1:2906477: 							provider, getServiceProperties());
1:2906477: 					synchronized (this) {
1:2906477: 						if (!serviceReg.compareAndSet(null, reg)) {
1:2906477: 							throw new IllegalStateException("Unable to set the JDBC connection provider registration");
1:2906477: 						} else {
1:2906477: 							providerObject.set(provider);
1:2906477: 						}
1:f92844b: 					}
1:f92844b: 				} catch (Exception e) {
1:f92844b: 					activeDsf.compareAndSet(service, null);
1:2906477: 					safeUnregister(reg, provider);
1:2906477: 					LOG.error("An error occurred when creating the connection provider for {}.", pid, e);
1:f92844b: 				}
1:f92844b: 			}
1:f92844b: 		}
1:f92844b: 
1:f92844b: 		private Dictionary<String, ?> getServiceProperties() {
1:f92844b: 			Hashtable<String, Object> props = new Hashtable<>();
1:8adb3c5: 			providerProperties.keySet().stream()
1:8adb3c5: 					.filter(s -> !s.startsWith("."))
1:8adb3c5: 					.filter(s -> !JDBC_PASSWORD.equals(s))
1:f92844b: 					.forEach(s -> props.put(s, providerProperties.get(s)));
1:f92844b: 			return props;
1:f92844b: 		}
1:f92844b: 
1:f92844b: 		@Override
1:f92844b: 		public void modifiedService(ServiceReference<DataSourceFactory> reference, DataSourceFactory service) {
1:f92844b: 		}
1:f92844b: 
1:f92844b: 		@Override
1:f92844b: 		public void removedService(ServiceReference<DataSourceFactory> reference, DataSourceFactory service) {
1:f92844b: 			boolean dsfLeft;
1:f92844b: 			ServiceRegistration<JDBCConnectionProvider> oldReg = null;
1:2906477: 			AbstractJDBCConnectionProvider oldProvider = null;
1:f92844b: 			synchronized (this) {
1:f92844b: 				dsfLeft = activeDsf.compareAndSet(service, null);
2:f92844b: 				if (dsfLeft) {
1:f92844b: 					oldReg = serviceReg.getAndSet(null);
1:2906477: 					oldProvider = providerObject.getAndSet(null);
1:f92844b: 				}
1:f92844b: 			}
1:2906477: 			
1:2906477: 			safeUnregister(oldReg, oldProvider);
1:f92844b: 
1:2906477: 			if (dsfLeft) {
1:2906477: 				DataSourceFactory newDSF = dsfTracker.getService();
1:2906477: 				if (newDSF != null) {
1:2906477: 					updateService(dsfTracker.getService());
1:2906477: 				}
1:2906477: 			}
1:2906477: 		}
1:2906477: 
1:2906477: 		private void safeUnregister(ServiceRegistration<?> oldReg, 
1:2906477: 				AbstractJDBCConnectionProvider provider) {
1:f92844b: 			if (oldReg != null) {
1:f92844b: 				try {
1:f92844b: 					oldReg.unregister();
1:f92844b: 				} catch (IllegalStateException ise) {
1:dc32551: 					LOG.debug("An exception occurred when unregistering a service for {}", pid);
1:f92844b: 				}
1:f92844b: 			}
1:2906477: 			if(provider != null) {
1:2906477: 				try {
1:2906477: 					provider.close();
1:2906477: 				} catch (Exception e) {
1:2906477: 					LOG.debug("An exception occurred when closing a provider for {}", pid, e);
1:f92844b: 				}
1:f92844b: 			}
1:f92844b: 		}
1:f92844b: 	}
1:f92844b: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7c388cb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.resource.common.impl.ConfigurationDefinedResourceFactory;
1: import org.apache.aries.tx.control.resource.common.impl.LifecycleAware;
/////////////////////////////////////////////////////////////////////////
1: public class ManagedServiceFactoryImpl extends ConfigurationDefinedResourceFactory {
/////////////////////////////////////////////////////////////////////////
1: 		super(context);
/////////////////////////////////////////////////////////////////////////
1: 	protected LifecycleAware getConfigurationDrivenResource(BundleContext context, 
1: 			String pid, Map<String, Object> properties) throws Exception {
1: 		Properties jdbcProps = getJdbcProps(pid, properties);
1: 	
1: 			return new ManagedJDBCResourceProvider(context, pid, jdbcProps, properties);
/////////////////////////////////////////////////////////////////////////
1: 			implements ServiceTrackerCustomizer<DataSourceFactory, DataSourceFactory>, LifecycleAware {
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.tx.control.jdbc.common.impl.AbstractJDBCConnectionProvider;
/////////////////////////////////////////////////////////////////////////
1: 		private final AtomicReference<AbstractJDBCConnectionProvider> providerObject = new AtomicReference<>();
/////////////////////////////////////////////////////////////////////////
1: 				AbstractJDBCConnectionProvider provider = null;
1: 				ServiceRegistration<JDBCConnectionProvider> reg = null;
1: 					provider = new JDBCConnectionProviderFactoryImpl().getProviderFor(service,
1: 					reg = context.registerService(JDBCConnectionProvider.class, 
1: 							provider, getServiceProperties());
1: 					synchronized (this) {
1: 						if (!serviceReg.compareAndSet(null, reg)) {
1: 							throw new IllegalStateException("Unable to set the JDBC connection provider registration");
1: 						} else {
1: 							providerObject.set(provider);
1: 						}
1: 					safeUnregister(reg, provider);
1: 					LOG.error("An error occurred when creating the connection provider for {}.", pid, e);
/////////////////////////////////////////////////////////////////////////
1: 			AbstractJDBCConnectionProvider oldProvider = null;
1: 					oldProvider = providerObject.getAndSet(null);
1: 			
1: 			safeUnregister(oldReg, oldProvider);
1: 			if (dsfLeft) {
1: 				DataSourceFactory newDSF = dsfTracker.getService();
1: 				if (newDSF != null) {
1: 					updateService(dsfTracker.getService());
1: 				}
1: 			}
1: 		}
1: 
1: 		private void safeUnregister(ServiceRegistration<?> oldReg, 
1: 				AbstractJDBCConnectionProvider provider) {
/////////////////////////////////////////////////////////////////////////
1: 			if(provider != null) {
1: 				try {
1: 					provider.close();
1: 				} catch (Exception e) {
1: 					LOG.debug("An exception occurred when closing a provider for {}", pid, e);
commit:8adb3c5
/////////////////////////////////////////////////////////////////////////
1: 				targetFilter = "(&(" + OBJECTCLASS + "=" + DataSourceFactory.class.getName() + ")(" + OSGI_JDBC_DRIVER_CLASS + "=" + driver + "))";
/////////////////////////////////////////////////////////////////////////
1: 			providerProperties.keySet().stream()
1: 					.filter(s -> !s.startsWith("."))
1: 					.filter(s -> !JDBC_PASSWORD.equals(s))
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:dc32551
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger LOG = LoggerFactory.getLogger(ManagedServiceFactoryImpl.class);
1: 	
/////////////////////////////////////////////////////////////////////////
0: 		Properties jdbcProps = getJdbcProps(pid, propsMap);
0: 			ManagedJDBCResourceProvider mjrp = new ManagedJDBCResourceProvider(context, pid, jdbcProps, propsMap);
1: 			LOG.error("The configuration {} contained an invalid target filter {}", pid, e.getFilter());
/////////////////////////////////////////////////////////////////////////
1: 	private Properties getJdbcProps(String pid, Map<String, Object> properties) throws ConfigurationException {
/////////////////////////////////////////////////////////////////////////
1: 			LOG.error("The configuration {} contained an invalid list of JDBC property names", pid, object);
/////////////////////////////////////////////////////////////////////////
1: 		private final String pid;
/////////////////////////////////////////////////////////////////////////
1: 		public ManagedJDBCResourceProvider(BundleContext context, String pid, Properties jdbcProperties,
1: 			this.pid = pid;
/////////////////////////////////////////////////////////////////////////
1: 					LOG.error("The configuration {} must specify a target filter or a JDBC driver class", pid);
/////////////////////////////////////////////////////////////////////////
0: 					LOG.error("An error occurred when creating the connection provider for {}.", pid, e);
/////////////////////////////////////////////////////////////////////////
1: 					LOG.debug("An exception occurred when unregistering a service for {}", pid);
commit:f92844b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.jdbc.local.impl;
1: 
1: import static java.util.Arrays.asList;
0: import static java.util.Optional.ofNullable;
1: import static org.osgi.framework.Constants.OBJECTCLASS;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_DATABASE_NAME;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_DATASOURCE_NAME;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_DESCRIPTION;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_NETWORK_PROTOCOL;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_PASSWORD;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_PORT_NUMBER;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_ROLE_NAME;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_SERVER_NAME;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_URL;
1: import static org.osgi.service.jdbc.DataSourceFactory.JDBC_USER;
1: import static org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Dictionary;
0: import java.util.Enumeration;
0: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
0: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ConfigurationException;
0: import org.osgi.service.cm.ManagedServiceFactory;
1: import org.osgi.service.jdbc.DataSourceFactory;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProvider;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.osgi.util.tracker.ServiceTrackerCustomizer;
1: 
0: public class ManagedServiceFactoryImpl implements ManagedServiceFactory {
1: 
1: 	private static final String DSF_TARGET_FILTER = "aries.dsf.target.filter";
1: 	private static final String JDBC_PROP_NAMES = "aries.jdbc.property.names";
1: 	private static final List<String> JDBC_PROPERTIES = asList(JDBC_DATABASE_NAME, JDBC_DATASOURCE_NAME,
1: 			JDBC_DESCRIPTION, JDBC_NETWORK_PROTOCOL, JDBC_PASSWORD, JDBC_PORT_NUMBER, JDBC_ROLE_NAME, JDBC_SERVER_NAME,
1: 			JDBC_URL, JDBC_USER);
1: 
0: 	private final Map<String, ManagedJDBCResourceProvider> managedInstances = new ConcurrentHashMap<>();
1: 
1: 	private final BundleContext context;
1: 
1: 	public ManagedServiceFactoryImpl(BundleContext context) {
1: 		this.context = context;
1: 	}
1: 
1: 	@Override
1: 	public String getName() {
1: 		return "Aries JDBCConnectionProvider (Local only) service";
1: 	}
1: 
1: 	@Override
0: 	public void updated(String pid, Dictionary<String, ?> properties) throws ConfigurationException {
1: 
0: 		Map<String, Object> propsMap = new HashMap<>();
1: 
0: 		Enumeration<String> keys = properties.keys();
0: 		while (keys.hasMoreElements()) {
0: 			String key = keys.nextElement();
0: 			propsMap.put(key, properties.get(key));
1: 		}
1: 
0: 		Properties jdbcProps = getJdbcProps(propsMap);
1: 
1: 		try {
0: 			ManagedJDBCResourceProvider mjrp = new ManagedJDBCResourceProvider(context, jdbcProps, propsMap);
0: 			ofNullable(managedInstances.put(pid, mjrp)).ifPresent(ManagedJDBCResourceProvider::stop);
0: 			mjrp.start();
1: 		} catch (InvalidSyntaxException e) {
1: 			throw new ConfigurationException(DSF_TARGET_FILTER, "The target filter was invalid", e);
1: 		}
1: 	}
1: 
1: 	public void stop() {
0: 		managedInstances.values().forEach(ManagedJDBCResourceProvider::stop);
1: 	}
1: 
1: 	@SuppressWarnings("unchecked")
0: 	private Properties getJdbcProps(Map<String, Object> properties) throws ConfigurationException {
1: 
1: 		Object object = properties.getOrDefault(JDBC_PROP_NAMES, JDBC_PROPERTIES);
1: 		Collection<String> propnames;
1: 		if (object instanceof String) {
1: 			propnames = Arrays.asList(((String) object).split(","));
1: 		} else if (object instanceof String[]) {
1: 			propnames = Arrays.asList((String[]) object);
1: 		} else if (object instanceof Collection) {
1: 			propnames = (Collection<String>) object;
1: 		} else {
1: 			throw new ConfigurationException(JDBC_PROP_NAMES,
1: 					"The jdbc property names must be a String+ or comma-separated String");
1: 		}
1: 
1: 		Properties p = new Properties();
1: 
1: 		propnames.stream().filter(properties::containsKey)
1: 				.forEach(s -> p.setProperty(s, String.valueOf(properties.get(s))));
1: 
1: 		return p;
1: 	}
1: 
1: 	@Override
0: 	public void deleted(String pid) {
0: 		ofNullable(managedInstances.remove(pid))
0: 			.ifPresent(ManagedJDBCResourceProvider::stop);
1: 	}
1: 
1: 	private static class ManagedJDBCResourceProvider
0: 			implements ServiceTrackerCustomizer<DataSourceFactory, DataSourceFactory> {
1: 
1: 		private final BundleContext context;
1: 		private final Properties jdbcProperties;
1: 		private final Map<String, Object> providerProperties;
1: 		private final ServiceTracker<DataSourceFactory, DataSourceFactory> dsfTracker;
1: 
1: 		private final AtomicReference<DataSourceFactory> activeDsf = new AtomicReference<>();
1: 		private final AtomicReference<ServiceRegistration<JDBCConnectionProvider>> serviceReg = new AtomicReference<>();
1: 
0: 		public ManagedJDBCResourceProvider(BundleContext context, Properties jdbcProperties,
1: 				Map<String, Object> providerProperties) throws InvalidSyntaxException, ConfigurationException {
1: 			this.context = context;
1: 			this.jdbcProperties = jdbcProperties;
1: 			this.providerProperties = providerProperties;
1: 
1: 			String targetFilter = (String) providerProperties.get(DSF_TARGET_FILTER);
1: 			if (targetFilter == null) {
1: 				String driver = (String) providerProperties.get(OSGI_JDBC_DRIVER_CLASS);
1: 				if (driver == null) {
1: 					throw new ConfigurationException(OSGI_JDBC_DRIVER_CLASS,
1: 							"The configuration must specify either a target filter or a JDBC driver class");
1: 				}
0: 				targetFilter = "(" + OSGI_JDBC_DRIVER_CLASS + "=" + driver + ")";
1: 			}
1: 
1: 			targetFilter = "(&(" + OBJECTCLASS + "=" + DataSourceFactory.class.getName() + ")" + targetFilter + ")";
1: 
1: 			this.dsfTracker = new ServiceTracker<>(context, context.createFilter(targetFilter), this);
1: 		}
1: 
1: 		public void start() {
1: 			dsfTracker.open();
1: 		}
1: 
1: 		public void stop() {
1: 			dsfTracker.close();
1: 		}
1: 
1: 		@Override
1: 		public DataSourceFactory addingService(ServiceReference<DataSourceFactory> reference) {
1: 			DataSourceFactory service = context.getService(reference);
1: 
1: 			updateService(service);
1: 			return service;
1: 		}
1: 
1: 		private void updateService(DataSourceFactory service) {
1: 			boolean setDsf;
1: 			synchronized (this) {
1: 				setDsf = activeDsf.compareAndSet(null, service);
1: 			}
1: 
1: 			if (setDsf) {
1: 				try {
0: 					JDBCConnectionProvider provider = new JDBCConnectionProviderFactoryImpl().getProviderFor(service,
1: 							jdbcProperties, providerProperties);
0: 					ServiceRegistration<JDBCConnectionProvider> reg = context
0: 							.registerService(JDBCConnectionProvider.class, provider, getServiceProperties());
0: 					if (!serviceReg.compareAndSet(null, reg)) {
0: 						throw new IllegalStateException("Unable to set the JDBC connection provider registration");
1: 					}
1: 				} catch (Exception e) {
1: 					activeDsf.compareAndSet(service, null);
1: 				}
1: 			}
1: 		}
1: 
1: 		private Dictionary<String, ?> getServiceProperties() {
1: 			Hashtable<String, Object> props = new Hashtable<>();
0: 			providerProperties.keySet().stream().filter(s -> !JDBC_PASSWORD.equals(s))
1: 					.forEach(s -> props.put(s, providerProperties.get(s)));
1: 			return props;
1: 		}
1: 
1: 		@Override
1: 		public void modifiedService(ServiceReference<DataSourceFactory> reference, DataSourceFactory service) {
1: 		}
1: 
1: 		@Override
1: 		public void removedService(ServiceReference<DataSourceFactory> reference, DataSourceFactory service) {
1: 			boolean dsfLeft;
1: 			ServiceRegistration<JDBCConnectionProvider> oldReg = null;
1: 			synchronized (this) {
1: 				dsfLeft = activeDsf.compareAndSet(service, null);
1: 				if (dsfLeft) {
1: 					oldReg = serviceReg.getAndSet(null);
1: 				}
1: 			}
1: 
1: 			if (oldReg != null) {
1: 				try {
1: 					oldReg.unregister();
1: 				} catch (IllegalStateException ise) {
1: 
1: 				}
1: 			}
1: 
1: 			if (dsfLeft) {
0: 				DataSourceFactory newDSF = dsfTracker.getService();
0: 				if (newDSF != null) {
0: 					updateService(dsfTracker.getService());
1: 				}
1: 			}
1: 		}
1: 	}
1: }
============================================================================