1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:0d3d319: package org.apache.aries.async.promise.test;
1:0d3d319: 
1:0d3d319: import org.osgi.util.promise.Deferred;
1:0d3d319: import org.osgi.util.promise.Promise;
1:0d3d319: import org.junit.Test;
1:0d3d319: 
1:0d3d319: import java.util.concurrent.CountDownLatch;
1:0d3d319: import java.util.concurrent.TimeUnit;
1:0d3d319: 
1:0d3d319: import static org.junit.Assert.assertEquals;
1:0d3d319: import static org.junit.Assert.assertTrue;
1:0d3d319: 
1:0d3d319: public class CallbackTest {
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testCallbacks() throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         final Promise<String> promise = def.getPromise();
1:0d3d319: 
1:0d3d319:         Callback cb1 = new Callback(promise, "Hello");
1:0d3d319:         assertEquals("onResolve returns promise", promise, promise.onResolve(cb1));
1:0d3d319: 
1:0d3d319:         Callback cb2 = new Callback(promise, "Hello");
1:0d3d319:         promise.onResolve(cb2);
1:0d3d319: 
1:0d3d319:         def.resolve("Hello");
1:0d3d319: 
1:0d3d319:         assertTrue("callback1 executed", cb1.latch.await(1, TimeUnit.SECONDS));
1:0d3d319:         assertEquals("callback1 succeeded", null, cb1.error);
1:0d3d319: 
1:0d3d319:         assertTrue("callback2 executed", cb2.latch.await(1, TimeUnit.SECONDS));
1:0d3d319:         assertEquals("callback2 succeeded", null, cb2.error);
1:0d3d319: 
1:0d3d319:         // register callback after promise is resolved
1:0d3d319:         Callback cb3 = new Callback(promise, "Hello");
1:0d3d319:         promise.onResolve(cb3);
1:0d3d319:         assertTrue("callback3 executed", cb3.latch.await(1, TimeUnit.SECONDS));
1:0d3d319:         assertEquals("callback3 succeeded", null, cb3.error);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319: 
1:0d3d319:     class Callback implements Runnable {
1:0d3d319:         final CountDownLatch latch = new CountDownLatch(1);
1:0d3d319:         Throwable error = null;
1:0d3d319: 
1:0d3d319:         private final Promise promise;
1:0d3d319:         private final Object value;
1:0d3d319: 
1:0d3d319:         Callback(Promise promise, Object value) {
1:0d3d319:             this.promise = promise;
1:0d3d319:             this.value = value;
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         @Override
1:0d3d319:         public void run() {
1:0d3d319:             try {
1:0d3d319:                 assertTrue("Promise resolved", promise.isDone());
1:0d3d319:                 assertEquals("Value matches", value, promise.getValue());
1:0d3d319:             }
1:0d3d319:             catch (Throwable t) {
1:0d3d319:                 error = t;
1:0d3d319:             }
1:0d3d319:             finally {
1:0d3d319:                 latch.countDown();
1:0d3d319:             }
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319: 
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.promise.test;
1: 
1: import org.osgi.util.promise.Deferred;
1: import org.osgi.util.promise.Promise;
1: import org.junit.Test;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class CallbackTest {
1: 
1:     @Test
1:     public void testCallbacks() throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         final Promise<String> promise = def.getPromise();
1: 
1:         Callback cb1 = new Callback(promise, "Hello");
1:         assertEquals("onResolve returns promise", promise, promise.onResolve(cb1));
1: 
1:         Callback cb2 = new Callback(promise, "Hello");
1:         promise.onResolve(cb2);
1: 
1:         def.resolve("Hello");
1: 
1:         assertTrue("callback1 executed", cb1.latch.await(1, TimeUnit.SECONDS));
1:         assertEquals("callback1 succeeded", null, cb1.error);
1: 
1:         assertTrue("callback2 executed", cb2.latch.await(1, TimeUnit.SECONDS));
1:         assertEquals("callback2 succeeded", null, cb2.error);
1: 
1:         // register callback after promise is resolved
1:         Callback cb3 = new Callback(promise, "Hello");
1:         promise.onResolve(cb3);
1:         assertTrue("callback3 executed", cb3.latch.await(1, TimeUnit.SECONDS));
1:         assertEquals("callback3 succeeded", null, cb3.error);
1:     }
1: 
1: 
1:     class Callback implements Runnable {
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         Throwable error = null;
1: 
1:         private final Promise promise;
1:         private final Object value;
1: 
1:         Callback(Promise promise, Object value) {
1:             this.promise = promise;
1:             this.value = value;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 assertTrue("Promise resolved", promise.isDone());
1:                 assertEquals("Value matches", value, promise.getValue());
1:             }
1:             catch (Throwable t) {
1:                 error = t;
1:             }
1:             finally {
1:                 latch.countDown();
1:             }
1:         }
1:     }
1: 
1: 
1: }
============================================================================