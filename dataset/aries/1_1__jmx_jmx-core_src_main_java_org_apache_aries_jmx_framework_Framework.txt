1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
4:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
6:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.io.InputStream;
1:fdf3952: import java.net.URL;
1:af3b4b3: import java.util.ArrayList;
1:f94132d: import java.util.Collection;
1:f94132d: import java.util.Iterator;
1:af3b4b3: import java.util.List;
1:c13e6cc: import java.util.concurrent.CountDownLatch;
1:c13e6cc: import java.util.concurrent.TimeUnit;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.codec.BatchActionResult;
1:fdf3952: import org.apache.aries.jmx.codec.BatchInstallResult;
1:8b67a25: import org.apache.aries.jmx.codec.BatchResolveResult;
1:fdf3952: import org.apache.aries.jmx.util.FrameworkUtils;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:c13e6cc: import org.osgi.framework.FrameworkEvent;
1:c13e6cc: import org.osgi.framework.FrameworkListener;
1:f94132d: import org.osgi.framework.wiring.FrameworkWiring;
1:fdf3952: import org.osgi.jmx.framework.FrameworkMBean;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: import org.osgi.service.startlevel.StartLevel;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * <p>
1:fdf3952:  * <tt>Framework</tt> represents {@link FrameworkMBean} implementation.
1:fdf3952:  * </p>
1:fdf3952:  * @see FrameworkMBean
1:c13e6cc:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class Framework implements FrameworkMBean {
1:fdf3952: 
1:fdf3952:     private StartLevel startLevel;
1:fdf3952:     private PackageAdmin packageAdmin;
1:fdf3952:     private BundleContext context;
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Constructs new FrameworkMBean.
1:c13e6cc:      *
1:fdf3952:      * @param context bundle context of jmx bundle.
1:fdf3952:      * @param startLevel @see {@link StartLevel} service reference.
1:fdf3952:      * @param packageAdmin @see {@link PackageAdmin} service reference.
1:fdf3952:      */
1:fdf3952:     public Framework(BundleContext context, StartLevel startLevel, PackageAdmin packageAdmin) {
1:fdf3952:         this.context = context;
1:fdf3952:         this.startLevel = startLevel;
1:fdf3952:         this.packageAdmin = packageAdmin;
13:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:f94132d:      * @see org.osgi.jmx.framework.FrameworkMBean#getDependencyClosureBundles(long[])
1:f94132d:      */
1:f94132d:     public long[] getDependencyClosure(long[] bundles) throws IOException {
1:f94132d:         FrameworkWiring fw = context.getBundle(0).adapt(FrameworkWiring.class);
1:f94132d: 
1:f94132d:         List<Bundle> bl = new ArrayList<Bundle>();
1:f94132d:         for (int i=0; i < bundles.length; i++) {
1:f94132d:             bl.add(context.getBundle(bundles[i]));
1:f94132d:         }
1:f94132d: 
1:f94132d:         Collection<Bundle> rc = fw.getDependencyClosure(bl);
1:f94132d: 
1:f94132d:         Iterator<Bundle> it = rc.iterator();
1:f94132d:         long[] result = new long[rc.size()];
1:f94132d:         for (int i = 0; i < result.length; i++) {
1:f94132d:             result[i] = it.next().getBundleId();
1:f94132d:         }
1:f94132d:         return result;
1:f94132d:     }
1:f94132d: 
1:f94132d:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#getFrameworkStartLevel()
1:fdf3952:      */
1:fdf3952:     public int getFrameworkStartLevel() throws IOException {
1:fdf3952:         return startLevel.getStartLevel();
1:c13e6cc:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#getInitialBundleStartLevel()
1:fdf3952:      */
1:fdf3952:     public int getInitialBundleStartLevel() throws IOException {
1:fdf3952:         return startLevel.getInitialBundleStartLevel();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:21be559:      * @see org.osgi.jmx.framework.FrameworkMBean#getProperty(java.lang.String)
1:21be559:      */
1:21be559:     public String getProperty(String key) {
1:21be559:         return context.getProperty(key);
1:21be559:     }
1:21be559: 
1:21be559:     /**
1:f94132d:      * @see org.osgi.jmx.framework.FrameworkMBean#getRemovalPendingBundles()
1:f94132d:      */
1:f94132d:     public long[] getRemovalPendingBundles() throws IOException {
1:f94132d:         FrameworkWiring fw = context.getBundle(0).adapt(FrameworkWiring.class);
1:f94132d: 
1:f94132d:         Collection<Bundle> rc = fw.getRemovalPendingBundles();
1:f94132d:         Iterator<Bundle> it = rc.iterator();
1:f94132d:         long[] result = new long[rc.size()];
1:f94132d:         for (int i = 0; i < result.length; i++) {
1:f94132d:             result[i] = it.next().getBundleId();
1:f94132d:         }
1:f94132d:         return result;
1:f94132d:     }
1:f94132d: 
1:f94132d:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#installBundle(java.lang.String)
1:fdf3952:      */
1:fdf3952:     public long installBundle(String location) throws IOException {
1:c13e6cc:         try {
1:fdf3952:             Bundle bundle = context.installBundle(location);
1:fdf3952:             return bundle.getBundleId();
2:fdf3952:         } catch (Exception e) {
1:fdf3952:             IOException ioex = new IOException("Installation of a bundle with location " + location + " failed with the message: " + e.getMessage());
1:fdf3952:             ioex.initCause(e);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#installBundleFromURL(String, String)
1:fdf3952:      */
1:fdf3952:     public long installBundleFromURL(String location, String url) throws IOException {
1:fdf3952:         InputStream inputStream = null;
1:c13e6cc:         try {
1:fdf3952:             inputStream = createStream(url);
1:fdf3952:             Bundle bundle = context.installBundle(location, inputStream);
1:fdf3952:             return bundle.getBundleId();
1:fdf3952:         } catch (Exception e) {
1:fdf3952:             IOException ioex = new IOException("Installation of a bundle with location " + location + " failed with the message: " + e.getMessage());
1:fdf3952:             ioex.initCause(e);
1:fdf3952:             throw ioex;
2:fdf3952:         } finally {
1:fdf3952:             if (inputStream != null) {
4:fdf3952:                 try {
1:fdf3952:                     inputStream.close();
1:fdf3952:                 } catch (IOException ioe) {
1:c13e6cc:                 }
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public InputStream createStream(String url) throws IOException {
1:fdf3952:         return new URL(url).openStream();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#installBundles(java.lang.String[])
1:fdf3952:      */
1:fdf3952:     public CompositeData installBundles(String[] locations) throws IOException {
1:fdf3952:         if(locations == null){
1:c13e6cc:            return new BatchInstallResult("Failed to install bundles locations can't be null").toCompositeData();
1:fdf3952:         }
1:fdf3952:         long[] ids = new long[locations.length];
1:fdf3952:         for (int i = 0; i < locations.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 long id = installBundle(locations[i]);
1:fdf3952:                 ids[i] = id;
1:fdf3952:             } catch (Throwable t) {
1:fdf3952:                 long[] completed = new long[i];
1:fdf3952:                 System.arraycopy(ids, 0, completed, 0, i);
1:fdf3952:                 String[] remaining = new String[locations.length - i - 1];
1:fdf3952:                 System.arraycopy(locations, i + 1, remaining, 0, remaining.length);
1:fdf3952:                 return new BatchInstallResult(completed, t.toString(), remaining, locations[i]).toCompositeData();
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         return new BatchInstallResult(ids).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#installBundlesFromURL(String[], String[])
1:fdf3952:      */
1:fdf3952:     public CompositeData installBundlesFromURL(String[] locations, String[] urls) throws IOException {
1:fdf3952:         if(locations == null || urls == null){
1:c13e6cc:             return new BatchInstallResult("Failed to install bundles arguments can't be null").toCompositeData();
1:fdf3952:         }
1:c13e6cc: 
1:fdf3952:         if(locations.length != urls.length){
1:c13e6cc:             return new BatchInstallResult("Failed to install bundles size of arguments should be same").toCompositeData();
1:fdf3952:         }
1:fdf3952:         long[] ids = new long[locations.length];
1:fdf3952:         for (int i = 0; i < locations.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 long id = installBundleFromURL(locations[i], urls[i]);
1:fdf3952:                 ids[i] = id;
1:fdf3952:             } catch (Throwable t) {
1:fdf3952:                 long[] completed = new long[i];
1:fdf3952:                 System.arraycopy(ids, 0, completed, 0, i);
1:fdf3952:                 String[] remaining = new String[locations.length - i - 1];
1:fdf3952:                 System.arraycopy(locations, i + 1, remaining, 0, remaining.length);
1:fdf3952:                 return new BatchInstallResult(completed, t.toString(), remaining, locations[i]).toCompositeData();
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return new BatchInstallResult(ids).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundle(long)
1:fdf3952:      */
1:fdf3952:     public void refreshBundle(long bundleIdentifier) throws IOException {
2:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:fdf3952:         packageAdmin.refreshPackages(new Bundle[] { bundle });
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:c13e6cc:      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundleAndWait(long)
1:c13e6cc:      */
1:c13e6cc:     public boolean refreshBundleAndWait(long bundleIdentifier) throws IOException {
1:8b67a25:         Bundle[] bundleArray = new Bundle[1];
1:af218d3:         refreshBundlesAndWait(new long[] {bundleIdentifier}, bundleArray);
1:af218d3:         return isResolved(bundleArray[0].getState());
1:c13e6cc:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundles(long[])
1:fdf3952:      */
1:c13e6cc:     public void refreshBundles(long[] bundleIdentifiers) throws IOException {
2:fdf3952:        Bundle[] bundles = null;
1:c13e6cc:        if(bundleIdentifiers != null) {
2:fdf3952:           bundles = new Bundle[bundleIdentifiers.length];
1:c13e6cc:           for (int i = 0; i < bundleIdentifiers.length; i++) {
1:fdf3952:               try {
1:af3b4b3:                   bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
1:fdf3952:               } catch (Exception e) {
2:fdf3952:                   IOException ex = new IOException("Unable to find bundle with id " + bundleIdentifiers[i]);
1:c13e6cc:                   ex.initCause(e);
1:c13e6cc:                   throw ex;
1:fdf3952:               }
1:fdf3952:           }
1:fdf3952:        }
1:fdf3952:        packageAdmin.refreshPackages(bundles);
1:c13e6cc:     }
1:af218d3: 
1:af3b4b3:     /**
1:af3b4b3:      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundlesAndWait(long[])
1:af3b4b3:      */
1:c13e6cc:     public CompositeData refreshBundlesAndWait(long[] bundleIdentifiers) throws IOException {
1:7f6c067:         Bundle [] bundles = bundleIdentifiers != null ? new Bundle[bundleIdentifiers.length] : null;
1:af218d3:         refreshBundlesAndWait(bundleIdentifiers, bundles);
1:af218d3:         return constructResolveResult(bundles);
1:8b67a25:     }
1:8b67a25: 
1:af218d3:     private void refreshBundlesAndWait(long[] bundleIdentifiers, Bundle[] bundles) throws IOException {
1:af3b4b3:         final CountDownLatch latch = new CountDownLatch(1);
1:af3b4b3:         FrameworkListener listener = new FrameworkListener() {
1:af3b4b3:             public void frameworkEvent(FrameworkEvent event) {
1:af3b4b3:                 if (FrameworkEvent.PACKAGES_REFRESHED == event.getType()) {
1:af3b4b3:                     latch.countDown();
1:af3b4b3:                 }
1:af3b4b3:             }
1:af3b4b3:         };
1:af3b4b3:         try {
1:af3b4b3:             context.addFrameworkListener(listener);
1:af3b4b3:             try {
1:7f6c067:                 if (bundles != null) {
1:7f6c067:                     for (int i=0; i < bundleIdentifiers.length; i++) {
1:7f6c067:                         bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
1:7f6c067:                     }
1:af3b4b3:                 }
1:af3b4b3:                 packageAdmin.refreshPackages(bundles);
1:af3b4b3: 
1:af218d3:                 if (latch.await(30, TimeUnit.SECONDS))
1:af218d3:                     return;
1:af218d3:                 else
1:af218d3:                     throw new IOException("Refresh operation timed out");
1:af3b4b3:             } catch (InterruptedException e) {
1:af3b4b3:                 IOException ex = new IOException();
1:af3b4b3:                 ex.initCause(e);
1:af3b4b3:                 throw ex;
1:af3b4b3:             }
1:c13e6cc:         } finally {
1:af3b4b3:             context.removeFrameworkListener(listener);
1:c13e6cc:         }
1:c13e6cc:     }
1:c13e6cc: 
1:af218d3:     private CompositeData constructResolveResult(Bundle[] bundles) {
1:8b67a25:         if (bundles == null)
1:8b67a25:             bundles = context.getBundles();
1:8b67a25: 
1:af218d3:         boolean result = true;
1:8b67a25:         List<Long> successList = new ArrayList<Long>();
1:8b67a25:         for (Bundle bundle : bundles) {
1:8b67a25:             int state = bundle.getState();
1:af218d3:             if (isResolved(state)) {
1:8b67a25:                 successList.add(bundle.getBundleId());
1:af218d3:             } else
1:af218d3:                 result = false;
1:8b67a25:         }
1:8b67a25: 
1:8b67a25:         return new BatchResolveResult(result, successList.toArray(new Long[] {})).toCompositeData();
1:8b67a25:     }
1:8b67a25: 
1:af218d3:     private boolean isResolved(int state) {
1:af218d3:         return (state & (Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE)) > 0;
1:af218d3:     }
1:af218d3: 
1:c13e6cc:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#resolveBundle(long)
1:fdf3952:      */
1:fdf3952:     public boolean resolveBundle(long bundleIdentifier) throws IOException {
1:c13e6cc:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:fdf3952:         return packageAdmin.resolveBundles(new Bundle[] { bundle });
1:8b67a25:     }
1:af3b4b3: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#resolveBundles(long[])
1:fdf3952:      */
1:fdf3952:     public boolean resolveBundles(long[] bundleIdentifiers) throws IOException {
1:8b67a25:         Bundle[] bundles = null;
1:8b67a25:         if (bundleIdentifiers != null)
1:8b67a25:             bundles = new Bundle[bundleIdentifiers.length];
1:8b67a25: 
1:8b67a25:         return resolveBundles(bundleIdentifiers, bundles);
1:8b67a25:     }
1:8b67a25: 
1:8b67a25:     private boolean resolveBundles(long[] bundleIdentifiers, Bundle[] bundles) throws IOException {
1:8b67a25:         if (bundleIdentifiers != null) {
1:8b67a25:             for (int i = 0; i < bundleIdentifiers.length; i++) {
1:8b67a25:                 try {
1:8b67a25:                     bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
1:8b67a25:                 } catch (Exception e) {
1:8b67a25:                     IOException ex = new IOException("Unable to find bundle with id " + bundleIdentifiers[i]);
1:8b67a25:                     ex.initCause(e);
1:8b67a25:                     throw ex;
1:8b67a25:                 }
1:8b67a25:             }
1:8b67a25:         }
1:8b67a25: 
1:8b67a25:         return packageAdmin.resolveBundles(bundles);
1:8b67a25:     }
1:8b67a25: 
1:8b67a25:     public CompositeData resolve(long[] bundleIdentifiers) throws IOException {
1:8b67a25:         Bundle[] bundles = null;
1:8b67a25:         if (bundleIdentifiers != null)
1:8b67a25:             bundles = new Bundle[bundleIdentifiers.length];
1:8b67a25: 
1:af218d3:         resolveBundles(bundleIdentifiers, bundles);
1:af218d3:         return constructResolveResult(bundles);
1:af3b4b3:     }
1:c13e6cc: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#restartFramework()
1:fdf3952:      */
1:fdf3952:     public void restartFramework() throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, 0);
1:fdf3952:         try {
1:fdf3952:             bundle.update();
1:fdf3952:         } catch (Exception be) {
1:fdf3952:             IOException ioex = new IOException("Framework restart failed with message: " + be.getMessage());
1:fdf3952:             ioex.initCause(be);
1:fdf3952:             throw ioex;
1:af3b4b3:         }
1:af3b4b3:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#setBundleStartLevel(long, int)
1:fdf3952:      */
1:fdf3952:     public void setBundleStartLevel(long bundleIdentifier, int newlevel) throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:fdf3952:         try {
1:fdf3952:             startLevel.setBundleStartLevel(bundle, newlevel);
1:fdf3952:         } catch (IllegalArgumentException e) {
1:fdf3952:             IOException ioex = new IOException("Setting the start level for bundle with id " + bundle.getBundleId() + " to level " + newlevel + " failed with message: " + e.getMessage());
1:fdf3952:             ioex.initCause(e);
1:fdf3952:             throw ioex;
1:c13e6cc:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#setBundleStartLevels(long[], int[])
1:fdf3952:      */
1:fdf3952:     public CompositeData setBundleStartLevels(long[] bundleIdentifiers, int[] newlevels) throws IOException {
1:fdf3952:         if (bundleIdentifiers == null || newlevels == null) {
1:c13e6cc:             return new BatchActionResult("Failed to setBundleStartLevels arguments can't be null").toCompositeData();
1:fdf3952:         }
1:c13e6cc: 
1:fdf3952:         if (bundleIdentifiers != null && newlevels != null && bundleIdentifiers.length != newlevels.length) {
1:c13e6cc:             return new BatchActionResult("Failed to setBundleStartLevels size of arguments should be same").toCompositeData();
1:fdf3952:         }
1:c13e6cc:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 setBundleStartLevel(bundleIdentifiers[i], newlevels[i]);
1:fdf3952:             } catch (Throwable t) {
1:fdf3952:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#setFrameworkStartLevel(int)
1:fdf3952:      */
1:fdf3952:     public void setFrameworkStartLevel(int newlevel) throws IOException {
1:fdf3952:         try {
1:fdf3952:             startLevel.setStartLevel(newlevel);
1:fdf3952:         } catch (Exception e) {
1:fdf3952:             IOException ioex = new IOException("Setting the framework start level to " + newlevel + " failed with message: " + e.getMessage());
1:fdf3952:             ioex.initCause(e);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#setInitialBundleStartLevel(int)
1:fdf3952:      */
1:fdf3952:     public void setInitialBundleStartLevel(int newlevel) throws IOException {
1:fdf3952:         try {
1:fdf3952:             startLevel.setInitialBundleStartLevel(newlevel);
1:fdf3952:         } catch (Exception e) {
1:fdf3952:             IOException ioex = new IOException("Setting the initial start level to " + newlevel + " failed with message: " + e.getMessage());
1:fdf3952:             ioex.initCause(e);
1:fdf3952:             throw ioex;
1:c13e6cc:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#shutdownFramework()
1:fdf3952:      */
1:fdf3952:     public void shutdownFramework() throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, 0);
1:fdf3952:         try {
1:fdf3952:             bundle.stop();
1:fdf3952:         } catch (Exception be) {
1:fdf3952:             IOException ioex = new IOException("Stopping the framework failed with message: " + be.getMessage());
1:fdf3952:             ioex.initCause(be);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#startBundle(long)
1:fdf3952:      */
1:fdf3952:     public void startBundle(long bundleIdentifier) throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:fdf3952:         try {
1:fdf3952:             bundle.start();
1:fdf3952:         } catch (Exception be) {
1:fdf3952:             IOException ioex = new IOException("Start of bundle with id " + bundleIdentifier + " failed with message: " + be.getMessage());
1:fdf3952:             ioex.initCause(be);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#startBundles(long[])
1:fdf3952:      */
1:fdf3952:     public CompositeData startBundles(long[] bundleIdentifiers) throws IOException {
1:fdf3952:         if (bundleIdentifiers == null) {
1:c13e6cc:             return new BatchActionResult("Failed to start bundles, bundle id's can't be null").toCompositeData();
1:fdf3952:         }
4:fdf3952:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 startBundle(bundleIdentifiers[i]);
1:fdf3952:             } catch (Throwable t) {
1:fdf3952:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#stopBundle(long)
1:fdf3952:      */
1:fdf3952:     public void stopBundle(long bundleIdentifier) throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:fdf3952:         try {
1:fdf3952:             bundle.stop();
1:fdf3952:         } catch (Exception e) {
1:fdf3952:             IOException ioex = new IOException("Stop of bundle with id " + bundleIdentifier + " failed with message: " + e.getMessage());
1:fdf3952:             ioex.initCause(e);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#stopBundles(long[])
1:fdf3952:      */
1:fdf3952:     public CompositeData stopBundles(long[] bundleIdentifiers) throws IOException {
1:fdf3952:         if (bundleIdentifiers == null) {
1:c13e6cc:             return new BatchActionResult("Failed to stop bundles, bundle id's can't be null").toCompositeData();
1:fdf3952:         }
1:fdf3952:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 stopBundle(bundleIdentifiers[i]);
1:fdf3952:             } catch (Throwable t) {
1:fdf3952:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#uninstallBundle(long)
1:fdf3952:      */
1:fdf3952:     public void uninstallBundle(long bundleIdentifier) throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:fdf3952:         try {
1:fdf3952:             bundle.uninstall();
1:fdf3952:         } catch (Exception be) {
1:fdf3952:             IOException ioex = new IOException("Uninstall of bundle with id " + bundleIdentifier + " failed with message: " + be.getMessage());
1:fdf3952:             ioex.initCause(be);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#uninstallBundles(long[])
1:fdf3952:      */
1:fdf3952:     public CompositeData uninstallBundles(long[] bundleIdentifiers) throws IOException {
1:fdf3952:         if (bundleIdentifiers == null) {
1:c13e6cc:             return new BatchActionResult("Failed uninstall bundles, bundle id's can't be null").toCompositeData();
1:fdf3952:         }
1:fdf3952:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 uninstallBundle(bundleIdentifiers[i]);
1:fdf3952:             } catch (Throwable t) {
1:fdf3952:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#updateBundle(long)
1:fdf3952:      */
1:fdf3952:     public void updateBundle(long bundleIdentifier) throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:fdf3952:         try {
1:fdf3952:             bundle.update();
1:fdf3952:         } catch (Exception be) {
1:fdf3952:             IOException ioex = new IOException("Update of bundle with id " + bundleIdentifier + " failed with message: " + be.getMessage());
1:fdf3952:             ioex.initCause(be);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#updateBundleFromURL(long, String)
1:fdf3952:      */
1:fdf3952:     public void updateBundleFromURL(long bundleIdentifier, String url) throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:fdf3952:         InputStream inputStream = null;
1:fdf3952:         try {
1:fdf3952:             inputStream = createStream(url);
1:fdf3952:             bundle.update(inputStream);
1:fdf3952:         } catch (Exception be) {
1:fdf3952:             IOException ioex = new IOException("Update of bundle with id " + bundleIdentifier + " from url " + url + " failed with message: " + be.getMessage());
1:fdf3952:             ioex.initCause(be);
1:fdf3952:             throw ioex;
1:af3b4b3:         } finally {
1:fdf3952:             if (inputStream != null) {
1:fdf3952:                 try {
1:fdf3952:                     inputStream.close();
1:fdf3952:                 } catch (IOException ioe) {
1:fdf3952: 
1:fdf3952:                 }
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#updateBundles(long[])
1:fdf3952:      */
1:fdf3952:     public CompositeData updateBundles(long[] bundleIdentifiers) throws IOException {
1:fdf3952:         if (bundleIdentifiers == null) {
1:fdf3952:             return new BatchActionResult("Failed to update bundles, bundle id's can't be null").toCompositeData();
1:fdf3952:         }
1:fdf3952:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 updateBundle(bundleIdentifiers[i]);
1:fdf3952:             } catch (Throwable t) {
1:fdf3952:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#updateBundlesFromURL(long[], String[])
1:fdf3952:      */
1:fdf3952:     public CompositeData updateBundlesFromURL(long[] bundleIdentifiers, String[] urls) throws IOException {
1:fdf3952:         if(bundleIdentifiers == null || urls == null){
1:c13e6cc:             return new BatchActionResult("Failed to update bundles arguments can't be null").toCompositeData();
1:fdf3952:         }
1:c13e6cc: 
1:fdf3952:         if(bundleIdentifiers != null && urls != null && bundleIdentifiers.length != urls.length){
1:c13e6cc:             return new BatchActionResult("Failed to update bundles size of arguments should be same").toCompositeData();
1:fdf3952:         }
1:fdf3952:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:fdf3952:             try {
1:fdf3952:                 updateBundleFromURL(bundleIdentifiers[i], urls[i]);
1:fdf3952:             } catch (Throwable t) {
1:fdf3952:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see org.osgi.jmx.framework.FrameworkMBean#updateFramework()
1:fdf3952:      */
1:fdf3952:     public void updateFramework() throws IOException {
1:fdf3952:         Bundle bundle = FrameworkUtils.resolveBundle(context, 0);
1:fdf3952:         try {
1:fdf3952:             bundle.update();
1:fdf3952:         } catch (Exception be) {
1:fdf3952:             IOException ioex = new IOException("Update of framework bundle failed with message: " + be.getMessage());
1:fdf3952:             ioex.initCause(be);
1:fdf3952:             throw ioex;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * Create {@link BatchActionResult}, when the operation fail.
1:c13e6cc:      *
1:fdf3952:      * @param bundleIdentifiers bundle ids for operation.
1:fdf3952:      * @param i index of loop pointing on which operation fails.
1:fdf3952:      * @param t Throwable thrown by failed operation.
1:fdf3952:      * @return created BatchActionResult instance.
1:fdf3952:      */
1:fdf3952:     private CompositeData createFailedBatchActionResult(long[] bundleIdentifiers, int i, Throwable t) {
1:fdf3952:         long[] completed = new long[i];
1:fdf3952:         System.arraycopy(bundleIdentifiers, 0, completed, 0, i);
1:fdf3952:         long[] remaining = new long[bundleIdentifiers.length - i - 1];
1:fdf3952:         System.arraycopy(bundleIdentifiers, i + 1, remaining, 0, remaining.length);
1:fdf3952:         return new BatchActionResult(completed, t.toString(), remaining, bundleIdentifiers[i]).toCompositeData();
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:af218d3
/////////////////////////////////////////////////////////////////////////
1:         refreshBundlesAndWait(new long[] {bundleIdentifier}, bundleArray);
1:         return isResolved(bundleArray[0].getState());
/////////////////////////////////////////////////////////////////////////
1:         refreshBundlesAndWait(bundleIdentifiers, bundles);
1:         return constructResolveResult(bundles);
1:     private void refreshBundlesAndWait(long[] bundleIdentifiers, Bundle[] bundles) throws IOException {
/////////////////////////////////////////////////////////////////////////
1: 
1:                 if (latch.await(30, TimeUnit.SECONDS))
1:                     return;
1:                 else
1:                     throw new IOException("Refresh operation timed out");
/////////////////////////////////////////////////////////////////////////
1:     private CompositeData constructResolveResult(Bundle[] bundles) {
1:         boolean result = true;
1:             if (isResolved(state)) {
1:             } else
1:                 result = false;
1:     private boolean isResolved(int state) {
1:         return (state & (Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE)) > 0;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         resolveBundles(bundleIdentifiers, bundles);
1:         return constructResolveResult(bundles);
commit:7f6c067
/////////////////////////////////////////////////////////////////////////
1:         Bundle [] bundles = bundleIdentifiers != null ? new Bundle[bundleIdentifiers.length] : null;
/////////////////////////////////////////////////////////////////////////
1:                 if (bundles != null) {
1:                     for (int i=0; i < bundleIdentifiers.length; i++) {
1:                         bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
1:                     }
commit:21be559
/////////////////////////////////////////////////////////////////////////
1:      * @see org.osgi.jmx.framework.FrameworkMBean#getProperty(java.lang.String)
1:      */
1:     public String getProperty(String key) {
1:         return context.getProperty(key);
1:     }
1: 
1:     /**
commit:f94132d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.FrameworkWiring;
/////////////////////////////////////////////////////////////////////////
1:      * @see org.osgi.jmx.framework.FrameworkMBean#getDependencyClosureBundles(long[])
1:      */
1:     public long[] getDependencyClosure(long[] bundles) throws IOException {
1:         FrameworkWiring fw = context.getBundle(0).adapt(FrameworkWiring.class);
1: 
1:         List<Bundle> bl = new ArrayList<Bundle>();
1:         for (int i=0; i < bundles.length; i++) {
1:             bl.add(context.getBundle(bundles[i]));
1:         }
1: 
1:         Collection<Bundle> rc = fw.getDependencyClosure(bl);
1: 
1:         Iterator<Bundle> it = rc.iterator();
1:         long[] result = new long[rc.size()];
1:         for (int i = 0; i < result.length; i++) {
1:             result[i] = it.next().getBundleId();
1:         }
1:         return result;
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * @see org.osgi.jmx.framework.FrameworkMBean#getRemovalPendingBundles()
1:      */
1:     public long[] getRemovalPendingBundles() throws IOException {
1:         FrameworkWiring fw = context.getBundle(0).adapt(FrameworkWiring.class);
1: 
1:         Collection<Bundle> rc = fw.getRemovalPendingBundles();
1:         Iterator<Bundle> it = rc.iterator();
1:         long[] result = new long[rc.size()];
1:         for (int i = 0; i < result.length; i++) {
1:             result[i] = it.next().getBundleId();
1:         }
1:         return result;
1:     }
1: 
1:     /**
commit:8b67a25
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jmx.codec.BatchResolveResult;
/////////////////////////////////////////////////////////////////////////
1:         Bundle[] bundleArray = new Bundle[1];
0:         return refreshBundlesAndWait(new long[] {bundleIdentifier}, bundleArray);
/////////////////////////////////////////////////////////////////////////
0:         Bundle [] bundles = new Bundle[bundleIdentifiers.length];
0:         boolean result = refreshBundlesAndWait(bundleIdentifiers, bundles);
0:         return constructResolveResult(bundles, result);
1:     }
1: 
0:     private boolean refreshBundlesAndWait(long[] bundleIdentifiers, Bundle[] bundles) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:                 return latch.await(30, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
0:     private CompositeData constructResolveResult(Bundle[] bundles, boolean result) {
1:         if (bundles == null)
1:             bundles = context.getBundles();
1: 
1:         List<Long> successList = new ArrayList<Long>();
1:         for (Bundle bundle : bundles) {
1:             int state = bundle.getState();
0:             if ((state & (Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE)) > 0) {
1:                 successList.add(bundle.getBundleId());
1:             }
1:         }
1: 
1:         return new BatchResolveResult(result, successList.toArray(new Long[] {})).toCompositeData();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         Bundle[] bundles = null;
1:         if (bundleIdentifiers != null)
1:             bundles = new Bundle[bundleIdentifiers.length];
1: 
1:         return resolveBundles(bundleIdentifiers, bundles);
1:     }
1: 
1:     private boolean resolveBundles(long[] bundleIdentifiers, Bundle[] bundles) throws IOException {
1:         if (bundleIdentifiers != null) {
1:             for (int i = 0; i < bundleIdentifiers.length; i++) {
1:                 try {
1:                     bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
1:                 } catch (Exception e) {
1:                     IOException ex = new IOException("Unable to find bundle with id " + bundleIdentifiers[i]);
1:                     ex.initCause(e);
1:                     throw ex;
1:                 }
1:             }
1:         }
1: 
1:         return packageAdmin.resolveBundles(bundles);
1:     }
1: 
1:     public CompositeData resolve(long[] bundleIdentifiers) throws IOException {
1:         Bundle[] bundles = null;
1:         if (bundleIdentifiers != null)
1:             bundles = new Bundle[bundleIdentifiers.length];
1: 
0:         boolean result = resolveBundles(bundleIdentifiers, bundles);
0:         return constructResolveResult(bundles, result);
commit:af3b4b3
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.jmx.codec.BatchRefreshResult;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundlesAndWait(long[])
1:      */
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         FrameworkListener listener = new FrameworkListener() {
1:             public void frameworkEvent(FrameworkEvent event) {
1:                 if (FrameworkEvent.PACKAGES_REFRESHED == event.getType()) {
1:                     latch.countDown();
1:                 }
1:             }
1:         };
1:         try {
1:             context.addFrameworkListener(listener);
1:             try {
0:                 Bundle [] bundles = new Bundle[bundleIdentifiers.length];
0:                 for (int i=0; i < bundleIdentifiers.length; i++) {
1:                     bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
1:                 }
1:                 packageAdmin.refreshPackages(bundles);
0:                 boolean result = latch.await(30, TimeUnit.SECONDS);
1: 
0:                 List<Long> successList = new ArrayList<Long>();
0:                 for (Bundle bundle : bundles) {
0:                     int state = bundle.getState();
0:                     if ((state & (Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE)) > 0) {
0:                         successList.add(bundle.getBundleId());
1:                     }
1:                 }
1: 
0:                 return new BatchRefreshResult(result, successList.toArray(new Long[] {})).toCompositeData();
1:             } catch (InterruptedException e) {
1:                 IOException ex = new IOException();
1:                 ex.initCause(e);
1:                 throw ex;
1:             }
1:         } finally {
1:             context.removeFrameworkListener(listener);
1:         }
commit:c13e6cc
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.FrameworkEvent;
1: import org.osgi.framework.FrameworkListener;
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:            return new BatchInstallResult("Failed to install bundles locations can't be null").toCompositeData();
/////////////////////////////////////////////////////////////////////////
1:             return new BatchInstallResult("Failed to install bundles arguments can't be null").toCompositeData();
1: 
1:             return new BatchInstallResult("Failed to install bundles size of arguments should be same").toCompositeData();
/////////////////////////////////////////////////////////////////////////
1:      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundleAndWait(long)
1:      */
1:     public boolean refreshBundleAndWait(long bundleIdentifier) throws IOException {
0:         final CountDownLatch latch = new CountDownLatch(1);
0:         FrameworkListener listener = new FrameworkListener() {
0:             public void frameworkEvent(FrameworkEvent event) {
0:                 if (FrameworkEvent.PACKAGES_REFRESHED == event.getType()) {
0:                     latch.countDown();
1:                 }
1:             }
0:         };
1:         try {
0:             context.addFrameworkListener(listener);
1:             try {
1:                 Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
0:                 packageAdmin.refreshPackages(new Bundle [] { bundle });
0:                 return latch.await(10, TimeUnit.SECONDS);
0:             } catch (InterruptedException e) {
0:                 IOException ex = new IOException();
1:                 ex.initCause(e);
1:                 throw ex;
1:             }
1:         } finally {
0:             context.removeFrameworkListener(listener);
1:         }
1:     }
1: 
1:     /**
1:     public void refreshBundles(long[] bundleIdentifiers) throws IOException {
1:        if(bundleIdentifiers != null) {
1:           for (int i = 0; i < bundleIdentifiers.length; i++) {
/////////////////////////////////////////////////////////////////////////
1:     public CompositeData refreshBundlesAndWait(long[] bundleIdentifiers) throws IOException {
0:         // TODO Auto-generated method stub
0:         return null;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:        if(bundleIdentifiers != null) {
1:           for (int i = 0; i < bundleIdentifiers.length; i++) {
/////////////////////////////////////////////////////////////////////////
1:             return new BatchActionResult("Failed to setBundleStartLevels arguments can't be null").toCompositeData();
1: 
1:             return new BatchActionResult("Failed to setBundleStartLevels size of arguments should be same").toCompositeData();
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1:             return new BatchActionResult("Failed to start bundles, bundle id's can't be null").toCompositeData();
/////////////////////////////////////////////////////////////////////////
1:             return new BatchActionResult("Failed to stop bundles, bundle id's can't be null").toCompositeData();
/////////////////////////////////////////////////////////////////////////
1:             return new BatchActionResult("Failed uninstall bundles, bundle id's can't be null").toCompositeData();
/////////////////////////////////////////////////////////////////////////
1:             }
/////////////////////////////////////////////////////////////////////////
1:             return new BatchActionResult("Failed to update bundles arguments can't be null").toCompositeData();
1: 
1:             return new BatchActionResult("Failed to update bundles size of arguments should be same").toCompositeData();
/////////////////////////////////////////////////////////////////////////
1:      *
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: 
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.aries.jmx.codec.BatchActionResult;
1: import org.apache.aries.jmx.codec.BatchInstallResult;
1: import org.apache.aries.jmx.util.FrameworkUtils;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.jmx.framework.FrameworkMBean;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: import org.osgi.service.startlevel.StartLevel;
1: 
1: /**
1:  * <p>
1:  * <tt>Framework</tt> represents {@link FrameworkMBean} implementation.
1:  * </p>
1:  * @see FrameworkMBean
1:  * 
1:  * @version $Rev$ $Date$
1:  */
1: public class Framework implements FrameworkMBean {
1: 
1:     private StartLevel startLevel;
1:     private PackageAdmin packageAdmin;
1:     private BundleContext context;
1: 
1:     /**
1:      * Constructs new FrameworkMBean.
1:      * 
1:      * @param context bundle context of jmx bundle.
1:      * @param startLevel @see {@link StartLevel} service reference.
1:      * @param packageAdmin @see {@link PackageAdmin} service reference.
1:      */
1:     public Framework(BundleContext context, StartLevel startLevel, PackageAdmin packageAdmin) {
1:         this.context = context;
1:         this.startLevel = startLevel;
1:         this.packageAdmin = packageAdmin;
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#getFrameworkStartLevel()
1:      */
1:     public int getFrameworkStartLevel() throws IOException {
1:         return startLevel.getStartLevel();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#getInitialBundleStartLevel()
1:      */
1:     public int getInitialBundleStartLevel() throws IOException {
1:         return startLevel.getInitialBundleStartLevel();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#installBundle(java.lang.String)
1:      */
1:     public long installBundle(String location) throws IOException {
1:         try {
1:             Bundle bundle = context.installBundle(location);
1:             return bundle.getBundleId();
1:         } catch (Exception e) {
1:             IOException ioex = new IOException("Installation of a bundle with location " + location + " failed with the message: " + e.getMessage());
1:             ioex.initCause(e);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#installBundleFromURL(String, String)
1:      */
1:     public long installBundleFromURL(String location, String url) throws IOException {
1:         InputStream inputStream = null;
1:         try {
1:             inputStream = createStream(url);
1:             Bundle bundle = context.installBundle(location, inputStream);
1:             return bundle.getBundleId();
1:         } catch (Exception e) {
1:             IOException ioex = new IOException("Installation of a bundle with location " + location + " failed with the message: " + e.getMessage());
1:             ioex.initCause(e);
1:             throw ioex;
1:         } finally {
1:             if (inputStream != null) {
1:                 try {
1:                     inputStream.close();
1:                 } catch (IOException ioe) {
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public InputStream createStream(String url) throws IOException {
1:         return new URL(url).openStream();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#installBundles(java.lang.String[])
1:      */
1:     public CompositeData installBundles(String[] locations) throws IOException {
1:         if(locations == null){
0:            return new BatchInstallResult("Failed to install bundles locations can't be null").toCompositeData(); 
1:         }
1:         long[] ids = new long[locations.length];
1:         for (int i = 0; i < locations.length; i++) {
1:             try {
1:                 long id = installBundle(locations[i]);
1:                 ids[i] = id;
1:             } catch (Throwable t) {
1:                 long[] completed = new long[i];
1:                 System.arraycopy(ids, 0, completed, 0, i);
1:                 String[] remaining = new String[locations.length - i - 1];
1:                 System.arraycopy(locations, i + 1, remaining, 0, remaining.length);
1:                 return new BatchInstallResult(completed, t.toString(), remaining, locations[i]).toCompositeData();
1:             }
1:         }
1: 
1:         return new BatchInstallResult(ids).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#installBundlesFromURL(String[], String[])
1:      */
1:     public CompositeData installBundlesFromURL(String[] locations, String[] urls) throws IOException {
1:         if(locations == null || urls == null){
0:             return new BatchInstallResult("Failed to install bundles arguments can't be null").toCompositeData(); 
1:         }
1:         
1:         if(locations.length != urls.length){
0:             return new BatchInstallResult("Failed to install bundles size of arguments should be same").toCompositeData(); 
1:         }
1:         long[] ids = new long[locations.length];
1:         for (int i = 0; i < locations.length; i++) {
1:             try {
1:                 long id = installBundleFromURL(locations[i], urls[i]);
1:                 ids[i] = id;
1:             } catch (Throwable t) {
1:                 long[] completed = new long[i];
1:                 System.arraycopy(ids, 0, completed, 0, i);
1:                 String[] remaining = new String[locations.length - i - 1];
1:                 System.arraycopy(locations, i + 1, remaining, 0, remaining.length);
1:                 return new BatchInstallResult(completed, t.toString(), remaining, locations[i]).toCompositeData();
1:             }
1:         }
1:         return new BatchInstallResult(ids).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundle(long)
1:      */
1:     public void refreshBundle(long bundleIdentifier) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:         packageAdmin.refreshPackages(new Bundle[] { bundle });
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#refreshBundles(long[])
1:      */
0:     public void refreshBundles(long[] bundleIdentifiers) throws IOException {    
1:        Bundle[] bundles = null;
0:        if(bundleIdentifiers != null) {       
1:           bundles = new Bundle[bundleIdentifiers.length];
1:           for (int i = 0; i < bundleIdentifiers.length; i++) {  
1:               try {
0:                   bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
1:               } catch (Exception e) {
1:                   IOException ex = new IOException("Unable to find bundle with id " + bundleIdentifiers[i]);
0:                   ex.initCause(e);
0:                   throw ex;
1:               }
1:           }
1:        }
1:        packageAdmin.refreshPackages(bundles);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#resolveBundle(long)
1:      */
1:     public boolean resolveBundle(long bundleIdentifier) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:         return packageAdmin.resolveBundles(new Bundle[] { bundle });
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#resolveBundles(long[])
1:      */
1:     public boolean resolveBundles(long[] bundleIdentifiers) throws IOException {
1:        Bundle[] bundles = null;
0:        if(bundleIdentifiers != null) {       
1:           bundles = new Bundle[bundleIdentifiers.length];
1:           for (int i = 0; i < bundleIdentifiers.length; i++) {       
1:               try {
0:                   bundles[i] = FrameworkUtils.resolveBundle(context, bundleIdentifiers[i]);
1:               } catch (Exception e) {
1:                   IOException ex = new IOException("Unable to find bundle with id " + bundleIdentifiers[i]);
0:                   ex.initCause(e);
0:                   throw ex;
1:               }
1:           }
1:        }
0:        return packageAdmin.resolveBundles(bundles);
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#restartFramework()
1:      */
1:     public void restartFramework() throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, 0);
1:         try {
1:             bundle.update();
1:         } catch (Exception be) {
1:             IOException ioex = new IOException("Framework restart failed with message: " + be.getMessage());
1:             ioex.initCause(be);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#setBundleStartLevel(long, int)
1:      */
1:     public void setBundleStartLevel(long bundleIdentifier, int newlevel) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:         try {
1:             startLevel.setBundleStartLevel(bundle, newlevel);
1:         } catch (IllegalArgumentException e) {
1:             IOException ioex = new IOException("Setting the start level for bundle with id " + bundle.getBundleId() + " to level " + newlevel + " failed with message: " + e.getMessage());
1:             ioex.initCause(e);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#setBundleStartLevels(long[], int[])
1:      */
1:     public CompositeData setBundleStartLevels(long[] bundleIdentifiers, int[] newlevels) throws IOException {
1:         if (bundleIdentifiers == null || newlevels == null) {
0:             return new BatchActionResult("Failed to setBundleStartLevels arguments can't be null").toCompositeData(); 
1:         }
1:         
1:         if (bundleIdentifiers != null && newlevels != null && bundleIdentifiers.length != newlevels.length) {
0:             return new BatchActionResult("Failed to setBundleStartLevels size of arguments should be same").toCompositeData(); 
1:         }
1:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:             try {
1:                 setBundleStartLevel(bundleIdentifiers[i], newlevels[i]);
1:             } catch (Throwable t) {
1:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:             }
1:         }
1:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#setFrameworkStartLevel(int)
1:      */
1:     public void setFrameworkStartLevel(int newlevel) throws IOException {
1:         try {
1:             startLevel.setStartLevel(newlevel);
1:         } catch (Exception e) {
1:             IOException ioex = new IOException("Setting the framework start level to " + newlevel + " failed with message: " + e.getMessage());
1:             ioex.initCause(e);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#setInitialBundleStartLevel(int)
1:      */
1:     public void setInitialBundleStartLevel(int newlevel) throws IOException {
1:         try {
1:             startLevel.setInitialBundleStartLevel(newlevel);
1:         } catch (Exception e) {
1:             IOException ioex = new IOException("Setting the initial start level to " + newlevel + " failed with message: " + e.getMessage());
1:             ioex.initCause(e);
1:             throw ioex;
1:         }        
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#shutdownFramework()
1:      */
1:     public void shutdownFramework() throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, 0);
1:         try {
1:             bundle.stop();
1:         } catch (Exception be) {
1:             IOException ioex = new IOException("Stopping the framework failed with message: " + be.getMessage());
1:             ioex.initCause(be);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#startBundle(long)
1:      */
1:     public void startBundle(long bundleIdentifier) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:         try {
1:             bundle.start();
1:         } catch (Exception be) {
1:             IOException ioex = new IOException("Start of bundle with id " + bundleIdentifier + " failed with message: " + be.getMessage());
1:             ioex.initCause(be);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#startBundles(long[])
1:      */
1:     public CompositeData startBundles(long[] bundleIdentifiers) throws IOException {
1:         if (bundleIdentifiers == null) {
0:             return new BatchActionResult("Failed to start bundles, bundle id's can't be null").toCompositeData(); 
1:         }
1:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:             try {
1:                 startBundle(bundleIdentifiers[i]);
1:             } catch (Throwable t) {
1:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:             }
1:         }
1:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#stopBundle(long)
1:      */
1:     public void stopBundle(long bundleIdentifier) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:         try {
1:             bundle.stop();
1:         } catch (Exception e) {
1:             IOException ioex = new IOException("Stop of bundle with id " + bundleIdentifier + " failed with message: " + e.getMessage());
1:             ioex.initCause(e);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#stopBundles(long[])
1:      */
1:     public CompositeData stopBundles(long[] bundleIdentifiers) throws IOException {
1:         if (bundleIdentifiers == null) {
0:             return new BatchActionResult("Failed to stop bundles, bundle id's can't be null").toCompositeData(); 
1:         }
1:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:             try {
1:                 stopBundle(bundleIdentifiers[i]);
1:             } catch (Throwable t) {
1:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:             }
1:         }
1:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#uninstallBundle(long)
1:      */
1:     public void uninstallBundle(long bundleIdentifier) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:         try {
1:             bundle.uninstall();
1:         } catch (Exception be) {
1:             IOException ioex = new IOException("Uninstall of bundle with id " + bundleIdentifier + " failed with message: " + be.getMessage());
1:             ioex.initCause(be);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#uninstallBundles(long[])
1:      */
1:     public CompositeData uninstallBundles(long[] bundleIdentifiers) throws IOException {
1:         if (bundleIdentifiers == null) {
0:             return new BatchActionResult("Failed uninstall bundles, bundle id's can't be null").toCompositeData(); 
1:         }
1:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:             try {
1:                 uninstallBundle(bundleIdentifiers[i]);
1:             } catch (Throwable t) {
1:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:             }
1:         }
1:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#updateBundle(long)
1:      */
1:     public void updateBundle(long bundleIdentifier) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:         try {
1:             bundle.update();
1:         } catch (Exception be) {
1:             IOException ioex = new IOException("Update of bundle with id " + bundleIdentifier + " failed with message: " + be.getMessage());
1:             ioex.initCause(be);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#updateBundleFromURL(long, String)
1:      */
1:     public void updateBundleFromURL(long bundleIdentifier, String url) throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, bundleIdentifier);
1:         InputStream inputStream = null;
1:         try {
1:             inputStream = createStream(url);
1:             bundle.update(inputStream);
1:         } catch (Exception be) {
1:             IOException ioex = new IOException("Update of bundle with id " + bundleIdentifier + " from url " + url + " failed with message: " + be.getMessage());
1:             ioex.initCause(be);
1:             throw ioex;
1:         } finally {
1:             if (inputStream != null) {
1:                 try {
1:                     inputStream.close();
1:                 } catch (IOException ioe) {
1: 
1:                 }
1:             }          
1:         }
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#updateBundles(long[])
1:      */
1:     public CompositeData updateBundles(long[] bundleIdentifiers) throws IOException {
1:         if (bundleIdentifiers == null) {
1:             return new BatchActionResult("Failed to update bundles, bundle id's can't be null").toCompositeData();
1:         }
1:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:             try {
1:                 updateBundle(bundleIdentifiers[i]);
1:             } catch (Throwable t) {
1:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:             }
1:         }
1:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#updateBundlesFromURL(long[], String[])
1:      */
1:     public CompositeData updateBundlesFromURL(long[] bundleIdentifiers, String[] urls) throws IOException {
1:         if(bundleIdentifiers == null || urls == null){
0:             return new BatchActionResult("Failed to update bundles arguments can't be null").toCompositeData(); 
1:         }
1:         
1:         if(bundleIdentifiers != null && urls != null && bundleIdentifiers.length != urls.length){
0:             return new BatchActionResult("Failed to update bundles size of arguments should be same").toCompositeData(); 
1:         }
1:         for (int i = 0; i < bundleIdentifiers.length; i++) {
1:             try {
1:                 updateBundleFromURL(bundleIdentifiers[i], urls[i]);
1:             } catch (Throwable t) {
1:                 return createFailedBatchActionResult(bundleIdentifiers, i, t);
1:             }
1:         }
1:         return new BatchActionResult(bundleIdentifiers).toCompositeData();
1:     }
1: 
1:     /**
1:      * @see org.osgi.jmx.framework.FrameworkMBean#updateFramework()
1:      */
1:     public void updateFramework() throws IOException {
1:         Bundle bundle = FrameworkUtils.resolveBundle(context, 0);
1:         try {
1:             bundle.update();
1:         } catch (Exception be) {
1:             IOException ioex = new IOException("Update of framework bundle failed with message: " + be.getMessage());
1:             ioex.initCause(be);
1:             throw ioex;
1:         }
1:     }
1: 
1:     /**
1:      * Create {@link BatchActionResult}, when the operation fail.
1:      * 
1:      * @param bundleIdentifiers bundle ids for operation.
1:      * @param i index of loop pointing on which operation fails.
1:      * @param t Throwable thrown by failed operation.
1:      * @return created BatchActionResult instance.
1:      */
1:     private CompositeData createFailedBatchActionResult(long[] bundleIdentifiers, int i, Throwable t) {
1:         long[] completed = new long[i];
1:         System.arraycopy(bundleIdentifiers, 0, completed, 0, i);
1:         long[] remaining = new long[bundleIdentifiers.length - i - 1];
1:         System.arraycopy(bundleIdentifiers, i + 1, remaining, 0, remaining.length);
1:         return new BatchActionResult(completed, t.toString(), remaining, bundleIdentifiers[i]).toCompositeData();
1:     }
1: 
1: }
============================================================================