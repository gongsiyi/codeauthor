1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
3:7837a59: 
1:4717af0: import java.util.ArrayList;
1:2ffcfb9: import java.util.Arrays;
1:4717af0: import java.util.Collection;
1:7837a59: import java.util.Collections;
1:df175a6: import java.util.List;
1:7837a59: 
1:4717af0: import org.osgi.framework.Constants;
1:71fe81a: import org.osgi.resource.Resource;
1:7837a59: 
1:2ffcfb9: public class ExportPackageHeader extends AbstractClauseBasedHeader<ExportPackageHeader.Clause> implements CapabilityHeader<ExportPackageHeader.Clause> {
1:2ffcfb9:     public static class Clause extends AbstractClause {
1:7837a59: 		public static final String ATTRIBUTE_VERSION = Constants.VERSION_ATTRIBUTE;
1:7837a59: 		public static final String DIRECTIVE_EXCLUDE = Constants.EXCLUDE_DIRECTIVE;
1:7837a59: 		public static final String DIRECTIVE_INCLUDE = Constants.INCLUDE_DIRECTIVE;
1:7837a59: 		public static final String DIRECTIVE_MANDATORY = Constants.MANDATORY_DIRECTIVE;
1:7837a59: 		public static final String DIRECTIVE_USES = Constants.USES_DIRECTIVE;
1:7837a59: 		
1:7837a59: 		public Clause(String clause) {
1:2ffcfb9:             super(
1:2ffcfb9:             		parsePath(clause, Patterns.PACKAGE_NAMES, false), 
1:2ffcfb9:             		parseParameters(clause, false), 
1:2ffcfb9:             		generateDefaultParameters(
1:2ffcfb9:             				VersionAttribute.DEFAULT));
5:7837a59: 		}
1:7837a59: 		
3:7837a59: 		@Override
1:7837a59: 		public Attribute getAttribute(String name) {
1:7837a59: 			Parameter result = parameters.get(name);
1:7837a59: 			if (result instanceof Attribute) {
1:7837a59: 				return (Attribute)result;
1:7837a59: 			}
1:7837a59: 			return null;
1:7837a59: 		}
1:7837a59: 
1:7837a59: 		@Override
1:7837a59: 		public Collection<Attribute> getAttributes() {
1:7837a59: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
1:7837a59: 			for (Parameter parameter : parameters.values()) {
1:7837a59: 				if (parameter instanceof Attribute) {
1:7837a59: 					attributes.add((Attribute)parameter);
1:7837a59: 				}
1:7837a59: 			}
1:7837a59: 			attributes.trimToSize();
1:7837a59: 			return attributes;
1:7837a59: 		}
1:7837a59: 
1:7837a59: 		@Override
1:7837a59: 		public Directive getDirective(String name) {
1:7837a59: 			Parameter result = parameters.get(name);
1:7837a59: 			if (result instanceof Directive) {
1:7837a59: 				return (Directive)result;
1:7837a59: 			}
1:7837a59: 			return null;
1:7837a59: 		}
1:7837a59: 
1:7837a59: 		@Override
1:7837a59: 		public Collection<Directive> getDirectives() {
1:7837a59: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
1:7837a59: 			for (Parameter parameter : parameters.values()) {
1:7837a59: 				if (parameter instanceof Directive) {
1:7837a59: 					directives.add((Directive)parameter);
1:7837a59: 				}
1:7837a59: 			}
1:7837a59: 			directives.trimToSize();
1:7837a59: 			return directives;
1:7837a59: 		}
1:7837a59: 		
1:7837a59: 		public Collection<String> getPackageNames() {
1:2ffcfb9: 			return Arrays.asList(path.split(";"));
1:7837a59: 		}
1:7837a59: 
1:7837a59: 		@Override
1:7837a59: 		public Parameter getParameter(String name) {
1:7837a59: 			return parameters.get(name);
1:7837a59: 		}
1:7837a59: 
1:7837a59: 		@Override
1:7837a59: 		public Collection<Parameter> getParameters() {
1:7837a59: 			return Collections.unmodifiableCollection(parameters.values());
1:7837a59: 		}
1:7837a59: 		
1:7837a59: 		@Override
1:7837a59: 		public String getPath() {
1:7837a59: 			return path;
1:7837a59: 		}
1:2ffcfb9:         
2:7837a59: 		public Collection<ExportPackageCapability> toCapabilities(Resource resource) {
1:2ffcfb9: 			Collection<String> packageNames = getPackageNames();
1:7837a59: 			Collection<ExportPackageCapability> result = new ArrayList<ExportPackageCapability>(packageNames.size());
1:2ffcfb9: 			for (String packageName : packageNames) {
1:7837a59: 				result.add(new ExportPackageCapability(packageName, parameters.values(), resource));
1:7837a59: 			}
1:2ffcfb9: 			return result;
1:7837a59: 		}
1:7837a59: 	}
1:7837a59: 	
1:7837a59: 	public static final String NAME = Constants.EXPORT_PACKAGE;
1:7837a59: 	
1:7837a59: 	public ExportPackageHeader(String value) {
1:2ffcfb9: 		super(
1:2ffcfb9: 				value, 
1:2ffcfb9: 				new ClauseFactory<Clause>() {
1:2ffcfb9: 					@Override
1:2ffcfb9: 					public Clause newInstance(String clause) {
1:2ffcfb9: 						return new Clause(clause);
1:2ffcfb9: 					}
1:2ffcfb9: 				});
1:2ffcfb9: 	}	
1:7837a59: 	
1:7837a59: 	@Override
1:7837a59: 	public String getName() {
1:7837a59: 		return NAME;
1:fea3a1c: 	}
1:7837a59: 
1:7837a59: 	@Override
1:7837a59: 	public String getValue() {
1:7837a59: 		return toString();
1:fea3a1c: 	}
1:7837a59: 	
1:df175a6: 	@Override
1:df175a6: 	public List<ExportPackageCapability> toCapabilities(Resource resource) {
1:df175a6: 		List<ExportPackageCapability> result = new ArrayList<ExportPackageCapability>();
1:7837a59: 		for (Clause clause : clauses)
1:7837a59: 			result.addAll(clause.toCapabilities(resource));
2:7837a59: 		return result;
1:fea3a1c: 	}
1:7837a59: 	
1:7837a59: 	@Override
2:7837a59: 	public String toString() {
1:7837a59: 		StringBuilder builder = new StringBuilder();
1:7837a59: 		for (Clause clause : getClauses()) {
1:7837a59: 			builder.append(clause).append(',');
1:7837a59: 		}
1:7837a59: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
1:7837a59: 		builder.deleteCharAt(builder.length() - 1);
2:7837a59: 		return builder.toString();
1:7837a59: 	}
1:7837a59: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: public class ExportPackageHeader extends AbstractClauseBasedHeader<ExportPackageHeader.Clause> implements CapabilityHeader<ExportPackageHeader.Clause> {
1:     public static class Clause extends AbstractClause {
1:             super(
1:             		parsePath(clause, Patterns.PACKAGE_NAMES, false), 
1:             		parseParameters(clause, false), 
1:             		generateDefaultParameters(
1:             				VersionAttribute.DEFAULT));
/////////////////////////////////////////////////////////////////////////
1: 			return Arrays.asList(path.split(";"));
/////////////////////////////////////////////////////////////////////////
1:         
1: 			Collection<String> packageNames = getPackageNames();
1: 			for (String packageName : packageNames) {
1: 			return result;
1: 		super(
1: 				value, 
1: 				new ClauseFactory<Clause>() {
1: 					@Override
1: 					public Clause newInstance(String clause) {
1: 						return new Clause(clause);
1: 					}
1: 				});
1: 	}	
commit:777b216
/////////////////////////////////////////////////////////////////////////
0: 		for (String clause : new ClauseTokenizer(value).getClauses())
0: 			clauses.add(new Clause(clause));
commit:fea3a1c
/////////////////////////////////////////////////////////////////////////
0: 		int numOfChars = value.length();
0: 		StringBuilder builder = new StringBuilder(numOfChars);
0: 		int numOfQuotes = 0;
0: 		for (char c : value.toCharArray()) {
0: 			numOfChars--;
0: 			if (c == ',') {
0: 				if (numOfQuotes % 2 == 0) {
0: 					clauses.add(new Clause(builder.toString()));
0: 					builder = new StringBuilder(numOfChars);
1: 				}
0: 				else
0: 					builder.append(c);
1: 			}
0: 			else if (c == '"')
0: 				numOfQuotes++;
0: 			else
0: 				builder.append(c);
1: 		}
0: 		clauses.add(new Clause(builder.toString()));
commit:df175a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: public class ExportPackageHeader implements CapabilityHeader<ExportPackageHeader.Clause> {
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public List<ExportPackageCapability> toCapabilities(Resource resource) {
1: 		List<ExportPackageCapability> result = new ArrayList<ExportPackageCapability>();
commit:7837a59
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
0: import java.util.HashSet;
0: import java.util.Set;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
0: public class ExportPackageHeader implements Header<ExportPackageHeader.Clause> {
0: 	public static class Clause implements org.apache.aries.subsystem.core.archive.Clause {
1: 		public static final String ATTRIBUTE_VERSION = Constants.VERSION_ATTRIBUTE;
1: 		public static final String DIRECTIVE_EXCLUDE = Constants.EXCLUDE_DIRECTIVE;
1: 		public static final String DIRECTIVE_INCLUDE = Constants.INCLUDE_DIRECTIVE;
1: 		public static final String DIRECTIVE_MANDATORY = Constants.MANDATORY_DIRECTIVE;
1: 		public static final String DIRECTIVE_USES = Constants.USES_DIRECTIVE;
1: 		
0: 		private static final Pattern PATTERN_PACKAGENAME = Pattern.compile('(' + Grammar.PACKAGENAME + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PACKAGENAMES = Pattern.compile('(' + Grammar.PACKAGENAMES + ")(?=;|\\z)");
0: 		private static final Pattern PATTERN_PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 		
0: 		private static void fillInDefaults(Map<String, Parameter> parameters) {
0: 			Parameter parameter = parameters.get(ATTRIBUTE_VERSION);
0: 			if (parameter == null)
0: 				parameters.put(ATTRIBUTE_VERSION, VersionAttribute.DEFAULT);
1: 		}
1: 		
0: 		private final Collection<String> packageNames = new HashSet<String>();
0: 		private final String path;
0: 		private final Map<String, Parameter> parameters = new HashMap<String, Parameter>();
1: 		
1: 		public Clause(String clause) {
0: 			Matcher main = PATTERN_PACKAGENAMES.matcher(clause);
0: 			if (!main.find())
0: 				throw new IllegalArgumentException("Missing package names path: " + clause);
0: 			path = main.group();
0: 			Matcher path = PATTERN_PACKAGENAME.matcher(this.path);
0: 			while (path.find())
0: 				packageNames.add(main.group());
0: 			main.usePattern(PATTERN_PARAMETER);
0: 			while (main.find()) {
0: 				Parameter parameter = ParameterFactory.create(main.group());
0: 				parameters.put(parameter.getName(), parameter);
1: 			}
0: 			fillInDefaults(parameters);
1: 		}
1: 		
1: 		@Override
1: 		public Attribute getAttribute(String name) {
1: 			Parameter result = parameters.get(name);
1: 			if (result instanceof Attribute) {
1: 				return (Attribute)result;
1: 			}
1: 			return null;
1: 		}
1: 
1: 		@Override
1: 		public Collection<Attribute> getAttributes() {
1: 			ArrayList<Attribute> attributes = new ArrayList<Attribute>(parameters.size());
1: 			for (Parameter parameter : parameters.values()) {
1: 				if (parameter instanceof Attribute) {
1: 					attributes.add((Attribute)parameter);
1: 				}
1: 			}
1: 			attributes.trimToSize();
1: 			return attributes;
1: 		}
1: 
1: 		@Override
1: 		public Directive getDirective(String name) {
1: 			Parameter result = parameters.get(name);
1: 			if (result instanceof Directive) {
1: 				return (Directive)result;
1: 			}
1: 			return null;
1: 		}
1: 
1: 		@Override
1: 		public Collection<Directive> getDirectives() {
1: 			ArrayList<Directive> directives = new ArrayList<Directive>(parameters.size());
1: 			for (Parameter parameter : parameters.values()) {
1: 				if (parameter instanceof Directive) {
1: 					directives.add((Directive)parameter);
1: 				}
1: 			}
1: 			directives.trimToSize();
1: 			return directives;
1: 		}
1: 		
1: 		public Collection<String> getPackageNames() {
0: 			return Collections.unmodifiableCollection(packageNames);
1: 		}
1: 
1: 		@Override
1: 		public Parameter getParameter(String name) {
1: 			return parameters.get(name);
1: 		}
1: 
1: 		@Override
1: 		public Collection<Parameter> getParameters() {
1: 			return Collections.unmodifiableCollection(parameters.values());
1: 		}
1: 		
1: 		@Override
1: 		public String getPath() {
1: 			return path;
1: 		}
1: 		
1: 		public Collection<ExportPackageCapability> toCapabilities(Resource resource) {
1: 			Collection<ExportPackageCapability> result = new ArrayList<ExportPackageCapability>(packageNames.size());
0: 			for (String packageName : packageNames)
1: 				result.add(new ExportPackageCapability(packageName, parameters.values(), resource));
1: 			return result;
1: 		}
1: 		
1: 		@Override
1: 		public String toString() {
0: 			StringBuilder builder = new StringBuilder()
0: 					.append(getPath());
0: 			for (Parameter parameter : getParameters()) {
0: 				builder.append(';').append(parameter);
1: 			}
1: 			return builder.toString();
1: 		}
1: 	public static final String NAME = Constants.EXPORT_PACKAGE;
1: 	
0: 	private static final Pattern PATTERN = Pattern.compile('(' + Grammar.EXPORT + ")(?=,|\\z)");
1: 	
0: 	private final Set<Clause> clauses = new HashSet<Clause>();
1: 	
1: 	public ExportPackageHeader(String value) {
0: 		Matcher matcher = PATTERN.matcher(value);
0: 		while (matcher.find())
0: 			clauses.add(new Clause(matcher.group()));
0: 		if (clauses.isEmpty())
0: 			throw new IllegalArgumentException("An " + NAME + " header must have at least one clause");
1: 	}
1: 	
1: 	@Override
0: 	public Collection<ExportPackageHeader.Clause> getClauses() {
0: 		return Collections.unmodifiableSet(clauses);
1: 	}
1: 	@Override
1: 	public String getName() {
1: 		return NAME;
1: 	}
1: 	@Override
1: 	public String getValue() {
1: 		return toString();
1: 	}
1: 	
1: 	public Collection<ExportPackageCapability> toCapabilities(Resource resource) {
0: 		Collection<ExportPackageCapability> result = new ArrayList<ExportPackageCapability>();
1: 		for (Clause clause : clauses)
1: 			result.addAll(clause.toCapabilities(resource));
1: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public String toString() {
1: 		StringBuilder builder = new StringBuilder();
1: 		for (Clause clause : getClauses()) {
1: 			builder.append(clause).append(',');
1: 		// Remove the trailing comma. Note at least one clause is guaranteed to exist.
1: 		builder.deleteCharAt(builder.length() - 1);
1: 		return builder.toString();
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.resource.Capability;
1: import org.osgi.resource.Resource;
commit:a1c6951
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.namespace.PackageNamespace;
/////////////////////////////////////////////////////////////////////////
0: 						return PackageNamespace.PACKAGE_NAMESPACE;
/////////////////////////////////////////////////////////////////////////
0: 						result.put(PackageNamespace.PACKAGE_NAMESPACE, exportedPackage);
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.resource.AbstractCapability;
/////////////////////////////////////////////////////////////////////////
0: 				capabilities.add(new AbstractCapability() {
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Capability;
0: import org.osgi.framework.resource.Resource;
0: import org.osgi.framework.resource.ResourceConstants;
commit:4717af0
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
0: 
1: import org.osgi.framework.Constants;
0: import org.osgi.framework.Version;
0: import org.osgi.framework.wiring.Capability;
0: import org.osgi.framework.wiring.Resource;
0: import org.osgi.framework.wiring.ResourceConstants;
0: 
0: public class ExportPackageHeader extends AbstractHeader {
0: 	public static final String NAME = Constants.EXPORT_PACKAGE;
0: 	
0: 	public ExportPackageHeader(String value) {
0: 		super(NAME, value);
0: 	}
0: 	
0: 	public List<Capability> getCapabilities(final Resource resource) {
0: 		List<Capability> capabilities = new ArrayList<Capability>(clauses.size());
0: 		for (final Clause clause : clauses) {
0: 			String[] exportedPackages = clause.getPath().split(";");
0: 			for (final String exportedPackage : exportedPackages) {
0: 				capabilities.add(new Capability() {
0: 					@Override
0: 					public String getNamespace() {
0: 						return ResourceConstants.WIRING_PACKAGE_NAMESPACE;
0: 					}
0: 
0: 					@Override
0: 					public Map<String, String> getDirectives() {
0: 						Collection<Directive> directives = clause.getDirectives();
0: 						Map<String, String> result = new HashMap<String, String>(directives.size());
0: 						for (Directive directive : directives)
0: 							result.put(directive.getName(), directive.getValue());
0: 						return result;
0: 					}
0: 
0: 					@Override
0: 					public Map<String, Object> getAttributes() {
0: 						Collection<Attribute> attributes = clause.getAttributes();
0: 						Map<String, Object> result = new HashMap<String, Object>(attributes.size() + 1);
0: 						for (Attribute attribute : attributes)
0: 							result.put(attribute.getName(), attribute.getValue());
0: 						// Add the namespace attribute.
0: 						result.put(ResourceConstants.WIRING_PACKAGE_NAMESPACE, exportedPackage);
0: 						// Add the default version, if necessary.
0: 						if (result.get(Constants.VERSION_ATTRIBUTE) == null)
0: 							result.put(Constants.VERSION_ATTRIBUTE, Version.emptyVersion);
0: 						return result;
0: 					}
0: 
0: 					@Override
0: 					public Resource getResource() {
0: 						return resource;
0: 					}
0: 				});
0: 			}
0: 		}
0: 		return capabilities;
0: 	}
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
0: 
0: public class ExportPackageHeader {
0: }
============================================================================