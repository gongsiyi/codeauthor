1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
1:1129914: 
1:1129914: 
1:1129914: public interface Grammar {
1:1129914: //	  section:                       *header +newline
1:1129914: //	  nonempty-section:      +header +newline
1:1129914: //	  newline:                      CR LF | LF | CR (not followed by LF)
1:1129914: //	  header:                       name : value
1:1129914: //	  name:                         alphanum *headerchar
1:1129914: //	  value:                          SPACE *otherchar newline *continuation
1:1129914: //	  continuation:              SPACE *otherchar newline
1:1129914: //	  alphanum:                  {A-Z} | {a-z} | {0-9}
1:1129914: //	  headerchar:                alphanum | - | _
1:1129914: //	  otherchar:                  any UTF-8 character except NUL, CR and LF
1:1129914: 
1:1129914: //	public static final String ALPHA = "[A-Za-z]";
1:1129914: //	public static final String DIGIT = "[0-9]";
1:1129914: //	public static final String ALPHANUM = ALPHA + '|' + DIGIT;
1:1129914: //	public static final String NEWLINE = "\r\n|\n|\r";
1:1129914: //	public static final String OTHERCHAR = "[^\u0000\r\n]";
1:1129914: //	public static final String SPACE = " ";
1:1129914: //	public static final String CONTINUATION = SPACE + OTHERCHAR + "*(?:" + NEWLINE + ')';
1:1129914: //	public static final String HEADERCHAR = ALPHANUM + "|-|_";
1:1129914: //	public static final String NAME = "(?:" + ALPHANUM + ")(?:" + HEADERCHAR + ")*";
1:1129914: //	public static final String VALUE = SPACE + OTHERCHAR + "*(?:" + NEWLINE + ")(?:" + CONTINUATION + ")*";
1:1129914: //	public static final String HEADER = NAME + ':' + VALUE;
1:1129914: //	public static final String SECTION = "(?:" + HEADER + ")*(?:" + NEWLINE + ")+";
1:1129914: //	public static final String NONEMPTY_SECTION = "(?:" + HEADER + ")+(?:" + NEWLINE + ")+";
1:1129914: 
1:1129914: //	  manifest-file:                    main-section newline *individual-section
1:1129914: //	  main-section:                    version-info newline *main-attribute
1:1129914: //	  version-info:                      Manifest-Version : version-number
1:1129914: //	  version-number :               digit+{.digit+}*
1:1129914: //	  main-attribute:                 (any legitimate main attribute) newline
1:1129914: //	  individual-section:             Name : value newline *perentry-attribute
1:1129914: //	  perentry-attribute:            (any legitimate perentry attribute) newline
1:1129914: //	   digit:                                {0-9}
1:1129914: 
1:1129914: //	public static final String VERSION_NUMBER = DIGIT + "+(?:\\." + DIGIT + "+)*";
1:1129914: //	public static final String VERSION_INFO = "Manifest-Version: " + VERSION_NUMBER;
1:1129914: //	public static final String MAIN_ATTRIBUTE = HEADER + NEWLINE;
1:1129914: //	public static final String MAIN_SECTION = VERSION_INFO + NEWLINE + "(?:" + MAIN_ATTRIBUTE + ")*";
1:1129914: //	public static final String PERENTRY_ATTRIBUTE = HEADER + NEWLINE;
1:1129914: //	public static final String INDIVIDUAL_SECTION = "Name: " + VALUE + NEWLINE + "(?:" + PERENTRY_ATTRIBUTE + ")*";
1:1129914: //	public static final String MANIFEST_FILE = MAIN_SECTION + NEWLINE + "(?:" + INDIVIDUAL_SECTION + ")*";
1:1129914: 
1:1129914: //	digit ::= [0..9]
1:1129914: //	alpha ::= [a..zA..Z]
1:1129914: //	alphanum ::= alpha | digit
1:226c63f: //	extended ::= ( alphanum | _ | - | . )+
1:226c63f: //	quoted-string ::= " ( ~["\#x0D#x0A#x00] | \"|\\)* "
1:1129914: //	argument ::= extended | quoted-string
1:1129914: //	parameter ::= directive | attribute
1:226c63f: //	directive ::= extended := argument
1:226c63f: //	attribute ::= extended = argument
1:226c63f: //	path ::= path-unquoted | (" path-unquoted ")
1:1129914: //	path-unquoted ::= path-sep | path-sep? path-element (path-sep path-element)*
1:1129914: //	path-element ::= ~[/"\#x0D#x0A#x00]+
1:226c63f: //	path-sep ::= /
1:226c63f: //	header ::= clause ( , clause ) *
1:226c63f: //	clause ::= path ( ; path ) * ( ; parameter ) *
1:1129914: 
1:1129914: 	public static final String DIGIT = "[0-9]";
1:1129914: 	public static final String ALPHA = "[A-Za-z]";
1:1129914: 	public static final String ALPHANUM = DIGIT + '|' + ALPHA;
1:1129914: 	public static final String TOKEN = "(?:" + ALPHANUM + "|_|-)+";
1:1129914: 	public static final String EXTENDED = "(?:" + ALPHANUM + "|_|-|\\.)+";
1:226c63f: 	public static final String QUOTED_STRING = "\"(?:[^\\\\\"\r\n\u0000]|\\\\\"|\\\\\\\\)*\"";
1:226c63f: 	public static final String ARGUMENT = EXTENDED + '|' + QUOTED_STRING;
1:1129914: 	public static final String DIRECTIVE = EXTENDED + ":=(?:" + ARGUMENT + ')';
1:1129914: 	public static final String ATTRIBUTE = EXTENDED + "=(?:" + ARGUMENT + ')';
1:1129914: 	public static final String PARAMETER = "(?:" + DIRECTIVE + ")|(?:" + ATTRIBUTE + ')';
1:1129914: 	public static final String PATH_ELEMENT = "[^/\"\r\n\u0000]+";
1:1129914: 	public static final String PATH_ELEMENT_NT = "[^/\"\r\n\u0000\\:=;, ]+";
1:1129914: 	public static final String PATH_SEP = "/";
1:1129914: 	public static final String PATH_UNQUOTED = PATH_SEP + '|' + PATH_SEP + '?' + PATH_ELEMENT + "(?:" + PATH_SEP + PATH_ELEMENT + ")*";
1:1129914: 	public static final String PATH_UNQUOTED_NT = PATH_SEP + '|' + PATH_SEP + '?' + PATH_ELEMENT_NT + "(?:" + PATH_SEP + PATH_ELEMENT_NT + ")*";
1:226c63f: 	public static final String PATH = "(?:" + PATH_UNQUOTED_NT + ")|\"(?:" + PATH_UNQUOTED + ")\"";
1:1c9c28b: 	public static final String CLAUSE = "(?:" + PATH + ")(?:;" + PATH + ")*(?:;\\s*(?:" + PARAMETER + "))*";
1:1129914: 	public static final String HEADERCHAR = ALPHANUM + "|_|-";
1:1129914: 	public static final String NAME = ALPHANUM + "(?:" + HEADERCHAR + ")*";
1:1129914: 	public static final String HEADER = NAME + ": " + CLAUSE + "(?:," + CLAUSE + ")*";
1:1129914: 
1:1129914: 	/*
1:1129914: 	 * jletter ::= a character for which the method Character.isJavaIdentifierStart(int) returns true
1:1129914: 	 * jletterordigit::= a character for which the method Character.isJavaIdentifierPart(int) returns true
1:1129914: 	 * identifier ::= jletter jletterordigit *
1:1129914: 	 * unique-name ::= identifier ( â€?.â€? identifier )*
1:1129914: 	 * package-name ::= unique-name
1:1129914: 	 * Import-Package ::= import ( ',' import )*
1:1129914: 	 * import ::= package-names ( ';' parameter )*
1:1129914: 	 * package-names ::= package-name ( ';' package-name )* // See 1.3.2
1:1129914: 	 */
1:1129914: 
1:1129914: 	public static final String JLETTER = "\\p{javaJavaIdentifierStart}";
1:1129914: 	public static final String JLETTERORDIGIT = "\\p{javaJavaIdentifierPart}";
1:1129914: 	public static final String IDENTIFIER = JLETTER + "(?:" + JLETTERORDIGIT + ")*";
1:1129914: 	public static final String UNIQUENAME = IDENTIFIER + "(?:\\." + IDENTIFIER + ")*";
1:1129914: 	public static final String SYMBOLICNAME = TOKEN + "(?:\\." + TOKEN + ")*";
1:1129914: 	public static final String PACKAGENAME = UNIQUENAME;
1:61da82e: 	public static final String PACKAGENAMES = PACKAGENAME + "\\s*(?:\\;\\s*" + PACKAGENAME + ")*";
1:deca8ed: 	public static final String IMPORT = PACKAGENAMES + "(?:;\\s*(?:" + PARAMETER + "))*";
1:deca8ed: 	public static final String IMPORTPACKAGE = IMPORT + "(?:\\,\\s*" + IMPORT + ")*";
1:1129914: 
1:c1afebc: 	public static final String NAMESPACE = SYMBOLICNAME;
1:c1afebc: 
1:47d9366: 	public static final String BUNDLE_DESCRIPTION = SYMBOLICNAME + "(?:;\\s*(?:" + PARAMETER + "))*";
1:47d9366: 	public static final String REQUIRE_BUNDLE = BUNDLE_DESCRIPTION + "(?:,\\s*(?:" + BUNDLE_DESCRIPTION + "))*";
1:47d9366: 
1:7837a59: 	public static final String EXPORT = PACKAGENAMES + "(?:;\\s*(?:" + PARAMETER + "))*";
1:7837a59: 	public static final String EXPORT_PACKAGE = EXPORT + "(?:,\\s*(?:" + EXPORT + "))*";
1:7837a59: 
1:26123d8: 	public static final String SCALAR = "String|Version|Long|Double";
1:26123d8: 	public static final String LIST = "List<(?:" + SCALAR + ")>";
1:26123d8: 	public static final String TYPE = "(?:" + SCALAR + ")|" + LIST;
1:26123d8: 	public static final String TYPED_ATTR = EXTENDED + "(?:\\:" + TYPE + ")?=(?:" + ARGUMENT + ')';
1:d93afd1: 	public static final String REQUIREMENT = NAMESPACE + "(?:;\\s*(?:(?:" + DIRECTIVE + ")|(?:" + TYPED_ATTR + ")))*";
1:d93afd1: 	public static final String REQUIRE_CAPABILITY = REQUIREMENT + "(?:,\\s*(?:" + REQUIREMENT + "))*";
1:26123d8: 	public static final String CAPABILITY = NAMESPACE + "(?:;\\s*(?:(?:" + DIRECTIVE + ")|(?:" + TYPED_ATTR + ")))*";
1:26123d8: 	public static final String PROVIDE_CAPABILITY = CAPABILITY + "(?:,\\s*(?:" + CAPABILITY + "))*";
1:26123d8: 
1:097d28b: 	public static final String OBJECTCLASS = PACKAGENAME;
1:0afdb06: 	public static final String SERVICE_OR_WILDCARD = "(" + OBJECTCLASS + "|[*])(?:;\\s*(?:" + PARAMETER + "))*";
1:097d28b: 
1:f1b1384: 	public static final String RESOURCE = SYMBOLICNAME + "(?:;\\s*(?:" + PARAMETER + "))*";
1:f1b1384: 	public static final String PREFERRED_PROVIDER = RESOURCE + "(?:,\\s*(?:" + RESOURCE + "))*";
1:f1b1384: 
1:1129914: 	/*
1:1129914: 	 * number ::= digit+
1:1129914: 	 * version ::= major( '.' minor ( '.' micro ( '.' qualifier )? )? )?
1:1129914: 	 * major ::= number // See 1.3.2
1:1129914: 	 * minor ::= number
1:1129914: 	 * micro ::= number
1:1129914: 	 * qualifier ::= ( alphanum | â€™_â€? | '-' )+
1:1129914: 	 * version-range ::= interval | atleast
1:1129914: 	 * interval ::= ( '[' | '(' ) floor ',' ceiling ( ']' | ')' )
1:1129914: 	 * atleast ::= version
1:1129914: 	 * floor ::= version
1:1129914: 	 * ceiling ::= version
1:1129914: 	 */
1:1129914: 
1:1129914: 	public static final String NUMBER = DIGIT + '+';
1:1129914: 	public static final String MAJOR = NUMBER;
1:1129914: 	public static final String MINOR = NUMBER;
1:1129914: 	public static final String MICRO = NUMBER;
1:1129914: 	public static final String QUALIFIER = "(?:" + ALPHANUM + "|_|-)+";
1:1129914: 	public static final String VERSION = MAJOR + "(?:\\." + MINOR + "(?:\\." + MICRO + "(?:\\." + QUALIFIER + ")?)?)?";
1:1129914: 	public static final String ATLEAST = VERSION;
1:1129914: 	public static final String FLOOR = VERSION;
1:1129914: 	public static final String CEILING = VERSION;
1:1129914: 	public static final String INTERVAL = "[\\[\\(]" + FLOOR + ',' + CEILING + "[\\[\\)]";
1:1129914: 	public static final String VERSIONRANGE = INTERVAL + '|' + ATLEAST;
1:d6eb080: 	
1:d6eb080: 	public static final String WILDCARD_NAME = PACKAGENAME + '|' + PACKAGENAME + "\\.\\*" + "|\\*";
1:d6eb080: 	public static final String WILDCARD_NAMES = WILDCARD_NAME + "\\s*(?:\\;\\s*" + WILDCARD_NAME + ")*";
1:d6eb080: 	public static final String DYNAMIC_DESCRIPTION = WILDCARD_NAMES + "(?:;\\s*(?:" + PARAMETER + "))*";
1:d6eb080: 	public static final String DYNAMICIMPORT_PACKAGE = DYNAMIC_DESCRIPTION + "(?:\\,\\s*" + DYNAMIC_DESCRIPTION + ")*";
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	public static final String REQUIREMENT = NAMESPACE + "(?:;\\s*(?:(?:" + DIRECTIVE + ")|(?:" + TYPED_ATTR + ")))*";
1: 	public static final String REQUIRE_CAPABILITY = REQUIREMENT + "(?:,\\s*(?:" + REQUIREMENT + "))*";
commit:61da82e
/////////////////////////////////////////////////////////////////////////
1: 	public static final String PACKAGENAMES = PACKAGENAME + "\\s*(?:\\;\\s*" + PACKAGENAME + ")*";
commit:f1b1384
/////////////////////////////////////////////////////////////////////////
1: 	public static final String RESOURCE = SYMBOLICNAME + "(?:;\\s*(?:" + PARAMETER + "))*";
1: 	public static final String PREFERRED_PROVIDER = RESOURCE + "(?:,\\s*(?:" + RESOURCE + "))*";
1: 	
commit:097d28b
/////////////////////////////////////////////////////////////////////////
1: 	public static final String OBJECTCLASS = PACKAGENAME;
0: 	public static final String SERVICE = OBJECTCLASS + "(?:;\\s*(?:" + PARAMETER + "))*";
0: 	public static final String SUBSYSTEM_EXPORTSERVICE = SERVICE + "(?:,\\s*(?:" + SERVICE + "))*";
0: 	public static final String SUBSYSTEM_IMPORTSERVICE = SERVICE + "(?:,\\s*(?:" + SERVICE + "))*";
1: 	
commit:26123d8
/////////////////////////////////////////////////////////////////////////
1: 	public static final String SCALAR = "String|Version|Long|Double";
1: 	public static final String LIST = "List<(?:" + SCALAR + ")>";
1: 	public static final String TYPE = "(?:" + SCALAR + ")|" + LIST;
1: 	public static final String TYPED_ATTR = EXTENDED + "(?:\\:" + TYPE + ")?=(?:" + ARGUMENT + ')';
1: 	public static final String CAPABILITY = NAMESPACE + "(?:;\\s*(?:(?:" + DIRECTIVE + ")|(?:" + TYPED_ATTR + ")))*";
1: 	public static final String PROVIDE_CAPABILITY = CAPABILITY + "(?:,\\s*(?:" + CAPABILITY + "))*";
1: 	
commit:7837a59
/////////////////////////////////////////////////////////////////////////
1: 	public static final String EXPORT = PACKAGENAMES + "(?:;\\s*(?:" + PARAMETER + "))*";
1: 	public static final String EXPORT_PACKAGE = EXPORT + "(?:,\\s*(?:" + EXPORT + "))*";
1: 	
commit:47d9366
/////////////////////////////////////////////////////////////////////////
1: 	public static final String BUNDLE_DESCRIPTION = SYMBOLICNAME + "(?:;\\s*(?:" + PARAMETER + "))*";
1: 	public static final String REQUIRE_BUNDLE = BUNDLE_DESCRIPTION + "(?:,\\s*(?:" + BUNDLE_DESCRIPTION + "))*";
1: 	
commit:c1afebc
/////////////////////////////////////////////////////////////////////////
1: 	public static final String NAMESPACE = SYMBOLICNAME;
0: 	public static final String REQUIREMENT = NAMESPACE + "(?:;\\s*(?:" + PARAMETER + "))*";
0: 	public static final String REQUIRE_CAPABILITY = REQUIREMENT + "(?:,\\s*(?:" + REQUIREMENT + "))*";
1: 	
commit:deca8ed
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	public static final String PACKAGENAMES = PACKAGENAME + "(?:\\;\\s*" + PACKAGENAME + ")*";
1: 	public static final String IMPORT = PACKAGENAMES + "(?:;\\s*(?:" + PARAMETER + "))*";
1: 	public static final String IMPORTPACKAGE = IMPORT + "(?:\\,\\s*" + IMPORT + ")*";
commit:fc759fb
/////////////////////////////////////////////////////////////////////////
0: 	public static final String IMPORT = PACKAGENAMES + "(?:;(?:" + PARAMETER + "))*";
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: 	// TODO The introduction of the whitespace (\\s*) before a parameter was added to get around a grammatically
0: 	// incorrect clause in Equinox: org.eclipse.osgi; singleton:=true;deployed-version=3.7.0.v20110221;type=osgi.bundle.
0: 	// Note the space before the singleton directive.
1: 	public static final String CLAUSE = "(?:" + PATH + ")(?:;" + PATH + ")*(?:;\\s*(?:" + PARAMETER + "))*";
commit:226c63f
/////////////////////////////////////////////////////////////////////////
1: //	extended ::= ( alphanum | _ | - | . )+
1: //	quoted-string ::= " ( ~["\#x0D#x0A#x00] | \"|\\)* "
1: //	directive ::= extended := argument
1: //	attribute ::= extended = argument
1: //	path ::= path-unquoted | (" path-unquoted ")
1: //	path-sep ::= /
1: //	header ::= clause ( , clause ) *
1: //	clause ::= path ( ; path ) * ( ; parameter ) *
1: 	public static final String QUOTED_STRING = "\"(?:[^\\\\\"\r\n\u0000]|\\\\\"|\\\\\\\\)*\"";
1: 	public static final String ARGUMENT = EXTENDED + '|' + QUOTED_STRING;
/////////////////////////////////////////////////////////////////////////
1: 	public static final String PATH = "(?:" + PATH_UNQUOTED_NT + ")|\"(?:" + PATH_UNQUOTED + ")\"";
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: 
1: public interface Grammar {
1: //	  section:                       *header +newline 
1: //	  nonempty-section:      +header +newline 
1: //	  newline:                      CR LF | LF | CR (not followed by LF) 
1: //	  header:                       name : value 
1: //	  name:                         alphanum *headerchar 
1: //	  value:                          SPACE *otherchar newline *continuation 
1: //	  continuation:              SPACE *otherchar newline 
1: //	  alphanum:                  {A-Z} | {a-z} | {0-9} 
1: //	  headerchar:                alphanum | - | _ 
1: //	  otherchar:                  any UTF-8 character except NUL, CR and LF
1: 	
1: //	public static final String ALPHA = "[A-Za-z]";
1: //	public static final String DIGIT = "[0-9]";
1: //	public static final String ALPHANUM = ALPHA + '|' + DIGIT;
1: //	public static final String NEWLINE = "\r\n|\n|\r";
1: //	public static final String OTHERCHAR = "[^\u0000\r\n]";
1: //	public static final String SPACE = " ";
1: //	public static final String CONTINUATION = SPACE + OTHERCHAR + "*(?:" + NEWLINE + ')';
1: //	public static final String HEADERCHAR = ALPHANUM + "|-|_";
1: //	public static final String NAME = "(?:" + ALPHANUM + ")(?:" + HEADERCHAR + ")*";
1: //	public static final String VALUE = SPACE + OTHERCHAR + "*(?:" + NEWLINE + ")(?:" + CONTINUATION + ")*";
1: //	public static final String HEADER = NAME + ':' + VALUE;
1: //	public static final String SECTION = "(?:" + HEADER + ")*(?:" + NEWLINE + ")+";
1: //	public static final String NONEMPTY_SECTION = "(?:" + HEADER + ")+(?:" + NEWLINE + ")+";
1: 	
1: //	  manifest-file:                    main-section newline *individual-section 
1: //	  main-section:                    version-info newline *main-attribute 
1: //	  version-info:                      Manifest-Version : version-number 
1: //	  version-number :               digit+{.digit+}* 
1: //	  main-attribute:                 (any legitimate main attribute) newline 
1: //	  individual-section:             Name : value newline *perentry-attribute 
1: //	  perentry-attribute:            (any legitimate perentry attribute) newline  
1: //	   digit:                                {0-9}
1: 	
1: //	public static final String VERSION_NUMBER = DIGIT + "+(?:\\." + DIGIT + "+)*";
1: //	public static final String VERSION_INFO = "Manifest-Version: " + VERSION_NUMBER;
1: //	public static final String MAIN_ATTRIBUTE = HEADER + NEWLINE;
1: //	public static final String MAIN_SECTION = VERSION_INFO + NEWLINE + "(?:" + MAIN_ATTRIBUTE + ")*";
1: //	public static final String PERENTRY_ATTRIBUTE = HEADER + NEWLINE;
1: //	public static final String INDIVIDUAL_SECTION = "Name: " + VALUE + NEWLINE + "(?:" + PERENTRY_ATTRIBUTE + ")*";
1: //	public static final String MANIFEST_FILE = MAIN_SECTION + NEWLINE + "(?:" + INDIVIDUAL_SECTION + ")*";
1: 	
1: //	digit ::= [0..9]
1: //	alpha ::= [a..zA..Z]
1: //	alphanum ::= alpha | digit
0: //	extended ::= ( alphanum | â€™_â€? | â€?-â€? | â€?.â€? )+
0: //	quoted-string ::= â€?"â€? ( ~["\#x0D#x0A#x00] | â€™\"â€™|â€™\\â€?)* â€?"â€?
1: //	argument ::= extended | quoted-string
1: //	parameter ::= directive | attribute
0: //	directive ::= extended â€?:=â€? argument
0: //	attribute ::= extended â€?=â€? argument
0: //	path ::= path-unquoted | (â€?"â€? path-unquoted â€?"â€?)
1: //	path-unquoted ::= path-sep | path-sep? path-element (path-sep path-element)*
1: //	path-element ::= ~[/"\#x0D#x0A#x00]+
0: //	path-sep ::= â€?/â€?
0: //	header ::= clause ( â€?,â€? clause ) *
0: //	clause ::= path ( â€?;â€? path ) * ( â€?;â€? parameter ) *
1: 	
1: 	public static final String DIGIT = "[0-9]";
1: 	public static final String ALPHA = "[A-Za-z]";
1: 	public static final String ALPHANUM = DIGIT + '|' + ALPHA;
1: 	public static final String TOKEN = "(?:" + ALPHANUM + "|_|-)+";
1: 	public static final String EXTENDED = "(?:" + ALPHANUM + "|_|-|\\.)+";
0: 	public static final String QUOTED_STRING = "\"(?:[^\"\r\n\u0000]|\\\\\"|\\\\\\\\)*\"";
0: 	public static final String ARGUMENT = EXTENDED /*+ '|' + QUOTED_STRING*/;
1: 	public static final String DIRECTIVE = EXTENDED + ":=(?:" + ARGUMENT + ')';
1: 	public static final String ATTRIBUTE = EXTENDED + "=(?:" + ARGUMENT + ')';
1: 	public static final String PARAMETER = "(?:" + DIRECTIVE + ")|(?:" + ATTRIBUTE + ')';
1: 	public static final String PATH_ELEMENT = "[^/\"\r\n\u0000]+";
1: 	public static final String PATH_ELEMENT_NT = "[^/\"\r\n\u0000\\:=;, ]+";
1: 	public static final String PATH_SEP = "/";
1: 	public static final String PATH_UNQUOTED = PATH_SEP + '|' + PATH_SEP + '?' + PATH_ELEMENT + "(?:" + PATH_SEP + PATH_ELEMENT + ")*";
1: 	public static final String PATH_UNQUOTED_NT = PATH_SEP + '|' + PATH_SEP + '?' + PATH_ELEMENT_NT + "(?:" + PATH_SEP + PATH_ELEMENT_NT + ")*";
0: 	public static final String PATH = "(?:" + PATH_UNQUOTED_NT + ")|(?:\"" + PATH_UNQUOTED + "\")";
0: 	public static final String CLAUSE = "(?:" + PATH + ")(?:;" + PATH + ")*(?:;(?:" + PARAMETER + "))*";
1: 	public static final String HEADERCHAR = ALPHANUM + "|_|-";
1: 	public static final String NAME = ALPHANUM + "(?:" + HEADERCHAR + ")*";
1: 	public static final String HEADER = NAME + ": " + CLAUSE + "(?:," + CLAUSE + ")*";
1: 	
1: 	/*
1: 	 * jletter ::= a character for which the method Character.isJavaIdentifierStart(int) returns true
1: 	 * jletterordigit::= a character for which the method Character.isJavaIdentifierPart(int) returns true
1: 	 * identifier ::= jletter jletterordigit *
1: 	 * unique-name ::= identifier ( â€?.â€? identifier )*
1: 	 * package-name ::= unique-name
1: 	 * Import-Package ::= import ( ',' import )*
1: 	 * import ::= package-names ( ';' parameter )*
1: 	 * package-names ::= package-name ( ';' package-name )* // See 1.3.2
1: 	 */
1: 	
1: 	public static final String JLETTER = "\\p{javaJavaIdentifierStart}";
1: 	public static final String JLETTERORDIGIT = "\\p{javaJavaIdentifierPart}";
1: 	public static final String IDENTIFIER = JLETTER + "(?:" + JLETTERORDIGIT + ")*";
1: 	public static final String UNIQUENAME = IDENTIFIER + "(?:\\." + IDENTIFIER + ")*";
1: 	public static final String SYMBOLICNAME = TOKEN + "(?:\\." + TOKEN + ")*";
1: 	public static final String PACKAGENAME = UNIQUENAME;
0: 	public static final String PACKAGENAMES = PACKAGENAME + "(?:\\;" + PACKAGENAME + ")*";
0: 	public static final String IMPORT = PACKAGENAMES + "(?:\\;" + Grammar.PARAMETER + ")*";
0: 	public static final String IMPORTPACKAGE = IMPORT + "(?:\\," + IMPORT + ")*";
1: 	
1: 	/*
1: 	 * number ::= digit+
1: 	 * version ::= major( '.' minor ( '.' micro ( '.' qualifier )? )? )?
1: 	 * major ::= number // See 1.3.2
1: 	 * minor ::= number
1: 	 * micro ::= number
1: 	 * qualifier ::= ( alphanum | â€™_â€? | '-' )+
1: 	 * version-range ::= interval | atleast
1: 	 * interval ::= ( '[' | '(' ) floor ',' ceiling ( ']' | ')' )
1: 	 * atleast ::= version
1: 	 * floor ::= version
1: 	 * ceiling ::= version
1: 	 */
1: 	
1: 	public static final String NUMBER = DIGIT + '+';
1: 	public static final String MAJOR = NUMBER;
1: 	public static final String MINOR = NUMBER;
1: 	public static final String MICRO = NUMBER;
1: 	public static final String QUALIFIER = "(?:" + ALPHANUM + "|_|-)+";
1: 	public static final String VERSION = MAJOR + "(?:\\." + MINOR + "(?:\\." + MICRO + "(?:\\." + QUALIFIER + ")?)?)?";
1: 	public static final String ATLEAST = VERSION;
1: 	public static final String FLOOR = VERSION;
1: 	public static final String CEILING = VERSION;
1: 	public static final String INTERVAL = "[\\[\\(]" + FLOOR + ',' + CEILING + "[\\[\\)]";
1: 	public static final String VERSIONRANGE = INTERVAL + '|' + ATLEAST;
1: }
author:Tom Watson
-------------------------------------------------------------------------------
commit:d6eb080
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	public static final String WILDCARD_NAME = PACKAGENAME + '|' + PACKAGENAME + "\\.\\*" + "|\\*";
1: 	public static final String WILDCARD_NAMES = WILDCARD_NAME + "\\s*(?:\\;\\s*" + WILDCARD_NAME + ")*";
1: 	public static final String DYNAMIC_DESCRIPTION = WILDCARD_NAMES + "(?:;\\s*(?:" + PARAMETER + "))*";
1: 	public static final String DYNAMICIMPORT_PACKAGE = DYNAMIC_DESCRIPTION + "(?:\\,\\s*" + DYNAMIC_DESCRIPTION + ")*";
commit:6576152
/////////////////////////////////////////////////////////////////////////
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0afdb06
/////////////////////////////////////////////////////////////////////////
0: //	  section:                       *header +newline
0: //	  nonempty-section:      +header +newline
0: //	  newline:                      CR LF | LF | CR (not followed by LF)
0: //	  header:                       name : value
0: //	  name:                         alphanum *headerchar
0: //	  value:                          SPACE *otherchar newline *continuation
0: //	  continuation:              SPACE *otherchar newline
0: //	  alphanum:                  {A-Z} | {a-z} | {0-9}
0: //	  headerchar:                alphanum | - | _
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: //	  manifest-file:                    main-section newline *individual-section
0: //	  main-section:                    version-info newline *main-attribute
0: //	  version-info:                      Manifest-Version : version-number
0: //	  version-number :               digit+{.digit+}*
0: //	  main-attribute:                 (any legitimate main attribute) newline
0: //	  individual-section:             Name : value newline *perentry-attribute
0: //	  perentry-attribute:            (any legitimate perentry attribute) newline
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
1: 	public static final String SERVICE_OR_WILDCARD = "(" + OBJECTCLASS + "|[*])(?:;\\s*(?:" + PARAMETER + "))*";
0: 	public static final String SUBSYSTEM_IMPORTEXPORTSERVICE = SERVICE_OR_WILDCARD + "(?:,\\s*(?:" + SERVICE_OR_WILDCARD + "))*";
0:     public static final String SUBSYSTEM_EXPORTSERVICE = SUBSYSTEM_IMPORTEXPORTSERVICE;
0: 	public static final String SUBSYSTEM_IMPORTSERVICE = SUBSYSTEM_IMPORTEXPORTSERVICE;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
============================================================================