1:27f76f6: /*
1:e8a0b01:  * Licensed to the Apache Software Foundation (ASF) under one
1:e8a0b01:  * or more contributor license agreements.  See the NOTICE file
1:e8a0b01:  * distributed with this work for additional information
1:e8a0b01:  * regarding copyright ownership.  The ASF licenses this file
1:e8a0b01:  * to you under the Apache License, Version 2.0 (the
1:e8a0b01:  * "License"); you may not use this file except in compliance
1:e8a0b01:  * with the License.  You may obtain a copy of the License at
1:e8a0b01:  *
1:e8a0b01:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e8a0b01:  *
1:e8a0b01:  * Unless required by applicable law or agreed to in writing,
1:e8a0b01:  * software distributed under the License is distributed on an
1:e8a0b01:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e8a0b01:  * KIND, either express or implied.  See the License for the
1:e8a0b01:  * specific language governing permissions and limitations
1:e8a0b01:  * under the License.
1:e8a0b01:  */
1:e8a0b01: package org.apache.aries.subsystem.itests;
4:e8a0b01: 
1:69fd7d4: import static org.junit.Assert.assertEquals;
1:4717af0: import static org.junit.Assert.assertSame;
1:4fd3b7f: import static org.junit.Assert.assertTrue;
1:27f76f6: import static org.junit.Assert.fail;
1:e8a0b01: 
1:27f76f6: import java.io.File;
1:57b6627: import java.io.FileNotFoundException;
1:595281c: import java.io.FileOutputStream;
1:4fd3b7f: import java.io.IOException;
1:57b6627: import java.io.InputStream;
1:4fd3b7f: import java.util.HashMap;
1:4fd3b7f: import java.util.Map;
1:27f76f6: 
1:69fd7d4: import org.apache.aries.subsystem.core.internal.BasicSubsystem;
1:595281c: import org.apache.aries.subsystem.itests.util.Utils;
1:595281c: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:595281c: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1:27f76f6: import org.apache.aries.util.filesystem.FileSystem;
1:27f76f6: import org.apache.aries.util.filesystem.IDirectory;
1:27f76f6: import org.apache.aries.util.io.IOUtils;
1:e8a0b01: import org.junit.Test;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:5b9ff63: import org.osgi.framework.Bundle;
1:47cea41: import org.osgi.framework.Version;
1:e8a0b01: import org.osgi.service.subsystem.Subsystem;
1:4fd3b7f: import org.osgi.service.subsystem.SubsystemConstants;
1:69fd7d4: import org.osgi.service.subsystem.SubsystemException;
1:e8a0b01: 
1:57b6627: @ExamReactorStrategy(PerMethod.class)
1:e8a0b01: public class InstallTest extends SubsystemTest {
1:57b6627: 	public InputStream getResourceAsStream(String path) {
1:57b6627: 		return SubsystemTest.class.getClassLoader().getResourceAsStream(path);
2:27f76f6: 	}
1:4fd3b7f: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:57b6627: 		createCompositeDirEsa();
1:57b6627: 		createApplication("feature3", "tb3.jar");
1:57b6627: 		createApplication("feature2", "tb3.jar", "tb2.jar");
1:4fd3b7f: 		createBundleA();
1:028c122: 		createBundleB();
1:4fd3b7f: 		createApplicationA();
1:4fd3b7f: 		createCompositeA();
1:028c122: 		createFeatureA();
1:27f76f6: 	}
1:595281c: 
1:57b6627: 	private void createCompositeDirEsa() throws IOException,
1:57b6627: 			FileNotFoundException {
1:595281c: 		ZipFixture feature = ArchiveFixture
1:595281c: 				.newZip()
1:57b6627: 				.binary("OSGI-INF/SUBSYSTEM.MF", getResourceAsStream("compositeDir" + "/OSGI-INF/SUBSYSTEM.MF"))
1:57b6627: 				.binary("a.jar/META-INF/MANIFEST.MF", getResourceAsStream("compositeDir" + "/a.jar/META-INF/MANIFEST.MF"))
1:57b6627: 				.binary("a.jar/a/A.class", getResourceAsStream("a/A.class"))
1:57b6627: 				.binary("applicationDir.esa/OSGI-INF/SUBSYSTEM.MF", getResourceAsStream("compositeDir" + "/applicationDir/OSGI-INF/SUBSYSTEM.MF"))
1:57b6627: 				.binary("applicationDir.esa/b.jar/META-INF/MANIFEST.MF", getResourceAsStream("compositeDir" + "/applicationDir/b.jar/META-INF/MANIFEST.MF"))
1:57b6627: 				.binary("applicationDir.esa/b.jar/b/B.class", getResourceAsStream("b/B.class"))
1:57b6627: 				.binary("applicationDir.esa/featureDir.esa/OSGI-INF/SUBSYSTEM.MF", getResourceAsStream(
1:47cea41: 								"compositeDir" + "/applicationDir/featureDir/OSGI-INF/SUBSYSTEM.MF"))
1:57b6627: 				.binary("applicationDir.esa/featureDir.esa/a.jar/META-INF/MANIFEST.MF", getResourceAsStream(
1:47cea41: 								"compositeDir" + "/applicationDir/featureDir/a.jar/META-INF/MANIFEST.MF"))
1:57b6627: 				.binary("applicationDir.esa/featureDir.esa/a.jar/a/A.class", getResourceAsStream("a/A.class"))
1:57b6627: 				.binary("applicationDir.esa/featureDir.esa/b.jar/META-INF/MANIFEST.MF", getResourceAsStream(
1:47cea41: 								"compositeDir" + "/applicationDir/featureDir/b.jar/META-INF/MANIFEST.MF"))
1:57b6627: 				.binary("applicationDir.esa/featureDir.esa/b.jar/b/B.class", getResourceAsStream("b/B.class"));
1:595281c: 		feature.end();
1:595281c: 		FileOutputStream fos = new FileOutputStream("compositeDir" + ".esa");
1:595281c: 		try {
1:595281c: 			feature.writeOut(fos);
1:595281c: 		} finally {
1:595281c: 			Utils.closeQuietly(fos);
1:595281c: 		}
1:595281c: 
1:27f76f6: 		File userDir = new File(System.getProperty("user.dir"));
1:27f76f6:     	IDirectory idir = FileSystem.getFSRoot(userDir);
1:595281c:     	File compositeDir = new File(userDir, "compositeDir");
1:595281c:     	compositeDir.mkdir();
1:595281c:     	IOUtils.unpackZip(idir.getFile("compositeDir.esa"), compositeDir);
1:27f76f6: 	}
1:27f76f6: 	
1:5b9ff63: 	@Test
1:4717af0: 	public void testReturnExistingSubsystemWithSameLocation() throws Exception {
1:0d95583: 		Subsystem subsystem1 = installSubsystemFromFile("feature3.esa");
1:5b9ff63: 		try {
1:0c3bb10: 			Subsystem subsystem2 = subsystem1.install(subsystem1.getLocation());
1:0c3bb10: 			assertSame(subsystem1, subsystem2);
1:5b9ff63: 		}
2:5b9ff63: 		finally {
1:574fba9: 			uninstallSubsystemSilently(subsystem1);
1:5b9ff63: 		}
1:5b9ff63: 	}
1:27f76f6: 	
1:4fd3b7f: 	/*
1:27f76f6:      * Install a subsystem using a location string and a null input stream. The
1:47cea41:      * location string is a file URL pointing to a subsystem directory 
1:47cea41:      * containing nested subsystem and bundle directories.
1:27f76f6:      */
1:27f76f6:     @Test
1:27f76f6:     public void testLocationAsDirectoryUrl() throws Exception {
1:595281c:     	File file = new File("compositeDir");
1:5b9ff63:     	try {
1:a990e32:     		Subsystem subsystem = installSubsystem(getRootSubsystem(), file.toURI().toString(), null, (Boolean[]) null);
1:5b9ff63:     		try {
1:47cea41:     			assertSymbolicName("org.apache.aries.subsystem.itests.composite.dir", subsystem); 
1:47cea41:     			assertConstituents(3, subsystem);
1:47cea41:     			assertConstituent(subsystem, "org.apache.aries.subsystem.itests.composite.dir.bundle.a");
1:47cea41:     			Bundle b = getConstituentAsBundle(
1:47cea41:     					subsystem, 
1:47cea41:     					"org.apache.aries.subsystem.itests.composite.dir.bundle.a", 
1:47cea41:     					null, null);
1:47cea41:     			assertLocation(subsystem.getLocation() + "!/" + "a.jar", b.getLocation());
1:47cea41:     			assertClassLoadable("a.A", b);
1:595281c:     			assertChildren(1, subsystem);
1:595281c:     			Subsystem child = subsystem.getChildren().iterator().next();
1:595281c:     			assertSymbolicName(
1:595281c:     					"org.apache.aries.subsystem.itests.application.dir",
1:595281c:     					child);
1:47cea41:     			assertConstituent(child, "org.apache.aries.subsystem.itests.composite.dir.bundle.b");
1:47cea41:     			b = getConstituentAsBundle(
1:47cea41:     					child, 
1:47cea41:     					"org.apache.aries.subsystem.itests.composite.dir.bundle.b", 
1:47cea41:     					null, null);
1:47cea41:     			assertLocation(child.getLocation() + "!/" + "b.jar", b.getLocation());
1:47cea41:     			assertClassLoadable("b.B", b);
1:595281c:     			assertChildren(1, child);
1:47cea41:     			child = child.getChildren().iterator().next();
1:595281c:     			assertSymbolicName(
1:595281c:     					"org.apache.aries.subsystem.itests.feature.dir",
1:47cea41:     					child);
1:47cea41:     			assertConstituent(subsystem, "org.apache.aries.subsystem.itests.composite.dir.bundle.a");
1:47cea41:     			b = getConstituentAsBundle(
1:47cea41:     					child, 
1:47cea41:     					"org.apache.aries.subsystem.itests.composite.dir.bundle.a", 
1:47cea41:     					null, null);
1:47cea41:     			assertLocation(child.getLocation() + "!/" + "a.jar", b.getLocation());
1:47cea41:     			assertClassLoadable("a.A", b);
1:47cea41:     			assertConstituent(child, "org.apache.aries.subsystem.itests.composite.dir.bundle.b", Version.parseVersion("1"));
1:47cea41:     			b = getConstituentAsBundle(
1:47cea41:     					child, 
1:47cea41:     					"org.apache.aries.subsystem.itests.composite.dir.bundle.b", 
1:47cea41:     					Version.parseVersion("1"), null);
1:47cea41:     			assertLocation(child.getLocation() + "!/" + "b.jar", b.getLocation());
1:47cea41:     			assertClassLoadable("b.B", b);
1:5b9ff63:     		}
1:5b9ff63:     		finally {
1:27f76f6:     			uninstallSubsystemSilently(subsystem);
1:5b9ff63:     		}
1:27f76f6:     		
1:27f76f6:     	}
1:27f76f6:     	catch (Exception e) {
1:27f76f6:     		e.printStackTrace();
1:27f76f6:     		fail("Subsystem installation using directory URL as location failed");
1:5b9ff63:     	}
1:5b9ff63:     }
1:4fd3b7f:     
1:4fd3b7f:     /*
1:4fd3b7f: 	 * Bundle-SymbolicName: bundle.a.jar
1:4fd3b7f: 	 */
1:4fd3b7f: 	private static final String BUNDLE_A = "bundle.a.jar";
1:4fd3b7f: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A));
1:4fd3b7f: 	}
1:4fd3b7f:     
1:4fd3b7f:     /*
1:4fd3b7f: 	 * No symbolic name. No manifest.
1:4fd3b7f: 	 */
1:4fd3b7f: 	private static final String APPLICATION_A = "application.a.esa";
1:4fd3b7f: 	
1:57b6627: 	private void createApplicationA() throws IOException {
1:4fd3b7f: 		createApplicationAManifest();
1:4fd3b7f: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1:4fd3b7f: 	}
1:4fd3b7f: 	
1:57b6627: 	private void createApplicationAManifest() throws IOException {
1:4fd3b7f: 		File manifest = new File(APPLICATION_A + ".mf");
1:4fd3b7f: 		if (manifest.exists())
1:4fd3b7f: 			assertTrue("Could not delete manifest", manifest.delete());
1:4fd3b7f: 	}
1:4fd3b7f:     
1:4fd3b7f:     @Test
1:4fd3b7f:     public void testGeneratedSymbolicNameWithoutManifest() throws Exception {
1:4fd3b7f:     	String expected = "org.apache.aries.subsystem.1";
1:4fd3b7f:     	Subsystem a = installSubsystemFromFile(APPLICATION_A);
1:4fd3b7f:     	try {
1:4fd3b7f:     		assertSymbolicName(expected, a);
1:4fd3b7f:     		assertSymbolicName(expected, a.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME));
1:4fd3b7f:     	}
1:4fd3b7f:     	finally {
1:4fd3b7f:     		uninstallSubsystemSilently(a);
1:4fd3b7f:     	}
1:4fd3b7f:     }
1:028c122:     
1:028c122:     /*
1:4fd3b7f: 	 * Manifest with no symbolic name header.
1:4fd3b7f: 	 */
1:4fd3b7f: 	private static final String COMPOSITE_A = "composite.a.esa";
1:4fd3b7f: 	
1:4fd3b7f: 	private static void createCompositeA() throws IOException {
1:4fd3b7f: 		createCompositeAManifest();
1:4fd3b7f: 		createSubsystem(COMPOSITE_A);
1:4fd3b7f: 	}
1:4fd3b7f: 	
1:4fd3b7f: 	private static void createCompositeAManifest() throws IOException {
1:4fd3b7f: 		Map<String, String> attributes = new HashMap<String, String>();
1:4fd3b7f: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:4fd3b7f: 		createManifest(COMPOSITE_A + ".mf", attributes);
1:4fd3b7f: 	}
1:4fd3b7f: 	
1:4fd3b7f: 	@Test
1:4fd3b7f:     public void testGeneratedSymbolicNameWithManifest() throws Exception {
1:4fd3b7f:     	String expected = "org.apache.aries.subsystem.1";
1:4fd3b7f:     	Subsystem a = installSubsystemFromFile(COMPOSITE_A);
1:4fd3b7f:     	try {
1:4fd3b7f:     		assertSymbolicName(expected, a);
1:4fd3b7f:     		assertSymbolicName(expected, a.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME));
1:4fd3b7f:     	}
1:4fd3b7f:     	finally {
1:4fd3b7f:     		uninstallSubsystemSilently(a);
1:4fd3b7f:     	}
1:4fd3b7f:     }
1:5b9ff63: 	
1:e8a0b01: 	/*
1:028c122: 	 * A bundle whose file extension does not end with ".jar".
1:028c122: 	 * 
1:028c122: 	 * Bundle-SymbolicName: bundle.b.war
1:028c122: 	 */
1:028c122: 	private static final String BUNDLE_B = "bundle.b.war";
1:028c122: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B));
1:028c122: 	}
1:028c122: 	
1:028c122: 	/*
1:028c122: 	 * Subsystem-SymbolicName: feature.a.esa
1:028c122: 	 * Subsystem-Type: osgi.subsystem.feature
1:028c122: 	 * Subsystem-Content: bundle.b.war
1:028c122: 	 */
1:028c122: 	private static final String FEATURE_A = "feature.a.esa";
1:028c122: 	
1:028c122: 	private static void createFeatureA() throws IOException {
1:028c122: 		createFeatureAManifest();
1:028c122: 		createSubsystem(FEATURE_A, BUNDLE_B);
1:028c122: 	}
1:028c122: 	
1:028c122: 	private static void createFeatureAManifest() throws IOException {
1:028c122: 		Map<String, String> attributes = new HashMap<String, String>();
1:028c122: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:028c122: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:028c122: 		createManifest(FEATURE_A + ".mf", attributes);
1:028c122: 	}
1:028c122: 	
1:028c122: 	@Test
1:028c122: 	public void testSupportBundleResourcesNotEndingWithJar() throws Exception {
1:028c122: 		Subsystem featureA = installSubsystemFromFile(FEATURE_A);
1:028c122: 		try {
1:028c122: 			assertConstituents(1, featureA);
1:028c122: 			assertConstituent(featureA, BUNDLE_B);
1:028c122: 		}
1:028c122: 		finally {
1:028c122: 			uninstallSubsystemSilently(featureA);
1:028c122: 		}
1:028c122: 	}
1:69fd7d4: 	
1:69fd7d4: 	@Test
1:69fd7d4:     public void testLocationAsEmptyString() throws Exception {
1:69fd7d4:     	try {
1:69fd7d4:     		Subsystem a = installSubsystemFromFile(getRootSubsystem(), new File(APPLICATION_A), "");
1:69fd7d4:     		try {
1:69fd7d4:     			BasicSubsystem basic = (BasicSubsystem)a;
1:69fd7d4:     			String location = basic.getLocation();
1:69fd7d4:     			assertEquals("Location value should be an empty string", "", location);
1:69fd7d4:     		}
1:69fd7d4:     		finally {
1:69fd7d4:     			uninstallSubsystemSilently(a);
1:69fd7d4:     		}
1:69fd7d4:     	}
1:69fd7d4:     	catch (SubsystemException e) {
1:69fd7d4:     		e.printStackTrace();
1:69fd7d4:     		fail("Subsystem should have installed");
1:69fd7d4:     	}
1:69fd7d4:     }
1:27f76f6: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:a990e32
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     		Subsystem subsystem = installSubsystem(getRootSubsystem(), file.toURI().toString(), null, (Boolean[]) null);
commit:69fd7d4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.core.archive.DeploymentManifest;
1: import org.apache.aries.subsystem.core.internal.BasicSubsystem;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.SubsystemException;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	@Test
1:     public void testLocationAsEmptyString() throws Exception {
1:     	try {
1:     		Subsystem a = installSubsystemFromFile(getRootSubsystem(), new File(APPLICATION_A), "");
1:     		try {
1:     			BasicSubsystem basic = (BasicSubsystem)a;
1:     			String location = basic.getLocation();
1:     			assertEquals("Location value should be an empty string", "", location);
1:     		}
1:     		finally {
1:     			uninstallSubsystemSilently(a);
1:     		}
1:     	}
1:     	catch (SubsystemException e) {
1:     		e.printStackTrace();
1:     		fail("Subsystem should have installed");
1:     	}
1:     }
commit:ea44072
/////////////////////////////////////////////////////////////////////////
0: 								"a/A.class"))
/////////////////////////////////////////////////////////////////////////
0: 								"b/B.class"))
/////////////////////////////////////////////////////////////////////////
0: 								"a/A.class"))
0: 								"b/B.class"));
commit:028c122
/////////////////////////////////////////////////////////////////////////
1: 		createBundleB();
1: 		createFeatureA();
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/*
1: 	 * A bundle whose file extension does not end with ".jar".
1: 	 * 
1: 	 * Bundle-SymbolicName: bundle.b.war
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.war";
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		createBundle(BUNDLE_B);
1: 	}
1: 	
1: 	/*
1: 	 * Subsystem-SymbolicName: feature.a.esa
1: 	 * Subsystem-Type: osgi.subsystem.feature
1: 	 * Subsystem-Content: bundle.b.war
1: 	 */
1: 	private static final String FEATURE_A = "feature.a.esa";
1: 	
1: 	private static void createFeatureA() throws IOException {
1: 		createFeatureAManifest();
1: 		createSubsystem(FEATURE_A, BUNDLE_B);
1: 	}
1: 	
1: 	private static void createFeatureAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 		createManifest(FEATURE_A + ".mf", attributes);
1: 	}
1: 	
1: 	@Test
1: 	public void testSupportBundleResourcesNotEndingWithJar() throws Exception {
1: 		Subsystem featureA = installSubsystemFromFile(FEATURE_A);
1: 		try {
1: 			assertConstituents(1, featureA);
1: 			assertConstituent(featureA, BUNDLE_B);
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(featureA);
1: 		}
1: 	}
commit:4fd3b7f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.subsystem.SubsystemConstants;
/////////////////////////////////////////////////////////////////////////
1: 		createBundleA();
1: 		createApplicationA();
1: 		createCompositeA();
/////////////////////////////////////////////////////////////////////////
1:     
1:     /*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		createBundle(BUNDLE_A);
1: 	}
1:     
1:     /*
1: 	 * No symbolic name. No manifest.
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	
0: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
0: 	private static void createApplicationAManifest() throws IOException {
1: 		File manifest = new File(APPLICATION_A + ".mf");
1: 		if (manifest.exists())
1: 			assertTrue("Could not delete manifest", manifest.delete());
1: 	}
1:     
1:     @Test
1:     public void testGeneratedSymbolicNameWithoutManifest() throws Exception {
1:     	String expected = "org.apache.aries.subsystem.1";
1:     	Subsystem a = installSubsystemFromFile(APPLICATION_A);
1:     	try {
1:     		assertSymbolicName(expected, a);
1:     		assertSymbolicName(expected, a.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME));
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(a);
1:     	}
1:     }
1:     
1:     /*
1: 	 * Manifest with no symbolic name header.
1: 	 */
1: 	private static final String COMPOSITE_A = "composite.a.esa";
1: 	
1: 	private static void createCompositeA() throws IOException {
1: 		createCompositeAManifest();
1: 		createSubsystem(COMPOSITE_A);
1: 	}
1: 	
1: 	private static void createCompositeAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		createManifest(COMPOSITE_A + ".mf", attributes);
1: 	}
1: 	
1: 	@Test
1:     public void testGeneratedSymbolicNameWithManifest() throws Exception {
1:     	String expected = "org.apache.aries.subsystem.1";
1:     	Subsystem a = installSubsystemFromFile(COMPOSITE_A);
1:     	try {
1:     		assertSymbolicName(expected, a);
1:     		assertSymbolicName(expected, a.getSubsystemHeaders(null).get(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME));
1:     	}
1:     	finally {
1:     		uninstallSubsystemSilently(a);
1:     	}
1:     }
commit:590cf45
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:47cea41
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Version;
/////////////////////////////////////////////////////////////////////////
0: 				.binary("a.jar/META-INF/MANIFEST.MF", 
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/a.jar/META-INF/MANIFEST.MF"))
0: 				.binary("a.jar/a/A.class", 
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/a.jar/a/A.class"))
0: 				.binary("applicationDir.esa/b.jar/META-INF/MANIFEST.MF", 
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/applicationDir/b.jar/META-INF/MANIFEST.MF"))
0: 				.binary("applicationDir.esa/b.jar/b/B.class", 
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/applicationDir/b.jar/b/B.class"))
1: 								"compositeDir" + "/applicationDir/featureDir/OSGI-INF/SUBSYSTEM.MF"))
0: 				.binary("applicationDir.esa/featureDir.esa/a.jar/META-INF/MANIFEST.MF", 
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
1: 								"compositeDir" + "/applicationDir/featureDir/a.jar/META-INF/MANIFEST.MF"))
0: 				.binary("applicationDir.esa/featureDir.esa/a.jar/a/A.class", 
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/applicationDir/featureDir/a.jar/a/A.class"))
0: 				.binary("applicationDir.esa/featureDir.esa/b.jar/META-INF/MANIFEST.MF", 
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
1: 								"compositeDir" + "/applicationDir/featureDir/b.jar/META-INF/MANIFEST.MF"))
0: 				.binary("applicationDir.esa/featureDir.esa/b.jar/b/B.class", 
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/applicationDir/featureDir/b.jar/b/B.class"));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * location string is a file URL pointing to a subsystem directory 
1:      * containing nested subsystem and bundle directories.
/////////////////////////////////////////////////////////////////////////
1:     			assertSymbolicName("org.apache.aries.subsystem.itests.composite.dir", subsystem); 
1:     			assertConstituents(3, subsystem);
1:     			assertConstituent(subsystem, "org.apache.aries.subsystem.itests.composite.dir.bundle.a");
1:     			Bundle b = getConstituentAsBundle(
1:     					subsystem, 
1:     					"org.apache.aries.subsystem.itests.composite.dir.bundle.a", 
1:     					null, null);
1:     			assertLocation(subsystem.getLocation() + "!/" + "a.jar", b.getLocation());
1:     			assertClassLoadable("a.A", b);
1:     			assertConstituent(child, "org.apache.aries.subsystem.itests.composite.dir.bundle.b");
1:     			b = getConstituentAsBundle(
1:     					child, 
1:     					"org.apache.aries.subsystem.itests.composite.dir.bundle.b", 
1:     					null, null);
1:     			assertLocation(child.getLocation() + "!/" + "b.jar", b.getLocation());
1:     			assertClassLoadable("b.B", b);
1:     			child = child.getChildren().iterator().next();
1:     					child);
1:     			assertConstituent(subsystem, "org.apache.aries.subsystem.itests.composite.dir.bundle.a");
1:     			b = getConstituentAsBundle(
1:     					child, 
1:     					"org.apache.aries.subsystem.itests.composite.dir.bundle.a", 
1:     					null, null);
1:     			assertLocation(child.getLocation() + "!/" + "a.jar", b.getLocation());
1:     			assertClassLoadable("a.A", b);
1:     			assertConstituent(child, "org.apache.aries.subsystem.itests.composite.dir.bundle.b", Version.parseVersion("1"));
1:     			b = getConstituentAsBundle(
1:     					child, 
1:     					"org.apache.aries.subsystem.itests.composite.dir.bundle.b", 
1:     					Version.parseVersion("1"), null);
1:     			assertLocation(child.getLocation() + "!/" + "b.jar", b.getLocation());
1:     			assertClassLoadable("b.B", b);
commit:595281c
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileOutputStream;
1: import org.apache.aries.subsystem.itests.util.Utils;
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
/////////////////////////////////////////////////////////////////////////
1: 		
1: 		ZipFixture feature = ArchiveFixture
1: 				.newZip()
0: 				.binary("OSGI-INF/SUBSYSTEM.MF",
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/OSGI-INF/SUBSYSTEM.MF"))
0: 				.binary("applicationDir.esa/OSGI-INF/SUBSYSTEM.MF",
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/applicationDir/OSGI-INF/SUBSYSTEM.MF"))
0: 				.binary("applicationDir.esa/featureDir.esa/OSGI-INF/SUBSYSTEM.MF",
0: 						SubsystemTest.class.getClassLoader().getResourceAsStream(
0: 								"compositeDir" + "/applicationDir/featureDir/OSGI-INF/SUBSYSTEM.MF"));
1: 		feature.end();
1: 		FileOutputStream fos = new FileOutputStream("compositeDir" + ".esa");
1: 		try {
1: 			feature.writeOut(fos);
1: 		} finally {
1: 			Utils.closeQuietly(fos);
1: 		}
1: 		
/////////////////////////////////////////////////////////////////////////
1:     	File compositeDir = new File(userDir, "compositeDir");
1:     	compositeDir.mkdir();
1:     	IOUtils.unpackZip(idir.getFile("compositeDir.esa"), compositeDir);
/////////////////////////////////////////////////////////////////////////
1:     	File file = new File("compositeDir");
0:     			assertSymbolicName("org.apache.aries.subsystem.itests.composite.dir", subsystem);
1:     			assertChildren(1, subsystem);
1:     			Subsystem child = subsystem.getChildren().iterator().next();
1:     			assertSymbolicName(
1:     					"org.apache.aries.subsystem.itests.application.dir",
1:     					child);
1:     			assertChildren(1, child);
1:     			assertSymbolicName(
1:     					"org.apache.aries.subsystem.itests.feature.dir",
0:     					child.getChildren().iterator().next());
commit:5b9ff63
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.startlevel.BundleStartLevel;
0: import org.osgi.framework.startlevel.FrameworkStartLevel;
/////////////////////////////////////////////////////////////////////////
0: 		createApplication("feature2", new String[]{"tb3.jar", "tb2.jar"});
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
0:     public void testManagedBundleStartLevel() throws Exception {
0:     	bundleContext.getBundle(0).adapt(FrameworkStartLevel.class).setInitialBundleStartLevel(5);
0:     	Bundle tb1 = bundleContext.installBundle("tb1.jar", SubsystemTest.class.getClassLoader().getResourceAsStream("feature1/tb1.jar"));
1:     	try {
0:     		Subsystem feature2 = installSubsystemFromFile("feature2.esa");
1:     		try {
0:     			startSubsystem(feature2);
1:     			try {
0:     				assertEquals("Wrong start level for unmanaged bundle", 5, tb1.adapt(BundleStartLevel.class).getStartLevel());
0:     				assertEquals("Wrong start level for managed bundle", 1, getBundle(feature2, "org.apache.aries.subsystem.itests.tb2").adapt(BundleStartLevel.class).getStartLevel());
0:     				assertEquals("Wrong start level for managed bundle", 1, getBundle(feature2, "org.apache.aries.subsystem.itests.tb3").adapt(BundleStartLevel.class).getStartLevel());
1:     			}
1:     			finally {
0:     				stopSubsystemSilently(feature2);
1:     			}
1:     		}
1:     		finally {
0:     			uninstallSubsystemSilently(feature2);
1:     		}
1:     	}
1:     	finally {
0:     		uninstallSilently(tb1);
1:     	}
1:     }
commit:27f76f6
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: import java.io.File;
1: 
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.IDirectory;
1: import org.apache.aries.util.io.IOUtils;
/////////////////////////////////////////////////////////////////////////
0: 		createApplication("emptySubsystem", new String[0]);
1: 	
0: 	public void setUp() throws Exception {
0: 		super.setUp();
1: 		File userDir = new File(System.getProperty("user.dir"));
1:     	IDirectory idir = FileSystem.getFSRoot(userDir);
0:     	File emptySubsystem = new File(userDir, "emptySubsystem");
0:     	emptySubsystem.mkdir();
0:     	IOUtils.unpackZip(idir.getFile("emptySubsystem.esa"), emptySubsystem);
1: 	}
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/*
1:      * Install a subsystem using a location string and a null input stream. The
0:      * location string is a file URL pointing to a directory.
1:      */
1:     @Test
1:     public void testLocationAsDirectoryUrl() throws Exception {
0:     	File file = new File("emptySubsystem");
0:     	try {
0:     		Subsystem subsystem = installSubsystem(getRootSubsystem(), file.toURI().toString(), null);
0:     		try {
0:     			assertEmptySubsystem(subsystem);
1:     		}
0:     		finally {
1:     			uninstallSubsystemSilently(subsystem);
1:     		}
1:     		
1:     	}
1:     	catch (Exception e) {
1:     		e.printStackTrace();
1:     		fail("Subsystem installation using directory URL as location failed");
1:     	}
1:     }
commit:574fba9
/////////////////////////////////////////////////////////////////////////
1: 			uninstallSubsystemSilently(subsystem1);
commit:0d95583
/////////////////////////////////////////////////////////////////////////
0: 		FileOutputStream fos = new FileOutputStream(name + ".esa");
/////////////////////////////////////////////////////////////////////////
1: 		Subsystem subsystem1 = installSubsystemFromFile("feature3.esa");
commit:a677a53
/////////////////////////////////////////////////////////////////////////
0: 			uninstallUnscopedSubsystem(subsystem1);
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: 		createApplication("feature3", new String[]{"tb3.jar"});
0: 		Subsystem subsystem1 = installSubsystemFromFile("feature3.ssa");
commit:0c3bb10
/////////////////////////////////////////////////////////////////////////
0: 		createApplication("feature2", new String[]{"tb2.jar", "tb3.jar"});
0: 		createApplication("feature1", new String[]{"tb1.jar", "feature2.ssa", "tb3.jar"});
0: 		try {
0: 			// Need to wait for the nested feature within feature1 to install. Perhaps use a simpler subsystem for this test?
0: 			// TODO This needs to be better implemented and put into a utility method on the superclass.
0: 			while (!subsystem1.getChildren().iterator().next().getState().equals(Subsystem.State.INSTALLED))
0: 				Thread.sleep(100);
1: 			Subsystem subsystem2 = subsystem1.install(subsystem1.getLocation());
1: 			assertSame(subsystem1, subsystem2);
0: 		}
0: 		finally {
0: 			uninstallSubsystem(subsystem1);
0: 		}
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		createApplication("feature2", new String[]{"tb2.jar"});
0: 		createApplication("feature1", new String[]{"tb1.jar", "feature2.ssa"});
commit:4717af0
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertSame;
/////////////////////////////////////////////////////////////////////////
1: 	public void testReturnExistingSubsystemWithSameLocation() throws Exception {
0: 		Subsystem subsystem1 = installSubsystemFromFile("feature1.ssa");
0: 		Subsystem subsystem2 = subsystem1.install(subsystem1.getLocation());
0: 		assertSame(subsystem1, subsystem2);
commit:e6bf465
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.subsystem.itests.util.Utils;
commit:e8a0b01
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
0: import static org.junit.Assert.fail;
1: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
1: 
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.service.subsystem.Subsystem;
0: import org.osgi.service.subsystem.SubsystemException;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class InstallTest extends SubsystemTest {
0: 	private static void createApplication(String name, String[] content) throws Exception {
0: 		ZipFixture feature = ArchiveFixture
0: 				.newZip()
0: 				.binary("OSGI-INF/SUBSYSTEM.MF",
0: 						FeatureTest.class.getClassLoader().getResourceAsStream(
0: 								name + "/OSGI-INF/SUBSYSTEM.MF"));
0: 		for (String s : content) {
0: 			try {
0: 				feature.binary(s,
0: 						FeatureTest.class.getClassLoader().getResourceAsStream(
0: 								name + '/' + s));
0: 			}
0: 			catch (Exception e) {
0: 				feature.binary(s, new FileInputStream(new File(s)));
0: 			}
0: 		}
0: 		feature.end();
0: 		FileOutputStream fos = new FileOutputStream(name + ".ssa");
0: 		try {
0: 			feature.writeOut(fos);
0: 		} finally {
0: 			Utils.closeQuietly(fos);
0: 		}
0: 	}
1: 	
0: 	@Before
0: 	public static void createApplications() throws Exception {
0: 		if (createdApplications) {
0: 			return;
0: 		}
0: 		createApplication("feature1", new String[]{"tb1.jar"});
0: 		createdApplications = true;
0: 	}
1: 
0: 	@Test
0: 	public void testRejectSubsystemWithExistingLocation() throws Exception {
0: 		Subsystem subsystem = installSubsystemFromFile("feature1.ssa");
0: 		try {
0: 			installSubsystemFromFile("feature1.ssa");
0: 			fail("SubsystemException should have been thrown");
0: 		}
0: 		catch (SubsystemException e) {
0: 			// Pass.
0: 		}
0: 		catch (Throwable t) {
0: 			fail("SubsystemException should have been thrown");
0: 		}
0: 		finally {
0: 			uninstallSubsystem(subsystem);
0: 		}
0: 	}
0: }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileNotFoundException;
1: import java.io.InputStream;
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: @ExamReactorStrategy(PerMethod.class)
1: 	public InputStream getResourceAsStream(String path) {
1: 		return SubsystemTest.class.getClassLoader().getResourceAsStream(path);
0: 	}
0: 	
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 		createCompositeDirEsa();
1: 		createApplication("feature3", "tb3.jar");
1: 		createApplication("feature2", "tb3.jar", "tb2.jar");
0: 		createBundleA();
0: 		createBundleB();
0: 		createApplicationA();
0: 		createCompositeA();
0: 		createFeatureA();
0: 	}
0: 
1: 	private void createCompositeDirEsa() throws IOException,
1: 			FileNotFoundException {
1: 				.binary("OSGI-INF/SUBSYSTEM.MF", getResourceAsStream("compositeDir" + "/OSGI-INF/SUBSYSTEM.MF"))
1: 				.binary("a.jar/META-INF/MANIFEST.MF", getResourceAsStream("compositeDir" + "/a.jar/META-INF/MANIFEST.MF"))
1: 				.binary("a.jar/a/A.class", getResourceAsStream("a/A.class"))
1: 				.binary("applicationDir.esa/OSGI-INF/SUBSYSTEM.MF", getResourceAsStream("compositeDir" + "/applicationDir/OSGI-INF/SUBSYSTEM.MF"))
1: 				.binary("applicationDir.esa/b.jar/META-INF/MANIFEST.MF", getResourceAsStream("compositeDir" + "/applicationDir/b.jar/META-INF/MANIFEST.MF"))
1: 				.binary("applicationDir.esa/b.jar/b/B.class", getResourceAsStream("b/B.class"))
1: 				.binary("applicationDir.esa/featureDir.esa/OSGI-INF/SUBSYSTEM.MF", getResourceAsStream(
1: 				.binary("applicationDir.esa/featureDir.esa/a.jar/META-INF/MANIFEST.MF", getResourceAsStream(
1: 				.binary("applicationDir.esa/featureDir.esa/a.jar/a/A.class", getResourceAsStream("a/A.class"))
1: 				.binary("applicationDir.esa/featureDir.esa/b.jar/META-INF/MANIFEST.MF", getResourceAsStream(
1: 				.binary("applicationDir.esa/featureDir.esa/b.jar/b/B.class", getResourceAsStream("b/B.class"));
/////////////////////////////////////////////////////////////////////////
0: 
0: 	
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A));
/////////////////////////////////////////////////////////////////////////
1: 	private void createApplicationA() throws IOException {
1: 	private void createApplicationAManifest() throws IOException {
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B));
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:98617b0
/////////////////////////////////////////////////////////////////////////
0: 	static void createApplication(String name, String[] content) throws Exception {
============================================================================