1:cab8bfe: /*
1:cab8bfe:  * Licensed to the Apache Software Foundation (ASF) under one
1:cab8bfe:  * or more contributor license agreements.  See the NOTICE file
1:cab8bfe:  * distributed with this work for additional information
1:cab8bfe:  * regarding copyright ownership.  The ASF licenses this file
1:cab8bfe:  * to you under the Apache License, Version 2.0 (the
1:cab8bfe:  * "License"); you may not use this file except in compliance
1:cab8bfe:  * with the License.  You may obtain a copy of the License at
1:cab8bfe:  *
1:cab8bfe:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cab8bfe:  *
1:cab8bfe:  * Unless required by applicable law or agreed to in writing,
1:cab8bfe:  * software distributed under the License is distributed on an
1:cab8bfe:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cab8bfe:  * KIND, either express or implied.  See the License for the
1:cab8bfe:  * specific language governing permissions and limitations
1:cab8bfe:  * under the License.
1:cab8bfe:  */
1:cab8bfe: package org.apache.aries.blueprint.utils;
5:cab8bfe: 
1:a77cc7b: import static org.junit.Assert.assertEquals;
1:a77cc7b: import static org.junit.Assert.assertFalse;
1:a77cc7b: import static org.junit.Assert.assertTrue;
1:a77cc7b: 
1:cab8bfe: import java.util.ArrayList;
1:cab8bfe: import java.util.Arrays;
1:cab8bfe: import java.util.Collection;
1:cab8bfe: import java.util.Collections;
1:cab8bfe: import java.util.Comparator;
1:cab8bfe: import java.util.HashSet;
1:cab8bfe: import java.util.LinkedList;
1:cab8bfe: import java.util.List;
1:cab8bfe: import java.util.Queue;
1:88a0e3f: import java.util.concurrent.Future;
1:cab8bfe: 
1:cab8bfe: import org.apache.aries.blueprint.di.CircularDependencyException;
1:cab8bfe: import org.apache.aries.blueprint.di.ExecutionContext;
1:cab8bfe: import org.apache.aries.blueprint.di.Recipe;
1:a77cc7b: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:cab8bfe: import org.apache.aries.blueprint.utils.ReflectionUtils.PropertyDescriptor;
1:a77cc7b: import org.easymock.Capture;
1:a77cc7b: import org.easymock.EasyMock;
1:a77cc7b: import org.easymock.IAnswer;
1:cab8bfe: import org.junit.BeforeClass;
1:cab8bfe: import org.junit.Test;
1:cab8bfe: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:cab8bfe: import org.osgi.service.blueprint.container.ReifiedType;
1:cab8bfe: 
1:cab8bfe: public class ReflectionUtilsTest {
1:cab8bfe:     private PropertyDescriptor[] sut;
1:a77cc7b:     private static ExtendedBlueprintContainer mockBlueprint;
1:c9e6b82:     public static class GetterOnly {
1:cab8bfe:         public String getValue() { return "test"; }
1:753fec1:     }
1:cab8bfe:     
1:cab8bfe:     private class Inconvertible {}
1:cab8bfe:     
1:cab8bfe:     @BeforeClass
1:a77cc7b:     public static void before() throws ClassNotFoundException
1:cab8bfe:     {
1:a77cc7b:         mockBlueprint = EasyMock.createNiceMock(ExtendedBlueprintContainer.class);
1:a77cc7b:         final Capture<String> nameCapture = new Capture<String>();
1:a77cc7b:         EasyMock.expect(mockBlueprint.loadClass(EasyMock.capture(nameCapture))).andAnswer(new IAnswer<Class<?>>() {
1:a77cc7b:             public Class<?> answer() throws Throwable {
1:a77cc7b:                 return Thread.currentThread().getContextClassLoader().loadClass(nameCapture.getValue());
1:a77cc7b:             }
1:a77cc7b:         });
1:a77cc7b:         EasyMock.replay(mockBlueprint);
1:a77cc7b: 
1:cab8bfe:         ExecutionContext.Holder.setContext(new ExecutionContext() {
1:cab8bfe:             public void addPartialObject(String name, Object object) {}
1:cab8bfe:             public boolean containsObject(String name) { return false; }
1:cab8bfe: 
1:cab8bfe:             public Object convert(Object value, ReifiedType type) throws Exception {
1:cab8bfe:                 if (type.getRawClass().equals(Inconvertible.class)) throw new Exception();
1:cab8bfe:                 else if (type.getRawClass().equals(String.class)) return String.valueOf(value);
1:cab8bfe:                 else if (type.getRawClass().equals(List.class)) {
1:cab8bfe:                     if (value == null) return null;
1:cab8bfe:                     else if (value instanceof Collection) return new ArrayList((Collection) value);
1:cab8bfe:                     else throw new Exception();
1:cab8bfe:                 } else if (value == null) return null;
1:cab8bfe:                 else if (type.getRawClass().isInstance(value)) return value;
1:cab8bfe:                 else throw new Exception();
2:cab8bfe:             }
1:cab8bfe:             
1:cab8bfe:             public boolean canConvert(Object value, ReifiedType type) {
1:cab8bfe:                 if (value instanceof Inconvertible) return false;
1:cab8bfe:                 else if (type.getRawClass().equals(String.class)) return true;
1:cab8bfe:                 else if (type.getRawClass().equals(List.class) && (value == null || value instanceof Collection)) return true;
1:cab8bfe:                 else return false;
1:cab8bfe:             }
1:cab8bfe: 
1:cab8bfe:             public Object getObject(String name) { return null; }
1:cab8bfe:             public Object getPartialObject(String name) { return null; }
1:cab8bfe:             public Recipe getRecipe(String name) { return null; }
1:cab8bfe:             public Class loadClass(String className) throws ClassNotFoundException { return null; }
1:cab8bfe:             public Recipe pop() { return null; }
1:cab8bfe:             public void push(Recipe recipe) throws CircularDependencyException {}
1:88a0e3f:             public void removePartialObject(String name) {}
1:88a0e3f:             public Future<Object> addFullObject(String name, Future<Object> object) { return null; }            
1:cab8bfe:         });
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test
1:cab8bfe:     public void testGetterOnly() throws Exception {
1:cab8bfe:         loadProps(GetterOnly.class, true);
1:cab8bfe:         
1:cab8bfe:         assertEquals(2, sut.length);
1:cab8bfe:         assertEquals("class", sut[0].getName());
1:cab8bfe:         assertEquals("value", sut[1].getName());
1:cab8bfe:         
1:cab8bfe:         assertTrue(sut[1].allowsGet());
1:cab8bfe:         assertFalse(sut[1].allowsSet());
1:cab8bfe:         
1:08c11fc:         assertEquals("test", sut[1].get(new GetterOnly(), mockBlueprint));
1:cab8bfe:     }
1:cab8bfe:     
1:c9e6b82:     public static class SetterOnly {
1:cab8bfe:         private String f;
1:cab8bfe:         
1:cab8bfe:         public void setField(String val) { f = val; }
1:cab8bfe:         public String retrieve() { return f; }
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test
1:cab8bfe:     public void testSetterOnly() throws Exception {
1:cab8bfe:         loadProps(SetterOnly.class, false);
1:cab8bfe:         
1:cab8bfe:         assertEquals(2, sut.length);
1:cab8bfe:         assertEquals("field", sut[1].getName());
1:cab8bfe:         
1:cab8bfe:         assertFalse(sut[1].allowsGet());
1:cab8bfe:         assertTrue(sut[1].allowsSet());
1:cab8bfe:         
1:cab8bfe:         SetterOnly so = new SetterOnly();
1:08c11fc:         sut[1].set(so, "trial", mockBlueprint);
1:cab8bfe:         assertEquals("trial", so.retrieve());
1:cab8bfe:     }
1:cab8bfe:     
1:c9e6b82:     public static class SetterAndGetter {
1:cab8bfe:         private String f;
1:cab8bfe:         
1:cab8bfe:         public void setField(String val) { f = val; }
1:cab8bfe:         public String getField() { return f; }
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test
1:cab8bfe:     public void testSetterAndGetter() throws Exception {
1:cab8bfe:         loadProps(SetterAndGetter.class, false);
1:cab8bfe:         
1:cab8bfe:         assertEquals(2, sut.length);
1:cab8bfe:         assertEquals("field", sut[1].getName());
1:cab8bfe:         
1:cab8bfe:         assertTrue(sut[1].allowsGet());
1:cab8bfe:         assertTrue(sut[1].allowsSet());
1:cab8bfe:         
1:cab8bfe:         SetterAndGetter sag = new SetterAndGetter();
1:08c11fc:         sut[1].set(sag, "tribulation", mockBlueprint);
1:08c11fc:         assertEquals("tribulation", sut[1].get(sag, mockBlueprint));
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     static class DuplicateGetter {
1:cab8bfe:         public boolean isField() { return true; }
1:cab8bfe:         public boolean getField() { return false; }
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test
1:cab8bfe:     public void testDuplicateGetter() {
1:cab8bfe:         loadProps(DuplicateGetter.class, false);
1:cab8bfe:         
1:cab8bfe:         assertEquals(1, sut.length);
1:cab8bfe:         assertEquals("class", sut[0].getName());
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     static class FieldsAndProps {
1:cab8bfe:         private String hidden = "ordeal";
1:cab8bfe:         private String nonHidden;
1:cab8bfe:         
1:cab8bfe:         public String getHidden() { return hidden; }
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test
1:cab8bfe:     public void testFieldsAndProps() throws Exception {
1:cab8bfe:         loadProps(FieldsAndProps.class, true);
1:cab8bfe:         
1:cab8bfe:         assertEquals(3, sut.length);
1:cab8bfe:         
1:cab8bfe:         FieldsAndProps fap = new FieldsAndProps();
1:cab8bfe:         
1:cab8bfe:         // no mixing of setter and field injection
1:cab8bfe:         assertEquals("hidden", sut[1].getName());
1:cab8bfe:         assertTrue(sut[1].allowsGet());
1:cab8bfe:         assertTrue(sut[1].allowsSet());
1:cab8bfe:         
1:08c11fc:         assertEquals("ordeal", sut[1].get(fap, mockBlueprint));
1:08c11fc:         sut[1].set(fap, "calvary", mockBlueprint);
1:08c11fc:         assertEquals("calvary", sut[1].get(fap, mockBlueprint));
1:cab8bfe:         
1:cab8bfe:         assertEquals("nonHidden", sut[2].getName());
1:cab8bfe:         assertTrue(sut[2].allowsGet());
1:cab8bfe:         assertTrue(sut[2].allowsSet());
1:cab8bfe:         
1:08c11fc:         sut[2].set(fap, "predicament", mockBlueprint);
1:08c11fc:         assertEquals("predicament", sut[2].get(fap, mockBlueprint));
1:cab8bfe:     }
1:cab8bfe:     
1:c9e6b82:     public static class OverloadedSetters {
1:cab8bfe:         public Object field;
1:cab8bfe:         
1:cab8bfe:         public void setField(String val) { field = val; }
1:cab8bfe:         public void setField(List<String> val) { field = val; }
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test
1:cab8bfe:     public void testOverloadedSetters() throws Exception {
1:cab8bfe:         loadProps(OverloadedSetters.class, false);
1:cab8bfe:         
1:cab8bfe:         OverloadedSetters os = new OverloadedSetters();
1:cab8bfe: 
1:08c11fc:         sut[1].set(os, "scrutiny", mockBlueprint);
1:cab8bfe:         assertEquals("scrutiny", os.field);
1:cab8bfe:         
1:08c11fc:         sut[1].set(os, Arrays.asList("evaluation"), mockBlueprint);
1:cab8bfe:         assertEquals(Arrays.asList("evaluation"), os.field);
1:cab8bfe:         
1:cab8bfe:         // conversion case, Integer -> String
1:08c11fc:         sut[1].set(os, new Integer(3), mockBlueprint);
1:cab8bfe:         assertEquals("3", os.field);
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test(expected=ComponentDefinitionException.class)
1:cab8bfe:     public void testApplicableSetter() throws Exception {
1:cab8bfe:         loadProps(OverloadedSetters.class, false);
1:cab8bfe:         
1:08c11fc:         sut[1].set(new OverloadedSetters(), new Inconvertible(), mockBlueprint);
1:cab8bfe:     }
1:cab8bfe:     
1:c9e6b82:     public static class MultipleMatchesByConversion {
1:cab8bfe:         public void setField(String s) {}
1:cab8bfe:         public void setField(List<String> list) {}
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test(expected=ComponentDefinitionException.class)
1:cab8bfe:     public void testMultipleMatchesByConversion() throws Exception {
1:cab8bfe:         loadProps(MultipleMatchesByConversion.class, false);
1:cab8bfe:         
1:08c11fc:         sut[1].set(new MultipleMatchesByConversion(), new HashSet<String>(), mockBlueprint);
1:cab8bfe:     }
1:c9e6b82: 
1:c9e6b82:     public static class MultipleMatchesByType {
1:cab8bfe:         public void setField(List<String> list) {}
1:cab8bfe:         public void setField(Queue<String> list) {}
1:cab8bfe:         
1:cab8bfe:         public static int field;
1:cab8bfe:         
1:cab8bfe:         public void setOther(Collection<String> list) { field=1; }
1:cab8bfe:         public void setOther(List<String> list) { field=2; }
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test(expected=ComponentDefinitionException.class)
1:cab8bfe:     public void testMultipleSettersMatchByType() throws Exception {
1:cab8bfe:         loadProps(MultipleMatchesByType.class, false);
1:cab8bfe:         
1:08c11fc:         sut[1].set(new MultipleMatchesByType(), new LinkedList<String>(), mockBlueprint);
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test
1:cab8bfe:     public void testDisambiguationByHierarchy() throws Exception {
1:cab8bfe:         loadProps(MultipleMatchesByType.class, false);
1:cab8bfe:         
1:08c11fc:         sut[2].set(new MultipleMatchesByType(), new ArrayList<String>(), mockBlueprint);
1:cab8bfe:         assertEquals(2, MultipleMatchesByType.field);
1:cab8bfe:     }
1:c9e6b82: 
1:c9e6b82:     public static class NullSetterDisambiguation {
1:cab8bfe:         public static int field;
1:cab8bfe:         
1:cab8bfe:         public void setField(int i) { field = i; }
1:cab8bfe:         public void setField(Integer i) { field = -1; }
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     @Test
1:cab8bfe:     public void testNullDisambiguation() throws Exception {
1:cab8bfe:         loadProps(NullSetterDisambiguation.class, false);
1:cab8bfe:         
1:08c11fc:         sut[1].set(new NullSetterDisambiguation(), null, mockBlueprint);
1:cab8bfe:         assertEquals(-1, NullSetterDisambiguation.field);
1:cab8bfe:     }
1:cab8bfe:     
1:cab8bfe:     private void loadProps(Class<?> clazz, boolean allowsFieldInjection)
1:cab8bfe:     {
1:cab8bfe:         List<PropertyDescriptor> props = new ArrayList<PropertyDescriptor>(
1:cab8bfe:                 Arrays.asList(ReflectionUtils.getPropertyDescriptors(clazz, allowsFieldInjection)));
1:cab8bfe:         
1:cab8bfe:         Collections.sort(props, new Comparator<PropertyDescriptor>() {
1:cab8bfe:             public int compare(PropertyDescriptor o1, PropertyDescriptor o2) {
1:cab8bfe:                 return o1.getName().compareTo(o2.getName());
1:cab8bfe:             }
1:cab8bfe:         });
1:cab8bfe:         
1:cab8bfe:         sut = props.toArray(new PropertyDescriptor[0]);
1:cab8bfe:     }
1:cab8bfe: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:a77cc7b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1: import org.easymock.Capture;
1: import org.easymock.EasyMock;
1: import org.easymock.IAnswer;
1:     private static ExtendedBlueprintContainer mockBlueprint;
/////////////////////////////////////////////////////////////////////////
1:     public static void before() throws ClassNotFoundException
1:         mockBlueprint = EasyMock.createNiceMock(ExtendedBlueprintContainer.class);
1:         final Capture<String> nameCapture = new Capture<String>();
1:         EasyMock.expect(mockBlueprint.loadClass(EasyMock.capture(nameCapture))).andAnswer(new IAnswer<Class<?>>() {
1:             public Class<?> answer() throws Throwable {
1:                 return Thread.currentThread().getContextClassLoader().loadClass(nameCapture.getValue());
1:             }
1:         });
1:         EasyMock.replay(mockBlueprint);
1: 
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:c9e6b82
/////////////////////////////////////////////////////////////////////////
1:     public static class GetterOnly {
/////////////////////////////////////////////////////////////////////////
1:     public static class SetterOnly {
/////////////////////////////////////////////////////////////////////////
1:     public static class SetterAndGetter {
/////////////////////////////////////////////////////////////////////////
1:     public static class OverloadedSetters {
/////////////////////////////////////////////////////////////////////////
1:     public static class MultipleMatchesByConversion {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static class MultipleMatchesByType {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static class NullSetterDisambiguation {
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
commit:88a0e3f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Future;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             public void removePartialObject(String name) {}
1:             public Future<Object> addFullObject(String name, Future<Object> object) { return null; }            
commit:753fec1
/////////////////////////////////////////////////////////////////////////
0:     private final ExtendedBlueprintContainer mockBlueprint = Skeleton.newMock(
0:             new Object() {
0:                 public Class<?> loadClass(String name) throws ClassNotFoundException {
0:                     return Thread.currentThread().getContextClassLoader().loadClass(name);
1:                 }
0:             },            
0:             ExtendedBlueprintContainer.class);
commit:08c11fc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.ExtendedBlueprintContainer;
0: import org.apache.aries.unittest.mocks.Skeleton;
/////////////////////////////////////////////////////////////////////////
0:     private final ExtendedBlueprintContainer mockBlueprint = Skeleton.newMock(ExtendedBlueprintContainer.class);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("test", sut[1].get(new GetterOnly(), mockBlueprint));
/////////////////////////////////////////////////////////////////////////
1:         sut[1].set(so, "trial", mockBlueprint);
/////////////////////////////////////////////////////////////////////////
1:         sut[1].set(sag, "tribulation", mockBlueprint);
1:         assertEquals("tribulation", sut[1].get(sag, mockBlueprint));
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("ordeal", sut[1].get(fap, mockBlueprint));
1:         sut[1].set(fap, "calvary", mockBlueprint);
1:         assertEquals("calvary", sut[1].get(fap, mockBlueprint));
1:         sut[2].set(fap, "predicament", mockBlueprint);
1:         assertEquals("predicament", sut[2].get(fap, mockBlueprint));
/////////////////////////////////////////////////////////////////////////
1:         sut[1].set(os, "scrutiny", mockBlueprint);
1:         sut[1].set(os, Arrays.asList("evaluation"), mockBlueprint);
1:         sut[1].set(os, new Integer(3), mockBlueprint);
/////////////////////////////////////////////////////////////////////////
1:         sut[1].set(new OverloadedSetters(), new Inconvertible(), mockBlueprint);
/////////////////////////////////////////////////////////////////////////
1:         sut[1].set(new MultipleMatchesByConversion(), new HashSet<String>(), mockBlueprint);
/////////////////////////////////////////////////////////////////////////
1:         sut[1].set(new MultipleMatchesByType(), new LinkedList<String>(), mockBlueprint);
1:         sut[2].set(new MultipleMatchesByType(), new ArrayList<String>(), mockBlueprint);
/////////////////////////////////////////////////////////////////////////
1:         sut[1].set(new NullSetterDisambiguation(), null, mockBlueprint);
commit:cab8bfe
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.utils;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.HashSet;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Queue;
1: 
1: import org.apache.aries.blueprint.di.CircularDependencyException;
1: import org.apache.aries.blueprint.di.ExecutionContext;
1: import org.apache.aries.blueprint.di.Recipe;
1: import org.apache.aries.blueprint.utils.ReflectionUtils.PropertyDescriptor;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: import org.osgi.service.blueprint.container.ReifiedType;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class ReflectionUtilsTest {
1:     private PropertyDescriptor[] sut;
1:     
0:     static class GetterOnly {
1:         public String getValue() { return "test"; }
1:     }
1:     
1:     private class Inconvertible {}
1:     
1:     @BeforeClass
0:     public static void before()
1:     {
1:         ExecutionContext.Holder.setContext(new ExecutionContext() {
0:             public void addFullObject(String name, Object object) {}
1:             public void addPartialObject(String name, Object object) {}
1:             public boolean containsObject(String name) { return false; }
1: 
1:             public Object convert(Object value, ReifiedType type) throws Exception {
1:                 if (type.getRawClass().equals(Inconvertible.class)) throw new Exception();
1:                 else if (type.getRawClass().equals(String.class)) return String.valueOf(value);
1:                 else if (type.getRawClass().equals(List.class)) {
1:                     if (value == null) return null;
1:                     else if (value instanceof Collection) return new ArrayList((Collection) value);
1:                     else throw new Exception();
1:                 } else if (value == null) return null;
1:                 else if (type.getRawClass().isInstance(value)) return value;
1:                 else throw new Exception();
1:             }
1:             
1:             public boolean canConvert(Object value, ReifiedType type) {
1:                 if (value instanceof Inconvertible) return false;
1:                 else if (type.getRawClass().equals(String.class)) return true;
1:                 else if (type.getRawClass().equals(List.class) && (value == null || value instanceof Collection)) return true;
1:                 else return false;
1:             }
1: 
0:             public Object getInstanceLock() { return null; }
1:             public Object getObject(String name) { return null; }
1:             public Object getPartialObject(String name) { return null; }
1:             public Recipe getRecipe(String name) { return null; }
1:             public Class loadClass(String className) throws ClassNotFoundException { return null; }
1:             public Recipe pop() { return null; }
1:             public void push(Recipe recipe) throws CircularDependencyException {}
0:             public Object removePartialObject(String name) { return null; }            
1:         });
1:     }
1:     
1:     @Test
1:     public void testGetterOnly() throws Exception {
1:         loadProps(GetterOnly.class, true);
1:         
1:         assertEquals(2, sut.length);
1:         assertEquals("class", sut[0].getName());
1:         assertEquals("value", sut[1].getName());
1:         
1:         assertTrue(sut[1].allowsGet());
1:         assertFalse(sut[1].allowsSet());
1:         
0:         assertEquals("test", sut[1].get(new GetterOnly(), null));
1:     }
1:     
0:     static class SetterOnly {
1:         private String f;
1:         
1:         public void setField(String val) { f = val; }
1:         public String retrieve() { return f; }
1:     }
1:     
1:     @Test
1:     public void testSetterOnly() throws Exception {
1:         loadProps(SetterOnly.class, false);
1:         
1:         assertEquals(2, sut.length);
1:         assertEquals("field", sut[1].getName());
1:         
1:         assertFalse(sut[1].allowsGet());
1:         assertTrue(sut[1].allowsSet());
1:         
1:         SetterOnly so = new SetterOnly();
0:         sut[1].set(so, "trial", null);
1:         assertEquals("trial", so.retrieve());
1:     }
1:     
0:     static class SetterAndGetter {
1:         private String f;
1:         
1:         public void setField(String val) { f = val; }
1:         public String getField() { return f; }
1:     }
1:     
1:     @Test
1:     public void testSetterAndGetter() throws Exception {
1:         loadProps(SetterAndGetter.class, false);
1:         
1:         assertEquals(2, sut.length);
1:         assertEquals("field", sut[1].getName());
1:         
1:         assertTrue(sut[1].allowsGet());
1:         assertTrue(sut[1].allowsSet());
1:         
1:         SetterAndGetter sag = new SetterAndGetter();
0:         sut[1].set(sag, "tribulation", null);
0:         assertEquals("tribulation", sut[1].get(sag, null));
1:     }
1:     
1:     static class DuplicateGetter {
1:         public boolean isField() { return true; }
1:         public boolean getField() { return false; }
1:     }
1:     
1:     @Test
1:     public void testDuplicateGetter() {
1:         loadProps(DuplicateGetter.class, false);
1:         
1:         assertEquals(1, sut.length);
1:         assertEquals("class", sut[0].getName());
1:     }
1:     
1:     static class FieldsAndProps {
1:         private String hidden = "ordeal";
1:         private String nonHidden;
1:         
1:         public String getHidden() { return hidden; }
1:     }
1:     
1:     @Test
1:     public void testFieldsAndProps() throws Exception {
1:         loadProps(FieldsAndProps.class, true);
1:         
1:         assertEquals(3, sut.length);
1:         
1:         FieldsAndProps fap = new FieldsAndProps();
1:         
1:         // no mixing of setter and field injection
1:         assertEquals("hidden", sut[1].getName());
1:         assertTrue(sut[1].allowsGet());
1:         assertTrue(sut[1].allowsSet());
1:         
0:         assertEquals("ordeal", sut[1].get(fap, null));
0:         sut[1].set(fap, "calvary", null);
0:         assertEquals("calvary", sut[1].get(fap, null));
1:         
1:         assertEquals("nonHidden", sut[2].getName());
1:         assertTrue(sut[2].allowsGet());
1:         assertTrue(sut[2].allowsSet());
1:         
0:         sut[2].set(fap, "predicament", null);
0:         assertEquals("predicament", sut[2].get(fap, null));
1:     }
1:     
0:     static class OverloadedSetters {
1:         public Object field;
1:         
1:         public void setField(String val) { field = val; }
1:         public void setField(List<String> val) { field = val; }
1:     }
1:     
1:     @Test
1:     public void testOverloadedSetters() throws Exception {
1:         loadProps(OverloadedSetters.class, false);
1:         
1:         OverloadedSetters os = new OverloadedSetters();
1: 
0:         sut[1].set(os, "scrutiny", null);
1:         assertEquals("scrutiny", os.field);
1:         
0:         sut[1].set(os, Arrays.asList("evaluation"), null);
1:         assertEquals(Arrays.asList("evaluation"), os.field);
1:         
1:         // conversion case, Integer -> String
0:         sut[1].set(os, new Integer(3), null);
1:         assertEquals("3", os.field);
1:     }
1:     
1:     @Test(expected=ComponentDefinitionException.class)
1:     public void testApplicableSetter() throws Exception {
1:         loadProps(OverloadedSetters.class, false);
1:         
0:         sut[1].set(new OverloadedSetters(), new Inconvertible(), null);
1:     }
1:     
0:     static class MultipleMatchesByConversion {
1:         public void setField(String s) {}
1:         public void setField(List<String> list) {}
1:     }
1:     
1:     @Test(expected=ComponentDefinitionException.class)
1:     public void testMultipleMatchesByConversion() throws Exception {
1:         loadProps(MultipleMatchesByConversion.class, false);
1:         
0:         sut[1].set(new MultipleMatchesByConversion(), new HashSet<String>(), null);
1:     }
1:     
0:     static class MultipleMatchesByType {
1:         public void setField(List<String> list) {}
1:         public void setField(Queue<String> list) {}
1:         
1:         public static int field;
1:         
1:         public void setOther(Collection<String> list) { field=1; }
1:         public void setOther(List<String> list) { field=2; }
1:     }
1:     
1:     @Test(expected=ComponentDefinitionException.class)
1:     public void testMultipleSettersMatchByType() throws Exception {
1:         loadProps(MultipleMatchesByType.class, false);
1:         
0:         sut[1].set(new MultipleMatchesByType(), new LinkedList<String>(), null);
1:     }
1:     
1:     @Test
1:     public void testDisambiguationByHierarchy() throws Exception {
1:         loadProps(MultipleMatchesByType.class, false);
1:         
0:         sut[2].set(new MultipleMatchesByType(), new ArrayList<String>(), null);
1:         assertEquals(2, MultipleMatchesByType.field);
1:     }
1:     
0:     static class NullSetterDisambiguation {
1:         public static int field;
1:         
1:         public void setField(int i) { field = i; }
1:         public void setField(Integer i) { field = -1; }
1:     }
1:     
1:     @Test
1:     public void testNullDisambiguation() throws Exception {
1:         loadProps(NullSetterDisambiguation.class, false);
1:         
0:         sut[1].set(new NullSetterDisambiguation(), null, null);
1:         assertEquals(-1, NullSetterDisambiguation.field);
1:     }
1:     
1:     private void loadProps(Class<?> clazz, boolean allowsFieldInjection)
1:     {
1:         List<PropertyDescriptor> props = new ArrayList<PropertyDescriptor>(
1:                 Arrays.asList(ReflectionUtils.getPropertyDescriptors(clazz, allowsFieldInjection)));
1:         
1:         Collections.sort(props, new Comparator<PropertyDescriptor>() {
1:             public int compare(PropertyDescriptor o1, PropertyDescriptor o2) {
1:                 return o1.getName().compareTo(o2.getName());
1:             }
1:         });
1:         
1:         sut = props.toArray(new PropertyDescriptor[0]);
1:     }
1: }
============================================================================