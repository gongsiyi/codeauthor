1:1129914: /*
1:1129914:  * Licensed under the Apache License, Version 2.0 (the "License");
1:1129914:  * you may not use this file except in compliance with the License.
1:1129914:  * You may obtain a copy of the License at
1:1129914:  *
1:1129914:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1129914:  *
1:1129914:  * Unless required by applicable law or agreed to in writing, software
1:1129914:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1129914:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1129914:  * See the License for the specific language governing permissions and
1:1129914:  * limitations under the License.
1:1129914:  */
1:1129914: package org.apache.aries.subsystem.core.archive;
3:1129914: 
1:1129914: import java.util.ArrayList;
1:1129914: import java.util.Collections;
1:1129914: import java.util.List;
1:1129914: import java.util.Map;
1:1129914: 
1:1129914: import org.osgi.framework.Version;
1:a1c6951: import org.osgi.framework.namespace.IdentityNamespace;
1:71fe81a: import org.osgi.resource.Resource;
1:1129914: 
1:2ffcfb9: public abstract class AbstractHeader implements Header<Clause> {
1:1129914: 	// TODO This is specific to deployment manifests and shouldn't be at this level.
1:1129914: 	protected static void appendResource(Resource resource, StringBuilder builder) {
1:a1c6951: 		Map<String, Object> attributes = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0).getAttributes();
1:a1c6951: 		String symbolicName = (String)attributes.get(IdentityNamespace.IDENTITY_NAMESPACE);
1:a1c6951: 		Version version = (Version)attributes.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE);
1:a1c6951: 		String namespace = (String)attributes.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
1:1129914: 		builder.append(symbolicName)
1:1129914: 			.append(';')
1:1129914: 			.append(DeployedVersionAttribute.NAME)
1:1129914: 			.append('=')
1:1129914: 			.append(version.toString())
1:1129914: 			.append(';')
1:1129914: 			.append(TypeAttribute.NAME)
1:1129914: 			.append('=')
1:1129914: 			.append(namespace);
2:1129914: 	}
1:1129914: 	
1:2ffcfb9: 	protected final List<Clause> clauses;
1:1129914: 	protected final String name;
1:1129914: 	protected final String value;
1:1129914: 	
1:1129914: 	public AbstractHeader(String name, String value) {
1:2ffcfb9: 		if (name == null) {
1:2ffcfb9: 			throw new NullPointerException();
1:2ffcfb9: 		}
1:2ffcfb9: 		ClauseTokenizer tokenizer = new ClauseTokenizer(value);
1:2ffcfb9: 		List<Clause> clauses = new ArrayList<Clause>(tokenizer.getClauses().size());
1:2ffcfb9: 		for (String clause : tokenizer.getClauses()) {
1:2ffcfb9: 			clauses.add(new GenericClause(clause));
1:2ffcfb9: 		}
1:2ffcfb9: 		if (clauses.isEmpty()) {
1:2ffcfb9: 			throw new IllegalArgumentException("Invalid header syntax -> " + name + ": " + value);
1:2ffcfb9: 		}
1:1129914: 		this.name = name;
1:1129914: 		this.value = value;
1:2ffcfb9: 		this.clauses = Collections.synchronizedList(clauses);
1:1129914: 	}
1:2ffcfb9: 
1:2ffcfb9: 	@Override
1:2ffcfb9:     public List<Clause> getClauses() {
1:1129914: 		return Collections.unmodifiableList(clauses);
1:1129914: 	}
1:1129914: 
1:2ffcfb9: 	@Override
1:2ffcfb9:     public String getName() {
1:1129914: 		return name;
1:1129914: 	}
1:1129914: 	
1:2ffcfb9: 	@Override
1:2ffcfb9:     public String getValue() {
1:1129914: 		return value;
1:1129914: 	}
1:a677a53: 	
1:2ffcfb9: 	@Override
1:2ffcfb9:     public boolean equals(Object o) {
1:2ffcfb9:     	if (o == this) {
1:2ffcfb9:     		return true;
1:2ffcfb9:     	}
1:2ffcfb9:     	if (!(o instanceof AbstractHeader)) {
1:2ffcfb9:     		return false;
1:2ffcfb9:     	}
1:2ffcfb9:     	AbstractHeader that = (AbstractHeader)o;
1:2ffcfb9:     	return that.name.equals(this.name)
1:2ffcfb9:     			&& that.clauses.equals(this.clauses);
1:2ffcfb9:     }
1:2ffcfb9: 	
1:2ffcfb9: 	@Override
1:2ffcfb9: 	public int hashCode() {
1:2ffcfb9: 	    int result = 17;
1:2ffcfb9: 	    result = 31 * result + name.hashCode();
1:2ffcfb9: 	    result = 31 * result + clauses.hashCode();
1:2ffcfb9: 	    return result;
1:2ffcfb9: 	}
1:2ffcfb9: 
1:2ffcfb9: 	@Override
1:2ffcfb9:     public String toString() {
1:a677a53: 		return new StringBuilder(getClass().getName())
1:a677a53: 		.append(": name=")
1:a677a53: 		.append(name)
1:a677a53: 		.append(", value=")
1:a677a53: 		.append(value)
1:a677a53: 		.toString();
1:a677a53: 	}
1:1129914: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractHeader implements Header<Clause> {
/////////////////////////////////////////////////////////////////////////
1: 	protected final List<Clause> clauses;
1: 		if (name == null) {
1: 			throw new NullPointerException();
1: 		}
1: 		ClauseTokenizer tokenizer = new ClauseTokenizer(value);
1: 		List<Clause> clauses = new ArrayList<Clause>(tokenizer.getClauses().size());
1: 		for (String clause : tokenizer.getClauses()) {
1: 			clauses.add(new GenericClause(clause));
1: 		}
1: 		if (clauses.isEmpty()) {
1: 			throw new IllegalArgumentException("Invalid header syntax -> " + name + ": " + value);
1: 		}
1: 		this.clauses = Collections.synchronizedList(clauses);
1: 
1: 	@Override
1:     public List<Clause> getClauses() {
1: 	@Override
1:     public String getName() {
1: 	@Override
1:     public String getValue() {
1: 	@Override
1:     public boolean equals(Object o) {
1:     	if (o == this) {
1:     		return true;
1:     	}
1:     	if (!(o instanceof AbstractHeader)) {
1:     		return false;
1:     	}
1:     	AbstractHeader that = (AbstractHeader)o;
1:     	return that.name.equals(this.name)
1:     			&& that.clauses.equals(this.clauses);
1:     }
1: 	
1: 	@Override
1: 	public int hashCode() {
1: 	    int result = 17;
1: 	    result = 31 * result + name.hashCode();
1: 	    result = 31 * result + clauses.hashCode();
1: 	    return result;
1: 	}
1: 
1: 	@Override
1:     public String toString() {
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Resource;
commit:a1c6951
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.namespace.IdentityNamespace;
/////////////////////////////////////////////////////////////////////////
1: 		Map<String, Object> attributes = resource.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE).get(0).getAttributes();
1: 		String symbolicName = (String)attributes.get(IdentityNamespace.IDENTITY_NAMESPACE);
1: 		Version version = (Version)attributes.get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE);
1: 		String namespace = (String)attributes.get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE);
commit:a677a53
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	public String toString() {
1: 		return new StringBuilder(getClass().getName())
1: 		.append(": name=")
1: 		.append(name)
1: 		.append(", value=")
1: 		.append(value)
1: 		.toString();
1: 	}
commit:ead9c04
/////////////////////////////////////////////////////////////////////////
0: import org.osgi.framework.resource.Resource;
0: import org.osgi.framework.resource.ResourceConstants;
commit:e6bf465
/////////////////////////////////////////////////////////////////////////
0: 	protected static final String REGEX = Grammar.CLAUSE + "(?=,|\\z)";
/////////////////////////////////////////////////////////////////////////
0: 	protected final List<Clause> clauses = new ArrayList<Clause>();
/////////////////////////////////////////////////////////////////////////
0: 		while (matcher.find())
0: 			clauses.add(new GenericClause(matcher.group()));
0: 		if (clauses.isEmpty())
commit:1129914
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.Version;
0: import org.osgi.framework.wiring.Resource;
0: import org.osgi.framework.wiring.ResourceConstants;
1: 
0: public abstract class AbstractHeader implements Header {
0: 	protected static final String REGEX = '(' + Grammar.CLAUSE + ")(?:,(" + Grammar.CLAUSE + "))*";
0: 	protected static final Pattern PATTERN = Pattern.compile(REGEX);
1: 	
1: 	// TODO This is specific to deployment manifests and shouldn't be at this level.
1: 	protected static void appendResource(Resource resource, StringBuilder builder) {
0: 		Map<String, Object> attributes = resource.getCapabilities(ResourceConstants.IDENTITY_NAMESPACE).get(0).getAttributes();
0: 		String symbolicName = (String)attributes.get(ResourceConstants.IDENTITY_NAMESPACE);
0: 		Version version = (Version)attributes.get(ResourceConstants.IDENTITY_VERSION_ATTRIBUTE);
0: 		String namespace = (String)attributes.get(ResourceConstants.IDENTITY_TYPE_ATTRIBUTE);
1: 		builder.append(symbolicName)
1: 			.append(';')
1: 			.append(DeployedVersionAttribute.NAME)
1: 			.append('=')
1: 			.append(version.toString())
1: 			.append(';')
1: 			.append(TypeAttribute.NAME)
1: 			.append('=')
1: 			.append(namespace);
1: 	}
1: 	
0: 	protected final List<Clause> clauses;
1: 	protected final String name;
1: 	protected final String value;
1: 	
1: 	public AbstractHeader(String name, String value) {
1: 		this.name = name;
1: 		this.value = value;
0: 		Matcher matcher = PATTERN.matcher(value);
0: 		if (!matcher.matches())
0: 			throw new IllegalArgumentException("Invalid header syntax -> " + name + ": " + value);
0: 		// TODO Group count is probably not a reliable guide to set the size. Consider using an ArrayList
0: 		// with the default size then trimming the result down to size.
0: 		clauses = new ArrayList<Clause>(matcher.groupCount());
0: 		for (int i = 1; i <= matcher.groupCount(); i++) {
0: 			String group = matcher.group(i);
0: 			if (group == null) continue;
0: 			GenericClause clause = new GenericClause(group);
0: 			clauses.add(clause);
1: 		}
1: 	}
1: 	
0: 	public List<Clause> getClauses() {
1: 		return Collections.unmodifiableList(clauses);
1: 	}
1: 
0: 	public String getName() {
1: 		return name;
1: 	}
1: 	
0: 	public String getValue() {
1: 		return value;
1: 	}
1: }
============================================================================