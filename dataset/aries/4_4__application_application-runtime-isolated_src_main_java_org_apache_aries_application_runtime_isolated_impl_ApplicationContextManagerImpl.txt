1:9ca95bd: /*
1:9ca95bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:9ca95bd:  * or more contributor license agreements.  See the NOTICE file
1:9ca95bd:  * distributed with this work for additional information
1:9ca95bd:  * regarding copyright ownership.  The ASF licenses this file
1:9ca95bd:  * to you under the Apache License, Version 2.0 (the
1:9ca95bd:  * "License"); you may not use this file except in compliance
1:9ca95bd:  * with the License.  You may obtain a copy of the License at
1:9ca95bd:  *
1:9ca95bd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9ca95bd:  *
1:9ca95bd:  * Unless required by applicable law or agreed to in writing,
1:9ca95bd:  * software distributed under the License is distributed on an
1:9ca95bd:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:9ca95bd:  * KIND, either express or implied.  See the License for the
1:9ca95bd:  * specific language governing permissions and limitations
1:9ca95bd:  * under the License.
1:9ca95bd:  */
4:9ca95bd: 
1:9ca95bd: package org.apache.aries.application.runtime.isolated.impl;
1:9ca95bd: 
1:9ca95bd: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:9ca95bd: import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
1:9ca95bd: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:9ca95bd: 
1:46d65c6: import java.util.ArrayList;
1:46d65c6: import java.util.Collections;
1:9ca95bd: import java.util.HashSet;
1:9ca95bd: import java.util.Iterator;
1:46d65c6: import java.util.List;
1:9ca95bd: import java.util.Map;
1:9ca95bd: import java.util.Set;
1:9ca95bd: import java.util.concurrent.ConcurrentHashMap;
1:9ca95bd: import java.util.concurrent.ConcurrentMap;
1:9ca95bd: 
1:8151f8c: import org.apache.aries.application.DeploymentMetadata;
1:9ca95bd: import org.apache.aries.application.management.AriesApplication;
1:9ca95bd: import org.apache.aries.application.management.AriesApplicationContext;
1:9ca95bd: import org.apache.aries.application.management.AriesApplicationContext.ApplicationState;
1:9ca95bd: import org.apache.aries.application.management.ManagementException;
1:8151f8c: import org.apache.aries.application.management.UpdateException;
1:89f804e: import org.apache.aries.application.management.spi.framework.BundleFrameworkManager;
1:89f804e: import org.apache.aries.application.management.spi.repository.BundleRepositoryManager;
1:89f804e: import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
1:e22d71c: import org.apache.aries.application.utils.AppConstants;
1:9ca95bd: import org.osgi.framework.BundleException;
1:9ca95bd: import org.slf4j.Logger;
1:9ca95bd: import org.slf4j.LoggerFactory;
1:9ca95bd: 
1:9ca95bd: public class ApplicationContextManagerImpl implements AriesApplicationContextManager
1:9ca95bd: {
1:9ca95bd:   private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationContextManagerImpl.class);
1:9ca95bd:   
1:9db128e:   private ConcurrentMap<AriesApplication, AriesApplicationContext> _appToContextMap;
1:9ca95bd:   private BundleFrameworkManager _bundleFrameworkManager;  
1:9ca95bd:   private BundleRepositoryManager _bundleRepositoryManager;
1:9ca95bd: 
1:9ca95bd:   public ApplicationContextManagerImpl()
1:9ca95bd:   {
1:9ca95bd:     LOGGER.debug(LOG_ENTRY, "ApplicationContextImpl");
1:9ca95bd:     
1:9db128e:     _appToContextMap = new ConcurrentHashMap<AriesApplication, AriesApplicationContext>();
1:9ca95bd:     
1:e22d71c:     // When doing isolated runtime support provisioning against the local repo is a really bad idea
1:e22d71c:     // it can result in trying to install things into the shared framework into the local framework
1:e22d71c:     // this doesn't work because we don't know how to install them into the shared framework and
1:e22d71c:     // we can't just use them because they are in the local framework, so if this class is constructed
1:e22d71c:     // we disable local provisioning.
1:e22d71c:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
1:9ca95bd:     
1:9ca95bd:     LOGGER.debug(LOG_EXIT, "ApplicationContextImpl", this);
1:9ca95bd:   }
1:9ca95bd: 
1:9ca95bd:   public void setBundleFrameworkManager(BundleFrameworkManager bfm)
1:9ca95bd:   {
1:9ca95bd:     _bundleFrameworkManager = bfm;
1:9ca95bd:   }
1:9ca95bd:   
1:9ca95bd:   public void setBundleRepositoryManager(BundleRepositoryManager brm)
1:9ca95bd:   {
1:9ca95bd:     LOGGER.debug(LOG_ENTRY, "setBundleRepositoryManager", brm);
1:9ca95bd:     LOGGER.debug(LOG_EXIT, "setBundleRepositoryManager");
1:9ca95bd:     
1:9ca95bd:     this._bundleRepositoryManager = brm;
1:9ca95bd:   }
1:9ca95bd:   
1:9ca95bd:   public BundleRepositoryManager getBundleRepositoryManager()
1:9ca95bd:   {
1:9ca95bd:     LOGGER.debug(LOG_ENTRY, "getBundleRepositoryManager");
1:9ca95bd:     LOGGER.debug(LOG_EXIT, "getBundleRepositoryManager", _bundleRepositoryManager);
1:9ca95bd:     
1:9ca95bd:     return _bundleRepositoryManager;
1:9ca95bd:   }
1:9ca95bd:   
1:9ca95bd:   public synchronized AriesApplicationContext getApplicationContext(AriesApplication app)
1:9ca95bd:       throws BundleException, ManagementException
1:9ca95bd:   {
1:9ca95bd:     LOGGER.debug(LOG_ENTRY, "getApplicationContext", app);
1:9ca95bd:         
1:9db128e:     AriesApplicationContext result;
1:9ca95bd:     if (_appToContextMap.containsKey(app)) {
1:9ca95bd:       result = _appToContextMap.get(app);
1:9ca95bd:     } else {
1:9ca95bd:       result = new ApplicationContextImpl(app, this);
1:9db128e:       AriesApplicationContext previous = _appToContextMap.putIfAbsent(app, result);
1:9ca95bd:       if (previous != null) {
1:9ca95bd:         result = previous;
1:9ca95bd:       }
1:9ca95bd:     }
1:9ca95bd:     
1:9ca95bd:     LOGGER.debug(LOG_EXIT, "getApplicationContext", result);
1:9ca95bd:     
1:9ca95bd:     return result;
1:9ca95bd:   }
1:9ca95bd: 
1:9ca95bd:   public synchronized Set<AriesApplicationContext> getApplicationContexts()
1:9ca95bd:   {
1:9ca95bd:     LOGGER.debug(LOG_ENTRY, "getApplicationContexts");
1:9ca95bd:     
1:9ca95bd:     Set<AriesApplicationContext> result = new HashSet<AriesApplicationContext>();
1:9db128e:     for (Map.Entry<AriesApplication, AriesApplicationContext> entry : _appToContextMap.entrySet()) {
1:9ca95bd:       result.add(entry.getValue());
1:9ca95bd:     }
1:9ca95bd:     
1:9ca95bd:     LOGGER.debug(LOG_EXIT, "getApplicationContexts", result);
1:9ca95bd:     
1:9ca95bd:     return result;
1:9ca95bd:   }
1:9ca95bd: 
1:46d65c6:   public void remove(AriesApplicationContext app) throws BundleException
1:9ca95bd:   {
1:9ca95bd:     LOGGER.debug(LOG_ENTRY, "remove", app);
1:9ca95bd:     
1:46d65c6:     ApplicationContextImpl appToRemove = null;
1:46d65c6:     synchronized (_appToContextMap) { 
1:46d65c6:     	Iterator<Map.Entry<AriesApplication, AriesApplicationContext>> it = _appToContextMap.entrySet().iterator();
1:46d65c6:     	while (it.hasNext()) {
1:46d65c6:         Map.Entry<AriesApplication, AriesApplicationContext> entry = it.next();
1:46d65c6:         ApplicationContextImpl potentialMatch = (ApplicationContextImpl) entry.getValue();
1:46d65c6:         if (potentialMatch == app) {
1:46d65c6:           it.remove();
1:46d65c6:           appToRemove = potentialMatch;
1:46d65c6:           break;
1:46d65c6:         }
1:46d65c6:     	}
1:9ca95bd:     }
1:46d65c6:     
1:46d65c6:     if (appToRemove != null) { 
1:46d65c6:     	appToRemove.uninstall();
1:46d65c6:     }
1:46d65c6: 
1:9ca95bd:     LOGGER.debug(LOG_EXIT, "remove");
1:9ca95bd:   }
1:9ca95bd:   
1:46d65c6:   public void close()
1:9ca95bd:   {
1:9ca95bd:     LOGGER.debug(LOG_ENTRY, "close");
1:9ca95bd:     
1:46d65c6:     List<ApplicationContextImpl> contextsToUninstall = new ArrayList<ApplicationContextImpl>();
1:46d65c6:     synchronized (_appToContextMap) { 
1:46d65c6:     	Iterator<AriesApplicationContext> it = _appToContextMap.values().iterator();
1:46d65c6:     	while (it.hasNext()) { 
1:46d65c6:     		ApplicationContextImpl ctx = (ApplicationContextImpl)it.next();
1:46d65c6:     		if (ctx.getApplicationState() != ApplicationState.UNINSTALLED) { 
1:46d65c6:     			contextsToUninstall.add(ctx);
1:46d65c6:     			it.remove();
1:46d65c6:     		}
1:46d65c6:     	}
1:46d65c6:     }
1:46d65c6:     for (ApplicationContextImpl c : contextsToUninstall) { 
1:46d65c6:     	try { 
1:46d65c6:     		c.uninstall();
1:46d65c6:     	} catch (BundleException e)
1:9ca95bd:       {
1:cdbec1e:         LOGGER.debug(LOG_EXCEPTION,e);
1:9ca95bd:       }
1:9ca95bd:     }
1:9ca95bd:     
1:9ca95bd:     LOGGER.debug(LOG_EXIT, "close");
1:9ca95bd:   }
1:9ca95bd:   
1:9ca95bd:   protected BundleFrameworkManager getBundleFrameworkManager()
1:9ca95bd:   {
1:9ca95bd:     LOGGER.debug(LOG_ENTRY, "getBundleFrameworkManager");
1:9ca95bd:     LOGGER.debug(LOG_EXIT, "getBundleFrameworkManager", _bundleFrameworkManager);
1:9ca95bd:     
1:9ca95bd:     return _bundleFrameworkManager;
1:9ca95bd:   }
1:9ca95bd: 
1:8151f8c:   public AriesApplicationContext update(AriesApplication app, DeploymentMetadata oldMetadata) throws UpdateException {
1:9db128e:     ApplicationContextImpl ctx = (ApplicationContextImpl)_appToContextMap.get(app);
1:9ca95bd:     
1:8151f8c:     if (ctx == null) {
1:8151f8c:       throw new IllegalArgumentException("AriesApplication "+
1:8151f8c:           app.getApplicationMetadata().getApplicationSymbolicName() + "/" + app.getApplicationMetadata().getApplicationVersion() + 
1:8151f8c:           " cannot be updated because it is not installed");
1:9ca95bd:     }
1:9ca95bd:     
1:8151f8c:     ctx.update(app.getDeploymentMetadata(), oldMetadata);
1:9ca95bd:     
1:8151f8c:     return ctx;
1:9ca95bd:   }
1:9ca95bd: 
1:46d65c6:   public void bindBundleFrameworkManager(BundleFrameworkManager bfm)
5:cdbec1e:   {
1:f805d6b:     LOGGER.debug(LOG_ENTRY, "bindBundleFrameworkManager", bfm);
1:9ca95bd:     
1:46d65c6:     List<AriesApplicationContext> contexts = new ArrayList<AriesApplicationContext>();
1:46d65c6:     synchronized (_appToContextMap) { 
1:46d65c6:     	contexts.addAll (_appToContextMap.values());
1:46d65c6:     }
1:46d65c6:     
1:46d65c6:     for (AriesApplicationContext ctx : contexts) { 
1:46d65c6:     	try { 
1:46d65c6:     		((ApplicationContextImpl)ctx).open();
1:46d65c6:     	} catch (BundleException e) {
1:cdbec1e:         LOGGER.debug(LOG_EXCEPTION,e);
1:f805d6b:       }
2:cdbec1e:     }
1:f805d6b:     LOGGER.debug(LOG_EXIT, "bindBundleFrameworkManager");
1:cdbec1e:   }
1:9ca95bd: 
1:46d65c6:   public void unbindBundleFrameworkManager(BundleFrameworkManager bfm)
1:cdbec1e:   {
1:cdbec1e:     LOGGER.debug(LOG_ENTRY, "unbindBundleFrameworkManager", bfm);
1:9ca95bd:     
1:46d65c6:     List<AriesApplicationContext> appContexts = new ArrayList<AriesApplicationContext>();
1:46d65c6:     synchronized (_appToContextMap) { 
1:46d65c6:     	appContexts.addAll(_appToContextMap.values());
1:cdbec1e:     }
1:46d65c6:     for (AriesApplicationContext c : appContexts) { 
1:46d65c6:     	try { 
1:46d65c6:     		((ApplicationContextImpl)c).close();
1:46d65c6:     	} catch (BundleException e) { 
1:46d65c6:     		LOGGER.debug(LOG_EXCEPTION,e);
1:46d65c6:     	}
1:46d65c6:     }
1:46d65c6:    
1:cdbec1e:     LOGGER.debug(LOG_EXIT, "unbindBundleFrameworkManager");
1:cdbec1e:   }
1:cdbec1e: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:46d65c6
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:   public void remove(AriesApplicationContext app) throws BundleException
1:     ApplicationContextImpl appToRemove = null;
1:     synchronized (_appToContextMap) { 
1:     	Iterator<Map.Entry<AriesApplication, AriesApplicationContext>> it = _appToContextMap.entrySet().iterator();
1:     	while (it.hasNext()) {
1:         Map.Entry<AriesApplication, AriesApplicationContext> entry = it.next();
1:         ApplicationContextImpl potentialMatch = (ApplicationContextImpl) entry.getValue();
1:         if (potentialMatch == app) {
1:           it.remove();
1:           appToRemove = potentialMatch;
1:           break;
1:         }
1:     	}
1:     
1:     if (appToRemove != null) { 
1:     	appToRemove.uninstall();
1:     }
1: 
1:   public void close()
1:     List<ApplicationContextImpl> contextsToUninstall = new ArrayList<ApplicationContextImpl>();
1:     synchronized (_appToContextMap) { 
1:     	Iterator<AriesApplicationContext> it = _appToContextMap.values().iterator();
1:     	while (it.hasNext()) { 
1:     		ApplicationContextImpl ctx = (ApplicationContextImpl)it.next();
1:     		if (ctx.getApplicationState() != ApplicationState.UNINSTALLED) { 
1:     			contextsToUninstall.add(ctx);
1:     			it.remove();
1:     		}
1:     	}
1:     }
1:     for (ApplicationContextImpl c : contextsToUninstall) { 
1:     	try { 
1:     		c.uninstall();
1:     	} catch (BundleException e)
/////////////////////////////////////////////////////////////////////////
1:   public void bindBundleFrameworkManager(BundleFrameworkManager bfm)
1:     List<AriesApplicationContext> contexts = new ArrayList<AriesApplicationContext>();
1:     synchronized (_appToContextMap) { 
1:     	contexts.addAll (_appToContextMap.values());
1:     }
1:     
1:     for (AriesApplicationContext ctx : contexts) { 
1:     	try { 
1:     		((ApplicationContextImpl)ctx).open();
1:     	} catch (BundleException e) {
1:   public void unbindBundleFrameworkManager(BundleFrameworkManager bfm)
1:     List<AriesApplicationContext> appContexts = new ArrayList<AriesApplicationContext>();
1:     synchronized (_appToContextMap) { 
1:     	appContexts.addAll(_appToContextMap.values());
1:     for (AriesApplicationContext c : appContexts) { 
1:     	try { 
1:     		((ApplicationContextImpl)c).close();
1:     	} catch (BundleException e) { 
1:     		LOGGER.debug(LOG_EXCEPTION,e);
1:     	}
1:     }
1:    
commit:9ca95bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.runtime.isolated.impl;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
1: 
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: 
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
0: import org.apache.aries.application.management.AriesApplicationContextManager;
0: import org.apache.aries.application.management.BundleFramework;
0: import org.apache.aries.application.management.BundleFrameworkManager;
0: import org.apache.aries.application.management.BundleRepositoryManager;
1: import org.apache.aries.application.management.ManagementException;
1: import org.apache.aries.application.management.AriesApplicationContext.ApplicationState;
0: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ApplicationContextManagerImpl implements AriesApplicationContextManager
1: {
1:   private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationContextManagerImpl.class);
1:   
0:   private ConcurrentMap<AriesApplication, ApplicationContextImpl> _appToContextMap;
1:   private BundleFrameworkManager _bundleFrameworkManager;  
1:   private BundleRepositoryManager _bundleRepositoryManager;
1: 
1:   public ApplicationContextManagerImpl()
1:   {
1:     LOGGER.debug(LOG_ENTRY, "ApplicationContextImpl");
1:     
0:     _appToContextMap = new ConcurrentHashMap<AriesApplication, ApplicationContextImpl>();
1:     
1:     LOGGER.debug(LOG_EXIT, "ApplicationContextImpl", this);
1:   }
1: 
1:   public void setBundleFrameworkManager(BundleFrameworkManager bfm)
1:   {
0:     LOGGER.debug(LOG_ENTRY, "setBundleFrameworkManager", bfm);
0:     LOGGER.debug(LOG_EXIT, "setBundleFrameworkManager");
1:     
1:     _bundleFrameworkManager = bfm;
1:   }
1:   
1:   public void setBundleRepositoryManager(BundleRepositoryManager brm)
1:   {
1:     LOGGER.debug(LOG_ENTRY, "setBundleRepositoryManager", brm);
1:     LOGGER.debug(LOG_EXIT, "setBundleRepositoryManager");
1:     
1:     this._bundleRepositoryManager = brm;
1:   }
1:   
1:   public BundleRepositoryManager getBundleRepositoryManager()
1:   {
1:     LOGGER.debug(LOG_ENTRY, "getBundleRepositoryManager");
1:     LOGGER.debug(LOG_EXIT, "getBundleRepositoryManager", _bundleRepositoryManager);
1:     
1:     return _bundleRepositoryManager;
1:   }
1: 
1:   public synchronized AriesApplicationContext getApplicationContext(AriesApplication app)
1:       throws BundleException, ManagementException
1:   {
1:     LOGGER.debug(LOG_ENTRY, "getApplicationContext", app);
1:         
0:     ApplicationContextImpl result;
1:     if (_appToContextMap.containsKey(app)) {
1:       result = _appToContextMap.get(app);
1:     } else {
1:       result = new ApplicationContextImpl(app, this);
0:       ApplicationContextImpl previous = _appToContextMap.putIfAbsent(app, result);
1:       if (previous != null) {
1:         result = previous;
1:       }
1:     }
1:     
1:     LOGGER.debug(LOG_EXIT, "getApplicationContext", result);
1:     
1:     return result;
1:   }
1: 
1:   public synchronized Set<AriesApplicationContext> getApplicationContexts()
1:   {
1:     LOGGER.debug(LOG_ENTRY, "getApplicationContexts");
1:     
1:     Set<AriesApplicationContext> result = new HashSet<AriesApplicationContext>();
0:     for (Map.Entry<AriesApplication, ApplicationContextImpl> entry : _appToContextMap.entrySet()) {
1:       result.add(entry.getValue());
1:     }
1:     
1:     LOGGER.debug(LOG_EXIT, "getApplicationContexts", result);
1:     
1:     return result;
1:   }
1: 
0:   public synchronized void remove(AriesApplicationContext app)
1:   {
1:     LOGGER.debug(LOG_ENTRY, "remove", app);
1:     
0:     Iterator<Map.Entry<AriesApplication, ApplicationContextImpl>> it = _appToContextMap.entrySet()
0:         .iterator();
1: 
0:     while (it.hasNext()) {
0:       Map.Entry<AriesApplication, ApplicationContextImpl> entry = it.next();
1: 
0:       ApplicationContextImpl potentialMatch = entry.getValue();
1: 
0:       if (potentialMatch == app) {
0:         it.remove();
1: 
0:         uninstall(potentialMatch);
1: 
0:         break;
1:       }
1:     }
1:     
1:     LOGGER.debug(LOG_EXIT, "remove");
1:   }
1: 
0:   private void uninstall(ApplicationContextImpl app)
1:   {
0:     LOGGER.debug(LOG_ENTRY, "uninstall", app);
1:     
0:     if (app.uninstall())
0:       app.setState(ApplicationState.UNINSTALLED);      
1:     
0:     LOGGER.debug(LOG_EXIT, "uninstall");
1:   }
1: 
0:   public synchronized void close()
1:   {
1:     LOGGER.debug(LOG_ENTRY, "close");
1:     
0:     for (ApplicationContextImpl ctx : _appToContextMap.values()) {
0:       uninstall(ctx);
1:     }
1: 
0:     _appToContextMap.clear();
1:     
1:     LOGGER.debug(LOG_EXIT, "close");
1:   }
1:   
1:   protected BundleFrameworkManager getBundleFrameworkManager()
1:   {
1:     LOGGER.debug(LOG_ENTRY, "getBundleFrameworkManager");
1:     LOGGER.debug(LOG_EXIT, "getBundleFrameworkManager", _bundleFrameworkManager);
1:     
1:     return _bundleFrameworkManager;
1:   }
1: 
1: }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:8c79b02
/////////////////////////////////////////////////////////////////////////
0:       it.remove();
/////////////////////////////////////////////////////////////////////////
0:   public synchronized void bindBundleFrameworkManager(BundleFrameworkManager bfm)
/////////////////////////////////////////////////////////////////////////
0:   public synchronized void unbindBundleFrameworkManager(BundleFrameworkManager bfm)
commit:f805d6b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.AriesApplicationContext.ApplicationState;
/////////////////////////////////////////////////////////////////////////
0:         if (ctx.getApplicationState() != ApplicationState.UNINSTALLED) {
0:           ctx.uninstall();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.debug(LOG_ENTRY, "bindBundleFrameworkManager", bfm);
/////////////////////////////////////////////////////////////////////////
1:     LOGGER.debug(LOG_EXIT, "bindBundleFrameworkManager");
commit:cdbec1e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   public void bindBundleFrameworkManager(BundleFrameworkManager bfm)
1:   {
0:     LOGGER.debug(LOG_ENTRY, "setBundleFrameworkManager", bfm);
0:     LOGGER.debug(LOG_EXIT, "setBundleFrameworkManager");
0:     
0:     Iterator<AriesApplicationContext> it = _appToContextMap.values().iterator();
0:     while (it.hasNext())
1:     {      
0:       try {
0:         ApplicationContextImpl ctx = (ApplicationContextImpl)it.next();
0:         ctx.open();
0:       } catch (BundleException e)
1:       {
1:         LOGGER.debug(LOG_EXCEPTION,e);
1:       }
1:     }
1:   }
0: 
0:   public void unbindBundleFrameworkManager(BundleFrameworkManager bfm)
1:   {
1:     LOGGER.debug(LOG_ENTRY, "unbindBundleFrameworkManager", bfm);
0:     
0:     Iterator<AriesApplicationContext> it = _appToContextMap.values().iterator();
0:     while (it.hasNext())
1:     {      
0:       try {
0:         ApplicationContextImpl ctx = (ApplicationContextImpl)it.next();
0:         ctx.close();
0:       } catch (BundleException e)
1:       {
1:         LOGGER.debug(LOG_EXCEPTION,e);
1:       }
1:     }
0:     
1:     LOGGER.debug(LOG_EXIT, "unbindBundleFrameworkManager");
0:     
0:     
1:   }
commit:e22d71c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.utils.AppConstants;
/////////////////////////////////////////////////////////////////////////
1:     // When doing isolated runtime support provisioning against the local repo is a really bad idea
1:     // it can result in trying to install things into the shared framework into the local framework
1:     // this doesn't work because we don't know how to install them into the shared framework and
1:     // we can't just use them because they are in the local framework, so if this class is constructed
1:     // we disable local provisioning.
1:     System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
0:     
author:Chris Wilkinson
-------------------------------------------------------------------------------
commit:666dd1b
/////////////////////////////////////////////////////////////////////////
0:         
0:   
commit:9db128e
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
/////////////////////////////////////////////////////////////////////////
1:   private ConcurrentMap<AriesApplication, AriesApplicationContext> _appToContextMap;
/////////////////////////////////////////////////////////////////////////
1:     _appToContextMap = new ConcurrentHashMap<AriesApplication, AriesApplicationContext>();
/////////////////////////////////////////////////////////////////////////
1:     AriesApplicationContext result;
1:       AriesApplicationContext previous = _appToContextMap.putIfAbsent(app, result);
/////////////////////////////////////////////////////////////////////////
1:     for (Map.Entry<AriesApplication, AriesApplicationContext> entry : _appToContextMap.entrySet()) {
/////////////////////////////////////////////////////////////////////////
0:   public synchronized void remove(AriesApplicationContext app) throws BundleException
0:     Iterator<Map.Entry<AriesApplication, AriesApplicationContext>> it = _appToContextMap.entrySet()
0:       Map.Entry<AriesApplication, AriesApplicationContext> entry = it.next();
0:       ApplicationContextImpl potentialMatch = (ApplicationContextImpl) entry.getValue();
0:         potentialMatch.uninstall();
/////////////////////////////////////////////////////////////////////////
0:     Iterator<AriesApplicationContext> it = _appToContextMap.values().iterator();
0:     while (it.hasNext())
0:     {      
0:       try {
0:         ApplicationContextImpl ctx = (ApplicationContextImpl)it.next();
0:         ctx.uninstall();
0:         it.remove();
0:       } catch (BundleException e)
0:       {
0:         LOGGER.debug(LOG_EXCEPTION,e);
0:       }
/////////////////////////////////////////////////////////////////////////
1:     ApplicationContextImpl ctx = (ApplicationContextImpl)_appToContextMap.get(app);
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.framework.BundleFrameworkManager;
1: import org.apache.aries.application.management.spi.repository.BundleRepositoryManager;
1: import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
commit:8151f8c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.DeploymentMetadata;
1: import org.apache.aries.application.management.UpdateException;
/////////////////////////////////////////////////////////////////////////
0:   
/////////////////////////////////////////////////////////////////////////
1:   public AriesApplicationContext update(AriesApplication app, DeploymentMetadata oldMetadata) throws UpdateException {
0:     ApplicationContextImpl ctx = _appToContextMap.get(app);
0:     
1:     if (ctx == null) {
1:       throw new IllegalArgumentException("AriesApplication "+
1:           app.getApplicationMetadata().getApplicationSymbolicName() + "/" + app.getApplicationMetadata().getApplicationVersion() + 
1:           " cannot be updated because it is not installed");
0:     }
0:     
1:     ctx.update(app.getDeploymentMetadata(), oldMetadata);
0:     
1:     return ctx;
0:   }
0: 
============================================================================