1:c0dfffa: /*
1:c0dfffa:  * Copyright (c) OSGi Alliance (2008). All Rights Reserved.
1:c0dfffa:  *
1:c0dfffa:  * Licensed under the Apache License, Version 2.0 (the "License");
1:c0dfffa:  * you may not use this file except in compliance with the License.
1:c0dfffa:  * You may obtain a copy of the License at
1:c0dfffa:  *
1:c0dfffa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c0dfffa:  *
1:c0dfffa:  * Unless required by applicable law or agreed to in writing, software
1:c0dfffa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c0dfffa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0dfffa:  * See the License for the specific language governing permissions and
1:c0dfffa:  * limitations under the License.
1:c0dfffa:  */
1:c0dfffa: package org.osgi.service.jdbc;
1:c0dfffa: 
1:c0dfffa: import java.sql.Driver;
1:c0dfffa: import java.sql.SQLException;
1:c0dfffa: import java.util.Properties;
1:c0dfffa: 
1:c0dfffa: import javax.sql.ConnectionPoolDataSource;
1:c0dfffa: import javax.sql.DataSource;
1:c0dfffa: import javax.sql.XADataSource;
1:c0dfffa: 
1:c0dfffa: /**
1:c0dfffa:  * DataSource providers should implement this interface and register it as an
1:c0dfffa:  * OSGi service with the JDBC driver class name in the "jdbc.driver" property.
1:c0dfffa:  */
1:c0dfffa: public interface DataSourceFactory {
1:c0dfffa:     /**
1:c0dfffa:      * Common property keys that DataSource clients should supply values for.
1:c0dfffa:      */
1:c0dfffa:     public static final String JDBC_URL = "url";
1:c0dfffa:     public static final String JDBC_USER = "user";
1:c0dfffa:     public static final String JDBC_PASSWORD = "password";
1:c0dfffa:     public static final String JDBC_DATABASE_NAME = "databaseName";
1:c0dfffa:     public static final String JDBC_DATASOURCE_NAME = "dataSourceName";
1:c0dfffa:     public static final String JDBC_DESCRIPTION = "description";
1:c0dfffa:     public static final String JDBC_NETWORK_PROTOCOL = "networkProtocol";
1:c0dfffa:     public static final String JDBC_PORT_NUMBER = "portNumber";
1:c0dfffa:     public static final String JDBC_ROLE_NAME = "roleName";
1:c0dfffa:     public static final String JDBC_SERVER_NAME = "serverName";
1:c0dfffa:     
1:c0dfffa: 	/**
1:c0dfffa: 	 * XA specific. Additional property keys that ConnectionPoolDataSource and
1:c0dfffa: 	 * XADataSource clients should supply values for
1:c0dfffa: 	 */
1:c0dfffa:     public static final String JDBC_INITIAL_POOL_SIZE = "initialPoolSize";
1:c0dfffa:     public static final String JDBC_MAX_IDLE_TIME = "maxIdleTime";
1:c0dfffa:     public static final String JDBC_MAX_POOL_SIZE = "maxPoolSize";
1:c0dfffa:     public static final String JDBC_MAX_STATEMENTS = "maxStatements";
1:c0dfffa:     public static final String JDBC_MIN_POOL_SIZE = "minPoolSize";
1:c0dfffa:     public static final String JDBC_PROPERTY_CYCLE = "propertyCycle";
1:c0dfffa:     
1:c0dfffa: 	/**
1:c0dfffa: 	 * Vendor-specific properties meant to further describe the driver. Clients
1:c0dfffa: 	 * may filter or test this property to determine if the driver is suitable,
1:c0dfffa: 	 * or the desired one.
1:c0dfffa: 	 */
1:c0dfffa:     public static final String JDBC_DRIVER_CLASS = "osgi.jdbc.driver.class";
1:c0dfffa:     public static final String JDBC_DRIVER_NAME = "osgi.jdbc.driver.name";
1:c0dfffa:     public static final String JDBC_DRIVER_VERSION = "osgi.jdbc.driver.version";
1:c0dfffa:     
1:c0dfffa:     /**
1:c0dfffa:      * Create a new {@link DataSource} using the given properties.
1:c0dfffa:      * 
1:c0dfffa:      * @param props properties used to configure the DataSource
1:c0dfffa:      * @return configured DataSource
1:c0dfffa:      */
1:c0dfffa:     public DataSource createDataSource( Properties props ) throws SQLException;
1:c0dfffa:     
1:c0dfffa:     public XADataSource createXADataSource( Properties props ) throws SQLException;
1:c0dfffa:     
1:c0dfffa:     public ConnectionPoolDataSource createConnectionPoolDataSource( Properties props ) throws SQLException;
1:c0dfffa:         
1:c0dfffa:     public Driver getDriver( Properties props ) throws SQLException;
1:c0dfffa: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
commit:fb2a45a
author:Violeta Georgieva Georgieva
-------------------------------------------------------------------------------
commit:c0dfffa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2008). All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.jdbc;
1: 
1: import java.sql.Driver;
1: import java.sql.SQLException;
1: import java.util.Properties;
1: 
1: import javax.sql.ConnectionPoolDataSource;
1: import javax.sql.DataSource;
1: import javax.sql.XADataSource;
1: 
1: /**
1:  * DataSource providers should implement this interface and register it as an
1:  * OSGi service with the JDBC driver class name in the "jdbc.driver" property.
1:  */
1: public interface DataSourceFactory {
1:     /**
1:      * Common property keys that DataSource clients should supply values for.
1:      */
1:     public static final String JDBC_URL = "url";
1:     public static final String JDBC_USER = "user";
1:     public static final String JDBC_PASSWORD = "password";
1:     public static final String JDBC_DATABASE_NAME = "databaseName";
1:     public static final String JDBC_DATASOURCE_NAME = "dataSourceName";
1:     public static final String JDBC_DESCRIPTION = "description";
1:     public static final String JDBC_NETWORK_PROTOCOL = "networkProtocol";
1:     public static final String JDBC_PORT_NUMBER = "portNumber";
1:     public static final String JDBC_ROLE_NAME = "roleName";
1:     public static final String JDBC_SERVER_NAME = "serverName";
1:     
1: 	/**
1: 	 * XA specific. Additional property keys that ConnectionPoolDataSource and
1: 	 * XADataSource clients should supply values for
1: 	 */
1:     public static final String JDBC_INITIAL_POOL_SIZE = "initialPoolSize";
1:     public static final String JDBC_MAX_IDLE_TIME = "maxIdleTime";
1:     public static final String JDBC_MAX_POOL_SIZE = "maxPoolSize";
1:     public static final String JDBC_MAX_STATEMENTS = "maxStatements";
1:     public static final String JDBC_MIN_POOL_SIZE = "minPoolSize";
1:     public static final String JDBC_PROPERTY_CYCLE = "propertyCycle";
1:     
1: 	/**
1: 	 * Vendor-specific properties meant to further describe the driver. Clients
1: 	 * may filter or test this property to determine if the driver is suitable,
1: 	 * or the desired one.
1: 	 */
1:     public static final String JDBC_DRIVER_CLASS = "osgi.jdbc.driver.class";
1:     public static final String JDBC_DRIVER_NAME = "osgi.jdbc.driver.name";
1:     public static final String JDBC_DRIVER_VERSION = "osgi.jdbc.driver.version";
1:     
1:     /**
1:      * Create a new {@link DataSource} using the given properties.
1:      * 
1:      * @param props properties used to configure the DataSource
1:      * @return configured DataSource
1:      */
1:     public DataSource createDataSource( Properties props ) throws SQLException;
1:     
1:     public XADataSource createXADataSource( Properties props ) throws SQLException;
1:     
1:     public ConnectionPoolDataSource createConnectionPoolDataSource( Properties props ) throws SQLException;
1:         
1:     public Driver getDriver( Properties props ) throws SQLException;
1: }
============================================================================