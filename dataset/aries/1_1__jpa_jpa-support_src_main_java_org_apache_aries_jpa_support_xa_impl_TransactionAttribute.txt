1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.support.xa.impl;
2:2cfdf52: 
1:2cfdf52: import javax.transaction.HeuristicMixedException;
1:2cfdf52: import javax.transaction.HeuristicRollbackException;
1:2cfdf52: import javax.transaction.InvalidTransactionException;
1:2cfdf52: import javax.transaction.NotSupportedException;
1:2cfdf52: import javax.transaction.RollbackException;
1:2cfdf52: import javax.transaction.Status;
1:2cfdf52: import javax.transaction.SystemException;
1:2cfdf52: import javax.transaction.Transaction;
1:2cfdf52: import javax.transaction.TransactionManager;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.template.TransactionType;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * TODO This is copied from aries transaction. We could share this code
1:2cfdf52:  */
1:2cfdf52: public enum TransactionAttribute {
1:2cfdf52:     MANDATORY
1:2cfdf52:     {
1:ec3ea65:       @Override
1:2cfdf52:       public TransactionToken begin(TransactionManager man) throws SystemException
1:2cfdf52:       {
1:2cfdf52:         if (man.getStatus() == Status.STATUS_NO_TRANSACTION) {
1:2cfdf52:           throw new IllegalStateException("This method has transaction attr MANADATORY but no active transaction was found.");
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         return new TransactionToken(man.getTransaction(), null, MANDATORY);
1:2cfdf52:       }
1:2cfdf52:     },
1:2cfdf52:     NEVER
1:2cfdf52:     {
1:ec3ea65:       @Override
1:2cfdf52:       public TransactionToken begin(TransactionManager man) throws SystemException
1:2cfdf52:       {
1:2cfdf52:         if (man.getStatus() == Status.STATUS_ACTIVE) {
1:2cfdf52:           throw new IllegalStateException("This method has transactui attr NEVER but a transaction is active.");
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         return new TransactionToken(null, null, NEVER);
1:2cfdf52:       }
1:2cfdf52:     },
1:2cfdf52:     NOTSUPPORTED
1:2cfdf52:     {
1:ec3ea65:       @Override
1:2cfdf52:       public TransactionToken begin(TransactionManager man) throws SystemException
1:2cfdf52:       {
1:2cfdf52:         if (man.getStatus() == Status.STATUS_ACTIVE) {
1:2cfdf52:           return new TransactionToken(null, man.suspend(), this);
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         return new TransactionToken(null, null, NOTSUPPORTED);
1:2cfdf52:       }
1:2cfdf52: 
1:ec3ea65:       @Override
2:2cfdf52:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:ec3ea65:           InvalidTransactionException
1:2cfdf52:       {
1:2cfdf52:         Transaction tran = tranToken.getSuspendedTransaction();
1:2cfdf52:         if (tran != null) {
1:2cfdf52:           man.resume(tran);
1:2cfdf52:         }
1:2cfdf52:       }
1:2cfdf52:     },
1:2cfdf52:     REQUIRED
1:2cfdf52:     {
1:ec3ea65:       @Override
1:2cfdf52:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException
1:2cfdf52:       {
1:2cfdf52:         if (man.getStatus() == Status.STATUS_NO_TRANSACTION) {
1:2cfdf52:           man.begin();
1:2cfdf52:           return new TransactionToken(man.getTransaction(), null, REQUIRED, true);
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         return new TransactionToken(man.getTransaction(), null, REQUIRED);
1:2cfdf52:       }
1:2cfdf52: 
1:ec3ea65:       @Override
1:2cfdf52:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:ec3ea65:           InvalidTransactionException, RollbackException,
1:2cfdf52:           HeuristicMixedException, HeuristicRollbackException
1:2cfdf52:       {
1:2cfdf52:         if (tranToken.isCompletionAllowed()) {
1:2cfdf52:           if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:2cfdf52:             man.rollback();
1:2cfdf52:           } else {
1:2cfdf52:             man.commit();
1:2cfdf52:           }
1:2cfdf52:         }
1:2cfdf52:       }
1:2cfdf52:     },
1:2cfdf52:     REQUIRESNEW
1:2cfdf52:     {
1:ec3ea65:       @Override
2:2cfdf52:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
1:ec3ea65:           InvalidTransactionException
1:2cfdf52:       {
1:2cfdf52:         TransactionToken tranToken;
1:2cfdf52:         if (man.getStatus() == Status.STATUS_ACTIVE) {
1:2cfdf52:           tranToken = new TransactionToken(null, man.suspend(), REQUIRESNEW);
1:2cfdf52:         } else {
1:2cfdf52:           tranToken = new TransactionToken(null, null, REQUIRESNEW);
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         try {
1:2cfdf52:           man.begin();
1:2cfdf52:         } catch (SystemException e) {
1:2cfdf52:           man.resume(tranToken.getSuspendedTransaction());
1:2cfdf52:           throw e;
1:2cfdf52:         } catch (NotSupportedException e) {
1:2cfdf52:           man.resume(tranToken.getSuspendedTransaction());
1:2cfdf52:           throw e;
1:2cfdf52:         }
1:2cfdf52:         
1:2cfdf52:         tranToken.setActiveTransaction(man.getTransaction());
1:2cfdf52:         tranToken.setCompletionAllowed(true);
1:2cfdf52:         
1:2cfdf52:         return tranToken;
1:2cfdf52:       }
1:2cfdf52: 
1:ec3ea65:       @Override
1:2cfdf52:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
1:ec3ea65:           InvalidTransactionException, RollbackException,
1:2cfdf52:           HeuristicMixedException, HeuristicRollbackException
1:2cfdf52:       {
1:2cfdf52:         if (tranToken.isCompletionAllowed()) {
1:2cfdf52:           if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:2cfdf52:             man.rollback();
1:2cfdf52:           } else {
1:2cfdf52:             man.commit();
1:2cfdf52:           }
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         Transaction tran = tranToken.getSuspendedTransaction();
1:2cfdf52:         if (tran != null) {
1:2cfdf52:           man.resume(tran);
1:2cfdf52:         }
1:2cfdf52:       }
1:2cfdf52:     },
1:2cfdf52:     SUPPORTS
1:2cfdf52:     {
1:ec3ea65:       @Override
1:2cfdf52:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
1:ec3ea65:           InvalidTransactionException
1:2cfdf52:       {
1:2cfdf52:           if (man.getStatus() == Status.STATUS_ACTIVE) {
1:2cfdf52:               return new TransactionToken(man.getTransaction(), null, SUPPORTS);
1:2cfdf52:           }
1:2cfdf52: 
1:2cfdf52:           return new TransactionToken(null, null, SUPPORTS);
1:2cfdf52:       }
1:2cfdf52:     };
1:2cfdf52: 
1:2cfdf52:     public static TransactionAttribute fromValue(String value)
1:2cfdf52:     {
1:2cfdf52:       return valueOf(value.toUpperCase());
1:2cfdf52:     }
1:2cfdf52:     
1:2cfdf52:     public static TransactionAttribute fromType(TransactionType type)
1:2cfdf52:     {
1:2cfdf52:       return valueOf(type.name().toUpperCase());
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException, InvalidTransactionException // NOSONAR
1:2cfdf52:     {
1:2cfdf52:       return null;
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException, // NOSONAR
1:ec3ea65:         InvalidTransactionException, RollbackException,
1:2cfdf52:         HeuristicMixedException, HeuristicRollbackException
1:2cfdf52:     {
1:b960684:         // No operation by default
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:b960684
/////////////////////////////////////////////////////////////////////////
1:         // No operation by default
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException
/////////////////////////////////////////////////////////////////////////
1:       @Override
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException, RollbackException,
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException, RollbackException,
/////////////////////////////////////////////////////////////////////////
1:       @Override
1:           InvalidTransactionException
/////////////////////////////////////////////////////////////////////////
1:     public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException, InvalidTransactionException // NOSONAR
1:     public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException, // NOSONAR
1:         InvalidTransactionException, RollbackException,
0:         throw new UnsupportedOperationException();
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.support.xa.impl;
1: 
1: import javax.transaction.HeuristicMixedException;
1: import javax.transaction.HeuristicRollbackException;
1: import javax.transaction.InvalidTransactionException;
1: import javax.transaction.NotSupportedException;
1: import javax.transaction.RollbackException;
1: import javax.transaction.Status;
1: import javax.transaction.SystemException;
1: import javax.transaction.Transaction;
1: import javax.transaction.TransactionManager;
1: 
1: import org.apache.aries.jpa.template.TransactionType;
1: 
1: /**
1:  * TODO This is copied from aries transaction. We could share this code
1:  */
1: public enum TransactionAttribute {
1:     MANDATORY
1:     {
1:       public TransactionToken begin(TransactionManager man) throws SystemException
1:       {
1:         if (man.getStatus() == Status.STATUS_NO_TRANSACTION) {
1:           throw new IllegalStateException("This method has transaction attr MANADATORY but no active transaction was found.");
1:         }
1: 
1:         return new TransactionToken(man.getTransaction(), null, MANDATORY);
1:       }
1:     },
1:     NEVER
1:     {
1:       public TransactionToken begin(TransactionManager man) throws SystemException
1:       {
1:         if (man.getStatus() == Status.STATUS_ACTIVE) {
1:           throw new IllegalStateException("This method has transactui attr NEVER but a transaction is active.");
1:         }
1: 
1:         return new TransactionToken(null, null, NEVER);
1:       }
1:     },
1:     NOTSUPPORTED
1:     {
1:       public TransactionToken begin(TransactionManager man) throws SystemException
1:       {
1:         if (man.getStatus() == Status.STATUS_ACTIVE) {
1:           return new TransactionToken(null, man.suspend(), this);
1:         }
1: 
1:         return new TransactionToken(null, null, NOTSUPPORTED);
1:       }
1: 
1:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
0:           InvalidTransactionException, IllegalStateException
1:       {
1:         Transaction tran = tranToken.getSuspendedTransaction();
1:         if (tran != null) {
1:           man.resume(tran);
1:         }
1:       }
1:     },
1:     REQUIRED
1:     {
1:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException
1:       {
1:         if (man.getStatus() == Status.STATUS_NO_TRANSACTION) {
1:           man.begin();
1:           return new TransactionToken(man.getTransaction(), null, REQUIRED, true);
1:         }
1: 
1:         return new TransactionToken(man.getTransaction(), null, REQUIRED);
1:       }
1: 
1:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
0:           InvalidTransactionException, IllegalStateException, SecurityException, RollbackException,
1:           HeuristicMixedException, HeuristicRollbackException
1:       {
1:         if (tranToken.isCompletionAllowed()) {
1:           if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:             man.rollback();
1:           } else {
1:             man.commit();
1:           }
1:         }
1:       }
1:     },
1:     REQUIRESNEW
1:     {
1:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
0:           InvalidTransactionException, IllegalStateException
1:       {
1:         TransactionToken tranToken;
1:         if (man.getStatus() == Status.STATUS_ACTIVE) {
1:           tranToken = new TransactionToken(null, man.suspend(), REQUIRESNEW);
1:         } else {
1:           tranToken = new TransactionToken(null, null, REQUIRESNEW);
1:         }
1: 
1:         try {
1:           man.begin();
1:         } catch (SystemException e) {
1:           man.resume(tranToken.getSuspendedTransaction());
1:           throw e;
1:         } catch (NotSupportedException e) {
1:           man.resume(tranToken.getSuspendedTransaction());
1:           throw e;
1:         }
1:         
1:         tranToken.setActiveTransaction(man.getTransaction());
1:         tranToken.setCompletionAllowed(true);
1:         
1:         return tranToken;
1:       }
1: 
1:       public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
0:           InvalidTransactionException, IllegalStateException, SecurityException, RollbackException,
1:           HeuristicMixedException, HeuristicRollbackException
1:       {
1:         if (tranToken.isCompletionAllowed()) {
1:           if (man.getStatus() == Status.STATUS_MARKED_ROLLBACK) {
1:             man.rollback();
1:           } else {
1:             man.commit();
1:           }
1:         }
1: 
1:         Transaction tran = tranToken.getSuspendedTransaction();
1:         if (tran != null) {
1:           man.resume(tran);
1:         }
1:       }
1:     },
1:     SUPPORTS
1:     {
1:       public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
0:           InvalidTransactionException, IllegalStateException
1:       {
1:           if (man.getStatus() == Status.STATUS_ACTIVE) {
1:               return new TransactionToken(man.getTransaction(), null, SUPPORTS);
1:           }
1: 
1:           return new TransactionToken(null, null, SUPPORTS);
1:       }
1:     };
1: 
1:     public static TransactionAttribute fromValue(String value)
1:     {
1:       return valueOf(value.toUpperCase());
1:     }
1:     
1:     public static TransactionAttribute fromType(TransactionType type)
1:     {
1:       return valueOf(type.name().toUpperCase());
1:     }
1: 
1:     public TransactionToken begin(TransactionManager man) throws SystemException, NotSupportedException,
0:         InvalidTransactionException, IllegalStateException
1:     {
1:       return null;
1:     }
1: 
1:     public void finish(TransactionManager man, TransactionToken tranToken) throws SystemException,
0:         InvalidTransactionException, IllegalStateException, SecurityException, RollbackException,
1:         HeuristicMixedException, HeuristicRollbackException
1:     {
1: 
1:     }
1: }
============================================================================