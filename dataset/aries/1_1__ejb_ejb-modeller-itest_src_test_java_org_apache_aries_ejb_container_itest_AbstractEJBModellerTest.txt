1:44c8d62: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:44c8d62:  *  contributor license agreements.  See the NOTICE file distributed with
1:44c8d62:  *  this work for additional information regarding copyright ownership.
1:44c8d62:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:44c8d62:  *  (the "License"); you may not use this file except in compliance with
1:44c8d62:  *  the License.  You may obtain a copy of the License at
1:44c8d62:  *
1:44c8d62:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44c8d62:  *
1:44c8d62:  *  Unless required by applicable law or agreed to in writing, software
1:44c8d62:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:44c8d62:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44c8d62:  *  See the License for the specific language governing permissions and
1:44c8d62:  *  limitations under the License.
1:44c8d62:  */
1:44c8d62: package org.apache.aries.ejb.container.itest;
1:44c8d62: 
1:44c8d62: import static org.junit.Assert.assertEquals;
1:44c8d62: import static org.junit.Assert.assertTrue;
1:44c8d62: 
1:44c8d62: import java.io.ByteArrayInputStream;
1:44c8d62: import java.io.ByteArrayOutputStream;
1:44c8d62: import java.io.IOException;
1:44c8d62: import java.util.Arrays;
1:44c8d62: import java.util.Collection;
1:44c8d62: import java.util.Collections;
1:44c8d62: import java.util.HashMap;
1:44c8d62: import java.util.Map;
1:44c8d62: import java.util.zip.ZipEntry;
1:44c8d62: import java.util.zip.ZipOutputStream;
1:44c8d62: 
1:44c8d62: import org.apache.aries.application.modelling.ExportedService;
1:44c8d62: import org.apache.aries.application.modelling.ModelledResource;
1:44c8d62: import org.apache.aries.application.modelling.ModelledResourceManager;
1:44c8d62: import org.apache.aries.application.modelling.ModellerException;
1:44c8d62: import org.apache.aries.application.modelling.ModellingManager;
1:44c8d62: import org.apache.aries.itest.AbstractIntegrationTest;
1:44c8d62: import org.apache.aries.util.filesystem.FileSystem;
1:44c8d62: import org.apache.aries.util.filesystem.ICloseableDirectory;
1:44c8d62: import org.apache.aries.util.io.IOUtils;
1:44c8d62: import org.junit.Test;
1:44c8d62: 
1:44c8d62: public abstract class AbstractEJBModellerTest extends AbstractIntegrationTest
1:44c8d62: {
1:44c8d62:   protected ModelledResourceManager mrm;
1:44c8d62:   protected ModellingManager mm;
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void modelBasicEJBBundleWithXML() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:44c8d62:     zos.close();
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 2, services.size());
1:44c8d62:         
1:44c8d62:     assertTrue(services.containsAll(getXMLservices()));
1:44c8d62:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void testEJBJARAndAnnotatedInZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:44c8d62:     addToZip(zos, "beans/StatelessSessionBean.class");
1:44c8d62:     addToZip(zos, "beans/StatefulSessionBean.class");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 3, services.size());
1:44c8d62: 
1:44c8d62:     assertTrue(services.containsAll(getXMLservices()));
1:44c8d62:     assertTrue(services.containsAll(getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void testAnnotatedOnlyInZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "beans/StatelessSessionBean.class");
1:44c8d62:     addToZip(zos, "beans/StatefulSessionBean.class");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 1, services.size());
1:44c8d62:     
1:44c8d62:     assertTrue(Collections.disjoint(services, getXMLservices()));
1:44c8d62:     assertTrue(services.containsAll(getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void testEJBJARAndAnnotatedNotOnClasspathInZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:44c8d62:     addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
1:44c8d62:     addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 2, services.size());
1:44c8d62:     
1:44c8d62:     assertTrue(services.containsAll(getXMLservices()));
1:44c8d62:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62: 
1:44c8d62:   @Test
1:44c8d62:   public void testEJBJARAndAnnotatedOnClasspathInZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:44c8d62:     addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
1:44c8d62:     addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 3, services.size());
1:44c8d62:     
1:44c8d62:     assertTrue(services.containsAll(getXMLservices()));
1:44c8d62:     assertTrue(services.containsAll(getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void testEJBJARInWebZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 2, services.size());
1:44c8d62:     
1:44c8d62:     assertTrue(services.containsAll(getXMLservices()));
1:44c8d62:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62: 
1:44c8d62:   @Test
1:44c8d62:   public void testEJBJARInWrongPlaceWebZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 0, services.size());
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void testEJBJARAndAnnotatedInWebZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:44c8d62:     addToZip(zos, "beans/StatelessSessionBean.class");
1:44c8d62:     addToZip(zos, "beans/StatefulSessionBean.class");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 3, services.size());
1:44c8d62:     
1:44c8d62:     assertTrue(services.containsAll(getXMLservices()));
1:44c8d62:     assertTrue(services.containsAll(getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void testAnnotatedOnlyInWebZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "beans/StatelessSessionBean.class");
1:44c8d62:     addToZip(zos, "beans/StatefulSessionBean.class");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 1, services.size());
1:44c8d62:     
1:44c8d62:     assertTrue(Collections.disjoint(services, getXMLservices()));
1:44c8d62:     assertTrue(services.containsAll(getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void testEJBJARAndAnnotatedNotOnClasspathInWebZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:44c8d62:     addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
1:44c8d62:     addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 2, services.size());
1:44c8d62:     
1:44c8d62:     assertTrue(services.containsAll(getXMLservices()));
1:44c8d62:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   @Test
1:44c8d62:   public void testEJBJARAndAnnotatedOnClasspathInWebZip() throws Exception {
1:44c8d62:     ModelledResource mr = null;
1:44c8d62:     
1:44c8d62:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:44c8d62:     ZipOutputStream zos = new ZipOutputStream(baos);
1:44c8d62:     addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
1:44c8d62:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:44c8d62:     addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
1:44c8d62:     addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
1:44c8d62:     zos.close();
1:44c8d62:     
1:44c8d62:     mr = model(baos.toByteArray());
1:44c8d62: 
1:44c8d62:     Collection<? extends ExportedService> services = 
1:44c8d62:       mr.getExportedServices(); 
1:44c8d62:     
1:44c8d62:     assertEquals("Wrong number of services", 3, services.size());
1:44c8d62:     
1:44c8d62:     assertTrue(services.containsAll(getXMLservices()));
1:44c8d62:     assertTrue(services.containsAll(getAnnotatedservices()));
1:44c8d62:   }
1:44c8d62: 
1:44c8d62:   private ModelledResource model(byte[] bytes) throws ModellerException {
1:44c8d62:     ICloseableDirectory dir = null;
1:44c8d62:     try {
1:44c8d62:       dir = FileSystem.getFSRoot(
1:44c8d62:            new ByteArrayInputStream(bytes));
1:44c8d62:       return mrm.getModelledResource(dir);
1:44c8d62:     } finally {
1:44c8d62:       IOUtils.close(dir);
1:44c8d62:     }
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   private Collection<ExportedService> getXMLservices() {
1:44c8d62:     Map<String, Object> serviceProperties = new HashMap<String, Object>();
1:44c8d62:     serviceProperties.put("ejb.name", "XML");
1:44c8d62:     serviceProperties.put("ejb.type", "Singleton");
1:44c8d62:     serviceProperties.put("service.exported.interfaces", "remote.Iface");
1:44c8d62:     
1:44c8d62:     Map<String, Object> serviceProperties2 = new HashMap<String, Object>();
1:44c8d62:     serviceProperties2.put("ejb.name", "XML");
1:44c8d62:     serviceProperties2.put("ejb.type", "Singleton");
1:44c8d62:     
1:44c8d62:     return Arrays.asList(mm.getExportedService("XML", 0, 
1:44c8d62:         Arrays.asList("remote.Iface"), serviceProperties), mm.getExportedService(
1:44c8d62:             "XML", 0, Arrays.asList("local.Iface"), serviceProperties2));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   private Collection<ExportedService> getAnnotatedservices() {
1:44c8d62:     Map<String, Object> serviceProperties = new HashMap<String, Object>();
1:44c8d62:     serviceProperties.put("ejb.name", "Annotated");
1:44c8d62:     serviceProperties.put("ejb.type", "Stateless");
1:44c8d62:     
1:44c8d62:     return Arrays.asList(mm.getExportedService("Annotated", 0, 
1:44c8d62:         Arrays.asList("beans.StatelessSessionBean"), serviceProperties));
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   private void addToZip(ZipOutputStream zos, String src) throws IOException {
1:44c8d62:     addToZip(zos, src, src);
1:44c8d62:   }
1:44c8d62:   
1:44c8d62:   private void addToZip(ZipOutputStream zos, String src, String outLocation) throws IOException {
1:44c8d62:     zos.putNextEntry(new ZipEntry(outLocation));
1:44c8d62:     IOUtils.copy(getClass().getClassLoader().
1:44c8d62:         getResourceAsStream(src), zos);
1:44c8d62:     zos.closeEntry();
1:44c8d62:   }
1:44c8d62: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:44c8d62
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.ejb.container.itest;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.zip.ZipEntry;
1: import java.util.zip.ZipOutputStream;
1: 
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.apache.aries.application.modelling.ModelledResourceManager;
1: import org.apache.aries.application.modelling.ModellerException;
1: import org.apache.aries.application.modelling.ModellingManager;
1: import org.apache.aries.itest.AbstractIntegrationTest;
1: import org.apache.aries.util.filesystem.FileSystem;
1: import org.apache.aries.util.filesystem.ICloseableDirectory;
1: import org.apache.aries.util.io.IOUtils;
1: import org.junit.Test;
1: 
1: public abstract class AbstractEJBModellerTest extends AbstractIntegrationTest
1: {
1:   protected ModelledResourceManager mrm;
1:   protected ModellingManager mm;
1:   
1:   @Test
1:   public void modelBasicEJBBundleWithXML() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     zos.close();
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 2, services.size());
1:         
1:     assertTrue(services.containsAll(getXMLservices()));
1:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:   }
1:   
1:   @Test
1:   public void testEJBJARAndAnnotatedInZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     addToZip(zos, "beans/StatelessSessionBean.class");
1:     addToZip(zos, "beans/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 3, services.size());
1: 
1:     assertTrue(services.containsAll(getXMLservices()));
1:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
1:   @Test
1:   public void testAnnotatedOnlyInZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_1.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "beans/StatelessSessionBean.class");
1:     addToZip(zos, "beans/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 1, services.size());
1:     
1:     assertTrue(Collections.disjoint(services, getXMLservices()));
1:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
1:   @Test
1:   public void testEJBJARAndAnnotatedNotOnClasspathInZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
1:     addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 2, services.size());
1:     
1:     assertTrue(services.containsAll(getXMLservices()));
1:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:   }
1: 
1:   @Test
1:   public void testEJBJARAndAnnotatedOnClasspathInZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_2.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
1:     addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 3, services.size());
1:     
1:     assertTrue(services.containsAll(getXMLservices()));
1:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
1:   @Test
1:   public void testEJBJARInWebZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 2, services.size());
1:     
1:     assertTrue(services.containsAll(getXMLservices()));
1:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:   }
1: 
1:   @Test
1:   public void testEJBJARInWrongPlaceWebZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "META-INF/ejb-jar.xml");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 0, services.size());
1:   }
1:   
1:   @Test
1:   public void testEJBJARAndAnnotatedInWebZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:     addToZip(zos, "beans/StatelessSessionBean.class");
1:     addToZip(zos, "beans/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 3, services.size());
1:     
1:     assertTrue(services.containsAll(getXMLservices()));
1:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
1:   @Test
1:   public void testAnnotatedOnlyInWebZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_3.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "beans/StatelessSessionBean.class");
1:     addToZip(zos, "beans/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 1, services.size());
1:     
1:     assertTrue(Collections.disjoint(services, getXMLservices()));
1:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1:   
1:   @Test
1:   public void testEJBJARAndAnnotatedNotOnClasspathInWebZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:     addToZip(zos, "beans/StatelessSessionBean.class", "no/beans/StatelessSessionBean.class");
1:     addToZip(zos, "beans/StatefulSessionBean.class", "no/beans/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 2, services.size());
1:     
1:     assertTrue(services.containsAll(getXMLservices()));
1:     assertTrue(Collections.disjoint(services, getAnnotatedservices()));
1:   }
1:   
1:   @Test
1:   public void testEJBJARAndAnnotatedOnClasspathInWebZip() throws Exception {
1:     ModelledResource mr = null;
1:     
1:     ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:     ZipOutputStream zos = new ZipOutputStream(baos);
1:     addToZip(zos, "MANIFEST_4.MF", "META-INF/MANIFEST.MF");
1:     addToZip(zos, "ejb-jar.xml", "WEB-INF/ejb-jar.xml");
1:     addToZip(zos, "beans/StatelessSessionBean.class", "yes/beans/StatelessSessionBean.class");
1:     addToZip(zos, "beans/StatefulSessionBean.class", "yes/beans/StatefulSessionBean.class");
1:     zos.close();
1:     
1:     mr = model(baos.toByteArray());
1: 
1:     Collection<? extends ExportedService> services = 
1:       mr.getExportedServices(); 
1:     
1:     assertEquals("Wrong number of services", 3, services.size());
1:     
1:     assertTrue(services.containsAll(getXMLservices()));
1:     assertTrue(services.containsAll(getAnnotatedservices()));
1:   }
1: 
1:   private ModelledResource model(byte[] bytes) throws ModellerException {
1:     ICloseableDirectory dir = null;
1:     try {
1:       dir = FileSystem.getFSRoot(
1:            new ByteArrayInputStream(bytes));
1:       return mrm.getModelledResource(dir);
1:     } finally {
1:       IOUtils.close(dir);
1:     }
1:   }
1:   
1:   private Collection<ExportedService> getXMLservices() {
1:     Map<String, Object> serviceProperties = new HashMap<String, Object>();
1:     serviceProperties.put("ejb.name", "XML");
1:     serviceProperties.put("ejb.type", "Singleton");
1:     serviceProperties.put("service.exported.interfaces", "remote.Iface");
1:     
1:     Map<String, Object> serviceProperties2 = new HashMap<String, Object>();
1:     serviceProperties2.put("ejb.name", "XML");
1:     serviceProperties2.put("ejb.type", "Singleton");
1:     
1:     return Arrays.asList(mm.getExportedService("XML", 0, 
1:         Arrays.asList("remote.Iface"), serviceProperties), mm.getExportedService(
1:             "XML", 0, Arrays.asList("local.Iface"), serviceProperties2));
1:   }
1:   
1:   private Collection<ExportedService> getAnnotatedservices() {
1:     Map<String, Object> serviceProperties = new HashMap<String, Object>();
1:     serviceProperties.put("ejb.name", "Annotated");
1:     serviceProperties.put("ejb.type", "Stateless");
1:     
1:     return Arrays.asList(mm.getExportedService("Annotated", 0, 
1:         Arrays.asList("beans.StatelessSessionBean"), serviceProperties));
1:   }
1:   
1:   private void addToZip(ZipOutputStream zos, String src) throws IOException {
1:     addToZip(zos, src, src);
1:   }
1:   
1:   private void addToZip(ZipOutputStream zos, String src, String outLocation) throws IOException {
1:     zos.putNextEntry(new ZipEntry(outLocation));
1:     IOUtils.copy(getClass().getClassLoader().
1:         getResourceAsStream(src), zos);
1:     zos.closeEntry();
1:   }
1: }
============================================================================