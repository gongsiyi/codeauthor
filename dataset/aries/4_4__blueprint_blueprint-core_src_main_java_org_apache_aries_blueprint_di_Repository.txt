2:f13c6ac: /**
2:f13c6ac:  *
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f13c6ac:  * contributor license agreements.  See the NOTICE file distributed with
1:f13c6ac:  * this work for additional information regarding copyright ownership.
1:f13c6ac:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f13c6ac:  * (the "License"); you may not use this file except in compliance with
1:f13c6ac:  * the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  *  Unless required by applicable law or agreed to in writing, software
1:f13c6ac:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:f13c6ac:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f13c6ac:  *  See the License for the specific language governing permissions and
1:f13c6ac:  *  limitations under the License.
2:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.di;
2:f13c6ac: 
1:f13c6ac: import java.util.Collection;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: import java.util.Set;
1:f13c6ac: 
1:f13c6ac: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1:f13c6ac: 
1:f13c6ac: public interface Repository {
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Returns the set of all known object names (recipes, instances or default objects)
2:f13c6ac:      * @return
1:f13c6ac:      */
1:f13c6ac:     Set<String> getNames();
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Return the singleton instance for the given name.
1:88a0e3f:      * This method will not create the object if it has not been created yet.
1:f13c6ac:      *
1:f13c6ac:      * @param name
1:f13c6ac:      * @return the instance or <code>null</code>
1:f13c6ac:      */
1:f13c6ac:     Object getInstance(String name);
1:f13c6ac: 
1:f13c6ac:     /**
1:f13c6ac:      * Return the recipe for the given name.
1:f13c6ac:      *
1:f13c6ac:      * @param name
1:f13c6ac:      * @return the recipe or <code>null</code>
1:f13c6ac:      */
1:f13c6ac:     Recipe getRecipe(String name);
1:f13c6ac: 
1:f13c6ac:     void putRecipe(String name, Recipe recipe);
1:9f9d944:     
1:9f9d944:     /**
1:9f9d944:      * Remove an uninstantiated recipe
1:9f9d944:      * @param name
1:9f9d944:      * @throws ComponentDefinitionException if the recipe is already instantiated
1:9f9d944:      */
1:9f9d944:     void removeRecipe(String name);
1:f13c6ac: 
1:f13c6ac:     Object create(String name) throws ComponentDefinitionException;
1:5e2bd49:     
1:5e2bd49:     Object create(String name, Collection<Class<?>> proxyInterfaces) throws ComponentDefinitionException;
1:f13c6ac: 
1:5e2bd49:     void createAll(Collection<String> names) throws ComponentDefinitionException;
1:5e2bd49:     
1:5e2bd49:     Map<String, Object> createAll(Collection<String> names, Collection<Class<?>> proxyInterfaces) throws ComponentDefinitionException;
1:f13c6ac: 
1:f13c6ac:     <T> List<T> getAllRecipes(Class<T> clazz, String... names);
1:f13c6ac: 
1:f13c6ac:     Set<Recipe> getAllRecipes(String... names);
1:f13c6ac: 
1:f13c6ac:     void destroy();
1:f13c6ac: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:5e2bd49
/////////////////////////////////////////////////////////////////////////
1:     
1:     Object create(String name, Collection<Class<?>> proxyInterfaces) throws ComponentDefinitionException;
1:     void createAll(Collection<String> names) throws ComponentDefinitionException;
1:     
1:     Map<String, Object> createAll(Collection<String> names, Collection<Class<?>> proxyInterfaces) throws ComponentDefinitionException;
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:88a0e3f
/////////////////////////////////////////////////////////////////////////
1:      * This method will not create the object if it has not been created yet.
/////////////////////////////////////////////////////////////////////////
commit:9f9d944
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Remove an uninstantiated recipe
1:      * @param name
1:      * @throws ComponentDefinitionException if the recipe is already instantiated
1:      */
1:     void removeRecipe(String name);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.di;
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.blueprint.di;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.osgi.service.blueprint.container.ComponentDefinitionException;
1: 
1: public interface Repository {
1: 
1:     /**
1:      * Returns the set of all known object names (recipes, instances or default objects)
1:      * @return
1:      */
1:     Set<String> getNames();
1: 
1:     /**
1:      * Return the singleton instance for the given name.
0:      * This method will not create the object if it has been created yet.
1:      *
1:      * @param name
1:      * @return the instance or <code>null</code>
1:      */
1:     Object getInstance(String name);
1: 
1:     /**
1:      * Return the recipe for the given name.
1:      *
1:      * @param name
1:      * @return the recipe or <code>null</code>
1:      */
1:     Recipe getRecipe(String name);
1: 
1:     void putRecipe(String name, Recipe recipe);
1: 
1:     Object create(String name) throws ComponentDefinitionException;
1: 
0:     Map<String, Object> createAll(Collection<String> names) throws ComponentDefinitionException;
1: 
1:     <T> List<T> getAllRecipes(Class<T> clazz, String... names);
1: 
1:     Set<Recipe> getAllRecipes(String... names);
1: 
1:     void destroy();
1: 
1:     /**
0:      * Lock that should be used to synchronized creation of singletons
1:      *
1:      * @return
1:      */
0:     public Object getInstanceLock();
1: }
============================================================================