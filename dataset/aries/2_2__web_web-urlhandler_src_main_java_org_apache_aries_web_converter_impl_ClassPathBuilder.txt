1:0adda31: /*
1:0adda31:  * Licensed to the Apache Software Foundation (ASF) under one
1:0adda31:  * or more contributor license agreements.  See the NOTICE file
1:0adda31:  * distributed with this work for additional information
1:0adda31:  * regarding copyright ownership.  The ASF licenses this file
1:0adda31:  * to you under the Apache License, Version 2.0 (the
1:0adda31:  * "License"); you may not use this file except in compliance
1:0adda31:  * with the License.  You may obtain a copy of the License at
1:0adda31:  *
1:0adda31:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0adda31:  *
1:0adda31:  * Unless required by applicable law or agreed to in writing,
1:0adda31:  * software distributed under the License is distributed on an
1:0adda31:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:0adda31:  * KIND, either express or implied.  See the License for the
1:0adda31:  * specific language governing permissions and limitations
1:0adda31:  * under the License.
1:0adda31:  */
1:d80741a: package org.apache.aries.web.converter.impl;
1:0adda31: 
1:0adda31: import java.io.File;
1:0adda31: import java.io.IOException;
1:0adda31: import java.util.ArrayList;
1:0adda31: import java.util.Map;
1:0adda31: import java.util.StringTokenizer;
1:0adda31: import java.util.jar.Manifest;
1:0adda31: 
1:0adda31: public class ClassPathBuilder
1:0adda31: {
1:0adda31:   private Map<String, Manifest> manifests;
1:0adda31:   
1:0adda31:   /**
1:0adda31:    * This class takes a map of <jarFileName, manifest> pairs which are contained in 
1:0adda31:    * a particular jar file.
1:0adda31:    * The updatePath method then uses this list to analyse the contents of the manifests
1:0adda31:    * and looks for any dependencies in the other manifests in the jar.
1:0adda31:    * @param manifests
1:0adda31:    */
1:0adda31:   public ClassPathBuilder(Map<String, Manifest> manifests)
1:0adda31:   {
1:0adda31:     this.manifests = manifests;
1:0adda31:   }
1:0adda31: 
1:0adda31:   /**
1:0adda31:    * We take a full qualified jar file name and search its manifest for any other classpath
1:0adda31:    * dependencies within the other manifest in the parent jar file.
1:0adda31:    * @param jarFile
1:0adda31:    * @param classPath
1:0adda31:    * @return
1:0adda31:    * @throws IOException
1:0adda31:    */
1:0adda31:   public ArrayList<String> updatePath(String jarFile, ArrayList<String> classPath) throws IOException
1:0adda31:   {
1:0adda31:       // Get the classpath entries from this manifest and merge them into ours
1:0adda31:       Manifest manifest = manifests.get(jarFile);
1:0adda31:       
1:0adda31:       if (manifest == null)
1:0adda31:         return classPath;
1:0adda31:       
1:0adda31:       String dependencies = manifest.getMainAttributes().getValue("Class-Path");
1:0adda31:       if (dependencies == null)
1:0adda31:         dependencies = manifest.getMainAttributes().getValue("Class-path");
1:0adda31:             
1:0adda31:       if (dependencies != null)
1:0adda31:       {
1:0adda31:         // Search through the entries in the classpath
1:0adda31:         StringTokenizer tok = new StringTokenizer(dependencies, ";");
1:0adda31:         while (tok.hasMoreTokens()) {
1:0adda31:           String path = jarFile.substring(0, jarFile.lastIndexOf('/'));;
1:0adda31:           String entry = tok.nextToken();
1:0adda31:           
1:0adda31:           // Resolve the path to its canonical form
1:0adda31:           path = new File("/"+path+"/"+entry).getCanonicalPath().replace('\\','/');
1:0adda31:           path = path.substring(path.indexOf('/')+1);
1:0adda31:      
1:0adda31:           // If we havent already located this dependency before then we add this to our
1:0adda31:           // list of dependencies
1:0adda31:           if (entry.endsWith(".jar") && 
1:0adda31:               manifests.keySet().contains(path) && 
1:0adda31:               !classPath.contains(path) && 
1:df40d84:               !path.startsWith("WEB-INF/lib/"))
1:0adda31:           {
1:0adda31:             classPath.add(path);
1:0adda31:             
1:0adda31:             // Recursively search the new classpath entry for more dependencies
1:0adda31:             classPath = updatePath(path, classPath);
1:0adda31:             
1:0adda31:           }
1:0adda31:         }
1:0adda31:       }
1:0adda31: 
1:0adda31:     return classPath;
1:0adda31:   }
1:0adda31: 
1:0adda31: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:df40d84
/////////////////////////////////////////////////////////////////////////
1:               !path.startsWith("WEB-INF/lib/"))
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:d80741a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.web.converter.impl;
commit:0adda31
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.application.converters;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.StringTokenizer;
1: import java.util.jar.Manifest;
1: 
1: public class ClassPathBuilder
1: {
1:   private Map<String, Manifest> manifests;
1:   
1:   /**
1:    * This class takes a map of <jarFileName, manifest> pairs which are contained in 
1:    * a particular jar file.
1:    * The updatePath method then uses this list to analyse the contents of the manifests
1:    * and looks for any dependencies in the other manifests in the jar.
1:    * @param manifests
1:    */
1:   public ClassPathBuilder(Map<String, Manifest> manifests)
1:   {
1:     this.manifests = manifests;
1:   }
1: 
1:   /**
1:    * We take a full qualified jar file name and search its manifest for any other classpath
1:    * dependencies within the other manifest in the parent jar file.
1:    * @param jarFile
1:    * @param classPath
1:    * @return
1:    * @throws IOException
1:    */
1:   public ArrayList<String> updatePath(String jarFile, ArrayList<String> classPath) throws IOException
1:   {
1:       // Get the classpath entries from this manifest and merge them into ours
1:       Manifest manifest = manifests.get(jarFile);
1:       
1:       if (manifest == null)
1:         return classPath;
1:       
1:       String dependencies = manifest.getMainAttributes().getValue("Class-Path");
1:       if (dependencies == null)
1:         dependencies = manifest.getMainAttributes().getValue("Class-path");
1:             
1:       if (dependencies != null)
1:       {
1:         // Search through the entries in the classpath
1:         StringTokenizer tok = new StringTokenizer(dependencies, ";");
1:         while (tok.hasMoreTokens()) {
1:           String path = jarFile.substring(0, jarFile.lastIndexOf('/'));;
1:           String entry = tok.nextToken();
1:           
1:           // Resolve the path to its canonical form
1:           path = new File("/"+path+"/"+entry).getCanonicalPath().replace('\\','/');
1:           path = path.substring(path.indexOf('/')+1);
1:      
1:           // If we havent already located this dependency before then we add this to our
1:           // list of dependencies
1:           if (entry.endsWith(".jar") && 
1:               manifests.keySet().contains(path) && 
1:               !classPath.contains(path) && 
0:               !path.startsWith("WEB-INF/lib"))
1:           {
1:             classPath.add(path);
1:             
1:             // Recursively search the new classpath entry for more dependencies
1:             classPath = updatePath(path, classPath);
1:             
1:           }
1:         }
1:       }
1: 
1:     return classPath;
1:   }
1: 
1: }
============================================================================