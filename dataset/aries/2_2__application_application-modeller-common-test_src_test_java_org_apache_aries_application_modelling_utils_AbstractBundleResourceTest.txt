1:4fec049: /*
1:4fec049:  * Licensed to the Apache Software Foundation (ASF) under one
1:4fec049:  * or more contributor license agreements.  See the NOTICE file
1:4fec049:  * distributed with this work for additional information
1:4fec049:  * regarding copyright ownership.  The ASF licenses this file
1:4fec049:  * to you under the Apache License, Version 2.0 (the
1:4fec049:  * "License"); you may not use this file except in compliance
1:4fec049:  * with the License.  You may obtain a copy of the License at
1:4fec049:  *
1:4fec049:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4fec049:  *
1:4fec049:  * Unless required by applicable law or agreed to in writing,
1:4fec049:  * software distributed under the License is distributed on an
1:4fec049:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4fec049:  * KIND, either express or implied.  See the License for the
1:4fec049:  * specific language governing permissions and limitations
1:4fec049:  * under the License.
1:4fec049:  */
1:4fec049: package org.apache.aries.application.modelling.utils;
7:4fec049: 
1:4fec049: import static org.junit.Assert.assertEquals;
1:4fec049: import static org.junit.Assert.assertTrue;
1:4fec049: 
1:4fec049: import java.io.FileNotFoundException;
1:4fec049: import java.io.IOException;
1:776b92b: import java.util.Map;
1:4fec049: 
1:4fec049: import org.apache.aries.application.management.ResolverException;
1:4fec049: import org.apache.aries.application.modelling.ExportedPackage;
1:4fec049: import org.apache.aries.application.modelling.ExportedService;
1:4fec049: import org.apache.aries.application.modelling.ImportedBundle;
1:4fec049: import org.apache.aries.application.modelling.ImportedPackage;
1:4fec049: import org.apache.aries.application.modelling.ImportedService;
1:4fec049: import org.apache.aries.application.modelling.ModelledResource;
1:58f55bd: import org.apache.aries.application.modelling.ModellingConstants;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:4fec049: import org.junit.Before;
1:4fec049: import org.junit.Ignore;
1:4fec049: import org.junit.Test;
1:4fec049: 
1:4fec049: 
1:4fec049: 
1:4fec049: /* This is an abstract class and should not be instantiated, so we have an ignore
1:4fec049:  * annotation to the class.
1:4fec049:  */
1:4fec049: @Ignore
1:4fec049: public abstract class AbstractBundleResourceTest
1:4fec049: {
1:4fec049:   protected ModelledResource bundleResource;
1:4fec049: 
1:4fec049:   @Before
1:4fec049:   public void setUp() throws Exception
1:4fec049:   {
1:4fec049:     bundleResource = instantiateBundleResource();
1:4fec049:   }
1:4fec049: 
1:4fec049:   /**
1:4fec049:    * @return
1:4fec049:    * @throws ResolverException 
1:4fec049:    * @throws FileNotFoundException 
1:4fec049:    * @throws IOException 
1:4fec049:    * @throws Exception 
1:4fec049:    */
1:4fec049:   protected abstract ModelledResource instantiateBundleResource() throws Exception;
1:4fec049: 
1:4fec049:   @Test
1:4fec049:   public void testBundleResource() throws Exception
1:4fec049:   {
1:4fec049:     assertEquals("The bundle symbolic name is wrong.", "test.bundle1", bundleResource.getSymbolicName());
1:4fec049:     assertEquals("The bundle version is wrong.", "2.0.0.build-121", bundleResource.getVersion().toString());
1:4fec049:     assertEquals("The bundle presentation name is wrong.", "Test Bundle", bundleResource.getExportedBundle()
1:4fec049:         .getAttributes().get(ModellingConstants.OBR_PRESENTATION_NAME));
1:4fec049:     
1:4fec049: 
1:4fec049:     
1:4fec049:     int count = 0;
1:4fec049:   
1:4fec049:     for (ImportedPackage ip : bundleResource.getImportedPackages()) {
1:776b92b:       String filter = ip.getAttributeFilter();
1:776b92b:       Map<String, String> parsedFilterElements = ManifestHeaderProcessor.parseFilter(filter);
1:4fec049:       
1:4fec049:       if (ip.getPackageName().equals("org.osgi.framework")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "org.osgi.framework");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "1.3.0");
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.kernel.file")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.kernel.file");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:4fec049:       } else if (ip.getPackageName().equals("aries.wsspi.application.aries")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.wsspi.application.aries");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:776b92b:         assertEquals ("Company wrong", parsedFilterElements.get("company"), "yang");
1:776b92b:         assertTrue ("mandatory filter missing", filter.contains("(mandatory:<*company)"));
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.ffdc")) {
1:4fec049:         count++;
1:4fec049:         assertEquals("The filter is wrong.", "(&(package=aries.ws.ffdc)(version>=0.0.0))", ip.getAttributeFilter());
1:4fec049:         assertTrue ("Optional import not correctly represented", ip.isOptional());
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.app.framework.plugin")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.app.framework.plugin");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "[1.0.0,2.0.0)");
1:4fec049:       } else if (ip.getPackageName().equals("aries.ejs.ras")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ejs.ras");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:776b92b:      } else if (ip.getPackageName().equals("aries.ws.event")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.event");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "1.0.0");
1:4fec049:       } else if (ip.getPackageName().equals("aries.wsspi.app.container.aries")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.wsspi.app.container.aries");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:776b92b:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("bundle-symbolic-name"), "B");
1:776b92b:         assertEquals ("Wrong bundle version", parsedFilterElements.get("bundle-version"), "[1.2.0,2.2.0)");
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.eba.bla")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.bla");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.eba.launcher")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.launcher");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "[1.0.0,2.0.0]");
1:4fec049:         assertTrue ("Dynamic-ImportPackage should be optional", ip.isOptional());
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.eba.bundle4")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.bundle4");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "3.0.0");
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.eba.bundle5")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.bundle5");
1:776b92b:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "3.0.0");
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.eba.bundle6")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.bundle6");
1:776b92b:         
1:4fec049:         assertEquals("The filter is wrong.", "(&(package=aries.ws.eba.bundle6)(version>=0.0.0))", ip.getAttributeFilter());
1:4fec049:       } else if (ip.getPackageName().equals("aries.ws.eba.bundle7")) {
1:4fec049:         count++;
1:4fec049:         assertEquals("The filter is wrong.", "(&(package=aries.ws.eba.bundle7)(version>=0.0.0))", ip.getAttributeFilter());
1:4fec049:       } 
1:4fec049:     }
1:4fec049:       
1:4fec049:     for (ImportedBundle ib : bundleResource.getRequiredBundles()) {
1:776b92b:       String filter = ib.getAttributeFilter();
1:776b92b:       Map<String, String> parsedFilterElements = ManifestHeaderProcessor.parseFilter(filter);
1:4fec049:       if (ib.getSymbolicName().equals("com.acme.facade")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "com.acme.facade");
1:776b92b:         assertEquals ("Wrong bundle version", parsedFilterElements.get("version"), "3.0.0");
1:4fec049:       } else if (ib.getSymbolicName().equals("com.acme.bar")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "com.acme.bar");
1:4fec049:       } else if (ib.getSymbolicName().equals("aries.ws.eba.framework")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "aries.ws.eba.framework");
1:776b92b:         assertEquals ("Wrong bundle version", parsedFilterElements.get("version"), "(3.0.0,4.0.0)");
1:4fec049:       } else if (ib.getSymbolicName().equals("com.de.ba")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "com.de.ba");
1:4fec049:       } else if (ib.getSymbolicName().equals("com.ab.de")) {
1:4fec049:         count++;
1:776b92b:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "com.ab.de");
1:4fec049:       }
1:4fec049:     }
1:4fec049:     
1:4fec049:     for(ImportedService svc : bundleResource.getImportedServices()) {
1:4fec049:       if (svc.getInterface().equals("aries.ws.eba.import")) {
1:4fec049:         count++;
1:776b92b:         String filter = svc.getAttributeFilter();
1:776b92b:         Map<String, String> parsedFilterElements = ManifestHeaderProcessor.parseFilter(filter);
1:776b92b:         assertEquals ("Wrong object class", parsedFilterElements.get("objectClass"), "aries.ws.eba.import");
1:fc67682:         assertTrue("(service=service) should be present", svc.getAttributeFilter().contains("(service=service)"));
1:fc67682:         assertTrue("(mandatory:<*service) should be present", svc.getAttributeFilter().contains("(mandatory:<*service)"));        
1:4fec049:       } 
1:4fec049:     }
1:4fec049:     
1:4fec049:     assertEquals("Not all requirements are listed.", bundleResource.getImportedPackages().size() +
1:4fec049:         bundleResource.getImportedServices().size() + bundleResource.getRequiredBundles().size() , count);
1:4fec049:   
1:4fec049:     //verify the capability
1:4fec049:   
1:4fec049:     int verifiedExport = 0;
1:4fec049:     for (ExportedPackage cap : bundleResource.getExportedPackages()) {
1:4fec049:  
1:4fec049:         if (cap.getPackageName().equals("aries.ws.eba.bundle1")) {
1:4fec049:   
1:4fec049:           verifiedExport++;
1:4fec049:           assertEquals("The export package is not expected.", "2.2.0", cap.getVersion());
1:4fec049:           assertEquals("The export package is not expected.", "test.bundle1", cap.getAttributes().get(
1:4fec049:               "bundle-symbolic-name"));
1:4fec049:           assertEquals("The export package is not expected.", "2.0.0.build-121", cap.getAttributes()
1:4fec049:               .get("bundle-version").toString());
1:4fec049:         } else if (cap.getPackageName().equals("aries.ws.eba.bundle2")) {
1:4fec049:           verifiedExport++;
1:4fec049:           assertEquals("The export package is not expected.", "3", cap.getVersion());
1:4fec049:         } else if (cap.getPackageName().equals("aries.ws.eba.bundle3")) {
1:4fec049:           verifiedExport++;
1:4fec049:           assertEquals("The export package is not expected.", "3", cap.getVersion());
1:4fec049:         }
1:4fec049:     }
1:4fec049:     assertEquals("The number of exports are not expected.", bundleResource.getExportedPackages().size()
1:4fec049:         , verifiedExport);
1:4fec049:     
1:4fec049: 
1:4fec049:     // bundle resource
1:4fec049:     assertEquals("The bundle resource is wrong.", "Test Bundle", bundleResource.getExportedBundle().
1:4fec049:         getAttributes().get(ModellingConstants.OBR_PRESENTATION_NAME));
1:4fec049:     assertEquals("The bundle resource is wrong.", "2.0.0.build-121", bundleResource.getExportedBundle().
1:4fec049:         getVersion());
1:4fec049:     assertEquals("The bundle resource is wrong.", "test.bundle1", bundleResource.getExportedBundle().
1:4fec049:         getSymbolicName());
1:4fec049:     
1:4fec049:     
1:4fec049:     for (ExportedService svc : bundleResource.getExportedServices()) {
1:4fec049:       assertEquals("The export service is wrong", "aries.ws.eba.export", svc.getInterfaces().
1:4fec049:           iterator().next());
1:4fec049:     }
1:4fec049:   }
1:4fec049: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:26ae47b
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:58f55bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.modelling.ModellingConstants;
commit:776b92b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
/////////////////////////////////////////////////////////////////////////
1:       String filter = ip.getAttributeFilter();
1:       Map<String, String> parsedFilterElements = ManifestHeaderProcessor.parseFilter(filter);
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "org.osgi.framework");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "1.3.0");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.kernel.file");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.wsspi.application.aries");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:         assertEquals ("Company wrong", parsedFilterElements.get("company"), "yang");
1:         assertTrue ("mandatory filter missing", filter.contains("(mandatory:<*company)"));
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.app.framework.plugin");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "[1.0.0,2.0.0)");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ejs.ras");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:      } else if (ip.getPackageName().equals("aries.ws.event")) {
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.event");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "1.0.0");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.wsspi.app.container.aries");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("bundle-symbolic-name"), "B");
1:         assertEquals ("Wrong bundle version", parsedFilterElements.get("bundle-version"), "[1.2.0,2.2.0)");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.bla");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "0.0.0");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.launcher");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "[1.0.0,2.0.0]");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.bundle4");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "3.0.0");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.bundle5");
1:         assertEquals ("Wrong package version", parsedFilterElements.get("version"), "3.0.0");
1:         assertEquals ("Wrong package", parsedFilterElements.get("package"), "aries.ws.eba.bundle6");
1:         
/////////////////////////////////////////////////////////////////////////
1:       String filter = ib.getAttributeFilter();
1:       Map<String, String> parsedFilterElements = ManifestHeaderProcessor.parseFilter(filter);
1:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "com.acme.facade");
1:         assertEquals ("Wrong bundle version", parsedFilterElements.get("version"), "3.0.0");
1:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "com.acme.bar");
1:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "aries.ws.eba.framework");
1:         assertEquals ("Wrong bundle version", parsedFilterElements.get("version"), "(3.0.0,4.0.0)");
1:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "com.de.ba");
1:         assertEquals ("Wrong bundle symbolic name", parsedFilterElements.get("symbolicname"), "com.ab.de");
1:         String filter = svc.getAttributeFilter();
1:         Map<String, String> parsedFilterElements = ManifestHeaderProcessor.parseFilter(filter);
1:         assertEquals ("Wrong object class", parsedFilterElements.get("objectClass"), "aries.ws.eba.import");
commit:fc67682
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("objectClass should be aries.ws.eba.import", svc.getAttributeFilter().contains("(objectClass=aries.ws.eba.import)"));
1:         assertTrue("(service=service) should be present", svc.getAttributeFilter().contains("(service=service)"));
1:         assertTrue("(mandatory:<*service) should be present", svc.getAttributeFilter().contains("(mandatory:<*service)"));        
commit:729288c
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("The filter is wrong.", "(&(objectClass=aries.ws.eba.import)(service=service)(mandatory:<*service))",
commit:4fec049
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.modelling.utils;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.FileNotFoundException;
1: import java.io.IOException;
1: 
1: import org.apache.aries.application.management.ResolverException;
1: import org.apache.aries.application.modelling.ExportedPackage;
1: import org.apache.aries.application.modelling.ExportedService;
1: import org.apache.aries.application.modelling.ImportedBundle;
1: import org.apache.aries.application.modelling.ImportedPackage;
1: import org.apache.aries.application.modelling.ImportedService;
1: import org.apache.aries.application.modelling.ModelledResource;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: 
1: 
1: 
1: /* This is an abstract class and should not be instantiated, so we have an ignore
1:  * annotation to the class.
1:  */
1: @Ignore
1: public abstract class AbstractBundleResourceTest
1: {
1:   protected ModelledResource bundleResource;
1: 
1:   @Before
1:   public void setUp() throws Exception
1:   {
1:     bundleResource = instantiateBundleResource();
1:   }
1: 
1:   /**
1:    * @return
1:    * @throws ResolverException 
1:    * @throws FileNotFoundException 
1:    * @throws IOException 
1:    * @throws Exception 
1:    */
1:   protected abstract ModelledResource instantiateBundleResource() throws Exception;
1: 
1:   @Test
1:   public void testBundleResource() throws Exception
1:   {
1:     assertEquals("The bundle symbolic name is wrong.", "test.bundle1", bundleResource.getSymbolicName());
1:     assertEquals("The bundle version is wrong.", "2.0.0.build-121", bundleResource.getVersion().toString());
1:     assertEquals("The bundle presentation name is wrong.", "Test Bundle", bundleResource.getExportedBundle()
1:         .getAttributes().get(ModellingConstants.OBR_PRESENTATION_NAME));
1:     
1: 
1:     
1:     int count = 0;
1:   
1:     for (ImportedPackage ip : bundleResource.getImportedPackages()) {
1:       
1:       if (ip.getPackageName().equals("org.osgi.framework")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(package=org.osgi.framework)(version>=1.3.0))", 
0:             ip.getAttributeFilter());
1:   
1:       } else if (ip.getPackageName().equals("aries.ws.kernel.file")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(package=aries.ws.kernel.file)(version>=0.0.0))", ip.getAttributeFilter());
1:   
1:       } else if (ip.getPackageName().equals("aries.wsspi.application.aries")) {
1:         count++;
0:         assertEquals("The filter is wrong.",
0:             "(&(package=aries.wsspi.application.aries)(version>=0.0.0)(company=yang)(mandatory:<*company))", ip
0:                 .getAttributeFilter());
1:       } else if (ip.getPackageName().equals("aries.ws.ffdc")) {
1:         count++;
1:         assertEquals("The filter is wrong.", "(&(package=aries.ws.ffdc)(version>=0.0.0))", ip.getAttributeFilter());
1:         assertTrue ("Optional import not correctly represented", ip.isOptional());
1:       } else if (ip.getPackageName().equals("aries.ws.app.framework.plugin")) {
1:         count++;
0:         assertEquals(
0:             "The filter is wrong.",
0:             "(&(package=aries.ws.app.framework.plugin)(version>=1.0.0)(version<=2.0.0)(!(version=2.0.0)))",
0:             ip.getAttributeFilter());
1:       } else if (ip.getPackageName().equals("aries.ejs.ras")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(package=aries.ejs.ras)(version>=0.0.0))", ip.getAttributeFilter());
0:       } else if (ip.getPackageName().equals("aries.ws.event")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(package=aries.ws.event)(version>=1.0.0))", ip
0:             .getAttributeFilter());
1:       } else if (ip.getPackageName().equals("aries.wsspi.app.container.aries")) {
1:         count++;
0:         assertEquals(
0:             "The filter is wrong.",
0:             "(&(package=aries.wsspi.app.container.aries)(version>=0.0.0)(bundle-symbolic-name=B)(bundle-version>=1.2.0)(bundle-version<=2.2.0)(!(bundle-version=2.2.0)))",
0:             ip.getAttributeFilter());
1:       } else if (ip.getPackageName().equals("aries.ws.eba.bla")) {
1:   
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(package=aries.ws.eba.bla)(version>=0.0.0))", ip.getAttributeFilter());
1:       } else if (ip.getPackageName().equals("aries.ws.eba.launcher")) {
1:   
1:         count++;
0:         assertEquals("The filter is wrong.",
0:             "(&(package=aries.ws.eba.launcher)(version>=1.0.0)(version<=2.0.0))", ip.getAttributeFilter());
1:         assertTrue ("Dynamic-ImportPackage should be optional", ip.isOptional());
1:   
1:       } else if (ip.getPackageName().equals("aries.ws.eba.bundle4")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(package=aries.ws.eba.bundle4)(version>=3.0.0))",
0:             ip.getAttributeFilter());
1:       } else if (ip.getPackageName().equals("aries.ws.eba.bundle5")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(package=aries.ws.eba.bundle5)(version>=3.0.0))",
0:             ip.getAttributeFilter());
1:       } else if (ip.getPackageName().equals("aries.ws.eba.bundle6")) {
1:         count++;
1:         assertEquals("The filter is wrong.", "(&(package=aries.ws.eba.bundle6)(version>=0.0.0))", ip.getAttributeFilter());
1:       } else if (ip.getPackageName().equals("aries.ws.eba.bundle7")) {
1:         count++;
1:         assertEquals("The filter is wrong.", "(&(package=aries.ws.eba.bundle7)(version>=0.0.0))", ip.getAttributeFilter());
1:       } 
1:     }
1:       
1:     for (ImportedBundle ib : bundleResource.getRequiredBundles()) {
1:     
1:       if (ib.getSymbolicName().equals("com.acme.facade")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(symbolicname=com.acme.facade)(version>=3.0.0))",
0:             ib.getAttributeFilter());
1:       } else if (ib.getSymbolicName().equals("com.acme.bar")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(symbolicname=com.acme.bar)", ib.getAttributeFilter());
1:       } else if (ib.getSymbolicName().equals("aries.ws.eba.framework")) {
1:         count++;
0:         assertEquals("The filter is wrong.",
0:             "(&(symbolicname=aries.ws.eba.framework)(version>=3.0.0)(version<=4.0.0))", ib
0:                 .getAttributeFilter());
1:       } else if (ib.getSymbolicName().equals("com.de.ba")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(symbolicname=com.de.ba)", ib.getAttributeFilter());
1:       } else if (ib.getSymbolicName().equals("com.ab.de")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(symbolicname=com.ab.de)", ib.getAttributeFilter());
1:       }
1:     }
1:     
1:     for(ImportedService svc : bundleResource.getImportedServices()) {
1:       if (svc.getInterface().equals("aries.ws.eba.import")) {
1:         count++;
0:         assertEquals("The filter is wrong.", "(&(service=service)(objectClass=aries.ws.eba.import)(mandatory:<*service))",
0:           svc.getAttributeFilter());
1:       } 
1:     }
1:     
1:     assertEquals("Not all requirements are listed.", bundleResource.getImportedPackages().size() +
1:         bundleResource.getImportedServices().size() + bundleResource.getRequiredBundles().size() , count);
1:   
1:     //verify the capability
1:   
1:     int verifiedExport = 0;
1:     for (ExportedPackage cap : bundleResource.getExportedPackages()) {
1:  
1:         if (cap.getPackageName().equals("aries.ws.eba.bundle1")) {
1:   
1:           verifiedExport++;
1:           assertEquals("The export package is not expected.", "2.2.0", cap.getVersion());
1:           assertEquals("The export package is not expected.", "test.bundle1", cap.getAttributes().get(
1:               "bundle-symbolic-name"));
1:           assertEquals("The export package is not expected.", "2.0.0.build-121", cap.getAttributes()
1:               .get("bundle-version").toString());
1:         } else if (cap.getPackageName().equals("aries.ws.eba.bundle2")) {
1:           verifiedExport++;
1:           assertEquals("The export package is not expected.", "3", cap.getVersion());
1:         } else if (cap.getPackageName().equals("aries.ws.eba.bundle3")) {
1:           verifiedExport++;
1:           assertEquals("The export package is not expected.", "3", cap.getVersion());
1:         }
1:     }
1:     assertEquals("The number of exports are not expected.", bundleResource.getExportedPackages().size()
1:         , verifiedExport);
1:     
1: 
1:     // bundle resource
1:     assertEquals("The bundle resource is wrong.", "Test Bundle", bundleResource.getExportedBundle().
1:         getAttributes().get(ModellingConstants.OBR_PRESENTATION_NAME));
1:     assertEquals("The bundle resource is wrong.", "2.0.0.build-121", bundleResource.getExportedBundle().
1:         getVersion());
1:     assertEquals("The bundle resource is wrong.", "test.bundle1", bundleResource.getExportedBundle().
1:         getSymbolicName());
1:     
1:     
1:     for (ExportedService svc : bundleResource.getExportedServices()) {
1:       assertEquals("The export service is wrong", "aries.ws.eba.export", svc.getInterfaces().
1:           iterator().next());
1:     }
1:   }
1: }
============================================================================