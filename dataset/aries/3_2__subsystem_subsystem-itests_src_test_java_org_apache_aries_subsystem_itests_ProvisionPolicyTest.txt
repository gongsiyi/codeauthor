1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:875a6d6: package org.apache.aries.subsystem.itests;
1:875a6d6: 
1:875a6d6: import static org.junit.Assert.assertTrue;
1:875a6d6: import static org.junit.Assert.fail;
1:875a6d6: 
1:875a6d6: import java.io.IOException;
1:875a6d6: import java.util.HashMap;
1:875a6d6: import java.util.Map;
1:875a6d6: 
1:875a6d6: import org.junit.Test;
1:875a6d6: import org.osgi.framework.Constants;
1:875a6d6: import org.osgi.service.subsystem.Subsystem;
1:875a6d6: import org.osgi.service.subsystem.SubsystemConstants;
1:875a6d6: import org.osgi.service.subsystem.SubsystemException;
1:875a6d6: 
1:875a6d6: public class ProvisionPolicyTest extends SubsystemTest {
1:875a6d6: 	/*
1:875a6d6: 	 * Subsystem-SymbolicName: application.a.esa
1:875a6d6: 	 * Subsystem-Type: osgi.subsystem.application;provision-policy:=acceptDependencies
1:875a6d6: 	 */
1:875a6d6: 	private static final String APPLICATION_A = "application.a.esa";
1:875a6d6: 	/*
1:875a6d6: 	 * Bundle-SymbolicName: bundle.a.jar
1:875a6d6: 	 * Import-Package: x
1:875a6d6: 	 */
1:875a6d6: 	private static final String BUNDLE_A = "bundle.a.jar";
1:875a6d6: 	/*
1:875a6d6: 	 * Bundle-SymbolicName: bundle.b.jar
1:875a6d6: 	 * Export-Package: x
1:875a6d6: 	 */
1:875a6d6: 	private static final String BUNDLE_B = "bundle.b.jar";
1:875a6d6: 	/*
1:875a6d6: 	 * Subsystem-SymbolicName: composite.a.esa
1:875a6d6: 	 * Subsystem-Type: osgi.subsystem.composite
1:875a6d6: 	 * Import-Package: x
1:875a6d6: 	 */
1:875a6d6: 	private static final String COMPOSITE_A = "composite.a.esa";
1:875a6d6: 	/*
1:875a6d6: 	 * Subsystem-SymbolicName: feature.a.esa
1:875a6d6: 	 * Subsystem-Type: osgi.subsystem.feature;provision-policy:=acceptDependencies
1:875a6d6: 	 */
1:875a6d6: 	private static final String FEATURE_A = "feature.a.esa";
1:875a6d6: 	/*
1:875a6d6: 	 * Subsystem-SymbolicName: feature.b.esa
1:875a6d6: 	 * Subsystem-Type: osgi.subsystem.feature
1:875a6d6: 	 * Subsystem-Content: bundle.a.jar
1:875a6d6: 	 */
1:875a6d6: 	private static final String FEATURE_B = "feature.b.esa";
1:875a6d6: 	
1:875a6d6: 	private static void createApplicationA() throws IOException {
1:875a6d6: 		createApplicationAManifest();
1:875a6d6: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	private static void createApplicationAManifest() throws IOException {
1:875a6d6: 		Map<String, String> attributes = new HashMap<String, String>();
1:875a6d6: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:875a6d6: 		attributes
1:875a6d6: 		.put(SubsystemConstants.SUBSYSTEM_TYPE,
1:875a6d6: 				SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION
1:875a6d6: 						+ ';'
1:875a6d6: 						+ SubsystemConstants.PROVISION_POLICY_DIRECTIVE
1:875a6d6: 						+ ":="
1:875a6d6: 						+ SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES);
1:875a6d6: 		createManifest(APPLICATION_A + ".mf", attributes);
1:875a6d6: 	}
1:875a6d6: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), importPackage("x"));
1:875a6d6: 	}
1:875a6d6: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B), exportPackage("x"));
1:875a6d6: 	}
1:875a6d6: 	
1:57b6627: 	private void createCompositeA() throws IOException {
1:875a6d6: 		createCompositeAManifest();
1:875a6d6: 		createSubsystem(COMPOSITE_A);
1:875a6d6: 	}
1:875a6d6: 	
1:57b6627: 	private void createCompositeAManifest() throws IOException {
1:875a6d6: 		Map<String, String> attributes = new HashMap<String, String>();
1:875a6d6: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:875a6d6: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:875a6d6: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1:875a6d6: 		createManifest(COMPOSITE_A + ".mf", attributes);
1:875a6d6: 	}
1:875a6d6: 	
1:57b6627: 	private void createFeatureA() throws IOException {
1:875a6d6: 		createFeatureAManifest();
1:875a6d6: 		createSubsystem(FEATURE_A);
1:875a6d6: 	}
1:875a6d6: 	
1:57b6627: 	private void createFeatureAManifest() throws IOException {
1:875a6d6: 		Map<String, String> attributes = new HashMap<String, String>();
1:875a6d6: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:875a6d6: 		attributes
1:875a6d6: 				.put(SubsystemConstants.SUBSYSTEM_TYPE,
1:875a6d6: 						SubsystemConstants.SUBSYSTEM_TYPE_FEATURE
1:875a6d6: 								+ ';'
1:875a6d6: 								+ SubsystemConstants.PROVISION_POLICY_DIRECTIVE
1:875a6d6: 								+ ":="
1:875a6d6: 								+ SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES);
1:875a6d6: 		createManifest(FEATURE_A + ".mf", attributes);
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	private static void createFeatureB() throws IOException {
1:875a6d6: 		createFeatureBManifest();
1:875a6d6: 		createSubsystem(FEATURE_B, BUNDLE_A);
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	private static void createFeatureBManifest() throws IOException {
1:875a6d6: 		Map<String, String> attributes = new HashMap<String, String>();
1:875a6d6: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_B);
1:875a6d6: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:875a6d6: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:875a6d6: 		createManifest(FEATURE_B + ".mf", attributes);
1:875a6d6: 	}
1:875a6d6: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:875a6d6: 		createBundleA();
1:875a6d6: 		createBundleB();
1:875a6d6: 		createApplicationA();
1:875a6d6: 		createCompositeA();
1:875a6d6: 		createFeatureA();
1:875a6d6: 		createFeatureB();
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	public void setUp() throws Exception {
1:875a6d6: 		super.setUp();
1:875a6d6: 		Subsystem root = getRootSubsystem();
1:875a6d6: 		assertProvisionPolicy(root, true);
1:875a6d6: 		registerRepositoryService(BUNDLE_B);
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	@Test
1:875a6d6: 	public void testFailInstallFeatureAcceptDependencies() throws Exception {
1:875a6d6: 		Subsystem subsystem = null;
1:875a6d6: 		try {
1:875a6d6: 			subsystem = installSubsystemFromFile(FEATURE_A);
1:875a6d6: 			fail("Feature with provision-policy:=acceptDependencies did not fail installation");
1:875a6d6: 		}
1:875a6d6: 		catch (SubsystemException e) {
1:875a6d6: 			// TODO Brittle...
1:875a6d6: 			assertTrue(e.getMessage().contains("Feature subsystems may not declare a provision-policy of acceptDependencies"));
1:875a6d6: 		}
1:875a6d6: 		finally {
1:875a6d6: 			uninstallSubsystemSilently(subsystem);
1:875a6d6: 		}
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	@Test
1:875a6d6: 	public void testProvisionToNonRootAncestor() throws Exception {
1:875a6d6: 		Subsystem root = getRootSubsystem();
1:875a6d6: 		Subsystem application = installSubsystemFromFile(root, APPLICATION_A);
1:875a6d6: 		try {
1:875a6d6: 			assertProvisionPolicy(application, true);
1:875a6d6: 			Subsystem composite = installSubsystemFromFile(application, COMPOSITE_A);
1:875a6d6: 			try {
1:875a6d6: 				assertProvisionPolicy(composite, false);
1:875a6d6: 				Subsystem feature = installSubsystemFromFile(composite, FEATURE_B);
1:875a6d6: 				try {
1:875a6d6: 					assertProvisionPolicy(feature, false);
1:875a6d6: 					assertConstituent(feature, BUNDLE_A);
1:875a6d6: 					assertNotConstituent(feature, BUNDLE_B);
1:875a6d6: 					assertNotConstituent(composite, BUNDLE_A);
1:875a6d6: 					assertNotConstituent(composite, BUNDLE_B);
1:875a6d6: 					assertConstituent(application, BUNDLE_A);
1:875a6d6: 					assertConstituent(application, BUNDLE_B);
1:875a6d6: 					assertNotConstituent(root, BUNDLE_A);
1:875a6d6: 					assertNotConstituent(root, BUNDLE_B);
1:875a6d6: 				}
1:875a6d6: 				finally {
1:875a6d6: 					uninstallSubsystemSilently(feature);
1:875a6d6: 				}
1:875a6d6: 			}
1:875a6d6: 			finally {
1:875a6d6: 				uninstallSubsystemSilently(composite);
1:875a6d6: 			}
1:875a6d6: 		}
1:875a6d6: 		finally {
1:875a6d6: 			uninstallSubsystemSilently(application);
1:875a6d6: 		}
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	@Test
1:875a6d6: 	public void testProvisionToRoot() throws Exception {
1:875a6d6: 		Subsystem root = getRootSubsystem();
1:875a6d6: 		Subsystem composite = installSubsystemFromFile(root, COMPOSITE_A);
1:875a6d6: 		try {
1:875a6d6: 			assertProvisionPolicy(composite, false);
1:875a6d6: 			Subsystem feature = installSubsystemFromFile(composite, FEATURE_B);
1:875a6d6: 			try {
1:875a6d6: 				assertProvisionPolicy(feature, false);
1:875a6d6: 				assertConstituent(feature, BUNDLE_A);
1:875a6d6: 				assertNotConstituent(feature, BUNDLE_B);
1:875a6d6: 				assertNotConstituent(composite, BUNDLE_A);
1:875a6d6: 				assertNotConstituent(composite, BUNDLE_B);
1:875a6d6: 				assertNotConstituent(root, BUNDLE_A);
1:875a6d6: 				assertConstituent(root, BUNDLE_B);
1:875a6d6: 			}
1:875a6d6: 			finally {
1:875a6d6: 				uninstallSubsystemSilently(feature);
1:875a6d6: 			}
1:875a6d6: 		}
1:875a6d6: 		finally {
1:875a6d6: 			uninstallSubsystemSilently(composite);
1:875a6d6: 		}
1:875a6d6: 	}
1:875a6d6: 	
1:875a6d6: 	@Test
1:875a6d6: 	public void testProvisionToSelf() throws Exception {
1:875a6d6: 		Subsystem root = getRootSubsystem();
1:875a6d6: 		assertProvisionPolicy(root, true);
1:875a6d6: 		registerRepositoryService(BUNDLE_B);
1:875a6d6: 		Subsystem subsystem = installSubsystemFromFile(root, APPLICATION_A);
1:875a6d6: 		try {
1:875a6d6: 			assertProvisionPolicy(subsystem, true);
1:875a6d6: 			assertConstituent(subsystem, BUNDLE_A);
1:875a6d6: 			assertConstituent(subsystem, BUNDLE_B);
1:875a6d6: 			assertNotConstituent(root, BUNDLE_A);
1:875a6d6: 			assertNotConstituent(root, BUNDLE_B);
1:875a6d6: 		}
1:875a6d6: 		finally {
1:875a6d6: 			uninstallSubsystemSilently(subsystem);
1:875a6d6: 		}
1:875a6d6: 	}
1:875a6d6: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), importPackage("x"));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), exportPackage("x"));
1: 	private void createCompositeA() throws IOException {
1: 	private void createCompositeAManifest() throws IOException {
/////////////////////////////////////////////////////////////////////////
1: 	private void createFeatureA() throws IOException {
1: 	private void createFeatureAManifest() throws IOException {
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
author:John Ross
-------------------------------------------------------------------------------
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:875a6d6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.itests;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Constants;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: import org.osgi.service.subsystem.SubsystemException;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class ProvisionPolicyTest extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Type: osgi.subsystem.application;provision-policy:=acceptDependencies
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Import-Package: x
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Export-Package: x
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	/*
1: 	 * Subsystem-SymbolicName: composite.a.esa
1: 	 * Subsystem-Type: osgi.subsystem.composite
1: 	 * Import-Package: x
1: 	 */
1: 	private static final String COMPOSITE_A = "composite.a.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: feature.a.esa
1: 	 * Subsystem-Type: osgi.subsystem.feature;provision-policy:=acceptDependencies
1: 	 */
1: 	private static final String FEATURE_A = "feature.a.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: feature.b.esa
1: 	 * Subsystem-Type: osgi.subsystem.feature
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String FEATURE_B = "feature.b.esa";
1: 	
1: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		attributes
1: 		.put(SubsystemConstants.SUBSYSTEM_TYPE,
1: 				SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION
1: 						+ ';'
1: 						+ SubsystemConstants.PROVISION_POLICY_DIRECTIVE
1: 						+ ":="
1: 						+ SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_A, headers);
1: 	}
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.EXPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_B, headers);
1: 	}
1: 	
0: 	private static void createCompositeA() throws IOException {
1: 		createCompositeAManifest();
1: 		createSubsystem(COMPOSITE_A);
1: 	}
1: 	
0: 	private static void createCompositeAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1: 		createManifest(COMPOSITE_A + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createFeatureA() throws IOException {
1: 		createFeatureAManifest();
1: 		createSubsystem(FEATURE_A);
1: 	}
1: 	
0: 	private static void createFeatureAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1: 		attributes
1: 				.put(SubsystemConstants.SUBSYSTEM_TYPE,
1: 						SubsystemConstants.SUBSYSTEM_TYPE_FEATURE
1: 								+ ';'
1: 								+ SubsystemConstants.PROVISION_POLICY_DIRECTIVE
1: 								+ ":="
1: 								+ SubsystemConstants.PROVISION_POLICY_ACCEPT_DEPENDENCIES);
1: 		createManifest(FEATURE_A + ".mf", attributes);
1: 	}
1: 	
1: 	private static void createFeatureB() throws IOException {
1: 		createFeatureBManifest();
1: 		createSubsystem(FEATURE_B, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createFeatureBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1: 		createManifest(FEATURE_B + ".mf", attributes);
1: 	}
1: 	
0: 	private static boolean createdTestFiles;
0: 	@Before
0: 	public static void createTestFiles() throws Exception {
0: 		if (createdTestFiles)
0: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createCompositeA();
1: 		createFeatureA();
1: 		createFeatureB();
0: 		createdTestFiles = true;
1: 	}
1: 	
1: 	public void setUp() throws Exception {
1: 		super.setUp();
1: 		Subsystem root = getRootSubsystem();
1: 		assertProvisionPolicy(root, true);
1: 		registerRepositoryService(BUNDLE_B);
1: 	}
1: 	
1: 	@Test
1: 	public void testFailInstallFeatureAcceptDependencies() throws Exception {
1: 		Subsystem subsystem = null;
1: 		try {
1: 			subsystem = installSubsystemFromFile(FEATURE_A);
1: 			fail("Feature with provision-policy:=acceptDependencies did not fail installation");
1: 		}
1: 		catch (SubsystemException e) {
1: 			// TODO Brittle...
1: 			assertTrue(e.getMessage().contains("Feature subsystems may not declare a provision-policy of acceptDependencies"));
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(subsystem);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testProvisionToNonRootAncestor() throws Exception {
1: 		Subsystem root = getRootSubsystem();
1: 		Subsystem application = installSubsystemFromFile(root, APPLICATION_A);
1: 		try {
1: 			assertProvisionPolicy(application, true);
1: 			Subsystem composite = installSubsystemFromFile(application, COMPOSITE_A);
1: 			try {
1: 				assertProvisionPolicy(composite, false);
1: 				Subsystem feature = installSubsystemFromFile(composite, FEATURE_B);
1: 				try {
1: 					assertProvisionPolicy(feature, false);
1: 					assertConstituent(feature, BUNDLE_A);
1: 					assertNotConstituent(feature, BUNDLE_B);
1: 					assertNotConstituent(composite, BUNDLE_A);
1: 					assertNotConstituent(composite, BUNDLE_B);
1: 					assertConstituent(application, BUNDLE_A);
1: 					assertConstituent(application, BUNDLE_B);
1: 					assertNotConstituent(root, BUNDLE_A);
1: 					assertNotConstituent(root, BUNDLE_B);
1: 				}
1: 				finally {
1: 					uninstallSubsystemSilently(feature);
1: 				}
1: 			}
1: 			finally {
1: 				uninstallSubsystemSilently(composite);
1: 			}
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(application);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testProvisionToRoot() throws Exception {
1: 		Subsystem root = getRootSubsystem();
1: 		Subsystem composite = installSubsystemFromFile(root, COMPOSITE_A);
1: 		try {
1: 			assertProvisionPolicy(composite, false);
1: 			Subsystem feature = installSubsystemFromFile(composite, FEATURE_B);
1: 			try {
1: 				assertProvisionPolicy(feature, false);
1: 				assertConstituent(feature, BUNDLE_A);
1: 				assertNotConstituent(feature, BUNDLE_B);
1: 				assertNotConstituent(composite, BUNDLE_A);
1: 				assertNotConstituent(composite, BUNDLE_B);
1: 				assertNotConstituent(root, BUNDLE_A);
1: 				assertConstituent(root, BUNDLE_B);
1: 			}
1: 			finally {
1: 				uninstallSubsystemSilently(feature);
1: 			}
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(composite);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testProvisionToSelf() throws Exception {
1: 		Subsystem root = getRootSubsystem();
1: 		assertProvisionPolicy(root, true);
1: 		registerRepositoryService(BUNDLE_B);
1: 		Subsystem subsystem = installSubsystemFromFile(root, APPLICATION_A);
1: 		try {
1: 			assertProvisionPolicy(subsystem, true);
1: 			assertConstituent(subsystem, BUNDLE_A);
1: 			assertConstituent(subsystem, BUNDLE_B);
1: 			assertNotConstituent(root, BUNDLE_A);
1: 			assertNotConstituent(root, BUNDLE_B);
1: 		}
1: 		finally {
1: 			uninstallSubsystemSilently(subsystem);
1: 		}
1: 	}
1: }
============================================================================