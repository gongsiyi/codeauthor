1:aa4dd7c: /**
1:aa4dd7c:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:aa4dd7c:  *  contributor license agreements.  See the NOTICE file distributed with
1:aa4dd7c:  *  this work for additional information regarding copyright ownership.
1:aa4dd7c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:aa4dd7c:  *  (the "License"); you may not use this file except in compliance with
1:aa4dd7c:  *  the License.  You may obtain a copy of the License at
1:aa4dd7c:  *
1:aa4dd7c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:aa4dd7c:  *
1:aa4dd7c:  *  Unless required by applicable law or agreed to in writing, software
1:aa4dd7c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:aa4dd7c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa4dd7c:  *  See the License for the specific language governing permissions and
1:aa4dd7c:  *  limitations under the License.
1:aa4dd7c:  */
1:3364e3f: package org.apache.aries.samples.ariestrader.entities;
1:aa4dd7c: 
1:aa4dd7c: import java.io.Serializable;
1:aa4dd7c: import java.math.BigDecimal;
1:aa4dd7c: 
1:aa4dd7c: import javax.persistence.Column;
1:aa4dd7c: import javax.persistence.Entity;
1:aa4dd7c: import javax.persistence.Id;
1:aa4dd7c: import javax.persistence.NamedNativeQueries;
1:aa4dd7c: import javax.persistence.NamedNativeQuery;
1:aa4dd7c: import javax.persistence.NamedQueries;
1:aa4dd7c: import javax.persistence.NamedQuery;
1:aa4dd7c: import javax.persistence.Table;
1:aa4dd7c: 
1:61d7f67: import org.apache.aries.samples.ariestrader.util.Log;
1:61d7f67: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:880e087: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
1:aa4dd7c: 
1:aa4dd7c: @Entity(name = "quoteejb")
1:aa4dd7c: @Table(name = "quoteejb")
1:aa4dd7c: @NamedQueries({
1:aa4dd7c:     @NamedQuery(name = "quoteejb.allQuotes",query = "SELECT q FROM quoteejb q"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.quotesByChange",query = "SELECT q FROM quoteejb q WHERE q.symbol LIKE 's:1__' ORDER BY q.change1 DESC"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.findByLow", query = "SELECT q FROM quoteejb q WHERE q.low = :low"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.findByOpen1", query = "SELECT q FROM quoteejb q WHERE q.open1 = :open1"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.findByVolume", query = "SELECT q FROM quoteejb q WHERE q.volume = :volume"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.findByPrice", query = "SELECT q FROM quoteejb q WHERE q.price = :price"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.findByHigh", query = "SELECT q FROM quoteejb q WHERE q.high = :high"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.findByCompanyname", query = "SELECT q FROM quoteejb q WHERE q.companyName = :companyname"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.findBySymbol", query = "SELECT q FROM quoteejb q WHERE q.symbol = :symbol"),
1:aa4dd7c:     @NamedQuery(name = "quoteejb.findByChange1", query = "SELECT q FROM quoteejb q WHERE q.change1 = :change1")
1:aa4dd7c: })
1:aa4dd7c: @NamedNativeQueries({
1:3364e3f:     @NamedNativeQuery(name="quoteejb.quoteForUpdate", query="select * from quoteejb q where q.symbol=? for update",resultClass=org.apache.aries.samples.ariestrader.entities.QuoteDataBeanImpl.class)
1:aa4dd7c: })
1:aa4dd7c: 
1:aa4dd7c: public class QuoteDataBeanImpl implements QuoteDataBean, Serializable {
1:aa4dd7c:     
1:aa4dd7c:     /**
1:aa4dd7c: 	 * 
1:aa4dd7c: 	 */
1:aa4dd7c: 	private static final long serialVersionUID = 8476917690278143517L;
1:aa4dd7c: 	
1:aa4dd7c: 	@Id
1:09d6656:     @Column(name = "SYMBOL", nullable = false, length = 255)
1:aa4dd7c: 	private String symbol;          /* symbol */
1:aa4dd7c:     
1:09d6656: 	@Column(name = "COMPANYNAME", length = 255)
1:aa4dd7c:     private String companyName;     /* companyName */
1:aa4dd7c:     
1:aa4dd7c: 	@Column(name = "VOLUME", nullable = false)
1:aa4dd7c:     private double volume;          /* volume */
1:aa4dd7c:     
1:aa4dd7c: 	@Column(name = "PRICE")
1:aa4dd7c:     private BigDecimal price;       /* price */
1:aa4dd7c:     
1:aa4dd7c: 	@Column(name = "OPEN1")
1:aa4dd7c:     private BigDecimal open1;       /* open1 price */
1:aa4dd7c:     
1:aa4dd7c: 	@Column(name = "LOW")
1:aa4dd7c:     private BigDecimal low;         /* low price */
1:aa4dd7c:     
1:aa4dd7c: 	@Column(name = "HIGH")
1:aa4dd7c:     private BigDecimal high;        /* high price */
1:aa4dd7c:     
1:aa4dd7c: 	@Column(name = "CHANGE1", nullable = false)
1:aa4dd7c:     private double change1;         /* price change */
1:aa4dd7c:     
1:aa4dd7c:     
1:aa4dd7c:     
1:aa4dd7c:     public QuoteDataBeanImpl() {
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public QuoteDataBeanImpl(String symbol, String companyName, double volume,
1:aa4dd7c:             BigDecimal price, BigDecimal open, BigDecimal low,
1:aa4dd7c:             BigDecimal high, double change) {
1:aa4dd7c:         setSymbol(symbol);
1:aa4dd7c:         setCompanyName(companyName);
1:aa4dd7c:         setVolume(volume);
1:aa4dd7c:         setPrice(price);
1:aa4dd7c:         setOpen(open);
1:aa4dd7c:         setLow(low);
1:aa4dd7c:         setHigh(high);
1:aa4dd7c:         setChange(change);
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public static QuoteDataBean getRandomInstance() {
1:aa4dd7c:         return new QuoteDataBeanImpl(
1:aa4dd7c:                 TradeConfig.rndSymbol(),                 //symbol
1:aa4dd7c:                 TradeConfig.rndSymbol() + " Incorporated",         //Company Name
1:aa4dd7c:                 TradeConfig.rndFloat(100000),            //volume
1:aa4dd7c:                 TradeConfig.rndBigDecimal(1000.0f),     //price
1:aa4dd7c:                 TradeConfig.rndBigDecimal(1000.0f),     //open1
1:aa4dd7c:                 TradeConfig.rndBigDecimal(1000.0f),     //low
1:aa4dd7c:                 TradeConfig.rndBigDecimal(1000.0f),     //high
1:aa4dd7c:                 TradeConfig.rndFloat(100000)            //volume
1:aa4dd7c:         );
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     //Create a "zero" value QuoteDataBeanImpl for the given symbol
1:aa4dd7c:     public QuoteDataBeanImpl(String symbol) {
1:aa4dd7c:         setSymbol(symbol);
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public String toString() {
1:aa4dd7c:         return "\n\tQuote Data for: " + getSymbol()
1:aa4dd7c:                 + "\n\t\t companyName: " + getCompanyName()
1:aa4dd7c:                 + "\n\t\t      volume: " + getVolume()
1:aa4dd7c:                 + "\n\t\t       price: " + getPrice()
1:aa4dd7c:                 + "\n\t\t        open1: " + getOpen()
1:aa4dd7c:                 + "\n\t\t         low: " + getLow()
1:aa4dd7c:                 + "\n\t\t        high: " + getHigh()
1:aa4dd7c:                 + "\n\t\t      change1: " + getChange()
1:aa4dd7c:                 ;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public String toHTML() {
1:aa4dd7c:         return "<BR>Quote Data for: " + getSymbol()
1:aa4dd7c:                 + "<LI> companyName: " + getCompanyName() + "</LI>"
1:aa4dd7c:                 + "<LI>      volume: " + getVolume() + "</LI>"
1:aa4dd7c:                 + "<LI>       price: " + getPrice() + "</LI>"
1:aa4dd7c:                 + "<LI>        open1: " + getOpen() + "</LI>"
1:aa4dd7c:                 + "<LI>         low: " + getLow() + "</LI>"
1:aa4dd7c:                 + "<LI>        high: " + getHigh() + "</LI>"
1:aa4dd7c:                 + "<LI>      change1: " + getChange() + "</LI>"
1:aa4dd7c:                 ;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void print() {
1:aa4dd7c:         Log.log(this.toString());
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public String getSymbol() {
1:aa4dd7c:         return symbol;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setSymbol(String symbol) {
1:aa4dd7c:         this.symbol = symbol;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public String getCompanyName() {
1:aa4dd7c:         return companyName;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setCompanyName(String companyName) {
1:aa4dd7c:         this.companyName = companyName;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public BigDecimal getPrice() {
1:aa4dd7c:         return price;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setPrice(BigDecimal price) {
1:aa4dd7c:         this.price = price;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public BigDecimal getOpen() {
1:aa4dd7c:         return open1;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setOpen(BigDecimal open) {
1:aa4dd7c:         this.open1 = open;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public BigDecimal getLow() {
1:aa4dd7c:         return low;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setLow(BigDecimal low) {
1:aa4dd7c:         this.low = low;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public BigDecimal getHigh() {
1:aa4dd7c:         return high;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setHigh(BigDecimal high) {
1:aa4dd7c:         this.high = high;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public double getChange() {
1:aa4dd7c:         return change1;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setChange(double change) {
1:aa4dd7c:         this.change1 = change;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public double getVolume() {
1:aa4dd7c:         return volume;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     public void setVolume(double volume) {
1:aa4dd7c:         this.volume = volume;
1:aa4dd7c:     }
1:aa4dd7c: 
1:aa4dd7c:     @Override
1:aa4dd7c:     public int hashCode() {
1:aa4dd7c:         int hash = 0;
1:aa4dd7c:         hash += (this.symbol != null ? this.symbol.hashCode() : 0);
1:aa4dd7c:         return hash;
1:aa4dd7c:     }
1:aa4dd7c:     
1:aa4dd7c:     @Override
1:aa4dd7c:     public boolean equals(Object object) {
1:aa4dd7c:         // TODO: Warning - this method won't work in the case the id fields are not set
1:aa4dd7c:         if (!(object instanceof QuoteDataBeanImpl)) {
1:aa4dd7c:             return false;
1:aa4dd7c:         }
1:aa4dd7c:         QuoteDataBeanImpl other = (QuoteDataBeanImpl)object;
1:aa4dd7c:         if (this.symbol != other.symbol && (this.symbol == null || !this.symbol.equals(other.symbol))) return false;
1:aa4dd7c:         return true;
1:aa4dd7c:     }
1:aa4dd7c: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:09d6656
/////////////////////////////////////////////////////////////////////////
1:     @Column(name = "SYMBOL", nullable = false, length = 255)
1: 	@Column(name = "COMPANYNAME", length = 255)
commit:3ed5a02
/////////////////////////////////////////////////////////////////////////
0:     @Column(name = "SYMBOL", nullable = false, length = 250)
0: 	@Column(name = "COMPANYNAME", length = 250)
commit:39f53f6
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.api.persistence.QuoteDataBean;
commit:989ba4e
commit:3364e3f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.entities;
/////////////////////////////////////////////////////////////////////////
1:     @NamedNativeQuery(name="quoteejb.quoteForUpdate", query="select * from quoteejb q where q.symbol=? for update",resultClass=org.apache.aries.samples.ariestrader.entities.QuoteDataBeanImpl.class)
commit:f336ad3
commit:61d7f67
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.ariestrader.beans;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
0: import org.apache.aries.samples.ariestrader.persistence.api.QuoteDataBean;
/////////////////////////////////////////////////////////////////////////
0:     @NamedNativeQuery(name="quoteejb.quoteForUpdate", query="select * from quoteejb q where q.symbol=? for update",resultClass=org.apache.aries.samples.ariestrader.beans.QuoteDataBeanImpl.class)
commit:4eb010a
commit:aa4dd7c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.beans;
1: 
1: import java.io.Serializable;
1: import java.math.BigDecimal;
1: 
1: import javax.persistence.Column;
1: import javax.persistence.Entity;
1: import javax.persistence.Id;
1: import javax.persistence.NamedNativeQueries;
1: import javax.persistence.NamedNativeQuery;
1: import javax.persistence.NamedQueries;
1: import javax.persistence.NamedQuery;
1: import javax.persistence.Table;
1: 
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
0: import org.apache.geronimo.samples.daytrader.persistence.api.QuoteDataBean;
1: 
1: @Entity(name = "quoteejb")
1: @Table(name = "quoteejb")
1: @NamedQueries({
1:     @NamedQuery(name = "quoteejb.allQuotes",query = "SELECT q FROM quoteejb q"),
1:     @NamedQuery(name = "quoteejb.quotesByChange",query = "SELECT q FROM quoteejb q WHERE q.symbol LIKE 's:1__' ORDER BY q.change1 DESC"),
1:     @NamedQuery(name = "quoteejb.findByLow", query = "SELECT q FROM quoteejb q WHERE q.low = :low"),
1:     @NamedQuery(name = "quoteejb.findByOpen1", query = "SELECT q FROM quoteejb q WHERE q.open1 = :open1"),
1:     @NamedQuery(name = "quoteejb.findByVolume", query = "SELECT q FROM quoteejb q WHERE q.volume = :volume"),
1:     @NamedQuery(name = "quoteejb.findByPrice", query = "SELECT q FROM quoteejb q WHERE q.price = :price"),
1:     @NamedQuery(name = "quoteejb.findByHigh", query = "SELECT q FROM quoteejb q WHERE q.high = :high"),
1:     @NamedQuery(name = "quoteejb.findByCompanyname", query = "SELECT q FROM quoteejb q WHERE q.companyName = :companyname"),
1:     @NamedQuery(name = "quoteejb.findBySymbol", query = "SELECT q FROM quoteejb q WHERE q.symbol = :symbol"),
1:     @NamedQuery(name = "quoteejb.findByChange1", query = "SELECT q FROM quoteejb q WHERE q.change1 = :change1")
1: })
1: @NamedNativeQueries({
0:     @NamedNativeQuery(name="quoteejb.quoteForUpdate", query="select * from quoteejb q where q.symbol=? for update",resultClass=org.apache.geronimo.samples.daytrader.beans.QuoteDataBeanImpl.class)
1: })
1: 
1: public class QuoteDataBeanImpl implements QuoteDataBean, Serializable {
1:     
1:     /**
1: 	 * 
1: 	 */
1: 	private static final long serialVersionUID = 8476917690278143517L;
1: 	
1: 	@Id
0:     @Column(name = "SYMBOL", nullable = false)
1: 	private String symbol;          /* symbol */
1:     
0: 	@Column(name = "COMPANYNAME")
1:     private String companyName;     /* companyName */
1:     
1: 	@Column(name = "VOLUME", nullable = false)
1:     private double volume;          /* volume */
1:     
1: 	@Column(name = "PRICE")
1:     private BigDecimal price;       /* price */
1:     
1: 	@Column(name = "OPEN1")
1:     private BigDecimal open1;       /* open1 price */
1:     
1: 	@Column(name = "LOW")
1:     private BigDecimal low;         /* low price */
1:     
1: 	@Column(name = "HIGH")
1:     private BigDecimal high;        /* high price */
1:     
1: 	@Column(name = "CHANGE1", nullable = false)
1:     private double change1;         /* price change */
1:     
1:     
1:     
1:     public QuoteDataBeanImpl() {
1:     }
1: 
1:     public QuoteDataBeanImpl(String symbol, String companyName, double volume,
1:             BigDecimal price, BigDecimal open, BigDecimal low,
1:             BigDecimal high, double change) {
1:         setSymbol(symbol);
1:         setCompanyName(companyName);
1:         setVolume(volume);
1:         setPrice(price);
1:         setOpen(open);
1:         setLow(low);
1:         setHigh(high);
1:         setChange(change);
1:     }
1: 
1:     public static QuoteDataBean getRandomInstance() {
1:         return new QuoteDataBeanImpl(
1:                 TradeConfig.rndSymbol(),                 //symbol
1:                 TradeConfig.rndSymbol() + " Incorporated",         //Company Name
1:                 TradeConfig.rndFloat(100000),            //volume
1:                 TradeConfig.rndBigDecimal(1000.0f),     //price
1:                 TradeConfig.rndBigDecimal(1000.0f),     //open1
1:                 TradeConfig.rndBigDecimal(1000.0f),     //low
1:                 TradeConfig.rndBigDecimal(1000.0f),     //high
1:                 TradeConfig.rndFloat(100000)            //volume
1:         );
1:     }
1: 
1:     //Create a "zero" value QuoteDataBeanImpl for the given symbol
1:     public QuoteDataBeanImpl(String symbol) {
1:         setSymbol(symbol);
1:     }
1: 
1:     public String toString() {
1:         return "\n\tQuote Data for: " + getSymbol()
1:                 + "\n\t\t companyName: " + getCompanyName()
1:                 + "\n\t\t      volume: " + getVolume()
1:                 + "\n\t\t       price: " + getPrice()
1:                 + "\n\t\t        open1: " + getOpen()
1:                 + "\n\t\t         low: " + getLow()
1:                 + "\n\t\t        high: " + getHigh()
1:                 + "\n\t\t      change1: " + getChange()
1:                 ;
1:     }
1: 
1:     public String toHTML() {
1:         return "<BR>Quote Data for: " + getSymbol()
1:                 + "<LI> companyName: " + getCompanyName() + "</LI>"
1:                 + "<LI>      volume: " + getVolume() + "</LI>"
1:                 + "<LI>       price: " + getPrice() + "</LI>"
1:                 + "<LI>        open1: " + getOpen() + "</LI>"
1:                 + "<LI>         low: " + getLow() + "</LI>"
1:                 + "<LI>        high: " + getHigh() + "</LI>"
1:                 + "<LI>      change1: " + getChange() + "</LI>"
1:                 ;
1:     }
1: 
1:     public void print() {
1:         Log.log(this.toString());
1:     }
1: 
1:     public String getSymbol() {
1:         return symbol;
1:     }
1: 
1:     public void setSymbol(String symbol) {
1:         this.symbol = symbol;
1:     }
1: 
1:     public String getCompanyName() {
1:         return companyName;
1:     }
1: 
1:     public void setCompanyName(String companyName) {
1:         this.companyName = companyName;
1:     }
1: 
1:     public BigDecimal getPrice() {
1:         return price;
1:     }
1: 
1:     public void setPrice(BigDecimal price) {
1:         this.price = price;
1:     }
1: 
1:     public BigDecimal getOpen() {
1:         return open1;
1:     }
1: 
1:     public void setOpen(BigDecimal open) {
1:         this.open1 = open;
1:     }
1: 
1:     public BigDecimal getLow() {
1:         return low;
1:     }
1: 
1:     public void setLow(BigDecimal low) {
1:         this.low = low;
1:     }
1: 
1:     public BigDecimal getHigh() {
1:         return high;
1:     }
1: 
1:     public void setHigh(BigDecimal high) {
1:         this.high = high;
1:     }
1: 
1:     public double getChange() {
1:         return change1;
1:     }
1: 
1:     public void setChange(double change) {
1:         this.change1 = change;
1:     }
1: 
1:     public double getVolume() {
1:         return volume;
1:     }
1: 
1:     public void setVolume(double volume) {
1:         this.volume = volume;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         int hash = 0;
1:         hash += (this.symbol != null ? this.symbol.hashCode() : 0);
1:         return hash;
1:     }
1:     
1:     @Override
1:     public boolean equals(Object object) {
1:         // TODO: Warning - this method won't work in the case the id fields are not set
1:         if (!(object instanceof QuoteDataBeanImpl)) {
1:             return false;
1:         }
1:         QuoteDataBeanImpl other = (QuoteDataBeanImpl)object;
1:         if (this.symbol != other.symbol && (this.symbol == null || !this.symbol.equals(other.symbol))) return false;
1:         return true;
1:     }
1: }
============================================================================