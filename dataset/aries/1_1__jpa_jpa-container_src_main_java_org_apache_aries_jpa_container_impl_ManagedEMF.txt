1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.impl;
3:2cfdf52: 
1:2cfdf52: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1:2cfdf52: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_PROVIDER;
1:2cfdf52: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_VERSION;
1:2cfdf52: 
1:2cfdf52: import java.io.Closeable;
1:2cfdf52: import java.util.Dictionary;
1:2cfdf52: import java.util.Enumeration;
1:2cfdf52: import java.util.HashMap;
1:2cfdf52: import java.util.Hashtable;
1:2cfdf52: import java.util.Map;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManagerFactory;
1:2cfdf52: import javax.persistence.spi.PersistenceProvider;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitInfo;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: 
1:2cfdf52: import org.osgi.framework.Bundle;
1:2cfdf52: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.Constants;
1:2cfdf52: import org.osgi.framework.ServiceRegistration;
1:2cfdf52: import org.osgi.service.cm.ConfigurationException;
1:2cfdf52: import org.osgi.service.cm.ManagedService;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * Creates an EntityManagerFactory(EMF) for a persistence unit and publishes it as a service.
1:2cfdf52:  * Custom properties can be configured by supplying a config admin configuriation named like
1:465647f:  * the JPA_CONFIGURATION_PREFIX.persistence unit name.
1:2cfdf52:  */
1:2cfdf52: public class ManagedEMF implements Closeable, ManagedService {
1:ec3ea65:     private static final Logger LOGGER = LoggerFactory.getLogger(ManagedEMF.class);
1:ec3ea65:     private static final String JPA_CONFIGURATION_PREFIX = "org.apache.aries.jpa.";
1:2cfdf52: 
1:2cfdf52:     private EntityManagerFactory emf;
1:2cfdf52:     private ServiceRegistration<EntityManagerFactory> reg;
1:2cfdf52:     private PersistenceProvider provider;
1:2cfdf52:     private PersistenceUnitInfo persistenceUnit;
1:2cfdf52:     private Bundle bundle;
1:f2e057e:     private ServiceRegistration<?> configReg;
1:f2e057e: 
1:f2e057e:     private boolean closed;
1:2cfdf52: 
1:2cfdf52:     public ManagedEMF(BundleContext containerContext, Bundle bundle, PersistenceProvider provider, PersistenceUnitInfo persistenceUnit) {
1:2cfdf52:         this.provider = provider;
1:2cfdf52:         this.persistenceUnit = persistenceUnit;
1:2cfdf52:         this.bundle = bundle;
1:f2e057e:         registerManagedService(containerContext, persistenceUnit);
1:f2e057e:         closed = false;
1:f2e057e:     }
1:2cfdf52: 
1:f2e057e:     private void registerManagedService(BundleContext containerContext, PersistenceUnitInfo persistenceUnit) {
1:ec3ea65:         Dictionary<String, Object> configuration = new Hashtable<String, Object>(); // NOSONAR
1:2cfdf52:         configuration.put(Constants.SERVICE_PID,
1:2cfdf52:                           JPA_CONFIGURATION_PREFIX + persistenceUnit.getPersistenceUnitName());
1:f2e057e:         configReg = containerContext.registerService(ManagedService.class.getName(), this, configuration);
2:2cfdf52:     }
1:f2e057e: 
1:f2e057e:     public void closeEMF() {
1:f2e057e:         if (reg != null) {
1:f2e057e:             try {
1:f2e057e:                 reg.unregister();
1:f2e057e:             } catch (Exception e) {
1:ec3ea65:                 LOGGER.debug("Exception on unregister", e);
1:f2e057e:             }
1:2cfdf52:         }
1:83d1ac1:         if (emf != null && emf.isOpen()) {
3:2cfdf52:             try {
1:2cfdf52:                 emf.close();
3:2cfdf52:             } catch (Exception e) {
1:83d1ac1:                 LOGGER.warn("Error closing EntityManagerFactory for " + persistenceUnit.getPersistenceUnitName(), e);
1:2cfdf52:             }
1:2cfdf52:         }
1:2cfdf52:         reg = null;
1:2cfdf52:         emf = null;
1:2cfdf52:     }
1:f2e057e:     
1:ec3ea65:     @Override
1:f2e057e:     public void close() {
1:f2e057e:         closed = true;
1:0d59ccb:         closeEMF();
1:f2e057e:         if (configReg != null) {
1:f2e057e:             configReg.unregister();
1:f2e057e:         }
1:f2e057e:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void updated(Dictionary<String, ?> properties) throws ConfigurationException {
1:f2e057e:         if (closed) {
1:f2e057e:             return;
1:f2e057e:         }
2:2cfdf52:         if (emf != null) {
2:f2e057e:             closeEMF();
1:f2e057e:         }
1:0d59ccb:         if (bundle.getState() == Bundle.UNINSTALLED || bundle.getState() == Bundle.INSTALLED || bundle.getState() == Bundle.STOPPING) {
1:f2e057e:             // Not sure why but during the TCK tests updated sometimes was called
1:f2e057e:             // for uninstalled bundles
1:f2e057e:             return;
1:2cfdf52:         }
1:2cfdf52:         Map<String, Object> overrides = (properties != null) ? asMap(properties) : null;
1:2cfdf52:         LOGGER.info("Registering EntityManagerFactory for persistence unit " + persistenceUnit.getPersistenceUnitName());
1:2cfdf52:         if (LOGGER.isDebugEnabled()) {
1:2cfdf52:            LOGGER.debug("Using properties override " + overrides); 
1:2cfdf52:         }
1:f2e057e:         createAndPublishEMF(overrides);
1:f2e057e:     }
1:f2e057e: 
1:f2e057e:     private void createAndPublishEMF(Map<String, Object> overrides) {
1:2cfdf52:         emf = provider.createContainerEntityManagerFactory(persistenceUnit, overrides);
1:2cfdf52:         Dictionary<String, String> props = createProperties(persistenceUnit, bundle);
1:2cfdf52:         BundleContext uctx = bundle.getBundleContext();
1:2cfdf52:         reg = uctx.registerService(EntityManagerFactory.class, emf, props);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     public static Dictionary<String, String> createProperties(PersistenceUnitInfo persistenceUnit, Bundle puBundle) {
1:ec3ea65:         Dictionary<String, String> props = new Hashtable<String, String>(); // NOSONAR
1:2cfdf52:         props.put(JPA_UNIT_NAME, persistenceUnit.getPersistenceUnitName());
1:2cfdf52:         if (persistenceUnit.getPersistenceProviderClassName() != null) {
1:2cfdf52:             props.put(JPA_UNIT_PROVIDER, persistenceUnit.getPersistenceProviderClassName());
1:2cfdf52:         }
1:2cfdf52:         props.put(JPA_UNIT_VERSION, puBundle.getVersion().toString());
1:2cfdf52:         return props;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private Map<String, Object> asMap(Dictionary<String, ?> dict) {
1:ec3ea65:         Map<String, Object> map = new HashMap<String, Object>(); // NOSONAR
1:2cfdf52:         map.put(PersistenceUnitTransactionType.class.getName(), persistenceUnit.getTransactionType());
1:2cfdf52:         for (Enumeration<String> e = dict.keys(); e.hasMoreElements();) {
1:2cfdf52:             String key = e.nextElement();
1:2cfdf52:             map.put(key, dict.get(key));
1:2cfdf52:         }
1:2cfdf52:         return map;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:465647f
/////////////////////////////////////////////////////////////////////////
1:  * the JPA_CONFIGURATION_PREFIX.persistence unit name.
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOGGER = LoggerFactory.getLogger(ManagedEMF.class);
1:     private static final String JPA_CONFIGURATION_PREFIX = "org.apache.aries.jpa.";
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, Object> configuration = new Hashtable<String, Object>(); // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:                 LOGGER.debug("Exception on unregister", e);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, String> props = new Hashtable<String, String>(); // NOSONAR
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> map = new HashMap<String, Object>(); // NOSONAR
commit:e809e9c
/////////////////////////////////////////////////////////////////////////
0:         Dictionary<String, String> props = new Hashtable<String, String>();
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:         closeEMF();
/////////////////////////////////////////////////////////////////////////
1:         if (bundle.getState() == Bundle.UNINSTALLED || bundle.getState() == Bundle.INSTALLED || bundle.getState() == Bundle.STOPPING) {
commit:f2e057e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private ServiceRegistration<?> configReg;
1: 
1:     private boolean closed;
1:         registerManagedService(containerContext, persistenceUnit);
0:         //createAndPublishEMF(null);
1:         closed = false;
1:     }
1:     private void registerManagedService(BundleContext containerContext, PersistenceUnitInfo persistenceUnit) {
1:         configReg = containerContext.registerService(ManagedService.class.getName(), this, configuration);
1:     public void closeEMF() {
1:         if (reg != null) {
1:             try {
1: 
1:                 reg.unregister();
1:             } catch (Exception e) {
0:                 // Ignore. May happen if persistence unit bundle is unloaded/updated
1:             }
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void close() {
1:         closeEMF();
1:         closed = true;
1:         if (configReg != null) {
1:             configReg.unregister();
1:         }
1:     }
1:         if (closed) {
1:             return;
1:         }
1:             closeEMF();
1:         }
0:         if (bundle.getState() == Bundle.UNINSTALLED || bundle.getState() == Bundle.INSTALLED) {
1:             // Not sure why but during the TCK tests updated sometimes was called
1:             // for uninstalled bundles
1:             return;
1:         createAndPublishEMF(overrides);
1:     }
1: 
1:     private void createAndPublishEMF(Map<String, Object> overrides) {
commit:83d1ac1
/////////////////////////////////////////////////////////////////////////
1:         if (emf != null && emf.isOpen()) {
1:                 LOGGER.warn("Error closing EntityManagerFactory for " + persistenceUnit.getPersistenceUnitName(), e);
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.impl;
1: 
1: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_NAME;
1: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_PROVIDER;
1: import static org.osgi.service.jpa.EntityManagerFactoryBuilder.JPA_UNIT_VERSION;
1: 
1: import java.io.Closeable;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceProvider;
1: import javax.persistence.spi.PersistenceUnitInfo;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedService;
0: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Creates an EntityManagerFactory(EMF) for a persistence unit and publishes it as a service.
1:  * Custom properties can be configured by supplying a config admin configuriation named like
0:  * the JPA_CONFIGURATION_PREFIX.<persistence unit name>.
1:  */
1: public class ManagedEMF implements Closeable, ManagedService {
0: 	private static final Logger LOGGER = LoggerFactory.getLogger(ManagedEMF.class);
1: 
0:     private static String JPA_CONFIGURATION_PREFIX = "org.apache.aries.jpa.";
1: 
1:     private EntityManagerFactory emf;
1:     private ServiceRegistration<EntityManagerFactory> reg;
0:     private ServiceRegistration<EntityManagerFactoryBuilder> regBuilder;
1:     private PersistenceProvider provider;
1:     private PersistenceUnitInfo persistenceUnit;
1:     private Bundle bundle;
1: 
1:     public ManagedEMF(BundleContext containerContext, Bundle bundle, PersistenceProvider provider, PersistenceUnitInfo persistenceUnit) {
1:         this.provider = provider;
1:         this.persistenceUnit = persistenceUnit;
1:         this.bundle = bundle;
1: 
0:         Dictionary<String, Object> configuration = new Hashtable<String, Object>();
1:         configuration.put(Constants.SERVICE_PID,
1:                           JPA_CONFIGURATION_PREFIX + persistenceUnit.getPersistenceUnitName());
0:         containerContext.registerService(ManagedService.class.getName(), this, configuration);
1:     }
1: 
0:     public void close() {
1:         try {
0:             reg.unregister();
1:         } catch (Exception e) {
0:             // Ignore. May happen if persistence unit bundle is unloaded/updated
1:         }
1:         try {
0:             regBuilder.unregister();
1:         } catch (Exception e) {
0:             // Ignore. May happen if persistence unit bundle is unloaded/updated
1:         }
1:         if (emf != null) {
1:             try {
1:                 emf.close();
1:             } catch (Exception e) {
0:                 LOGGER.warn("EntityManagerFactory for " + persistenceUnit.getPersistenceUnitName() + " already close", e);
1:             }
1:         }
1:         reg = null;
1:         emf = null;
1:     }
1: 
1:     @Override
1:     public void updated(Dictionary<String, ?> properties) throws ConfigurationException {
1:         if (emf != null) {
0:             close();
1:         }
1:         Map<String, Object> overrides = (properties != null) ? asMap(properties) : null;
1:         LOGGER.info("Registering EntityManagerFactory for persistence unit " + persistenceUnit.getPersistenceUnitName());
1:         if (LOGGER.isDebugEnabled()) {
1:            LOGGER.debug("Using properties override " + overrides); 
1:         }
1:         emf = provider.createContainerEntityManagerFactory(persistenceUnit, overrides);
1:         Dictionary<String, String> props = createProperties(persistenceUnit, bundle);
1:         BundleContext uctx = bundle.getBundleContext();
1:         reg = uctx.registerService(EntityManagerFactory.class, emf, props);
1:     }
1: 
1:     public static Dictionary<String, String> createProperties(PersistenceUnitInfo persistenceUnit, Bundle puBundle) {
0:         Dictionary<String, String> props = new Hashtable<>();
1:         props.put(JPA_UNIT_NAME, persistenceUnit.getPersistenceUnitName());
1:         if (persistenceUnit.getPersistenceProviderClassName() != null) {
1:             props.put(JPA_UNIT_PROVIDER, persistenceUnit.getPersistenceProviderClassName());
1:         }
1:         props.put(JPA_UNIT_VERSION, puBundle.getVersion().toString());
1:         return props;
1:     }
1: 
1:     private Map<String, Object> asMap(Dictionary<String, ?> dict) {
0:         Map<String, Object> map = new HashMap<String, Object>();
1:         map.put(PersistenceUnitTransactionType.class.getName(), persistenceUnit.getTransactionType());
1:         for (Enumeration<String> e = dict.keys(); e.hasMoreElements();) {
1:             String key = e.nextElement();
1:             map.put(key, dict.get(key));
1:         }
1:         return map;
1:     }
1: 
1: }
============================================================================