1:f13c6ac: /*
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.reflect;
1:f13c6ac: 
1:f13c6ac: import java.util.ArrayList;
1:f13c6ac: import java.util.Collection;
1:f13c6ac: import java.util.Collections;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.mutable.MutableServiceReferenceMetadata;
1:b13e703: import org.osgi.framework.BundleContext;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ReferenceListener;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
1:f13c6ac: import org.osgi.service.blueprint.reflect.Target;
1:d46274e: import org.osgi.service.blueprint.reflect.ValueMetadata;
1:f13c6ac: 
1:f13c6ac: /**
1:f13c6ac:  * Implementation of ServiceReferenceMetadata 
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:f13c6ac: public abstract class ServiceReferenceMetadataImpl extends ComponentMetadataImpl implements MutableServiceReferenceMetadata {
1:f13c6ac: 
1:f13c6ac:     protected int availability;
1:f13c6ac:     protected String interfaceName;
1:f13c6ac:     protected String componentName;
1:f13c6ac:     protected String filter;
1:f13c6ac:     protected Collection<ReferenceListener> referenceListeners;
1:f13c6ac:     protected int proxyMethod;
1:774ce31:     protected Class runtimeInterface;
1:b13e703:     protected BundleContext bundleContext;
1:d46274e:     protected ValueMetadata extendedFilter;
1:f13c6ac: 
1:f13c6ac:     public ServiceReferenceMetadataImpl() {
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public ServiceReferenceMetadataImpl(ServiceReferenceMetadata source) {
1:f13c6ac:         super(source);
1:f13c6ac:         this.availability = source.getAvailability();
1:f13c6ac:         this.interfaceName = source.getInterface();
1:f13c6ac:         this.componentName = source.getComponentName();
1:f13c6ac:         this.filter = source.getFilter();
1:f13c6ac:         for (ReferenceListener listener : source.getReferenceListeners()) {
1:f13c6ac:             addServiceListener(new ReferenceListenerImpl(listener));
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public int getAvailability() {
1:f13c6ac:         return availability;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setAvailability(int availability) {
1:f13c6ac:         this.availability = availability;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getInterface() {
1:f13c6ac:         return interfaceName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setInterface(String interfaceName) {
1:f13c6ac:         this.interfaceName = interfaceName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getComponentName() {
1:f13c6ac:         return componentName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setComponentName(String componentName) {
1:f13c6ac:         this.componentName = componentName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public String getFilter() {
1:f13c6ac:         return filter;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setFilter(String filter) {
1:f13c6ac:         this.filter = filter;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Collection<ReferenceListener> getReferenceListeners() {
1:f13c6ac:         if (this.referenceListeners == null) {
1:f13c6ac:             return Collections.emptyList();
1:f13c6ac:         } else {
1:f13c6ac:             return Collections.unmodifiableCollection(this.referenceListeners);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setReferenceListeners(Collection<ReferenceListener> listeners) {
1:f13c6ac:         this.referenceListeners = listeners != null ? new ArrayList<ReferenceListener>(listeners) : null;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void addServiceListener(ReferenceListener bindingListenerMetadata) {
1:f13c6ac:         if (this.referenceListeners == null) {
1:f13c6ac:             this.referenceListeners = new ArrayList<ReferenceListener>();
1:f13c6ac:         }
1:f13c6ac:         this.referenceListeners.add(bindingListenerMetadata);
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public ReferenceListener addServiceListener(Target listenerComponent, String bindMethodName, String unbindMethodName) {
1:f13c6ac:         ReferenceListener listener = new ReferenceListenerImpl(listenerComponent, bindMethodName, unbindMethodName);
1:f13c6ac:         addServiceListener(listener);
1:f13c6ac:         return listener;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void removeReferenceListener(ReferenceListener listener) {
1:f13c6ac:         if (this.referenceListeners != null) {
1:f13c6ac:             this.referenceListeners.remove(listener);
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public int getProxyMethod() {
1:f13c6ac:         return proxyMethod;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setProxyMethod(int proxyMethod) {
1:f13c6ac:         this.proxyMethod = proxyMethod;
1:f13c6ac:     }
1:f13c6ac: 
1:774ce31:     public Class getRuntimeInterface() {
1:774ce31:         return runtimeInterface;
1:774ce31:     }
1:774ce31: 
1:774ce31:     public void setRuntimeInterface(Class runtimeInterface) {
1:774ce31:         this.runtimeInterface = runtimeInterface;
1:774ce31:     }
1:b13e703:     
1:b13e703:     public BundleContext getBundleContext() {
1:b13e703:       return bundleContext;
1:f13c6ac:     }
1:b13e703:     
1:b13e703:     public void setBundleContext(BundleContext ctx) {
1:b13e703:       this.bundleContext = ctx;
1:b13e703:     }
1:d46274e: 
1:d46274e:     public ValueMetadata getExtendedFilter() {
1:d46274e:         return extendedFilter;
1:d46274e:     }
1:d46274e: 
1:d46274e:     public void setExtendedFilter(ValueMetadata extendedFilter) {
1:d46274e:         this.extendedFilter = extendedFilter;
1:d46274e:     }
1:b13e703: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:d46274e
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.blueprint.reflect.ValueMetadata;
/////////////////////////////////////////////////////////////////////////
1:     protected ValueMetadata extendedFilter;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public ValueMetadata getExtendedFilter() {
1:         return extendedFilter;
1:     }
1: 
1:     public void setExtendedFilter(ValueMetadata extendedFilter) {
1:         this.extendedFilter = extendedFilter;
1:     }
commit:774ce31
/////////////////////////////////////////////////////////////////////////
1:     protected Class runtimeInterface;
/////////////////////////////////////////////////////////////////////////
1:     public Class getRuntimeInterface() {
1:         return runtimeInterface;
1:     }
1: 
1:     public void setRuntimeInterface(Class runtimeInterface) {
1:         this.runtimeInterface = runtimeInterface;
1:     }
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.reflect;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: 
0: import org.apache.geronimo.blueprint.mutable.MutableServiceReferenceMetadata;
1: import org.osgi.service.blueprint.reflect.ReferenceListener;
1: import org.osgi.service.blueprint.reflect.ServiceReferenceMetadata;
1: import org.osgi.service.blueprint.reflect.Target;
1: 
1: /**
1:  * Implementation of ServiceReferenceMetadata 
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 760378 $, $Date: 2009-03-31 11:31:38 +0200 (Tue, 31 Mar 2009) $
1:  */
1: public abstract class ServiceReferenceMetadataImpl extends ComponentMetadataImpl implements MutableServiceReferenceMetadata {
1: 
1:     protected int availability;
1:     protected String interfaceName;
1:     protected String componentName;
1:     protected String filter;
1:     protected Collection<ReferenceListener> referenceListeners;
1:     protected int proxyMethod;
1: 
1:     public ServiceReferenceMetadataImpl() {
1:     }
1: 
1:     public ServiceReferenceMetadataImpl(ServiceReferenceMetadata source) {
1:         super(source);
1:         this.availability = source.getAvailability();
1:         this.interfaceName = source.getInterface();
1:         this.componentName = source.getComponentName();
1:         this.filter = source.getFilter();
1:         for (ReferenceListener listener : source.getReferenceListeners()) {
1:             addServiceListener(new ReferenceListenerImpl(listener));
1:         }
1:     }
1: 
1:     public int getAvailability() {
1:         return availability;
1:     }
1: 
1:     public void setAvailability(int availability) {
1:         this.availability = availability;
1:     }
1: 
1:     public String getInterface() {
1:         return interfaceName;
1:     }
1: 
1:     public void setInterface(String interfaceName) {
1:         this.interfaceName = interfaceName;
1:     }
1: 
1:     public String getComponentName() {
1:         return componentName;
1:     }
1: 
1:     public void setComponentName(String componentName) {
1:         this.componentName = componentName;
1:     }
1: 
1:     public String getFilter() {
1:         return filter;
1:     }
1: 
1:     public void setFilter(String filter) {
1:         this.filter = filter;
1:     }
1: 
1:     public Collection<ReferenceListener> getReferenceListeners() {
1:         if (this.referenceListeners == null) {
1:             return Collections.emptyList();
1:         } else {
1:             return Collections.unmodifiableCollection(this.referenceListeners);
1:         }
1:     }
1: 
1:     public void setReferenceListeners(Collection<ReferenceListener> listeners) {
1:         this.referenceListeners = listeners != null ? new ArrayList<ReferenceListener>(listeners) : null;
1:     }
1: 
1:     public void addServiceListener(ReferenceListener bindingListenerMetadata) {
1:         if (this.referenceListeners == null) {
1:             this.referenceListeners = new ArrayList<ReferenceListener>();
1:         }
1:         this.referenceListeners.add(bindingListenerMetadata);
1:     }
1: 
1:     public ReferenceListener addServiceListener(Target listenerComponent, String bindMethodName, String unbindMethodName) {
1:         ReferenceListener listener = new ReferenceListenerImpl(listenerComponent, bindMethodName, unbindMethodName);
1:         addServiceListener(listener);
1:         return listener;
1:     }
1: 
1:     public void removeReferenceListener(ReferenceListener listener) {
1:         if (this.referenceListeners != null) {
1:             this.referenceListeners.remove(listener);
1:         }
1:     }
1: 
1:     public int getProxyMethod() {
1:         return proxyMethod;
1:     }
1: 
1:     public void setProxyMethod(int proxyMethod) {
1:         this.proxyMethod = proxyMethod;
1:     }
1: 
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:b13e703
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
/////////////////////////////////////////////////////////////////////////
1:     protected BundleContext bundleContext;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public BundleContext getBundleContext() {
1:       return bundleContext;
1:     }
1:     
1:     public void setBundleContext(BundleContext ctx) {
1:       this.bundleContext = ctx;
1:     }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.reflect;
1: import org.apache.aries.blueprint.mutable.MutableServiceReferenceMetadata;
============================================================================