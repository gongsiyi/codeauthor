1:bb9ffe7: /**
1:bb9ffe7:  * Licensed to the Apache Software Foundation (ASF) under one
1:bb9ffe7:  * or more contributor license agreements.  See the NOTICE file
1:bb9ffe7:  * distributed with this work for additional information
1:bb9ffe7:  * regarding copyright ownership.  The ASF licenses this file
1:bb9ffe7:  * to you under the Apache License, Version 2.0 (the
1:bb9ffe7:  * "License"); you may not use this file except in compliance
1:bb9ffe7:  * with the License.  You may obtain a copy of the License at
1:bb9ffe7:  *
1:bb9ffe7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:bb9ffe7:  *
1:bb9ffe7:  * Unless required by applicable law or agreed to in writing,
1:bb9ffe7:  * software distributed under the License is distributed on an
1:bb9ffe7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bb9ffe7:  * KIND, either express or implied.  See the License for the
1:bb9ffe7:  * specific language governing permissions and limitations
1:bb9ffe7:  * under the License.
1:bb9ffe7:  */
1:e0beeec: package org.apache.aries.samples.blog.biz;
1:bb9ffe7: 
1:bb9ffe7: import java.util.ArrayList;
1:bb9ffe7: import java.util.Iterator;
1:bb9ffe7: import java.util.List;
1:bb9ffe7: import java.util.Map;
1:bb9ffe7: 
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogComment;
1:bb9ffe7: import org.apache.aries.samples.blog.api.BlogCommentManager;
1:380a6c0: import org.apache.aries.samples.blog.api.comment.persistence.BlogCommentService;
1:380a6c0: import org.apache.aries.samples.blog.api.comment.persistence.Comment;
1:bb9ffe7: 
1:bb9ffe7: 
1:bb9ffe7: public class BlogCommentManagerImpl implements BlogCommentManager {
1:bb9ffe7: 	
1:bb9ffe7: 	private BlogCommentService commentService;
1:bb9ffe7: 	private boolean commentServiceValid;
1:bb9ffe7: 	
1:bb9ffe7: 	// Injected via blueprint
1:bb9ffe7: 	public void setCommentService(BlogCommentService bcs) {
1:bb9ffe7: 		commentService = bcs;
1:bb9ffe7: 	}
1:bb9ffe7: 
1:bb9ffe7: 
1:bb9ffe7: 	public void createComment(String comment, String email, long entryId) {
1:bb9ffe7: 		commentService.createComment(comment, email, entryId);
1:bb9ffe7: 	}
1:bb9ffe7: 
1:bb9ffe7: 	public List<? extends BlogComment> getCommentsByAuthor(String email) {
1:bb9ffe7: 		List<? extends Comment> comment = commentService.getCommentsForAuthor(email);
1:bb9ffe7: 		return adaptComment(comment);
1:bb9ffe7: 		
1:bb9ffe7: 	}		
1:bb9ffe7: 
1:bb9ffe7: 	public List<? extends BlogComment> getCommentsForPost(long id) {
1:bb9ffe7: 		List<? extends Comment> comment = commentService.getCommentsForEntry(id);
1:bb9ffe7: 		return adaptComment(comment);
1:bb9ffe7: 	}
1:bb9ffe7: 		
1:bb9ffe7: 
1:bb9ffe7: 	public void deleteComment(int id) {
1:bb9ffe7: 		commentService.delete(id);
1:bb9ffe7: 	}
1:bb9ffe7: 
1:bb9ffe7: 	private List<? extends BlogComment> adaptComment(
1:bb9ffe7: 			List<? extends Comment> comments) {
1:bb9ffe7: 		List<BlogComment> list = new ArrayList<BlogComment>();
1:bb9ffe7: 
1:bb9ffe7: 		Iterator<? extends Comment> c = comments.iterator();
1:bb9ffe7: 		while (c.hasNext()) {
1:bb9ffe7: 			list.add(new BlogCommentImpl(c.next()));
1:bb9ffe7: 			
1:bb9ffe7: 		}
1:bb9ffe7: 		return list;
1:bb9ffe7: 
1:bb9ffe7: 	}
1:bb9ffe7: 	
1:bb9ffe7: 	public boolean isCommentingAvailable() {
1:bb9ffe7: 		return commentServiceValid;
1:bb9ffe7: 	}
1:bb9ffe7: 	
1:bb9ffe7: 	public void blogServiceBound(BlogCommentService comment, Map props) {
1:bb9ffe7: 		commentServiceValid = true;
1:bb9ffe7: 	}
1:bb9ffe7: 
1:bb9ffe7: 	public void blogServiceUnbound(BlogCommentService comment, Map props) {
1:bb9ffe7: 
1:bb9ffe7: 	}
1:bb9ffe7: 
1:bb9ffe7: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:380a6c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.blog.api.comment.persistence.BlogCommentService;
1: import org.apache.aries.samples.blog.api.comment.persistence.Comment;
commit:e0beeec
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.blog.biz;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.blog.api.comment.persistence.api.BlogCommentService;
0: import org.apache.aries.samples.blog.api.comment.persistence.api.Comment;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:afa98ec
commit:607acfe
commit:bb9ffe7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.aries.samples.blog;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.samples.blog.api.BlogComment;
1: import org.apache.aries.samples.blog.api.BlogCommentManager;
0: import org.apache.aries.samples.blog.comment.persistence.api.BlogCommentService;
0: import org.apache.aries.samples.blog.comment.persistence.api.Comment;
1: 
1: 
1: public class BlogCommentManagerImpl implements BlogCommentManager {
1: 	
1: 	private BlogCommentService commentService;
1: 	private boolean commentServiceValid;
1: 	
1: 	// Injected via blueprint
1: 	public void setCommentService(BlogCommentService bcs) {
1: 		commentService = bcs;
1: 	}
1: 
1: 
1: 	public void createComment(String comment, String email, long entryId) {
1: 		commentService.createComment(comment, email, entryId);
1: 	}
1: 
1: 	public List<? extends BlogComment> getCommentsByAuthor(String email) {
1: 		List<? extends Comment> comment = commentService.getCommentsForAuthor(email);
1: 		return adaptComment(comment);
1: 		
1: 	}		
1: 
1: 	public List<? extends BlogComment> getCommentsForPost(long id) {
1: 		List<? extends Comment> comment = commentService.getCommentsForEntry(id);
1: 		return adaptComment(comment);
1: 	}
1: 		
1: 
1: 	public void deleteComment(int id) {
1: 		commentService.delete(id);
1: 	}
1: 
1: 	private List<? extends BlogComment> adaptComment(
1: 			List<? extends Comment> comments) {
1: 		List<BlogComment> list = new ArrayList<BlogComment>();
1: 
1: 		Iterator<? extends Comment> c = comments.iterator();
1: 		while (c.hasNext()) {
1: 			list.add(new BlogCommentImpl(c.next()));
1: 			
1: 		}
1: 		return list;
1: 
1: 	}
1: 	
1: 	public boolean isCommentingAvailable() {
1: 		return commentServiceValid;
1: 	}
1: 	
1: 	public void blogServiceBound(BlogCommentService comment, Map props) {
1: 		commentServiceValid = true;
1: 	}
1: 
1: 	public void blogServiceUnbound(BlogCommentService comment, Map props) {
1: 
1: 	}
1: 
1: }
============================================================================