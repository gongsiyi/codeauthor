1:6be355e: /**
1:6be355e:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:6be355e:  *  contributor license agreements.  See the NOTICE file distributed with
1:6be355e:  *  this work for additional information regarding copyright ownership.
1:6be355e:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:6be355e:  *  (the "License"); you may not use this file except in compliance with
1:6be355e:  *  the License.  You may obtain a copy of the License at
1:6be355e:  *
1:6be355e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6be355e:  *
1:6be355e:  *  Unless required by applicable law or agreed to in writing, software
1:6be355e:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:6be355e:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6be355e:  *  See the License for the specific language governing permissions and
1:6be355e:  *  limitations under the License.
1:6be355e:  */
1:6be355e: package org.apache.aries.blueprint.testbundlea;
1:6be355e: 
1:6be355e: import java.net.URL;
1:6be355e: import java.util.Collections;
1:6be355e: import java.util.List;
1:6be355e: import java.util.Set;
1:6be355e: 
1:6be355e: import org.apache.aries.blueprint.NamespaceHandler;
1:6be355e: import org.apache.aries.blueprint.ParserContext;
1:6be355e: import org.apache.aries.blueprint.PassThroughMetadata;
1:6be355e: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1:6be355e: import org.apache.aries.blueprint.mutable.MutableRefMetadata;
1:6be355e: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:6be355e: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1:6be355e: import org.osgi.service.blueprint.reflect.Metadata;
1:6be355e: import org.osgi.service.blueprint.reflect.RefMetadata;
1:6be355e: 
1:6be355e: import org.w3c.dom.Attr;
1:6be355e: import org.w3c.dom.Element;
1:6be355e: import org.w3c.dom.Node;
1:6be355e: 
1:6be355e: public class NSHandlerSix implements NamespaceHandler{
1:6be355e:     public static String NSURI = "http://ns.handler.six";
1:6be355e:     private static String ELT_NAME = "nshandlersix";
1:6be355e:     private static String ATTRIB_ID = "id";
1:6be355e: 
1:6be355e:     //process elements
1:6be355e:     public Metadata parse(Element element, ParserContext context) {
1:6be355e:         Metadata retval = null;       
1:6be355e:         if( element.getLocalName().equals(ELT_NAME) ) {
1:6be355e:             final String id = element.getAttributeNS(NSURI, ATTRIB_ID);
1:6be355e:             MutableBeanMetadata bm = context.createMetadata(MutableBeanMetadata.class);
1:6be355e:             bm.setId(id);
1:6be355e:             bm.setScope("PROTOTYPE");
1:6be355e:             bm.setClassName(TestBean.class.getName());
1:6be355e:             retval = bm;
1:6be355e:         }
1:6be355e:         return retval;
1:6be355e:     }    
1:6be355e: 
1:6be355e:     //supply schema back to blueprint.
1:6be355e:     public URL getSchemaLocation(String namespace) {
1:6be355e:         if (NSURI.equals(namespace)) {
1:6be355e:             return this.getClass().getResource("nshandlersix.xsd");
1:6be355e:         }
1:6be355e:         return this.getClass().getResource("nshandlersiximport.xsd");
1:6be355e:     }
1:6be355e: 
1:6be355e:     public Set<Class> getManagedClasses() {
1:6be355e:         Class cls = TestBean.class;
1:6be355e:         return Collections.singleton(cls);
1:6be355e:     }
1:6be355e: 
1:6be355e:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
1:6be355e:                                       ParserContext context) {
1:6be355e:         return component;
1:6be355e:     }
1:6be355e: 
1:6be355e: }
============================================================================
author:J. Daniel Kulp
-------------------------------------------------------------------------------
commit:a2c00f6
/////////////////////////////////////////////////////////////////////////
commit:6be355e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.testbundlea;
1: 
1: import java.net.URL;
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.aries.blueprint.NamespaceHandler;
1: import org.apache.aries.blueprint.ParserContext;
1: import org.apache.aries.blueprint.PassThroughMetadata;
1: import org.apache.aries.blueprint.mutable.MutableBeanMetadata;
1: import org.apache.aries.blueprint.mutable.MutableRefMetadata;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.blueprint.reflect.ComponentMetadata;
1: import org.osgi.service.blueprint.reflect.Metadata;
1: import org.osgi.service.blueprint.reflect.RefMetadata;
1: 
1: import org.w3c.dom.Attr;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: 
1: public class NSHandlerSix implements NamespaceHandler{
1:     public static String NSURI = "http://ns.handler.six";
1:     private static String ELT_NAME = "nshandlersix";
1:     private static String ATTRIB_ID = "id";
1: 
1:     //process elements
1:     public Metadata parse(Element element, ParserContext context) {
1:         Metadata retval = null;       
1:         if( element.getLocalName().equals(ELT_NAME) ) {
1:             final String id = element.getAttributeNS(NSURI, ATTRIB_ID);
1:             MutableBeanMetadata bm = context.createMetadata(MutableBeanMetadata.class);
1:             bm.setId(id);
1:             bm.setScope("PROTOTYPE");
1:             bm.setClassName(TestBean.class.getName());
1:             retval = bm;
1:         }
1:         return retval;
1:     }    
1: 
1:     //supply schema back to blueprint.
1:     public URL getSchemaLocation(String namespace) {
0:         System.out.println("Schemans: " + namespace);
1:         if (NSURI.equals(namespace)) {
1:             return this.getClass().getResource("nshandlersix.xsd");
1:         }
1:         return this.getClass().getResource("nshandlersiximport.xsd");
1:     }
1: 
1:     public Set<Class> getManagedClasses() {
1:         Class cls = TestBean.class;
1:         return Collections.singleton(cls);
1:     }
1: 
1:     public ComponentMetadata decorate(Node node, ComponentMetadata component,
1:                                       ParserContext context) {
1:         return component;
1:     }
1: 
1: }
============================================================================