1:97c9f45: /*
1:97c9f45:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:97c9f45:  * contributor license agreements.  See the NOTICE file distributed with
1:97c9f45:  * this work for additional information regarding copyright ownership.
1:97c9f45:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:97c9f45:  * (the "License"); you may not use this file except in compliance with
1:97c9f45:  * the License.  You may obtain a copy of the License at
1:97c9f45:  *
1:97c9f45:  *      http://www.apache.org/licenses/LICENSE-2.0
1:97c9f45:  *
1:97c9f45:  * Unless required by applicable law or agreed to in writing, software
1:97c9f45:  * distributed under the License is distributed on an "AS IS" BASIS,
1:97c9f45:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:97c9f45:  * See the License for the specific language governing permissions and
1:97c9f45:  * limitations under the License.
1:97c9f45:  */
1:6d5ae4f: package org.apache.aries.transaction.internal;
1:97c9f45: 
1:97c9f45: import java.util.Map;
1:97c9f45: import java.util.Iterator;
1:97c9f45: import java.util.List;
1:97c9f45: import java.util.concurrent.ConcurrentHashMap;
1:97c9f45: 
1:97c9f45: import javax.transaction.Transaction;
1:97c9f45: import javax.transaction.Status;
1:97c9f45: import javax.transaction.SystemException;
1:97c9f45: import javax.transaction.xa.XAException;
1:97c9f45: 
1:97c9f45: import org.apache.geronimo.transaction.manager.TransactionLog;
1:97c9f45: import org.apache.geronimo.transaction.manager.XidFactory;
1:97c9f45: import org.apache.geronimo.transaction.manager.TransactionManagerMonitor;
1:97c9f45: import org.springframework.transaction.PlatformTransactionManager;
1:97c9f45: import org.springframework.transaction.TransactionStatus;
1:97c9f45: import org.springframework.transaction.TransactionDefinition;
1:97c9f45: import org.springframework.transaction.TransactionException;
1:97c9f45: import org.springframework.transaction.support.TransactionSynchronizationManager;
1:97c9f45: import org.springframework.transaction.support.TransactionSynchronization;
1:97c9f45: import org.springframework.transaction.jta.JtaTransactionManager;
1:97c9f45: 
1:97c9f45: /**
1:97c9f45:  */
1:6d5ae4f: public class AriesPlatformTransactionManager extends AriesTransactionManagerImpl implements PlatformTransactionManager {
1:97c9f45: 
1:97c9f45:     private final PlatformTransactionManager platformTransactionManager;
1:97c9f45:     private final Map<Transaction, SuspendedResourcesHolder> suspendedResources = new ConcurrentHashMap<Transaction, SuspendedResourcesHolder>();
1:97c9f45: 
1:6d5ae4f:     public AriesPlatformTransactionManager() throws XAException {
1:97c9f45:         platformTransactionManager = new JtaTransactionManager(this, this);
1:97c9f45:         registerTransactionAssociationListener();
1:97c9f45:     }
1:97c9f45: 
1:6d5ae4f:     public AriesPlatformTransactionManager(int defaultTransactionTimeoutSeconds) throws XAException {
1:97c9f45:         super(defaultTransactionTimeoutSeconds);
1:97c9f45:         platformTransactionManager = new JtaTransactionManager(this, this);
1:97c9f45:         registerTransactionAssociationListener();
1:97c9f45:     }
1:97c9f45: 
1:6d5ae4f:     public AriesPlatformTransactionManager(int defaultTransactionTimeoutSeconds, TransactionLog transactionLog) throws XAException {
1:97c9f45:         super(defaultTransactionTimeoutSeconds, transactionLog);
1:97c9f45:         platformTransactionManager = new JtaTransactionManager(this, this);
1:97c9f45:         registerTransactionAssociationListener();
1:97c9f45:     }
1:97c9f45: 
1:6d5ae4f:     public AriesPlatformTransactionManager(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog) throws XAException {
1:97c9f45:         super(defaultTransactionTimeoutSeconds, xidFactory, transactionLog);
1:97c9f45:         platformTransactionManager = new JtaTransactionManager(this, this);
1:97c9f45:         registerTransactionAssociationListener();
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     public TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException {
1:97c9f45:         return platformTransactionManager.getTransaction(definition);
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     public void commit(TransactionStatus status) throws TransactionException {
1:97c9f45:         platformTransactionManager.commit(status);
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     public void rollback(TransactionStatus status) throws TransactionException {
1:97c9f45:         platformTransactionManager.rollback(status);
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     protected void registerTransactionAssociationListener() {
1:97c9f45:         addTransactionAssociationListener(new TransactionManagerMonitor() {
1:97c9f45:             public void threadAssociated(Transaction transaction) {
1:97c9f45:                 try {
1:97c9f45:                     if (transaction.getStatus() == Status.STATUS_ACTIVE) {
1:97c9f45:                         SuspendedResourcesHolder holder = suspendedResources.remove(transaction);
1:97c9f45:                         if (holder != null && holder.getSuspendedSynchronizations() != null) {
1:97c9f45:                             TransactionSynchronizationManager.setActualTransactionActive(true);
1:97c9f45:                             TransactionSynchronizationManager.setCurrentTransactionReadOnly(holder.isReadOnly());
1:97c9f45:                             TransactionSynchronizationManager.setCurrentTransactionName(holder.getName());
1:97c9f45:                             TransactionSynchronizationManager.initSynchronization();
1:97c9f45:                             for (Iterator<?> it = holder.getSuspendedSynchronizations().iterator(); it.hasNext();) {
1:97c9f45:                                 TransactionSynchronization synchronization = (TransactionSynchronization) it.next();
1:97c9f45:                                 synchronization.resume();
1:97c9f45:                                 TransactionSynchronizationManager.registerSynchronization(synchronization);
1:97c9f45:                             }
1:97c9f45:                         }
1:97c9f45:                     }
1:97c9f45:                 } catch (SystemException e) {
1:97c9f45:                     return;
1:97c9f45:                 }
1:97c9f45:             }
1:97c9f45:             public void threadUnassociated(Transaction transaction) {
1:97c9f45:                 try {
1:97c9f45:                     if (transaction.getStatus() == Status.STATUS_ACTIVE) {
1:97c9f45:                         if (TransactionSynchronizationManager.isSynchronizationActive()) {
1:97c9f45:                             List<?> suspendedSynchronizations = TransactionSynchronizationManager.getSynchronizations();
1:97c9f45:                             for (Iterator<?> it = suspendedSynchronizations.iterator(); it.hasNext();) {
1:97c9f45:                                 ((TransactionSynchronization) it.next()).suspend();
1:97c9f45:                             }
1:97c9f45:                             TransactionSynchronizationManager.clearSynchronization();
1:97c9f45:                             String name = TransactionSynchronizationManager.getCurrentTransactionName();
1:97c9f45:                             TransactionSynchronizationManager.setCurrentTransactionName(null);
1:97c9f45:                             boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();
1:97c9f45:                             TransactionSynchronizationManager.setCurrentTransactionReadOnly(false);
1:97c9f45:                             TransactionSynchronizationManager.setActualTransactionActive(false);
1:97c9f45:                             SuspendedResourcesHolder holder = new SuspendedResourcesHolder(null, suspendedSynchronizations, name, readOnly);
1:97c9f45:                             suspendedResources.put(transaction, holder);
1:97c9f45:                         }
1:97c9f45:                     }
1:97c9f45:                 } catch (SystemException e) {
1:97c9f45:                     return;
1:97c9f45:                 }
1:97c9f45:             }
1:97c9f45:         });
1:97c9f45:     }
1:97c9f45: 
1:97c9f45:     /**
1:97c9f45:      * Holder for suspended resources.
1:97c9f45:      * Used internally by <code>suspend</code> and <code>resume</code>.
1:97c9f45:      */
1:97c9f45:     private static class SuspendedResourcesHolder {
1:97c9f45: 
1:97c9f45:         private final Object suspendedResources;
1:97c9f45: 
1:97c9f45:         private final List<?> suspendedSynchronizations;
1:97c9f45: 
1:97c9f45:         private final String name;
1:97c9f45: 
1:97c9f45:         private final boolean readOnly;
1:97c9f45: 
1:97c9f45:         public SuspendedResourcesHolder(
1:97c9f45:                 Object suspendedResources, List<?> suspendedSynchronizations, String name, boolean readOnly) {
1:97c9f45: 
1:97c9f45:             this.suspendedResources = suspendedResources;
1:97c9f45:             this.suspendedSynchronizations = suspendedSynchronizations;
1:97c9f45:             this.name = name;
1:97c9f45:             this.readOnly = readOnly;
1:97c9f45:         }
1:97c9f45: 
1:60e8f74:         @SuppressWarnings("unused")
1:97c9f45:         public Object getSuspendedResources() {
1:97c9f45:             return suspendedResources;
1:97c9f45:         }
1:97c9f45: 
1:97c9f45:         public List<?> getSuspendedSynchronizations() {
1:97c9f45:             return suspendedSynchronizations;
1:97c9f45:         }
1:97c9f45: 
1:97c9f45:         public String getName() {
1:97c9f45:             return name;
1:97c9f45:         }
1:97c9f45: 
1:97c9f45:         public boolean isReadOnly() {
1:97c9f45:             return readOnly;
1:97c9f45:         }
1:97c9f45:     }
1:97c9f45: 
1:97c9f45: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:60e8f74
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         @SuppressWarnings("unused")
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:6d5ae4f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.transaction.internal;
/////////////////////////////////////////////////////////////////////////
1: public class AriesPlatformTransactionManager extends AriesTransactionManagerImpl implements PlatformTransactionManager {
1:     public AriesPlatformTransactionManager() throws XAException {
1:     public AriesPlatformTransactionManager(int defaultTransactionTimeoutSeconds) throws XAException {
1:     public AriesPlatformTransactionManager(int defaultTransactionTimeoutSeconds, TransactionLog transactionLog) throws XAException {
1:     public AriesPlatformTransactionManager(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog) throws XAException {
commit:3fbf745
commit:b33bc22
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.transaction;
commit:97c9f45
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.servicemix.transaction;
1: 
1: import java.util.Map;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import javax.transaction.Transaction;
1: import javax.transaction.Status;
1: import javax.transaction.SystemException;
1: import javax.transaction.xa.XAException;
1: 
0: import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
1: import org.apache.geronimo.transaction.manager.TransactionLog;
1: import org.apache.geronimo.transaction.manager.XidFactory;
1: import org.apache.geronimo.transaction.manager.TransactionManagerMonitor;
1: import org.springframework.transaction.PlatformTransactionManager;
1: import org.springframework.transaction.TransactionStatus;
1: import org.springframework.transaction.TransactionDefinition;
1: import org.springframework.transaction.TransactionException;
1: import org.springframework.transaction.support.TransactionSynchronizationManager;
1: import org.springframework.transaction.support.TransactionSynchronization;
1: import org.springframework.transaction.jta.JtaTransactionManager;
1: 
1: /**
1:  */
0: public class GeronimoPlatformTransactionManager extends GeronimoTransactionManager implements PlatformTransactionManager {
1: 
1:     private final PlatformTransactionManager platformTransactionManager;
1:     private final Map<Transaction, SuspendedResourcesHolder> suspendedResources = new ConcurrentHashMap<Transaction, SuspendedResourcesHolder>();
1: 
0:     public GeronimoPlatformTransactionManager() throws XAException {
1:         platformTransactionManager = new JtaTransactionManager(this, this);
1:         registerTransactionAssociationListener();
1:     }
1: 
0:     public GeronimoPlatformTransactionManager(int defaultTransactionTimeoutSeconds) throws XAException {
1:         super(defaultTransactionTimeoutSeconds);
1:         platformTransactionManager = new JtaTransactionManager(this, this);
1:         registerTransactionAssociationListener();
1:     }
1: 
0:     public GeronimoPlatformTransactionManager(int defaultTransactionTimeoutSeconds, TransactionLog transactionLog) throws XAException {
1:         super(defaultTransactionTimeoutSeconds, transactionLog);
1:         platformTransactionManager = new JtaTransactionManager(this, this);
1:         registerTransactionAssociationListener();
1:     }
1: 
0:     public GeronimoPlatformTransactionManager(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog) throws XAException {
1:         super(defaultTransactionTimeoutSeconds, xidFactory, transactionLog);
1:         platformTransactionManager = new JtaTransactionManager(this, this);
1:         registerTransactionAssociationListener();
1:     }
1: 
1:     public TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException {
1:         return platformTransactionManager.getTransaction(definition);
1:     }
1: 
1:     public void commit(TransactionStatus status) throws TransactionException {
1:         platformTransactionManager.commit(status);
1:     }
1: 
1:     public void rollback(TransactionStatus status) throws TransactionException {
1:         platformTransactionManager.rollback(status);
1:     }
1: 
1:     protected void registerTransactionAssociationListener() {
1:         addTransactionAssociationListener(new TransactionManagerMonitor() {
1:             public void threadAssociated(Transaction transaction) {
1:                 try {
1:                     if (transaction.getStatus() == Status.STATUS_ACTIVE) {
1:                         SuspendedResourcesHolder holder = suspendedResources.remove(transaction);
1:                         if (holder != null && holder.getSuspendedSynchronizations() != null) {
1:                             TransactionSynchronizationManager.setActualTransactionActive(true);
1:                             TransactionSynchronizationManager.setCurrentTransactionReadOnly(holder.isReadOnly());
1:                             TransactionSynchronizationManager.setCurrentTransactionName(holder.getName());
1:                             TransactionSynchronizationManager.initSynchronization();
1:                             for (Iterator<?> it = holder.getSuspendedSynchronizations().iterator(); it.hasNext();) {
1:                                 TransactionSynchronization synchronization = (TransactionSynchronization) it.next();
1:                                 synchronization.resume();
1:                                 TransactionSynchronizationManager.registerSynchronization(synchronization);
1:                             }
1:                         }
1:                     }
1:                 } catch (SystemException e) {
1:                     return;
1:                 }
1:             }
1:             public void threadUnassociated(Transaction transaction) {
1:                 try {
1:                     if (transaction.getStatus() == Status.STATUS_ACTIVE) {
1:                         if (TransactionSynchronizationManager.isSynchronizationActive()) {
1:                             List<?> suspendedSynchronizations = TransactionSynchronizationManager.getSynchronizations();
1:                             for (Iterator<?> it = suspendedSynchronizations.iterator(); it.hasNext();) {
1:                                 ((TransactionSynchronization) it.next()).suspend();
1:                             }
1:                             TransactionSynchronizationManager.clearSynchronization();
1:                             String name = TransactionSynchronizationManager.getCurrentTransactionName();
1:                             TransactionSynchronizationManager.setCurrentTransactionName(null);
1:                             boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();
1:                             TransactionSynchronizationManager.setCurrentTransactionReadOnly(false);
1:                             TransactionSynchronizationManager.setActualTransactionActive(false);
1:                             SuspendedResourcesHolder holder = new SuspendedResourcesHolder(null, suspendedSynchronizations, name, readOnly);
1:                             suspendedResources.put(transaction, holder);
1:                         }
1:                     }
1:                 } catch (SystemException e) {
1:                     return;
1:                 }
1:             }
1:         });
1:     }
1: 
1:     /**
1:      * Holder for suspended resources.
1:      * Used internally by <code>suspend</code> and <code>resume</code>.
1:      */
1:     private static class SuspendedResourcesHolder {
1: 
1:         private final Object suspendedResources;
1: 
1:         private final List<?> suspendedSynchronizations;
1: 
1:         private final String name;
1: 
1:         private final boolean readOnly;
1: 
1:         public SuspendedResourcesHolder(
1:                 Object suspendedResources, List<?> suspendedSynchronizations, String name, boolean readOnly) {
1: 
1:             this.suspendedResources = suspendedResources;
1:             this.suspendedSynchronizations = suspendedSynchronizations;
1:             this.name = name;
1:             this.readOnly = readOnly;
1:         }
1: 
1:         public Object getSuspendedResources() {
1:             return suspendedResources;
1:         }
1: 
1:         public List<?> getSuspendedSynchronizations() {
1:             return suspendedSynchronizations;
1:         }
1: 
1:         public String getName() {
1:             return name;
1:         }
1: 
1:         public boolean isReadOnly() {
1:             return readOnly;
1:         }
1:     }
1: 
1: }
============================================================================