1:a14f2fd: /*
1:a14f2fd:  * Licensed under the Apache License, Version 2.0 (the "License");
1:a14f2fd:  * you may not use this file except in compliance with the License.
1:a14f2fd:  * You may obtain a copy of the License at
1:a14f2fd:  *
1:a14f2fd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a14f2fd:  *
1:a14f2fd:  * Unless required by applicable law or agreed to in writing, software
1:a14f2fd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a14f2fd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a14f2fd:  * See the License for the specific language governing permissions and
1:a14f2fd:  * limitations under the License.
1:a14f2fd:  */
1:67ef08f: package org.apache.aries.subsystem.core.internal;
1:1c9c28b: 
1:71fe81a: import org.osgi.resource.Capability;
1:1c9c28b: 
1:1c9c28b: public abstract class AbstractCapability implements Capability {
1:1c9c28b: 	@Override
1:1c9c28b: 	public boolean equals(Object o) {
1:1c9c28b: 		if (o == this)
1:1c9c28b: 			return true;
1:1c9c28b: 		if (!(o instanceof Capability))
1:1c9c28b: 			return false;
1:1c9c28b: 		Capability c = (Capability)o;
1:1c9c28b: 		return c.getNamespace().equals(getNamespace())
1:1c9c28b: 				&& c.getAttributes().equals(getAttributes())
1:1c9c28b: 				&& c.getDirectives().equals(getDirectives())
1:1c9c28b: 				&& c.getResource().equals(getResource());
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	@Override
1:1c9c28b: 	public int hashCode() {
1:1c9c28b: 		int result = 17;
1:1c9c28b: 		result = 31 * result + getNamespace().hashCode();
1:1c9c28b: 		result = 31 * result + getAttributes().hashCode();
1:1c9c28b: 		result = 31 * result + getDirectives().hashCode();
1:1c9c28b: 		result = 31 * result + getResource().hashCode();
1:1c9c28b: 		return result;
1:1c9c28b: 	}
1:1c9c28b: 	
1:1c9c28b: 	@Override
1:1c9c28b: 	public String toString() {
1:d85d71e: 		return new StringBuilder().append("[Capability: ")
1:1c9c28b: 				.append("namespace=").append(getNamespace())
1:1c9c28b: 				.append(", attributes=").append(getAttributes())
1:1c9c28b: 				.append(", directives=").append(getDirectives())
1:1c9c28b: 				.append(", resource=").append(getResource()).append(']')
1:1c9c28b: 				.toString();
1:1c9c28b: 	}
1:1c9c28b: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:d85d71e
/////////////////////////////////////////////////////////////////////////
1: 		return new StringBuilder().append("[Capability: ")
commit:a14f2fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:67ef08f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
commit:71fe81a
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.resource.Capability;
commit:1c9c28b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.subsystem.core.resource;
1: 
0: import org.osgi.framework.resource.Capability;
1: 
1: public abstract class AbstractCapability implements Capability {
1: 	@Override
1: 	public boolean equals(Object o) {
1: 		if (o == this)
1: 			return true;
1: 		if (!(o instanceof Capability))
1: 			return false;
1: 		Capability c = (Capability)o;
1: 		return c.getNamespace().equals(getNamespace())
1: 				&& c.getAttributes().equals(getAttributes())
1: 				&& c.getDirectives().equals(getDirectives())
1: 				&& c.getResource().equals(getResource());
1: 	}
1: 	
1: 	@Override
1: 	public int hashCode() {
1: 		int result = 17;
1: 		result = 31 * result + getNamespace().hashCode();
1: 		result = 31 * result + getAttributes().hashCode();
1: 		result = 31 * result + getDirectives().hashCode();
1: 		result = 31 * result + getResource().hashCode();
1: 		return result;
1: 	}
1: 	
1: 	@Override
1: 	public String toString() {
0: 		return new StringBuffer().append("[Capability: ")
1: 				.append("namespace=").append(getNamespace())
1: 				.append(", attributes=").append(getAttributes())
1: 				.append(", directives=").append(getDirectives())
1: 				.append(", resource=").append(getResource()).append(']')
1: 				.toString();
1: 	}
1: }
============================================================================