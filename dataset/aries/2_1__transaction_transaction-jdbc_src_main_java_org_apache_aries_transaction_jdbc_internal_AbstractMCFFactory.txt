1:ca23c31: /*
1:ca23c31:  * Licensed to the Apache Software Foundation (ASF) under one
1:ca23c31:  * or more contributor license agreements.  See the NOTICE file
1:ca23c31:  * distributed with this work for additional information
1:ca23c31:  * regarding copyright ownership.  The ASF licenses this file
1:ca23c31:  * to you under the Apache License, Version 2.0 (the
1:ca23c31:  * "License"); you may not use this file except in compliance
1:ca23c31:  * with the License.  You may obtain a copy of the License at
1:ca23c31:  *
1:ca23c31:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ca23c31:  *
1:ca23c31:  * Unless required by applicable law or agreed to in writing,
1:ca23c31:  * software distributed under the License is distributed on an
1:ca23c31:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ca23c31:  * KIND, either express or implied.  See the License for the
1:ca23c31:  * specific language governing permissions and limitations
1:ca23c31:  * under the License.
1:ca23c31:  */
1:ca23c31: package org.apache.aries.transaction.jdbc.internal;
1:ca23c31: 
1:ca23c31: import java.util.ArrayList;
1:ca23c31: import java.util.List;
1:ca23c31: 
1:ca23c31: import javax.resource.spi.ManagedConnectionFactory;
1:ca23c31: import javax.sql.CommonDataSource;
1:ca23c31: 
1:ca23c31: import org.tranql.connector.AllExceptionsAreFatalSorter;
1:ca23c31: import org.tranql.connector.ExceptionSorter;
1:ca23c31: import org.tranql.connector.NoExceptionsAreFatalSorter;
1:ca23c31: import org.tranql.connector.jdbc.ConfigurableSQLStateExceptionSorter;
1:ca23c31: import org.tranql.connector.jdbc.KnownSQLStateExceptionSorter;
1:ca23c31: 
1:ca23c31: public abstract class AbstractMCFFactory {
1:ca23c31: 
1:ca23c31:     private CommonDataSource dataSource;
1:ca23c31:     private ExceptionSorter exceptionSorter = new AllExceptionsAreFatalSorter();
1:ca23c31:     private String userName;
1:ca23c31:     private String password;
1:ca23c31: 
1:ca23c31:     ManagedConnectionFactory connectionFactory;
1:ca23c31: 
1:ca23c31:     public ManagedConnectionFactory getConnectionFactory() {
1:ca23c31:         return connectionFactory;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public abstract void init() throws Exception;
1:ca23c31: 
1:ca23c31:     public void setExceptionSorterAsString(String sorter) {
1:ca23c31:         if ("all".equalsIgnoreCase(sorter)) {
1:ca23c31:             this.exceptionSorter = new AllExceptionsAreFatalSorter();
1:ca23c31:         } else if ("none".equalsIgnoreCase(sorter)) {
1:ca23c31:             this.exceptionSorter = new NoExceptionsAreFatalSorter();
1:ca23c31:         } else if ("known".equalsIgnoreCase(sorter)) {
1:ca23c31:             this.exceptionSorter = new KnownSQLStateExceptionSorter();
1:ca23c31:         } else if (sorter.toLowerCase().startsWith("custom(") && sorter.endsWith(")")) {
1:ca23c31:             List<String> states = new ArrayList<String>();
1:ca23c31:             for (String s : sorter.substring(7, sorter.length() - 2).split(",")) {
1:ca23c31:                 if (s != null && s.length() > 0) {
1:ca23c31:                     states.add(s);
1:ca23c31:                 }
1:ca23c31:             }
1:ca23c31:             this.exceptionSorter = new ConfigurableSQLStateExceptionSorter(states);
1:ca23c31:         } else {
1:ca23c31:             throw new IllegalArgumentException("Unknown exceptionSorter " + sorter);
1:ca23c31:         }
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public CommonDataSource getDataSource() {
1:ca23c31:         return dataSource;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public void setDataSource(CommonDataSource dataSource) {
1:ca23c31:         this.dataSource = dataSource;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public ExceptionSorter getExceptionSorter() {
1:ca23c31:         return exceptionSorter;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public void setExceptionSorter(ExceptionSorter exceptionSorter) {
1:ca23c31:         this.exceptionSorter = exceptionSorter;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public String getUserName() {
1:ca23c31:         return userName;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public void setUserName(String userName) {
1:ca23c31:         this.userName = userName;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public String getPassword() {
1:ca23c31:         return password;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31:     public void setPassword(String password) {
1:ca23c31:         this.password = password;
1:ca23c31:     }
1:ca23c31: 
1:ca23c31: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:8047ebe
/////////////////////////////////////////////////////////////////////////
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:ca23c31
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.jdbc.internal;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.resource.spi.ManagedConnectionFactory;
1: import javax.sql.CommonDataSource;
0: import javax.sql.XADataSource;
1: 
1: import org.tranql.connector.AllExceptionsAreFatalSorter;
1: import org.tranql.connector.ExceptionSorter;
1: import org.tranql.connector.NoExceptionsAreFatalSorter;
1: import org.tranql.connector.jdbc.ConfigurableSQLStateExceptionSorter;
1: import org.tranql.connector.jdbc.KnownSQLStateExceptionSorter;
1: 
1: public abstract class AbstractMCFFactory {
1: 
1:     private CommonDataSource dataSource;
1:     private ExceptionSorter exceptionSorter = new AllExceptionsAreFatalSorter();
1:     private String userName;
1:     private String password;
1: 
1:     ManagedConnectionFactory connectionFactory;
1: 
1:     public ManagedConnectionFactory getConnectionFactory() {
1:         return connectionFactory;
1:     }
1: 
1:     public abstract void init() throws Exception;
1: 
1:     public void setExceptionSorterAsString(String sorter) {
1:         if ("all".equalsIgnoreCase(sorter)) {
1:             this.exceptionSorter = new AllExceptionsAreFatalSorter();
1:         } else if ("none".equalsIgnoreCase(sorter)) {
1:             this.exceptionSorter = new NoExceptionsAreFatalSorter();
1:         } else if ("known".equalsIgnoreCase(sorter)) {
1:             this.exceptionSorter = new KnownSQLStateExceptionSorter();
1:         } else if (sorter.toLowerCase().startsWith("custom(") && sorter.endsWith(")")) {
1:             List<String> states = new ArrayList<String>();
1:             for (String s : sorter.substring(7, sorter.length() - 2).split(",")) {
1:                 if (s != null && s.length() > 0) {
1:                     states.add(s);
1:                 }
1:             }
1:             this.exceptionSorter = new ConfigurableSQLStateExceptionSorter(states);
1:         } else {
1:             throw new IllegalArgumentException("Unknown exceptionSorter " + sorter);
1:         }
1:     }
1: 
1:     public CommonDataSource getDataSource() {
1:         return dataSource;
1:     }
1: 
1:     public void setDataSource(CommonDataSource dataSource) {
1:         this.dataSource = dataSource;
1:     }
1: 
1:     public ExceptionSorter getExceptionSorter() {
1:         return exceptionSorter;
1:     }
1: 
1:     public void setExceptionSorter(ExceptionSorter exceptionSorter) {
1:         this.exceptionSorter = exceptionSorter;
1:     }
1: 
1:     public String getUserName() {
1:         return userName;
1:     }
1: 
1:     public void setUserName(String userName) {
1:         this.userName = userName;
1:     }
1: 
1:     public String getPassword() {
1:         return password;
1:     }
1: 
1:     public void setPassword(String password) {
1:         this.password = password;
1:     }
1: 
1: }
============================================================================