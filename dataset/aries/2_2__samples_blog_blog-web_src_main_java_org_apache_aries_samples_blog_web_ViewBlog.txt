1:430e8f5: /**
1:430e8f5:  * Licensed to the Apache Software Foundation (ASF) under one
1:430e8f5:  * or more contributor license agreements.  See the NOTICE file
1:430e8f5:  * distributed with this work for additional information
1:430e8f5:  * regarding copyright ownership.  The ASF licenses this file
1:430e8f5:  * to you under the Apache License, Version 2.0 (the
1:430e8f5:  * "License"); you may not use this file except in compliance
1:430e8f5:  * with the License.  You may obtain a copy of the License at
1:430e8f5:  *
1:430e8f5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:430e8f5:  *
1:430e8f5:  * Unless required by applicable law or agreed to in writing,
1:430e8f5:  * software distributed under the License is distributed on an
1:430e8f5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:430e8f5:  * KIND, either express or implied.  See the License for the
1:430e8f5:  * specific language governing permissions and limitations
1:430e8f5:  * under the License.
1:430e8f5:  */
1:430e8f5: package org.apache.aries.samples.blog.web;
1:430e8f5: 
1:430e8f5: import java.io.IOException;
1:430e8f5: import java.io.PrintWriter;
1:430e8f5: import java.text.DateFormat;
1:430e8f5: import java.util.Calendar;
1:430e8f5: import java.util.Date;
1:430e8f5: import java.util.Iterator;
1:4173b7f: import java.util.List;
1:430e8f5: 
1:430e8f5: import javax.servlet.ServletException;
1:430e8f5: import javax.servlet.http.HttpServlet;
1:430e8f5: import javax.servlet.http.HttpServletRequest;
1:430e8f5: import javax.servlet.http.HttpServletResponse;
1:430e8f5: 
1:4173b7f: import org.apache.aries.samples.blog.api.BlogComment;
1:4173b7f: import org.apache.aries.samples.blog.api.BlogEntry;
1:430e8f5: import org.apache.aries.samples.blog.api.BloggingService;
1:430e8f5: import org.apache.aries.samples.blog.web.util.HTMLOutput;
1:4173b7f: import org.apache.aries.samples.blog.web.util.JNDIHelper;
1:430e8f5: 
1:430e8f5: 
1:430e8f5: 
1:430e8f5: public class ViewBlog extends HttpServlet
1:430e8f5: {
1:430e8f5:   private static final long serialVersionUID = -1854915218416871420L;
1:430e8f5:   private static final int POSTS_PER_PAGE = 10;
1:430e8f5:   
1:430e8f5:   @Override
1:430e8f5:   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
1:430e8f5:       IOException
1:430e8f5:   {
1:430e8f5:     PrintWriter out = resp.getWriter();
1:430e8f5: 
1:4173b7f:     BloggingService service = JNDIHelper.getBloggingService();
1:430e8f5:     
1:4173b7f:     String blogTitle = service.getBlogTitle();
1:430e8f5: 
1:430e8f5:     // TODO cope with the service being null, redirect elsewhere.
1:430e8f5: 
1:4173b7f:     HTMLOutput.writeHTMLHeaderPartOne(out, blogTitle);
1:430e8f5:     HTMLOutput.writeDojoUses(out, "dojo.parser");
1:430e8f5:     
1:430e8f5:     
1:430e8f5: 
1:430e8f5: 		HTMLOutput.writeHTMLHeaderPartTwo(out);
1:430e8f5: 
1:4173b7f:     int maxPage = (service.getNoOfEntries()-1) / POSTS_PER_PAGE;
1:430e8f5:     int pageNoInt = 0;
1:430e8f5:     
1:430e8f5:     String pageNo = req.getParameter("page");
1:430e8f5:     if (pageNo != null) {
1:430e8f5:       try {
1:430e8f5:         pageNoInt = Integer.parseInt(pageNo)-1;
1:430e8f5: 
1:430e8f5:         if (pageNoInt > maxPage)
1:430e8f5:           pageNoInt = maxPage;
1:430e8f5:         else if (pageNoInt < 0)
1:430e8f5:           pageNoInt = 0;
1:430e8f5:         
1:430e8f5:       } catch (NumberFormatException e) {
1:430e8f5:         e.printStackTrace();
1:430e8f5:       }
1:430e8f5:     }
1:430e8f5:   
1:4173b7f:     Iterator<? extends BlogEntry> posts = service.getBlogEntries(pageNoInt * POSTS_PER_PAGE, POSTS_PER_PAGE).iterator();
1:430e8f5:     
1:4173b7f:     out.println("<div class=\"links\"><a href=\"CreateBlogEntryForm\">Create New Post</a> <a href=\"EditAuthorForm\">Create Author</a></div>");
1:430e8f5:     
1:430e8f5:     Date currentDate = null;
1:430e8f5: 
1:430e8f5:     for (int i = 0; posts.hasNext(); i++) {
1:4173b7f:       BlogEntry post = posts.next();
1:430e8f5:       
1:430e8f5:       if (doesNotMatch(post.getPublishDate(), currentDate)) {
1:430e8f5:         currentDate = post.getPublishDate();
1:430e8f5:         out.print("<div class=\"postDate\">");
1:430e8f5:         //out.print(DateFormat.getDateInstance(DateFormat.FULL).format(currentDate));
1:430e8f5:         if (currentDate != null) {
1:430e8f5:         	 out.print(DateFormat.getDateInstance(DateFormat.FULL).format(currentDate));          
1:430e8f5:         }
1:430e8f5: 
1:430e8f5:         out.println("</div>");
1:430e8f5:       }
1:430e8f5:       
1:430e8f5:       out.print("\t\t<div class=\"post\" id=\"");
1:430e8f5:       out.print(i);
1:430e8f5:       out.println("\">");
1:430e8f5: 
1:430e8f5:       out.print("\t\t\t<div class=\"postTitle\">");
1:430e8f5:       out.print(post.getTitle());
1:430e8f5:       out.print("</div>");
1:430e8f5:       out.print("\t\t\t<div class=\"postBody\">");
1:430e8f5:       out.print(post.getBody());
1:430e8f5:       out.println("</div>");
1:430e8f5:       out.print("\t\t\t<div class=\"postAuthor\"><a href=\"ViewAuthor?email=");
1:430e8f5:       out.print(post.getAuthorEmail());
1:430e8f5:       out.print("\">");
1:4173b7f:       out.print(post.getAuthor().getFullName());
1:430e8f5:       out.println("</a></div>");
1:430e8f5:       
1:4173b7f:       if (service.isCommentingAvailable()) {
1:4173b7f: 
1:4173b7f: 			out.print("<div class=\"links\"><a href=\"AddCommentForm?postId=");
1:4173b7f: 			out.print(post.getId());
1:4173b7f: 			out.print("\">Add Comment</a></div>");
1:4173b7f: 
1:4173b7f: 			List<? extends BlogComment> comments = service
1:4173b7f: 					.getCommentsForEntry(post);
1:4173b7f: 			int size = comments.size();
1:4173b7f: 			out.print("<div class=\"commentTitle\"");
1:4173b7f: 			if (size > 0) {
1:4173b7f: 				out.print("onclick=\"expand(");
1:4173b7f: 				out.print(post.getId());
1:4173b7f: 				out.print(")\"");
1:4173b7f: 			}
1:4173b7f: 			out.print(" style=\"cursor: pointer;\">Comments (");
1:4173b7f: 			out.print(size);
1:4173b7f: 			out.println(")</div>");
1:4173b7f: 
1:4173b7f: 			if (size > 0) {
1:4173b7f: 
1:4173b7f: 				out.print("<div id=\"comments");
1:4173b7f: 				out.print(post.getId());
1:4173b7f: 				out.println("\">");
1:4173b7f: 
1:4173b7f: 				for (BlogComment comment : comments) {
1:4173b7f: 					out.println("<div class=\"comment\">");
1:4173b7f: 
1:4173b7f: 					out.println(comment.getComment());
1:4173b7f: 
1:4173b7f: 					out.println("</div>");
1:4173b7f: 					out
1:4173b7f: 							.print("\t\t\t<div class=\"commentAuthor\"><a href=\"ViewAuthor?email=");
1:4173b7f: 					out.print(comment.getAuthor().getEmailAddress());
1:4173b7f: 					out.print("\">");
1:4173b7f: 					out.print(
1:4173b7f: 						comment.getAuthor().getName());
1:4173b7f: 					out.println("</a></div>");
1:4173b7f: 				}
1:4173b7f: 
1:4173b7f: 				out.println("</div>");
1:4173b7f: 			}
1:4173b7f: 		}
1:4173b7f: 
1:430e8f5:      
1:430e8f5:       out.println("\t\t</div>");
1:430e8f5:     }
1:430e8f5:     
1:430e8f5:     /*
1:430e8f5:      * Translate indices from 0-indexed to 1-indexed
1:430e8f5:      */
1:430e8f5:     writePager(out, pageNoInt+1, maxPage+1);
1:430e8f5: 
1:430e8f5:     HTMLOutput.writeHTMLFooter(out);
1:430e8f5:   }
1:430e8f5:   
1:430e8f5:   /**
1:430e8f5:    * Write a paging bar (if there is more than a single page)
1:430e8f5:    * 
1:430e8f5:    * @param out
1:430e8f5:    * @param currentPage Page number (indices starting from 1)
1:430e8f5:    * @param maxPage (indices starting from 1)
1:430e8f5:    */
1:430e8f5:   private void writePager(PrintWriter out, int currentPage, int maxPage)
1:430e8f5:   {
1:430e8f5:     /*
1:430e8f5:      * No paging is needed if we only have a single page
1:430e8f5:      */
1:430e8f5:     if (maxPage > 1) {
1:430e8f5:       out.println("<div id=\"pagination\">");
1:430e8f5:       
1:430e8f5:       if (currentPage > 1) {
1:430e8f5:         out.println("<a href=\"ViewBlog?page=1\">&lt;&lt;</a>");
1:430e8f5:         out.println("<a href=\"ViewBlog?page="+(currentPage-1)+"\">&lt;</a>");
1:430e8f5:       } else {
1:430e8f5:         out.println("<span>&lt;&lt;</span>");
1:430e8f5:         out.println("<span>&lt;</span>");
1:430e8f5:       }
1:430e8f5:       
1:430e8f5:       out.println(currentPage + " of " + maxPage);
1:430e8f5:   
1:430e8f5:       if (currentPage < maxPage) {
1:430e8f5:         out.println("<a href=\"ViewBlog?page="+(currentPage+1)+"\">&gt;</a>");
1:430e8f5:         out.println("<a href=\"ViewBlog?page=" + maxPage + "\">&gt;&gt;</a>");
1:430e8f5:       } else {
1:430e8f5:         out.println("<span>&gt;&gt;</span>");
1:430e8f5:         out.println("<span>&gt;</span>");        
1:430e8f5:       }
1:430e8f5:       
1:430e8f5:       out.println("</div>");
1:430e8f5:     }
1:430e8f5:   }
1:430e8f5: 
1:430e8f5:   private boolean doesNotMatch(Date publishDate, Date currentDate)
1:430e8f5:   {
1:430e8f5:     if (currentDate == null) return true;
1:430e8f5:     Calendar publish = Calendar.getInstance();
1:430e8f5:     Calendar current = Calendar.getInstance();
1:430e8f5:     publish.setTime(publishDate);
1:430e8f5:     current.setTime(currentDate);
1:430e8f5:     boolean differentYear = publish.get(Calendar.YEAR) != current.get(Calendar.YEAR);
1:430e8f5:     boolean differentMonth = publish.get(Calendar.MONTH) != current.get(Calendar.MONTH);
1:430e8f5:     boolean differentDayOfMonth = publish.get(Calendar.DAY_OF_MONTH) != current.get(Calendar.DAY_OF_MONTH);
1:430e8f5:     return differentYear || differentMonth || differentDayOfMonth;
1:430e8f5:   }
1:430e8f5: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:afa98ec
commit:14fd487
commit:4173b7f
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import org.apache.aries.samples.blog.api.BlogComment;
1: import org.apache.aries.samples.blog.api.BlogEntry;
1: import org.apache.aries.samples.blog.web.util.JNDIHelper;
/////////////////////////////////////////////////////////////////////////
1:     BloggingService service = JNDIHelper.getBloggingService();
1:     String blogTitle = service.getBlogTitle();
1:     HTMLOutput.writeHTMLHeaderPartOne(out, blogTitle);
1:     int maxPage = (service.getNoOfEntries()-1) / POSTS_PER_PAGE;
/////////////////////////////////////////////////////////////////////////
1:     Iterator<? extends BlogEntry> posts = service.getBlogEntries(pageNoInt * POSTS_PER_PAGE, POSTS_PER_PAGE).iterator();
1:     out.println("<div class=\"links\"><a href=\"CreateBlogEntryForm\">Create New Post</a> <a href=\"EditAuthorForm\">Create Author</a></div>");
1:       BlogEntry post = posts.next();
/////////////////////////////////////////////////////////////////////////
1:       out.print(post.getAuthor().getFullName());
1:       if (service.isCommentingAvailable()) {
1: 
1: 			out.print("<div class=\"links\"><a href=\"AddCommentForm?postId=");
1: 			out.print(post.getId());
1: 			out.print("\">Add Comment</a></div>");
1: 
1: 			List<? extends BlogComment> comments = service
1: 					.getCommentsForEntry(post);
1: 			int size = comments.size();
1: 			out.print("<div class=\"commentTitle\"");
1: 			if (size > 0) {
1: 				out.print("onclick=\"expand(");
1: 				out.print(post.getId());
1: 				out.print(")\"");
1: 			}
1: 			out.print(" style=\"cursor: pointer;\">Comments (");
1: 			out.print(size);
1: 			out.println(")</div>");
1: 
1: 			if (size > 0) {
1: 
1: 				out.print("<div id=\"comments");
1: 				out.print(post.getId());
1: 				out.println("\">");
1: 
1: 				for (BlogComment comment : comments) {
1: 					out.println("<div class=\"comment\">");
1: 
1: 					out.println(comment.getComment());
1: 
1: 					out.println("</div>");
1: 					out
1: 							.print("\t\t\t<div class=\"commentAuthor\"><a href=\"ViewAuthor?email=");
1: 					out.print(comment.getAuthor().getEmailAddress());
1: 					out.print("\">");
1: 					out.print(
1: 						comment.getAuthor().getName());
1: 					out.println("</a></div>");
1: 				}
1: 
1: 				out.println("</div>");
1: 			}
1: 		}
1: 
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:430e8f5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.blog.web;
1: 
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.text.DateFormat;
1: import java.util.Calendar;
1: import java.util.Date;
1: import java.util.Iterator;
1: 
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
0: import org.apache.aries.samples.blog.api.Blog;
0: import org.apache.aries.samples.blog.api.BlogPost;
1: import org.apache.aries.samples.blog.api.BloggingService;
1: import org.apache.aries.samples.blog.web.util.HTMLOutput;
1: 
1: 
1: 
1: public class ViewBlog extends HttpServlet
1: {
1:   private static final long serialVersionUID = -1854915218416871420L;
1:   private static final int POSTS_PER_PAGE = 10;
1:   
1:   @Override
1:   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
1:       IOException
1:   {
1:     PrintWriter out = resp.getWriter();
1: 
0:     BloggingService service = HTMLOutput.getBloggingService();
1:     
0:     Blog blog = service.getBlog();
1: 
1:     // TODO cope with the service being null, redirect elsewhere.
1: 
0:     HTMLOutput.writeHTMLHeaderPartOne(out, blog.getBlogTitle());
1:     HTMLOutput.writeDojoUses(out, "dojo.parser");
1:     
1:     
1: 
1: 		HTMLOutput.writeHTMLHeaderPartTwo(out);
1: 
0:     int maxPage = (blog.getNoOfPosts()-1) / POSTS_PER_PAGE;
1:     int pageNoInt = 0;
1:     
1:     String pageNo = req.getParameter("page");
1:     if (pageNo != null) {
1:       try {
1:         pageNoInt = Integer.parseInt(pageNo)-1;
1: 
1:         if (pageNoInt > maxPage)
1:           pageNoInt = maxPage;
1:         else if (pageNoInt < 0)
1:           pageNoInt = 0;
1:         
1:       } catch (NumberFormatException e) {
1:         e.printStackTrace();
1:       }
1:     }
1:   
0:     Iterator<BlogPost> posts = blog.getPosts(pageNoInt * POSTS_PER_PAGE, POSTS_PER_PAGE).iterator();
1:     
0:     out.println("<div class=\"links\"><a href=\"CreateBlogPostForm\">Create New Post</a> <a href=\"EditAuthorForm\">Create Author</a></div>");
1:     
1:     Date currentDate = null;
1: 
1:     for (int i = 0; posts.hasNext(); i++) {
0:       BlogPost post = posts.next();
1:       
1:       if (doesNotMatch(post.getPublishDate(), currentDate)) {
1:         currentDate = post.getPublishDate();
1:         out.print("<div class=\"postDate\">");
1:         //out.print(DateFormat.getDateInstance(DateFormat.FULL).format(currentDate));
1:         if (currentDate != null) {
1:         	 out.print(DateFormat.getDateInstance(DateFormat.FULL).format(currentDate));          
1:         }
1: 
1:         out.println("</div>");
1:       }
1:       
1:       out.print("\t\t<div class=\"post\" id=\"");
1:       out.print(i);
1:       out.println("\">");
1: 
1:       out.print("\t\t\t<div class=\"postTitle\">");
1:       out.print(post.getTitle());
1:       out.print("</div>");
1:       out.print("\t\t\t<div class=\"postBody\">");
1:       out.print(post.getBody());
1:       out.println("</div>");
1:       out.print("\t\t\t<div class=\"postAuthor\"><a href=\"ViewAuthor?email=");
1:       out.print(post.getAuthorEmail());
1:       out.print("\">");
0:       out.print(post.getAuthor());
1:       out.println("</a></div>");
1:       
1:      
1:       out.println("\t\t</div>");
1:     }
1:     
1:     /*
1:      * Translate indices from 0-indexed to 1-indexed
1:      */
1:     writePager(out, pageNoInt+1, maxPage+1);
1: 
1:     HTMLOutput.writeHTMLFooter(out);
1:   }
1:   
1:   /**
1:    * Write a paging bar (if there is more than a single page)
1:    * 
1:    * @param out
1:    * @param currentPage Page number (indices starting from 1)
1:    * @param maxPage (indices starting from 1)
1:    */
1:   private void writePager(PrintWriter out, int currentPage, int maxPage)
1:   {
1:     /*
1:      * No paging is needed if we only have a single page
1:      */
1:     if (maxPage > 1) {
1:       out.println("<div id=\"pagination\">");
1:       
1:       if (currentPage > 1) {
1:         out.println("<a href=\"ViewBlog?page=1\">&lt;&lt;</a>");
1:         out.println("<a href=\"ViewBlog?page="+(currentPage-1)+"\">&lt;</a>");
1:       } else {
1:         out.println("<span>&lt;&lt;</span>");
1:         out.println("<span>&lt;</span>");
1:       }
1:       
1:       out.println(currentPage + " of " + maxPage);
1:   
1:       if (currentPage < maxPage) {
1:         out.println("<a href=\"ViewBlog?page="+(currentPage+1)+"\">&gt;</a>");
1:         out.println("<a href=\"ViewBlog?page=" + maxPage + "\">&gt;&gt;</a>");
1:       } else {
1:         out.println("<span>&gt;&gt;</span>");
1:         out.println("<span>&gt;</span>");        
1:       }
1:       
1:       out.println("</div>");
1:     }
1:   }
1: 
1:   private boolean doesNotMatch(Date publishDate, Date currentDate)
1:   {
1:     if (currentDate == null) return true;
1:     Calendar publish = Calendar.getInstance();
1:     Calendar current = Calendar.getInstance();
1:     publish.setTime(publishDate);
1:     current.setTime(currentDate);
1:     boolean differentYear = publish.get(Calendar.YEAR) != current.get(Calendar.YEAR);
1:     boolean differentMonth = publish.get(Calendar.MONTH) != current.get(Calendar.MONTH);
1:     boolean differentDayOfMonth = publish.get(Calendar.DAY_OF_MONTH) != current.get(Calendar.DAY_OF_MONTH);
1:     return differentYear || differentMonth || differentDayOfMonth;
1:   }
1: }
============================================================================