1:9b1f38a: package org.apache.aries.plugin.esa.stubs;
1:9b1f38a: 
1:9b1f38a: /*
1:9b1f38a:  * Licensed to the Apache Software Foundation (ASF) under one
1:9b1f38a:  * or more contributor license agreements.  See the NOTICE file
1:9b1f38a:  * distributed with this work for additional information
1:9b1f38a:  * regarding copyright ownership.  The ASF licenses this file
1:9b1f38a:  * to you under the Apache License, Version 2.0 (the
1:9b1f38a:  * "License"); you may not use this file except in compliance
1:9b1f38a:  * with the License.  You may obtain a copy of the License at
1:9b1f38a:  *
1:9b1f38a:  *  http://www.apache.org/licenses/LICENSE-2.0
1:9b1f38a:  *
1:9b1f38a:  * Unless required by applicable law or agreed to in writing,
1:9b1f38a:  * software distributed under the License is distributed on an
1:9b1f38a:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9b1f38a:  * KIND, either express or implied.  See the License for the
1:9b1f38a:  * specific language governing permissions and limitations
1:9b1f38a:  * under the License.
1:9b1f38a:  */
1:9b1f38a: 
1:9b1f38a: import java.io.File;
1:9b1f38a: import java.util.ArrayList;
1:9b1f38a: import java.util.Collections;
1:f2a8ed5: import java.util.LinkedHashSet;
1:9b1f38a: import java.util.List;
1:9b1f38a: import java.util.Set;
1:9b1f38a: 
1:9b1f38a: import org.apache.maven.artifact.Artifact;
1:9b1f38a: import org.apache.maven.model.Model;
1:9b1f38a: import org.apache.maven.model.Organization;
1:9b1f38a: import org.apache.maven.project.MavenProject;
1:9b1f38a: import org.codehaus.plexus.PlexusTestCase;
1:9b1f38a: 
1:9b1f38a: /**
1:9b1f38a:  * @author <a href="mailto:aramirez@apache.org">Allan Ramirez</a>
1:9b1f38a:  */
1:9b1f38a: public class EsaMavenProjectStub
1:9b1f38a:     extends MavenProject
1:9b1f38a: {
1:9b1f38a:     private List attachedArtifacts;
1:9b1f38a:     
1:9b1f38a:     public EsaMavenProjectStub()
1:9b1f38a:     {
1:9b1f38a:         super( new Model() );
1:9b1f38a:         
1:9b1f38a:         super.setGroupId( getGroupId() );
1:9b1f38a:         super.setArtifactId( getArtifactId() );
1:9b1f38a:         super.setVersion( getVersion() );
1:9b1f38a:         super.setDescription( "Test description" );
1:9b1f38a: 
1:9b1f38a:         Organization org = new Organization();
1:9b1f38a:         org.setName( "organization" );
1:9b1f38a:         org.setUrl( "http://www.some.org" );
1:9b1f38a:         
1:9b1f38a:         super.setOrganization( org );
1:9b1f38a:         super.setFile( getFile() );
1:9b1f38a:         super.setPluginArtifacts( Collections.EMPTY_SET );
1:9b1f38a:         super.setReportArtifacts( Collections.EMPTY_SET );
1:9b1f38a:         super.setExtensionArtifacts( Collections.EMPTY_SET );
1:9b1f38a:         super.setArtifact( getArtifact() );
1:9b1f38a:         super.setRemoteArtifactRepositories( Collections.EMPTY_LIST );
1:9b1f38a:         super.setPluginArtifactRepositories( Collections.EMPTY_LIST );
1:9b1f38a:         super.setCollectedProjects( Collections.EMPTY_LIST );
1:9b1f38a:         super.setActiveProfiles( Collections.EMPTY_LIST );
1:9b1f38a:         
1:9b1f38a:         super.addCompileSourceRoot( getBasedir() + "/src/test/resources/unit/basic-esa-test/src/main/java" );
1:9b1f38a:         super.addTestCompileSourceRoot( getBasedir() + "/src/test/resources/unit/basic-esa-test/src/test/java" );
1:9b1f38a:         
1:9b1f38a:         super.setExecutionRoot( false );
1:9b1f38a:     }
1:9b1f38a: 
1:9b1f38a:     public String getGroupId()
1:9b1f38a:     {
1:9b1f38a:         return "org.apache.maven.test";
1:9b1f38a:     }
1:9b1f38a:     
1:9b1f38a:     public String getArtifactId()
1:9b1f38a:     {
1:9b1f38a:         return "maven-esa-test";
1:9b1f38a:     }
1:9b1f38a:     
1:9b1f38a:     public String getVersion()
1:9b1f38a:     {
1:9b1f38a:         return "1.0-SNAPSHOT";
1:9b1f38a:     }
1:9b1f38a:     
1:9b1f38a:     public File getFile()
1:9b1f38a:     {
1:9b1f38a:         return new File( getBasedir(), "src/test/resources/unit/basic-esa-test/plugin-config.xml" );
1:9b1f38a:     }
1:9b1f38a:     
1:9b1f38a:     public File getBasedir()
1:9b1f38a:     {
1:9b1f38a:         return new File( PlexusTestCase.getBasedir() );
1:9b1f38a:     }
1:9b1f38a:     
1:9b1f38a:     public Artifact getArtifact()
1:9b1f38a:     {
1:9b1f38a:         Artifact artifact = new EsaArtifactStub();
1:9b1f38a:         
1:9b1f38a:         artifact.setGroupId( getGroupId() );
1:9b1f38a:         
1:9b1f38a:         artifact.setArtifactId( getArtifactId() );
1:9b1f38a:         
1:9b1f38a:         artifact.setVersion( getVersion() );
1:9b1f38a:         
1:9b1f38a:         return artifact;
1:9b1f38a:     }
1:9b1f38a:     
1:9b1f38a:     public Set getArtifacts()
1:9b1f38a:     {   
1:f2a8ed5:         Set artifacts = new LinkedHashSet();
1:9b1f38a:  
1:9b1f38a:         artifacts.add( createArtifact( "org.apache.maven.test", "maven-artifact01", "1.0-SNAPSHOT", false ) );
1:9b1f38a:         artifacts.add( createArtifact( "org.apache.maven.test", "maven-artifact02", "1.0-SNAPSHOT", false ) );
1:9b1f38a:         
1:9b1f38a:         return artifacts;
1:9b1f38a:     }
1:9b1f38a: 
1:9b1f38a:     @Override
1:9b1f38a:     public Set getDependencyArtifacts() {
1:9b1f38a:         return getArtifacts();
1:9b1f38a:     }
1:9b1f38a: 
1:9b1f38a:     public List getAttachedArtifacts()
1:9b1f38a:     {
1:9b1f38a:         if ( attachedArtifacts == null )
1:9b1f38a:         {
1:9b1f38a:             attachedArtifacts = new ArrayList();
1:9b1f38a:         }
1:9b1f38a:         return attachedArtifacts;
1:9b1f38a:     }    
1:9b1f38a:     
1:9b1f38a:     protected Artifact createArtifact( String groupId, String artifactId, String version, boolean optional )
1:9b1f38a:     {
1:f2a8ed5:         return createArtifact(groupId, artifactId, version, "jar", optional);
1:f2a8ed5:     }
1:f2a8ed5:     
1:f2a8ed5:     protected Artifact createArtifact( String groupId, String artifactId, String version, String type, boolean optional )
1:f2a8ed5:     {
1:9b1f38a:         Artifact artifact = new EsaArtifactStub();
1:9b1f38a:         
1:9b1f38a:         artifact.setGroupId( groupId );
1:9b1f38a:         
1:9b1f38a:         artifact.setArtifactId( artifactId );
1:9b1f38a:         
1:9b1f38a:         artifact.setVersion( version );
1:9b1f38a:         
1:9b1f38a:         artifact.setOptional( optional );
1:9b1f38a:         
1:9b1f38a:         artifact.setFile( new File ( getBasedir() + "/src/test/remote-repo/" + artifact.getGroupId().replace( '.', '/' ) + 
1:9b1f38a:                           "/" + artifact.getArtifactId() + "/" + artifact.getVersion() + 
1:f2a8ed5:                           "/" + artifact.getArtifactId() + "-" + artifact.getVersion() + "." + type ) ) ;
1:9b1f38a:         
1:9b1f38a:         return artifact;
1:9b1f38a:     }
1:9b1f38a: }
============================================================================
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:f2a8ed5
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedHashSet;
/////////////////////////////////////////////////////////////////////////
1:         Set artifacts = new LinkedHashSet();
/////////////////////////////////////////////////////////////////////////
1:         return createArtifact(groupId, artifactId, version, "jar", optional);
1:     }
1:     
1:     protected Artifact createArtifact( String groupId, String artifactId, String version, String type, boolean optional )
1:     {
/////////////////////////////////////////////////////////////////////////
1:                           "/" + artifact.getArtifactId() + "-" + artifact.getVersion() + "." + type ) ) ;
author:Graham Charters
-------------------------------------------------------------------------------
commit:9b1f38a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.plugin.esa.stubs;
1: 
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.Collections;
0: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.maven.artifact.Artifact;
1: import org.apache.maven.model.Model;
1: import org.apache.maven.model.Organization;
1: import org.apache.maven.project.MavenProject;
1: import org.codehaus.plexus.PlexusTestCase;
1: 
1: /**
1:  * @author <a href="mailto:aramirez@apache.org">Allan Ramirez</a>
1:  */
1: public class EsaMavenProjectStub
1:     extends MavenProject
1: {
1:     private List attachedArtifacts;
1:     
1:     public EsaMavenProjectStub()
1:     {
1:         super( new Model() );
1:         
1:         super.setGroupId( getGroupId() );
1:         super.setArtifactId( getArtifactId() );
1:         super.setVersion( getVersion() );
1:         super.setDescription( "Test description" );
1: 
1:         Organization org = new Organization();
1:         org.setName( "organization" );
1:         org.setUrl( "http://www.some.org" );
1:         
1:         super.setOrganization( org );
1:         super.setFile( getFile() );
1:         super.setPluginArtifacts( Collections.EMPTY_SET );
1:         super.setReportArtifacts( Collections.EMPTY_SET );
1:         super.setExtensionArtifacts( Collections.EMPTY_SET );
1:         super.setArtifact( getArtifact() );
1:         super.setRemoteArtifactRepositories( Collections.EMPTY_LIST );
1:         super.setPluginArtifactRepositories( Collections.EMPTY_LIST );
1:         super.setCollectedProjects( Collections.EMPTY_LIST );
1:         super.setActiveProfiles( Collections.EMPTY_LIST );
1:         
1:         super.addCompileSourceRoot( getBasedir() + "/src/test/resources/unit/basic-esa-test/src/main/java" );
1:         super.addTestCompileSourceRoot( getBasedir() + "/src/test/resources/unit/basic-esa-test/src/test/java" );
1:         
1:         super.setExecutionRoot( false );
1:     }
1: 
1:     public String getGroupId()
1:     {
1:         return "org.apache.maven.test";
1:     }
1:     
1:     public String getArtifactId()
1:     {
1:         return "maven-esa-test";
1:     }
1:     
1:     public String getVersion()
1:     {
1:         return "1.0-SNAPSHOT";
1:     }
1:     
1:     public File getFile()
1:     {
1:         return new File( getBasedir(), "src/test/resources/unit/basic-esa-test/plugin-config.xml" );
1:     }
1:     
1:     public File getBasedir()
1:     {
1:         return new File( PlexusTestCase.getBasedir() );
1:     }
1:     
1:     public Artifact getArtifact()
1:     {
1:         Artifact artifact = new EsaArtifactStub();
1:         
1:         artifact.setGroupId( getGroupId() );
1:         
1:         artifact.setArtifactId( getArtifactId() );
1:         
1:         artifact.setVersion( getVersion() );
1:         
1:         return artifact;
1:     }
1:     
1:     public Set getArtifacts()
1:     {   
0:         Set artifacts = new HashSet();
1:  
1:         artifacts.add( createArtifact( "org.apache.maven.test", "maven-artifact01", "1.0-SNAPSHOT", false ) );
1:         artifacts.add( createArtifact( "org.apache.maven.test", "maven-artifact02", "1.0-SNAPSHOT", false ) );
1:         
1:         return artifacts;
1:     }
1: 
1:     @Override
1:     public Set getDependencyArtifacts() {
1:         return getArtifacts();
1:     }
1: 
1:     public List getAttachedArtifacts()
1:     {
1:         if ( attachedArtifacts == null )
1:         {
1:             attachedArtifacts = new ArrayList();
1:         }
1:         return attachedArtifacts;
1:     }    
1:     
1:     protected Artifact createArtifact( String groupId, String artifactId, String version, boolean optional )
1:     {
1:         Artifact artifact = new EsaArtifactStub();
1:         
1:         artifact.setGroupId( groupId );
1:         
1:         artifact.setArtifactId( artifactId );
1:         
1:         artifact.setVersion( version );
1:         
1:         artifact.setOptional( optional );
1:         
1:         artifact.setFile( new File ( getBasedir() + "/src/test/remote-repo/" + artifact.getGroupId().replace( '.', '/' ) + 
1:                           "/" + artifact.getArtifactId() + "/" + artifact.getVersion() + 
0:                           "/" + artifact.getArtifactId() + "-" + artifact.getVersion() + ".jar" ) ) ;
1:         
1:         return artifact;
1:     }
1: }
============================================================================