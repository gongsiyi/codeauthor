1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.impl;
1:2cfdf52: 
1:2cfdf52: import java.util.Dictionary;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManagerFactory;
1:2cfdf52: import javax.persistence.spi.PersistenceProvider;
1:2cfdf52: import javax.sql.DataSource;
1:2cfdf52: 
1:2cfdf52: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1:2cfdf52: import org.apache.aries.jpa.container.weaving.impl.DummyDataSource;
1:2cfdf52: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.Filter;
1:2cfdf52: import org.osgi.framework.InvalidSyntaxException;
1:2cfdf52: import org.osgi.framework.ServiceReference;
1:2cfdf52: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:2cfdf52: import org.osgi.util.tracker.ServiceTracker;
1:2cfdf52: import org.slf4j.Logger;
1:2cfdf52: import org.slf4j.LoggerFactory;
1:2cfdf52: 
1:2cfdf52: /**
1:2cfdf52:  * Tracks matching persistence providers for a persistence unit.
1:2cfdf52:  * If a provider is found:
1:2cfdf52:  * - an EntityManagerFactoryBuilder is installed
1:2cfdf52:  * - A DataSourceTracker is installed if the JtaDataSource refers to an OSGi service 
1:2cfdf52:  */
1:2cfdf52: public class PersistenceProviderTracker extends ServiceTracker<PersistenceProvider, StoredPerProvider> {
1:2cfdf52:     private static final String JAVAX_PERSISTENCE_PROVIDER = "javax.persistence.provider";
1:2cfdf52: 
1:2cfdf52:     private static final Logger LOGGER = LoggerFactory.getLogger(PersistenceProviderTracker.class);
1:2cfdf52: 
1:2cfdf52:     private PersistenceUnit punit;
1:2cfdf52: 
1:9fa765d:     public PersistenceProviderTracker(BundleContext containerContext, PersistenceUnit punit) {
1:9fa765d:         super(containerContext, createFilter(containerContext, punit), null);
1:2cfdf52:         this.punit = punit;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private static Filter createFilter(BundleContext context, PersistenceUnit punit) {
1:ec3ea65:         String filter;
1:2cfdf52:         if (punit.getPersistenceProviderClassName() != null) {
1:2cfdf52:             filter = String.format("(&(objectClass=%s)(%s=%s))",
1:2cfdf52:                                    PersistenceProvider.class.getName(),
1:2cfdf52:                                    JAVAX_PERSISTENCE_PROVIDER,
1:2cfdf52:                                    punit.getPersistenceProviderClassName());
1:2cfdf52:         } else {
1:2cfdf52:             filter = String.format("(objectClass=%s)", PersistenceProvider.class.getName());
1:2cfdf52:         }
1:2cfdf52: 
1:2cfdf52:         try {
1:2cfdf52:             return context.createFilter(filter);
1:2cfdf52:         } catch (InvalidSyntaxException e) {
1:2cfdf52:             throw new IllegalArgumentException(e);
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public StoredPerProvider addingService(ServiceReference<PersistenceProvider> reference) {
1:2cfdf52:         String providerName = (String)reference.getProperty(JAVAX_PERSISTENCE_PROVIDER);
1:2cfdf52:         // FIXME should be set when creating the EMF was successful
1:2cfdf52:         if (punit.getPersistenceProviderClassName() == null) {
1:2cfdf52:             punit.setProviderClassName(providerName);
1:2cfdf52:         }
1:2cfdf52:         StoredPerProvider stored = new StoredPerProvider();
1:2cfdf52:         LOGGER.info("Found provider for " + punit.getPersistenceUnitName() + " " + punit.getPersistenceProviderClassName());
1:9fa765d:         
1:d669541:         PersistenceProvider provider = context.getService(reference);
1:2cfdf52: 
1:2cfdf52:         createAndCloseDummyEMF(provider);
1:2cfdf52: 
1:ec3ea65:         stored.dsTracker = createDataSourceTracker(provider);
1:2cfdf52:         EntityManagerFactoryBuilder emfBuilder = new AriesEntityManagerFactoryBuilder(provider, punit);
1:2cfdf52:         Dictionary<String, ?> props = ManagedEMF.createProperties(punit, punit.getBundle());
1:2cfdf52:         stored.reg = context.registerService(EntityManagerFactoryBuilder.class, emfBuilder , props);
1:2cfdf52:         return stored;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     /**
1:2cfdf52:      * Create and close a dummy EMF to give the PersistenceProvider a chance to call
1:2cfdf52:      * punit.addTransformer(). This has to occur as early as possible as weaving needs
1:2cfdf52:      * to be done before the first entity class is loaded. So we can not wait till the
1:2cfdf52:      * real DataSource is found.
1:2cfdf52:      */
1:2cfdf52:     private void createAndCloseDummyEMF(PersistenceProvider provider) {
1:2cfdf52:         DataSource dummyDataSource = new DummyDataSource();
1:2cfdf52:         punit.setJtaDataSource(dummyDataSource);
1:2cfdf52:         punit.setNonJtaDataSource(dummyDataSource);
1:2cfdf52:         try {
1:2cfdf52:             EntityManagerFactory emf = provider.createContainerEntityManagerFactory(punit, null);
1:2cfdf52:             emf.close();
1:2cfdf52:         } catch (Exception e) {
1:545546a:             LOGGER.debug("Error while creating the Dummy EntityManagerFactory to allow weaving.", e);
1:2cfdf52:         }
1:2cfdf52:         punit.setJtaDataSource(null);
1:2cfdf52:         punit.setNonJtaDataSource(null);
1:2cfdf52:     }
1:2cfdf52: 
1:ec3ea65:     private ServiceTracker<?, ?> createDataSourceTracker(PersistenceProvider provider) {
1:2cfdf52:         if (usesDataSource()) {
1:2cfdf52:             if (!usesDataSourceService()) {
1:2cfdf52:                 LOGGER.warn("Persistence unit " + punit.getPersistenceUnitName() + " refers to a non OSGi service DataSource");
1:2cfdf52:                 return null;
1:2cfdf52:             }
1:2cfdf52:             DataSourceTracker dsTracker = new DataSourceTracker(context, provider, punit);
1:2cfdf52:             dsTracker.open();
1:2cfdf52:             return dsTracker;
1:2cfdf52:         } else if (usesDSF()) {
1:2cfdf52:             DSFTracker dsfTracker = new DSFTracker(context, provider, punit);
1:2cfdf52:             dsfTracker.open();
1:2cfdf52:             return dsfTracker;
1:2cfdf52:         } else {
1:2cfdf52:             LOGGER.debug("Persistence unit " + punit.getPersistenceUnitName() + " does not refer a DataSource. "
1:2cfdf52:                          +"It can only be used with EntityManagerFactoryBuilder.");
1:2cfdf52:             return null;
1:2cfdf52:         }
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private boolean usesDataSource() {
1:2cfdf52:         return punit.getJtaDataSourceName() != null || punit.getNonJtaDataSourceName() != null;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private boolean usesDSF() {
1:2cfdf52:         return DSFTracker.getDriverName(punit) != null;
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     private boolean usesDataSourceService() {
1:2cfdf52:         return punit.getJtaDataSourceName() != null && punit.getJtaDataSourceName().startsWith(DataSourceTracker.DS_PREFIX)
1:2cfdf52:             || punit.getNonJtaDataSourceName() != null && punit.getNonJtaDataSourceName().startsWith(DataSourceTracker.DS_PREFIX);
1:2cfdf52:     }
1:2cfdf52: 
1:2cfdf52:     @Override
1:2cfdf52:     public void removedService(ServiceReference<PersistenceProvider> reference, StoredPerProvider stored) {
1:2cfdf52:         LOGGER.info("Lost provider for " + punit.getPersistenceUnitName() + " " + punit.getPersistenceProviderClassName());
1:2cfdf52:         if (stored.dsTracker != null) {
1:2cfdf52:             stored.dsTracker.close();
1:2cfdf52:         }
1:2cfdf52:         stored.reg.unregister();
1:2cfdf52:         super.removedService(reference, stored);
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:d669541
/////////////////////////////////////////////////////////////////////////
1:         PersistenceProvider provider = context.getService(reference);
commit:545546a
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.debug("Error while creating the Dummy EntityManagerFactory to allow weaving.", e);
commit:ec3ea65
/////////////////////////////////////////////////////////////////////////
1:         String filter;
/////////////////////////////////////////////////////////////////////////
1:         stored.dsTracker = createDataSourceTracker(provider);
/////////////////////////////////////////////////////////////////////////
1:     private ServiceTracker<?, ?> createDataSourceTracker(PersistenceProvider provider) {
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.impl;
1: 
1: import java.util.Dictionary;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceProvider;
1: import javax.sql.DataSource;
1: 
1: import org.apache.aries.jpa.container.parser.impl.PersistenceUnit;
1: import org.apache.aries.jpa.container.weaving.impl.DummyDataSource;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: import org.osgi.util.tracker.ServiceTracker;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tracks matching persistence providers for a persistence unit.
1:  * If a provider is found:
1:  * - an EntityManagerFactoryBuilder is installed
1:  * - A DataSourceTracker is installed if the JtaDataSource refers to an OSGi service 
1:  */
1: public class PersistenceProviderTracker extends ServiceTracker<PersistenceProvider, StoredPerProvider> {
1:     private static final String JAVAX_PERSISTENCE_PROVIDER = "javax.persistence.provider";
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(PersistenceProviderTracker.class);
1: 
1:     private PersistenceUnit punit;
1: 
0:     public PersistenceProviderTracker(BundleContext context, PersistenceUnit punit) {
0:         super(context, createFilter(context, punit), null);
1:         this.punit = punit;
1:     }
1: 
1:     private static Filter createFilter(BundleContext context, PersistenceUnit punit) {
0:         String filter = null;
1:         if (punit.getPersistenceProviderClassName() != null) {
1:             filter = String.format("(&(objectClass=%s)(%s=%s))",
1:                                    PersistenceProvider.class.getName(),
1:                                    JAVAX_PERSISTENCE_PROVIDER,
1:                                    punit.getPersistenceProviderClassName());
1:         } else {
1:             filter = String.format("(objectClass=%s)", PersistenceProvider.class.getName());
1:         }
1: 
1:         try {
1:             return context.createFilter(filter);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IllegalArgumentException(e);
1:         }
1:     }
1: 
1:     @Override
1:     public StoredPerProvider addingService(ServiceReference<PersistenceProvider> reference) {
1:         String providerName = (String)reference.getProperty(JAVAX_PERSISTENCE_PROVIDER);
1:         // FIXME should be set when creating the EMF was successful
1:         if (punit.getPersistenceProviderClassName() == null) {
1:             punit.setProviderClassName(providerName);
1:         }
1:         StoredPerProvider stored = new StoredPerProvider();
1:         LOGGER.info("Found provider for " + punit.getPersistenceUnitName() + " " + punit.getPersistenceProviderClassName());
0:         PersistenceProvider provider = context.getService(reference);
1: 
1:         createAndCloseDummyEMF(provider);
1: 
0:         stored.dsTracker = createDataSourceTracker(stored, provider, providerName);
1:         EntityManagerFactoryBuilder emfBuilder = new AriesEntityManagerFactoryBuilder(provider, punit);
1:         Dictionary<String, ?> props = ManagedEMF.createProperties(punit, punit.getBundle());
1:         stored.reg = context.registerService(EntityManagerFactoryBuilder.class, emfBuilder , props);
1:         return stored;
1:     }
1: 
1:     /**
1:      * Create and close a dummy EMF to give the PersistenceProvider a chance to call
1:      * punit.addTransformer(). This has to occur as early as possible as weaving needs
1:      * to be done before the first entity class is loaded. So we can not wait till the
1:      * real DataSource is found.
1:      */
1:     private void createAndCloseDummyEMF(PersistenceProvider provider) {
1:         DataSource dummyDataSource = new DummyDataSource();
1:         punit.setJtaDataSource(dummyDataSource);
1:         punit.setNonJtaDataSource(dummyDataSource);
1:         try {
1:             EntityManagerFactory emf = provider.createContainerEntityManagerFactory(punit, null);
1:             emf.close();
1:         } catch (Exception e) {
0:             LOGGER.warn(e.getMessage(), e);
1:         }
1:         punit.setJtaDataSource(null);
1:         punit.setNonJtaDataSource(null);
1:     }
1: 
0:     private ServiceTracker<?, ?> createDataSourceTracker(StoredPerProvider stored, PersistenceProvider provider, String providerName) {
1:         if (usesDataSource()) {
1:             if (!usesDataSourceService()) {
1:                 LOGGER.warn("Persistence unit " + punit.getPersistenceUnitName() + " refers to a non OSGi service DataSource");
1:                 return null;
1:             }
1:             DataSourceTracker dsTracker = new DataSourceTracker(context, provider, punit);
1:             dsTracker.open();
1:             return dsTracker;
1:         } else if (usesDSF()) {
1:             DSFTracker dsfTracker = new DSFTracker(context, provider, punit);
1:             dsfTracker.open();
1:             return dsfTracker;
1:         } else {
1:             LOGGER.debug("Persistence unit " + punit.getPersistenceUnitName() + " does not refer a DataSource. "
1:                          +"It can only be used with EntityManagerFactoryBuilder.");
1:             return null;
1:         }
1:     }
1: 
1:     private boolean usesDataSource() {
1:         return punit.getJtaDataSourceName() != null || punit.getNonJtaDataSourceName() != null;
1:     }
1: 
1:     private boolean usesDSF() {
1:         return DSFTracker.getDriverName(punit) != null;
1:     }
1: 
1:     private boolean usesDataSourceService() {
1:         return punit.getJtaDataSourceName() != null && punit.getJtaDataSourceName().startsWith(DataSourceTracker.DS_PREFIX)
1:             || punit.getNonJtaDataSourceName() != null && punit.getNonJtaDataSourceName().startsWith(DataSourceTracker.DS_PREFIX);
1:     }
1: 
1:     @Override
1:     public void removedService(ServiceReference<PersistenceProvider> reference, StoredPerProvider stored) {
1:         LOGGER.info("Lost provider for " + punit.getPersistenceUnitName() + " " + punit.getPersistenceProviderClassName());
1:         if (stored.dsTracker != null) {
1:             stored.dsTracker.close();
1:         }
1:         stored.reg.unregister();
1:         super.removedService(reference, stored);
1:     }
1: }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:9fa765d
/////////////////////////////////////////////////////////////////////////
1:     public PersistenceProviderTracker(BundleContext containerContext, PersistenceUnit punit) {
1:         super(containerContext, createFilter(containerContext, punit), null);
/////////////////////////////////////////////////////////////////////////
1:         
0:         // This get must happen using the persistence bundle's context to avoid ARIES-1575
0:         PersistenceProvider provider = punit.getBundle().getBundleContext().getService(reference);
============================================================================