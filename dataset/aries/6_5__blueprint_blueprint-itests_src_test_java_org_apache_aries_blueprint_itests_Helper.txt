1:86224ba: /*
1:86224ba:  * Licensed to the Apache Software Foundation (ASF) under one
1:86224ba:  * or more contributor license agreements.  See the NOTICE file
1:86224ba:  * distributed with this work for additional information
1:86224ba:  * regarding copyright ownership.  The ASF licenses this file
1:86224ba:  * to you under the Apache License, Version 2.0 (the
1:86224ba:  * "License"); you may not use this file except in compliance
1:86224ba:  * with the License.  You may obtain a copy of the License at
1:86224ba:  *
1:86224ba:  *   http://www.apache.org/licenses/LICENSE-2.0
1:86224ba:  *
1:86224ba:  * Unless required by applicable law or agreed to in writing,
1:86224ba:  * software distributed under the License is distributed on an
1:86224ba:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:86224ba:  * KIND, either express or implied.  See the License for the
1:86224ba:  * specific language governing permissions and limitations
1:86224ba:  * under the License.
1:86224ba:  */
1:86224ba: package org.apache.aries.blueprint.itests;
16:86224ba: 
1:d251156: import static org.junit.Assert.assertEquals;
1:d251156: import static org.junit.Assert.assertFalse;
1:d251156: import static org.junit.Assert.assertNotNull;
1:d251156: import static org.junit.Assert.assertSame;
1:d251156: import static org.junit.Assert.assertTrue;
1:d251156: import static org.junit.Assert.fail;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.composite;
1:d251156: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:d251156: 
1:d251156: import java.text.ParseException;
1:86224ba: import java.text.SimpleDateFormat;
1:86224ba: import java.util.Currency;
1:88297e2: 
1:86224ba: import org.apache.aries.blueprint.sample.Account;
1:86224ba: import org.apache.aries.blueprint.sample.AccountFactory;
1:86224ba: import org.apache.aries.blueprint.sample.Bar;
1:86224ba: import org.apache.aries.blueprint.sample.Foo;
1:86224ba: import org.apache.aries.itest.RichBundleContext;
1:d251156: import org.ops4j.pax.exam.CoreOptions;
1:86224ba: import org.ops4j.pax.exam.Option;
1:86224ba: import org.osgi.framework.Bundle;
1:86224ba: import org.osgi.service.blueprint.container.BlueprintContainer;
1:86224ba: 
1:86224ba: public class Helper {
1:d251156:     private static final String SAMPLE_SYM_NAME = "org.apache.aries.blueprint.sample";
1:d251156: 
1:86224ba:     public static BlueprintContainer getBlueprintContainerForBundle(RichBundleContext context, String symbolicName) {
1:86224ba:         return context.getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + symbolicName + ")");
2:86224ba:     }
1:86224ba: 
1:86224ba:     public static BlueprintContainer getBlueprintContainerForBundle(RichBundleContext context, String symbolicName, long timeout) {
1:86224ba:         return context.getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + symbolicName + ")", timeout);
1:86224ba:     }
1:86224ba:     
1:d251156:     public static Option blueprintBundles() {
1:86224ba:         return blueprintBundles(true);
1:ced7c16:     }
1:ced7c16:     
1:d251156:     public static Option debug(int port) {
1:c185a5a:       return CoreOptions.vmOption("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=" + port);
1:86224ba:     }
1:86224ba:     
1:d251156:     public static Option blueprintBundles(boolean startBlueprint) {
1:d251156:         return composite(
1:c3f6a7d:                 mvnBundle("org.ow2.asm", "asm-debug-all"),
1:c185a5a:                 mvnBundle("org.apache.felix", "org.apache.felix.configadmin"),
1:c185a5a:                 mvnBundle("org.ops4j.pax.url", "pax-url-aether"),
1:c185a5a:                 mvnBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
1:c185a5a:                 mvnBundle("org.apache.aries", "org.apache.aries.util"),
1:c185a5a:                 mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api"),
1:c185a5a:                 mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl"),
1:c185a5a:                 mvnBundle("org.apache.commons", "commons-jexl"),
1:c185a5a:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.jexl.evaluator"),
1:beb8062:                 mvnBundle("org.apache.xbean", "xbean-asm5-shaded"),
1:c185a5a:                 mvnBundle("org.apache.xbean", "xbean-bundleutils"),
1:beb8062:                 mvnBundle("org.apache.xbean", "xbean-finder"),
1:d251156:                 mvnBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api", startBlueprint),
1:d251156:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api", startBlueprint),
1:d251156:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core", startBlueprint),
1:d251156:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.cm", startBlueprint),
1:d251156:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.api", startBlueprint),
1:2e9d097:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.impl", startBlueprint)
1:86224ba:         );
1:d251156:     }
1:c185a5a: 
1:c185a5a:     public static Option mvnBundle(String groupId, String artifactId) {
1:c185a5a:         return mavenBundle(groupId, artifactId).versionAsInProject();
1:86224ba:     }
1:c185a5a: 
1:c185a5a:     public static Option mvnBundle(String groupId, String artifactId, boolean start) {
1:c185a5a:         return mavenBundle(groupId, artifactId).versionAsInProject().start(start);
1:c185a5a:     }
1:c185a5a: 
1:86224ba:     public static void testBlueprintContainer(RichBundleContext context, Bundle bundle) throws Exception {
1:d251156:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle(context, SAMPLE_SYM_NAME);
1:86224ba:         assertNotNull(blueprintContainer);
1:d251156: 
1:d251156:         Bar bar = getInstance(blueprintContainer, "bar", Bar.class);
1:d251156:         checkBar(bar);
1:d251156:         
1:d251156:         Foo foo = getInstance(blueprintContainer, "foo", Foo.class);
1:d251156:         checkFoo(bar, foo);
1:d251156: 
1:d251156:         Foo fooService = context.getService(Foo.class);
1:d251156:         assertNotNull(fooService);
1:d251156:         checkFoo(bar, fooService);
1:d251156:         
1:d251156:         // TODO Does not work
1:d251156:         //assertEquals(obj, foo);
1:d251156:         
1:d251156:         Account account = getInstance(blueprintContainer, "accountOne", Account.class);
1:d251156:         assertEquals(1, account.getAccountNumber());
1:d251156:      
1:d251156:         Account account2 = getInstance(blueprintContainer, "accountTwo", Account.class);
1:d251156:         assertEquals(2, account2.getAccountNumber());
1:d251156:         
1:d251156:         Account account3 = getInstance(blueprintContainer, "accountThree", Account.class);
1:d251156:         assertEquals(3, account3.getAccountNumber());
1:d251156:         
1:d251156:         AccountFactory accountFactory = getInstance(blueprintContainer, "accountFactory", AccountFactory.class);
1:d251156:         assertEquals("account factory", accountFactory.getFactoryName());
1:d251156:         
1:d251156:         bundle.stop();
1:d251156: 
1:d251156:         Thread.sleep(1000);
1:d251156: 
1:d251156:         try {
1:d251156:             blueprintContainer = getBlueprintContainerForBundle(context, SAMPLE_SYM_NAME, 1);
1:d251156:             fail("BlueprintContainer should have been unregistered");
1:d251156:         } catch (Exception e) {
1:d251156:             // Expected, as the module container should have been unregistered
1:d251156:         }
1:d251156: 
1:d251156:         assertTrue(foo.isInitialized());
1:d251156:         assertTrue(foo.isDestroyed());
1:d251156:     }
1:d251156: 
1:d251156:     private static void checkBar(Bar bar) {
1:86224ba:         assertNotNull(bar.getContext());
1:86224ba:         assertEquals("Hello FooBar", bar.getValue());
1:86224ba:         assertNotNull(bar.getList());
1:86224ba:         assertEquals(2, bar.getList().size());
1:86224ba:         assertEquals("a list element", bar.getList().get(0));
1:86224ba:         assertEquals(Integer.valueOf(5), bar.getList().get(1));
1:d251156:     }
1:d251156: 
1:d251156:     private static void checkFoo(Bar bar, Foo foo) throws ParseException {
1:86224ba:         assertEquals(5, foo.getA());
1:86224ba:         assertEquals(10, foo.getB());
1:86224ba:         assertSame(bar, foo.getBar());
1:86224ba:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:86224ba:         assertEquals(new SimpleDateFormat("yyyy.MM.dd").parse("2009.04.17"),
1:86224ba:                 foo.getDate());
1:86224ba: 
2:86224ba:         assertTrue(foo.isInitialized());
1:86224ba:         assertFalse(foo.isDestroyed());
1:86224ba:     }
1:d251156:     
1:d251156:     @SuppressWarnings("unchecked")
1:d251156:     private static <T>T getInstance(BlueprintContainer container, String name, Class<T> clazz) {
1:d251156:         Object obj = container.getComponentInstance(name);
1:d251156:         assertNotNull(obj);
1:d251156:         assertEquals(clazz, obj.getClass());
1:d251156:         return (T) obj;
1:d251156:     }
1:d251156: 
1:86224ba: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e9d097
/////////////////////////////////////////////////////////////////////////
1:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.impl", startBlueprint)
commit:cbe1e76
/////////////////////////////////////////////////////////////////////////
0:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.impl", startBlueprint),
0:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.spring", startBlueprint)
commit:beb8062
/////////////////////////////////////////////////////////////////////////
1:                 mvnBundle("org.apache.xbean", "xbean-asm5-shaded"),
1:                 mvnBundle("org.apache.xbean", "xbean-finder"),
commit:c3f6a7d
/////////////////////////////////////////////////////////////////////////
1:                 mvnBundle("org.ow2.asm", "asm-debug-all"),
commit:c185a5a
/////////////////////////////////////////////////////////////////////////
1:       return CoreOptions.vmOption("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=" + port);
0:                 mvnBundle("org.ow2.asm", "asm-all"),
1:                 mvnBundle("org.apache.felix", "org.apache.felix.configadmin"),
1:                 mvnBundle("org.ops4j.pax.url", "pax-url-aether"),
1:                 mvnBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
1:                 mvnBundle("org.apache.aries", "org.apache.aries.util"),
1:                 mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api"),
1:                 mvnBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl"),
1:                 mvnBundle("org.apache.commons", "commons-jexl"),
1:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.jexl.evaluator"),
0:                 mvnBundle("org.apache.xbean", "xbean-asm4-shaded"),
1:                 mvnBundle("org.apache.xbean", "xbean-bundleutils"),
0:                 mvnBundle("org.apache.xbean", "xbean-finder-shaded"),
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static Option mvnBundle(String groupId, String artifactId) {
1:         return mavenBundle(groupId, artifactId).versionAsInProject();
1: 
1:     public static Option mvnBundle(String groupId, String artifactId, boolean start) {
1:         return mavenBundle(groupId, artifactId).versionAsInProject().start(start);
1:     }
1: 
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:d251156
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: 
1: import java.text.ParseException;
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.CoreOptions;
1:     private static final String SAMPLE_SYM_NAME = "org.apache.aries.blueprint.sample";
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static Option blueprintBundles() {
1:     public static Option debug(int port) {
0:       return CoreOptions.vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=" + port);
1:     public static Option blueprintBundles(boolean startBlueprint) {
1:         return composite(
0:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
0:                 mavenBundle("org.apache.felix", "org.apache.felix.configadmin").versionAsInProject(),
0:                 mavenBundle("org.ops4j.pax.url", "pax-url-aether").versionAsInProject(),
0:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
0:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
0:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api").versionAsInProject(),
0:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl").versionAsInProject(),
0:                 mavenBundle("org.apache.commons", "commons-jexl").versionAsInProject(),
0:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.jexl.evaluator").versionAsInProject(),
0:                 mavenBundle("org.apache.xbean", "xbean-asm4-shaded").versionAsInProject(),
0:                 mavenBundle("org.apache.xbean", "xbean-bundleutils").versionAsInProject(),
0:                 mavenBundle("org.apache.xbean", "xbean-finder-shaded").versionAsInProject(),
1:                 mvnBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api", startBlueprint),
1:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api", startBlueprint),
1:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core", startBlueprint),
1:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.cm", startBlueprint),
1:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.api", startBlueprint),
0:                 mvnBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.impl", startBlueprint)
0:     public static Option mvnBundle(String groupId, String artifactId, boolean start) {
0:     	return mavenBundle(groupId, artifactId).versionAsInProject().start(start);
1:     }
1:     
1:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle(context, SAMPLE_SYM_NAME);
1:         Bar bar = getInstance(blueprintContainer, "bar", Bar.class);
1:         checkBar(bar);
1:         
1:         Foo foo = getInstance(blueprintContainer, "foo", Foo.class);
1:         checkFoo(bar, foo);
1: 
1:         Foo fooService = context.getService(Foo.class);
1:         assertNotNull(fooService);
1:         checkFoo(bar, fooService);
1:         
1:         // TODO Does not work
1:         //assertEquals(obj, foo);
1:         
1:         Account account = getInstance(blueprintContainer, "accountOne", Account.class);
1:         assertEquals(1, account.getAccountNumber());
1:      
1:         Account account2 = getInstance(blueprintContainer, "accountTwo", Account.class);
1:         assertEquals(2, account2.getAccountNumber());
1:         
1:         Account account3 = getInstance(blueprintContainer, "accountThree", Account.class);
1:         assertEquals(3, account3.getAccountNumber());
1:         
1:         AccountFactory accountFactory = getInstance(blueprintContainer, "accountFactory", AccountFactory.class);
1:         assertEquals("account factory", accountFactory.getFactoryName());
1:         
1:         bundle.stop();
1: 
1:         Thread.sleep(1000);
1: 
1:         try {
1:             blueprintContainer = getBlueprintContainerForBundle(context, SAMPLE_SYM_NAME, 1);
1:             fail("BlueprintContainer should have been unregistered");
1:         } catch (Exception e) {
1:             // Expected, as the module container should have been unregistered
1:         }
1: 
1:         assertTrue(foo.isInitialized());
1:         assertTrue(foo.isDestroyed());
1:     }
1: 
1:     private static void checkBar(Bar bar) {
1:     }
1: 
1:     private static void checkFoo(Bar bar, Foo foo) throws ParseException {
/////////////////////////////////////////////////////////////////////////
1:     
1:     @SuppressWarnings("unchecked")
1:     private static <T>T getInstance(BlueprintContainer container, String name, Class<T> clazz) {
1:         Object obj = container.getComponentInstance(name);
1:         assertNotNull(obj);
1:         assertEquals(clazz, obj.getClass());
1:         return (T) obj;
1:     }
1: 
commit:459a551
/////////////////////////////////////////////////////////////////////////
0:                     ((startBlueprint) ? mavenBundle("org.apache.aries.quiesce", "org.apache.aries.quiesce.api") :
0:                         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api").noStart()),
commit:7647010
/////////////////////////////////////////////////////////////////////////
0:                     ((startBlueprint) ? mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api") :
0:                         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.api").noStart()),
0:                     ((startBlueprint) ? mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core") :
0:                         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.core").noStart()),
0:                     ((startBlueprint) ? mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.cm") :
0:                         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.cm").noStart()),
0:                     ((startBlueprint) ? mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.api") :
0:                         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.api").noStart())
author:Emily Jiang
-------------------------------------------------------------------------------
commit:88297e2
/////////////////////////////////////////////////////////////////////////
1:                    
0:                     mavenBundle("org.ow2.asm", "asm-all"),
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:f520fd5
/////////////////////////////////////////////////////////////////////////
0:                     mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.jexl.evaluator"),
commit:b13e703
/////////////////////////////////////////////////////////////////////////
0:                     "org.apache.commons/commons-jexl",
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ced7c16
/////////////////////////////////////////////////////////////////////////
0: import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup; 
0: import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
/////////////////////////////////////////////////////////////////////////
0:     public static Option[] debug(int port) {
0:       return flatOptions(vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=" + port),waitForFrameworkStartup());
1:     }
1:     
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.blueprint.itests;
1: 
1: import java.text.SimpleDateFormat;
1: import java.util.Currency;
1: 
1: import org.apache.aries.blueprint.sample.Account;
1: import org.apache.aries.blueprint.sample.AccountFactory;
1: import org.apache.aries.blueprint.sample.Bar;
1: import org.apache.aries.blueprint.sample.Foo;
1: import org.apache.aries.itest.RichBundleContext;
1: 
1: import org.ops4j.pax.exam.Option;
1: import org.osgi.framework.Bundle;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
0: import static org.apache.aries.itest.ExtraOptions.*;
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertSame;
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
1: 
1: public class Helper {
1:     public static BlueprintContainer getBlueprintContainerForBundle(RichBundleContext context, String symbolicName) {
1:         return context.getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + symbolicName + ")");
1:     }
1: 
1:     public static BlueprintContainer getBlueprintContainerForBundle(RichBundleContext context, String symbolicName, long timeout) {
1:         return context.getService(BlueprintContainer.class, "(osgi.blueprint.container.symbolicname=" + symbolicName + ")", timeout);
1:     }
1:     
0:     public static Option[] blueprintBundles() {
1:         return blueprintBundles(true);
1:     }
1:     
0:     public static Option[] blueprintBundles(boolean startBlueprint) {
0:         return flatOptions(
0:                 bundles(
0:                     // Felix Config Admin
0:                     "org.apache.felix/org.apache.felix.configadmin",
0:                     // Felix mvn url handler
0:                     "org.ops4j.pax.url/pax-url-mvn",
1:                     
0:                     "org.apache.aries/org.apache.aries.util",
0:                     "org.apache.aries.proxy/org.apache.aries.proxy",
0:                     "asm/asm-all",
0:                     "org.osgi/org.osgi.compendium"),
1:                     
0:                 ((startBlueprint) ? mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint") :
0:                     mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").noStart())
1:         );
1:     }
1:     
1:     public static void testBlueprintContainer(RichBundleContext context, Bundle bundle) throws Exception {
0:         BlueprintContainer blueprintContainer = getBlueprintContainerForBundle(context, "org.apache.aries.blueprint.sample");
1:         assertNotNull(blueprintContainer);
1: 
0:         Object obj = blueprintContainer.getComponentInstance("bar");
0:         assertNotNull(obj);
0:         assertEquals(Bar.class, obj.getClass());
0:         Bar bar = (Bar) obj;
1:         assertNotNull(bar.getContext());
1:         assertEquals("Hello FooBar", bar.getValue());
1:         assertNotNull(bar.getList());
1:         assertEquals(2, bar.getList().size());
1:         assertEquals("a list element", bar.getList().get(0));
1:         assertEquals(Integer.valueOf(5), bar.getList().get(1));
0:         obj = blueprintContainer.getComponentInstance("foo");
0:         assertNotNull(obj);
0:         assertEquals(Foo.class, obj.getClass());
0:         Foo foo = (Foo) obj;
1:         assertEquals(5, foo.getA());
1:         assertEquals(10, foo.getB());
1:         assertSame(bar, foo.getBar());
1:         assertEquals(Currency.getInstance("PLN"), foo.getCurrency());
1:         assertEquals(new SimpleDateFormat("yyyy.MM.dd").parse("2009.04.17"),
1:                 foo.getDate());
1: 
1:         assertTrue(foo.isInitialized());
1:         assertFalse(foo.isDestroyed());
1: 
0:         obj = context.getService(Foo.class);
0:         assertNotNull(obj);
0:         assertEquals(obj, foo);
1:         
0:         obj = blueprintContainer.getComponentInstance("accountOne");
0:         assertNotNull(obj);
0:         Account account = (Account)obj;
0:         assertEquals(1, account.getAccountNumber());
1:      
0:         obj = blueprintContainer.getComponentInstance("accountTwo");
0:         assertNotNull(obj);
0:         account = (Account)obj;
0:         assertEquals(2, account.getAccountNumber());
1:         
0:         obj = blueprintContainer.getComponentInstance("accountThree");
0:         assertNotNull(obj);
0:         account = (Account)obj;
0:         assertEquals(3, account.getAccountNumber());
1:         
0:         obj = blueprintContainer.getComponentInstance("accountFactory");
0:         assertNotNull(obj);
0:         AccountFactory accountFactory = (AccountFactory)obj;
0:         assertEquals("account factory", accountFactory.getFactoryName());
1:         
0:         bundle.stop();
1: 
0:         Thread.sleep(1000);
1: 
0:         try {
0:             blueprintContainer = getBlueprintContainerForBundle(context, "org.apache.aries.blueprint.sample", 1);
0:             fail("BlueprintContainer should have been unregistered");
0:         } catch (Exception e) {
0:             // Expected, as the module container should have been unregistered
1:         }
1: 
1:         assertTrue(foo.isInitialized());
0:         assertTrue(foo.isDestroyed());
1:     }
1: }
============================================================================