1:fdf3952: /*
1:fdf3952:  * Licensed to the Apache Software Foundation (ASF) under one
1:fdf3952:  * or more contributor license agreements.  See the NOTICE file
1:fdf3952:  * distributed with this work for additional information
1:fdf3952:  * regarding copyright ownership.  The ASF licenses this file
1:fdf3952:  * to you under the Apache License, Version 2.0 (the
1:fdf3952:  * "License"); you may not use this file except in compliance
1:fdf3952:  * with the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *  http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  * Unless required by applicable law or agreed to in writing,
1:fdf3952:  * software distributed under the License is distributed on an
1:fdf3952:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fdf3952:  * KIND, either express or implied.  See the License for the
1:fdf3952:  * specific language governing permissions and limitations
1:fdf3952:  * under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.blueprint.impl;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.util.HashMap;
1:fdf3952: import java.util.Map;
1:fdf3952: import java.util.concurrent.ExecutorService;
1:fdf3952: import java.util.concurrent.Executors;
1:fdf3952: import java.util.concurrent.RejectedExecutionException;
1:fdf3952: import java.util.concurrent.ThreadFactory;
1:fdf3952: import java.util.concurrent.atomic.AtomicInteger;
1:fdf3952: import javax.management.MBeanNotificationInfo;
1:fdf3952: import javax.management.MBeanRegistration;
1:fdf3952: import javax.management.MBeanServer;
1:fdf3952: import javax.management.Notification;
1:fdf3952: import javax.management.NotificationBroadcasterSupport;
1:fdf3952: import javax.management.ObjectName;
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: import javax.management.openmbean.TabularDataSupport;
1:fdf3952: 
1:fdf3952: import org.apache.aries.jmx.blueprint.BlueprintStateMBean;
1:fdf3952: import org.apache.aries.jmx.blueprint.codec.OSGiBlueprintEvent;
1:fdf3952: import org.apache.aries.util.AriesFrameworkUtil;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.ServiceRegistration;
1:fdf3952: import org.osgi.service.blueprint.container.BlueprintEvent;
1:fdf3952: import org.osgi.service.blueprint.container.BlueprintListener;
1:fdf3952: import org.slf4j.Logger;
1:fdf3952: import org.slf4j.LoggerFactory;
1:fdf3952: 
1:fdf3952: public class BlueprintState extends NotificationBroadcasterSupport implements BlueprintStateMBean, MBeanRegistration {
1:fdf3952: 
1:fdf3952:     // notification type description
1:fdf3952:     public static String BLUEPRINT_EVENT = "org.osgi.blueprint.event";
1:fdf3952: 
1:fdf3952:     private static final Logger LOGGER = LoggerFactory.getLogger(BlueprintState.class);
1:fdf3952: 
1:fdf3952:     private BundleContext context;
1:fdf3952: 
1:fdf3952:     private ServiceRegistration listenerReg;
1:fdf3952: 
1:fdf3952:     private Map<Long, CompositeData> dataMap = new HashMap<Long, CompositeData>();
1:fdf3952: 
1:fdf3952:     private ExecutorService eventDispatcher;
1:fdf3952: 
1:fdf3952:     private AtomicInteger notificationSequenceNumber = new AtomicInteger(1);
1:fdf3952: 
1:fdf3952:     private AtomicInteger registrations = new AtomicInteger(0);
1:fdf3952: 
1:fdf3952:     public BlueprintState(BundleContext context) {
1:fdf3952:         this.context = context;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public synchronized long[] getBlueprintBundleIds() throws IOException {
1:fdf3952:         Long[] bundleIdKeys = dataMap.keySet().toArray(new Long[dataMap.size()]);
1:fdf3952:         long[] bundleIds = new long[bundleIdKeys.length];
1:fdf3952:         for (int i = 0; i < bundleIdKeys.length; i++) {
1:fdf3952:             bundleIds[i] = bundleIdKeys[i];
1:fdf3952:         }
1:fdf3952:         return bundleIds;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public synchronized CompositeData getLastEvent(long bundleId) throws IOException {
1:fdf3952:         return dataMap.get(bundleId);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public synchronized TabularData getLastEvents() throws IOException {
1:fdf3952:         TabularDataSupport table = new TabularDataSupport(BlueprintStateMBean.OSGI_BLUEPRINT_EVENTS_TYPE);
1:fdf3952:         table.putAll(dataMap);
1:fdf3952:         return table;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {
1:fdf3952:         // no op
1:fdf3952:         return name;
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public void postRegister(Boolean registrationDone) {
1:fdf3952:         // reg listener
1:fdf3952:         if (registrationDone && registrations.incrementAndGet() == 1) {
1:fdf3952:             BlueprintListener listener = new BlueprintStateListener();
1:fdf3952:             eventDispatcher = Executors.newSingleThreadExecutor(new JMXThreadFactory("JMX OSGi Blueprint State Event Dispatcher"));
1:fdf3952:             listenerReg = context.registerService(BlueprintListener.class.getName(), listener, null);
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public void preDeregister() throws Exception {
1:fdf3952:         // no op
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public void postDeregister() {
1:fdf3952:         if (registrations.decrementAndGet() < 1) {
1:fdf3952:             AriesFrameworkUtil.safeUnregisterService(listenerReg); 
1:fdf3952:           
1:fdf3952:             if (eventDispatcher != null) {
1:fdf3952:                 eventDispatcher.shutdown(); 
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     protected synchronized void onEvent(BlueprintEvent event) {
1:fdf3952:         CompositeData data = new OSGiBlueprintEvent(event).asCompositeData();
1:fdf3952:         dataMap.put(event.getBundle().getBundleId(), data);
1:fdf3952: 
1:fdf3952:         if (!event.isReplay()) {
1:fdf3952:             final Notification notification = new Notification(EVENT_TYPE, OBJECTNAME,
1:fdf3952:                     notificationSequenceNumber.getAndIncrement());
1:fdf3952:             try {
1:fdf3952:                 notification.setUserData(data);
1:fdf3952:                 eventDispatcher.submit(new Runnable() {
1:fdf3952:                     public void run() {
1:fdf3952:                         sendNotification(notification);
1:fdf3952:                     }
1:fdf3952:                 });
1:fdf3952:             } catch (RejectedExecutionException re) {
1:fdf3952:                 LOGGER.warn("Task rejected for JMX Notification dispatch of event ["
1:fdf3952:                         + event + "] - Dispatcher may have been shutdown");
1:fdf3952:             } catch (Exception e) {
1:fdf3952:                 LOGGER.warn("Exception occured on JMX Notification dispatch for event [" + event + "]", e);
1:fdf3952:             }
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     /**
1:fdf3952:      * @see javax.management.NotificationBroadcasterSupport#getNotificationInfo()
1:fdf3952:      */
1:fdf3952:     @Override
1:fdf3952:     public MBeanNotificationInfo[] getNotificationInfo() {
1:fdf3952:         String[] types = new String[] { BLUEPRINT_EVENT };
1:fdf3952:         String name = Notification.class.getName();
1:fdf3952:         String description = "A BlueprintEvent issued from the Blueprint Extender describing a blueprint bundle lifecycle change";
1:fdf3952:         MBeanNotificationInfo info = new MBeanNotificationInfo(types, name, description);
1:fdf3952:         return new MBeanNotificationInfo[] { info };
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     private class BlueprintStateListener implements BlueprintListener {
1:fdf3952:         public void blueprintEvent(BlueprintEvent event) {
1:fdf3952:             onEvent(event);
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     public static class JMXThreadFactory implements ThreadFactory {
1:fdf3952:         private final ThreadFactory factory = Executors.defaultThreadFactory();
1:fdf3952:         private final String name;
1:fdf3952: 
1:fdf3952:         public JMXThreadFactory(String name) {
1:fdf3952:             this.name = name;
1:fdf3952:         }
1:fdf3952: 
1:fdf3952:         public Thread newThread(Runnable r) {
1:fdf3952:             final Thread t = factory.newThread(r);
1:fdf3952:             t.setName(name);
1:fdf3952:             t.setDaemon(true);
1:fdf3952:             return t;
1:fdf3952:         }
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *  http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jmx.blueprint.impl;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.RejectedExecutionException;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.management.MBeanNotificationInfo;
1: import javax.management.MBeanRegistration;
1: import javax.management.MBeanServer;
1: import javax.management.Notification;
1: import javax.management.NotificationBroadcasterSupport;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: 
1: import org.apache.aries.jmx.blueprint.BlueprintStateMBean;
1: import org.apache.aries.jmx.blueprint.codec.OSGiBlueprintEvent;
1: import org.apache.aries.util.AriesFrameworkUtil;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.blueprint.container.BlueprintEvent;
1: import org.osgi.service.blueprint.container.BlueprintListener;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class BlueprintState extends NotificationBroadcasterSupport implements BlueprintStateMBean, MBeanRegistration {
1: 
1:     // notification type description
1:     public static String BLUEPRINT_EVENT = "org.osgi.blueprint.event";
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(BlueprintState.class);
1: 
1:     private BundleContext context;
1: 
1:     private ServiceRegistration listenerReg;
1: 
1:     private Map<Long, CompositeData> dataMap = new HashMap<Long, CompositeData>();
1: 
1:     private ExecutorService eventDispatcher;
1: 
1:     private AtomicInteger notificationSequenceNumber = new AtomicInteger(1);
1: 
1:     private AtomicInteger registrations = new AtomicInteger(0);
1: 
1:     public BlueprintState(BundleContext context) {
1:         this.context = context;
1:     }
1: 
1:     public synchronized long[] getBlueprintBundleIds() throws IOException {
1:         Long[] bundleIdKeys = dataMap.keySet().toArray(new Long[dataMap.size()]);
1:         long[] bundleIds = new long[bundleIdKeys.length];
1:         for (int i = 0; i < bundleIdKeys.length; i++) {
1:             bundleIds[i] = bundleIdKeys[i];
1:         }
1:         return bundleIds;
1:     }
1: 
1:     public synchronized CompositeData getLastEvent(long bundleId) throws IOException {
1:         return dataMap.get(bundleId);
1:     }
1: 
1:     public synchronized TabularData getLastEvents() throws IOException {
1:         TabularDataSupport table = new TabularDataSupport(BlueprintStateMBean.OSGI_BLUEPRINT_EVENTS_TYPE);
1:         table.putAll(dataMap);
1:         return table;
1:     }
1: 
1:     public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {
1:         // no op
1:         return name;
1:     }
1: 
1:     public void postRegister(Boolean registrationDone) {
1:         // reg listener
1:         if (registrationDone && registrations.incrementAndGet() == 1) {
1:             BlueprintListener listener = new BlueprintStateListener();
1:             eventDispatcher = Executors.newSingleThreadExecutor(new JMXThreadFactory("JMX OSGi Blueprint State Event Dispatcher"));
1:             listenerReg = context.registerService(BlueprintListener.class.getName(), listener, null);
1:         }
1:     }
1: 
1:     public void preDeregister() throws Exception {
1:         // no op
1:     }
1: 
1:     public void postDeregister() {
1:         if (registrations.decrementAndGet() < 1) {
1:             AriesFrameworkUtil.safeUnregisterService(listenerReg); 
1:           
1:             if (eventDispatcher != null) {
1:                 eventDispatcher.shutdown(); 
1:             }
1:         }
1:     }
1: 
1:     protected synchronized void onEvent(BlueprintEvent event) {
1:         CompositeData data = new OSGiBlueprintEvent(event).asCompositeData();
1:         dataMap.put(event.getBundle().getBundleId(), data);
1: 
1:         if (!event.isReplay()) {
1:             final Notification notification = new Notification(EVENT_TYPE, OBJECTNAME,
1:                     notificationSequenceNumber.getAndIncrement());
1:             try {
1:                 notification.setUserData(data);
1:                 eventDispatcher.submit(new Runnable() {
1:                     public void run() {
1:                         sendNotification(notification);
1:                     }
1:                 });
1:             } catch (RejectedExecutionException re) {
1:                 LOGGER.warn("Task rejected for JMX Notification dispatch of event ["
1:                         + event + "] - Dispatcher may have been shutdown");
1:             } catch (Exception e) {
1:                 LOGGER.warn("Exception occured on JMX Notification dispatch for event [" + event + "]", e);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.management.NotificationBroadcasterSupport#getNotificationInfo()
1:      */
1:     @Override
1:     public MBeanNotificationInfo[] getNotificationInfo() {
1:         String[] types = new String[] { BLUEPRINT_EVENT };
1:         String name = Notification.class.getName();
1:         String description = "A BlueprintEvent issued from the Blueprint Extender describing a blueprint bundle lifecycle change";
1:         MBeanNotificationInfo info = new MBeanNotificationInfo(types, name, description);
1:         return new MBeanNotificationInfo[] { info };
1:     }
1: 
1:     private class BlueprintStateListener implements BlueprintListener {
1:         public void blueprintEvent(BlueprintEvent event) {
1:             onEvent(event);
1:         }
1: 
1:     }
1: 
1:     public static class JMXThreadFactory implements ThreadFactory {
1:         private final ThreadFactory factory = Executors.defaultThreadFactory();
1:         private final String name;
1: 
1:         public JMXThreadFactory(String name) {
1:             this.name = name;
1:         }
1: 
1:         public Thread newThread(Runnable r) {
1:             final Thread t = factory.newThread(r);
1:             t.setName(name);
1:             t.setDaemon(true);
1:             return t;
1:         }
1:     }
1: 
1: }
============================================================================