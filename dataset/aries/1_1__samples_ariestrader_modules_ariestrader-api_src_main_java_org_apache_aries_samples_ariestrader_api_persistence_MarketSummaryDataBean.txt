1:628add4: /**
1:628add4:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:628add4:  *  contributor license agreements.  See the NOTICE file distributed with
1:628add4:  *  this work for additional information regarding copyright ownership.
1:628add4:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:628add4:  *  (the "License"); you may not use this file except in compliance with
1:628add4:  *  the License.  You may obtain a copy of the License at
1:628add4:  *
1:628add4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:628add4:  *
1:628add4:  *  Unless required by applicable law or agreed to in writing, software
1:628add4:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:628add4:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:628add4:  *  See the License for the specific language governing permissions and
1:628add4:  *  limitations under the License.
1:628add4:  */
1:880e087: package org.apache.aries.samples.ariestrader.api.persistence;
1:628add4: 
1:628add4: import java.io.Serializable;
1:628add4: import java.math.BigDecimal;
1:628add4: import java.util.ArrayList;
1:628add4: import java.util.Collection;
1:628add4: import java.util.Date;
1:628add4: import java.util.Iterator;
1:628add4: 
1:56a6860: import org.apache.aries.samples.ariestrader.util.FinancialUtils;
1:56a6860: import org.apache.aries.samples.ariestrader.util.Log;
1:56a6860: import org.apache.aries.samples.ariestrader.util.TradeConfig;
1:628add4: 
1:628add4: public class MarketSummaryDataBean implements Serializable
1:628add4: {
1:628add4: 
1:628add4: 	private BigDecimal 	TSIA;			/* Trade Stock Index Average */
1:628add4: 	private BigDecimal 	openTSIA;		/* Trade Stock Index Average at the open */	
1:628add4: 	private double  	volume; 		/* volume of shares traded */
1:628add4: 	private Collection 	topGainers;		/* Collection of top gaining stocks */
1:628add4: 	private Collection 	topLosers;		/* Collection of top losing stocks */	
1:628add4: 	//FUTURE private Collection 	topVolume;		/* Collection of top stocks by volume */		
1:628add4: 	private Date			summaryDate;   /* Date this summary was taken */
1:628add4: 	
1:628add4: 	//cache the gainPercent once computed for this bean
1:628add4: 	private BigDecimal  gainPercent=null;
1:628add4: 
1:628add4: 	public MarketSummaryDataBean(){ }
1:628add4: 	public MarketSummaryDataBean(BigDecimal TSIA,
1:628add4: 							BigDecimal  openTSIA,
1:628add4: 							double		volume,
1:628add4: 							Collection 	topGainers,
1:628add4: 							Collection 	topLosers//, Collection topVolume
1:628add4: 							)
1:628add4: 	{
1:628add4: 		setTSIA(TSIA);
1:628add4: 		setOpenTSIA(openTSIA);
1:628add4: 		setVolume(volume);
1:628add4: 		setTopGainers(topGainers);
1:628add4: 		setTopLosers(topLosers);
1:628add4: 		setSummaryDate(new java.sql.Date(System.currentTimeMillis()));
1:628add4: 		gainPercent = FinancialUtils.computeGainPercent(getTSIA(), getOpenTSIA());
1:628add4: 		
1:628add4: 	}
1:628add4: 	
1:628add4: 
1:628add4: 	public String toString()
1:628add4: 	{
1:628add4: 		String ret = "\n\tMarket Summary at: " + getSummaryDate()
1:628add4: 			+ "\n\t\t        TSIA:" + getTSIA()
1:628add4: 			+ "\n\t\t    openTSIA:" + getOpenTSIA()
1:628add4: 			+ "\n\t\t        gain:" + getGainPercent()
1:628add4: 			+ "\n\t\t      volume:" + getVolume()
1:628add4: 			;
1:628add4: 
1:628add4: 		if ( (getTopGainers()==null) || (getTopLosers()==null) )
1:628add4: 			return ret;
1:628add4: 		ret += "\n\t\t   Current Top Gainers:";
1:628add4: 		Iterator it = getTopGainers().iterator();
1:628add4: 		while ( it.hasNext() ) 
1:628add4: 		{
1:628add4: 			QuoteDataBean quoteData = (QuoteDataBean) it.next();
1:628add4: 			ret += ( "\n\t\t\t"  + quoteData.toString() );
1:628add4: 		}
1:628add4: 		ret += "\n\t\t   Current Top Losers:";
1:628add4: 		it = getTopLosers().iterator();
1:628add4: 		while ( it.hasNext() ) 
1:628add4: 		{
1:628add4: 			QuoteDataBean quoteData = (QuoteDataBean) it.next();
1:628add4: 			ret += ( "\n\t\t\t"  + quoteData.toString() );
1:628add4: 		}
1:628add4: 		return ret;		
1:628add4: 	}
1:628add4: 	public String toHTML()
1:628add4: 	{
1:628add4: 		String ret = "<BR>Market Summary at: " + getSummaryDate()
1:628add4: 			+ "<LI>        TSIA:" + getTSIA() + "</LI>"
1:628add4: 			+ "<LI>    openTSIA:" + getOpenTSIA() + "</LI>"
1:628add4: 			+ "<LI>      volume:" + getVolume() + "</LI>"
1:628add4: 			;
1:628add4: 		if ( (getTopGainers()==null) || (getTopLosers()==null) )
1:628add4: 			return ret;
1:628add4: 		ret += "<BR> Current Top Gainers:";
1:628add4: 		Iterator it = getTopGainers().iterator();
1:628add4: 		while ( it.hasNext() ) 
1:628add4: 		{
1:628add4: 			QuoteDataBean quoteData = (QuoteDataBean) it.next();
1:628add4: 			ret += ( "<LI>"  + quoteData.toString()  + "</LI>" );
1:628add4: 		}
1:628add4: 		ret += "<BR>   Current Top Losers:";
1:628add4: 		it = getTopLosers().iterator();
1:628add4: 		while ( it.hasNext() ) 
1:628add4: 		{
1:628add4: 			QuoteDataBean quoteData = (QuoteDataBean) it.next();
1:628add4: 			ret += ( "<LI>"  + quoteData.toString()  + "</LI>" );
1:628add4: 		}
1:628add4: 		return ret;
1:628add4: 	}
1:628add4: 	public void print()
1:628add4: 	{
1:628add4: 		Log.log( this.toString() );
1:628add4: 	}	
1:628add4: 	
1:628add4: 	public BigDecimal getGainPercent()
1:628add4: 	{
1:628add4: 		if ( gainPercent == null )
1:628add4: 			gainPercent = FinancialUtils.computeGainPercent(getTSIA(), getOpenTSIA());
1:628add4: 		return gainPercent;
1:628add4: 	}
1:628add4: 
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Gets the tSIA
1:628add4: 	 * @return Returns a BigDecimal
1:628add4: 	 */
1:628add4: 	public BigDecimal getTSIA() {
1:628add4: 		return TSIA;
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Sets the tSIA
1:628add4: 	 * @param tSIA The tSIA to set
1:628add4: 	 */
1:628add4: 	public void setTSIA(BigDecimal tSIA) {
1:628add4: 		TSIA = tSIA;
1:628add4: 	}
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Gets the openTSIA
1:628add4: 	 * @return Returns a BigDecimal
1:628add4: 	 */
1:628add4: 	public BigDecimal getOpenTSIA() {
1:628add4: 		return openTSIA;
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Sets the openTSIA
1:628add4: 	 * @param openTSIA The openTSIA to set
1:628add4: 	 */
1:628add4: 	public void setOpenTSIA(BigDecimal openTSIA) {
1:628add4: 		this.openTSIA = openTSIA;
1:628add4: 	}
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Gets the volume
1:628add4: 	 * @return Returns a BigDecimal
1:628add4: 	 */
1:628add4: 	public double getVolume() {
1:628add4: 		return volume;
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Sets the volume
1:628add4: 	 * @param volume The volume to set
1:628add4: 	 */
1:628add4: 	public void setVolume(double volume) {
1:628add4: 		this.volume = volume;
1:628add4: 	}
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Gets the topGainers
1:628add4: 	 * @return Returns a Collection
1:628add4: 	 */
1:628add4: 	public Collection getTopGainers() {
1:628add4: 		return topGainers;
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Sets the topGainers
1:628add4: 	 * @param topGainers The topGainers to set
1:628add4: 	 */
1:628add4: 	public void setTopGainers(Collection topGainers) {
1:628add4: 		this.topGainers = topGainers;
1:628add4: 	}
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Gets the topLosers
1:628add4: 	 * @return Returns a Collection
1:628add4: 	 */
1:628add4: 	public Collection getTopLosers() {
1:628add4: 		return topLosers;
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Sets the topLosers
1:628add4: 	 * @param topLosers The topLosers to set
1:628add4: 	 */
1:628add4: 	public void setTopLosers(Collection topLosers) {
1:628add4: 		this.topLosers = topLosers;
1:628add4: 	}
1:628add4: 
1:628add4: 	/**
1:628add4: 	 * Gets the summaryDate
1:628add4: 	 * @return Returns a Date
1:628add4: 	 */
1:628add4: 	public Date getSummaryDate() {
1:628add4: 		return summaryDate;
1:628add4: 	}
1:628add4: 	/**
1:628add4: 	 * Sets the summaryDate
1:628add4: 	 * @param summaryDate The summaryDate to set
1:628add4: 	 */
1:628add4: 	public void setSummaryDate(Date summaryDate) {
1:628add4: 		this.summaryDate = summaryDate;
1:628add4: 	}
1:628add4: 
1:628add4: }
============================================================================
author:Joseph Alan Bohn
-------------------------------------------------------------------------------
commit:39f53f6
commit:b8c0170
/////////////////////////////////////////////////////////////////////////
commit:880e087
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.samples.ariestrader.api.persistence;
commit:989ba4e
commit:56a6860
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.ariestrader.persistence.api;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.samples.ariestrader.util.FinancialUtils;
1: import org.apache.aries.samples.ariestrader.util.Log;
1: import org.apache.aries.samples.ariestrader.util.TradeConfig;
commit:3be9855
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.samples.daytrader.persistence.api;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.samples.daytrader.util.FinancialUtils;
0: import org.apache.aries.samples.daytrader.util.Log;
0: import org.apache.aries.samples.daytrader.util.TradeConfig;
commit:92b2ae7
commit:3d66c06
commit:628add4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
0: package org.apache.geronimo.samples.daytrader.persistence.api;
1: 
1: import java.io.Serializable;
1: import java.math.BigDecimal;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Date;
1: import java.util.Iterator;
1: 
0: import org.apache.geronimo.samples.daytrader.util.FinancialUtils;
0: import org.apache.geronimo.samples.daytrader.util.Log;
0: import org.apache.geronimo.samples.daytrader.util.TradeConfig;
1: 
1: public class MarketSummaryDataBean implements Serializable
1: {
1: 
1: 	private BigDecimal 	TSIA;			/* Trade Stock Index Average */
1: 	private BigDecimal 	openTSIA;		/* Trade Stock Index Average at the open */	
1: 	private double  	volume; 		/* volume of shares traded */
1: 	private Collection 	topGainers;		/* Collection of top gaining stocks */
1: 	private Collection 	topLosers;		/* Collection of top losing stocks */	
1: 	//FUTURE private Collection 	topVolume;		/* Collection of top stocks by volume */		
1: 	private Date			summaryDate;   /* Date this summary was taken */
1: 	
1: 	//cache the gainPercent once computed for this bean
1: 	private BigDecimal  gainPercent=null;
1: 
1: 	public MarketSummaryDataBean(){ }
1: 	public MarketSummaryDataBean(BigDecimal TSIA,
1: 							BigDecimal  openTSIA,
1: 							double		volume,
1: 							Collection 	topGainers,
1: 							Collection 	topLosers//, Collection topVolume
1: 							)
1: 	{
1: 		setTSIA(TSIA);
1: 		setOpenTSIA(openTSIA);
1: 		setVolume(volume);
1: 		setTopGainers(topGainers);
1: 		setTopLosers(topLosers);
1: 		setSummaryDate(new java.sql.Date(System.currentTimeMillis()));
1: 		gainPercent = FinancialUtils.computeGainPercent(getTSIA(), getOpenTSIA());
1: 		
1: 	}
1: 	
0: //	public static MarketSummaryDataBean getRandomInstance() {
0: //		Collection gain = new ArrayList();
0: //		Collection lose = new ArrayList();
0: //		
0: //		for (int ii = 0; ii < 5; ii++) {
0: //			QuoteDataBean quote1 = QuoteDataBean.getRandomInstance();
0: //			QuoteDataBean quote2 = QuoteDataBean.getRandomInstance();
0: //			
0: //			gain.add(quote1);
0: //			lose.add(quote2);
0: //		}
0: //		
0: //		return new MarketSummaryDataBean(
0: //			TradeConfig.rndBigDecimal(1000000.0f),
0: //			TradeConfig.rndBigDecimal(1000000.0f),
0: //			TradeConfig.rndQuantity(),
0: //			gain,
0: //			lose
0: //		);
0: //	}
1: 
1: 	public String toString()
1: 	{
1: 		String ret = "\n\tMarket Summary at: " + getSummaryDate()
1: 			+ "\n\t\t        TSIA:" + getTSIA()
1: 			+ "\n\t\t    openTSIA:" + getOpenTSIA()
1: 			+ "\n\t\t        gain:" + getGainPercent()
1: 			+ "\n\t\t      volume:" + getVolume()
1: 			;
1: 
1: 		if ( (getTopGainers()==null) || (getTopLosers()==null) )
1: 			return ret;
1: 		ret += "\n\t\t   Current Top Gainers:";
1: 		Iterator it = getTopGainers().iterator();
1: 		while ( it.hasNext() ) 
1: 		{
1: 			QuoteDataBean quoteData = (QuoteDataBean) it.next();
1: 			ret += ( "\n\t\t\t"  + quoteData.toString() );
1: 		}
1: 		ret += "\n\t\t   Current Top Losers:";
1: 		it = getTopLosers().iterator();
1: 		while ( it.hasNext() ) 
1: 		{
1: 			QuoteDataBean quoteData = (QuoteDataBean) it.next();
1: 			ret += ( "\n\t\t\t"  + quoteData.toString() );
1: 		}
1: 		return ret;		
1: 	}
1: 	public String toHTML()
1: 	{
1: 		String ret = "<BR>Market Summary at: " + getSummaryDate()
1: 			+ "<LI>        TSIA:" + getTSIA() + "</LI>"
1: 			+ "<LI>    openTSIA:" + getOpenTSIA() + "</LI>"
1: 			+ "<LI>      volume:" + getVolume() + "</LI>"
1: 			;
1: 		if ( (getTopGainers()==null) || (getTopLosers()==null) )
1: 			return ret;
1: 		ret += "<BR> Current Top Gainers:";
1: 		Iterator it = getTopGainers().iterator();
1: 		while ( it.hasNext() ) 
1: 		{
1: 			QuoteDataBean quoteData = (QuoteDataBean) it.next();
1: 			ret += ( "<LI>"  + quoteData.toString()  + "</LI>" );
1: 		}
1: 		ret += "<BR>   Current Top Losers:";
1: 		it = getTopLosers().iterator();
1: 		while ( it.hasNext() ) 
1: 		{
1: 			QuoteDataBean quoteData = (QuoteDataBean) it.next();
1: 			ret += ( "<LI>"  + quoteData.toString()  + "</LI>" );
1: 		}
1: 		return ret;
1: 	}
1: 	public void print()
1: 	{
1: 		Log.log( this.toString() );
1: 	}	
1: 	
1: 	public BigDecimal getGainPercent()
1: 	{
1: 		if ( gainPercent == null )
1: 			gainPercent = FinancialUtils.computeGainPercent(getTSIA(), getOpenTSIA());
1: 		return gainPercent;
1: 	}
1: 
1: 
1: 	/**
1: 	 * Gets the tSIA
1: 	 * @return Returns a BigDecimal
1: 	 */
1: 	public BigDecimal getTSIA() {
1: 		return TSIA;
1: 	}
1: 	/**
1: 	 * Sets the tSIA
1: 	 * @param tSIA The tSIA to set
1: 	 */
1: 	public void setTSIA(BigDecimal tSIA) {
1: 		TSIA = tSIA;
1: 	}
1: 
1: 	/**
1: 	 * Gets the openTSIA
1: 	 * @return Returns a BigDecimal
1: 	 */
1: 	public BigDecimal getOpenTSIA() {
1: 		return openTSIA;
1: 	}
1: 	/**
1: 	 * Sets the openTSIA
1: 	 * @param openTSIA The openTSIA to set
1: 	 */
1: 	public void setOpenTSIA(BigDecimal openTSIA) {
1: 		this.openTSIA = openTSIA;
1: 	}
1: 
1: 	/**
1: 	 * Gets the volume
1: 	 * @return Returns a BigDecimal
1: 	 */
1: 	public double getVolume() {
1: 		return volume;
1: 	}
1: 	/**
1: 	 * Sets the volume
1: 	 * @param volume The volume to set
1: 	 */
1: 	public void setVolume(double volume) {
1: 		this.volume = volume;
1: 	}
1: 
1: 	/**
1: 	 * Gets the topGainers
1: 	 * @return Returns a Collection
1: 	 */
1: 	public Collection getTopGainers() {
1: 		return topGainers;
1: 	}
1: 	/**
1: 	 * Sets the topGainers
1: 	 * @param topGainers The topGainers to set
1: 	 */
1: 	public void setTopGainers(Collection topGainers) {
1: 		this.topGainers = topGainers;
1: 	}
1: 
1: 	/**
1: 	 * Gets the topLosers
1: 	 * @return Returns a Collection
1: 	 */
1: 	public Collection getTopLosers() {
1: 		return topLosers;
1: 	}
1: 	/**
1: 	 * Sets the topLosers
1: 	 * @param topLosers The topLosers to set
1: 	 */
1: 	public void setTopLosers(Collection topLosers) {
1: 		this.topLosers = topLosers;
1: 	}
1: 
1: 	/**
1: 	 * Gets the summaryDate
1: 	 * @return Returns a Date
1: 	 */
1: 	public Date getSummaryDate() {
1: 		return summaryDate;
1: 	}
1: 	/**
1: 	 * Sets the summaryDate
1: 	 * @param summaryDate The summaryDate to set
1: 	 */
1: 	public void setSummaryDate(Date summaryDate) {
1: 		this.summaryDate = summaryDate;
1: 	}
1: 
1: }
============================================================================