1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
2:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
3:bf5a863: 
1:fdf3952: import static org.junit.Assert.assertEquals;
1:fdf3952: import static org.junit.Assert.assertNotNull;
1:fdf3952: import static org.junit.Assert.assertNull;
1:fdf3952: import static org.junit.Assert.assertTrue;
1:0a8778f: import static org.ops4j.pax.exam.CoreOptions.options;
1:bf5a863: 
1:fdf3952: import java.util.ArrayList;
1:fdf3952: import java.util.Arrays;
1:c8116cd: import java.util.Collection;
1:eb663f7: import java.util.Dictionary;
1:282cfcd: import java.util.HashMap;
1:cbbcd95: import java.util.HashSet;
1:5040e04: import java.util.Hashtable;
1:fdf3952: import java.util.List;
1:282cfcd: import java.util.Map;
1:cbbcd95: import java.util.Set;
1:bf5a863: 
1:eb663f7: import javax.management.AttributeChangeNotification;
1:fdf3952: import javax.management.Notification;
1:fdf3952: import javax.management.NotificationListener;
1:fdf3952: import javax.management.ObjectName;
1:cbbcd95: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.TabularData;
1:bf5a863: 
1:0a8778f: import junit.framework.Assert;
1:0a8778f: 
1:fdf3952: import org.apache.aries.jmx.AbstractIntegrationTest;
1:fdf3952: import org.apache.aries.jmx.codec.PropertyData;
1:fdf3952: import org.apache.aries.jmx.test.bundlea.api.InterfaceA;
1:fdf3952: import org.apache.aries.jmx.test.bundleb.api.InterfaceB;
1:0a8778f: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:0a8778f: import org.ops4j.pax.exam.Configuration;
1:fdf3952: import org.ops4j.pax.exam.Option;
1:0a8778f: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:0a8778f: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.Constants;
1:fdf3952: import org.osgi.framework.ServiceReference;
1:eb663f7: import org.osgi.framework.ServiceRegistration;
1:fdf3952: import org.osgi.jmx.JmxConstants;
1:fdf3952: import org.osgi.jmx.framework.ServiceStateMBean;
1:fdf3952: import org.osgi.service.cm.ManagedService;
1:fdf3952: import org.osgi.service.cm.ManagedServiceFactory;
1:bf5a863: 
1:fdf3952: /**
1:bf5a863:  *
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:0a8778f: @ExamReactorStrategy(PerMethod.class)
1:fdf3952: public class ServiceStateMBeanTest extends AbstractIntegrationTest {
1:0a8778f: 	
1:0a8778f:     private ObjectName objectName;
1:0a8778f: 	private ServiceStateMBean mbean;
1:bf5a863: 
1:fdf3952:     @Configuration
1:0a8778f:     public Option[] configuration() {
1:0a8778f: 		return options(
1:0a8778f: 		        // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
1:0a8778f: 		        // new TimeoutOption( 0 ),
1:0a8778f: 				jmxRuntime(), 
1:0a8778f: 				bundlea(), 
1:0a8778f: 				bundleb()
1:0a8778f: 				);
1:bf5a863:     }
1:0a8778f:     
1:0a8778f:     @Before
1:0a8778f:     public void doSetUp() {
1:0a8778f:         waitForMBean(ServiceStateMBean.OBJECTNAME);
1:0a8778f:         objectName = waitForMBean(ServiceStateMBean.OBJECTNAME);
1:0a8778f:         mbean = getMBean(objectName, ServiceStateMBean.class);
1:0a8778f:         assertNotNull(mbean);
5:fdf3952:     }
1:cbbcd95: 
1:eb663f7:     @Test
1:5040e04:     public void testObjectName() throws Exception {
1:5040e04:         Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(ServiceStateMBean.OBJECTNAME + ",*"), null);
1:5040e04:         assertEquals(1, names.size());
1:5040e04:         ObjectName name = names.iterator().next();
1:5040e04:         Hashtable<String, String> props = name.getKeyPropertyList();
1:5040e04:         assertEquals(context().getProperty(Constants.FRAMEWORK_UUID), props.get("uuid"));
1:5040e04:         assertEquals(context().getBundle(0).getSymbolicName(), props.get("framework"));
1:5040e04:     }
1:282cfcd: 
1:5040e04:     @Test
1:fdf3952:     public void testMBeanInterface() throws Exception {
1:fdf3952:         //get bundles
1:0a8778f:         Bundle a = getBundleByName("org.apache.aries.jmx.test.bundlea");
1:0a8778f:         assertBundleStarted(a);
1:0a8778f:         Bundle b = getBundleByName("org.apache.aries.jmx.test.bundleb");
1:0a8778f:         assertBundleStarted(b);
1:5040e04: 
1:fdf3952:         // get services
1:9516abb: 
1:988cc71:         ServiceReference refA = bundleContext.getServiceReference(InterfaceA.class.getName());
1:fdf3952:         assertNotNull(refA);
1:fdf3952:         long serviceAId = (Long) refA.getProperty(Constants.SERVICE_ID);
1:fdf3952:         assertTrue(serviceAId > -1);
1:9516abb: 
1:988cc71:         ServiceReference refB = bundleContext.getServiceReference(InterfaceB.class.getName());
1:fdf3952:         assertNotNull(refB);
1:fdf3952:         long serviceBId = (Long) refB.getProperty(Constants.SERVICE_ID);
1:fdf3952:         assertTrue(serviceBId > -1);
1:15d33bc: 
1:988cc71:         ServiceReference[] refs = bundleContext.getServiceReferences(ManagedServiceFactory.class.getName(), "(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
1:fdf3952:         assertNotNull(refs);
1:fdf3952:         assertEquals(1, refs.length);
1:988cc71:         ServiceReference msf = refs[0];
1:15d33bc: 
1:bf5a863: 
1:fdf3952:         // getBundleIdentifier
1:bf5a863: 
1:fdf3952:         assertEquals(a.getBundleId(), mbean.getBundleIdentifier(serviceAId));
1:bf5a863: 
1:fdf3952:         //getObjectClass
1:bf5a863: 
1:fdf3952:         String[] objectClass = mbean.getObjectClass(serviceAId);
1:fdf3952:         assertEquals(2, objectClass.length);
1:fdf3952:         List<String> classNames = Arrays.asList(objectClass);
1:fdf3952:         assertTrue(classNames.contains(InterfaceA.class.getName()));
1:fdf3952:         assertTrue(classNames.contains(ManagedService.class.getName()));
1:bf5a863: 
1:fdf3952:         // getProperties
1:bf5a863: 
1:fdf3952:         TabularData serviceProperties = mbean.getProperties(serviceBId);
1:fdf3952:         assertNotNull(serviceProperties);
1:fdf3952:         assertEquals(JmxConstants.PROPERTIES_TYPE, serviceProperties.getTabularType());
1:fdf3952:         assertTrue(serviceProperties.values().size() > 1);
1:bf5a863:         assertEquals("org.apache.aries.jmx.test.ServiceB",
1:fdf3952:                 PropertyData.from(serviceProperties.get(new Object[] { Constants.SERVICE_PID })).getValue());
1:bf5a863: 
1:fdf3952:         // getUsingBundles
1:bf5a863: 
1:fdf3952:         long[] usingBundles = mbean.getUsingBundles(serviceBId);
1:fdf3952:         assertEquals(1, usingBundles.length);
1:fdf3952:         assertEquals(a.getBundleId(), usingBundles[0]);
1:bf5a863: 
1:fdf3952:         // listServices
1:bf5a863: 
1:988cc71:         ServiceReference[] allSvsRefs = bundleContext.getAllServiceReferences(null, null);
1:fdf3952:         TabularData allServices = mbean.listServices();
1:fdf3952:         assertNotNull(allServices);
1:15d33bc:         assertEquals(allSvsRefs.length, allServices.values().size());
1:bf5a863: 
1:fdf3952:         // notifications
1:bf5a863: 
1:fdf3952:         final List<Notification> received = new ArrayList<Notification>();
1:eb663f7:         final List<AttributeChangeNotification> attributeChanges = new ArrayList<AttributeChangeNotification>();
1:bf5a863: 
1:7186eab:         mbeanServer.addNotificationListener(objectName, new NotificationListener() {
1:fdf3952:             public void handleNotification(Notification notification, Object handback) {
1:eb663f7:                 if (notification instanceof AttributeChangeNotification) {
1:eb663f7:                     attributeChanges.add((AttributeChangeNotification) notification);
1:eb663f7:                 } else {
1:eb663f7:                     received.add(notification);
1:eb663f7:                 }
1:eb663f7:             }
1:fdf3952:         }, null, null);
1:bf5a863: 
1:bf5a863: 
1:fdf3952:         assertNotNull(refB);
1:fdf3952:         assertNotNull(msf);
1:fdf3952:         b.stop();
1:bf5a863:         refB = bundleContext.getServiceReference(InterfaceB.class.getName());
1:fdf3952:         refs = bundleContext.getServiceReferences(ManagedServiceFactory.class.getName(), "(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
1:fdf3952:         assertNull(refs);
1:fdf3952:         assertNull(refB);
1:fdf3952:         b.start();
2:fdf3952:         refB = bundleContext.getServiceReference(InterfaceB.class.getName());
1:fdf3952:         refs = bundleContext.getServiceReferences(ManagedServiceFactory.class.getName(), "(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
1:fdf3952:         assertNotNull(refB);
1:fdf3952:         assertNotNull(refs);
1:fdf3952:         assertEquals(1, refs.length);
1:bf5a863: 
1:eb663f7:         waitForListToReachSize(received, 4);
1:bf5a863: 
1:fdf3952:         assertEquals(4, received.size());
1:eb663f7:         assertEquals(4, attributeChanges.size());
1:eb663f7:     }
1:eb663f7: 
1:0a8778f: 	private void assertBundleStarted(Bundle bundle) {
1:0a8778f: 		Assert.assertEquals("Bundle " + bundle.getSymbolicName() + " should be started but is in state " + bundle.getState(),
1:0a8778f: 				Bundle.ACTIVE, bundle.getState());
1:0a8778f: 	}
1:bf5a863: 
1:0a8778f: 	@Test
1:0a8778f:     public void testAttributeChangeNotifications() throws Exception {
1:eb663f7:         final List<AttributeChangeNotification> attributeChanges = new ArrayList<AttributeChangeNotification>();
1:eb663f7:         mbeanServer.addNotificationListener(objectName, new NotificationListener() {
1:eb663f7:             public void handleNotification(Notification notification, Object handback) {
1:eb663f7:                 if (notification instanceof AttributeChangeNotification) {
1:eb663f7:                     attributeChanges.add((AttributeChangeNotification) notification);
1:eb663f7:                 }
1:eb663f7:             }
1:eb663f7:         }, null, null);
1:eb663f7: 
1:eb663f7:         assertEquals("Precondition", 0, attributeChanges.size());
1:eb663f7: 
1:d98b820:         long[] idsWithout = mbean.getServiceIds();
1:eb663f7: 
1:eb663f7:         String svc = "A String Service";
1:988cc71:         ServiceRegistration reg = bundleContext.registerService(String.class.getName(), svc, null);
1:eb663f7:         long id = (Long) reg.getReference().getProperty(Constants.SERVICE_ID);
1:eb663f7: 
1:d98b820:         long[] idsWith = new long[idsWithout.length + 1];
1:d98b820:         System.arraycopy(idsWithout, 0, idsWith, 0, idsWithout.length);
1:d98b820:         idsWith[idsWith.length - 1] = id;
1:d98b820:         Arrays.sort(idsWith);
1:eb663f7: 
1:eb663f7:         waitForListToReachSize(attributeChanges, 1);
1:eb663f7:         AttributeChangeNotification ac = attributeChanges.get(0);
1:eb663f7:         assertEquals("ServiceIds", ac.getAttributeName());
1:0a8778f:         long seq1 = ac.getSequenceNumber();
1:d98b820:         assertTrue(Arrays.equals(idsWithout, (long []) ac.getOldValue()));
1:d98b820:         assertTrue(Arrays.equals(idsWith, (long []) ac.getNewValue()));
1:eb663f7: 
1:eb663f7:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:eb663f7:         props.put("somekey", "someval");
1:eb663f7:         reg.setProperties(props);
1:eb663f7: 
1:eb663f7:         // Setting the properties updates the service registration, however it should not cause the attribute notification
1:eb663f7:         Thread.sleep(500); // Give the system a bit of time to send potential notifications
1:eb663f7:         assertEquals("Changing the service registration should not cause an attribute notification",
1:eb663f7:                 1, attributeChanges.size());
1:eb663f7: 
1:eb663f7:         reg.unregister();
1:eb663f7: 
1:eb663f7:         waitForListToReachSize(attributeChanges, 2);
1:eb663f7:         AttributeChangeNotification ac2 = attributeChanges.get(1);
1:eb663f7:         assertEquals("ServiceIds", ac2.getAttributeName());
1:0a8778f:         assertEquals(seq1 +1, ac2.getSequenceNumber());
1:d98b820:         assertTrue(Arrays.equals(idsWith, (long []) ac2.getOldValue()));
1:d98b820:         assertTrue(Arrays.equals(idsWithout, (long []) ac2.getNewValue()));
1:fdf3952:     }
1:bf5a863: 
1:c8116cd:     @Test
1:15d33bc:     public void testGetServiceIds() throws Exception {
1:988cc71:         ServiceReference[] allSvsRefs = bundleContext.getAllServiceReferences(null, null);
1:15d33bc:         long[] expectedServiceIds = new long[allSvsRefs.length];
1:15d33bc:         for (int i=0; i < allSvsRefs.length; i++) {
1:15d33bc:             expectedServiceIds[i] = (Long) allSvsRefs[i].getProperty(Constants.SERVICE_ID);
1:15d33bc:         }
1:15d33bc:         long[] actualServiceIds = mbean.getServiceIds();
1:15d33bc:         Arrays.sort(expectedServiceIds);
1:15d33bc:         Arrays.sort(actualServiceIds);
1:15d33bc:         assertTrue(Arrays.equals(expectedServiceIds, actualServiceIds));
1:15d33bc:     }
1:cbbcd95: 
1:cbbcd95:     @Test
1:305da5d:     public void testGetServiceAndGetProperty() throws Exception {
1:0a8778f:     	
1:988cc71:         ServiceReference sref = bundleContext.getServiceReference(InterfaceA.class);
1:0a8778f:         // Get service to increase service references
1:0a8778f:         context().getService(sref);
1:cbbcd95:         Long serviceID = (Long) sref.getProperty(Constants.SERVICE_ID);
1:cbbcd95: 
1:cbbcd95:         CompositeData svcData  = mbean.getService(serviceID);
1:cbbcd95:         assertEquals(serviceID, svcData.get(ServiceStateMBean.IDENTIFIER));
1:cbbcd95:         assertEquals(sref.getBundle().getBundleId(), svcData.get(ServiceStateMBean.BUNDLE_IDENTIFIER));
1:cbbcd95:         Set<String> expectedClasses = new HashSet<String>(Arrays.asList(InterfaceA.class.getName(), ManagedService.class.getName()));
1:cbbcd95:         Set<String> actualClasses = new HashSet<String>(Arrays.asList((String []) svcData.get(ServiceStateMBean.OBJECT_CLASS)));
1:cbbcd95:         assertEquals(expectedClasses, actualClasses);
1:cbbcd95:         Bundle[] ub = sref.getUsingBundles();
1:cbbcd95:         assertEquals("Precondition", 1, ub.length);
1:cbbcd95:         assertTrue(Arrays.equals(new Long[] {ub[0].getBundleId()}, (Long[]) svcData.get("UsingBundles")));
1:305da5d: 
1:305da5d:         // Test mbean.getProperty()
1:305da5d:         String pid = (String) sref.getProperty(Constants.SERVICE_PID);
1:305da5d:         CompositeData pidData = mbean.getProperty(serviceID, Constants.SERVICE_PID);
1:305da5d:         assertEquals(pid, pidData.get("Value"));
1:305da5d:         assertEquals("String", pidData.get("Type"));
1:305da5d: 
1:305da5d:         CompositeData idData = mbean.getProperty(serviceID, Constants.SERVICE_ID);
1:305da5d:         assertEquals("" + serviceID, idData.get("Value"));
1:305da5d:         assertEquals("Long", idData.get("Type"));
1:305da5d: 
1:305da5d:         CompositeData ocData = mbean.getProperty(serviceID, Constants.OBJECTCLASS);
1:305da5d:         String form1 = InterfaceA.class.getName() + "," + ManagedService.class.getName();
1:305da5d:         String form2 = ManagedService.class.getName() + "," + InterfaceA.class.getName();
1:305da5d:         assertTrue(ocData.get("Value").equals(form1) ||
1:305da5d:                    ocData.get("Value").equals(form2));
1:305da5d:         assertEquals("Array of String", ocData.get("Type"));
1:0a8778f:         context().ungetService(sref);
1:cbbcd95:     }
1:9516abb: 
1:9516abb:     @Test
1:282cfcd:     @SuppressWarnings("unchecked")
1:282cfcd:     public void testServicePropertiesInListServices() throws Exception {
1:988cc71:         ServiceReference[] refs = bundleContext.getAllServiceReferences(InterfaceA.class.getName(), null);
1:282cfcd:         assertEquals("Precondition", 1, refs.length);
1:988cc71:         ServiceReference ref = refs[0];
1:282cfcd: 
1:282cfcd:         TabularData svcTab = mbean.listServices();
1:282cfcd:         CompositeData svcData = svcTab.get(new Object [] {ref.getProperty(Constants.SERVICE_ID)});
1:282cfcd: 
1:282cfcd:         Set<String> expectedOCs = new HashSet<String>(Arrays.asList(
1:282cfcd:                 InterfaceA.class.getName(), ManagedService.class.getName()));
1:282cfcd:         Set<String> actualOCs = new HashSet<String>(
1:282cfcd:                 Arrays.asList((String [])svcData.get(Constants.OBJECTCLASS)));
1:282cfcd:         assertEquals(expectedOCs, actualOCs);
1:282cfcd: 
1:282cfcd:         Map<String, Object> expectedProperties = new HashMap<String, Object>();
1:282cfcd:         for (String key : ref.getPropertyKeys()) {
1:282cfcd:             Object value = ref.getProperty(key);
1:282cfcd:             if (value.getClass().isArray())
1:282cfcd:                 continue;
1:282cfcd: 
1:282cfcd:             expectedProperties.put(key, value);
1:282cfcd:         }
1:282cfcd: 
1:282cfcd:         Map<String, Object> actualProperties = new HashMap<String, Object>();
1:282cfcd:         TabularData actualProps = (TabularData) svcData.get(ServiceStateMBean.PROPERTIES);
1:282cfcd:         for (CompositeData cd : (Collection<CompositeData>) actualProps.values()) {
1:282cfcd:             Object type = cd.get(JmxConstants.TYPE);
1:282cfcd:             if (JmxConstants.STRING.equals(type)) {
1:282cfcd:                 actualProperties.put((String) cd.get(JmxConstants.KEY), cd.get(JmxConstants.VALUE));
1:282cfcd:             } else if (JmxConstants.LONG.equals(type)) {
1:282cfcd:                 actualProperties.put((String) cd.get(JmxConstants.KEY), Long.valueOf(cd.get(JmxConstants.VALUE).toString()));
1:282cfcd:             }
1:282cfcd:         }
1:282cfcd: 
1:282cfcd:         assertEquals(expectedProperties, actualProperties);
1:282cfcd:     }
1:282cfcd: 
1:282cfcd:     @Test
1:9516abb:     public void testListServices() throws Exception {
1:9516abb:         String filter = "(" + Constants.SERVICE_PID + "=*)";
1:988cc71:         ServiceReference[] refs = bundleContext.getAllServiceReferences(null, filter);
1:9516abb:         TabularData svcData = mbean.listServices(null, filter);
1:9516abb:         assertEquals(refs.length, svcData.size());
1:c8116cd: 
1:988cc71:         ServiceReference sref = bundleContext.getServiceReference(InterfaceA.class);
1:c8116cd:         TabularData svcTab = mbean.listServices(InterfaceA.class.getName(), null);
1:c8116cd:         assertEquals(1, svcTab.size());
1:c8116cd:         CompositeData actualSvc = (CompositeData) svcTab.values().iterator().next();
1:9516abb:         CompositeData expectedSvc = mbean.getService((Long) sref.getProperty(Constants.SERVICE_ID));
1:9516abb:         assertEquals(expectedSvc, actualSvc);
1:9516abb:     }
1:c8116cd: 
1:0a8778f:     @SuppressWarnings("unchecked")
1:0a8778f: 	@Test
1:c8116cd:     public void testListServicesSelectiveItems() throws Exception {
1:c8116cd:         String filter = "(|(service.pid=org.apache.aries.jmx.test.ServiceB)(service.pid=jmx.test.B.factory))";
1:988cc71:         ServiceReference[] refs = bundleContext.getAllServiceReferences(null, filter);
1:c8116cd:         TabularData svcData = mbean.listServices(null, filter, ServiceStateMBean.BUNDLE_IDENTIFIER);
1:c8116cd:         assertEquals(refs.length, svcData.size());
1:c8116cd: 
1:c8116cd:         long id = refs[0].getBundle().getBundleId();
1:988cc71:         for (ServiceReference ref : refs) {
1:c8116cd:             assertEquals("Precondition", id, ref.getBundle().getBundleId());
1:c8116cd:         }
1:c8116cd: 
1:c8116cd:         for (CompositeData cd : new ArrayList<CompositeData>((Collection<CompositeData>) svcData.values())) {
1:c8116cd:             assertEquals(id, cd.get(ServiceStateMBean.BUNDLE_IDENTIFIER));
1:c8116cd:             assertNotNull(cd.get(ServiceStateMBean.IDENTIFIER));
1:c8116cd:             assertNull(cd.get(ServiceStateMBean.OBJECT_CLASS));
1:c8116cd:             assertNull(cd.get(ServiceStateMBean.USING_BUNDLES));
1:c8116cd:         }
1:c8116cd:     }
1:eb663f7: 
1:eb663f7:     private void waitForListToReachSize(List<?> list, int targetSize) throws InterruptedException {
1:eb663f7:         int i = 0;
1:eb663f7:         while (list.size() < targetSize && i < 3) {
1:eb663f7:             Thread.sleep(1000);
1:eb663f7:             i++;
1:eb663f7:         }
1:eb663f7:     }
1:fdf3952: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:988cc71
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference refA = bundleContext.getServiceReference(InterfaceA.class.getName());
1:         ServiceReference refB = bundleContext.getServiceReference(InterfaceB.class.getName());
1:         ServiceReference[] refs = bundleContext.getServiceReferences(ManagedServiceFactory.class.getName(), "(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
1:         ServiceReference msf = refs[0];
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] allSvsRefs = bundleContext.getAllServiceReferences(null, null);
/////////////////////////////////////////////////////////////////////////
1:         ServiceRegistration reg = bundleContext.registerService(String.class.getName(), svc, null);
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] allSvsRefs = bundleContext.getAllServiceReferences(null, null);
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference sref = bundleContext.getServiceReference(InterfaceA.class);
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] refs = bundleContext.getAllServiceReferences(InterfaceA.class.getName(), null);
1:         ServiceReference ref = refs[0];
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] refs = bundleContext.getAllServiceReferences(null, filter);
1:         ServiceReference sref = bundleContext.getServiceReference(InterfaceA.class);
/////////////////////////////////////////////////////////////////////////
1:         ServiceReference[] refs = bundleContext.getAllServiceReferences(null, filter);
1:         for (ServiceReference ref : refs) {
author:Christian Schneider
-------------------------------------------------------------------------------
commit:0a8778f
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.options;
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Assert;
1: 
1: import org.junit.Before;
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
/////////////////////////////////////////////////////////////////////////
1: @ExamReactorStrategy(PerMethod.class)
1: 	
1:     private ObjectName objectName;
1: 	private ServiceStateMBean mbean;
1:     public Option[] configuration() {
1: 		return options(
1: 		        // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
1: 		        // new TimeoutOption( 0 ),
1: 				jmxRuntime(), 
1: 				bundlea(), 
1: 				bundleb()
1: 				);
1:     
1:     @Before
1:     public void doSetUp() {
1:         waitForMBean(ServiceStateMBean.OBJECTNAME);
1:         objectName = waitForMBean(ServiceStateMBean.OBJECTNAME);
1:         mbean = getMBean(objectName, ServiceStateMBean.class);
1:         assertNotNull(mbean);
/////////////////////////////////////////////////////////////////////////
1:         Bundle a = getBundleByName("org.apache.aries.jmx.test.bundlea");
1:         assertBundleStarted(a);
1:         Bundle b = getBundleByName("org.apache.aries.jmx.test.bundleb");
1:         assertBundleStarted(b);
0:         ServiceReference<?> refA = bundleContext.getServiceReference(InterfaceA.class.getName());
0:         ServiceReference<?> refB = bundleContext.getServiceReference(InterfaceB.class.getName());
0:         ServiceReference<?>[] refs = bundleContext.getServiceReferences(ManagedServiceFactory.class.getName(), "(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
0:         ServiceReference<?> msf = refs[0];
/////////////////////////////////////////////////////////////////////////
1: 	private void assertBundleStarted(Bundle bundle) {
1: 		Assert.assertEquals("Bundle " + bundle.getSymbolicName() + " should be started but is in state " + bundle.getState(),
1: 				Bundle.ACTIVE, bundle.getState());
1: 	}
1: 	@Test
1:     public void testAttributeChangeNotifications() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         long seq1 = ac.getSequenceNumber();
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(seq1 +1, ac2.getSequenceNumber());
/////////////////////////////////////////////////////////////////////////
1:     	
1:         // Get service to increase service references
1:         context().getService(sref);
/////////////////////////////////////////////////////////////////////////
1:         context().ungetService(sref);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1: 	@Test
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:bf86346
/////////////////////////////////////////////////////////////////////////
0:                         CoreOptions.equinox().version("3.8.0.V20120529-1548"),
commit:d98b820
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         long[] idsWithout = mbean.getServiceIds();
1:         long[] idsWith = new long[idsWithout.length + 1];
1:         System.arraycopy(idsWithout, 0, idsWith, 0, idsWithout.length);
1:         idsWith[idsWith.length - 1] = id;
1:         Arrays.sort(idsWith);
1:         assertTrue(Arrays.equals(idsWithout, (long []) ac.getOldValue()));
1:         assertTrue(Arrays.equals(idsWith, (long []) ac.getNewValue()));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Arrays.equals(idsWith, (long []) ac2.getOldValue()));
1:         assertTrue(Arrays.equals(idsWithout, (long []) ac2.getNewValue()));
commit:eb663f7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
1: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
1: import javax.management.AttributeChangeNotification;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.ServiceRegistration;
/////////////////////////////////////////////////////////////////////////
1:         final List<AttributeChangeNotification> attributeChanges = new ArrayList<AttributeChangeNotification>();
1:                 if (notification instanceof AttributeChangeNotification) {
1:                     attributeChanges.add((AttributeChangeNotification) notification);
1:                 } else {
1:                     received.add(notification);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         waitForListToReachSize(received, 4);
1:         assertEquals(4, attributeChanges.size());
1:     }
1:     @Test
0:     public void testAttributeChangeNotifications() throws Exception {
0:         ObjectName objectName = waitForMBean(new ObjectName(ServiceStateMBean.OBJECTNAME));
0:         ServiceStateMBean mbean = getMBean(objectName, ServiceStateMBean.class);
1: 
1:         final List<AttributeChangeNotification> attributeChanges = new ArrayList<AttributeChangeNotification>();
1:         mbeanServer.addNotificationListener(objectName, new NotificationListener() {
1:             public void handleNotification(Notification notification, Object handback) {
1:                 if (notification instanceof AttributeChangeNotification) {
1:                     attributeChanges.add((AttributeChangeNotification) notification);
1:                 }
1:             }
1:         }, null, null);
1: 
1:         assertEquals("Precondition", 0, attributeChanges.size());
1: 
0:         long[] ids = mbean.getServiceIds();
0:         Long[] idsWithoutService = new Long[ids.length];
0:         for(int i=0; i < ids.length; i++) {
0:             idsWithoutService[i] = ids[i];
1:         }
1: 
1:         String svc = "A String Service";
0:         ServiceRegistration<?> reg = bundleContext.registerService(String.class.getName(), svc, null);
1:         long id = (Long) reg.getReference().getProperty(Constants.SERVICE_ID);
1: 
0:         List<Long> newIDList = new ArrayList<Long>(Arrays.asList(idsWithoutService));
0:         newIDList.add(id);
0:         Collections.sort(newIDList);
0:         Long[] idsWithService = newIDList.toArray(new Long [] {});
1: 
1:         waitForListToReachSize(attributeChanges, 1);
1:         AttributeChangeNotification ac = attributeChanges.get(0);
1:         assertEquals("ServiceIds", ac.getAttributeName());
0:         assertEquals(1, ac.getSequenceNumber());
0:         assertTrue(Arrays.equals(idsWithoutService, (Long []) ac.getOldValue()));
0:         assertTrue(Arrays.equals(idsWithService, (Long []) ac.getNewValue()));
1: 
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put("somekey", "someval");
1:         reg.setProperties(props);
1: 
1:         // Setting the properties updates the service registration, however it should not cause the attribute notification
1:         Thread.sleep(500); // Give the system a bit of time to send potential notifications
1:         assertEquals("Changing the service registration should not cause an attribute notification",
1:                 1, attributeChanges.size());
1: 
1:         reg.unregister();
1: 
1:         waitForListToReachSize(attributeChanges, 2);
1:         AttributeChangeNotification ac2 = attributeChanges.get(1);
1:         assertEquals("ServiceIds", ac2.getAttributeName());
0:         assertEquals(2, ac2.getSequenceNumber());
0:         assertTrue(Arrays.equals(idsWithService, (Long []) ac2.getOldValue()));
0:         assertTrue(Arrays.equals(idsWithoutService, (Long []) ac2.getNewValue()));
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void waitForListToReachSize(List<?> list, int targetSize) throws InterruptedException {
1:         int i = 0;
1:         while (list.size() < targetSize && i < 3) {
1:             Thread.sleep(1000);
1:             i++;
1:         }
1:     }
commit:282cfcd
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:     public void testServicePropertiesInListServices() throws Exception {
0:         ServiceStateMBean mbean = getMBean(ServiceStateMBean.OBJECTNAME, ServiceStateMBean.class);
1: 
0:         ServiceReference<?>[] refs = bundleContext.getAllServiceReferences(InterfaceA.class.getName(), null);
1:         assertEquals("Precondition", 1, refs.length);
0:         ServiceReference<?> ref = refs[0];
1: 
1:         TabularData svcTab = mbean.listServices();
1:         CompositeData svcData = svcTab.get(new Object [] {ref.getProperty(Constants.SERVICE_ID)});
1: 
1:         Set<String> expectedOCs = new HashSet<String>(Arrays.asList(
1:                 InterfaceA.class.getName(), ManagedService.class.getName()));
1:         Set<String> actualOCs = new HashSet<String>(
1:                 Arrays.asList((String [])svcData.get(Constants.OBJECTCLASS)));
1:         assertEquals(expectedOCs, actualOCs);
1: 
1:         Map<String, Object> expectedProperties = new HashMap<String, Object>();
1:         for (String key : ref.getPropertyKeys()) {
1:             Object value = ref.getProperty(key);
1:             if (value.getClass().isArray())
1:                 continue;
1: 
1:             expectedProperties.put(key, value);
1:         }
1: 
1:         Map<String, Object> actualProperties = new HashMap<String, Object>();
1:         TabularData actualProps = (TabularData) svcData.get(ServiceStateMBean.PROPERTIES);
1:         for (CompositeData cd : (Collection<CompositeData>) actualProps.values()) {
1:             Object type = cd.get(JmxConstants.TYPE);
1:             if (JmxConstants.STRING.equals(type)) {
1:                 actualProperties.put((String) cd.get(JmxConstants.KEY), cd.get(JmxConstants.VALUE));
1:             } else if (JmxConstants.LONG.equals(type)) {
1:                 actualProperties.put((String) cd.get(JmxConstants.KEY), Long.valueOf(cd.get(JmxConstants.VALUE).toString()));
1:             }
1:         }
1: 
1:         assertEquals(expectedProperties, actualProperties);
1:     }
1: 
1:     @Test
commit:5040e04
/////////////////////////////////////////////////////////////////////////
1: import java.util.Hashtable;
/////////////////////////////////////////////////////////////////////////
1:     public void testObjectName() throws Exception {
1:         Set<ObjectName> names = mbeanServer.queryNames(new ObjectName(ServiceStateMBean.OBJECTNAME + ",*"), null);
1:         assertEquals(1, names.size());
1:         ObjectName name = names.iterator().next();
1:         Hashtable<String, String> props = name.getKeyPropertyList();
1:         assertEquals(context().getProperty(Constants.FRAMEWORK_UUID), props.get("uuid"));
1:         assertEquals(context().getBundle(0).getSymbolicName(), props.get("framework"));
1:     }
1: 
1:     @Test
commit:7186eab
/////////////////////////////////////////////////////////////////////////
0:         ObjectName objectName = waitForMBean(new ObjectName(ServiceStateMBean.OBJECTNAME));
0:         ServiceStateMBean mbean = getMBean(objectName, ServiceStateMBean.class);
/////////////////////////////////////////////////////////////////////////
1:         mbeanServer.addNotificationListener(objectName, new NotificationListener() {
commit:c8116cd
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                         // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
0:                         // new TimeoutOption( 0 ),
/////////////////////////////////////////////////////////////////////////
1:         TabularData svcTab = mbean.listServices(InterfaceA.class.getName(), null);
1:         assertEquals(1, svcTab.size());
1:         CompositeData actualSvc = (CompositeData) svcTab.values().iterator().next();
1: 
1:     @Test
1:     public void testListServicesSelectiveItems() throws Exception {
0:         ServiceStateMBean mbean = getMBean(ServiceStateMBean.OBJECTNAME, ServiceStateMBean.class);
1: 
1:         String filter = "(|(service.pid=org.apache.aries.jmx.test.ServiceB)(service.pid=jmx.test.B.factory))";
0:         ServiceReference<?>[] refs = bundleContext.getAllServiceReferences(null, filter);
1:         TabularData svcData = mbean.listServices(null, filter, ServiceStateMBean.BUNDLE_IDENTIFIER);
1:         assertEquals(refs.length, svcData.size());
1: 
1:         long id = refs[0].getBundle().getBundleId();
0:         for (ServiceReference<?> ref : refs) {
1:             assertEquals("Precondition", id, ref.getBundle().getBundleId());
1:         }
1: 
1:         for (CompositeData cd : new ArrayList<CompositeData>((Collection<CompositeData>) svcData.values())) {
1:             assertEquals(id, cd.get(ServiceStateMBean.BUNDLE_IDENTIFIER));
1:             assertNotNull(cd.get(ServiceStateMBean.IDENTIFIER));
1:             assertNull(cd.get(ServiceStateMBean.OBJECT_CLASS));
1:             assertNull(cd.get(ServiceStateMBean.USING_BUNDLES));
1:         }
1:     }
commit:9516abb
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testListServices() throws Exception {
0:         ServiceStateMBean mbean = getMBean(ServiceStateMBean.OBJECTNAME, ServiceStateMBean.class);
1: 
1:         String filter = "(" + Constants.SERVICE_PID + "=*)";
0:         ServiceReference<?>[] refs = bundleContext.getAllServiceReferences(null, filter);
1:         TabularData svcData = mbean.listServices(null, filter);
1:         assertEquals(refs.length, svcData.size());
1: 
0:         ServiceReference<InterfaceA> sref = bundleContext.getServiceReference(InterfaceA.class);
0:         TabularData svcAData = mbean.listServices(InterfaceA.class.getName(), null);
0:         assertEquals(1, svcAData.size());
0:         CompositeData actualSvc = (CompositeData) svcAData.values().iterator().next();
1:         CompositeData expectedSvc = mbean.getService((Long) sref.getProperty(Constants.SERVICE_ID));
1:         assertEquals(expectedSvc, actualSvc);
1:     }
commit:305da5d
/////////////////////////////////////////////////////////////////////////
1:     public void testGetServiceAndGetProperty() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Test mbean.getProperty()
1:         String pid = (String) sref.getProperty(Constants.SERVICE_PID);
1:         CompositeData pidData = mbean.getProperty(serviceID, Constants.SERVICE_PID);
1:         assertEquals(pid, pidData.get("Value"));
1:         assertEquals("String", pidData.get("Type"));
1: 
1:         CompositeData idData = mbean.getProperty(serviceID, Constants.SERVICE_ID);
1:         assertEquals("" + serviceID, idData.get("Value"));
1:         assertEquals("Long", idData.get("Type"));
1: 
1:         CompositeData ocData = mbean.getProperty(serviceID, Constants.OBJECTCLASS);
1:         String form1 = InterfaceA.class.getName() + "," + ManagedService.class.getName();
1:         String form2 = ManagedService.class.getName() + "," + InterfaceA.class.getName();
1:         assertTrue(ocData.get("Value").equals(form1) ||
1:                    ocData.get("Value").equals(form2));
1:         assertEquals("Array of String", ocData.get("Type"));
commit:cbbcd95
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: import java.util.Set;
1: import javax.management.openmbean.CompositeData;
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.options.VMOption;
0: import org.ops4j.pax.exam.options.TimeoutOption;
/////////////////////////////////////////////////////////////////////////
0:                         new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
0:                         new TimeoutOption( 0 ),
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
0:     public void testGetService() throws Exception {
0:         ServiceStateMBean mbean = getMBean(ServiceStateMBean.OBJECTNAME, ServiceStateMBean.class);
1: 
0:         ServiceReference<InterfaceA> sref = bundleContext.getServiceReference(InterfaceA.class);
1:         Long serviceID = (Long) sref.getProperty(Constants.SERVICE_ID);
1: 
1:         CompositeData svcData  = mbean.getService(serviceID);
1:         assertEquals(serviceID, svcData.get(ServiceStateMBean.IDENTIFIER));
1:         assertEquals(sref.getBundle().getBundleId(), svcData.get(ServiceStateMBean.BUNDLE_IDENTIFIER));
1:         Set<String> expectedClasses = new HashSet<String>(Arrays.asList(InterfaceA.class.getName(), ManagedService.class.getName()));
1:         Set<String> actualClasses = new HashSet<String>(Arrays.asList((String []) svcData.get(ServiceStateMBean.OBJECT_CLASS)));
1:         assertEquals(expectedClasses, actualClasses);
1:         Bundle[] ub = sref.getUsingBundles();
1:         assertEquals("Precondition", 1, ub.length);
1:         assertTrue(Arrays.equals(new Long[] {ub[0].getBundleId()}, (Long[]) svcData.get("UsingBundles")));
1:     }
commit:15d33bc
/////////////////////////////////////////////////////////////////////////
0:                         // new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
0:                         // new TimeoutOption( 0 ),
1: 
/////////////////////////////////////////////////////////////////////////
0:                                 .build(withBnd()))
/////////////////////////////////////////////////////////////////////////
0:         ServiceReference<?>[] allSvsRefs = bundleContext.getAllServiceReferences(null, null);
1:         assertEquals(allSvsRefs.length, allServices.values().size());
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:     public void testGetServiceIds() throws Exception {
0:         ServiceStateMBean mbean = getMBean(ServiceStateMBean.OBJECTNAME, ServiceStateMBean.class);
1: 
0:         ServiceReference<?>[] allSvsRefs = bundleContext.getAllServiceReferences(null, null);
1:         long[] expectedServiceIds = new long[allSvsRefs.length];
1:         for (int i=0; i < allSvsRefs.length; i++) {
1:             expectedServiceIds[i] = (Long) allSvsRefs[i].getProperty(Constants.SERVICE_ID);
1:         }
1:         long[] actualServiceIds = mbean.getServiceIds();
1:         Arrays.sort(expectedServiceIds);
1:         Arrays.sort(actualServiceIds);
1:         assertTrue(Arrays.equals(expectedServiceIds, actualServiceIds));
1:     }
commit:bf5a863
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
0:                         PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0:                         CoreOptions.equinox().version("3.7.0.v20110613"),
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:         assertEquals("org.apache.aries.jmx.test.ServiceB",
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:         refB = bundleContext.getServiceReference(InterfaceB.class.getName());
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
0: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.ops4j.pax.exam.CoreOptions.provision;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.modifyBundle;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.newBundle;
0: import static org.ops4j.pax.swissbox.tinybundles.core.TinyBundles.withBnd;
0: import static org.apache.aries.itest.ExtraOptions.*;
0: 
0: import java.io.InputStream;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
0: 
1: import javax.management.Notification;
1: import javax.management.NotificationListener;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.TabularData;
0: 
1: import org.apache.aries.jmx.AbstractIntegrationTest;
1: import org.apache.aries.jmx.codec.PropertyData;
1: import org.apache.aries.jmx.test.bundlea.api.InterfaceA;
1: import org.apache.aries.jmx.test.bundleb.api.InterfaceB;
1: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Customizer;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.jmx.JmxConstants;
1: import org.osgi.jmx.framework.ServiceStateMBean;
1: import org.osgi.service.cm.ManagedService;
1: import org.osgi.service.cm.ManagedServiceFactory;
0: 
1: /**
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class ServiceStateMBeanTest extends AbstractIntegrationTest {
0: 
1:     @Configuration
0:     public static Option[] configuration() {
0:         return testOptions(
0:                         CoreOptions.equinox(),
0:                         paxLogging("INFO"),
0:                         
0:                         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:                         mavenBundle("org.osgi", "org.osgi.compendium"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.api"),
0:                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx.whiteboard"),
0:                         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:                         
0:                         new Customizer() {
0:                             public InputStream customizeTestProbe(InputStream testProbe) throws Exception {
0:                                 return modifyBundle(testProbe)
0:                                            .removeHeader(Constants.DYNAMICIMPORT_PACKAGE)
0:                                            .set(Constants.REQUIRE_BUNDLE, "org.apache.aries.jmx.test.bundlea,org.apache.aries.jmx.test.bundleb")
0:                                            .build(withBnd());
1:                             }
0:                         },
0:                         provision(newBundle()
0:                                 .add(org.apache.aries.jmx.test.bundlea.Activator.class)
0:                                 .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
0:                                 .add(org.apache.aries.jmx.test.bundlea.impl.A.class)
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME, "org.apache.aries.jmx.test.bundlea")
0:                                 .set(Constants.BUNDLE_VERSION, "2.0.0")
0:                                 .set(Constants.EXPORT_PACKAGE, "org.apache.aries.jmx.test.bundlea.api;version=2.0.0")
0:                                 .set(Constants.IMPORT_PACKAGE,
0:                                         "org.osgi.framework;version=1.5.0,org.osgi.util.tracker,org.apache.aries.jmx.test.bundleb.api;version=1.1.0;resolution:=optional" +
0:                                         ",org.osgi.service.cm")
0:                                 .set(Constants.BUNDLE_ACTIVATOR,
0:                                         org.apache.aries.jmx.test.bundlea.Activator.class.getName())
0:                                 .build(withBnd())),
0:                         provision(newBundle()
0:                                 .add(org.apache.aries.jmx.test.bundleb.Activator.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.api.InterfaceB.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.api.MSF.class)
0:                                 .add(org.apache.aries.jmx.test.bundleb.impl.B.class)
0:                                 .set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.aries.jmx.test.bundleb")
0:                                 .set(Constants.BUNDLE_VERSION, "1.0.0")
0:                                 .set(Constants.EXPORT_PACKAGE,"org.apache.aries.jmx.test.bundleb.api;version=1.1.0")
0:                                 .set(Constants.IMPORT_PACKAGE,"org.osgi.framework;version=1.5.0,org.osgi.util.tracker" +
0:                                 		",org.osgi.service.cm")
0:                                 .set(Constants.BUNDLE_ACTIVATOR,
0:                                         org.apache.aries.jmx.test.bundleb.Activator.class.getName())
0:                                 .build(withBnd()))//,
0:                                 /* For debugging, uncomment the next two lines */
0: //                              vmOption("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=7777"),
0: //                              waitForFrameworkStartup()
0:                         );
1:     }
0:     
0:     @Override
0:     public void doSetUp() throws Exception {
0:         waitForMBean(new ObjectName(ServiceStateMBean.OBJECTNAME));
1:     }    
0:     
0:     @Test
1:     public void testMBeanInterface() throws Exception {
0:         
0:         ServiceStateMBean mbean = getMBean(ServiceStateMBean.OBJECTNAME, ServiceStateMBean.class);
0:         assertNotNull(mbean);
0:         
1:         //get bundles
0:         
0:         Bundle a = context().getBundleByName("org.apache.aries.jmx.test.bundlea");
0:         assertNotNull(a);
0:         
0:         Bundle b = context().getBundleByName("org.apache.aries.jmx.test.bundleb");
0:         assertNotNull(b);
0:         
1:         // get services
0:         
0:         ServiceReference refA = bundleContext.getServiceReference(InterfaceA.class.getName());
1:         assertNotNull(refA);
1:         long serviceAId = (Long) refA.getProperty(Constants.SERVICE_ID);
1:         assertTrue(serviceAId > -1);
0:         
0:         ServiceReference refB = bundleContext.getServiceReference(InterfaceB.class.getName());
1:         assertNotNull(refB);
1:         long serviceBId = (Long) refB.getProperty(Constants.SERVICE_ID);
1:         assertTrue(serviceBId > -1);
0:         
0:         ServiceReference[] refs = bundleContext.getServiceReferences(ManagedServiceFactory.class.getName(), "(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
1:         assertNotNull(refs);
1:         assertEquals(1, refs.length);
0:         ServiceReference msf = refs[0];
0: 
0:         
1:         // getBundleIdentifier
0:         
1:         assertEquals(a.getBundleId(), mbean.getBundleIdentifier(serviceAId));
0:         
1:         //getObjectClass
0:         
1:         String[] objectClass = mbean.getObjectClass(serviceAId);
1:         assertEquals(2, objectClass.length);
1:         List<String> classNames = Arrays.asList(objectClass);
1:         assertTrue(classNames.contains(InterfaceA.class.getName()));
1:         assertTrue(classNames.contains(ManagedService.class.getName()));
0:         
1:         // getProperties
0:         
1:         TabularData serviceProperties = mbean.getProperties(serviceBId);
1:         assertNotNull(serviceProperties);
1:         assertEquals(JmxConstants.PROPERTIES_TYPE, serviceProperties.getTabularType());
1:         assertTrue(serviceProperties.values().size() > 1);
0:         assertEquals("org.apache.aries.jmx.test.ServiceB", 
1:                 PropertyData.from(serviceProperties.get(new Object[] { Constants.SERVICE_PID })).getValue());
0:         
1:         // getUsingBundles
0:         
1:         long[] usingBundles = mbean.getUsingBundles(serviceBId);
1:         assertEquals(1, usingBundles.length);
1:         assertEquals(a.getBundleId(), usingBundles[0]);
0:         
1:         // listServices
0:         
1:         TabularData allServices = mbean.listServices();
1:         assertNotNull(allServices);
0:         assertEquals(bundleContext.getAllServiceReferences(null, null).length, allServices.values().size());
0:         
1:         // notifications
0:         
1:         final List<Notification> received = new ArrayList<Notification>();
0:       
0:         mbeanServer.addNotificationListener(new ObjectName(ServiceStateMBean.OBJECTNAME), new NotificationListener() {
1:             public void handleNotification(Notification notification, Object handback) {
0:                received.add(notification);
1:             }
1:         }, null, null);
0:         
0:       
1:         assertNotNull(refB);
1:         assertNotNull(msf);
1:         b.stop();
1:         refB = bundleContext.getServiceReference(InterfaceB.class.getName()); 
1:         refs = bundleContext.getServiceReferences(ManagedServiceFactory.class.getName(), "(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
1:         assertNull(refs);
1:         assertNull(refB);
1:         b.start();
1:         refB = bundleContext.getServiceReference(InterfaceB.class.getName());
1:         refs = bundleContext.getServiceReferences(ManagedServiceFactory.class.getName(), "(" + Constants.SERVICE_PID + "=jmx.test.B.factory)");
1:         assertNotNull(refB);
1:         assertNotNull(refs);
1:         assertEquals(1, refs.length);
0:         
0:         int i = 0;
0:         while (received.size() < 4 && i < 3) {
0:             Thread.sleep(1000);
0:             i++;
1:         }
0:         
1:         assertEquals(4, received.size());
0:             
1:     }
0: 
1: }
============================================================================