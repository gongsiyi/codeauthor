1:4bf53f2: /*
1:4bf53f2:  * Licensed to the Apache Software Foundation (ASF) under one
1:4bf53f2:  * or more contributor license agreements.  See the NOTICE file
1:4bf53f2:  * distributed with this work for additional information
1:4bf53f2:  * regarding copyright ownership.  The ASF licenses this file
1:4bf53f2:  * to you under the Apache License, Version 2.0 (the
1:4bf53f2:  * "License"); you may not use this file except in compliance
1:4bf53f2:  * with the License.  You may obtain a copy of the License at
1:4bf53f2:  *
1:4bf53f2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4bf53f2:  *
1:4bf53f2:  * Unless required by applicable law or agreed to in writing,
1:4bf53f2:  * software distributed under the License is distributed on an
1:4bf53f2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:4bf53f2:  * KIND, either express or implied.  See the License for the
1:4bf53f2:  * specific language governing permissions and limitations
1:4bf53f2:  * under the License.
1:4bf53f2:  */
1:4bf53f2: package org.apache.aries.jndi;
2:4bf53f2: 
1:4bf53f2: import java.util.Collections;
1:4bf53f2: import java.util.HashSet;
1:4bf53f2: import java.util.Hashtable;
1:4bf53f2: import java.util.Map;
1:4bf53f2: import java.util.Set;
1:4bf53f2: 
1:4bf53f2: import javax.naming.Context;
1:4bf53f2: import javax.naming.NamingException;
1:4bf53f2: import javax.naming.directory.DirContext;
1:4bf53f2: 
1:4bf53f2: import org.osgi.framework.BundleContext;
1:4bf53f2: import org.osgi.service.jndi.JNDIContextManager;
1:4bf53f2: 
1:4bf53f2: public class ContextManagerService implements JNDIContextManager {
1:4bf53f2: 
1:4bf53f2:     private Set<Context> contexts = Collections.synchronizedSet(new HashSet<Context>());
1:7b2544b:     private BundleContext callerContext;
1:4bf53f2:     
1:b756d71:     public ContextManagerService(BundleContext callerContext) {
1:7b2544b:         this.callerContext = callerContext;
3:4bf53f2:     }
1:4bf53f2:     
1:4bf53f2:     public void close() {      
1:4bf53f2:         synchronized (contexts) {
1:4bf53f2:             for (Context context : contexts) {
1:4bf53f2:                 try {
1:4bf53f2:                     context.close();
1:4bf53f2:                 } catch (NamingException e) {
1:4bf53f2:                     // ignore
1:4bf53f2:                 }
1:4bf53f2:             }
1:4bf53f2:             contexts.clear();
1:4bf53f2:         }
1:4bf53f2:     }
1:4bf53f2:     
1:4bf53f2:     public Context newInitialContext() throws NamingException {
1:b756d71:         return newInitialContext(new Hashtable<Object, Object>());
1:4bf53f2:     }
1:4bf53f2: 
1:b756d71:     public Context newInitialContext(Map<?,?> environment) throws NamingException {
1:4bf53f2:         return getInitialContext(environment);
1:4bf53f2:     }
1:4bf53f2: 
1:4bf53f2:     public DirContext newInitialDirContext() throws NamingException {
1:b756d71:         return newInitialDirContext(new Hashtable<Object, Object>());
1:4bf53f2:     }
1:4bf53f2: 
1:b756d71:     public DirContext newInitialDirContext(Map<?,?> environment) throws NamingException {
1:4bf53f2:         return DirContext.class.cast( getInitialContext(environment) );
1:4bf53f2:     }
1:4bf53f2:     
1:b756d71:     private Context getInitialContext(Map<?,?> environment) throws NamingException {        
1:b756d71:         Hashtable<?,?> env = Utils.toHashtable(environment);
1:7b2544b:         Context context = ContextHelper.getInitialContext(callerContext, env);
1:4bf53f2:         contexts.add(context);
1:4bf53f2:         return context;
1:4bf53f2:     }
1:4bf53f2: 
1:4bf53f2: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:d90eeba
/////////////////////////////////////////////////////////////////////////
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:5140ce3
/////////////////////////////////////////////////////////////////////////
0:         Utils.augmentEnvironment(env);
commit:b756d71
/////////////////////////////////////////////////////////////////////////
1:     public ContextManagerService(BundleContext callerContext) {
/////////////////////////////////////////////////////////////////////////
1:         return newInitialContext(new Hashtable<Object, Object>());
1:     public Context newInitialContext(Map<?,?> environment) throws NamingException {
1:         return newInitialDirContext(new Hashtable<Object, Object>());
1:     public DirContext newInitialDirContext(Map<?,?> environment) throws NamingException {
1:     private Context getInitialContext(Map<?,?> environment) throws NamingException {        
1:         Hashtable<?,?> env = Utils.toHashtable(environment);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
0:     private BundleContext defaultContext;
1:     private BundleContext callerContext;
0:     public ContextManagerService(BundleContext defaultContext, BundleContext callerContext) {
0:         this.defaultContext = defaultContext;
1:         this.callerContext = callerContext;
/////////////////////////////////////////////////////////////////////////
0:         Hashtable env = Utils.toHashtable(environment);
1:         Context context = ContextHelper.getInitialContext(callerContext, env);
commit:9e140bf
/////////////////////////////////////////////////////////////////////////
0:     private Context getInitialContext(Map environment) throws NamingException {        
0:         Hashtable env = ContextHelper.toHashtable(environment);
commit:4bf53f2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.directory.DirContext;
1: 
0: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.jndi.JNDIContextManager;
1: 
1: public class ContextManagerService implements JNDIContextManager {
1: 
1:     private Set<Context> contexts = Collections.synchronizedSet(new HashSet<Context>());
0:     private Bundle bundle;
1:     
0:     public ContextManagerService(Bundle bundle) { 
0:         this.bundle = bundle;
1:     }
1:     
1:     public void close() {      
1:         synchronized (contexts) {
1:             for (Context context : contexts) {
1:                 try {
1:                     context.close();
1:                 } catch (NamingException e) {
1:                     // ignore
1:                 }
1:             }
1:             contexts.clear();
1:         }
1:     }
1:     
1:     public Context newInitialContext() throws NamingException {
0:         return newInitialContext(new Hashtable());
1:     }
1: 
0:     public Context newInitialContext(Map environment) throws NamingException {
1:         return getInitialContext(environment);
1:     }
1: 
1:     public DirContext newInitialDirContext() throws NamingException {
0:         return newInitialDirContext(new Hashtable());
1:     }
1: 
0:     public DirContext newInitialDirContext(Map environment) throws NamingException {
1:         return DirContext.class.cast( getInitialContext(environment) );
1:     }
1:     
0:     private Context getInitialContext(Map environment) throws NamingException {
0:         Hashtable env;
0:         if (environment instanceof Hashtable) {
0:             env = (Hashtable) environment;
0:         } else {
0:             env = new Hashtable();
0:             if (environment != null) {
0:                 env.putAll(environment);        
1:             }
1:         }
1:         
0:         BundleContext bundleContext = bundle.getBundleContext();
0:         Context context = ContextHelper.getInitialContext(bundleContext, env);
1:         contexts.add(context);
1:         return context;
1:     }
1: 
1: }
============================================================================