1:96f3261: package org.apache.aries.subsystem.ctt.itests;
4:96f3261: 
1:96f3261: import static org.junit.Assert.assertTrue;
1:96f3261: 
1:96f3261: import java.util.HashMap;
1:96f3261: import java.util.Map;
1:96f3261: 
1:96f3261: import org.junit.Test;
1:96f3261: import org.osgi.framework.Bundle;
1:96f3261: import org.osgi.service.subsystem.Subsystem;
1:96f3261: import org.osgi.service.subsystem.SubsystemConstants;
1:96f3261: 
1:96f3261: /*
1:96f3261:  * First block: section 4A
2:96f3261:  * 
1:96f3261: A) Test a transitively closed subsystem deploys no transitive resources
1:96f3261:  - Register repository R1
1:96f3261:  - Using the Root subsystem, install a scoped subsystem with the following content bundles and no local repository
1:96f3261:    - Bundle A
1:96f3261:    - Bundle B
1:96f3261:    - Bundle C
1:96f3261:    - Bundle D
1:96f3261:    - Bundle E
1:96f3261:  - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1:96f3261:  - Verify no new bundles are installed into the Root subsystem (particularly bundles F and G)
1:96f3261:  
1:96f3261: */
1:96f3261: 
1:96f3261: public class SubsystemDependency_4ATest extends SubsystemDependencyTestBase 
3:96f3261: {
1:96f3261: 	protected static String APPLICATION_A="sdt_application.a.esa";
1:96f3261: 	
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:57b6627: 		super.createApplications();
1:57b6627: 		createTestApplicationA();
1:96f3261: 		registerRepositoryR1();
1:3e9adfe: 	}
1:96f3261: 	
1:96f3261: 	@Test
1:96f3261: 	public void verifyBundleCWiredToPackageXFromBundleA() throws Exception
1:96f3261: 	{ 
1:96f3261: 		Subsystem s = installSubsystemFromFile(APPLICATION_A);
1:96f3261: 		startSubsystem(s);
1:96f3261: 		
1:96f3261: 		verifySinglePackageWiring (s, BUNDLE_C, "x", BUNDLE_A);
1:96f3261:  
1:96f3261: 		stopSubsystem(s);
1:abf906b: 		uninstallSubsystem(s);
3:96f3261: 	}
1:96f3261: 	
1:96f3261: 	@Test
1:96f3261: 	public void verifyBundleDWiredToBundleA() throws Exception
1:96f3261: 	{ 
1:96f3261: 		Subsystem s = installSubsystemFromFile(APPLICATION_A);
1:96f3261: 		startSubsystem(s);
1:96f3261: 		verifyRequireBundleWiring (s, BUNDLE_D, BUNDLE_A);
1:96f3261: 		stopSubsystem(s);
1:abf906b: 		uninstallSubsystem(s);
1:96f3261: 	}
1:96f3261: 	
1:96f3261: 	@Test
1:96f3261: 	public void verifyBundleEWiredToCapability_yFromBundleB() throws Exception
1:96f3261: 	{
1:96f3261: 		Subsystem s = installSubsystemFromFile (APPLICATION_A);
1:96f3261: 		startSubsystem(s);
1:96f3261: 		verifyCapabilityWiring (s, BUNDLE_E, "y", BUNDLE_B);
1:96f3261: 		stopSubsystem(s);
1:abf906b: 		uninstallSubsystem(s);
1:96f3261: 	}
1:96f3261: 	
1:96f3261: 	/*
1:96f3261: 	 * Verify no new bundles are installed into the Root subsystem 
1:96f3261: 	 * (particularly bundles F and G)
1:96f3261:      * 
1:96f3261: 	 */
1:96f3261: 	@Test
1:abf906b: 	public void verifyNoUnexpectedBundlesProvisioned() throws Exception
1:96f3261: 	{ 
1:abf906b: 		Bundle[] rootBundlesBefore = bundleContext.getBundles();
1:abf906b: 		Subsystem s = installSubsystemFromFile(APPLICATION_A);
1:abf906b: 		startSubsystem(s);
1:abf906b: 		Bundle[] rootBundlesAfter = bundleContext.getBundles();
1:abf906b: 		for (Bundle b: rootBundlesAfter) {
1:96f3261: 			assertTrue ("Bundle F should not have been provisioned!", !b.getSymbolicName().equals(BUNDLE_F));
1:96f3261: 			assertTrue ("Bundle G should not have been provisioned!", !b.getSymbolicName().equals(BUNDLE_G));
1:96f3261: 		}
1:abf906b: 		checkNoNewBundles("SubsystemDependency_4ATest", rootBundlesBefore, rootBundlesAfter);
1:abf906b: 		stopSubsystem(s);
1:abf906b: 		uninstallSubsystem(s);
1:96f3261: 	}
1:abf906b: 	
1:96f3261: 	private static void createTestApplicationA() throws Exception
1:96f3261: 	{
1:96f3261: 		Map<String, String> attributes = new HashMap<String, String>();
1:96f3261: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:96f3261: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:96f3261: 		String appContent = BUNDLE_A +","+ BUNDLE_B + "," + BUNDLE_C
1:96f3261: 			+ "," + BUNDLE_D + "," + BUNDLE_E;
1:96f3261: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1:96f3261: 		createManifest(APPLICATION_A + ".mf", attributes);
1:96f3261: 		createSubsystem(APPLICATION_A);
1:96f3261: 	}
1:96f3261: 
1:96f3261: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	public void createApplications() throws Exception {
1: 		super.createApplications();
1: 		createTestApplicationA();
author:John Ross
-------------------------------------------------------------------------------
commit:47cea41
/////////////////////////////////////////////////////////////////////////
commit:f93502c
/////////////////////////////////////////////////////////////////////////
0:      * wrap_mvn_org.ops4j.pax.exam_pax-exam-junit
/////////////////////////////////////////////////////////////////////////
0:      * org.apache.aries.subsystem.itest.interfaces
/////////////////////////////////////////////////////////////////////////
0: 		assertEquals ("Wrong number of bundles in the Root subsystem", 25, bundles.length);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:abf906b
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.fail;
0: import java.util.HashSet;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: 		uninstallSubsystem(s);
/////////////////////////////////////////////////////////////////////////
1: 		uninstallSubsystem(s);
/////////////////////////////////////////////////////////////////////////
1: 		uninstallSubsystem(s);
1: 	public void verifyNoUnexpectedBundlesProvisioned() throws Exception
1: 		Bundle[] rootBundlesBefore = bundleContext.getBundles();
1: 		Subsystem s = installSubsystemFromFile(APPLICATION_A);
1: 		startSubsystem(s);
1: 		Bundle[] rootBundlesAfter = bundleContext.getBundles();
1: 		for (Bundle b: rootBundlesAfter) {
1: 		checkNoNewBundles("SubsystemDependency_4ATest", rootBundlesBefore, rootBundlesAfter);
1: 		stopSubsystem(s);
1: 		uninstallSubsystem(s);
1: 	
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	private static boolean _testAppCreated = false;
0: 		if (!_testAppCreated) { 
0: 			createTestApplicationA();
0: 			_testAppCreated = true;
1: 		}
commit:96f3261
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.ctt.itests;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
0: import static org.osgi.framework.namespace.BundleNamespace.BUNDLE_NAMESPACE;
0: import static org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE;
1: 
1: import java.util.HashMap;
0: import java.util.List;
1: import java.util.Map;
1: 
0: import org.junit.Before;
0: import org.junit.BeforeClass;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.wiring.BundleWire;
0: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
1: /*
1:  * First block: section 4A
1:  * 
1: A) Test a transitively closed subsystem deploys no transitive resources
1:  - Register repository R1
1:  - Using the Root subsystem, install a scoped subsystem with the following content bundles and no local repository
1:    - Bundle A
1:    - Bundle B
1:    - Bundle C
1:    - Bundle D
1:    - Bundle E
1:  - Verify the wiring of C, D and E wire to A->x, A, B->y respectively
1:  - Verify no new bundles are installed into the Root subsystem (particularly bundles F and G)
1:  
1: */
1: 
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class SubsystemDependency_4ATest extends SubsystemDependencyTestBase 
1: {
1: 	protected static String APPLICATION_A="sdt_application.a.esa";
1: 
0: 	@BeforeClass
0: 	public static void createTestApplication() throws Exception
1: 	{ 
0: 		createTestApplicationA();
1: 	}
1: 	
0: 	@Before
0: 	public void setUp() throws Exception
1: 	{
0: 		super.setUp();
1: 		registerRepositoryR1();
1: 	}
1: 	
1: 	@Test
1: 	public void verifyBundleCWiredToPackageXFromBundleA() throws Exception
1: 	{ 
1: 		Subsystem s = installSubsystemFromFile(APPLICATION_A);
1: 		startSubsystem(s);
1: 		
1: 		verifySinglePackageWiring (s, BUNDLE_C, "x", BUNDLE_A);
1:  
1: 		stopSubsystem(s);
1: 	}
1: 	
1: 	@Test
1: 	public void verifyBundleDWiredToBundleA() throws Exception
1: 	{ 
1: 		Subsystem s = installSubsystemFromFile(APPLICATION_A);
1: 		startSubsystem(s);
1: 		verifyRequireBundleWiring (s, BUNDLE_D, BUNDLE_A);
1: 		stopSubsystem(s);
1: 	}
1: 	
1: 	@Test
1: 	public void verifyBundleEWiredToCapability_yFromBundleB() throws Exception
1: 	{
1: 		Subsystem s = installSubsystemFromFile (APPLICATION_A);
1: 		startSubsystem(s);
1: 		verifyCapabilityWiring (s, BUNDLE_E, "y", BUNDLE_B);
1: 		stopSubsystem(s);
1: 	}
1: 	
1: 	/*
1: 	 * Verify no new bundles are installed into the Root subsystem 
1: 	 * (particularly bundles F and G)
1:  	 * 
0:  	 * As of the time of writing, the Root subsystem should contain 23 bundles: 
0:  	 * org.eclipse.osgi
0:      * org.ops4j.pax.exam
0:      * org.ops4j.pax.exam.junit.extender
0:      * org.ops4j.pax.exam.junit.extender.impl
0:      * org.ops4j.pax.logging.pax-logging-api
0:      * org.ops4j.pax.logging.pax-logging-service
0:      * org.ops4j.pax.url.mvn
0:      * org.eclipse.osgi.services
0:      * org.eclipse.equinox.region
0:      * org.apache.aries.testsupport.unit
0:      * org.apache.aries.application.api
0:      * org.apache.aries.util
0:      * org.apache.aries.application.utils
0:      * org.apache.felix.bundlerepository
0:      * org.apache.felix.resolver
0:      * org.eclipse.equinox.coordinator
0:      * org.eclipse.equinox.event
0:      * org.apache.aries.subsystem.api
0:      * org.apache.aries.subsystem.core
0:      * com.springsource.org.junit
0:      * org.ops4j.pax.exam.rbc
0:      * org.osgi.service.subsystem.region.context.0
0:      * pax-exam-probe
1:      * 
1: 	 */
1: 	@Test
0: 	public void verifyNoUnexpectedBundlesProvisioned() 
1: 	{ 
0: 		Bundle[] bundles = bundleContext.getBundles();
0: 		assertEquals ("Wrong number of bundles in the Root subsystem", 23, bundles.length);
0: 		for (Bundle b: bundles) {
1: 			assertTrue ("Bundle F should not have been provisioned!", !b.getSymbolicName().equals(BUNDLE_F));
1: 			assertTrue ("Bundle G should not have been provisioned!", !b.getSymbolicName().equals(BUNDLE_G));
1: 		}
1: 	}
1: 
1: 	private static void createTestApplicationA() throws Exception
1: 	{
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 		String appContent = BUNDLE_A +","+ BUNDLE_B + "," + BUNDLE_C
1: 			+ "," + BUNDLE_D + "," + BUNDLE_E;
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, appContent);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 		createSubsystem(APPLICATION_A);
1: 	}
1: 
1: }
============================================================================