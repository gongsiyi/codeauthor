1:7fa86e8: /*
1:7fa86e8:  * Licensed to the Apache Software Foundation (ASF) under one
1:7fa86e8:  * or more contributor license agreements.  See the NOTICE file
1:7fa86e8:  * distributed with this work for additional information
1:7fa86e8:  * regarding copyright ownership.  The ASF licenses this file
1:7fa86e8:  * to you under the Apache License, Version 2.0 (the
1:7fa86e8:  * "License"); you may not use this file except in compliance
1:7fa86e8:  * with the License.  You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing,
1:7fa86e8:  * software distributed under the License is distributed on an
1:7fa86e8:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:7fa86e8:  * KIND, either express or implied.  See the License for the
1:7fa86e8:  * specific language governing permissions and limitations
1:7fa86e8:  * under the License.
1:7fa86e8:  */
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import java.util.concurrent.BlockingQueue;
1:7fa86e8: import java.util.concurrent.Executor;
1:7fa86e8: 
1:7fa86e8: class PushStreamBuilderImpl<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1:7fa86e8: 		extends AbstractBufferBuilder<PushStream<T>,T,U>
1:7fa86e8: 		implements PushStreamBuilder<T,U> {
1:7fa86e8: 
1:7fa86e8: 	private final PushStreamProvider	psp;
1:7fa86e8: 	private final PushEventSource<T>		eventSource;
1:7fa86e8: 	private final Executor					previousExecutor;
1:7fa86e8: 
1:7fa86e8: 	private boolean							unbuffered;
1:7fa86e8: 
1:7fa86e8: 	PushStreamBuilderImpl(PushStreamProvider psp, Executor defaultExecutor,
1:7fa86e8: 			PushEventSource<T> eventSource) {
1:7fa86e8: 		this.psp = psp;
1:7fa86e8: 		this.previousExecutor = defaultExecutor;
1:7fa86e8: 		this.eventSource = eventSource;
1:7fa86e8: 		this.worker = defaultExecutor;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStreamBuilder<T,U> withBuffer(U queue) {
1:7fa86e8: 		unbuffered = false;
1:7fa86e8: 		return (PushStreamBuilder<T,U>) super.withBuffer(queue);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStreamBuilder<T,U> withQueuePolicy(
1:7fa86e8: 			QueuePolicy<T,U> queuePolicy) {
1:7fa86e8: 		unbuffered = false;
1:7fa86e8: 		return (PushStreamBuilder<T,U>) super.withQueuePolicy(queuePolicy);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStreamBuilder<T,U> withQueuePolicy(
1:7fa86e8: 			QueuePolicyOption queuePolicyOption) {
1:7fa86e8: 		unbuffered = false;
1:7fa86e8: 		return (PushStreamBuilder<T,U>) super.withQueuePolicy(
1:7fa86e8: 				queuePolicyOption);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStreamBuilder<T,U> withPushbackPolicy(
1:7fa86e8: 			PushbackPolicy<T,U> pushbackPolicy) {
1:7fa86e8: 		unbuffered = false;
1:7fa86e8: 		return (PushStreamBuilder<T,U>) super.withPushbackPolicy(
1:7fa86e8: 				pushbackPolicy);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStreamBuilder<T,U> withPushbackPolicy(
1:7fa86e8: 			PushbackPolicyOption pushbackPolicyOption, long time) {
1:7fa86e8: 		unbuffered = false;
1:7fa86e8: 		return (PushStreamBuilder<T,U>) super.withPushbackPolicy(
1:7fa86e8: 				pushbackPolicyOption, time);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStreamBuilder<T,U> withParallelism(int parallelism) {
1:7fa86e8: 		unbuffered = false;
1:7fa86e8: 		return (PushStreamBuilder<T,U>) super.withParallelism(parallelism);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStreamBuilder<T,U> withExecutor(Executor executor) {
1:7fa86e8: 		unbuffered = false;
1:7fa86e8: 		return (PushStreamBuilder<T,U>) super.withExecutor(executor);
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStreamBuilder<T,U> unbuffered() {
1:7fa86e8: 		unbuffered = true;
1:7fa86e8: 		return this;
1:7fa86e8: 	}
1:7fa86e8: 
1:7fa86e8: 	@Override
1:7fa86e8: 	public PushStream<T> create() {
1:7fa86e8: 		if (unbuffered) {
1:7fa86e8: 			return psp.createUnbufferedStream(eventSource, previousExecutor);
1:7fa86e8: 		} else {
1:7fa86e8: 			return psp.createStream(eventSource, concurrency, worker, buffer,
1:7fa86e8: 					bufferingPolicy, backPressure);
1:7fa86e8: 		}
1:7fa86e8: 	}
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.osgi.util.pushstream;
1: 
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.Executor;
1: 
1: class PushStreamBuilderImpl<T, U extends BlockingQueue<PushEvent< ? extends T>>>
1: 		extends AbstractBufferBuilder<PushStream<T>,T,U>
1: 		implements PushStreamBuilder<T,U> {
1: 
1: 	private final PushStreamProvider	psp;
1: 	private final PushEventSource<T>		eventSource;
1: 	private final Executor					previousExecutor;
1: 
1: 	private boolean							unbuffered;
1: 
1: 	PushStreamBuilderImpl(PushStreamProvider psp, Executor defaultExecutor,
1: 			PushEventSource<T> eventSource) {
1: 		this.psp = psp;
1: 		this.previousExecutor = defaultExecutor;
1: 		this.eventSource = eventSource;
1: 		this.worker = defaultExecutor;
1: 	}
1: 
1: 	@Override
1: 	public PushStreamBuilder<T,U> withBuffer(U queue) {
1: 		unbuffered = false;
1: 		return (PushStreamBuilder<T,U>) super.withBuffer(queue);
1: 	}
1: 
1: 	@Override
1: 	public PushStreamBuilder<T,U> withQueuePolicy(
1: 			QueuePolicy<T,U> queuePolicy) {
1: 		unbuffered = false;
1: 		return (PushStreamBuilder<T,U>) super.withQueuePolicy(queuePolicy);
1: 	}
1: 
1: 	@Override
1: 	public PushStreamBuilder<T,U> withQueuePolicy(
1: 			QueuePolicyOption queuePolicyOption) {
1: 		unbuffered = false;
1: 		return (PushStreamBuilder<T,U>) super.withQueuePolicy(
1: 				queuePolicyOption);
1: 	}
1: 
1: 	@Override
1: 	public PushStreamBuilder<T,U> withPushbackPolicy(
1: 			PushbackPolicy<T,U> pushbackPolicy) {
1: 		unbuffered = false;
1: 		return (PushStreamBuilder<T,U>) super.withPushbackPolicy(
1: 				pushbackPolicy);
1: 	}
1: 
1: 	@Override
1: 	public PushStreamBuilder<T,U> withPushbackPolicy(
1: 			PushbackPolicyOption pushbackPolicyOption, long time) {
1: 		unbuffered = false;
1: 		return (PushStreamBuilder<T,U>) super.withPushbackPolicy(
1: 				pushbackPolicyOption, time);
1: 	}
1: 
1: 	@Override
1: 	public PushStreamBuilder<T,U> withParallelism(int parallelism) {
1: 		unbuffered = false;
1: 		return (PushStreamBuilder<T,U>) super.withParallelism(parallelism);
1: 	}
1: 
1: 	@Override
1: 	public PushStreamBuilder<T,U> withExecutor(Executor executor) {
1: 		unbuffered = false;
1: 		return (PushStreamBuilder<T,U>) super.withExecutor(executor);
1: 	}
1: 
1: 	@Override
1: 	public PushStreamBuilder<T,U> unbuffered() {
1: 		unbuffered = true;
1: 		return this;
1: 	}
1: 
1: 	@Override
1: 	public PushStream<T> create() {
1: 		if (unbuffered) {
1: 			return psp.createUnbufferedStream(eventSource, previousExecutor);
1: 		} else {
1: 			return psp.createStream(eventSource, concurrency, worker, buffer,
1: 					bufferingPolicy, backPressure);
1: 		}
1: 	}
1: }
============================================================================