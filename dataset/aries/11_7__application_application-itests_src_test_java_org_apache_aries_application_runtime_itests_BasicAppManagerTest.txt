1:f34e6a1: /*
1:cdb3fed:  * Licensed to the Apache Software Foundation (ASF) under one
1:cdb3fed:  * or more contributor license agreements.  See the NOTICE file
1:cdb3fed:  * distributed with this work for additional information
1:cdb3fed:  * regarding copyright ownership.  The ASF licenses this file
1:cdb3fed:  * to you under the Apache License, Version 2.0 (the
1:cdb3fed:  * "License"); you may not use this file except in compliance
1:cdb3fed:  * with the License.  You may obtain a copy of the License at
1:cdb3fed:  *
1:cdb3fed:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cdb3fed:  *
1:cdb3fed:  * Unless required by applicable law or agreed to in writing,
1:cdb3fed:  * software distributed under the License is distributed on an
1:cdb3fed:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cdb3fed:  * KIND, either express or implied.  See the License for the
1:cdb3fed:  * specific language governing permissions and limitations
1:cdb3fed:  * under the License.
1:f34e6a1:  */
1:cdb3fed: package org.apache.aries.application.runtime.itests;
4:9c4cbfb: 
1:17bf358: import static org.junit.Assert.assertEquals;
1:0223547: import static org.ops4j.pax.exam.CoreOptions.*;
1:86224ba: 
1:cdb3fed: import java.io.File;
1:17bf358: import java.io.FileOutputStream;
1:92429ff: 
1:17bf358: import org.apache.aries.application.management.AriesApplication;
1:694eb45: import org.apache.aries.application.management.AriesApplicationContext;
1:cdb3fed: import org.apache.aries.application.management.AriesApplicationManager;
1:86224ba: import org.apache.aries.itest.AbstractIntegrationTest;
1:17bf358: import org.apache.aries.sample.HelloWorld;
1:17bf358: import org.apache.aries.unittest.fixture.ArchiveFixture;
1:17bf358: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
1:910fec0: import org.apache.aries.util.filesystem.FileSystem;
1:9c4cbfb: import org.junit.Before;
1:cdb3fed: import org.junit.Test;
1:cdb3fed: import org.junit.runner.RunWith;
1:0223547: import org.ops4j.pax.exam.Configuration;
1:cdb3fed: import org.ops4j.pax.exam.Option;
1:0223547: import org.ops4j.pax.exam.junit.PaxExam;
1:0223547: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:0223547: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:9c4cbfb: 
1:0223547: @RunWith(PaxExam.class)
1:0223547: @ExamReactorStrategy(PerClass.class)
1:cdb3fed: public class BasicAppManagerTest extends AbstractIntegrationTest {
1:0223547: 
1:0223547:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:0223547:      * are created in the paxweb temp directory, and not in the svn tree
1:0223547:      */
1:0223547:     static boolean createdApplications = false;
1:0223547: 
1:0223547:     @Before
1:0223547:     public void createApplications() throws Exception {
1:0223547:         if (createdApplications) {
1:0223547:             return;
1:0223547:         }
1:0223547:         ZipFixture testEba = ArchiveFixture.newZip()
1:0223547:                 .jar("sample.jar")
1:0223547:                 .manifest().symbolicName("org.apache.aries.sample")
1:0223547:                 .attribute("Bundle-Version", "1.0.0")
1:0223547:                 .attribute("Import-Package", "org.apache.aries.sample")
1:0223547:                 .end()
1:0223547:                 .binary("org/apache/aries/sample/impl/HelloWorldImpl.class",
1:0223547:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
1:0223547:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:0223547:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
1:0223547:                 .end();
1:0223547: 
1:0223547:         FileOutputStream fout = new FileOutputStream("test.eba");
1:0223547:         testEba.writeOut(fout);
1:0223547:         fout.close();
1:0223547: 
1:0223547:         ZipFixture testEba2 = testEba.binary("META-INF/APPLICATION.MF",
1:0223547:                 BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/APPLICATION.MF"))
1:0223547:                 .end();
1:0223547:         fout = new FileOutputStream("test2.eba");
1:0223547:         testEba2.writeOut(fout);
1:0223547:         fout.close();
1:0223547:         createdApplications = true;
1:f34e6a1:     }
1:f34e6a1: 
1:0223547:     @Test
1:0223547:     public void testAppWithoutApplicationManifest() throws Exception {
1:8069959: 
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
1:8069959: 
1:0223547:         // application name should be equal to eba name since application.mf is not provided
1:0223547:         assertEquals("test.eba", app.getApplicationMetadata().getApplicationName());
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547:         ctx.start();
1:f9c9743: 
1:0223547:         HelloWorld hw = context().getService(HelloWorld.class);
1:0223547:         String result = hw.getMessage();
1:0223547:         assertEquals(result, "hello world");
1:9c4cbfb: 
1:0223547:         ctx.stop();
1:0223547:         manager.uninstall(ctx);
1:0223547:     }
1:f9c9743: 
1:0223547:     @Test
1:0223547:     public void testAppWithApplicationManifest() throws Exception {
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:f9c9743: 
1:0223547:         // application name should equal to whatever Application name provided in the application.mf
1:0223547:         assertEquals("test application 2", app.getApplicationMetadata().getApplicationName());
1:0223547: 
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547:         ctx.start();
1:f9c9743: 
1:0223547:         HelloWorld hw = context().getService(HelloWorld.class);
1:0223547:         String result = hw.getMessage();
1:0223547:         assertEquals(result, "hello world");
1:f9c9743: 
1:0223547:         ctx.stop();
1:0223547:         manager.uninstall(ctx);
1:0223547:     }
1:f9c9743: 
1:0223547:     @Test
1:0223547:     public void testAppStore() throws Exception {
1:0223547:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:0223547:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:0223547:         app = manager.resolve(app);
1:0223547: 
1:0223547:         app.store(new FileOutputStream("test2-resolved.eba"));
1:0223547: 
1:0223547:         app = manager.createApplication(FileSystem.getFSRoot(new File("test2-resolved.eba")));
1:0223547: 
1:0223547:         // application name should equal to whatever Application name provided in the application.mf
1:0223547:         assertEquals("test application 2", app.getApplicationMetadata().getApplicationName());
1:0223547: 
1:0223547:         AriesApplicationContext ctx = manager.install(app);
1:0223547:         ctx.start();
1:0223547: 
1:0223547:         HelloWorld hw = context().getService(HelloWorld.class);
1:0223547:         String result = hw.getMessage();
1:0223547:         assertEquals(result, "hello world");
1:0223547: 
1:0223547:         ctx.stop();
1:0223547:         manager.uninstall(ctx);
1:0223547:     }
1:f9c9743: 
1:0223547:     @Configuration
1:0223547:     public static Option[] configuration() {
1:0223547:         return options(
1:0223547: 
1:0223547:                 // framework / core bundles
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:0223547:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1:0223547: 
1:0223547:                 // Logging
1:0223547:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1:0223547: 
1:0223547:                 // Bundles
1:0223547:                 junitBundles(),
1:0223547:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:0223547:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:0223547:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject()
1:0223547:         );
1:0223547:     }
1:8069959: 
2:8069959: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:e334773
/////////////////////////////////////////////////////////////////////////
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:0223547
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: 
1:     /* Use @Before not @BeforeClass so as to ensure that these resources
1:      * are created in the paxweb temp directory, and not in the svn tree
1:      */
1:     static boolean createdApplications = false;
1: 
1:     @Before
1:     public void createApplications() throws Exception {
1:         if (createdApplications) {
1:             return;
1:         }
1:         ZipFixture testEba = ArchiveFixture.newZip()
1:                 .jar("sample.jar")
1:                 .manifest().symbolicName("org.apache.aries.sample")
1:                 .attribute("Bundle-Version", "1.0.0")
1:                 .attribute("Import-Package", "org.apache.aries.sample")
1:                 .end()
1:                 .binary("org/apache/aries/sample/impl/HelloWorldImpl.class",
1:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
1:                 .binary("OSGI-INF/blueprint/sample-blueprint.xml",
1:                         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
1:                 .end();
1: 
1:         FileOutputStream fout = new FileOutputStream("test.eba");
1:         testEba.writeOut(fout);
1:         fout.close();
1: 
1:         ZipFixture testEba2 = testEba.binary("META-INF/APPLICATION.MF",
1:                 BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/APPLICATION.MF"))
1:                 .end();
1:         fout = new FileOutputStream("test2.eba");
1:         testEba2.writeOut(fout);
1:         fout.close();
1:         createdApplications = true;
1:     @Test
1:     public void testAppWithoutApplicationManifest() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
1:         // application name should be equal to eba name since application.mf is not provided
1:         assertEquals("test.eba", app.getApplicationMetadata().getApplicationName());
1:         AriesApplicationContext ctx = manager.install(app);
1:         ctx.start();
1:         HelloWorld hw = context().getService(HelloWorld.class);
1:         String result = hw.getMessage();
1:         assertEquals(result, "hello world");
1:         ctx.stop();
1:         manager.uninstall(ctx);
1:     }
1:     @Test
1:     public void testAppWithApplicationManifest() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:         // application name should equal to whatever Application name provided in the application.mf
1:         assertEquals("test application 2", app.getApplicationMetadata().getApplicationName());
1:         AriesApplicationContext ctx = manager.install(app);
1:         ctx.start();
1:         HelloWorld hw = context().getService(HelloWorld.class);
1:         String result = hw.getMessage();
1:         assertEquals(result, "hello world");
1:         ctx.stop();
1:         manager.uninstall(ctx);
1:     }
1:     @Test
1:     public void testAppStore() throws Exception {
1:         AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
1:         AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
1:         app = manager.resolve(app);
1: 
1:         app.store(new FileOutputStream("test2-resolved.eba"));
1: 
1:         app = manager.createApplication(FileSystem.getFSRoot(new File("test2-resolved.eba")));
1: 
1:         // application name should equal to whatever Application name provided in the application.mf
1:         assertEquals("test application 2", app.getApplicationMetadata().getApplicationName());
1: 
1:         AriesApplicationContext ctx = manager.install(app);
1:         ctx.start();
1: 
1:         HelloWorld hw = context().getService(HelloWorld.class);
1:         String result = hw.getMessage();
1:         assertEquals(result, "hello world");
1: 
1:         ctx.stop();
1:         manager.uninstall(ctx);
1:     }
1: 
1:     @Configuration
1:     public static Option[] configuration() {
1:         return options(
1: 
1:                 // framework / core bundles
0:                 mavenBundle("org.osgi", "org.osgi.core").versionAsInProject(),
0:                 mavenBundle("org.osgi", "org.osgi.compendium").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:                 mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject(),
1: 
1:                 // Logging
1:                 systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
1: 
1:                 // Bundles
1:                 junitBundles(),
1:                 mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.api").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.management").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform").versionAsInProject(),
1:                 mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces").versionAsInProject(),
1:                 mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint").versionAsInProject(),
1:                 mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
1:                 mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject()
1:         );
1:     }
author:John Ross
-------------------------------------------------------------------------------
commit:cffbcb0
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
/////////////////////////////////////////////////////////////////////////
0:   public static Option[] configuration()
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties")        
commit:f34e6a1
/////////////////////////////////////////////////////////////////////////
1:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
1:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
0:   /*
0:    * Commented out to avoid an NPE due to a ConcurrentModificationException in
0:    * the Aries build. See https://issues.apache.org/jira/browse/ARIES-931.
0:    */
0:   //@org.ops4j.pax.exam.junit.Configuration
/////////////////////////////////////////////////////////////////////////
1:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox38Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.8.0.V20120529-1548")
0: 	          );
1:   }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8069959
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
0:   private static Option[] generalConfiguration() {
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.osgi", "org.osgi.compendium"));
/////////////////////////////////////////////////////////////////////////
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox35Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 	          equinox().version("3.5.0")
0: 	          );
1:   }
1: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] equinox37Options()
0:   {
0: 	  return testOptions(
0: 			  generalConfiguration(),
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.7.0.v20110613")
0: 	          );
1:   }
1: 
author:Emily Jiang
-------------------------------------------------------------------------------
commit:2b7f337
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.ow2.asm", "asm-all"),
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
1: 
0: import static org.apache.aries.itest.ExtraOptions.*;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.AbstractIntegrationTest;
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     HelloWorld hw = context().getService(HelloWorld.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     HelloWorld hw = context().getService(HelloWorld.class);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationManager manager = context().getService(AriesApplicationManager.class);
/////////////////////////////////////////////////////////////////////////
0:     HelloWorld hw = context().getService(HelloWorld.class);
/////////////////////////////////////////////////////////////////////////
0:     return testOptions(
0:         paxLogging("DEBUG"),
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.filesystem.FileSystem;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:f9c9743
/////////////////////////////////////////////////////////////////////////
0:   @Test
0:   public void testAppStore() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
0:     app = manager.resolve(app);
1: 
0:     app.store(new FileOutputStream("test2-resolved.eba"));
1: 
0:     app = manager.createApplication(FileSystem.getFSRoot(new File("test2-resolved.eba")));
1: 
0:     // application name should equal to whatever Application name provided in the application.mf
0:     assertEquals("test application 2", app.getApplicationMetadata().getApplicationName());
1: 
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
1: 
0:     HelloWorld hw = getOsgiService(HelloWorld.class);
0:     String result = hw.getMessage();
0:     assertEquals (result, "hello world");
1: 
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:   }
1: 
commit:be6ac25
/////////////////////////////////////////////////////////////////////////
commit:5254613
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("asm", "asm-all"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:d3efe20
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
commit:a0eca03
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.platform.repo"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.noop.postresolve.process"),
commit:97d13c0
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
commit:92429ff
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
/////////////////////////////////////////////////////////////////////////
1:         
commit:c3c0c38
/////////////////////////////////////////////////////////////////////////
commit:4d6e797
/////////////////////////////////////////////////////////////////////////
0:     File f = new File(".");
0:     String [] contents = f.list();
0:     System.out.println ("#MN## createApplications(): " + f.getAbsolutePath() + " contains " + Arrays.toString(contents));
/////////////////////////////////////////////////////////////////////////
0:     File f = new File(".");
0:     String [] contents = f.list();
0:     System.out.println ("#MN## testAppWithoutApplicationManifest(): " + f.getAbsolutePath() + " contains " + Arrays.toString(contents));
commit:9c4cbfb
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
0:   /* Use @Before not @BeforeClass so as to ensure that these resources
0:    * are created in the paxweb temp directory, and not in the svn tree 
0:    */
0:   static boolean createdApplications = false;
0:   @Before
0:     if (createdApplications) { 
0:       return;
0:     }
/////////////////////////////////////////////////////////////////////////
1:     
1:     
0:     //Debug
0:     //File f = new File(".");
0:     //String [] contents = f.list();
0:     //System.out.println ("#MN## createApplications(): " + f.getAbsolutePath() + " contains " + Arrays.toString(contents));
1: 
0:     createdApplications = true;
1:     
0:     //Debug
0:     //File f = new File(".");
0:     //String [] contents = f.list();
0:     //System.out.println ("#MN## testAppWithoutApplicationManifest(): " + f.getAbsolutePath() + " contains " + Arrays.toString(contents));
1: 
1:     
commit:17bf358
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import java.io.FileOutputStream;
0: import org.apache.aries.application.management.ApplicationContext;
1: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.sample.HelloWorld;
1: import org.apache.aries.unittest.fixture.ArchiveFixture;
1: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
0: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
0:   
0:   @BeforeClass
0:   public static void createApplications() throws Exception {
0:     ZipFixture testEba = ArchiveFixture.newZip()
0:       .jar("sample.jar")
0:         .manifest().symbolicName("org.apache.aries.sample")
0:           .attribute("Bundle-Version", "1.0.0")
0:           .attribute("Import-Package", "org.apache.aries.sample")
0:           .end()
0:         .binary("org/apache/aries/sample/impl/HelloWorldImpl.class", 
0:             BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
0:         .binary("OSGI-INF/blueprint/sample-blueprint.xml", 
0:             BasicAppManagerTest.class.getClassLoader().getResourceAsStream("sample-blueprint.xml"))
0:         .end();
0:     FileOutputStream fout = new FileOutputStream("test.eba");
0:     testEba.writeOut(fout);
0:     fout.close();
0: 
0:     ZipFixture testEba2 = testEba.binary("META-INF/APPLICATION.MF", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("APPLICATION.MF"))
0:         .end();
0:     fout = new FileOutputStream("test2.eba");
0:     testEba2.writeOut(fout);
0:     fout.close();
0:   }
0:   
0:   @Test
0:   public void testAppWithoutApplicationManifest() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
0:     ApplicationContext ctx = manager.install(app);
0:     ctx.start();
0:     HelloWorld hw = getOsgiService(HelloWorld.class);
0:     String result = hw.getMessage();
0:     assertEquals (result, "hello world");
0:     
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:   @Test
0:   public void testAppWithApplicationManifest() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
0:     ApplicationContext ctx = manager.install(app);
0:     ctx.start();
0:     
0:     HelloWorld hw = getOsgiService(HelloWorld.class);
0:     String result = hw.getMessage();
0:     assertEquals (result, "hello world");
0:     
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:   }
0: 
0:   
/////////////////////////////////////////////////////////////////////////
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0:         
0:         /* For debugging, uncomment the next two lines
0:         vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
0:         waitForFrameworkStartup(),
0:         
0:         and add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:         */
commit:bb493b4
/////////////////////////////////////////////////////////////////////////
commit:cdb3fed
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  */
1: package org.apache.aries.application.runtime.itests;
0: 
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: 
1: import java.io.File;
0: 
0: import org.apache.aries.application.filesystem.IDirectory;
1: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: 
0: @RunWith(JUnit4TestRunner.class)
1: public class BasicAppManagerTest extends AbstractIntegrationTest {
0: 
0:   @Test
0:   public void getStarted() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     
0:     /**
0:      * Now write some java code to generate an .eba that we can execute 
0:       
0:         File hack = new File(
0:      
0:         "c:/svn/trunk/application/application-management/target/ariesApplicationManagerImplTest/stored.eba");
0:     IDirectory ihack = FileSystem.getFSRoot(hack);
0:     
0:     if (ihack == null) { 
0:       System.out.println ("** ihack is null");
0:     } else { 
0:       System.out.println ("** ihack is valid");
0:     }
0:     manager.createApplication(ihack); */
0:   }
0: 
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
0: }
author:Lin Sun
-------------------------------------------------------------------------------
commit:f3f9577
/////////////////////////////////////////////////////////////////////////
0:     
0:     // application name should be equal to eba name since application.mf is not provided
0:     assertEquals("test.eba", app.getApplicationMetadata().getApplicationName());
/////////////////////////////////////////////////////////////////////////
0:     
0:     // application name should equal to whatever Application name provided in the application.mf
0:     assertEquals("test application 2", app.getApplicationMetadata().getApplicationName());
0:     
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:694eb45
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.application.runtime.itests;
0: 
0: import static org.junit.Assert.assertEquals;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: 
0: import java.io.File;
0: import java.io.FileOutputStream;
0: 
0: import org.apache.aries.application.management.AriesApplication;
1: import org.apache.aries.application.management.AriesApplicationContext;
0: import org.apache.aries.application.management.AriesApplicationManager;
0: import org.apache.aries.application.utils.filesystem.FileSystem;
0: import org.apache.aries.sample.HelloWorld;
0: import org.apache.aries.unittest.fixture.ArchiveFixture;
0: import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public class BasicAppManagerTest extends AbstractIntegrationTest {
0:   
0:   /* Use @Before not @BeforeClass so as to ensure that these resources
0:    * are created in the paxweb temp directory, and not in the svn tree 
0:    */
0:   static boolean createdApplications = false;
0:   @Before
0:   public static void createApplications() throws Exception {
0:     if (createdApplications) { 
0:       return;
0:     }
0:     ZipFixture testEba = ArchiveFixture.newZip()
0:       .jar("sample.jar")
0:         .manifest().symbolicName("org.apache.aries.sample")
0:           .attribute("Bundle-Version", "1.0.0")
0:           .attribute("Import-Package", "org.apache.aries.sample")
0:           .end()
0:         .binary("org/apache/aries/sample/impl/HelloWorldImpl.class", 
0:             BasicAppManagerTest.class.getClassLoader().getResourceAsStream("org/apache/aries/sample/impl/HelloWorldImpl.class"))
0:         .binary("OSGI-INF/blueprint/sample-blueprint.xml", 
0:             BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
0:         .end();
0:       
0:     FileOutputStream fout = new FileOutputStream("test.eba");
0:     testEba.writeOut(fout);
0:     fout.close();
0:     
0:     ZipFixture testEba2 = testEba.binary("META-INF/APPLICATION.MF", 
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/APPLICATION.MF"))
0:         .end();
0:     fout = new FileOutputStream("test2.eba");
0:     testEba2.writeOut(fout);
0:     fout.close();
0:     createdApplications = true;
0:   }
0:   
0:   @Test
0:   public void testAppWithoutApplicationManifest() throws Exception {
0:     
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
0:     
0:     HelloWorld hw = getOsgiService(HelloWorld.class);
0:     String result = hw.getMessage();
0:     assertEquals (result, "hello world");
0:     
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:   }
0: 
0:   @Test
0:   public void testAppWithApplicationManifest() throws Exception {
0:     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
0:     AriesApplication app = manager.createApplication(FileSystem.getFSRoot(new File("test2.eba")));
0:     AriesApplicationContext ctx = manager.install(app);
0:     ctx.start();
0:     
0:     HelloWorld hw = getOsgiService(HelloWorld.class);
0:     String result = hw.getMessage();
0:     assertEquals (result, "hello world");
0:     
0:     ctx.stop();
0:     manager.uninstall(ctx);
0:   }
0: 
0:   
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:     Option[] options = options(
0:         // Log
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:         // Felix Config Admin
0:         mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:         // Felix mvn url handler
0:         mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0:         // this is how you set the default log level when using pax
0:         // logging (logProfile)
0:         systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:         // Bundles
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
0:         mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces"),
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"), 
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
0:         
0:         /* For debugging, uncomment the next two lines
0:         vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006"),
0:         waitForFrameworkStartup(),
0:         
0:         and add these imports:
0:         import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
0:         import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
0:         */
0: 
0:         equinox().version("3.5.0"));
0:     options = updateOptions(options);
0:     return options;
0:   }
0: }
commit:948b72b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.management.AriesApplicationContext;
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationContext ctx = manager.install(app);
/////////////////////////////////////////////////////////////////////////
0:     AriesApplicationContext ctx = manager.install(app);
author:David Jencks
-------------------------------------------------------------------------------
commit:0aad0ca
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/sample-blueprint.xml"))
/////////////////////////////////////////////////////////////////////////
0:         BasicAppManagerTest.class.getClassLoader().getResourceAsStream("basic/APPLICATION.MF"))
============================================================================