1:391a1aa: /*
1:391a1aa:  * Licensed under the Apache License, Version 2.0 (the "License");
1:391a1aa:  * you may not use this file except in compliance with the License.
1:391a1aa:  * You may obtain a copy of the License at
1:391a1aa:  *
1:391a1aa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:391a1aa:  *
1:391a1aa:  * Unless required by applicable law or agreed to in writing, software
1:391a1aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:391a1aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:391a1aa:  * See the License for the specific language governing permissions and
1:391a1aa:  * limitations under the License.
1:391a1aa:  */
1:391a1aa: package org.apache.aries.subsystem.itests;
4:391a1aa: 
1:391a1aa: import java.io.IOException;
1:391a1aa: import java.util.HashMap;
1:391a1aa: import java.util.Map;
1:391a1aa: 
1:391a1aa: import org.junit.Test;
1:391a1aa: import org.osgi.framework.Bundle;
1:57b6627: import org.osgi.framework.Constants;
1:391a1aa: import org.osgi.framework.namespace.IdentityNamespace;
1:391a1aa: import org.osgi.service.subsystem.Subsystem;
1:391a1aa: import org.osgi.service.subsystem.SubsystemConstants;
1:391a1aa: 
1:391a1aa: public class AutostartTest extends SubsystemTest {
1:391a1aa: 	/*
1:391a1aa: 	 * Subsystem-SymbolicName: application.a.esa
1:391a1aa: 	 * Subsystem-Content: bundle.a.jar
1:391a1aa: 	 */
1:391a1aa: 	private static final String APPLICATION_A = "application.a.esa";
1:391a1aa: 	/*
1:391a1aa: 	 * Subsystem-SymbolicName: application.b.esa
1:391a1aa: 	 * Subsystem-Content: bundle.a.jar,application.a.esa;type=osgi.subsystem.application
1:391a1aa: 	 */
1:391a1aa: 	private static final String APPLICATION_B = "application.b.esa";
1:391a1aa: 	/*
1:391a1aa: 	 * Bundle-SymbolicName: bundle.a.jar
1:391a1aa: 	 * Export-Package: x
1:391a1aa: 	 */
1:391a1aa: 	private static final String BUNDLE_A = "bundle.a.jar";
1:391a1aa: 	/*
1:391a1aa: 	 * Bundle-SymbolicName: bundle.b.jar
1:391a1aa: 	 * Import-Package: x
1:391a1aa: 	 */
1:391a1aa: 	private static final String BUNDLE_B = "bundle.b.jar";
1:391a1aa: 	/*
1:391a1aa: 	 * Subsystem-SymbolicName: composite.a.esa
1:391a1aa: 	 * Subsystem-Type: osgi.subsystem.composite
1:391a1aa: 	 * Subsystem-Content: bundle.a.jar;version="[0,0]"
1:391a1aa: 	 * Export-Package: x
1:391a1aa: 	 */
1:391a1aa: 	private static final String COMPOSITE_A = "composite.a.esa";
1:391a1aa: 	/*
1:391a1aa: 	 * Subsystem-SymbolicName: composite.b.esa
1:391a1aa: 	 * Subsystem-Type: osgi.subsystem.composite
1:391a1aa: 	 * Subsystem-Content: bundle.a.jar;version="[0,0]"
1:391a1aa: 	 * Import-Package: x
1:391a1aa: 	 * Preferred-Provider: composite.a.esa
1:391a1aa: 	 */
1:391a1aa: 	private static final String COMPOSITE_B = "composite.b.esa";
1:391a1aa: 	/*
1:391a1aa: 	 * Subsystem-SymbolicName: feature.a.esa
1:391a1aa: 	 * Subsystem-Type: osgi.subsystem.feature
1:391a1aa: 	 * Subsystem-Content: bundle.a.jar
1:391a1aa: 	 */
1:391a1aa: 	private static final String FEATURE_A = "feature.a.esa";
1:391a1aa: 	/*
1:391a1aa: 	 * Subsystem-SymbolicName: feature.b.esa
1:391a1aa: 	 * Subsystem-Type: osgi.subsystem.feature
1:391a1aa: 	 * Subsystem-Content: bundle.a.jar,feature.a.esa;type=osgi.subsystem.feature
1:391a1aa: 	 */
1:391a1aa: 	private static final String FEATURE_B = "feature.b.esa";
1:391a1aa: 	/*
1:391a1aa: 	 * Subsystem-SymbolicName: feature.c.esa
1:391a1aa: 	 * Subsystem-Type: osgi.subsystem.feature
1:391a1aa: 	 * Subsystem-Content: bundle.a.jar,feature.a.esa;type=osgi.subsystem.feature
1:391a1aa: 	 */
1:391a1aa: 	private static final String FEATURE_C = "feature.c.esa";
1:391a1aa: 	
1:391a1aa: 	private static void createApplicationA() throws IOException {
1:391a1aa: 		createApplicationAManifest();
1:391a1aa: 		createSubsystem(APPLICATION_A, BUNDLE_A);
2:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createApplicationAManifest() throws IOException {
1:391a1aa: 		Map<String, String> attributes = new HashMap<String, String>();
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1:391a1aa: 		createManifest(APPLICATION_A + ".mf", attributes);
1:391a1aa: 	}
1:391a1aa: 	
1:57b6627: 	private void createApplicationB() throws IOException {
1:391a1aa: 		createApplicationBManifest();
1:391a1aa: 		createSubsystem(APPLICATION_B, BUNDLE_A, APPLICATION_A);
1:391a1aa: 	}
1:391a1aa: 	
1:57b6627: 	private void createApplicationBManifest() throws IOException {
1:391a1aa: 		Map<String, String> attributes = new HashMap<String, String>();
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ',' + APPLICATION_A + ';' + IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE + '=' + SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1:391a1aa: 		createManifest(APPLICATION_B + ".mf", attributes);
1:391a1aa: 	}
1:391a1aa: 	
1:57b6627: 	private void createBundleA() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_A), exportPackage("x"));
1:391a1aa: 	}
1:391a1aa: 	
1:57b6627: 	private void createBundleB() throws IOException {
1:57b6627: 		createBundle(name(BUNDLE_B), importPackage("x"));
1:391a1aa: 	}
1:391a1aa: 	
1:57b6627: 	private void createCompositeA() throws IOException {
1:391a1aa: 		createCompositeAManifest();
1:391a1aa: 		createSubsystem(COMPOSITE_A, BUNDLE_A);
1:391a1aa: 	}
1:391a1aa: 	
1:57b6627: 	private void createCompositeAManifest() throws IOException {
1:391a1aa: 		Map<String, String> attributes = new HashMap<String, String>();
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ';' + IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE + "=\"[0,0]\"");
1:391a1aa: 		attributes.put(Constants.EXPORT_PACKAGE, "x");
1:391a1aa: 		createManifest(COMPOSITE_A + ".mf", attributes);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createCompositeB() throws IOException {
1:391a1aa: 		createCompositeBManifest();
1:391a1aa: 		createSubsystem(COMPOSITE_B, BUNDLE_B);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createCompositeBManifest() throws IOException {
1:391a1aa: 		Map<String, String> attributes = new HashMap<String, String>();
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_B);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B + ';' + IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE + "=\"[0,0]\"");
1:391a1aa: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1:391a1aa: 		attributes.put(SubsystemConstants.PREFERRED_PROVIDER, COMPOSITE_A);
1:391a1aa: 		createManifest(COMPOSITE_B + ".mf", attributes);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createFeatureA() throws IOException {
1:391a1aa: 		createFeatureAManifest();
1:391a1aa: 		createSubsystem(FEATURE_A, BUNDLE_A);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createFeatureAManifest() throws IOException {
1:391a1aa: 		Map<String, String> attributes = new HashMap<String, String>();
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:391a1aa: 		createManifest(FEATURE_A + ".mf", attributes);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createFeatureB() throws IOException {
1:391a1aa: 		createFeatureBManifest();
1:391a1aa: 		createSubsystem(FEATURE_B, BUNDLE_A);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createFeatureBManifest() throws IOException {
1:391a1aa: 		Map<String, String> attributes = new HashMap<String, String>();
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_B);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1:391a1aa: 		createManifest(FEATURE_B + ".mf", attributes);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createFeatureC() throws IOException {
1:391a1aa: 		createFeatureCManifest();
1:391a1aa: 		createSubsystem(FEATURE_C, BUNDLE_A, FEATURE_A);
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	private static void createFeatureCManifest() throws IOException {
1:391a1aa: 		Map<String, String> attributes = new HashMap<String, String>();
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_C);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:391a1aa: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ',' + FEATURE_A + ';' + IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE + '=' + SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1:391a1aa: 		createManifest(FEATURE_C + ".mf", attributes);
1:391a1aa: 	}
1:57b6627: 
1:57b6627: 	@Override
1:57b6627: 	public void createApplications() throws Exception {
1:391a1aa: 		createBundleA();
1:391a1aa: 		createBundleB();
1:391a1aa: 		createApplicationA();
1:391a1aa: 		createApplicationB();
1:391a1aa: 		createCompositeA();
1:391a1aa: 		createCompositeB();
1:391a1aa: 		createFeatureA();
1:391a1aa: 		createFeatureB();
1:391a1aa: 		createFeatureC();
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	@Test
1:391a1aa: 	public void testAutostartScoped() throws Exception {
1:391a1aa: 		Subsystem subsystem = null;
1:391a1aa: 		try {
1:391a1aa: 			subsystem = installSubsystemFromFile(APPLICATION_A);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, subsystem);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, subsystem);
1:391a1aa: 			startSubsystem(subsystem);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, subsystem);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, subsystem);
1:391a1aa: 			stopSubsystem(subsystem);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, subsystem);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, subsystem);
1:391a1aa: 		}
1:391a1aa: 		finally {
1:391a1aa: 			stopAndUninstallSubsystemSilently(subsystem);
1:391a1aa: 		}
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	@Test
1:391a1aa: 	public void testAutostartUnscoped() throws Exception {
1:391a1aa: 		Subsystem subsystem = null;
1:391a1aa: 		try {
1:391a1aa: 			subsystem = installSubsystemFromFile(FEATURE_A);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, subsystem);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, subsystem);
1:391a1aa: 			startSubsystem(subsystem);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, subsystem);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, subsystem);
1:391a1aa: 			stopSubsystem(subsystem);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, subsystem);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, subsystem);
1:391a1aa: 		}
1:391a1aa: 		finally {
1:391a1aa: 			stopAndUninstallSubsystemSilently(subsystem);
1:391a1aa: 		}
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	@Test
1:391a1aa: 	public void testAutostartChildScoped() throws Exception {
1:391a1aa: 		Subsystem compositeA = null;
1:391a1aa: 		try {
1:391a1aa: 			compositeA = installSubsystemFromFile(COMPOSITE_A);
1:391a1aa: 			Subsystem applicationA = installSubsystemFromFile(compositeA, APPLICATION_A);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, compositeA);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, compositeA);
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, applicationA);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, applicationA);
1:391a1aa: 			startSubsystem(compositeA);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, compositeA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, applicationA);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, applicationA);
1:391a1aa: 			startSubsystemFromResolved(applicationA);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, compositeA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, applicationA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationA);
1:391a1aa: 			stopSubsystem(applicationA);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, compositeA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, applicationA);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, applicationA);
1:391a1aa: 			startSubsystemFromResolved(applicationA);
1:391a1aa: 			stopSubsystem(compositeA);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, compositeA);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, compositeA);
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, applicationA);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, compositeA);
1:391a1aa: 		}
1:391a1aa: 		finally {
1:391a1aa: 			stopAndUninstallSubsystemSilently(compositeA);
1:391a1aa: 		}
1:391a1aa: 	}
1:e7c948c: 	
1:e7c948c: 	@Test
1:391a1aa: 	public void testAutostartChildUnscoped() throws Exception {
1:391a1aa: 		Subsystem featureA = null;
1:391a1aa: 		try {
1:391a1aa: 			featureA = installSubsystemFromFile(FEATURE_A);
1:391a1aa: 			Subsystem featureB = installSubsystemFromFile(featureA, FEATURE_B);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());
1:391a1aa: 			featureB = findSubsystemService(featureB.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, featureA);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, featureA);
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, featureB);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, featureB);
1:391a1aa: 			startSubsystem(featureA);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());
1:391a1aa: 			featureB = findSubsystemService(featureB.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, featureA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, featureB);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureB);
1:391a1aa: 			startSubsystemFromResolved(featureB);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());
1:391a1aa: 			featureB = findSubsystemService(featureB.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, featureA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, featureB);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureB);
1:391a1aa: 			stopSubsystem(featureB);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());
1:391a1aa: 			featureB = findSubsystemService(featureB.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, featureA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, featureB);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureB);
1:391a1aa: 			startSubsystemFromResolved(featureB);
1:391a1aa: 			stopSubsystem(featureA);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());
1:391a1aa: 			featureB = findSubsystemService(featureB.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, featureA);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, featureA);
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, featureB);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, featureA);
1:391a1aa: 		}
1:391a1aa: 		finally {
1:391a1aa: 			stopAndUninstallSubsystemSilently(featureA);
1:391a1aa: 		}
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	@Test
1:391a1aa: 	public void testAutostartChildAsContentScoped() throws Exception {
1:391a1aa: 		Subsystem applicationB = null;
1:391a1aa: 		try {
1:391a1aa: 			applicationB = installSubsystemFromFile(APPLICATION_B);
1:391a1aa: 			Subsystem applicationA = applicationB.getChildren().iterator().next();
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			applicationB = findSubsystemService(applicationB.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, applicationB);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, applicationB);
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, applicationA);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, applicationA);
1:391a1aa: 			startSubsystem(applicationB);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			applicationB = findSubsystemService(applicationB.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, applicationB);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationB);
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, applicationA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationA);
1:391a1aa: 			stopSubsystem(applicationA);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			applicationB = findSubsystemService(applicationB.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, applicationB);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationB);
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, applicationA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationA);
1:391a1aa: 			stopSubsystem(applicationB);
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			applicationB = findSubsystemService(applicationB.getSubsystemId());
1:391a1aa: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, applicationB);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, applicationB);
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, applicationA);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, applicationA);
1:391a1aa: 		}
1:391a1aa: 		finally {
1:391a1aa: 			stopAndUninstallSubsystemSilently(applicationB);
1:391a1aa: 		}
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	@Test
1:391a1aa: 	public void testAutostartChildAsContentUnscoped() throws Exception {
1:391a1aa: 		Subsystem featureC = null;
1:391a1aa: 		try {
1:391a1aa: 			featureC = installSubsystemFromFile(FEATURE_C);
1:391a1aa: 			Subsystem featureA = featureC.getChildren().iterator().next();
1:391a1aa: 			
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureC = findSubsystemService(featureC.getSubsystemId());
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, featureC);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, featureC);
1:391a1aa: 			assertState(Subsystem.State.INSTALLED, featureA);
1:391a1aa: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, featureA);
1:391a1aa: 			
1:391a1aa: 			startSubsystem(featureC);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureC = findSubsystemService(featureC.getSubsystemId());
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, featureC);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureC);
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, featureA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1:391a1aa: 			
1:391a1aa: 			stopSubsystem(featureA);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureC = findSubsystemService(featureC.getSubsystemId());
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, featureC);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureC);
1:391a1aa: 			assertState(Subsystem.State.ACTIVE, featureA);
1:391a1aa: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1:391a1aa: 			
1:391a1aa: 			stopSubsystem(featureC);
1:391a1aa: 			restartSubsystemsImplBundle();
1:391a1aa: 			featureC = findSubsystemService(featureC.getSubsystemId());
1:391a1aa: 			featureA = findSubsystemService(featureA.getSubsystemId());;
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, featureC);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, featureC);
1:391a1aa: 			assertState(Subsystem.State.RESOLVED, featureA);
1:391a1aa: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, featureA);
1:391a1aa: 		}
1:391a1aa: 		finally {
1:391a1aa: 			stopAndUninstallSubsystemSilently(featureC);
1:391a1aa: 		}
1:391a1aa: 	}
1:391a1aa: 	
1:391a1aa: 	@Test
1:391a1aa: 	public void testAutostartDependency() throws Exception {
1:391a1aa: 		Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1:391a1aa: 		try {
1:391a1aa: 			Subsystem compositeB = installSubsystemFromFile(COMPOSITE_B);
1:391a1aa: 			try {
1:391a1aa: 				restartSubsystemsImplBundle();
1:391a1aa: 				compositeB = findSubsystemService(compositeB.getSubsystemId());
1:391a1aa: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 				assertState(Subsystem.State.INSTALLED, compositeB);
1:391a1aa: 				assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_B, compositeB);
1:391a1aa: 				assertState(Subsystem.State.INSTALLED, compositeA);
1:391a1aa: 				assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, compositeA);
1:391a1aa: 				
1:391a1aa: 				startSubsystem(compositeA);
1:391a1aa: 				restartSubsystemsImplBundle();
1:391a1aa: 				compositeB = findSubsystemService(compositeB.getSubsystemId());
1:391a1aa: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 				assertState(Subsystem.State.INSTALLED, compositeB);
1:391a1aa: 				assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_B, compositeB);
1:391a1aa: 				assertState(Subsystem.State.ACTIVE, compositeA);
1:391a1aa: 				assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1:391a1aa: 				
1:391a1aa: 				stopSubsystem(compositeA);
1:391a1aa: 				startSubsystem(compositeB);
1:391a1aa: 				restartSubsystemsImplBundle();
1:391a1aa: 				compositeB = findSubsystemService(compositeB.getSubsystemId());
1:391a1aa: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 				assertState(Subsystem.State.ACTIVE, compositeB);
1:391a1aa: 				assertBundleState(Bundle.ACTIVE, BUNDLE_B, compositeB);
1:391a1aa: 				assertState(Subsystem.State.ACTIVE, compositeA);
1:391a1aa: 				assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1:391a1aa: 				
1:391a1aa: 				stopSubsystem(compositeB);
1:391a1aa: 				restartSubsystemsImplBundle();
1:391a1aa: 				compositeB = findSubsystemService(compositeB.getSubsystemId());
1:391a1aa: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 				assertState(Subsystem.State.RESOLVED, compositeB);
1:391a1aa: 				assertBundleState(Bundle.RESOLVED, BUNDLE_B, compositeB);
1:391a1aa: 				assertState(Subsystem.State.RESOLVED, compositeA);
1:391a1aa: 				assertBundleState(Bundle.RESOLVED, BUNDLE_A, compositeA);
1:391a1aa: 				
1:391a1aa: 				uninstallSubsystem(compositeB);
1:391a1aa: 				restartSubsystemsImplBundle();
1:391a1aa: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 				assertState(Subsystem.State.RESOLVED, compositeA);
1:391a1aa: 				assertBundleState(Bundle.RESOLVED, BUNDLE_A, compositeA);
1:391a1aa: 				
1:391a1aa: 				startSubsystemFromResolved(compositeA);
1:391a1aa: 				restartSubsystemsImplBundle();
1:391a1aa: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1:391a1aa: 				assertState(Subsystem.State.ACTIVE, compositeA);
1:391a1aa: 				assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1:391a1aa: 			}
1:391a1aa: 			finally {
1:391a1aa: 				stopAndUninstallSubsystemSilently(compositeB);
1:391a1aa: 			}
1:391a1aa: 		}
1:391a1aa: 		finally {
1:391a1aa: 			stopAndUninstallSubsystemSilently(compositeA);
1:391a1aa: 		}
1:391a1aa: 	}
1:391a1aa: 
1:391a1aa: 	@Test
1:e7c948c: 	/* Start a composite with a dependency on an installed, but unresolved subsystem.
1:e7c948c: 	 * The unresolved dependency should be auto-resolved and started (test fix to
1:e7c948c: 	 *  bug ARIES-1348).
1:e7c948c: 	 *
1:e7c948c: 	 * composite b imports package exported by a bundle in composite.a.  
1:e7c948c: 	 *  - install composite a
1:e7c948c: 	 *  - install composite b
1:e7c948c: 	 *  - start composite b
1:e7c948c: 	 */  
1:e7c948c: 	public void testStartCompositeWithUnresolvedDependency() throws Exception {
1:e7c948c: 		Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1:e7c948c: 		Subsystem compositeB = installSubsystemFromFile(COMPOSITE_B);
1:e7c948c: 		try {
1:e7c948c: 			startSubsystem(compositeB);
1:e7c948c: 			// A should be automatically resolved and started.
1:e7c948c: 			assertState(Subsystem.State.ACTIVE, compositeA);
1:e7c948c: 		}
1:e7c948c: 		finally {
1:e7c948c: 			stopSubsystemSilently(compositeB);
1:e7c948c: 			stopSubsystemSilently(compositeA);
1:e7c948c: 			uninstallSubsystemSilently(compositeB);			
1:e7c948c: 			uninstallSubsystemSilently(compositeA);
1:e7c948c: 		}
1:e7c948c: 	}
1:391a1aa: }
============================================================================
author:Tom Watson
-------------------------------------------------------------------------------
commit:e7c948c
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Test
1: 	/* Start a composite with a dependency on an installed, but unresolved subsystem.
1: 	 * The unresolved dependency should be auto-resolved and started (test fix to
1: 	 *  bug ARIES-1348).
1: 	 *
1: 	 * composite b imports package exported by a bundle in composite.a.  
1: 	 *  - install composite a
1: 	 *  - install composite b
1: 	 *  - start composite b
1: 	 */  
1: 	public void testStartCompositeWithUnresolvedDependency() throws Exception {
1: 		Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1: 		Subsystem compositeB = installSubsystemFromFile(COMPOSITE_B);
1: 		try {
1: 			startSubsystem(compositeB);
1: 			// A should be automatically resolved and started.
1: 			assertState(Subsystem.State.ACTIVE, compositeA);
1: 		}
1: 		finally {
1: 			stopSubsystemSilently(compositeB);
1: 			stopSubsystemSilently(compositeA);
1: 			uninstallSubsystemSilently(compositeB);			
1: 			uninstallSubsystemSilently(compositeA);
1: 		}
1: 	}
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Constants;
/////////////////////////////////////////////////////////////////////////
1: 	private void createApplicationB() throws IOException {
1: 	private void createApplicationBManifest() throws IOException {
1: 	private void createBundleA() throws IOException {
1: 		createBundle(name(BUNDLE_A), exportPackage("x"));
1: 	private void createBundleB() throws IOException {
1: 		createBundle(name(BUNDLE_B), importPackage("x"));
1: 	private void createCompositeA() throws IOException {
1: 	private void createCompositeAManifest() throws IOException {
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Override
1: 	public void createApplications() throws Exception {
/////////////////////////////////////////////////////////////////////////
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
/////////////////////////////////////////////////////////////////////////
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
author:John Ross
-------------------------------------------------------------------------------
commit:391a1aa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.subsystem.itests;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.namespace.IdentityNamespace;
1: import org.osgi.service.subsystem.Subsystem;
1: import org.osgi.service.subsystem.SubsystemConstants;
1: 
0: import aQute.lib.osgi.Constants;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class AutostartTest extends SubsystemTest {
1: 	/*
1: 	 * Subsystem-SymbolicName: application.a.esa
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String APPLICATION_A = "application.a.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: application.b.esa
1: 	 * Subsystem-Content: bundle.a.jar,application.a.esa;type=osgi.subsystem.application
1: 	 */
1: 	private static final String APPLICATION_B = "application.b.esa";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.a.jar
1: 	 * Export-Package: x
1: 	 */
1: 	private static final String BUNDLE_A = "bundle.a.jar";
1: 	/*
1: 	 * Bundle-SymbolicName: bundle.b.jar
1: 	 * Import-Package: x
1: 	 */
1: 	private static final String BUNDLE_B = "bundle.b.jar";
1: 	/*
1: 	 * Subsystem-SymbolicName: composite.a.esa
1: 	 * Subsystem-Type: osgi.subsystem.composite
1: 	 * Subsystem-Content: bundle.a.jar;version="[0,0]"
1: 	 * Export-Package: x
1: 	 */
1: 	private static final String COMPOSITE_A = "composite.a.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: composite.b.esa
1: 	 * Subsystem-Type: osgi.subsystem.composite
1: 	 * Subsystem-Content: bundle.a.jar;version="[0,0]"
1: 	 * Import-Package: x
1: 	 * Preferred-Provider: composite.a.esa
1: 	 */
1: 	private static final String COMPOSITE_B = "composite.b.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: feature.a.esa
1: 	 * Subsystem-Type: osgi.subsystem.feature
1: 	 * Subsystem-Content: bundle.a.jar
1: 	 */
1: 	private static final String FEATURE_A = "feature.a.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: feature.b.esa
1: 	 * Subsystem-Type: osgi.subsystem.feature
1: 	 * Subsystem-Content: bundle.a.jar,feature.a.esa;type=osgi.subsystem.feature
1: 	 */
1: 	private static final String FEATURE_B = "feature.b.esa";
1: 	/*
1: 	 * Subsystem-SymbolicName: feature.c.esa
1: 	 * Subsystem-Type: osgi.subsystem.feature
1: 	 * Subsystem-Content: bundle.a.jar,feature.a.esa;type=osgi.subsystem.feature
1: 	 */
1: 	private static final String FEATURE_C = "feature.c.esa";
1: 	
1: 	private static void createApplicationA() throws IOException {
1: 		createApplicationAManifest();
1: 		createSubsystem(APPLICATION_A, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createApplicationAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_A);
1: 		createManifest(APPLICATION_A + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createApplicationB() throws IOException {
1: 		createApplicationBManifest();
1: 		createSubsystem(APPLICATION_B, BUNDLE_A, APPLICATION_A);
1: 	}
1: 	
0: 	private static void createApplicationBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, APPLICATION_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ',' + APPLICATION_A + ';' + IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE + '=' + SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
1: 		createManifest(APPLICATION_B + ".mf", attributes);
1: 	}
1: 	
0: 	private static void createBundleA() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.EXPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_A, headers);
1: 	}
1: 	
0: 	private static void createBundleB() throws IOException {
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.IMPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_B, headers);
1: 	}
1: 	
0: 	private static void createCompositeA() throws IOException {
1: 		createCompositeAManifest();
1: 		createSubsystem(COMPOSITE_A, BUNDLE_A);
1: 	}
1: 	
0: 	private static void createCompositeAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ';' + IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE + "=\"[0,0]\"");
1: 		attributes.put(Constants.EXPORT_PACKAGE, "x");
1: 		createManifest(COMPOSITE_A + ".mf", attributes);
1: 	}
1: 	
1: 	private static void createCompositeB() throws IOException {
1: 		createCompositeBManifest();
1: 		createSubsystem(COMPOSITE_B, BUNDLE_B);
1: 	}
1: 	
1: 	private static void createCompositeBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, COMPOSITE_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_B + ';' + IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE + "=\"[0,0]\"");
1: 		attributes.put(Constants.IMPORT_PACKAGE, "x");
1: 		attributes.put(SubsystemConstants.PREFERRED_PROVIDER, COMPOSITE_A);
1: 		createManifest(COMPOSITE_B + ".mf", attributes);
1: 	}
1: 	
1: 	private static void createFeatureA() throws IOException {
1: 		createFeatureAManifest();
1: 		createSubsystem(FEATURE_A, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createFeatureAManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_A);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1: 		createManifest(FEATURE_A + ".mf", attributes);
1: 	}
1: 	
1: 	private static void createFeatureB() throws IOException {
1: 		createFeatureBManifest();
1: 		createSubsystem(FEATURE_B, BUNDLE_A);
1: 	}
1: 	
1: 	private static void createFeatureBManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_B);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A);
1: 		createManifest(FEATURE_B + ".mf", attributes);
1: 	}
1: 	
1: 	private static void createFeatureC() throws IOException {
1: 		createFeatureCManifest();
1: 		createSubsystem(FEATURE_C, BUNDLE_A, FEATURE_A);
1: 	}
1: 	
1: 	private static void createFeatureCManifest() throws IOException {
1: 		Map<String, String> attributes = new HashMap<String, String>();
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME, FEATURE_C);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_TYPE, SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 		attributes.put(SubsystemConstants.SUBSYSTEM_CONTENT, BUNDLE_A + ',' + FEATURE_A + ';' + IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE + '=' + SubsystemConstants.SUBSYSTEM_TYPE_FEATURE);
1: 		createManifest(FEATURE_C + ".mf", attributes);
1: 	}
1: 	
0: 	private static boolean createdTestFiles;
0: 	@Before
0: 	public static void createTestFiles() throws Exception {
0: 		if (createdTestFiles)
0: 			return;
1: 		createBundleA();
1: 		createBundleB();
1: 		createApplicationA();
1: 		createApplicationB();
1: 		createCompositeA();
1: 		createCompositeB();
1: 		createFeatureA();
1: 		createFeatureB();
1: 		createFeatureC();
0: 		createdTestFiles = true;
1: 	}
1: 	
0: 	public void setUp() throws Exception {
0: 		super.setUp();
1: 	}
1: 	
1: 	@Test
1: 	public void testAutostartScoped() throws Exception {
1: 		Subsystem subsystem = null;
1: 		try {
1: 			subsystem = installSubsystemFromFile(APPLICATION_A);
1: 			restartSubsystemsImplBundle();
1: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1: 			assertState(Subsystem.State.INSTALLED, subsystem);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, subsystem);
1: 			startSubsystem(subsystem);
1: 			restartSubsystemsImplBundle();
1: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1: 			assertState(Subsystem.State.ACTIVE, subsystem);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, subsystem);
1: 			stopSubsystem(subsystem);
1: 			restartSubsystemsImplBundle();
1: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1: 			assertState(Subsystem.State.RESOLVED, subsystem);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, subsystem);
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(subsystem);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testAutostartUnscoped() throws Exception {
1: 		Subsystem subsystem = null;
1: 		try {
1: 			subsystem = installSubsystemFromFile(FEATURE_A);
1: 			restartSubsystemsImplBundle();
1: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1: 			assertState(Subsystem.State.INSTALLED, subsystem);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, subsystem);
1: 			startSubsystem(subsystem);
1: 			restartSubsystemsImplBundle();
1: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1: 			assertState(Subsystem.State.ACTIVE, subsystem);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, subsystem);
1: 			stopSubsystem(subsystem);
1: 			restartSubsystemsImplBundle();
1: 			subsystem = findSubsystemService(subsystem.getSubsystemId());
1: 			assertState(Subsystem.State.RESOLVED, subsystem);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, subsystem);
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(subsystem);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testAutostartChildScoped() throws Exception {
1: 		Subsystem compositeA = null;
1: 		try {
1: 			compositeA = installSubsystemFromFile(COMPOSITE_A);
1: 			Subsystem applicationA = installSubsystemFromFile(compositeA, APPLICATION_A);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());
1: 			assertState(Subsystem.State.INSTALLED, compositeA);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, compositeA);
1: 			assertState(Subsystem.State.INSTALLED, applicationA);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, applicationA);
1: 			startSubsystem(compositeA);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, compositeA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1: 			assertState(Subsystem.State.RESOLVED, applicationA);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, applicationA);
1: 			startSubsystemFromResolved(applicationA);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, compositeA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1: 			assertState(Subsystem.State.ACTIVE, applicationA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationA);
1: 			stopSubsystem(applicationA);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, compositeA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1: 			assertState(Subsystem.State.RESOLVED, applicationA);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, applicationA);
1: 			startSubsystemFromResolved(applicationA);
1: 			stopSubsystem(compositeA);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1: 			assertState(Subsystem.State.RESOLVED, compositeA);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, compositeA);
1: 			assertState(Subsystem.State.RESOLVED, applicationA);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, compositeA);
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(compositeA);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testAutostartChildUnscoped() throws Exception {
1: 		Subsystem featureA = null;
1: 		try {
1: 			featureA = installSubsystemFromFile(FEATURE_A);
1: 			Subsystem featureB = installSubsystemFromFile(featureA, FEATURE_B);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			featureA = findSubsystemService(featureA.getSubsystemId());
1: 			featureB = findSubsystemService(featureB.getSubsystemId());
1: 			assertState(Subsystem.State.INSTALLED, featureA);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, featureA);
1: 			assertState(Subsystem.State.INSTALLED, featureB);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, featureB);
1: 			startSubsystem(featureA);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			featureA = findSubsystemService(featureA.getSubsystemId());
1: 			featureB = findSubsystemService(featureB.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, featureA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1: 			assertState(Subsystem.State.RESOLVED, featureB);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureB);
1: 			startSubsystemFromResolved(featureB);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			featureA = findSubsystemService(featureA.getSubsystemId());
1: 			featureB = findSubsystemService(featureB.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, featureA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1: 			assertState(Subsystem.State.ACTIVE, featureB);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureB);
1: 			stopSubsystem(featureB);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			featureA = findSubsystemService(featureA.getSubsystemId());
1: 			featureB = findSubsystemService(featureB.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, featureA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1: 			assertState(Subsystem.State.RESOLVED, featureB);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureB);
1: 			startSubsystemFromResolved(featureB);
1: 			stopSubsystem(featureA);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			featureA = findSubsystemService(featureA.getSubsystemId());
1: 			featureB = findSubsystemService(featureB.getSubsystemId());;
1: 			assertState(Subsystem.State.RESOLVED, featureA);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, featureA);
1: 			assertState(Subsystem.State.RESOLVED, featureB);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, featureA);
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(featureA);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testAutostartChildAsContentScoped() throws Exception {
1: 		Subsystem applicationB = null;
1: 		try {
1: 			applicationB = installSubsystemFromFile(APPLICATION_B);
1: 			Subsystem applicationA = applicationB.getChildren().iterator().next();
1: 			
1: 			restartSubsystemsImplBundle();
1: 			applicationB = findSubsystemService(applicationB.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());
1: 			assertState(Subsystem.State.INSTALLED, applicationB);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, applicationB);
1: 			assertState(Subsystem.State.INSTALLED, applicationA);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, applicationA);
1: 			startSubsystem(applicationB);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			applicationB = findSubsystemService(applicationB.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, applicationB);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationB);
1: 			assertState(Subsystem.State.ACTIVE, applicationA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationA);
1: 			stopSubsystem(applicationA);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			applicationB = findSubsystemService(applicationB.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, applicationB);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationB);
1: 			assertState(Subsystem.State.ACTIVE, applicationA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, applicationA);
1: 			stopSubsystem(applicationB);
1: 			
1: 			restartSubsystemsImplBundle();
1: 			applicationB = findSubsystemService(applicationB.getSubsystemId());
1: 			applicationA = findSubsystemService(applicationA.getSubsystemId());;
1: 			assertState(Subsystem.State.RESOLVED, applicationB);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, applicationB);
1: 			assertState(Subsystem.State.RESOLVED, applicationA);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, applicationA);
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(applicationB);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testAutostartChildAsContentUnscoped() throws Exception {
1: 		Subsystem featureC = null;
1: 		try {
1: 			featureC = installSubsystemFromFile(FEATURE_C);
1: 			Subsystem featureA = featureC.getChildren().iterator().next();
1: 			
1: 			restartSubsystemsImplBundle();
1: 			featureC = findSubsystemService(featureC.getSubsystemId());
1: 			featureA = findSubsystemService(featureA.getSubsystemId());
1: 			assertState(Subsystem.State.INSTALLED, featureC);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, featureC);
1: 			assertState(Subsystem.State.INSTALLED, featureA);
1: 			assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, featureA);
1: 			
1: 			startSubsystem(featureC);
1: 			restartSubsystemsImplBundle();
1: 			featureC = findSubsystemService(featureC.getSubsystemId());
1: 			featureA = findSubsystemService(featureA.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, featureC);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureC);
1: 			assertState(Subsystem.State.ACTIVE, featureA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1: 			
1: 			stopSubsystem(featureA);
1: 			restartSubsystemsImplBundle();
1: 			featureC = findSubsystemService(featureC.getSubsystemId());
1: 			featureA = findSubsystemService(featureA.getSubsystemId());;
1: 			assertState(Subsystem.State.ACTIVE, featureC);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureC);
1: 			assertState(Subsystem.State.ACTIVE, featureA);
1: 			assertBundleState(Bundle.ACTIVE, BUNDLE_A, featureA);
1: 			
1: 			stopSubsystem(featureC);
1: 			restartSubsystemsImplBundle();
1: 			featureC = findSubsystemService(featureC.getSubsystemId());
1: 			featureA = findSubsystemService(featureA.getSubsystemId());;
1: 			assertState(Subsystem.State.RESOLVED, featureC);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, featureC);
1: 			assertState(Subsystem.State.RESOLVED, featureA);
1: 			assertBundleState(Bundle.RESOLVED, BUNDLE_A, featureA);
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(featureC);
1: 		}
1: 	}
1: 	
1: 	@Test
1: 	public void testAutostartDependency() throws Exception {
1: 		Subsystem compositeA = installSubsystemFromFile(COMPOSITE_A);
1: 		try {
1: 			Subsystem compositeB = installSubsystemFromFile(COMPOSITE_B);
1: 			try {
1: 				restartSubsystemsImplBundle();
1: 				compositeB = findSubsystemService(compositeB.getSubsystemId());
1: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 				assertState(Subsystem.State.INSTALLED, compositeB);
1: 				assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_B, compositeB);
1: 				assertState(Subsystem.State.INSTALLED, compositeA);
1: 				assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_A, compositeA);
1: 				
1: 				startSubsystem(compositeA);
1: 				restartSubsystemsImplBundle();
1: 				compositeB = findSubsystemService(compositeB.getSubsystemId());
1: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 				assertState(Subsystem.State.INSTALLED, compositeB);
1: 				assertBundleState(Bundle.INSTALLED | Bundle.RESOLVED, BUNDLE_B, compositeB);
1: 				assertState(Subsystem.State.ACTIVE, compositeA);
1: 				assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1: 				
1: 				stopSubsystem(compositeA);
1: 				startSubsystem(compositeB);
1: 				restartSubsystemsImplBundle();
1: 				compositeB = findSubsystemService(compositeB.getSubsystemId());
1: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 				assertState(Subsystem.State.ACTIVE, compositeB);
1: 				assertBundleState(Bundle.ACTIVE, BUNDLE_B, compositeB);
1: 				assertState(Subsystem.State.ACTIVE, compositeA);
1: 				assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1: 				
1: 				stopSubsystem(compositeB);
1: 				restartSubsystemsImplBundle();
1: 				compositeB = findSubsystemService(compositeB.getSubsystemId());
1: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 				assertState(Subsystem.State.RESOLVED, compositeB);
1: 				assertBundleState(Bundle.RESOLVED, BUNDLE_B, compositeB);
1: 				assertState(Subsystem.State.RESOLVED, compositeA);
1: 				assertBundleState(Bundle.RESOLVED, BUNDLE_A, compositeA);
1: 				
1: 				uninstallSubsystem(compositeB);
1: 				restartSubsystemsImplBundle();
1: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 				assertState(Subsystem.State.RESOLVED, compositeA);
1: 				assertBundleState(Bundle.RESOLVED, BUNDLE_A, compositeA);
1: 				
1: 				startSubsystemFromResolved(compositeA);
1: 				restartSubsystemsImplBundle();
1: 				compositeA = findSubsystemService(compositeA.getSubsystemId());
1: 				assertState(Subsystem.State.ACTIVE, compositeA);
1: 				assertBundleState(Bundle.ACTIVE, BUNDLE_A, compositeA);
1: 			}
1: 			finally {
1: 				stopAndUninstallSubsystemSilently(compositeB);
1: 			}
1: 		}
1: 		finally {
1: 			stopAndUninstallSubsystemSilently(compositeA);
1: 		}
1: 	}
1: }
============================================================================