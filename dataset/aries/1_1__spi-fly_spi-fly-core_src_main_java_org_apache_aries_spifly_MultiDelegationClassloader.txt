1:1c43780: /**
1:1c43780:  * Licensed to the Apache Software Foundation (ASF) under one
1:1c43780:  * or more contributor license agreements.  See the NOTICE file
1:1c43780:  * distributed with this work for additional information
1:1c43780:  * regarding copyright ownership.  The ASF licenses this file
1:1c43780:  * to you under the Apache License, Version 2.0 (the
1:1c43780:  * "License"); you may not use this file except in compliance
1:1c43780:  * with the License.  You may obtain a copy of the License at
1:1c43780:  *
1:1c43780:  *   http://www.apache.org/licenses/LICENSE-2.0
1:1c43780:  *
1:1c43780:  * Unless required by applicable law or agreed to in writing,
1:1c43780:  * software distributed under the License is distributed on an
1:1c43780:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:1c43780:  * KIND, either express or implied.  See the License for the
1:1c43780:  * specific language governing permissions and limitations
1:1c43780:  * under the License.
1:1c43780:  */
1:1c43780: package org.apache.aries.spifly;
1:1c43780: 
1:1c43780: import java.io.IOException;
1:1c43780: import java.io.InputStream;
1:1c43780: import java.net.URL;
1:1c43780: import java.util.ArrayList;
1:1c43780: import java.util.Collections;
1:1c43780: import java.util.Enumeration;
1:1c43780: import java.util.List;
1:1c43780: 
1:1c43780: /** A classloader that delegates to a number of other classloaders.
1:1c43780:  * This classloader can be used if a single classloader is needed that has
1:1c43780:  * vibisility of a number of other classloaders. For example if a Thread Context
1:1c43780:  * Classloader is needed that has visibility of a number of bundles so that 
1:1c43780:  * ServiceLoader.load() can find all the services provided by these bundles.
1:1c43780:  */
1:1c43780: public class MultiDelegationClassloader extends ClassLoader {
1:1c43780:     private final ClassLoader[] delegates;
1:1c43780:     
1:1c43780:     public MultiDelegationClassloader(ClassLoader ... classLoaders) {
1:1c43780:         if (classLoaders == null) 
1:1c43780:             throw new NullPointerException();
1:1c43780:         
1:1c43780:         delegates = classLoaders.clone();
1:1c43780:     }
1:1c43780:     
1:1c43780:     @Override
1:1c43780:     public URL getResource(String name) {
1:1c43780:         for (ClassLoader cl : delegates) {
1:1c43780:             URL res = cl.getResource(name);
1:1c43780:             if (res != null)
1:1c43780:                 return res;
1:1c43780:         }                
1:1c43780:         return null;
1:1c43780:     }
1:1c43780:     
1:1c43780:     @Override
1:1c43780:     public InputStream getResourceAsStream(String name) {
1:1c43780:         for (ClassLoader cl : delegates) {
1:1c43780:             InputStream is = cl.getResourceAsStream(name);
1:1c43780:             if (is != null)
1:1c43780:                 return is;
1:1c43780:         }
1:1c43780:         return null;
1:1c43780:     }
1:1c43780:     
1:1c43780:     @Override
1:1c43780:     public Enumeration<URL> getResources(String name) throws IOException {
1:1c43780:         List<URL> urls = new ArrayList<URL>();
1:1c43780:         
1:1c43780:         for (ClassLoader cl : delegates) {
1:1c43780:             urls.addAll(Collections.list(cl.getResources(name)));
1:1c43780:         }
1:1c43780:         return Collections.enumeration(urls);
1:1c43780:     }
1:1c43780:     
1:1c43780:     @Override
1:1c43780:     public Class<?> loadClass(String name) throws ClassNotFoundException {
1:1c43780:         ClassNotFoundException lastEx = null;
1:1c43780:         for (ClassLoader cl : delegates) {
1:1c43780:             try {
1:1c43780:                 return cl.loadClass(name);
1:1c43780:             } catch (ClassNotFoundException e) {
1:1c43780:                 lastEx = e;
1:1c43780:             }
1:1c43780:         }
1:1c43780:         throw lastEx;
1:1c43780:     }
1:1c43780: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:1c43780
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.spifly;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Enumeration;
1: import java.util.List;
1: 
1: /** A classloader that delegates to a number of other classloaders.
1:  * This classloader can be used if a single classloader is needed that has
1:  * vibisility of a number of other classloaders. For example if a Thread Context
1:  * Classloader is needed that has visibility of a number of bundles so that 
1:  * ServiceLoader.load() can find all the services provided by these bundles.
1:  */
1: public class MultiDelegationClassloader extends ClassLoader {
1:     private final ClassLoader[] delegates;
1:     
1:     public MultiDelegationClassloader(ClassLoader ... classLoaders) {
1:         if (classLoaders == null) 
1:             throw new NullPointerException();
1:         
1:         delegates = classLoaders.clone();
1:     }
1:     
1:     @Override
1:     public URL getResource(String name) {
1:         for (ClassLoader cl : delegates) {
1:             URL res = cl.getResource(name);
1:             if (res != null)
1:                 return res;
1:         }                
1:         return null;
1:     }
1:     
1:     @Override
1:     public InputStream getResourceAsStream(String name) {
1:         for (ClassLoader cl : delegates) {
1:             InputStream is = cl.getResourceAsStream(name);
1:             if (is != null)
1:                 return is;
1:         }
1:         return null;
1:     }
1:     
1:     @Override
1:     public Enumeration<URL> getResources(String name) throws IOException {
1:         List<URL> urls = new ArrayList<URL>();
1:         
1:         for (ClassLoader cl : delegates) {
1:             urls.addAll(Collections.list(cl.getResources(name)));
1:         }
1:         return Collections.enumeration(urls);
1:     }
1:     
1:     @Override
1:     public Class<?> loadClass(String name) throws ClassNotFoundException {
1:         ClassNotFoundException lastEx = null;
1:         for (ClassLoader cl : delegates) {
1:             try {
1:                 return cl.loadClass(name);
1:             } catch (ClassNotFoundException e) {
1:                 lastEx = e;
1:             }
1:         }
1:         throw lastEx;
1:     }
1: }
============================================================================