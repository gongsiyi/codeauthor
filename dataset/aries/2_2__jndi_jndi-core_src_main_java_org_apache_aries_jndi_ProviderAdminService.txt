1:9e140bf: /*
1:9e140bf:  * Licensed to the Apache Software Foundation (ASF) under one
1:9e140bf:  * or more contributor license agreements.  See the NOTICE file
1:9e140bf:  * distributed with this work for additional information
1:9e140bf:  * regarding copyright ownership.  The ASF licenses this file
1:9e140bf:  * to you under the Apache License, Version 2.0 (the
1:9e140bf:  * "License"); you may not use this file except in compliance
1:9e140bf:  * with the License.  You may obtain a copy of the License at
1:9e140bf:  *
1:9e140bf:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9e140bf:  *
1:9e140bf:  * Unless required by applicable law or agreed to in writing,
1:9e140bf:  * software distributed under the License is distributed on an
1:9e140bf:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9e140bf:  * KIND, either express or implied.  See the License for the
1:9e140bf:  * specific language governing permissions and limitations
1:9e140bf:  * under the License.
1:9e140bf:  */
1:9e140bf: package org.apache.aries.jndi;
1:9e140bf: 
1:9e140bf: import java.util.Hashtable;
1:9e140bf: import java.util.Map;
1:9e140bf: 
1:9e140bf: import javax.naming.Context;
1:9e140bf: import javax.naming.Name;
1:9e140bf: import javax.naming.directory.Attributes;
1:9e140bf: 
1:9e140bf: import org.osgi.framework.BundleContext;
1:9e140bf: import org.osgi.service.jndi.JNDIProviderAdmin;
1:9e140bf: 
1:9e140bf: public class ProviderAdminService implements JNDIProviderAdmin {
1:9e140bf: 
1:9e140bf:     private DirObjectFactoryHelper helper;
1:9e140bf:     
1:7b2544b:     public ProviderAdminService(BundleContext defaultContext, BundleContext callerContext) {
1:7b2544b:         helper = new DirObjectFactoryHelper(defaultContext, callerContext);
1:9e140bf:     }
1:9e140bf:     
1:9e140bf:     public Object getObjectInstance(Object obj, 
1:9e140bf:                                     Name name, 
1:9e140bf:                                     Context context, 
1:b756d71:                                     Map<?,?> environment)
1:9e140bf:         throws Exception {
1:b756d71:         Hashtable<?,?> env = Utils.toHashtable(environment);
1:9e140bf:         return helper.getObjectInstance(obj, name, context, env);
1:9e140bf:     }
1:9e140bf: 
1:9e140bf:     public Object getObjectInstance(Object obj,
1:9e140bf:                                     Name name,
1:9e140bf:                                     Context context,
1:b756d71:                                     Map<?,?> environment,
1:9e140bf:                                     Attributes attributes) 
1:9e140bf:         throws Exception {
1:b756d71:         Hashtable<?,?> env = Utils.toHashtable(environment);
1:9e140bf:         return helper.getObjectInstance(obj, name, context, env, attributes);
1:9e140bf:     }
1:9e140bf: 
1:7b2544b:     public void close() {        
1:7b2544b:     }
1:9e140bf: }
============================================================================
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:b756d71
/////////////////////////////////////////////////////////////////////////
1:                                     Map<?,?> environment)
1:         Hashtable<?,?> env = Utils.toHashtable(environment);
1:                                     Map<?,?> environment,
1:         Hashtable<?,?> env = Utils.toHashtable(environment);
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
1:     public ProviderAdminService(BundleContext defaultContext, BundleContext callerContext) {
1:         helper = new DirObjectFactoryHelper(defaultContext, callerContext);
/////////////////////////////////////////////////////////////////////////
0:         Hashtable env = Utils.toHashtable(environment);
/////////////////////////////////////////////////////////////////////////
0:         Hashtable env = Utils.toHashtable(environment);
1:     public void close() {        
1:     }
commit:9e140bf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi;
1: 
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import javax.naming.Context;
1: import javax.naming.Name;
1: import javax.naming.directory.Attributes;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.jndi.JNDIProviderAdmin;
1: 
1: public class ProviderAdminService implements JNDIProviderAdmin {
1: 
1:     private DirObjectFactoryHelper helper;
1:     
0:     public ProviderAdminService(BundleContext context) {
0:         helper = new DirObjectFactoryHelper();
0:         helper.setBundleContext(context);
1:     }
1:     
1:     public Object getObjectInstance(Object obj, 
1:                                     Name name, 
1:                                     Context context, 
0:                                     Map environment)
1:         throws Exception {
0:         Hashtable env = ContextHelper.toHashtable(environment);
1:         return helper.getObjectInstance(obj, name, context, env);
1:     }
1: 
1:     public Object getObjectInstance(Object obj,
1:                                     Name name,
1:                                     Context context,
0:                                     Map environment,
1:                                     Attributes attributes) 
1:         throws Exception {
0:         Hashtable env = ContextHelper.toHashtable(environment);
1:         return helper.getObjectInstance(obj, name, context, env, attributes);
1:     }
1: 
1: }
============================================================================