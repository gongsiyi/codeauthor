1:24455ce: /*
1:24455ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:24455ce:  * or more contributor license agreements.  See the NOTICE file
1:24455ce:  * distributed with this work for additional information
1:24455ce:  * regarding copyright ownership.  The ASF licenses this file
1:24455ce:  * to you under the Apache License, Version 2.0 (the
1:24455ce:  * "License"); you may not use this file except in compliance
1:24455ce:  * with the License.  You may obtain a copy of the License at
1:24455ce:  *
1:24455ce:  *   http://www.apache.org/licenses/LICENSE-2.0
1:24455ce:  *
1:24455ce:  * Unless required by applicable law or agreed to in writing,
1:24455ce:  * software distributed under the License is distributed on an
1:24455ce:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:24455ce:  * KIND, either express or implied.  See the License for the
1:24455ce:  * specific language governing permissions and limitations
1:24455ce:  * under the License.
1:24455ce:  */
1:24455ce: package org.apache.aries.proxy.impl;
1:24455ce: 
1:24455ce: import java.lang.reflect.InvocationHandler;
1:24455ce: import java.lang.reflect.InvocationTargetException;
1:24455ce: import java.lang.reflect.Method;
1:24455ce: import java.util.concurrent.Callable;
1:24455ce: 
1:96d4e06: import org.apache.aries.proxy.InvocationListener;
1:24455ce: 
1:24455ce: public final class ProxyHandler implements InvocationHandler {
1:24455ce:   private final Callable<Object> target;
1:24455ce:   private final InvocationHandler core;
1:24455ce:   private final AbstractProxyManager proxyManager;
1:24455ce: 
1:96d4e06:   public ProxyHandler(AbstractProxyManager abstractProxyManager, Callable<Object> dispatcher, InvocationListener listener)
1:24455ce:   {
1:24455ce:     target = dispatcher;
1:24455ce:     proxyManager = abstractProxyManager;
1:96d4e06:     final InvocationListener nonNullListener;
1:96d4e06:     if (listener == null) {
1:96d4e06:       nonNullListener = new DefaultWrapper();
1:24455ce:     } else {
1:96d4e06:       nonNullListener = listener;
2:24455ce:     }
1:24455ce:     
1:24455ce:     core = new InvocationHandler() {
1:24455ce:       public Object invoke(Object proxy, Method method, Object[] args)
1:24455ce:           throws Throwable 
1:24455ce:       {
1:96d4e06:         Object result = null;
1:96d4e06:         Object token = null;
1:96d4e06:         boolean inInvoke = false;
1:96d4e06:         try {
1:96d4e06:           token = nonNullListener.preInvoke(proxy, method, args);
1:96d4e06:           inInvoke = true;
1:96d4e06:           result = method.invoke(target.call(), args);
1:96d4e06:           inInvoke = false;
1:96d4e06:           nonNullListener.postInvoke(token, proxy, method, result);
1:24455ce: 
1:96d4e06:         } catch (Throwable e) {
1:96d4e06:           // whether the the exception is an error is an application decision
1:96d4e06:           // if we catch an exception we decide carefully which one to
1:96d4e06:           // throw onwards
1:96d4e06:           Throwable exceptionToRethrow = null;
1:96d4e06:           // if the exception came from a precall or postcall 
1:96d4e06:           // we will rethrow it
1:96d4e06:           if (!inInvoke) {
1:96d4e06:             exceptionToRethrow = e;
1:96d4e06:           }
1:96d4e06:           // if the exception didn't come from precall or postcall then it
1:96d4e06:           // came from invoke
1:96d4e06:           // we will rethrow this exception if it is not a runtime
1:96d4e06:           // exception, but we must unwrap InvocationTargetExceptions
1:96d4e06:           else {
1:96d4e06:             if (e instanceof InvocationTargetException) {
1:96d4e06:               e = ((InvocationTargetException) e).getTargetException();
1:96d4e06:             }
1:96d4e06:             
1:96d4e06:             if (!(e instanceof RuntimeException)) {
1:96d4e06:               exceptionToRethrow = e;
1:96d4e06:             }
1:96d4e06:           }
1:96d4e06:           try {
1:96d4e06:             nonNullListener.postInvokeExceptionalReturn(token, proxy, method, e);
1:96d4e06:           } catch (Exception f) {
1:96d4e06:             // we caught an exception from
1:96d4e06:             // postInvokeExceptionalReturn
1:96d4e06:             // if we haven't already chosen an exception to rethrow then
1:96d4e06:             // we will throw this exception
1:96d4e06:             if (exceptionToRethrow == null) {
1:96d4e06:               exceptionToRethrow = f;
1:96d4e06:             }
1:96d4e06:           }
1:96d4e06:           // if we made it this far without choosing an exception we
1:96d4e06:           // should throw e
1:96d4e06:           if (exceptionToRethrow == null) {
1:96d4e06:             exceptionToRethrow = e;
1:96d4e06:           }
1:96d4e06:           throw exceptionToRethrow;
1:96d4e06:         }
1:96d4e06:         return result;
1:24455ce:       }
1:24455ce:     };
1:24455ce:   }
1:24455ce: 
1:24455ce:   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable 
1:24455ce:   {
1:24455ce:     // Unwrap calls for equals
1:24455ce:     if (method.getName().equals("equals")
1:96d4e06:             && method.getParameterTypes().length == 1 &&
1:96d4e06:             method.getParameterTypes()[0] == Object.class) {
1:24455ce:         Object targetObject = args[0];
1:24455ce:         if (proxyManager.isProxy(targetObject)) {
1:7ec2e05:           args[0] = proxyManager.unwrap(targetObject).call();
1:24455ce:         }
1:24455ce:     } else if (method.getName().equals("finalize") && method.getParameterTypes().length == 0) {
1:24455ce:         // special case finalize, don't route through to delegate because that will get its own call
1:24455ce:         return null;
1:24455ce:     }
1:24455ce:     
1:96d4e06:     return core.invoke(proxy, method, args);
1:24455ce:   }
1:24455ce: 
1:24455ce:   public Callable<Object> getTarget() 
1:24455ce:   {
1:24455ce:     return target;
1:24455ce:   }
1:24455ce: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.InvocationListener;
1:   public ProxyHandler(AbstractProxyManager abstractProxyManager, Callable<Object> dispatcher, InvocationListener listener)
1:     final InvocationListener nonNullListener;
1:     if (listener == null) {
1:       nonNullListener = new DefaultWrapper();
1:       nonNullListener = listener;
1:         Object result = null;
1:         Object token = null;
1:         boolean inInvoke = false;
1:         try {
1:           token = nonNullListener.preInvoke(proxy, method, args);
1:           inInvoke = true;
1:           result = method.invoke(target.call(), args);
1:           inInvoke = false;
1:           nonNullListener.postInvoke(token, proxy, method, result);
1:         } catch (Throwable e) {
1:           // whether the the exception is an error is an application decision
1:           // if we catch an exception we decide carefully which one to
1:           // throw onwards
1:           Throwable exceptionToRethrow = null;
1:           // if the exception came from a precall or postcall 
1:           // we will rethrow it
1:           if (!inInvoke) {
1:             exceptionToRethrow = e;
1:           }
1:           // if the exception didn't come from precall or postcall then it
1:           // came from invoke
1:           // we will rethrow this exception if it is not a runtime
1:           // exception, but we must unwrap InvocationTargetExceptions
1:           else {
1:             if (e instanceof InvocationTargetException) {
1:               e = ((InvocationTargetException) e).getTargetException();
1:             }
1:             
1:             if (!(e instanceof RuntimeException)) {
1:               exceptionToRethrow = e;
1:             }
1:           }
1:           try {
1:             nonNullListener.postInvokeExceptionalReturn(token, proxy, method, e);
1:           } catch (Exception f) {
1:             // we caught an exception from
1:             // postInvokeExceptionalReturn
1:             // if we haven't already chosen an exception to rethrow then
1:             // we will throw this exception
1:             if (exceptionToRethrow == null) {
1:               exceptionToRethrow = f;
1:             }
1:           }
1:           // if we made it this far without choosing an exception we
1:           // should throw e
1:           if (exceptionToRethrow == null) {
1:             exceptionToRethrow = e;
1:           }
1:           throw exceptionToRethrow;
1:         }
1:         return result;
/////////////////////////////////////////////////////////////////////////
1:             && method.getParameterTypes().length == 1 &&
1:             method.getParameterTypes()[0] == Object.class) {
/////////////////////////////////////////////////////////////////////////
1:     return core.invoke(proxy, method, args);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:7ec2e05
/////////////////////////////////////////////////////////////////////////
1:           args[0] = proxyManager.unwrap(targetObject).call();
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.util.concurrent.Callable;
1: 
0: import org.apache.aries.proxy.InvocationHandlerWrapper;
1: 
1: public final class ProxyHandler implements InvocationHandler {
1:   private final Callable<Object> target;
1:   private final InvocationHandler core;
0:   private final InvocationHandlerWrapper wrapper;
1:   private final AbstractProxyManager proxyManager;
1: 
0:   public ProxyHandler(AbstractProxyManager abstractProxyManager, Callable<Object> dispatcher, InvocationHandlerWrapper wrapper)
1:   {
1:     target = dispatcher;
1:     proxyManager = abstractProxyManager;
0:     if (wrapper == null) {
0:       this.wrapper = new DefaultWrapper();
1:     } else {
0:       this.wrapper = wrapper;
1:     }
1:     
1:     core = new InvocationHandler() {
1:       public Object invoke(Object proxy, Method method, Object[] args)
1:           throws Throwable 
1:       {
0:           Object result;
0:           try {
0:               result = method.invoke(target.call(), args);
0:           } catch (InvocationTargetException ite) {
0:               // We are invisible, so unwrap and throw the cause as
0:               // though we called the method directly.
0:               throw ite.getCause();
0:           } catch (IllegalAccessException e) {
0:               throw new IllegalAccessError(e.getMessage());
1:           }
1: 
0:           return result;
1:       }
1:     };
1:   }
1: 
1:   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable 
1:   {
1:     // Unwrap calls for equals
1:     if (method.getName().equals("equals")
0:             && method.getDeclaringClass() == Object.class) {
1:         Object targetObject = args[0];
1:         if (proxyManager.isProxy(targetObject)) {
0:           args[0] = proxyManager.unwrap(proxy).call();
1:         }
1:     } else if (method.getName().equals("finalize") && method.getParameterTypes().length == 0) {
1:         // special case finalize, don't route through to delegate because that will get its own call
1:         return null;
1:     }
1:     
0:     return wrapper.invoke(proxy, method, args, core);
1:   }
1: 
1:   public Callable<Object> getTarget() 
1:   {
1:     return target;
1:   }
1: }
============================================================================