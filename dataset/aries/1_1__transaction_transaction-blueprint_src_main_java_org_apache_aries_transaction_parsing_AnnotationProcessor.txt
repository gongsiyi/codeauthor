1:bd98451: /**
1:bd98451:  * Licensed to the Apache Software Foundation (ASF) under one
1:bd98451:  * or more contributor license agreements.  See the NOTICE file
1:bd98451:  * distributed with this work for additional information
1:bd98451:  * regarding copyright ownership.  The ASF licenses this file
1:bd98451:  * to you under the Apache License, Version 2.0 (the
1:bd98451:  * "License"); you may not use this file except in compliance
1:bd98451:  * with the License.  You may obtain a copy of the License at
1:bd98451:  *
1:bd98451:  *   http://www.apache.org/licenses/LICENSE-2.0
1:bd98451:  *
1:bd98451:  * Unless required by applicable law or agreed to in writing,
1:bd98451:  * software distributed under the License is distributed on an
1:bd98451:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bd98451:  * KIND, either express or implied.  See the License for the
1:bd98451:  * specific language governing permissions and limitations
1:bd98451:  * under the License.
1:bd98451:  */
1:bd98451: package org.apache.aries.transaction.parsing;
3:bd98451: 
1:bd98451: import javax.transaction.TransactionManager;
1:bd98451: 
1:bd98451: import org.apache.aries.blueprint.BeanProcessor;
1:bd98451: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1:bd98451: import org.apache.aries.transaction.ComponentTxData;
1:bd98451: import org.apache.aries.transaction.TxInterceptorImpl;
1:bd98451: import org.osgi.service.blueprint.reflect.BeanMetadata;
1:bd98451: import org.osgi.service.coordinator.Coordinator;
1:bd98451: import org.slf4j.Logger;
1:bd98451: import org.slf4j.LoggerFactory;
1:bd98451: 
1:bd98451: /**
1:bd98451:  * Adds the transactional interceptor if Transaction annotation is present
1:bd98451:  * on bean class or superclasses.
1:bd98451:  */
1:bd98451: public class AnnotationProcessor implements BeanProcessor {
1:bd98451: 
1:bd98451:     private static final Logger LOGGER = LoggerFactory.getLogger(AnnotationProcessor.class);
1:bd98451: 
1:bd98451:     private final ComponentDefinitionRegistry cdr;
1:bd98451:     private TransactionManager tm;
1:bd98451:     private Coordinator coordinator;
1:bd98451: 
1:bd98451:     public AnnotationProcessor(ComponentDefinitionRegistry cdr, TransactionManager tm, Coordinator coordinator) {
1:bd98451:         this.cdr = cdr;
1:bd98451:         this.tm = tm;
1:bd98451:         this.coordinator = coordinator;
3:bd98451:     }
1:bd98451: 
1:2ad9527:     @Override
1:bd98451:     public void beforeDestroy(Object arg0, String arg1) {
1:2ad9527:         // Nothing to be done
1:bd98451:     }
1:bd98451: 
1:2ad9527:     @Override
1:2ad9527:     public void afterDestroy(Object arg0, String arg1) {
1:2ad9527:         // Nothing to be done
1:2ad9527:     }
1:2ad9527: 
1:2ad9527:     @Override
1:bd98451:     public Object beforeInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
1:bd98451:         ComponentTxData txData = new ComponentTxData(bean.getClass());
1:bd98451:         if (txData.isTransactional()) {
1:bd98451:             LOGGER.debug("Adding transaction interceptor to bean {} with class {}.", beanName, bean.getClass());
1:bd98451:             cdr.registerInterceptorWithComponent(beanData, new TxInterceptorImpl(tm, coordinator, txData));
1:bd98451:         }
1:bd98451:         return bean;
1:bd98451:     }
1:2ad9527:     
1:2ad9527:     @Override
1:2ad9527:     public Object afterInit(Object arg0, String arg1, BeanCreator arg2, BeanMetadata arg3) {
1:2ad9527:         return arg0;
1:2ad9527:     }
1:bd98451: 
1:bd98451: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:2ad9527
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         // Nothing to be done
1:     @Override
1:     public void afterDestroy(Object arg0, String arg1) {
1:         // Nothing to be done
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Override
1:     public Object afterInit(Object arg0, String arg1, BeanCreator arg2, BeanMetadata arg3) {
1:         return arg0;
1:     }
commit:bd98451
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.transaction.parsing;
1: 
1: import javax.transaction.TransactionManager;
1: 
1: import org.apache.aries.blueprint.BeanProcessor;
1: import org.apache.aries.blueprint.ComponentDefinitionRegistry;
1: import org.apache.aries.transaction.ComponentTxData;
1: import org.apache.aries.transaction.TxInterceptorImpl;
1: import org.osgi.service.blueprint.reflect.BeanMetadata;
1: import org.osgi.service.coordinator.Coordinator;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Adds the transactional interceptor if Transaction annotation is present
1:  * on bean class or superclasses.
1:  */
1: public class AnnotationProcessor implements BeanProcessor {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(AnnotationProcessor.class);
1: 
1:     private final ComponentDefinitionRegistry cdr;
1:     private TransactionManager tm;
1:     private Coordinator coordinator;
1: 
1:     public AnnotationProcessor(ComponentDefinitionRegistry cdr, TransactionManager tm, Coordinator coordinator) {
1:         this.cdr = cdr;
1:         this.tm = tm;
1:         this.coordinator = coordinator;
1:     }
1: 
0:     public void afterDestroy(Object arg0, String arg1) {
1:     }
1: 
0:     public Object afterInit(Object arg0, String arg1, BeanCreator arg2, BeanMetadata arg3) {
0:         return arg0;
1:     }
1: 
1:     public void beforeDestroy(Object arg0, String arg1) {
1:     }
1: 
1:     public Object beforeInit(Object bean, String beanName, BeanCreator beanCreator, BeanMetadata beanData) {
1:         ComponentTxData txData = new ComponentTxData(bean.getClass());
1:         if (txData.isTransactional()) {
1:             LOGGER.debug("Adding transaction interceptor to bean {} with class {}.", beanName, bean.getClass());
1:             cdr.registerInterceptorWithComponent(beanData, new TxInterceptorImpl(tm, coordinator, txData));
1:         }
1:         return bean;
1:     }
1: 
1: }
============================================================================