1:4117a8d: /*
1:4117a8d:  * Licensed to the Apache Software Foundation (ASF) under one
1:4117a8d:  * or more contributor license agreements.  See the NOTICE file
1:4117a8d:  * distributed with this work for additional information
1:4117a8d:  * regarding copyright ownership.  The ASF licenses this file
1:4117a8d:  * to you under the Apache License, Version 2.0 (the
1:4117a8d:  * "License"); you may not use this file except in compliance
1:4117a8d:  * with the License.  You may obtain a copy of the License at
1:4117a8d:  *
1:4117a8d:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4117a8d:  *
1:4117a8d:  * Unless required by applicable law or agreed to in writing,
1:4117a8d:  * software distributed under the License is distributed on an
1:4117a8d:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:4117a8d:  * KIND, either express or implied.  See the License for the
1:4117a8d:  * specific language governing permissions and limitations
1:4117a8d:  * under the License.
1:4117a8d:  */
1:4117a8d: package org.apache.aries.quiesce.manager;
1:4117a8d: 
1:4117a8d: import java.util.List;
1:2f3073f: import java.util.concurrent.Future;
1:2f3073f: 
1:2f3073f: import org.apache.aries.quiesce.participant.QuiesceParticipant;
1:4117a8d: import org.osgi.framework.Bundle;
1:4117a8d: 
1:2f3073f: /**
1:2f3073f:  * Interface for the quiesce manager. A quiesce manager provides the functionality to stop
1:2f3073f:  * bundles in such a manner that currently running work can be safely finished. To exploit this
1:2f3073f:  * above the quiesce manager individual containers / extenders (such as blueprint, jpa etc) need to 
1:2f3073f:  * quiesce aware and register {@link QuiesceParticipant} appropriately.
1:2f3073f:  */
1:4117a8d: public interface QuiesceManager
1:4117a8d: {
1:2f3073f:   /** 
1:2f3073f:    * Request a collection of bundles to be quiesced
1:2f3073f:    * 
1:2f3073f:    * @param timeout time to wait (in milliseconds) for all the quiesce participants to finish 
1:2f3073f:    * before stopping the bundles. If some quiesce participants do not finish within the given timeout the bundles
1:2f3073f:    * are stopped regardless at the timeout
1:2f3073f:    * @param bundlesToQuiesce
1:2f3073f:    */
1:2f3073f:   public void quiesce(long timeout, List<Bundle> bundlesToQuiesce);
1:2f3073f:   
1:2f3073f:   /**
1:2f3073f:    * Request a collection of bundles to be quiesced using the default timeout
1:2f3073f:    * 
1:2f3073f:    * @param bundlesToQuiesce
1:2f3073f:    */
1:4117a8d:   public void quiesce(List<Bundle> bundlesToQuiesce);
1:2f3073f: 
1:2f3073f:   /**
1:2f3073f:    * Request a collection of bundles to be quiesced like <code>quiesce(long, List&lt;Bundle&gt;)</code>
1:2f3073f:    * return a {@link Future} that the caller can block on instead of void
1:2f3073f:    * 
1:2f3073f:    * @param bundlesToQuiesce
1:2f3073f:    * @return a {@link Future} that captures the execution of quiesce. The returned {@link Future} does
1:2f3073f:    * not support the cancel operation.
1:2f3073f:    */
1:2f3073f:   public Future<?> quiesceWithFuture(List<Bundle> bundlesToQuiesce);
1:2f3073f: 
1:2f3073f:   
1:2f3073f:   /**
1:2f3073f:    * Request a collection of bundles to be quiesced like <code>quiesce(long, List&lt;Bundle&gt;)</code>
1:2f3073f:    * return a {@link Future} that the caller can block on instead of void
1:2f3073f:    * 
1:2f3073f:    * @param timeout time to wait (in milliseconds) for all the quiesce participants to finish 
1:2f3073f:    * before stopping the bundles. If some quiesce participants do not finish within the given timeout the bundles
1:2f3073f:    * are stopped regardless at the timeout
1:2f3073f:    * @param bundlesToQuiesce
1:2f3073f:    * @return a {@link Future} that captures the execution of quiesce. The returned {@link Future} does
1:2f3073f:    * not support the cancel operation.
1:2f3073f:    */
1:2f3073f:   public Future<?> quiesceWithFuture(long timeout, List<Bundle> bundlesToQuiesce);
1:4117a8d: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:2f3073f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Future;
1: 
1: import org.apache.aries.quiesce.participant.QuiesceParticipant;
1: /**
1:  * Interface for the quiesce manager. A quiesce manager provides the functionality to stop
1:  * bundles in such a manner that currently running work can be safely finished. To exploit this
1:  * above the quiesce manager individual containers / extenders (such as blueprint, jpa etc) need to 
1:  * quiesce aware and register {@link QuiesceParticipant} appropriately.
1:  */
1:   /** 
1:    * Request a collection of bundles to be quiesced
1:    * 
1:    * @param timeout time to wait (in milliseconds) for all the quiesce participants to finish 
1:    * before stopping the bundles. If some quiesce participants do not finish within the given timeout the bundles
1:    * are stopped regardless at the timeout
1:    * @param bundlesToQuiesce
1:    */
1:   public void quiesce(long timeout, List<Bundle> bundlesToQuiesce);
1:   
1:   /**
1:    * Request a collection of bundles to be quiesced using the default timeout
1:    * 
1:    * @param bundlesToQuiesce
1:    */
1: 
1:   /**
1:    * Request a collection of bundles to be quiesced like <code>quiesce(long, List&lt;Bundle&gt;)</code>
1:    * return a {@link Future} that the caller can block on instead of void
1:    * 
1:    * @param bundlesToQuiesce
1:    * @return a {@link Future} that captures the execution of quiesce. The returned {@link Future} does
1:    * not support the cancel operation.
1:    */
1:   public Future<?> quiesceWithFuture(List<Bundle> bundlesToQuiesce);
1: 
1:   
1:   /**
1:    * Request a collection of bundles to be quiesced like <code>quiesce(long, List&lt;Bundle&gt;)</code>
1:    * return a {@link Future} that the caller can block on instead of void
1:    * 
1:    * @param timeout time to wait (in milliseconds) for all the quiesce participants to finish 
1:    * before stopping the bundles. If some quiesce participants do not finish within the given timeout the bundles
1:    * are stopped regardless at the timeout
1:    * @param bundlesToQuiesce
1:    * @return a {@link Future} that captures the execution of quiesce. The returned {@link Future} does
1:    * not support the cancel operation.
1:    */
1:   public Future<?> quiesceWithFuture(long timeout, List<Bundle> bundlesToQuiesce);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:4117a8d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.quiesce.manager;
1: 
1: import java.util.List;
1: import org.osgi.framework.Bundle;
1: 
1: public interface QuiesceManager
1: {
0:   public void quiesce(long timeout, List<Bundle> bundlesToQuiese);
1:   public void quiesce(List<Bundle> bundlesToQuiesce);
1: }
============================================================================