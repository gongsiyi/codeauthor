1:6f4b079: package org.apache.aries.subsystem.scope.itests;
1:6f4b079: 
1:6f4b079: import static org.junit.Assert.assertEquals;
1:6f4b079: import static org.junit.Assert.assertFalse;
1:6f4b079: import static org.junit.Assert.assertNotNull;
1:6f4b079: import static org.junit.Assert.assertNull;
1:6f4b079: import static org.junit.Assert.assertTrue;
1:6f4b079: 
1:6f4b079: import java.net.URL;
1:6f4b079: import java.util.Arrays;
1:6f4b079: 
1:6f4b079: import org.apache.aries.subsystem.scope.InstallInfo;
1:6f4b079: import org.apache.aries.subsystem.scope.Scope;
1:6f4b079: import org.apache.aries.subsystem.scope.ScopeUpdate;
1:6f4b079: import org.apache.aries.subsystem.scope.SharePolicy;
1:5bdb2b8: import org.junit.Ignore;
1:6f4b079: import org.junit.Test;
1:6f4b079: import org.osgi.framework.Bundle;
1:6f4b079: 
1:6f4b079: public class PersistenceTest extends AbstractTest {
1:6f4b079: 	/**
1:6f4b079: 	 * When starting from a clean slate (i.e. nothing was persisted), only the 
1:6f4b079: 	 * root scope with its default configuration should exist.
1:6f4b079: 	 * 
1:6f4b079: 	 * @throws Exception
1:6f4b079: 	 */
1:6f4b079: 	@Test
1:6f4b079: 	public void test1() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:6f4b079: 		assertEquals(0, scope.getId());
1:6f4b079: 		assertEquals("root", scope.getName());
1:6f4b079: 		assertEquals(null, scope.getLocation());
1:6f4b079: 		assertEquals(null, scope.getParent());
1:6f4b079: 		assertEquals(0, scope.getChildren().size());
1:6f4b079: 		assertCollectionEquals(Arrays.asList(bundleContext.getBundles()), scope.getBundles());
1:6f4b079: 		assertEquals(0, scope.getSharePolicies(SharePolicy.TYPE_EXPORT).size());
1:6f4b079: 		assertEquals(0, scope.getSharePolicies(SharePolicy.TYPE_IMPORT).size());
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	/**
1:6f4b079: 	 * Stopping and starting the Scope Admin bundle should cause it to pull
1:6f4b079: 	 * from the persistent storage. If nothing changed after the original
1:6f4b079: 	 * bundle start, the persisted root bundle should look exactly the same
1:6f4b079: 	 * as before.
1:6f4b079: 	 * 
1:6f4b079: 	 * @throws Exception
1:6f4b079: 	 */
1:6f4b079: 	@Test
1:6f4b079: 	public void test2() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:6f4b079: 		Bundle bundle = findBundle("org.apache.aries.subsystem.scope.impl");
1:6f4b079: 		assertNotNull(bundle);
1:6f4b079: 		bundle.stop();
1:6f4b079: 		bundle.start();
1:6f4b079: 		assertEquals(0, scope.getId());
1:6f4b079: 		assertEquals("root", scope.getName());
1:6f4b079: 		assertEquals(null, scope.getLocation());
1:6f4b079: 		assertEquals(null, scope.getParent());
1:6f4b079: 		assertEquals(0, scope.getChildren().size());
1:6f4b079: 		assertCollectionEquals(Arrays.asList(bundleContext.getBundles()), scope.getBundles());
1:6f4b079: 		assertEquals(0, scope.getSharePolicies(SharePolicy.TYPE_EXPORT).size());
1:6f4b079: 		assertEquals(0, scope.getSharePolicies(SharePolicy.TYPE_IMPORT).size());
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	/**
1:6f4b079: 	 * A scope's persisted bundle data will become stale if bundles are 
1:6f4b079: 	 * installed or uninstalled while Scope Admin is not connected to the 
1:6f4b079: 	 * environment. This should be detected and dealt with.
1:6f4b079: 	 * 
1:6f4b079: 	 * @throws Exception
1:6f4b079: 	 */
1:6f4b079: 	@Test
1:5bdb2b8: 	@Ignore
1:6f4b079: 	public void test3() throws Exception {
1:6f4b079: 		Scope scope = getScope();
1:6f4b079: 		Bundle tb1 = findBundle("org.apache.aries.subsystem.scope.itests.tb1", scope);
1:6f4b079: 		assertNull(tb1);
1:6f4b079: 		tb1 = installBundle("tb-1.jar");
1:6f4b079: 		assertTrue(scope.getBundles().contains(tb1));
1:6f4b079: 		Bundle scopeAdmin = findBundle("org.apache.aries.subsystem.scope.impl");
1:6f4b079: 		assertNotNull(scopeAdmin);
1:6f4b079: 		scopeAdmin.stop();
1:6f4b079: 		scopeAdmin.start();
1:6f4b079: 		scope = getScope();
1:6f4b079: 		assertTrue(scope.getBundles().contains(tb1));
1:6f4b079: 		scopeAdmin.stop();
1:6f4b079: 		tb1.uninstall();
1:6f4b079: 		Bundle tb2 = findBundle("org.apache.aries.subsystem.scope.itests.tb2", scope);
1:6f4b079: 		assertNull(tb2);
1:6f4b079: 		tb2 = installBundle("tb-2.jar");
1:6f4b079: 		scopeAdmin.start();
1:6f4b079: 		scope = getScope();
1:6f4b079: 		assertFalse(scope.getBundles().contains(tb1));
1:6f4b079: 		assertTrue(scope.getBundles().contains(tb2));
1:6f4b079: 		tb2.uninstall();
1:6f4b079: 		assertFalse(scope.getBundles().contains(tb2));
1:6f4b079: 	}
1:6f4b079: 	
1:6f4b079: 	/**
1:6f4b079: 	 * Create two scopes off of the root scope with the following structure.
1:6f4b079: 	 * 
1:6f4b079: 	 *    R
1:6f4b079: 	 *   / \
1:6f4b079: 	 * S1   S2
1:6f4b079: 	 * 
1:6f4b079: 	 * S1 contains bundle tb1, one import policy, and one export policy.
1:6f4b079: 	 * S2 contains bundle tb2 and two import policies.
1:6f4b079: 	 * 
1:6f4b079: 	 * This configuration should persist between restarts of the Scope Admin
1:6f4b079: 	 * bundle.
1:6f4b079: 	 * 
1:6f4b079: 	 * @throws Exception
1:6f4b079: 	 */
1:6f4b079: 	@Test
1:6f4b079: 	public void test4() throws Exception {
1:6f4b079: 		Scope root = getScope();
1:6f4b079: 		ScopeUpdate rootUpdate = root.newScopeUpdate();
1:6f4b079: 		ScopeUpdate s1Update = rootUpdate.newChild("S1");
1:6f4b079: 		rootUpdate.getChildren().add(s1Update);
1:6f4b079: 		ScopeUpdate s2Update = rootUpdate.newChild("S2");
1:6f4b079: 		rootUpdate.getChildren().add(s2Update);
1:6f4b079: 		s1Update.getBundlesToInstall().add(
1:6f4b079: 				new InstallInfo(
1:6f4b079: 						null,
1:6f4b079: 						new URL(getBundleLocation("tb-1.jar"))));
1:6f4b079: 		s2Update.getBundlesToInstall().add(
1:6f4b079: 				new InstallInfo(
1:6f4b079: 						null,
1:6f4b079: 						new URL(getBundleLocation("tb-2.jar"))));
1:6f4b079: 		addPackageImportPolicy("org.osgi.framework", s1Update);
1:6f4b079: 		addPackageExportPolicy("org.apache.aries.subsystem.scope.itests.tb1", s1Update);
1:6f4b079: 		addPackageImportPolicy("org.osgi.framework", s2Update);
1:6f4b079: 		addPackageImportPolicy("org.apache.aries.subsystem.scope.itests.tb1", s2Update);
1:6f4b079: 		assertTrue(rootUpdate.commit());
1:6f4b079: 		root = getScope();
1:6f4b079: 		assertEquals(2, root.getChildren().size());
1:6f4b079: 		Scope s1 = findChildScope("S1", root);
1:6f4b079: 		Bundle tb1 = findBundle("org.apache.aries.subsystem.scope.itests.tb1", s1);
1:6f4b079: 		assertNotNull(tb1);
1:6f4b079: 		assertTrue(s1.getBundles().contains(tb1));
1:6f4b079: 		assertEquals(1, s1.getSharePolicies(SharePolicy.TYPE_IMPORT).get("osgi.wiring.package").size());
1:6f4b079: 		assertEquals(1, s1.getSharePolicies(SharePolicy.TYPE_EXPORT).get("osgi.wiring.package").size());
1:6f4b079: 		Scope s2 = findChildScope("S2", root);
1:6f4b079: 		Bundle tb2 = findBundle("org.apache.aries.subsystem.scope.itests.tb2", s2);
1:6f4b079: 		assertNotNull(tb2);
1:6f4b079: 		assertTrue(s2.getBundles().contains(tb2));
1:6f4b079: 		assertEquals(2, s2.getSharePolicies(SharePolicy.TYPE_IMPORT).get("osgi.wiring.package").size());
1:6f4b079: 		Bundle scopeAdmin = findBundle("org.apache.aries.subsystem.scope.impl");
1:6f4b079: 		assertNotNull(scopeAdmin);
1:6f4b079: 		scopeAdmin.stop();
1:6f4b079: 		scopeAdmin.start();
1:6f4b079: 		root = getScope();
1:6f4b079: 		assertEquals(2, root.getChildren().size());
1:6f4b079: 		s1 = findChildScope("S1", root);
1:6f4b079: 		assertTrue(s1.getBundles().contains(tb1));
1:6f4b079: 		assertEquals(1, s1.getSharePolicies(SharePolicy.TYPE_IMPORT).get("osgi.wiring.package").size());
1:6f4b079: 		assertEquals(1, s1.getSharePolicies(SharePolicy.TYPE_EXPORT).get("osgi.wiring.package").size());
1:6f4b079: 		s2 = findChildScope("S2", root);
1:6f4b079: 		assertTrue(s2.getBundles().contains(tb2));
1:6f4b079: 		assertEquals(2, s2.getSharePolicies(SharePolicy.TYPE_IMPORT).get("osgi.wiring.package").size());
1:6f4b079: 	}
1:6f4b079: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:5bdb2b8
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1: 	@Ignore
author:Graham Charters
-------------------------------------------------------------------------------
commit:6f4b079
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.scope.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URL;
1: import java.util.Arrays;
1: 
1: import org.apache.aries.subsystem.scope.InstallInfo;
1: import org.apache.aries.subsystem.scope.Scope;
1: import org.apache.aries.subsystem.scope.ScopeUpdate;
1: import org.apache.aries.subsystem.scope.SharePolicy;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
1: 
0: @RunWith(JUnit4TestRunner.class)
1: public class PersistenceTest extends AbstractTest {
1: 	/**
1: 	 * When starting from a clean slate (i.e. nothing was persisted), only the 
1: 	 * root scope with its default configuration should exist.
1: 	 * 
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test1() throws Exception {
1: 		Scope scope = getScope();
1: 		assertEquals(0, scope.getId());
1: 		assertEquals("root", scope.getName());
1: 		assertEquals(null, scope.getLocation());
1: 		assertEquals(null, scope.getParent());
1: 		assertEquals(0, scope.getChildren().size());
1: 		assertCollectionEquals(Arrays.asList(bundleContext.getBundles()), scope.getBundles());
1: 		assertEquals(0, scope.getSharePolicies(SharePolicy.TYPE_EXPORT).size());
1: 		assertEquals(0, scope.getSharePolicies(SharePolicy.TYPE_IMPORT).size());
1: 	}
1: 	
1: 	/**
1: 	 * Stopping and starting the Scope Admin bundle should cause it to pull
1: 	 * from the persistent storage. If nothing changed after the original
1: 	 * bundle start, the persisted root bundle should look exactly the same
1: 	 * as before.
1: 	 * 
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test2() throws Exception {
1: 		Scope scope = getScope();
1: 		Bundle bundle = findBundle("org.apache.aries.subsystem.scope.impl");
1: 		assertNotNull(bundle);
1: 		bundle.stop();
1: 		bundle.start();
1: 		assertEquals(0, scope.getId());
1: 		assertEquals("root", scope.getName());
1: 		assertEquals(null, scope.getLocation());
1: 		assertEquals(null, scope.getParent());
1: 		assertEquals(0, scope.getChildren().size());
1: 		assertCollectionEquals(Arrays.asList(bundleContext.getBundles()), scope.getBundles());
1: 		assertEquals(0, scope.getSharePolicies(SharePolicy.TYPE_EXPORT).size());
1: 		assertEquals(0, scope.getSharePolicies(SharePolicy.TYPE_IMPORT).size());
1: 	}
1: 	
1: 	/**
1: 	 * A scope's persisted bundle data will become stale if bundles are 
1: 	 * installed or uninstalled while Scope Admin is not connected to the 
1: 	 * environment. This should be detected and dealt with.
1: 	 * 
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test3() throws Exception {
1: 		Scope scope = getScope();
1: 		Bundle tb1 = findBundle("org.apache.aries.subsystem.scope.itests.tb1", scope);
1: 		assertNull(tb1);
1: 		tb1 = installBundle("tb-1.jar");
1: 		assertTrue(scope.getBundles().contains(tb1));
1: 		Bundle scopeAdmin = findBundle("org.apache.aries.subsystem.scope.impl");
1: 		assertNotNull(scopeAdmin);
1: 		scopeAdmin.stop();
1: 		scopeAdmin.start();
1: 		scope = getScope();
1: 		assertTrue(scope.getBundles().contains(tb1));
1: 		scopeAdmin.stop();
1: 		tb1.uninstall();
1: 		Bundle tb2 = findBundle("org.apache.aries.subsystem.scope.itests.tb2", scope);
1: 		assertNull(tb2);
1: 		tb2 = installBundle("tb-2.jar");
1: 		scopeAdmin.start();
1: 		scope = getScope();
1: 		assertFalse(scope.getBundles().contains(tb1));
1: 		assertTrue(scope.getBundles().contains(tb2));
1: 		tb2.uninstall();
1: 		assertFalse(scope.getBundles().contains(tb2));
1: 	}
1: 	
1: 	/**
1: 	 * Create two scopes off of the root scope with the following structure.
1: 	 * 
1: 	 *    R
1: 	 *   / \
1: 	 * S1   S2
1: 	 * 
1: 	 * S1 contains bundle tb1, one import policy, and one export policy.
1: 	 * S2 contains bundle tb2 and two import policies.
1: 	 * 
1: 	 * This configuration should persist between restarts of the Scope Admin
1: 	 * bundle.
1: 	 * 
1: 	 * @throws Exception
1: 	 */
1: 	@Test
1: 	public void test4() throws Exception {
1: 		Scope root = getScope();
1: 		ScopeUpdate rootUpdate = root.newScopeUpdate();
1: 		ScopeUpdate s1Update = rootUpdate.newChild("S1");
1: 		rootUpdate.getChildren().add(s1Update);
1: 		ScopeUpdate s2Update = rootUpdate.newChild("S2");
1: 		rootUpdate.getChildren().add(s2Update);
1: 		s1Update.getBundlesToInstall().add(
1: 				new InstallInfo(
1: 						null,
1: 						new URL(getBundleLocation("tb-1.jar"))));
1: 		s2Update.getBundlesToInstall().add(
1: 				new InstallInfo(
1: 						null,
1: 						new URL(getBundleLocation("tb-2.jar"))));
1: 		addPackageImportPolicy("org.osgi.framework", s1Update);
1: 		addPackageExportPolicy("org.apache.aries.subsystem.scope.itests.tb1", s1Update);
1: 		addPackageImportPolicy("org.osgi.framework", s2Update);
1: 		addPackageImportPolicy("org.apache.aries.subsystem.scope.itests.tb1", s2Update);
1: 		assertTrue(rootUpdate.commit());
1: 		root = getScope();
1: 		assertEquals(2, root.getChildren().size());
1: 		Scope s1 = findChildScope("S1", root);
1: 		Bundle tb1 = findBundle("org.apache.aries.subsystem.scope.itests.tb1", s1);
1: 		assertNotNull(tb1);
1: 		assertTrue(s1.getBundles().contains(tb1));
1: 		assertEquals(1, s1.getSharePolicies(SharePolicy.TYPE_IMPORT).get("osgi.wiring.package").size());
1: 		assertEquals(1, s1.getSharePolicies(SharePolicy.TYPE_EXPORT).get("osgi.wiring.package").size());
1: 		Scope s2 = findChildScope("S2", root);
1: 		Bundle tb2 = findBundle("org.apache.aries.subsystem.scope.itests.tb2", s2);
1: 		assertNotNull(tb2);
1: 		assertTrue(s2.getBundles().contains(tb2));
1: 		assertEquals(2, s2.getSharePolicies(SharePolicy.TYPE_IMPORT).get("osgi.wiring.package").size());
1: 		Bundle scopeAdmin = findBundle("org.apache.aries.subsystem.scope.impl");
1: 		assertNotNull(scopeAdmin);
1: 		scopeAdmin.stop();
1: 		scopeAdmin.start();
1: 		root = getScope();
1: 		assertEquals(2, root.getChildren().size());
1: 		s1 = findChildScope("S1", root);
1: 		assertTrue(s1.getBundles().contains(tb1));
1: 		assertEquals(1, s1.getSharePolicies(SharePolicy.TYPE_IMPORT).get("osgi.wiring.package").size());
1: 		assertEquals(1, s1.getSharePolicies(SharePolicy.TYPE_EXPORT).get("osgi.wiring.package").size());
1: 		s2 = findChildScope("S2", root);
1: 		assertTrue(s2.getBundles().contains(tb2));
1: 		assertEquals(2, s2.getSharePolicies(SharePolicy.TYPE_IMPORT).get("osgi.wiring.package").size());
1: 	}
1: }
============================================================================