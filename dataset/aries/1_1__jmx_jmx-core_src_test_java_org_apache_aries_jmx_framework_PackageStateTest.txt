1:fdf3952: /**
1:fdf3952:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:fdf3952:  *  contributor license agreements.  See the NOTICE file distributed with
1:fdf3952:  *  this work for additional information regarding copyright ownership.
1:fdf3952:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:fdf3952:  *  (the "License"); you may not use this file except in compliance with
1:fdf3952:  *  the License.  You may obtain a copy of the License at
1:fdf3952:  *
1:fdf3952:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fdf3952:  *
1:fdf3952:  *  Unless required by applicable law or agreed to in writing, software
1:fdf3952:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:fdf3952:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdf3952:  *  See the License for the specific language governing permissions and
1:fdf3952:  *  limitations under the License.
1:fdf3952:  */
1:fdf3952: package org.apache.aries.jmx.framework;
1:fdf3952: 
1:fdf3952: import java.io.IOException;
1:fdf3952: import java.util.Collection;
1:fdf3952: 
1:fdf3952: import javax.management.openmbean.CompositeData;
1:fdf3952: import javax.management.openmbean.TabularData;
1:fdf3952: 
1:fdf3952: import org.junit.Assert;
1:fdf3952: import org.junit.Before;
1:fdf3952: import org.junit.Test;
1:fdf3952: import org.mockito.Mock;
1:fdf3952: import org.mockito.Mockito;
1:fdf3952: import org.mockito.MockitoAnnotations;
1:fdf3952: import org.osgi.framework.Bundle;
1:fdf3952: import org.osgi.framework.BundleContext;
1:fdf3952: import org.osgi.framework.Version;
1:fdf3952: import org.osgi.jmx.framework.PackageStateMBean;
1:fdf3952: import org.osgi.service.packageadmin.ExportedPackage;
1:fdf3952: import org.osgi.service.packageadmin.PackageAdmin;
1:fdf3952: 
1:fdf3952: /**
1:fdf3952:  * {@link PackageStateMBean} test case.
1:fdf3952:  * 
1:fdf3952:  *
1:fdf3952:  * @version $Rev$ $Date$
1:fdf3952:  */
1:fdf3952: public class PackageStateTest {
1:fdf3952:     
1:fdf3952:     @Mock
1:fdf3952:     private BundleContext context;
1:fdf3952:     @Mock
1:fdf3952:     private PackageAdmin admin;
1:fdf3952:     private PackageState mbean;
1:fdf3952:     
1:fdf3952: 
1:fdf3952:     @Before
1:fdf3952:     public void setUp() throws Exception {
1:fdf3952:         MockitoAnnotations.initMocks(this);
1:fdf3952:         mbean = new PackageState(context, admin);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testGetExportingBundles() throws IOException {
1:fdf3952:         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:fdf3952:         Mockito.when(exported.getExportingBundle()).thenReturn(bundle);
1:fdf3952:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(5));
1:fdf3952:         ExportedPackage exported2 = Mockito.mock(ExportedPackage.class);
1:fdf3952:         Bundle bundle2 = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(exported2.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:fdf3952:         Mockito.when(exported2.getExportingBundle()).thenReturn(bundle2);
1:fdf3952:         Mockito.when(bundle2.getBundleId()).thenReturn(Long.valueOf(6));
1:fdf3952:         Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported, exported2});
1:fdf3952:         long[] ids = mbean.getExportingBundles("test", "1.0.0");
1:fdf3952:         Assert.assertNotNull(ids);
1:fdf3952:         Assert.assertArrayEquals(new long[]{5,6}, ids);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testGetImportingBundles() throws IOException {
1:fdf3952:         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Bundle exportingBundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:fdf3952:         Mockito.when(exported.getExportingBundle()).thenReturn(exportingBundle);
1:fdf3952:         Mockito.when(exportingBundle.getBundleId()).thenReturn(Long.valueOf(2));
1:fdf3952:         Mockito.when(exported.getImportingBundles()).thenReturn(new Bundle[]{bundle});
1:fdf3952:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(4));
1:fdf3952:         Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported});
1:fdf3952:         long[] ids = mbean.getImportingBundles("test", "1.0.0", 2);
1:fdf3952:         Assert.assertArrayEquals(new long[]{4}, ids);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testIsRemovalPending() throws IOException {
1:fdf3952:         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
1:fdf3952:         Bundle expBundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:fdf3952:         Mockito.when(exported.isRemovalPending()).thenReturn(true);
1:fdf3952:         Mockito.when(exported.getExportingBundle()).thenReturn(expBundle);
1:fdf3952:         Mockito.when(expBundle.getBundleId()).thenReturn(Long.valueOf(2));
1:fdf3952:         Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported});
1:fdf3952:         boolean isRemoval = mbean.isRemovalPending("test", "1.0.0", Long.valueOf(2));
1:fdf3952:         Assert.assertTrue(isRemoval);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952:     @Test
1:fdf3952:     public void testListPackages() throws IOException {
1:fdf3952:         Bundle bundle = Mockito.mock(Bundle.class);
1:fdf3952:         Bundle impBundle = Mockito.mock(Bundle.class);
1:fdf3952:         Mockito.when(context.getBundles()).thenReturn(new Bundle[]{bundle});
1:fdf3952:         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
1:fdf3952:         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:fdf3952:         Mockito.when(exported.getImportingBundles()).thenReturn(new Bundle[]{impBundle});
1:fdf3952:         Mockito.when(exported.getName()).thenReturn("test");
1:fdf3952:         Mockito.when(exported.getExportingBundle()).thenReturn(bundle);
1:fdf3952:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(4));
1:fdf3952:         Mockito.when(impBundle.getBundleId()).thenReturn(Long.valueOf(5));
1:fdf3952:         Mockito.when(admin.getExportedPackages(bundle)).thenReturn(new ExportedPackage[]{exported});
1:fdf3952:         TabularData table = mbean.listPackages();
1:fdf3952:         Assert.assertEquals(PackageStateMBean.PACKAGES_TYPE,table.getTabularType());
1:fdf3952:         Collection values = table.values();
1:fdf3952:         Assert.assertEquals(1, values.size());
1:fdf3952:         CompositeData data = (CompositeData) values.iterator().next();
1:fdf3952:         Long[] exportingBundles = (Long[])data.get(PackageStateMBean.EXPORTING_BUNDLES);
1:fdf3952:         Assert.assertArrayEquals(new Long[]{Long.valueOf(4)}, exportingBundles);
1:fdf3952:         String name = (String) data.get(PackageStateMBean.NAME);
1:fdf3952:         Assert.assertEquals("test", name);
1:fdf3952:         String version = (String) data.get(PackageStateMBean.VERSION);
1:fdf3952:         Assert.assertEquals("1.0.0", version);
1:fdf3952:     }
1:fdf3952: 
1:fdf3952: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:0273964
commit:fdf3952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.jmx.framework;
1: 
1: import java.io.IOException;
1: import java.util.Collection;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.mockito.Mock;
1: import org.mockito.Mockito;
1: import org.mockito.MockitoAnnotations;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Version;
1: import org.osgi.jmx.framework.PackageStateMBean;
1: import org.osgi.service.packageadmin.ExportedPackage;
1: import org.osgi.service.packageadmin.PackageAdmin;
1: 
1: /**
1:  * {@link PackageStateMBean} test case.
1:  * 
1:  *
1:  * @version $Rev$ $Date$
1:  */
1: public class PackageStateTest {
1:     
1:     @Mock
1:     private BundleContext context;
1:     @Mock
1:     private PackageAdmin admin;
1:     private PackageState mbean;
1:     
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         MockitoAnnotations.initMocks(this);
1:         mbean = new PackageState(context, admin);
1:     }
1: 
1:     @Test
1:     public void testGetExportingBundles() throws IOException {
1:         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:         Mockito.when(exported.getExportingBundle()).thenReturn(bundle);
1:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(5));
1:         ExportedPackage exported2 = Mockito.mock(ExportedPackage.class);
1:         Bundle bundle2 = Mockito.mock(Bundle.class);
1:         Mockito.when(exported2.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:         Mockito.when(exported2.getExportingBundle()).thenReturn(bundle2);
1:         Mockito.when(bundle2.getBundleId()).thenReturn(Long.valueOf(6));
1:         Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported, exported2});
1:         long[] ids = mbean.getExportingBundles("test", "1.0.0");
1:         Assert.assertNotNull(ids);
1:         Assert.assertArrayEquals(new long[]{5,6}, ids);
1:     }
1: 
1:     @Test
1:     public void testGetImportingBundles() throws IOException {
1:         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Bundle exportingBundle = Mockito.mock(Bundle.class);
1:         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:         Mockito.when(exported.getExportingBundle()).thenReturn(exportingBundle);
1:         Mockito.when(exportingBundle.getBundleId()).thenReturn(Long.valueOf(2));
1:         Mockito.when(exported.getImportingBundles()).thenReturn(new Bundle[]{bundle});
1:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(4));
1:         Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported});
1:         long[] ids = mbean.getImportingBundles("test", "1.0.0", 2);
1:         Assert.assertArrayEquals(new long[]{4}, ids);
1:     }
1: 
1:     @Test
1:     public void testIsRemovalPending() throws IOException {
1:         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
1:         Bundle expBundle = Mockito.mock(Bundle.class);
1:         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:         Mockito.when(exported.isRemovalPending()).thenReturn(true);
1:         Mockito.when(exported.getExportingBundle()).thenReturn(expBundle);
1:         Mockito.when(expBundle.getBundleId()).thenReturn(Long.valueOf(2));
1:         Mockito.when(admin.getExportedPackages(Mockito.anyString())).thenReturn(new ExportedPackage[]{exported});
1:         boolean isRemoval = mbean.isRemovalPending("test", "1.0.0", Long.valueOf(2));
1:         Assert.assertTrue(isRemoval);
1:     }
1: 
1:     @Test
1:     public void testListPackages() throws IOException {
1:         Bundle bundle = Mockito.mock(Bundle.class);
1:         Bundle impBundle = Mockito.mock(Bundle.class);
1:         Mockito.when(context.getBundles()).thenReturn(new Bundle[]{bundle});
1:         ExportedPackage exported = Mockito.mock(ExportedPackage.class);
1:         Mockito.when(exported.getVersion()).thenReturn(Version.parseVersion("1.0.0"));
1:         Mockito.when(exported.getImportingBundles()).thenReturn(new Bundle[]{impBundle});
1:         Mockito.when(exported.getName()).thenReturn("test");
1:         Mockito.when(exported.getExportingBundle()).thenReturn(bundle);
1:         Mockito.when(bundle.getBundleId()).thenReturn(Long.valueOf(4));
1:         Mockito.when(impBundle.getBundleId()).thenReturn(Long.valueOf(5));
1:         Mockito.when(admin.getExportedPackages(bundle)).thenReturn(new ExportedPackage[]{exported});
1:         TabularData table = mbean.listPackages();
1:         Assert.assertEquals(PackageStateMBean.PACKAGES_TYPE,table.getTabularType());
1:         Collection values = table.values();
1:         Assert.assertEquals(1, values.size());
1:         CompositeData data = (CompositeData) values.iterator().next();
1:         Long[] exportingBundles = (Long[])data.get(PackageStateMBean.EXPORTING_BUNDLES);
1:         Assert.assertArrayEquals(new Long[]{Long.valueOf(4)}, exportingBundles);
1:         String name = (String) data.get(PackageStateMBean.NAME);
1:         Assert.assertEquals("test", name);
1:         String version = (String) data.get(PackageStateMBean.VERSION);
1:         Assert.assertEquals("1.0.0", version);
1:     }
1: 
1: }
============================================================================