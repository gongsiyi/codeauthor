1:fc02f66: /*
1:fc02f66:  * Licensed to the Apache Software Foundation (ASF) under one
1:fc02f66:  * or more contributor license agreements.  See the NOTICE file
1:fc02f66:  * distributed with this work for additional information
1:fc02f66:  * regarding copyright ownership.  The ASF licenses this file
1:fc02f66:  * to you under the Apache License, Version 2.0 (the
1:fc02f66:  * "License"); you may not use this file except in compliance
1:fc02f66:  * with the License.  You may obtain a copy of the License at
1:fc02f66:  *
1:fc02f66:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fc02f66:  *
1:fc02f66:  * Unless required by applicable law or agreed to in writing,
1:fc02f66:  * software distributed under the License is distributed on an
1:3c19a77:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fc02f66:  * KIND, either express or implied.  See the License for the
1:fc02f66:  * specific language governing permissions and limitations
1:fc02f66:  * under the License.
1:fc02f66:  */
1:fc02f66: package org.apache.aries.jndi.url;
1:614e830: 
1:b49a314: import java.util.Dictionary;
1:fc02f66: import java.util.Hashtable;
1:79bd7e0: import java.util.logging.Level;
1:79bd7e0: import java.util.logging.Logger;
1:e19d5ba: 
1:fc02f66: import javax.naming.spi.ObjectFactory;
1:e19d5ba: 
1:e19d5ba: import org.apache.aries.proxy.ProxyManager;
1:047a2ae: import org.apache.aries.util.AriesFrameworkUtil;
1:b6c4135: import org.apache.aries.util.tracker.SingleServiceTracker;
1:b6c4135: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
1:fc02f66: import org.osgi.framework.BundleActivator;
1:fc02f66: import org.osgi.framework.BundleContext;
1:fc02f66: import org.osgi.framework.ServiceRegistration;
1:696374b: import org.osgi.service.jndi.JNDIConstants;
1:e19d5ba: 
1:6263fd0: public class Activator implements BundleActivator, SingleServiceListener 
2:e19d5ba: {
1:e19d5ba:     private BundleContext ctx;
1:29c4662:     private volatile ServiceRegistration osgiUrlReg = null;
1:29c4662:     private volatile ServiceRegistration blueprintUrlReg = null;
1:e19d5ba:     private static SingleServiceTracker<ProxyManager> proxyManager;
1:614e830: 
1:29c4662:     @Override
1:6263fd0:     public void start(BundleContext context) 
1:e19d5ba:     {
1:e19d5ba:         ctx = context;
1:e19d5ba:         proxyManager = new SingleServiceTracker<ProxyManager>(context, ProxyManager.class, this);
1:e19d5ba:         proxyManager.open();
1:8c32a75:         // Blueprint URL scheme requires access to the BlueprintContainer service.
1:8c32a75:         // We have an optional import
1:8c32a75:         // on org.osgi.service.blueprint.container: only register the blueprint:comp/URL
1:8c32a75:         // scheme if it's present
1:8c32a75:         try {
1:8c32a75:           ctx.getBundle().loadClass("org.osgi.service.blueprint.container.BlueprintContainer");
1:8c32a75:           Hashtable<Object, Object> blueprintURlSchemeProps = new Hashtable<Object, Object>();
1:8c32a75:           blueprintURlSchemeProps.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "blueprint" });
1:8c32a75:           blueprintUrlReg = ctx.registerService(ObjectFactory.class.getName(),
1:b49a314:               new BlueprintURLContextServiceFactory(), (Dictionary) blueprintURlSchemeProps);
1:8c32a75:         } catch (ClassNotFoundException cnfe) {
1:8c32a75:           // The blueprint packages aren't available, so do nothing. That's fine.
1:79bd7e0:           Logger logger = Logger.getLogger("org.apache.aries.jndi");
1:79bd7e0:           logger.log(Level.INFO, "Blueprint support disabled: " + cnfe);
1:79bd7e0:           logger.log(Level.FINE, "Blueprint support disabled", cnfe);
1:8c32a75:         }
1:75070d8:     }
1:e19d5ba: 
1:75070d8:     @Override
1:29c4662:     public void stop(BundleContext context) {
1:e19d5ba:       proxyManager.close();
1:047a2ae:       AriesFrameworkUtil.safeUnregisterService(osgiUrlReg);
1:047a2ae:       AriesFrameworkUtil.safeUnregisterService(blueprintUrlReg);
1:75070d8:     }
1:6263fd0:   
1:614e830: 
1:75070d8:   @Override
1:6263fd0:   public void serviceFound() 
1:e19d5ba:   {
1:29c4662:     Hashtable<Object, Object> osgiUrlprops = new Hashtable<Object, Object>();
1:29c4662:     osgiUrlprops.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "osgi", "aries" });
1:29c4662:     osgiUrlReg = ctx.registerService(ObjectFactory.class.getName(),
1:b49a314:         new OsgiURLContextServiceFactory(), (Dictionary) osgiUrlprops);
1:e19d5ba:   }
1:614e830: 
1:29c4662:   @Override
1:6263fd0:   public void serviceLost() 
1:e19d5ba:   {
1:047a2ae:     AriesFrameworkUtil.safeUnregisterService(osgiUrlReg);
1:29c4662:     osgiUrlReg = null;
1:e19d5ba:   }
1:6263fd0: 
1:29c4662:   @Override
1:6263fd0:   public void serviceReplaced() 
1:e19d5ba:   {
1:6263fd0:     
1:e19d5ba:   }
1:614e830:     
1:e19d5ba:   public static ProxyManager getProxyManager()
1:e19d5ba:   {
1:e19d5ba:     return proxyManager == null ? null : proxyManager.getService();
1:e19d5ba:   }
1:e19d5ba: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:b49a314
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
1:               new BlueprintURLContextServiceFactory(), (Dictionary) blueprintURlSchemeProps);
/////////////////////////////////////////////////////////////////////////
1:         new OsgiURLContextServiceFactory(), (Dictionary) osgiUrlprops);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:79bd7e0
/////////////////////////////////////////////////////////////////////////
1: import java.util.logging.Level;
1: import java.util.logging.Logger;
/////////////////////////////////////////////////////////////////////////
1:           Logger logger = Logger.getLogger("org.apache.aries.jndi");
1:           logger.log(Level.INFO, "Blueprint support disabled: " + cnfe);
1:           logger.log(Level.FINE, "Blueprint support disabled", cnfe);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:6263fd0
/////////////////////////////////////////////////////////////////////////
1: public class Activator implements BundleActivator, SingleServiceListener 
1:     public void start(BundleContext context) 
/////////////////////////////////////////////////////////////////////////
0:           cnfe.printStackTrace();
/////////////////////////////////////////////////////////////////////////
1:   
1:   public void serviceFound() 
/////////////////////////////////////////////////////////////////////////
1:   public void serviceLost() 
1:   public void serviceReplaced() 
1:     
1:     
commit:614e830
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.log.Logger;
0: import org.osgi.service.log.LogService;
0: public class Activator implements BundleActivator, SingleServiceListener
0:     private Logger logger;
0:     public void start(BundleContext context)
0:         logger = new Logger(context);
0:         logger.open();
1: 
/////////////////////////////////////////////////////////////////////////
0:           logger.log(LogService.LOG_INFO, "Blueprint is not available, therefore the blueprint URL scheme is not registered.", cnfe);
/////////////////////////////////////////////////////////////////////////
1: 
0:       if (logger != null)
0:           logger.close();
1: 
0:   public void serviceFound()
/////////////////////////////////////////////////////////////////////////
0:   public void serviceLost()
0:   public void serviceReplaced()
1: 
1: 
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:b6c4135
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.tracker.SingleServiceTracker;
1: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:c827e88
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.SingleServiceTracker;
0: import org.apache.aries.util.SingleServiceTracker.SingleServiceListener;
commit:8c32a75
/////////////////////////////////////////////////////////////////////////
1:         // Blueprint URL scheme requires access to the BlueprintContainer service.
1:         // We have an optional import
1:         // on org.osgi.service.blueprint.container: only register the blueprint:comp/URL
1:         // scheme if it's present
1:         try {
1:           ctx.getBundle().loadClass("org.osgi.service.blueprint.container.BlueprintContainer");
1:           Hashtable<Object, Object> blueprintURlSchemeProps = new Hashtable<Object, Object>();
1:           blueprintURlSchemeProps.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "blueprint" });
1:           blueprintUrlReg = ctx.registerService(ObjectFactory.class.getName(),
0:               new BlueprintURLContextServiceFactory(), blueprintURlSchemeProps);
1:         } catch (ClassNotFoundException cnfe) {
1:           // The blueprint packages aren't available, so do nothing. That's fine.
0:           cnfe.printStackTrace();
1:         }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e19d5ba
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.ProxyManager;
0: import org.apache.aries.util.SingleServiceTracker;
0: import org.apache.aries.util.SingleServiceTracker.SingleServiceListener;
0: public class Activator implements BundleActivator, SingleServiceListener 
1: {
1:     private BundleContext ctx;
0:     private volatile ServiceRegistration reg;
1:     private static SingleServiceTracker<ProxyManager> proxyManager;
0:     public void start(BundleContext context) 
1:     {
1:         ctx = context;
1:         proxyManager = new SingleServiceTracker<ProxyManager>(context, ProxyManager.class, this);
1:         proxyManager.open();
0:     public void stop(BundleContext context) 
1:     {
1:         proxyManager.close();
0:         if (reg != null) reg.unregister();
0:     public void serviceFound() 
1:     {
0:       Hashtable<Object, Object> props = new Hashtable<Object, Object>();
0:       props.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "osgi", "aries" });
0:       reg = ctx.registerService(ObjectFactory.class.getName(), new OsgiURLContextServiceFactory(), props);
1:     }
1: 
0:     public void serviceLost() 
1:     {
0:       if (reg != null) reg.unregister();
0:       reg = null;
1:     }
1: 
0:     public void serviceReplaced() 
1:     {
1:       
1:     }
1:     
1:     public static ProxyManager getProxyManager()
1:     {
1:       return proxyManager == null ? null : proxyManager.getService();
1:     }
1: }
commit:45e8469
/////////////////////////////////////////////////////////////////////////
commit:e9395b8
/////////////////////////////////////////////////////////////////////////
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:047a2ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.AriesFrameworkUtil;
0: import org.apache.aries.util.tracker.SingleServiceTracker;
0: import org.apache.aries.util.tracker.SingleServiceTracker.SingleServiceListener;
/////////////////////////////////////////////////////////////////////////
1:       AriesFrameworkUtil.safeUnregisterService(osgiUrlReg);
1:       AriesFrameworkUtil.safeUnregisterService(blueprintUrlReg);
/////////////////////////////////////////////////////////////////////////
1:     AriesFrameworkUtil.safeUnregisterService(osgiUrlReg);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:75070d8
/////////////////////////////////////////////////////////////////////////
0:   public void serviceFound() 
0:   {
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
0:   public void serviceReplaced() 
0:   {
1:   }
0:     
0:   public static ProxyManager getProxyManager()
0:   {
0:     return proxyManager == null ? null : proxyManager.getService();
1:   }
commit:29c4662
/////////////////////////////////////////////////////////////////////////
1:     private volatile ServiceRegistration osgiUrlReg = null;
1:     private volatile ServiceRegistration blueprintUrlReg = null;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void stop(BundleContext context) {
0:       proxyManager.close();
0:       if (osgiUrlReg != null) osgiUrlReg.unregister();
0:       if (blueprintUrlReg != null) blueprintUrlReg.unregister();
0:   
1:   @Override
1:     Hashtable<Object, Object> osgiUrlprops = new Hashtable<Object, Object>();
1:     osgiUrlprops.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "osgi", "aries" });
1:     osgiUrlReg = ctx.registerService(ObjectFactory.class.getName(),
0:         new OsgiURLContextServiceFactory(), osgiUrlprops);
0:     // Blueprint URL scheme requires access to the BlueprintContainer service.
0:     // We have an optional import
0:     // on org.osgi.service.blueprint.container: only register the blueprint:comp/URL
0:     // scheme if it's present
0:     try {
0:       ctx.getBundle().loadClass("org.osgi.service.blueprint.container.BlueprintContainer");
0:       Hashtable<Object, Object> blueprintURlSchemeProps = new Hashtable<Object, Object>();
0:       blueprintURlSchemeProps.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "blueprint" });
0:       blueprintUrlReg = ctx.registerService(ObjectFactory.class.getName(),
0:           new BlueprintURLContextServiceFactory(), blueprintURlSchemeProps);
0:     } catch (ClassNotFoundException cnfe) {
0:       // The blueprint packages aren't available, so do nothing. That's fine.
0:   }
0: 
0:   public void serviceLost() 
0:   {
0:     if (osgiUrlReg != null) osgiUrlReg.unregister();
1:     osgiUrlReg = null;
0:     if (blueprintUrlReg != null) blueprintUrlReg.unregister();
0:     blueprintUrlReg = null;
0:   }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:7b2544b
/////////////////////////////////////////////////////////////////////////
0:     private ServiceRegistration reg;
0:     public void start(BundleContext context) {
0:         Hashtable<Object, Object> props = new Hashtable<Object, Object>();
0:         props.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "osgi", "aries" });
0:         reg = context.registerService(ObjectFactory.class.getName(), new OsgiURLContextServiceFactory(), props);
0:     }
0:     public void stop(BundleContext context) {
0:         reg.unregister();
0:     }
commit:696374b
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.jndi.JNDIConstants;
/////////////////////////////////////////////////////////////////////////
0:     props.put(JNDIConstants.JNDI_URLSCHEME, new String[] {"osgi", "aries"} );
commit:3c19a77
/////////////////////////////////////////////////////////////////////////
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
commit:e6f69cc
commit:fc02f66
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi.url;
0: 
1: import java.util.Hashtable;
0: 
1: import javax.naming.spi.ObjectFactory;
0: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
0: 
0: import org.apache.aries.jndi.services.ServiceHelper;
0: 
0: public class Activator implements BundleActivator {
0: 
0:   private ServiceRegistration reg;
0: 	
0:   public void start(BundleContext context)
0:   {
0:     ServiceHelper.setBundleContext(context);
0:     
0:     Hashtable<Object, Object> props = new Hashtable<Object, Object>();
0:     props.put("osgi.jndi.urlScheme", new String[] {"osgi", "aries"} );
0:     reg = context.registerService(ObjectFactory.class.getName(), new OsgiURLContextFactory(), props);
0:   }
0: 
0: 
0:   public void stop(BundleContext context)
0:   {
0: 	reg.unregister();
0:   }
0: 
0: }
commit:1a3015d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: package org.apache.aries.jndi.url;
0: 
0: import java.util.Hashtable;
0: 
0: import javax.naming.spi.ObjectFactory;
0: 
0: import org.osgi.framework.BundleActivator;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.ServiceRegistration;
0: 
0: import org.apache.aries.jndi.services.ServiceHelper;
0: 
0: public class Activator implements BundleActivator {
0: 
0:   private ServiceRegistration reg;
0: 	
0:   public void start(BundleContext context)
0:   {
0:     ServiceHelper.setBundleContext(context);
0:     
0:     Hashtable<Object, Object> props = new Hashtable<Object, Object>();
0:     props.put("osgi.jndi.urlScheme", new String[] {"osgi", "aries"} );
0:     reg = context.registerService(ObjectFactory.class.getName(), new OsgiURLContextFactory(), props);
0:   }
0: 
0: 
0:   public void stop(BundleContext context)
0:   {
0: 	reg.unregister();
0:   }
0: 
0: }
============================================================================