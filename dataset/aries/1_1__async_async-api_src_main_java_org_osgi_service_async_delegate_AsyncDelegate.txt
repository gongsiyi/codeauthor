1:14ceeb1: /*
1:14ceeb1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:14ceeb1:  *
1:14ceeb1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:14ceeb1:  * you may not use this file except in compliance with the License.
1:14ceeb1:  * You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing, software
1:14ceeb1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14ceeb1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14ceeb1:  * See the License for the specific language governing permissions and
1:14ceeb1:  * limitations under the License.
1:14ceeb1:  */
1:39cd3f4: package org.osgi.service.async.delegate;
1:39cd3f4: 
1:39cd3f4: import java.lang.reflect.Method;
1:39cd3f4: import org.osgi.annotation.versioning.ConsumerType;
1:39cd3f4: import org.osgi.util.promise.Promise;
1:39cd3f4: 
1:39cd3f4: /**
1:39cd3f4:  * The AsyncDelegate, as defined in OSGi RFC 204
1:39cd3f4:  * https://github.com/osgi/design/tree/master/rfcs/rfc0206
1:39cd3f4:  */
1:39cd3f4: @ConsumerType
1:39cd3f4: public interface AsyncDelegate {
1:39cd3f4: 	/**
1:39cd3f4: 	 * Asynchronously call a method
1:39cd3f4: 	 * 
1:39cd3f4: 	 * @param m the method
1:39cd3f4: 	 * @param args the arguments
1:39cd3f4: 	 * 
1:39cd3f4: 	 * @return A promise, or <code>null</code> if the method is not supported
1:39cd3f4:      *
1:39cd3f4: 	 * @throws Exception
1:39cd3f4:      */
1:39cd3f4: 	Promise<?> async(Method m, Object[] args) throws Exception;
1:39cd3f4: 
1:39cd3f4: 	/**
1:39cd3f4:      * Asynchronously call a method
1:39cd3f4: 	 * 
1:39cd3f4:      * @param m the method
1:39cd3f4:      * @param args the arguments
1:39cd3f4: 	 * 
1:39cd3f4: 	 * @return <code>true<code> if accepted, or <code>false</code> otherwise.
1:39cd3f4: 	 * @throws Exception 
1:39cd3f4: 	 */
1:39cd3f4: 	boolean execute(Method m, Object[] args) throws Exception;
1:39cd3f4: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance 2015. All Rights Reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:39cd3f4
/////////////////////////////////////////////////////////////////////////
1: package org.osgi.service.async.delegate;
1: 
1: import java.lang.reflect.Method;
1: import org.osgi.annotation.versioning.ConsumerType;
1: import org.osgi.util.promise.Promise;
1: 
1: /**
1:  * The AsyncDelegate, as defined in OSGi RFC 204
1:  * https://github.com/osgi/design/tree/master/rfcs/rfc0206
1:  */
1: @ConsumerType
1: public interface AsyncDelegate {
1: 	/**
1: 	 * Asynchronously call a method
1: 	 * 
1: 	 * @param m the method
1: 	 * @param args the arguments
1: 	 * 
1: 	 * @return A promise, or <code>null</code> if the method is not supported
1:      *
1: 	 * @throws Exception
1:      */
1: 	Promise<?> async(Method m, Object[] args) throws Exception;
1: 
1: 	/**
1:      * Asynchronously call a method
1: 	 * 
1:      * @param m the method
1:      * @param args the arguments
1: 	 * 
1: 	 * @return <code>true<code> if accepted, or <code>false</code> otherwise.
1: 	 * @throws Exception 
1: 	 */
1: 	boolean execute(Method m, Object[] args) throws Exception;
1: }
============================================================================