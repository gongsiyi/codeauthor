1:8914925: /*
1:8914925:  * Licensed to the Apache Software Foundation (ASF) under one
1:8914925:  * or more contributor license agreements.  See the NOTICE file
1:8914925:  * distributed with this work for additional information
1:8914925:  * regarding copyright ownership.  The ASF licenses this file
1:8914925:  * to you under the Apache License, Version 2.0 (the
1:8914925:  * "License"); you may not use this file except in compliance
1:8914925:  * with the License.  You may obtain a copy of the License at
1:8914925:  *
1:8914925:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8914925:  *
1:8914925:  * Unless required by applicable law or agreed to in writing,
1:8914925:  * software distributed under the License is distributed on an
1:8914925:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:8914925:  * KIND, either express or implied.  See the License for the
1:8914925:  * specific language governing permissions and limitations
1:8914925:  * under the License.
1:8914925:  */
1:8914925: 
1:8914925: package org.apache.aries.application.impl;
1:8914925: 
1:de5b346: import java.util.HashMap;
1:8914925: import java.util.Map;
1:8914925: 
1:8914925: import org.apache.aries.application.DeploymentContent;
1:8914925: import org.apache.aries.application.utils.AppConstants;
1:910fec0: import org.apache.aries.util.VersionRange;
1:910fec0: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
1:8914925: import org.osgi.framework.Version;
1:8914925: 
1:8914925: public final class DeploymentContentImpl implements DeploymentContent {
1:8914925:   
1:de5b346:   private final ContentImpl _content;
1:8914925:   
1:8914925:   /**
1:8914925:    * DeploymentContent relates to a bundle at a particular version. 
1:8914925:    * We can therefore assume that the Version passed into this 
1:8914925:    * constructor is the exact version in question. 
1:8914925:    * @param bundleSymbolicName
1:8914925:    * @param version
1:8914925:    */
1:8914925:   public DeploymentContentImpl (String bundleSymbolicName, Version version) {
1:de5b346:     Map<String, String> nvMap = new HashMap<String, String>();
1:8914925:     nvMap.put(AppConstants.DEPLOYMENT_BUNDLE_VERSION, version.toString());
1:8914925:     _content = new ContentImpl (bundleSymbolicName, nvMap);
1:8914925:   }
1:8914925:   
1:8914925:   /**
1:8914925:    * Construct a DeploymentContent from a string of the form, 
1:8914925:    *   bundle.symbolic.name;deployedContent="1.2.3"
1:8914925:    * @param deployedContent
1:8914925:    */
1:8914925:   public DeploymentContentImpl (String deployedContent) {
1:8914925:     _content = new ContentImpl (deployedContent);
1:8914925:   }
1:8914925:   
1:3d7f5b3:   public Version getExactVersion() {
1:8914925:     return getVersion().getExactVersion();
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public String getAttribute(String key) {
1:8914925:     return _content.getAttribute(key);
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public Map<String, String> getAttributes() {
1:8914925:     return _content.getAttributes();
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public String getContentName() {
1:8914925:     return _content.getContentName();
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public String getDirective(String key) {
1:8914925:     return _content.getDirective(key);
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public Map<String, String> getDirectives() {
1:8914925:     return _content.getDirectives();
1:8914925:   }
1:8914925: 
1:3d7f5b3:   public VersionRange getVersion() {
1:8914925:     String deployedVersion = _content.getAttribute(AppConstants.DEPLOYMENT_BUNDLE_VERSION);
1:8914925:     VersionRange vr = null;
1:8914925:     if (deployedVersion != null && deployedVersion.length() > 0) {
1:8914925:       vr = ManifestHeaderProcessor.parseVersionRange(deployedVersion, true);
1:8914925:     }
1:8914925:     return vr;
1:8914925:   }
1:8914925: 
6:de5b346:   @Override
1:8914925:   public boolean equals(Object other) { 
1:8914925:     if (other == null) 
1:8914925:       return false;
1:8914925:     if (this == other) 
1:8914925:       return true;
1:8914925:     if (other instanceof DeploymentContentImpl) {
1:8914925:       return _content.equals(((DeploymentContentImpl) other)._content);
1:8914925:     } else { 
1:8914925:       return false;
1:8914925:     }
1:8914925:   }
1:83ec96d:   
1:3d7f5b3:   public int hashCode() {
1:83ec96d:     return _content.hashCode();
1:83ec96d:   }
1:8914925: 
1:3d7f5b3:   public Map<String, String> getNameValueMap() {
1:8914925:     return _content.getNameValueMap();
1:8914925:   }
1:83ec96d:   
1:de5b346:   @Override
1:de5b346: public String toString()
1:83ec96d:   {
1:83ec96d:     return _content.toString();
1:83ec96d:   }
1:8914925: }
============================================================================
author:J. Daniel Kulp
-------------------------------------------------------------------------------
commit:3d7f5b3
/////////////////////////////////////////////////////////////////////////
1:   public Version getExactVersion() {
1:   public String getAttribute(String key) {
1:   public Map<String, String> getAttributes() {
1:   public String getContentName() {
1:   public String getDirective(String key) {
1:   public Map<String, String> getDirectives() {
1:   public VersionRange getVersion() {
/////////////////////////////////////////////////////////////////////////
1:   public int hashCode() {
1:   public Map<String, String> getNameValueMap() {
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:de5b346
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1:   private final ContentImpl _content;
/////////////////////////////////////////////////////////////////////////
1:     Map<String, String> nvMap = new HashMap<String, String>();
/////////////////////////////////////////////////////////////////////////
1:   @Override
0: public Version getExactVersion() {
1:   @Override
0: public String getAttribute(String key) {
1:   @Override
0: public Map<String, String> getAttributes() {
1:   @Override
0: public String getContentName() {
1:   @Override
0: public String getDirective(String key) {
1:   @Override
0: public Map<String, String> getDirectives() {
1:   @Override
0: public VersionRange getVersion() {
/////////////////////////////////////////////////////////////////////////
0:   @Override
0: public int hashCode() {
0:   @Override
0: public Map<String, String> getNameValueMap() {
0:   @Override
1: public String toString()
commit:910fec0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.VersionRange;
1: import org.apache.aries.util.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValueMap;
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:83ec96d
/////////////////////////////////////////////////////////////////////////
1:   
0:   public int hashCode() {
1:     return _content.hashCode();
1:   }
1:   
0:   public String toString()
1:   {
1:     return _content.toString();
1:   }
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:8914925
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
1: package org.apache.aries.application.impl;
1: 
1: import java.util.Map;
1: 
1: import org.apache.aries.application.DeploymentContent;
0: import org.apache.aries.application.VersionRange;
1: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
1: import org.osgi.framework.Version;
1: 
1: public final class DeploymentContentImpl implements DeploymentContent {
1:   
0:   private ContentImpl _content;
1:   
1:   /**
1:    * DeploymentContent relates to a bundle at a particular version. 
1:    * We can therefore assume that the Version passed into this 
1:    * constructor is the exact version in question. 
1:    * @param bundleSymbolicName
1:    * @param version
1:    */
1:   public DeploymentContentImpl (String bundleSymbolicName, Version version) {
0:     NameValueMap<String, String> nvMap = new NameValueMap<String, String>();
1:     nvMap.put(AppConstants.DEPLOYMENT_BUNDLE_VERSION, version.toString());
1:     _content = new ContentImpl (bundleSymbolicName, nvMap);
1:   }
1:   
1:   /**
1:    * Construct a DeploymentContent from a string of the form, 
1:    *   bundle.symbolic.name;deployedContent="1.2.3"
1:    * @param deployedContent
1:    */
1:   public DeploymentContentImpl (String deployedContent) {
1:     _content = new ContentImpl (deployedContent);
1:   }
1:   
0:   public Version getExactVersion() {
1:     return getVersion().getExactVersion();
1:   }
1: 
0:   public String getAttribute(String key) {
1:     return _content.getAttribute(key);
1:   }
1: 
0:   public Map<String, String> getAttributes() {
1:     return _content.getAttributes();
1:   }
1: 
0:   public String getContentName() {
1:     return _content.getContentName();
1:   }
1: 
0:   public String getDirective(String key) {
1:     return _content.getDirective(key);
1:   }
1: 
0:   public Map<String, String> getDirectives() {
1:     return _content.getDirectives();
1:   }
1: 
0:   public VersionRange getVersion() {
1:     String deployedVersion = _content.getAttribute(AppConstants.DEPLOYMENT_BUNDLE_VERSION);
1:     VersionRange vr = null;
1:     if (deployedVersion != null && deployedVersion.length() > 0) {
1:       vr = ManifestHeaderProcessor.parseVersionRange(deployedVersion, true);
1:     }
1:     return vr;
1:   }
1: 
0:   @Override
1:   public boolean equals(Object other) { 
1:     if (other == null) 
1:       return false;
1:     if (this == other) 
1:       return true;
1:     if (other instanceof DeploymentContentImpl) {
1:       return _content.equals(((DeploymentContentImpl) other)._content);
1:     } else { 
1:       return false;
1:     }
1:   }
1: 
0:   public Map<String, String> getNameValueMap() {
1:     return _content.getNameValueMap();
1:   }
1: }
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:5297b83
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.application.utils.AppConstants;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
0: import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
0: public final class DeploymentContentImpl implements DeploymentContent {
0:   /**
0:    * DeploymentContent relates to a bundle at a particular version. 
0:    * We can therefore assume that the Version passed into this 
0:    * constructor is the exact version in question. 
0:    * @param bundleSymbolicName
0:    * @param version
0:    */
0:   public DeploymentContentImpl (String bundleSymbolicName, Version version) {
0:     NameValueMap<String, String> nvMap = new NameValueMap<String, String>();
0:     nvMap.put(AppConstants.DEPLOYMENT_BUNDLE_VERSION, version.toString());
0:     _content = new ContentImpl (bundleSymbolicName, nvMap);
0:   /**
0:    * Construct a DeploymentContent from a string of the form, 
0:    *   bundle.symbolic.name;deployedContent="1.2.3"
0:    * @param deployedContent
0:    */
0:   public DeploymentContentImpl (String deployedContent) {
0:     _content = new ContentImpl (deployedContent);
0:   
/////////////////////////////////////////////////////////////////////////
0:     String deployedVersion = _content.getAttribute(AppConstants.DEPLOYMENT_BUNDLE_VERSION);
0:     VersionRange vr = null;
0:     if (deployedVersion != null && deployedVersion.length() > 0) {
0:       vr = ManifestHeaderProcessor.parseVersionRange(deployedVersion, true);
0:     }
0:     return vr;
0:   @Override
0:   public boolean equals(Object other) { 
0:     if (other == null) 
0:       return false;
0:     if (this == other) 
0:       return true;
0:     if (other instanceof DeploymentContentImpl) {
0:       return _content.equals(((DeploymentContentImpl) other)._content);
0:     } else { 
0:       return false;
0:     }
0:   }
0: 
0:   public Map<String, String> getNameValueMap() {
0:     return _content.getNameValueMap();
0:   }
commit:0e0fd84
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  */
0: 
0: package org.apache.aries.application.impl;
0: 
0: import java.util.Map;
0: 
0: import org.apache.aries.application.DeploymentContent;
0: import org.apache.aries.application.VersionRange;
0: import org.osgi.framework.Version;
0: 
0: public class DeploymentContentImpl implements DeploymentContent {
0:   
0:   private ContentImpl _content;
0:   
0:   public DeploymentContentImpl (String content) { 
0:     _content = new ContentImpl (content);
0:   }
0:   
0:   public DeploymentContentImpl (String bundleSymbolicName, Version version) { 
0:     _content = new ContentImpl (bundleSymbolicName, version);
0:   }
0: 
0:   public Version getExactVersion() {
0:     return getVersion().getExactVersion();
0:   }
0: 
0:   public String getAttribute(String key) {
0:     return _content.getAttribute(key);
0:   }
0: 
0:   public Map<String, String> getAttributes() {
0:     return _content.getAttributes();
0:   }
0: 
0:   public String getContentName() {
0:     return _content.getContentName();
0:   }
0: 
0:   public String getDirective(String key) {
0:     return _content.getDirective(key);
0:   }
0: 
0:   public Map<String, String> getDirectives() {
0:     return _content.getDirectives();
0:   }
0: 
0:   public VersionRange getVersion() {
0:     return _content.getVersion();
0:   }
0: 
0: }
============================================================================