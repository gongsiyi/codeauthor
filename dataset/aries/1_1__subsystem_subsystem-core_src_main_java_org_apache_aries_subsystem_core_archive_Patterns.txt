1:fba8a39: /*
1:fba8a39:  * Licensed to the Apache Software Foundation (ASF) under one
1:fba8a39:  * or more contributor license agreements.  See the NOTICE file
1:fba8a39:  * distributed with this work for additional information
1:fba8a39:  * regarding copyright ownership.  The ASF licenses this file
1:fba8a39:  * to you under the Apache License, Version 2.0 (the
1:fba8a39:  * "License"); you may not use this file except in compliance
1:fba8a39:  * with the License.  You may obtain a copy of the License at
1:fba8a39:  *
1:fba8a39:  *   http://www.apache.org/licenses/LICENSE-2.0
1:fba8a39:  *
1:fba8a39:  * Unless required by applicable law or agreed to in writing,
1:fba8a39:  * software distributed under the License is distributed on an
1:fba8a39:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:fba8a39:  * KIND, either express or implied.  See the License for the
1:fba8a39:  * specific language governing permissions and limitations
1:fba8a39:  * under the License.
1:fba8a39:  */
1:2ffcfb9: package org.apache.aries.subsystem.core.archive;
1:2ffcfb9: 
1:2ffcfb9: import java.util.regex.Pattern;
1:2ffcfb9: 
1:2ffcfb9: import org.osgi.framework.namespace.PackageNamespace;
1:2ffcfb9: 
1:2ffcfb9: public class Patterns {
1:2ffcfb9: 	public static final Pattern NAMESPACE = Pattern.compile('(' + Grammar.NAMESPACE + ")(?=;|\\z)");
1:2ffcfb9: 	public static final Pattern OBJECTCLASS_OR_STAR = Pattern.compile("((" + Grammar.OBJECTCLASS + ")|[*])(?=;|\\z)");
1:2ffcfb9: 	public static final Pattern PACKAGE_NAMES = Pattern.compile('(' + Grammar.PACKAGENAMES + ")(?=;|\\z)");
1:2ffcfb9: 	public static final Pattern PACKAGE_NAMESPACE = Pattern.compile("\\((" + PackageNamespace.PACKAGE_NAMESPACE + ")(=)([^\\)]+)\\)");
1:2ffcfb9: 	public static final Pattern PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1:2ffcfb9: 	public static final Pattern PATHS = Pattern.compile('(' + Grammar.PATH + "\\s*(?:\\;\\s*" + Grammar.PATH + ")*)(?=;|\\z)");
1:2ffcfb9: 	public static final Pattern SUBSYSTEM_TYPE = Pattern.compile('(' + SubsystemTypeHeader.TYPE_APPLICATION + '|' + SubsystemTypeHeader.TYPE_COMPOSITE + '|' + SubsystemTypeHeader.TYPE_FEATURE + ")(?=;|\\z)");
1:2ffcfb9: 	public static final Pattern SYMBOLIC_NAME = Pattern.compile('(' + Grammar.SYMBOLICNAME + ")(?=;|\\z)");
1:2ffcfb9: 	public static final Pattern WILDCARD_NAMES = Pattern.compile('(' + Grammar.WILDCARD_NAMES + ")(?=;|\\z)");
1:2ffcfb9: 	
1:2ffcfb9: 	private static final String DIRECTIVE = '(' + Grammar.EXTENDED + ")(:=)(" + Grammar.ARGUMENT + ')';
1:2ffcfb9: 	private static final String TYPED_ATTR = '(' + Grammar.EXTENDED + ")(?:(\\:)(" + Grammar.TYPE + "))?=(" + Grammar.ARGUMENT + ')';
1:2ffcfb9: 	public static final Pattern TYPED_PARAMETER = Pattern.compile("(?:(?:" + DIRECTIVE + ")|(?:" + TYPED_ATTR + "))(?=;|\\z)");
1:d93afd1: 	
1:d93afd1: 	public static final Pattern SCALAR_LIST = Pattern.compile("List(?:<(String|Long|Double|Version)>)?");
1:2ffcfb9: }
============================================================================
author:John Ross
-------------------------------------------------------------------------------
commit:fba8a39
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:d93afd1
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	public static final Pattern SCALAR_LIST = Pattern.compile("List(?:<(String|Long|Double|Version)>)?");
commit:2ffcfb9
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.archive;
1: 
1: import java.util.regex.Pattern;
1: 
1: import org.osgi.framework.namespace.PackageNamespace;
1: 
1: public class Patterns {
1: 	public static final Pattern NAMESPACE = Pattern.compile('(' + Grammar.NAMESPACE + ")(?=;|\\z)");
1: 	public static final Pattern OBJECTCLASS_OR_STAR = Pattern.compile("((" + Grammar.OBJECTCLASS + ")|[*])(?=;|\\z)");
1: 	public static final Pattern PACKAGE_NAMES = Pattern.compile('(' + Grammar.PACKAGENAMES + ")(?=;|\\z)");
1: 	public static final Pattern PACKAGE_NAMESPACE = Pattern.compile("\\((" + PackageNamespace.PACKAGE_NAMESPACE + ")(=)([^\\)]+)\\)");
1: 	public static final Pattern PARAMETER = Pattern.compile('(' + Grammar.PARAMETER + ")(?=;|\\z)");
1: 	public static final Pattern PATHS = Pattern.compile('(' + Grammar.PATH + "\\s*(?:\\;\\s*" + Grammar.PATH + ")*)(?=;|\\z)");
1: 	public static final Pattern SUBSYSTEM_TYPE = Pattern.compile('(' + SubsystemTypeHeader.TYPE_APPLICATION + '|' + SubsystemTypeHeader.TYPE_COMPOSITE + '|' + SubsystemTypeHeader.TYPE_FEATURE + ")(?=;|\\z)");
1: 	public static final Pattern SYMBOLIC_NAME = Pattern.compile('(' + Grammar.SYMBOLICNAME + ")(?=;|\\z)");
1: 	public static final Pattern WILDCARD_NAMES = Pattern.compile('(' + Grammar.WILDCARD_NAMES + ")(?=;|\\z)");
1: 	
1: 	private static final String DIRECTIVE = '(' + Grammar.EXTENDED + ")(:=)(" + Grammar.ARGUMENT + ')';
1: 	private static final String TYPED_ATTR = '(' + Grammar.EXTENDED + ")(?:(\\:)(" + Grammar.TYPE + "))?=(" + Grammar.ARGUMENT + ')';
1: 	public static final Pattern TYPED_PARAMETER = Pattern.compile("(?:(?:" + DIRECTIVE + ")|(?:" + TYPED_ATTR + "))(?=;|\\z)");
1: }
============================================================================