1:acd8e16: /*
1:acd8e16:  * Licensed to the Apache Software Foundation (ASF) under one
1:acd8e16:  * or more contributor license agreements.  See the NOTICE file
1:acd8e16:  * distributed with this work for additional information
1:acd8e16:  * regarding copyright ownership.  The ASF licenses this file
1:acd8e16:  * to you under the Apache License, Version 2.0 (the
1:acd8e16:  * "License"); you may not use this file except in compliance
1:acd8e16:  * with the License.  You may obtain a copy of the License at
1:acd8e16:  *
1:acd8e16:  *   http://www.apache.org/licenses/LICENSE-2.0
1:acd8e16:  *
1:acd8e16:  * Unless required by applicable law or agreed to in writing,
1:acd8e16:  * software distributed under the License is distributed on an
1:acd8e16:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:acd8e16:  * KIND, either express or implied.  See the License for the
1:acd8e16:  * specific language governing permissions and limitations
1:acd8e16:  * under the License.
1:acd8e16:  */
1:acd8e16: package org.apache.aries.jndi.rmi;
1:614e830: 
1:b49a314: import java.util.Dictionary;
1:acd8e16: import java.util.Hashtable;
6:acd8e16: 
1:acd8e16: import javax.naming.spi.ObjectFactory;
1:acd8e16: 
1:047a2ae: import org.apache.aries.util.AriesFrameworkUtil;
1:9c42dfb: import org.apache.aries.util.nls.MessageUtil;
1:acd8e16: import org.osgi.framework.BundleActivator;
1:acd8e16: import org.osgi.framework.BundleContext;
1:acd8e16: import org.osgi.framework.ServiceRegistration;
1:acd8e16: import org.osgi.service.jndi.JNDIConstants;
1:6263fd0: import org.slf4j.Logger;
1:6263fd0: import org.slf4j.LoggerFactory;
1:acd8e16: 
1:acd8e16: public class Activator implements BundleActivator {
1:6263fd0: 
1:acd8e16:     private ServiceRegistration reg;
1:49d4ef7: 
1:6263fd0:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
1:6263fd0: 
1:acd8e16:     public void start(BundleContext context) {
1:6263fd0: 
1:6263fd0:         LOGGER.debug("Registering RMI url handler");
1:acd8e16: 
1:acd8e16:         try {
1:acd8e16:             Hashtable<Object, Object> props = new Hashtable<Object, Object>();
1:acd8e16:             props.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "rmi" });
1:acd8e16:             reg = context.registerService(
1:acd8e16:                         ObjectFactory.class.getName(),
1:acd8e16:                         ClassLoader.getSystemClassLoader().loadClass("com.sun.jndi.url.rmi.rmiURLContextFactory").newInstance(),
1:b49a314:                         (Dictionary) props);
2:acd8e16:         }
1:acd8e16:         catch (Exception e)
1:acd8e16:         {
1:9c42dfb:             MessageUtil msg = MessageUtil.createMessageUtil(Activator.class, "org.apache.aries.jndi.nls.jndiRmiMessages");
1:6263fd0:             LOGGER.info(msg.getMessage("rmi.factory.creation.failed"), e);
1:acd8e16:         }
1:acd8e16:     }
1:acd8e16: 
1:acd8e16:     public void stop(BundleContext context) {
1:047a2ae:         AriesFrameworkUtil.safeUnregisterService(reg);
1:614e830:     }
1:6263fd0: 
1:acd8e16: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:b49a314
/////////////////////////////////////////////////////////////////////////
1: import java.util.Dictionary;
/////////////////////////////////////////////////////////////////////////
1:                         (Dictionary) props);
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:6263fd0
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
1: 
1: 
1:         LOGGER.debug("Registering RMI url handler");
/////////////////////////////////////////////////////////////////////////
1:             LOGGER.info(msg.getMessage("rmi.factory.creation.failed"), e);
1: 
commit:614e830
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.log.Logger;
0: import org.osgi.service.log.LogService;
0:     private Logger logger;
0:         logger = new Logger(context);
0:         logger.open();
/////////////////////////////////////////////////////////////////////////
1: 
0:             logger.log(LogService.LOG_DEBUG, "Registered RMI url handler");
0:             logger.log(LogService.LOG_INFO, msg.getMessage("rmi.factory.creation.failed"), e);
0:         if (logger != null)
0:             logger.close();
1:     }
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:9c42dfb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.nls.MessageUtil;
/////////////////////////////////////////////////////////////////////////
1:             MessageUtil msg = MessageUtil.createMessageUtil(Activator.class, "org.apache.aries.jndi.nls.jndiRmiMessages");
0:             LOGGER.info(msg.getMessage("rmi.factory.creation.failed"), e);
commit:be0a722
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
0:         LOGGER.debug("Registering RMI url handler");
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.info("Could not create the jndi rmi url factory.", e);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:047a2ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.AriesFrameworkUtil;
/////////////////////////////////////////////////////////////////////////
1:         AriesFrameworkUtil.safeUnregisterService(reg);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:49d4ef7
/////////////////////////////////////////////////////////////////////////
0: import java.util.logging.Level;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOGGER = Logger.getLogger(Activator.class.getName());
1: 
0:         LOGGER.fine("Registering RMI url handler");
/////////////////////////////////////////////////////////////////////////
0:             LOGGER.log(Level.INFO, "Could not create the jndi rmi url factory.", e);
commit:b295665
/////////////////////////////////////////////////////////////////////////
0:             e.printStackTrace();
commit:acd8e16
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jndi.rmi;
1: 
1: import java.util.Hashtable;
0: import java.util.logging.Logger;
1: 
1: import javax.naming.spi.ObjectFactory;
1: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.jndi.JNDIConstants;
1: 
1: public class Activator implements BundleActivator {
1: 
1:     private ServiceRegistration reg;
1: 
1:     public void start(BundleContext context) {
1: 
0:         Logger.getLogger("org.apache.aries.jndi.rmi").fine("Registering RMI url handler");
1: 
1:         try {
1:             Hashtable<Object, Object> props = new Hashtable<Object, Object>();
1:             props.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "rmi" });
1:             reg = context.registerService(
1:                         ObjectFactory.class.getName(),
1:                         ClassLoader.getSystemClassLoader().loadClass("com.sun.jndi.url.rmi.rmiURLContextFactory").newInstance(),
0:                         props);
1:         }
1:         catch (Exception e)
1:         {
0:             throw new RuntimeException("Unable to register jndi url handler for rmi", e);
1:         }
1:     }
1: 
1:     public void stop(BundleContext context) {
0:         reg.unregister();
1:     }
1: 
1: }
============================================================================