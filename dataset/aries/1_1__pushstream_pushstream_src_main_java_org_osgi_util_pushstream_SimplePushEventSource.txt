1:7fa86e8: /*
1:7fa86e8:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:7fa86e8:  * 
1:7fa86e8:  * Licensed under the Apache License, Version 2.0 (the "License");
1:7fa86e8:  * you may not use this file except in compliance with the License.
1:7fa86e8:  * You may obtain a copy of the License at
1:7fa86e8:  *
1:7fa86e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7fa86e8:  *
1:7fa86e8:  * Unless required by applicable law or agreed to in writing, software
1:7fa86e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7fa86e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7fa86e8:  * See the License for the specific language governing permissions and
1:7fa86e8:  * limitations under the License.
1:7fa86e8:  */
1:7fa86e8: 
1:7fa86e8: package org.osgi.util.pushstream;
1:7fa86e8: 
1:7fa86e8: import org.osgi.annotation.versioning.ProviderType;
1:7fa86e8: import org.osgi.util.promise.Promise;
1:7fa86e8: 
1:7fa86e8: /**
1:7fa86e8:  * A {@link SimplePushEventSource} is a helper that makes it simpler to write a
1:7fa86e8:  * {@link PushEventSource}. Users do not need to manage multiple registrations
1:7fa86e8:  * to the stream, nor do they have to be concerned with back pressure.
1:7fa86e8:  *
1:7fa86e8:  * @param <T> The type of the events produced by this source
1:7fa86e8:  */
1:7fa86e8: @ProviderType
1:7fa86e8: public interface SimplePushEventSource<T>
1:7fa86e8: 		extends PushEventSource<T>, AutoCloseable {
1:7fa86e8: 	/**
1:7fa86e8: 	 * Close this source. Calling this method indicates that there will never be
1:7fa86e8: 	 * any more events published by it. Calling this method sends a close event
1:7fa86e8: 	 * to all connected consumers. After calling this method any
1:7fa86e8: 	 * {@link PushEventConsumer} that tries to {@link #open(PushEventConsumer)}
1:7fa86e8: 	 * this source will immediately receive a close event.
1:7fa86e8: 	 */
1:7fa86e8: 	@Override
1:7fa86e8: 	void close();
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Asynchronously publish an event to this stream and all connected
1:7fa86e8: 	 * {@link PushEventConsumer} instances. When this method returns there is no
1:7fa86e8: 	 * guarantee that all consumers have been notified. Events published by a
1:7fa86e8: 	 * single thread will maintain their relative ordering, however they may be
1:7fa86e8: 	 * interleaved with events from other threads.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @param t
1:7fa86e8: 	 * @throws IllegalStateException if the source is closed
1:7fa86e8: 	 */
1:7fa86e8: 	void publish(T t);
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Close this source for now, but potentially reopen it later. Calling this
1:7fa86e8: 	 * method asynchronously sends a close event to all connected consumers.
1:7fa86e8: 	 * After calling this method any {@link PushEventConsumer} that wishes may
1:7fa86e8: 	 * {@link #open(PushEventConsumer)} this source, and will receive subsequent
1:7fa86e8: 	 * events.
1:7fa86e8: 	 */
1:7fa86e8: 	void endOfStream();
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Close this source for now, but potentially reopen it later. Calling this
1:7fa86e8: 	 * method asynchronously sends an error event to all connected consumers.
1:7fa86e8: 	 * After calling this method any {@link PushEventConsumer} that wishes may
1:7fa86e8: 	 * {@link #open(PushEventConsumer)} this source, and will receive subsequent
1:7fa86e8: 	 * events.
1:7fa86e8: 	 *
1:7fa86e8: 	 * @param e the error
1:7fa86e8: 	 */
1:7fa86e8: 	void error(Exception e);
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * Determine whether there are any {@link PushEventConsumer}s for this
1:7fa86e8: 	 * {@link PushEventSource}. This can be used to skip expensive event
1:7fa86e8: 	 * creation logic when there are no listeners.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @return true if any consumers are currently connected
1:7fa86e8: 	 */
1:7fa86e8: 	boolean isConnected();
1:7fa86e8: 
1:7fa86e8: 	/**
1:7fa86e8: 	 * This method can be used to delay event generation until an event source
1:7fa86e8: 	 * has connected. The returned promise will resolve as soon as one or more
1:7fa86e8: 	 * {@link PushEventConsumer} instances have opened the
1:7fa86e8: 	 * SimplePushEventSource.
1:7fa86e8: 	 * <p>
1:7fa86e8: 	 * The returned promise may already be resolved if this
1:7fa86e8: 	 * {@link SimplePushEventSource} already has connected consumers. If the
1:7fa86e8: 	 * {@link SimplePushEventSource} is closed before the returned Promise
1:7fa86e8: 	 * resolves then it will be failed with an {@link IllegalStateException}.
1:7fa86e8: 	 * <p>
1:7fa86e8: 	 * Note that the connected consumers are able to asynchronously close their
1:7fa86e8: 	 * connections to this {@link SimplePushEventSource}, and therefore it is
1:7fa86e8: 	 * possible that once the promise resolves this
1:7fa86e8: 	 * {@link SimplePushEventSource} may no longer be connected to any
1:7fa86e8: 	 * consumers.
1:7fa86e8: 	 * 
1:7fa86e8: 	 * @return A promise representing the connection state of this EventSource
1:7fa86e8: 	 */
1:7fa86e8: 	Promise<Void> connectPromise();
1:7fa86e8: 
1:7fa86e8: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7fa86e8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2015). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.osgi.util.pushstream;
1: 
1: import org.osgi.annotation.versioning.ProviderType;
1: import org.osgi.util.promise.Promise;
1: 
1: /**
1:  * A {@link SimplePushEventSource} is a helper that makes it simpler to write a
1:  * {@link PushEventSource}. Users do not need to manage multiple registrations
1:  * to the stream, nor do they have to be concerned with back pressure.
1:  *
1:  * @param <T> The type of the events produced by this source
1:  */
1: @ProviderType
1: public interface SimplePushEventSource<T>
1: 		extends PushEventSource<T>, AutoCloseable {
1: 	/**
1: 	 * Close this source. Calling this method indicates that there will never be
1: 	 * any more events published by it. Calling this method sends a close event
1: 	 * to all connected consumers. After calling this method any
1: 	 * {@link PushEventConsumer} that tries to {@link #open(PushEventConsumer)}
1: 	 * this source will immediately receive a close event.
1: 	 */
1: 	@Override
1: 	void close();
1: 
1: 	/**
1: 	 * Asynchronously publish an event to this stream and all connected
1: 	 * {@link PushEventConsumer} instances. When this method returns there is no
1: 	 * guarantee that all consumers have been notified. Events published by a
1: 	 * single thread will maintain their relative ordering, however they may be
1: 	 * interleaved with events from other threads.
1: 	 * 
1: 	 * @param t
1: 	 * @throws IllegalStateException if the source is closed
1: 	 */
1: 	void publish(T t);
1: 
1: 	/**
1: 	 * Close this source for now, but potentially reopen it later. Calling this
1: 	 * method asynchronously sends a close event to all connected consumers.
1: 	 * After calling this method any {@link PushEventConsumer} that wishes may
1: 	 * {@link #open(PushEventConsumer)} this source, and will receive subsequent
1: 	 * events.
1: 	 */
1: 	void endOfStream();
1: 
1: 	/**
1: 	 * Close this source for now, but potentially reopen it later. Calling this
1: 	 * method asynchronously sends an error event to all connected consumers.
1: 	 * After calling this method any {@link PushEventConsumer} that wishes may
1: 	 * {@link #open(PushEventConsumer)} this source, and will receive subsequent
1: 	 * events.
1: 	 *
1: 	 * @param e the error
1: 	 */
1: 	void error(Exception e);
1: 
1: 	/**
1: 	 * Determine whether there are any {@link PushEventConsumer}s for this
1: 	 * {@link PushEventSource}. This can be used to skip expensive event
1: 	 * creation logic when there are no listeners.
1: 	 * 
1: 	 * @return true if any consumers are currently connected
1: 	 */
1: 	boolean isConnected();
1: 
1: 	/**
1: 	 * This method can be used to delay event generation until an event source
1: 	 * has connected. The returned promise will resolve as soon as one or more
1: 	 * {@link PushEventConsumer} instances have opened the
1: 	 * SimplePushEventSource.
1: 	 * <p>
1: 	 * The returned promise may already be resolved if this
1: 	 * {@link SimplePushEventSource} already has connected consumers. If the
1: 	 * {@link SimplePushEventSource} is closed before the returned Promise
1: 	 * resolves then it will be failed with an {@link IllegalStateException}.
1: 	 * <p>
1: 	 * Note that the connected consumers are able to asynchronously close their
1: 	 * connections to this {@link SimplePushEventSource}, and therefore it is
1: 	 * possible that once the promise resolves this
1: 	 * {@link SimplePushEventSource} may no longer be connected to any
1: 	 * consumers.
1: 	 * 
1: 	 * @return A promise representing the connection state of this EventSource
1: 	 */
1: 	Promise<Void> connectPromise();
1: 
1: }
============================================================================