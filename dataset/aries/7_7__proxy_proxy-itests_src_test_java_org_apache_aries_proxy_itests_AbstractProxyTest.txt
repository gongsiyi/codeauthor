1:6461e4c: /*
1:6461e4c:  * Licensed to the Apache Software Foundation (ASF) under one
1:6461e4c:  * or more contributor license agreements.  See the NOTICE file
1:6461e4c:  * distributed with this work for additional information
1:6461e4c:  * regarding copyright ownership.  The ASF licenses this file
1:6461e4c:  * to you under the Apache License, Version 2.0 (the
1:6461e4c:  * "License"); you may not use this file except in compliance
1:6461e4c:  * with the License.  You may obtain a copy of the License at
1:6461e4c:  *
1:6461e4c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:6461e4c:  *
1:6461e4c:  * Unless required by applicable law or agreed to in writing,
1:6461e4c:  * software distributed under the License is distributed on an
1:6461e4c:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:6461e4c:  * KIND, either express or implied.  See the License for the
1:6461e4c:  * specific language governing permissions and limitations
1:6461e4c:  * under the License.
1:6461e4c:  */
1:96d4e06: package org.apache.aries.proxy.itests;
11:96d4e06: 
1:96d4e06: import static org.junit.Assert.assertEquals;
1:96d4e06: import static org.junit.Assert.assertFalse;
1:96d4e06: import static org.junit.Assert.assertTrue;
1:96d4e06: import static org.junit.Assert.fail;
1:ff49259: import static org.ops4j.pax.exam.CoreOptions.composite;
1:ff49259: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1:ff49259: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:ff49259: import static org.ops4j.pax.exam.CoreOptions.options;
1:ff49259: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:ff49259: import static org.ops4j.pax.exam.CoreOptions.when;
1:730e256: 
1:96d4e06: import java.lang.reflect.Method;
1:96d4e06: import java.util.AbstractList;
1:96d4e06: import java.util.ArrayList;
1:96d4e06: import java.util.Collection;
1:96d4e06: import java.util.List;
1:96d4e06: import java.util.concurrent.Callable;
1:96d4e06: 
1:ff49259: import javax.inject.Inject;
1:ff49259: 
1:86224ba: import org.apache.aries.itest.AbstractIntegrationTest;
1:96d4e06: import org.apache.aries.proxy.InvocationListener;
1:96d4e06: import org.apache.aries.proxy.ProxyManager;
1:96d4e06: import org.junit.Test;
1:ff49259: import org.junit.runner.RunWith;
1:ff49259: import org.ops4j.pax.exam.CoreOptions;
1:730e256: import org.ops4j.pax.exam.Option;
1:ff49259: import org.ops4j.pax.exam.junit.PaxExam;
1:ff49259: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:ff49259: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:96d4e06: import org.osgi.framework.Bundle;
1:96d4e06: 
1:ff49259: @RunWith(PaxExam.class)
1:ff49259: @ExamReactorStrategy(PerClass.class)
1:ff49259: public abstract class AbstractProxyTest extends AbstractIntegrationTest {
1:ff49259:   @Inject
1:ff49259:   ProxyManager mgr;
1:96d4e06: 
1:96d4e06:   public final static class TestCallable implements Callable<Object> {
1:96d4e06:     private Object list = new ArrayList<Object>();
1:96d4e06: 
1:96d4e06:     public Object call() throws Exception {
1:96d4e06:       return list;
8:96d4e06:     }
1:730e256:     
1:96d4e06:     public void setReturn(Object o) {
1:96d4e06:       list = o;
1:96d4e06:     }
1:96d4e06:   }
1:730e256:   
1:96d4e06:   public static class TestDelegate extends AbstractList<String> implements Callable<String> {
1:730e256:     
1:96d4e06:     private final String message;
1:2ab8aa5:  
1:2ab8aa5:     /**
1:2ab8aa5:      * On HotSpot VMs newer than 1.6 u33, we can only generate subclass proxies for classes
1:2ab8aa5:      * with a no-args constructor.
1:2ab8aa5:      */
1:2ab8aa5:     protected TestDelegate() {
1:2ab8aa5:         super();
1:2ab8aa5:         this.message = null;
1:2ab8aa5:       }
1:2ab8aa5: 
1:96d4e06:     public TestDelegate(String message) {
1:96d4e06:       super();
1:96d4e06:       this.message = message;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public String call() throws Exception {
1:96d4e06:       return message;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public boolean equals(Object o) {
1:96d4e06:       if(o instanceof TestDelegate){
1:96d4e06:         return message.equals(((TestDelegate)o).message);
1:96d4e06:       }
1:96d4e06:       return false;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public void throwException() {
1:96d4e06:       throw new RuntimeException();
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public void testInternallyCaughtException() {
1:96d4e06:       try {
1:96d4e06:         throw new RuntimeException();
1:96d4e06:       } catch (RuntimeException re) {
1:96d4e06:         // no op
1:96d4e06:       }
1:96d4e06:     }
1:96d4e06: 
1:96d4e06:     @Override
1:96d4e06:     public String get(int location) {
2:96d4e06:       return null;
1:96d4e06:     }
1:96d4e06: 
1:96d4e06:     @Override
1:96d4e06:     public int size() {
1:96d4e06:       return 0;
1:96d4e06:     }
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   private class TestListener implements InvocationListener {
1:96d4e06: 
1:96d4e06:     boolean preInvoke = false;
1:96d4e06:     boolean postInvoke = false;
1:96d4e06:     boolean postInvokeExceptionalReturn = false;
1:96d4e06:     Object token;
1:96d4e06:     
1:96d4e06:     public Object preInvoke(Object proxy, Method m, Object[] args)
1:96d4e06:         throws Throwable {
1:96d4e06:       preInvoke = true;
1:96d4e06:       token = new Object();
1:96d4e06:       return token;
1:96d4e06:     }
1:96d4e06: 
1:96d4e06:     public void postInvoke(Object token, Object proxy, Method m,
1:96d4e06:         Object returnValue) throws Throwable {
1:96d4e06:       postInvoke = this.token == token;
1:96d4e06:     }
1:96d4e06: 
1:96d4e06:     public void postInvokeExceptionalReturn(Object token, Object proxy,
1:96d4e06:         Method m, Throwable exception) throws Throwable {
1:96d4e06:       postInvokeExceptionalReturn = this.token == token;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     public void clear() {
1:96d4e06:       preInvoke = false;
1:96d4e06:       postInvoke = false;
1:96d4e06:       postInvokeExceptionalReturn = false;
1:96d4e06:       token = null;
1:96d4e06:     }
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   @Test
1:96d4e06:   public void testEquals() throws Exception {
1:ff49259:     Bundle b = bundleContext.getBundle();
1:96d4e06:     
1:96d4e06:     TestCallable c = new TestCallable();
1:96d4e06:     c.setReturn(new TestDelegate("One"));
1:96d4e06:     
1:96d4e06:     TestCallable c2 = new TestCallable();
1:96d4e06:     c.setReturn(new TestDelegate("Two"));
1:96d4e06:     
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:96d4e06:     classes.add(List.class);
1:96d4e06:     Object proxy = mgr.createDelegatingProxy(b, classes, c, new TestDelegate("Three"));
1:96d4e06:     Object otherProxy = mgr.createDelegatingProxy(b, classes, c, new TestDelegate("Four"));
1:96d4e06:     Object totallyOtherProxy = mgr.createDelegatingProxy(b, classes, c2, new TestDelegate("Five"));
1:96d4e06:     assertTrue("The object is not equal to itself", proxy.equals(proxy));
1:96d4e06:     assertTrue("The object is not equal to another proxy of itself", proxy.equals(otherProxy));
1:96d4e06:     assertFalse("The object is equal to proxy to another object", proxy.equals(totallyOtherProxy));
1:96d4e06:   }
1:96d4e06: 
1:96d4e06:   @Test
1:96d4e06:   public void testDelegation() throws Exception {
1:ff49259:     Bundle b = bundleContext.getBundle();
1:96d4e06:     
1:96d4e06:     TestCallable c = new TestCallable();
1:96d4e06:     
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:96d4e06:     classes.add(TestDelegate.class);
1:96d4e06:     
1:96d4e06:     TestDelegate proxy = (TestDelegate) mgr.createDelegatingProxy(b, classes, c, new TestDelegate(""));
1:96d4e06:     
1:96d4e06:     c.setReturn(new TestDelegate("Hello"));
1:96d4e06:     
1:96d4e06:     assertEquals("Wrong message", "Hello", proxy.call());
1:96d4e06:     
1:96d4e06:     c.setReturn(new TestDelegate("Hello again"));
1:96d4e06:     assertEquals("Wrong message", "Hello again", proxy.call());
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   @Test
1:96d4e06:   public void testInterception() throws Exception {
1:ff49259:     Bundle b = bundleContext.getBundle();
1:96d4e06:     
1:96d4e06:     TestDelegate td = new TestDelegate("Hello");
1:96d4e06:     
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:96d4e06:     classes.add(TestDelegate.class);
1:96d4e06:     
1:96d4e06:     TestListener tl = new TestListener();
1:96d4e06:     
1:96d4e06:     TestDelegate proxy = (TestDelegate) mgr.createInterceptingProxy(b, classes, td, tl);
1:96d4e06:     
1:96d4e06:     //We need to call clear here, because the object will have had its toString() called
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     assertEquals("Wrong message", "Hello", proxy.call());
1:96d4e06:     assertCalled(tl, true, true, false);
1:96d4e06:     
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     try {
1:96d4e06:       proxy.throwException();
1:96d4e06:       fail("Should throw an exception");
1:96d4e06:     } catch (RuntimeException re) {
1:96d4e06:       assertCalled(tl, true, false, true);
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     try {
1:96d4e06:       proxy.testInternallyCaughtException();
1:96d4e06:     } finally {
1:96d4e06:       assertCalled(tl, true, true, false);
1:96d4e06:     }
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   @Test
1:96d4e06:   public void testDelegationAndInterception() throws Exception {
1:ff49259:     Bundle b = bundleContext.getBundle();
1:96d4e06:     
1:96d4e06:     TestCallable c = new TestCallable();
1:96d4e06:     
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:96d4e06:     classes.add(TestDelegate.class);
1:96d4e06:     
1:96d4e06:     TestListener tl = new TestListener();
1:96d4e06:     
1:96d4e06:     TestDelegate proxy = (TestDelegate) mgr.createDelegatingInterceptingProxy(b, classes, c, new TestDelegate(""), tl);
1:96d4e06:     
1:96d4e06:     c.setReturn(new TestDelegate("Hello"));
1:96d4e06:     
1:96d4e06:     //We need to call clear here, because the object will have had its toString() called
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     assertEquals("Wrong message", "Hello", proxy.call());
1:96d4e06:     assertCalled(tl, true, true, false);
1:96d4e06:     
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     c.setReturn(new TestDelegate("Hello again"));
1:96d4e06:     
1:96d4e06:     assertEquals("Wrong message", "Hello again", proxy.call());
1:96d4e06:     assertCalled(tl, true, true, false);
1:96d4e06:     
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     try {
1:96d4e06:       proxy.throwException();
1:96d4e06:       fail("Should throw an exception");
1:96d4e06:     } catch (RuntimeException re) {
1:96d4e06:       assertCalled(tl, true, false, true);
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     tl.clear();
1:96d4e06:     assertCalled(tl, false, false, false);
1:96d4e06:     
1:96d4e06:     try {
1:96d4e06:       proxy.testInternallyCaughtException();
1:96d4e06:     } finally {
1:96d4e06:       assertCalled(tl, true, true, false);
1:96d4e06:     }
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   private void assertCalled(TestListener listener, boolean pre, boolean post, boolean ex) {
1:96d4e06:     assertEquals(pre, listener.preInvoke);
1:96d4e06:     assertEquals(post, listener.postInvoke);
1:96d4e06:     assertEquals(ex, listener.postInvokeExceptionalReturn);
1:730e256:   }
1:730e256:   
1:ff49259:   protected Option generalOptions() {
1:ff49259: 	  String localRepo = System.getProperty("maven.repo.local");
1:ff49259:       if (localRepo == null) {
1:ff49259:           localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:ff49259:       }
1:ff49259: 	  return composite(
1:ff49259: 			  junitBundles(),
1:ff49259:               systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:ff49259:               when(localRepo != null).useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1:ff49259: 	          mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
1:cfd1583: 	          mavenBundle("org.ow2.asm", "asm-debug-all").versionAsInProject(),
1:c5ce2a3: 	          mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:c5ce2a3:               mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:c5ce2a3:               mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
1:730e256: 	         /* vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1:730e256: 	          waitForFrameworkStartup(),*/
1:730e256: 	  );
1:730e256:   }
1:730e256: 
1:ff49259:   protected Option[] proxyBundles()
3:730e256:   {
1:ff49259: 	  return options(
1:ff49259: 			  generalOptions(),
1:ff49259: 	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api").versionAsInProject(),
1:ff49259: 	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl").versionAsInProject()
1:ff49259: 	  );
1:730e256:   }
1:730e256: 
1:ff49259:   protected Option[] proxyUberBundle()
1:730e256:   {
1:ff49259: 	  return options(
1:ff49259: 			  generalOptions(),
1:13b255e: 			  mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject()
1:ff49259: 	  );
1:730e256:   }
1:730e256: 
1:730e256: }
============================================================================
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:13b255e
/////////////////////////////////////////////////////////////////////////
1: 			  mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").versionAsInProject()
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:cfd1583
/////////////////////////////////////////////////////////////////////////
1: 	          mavenBundle("org.ow2.asm", "asm-debug-all").versionAsInProject(),
commit:c5ce2a3
/////////////////////////////////////////////////////////////////////////
1: 	          mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject(),
1:               mavenBundle("org.ops4j.pax.logging", "pax-logging-api").versionAsInProject(),
1:               mavenBundle("org.ops4j.pax.logging", "pax-logging-service").versionAsInProject()
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:ff49259
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.CoreOptions.junitBundles;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.options;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: import static org.ops4j.pax.exam.CoreOptions.when;
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
1: 
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public abstract class AbstractProxyTest extends AbstractIntegrationTest {
1:   @Inject
1:   ProxyManager mgr;
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
/////////////////////////////////////////////////////////////////////////
1:   protected Option generalOptions() {
1: 	  String localRepo = System.getProperty("maven.repo.local");
1:       if (localRepo == null) {
1:           localRepo = System.getProperty("org.ops4j.pax.url.mvn.localRepository");
1:       }
1: 	  return composite(
1: 			  junitBundles(),
1:               systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("INFO"),
1:               when(localRepo != null).useOptions(CoreOptions.vmOption("-Dorg.ops4j.pax.url.mvn.localRepository=" + localRepo)),
1: 	          mavenBundle("org.apache.aries", "org.apache.aries.util").versionAsInProject(),
0: 	          mavenBundle("org.ow2.asm", "asm-all").versionAsInProject(),
0: 	          mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit").versionAsInProject()
1:   protected Option[] proxyBundles()
1: 	  return options(
1: 			  generalOptions(),
1: 	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api").versionAsInProject(),
1: 	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl").versionAsInProject()
1: 	  );
1:   protected Option[] proxyUberBundle()
1: 	  return options(
1: 			  generalOptions(),
0: 			  mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy").version("1.0.2-SNAPSHOT")
1: 	  );
commit:051eadf
/////////////////////////////////////////////////////////////////////////
0: 	          equinox().version("3.7.0")
author:Holly Cummins
-------------------------------------------------------------------------------
commit:2ab8aa5
/////////////////////////////////////////////////////////////////////////
1:  
1:     /**
1:      * On HotSpot VMs newer than 1.6 u33, we can only generate subclass proxies for classes
1:      * with a no-args constructor.
1:      */
1:     protected TestDelegate() {
1:         super();
1:         this.message = null;
1:       }
1: 
commit:730e256
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.flatOptions;
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
/////////////////////////////////////////////////////////////////////////
1:   
0:   protected static Option[] generalOptions() {
0: 	  return  flatOptions(paxLogging("DEBUG"),
1: 
0: 	          // Bundles
0: 	          mavenBundle("org.apache.aries", "org.apache.aries.util"),
0: 	          mavenBundle("org.ow2.asm", "asm-all"),
0: 	          // don't install the blueprint sample here as it will be installed onto the same framework as the blueprint core bundle
0: 	          // mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
0: 	          mavenBundle("org.osgi", "org.osgi.compendium")
1: 	         /* vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
1: 	          waitForFrameworkStartup(),*/
1: 	  );
1: 
1:   }
1: 
0:   protected static Option[] proxyBundles()
1:   {
0: 	  return new Option[] {          
0: 	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api"),
0: 	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl"),
0: 	  };
1:   }
1: 
0:   protected static Option[] proxyUberBundle()
1:   {
0: 	  return new Option[] {          
0: 	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0: 	  };
1:   }
1: 
0:   protected static Option[] equinox35()
1:   {
0: 	  return new Option[] {          
0: 	          equinox().version("3.5.0")
0: 	  };
1:   }
1:   
0:   protected static Option[] equinox37()
1:   {
0: 	  return new Option[] {          
0: 			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
0: 	          equinox().version("3.7.0.v20110613")
0: 	  };
1:   }
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:6461e4c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.itest.AbstractIntegrationTest;
0: public class AbstractProxyTest extends AbstractIntegrationTest {
/////////////////////////////////////////////////////////////////////////
0:     ProxyManager mgr = context().getService(ProxyManager.class);
/////////////////////////////////////////////////////////////////////////
0:     ProxyManager mgr = context().getService(ProxyManager.class);
/////////////////////////////////////////////////////////////////////////
0:     ProxyManager mgr = context().getService(ProxyManager.class);
/////////////////////////////////////////////////////////////////////////
0:     ProxyManager mgr = context().getService(ProxyManager.class);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.proxy.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
0: import static org.ops4j.pax.exam.OptionUtils.combine;
1: 
1: import java.lang.reflect.Method;
1: import java.util.AbstractList;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.aries.proxy.InvocationListener;
1: import org.apache.aries.proxy.ProxyManager;
1: import org.junit.Test;
0: import org.ops4j.pax.exam.CoreOptions;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.framework.ServiceReference;
1: 
0: public class AbstractProxyTest {
1: 
1:   public final static class TestCallable implements Callable<Object> {
1:     private Object list = new ArrayList<Object>();
1: 
1:     public Object call() throws Exception {
1:       return list;
1:     }
1:     
1:     public void setReturn(Object o) {
1:       list = o;
1:     }
1:   }
1:   
1:   public static class TestDelegate extends AbstractList<String> implements Callable<String> {
1:     
1:     private final String message;
1:     
1:     public TestDelegate(String message) {
1:       super();
1:       this.message = message;
1:     }
1:     
1:     public String call() throws Exception {
1:       return message;
1:     }
1:     
1:     public boolean equals(Object o) {
1:       if(o instanceof TestDelegate){
1:         return message.equals(((TestDelegate)o).message);
1:       }
1:       return false;
1:     }
1:     
1:     public void throwException() {
1:       throw new RuntimeException();
1:     }
1:     
1:     public void testInternallyCaughtException() {
1:       try {
1:         throw new RuntimeException();
1:       } catch (RuntimeException re) {
1:         // no op
1:       }
1:     }
1: 
1:     @Override
1:     public String get(int location) {
1:       return null;
1:     }
1: 
1:     @Override
1:     public int size() {
1:       return 0;
1:     }
1:   }
1:   
1:   private class TestListener implements InvocationListener {
1: 
1:     boolean preInvoke = false;
1:     boolean postInvoke = false;
1:     boolean postInvokeExceptionalReturn = false;
1:     Object token;
1:     
1:     public Object preInvoke(Object proxy, Method m, Object[] args)
1:         throws Throwable {
1:       preInvoke = true;
1:       token = new Object();
1:       return token;
1:     }
1: 
1:     public void postInvoke(Object token, Object proxy, Method m,
1:         Object returnValue) throws Throwable {
1:       postInvoke = this.token == token;
1:     }
1: 
1:     public void postInvokeExceptionalReturn(Object token, Object proxy,
1:         Method m, Throwable exception) throws Throwable {
1:       postInvokeExceptionalReturn = this.token == token;
1:     }
1:     
1:     public void clear() {
1:       preInvoke = false;
1:       postInvoke = false;
1:       postInvokeExceptionalReturn = false;
1:       token = null;
1:     }
1:   }
1: 
0:   public static MavenArtifactProvisionOption mavenBundle(String groupId, String artifactId) {
0:     return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();
1:   }
1: 
0:   protected static Option[] updateOptions(Option[] options) {
0:     // We need to add pax-exam-junit here when running with the ibm
0:     // jdk to avoid the following exception during the test run:
0:     // ClassNotFoundException: org.ops4j.pax.exam.junit.Configuration
0:     if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
0:       Option[] ibmOptions = options(
0:         wrappedBundle(mavenBundle("org.ops4j.pax.exam", "pax-exam-junit"))
0:       );
0:       options = combine(ibmOptions, options);
1:     }
1:   
0:       return options;
1:   }
1: 
0:   protected <T> T getService(Class<T> clazz) {
0:     BundleContext ctx = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
0:     ServiceReference ref = ctx.getServiceReference(ProxyManager.class.getName());
0:     if (ref != null) {
0:       return clazz.cast(ctx.getService(ref));
1:     }
1:     return null;
1:   }
1: 
0:   @SuppressWarnings("unchecked")
1:   @Test
1:   public void testEquals() throws Exception {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     
1:     TestCallable c = new TestCallable();
1:     c.setReturn(new TestDelegate("One"));
1:     
1:     TestCallable c2 = new TestCallable();
1:     c.setReturn(new TestDelegate("Two"));
1:     
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:     classes.add(List.class);
1:     Object proxy = mgr.createDelegatingProxy(b, classes, c, new TestDelegate("Three"));
1:     Object otherProxy = mgr.createDelegatingProxy(b, classes, c, new TestDelegate("Four"));
1:     Object totallyOtherProxy = mgr.createDelegatingProxy(b, classes, c2, new TestDelegate("Five"));
1:     assertTrue("The object is not equal to itself", proxy.equals(proxy));
1:     assertTrue("The object is not equal to another proxy of itself", proxy.equals(otherProxy));
1:     assertFalse("The object is equal to proxy to another object", proxy.equals(totallyOtherProxy));
1:   }
1: 
1:   @Test
1:   public void testDelegation() throws Exception {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     
1:     TestCallable c = new TestCallable();
1:     
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:     classes.add(TestDelegate.class);
1:     
1:     TestDelegate proxy = (TestDelegate) mgr.createDelegatingProxy(b, classes, c, new TestDelegate(""));
1:     
1:     c.setReturn(new TestDelegate("Hello"));
1:     
1:     assertEquals("Wrong message", "Hello", proxy.call());
1:     
1:     c.setReturn(new TestDelegate("Hello again"));
1:     assertEquals("Wrong message", "Hello again", proxy.call());
1:   }
1:   
1:   @Test
1:   public void testInterception() throws Exception {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     
1:     TestDelegate td = new TestDelegate("Hello");
1:     
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:     classes.add(TestDelegate.class);
1:     
1:     TestListener tl = new TestListener();
1:     
1:     TestDelegate proxy = (TestDelegate) mgr.createInterceptingProxy(b, classes, td, tl);
1:     
1:     //We need to call clear here, because the object will have had its toString() called
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     assertEquals("Wrong message", "Hello", proxy.call());
1:     assertCalled(tl, true, true, false);
1:     
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     try {
1:       proxy.throwException();
1:       fail("Should throw an exception");
1:     } catch (RuntimeException re) {
1:       assertCalled(tl, true, false, true);
1:     }
1:     
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     try {
1:       proxy.testInternallyCaughtException();
1:     } finally {
1:       assertCalled(tl, true, true, false);
1:     }
1:   }
1:   
1:   @Test
1:   public void testDelegationAndInterception() throws Exception {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     
1:     
1:     TestCallable c = new TestCallable();
1:     
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:     classes.add(TestDelegate.class);
1:     
1:     TestListener tl = new TestListener();
1:     
1:     TestDelegate proxy = (TestDelegate) mgr.createDelegatingInterceptingProxy(b, classes, c, new TestDelegate(""), tl);
1:     
1:     c.setReturn(new TestDelegate("Hello"));
1:     
1:     //We need to call clear here, because the object will have had its toString() called
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     assertEquals("Wrong message", "Hello", proxy.call());
1:     assertCalled(tl, true, true, false);
1:     
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     c.setReturn(new TestDelegate("Hello again"));
1:     
1:     assertEquals("Wrong message", "Hello again", proxy.call());
1:     assertCalled(tl, true, true, false);
1:     
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     try {
1:       proxy.throwException();
1:       fail("Should throw an exception");
1:     } catch (RuntimeException re) {
1:       assertCalled(tl, true, false, true);
1:     }
1:     
1:     tl.clear();
1:     assertCalled(tl, false, false, false);
1:     
1:     try {
1:       proxy.testInternallyCaughtException();
1:     } finally {
1:       assertCalled(tl, true, true, false);
1:     }
1:   }
1:   
1:   private void assertCalled(TestListener listener, boolean pre, boolean post, boolean ex) {
1:     assertEquals(pre, listener.preInvoke);
1:     assertEquals(post, listener.postInvoke);
1:     assertEquals(ex, listener.postInvokeExceptionalReturn);
1:   }
1: }
============================================================================