1:96f3261: package org.apache.aries.subsystem.ctt.itests;
6:96f3261: 
1:96f3261: import static org.junit.Assert.assertEquals;
1:96f3261: import static org.junit.Assert.assertNotNull;
1:dbcd0ed: import static org.junit.Assert.assertTrue;
1:abf906b: import static org.junit.Assert.fail;
1:96f3261: import static org.osgi.framework.namespace.BundleNamespace.BUNDLE_NAMESPACE;
1:96f3261: import static org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE;
1:96f3261: 
1:abf906b: import java.util.HashSet;
1:96f3261: import java.util.List;
1:abf906b: import java.util.Set;
1:96f3261: 
1:57b6627: import org.apache.aries.subsystem.itests.Header;
1:96f3261: import org.apache.aries.subsystem.itests.SubsystemTest;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:57b6627: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:96f3261: import org.osgi.framework.Bundle;
1:dbcd0ed: import org.osgi.framework.BundleContext;
1:96f3261: import org.osgi.framework.Constants;
1:96f3261: import org.osgi.framework.wiring.BundleWire;
1:96f3261: import org.osgi.framework.wiring.BundleWiring;
1:96f3261: import org.osgi.service.subsystem.Subsystem;
1:96f3261: 
2:96f3261: /*
1:96f3261:  * A set of tests to cover OSGi Subsystems CTT section 4, "Subsystem Dependency Tests"
1:96f3261:  * This is going to look a bit like ProvisionPolicyTest with a bit of 
1:96f3261:  * DependencyLifecycle thrown in. 
4:96f3261:  * 
1:96f3261:  * 	- The following bundles are used for the tests
1:96f3261: 	- Bundle A that export package x
1:96f3261: 	- Bundle B that provides capability y
1:96f3261: 	- Bundle C that imports package x
1:96f3261: 	- Bundle D that requires bundle A
1:96f3261: 	- Bundle E that requires capability y
1:96f3261: 	- Bundle F that export package x
1:96f3261: 	- Bundle G that provides capability y
1:96f3261: 	- The following repositories are defined
1:96f3261: 	- Repository R1
1:96f3261: 	  - Bundle A
1:96f3261: 	  - Bundle B
1:96f3261: 	  - Bundle C
1:96f3261: 	  - Bundle D
1:96f3261: 	  - Bundle E
1:96f3261: 	  - Bundle F
1:96f3261: 	  - Bundle G
1:96f3261: 	- Repository R2
1:96f3261: 	  - Bundle A
1:96f3261: 	  - Bundle B
1:96f3261: 	  - Bundle C
1:96f3261: 	  - Bundle D
1:96f3261: 	  - Bundle E
2:96f3261:  */
1:96f3261: 
1:57b6627: @ExamReactorStrategy(PerMethod.class)
1:96f3261: public abstract class SubsystemDependencyTestBase extends SubsystemTest 
5:96f3261: {
1:96f3261: 	protected static String BUNDLE_A = "sdt_bundle.a.jar";
1:96f3261: 	protected static String BUNDLE_B = "sdt_bundle.b.jar";
1:96f3261: 	protected static String BUNDLE_C = "sdt_bundle.c.jar";
1:96f3261: 	protected static String BUNDLE_D = "sdt_bundle.d.jar";
1:96f3261: 	protected static String BUNDLE_E = "sdt_bundle.e.jar";
1:96f3261: 	protected static String BUNDLE_F = "sdt_bundle.f.jar";
1:96f3261: 	protected static String BUNDLE_G = "sdt_bundle.g.jar";
1:3e9adfe: 
1:57b6627: 	@Override
1:57b6627: 	protected void createApplications() throws Exception {
1:3e9adfe: 		// We'd like to do this in an @BeforeClass method, but files written in @BeforeClass
1:3e9adfe: 		// go into the project's target/ directory whereas those written in @Before go into 
1:3e9adfe: 		// paxexam's temp directory, which is where they're needed. 
1:57b6627: 		createBundleA();
1:57b6627: 		createBundleB();
1:57b6627: 		createBundleC();
1:57b6627: 		createBundleD();
1:57b6627: 		createBundleE();
1:57b6627: 		createBundleF();
1:57b6627: 		createBundleG();
1:3e9adfe: 	}
1:96f3261: 	
1:57b6627: 	private void createBundleA() throws Exception
1:96f3261: 	{ 
1:57b6627: 		createBundle(name(BUNDLE_A), version("1.0.0"), exportPackage("x"));
7:96f3261: 	}
1:96f3261: 	
1:57b6627: 	private void createBundleB() throws Exception
1:96f3261: 	{
1:57b6627: 		// TODO: see comment below about bug=true
1:57b6627: 		createBundle(name(BUNDLE_B), version("1.0.0"), new Header(Constants.PROVIDE_CAPABILITY, "y;y=randomNamespace"));
1:96f3261: 	}
1:96f3261: 	
1:57b6627: 	private void createBundleC() throws Exception
1:96f3261: 	{
1:57b6627: 		createBundle(name(BUNDLE_C), version("1.0.0"), importPackage("x"));
1:96f3261: 	}
1:96f3261: 	
1:57b6627: 	private void createBundleD() throws Exception
1:96f3261: 	{
1:57b6627: 		createBundle(name(BUNDLE_D), version("1.0.0"), requireBundle(BUNDLE_A));
1:96f3261: 	}
1:96f3261: 
1:57b6627: 	// TODO:
1:57b6627: 	/*
1:57b6627: 	 * According to the OSGi Core Release 5 spec section 3.3.6 page 35, 
1:57b6627: 	 *   "A filter is optional, if no filter directive is specified the requirement always matches."
1:57b6627: 	 *  
1:57b6627: 	 * If omitted, we first get an NPE in DependencyCalculator.MissingCapability.initializeAttributes(). 
1:57b6627: 	 * If that's fixed, we get exceptions of the form, 
1:57b6627: 	 * 
1:57b6627: 	 *  Caused by: java.lang.IllegalArgumentException: The filter must not be null.
1:57b6627: 	 *    at org.eclipse.equinox.internal.region.StandardRegionFilterBuilder.allow(StandardRegionFilterBuilder.java:49)
1:57b6627: 	 *    at org.apache.aries.subsystem.core.internal.SubsystemResource.setImportIsolationPolicy(SubsystemResource.java:655)
1:57b6627:      * 
1:57b6627:      * This looks to be an Equinox defect - at least in the level of 3.8.0 currently being used by these tests. 
1:57b6627: 	 */
1:57b6627: 	private void createBundleE() throws Exception 
1:96f3261: 	{
1:57b6627: 		createBundle(name(BUNDLE_E), version("1.0.0"), new Header(Constants.REQUIRE_CAPABILITY, "y"));
1:57b6627: 	}
1:57b6627: 
1:57b6627: 	private void createBundleF() throws Exception 
1:57b6627: 	{
1:57b6627: 		createBundle(name(BUNDLE_F), version("1.0.0"), exportPackage("x"));
1:96f3261: 	}
1:96f3261: 	
1:57b6627: 	// TODO: see comment above about bug=true
1:57b6627: 	private void createBundleG() throws Exception 
1:96f3261: 	{
1:57b6627: 		createBundle(name(BUNDLE_G), version("1.0.0"), new Header(Constants.PROVIDE_CAPABILITY, "y;y=randomNamespace"));
1:96f3261: 	}
1:96f3261: 	
1:96f3261: 	protected void registerRepositoryR1() throws Exception
1:96f3261: 	{ 
1:96f3261: 		registerRepositoryService(BUNDLE_A, BUNDLE_B, 
1:96f3261: 				BUNDLE_C, BUNDLE_D, BUNDLE_E, BUNDLE_F, BUNDLE_G);
1:96f3261: 	}
1:96f3261: 	
1:96f3261: 	protected void registerRepositoryR2() throws Exception
1:96f3261: 	{
1:96f3261: 		registerRepositoryService(BUNDLE_A, BUNDLE_B, 
1:96f3261: 				BUNDLE_C, BUNDLE_D, BUNDLE_E);
1:96f3261: 	}
1:96f3261: 	
1:35a1b63: 	/**
1:35a1b63: 	 *  - Verify that bundles C, D and E in subsystem s wire to A->x, A, B->y respectively
1:35a1b63: 	 */
1:35a1b63: 	protected void checkBundlesCDandEWiredToAandB (Subsystem s) 
1:35a1b63: 	{
1:35a1b63: 		verifySinglePackageWiring (s, BUNDLE_C, "x", BUNDLE_A);
1:35a1b63: 		verifyRequireBundleWiring (s, BUNDLE_D, BUNDLE_A);
1:35a1b63: 		verifyCapabilityWiring (s, BUNDLE_E, "y", BUNDLE_B);
1:35a1b63: 	}
1:96f3261: 
1:96f3261: 	/**
1:96f3261: 	 * Check that wiredBundleName in subsystem s is wired to a single package, 
1:96f3261: 	 * expectedPackage, from expectedProvidingBundle
1:96f3261: 	 * @param s
1:96f3261: 	 * @param wiredBundleName
1:96f3261: 	 * @param expectedPackage
1:96f3261: 	 * @param expectedProvidingBundle
1:96f3261: 	 */
1:96f3261: 	protected void verifySinglePackageWiring (Subsystem s, String wiredBundleName, String expectedPackage, String expectedProvidingBundle)
1:96f3261: 	{
1:57b6627: 		Bundle wiredBundle = context(s).getBundleByName(wiredBundleName);
1:96f3261: 		assertNotNull ("Bundle not found", wiredBundleName);
1:96f3261: 
1:11d09f4: 		BundleWiring wiring = (BundleWiring) wiredBundle.adapt(BundleWiring.class);
1:96f3261: 		List<BundleWire> wiredPackages = wiring.getRequiredWires(PACKAGE_NAMESPACE);
1:96f3261: 		assertEquals ("Only one package expected", 1, wiredPackages.size());
1:96f3261: 		
1:96f3261: 		String packageName = (String) 
1:96f3261: 			wiredPackages.get(0).getCapability().getAttributes().get(PACKAGE_NAMESPACE);
1:96f3261: 		assertEquals ("Wrong package found", expectedPackage, packageName);
1:96f3261: 		
1:96f3261: 		String providingBundle = wiredPackages.get(0).getProvider().getSymbolicName();
1:96f3261: 		assertEquals ("Package provided by wrong bundle", expectedProvidingBundle, providingBundle);
1:96f3261: 	}
1:96f3261: 	
1:96f3261: 	/**
1:96f3261: 	 * Verify that the Require-Bundle of wiredBundleName in subsystem s is met by a wire
1:96f3261: 	 * to expectedProvidingBundleName
1:96f3261: 	 * @param s
1:96f3261: 	 * @param wiredBundleName
1:96f3261: 	 * @param expectedProvidingBundleName
1:96f3261: 	 */
1:96f3261: 	protected void verifyRequireBundleWiring (Subsystem s, String wiredBundleName, String expectedProvidingBundleName)
1:96f3261: 	{
1:57b6627: 		Bundle wiredBundle = context(s).getBundleByName(BUNDLE_D);
1:96f3261: 		assertNotNull ("Target bundle " + wiredBundleName + " not found", wiredBundle);
1:96f3261: 	
1:11d09f4: 		BundleWiring wiring = (BundleWiring) wiredBundle.adapt(BundleWiring.class);
1:96f3261: 		List<BundleWire> wiredBundles = wiring.getRequiredWires(BUNDLE_NAMESPACE);
1:96f3261: 		assertEquals ("Only one bundle expected", 1, wiredBundles.size());
1:96f3261: 	
1:96f3261: 		String requiredBundleName = (String)
1:96f3261: 			wiredBundles.get(0).getCapability().getAttributes().get(BUNDLE_NAMESPACE);
1:96f3261: 		assertEquals ("Wrong bundle requirement", BUNDLE_A, requiredBundleName);
1:96f3261: 	
1:96f3261: 		String providingBundle = wiredBundles.get(0).getProvider().getSymbolicName();
1:96f3261: 		assertEquals ("Wrong bundle provider", expectedProvidingBundleName, providingBundle);
1:dbcd0ed: 	}
1:96f3261: 	
1:dbcd0ed: 	/**
1:96f3261: 	 * Verify that a bundle with wiredBundleName imports a single capability in namespace
1:96f3261: 	 * from expectedProvidingBundleName
1:96f3261: 	 * @param s
1:96f3261: 	 * @param wiredBundleName
1:96f3261: 	 * @param namespace
1:96f3261: 	 * @param expectedProvidingBundleName
1:96f3261: 	 */
1:96f3261: 	protected void verifyCapabilityWiring (Subsystem s, String wiredBundleName, 
1:96f3261: 			String namespace, String expectedProvidingBundleName)
1:96f3261: 	{
1:57b6627: 		Bundle wiredBundle = context(s).getBundleByName(wiredBundleName);
1:96f3261: 		assertNotNull ("Targt bundle " + wiredBundleName + " not found", wiredBundleName);
1:96f3261: 		
1:11d09f4: 		BundleWiring wiring = (BundleWiring) wiredBundle.adapt(BundleWiring.class);
1:96f3261: 		List<BundleWire> wiredProviders = wiring.getRequiredWires(namespace);
1:96f3261: 		assertEquals("Only one wire for capability namespace " + namespace +" expected", 
1:96f3261: 				1, wiredProviders.size());
1:96f3261: 		
1:96f3261: 		String capabilityNamespace = (String)
1:96f3261: 			wiredProviders.get(0).getCapability().getNamespace();
1:96f3261: 		assertEquals ("Wrong namespace", namespace, capabilityNamespace);
1:96f3261: 		
1:96f3261: 		String providingBundle = wiredProviders.get(0).getProvider().getSymbolicName();
1:96f3261: 		assertEquals ("Wrong bundle provider", expectedProvidingBundleName, providingBundle);
1:96f3261: 	}
1:96f3261: 
1:96f3261: 	/**
1:dbcd0ed: 	 * Verify that bundles with names bundleNames are installed into the subsystem with subsystemName
1:dbcd0ed: 	 * and bundle context bc
1:dbcd0ed: 	 * @param bc
1:dbcd0ed: 	 * @param subsystemName
1:dbcd0ed: 	 * @param bundleNames
1:dbcd0ed: 	 */
1:dbcd0ed: 	protected void verifyBundlesInstalled (BundleContext bc, String subsystemName, String ... bundleNames)
1:dbcd0ed: 	{
1:dbcd0ed: 		for (String bundleName: bundleNames) {
1:dbcd0ed: 			boolean bundleFound = false;
1:dbcd0ed: 			inner: for (Bundle b: bc.getBundles()) { 
1:dbcd0ed: 				if (b.getSymbolicName().equals(bundleName)) { 
1:dbcd0ed: 					bundleFound = true;
1:dbcd0ed: 					break inner;
1:dbcd0ed: 				}
1:dbcd0ed: 			}
1:35a1b63: 			assertTrue ("Bundle " + bundleName + " not found in subsystem " + subsystemName, bundleFound);
1:abf906b: 		}
1:dbcd0ed: 	}
1:abf906b: 	
1:abf906b: 	/**
1:abf906b: 	 * Check that no new bundles have been provisioned by [x]
1:abf906b: 	 * @param failText where the failure occurred
1:abf906b: 	 * @param rootBundlesBefore Bundles before [x]
1:abf906b: 	 * @param rootBundlesAfter Bundles after [x]
1:abf906b: 	 */
1:abf906b: 	protected void checkNoNewBundles(String failText, Bundle[] rootBundlesBefore, Bundle[] rootBundlesAfter) {
1:8efb411: 		Set<String> bundlesBefore = new HashSet<String>();
1:8efb411: 		for (Bundle b : rootBundlesBefore) { 
1:8efb411: 			bundlesBefore.add(b.getSymbolicName() + "_" + b.getVersion().toString());
1:8efb411: 		}
1:8efb411: 		
1:8efb411: 		Set<String> bundlesAfter = new HashSet<String>();
1:8efb411: 		for (Bundle b : rootBundlesAfter) { 
1:8efb411: 			bundlesAfter.add(b.getSymbolicName() + "_" + b.getVersion().toString());
1:8efb411: 		}
1:8efb411: 		
1:8efb411: 		boolean unchanged = bundlesBefore.containsAll(bundlesAfter) && 
1:8efb411: 			bundlesAfter.containsAll(bundlesBefore);
1:8efb411: 		
1:8efb411: 		if (!unchanged) { 
1:abf906b: 			bundlesAfter.removeAll(bundlesBefore);
1:abf906b: 			fail ("Extra bundles provisioned in " + failText + " : " + bundlesAfter);
1:abf906b: 		}
1:abf906b: 	}
1:abf906b: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:11d09f4
/////////////////////////////////////////////////////////////////////////
1: 		BundleWiring wiring = (BundleWiring) wiredBundle.adapt(BundleWiring.class);
/////////////////////////////////////////////////////////////////////////
1: 		BundleWiring wiring = (BundleWiring) wiredBundle.adapt(BundleWiring.class);
/////////////////////////////////////////////////////////////////////////
1: 		BundleWiring wiring = (BundleWiring) wiredBundle.adapt(BundleWiring.class);
author:Christian Schneider
-------------------------------------------------------------------------------
commit:57b6627
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.subsystem.itests.Header;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
/////////////////////////////////////////////////////////////////////////
1: @ExamReactorStrategy(PerMethod.class)
/////////////////////////////////////////////////////////////////////////
1: 	@Override
1: 	protected void createApplications() throws Exception {
1: 		createBundleA();
1: 		createBundleB();
1: 		createBundleC();
1: 		createBundleD();
1: 		createBundleE();
1: 		createBundleF();
1: 		createBundleG();
1: 	private void createBundleA() throws Exception
1: 		createBundle(name(BUNDLE_A), version("1.0.0"), exportPackage("x"));
1: 	private void createBundleB() throws Exception
1: 		// TODO: see comment below about bug=true
1: 		createBundle(name(BUNDLE_B), version("1.0.0"), new Header(Constants.PROVIDE_CAPABILITY, "y;y=randomNamespace"));
1: 	private void createBundleC() throws Exception
1: 		createBundle(name(BUNDLE_C), version("1.0.0"), importPackage("x"));
1: 	private void createBundleD() throws Exception
1: 		createBundle(name(BUNDLE_D), version("1.0.0"), requireBundle(BUNDLE_A));
1: 	// TODO:
1: 	/*
1: 	 * According to the OSGi Core Release 5 spec section 3.3.6 page 35, 
1: 	 *   "A filter is optional, if no filter directive is specified the requirement always matches."
1: 	 *  
1: 	 * If omitted, we first get an NPE in DependencyCalculator.MissingCapability.initializeAttributes(). 
1: 	 * If that's fixed, we get exceptions of the form, 
1: 	 * 
1: 	 *  Caused by: java.lang.IllegalArgumentException: The filter must not be null.
1: 	 *    at org.eclipse.equinox.internal.region.StandardRegionFilterBuilder.allow(StandardRegionFilterBuilder.java:49)
1: 	 *    at org.apache.aries.subsystem.core.internal.SubsystemResource.setImportIsolationPolicy(SubsystemResource.java:655)
1:      * 
1:      * This looks to be an Equinox defect - at least in the level of 3.8.0 currently being used by these tests. 
1: 	 */
1: 	private void createBundleE() throws Exception 
1: 		createBundle(name(BUNDLE_E), version("1.0.0"), new Header(Constants.REQUIRE_CAPABILITY, "y"));
1: 	}
1: 
1: 	private void createBundleF() throws Exception 
1: 	{
1: 		createBundle(name(BUNDLE_F), version("1.0.0"), exportPackage("x"));
1: 	// TODO: see comment above about bug=true
1: 	private void createBundleG() throws Exception 
1: 		createBundle(name(BUNDLE_G), version("1.0.0"), new Header(Constants.PROVIDE_CAPABILITY, "y;y=randomNamespace"));
/////////////////////////////////////////////////////////////////////////
1: 		Bundle wiredBundle = context(s).getBundleByName(wiredBundleName);
/////////////////////////////////////////////////////////////////////////
1: 		Bundle wiredBundle = context(s).getBundleByName(BUNDLE_D);
/////////////////////////////////////////////////////////////////////////
1: 		Bundle wiredBundle = context(s).getBundleByName(wiredBundleName);
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:95d5f02
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
/////////////////////////////////////////////////////////////////////////
0: @RunWith(MavenConfiguredJUnit4TestRunner.class)
commit:8efb411
/////////////////////////////////////////////////////////////////////////
1: 		Set<String> bundlesBefore = new HashSet<String>();
1: 		for (Bundle b : rootBundlesBefore) { 
1: 			bundlesBefore.add(b.getSymbolicName() + "_" + b.getVersion().toString());
1: 		}
1: 		
1: 		Set<String> bundlesAfter = new HashSet<String>();
1: 		for (Bundle b : rootBundlesAfter) { 
1: 			bundlesAfter.add(b.getSymbolicName() + "_" + b.getVersion().toString());
1: 		}
1: 		
1: 		boolean unchanged = bundlesBefore.containsAll(bundlesAfter) && 
1: 			bundlesAfter.containsAll(bundlesBefore);
1: 		
1: 		if (!unchanged) { 
commit:abf906b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	/**
1: 	 * Check that no new bundles have been provisioned by [x]
1: 	 * @param failText where the failure occurred
1: 	 * @param rootBundlesBefore Bundles before [x]
1: 	 * @param rootBundlesAfter Bundles after [x]
1: 	 */
1: 	protected void checkNoNewBundles(String failText, Bundle[] rootBundlesBefore, Bundle[] rootBundlesAfter) {
0: 		if (rootBundlesBefore.length != rootBundlesAfter.length) { 
0: 			Set<String> bundlesBefore = new HashSet<String>();
0: 			for (Bundle b : rootBundlesBefore) { 
0: 				bundlesBefore.add(b.getSymbolicName() + "_" + b.getVersion().toString());
1: 			}
0: 			Set<String> bundlesAfter = new HashSet<String>();
0: 			for (Bundle b : rootBundlesAfter) { 
0: 				bundlesAfter.add(b.getSymbolicName() + "_" + b.getVersion().toString());
1: 			}
1: 			bundlesAfter.removeAll(bundlesBefore);
1: 			fail ("Extra bundles provisioned in " + failText + " : " + bundlesAfter);
1: 		}
1: 	}
commit:35a1b63
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 *  - Verify that bundles C, D and E in subsystem s wire to A->x, A, B->y respectively
1: 	 */
1: 	protected void checkBundlesCDandEWiredToAandB (Subsystem s) 
1: 	{
1: 		verifySinglePackageWiring (s, BUNDLE_C, "x", BUNDLE_A);
1: 		verifyRequireBundleWiring (s, BUNDLE_D, BUNDLE_A);
1: 		verifyCapabilityWiring (s, BUNDLE_E, "y", BUNDLE_B);
1: 	}
/////////////////////////////////////////////////////////////////////////
1: 			assertTrue ("Bundle " + bundleName + " not found in subsystem " + subsystemName, bundleFound);
commit:dbcd0ed
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.BundleContext;
/////////////////////////////////////////////////////////////////////////
1: 	/**
1: 	 * Verify that bundles with names bundleNames are installed into the subsystem with subsystemName
1: 	 * and bundle context bc
1: 	 * @param bc
1: 	 * @param subsystemName
1: 	 * @param bundleNames
1: 	 */
1: 	protected void verifyBundlesInstalled (BundleContext bc, String subsystemName, String ... bundleNames)
1: 	{
1: 		for (String bundleName: bundleNames) {
1: 			boolean bundleFound = false;
1: 			inner: for (Bundle b: bc.getBundles()) { 
1: 				if (b.getSymbolicName().equals(bundleName)) { 
1: 					bundleFound = true;
1: 					break inner;
1: 				}
1: 			}
0: 			assertTrue ("Bundle " + bundleName + " not found in " + subsystemName + "subsystem", bundleFound);
1: 		}
1: 	}
commit:412c1f8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		headers.put(Constants.PROVIDE_CAPABILITY, "y;y=randomNamespace"); // TODO: see comment below about bug=true
/////////////////////////////////////////////////////////////////////////
0: 		headers.put(Constants.REQUIRE_CAPABILITY, "y");
/////////////////////////////////////////////////////////////////////////
0: 		headers.put(Constants.PROVIDE_CAPABILITY, "y;y=randomNamespace");      // TODO: see comment above about bug=true
commit:3e9adfe
/////////////////////////////////////////////////////////////////////////
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
/////////////////////////////////////////////////////////////////////////
0: @RunWith(JUnit4TestRunner.class)
/////////////////////////////////////////////////////////////////////////
0: 	private static boolean _staticResourcesCreated = false;
1: 		
1: 		// We'd like to do this in an @BeforeClass method, but files written in @BeforeClass
1: 		// go into the project's target/ directory whereas those written in @Before go into 
1: 		// paxexam's temp directory, which is where they're needed. 
0: 		if (!_staticResourcesCreated) { 
0: 			createBundleA();
0: 			createBundleB();
0: 			createBundleC();
0: 			createBundleD();
0: 			createBundleE();
0: 			createBundleF();
0: 			createBundleG();
0: 			_staticResourcesCreated = true;
1: 		}
commit:96f3261
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.ctt.itests;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.osgi.framework.namespace.BundleNamespace.BUNDLE_NAMESPACE;
1: import static org.osgi.framework.namespace.PackageNamespace.PACKAGE_NAMESPACE;
1: 
0: import java.util.HashMap;
1: import java.util.List;
0: import java.util.Map;
1: 
1: import org.apache.aries.subsystem.itests.SubsystemTest;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.BeforeClass;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.wiring.BundleWire;
1: import org.osgi.framework.wiring.BundleWiring;
1: import org.osgi.service.subsystem.Subsystem;
1: 
1: /*
1:  * A set of tests to cover OSGi Subsystems CTT section 4, "Subsystem Dependency Tests"
1:  * This is going to look a bit like ProvisionPolicyTest with a bit of 
1:  * DependencyLifecycle thrown in. 
1:  * 
1:  * 	- The following bundles are used for the tests
1: 	- Bundle A that export package x
1: 	- Bundle B that provides capability y
1: 	- Bundle C that imports package x
1: 	- Bundle D that requires bundle A
1: 	- Bundle E that requires capability y
1: 	- Bundle F that export package x
1: 	- Bundle G that provides capability y
1: 	- The following repositories are defined
1: 	- Repository R1
1: 	  - Bundle A
1: 	  - Bundle B
1: 	  - Bundle C
1: 	  - Bundle D
1: 	  - Bundle E
1: 	  - Bundle F
1: 	  - Bundle G
1: 	- Repository R2
1: 	  - Bundle A
1: 	  - Bundle B
1: 	  - Bundle C
1: 	  - Bundle D
1: 	  - Bundle E
1:  */
1: 
1: public abstract class SubsystemDependencyTestBase extends SubsystemTest 
1: {
1: 	protected static String BUNDLE_A = "sdt_bundle.a.jar";
1: 	protected static String BUNDLE_B = "sdt_bundle.b.jar";
1: 	protected static String BUNDLE_C = "sdt_bundle.c.jar";
1: 	protected static String BUNDLE_D = "sdt_bundle.d.jar";
1: 	protected static String BUNDLE_E = "sdt_bundle.e.jar";
1: 	protected static String BUNDLE_F = "sdt_bundle.f.jar";
1: 	protected static String BUNDLE_G = "sdt_bundle.g.jar";
1: 
0: 	@BeforeClass
0: 	public static void createStaticResources() throws Exception
1: 	{ 
0: 		createBundleA();
0: 		createBundleB();
0: 		createBundleC();
0: 		createBundleD();
0: 		createBundleE();
0: 		createBundleF();
0: 		createBundleG();
1: 	}
1: 	
0: 	@Before
0: 	public void setUp() throws Exception
1: 	{
0: 		super.setUp();
1: 	}
1: 	
0: 	@After
0: 	public void tearDown() 
1: 	{ 
0: 		super.tearDown();
1: 	}
1: 	
1: 	
0: 	private static void createBundleA() throws Exception
1: 	{ 
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_VERSION, "1.0.0");
0: 		headers.put(Constants.EXPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_A, headers);
1: 	}
1: 	
0: 	private static void createBundleB() throws Exception
1: 	{
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_VERSION, "1.0.0");
0: 		headers.put(Constants.PROVIDE_CAPABILITY, "y;bug=true"); // TODO: see comment below about bug=true
0: 		createBundle(BUNDLE_B, headers);
1: 	}
1: 	
0: 	private static void createBundleC() throws Exception
1: 	{
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_VERSION, "1.0.0");
0: 		headers.put(Constants.IMPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_C, headers);
1: 	}
1: 	
0: 	private static void createBundleD() throws Exception
1: 	{
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_VERSION, "1.0.0");
0: 		headers.put(Constants.REQUIRE_BUNDLE, BUNDLE_A);
0: 		createBundle(BUNDLE_D, headers);
1: 	}
1: 	
0: 	private static void createBundleE() throws Exception 
1: 	{
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_VERSION, "1.0.0");
0: 		headers.put(Constants.REQUIRE_CAPABILITY, "y;filter:=\"(bug=true)\"");
0: 		// TODO:
1: 		/*
0: 		 * According to the OSGi Core Release 5 spec section 3.3.6 page 35, 
0: 		 *   "A filter is optional, if no filter directive is specified the requirement always matches."
1: 		 *  
0: 		 * If omitted, we first get an NPE in DependencyCalculator.MissingCapability.initializeAttributes(). 
0: 		 * If that's fixed, we get exceptions of the form, 
1: 		 * 
0: 		 *  Caused by: java.lang.IllegalArgumentException: The filter must not be null.
0: 		 *    at org.eclipse.equinox.internal.region.StandardRegionFilterBuilder.allow(StandardRegionFilterBuilder.java:49)
0: 		 *    at org.apache.aries.subsystem.core.internal.SubsystemResource.setImportIsolationPolicy(SubsystemResource.java:655)
1: 	     * 
0: 	     * This looks to be an Equinox defect - at least in the level of 3.8.0 currently being used by these tests. 
1: 		 */
0: 		createBundle(BUNDLE_E, headers);
1: 	}
1: 
0: 	private static void createBundleF() throws Exception 
1: 	{
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_VERSION, "1.0.0");
0: 		headers.put(Constants.EXPORT_PACKAGE, "x");
0: 		createBundle(BUNDLE_F, headers);
1: 	}
1: 	
0: 	private static void createBundleG() throws Exception 
1: 	{
0: 		Map<String, String> headers = new HashMap<String, String>();
0: 		headers.put(Constants.BUNDLE_VERSION, "1.0.0");
0: 		headers.put(Constants.PROVIDE_CAPABILITY, "y;bug=true");      // TODO: see comment above about bug=true
0: 		createBundle(BUNDLE_G, headers);
1: 	}
1: 	
1: 	protected void registerRepositoryR1() throws Exception
1: 	{ 
1: 		registerRepositoryService(BUNDLE_A, BUNDLE_B, 
1: 				BUNDLE_C, BUNDLE_D, BUNDLE_E, BUNDLE_F, BUNDLE_G);
1: 	}
1: 	
1: 	protected void registerRepositoryR2() throws Exception
1: 	{
1: 		registerRepositoryService(BUNDLE_A, BUNDLE_B, 
1: 				BUNDLE_C, BUNDLE_D, BUNDLE_E);
1: 	}
1: 	
1: 
1: 	/**
1: 	 * Check that wiredBundleName in subsystem s is wired to a single package, 
1: 	 * expectedPackage, from expectedProvidingBundle
1: 	 * @param s
1: 	 * @param wiredBundleName
1: 	 * @param expectedPackage
1: 	 * @param expectedProvidingBundle
1: 	 */
1: 	protected void verifySinglePackageWiring (Subsystem s, String wiredBundleName, String expectedPackage, String expectedProvidingBundle)
1: 	{
0: 		Bundle wiredBundle = getBundle(s, wiredBundleName);
1: 		assertNotNull ("Bundle not found", wiredBundleName);
1: 
0: 		BundleWiring wiring = wiredBundle.adapt(BundleWiring.class);
1: 		List<BundleWire> wiredPackages = wiring.getRequiredWires(PACKAGE_NAMESPACE);
1: 		assertEquals ("Only one package expected", 1, wiredPackages.size());
1: 		
1: 		String packageName = (String) 
1: 			wiredPackages.get(0).getCapability().getAttributes().get(PACKAGE_NAMESPACE);
1: 		assertEquals ("Wrong package found", expectedPackage, packageName);
1: 		
1: 		String providingBundle = wiredPackages.get(0).getProvider().getSymbolicName();
1: 		assertEquals ("Package provided by wrong bundle", expectedProvidingBundle, providingBundle);
1: 	}
1: 	
1: 	/**
1: 	 * Verify that the Require-Bundle of wiredBundleName in subsystem s is met by a wire
1: 	 * to expectedProvidingBundleName
1: 	 * @param s
1: 	 * @param wiredBundleName
1: 	 * @param expectedProvidingBundleName
1: 	 */
1: 	protected void verifyRequireBundleWiring (Subsystem s, String wiredBundleName, String expectedProvidingBundleName)
1: 	{
0: 		Bundle wiredBundle = getBundle(s, BUNDLE_D);
1: 		assertNotNull ("Target bundle " + wiredBundleName + " not found", wiredBundle);
1: 	
0: 		BundleWiring wiring = wiredBundle.adapt(BundleWiring.class);
1: 		List<BundleWire> wiredBundles = wiring.getRequiredWires(BUNDLE_NAMESPACE);
1: 		assertEquals ("Only one bundle expected", 1, wiredBundles.size());
1: 	
1: 		String requiredBundleName = (String)
1: 			wiredBundles.get(0).getCapability().getAttributes().get(BUNDLE_NAMESPACE);
1: 		assertEquals ("Wrong bundle requirement", BUNDLE_A, requiredBundleName);
1: 	
1: 		String providingBundle = wiredBundles.get(0).getProvider().getSymbolicName();
1: 		assertEquals ("Wrong bundle provider", expectedProvidingBundleName, providingBundle);
1: 	}
1: 	
1: 	/**
1: 	 * Verify that a bundle with wiredBundleName imports a single capability in namespace
1: 	 * from expectedProvidingBundleName
1: 	 * @param s
1: 	 * @param wiredBundleName
1: 	 * @param namespace
1: 	 * @param expectedProvidingBundleName
1: 	 */
1: 	protected void verifyCapabilityWiring (Subsystem s, String wiredBundleName, 
1: 			String namespace, String expectedProvidingBundleName)
1: 	{
0: 		Bundle wiredBundle = getBundle(s, wiredBundleName);
1: 		assertNotNull ("Targt bundle " + wiredBundleName + " not found", wiredBundleName);
1: 		
0: 		BundleWiring wiring = wiredBundle.adapt(BundleWiring.class);
1: 		List<BundleWire> wiredProviders = wiring.getRequiredWires(namespace);
1: 		assertEquals("Only one wire for capability namespace " + namespace +" expected", 
1: 				1, wiredProviders.size());
1: 		
1: 		String capabilityNamespace = (String)
1: 			wiredProviders.get(0).getCapability().getNamespace();
1: 		assertEquals ("Wrong namespace", namespace, capabilityNamespace);
1: 		
1: 		String providingBundle = wiredProviders.get(0).getProvider().getSymbolicName();
1: 		assertEquals ("Wrong bundle provider", expectedProvidingBundleName, providingBundle);
1: 	}
1: 
1: }
============================================================================