1:e55f0fd: /*
1:e55f0fd:  * Licensed to the Apache Software Foundation (ASF) under one
1:e55f0fd:  * or more contributor license agreements.  See the NOTICE file
1:e55f0fd:  * distributed with this work for additional information
1:e55f0fd:  * regarding copyright ownership.  The ASF licenses this file
1:e55f0fd:  * to you under the Apache License, Version 2.0 (the
1:e55f0fd:  * "License"); you may not use this file except in compliance
1:e55f0fd:  * with the License.  You may obtain a copy of the License at
1:e55f0fd:  *
1:e55f0fd:  *   http://www.apache.org/licenses/LICENSE-2.0
1:e55f0fd:  *
1:e55f0fd:  * Unless required by applicable law or agreed to in writing,
1:e55f0fd:  * software distributed under the License is distributed on an
1:e55f0fd:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:e55f0fd:  * KIND, either express or implied.  See the License for the
1:e55f0fd:  * specific language governing permissions and limitations
1:e55f0fd:  * under the License.
1:e55f0fd:  */
1:e55f0fd: package org.apache.aries.tx.control.itests;
4:e55f0fd: 
1:e55f0fd: import static java.util.stream.Collectors.toList;
1:e55f0fd: import static org.junit.Assert.assertEquals;
1:e55f0fd: import static org.junit.Assert.assertNotNull;
1:e55f0fd: import static org.junit.Assert.assertTrue;
1:e55f0fd: import static org.junit.Assert.fail;
1:e55f0fd: import static org.ops4j.pax.exam.CoreOptions.bootClasspathLibrary;
1:e55f0fd: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:e55f0fd: import static org.ops4j.pax.exam.CoreOptions.systemPackage;
1:e55f0fd: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1:e55f0fd: 
1:e55f0fd: import java.util.Arrays;
1:e55f0fd: import java.util.Dictionary;
1:e55f0fd: import java.util.Hashtable;
1:e55f0fd: import java.util.List;
1:e55f0fd: import java.util.function.Predicate;
1:e55f0fd: 
1:e55f0fd: import org.apache.aries.tx.control.itests.entity.Message;
1:e55f0fd: import org.junit.Test;
1:e55f0fd: import org.junit.runner.RunWith;
1:e55f0fd: import org.ops4j.pax.exam.CoreOptions;
1:e55f0fd: import org.ops4j.pax.exam.Option;
1:e55f0fd: import org.ops4j.pax.exam.junit.PaxExam;
1:e55f0fd: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:e55f0fd: import org.ops4j.pax.exam.spi.reactors.PerClass;
1:e55f0fd: import org.osgi.framework.Bundle;
1:e55f0fd: import org.osgi.framework.BundleException;
1:e55f0fd: import org.osgi.service.cm.Configuration;
1:e55f0fd: import org.osgi.service.cm.ConfigurationAdmin;
1:e55f0fd: import org.osgi.service.transaction.control.ScopedWorkException;
1:e55f0fd: import org.osgi.service.transaction.control.TransactionException;
1:e55f0fd: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1:e55f0fd: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1:e55f0fd: 
1:e55f0fd: @RunWith(PaxExam.class)
1:e55f0fd: @ExamReactorStrategy(PerClass.class)
1:e55f0fd: public class JPALifecycleTest extends AbstractJPATransactionTest {
1:e55f0fd: 
1:e55f0fd: 	private static final long LIFETIME = 30000;
1:e55f0fd: 	
1:e55f0fd: 	private static final int CONNECTIONS = 17;
1:e55f0fd: 	
1:e55f0fd: 	protected String ariesJPAVersion() {
1:e55f0fd: 		return "2.4.0";
1:e55f0fd: 	}
1:e55f0fd: 	
1:e55f0fd: 	protected Option jpaProvider() {
1:e55f0fd: 		return CoreOptions.composite(
1:e55f0fd: 			// Add JTA 1.1 as a system package because of the link to javax.sql
1:e55f0fd: 			// Also set javax.xml.stream to 1.0 due to hibernate's funny packaging
1:e55f0fd: 			
1:e55f0fd: 			systemProperty(ARIES_EMF_BUILDER_TARGET_FILTER)
1:e55f0fd: 				.value("(osgi.unit.provider=org.hibernate.jpa.HibernatePersistenceProvider)"),
1:e55f0fd: 			systemPackage("javax.xml.stream;version=1.0"),
1:e55f0fd: 			systemPackage("javax.xml.stream.events;version=1.0"),
1:e55f0fd: 			systemPackage("javax.xml.stream.util;version=1.0"),
1:e55f0fd: 			systemPackage("javax.transaction;version=1.1"),
1:e55f0fd: 			systemPackage("javax.transaction.xa;version=1.1"),
1:e55f0fd: 			bootClasspathLibrary(mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec", "1.1.1")).beforeFramework(),
1:e55f0fd: 			
1:e55f0fd: 			// Hibernate bundles and their dependencies (JPA API is available from the tx-control)
1:e55f0fd: 			mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.antlr", "2.7.7_5"),
1:e55f0fd: 			mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.dom4j", "1.6.1_5"),
1:e55f0fd: 			mavenBundle("org.javassist", "javassist", "3.18.1-GA"),
1:e55f0fd: 			mavenBundle("org.jboss.logging", "jboss-logging", "3.3.0.Final"),
1:e55f0fd: 			mavenBundle("org.jboss", "jandex", "2.0.0.Final"),
1:e55f0fd: 			mavenBundle("org.hibernate.common", "hibernate-commons-annotations", "5.0.1.Final"),
1:e55f0fd: 			mavenBundle("org.hibernate", "hibernate-core", "5.0.9.Final"),
1:e55f0fd: 			mavenBundle("org.hibernate", "hibernate-osgi", "5.0.9.Final"),
1:e55f0fd: 			mavenBundle("org.hibernate", "hibernate-entitymanager", "5.0.9.Final"));
1:e55f0fd: 	}
1:e55f0fd: 	
1:e55f0fd: 	@Override
1:e55f0fd: 	protected Dictionary<String, Object> getBaseProperties() {
1:e55f0fd: 		// Set a short lifecycle for pooled connections and force a non-standard number
1:e55f0fd: 		Dictionary<String, Object> config = new Hashtable<>();
1:e55f0fd: 		config.put(JDBCConnectionProviderFactory.IDLE_TIMEOUT, LIFETIME/2);
1:e55f0fd: 		config.put(JDBCConnectionProviderFactory.CONNECTION_LIFETIME, LIFETIME);
1:e55f0fd: 		config.put(JDBCConnectionProviderFactory.MAX_CONNECTIONS, CONNECTIONS);
1:e55f0fd: 		config.put(JDBCConnectionProviderFactory.MIN_CONNECTIONS, CONNECTIONS);
1:e55f0fd: 		
1:e55f0fd: 		return config;
1:e55f0fd: 	}
1:e55f0fd: 
1:e55f0fd: 	@Test
1:e55f0fd: 	public void testStopOfTxControlBundle() {
1:e55f0fd: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-service"),
1:e55f0fd: 				"The transaction control service is closed");
1:e55f0fd: 	}
1:e55f0fd: 
1:e55f0fd: 	@Test
1:e55f0fd: 	public void testStopOfJPABundle() {
1:e55f0fd: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-provider-jpa"),
1:e55f0fd: 				"There was a problem getting hold of a database connection");
1:e55f0fd: 	}
1:e55f0fd: 
1:e55f0fd: 	private void doBundleStoppingTest(Predicate<Bundle> p, String exceptionMessage) {
1:e55f0fd: 		Message m = new Message();
1:e55f0fd: 		m.message = "Hello World";
1:e55f0fd: 		txControl.required(() -> {em.persist(m); return null;});
1:e55f0fd: 
1:e55f0fd: 		assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1:e55f0fd: 
1:e55f0fd: 		List<Bundle> toStop = Arrays.stream(context.getBundles()).filter(p).collect(toList());
1:e55f0fd: 
1:e55f0fd: 		System.out.println(toStop);
1:e55f0fd: 
1:e55f0fd: 		try {
1:e55f0fd: 			toStop.stream().forEach(b -> {
1:e55f0fd: 				System.out.println("Stopping " + b.getSymbolicName());
1:e55f0fd: 				try {
1:e55f0fd: 					b.stop();
1:e55f0fd: 				} catch (BundleException e) {
1:e55f0fd: 				}
1:e55f0fd: 			});
1:e55f0fd: 
1:e55f0fd: 			try {
1:e55f0fd: 				assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1:426f022: 				fail("Should not be accessible " + (Boolean.getBoolean(IS_XA) ? "xa" : "local"));
1:e55f0fd: 			} catch (ScopedWorkException swe) {
1:e55f0fd: 				assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1:e55f0fd: 				assertEquals(exceptionMessage, swe.getCause().getMessage());
1:e55f0fd: 			} catch (TransactionException te) {
1:e55f0fd: 				assertEquals(exceptionMessage, te.getMessage());
1:e55f0fd: 			}
1:e55f0fd: 		} finally {
1:e55f0fd: 			toStop.stream().forEach(b -> {
1:e55f0fd: 				System.out.println("Restarting " + b.getSymbolicName());
1:e55f0fd: 				try {
1:e55f0fd: 					b.start();
1:e55f0fd: 				} catch (BundleException e) {
1:e55f0fd: 				}
1:e55f0fd: 			});
1:e55f0fd: 			getService(JPAEntityManagerProvider.class, 5000);
1:e55f0fd: 		}
1:e55f0fd: 	}
1:e55f0fd: 
1:e55f0fd: 	@Test
1:e55f0fd: 	public void testDeleteOfConfig() throws Exception {
1:e55f0fd: 		
1:e55f0fd: 		Message m = new Message();
1:e55f0fd: 		m.message = "Hello World";
1:e55f0fd: 		txControl.required(() -> {em.persist(m); return null;});
1:e55f0fd: 
1:e55f0fd: 		assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1:e55f0fd: 
1:e55f0fd: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:e55f0fd: 
1:e55f0fd: 		Configuration[] configurations = cm
1:e55f0fd: 				.listConfigurations("(service.factoryPid=org.apache.aries.tx.control.jpa.*)");
1:e55f0fd: 
1:e55f0fd: 		assertNotNull(configurations);
1:e55f0fd: 		assertEquals(1, configurations.length);
1:e55f0fd: 
1:e55f0fd: 		configurations[0].delete();
1:e55f0fd: 
1:e55f0fd: 		Thread.sleep(2000);
1:e55f0fd: 
1:e55f0fd: 		try {
1:e55f0fd: 			assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1:426f022: 			fail("Should not be accessible " + (Boolean.getBoolean(IS_XA) ? "xa" : "local"));
1:e55f0fd: 		} catch (ScopedWorkException swe) {
1:e55f0fd: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1:e55f0fd: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1:e55f0fd: 		}
1:e55f0fd: 	}
1:e55f0fd: 
1:e55f0fd: 	@Test
1:e55f0fd: 	public void testUpdateOfConfig() throws Exception {
1:e55f0fd: 		
1:e55f0fd: 		Message m = new Message();
1:e55f0fd: 		m.message = "Hello World";
1:e55f0fd: 		txControl.required(() -> {em.persist(m); return null;});
1:e55f0fd: 
1:e55f0fd: 		assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1:e55f0fd: 
1:e55f0fd: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1:e55f0fd: 
1:e55f0fd: 		Configuration[] configurations = cm
1:e55f0fd: 				.listConfigurations("(service.factoryPid=org.apache.aries.tx.control.jpa.*)");
1:e55f0fd: 
1:e55f0fd: 		assertNotNull(configurations);
1:e55f0fd: 		assertEquals(1, configurations.length);
1:e55f0fd: 
1:e55f0fd: 		configurations[0].update();
1:e55f0fd: 
1:e55f0fd: 		Thread.sleep(2000);
1:e55f0fd: 
1:e55f0fd: 		try {
1:e55f0fd: 			assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1:426f022: 			fail("Should not be accessible " + (Boolean.getBoolean(IS_XA) ? "xa" : "local"));
1:e55f0fd: 		} catch (ScopedWorkException swe) {
1:e55f0fd: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1:e55f0fd: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1:e55f0fd: 		}
1:e55f0fd: 	}
1:e55f0fd: //
1:e55f0fd: //	@Test
1:e55f0fd: //	public void testReleaseOfFactoryService() {
1:e55f0fd: //		Assume.assumeFalse("Not a factory test", isConfigured());
1:e55f0fd: //
1:e55f0fd: //		txControl.required(
1:e55f0fd: //				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1:e55f0fd: //
1:e55f0fd: //		assertEquals("Hello World!", txControl.notSupported(() -> {
1:e55f0fd: //			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:e55f0fd: //			rs.next();
1:e55f0fd: //			return rs.getString(1);
1:e55f0fd: //		}));
1:e55f0fd: //
1:e55f0fd: //		trackers.stream().filter(t -> t.getService() instanceof JDBCConnectionProviderFactory).findFirst().get()
1:e55f0fd: //				.close();
1:e55f0fd: //		;
1:e55f0fd: //
1:e55f0fd: //		try {
1:e55f0fd: //			assertEquals("Hello World!", txControl.notSupported(() -> {
1:e55f0fd: //				ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1:e55f0fd: //				rs.next();
1:e55f0fd: //				return rs.getString(1);
1:e55f0fd: //			}));
1:e55f0fd: //			fail("Should not be accessible");
1:e55f0fd: //		} catch (ScopedWorkException swe) {
1:e55f0fd: //			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1:e55f0fd: //			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1:e55f0fd: //		}
1:e55f0fd: //	}
1:e55f0fd: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:426f022
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 				fail("Should not be accessible " + (Boolean.getBoolean(IS_XA) ? "xa" : "local"));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			fail("Should not be accessible " + (Boolean.getBoolean(IS_XA) ? "xa" : "local"));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			fail("Should not be accessible " + (Boolean.getBoolean(IS_XA) ? "xa" : "local"));
commit:e55f0fd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.tx.control.itests;
1: 
1: import static java.util.stream.Collectors.toList;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: import static org.ops4j.pax.exam.CoreOptions.bootClasspathLibrary;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: import static org.ops4j.pax.exam.CoreOptions.systemPackage;
1: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
1: 
1: import java.util.Arrays;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.List;
1: import java.util.function.Predicate;
1: 
1: import org.apache.aries.tx.control.itests.entity.Message;
0: import org.junit.Assume;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
1: import org.ops4j.pax.exam.junit.PaxExam;
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerClass;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleException;
1: import org.osgi.service.cm.Configuration;
1: import org.osgi.service.cm.ConfigurationAdmin;
1: import org.osgi.service.transaction.control.ScopedWorkException;
1: import org.osgi.service.transaction.control.TransactionException;
1: import org.osgi.service.transaction.control.jdbc.JDBCConnectionProviderFactory;
1: import org.osgi.service.transaction.control.jpa.JPAEntityManagerProvider;
1: 
1: @RunWith(PaxExam.class)
1: @ExamReactorStrategy(PerClass.class)
1: public class JPALifecycleTest extends AbstractJPATransactionTest {
1: 
1: 	private static final long LIFETIME = 30000;
1: 	
1: 	private static final int CONNECTIONS = 17;
1: 	
1: 	protected String ariesJPAVersion() {
1: 		return "2.4.0";
1: 	}
1: 	
1: 	protected Option jpaProvider() {
1: 		return CoreOptions.composite(
1: 			// Add JTA 1.1 as a system package because of the link to javax.sql
1: 			// Also set javax.xml.stream to 1.0 due to hibernate's funny packaging
1: 			
1: 			systemProperty(ARIES_EMF_BUILDER_TARGET_FILTER)
1: 				.value("(osgi.unit.provider=org.hibernate.jpa.HibernatePersistenceProvider)"),
1: 			systemPackage("javax.xml.stream;version=1.0"),
1: 			systemPackage("javax.xml.stream.events;version=1.0"),
1: 			systemPackage("javax.xml.stream.util;version=1.0"),
1: 			systemPackage("javax.transaction;version=1.1"),
1: 			systemPackage("javax.transaction.xa;version=1.1"),
1: 			bootClasspathLibrary(mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec", "1.1.1")).beforeFramework(),
1: 			
1: 			// Hibernate bundles and their dependencies (JPA API is available from the tx-control)
1: 			mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.antlr", "2.7.7_5"),
1: 			mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.dom4j", "1.6.1_5"),
1: 			mavenBundle("org.javassist", "javassist", "3.18.1-GA"),
1: 			mavenBundle("org.jboss.logging", "jboss-logging", "3.3.0.Final"),
1: 			mavenBundle("org.jboss", "jandex", "2.0.0.Final"),
1: 			mavenBundle("org.hibernate.common", "hibernate-commons-annotations", "5.0.1.Final"),
1: 			mavenBundle("org.hibernate", "hibernate-core", "5.0.9.Final"),
1: 			mavenBundle("org.hibernate", "hibernate-osgi", "5.0.9.Final"),
1: 			mavenBundle("org.hibernate", "hibernate-entitymanager", "5.0.9.Final"));
1: 	}
1: 	
1: 	@Override
1: 	protected Dictionary<String, Object> getBaseProperties() {
1: 		// Set a short lifecycle for pooled connections and force a non-standard number
1: 		Dictionary<String, Object> config = new Hashtable<>();
1: 		config.put(JDBCConnectionProviderFactory.IDLE_TIMEOUT, LIFETIME/2);
1: 		config.put(JDBCConnectionProviderFactory.CONNECTION_LIFETIME, LIFETIME);
1: 		config.put(JDBCConnectionProviderFactory.MAX_CONNECTIONS, CONNECTIONS);
1: 		config.put(JDBCConnectionProviderFactory.MIN_CONNECTIONS, CONNECTIONS);
1: 		
1: 		return config;
1: 	}
1: 
1: 	@Test
1: 	public void testStopOfTxControlBundle() {
0: 		// Do not run for XA tests yet
0: 		Assume.assumeFalse(Boolean.getBoolean(IS_XA));
1: 		
1: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-service"),
1: 				"The transaction control service is closed");
1: 	}
1: 
1: 	@Test
1: 	public void testStopOfJPABundle() {
0: 		// Do not run for XA tests yet
0: 		Assume.assumeFalse(Boolean.getBoolean(IS_XA));
1: 		
1: 		doBundleStoppingTest(b -> b.getSymbolicName().contains("tx-control-provider-jpa"),
1: 				"There was a problem getting hold of a database connection");
1: 	}
1: 
1: 	private void doBundleStoppingTest(Predicate<Bundle> p, String exceptionMessage) {
1: 		Message m = new Message();
1: 		m.message = "Hello World";
1: 		txControl.required(() -> {em.persist(m); return null;});
1: 
1: 		assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1: 
1: 		List<Bundle> toStop = Arrays.stream(context.getBundles()).filter(p).collect(toList());
1: 
1: 		System.out.println(toStop);
1: 
1: 		try {
1: 			toStop.stream().forEach(b -> {
1: 				System.out.println("Stopping " + b.getSymbolicName());
1: 				try {
1: 					b.stop();
1: 				} catch (BundleException e) {
1: 				}
1: 			});
1: 
1: 			try {
1: 				assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
0: 				fail("Should not be accessible");
1: 			} catch (ScopedWorkException swe) {
1: 				assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1: 				assertEquals(exceptionMessage, swe.getCause().getMessage());
1: 			} catch (TransactionException te) {
1: 				assertEquals(exceptionMessage, te.getMessage());
1: 			}
1: 		} finally {
1: 			toStop.stream().forEach(b -> {
1: 				System.out.println("Restarting " + b.getSymbolicName());
1: 				try {
1: 					b.start();
1: 				} catch (BundleException e) {
1: 				}
1: 			});
1: 			getService(JPAEntityManagerProvider.class, 5000);
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void testDeleteOfConfig() throws Exception {
1: 		
0: 		// Do not run for XA tests yet
0: 		Assume.assumeFalse(Boolean.getBoolean(IS_XA));
1: 
1: 		Message m = new Message();
1: 		m.message = "Hello World";
1: 		txControl.required(() -> {em.persist(m); return null;});
1: 
1: 		assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1: 
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1: 
1: 		Configuration[] configurations = cm
1: 				.listConfigurations("(service.factoryPid=org.apache.aries.tx.control.jpa.*)");
1: 
1: 		assertNotNull(configurations);
1: 		assertEquals(1, configurations.length);
1: 
1: 		configurations[0].delete();
1: 
1: 		Thread.sleep(2000);
1: 
1: 		try {
1: 			assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
0: 			fail("Should not be accessible");
1: 		} catch (ScopedWorkException swe) {
1: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1: 		}
1: 	}
1: 
1: 	@Test
1: 	public void testUpdateOfConfig() throws Exception {
0: 		// Do not run for XA tests yet
0: 		Assume.assumeFalse(Boolean.getBoolean(IS_XA));
1: 		
1: 		Message m = new Message();
1: 		m.message = "Hello World";
1: 		txControl.required(() -> {em.persist(m); return null;});
1: 
1: 		assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
1: 
1: 		ConfigurationAdmin cm = getService(ConfigurationAdmin.class, 5000);
1: 
1: 		Configuration[] configurations = cm
1: 				.listConfigurations("(service.factoryPid=org.apache.aries.tx.control.jpa.*)");
1: 
1: 		assertNotNull(configurations);
1: 		assertEquals(1, configurations.length);
1: 
1: 		configurations[0].update();
1: 
1: 		Thread.sleep(2000);
1: 
1: 		try {
1: 			assertEquals(m.message, txControl.notSupported(() -> em.find(Message.class, m.id).message));
0: 			fail("Should not be accessible");
1: 		} catch (ScopedWorkException swe) {
1: 			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1: 			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1: 		}
1: 	}
1: //
1: //	@Test
1: //	public void testReleaseOfFactoryService() {
1: //		Assume.assumeFalse("Not a factory test", isConfigured());
1: //
1: //		txControl.required(
1: //				() -> connection.createStatement().execute("Insert into TEST_TABLE values ( 'Hello World!' )"));
1: //
1: //		assertEquals("Hello World!", txControl.notSupported(() -> {
1: //			ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1: //			rs.next();
1: //			return rs.getString(1);
1: //		}));
1: //
1: //		trackers.stream().filter(t -> t.getService() instanceof JDBCConnectionProviderFactory).findFirst().get()
1: //				.close();
1: //		;
1: //
1: //		try {
1: //			assertEquals("Hello World!", txControl.notSupported(() -> {
1: //				ResultSet rs = connection.createStatement().executeQuery("Select * from TEST_TABLE");
1: //				rs.next();
1: //				return rs.getString(1);
1: //			}));
1: //			fail("Should not be accessible");
1: //		} catch (ScopedWorkException swe) {
1: //			assertTrue(swe.getCause().toString(), swe.getCause() instanceof TransactionException);
1: //			assertEquals("There was a problem getting hold of a database connection", swe.getCause().getMessage());
1: //		}
1: //	}
1: }
============================================================================