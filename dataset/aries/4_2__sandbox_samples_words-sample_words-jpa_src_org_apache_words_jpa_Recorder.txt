1:90e8be0: /**
1:90e8be0:  * Licensed to the Apache Software Foundation (ASF) under one
1:90e8be0:  * or more contributor license agreements.  See the NOTICE file
1:90e8be0:  * distributed with this work for additional information
1:90e8be0:  * regarding copyright ownership.  The ASF licenses this file
1:90e8be0:  * to you under the Apache License, Version 2.0 (the
1:90e8be0:  * "License"); you may not use this file except in compliance
1:90e8be0:  * with the License.  You may obtain a copy of the License at
1:90e8be0:  *
1:90e8be0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:90e8be0:  *
1:90e8be0:  * Unless required by applicable law or agreed to in writing,
1:90e8be0:  * software distributed under the License is distributed on an
1:90e8be0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:90e8be0:  * KIND, either express or implied.  See the License for the
1:90e8be0:  * specific language governing permissions and limitations
1:90e8be0:  * under the License.
1:90e8be0:  */
1:90e8be0: 
1:8aa58cd: package org.apache.words.jpa;
1:90e8be0: 
1:90e8be0: import javax.persistence.EntityManager;
1:90e8be0: 
1:8aa58cd: import org.apache.words.AssociationRecorderService;
1:90e8be0: 
1:90e8be0: /**
1:90e8be0:  * 
1:90e8be0:  * A JPA-backed implementation of the association recorder service.
1:90e8be0:  * 
1:90e8be0:  */
1:90e8be0: public class Recorder implements AssociationRecorderService {
1:90e8be0: 
1:90e8be0: 	private EntityManager em;
1:90e8be0: 
1:90e8be0: 	@Override
1:90e8be0: 	public void recordAssociation(String word, String association) {
1:90e8be0: 		Association found = em.find(Association.class, word);
1:90e8be0: 		if (found != null) {
1:90e8be0: 			found.setAssociated(association);
1:90e8be0: 		} else {
1:90e8be0: 			Association a = new Association();
1:90e8be0: 			a.setWord(word);
1:90e8be0: 			a.setAssociated(association);
1:90e8be0: 			em.persist(a);
1:90e8be0: 		}
1:90e8be0: 	}
1:90e8be0: 
1:90e8be0: 	@Override
1:90e8be0: 	public String getLastAssociation(String word) {
1:90e8be0: 		Association found = em.find(Association.class, word);
1:90e8be0: 		if (found != null) {
1:90e8be0: 			return found.getAssociated();
1:90e8be0: 		} else {
1:90e8be0: 			return "nothing";
1:90e8be0: 		}
1:90e8be0: 	}
1:90e8be0: 
1:90e8be0: 	public void setEntityManager(EntityManager e) {
1:90e8be0: 		em = e;
1:90e8be0: 	}
1:90e8be0: 
1:90e8be0: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Holly Cummins
-------------------------------------------------------------------------------
commit:8aa58cd
/////////////////////////////////////////////////////////////////////////
1: package org.apache.words.jpa;
1: import org.apache.words.AssociationRecorderService;
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:83a59ec
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:90e8be0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: 
0: package org.apache.wordassociation.jpa;
1: 
1: import javax.persistence.EntityManager;
1: 
0: import org.apache.wordassociation.AssociationRecorderService;
1: 
1: /**
1:  * 
1:  * A JPA-backed implementation of the association recorder service.
1:  * 
1:  */
1: public class Recorder implements AssociationRecorderService {
1: 
1: 	private EntityManager em;
1: 
1: 	@Override
1: 	public void recordAssociation(String word, String association) {
1: 		Association found = em.find(Association.class, word);
1: 		if (found != null) {
1: 			found.setAssociated(association);
1: 		} else {
1: 			Association a = new Association();
1: 			a.setWord(word);
1: 			a.setAssociated(association);
1: 			em.persist(a);
1: 		}
1: 	}
1: 
1: 	@Override
1: 	public String getLastAssociation(String word) {
1: 		Association found = em.find(Association.class, word);
1: 		if (found != null) {
1: 			return found.getAssociated();
1: 		} else {
1: 			return "nothing";
1: 		}
1: 	}
1: 
1: 	public void setEntityManager(EntityManager e) {
1: 		em = e;
1: 	}
1: 
1: }
============================================================================