2:86224ba: /*
1:86224ba:  * Licensed to the Apache Software Foundation (ASF) under one
1:86224ba:  * or more contributor license agreements.  See the NOTICE file
1:86224ba:  * distributed with this work for additional information
1:86224ba:  * regarding copyright ownership.  The ASF licenses this file
1:86224ba:  * to you under the Apache License, Version 2.0 (the
1:86224ba:  * "License"); you may not use this file except in compliance
1:86224ba:  * with the License.  You may obtain a copy of the License at
1:86224ba:  *
1:86224ba:  *   http://www.apache.org/licenses/LICENSE-2.0
1:86224ba:  *
1:86224ba:  * Unless required by applicable law or agreed to in writing,
1:86224ba:  * software distributed under the License is distributed on an
1:86224ba:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:86224ba:  * KIND, either express or implied.  See the License for the
1:86224ba:  * specific language governing permissions and limitations
1:86224ba:  * under the License.
2:86224ba:  */
1:86224ba: package org.apache.aries.itest;
11:86224ba: 
1:86224ba: import java.io.File;
1:86224ba: import java.io.InputStream;
1:7fd4794: import java.util.Collection;
1:86224ba: import java.util.Dictionary;
1:86224ba: 
1:86224ba: import org.osgi.framework.Bundle;
1:86224ba: import org.osgi.framework.BundleContext;
1:86224ba: import org.osgi.framework.BundleException;
1:86224ba: import org.osgi.framework.BundleListener;
1:86224ba: import org.osgi.framework.Constants;
1:86224ba: import org.osgi.framework.Filter;
1:86224ba: import org.osgi.framework.FrameworkListener;
1:86224ba: import org.osgi.framework.FrameworkUtil;
1:86224ba: import org.osgi.framework.InvalidSyntaxException;
1:86224ba: import org.osgi.framework.ServiceListener;
1:86224ba: import org.osgi.framework.ServiceReference;
1:86224ba: import org.osgi.framework.ServiceRegistration;
1:86224ba: import org.osgi.util.tracker.ServiceTracker;
1:86224ba: 
1:86224ba: /**
1:86224ba:  * {@link BundleContext} wrapper that adds a couple of additional utilities
1:86224ba:  *
1:86224ba:  */
1:86224ba: public class RichBundleContext implements BundleContext {
1:86224ba:     public static final long DEFAULT_TIMEOUT = 15000;
1:7fd4794: 
1:86224ba:     private final BundleContext delegate;
1:86224ba: 
1:86224ba:     public RichBundleContext(BundleContext delegate) {
1:86224ba:         this.delegate = delegate;
1:86224ba:     }
1:7fd4794: 
1:7fd4794: 
1:86224ba:     public <T> T getService(Class<T> type) {
1:86224ba:         return getService(type, null, DEFAULT_TIMEOUT);
1:86224ba:     }
1:7fd4794: 
1:86224ba:     public <T> T getService(Class<T> type, long timeout) {
1:86224ba:         return getService(type, null, timeout);
1:86224ba:     }
1:7fd4794: 
1:86224ba:     public <T> T getService(Class<T> type, String filter) {
1:86224ba:         return getService(type, filter, DEFAULT_TIMEOUT);
1:86224ba:     }
1:7fd4794: 
1:86224ba:     public <T> T getService(Class<T> type, String filter, long timeout) {
1:86224ba:         ServiceTracker tracker = null;
1:86224ba:         try {
1:86224ba:             String flt;
1:86224ba:             if (filter != null) {
1:86224ba:                 if (filter.startsWith("(")) {
1:86224ba:                     flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")" + filter + ")";
1:86224ba:                 } else {
1:86224ba:                     flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")(" + filter + "))";
1:86224ba:                 }
1:86224ba:             } else {
1:86224ba:                 flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:86224ba:             }
1:86224ba:             Filter osgiFilter = FrameworkUtil.createFilter(flt);
1:86224ba:             tracker = new ServiceTracker(delegate, osgiFilter, null);
1:86224ba:             tracker.open();
1:7fd4794: 
1:86224ba:             Object svc = type.cast(tracker.waitForService(timeout));
1:86224ba:             if (svc == null) {
1:7fd4794:                 System.out.println("Could not obtain a service in time, service-ref="+
1:86224ba:                   tracker.getServiceReference()+
1:86224ba:                   ", time="+System.currentTimeMillis());
1:86224ba:                 throw new RuntimeException("Gave up waiting for service " + flt);
1:86224ba:             }
1:86224ba:             return type.cast(svc);
1:86224ba:         } catch (InvalidSyntaxException e) {
1:86224ba:             throw new IllegalArgumentException("Invalid filter", e);
1:86224ba:         } catch (InterruptedException e) {
1:86224ba:             throw new RuntimeException(e);
1:86224ba:         }
1:86224ba:     }
1:86224ba: 
1:86224ba: 
1:86224ba:     public Bundle getBundleByName(String symbolicName) {
1:86224ba:         for (Bundle b : delegate.getBundles()) {
1:86224ba:             if (b.getSymbolicName().equals(symbolicName)) {
1:86224ba:                 return b;
1:86224ba:             }
1:86224ba:         }
1:86224ba:         return null;
1:86224ba:     }
1:86224ba: 
1:86224ba:     public String getProperty(String key) {
1:86224ba:         return delegate.getProperty(key);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public Bundle getBundle() {
1:86224ba:         return delegate.getBundle();
1:86224ba:     }
1:86224ba: 
1:7fd4794:     public Bundle getBundle(String filter) { return delegate.getBundle(filter); }
1:7fd4794: 
1:86224ba:     public Bundle installBundle(String location, InputStream input)
1:86224ba:             throws BundleException {
1:86224ba:         return delegate.installBundle(location, input);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public Bundle installBundle(String location) throws BundleException {
1:86224ba:         return delegate.installBundle(location);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public Bundle getBundle(long id) {
1:86224ba:         return delegate.getBundle(id);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public Bundle[] getBundles() {
1:86224ba:         return delegate.getBundles();
1:86224ba:     }
1:86224ba: 
1:86224ba:     public void addServiceListener(ServiceListener listener, String filter)
1:86224ba:             throws InvalidSyntaxException {
1:86224ba:         delegate.addServiceListener(listener, filter);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public void addServiceListener(ServiceListener listener) {
1:86224ba:         delegate.addServiceListener(listener);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public void removeServiceListener(ServiceListener listener) {
1:86224ba:         delegate.removeServiceListener(listener);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public void addBundleListener(BundleListener listener) {
1:86224ba:         delegate.addBundleListener(listener);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public void removeBundleListener(BundleListener listener) {
1:86224ba:         delegate.removeBundleListener(listener);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public void addFrameworkListener(FrameworkListener listener) {
1:86224ba:         delegate.addFrameworkListener(listener);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public void removeFrameworkListener(FrameworkListener listener) {
1:86224ba:         delegate.removeFrameworkListener(listener);
1:86224ba:     }
1:86224ba: 
1:8b6ac4e:     @SuppressWarnings("rawtypes")
1:86224ba:     public ServiceRegistration registerService(String[] clazzes,
1:86224ba:             Object service, Dictionary properties) {
1:86224ba:         return delegate.registerService(clazzes, service, properties);
1:86224ba:     }
1:86224ba: 
1:8b6ac4e:     @SuppressWarnings("rawtypes")
1:86224ba:     public ServiceRegistration registerService(String clazz, Object service,
1:86224ba:             Dictionary properties) {
1:86224ba:         return delegate.registerService(clazz, service, properties);
1:86224ba:     }
1:86224ba: 
1:7fd4794:     public ServiceRegistration registerService(Class clazz, Object service, Dictionary props) {
1:7fd4794:         return delegate.registerService(clazz, service, props);
1:7fd4794:     }
1:7fd4794: 
1:86224ba:     public ServiceReference[] getServiceReferences(String clazz, String filter)
1:86224ba:             throws InvalidSyntaxException {
1:86224ba:         return delegate.getServiceReferences(clazz, filter);
1:86224ba:     }
1:86224ba: 
1:7fd4794:     public Collection getServiceReferences(Class clazz, String filter) throws InvalidSyntaxException {
1:7fd4794:         return delegate.getServiceReferences(clazz, filter);
1:7fd4794:     }
1:7fd4794: 
1:86224ba:     public ServiceReference[] getAllServiceReferences(String clazz,
1:86224ba:             String filter) throws InvalidSyntaxException {
1:86224ba:         return delegate.getAllServiceReferences(clazz, filter);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public ServiceReference getServiceReference(String clazz) {
1:86224ba:         return delegate.getServiceReference(clazz);
1:86224ba:     }
1:86224ba: 
1:7fd4794:     public ServiceReference getServiceReference(Class clazz) { return delegate.getServiceReference(clazz); }
1:7fd4794: 
1:86224ba:     public Object getService(ServiceReference reference) {
1:86224ba:         return delegate.getService(reference);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public boolean ungetService(ServiceReference reference) {
1:86224ba:         return delegate.ungetService(reference);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public File getDataFile(String filename) {
1:86224ba:         return delegate.getDataFile(filename);
1:86224ba:     }
1:86224ba: 
1:86224ba:     public Filter createFilter(String filter) throws InvalidSyntaxException {
1:86224ba:         return delegate.createFilter(filter);
1:86224ba:     }
1:86224ba:     
1:86224ba:     
1:86224ba: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:7fd4794
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:                 System.out.println("Could not obtain a service in time, service-ref="+
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Bundle getBundle(String filter) { return delegate.getBundle(filter); }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public ServiceRegistration registerService(Class clazz, Object service, Dictionary props) {
1:         return delegate.registerService(clazz, service, props);
1:     }
1: 
1:     public Collection getServiceReferences(Class clazz, String filter) throws InvalidSyntaxException {
1:         return delegate.getServiceReferences(clazz, filter);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public ServiceReference getServiceReference(Class clazz) { return delegate.getServiceReference(clazz); }
1: 
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:8b6ac4e
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
1:     @SuppressWarnings("rawtypes")
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.itest;
1: 
1: import java.io.File;
1: import java.io.InputStream;
1: import java.util.Dictionary;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleException;
1: import org.osgi.framework.BundleListener;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.Filter;
1: import org.osgi.framework.FrameworkListener;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceListener;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.util.tracker.ServiceTracker;
1: 
1: /**
1:  * {@link BundleContext} wrapper that adds a couple of additional utilities
0:  * @author vmahrwald
1:  *
1:  */
1: public class RichBundleContext implements BundleContext {
1:     public static final long DEFAULT_TIMEOUT = 15000;
1:     
1:     private final BundleContext delegate;
1: 
1:     public RichBundleContext(BundleContext delegate) {
1:         this.delegate = delegate;
1:     }
1:     
1: 
1:     public <T> T getService(Class<T> type) {
1:         return getService(type, null, DEFAULT_TIMEOUT);
1:     }
1:     
1:     public <T> T getService(Class<T> type, long timeout) {
1:         return getService(type, null, timeout);
1:     }
1:     
1:     public <T> T getService(Class<T> type, String filter) {
1:         return getService(type, filter, DEFAULT_TIMEOUT);
1:     }
1:     
1:     public <T> T getService(Class<T> type, String filter, long timeout) {
1:         ServiceTracker tracker = null;
1:         try {
1:             String flt;
1:             if (filter != null) {
1:                 if (filter.startsWith("(")) {
1:                     flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")" + filter + ")";
1:                 } else {
1:                     flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")(" + filter + "))";
1:                 }
1:             } else {
1:                 flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
1:             }
1:             Filter osgiFilter = FrameworkUtil.createFilter(flt);
1:             tracker = new ServiceTracker(delegate, osgiFilter, null);
1:             tracker.open();
1:             
1:             Object svc = type.cast(tracker.waitForService(timeout));
1:             if (svc == null) {
0:                 System.out.println("Could not obtain a service in time, service-ref="+ 
1:                   tracker.getServiceReference()+
1:                   ", time="+System.currentTimeMillis());
1:                 throw new RuntimeException("Gave up waiting for service " + flt);
1:             }
1:             return type.cast(svc);
1:         } catch (InvalidSyntaxException e) {
1:             throw new IllegalArgumentException("Invalid filter", e);
1:         } catch (InterruptedException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     
1:     public Bundle getBundleByName(String symbolicName) {
1:         for (Bundle b : delegate.getBundles()) {
1:             if (b.getSymbolicName().equals(symbolicName)) {
1:                 return b;
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     
1:     
1:     /*
0:      * Delegate methods
1:      */
1:     
1:     public String getProperty(String key) {
1:         return delegate.getProperty(key);
1:     }
1: 
1:     public Bundle getBundle() {
1:         return delegate.getBundle();
1:     }
1: 
1:     public Bundle installBundle(String location, InputStream input)
1:             throws BundleException {
1:         return delegate.installBundle(location, input);
1:     }
1: 
1:     public Bundle installBundle(String location) throws BundleException {
1:         return delegate.installBundle(location);
1:     }
1: 
1:     public Bundle getBundle(long id) {
1:         return delegate.getBundle(id);
1:     }
1: 
1:     public Bundle[] getBundles() {
1:         return delegate.getBundles();
1:     }
1: 
1:     public void addServiceListener(ServiceListener listener, String filter)
1:             throws InvalidSyntaxException {
1:         delegate.addServiceListener(listener, filter);
1:     }
1: 
1:     public void addServiceListener(ServiceListener listener) {
1:         delegate.addServiceListener(listener);
1:     }
1: 
1:     public void removeServiceListener(ServiceListener listener) {
1:         delegate.removeServiceListener(listener);
1:     }
1: 
1:     public void addBundleListener(BundleListener listener) {
1:         delegate.addBundleListener(listener);
1:     }
1: 
1:     public void removeBundleListener(BundleListener listener) {
1:         delegate.removeBundleListener(listener);
1:     }
1: 
1:     public void addFrameworkListener(FrameworkListener listener) {
1:         delegate.addFrameworkListener(listener);
1:     }
1: 
1:     public void removeFrameworkListener(FrameworkListener listener) {
1:         delegate.removeFrameworkListener(listener);
1:     }
1: 
1:     public ServiceRegistration registerService(String[] clazzes,
1:             Object service, Dictionary properties) {
1:         return delegate.registerService(clazzes, service, properties);
1:     }
1: 
1:     public ServiceRegistration registerService(String clazz, Object service,
1:             Dictionary properties) {
1:         return delegate.registerService(clazz, service, properties);
1:     }
1: 
1:     public ServiceReference[] getServiceReferences(String clazz, String filter)
1:             throws InvalidSyntaxException {
1:         return delegate.getServiceReferences(clazz, filter);
1:     }
1: 
1:     public ServiceReference[] getAllServiceReferences(String clazz,
1:             String filter) throws InvalidSyntaxException {
1:         return delegate.getAllServiceReferences(clazz, filter);
1:     }
1: 
1:     public ServiceReference getServiceReference(String clazz) {
1:         return delegate.getServiceReference(clazz);
1:     }
1: 
1:     public Object getService(ServiceReference reference) {
1:         return delegate.getService(reference);
1:     }
1: 
1:     public boolean ungetService(ServiceReference reference) {
1:         return delegate.ungetService(reference);
1:     }
1: 
1:     public File getDataFile(String filename) {
1:         return delegate.getDataFile(filename);
1:     }
1: 
1:     public Filter createFilter(String filter) throws InvalidSyntaxException {
1:         return delegate.createFilter(filter);
1:     }
1:     
1:     
1: }
============================================================================