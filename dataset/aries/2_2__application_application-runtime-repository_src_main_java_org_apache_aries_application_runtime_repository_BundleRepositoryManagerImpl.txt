1:ed6b010: /*
1:ed6b010:  * Licensed to the Apache Software Foundation (ASF) under one
1:ed6b010:  * or more contributor license agreements.  See the NOTICE file
1:ed6b010:  * distributed with this work for additional information
1:ed6b010:  * regarding copyright ownership.  The ASF licenses this file
1:ed6b010:  * to you under the Apache License, Version 2.0 (the
1:ed6b010:  * "License"); you may not use this file except in compliance
1:ed6b010:  * with the License.  You may obtain a copy of the License at
1:ed6b010:  *
1:ed6b010:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ed6b010:  *
1:ed6b010:  * Unless required by applicable law or agreed to in writing,
1:ed6b010:  * software distributed under the License is distributed on an
1:ed6b010:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:ed6b010:  * KIND, either express or implied.  See the License for the
1:ed6b010:  * specific language governing permissions and limitations
1:ed6b010:  * under the License.
1:ed6b010:  */
1:ed6b010: package org.apache.aries.application.runtime.repository;
2:ed6b010: 
1:ed6b010: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1:ed6b010: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1:ed6b010: import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
1:ed6b010: 
1:ed6b010: import java.util.ArrayList;
1:ed6b010: import java.util.Collection;
1:ed6b010: import java.util.Collections;
1:ed6b010: import java.util.Comparator;
1:ed6b010: import java.util.HashMap;
1:ed6b010: import java.util.Iterator;
1:ed6b010: import java.util.List;
1:ed6b010: import java.util.Map;
1:ed6b010: 
1:ed6b010: import org.apache.aries.application.DeploymentContent;
1:89f804e: import org.apache.aries.application.management.spi.repository.BundleRepository;
1:89f804e: import org.apache.aries.application.management.spi.repository.BundleRepositoryManager;
1:89f804e: import org.apache.aries.application.management.spi.repository.ContextException;
1:89f804e: import org.apache.aries.application.management.spi.repository.BundleRepository.BundleSuggestion;
1:ed6b010: import org.apache.aries.application.utils.service.ArrayServiceList;
1:ed6b010: import org.apache.aries.application.utils.service.ServiceCollection;
1:ed6b010: import org.osgi.framework.BundleContext;
1:ed6b010: import org.osgi.framework.InvalidSyntaxException;
1:ed6b010: import org.osgi.framework.ServiceReference;
1:ed6b010: import org.osgi.framework.Version;
1:ed6b010: import org.slf4j.Logger;
1:ed6b010: import org.slf4j.LoggerFactory;
1:ed6b010: 
1:ed6b010: public class BundleRepositoryManagerImpl implements BundleRepositoryManager
2:ed6b010: {    
1:ed6b010:   private static final Logger LOGGER = LoggerFactory.getLogger(BundleRepositoryManagerImpl.class);
1:ed6b010:  
1:ed6b010:   private BundleContext bc;
1:ed6b010:     
1:ed6b010:   public void setBundleContext(BundleContext bc)
1:ed6b010:   {
1:ed6b010:     LOGGER.debug(LOG_ENTRY, "setBundleContext");
1:ed6b010:     this.bc = bc;
1:ed6b010:     LOGGER.debug(LOG_EXIT, "setBundleContext");
2:ed6b010:   }
1:ed6b010:   
1:ed6b010:   public Collection<BundleRepository> getAllBundleRepositories()
1:ed6b010:   {
1:ed6b010:     LOGGER.debug(LOG_ENTRY, "getAllBundleRepositories");
1:ed6b010:     
1:ed6b010:     ServiceCollection<BundleRepository> providers = 
1:ed6b010:       new ArrayServiceList<BundleRepository>(bc);
1:ed6b010: 
1:ed6b010:     try {
1:ed6b010:       ServiceReference[] refs = bc.getServiceReferences(
1:ed6b010:           BundleRepository.class.getName(), null);
1:ed6b010: 
1:ed6b010:       if (refs != null) {
1:ed6b010:         for (ServiceReference ref : refs) {
1:ed6b010:           providers.addService(ref);
1:ed6b010:         }
1:ed6b010:       }
1:ed6b010: 
1:ed6b010:     } catch (InvalidSyntaxException e) {
1:ed6b010:       LOGGER.error(LOG_EXCEPTION, e);
1:ed6b010:     }
1:ed6b010: 
1:ed6b010:     LOGGER.debug(LOG_EXIT, "getAllBundleRepositories");
1:ed6b010:     
1:ed6b010:     return providers;
1:ed6b010:   }
1:ed6b010: 
1:ed6b010:   public Collection<BundleRepository> getBundleRepositoryCollection(String appName, String appVersion)
1:ed6b010:   {
1:ed6b010:     LOGGER.debug(LOG_ENTRY, "getBundleRepositoryCollection", new Object[] {appName, appVersion});
1:ed6b010:     
1:ed6b010:     ServiceCollection<BundleRepository> providers = 
1:ed6b010:       new ArrayServiceList<BundleRepository>(bc);
1:ed6b010: 
1:ed6b010:     String appScope = appName + "_" + appVersion;
1:ed6b010:     
1:3006a3e:     String filter = "(|(" + BundleRepository.REPOSITORY_SCOPE + "=" + BundleRepository.GLOBAL_SCOPE + ")(" + BundleRepository.REPOSITORY_SCOPE + "="
1:ed6b010:         + appScope + "))";
1:ed6b010:     try {
1:ed6b010:       ServiceReference[] refs = bc.getServiceReferences(
1:ed6b010:           BundleRepository.class.getName(), filter);
1:ed6b010: 
1:ed6b010:       if (refs != null) {
1:ed6b010:         for (ServiceReference ref : refs) {
1:ed6b010:           providers.addService(ref);
1:ed6b010:         }
1:ed6b010:       }
1:ed6b010: 
1:ed6b010:     } catch (InvalidSyntaxException e) {
1:ed6b010:       LOGGER.error(LOG_EXCEPTION, e);
1:ed6b010:     }
1:ed6b010: 
1:ed6b010:     LOGGER.debug(LOG_EXIT, "getBundleRepositoryCollection");
1:ed6b010:     
1:ed6b010:     return providers;
1:ed6b010:   }
1:ed6b010: 
1:ed6b010:   public Map<DeploymentContent, BundleSuggestion> getBundleSuggestions(Collection<BundleRepository> providers, Collection<DeploymentContent> content)
1:ed6b010:     throws ContextException
1:ed6b010:   {
1:ed6b010:     LOGGER.debug(LOG_ENTRY, "getBundleSuggestions", new Object[] {content, providers});
1:ed6b010:     
1:ed6b010:     Map<DeploymentContent, BundleSuggestion> urlToBeInstalled = new HashMap<DeploymentContent, BundleSuggestion>();
1:ed6b010:     Iterator<DeploymentContent> it = content.iterator();
1:ed6b010:     
1:ed6b010:     while (it.hasNext()) {
1:ed6b010:       DeploymentContent bundleToFind = it.next();
1:ed6b010: 
1:ed6b010:       Map<Version, List<BundleSuggestion>> bundlesuggestions = new HashMap<Version, List<BundleSuggestion>>();
1:ed6b010: 
1:ed6b010:       for (BundleRepository obj : providers) {
1:ed6b010:         BundleSuggestion suggestion = obj.suggestBundleToUse(bundleToFind);
1:ed6b010: 
1:ed6b010:         if (suggestion != null) {
1:ed6b010:           List<BundleSuggestion> suggestions = bundlesuggestions.get(suggestion.getVersion());
1:ed6b010: 
1:ed6b010:           if (suggestions == null) {
1:ed6b010:             suggestions = new ArrayList<BundleSuggestion>();
1:ed6b010:             bundlesuggestions.put(suggestion.getVersion(), suggestions);
1:ed6b010:           }
1:ed6b010: 
1:ed6b010:           suggestions.add(suggestion);
1:ed6b010:         }
1:ed6b010:       }
1:ed6b010: 
1:ed6b010:       BundleSuggestion suggestion = null;
1:ed6b010: 
1:ed6b010:       if (!!!bundlesuggestions.isEmpty()) {
1:ed6b010: 
1:ed6b010:         List<BundleSuggestion> thoughts = bundlesuggestions.get(bundleToFind.getExactVersion());
1:ed6b010: 
1:3006a3e:         if (thoughts != null) {
1:3006a3e:           Collections.sort(thoughts, new Comparator<BundleSuggestion>() {
1:3006a3e:             public int compare(BundleSuggestion o1, BundleSuggestion o2)
1:3006a3e:             {
1:3006a3e:               return o1.getCost() - o2.getCost();
1:3006a3e:             }
1:3006a3e:           });
1:3006a3e:   
1:3006a3e:           suggestion = thoughts.get(0);
1:3006a3e:         }
1:ed6b010:       }
1:ed6b010: 
1:ed6b010:       // add the suggestion to the list
1:ed6b010:       if (suggestion != null) {
1:ed6b010:         urlToBeInstalled.put(bundleToFind, suggestion);
1:ed6b010:       } else {
1:3006a3e:         throw new ContextException("Unable to find bundle "+bundleToFind.getContentName() + "/" + bundleToFind.getExactVersion());
1:ed6b010:       }
1:ed6b010:     }
1:ed6b010:     
1:ed6b010:     LOGGER.debug(LOG_EXIT, "getBundleSuggestions", new Object[] { urlToBeInstalled });
1:ed6b010: 
1:ed6b010:     return urlToBeInstalled;
1:ed6b010:   }
1:ed6b010: 
1:ed6b010:   public Map<DeploymentContent, BundleSuggestion> getBundleSuggestions(String applicationName,
1:ed6b010:       String applicationVersion, Collection<DeploymentContent> content) throws ContextException
1:ed6b010:   {
1:ed6b010:     return getBundleSuggestions(getBundleRepositoryCollection(applicationName, applicationVersion), content);
1:ed6b010:   }
1:ed6b010: 
1:ed6b010:   public Map<DeploymentContent, BundleSuggestion> getBundleSuggestions(
1:ed6b010:       Collection<DeploymentContent> content) throws ContextException
1:ed6b010:   {
1:ed6b010:     return getBundleSuggestions(getAllBundleRepositories(), content);
1:ed6b010:   }  
1:ed6b010: }
============================================================================
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:89f804e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.application.management.spi.repository.BundleRepository;
1: import org.apache.aries.application.management.spi.repository.BundleRepositoryManager;
1: import org.apache.aries.application.management.spi.repository.ContextException;
1: import org.apache.aries.application.management.spi.repository.BundleRepository.BundleSuggestion;
commit:a435fc6
/////////////////////////////////////////////////////////////////////////
commit:3006a3e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     String filter = "(|(" + BundleRepository.REPOSITORY_SCOPE + "=" + BundleRepository.GLOBAL_SCOPE + ")(" + BundleRepository.REPOSITORY_SCOPE + "="
/////////////////////////////////////////////////////////////////////////
1:         if (thoughts != null) {
1:           Collections.sort(thoughts, new Comparator<BundleSuggestion>() {
1:             public int compare(BundleSuggestion o1, BundleSuggestion o2)
1:             {
1:               return o1.getCost() - o2.getCost();
1:             }
1:           });
1:   
1:           suggestion = thoughts.get(0);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         throw new ContextException("Unable to find bundle "+bundleToFind.getContentName() + "/" + bundleToFind.getExactVersion());
author:Mark Nuttall
-------------------------------------------------------------------------------
commit:ed6b010
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.application.runtime.repository;
1: 
1: import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
1: import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.aries.application.DeploymentContent;
0: import org.apache.aries.application.management.BundleRepository;
0: import org.apache.aries.application.management.BundleRepositoryManager;
0: import org.apache.aries.application.management.ContextException;
0: import org.apache.aries.application.management.BundleRepository.BundleSuggestion;
1: import org.apache.aries.application.utils.service.ArrayServiceList;
1: import org.apache.aries.application.utils.service.ServiceCollection;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.Version;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class BundleRepositoryManagerImpl implements BundleRepositoryManager
1: {    
1:   private static final Logger LOGGER = LoggerFactory.getLogger(BundleRepositoryManagerImpl.class);
0:   public static final String REPOSITORY_SCOPE = "repositoryScope";
1:  
1:   private BundleContext bc;
1:     
1:   public void setBundleContext(BundleContext bc)
1:   {
1:     LOGGER.debug(LOG_ENTRY, "setBundleContext");
1:     this.bc = bc;
1:     LOGGER.debug(LOG_EXIT, "setBundleContext");
1:   }
1:   
1:   public Collection<BundleRepository> getAllBundleRepositories()
1:   {
1:     LOGGER.debug(LOG_ENTRY, "getAllBundleRepositories");
1:     
1:     ServiceCollection<BundleRepository> providers = 
1:       new ArrayServiceList<BundleRepository>(bc);
1: 
1:     try {
1:       ServiceReference[] refs = bc.getServiceReferences(
1:           BundleRepository.class.getName(), null);
1: 
1:       if (refs != null) {
1:         for (ServiceReference ref : refs) {
1:           providers.addService(ref);
1:         }
1:       }
1: 
1:     } catch (InvalidSyntaxException e) {
1:       LOGGER.error(LOG_EXCEPTION, e);
1:     }
1: 
1:     LOGGER.debug(LOG_EXIT, "getAllBundleRepositories");
1:     
1:     return providers;
1:   }
1: 
1:   public Collection<BundleRepository> getBundleRepositoryCollection(String appName, String appVersion)
1:   {
1:     LOGGER.debug(LOG_ENTRY, "getBundleRepositoryCollection", new Object[] {appName, appVersion});
1:     
1:     ServiceCollection<BundleRepository> providers = 
1:       new ArrayServiceList<BundleRepository>(bc);
1: 
1:     String appScope = appName + "_" + appVersion;
1:     
0:     String filter = "(|(" + REPOSITORY_SCOPE + "=global)(" + REPOSITORY_SCOPE + "="
1:         + appScope + "))";
1:     try {
1:       ServiceReference[] refs = bc.getServiceReferences(
1:           BundleRepository.class.getName(), filter);
1: 
1:       if (refs != null) {
1:         for (ServiceReference ref : refs) {
1:           providers.addService(ref);
1:         }
1:       }
1: 
1:     } catch (InvalidSyntaxException e) {
1:       LOGGER.error(LOG_EXCEPTION, e);
1:     }
1: 
1:     LOGGER.debug(LOG_EXIT, "getBundleRepositoryCollection");
1:     
1:     return providers;
1:   }
1: 
1:   public Map<DeploymentContent, BundleSuggestion> getBundleSuggestions(Collection<BundleRepository> providers, Collection<DeploymentContent> content)
1:     throws ContextException
1:   {
1:     LOGGER.debug(LOG_ENTRY, "getBundleSuggestions", new Object[] {content, providers});
1:     
1:     Map<DeploymentContent, BundleSuggestion> urlToBeInstalled = new HashMap<DeploymentContent, BundleSuggestion>();
1:     Iterator<DeploymentContent> it = content.iterator();
1:     
1:     while (it.hasNext()) {
1:       DeploymentContent bundleToFind = it.next();
1: 
1:       Map<Version, List<BundleSuggestion>> bundlesuggestions = new HashMap<Version, List<BundleSuggestion>>();
1: 
1:       for (BundleRepository obj : providers) {
1:         BundleSuggestion suggestion = obj.suggestBundleToUse(bundleToFind);
1: 
1:         if (suggestion != null) {
1:           List<BundleSuggestion> suggestions = bundlesuggestions.get(suggestion.getVersion());
1: 
1:           if (suggestions == null) {
1:             suggestions = new ArrayList<BundleSuggestion>();
1:             bundlesuggestions.put(suggestion.getVersion(), suggestions);
1:           }
1: 
1:           suggestions.add(suggestion);
1:         }
1:       }
1: 
1:       BundleSuggestion suggestion = null;
1: 
1:       if (!!!bundlesuggestions.isEmpty()) {
1: 
1:         List<BundleSuggestion> thoughts = bundlesuggestions.get(bundleToFind.getExactVersion());
1: 
0:         Collections.sort(thoughts, new Comparator<BundleSuggestion>() {
0:           public int compare(BundleSuggestion o1, BundleSuggestion o2)
1:           {
0:             return o1.getCost() - o2.getCost();
1:           }
0:         });
1: 
0:         suggestion = thoughts.get(0);
1:       }
1: 
1:       // add the suggestion to the list
1:       if (suggestion != null) {
1:         urlToBeInstalled.put(bundleToFind, suggestion);
0:         it.remove();
1:       } else {
0:         throw new ContextException("Unable to find bundle based on bundle URL " + suggestion);
1:       }
1:     }
1:     
1:     LOGGER.debug(LOG_EXIT, "getBundleSuggestions", new Object[] { urlToBeInstalled });
1: 
1:     return urlToBeInstalled;
1:   }
1: 
1:   public Map<DeploymentContent, BundleSuggestion> getBundleSuggestions(String applicationName,
1:       String applicationVersion, Collection<DeploymentContent> content) throws ContextException
1:   {
1:     return getBundleSuggestions(getBundleRepositoryCollection(applicationName, applicationVersion), content);
1:   }
1: 
1:   public Map<DeploymentContent, BundleSuggestion> getBundleSuggestions(
1:       Collection<DeploymentContent> content) throws ContextException
1:   {
1:     return getBundleSuggestions(getAllBundleRepositories(), content);
1:   }  
1: }
============================================================================