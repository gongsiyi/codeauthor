1:d80741a: /*
1:d80741a:  * Licensed to the Apache Software Foundation (ASF) under one
1:d80741a:  * or more contributor license agreements.  See the NOTICE file
1:d80741a:  * distributed with this work for additional information
1:d80741a:  * regarding copyright ownership.  The ASF licenses this file
1:d80741a:  * to you under the Apache License, Version 2.0 (the
1:d80741a:  * "License"); you may not use this file except in compliance
1:d80741a:  * with the License.  You may obtain a copy of the License at
1:d80741a:  *
1:d80741a:  *   http://www.apache.org/licenses/LICENSE-2.0
1:d80741a:  *
1:d80741a:  * Unless required by applicable law or agreed to in writing,
1:d80741a:  * software distributed under the License is distributed on an
1:d80741a:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:d80741a:  * KIND, either express or implied.  See the License for the
1:d80741a:  * specific language governing permissions and limitations
1:d80741a:  * under the License.
1:d80741a:  */
1:d80741a: package org.apache.aries.web.url;
1:d80741a: 
1:d80741a: import java.io.IOException;
1:d80741a: import java.net.URL;
1:d80741a: import java.net.URLConnection;
1:d80741a: import java.util.Dictionary;
1:d80741a: import java.util.Hashtable;
1:d80741a: import java.util.StringTokenizer;
1:d80741a: 
1:50ca3da: import org.apache.aries.web.converter.impl.CaseInsensitiveMap;
1:d80741a: import org.osgi.framework.BundleActivator;
1:d80741a: import org.osgi.framework.BundleContext;
1:d80741a: import org.osgi.service.url.AbstractURLStreamHandlerService;
1:d80741a: import org.osgi.service.url.URLConstants;
1:d80741a: import org.osgi.service.url.URLStreamHandlerService;
1:d80741a: 
1:d80741a: public class WAR_URLServiceHandler extends AbstractURLStreamHandlerService implements
1:d80741a:     BundleActivator
1:d80741a: {
1:d80741a: 
1:d80741a:   private static final String urlScheme = "webbundle";
1:d80741a:   
1:d80741a:   public WAR_URLServiceHandler()
1:d80741a:   {
1:d80741a:     super();
1:d80741a:   }
1:d80741a: 
1:d80741a:   public URLConnection openConnection(URL url) throws IOException
1:d80741a:   {
1:d80741a:     // Create properties object
1:50ca3da:     CaseInsensitiveMap properties = new CaseInsensitiveMap();
1:d80741a:     if (url.getQuery() != null)
1:d80741a:     {
1:d80741a:       String propString = url.getQuery();
1:d80741a:       StringTokenizer tok = new StringTokenizer(propString);
1:d80741a:       boolean firstProperty = true;
1:d80741a:       
1:d80741a:       // We now parse the property pairs query string.
1:d80741a:       // This has the format name=value&name=value...(etc)
1:d80741a:       while (tok.hasMoreElements())
1:d80741a:       {
1:d80741a:         String name = tok.nextToken("=");
1:d80741a:         // "name" will now contain the name of the property we are trying to 
1:d80741a:         // set. Property pairs are seperated by the '&' symbol. The tokenizer
1:d80741a:         // will include this symbol in the token so we need to return it from
1:d80741a:         // all property names except the first.
1:d80741a:         if (!!!firstProperty)
1:d80741a:           name = name.substring(1);
1:d80741a:         String value = tok.nextToken("&").substring(1);
1:d80741a:         properties.put(name, value);
1:d80741a:         firstProperty = false;
1:d80741a:       }
1:d80741a:     }
1:d80741a:         
1:d80741a:     return new WARConnection(new URL(url.getPath()), properties);
1:d80741a:   }
1:d80741a: 
1:d80741a:   @Override
1:d80741a:   public void parseURL(URL u, String spec, int start, int limit)
1:d80741a:   {
1:d80741a:     int propertyStart = spec.lastIndexOf('?') + 1;
1:d80741a:     String propertyString = null;
1:d80741a:     if (propertyStart > 0) 
1:d80741a:     {
1:d80741a:       propertyString = spec.substring(propertyStart, spec.length());
1:d80741a:       propertyStart--;
1:d80741a:     }
1:d80741a:     else
1:d80741a:       propertyStart = spec.length();
1:d80741a: 
1:d80741a:     String warURL = spec.substring(start, propertyStart);
1:d80741a:     
1:d80741a:     // For our war url, we use the "path" field to specify the full url path to the WAR file,
1:d80741a:     // and we use the "query" field to specify the properties for the WAB manifest
1:d80741a:     
1:d80741a:     setURL(u, urlScheme, null, 0, null, null, warURL, propertyString, null);
1:d80741a:   }
1:d80741a: 
1:d80741a:   public void start(BundleContext context) throws Exception
1:d80741a:   {
1:9e668db:     Dictionary<String, Object> properties = new Hashtable<String, Object>();
1:d80741a:     properties.put( URLConstants.URL_HANDLER_PROTOCOL, new String[] {urlScheme});
1:d80741a:     context.registerService(URLStreamHandlerService.class.getName(), this, properties);
1:d80741a:   }
1:d80741a: 
1:d80741a:   public void stop(BundleContext arg0) throws Exception
1:d80741a:   {
1:d80741a:     // TODO Auto-generated method stub
1:d80741a:     
1:d80741a:   }
1:d80741a: 
1:d80741a: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:9e668db
/////////////////////////////////////////////////////////////////////////
1:     Dictionary<String, Object> properties = new Hashtable<String, Object>();
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:50ca3da
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.web.converter.impl.CaseInsensitiveMap;
/////////////////////////////////////////////////////////////////////////
1:     CaseInsensitiveMap properties = new CaseInsensitiveMap();
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:d80741a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.web.url;
1: 
1: import java.io.IOException;
1: import java.net.URL;
1: import java.net.URLConnection;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
0: import java.util.Properties;
1: import java.util.StringTokenizer;
1: 
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.url.AbstractURLStreamHandlerService;
1: import org.osgi.service.url.URLConstants;
1: import org.osgi.service.url.URLStreamHandlerService;
1: 
1: public class WAR_URLServiceHandler extends AbstractURLStreamHandlerService implements
1:     BundleActivator
1: {
1: 
1:   private static final String urlScheme = "webbundle";
1:   
1:   public WAR_URLServiceHandler()
1:   {
1:     super();
1:   }
1: 
1:   public URLConnection openConnection(URL url) throws IOException
1:   {
1:     // Create properties object
0:     Properties properties = new Properties();
1:     if (url.getQuery() != null)
1:     {
1:       String propString = url.getQuery();
1:       StringTokenizer tok = new StringTokenizer(propString);
1:       boolean firstProperty = true;
1:       
1:       // We now parse the property pairs query string.
1:       // This has the format name=value&name=value...(etc)
1:       while (tok.hasMoreElements())
1:       {
1:         String name = tok.nextToken("=");
1:         // "name" will now contain the name of the property we are trying to 
1:         // set. Property pairs are seperated by the '&' symbol. The tokenizer
1:         // will include this symbol in the token so we need to return it from
1:         // all property names except the first.
1:         if (!!!firstProperty)
1:           name = name.substring(1);
1:         String value = tok.nextToken("&").substring(1);
1:         properties.put(name, value);
1:         firstProperty = false;
1:       }
1:     }
1:         
1:     return new WARConnection(new URL(url.getPath()), properties);
1:   }
1: 
1:   @Override
1:   public void parseURL(URL u, String spec, int start, int limit)
1:   {
1:     int propertyStart = spec.lastIndexOf('?') + 1;
1:     String propertyString = null;
1:     if (propertyStart > 0) 
1:     {
1:       propertyString = spec.substring(propertyStart, spec.length());
1:       propertyStart--;
1:     }
1:     else
1:       propertyStart = spec.length();
1: 
1:     String warURL = spec.substring(start, propertyStart);
1:     
1:     // For our war url, we use the "path" field to specify the full url path to the WAR file,
1:     // and we use the "query" field to specify the properties for the WAB manifest
1:     
1:     setURL(u, urlScheme, null, 0, null, null, warURL, propertyString, null);
1:   }
1: 
1:   public void start(BundleContext context) throws Exception
1:   {
0:     Dictionary properties = new Hashtable();
1:     properties.put( URLConstants.URL_HANDLER_PROTOCOL, new String[] {urlScheme});
1:     context.registerService(URLStreamHandlerService.class.getName(), this, properties);
1:   }
1: 
1:   public void stop(BundleContext arg0) throws Exception
1:   {
1:     // TODO Auto-generated method stub
1:     
1:   }
1: 
1: }
============================================================================