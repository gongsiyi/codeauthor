1:7a355b2: /*
1:7a355b2:  * Licensed to the Apache Software Foundation (ASF) under one
1:7a355b2:  * or more contributor license agreements.  See the NOTICE file
1:7a355b2:  * distributed with this work for additional information
1:7a355b2:  * regarding copyright ownership.  The ASF licenses this file
1:7a355b2:  * to you under the Apache License, Version 2.0 (the
1:7a355b2:  * "License"); you may not use this file except in compliance
1:7a355b2:  * with the License.  You may obtain a copy of the License at
1:7a355b2:  *
1:7a355b2:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7a355b2:  *
1:7a355b2:  * Unless required by applicable law or agreed to in writing,
1:7a355b2:  * software distributed under the License is distributed on an
1:7a355b2:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7a355b2:  * KIND, either express or implied.  See the License for the
1:7a355b2:  * specific language governing permissions and limitations
1:7a355b2:  * under the License.
1:7a355b2:  */
1:7a355b2: package org.apache.aries.isolated.config;
1:7a355b2: 
1:7a355b2: import java.util.Dictionary;
1:7a355b2: import java.util.Properties;
1:7a355b2: 
1:7a355b2: import org.apache.aries.isolated.sample.HelloWorld;
1:7a355b2: import org.apache.aries.isolated.sample.HelloWorldImpl;
1:7a355b2: import org.osgi.framework.BundleActivator;
1:7a355b2: import org.osgi.framework.BundleContext;
1:7a355b2: import org.osgi.framework.Constants;
1:7a355b2: import org.osgi.framework.ServiceRegistration;
1:7a355b2: import org.osgi.service.cm.ConfigurationException;
1:7a355b2: import org.osgi.service.cm.ManagedService;
1:7a355b2: 
1:7a355b2: public class HelloWorldManagedServiceImpl implements BundleActivator, ManagedService
1:7a355b2: {
1:7a355b2: 	private BundleContext context;
1:7a355b2: 	private HelloWorldImpl hw;
1:7a355b2: 	private ServiceRegistration msRegistration;
1:7a355b2: 	private ServiceRegistration hwRegistration;
1:7a355b2: 	
1:7a355b2: 	/*
1:7a355b2: 	 * (non-Javadoc)
1:7a355b2: 	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
1:7a355b2: 	 */
1:7a355b2: 	public void start(BundleContext context) throws Exception
1:7a355b2: 	{
1:7a355b2: 		Properties props = new Properties();
1:7a355b2: 		props.put(Constants.SERVICE_PID, "helloworld-mn");
1:7a355b2: 		this.context = context;
1:0223547: 		this.msRegistration = context.registerService(ManagedService.class.getName(), this, (Dictionary) props);
1:7a355b2: 		this.hwRegistration = null;
1:7a355b2: 		
1:7a355b2: 		//manually call our update to make sure the HW service is exposed out
1:7a355b2: 		updated(null);
1:7a355b2: 	}
1:7a355b2: 
1:7a355b2: 	/*
1:7a355b2: 	 * (non-Javadoc)
1:7a355b2: 	 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
1:7a355b2: 	 */
1:7a355b2: 	public synchronized void stop(BundleContext context) throws Exception 
1:7a355b2: 	{
1:7a355b2: 		this.msRegistration.unregister();
1:7a355b2: 		
1:7a355b2: 		if (this.hwRegistration != null)
1:7a355b2: 		{
1:7a355b2: 			this.hwRegistration.unregister();
1:7a355b2: 		}
1:7a355b2: 		
1:7a355b2: 		this.context = null;
1:7a355b2: 		this.hwRegistration = null;
1:7a355b2: 		this.msRegistration = null;
1:7a355b2: 	}
1:7a355b2: 
1:7a355b2: 	/**
1:7a355b2: 	 * This method will re-register the helloworld service to easily track when updates
1:7a355b2: 	 * occur to configuration.
1:7a355b2: 	 */
1:7a355b2: 	public synchronized void updated(Dictionary properties) throws ConfigurationException 
1:7a355b2: 	{
1:7a355b2: 		if (context != null) //means we have been stopped
1:7a355b2: 		{
1:7a355b2: 			if (hwRegistration != null)
1:7a355b2: 			{
1:7a355b2: 				hwRegistration.unregister();
1:7a355b2: 			}
1:7a355b2: 			
1:7a355b2: 			if (hw == null)
1:7a355b2: 			{
1:7a355b2: 				hw = new HelloWorldImpl();
1:7a355b2: 			}
1:7a355b2: 			
1:7a355b2: 			if (properties != null)
1:7a355b2: 			{
1:7a355b2: 				hw.setMessage((String)properties.get("message"));
1:7a355b2: 			}
1:7a355b2: 			
1:7a355b2: 			hwRegistration = context.registerService(HelloWorld.class.getName(), hw, null);
1:7a355b2: 		}
1:7a355b2: 	}
1:7a355b2: }
============================================================================
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:0223547
/////////////////////////////////////////////////////////////////////////
1: 		this.msRegistration = context.registerService(ManagedService.class.getName(), this, (Dictionary) props);
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7a355b2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.isolated.config;
1: 
1: import java.util.Dictionary;
1: import java.util.Properties;
1: 
1: import org.apache.aries.isolated.sample.HelloWorld;
1: import org.apache.aries.isolated.sample.HelloWorldImpl;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedService;
1: 
1: public class HelloWorldManagedServiceImpl implements BundleActivator, ManagedService
1: {
1: 	private BundleContext context;
1: 	private HelloWorldImpl hw;
1: 	private ServiceRegistration msRegistration;
1: 	private ServiceRegistration hwRegistration;
1: 	
1: 	/*
1: 	 * (non-Javadoc)
1: 	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
1: 	 */
1: 	public void start(BundleContext context) throws Exception
1: 	{
1: 		Properties props = new Properties();
1: 		props.put(Constants.SERVICE_PID, "helloworld-mn");
1: 		this.context = context;
0: 		this.msRegistration = context.registerService(ManagedService.class.getName(), this, props);
1: 		this.hwRegistration = null;
1: 		
1: 		//manually call our update to make sure the HW service is exposed out
1: 		updated(null);
1: 	}
1: 
1: 	/*
1: 	 * (non-Javadoc)
1: 	 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
1: 	 */
1: 	public synchronized void stop(BundleContext context) throws Exception 
1: 	{
1: 		this.msRegistration.unregister();
1: 		
1: 		if (this.hwRegistration != null)
1: 		{
1: 			this.hwRegistration.unregister();
1: 		}
1: 		
1: 		this.context = null;
1: 		this.hwRegistration = null;
1: 		this.msRegistration = null;
1: 	}
1: 
1: 	/**
1: 	 * This method will re-register the helloworld service to easily track when updates
1: 	 * occur to configuration.
1: 	 */
1: 	public synchronized void updated(Dictionary properties) throws ConfigurationException 
1: 	{
1: 		if (context != null) //means we have been stopped
1: 		{
1: 			if (hwRegistration != null)
1: 			{
1: 				hwRegistration.unregister();
1: 			}
1: 			
1: 			if (hw == null)
1: 			{
1: 				hw = new HelloWorldImpl();
1: 			}
1: 			
1: 			if (properties != null)
1: 			{
1: 				hw.setMessage((String)properties.get("message"));
1: 			}
1: 			
1: 			hwRegistration = context.registerService(HelloWorld.class.getName(), hw, null);
1: 		}
1: 	}
1: }
============================================================================