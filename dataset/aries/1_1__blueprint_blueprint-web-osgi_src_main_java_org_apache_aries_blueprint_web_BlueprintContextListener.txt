1:81c8b98: /**
1:81c8b98:  *
1:81c8b98:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:81c8b98:  * contributor license agreements.  See the NOTICE file distributed with
1:81c8b98:  * this work for additional information regarding copyright ownership.
1:81c8b98:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:81c8b98:  * (the "License"); you may not use this file except in compliance with
1:81c8b98:  * the License.  You may obtain a copy of the License at
1:81c8b98:  *
1:81c8b98:  * http://www.apache.org/licenses/LICENSE-2.0
1:81c8b98:  *
1:81c8b98:  * Unless required by applicable law or agreed to in writing, software
1:81c8b98:  * distributed under the License is distributed on an "AS IS" BASIS,
1:81c8b98:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:81c8b98:  * See the License for the specific language governing permissions and
1:81c8b98:  * limitations under the License.
1:81c8b98:  */
1:81c8b98: package org.apache.aries.blueprint.web;
1:81c8b98: 
1:81c8b98: import java.net.URL;
1:81c8b98: import java.util.LinkedList;
1:81c8b98: import java.util.List;
1:81c8b98: 
1:81c8b98: import javax.servlet.ServletContext;
1:81c8b98: import javax.servlet.ServletContextEvent;
1:81c8b98: import javax.servlet.ServletContextListener;
1:81c8b98: 
1:81c8b98: import org.apache.aries.blueprint.services.BlueprintExtenderService;
1:81c8b98: import org.osgi.framework.Bundle;
1:81c8b98: import org.osgi.framework.BundleContext;
1:81c8b98: import org.osgi.framework.ServiceReference;
1:81c8b98: import org.osgi.service.blueprint.container.BlueprintContainer;
1:81c8b98: 
1:81c8b98: /**
1:81c8b98:  * OSGI Blueprint-aware ServletContextListener which use Aties BlueprintExtenderService
1:81c8b98:  * to create Blueprint Container for the application bundle and save it as ServletContext attribute
1:81c8b98:  *  
1:81c8b98:  */
1:81c8b98: public class BlueprintContextListener implements ServletContextListener {
1:81c8b98:     public static final String CONTAINER_ATTRIBUTE = "org.apache.aries.blueprint.container";
1:81c8b98: 
1:81c8b98:     public static final String LOCATION_PARAM = "blueprintLocation";
1:81c8b98:     public static final String DEFAULT_LOCATION = "OSGI-INF/blueprint.xml";
1:81c8b98: 
1:81c8b98:     public static final String BUNDLE_CONTEXT_PARAM = "blueprintContext";
1:81c8b98:     public static final String DEFAULT_BUNDLE_CONTEXT_ATTRIBUTE = "osgi-bundlecontext";
1:81c8b98: 
1:81c8b98:     public void contextInitialized(ServletContextEvent event) {
1:81c8b98:         ServletContext sc = event.getServletContext();
1:81c8b98: 
1:81c8b98:         // Get bundle context
1:81c8b98:         BundleContext bc = getBundleContext(sc);
1:81c8b98:         if (bc == null) {
1:81c8b98:             return;
1:81c8b98:         }
1:81c8b98: 
1:81c8b98:         // Get BlueprintExtenderService
1:81c8b98:         BlueprintExtenderService blueprintExtender = getBlueprintExtenderService(bc);
1:81c8b98:         if (blueprintExtender == null) {
1:81c8b98:             return;
1:81c8b98:         }
1:81c8b98: 
1:81c8b98:         try {
1:81c8b98:             // Check if the extender has already created a container
1:81c8b98:             BlueprintContainer container = blueprintExtender.getContainer(bc.getBundle());
1:81c8b98: 
1:81c8b98:             if (container == null) {
1:81c8b98:                 List<Object> blueprintResources = getBlueprintAppList(sc, bc.getBundle());
1:81c8b98:                 if (blueprintResources.isEmpty()) {
1:81c8b98:                     // The extender is expected to scan a bundle
1:81c8b98:                     container = blueprintExtender.createContainer(bc.getBundle());
1:81c8b98:                 } else {
1:81c8b98:                     // Use specified resources to create a container
1:81c8b98:                     container = blueprintExtender.createContainer(bc.getBundle(), blueprintResources);
1:81c8b98:                 }
1:81c8b98:             }
1:81c8b98:             if (container == null) {
1:81c8b98:                 sc.log("Failed to startup blueprint container.");
1:81c8b98:             } else {
1:81c8b98:                 sc.setAttribute(CONTAINER_ATTRIBUTE, container);
1:81c8b98:             }
1:81c8b98:         } catch (Exception e) {
1:81c8b98:             sc.log("Failed to startup blueprint container. " + e, e);
1:81c8b98:         }
1:81c8b98:     }
1:81c8b98: 
1:81c8b98:     public void contextDestroyed(ServletContextEvent event) {
1:81c8b98:         ServletContext sc = event.getServletContext();
1:81c8b98:         BlueprintContainer container = (BlueprintContainer)sc.getAttribute(CONTAINER_ATTRIBUTE);
1:81c8b98:         if (container == null) {
1:81c8b98:             return;
1:81c8b98:         }
1:81c8b98: 
1:81c8b98:         BundleContext bc = getBundleContext(sc);
1:81c8b98:         if (bc == null) {
1:81c8b98:             return;
1:81c8b98:         }
1:81c8b98: 
1:81c8b98:         BlueprintExtenderService blueprintExtender = getBlueprintExtenderService(bc);
1:81c8b98:         if (blueprintExtender == null) {
1:81c8b98:             return;
1:81c8b98:         }
1:81c8b98: 
1:81c8b98:         blueprintExtender.destroyContainer(bc.getBundle(), container);
1:81c8b98:     }
1:81c8b98: 
1:81c8b98:     private List<Object> getBlueprintAppList(ServletContext sc, Bundle applicationBundle) {
1:81c8b98:         String location = sc.getInitParameter(LOCATION_PARAM);
1:81c8b98:         if (location == null) {
1:81c8b98:             location = DEFAULT_LOCATION;
1:81c8b98:         }
1:81c8b98: 
1:81c8b98:         List<Object> blueprintResources = new LinkedList<Object>();
1:81c8b98:         URL entry = applicationBundle.getEntry(location);
1:81c8b98:         if (entry != null) {
1:81c8b98:             blueprintResources.add(entry);
1:81c8b98:         }
1:81c8b98: 
1:81c8b98:         return blueprintResources;
1:81c8b98:     }
1:81c8b98: 
1:81c8b98:     private BundleContext getBundleContext(ServletContext sc) {
1:81c8b98:         String bundleContextAttributeName = sc
1:81c8b98:                 .getInitParameter(BUNDLE_CONTEXT_PARAM);
1:81c8b98:         if (bundleContextAttributeName == null) {
1:81c8b98:             bundleContextAttributeName = DEFAULT_BUNDLE_CONTEXT_ATTRIBUTE;
1:81c8b98:         }
1:81c8b98: 
1:81c8b98:         BundleContext bc = (BundleContext) sc.getAttribute(bundleContextAttributeName);
1:81c8b98:         if (bc == null) {
1:81c8b98:             sc.log("Failed to startup blueprint container: no BundleContext is available");
1:81c8b98:         }
1:81c8b98:         return bc;
1:81c8b98:     }
1:81c8b98: 
1:81c8b98:     private BlueprintExtenderService getBlueprintExtenderService(BundleContext bc) {
1:81c8b98:         ServiceReference sref = bc
1:81c8b98:                 .getServiceReference(BlueprintExtenderService.class.getName());
1:81c8b98:         if (sref != null) {
1:81c8b98:             return (BlueprintExtenderService) bc.getService(sref);
1:81c8b98:         } else {
1:81c8b98:             return null;
1:81c8b98:         }
1:81c8b98:     }
1:81c8b98: }
============================================================================
author:Sergey Beryozkin
-------------------------------------------------------------------------------
commit:81c8b98
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.aries.blueprint.web;
1: 
1: import java.net.URL;
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import javax.servlet.ServletContext;
1: import javax.servlet.ServletContextEvent;
1: import javax.servlet.ServletContextListener;
1: 
1: import org.apache.aries.blueprint.services.BlueprintExtenderService;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.ServiceReference;
1: import org.osgi.service.blueprint.container.BlueprintContainer;
1: 
1: /**
1:  * OSGI Blueprint-aware ServletContextListener which use Aties BlueprintExtenderService
1:  * to create Blueprint Container for the application bundle and save it as ServletContext attribute
1:  *  
1:  */
1: public class BlueprintContextListener implements ServletContextListener {
1:     public static final String CONTAINER_ATTRIBUTE = "org.apache.aries.blueprint.container";
1: 
1:     public static final String LOCATION_PARAM = "blueprintLocation";
1:     public static final String DEFAULT_LOCATION = "OSGI-INF/blueprint.xml";
1: 
1:     public static final String BUNDLE_CONTEXT_PARAM = "blueprintContext";
1:     public static final String DEFAULT_BUNDLE_CONTEXT_ATTRIBUTE = "osgi-bundlecontext";
1: 
1:     public void contextInitialized(ServletContextEvent event) {
1:         ServletContext sc = event.getServletContext();
1: 
1:         // Get bundle context
1:         BundleContext bc = getBundleContext(sc);
1:         if (bc == null) {
1:             return;
1:         }
1: 
1:         // Get BlueprintExtenderService
1:         BlueprintExtenderService blueprintExtender = getBlueprintExtenderService(bc);
1:         if (blueprintExtender == null) {
1:             return;
1:         }
1: 
1:         try {
1:             // Check if the extender has already created a container
1:             BlueprintContainer container = blueprintExtender.getContainer(bc.getBundle());
1: 
1:             if (container == null) {
1:                 List<Object> blueprintResources = getBlueprintAppList(sc, bc.getBundle());
1:                 if (blueprintResources.isEmpty()) {
1:                     // The extender is expected to scan a bundle
1:                     container = blueprintExtender.createContainer(bc.getBundle());
1:                 } else {
1:                     // Use specified resources to create a container
1:                     container = blueprintExtender.createContainer(bc.getBundle(), blueprintResources);
1:                 }
1:             }
1:             if (container == null) {
1:                 sc.log("Failed to startup blueprint container.");
1:             } else {
1:                 sc.setAttribute(CONTAINER_ATTRIBUTE, container);
1:             }
1:         } catch (Exception e) {
1:             sc.log("Failed to startup blueprint container. " + e, e);
1:         }
1:     }
1: 
1:     public void contextDestroyed(ServletContextEvent event) {
1:         ServletContext sc = event.getServletContext();
1:         BlueprintContainer container = (BlueprintContainer)sc.getAttribute(CONTAINER_ATTRIBUTE);
1:         if (container == null) {
1:             return;
1:         }
1: 
1:         BundleContext bc = getBundleContext(sc);
1:         if (bc == null) {
1:             return;
1:         }
1: 
1:         BlueprintExtenderService blueprintExtender = getBlueprintExtenderService(bc);
1:         if (blueprintExtender == null) {
1:             return;
1:         }
1: 
1:         blueprintExtender.destroyContainer(bc.getBundle(), container);
1:     }
1: 
1:     private List<Object> getBlueprintAppList(ServletContext sc, Bundle applicationBundle) {
1:         String location = sc.getInitParameter(LOCATION_PARAM);
1:         if (location == null) {
1:             location = DEFAULT_LOCATION;
1:         }
1: 
1:         List<Object> blueprintResources = new LinkedList<Object>();
1:         URL entry = applicationBundle.getEntry(location);
1:         if (entry != null) {
1:             blueprintResources.add(entry);
1:         }
1: 
1:         return blueprintResources;
1:     }
1: 
1:     private BundleContext getBundleContext(ServletContext sc) {
1:         String bundleContextAttributeName = sc
1:                 .getInitParameter(BUNDLE_CONTEXT_PARAM);
1:         if (bundleContextAttributeName == null) {
1:             bundleContextAttributeName = DEFAULT_BUNDLE_CONTEXT_ATTRIBUTE;
1:         }
1: 
1:         BundleContext bc = (BundleContext) sc.getAttribute(bundleContextAttributeName);
1:         if (bc == null) {
1:             sc.log("Failed to startup blueprint container: no BundleContext is available");
1:         }
1:         return bc;
1:     }
1: 
1:     private BlueprintExtenderService getBlueprintExtenderService(BundleContext bc) {
1:         ServiceReference sref = bc
1:                 .getServiceReference(BlueprintExtenderService.class.getName());
1:         if (sref != null) {
1:             return (BlueprintExtenderService) bc.getService(sref);
1:         } else {
1:             return null;
1:         }
1:     }
1: }
============================================================================