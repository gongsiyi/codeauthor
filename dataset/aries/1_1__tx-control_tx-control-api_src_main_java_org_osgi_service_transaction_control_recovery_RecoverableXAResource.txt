1:47a70d3: /*
1:47a70d3:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:47a70d3:  * 
1:47a70d3:  * Licensed under the Apache License, Version 2.0 (the "License");
1:47a70d3:  * you may not use this file except in compliance with the License.
1:47a70d3:  * You may obtain a copy of the License at
1:47a70d3:  *
1:47a70d3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:47a70d3:  *
1:47a70d3:  * Unless required by applicable law or agreed to in writing, software
1:47a70d3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:47a70d3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:47a70d3:  * See the License for the specific language governing permissions and
1:47a70d3:  * limitations under the License.
1:47a70d3:  */
1:47a70d3: package org.osgi.service.transaction.control.recovery;
1:47a70d3: 
1:47a70d3: import javax.transaction.xa.XAResource;
1:47a70d3: 
1:47a70d3: import org.osgi.service.transaction.control.ResourceProvider;
1:47a70d3: import org.osgi.service.transaction.control.TransactionContext;
1:47a70d3: 
1:47a70d3: /**
1:47a70d3:  * A {@link RecoverableXAResource} service may be provided by a
1:47a70d3:  * {@link ResourceProvider} if they are able to support XA recovery
1:47a70d3:  * operations.
1:47a70d3:  * 
1:47a70d3:  * There are two main sorts of recovery:
1:47a70d3:  * 
1:47a70d3:  * <ul>
1:47a70d3:  *   <li>Recovery after a remote failure, where the local transaction
1:47a70d3:  *       manager runs throughout</li>
1:47a70d3:  *   <li>Recovery after a local failure, where the transaction manager
1:47a70d3:  *       replays in-doubt transactions from its log</li>
1:47a70d3:  * </ul>
1:47a70d3:  * 
1:47a70d3:  * This service is used in both of these cases. 
1:47a70d3:  * 
1:47a70d3:  * The identifier returned by {@link #getId()} provides a persistent name 
1:47a70d3:  * that can be used to correlate usage of the resource both before and after
1:47a70d3:  * failure. This identifier must also be passed to 
1:47a70d3:  * {@link TransactionContext#registerXAResource(XAResource, String)} each time
1:47a70d3:  * the recoverable resource is used.
1:47a70d3:  * 
1:47a70d3:  */
1:47a70d3: public interface RecoverableXAResource {
1:47a70d3: 
1:47a70d3: 	/**
1:47a70d3: 	 * Get the id of this resource. This should be unique, and persist between restarts
1:47a70d3: 	 * @return an identifier, never <code>null</code>
1:47a70d3: 	 */
1:47a70d3: 	String getId();
1:47a70d3: 	
1:47a70d3: 	/**
1:47a70d3: 	 * Get a new, valid XAResource that can be used in recovery
1:47a70d3: 	 * 
1:47a70d3: 	 * This XAResource will be returned later using the 
1:47a70d3: 	 * {@link #releaseXAResource(XAResource)} method
1:47a70d3: 	 * 
1:47a70d3: 	 * @return a valid, connected, XAResource 
1:47a70d3: 	 * 
1:47a70d3: 	 * @throws Exception If it is not possible to acquire a valid
1:47a70d3: 	 * XAResource at the current time, for example if the database
1:47a70d3: 	 * is temporarily unavailable.
1:47a70d3: 	 */
1:47a70d3: 	XAResource getXAResource() throws Exception;
1:47a70d3: 	
1:47a70d3: 	/**
1:47a70d3: 	 * Release the XAResource that has been used for recovery
1:47a70d3: 	 * 
1:47a70d3: 	 * @param xaRes An {@link XAResource} previously returned
1:47a70d3: 	 * by {@link #getXAResource()}
1:47a70d3: 	 */
1:47a70d3: 	void releaseXAResource(XAResource xaRes);
1:47a70d3: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:47a70d3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright (c) OSGi Alliance (2016). All Rights Reserved.
1:  * 
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.osgi.service.transaction.control.recovery;
1: 
1: import javax.transaction.xa.XAResource;
1: 
1: import org.osgi.service.transaction.control.ResourceProvider;
1: import org.osgi.service.transaction.control.TransactionContext;
1: 
1: /**
1:  * A {@link RecoverableXAResource} service may be provided by a
1:  * {@link ResourceProvider} if they are able to support XA recovery
1:  * operations.
1:  * 
1:  * There are two main sorts of recovery:
1:  * 
1:  * <ul>
1:  *   <li>Recovery after a remote failure, where the local transaction
1:  *       manager runs throughout</li>
1:  *   <li>Recovery after a local failure, where the transaction manager
1:  *       replays in-doubt transactions from its log</li>
1:  * </ul>
1:  * 
1:  * This service is used in both of these cases. 
1:  * 
1:  * The identifier returned by {@link #getId()} provides a persistent name 
1:  * that can be used to correlate usage of the resource both before and after
1:  * failure. This identifier must also be passed to 
1:  * {@link TransactionContext#registerXAResource(XAResource, String)} each time
1:  * the recoverable resource is used.
1:  * 
1:  */
1: public interface RecoverableXAResource {
1: 
1: 	/**
1: 	 * Get the id of this resource. This should be unique, and persist between restarts
1: 	 * @return an identifier, never <code>null</code>
1: 	 */
1: 	String getId();
1: 	
1: 	/**
1: 	 * Get a new, valid XAResource that can be used in recovery
1: 	 * 
1: 	 * This XAResource will be returned later using the 
1: 	 * {@link #releaseXAResource(XAResource)} method
1: 	 * 
1: 	 * @return a valid, connected, XAResource 
1: 	 * 
1: 	 * @throws Exception If it is not possible to acquire a valid
1: 	 * XAResource at the current time, for example if the database
1: 	 * is temporarily unavailable.
1: 	 */
1: 	XAResource getXAResource() throws Exception;
1: 	
1: 	/**
1: 	 * Release the XAResource that has been used for recovery
1: 	 * 
1: 	 * @param xaRes An {@link XAResource} previously returned
1: 	 * by {@link #getXAResource()}
1: 	 */
1: 	void releaseXAResource(XAResource xaRes);
1: }
============================================================================