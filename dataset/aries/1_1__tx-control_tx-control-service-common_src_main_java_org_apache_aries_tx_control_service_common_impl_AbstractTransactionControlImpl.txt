1:593cb80: /*
1:593cb80:  * Licensed to the Apache Software Foundation (ASF) under one
1:593cb80:  * or more contributor license agreements.  See the NOTICE file
1:593cb80:  * distributed with this work for additional information
1:593cb80:  * regarding copyright ownership.  The ASF licenses this file
1:593cb80:  * to you under the Apache License, Version 2.0 (the
1:593cb80:  * "License"); you may not use this file except in compliance
1:593cb80:  * with the License.  You may obtain a copy of the License at
1:593cb80:  *
1:593cb80:  *   http://www.apache.org/licenses/LICENSE-2.0
1:593cb80:  *
1:593cb80:  * Unless required by applicable law or agreed to in writing,
1:593cb80:  * software distributed under the License is distributed on an
1:593cb80:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:593cb80:  * KIND, either express or implied.  See the License for the
1:593cb80:  * specific language governing permissions and limitations
1:593cb80:  * under the License.
1:593cb80:  */
1:78dd69f: package org.apache.aries.tx.control.service.common.impl;
6:78dd69f: 
1:78dd69f: import static java.util.stream.Collectors.toList;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1:78dd69f: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1:78dd69f: 
1:78dd69f: import java.util.Collection;
1:78dd69f: import java.util.List;
1:78dd69f: import java.util.Optional;
1:78dd69f: import java.util.concurrent.Callable;
1:2906477: import java.util.concurrent.atomic.AtomicBoolean;
1:78dd69f: 
1:78dd69f: import org.osgi.service.transaction.control.ScopedWorkException;
1:78dd69f: import org.osgi.service.transaction.control.TransactionBuilder;
1:78dd69f: import org.osgi.service.transaction.control.TransactionContext;
1:78dd69f: import org.osgi.service.transaction.control.TransactionControl;
1:78dd69f: import org.osgi.service.transaction.control.TransactionException;
1:78dd69f: import org.osgi.service.transaction.control.TransactionRolledBackException;
1:78dd69f: 
1:78dd69f: public abstract class AbstractTransactionControlImpl implements TransactionControl {
1:78dd69f: 
1:78dd69f: 	private final class TransactionBuilderImpl extends TransactionBuilder {
1:78dd69f: 
1:661c406: 		private boolean readOnly = false;
1:661c406: 		
1:661c406: 		@Override
1:661c406: 		public TransactionBuilder readOnly() {
1:661c406: 			readOnly = true;
1:661c406: 			return this;
1:661c406: 		}
1:661c406: 
1:2906477: 		private void checkValid() {
1:2906477: 			
1:2906477: 			if(closed.get()) {
1:2906477: 				throw new TransactionException("The transaction control service is closed");
1:2906477: 			}
1:2906477: 			
1:78dd69f: 			List<Class<? extends Throwable>> duplicates = rollbackFor.stream()
1:78dd69f: 					.filter(noRollbackFor::contains)
1:78dd69f: 					.collect(toList());
1:78dd69f: 			if(!duplicates.isEmpty()) {
1:78dd69f: 				throw new TransactionException("The transaction declares that the Exceptions " + 
1:78dd69f: 						duplicates + " must both trigger and not trigger rollback");
15:78dd69f: 			}
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public <T> T required(Callable<T> work)
1:78dd69f: 				throws TransactionException, TransactionRolledBackException {
1:2906477: 			checkValid();
1:78dd69f: 			
1:78dd69f: 			boolean endTransaction = false;
1:78dd69f: 
1:f87416c: 			AbstractTransactionContextImpl existingTran = existingTx.get();
1:f87416c: 			AbstractTransactionContextImpl currentTran;
3:78dd69f: 			try {
1:f87416c: 				if (existingTran == null || existingTran.getTransactionStatus() == NO_TRANSACTION) {
1:f87416c: 					currentTran = startTransaction(readOnly);
1:78dd69f: 					endTransaction = true;
1:f87416c: 					existingTx.set(currentTran);
1:f87416c: 				} else if (existingTran.isReadOnly() && !readOnly){
1:661c406: 					throw new TransactionException("A read only transaction is currently active, and cannot be upgraded to a writeable transaction");
1:f87416c: 				} else {
1:f87416c: 					currentTran = existingTran;
1:78dd69f: 				}
1:f87416c: 				return doWork(work, currentTran, endTransaction);
1:f87416c: 			} finally {
1:f87416c: 				existingTx.set(existingTran);
1:78dd69f: 			}
1:f87416c: 			
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public <T> T requiresNew(Callable<T> work)
1:78dd69f: 				throws TransactionException, TransactionRolledBackException {
1:2906477: 			checkValid();
1:78dd69f: 			
1:f87416c: 			AbstractTransactionContextImpl existingTran = existingTx.get();
1:78dd69f: 			try {
1:f87416c: 				AbstractTransactionContextImpl currentTran = startTransaction(readOnly);
1:f87416c: 				existingTx.set(currentTran);
1:f87416c: 				return doWork(work, currentTran, true);
1:f87416c: 			} finally {
1:f87416c: 				existingTx.set(existingTran);
1:78dd69f: 			}
1:78dd69f: 
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public <T> T supports(Callable<T> work) throws TransactionException {
1:2906477: 			checkValid();
1:78dd69f: 			
1:78dd69f: 			boolean endTransaction = false;
1:78dd69f: 
1:f87416c: 			AbstractTransactionContextImpl existingTran = existingTx.get();
1:f87416c: 			AbstractTransactionContextImpl currentTran;
1:78dd69f: 			try {
1:f87416c: 				if (existingTran == null) {
1:f87416c: 					currentTran = new NoTransactionContextImpl();
1:78dd69f: 					endTransaction = true;
1:f87416c: 					existingTx.set(currentTran);
1:f87416c: 				} else {
1:f87416c: 					currentTran = existingTran;
1:78dd69f: 				}
1:f87416c: 				return doWork(work, currentTran, endTransaction);
1:f87416c: 			} finally {
1:f87416c: 				existingTx.set(existingTran);
1:78dd69f: 			}
1:78dd69f: 
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		@Override
1:78dd69f: 		public <T> T notSupported(Callable<T> work)
1:78dd69f: 				throws TransactionException {
1:2906477: 			checkValid();
1:f87416c: 			
1:78dd69f: 			boolean endTransaction = false;
1:78dd69f: 
1:f87416c: 			AbstractTransactionContextImpl existingTran = existingTx.get();
1:f87416c: 			AbstractTransactionContextImpl currentTran;
1:78dd69f: 			
1:78dd69f: 			try {
1:f87416c: 				if (existingTran == null || existingTran.getTransactionStatus() != NO_TRANSACTION) {
3:78dd69f: 					// We must create a new coordination to scope our new
3:78dd69f: 					// transaction
1:f87416c: 					currentTran = new NoTransactionContextImpl();
1:78dd69f: 					endTransaction = true;
1:f87416c: 					existingTx.set(currentTran);
1:f87416c: 				} else {
1:f87416c: 					currentTran = existingTran;
1:78dd69f: 				}
1:f87416c: 				return doWork(work, currentTran, endTransaction);
1:f87416c: 			} finally {
1:f87416c: 				existingTx.set(existingTran);
1:78dd69f: 			}
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		private <R> R doWork(Callable<R> transactionalWork,
1:f87416c: 				AbstractTransactionContextImpl currentTran, 
1:f87416c: 				boolean endTransaction) {
1:78dd69f: 			R result;
1:78dd69f: 			try {
1:78dd69f: 				result = transactionalWork.call();
1:78dd69f: 
1:78dd69f: 			} catch (Throwable t) {
1:78dd69f: 				//TODO handle noRollbackFor
1:78dd69f: 				if(requiresRollback(t)) {
1:f87416c: 					currentTran.safeSetRollbackOnly();
1:78dd69f: 				}
4:78dd69f: 				if(endTransaction) {
1:78dd69f: 					try {
4:78dd69f: 						currentTran.finish();
1:78dd69f: 					} catch (Exception e) {
1:78dd69f: 						currentTran.recordFailure(e);
1:78dd69f: 					}
1:78dd69f: 				}
1:edd266c: 				
1:edd266c: 				TransactionContext toPropagate = endTransaction ? null : currentTran;
1:edd266c: 				
1:edd266c: 				ScopedWorkException workException;
1:edd266c: 				
1:edd266c: 				if(t instanceof ScopedWorkException) {
1:edd266c: 					workException = new ScopedWorkException("A nested piece of scoped work threw an exception", 
1:edd266c: 							t.getCause(), toPropagate);
1:edd266c: 					workException.addSuppressed(t);
1:edd266c: 				} else {
1:edd266c: 					workException = new ScopedWorkException("The scoped work threw an exception", 
1:edd266c: 							t, toPropagate);
1:edd266c: 				}
1:edd266c: 				
1:78dd69f: 				Throwable throwable = currentTran.firstUnexpectedException.get();
1:78dd69f: 				if(throwable != null) {
1:78dd69f: 					workException.addSuppressed(throwable);
1:78dd69f: 				}
1:78dd69f: 				currentTran.subsequentExceptions.stream().forEach(workException::addSuppressed);
1:78dd69f: 				
1:78dd69f: 				throw workException;
1:78dd69f: 			}
1:78dd69f: 			
1:78dd69f: 			if(endTransaction) {
1:78dd69f: 				try {
1:78dd69f: 					currentTran.finish();
1:78dd69f: 				} catch (Exception e) {
1:78dd69f: 					currentTran.recordFailure(e);
1:78dd69f: 				}
1:78dd69f: 			}
1:78dd69f: 			
1:78dd69f: 			Throwable throwable = currentTran.firstUnexpectedException.get();
1:78dd69f: 			if(throwable != null) {
1:78dd69f: 				TransactionException te = currentTran.getTransactionStatus() == ROLLED_BACK ?
1:78dd69f: 						new TransactionRolledBackException("The transaction rolled back due to a failure", throwable) :
1:78dd69f: 						new TransactionException("There was an error in the Transaction completion.", throwable);
1:78dd69f: 				
1:78dd69f: 				currentTran.subsequentExceptions.stream().forEach(te::addSuppressed);
1:78dd69f: 				
1:78dd69f: 				throw te;
1:78dd69f: 			}
1:78dd69f: 			
1:78dd69f: 			return result;
1:78dd69f: 		}
1:78dd69f: 
1:78dd69f: 		private boolean requiresRollback(Throwable t) {
1:78dd69f: 			return mostSpecificMatch(noRollbackFor, t)
1:78dd69f: 				.map(noRollbackType -> mostSpecificMatch(rollbackFor, t)
1:78dd69f: 						.map(rollbackType -> noRollbackType.isAssignableFrom(rollbackType))
1:78dd69f: 						.orElse(false))
1:78dd69f: 				.orElse(true);
1:78dd69f: 		}
1:78dd69f: 		
1:78dd69f: 		private Optional<Class<? extends Throwable>> mostSpecificMatch(Collection<Class<? extends Throwable>> types, Throwable t) {
1:78dd69f: 			return types.stream()
1:78dd69f: 					.filter(c -> c.isInstance(t))
1:78dd69f: 					.max((c1, c2) -> {
1:78dd69f: 							if(c1 == c2) return 0;
1:78dd69f: 							
1:78dd69f: 							return c1.isAssignableFrom(c2) ? 1 : c2.isAssignableFrom(c1) ? -1 : 0;
1:78dd69f: 						});
1:78dd69f: 		}
1:78dd69f: 	}
1:78dd69f: 
1:f87416c: 	private final ThreadLocal<AbstractTransactionContextImpl> existingTx = new ThreadLocal<>();
1:2906477: 	
1:2906477: 	private final AtomicBoolean closed = new AtomicBoolean();
1:78dd69f: 
1:f87416c: 	protected abstract AbstractTransactionContextImpl startTransaction(boolean readOnly);
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public TransactionBuilder build() {
1:78dd69f: 		return new TransactionBuilderImpl();
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public boolean getRollbackOnly() throws IllegalStateException {
1:78dd69f: 		return getCurrentTranContextChecked().getRollbackOnly();
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public void setRollbackOnly() throws IllegalStateException {
1:78dd69f: 		getCurrentTranContextChecked().setRollbackOnly();
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public <T> T required(Callable<T> work)
1:78dd69f: 			throws TransactionException, TransactionRolledBackException {
1:78dd69f: 		return build().required(work);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public <T> T requiresNew(Callable<T> work)
1:78dd69f: 			throws TransactionException, TransactionRolledBackException {
1:78dd69f: 		return build().requiresNew(work);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public <T> T notSupported(Callable<T> work) throws TransactionException {
1:78dd69f: 		return build().notSupported(work);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public <T> T supports(Callable<T> work) throws TransactionException {
1:78dd69f: 		return build().supports(work);
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public boolean activeTransaction() {
1:78dd69f: 		TransactionContext context = getCurrentContext();
1:78dd69f: 		return context != null
1:78dd69f: 				&& context.getTransactionStatus() != NO_TRANSACTION;
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public boolean activeScope() {
1:78dd69f: 		return getCurrentContext() != null;
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	private TransactionContext getCurrentTranContextChecked() {
1:78dd69f: 		TransactionContext toUse = getCurrentContext();
1:78dd69f: 		if (toUse == null) {
1:78dd69f: 			throw new IllegalStateException(
1:78dd69f: 					"There is no applicable transaction context");
1:78dd69f: 		}
2:78dd69f: 		return toUse;
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public TransactionContext getCurrentContext() {
1:f87416c: 		return existingTx.get();
1:78dd69f: 	}
1:78dd69f: 
1:78dd69f: 	@Override
1:78dd69f: 	public void ignoreException(Throwable t) throws IllegalStateException {
1:78dd69f: 		// TODO Auto-generated method stub
1:78dd69f: 
1:78dd69f: 	}
1:78dd69f: 
1:2906477: 	public void close() {
1:2906477: 		closed.set(true);
1:2906477: 	}
1:78dd69f: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:edd266c
/////////////////////////////////////////////////////////////////////////
1: 				
1: 				TransactionContext toPropagate = endTransaction ? null : currentTran;
1: 				
1: 				ScopedWorkException workException;
1: 				
1: 				if(t instanceof ScopedWorkException) {
1: 					workException = new ScopedWorkException("A nested piece of scoped work threw an exception", 
1: 							t.getCause(), toPropagate);
1: 					workException.addSuppressed(t);
1: 				} else {
1: 					workException = new ScopedWorkException("The scoped work threw an exception", 
1: 							t, toPropagate);
1: 				}
1: 				
commit:2906477
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: 		private void checkValid() {
1: 			
1: 			if(closed.get()) {
1: 				throw new TransactionException("The transaction control service is closed");
1: 			}
1: 			
/////////////////////////////////////////////////////////////////////////
1: 			checkValid();
/////////////////////////////////////////////////////////////////////////
1: 			checkValid();
/////////////////////////////////////////////////////////////////////////
1: 			checkValid();
/////////////////////////////////////////////////////////////////////////
1: 			checkValid();
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	private final AtomicBoolean closed = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
1: 	public void close() {
1: 		closed.set(true);
1: 	}
commit:593cb80
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
commit:f87416c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 			AbstractTransactionContextImpl existingTran = existingTx.get();
1: 			AbstractTransactionContextImpl currentTran;
1: 				if (existingTran == null || existingTran.getTransactionStatus() == NO_TRANSACTION) {
1: 					currentTran = startTransaction(readOnly);
1: 					existingTx.set(currentTran);
1: 				} else if (existingTran.isReadOnly() && !readOnly){
1: 				} else {
1: 					currentTran = existingTran;
1: 				return doWork(work, currentTran, endTransaction);
1: 			} finally {
1: 				existingTx.set(existingTran);
1: 			
/////////////////////////////////////////////////////////////////////////
1: 			AbstractTransactionContextImpl existingTran = existingTx.get();
1: 				AbstractTransactionContextImpl currentTran = startTransaction(readOnly);
1: 				existingTx.set(currentTran);
1: 				return doWork(work, currentTran, true);
1: 			} finally {
1: 				existingTx.set(existingTran);
1: 			AbstractTransactionContextImpl existingTran = existingTx.get();
1: 			AbstractTransactionContextImpl currentTran;
1: 				if (existingTran == null) {
1: 					currentTran = new NoTransactionContextImpl();
1: 					existingTx.set(currentTran);
1: 				} else {
1: 					currentTran = existingTran;
1: 				return doWork(work, currentTran, endTransaction);
1: 			} finally {
1: 				existingTx.set(existingTran);
/////////////////////////////////////////////////////////////////////////
1: 			AbstractTransactionContextImpl existingTran = existingTx.get();
1: 			AbstractTransactionContextImpl currentTran;
1: 			
1: 				if (existingTran == null || existingTran.getTransactionStatus() != NO_TRANSACTION) {
1: 					currentTran = new NoTransactionContextImpl();
1: 					existingTx.set(currentTran);
1: 				} else {
1: 					currentTran = existingTran;
1: 				return doWork(work, currentTran, endTransaction);
1: 			} finally {
1: 				existingTx.set(existingTran);
1: 				AbstractTransactionContextImpl currentTran, 
1: 				boolean endTransaction) {
/////////////////////////////////////////////////////////////////////////
1: 					currentTran.safeSetRollbackOnly();
/////////////////////////////////////////////////////////////////////////
0: 						endTransaction ? null : currentTran);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 	private final ThreadLocal<AbstractTransactionContextImpl> existingTx = new ThreadLocal<>();
1: 	protected abstract AbstractTransactionContextImpl startTransaction(boolean readOnly);
/////////////////////////////////////////////////////////////////////////
1: 		return existingTx.get();
commit:661c406
/////////////////////////////////////////////////////////////////////////
1: 		private boolean readOnly = false;
1: 		
1: 		@Override
1: 		public TransactionBuilder readOnly() {
1: 			readOnly = true;
1: 			return this;
1: 		}
1: 
/////////////////////////////////////////////////////////////////////////
0: 					currentTran = startTransaction(currentCoord, readOnly);
0: 				} else if (currentTran.isReadOnly() && !readOnly){
1: 					throw new TransactionException("A read only transaction is currently active, and cannot be upgraded to a writeable transaction");
/////////////////////////////////////////////////////////////////////////
0: 				currentTran = startTransaction(currentCoord, readOnly);
/////////////////////////////////////////////////////////////////////////
0: 	protected abstract AbstractTransactionContextImpl startTransaction(Coordination currentCoord, boolean readOnly);
commit:78dd69f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.tx.control.service.common.impl;
1: 
0: import static java.util.Optional.ofNullable;
1: import static java.util.stream.Collectors.toList;
1: import static org.osgi.service.transaction.control.TransactionStatus.NO_TRANSACTION;
1: import static org.osgi.service.transaction.control.TransactionStatus.ROLLED_BACK;
1: 
1: import java.util.Collection;
1: import java.util.List;
1: import java.util.Optional;
1: import java.util.concurrent.Callable;
1: 
0: import org.osgi.service.coordinator.Coordination;
0: import org.osgi.service.coordinator.CoordinationException;
0: import org.osgi.service.coordinator.Coordinator;
1: import org.osgi.service.transaction.control.ScopedWorkException;
1: import org.osgi.service.transaction.control.TransactionBuilder;
1: import org.osgi.service.transaction.control.TransactionContext;
1: import org.osgi.service.transaction.control.TransactionControl;
1: import org.osgi.service.transaction.control.TransactionException;
1: import org.osgi.service.transaction.control.TransactionRolledBackException;
1: 
1: public abstract class AbstractTransactionControlImpl implements TransactionControl {
1: 
1: 	private final class TransactionBuilderImpl extends TransactionBuilder {
1: 
0: 		private void checkExceptions() {
1: 			List<Class<? extends Throwable>> duplicates = rollbackFor.stream()
1: 					.filter(noRollbackFor::contains)
1: 					.collect(toList());
1: 			if(!duplicates.isEmpty()) {
1: 				throw new TransactionException("The transaction declares that the Exceptions " + 
1: 						duplicates + " must both trigger and not trigger rollback");
1: 			}
1: 		}
1: 
1: 		@Override
1: 		public <T> T required(Callable<T> work)
1: 				throws TransactionException, TransactionRolledBackException {
0: 			checkExceptions();
1: 			
0: 			Coordination currentCoord = coordinator.peek();
1: 			boolean endTransaction = false;
0: 			boolean endCoordination = false;
1: 
0: 			AbstractTransactionContextImpl currentTran = ofNullable(
0: 					currentCoord).map(c -> (AbstractTransactionContextImpl) c
0: 							.getVariables().get(TransactionContextKey.class))
0: 							.filter(atc -> atc
0: 									.getTransactionStatus() != NO_TRANSACTION)
0: 							.orElse(null);
1: 			try {
0: 				if (currentTran == null) {
1: 					// We must create a new coordination to scope our new
1: 					// transaction
0: 					currentCoord = coordinator.begin(
0: 							"Resource-Local-Transaction.REQUIRED", 30000);
0: 					endCoordination = true;
0: 					currentTran = startTransaction(currentCoord);
1: 					endTransaction = true;
0: 					currentCoord.getVariables().put(TransactionContextKey.class,
0: 							currentTran);
1: 				}
0: 			} catch (RuntimeException re) {
1: 				if(endTransaction) {
1: 					currentTran.finish();
1: 				}
0: 				if (endCoordination) {
0: 					currentCoord.end();
1: 				}
0: 				throw re;
1: 			}
1: 
0: 			return doWork(work, currentTran, currentCoord, endTransaction, endCoordination);
1: 		}
1: 
1: 		@Override
1: 		public <T> T requiresNew(Callable<T> work)
1: 				throws TransactionException, TransactionRolledBackException {
0: 			checkExceptions();
1: 			
0: 			Coordination currentCoord = null;
0: 			AbstractTransactionContextImpl currentTran;
1: 			try {
0: 				currentCoord = coordinator.begin(
0: 						"Resource-Local-Transaction.REQUIRES_NEW", 30000);
1: 
0: 				currentTran = startTransaction(currentCoord);
0: 				currentCoord.getVariables().put(TransactionContextKey.class,
0: 						currentTran);
0: 			} catch (RuntimeException re) {
0: 				if (currentCoord != null)
0: 					currentCoord.end();
0: 				throw re;
1: 			}
1: 
0: 			return doWork(work, currentTran, currentCoord, true, true);
1: 		}
1: 
1: 		@Override
1: 		public <T> T supports(Callable<T> work) throws TransactionException {
0: 			checkExceptions();
1: 			
0: 			Coordination currentCoord = coordinator.peek();
1: 			boolean endTransaction = false;
0: 			boolean endCoordination = false;
1: 
0: 			AbstractTransactionContextImpl currentTran = ofNullable(
0: 					currentCoord).map(c -> (AbstractTransactionContextImpl) c
0: 							.getVariables().get(TransactionContextKey.class))
0: 							.orElse(null);
1: 			try {
0: 				if (currentTran == null) {
1: 					// We must create a new coordination to scope our new
1: 					// transaction
0: 					currentCoord = coordinator.begin(
0: 							"Resource-Local-Transaction.SUPPORTS", 30000);
0: 					endCoordination = true;
0: 					currentTran = new NoTransactionContextImpl(currentCoord);
1: 					endTransaction = true;
0: 					currentCoord.getVariables().put(TransactionContextKey.class,
0: 							currentTran);
1: 				}
0: 			} catch (RuntimeException re) {
1: 				if(endTransaction) {
1: 					currentTran.finish();
1: 				}
0: 				if (endCoordination) {
0: 					currentCoord.end();
1: 				}
0: 				throw re;
1: 			}
1: 
0: 			return doWork(work, currentTran, currentCoord, endTransaction, endCoordination);
1: 		}
1: 
1: 		@Override
1: 		public <T> T notSupported(Callable<T> work)
1: 				throws TransactionException {
0: 			checkExceptions();
1: 			
0: 			Coordination currentCoord = coordinator.peek();
1: 			boolean endTransaction = false;
0: 			boolean endCoordination = false;
1: 
0: 			AbstractTransactionContextImpl currentTran = ofNullable(
0: 					currentCoord).map(c -> (AbstractTransactionContextImpl) c
0: 							.getVariables().get(TransactionContextKey.class))
0: 							.filter(atc -> atc
0: 									.getTransactionStatus() == NO_TRANSACTION)
0: 							.orElse(null);
1: 			try {
0: 				if (currentTran == null) {
1: 					// We must create a new coordination to scope our new
1: 					// transaction
0: 					currentCoord = coordinator.begin(
0: 							"Resource-Local-Transaction.NOT_SUPPORTED", 30000);
0: 					endCoordination = true;
0: 					currentTran = new NoTransactionContextImpl(currentCoord);
1: 					endTransaction = true;
0: 					currentCoord.getVariables().put(TransactionContextKey.class,
0: 							currentTran);
1: 				}
0: 			} catch (RuntimeException re) {
1: 				if(endTransaction) {
1: 					currentTran.finish();
1: 				}
0: 				if (endCoordination) {
0: 					currentCoord.end();
1: 				}
0: 				throw re;
1: 			}
0: 			return doWork(work, currentTran, currentCoord, endTransaction, endCoordination);
1: 		}
1: 
1: 		private <R> R doWork(Callable<R> transactionalWork,
0: 				AbstractTransactionContextImpl currentTran, Coordination currentCoord, 
0: 				boolean endTransaction, boolean endCoordination) {
1: 			R result;
1: 			try {
1: 				result = transactionalWork.call();
1: 
1: 			} catch (Throwable t) {
1: 				//TODO handle noRollbackFor
1: 				if(requiresRollback(t)) {
0: 					currentCoord.fail(t);
1: 				}
1: 				if(endTransaction) {
1: 					try {
1: 						currentTran.finish();
1: 					} catch (Exception e) {
1: 						currentTran.recordFailure(e);
1: 					}
1: 				}
0: 				if (endCoordination) {
1: 					try {
0: 						currentCoord.end();
0: 					} catch (CoordinationException ce) {
0: 						if(ce.getType() != CoordinationException.FAILED) {
0: 							currentTran.recordFailure(ce);
1: 						}
1: 					}
1: 				}
0: 				ScopedWorkException workException = new ScopedWorkException("The scoped work threw an exception", t, 
0: 						endCoordination ? null : currentTran);
1: 				Throwable throwable = currentTran.firstUnexpectedException.get();
1: 				if(throwable != null) {
1: 					workException.addSuppressed(throwable);
1: 				}
1: 				currentTran.subsequentExceptions.stream().forEach(workException::addSuppressed);
1: 				
1: 				throw workException;
1: 			}
1: 			
1: 			if(endTransaction) {
1: 				try {
1: 					currentTran.finish();
1: 				} catch (Exception e) {
1: 					currentTran.recordFailure(e);
0: 					currentCoord.fail(e);
1: 				}
1: 			}
1: 			try {
0: 				if (endCoordination) {
0: 					currentCoord.end();
1: 				}
0: 			} catch (CoordinationException ce) {
0: 				if(ce.getType() != CoordinationException.FAILED) {
0: 					currentTran.recordFailure(ce);
1: 				}
1: 			}
1: 			
1: 			Throwable throwable = currentTran.firstUnexpectedException.get();
1: 			if(throwable != null) {
1: 				TransactionException te = currentTran.getTransactionStatus() == ROLLED_BACK ?
1: 						new TransactionRolledBackException("The transaction rolled back due to a failure", throwable) :
1: 						new TransactionException("There was an error in the Transaction completion.", throwable);
1: 				
1: 				currentTran.subsequentExceptions.stream().forEach(te::addSuppressed);
1: 				
1: 				throw te;
1: 			}
1: 			
1: 			return result;
1: 		}
1: 
1: 		private boolean requiresRollback(Throwable t) {
1: 			return mostSpecificMatch(noRollbackFor, t)
1: 				.map(noRollbackType -> mostSpecificMatch(rollbackFor, t)
1: 						.map(rollbackType -> noRollbackType.isAssignableFrom(rollbackType))
1: 						.orElse(false))
1: 				.orElse(true);
1: 		}
1: 		
1: 		private Optional<Class<? extends Throwable>> mostSpecificMatch(Collection<Class<? extends Throwable>> types, Throwable t) {
1: 			return types.stream()
1: 					.filter(c -> c.isInstance(t))
1: 					.max((c1, c2) -> {
1: 							if(c1 == c2) return 0;
1: 							
1: 							return c1.isAssignableFrom(c2) ? 1 : c2.isAssignableFrom(c1) ? -1 : 0;
1: 						});
1: 		}
1: 	}
1: 
0: 	private static class TransactionContextKey {}
1: 
0: 	private final Coordinator coordinator;
1: 
0: 	public AbstractTransactionControlImpl(Coordinator c) {
0: 		coordinator = c;
1: 	}
1: 
0: 	protected abstract AbstractTransactionContextImpl startTransaction(Coordination currentCoord);
1: 
1: 	@Override
1: 	public TransactionBuilder build() {
1: 		return new TransactionBuilderImpl();
1: 	}
1: 
1: 	@Override
1: 	public boolean getRollbackOnly() throws IllegalStateException {
1: 		return getCurrentTranContextChecked().getRollbackOnly();
1: 	}
1: 
1: 	@Override
1: 	public void setRollbackOnly() throws IllegalStateException {
1: 		getCurrentTranContextChecked().setRollbackOnly();
1: 	}
1: 
1: 	@Override
1: 	public <T> T required(Callable<T> work)
1: 			throws TransactionException, TransactionRolledBackException {
1: 		return build().required(work);
1: 	}
1: 
1: 	@Override
1: 	public <T> T requiresNew(Callable<T> work)
1: 			throws TransactionException, TransactionRolledBackException {
1: 		return build().requiresNew(work);
1: 	}
1: 
1: 	@Override
1: 	public <T> T notSupported(Callable<T> work) throws TransactionException {
1: 		return build().notSupported(work);
1: 	}
1: 
1: 	@Override
1: 	public <T> T supports(Callable<T> work) throws TransactionException {
1: 		return build().supports(work);
1: 	}
1: 
1: 	@Override
1: 	public boolean activeTransaction() {
1: 		TransactionContext context = getCurrentContext();
1: 		return context != null
1: 				&& context.getTransactionStatus() != NO_TRANSACTION;
1: 	}
1: 
1: 	@Override
1: 	public boolean activeScope() {
1: 		return getCurrentContext() != null;
1: 	}
1: 
1: 	private TransactionContext getCurrentTranContextChecked() {
1: 		TransactionContext toUse = getCurrentContext();
1: 		if (toUse == null) {
1: 			throw new IllegalStateException(
1: 					"There is no applicable transaction context");
1: 		}
1: 		return toUse;
1: 	}
1: 
1: 	@Override
1: 	public TransactionContext getCurrentContext() {
0: 		TransactionContext toUse = null;
1: 
0: 		Coordination peek = coordinator.peek();
0: 		if (peek != null) {
0: 			toUse = (TransactionContext) peek.getVariables()
0: 					.get(TransactionContextKey.class);
1: 		}
1: 		return toUse;
1: 	}
1: 
1: 	@Override
1: 	public void ignoreException(Throwable t) throws IllegalStateException {
1: 		// TODO Auto-generated method stub
1: 
1: 	}
1: 
1: }
============================================================================