1:14ceeb1: /*
1:14ceeb1:  * Licensed to the Apache Software Foundation (ASF) under one
1:14ceeb1:  * or more contributor license agreements.  See the NOTICE file
1:14ceeb1:  * distributed with this work for additional information
1:14ceeb1:  * regarding copyright ownership.  The ASF licenses this file
1:14ceeb1:  * to you under the Apache License, Version 2.0 (the
1:14ceeb1:  * "License"); you may not use this file except in compliance
1:14ceeb1:  * with the License.  You may obtain a copy of the License at
1:14ceeb1:  *
1:14ceeb1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:14ceeb1:  *
1:14ceeb1:  * Unless required by applicable law or agreed to in writing,
1:14ceeb1:  * software distributed under the License is distributed on an
1:14ceeb1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:14ceeb1:  * KIND, either express or implied.  See the License for the
1:14ceeb1:  * specific language governing permissions and limitations
1:14ceeb1:  * under the License.
1:14ceeb1:  */
1:0d3d319: package org.apache.aries.async.promise.test;
3:0d3d319: 
1:14ceeb1: import static org.junit.Assert.assertEquals;
1:14ceeb1: import static org.junit.Assert.assertTrue;
1:14ceeb1: 
1:14ceeb1: import java.util.NoSuchElementException;
1:14ceeb1: 
1:0d3d319: import org.junit.Test;
1:0d3d319: import org.osgi.util.function.Function;
1:0d3d319: import org.osgi.util.function.Predicate;
1:0d3d319: import org.osgi.util.promise.Deferred;
1:0d3d319: import org.osgi.util.promise.Promise;
1:0d3d319: import org.osgi.util.promise.Promises;
1:0d3d319: 
1:0d3d319: public class FunctionTest {
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testFilter() throws Exception {
1:0d3d319:         testFilter("hello");
1:0d3d319:         testFilter("!reject");
1:0d3d319:         testFilter("fail");
1:0d3d319:         testFilter(null);
1:0d3d319:         testFilter("already");
1:0d3d319:         testFilter("already!");
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testMap() throws Exception {
1:0d3d319:         testMap("hello");
1:0d3d319:         testMap("hello!");
1:0d3d319:         testMap("fail");
1:0d3d319:         testMap("fail!");
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testFlatMap() throws Exception {
1:0d3d319:         testFlatMap("hello");
1:0d3d319:         testFlatMap("hello!");
1:0d3d319:         testFlatMap("fail");
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testRecover() throws Exception {
1:0d3d319:         testRecover("hello");
1:0d3d319:         testRecover("fail");
1:0d3d319:         testRecover("null");
1:0d3d319:         testRecover(null);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testRecoverWith() throws Exception {
1:0d3d319:         testRecoverWith("hello");
1:0d3d319:         testRecoverWith("fail");
1:0d3d319:         testRecoverWith("null");
1:0d3d319:         testRecoverWith(null);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testFallback() throws Exception {
1:0d3d319:         testFallback("hello", "world");
1:0d3d319:         testFallback("fail", "world");
1:0d3d319:         testFallback("hello", "fail");
1:0d3d319:         testFallback("fail", "fail");
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     @Test
1:0d3d319:     public void testFilter2() throws Exception {
1:0d3d319:         String bigValue = new String("value");
1:0d3d319:         Promise<String> p1 = Promises.resolved(bigValue);
1:0d3d319: 
1:0d3d319:         Promise<String> p2 = p1.filter(new Predicate<String>() {
1:0d3d319:             public boolean test(String t) {
1:0d3d319:                 return t.length() > 0;
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertTrue("Filter2 resolved", p2.isDone());
1:0d3d319:         assertEquals("Value2 matches", bigValue, p2.getValue());
1:0d3d319: 
1:0d3d319:         Promise<String> p3 = p1.filter(new Predicate<String>() {
1:0d3d319:             public boolean test(String t) {
1:0d3d319:                 return t.length() == 0;
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319:         assertTrue("Filter3 resolved", p3.isDone());
1:0d3d319:         assertTrue("Value3 fail matches", p3.getFailure() instanceof NoSuchElementException);
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     public static class Nasty extends RuntimeException {
1:0d3d319:         public Nasty(String msg) {
1:0d3d319:             super(msg);
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     private void testFilter(String r) throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319: 
1:0d3d319:         Throwable fail = new Throwable("fail");
1:0d3d319:         boolean already = (r != null && r.startsWith("already"));
1:0d3d319: 
1:0d3d319:         if (already) {
1:0d3d319:             if (r.contains("!")) {
1:0d3d319:                 def.fail(fail);
1:0d3d319:             } else {
1:0d3d319:                 def.resolve(r);
1:0d3d319:             }
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:         Promise<String> filter = def.getPromise().filter(new Predicate<String>() {
1:0d3d319:             @Override
1:0d3d319:             public boolean test(String s) {
1:0d3d319:                 if (s == null) {
1:0d3d319:                     throw new Nasty(null);
1:0d3d319:                 }
1:0d3d319:                 return !s.startsWith("!");
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319: 
1:0d3d319:         if (!already) {
1:0d3d319:             if ("fail".equals(r)) {
1:0d3d319:                 def.fail(fail);
1:0d3d319:             } else {
1:0d3d319:                 def.resolve(r);
1:0d3d319:             }
1:0d3d319:         }
1:0d3d319:         assertTrue("Filter resolved", filter.isDone());
1:0d3d319: 
1:0d3d319:         @SuppressWarnings({"not thrown", "all"})
1:0d3d319:         Throwable failure = filter.getFailure();
1:0d3d319: 
1:0d3d319:         if ("fail".equals(r)) {
1:0d3d319:             assertEquals("Failure matches", fail, filter.getFailure());
1:0d3d319:         } else if (already && r.contains("!")) {
1:0d3d319:             assertEquals("Failure matches", fail, filter.getFailure());
1:0d3d319:         } else if (r == null) {
1:0d3d319:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:0d3d319:         } else if (r.startsWith("!")) {
1:0d3d319:             assertTrue("Failure instanceof NoSuchElementException", failure instanceof NoSuchElementException);
1:0d3d319:         } else {
1:0d3d319:             assertEquals("Value matches", r, filter.getValue());
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     private void testMap(String r) throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319: 
1:0d3d319:         Promise<String> result = def.getPromise().map(new Function<String, String>() {
1:0d3d319:             @Override
1:0d3d319:             public String apply(String s) {
1:0d3d319:                 if (s.contains("!"))
1:0d3d319:                     throw new Nasty(s);
1:0d3d319:                 return s + s.length();
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319: 
1:0d3d319:         Throwable fail = new Throwable("fail");
1:0d3d319: 
1:0d3d319:         if (r.startsWith("fail")) {
1:0d3d319:             def.fail(fail);
1:0d3d319:         } else {
1:0d3d319:             def.resolve(r);
1:0d3d319:         }
1:0d3d319:         assertTrue("Map resolved", result.isDone());
1:0d3d319: 
1:0d3d319:         @SuppressWarnings({"not thrown", "all"})
1:0d3d319:         Throwable failure = result.getFailure();
1:0d3d319:         if (r.startsWith("fail")) {
1:0d3d319:             assertEquals("Failure matches", fail, failure);
1:0d3d319:         } else if (r.contains("!")) {
1:0d3d319:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:0d3d319:         } else {
1:0d3d319:             assertEquals("Value matches", r + r.length(), result.getValue());
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     private void testFlatMap(String r) throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319: 
1:0d3d319:         Promise<String> flatMap = def.getPromise().flatMap(new Function<String, Promise<? extends String>>() {
1:0d3d319:             @Override
1:0d3d319:             public Promise<String> apply(String s) {
1:0d3d319:                 if (s.contains("!"))
1:0d3d319:                     throw new Nasty(s);
1:0d3d319:                 return Promises.resolved(s + s.length());
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319: 
1:0d3d319:         Throwable fail = new Throwable("fail");
1:0d3d319: 
1:0d3d319:         if ("fail".equals(r)) {
1:0d3d319:             def.fail(fail);
1:0d3d319:         } else {
1:0d3d319:             def.resolve(r);
1:0d3d319:         }
1:0d3d319:         assertTrue("FlatMap resolved", flatMap.isDone());
1:0d3d319: 
1:0d3d319:         @SuppressWarnings({"not thrown", "all"})
1:0d3d319:         Throwable failure = flatMap.getFailure();
1:0d3d319: 
1:0d3d319:         if ("fail".equals(r)) {
1:0d3d319:             assertEquals("Failure matches", fail, failure);
1:0d3d319:         } else if (r.contains("!")) {
1:0d3d319:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:0d3d319:         } else {
1:0d3d319:             // "the returned Promise will be resolved with the Promise from the specified Function,
1:0d3d319:             // as applied to the value of this Promise"
1:0d3d319:             assertEquals("Value matches", r + r.length(), flatMap.getValue());
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     private void testRecover(String r) throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319: 
1:0d3d319:         Promise<String> recover = def.getPromise().recover(new Function<Promise<?>, String>() {
1:0d3d319:             @Override
1:0d3d319:             public String apply(Promise<?> promise) {
1:0d3d319:                 try {
1:0d3d319:                     @SuppressWarnings({"not thrown", "all"})
1:0d3d319:                     String msg = promise.getFailure().getMessage();
1:0d3d319:                     if (msg == null) {
1:0d3d319:                         throw new Nasty(null);
1:0d3d319:                     }
1:0d3d319:                     if (msg.equals("null")) {
1:0d3d319:                         return null;
1:0d3d319:                     }
1:0d3d319:                     return "recover:" + msg;
1:0d3d319:                 } catch (InterruptedException e) {
1:0d3d319:                     return null;
1:0d3d319:                 }
1:0d3d319:             }
1:0d3d319:         });
1:0d3d319: 
1:0d3d319:         Throwable fail = new Throwable(r);
1:0d3d319: 
1:0d3d319:         if (null == r || "fail".equals(r) || "null".equals(r)) {
1:0d3d319:             def.fail(fail);
1:0d3d319:         } else {
1:0d3d319:             def.resolve(r);
1:0d3d319:         }
1:0d3d319:         assertTrue("Recover resolved", recover.isDone());
1:0d3d319: 
1:0d3d319:         if ("fail".equals(r)) {
1:0d3d319:             // "recover Promise will be resolved with the recovery value"
1:0d3d319:             assertEquals("Recovery value matches", "recover:" + r, recover.getValue());
1:0d3d319:         } else if ("null".equals(r)) {
1:0d3d319:             // "recover Promise will be failed with the failure of this Promise"
1:0d3d319:             assertEquals("Recovery failed matches", fail, recover.getFailure());
1:0d3d319:         } else if (r == null) {
1:0d3d319:             @SuppressWarnings({"not thrown", "all"})
1:0d3d319:             Throwable failure = recover.getFailure();
1:0d3d319:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:0d3d319:         } else {
1:0d3d319:             // "the returned Promise will be resolved with the value of this Promise"
1:0d3d319:             assertEquals("Value matches", def.getPromise().getValue(), recover.getValue());
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     private void testRecoverWith(String r) throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319: 
1:0d3d319:         Promise<? extends String> recover = def.getPromise().recoverWith(
1:0d3d319:                 new Function<Promise<?>, Promise<? extends String>>() {
1:0d3d319:                     @Override
1:0d3d319:                     public Promise<String> apply(Promise<?> promise) {
1:0d3d319:                         try {
1:0d3d319:                             @SuppressWarnings({"not thrown", "all"})
1:0d3d319:                             String msg = promise.getFailure().getMessage();
1:0d3d319:                             if (msg == null) {
1:0d3d319:                                 throw new Nasty(null);
1:0d3d319:                             }
1:0d3d319:                             if (msg.equals("null")) {
1:0d3d319:                                 return null;
1:0d3d319:                             }
1:0d3d319:                             return Promises.resolved("recover:" + msg);
1:0d3d319: 
1:0d3d319:                         } catch (InterruptedException e) {
1:0d3d319:                             return null;
1:0d3d319:                         }
1:0d3d319:                     }
1:0d3d319:                 });
1:0d3d319: 
1:0d3d319:         Throwable fail = new Throwable(r);
1:0d3d319: 
1:0d3d319:         if (null == r || "fail".equals(r) || "null".equals(r)) {
1:0d3d319:             def.fail(fail);
1:0d3d319:         } else {
1:0d3d319:             def.resolve(r);
1:0d3d319:         }
1:0d3d319:         assertTrue("RecoverWith resolved", recover.isDone());
1:0d3d319: 
1:0d3d319:         if ("fail".equals(r)) {
1:0d3d319:             // "recover Promise will be resolved with the recovery value"
1:0d3d319:             assertEquals("Recovery value matches", "recover:" + r, recover.getValue());
1:0d3d319:         } else if ("null".equals(r)) {
1:0d3d319:             // "recover Promise will be failed with the failure of this Promise"
1:0d3d319:             assertEquals("Recovery failed matches", fail, recover.getFailure());
1:0d3d319:         } else if (r == null) {
1:0d3d319:             @SuppressWarnings({"not thrown", "all"})
1:0d3d319:             Throwable failure = recover.getFailure();
1:0d3d319:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:0d3d319:         } else {
1:0d3d319:             // "the returned Promise will be resolved with the value of this Promise"
1:0d3d319:             assertEquals("Value matches", def.getPromise().getValue(), recover.getValue());
1:0d3d319:         }
1:0d3d319: 
1:0d3d319:     }
1:0d3d319: 
1:0d3d319:     void testFallback(String r, String f) throws Exception {
1:0d3d319:         Deferred<String> def = new Deferred<String>();
1:0d3d319:         Promise<String> promise = def.getPromise();
1:0d3d319:         Deferred<String> fallback = new Deferred<String>();
1:0d3d319:         Promise<String> result = promise.fallbackTo(fallback.getPromise());
1:0d3d319: 
1:0d3d319:         Throwable fail = new Throwable(r);
1:0d3d319:         Throwable fail2 = new Throwable(f + f);
1:0d3d319: 
1:0d3d319:         if ("fail".equals(r)) {
1:0d3d319:             if ("fail".equals(f)) {
1:0d3d319:                 fallback.fail(fail2);
1:0d3d319:             } else {
1:0d3d319:                 fallback.resolve(f);
1:0d3d319:             }
1:0d3d319:             def.fail(fail);
1:0d3d319:         } else {
1:0d3d319:             def.resolve(r);
1:0d3d319:         }
1:0d3d319:         assertTrue("result resolved", result.isDone());
1:0d3d319: 
1:0d3d319:         if ("fail".equals(r)) {
1:0d3d319:             if ("fail".equals(f)) {
1:0d3d319:                 assertEquals("Failure matches", fail, result.getFailure());
1:0d3d319:             } else {
1:0d3d319:                 assertEquals("Fallback matches", f, result.getValue());
1:0d3d319:             }
1:0d3d319:         } else {
1:0d3d319:             assertEquals("Value matches", r, result.getValue());
1:0d3d319:         }
1:0d3d319:     }
1:0d3d319: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:14ceeb1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.NoSuchElementException;
1: 
/////////////////////////////////////////////////////////////////////////
commit:0d3d319
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.async.promise.test;
1: 
1: import org.junit.Test;
1: import org.osgi.util.function.Function;
1: import org.osgi.util.function.Predicate;
1: import org.osgi.util.promise.Deferred;
1: import org.osgi.util.promise.Promise;
1: import org.osgi.util.promise.Promises;
1: 
0: import java.util.NoSuchElementException;
0: import java.util.concurrent.CountDownLatch;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
1: public class FunctionTest {
1: 
1:     @Test
1:     public void testFilter() throws Exception {
1:         testFilter("hello");
1:         testFilter("!reject");
1:         testFilter("fail");
1:         testFilter(null);
1:         testFilter("already");
1:         testFilter("already!");
1:     }
1: 
1:     @Test
1:     public void testMap() throws Exception {
1:         testMap("hello");
1:         testMap("hello!");
1:         testMap("fail");
1:         testMap("fail!");
1:     }
1: 
1:     @Test
1:     public void testFlatMap() throws Exception {
1:         testFlatMap("hello");
1:         testFlatMap("hello!");
1:         testFlatMap("fail");
1:     }
1: 
1:     @Test
1:     public void testRecover() throws Exception {
1:         testRecover("hello");
1:         testRecover("fail");
1:         testRecover("null");
1:         testRecover(null);
1:     }
1: 
1:     @Test
1:     public void testRecoverWith() throws Exception {
1:         testRecoverWith("hello");
1:         testRecoverWith("fail");
1:         testRecoverWith("null");
1:         testRecoverWith(null);
1:     }
1: 
1:     @Test
1:     public void testFallback() throws Exception {
1:         testFallback("hello", "world");
1:         testFallback("fail", "world");
1:         testFallback("hello", "fail");
1:         testFallback("fail", "fail");
1:     }
1: 
1:     @Test
1:     public void testFilter2() throws Exception {
1:         String bigValue = new String("value");
1:         Promise<String> p1 = Promises.resolved(bigValue);
1: 
1:         Promise<String> p2 = p1.filter(new Predicate<String>() {
1:             public boolean test(String t) {
1:                 return t.length() > 0;
1:             }
1:         });
1:         assertTrue("Filter2 resolved", p2.isDone());
1:         assertEquals("Value2 matches", bigValue, p2.getValue());
1: 
1:         Promise<String> p3 = p1.filter(new Predicate<String>() {
1:             public boolean test(String t) {
1:                 return t.length() == 0;
1:             }
1:         });
1:         assertTrue("Filter3 resolved", p3.isDone());
1:         assertTrue("Value3 fail matches", p3.getFailure() instanceof NoSuchElementException);
1:     }
1: 
1:     public static class Nasty extends RuntimeException {
1:         public Nasty(String msg) {
1:             super(msg);
1:         }
1:     }
1: 
1:     private void testFilter(String r) throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1: 
1:         Throwable fail = new Throwable("fail");
1:         boolean already = (r != null && r.startsWith("already"));
1: 
1:         if (already) {
1:             if (r.contains("!")) {
1:                 def.fail(fail);
1:             } else {
1:                 def.resolve(r);
1:             }
1:         }
1: 
1:         Promise<String> filter = def.getPromise().filter(new Predicate<String>() {
1:             @Override
1:             public boolean test(String s) {
1:                 if (s == null) {
1:                     throw new Nasty(null);
1:                 }
1:                 return !s.startsWith("!");
1:             }
1:         });
1: 
1:         if (!already) {
1:             if ("fail".equals(r)) {
1:                 def.fail(fail);
1:             } else {
1:                 def.resolve(r);
1:             }
1:         }
1:         assertTrue("Filter resolved", filter.isDone());
1: 
1:         @SuppressWarnings({"not thrown", "all"})
1:         Throwable failure = filter.getFailure();
1: 
1:         if ("fail".equals(r)) {
1:             assertEquals("Failure matches", fail, filter.getFailure());
1:         } else if (already && r.contains("!")) {
1:             assertEquals("Failure matches", fail, filter.getFailure());
1:         } else if (r == null) {
1:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:         } else if (r.startsWith("!")) {
1:             assertTrue("Failure instanceof NoSuchElementException", failure instanceof NoSuchElementException);
1:         } else {
1:             assertEquals("Value matches", r, filter.getValue());
1:         }
1:     }
1: 
1:     private void testMap(String r) throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1: 
1:         Promise<String> result = def.getPromise().map(new Function<String, String>() {
1:             @Override
1:             public String apply(String s) {
1:                 if (s.contains("!"))
1:                     throw new Nasty(s);
1:                 return s + s.length();
1:             }
1:         });
1: 
1:         Throwable fail = new Throwable("fail");
1: 
1:         if (r.startsWith("fail")) {
1:             def.fail(fail);
1:         } else {
1:             def.resolve(r);
1:         }
1:         assertTrue("Map resolved", result.isDone());
1: 
1:         @SuppressWarnings({"not thrown", "all"})
1:         Throwable failure = result.getFailure();
1:         if (r.startsWith("fail")) {
1:             assertEquals("Failure matches", fail, failure);
1:         } else if (r.contains("!")) {
1:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:         } else {
1:             assertEquals("Value matches", r + r.length(), result.getValue());
1:         }
1:     }
1: 
1:     private void testFlatMap(String r) throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1: 
1:         Promise<String> flatMap = def.getPromise().flatMap(new Function<String, Promise<? extends String>>() {
1:             @Override
1:             public Promise<String> apply(String s) {
1:                 if (s.contains("!"))
1:                     throw new Nasty(s);
1:                 return Promises.resolved(s + s.length());
1:             }
1:         });
1: 
1:         Throwable fail = new Throwable("fail");
1: 
1:         if ("fail".equals(r)) {
1:             def.fail(fail);
1:         } else {
1:             def.resolve(r);
1:         }
1:         assertTrue("FlatMap resolved", flatMap.isDone());
1: 
1:         @SuppressWarnings({"not thrown", "all"})
1:         Throwable failure = flatMap.getFailure();
1: 
1:         if ("fail".equals(r)) {
1:             assertEquals("Failure matches", fail, failure);
1:         } else if (r.contains("!")) {
1:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:         } else {
1:             // "the returned Promise will be resolved with the Promise from the specified Function,
1:             // as applied to the value of this Promise"
1:             assertEquals("Value matches", r + r.length(), flatMap.getValue());
1:         }
1:     }
1: 
1:     private void testRecover(String r) throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1: 
1:         Promise<String> recover = def.getPromise().recover(new Function<Promise<?>, String>() {
1:             @Override
1:             public String apply(Promise<?> promise) {
1:                 try {
1:                     @SuppressWarnings({"not thrown", "all"})
1:                     String msg = promise.getFailure().getMessage();
1:                     if (msg == null) {
1:                         throw new Nasty(null);
1:                     }
1:                     if (msg.equals("null")) {
1:                         return null;
1:                     }
1:                     return "recover:" + msg;
1:                 } catch (InterruptedException e) {
1:                     return null;
1:                 }
1:             }
1:         });
1: 
1:         Throwable fail = new Throwable(r);
1: 
1:         if (null == r || "fail".equals(r) || "null".equals(r)) {
1:             def.fail(fail);
1:         } else {
1:             def.resolve(r);
1:         }
1:         assertTrue("Recover resolved", recover.isDone());
1: 
1:         if ("fail".equals(r)) {
1:             // "recover Promise will be resolved with the recovery value"
1:             assertEquals("Recovery value matches", "recover:" + r, recover.getValue());
1:         } else if ("null".equals(r)) {
1:             // "recover Promise will be failed with the failure of this Promise"
1:             assertEquals("Recovery failed matches", fail, recover.getFailure());
1:         } else if (r == null) {
1:             @SuppressWarnings({"not thrown", "all"})
1:             Throwable failure = recover.getFailure();
1:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:         } else {
1:             // "the returned Promise will be resolved with the value of this Promise"
1:             assertEquals("Value matches", def.getPromise().getValue(), recover.getValue());
1:         }
1:     }
1: 
1:     private void testRecoverWith(String r) throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1: 
1:         Promise<? extends String> recover = def.getPromise().recoverWith(
1:                 new Function<Promise<?>, Promise<? extends String>>() {
1:                     @Override
1:                     public Promise<String> apply(Promise<?> promise) {
1:                         try {
1:                             @SuppressWarnings({"not thrown", "all"})
1:                             String msg = promise.getFailure().getMessage();
1:                             if (msg == null) {
1:                                 throw new Nasty(null);
1:                             }
1:                             if (msg.equals("null")) {
1:                                 return null;
1:                             }
1:                             return Promises.resolved("recover:" + msg);
1: 
1:                         } catch (InterruptedException e) {
1:                             return null;
1:                         }
1:                     }
1:                 });
1: 
1:         Throwable fail = new Throwable(r);
1: 
1:         if (null == r || "fail".equals(r) || "null".equals(r)) {
1:             def.fail(fail);
1:         } else {
1:             def.resolve(r);
1:         }
1:         assertTrue("RecoverWith resolved", recover.isDone());
1: 
1:         if ("fail".equals(r)) {
1:             // "recover Promise will be resolved with the recovery value"
1:             assertEquals("Recovery value matches", "recover:" + r, recover.getValue());
1:         } else if ("null".equals(r)) {
1:             // "recover Promise will be failed with the failure of this Promise"
1:             assertEquals("Recovery failed matches", fail, recover.getFailure());
1:         } else if (r == null) {
1:             @SuppressWarnings({"not thrown", "all"})
1:             Throwable failure = recover.getFailure();
1:             assertTrue("Failure instance Nasty", failure instanceof Nasty);
1:         } else {
1:             // "the returned Promise will be resolved with the value of this Promise"
1:             assertEquals("Value matches", def.getPromise().getValue(), recover.getValue());
1:         }
1: 
1:     }
1: 
1:     void testFallback(String r, String f) throws Exception {
1:         Deferred<String> def = new Deferred<String>();
1:         Promise<String> promise = def.getPromise();
1:         Deferred<String> fallback = new Deferred<String>();
1:         Promise<String> result = promise.fallbackTo(fallback.getPromise());
1: 
1:         Throwable fail = new Throwable(r);
1:         Throwable fail2 = new Throwable(f + f);
1: 
1:         if ("fail".equals(r)) {
1:             if ("fail".equals(f)) {
1:                 fallback.fail(fail2);
1:             } else {
1:                 fallback.resolve(f);
1:             }
1:             def.fail(fail);
1:         } else {
1:             def.resolve(r);
1:         }
1:         assertTrue("result resolved", result.isDone());
1: 
1:         if ("fail".equals(r)) {
1:             if ("fail".equals(f)) {
1:                 assertEquals("Failure matches", fail, result.getFailure());
1:             } else {
1:                 assertEquals("Fallback matches", f, result.getValue());
1:             }
1:         } else {
1:             assertEquals("Value matches", r, result.getValue());
1:         }
1:     }
1: }
============================================================================