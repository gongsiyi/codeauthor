1:8d9ae6e: /**
1:8d9ae6e:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:8d9ae6e:  *  contributor license agreements.  See the NOTICE file distributed with
1:8d9ae6e:  *  this work for additional information regarding copyright ownership.
1:8d9ae6e:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:8d9ae6e:  *  (the "License"); you may not use this file except in compliance with
1:8d9ae6e:  *  the License.  You may obtain a copy of the License at
1:8d9ae6e:  *
1:8d9ae6e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8d9ae6e:  *
1:8d9ae6e:  *  Unless required by applicable law or agreed to in writing, software
1:8d9ae6e:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:8d9ae6e:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d9ae6e:  *  See the License for the specific language governing permissions and
1:8d9ae6e:  *  limitations under the License.
1:8d9ae6e:  */
1:8d9ae6e: package org.apache.aries.blueprint.spring;
1:8d9ae6e: 
1:7025168: import java.util.ArrayList;
1:7025168: import java.util.List;
1:7025168: 
1:8d9ae6e: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:7025168: import org.osgi.framework.Bundle;
1:8d9ae6e: import org.osgi.framework.wiring.BundleWiring;
1:8d9ae6e: import org.springframework.beans.BeansException;
1:8d9ae6e: import org.springframework.beans.factory.support.DefaultListableBeanFactory;
1:8d9ae6e: import org.springframework.context.support.AbstractApplicationContext;
1:8d9ae6e: 
1:8d9ae6e: public class SpringApplicationContext extends AbstractApplicationContext {
1:8d9ae6e: 
1:8d9ae6e:     private final ExtendedBlueprintContainer container;
1:8d9ae6e:     private final DefaultListableBeanFactory beanFactory;
1:7025168:     private final List<ClassLoader> parentClassLoaders = new ArrayList<ClassLoader>();
1:8d9ae6e: 
1:8d9ae6e:     public SpringApplicationContext(ExtendedBlueprintContainer container) {
1:8d9ae6e:         this.container = container;
1:8d9ae6e:         this.beanFactory = new BlueprintBeanFactory(container);
1:7025168:         parentClassLoaders.add(container.getClassLoader());
1:7025168:         setClassLoader(new ClassLoader() {
1:7025168:             @Override
1:7025168:             public Class<?> loadClass(String name) throws ClassNotFoundException {
1:7025168:                 for (ClassLoader cl : parentClassLoaders) {
1:7025168:                     try {
1:7025168:                         return cl.loadClass(name);
1:7025168:                     } catch (ClassNotFoundException e) {
1:7025168:                         // Ignore
1:7025168:                     }
1:7025168:                 }
1:7025168:                 throw new ClassNotFoundException(name);
1:7025168:             }
1:7025168:         });
1:8d9ae6e:         prepareBeanFactory(beanFactory);
1:adaedb3:         prepareRefresh();
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     public void process() {
1:8d9ae6e:         // Invoke factory processors registered as beans in the context.
1:8d9ae6e:         invokeBeanFactoryPostProcessors(beanFactory);
1:8d9ae6e:         // Register bean processors that intercept bean creation.
1:8d9ae6e:         registerBeanPostProcessors(beanFactory);
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     protected void refreshBeanFactory() throws BeansException, IllegalStateException {
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     protected void closeBeanFactory() {
1:8d9ae6e:     }
1:8d9ae6e: 
1:8d9ae6e:     @Override
1:8d9ae6e:     public DefaultListableBeanFactory getBeanFactory() throws IllegalStateException {
1:8d9ae6e:         return beanFactory;
1:8d9ae6e:     }
1:8d9ae6e: 
1:7025168:     public void addSourceBundle(Bundle bundle) {
1:7025168:         // This should always be not null, but we want to support unit testing
1:7025168:         if (bundle != null) {
1:7025168:             parentClassLoaders.add(bundle.adapt(BundleWiring.class).getClassLoader());
1:7025168:         }
1:7025168:     }
1:7025168: 
1:8d9ae6e: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:adaedb3
/////////////////////////////////////////////////////////////////////////
1:         prepareRefresh();
commit:7025168
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.osgi.framework.Bundle;
/////////////////////////////////////////////////////////////////////////
1:     private final List<ClassLoader> parentClassLoaders = new ArrayList<ClassLoader>();
1:         parentClassLoaders.add(container.getClassLoader());
1:         setClassLoader(new ClassLoader() {
1:             @Override
1:             public Class<?> loadClass(String name) throws ClassNotFoundException {
1:                 for (ClassLoader cl : parentClassLoaders) {
1:                     try {
1:                         return cl.loadClass(name);
1:                     } catch (ClassNotFoundException e) {
1:                         // Ignore
1:                     }
1:                 }
1:                 throw new ClassNotFoundException(name);
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:     public void addSourceBundle(Bundle bundle) {
1:         // This should always be not null, but we want to support unit testing
1:         if (bundle != null) {
1:             parentClassLoaders.add(bundle.adapt(BundleWiring.class).getClassLoader());
1:         }
1:     }
1: 
commit:55084bf
/////////////////////////////////////////////////////////////////////////
0:         setClassLoader(container.getClassLoader());
commit:8d9ae6e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.aries.blueprint.spring;
1: 
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1: import org.osgi.framework.wiring.BundleWiring;
1: import org.springframework.beans.BeansException;
0: import org.springframework.beans.factory.BeanDefinitionStoreException;
0: import org.springframework.beans.factory.NoSuchBeanDefinitionException;
0: import org.springframework.beans.factory.config.BeanDefinition;
0: import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
0: import org.springframework.beans.factory.support.BeanDefinitionRegistry;
1: import org.springframework.beans.factory.support.DefaultListableBeanFactory;
1: import org.springframework.context.support.AbstractApplicationContext;
1: 
1: public class SpringApplicationContext extends AbstractApplicationContext {
1: 
1:     private final ExtendedBlueprintContainer container;
1:     private final DefaultListableBeanFactory beanFactory;
1: 
1:     public SpringApplicationContext(ExtendedBlueprintContainer container) {
1:         this.container = container;
1:         this.beanFactory = new BlueprintBeanFactory(container);
0:         setClassLoader(container.getBundleContext().getBundle().adapt(BundleWiring.class).getClassLoader());
1:         prepareBeanFactory(beanFactory);
1:     }
1: 
1:     public void process() {
1:         // Invoke factory processors registered as beans in the context.
1:         invokeBeanFactoryPostProcessors(beanFactory);
1:         // Register bean processors that intercept bean creation.
1:         registerBeanPostProcessors(beanFactory);
1:     }
1: 
1:     @Override
1:     protected void refreshBeanFactory() throws BeansException, IllegalStateException {
1:     }
1: 
1:     @Override
1:     protected void closeBeanFactory() {
1:     }
1: 
1:     @Override
1:     public DefaultListableBeanFactory getBeanFactory() throws IllegalStateException {
1:         return beanFactory;
1:     }
1: 
1: }
============================================================================