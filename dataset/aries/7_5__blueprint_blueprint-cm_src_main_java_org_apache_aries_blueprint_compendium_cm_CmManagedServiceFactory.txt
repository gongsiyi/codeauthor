1:f13c6ac: /**
1:f13c6ac:  * Licensed to the Apache Software Foundation (ASF) under one
1:f13c6ac:  * or more contributor license agreements.  See the NOTICE file
1:f13c6ac:  * distributed with this work for additional information
1:f13c6ac:  * regarding copyright ownership.  The ASF licenses this file
1:f13c6ac:  * to you under the Apache License, Version 2.0 (the
1:f13c6ac:  * "License"); you may not use this file except in compliance
1:f13c6ac:  * with the License.  You may obtain a copy of the License at
1:f13c6ac:  *
1:f13c6ac:  *   http://www.apache.org/licenses/LICENSE-2.0
1:f13c6ac:  *
1:f13c6ac:  * Unless required by applicable law or agreed to in writing,
1:f13c6ac:  * software distributed under the License is distributed on an
1:f13c6ac:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:f13c6ac:  * KIND, either express or implied.  See the License for the
1:f13c6ac:  * specific language governing permissions and limitations
1:f13c6ac:  * under the License.
1:f13c6ac:  */
1:6414875: package org.apache.aries.blueprint.compendium.cm;
35:f13c6ac: 
1:f13c6ac: import java.lang.reflect.Method;
1:f13c6ac: import java.util.Collections;
1:f13c6ac: import java.util.Dictionary;
1:f13c6ac: import java.util.HashSet;
1:f13c6ac: import java.util.Hashtable;
1:f13c6ac: import java.util.List;
1:f13c6ac: import java.util.Map;
1:f13c6ac: import java.util.Properties;
1:f13c6ac: import java.util.Set;
1:f13c6ac: 
1:6414875: import org.apache.aries.blueprint.BeanProcessor;
1:6414875: import org.apache.aries.blueprint.ServiceProcessor;
1:e9215e0: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
1:6414875: import org.apache.aries.blueprint.utils.JavaUtils;
1:6414875: import org.apache.aries.blueprint.utils.ReflectionUtils;
1:e2445d0: import org.apache.aries.blueprint.utils.ServiceListener;
1:047a2ae: import org.apache.aries.util.AriesFrameworkUtil;
1:f13c6ac: import org.osgi.framework.Bundle;
1:f13c6ac: import org.osgi.framework.Constants;
1:f13c6ac: import org.osgi.framework.ServiceRegistration;
1:f13c6ac: import org.osgi.service.blueprint.reflect.ServiceMetadata;
1:f13c6ac: import org.osgi.service.cm.ManagedServiceFactory;
1:f13c6ac: import org.slf4j.Logger;
1:f13c6ac: import org.slf4j.LoggerFactory;
1:f13c6ac: 
1:f13c6ac: /**
1:e9c64ce:  * TODO: if we need to make those exported services tied to their references as for other &lt;service/&gt; elements
1:f13c6ac:  * TODO: it becomes a problem as currently we would have to create a specific recipe or something like that
1:f13c6ac:  *
1:76b662a:  * @version $Rev$, $Date$
1:f13c6ac:  */
1:e9215e0: public class CmManagedServiceFactory extends BaseManagedServiceFactory<Object> {
1:f13c6ac: 
1:f13c6ac:     private static final Logger LOGGER = LoggerFactory.getLogger(CmManagedServiceFactory.class);
1:e9215e0: 
1:f13c6ac:     private ExtendedBlueprintContainer blueprintContainer;
1:f13c6ac:     private String id;
1:f13c6ac:     private String factoryPid;
1:f13c6ac:     private List<String> interfaces;
1:f13c6ac:     private int autoExport;
1:f13c6ac:     private int ranking;
1:e9215e0:     private Map<Object,Object> serviceProperties;
1:f13c6ac:     private String managedComponentName;
1:f13c6ac:     private String componentDestroyMethod;
1:f13c6ac:     private List<ServiceListener> listeners;
1:f13c6ac: 
1:f13c6ac:     private ServiceRegistration registration;
1:e9215e0: 
1:e9215e0:     public CmManagedServiceFactory(ExtendedBlueprintContainer blueprintContainer) {
1:e9215e0:         super(blueprintContainer.getBundleContext(), null);
1:e9215e0:         this.blueprintContainer = blueprintContainer;
1:e9215e0:     }
1:f13c6ac: 
1:f13c6ac:     public void init() throws Exception {
1:f13c6ac:         LOGGER.debug("Initializing CmManagedServiceFactory for factoryPid={}", factoryPid);
1:f13c6ac:         Properties props = new Properties();
1:f13c6ac:         props.put(Constants.SERVICE_PID, factoryPid);
1:f13c6ac:         Bundle bundle = blueprintContainer.getBundleContext().getBundle();
1:f13c6ac:         props.put(Constants.BUNDLE_SYMBOLICNAME, bundle.getSymbolicName());
1:f13c6ac:         props.put(Constants.BUNDLE_VERSION, bundle.getHeaders().get(Constants.BUNDLE_VERSION));
1:e9215e0: 
1:b49a314:         registration = blueprintContainer.getBundleContext().registerService(ManagedServiceFactory.class.getName(), this, (Dictionary) props);
26:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void destroy() {
1:047a2ae:         AriesFrameworkUtil.safeUnregisterService(registration);
1:e9215e0:         super.destroy();
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public Map<ServiceRegistration, Object> getServiceMap() {
1:e9215e0:         return Collections.unmodifiableMap(getServices());
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setListeners(List<ServiceListener> listeners) {
1:f13c6ac:         this.listeners = listeners;
1:f13c6ac:     }
1:e9215e0: 
1:f13c6ac:     public void setId(String id) {
1:f13c6ac:         this.id = id;
1:f13c6ac:     }
1:e9215e0: 
1:f13c6ac:     public void setFactoryPid(String factoryPid) {
1:f13c6ac:         this.factoryPid = factoryPid;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setInterfaces(List<String> interfaces) {
1:f13c6ac:         this.interfaces = interfaces;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setAutoExport(int autoExport) {
1:f13c6ac:         this.autoExport = autoExport;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setRanking(int ranking) {
1:f13c6ac:         this.ranking = ranking;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setServiceProperties(Map serviceProperties) {
1:f13c6ac:         this.serviceProperties = serviceProperties;
1:f13c6ac:     }
1:e9215e0: 
1:f13c6ac:     public void setManagedComponentName(String managedComponentName) {
1:f13c6ac:         this.managedComponentName = managedComponentName;
1:f13c6ac:     }
1:f13c6ac: 
1:f13c6ac:     public void setComponentDestroyMethod(String componentDestroyMethod) {
1:f13c6ac:         this.componentDestroyMethod = componentDestroyMethod;
1:f13c6ac:     }
1:f13c6ac: 
1:e9215e0:     private void getRegistrationProperties(Dictionary properties, boolean update) {
1:f8b465c:         String pid = (String) properties.get(Constants.SERVICE_PID);
1:e9215e0:         CmProperties cm = findServiceProcessor();
1:e9215e0:         if (cm == null) {
1:e9215e0:             while (!properties.isEmpty()) {
1:e9215e0:                 properties.remove(properties.keys().nextElement());
1:f13c6ac:             }
1:f13c6ac:         } else {
1:e9215e0:             if (!cm.getUpdate()) {
1:e9215e0:                 if (update) {
1:e9215e0:                     while (!properties.isEmpty()) {
1:e9215e0:                         properties.remove(properties.keys().nextElement());
1:e9215e0:                     }
1:e9215e0:                     for (Map.Entry entry : cm.getProperties().entrySet()) {
1:e9215e0:                         properties.put(entry.getKey(), entry.getValue());
1:e9215e0:                     }
1:e9215e0:                 } else {
1:e9215e0:                     cm.updated(properties);
1:e9215e0:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:e9215e0:         if (serviceProperties != null) {
1:e9215e0:             for (Map.Entry entry : serviceProperties.entrySet()) {
1:e9215e0:                 properties.put(entry.getKey(), entry.getValue());
1:f13c6ac:             }
1:f13c6ac:         }
1:e9215e0:         properties.put(Constants.SERVICE_RANKING, ranking);
1:f8b465c:         properties.put(Constants.SERVICE_PID, pid);
1:f13c6ac:     }
1:f13c6ac: 
1:422ba76:     private void updateComponentProperties(Object bean, Dictionary props) {
1:f13c6ac:         CmManagedProperties cm = findBeanProcessor();
2:f13c6ac:         if (cm != null) {
1:422ba76:             cm.updated(bean, props);
1:f13c6ac:         }
1:f13c6ac:     }
1:e9215e0: 
1:f13c6ac:     private CmManagedProperties findBeanProcessor() {
1:f13c6ac:         for (BeanProcessor beanProcessor : blueprintContainer.getProcessors(BeanProcessor.class)) {
1:f13c6ac:             if (beanProcessor instanceof CmManagedProperties) {
1:f13c6ac:                 CmManagedProperties cm = (CmManagedProperties) beanProcessor;
1:f13c6ac:                 if (managedComponentName.equals(cm.getBeanName()) && "".equals(cm.getPersistentId())) {
1:f13c6ac:                     return cm;
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
2:f13c6ac:         return null;
1:f13c6ac:     }
1:e9215e0: 
1:f13c6ac:     private CmProperties findServiceProcessor() {
1:f13c6ac:         for (ServiceProcessor processor : blueprintContainer.getProcessors(ServiceProcessor.class)) {
1:f13c6ac:             if (processor instanceof CmProperties) {
1:f13c6ac:                 CmProperties cm = (CmProperties) processor;
1:f13c6ac:                 if (id.equals(cm.getServiceId())) {
1:f13c6ac:                     return cm;
1:f13c6ac:                 }
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         return null;
1:f13c6ac:     }
1:e9215e0: 
1:f13c6ac:     private Method findDestroyMethod(Class clazz) {
1:e9215e0:         Method method = null;
1:f13c6ac:         if (componentDestroyMethod != null && componentDestroyMethod.length() > 0) {
1:f13c6ac:             List<Method> methods = ReflectionUtils.findCompatibleMethods(clazz, componentDestroyMethod, new Class [] { int.class });
1:f13c6ac:             if (methods != null && !methods.isEmpty()) {
1:f13c6ac:                 method = methods.get(0);
1:f13c6ac:             }
1:f13c6ac:         }
1:f13c6ac:         return method;
1:f13c6ac:     }
1:e9215e0: 
1:e9215e0:     protected Object doCreate(Dictionary properties) throws Exception {
1:422ba76:         updateComponentProperties(null, copy(properties));
1:e9215e0:         Object component = blueprintContainer.getComponentInstance(managedComponentName);
1:e9215e0:         getRegistrationProperties(properties, false);
1:e9215e0:         return component;
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     protected Object doUpdate(Object service, Dictionary properties) throws Exception {
1:422ba76:         updateComponentProperties(service, copy(properties));
1:e9215e0:         getRegistrationProperties(properties, true);
1:e9215e0:         return service;
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     protected void doDestroy(Object service, Dictionary properties, int code) throws Exception {
1:e9215e0:         Method method = findDestroyMethod(service.getClass());
1:e9215e0:         if (method != null) {
1:e9215e0:             try {
1:e9215e0:                 method.invoke(service, new Object [] { code });
1:e9215e0:             } catch (Exception e) {
1:e9215e0:                 LOGGER.info("Error destroying component", e);
1:e9215e0:             }
1:f13c6ac:         }
1:f13c6ac:     }
1:f13c6ac: 
1:e9215e0:     protected void postRegister(Object service, Dictionary properties, ServiceRegistration registration) {
1:e9215e0:         if (listeners != null && !listeners.isEmpty()) {
1:e9215e0:             Hashtable props = new Hashtable();
1:e9215e0:             JavaUtils.copy(properties, props);
1:e9215e0:             for (ServiceListener listener : listeners) {
1:e9215e0:                 listener.register(service, props);
1:e9215e0:             }
1:e9215e0:         }
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     protected void preUnregister(Object service, Dictionary properties, ServiceRegistration registration) {
1:e9215e0:         if (listeners != null && !listeners.isEmpty()) {
1:e9215e0:             Hashtable props = new Hashtable();
1:e9215e0:             JavaUtils.copy(properties, props);
1:e9215e0:             for (ServiceListener listener : listeners) {
1:e9215e0:                 listener.unregister(service, props);
1:e9215e0:             }
1:e9215e0:         }
1:e9215e0:     }
1:e9215e0: 
1:e9215e0:     protected String[] getExposedClasses(Object service) {
1:f13c6ac:         Class serviceClass = service.getClass();
1:f13c6ac:         Set<String> classes;
1:f13c6ac:         switch (autoExport) {
1:f13c6ac:             case ServiceMetadata.AUTO_EXPORT_INTERFACES:
1:f13c6ac:                 classes = ReflectionUtils.getImplementedInterfaces(new HashSet<String>(), serviceClass);
1:f13c6ac:                 break;
1:f13c6ac:             case ServiceMetadata.AUTO_EXPORT_CLASS_HIERARCHY:
1:f13c6ac:                 classes = ReflectionUtils.getSuperClasses(new HashSet<String>(), serviceClass);
1:f13c6ac:                 break;
1:f13c6ac:             case ServiceMetadata.AUTO_EXPORT_ALL_CLASSES:
1:f13c6ac:                 classes = ReflectionUtils.getSuperClasses(new HashSet<String>(), serviceClass);
1:f13c6ac:                 classes = ReflectionUtils.getImplementedInterfaces(classes, serviceClass);
1:f13c6ac:                 break;
1:f13c6ac:             default:
1:f13c6ac:                 classes = new HashSet<String>(interfaces);
1:f13c6ac:                 break;
1:f13c6ac:         }
1:e9215e0:         return classes.toArray(new String[classes.size()]);
1:f13c6ac:     }
1:f13c6ac: 
1:e9215e0:     private Hashtable copy(Dictionary source) {
1:e9215e0:         Hashtable ht = new Hashtable();
1:e9215e0:         JavaUtils.copy(ht, source);
1:e9215e0:         return ht;
1:f13c6ac:     }
1:e9215e0: 
1:f13c6ac: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:e9c64ce
/////////////////////////////////////////////////////////////////////////
1:  * TODO: if we need to make those exported services tied to their references as for other &lt;service/&gt; elements
commit:f8b465c
/////////////////////////////////////////////////////////////////////////
1:         String pid = (String) properties.get(Constants.SERVICE_PID);
/////////////////////////////////////////////////////////////////////////
1:         properties.put(Constants.SERVICE_PID, pid);
commit:e9215e0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
/////////////////////////////////////////////////////////////////////////
1: public class CmManagedServiceFactory extends BaseManagedServiceFactory<Object> {
1: 
1:     private Map<Object,Object> serviceProperties;
1: 
1:     public CmManagedServiceFactory(ExtendedBlueprintContainer blueprintContainer) {
1:         super(blueprintContainer.getBundleContext(), null);
1:         this.blueprintContainer = blueprintContainer;
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
0:         registration = blueprintContainer.getBundleContext().registerService(ManagedServiceFactory.class.getName(), this, props);
1:         super.destroy();
1:         return Collections.unmodifiableMap(getServices());
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void getRegistrationProperties(Dictionary properties, boolean update) {
1:         CmProperties cm = findServiceProcessor();
1:         if (cm == null) {
1:             while (!properties.isEmpty()) {
1:                 properties.remove(properties.keys().nextElement());
0:         } else  {
1:             if (!cm.getUpdate()) {
1:                 if (update) {
1:                     while (!properties.isEmpty()) {
1:                         properties.remove(properties.keys().nextElement());
1:                     }
1:                     for (Map.Entry entry : cm.getProperties().entrySet()) {
1:                         properties.put(entry.getKey(), entry.getValue());
1:                     }
1:                 } else {
1:                     cm.updated(properties);
1:         }
1:         if (serviceProperties != null) {
1:             for (Map.Entry entry : serviceProperties.entrySet()) {
1:                 properties.put(entry.getKey(), entry.getValue());
1:         properties.put(Constants.SERVICE_RANKING, ranking);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         Method method = null;
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected Object doCreate(Dictionary properties) throws Exception {
0:         updateComponentProperties(copy(properties));
1:         Object component = blueprintContainer.getComponentInstance(managedComponentName);
1:         getRegistrationProperties(properties, false);
1:         return component;
1:     }
1: 
1:     protected Object doUpdate(Object service, Dictionary properties) throws Exception {
0:         updateComponentProperties(copy(properties));
1:         getRegistrationProperties(properties, true);
1:         return service;
1:     }
1: 
1:     protected void doDestroy(Object service, Dictionary properties, int code) throws Exception {
1:         Method method = findDestroyMethod(service.getClass());
1:         if (method != null) {
1:             try {
1:                 method.invoke(service, new Object [] { code });
1:             } catch (Exception e) {
1:                 LOGGER.info("Error destroying component", e);
1:             }
1:     protected void postRegister(Object service, Dictionary properties, ServiceRegistration registration) {
1:         if (listeners != null && !listeners.isEmpty()) {
1:             Hashtable props = new Hashtable();
1:             JavaUtils.copy(properties, props);
1:             for (ServiceListener listener : listeners) {
1:                 listener.register(service, props);
1:             }
1:         }
1:     }
1: 
1:     protected void preUnregister(Object service, Dictionary properties, ServiceRegistration registration) {
1:         if (listeners != null && !listeners.isEmpty()) {
1:             Hashtable props = new Hashtable();
1:             JavaUtils.copy(properties, props);
1:             for (ServiceListener listener : listeners) {
1:                 listener.unregister(service, props);
1:             }
1:         }
1:     }
1: 
1:     protected String[] getExposedClasses(Object service) {
/////////////////////////////////////////////////////////////////////////
1:         return classes.toArray(new String[classes.size()]);
1:     private Hashtable copy(Dictionary source) {
1:         Hashtable ht = new Hashtable();
1:         JavaUtils.copy(ht, source);
1:         return ht;
1: 
commit:f13c6ac
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.geronimo.blueprint.compendium.cm;
1: 
1: import java.lang.reflect.Method;
1: import java.util.Collections;
1: import java.util.Dictionary;
1: import java.util.HashSet;
1: import java.util.Hashtable;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.Set;
0: import java.util.concurrent.ConcurrentHashMap;
1: 
0: import org.apache.geronimo.blueprint.BeanProcessor;
0: import org.apache.geronimo.blueprint.ExtendedBlueprintContainer;
0: import org.apache.geronimo.blueprint.ServiceProcessor;
0: import org.apache.geronimo.blueprint.container.ServiceListener;
0: import org.apache.geronimo.blueprint.utils.JavaUtils;
0: import org.apache.geronimo.blueprint.utils.ReflectionUtils;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.Constants;
0: import org.osgi.framework.ServiceReference;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.blueprint.reflect.ServiceMetadata;
0: import org.osgi.service.cm.Configuration;
0: import org.osgi.service.cm.ConfigurationAdmin;
0: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedServiceFactory;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * TODO: if we need to make those exported services tied to their references as for other <service/> elements
1:  * TODO: it becomes a problem as currently we would have to create a specific recipe or something like that
1:  *
0:  * @author <a href="mailto:dev@geronimo.apache.org">Apache Geronimo Project</a>
0:  * @version $Rev: 766508 $, $Date: 2009-04-19 22:09:27 +0200 (Sun, 19 Apr 2009) $
1:  */
0: public class CmManagedServiceFactory {
1: 
0:     static final int CONFIGURATION_ADMIN_OBJECT_DELETED = 1;
1: 
0:     static final int BUNDLE_STOPPING = 2;
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(CmManagedServiceFactory.class);
1:     
1:     private ExtendedBlueprintContainer blueprintContainer;
0:     private ConfigurationAdmin configAdmin;
1:     private String id;
1:     private String factoryPid;
1:     private List<String> interfaces;
1:     private int autoExport;
1:     private int ranking;
0:     private Map serviceProperties;
1:     private String managedComponentName;
1:     private String componentDestroyMethod;
1:     private List<ServiceListener> listeners;
0:     private final Object lock = new Object();
1: 
1:     private ServiceRegistration registration;
0:     private Map<String, ServiceRegistration> pids = new ConcurrentHashMap<String, ServiceRegistration>();
0:     private Map<ServiceRegistration, Object> services = new ConcurrentHashMap<ServiceRegistration, Object>();
1: 
1:     public void init() throws Exception {
1:         LOGGER.debug("Initializing CmManagedServiceFactory for factoryPid={}", factoryPid);
1:         Properties props = new Properties();
1:         props.put(Constants.SERVICE_PID, factoryPid);
1:         Bundle bundle = blueprintContainer.getBundleContext().getBundle();
1:         props.put(Constants.BUNDLE_SYMBOLICNAME, bundle.getSymbolicName());
1:         props.put(Constants.BUNDLE_VERSION, bundle.getHeaders().get(Constants.BUNDLE_VERSION));
1:         
0:         synchronized(lock) {
0:             registration = blueprintContainer.getBundleContext().registerService(ManagedServiceFactory.class.getName(), new ConfigurationWatcher(), props);
1:         
0:             String filter = '(' + ConfigurationAdmin.SERVICE_FACTORYPID + '=' + this.factoryPid + ')';
0:             Configuration[] configs = configAdmin.listConfigurations(filter);
0:             if (configs != null) {
0:                 for (Configuration config : configs) {
0:                     updated(config.getPid(), config.getProperties());
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public void destroy() {
0:         if (registration != null) {
0:             registration.unregister();
1:         }
0:         for (Map.Entry<ServiceRegistration, Object> entry : services.entrySet()) {
0:             destroy(entry.getValue(), entry.getKey(), BUNDLE_STOPPING);
1:         }
0:         services.clear();
0:         pids.clear();
1:     }
1: 
0:     private void destroy(Object component, ServiceRegistration registration, int code) {
0:         if (listeners != null) {
0:             ServiceReference ref = registration.getReference();
0:             for (ServiceListener listener : listeners) {
0:                 Hashtable props = JavaUtils.getProperties(ref);
0:                 listener.unregister(component, props);
1:             }
1:         }
0:         destroyComponent(component, code);
0:         registration.unregister();
1:     }
1:     
1:     public Map<ServiceRegistration, Object> getServiceMap() {
0:         return Collections.unmodifiableMap(services);
1:     }
1: 
0:     public void setBlueprintContainer(ExtendedBlueprintContainer blueprintContainer) {
0:         this.blueprintContainer = blueprintContainer;
1:     }
1: 
0:     public void setConfigAdmin(ConfigurationAdmin configAdmin) {
0:         this.configAdmin = configAdmin;
1:     }
1: 
1:     public void setListeners(List<ServiceListener> listeners) {
1:         this.listeners = listeners;
1:     }
1:     
1:     public void setId(String id) {
1:         this.id = id;
1:     }
1:     
1:     public void setFactoryPid(String factoryPid) {
1:         this.factoryPid = factoryPid;
1:     }
1: 
1:     public void setInterfaces(List<String> interfaces) {
1:         this.interfaces = interfaces;
1:     }
1: 
1:     public void setAutoExport(int autoExport) {
1:         this.autoExport = autoExport;
1:     }
1: 
1:     public void setRanking(int ranking) {
1:         this.ranking = ranking;
1:     }
1: 
1:     public void setServiceProperties(Map serviceProperties) {
1:         this.serviceProperties = serviceProperties;
1:     }
1:     
1:     public void setManagedComponentName(String managedComponentName) {
1:         this.managedComponentName = managedComponentName;
1:     }
1: 
1:     public void setComponentDestroyMethod(String componentDestroyMethod) {
1:         this.componentDestroyMethod = componentDestroyMethod;
1:     }
1:     
0:     protected void updated(String pid, Dictionary props) {
0:         LOGGER.debug("Updated configuration {} with props {}", pid, props);
0:         ServiceRegistration reg = pids.get(pid);
0:         if (reg == null) {      
0:             updateComponentProperties(props);
1: 
0:             Object component = blueprintContainer.getComponentInstance(managedComponentName);
1:             
0:             //  TODO: call listeners, etc...
1:                     
0:             Hashtable regProps = getRegistrationProperties(pid);            
0:             CmProperties cm = findServiceProcessor();
1:             if (cm != null) {
0:                 if ("".equals(cm.getPersistentId())) {
0:                     JavaUtils.copy(regProps, props);
1:                 }
0:                 cm.updateProperties(new PropertiesUpdater(pid), regProps);
1:             }
1:             
0:             Set<String> classes = getClasses(component);
0:             String[] classArray = classes.toArray(new String[classes.size()]);
0:             reg = blueprintContainer.getBundleContext().registerService(classArray, component, regProps);
1: 
0:             LOGGER.debug("Service {} registered with interfaces {} and properties {}", new Object [] { component, classes, regProps });
1:             
0:             services.put(reg, component);
0:             pids.put(pid, reg);
1:             
0:             if (listeners != null) {
0:                 for (ServiceListener listener : listeners) {
0:                     listener.register(component, regProps);
1:                 }
1:             }
1:         } else {
0:             updateComponentProperties(props);
1:             
0:             CmProperties cm = findServiceProcessor();
0:             if (cm != null && "".equals(cm.getPersistentId())) {
0:                 Dictionary regProps = getRegistrationProperties(pid);    
0:                 JavaUtils.copy(regProps, props);
0:                 cm.updated(regProps);
1:             }
1:         }
1:     }
1: 
0:     private Hashtable getRegistrationProperties(String pid) {
0:         Hashtable regProps = new Hashtable();
0:         if (serviceProperties != null) {
0:             regProps.putAll(serviceProperties);
1:         }
0:         regProps.put(Constants.SERVICE_PID, pid);
0:         regProps.put(Constants.SERVICE_RANKING, ranking);
0:         return regProps;
1:     }
1:     
0:     private void updateComponentProperties(Dictionary props) {
1:         CmManagedProperties cm = findBeanProcessor();
1:         if (cm != null) {
0:             cm.updated(props);
1:         }
1:     }
1:     
1:     private CmManagedProperties findBeanProcessor() {
1:         for (BeanProcessor beanProcessor : blueprintContainer.getProcessors(BeanProcessor.class)) {
1:             if (beanProcessor instanceof CmManagedProperties) {
1:                 CmManagedProperties cm = (CmManagedProperties) beanProcessor;
1:                 if (managedComponentName.equals(cm.getBeanName()) && "".equals(cm.getPersistentId())) {
1:                     return cm;
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1:         
1:     private CmProperties findServiceProcessor() {
1:         for (ServiceProcessor processor : blueprintContainer.getProcessors(ServiceProcessor.class)) {
1:             if (processor instanceof CmProperties) {
1:                 CmProperties cm = (CmProperties) processor;
1:                 if (id.equals(cm.getServiceId())) {
1:                     return cm;
1:                 }
1:             }
1:         }
1:         return null;
1:     }
1:         
0:     private void destroyComponent(Object instance, int reason) {
0:         Method method = findDestroyMethod(instance.getClass());
0:         if (method != null) {
0:             try {
0:                 method.invoke(instance, new Object [] { reason });
0:             } catch (Exception e) {
0:                 e.printStackTrace();
1:             }
1:         }
1:     }
1:     
1:     private Method findDestroyMethod(Class clazz) {
0:         Method method = null;        
1:         if (componentDestroyMethod != null && componentDestroyMethod.length() > 0) {
1:             List<Method> methods = ReflectionUtils.findCompatibleMethods(clazz, componentDestroyMethod, new Class [] { int.class });
1:             if (methods != null && !methods.isEmpty()) {
1:                 method = methods.get(0);
1:             }
1:         }
1:         return method;
1:     }
1:     
0:     protected void deleted(String pid) {
0:         LOGGER.debug("Deleted configuration {}", pid);
0:         ServiceRegistration reg = pids.remove(pid);
0:         if (reg != null) {
0:             Object component = services.remove(reg);
0:             destroy(component, reg, CONFIGURATION_ADMIN_OBJECT_DELETED);
1:         }
1:     }
1: 
0:     private Set<String> getClasses(Object service) {
1:         Class serviceClass = service.getClass();
1:         Set<String> classes;
1:         switch (autoExport) {
1:             case ServiceMetadata.AUTO_EXPORT_INTERFACES:
1:                 classes = ReflectionUtils.getImplementedInterfaces(new HashSet<String>(), serviceClass);
1:                 break;
1:             case ServiceMetadata.AUTO_EXPORT_CLASS_HIERARCHY:
1:                 classes = ReflectionUtils.getSuperClasses(new HashSet<String>(), serviceClass);
1:                 break;
1:             case ServiceMetadata.AUTO_EXPORT_ALL_CLASSES:
1:                 classes = ReflectionUtils.getSuperClasses(new HashSet<String>(), serviceClass);
1:                 classes = ReflectionUtils.getImplementedInterfaces(classes, serviceClass);
1:                 break;
1:             default:
1:                 classes = new HashSet<String>(interfaces);
1:                 break;
1:         }
0:         return classes;
1:     }
1:     
0:     private class ConfigurationWatcher implements ManagedServiceFactory {
1: 
0:         public String getName() {
1:             return null;
1:         }
1: 
0:         public void updated(String pid, Dictionary props) throws ConfigurationException {
0:             CmManagedServiceFactory.this.updated(pid, props);
1:         }
1: 
0:         public void deleted(String pid) {
0:             CmManagedServiceFactory.this.deleted(pid);
1:         }
1:     }
1: 
0:     private class PropertiesUpdater implements ServiceProcessor.ServicePropertiesUpdater {
1: 
0:         private String pid;
1:         
0:         public PropertiesUpdater(String pid) {
0:             this.pid = pid;
1:         }
1:         
0:         public String getId() {
0:             return id;
1:         }
1: 
0:         public void updateProperties(Dictionary properties) {
0:             ServiceRegistration reg = pids.get(pid);
0:             if (reg != null) {
0:                 ServiceReference ref = reg.getReference();
0:                 if (ref != null) {
0:                     Hashtable table = JavaUtils.getProperties(ref);
0:                     JavaUtils.copy(table, properties);
0:                     reg.setProperties(table);
1:                 }
1:             }
1:         }
1:     }
1:    
1: }
author:Jean-Baptiste Onofre
-------------------------------------------------------------------------------
commit:b49a314
/////////////////////////////////////////////////////////////////////////
1:         registration = blueprintContainer.getBundleContext().registerService(ManagedServiceFactory.class.getName(), this, (Dictionary) props);
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:422ba76
/////////////////////////////////////////////////////////////////////////
0:         } else {
/////////////////////////////////////////////////////////////////////////
1:     private void updateComponentProperties(Object bean, Dictionary props) {
1:             cm.updated(bean, props);
/////////////////////////////////////////////////////////////////////////
1:         updateComponentProperties(null, copy(properties));
1:         updateComponentProperties(service, copy(properties));
author:Holly Cummins
-------------------------------------------------------------------------------
commit:a6b69c6
/////////////////////////////////////////////////////////////////////////
0:     private final Map<String, ServiceRegistration> pids = new ConcurrentHashMap<String, ServiceRegistration>();
0:     private final Map<ServiceRegistration, Object> services = new ConcurrentHashMap<ServiceRegistration, Object>();
/////////////////////////////////////////////////////////////////////////
0:       LOGGER.debug("Updated configuration {} with props {}", pid, props);
0: 
0:       Hashtable regProps = null;
0:       Object component = null;
0: 
0:       // This method might be multithreaded, so synchronize checking and
0:       // creating the service
0:       final ServiceRegistration existingReg;
0:       synchronized (pids) {
0:          existingReg = pids.get(pid);
0:          if (existingReg == null) {
0:             component = blueprintContainer.getComponentInstance(managedComponentName);
0: 
0:             // TODO: call listeners, etc...
0: 
0:             regProps = getRegistrationProperties(pid);
0:                if ("".equals(cm.getPersistentId())) {
0:                   JavaUtils.copy(regProps, props);
0:                }
0:                cm.updateProperties(new PropertiesUpdater(pid), regProps);
0: 
0:             ServiceRegistration reg = blueprintContainer.getBundleContext().registerService(classArray, component, regProps);
0:             LOGGER.debug("Service {} registered with interfaces {} and properties {}", new Object[] { component, classes, regProps });
0: 
0:          }
0:         } // end of synchronization
0:         
0:         // If we just registered a service, do the slower stuff outside the synchronized block
0:         if (existingReg == null)
0:         {
/////////////////////////////////////////////////////////////////////////
0:                 regProps = getRegistrationProperties(pid);    
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:e2445d0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.utils.ServiceListener;
commit:047a2ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.util.AriesFrameworkUtil;
/////////////////////////////////////////////////////////////////////////
1:         AriesFrameworkUtil.safeUnregisterService(registration);
/////////////////////////////////////////////////////////////////////////
0:         AriesFrameworkUtil.safeUnregisterService(registration);
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:09a7647
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.blueprint.services.ExtendedBlueprintContainer;
author:Jarek Gawor
-------------------------------------------------------------------------------
commit:76b662a
/////////////////////////////////////////////////////////////////////////
1:  * @version $Rev$, $Date$
commit:de68801
/////////////////////////////////////////////////////////////////////////
commit:6414875
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.blueprint.compendium.cm;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.blueprint.BeanProcessor;
0: import org.apache.aries.blueprint.ExtendedBlueprintContainer;
1: import org.apache.aries.blueprint.ServiceProcessor;
0: import org.apache.aries.blueprint.container.ServiceListener;
1: import org.apache.aries.blueprint.utils.JavaUtils;
1: import org.apache.aries.blueprint.utils.ReflectionUtils;
============================================================================