1:955bf91: /**
1:955bf91:  * Licensed to the Apache Software Foundation (ASF) under one
1:955bf91:  * or more contributor license agreements.  See the NOTICE file
1:955bf91:  * distributed with this work for additional information
1:955bf91:  * regarding copyright ownership.  The ASF licenses this file
1:955bf91:  * to you under the Apache License, Version 2.0 (the
1:955bf91:  * "License"); you may not use this file except in compliance
1:955bf91:  * with the License.  You may obtain a copy of the License at
1:955bf91:  *
1:955bf91:  *   http://www.apache.org/licenses/LICENSE-2.0
1:955bf91:  *
1:955bf91:  * Unless required by applicable law or agreed to in writing,
1:955bf91:  * software distributed under the License is distributed on an
1:955bf91:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:955bf91:  * KIND, either express or implied.  See the License for the
1:955bf91:  * specific language governing permissions and limitations
1:955bf91:  * under the License.
1:955bf91:  */
1:68170e4: package org.apache.aries.jndi.legacy.support;
1:68170e4: 
1:68170e4: import java.security.AccessController;
1:68170e4: import java.security.PrivilegedAction;
1:68170e4: import java.util.Hashtable;
1:68170e4: 
1:68170e4: import javax.naming.Context;
1:68170e4: import javax.naming.NamingException;
1:68170e4: import javax.naming.spi.InitialContextFactory;
1:68170e4: import javax.naming.spi.InitialContextFactoryBuilder;
1:68170e4: 
1:68170e4: /**
1:68170e4:  * Some OSGi based server runtimes, such as jetty OSGi and virgo rely on the thread context classloader
1:68170e4:  * to make their JNDI InitialContextFactory's available in OSGi, rather than relying on the OSGi JNDI spec.
1:68170e4:  * This is a little bizare, but perhaps is just a point in time statement. In any case to support them
1:68170e4:  * using Aries JNDI we have this ICFB which uses the Thread context classloader. We don't ship it in the
1:68170e4:  * jndi uber bundle because it is only for these runtimes which haven't caught up with the latest OSGi specs.
1:68170e4:  * Normally we want to enourage the use of the OSGi spec, but this is a backstop for those wanting to use
1:68170e4:  * Aries JNDI and one of these runtimes.
1:68170e4:  *
1:68170e4:  */
1:68170e4: public class LegacyInitialContextFinder implements InitialContextFactoryBuilder {
1:68170e4: 
1:68170e4: 	public InitialContextFactory createInitialContextFactory(
1:68170e4: 			Hashtable<?, ?> environment) throws NamingException 
1:68170e4: 	{
1:68170e4: 		String icf = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
1:68170e4: 		if (icf != null) {
1:68170e4: 			ClassLoader cl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
1:68170e4: 				public ClassLoader run() {
1:68170e4: 					return Thread.currentThread().getContextClassLoader();
1:68170e4: 				}
1:68170e4: 			});
1:68170e4: 			
1:68170e4: 			try {
1:68170e4: 				Class<?> icfClass = Class.forName(icf, false, cl);
1:68170e4: 				if (InitialContextFactory.class.isAssignableFrom(icfClass)) {
1:68170e4: 					return (InitialContextFactory) icfClass.newInstance();
1:68170e4: 				}
1:68170e4: 			} catch (ClassNotFoundException e) {
1:68170e4: 				// If the ICF doesn't exist this is expected. Should return null so the next builder is queried.
1:68170e4: 			} catch (InstantiationException e) {
1:68170e4: 				// If the ICF couldn't be created just ignore and return null.
1:68170e4: 			} catch (IllegalAccessException e) {
1:68170e4: 				// If the default constructor is private, just ignore and return null.
1:68170e4: 			}
1:68170e4: 		}
1:68170e4: 		
1:68170e4: 		return null;
1:68170e4: 	}
1:68170e4: 
1:68170e4: }
============================================================================
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:955bf91
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:5c76bbf
/////////////////////////////////////////////////////////////////////////
commit:ec71127
/////////////////////////////////////////////////////////////////////////
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:68170e4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jndi.legacy.support;
1: 
1: import java.security.AccessController;
1: import java.security.PrivilegedAction;
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.spi.InitialContextFactory;
1: import javax.naming.spi.InitialContextFactoryBuilder;
1: 
1: /**
1:  * Some OSGi based server runtimes, such as jetty OSGi and virgo rely on the thread context classloader
1:  * to make their JNDI InitialContextFactory's available in OSGi, rather than relying on the OSGi JNDI spec.
1:  * This is a little bizare, but perhaps is just a point in time statement. In any case to support them
1:  * using Aries JNDI we have this ICFB which uses the Thread context classloader. We don't ship it in the
1:  * jndi uber bundle because it is only for these runtimes which haven't caught up with the latest OSGi specs.
1:  * Normally we want to enourage the use of the OSGi spec, but this is a backstop for those wanting to use
1:  * Aries JNDI and one of these runtimes.
1:  *
1:  */
1: public class LegacyInitialContextFinder implements InitialContextFactoryBuilder {
1: 
0: 	@Override
1: 	public InitialContextFactory createInitialContextFactory(
1: 			Hashtable<?, ?> environment) throws NamingException 
1: 	{
1: 		String icf = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
1: 		if (icf != null) {
1: 			ClassLoader cl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
0: 				@Override
1: 				public ClassLoader run() {
1: 					return Thread.currentThread().getContextClassLoader();
1: 				}
1: 			});
1: 			
1: 			try {
1: 				Class<?> icfClass = Class.forName(icf, false, cl);
1: 				if (InitialContextFactory.class.isAssignableFrom(icfClass)) {
1: 					return (InitialContextFactory) icfClass.newInstance();
1: 				}
1: 			} catch (ClassNotFoundException e) {
1: 				// If the ICF doesn't exist this is expected. Should return null so the next builder is queried.
1: 			} catch (InstantiationException e) {
1: 				// If the ICF couldn't be created just ignore and return null.
1: 			} catch (IllegalAccessException e) {
1: 				// If the default constructor is private, just ignore and return null.
1: 			}
1: 		}
1: 		
1: 		return null;
1: 	}
1: 
1: }
commit:2939386
/////////////////////////////////////////////////////////////////////////
0: package org.apache.aries.jndi.legacy.support;
0: 
0: import java.security.AccessController;
0: import java.security.PrivilegedAction;
0: import java.util.Hashtable;
0: 
0: import javax.naming.Context;
0: import javax.naming.NamingException;
0: import javax.naming.spi.InitialContextFactory;
0: import javax.naming.spi.InitialContextFactoryBuilder;
0: 
0: public class LegacyInitialContextFinder implements InitialContextFactoryBuilder {
0: 
0: 	@Override
0: 	public InitialContextFactory createInitialContextFactory(
0: 			Hashtable<?, ?> environment) throws NamingException 
0: 	{
0: 		String icf = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
0: 		if (icf != null) {
0: 			ClassLoader cl = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
0: 				@Override
0: 				public ClassLoader run() {
0: 					return Thread.currentThread().getContextClassLoader();
0: 				}
0: 			});
0: 			
0: 			try {
0: 				Class<?> icfClass = Class.forName(icf, false, cl);
0: 				if (InitialContextFactory.class.isAssignableFrom(icfClass)) {
0: 					return (InitialContextFactory) icfClass.newInstance();
0: 				}
0: 			} catch (ClassNotFoundException e) {
0: 				// If the ICF doesn't exist this is expected. Should return null so the next builder is queried.
0: 			} catch (InstantiationException e) {
0: 				// If the ICF couldn't be created just ignore and return null.
0: 			} catch (IllegalAccessException e) {
0: 				// If the default constructor is private, just ignore and return null.
0: 			}
0: 		}
0: 		
0: 		return null;
0: 	}
0: 
0: }
============================================================================