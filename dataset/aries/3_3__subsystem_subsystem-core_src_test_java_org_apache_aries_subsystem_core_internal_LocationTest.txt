1:552587b: /*
1:552587b:  * Licensed under the Apache License, Version 2.0 (the "License");
1:552587b:  * you may not use this file except in compliance with the License.
1:552587b:  * You may obtain a copy of the License at
1:552587b:  *
1:552587b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:552587b:  *
1:552587b:  * Unless required by applicable law or agreed to in writing, software
1:552587b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:552587b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:552587b:  * See the License for the specific language governing permissions and
1:552587b:  * limitations under the License.
1:552587b:  */
1:bc50b8b: package org.apache.aries.subsystem.core.internal;
1:bc50b8b: 
1:bc50b8b: import static org.junit.Assert.assertEquals;
1:bc50b8b: import static org.junit.Assert.assertNull;
1:bc50b8b: import static org.junit.Assert.fail;
1:bc50b8b: 
1:bc50b8b: import java.net.MalformedURLException;
1:bc50b8b: 
1:bc50b8b: import org.junit.Test;
1:4a4beb2: import org.osgi.framework.Version;
1:bc50b8b: 
1:bc50b8b: public class LocationTest {
1:bc50b8b: 	@Test
1:bc50b8b: 	public void testAnyLocationString() {
1:bc50b8b: 		String locationStr = "anyLocation";
1:3d0e9e1: 		Location location = null;
2:bc50b8b: 		try {
1:3d0e9e1: 			location = new Location(locationStr);
1:bce0ce7: 		}
2:bc50b8b: 		catch (Throwable t) {
2:bc50b8b: 			t.printStackTrace();
1:bc50b8b: 			fail("Any location string must be supported");
5:bc50b8b: 		}
1:3d0e9e1: 		assertNull("Wrong symbolic name", location.getSymbolicName());
1:3d0e9e1: 		assertEquals("Wrong value", locationStr, location.getValue());
1:3d0e9e1: 		assertNull("Wrong version", location.getVersion());
1:3d0e9e1: 		try {
1:3d0e9e1: 			location.open();
1:3d0e9e1: 			fail("Opening a location that does not represent a URL should fail");
1:3d0e9e1: 		}
1:3d0e9e1: 		catch (MalformedURLException e) {
1:3d0e9e1: 			// Okay
1:3d0e9e1: 		}
1:3d0e9e1: 		catch (Throwable t) {
1:3d0e9e1: 			t.printStackTrace();
1:3d0e9e1: 			fail("Wrong exception");
1:3d0e9e1: 		}
1:bc50b8b: 	}
1:4a4beb2: 
1:4a4beb2:     @Test
1:186eb2a:     public void testAnyURIScheme() throws Exception {
1:186eb2a:         Location l = new Location("foo://bar");
1:186eb2a:         assertEquals("foo://bar", l.getValue());
1:186eb2a:     }
1:186eb2a: 
1:186eb2a:     @Test
1:4a4beb2:     public void testSubsystemLocation() throws Exception {
1:4a4beb2:         String locationString = "subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&Subsystem-Version=1.2.3";
1:4a4beb2: 
2:4a4beb2:         Location location = new Location(locationString);
2:4a4beb2:         assertEquals(locationString, location.getValue());
1:4a4beb2:         assertEquals("org.osgi.service.subsystem.root", location.getSymbolicName());
1:4a4beb2:         assertEquals(Version.parseVersion("1.2.3"), location.getVersion());
1:4a4beb2:     }
1:4a4beb2: 
1:4a4beb2:     @Test
1:2e08114:     public void testSubsystemLocationInvalid() throws Exception {
1:2e08114:         // In some cases the following location string is generated
1:2e08114:         String locationString = "subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&Subsystem-Version=1.0.0!/my-subsystem@0.5.0";
1:4a4beb2: 
1:2e08114:         Location location = new Location(locationString);
1:2e08114:         assertEquals(locationString, location.getValue());
1:bce0ce7:         try {
1:bce0ce7:         	String sn = location.getSymbolicName();
1:bce0ce7:         	fail("Expecting an error: " + sn);
1:bce0ce7:         } catch (IllegalArgumentException e) {
2:bce0ce7:         	// expected
1:2e08114:         }
1:bce0ce7:         try {
1:bce0ce7:         	Version v = location.getVersion();
1:bce0ce7:         	fail("Expecting an error: " + v);
1:bce0ce7:         } catch (IllegalArgumentException e) {
1:186eb2a:         	// expected
1:4a4beb2:         }
1:bce0ce7:     }
1:bc50b8b: }
============================================================================
author:A. J. David Bosschaert
-------------------------------------------------------------------------------
commit:186eb2a
/////////////////////////////////////////////////////////////////////////
1:     public void testAnyURIScheme() throws Exception {
1:         Location l = new Location("foo://bar");
1:         assertEquals("foo://bar", l.getValue());
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         	// expected
commit:2e08114
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testSubsystemLocationInvalid() throws Exception {
1:         // In some cases the following location string is generated
1:         String locationString = "subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&Subsystem-Version=1.0.0!/my-subsystem@0.5.0";
1:         Location location = new Location(locationString);
1:         assertEquals(locationString, location.getValue());
0:         assertNull(location.getSymbolicName());
0:         assertNull(location.getVersion());
1:     }
commit:4a4beb2
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.Version;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testSubsystemLocation() throws Exception {
0:         // In some cases the following location string is generated
1:         String locationString = "subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&Subsystem-Version=1.2.3";
1: 
1:         Location location = new Location(locationString);
1:         assertEquals(locationString, location.getValue());
1:         assertEquals("org.osgi.service.subsystem.root", location.getSymbolicName());
1:         assertEquals(Version.parseVersion("1.2.3"), location.getVersion());
1:     }
1: 
1:     @Test
0: 	public void testSubsystemLocationInvalid() throws Exception {
0: 	    // In some cases the following location string is generated
0: 	    String locationString = "subsystem://?Subsystem-SymbolicName=org.osgi.service.subsystem.root&Subsystem-Version=1.0.0!/my-subsystem@0.5.0";
1: 
1: 	    Location location = new Location(locationString);
1: 	    assertEquals(locationString, location.getValue());
0: 	    assertNull(location.getSymbolicName());
0: 	    assertNull(location.getVersion());
1: 	}
author:Tom Watson
-------------------------------------------------------------------------------
commit:bce0ce7
/////////////////////////////////////////////////////////////////////////
1:         try {
1:         	String sn = location.getSymbolicName();
1:         	fail("Expecting an error: " + sn);
1:         } catch (IllegalArgumentException e) {
1:         	// expected
1:         }
1:         try {
1:         	Version v = location.getVersion();
1:         	fail("Expecting an error: " + v);
1:         } catch (IllegalArgumentException e) {
1:         	// expected 
1:         }
author:John Ross
-------------------------------------------------------------------------------
commit:552587b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:3d0e9e1
/////////////////////////////////////////////////////////////////////////
1: 		Location location = null;
1: 			location = new Location(locationStr);
1: 		assertNull("Wrong symbolic name", location.getSymbolicName());
1: 		assertEquals("Wrong value", locationStr, location.getValue());
1: 		assertNull("Wrong version", location.getVersion());
1: 		try {
1: 			location.open();
1: 			fail("Opening a location that does not represent a URL should fail");
1: 		}
1: 		catch (MalformedURLException e) {
1: 			// Okay
1: 		}
1: 		catch (Throwable t) {
1: 			t.printStackTrace();
1: 			fail("Wrong exception");
1: 		}
commit:bc50b8b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.subsystem.core.internal;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.fail;
1: 
1: import java.net.MalformedURLException;
1: 
1: import org.junit.Test;
1: 
1: public class LocationTest {
1: 	@Test
1: 	public void testAnyLocationString() {
1: 		String locationStr = "anyLocation";
1: 		try {
0: 			Location location = new Location(locationStr);
0: 			assertNull("Wrong symbolic name", location.getSymbolicName());
0: 			assertEquals("Wrong value", locationStr, location.getValue());
0: 			assertNull("Wrong version", location.getVersion());
1: 			try {
0: 				location.open();
0: 				fail("Opening a location that does not represent a URL should fail");
1: 			}
0: 			catch (MalformedURLException e) {
0: 				// Okay
1: 			}
1: 			catch (Throwable t) {
1: 				t.printStackTrace();
0: 				fail("Wrong exception");
1: 			}
1: 		}
1: 		catch (Throwable t) {
1: 			t.printStackTrace();
1: 			fail("Any location string must be supported");
1: 		}
1: 	}
1: }
============================================================================