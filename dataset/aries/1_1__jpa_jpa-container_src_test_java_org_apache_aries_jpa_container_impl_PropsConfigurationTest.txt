1:2cfdf52: /*
1:2cfdf52:  * Licensed to the Apache Software Foundation (ASF) under one
1:2cfdf52:  * or more contributor license agreements.  See the NOTICE file
1:2cfdf52:  * distributed with this work for additional information
1:2cfdf52:  * regarding copyright ownership.  The ASF licenses this file
1:2cfdf52:  * to you under the Apache License, Version 2.0 (the
1:2cfdf52:  * "License"); you may not use this file except in compliance
1:2cfdf52:  * with the License.  You may obtain a copy of the License at
1:2cfdf52:  *
1:2cfdf52:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2cfdf52:  *
1:2cfdf52:  * Unless required by applicable law or agreed to in writing,
1:2cfdf52:  * software distributed under the License is distributed on an
1:2cfdf52:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:2cfdf52:  * KIND, either express or implied.  See the License for the
1:2cfdf52:  * specific language governing permissions and limitations
1:2cfdf52:  * under the License.
1:2cfdf52:  */
1:2cfdf52: package org.apache.aries.jpa.container.impl;
1:2cfdf52: 
1:2cfdf52: import static org.mockito.Mockito.atLeastOnce;
1:2cfdf52: import static org.mockito.Mockito.mock;
1:2cfdf52: import static org.mockito.Mockito.verify;
1:2cfdf52: import static org.mockito.Mockito.when;
1:2cfdf52: 
1:2cfdf52: import java.util.Dictionary;
1:2cfdf52: import java.util.Hashtable;
1:2cfdf52: import java.util.Map;
1:2cfdf52: 
1:2cfdf52: import javax.persistence.EntityManagerFactory;
1:2cfdf52: import javax.persistence.spi.PersistenceProvider;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitInfo;
1:2cfdf52: import javax.persistence.spi.PersistenceUnitTransactionType;
1:2cfdf52: 
1:2cfdf52: import org.junit.Test;
1:2cfdf52: import org.mockito.Mockito;
1:2cfdf52: import org.osgi.framework.Bundle;
1:2cfdf52: import org.osgi.framework.BundleContext;
1:2cfdf52: import org.osgi.framework.InvalidSyntaxException;
1:f2e057e: import org.osgi.framework.ServiceRegistration;
1:2cfdf52: import org.osgi.framework.Version;
1:2cfdf52: import org.osgi.service.cm.ConfigurationException;
1:f2e057e: import org.osgi.service.cm.ManagedService;
1:2cfdf52: 
1:2cfdf52: public class PropsConfigurationTest {
1:2cfdf52: 
1:2cfdf52:     @SuppressWarnings({
1:2cfdf52:         "unchecked", "rawtypes"
1:2cfdf52:     })
1:2cfdf52:     @Test
1:2cfdf52:     public void testEmfWithoutProps() throws InvalidSyntaxException, ConfigurationException {
1:2cfdf52:         PersistenceUnitInfo punit = mock(PersistenceUnitInfo.class);
1:2cfdf52:         when(punit.getPersistenceUnitName()).thenReturn("test-props");
1:2cfdf52:         when(punit.getPersistenceProviderClassName())
1:2cfdf52:             .thenReturn("org.eclipse.persistence.jpa.PersistenceProvider");
1:2cfdf52:         when(punit.getTransactionType()).thenReturn(PersistenceUnitTransactionType.JTA);
1:2cfdf52:         BundleContext context = mock(BundleContext.class);
1:f2e057e:         ServiceRegistration reg = mock(ServiceRegistration.class);
1:f2e057e:         when(context.registerService(Mockito.eq(ManagedService.class.getName()), Mockito.any(), Mockito.any(Dictionary.class)))
1:f2e057e:             .thenReturn(reg);
1:2cfdf52:         Bundle bundle = mock(Bundle.class);
1:2cfdf52:         when(bundle.getBundleContext()).thenReturn(context);
1:2cfdf52:         when(bundle.getVersion()).thenReturn(new Version("4.3.1"));
1:2cfdf52:         PersistenceProvider provider = mock(PersistenceProvider.class);
1:2cfdf52: 
2:2cfdf52:         ManagedEMF emf = new ManagedEMF(context, bundle, provider, punit);
2:2cfdf52:         emf.updated(null);
2:2cfdf52:         emf.close();
1:2cfdf52:         verify(provider, atLeastOnce()).createContainerEntityManagerFactory(Mockito.eq(punit),
1:2cfdf52:                                                                             Mockito.eq((Map)null));
1:2cfdf52:         verify(context, atLeastOnce()).registerService(Mockito.eq(EntityManagerFactory.class),
1:2cfdf52:                                                        Mockito.any(EntityManagerFactory.class),
1:2cfdf52:                                                        Mockito.any(Dictionary.class));
1:2cfdf52:     }
1:2cfdf52: 
1:f2e057e:     @SuppressWarnings({
1:f2e057e:         "unchecked", "rawtypes"
1:f2e057e:     })
1:2cfdf52:     @Test
1:2cfdf52:     public void testEmfWithProps() throws InvalidSyntaxException, ConfigurationException {
1:2cfdf52:         PersistenceUnitInfo punit = mock(PersistenceUnitInfo.class);
1:2cfdf52:         when(punit.getPersistenceUnitName()).thenReturn("test-props");
1:2cfdf52:         when(punit.getPersistenceProviderClassName())
1:2cfdf52:             .thenReturn("org.eclipse.persistence.jpa.PersistenceProvider");
1:2cfdf52:         when(punit.getTransactionType()).thenReturn(PersistenceUnitTransactionType.JTA);
1:2cfdf52:         BundleContext context = mock(BundleContext.class);
1:f2e057e:         ServiceRegistration reg = mock(ServiceRegistration.class);
1:f2e057e:         when(context.registerService(Mockito.eq(ManagedService.class.getName()), Mockito.any(), Mockito.any(Dictionary.class)))
1:f2e057e:             .thenReturn(reg);
1:2cfdf52:         Bundle bundle = mock(Bundle.class);
1:2cfdf52:         when(bundle.getBundleContext()).thenReturn(context);
1:2cfdf52:         when(bundle.getVersion()).thenReturn(new Version("4.3.1"));
1:2cfdf52:         PersistenceProvider provider = mock(PersistenceProvider.class);
1:2cfdf52:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:2cfdf52:         props.put("hibernate.hbm2ddl.auto", "create-drop");
1:f2e057e:         ManagedEMF mEMF = new ManagedEMF(context, bundle, provider, punit);
1:f2e057e:         mEMF.updated(null);
1:f2e057e:         mEMF.close();
1:2cfdf52: 
1:2cfdf52:         verify(provider, atLeastOnce()).createContainerEntityManagerFactory(Mockito.eq(punit),
1:2cfdf52:                                                                             Mockito.anyMap());
1:2cfdf52:         verify(context, atLeastOnce()).registerService(Mockito.eq(EntityManagerFactory.class),
1:2cfdf52:                                                        Mockito.any(EntityManagerFactory.class),
1:2cfdf52:                                                        Mockito.any(Dictionary.class));
1:2cfdf52:     }
1:2cfdf52: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:db8f327
/////////////////////////////////////////////////////////////////////////
commit:f2e057e
/////////////////////////////////////////////////////////////////////////
0: import org.mockito.Mock;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ManagedService;
/////////////////////////////////////////////////////////////////////////
1:         ServiceRegistration reg = mock(ServiceRegistration.class);
1:         when(context.registerService(Mockito.eq(ManagedService.class.getName()), Mockito.any(), Mockito.any(Dictionary.class)))
1:             .thenReturn(reg);
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({
1:         "unchecked", "rawtypes"
1:     })
/////////////////////////////////////////////////////////////////////////
1:         ServiceRegistration reg = mock(ServiceRegistration.class);
1:         when(context.registerService(Mockito.eq(ManagedService.class.getName()), Mockito.any(), Mockito.any(Dictionary.class)))
1:             .thenReturn(reg);
1:         ManagedEMF mEMF = new ManagedEMF(context, bundle, provider, punit);
1:         mEMF.updated(null);
1:         mEMF.close();
commit:2cfdf52
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.jpa.container.impl;
1: 
1: import static org.mockito.Mockito.atLeastOnce;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: 
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.spi.PersistenceProvider;
1: import javax.persistence.spi.PersistenceUnitInfo;
1: import javax.persistence.spi.PersistenceUnitTransactionType;
1: 
0: import org.apache.aries.jpa.container.impl.ManagedEMF;
1: import org.junit.Test;
1: import org.mockito.Mockito;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.Version;
1: import org.osgi.service.cm.ConfigurationException;
1: 
1: public class PropsConfigurationTest {
1: 
1:     @SuppressWarnings({
1:         "unchecked", "rawtypes"
1:     })
1:     @Test
1:     public void testEmfWithoutProps() throws InvalidSyntaxException, ConfigurationException {
1:         PersistenceUnitInfo punit = mock(PersistenceUnitInfo.class);
1:         when(punit.getPersistenceUnitName()).thenReturn("test-props");
1:         when(punit.getPersistenceProviderClassName())
1:             .thenReturn("org.eclipse.persistence.jpa.PersistenceProvider");
1:         when(punit.getTransactionType()).thenReturn(PersistenceUnitTransactionType.JTA);
1:         BundleContext context = mock(BundleContext.class);
1:         Bundle bundle = mock(Bundle.class);
1:         when(bundle.getBundleContext()).thenReturn(context);
1:         when(bundle.getVersion()).thenReturn(new Version("4.3.1"));
1:         PersistenceProvider provider = mock(PersistenceProvider.class);
1: 
1:         ManagedEMF emf = new ManagedEMF(context, bundle, provider, punit);
1:         emf.updated(null);
1:         emf.close();
1:         verify(provider, atLeastOnce()).createContainerEntityManagerFactory(Mockito.eq(punit),
1:                                                                             Mockito.eq((Map)null));
1:         verify(context, atLeastOnce()).registerService(Mockito.eq(EntityManagerFactory.class),
1:                                                        Mockito.any(EntityManagerFactory.class),
1:                                                        Mockito.any(Dictionary.class));
1:     }
1: 
0:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testEmfWithProps() throws InvalidSyntaxException, ConfigurationException {
1:         PersistenceUnitInfo punit = mock(PersistenceUnitInfo.class);
1:         when(punit.getPersistenceUnitName()).thenReturn("test-props");
1:         when(punit.getPersistenceProviderClassName())
1:             .thenReturn("org.eclipse.persistence.jpa.PersistenceProvider");
1:         when(punit.getTransactionType()).thenReturn(PersistenceUnitTransactionType.JTA);
1:         BundleContext context = mock(BundleContext.class);
1:         Bundle bundle = mock(Bundle.class);
1:         when(bundle.getBundleContext()).thenReturn(context);
1:         when(bundle.getVersion()).thenReturn(new Version("4.3.1"));
1:         PersistenceProvider provider = mock(PersistenceProvider.class);
1:         Dictionary<String, Object> props = new Hashtable<String, Object>();
1:         props.put("hibernate.hbm2ddl.auto", "create-drop");
1:         ManagedEMF emf = new ManagedEMF(context, bundle, provider, punit);
1:         emf.updated(null);
1:         emf.close();
1: 
1:         verify(provider, atLeastOnce()).createContainerEntityManagerFactory(Mockito.eq(punit),
1:                                                                             Mockito.anyMap());
1:         verify(context, atLeastOnce()).registerService(Mockito.eq(EntityManagerFactory.class),
1:                                                        Mockito.any(EntityManagerFactory.class),
1:                                                        Mockito.any(Dictionary.class));
1:     }
1: }
============================================================================