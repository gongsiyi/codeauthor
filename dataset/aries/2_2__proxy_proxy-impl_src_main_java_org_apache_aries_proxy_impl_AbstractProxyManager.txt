2:24455ce: /*
1:24455ce:  * Licensed to the Apache Software Foundation (ASF) under one
1:24455ce:  * or more contributor license agreements.  See the NOTICE file
1:24455ce:  * distributed with this work for additional information
1:24455ce:  * regarding copyright ownership.  The ASF licenses this file
1:24455ce:  * to you under the Apache License, Version 2.0 (the
1:24455ce:  * "License"); you may not use this file except in compliance
1:24455ce:  * with the License.  You may obtain a copy of the License at
1:24455ce:  *
1:24455ce:  *   http://www.apache.org/licenses/LICENSE-2.0
1:24455ce:  *
1:24455ce:  * Unless required by applicable law or agreed to in writing,
1:24455ce:  * software distributed under the License is distributed on an
1:24455ce:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:24455ce:  * KIND, either express or implied.  See the License for the
1:24455ce:  * specific language governing permissions and limitations
1:24455ce:  * under the License.
2:24455ce:  */
1:24455ce: package org.apache.aries.proxy.impl;
3:24455ce: 
1:96d4e06: import java.lang.reflect.Constructor;
1:24455ce: import java.lang.reflect.InvocationHandler;
1:24455ce: import java.lang.reflect.InvocationTargetException;
1:24455ce: import java.util.Collection;
1:24455ce: import java.util.concurrent.Callable;
1:24455ce: 
1:96d4e06: import org.apache.aries.proxy.InvocationListener;
1:24455ce: import org.apache.aries.proxy.ProxyManager;
1:24455ce: import org.apache.aries.proxy.UnableToProxyException;
1:96d4e06: import org.apache.aries.proxy.weaving.WovenProxy;
1:24455ce: import org.apache.aries.util.AriesFrameworkUtil;
1:24455ce: import org.osgi.framework.Bundle;
1:24455ce: 
1:24455ce: public abstract class AbstractProxyManager implements ProxyManager
1:24455ce: {
1:96d4e06:   public final Object createDelegatingProxy(Bundle clientBundle, Collection<Class<?>> classes,
1:96d4e06:       Callable<Object> dispatcher, Object template) 
1:24455ce:     throws UnableToProxyException
1:24455ce:   {
1:96d4e06:     return createDelegatingInterceptingProxy(clientBundle, classes, dispatcher, template, null);
1:96d4e06:   }
1:96d4e06:   
1:96d4e06:   public Object createInterceptingProxy(Bundle clientBundle,
1:96d4e06:       Collection<Class<?>> classes, Object delegate, InvocationListener listener)
1:96d4e06:       throws UnableToProxyException {
1:96d4e06:     
1:96d4e06:     if (delegate instanceof WovenProxy) {
1:96d4e06:       WovenProxy proxy = ((WovenProxy) delegate).
1:96d4e06:               org_apache_aries_proxy_weaving_WovenProxy_createNewProxyInstance(
1:96d4e06:               new SingleInstanceDispatcher(delegate), listener);
1:96d4e06:       return proxy;
1:96d4e06:     } else {
1:96d4e06:       return createDelegatingInterceptingProxy(clientBundle, classes, 
1:96d4e06:           new SingleInstanceDispatcher(delegate), delegate, listener);
1:96d4e06:     }
1:24455ce:   }
1:24455ce: 
1:96d4e06:   public final Object createDelegatingInterceptingProxy(Bundle clientBundle, Collection<Class<?>> classes,
1:96d4e06:       Callable<Object> dispatcher, Object template, InvocationListener listener)
1:24455ce:       throws UnableToProxyException 
1:24455ce:   {
1:96d4e06:     if(dispatcher == null)
1:ef57cb3:       throw new NullPointerException(NLS.MESSAGES.getMessage("no.dispatcher"));
1:96d4e06:     
1:96d4e06:     if (template instanceof WovenProxy) {
1:96d4e06:       WovenProxy proxy = ((WovenProxy) template).
1:96d4e06:              org_apache_aries_proxy_weaving_WovenProxy_createNewProxyInstance(
1:96d4e06:              dispatcher, listener);
1:96d4e06:       return proxy;
1:96d4e06:     }
1:96d4e06:     
1:96d4e06:     Object proxyObject = duplicateProxy(classes, dispatcher, template, listener);
1:24455ce:     
1:24455ce:     if (proxyObject == null) {
1:96d4e06:       proxyObject = createNewProxy(clientBundle, classes, dispatcher, listener);
1:24455ce:     }
1:24455ce:     
1:24455ce:     return proxyObject;
1:24455ce:   }
1:96d4e06:    
1:24455ce:   public final Callable<Object> unwrap(Object proxy) 
1:24455ce:   {
1:24455ce:     Callable<Object> target = null;
1:24455ce:     
1:96d4e06:     if(proxy instanceof WovenProxy) {
1:96d4e06:       //Woven proxies are a bit different, they can be proxies without
1:96d4e06:       //having a dispatcher, so we fake one up if we need to 
1:96d4e06:       
1:96d4e06:       WovenProxy wp = (WovenProxy) proxy;
1:96d4e06:       if(wp.org_apache_aries_proxy_weaving_WovenProxy_isProxyInstance()) {
1:96d4e06:         target = wp.org_apache_aries_proxy_weaving_WovenProxy_unwrap();
1:96d4e06:         if(target == null) {
1:96d4e06:           target = new SingleInstanceDispatcher(proxy);
1:96d4e06:         }
1:96d4e06:       }
1:96d4e06:     } else {
1:24455ce:       InvocationHandler ih = getInvocationHandler(proxy);
1:24455ce:       
1:24455ce:       if (ih instanceof ProxyHandler) {
1:24455ce:         target = ((ProxyHandler)ih).getTarget();
1:24455ce:       }
1:24455ce:     }
1:24455ce:     return target;
1:24455ce:   }
1:24455ce:   
1:24455ce:   public final boolean isProxy(Object proxy)
1:24455ce:   {
1:96d4e06:     return (proxy != null && 
1:96d4e06:         ((proxy instanceof WovenProxy && ((WovenProxy)proxy).org_apache_aries_proxy_weaving_WovenProxy_isProxyInstance()) || 
1:96d4e06:         getInvocationHandler(proxy) instanceof ProxyHandler));
1:24455ce:   }
1:24455ce:   
1:24455ce:   protected abstract Object createNewProxy(Bundle clientBundle, Collection<Class<?>> classes,
1:96d4e06:       Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException;
1:24455ce:   protected abstract InvocationHandler getInvocationHandler(Object proxy);
1:24455ce:   protected abstract boolean isProxyClass(Class<?> clazz);
1:24455ce: 
1:24455ce:   protected synchronized ClassLoader getClassLoader(final Bundle clientBundle, Collection<Class<?>> classes) 
1:24455ce:   {
1:7ecd3f1:     if (clientBundle != null && clientBundle.getState() == Bundle.UNINSTALLED) {
1:52dc3b5:       throw new IllegalStateException(NLS.MESSAGES.getMessage("bundle.uninstalled", clientBundle.getSymbolicName(), clientBundle.getVersion(), clientBundle.getBundleId()));
1:24455ce:     }
1:24455ce:     
1:24455ce:     ClassLoader cl = null;
1:24455ce:     
1:24455ce:     if (classes.size() == 1) cl = classes.iterator().next().getClassLoader();
1:24455ce: 
1:24455ce:     if (cl == null) {
1:24455ce:       // First of all see if the AriesFrameworkUtil can get the classloader, if it can we go with that.
1:24455ce:       cl = AriesFrameworkUtil.getClassLoaderForced(clientBundle);
1:24455ce:     }
1:24455ce:     
1:24455ce:     return cl;
1:24455ce:   }
1:24455ce: 
1:96d4e06:   private Object duplicateProxy(Collection<Class<?>> classes, Callable<Object> dispatcher, 
1:96d4e06:       Object template, InvocationListener listener)
1:24455ce:   {
1:24455ce:     Object proxyObject = null;
1:96d4e06:     Class<?> classToProxy = null;
1:24455ce:     
1:96d4e06:     if (template != null) {
1:96d4e06:       if(isProxyClass(template.getClass()))
1:96d4e06:         classToProxy = template.getClass();
1:96d4e06:     } else if (classes.size() == 1) {
1:24455ce: 
1:96d4e06:       classToProxy = classes.iterator().next();
1:24455ce: 
1:96d4e06:       if(!!!isProxyClass(classToProxy))
1:96d4e06:         classToProxy = null;
1:96d4e06:     }
1:24455ce: 
1:96d4e06:     if (classToProxy != null) {
1:96d4e06:       try {
1:96d4e06:         /*
1:96d4e06:          * the class is already a proxy, we should just invoke
1:96d4e06:          * the constructor to get a new instance of the proxy
1:96d4e06:          * with a new Collaborator using the specified delegate
1:96d4e06:          */
1:96d4e06:         if(WovenProxy.class.isAssignableFrom(classToProxy)) {
1:96d4e06:           Constructor<?> c = classToProxy.getDeclaredConstructor(Callable.class, 
1:96d4e06:               InvocationListener.class);
1:96d4e06:           c.setAccessible(true);
1:96d4e06:           proxyObject = c.newInstance(dispatcher, listener);
1:96d4e06:         } else {
1:96d4e06:           proxyObject = classToProxy.getConstructor(InvocationHandler.class).
1:96d4e06:           newInstance(new ProxyHandler(this, dispatcher, listener));
1:24455ce:         }
1:96d4e06:       } catch (InvocationTargetException e) {
1:96d4e06:       } catch (NoSuchMethodException e) {
1:96d4e06:       } catch (InstantiationException e) {
1:96d4e06:       } catch (IllegalArgumentException e) {
1:96d4e06:       } catch (SecurityException e) {
1:96d4e06:       } catch (IllegalAccessException e) {
1:24455ce:       }
1:24455ce:     }
1:24455ce:     
1:24455ce:     return proxyObject;
1:24455ce:   }
1:24455ce: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:7ecd3f1
/////////////////////////////////////////////////////////////////////////
1:     if (clientBundle != null && clientBundle.getState() == Bundle.UNINSTALLED) {
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
1: import org.apache.aries.proxy.InvocationListener;
1: import org.apache.aries.proxy.weaving.WovenProxy;
1:   public final Object createDelegatingProxy(Bundle clientBundle, Collection<Class<?>> classes,
1:       Callable<Object> dispatcher, Object template) 
1:     return createDelegatingInterceptingProxy(clientBundle, classes, dispatcher, template, null);
1:   }
1:   
1:   public Object createInterceptingProxy(Bundle clientBundle,
1:       Collection<Class<?>> classes, Object delegate, InvocationListener listener)
1:       throws UnableToProxyException {
1:     
1:     if (delegate instanceof WovenProxy) {
1:       WovenProxy proxy = ((WovenProxy) delegate).
1:               org_apache_aries_proxy_weaving_WovenProxy_createNewProxyInstance(
1:               new SingleInstanceDispatcher(delegate), listener);
1:       return proxy;
1:     } else {
1:       return createDelegatingInterceptingProxy(clientBundle, classes, 
1:           new SingleInstanceDispatcher(delegate), delegate, listener);
1:     }
1:   public final Object createDelegatingInterceptingProxy(Bundle clientBundle, Collection<Class<?>> classes,
1:       Callable<Object> dispatcher, Object template, InvocationListener listener)
1:     if(dispatcher == null)
0:       throw new NullPointerException("A dispatcher must be specified for a delegating proxy handler");
1:     
1:     if (template instanceof WovenProxy) {
1:       WovenProxy proxy = ((WovenProxy) template).
1:              org_apache_aries_proxy_weaving_WovenProxy_createNewProxyInstance(
1:              dispatcher, listener);
1:       return proxy;
1:     }
1:     
1:     Object proxyObject = duplicateProxy(classes, dispatcher, template, listener);
1:       proxyObject = createNewProxy(clientBundle, classes, dispatcher, listener);
1:    
1:     if(proxy instanceof WovenProxy) {
1:       //Woven proxies are a bit different, they can be proxies without
1:       //having a dispatcher, so we fake one up if we need to 
1:       
1:       WovenProxy wp = (WovenProxy) proxy;
1:       if(wp.org_apache_aries_proxy_weaving_WovenProxy_isProxyInstance()) {
1:         target = wp.org_apache_aries_proxy_weaving_WovenProxy_unwrap();
1:         if(target == null) {
1:           target = new SingleInstanceDispatcher(proxy);
1:         }
1:       }
1:     } else {
1:     return (proxy != null && 
1:         ((proxy instanceof WovenProxy && ((WovenProxy)proxy).org_apache_aries_proxy_weaving_WovenProxy_isProxyInstance()) || 
1:         getInvocationHandler(proxy) instanceof ProxyHandler));
1:       Callable<Object> dispatcher, InvocationListener listener) throws UnableToProxyException;
/////////////////////////////////////////////////////////////////////////
1:   private Object duplicateProxy(Collection<Class<?>> classes, Callable<Object> dispatcher, 
1:       Object template, InvocationListener listener)
1:     Class<?> classToProxy = null;
1:     if (template != null) {
1:       if(isProxyClass(template.getClass()))
1:         classToProxy = template.getClass();
1:     } else if (classes.size() == 1) {
1:       classToProxy = classes.iterator().next();
1:       if(!!!isProxyClass(classToProxy))
1:         classToProxy = null;
1:     }
1:     if (classToProxy != null) {
1:       try {
1:         /*
1:          * the class is already a proxy, we should just invoke
1:          * the constructor to get a new instance of the proxy
1:          * with a new Collaborator using the specified delegate
1:          */
1:         if(WovenProxy.class.isAssignableFrom(classToProxy)) {
1:           Constructor<?> c = classToProxy.getDeclaredConstructor(Callable.class, 
1:               InvocationListener.class);
1:           c.setAccessible(true);
1:           proxyObject = c.newInstance(dispatcher, listener);
1:         } else {
1:           proxyObject = classToProxy.getConstructor(InvocationHandler.class).
1:           newInstance(new ProxyHandler(this, dispatcher, listener));
1:       } catch (InvocationTargetException e) {
1:       } catch (NoSuchMethodException e) {
1:       } catch (InstantiationException e) {
1:       } catch (IllegalArgumentException e) {
1:       } catch (SecurityException e) {
1:       } catch (IllegalAccessException e) {
commit:e072ffb
/////////////////////////////////////////////////////////////////////////
0:     return (proxy != null && getInvocationHandler(proxy) instanceof ProxyHandler);
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:ef57cb3
/////////////////////////////////////////////////////////////////////////
1:       throw new NullPointerException(NLS.MESSAGES.getMessage("no.dispatcher"));
commit:52dc3b5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.aries.util.nls.MessageUtil;
/////////////////////////////////////////////////////////////////////////
1:       throw new IllegalStateException(NLS.MESSAGES.getMessage("bundle.uninstalled", clientBundle.getSymbolicName(), clientBundle.getVersion(), clientBundle.getBundleId()));
commit:24455ce
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.impl;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.InvocationTargetException;
1: import java.util.Collection;
1: import java.util.concurrent.Callable;
1: 
0: import org.apache.aries.proxy.InvocationHandlerWrapper;
1: import org.apache.aries.proxy.ProxyManager;
1: import org.apache.aries.proxy.UnableToProxyException;
1: import org.apache.aries.util.AriesFrameworkUtil;
1: import org.osgi.framework.Bundle;
1: 
1: public abstract class AbstractProxyManager implements ProxyManager
1: {
0:   public final Object createProxy(Bundle clientBundle, Collection<Class<?>> classes,
0:       Callable<Object> dispatcher) 
1:     throws UnableToProxyException
1:   {
0:     return createProxy(clientBundle, classes, dispatcher, null);
1:   }
1: 
0:   public final Object createProxy(Bundle clientBundle, Collection<Class<?>> classes,
0:       Callable<Object> dispatcher, InvocationHandlerWrapper wrapper)
1:       throws UnableToProxyException 
1:   {
0:     InvocationHandler ih = new ProxyHandler(this, dispatcher, wrapper);
0:     Object proxyObject = duplicateProxy(classes, ih);
1:     
1:     if (proxyObject == null) {
0:       proxyObject = createNewProxy(clientBundle, classes, ih);
1:     }
1:     
1:     return proxyObject;
1:   }
1:   
1:   public final Callable<Object> unwrap(Object proxy) 
1:   {
1:     Callable<Object> target = null;
1:     
0:     if (isProxy(proxy)) {
1:       InvocationHandler ih = getInvocationHandler(proxy);
1:       
1:       if (ih instanceof ProxyHandler) {
1:         target = ((ProxyHandler)ih).getTarget();
1:       }
1:     }
1:     
1:     return target;
1:   }
1:   
1:   public final boolean isProxy(Object proxy)
1:   {
0:     return (getInvocationHandler(proxy) instanceof ProxyHandler);
1:   }
1:   
1:   protected abstract Object createNewProxy(Bundle clientBundle, Collection<Class<?>> classes,
0:       InvocationHandler ih) throws UnableToProxyException;
1:   protected abstract InvocationHandler getInvocationHandler(Object proxy);
1:   protected abstract boolean isProxyClass(Class<?> clazz);
1: 
1:   protected synchronized ClassLoader getClassLoader(final Bundle clientBundle, Collection<Class<?>> classes) 
1:   {
0:     if (clientBundle.getState() == Bundle.UNINSTALLED) {
0:       throw new IllegalStateException("The bundle " + clientBundle.getBundleId() + " has been uninstalled");
1:     }
1:     
1:     ClassLoader cl = null;
1:     
1:     if (classes.size() == 1) cl = classes.iterator().next().getClassLoader();
1: 
1:     if (cl == null) {
1:       // First of all see if the AriesFrameworkUtil can get the classloader, if it can we go with that.
1:       cl = AriesFrameworkUtil.getClassLoaderForced(clientBundle);
1:     }
1:     
1:     return cl;
1:   }
1: 
0:   private Object duplicateProxy(Collection<Class<?>> classes, InvocationHandler handler)
1:   {
1:     Object proxyObject = null;
1:     
0:     if (classes.size() == 1) {
1: 
0:       Class<?> classToProxy = classes.iterator().next();
1: 
0:       boolean isProxy = isProxyClass(classToProxy);
1: 
0:       if (isProxy) {
0:         try {
1:           /*
0:            * the class is already a proxy, we should just invoke
0:            * the constructor to get a new instance of the proxy
0:            * with a new Collaborator using the specified delegate
1:            */
0:           proxyObject = classToProxy.getConstructor(InvocationHandler.class).newInstance(handler);
0:         } catch (InvocationTargetException e) {
0:         } catch (NoSuchMethodException e) {
0:         } catch (InstantiationException e) {
0:         } catch (IllegalArgumentException e) {
0:         } catch (SecurityException e) {
0:         } catch (IllegalAccessException e) {
1:         }
1:       }
1:     }
1:     
1:     return proxyObject;
1:   }
1: }
============================================================================