1:98ca24c: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:98ca24c:  *  contributor license agreements.  See the NOTICE file distributed with
1:98ca24c:  *  this work for additional information regarding copyright ownership.
1:98ca24c:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:98ca24c:  *  (the "License"); you may not use this file except in compliance with
1:98ca24c:  *  the License.  You may obtain a copy of the License at
1:98ca24c:  *
1:98ca24c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:98ca24c:  *
1:98ca24c:  *  Unless required by applicable law or agreed to in writing, software
1:98ca24c:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:98ca24c:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98ca24c:  *  See the License for the specific language governing permissions and
1:98ca24c:  *  limitations under the License.
1:98ca24c:  */
1:6d497a2: package org.apache.aries.jpa.container.itest;
3:6d497a2: 
1:143341f: import static javax.persistence.spi.PersistenceUnitTransactionType.JTA;
1:143341f: import static javax.persistence.spi.PersistenceUnitTransactionType.RESOURCE_LOCAL;
1:6d497a2: import static org.junit.Assert.assertEquals;
1:38cf4cd: import static org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS;
1:6d497a2: 
1:6d497a2: import java.util.HashMap;
1:6d497a2: import java.util.List;
1:6d497a2: import java.util.Map;
1:38cf4cd: import java.util.Properties;
1:6d497a2: 
1:96e072c: import javax.inject.Inject;
1:6d497a2: import javax.persistence.EntityManager;
1:6d497a2: import javax.persistence.EntityManagerFactory;
1:6d497a2: import javax.persistence.Query;
1:6d497a2: import javax.persistence.TypedQuery;
1:143341f: import javax.sql.DataSource;
1:6d497a2: 
1:6d497a2: import org.apache.aries.jpa.container.itest.entities.Car;
1:98ca24c: import org.apache.aries.jpa.itest.AbstractCarJPAITest;
1:6d497a2: import org.apache.aries.jpa.supplier.EmSupplier;
1:6d497a2: import org.junit.Test;
1:96e072c: import org.osgi.service.coordinator.Coordination;
1:96e072c: import org.osgi.service.coordinator.Coordinator;
1:38cf4cd: import org.osgi.service.jdbc.DataSourceFactory;
1:6d497a2: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1:6d497a2: 
1:98ca24c: public abstract class JPAContainerTest extends AbstractCarJPAITest {
1:96e072c:     @Inject
1:96e072c:     Coordinator coordinator;
1:6d497a2: 
1:6d497a2:     @Test
1:6d497a2:     public void testCarEMFBuilder() throws Exception {
1:6d497a2:         EntityManagerFactoryBuilder emfBuilder = getService(EntityManagerFactoryBuilder.class,
1:6d497a2:                                                             "(osgi.unit.name=" + DSF_TEST_UNIT + ")");
1:6d497a2:         Map<String, Object> props = new HashMap<String, Object>();
1:6d497a2:         EntityManagerFactory emf = emfBuilder.createEntityManagerFactory(props);
1:6d497a2:         carLifecycleRL(emf.createEntityManager());
1:6d497a2:     }
1:6d497a2: 
1:6d497a2:     @Test
1:6d497a2:     public void testCarEMF() throws Exception {
1:6d497a2:         carLifecycleRL(getEMF(TEST_UNIT).createEntityManager());
1:6d497a2:     }
1:6d497a2:     
1:6d497a2:     @Test
1:6d497a2:     public void testEMFXA() throws Exception {
1:6d497a2:         EntityManager em = getEMF(XA_TEST_UNIT).createEntityManager();
2:6d497a2:         carLifecycleXA(ut, em);
1:6d497a2:         em.close();
1:6d497a2:     }
1:6d497a2: 
1:6d497a2:     @Test
1:6d497a2:     public void testDataSourceFactoryLifecycle() throws Exception {
1:6d497a2:         carLifecycleRL(getEMF(DSF_TEST_UNIT).createEntityManager());
1:6d497a2:     }
1:6d497a2: 
1:6d497a2:     @Test
1:6d497a2:     public void testDataSourceFactoryXALifecycle() throws Exception {
1:6d497a2:         EntityManager em = getEMF(DSF_XA_TEST_UNIT).createEntityManager();
1:6d497a2:         carLifecycleXA(ut, em);
1:6d497a2:         em.close();
1:6d497a2:     }
1:6d497a2:     
1:6d497a2: 
1:6d497a2:     @Test
1:6d497a2:     public void testEmSupplier() throws Exception {
1:0d59ccb:         EmSupplier emSupplier = getService(EmSupplier.class, "(osgi.unit.name=" + XA_TEST_UNIT + ")");
1:96e072c:         Coordination coordination = coordinator.begin("test", 0);
1:0d59ccb:         try {
1:0d59ccb:             EntityManager em = emSupplier.get();
1:0d59ccb:             carLifecycleXA(ut, em);
1:6d497a2: 
1:0d59ccb:             Query countQuery = em.createQuery("SELECT Count(c) from Car c");
1:0d59ccb:             assertEquals(0l, countQuery.getSingleResult());
1:6d497a2: 
1:0d59ccb:             ut.begin();
1:0d59ccb:             em.joinTransaction();
1:0d59ccb:             em.persist(createBlueCar());
1:0d59ccb:             em.persist(createGreenCar());
1:0d59ccb:             ut.commit();
1:6d497a2: 
1:0d59ccb:             assertEquals(2l, countQuery.getSingleResult());
1:6d497a2: 
1:0d59ccb:             TypedQuery<Car> carQuery = em.createQuery("Select c from Car c ORDER by c.engineSize", Car.class);
1:0d59ccb:             List<Car> list = carQuery.getResultList();
1:0d59ccb:             assertEquals(2, list.size());
1:6d497a2: 
1:0d59ccb:             assertBlueCar(list.get(0));
1:0d59ccb:             assertGreenCar(list.get(1));
1:6d497a2: 
1:0d59ccb:             ut.begin();
1:0d59ccb:             em.joinTransaction();
1:0d59ccb:             changeToRed(em.find(Car.class, BLUE_CAR_PLATE));
1:0d59ccb:             em.remove(em.find(Car.class, GREEN_CAR_PLATE));
1:0d59ccb:             em.persist(createBlackCar());
1:0d59ccb:             ut.commit();
1:6d497a2: 
1:0d59ccb:             assertEquals(2l, countQuery.getSingleResult());
1:0d59ccb:             list = carQuery.getResultList();
1:0d59ccb:             assertEquals(2, list.size());
1:6d497a2: 
1:0d59ccb:             assertBlackCar(list.get(0));
1:0d59ccb:             assertChangedBlueCar(list.get(1));
1:6d497a2: 
1:0d59ccb:             cleanup(em);
1:0d59ccb:         } finally {
1:96e072c:             coordination.end();
1:0d59ccb:         }
1:6d497a2:     }
1:6d497a2: 
1:98ca24c:     private void changeToRed(Car car) {
2:6d497a2:         car.setNumberOfSeats(2);
1:98ca24c:         car.setEngineSize(2000);
1:98ca24c:         car.setColour("red");
1:6d497a2:     }
1:98ca24c: 
1:98ca24c:     private void cleanup(EntityManager em) throws Exception {
1:98ca24c:         ut.begin();
1:98ca24c:         em.joinTransaction();
1:98ca24c:         delete(em, BLACK_CAR_PLATE);
1:98ca24c:         delete(em, BLUE_CAR_PLATE);
1:98ca24c:         ut.commit();
1:98ca24c:     }
1:98ca24c: 
1:98ca24c:     private void assertChangedBlueCar(Car car) {
1:98ca24c:         assertEquals(2, car.getNumberOfSeats());
1:98ca24c:         assertEquals(2000, car.getEngineSize());
1:98ca24c:         assertEquals("red", car.getColour());
1:98ca24c:         assertEquals(BLUE_CAR_PLATE, car.getNumberPlate());
1:98ca24c:     }
1:98ca24c: 
1:38cf4cd:     @Test
1:38cf4cd:     public void testCarEMFBuilderExternalDS() throws Exception {
1:38cf4cd:     	DataSourceFactory dsf = getService(DataSourceFactory.class, 
1:38cf4cd:     			"(" + OSGI_JDBC_DRIVER_CLASS + "=org.apache.derby.jdbc.EmbeddedDriver)");
1:38cf4cd:        
1:38cf4cd:     	EntityManagerFactoryBuilder emfBuilder = getService(EntityManagerFactoryBuilder.class,
1:38cf4cd:     			"(osgi.unit.name=" + EXTERNAL_TEST_UNIT + ")");
1:38cf4cd:     	
1:38cf4cd:     	Properties jdbcProps = new Properties();
1:38cf4cd:     	jdbcProps.setProperty("url", "jdbc:derby:memory:DSFTEST;create=true");
1:38cf4cd:     	
1:38cf4cd:     	Map<String, Object> props = new HashMap<String, Object>();
1:38cf4cd:     	props.put("javax.persistence.nonJtaDataSource", dsf.createDataSource(jdbcProps));
1:143341f:     	props.put("javax.persistence.transactionType", RESOURCE_LOCAL.name());
1:143341f:     	
1:38cf4cd:     	EntityManagerFactory emf = emfBuilder.createEntityManagerFactory(props);
1:38cf4cd:     	carLifecycleRL(emf.createEntityManager());
1:38cf4cd:     }
1:38cf4cd: 
1:143341f:     @Test
1:143341f:     public void testCarEMFBuilderExternalDSXA() throws Exception {
1:143341f:     	DataSource ds = getService(DataSource.class, 
1:143341f:     			"(" + OSGI_JDBC_DRIVER_CLASS + "=org.apache.derby.jdbc.EmbeddedDriver-pool-xa)");
1:143341f:     	
1:143341f:     	EntityManagerFactoryBuilder emfBuilder = getService(EntityManagerFactoryBuilder.class,
1:143341f:     			"(osgi.unit.name=" + EXTERNAL_TEST_UNIT + ")");
1:143341f:     	
1:143341f:     	
1:143341f:     	Map<String, Object> props = new HashMap<String, Object>();
1:143341f:     	props.put("javax.persistence.jtaDataSource", ds);
1:143341f:     	props.put("javax.persistence.transactionType", JTA.name());
1:143341f:     	
1:143341f:     	//EclipseLink also needs a non-jta-datasource
1:143341f:     	DataSourceFactory dsf = getService(DataSourceFactory.class, 
1:143341f:     			"(" + OSGI_JDBC_DRIVER_CLASS + "=org.apache.derby.jdbc.EmbeddedDriver)");
1:143341f:     	Properties jdbcProps = new Properties();
1:143341f:     	jdbcProps.setProperty("url", "jdbc:derby:memory:TEST1;create=true");
1:143341f:     	props.put("javax.persistence.nonJtaDataSource", dsf.createDataSource(jdbcProps));
1:143341f: 
1:143341f:     	
1:143341f:     	EntityManagerFactory emf = emfBuilder.createEntityManagerFactory(props);
1:143341f:     	carLifecycleXA(ut, emf.createEntityManager());
1:143341f:     }
1:6d497a2: }
============================================================================
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:143341f
/////////////////////////////////////////////////////////////////////////
1: import static javax.persistence.spi.PersistenceUnitTransactionType.JTA;
1: import static javax.persistence.spi.PersistenceUnitTransactionType.RESOURCE_LOCAL;
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
1:     	props.put("javax.persistence.transactionType", RESOURCE_LOCAL.name());
1: 
1:     @Test
1:     public void testCarEMFBuilderExternalDSXA() throws Exception {
1:     	DataSource ds = getService(DataSource.class, 
1:     			"(" + OSGI_JDBC_DRIVER_CLASS + "=org.apache.derby.jdbc.EmbeddedDriver-pool-xa)");
1:     	
1:     	EntityManagerFactoryBuilder emfBuilder = getService(EntityManagerFactoryBuilder.class,
1:     			"(osgi.unit.name=" + EXTERNAL_TEST_UNIT + ")");
1:     	
1:     	
1:     	Map<String, Object> props = new HashMap<String, Object>();
1:     	props.put("javax.persistence.jtaDataSource", ds);
1:     	props.put("javax.persistence.transactionType", JTA.name());
1:     	
1:     	//EclipseLink also needs a non-jta-datasource
1:     	DataSourceFactory dsf = getService(DataSourceFactory.class, 
1:     			"(" + OSGI_JDBC_DRIVER_CLASS + "=org.apache.derby.jdbc.EmbeddedDriver)");
1:     	Properties jdbcProps = new Properties();
1:     	jdbcProps.setProperty("url", "jdbc:derby:memory:TEST1;create=true");
1:     	props.put("javax.persistence.nonJtaDataSource", dsf.createDataSource(jdbcProps));
1: 
1:     	
1:     	EntityManagerFactory emf = emfBuilder.createEntityManagerFactory(props);
1:     	carLifecycleXA(ut, emf.createEntityManager());
1:     }
commit:38cf4cd
/////////////////////////////////////////////////////////////////////////
1: import static org.osgi.service.jdbc.DataSourceFactory.OSGI_JDBC_DRIVER_CLASS;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.jdbc.DataSourceFactory;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testCarEMFBuilderExternalDS() throws Exception {
1:     	DataSourceFactory dsf = getService(DataSourceFactory.class, 
1:     			"(" + OSGI_JDBC_DRIVER_CLASS + "=org.apache.derby.jdbc.EmbeddedDriver)");
1:        
1:     	EntityManagerFactoryBuilder emfBuilder = getService(EntityManagerFactoryBuilder.class,
1:     			"(osgi.unit.name=" + EXTERNAL_TEST_UNIT + ")");
1:     	
1:     	Properties jdbcProps = new Properties();
1:     	jdbcProps.setProperty("url", "jdbc:derby:memory:DSFTEST;create=true");
1:     	
1:     	Map<String, Object> props = new HashMap<String, Object>();
1:     	props.put("javax.persistence.nonJtaDataSource", dsf.createDataSource(jdbcProps));
1:     	
1:     	EntityManagerFactory emf = emfBuilder.createEntityManagerFactory(props);
1:     	carLifecycleRL(emf.createEntityManager());
1:     }
author:Christian Schneider
-------------------------------------------------------------------------------
commit:96e072c
/////////////////////////////////////////////////////////////////////////
1: import javax.inject.Inject;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.service.coordinator.Coordination;
1: import org.osgi.service.coordinator.Coordinator;
1:     @Inject
1:     Coordinator coordinator;
/////////////////////////////////////////////////////////////////////////
1:         Coordination coordination = coordinator.begin("test", 0);
/////////////////////////////////////////////////////////////////////////
1:             coordination.end();
commit:9aefd96
/////////////////////////////////////////////////////////////////////////
commit:9197aff
/////////////////////////////////////////////////////////////////////////
0:         // This test seems to fail sometimes on the build server. Checking if it is a timing issue at startup
0:         Thread.sleep(2000);
commit:0d59ccb
/////////////////////////////////////////////////////////////////////////
1:         EmSupplier emSupplier = getService(EmSupplier.class, "(osgi.unit.name=" + XA_TEST_UNIT + ")");
1:         try {
0:             emSupplier.preCall();
1:             EntityManager em = emSupplier.get();
1:             carLifecycleXA(ut, em);
1:             Query countQuery = em.createQuery("SELECT Count(c) from Car c");
1:             assertEquals(0l, countQuery.getSingleResult());
1:             ut.begin();
1:             em.joinTransaction();
1:             em.persist(createBlueCar());
1:             em.persist(createGreenCar());
1:             ut.commit();
1:             assertEquals(2l, countQuery.getSingleResult());
1:             TypedQuery<Car> carQuery = em.createQuery("Select c from Car c ORDER by c.engineSize", Car.class);
1:             List<Car> list = carQuery.getResultList();
1:             assertEquals(2, list.size());
1:             assertBlueCar(list.get(0));
1:             assertGreenCar(list.get(1));
1:             ut.begin();
1:             em.joinTransaction();
1:             changeToRed(em.find(Car.class, BLUE_CAR_PLATE));
1:             em.remove(em.find(Car.class, GREEN_CAR_PLATE));
1:             em.persist(createBlackCar());
1:             ut.commit();
1:             assertEquals(2l, countQuery.getSingleResult());
1:             list = carQuery.getResultList();
1:             assertEquals(2, list.size());
1:             assertBlackCar(list.get(0));
1:             assertChangedBlueCar(list.get(1));
1:             cleanup(em);
1:         } finally {
0:             emSupplier.postCall();
1:         }
commit:98ca24c
/////////////////////////////////////////////////////////////////////////
1: /*  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.jpa.itest.AbstractCarJPAITest;
1: public abstract class JPAContainerTest extends AbstractCarJPAITest {
/////////////////////////////////////////////////////////////////////////
0:         changeToRed(em.find(Car.class, BLUE_CAR_PLATE));
0:         assertBlackCar(list.get(0));
0:         assertChangedBlueCar(list.get(1));
0:         cleanup(em);
1:     private void changeToRed(Car car) {
1:         car.setEngineSize(2000);
1:         car.setColour("red");
1: 
1:     private void cleanup(EntityManager em) throws Exception {
1:         ut.begin();
1:         em.joinTransaction();
1:         delete(em, BLACK_CAR_PLATE);
1:         delete(em, BLUE_CAR_PLATE);
1:         ut.commit();
1:     }
1: 
1:     private void assertChangedBlueCar(Car car) {
1:         assertEquals(2, car.getNumberOfSeats());
1:         assertEquals(2000, car.getEngineSize());
1:         assertEquals("red", car.getColour());
1:         assertEquals(BLUE_CAR_PLATE, car.getNumberPlate());
1:     }
1: 
commit:6d497a2
/////////////////////////////////////////////////////////////////////////
1: package org.apache.aries.jpa.container.itest;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import javax.persistence.EntityManager;
1: import javax.persistence.EntityManagerFactory;
1: import javax.persistence.Query;
1: import javax.persistence.TypedQuery;
1: 
1: import org.apache.aries.jpa.container.itest.entities.Car;
0: import org.apache.aries.jpa.itest.AbstractJPAItest;
1: import org.apache.aries.jpa.supplier.EmSupplier;
1: import org.junit.Test;
1: import org.osgi.service.jpa.EntityManagerFactoryBuilder;
1: 
0: public abstract class JPAContainerTest extends AbstractJPAItest {
1: 
1:     @Test
1:     public void testCarEMFBuilder() throws Exception {
1:         EntityManagerFactoryBuilder emfBuilder = getService(EntityManagerFactoryBuilder.class,
1:                                                             "(osgi.unit.name=" + DSF_TEST_UNIT + ")");
1:         Map<String, Object> props = new HashMap<String, Object>();
1:         EntityManagerFactory emf = emfBuilder.createEntityManagerFactory(props);
1:         carLifecycleRL(emf.createEntityManager());
1:     }
1: 
1:     @Test
1:     public void testCarEMF() throws Exception {
1:         carLifecycleRL(getEMF(TEST_UNIT).createEntityManager());
1:     }
1:     
1:     @Test
1:     public void testEMFXA() throws Exception {
1:         EntityManager em = getEMF(XA_TEST_UNIT).createEntityManager();
1:         carLifecycleXA(ut, em);
1:         em.close();
1:     }
1: 
1:     @Test
1:     public void testDataSourceFactoryLifecycle() throws Exception {
1:         carLifecycleRL(getEMF(DSF_TEST_UNIT).createEntityManager());
1:     }
1: 
1:     @Test
1:     public void testDataSourceFactoryXALifecycle() throws Exception {
1:         EntityManager em = getEMF(DSF_XA_TEST_UNIT).createEntityManager();
1:         carLifecycleXA(ut, em);
1:         em.close();
1:     }
1:     
1: 
1:     @Test
1:     public void testEmSupplier() throws Exception {
0:         EmSupplier emSupplier = getService(EmSupplier.class, "(osgi.unit.name=xa-test-unit)");
0:         emSupplier.preCall();
0:         EntityManager em = emSupplier.get();
1:         carLifecycleXA(ut, em);
1: 
0:         Query countQuery = em.createQuery("SELECT Count(c) from Car c");
0:         assertEquals(0l, countQuery.getSingleResult());
1: 
0:         ut.begin();
0:         em.joinTransaction();
0:         em.persist(createBlueCar());
0:         em.persist(createGreenCar());
0:         ut.commit();
1: 
0:         assertEquals(2l, countQuery.getSingleResult());
1: 
0:         TypedQuery<Car> carQuery = em.createQuery("Select c from Car c ORDER by c.engineSize", Car.class);
0:         List<Car> list = carQuery.getResultList();
0:         assertEquals(2, list.size());
1: 
0:         assertBlueCar(list.get(0));
0:         assertGreenCar(list.get(1));
1: 
0:         ut.begin();
0:         em.joinTransaction();
0:         Car car = em.find(Car.class, BLUE_CAR_PLATE);
1:         car.setNumberOfSeats(2);
0:         car.setEngineSize(2000);
0:         car.setColour("red");
0:         em.remove(em.find(Car.class, GREEN_CAR_PLATE));
0:         em.persist(createBlackCar());
0:         ut.commit();
1: 
0:         assertEquals(2l, countQuery.getSingleResult());
1: 
0:         list = carQuery.getResultList();
0:         assertEquals(2, list.size());
1: 
0:         assertEquals(2, list.get(0).getNumberOfSeats());
0:         assertEquals(800, list.get(0).getEngineSize());
0:         assertEquals("black", list.get(0).getColour());
0:         assertEquals("C3CCC", list.get(0).getNumberPlate());
1: 
0:         assertEquals(2, list.get(1).getNumberOfSeats());
0:         assertEquals(2000, list.get(1).getEngineSize());
0:         assertEquals("red", list.get(1).getColour());
0:         assertEquals("A1AAA", list.get(1).getNumberPlate());
1:         
0:         ut.begin();
0:         em.joinTransaction();
0:         delete(em, "C3CCC");
0:         delete(em, "A1AAA");
0:         ut.commit();
0:         emSupplier.postCall();
1:     }
1: 
0:     private Car createBlackCar() {
0:         Car car;
0:         car = new Car();
1:         car.setNumberOfSeats(2);
0:         car.setEngineSize(800);
0:         car.setColour("black");
0:         car.setNumberPlate("C3CCC");
0:         return car;
1:     }
1: }
============================================================================