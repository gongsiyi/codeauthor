1:ed92957: /**
1:ed92957:  * Licensed to the Apache Software Foundation (ASF) under one
1:ed92957:  * or more contributor license agreements.  See the NOTICE file
1:ed92957:  * distributed with this work for additional information
1:ed92957:  * regarding copyright ownership.  The ASF licenses this file
1:ed92957:  * to you under the Apache License, Version 2.0 (the
1:ed92957:  * "License"); you may not use this file except in compliance
1:ed92957:  * with the License.  You may obtain a copy of the License at
1:ed92957:  *
1:ed92957:  *   http://www.apache.org/licenses/LICENSE-2.0
1:ed92957:  *
1:ed92957:  * Unless required by applicable law or agreed to in writing,
1:ed92957:  * software distributed under the License is distributed on an
1:ed92957:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:ed92957:  * KIND, either express or implied.  See the License for the
1:ed92957:  * specific language governing permissions and limitations
1:ed92957:  * under the License.
1:ed92957:  */
1:ed92957: package org.apache.aries.samples.goat.web;
1:ed92957: 
1:ed92957: import java.util.ArrayList;
1:ed92957: import java.util.Collection;
1:ed92957: import java.util.HashMap;
1:ed92957: import java.util.Map;
1:ed92957: 
1:ed92957: import javax.servlet.ServletContext;
1:ed92957: 
1:ed92957: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
1:ed92957: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
1:ed92957: 
1:ed92957: import org.apache.aries.samples.goat.api.ComponentInfo;
1:ed92957: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1:ed92957: import org.apache.aries.samples.goat.api.ModelInfoService;
1:ed92957: import org.apache.aries.samples.goat.api.RelationshipInfo;
1:ed92957: import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
1:ed92957: 
1:ed92957: import org.directwebremoting.Browser;
1:ed92957: import org.directwebremoting.ScriptBuffer;
1:ed92957: import org.directwebremoting.ScriptSession;
1:ed92957: import org.directwebremoting.ServerContextFactory;
1:ed92957: import org.osgi.framework.Bundle;
1:ed92957: import org.osgi.framework.BundleContext;
1:ed92957: import org.osgi.framework.InvalidSyntaxException;
1:ed92957: import org.osgi.framework.ServiceReference;
1:7095362: import org.osgi.util.tracker.ServiceTracker;
1:ed92957: 
1:ed92957: public class ServerSideClass {
1:ed92957: 
1:ed92957: 	private String modelInfoServiceHint = "";
1:ed92957: 
1:ed92957: 	private ModelInfoService ModelInfoService = null;
1:7095362: 	
1:7095362: 	private ModelInfoService blah;
1:ed92957: 
1:ed92957: 	private Map<ModelInfoService, ComponentInfoProvider.ComponentInfoListener> clisteners = new HashMap<ModelInfoService, ComponentInfoProvider.ComponentInfoListener>();
1:ed92957: 	private Map<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener> rlisteners = new HashMap<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener>();
1:ed92957: 
1:7095362: 	public ServerSideClass(ModelInfoService blah) {
1:7095362: 		this.blah = blah;
1:7095362: 	}
1:ed92957: 	private class ComponentInfoListenerImpl implements
1:ed92957: 			ComponentInfoProvider.ComponentInfoListener {
1:ed92957: 		String server;
1:ed92957: 
1:ed92957: 		public ComponentInfoListenerImpl(String server) {
1:ed92957: 			this.server = server;
1:ed92957: 		}
1:ed92957: 
1:ed92957: 		public void updateComponent(ComponentInfo b) {
1:ed92957: 			if (this.server.equals(modelInfoServiceHint)) {
1:ed92957: 				// todo: only issue the add for the new bundle, and affected
1:ed92957: 				// other bundles.
1:ed92957: 				//getInitialComponents(modelInfoServiceHint);
1:ed92957: 				//System.out.println("State is: " + b.getComponentProperties().get("State"));
1:ed92957: 				addFunctionCall("addComponent", b);
1:ed92957: 			}
1:ed92957: 		}
1:ed92957: 
1:ed92957: 		public void removeComponent(ComponentInfo b) {
1:ed92957: 			// todo
1:ed92957: 		}
1:ed92957: 	}
1:ed92957: 	private class RelationshipInfoListenerImpl implements
1:ed92957: 			RelationshipInfoProvider.RelationshipInfoListener {
1:ed92957: 		String server;
1:ed92957: 
1:ed92957: 		public RelationshipInfoListenerImpl(String server) {
1:ed92957: 			this.server = server;
1:ed92957: 		}
1:ed92957: 
1:ed92957: 		public void updateRelationship(RelationshipInfo r) {
1:ed92957: 			if (this.server.equals(modelInfoServiceHint)) {
1:ed92957: 				addFunctionCall("addRelationship", r);
1:ed92957: 			}
1:ed92957: 		}
1:ed92957: 
1:ed92957: 		public void removeRelationship(RelationshipInfo r) {
1:ed92957: 			// todo
1:ed92957: 		}
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	public ServerSideClass() {
1:ed92957: 		System.err.println("SSC Built!");
1:ed92957: 
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	@SuppressWarnings("unused")
1:ed92957: 	private String bundleStateToString(int bundleState) {
1:ed92957: 		switch (bundleState) {
1:ed92957: 		case Bundle.UNINSTALLED:
1:ed92957: 			return "UNINSTALLED";
1:ed92957: 		case Bundle.INSTALLED:
1:ed92957: 			return "INSTALLED";
1:ed92957: 		case Bundle.RESOLVED:
1:ed92957: 			return "RESOLVED";
1:ed92957: 		case Bundle.STARTING:
1:ed92957: 			return "STARTING";
1:ed92957: 		case Bundle.STOPPING:
1:ed92957: 			return "STOPPING";
1:ed92957: 		case Bundle.ACTIVE:
1:ed92957: 			return "ACTIVE";
1:ed92957: 		default:
1:ed92957: 			return "UNKNOWN[" + bundleState + "]";
1:ed92957: 		}
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	/**
1:ed92957: 	 * this is invoked by a page onload.. so until it's invoked.. we dont care
1:ed92957: 	 * about components
1:ed92957: 	 */
1:ed92957: 	public void getInitialComponents(String dataProvider) {
1:ed92957: 
1:ed92957: 		System.err.println("GET INITIAL BUNDLES ASKED TO USE DATAPROVIDER "
1:ed92957: 				+ dataProvider);
1:ed92957: 
1:ed92957: 		if (dataProvider == null)
1:ed92957: 			throw new IllegalArgumentException(
1:ed92957: 					"Unable to accept 'null' as a dataProvider");
1:ed92957: 
1:ed92957: 		// do we need to update?
1:ed92957: 		if (!this.modelInfoServiceHint.equals(dataProvider)) {
1:ed92957: 
1:ed92957: 			this.modelInfoServiceHint = dataProvider;
1:ed92957: 
1:ed92957: 			if (!(this.ModelInfoService == null)) {
1:ed92957: 				// we already had a provider.. we need to shut down the existing
1:ed92957: 				// components & relationships in the browsers..
1:ed92957: 				addFunctionCall("forgetAboutEverything");
1:ed92957: 			}
1:ed92957: 
1:ed92957: 			ServletContext context = org.directwebremoting.ServerContextFactory
1:ed92957: 					.get().getServletContext();
1:ed92957: 			Object o = context.getAttribute("osgi-bundlecontext");
1:ed92957: 			if (o != null) {
1:ed92957: 				if (o instanceof BundleContext) {
1:ed92957: 					BundleContext b_ctx = (BundleContext) o;
1:ed92957: 
1:ed92957: 					System.err.println("Looking up bcip");
1:ed92957: 					try {
1:ed92957: 						ServiceReference sr[] = b_ctx.getServiceReferences(
1:ed92957: 								ModelInfoService.class.getName(),
1:ed92957: 								"(displayName=" + this.modelInfoServiceHint
1:ed92957: 										+ ")");
1:7095362: 						
1:ed92957: 						if (sr != null) {
1:ed92957: 							System.err.println("Getting bcip");
1:ed92957: 							this.ModelInfoService = (ModelInfoService) b_ctx
1:ed92957: 									.getService(sr[0]);
1:ed92957: 							System.err.println("Got bcip "
1:ed92957: 									+ this.ModelInfoService);
1:ed92957: 						} else {
1:ed92957: 							System.err.println("UNABLE TO FIND BCIP!!");
1:ed92957: 							System.err.println("UNABLE TO FIND BCIP!!");
1:ed92957: 							System.err.println("UNABLE TO FIND BCIP!!");
1:ed92957: 						}
1:ed92957: 					} catch (InvalidSyntaxException ise) {
1:ed92957: 
1:ed92957: 					}
1:ed92957: 
1:ed92957: 					if (this.ModelInfoService != null) {
1:ed92957: 						if (!rlisteners.containsKey(this.ModelInfoService)) {
1:ed92957: 							RelationshipInfoProvider.RelationshipInfoListener rl = new RelationshipInfoListenerImpl(
1:ed92957: 									this.modelInfoServiceHint);
1:ed92957: 							rlisteners.put(this.ModelInfoService, rl);
1:ed92957: 							this.ModelInfoService.getRelationshipInfoProvider()
1:ed92957: 									.registerRelationshipInfoListener(rl);
1:ed92957: 						}
1:ed92957: 
1:ed92957: 						if (!clisteners.containsKey(this.ModelInfoService)) {
1:ed92957: 							ComponentInfoProvider.ComponentInfoListener cl = new ComponentInfoListenerImpl(
1:ed92957: 									this.modelInfoServiceHint);
1:ed92957: 							clisteners.put(this.ModelInfoService, cl);
1:ed92957: 							this.ModelInfoService.getComponentInfoProvider()
1:ed92957: 									.registerComponentInfoListener(cl);
1:ed92957: 						}
1:ed92957: 					}
1:ed92957: 				}
1:ed92957: 			}
1:ed92957: 
1:ed92957: 		}
1:ed92957: 
1:ed92957: 		Collection<ComponentInfo> bis = this.ModelInfoService
1:ed92957: 				.getComponentInfoProvider().getComponents();
1:ed92957: 		System.err.println("Got " + (bis == null ? "null" : bis.size())
1:ed92957: 				+ " components back from the provider ");
1:ed92957: 		if (bis != null) {
1:ed92957: 			for (ComponentInfo b : bis) {
1:ed92957: 
1:ed92957: 				System.err.println("Adding Component .. " + b.getId());
1:ed92957: 
1:ed92957: 				addFunctionCall("addComponent", b);
1:ed92957: 			}
1:ed92957: 		}
1:ed92957: 
1:ed92957: 		Collection<RelationshipInfo> ris = this.ModelInfoService
1:ed92957: 				.getRelationshipInfoProvider().getRelationships();
1:ed92957: 		System.err.println("Got " + (ris == null ? "null" : ris.size())
1:ed92957: 				+ " relationships back from the provider ");
1:ed92957: 		if (ris != null) {
1:ed92957: 			for (RelationshipInfo r : ris) {
1:ed92957: 				System.err.println("Adding relationship type " + r.getType()
1:ed92957: 						+ " called " + r.getName() + " from "
1:ed92957: 						+ r.getProvidedBy().getId());
1:ed92957: 
1:ed92957: 				addFunctionCall("addRelationship", r);
1:ed92957: 			}
1:ed92957: 		}
1:ed92957: 
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	private void addFunctionCall(String name, Object... params) {
1:ed92957: 		final ScriptBuffer script = new ScriptBuffer();
1:ed92957: 		script.appendScript(name).appendScript("(");
1:ed92957: 		for (int i = 0; i < params.length; i++) {
1:ed92957: 			if (i != 0)
1:ed92957: 				script.appendScript(",");
1:ed92957: 			script.appendData(params[i]);
1:ed92957: 		}
1:ed92957: 		script.appendScript(");");
1:ed92957: 		Browser.withAllSessions(new Runnable() {
1:ed92957: 			public void run() {
1:ed92957: 				for (ScriptSession s : Browser.getTargetSessions()) {
1:ed92957: 					s.addScript(script);
1:ed92957: 				}
1:ed92957: 			}
1:ed92957: 		});
1:ed92957: 	}
1:ed92957: 
1:ed92957: 	public String[] getProviders() {
1:ed92957: 		System.err.println("Getting providers...");
1:ed92957: 		ArrayList<String> result = new ArrayList<String>();
1:ed92957: 		ServletContext context = ServerContextFactory.get().getServletContext();
1:ed92957: 		Object o = context.getAttribute("osgi-bundlecontext");
1:ed92957: 		if (o != null) {
1:ed92957: 			if (o instanceof BundleContext) {
1:ed92957: 				BundleContext b_ctx = (BundleContext) o;
1:ed92957: 				try {
1:ed92957: 					System.err.println("Getting providers [2]...");
1:ed92957: 					ServiceReference[] srs = b_ctx.getServiceReferences(
1:ed92957: 							ModelInfoService.class.getName(), null);
1:ed92957: 					System.err.println("Got.. " + srs);
1:ed92957: 					if (srs == null || srs.length == 0) {
1:ed92957: 						System.err.println("NO DATA PROVIDERS");
1:ed92957: 						throw new RuntimeException(
1:ed92957: 								"Unable to find any data providers");
1:ed92957: 					}
1:ed92957: 					System.err.println("Processing srs as loop.");
1:ed92957: 					for (ServiceReference sr : srs) {
1:ed92957: 						System.err.println("Processing srs entry...");
1:ed92957: 
1:ed92957: 						String name = (String.valueOf(sr
1:ed92957: 								.getProperty("displayName")));
1:7095362: 						
1:7095362: 						Long bid = sr.getBundle().getBundleId();
1:7095362: 						
1:7095362: 						System.err.println("ZZZZ Name: " + name);
1:7095362: 						System.err.println("ZZZZ Bundle Id: " + bid);
1:ed92957: 
1:ed92957: 						result.add(name);
1:ed92957: 					}
1:ed92957: 					System.err.println("Processed srs as loop.");
1:ed92957: 				} catch (InvalidSyntaxException e) {
1:ed92957: 					// wont happen, the exception relates to the filter, (2nd
1:ed92957: 					// arg above), which is constant null.
1:ed92957: 				}
1:ed92957: 			}
1:ed92957: 		}
1:ed92957: 		System.err.println("Returning " + result.size());
1:ed92957: 		String[] arr = new String[result.size()];
1:ed92957: 		arr = result.toArray(arr);
1:ed92957: 		for (String x : arr) {
1:ed92957: 			System.err.println(" - " + x);
1:ed92957: 		}
1:ed92957: 		return arr;
1:ed92957: 	}
1:ed92957: }
============================================================================
author:Jeremy Hughes
-------------------------------------------------------------------------------
commit:a220afc
author:Zoe Slattery
-------------------------------------------------------------------------------
commit:7095362
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.util.tracker.ServiceTracker;
1: 	
1: 	private ModelInfoService blah;
1: 	public ServerSideClass(ModelInfoService blah) {
1: 		this.blah = blah;
1: 	}
/////////////////////////////////////////////////////////////////////////
1: 						
/////////////////////////////////////////////////////////////////////////
1: 						
1: 						Long bid = sr.getBundle().getBundleId();
1: 						
1: 						System.err.println("ZZZZ Name: " + name);
1: 						System.err.println("ZZZZ Bundle Id: " + bid);
commit:ed92957
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.samples.goat.web;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.servlet.ServletContext;
1: 
1: import org.apache.aries.samples.goat.info.ComponentInfoImpl;
1: import org.apache.aries.samples.goat.info.RelationshipInfoImpl;
1: 
1: import org.apache.aries.samples.goat.api.ComponentInfo;
1: import org.apache.aries.samples.goat.api.ComponentInfoProvider;
1: import org.apache.aries.samples.goat.api.ModelInfoService;
1: import org.apache.aries.samples.goat.api.RelationshipInfo;
1: import org.apache.aries.samples.goat.api.RelationshipInfoProvider;
1: 
1: import org.directwebremoting.Browser;
1: import org.directwebremoting.ScriptBuffer;
1: import org.directwebremoting.ScriptSession;
1: import org.directwebremoting.ServerContextFactory;
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.InvalidSyntaxException;
1: import org.osgi.framework.ServiceReference;
1: 
1: public class ServerSideClass {
1: 
1: 	private String modelInfoServiceHint = "";
1: 
1: 	private ModelInfoService ModelInfoService = null;
1: 
1: 	private Map<ModelInfoService, ComponentInfoProvider.ComponentInfoListener> clisteners = new HashMap<ModelInfoService, ComponentInfoProvider.ComponentInfoListener>();
1: 	private Map<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener> rlisteners = new HashMap<ModelInfoService, RelationshipInfoProvider.RelationshipInfoListener>();
1: 
1: 	private class ComponentInfoListenerImpl implements
1: 			ComponentInfoProvider.ComponentInfoListener {
1: 		String server;
1: 
1: 		public ComponentInfoListenerImpl(String server) {
1: 			this.server = server;
1: 		}
1: 
1: 		public void updateComponent(ComponentInfo b) {
1: 			if (this.server.equals(modelInfoServiceHint)) {
1: 				// todo: only issue the add for the new bundle, and affected
1: 				// other bundles.
1: 				//getInitialComponents(modelInfoServiceHint);
1: 				//System.out.println("State is: " + b.getComponentProperties().get("State"));
1: 				addFunctionCall("addComponent", b);
1: 			}
1: 		}
1: 
1: 		public void removeComponent(ComponentInfo b) {
1: 			// todo
1: 		}
1: 	}
1: 	private class RelationshipInfoListenerImpl implements
1: 			RelationshipInfoProvider.RelationshipInfoListener {
1: 		String server;
1: 
1: 		public RelationshipInfoListenerImpl(String server) {
1: 			this.server = server;
1: 		}
1: 
1: 		public void updateRelationship(RelationshipInfo r) {
1: 			if (this.server.equals(modelInfoServiceHint)) {
1: 				addFunctionCall("addRelationship", r);
1: 			}
1: 		}
1: 
1: 		public void removeRelationship(RelationshipInfo r) {
1: 			// todo
1: 		}
1: 	}
1: 
1: 	public ServerSideClass() {
1: 		System.err.println("SSC Built!");
1: 
1: 	}
1: 
1: 	@SuppressWarnings("unused")
1: 	private String bundleStateToString(int bundleState) {
1: 		switch (bundleState) {
1: 		case Bundle.UNINSTALLED:
1: 			return "UNINSTALLED";
1: 		case Bundle.INSTALLED:
1: 			return "INSTALLED";
1: 		case Bundle.RESOLVED:
1: 			return "RESOLVED";
1: 		case Bundle.STARTING:
1: 			return "STARTING";
1: 		case Bundle.STOPPING:
1: 			return "STOPPING";
1: 		case Bundle.ACTIVE:
1: 			return "ACTIVE";
1: 		default:
1: 			return "UNKNOWN[" + bundleState + "]";
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * this is invoked by a page onload.. so until it's invoked.. we dont care
1: 	 * about components
1: 	 */
1: 	public void getInitialComponents(String dataProvider) {
1: 
1: 		System.err.println("GET INITIAL BUNDLES ASKED TO USE DATAPROVIDER "
1: 				+ dataProvider);
1: 
1: 		if (dataProvider == null)
1: 			throw new IllegalArgumentException(
1: 					"Unable to accept 'null' as a dataProvider");
1: 
1: 		// do we need to update?
1: 		if (!this.modelInfoServiceHint.equals(dataProvider)) {
1: 
1: 			this.modelInfoServiceHint = dataProvider;
1: 
1: 			if (!(this.ModelInfoService == null)) {
1: 				// we already had a provider.. we need to shut down the existing
1: 				// components & relationships in the browsers..
1: 				addFunctionCall("forgetAboutEverything");
1: 			}
1: 
1: 			ServletContext context = org.directwebremoting.ServerContextFactory
1: 					.get().getServletContext();
1: 			Object o = context.getAttribute("osgi-bundlecontext");
1: 			if (o != null) {
1: 				if (o instanceof BundleContext) {
1: 					BundleContext b_ctx = (BundleContext) o;
1: 
1: 					System.err.println("Looking up bcip");
1: 					try {
1: 						ServiceReference sr[] = b_ctx.getServiceReferences(
1: 								ModelInfoService.class.getName(),
1: 								"(displayName=" + this.modelInfoServiceHint
1: 										+ ")");
1: 						if (sr != null) {
1: 							System.err.println("Getting bcip");
1: 							this.ModelInfoService = (ModelInfoService) b_ctx
1: 									.getService(sr[0]);
1: 							System.err.println("Got bcip "
1: 									+ this.ModelInfoService);
1: 						} else {
1: 							System.err.println("UNABLE TO FIND BCIP!!");
1: 							System.err.println("UNABLE TO FIND BCIP!!");
1: 							System.err.println("UNABLE TO FIND BCIP!!");
1: 						}
1: 					} catch (InvalidSyntaxException ise) {
1: 
1: 					}
1: 
1: 					if (this.ModelInfoService != null) {
1: 						if (!rlisteners.containsKey(this.ModelInfoService)) {
1: 							RelationshipInfoProvider.RelationshipInfoListener rl = new RelationshipInfoListenerImpl(
1: 									this.modelInfoServiceHint);
1: 							rlisteners.put(this.ModelInfoService, rl);
1: 							this.ModelInfoService.getRelationshipInfoProvider()
1: 									.registerRelationshipInfoListener(rl);
1: 						}
1: 
1: 						if (!clisteners.containsKey(this.ModelInfoService)) {
1: 							ComponentInfoProvider.ComponentInfoListener cl = new ComponentInfoListenerImpl(
1: 									this.modelInfoServiceHint);
1: 							clisteners.put(this.ModelInfoService, cl);
1: 							this.ModelInfoService.getComponentInfoProvider()
1: 									.registerComponentInfoListener(cl);
1: 						}
1: 					}
1: 				}
1: 			}
1: 
1: 		}
1: 
1: 		Collection<ComponentInfo> bis = this.ModelInfoService
1: 				.getComponentInfoProvider().getComponents();
1: 		System.err.println("Got " + (bis == null ? "null" : bis.size())
1: 				+ " components back from the provider ");
1: 		if (bis != null) {
1: 			for (ComponentInfo b : bis) {
1: 
1: 				System.err.println("Adding Component .. " + b.getId());
1: 
1: 				addFunctionCall("addComponent", b);
1: 			}
1: 		}
1: 
1: 		Collection<RelationshipInfo> ris = this.ModelInfoService
1: 				.getRelationshipInfoProvider().getRelationships();
1: 		System.err.println("Got " + (ris == null ? "null" : ris.size())
1: 				+ " relationships back from the provider ");
1: 		if (ris != null) {
1: 			for (RelationshipInfo r : ris) {
1: 				System.err.println("Adding relationship type " + r.getType()
1: 						+ " called " + r.getName() + " from "
1: 						+ r.getProvidedBy().getId());
1: 
1: 				addFunctionCall("addRelationship", r);
1: 			}
1: 		}
1: 
1: 	}
1: 
1: 	private void addFunctionCall(String name, Object... params) {
1: 		final ScriptBuffer script = new ScriptBuffer();
1: 		script.appendScript(name).appendScript("(");
1: 		for (int i = 0; i < params.length; i++) {
1: 			if (i != 0)
1: 				script.appendScript(",");
1: 			script.appendData(params[i]);
1: 		}
1: 		script.appendScript(");");
1: 		Browser.withAllSessions(new Runnable() {
1: 			public void run() {
1: 				for (ScriptSession s : Browser.getTargetSessions()) {
1: 					s.addScript(script);
1: 				}
1: 			}
1: 		});
1: 	}
1: 
1: 	public String[] getProviders() {
1: 		System.err.println("Getting providers...");
1: 		ArrayList<String> result = new ArrayList<String>();
1: 		ServletContext context = ServerContextFactory.get().getServletContext();
1: 		Object o = context.getAttribute("osgi-bundlecontext");
1: 		if (o != null) {
1: 			if (o instanceof BundleContext) {
1: 				BundleContext b_ctx = (BundleContext) o;
1: 				try {
1: 					System.err.println("Getting providers [2]...");
1: 					ServiceReference[] srs = b_ctx.getServiceReferences(
1: 							ModelInfoService.class.getName(), null);
1: 					System.err.println("Got.. " + srs);
1: 					if (srs == null || srs.length == 0) {
1: 						System.err.println("NO DATA PROVIDERS");
1: 						throw new RuntimeException(
1: 								"Unable to find any data providers");
1: 					}
1: 					System.err.println("Processing srs as loop.");
1: 					for (ServiceReference sr : srs) {
1: 						System.err.println("Processing srs entry...");
1: 
1: 						String name = (String.valueOf(sr
1: 								.getProperty("displayName")));
1: 
1: 						result.add(name);
1: 					}
1: 					System.err.println("Processed srs as loop.");
1: 				} catch (InvalidSyntaxException e) {
1: 					// wont happen, the exception relates to the filter, (2nd
1: 					// arg above), which is constant null.
1: 				}
1: 			}
1: 		}
1: 		System.err.println("Returning " + result.size());
1: 		String[] arr = new String[result.size()];
1: 		arr = result.toArray(arr);
1: 		for (String x : arr) {
1: 			System.err.println(" - " + x);
1: 		}
1: 		return arr;
1: 	}
1: }
============================================================================