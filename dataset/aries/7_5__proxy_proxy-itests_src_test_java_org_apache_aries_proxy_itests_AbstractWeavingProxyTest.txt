1:96d4e06: /*
1:96d4e06:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d4e06:  * or more contributor license agreements.  See the NOTICE file
1:96d4e06:  * distributed with this work for additional information
1:96d4e06:  * regarding copyright ownership.  The ASF licenses this file
1:96d4e06:  * to you under the Apache License, Version 2.0 (the
1:96d4e06:  * "License"); you may not use this file except in compliance
1:96d4e06:  * with the License.  You may obtain a copy of the License at
1:96d4e06:  *
1:96d4e06:  *   http://www.apache.org/licenses/LICENSE-2.0
1:96d4e06:  *
1:96d4e06:  * Unless required by applicable law or agreed to in writing,
1:96d4e06:  * software distributed under the License is distributed on an
1:96d4e06:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:96d4e06:  * KIND, either express or implied.  See the License for the
1:96d4e06:  * specific language governing permissions and limitations
1:96d4e06:  * under the License.
1:96d4e06:  */
1:96d4e06: package org.apache.aries.proxy.itests;
1:6990d03: 
1:96d4e06: import static org.junit.Assert.assertSame;
1:96d4e06: import static org.junit.Assert.fail;
1:6990d03: 
1:6990d03: import java.util.AbstractList;
1:96d4e06: import java.util.ArrayList;
1:96d4e06: import java.util.Collection;
1:96d4e06: import java.util.concurrent.Callable;
1:6990d03: 
1:bfc9463: import org.apache.aries.proxy.FinalModifierException;
1:96d4e06: import org.apache.aries.proxy.weaving.WovenProxy;
1:bfc9463: import org.apache.aries.proxy.weavinghook.ProxyWeavingController;
1:bfc9463: import org.apache.aries.proxy.weavinghook.WeavingHelper;
1:96d4e06: import org.junit.Test;
1:1cc2980: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1:1cc2980: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1:96d4e06: import org.osgi.framework.Bundle;
1:bfc9463: import org.osgi.framework.hooks.weaving.WovenClass;
3:bfc9463: 
1:1cc2980: @ExamReactorStrategy(PerMethod.class)
1:ff49259: public abstract class AbstractWeavingProxyTest extends AbstractProxyTest
1:96d4e06: {
1:6990d03: 
1:96d4e06:   /**
1:96d4e06:    * This test does two things. First of all it checks that we can proxy a final 
1:96d4e06:    * class. It also validates that the class implements WovenProxy, and that the
1:96d4e06:    * delegation still works
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void checkProxyFinalClass() throws Exception
1:96d4e06:   {
1:ff49259:     Bundle b = bundleContext.getBundle();
1:96d4e06:     TestCallable dispatcher = new TestCallable();
1:96d4e06:     TestCallable template = new TestCallable();
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:96d4e06:     classes.add(TestCallable.class);
1:ff49259:     @SuppressWarnings("unchecked")
1:ff49259: 	Callable<Object> o = (Callable<Object>) mgr.createDelegatingProxy(b, classes, 
1:96d4e06:         dispatcher, template);
1:96d4e06:     if(!!!(o instanceof WovenProxy))
1:96d4e06:       fail("Proxy should be woven!");
1:6990d03: 
1:96d4e06:     Object inner = new Integer(3);
1:96d4e06:     dispatcher.setReturn(new TestCallable());
1:96d4e06:     ((TestCallable)dispatcher.call()).setReturn(inner);
1:6990d03: 
1:96d4e06:     assertSame("Should return the same object", inner, o.call());
1:bfc9463:   }
1:6990d03: 
1:96d4e06:   /**
1:96d4e06:    * This method checks that we correctly proxy a class with final methods.
1:96d4e06:    */
1:96d4e06:   @Test
1:96d4e06:   public void checkProxyFinalMethods() throws Exception
1:bfc9463:   {
1:ff49259:     Bundle b = bundleContext.getBundle();
1:96d4e06:     Callable<Object> c = new TestCallable();
1:96d4e06:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:bfc9463:     Runnable r = new Runnable() {
1:bfc9463:       public final void run() {
4:96d4e06:       }
1:bfc9463:     };
1:bfc9463:     classes.add(r.getClass());
1:bfc9463:     Object o = mgr.createDelegatingProxy(b, classes, c, r);
1:96d4e06:     if(!!!(o instanceof WovenProxy))
1:96d4e06:       fail("Proxy should be woven!");
1:96d4e06:   }
1:6990d03: 
1:bfc9463:   @Test(expected = FinalModifierException.class)
1:bfc9463:   public void checkProxyController() throws Exception
1:96d4e06:   {
1:6990d03: 
1:bfc9463:     context().registerService(ProxyWeavingController.class.getName(), new ProxyWeavingController() {
1:6990d03: 
1:bfc9463:       public boolean shouldWeave(WovenClass arg0, WeavingHelper arg1)
1:bfc9463:       {
1:bfc9463:         return false;
1:bfc9463:       }
1:bfc9463:     }, null);
1:6990d03: 
1:ff49259:     Bundle b = bundleContext.getBundle();
1:bfc9463:     Callable<Object> c = new TestCallable();
1:bfc9463:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:6990d03:     // Don't use anonymous inner class in this test as IBM and Sun load it at a different time
1:6990d03:     // For IBM JDK, the anonymous inner class will be loaded prior to the controller is registered.
1:6990d03:     Callable<?> callable = new TestFinalDelegate();
1:6990d03:     classes.add(callable.getClass());
1:6990d03:     Object o = mgr.createDelegatingProxy(b, classes, c, callable);
1:bfc9463:     if(o instanceof WovenProxy)
1:bfc9463:       fail("Proxy should not have been woven!");
1:6990d03:   }
1:6990d03: 
1:6990d03:   private static class TestFinalDelegate extends AbstractList<String> implements Callable<String> {
1:6990d03: 
1:6990d03:     @Override
1:6990d03:     public String get(int location)
1:6990d03:     {
1:6990d03:       return null;
1:6990d03:     }
1:6990d03: 
1:6990d03:     @Override
1:6990d03:     public int size()
1:6990d03:     {
1:6990d03:       return 0;
1:6990d03:     }
1:6990d03: 
1:6990d03:     public final String call() throws Exception
1:6990d03:     {
1:6990d03:       return null;
1:ff49259:     }
1:6990d03:   }
1:bfc9463: }
============================================================================
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1cc2980
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
1: import org.ops4j.pax.exam.spi.reactors.PerMethod;
1: @ExamReactorStrategy(PerMethod.class)
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:ff49259
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractWeavingProxyTest extends AbstractProxyTest
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
1:     @SuppressWarnings("unchecked")
1: 	Callable<Object> o = (Callable<Object>) mgr.createDelegatingProxy(b, classes, 
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
/////////////////////////////////////////////////////////////////////////
1:     Bundle b = bundleContext.getBundle();
/////////////////////////////////////////////////////////////////////////
1: }
author:Holly Cummins
-------------------------------------------------------------------------------
commit:730e256
/////////////////////////////////////////////////////////////////////////
0: public class AbstractWeavingProxyTest extends AbstractProxyTest
/////////////////////////////////////////////////////////////////////////
author:Emily Jiang
-------------------------------------------------------------------------------
commit:6990d03
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.mavenBundle;
0: import static org.apache.aries.itest.ExtraOptions.paxLogging;
0: import static org.apache.aries.itest.ExtraOptions.testOptions;
1: import java.util.AbstractList;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:     // Don't use anonymous inner class in this test as IBM and Sun load it at a different time
1:     // For IBM JDK, the anonymous inner class will be loaded prior to the controller is registered.
1:     Callable<?> callable = new TestFinalDelegate();
1:     classes.add(callable.getClass());
1:     Object o = mgr.createDelegatingProxy(b, classes, c, callable);
1: 
0:     return testOptions(
0:         paxLogging("DEBUG"),
0:         // Bundles
0:         mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:         mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:         mavenBundle("org.ow2.asm", "asm-all"),
0:         // don't install the blueprint sample here as it will be installed onto the same framework as the blueprint core bundle
0:         // mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
0:         mavenBundle("org.osgi", "org.osgi.compendium"),
0:         // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0:         PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0:         equinox().version("3.7.0.v20110613")
0:     );
1:   }
1:   private static class TestFinalDelegate extends AbstractList<String> implements Callable<String> {
1: 
1:     @Override
1:     public String get(int location)
1:     {
1: 
1:       return null;
1:     }
1: 
1:     @Override
1:     public int size()
1:     {
1: 
1:       return 0;
1:     }
1: 
1:     public final String call() throws Exception
1:     {
1: 
1:       return null;
1:     }
commit:b8839d6
/////////////////////////////////////////////////////////////////////////
0:           mavenBundle("org.ow2.asm", "asm-all"),
author:Alasdair Nottingham
-------------------------------------------------------------------------------
commit:bfc9463
/////////////////////////////////////////////////////////////////////////
1: import org.apache.aries.proxy.FinalModifierException;
1: import org.apache.aries.proxy.weavinghook.ProxyWeavingController;
1: import org.apache.aries.proxy.weavinghook.WeavingHelper;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.hooks.weaving.WovenClass;
/////////////////////////////////////////////////////////////////////////
1:   
1:   @Test(expected = FinalModifierException.class)
1:   public void checkProxyController() throws Exception
1:   {
1:     context().registerService(ProxyWeavingController.class.getName(), new ProxyWeavingController() {
1:       
1:       public boolean shouldWeave(WovenClass arg0, WeavingHelper arg1)
1:       {
1:         return false;
1:       }
1:     }, null);
1:     
0:     ProxyManager mgr = context().getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     Callable<Object> c = new TestCallable();
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:     Runnable r = new Runnable() {
1:       public final void run() {
1:       }
1:     };
1:     classes.add(r.getClass());
1:     Object o = mgr.createDelegatingProxy(b, classes, c, r);
1:     if(o instanceof WovenProxy)
1:       fail("Proxy should not have been woven!");
1:   }
author:Timothy James Ward
-------------------------------------------------------------------------------
commit:f471003
/////////////////////////////////////////////////////////////////////////
0:           equinox().version("3.7.0.v20110613")
commit:96d4e06
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.aries.proxy.itests;
0: 
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.fail;
0: import static org.ops4j.pax.exam.CoreOptions.equinox;
0: import static org.ops4j.pax.exam.CoreOptions.options;
0: import static org.ops4j.pax.exam.CoreOptions.systemProperty;
0: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.concurrent.Callable;
0: 
0: import org.apache.aries.proxy.ProxyManager;
1: import org.apache.aries.proxy.weaving.WovenProxy;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: import org.osgi.framework.Bundle;
0: import org.osgi.framework.FrameworkUtil;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public class WeavingProxyTest extends AbstractProxyTest
1: {
0:   
1:   /**
1:    * This test does two things. First of all it checks that we can proxy a final 
1:    * class. It also validates that the class implements WovenProxy, and that the
1:    * delegation still works
1:    */
1:   @Test
1:   public void checkProxyFinalClass() throws Exception
1:   {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     TestCallable dispatcher = new TestCallable();
1:     TestCallable template = new TestCallable();
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
1:     classes.add(TestCallable.class);
0:     Callable<Object> o = (Callable<Object>) mgr.createDelegatingProxy(b, classes, 
1:         dispatcher, template);
1:     if(!!!(o instanceof WovenProxy))
1:       fail("Proxy should be woven!");
0:     
1:     Object inner = new Integer(3);
1:     dispatcher.setReturn(new TestCallable());
1:     ((TestCallable)dispatcher.call()).setReturn(inner);
0:     
1:     assertSame("Should return the same object", inner, o.call());
1:   }
0:   
1:   /**
1:    * This method checks that we correctly proxy a class with final methods.
1:    */
1:   @Test
1:   public void checkProxyFinalMethods() throws Exception
1:   {
0:     ProxyManager mgr = getService(ProxyManager.class);
0:     Bundle b = FrameworkUtil.getBundle(this.getClass());
1:     Callable<Object> c = new TestCallable();
1:     Collection<Class<?>> classes = new ArrayList<Class<?>>();
0:     Runnable r = new Runnable() {
0:       public final void run() {
1:       }
0:     };
0:     classes.add(r.getClass());
0:     Object o = mgr.createDelegatingProxy(b, classes, c, r);
1:     if(!!!(o instanceof WovenProxy))
1:       fail("Proxy should be woven!");
1:   }
0:    
0:   @org.ops4j.pax.exam.junit.Configuration
0:   public static Option[] configuration() {
0:       Option[] options = options(
0:           // Log
0:           mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
0:           mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
0:           // Felix Config Admin
0:           mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
0:           // Felix mvn url handler
0:           mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
0: 
0: 
0:           // this is how you set the default log level when using pax logging (logProfile)
0:           systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
0: 
0:           // Bundles
0:           mavenBundle("org.apache.aries", "org.apache.aries.util"),
0:           mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
0:           mavenBundle("asm", "asm-all"),
0:           // don't install the blueprint sample here as it will be installed onto the same framework as the blueprint core bundle
0:           // mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
0:           mavenBundle("org.osgi", "org.osgi.compendium"),
0: //          org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
0:           PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
0: 
0:           equinox().version("3.7.0.v20110304")
0:       );
0: 
0:       options = updateOptions(options);
0:       return options;
1:   }
1: }
author:Valentin Mahrwald
-------------------------------------------------------------------------------
commit:86224ba
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.aries.itest.ExtraOptions.*;
/////////////////////////////////////////////////////////////////////////
0:     ProxyManager mgr = context().getService(ProxyManager.class);
/////////////////////////////////////////////////////////////////////////
0:     ProxyManager mgr = context().getService(ProxyManager.class);
/////////////////////////////////////////////////////////////////////////
0:       return testOptions(
0:           paxLogging("DEBUG"),
/////////////////////////////////////////////////////////////////////////
============================================================================